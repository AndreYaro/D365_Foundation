<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransCostProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransCostProposal extends ProjTransCost
{
    ProjProposalCost    projProposalCost;
    ProjCostTrans       projCostTrans;
    ProjTransStatus     proposalTransStatus;

    boolean             calcTransCost;
    Amount              transCost;
    boolean             calcTransTurnover;
    AmountCur           transTurnover;
    boolean             calcLedgerSalesAmountMST;
    AmountMST           ledgerSalesAmountMST;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return projCostTrans.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for this transaction.
    /// </summary>
    /// <returns>
    /// The category ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method retrieves an uninitialized value and must be overridden by classes that extend this
    /// class to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public ProjCategoryId categoryId()
    {
        return projCostTrans.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price for this transaction.
    /// </summary>
    /// <returns>
    /// The cost price for this transaction.
    /// </returns>
    /// <remarks>
    /// This method retrieves an uninitialized value and must be overridden by classes that extend this
    /// class to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public CostPrice costPrice()
    {
        CostPrice              costPrice;
        ProjCostTransCost      projCostTransCost;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostProposal)))
        {
            select count(RecId), sum(CostPrice) from projCostTransCost
            where projCostTransCost.TransId == projCostTrans.TransId;

            //Multiple funding sources exist
            if (projCostTransCost.RecId > 1)
            {
                costPrice = this.qty() ? CurrencyExchangeHelper::price(this.transCost() / this.qty(), this.currencyIdCost()) : 0;
            }
            else
            {
                costPrice = projCostTransCost.CostPrice;
            }
        }
        else
        {
            costPrice = super();
        }

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for sales amounts reported by this transaction.
    /// </summary>
    /// <returns>
    /// The currency code for sales amounts reported by this transaction.
    /// </returns>
    /// <remarks>
    /// This method retrieves an uninitialized value and must be overridden by classes that extend this
    /// class to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projCostTrans.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultdimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default dimensions for this transaction.
    /// </summary>
    /// <returns>
    /// The default dimension for this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden to provide the necessary
    /// functionality for the specific cost transaction.
    /// </remarks>
    public DimensionDefault defaultdimension()
    {
        return projCostTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return projProposalCost.projProposalJour().FundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransDate</Name>
				<Source><![CDATA[
    TransDate getTaxTransDate()
    {
        return projCostTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxBuffer</Name>
				<Source><![CDATA[
    boolean hasTaxBuffer()
    {
        if (projCostTrans)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales amount to be posted to the general ledger.
    /// </summary>
    /// <returns>
    /// Always returns <c>0</c>.
    /// </returns>
    /// <remarks>
    /// Override this method by classes that extend this class to provide the necessary functionality for
    /// the specific transaction.
    /// </remarks>
    public AmountMST ledgerSalesAmountMST()
    {
        AmountMST               ret;
        ProjProposalCostDetail  projProposalCostDetail;
        ProjCostTransSale       projCostTransSale;
        ProjTrans               projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostProposal)))
        {
            if (!calcLedgerSalesAmountMST)
            {
                calcLedgerSalesAmountMST = true;
                while select projProposalCostDetail
                where projProposalCostDetail.ProposalRefRecId == projProposalCost.RecId
                    join projCostTransSale
                        where projCostTransSale.RecId == projProposalCostDetail.SaleRefRecId
                {
                    projTransSale = ProjTrans::newProjProposalCostSale(projProposalCost, projProposalCostDetail, projCostTransSale);
                    ledgerSalesAmountMST += projTransSale.ledgerSalesAmountMST();
                }
            }

            ret = ledgerSalesAmountMST;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return projCostTrans.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjProposalCost _projProposalCost)
    {
        projProposalCost = _projProposalCost;
        projCostTrans    = ProjCostTrans::find(_projProposalCost.TransId);

        super(_projProposalCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method retrieves an uninitialized value and must be overridden by classes that extend this
    /// class to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public ProjId projId()
    {
        return projCostTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project proposal associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// Override this method by classes that extend this class to provide the necessary functionality for
    /// the specific transaction.
    /// </remarks>
    public ProjProposalId proposalId()
    {
        return projProposalCost.ProposalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalTransStatus</Name>
				<Source><![CDATA[
    private ProjTransStatus proposalTransStatus()
    {
        ProjProposalCostDetail  projProposalCostDetail;
        ProjCostTransSale       projCostTransSale;

        if (!proposalTransStatus)
        {
            select SaleRefRecId from projProposalCostDetail
            where projProposalCostDetail.ProposalRefRecId == projProposalCost.RecId
                join TransStatus from projCostTransSale
                    where projCostTransSale.RecId == projProposalCostDetail.SaleRefRecId;

            proposalTransStatus = projCostTransSale.TransStatus;
        }

        return proposalTransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaContractLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the contract billing rule that is associated with this transaction.
    /// </summary>
    /// <returns>
    ///    The ID of the contract billing rule that is associated with this transaction.
    /// </returns>
    public PSAContractLineNum psaContractLineNum()
    {
        return projProposalCost.psaContractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    /// <remarks>
    /// This method retrieves an uninitialized value and must be overridden by classes that extend this
    /// class to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public Qty qty()
    {
        boolean invoiced   = ProjProposalJour::find(projProposalCost.ProposalId).LineProperty   == ProjLinePropertyCode::Invoiced;

        if (invoiced)
        {
            return (select projInvoiceCost
                    where projInvoiceCost.ProjInvoiceId == ProjProposalJour::find(projProposalCost.ProposalId).ProjInvoiceId
                       && projInvoiceCost.TransId       == this.transId()).Qty;
        }
        else
        {
            if (this.proposalTransStatus()   == ProjTransStatus::CreditnoteProposal)
            {
                return -projCostTrans.Qty;
            }
            else
            {
                return projCostTrans.Qty;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// Override this method by classes that extend this class to provide the necessary functionality for
    /// the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        return projProposalCost.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the resource record ID for the resource associated with this transaction.
    /// </summary>
    /// <returns>
    /// The resource record ID.
    /// </returns>
    /// <remarks>
    /// Override this method by classes that extend this class to provide the necessary functionality for
    /// the specific transaction.
    /// </remarks>
    public ResourceRecId resource()
    {
        return projCostTrans.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the resource category record ID for the resource associated with this transaction.
    /// </summary>
    /// <returns>
    /// The resource category record ID.
    /// </returns>
    /// <remarks>
    /// Override this method by classes that extend this class to provide the necessary functionality for
    /// the specific transaction.
    /// </remarks>
    public ResourceCategoryRecId resourceCategory()
    {
        return projCostTrans.ResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    SalesPrice salesPrice()
    {
        SalesPrice             salesPrice;
        Qty                    qty;
        ProjCostTransSale      projCostTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostProposal)))
        {
            select count(RecId), sum(SalesPrice) from projCostTransSale
            where projCostTransSale.TransId == projCostTrans.TransId;

            //Multiple funding sources exist
            if (projCostTransSale.RecId > 1)
            {
                qty = this.qty();
                salesPrice = qty ? CurrencyExchangeHelper::price(this.transTurnover() / qty, this.currencyIdSales()) : 0;
            }
            else
            {
                salesPrice = projCostTransSale.SalesPrice;
            }
        }
        else
        {
            salesPrice = super();
        }

        return salesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// Override this method by classes that extend this class to provide the necessary functionality for
    /// the specific transaction.
    /// </remarks>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjProposalCost));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// Override this method by classes that extend this class to provide the necessary functionality for
    /// the specific transaction.
    /// </remarks>
    public TaxGroup taxGroup()
    {
        return projProposalCost.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item tax group for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// Override this method by classes that extend this class to provide the necessary functionality for
    /// the specific transaction.
    /// </remarks>
    public TaxItemGroup taxItemGroup()
    {
        return projProposalCost.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public Amount transCost()
    {
        Amount                  ret;
        ProjProposalCostDetail  projProposalCostDetail;
        ProjCostTransSale       projCostTransSale;
        ProjCostTransCost       projCostTransCost;
        ProjTransStatus         locSaleTransStatus;
        container               con;
        Query                   query;
        QueryRun                queryRun;
        ProjTrans               projTransSale;
        ProjTrans               projTransCost;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostProposal)))
        {
            if (!calcTransCost)
            {
                calcTransCost = true;
                while select projProposalCostDetail
                where projProposalCostDetail.ProposalRefRecId == projProposalCost.RecId
                    join projCostTransSale
                        where projCostTransSale.RecId == projProposalCostDetail.SaleRefRecId
                {
                    projTransSale = ProjTrans::newProjProposalCostSale(projProposalCost, projProposalCostDetail, projCostTransSale);
                    locSaleTransStatus = projTransSale.transStatus();

                    con = ProjCostTransCost::findForSalesRefRecId(projProposalCostDetail.SaleRefRecId);
                    query = new Query(con);
                    queryRun = new QueryRun(query);
                    while (queryRun.next())
                    {
                        projCostTransCost = queryRun.get(tableNum(ProjCostTransCost));
                        projTransCost = ProjTrans::newProjProposalCostCost(projProposalCost, projProposalCostDetail, projCostTransCost, locSaleTransStatus);
                        transCost += projTransCost.transCost();
                    }
                }
            }

            ret = transCost;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    /// <remarks>
    /// This method retrieves an uninitialized value and must be overridden by classes that extend this
    /// class to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    TransDate   transDate()
    {
        return projProposalCost.projCostTrans().TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// Override this method by classes that extend this class to provide the necessary functionality for
    /// the specific transaction.
    /// </remarks>
    public TransactionID transId()
    {
        return projProposalCost.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        AmountCur               ret;
        ProjProposalCostDetail  projProposalCostDetail;
        ProjCostTransSale       projCostTransSale;
        ProjTrans               projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransCostProposal)))
        {
            if (!calcTransTurnover)
            {
                calcTransTurnover = true;
                while select projProposalCostDetail
                where projProposalCostDetail.ProposalRefRecId == projProposalCost.RecId
                    join projCostTransSale
                        where projCostTransSale.RecId == projProposalCostDetail.SaleRefRecId
                {
                    projTransSale = ProjTrans::newProjProposalCostSale(projProposalCost, projProposalCostDetail, projCostTransSale);
                    transTurnover += projTransSale.transTurnover();
                }
            }

            ret = transTurnover;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnoverGTE</Name>
				<Source><![CDATA[
    public AmountCur transTurnoverGTE()
    {
        ITaxDocumentLine             taxDocumentLineObject;
        AmountCur                    inclTaxAmount;
        AmountCur                    balanceGTE;
        AmountCur                    balance           = this.transTurnover();
        TaxEngineProjCostTransHeader costTransHeader   = TaxEngineProjCostTransHeader::findOrCreateByProjProposalJour(projProposalCost.projProposalJour());
        ITaxDocument                 taxDocumentObject = TaxBusinessService::getTaxDocumentBySource(costTransHeader.TableId, costTransHeader.RecId);
        
        if (taxDocumentObject)
        {
            taxDocumentLineObject = taxDocumentObject.findLineBySource(projProposalCost.TableId, projProposalCost.RecId);
            inclTaxAmount = taxDocumentLineObject.getInclTax().amountTransactionCurrency();

            if (inclTaxAmount)
            {
                if (balance < 0)
                {
                    balanceGTE = CurrencyExchangeHelper::amount(abs(balance) - abs(inclTaxAmount)) * -1;
                }
                else
                {
                    balanceGTE = CurrencyExchangeHelper::amount(balance - abs(inclTaxAmount));
                }
            }
            else
            {
                balanceGTE = balance;
            }
        }
        else
        {
            balanceGTE = balance;
        }
        return balanceGTE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text description.
    /// </summary>
    /// <returns>
    /// The transaction text description.
    /// </returns>
    /// <remarks>
    /// This method retrieves an uninitialized value and must be overridden by classes that extend this
    /// class to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    public TransTxt txt()
    {
        return projProposalCost.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the voucher number associated with this transaction.
    /// </summary>
    /// <returns>
    /// The voucher number associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method retrieves an uninitialized value and must be overridden by classes that extend this
    /// class to provide the necessary functionality for the specific cost transaction.
    /// </remarks>
    Voucher voucherInvoice()
    {
        Voucher ret;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>