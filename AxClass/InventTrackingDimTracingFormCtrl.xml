<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingDimTracingFormCtrl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTrackingDimTracingFormCtrl</c> class is used for controlling layout of preview information
///    and other controls in the tracing form.
/// </summary>
class InventTrackingDimTracingFormCtrl
{
    FormRun                                 formRun;
    InventTrackingDimTracingHierarchyTree   inventTrackingDimTracingHierarchyTree;
    InventTrackingDimTracingCriteria        inventTrackingDimTracingCriteria;

    // Controls in the form
    FormTreeControl             treeControl;
    FormButtonControl           openReferenceCtrl;
    FormMenuButtonControl       newTraceMenuButton;
    FormFunctionButtonControl   onHandMenuButton;
    FormFunctionButtonControl   pickingListMenuButton;

    private InventTrackingDimTracingFormElements formElements;
    
    private static boolean includeWarehouseSpecificInventoryTransactions = WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled();

    // Data sources in the form
    FormDataSource      inventTrans_DS;
    QueryBuildRange     queryBuildRangeInventTrans_RecId;

    FormDataSource      inventTable_DS;
    QueryBuildRange     queryBuildRangeInventTable_ItemId;

    FormDataSource      inventBatch_DS;
    QueryBuildRange     queryBuildRangeInventBatch_ItemId;
    QueryBuildRange     queryBuildRangeInventBatch_BatchId;

    FormDataSource      prodTable_DS;
    QueryBuildRange     queryBuildRangeProdTable_ProdId;

    FormDataSource      inventTrackingDimTracingOnHandTmp_DS;

    // Variables related to the active tree line.
    InventTransOrigin                       inventTransOrigin;
    InventTrans                             inventTrans;
    InventDim                               inventDim;
    internal InventTrackingTransaction      inventTrackingTransaction;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromFormrun</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes class internal variables when the form is fully initialized.
    /// </summary>
    public void initFromFormrun()
    {
        QueryBuildDataSource        qbds;
        int                         i;

        for (i=1; i<= formRun.dataSourceCount(); i++)
        {
            switch (formRun.dataSource(i).cursor().TableId)
            {
                case tableNum(InventBatch):
                    // Only do this for the main InventBatch data source on the form; other ones may be used in other links
                    if (formRun.dataSource(i).name() == tableStr(InventBatch))
                    {
                        inventBatch_DS = formRun.dataSource(i);
                        qbds = inventBatch_DS.query().dataSourceTable(tableNum(InventBatch));
                        qbds.clearDynalinks();

                        queryBuildRangeInventBatch_ItemId = SysQuery::findOrCreateRange(qbds, fieldNum(InventBatch,ItemId));
                        queryBuildRangeInventBatch_ItemId.status(RangeStatus::Locked);

                        queryBuildRangeInventBatch_BatchId = SysQuery::findOrCreateRange(qbds, fieldNum(InventBatch,InventBatchId));
                        queryBuildRangeInventBatch_BatchId.status(RangeStatus::Locked);

                        queryBuildRangeInventBatch_ItemId.value(queryValue(''));
                        queryBuildRangeInventBatch_BatchId.value(queryValue(''));
                        inventBatch_DS.executeQuery();
                    }
                    break;
                case tableNum(InventTrans):
                    inventTrans_DS = formRun.dataSource(i);
                    qbds = inventTrans_DS.query().dataSourceTable(tableNum(InventTrans));
                    qbds.clearDynalinks();

                    queryBuildRangeInventTrans_RecId = SysQuery::findOrCreateRange(qbds, fieldNum(InventTrans,RecId));
                    queryBuildRangeInventTrans_RecId.status(RangeStatus::Locked);
                    queryBuildRangeInventTrans_RecId.value(queryValue(0));
                    inventTrans_DS.executeQuery();
                    break;
                case tableNum(InventTable):
                    inventTable_DS = formRun.dataSource(i);
                    qbds = inventTable_DS.query().dataSourceTable(tableNum(InventTable));
                    qbds.clearDynalinks();

                    queryBuildRangeInventTable_ItemId = SysQuery::findOrCreateRange(qbds, fieldNum(InventTable,ItemId));
                    queryBuildRangeInventTable_ItemId.status(RangeStatus::Locked);

                    queryBuildRangeInventTable_ItemId.value(queryValue(''));
                    inventTable_DS.executeQuery();
                    break;
                case tableNum(InventTrackingDimTracingOnHandTmp):
                    inventTrackingDimTracingOnHandTmp_DS = formRun.dataSource(i);
                    break;
                case tableNum(ProdTable):
                    prodTable_DS = formRun.dataSource(i);
                    qbds = prodTable_DS.query().dataSourceTable(tableNum(ProdTable));
                    qbds.clearDynalinks();

                    queryBuildRangeProdTable_ProdId = SysQuery::findOrCreateRange(qbds, fieldNum(ProdTable, ProdId));
                    queryBuildRangeProdTable_ProdId.status(RangeStatus::Locked);

                    queryBuildRangeProdTable_ProdId.value(SysQuery::valueEmptyString());
                    prodTable_DS.executeQuery();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // For the scenario when opening the form, the variable 'inventTrackingTransaction' is instantiated to a 'dummy' transaction(all the fields will have default values)
        // so the logic to update the form can be done between the top node and the 'dummy' node without having to check all the time for the old node being null.        
        if (includeWarehouseSpecificInventoryTransactions)
        {
            inventTrackingTransaction = InventTransTrackingTransaction::construct();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCriteriaFromCurrentNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create a new set of tracing criteria based on the current tree node.
    /// </summary>
    /// <param name="_lastInventTrackingDimTracingCriteria">
    ///    The criteria used when doing the original trace.
    /// </param>
    /// <returns>
    ///    An <c>InventTrackingDimTracingCriteria</c> instance.
    /// </returns>
    public InventTrackingDimTracingCriteria newCriteriaFromCurrentNode(
        InventTrackingDimTracingCriteria    _lastInventTrackingDimTracingCriteria)
    {
        InventTrackingDimTracingCriteria    newInventTrackingDimTracingCriteria = InventTrackingDimTracingCriteria::construct();

        // Criteria values related to current node       

        if (includeWarehouseSpecificInventoryTransactions)
        {
            newInventTrackingDimTracingCriteria.parmItemIdCriteria(inventTrackingTransaction.getItemId());
            newInventTrackingDimTracingCriteria.parmInventDimCriteria(inventTrackingTransaction.inventDim().data());

            if (inventTrackingTransaction.inventDim().InventBatchId)
            {
                newInventTrackingDimTracingCriteria.parmPdsVendBatchIdCriteria(InventBatch::find(inventTrackingTransaction.inventDim().InventBatchId, inventTrackingTransaction.getItemId()).PdsVendBatchId);
            }
        }
        else
        {
            newInventTrackingDimTracingCriteria.parmItemIdCriteria(inventTransOrigin.ItemId);
            newInventTrackingDimTracingCriteria.parmInventDimCriteria(inventDim.data());

            if (inventDim.InventBatchId)
            {
                newInventTrackingDimTracingCriteria.parmPdsVendBatchIdCriteria(InventBatch::find(inventDim.InventBatchId, inventTransOrigin.ItemId).PdsVendBatchId);
            }
        }

        // Criteria values which aren't specific to any node - but general restricting criteria
        newInventTrackingDimTracingCriteria.parmFromDateCriteria(_lastInventTrackingDimTracingCriteria.parmFromDateCriteria());
        newInventTrackingDimTracingCriteria.parmToDateCriteria(_lastInventTrackingDimTracingCriteria.parmToDateCriteria());

        return newInventTrackingDimTracingCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTreeNodeChange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Call this method when the user select another node in the tree control so that screen layout and data can be updated.
    /// </summary>
    /// <param name="_treeNodeId">
    ///    The ID for the tree node that is selected.
    /// </param>
    public void onTreeNodeChange(TreeItemIdx _treeNodeId)
    {
        InventTrackingDimNodeType   nodeType;
        container                   packedNodeRecords;
        
        int hierarchyNodeId = inventTrackingDimTracingHierarchyTree.treeNodeIdx2HierarchyNodeId(_treeNodeId);

        if (includeWarehouseSpecificInventoryTransactions)
        {
            InventTrackingTransaction currentTrackingTransaction = inventTrackingTransaction;

            if (hierarchyNodeId)
            {
                [nodeType, packedNodeRecords] = inventTrackingDimTracingHierarchyTree.nodeRecords(hierarchyNodeId);
                inventTrackingTransaction = this.createInventTrackingTransactionFromTypeAndContainer(hierarchyNodeId, nodeType, packedNodeRecords);                
            }
            else
            {
                // Top node
                inventTrackingTransaction = InventTransTrackingTransaction::createTopNode(inventTrackingDimTracingCriteria);                
            }
            
            inventTrackingDimTracingHierarchyTree.updateAlreadyTracedStatusCtrl(_treeNodeId);
            
            // Refresh form data sources where needed           
            this.refreshWhenElementChanged(currentTrackingTransaction, inventTrackingTransaction);

            if (openReferenceCtrl)
            {
                openReferenceCtrl.enabled(inventTrackingTransaction.hasReferenceDetails());
            }

            if (newTraceMenuButton)
            {               
                newTraceMenuButton.enabled(inventTrackingTransaction.uniqueKey() != '');               
            }

            if (onHandMenuButton)
            {                
                onHandMenuButton.enabled(inventTrackingTransaction.uniqueKey() != '');                
            }

            if (pickingListMenuButton)
            {                
                pickingListMenuButton.enabled(inventTrackingTransaction.isProductionRelated());               
            }
        }
        else
        {
            InventTransOrigin   currentInventTransOrigin;
            InventTrans         currentInventTrans;
            InventDim           currentInventDim;

            currentInventTransOrigin.data(inventTransOrigin.data());
            currentInventTrans.data(inventTrans.data());
            currentInventDim.data(inventDim.data());

            if (hierarchyNodeId)
            {
                [nodeType, packedNodeRecords] = inventTrackingDimTracingHierarchyTree.nodeRecords(hierarchyNodeId);
                if (nodeType == InventTrackingDimNodeType::InventTrans)
                {
                    [inventTransOrigin, inventTrans] = packedNodeRecords;
                    if (inventTrans.RecId)
                    {
                        inventDim = inventTrans.inventDim();
                    }
                    else
                    {
                        inventDim = null;
                    }
                }
                else
                {
                    inventDim = null;
                }
            }
            else
            {
                // Top node
                inventTransOrigin.clear();
                inventTransOrigin.ItemId = inventTrackingDimTracingCriteria.parmItemIdCriteria();
                inventTrans.clear();
                inventDim.clear();
                inventDim.InventBatchId = inventTrackingDimTracingCriteria.parmInventDimCriteria().InventBatchId;
            }

            inventTrackingDimTracingHierarchyTree.updateAlreadyTracedStatusCtrl(_treeNodeId);
            // Refresh form data sources where needed
            this.refreshDataSources(currentInventTransOrigin, inventTransOrigin, currentInventTrans, inventTrans, currentInventDim, inventDim);

            if (openReferenceCtrl)
            {                
                openReferenceCtrl.enabled(inventTransOrigin.ReferenceId != '' && inventTransOrigin.ReferenceCategory != InventTransType::WMSTransport);
            }

            if (newTraceMenuButton)
            {               
                newTraceMenuButton.enabled(inventTransOrigin.RecId != 0);
            }

            if (onHandMenuButton)
            {                
                onHandMenuButton.enabled(inventTrans.RecId != 0);               
            }

            if (pickingListMenuButton)
            {               
                pickingListMenuButton.enabled(inventTransOrigin.isProductionRelated());
            }
        }      

        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTrackingTransactionFromTypeAndContainer</Name>
				<Source><![CDATA[
    private InventTrackingTransaction createInventTrackingTransactionFromTypeAndContainer(
        int _hierarchyNodeId,
        InventTrackingDimNodeType   nodeType,
        container                   packedNodeRecords)
    {
        [nodeType, packedNodeRecords] = inventTrackingDimTracingHierarchyTree.nodeRecords(_hierarchyNodeId);
        if (nodeType == InventTrackingDimNodeType::InventTrans)
        {
            return InventTransTrackingTransaction::newFromPackedContainer(packedNodeRecords);
        }
        else if (nodeType == InventTrackingDimNodeType::WHSInventoryTransaction)
        {
            return WHSInventoryTrackingTransaction::newFromPackedContainer(packedNodeRecords);
        }
   
        return InventTransTrackingTransaction::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    protected FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHierarchyTree</Name>
				<Source><![CDATA[
    protected InventTrackingDimTracingHierarchyTree parmHierarchyTree(InventTrackingDimTracingHierarchyTree _inventTrackingDimTracingHierarchyTree = inventTrackingDimTracingHierarchyTree)
    {
        inventTrackingDimTracingHierarchyTree = _inventTrackingDimTracingHierarchyTree;

        return inventTrackingDimTracingHierarchyTree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTrackingDimTracingCriteria</Name>
				<Source><![CDATA[
    protected InventTrackingDimTracingCriteria parmInventTrackingDimTracingCriteria(InventTrackingDimTracingCriteria _inventTrackingDimTracingCriteria = inventTrackingDimTracingCriteria)
    {
        inventTrackingDimTracingCriteria = _inventTrackingDimTracingCriteria;

        return inventTrackingDimTracingCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewTraceMenuButton</Name>
				<Source><![CDATA[
    public FormMenuButtonControl parmNewTraceMenuButton(FormMenuButtonControl _newTraceMenuButton = newTraceMenuButton)
    {
        newTraceMenuButton = _newTraceMenuButton;

        return newTraceMenuButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnHandMenuButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmOnHandMenuButton(FormFunctionButtonControl _onHandMenuButton = onHandMenuButton)
    {
        onHandMenuButton = _onHandMenuButton;

        return onHandMenuButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOpenReferenceCtrl</Name>
				<Source><![CDATA[
    public FormButtonControl parmOpenReferenceCtrl(FormButtonControl _openReferenceCtrl = openReferenceCtrl)
    {
        openReferenceCtrl = _openReferenceCtrl;

        return openReferenceCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPickingListMenuButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmPickingListMenuButton(FormFunctionButtonControl _pickingListMenuButton = pickingListMenuButton)
    {
        pickingListMenuButton = _pickingListMenuButton;

        return pickingListMenuButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTrackingDimTracingFormElements</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventTrackingDimTracingFormElements parmInventTrackingDimTracingFormElements(InventTrackingDimTracingFormElements _formElements = _formElements)
    {
        formElements = _formElements;

        return formElements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Research the form data sources when another line in the tree is selected.
    /// </summary>
    /// <param name="_oldInventTransOrigin">
    ///    The <c>InventTransOrigin</c> record associated with the previous tree line.
    /// </param>
    /// <param name="_newInventTransOrigin">
    ///    The <c>InventTransOrigin</c> record associated with the new tree line.
    /// </param>
    /// <param name="_oldInventTrans">
    ///    The <c>InventTrans</c> record associated with the previous tree line.
    /// </param>
    /// <param name="_newInventTrans">
    ///    The <c>InventTrans</c> record associated with the new tree line.
    /// </param>
    /// <param name="_oldInventDim">
    ///    The <c>InventDim</c> record associated with the previous tree line.
    /// </param>
    /// <param name="_newInventDim">
    ///    The <c>InventDim</c> record associated with the new tree line.
    /// </param>
    protected void refreshDataSources(
        InventTransOrigin   _oldInventTransOrigin,
        InventTransOrigin   _newInventTransOrigin,
        InventTrans         _oldInventTrans,
        InventTrans         _newInventTrans,
        InventDim           _oldInventDim,
        InventDim           _newInventDim)
    {
        // Refresh form data sources where needed
        if (_newInventTrans.RecId != _oldInventTrans.RecId)
        {
            queryBuildRangeInventTrans_RecId.value(queryValue(_newInventTrans.RecId));
            inventTrans_DS.executeQuery();
        }

        if (_newInventTransOrigin.ItemId != _oldInventTransOrigin.ItemId
         || _newInventDim.InventBatchId != _oldInventDim.InventBatchId)
        {
            if (_newInventTransOrigin.ItemId)
            {
                queryBuildRangeInventBatch_ItemId.value(queryValue(_newInventTransOrigin.ItemId));
                queryBuildRangeInventBatch_BatchId.value(queryValue(_newInventDim.InventBatchId));
            }
            else
            {
                queryBuildRangeInventBatch_ItemId.value(queryValue(inventTrackingDimTracingCriteria.parmItemIdCriteria()));
                queryBuildRangeInventBatch_BatchId.value(queryValue(inventTrackingDimTracingCriteria.parmInventDimCriteria().InventBatchId));
            }
            inventBatch_DS.executeQuery();
        }

        if (_newInventTransOrigin.ItemId != _oldInventTransOrigin.ItemId)
        {
            if (_newInventTransOrigin.ItemId)
            {
                queryBuildRangeInventTable_ItemId.value(queryValue(_newInventTransOrigin.ItemId));
            }
            else
            {
                queryBuildRangeInventTable_ItemId.value(queryValue(inventTrackingDimTracingCriteria.parmItemIdCriteria()));
            }
            inventTable_DS.executeQuery();
        }       

        if (_newInventTransOrigin.ReferenceCategory != _oldInventTransOrigin.ReferenceCategory
            || _newInventTransOrigin.ReferenceId != _oldInventTransOrigin.ReferenceId)
        {
            this.refreshProductionFastTab(_oldInventTransOrigin, _newInventTransOrigin);
        }

        this.updateInventOnHand();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTrackingTransaction</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventTrackingTransaction getInventTrackingTransaction()
    {
        return inventTrackingTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshWhenElementChanged</Name>
				<Source><![CDATA[
    protected void refreshWhenElementChanged(
        InventTrackingTransaction _oldTrackingTransaction,
        InventTrackingTransaction _newTrackingTransaction)
    {        
        if (_oldTrackingTransaction.uniqueKey() != _newTrackingTransaction.uniqueKey())
        {
            // It is needed to update the InventTrans.RecId so the InventTransOrigin and its subsequent linked datasources
            // (for example InventNonConformanceTable and InventQualityOrderTable) will be refreshed correctly.
            // When the current node is WHS transaction, the InventTrans.RecId will be 0.
            queryBuildRangeInventTrans_RecId.value(queryValue(_newTrackingTransaction.inventTransRecId()));
            inventTrans_DS.executeQuery(); 

            formElements.updateElementsForTrackingTransaction(_newTrackingTransaction);
        }        
        
        if (_newTrackingTransaction.getItemId() != _oldTrackingTransaction.getItemId()
            || _newTrackingTransaction.getBatchId() != _oldTrackingTransaction.getBatchId())
        {
            if (_newTrackingTransaction.getItemId())
            {
                queryBuildRangeInventBatch_ItemId.value(queryValue(_newTrackingTransaction.getItemId()));
                queryBuildRangeInventBatch_BatchId.value(queryValue(_newTrackingTransaction.getBatchId()));
            }
            else
            {
                queryBuildRangeInventBatch_ItemId.value(queryValue(inventTrackingDimTracingCriteria.parmItemIdCriteria()));
                queryBuildRangeInventBatch_BatchId.value(queryValue(inventTrackingDimTracingCriteria.parmInventDimCriteria().InventBatchId));
            }
            inventBatch_DS.executeQuery();
        }

        if (_newTrackingTransaction.getItemId() != _oldTrackingTransaction.getItemId())
        {            
            if (_newTrackingTransaction.getItemId())
            {
                queryBuildRangeInventTable_ItemId.value(queryValue(_newTrackingTransaction.getItemId()));
            }
            else
            {
                queryBuildRangeInventTable_ItemId.value(queryValue(inventTrackingDimTracingCriteria.parmItemIdCriteria()));
            }
            inventTable_DS.executeQuery();
        }

        if (_oldTrackingTransaction.referenceCategory() != _newTrackingTransaction.referenceCategory()
            || _oldTrackingTransaction.referenceId() != _newTrackingTransaction.referenceId())
        {
            this.refreshProductionFastTabWhenChanceTrackingTransaction(_newTrackingTransaction, _oldTrackingTransaction);
        }      
        
        this.updateInventOnHand();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshProductionFastTab</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the data source for the production fast tab.
    /// </summary>
    /// <param name="_oldInventTransOrigin">
    ///    The <c>InventTransOrigin</c> record associated with the previous tree line.
    /// </param>
    /// <param name="_newInventTransOrigin">
    ///    The <c>InventTransOrigin</c> record associated with the new tree line.
    /// </param>
    private void refreshProductionFastTab(
        InventTransOrigin   _oldInventTransOrigin,
        InventTransOrigin   _newInventTransOrigin)
    {
        if (_newInventTransOrigin.isProductionRelated())
        {
            if (_newInventTransOrigin.ReferenceId != _oldInventTransOrigin.ReferenceId)
            {
                queryBuildRangeProdTable_ProdId.value(queryValue(_newInventTransOrigin.ReferenceId));
                prodTable_ds.executeQuery();
            }
        }
        else if (_oldInventTransOrigin.isProductionRelated())
        {
            queryBuildRangeProdTable_ProdId.value(SysQuery::valueEmptyString());
            prodTable_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshProductionFastTabWhenChanceTrackingTransaction</Name>
				<Source><![CDATA[
    private void refreshProductionFastTabWhenChanceTrackingTransaction(
        InventTrackingTransaction _newTrackingTransaction,
        InventTrackingTransaction _oldTrackingTransaction)
    {
        if (_newTrackingTransaction.isProductionRelated())
        {
            if (_newTrackingTransaction.referenceId() != _oldTrackingTransaction.referenceId())
            {
                queryBuildRangeProdTable_ProdId.value(queryValue(_newTrackingTransaction.referenceId()));
                prodTable_ds.executeQuery();
            }            
        }
        else if (_oldTrackingTransaction.isProductionRelated())
        {
            queryBuildRangeProdTable_ProdId.value(SysQuery::valueEmptyString());
            prodTable_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calucalate on-hand quantities for the transaction currently selected in the tree.
    /// </summary>
    private void updateInventOnHand()
    {
        InventDimParm                       inventDimParm;
        InventTrackingDimTracingOnHandTmp   inventTrackingDimTracingOnHandTmp = inventTrackingDimTracingOnHandTmp_DS.cursor();

        delete_from inventTrackingDimTracingOnHandTmp;

        if (includeWarehouseSpecificInventoryTransactions)
        {           
            if (inventTrackingTransaction.uniqueKey())
            {
                // Only track batch and serial
                inventDimParm.InventBatchIdFlag     = NoYes::Yes;
                inventDimParm.InventSerialIdFlag    = NoYes::Yes;
                
                InventOnHandQty inventOnHandQty = InventOnHandQty::newItemDim(inventTrackingTransaction.getItemId(), inventTrackingTransaction.inventDim(), inventDimParm);

                inventTrackingDimTracingOnHandTmp.initFromItemIdDimSum(inventTrackingTransaction.getItemId(), inventTrackingTransaction.inventDim(), inventDimParm, inventOnHandQty.inventSum());
                inventTrackingDimTracingOnHandTmp.insert();
            }
        }
        else
        {
            if (inventTrans)
            {
                // Only track batch and serial
                inventDimParm.InventBatchIdFlag     = NoYes::Yes;
                inventDimParm.InventSerialIdFlag    = NoYes::Yes;
                InventOnHandQty inventOnHandQty = InventOnHandQty::newItemDim(inventTrans.ItemId, inventTrans.inventDim(), inventDimParm);

                inventTrackingDimTracingOnHandTmp.initFromItemIdDimSum(inventTrans.ItemId, inventTrans.inventDim(), inventDimParm, inventOnHandQty.inventSum());
                inventTrackingDimTracingOnHandTmp.insert();
            }
        }

        inventTrackingDimTracingOnHandTmp_DS.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventTrackingDimTracingFormCtrl construct()
    {
        return new InventTrackingDimTracingFormCtrl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create an instance of this class based on the form showing the tracing information.
    /// </summary>
    /// <param name="_formRun">
    ///    The form showing the tracing information.
    /// </param>
    /// <param name="_inventTrackingDimTracingHierarchyTree">
    ///    The <c>InventTrackingDimTracingHierarchyTree</c> instance holding the hierarchy shown in the tree control.
    /// </param>
    /// <param name="_inventTrackingDimTracingCriteria">
    ///    The tracing criterias.
    /// </param>
    /// <returns>
    ///    An new instance of this class.
    /// </returns>
    static public InventTrackingDimTracingFormCtrl newFromForm(
        FormRun                                 _formRun,
        InventTrackingDimTracingHierarchyTree   _inventTrackingDimTracingHierarchyTree,
        InventTrackingDimTracingCriteria        _inventTrackingDimTracingCriteria)
    {
        InventTrackingDimTracingFormCtrl    inventTrackingDimTracingFormCtrl = InventTrackingDimTracingFormCtrl::construct();

        inventTrackingDimTracingFormCtrl.parmFormRun(_formRun);
        inventTrackingDimTracingFormCtrl.parmHierarchyTree(_inventTrackingDimTracingHierarchyTree);
        inventTrackingDimTracingFormCtrl.parmInventTrackingDimTracingCriteria(_inventTrackingDimTracingCriteria);
        return inventTrackingDimTracingFormCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>