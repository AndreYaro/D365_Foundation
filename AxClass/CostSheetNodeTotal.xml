<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetNodeTotal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CostSheetNodeTotal extends CostSheetNodeComposite
{
    NoYes   header;
    NoYes   total;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        header,
        total
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editCostSheetNodeTable</Name>
				<Source><![CDATA[
    protected CostSheetNodeTable editCostSheetNodeTable(boolean _set = false, CostSheetNodeTable _costSheetNodeTable = null)
    {
        CostSheetNodeTable costSheetNodeTable = super(_set, _costSheetNodeTable);

        if (_set)
        {
            header = _costSheetNodeTable.Header;
            total = _costSheetNodeTable.Total;
        }

        costSheetNodeTable.Header = header;
        costSheetNodeTable.Total  = total;

        return costSheetNodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Compares attributes and subnode lists of two costing sheet nodes.
    /// </summary>
    /// <param name="_costSheetNode">
    ///    The costing sheet node to compare to.
    /// </param>
    /// <returns>
    ///    true if the nodes have equal attributes and lists of subnodes; otherwise, false.
    /// </returns>
    public boolean equal(Object _costSheetNode)
    {
        boolean ret = super(_costSheetNode);

        if (ret)
        {
            CostSheetNodeTotal costSheetNodeTotal = _costSheetNode;

            ret = header == costSheetNodeTotal.getHeader() &&
                  total == costSheetNodeTotal.getTotal();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillResultLineList</Name>
				<Source><![CDATA[
    public void fillResultLineList(
        CostSheet   _costSheet,
        List        _resultLineList)
    {
        if (header)
        {
            _resultLineList.addEnd(CostSheetResultLine::construct(code,
                                                                  description,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  0,
                                                                  this.getLevel(_costSheet),
                                                                  1,
                                                                  true));
        }

        ListEnumerator subnodeEnumerator = this.getSubnodeEnumerator();
        while (subnodeEnumerator.moveNext())
        {
            CostSheetNode subnode = subnodeEnumerator.current();
            subnode.fillResultLineList(_costSheet, _resultLineList);
        }

        if (total)
        {
            _resultLineList.addEnd(CostSheetResultLine::construct(code,
                                                                  description,
                                                                  costCalcTransData.getContributionVariable(),
                                                                  costCalcTransData.getContributionConstant(),
                                                                  costCalcTransData.getCostVariable(),
                                                                  costCalcTransData.getCostFixed(),
                                                                  this.getLevel(_costSheet),
                                                                  costCalcTransData.getQty(),
                                                                  false,
                                                                  true));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeader</Name>
				<Source><![CDATA[
    protected NoYes getHeader()
    {
        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the resource index of the image that will represent this node in the editor.
    /// </summary>
    /// <returns>
    ///    The resource ID.
    /// </returns>
    public int getImage()
    {
        return #imageTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotal</Name>
				<Source><![CDATA[
    protected NoYes getTotal()
    {
        return total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getType</Name>
				<Source><![CDATA[
    public CostSheetNodeType getType()
    {
        return CostSheetNodeType::Total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a new instance of the <c>CostSheetNodeTotal</c> class.
    /// </summary>
    /// <param name="_costSheetNodeTable">
    ///     The record in the <c>CostSheetNodeTable</c> table that will be used to initialize this object.
    /// </param>
    /// <param name="_parentNodeId">
    ///     The ID of the parent node.
    /// </param>
    /// <param name="_modeStrategy">
    ///     The <c>CostSheetModeStrategy</c> object that controls the creation of the costing sheet.
    /// </param>
    protected void new(
        CostSheetNodeTable      _costSheetNodeTable,
        CostSheetNodeId         _parentNodeId,
        CostSheetModeStrategy   _modeStrategy)
    {
        header = _costSheetNodeTable.Header;
        total  = _costSheetNodeTable.Total;

        super(_costSheetNodeTable, _parentNodeId, _modeStrategy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack(boolean _areSurchargesPackedByParentContext = false)
    {
        return [#CurrentVersion, this.getType(), #CurrentList] + [super(_areSurchargesPackedByParentContext)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container           base;
        boolean             ret;
        Integer             version = RunBase::getVersion(_packedClass);
        CostSheetNodeType  nodeType;

        switch (version)
        {
            case #CurrentVersion:
                [version, nodeType, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validSubnodeTypeSet</Name>
				<Source><![CDATA[
    public Set validSubnodeTypeSet()
    {
        Set ret = new Set(Types::Enum);

        ret.add(CostSheetNodeType::Total);
        ret.add(CostSheetNodeType::CostGroup);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>CostSheetNodeTotal</c> class.
    /// </summary>
    /// <param name="_costSheetNodeTable">
    ///     The record in the <c>CostSheetNodeTable</c> table that will be used to initialize this object.
    /// </param>
    /// <param name="_parentNodeId">
    ///     The ID of the parent node.
    /// </param>
    /// <param name="_modeStrategy">
    ///     The <c>CostSheetModeStrategy</c> object that controls the creation of the costing sheet.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>CostSheetNodeTotal</c> class.
    /// </returns>
    public static CostSheetNodeTotal construct(
        CostSheetNodeTable _costSheetNodeTable,
        CostSheetNodeId    _parentNodeId,
        CostSheetModeStrategy   _modeStrategy)
    {
        return new CostSheetNodeTotal(_costSheetNodeTable, _parentNodeId, _modeStrategy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>CostSheetNodeTotal</c> class.
    /// </summary>
    /// <param name="_packedNode">
    ///     A container that holds a serialized <c>CostSheetNodeTotal</c> object.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>CostSheetNodeTotal</c> class.
    /// </returns>
    public static CostSheetNodeTotal create(container _packedNode)
    {
        CostSheetNodeTotal node = CostSheetNodeTotal::construct(null, 0, CostSheetModeStrategyPackUnpack::construct());
        boolean ret = node.unpack(_packedNode);

        return ret ? node : null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
