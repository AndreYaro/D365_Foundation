<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcProdLine_PmfBurden</Name>
	<SourceCode>
		<Declaration><![CDATA[
//FS PMF
class BomCalcProdLine_PmfBurden extends BOMCalcProdLine
{
    CostPrice   burdenCost;
    PmfProdCoBy pmfProdCoBy;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates, initializes and runs the calculation.
    /// </summary>
    public void calc()
    {
        setprefix("@SYS28550");
        setprefix(#PreFixField(prodBOM,ItemId));

        if (!this.validate())
        {
            throw Exception::Error;
        }

        this.init();

        this.calcConsumption();

        this.calcBurden();

        if (!this.calcCost(consumptionInventQty))
        {
            return;
        }

        this.updateCalcAmount();
        this.recalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBurden</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates burden cost for coby products with an overhead.
    /// </summary>
    public void calcBurden()
    {
        burdenCost = 0;

        switch (pmfProdCoBy.BurdenType)
        {
            case PmfBurdenType::Percent :
                // The value in the OverheadAmt field is a percentage of the total cost
                burdenCost = (pmfProdCoBy.OverheadAmt / 100) * this.totalOtherCosts() /  (consumptionInventQty ? consumptionInventQty : 1);
                break;
            case PmfBurdenType::PerSeries :
            case PmfBurdenType::PerQuantity :
                // When estimating these two scenarios should behave the same
                if (pmfProdCoBy.CoByQty != 0)
                {
                    burdenCost = pmfProdCoBy.OverheadAmt / pmfProdCoBy.CoByQty;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost consumption for the active co/by product.
    /// </summary>
    protected void calcConsumption()
    {
        Qty                     consumptionBOMQtyVariable,
                                consumptionBOMQtyConstant;

        switch (pmfProdCoBy.BurdenType)
        {
            case PmfBurdenType::Percent:
                [consumptionBOMQtyVariable, consumptionBOMQtyConstant] = this.calculateBurdenVariableConstantOverhead();
                break;
            case PmfBurdenType::PerQuantity:
            case PmfBurdenType::PerSeries:
                consumptionBOMQtyVariable = pmfProdCoBy.QtyCoByCalc * this.parmPmfCostAllocationPct() / 100.00;
                break;
        }

        consumptionInventQty = (consumptionBOMQtyVariable + consumptionBOMQtyConstant);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBurdenVariableConstantOverhead</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the overhead variable and constant amount used in the burden cost calculation.
    /// </summary>
    /// <returns>
    /// The container with two elements: the variable overhead amount and the constant overhead amount for the burden cost calculation.
    /// </returns>
    private container calculateBurdenVariableConstantOverhead()
    {
        ProdCalcTrans otherCosts;

        select sum(CostAmount),sum(CostMarkup)
            from otherCosts
            where  otherCosts.TransRefId   == pmfProdCoBy.ProdId
                && otherCosts.TransRefType == ProdTransRefType::Production
                && otherCosts.CalcType     != ItemCalcType::Burden
                && !otherCosts.Production
                && otherCosts.CollectRefLevel == this.parmParentBOMCalc().parmLevel() + 1   ;

        return [otherCosts.CostAmount, otherCosts.CostMarkup];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance of <c>BomCalcProdLine_PmfBurden</c> class.
    /// </summary>
    protected void initParameters()
    {
        BomCalcLinePmfBurdenInitializer bomCalcLinePmfBurdenInitializer = BomCalcLinePmfBurdenInitializer::construct();

        super();

        bomCalcLinePmfBurdenInitializer.initializeBomCalcLine(this);

        bomCalcLinePmfBurdenInitializer.initializeBomCalcLineFromProdCoBy(this, pmfProdCoBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the vital data to the global ProdCalcTrans record and writes
    /// to the database.
    /// </summary>
    public void insertProdCalcTrans()
    {
        BOMCalcProd localParentBOMCalcProd = this.parmParentBOMCalc() as BOMCalcProd;
        if (!prodCalcTrans.RecId)
        {
            prodCalcTrans.initFromProdTable(
                localParentBOMCalcProd.parmProdTable(),
                calculationType);

            prodCalcTrans.initFromPmfProdCoByProduct(pmfProdCoBy);

            prodCalcTrans.Production        = NoYes::No;

            prodCalcTrans.bom               = NoYes::No;

            prodCalcTrans.Resource          = itemId;
            prodCalcTrans.UnitId            = inventUnitId;
            prodCalcTrans.OprId             = '';
            prodCalcTrans.BOMCalcTransMap::setInventDimStr(inventDimId);
        }

        prodCalcTrans.Qty               = seriesSize;
        prodCalcTrans.TransDate         = this.parmParentBOMCalc().parmCalcDate();

        prodCalcTrans.LineNum           = lineNum;

        prodCalcTrans.CalcGroupId       = bomCalcGroup.CalcGroupId;
        prodCalcTrans.CostGroupId       = costGroup;

        prodCalcTrans.write();

        this.insertProdCalcTransBreakdown();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPmfCostAllocationPct</Name>
				<Source><![CDATA[
    private PmfCostAllocationPct parmPmfCostAllocationPct()
    {
        BOMCalcProd bomCalcProd = this.parmParentBOMCalc() as BOMCalcProd;

        return bomCalcProd.parmPmfCostAllocationPct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPmfProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the PmfProdCoByparameter.
    /// </summary>
    /// <param name="_pmfProdCoBy">
    /// PmfProdCoBy record to set.
    /// </param>
    /// <returns>
    /// PmfProdCoBy record to get or set.
    /// </returns>
    public PmfProdCoBy parmPmfProdCoBy(PmfProdCoBy _pmfProdCoBy = pmfProdCoBy)
    {
        pmfProdCoBy = _pmfProdCoBy;
        return pmfProdCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfBurdenAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns calculated burden cost.
    /// </summary>
    /// <returns>
    /// Calculated burden cost.
    /// </returns>
    public CostPrice pmfBurdenAmount()
    {
        return burdenCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfIsBurden</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the class is representing burden.
    /// </summary>
    /// <returns>
    /// true if the class is representing burden; otherwise, false.
    /// </returns>
    public boolean pmfIsBurden()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalOtherCosts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the overhead amount used in the burden cost calculation.
    /// </summary>
    /// <returns>
    /// The overhead amount for the burden cost calculation.
    /// </returns>
    protected Amount totalOtherCosts()
    {
        Amount  costsVariable,
                costsConstant;

        [costsVariable, costsConstant] = this.calculateBurdenVariableConstantOverhead();

        return costsVariable + costsConstant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is valid for the calculation to be run.
    /// </summary>
    /// <param name="_checkBOM">
    /// Boolean value used to determine if class as called with an
    /// active buffer.
    /// </param>
    /// <returns>
    /// Result of validation.
    /// </returns>
    public boolean validate(boolean _checkBOM = true)
    {
        boolean ret = true;

        if (!itemId)
        {
            return checkFailed("@SYS25157");
        }

        if (!parentBOMCalc)
        {
            return checkFailed(
                strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (_checkBOM && !pmfProdCoBy)
        {
            ret = checkFailed(strfmt("@SYS29104", classId2Name(classidget(this))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns new instance of the BOMCalcProdLine_PmfBurden class.
    /// </summary>
    /// <returns>
    /// New instance of the BOMCalcProdLine_PmfBurden class.
    /// </returns>
    public static BOMCalcProdLine_PmfBurden construct()
    {
        return new BOMCalcProdLine_PmfBurden();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBurdenCalcProd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates new instance of BOMCalcProdLine_PmfBurden
    /// class based on imput parameters.
    /// </summary>
    /// <param name="_prodCoBy">
    /// CO/By record
    /// </param>
    /// <param name="_parentBOMCalcProd">
    /// Parent production bom calc
    /// </param>
    /// <param name="_lineNum">
    /// Line number
    /// </param>
    /// <param name="_siteId">
    /// Site Id
    /// </param>
    /// <returns>
    /// New instance of the BOMCalcProdLine_PmfBurden class.
    /// </returns>
    public static BOMCalcProdLine_PmfBurden newBurdenCalcProd(
        PmfProdCoBy         _prodCoBy,
        BOMCalcProd         _parentBOMCalcProd,
        LineNum             _lineNum,
        InventSiteId        _siteId)
    {
        BOMCalcProdLine_PmfBurden burden = BOMCalcProdLine_PmfBurden::construct();

        burden.parmItemId(_prodCoBy.ItemId);
        burden.parmInventDimId(_prodCoBy.InventDimId);
        burden.parmPmfProdCoBy(_prodCoBy);
        burden.parmLineNum(_lineNum);
        burden.parmSiteId(_siteId);
        burden.parmParentBOMCalc(_parentBOMCalcProd);

        return burden;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>