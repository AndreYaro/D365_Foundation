<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBFiscalDocumentPISCOFINSSummarizer_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///      The <c>FBFiscalDocumentPISCOFINSSummarizer_BR</c> class summarizes tax information from a fiscal document.
/// </summary>
class FBFiscalDocumentPISCOFINSSummarizer_BR
{
    FiscalDocument_BR   fiscalDocument;
    List                listOfSummaryData;
    Map                 mapOfTaxTransByLine;
    Map                 mapOfLinesByGroupingCriteria;
    container           taxTypes;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAccountingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the accounting amount of the given fiscal document line.
    /// </summary>
    /// <param name="_lineBuffer">
    ///     A table buffer representing the fiscal document line.
    /// </param>
    /// <returns>
    ///     The accounting amount of the fiscal document line.
    /// </returns>
    protected LineAmount getAccountingAmount(Common _lineBuffer)
    {
        FiscalDocumentLine_BR fiscalDocumentLine = _lineBuffer;

        return fiscalDocumentLine.AccountingAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKey</Name>
				<Source><![CDATA[
    private str getKey(TaxationCode_BR        _pisTaxationCode,
                       TaxationCode_BR        _cofinsTaxationCode,
                       CFOPId_BR              _cfopId,
                       TaxValue               _pisTaxValue,
                       TaxValue               _cofinsTaxValue)
    {
        // Key is formed by Pis taxationCode (%1), Cofins taxationCode (%2), CFOP (%3), Pis tax value (%4), Cofins tax value (%5)
        return strFmt("%1_%2_%3_%4_%5",
                       _pisTaxationCode ? _pisTaxationCode : '0',
                       _cofinsTaxationCode ? _cofinsTaxationCode : '0',
                       _cfopId,
                       num2str(_pisTaxValue, 0, 2, DecimalSeparator::Dot, ThousandSeparator::None),
                       num2str(_cofinsTaxValue, 0, 2, DecimalSeparator::Dot, ThousandSeparator::None));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the accounting amount of the given fiscal document line.
    /// </summary>
    /// <param name="_lineBuffer">
    ///     A table buffer representing the fiscal document line.
    /// </param>
    /// <returns>
    ///     The accounting amount of the fiscal document line.
    /// </returns>
    protected AmountMST getLineDiscount(Common _lineBuffer)
    {
        FiscalDocumentLine_BR fiscalDocumentLine = _lineBuffer;

        return fiscalDocumentLine.LineDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfSummaryData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the summary of taxes for the fiscal document.
    /// </summary>
    /// <returns>
    ///     A list of list of <c>FBFiscalDocumentTaxSummary_BR</c> objects representing the summary of taxes for the fiscal document in context.
    /// </returns>
    public List getListOfSummaryData()
    {
        return listOfSummaryData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransForLineByType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves an instance of class <c>FBTaxTransTotalsByLine_BR</c> containing the tax transaction totals for the given fiscal document line.
    /// </summary>
    /// <param name="_lineTableBuffer">
    ///     A table buffer representing the fiscal document line.
    /// </param>
    /// <param name="_taxType">
    ///     The <c>TaxType_BR</c> enum value representing the type of the tax that should be retrieved.
    /// </param>
    /// <returns>
    ///     An instance of <c>FBTaxTransTotalsByLine_BR</c> containing the tax transaction totals.
    /// </returns>
    private FBTaxTransTotalsByLine_BR getTaxTransForLineByType(Common _lineTableBuffer, TaxType_BR _taxType)
    {
        FiscalDocumentLine_BR       fiscalDocumentLine = _lineTableBuffer;
        List                        listOfTaxTransTotalsByLine;
        ListEnumerator              le;
        FBTaxTransTotalsByLine_BR   eachTaxTransTotalsByLine, returnTaxTransTotalsByLine;

        returnTaxTransTotalsByLine = FBTaxTransTotalsByLine_BR::constructEmpty();

        listOfTaxTransTotalsByLine = mapOfTaxTransByLine.lookup(fiscalDocumentLine.RecId);

        if (listOfTaxTransTotalsByLine)
        {
            le = listOfTaxTransTotalsByLine.getEnumerator();

            while (le.moveNext())
            {
                eachTaxTransTotalsByLine = le.current();

                if (eachTaxTransTotalsByLine.parmTaxType() == _taxType)
                {
                    returnTaxTransTotalsByLine.parmTaxationCode         (eachTaxTransTotalsByLine.parmTaxationCode());
                    returnTaxTransTotalsByLine.parmFiscalValue          (eachTaxTransTotalsByLine.parmFiscalValue());

                    returnTaxTransTotalsByLine.parmTaxValue             (eachTaxTransTotalsByLine.parmTaxValue());

                    returnTaxTransTotalsByLine.parmTaxBaseAmount        (returnTaxTransTotalsByLine.parmTaxBaseAmount ()        + eachTaxTransTotalsByLine.parmTaxBaseAmount());

                    returnTaxTransTotalsByLine.parmTaxAmount            (returnTaxTransTotalsByLine.parmTaxAmount()             + eachTaxTransTotalsByLine.parmTaxAmount());

                    returnTaxTransTotalsByLine.parmTaxAmountOther       (returnTaxTransTotalsByLine.parmTaxAmountOther()        + eachTaxTransTotalsByLine.parmTaxAmountOther());
                    returnTaxTransTotalsByLine.parmTaxBaseAmountExempt  (returnTaxTransTotalsByLine.parmTaxBaseAmountExempt()   + eachTaxTransTotalsByLine.parmTaxBaseAmountExempt());
                }
            }
        }

        return returnTaxTransTotalsByLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMapOfTaxTransForLine</Name>
				<Source><![CDATA[
    private void initMapOfTaxTransForLine(FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        RefRecId                    key = _fiscalDocumentLine.RecId;
        List                        listOfTaxTransTotalsByLine;
        FiscalDocumentTaxTrans_BR   fiscalDocumentTaxTrans;

        if (mapOfTaxTransByLine.exists(key))
        {
            listOfTaxTransTotalsByLine = mapOfTaxTransByLine.lookup(key);
        }
        else
        {
            listOfTaxTransTotalsByLine = new List(Types::Class);
        }

        while select fiscalDocumentTaxTrans
                where fiscalDocumentTaxTrans.FiscalDocumentLine == key
        {
            listOfTaxTransTotalsByLine.addEnd(FBTaxTransTotalsByLine_BR::constructFromFiscalDocumentTaxTrans(fiscalDocumentTaxTrans));
        }

        mapOfTaxTransByLine.insert(key, listOfTaxTransTotalsByLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new <c>FBFiscalDocumentTaxSummarizer_BR</c> class.
    /// </summary>
    /// <param name="_fiscalDocument">
    ///     A <c>FiscalDocument_BR</c> table buffer for which the summary of taxes will be calculated.
    /// </param>
    private void new(FiscalDocument_BR _fiscalDocument)
    {
        fiscalDocument                  = _fiscalDocument;
        listOfSummaryData               = new List(Types::Class);
        mapOfLinesByGroupingCriteria    = new Map(Types::String, Types::Class);
        mapOfTaxTransByLine             = new Map(Types::Int64, Types::Class);          // FiscalDocumentLine.RecId -> List<FBTaxTransTotalsByLine_BR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSummaryData</Name>
				<Source><![CDATA[
    private void populateSummaryData()
    {
        MapEnumerator                   me;
        TaxationCode_BR                 pisTaxationCode, cofinsTaxationCode;
        str                             key;
        FBFiscalDocumentTaxSummary_BR   taxSummary;
        List                            listOfFiscalDocumentLines;
        ListEnumerator                  le;
        container                       keyMembers;
        Common                          line;
        FBTaxTransTotalsByLine_BR       pisTaxTransTotal, cofinsTaxTransTotal;
        TaxAmount                       pisTaxAmount, cofinsTaxAmount;
        TaxBaseCur                      pisTaxBaseAmount, pisTaxBaseAmountExempt, cofinsTaxBaseAmount, cofinsTaxBaseAmountExempt;
        LineAmount                      accountingAmount;
        AmountMST                       discountAmount;

        me = mapOfLinesByGroupingCriteria.getEnumerator();

        while (me.moveNext())
        {
            pisTaxAmount                = 0;
            pisTaxBaseAmount            = 0;
            pisTaxBaseAmountExempt      = 0;
            cofinsTaxAmount             = 0;
            cofinsTaxBaseAmount         = 0;
            cofinsTaxBaseAmountExempt   = 0;
            accountingAmount            = 0;
            discountAmount              = 0;

            key         = me.currentKey();
            keyMembers  = str2con(key, '_');

            listOfFiscalDocumentLines = me.currentValue();

            if (!listOfFiscalDocumentLines)
            {
                continue;
            }

            le = listOfFiscalDocumentLines.getEnumerator();
            while (le.moveNext())
            {
                line = le.current();

                pisTaxTransTotal = this.getTaxTransForLineByType(line, TaxType_BR::PIS);
                cofinsTaxTransTotal = this.getTaxTransForLineByType(line, TaxType_BR::COFINS);

                accountingAmount            += this.getAccountingAmount(line);
                discountAmount              += this.getLineDiscount(line);

                pisTaxAmount                += pisTaxTransTotal.parmTaxAmount();
                pisTaxBaseAmount            += pisTaxTransTotal.parmTaxBaseAmount();
                pisTaxBaseAmountExempt      += pisTaxTransTotal.parmTaxBaseAmountExempt();

                cofinsTaxAmount             += cofinsTaxTransTotal.parmTaxAmount();
                cofinsTaxBaseAmount         += cofinsTaxTransTotal.parmTaxBaseAmount();
                cofinsTaxBaseAmountExempt   += cofinsTaxTransTotal.parmTaxBaseAmountExempt();
            }

            taxSummary = new FBFiscalDocumentTaxSummary_BR();

            pisTaxationCode = strFmt("%1", conPeek(keyMembers, 1));
            cofinsTaxationCode = strFmt("%1", conPeek(keyMembers, 2));

            taxSummary.parmPisCST                   (pisTaxTransTotal.parmTaxationCode());
            taxSummary.parmPisAmount                (pisTaxAmount);
            taxSummary.parmPisBaseAmount            (pisTaxBaseAmount);
            taxSummary.parmPisTaxPct                (str2num(conPeek(keyMembers, 4)));
            taxSummary.parmPisBaseAmountExempt      (pisTaxBaseAmountExempt);

            taxSummary.parmCofinsCST                (cofinsTaxTransTotal.parmTaxationCode());
            taxSummary.parmCofinsAmount             (cofinsTaxAmount);
            taxSummary.parmCofinsBaseAmount         (cofinsTaxBaseAmount);
            taxSummary.parmCofinsTaxPct             (str2num(conPeek(keyMembers, 5)));
            taxSummary.parmCofinsBaseAmountExempt   (cofinsTaxBaseAmountExempt);

            taxSummary.parmCFOP                     (conPeek(keyMembers, 3));
            taxSummary.parmOperationAmount          (accountingAmount);
            taxSummary.parmDiscountAmount           (discountAmount);

            if (line)
            {
                FiscalDocumentLine_BR fiscalDocumentLine = line as FiscalDocumentLine_BR;
                taxSummary.parmFinancialLedgerDimension(fiscalDocumentLine.FinancialLedgerDimension);
            }

            listOfSummaryData.addEnd(taxSummary);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>separateLinesByGroupingCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Implements the appropriate logic to populate the map of fiscal document lines.
    /// </summary>
    protected void separateLinesByGroupingCriteria()
    {
        FiscalDocumentLine_BR       fiscalDocumentLine;
        FBTaxTransTotalsByLine_BR   pisTaxTransTotalByLine, cofinsTaxTransTotalByLine;
        List                        listOfFiscalDocumentLines;
        str                         key;

        while select fiscalDocumentLine
            where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
        {
            this.initMapOfTaxTransForLine(fiscalDocumentLine);

            pisTaxTransTotalByLine = this.getTaxTransForLineByType(fiscalDocumentLine, TaxType_BR::PIS);
            cofinsTaxTransTotalByLine = this.getTaxTransForLineByType(fiscalDocumentLine, TaxType_BR::COFINS);

            if (pisTaxTransTotalByLine.parmTaxationCode() && cofinsTaxTransTotalByLine.parmTaxationCode())
            {
                key = this.getKey(pisTaxTransTotalByLine.parmTaxationCode(),
                                  cofinsTaxTransTotalByLine.parmTaxationCode(),
                                  fiscalDocumentLine.CFOP,
                                  pisTaxTransTotalByLine.parmTaxValue(),
                                  cofinsTaxTransTotalByLine.parmTaxValue());

                if (mapOfLinesByGroupingCriteria.exists(key))
                {
                    listOfFiscalDocumentLines = mapOfLinesByGroupingCriteria.lookup(key);
                }
                else
                {
                    listOfFiscalDocumentLines = new List(Types::Record);
                }

                listOfFiscalDocumentLines.addEnd(fiscalDocumentLine);

                mapOfLinesByGroupingCriteria.insert(key, listOfFiscalDocumentLines);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new instance of class <c>FBFiscalDocumentTaxSummarizer_BR</c>.
    /// </summary>
    /// <param name="_fiscalDocument">
    ///     A <c>FiscalDocument_BR</c> table buffer for which the summary of taxes will be calculated.
    /// </param>
    /// <returns>
    ///     A new instance of the <c>FBFiscalDocumentTaxSummarizer_BR</c> class.
    /// </returns>
    public static FBFiscalDocumentPISCOFINSSummarizer_BR construct(FiscalDocument_BR _fiscalDocument)
    {
        FBFiscalDocumentPISCOFINSSummarizer_BR fiscalDocumentTaxSummarizer = new FBFiscalDocumentPISCOFINSSummarizer_BR(_fiscalDocument);

        fiscalDocumentTaxSummarizer.separateLinesByGroupingCriteria();
        fiscalDocumentTaxSummarizer.populateSummaryData();

        return fiscalDocumentTaxSummarizer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>