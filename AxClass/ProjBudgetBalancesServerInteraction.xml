<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetBalancesServerInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjBudgetBalancesServerInteraction extends ServerInteraction
{
    ProjBudgetBalanceInterval           projBudgetBalanceInterval;
    ProjId                              projId;
    boolean                             includeSubProjects;
    FromDate                            fromDate;
    ToDate                              toDate;
    ProjBudgetBalancesGroupByOptions    projBudgetBalancesGroupByOptions;
    TmpProjBudgetBalances               tmpProjBudgetBalances;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setSessionContext</Name>
				<Source><![CDATA[
    public void setSessionContext(HierarchicalGridSessionContext _sessionContext)
    {
        ProjBudgetBalancesSessionContextDataContract sessionContext;

        sessionContext = _sessionContext as ProjBudgetBalancesSessionContextDataContract;

        if (sessionContext != null)
        {
            projBudgetBalanceInterval = sessionContext.parmProjBudgetBalanceInterval();
            projBudgetBalancesGroupByOptions = sessionContext.parmGroupBy();
            projId = sessionContext.parmProjId();
            includeSubProjects = sessionContext.parmIncludeSubProjects();
            fromDate = sessionContext.parmFromDate();
            toDate = sessionContext.parmToDate();
            tmpProjBudgetBalances = sessionContext.parmProjBudgetBalances();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInteractionContext</Name>
				<Source><![CDATA[
    public void setInteractionContext(IInteractionContext _interactionContext)
    {
        // Intentionally left blank, but must override abstract base method.
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeDataRetrievalAction</Name>
				<Source><![CDATA[
    public CollectionDataContract executeDataRetrievalAction(ActionDataContract _action)
    {
        IServerActions              serverActions;
        CollectionDataContract      dataCollection;
        Enumerator                  argsEnumerator;

        argsEnumerator = _action.parmArgs().getEnumerator();
        switch (_action.parmName())
        {
            case "":
                dataCollection = this.getDataCollection();
                break;
            default:
                error('Unrecognized operation was attempted.');
                break;
        }

        if (dataCollection == null)
        {
            dataCollection = CollectionDataContract::construct();
        }

        return dataCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataCollection</Name>
				<Source><![CDATA[
    private CollectionDataContract getDataCollection()
    {
        List                            items           = new List(Types::Class);
        ProjBudgetBalancesDataContract  projBudgetBalancesData;
        CollectionDataContract          dataCollection  = CollectionDataContract::construct();

        while select tmpProjBudgetBalances
        {
            projBudgetBalancesData  = ProjBudgetBalancesDataContract::newTmpProjBudgetBalances(tmpProjBudgetBalances);
            items.addEnd(projBudgetBalancesData);
        }

        dataCollection.parmItems(items);
        return dataCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeAction</Name>
				<Source><![CDATA[
    protected str executeAction(ActionDataContract _action)
    {
        // No custom actions are supported.
        return "";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>