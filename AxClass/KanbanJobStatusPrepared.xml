<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobStatusPrepared</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanJobStatusPrepared</c> class performs operations for kanban jobs that are in a prepared
///    state.
/// </summary>
[LeanKanbanJobStatusFactoryAttribute(LeanKanbanJobStatus::Prepared)]
public class KanbanJobStatusPrepared extends KanbanJobStatus
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isReadyForStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether all preconditions are met and the kanban job is ready for a given target status
    /// update.
    /// </summary>
    /// <param name="_status">
    /// The target status.
    /// </param>
    /// <param name="_silent">
    /// A Boolean value that indicates whether the method can add warnings to the Infolog; optional.
    /// </param>
    /// <returns>
    /// true if the kanban job is ready for the status update; otherwise, false.
    /// </returns>
    public boolean isReadyForStatusUpdate(
        LeanKanbanJobStatus _status = LeanKanbanJobStatus::NotPlanned,
        boolean             _silent = false)
    {
        Kanban      kanban     = kanbanJob.kanban();
        KanbanRule  kanbanRule = kanban.kanbanRule();

        if (kanbanRule.status().isOutdated())
        {
            return _silent ? false : checkFailed(strfmt("@SYS138404",kanban.KanbanId,kanbanJob.PlanActivityName,_status,kanbanRule.RuleId));
        }

        return super(_status,_silent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSynchronizeKanbanStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a status update must be synchronized to the parent kanban.
    /// </summary>
    /// <param name="_reset">
    /// A Boolean value that indicates whether the status is reset; optional.
    /// </param>
    /// <returns>
    /// true if the kanban status must be synchronized; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Call this method from an instance that represents the new status.
    /// </remarks>
    public boolean mustSynchronizeKanbanStatus(boolean _reset = false)
    {
        boolean             result = false;

        if (updateKanban)
        {
            if (_reset)
            {
                result = false;
            }
            else
            {
                Kanban kanban = kanbanJob.kanban();
                result = this.correspondingKanbanStatus() != kanban.Status;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanJobStatusPrepared</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>KanbanJobStatusPrepared</c> class.
    /// </returns>
    /// <remarks>
    ///  Use the following procedure to customize or extend the
    ///  <c>
    ///  KanbanJobStatusPrepared
    ///  </c>
    ///   class.
    ///  <list type="number">
    ///   <item>
    ///    <description>
    ///    Create a new class that derives from the <c>KanbanJobStatusPrepared</c> class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Overlayer the <c>construct</c> method on the <c>KanbanJobStatusPrepared</c> class so that it
    ///    returns an instance of the derived class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Override the methods from the <c>KanbanJobStatusPrepared</c> class that you want to customize or
    ///    extend in your derived class.
    ///    </description>
    ///   </item>
    ///  </list>
    ///
    ///  This procedure helps make sure that your customizations are maintained if the base version of the
    ///  <c>
    ///  KanbanJobStatusPrepared
    ///  </c>
    ///   class is changed, minimizing code conflicts during an upgrade. For more information, see <see cref="Best Practices for static construct Methods" />
    /// </remarks>
    public static KanbanJobStatus construct()
    {
        return new KanbanJobStatusPrepared();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
