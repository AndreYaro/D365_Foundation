<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationLineType</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SalesQuotationLineType extends InventType implements SalesPurchIModifiedDefaulter, InventDistinctProductOrderDefaulting, SalesPurchIModifiedDefaulterValidator
{
    SalesQuotationLine          salesQuotationLine;
    
    DimensionCopy               dimensionCopy;
    InventDim                   preDefaultingInventDim;
    InventDimParm               preDefaultingInventDimParm;
    InventDimId                 mergedInventDimId;

    // <GEERU><GIN>
    #ISOCountryRegionCodes			

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountConsumption</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountConsumption()
    {
        CustGroupId     custGroup;

        if (salesQuotationLine.busRelAccount())
        {
            custGroup = smmBusRelTable::find(salesQuotationLine.busRelAccount()).CustGroup;
        }
        else
        {
            custGroup = CustTable::find(salesQuotationLine.CustAccount).CustGroup;
        }
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(
                    InventAccountType::SalesConsump,
                    salesQuotationLine.CustAccount,
                    custGroup,
                    salesQuotationLine.inventDim()));
        }
        else
        {
            // </GEERU>
            return InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(
                    InventAccountType::SalesConsump,
                    salesQuotationLine.CustAccount,
                    custGroup));
            // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountDisc</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountDisc()
    {
        CustGroupId         custGroup;

        smmBusRelAccount busRelAccount = salesQuotationLine.busRelAccount();
        if (busRelAccount)
        {
            custGroup = smmBusRelTable::find(busRelAccount).CustGroup;
        }
        else
        {
            custGroup = CustTable::find(salesQuotationLine.CustAccount).CustGroup;
        }
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(
                    InventAccountType::SalesDisc,
                    busRelAccount,
                    custGroup,
                    salesQuotationLine.inventDim()));
        }
        else
        {
            // </GEERU>
            return InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(
                    InventAccountType::SalesDisc,
                    busRelAccount,
                    custGroup));
            // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting account ledger dimension for an item.
    /// </summary>
    /// <param name = "_accountType">An inventory account type.</param>
    /// <param name = "_busRelAccount">A prospect.</param>
    /// <param name = "_custGroupId">A customer group id.</param>
    /// <param name = "_inventDim">An inventory dimension.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(InventAccountType _accountType, smmBusRelAccount _busRelAccount, CustGroupId _custGroupId, InventDim _inventDim = null)
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
            _accountType,
            salesQuotationLine.ItemId,
            salesQuotationLine.inventTable().itemGroupId(),
            salesQuotationLine.SalesCategory,
            _busRelAccount,
            _custGroupId,
            salesQuotationLine.TaxGroup,
            _inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountIssue</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountIssue()
    {
        if (InventPostingExtendParm_CN::checkExtendParmEnabled())
        {
            return InventPosting::itemExtendParm_CN(
            InventAccountType::SalesIssue,
            InventPostingExtendParm_CN::constructInventDim(salesQuotationLine.inventDim()),
            salesQuotationLine.ItemId);
        }
        
        return InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(InventAccountType::SalesIssue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">A inventory account type.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(InventAccountType _inventAccountType)
    {
        InventPostingItemLedgerDimensionParameters searchParameters = InventPostingItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            salesQuotationLine.ItemId);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            searchParameters.InventDim_RU = salesQuotationLine.inventDim();
        }
            
        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountSales</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountSales()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLineAmountBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>LineAmount</c> field is to be updated.
    /// </summary>
    /// <returns>
    ///    true if update is enabled; otherwise, false.
    /// </returns>
    boolean canLineAmountBeUpdated()
    {
        return salesQuotationLine.PriceDiscResultFields::canLineAmountBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLineAmountBeUpdatedWithNonInteractiveSession</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>LineAmount</c> field is to be updated without dialogs.
    /// </summary>
    /// <returns>
    ///    true if update is enabled; otherwise, false.
    /// </returns>
    public boolean canLineAmountBeUpdatedWithNonInteractiveSession()
    {
        return salesQuotationLine.PriceDiscResultFields::canLineAmountBeUpdatedWithNonInteractiveSession();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDelete</Name>
				<Source><![CDATA[
    boolean checkDelete(boolean _useWarning = true)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFindProjJournalTxt</Name>
				<Source><![CDATA[
    void checkFindProjJournalTxt()
    {
        ProjJournalTxt projJournalTxt = ProjJournalTxt::findTxt(salesQuotationLine.ProjDescription);
        if (projJournalTxt.Txt)
        {
            salesQuotationLine.ProjDescription = projJournalTxt.Txt;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePhysical</Name>
				<Source><![CDATA[
    boolean checkUpdatePhysical()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNoteLine</Name>
				<Source><![CDATA[
    boolean  creditNoteLine()
    {
        if (salesQuotationLine.SalesQty < 0)
        return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a quotation line record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a quotation line record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionCopy</Name>
				<Source><![CDATA[
    protected DimensionCopy dimensionCopy()
    {
        if (!dimensionCopy)
        {
            dimensionCopy = DimensionCopy::newFromTable(salesQuotationLine, CompanyInfo::findDataArea(curext()).RecId);
        }

        return dimensionCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableSuppItem</Name>
				<Source><![CDATA[
    boolean enableSuppItem()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteWarning</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the alternative warning message for deleting the quotation line.
    /// </summary>
    /// <returns>
    ///     The alternative warning message. If an empty string is returned the standard message should be used.
    /// </returns>
    str getDeleteWarning()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustQuotationConfirmTrans</Name>
				<Source><![CDATA[
    void  initFromCustQuotationConfirmTrans(CustQuotationConfirmTrans custQuotationConfirmTrans,
                                 boolean            copyPrecisely,
                                 boolean            copyPriceDisc,
                                 boolean            copyQty,
                                 Qty                qty
                                 , PdsCWInventQty     _cwQty = 0
                                 )
    {
        this.initFromItemOrCategory(custQuotationConfirmTrans.ItemId,
        custQuotationConfirmTrans.SalesCategory,
        custQuotationConfirmTrans.Name);

        if (copyQty)
        {
            salesQuotationLine.setInventDimId(custQuotationConfirmTrans.InventDimId);
            salesQuotationLine.SalesQty           = qty;

            salesQuotationLine.PdsCWQty           = _cwQty;

            salesQuotationLine.SalesUnit          = custQuotationConfirmTrans.SalesUnit;
            salesQuotationLine.QtyOrdered         = salesQuotationLine.calcQtyOrdered();
        }
        else
        {
            if (salesQuotationLine.isCategoryBased())
            {
                salesQuotationLine.setInventDimId(custQuotationConfirmTrans.InventDimId);
            }
            else
            {
                InventDim inventDim = salesQuotationLine.inventDim();
                EcoResProductDimGroupSetup::copyProductDimensionsForItem(salesQuotationLine.ItemId, custQuotationConfirmTrans.inventDim(), inventDim);
                salesQuotationLine.setInventDimIdFromInventDim(inventDim);
            }
        }

        if (copyPriceDisc)
        {
            salesQuotationLine.SalesPrice         = custQuotationConfirmTrans.SalesPrice;
            salesQuotationLine.PriceUnit          = custQuotationConfirmTrans.PriceUnit;
            salesQuotationLine.LinePercent        = custQuotationConfirmTrans.LinePercent;
            salesQuotationLine.LineDisc           = custQuotationConfirmTrans.LineDisc;
            salesQuotationLine.MultiLnDisc        = custQuotationConfirmTrans.MultiLnDisc;
            salesQuotationLine.MultiLnPercent     = custQuotationConfirmTrans.MultiLnPercent;
            salesQuotationLine.SalesMarkup        = custQuotationConfirmTrans.SalesMarkup;
            salesQuotationLine.LineAmount         = custQuotationConfirmTrans.LineAmount;
        }

        if (copyPrecisely)
        {
            salesQuotationLine.Name               = custQuotationConfirmTrans.Name;
            salesQuotationLine.ExternalItemId     = custQuotationConfirmTrans.ExternalItemId;
            salesQuotationLine.TaxGroup           = custQuotationConfirmTrans.TaxGroup;
            salesQuotationLine.OverrideSalesTax   = custQuotationConfirmTrans.OverrideSalesTax;
            salesQuotationLine.setTaxItemGroup(custQuotationConfirmTrans.TaxItemGroup);
            salesQuotationLine.DefaultDimension   = salesQuotationLine.copyDimension(custQuotationConfirmTrans.DefaultDimension,this.dimensionCopy());
            salesQuotationLine.SalesGroup         = custQuotationConfirmTrans.SalesGroup;
            salesQuotationLine.DlvTerm            = custQuotationConfirmTrans.DlvTerm;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustQuotationTrans</Name>
				<Source><![CDATA[
    void  initFromCustQuotationTrans(CustQuotationTrans custQuotationTrans,
                                 boolean            copyPrecisely,
                                 boolean            copyPriceDisc,
                                 boolean            copyQty,
                                 Qty                qty
                                 , PdsCWInventQty     _cwQty = 0
                                 )
    {
        this.initFromItemOrCategory(custQuotationTrans.ItemId, custQuotationTrans.SalesCategory, custQuotationTrans.Name);

        if (copyQty)
        {
            salesQuotationLine.setInventDimId(custQuotationTrans.InventDimId);
            salesQuotationLine.SalesQty           = qty;

            salesQuotationLine.PdsCWQty           = _cwQty;

            salesQuotationLine.SalesUnit          = custQuotationTrans.SalesUnit;
            salesQuotationLine.QtyOrdered         = salesQuotationLine.calcQtyOrdered();
        }
        else
        {
            if (salesQuotationLine.isCategoryBased())
            {
                salesQuotationLine.setInventDimId(custQuotationTrans.InventDimId);
            }
            else
            {
                InventDim inventDim = salesQuotationLine.inventDim();
                EcoResProductDimGroupSetup::copyProductDimensionsForItem(salesQuotationLine.ItemId, custQuotationTrans.inventDim(), inventDim);
                salesQuotationLine.setInventDimIdFromInventDim(inventDim);
            }
        }

        if (copyPriceDisc)
        {
            salesQuotationLine.SalesPrice         = custQuotationTrans.SalesPrice;
            salesQuotationLine.PriceUnit          = custQuotationTrans.PriceUnit;
            salesQuotationLine.LinePercent        = custQuotationTrans.LinePercent;
            salesQuotationLine.LineDisc           = custQuotationTrans.LineDisc;
            salesQuotationLine.MultiLnDisc        = custQuotationTrans.MultiLnDisc;
            salesQuotationLine.MultiLnPercent     = custQuotationTrans.MultiLnPercent;
            salesQuotationLine.SalesMarkup        = custQuotationTrans.SalesMarkup;
            salesQuotationLine.LineAmount         = custQuotationTrans.LineAmount;
        }

        if (copyPrecisely)
        {
            salesQuotationLine.Name               = custQuotationTrans.Name;
            salesQuotationLine.ExternalItemId     = custQuotationTrans.ExternalItemId;
            salesQuotationLine.TaxGroup           = custQuotationTrans.TaxGroup;
            salesQuotationLine.OverrideSalesTax   = custQuotationTrans.OverrideSalesTax;
            salesQuotationLine.setTaxItemGroup(custQuotationTrans.TaxItemGroup);
            salesQuotationLine.DefaultDimension   = salesQuotationLine.copyDimension(custQuotationTrans.DefaultDimension,this.dimensionCopy());
            salesQuotationLine.SalesGroup         = custQuotationTrans.SalesGroup;
            salesQuotationLine.DlvTerm            = custQuotationTrans.DlvTerm;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEcoResCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>SalesQuotationLine</c> object by using the <c>SalesCategory</c> record.
    /// </summary>
    /// <param name="_salesCategory">
    ///    The <c>SalesCategory</c> record with which to initialize the <c>SalesQuotationLine</c> object.
    /// </param>
    /// <param name="_name">
    ///    The name to be assigned to the line.
    /// </param>
    protected void initFromEcoResCategory(SalesCategory _salesCategory, ItemFreeTxt _name)
    {
        salesQuotationLine.SalesCategory    = _salesCategory;
        salesQuotationLine.Name             = _name;
        this.setStockedProduct();

        TaxItemGroupHeading taxItemGroupHeading = SalesCategoryItemTaxGroup::getSalesCategoryItemTaxGroup(_salesCategory, CompanyInfo::current());
        if (taxItemGroupHeading)
        {
            salesQuotationLine.TaxItemGroup = taxItemGroupHeading.TaxItemGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this instance based on <c>InventTable</c> record.
    /// </summary>
    /// <param name="inventTable">
    /// The <c>InventTable</c> record.
    /// </param>
    /// <param name="_searchPrice">
    /// If set to true, performs search of price and discount, otherwise skips this step; Optional.
    /// </param>
    public void initFromInventTable(InventTable inventTable, boolean _searchPrice = true)
    {
        InventDistinctProductOrderDefaultingController::itemIdModified(this, InventDistinctProductDimensionSpecificDefaultingArgsSalesQuotationLine::construct(inventTable, _searchPrice, true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDefaultDimensionFromReleasedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default dimension on the <c>SalesQuotationLine</c> from <c>InventTable</c> record buffer.
    /// </summary>
    /// <param name = "_inventTable">
    /// An <c>InventTable</c> record buffer.
    /// </param>
    [Replaceable]
    protected void initializeDefaultDimensionFromReleasedProduct(InventTable _inventTable)
    {
        salesQuotationLine.DefaultDimension = salesQuotationLine.mergeDimension(_inventTable.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReleasedProductSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes settings that are based on the released product.
    /// </summary>
    /// <param name = "_inventTable">An <c>InventTable</c> record buffer.</param>
    public void initReleasedProductSpecificDefaulting(InventTable _inventTable)
    {
        // If this is not an item based (but category based) line then we should not initialize from inventTable.
        if (!_inventTable)
        {
            return;
        }

        InventItemBarcode inventItemBarcode = InventItemBarcode::findSalesBarcode(_inventTable.ItemId);

        InventDim inventDimDefaultProductDimension = _inventTable.getDefaultProductDimensions(salesQuotationLine.inventDim());

        salesQuotationLine.setInventDimId(inventDimDefaultProductDimension.InventDimId, inventDimDefaultProductDimension);

        salesQuotationLine.SalesCategory = EcoResProductCategory::findByItemIdCategoryHierarchyRole(
                                               _inventTable.ItemId,
                                               EcoResCategoryNamedHierarchyRole::Sales).Category;

        this.setStockedProduct();

        salesQuotationLine.setTaxItemGroup(_inventTable.salesTaxItemGroupId());

        salesQuotationLine.SalesUnit = _inventTable.salesUnitId();

        InventTableModule inventTableModule = salesQuotationLine.inventTable().inventTableModuleSales();

        salesQuotationLine.OverDeliveryPct  = _inventTable.salesOverDeliveryPct();
        salesQuotationLine.UnderDeliveryPct = _inventTable.salesUnderDeliveryPct();

        salesQuotationLine.initName(_inventTable);
        salesQuotationLine.initFromCustExternalItemDescription();

        if (this.mustOverrideQuotationLinePrice())
        {
            salesQuotationLine.PriceUnit         = _inventTable.salesPriceUnit();
            salesQuotationLine.LineAmount        = 0;
            salesQuotationLine.lineAmountModified();
        }
        
        salesQuotationLine.BarCode          = inventItemBarcode.ItemBarCode;
        salesQuotationLine.BarCodeType      = inventItemBarcode.BarcodeSetupId;

        this.initializeDefaultDimensionFromReleasedProduct(_inventTable);

        this.initForeignTradeFromInventTable(_inventTable);

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            CFOPValidation_BR  cfopValidation = CFOPValidation_BR::construct(salesQuotationLine);

            salesQuotationLine.CFOPTable_BR = cfopValidation.getDefaultCFOP();
            salesQuotationLine.setTaxGroupAndTaxItemGroupFields_BR();

            if (salesQuotationLine.inventTable().ItemType != ItemType::Service)
            {
                salesQuotationLine.LedgerDimension = SalesPurchOperationType_BR::find(SalesQuotationTable::find(
                                     salesQuotationLine.QuotationId).SalesPurchOperationType_BR).LedgerDimension;
            }
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustOverrideQuotationLinePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the sales quotation order line price must be overridden
    /// </summary>
    /// <returns>true, if the quotation line price must be overridden; otherwise, false.</returns>
    /// <remarks>Don't override a price that has been overridden - multiple ship to.</remarks>
    protected boolean mustOverrideQuotationLinePrice()
    {
        return salesQuotationLine.mcrSalesQuotationLineOverride().PriceOverride != NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDimensionsSpecificSalesQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the <c>SalesQty</c> of the <c>salesQuotationLine</c>.
    /// </summary>
    /// <param name = "_inventTable">An <c>InventTable</c> record.</param>
    /// <returns>
    ///     The <c>SalesQty</c> of the <c>salesQuotationLine</c>.
    /// </returns>
    private SalesQty calcDimensionsSpecificSalesQty(InventTable _inventTable)
    {
        salesQuotationLine.SalesQty = salesQuotationLine.SalesQty ? salesQuotationLine.SalesQty : _inventTable.salesStandardQty(salesQuotationLine.InventDimId);

        if (!salesQuotationLine.SalesQty && PdsGlobal::pdsIsCWItem(salesQuotationLine.ItemId))
        {
            // Multiply with CW qty in case it has been prepopulated
            PdsNominalQty nominalQty = PdsCatchWeightItem::find(salesQuotationLine.ItemId).nominalQty() * minOne(salesQuotationLine.PdsCWQty);

            return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesQuotationLine.ItemId,
                                                                                         salesQuotationLine.InventDimId,
                                                                                         nominalQty,
                                                                                         salesQuotationLine.inventTable().inventUnitId(),
                                                                                         salesQuotationLine.SalesUnit,
                                                                                         NoYes::Yes);
        }

        return salesQuotationLine.SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDimensionsSpecificPdsCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>PdsCWQty</c> of the <c>salesQuotationLine</c>.
    /// </summary>
    /// <param name = "_inventTable">An <c>InventTable</c> record.</param>
    /// <returns>
    ///     The <c>PdsCWQty</c> of the <c>salesQuotationLine</c>.
    /// </returns>
    private PdsCWQty calcDimensionsSpecificPdsCWQty(InventTable _inventTable)
    {
        if (!salesQuotationLine.PdsCWQty && PdsGlobal::pdsIsCWItem(salesQuotationLine.ItemId))
        {
            return PdsCatchWeight::convertQtyToCWQty(salesQuotationLine.ItemId, salesQuotationLine.SalesQty, salesQuotationLine.SalesUnit);
        }

        return salesQuotationLine.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes product dimension specific order defaulting.
    /// </summary>
    /// <param name = "_inventDistinctProductDimensionSpecificDefaultingArgs">Product dimension specific order defaulting arguments.</param>
    public void initDimensionsSpecificDefaulting(InventDistinctProductDimensionSpecificDefaultingArgs _inventDistinctProductDimensionSpecificDefaultingArgs)
    {
        var arguments = _inventDistinctProductDimensionSpecificDefaultingArgs as InventDistinctProductDimensionSpecificDefaultingArgsSalesQuotationLine;

        if (!arguments.InventTable)
        {
            return;
        }
        
        var inventDim = salesQuotationLine.inventDim();
        
        if (!inventDim.InventStatusId && WHSInventEnabled::exist(salesQuotationLine.ItemId))
        {
            inventDim.InventStatusId = WHSInvent::getDefaultStatus(inventDim, null, salesQuotationLine);
            inventDim = InventDim::findOrCreate(inventDim);
            salesQuotationLine.setInventDimId(inventDim.inventDimId, inventDim);
        }
        
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            salesQuotationLine.initRetailVariantId(inventDim);
        }

        if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
        {
            if (PdsGlobal::pdsIsCWItem(arguments.InventTable.ItemId))
            {
                if (!salesQuotationLine.PdsCWQty)
                {
                    salesQuotationLine.PdsCWQty  = 1;
                }

                salesQuotationLine.SalesQty  = PdsCatchWeight::inventQty(
                                            arguments.InventTable.ItemId,
                                            salesQuotationLine.PdsCWQty,
                                            salesQuotationLine.SalesUnit);
            }
            else
            {
                salesQuotationLine.SalesQty     = salesQuotationLine.SalesQty
                                            ? salesQuotationLine.SalesQty
                                            : arguments.InventTable.salesStandardQty(inventDim.InventDimId);
            }
        }
        else
        {
            salesQuotationLine.SalesQty     = this.calcDimensionsSpecificSalesQty(arguments.InventTable);
            salesQuotationLine.PdsCWQty     = this.calcDimensionsSpecificPdsCWQty(arguments.InventTable);
        }

        salesQuotationLine.QtyOrdered   = salesQuotationLine.calcQtyOrdered();
        salesQuotationLine.CostPrice    = arguments.InventTable.costPcsPrice(salesQuotationLine.InventDimId, inventDim);

        if (EcoResProductVariantItemSalesTaxGroupFeature::isFeatureEnabled()
            && _inventDistinctProductDimensionSpecificDefaultingArgs.parmIsProductDimensionModified()
            && (!EcoResProductVariantItemSalesTaxGroupNoBRFlight::instance().isEnabled() || !(BrazilParameters::isEnabled() && salesQuotationLine.CFOPTable_BR)))
        {
            salesQuotationLine.setTaxItemGroup(InventTable::getTaxItemGroupId(ModuleInventPurchSales::Sales, arguments.InventTable.ItemId, inventDim.InventDimId));
        }

        // Sets delivery date control type in sales quotation line.
        salesQuotationLine.setDeliveryDateControlType(salesQuotationLine.InventDimId);

        if (arguments.SearchPrice)
        {
            salesQuotationLine.setPriceDisc(inventDim);
        }

        salesQuotationLine.calcPackingUnit(inventDim);
        salesQuotationLine.calcPackingUnitQty(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the associated <c>InventDim</c> record buffer.
    /// </summary>
    /// <param name = "_inventDim">The associated <c>InventDim</c> record buffer.</param>
    public void setInventDim(inventDim _inventDim)
    {
        salesQuotationLine.setInventDimIdFromInventDim(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the associated <c>InventDim</c> record buffer.
    /// </summary>
    /// <returns>The associated <c>InventDim</c> record buffer.</returns>
    public InventDim inventDim()
    {
        return salesQuotationLine.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromItemOrCategory</Name>
				<Source><![CDATA[
    void initFromItemOrCategory(ItemId _itemId, SalesCategory _salesCategory, ItemFreeTxt _name, boolean _searchPrice = true)
    {
        salesQuotationLine.ItemId = _itemId;
        if (salesQuotationLine.ItemId)
        {
            this.initFromInventTable(salesQuotationLine.inventTable(), _searchPrice);
        }
        else
        {
            this.initFromEcoResCategory(_salesCategory, _name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjCategoryId</Name>
				<Source><![CDATA[
    void initFromProjCategoryId()
    {
        ProjCategory projCategory = ProjCategory::find(salesQuotationLine.ProjCategoryId);
        if (projCategory)
        {
            salesQuotationLine.TaxItemGroup     = projCategory.TaxItemGroupId;
            if (!salesQuotationLine.ItemId)
            {
                salesQuotationLine.ProjDescription  = projCategory.Name;
            }
            salesQuotationLine.Name             = projCategory.Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceItem</Name>
				<Source><![CDATA[
    void  initFromProjInvoiceItem(ProjInvoiceItem  projInvoiceItem,
                              boolean          copyPrecisely,
                              boolean          copyPriceDisc,
                              boolean          copyQty,
                              Qty              qty)
    {
        salesQuotationLine.ItemId             = projInvoiceItem.ItemId;
        this.initFromInventTable(salesQuotationLine.inventTable());

        if (copyQty)
        {
            salesQuotationLine.setInventDimId(projInvoiceItem.InventDimId);
            salesQuotationLine.SalesQty           = qty;
            salesQuotationLine.SalesUnit          = projInvoiceItem.SalesUnit;
            salesQuotationLine.QtyOrdered         = projInvoiceItem.Qty == qty ?  -projInvoiceItem.inventQty() : salesQuotationLine.calcQtyOrdered();
        }
        else
        {
            if (salesQuotationLine.isCategoryBased())
            {
                salesQuotationLine.setInventDimId(projInvoiceItem.InventDimId);
            }
            else
            {
                InventDim inventDim = salesQuotationLine.inventDim();
                EcoResProductDimGroupSetup::copyProductDimensionsForItem(salesQuotationLine.ItemId, projInvoiceItem.inventDim(), inventDim);
                salesQuotationLine.setInventDimIdFromInventDim(inventDim);
            }
        }

        if (copyPriceDisc)
        {
            salesQuotationLine.SalesPrice         = projInvoiceItem.salesPrice();
            salesQuotationLine.PriceUnit          = projInvoiceItem.PriceUnit;
            salesQuotationLine.LinePercent        = projInvoiceItem.LinePercent;
            salesQuotationLine.LineDisc           = projInvoiceItem.LineDisc;
            salesQuotationLine.SalesMarkup        = projInvoiceItem.SalesMarkup;
            salesQuotationLine.LineAmount         = projInvoiceItem.lineAmountDetailSum();
        }

        if (copyPrecisely)
        {
            salesQuotationLine.setInventDimId(projInvoiceItem.InventDimId);
            salesQuotationLine.Name               = projInvoiceItem.Txt;
            salesQuotationLine.ExternalItemId     = projInvoiceItem.ExternalItemId;
            salesQuotationLine.LedgerDimension    = ProjItemTrans::find(projInvoiceItem.ProjTransId).LedgerDimension;
            if (salesQuotationLine.QtyOrdered)
            salesQuotationLine.CostPrice      = -projInvoiceItem.inventCostAmount() / (qty ? -projInvoiceItem.inventQty() : salesQuotationLine.QtyOrdered);
            salesQuotationLine.TaxGroup           = projInvoiceItem.TaxGroupId;
            salesQuotationLine.setTaxItemGroup(projInvoiceItem.TaxItemGroupId);
            salesQuotationLine.OverrideSalesTax = projInvoiceItem.OverrideSalesTax;

            salesQuotationLine.DefaultDimension   = salesQuotationLine.copyDimension(projInvoiceItem.DefaultDimension, this.dimensionCopy());
            salesQuotationLine.SalesGroup         = projInvoiceItem.SalesGroup;
            salesQuotationLine.Transport          = projInvoiceItem.Transport;
            salesQuotationLine.Port               = projInvoiceItem.Port;
            salesQuotationLine.StatProcId         = projInvoiceItem.StatProcId;
            salesQuotationLine.IntrastatCommodity = projInvoiceItem.IntrastatCommodity;
            salesQuotationLine.OrigCountryRegionId = projInvoiceItem.OrigCountryRegionId;
            salesQuotationLine.OrigStateId        = projInvoiceItem.OrigState;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAssignProjectContractCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the currency code can be overridden from project contract.
    /// </summary>
    /// <param name = "_projInvoiceTable">
    /// A <c>ProjInvoiceTable</c> record buffer.
    /// </param>
    /// <returns>
    /// true if currency code must be overriden; otherwise, false.
    /// </returns>
    protected boolean mustAssignProjectContractCurrencyCode(ProjInvoiceTable _projInvoiceTable)
    {
        return _projInvoiceTable.CurrencyId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    void  initFromProjTable(ProjTable       _projTable)
    {
        ProjInvoiceTable    projInvoiceTable    = _projTable.projInvoice();

        if (this.mustAssignProjectContractCurrencyCode(projInvoiceTable))
        {
            salesQuotationLine.CurrencyCode = projInvoiceTable.CurrencyId;
        }

        salesQuotationLine.DefaultDimension    = salesQuotationLine.copyDimension(_projTable.DefaultDimension, this.dimensionCopy());
        salesQuotationLine.TaxGroup     = ProjParameters::taxGroupInvoice(_projTable.ProjId);

        if (! ProjValProjCategorySetUp::checkProjCategory(_projTable.ProjId, salesQuotationLine.ProjCategoryId))
        {
            salesQuotationLine.ProjCategoryId = '';
        }

        this.setLineProperty();
        this.setPeriodDate();
        this.setCostSalesPrice(_projTable.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromResource</Name>
				<Source><![CDATA[
    public void initFromResource()
    {
        this.setPeriodDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPriceDiscFromSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies PriceDisc fields from another <c>SalesQuotationLine</c>.
    /// </summary>
    /// <param name = "_salesQuotationLine">The <c>SalesQuotationLine</c> to copy fields from.</param>
    protected void copyPriceDiscFromSalesQuotationLine(SalesQuotationLine _salesQuotationLine)
    {
        salesQuotationLine.SalesPrice     = _salesQuotationLine.SalesPrice;
        salesQuotationLine.PriceUnit      = _salesQuotationLine.PriceUnit;
        salesQuotationLine.LinePercent    = _salesQuotationLine.LinePercent;
        salesQuotationLine.LineDisc       = _salesQuotationLine.LineDisc;
        salesQuotationLine.MultiLnDisc    = _salesQuotationLine.MultiLnDisc;
        salesQuotationLine.MultiLnPercent = _salesQuotationLine.MultiLnPercent;
        salesQuotationLine.SalesMarkup    = _salesQuotationLine.SalesMarkup;
        salesQuotationLine.LineAmount     = _salesQuotationLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationBasketLine</Name>
				<Source><![CDATA[
    void  initFromSalesQuotationBasketLine(SalesQuotationBasketLine salesQuotationBasketLine)
    {
        // SalesQuotationBasketLine can not have category based lines so information is looked up from item.
        this.initFromItemOrCategory(salesQuotationBasketLine.ItemId, 0, '');

        InventDim inventDim = salesQuotationLine.inventDim();
        salesQuotationLine.setInventDimId(salesQuotationBasketLine.InventDimId);

        salesQuotationLine.initFromCustExternalItemDescription();

        salesQuotationLine.SalesQty           = salesQuotationBasketLine.SalesQty;
        salesQuotationLine.QtyOrdered         = salesQuotationLine.calcQtyOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationLine</Name>
				<Source><![CDATA[
    void  initFromSalesQuotationLine(SalesQuotationLine     _salesQuotationLine,
                                 boolean                _copyPrecisely,
                                 boolean                _copyPriceDisc,
                                 boolean                _copyQty,
                                 Qty                    _qty
                                 , PdsCWInventQty       _cwQty = 0
                                 )
    {
        MCRSalesQuotationLine           mcrSalesQuotationLine, mcrSalesQuotationLineLocal;
        MCRSalesQuotationLineOverride   mcrSalesQuotationLineOverride, mcrSalesQuotationLineOverrideLocal;
		boolean							mcrCallCenterEnabled = isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter));
        RetailSalesQuotationLine		retailSalesQuotationLine, retailSalesQuotationLineLocal;

        mcrSalesQuotationLineLocal = _salesQuotationLine.mcrSalesQuotationLine();
        mcrSalesQuotationLine   = salesQuotationLine.mcrSalesQuotationLine();
        retailSalesQuotationLine = salesQuotationLine.retailSalesQuotationLine();
        retailSalesQuotationLineLocal = _salesQuotationLine.retailSalesQuotationLine();

        salesQuotationLine.TransactionCode      = _salesQuotationLine.TransactionCode;
        salesQuotationLine.Transport            = _salesQuotationLine.Transport;
        salesQuotationLine.Port                 = _salesQuotationLine.Port;
        salesQuotationLine.StatProcId           = _salesQuotationLine.StatProcId;
        salesQuotationLine.CountyOrigDest       = _salesQuotationLine.CountyOrigDest;
        salesQuotationLine.StatTriangularDeal   = _salesQuotationLine.StatTriangularDeal;
        salesQuotationLine.ExternalItemId       = _salesQuotationLine.ExternalItemId;

        this.initFromItemOrCategory(
        _salesQuotationLine.ItemId,
        _salesQuotationLine.SalesCategory,
        _salesQuotationLine.Name);

        if (_salesQuotationLine.Name)
        {
            salesQuotationLine.Name = _salesQuotationLine.Name;
        }

        if (_copyQty)
        {
            salesQuotationLine.setInventDimId(_salesQuotationLine.InventDimId);
            salesQuotationLine.initRetailVariantId(salesQuotationLine.inventDim());

            salesQuotationLine.SalesQty             = _qty;

            salesQuotationLine.PdsCWQty     = _cwQty;

            salesQuotationLine.SalesUnit            = _salesQuotationLine.SalesUnit;
            salesQuotationLine.QtyOrdered           = _salesQuotationLine.SalesQty == _qty ?
                                                  _salesQuotationLine.QtyOrdered      :
                                                  salesQuotationLine.calcQtyOrdered();
        }
        else
        {
            if (salesQuotationLine.isCategoryBased())
            {
                salesQuotationLine.setInventDimId(_salesQuotationLine.InventDimId);
                salesQuotationLine.SalesUnit            = _salesQuotationLine.SalesUnit;
            }
            else
            {
                InventDim inventDim = salesQuotationLine.inventDim();
                EcoResProductDimGroupSetup::copyProductDimensionsForItem(salesQuotationLine.ItemId, _salesQuotationLine.inventDim(), inventDim);
                salesQuotationLine.setInventDimIdFromInventDim(inventDim);
                salesQuotationLine.initRetailVariantId(salesQuotationLine.inventDim());
            }
        }

        if (_copyPriceDisc)
        {
            this.copyPriceDiscFromSalesQuotationLine(_salesQuotationLine);

            mcrSalesQuotationLineOverrideLocal = _salesQuotationLine.mcrSalesQuotationLineOverride();
            if (mcrSalesQuotationLineOverrideLocal.PriceOverride)
            {
                mcrSalesQuotationLineOverride   = salesQuotationLine.mcrSalesQuotationLineOverride();
                mcrSalesQuotationLineOverride.ListPrice                 = mcrSalesQuotationLineOverrideLocal.ListPrice;
                mcrSalesQuotationLineOverride.ListPriceCurrencyCode     = mcrSalesQuotationLineOverrideLocal.ListPriceCurrencyCode;
                mcrSalesQuotationLineOverride.PriceOverride             = mcrSalesQuotationLineOverrideLocal.PriceOverride;
                salesQuotationLine.mcrPackMCRSalesQuotationLineOverride(mcrSalesQuotationLineOverride);
            }
        }

        if (_copyPrecisely)
        {
            salesQuotationLine.setInventDimId(_salesQuotationLine.InventDimId);
            salesQuotationLine.Name               = _salesQuotationLine.Name;
            salesQuotationLine.ExternalItemId     = _salesQuotationLine.ExternalItemId;
            salesQuotationLine.LedgerDimension    = _salesQuotationLine.LedgerDimension;
            salesQuotationLine.CostPrice          = _salesQuotationLine.CostPrice;
            salesQuotationLine.TaxGroup           = _salesQuotationLine.TaxGroup;
            salesQuotationLine.setTaxItemGroup(_salesQuotationLine.TaxItemGroup);
            salesQuotationLine.DefaultDimension   = salesQuotationLine.copyDimension(_salesQuotationLine.DefaultDimension,this.dimensionCopy());
            salesQuotationLine.OverDeliveryPct    = _salesQuotationLine.OverDeliveryPct;
            salesQuotationLine.UnderDeliveryPct   = _salesQuotationLine.UnderDeliveryPct;
            salesQuotationLine.SalesGroup         = _salesQuotationLine.SalesGroup;
            salesQuotationLine.BarCode            = _salesQuotationLine.BarCode;
            salesQuotationLine.BarCodeType        = _salesQuotationLine.BarCodeType;
            salesQuotationLine.Transport          = _salesQuotationLine.Transport;
            salesQuotationLine.Port               = _salesQuotationLine.Port;
            salesQuotationLine.StatProcId         = _salesQuotationLine.StatProcId;
            salesQuotationLine.ProjCategoryId     = _salesQuotationLine.ProjCategoryId;
            salesQuotationLine.setAddressFromSalesQuotationLine(_salesQuotationLine);
            salesQuotationLine.DlvMode            = _salesQuotationLine.DlvMode;
            salesQuotationLine.DlvTerm            = _salesQuotationLine.DlvTerm;
            salesQuotationLine.PackingUnit        = _salesQuotationLine.PackingUnit;
            salesQuotationLine.PackingUnitQty     = _salesQuotationLine.PackingUnitQty;
            salesQuotationLine.TransactionCode    = _salesQuotationLine.TransactionCode;
            salesQuotationLine.ItemBOMId          = _salesQuotationLine.ItemBOMId;
            salesQuotationLine.ItemRouteId        = _salesQuotationLine.ItemRouteId;
            salesQuotationLine.IntrastatCommodity = _salesQuotationLine.IntrastatCommodity;
            salesQuotationLine.OrigCountryRegionId = _salesQuotationLine.OrigCountryRegionId;
            salesQuotationLine.OrigStateId        = _salesQuotationLine.OrigStateId;
            salesQuotationLine.OverrideSalesTax = _salesQuotationLine.OverrideSalesTax;

            mcrSalesQuotationLine.DeliveryCompanyName   = mcrSalesQuotationLineLocal.DeliveryCompanyName;

            if (mcrCallCenterEnabled)
            {
                mcrSalesQuotationLine.RetailPriceOverrideWorkflowState = mcrSalesQuotationLineLocal.RetailPriceOverrideWorkflowState;
                retailSalesQuotationLine.OriginalPrice = retailSalesQuotationLineLocal.OriginalPrice;
                retailSalesQuotationLine.PriceOverrideReasonCode = retailSalesQuotationLineLocal.PriceOverrideReasonCode;
				// clear workflow state for new sales line if was rejected
                if (mcrSalesQuotationLine.RetailPriceOverrideWorkflowState == RetailPriceOverrideWorkflowState::Rejected)
                {
                    mcrSalesQuotationLine.RetailPriceOverrideWorkflowState = RetailPriceOverrideWorkflowState::NotSubmitted;
                }

                salesQuotationLine.retailPackRetailSalesQuotationLine(retailSalesQuotationLine);
            }

            salesQuotationLine.mcrPackMCRSalesQuotationLine(mcrSalesQuotationLine);
        }

        salesQuotationLine.setDeliveryDateControlType();

        salesQuotationLine.QuotationLineCreationMethod = SalesQuotationCreationMethod::SCM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationTable</Name>
				<Source><![CDATA[
    void  initFromSalesQuotationTable(SalesQuotationTable _salesQuotationTable, boolean _ignoreInventDim = false)
    {
        MCRSalesQuotationLine   mcrSalesQuotationLine = salesQuotationLine.mcrSalesQuotationLine();
        MCRSalesQuotationTable  mcrSalesQuotationTable = _salesQuotationTable.mcrSalesQuotationTable();

        salesQuotationLine.QuotationId              = _salesQuotationTable.QuotationId;

        // If a source code does not exist, then populate the sales quotation line price fields since
        // it will not be run through source codes init.
        if (mcrSalesQuotationTable.SourceId)
        {
            // Only default the source code to the line if the header source
            // code is valid.
            if (MCRSourceCodeSetup::validateSourceEffective(mcrSalesQuotationTable.SourceId))
            {
                mcrSalesQuotationLine.SourceId         = mcrSalesQuotationTable.SourceId;
            }
        }

        salesQuotationLine.DefaultDimension         = salesQuotationLine.copyDimension(_salesQuotationTable.DefaultDimension,this.dimensionCopy());
        salesQuotationLine.QuotationType            = _salesQuotationTable.QuotationType;
        salesQuotationLine.SalesGroup               = _salesQuotationTable.SalesGroup;
        salesQuotationLine.CurrencyCode             = _salesQuotationTable.CurrencyCode;
        salesQuotationLine.DeliveryDateControlType  = _salesQuotationTable.DeliveryDateControlType;
        salesQuotationLine.ReceiptDateRequested     = _salesQuotationTable.ReceiptDateRequested;
        salesQuotationLine.ShippingDateRequested    = _salesQuotationTable.ShippingDateRequested;
        salesQuotationLine.ConfirmedDlv             = _salesQuotationTable.ShippingDateRequested;
        salesQuotationLine.CustomerRef              = _salesQuotationTable.CustomerRef;

        if (!_ignoreInventDim)
        {
            this.initStorageDimesionsFromSalesQuotationTable(_salesQuotationTable);
        }

        salesQuotationLine.CustAccount              = _salesQuotationTable.CustAccount;

        if (salesQuotationLine.CustAccount)
        {
            salesQuotationLine.initFromCustTable();
        }

        salesQuotationLine.setAddressFromSalesQuotationTable(_salesQuotationTable);

        this.setTaxGroup(TaxSales::custTaxGroup(_salesQuotationTable.DlvMode, _salesQuotationTable.TaxGroup));
        salesQuotationLine.OverrideSalesTax = _salesQuotationTable.OverrideSalesTax;

        salesQuotationLine.TransactionCode          = _salesQuotationTable.TransactionCode;
        salesQuotationLine.Transport                = _salesQuotationTable.Transport;
        salesQuotationLine.Port                     = _salesQuotationTable.Port;
        salesQuotationLine.StatProcId               = _salesQuotationTable.StatProcId;
        salesQuotationLine.CountyOrigDest           = _salesQuotationTable.CountyOrigDest;

        salesQuotationLine.DeliveryPostalAddress    = _salesQuotationTable.DeliveryPostalAddress;
        salesQuotationLine.DeliveryName             = _salesQuotationTable.DeliveryName;
        mcrSalesQuotationLine.DeliveryCompanyName   = mcrSalesQuotationTable.DeliveryCompanyName;

        salesQuotationLine.DlvMode                  = _salesQuotationTable.DlvMode;
        salesQuotationLine.DlvTerm                  = _salesQuotationTable.DlvTerm;

        mcrSalesQuotationLine.BusRelAccount         = _salesQuotationTable.BusRelAccount;
        salesQuotationLine.mcrPackMCRSalesParmLine(mcrSalesQuotationLine);

        salesQuotationLine.QuotationLineCreationMethod = _salesQuotationTable.QuotationHeaderCreationMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStorageDimensionsFromHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes storage dimensions from the sales quotation header.
    /// </summary>
    public void initStorageDimensionsFromHeader()
    {
        this.initStorageDimesionsFromSalesQuotationTable(salesQuotationLine.salesQuotationTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStorageDimesionsFromSalesQuotationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes storage dimensions from the sales quotation header.
    /// </summary>
    /// <param name = "_salesQuotationTable">The sales quotation header.</param>
    public void initStorageDimesionsFromSalesQuotationTable(SalesQuotationTable _salesQuotationTable)
    {
        InventDim  inventDim = salesQuotationLine.inventDim();

        if (_salesQuotationTable.InventLocationId && !inventDim.InventLocationId)
        {
            inventDim.InventLocationId                  = _salesQuotationTable.InventLocationId;
        }

        if (_salesQuotationTable.InventSiteId && !inventDim.InventSiteId)
        {
            inventDim.InventSiteId                      = _salesQuotationTable.InventSiteId;
        }

        salesQuotationLine.setInventDimIdFromInventDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpSuppItem</Name>
				<Source><![CDATA[
    void  initFromTmpSuppItem(TmpSuppItem   _tmpSuppItem)
    {
        SalesQuotationDeliverySchedule  salesQuotationDeliverySchedule;

        salesQuotationLine.ItemId = _tmpSuppItem.ItemId;
        InventDim inventDim = salesQuotationLine.inventDim();
        inventDim.mergeUsedDim(InventDimGroupSetup::newItemId(salesQuotationLine.ItemId),
                           InventDim::find(_tmpSuppItem.InventDimId));

        salesQuotationLine.setInventDimIdFromInventDim(inventDim);
        this.initFromInventTable(salesQuotationLine.inventTable());
        salesQuotationLine.initFromCustExternalItemDescription();

        if (PdsGlobal::pdsIsCWItem(salesQuotationLine.ItemId))
        {
            salesQuotationLine.PdsCWQty     = PdsCatchWeight::cwQty(
                                            _tmpSuppItem.ItemId,
                                            _tmpSuppItem.Qty);
        }

        salesQuotationLine.SalesQty           = _tmpSuppItem.Qty;
        salesQuotationLine.QtyOrdered         = salesQuotationLine.calcQtyOrdered();

        if (_tmpSuppItem.SuppItemFree)
        {
            salesQuotationLine.SalesPrice     = 0.0;
            salesQuotationLine.LinePercent    = 0.0;
            salesQuotationLine.LineDisc       = 0.0;
            salesQuotationLine.MultiLnDisc    = 0.0;
            salesQuotationLine.MultiLnPercent = 0.0;
            salesQuotationLine.SalesMarkup    = 0.0;
        }

        salesQuotationLine.LineAmount         = salesQuotationLine.calcLineAmountForced();

        if (_tmpSuppItem.AttachRecId)
        {
            select firstonly salesQuotationDeliverySchedule
            where salesQuotationDeliverySchedule.DeliveryLine == _tmpSuppItem.InventTransId;

            if (salesQuotationDeliverySchedule)
            {
                salesQuotationLine.LineNum = SalesQuotationLine::lastDeliveryScheduleLineNum(salesQuotationDeliverySchedule.OrderLine);
            }
            else
            {
                salesQuotationLine.LineNum  = SalesQuotationLine::findRecId(_tmpSuppItem.AttachRecId).LineNum;
            }
            LineNum lineNum = salesQuotationLine.nextLineNum();
            if (lineNum)
            {
                salesQuotationLine.LineNum  += (lineNum - salesQuotationLine.LineNum) / 2;
            }
            else
            {
                salesQuotationLine.LineNum  += 1.0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesQty</Name>
				<Source><![CDATA[
    void  initSalesQty()
    {
        salesQuotationLine.QtyOrdered = salesQuotationLine.calcQtyOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void  initValue()
    {
        salesQuotationLine.Company         = curext();
        salesQuotationLine.OffsetCompany   = curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a quotation line record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a quotation line record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    public boolean markupAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrHaveDlvModeFieldsChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the delivery fields that affect delivery modes changed.
    /// </summary>
    /// <param name="_salesQuotationLineOrig">
    /// The original <c>SalesQuotationLine</c> table record.
    /// </param>
    /// <param name="_salesQuotationLine">
    /// The updated <c>SalesQuotationLine</c> table record.
    /// </param>
    /// <returns>
    /// true if the delivery fields that affect delivery modes have changed; otherwise, false.
    /// </returns>
    boolean mcrHaveDlvModeFieldsChanged(SalesQuotationLine _salesQuotationLineOrig,
                                   SalesQuotationLine _salesQuotationLine)
    {
        boolean changed = false;

        if (_salesQuotationLineOrig.mcrSalesQuotationLine().SourceId != _salesQuotationLine.mcrSalesQuotationLine().SourceId)
        {
            changed = true;
        }

        return changed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventUpdEstimated</Name>
				<Source><![CDATA[
    boolean  mustInventUpdEstimated()
    {
        SalesQuotationTable salesQuotationTable = salesQuotationLine.salesQuotationTable();
        // No inventrans on templates
        if (salesQuotationTable.isTemplate())
        {
            return false;
        }

        // No inventrans on project quotation lines where type <> 'Item'
        if ((salesQuotationLine.QuotationType == QuotationType::Project)        &&
        (salesQuotationLine.ProjTransType != QuotationProjTransType::Item))
        {
            return false;
        }

        SalesQuotationStatus quotationStatus = salesQuotationTable.QuotationStatus;
        // No inventrans when (status <> created) or (status <> sent)
        if ((quotationStatus != SalesQuotationStatus::Created) &&
        (quotationStatus != SalesQuotationStatus::Sent)    &&
        (quotationStatus != SalesQuotationStatus::Confirmed) &&
        (quotationStatus != SalesQuotationStatus::Lost)    &&
        (quotationStatus != SalesQuotationStatus::Cancelled) &&
        (quotationStatus != SalesQuotationStatus::Revised) &&
        (quotationStatus != SalesQuotationStatus::Modified))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(SalesQuotationLine    _salesQuotationLine)
    {
        salesQuotationLine          = _salesQuotationLine;

        super(_salesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesQuotationLine</Name>
				<Source><![CDATA[
    public SalesQuotationLine parmSalesQuotationLine()
    {
        return salesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMRCCheckRestricted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns false.
    /// </summary>
    /// <returns>
    /// Always returns false .
    /// </returns>
    /// <remarks>
    /// This method is overwritten in derived classes.
    /// </remarks>
    protected boolean pdsMRCCheckRestricted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingSales</Name>
				<Source><![CDATA[
    LedgerPostingType postingSales()
    {
        return LedgerPostingType::SalesRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateDeliveryScheduleOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the quantity field as a sum of the quantity fields on all delivery lines and shipment
    /// and receipt dates as a minimum of corresponding dates on delivery lines.
    /// </summary>
    /// <param name = "_salesQuotationLineOrig">
    /// The original quotation line which is updated.
    /// </param>
    /// <remarks>
    /// If the quantity field must be changed it resets the commercial attributes by looking for trade
    /// agreements.If no delivery lines exist the line is converted to an order line without delivery lines
    /// by setting the <c>LineDeliveryType</c> field to an <c>OrderLine</c> value.
    /// </remarks>
    public void recalculateDeliveryScheduleOrderLine(SalesQuotationLine _salesQuotationLineOrig)
    {
        throw error(error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQtyAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>Quantity</c> field can be edited.
    /// </summary>
    /// <returns>
    ///    true if quantity is not negative; otherwise, false.
    /// </returns>
    boolean salesQtyAllowEdit()
    {
        boolean ok = true;

        if (this.isSalesQuantityNegative())
        {
            ok = checkFailed("@SYS53966");
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesQuantityNegative</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>Quantity</c> is negative.
    /// </summary>
    /// <returns>
    /// true if quantity is negative; otherwise, false.
    /// </returns>
    protected boolean isSalesQuantityNegative()
    {
        return (salesQuotationLine.SalesQty < 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves and assigns cost and sales prices to the current record.
    /// </summary>
    /// <param name = "_projId">
    /// A project ID associated with the current record; optional.
    /// </param>
    /// <param name = "_calcCostPrice">
    /// A Boolean to determine whether to retrieve and assign cost prices; optional.
    /// </param>
    public void setCostSalesPrice(ProjId   _projId = '',
                       boolean _calcCostPrice = !SalesQuotationLine.SkipDefaultingCostPrice) // Set to TRUE if Cost Price is calculated. FALSE will not calculate Cost Price.
    {
        ProjId  projId  = _projId == '' ? salesQuotationLine.salesQuotationTable().ProjIdRef : _projId;

        switch (salesQuotationLine.ProjTransType)
        {
            case QuotationProjTransType::Hour:
				if (_calcCostPrice)
                {
                    if (!ResourceFacade::isResourceInCurrentCompany(salesQuotationline.ProjectResource))
                    {
                        // Intercompany scenario
                        salesQuotationLine.CostPrice = ProjTransferPrice::getResBorrowingCostPriceEstimate(salesQuotationline.ProjectResource,
                                                                                                        ResourceFacade::getLegalEntityId(salesQuotationline.ProjectResource),
                                                                                                        projId,
                                                                                                        salesQuotationLine.ProjCategoryId,
                                                                                                        salesQuotationLine.TransDate);
                    }
                    else if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                    {
                        ProjPriceParameters priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
                            projId,
                            salesQuotationline.ProjectResource,
                            salesQuotationLine.ProjCategoryId,
                            salesQuotationLine.LinePropertyId,
                            salesQuotationLine.TransDate,
                            '',
                            salesQuotationLine.CustAccount,
                            salesQuotationLine.priceGroupId());
                        salesQuotationLine.CostPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams, false);
                    }
                    else
                    {
                        ProjPriceParameters priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
                            projId,
                            salesQuotationline.ProjectResource,
                            salesQuotationLine.ProjCategoryId,
                            salesQuotationLine.LinePropertyId,
                            salesQuotationLine.TransDate,
                            '',
                            '',
                            salesQuotationLine.priceGroupId());
                        salesQuotationLine.CostPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams, false);	
				   }
                }
                if (!SalesQuotationLine.SkipDefaultingSalesPrice)
                {
                    if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                    {
                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
                            projId,
                            salesQuotationline.ProjectResource,
                            salesQuotationLine.ProjCategoryId,
                            salesQuotationLine.LinePropertyId,
                            salesQuotationLine.CostPrice,
                            salesQuotationLine.CurrencyCode,
                            salesQuotationLine.TransDate,
                            salesQuotationLine.priceGroupId(),
                            '',
                            salesQuotationLine.CustAccount);
                        SalesPrice salesprice;
                        [salesprice] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams, salesQuotationLine.priceGroupId() ? true : false);
                        if (salesprice)
                        {
                            salesQuotationLine.SalesPrice = salesprice;
                        }
                    }
                    else
                    {
                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
                            projId,
                            salesQuotationline.ProjectResource,
                            salesQuotationLine.ProjCategoryId,
                            salesQuotationLine.LinePropertyId,
                            salesQuotationLine.CostPrice,
                            salesQuotationLine.CurrencyCode,
                            salesQuotationLine.TransDate,
                            salesQuotationLine.priceGroupId(),
                            '',
                            '');
                        [SalesQuotationLine.SalesPrice] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams, true);
                    }
                }
                break;

            case QuotationProjTransType::Expense:
                if (_calcCostPrice)
                {
                    if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                    {
                        ProjPriceParameters priceParams = ProjCostPriceExpense::constructPriceParametersForFindCostPrice(
							projId,
                            salesQuotationline.ProjectResource,
                            salesQuotationLine.ProjCategoryId,
                            salesQuotationLine.TransDate,
                            '',
                            salesQuotationLine.CustAccount);
                        salesQuotationLine.CostPrice = ProjCostPriceExpense::findCostPriceByPriceParameters(priceParams);
                    }
                    else
                    {
                        ProjPriceParameters priceParams = ProjCostPriceExpense::constructPriceParametersForFindCostPrice(
							projId,
                            salesQuotationline.ProjectResource,
                            salesQuotationLine.ProjCategoryId,
                            salesQuotationLine.TransDate);
                        salesQuotationLine.CostPrice = ProjCostPriceExpense::findCostPriceByPriceParameters(priceParams);
                    }
                }
                if (!salesQuotationLine.SkipDefaultingSalesPrice)
                {
                    if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                    {
                        ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
                            projId,
                            salesQuotationline.ProjectResource,
                            salesQuotationLine.ProjCategoryId,
                            salesQuotationLine.CostPrice,
                            CompanyInfoHelper::standardCurrency(),
                            salesQuotationLine.CurrencyCode,
                            salesQuotationLine.TransDate,
                            salesQuotationLine.priceGroupId(),
                            '',
                            salesQuotationLine.CustAccount);
                        SalesPrice salesprice;
                        [salesprice] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams, salesQuotationLine.priceGroupId() ? true : false);
                        if (salesprice)
                        {
                            salesQuotationLine.SalesPrice = salesprice;
                        }
                    }
                    else
                    {
                        ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
                            projId,
                            salesQuotationline.ProjectResource,
                            salesQuotationLine.ProjCategoryId,
                            salesQuotationLine.CostPrice,
                            CompanyInfoHelper::standardCurrency(),
                            salesQuotationLine.CurrencyCode,
                            salesQuotationLine.TransDate,
                            salesQuotationLine.priceGroupId());
                        [salesQuotationLine.SalesPrice] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams, true);
                    }
                }
                break;

            case QuotationProjTransType::Fee      :
				this.setRevenueSalesPrice(projId);
                break;

            case QuotationProjTransType::Item     :
                this.setItemSalesPrice();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemSalesPrice</Name>
				<Source><![CDATA[
    public void setItemSalesPrice()
    {
        if (!salesQuotationLine.SkipDefaultingSalesPrice)
        {
	        salesQuotationLine.SalesPrice = salesQuotationLine.calcLineAmount(salesQuotationLine.SalesQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineProperty</Name>
				<Source><![CDATA[
    void setLineProperty()
    {
        salesQuotationLine.LinePropertyId = ProjLinePropertySetup::findLinePropertyId(salesQuotationLine.salesQuotationTable().ProjIdRef,
                                                                                  salesQuotationLine.ProjCategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodDate</Name>
				<Source><![CDATA[
    void setPeriodDate()
    {
        PeriodRecId period = ResourceFacade::getPeriod(salesQuotationLine.ProjectResource);

        if (salesQuotationLine.ProjTransType && period)
        {
            date startDate = PeriodFacade::startDate(period, salesQuotationLine.TransDate);
            if (startDate)
            {
                salesQuotationLine.StartDate = startDate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscChangePolicyMultiLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies a multi-line discount related price discount change policy to the related header record.
    /// </summary>
    public void setPriceDiscChangePolicyMultiLine()
    {
        if (PriceDiscPolicyMakePolicy::construct().checkPolicyParmSetup(PriceDiscSystemSource::ManualEntry, ModuleSalesPurch::Sales)
        && !salesQuotationLine.salesQuotationTable().PriceDiscResultFields::multiLineDiscPolicyExist())
        {
            ttsbegin;

            SalesQuotationTable salesQuotationTableLocal = salesQuotationLine.salesQuotationTable(true);
            salesQuotationTableLocal.setPriceDiscChangePolicyMultiLine();
            salesQuotationTableLocal.write();
            
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets <c>ProjCategoryId</c> field of <c>SalesQuotationLine</c> table.
    /// </summary>
    /// <param name="_projCategoryId">
    ///    Project CategoryId value.
    /// </param>
    public void setProjCategoryId(ProjCategoryId _projCategoryId)
    {
        salesQuotationLine.ProjCategoryId = _projCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuotationStatus</Name>
				<Source><![CDATA[
    void  setQuotationStatus(SalesQuotationLine  _salesQuotationLine, InventTransIdSum  inventTransIdSum = null)
    {
        _salesQuotationLine.QuotationStatus = _salesQuotationLine.salesQuotationTable().QuotationStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRevenueSalesPrice</Name>
				<Source><![CDATA[
    public void setRevenueSalesPrice(ProjId projId)
    {
        if (!salesQuotationLine.SkipDefaultingSalesPrice)
        {
            [salesQuotationLine.SalesPrice] = ProjRevenueSalesPrice::findProjRevenueSalesPrice(projId,
                salesQuotationLine.ProjectResource,
                salesQuotationLine.ProjCategoryId,
                salesQuotationLine.CurrencyCode,
                salesQuotationLine.TransDate,
                salesQuotationLine.priceGroupId(),
                salesQuotationLine.priceGroupId() ? true : false,
                0,
                "",
                salesQuotationLine.CustAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStockedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>StockedProduct</c> field for the line based on the line type and item model group for
    /// the associated item.
    /// </summary>
    public void setStockedProduct()
    {
        if (salesQuotationLine.isCategoryBased())
        {
            salesQuotationLine.StockedProduct = NoYes::No;
        }
        else
        {
            salesQuotationLine.StockedProduct = salesQuotationLine.inventTable().isStocked() ? NoYes::Yes : NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup</Name>
				<Source><![CDATA[
    void  setTaxGroup(TaxGroup  _taxGroup)
    {
        salesQuotationLine.TaxGroup = _taxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxItemGroup</Name>
				<Source><![CDATA[
    void setTaxItemGroup(TaxItemGroup _taxItemGroup)
    {
        salesQuotationLine.TaxItemGroup = _taxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a quotation line record is updated.
    /// </summary>
    public void updating()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a quotation line record has been updated.
    /// </summary>
    /// <param name="_salesQuotationLineOrig">
    /// The original quotation line which is updated.
    /// </param>
    public void updated(SalesQuotationLine _salesQuotationLineOrig)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderLineOfDeliverySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the order line of the delivery schedule to which the delivery line belongs.
    /// </summary>
    /// <remarks>
    /// This method is used by update and delete methods to trigger recalculation of the order line.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The order line of the selected delivery line was deleted.
    /// </exception>
    void updateOrderLineOfDeliverySchedule()
    {
        SalesQuotationLineType_WithMultipleDlvs salesQuotationOrderLineType;

        SalesQuotationLine salesQuotationOrderLine = SalesQuotationDeliverySchedule::findOrderLineForDeliveryLine(salesQuotationLine.InventTransId, true);
        if (!salesQuotationOrderLine)
        {
            // The order line of the selected delivery line was deleted.
            throw error("@SYS131419");
        }
        else
        {
            salesQuotationOrderLine.recalculateDeliveryScheduleOrderLine();
            // calling update without updating delivery schedule line to indicate that this is a DS synchronization update
            // and thus SalesQty changes are allowed.
            salesQuotationOrderLine.updateWithoutUpdatingDeliveryScheduleLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean  validateDelete(boolean validateOnly = false)
    {
        boolean     ok = true;

        if (SalesQuotationPriceSimTable::find(salesQuotationLine.QuotationId))
        {
            if (validateOnly)
            {
                ok = false;
            }
            else
            {
                if (Box::yesNo("@SYS99999",DialogButton::No) == DialogButton::Yes)
                SalesQuotationPriceSimTable::deleteSimulationHeader(salesQuotationLine.QuotationId);
                else
                ok = false;
            }
        }

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            ok = ok && this.kittingValidateDelete(salesQuotationLine);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates fields for the <c>SalesQuotationLine</c> table.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>fieldId</c> of the field to validate.
    /// </param>
    /// <returns>
    /// true if the validation of the field is successful; otherwise, false.
    /// </returns>
    public boolean  validateField(FieldId  _fieldId)
    {
        boolean             ok = true;
        InventItemBarcode   inventItemBarcode;
        // <GIN>
        boolean                         taxParameter = TaxParameters::checkTaxParameters_IN();
        TaxInventVATCommodityCode_IN    taxInventVATCommodityCode_IN;
        SalesQuotationLineTaxExtensionIN salesQuotationLineTaxExtensionIN = SalesQuotationLineTaxExtensionIN::findBysalesQuotationLine(salesQuotationLine.RecId,true);
	// </GIN>

        switch (_fieldId)
        {
            case fieldNum(SalesQuotationLine, ItemId):
                ok = salesQuotationLine.checkItemId();
                if (!WHSFilter::custFilterMatch(salesQuotationLine.CustAccount, salesQuotationLine.ItemId))
                {
                    ok = checkFailed(strFmt("@WAX:CustomerFiltersMatchingMessage", salesQuotationLine.ItemId));
                }
                break;

            case fieldNum(SalesQuotationLine, SalesCategory):
                ok = salesQuotationLine.checkSalesCategory();
                break;

            case fieldNum(SalesQuotationLine, SalesQty):
            if (this.validateSalesQty())
                {
                    ok = this.salesQtyAllowEdit();
                }
                ok = ok ? PriceDiscPolicyRule::createInstance(salesQuotationLine).launchPolicyDialogForAllPolicyFields(false, false) : ok;
                break;

            case fieldNum(SalesQuotationLine, SalesUnit):
                ok = salesQuotationLine.checkSalesUnit();
                break;

            case fieldNum(SalesQuotationLine, DeliveryDateControlType):
                ok = salesQuotationLine.SalesDeliveryDateControlMap::checkDeliveryDateControlType(salesQuotationLine.ItemId, salesQuotationLine.isStocked());
                break;

            case fieldNum(SalesQuotationLine, BarCode):
            if (salesQuotationLine.BarCode)
                {
                    select firstonly inventItemBarcode where inventItemBarcode.ItemBarCode == salesQuotationLine.BarCode &&
                    inventItemBarcode.ItemId == salesQuotationLine.ItemId &&
                    inventItemBarcode.BarcodeSetupId == salesQuotationLine.BarCodeType;
                    if (!inventItemBarcode)
                    {
                        // The value %1 in the field %2 does not exist in the attached table %3
                        ok = checkFailed(strFmt("@SYS31784",salesQuotationLine.BarCode,fieldPName(SalesQuotationLine,BarCode),tablePName(InventItemBarcode)));
                    }
                }
                break;

            case fieldNum(SalesQuotationLine, InventDimId):
            if (salesQuotationLine.isCategoryBased())
                {
                    ok = salesQuotationLine.inventDim().validateField(fieldNum(InventDim,InventLocationId));
                }
                else if (!salesQuotationLine.isStocked())
                {
                    ok = InventDim::checkUpdateEstimatedMovement(InventMovement::construct(salesQuotationLine, InventMovSubType::None,null),null);
                }
                break;
            // <GIN>
            case fieldNum(SalesQuotationLineTaxExtensionIN, MaximumRetailPrice):
                if (taxParameter)
                {
                    ok = TransTaxInformationHelper::checkMaximumRetailPrice(salesQuotationLineTaxExtensionIN.MaximumRetailPrice);
                }
                break;

            case fieldNum(SalesQuotationLineTaxExtensionIN, AssessableValueTransactionCurrency):

                if (taxParameter && (salesQuotationLine.SalesQty * salesQuotationLineTaxExtensionIN.AssessableValueTransactionCurrency < 0))
                {
                    ok = checkFailed("@GLS5572");
                }
                break;
	    // </GIN>

            // <GBR>
            case fieldNum(SalesQuotationLine, cfopTable_BR):
            if (BrazilParameters::isEnabled())
                {
                    ok = salesQuotationLine.checkCFOP_BR();
                }
            // </GBR>

            case fieldNum(MCRSalesQuotationLine, SourceId)           :
            if (salesQuotationLine.mcrSalesQuotationLine().SourceId)
                {
                    ok = MCRSourceCodeSetup::validateSourceCode(salesQuotationLine.mcrSalesQuotationLine().SourceId);
                }
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the <c>Quantity</c> field can be validated.
    /// </summary>
    /// <returns>
    ///    true if the <c>Quantity</c> field can be validated; otherwise, false.
    /// </returns>
    boolean validateSalesQty()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDisabledFields</Name>
				<Source><![CDATA[
    protected boolean validateDisabledFields()
    {
        boolean ret = true;

        if (salesQuotationLine.QuotationType == QuotationType::Sales)
        {
            List fields = new List(Types::Integer);
            fields.appendList(this.disabledFieldsWhenSalesQuotationLineExist());
            fields.appendList(this.disabledFieldsIfCustomerAccountNotSpecified());
            fields.appendList(this.disabledInventoryRelatedFieldsIfNotInventoriedItem());
            fields.appendList(this.disabledFieldsIfLineIsNotItemBased());

            ret = this.checkFieldsAreNotModified(fields);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disabledFieldsWhenSalesQuotationLineExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Return disabled fields in <t>SalesQuotationLine</t> if record exist.
    /// </summary>
    /// <returns>
    ///    List of fields which are disabled.
    /// </returns>
    protected List disabledFieldsWhenSalesQuotationLineExist()
    {
        List fields = new List(Types::Integer);
        if (salesQuotationLine.RecId != 0)
        {
            fields.addEnd(fieldNum(SalesQuotationLine, ItemId));
            fields.addEnd(fieldNum(SalesQuotationLine, SalesCategory));
        }

        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disabledFieldsIfCustomerAccountNotSpecified</Name>
				<Source><![CDATA[
    private List disabledFieldsIfCustomerAccountNotSpecified()
    {
        List fields = new List(Types::Integer);

        if (!salesQuotationLine.salesQuotationTable().CustAccount)
        {
            fields.addEnd(fieldNum(SalesQuotationLine, MultiLnDisc));
            fields.addEnd(fieldNum(SalesQuotationLine, MultiLnPercent));
        }

        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disabledInventoryRelatedFieldsIfNotInventoriedItem</Name>
				<Source><![CDATA[
    private List disabledInventoryRelatedFieldsIfNotInventoriedItem()
    {
        List fields = new List(Types::Integer);

        if (!salesQuotationLine.isStocked())
        {
            fields.addEnd(fieldNum(SalesQuotationLine, QtyOrdered));
            fields.addEnd(fieldNum(SalesQuotationLine, InventDeliverNow));
            fields.addEnd(fieldNum(SalesQuotationLine, RemainInventPhysical));
            fields.addEnd(fieldNum(SalesQuotationLine, OrigCostPrice));
        }

        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disabledFieldsIfLineIsNotItemBased</Name>
				<Source><![CDATA[
    private List disabledFieldsIfLineIsNotItemBased()
    {
        List fields = new List(Types::Integer);

        if (salesQuotationLine.ItemId == '')
        {
            fields.addEnd(fieldNum(SalesQuotationLine, BarCode));
            fields.addEnd(fieldNum(SalesQuotationLine, BarCodeType));
            fields.addEnd(fieldNum(SalesQuotationLine, ItemRouteId));
            fields.addEnd(fieldNum(SalesQuotationLine, ItemBOMId));
            fields.addEnd(fieldNum(SalesQuotationLine, LineHeader));
            fields.addEnd(fieldNum(SalesQuotationLine, PriceCalcId));
            fields.addEnd(fieldNum(SalesQuotationLine, NewTotalContributionRatio));
            fields.addEnd(fieldNum(SalesQuotationLine, NewSalesPrice));
        }

        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFieldsAreNotModified</Name>
				<Source><![CDATA[
    private boolean checkFieldsAreNotModified(List _fieldIds)
    {
        var enumerator = _fieldIds.getEnumerator();
        boolean result = true;

        while (enumerator.moveNext())
        {
            FieldId fieldId = enumerator.current();
            result = result & this.checkFieldNotModified(fieldId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFieldNotModified</Name>
				<Source><![CDATA[
    private boolean checkFieldNotModified(FieldId _fieldId)
    {
        boolean result = true;
        if (this.isFieldModified(salesQuotationLine, _fieldId))
        {
            result = this.allowEditCheckFailed(fieldId2PName(tableNum(SalesQuotationLine), _fieldId));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditCheckFailed</Name>
				<Source><![CDATA[
    private boolean allowEditCheckFailed(FieldLabel _fieldLabel)
    {
        return checkFailed(strFmt("@ApplicationFoundation:DataEntitiesNoAllowEdit", _fieldLabel));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldModified</Name>
				<Source><![CDATA[
    private boolean isFieldModified(Common _table, FieldId _fieldId)
    {
        if (_table.isFieldSet(_fieldId))
        {
            if (_table.RecId)
            {
                Common orig = _table.orig();
                return _table.(_fieldId) != orig.(_fieldId);
            }
            else
            {
                Common blankBuffer = new SysDictTable(_table.TableId).makeRecord();
                return _table.(_fieldId) != blankBuffer.(_fieldId);
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean     ok          = true;
        InventTable             inventTable             = salesQuotationLine.inventTable();
        LogisticsPostalAddress  logisticsPostalAddress  = salesQuotationLine.deliveryAddress();

        if (!salesQuotationLine.salesQuotationTable())
        {
            ok = checkFailed("@SYS84628");
        }

        if (salesQuotationLine.SalesQty * salesQuotationLine.LineAmount < 0)
        {
            ok = checkFailed("@SYS78848");
        }

        ok = ok && this.validateDisabledFields();

        if (SalesQuotationPriceSimTable::find(salesQuotationLine.QuotationId))
        {
            if (FormDataUtil::isFormDataSource(salesQuotationLine) && Box::yesNo("@SYS99999",DialogButton::No) == DialogButton::Yes)
            {
                SalesQuotationPriceSimTable::deleteSimulationHeader(salesQuotationLine.QuotationId);
            }
            else
            {
                ok = false;
            }
        }
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && TaxParameters::checkTaxParameters_IN())
        {
            SalesQuotationLineTaxExtensionIN salesQuotationLineTaxExtensionIN = SalesQuotationLineTaxExtensionIN::findBysalesQuotationLine(salesQuotationLine.RecId,true);
            if (salesQuotationLine.SalesQty * salesQuotationLineTaxExtensionIN.AssessableValueTransactionCurrency < 0)
            {
                ok = checkFailed("@GLS5572");
            }
        }
        // </GIN>

        if (ok && #PmfEnabled)
        {
            ok = salesQuotationLine.inventTable()
                .pmfInventProductType().validateInventUpd();
        }

        // If call center is in use, validate the call center fields.
        if (ok
        && MCROrderParameters::isCallCenterEnabledAndInUse())
        {
            MCROrderParameters mcrOrderParameters = MCROrderParameters::find();
            MCRSalesQuotationLine mcrSalesQuotationLine = salesQuotationLine.mcrSalesQuotationLine();
            RetailParameters retailParameters = RetailParameters::find();

            // If there is a source code validate source code is not effective return false.
            if (mcrSalesQuotationLine.SourceId)
            {
                if (!MCRSourceCodeSetup::validateSourceEffective(mcrSalesQuotationLine.SourceId))
                {
                    ok = false;
                }
            }
            else if (mcrOrderParameters.mcrSourceCodeRequired)
        // If source code required and blank, return error.
            {
                ok = checkFailed("@MCR12005");
            }

            // Sales quotations may not contain continuity items.
            if (ok
            && InventTable::mcrIsItemContinuity(salesQuotationLine.ItemId))
            {
                ok = checkFailed("@MCR35614");
            }

            // Sales quotations may not contain gift cards.
            if (ok
            && retailParameters.GiftcardItem
            && inventTable.ItemId == retailParameters.GiftcardItem)
            {
                ok = checkFailed("@MCR25186");
            }
        }
        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            ok = ok && this.kittingValidateWrite(salesQuotationLine);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemOrderSetupType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>InventItemOrderSetupType</c> corresponding to the sales quotation line.
    /// </summary>
    /// <returns>
    /// An enum value from <c>InventItemOrderSetupType</c> base enum.
    /// </returns>
    protected InventItemOrderSetupType inventItemOrderSetupType()
    {
        return InventItemOrderSetupType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForeignTradeFromInventTable</Name>
				<Source><![CDATA[
    private void initForeignTradeFromInventTable(InventTable _inventTable)
    {
        salesQuotationLine.IntrastatCommodity = _inventTable.IntrastatCommodity;
        salesQuotationLine.OrigCountryRegionId = _inventTable.OrigCountryRegionId;
        salesQuotationLine.OrigStateId = _inventTable.OrigStateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesQuotationLineType construct(SalesQuotationLine _salesQuotationLine)
    {
        if (_salesQuotationLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            // order lines with multiple deliveries are handled independently of order type
            return SalesQuotationLineType_WithMultipleDlvs::construct(_salesQuotationLine);
        }

        SalesQuotationTypeFactoryAttribute  attribute       = new SalesQuotationTypeFactoryAttribute(_salesQuotationLine.QuotationType);
        SysExtensionGenericInstantiation    instantiation   = new SysExtensionGenericInstantiation(_salesQuotationLine);
        SalesQuotationLineType              instance        = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(SalesQuotationLineType), attribute, instantiation) as SalesQuotationLineType;

        if (classIdGet(instance) == classNum(SalesQuotationLineType))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userProvidedInventDimFields</Name>
				<Source><![CDATA[
    private Set userProvidedInventDimFields()
    {
        return InventDim::dimFieldList2Set(preDefaultingInventDimParm.selectedDimFields());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromField</Name>
				<Source><![CDATA[
    public void defaultFromField(FieldId _fieldId, boolean _userInput)
    {
        switch (_fieldId)
        {
            case fieldNum(SalesQuotationLine, InventDimId):
                InventDim mergedDim = salesQuotationLine.inventDim();

                if (preDefaultingInventDim.InventSiteId && mergedDim.InventSiteId != preDefaultingInventDim.InventSiteId && !preDefaultingInventDim.InventLocationId)
                {
                    preDefaultingInventDim.InventStorageDimMap::modifiedInventSiteFromParent(salesQuotationLine);
                    preDefaultingInventDimParm.InventLocationIdFlag = NoYes::Yes;
                }

                if (preDefaultingInventDim.InventLocationId
                    && !preDefaultingInventDim.InventSiteId
                    && (mergedDim.InventLocationId != preDefaultingInventDim.InventLocationId || !mergedDim.InventSiteId))
                {
                    preDefaultingInventDim.InventStorageDimMap::modifiedInventLocationFromParent(salesQuotationLine);
                    preDefaultingInventDimParm.InventSiteIdFlag = mergedDim.InventSiteId != preDefaultingInventDim.InventSiteId;
                }

                mergedDim.initFromInventDim(preDefaultingInventDim, preDefaultingInventDimParm.selectedDimFields());
                salesQuotationLine.modifyInventDimSet(mergedDim, this.userProvidedInventDimFields());
                mergedInventDimId = salesQuotationLine.InventDimId;
                break;

            case fieldNum(SalesQuotationLine, QuotationId):
                this.initFromSalesQuotationTable(SalesQuotationTable::find(salesQuotationLine.QuotationId));
                break;

            case fieldNum(SalesQuotationLine, ItemId):
                this.initFromInventTable(salesQuotationLine.inventTable(), true);
                break;
        }

        salesQuotationLine.modifiedField(_fieldId, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultingFields</Name>
				<Source><![CDATA[
    public List defaultingFields()
    {
        List result = new List(Types::Integer);
        
        result.addEnd(fieldNum(SalesQuotationLine, QuotationId));
        result.addEnd(fieldNum(SalesQuotationLine, SalesCategory));
        result.addEnd(fieldNum(SalesQuotationLine, ItemId));
        result.addEnd(fieldNum(SalesQuotationLine, SalesDeliverNow));
        result.addEnd(fieldNum(SalesQuotationLine, SalesPrice));
        result.addEnd(fieldNum(SalesQuotationLine, InventDimId));
        result.addEnd(fieldNum(SalesQuotationLine, LinePercent));
        result.addEnd(fieldNum(SalesQuotationLine, LineDisc));
        result.addEnd(fieldNum(SalesQuotationLine, LineAmount));
        result.addEnd(fieldNum(SalesQuotationLine, SalesUnit));
        result.addEnd(fieldNum(SalesQuotationLine, PriceUnit));
        result.addEnd(fieldNum(SalesQuotationLine, SalesQty));
        result.addEnd(fieldNum(SalesQuotationLine, PdsCWQty));
        result.addEnd(fieldNum(SalesQuotationLine, SalesMarkup));
        result.addEnd(fieldNum(SalesQuotationLine, MultiLnDisc));
        result.addEnd(fieldNum(SalesQuotationLine, MultiLnPercent));
        result.addEnd(fieldNum(SalesQuotationLine, PackingUnit));
        result.addEnd(fieldNum(SalesQuotationLine, SuframaDiscount_BR));
        result.addEnd(fieldNum(SalesQuotationLine, ProjectResource));
        result.addEnd(fieldNum(SalesQuotationLine, ProjTransType));        
        result.addEnd(fieldNum(SalesQuotationLine, ProjCategoryId));
        result.addEnd(fieldNum(SalesQuotationLine, TransDate));
        result.addEnd(fieldNum(SalesQuotationLine, CurrencyCode));
        result.addEnd(fieldNum(SalesQuotationLine, LinePropertyId));
        result.addEnd(fieldNum(SalesQuotationLine, ConfirmedDlv));
        result.addEnd(fieldNum(SalesQuotationLine, ProjDescription));
        result.addEnd(fieldNum(SalesQuotationLine, CostPrice));
        result.addEnd(fieldNum(SalesQuotationLine, SalesCategory));
        result.addEnd(fieldNum(SalesQuotationLine, ReceiptDateRequested));
        result.addEnd(fieldNum(SalesQuotationLine, ShippingDateRequested));
        result.addEnd(fieldNum(SalesQuotationLine, DeliveryPostalAddress));
        result.addEnd(fieldNum(SalesQuotationLine, DlvTerm));
        result.addEnd(fieldNum(SalesQuotationLine, OrigCountryRegionId));
        result.addEnd(fieldNum(SalesQuotationLine, DlvMode));
        result.addEnd(fieldNum(SalesQuotationLine, DeliveryDateControlType));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaults</Name>
				<Source><![CDATA[
    public void initDefaults()
    {
        preDefaultingInventDim = salesQuotationLine.inventDim();
        preDefaultingInventDimParm = preDefaultingInventDim.toDimParm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeChanges</Name>
				<Source><![CDATA[
    public void mergeChanges()
    {
        if (mergedInventDimId)
        {
            salesQuotationLine.InventDimId = mergedInventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergableFields</Name>
				<Source><![CDATA[
    public Set mergableFields()
    {
        Set result = new Set(Types::Integer);
        result.add(fieldNum(SalesQuotationLine, InventDimId));
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validationFields</Name>
				<Source><![CDATA[
    public Set validationFields()
    {
        Set result = new Set(Types::Integer);
        result.add(fieldNum(SalesQuotationLine, SalesQty));
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventUpd_Estimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an instance of the <c>InventUpd_Estimated</c> class.
    /// </summary>
    /// <param name = "_childBuffer">A <c>Common</c> record.</param>
    /// <param name = "_inventMovSubType">An <c>InventMovSubType</c> value.</param>
    /// <returns>An <c>InventUpd_Estimated</c> instance.</returns>
    protected InventUpd_Estimated instantiateInventUpd_Estimated(Common _childBuffer, InventMovSubType _inventMovSubType)
    {
        return InventUpd_Estimated::newInventMovement(this.instantiateInventMovement(_inventMovSubType, _childBuffer));
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventUpd_DeleteMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an instance of the <c>InventUpd_DeleteMovement</c> class.
    /// </summary>
    /// <param name = "_childBuffer">A <c>Common</c> record.</param>
    /// <param name = "_inventMovSubType">An <c>InventMovSubType</c> value.</param>
    /// <returns>An <c>InventUpd_DeleteMovement</c> instance.</returns>
    protected InventUpd_DeleteMovement instantiateInventUpd_DeleteMovement(Common _childBuffer, InventMovSubType _inventMovSubType)
    {
        return InventUpd_DeleteMovement::newMovement(this.instantiateInventMovement(_inventMovSubType, _childBuffer));
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateInventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an instance of the <c>InventMovement</c> class.
    /// </summary>
    /// <param name = "_inventMovSubType">An <c>InventMovSubType</c> value.</param>
    /// <param name = "_childBuffer">A <c>Common</c> record.</param>
    /// <returns>An <c>InventMovement</c> instance.</returns>
    protected InventMovement instantiateInventMovement(InventMovSubType _inventMovSubType, Common _childBuffer)
    {
        if (!salesQuotationLine.RemainInventPhysical 
            || SalesQuotationLineV2EntityUpdateRemainInventPhysicalFlight::instance().isEnabled())
        {
            InventMovement::bufferSetRemainQty(salesQuotationLine);
        }

        return InventMovement::construct(salesQuotationLine, _inventMovSubType, _childBuffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryOnInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory when a <c>SalesQuotationLine</c> is inserted into the database.
    /// </summary>
    /// <returns>A new instance of the <c>InventUpd_Estimated</c> class.</returns>
    public InventUpd_Estimated updateInventoryOnInsert(Common _childBuffer)
    {
        InventUpd_Estimated estimated = this.instantiateInventUpd_Estimated(_childBuffer, InventMovSubType::None);
        if (estimated)
        {
            estimated.updateNow();
        }

        return estimated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryOnUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory when a <c>SalesQuotationLine</c> is updated.
    /// </summary>
    /// <param name="_childBuffer">Child buffer for updating the inventory movement.</param>
    /// <returns>A new instance of the <c>InventUpd_Estimated</c> class.</returns>
    public InventUpd_Estimated updateInventoryOnUpdate(Common _childBuffer)
    {
        InventUpd_Estimated estimated = this.instantiateInventUpd_Estimated(_childBuffer, InventMovSubType::None);
        if (estimated)
        {
            estimated.updateNow();
        }

        return estimated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryOnDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the inventory on deletion of a <c>SalesQuotationLine</c>.
    /// </summary>
    /// <param name="_childBuffer">Child buffer for creating the inventory movement.</param>
    /// <returns>A new instance of the <c>InventUpd_DeleteMovement</c> class.</returns>
    public InventUpd_DeleteMovement updateInventoryOnDelete(Common _childBuffer)
    {
        InventUpd_DeleteMovement deleteMovement = this.instantiateInventUpd_DeleteMovement(_childBuffer, InventMovSubType::None);
        if (deleteMovement)
        {
            deleteMovement.updateNow();
        }

        return deleteMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingValidateDelete_delegate</Name>
				<Source><![CDATA[
    delegate void kittingValidateDelete_delegate(SalesQuotationLine _salesQuotationLine, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingValidateDelete</Name>
				<Source><![CDATA[
    protected boolean kittingValidateDelete(SalesQuotationLine _salesQuotationLine)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingValidateDelete_delegate(_salesQuotationLine, resultValue);
        return !resultValue.hasResult() || resultValue.booleanResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingValidateWrite_delegate</Name>
				<Source><![CDATA[
    delegate void kittingValidateWrite_delegate(SalesQuotationLine _salesQuotationLine, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingValidateWrite</Name>
				<Source><![CDATA[
    protected boolean kittingValidateWrite(SalesQuotationLine _salesQuotationLine)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingValidateWrite_delegate(_salesQuotationLine, resultValue);
        return !resultValue.hasResult() || resultValue.booleanResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesUnitFromItem</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void setSalesUnitFromItem()
    {
        var inventTableModule = InventTableModule::find(salesQuotationLine.ItemId, ModuleInventPurchSales::Sales);
        if (inventTableModule)
        {
            salesQuotationLine.SalesUnit = !salesQuotationLine.SalesUnit ? inventTableModule.UnitId : salesQuotationLine.SalesUnit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>