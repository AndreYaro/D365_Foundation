<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchaseOrderResponseDeliveryScheduleCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class responsible for creating delivery schedule in purchase order response lines.
/// </summary>
public class PurchaseOrderResponseDeliveryScheduleCreate
{
    private readonly List deliveryLines;
    private readonly PurchaseOrderResponseLine originalLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(List _deliveryLines, PurchaseOrderResponseLine _originalLine)
    {
        this.deliveryLines = _deliveryLines;
        this.originalLine = _originalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDeliveryLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>PurchaseOrderResponseDeliveryScheduleCreate</c> from the parameters.
    /// </summary>
    /// <param name = "_deliveryLines">List of <c>PurchaseOrderResponseLine</c> records.</param>
    /// <param name = "_originalLine">The <c>PurchaseOrderResponseLine</c> which needs to be split into a schedule.</param>
    /// <returns></returns>
    public static PurchaseOrderResponseDeliveryScheduleCreate newFromDeliveryLines(List _deliveryLines,
        PurchaseOrderResponseLine _originalLine)
    {
        PurchaseOrderResponseDeliveryScheduleCreate deliveryScheduleCreate =
            new PurchaseOrderResponseDeliveryScheduleCreate(_deliveryLines, _originalLine);

        return deliveryScheduleCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute the schedule creation.
    /// </summary>
    public void run()
    {
        int listCount = deliveryLines.elements();

        if (listCount == 0)
        {
            throw error("@SCM:ResponseLineScheduleEmptyListError");
        }

        ttsbegin;

        if (this.deliveryScheduleExists(originalLine))
        {
            this.deleteScheduleLines(originalLine);
        }

        var deliveryLinesEnumerator = this.deliveryLines.getEnumerator();

        PurchQty scheduleQty = 0;
        while (deliveryLinesEnumerator.moveNext())
        {
            var responseLine = deliveryLinesEnumerator.current() as PurchaseOrderResponseLine;

            this.verifyBufferType(responseLine);
            responseline.LineState = PurchaseOrderResponseLineState::SplitScheduleLine;
            responseline.ConsumptionState = ConsumptionState::CannotBeConsumed;
            responseline.insert();
            scheduleQty += responseLine.PurchQty;
        }

        this.setOriginalLineState();

        originalLine.PurchQty = scheduleQty;
        originalLine.ConsumptionState = ConsumptionState::CannotBeConsumed;

        originalLine.update(false);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOriginalLineState</Name>
				<Source><![CDATA[
    private void setOriginalLineState()
    {
        switch (originalLine.LineState)
        {
            case PurchaseOrderResponseLineState::Substitute:
                {
                    originalLine.LineState = PurchaseOrderResponseLineState::SubstituteSplit;
                    break;
                }
            case PurchaseOrderResponseLineState::SubstituteSplit, PurchaseOrderResponseLineState::SplitOriginalLine:
                {
                    break;
                }
            default:
                {
                    originalLine.LineState = PurchaseOrderResponseLineState::SplitOriginalLine;
                    break;
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyBufferType</Name>
				<Source><![CDATA[
    private void verifyBufferType(PurchaseOrderResponseLine _responseLine)
    {
        if (_responseLine == null)
        {
            throw error(Error::missingRecord(tableStr(PurchaseOrderResponseLine)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteScheduleLines</Name>
				<Source><![CDATA[
    private void deleteScheduleLines(PurchaseOrderResponseLine _responseLine)
    {
        PurchaseOrderResponseLine scheduleLine;

        delete_from scheduleLine
            where
                scheduleLine.PurchaseOrderResponseHeader == _responseLine.PurchaseOrderResponseHeader &&
                scheduleLine.LineNumber == _responseLine.LineNumber &&
                scheduleLine.LineState == PurchaseOrderResponseLineState::SplitScheduleLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryScheduleExists</Name>
				<Source><![CDATA[
    private boolean deliveryScheduleExists(PurchaseOrderResponseLine _splitOriginalLine)
    {
        return _splitOriginalLine.LineState == PurchaseOrderResponseLineState::SplitOriginalLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>