<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementLineSysDaBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AgreementLineSysDaBuilder</c> class retrieves a list of the agreement lines that match a document using <c>SysDaQueryObject</c> queries.
/// </summary>
internal final class AgreementLineSysDaBuilder
{
    private TableId             salesPurchLineTableId;
    private SalesLine           salesLine;
    private PurchLine           purchLine;
    private date                expDate;
    private ProjId              projId;
    private FieldName           custVendAccountFieldName;
    private CustVendAC          custVendAccount;
    private boolean             getAll;
    private ItemId              itemId;
    private InventDim           salesPurchLineInventDim;
    private Common              salesPurchAgreementHeader;
    private LineDeliveryType    lineDeliveryType;
    private CurrencyCode        currencyCode;
    private UnitOfMeasureSymbol unitId;
    private boolean             inventDimFlight;
    private InventDimId         blankInventDimId;
    
    private AgreementInstrumentationLogger      logger;
    private AgreementHeaderRecId                matchingAgreement;
    private EcoResCategoryId                    category;
    private EcoResCategoryId                    rootCategory;
    private EcoResCategoryNamedHierarchyRole    hierarchyRole;
    private List                                resultList;
    private List                                categoryList;
    private List                                rootCategoryList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAgreementLinesForOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of the agreement lines that matches a sales or purchase order line.
    /// </summary>
    /// <returns>The list of the found agreement lines.</returns>
    internal List getAgreementLinesForOrderLine()
    {
        using (var activityContext = logger.useSysDa().getLinesForOrderLine(salesPurchLineTableId, matchingAgreement != 0, getAll))
        {
            AgreementLineQuantityCommitment  agreementLineQuantity;
            AgreementLineVolumeCommitment    agreementLineVolume;

            this.buildAgreementList(agreementLineQuantity);
            this.buildAgreementList(agreementLineVolume);

            if (getAll || !resultList.empty())
            {
                return resultList;
            }

            if (!categoryList.empty())
            {
                return categoryList;
            }

            return rootCategoryList;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAgreementList</Name>
				<Source><![CDATA[
    private void buildAgreementList(Common _agreementLine)
    {
        if (inventDimFlight)
        {
            this.buildList(_agreementLine, false);
        }
        this.buildList(_agreementLine, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildList</Name>
				<Source><![CDATA[
    private void buildList(Common _agreementLine, boolean _addInventoryDimJoin)
    {
        using (var activityContext = logger.useSysDa().buildList(_agreementLine.TableId, _addInventoryDimJoin, inventDimFlight))
        {
            SysDaQueryObject agreementQueryObject = this.getQuery(_agreementLine, _addInventoryDimJoin);
            SysDaSearchObject agreementSearch = new SysDaSearchObject(agreementQueryObject);

            SysDaSearchStatement searchStatement = new SysDaSearchStatement();

            while (searchStatement.findNext(agreementSearch))
            {
                this.addMatchingAgreementLineToResults(_agreementLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    internal SysDaQueryObject getQuery(Common _agreementLine, boolean _addInventoryDimJoin)
    {
        SysDaQueryExpression queryExpression = this.initializeAgreementExpression(_agreementLine);

        SysDaQueryExpression inventDimExpression = this.getInventDimExpression(_agreementLine, _addInventoryDimJoin);
        if (inventDimExpression)
        {
            queryExpression = queryExpression.and(inventDimExpression);
        }
        
        SysDaQueryExpression itemAndCategoryExpression = this.getItemAndCategoryExpression(_agreementLine);
        if (itemAndCategoryExpression)
        {
            queryExpression = queryExpression.and(itemAndCategoryExpression);
        }

        SysDaQueryExpression projectExpression = this.getProjectExpression(_agreementLine);
        if (projectExpression)
        {
            queryExpression = queryExpression.and(projectExpression);
        }
        
        if (_agreementLine is AgreementLineQuantityCommitment
            && lineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            queryExpression = queryExpression.and(this.getMaximumEnforcedOrProductUnitOfMeasureExpression(_agreementLine));
        }

        SysDaQueryObject agreementQueryObject = new SysDaQueryObject(_agreementLine);
        
        agreementQueryObject.whereClause(queryExpression);

        if (_addInventoryDimJoin)
        {
            agreementQueryObject
                .joinClause(SysDaJoinKind::ExistsJoin, this.getInventDimJoin(_agreementLine))
                .joinClause(SysDaJoinKind::ExistsJoin, this.getAgreementHeaderJoin(_agreementLine, salesPurchAgreementHeader));
        }
        else
        {
            agreementQueryObject.joinClause(SysDaJoinKind::ExistsJoin, this.getAgreementHeaderJoin(_agreementLine, salesPurchAgreementHeader));
        }

        return agreementQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAgreementExpression</Name>
				<Source><![CDATA[
    private SysDaQueryExpression initializeAgreementExpression(Common _agreementLine)
    {
        SysDaQueryExpression agreementExpression;

        if (matchingAgreement)
        {
            agreementExpression =
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, Agreement)),
                    new SysDaValueExpression(matchingAgreement))
                .and(this.getAgreementValidExpression(_agreementLine));
        }
        else
        {
            agreementExpression = this.getAgreementValidExpression(_agreementLine);
        }

        return agreementExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementValidExpression</Name>
				<Source><![CDATA[
    private SysDaQueryExpression getAgreementValidExpression(Common _agreementLine)
    {
        return new SysDaEqualsExpression(
                new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, IsDeleted)),
                new SysDaValueExpression(NoYes::No))
            .and(new SysDaGreaterThanOrEqualsExpression(
                new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, ExpirationDate)),
                new SysDaValueExpression(expDate)))
            .and(new SysDaLessThanOrEqualsExpression(
                new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, EffectiveDate)),
                new SysDaValueExpression(expDate)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemAndCategoryExpression</Name>
				<Source><![CDATA[
    private SysDaQueryExpression getItemAndCategoryExpression(Common _agreementLine)
    {
        SysDaQueryExpression categoryExpression = this.getCategoryExpression(_agreementLine);

        if (itemId)
        {
            SysDaQueryExpression itemExpression =
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, ItemId)),
                    new SysDaValueExpression(itemId)
                ).and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, ItemDataAreaId)),
                    new SysDaValueExpression(appl.company().dataArea(tablenum(InventTable))))
                );

            if (categoryExpression != null)
            {
                return itemExpression.or(categoryExpression);
            }
            
            return itemExpression;
        }

        return categoryExpression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategoryExpression</Name>
				<Source><![CDATA[
    private SysDaQueryExpression getCategoryExpression(Common _agreementLine)
    {
        if (category)
        {
            SysDaQueryExpression categoryExpression =
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, Category)),
                        new SysDaValueExpression(category)
                    ).or(new SysDaEqualsExpression(
                        new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, Category)),
                        new SysDaValueExpression(rootCategory))
                    );

            SysDaQueryExpression expression =
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, ItemId)),
                    new SysDaValueExpression('')
                ).and(
                    categoryExpression
                );

            return expression;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimExpression</Name>
				<Source><![CDATA[
    private SysDaQueryExpression getInventDimExpression(Common _agreementLine, boolean _useInventoryDimensions)
    {
        SysDaQueryExpression expression = new SysDaEqualsExpression(
            new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, InventDimDataAreaId)),
            new SysDaValueExpression(appl.company().dataArea(tablenum(InventDim))));

        if (inventDimFlight)
        {
            if (_useInventoryDimensions)
            {
                expression = expression.and(new SysDaNotEqualsExpression(
                    new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, InventDimId)),
                    new SysDaValueExpression(blankInventDimId)));
            }
            else
            {
                expression = expression.and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, InventDimId)),
                    new SysDaValueExpression(blankInventDimId)));
            }
        }

        return expression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectExpression</Name>
				<Source><![CDATA[
    private SysDaQueryExpression getProjectExpression(Common _agreementLine)
    {
        switch (salesPurchLineTableId)
        {
            case tablenum(PurchLine):
                return new SysDaEqualsExpression(
                            new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, ProjectProjId)),
                            new SysDaValueExpression(projId)
                        ).or(new SysDaEqualsExpression(
                            new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, ProjectProjId)),
                            new SysDaValueExpression('')));
                break;

            case tablenum(SalesLine):
                return new SysDaEqualsExpression(
                        new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, ProjectProjId)),
                        new SysDaValueExpression(projId));
                break;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumEnforcedOrProductUnitOfMeasureExpression</Name>
				<Source><![CDATA[
    private SysDaQueryExpression getMaximumEnforcedOrProductUnitOfMeasureExpression(Common _agreementLine)
    {
        return new SysDaEqualsExpression(
            new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, IsMaxEnforced)),
            new SysDaValueExpression(NoYes::No)
        ).or(new SysDaEqualsExpression(
            new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLineQuantityCommitment, ProductUnitOfMeasure)),
            new SysDaValueExpression(unitId))
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimJoin</Name>
				<Source><![CDATA[
    private SysDaQueryObject getInventDimJoin(Common _agreementLine)
    {
        InventDim inventDim;

        SysDaQueryObject inventDimQueryObject = new SysDaQueryObject(inventDim);

        SysDaQueryExpression inventDimExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, InventDimId)),
                new SysDaFieldExpression(inventDim, fieldStr(InventDim, InventDimId))
            );

        List            productDimFields = InventDim::dimProductDimFieldList();
        ListEnumerator  enumerator = productDimFields.getEnumerator();

        if (enumerator)
        {
            TableId inventDimTableId = tableNum(InventDim);

            while (enumerator.moveNext())
            {
                FieldName dimFieldName = fieldId2Name(inventDimTableId, enumerator.current());

                inventDimExpression = inventDimExpression.and(this.getInventDimFieldExpression(inventDim, dimFieldName));
            }
        }

        inventDimExpression = inventDimExpression
            .and(this.getInventDimFieldExpression(inventDim, fieldStr(InventDim, InventSiteId)))
            .and(this.getInventDimFieldExpression(inventDim, fieldStr(InventDim, InventLocationId)));

        inventDimQueryObject.whereClause(inventDimExpression);

        return inventDimQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimFieldExpression</Name>
				<Source><![CDATA[
    private SysDaQueryExpression getInventDimFieldExpression(InventDim _inventDim, FieldName _dimFieldName)
    {
        return new SysDaEqualsExpression(
            new SysDaFieldExpression(_inventDim, _dimFieldName),
            new SysDaValueExpression(salesPurchLineInventDim.getFieldValue(_dimFieldName))
        ).or(new SysDaEqualsExpression(
            new SysDaFieldExpression(_inventDim, _dimFieldName),
            new SysDaValueExpression(''))
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementHeaderJoin</Name>
				<Source><![CDATA[
    private SysDaQueryObject getAgreementHeaderJoin(Common _agreementLine, Common _agreementHeader)
    {
        SysDaQueryObject agreementHeaderQueryObject = new SysDaQueryObject(_agreementHeader);

        SysDaQueryExpression agreementHeaderExpression = 
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_agreementHeader, fieldStr(AgreementHeader, RecId)),
                new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, Agreement))
            ).and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_agreementHeader, fieldStr(AgreementHeader, IsDeleted)),
                new SysDaValueExpression(NoYes::No))
            ).and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_agreementHeader, fieldStr(AgreementHeader, AgreementState)),
                new SysDaValueExpression(AgreementState::Effective))
            );

        if (_agreementLine is AgreementLineQuantityCommitment)
        {
            SysDaQueryExpression priceOrCurrencyExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(_agreementLine, fieldStr(AgreementLine, IsPriceInformationMandatory)),
                new SysDaValueExpression(NoYes::No)
            ).or(new SysDaEqualsExpression(
                new SysDaFieldExpression(_agreementHeader, fieldStr(AgreementHeader, Currency)),
                new SysDaValueExpression(currencyCode))
            );

            agreementHeaderExpression = agreementHeaderExpression.and(priceOrCurrencyExpression);
        }
        else if (_agreementLine is AgreementLineVolumeCommitment)
        {
            agreementHeaderExpression = agreementHeaderExpression.and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_agreementHeader, fieldStr(AgreementHeader, Currency)),
                new SysDaValueExpression(currencyCode)));
        }

        if (!matchingAgreement)
        {
            agreementHeaderExpression = agreementHeaderExpression.and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_agreementHeader, custVendAccountFieldName),
                new SysDaValueExpression(custVendAccount))
            );
        }

        agreementHeaderQueryObject.whereClause(agreementHeaderExpression);

        return agreementHeaderQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMatchingAgreementLineToResults</Name>
				<Source><![CDATA[
    private void addMatchingAgreementLineToResults(AgreementLine _agreementLine)
    {
        if (getAll)
        {
            resultList.addEnd(_agreementLine);
        }
        else
        {
            if (_agreementLine.ItemId)
            {
                resultList.addEnd(_agreementLine);
            }
            else if (resultList.empty()) //do not add the category agreement lines if item agreement lines are already found
            {
                if (_agreementLine.Category != rootCategory)
                {
                    categoryList.addEnd(_agreementLine);
                }
                else if (categoryList.empty()) //do not add the root category agreement lines if category agreement lines are already found
                {
                    rootCategoryList.addEnd(_agreementLine);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVariables</Name>
				<Source><![CDATA[
    private void initVariables(
        SalesPurchLine          _salesPurchLine,
        AgreementHeaderRecId    _matchingAgreement,
        boolean                 _getAll)
    {
        PurchAgreementHeader    purchAgreementHeader;
        SalesAgreementHeader    salesAgreementHeader;

        salesPurchLineTableId = _salesPurchLine.TableId;

        switch (salesPurchLineTableId)
        {
            case tableNum(SalesLine):
                salesLine                   = _salesPurchLine;
                expDate                     = salesLine.ShippingDateRequested ? salesLine.ShippingDateRequested : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                projId                      = salesLine.ProjId;
                hierarchyRole               = EcoResCategoryNamedHierarchyRole::Sales;
                salesPurchAgreementHeader   = salesAgreementHeader;
                custVendAccount             = salesLine.CustAccount;
                custVendAccountFieldName    = fieldStr(SalesAgreementHeader, CustAccount);
                itemId                      = salesLine.ItemId;
                break;
            case tableNum(PurchLine):
                purchLine                   = _salesPurchLine;
                expDate                     = purchLine.DeliveryDate ? purchLine.DeliveryDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                projId                      = purchLine.ProjId;
                hierarchyRole               = EcoResCategoryNamedHierarchyRole::Procurement;
                salesPurchAgreementHeader   = purchAgreementHeader;
                custVendAccount             = purchLine.VendAccount;
                custVendAccountFieldName    = fieldStr(PurchAgreementHeader, VendAccount);
                itemId                      = purchLine.ItemId;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        SalesPurchLineInterface salesPurchLineInterface = _salesPurchLine.salesPurchLineInterface();

        getAll = _getAll;
        matchingAgreement = _matchingAgreement;
        category = salesPurchLineInterface.parmCategoryId();
        currencyCode = salesPurchLineInterface.parmCurrencyCode();
        unitId = salesPurchLineInterface.parmUnitId();
        salesPurchLineInventDim = salesPurchLineInterface.inventDim();

        if (!category)
        {
            category = EcoResProductCategory::findByItemIdCategoryHierarchyRole(salesPurchLineInterface.parmItemId(), hierarchyRole).Category;
        }

        rootCategory = EcoResCategory::getRoot(EcoResCategoryHierarchyRole::getHierarchiesByRole(hierarchyRole).CategoryHierarchy).RecId;

        inventDimFlight = AgreementLineSysDaBuilderInventDimFlight::instance().isEnabled();
        blankInventDimId = InventDim::findOrCreateBlank().inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        resultList       = new List(Types::Record);
        categoryList     = new List(Types::Record);
        rootCategoryList = new List(Types::Record);

        logger = AgreementInstrumentationLogger::createLogger(classStr(AgreementLineSysDaBuilder));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static AgreementLineSysDaBuilder construct()
    {
        return new AgreementLineSysDaBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>AgreementLineSysDaBuilder</c> class for agreement lines that matches a sales or purchase order line.
    /// </summary>
    /// <param name = "_salesPurchLine">The sales or purchase order line for which to find the agreement lines.</param>
    /// <param name = "_matchingAgreement">The record ID of the agreement header.</param>
    /// <param name = "_getAll">A Boolean value that indicates whether to retrieve all agreement lines that match.</param>
    /// <returns>An instance of the <c>AgreementLineSysDaBuilder</c> class.</returns>
    /// <remarks>
    ///    If the <paramref name="_getAll" /> parameter is false, the optimization will be done. The agreement
    ///    lines will not be added to the list if they have lower priority than the lines already added to the list.
    ///    The item based agreement lines have more priority than the category based agreement lines.
    ///    If the <paramref name="_getAll" /> parameter is true, all found agreement lines will be added to the list.
    /// </remarks>
    internal static AgreementLineSysDaBuilder newSalesPurchLine(
        SalesPurchLine          _salesPurchLine, 
        AgreementHeaderRecId    _matchingAgreement,
        boolean                 _getAll)
    {
        AgreementLineSysDaBuilder sysDaBuilder = AgreementLineSysDaBuilder::construct();

        sysDaBuilder.initVariables(_salesPurchLine, _matchingAgreement, _getAll);

        return sysDaBuilder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>