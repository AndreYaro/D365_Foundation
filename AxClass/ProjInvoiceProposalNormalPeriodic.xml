<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalNormalPeriodic</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjInvoiceProposalPeriodic</c> class is used to create invoice proposals as a part of
/// periodic process that can be batched.
/// </summary>
class ProjInvoiceProposalNormalPeriodic extends ProjInvoiceProposalPeriodic implements BatchRetryable
{
    protected static boolean enableInvoiceProposalCreationgPerfEnhanced = FeatureStateProvider::IsFeatureEnabled
            (ProjInvoiceProposalPerformanceEnhancementFeature::instance());
    protected static ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjInvoiceProposalNormalPeriodic));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapContractToProjects</Name>
				<Source><![CDATA[
    private void mapContractToProjects(ProjTable _projTable, Map contractToProjects)
    {
        if (_projTable.ProjInvoiceProjId)
        {
            Set projIdSet;

            if (contractToProjects.exists(_projTable.ProjInvoiceProjId))
            {
                projIdSet = contractToProjects.lookup(_projTable.ProjInvoiceProjId);
            }
            else
            {
                projIdSet = new Set(Types::String);
            }

            projIdSet.add(_projTable.ProjId);

            contractToProjects.insert(_projTable.ProjInvoiceProjId, projIdSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapContractToProjectsEnhanced</Name>
				<Source><![CDATA[
    public void mapContractToProjectsEnhanced(ProjTable _projTable, Map _contractToProjects, 
        ProjInvoiceProposalCreateLinesParams _params,
        ProjTmpInvoiceableTransCount _tmpProjectInvoiceableTransCount, boolean _isBatch)
    {
        if (_projTable.ProjInvoiceProjId)
        {
            int invoiceableTransCount = this.getInvoiceableTransCountByProject(_projTable, _params);
            if (invoiceableTransCount)
            {
                if (_isBatch)
                {
                    this.updateInvoicableTransCountByProjectForBatch(_projTable, _tmpProjectInvoiceableTransCount, invoiceableTransCount);
                }

                Set projIdSet;

                if (_contractToProjects.exists(_projTable.ProjInvoiceProjId))
                {
                    projIdSet = _contractToProjects.lookup(_projTable.ProjInvoiceProjId);
                }
                else
                {
                    projIdSet = new Set(Types::String);
                }

                projIdSet.add(_projTable.ProjId);
            
                _contractToProjects.insert(_projTable.ProjInvoiceProjId, projIdSet);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceableTransCountByProject</Name>
				<Source><![CDATA[
    public int getInvoiceableTransCountByProject(ProjTable _projTable, ProjInvoiceProposalCreateLinesParams _params)
    {
        int invoiceableTransCount;
 
        if (_projTable.ProjInvoiceProjId && _projTable.ProjId)
        {
            ProjInvoiceableTransCountView invoiceableTransCountView;

            select firstonly invoiceableTransCountView
                where invoiceableTransCountView.ProjId == _projTable.ProjId;

            invoiceableTransCount = this.getCountFromProjInvoiceableTransCountView(invoiceableTransCountView, _params);
        }

        return invoiceableTransCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountFromProjInvoiceableTransCountView</Name>
				<Source><![CDATA[
    protected int getCountFromProjInvoiceableTransCountView(ProjInvoiceableTransCountView _invoiceableTransCountView, ProjInvoiceProposalCreateLinesParams _params)
    {
        int invoiceableTransCount;

        if (_params.parmIsQueryEmplTrans())
        {
            invoiceableTransCount += _invoiceableTransCountView.HourCanBeInvoiceCount;
        }

        if (_params.parmIsQueryRevenueTrans())
        {
            invoiceableTransCount += _invoiceableTransCountView.FeeCanBeInvoiceCount;
        }

        if (_params.parmIsQuerySubscriptionTrans())
        {
            invoiceableTransCount += _invoiceableTransCountView.SubscriptionCanBeInvoiceCount;
        }

        if (_params.parmIsQueryCostTrans())
        {
            invoiceableTransCount += _invoiceableTransCountView.ExpenseCanBeInvoiceCount;
        }

        if (_params.parmIsQueryItemTrans())
        {
            invoiceableTransCount += _invoiceableTransCountView.ItemCanBeInvoiceCount;
        }

        if (_params.parmIsQueryOnAccTrans())
        {
            invoiceableTransCount += _invoiceableTransCountView.OnAccountCanBeInvoiceCount;
        }

        if (_params.parmIsQuerySalesLine())
        {
            invoiceableTransCount += _invoiceableTransCountView.SalesLineCanBeInvoiceCount;
        }

        return invoiceableTransCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoicableTransCountByProjectForBatch</Name>
				<Source><![CDATA[
    private void updateInvoicableTransCountByProjectForBatch(
        ProjTable _projTable,
        ProjTmpInvoiceableTransCount _tmpProjectInvoiceableTransCount,
        int _transCount)
    {
        ttsbegin;
        _tmpProjectInvoiceableTransCount.ProjId = _projTable.ProjId;
        _tmpProjectInvoiceableTransCount.ContractId = _projTable.ProjInvoiceProjId;
        _tmpProjectInvoiceableTransCount.TransCount = _transCount;
        _tmpProjectInvoiceableTransCount.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoicableTransCountPerContractForBatch</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public int updateInvoicableTransCountPerContractForBatch(
        ProjTmpInvoiceableTransCount _tmpProjectInvoiceableTransCount,
        ProjTmpInvoiceableTransCount _tmpContractInvoiceableTransCount,
        int _numSubTasks)
    {
        int maxBundleSize = 1;

        if (_numSubTasks)
        {
            int averageTransCount = this.setupContractInvoiceableTransForBatch(
                _tmpProjectInvoiceableTransCount, _tmpContractInvoiceableTransCount, _numSubTasks);

            if (averageTransCount)
            {
                ttsbegin;
                // Assign each contract with number of transactions which exceeds the average transactions count to a sub task.
                int subTaskGroupId = 1;
                [subTaskGroupId, averageTransCount] = this.assignContractsExceedingAverageTransForBatch(
                    subTaskGroupId, _tmpContractInvoiceableTransCount, averageTransCount, _numSubTasks);

                // Distribute contracts by the sum of transactions assigns to each sub task as close to average transactions as possible until _numSubTasks - 1.
                maxBundleSize = this.distributeContractsAmongSubTasksForBatch(subTaskGroupId,
                    _tmpContractInvoiceableTransCount, maxBundleSize, averageTransCount, _numSubTasks);

                // For the last _numSubTasks, assign all contracts which has not been assigned to any sub task.
                maxBundleSize = this.assignContractsToTheLastSubTaskForBatch(
                    _tmpContractInvoiceableTransCount, maxBundleSize, _numSubTasks);
                ttscommit;
            }
        }

        return maxBundleSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverageTransCountForBatch</Name>
				<Source><![CDATA[
    private int getAverageTransCountForBatch(
        ProjTmpInvoiceableTransCount _tmpContractInvoiceableTransCount,
        int _numSubTasks)
    {
        int averageTransCount;

        if (_numSubTasks)
        {
            select sum(TransCount) from _tmpContractInvoiceableTransCount
                where _tmpContractInvoiceableTransCount.SubTaskGroupId == 0;

            averageTransCount = _tmpContractInvoiceableTransCount.TransCount / _numSubTasks;

            if (averageTransCount == 0 && _tmpContractInvoiceableTransCount.TransCount > 0)
            {
                averageTransCount = 1;
            }
        }
     
        return averageTransCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupContractInvoiceableTransForBatch</Name>
				<Source><![CDATA[
    private int setupContractInvoiceableTransForBatch(
        ProjTmpInvoiceableTransCount _tmpProjectInvoiceableTransCount,
        ProjTmpInvoiceableTransCount _tmpContractInvoiceableTransCount,
        int _numSubTasks)
    {
        insert_recordset _tmpContractInvoiceableTransCount (ContractId, TransCount)
            select ContractId, sum(TransCount) from _tmpProjectInvoiceableTransCount
            group by _tmpProjectInvoiceableTransCount.ContractId;

        int averageTransCount = this.getAverageTransCountForBatch(_tmpContractInvoiceableTransCount, _numSubTasks);

        return averageTransCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignContractsExceedingAverageTransForBatch</Name>
				<Source><![CDATA[
    private container assignContractsExceedingAverageTransForBatch(int _subTaskGroupId, 
        ProjTmpInvoiceableTransCount _tmpContractInvoiceableTransCount,
        int _averageTransCount,
        int _numSubTasks)
    {
        int subTaskGroupId = _subTaskGroupId;
        int averageTransCount = _averageTransCount;

        while select forupdate _tmpContractInvoiceableTransCount
        where _tmpContractInvoiceableTransCount.TransCount >= _averageTransCount
        {
            if (subTaskGroupId < _numSubTasks)
            {
                _tmpContractInvoiceableTransCount.SubTaskGroupId = subTaskGroupId;
                _tmpContractInvoiceableTransCount.update();
                    
                averageTransCount = this.getAverageTransCountForBatch(_tmpContractInvoiceableTransCount,
                    _numSubTasks - subTaskGroupId);

                subTaskGroupId++;
            }
            else
            {
                break;
            }
        }

        return [subTaskGroupId, averageTransCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeContractsAmongSubTasksForBatch</Name>
				<Source><![CDATA[
    private int distributeContractsAmongSubTasksForBatch(int _subTaskGroupId,
        ProjTmpInvoiceableTransCount _tmpContractInvoiceableTransCount,
        int _maxBundleSize,
        int _averageTransCount,
        int _numSubTasks)
    {
        int maxBundleSize = _maxBundleSize;
        int subTaskGroupId = _subTaskGroupId;
        int currentBundleSize;

        while (subTaskGroupId < _numSubTasks)
        {
            int currentTransCount;
            currentBundleSize = 0;
            while select forupdate _tmpContractInvoiceableTransCount
                order by _tmpContractInvoiceableTransCount.TransCount desc,
                    _tmpContractInvoiceableTransCount.RecId
                where _tmpContractInvoiceableTransCount.SubTaskGroupId == 0
            {
                if (currentBundleSize == 0 || (currentTransCount + _tmpContractInvoiceableTransCount.TransCount <= _averageTransCount))
                {
                    currentBundleSize++;
                    maxBundleSize = currentBundleSize > maxBundleSize ? currentBundleSize : maxBundleSize;
                    currentTransCount = currentTransCount + _tmpContractInvoiceableTransCount.TransCount;
                    _tmpContractInvoiceableTransCount.SubTaskGroupId = subTaskGroupId;
                    _tmpContractInvoiceableTransCount.update();
                }

                if (currentTransCount >= _averageTransCount)
                {
                    break;
                }
            }

            subTaskGroupId++;
        }

        return maxBundleSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignContractsToTheLastSubTaskForBatch</Name>
				<Source><![CDATA[
    private int assignContractsToTheLastSubTaskForBatch(
        ProjTmpInvoiceableTransCount _tmpContractInvoiceableTransCount,
        int _maxBundleSize,
        int _numSubTasks)

    {
        int maxBundleSize = _maxBundleSize;

        select count(RecId) from _tmpContractInvoiceableTransCount
            where _tmpContractInvoiceableTransCount.SubTaskGroupId == 0;
        int currentBundleSize = int642int(_tmpContractInvoiceableTransCount.RecId);
        maxBundleSize = currentBundleSize > maxBundleSize ? currentBundleSize : maxBundleSize;

        update_recordset _tmpContractInvoiceableTransCount
            setting SubTaskGroupId = _numSubTasks
            where _tmpContractInvoiceableTransCount.SubTaskGroupId == 0;

        return maxBundleSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query to be used for fetching records to be processed.
    /// </summary>
    void initQuery()
    {
        Query query = new Query();
        query.name('@SYS4000596');

        QueryBuildDataSource qbdsProject = query.addDataSource(tableNum(ProjTable));
        qbdsProject.addRange(fieldNum(ProjTable, ProjInvoiceProjId));
        qbdsProject.addRange(fieldNum(ProjTable, ProjId));

        if (ProjCDSLockingOptionTable::get(ProjCDSLockingOption::CreateInvoiceProposals))
        {
            QueryBuildRange projDSRange = qbdsProject.addRange(fieldNum(ProjTable, ProjDataSource));
            projDSRange.value(SysQuery::value(0));
            projDSRange.status(RangeStatus::Hidden);

            QueryBuildDataSource qbdsContract = qbdsProject.addDataSource(tableNum(ProjInvoiceTable));
            qbdsContract.addLink(fieldNum(ProjInvoiceTable, ProjInvoiceProjId), fieldNum(ProjTable, ProjInvoiceProjId));
            qbdsContract.joinMode(JoinMode::InnerJoin);
            QueryBuildRange contractDSRange = qbdsContract.addRange(fieldNum(ProjInvoiceTable, ProjDataSource));
            contractDSRange.value(SysQuery::value(0));
            contractDSRange.status(RangeStatus::Hidden);
        }

        QueryBuildDataSource qbdsRule = qbdsProject.addDataSource(tableNum(ProjStatusTypeRule));
        QueryBuildRange qbrProposal = qbdsRule.addRange(fieldNum(ProjStatusTypeRule, ProjStatusRule));
        qbrProposal.value(queryValue(ProjStatusRule::CreateInvoiceProposal));
        qbrProposal.status(RangeStatus::Hidden);

        // Hide the other fields used as the primary index for table ProjStatusTypeRule
        QueryBuildRange qbrStatus = qbdsRule.addRange(fieldNum(ProjStatusTypeRule, ProjStatus));
        qbrStatus.status(RangeStatus::Hidden);
        QueryBuildRange qbrProjType = qbdsRule.addRange(fieldNum(ProjStatusTypeRule, ProjType));
        qbrProjType.status(RangeStatus::Hidden);

        qbdsRule.addLink(fieldNum(ProjStatusTypeRule, ProjStatus), fieldNum(ProjTable, Status));
        qbdsRule.addLink(fieldNum(ProjStatusTypeRule, ProjType), fieldNum(ProjTable, Type));
        qbdsRule.joinMode(JoinMode::ExistsJoin);
        
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeInvoiceProposalCreation</Name>
				<Source><![CDATA[
    private void distributeInvoiceProposalCreation(Map _contractToProjIds, ProjInvoiceProposalCreateLinesParams _params)
    {
        MapEnumerator contractToProjIdsEnum = _contractToProjIds.getEnumerator();
        boolean isInBatch = this.isInBatch();

        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(methodStr(ProjInvoiceProposalNormalPeriodic, distributeInvoiceProposalCreation)))
        {
            int numContract = _contractToProjIds.keySet().elements();
            activityContext.addCustomProperty('numContract', any2Str(numContract));
            activityContext.addCustomProperty('isInBatch', any2Str(isInBatch));

            if (isInBatch)
            {
                int maxBundleSize = (_contractToProjIds.keySet().elements() / projParameters.getMaxBundlesForInvoiceProposalCreation()) + 1;
                ProjInvoiceProposalPeriodicBundle bundle = ProjInvoiceProposalPeriodicBundle::construct(maxBundleSize);

                Batch batchInstance = this.parmCurrentBatch();
                BatchHeader batchHeader = BatchHeader::getCurrentBatchHeader();

                int totalCreateLinesTaskCount = 0;

                while (contractToProjIdsEnum.moveNext())
                {
                    ProjInvoiceProjId contractId = contractToProjIdsEnum.currentKey();
                    Set projIds = contractToProjIdsEnum.currentValue();

                    const boolean useBillingRules = false;

                    RunBaseBatch createLinesBatch = ProjInvoiceProposalCreateLinesTask::Construct(contractId, projIds, _params, useBillingRules);
                    totalCreateLinesTaskCount++;
                    bundle.addTask(createLinesBatch);

                    if (bundle.isFull())
                    {
                        if (batchInstance)
                        {
                            batchHeader.addRuntimeTask(bundle, batchInstance.RecId);
                        }
                        else
                        {
                            batchHeader.addTask(bundle);
                        }

                        bundle = ProjInvoiceProposalPeriodicBundle::construct(maxBundleSize);
                    }
                }

                if (!bundle.isEmpty())
                {
                    if (batchInstance)
                    {
                        batchHeader.addRuntimeTask(bundle, batchInstance.RecId);
                    }
                    else
                    {
                        batchHeader.addTask(bundle);
                    }
                }

                activityContext.addCustomProperty('totalCreateLinesTaskCount', any2Str(totalCreateLinesTaskCount));

                batchHeader.save();
            }
            else
            {
                int contractCount = 0;
                int projectCount = 0;

                while (contractToProjIdsEnum.moveNext())
                {
                    contractCount++;
                    ProjInvoiceProjId contractId = contractToProjIdsEnum.currentKey();
                    Set projIds = contractToProjIdsEnum.currentValue();
                    projectCount += projIds.elements();

                    ProjInvoiceProposalNormalPeriodic::createInvoiceProposalLines(contractId, projIds, _params);
                }

                activityContext.addCustomProperty('contractCount', any2Str(contractCount));
                activityContext.addCustomProperty('projectCount', any2Str(projectCount));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeInvoiceProposalCreationEnhanced</Name>
				<Source><![CDATA[
    private void distributeInvoiceProposalCreationEnhanced(Map _contractToProjIds,
        ProjInvoiceProposalCreateLinesParams _params, ProjTmpInvoiceableTransCount _tmpProjectInvoiceableTransCount)
    {
        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(methodStr(ProjInvoiceProposalNormalPeriodic, distributeInvoiceProposalCreationEnhanced)))
        {
            MapEnumerator contractToProjIdsEnum = _contractToProjIds.getEnumerator();
            boolean isInBatch = this.isInBatch();

            int numContract = _contractToProjIds.keySet().elements();
            activityContext.addCustomProperty('numContract', any2Str(numContract));
            activityContext.addCustomProperty('isInBatch', any2Str(isInBatch));

            if (numContract)
            {
                if (isInBatch)
                {
                    ProjTmpInvoiceableTransCount tmpContractInvoiceableTransCount;

                    int numSubTasks = projParameters.getMaxBundlesForInvoiceProposalCreation();
                    int maxBundleSize = this.updateInvoicableTransCountPerContractForBatch(_tmpProjectInvoiceableTransCount, tmpContractInvoiceableTransCount, numSubTasks);

                    ProjInvoiceProposalPeriodicBundle bundle;
                    Batch batchInstance = this.parmCurrentBatch();
                    BatchHeader batchHeader = BatchHeader::getCurrentBatchHeader();
                    const boolean useBillingRules = false;

                    int currentSubTaskId = 1;
                    int totalCreateLinesTaskCount = 0;
                    while (currentSubTaskId <= numSubTasks)
                    {
                        bundle = ProjInvoiceProposalPeriodicBundle::construct(maxBundleSize);
                        while select ContractId from tmpContractInvoiceableTransCount
                        where tmpContractInvoiceableTransCount.SubTaskGroupId == currentSubTaskId
                        {
                            totalCreateLinesTaskCount++;
                            Set projIdSet = _contractToProjIds.lookup(tmpContractInvoiceableTransCount.ContractId);

                            RunBaseBatch createLinesBatch = ProjInvoiceProposalCreateLinesTask::Construct(
                            tmpContractInvoiceableTransCount.ContractId, projIdSet, _params, useBillingRules);
                            bundle.addTask(createLinesBatch);
                        }

                        if (batchInstance)
                        {
                            batchHeader.addRuntimeTask(bundle, batchInstance.RecId);
                        }
                        else
                        {
                            batchHeader.addTask(bundle);
                        }
                        currentSubTaskId++;
                    }

                    activityContext.addCustomProperty('totalCreateLinesTaskCount', any2Str(totalCreateLinesTaskCount));
                    batchHeader.save();
                }
                else
                {
                    int contractCount = 0;
                    int projectCount = 0;
                    while (contractToProjIdsEnum.moveNext())
                    {
                        contractCount++;
                        ProjInvoiceProjId contractId = contractToProjIdsEnum.currentKey();
                        Set projIds = contractToProjIdsEnum.currentValue();
                        projectCount += projIds.elements();

                        ProjInvoiceProposalNormalPeriodic::createInvoiceProposalLines(contractId, projIds, _params);
                    }
                    activityContext.addCustomProperty('contractCount', any2Str(contractCount));
                    activityContext.addCustomProperty('projectCount', any2Str(projectCount));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(methodStr(ProjInvoiceProposalNormalPeriodic, run)))
        {
            activityContext.addCustomProperty('enableInvoiceProposalCreationgPerfEnhanced', any2Str(enableInvoiceProposalCreationgPerfEnhanced));
            activityContext.addCustomProperty('isInBatch', any2Str(this.isInBatch()));

            ProjInvoiceProposalCreateLinesParams params = this.createParameters();
            QueryBuildDataSource qbdsItem = queryRun.query().dataSourceTable(tableNum(ProjItemTrans));
            QueryBuildDataSource qbdsFee  = queryRun.query().dataSourceTable(tableNum(ProjRevenueTrans));
            QueryBuildDataSource qbdsEmpl = queryRun.query().dataSourceTable(tableNum(ProjEmplTrans));
            QueryBuildDataSource qbdsExp  = queryRun.query().dataSourceTable(tableNum(ProjCostTrans));
        
            if (projParameters.SelectProjectInvoiceProposalByFundingSource)
            {
                QueryBuildDataSource qbdsProject = queryRun.query().dataSourceTable(tableNum(ProjTable));

                if (qbdsProject)
                {
                    if (params.parmProjInvoiceProjId())
                    {
                        QueryBuildRange qbrProject = qbdsProject.addRange(fieldNum(ProjTable, ProjInvoiceProjId));
                        qbrProject.value(params.parmProjInvoiceProjId());
                    }

                    if (params.parmProjId())
                    {
                        QueryBuildRange qbrProjId = qbdsProject.addRange(fieldNum(ProjTable, ProjId));
                        qbrProjId.value(params.parmProjId());
                    }
                }
            }

            if (qbdsItem)
            {
                QuerybuildRange qbrItem = qbdsItem.findRange(fieldNum(ProjItemTrans, CategoryId));
                if (qbrItem)
                {
                    params.parmProjCategoryIdItem(qbrItem.value());
                }
            }
            if (qbdsFee)
            {
                QuerybuildRange qbrFee  = qbdsFee.findRange(fieldNum(ProjRevenueTrans, CategoryId));
                if (qbrFee)
                {
                    params.parmProjCategoryIdFee(qbrFee.value());
                }
            }
            if (qbdsEmpl)
            {
                QuerybuildRange qbrEmpl = qbdsEmpl.findRange(fieldNum(ProjEmplTrans, CategoryId));
                if (qbrEmpl)
                {
                    params.parmProjCategoryIdEmpl(qbrEmpl.value());
                }
            }
            if (qbdsExp)
            {
                QuerybuildRange qbrExp  = qbdsExp.findRange(fieldNum(ProjCostTrans, CategoryId));
                if (qbrExp)
                {
                    params.parmProjCategoryIdExp(qbrExp.value());
                }
            }

            Map contractToProjIds = new Map(Types::String, Types::Class);
            ProjTmpInvoiceableTransCount tmpProjectInvoiceableTransCount;
        
            int recordCount = 0;
            int projectCount = 0;
            int mapContractToProjectCount = 0;

            while (queryRun.next())
            {
                recordCount++;

                if (queryRun.changed(tableNum(ProjTable)))
                {
                    projectCount++;

                    ProjTable project = queryRun.get(tableNum(ProjTable));

                    if(!PSAContractLineItems::hasBillingRules(project.ProjInvoiceProjId))
                    {
                        mapContractToProjectCount++;

                        if (enableInvoiceProposalCreationgPerfEnhanced)
                        {
                            this.mapContractToProjectsEnhanced(project, contractToProjIds, params, tmpProjectInvoiceableTransCount, this.isInBatch());
                        }
                        else
                        {
                            this.mapContractToProjects(project, contractToProjIds);
                        }
                    }
                }
            }

            if (enableInvoiceProposalCreationgPerfEnhanced)
            {
                this.distributeInvoiceProposalCreationEnhanced(contractToProjIds, params, tmpProjectInvoiceableTransCount);
            }
            else
            {
                this.distributeInvoiceProposalCreation(contractToProjIds, params);
            }

            activityContext.addCustomProperty('recordCount', any2Str(recordCount));
            activityContext.addCustomProperty('projectCount', any2Str(projectCount));
            activityContext.addCustomProperty('mapContractToProjectCount', any2Str(mapContractToProjectCount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceProposalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create invoice proposal lines.
    /// </summary>
    /// <param name = "_contractId">Specifies which contract the proposal will be generated for.</param>
    /// <param name = "_projIds">The project Ids whose transactions will be used to generate the lines.</param>
    /// <param name = "_params">The other parameters from the dialog form that specify how to generate the proposals.</param>
    public static void createInvoiceProposalLines(ProjInvoiceProjId _contractId, Set _projIds, ProjInvoiceProposalCreateLinesParams _params)
    {
        ProjInvoiceProposalCreateLines createLines;
        _params.parmProjInvoiceProjId(_contractId);

        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(staticMethodStr(ProjInvoiceProposalNormalPeriodic, createInvoiceProposalLines)))
        {
            int createLinesRunCount = 0;

            activityContext.addCustomProperty('enableInvoiceProposalCreationgPerfEnhanced', any2Str(enableInvoiceProposalCreationgPerfEnhanced));

            if (enableInvoiceProposalCreationgPerfEnhanced)
            {
                container containerProjIds = ProjInvoiceProposalNormalPeriodic::setToContainer(_projIds);
                _params.parmContainerProjIds(containerProjIds);
            
                createLines = ProjInvoiceProposalCreateLines::newStandard(_params.pack());
                createLinesRunCount++;
                createLines.run();
            }
            else
            {
                createLines = ProjInvoiceProposalCreateLines::newStandard(_params.pack());
                SetEnumerator projectIds = _projIds.getEnumerator();
                while (projectIds.moveNext())
                {
                    ProjId curProjId = projectIds.current();
                    createLines.setProjId(curProjId);
                    createLinesRunCount++;
                    createLines.run();
                }
            }

            activityContext.addCustomProperty('createLinesRunCount', any2Str(createLinesRunCount));
        
            if (createLines)
            {
                ProjInvoiceProposalInsertLines insertLines = new ProjInvoiceProposalInsertLines(createLines, false);
                insertLines.parmShowMessages(true);
                insertLines.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>ProjInvoiceProposalPeriodic</c> class.
    /// </summary>
    /// <returns>
    /// Instance of <c>ProjInvoiceProposalPeriodic</c> class.
    /// </returns>
    public static ProjInvoiceProposalPeriodic construct()
    {
        return new ProjInvoiceProposalNormalPeriodic();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS360095";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ProjInvoiceProposalNormalPeriodic projInvoiceProposalNormalPeriodic = ProjInvoiceProposalNormalPeriodic::construct();

        if (projInvoiceProposalNormalPeriodic.prompt())
        {
            projInvoiceProposalNormalPeriodic.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToContainer</Name>
				<Source><![CDATA[
    private static container setToContainer(Set _inputSet)
    {
        container outputContainer;
        SetEnumerator inputSetEnum = _inputSet.getEnumerator();
        while (inputSetEnum.moveNext())
        {
            outputContainer += inputSetEnum.current();
        }
        return outputContainer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>