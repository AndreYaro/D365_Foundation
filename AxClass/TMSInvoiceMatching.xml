<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSInvoiceMatching</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>TMSInvoiceMatching</c> provides functionality supporting processing data related to invoice matching.
/// </summary>
class TMSInvoiceMatching
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFreightBillDetailsForNormalization</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves freight bill detail records, that are ready for normalization.
    /// </summary>
    /// <param name="_tmsFreightBillTypeId">
    ///   The ID of a freight bill type.
    /// </param>
    /// <param name="_forUpdate">
    ///   true if record is expected to be selected for update, false otherwise; optional;
    /// </param>
    /// <returns>
    ///   A buffer containing reference to zero or more records from <c>TMSFreightBillDetail</c> table.
    /// </returns>
    /// <remarks>
    ///   Since return value contains reference to one or more records, use <c>next</c> X++ keyword or <c>Next</c> managed proxy method to iterate through records.
    /// </remarks>
    public static TMSFreightBillDetail getFreightBillDetailsForNormalization(TMSFreightBillTypeId _tmsFreightBillTypeId, boolean _forUpdate = false)
    {
        TMSFreightBillDetail    tmsFreightBillDetail;
        TMSFBInvMatch           tmsFBInvMatch;

        tmsFreightBillDetail.selectForUpdate(_forUpdate);

        select tmsFreightBillDetail
            where tmsFreightBillDetail.FreightBillTypeId == _tmsFreightBillTypeId
                notexists join tmsFBInvMatch
                    where tmsFBInvMatch.FreightBillDetailRecId == tmsFreightBillDetail.RecId;

        return tmsFreightBillDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceLinesForNormalization</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves invoice lines ready for normalization.
    /// </summary>
    /// <param name="_tmsFreightBillTypeId">
    ///   The ID of the type of the freight bill.
    /// </param>
    /// <param name="_forUpdate">
    ///   true if record is expected to be select for update, false otherwise; optional;
    /// </param>
    /// <returns>
    ///   A buffer containing reference to zero or more records from <c>TMSInvoiceLine</c> table.
    /// </returns>
    /// <remarks>
    ///   Since return value contains reference to one or more records, use <c>next</c> X++ keyword or <c>Next</c> managed proxy method to iterate through records.
    /// </remarks>
    public static TMSInvoiceLine getInvoiceLinesForNormalization(TMSFreightBillTypeId _tmsFreightBillTypeId, boolean _forUpdate = false)
    {
        TMSInvoiceLine    tmsInvoiceLine;
        TMSFBInvMatch     tmsFBInvMatch;

        if (_tmsFreightBillTypeId)
        {
            tmsInvoiceLine.selectForUpdate(_forUpdate);

            select tmsInvoiceLine
                where tmsInvoiceLine.FreightBillTypeId == _tmsFreightBillTypeId
                    && tmsInvoiceLine.AutoMatchReady == NoYes::Yes
                        notexists join tmsFBInvMatch
                            where tmsFBInvMatch.InvoiceLineRecId == tmsInvoiceLine.RecId;
        }

        return tmsInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceLinesReadyForMatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves invoice lines ready for matching.
    /// </summary>
    /// <param name="_tmsInvoiceLineDimMapper">
    ///   An instance of <c>TMSInvoiceLineDimMapper</c> class, used to map the dimension fields of the <c>TMSInvoiceLine</c> table against the search criteria.
    /// </param>
    /// <param name="_tmsFreightBillTypeId">
    ///   The ID of the freight bill type.
    /// </param>
    /// <param name="_tmsCarrierCode">
    ///   The carrier code.
    /// </param>
    /// <param name="_forUpdate">
    ///   true if record is expected to be select for update, false otherwise; optional;
    /// </param>
    /// <returns>
    ///   A buffer containing reference to zero or more records from <c>TMSInvoiceLine</c> table.
    /// </returns>
    /// <remarks>
    ///   Since return value contains reference to one or more records, use <c>next</c> X++ keyword or <c>Next</c> managed proxy method to iterate through records.
    /// </remarks>
    public static TMSInvoiceLine getInvoiceLinesReadyForMatch(
        TMSInvoiceLineDimMapper _tmsInvoiceLineDimMapper,
        TMSFreightBillTypeId    _tmsFreightBillTypeId,
        TMSCarrierCode          _tmsCarrierCode,
        boolean                 _forUpdate = false)
    {
        Query                   q;
        QueryBuildDataSource    qbds;
        QueryRun                queryRun;

        q = new Query();
        qbds = q.addDataSource(tableNum(tmsInvoiceLine));
        qbds.addRange(fieldNum(TMSInvoiceLine, FreightBillTypeId)).value(queryValue(_tmsFreightBillTypeId));
        qbds.addRange(fieldNum(TMSInvoiceLine, CarrierCode)).value(queryValue(_tmsCarrierCode));
        qbds.addRange(fieldNum(TMSInvoiceLine, AutoMatchReady)).value(queryValue(NoYes::Yes));
        _tmsInvoiceLineDimMapper.addDimensionsRanges(qbds);
        qbds = qbds.addDataSource(tableNum(TMSFBInvMatch));
        qbds.joinMode(JoinMode::NoExistsJoin);
        qbds.relations(false);
        qbds.addLink(fieldNum(TMSInvoiceLine, RecId), fieldNum(TMSFBInvMatch, InvoiceLineRecId));

        queryRun = new QueryRun(q);
        queryRun.next();
        return queryRun.get(tableNum(TMSInvoiceLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceLinesReadyForMatchWithRemain</Name>
				<Source><![CDATA[
    public static List getInvoiceLinesReadyForMatchWithRemain(
        TMSInvoiceLineDimMapper _tmsInvoiceLineDimMapper,
        TMSFreightBillTypeId    _tmsFreightBillTypeId,
        TMSCarrierCode          _tmsCarrierCode,
        boolean                 _forUpdate = false)
    {
        Query q = new Query();
        QueryBuildDataSource    tmsInvoiceLineQBRS = q.addDataSource(tableNum(tmsInvoiceLine));
        tmsInvoiceLineQBRS.addRange(fieldNum(TMSInvoiceLine, FreightBillTypeId)).value(queryValue(_tmsFreightBillTypeId));
        tmsInvoiceLineQBRS.addRange(fieldNum(TMSInvoiceLine, CarrierCode)).value(queryValue(_tmsCarrierCode));
        tmsInvoiceLineQBRS.addRange(fieldNum(TMSInvoiceLine, AutoMatchReady)).value(queryValue(NoYes::Yes));
        tmsInvoiceLineQBRS.addRange(fieldNum(TMSInvoiceLine, InvoiceLineStatus)).value(SysQuery::valueNot(TMSInvoiceLineStatus::Approved));
        _tmsInvoiceLineDimMapper.addDimensionsRanges(tmsInvoiceLineQBRS);

        List ret = new List(Types::Record);
        TMSInvoiceLine invoiceLine;

        QueryRun queryRun = new QueryRun(q);
        while (queryRun.next())
        {
            invoiceLine = queryRun.get(tableNum(TMSInvoiceLine));
            if (invoiceLine.amountRemaining() != 0)
            {
                ret.addEnd(invoiceLine);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>