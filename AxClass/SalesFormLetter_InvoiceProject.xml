<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormLetter_InvoiceProject</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::ProjectInvoice)]
class SalesFormLetter_InvoiceProject extends SalesFormLetter_Invoice implements BatchRetryable
{
    ProjProposalJour    projProposalJour;
    ProjProposalItem    projProposalItem;
    ProjInvoiceItem     projInvoiceItem;
    LineNum             parmLineNum;
    // <GEEU>
    ProjInvoiceParmTable    projInvoiceParmTable;
    // </GEEU>

    boolean             deleteFullyInvoiced;
    container           packedLedgerVoucher;

    #define.currentVersion(4)
    #LOCALMACRO.ParmList
        projProposalJour,
        deleteFullyInvoiced
        // <GEEU>
        ,projInvoiceParmTable
        // </GEEU>
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Microsoft internal use only.
    /// </summary>
    /// <returns>
    /// A Boolean value.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>dialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    IDialogable  dialog()
    {
        FormRun  noDialog;

        return noDialog as IDialogable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        return DocumentStatus::ProjectInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journal</Name>
				<Source><![CDATA[
    Common  journal()
    {
        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(
        identifierName _className = classstr(FormletterService),
        identifierName _methodName= methodstr(FormletterService, postSalesOrderInvoiceProject),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#ParmList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvanceInvoiceSettlement_W</Name>
				<Source><![CDATA[
    public AdvanceInvoiceSettlement_SalesOrder_W parmAdvanceInvoiceSettlement_W(
        AdvanceInvoiceSettlement_SalesOrder_W _advanceInvoiceSettlement = AdvanceInvoiceSettlement_W::newUnpack(tableNum(ProjInvoiceJour), SysOperationHelper::base64Decode(salesFormLetterContract.parmAdvanceInvoiceSettlementPacked())))
    {
        if (_advanceInvoiceSettlement != null)
        {
            salesFormLetterContract.parmAdvanceInvoiceSettlementPacked(SysOperationHelper::base64Encode(_advanceInvoiceSettlement.pack()));
        }

        return AdvanceInvoiceSettlement_W::newUnpack(tableNum(ProjInvoiceJour), SysOperationHelper::base64Decode(salesFormLetterContract.parmAdvanceInvoiceSettlementPacked()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteFullyInvoiced</Name>
				<Source><![CDATA[
    public boolean parmDeleteFullyInvoiced(boolean _deleteFullyInvoiced = deleteFullyInvoiced)
    {
        deleteFullyInvoiced = _deleteFullyInvoiced;
        return deleteFullyInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceParmTable</Name>
				<Source><![CDATA[
    public Common parmProjInvoiceParmTable(Common _projInvoiceParmTable = salesFormLetterInvoiceContract.parmProjInvoiceParmTable() as ProjInvoiceParmTable)
    {
        projInvoiceParmTable = _projInvoiceParmTable as ProjInvoiceParmTable;
        return salesFormLetterInvoiceContract.parmProjInvoiceParmTable(_projInvoiceParmTable) as ProjInvoiceParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _projProposalJour = salesFormLetterInvoiceContract.parmSourceTable() as ProjProposalJour)
    {
        projProposalJour = _projProposalJour as ProjProposalJour;
        return salesFormLetterInvoiceContract.parmSourceTable(_projProposalJour) as ProjProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeJournalFromList</Name>
				<Source><![CDATA[
    void removeJournalFromList() // project creates it's own journal header
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable</Name>
				<Source><![CDATA[
    public SalesTable salesTable(SalesTable  _salesTable = salesFormLetterContract.parmSalesTable())
    {
        //
        // Override this code in SalesFormLetter_Invoice
        // It creates a invalid cast of table buffers latter in the call stack
        // Project expects ProjProposalJour as the SourceTable values
        //
        //this.parmSourceTable(_salesTable);
        return salesFormLetterContract.parmSalesTable(_salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean  unpack(container  packedClass)
    {
        Integer  version = conpeek(packedClass,1);
        container con;

        #LOCALMACRO.ParmList_v3
            projProposalJour,
            deleteFullyInvoiced
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion : [version, #ParmList, con] = packedClass;
                                    super(con);
                                    break;

            case 3 : [version, #ParmList_v3, con] = packedClass;
                                    super(con);
                                    break;

            default :
                                    return super(packedClass);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    void  update(Common         _projProposalJour   = null,
                 TransDate      _transDate          = this.transDate(),
                 SalesUpdate    _salesUpdate        = SalesUpdate::All,
                 AccountOrder   _accountOrder       = AccountOrder::None,
                 NoYes          _proforma           = this.salesParmUpdate().Proforma,
                 NoYes          _printFormLetter    = this.printFormLetter(),
                 NoYes          _usePrintManagement = false,
                 NoYes          _creditRemaining    = this.creditRemaining(),
                 container      _packedTmpFrmVirtualList = conNull(),
                 boolean        _storno             = false,
                 boolean        _stornoPhysical     = false)
    {
        this.parmSourceTable(_projProposalJour as ProjProposalJour);
        this.parmId('');

        parmLineNum = 1;
        super(_projProposalJour as ProjProposalJour, _transDate, _salesUpdate, AccountOrder::Account);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription  description()
    {
        return "@SYS2159";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>