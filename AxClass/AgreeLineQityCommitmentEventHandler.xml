<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreeLineQityCommitmentEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles events for the <c>AgreementLineQuantityCommitment</c> table.
/// </summary>
class AgreeLineQityCommitmentEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAgreeRemainsOnSrveventHandler_SLN</Name>
				<Source><![CDATA[
        [PostHandlerFor(tableStr(AgreementLineQuantityCommitment), tableMethodStr(AgreementLineQuantityCommitment, calculateAgreementRemansOnServer))]
    /// <summary>
    /// Calculates the amount remaining on an agreement.
    /// </summary>
    /// <param name="_args">
    /// A <c>XppPrePostArgs</c> object that contains a <c>AgreementLineQuantityCommitment</c> record buffer.
    /// </param>
    public static void calcAgreeRemainsOnSrveventHandler_SLN(XppPrePostArgs _args)
    {
        #AgreementsRemains

        real                            pendingInvoicedTotal;
        container                       remains;
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;
        VendInvoiceInfoLine             vendInvoiceInfoLine;
        VendInvoiceInfoTable            vendInvoiceInfoTable;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            agreementLineQuantityCommitment = _args.getThis();

             //Find Pending Direct invoiced numbers
             //by querying VendInvoiceInfoLine
            if (agreementLineQuantityCommitment.RecId)
            {
                select sum(ReceiveNow) from vendInvoiceInfoLine
                    where vendInvoiceInfoLine.AgreementLine_PSN == agreementLineQuantityCommitment.RecId
                exists join vendInvoiceInfoTable
                    where vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                       && vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                       && vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting;

                pendingInvoicedTotal += vendInvoiceInfoLine.ReceiveNow;
            }
            else 
            {
                pendingInvoicedTotal = 0;
            }

            remains = _args.getReturnValue();

            pendingInvoicedTotal = conPeek(remains, #RemainingIndex) - pendingInvoicedTotal;
            remains = conPoke(remains, #RemainingIndex, pendingInvoicedTotal);

            _args.setReturnValue(remains);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>