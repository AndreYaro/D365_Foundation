<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionFocusProcessBalanceSim_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DimensionFocusProcessBatchSim_IT</c> class controls dimension set balance processing.
/// </summary>
public class DimensionFocusProcessBalanceSim_IT extends RunBaseBatch implements SysPackable, BatchRetryable
{
    public Name dimensionFocusName;
    public Description dimensionFocusDescription;
    public DimensionFocusBalanceInitializationState dimensionFocusState;
    public DimensionFocusRecId dimensionFocusRecId;
    public boolean canRunInNewSession = true;

    // The LedgerRecId is in this base class because that simplifies serialization via pack/unpack.
    // This base class does not support it and the decision to support it is up to the derived classes.
    public LedgerRecId ledgerRecId;

    public boolean suppressErrors;

    public const int CurrentVersion = 3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns true.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>dialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current object is valid.
    /// </summary>
    /// <returns>
    /// true if the current object is valid; otherwise, false.
    /// </returns>
    protected boolean check()
    {
        boolean isValid = true;

        if (dimensionFocusState == DimensionFocusBalanceInitializationState::InProcess)
        {
            if (suppressErrors)
            {
                isValid = false;
            }
            else
            {
                isValid = checkFailed(strFmt("@SYS4004017", dimensionFocusName));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the dimension set balances.
    /// </summary>
    protected void createBalance()
    {
        if (progress != null)
        {
            progress.setText("@SYS315710");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBalanceTemp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the temporary dimension set balances.
    /// </summary>
    /// <returns>
    /// The temporary dimension set balances.
    /// </returns>
    protected DimensionFocusBalanceSimTmp_IT createBalanceTemp()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerDimensionReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates ledger dimension references.
    /// </summary>
    protected void createLedgerDimensionReference()
    {
        if (progress != null)
        {
            progress.setText("@SYS315716");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        DialogField focusName = dialog.addField(extendedtypestr(Name), "@SYS83218", "@SYS315942");
        focusName.value(dimensionFocusName);
        focusName.allowEdit(false);

        DialogField focusDescription = dialog.addField(extendedtypestr(Description), "@SYS7576", "@SYS315943");
        focusDescription.value(dimensionFocusDescription);
        focusDescription.allowEdit(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, dimensionFocusName, dimensionFocusDescription, dimensionFocusState, dimensionFocusRecId, ledgerRecId, suppressErrors];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSuppressErrors</Name>
				<Source><![CDATA[
    public boolean parmSuppressErrors(boolean _suppressErrors = suppressErrors)
    {
        suppressErrors = _suppressErrors;
        return suppressErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes after the primary dimension set processing is complete.
    /// </summary>
    /// <remarks>
    /// This method is only called if dimension set processing was performed.
    /// Whether it was performed is controlled by the <c>preProcess</c> method.
    /// This method is called inside the database transaction.
    /// </remarks>
    protected void postProcess()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes before the primary dimension set processing is started.
    /// </summary>
    /// <returns>
    /// A value that indicates whether dimension set processing should be performed.
    /// </returns>
    /// <remarks>
    /// This method is called inside the database transaction.
    /// </remarks>
    protected boolean preProcess()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAccountEntryLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes an account entry ledger dimension into a dimension set ledger dimension.
    /// </summary>
    /// <param name="_newLedgerDimensionReferences">
    ///    The collection of new dimension set ledger dimension reference records.
    /// </param>
    /// <param name="_accountEntryLedgerDimension">
    ///    The account entry ledger dimension.
    /// </param>
    protected void processAccountEntryLedgerDimension(RecordInsertList _newLedgerDimensionReferences, LedgerDimensionAccount _accountEntryLedgerDimension)
    {
        DimensionFocusLedgerDimensionRefSim_IT ledgerDimensionReference;
        DimensionHierarchyLevel dimHierarchyLevel;
        DimensionAttributeLevelValueView dimAttrLevelValueView;
        DimensionStorage dimStorage;
        RecId dimAttrValueComboRecId;

        while select DimensionAttribute, Level from dimHierarchyLevel
            order by dimHierarchyLevel.Level
                where dimHierarchyLevel.DimensionHierarchy == dimensionFocusRecId
            join firstonly dimAttrLevelValueView
                where dimAttrLevelValueView.ValueCombinationRecId == _accountEntryLedgerDimension
                    && dimAttrLevelValueView.DimensionAttribute == dimHierarchyLevel.DimensionAttribute
        {
            if (!dimStorage)
            {
                dimStorage = DimensionStorage::construct();
                dimStorage.addHierarchy(dimensionFocusRecId);
            }

            dimStorage.setSegment(
                dimHierarchyLevel.Level,
                DimensionStorageSegment::constructFromLevelValueView(dimAttrLevelValueView));
        }

        if (dimStorage)
        {
            // non-transactional because the combination can be relatively easily rebuilt
            // non-transient because there is a good chance we'll reuse the combination
            dimAttrValueComboRecId = dimStorage.save();
        }

        select firstonly RecId from ledgerDimensionReference
            where ledgerDimensionReference.AccountEntryLedgerDimension == _accountEntryLedgerDimension
                && ledgerDimensionReference.FocusDimensionHierarchy == dimensionFocusRecId
                && ledgerDimensionReference.FocusLedgerDimension == dimAttrValueComboRecId;

        if (!ledgerDimensionReference)
        {
            ledgerDimensionReference.AccountEntryLedgerDimension = _accountEntryLedgerDimension;
            ledgerDimensionReference.FocusDimensionHierarchy = dimensionFocusRecId;
            ledgerDimensionReference.FocusLedgerDimension = dimAttrValueComboRecId;
            _newLedgerDimensionReferences.add(ledgerDimensionReference);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs processing of the balances for a dimension set.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The balances for the dimension set are already being processed.
    /// </exception>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    /// The update conflict could not be recovered.
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    /// The update conflict occurred in a transaction scope.
    /// </exception>
    protected void runServer()
    {
        if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
        {
            throw error(strFmt("@GeneralLedger:GeneralLedgerBalanceEnabledBlockDimensionFocusProcessing", "@GeneralLedger:GeneralLedgerBalanceFeature"));
        }

        boolean isSuccess;
        boolean isUpdated;
        int line;
        int retryCount;

        const int RetryNum = 5;
        const int MaxRetryCount = 10;
        const int RetryWait = 500;

        if (!this.check())
        {
            return;
        }

        // Attempt to process the dimension set balances until it succeeds or the maximum
        // retry count is reached. Do nothing if it fails because the TTS will revert any changes.
        try
        {
            if (retryCount > MaxRetryCount)
            {
                throw Global::error("@SYS65063");
            }

            line = Global::infologLine();

            ttsBegin;

            // UpdateState will block when the update is already running,
            // so after this call all the blocked updates are serialized
            isUpdated = DimensionHierarchySupportProviderSim_IT::updateStateSim(
                dimensionFocusRecId,
                dimensionFocusState,
                DimensionFocusBalanceInitializationState::InProcess);

            if (!isUpdated)
            {
                // do nothing if the record was not updated
                if (suppressErrors)
                {
                    ttsAbort;
                    return;
                }
                else
                {
                    throw error(strFmt("@SYS4004017", dimensionFocusName));
                }
            }

            this.progressInit(this.caption(), 0, #AviFindFile);

            isUpdated = this.preProcess();

            if (isUpdated)
            {
                this.createLedgerDimensionReference();
                this.createBalance();

                this.postProcess();
            }

            isUpdated = DimensionHierarchySupportProviderSim_IT::updateStateSim(dimensionFocusRecId, DimensionFocusBalanceInitializationState::InProcess, DimensionFocusBalanceInitializationState::Initialized);
            Debug::assert(isUpdated);

            ttsCommit;

            isSuccess = true;
        }
        catch (Exception::Deadlock)
        {
            sleep(RetryWait);
            retryCount++;
            infolog.clear(line);
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= RetryNum)
                {
                    ttsBegin;

                    isUpdated = DimensionHierarchySupportProviderSim_IT::updateStateSim(dimensionFocusRecId, DimensionFocusBalanceInitializationState::InProcess, dimensionFocusState);
                    Debug::assert(isUpdated);

                    ttsCommit;

                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        finally
        {
            if (!isSuccess)
            {
                ttsBegin;

                isUpdated = DimensionHierarchySupportProviderSim_IT::updateStateSim(
                    dimensionFocusRecId,
                    DimensionFocusBalanceInitializationState::InProcess,
                    dimensionFocusState);

                Debug::assert(isUpdated);

                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionHierarchy</Name>
				<Source><![CDATA[
    public void setDimensionHierarchy(DimensionHierarchy _dimensionHierarchy)
    {
        dimensionFocusName = _dimensionHierarchy.Name;
        dimensionFocusDescription = _dimensionHierarchy.Description;
        dimensionFocusState = _dimensionHierarchy.FocusStateSim_IT;
        dimensionFocusRecId = _dimensionHierarchy.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean success;
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case CurrentVersion:
                [version, dimensionFocusName, dimensionFocusDescription, dimensionFocusState, dimensionFocusRecId, ledgerRecId, suppressErrors] = _packedClass;
                success = true;
                break;
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DimensionFocusProcessBalanceSim_IT construct(NoYes _isUpdate, DimensionHierarchy _dimensionHierarchy)
    {
        DimensionFocusProcessBalanceSim_IT processBalance;

        if (_isUpdate && _dimensionHierarchy.FocusStateSim_IT == DimensionFocusBalanceInitializationState::Initialized)
        {
            processBalance = DimensionFocusUpdateBalanceSim_IT::construct(_dimensionHierarchy);
        }
        else
        {
            processBalance = DimensionFocusInitializeBalanceSim_IT::construct(_dimensionHierarchy);
        }

        return processBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _e)
    {
        DimensionFocusProcessBalanceSim_IT::verifyParameters(_e);
        NoYes isUpdate = _e.parmEnum();
        DimensionHierarchy focusDimensionHierarchy = _e.record() as DimensionHierarchy;

        if (focusDimensionHierarchy)
        {
            DimensionFocusProcessBalanceSim_IT dimensionFocusProcessBalance = DimensionFocusProcessBalanceSim_IT::construct(isUpdate, focusDimensionHierarchy);

            if (dimensionFocusProcessBalance.prompt())
            {
                dimensionFocusProcessBalance.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies the <c>Args</c> instance.
    /// </summary>
    /// <param name="_args">
    ///    The <c>Args</c> instance.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The <c>Args</c> instance is null.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The dataset is not <c>DimensionHierarchy</c> table.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The enumeration type is not the <c>NoYes</c> enumeration.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The record is not an existing <c>DimensionHierarchy</c> record.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The <c>DimensionHierarchy</c> record does not have a dimension set type.
    /// </exception>
    private static void verifyParameters(Args _args)
    {
        if (_args == null)
        {
            throw error(Error::missingParameter(null));
        }

        if (_args.dataset() != tableNum(DimensionHierarchy))
        {
            throw error(Error::missingRecord(tableStr(DimensionHierarchy)));
        }

        if (_args.parmEnumType() != enumNum(NoYes))
        {
            throw error(Error::missingParameter(null));
        }

        NoYes isUpdate = _args.parmEnum();

        DimensionHierarchy focusDimensionHierarchy = _args.record() as DimensionHierarchy;

        if (focusDimensionHierarchy == null)
        {
            throw error(Error::missingRecord(tableStr(DimensionHierarchy)));
        }

        if (focusDimensionHierarchy.StructureType != DimensionHierarchyType::Focus)
        {
            throw error(Error::wrongUseOfFunction(tableStr(DimensionHierarchy)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession(boolean _canRunInNewSession = canRunInNewSession)
    {
        canRunInNewSession = _canRunInNewSession;

        return canRunInNewSession;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>