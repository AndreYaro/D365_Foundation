<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceSecretProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;
using System.Text;
using Microsoft.Dynamics.Application.Instrumentation;

/// <summary>
/// The <c>RetailTransactionServiceSecretProvider</c> class that provides secrets for Commerce Runtime consumption.
/// </summary>
public class RetailTransactionServiceSecretProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSerializedCertificateString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string for a given certificate.
    /// </summary>
    /// <param name='certificate'>
    /// The certificate object that needs to be serialized into string.
    /// </param>
    /// <returns>
    /// A serialized string certificate.
    /// </returns>
    public static str getSerializedCertificateString(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)
    {
        return System.Convert::ToBase64String(certificate.Export(X509ContentType::Pkcs12), System.Base64FormattingOptions::InsertLineBreaks);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecretValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the secret value as a string.
    /// </summary>
    /// <param name='_secretName'>
    /// The name of the secret as defined by the user.
    /// </param>
    /// <returns>
    /// A container having the secret value as a string.
    /// </returns>
    public static container getSecretValue(str _secretName)
    {
        guid correlationId = newGuid();
        ApplicationEventSource::EventWriteRetailTransactionServiceSecretProviderSecretRetrievalStarted(_secretName, correlationId);
        const str InvalidSecretName = 'InvalidSecretName';

        str errorMessage;
        str secretValue;
        str serializedCertificateString;
        boolean success = false;
        System.Exception ex;

        try
        {
            KeyVaultCertificateTable keyVaultCertificateTable = KeyVaultCertificateTable::findByName(_secretName);

            if (keyVaultCertificateTable == null)
            {
                errorMessage = InvalidSecretName;

                throw error(errorMessage);
            }
            
            ApplicationEventSource::EventWriteRetailTransactionServiceSecretProviderSecretDefinitionFound(keyVaultCertificateTable.RecId, enum2str(keyVaultCertificateTable.KeyVaultCertificateType), correlationId);

            if (keyVaultCertificateTable.KeyVaultCertificateType == KeyVaultCertificateType::Certificate)
            {
                // Please do not dispose certificate object, because it is being cached by underlying KeyVaultClient and disposing it will leave broken object in the cache
                System.Security.Cryptography.X509Certificates.X509Certificate2 certificate = KeyVaultCertificateHelper::getDigitalCertificate(keyVaultCertificateTable.RecId);
                serializedCertificateString = RetailTransactionServiceSecretProvider::getSerializedCertificateString(certificate);
            }
            else
            {
                secretValue = KeyVaultCertificateHelper::getManualSecretValue(keyVaultCertificateTable.RecId);
            }

            success = true;
            ApplicationEventSource::EventWriteRetailTransactionServiceSecretProviderSecretRetrievalSucceeded(correlationId);
        }
        catch (ex)
        {
            if (!errorMessage)
            {
                errorMessage = ex.Message;
            }
            
            ApplicationEventSource::EventWriteRetailTransactionServiceSecretProviderSecretRetrievalFailed(errorMessage, ex.GetType().FullName, ex.Message, ex.StackTrace, correlationId);
        }

        return [success, errorMessage, secretValue, serializedCertificateString];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>