<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesComplInvoicePost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for posting the sales complementary invoice.
/// </summary>
class SalesComplInvoicePost
{
    SalesComplementaryInvoiceHeader complInvoice;
    TaxCalculation tax;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates <c>NumberSeq</c> object to be used to retrieve voucher and invoice IDs.
    /// </summary>
    /// <returns>
    /// <c>NumberSeq</c> object to be used to retrieve voucher and invoice IDs.
    /// </returns>
    protected NumberSeq allocateNumAndVoucher()
    {
        RefRecId  numNumberSeqCode;
        RefRecId  voucherNumberSeqCode;
        boolean   voucherEqualsNumber;
        RefRecId  scopeId = NumberSeqScopeFactory::createDefaultScope().getId();
        NumberSeq numberSeq;

        // Credit note
        if (complInvoice.CanceledInvoice)
        {
            numNumberSeqCode = NumberSequenceReference::findNaturalKey(CustParameters::numRefCustCreditNoteId().NumberSequenceDatatype, scopeId).NumberSequenceId;

            if (CustParameters::numRefCustCreditNoteVoucher().AllowSameAs)
            {
                voucherEqualsNumber  = true;
                voucherNumberSeqCode = numNumberSeqCode;
            }
            else
            {
                voucherNumberSeqCode = NumberSequenceReference::findNaturalKey(CustParameters::numRefCustCreditNoteVoucher().NumberSequenceDatatype, scopeId).NumberSequenceId;
            }
        }
        else
        {
            // fiscal document issuing
            numNumberSeqCode = FiscalDocumentType_BR::getFiscalDocumentNumberSequence(complInvoice.FiscalDocumentType_BR).RecId;

            if (CustParameters::numRefCustInvoiceVoucher().AllowSameAs)
            {
                voucherEqualsNumber  = true;
                voucherNumberSeqCode = numNumberSeqCode;
            }
            else
            {
                NumberSequenceReference numRefCustInvoiceVoucher = CustParameters::numRefCustInvoiceVoucher();
                voucherNumberSeqCode = NumberSequenceReference::findNaturalKey(numRefCustInvoiceVoucher.NumberSequenceDatatype, scopeId).NumberSequenceId;
            }
        }

        if (voucherNumberSeqCode && numNumberSeqCode)
        {
            numberSeq = NumberSeq::newGetNumAndVoucherFromId(numNumberSeqCode,
                                                             voucherNumberSeqCode,
                                                             voucherEqualsNumber);
        }

        if (!numberSeq)
        {
            numberSeq = new NumberSeq();
        }

        return numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the complementary invoice can be posted.
    /// </summary>
    /// <returns>
    /// true if the invoice can be posted; false otherwise.
    /// </returns>
    protected boolean canPost()
    {
        SalesComplementaryInvoiceLine complementaryLine;
        boolean ok = true;

        if (complInvoice.ComplementaryType == InvoiceComplementaryType_BR::Tax)
        {
            // For tax complementary invoices there must be at least one line with non-zero
            // additinal tax amount
            select firstOnly RecId from complementaryLine
                where complementaryLine.SalesComplementaryInvoiceHeader == complInvoice.RecId
                   && (complementaryLine.AdditionalICMSAmount != 0
                       || complementaryLine.AdditionalIPIAmount != 0);

            if (!complementaryLine.RecId)
            {
                ok = checkFailed("@GLS221022");
            }
        }
        else if (complInvoice.ComplementaryType == InvoiceComplementaryType_BR::Price)
        {
            //For price complementary invoices there must be at least one line with non-zero amount
            select firstOnly RecId from complementaryLine
                where complementaryLine.SalesComplementaryInvoiceHeader == complInvoice.RecId
                   && complementaryLine.Amount != 0;

            if (!complementaryLine.RecId)
            {
                ok = checkFailed("@GLS221023");
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an invoice journal
    /// </summary>
    /// <param name="_calcTotals">
    /// An instance of the <c>SalesComplInvCalcTotals</c> class with all the complementary invoice amounts
    /// </param>
    /// <returns>
    /// An instance of the Map <c>CustVendInvoiceJour</c>
    /// </returns>
    /// <remarks>
    /// Inserts a record in <c>ProjInvoiceJour</c> table if this is a project complementary invoice
    /// </remarks>
    protected CustVendInvoiceJour createInvoiceJournal(SalesComplInvCalcTotals _calcTotals)
    {
        CustVendInvoiceJour ret;
        ProjInvoiceJour     projInvoiceJour;

        if (complInvoice.isProject())
        {
            projInvoiceJour.Qty                 = 0;
            projInvoiceJour.Weight              = 0;
            projInvoiceJour.Volume              = 0;
            projInvoiceJour.SumMarkup           = 0;
            projInvoiceJour.EndDisc             = 0;
            projInvoiceJour.SalesOrderbalance   = 0;
            projInvoiceJour.CostValue           = 0;
            projInvoiceJour.InvoiceRoundOff     = 0;
            projInvoiceJour.CashDisc            = _calcTotals.cashDiscAmount();
            projInvoiceJour.SumTax              = _calcTotals.sumTax();
            projInvoiceJour.InvoiceAmount       = _calcTotals.totalAmount();
            projInvoiceJour.DueDate             = complInvoice.dueDate;
            projInvoiceJour.calcDue();
            projInvoiceJour.CashDiscDate        = complInvoice.CashDiscDate;
            projInvoiceJour.calcCashDiscDate();
            projInvoiceJour.ProjInvoiceId       = complInvoice.FiscalDocumentNumber;
            projInvoiceJour.smaSpecIndexCalc    = ProjFormletterParameters::find().smaSpecIndexCalc;

            projInvoiceJour.insert();

            ret = projInvoiceJour;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>SalesComplInvoicePost</c> to post a given sales complementary invoice.
    /// </summary>
    /// <param name="_salesComplementaryInvoiceHeader">
    /// <c>SalesComplementaryInvoiceHeader</c> record to be posted.
    /// </param>
    public void new(SalesComplementaryInvoiceHeader _salesComplementaryInvoiceHeader)
    {
        complInvoice = _salesComplementaryInvoiceHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the sales complementary invoice.
    /// </summary>
    public void post()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00052, funcName());

        InvoiceId                           invoiceId;
        Voucher                             voucher;
        LedgerVoucher                       ledgerVoucher;
        TransferPolicy                      transferPolicy;
        CustTrans                           custTrans;
        SalesComplementaryInvoiceHeader     invoiceToCancel;

        ttsBegin;

        if (!this.canPost())
        {
            throw error("@SYS21533");
        }
        // Prepare the taxes
        SalesComplInvCalcTotals calcTotals = new SalesComplInvCalcTotals(complInvoice);
        calcTotals.calc();
        tax = calcTotals.tax();

        // Number sequences
        NumberSeq numberSeq = this.allocateNumAndVoucher();
        [invoiceId, voucher] = numberSeq.numAndVoucher();

        if (!voucher)
        {
            throw error("@SYS71652");
        }

        RecId complInvRecId = complInvoice.RecId;
        select forUpdate complInvoice where
            complInvoice.RecId == complInvRecId;

        complInvoice.selectForUpdate(true);

        complInvoice.FiscalDocumentNumber = invoiceId;
        complInvoice.LedgerVoucher = voucher;

        complInvoice.TotalAmount = calcTotals.totalAmount();

        complInvoice.Status = ComplementaryInvoiceStatus::Posted;
        complInvoice.update();

        PaymTerm paymTerm = PaymTerm::find(complInvoice.PaymTerm);

        // Ledger voucher handling
        if (paymTerm.PostOffsettingAR == NoYes::Yes)
        {
            ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                         SysModule::Cust,
                                                         numberSeq.parmVoucherSequenceCode());
            transferPolicy = TransferPolicy::TransferIndividual;
        }
        else
        {
            ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                         SysModule::Cust,
                                                         numberSeq.parmVoucherSequenceCode());
            transferPolicy = TransferPolicy::Summarize;
        }

        LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(complInvoice.LedgerVoucher,
                                                                                  complInvoice.DocumentDate,
                                                                                  SysModule::Cust,
                                                                                  LedgerTransType::Cust);
        ledgerVoucherObject.parmDocumentDate(complInvoice.DocumentDate);

        ledgerVoucher.addVoucher(ledgerVoucherObject);

        if (complInvoice.PaymSched && !CustPaymSched::exist(complInvoice.TableId, complInvoice.RecId))
        {
            complInvoice.createPaymentSched();
        }

        // Taxes
        ComplementaryInvoiceCalcTax calcTax = new SalesComplInvoiceCalcTax(complInvoice);
        calcTax.post(LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher));

        // Process the source document
        SourceDocumentProcessor::submitSourceDocumentImplementation(complInvoice, false, SourceDocumentAccountingStatus::Completed);
        SourceDocument sourceDocument = SourceDocument::newFromSourceDocumentImplementation(complInvoice);
        if (sourceDocument.parmSourceDocumentHeader().AccountingStatus != SourceDocumentAccountingStatus::Completed)
        {
            throw error("@SYS25904");
        }

        // Cust voucher posting
        LedgerTransTxt ledgerTransTxt = complInvoice.CanceledInvoice ? LedgerTransTxt::CustCreditNoteCust : LedgerTransTxt::CustInvoiceCust;
        CustVoucher custVoucher = CustVoucher::newCustVoucherSalesComplInvoice(
                ledgerTransTxt,
                complInvoice,
                calcTotals);

        CustVendInvoiceJour invoiceJour = this.createinvoicejournal(calcTotals);

        if (complInvoice.TotalAmount)
        {
            if (invoiceJour)
            {
                custVoucher.setInvoiceJournal(invoiceJour);
            }
            custVoucher.parmTypeOfCreditmaxCheck(CustParameters::find().CreditMaxCheck);
            custVoucher.parmTransRefType(CustTransRefType::Invoice);
            custVoucher.parmTransRefId(complInvoice.FiscalDocumentNumber);
            custVoucher.parmExchRate(complInvoice.exchRate());
            custVoucher.parmExchRateSecondary(complInvoice.exchRateSecondary());
            AccountingEvent accountingEvent = AccountingEvent::getLastEvent(complInvoice.SourceDocumentHeader);
            custVoucher.parmAccountingEventReference(accountingEvent.RecId);
            custVoucher.post(ledgerVoucher, custTrans, NoYes::No, UnknownNoYes::No, false, true);
        }

        ledgerVoucher.end();

        if (complInvoice.CanceledInvoice)
        {
            select forUpdate invoiceToCancel
                where invoiceToCancel.RecId == complInvoice.CanceledInvoice;

            invoiceToCancel.Status = ComplementaryInvoiceStatus::Canceled;
            invoiceToCancel.update();

            FiscalDocument_BR fiscalDocumentToCancel = FiscalDocument_BR::findByRef(invoiceToCancel.TableId,
                                                                                    invoiceToCancel.RecId);
            FiscalDocumentPost_BR::cancelFiscalDocument(fiscalDocumentToCancel,
                                                        complInvoice.LedgerVoucher,
                                                        complInvoice.DocumentDate,
                                                        '',
                                                        ReasonTableRef::find(complInvoice.ReasonTableRef_BR).ReasonComment);
        }
        else
        {
            FiscalDocumentParmDataCreator_BR fiscalDocParmCreator = new FiscalDocParmDataCreatorSalesComplInv(complInvoice, custTrans);
            FiscalDocumentPost_BR fiscalDocumentPost = new FiscalDocumentPost_BR(fiscalDocParmCreator.createParmData());
            fiscalDocumentPost.run();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        SalesComplementaryInvoiceHeader complementaryInvoiceHeader = _args.record() as SalesComplementaryInvoiceHeader;
        SalesComplInvoicePost salesComplInvPost = new SalesComplInvoicePost(complementaryInvoiceHeader);
        salesComplInvPost.post();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>