<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_OnHand</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimCtrl_Frm_OnHand extends InventDimCtrl_Frm
{
    FormControl         ctrlGridItemId;
    InventMovement      movement;
    UnitOfMeasureSymbol unitIdInvent;
    UnitOfMeasureSymbol unitIdSecondary;

    FormControl     ctrlGridCWItemId;
    // <GEERU>
    InventProfileType_RU inventProfileType;
    // </GEERU>

    NoYes   groupByNameAlias;
    ItemId callerItemId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formSetControlsRightClick</Name>
				<Source><![CDATA[
    public void formSetControlsRightClick(
        boolean _lockForm,
        boolean _resizeGrid = false,
        Args    _args = null)
    {
        super(_lockForm, _resizeGrid, _args);
        callingElement.formObject().rightClickModifyQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canApplyDimensionRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a range can be applied on a dimension.
    /// </summary>
    /// <param name = "_dimFieldId">The dimension.</param>
    /// <returns>true if the range can be applied; otherwise, false.</returns>
    protected boolean canApplyDimensionRange(FieldId _dimFieldId)
    {
        FieldId dimParmFieldId = this.dim2dimParm(_dimFieldId);

        if (dimParmLockedRightClick.(dimParmFieldId))
        {
            return true;
        }
        
        InventDim inventDimMovement = this.inventDim();

        if (inventDimMovement.(_dimFieldId))
        {
            switch (callingElement.name())
            {
                case formStr(InventOnhandMovement):
                    return dimParmVisibleGrid.(dimParmFieldId);

                case formStr(InventSupply):
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryBasedOnDatasourceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the query based on the datasource name.
    /// </summary>
    /// <param name = "_inventSum_DS_Query">A <c>query</c> for the <c>InventSum</c> table</param>
    /// <param name = "_inventSum_DS_Name"> The name of the inventSum datasource.</param>
    /// <param name = "_inventDim_DS">The <c>InventDim</c> datasource.</param>
    #ISOCountryRegionCodes
    public void modifyQueryBasedOnDatasourceName(
        Query          _inventSum_DS_Query,
        str            _inventSum_DS_Name,
        FormDataSource _inventDim_DS)
    {
        #Query
        QueryBuildRange         criteriaInventDim;
        ListEnumerator          enumerator;
        InventDimParm           inventDimParmRange;
        QueryBuildRange         qbr;
        Counter                 orderByFieldIdx;
        str                     orderByDataSourceName;
        FieldId                 orderByFieldId;
        boolean                 anyOrderByFieldToRemove;

        if (!callingElement || !callingElement.args())
        {
            return;
        }

        Query query  = _inventSum_DS_Query;

        QueryBuildDataSource qbsSum = query.dataSourceName(_inventSum_DS_Name);
        InventDim inventDimMovement = this.inventDim();

        if (callingElement.args().dataset() == tableNum(ProdJournalProd))
        {
            ProdJournalProd prodJournalProd = callingElement.args().record() as ProdJournalProd;
            qbr = SysQuery::findOrCreateRange(qbsSum, fieldNum(InventSum, ItemId));
            qbr.value(queryValue(ProdTable::find(prodJournalProd.ProdId).ItemId));
        }

        boolean doHint = InventSum::queryAddHintFromCaller(qbsSum,callingElement.args());

        query.clearGroupBy();
        qbsSum.addGroupByField(fieldNum(InventSum,ItemId));

        QueryBuildRange criteriaClosed = SysQuery::findOrCreateRange(qbsSum, fieldNum(InventSum,Closed));
        criteriaClosed.status(RangeStatus::Hidden);
        if (dimParmVisibleGrid.ClosedFlag)
        {
            criteriaClosed.value('');
        }
        else
        {
            criteriaClosed.value(queryValue(NoYes::No));
        }

        QueryBuildRange criteriaClosedQty = SysQuery::findOrCreateRange(qbsSum, fieldNum(InventSum,ClosedQty));
        criteriaClosedQty.status(RangeStatus::Hidden);
        if (dimParmVisibleGrid.ClosedQtyFlag)
        {
            criteriaClosedQty.value(queryValue(NoYes::No));
        }
        else
        {
            criteriaClosedQty.value('');
        }

        QueryBuildDataSource qbsDim = query.dataSourceName(_inventDim_DS.name());

        doHint = InventDim::queryAddHintFromCaller(qbsDim,callingElement.args()) && doHint;

        InventDimParm inventDimParmGroupBy = InventDimParm::orParmsAll(dimParmLockedRightClick, dimParmVisibleGrid);
        if (this.movement() && callingElement.name() == formStr(InventOnhandMovement) && inventDimMovement)
        {
            inventDimParmGroupBy.queryAddGroupByFieldValue(qbsDim, inventDimMovement);
        }
        else
        {
            inventDimParmGroupBy.queryAddGroupByField(qbsDim);
        }

        if (this.movement())
        {
            enumerator = this.dimFields().getEnumerator();
            while (enumerator.moveNext())
            {
                FieldId dimFieldId = enumerator.current();

                if (this.canApplyDimensionRange(dimFieldId))
                {
                    criteriaInventDim = qbsDim.findRange(dimFieldId);
                    if (!criteriaInventDim)
                    {
                        criteriaInventDim = qbsDim.addRange(dimFieldId);
                    }
                    criteriaInventDim.value(queryValue(inventDimMovement.(dimFieldId)));

                    inventDimParmRange.(this.dim2dimParm(dimFieldId)) = NoYes::Yes;
                }
                else
                {
                    criteriaInventDim = qbsDim.findRange(dimFieldId);
                    if (criteriaInventDim)
                    {
                        criteriaInventDim.value('');
                    }
                }
            }
        }

        if (groupByNameAlias)
        {
            QueryBuildDataSource inventTableDataSource = query.dataSourceTable(tableNum(InventTable));

            if (inventTableDataSource)
            {
                query.dataSourceTable(tableNum(InventTable)).addGroupByField(fieldNum(InventTable, NameAlias));
            }
        }

        // If InventDim ranges being sorted by are no longer visible, then remove the sorting
        List dimOrderByFields = new List(Types::Container);
        Counter orderByFieldCount = query.orderByFieldCount();
        for (orderByFieldIdx = 1; orderByFieldIdx <= orderByFieldCount; orderByFieldIdx++)
        {
            QueryOrderByField orderByField = query.orderByField(orderByFieldIdx);
            orderByDataSourceName = orderByField.dataSource().name();
            orderByFieldId = orderByField.fieldID();
            if (orderByField.dataSource().table() == tableNum(InventDim))
            {
                FieldId dimParmFieldId  = InventDim::dim2dimParm(orderByFieldId);
                if (inventDimParmGroupBy.(dimParmFieldId))
                {
                    dimOrderByFields.addEnd([orderByDataSourceName, orderByFieldId]);
                }
                else
                {
                    anyOrderByFieldToRemove = true;
                }
            }
            else
            {
                dimOrderByFields.addEnd([orderByDataSourceName, orderByFieldId]);
            }
        }

        if (anyOrderByFieldToRemove)
        {
            query.clearOrderBy();
            // Add remaining fields back
            enumerator = dimOrderByFields.getEnumerator();
            while (enumerator.moveNext())
            {
                [orderByDataSourceName, orderByFieldId] = enumerator.current();
                query.dataSourceName(orderByDataSourceName).addOrderByField(orderByFieldId);
            }
        }

        if (query.orderByFieldCount() == 0)
        {
            QueryBuildRange criteriaItemId = qbsSum.findRange(fieldNum(InventSum, ItemId));
            if (!criteriaItemId || criteriaItemId.value() == '')
            {
                // If no other sorting then add some default sorting
                qbsSum.addOrderByField(fieldNum(InventSum,ItemId));
            }
        }

        if (! doHint && ! inventDimParmRange.isFlagSelective() && ! dimParmVisibleGrid.ClosedFlag)
        {
            qbsSum.addSortIndex(indexNum(InventSum,ClosedItemDimIdx));
            qbsSum.indexIsHint(true);

            qbsDim.addSortIndex(indexNum(InventDim,DimIdIdx));
            qbsDim.indexIsHint(true);

            doHint = true;
        }

        if (doHint)
        {
            query.literals(#QueryForcePlaceholders);
        }
        else
        {
            query.literals(#QueryLiteralsDefault);
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            QueryBuildDataSource qbsInventProfile = _inventDim_DS.query().dataSourceTable(tablenum(InventProfile_RU));
            if (! qbsInventProfile)
            {
                qbsInventProfile = _inventDim_DS.query().dataSourceName(_inventDim_DS.name()).addDataSource(tablenum(InventProfile_RU));
                qbsInventProfile.relations(true);
                qbsInventProfile.joinMode(JoinMode::ExistsJoin);
            }

            if (inventProfileType)
            {
                qbsInventProfile.enabled(true);
                qbr = SysQuery::findOrCreateRange(qbsInventProfile, fieldnum(InventProfile_RU, InventProfileType));
                qbr.value(queryValue(inventProfileType));
                qbr.status(RangeStatus::Hidden);
            }
            else
            {
                qbsInventProfile.enabled(false);
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>InventDimParm</c> with values based on input from where it is called from.
    /// </summary>
    /// <param name="_inventDimParm">
    ///     The object that will be configured.
    /// </param>
    /// <param name="_callingElementName">
    ///     The name of the calling object/form.
    /// </param>
    /// <returns>
    ///     true if an existing setup should be replaced; otherwise, false.
    /// </returns>
    protected boolean initInventDimParmFromCaller(InventDimParm _inventDimParm, IdentifierName _callingElementName)
    {
        boolean       overrideSetup = false;

        if (this.movement())
        {
            this.setUnits('',this.movement());

            if (_callingElementName == formStr(InventOnhandMovement))
            {
                _inventDimParm.initPrimaryDimReservation(this.movement().inventDimGroupSetup(),this.movement().inventdim());
            }
            else if (_callingElementName == formStr(InventOnhandReserve)
                || (#PdsBatchAttribEnabled && callingElement.name() == formStr(PdsBatchAttribReserve)))
            {
                dimParmLockedRightClick.initConsistentDimensionsGeneral();
                this.movement().inventDimGroupSetup().inventDimParmActivePrimaryDimension(_inventDimParm);

                if (this.sysLastValueExist())
                {
                    overrideSetup = true;
                    _inventDimParm.initFromInventDimParm(InventDimParm::orParmsAll(dimParmVisibleGrid, _inventDimParm));
                }

                _inventDimParm.ItemIdFlag = false;
                _inventDimParm.ClosedQtyFlag = true;
            }
            else if (_callingElementName == formStr(InventOnhandCheckReserve))
            {
                dimParmLockedRightClick.initPhysicalDimensionsFromInventDim(this.movement().inventDimGroupSetup(),this.movement().inventdim());
                _inventDimParm.initFromInventDim(this.movement().inventdim());
                _inventDimParm.ItemIdFlag = true;
            }
            else
            {
                _inventDimParm.initFromInventDim(this.movement().inventdim());
                _inventDimParm.ItemIdFlag = false;
            }
        }

        if (this.mustInventDimParmVisibleBeInit())
        {
            switch (callingElement.args().dataset())
            {
                case tableNum(InventTrans):
                    if (!this.movement())
                    {
                        InventTrans inventTrans = callingElement.args().record() as InventTrans;
                        this.setUnits(inventTrans.inventTransOrigin().ItemId);
                        _inventDimParm.initFromInventDim(inventTrans.inventDim());
                        _inventDimParm.ItemIdFlag = false;
                        _inventDimParm.ClosedFlag = true;
                    }
                    break;

                case tableNum(WMSLocation):
                    _inventDimParm.wmsLocationIdFlag = true;
                    //always include warehouse and site to avoid looking at locations across warehouses
                    _inventDimParm.InventLocationIdFlag = true;
                    _inventDimParm.InventSiteIdFlag = true;

                    //merge the current settings in so we can override saved settings
                    _inventDimParm.initFromInventDimParm(InventDimParm::orParmsAll(dimParmVisibleGrid, _inventDimParm));
                    overrideSetup = true;
                    break;

                case tableNum(InventSum):
                    _inventDimParm.ItemIdFlag = false;
                    InventSum inventSum = callingElement.args().record() as InventSum;
                    this.setUnits(inventSum.ItemId);
                    Common common = inventSum.joinChild();
                    if (common.TableId == tableNum(InventDim))
                    {
                        _inventDimParm.initFromInventDim(common as InventDim);
                    }
                    else if (_callingElementName == webPagedefStr(EPInventOnHandInfo))
                    {
                        //when coming from web page we don't have access to joined inventDim
                        //therefore we cannot initialize dimParmVisibleGridLocal based on caller's inventDim
                        //initializing dimParmVisibleGridLocal to the same values as in the case of caller being InventTable
                        InventDimGroupSetup::newItemId(inventSum.ItemId).inventDimParmActivePrimaryDimension(_inventDimParm);
                    }
                    break;

                case tableNum(InventTable):
                    _inventDimParm.ItemIdFlag = false;
                    InventTable inventTable = callingElement.args().record() as InventTable;
                    this.setUnits(inventTable.ItemId);
                    if (_callingElementName == formStr(InventOnhandItem) ||  _callingElementName == webPagedefStr(EPInventOnHand))
                    {
                        InventDimGroupSetup::newInventTable(inventTable).inventDimParmActivePrimaryDimension(_inventDimParm);
                    }
                    break;

                case tableNum(InventDimCombination):
                    _inventDimParm.ItemIdFlag = false;
                    InventDimCombination inventDimCombination = callingElement.args().record() as InventDimCombination;
                    this.setUnits(inventDimCombination.ItemId);
                    if (_callingElementName == formStr(InventOnhandItem))
                    {
                        _inventDimParm.initFromInventDimCombination(inventDimCombination);
                    }
                    break;

                case tableNum(ReqTrans):
                    ReqTrans reqTrans = callingElement.args().record() as ReqTrans;
                    inventTable = InventTable::find(reqTrans.ItemId);
                    this.setUnits(inventTable.ItemId);
                    _inventDimParm.initCovPrDimension(InventDimGroupSetup::newInventTable(inventTable));
                    _inventDimParm.ItemIdFlag = false;
                    break;

                case tableNum(WHSInventTransAndWarehouseTransactionView):
                    WHSInventTransAndWarehouseTransactionView inventTransAndWarehouseTransaction = callingElement.args().record() as WHSInventTransAndWarehouseTransactionView;
                    this.setUnits(inventTransAndWarehouseTransaction.ItemId);
                    _inventDimParm.initFromInventDim(inventTransAndWarehouseTransaction.convertToInventDim());
                    _inventDimParm.ItemIdFlag = false;
                    _inventDimParm.ClosedFlag = true;

                    break;
            }
        }

        return overrideSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the configuration that is used to update form design.
    /// </summary>
    public void initFromCaller()
    {
        movement = null;

        InventDimParm dimParmVisibleGridLocal;
        dimParmVisibleGridLocal.ItemIdFlag = true;

        boolean overrideSetup = this.initInventDimParmFromCaller(dimParmVisibleGridLocal, callingElement.name());

        this.parmDimParmVisibleGrid(dimParmVisibleGridLocal, overrideSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query from an <c>InventDim</c> form data source.
    /// </summary>
    /// <param name="inventDim_DS">
    /// An <c>InventDim</c> form data source.
    /// </param>
    public void initQueryInventDim(FormDataSource inventDim_DS)
    {
        InventDim::formQueryAddDynalink(inventDim_DS, callingElement.args());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryInventSum</Name>
				<Source><![CDATA[
    public void initQueryInventSum(FormDataSource inventSum_DS)
    {
        QueryBuildRange         qbr;
        FieldId                 callerItemIdFieldId = fieldName2id(callingElement.args().dataset(),fieldStr(InventSum,ItemId));

        if (this.movement())
        {
            Query query = new Query();
            QueryBuildDataSource qbs = query.addDataSource(tableNum(InventSum));
            qbs.name(inventSum_DS.name());

            inventSum_DS.query(query);

            inventSum_DS.query().dataSourceTable(tableNum(InventSum)).clearLinks();
        }

        if (callerItemIdFieldId)
        {
            Common callerRecord = callingElement.args().record();

            if (callerRecord.TableId != tableNum(Common) && callerRecord.(callerItemIdFieldId) != '')
            {
                callerItemId = callerRecord.(callerItemIdFieldId);
                // In case the form is called from the list page, the ItemId range should be added as the user expects to see the details form.
                // Also, the dynalink works differently for the list pages compare to usual forms, so we can not rely on dynalink in this case.
                // In case the form is called from the usual form - the dynalink should be used as the default behavior.
                if (this.isCalledFromListPage())
                {
                    qbr = inventSum_DS.queryBuildDataSource().addRange(fieldNum(InventSum, ItemId));
                    qbr.status(RangeStatus::Hidden);
                    qbr.value(queryValue(callerRecord.(callerItemIdFieldId)));
                }
                else
                {
                    inventSum_DS.query().dataSourceTable(tableNum(InventSum)).addDynalink(
                        fieldNum(InventSum, ItemId),
                        callingElement.args().record(),
                        callerItemIdFieldId);
                }
            }
        }
        else
        {
            if (callingElement.args().dataset() == tableNum(ProdJournalProd))
            {
                ProdJournalProd prodJournalProd = callingElement.args().record() as ProdJournalProd;
                qbr = SysQuery::findOrCreateRange(inventSum_DS.query().dataSourceTable(tableNum(InventSum)), fieldNum(InventSum, ItemId));
                qbr.value(queryValue(ProdTable::find(prodJournalProd.ProdId).ItemId));
            }
        }

        InventSum::queryAddSumFields(inventSum_DS.query().dataSourceTable(tableNum(InventSum)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim()
    {
        return this.movement() ? this.movement().inventdim() : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromListPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the form has been called from the list page.
    /// </summary>
    /// <returns>
    /// true if the form has been called from the list page; otherwise, false.
    /// </returns>
    [SysObsolete('The InventOnHandItemListPage form is obsolete, please use the InventOnHandItem form.', false, 31\03\2018)]
    protected boolean isCalledFromListPage()
    {
        Common          callerRecord = callingElement.args().record();
        boolean         ret = false;

        if (FormDataUtil::isFormDataSource(callerRecord))
        {
            FormDataSource formDataSource = FormDataUtil::getFormDataSource(callerRecord);

            if (formDataSource.formRun())
            {
                ret  = (formDataSource.formRun().name() == formStr(InventOnHandItemListPage));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDimFixed</Name>
				<Source><![CDATA[
    public void modifyInventDimFixed(
        InventTrans     _inventTransParmFixed,
        InventDim       _inventDim,
        InventDimFixed  _newInventDimFixed,
        FieldId         _inventDimFieldId)
    {
        QueryBuildDataSource    qbsDim;
        QueryBuildRange         criteriaInventDim;

        Query query = new Query();

        QueryBuildDataSource qbsInventTransParmFixed = query.addDataSource(tableNum(InventTrans));
        qbsInventTransParmFixed.sortClear();
        qbsInventTransParmFixed.update(true);

        qbsInventTransParmFixed.addSortField(fieldNum(InventTrans,InventDimFixed));
        qbsInventTransParmFixed.addSortField(fieldNum(InventTrans,InventTransOrigin));

        qbsInventTransParmFixed.addRange(fieldNum(InventTrans,InventTransOrigin)).value(queryValue(_inventTransParmFixed.InventTransOrigin));

        QueryBuildRange criteriaStatusIssue = SysQuery::findOrCreateRange(qbsInventTransParmFixed, fieldNum(InventTrans,StatusIssue));
        criteriaStatusIssue.value(strFmt("@SYS26868",StatusIssue::ReservPhysical,StatusIssue::ReservOrdered));

        QueryBuildRange criteriaInventDimFixed = SysQuery::findOrCreateRange(qbsInventTransParmFixed, fieldNum(InventTrans,InventDimFixed));
        criteriaInventDimFixed.value(queryValue(_inventTransParmFixed.InventDimFixed));

        if (qbsInventTransParmFixed.childDataSourceCount())
        {
            qbsDim = qbsInventTransParmFixed.childDataSourceNo(1);
        }
        else
        {
            qbsDim = qbsInventTransParmFixed.addDataSource(tableNum(InventDim));
        }

        qbsDim.fetchMode(JoinMode::InnerJoin);
        qbsDim.relations(true);

        ListEnumerator enumerator = this.dimFields().getEnumerator();
        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();
            FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);

            if (dimParmVisibleGrid.(dimParmFieldId) && _inventDim.(dimFieldId))
            {
                criteriaInventDim = SysQuery::findOrCreateRange(qbsDim, dimFieldId);
                criteriaInventDim.value(queryValue(_inventDim.(dimFieldId)));
            }
            else
            {
                criteriaInventDim = qbsDim.findRange(dimFieldId);

                if ( _newInventDimFixed > _inventTransParmFixed.InventDimFixed && _inventDimFieldId == dimFieldId)
                {
                    if (!criteriaInventDim)
                    {
                        criteriaInventDim = qbsDim.addRange(dimFieldId);
                    }

                    criteriaInventDim.value(SysQuery::valueNotEmptyString());
                }
                else
                {
                    if (criteriaInventDim)
                    {
                        criteriaInventDim.value(SysQuery::valueUnlimited());
                    }
                }
            }
        }

        ttsbegin;

        QueryRun qr = new QueryRun(query);
        while (qr.next())
        {
            InventTrans inventTrans = qr.get(tableNum(InventTrans)) as InventTrans;

            inventTrans.InventDimFixed = _newInventDimFixed;
            inventTrans.update(true);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    public void modifyQuery(
        FormDataSource _inventSum_DS,
        FormDataSource _inventDim_DS)
    {
        this.modifyQueryBasedOnDatasourceName(_inventSum_DS.query(), _inventSum_DS.name(), _inventDim_DS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryInventDimFixed</Name>
				<Source><![CDATA[
    public void modifyQueryInventDimFixed(
        FormDataSource  _inventTransParmFixed_DS,
        InventDim       _inventDim,
        InventQty       _reserveNow)
    {
        QueryBuildDataSource    qbsDim;
        QueryBuildRange         criteriaInventDim;

        QueryBuildDataSource qbsInventTransParmFixed = _inventTransParmFixed_DS.query().dataSourceName(_inventTransParmFixed_DS.name());

        qbsInventTransParmFixed.enabled(_reserveNow != 0);

        if (_reserveNow == 0)
        {
            return;
        }

        qbsInventTransParmFixed.sortClear();

        qbsInventTransParmFixed.addSortField(fieldNum(InventTrans,InventDimFixed));
        qbsInventTransParmFixed.addSortField(fieldNum(InventTrans,InventTransOrigin));
        qbsInventTransParmFixed.orderMode(OrderMode::GroupBy);
        qbsInventTransParmFixed.addSelectionField(fieldNum(InventTrans,Qty),SelectionField::Sum);
        qbsInventTransParmFixed.addSelectionField(fieldNum(InventTrans,PdsCWQty),SelectionField::Sum);

        QueryBuildRange criteriaStatusIssue = SysQuery::findOrCreateRange(qbsInventTransParmFixed, fieldNum(InventTrans,StatusIssue));
        criteriaStatusIssue.value(strfmt("@SYS26868",StatusIssue::ReservPhysical,StatusIssue::ReservOrdered));

        if (qbsInventTransParmFixed.childDataSourceCount())
        {
            qbsDim = qbsInventTransParmFixed.childDataSourceNo(1);
        }
        else
        {
            qbsDim = qbsInventTransParmFixed.addDataSource(tableNum(InventDim));
        }

        qbsDim.fetchMode(JoinMode::InnerJoin);
        qbsDim.relations(true);

        ListEnumerator enumerator = this.dimFields().getEnumerator();
        while (enumerator.moveNext())
        {
            fieldId dimFieldId = enumerator.current();
            fieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);

            if (dimParmVisibleGrid.(dimParmFieldId))
            {
                criteriaInventDim = SysQuery::findOrCreateRange(qbsDim, dimFieldId);
                criteriaInventDim.value(queryValue(_inventDim.(dimFieldId)));
            }
            else
            {
                criteriaInventDim = qbsDim.findRange(dimFieldId);
                if (criteriaInventDim)
                {
                    criteriaInventDim.value('');
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryOnHandFactBox</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets up the <c>InventSum</c> and the <c>InventDim</c> data sources for an on-hand form part.
    /// </summary>
    /// <param name="_inventSum_ds">
    ///    The data source for the <c>InventSum</c> table.
    /// </param>
    /// <param name="_inventDim_ds">
    ///    The data source for the <c>InventDim</c> table.
    /// </param>
    /// <param name="_callerDataSource">
    ///    The data source for a record passed from the caller form.
    /// </param>
    public void modifyQueryOnHandFactBox(
        FormDataSource  _inventSum_ds,
        FormDataSource  _inventDim_ds,
        FormDataSource  _callerDataSource)
    {
        InventDim callerInventDim = Global::getJoinChildFormDataSource(
            _callerDataSource,
            tableNum(InventDim)).cursor();

        this.modifyQuery(_inventSum_ds, _inventDim_ds);

        SysQuery::queryAddDynalinksFromGroupBy(
            _inventDim_ds.query(),
            _inventDim_ds.name(),
            callerInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>movement</Name>
				<Source><![CDATA[
    public InventMovement movement()
    {
        if (!movement)
        {
            movement = this.initializeInventMovement();
        }
        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventMovementDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for returning the appropriate instance of <c>InventMovement</c> class for when extending the display of inventory on-hand
    /// information for a different input source or a different inventory dimension set.
    /// </summary>
    /// <param name = "_inventDimCtrl_Frm_OnHand">Instance of the <c>InventDimCtrl_Frm_OnHand</c> handling the display of on-hand dimension info.</param>
    /// <param name = "_movementResult">An instance of <c>EventHandlerResult</c> class that subscribers can use to return the instantiated movement object.</param>
    delegate void initializeInventMovementDelegate(InventDimCtrl_Frm_OnHand _inventDimCtrl_Frm_OnHand, EventHandlerResult _movementResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return an initialized object of type <c>InventMovement</c>.
    /// </summary>
    /// <returns>A new instance of <c>InventMovement</c> class.</returns>
    public InventMovement initializeInventMovement()
    {
        switch (callingElement.args().dataset())
        {
            case tableNum(ReqTrans):
                ReqTrans reqTrans = callingElement.args().record() as ReqTrans;
                return InventMov_Virtuel::newReqTransOnHand(reqTrans);

            case tableNum(InventQuarantineOrder):
                InventQuarantineOrder inventQuarantineOrder = callingElement.args().record() as InventQuarantineOrder;
                return InventMovement::constructNoThrow(inventQuarantineOrder,inventQuarantineOrder.getInventMovSubType(InventDirection::Issue));

            case tableNum(InventTrans):
                if (callingElement.name() == formStr(InventOnhandReserve)
                    || callingElement.name() == formStr(WHSInventOnHandReserve)
                    || (#PdsBatchAttribEnabled && callingElement.name() == formStr(PdsBatchAttribReserve)))
                {
                    InventTrans inventTrans = callingElement.args().record() as InventTrans;
                    return inventTrans.inventMovement(true);
                }
                break;
            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.initializeInventMovementDelegate(this, result);
                if (result.hasResult())
                {
                    return result.result();
                }
                return InventMovement::constructFromArgs(callingElement.args());
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventDimParmVisibleBeInit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the dimension visible grid should be controlled, based on the form caller.
    /// </summary>
    /// <returns>
    ///    true if the dimension visible grid should be controlled; otherwise, false.
    /// </returns>
    protected boolean mustInventDimParmVisibleBeInit()
    {
        // List page specific condition: callingElement.args().record() == null && callingElement.args().lookupRecord()
        // This condition means that the list page has been called from the navigation back/forward
        // history buttons. The callingElement.args().dataset() will be set to List page data source, because
        // if the form is called from the List Page navigation buttons then no actions are needed to control DimParmVisibleGrid.

        if (!callingElement)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        boolean ret = !(callingElement.args().record() == null && callingElement.args().lookupRecord());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        largeRightClickForm = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCWItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>FormControl</c> object of the catch weight item on the catch weight grid.
    /// </summary>
    /// <param name="_ctrlGridCWItemId">
    /// A catch weight item <c>FormControl</c> object.
    /// </param>
    public void parmCtrlCWItemId(FormControl _ctrlGridCWItemId)
    {
        ctrlGridCWItemId = _ctrlGridCWItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlItemId</Name>
				<Source><![CDATA[
    public void parmCtrlItemId(FormControl _ctrlGridItemId)
    {
        ctrlGridItemId = _ctrlGridItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerItemId</Name>
				<Source><![CDATA[
    public ItemId parmCallerItemId(ItemId _callerItemId = callerItemId)
    {
        callerItemId = _callerItemId;
        return callerItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimParmLockedRightClick</Name>
				<Source><![CDATA[
    public InventDimParm parmDimParmLockedRightClick(InventDimParm _dimParmLockedRightClick = dimParmLockedRightClick)
    {
        dimParmLockedRightClick = _dimParmLockedRightClick;
        return dimParmLockedRightClick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupByNameAlias</Name>
				<Source><![CDATA[
    public NoYes parmGroupByNameAlias(NoYes _groupByNameAlias = groupByNameAlias)
    {
        groupByNameAlias = _groupByNameAlias;

        return groupByNameAlias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventProfileType_RU</Name>
				<Source><![CDATA[
    public InventProfileType_RU parmInventProfileType_RU(InventProfileType_RU _inventProfileType = inventProfileType)
    {
        inventProfileType = _inventProfileType;
        return inventProfileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUnits</Name>
				<Source><![CDATA[
    protected void setUnits(
        ItemId          _itemId     = '',
        InventMovement  _movement   = null)
    {
        if (_movement)
        {
            unitIdSecondary = _movement.transUnitId();
            unitIdInvent    = _movement.inventTable().inventTableModuleInvent().UnitId;
        }
        else if (_itemId)
        {
            unitIdInvent    = InventTable::find(_itemId).inventUnitId();
            unitIdSecondary = unitIdInvent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the controls in the user interface by using the parameter values.
    /// </summary>
    /// <remarks>
    /// This method hides or shows and enables or disables controls.
    /// </remarks>
    public void updateControls()
    {
        super();

        if (ctrlGridItemId)
        {
            ctrlGridItemId.visible(dimParmVisibleGrid.ItemIdFlag);
        }

        if (#PdsCatchWeightEnabled && ctrlGridCWItemId)
        {
            ctrlGridCWItemId.visible(dimParmVisibleGrid.ItemIdFlag);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimCtrl_Frm_OnHand construct()
    {
        return new InventDimCtrl_Frm_OnHand();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of this class that will be used in forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained.
    /// </param>
    /// <returns>
    ///    An instance of this class that will be used in a form.
    /// </returns>
    public static InventDimCtrl_Frm_OnHand newFromForm(FormRun _formRun)
    {
        InventDimCtrl_Frm_OnHand    inventDimCtrl = InventDimCtrl_Frm_OnHand::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>