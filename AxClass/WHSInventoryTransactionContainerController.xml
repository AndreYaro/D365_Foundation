<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionContainerController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventoryTransactionContainerController</c> class controls the interaction of the warehouse container execution
/// with the warehouse inventory transaction stack.
/// </summary>
internal abstract class WHSInventoryTransactionContainerController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToItemSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the item described by container line to the closing container's item set.
    /// </summary>
    /// <param name = "_containerLine">Container line that holds information about item being packed/unpacked.</param>
    /// <param name = "_containerTrans">Container transaction that holds information about item being packed/unpacked.</param>
    /// <param name = "_itemSetsMap">Information about item sets within container.</param>
    [Hookable(false)]
    internal void addToItemSet(WHSContainerLine _containerLine, WHSContainerTrans _containerTrans, WHSInventoryItemSetsMap _itemSetsMap)
    {
        InventDimId inventDimIdIssue    = _containerTrans.InventDimIdFrom;
        InventDimId inventDimIdReceipt  = _containerTrans.InventDimIdTo;

        WHSLicensePlateId           itemSetsKey = this.getItemSetsKey(_containerTrans);
        WHSInventoryItemSetsPair    itemSets    = _itemSetsMap.getOrCreateItemSets(itemSetsKey);

        var handlingQty = WHSCatchWeightHelper::convertInventQuantity(_containerLine.ItemId,
                                                                         _containerLine.UnitId,
                                                                         _containerLine.Qty,
                                                                         _containerLine.InventDimId);
        itemSets.addContainerElement(
            _containerTrans,
            _containerLine.ItemId,
            inventDimIdIssue,
            inventDimIdReceipt,
            handlingQty,
            _containerLine.CapturedWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndExecuteWorkInventoryTransactions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void createAndExecuteWorkInventoryTransactions(
        guid                            _inventoryTransactionOriginId,
        WHSContainerTable               _containerTable,
        WHSInventoryItemSetsPair        _itemSets,
        WHSInventoryStorageDimensions   _storageDimFrom,
        WHSInventoryStorageDimensions   _storageDimTo)
    {
        WHSInventoryTransactionSource source = WHSInventoryTransactionSource::newFromValues(
            WHSInventoryTransactionReferenceCategoryEnum::Container,
            _containerTable.ContainerId,
            _inventoryTransactionOriginId);

        WHSInventoryItemSetId itemSetIdIssue    = _itemSets.getOrCreateIssueSet();
        WHSInventoryItemSetId itemSetIdIReceipt = _itemSets.getOrCreateReceiptSet();

        WHSInventoryTransactionActionIssueRegistrationParameters issueActionParams = WHSInventoryTransactionActionIssueRegistrationParameters::newFromValues(
            source,
            itemSetIdIssue,
            _storageDimFrom,
            WHSInventoryTransactionActionValidationParameters::noChecks()
                .activateAllCreateReservationChecks()
                .activateAllIssueRegistrationChecks());

        WHSInventoryTransactionIssueRegistrationAction::construct().execute(issueActionParams);

        WHSInventoryTransactionActionReceiptRegistrationParameters receiptActionParams = WHSInventoryTransactionActionReceiptRegistrationParameters::newFromValues(
            source,
            itemSetIdIReceipt,
            _storageDimTo,
            WHSInventoryTransactionActionValidationParameters::noChecks()
                .activateAllRemoveReservationChecks()
                .activateAllReceiptRegistrationChecks());
        
        WHSInventoryTransactionReceiptRegistrationAction::construct().execute(receiptActionParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemSetsKey</Name>
				<Source><![CDATA[
    protected abstract WHSLicensePlateId getItemSetsKey(WHSContainerTrans _containerTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkContainerInventTransWithInventoryTransaction</Name>
				<Source><![CDATA[
    protected guid linkContainerInventTransWithInventoryTransaction(WHSInventoryItemSetsPair _itemSets)
    {
        guid inventoryTransactionOriginId = WHSSequentialGuidGenerator::generateSequentialGuid();
        SetEnumerator containerTransIdEnumerator = _itemSets.containerTransIdsEnumerator();

        // Enumerate through all WhsContainerTrans sources that formed current WhsInventoryTransaction and stamp the inventoryTransactionOriginId on it.
        // For example, if we had couple of the same items, but each with different serial number,
        // they will all create their own WHSContainerTrans, but will be processed as part of only one WhsInventoryTransaction.
        while (containerTransIdEnumerator.moveNext())
        {
            WHSContainerTransId containerTransId = containerTransIdEnumerator.current();
            WHSContainerTrans containerTrans = WHSContainerTrans::find(containerTransId, true);
            containerTrans.setInventoryTransactionOriginId(inventoryTransactionOriginId);
        }

        return inventoryTransactionOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStorageDimFrom</Name>
				<Source><![CDATA[
    protected WHSInventoryStorageDimensions getStorageDimFrom(WHSContainerTable _containerTable, WHSLicensePlateId _licensePlateIdFrom)
    {
        InventDim containerInventDim = this.calculateContainerInventDim(_containerTable);
        
        WHSInventoryStorageDimensions storageDimFrom = WHSInventoryStorageDimensions::newFromValues(
            containerInventDim.InventSiteId,
            containerInventDim.inventLocationId,
            containerInventDim.wMSLocationId,
            _licensePlateIdFrom);

        return storageDimFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateContainerInventDim</Name>
				<Source><![CDATA[
    private InventDim calculateContainerInventDim(WHSContainerTable _containerTable)
    {
        // At this point, container dimensions are not fully filled.
        // To find the right dimensions, we have to query any container line from within container,
        // as it stores the 'before' closing dimensions.
        WHSContainerLine containerLine = _containerTable.getFirstContainerLine();
        
        InventDim containerLineInventDim = containerLine.calculateInventDimFrom();

        return containerLineInventDim;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>