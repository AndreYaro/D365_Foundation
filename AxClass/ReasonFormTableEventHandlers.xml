<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReasonFormTableEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReasonFormTableEventHandlers</c> class contains pre- and post- events for methods contained on the <c>ReasonFormTable</c> class.
/// </summary>
public class ReasonFormTableEventHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ReasonFormTable_Post_datasourceInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default values for the reason code usage based on how the Financial reasons form was called.
    /// </summary>
    /// <param name="_args">The event arguments.</param>
    [PostHandlerFor(classStr(ReasonFormTable), methodStr(ReasonFormTable, datasourceInitValue))]
    public static void ReasonFormTable_Post_datasourceInitValue(XppPrePostArgs _args)
    {
        ReasonFormTable thisClass = _args.getThis();
        ReasonTable reasonTable = _args.getArg('_reasonTable');

        switch (thisClass.parmReasonCodeAccountType())
        {
            case ReasonCodeAccountTypeAll::FixedAssets:
                // default the asset account type
                reasonTable.Asset = true;
                break;
            case ReasonCodeAccountTypeAll::Bank:
                // default the bank account type
                reasonTable.Bank = true;
                break;

            case ReasonCodeAccountTypeAll::Cust:
                // default the Customer account type
                reasonTable.Cust = true;
                break;

            case ReasonCodeAccountTypeAll::Vend:
                // default the Vendor Account type
                reasonTable.Vend = true;
                break;

            // <GEERU>
            case ReasonCodeAccountTypeAll::RAsset:
                reasonTable.RAsset = true;
                break;

            case ReasonCodeAccountTypeAll::RCash:
                reasonTable.rCash = true;
                break;
            // </GEERU>

            default :
                // We are on the all form so don't default anything.
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReasonFormTable_Post_initControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the initial visibility and form caption values based on how the Financial reasons form was called.
    /// </summary>
    /// <param name="_args">The event arguments.</param>
    [PostHandlerFor(classStr(ReasonFormTable), methodStr(ReasonFormTable, initControls))]
    public static void ReasonFormTable_Post_initControls(XppPrePostArgs _args)
    {
        ReasonFormTable thisClass = _args.getThis();
        ReasonCodeAccountTypeAll rcAccountTypeMenu = _args.getArg('_rcAccountTypeMenu');

        switch (rcAccountTypeMenu)
        {
            case ReasonCodeAccountTypeAll::FixedAssets:
                thisClass.setControlsVisible(false);
                if (thisClass.parmReasonGridAccountTypeAsset())
                {
                    thisClass.parmReasonGridAccountTypeAsset().visible(true);
                }

                thisClass.parmReasonFormCaption("@SYS114350");
                break;

            case ReasonCodeAccountTypeAll::Bank:
                thisClass.setControlsVisible(false);
                thisClass.parmReasonFormCaption("@SYS114351");

                if (thisClass.parmReasonGridAccountTypeBank())
                {
                    thisClass.parmReasonGridAccountTypeBank().visible(true);
                }

                FormControlId bankLGGroupId = thisClass.parmReasonFormInstance().controlId(formControlStr(Reasons, BankLG));
                if (bankLGGroupId)
                {
                    thisClass.parmReasonFormInstance().control(bankLGGroupId).visible(true);
                }

                break;

            case ReasonCodeAccountTypeAll::Cust:
                thisClass.setControlsVisible(false);

                if (thisClass.parmReasonGridAccountTypeCust())
                {
                    thisClass.parmReasonGridAccountTypeCust().visible(true);
                }

                thisClass.parmReasonFormCaption("@SYS114352");
                break;

            case ReasonCodeAccountTypeAll::Vend:
                thisClass.setControlsVisible(false);

                if (thisClass.parmReasonGridAccountTypeVend())
                {
                    thisClass.parmReasonGridAccountTypeVend().visible(true);
                }

                thisClass.parmReasonFormCaption("@SYS114354");
                break;

            // <GEERU>
            case ReasonCodeAccountTypeAll::RAsset:
                thisClass.setControlsVisible(false);

                if (thisClass.parmReasonGridAccountTypeRAsset())
                {
                    thisClass.parmReasonGridAccountTypeRAsset().visible(true);
                }

                thisClass.parmReasonFormCaption("@SYS114350");
                break;

            case ReasonCodeAccountTypeAll::RCash:
                thisClass.setControlsVisible(false);

                if (thisClass.parmReasonGridAccountTypeRCash())
                {
                    thisClass.parmReasonGridAccountTypeRCash().visible(true);
                }

                thisClass.parmReasonFormCaption("@GLS112103");
                break;
            // </GEERU>

            default :
            // Do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReasonFormTable_Post_validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the record currently active in the Financial reasons form can be deleted.
    /// </summary>
    /// <param name="_args">The event arguments.</param>
    [PostHandlerFor(classStr(ReasonFormTable), methodStr(ReasonFormTable, validateDelete))]
    public static void ReasonFormTable_Post_validateDelete(XppPrePostArgs _args)
    {
        // We only need to do this validation if the base call passed
        if (_args.getReturnValue())
        {
            ReasonTable reasonTable = _args.getArg('_reasonTable');

            ReasonFormTable thisClass = _args.getThis();
            if (thisClass.parmReasonCodeAccountType() != ReasonCodeAccountTypeAll::Bank
                && thisClass.parmReasonCodeAccountType() != ReasonCodeAccountTypeAll::AllValues
                && (reasonTable.BankLGPurposeCode || reasonTable.BankLGCancellationReason))
            {
                _args.setReturnValue(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReasonFormTable_Post_checkReasonCodeForAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a reason code is enabled for a specific account type.
    /// </summary>
    /// <param name="_args">The event arguments.</param>
    [PostHandlerFor(classStr(ReasonFormTable), staticMethodStr(ReasonFormTable, checkReasonCodeForAccountType))]
    public static void ReasonFormTable_Post_checkReasonCodeForAccountType(XppPrePostArgs _args)
    {
        boolean baseFound = _args.getReturnValue();

        // Only check if base call hasn't found a match
        if (!baseFound)
        {
            ReasonRefRecId     reasonRefRecId = _args.getArg('_reasonRefRecId');
            LedgerJournalACType ledgerJournalACType = _args.getArg('_ledgerJournalACType');
            boolean ret = false;

            ReasonCode reasonCode = ReasonTableRef::find(reasonRefRecId).Reason;
            ReasonTable reasonTable = ReasonTable::find(reasonCode);

            switch (ledgerJournalACType)
            {
                case LedgerJournalACType::FixedAssets:
                    if (reasonTable.Asset == NoYes::Yes)
                    {
                        ret = true;
                    }
                    break;

                case LedgerJournalACType::Bank:
                    if (reasonTable.Bank == NoYes::Yes)
                    {
                        ret = true;
                    }
                    break;

                case LedgerJournalACType::Cust:
                    if (reasonTable.Cust== NoYes::Yes)
                    {
                        ret = true;
                    }
                    break;

                case LedgerJournalACType::Vend:
                    if (reasonTable.Vend == NoYes::Yes)
                    {
                        ret = true;
                    }
                    break;

                // <GEERU>
                case LedgerJournalACType::RCash:
                    if (reasonTable.rCash == NoYes::Yes)
                    {
                        ret = true;
                    }
                    break;

                case LedgerJournalACType::FixedAssets_RU:
                    if (reasonTable.rAsset == NoYes::Yes)
                    {
                        ret = true;
                    }
                    break;
                // </GEERU>
            }

            _args.setReturnValue(ret);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReasonFormTable_Post_setAccountRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a range to the <c>QueryBuildDataSource</c> class based on the account type to filter by the data source.
    /// </summary>
    /// <param name="_args">The event arguments.</param>
    [PostHandlerFor(classStr(ReasonFormTable), staticMethodStr(ReasonFormTable, setAccountRange))]
    public static void ReasonFormTable_Post_setAccountRange(XppPrePostArgs _args)
    {
        LedgerJournalACType accountType = _args.getArg('_accountType');
        QueryBuildDataSource dsReasonTable = _args.getArg('_dsReasonTable');

        switch (accountType)
        {
            case LedgerJournalACType::FixedAssets:
                dsReasonTable.addRange(fieldNum(ReasonTable, Asset)).value(queryValue(NoYes::Yes));
                break;
            case LedgerJournalACType::Bank:
                dsReasonTable.addRange(fieldNum(ReasonTable, Bank)).value(queryValue(NoYes::Yes));
                break;
            case LedgerJournalACType::Cust:
                dsReasonTable.addRange(fieldNum(ReasonTable, Cust)).value(queryValue(NoYes::Yes));
                break;
            case LedgerJournalACType::Vend:
                dsReasonTable.addRange(fieldNum(ReasonTable, Vend)).value(queryValue(NoYes::Yes));
                break;

            // <GEERU>
            case LedgerJournalACType::RCash:
                dsReasonTable.addRange(fieldNum(ReasonTable, rCash)).value(queryValue(NoYes::Yes));
                break;
            case LedgerJournalACType::FixedAssets_RU:
                dsReasonTable.addRange(fieldNum(ReasonTable, rAsset)).value(queryValue(NoYes::Yes));
                break;
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReasonFormTable_Post_setMultipleAccountRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a range to the <c>QueryBuildDataSource</c> class based on the account type to filter by the data source.
    /// </summary>
    /// <param name="_args">The event arguments.</param>
    [PostHandlerFor(classStr(ReasonFormTable), staticMethodStr(ReasonFormTable, setMultipleAccountRange))]
    public static void ReasonFormTable_Post_setMultipleAccountRange(XppPrePostArgs _args)
    {
        LedgerJournalACType accountType = _args.getArg('_accountType');
        str rangeValue = _args.getArg('_value');

        switch (accountType)
        {
            case LedgerJournalACType::FixedAssets:
                rangeValue += ReasonFormTable::addRange(fieldStr(ReasonTable, Asset), rangeValue);
                break;
            case LedgerJournalACType::Bank:
                rangeValue += ReasonFormTable::addRange(fieldStr(ReasonTable, Bank), rangeValue);
                break;
            case LedgerJournalACType::Cust:
                rangeValue += ReasonFormTable::addRange(fieldStr(ReasonTable, Cust), rangeValue);
                break;
            case LedgerJournalACType::Vend:
                rangeValue += ReasonFormTable::addRange(fieldStr(ReasonTable, Vend), rangeValue);
                break;
            case LedgerJournalACType::FixedAssets_RU:
                rangeValue += ReasonFormTable::addRange(fieldStr(ReasonTable, rAsset), rangeValue);
                break;
            case LedgerJournalACType::RCash:
                rangeValue += ReasonFormTable::addRange(fieldStr(ReasonTable, rCash), rangeValue);
                break;
        }

        _args.setReturnValue(rangeValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>