<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjControlPeriodEliminateRev</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjControlPeriodEliminateRev extends ProjControlPeriod implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>action</Name>
				<Source><![CDATA[
    protected void action()
    {
        ProjControlPostingEliminateRev  reverseposting;
        ProjControlPeriodTable          projControlPeriodTable;
        int i;

        // We Should NOT call super.
        if (queryRun.changed(tablenum(ProjWIPTable)))
        {
            i++;
            projWIPTable  = queryRun.get(tablenum(ProjWIPTable));
            this.progressSet(i);

            select projControlPeriodTable
                where   projControlPeriodTable.ProjId        == projWIPTable.ProjId                &&
                         projControlPeriodTable.ControlId    == projWIPTable.ControlId             &&
                         projControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Eliminate &&
                        !projControlPeriodTable.Reverse;

            ProjTable projTable;
            if(isContractLineUsed && contractLineBasedRevRecFeature)
            {
                select firstonly Status, Type from projTable where
                projTable.ProjId == projWIPTable.DefaultProject;
            }
            else
            {
                select firstonly Status, Type from projTable where
                projTable.ProjId == projControlPeriodTable.ProjId;
            }

            if ((projWIPTable.PeriodId == this.parmProjPeriodId()) &&
                projControlPeriodTable                            &&
                this.canReverse(projControlPeriodTable)           &&
                projControlPeriodTable.PeriodFrom == this.parmProjPeriodFrom() &&
                ProjStatusTypeRule::find(projTable.Status, projTable.Type, ProjStatusRule::ReverseEliminate))
            {
                if (! this.validate())
                {
                    throw error("@SYS21628");
                }

                this.parmProjId(projWIPTable.ProjId);
                this.parmProjWIPProjId(projWIPTable.ProjId);
                this.parmIsContractLineUsed(projWIPTable.IsContractLineUsed);

                this.parmForecastModelId(projControlPeriodTable.ModelId);
                this.parmProjWIPProjId(projWIPTable.ProjId);

                // Reverse elimination
                reverseposting = ProjControlPosting::new_ControlPosting(ProjControlType::EliminateReverse,null);
                reverseposting.parmPeriodic(false);
                reverseposting.parmPeriodFrom(this.parmProjPeriodFrom());
                reverseposting.parmPeriodTo(this.parmProjPeriodTo());
                reverseposting.parmProjId(this.parmProjId());
                reverseposting.parmIsContractLineUsed(projWIPTable.IsContractLineUsed);
                reverseposting.parmProjPeriodId(this.parmProjPeriodId());
                reverseposting.parmTransDate(this.parmProjTransDate());
                reverseposting.parmShowInfoLog(false);

                reverseposting.parmProjControlId(this.parmProjControlId());
                reverseposting.parmVersion(projControlPeriodTable.Version);
                reverseposting.initQuery();
                reverseposting.setQueryValues();
                reverseposting.runOperation();

                if (this.parmShowInfoLog())
                {
                    info(strfmt("@SYS91120",projControlPeriodTable.ProjId,projControlPeriodTable.PeriodTo,projControlPeriodTable.Version));
                }

                if (this.parmMarkProjectAsInProcess())
                {
                    this.markProjectAsInProcess();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canOutput</Name>
				<Source><![CDATA[
    boolean canOutput()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReverse</Name>
				<Source><![CDATA[
    private boolean canReverse(
        ProjControlPeriodTable _projControlPeriodTable)
    {
        boolean ret = true;
        ProjControlPeriodTable  localprojControlPeriodTable;

        //  Find last posted control period - this record must be a "elimination" record
        select firstonly reverse RecId, Elimination from localprojControlPeriodTable
            order by PeriodFrom
            where   localprojControlPeriodTable.ProjId       == _projControlPeriodTable.ProjId
            &&      localprojControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Eliminate;

        if (localprojControlPeriodTable.RecId && (localprojControlPeriodTable.RecId != _projControlPeriodTable.RecId))
        {
            ret = false;
        }
        else
        {
            if (!localprojControlPeriodTable.Elimination)
            {
                ret = false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        Dialog   d = Dialog::newFormnameRunbase(formstr(ProjControlPeriod_EliminateRev),this);

        return this.dialogInternal(d);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    void initQuery()
    {
        Query                   query = new Query();
        QueryBuildDataSource    dataSourceProjWIPTable;
        QueryBuildDataSource    dataSourceProjTable;
        QueryBuildRange         rangeProjId;
        QueryBuildRange         rangeEliminated;

        dataSourceProjWIPTable  = query.addDataSource(tablenum(ProjWIPTable));
        rangeEliminated         = dataSourceProjWIPTable.addRange(fieldnum(ProjWIPTable,wipEliminated));
        rangeEliminated.value(queryValue(NoYes::Yes));
        rangeEliminated.status(RangeStatus::Hidden);
        rangeProjId    = dataSourceProjWIPTable.addRange(fieldnum(ProjWIPTable,ProjId));

        if(isContractLineUsed && contractLineBasedRevRecFeature)
        {
            dataSourceProjTable = dataSourceProjWIPTable.addDataSource(tableNum(ProjRevRecContractLine));
            dataSourceProjTable.relations(true);
            dataSourceProjTable.addRange(fieldNum(ProjRevRecContractLine, RevenueRecognitionId));
        }
        else
        {
            dataSourceProjTable = dataSourceProjWIPTable.addDataSource(tablenum(ProjTable));
            dataSourceProjTable.relations(true);
            dataSourceProjTable.addRange(fieldnum(ProjTable,ProjGroupId));
            dataSourceProjTable.addRange(fieldnum(ProjTable, WorkerResponsible));
            dataSourceProjTable.addRange(fieldnum(ProjTable, WorkerResponsibleFinancial));
        }

        if (!this.parmPeriodic())
        {
            rangeProjId.value(this.parmProjWIPProjId());
        }

        queryRun = new SysQueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markProjectAsInProcess</Name>
				<Source><![CDATA[
    void markProjectAsInProcess()
    {
        if(this.parmIsContractLineUsed())
        {
            return;
        }
        ProjTable       projTable;

        ttsbegin;

        update_recordset projTable setting Status = ProjStatus::InProcess
                where   projTable.wipProject      == this.parmProjWIPProjId();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputIncludeEliminated</Name>
				<Source><![CDATA[
    NoYes outputIncludeEliminated()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription description()
    {
        return "@SYS78408";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>