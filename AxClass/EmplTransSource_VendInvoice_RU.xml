<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplTransSource_VendInvoice_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EmplTransSource_VendInvoice_RU extends EmplTransSource_RU
{
    VendTrans                     vendPayment;
    Map                           emplTransInvoiceSettledAmounts;
    AmountCur                     totalEmplAmount;
    LedgerDimensionAccount        ledgerDimension;
    #localMacro.emplTransInvoiceValue
        [sourceAmountCur,
         sourceAmountMST,
         sourceTaxAmountCur,
         sourceTaxAmountMST,
         sourceCurrencyCode,
         ledgerDimension,
         sourceName,
         sourceNum,
         sourceRecId,
         sourceTableId,
         sourceTransDate,
         sourceDescription,
         sourceType,
         sourceTaxGroup,
         sourceTaxItemGroup]
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultAccountFromAnyDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns default ledger account from any of the distributions of  given vend invoice transaction
    /// </summary>
    /// <param name="_invoiceTrans">
    /// Vendor invoice transaction record.
    /// </param>
    /// <param name="_taxLedgerDimension">
    /// Ledger dimension account.
    /// </param>
    /// <returns>
    /// Default ledger account.
    /// </returns>
    protected LedgerDimensionDefaultAccount defaultAccountFromAnyDistribution(VendInvoiceTrans _invoiceTrans, LedgerDimensionAccount _taxLedgerDimension)
    {
        AccountingDistribution distribution;
        select firstonly LedgerDimension from distribution
            where distribution.SourceDocumentLine == _invoiceTrans.SourceDocumentLine
               && distribution.AccountingEvent    ==
                AccountingEvent::getLastEvent(
                    SourceDocumentLine::find(_invoiceTrans.SourceDocumentLine).SourceDocumentHeader).RecId;

        return LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(distribution.LedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplAmountCur</Name>
				<Source><![CDATA[
    public AmountCur emplAmountCur()
    {
        return totalEmplAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSourceData</Name>
				<Source><![CDATA[
    protected void fillSourceData()
    {
        sourceAmountCur         = vendPayment.AmountCur;
        sourceAmountMST         = vendPayment.AmountMST;
        sourceTaxAmountCur      = 0.0;
        sourceTaxAmountMST      = 0.0;
        sourceCurrencyCode      = vendPayment.CurrencyCode;
        sourceDefaultDimension  = vendPayment.DefaultDimension;
        sourceName              = enum2str(EmplTransSourceType_RU::VendInvoice);
        sourceNum               = '';
        sourceRecId             = vendPayment.RecId;
        sourceTableId           = tableNum(VendTrans);
        sourceTransDate         = vendPayment.TransDate;
        sourceDescription       = vendPayment.AccountNum;
        sourceType              = EmplTransSourceType_RU::VendInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceRecord</Name>
				<Source><![CDATA[
    protected void findSourceRecord()
    {
        select firstonly vendPayment
            where vendPayment.Voucher   == emplTrans.Voucher    &&
                  vendPayment.TransDate == emplTrans.TransDate  &&
                  vendPayment.Invoice   == "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Ledger dimension
    /// </summary>
    /// <returns>
    ///  <c>LedgerDimensionAccount</c>
    /// </returns>
    public LedgerDimensionAccount ledgerDimension()
    {
        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupCustLedgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount markupCustLedgerDimension(VendInvoiceJour _vendInvoiceJour)
    {
        MarkupTrans                   markupTrans;
        LedgerDimensionDefaultAccount custAccount;
        ;
        select firstonly MarkupCode from markupTrans
            where markupTrans.TransTableId    == _vendInvoiceJour.TableId &&
                  markupTrans.TransRecId      == _vendInvoiceJour.RecId   &&
                  markupTrans.CustVendPosted_RU                           &&
                 ! markupTrans.TaxVATType_RU;

        custAccount = MarkupTable::find(MarkupModuleType::Vend,markupTrans.MarkupCode).CustomerLedgerDimension;
        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        ;

        emplTransInvoiceSettledAmounts = new Map(Types::Int64, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareFrmVirtual</Name>
				<Source><![CDATA[
    #define.Value2(2)
    #define.Value4(4)
    protected void prepareFrmVirtual()
    {
        VendTrans                       vendInvoice;
        VendInvoiceJour                 vendInvoiceJour;
        VendInvoiceTrans                vendInvoiceTrans;
        VendSettlement                  settle, offsetSettle;
        Map                             mapMapInvoiceSettledAmountsCur,
                                        mapInvoiceSettledAmountsCur,
                                        mapMapInvoiceSettledAmountsMst,
                                        mapInvoiceSettledAmountsMst,
                                        mapTotalInvoiceSettledAmounts;
        MapEnumerator                   mapEnumeratorkey,mapEnumeratorValue;
        CustVendCalcSettledAmounts_RU   custVendCalcSettledAmounts;
        BookStructSmallVATAmounts_RU    smallSettledAmountsCur,
                                        smallSettledAmountsMst;
        TaxCode                         taxCode;
        DimensionDefault                defaultDimension;
        InventTransId                   inventTransId;
        InventTransPosting              inventTransPosting;
        TaxTrans                        taxTrans;
        TaxTransLedgerDimensionView_RU  taxTransLedgerDimension;
        Set                             vendInvoiceSet = new Set(typeName2Type(extendedTypeStr(RecId)));
        LedgerDimensionAccount          taxLedgerDimension;

        frmVirtual.TableNum = tableNum(EmplTrans_RU);
        totalEmplAmount    = 0;

        while select forceplaceholders forcenestedloop RecId from settle
             where settle.TransRecId     == vendPayment.RecId
        join firstonly RecId from offsetSettle
            where offsetSettle.OffsetRecid    == settle.TransRecId  &&
                  offsetSettle.TransRecId     == settle.OffsetRecid &&
                  offsetSettle.TransDate      == settle.TransDate
        join firstonly vendInvoice
            where vendInvoice.RecId        == settle.OffsetRecid    &&
                  vendInvoice.TransDate    == vendPayment.TransDate &&
                  vendInvoice.Voucher      == vendPayment.Voucher   &&
                  vendInvoice.Invoice      != ""
        join firstonly vendInvoiceJour
            where vendInvoiceJour.InvoiceAccount == vendInvoice.AccountNum  &&
                  vendInvoiceJour.LedgerVoucher  == vendInvoice.Voucher     &&
                  vendInvoiceJour.InvoiceDate    == vendInvoice.TransDate   &&
                  vendInvoiceJour.InvoiceId      == vendInvoice.Invoice     &&
                  vendInvoiceJour.InvoiceAmount  >= 0
        {
            if (vendInvoiceSet.in(vendInvoice.RecId))
            {
                continue;
            }
            vendInvoiceSet.add(vendInvoice.RecId);
            custVendCalcSettledAmounts  = CustVendCalcSettledAmounts_RU::construct(
                vendInvoice,
                NoYes::No,
                true,
                null,
                false,
                null,
                vendInvoiceJour.SourceDocumentHeader ? true : false);
            custVendCalcSettledAmounts.parmUseParentSourceDocumentLine(true);
            custVendCalcSettledAmounts.calcSettledAmounts();

            mapMapInvoiceSettledAmountsCur = custVendCalcSettledAmounts.mapMapSettledAmountsCur();
            mapMapInvoiceSettledAmountsMst = custVendCalcSettledAmounts.mapMapSettledAmountsMST();

            mapEnumeratorkey = mapMapInvoiceSettledAmountsCur.getEnumerator();
            mapTotalInvoiceSettledAmounts = new Map(Types::Container,Types::Container);

            while (mapEnumeratorkey.moveNext())
            {
                if (conPeek(mapEnumeratorkey.currentKey(), #Value4) == vendPayment.RecId)
                {
                    mapInvoiceSettledAmountsCur = mapEnumeratorkey.currentValue();
                    mapInvoiceSettledAmountsMst = mapMapInvoiceSettledAmountsMst.lookup(mapEnumeratorkey.currentKey());
                    mapEnumeratorValue = mapInvoiceSettledAmountsCur.getEnumerator();

                    while (mapEnumeratorValue.moveNext())
                    {
                        smallSettledAmountsCur = BookStructSmallVATAmounts_RU::create(mapEnumeratorValue.currentValue());
                        smallSettledAmountsMst = BookStructSmallVATAmounts_RU::create(mapInvoiceSettledAmountsMst.lookup(mapEnumeratorValue.currentKey()));
                        if (mapTotalInvoiceSettledAmounts.exists(mapEnumeratorValue.currentKey()))
                        {
                            smallSettledAmountsCur.addAmounts2(BookStructSmallVATAmounts_RU::create(conPeek(mapTotalInvoiceSettledAmounts.lookup(mapEnumeratorValue.currentKey()),1)));
                            smallSettledAmountsMst.addAmounts2(BookStructSmallVATAmounts_RU::create(conPeek(mapTotalInvoiceSettledAmounts.lookup(mapEnumeratorValue.currentKey()),#Value2)));
                        }
                        mapTotalInvoiceSettledAmounts.insert(mapEnumeratorValue.currentKey(), [smallSettledAmountsCur.pack(), smallSettledAmountsMst.pack()]);
                    }
                }
            }

            mapEnumeratorValue = mapTotalInvoiceSettledAmounts.getEnumerator();

            while (mapEnumeratorValue.moveNext())
            {
                [taxCode, defaultDimension, inventTransId, taxLedgerDimension] = mapEnumeratorValue.currentKey();
                smallSettledAmountsCur = BookStructSmallVATAmounts_RU::create(conPeek(mapEnumeratorValue.currentValue(),1));
                smallSettledAmountsMst = BookStructSmallVATAmounts_RU::create(conPeek(mapEnumeratorValue.currentValue(),#Value2));
                sourceAmountCur        = - smallSettledAmountsCur.amountInclVAT();
                sourceAmountMST        = - smallSettledAmountsMst.amountInclVAT();
                sourceTaxAmountCur     = - smallSettledAmountsCur.taxAmountVAT();
                sourceTaxAmountMST     = - smallSettledAmountsMst.taxAmountVAT();
                sourceCurrencyCode     = vendPayment.CurrencyCode;
                sourceDefaultDimension = defaultDimension;
                sourceName             = "@SYS12128";
                sourceNum              = vendInvoice.Invoice;
                sourceRecId            = vendInvoiceJour.RecId;
                sourceTableId          = tableNum(VendInvoiceJour);
                sourceTransDate        = vendInvoice.TransDate;
                if (inventTransId)
                {
                    select firstonly vendInvoiceTrans
                        where vendInvoiceTrans.InternalInvoiceId   == vendInvoiceJour.InternalInvoiceId     &&
                              vendInvoiceTrans.PurchID             == vendInvoiceJour.PurchId             &&
                              vendInvoiceTrans.InvoiceId           == vendInvoiceJour.InvoiceId           &&
                              vendInvoiceTrans.InvoiceDate         == vendInvoiceJour.InvoiceDate         &&
                              vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup &&
                              ((! vendInvoiceJour.SourceDocumentHeader && vendInvoiceTrans.InventTransId       == inventTransId) ||
                               (vendInvoiceTrans.SourceDocumentLine  == str2int64(inventTransId)));

                    sourceType          = EmplTransSourceType_RU::VendInvoiceTrans;
                    if (TaxTable::vatCode_RU(vendInvoiceTrans.TaxGroup,vendInvoiceTrans.TaxItemGroup) == taxCode)
                    {
                        sourceDescription  = strFmt("@SYS76525",
                                                     vendInvoiceTrans.itemName_RU(),
                                                     vendInvoiceTrans.Qty,
                                                     vendInvoiceTrans.PurchUnit);
                        sourceTaxGroup     = vendInvoiceTrans.TaxGroup;
                        sourceTaxItemGroup = vendInvoiceTrans.TaxItemGroup;
                    }
                    else
                    {
                        sourceDescription = strFmt("@SYS53184",
                                                   "@GLS111084",
                                                   vendInvoiceTrans.itemName_RU());
                        while select firstonly TaxGroup,TaxItemGroup from taxTrans
                            where taxTrans.TransDate       == vendInvoice.TransDate &&
                                  taxTrans.Voucher         == vendInvoice.Voucher   &&
                                  taxTrans.InventTransId   == inventTransId         &&
                                  taxTrans.TaxCode         == taxCode
                            join LedgerDimension from taxTransLedgerDimension
                                where taxTransLedgerDimension.TaxTrans == taxTrans.RecId &&
                                      taxTransLedgerDimension.TaxTransRelationship == TaxTransRelationshipType::Tax
                        {
                            if (LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(taxTransLedgerDimension.LedgerDimension) == defaultDimension)
                            {
                                break;
                            }
                        }

                        sourceTaxGroup     = taxTrans.TaxGroup;
                        sourceTaxItemGroup = taxTrans.TaxItemGroup;
                    }

                    ledgerDimension       = LedgerDimensionFacade::serviceCreateLedgerDimension(vendInvoiceTrans.LedgerDimension, sourceDefaultDimension);
                    if (! ledgerDimension)
                    {
                        inventTransPosting = InventTransPosting::findByNaturalKey(this.initializeInventTransPostingSearchParameters(vendInvoiceJour, vendInvoiceTrans));
                        ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(inventTransPosting.LedgerDimension ? inventTransPosting.LedgerDimension : inventTransPosting.OffsetLedgerDimension, sourceDefaultDimension);
                    }
                    if (! ledgerDimension)
                    {
                        ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(this.defaultAccountFromAnyDistribution(vendInvoiceTrans, taxLedgerDimension), sourceDefaultDimension);
                    }
                }
                else
                {
                    sourceType        = EmplTransSourceType_RU::VendInvoice;
                    sourceDescription = strFmt("@GLS104015", vendInvoiceJour.PurchId);

                    while select firstonly TaxGroup, TaxItemGroup from taxTrans
                        where taxTrans.TransDate       == vendInvoice.TransDate &&
                              taxTrans.Voucher         == vendInvoice.Voucher   &&
                              taxTrans.InventTransId   == ''                    &&
                              taxTrans.TaxCode         == taxCode
                        join LedgerDimension from taxTransLedgerDimension
                                where taxTransLedgerDimension.TaxTrans == taxTrans.RecId &&
                                      taxTransLedgerDimension.TaxTransRelationship == TaxTransRelationshipType::Tax
                    {
                        if (LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(taxTransLedgerDimension.LedgerDimension) == defaultDimension)
                        {
                            break;
                        }
                    }

                    sourceTaxGroup     = taxTrans.TaxGroup;
                    sourceTaxItemGroup = taxTrans.TaxItemGroup;
                    if (taxTrans)
                    {
                        ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(TaxTransGeneralJournalAccountEntry::getLedgerDimensionForTaxTrans(taxTrans.RecId, TaxTransRelationshipType::TransactionLineAccount)), sourceDefaultDimension);
                    }
                    else
                    {
                        ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(this.markupCustLedgerDimension(vendInvoiceJour), sourceDefaultDimension);
                    }
                }

                AmountCur amountInclVAT = smallSettledAmountsCur.amountInclVAT();

                if (amountInclVAT)
                {
                    totalEmplAmount += amountInclVAT;
                    emplTransInvoiceSettledAmounts.insert(emplTransInvoiceSettledAmounts.elements() + 1, #emplTransInvoiceValue);
                    frmVirtual.RecordNo =  emplTransInvoiceSettledAmounts.elements();
                    frmVirtual.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventTransPostingSearchParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the search parameters for finding the <c>InventTransPosting</c> table.
    /// </summary>
    /// <param name = "_vendInvoiceJour">Vendor invoice journal record.</param>
    /// <param name = "_vendInvoiceTrans">Vendor invoice transaction record.</param>
    /// <returns>The search parameters.</returns>
    protected InventTransPosting initializeInventTransPostingSearchParameters(
        VendInvoiceJour     _vendInvoiceJour,
        VendInvoiceTrans    _vendInvoiceTrans)
    {
        InventTransPosting inventTransPosting;

        inventTransPosting.TransDate = _vendInvoiceTrans.InvoiceDate;
        inventTransPosting.Voucher = _vendInvoiceJour.LedgerVoucher;
        inventTransPosting.InventTransOrigin = InventTransOrigin::findByInventTransId(_vendInvoiceTrans.InventTransId).RecId;
        inventTransPosting.InventTransPostingType = InventTransPostingType::Financial;

        return inventTransPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    public void printout()
    {
        VendInvoiceJour     vendInvoiceJour;
        RecordSortedList    journalList = new RecordSortedList(tableNum(VendInvoiceJour));
        ;
        vendInvoiceJour = VendInvoiceJour::findRecId(sourceRecId);
        journalList.ins(vendInvoiceJour);
        vendInvoiceJour.printJournal(null, journalList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>show</Name>
				<Source><![CDATA[
    public void show()
    {
        Args                args = new Args();
        FormRun             formRun;
        VendInvoiceJour     vendInvoiceJour;
        ;
        vendInvoiceJour = VendInvoiceJour::findRecId(sourceRecId);

        args.record(vendInvoiceJour);
        args.name(formStr(VendInvoiceJournal));

        formRun = classfactory.formRunClass(args);

        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>source</Name>
				<Source><![CDATA[
    public EmplTransSource_RU source(RecId _recId)
    {
        ;
        if (emplTransInvoiceSettledAmounts.exists(_recId))
        {
            #emplTransInvoiceValue = emplTransInvoiceSettledAmounts.lookup(_recId);
            totalEmplAmount        = sourceAmountCur;
        }
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceType</Name>
				<Source><![CDATA[
    public EmplTransSourceType_RU sourceType()
    {
        return sourceType ? sourceType : EmplTransSourceType_RU::VendInvoice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>