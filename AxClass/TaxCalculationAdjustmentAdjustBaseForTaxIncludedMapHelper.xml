<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCalculationAdjustmentAdjustBaseForTaxIncludedMapHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxCalculationAdjustmentAdjustBaseForTaxIncludedMapHelper</c> class is a helper class to generate tax code map to adjustment base amount when adjustment exists for price inclusive scenario.
/// </summary>
internal final class TaxCalculationAdjustmentAdjustBaseForTaxIncludedMapHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateTaxCodeMap</Name>
				<Source><![CDATA[
    internal static void generateTaxCodeMap(
        TmpTaxWorkTrans _taxWorkTrans,
        Map _pctTaxCodeMap = new Map(Types::Int64, Types::Int64),
        Map _nonePctTaxCodeMap = new Map(Types::Int64, Types::Int64))
    {
        TaxTable taxTable;
        boolean isTaxBaseNotAdjustedForUseTax = TaxCalculationAdjustment::isTaxBaseNotAdjustedForUseTax();

        //The tax adjustment allocation for each line per tax code would firstly fetch the taxWorkTrans with the condition tax base != PctPerGross,
        //and if there is no such taxWorkTrans, it will go to any other first tax code line for the adjustment allocation.
        //Here we store the sourceRecId with the dual mapping relations to taxWorkTrans recId in _pctTaxCodeMap and _nonePctTaxCodeMap.
        //After these 2 mappings generated, the allocation only need to lookup related sourceRecId instead check tax code condition again.
        while select SourceRecId, TaxCode, RecId from _taxWorkTrans
            where _taxWorkTrans.SourceBaseAmountCur != 0
                && _taxWorkTrans.TaxCode != ''
                //If tax base is not adjusted for use tax, we should exclude use tax, otherwise, any entry should be fine.
                && (!isTaxBaseNotAdjustedForUseTax
                    || (isTaxBaseNotAdjustedForUseTax && _taxWorkTrans.TaxDirection != TaxDirection::UseTax))
        {
            if (!_nonePctTaxCodeMap.exists(_taxWorkTrans.SourceRecId))
            {
                select TaxBase, TaxOnTax from taxTable
                    where taxTable.TaxCode == _taxWorkTrans.TaxCode
                        && !taxTable.TaxOnTax;

                if (taxTable)
                {
                    if (taxTable.TaxBase == TaxBaseType::PctPerGross)
                    {
                        if (!_pctTaxCodeMap.exists(_taxWorkTrans.SourceRecId))
                        {
                            _pctTaxCodeMap.insert(_taxWorkTrans.SourceRecId, _taxWorkTrans.RecId);
                        }
                    }
                    else
                    {
                        _nonePctTaxCodeMap.insert(_taxWorkTrans.SourceRecId, _taxWorkTrans.RecId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>