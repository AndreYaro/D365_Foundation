<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationUpdate_Lost</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesQuotationStatusFactoryAttribute(SalesQuotationStatus::Lost)]
class SalesQuotationUpdate_Lost extends SalesQuotationUpdate implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description from the current class by calling the static description method of the
    /// class.
    /// </summary>
    /// <returns>
    /// The description of the current class.
    /// </returns>
    /// <remarks>
    /// The static <c>description</c> method of the <c>RunBase</c> class is usually used to obtain the
    /// description of a class because a class does not have to be initialized to call it. This method
    /// speeds up displaying the description in a grid, for example.
    /// </remarks>
    public ClassDescription caption()
    {
        ClassDescription ret = super();

        if (alternativeQuotations)
        {
            return "@SYS100002";
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialogRunbase = super();

        DialogGroup dialogGroup = dialogRunbase.addGroup();
        dialogGroup.caption("@SYS9836");

        dialogReasonId  = dialogRunbase.addFieldValue(extendedTypeStr(smmQuotationReasonId), reasonId, "@SYS84635","@SYS84636");

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus  documentStatus()
    {
        return DocumentStatus::Lost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        reasonId = dialogReasonId.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaCheckExistSoftCommitment</Name>
				<Source><![CDATA[
    public boolean psaCheckExistSoftCommitment(QuotationId _quotationId)
    {
        return ResReservationFacade::checkExistSoftCommitmentForQuotation(_quotationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaReleaseSoftCommitments</Name>
				<Source><![CDATA[
    public void psaReleaseSoftCommitments(QuotationId _quotationId)
    {
        ResReservationFacade::releaseSoftCommitmentsForQuotation(_quotationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunBuild</Name>
				<Source><![CDATA[
    QueryRun queryRunBuild()
    {
        Query query = new Query();
        QueryBuildDataSource dataSource = query.addDataSource(tableNum(SalesQuotationTable));
        dataSource.update(true);

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        int recordsUpdated = 0;

        cdsLockingOptionProjectQuotations = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::ProjectQuotations);

        ttsbegin;

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(SalesQuotationTable)))
            {
                salesQuotationTable = queryRun.get(tableNum(SalesQuotationTable));

                if (salesQuotationTable.canQuotationBePosted())
                {
                    this.postQuotation(salesQuotationTable);
                    recordsUpdated++;
                }
            }
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && recordsUpdated > 0)
            {
                if (this.psaCheckExistSoftCommitment(salesQuotationTable.QuotationId))
                {
                    this.psaReleaseSoftCommitments(salesQuotationTable.QuotationId);
                }
            }
        }

        if (recordsUpdated > 0)
        {
            info(strFmt("@SYS99552",recordsUpdated,"@SYS36618"));
        }
        if (!recordsUpdated)
        {
            checkFailed("@SYS25907");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the quotation.
    /// </summary>
    /// <param name = "_salesQuotationTable">The quotation to post.</param>
    protected void postQuotation(SalesQuotationTable _salesQuotationTable)
    {
        _salesQuotationTable.ReasonId = reasonId;
        _salesQuotationTable.QuotationStatus = SalesQuotationStatus::Lost;
        _salesQuotationTable.update(true, this.isInBatch());
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription  description()
    {
        return "@SYS84626";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>