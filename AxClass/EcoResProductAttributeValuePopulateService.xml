<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductAttributeValuePopulateService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResProductAttributeValuePopulateService</c> class is responsible for creating missing <c>EcoResAttributeValue</c> records for products and attributes that are associated
/// via a product category.
/// </summary>
public class EcoResProductAttributeValuePopulateService
{
    private EcoResInstrumentationLogger instrumentationLogger;
    private boolean isEcoResProductAttributeValuePopulateHarderningFlightEnabled = EcoResProductAttributeValuePopulateHardeningFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateProductAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>EcoResAttributeValue</c> records for products and attributes associated together via a product category.
    /// </summary>
    [Hookable(false)]
    public void populateProductAttributeValues(EcoResProductAttributeValuePopulateDataContract _dataContract)
    {
        EcoResProductRecId productRecIdFilter = _dataContract.parmProductRecId();
        EcoResAttributeRecId attributeRecIdFilter = _dataContract.parmAttributeRecId();

        using (var populateValuesActivityContext = this.logger().productAttributeActivities().populateValues())
        {
            this.logger().logProductAttributeInformation(productRecIdFilter, attributeRecIdFilter);

            EcoResProductAttributeView  productAttributeView;
            var searchObject = new SysDaSearchObject(this.buildProductAttributeMissingValueQuery(productAttributeView, productRecIdFilter, attributeRecIdFilter));
            var searchStatement = new SysDaSearchStatement();

            int numberOfAttributeValuesCreated;
            while (searchStatement.findNext(searchObject))
            {
                this.populateMissingAttributeValue(productAttributeView);
                numberOfAttributeValuesCreated++;
            }

            str numberOfAttributeValuesCreatedMessage = strFmt("@SCM:Message_EcoResProductAttributeValuePopulateService_NumberOfCreatedValues", numberOfAttributeValuesCreated);
            this.logger().logInformation(numberOfAttributeValuesCreatedMessage);
            info(strFmt(numberOfAttributeValuesCreatedMessage));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMissingAttributeValue</Name>
				<Source><![CDATA[
    private void populateMissingAttributeValue(EcoResProductAttributeView  _productAttributeView)
    {
        if (!isEcoResProductAttributeValuePopulateHarderningFlightEnabled
            || (_productAttributeView
                && _productAttributeView.Product
                && _productAttributeView.Attribute))
        {
            EcoResAttribute attribute = EcoResAttribute::find(_productAttributeView.Attribute);
            EcoResAttributeType attributeType = EcoResAttributeType::find(attribute.AttributeType);

            if (attribute
            && attributeType
            && attributeType.DataType != AttributeDataType::Reference)
            {
                if (!EcoResAttributeValue::createDefaultAttributeValueFromAttributeGroup(attribute.RecId, _productAttributeView.Product))
                {
                    this.createDefaultAttributeValueFromAttribute(attributeType, attribute, EcoResProduct::find(_productAttributeView.Product));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultAttributeValueFromAttribute</Name>
				<Source><![CDATA[
    private void createDefaultAttributeValueFromAttribute(
        EcoResAttributeType _ecoResAttributeType,
        EcoResAttribute _ecoResAttribute, 
        EcoResProduct _ecoResProduct)
    {
        if (!_ecoResAttribute
            || !_ecoResProduct)
        {
            return;
        }

        EcoResValue defaultValue = EcoResValue::find(EcoResValue::createDefaultValue(_ecoResAttribute.RecId));
        EcoResAttributeValue::createValue(defaultValue, _ecoResAttribute, _ecoResProduct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProductAttributeMissingValueQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query on <c>EcoResProductAttributeView</c> view with a not exists join on <c>EcoResProductAttributeValue</c> to identify product attribute pairs
    /// with missing attribute values.
    /// </summary>
    /// <param name = "_productAttributeView">The <c>EcoResProductAttributeView</c> buffer containing query results.</param>
    /// <param name = "_productRecIdFilter">The product record ID to filter the query for a specific product</param>
    /// <param name = "_attributeRecIdFilter">The attribute record ID to filter the query for a specific attribute</param>
    /// <returns>The created SysDA query object.</returns>
    private SysDaQueryObject buildProductAttributeMissingValueQuery(
        EcoResProductAttributeView  _productAttributeView, 
        EcoResProductRecId          _productRecIdFilter, 
        EcoResAttributeRecId        _attributeRecIdFilter)
    {
        SysDaQueryObject selectQuery = new SysDaQueryObject(_productAttributeView);

        selectQuery.joinClause(SysDaJoinKind::NotExistsJoin, this.selectProductAttributeViewJoinClause(_productAttributeView));

        SysDaQueryExpression whereClauseQueryExpression;
        if (_attributeRecIdFilter)
        {
            whereClauseQueryExpression = new SysDaEqualsExpression(new SysDaFieldExpression(_productAttributeView, fieldStr(EcoResProductAttributeView, Attribute)), new SysDaValueExpression(_attributeRecIdFilter));
        }

        if (_productRecIdFilter)
        {
            EcoResProductInstanceValue productInstanceValueFilter = EcoResProductInstanceValue::findByProduct(_productRecIdFilter);
            var whereClauseQueryExpressionProduct = new SysDaEqualsExpression(new SysDaFieldExpression(_productAttributeView, fieldStr(EcoResProductAttributeView, Product)), new SysDaValueExpression(_productRecIdFilter));

            if (whereClauseQueryExpression)
            {
                whereClauseQueryExpression = new SysDaAndExpression(whereClauseQueryExpression, whereClauseQueryExpressionProduct);
            }
            else
            {
                whereClauseQueryExpression = whereClauseQueryExpressionProduct;
            }
        }

        if (whereClauseQueryExpression)
        {
            selectQuery.whereClause(whereClauseQueryExpression);
        }
        
        return selectQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectProductAttributeViewJoinClause</Name>
				<Source><![CDATA[
    private SysDaQueryObject selectProductAttributeViewJoinClause(EcoResProductAttributeView _productAttributeView)
    {
        EcoResProductAttributeValue productAttributeValue;

        SysDaQueryObject joinQuery = new SysDaQueryObject(productAttributeValue);

        joinQuery.whereClause(new SysDaAndExpression(
                                    new SysDaEqualsExpression(new SysDaFieldExpression(_productAttributeView, fieldStr(EcoResProductAttributeView, Product)),
                                                              new SysDaFieldExpression(productAttributeValue, fieldStr(EcoResProductAttributeValue, Product))),
                                    new SysDaEqualsExpression(new SysDaFieldExpression(_productAttributeView, fieldStr(EcoResProductAttributeView, Attribute)),
                                                              new SysDaFieldExpression(productAttributeValue, fieldStr(EcoResProductAttributeValue, Attribute)))));

        return joinQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductAttributeValuePopulateService construct()
    {
        return new EcoResProductAttributeValuePopulateService();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private EcoResInstrumentationLogger logger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = EcoResInstrumentationLogger::createLogger(classStr(EcoResProductAttributeValuePopulateService));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>