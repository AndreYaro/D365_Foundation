<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetYearDepreciationPlanController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AssetYearDepreciationPlanController</c> class is the controller for the <c>AssetYearDepreciationPlan</c> report.
/// </summary>
public class AssetYearDepreciationPlanController extends SrsReportRunController implements BatchRetryable
{
    private const str FeatureReference = 'EEU-00034';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMonthShortName</Name>
				<Source><![CDATA[
    private String30 getMonthShortName(int _month)
    {
        switch (_month)
        {
            case 1:
                return "@GLS222867";
            case 2:
                return "@GLS222868";
            case 3:
                return "@GLS222869";
            case 4:
                return "@GLS222870";
            case 5:
                return "@GLS222871";
            case 6:
                return "@GLS222872";
            case 7:
                return "@GLS222873";
            case 8:
                return "@GLS222874";
            case 9:
                return "@GLS222875";
            case 10:
                return "@GLS222876";
            case 11:
                return "@GLS222877";
            case 12:
                return "@GLS222878";
        }

        // Indicates a code defect. The months have to be between the range 1 to 12.
        Debug::assert(false);
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstDayOfMonth</Name>
				<Source><![CDATA[
    private Transdate getFirstDayOfMonth(Transdate _date)
    {
        const Day MiddleOfMonth = 15;

        //The perod can start from the last days of the prevoius month, or can end at the first days of the next month.
        //For this case we take the middle of month.
        Transdate ret = FiscalCalendars::findFirstDayOfMonth(CompanyInfoHelper::fiscalCalendarRecId(), _date) + MiddleOfMonth;

        return mkDate(1, mthOfYr(ret), year(ret));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeMonthLabels</Name>
				<Source><![CDATA[
    private void initializeMonthLabels(FromDate _fromDate, ToDate _toDate)
    {
        AssetYearDepreciationPlanContract assetYearDepreciationPlanContract;
        int counter;
        str monthLabel[12];
        int presentMonth;

        date presentDate = this.getFirstDayOfMonth(_fromDate);
        date endDate = this.getFirstDayOfMonth(_toDate);

        assetYearDepreciationPlanContract = this.parmReportContract().parmRdpContract() as AssetYearDepreciationPlanContract;
        counter = 1;
        do
        {
            presentMonth = mthOfYr(presentDate);
            monthLabel[counter] = this.getMonthShortName(presentMonth) + int2str(year(presentDate));
            counter++;
            presentDate = nextMth(presentDate);
        }
        while (presentDate <= endDate);

        assetYearDepreciationPlanContract.parmMonth1Label(monthLabel[1]);
        assetYearDepreciationPlanContract.parmMonth2Label(monthLabel[2]);
        assetYearDepreciationPlanContract.parmMonth3Label(monthLabel[3]);
        assetYearDepreciationPlanContract.parmMonth4Label(monthLabel[4]);
        assetYearDepreciationPlanContract.parmMonth5Label(monthLabel[5]);
        assetYearDepreciationPlanContract.parmMonth6Label(monthLabel[6]);
        assetYearDepreciationPlanContract.parmMonth7Label(monthLabel[7]);
        assetYearDepreciationPlanContract.parmMonth8Label(monthLabel[8]);
        assetYearDepreciationPlanContract.parmMonth9Label(monthLabel[9]);
        assetYearDepreciationPlanContract.parmMonth10Label(monthLabel[10]);
        assetYearDepreciationPlanContract.parmMonth11Label(monthLabel[11]);
        assetYearDepreciationPlanContract.parmMonth12Label(monthLabel[12]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        #ISOCountryRegionCodes

        AssetYearDepreciationPlanContract assetYearDepreciationPlanContract;
        boolean showReportDescriptions;

        super();

        assetYearDepreciationPlanContract = this.parmReportContract().parmRdpContract() as AssetYearDepreciationPlanContract;

        showReportDescriptions = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);
        assetYearDepreciationPlanContract.parmShowReportDescriptions(showReportDescriptions);

        if (showReportDescriptions)
        {
            assetYearDepreciationPlanContract.parmSysVersion(SysReportRun::sysVersion());
            assetYearDepreciationPlanContract.parmUserName(SysReportRun::userName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the contract before the report is run.
    /// </summary>
    /// <remarks>
    ///  The following are common scenarios for which to use this method:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Modifying the query.</description>
    ///   </item>
    ///   <item>
    ///   <description>Setting the contract values that are hidden from the user on the dialog.</description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Subscribing to the <c>renderingComplete</c> event.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    protected void preRunModifyContract()
    {
        FiscalCalendarYear fiscalCalendarYear;
        AssetYearDepreciationPlanContract assetYearDepreciationPlanContract;
        FromDate fromDate;
        ToDate toDate;
        boolean showFiscalYear;

        super();

        assetYearDepreciationPlanContract = this.parmReportContract().parmRdpContract() as AssetYearDepreciationPlanContract;
        fromDate = assetYearDepreciationPlanContract.parmFromDate();
        toDate = assetYearDepreciationPlanContract.parmToDate();
        showFiscalYear = assetYearDepreciationPlanContract.parmShowFiscalYear();

        // Parameters values set in contract.validate() are not getting persisted when the controller accesses it.
        // Set the from date and to date parameters based on the fiscal year
        if (showFiscalYear)
        {
            if (fromDate)
            {
                fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), fromDate);
            }
            else
            {
                fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), toDate);
            }
            fromDate = fiscalCalendarYear.StartDate;
            toDate = fiscalCalendarYear.EndDate;
            assetYearDepreciationPlanContract.parmFromDate(fromDate);
            assetYearDepreciationPlanContract.parmToDate(toDate);
        }

        if (AssetTableInterval_Month::findIntervalForLongFiscalYear(fromDate, toDate, showFiscalYear) != 0)
        {
            // change the to date such that the fiscal year has only 12 months
            toDate = endmth(prevMth(nextYr(fromDate)));
            assetYearDepreciationPlanContract.parmToDate(toDate);
        }
        this.initializeMonthLabels(fromDate, toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        AssetYearDepreciationPlanController controller = new AssetYearDepreciationPlanController();
        controller.parmReportName(ssrsReportStr(AssetYearDepreciationPlan, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>