<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocRecXmlMapViLineUpdater_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class used to update quantity and price in vendor invoice lines
/// from a given map of XML lines to Vendor invoice lines
/// </summary>
public class EFDocRecXmlMapViLineUpdater_BR
{
    EFDocRecXmlMapToViLineTmp_BR mappingBetweenVendorInvoiceAndXmlLines;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyXmlLineICMSSTToPresumed</Name>
				<Source><![CDATA[
    private boolean copyXmlLineICMSSTToPresumed(
        FiscalDocumentLine_BR _fiscalDocLine,
        FiscalDocumentTaxTrans_BR _taxTransICMS,
        FiscalDocumentTaxTrans_BR _taxTransICMSST,
        EFDocRecXmlMapToViLineTmp_BR _mappingBetweenVendorInvoiceAndXmlLines)
    {
        InventTransOrigin inventTransOrigin;
        InventTrans inventTrans;
        InventDim inventDim;
        boolean updated;

        select firstonly InventDimId from inventTrans
            exists join inventTransOrigin
                where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                    && inventTransOrigin.InventTransId == _fiscalDocLine.InventTransId;

        real qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
            _fiscalDocLine.ItemId,
            inventTrans.inventDimId,
            _mappingBetweenVendorInvoiceAndXmlLines.XmlQuantity,
            _mappingBetweenVendorInvoiceAndXmlLines.XmlUnit,
            _fiscalDocLine.Unit,
            NoYes::No,
            NoYes::No);
        
        FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMS = FiscalDocumentTaxTransPresumed_BR::findByTaxTrans(_taxTransICMS.RecId);
        FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumedICMSST = FiscalDocumentTaxTransPresumed_BR::findByTaxTrans(_taxTransICMSST.RecId);
        
        if (qty
            && !fiscalDocumentTaxTransPresumedICMS
            && !fiscalDocumentTaxTransPresumedICMSST)
        {
            FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumed = this.initTaxTransPresumed(_mappingBetweenVendorInvoiceAndXmlLines, qty, _fiscalDocLine.Quantity);
            
            if (_taxTransICMSST)
            {
                fiscalDocumentTaxTransPresumedICMS.PresumedTaxAmountPerInvUnit = _mappingBetweenVendorInvoiceAndXmlLines.XmlICMSTaxAmount / qty;
                fiscalDocumentTaxTransPresumedICMSST = fiscalDocumentTaxTransPresumed;
                fiscalDocumentTaxTransPresumedICMSST.FiscalDocumentTaxTrans_BR = _taxTransICMSST.RecId;
                fiscalDocumentTaxTransPresumedICMSST.insert();
            }
            else
            {
                fiscalDocumentTaxTransPresumedICMS = fiscalDocumentTaxTransPresumed;
            }
            
            fiscalDocumentTaxTransPresumedICMS.FiscalDocumentTaxTrans_BR = _taxTransICMS.RecId;
            fiscalDocumentTaxTransPresumedICMS.PresumedvICMSSubstituto = _mappingBetweenVendorInvoiceAndXmlLines.XmlICMSTaxAmount / qty * _fiscalDocLine.Quantity;
            fiscalDocumentTaxTransPresumedICMS.insert();
            updated = true;
        }
        
        return updated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyXmlLineICMSSTToUncommited</Name>
				<Source><![CDATA[
    private boolean copyXmlLineICMSSTToUncommited(
        VendInvoiceInfoLine _vendLine,
        TaxUncommitted _taxUncommittedICMS,
        TaxUncommitted _taxUncommittedICMSST,
        EFDocRecXmlMapToViLineTmp_BR _mappingBetweenVendorInvoiceAndXmlLines)
    {
        boolean updated;

        real qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
            _vendLine.ItemId,
            _vendLine.InventDimId,
            _mappingBetweenVendorInvoiceAndXmlLines.XmlQuantity,
            _mappingBetweenVendorInvoiceAndXmlLines.XmlUnit,
            _vendLine.PurchUnit,
            NoYes::No,
            NoYes::No);

        if (qty)
        {
            FDTaxTransPresumedUncommitted_BR fdTaxTransPresumedUncommittedICMS = FDTaxTransPresumedUncommitted_BR::find(_taxUncommittedICMS.RecId, _taxUncommittedICMS.SourceTableId, _taxUncommittedICMS.TaxType_BR);
            FDTaxTransPresumedUncommitted_BR fdTaxTransPresumedUncommittedICMSST = FDTaxTransPresumedUncommitted_BR::find(_taxUncommittedICMSST.RecId, _taxUncommittedICMSST.SourceTableId, _taxUncommittedICMSST.TaxType_BR);

            if (!fdTaxTransPresumedUncommittedICMSST && _taxUncommittedICMSST)
            {
                fdTaxTransPresumedUncommittedICMSST = this.initTaxTransPresumedUncommitted(
                    _taxUncommittedICMSST,
                    _mappingBetweenVendorInvoiceAndXmlLines,
                    qty,
                    _vendLine.ReceiveNow);
                    fdTaxTransPresumedUncommittedICMSST.insert();
                    updated = true;
            }
            
            if (!fdTaxTransPresumedUncommittedICMS)
            {
                fdTaxTransPresumedUncommittedICMS = this.initTaxTransPresumedUncommitted(
                    _taxUncommittedICMS,
                    _mappingBetweenVendorInvoiceAndXmlLines,
                    qty,
                    _vendLine.ReceiveNow,
                    _taxUncommittedICMSST.RecId == 0,
                    true);
                
                fdTaxTransPresumedUncommittedICMS.insert();
                updated = true;
            }
        }
        
        return updated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getICMSSTTaxationCode</Name>
				<Source><![CDATA[
    internal TaxationCode_BR getICMSSTTaxationCode(RefRecId _lineRecId)
    {
        select firstonly XmlCST from mappingBetweenVendorInvoiceAndXmlLines
            where mappingBetweenVendorInvoiceAndXmlLines.EFDocumentReceivedXmlViewLine_BR != 0
                && mappingBetweenVendorInvoiceAndXmlLines.VendInvoiceInfoLine == _lineRecId;

        return mappingBetweenVendorInvoiceAndXmlLines.XmlCST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransPresumed</Name>
				<Source><![CDATA[
    private FiscalDocumentTaxTransPresumed_BR initTaxTransPresumed(
        EFDocRecXmlMapToViLineTmp_BR _mappingBetweenVendorInvoiceAndXmlLines,
        UnitQty _xmlQty,
        UnitQty _lineQty)
    {
        FiscalDocumentTaxTransPresumed_BR fiscalDocumentTaxTransPresumed;
        
        fiscalDocumentTaxTransPresumed.PresumedTaxAmountPerInvUnit = _mappingBetweenVendorInvoiceAndXmlLines.XmlICMSSTTaxAmount / _xmlQty;
        fiscalDocumentTaxTransPresumed.PresumedTaxAmount = fiscalDocumentTaxTransPresumed.PresumedTaxAmountPerInvUnit * _lineQty;
        fiscalDocumentTaxTransPresumed.PresumedTaxBaseAmountPerInvUnit = _mappingBetweenVendorInvoiceAndXmlLines.XmlICMSSTTaxBaseAmount / _xmlQty;
        fiscalDocumentTaxTransPresumed.PresumedTaxBaseAmount = fiscalDocumentTaxTransPresumed.PresumedTaxBaseAmountPerInvUnit * _lineQty;
        fiscalDocumentTaxTransPresumed.PresumedTaxPercentage = _mappingBetweenVendorInvoiceAndXmlLines.XmlICMSSTTaxValue;
        fiscalDocumentTaxTransPresumed.PresumedFCPTaxAmountPerInvUnit = _mappingBetweenVendorInvoiceAndXmlLines.XmlFCPSTTaxAmount / _xmlQty;
        fiscalDocumentTaxTransPresumed.PresumedFCPTaxAmount = fiscalDocumentTaxTransPresumed.PresumedFCPTaxAmountPerInvUnit * _lineQty;
        fiscalDocumentTaxTransPresumed.PresumedFCPTaxBaseAmountPerInvUnit = _mappingBetweenVendorInvoiceAndXmlLines.XmlFCPSTTaxBaseAmount / _xmlQty;
        fiscalDocumentTaxTransPresumed.PresumedFCPTaxBaseAmount = fiscalDocumentTaxTransPresumed.PresumedFCPTaxBaseAmountPerInvUnit * _lineQty;
        fiscalDocumentTaxTransPresumed.PresumedFCPTaxPercentage = _mappingBetweenVendorInvoiceAndXmlLines.XmlFCPSTTaxValue;
        
        return fiscalDocumentTaxTransPresumed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransPresumedUncommitted</Name>
				<Source><![CDATA[
    private FDTaxTransPresumedUncommitted_BR initTaxTransPresumedUncommitted(
        TaxUncommitted _taxUncommitted,
        EFDocRecXmlMapToViLineTmp_BR _mappingBetweenVendorInvoiceAndXmlLines,
        UnitQty _xmlQty,
        UnitQty _lineQty,
        boolean _isICMSST = true,
        boolean _isICMS = false)
    {
        FDTaxTransPresumedUncommitted_BR fdTaxTransPresumedUncommitted;
        
        fdTaxTransPresumedUncommitted.TaxUncommitted = _taxUncommitted.RecId;
        fdTaxTransPresumedUncommitted.SourceTableId = _taxUncommitted.SourceTableId;
        fdTaxTransPresumedUncommitted.SourceRecId64 = _taxUncommitted.SourceRecId;
        
        if (_isICMSST)
        {
            fdTaxTransPresumedUncommitted.ICMSSTTaxAmount = _mappingBetweenVendorInvoiceAndXmlLines.XmlICMSSTTaxAmount / _xmlQty * _lineQty;
            fdTaxTransPresumedUncommitted.ICMSSTTaxBaseAmount = _mappingBetweenVendorInvoiceAndXmlLines.XmlICMSSTTaxBaseAmount / _xmlQty * _lineQty;
            fdTaxTransPresumedUncommitted.ICMSSTTaxValue = _mappingBetweenVendorInvoiceAndXmlLines.XmlICMSSTTaxValue;
            fdTaxTransPresumedUncommitted.FCPSTTaxAmount = _mappingBetweenVendorInvoiceAndXmlLines.XmlFCPSTTaxAmount / _xmlQty * _lineQty;
            fdTaxTransPresumedUncommitted.FCPSTTaxBaseAmount = _mappingBetweenVendorInvoiceAndXmlLines.XmlFCPSTTaxBaseAmount / _xmlQty *_lineQty;
            fdTaxTransPresumedUncommitted.FCPSTTaxValue = _mappingBetweenVendorInvoiceAndXmlLines.XmlFCPSTTaxValue;
        }
        
        if (_isICMS)
        {
            fdTaxTransPresumedUncommitted.ICMSTaxAmount = _mappingBetweenVendorInvoiceAndXmlLines.XmlICMSTaxAmount / _xmlQty * _lineQty;
        }
        
        return fdTaxTransPresumedUncommitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateICMSST</Name>
				<Source><![CDATA[
	/// <summary>
    /// Updates fiscal document presumed taxes from xml file by vendor invoice.
    /// </summary>
    /// <returns>
    /// True, if presumed taxes was updated; otherwise false.
    /// </returns>
    internal boolean updateICMSST()
    {
        VendInvoiceInfoLine vendLine;
        TaxUncommitted taxUncommittedICMS, taxUncommittedICMSST;
        boolean updated = false;
        ttsBegin;
        
        while select XmlQuantity, XmlUnit, XmlICMSSTTaxAmount, XmlICMSSTTaxBaseAmount, XmlICMSSTTaxValue,
            XmlFCPSTTaxAmount, XmlFCPSTTaxBaseAmount, XmlFCPSTTaxValue, XmlICMSTaxAmount from mappingBetweenVendorInvoiceAndXmlLines
            where mappingBetweenVendorInvoiceAndXmlLines.EFDocumentReceivedXmlViewLine_BR != 0
            join RecId, PurchUnit, ItemId, ReceiveNow, InventDimId from vendLine
                where vendLine.RecId == mappingBetweenVendorInvoiceAndXmlLines.VendInvoiceInfoLine
            join RecId, SourceRecId, SourceTableId from taxUncommittedICMS
                where taxUncommittedICMS.SourceRecId == vendLine.RecId
                    && taxUncommittedICMS.SourceTableId == tableNum(VendInvoiceInfoLine)
                    && taxUncommittedICMS.TaxType_BR == TaxType_BR::ICMS
                    && taxUncommittedICMS.TaxationCode_BR == FiscalBooksConstants_BR::TaxationCode60
            outer join RecId, SourceRecId, SourceTableId from taxUncommittedICMSST
                where taxUncommittedICMSST.SourceRecId == vendLine.RecId
                    && taxUncommittedICMSST.SourceTableId == tableNum(VendInvoiceInfoLine)
                    && taxUncommittedICMSST.TaxType_BR == TaxType_BR::ICMSST
                    && taxUncommittedICMSST.TaxationCode_BR == FiscalBooksConstants_BR::TaxationCode60
        {
            boolean ret = this.copyXmlLineICMSSTToUncommited(vendLine, taxUncommittedICMS, taxUncommittedICMSST, mappingBetweenVendorInvoiceAndXmlLines);
            
            if (ret)
            {
                updated = ret;
            }
        }
        
        ttsCommit;
        
        return updated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateICMSSTFiscalDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates fiscal document presumed taxes from xml file by by fiscal document.
    /// </summary>
    /// <returns>
    /// True, if presumed taxes was updated; otherwise false.
    /// </returns>
    internal boolean updateICMSSTFiscalDoc()
    {
        FiscalDocumentLine_BR fiscalDocLine;
        FiscalDocumentTaxTrans_BR taxTransICMS, taxTransICMSST;
        boolean updated = false;
        
        ttsBegin;
        
        while select XmlQuantity, XmlUnit, XmlICMSSTTaxAmount, XmlICMSSTTaxBaseAmount, XmlICMSSTTaxValue,
            XmlFCPSTTaxAmount, XmlFCPSTTaxBaseAmount, XmlFCPSTTaxValue, XmlICMSTaxAmount from mappingBetweenVendorInvoiceAndXmlLines
            where mappingBetweenVendorInvoiceAndXmlLines.EFDocumentReceivedXmlViewLine_BR != 0
            join Unit, ItemId, Quantity, InventTransId from fiscalDocLine
                where fiscalDocLine.RecId == mappingBetweenVendorInvoiceAndXmlLines.VendInvoiceInfoLine
            join RecId from taxTransICMS
                where taxTransICMS.FiscalDocumentLine == fiscalDocLine.RecId
                    && taxTransICMS.Type == TaxType_BR::ICMS
                    && taxTransICMS.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
            outer join RecId from taxTransICMSST
                where taxTransICMSST.FiscalDocumentLine == fiscalDocLine.RecId
                    && taxTransICMSST.Type == TaxType_BR::ICMSST
                    && taxTransICMSST.TaxationCode == FiscalBooksConstants_BR::TaxationCode60
        {
            boolean ret = this.copyXmlLineICMSSTToPresumed(fiscalDocLine, taxTransICMS, taxTransICMSST, mappingBetweenVendorInvoiceAndXmlLines);
            
            if (ret)
            {
                updated = ret;
            }
        }
        
        ttsCommit;
        
        return updated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyXmlLineValuesToVendorInvoiceLine</Name>
				<Source><![CDATA[
    private void copyXmlLineValuesToVendorInvoiceLine(VendInvoiceInfoLine _vendLine, EFDocRecXmlMapToViLineTmp_BR _mappingBetweenVendorInvoiceAndXmlLines)
    {
        _vendLine.ReceiveNow = _mappingBetweenVendorInvoiceAndXmlLines.XmlQuantity;

        _vendLine.PurchPrice = ExchangeRateHelper::curPrice2CurPrice(_mappingBetweenVendorInvoiceAndXmlLines.XmlUnitPrice, CompanyInfoHelper::standardCurrency(), _vendLine.currencyCode);

        _vendLine.LineDisc   = (_mappingBetweenVendorInvoiceAndXmlLines.XmlLineDisc / _mappingBetweenVendorInvoiceAndXmlLines.XmlQuantity);

        _vendLine.LineAmount = this.getTotalLineAmount(_vendLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the calcLineAmount method against the vendor invoice line.
    /// </summary>
    /// <param name="_line">
    /// Line to get the total amount
    /// </param>
    /// <returns>
    /// Calculated total amount of the line
    /// </returns>
    protected AmountCurDebCred getTotalLineAmount(VendInvoiceInfoLine _line)
    {
        return _line.calcLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the mapping between the vendor invoice lines and the XML lines
    /// </summary>
    /// <param name="_mappingBetweenVendorInvoiceAndXmlLines">
    /// Map of the relation between vendor invoice and XML lines
    /// </param>
    protected void setMapping(EFDocRecXmlMapToViLineTmp_BR _mappingBetweenVendorInvoiceAndXmlLines)
    {
        mappingBetweenVendorInvoiceAndXmlLines = _mappingBetweenVendorInvoiceAndXmlLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateVendorInvoiceLine</Name>
				<Source><![CDATA[
    private boolean shouldUpdateVendorInvoiceLine(VendInvoiceInfoLine _vendInvoiceLine, EFDocRecXmlMapToViLineTmp_BR _mapBetweenLines)
    {
        return (_vendInvoiceLine.ReceiveNow != _mapBetweenLines.XmlQuantity)
            || (_vendInvoiceLine.PurchPrice != _mapBetweenLines.XmlUnitPrice)
            || (_vendInvoiceLine.LineAmount != this.getTotalLineAmount(_vendInvoiceLine)
            || (_vendInvoiceLine.LineDisc   !=  _mapBetweenLines.XmlLineDisc));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuantityAndPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the quantity and price of vendor invoice lines based on the quantity and price of the received NF-e xml lines.
    /// Only the vendor invoice lines that have been mapped to a NF-e xml line will be updated.
    /// The table used to initialize the object contains the mapping information.
    /// </summary>
    /// <remarks>
    /// The update will happen for the vendor invoice lines that have been mapped to the received NF-e xml line,
    /// even if there are vendor invoice lines that couldn't be mapped.
    /// </remarks>
    public void updateQuantityAndPrice()
    {
        VendInvoiceInfoLine     vendLine;

        ttsBegin;

        while select forUpdate vendLine
        join mappingBetweenVendorInvoiceAndXmlLines
            where vendLine.RecId == mappingBetweenVendorInvoiceAndXmlLines.VendInvoiceInfoLine
                && mappingBetweenVendorInvoiceAndXmlLines.EFDocumentReceivedXmlViewLine_BR != 0
        {
            if (this.shouldUpdateVendorInvoiceLine(vendLine, mappingBetweenVendorInvoiceAndXmlLines))
            {
                this.copyXmlLineValuesToVendorInvoiceLine(vendLine, mappingBetweenVendorInvoiceAndXmlLines);
                this.updateVendorInvoiceLine(vendLine);
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the update method against the vendor invoice line. This method will assure that all methods that must be triggered
    /// when fields of the vendor invoice line are update have been called
    /// </summary>
    /// <param name="_vendLine">
    /// Vendor invoice line that has been changed and that must be updated
    /// </param>
    protected void updateVendorInvoiceLine(VendInvoiceInfoLine _vendLine)
    {
        _vendLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the EFDocRecXmlMapViLineUpdater_BR class
    /// </summary>
    /// <param name="_mappingBetweenVendorInvoiceAndXmlLines">
    /// Map between vendor invoice lines and XMl lines that will be used to update quantity and price in vendor invoice lines
    /// </param>
    /// <returns>
    /// An instance of the EFDocRecXmlMapViLineUpdater_BR class
    /// </returns>
    public static EFDocRecXmlMapViLineUpdater_BR newFromMapping(EFDocRecXmlMapToViLineTmp_BR _mappingBetweenVendorInvoiceAndXmlLines)
    {
        EFDocRecXmlMapViLineUpdater_BR updater = new EFDocRecXmlMapViLineUpdater_BR();

        updater.setMapping(_mappingBetweenVendorInvoiceAndXmlLines);

        return updater;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>