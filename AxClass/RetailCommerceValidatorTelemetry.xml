<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorTelemetry</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Exception;
using Microsoft.Dynamics.Application.Instrumentation;

public class RetailCommerceValidatorTelemetry
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTestExecutionTelemetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Telemetry log: Validation test execution.
    /// </summary>
    /// <param name = "_isStart">start/stop event.</param>
    /// <param name = "_retailCommerceValidator">the buffer of <c>RetailCommerceValidator</c> table.</param>
    /// <param name = "_retailCommerceValidatorTests">the buffer of <c>RetailCommerceValidatorTests</c> table.</param>
    internal static void addTestExecutionTelemetry(
        boolean _isStart, 
        RetailCommerceValidator _retailCommerceValidator, 
        RetailCommerceValidatorTests _retailCommerceValidatorTests)
    {
        if (_isStart)
        {
            ApplicationEventSource::EventWriteRetailCommerceValidatorTestExecutionStart(
                    _retailCommerceValidator.ValidationId,
                    _retailCommerceValidator.OMOperatingUnitId,
                    _retailCommerceValidator.CurrentBatchJobId,
                    _retailCommerceValidatorTests.TestId,
                    _retailCommerceValidatorTests.RuleId,
                    _retailCommerceValidatorTests.RangeStartRecId,
                    _retailCommerceValidatorTests.RangeEndRecId,
                    _retailCommerceValidatorTests.BatchTaskId,
                    enum2str(_retailCommerceValidator.ValidationExecutionStatus),
                    enum2str(_retailCommerceValidator.ValidationResultStatus),
                    _retailCommerceValidator.ValidationTotalTest,
                    _retailCommerceValidator.ValidationExecutedTest);
        }
        else
        {
            ApplicationEventSource::EventWriteRetailCommerceValidatorTestExecutionStop(
                _retailCommerceValidator.ValidationId,
                _retailCommerceValidator.OMOperatingUnitId,
                _retailCommerceValidator.CurrentBatchJobId,
                _retailCommerceValidatorTests.TestId,
                _retailCommerceValidatorTests.RuleId,
                _retailCommerceValidatorTests.RangeStartRecId,
                _retailCommerceValidatorTests.RangeEndRecId,
                _retailCommerceValidatorTests.BatchTaskId,
                enum2str(_retailCommerceValidator.ValidationExecutionStatus),
                enum2str(_retailCommerceValidator.ValidationResultStatus),
                _retailCommerceValidator.ValidationTotalTest,
                _retailCommerceValidator.ValidationExecutedTest);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addValidationSchedulerTelemetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Telemetry log: Validation Scheduler event.
    /// </summary>
    /// <param name = "_isStart">start / stop event.</param>
    /// <param name = "_retailCommerceValidator">The buffer of <c>RetailCommerceValidator</c> table.</param>
    /// <param name = "_totalTasks">The number of scheduled tasks.</param>
    internal static void addValidationSchedulerTelemetry(
        boolean _isStart, 
        RetailCommerceValidator _retailCommerceValidator, 
        int _totalTasks)
    {
        if (_isStart)
        {
            ApplicationEventSource::EventWriteRetailCommerceValidatorValidationSchedulerStart(
                _retailCommerceValidator.ValidationId,
                _retailCommerceValidator.OMOperatingUnitId,
                _retailCommerceValidator.CurrentBatchJobId,
                enum2str(_retailCommerceValidator.ValidationExecutionPhase),
                0);
        }
        else
        {
            ApplicationEventSource::EventWriteRetailCommerceValidatorValidationSchedulerStop(
                _retailCommerceValidator.ValidationId,
                _retailCommerceValidator.OMOperatingUnitId,
                _retailCommerceValidator.CurrentBatchJobId,
                enum2str(_retailCommerceValidator.ValidationExecutionPhase),
                _totalTasks);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addValidationCreationTelemetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Telemetry log: Validation creation.
    /// </summary>
    /// <param name = "_isStart">start / stop event.</param>
    /// <param name = "_retailCommerceValidator">The buffer of <c>RetailCommerceValidator</c> table.</param>
    /// <param name = "_oMOperatingUnitId">The operating unit.</param>
    internal static void addValidationCreationTelemetry(
        boolean _isStart, 
        RetailCommerceValidator _retailCommerceValidator, 
        RefRecId _oMOperatingUnitId)
    {
        if (_isStart)
        {
            ApplicationEventSource::EventWriteRetailCommerceValidatorValidationCreationStart(
                    _retailCommerceValidator.ValidationId,
                    _oMOperatingUnitId);
        }
        else
        {
            ApplicationEventSource::EventWriteRetailCommerceValidatorValidationCreationStop(
                    _retailCommerceValidator.ValidationId,
                    _oMOperatingUnitId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addValidationExecutionTelemetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Telemetry log: Validation Execution event.
    /// </summary>
    /// <param name = "_isStart">start / stop event.</param>
    /// <param name = "_retailCommerceValidator">The buffer of <c>RetailCommerceValidator</c> table.</param>
    /// <param name = "_batchJobId">The batch job id.</param>
    internal static void addValidationExecutionTelemetry(
        boolean _isStart, 
        RetailCommerceValidator _retailCommerceValidator, 
        RefRecId _batchJobId)
    {
        if (_isStart)
        {
            ApplicationEventSource::EventWriteRetailCommerceValidatorValidationExecutionStart(
                    _retailCommerceValidator.ValidationId,
                    _retailCommerceValidator.OMOperatingUnitId,
                    _batchJobId,
                    enum2str(_retailCommerceValidator.ValidationExecutionStatus),
                    enum2str(_retailCommerceValidator.ValidationResultStatus),
                    _retailCommerceValidator.ValidationTotalTest,
                    _retailCommerceValidator.ValidationExecutedTest);
        }
        else
        {
            ApplicationEventSource::EventWriteRetailCommerceValidatorValidationExecutionStop(
                    _retailCommerceValidator.ValidationId,
                    _retailCommerceValidator.OMOperatingUnitId,
                    _batchJobId,
                    enum2str(_retailCommerceValidator.ValidationExecutionStatus),
                    enum2str(_retailCommerceValidator.ValidationResultStatus),
                    _retailCommerceValidator.ValidationTotalTest,
                    _retailCommerceValidator.ValidationExecutedTest);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExecutionLogTelemetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Telemetry log: Execution logs.
    /// </summary>
    /// <param name = "_retailCommerceValidator">The buffer of <c>RetailCommerceValidator</c> table.</param>
    /// <param name = "_retailCommerceValidatorTests">The buffer of <c>RetailCommerceValidatorTests</c> table.</param>
    /// <param name = "_retailCommerceValidatorLogContext">The buffer of <c>RetailCommerceValidatorLogContext</c> table.</param>
    /// <param name = "_logType">The log type.</param>
    /// <param name = "_description">The log description.</param>
    internal static void addExecutionLogTelemetry(
        RetailCommerceValidator _retailCommerceValidator, 
        RetailCommerceValidatorTests _retailCommerceValidatorTests, 
        RetailCommerceValidatorLogContext _retailCommerceValidatorLogContext, 
        RetailCommerceValidatorLogType _logType, 
        RetailCommerceValidatorLogDescription _description)
    {
        ApplicationEventSource::EventWriteRetailCommerceValidatorExecutionLog(
                    _retailCommerceValidator.ValidationId,
                    _retailCommerceValidator.CurrentBatchJobId,
                    _retailCommerceValidatorTests.BatchTaskId,
                    _retailCommerceValidatorTests.TestId,
                    _retailCommerceValidatorTests.RuleId,
                    _retailCommerceValidatorLogContext.RecId,
                    enum2Str(_logType),
                    _description,
                    _retailCommerceValidatorLogContext.EntityContextText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExceptionTelemetry</Name>
				<Source><![CDATA[
    internal static void addExceptionTelemetry(RetailCommerceValidatorId _validationId, str _description, System.Exception _exception)
    {
        ApplicationEventSource::EventWriteRetailCommerceValidatorException(
                _validationId,
                0,
                _description,
                '',
                '',
                0,
                _exception.ToString(),
                _exception.StackTrace);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>