<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetRetirementPresentValueProvider_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is Asset document present value parameter.
/// </summary>
class AssetRetirementPresentValueProvider_JP
implements AssetDocumentIPresentValueProvider_JP
{
    AssetDocumentEntry_JP               assetDocumentEntry;
    AssetRetirementObligation_JP        retirementObligation;
    AssetTableIntervalFactory_JP        assetTableIntervalFactory;
    AssetDepBookMap_JP                  assetDepBookMap;

    List                            costList;
    AssetServiceLife                serviceLife;

    TransDate                       lastAdjustmentDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcYearRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the year ratio.
    /// </summary>
    /// <param name="_assetTableInterval">
    /// The asset table interval.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <returns>
    /// Returns the calculated year ratio.
    /// </returns>
    private real calcYearRatio(AssetTableInterval _assetTableInterval, TransDate _fromDate, TransDate _toDate)
    {
        real calculatedYearRatio;

        if (_assetTableInterval.findLastDayOfYear(_toDate) == _toDate)
        {
            calculatedYearRatio = _assetTableInterval.yearRatio_JP(_fromDate, _fromDate);
        }
        else
        {
            calculatedYearRatio = _assetTableInterval.yearRatio_JP(_fromDate, _fromDate) - _assetTableInterval.yearRatio_JP(_fromDate, _toDate + 1);
        }

        return calculatedYearRatio;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets list of cost.
    /// </summary>
    /// <returns>
    /// A list of cost.
    /// </returns>
    public List getCostList()
    {
        return costList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEffectiveYearRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the effective year ratio.
    /// </summary>
    /// <returns>
    /// The year ratio.
    /// </returns>
    protected real getEffectiveYearRatio()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextPostingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets next posting date.
    /// </summary>
    /// <param name="_calculationDate">
    /// The calculation date.
    /// </param>
    /// <returns>
    /// The next posting date.
    /// </returns>
    protected TransDate getNextPostingDate(TransDate _calculationDate)
    {
        TransDate           postingdate;
        AssetTableInterval  assetTableInterval;

        switch (retirementObligation.PostingFrequency)
        {
            case AssetRetirementPostingFrequency_JP::Yearly:
                assetTableInterval = assetTableIntervalFactory.getAssetTableInterval(_calculationDate);
                postingdate = assetTableInterval.findLastDayOfYear(_calculationDate);
                break;
            case AssetRetirementPostingFrequency_JP::Quarterly:
                assetTableInterval = assetTableIntervalFactory.getAssetTableInterval(_calculationDate);
                postingdate = assetTableInterval.findLastDayOfQuarter(_calculationDate);
                break;
        }

        return postingdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the service life.
    /// </summary>
    /// <returns>
    /// The service life.
    /// </returns>
    public AssetServiceLife getServiceLife()
    {
        return serviceLife;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the provider.
    /// </summary>
    protected void initialize()
    {
        costList = new List(Types::Class);
        retirementObligation = AssetRetirementObligation_JP::findByDocumentEntry(assetDocumentEntry.RecId);

        assetDepBookMap = AssetDepBookMap_JP::findByAssetIdBookId(assetDocumentEntry.AssetId, assetDocumentEntry.BookId);
        assetTableIntervalFactory = new AssetTableIntervalFactory_JP(assetDepBookMap);

        this.initializeProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the date, adjustment and discount rate list.
    /// All the dates corresponding to index must be within the calendar, within the service life.
    /// </summary>
    protected void initializeProvider()
    {
        AssetRetirementCostSchedule_JP          costSchedule;
        TransDate                               calculationDate;
        TransDate                               firstCostEffectiveDate;
        TransDate                               nextPostingDate;
        real                                    accumulateServiceLife;
        real                                    beforeCostServiceLife;
        real                                    currentYearRatio;
        real                                    currentCostYearRatio;

        AssetTableInterval                      assetTableInterval;
        boolean                                 isCostStart;
        boolean                                 isMoveToNextPostingDate;

        try
        {
            costSchedule = AssetRetirementCostSchedule_JP::findByRetirementObligation(retirementObligation.RecId);

            if (costSchedule)
            {
                firstCostEffectiveDate = costSchedule.EffectiveDate;
                assetTableInterval = assetTableIntervalFactory.getAssetTableInterval(firstCostEffectiveDate);

                //the first element
                if (assetTableInterval.findLastDayofYear(firstCostEffectiveDate))
                {
                    //start date is within the calendar
                    this.insertCost(AssetDocumentPresentValueCost_JP::construct(firstCostEffectiveDate, costSchedule.AccountingCurrencyAmount, costSchedule.getRawMarketDiscountRate(), 0, this.getEffectiveYearRatio()));

                    next costSchedule;
                }
            }

            calculationDate = assetDepBookMap.DepreciationStartDate;

            while (calculationDate
                && accumulateServiceLife < retirementObligation.ServiceLife)
            {
                nextPostingDate = this.getNextPostingDate(calculationDate);
                if (!nextPostingDate)
                {
                    //out of the calendar
                    break;
                }

                assetTableInterval = assetTableIntervalFactory.getAssetTableInterval(calculationDate);
                //next posting date is with in same year
                currentYearRatio = min(retirementObligation.ServiceLife - accumulateServiceLife, this.calcYearRatio(assetTableInterval, calculationDate, nextPostingDate));

                //get the current cost year ratio
                currentCostYearRatio = currentYearRatio;
                if (calculationDate < firstCostEffectiveDate
                    && nextPostingDate >= firstCostEffectiveDate)
                {
                    currentCostYearRatio = min(currentYearRatio, this.calcYearRatio(assetTableInterval, firstCostEffectiveDate, nextPostingDate));
                }

                //before the cost start
                if (!isCostStart)
                {
                    if (firstCostEffectiveDate && nextPostingDate >= firstCostEffectiveDate)
                    {
                        beforeCostServiceLife += currentYearRatio - currentCostYearRatio;
                        isCostStart = true;
                    }
                    else
                    {
                        beforeCostServiceLife += currentYearRatio;
                        isMoveToNextPostingDate = true;
                    }
                }

                if (isCostStart)
                {
                    if (costSchedule
                        && nextPostingDate >= costSchedule.EffectiveDate)
                    {
                        this.insertCost(AssetDocumentPresentValueCost_JP::construct(nextPostingDate, costSchedule.AccountingCurrencyAmount, costSchedule.getRawMarketDiscountRate(), currentCostYearRatio, this.getEffectiveYearRatio()));
                        next costSchedule;
                        isMoveToNextPostingDate = false;
                    }
                    else
                    {
                        if (lastAdjustmentDate < nextPostingDate)
                        {
                            this.insertCost(AssetDocumentPresentValueCost_JP::construct(nextPostingDate, 0.0, 0.0, currentCostYearRatio, this.getEffectiveYearRatio()));
                        }
                        isMoveToNextPostingDate = true;
                    }
                }

                if (isMoveToNextPostingDate)
                {
                    calculationDate = nextPostingDate + 1;
                    accumulateServiceLife += currentYearRatio;
                }
            }

            serviceLife = retirementObligation.ServiceLife - beforeCostServiceLife;
        }
        catch
        {
            throw error ("@SYS4005481");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the cost.
    /// </summary>
    /// <param name="_cost">
    /// The cost.
    /// </param>
    private void insertCost(AssetDocumentPresentValueCost_JP _cost)
    {
        costList.addEnd(_cost);
        lastAdjustmentDate = _cost.parmCostDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00018] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDocumentEntry</Name>
				<Source><![CDATA[
        public AssetDocumentEntry_JP parmAssetDocumentEntry(AssetDocumentEntry_JP _assetDocumentEntry = assetDocumentEntry)
    {
        assetDocumentEntry = _assetDocumentEntry;
        return assetDocumentEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does the calculation of present value.
    /// </summary>
    /// <param name="_documentEntryRecId">
    /// The document entry record id.
    /// </param>
    /// <param name="_toDate">
    /// To date.
    /// </param>
    /// <returns>
    /// A container with the result of the calculation.
    /// </returns>
    public static Array calculate(
        RefRecId    _documentEntryRecId,
        TransDate   _toDate)
    {
        Array resultArray = new Array(Types::Class);
        container resultContainer;
        AssetDocumentPresentValueResult_JP resultLocal;
        int i;
        int length;

        if (!AssetRetirementObligation_JP::checkDocumentEntry(_documentEntryRecId))
        {
            throw Exception::Warning;
        }

        resultContainer = AssetRetirementPresentValueProvider_JP::doCalculate(_documentEntryRecId, _toDate);
        length = conLen(resultContainer);
        for (i = 1; i <= length; i++)
        {
            resultLocal = AssetDocumentPresentValueResult_JP::create(conPeek(resultContainer, i));
            resultArray.value(i, resultLocal);
        }

        return resultArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance from the asset document record id.
    /// </summary>
    /// <param name="_documentEntryRecId">
    /// The asset document entry record id.
    /// </param>
    /// <returns>
    /// An instance of <c>AssetDocROPresentValueProvider_JP</c>.
    /// </returns>
    public static AssetRetirementPresentValueProvider_JP construct(RefRecId _documentEntryRecId)
    {
        AssetDocumentEntry_JP                   assetDocumentEntry;
        AssetRetirementPresentValueProvider_JP  assetDocumentROPresentValueProvider;

        assetDocumentEntry = AssetDocumentEntry_JP::find(_documentEntryRecId);
        assetDocumentROPresentValueProvider = new AssetRetirementPresentValueProvider_JP();
        assetDocumentROPresentValueProvider.parmAssetDocumentEntry(assetDocumentEntry);
        assetDocumentROPresentValueProvider.initialize();

        return assetDocumentROPresentValueProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCalculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does the calculation of present value.
    /// </summary>
    /// <param name="_documentEntryRecId">
    /// The document entry record id.
    /// </param>
    /// <param name="_toDate">
    /// To date.
    /// </param>
    /// <returns>
    /// A container with the result of the calculation.
    /// </returns>
    private static container doCalculate(
        RefRecId    _documentEntryRecId,
        TransDate   _toDate)
    {
        AssetRetirementPresentValueProvider_JP  provider;
        AssetDocumentPresentValueCalculator_JP  calculator;
        AssetDocumentPresentValueResult_JP      resultLocal;
        int i;
        container result;

        provider = AssetRetirementPresentValueProvider_JP::construct(_documentEntryRecId);
        calculator = AssetDocumentPresentValueCalculator_JP::construct(provider);
        calculator.calculatePresentValue(_toDate);
        for (i = 1; i <= calculator.getResults().lastIndex(); i++)
        {
            resultLocal = calculator.getResults().value(i);
            result += [resultLocal.pack()];
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>