<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Bank_US</Name>
	<SourceCode>
		<Declaration><![CDATA[
class Bank_US extends Bank
{
    private const str digits = '0123456789';
    private const int routingNumlength_FW = 9;
    private const int routingNumlength_CH = 4;
    private const int routingNumlength_CP = 6;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the routing number and the account number on a United States bank account.
    /// </summary>
    /// <param name="_bankAccountMap">
    ///    A <c>BankAccountMap</c> for the account to validate.
    /// </param>
    /// <returns>
    ///    true if the bank account was validated; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The routing number must contain digits only, must be nine characters long, and the check digit must
    ///    match the calculated value.The account number must contain digits only.
    /// </remarks>
    public boolean checkBankAccount(BankAccountMap _bankAccountMap)
    {
        boolean bankIsValid = true;

        if (bankIsValid)
        {
            bankIsValid = this.checkBankRegNum(_bankAccountMap.RegistrationNum, _bankAccountMap.BankCodeType);
        }

        if (bankIsValid)
        {
            bankIsValid = this.checkBankAccountNum(_bankAccountMap.AccountNum);
        }

        return bankIsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the account number on a United States bank account.
    /// </summary>
    /// <param name="_accountNumber">
    ///    The bank account number to validate.
    /// </param>
    /// <returns>
    ///    true if the bank account was validated; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The account number must contain digits only.
    /// </remarks>
    public boolean checkBankAccountNum(BankAccount _accountNumber)
    {
        boolean accountNumIsValid = true;

        if (strlen(_accountNumber) == 0)
        {
            return accountNumIsValid;
        }

        // validate the format of the string
        if (strrem(_accountNumber, digits))
        {
            accountNumIsValid = checkFailed("@SYS98452");
        }

        return accountNumIsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankRegNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the routing number contains only digits, is nine characters long, and that the check
    ///    digit, which is the ninth digit, matches the check digit calculation.
    /// </summary>
    /// <param name="_registrationNum">
    ///    The bank registration number to validate.
    /// </param>
    /// <param name="_bankCodeType">
    ///    The bank registration type to use when validating.
    /// </param>
    /// <returns>
    ///    true if the routing number is valid; otherwise, false.
    /// </returns>
    public boolean checkBankRegNum(BankRegNum _registrationNum, BankCodeType _bankCodeType)
    {
        // local vars
        boolean bankIsValid = true;
        int     checkDigit;
        int     routingLength;

        if (strlen(_registrationNum) == 0)
        {
            return bankIsValid;
        }

        // check to see if a recognized Bank Routing Type was provided
        routingLength = this.getRoutingLength(_bankCodeType);
        if (!routingLength)
        {
            // only validate routing format for recognized Rounting Types
            return bankIsValid;
        }

        // validate the data format of the Bank Routing Number
        if (strrem(_registrationNum, digits))
        {
            bankIsValid = checkFailed("@SYS82463");
        }
        else
        {
            // validate the length of the routing number based on the associated type
            if (strlen(_registrationNum) != routingLength)
            {
                bankIsValid = checkFailed(strfmt("@SYS313991", _bankCodeType, routingLength));
            }
            else if (_bankCodeType == BankCodeType::Code_FW)
            {
                // calc the Check Digit for Federal Wire Banks
                checkDigit = Bank_US::calcRoutingNumberCheckDigit(_registrationNum);

                // validate the Check Digit on the Routing Number
                if (str2int(substr(_registrationNum, routingNumLength_FW, 1)) != checkDigit)
                {
                    bankIsValid = checkFailed("@SYS95176");
                }
            }
        }

        return bankIsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRoutingLength</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the routing number length based on the routing number type.
    /// </summary>
    /// <param name = "_bankCodeType">
    ///     The routing number type.
    /// </param>
    /// <returns>
    ///     The routing number length based based on the routing number type.
    /// </returns>
    protected int getRoutingLength(BankCodeType _bankCodeType)
    {
        int routingLength;

        switch (_bankCodeType)
        {
            case BankCodeType::Code_FW:
                routingLength = routingNumlength_FW;
                break;
            case BankCodeType::Code_CH:
                routingLength = routingNumlength_CH;
                break;
            case BankCodeType::Code_CP:
                routingLength = routingNumlength_CP;
                break;
        }
        return routingLength;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(BankAccountMap _bankAccountMap)
    {
        return this.checkBankAccount(_bankAccountMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRoutingNumberCheckDigit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the check digit value, given an eight digit bank account routing number.
    /// </summary>
    /// <param name="_routingNumber">
    ///    A routing number.
    /// </param>
    /// <returns>
    ///    The check digit value.
    /// </returns>
    /// <remarks>
    ///    The check digit is calculated as follows:1) Multiply each digit in the routing number by a
    ///    weighting factor. The weighting factors for each digit are as follows: Positions: 1 2 3 4 5 6 7 8
    ///    Weights:  3 7 1 3 7 1 3 72) Add the results of the eight multiplications.3) Subtract the sum from
    ///    the next highest multiple of 10. The result is the check digit.
    /// </remarks>
    //  The Check Digit is computed using Modulus 10 as follows:
    //  1) Multiply each digit in the Routing Number by a weighting factor.
    //      The weighting factors for each digit are:
    //          Positions: 1 2 3 4 5 6 7 8
    //          Weights  : 3 7 1 3 7 1 3 7
    //
    //  2) Add the results of the eight multiplications
    //  3) Subtract the sum from the next highest multiple of 10.  The result is the Check Digit.
    //
    //  Example:
    //      Routing Number of 07640125
    //      Yields a Check Sum = 109        (0 + 49 + 6 + 12 + 0 + 1 + 6 + 35)
    //      Check Digit = 1                 (110 - 109)
    //
    public static int calcRoutingNumberCheckDigit(str _routingNumber)
    {
        int     charIndex;
        int     checkSum;
        int     digit;
        int     multiplier;
        int     checkDigit;

        for (charIndex = 1; charIndex <= 8; charIndex++)
        {
            digit = str2int(substr(_routingNumber, charIndex, 1));

            // Multiply by weighting factor...
            switch (charIndex)
            {
                case 1, 4, 7:
                    checkSum += (digit * 3);
                    break;

                case 2, 5, 8:
                    checkSum += (digit * 7);
                    break;

                case 3, 6:
                    checkSum += digit;
                    break;
            }
        }

        if (checkSum mod 10 == 0)
        {
            checkDigit = 0;
        }
        else
        {
            multiplier = (checkSum div 10) + 1;
            checkDigit = (multiplier * 10) - checkSum;
        }

        return checkDigit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static Bank_US construct()
    {
        return new Bank_US();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>