<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveTaskCreatorLabelPrinting</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveTaskCreatorLabelPrinting</c> class is responsible for creating the needed batch tasks
/// for label printing.
/// </summary>
[WHSWaveTaskCreatorAttribute(methodStr(WhsPostEngineBase, waveLabelPrinting))]
public class WHSWaveTaskCreatorLabelPrinting implements WHSWaveTaskICreator
{
    private WHSPostEngine postEngine;
    private BatchHeader   batchHeader;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFinalTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a batch task that will be the final task run.
    /// </summary>
    /// <param name = "_batchGroupId">A batch group Id.
    /// </param>
    /// <returns>
    /// An instance of <c>WHSWaveFinalizeLabelPrinting</c>.
    /// </returns>
    /// <remarks>
    /// The batch task should be dependent on all other task created during classes execution.
    /// </remarks>
    private WHSWaveFinalizeLabelPrinting createFinalTask(BatchGroupId _batchGroupId)
    {
        var waveFinalizeLabelPrinting = WHSWaveFinalizeLabelPrinting::construct();
        waveFinalizeLabelPrinting.initFromPostEngine(postEngine);
        waveFinalizeLabelPrinting.batchInfo().parmGroupId(_batchGroupId);

        batchHeader.addTask(waveFinalizeLabelPrinting);

        return waveFinalizeLabelPrinting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Created a batch job with tasks to process wave label printing.
    /// </summary>
    [Hookable(false)]
    public void createTasks()
    {
        WHSWaveTable waveTable = postEngine.parmWaveTable();
        using (var perfTask = WHSInstrumentationWaveProcessingPerformanceTask::newTaskCreation(waveTable, postEngine.parmWaveExecutionId(), funcName()))
        {
            ttsbegin;

            var postMethodTaskConfig = WHSWavePostMethodTaskConfiguration::find(methodStr(WHSPostEngineBase, waveLabelPrinting), waveTable.InventLocationId);
            WHSMaximumBatchTasks numOfBatchTasks = postMethodTaskConfig.MaximumBatchTasks;
            perfTask
                .setMaximumBatchTasks(numOfBatchTasks)
                .setNumOfBatchTasks(numOfBatchTasks);

            if (numOfBatchTasks != WHSWaveTaskBasedProcessingConstants::LabelPrintingTaskBasedProcessingMaximumBatchTasks)
            {
                // If the number of batch tasks is not 1, then something went wrong because we have correctly setup task based processing,
                // yet the postMethodTaskConfig maximum batch tasks is not 1.
                // Throw an error to ensure that correct wave clean up is called.
                throw error("@WAX:WaveLabelPrintingTasksNotCreatedError");
            }

            batchHeader = BatchHeader::construct();
            batchHeader.parmCaption(strFmt("@WAX:WaveLabelPrintingBatchJobDescription", waveTable.WaveId));

            var batchGroupId = postMethodTaskConfig.WaveBatchGroup();

            WHSWaveFinalizeLabelPrinting waveFinalizeLabelPrinting = this.createFinalTask(batchGroupId);

            if (WHSParameters::find().WaveProgressLog)
            {
                WHSWaveMethodStatusHandler waveMethodStatusHandler = WHSWaveMethodStatusHandler::newWaveMethodStatusHandler(
                                                                        waveTable.WaveId, 
                                                                        methodStr(WHSPostEngineBase, waveLabelPrinting));
                waveMethodStatusHandler.updateWaveStepProgressToStarted();
            }

            for (Counter i = 1; i <= numOfBatchTasks; i++)
            {
                var waveLabelPrintingProcessor = WHSWaveLabelPrintingProcessor::newFromPostEngine(postEngine);
                waveLabelPrintingProcessor.batchInfo().parmCaption(strFmt("@WAX:WaveLabelPrintingBatchTaskDescription", waveTable.WaveId, i));
                waveLabelPrintingProcessor.batchInfo().parmGroupId(batchGroupId);

                batchHeader.addTask(waveLabelPrintingProcessor);

                // The post label printing batch task is dependent on all label printing tasks
                batchHeader.addDependency(waveFinalizeLabelPrinting, waveLabelPrintingProcessor, BatchDependencyStatus::FinishedOrError);
            }

            batchHeader.save();
            WHSWaveTableBatch::createSingleWaveBatchRelationship(waveTable.RecId, batchHeader.parmBatchHeaderId());
            perfTask.setBatchHeaderId(batchHeader.parmBatchHeaderId());
        
            ttscommit;
        }

        WHSPostEngineBase::immediatelyStartNextBatchTaskForWave();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>WHSPostEngine</c> parameter.
    /// </summary>
    /// <param name = "_postEngine">The value to set.</param>
    /// <returns>The value of the <c>WHSPostEngine</c> parameter.</returns>
    /// <remarks>It is the responsibility of the consumer to correctly dispose the <c>WHSPostEngine</c> instance.</remarks>
    [Hookable(false)]
    public WHSPostEngine parmPostEngine(WHSPostEngine _postEngine = postEngine)
    {
        postEngine = _postEngine;

        return postEngine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>