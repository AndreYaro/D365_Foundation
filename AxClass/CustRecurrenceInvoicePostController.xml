<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustRecurrenceInvoicePostController</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustRecurrenceInvoicePostController extends SysOperationServiceController implements BatchRetryable
{
    private RecId startBundle;
    private RecId endBundle;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CustRecurrenceInvoicePostController controller;
        identifierName className, methodName;
        SysOperationExecutionMode mode;
        CustRecurrenceInvoicePostContract custRecurrenceInvoiceDataContract;

        [className, methodName, mode] = SysOperationServiceController::parseServiceInfo(args);
        controller = new CustRecurrenceInvoicePostController(className, methodName, mode);

        custRecurrenceInvoiceDataContract = controller.getDataContractObject(classStr(CustRecurrenceInvoicePostContract));
        custRecurrenceInvoiceDataContract.custRecurrenceInvoiceGroup(args.record());

        if (args.menuItemName() == identifierstr(CustRecurrInvoicePostServiceOperation))
        {
            controller.initiateRecurrenceInvoicePostingInParallel(custRecurrenceInvoiceDataContract);
            return;
        }

        switch (args.menuItemName())
        {
            case identifierstr(CustRecurrInvCheckServiceOperation) :
                custRecurrenceInvoiceDataContract.parmCheckRecurrenceInvoice(NoYes::Yes);
                custRecurrenceInvoiceDataContract.parmRecurrenceInvoicePost(NoYes::No);
                custRecurrenceInvoiceDataContract.parmRecurrencePostTransfer(NoYes::No);
                break;

            case identifierstr(CustRecurrInvPostTransferServiceOpertion) :
                custRecurrenceInvoiceDataContract.parmCheckRecurrenceInvoice(NoYes::No);
                custRecurrenceInvoiceDataContract.parmRecurrenceInvoicePost(NoYes::No);
                custRecurrenceInvoiceDataContract.parmRecurrencePostTransfer(NoYes::Yes);
                break;

            // <GEERU>
            case identifierstr(CustRecurrFacturePostServiceOperation) :
                custRecurrenceInvoiceDataContract.parmRecurrenceInvoicePost (NoYes::Yes);
                custRecurrenceInvoiceDataContract.parmRecurrencePostTransfer(NoYes::No);
                custRecurrenceInvoiceDataContract.parmPostFacture (NoYes::Yes);
                custRecurrenceInvoiceDataContract.parmPostInvoice4Paym (NoYes::No);
                custRecurrenceInvoiceDataContract.parmSummaryUpdate (NoYes::No);
                break;

            case identifierstr(CustRecurrFacturePostServiceOperationSum) :
                custRecurrenceInvoiceDataContract.parmRecurrenceInvoicePost (NoYes::Yes);
                custRecurrenceInvoiceDataContract.parmRecurrencePostTransfer(NoYes::No);
                custRecurrenceInvoiceDataContract.parmPostFacture (NoYes::Yes);
                custRecurrenceInvoiceDataContract.parmPostInvoice4Paym (NoYes::No);
                custRecurrenceInvoiceDataContract.parmSummaryUpdate (NoYes::Yes);
                break;

            case identifierstr(CustRecurrInv4PaymPostServiceOper) :
                custRecurrenceInvoiceDataContract.parmRecurrenceInvoicePost (NoYes::No);
                custRecurrenceInvoiceDataContract.parmRecurrencePostTransfer(NoYes::No);
                custRecurrenceInvoiceDataContract.parmPostFacture (NoYes::No);
                custRecurrenceInvoiceDataContract.parmPostInvoice4Paym (NoYes::Yes);
                custRecurrenceInvoiceDataContract.parmSummaryUpdate (NoYes::No);
                break;

            case identifierstr(CustRecurrInv4PaymPostServiceOperSum) :
                custRecurrenceInvoiceDataContract.parmRecurrenceInvoicePost (NoYes::No);
                custRecurrenceInvoiceDataContract.parmRecurrencePostTransfer(NoYes::No);
                custRecurrenceInvoiceDataContract.parmPostFacture (NoYes::No);
                custRecurrenceInvoiceDataContract.parmPostInvoice4Paym (NoYes::Yes);
                custRecurrenceInvoiceDataContract.parmSummaryUpdate (NoYes::Yes);
                break;
            // </GEERU>

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        // If run in batch then validation in sandbox does not need to be done
        if (mode == SysOperationExecutionMode::Synchronous && custRecurrenceInvoiceDataContract.parmCheckRecurrenceInvoice())
        {
            custRecurrenceInvoiceDataContract.parmValidateInSandbox(NoYes::Yes);
        }
        else
        {
            custRecurrenceInvoiceDataContract.parmValidateInSandbox(NoYes::No);
        }

        controller.parmArgs(args);
        controller.parmShowDialog(false);
        controller.parmDialogCaption("@AccountsReceivable:PostRecurrentFreeTextInvoice");
        controller.startOperation();
        // Show message about sending to batch queue.
        if (mode != SysOperationExecutionMode::Synchronous)
        {
            info(strFmt("@SYS73254", controller.parmDialogCaption()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateRecurrenceInvoicePostingInParallel</Name>
				<Source><![CDATA[
    private void initiateRecurrenceInvoicePostingInParallel(CustRecurrenceInvoicePostContract _contract)
    {
        CustRecurrenceInvoicePostController controller = new CustRecurrenceInvoicePostController(
            classStr(CustRecurrenceInvoicePostController),
            methodStr(CustRecurrenceInvoicePostController, splitInvoiceBundles),
            SysOperationExecutionMode::ScheduledBatch);

        CustRecurrenceInvoicePostContract dataContract = controller.getDataContractInfoObject().dataContractObject() as CustRecurrenceInvoicePostContract;
        dataContract.custRecurrenceInvoiceGroup(_contract.parmCustRecurrenceInvoiceGroup());

        controller.parmShowDialog(false);
        controller.parmDialogCaption("@AccountsReceivable:PostRecurrentFreeTextInvoice");
        controller.startOperation();
        info(strFmt("@SYS73254", controller.parmDialogCaption()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitInvoiceBundles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Split the amount of invoices to be posted into bundles of no less than 100.
    /// </summary>
    /// <param name = "_contract">The contract for the bundled invoice posting.</param>
    internal void splitInvoiceBundles(CustRecurrenceInvoicePostContract _contract)
    {
        const int MinBundleSize = 100;
        int bundleSize = SalesParameters::find().OrderBatchTaskSize;

        if (bundleSize < MinBundleSize)
        {
            bundleSize = MinBundleSize;
        }

        BatchHeader batchHeader = BatchHeader::getCurrentBatchHeader();

        if (batchHeader == null)
        {
            batchHeader = batchHeader::construct();
        }

        RecurrenceInvoice invoice;
        CustInvoiceTable custInvoice;
        Counter i;
        RecId lastBundle;
        boolean hasInvoicesToProcess;

        while select RecId from invoice
            order by invoice.RecId asc
            where invoice.CustRecurrenceInvoiceGroup == _contract.parmCustRecurrenceInvoiceGroup().RecId
            exists join custInvoice where
                custInvoice.RecId == invoice.CustInvoiceTable
                && custInvoice.Posted == NoYes::No
        {
            i++;

            if (i == 1)
            {
                startBundle = invoice.RecId;
            }

            if (i >= bundleSize)
            {
                endBundle = invoice.RecId;
                i = 0;

                CustRecurrenceInvoicePostController controller = this.cloneForSubProcess(_contract);
                batchHeader.addTask(controller, this.parmCurrentBatch().RecId);
            }

            lastBundle = invoice.RecId;
            hasInvoicesToProcess = true;
        }

        boolean shouldCreateNewBundle = (i > 0 || !hasInvoicesToProcess);
        if (shouldCreateNewBundle)
        {
            endBundle = lastBundle;
            CustRecurrenceInvoicePostController controller = this.cloneForSubProcess(_contract);
            batchHeader.addTask(controller, this.parmCurrentBatch().RecId);
        }

        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cloneForSubProcess</Name>
				<Source><![CDATA[
    private CustRecurrenceInvoicePostController cloneForSubProcess(CustRecurrenceInvoicePostContract _contract)
    {
        CustRecurrenceInvoicePostController controller = new CustRecurrenceInvoicePostController(
            classStr(CustRecurrenceInvoicePostController),
            methodStr(CustRecurrenceInvoicePostController, executeParallelTaskForRecurrenceInvoicePosting),
            SysOperationExecutionMode::Synchronous);

        CustRecurrenceInvoicePostContract dataContract = controller.getDataContractInfoObject().dataContractObject() as CustRecurrenceInvoicePostContract;
        dataContract.parmStartBundle(startBundle);
        dataContract.parmEndBundle(endBundle);
        dataContract.custRecurrenceInvoiceGroup(_contract.parmCustRecurrenceInvoiceGroup());
        dataContract.parmRecurrencePostTransfer(NoYes::No);
        dataContract.parmRecurrenceInvoicePost(NoYes::Yes);
        dataContract.parmValidateInSandbox(NoYes::No);
        dataContract.parmCheckRecurrenceInvoice(NoYes::No);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeParallelTaskForRecurrenceInvoicePosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute posting of bundled invoices.
    /// </summary>
    /// <param name = "_contract">The contract for the bundled invoice posting.</param>
    internal void executeParallelTaskForRecurrenceInvoicePosting(CustRecurrenceInvoicePostContract _contract)
    {
        CustRecurrenceInvoicePostService postService = new CustRecurrenceInvoicePostService();
        postService.post(_contract);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>