<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPromissoryNotePostReDrawHonored</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The class <c>VendPromissoryNotePostRedrawHonored</c> is used when a redraw promissory journal is posted as protest settlement.
/// </summary>
public class VendPromissoryNotePostReDrawHonored extends VendPromissoryNotePost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postNextStep</Name>
				<Source><![CDATA[
    protected void postNextStep(CustVendVoucher _vendVoucher, CustVendTrans _settlingTrans)
    {
        VendVoucher                 vendVoucher = _vendVoucher;
        VendSettlement              vendSettlement;
        VendTrans                   settledTrans;
        VendTrans                   nextStepTrans;
        VendPromissoryNoteJour      vendPromissoryNoteJour;
        VendPromissoryNoteTrans     vendPromissoryNoteTrans;

        QueryRun queryRun = SpecTrans::createQueryRunToRefTable(ledgerJournalTrans.company(),
                                                                tableNum(LedgerJournalTrans),
                                                                ledgerJournalTrans.RecId,
                                                                tableNum(VendSettlement));
        queryRun.allowCrossCompany(true);

        RecordLinkList recordLinkList = new RecordLinkList();
        while (queryRun.next())
        {
            recordLinkList.ins(queryRun.get(tableNum(VendSettlement)));
        }

        SpecTransManager::newFromSpec(ledgerJournalTrans).deleteAll();

        vendVoucher.parmSettlementType(SettlementType::None);
        vendVoucher.parmPostingProfile(CustVendNegInstPost::getPostingProfile(ledgerJournalType,
                                                                              ledgerJournalTrans.BankRemittanceType));

        // Creates new open transactions for transactions settled by the settling transaction.
        while (recordLinkList.next(vendSettlement))
        {
            // This code is run when posting a Promissory Note Journal for non-settled transactions.
            // In this code the settledTrans, and custSettlement will always be in the current company so we do not
            // need to do a changeCompany before the select statement.
            while select AmountCur, CurrencyCode, PromissoryNoteID from settledTrans
                where settledTrans.RecId == vendSettlement.OffsetRecid
            {
                vendVoucher.parmAmountCur(settledTrans.AmountCur);
                vendVoucher.parmCurrencyCode(settledTrans.CurrencyCode);
                vendVoucher.parmTransTxt(strFmt("@SYS83924", enum2str(ledgerJournalTrans.CustVendNegInstProtestReason), settledTrans.PromissoryNoteID));

                vendVoucher.post(ledgerVoucher, nextStepTrans);

                vendPromissoryNoteJour = VendPromissoryNoteJour::find(settledTrans.PromissoryNoteID, true);
                nextStepTrans.AmountCur = -nextStepTrans.AmountCur;
                vendPromissoryNoteTrans = this.insertNegInstTrans(vendPromissoryNoteJour, nextStepTrans);

                if (isConditionalTaxSpain)
                {
                    this.taxSettlement_ES(vendPromissoryNoteTrans);
                }

                if (this.protestProcess() != CustVendNegInstProtestProcess::OpenTrans)
                {
                    nextStepTrans.AmountCur = -nextStepTrans.AmountCur;

                    this.setNegInstFieldOnTrans(nextStepTrans,
                                                vendPromissoryNoteTrans.PromissoryNoteId,
                                                vendPromissoryNoteTrans.Status,
                                                vendPromissoryNoteTrans.SeqNum);

                    nextStepTrans.BankRemittanceFileId = ledgerJournalTrans.BankRemittanceFileId;
                    nextStepTrans.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSettlingStep</Name>
				<Source><![CDATA[
    protected void postSettlingStep(CustVendVoucher custVendVoucher, CustVendTrans settlingTrans)
    {
        // There is no settling step.
    }

]]></Source>
			</Method>
			<Method>
				<Name>protestProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the selected option on journal to protest settled process; that can be "as invoice" or "as open payment".
    /// </summary>
    /// <returns>
    ///     The protest settled process option.
    ///</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustVendNegInstProtestProcess protestProcess()
    {
        return ledgerJournalTrans.ledgerJournalTable().CustVendNegInstProtestProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>seqNum</Name>
				<Source><![CDATA[
    protected CustVendNegInstSeqNum seqNum(VendPromissoryNoteID _vendPromissoryNoteID)
    {
        CustVendNegInstSeqNum seqNum = super(_vendPromissoryNoteID);

        if (this.protestProcess() != CustVendNegInstProtestProcess::OpenTrans)
        {
            seqNum++;
        }

        return seqNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    protected CustVendNegInstStatus status()
    {
        return CustVendNegInstStatus::Redrawn;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>