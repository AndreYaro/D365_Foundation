<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AxVendInvoiceInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AxVendInvoiceInfo extends AxApplicationBase
{
    VendInvoiceInfo vendInvoiceInfo;
    AxInventDim_VendInvoiceInfo axInventDim;

    str item;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>axInventDim</Name>
				<Source><![CDATA[
        public AxInventDim_VendInvoiceInfo axInventDim(AxInventDim_VendInvoiceInfo _axInventDim = axInventDim)
    {
        axInventDim = _axInventDim;

        return axInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axOrig</Name>
				<Source><![CDATA[
        public AxInternalBase axOrig()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRecord</Name>
				<Source><![CDATA[
        public Common currentRecord(Common _vendInvoiceInfo = vendInvoiceInfo)
    {
        if (!prmisdefault(_vendInvoiceInfo))
        {
            super(_vendInvoiceInfo);
            vendInvoiceInfo = _vendInvoiceInfo as VendInvoiceInfo;
        }
        else
        {
            super();
        }

        return vendInvoiceInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an empty <c>VendInvoiceInfo</c> record.
    /// </summary>
    /// <returns>
    /// An empty <c>VendInvoiceInfo</c> record.
    /// </returns>
    protected Common emptyRecord()
    {
        VendInvoiceInfo localVendInvoiceInfo;
        return localVendInvoiceInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMandatoryFieldsExemptionList</Name>
				<Source><![CDATA[
        protected void initMandatoryFieldsExemptionList()
    {
        super();
        this.setParmMethodAsNotMandatory(methodstr(AxVendInvoiceInfo,parmRefTableId));
        this.setParmMethodAsNotMandatory(methodstr(AxVendInvoiceInfo,parmRefRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new()
    {
        axInventDim = AxInventDim_VendInvoiceInfo::newAxVendInvoiceInfo(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
        public InventDimId parmInventDimId(InventDimId _inventDimId = '')
    {
        if (!prmisdefault(_inventDimId))
        {
            this.setField(fieldnum(VendInvoiceInfo, InventDimId), _inventDimId);
        }

        return vendInvoiceInfo.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
        public str parmItemId(str _itemId = '')
    {
        DictField dictField;

        if (!prmisdefault(_itemId))
        {
            dictField = new DictField(tablenum(VendInvoiceInfo),fieldnum(VendInvoiceInfo,ItemId));
            this.validateInboundItemIdString(_itemId,dictField);
            if (this.valueMappingInbound())
            {
                item = _itemId;
            }

            this.setField(fieldnum(VendInvoiceInfo, ItemId), _itemId);
        }

        if (this.valueMappingOutbound())
        {
            return conpeek(this.axPurchItemId(LedgerJournalTrans::findRecId(this.parmRefRecId(),false).parmAccount(),vendInvoiceInfo.ItemId,vendInvoiceInfo.inventDim()),1);
        }
        return vendInvoiceInfo.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDisc</Name>
				<Source><![CDATA[
        public PurchLineDisc parmLineDisc(PurchLineDisc _lineDisc = 0)
    {
        if (!prmisdefault(_lineDisc))
        {
            this.setField(fieldnum(VendInvoiceInfo, LineDisc), _lineDisc);
        }

        return vendInvoiceInfo.LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLinePercent</Name>
				<Source><![CDATA[
        public PurchLinePercent parmLinePercent(PurchLinePercent _linePercent = 0)
    {
        if (!prmisdefault(_linePercent))
        {
            this.setField(fieldnum(VendInvoiceInfo, LinePercent), _linePercent);
        }

        return vendInvoiceInfo.LinePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiLnDisc</Name>
				<Source><![CDATA[
        public PurchMultiLnDisc parmMultiLnDisc(PurchMultiLnDisc _multiLnDisc = 0)
    {
        if (!prmisdefault(_multiLnDisc))
        {
            this.setField(fieldnum(VendInvoiceInfo, MultiLnDisc), _multiLnDisc);
        }

        return vendInvoiceInfo.MultiLnDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiLnPercent</Name>
				<Source><![CDATA[
        public PurchMultiLnPercent parmMultiLnPercent(PurchMultiLnPercent _multiLnPercent = 0)
    {
        if (!prmisdefault(_multiLnPercent))
        {
            this.setField(fieldnum(VendInvoiceInfo, MultiLnPercent), _multiLnPercent);
        }

        return vendInvoiceInfo.MultiLnPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
        public ItemName parmName(ItemName _name = '')
    {
        if (!prmisdefault(_name))
        {
            this.setField(fieldnum(VendInvoiceInfo, Name), _name);
        }

        return vendInvoiceInfo.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderId</Name>
				<Source><![CDATA[
        public PurchId parmOrderId(PurchId _orderId = '')
    {
        if (!prmisdefault(_orderId))
        {
            this.setField(fieldnum(VendInvoiceInfo, OrderId), _orderId);
        }

        return vendInvoiceInfo.OrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
        public InventQty parmQuantity(InventQty _quantity = 0)
    {
        if (!prmisdefault(_quantity))
        {
            this.setField(fieldnum(VendInvoiceInfo, Quantity), _quantity);
        }

        return vendInvoiceInfo.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefRecId</Name>
				<Source><![CDATA[
        public RefRecId parmRefRecId(RefRecId _refRecId = 0)
    {
        if (!prmisdefault(_refRecId))
        {
            this.setField(fieldnum(VendInvoiceInfo, RefRecId), _refRecId);
        }

        return vendInvoiceInfo.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefTableId</Name>
				<Source><![CDATA[
        public RefTableId parmRefTableId(RefTableId _refTableId = 0)
    {
        if (!prmisdefault(_refTableId))
        {
            this.setField(fieldnum(VendInvoiceInfo, RefTableId), _refTableId);
        }

        return vendInvoiceInfo.RefTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnit</Name>
				<Source><![CDATA[
        public PriceUnit parmUnit(PriceUnit _unit = 0)
    {
        if (!prmisdefault(_unit))
        {
            this.setField(fieldnum(VendInvoiceInfo, Unit), _unit);
        }

        return vendInvoiceInfo.Unit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitPrice</Name>
				<Source><![CDATA[
        public PurchPrice parmUnitPrice(PurchPrice _unitPrice = 0)
    {
        if (!prmisdefault(_unitPrice))
        {
            this.setField(fieldnum(VendInvoiceInfo, UnitPrice), _unitPrice);
        }

        return vendInvoiceInfo.UnitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInternalValues</Name>
				<Source><![CDATA[
        public void resetInternalValues()
    {
        super();
        item = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
        protected void setInventDimId()
    {
        if (this.isMethodExecuted(funcname(), fieldnum(VendInvoiceInfo, InventDimId)))
        {
            return;
        }
        this.axInventDim().setInventDimId();

        if (this.axInventDim().isFieldSet(fieldnum(InventDim, InventDimId)))
        {
            this.parmInventDimId(this.axInventDim().parmInventDimId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemId</Name>
				<Source><![CDATA[
        protected void setItemId()
    {
        if (this.isMethodExecuted(funcname()))
        {
            return;
        }

        if (this.isFieldSet(fieldnum(VendInvoiceInfo, ItemId)))
        {
            this.currentRecord().initFromInventTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineDisc</Name>
				<Source><![CDATA[
        protected void setLineDisc()
    {
        if (this.isMethodExecuted(funcname(), fieldnum(VendInvoiceInfo, LineDisc)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLinePercent</Name>
				<Source><![CDATA[
        protected void setLinePercent()
    {
        if (this.isMethodExecuted(funcname(), fieldnum(VendInvoiceInfo, LinePercent)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMultiLnDisc</Name>
				<Source><![CDATA[
        protected void setMultiLnDisc()
    {
        if (this.isMethodExecuted(funcname(), fieldnum(VendInvoiceInfo, MultiLnDisc)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMultiLnPercent</Name>
				<Source><![CDATA[
        protected void setMultiLnPercent()
    {
        if (this.isMethodExecuted(funcname(), fieldnum(VendInvoiceInfo, MultiLnPercent)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setName</Name>
				<Source><![CDATA[
        protected void setName()
    {
        if (this.isMethodExecuted(funcname(), fieldnum(VendInvoiceInfo, Name)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderId</Name>
				<Source><![CDATA[
        protected void setOrderId()
    {
        if (this.isMethodExecuted(funcname(), fieldnum(VendInvoiceInfo, OrderId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuantity</Name>
				<Source><![CDATA[
        protected void setQuantity()
    {
        if (this.isMethodExecuted(funcname(), fieldnum(VendInvoiceInfo, Quantity)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefRecId</Name>
				<Source><![CDATA[
        protected void setRefRecId()
    {
        if (this.isMethodExecuted(funcname(), fieldnum(VendInvoiceInfo, RefRecId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefTableId</Name>
				<Source><![CDATA[
        protected void setRefTableId()
    {
        if (this.isMethodExecuted(funcname(), fieldnum(VendInvoiceInfo, RefTableId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableFields</Name>
				<Source><![CDATA[
        protected void setTableFields()
    {
        super();

        useMapPolicy = false;

        this.setOrderId();
        this.setItemId();
        this.setName();
        this.setInventDimId();
        this.setQuantity();
        this.setUnit();
        this.setUnitPrice();
        this.setLinePercent();
        this.setLineDisc();
        this.setMultiLnPercent();
        this.setMultiLnDisc();
        this.setRefTableId();
        this.setRefRecId();

        useMapPolicy = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUnit</Name>
				<Source><![CDATA[
        protected void setUnit()
    {
        if (this.isMethodExecuted(funcname(), fieldnum(VendInvoiceInfo, Unit)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUnitPrice</Name>
				<Source><![CDATA[
        protected void setUnitPrice()
    {
        if (this.isMethodExecuted(funcname(), fieldnum(VendInvoiceInfo, UnitPrice)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromInventDim</Name>
				<Source><![CDATA[
        public void updateFromInventDim()
    {
        ttsbegin;

        runState = AxBCRunState::Save;
        fieldModified = new Set(Types::Integer);

        this.initRecord();

        this.inputStatus(InternalExternal::Internal);

        this.setInventDimId();

        this.validateFields();

        this.validateWrite();

        this.write();

        vendInvoiceInfo.InventDimId = InventDim::inventDimIdBlank();

        this.resetInternalValues();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueMapDependingFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the incoming value mapping of fields in which the value mapping for a field depends on
    ///    another field, such as the item, state, and county fields.
    /// </summary>
    /// <remarks>
    ///    This method is used in the save method. Therefore, the incoming value mapping is performed before
    ///    the fields are defaulted.
    /// </remarks>
    protected void valueMapDependingFields()
    {
        InventDim inventDim;
        ItemId itemId;

        if (this.valueMappingInbound())
        {
            if (item)
            {
                [itemId,inventDim] = this.axPurchItemId(LedgerJournalTrans::findRecId(this.parmRefRecId(),false).parmAccount(),item);
                this.parmItemId(itemId);
                if (this.mapPolicy().xMLMapItemId() == XMLMapItemId::ExternalItemId)
                {
                    Enumerator enum = InventDim::dimProductDimFieldList().getEnumerator();

                    while (enum.moveNext())
                    {
                        FieldId inventDimFieldId = enum.current();

                        axInventDim.parmInventDimension(inventDimFieldId, inventDim.(inventDimFieldId));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfo</Name>
				<Source><![CDATA[
        public VendInvoiceInfo vendInvoiceInfo(VendInvoiceInfo _vendInvoiceInfo = vendInvoiceInfo)
    {
        if (!prmisdefault(_vendInvoiceInfo))
        {
            this.setCurrentRecordFromExternal(_vendInvoiceInfo);
        }

        return this.currentRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static AxVendInvoiceInfo construct()
    {
        return new AxVendInvoiceInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVendInvoiceInfo</Name>
				<Source><![CDATA[
        public static AxVendInvoiceInfo newVendInvoiceInfo(VendInvoiceInfo _vendInvoiceInfo)
    {
        AxVendInvoiceInfo axVendInvoiceInfo = AxVendInvoiceInfo::construct();

        axVendInvoiceInfo.vendInvoiceInfo(_vendInvoiceInfo);

        return axVendInvoiceInfo;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>