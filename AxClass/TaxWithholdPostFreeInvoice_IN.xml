<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdPostFreeInvoice_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class initialized to post withhold taxes for Free text invoice.Class extends from TaxWithholdPost_IN.
/// </summary>
class TaxWithholdPostFreeInvoice_IN extends TaxWithholdPost_IN
{
    RefRecId                    lineRecIdBeingCalculated;
    CustInvoiceCalcTax_Invoice  custInvoiceCalcTax;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInitializationClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the initialization class.
    /// </summary>
    /// <returns>
    /// The cust invoice calculation tax object.
    /// </returns>
    protected Object getInitializationClass()
    {
        return custInvoiceCalcTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets original heading rec id.
    /// </summary>
    /// <returns>
    /// The original heading rec id.
    /// </returns>
    protected RefRecId getOriginalHeadingRecId()
    {
        return origHeadingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets original heading table id.
    /// </summary>
    /// <returns>
    /// The original heading table id.
    /// </returns>
    protected RefTableId getOriginalHeadingTableId()
    {
        return origHeadingTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>TaxWithholdPostFreeInvoice_IN</c> class.
    /// </summary>
    /// <param name="_post">
    /// Yes if the instance will be post.
    /// </param>
    /// <param name="_initializationClass">
    /// The initialization class.
    /// </param>
    /// <param name="_tmpTaxWithholdWorkTrans">
    /// The temporary tax withhold work transaction.
    /// </param>
    public void new(
        NoYes                       _post,
        Object                      _initializationClass,
        TmpTaxWithholdWorkTrans_IN  _tmpTaxWithholdWorkTrans = null)
    {
        custInvoiceCalcTax = _initializationClass as CustInvoiceCalcTax_Invoice;
        if (custInvoiceCalcTax == null)
        {
            throw error("@SYS95118");
        }

        post                 = _post;
        taxWithholdWorkTrans = _tmpTaxWithholdWorkTrans;

        taxModuleType        = TaxModuleType::FreeTxtInvoice;

        headingTableId       = custInvoiceCalcTax.tableId();
        headingRecId         = custInvoiceCalcTax.recID();
        origHeadingTableId   = custInvoiceCalcTax.custInvoiceTableTableID();
        origHeadingRecId     = custInvoiceCalcTax.custInvoiceTableRecID();

        if (!headingTableId || !headingRecId)
        {
            throw error("@SYS18447");
        }
        else
        {
            taxDate             = custInvoiceCalcTax.invoiceDate();
            sourceCurrencyCode  = custInvoiceCalcTax.currencyCode();
        }

        triangulation = custInvoiceCalcTax.triangulation(taxDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToTaxWithHoldTrans</Name>
				<Source><![CDATA[
    protected void postToTaxWithHoldTrans(LedgerPostingController _ledgerPostingController, TaxWithholdTrans_IN _taxWithholdTrans, CurrencyExchangeHelper _exchangeRateHelper, container _taxWithholdData)
    {
        TransTaxInformation         transTaxInformation;
        TaxWithholdTable            taxWithholdTable;
        CustInvoiceTrans            custInvoiceTrans;
        CustTable                   custTable;

        taxWithholdTable = TaxWithholdTable::find(_taxWithholdTrans.TaxWithholdCode);

        custInvoiceTrans                        = CustInvoiceTrans::findRecId(_taxWithholdTrans.SourceRecId);

        _taxWithholdTrans.CustInvoiceTrans      = custInvoiceTrans.RecId;
        _taxWithholdTrans.CustAccount           = custInvoiceTrans.custTable_InvoiceAccount().AccountNum;
        _taxWithholdTrans.RecoverableAccount    = custInvoiceTrans.custInvoiceTrans_IN().TDSGroup_IN ? true : false;
        custTable                               = custTable::find(_taxWithholdTrans.CustAccount);
        _taxWithholdTrans.Nameofdeductee        = DirPartyTable::findRec(custTable.Party).Name;
        CustInvoiceLine CustInvoiceLine         = CustInvoiceLine::findBySourceDocumentLine(custInvoiceTrans.SourceDocumentLine);
        transTaxInformation                     = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(CustInvoiceLine);
        _taxWithholdTrans.TaxWithholdRegNumber  = transTaxInformation.TaxWithholdTAN;
        _taxWithholdTrans.Invoice               = custInvoiceTrans.InvoiceId;
        _taxWithholdTrans.LineNum               = custInvoiceTrans.LineNum;

        // For free text invoice, when parameter Tax liability is enabled, post interim account to tax withhold trans;
        if (TaxWithholdGroupHeading::find(_taxWithholdTrans.TaxWithholdGroup).TaxLiabilityOnPayment_IN)
        {
            _taxWithholdTrans.IsTaxInterim = NoYes::Yes;
        }

        super(_ledgerPostingController, _taxWithholdTrans, _exchangeRateHelper, _taxWithholdData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    public recId sourceRecId()
    {
        return sourceRecord.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    public tableId sourceTableId()
    {
        return sourceRecord.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferSubLedgerToGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the transfer sub ledger can be convert to general ledger.
    /// </summary>
    /// <returns>
    /// Returns true if the transfer sub ledger can be convert to general ledger.
    /// </returns>
    public boolean transferSubLedgerToGeneralLedger()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates and posts to the <c>TaxTrans</c> table and tax amounts to the ledger.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller to use for ledger posting.
    /// </param>
    /// <returns>
    ///    The total tax amount.
    /// </returns>
    public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxAmount       taxWithholdAmount;
        boolean         moreLines;

        if (!this.existsTax())
        {
            return 0;
        }

        this.initLedgerPosting(_ledgerPostingController);

        ttsbegin;

        this.validateWithholdTax();

        custInvoiceCalcTax.initCursor();
        moreLines   = true;
        while (moreLines)
        {
            sourceRecord= custInvoiceCalcTax.nextLine();
            if (sourceRecord)
            {
                this.moveTaxLineToNewOwner(custInvoiceCalcTax.transTableId(),
                                   custInvoiceCalcTax.transRecId());
            }
            else
                moreLines   = false;
        }
        ttscommit;

        if (post)
        {
            this.saveAndPostWHT(_ledgerPostingController);

            taxWithholdAmount = TaxWithholdPost_IN::taxTotalVoucherDate(voucher, taxDate);
        }
        else
            taxWithholdAmount = this.totalTaxWithholdAmount();

        return taxWithholdAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    public boolean useSubLedgerJournalLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    public boolean useTaxUncommitted()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>