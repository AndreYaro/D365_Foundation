<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLocationBuild</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLocationBuild</c> class is used to create locations in a specific warehouse with a specific location profile.
/// </summary>
class WhsLocationBuild
{
    WHSTmpLocationBuild         tmpLocationBuild;
    WHSLocationBuildParameters  locationBuildParams;

    private RandomGenerate      random = new RandomGenerate();
    
    readonly int                WMSLocationIdFieldLength = new DictField(tableNum(WMSLocation), fieldNum(WMSLocation, wmsLocationId)).stringLen();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildTempTable</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates temporary records that keep location format info.
	/// </summary>
	/// <param name="_profileId">
	/// Id of the location profile record that holds location format id info.
	/// </param>
    public void buildTempTable(WHSLocProfileId _profileId)
    {
        // Clean out data from the InMemory temp table
        tmpLocationBuild = null;
        
        WHSLocationProfile locProfile = WHSLocationProfile::find(_profileId);

        WHSLocationFormatLine locFormatLine;
        while select locFormatLine
            where locFormatLine.LocFormatId == locProfile.LocFormatId
        {
            tmpLocationBuild.LineNum                = locFormatLine.LineNum;
            tmpLocationBuild.SegmentLength          = locFormatLine.SegmentLength;
            tmpLocationBuild.SegmentSeparator       = locFormatLine.SegmentSeparator;
            tmpLocationBuild.SegmentDescription     = locFormatLine.SegmentDescription;
            tmpLocationBuild.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertWarehouseIsWHSEnabled</Name>
				<Source><![CDATA[
    private void assertWarehouseIsWHSEnabled()
    {
        if (InventLocation::find(locationBuildParams.InventLocationId).WHSEnabled == NoYes::No)
        {
            throw error(strFmt("@WAX4780", locationBuildParams.InventLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateNewLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates new locations in the warehouse.
    /// </summary>
    public void generateNewLocations()
    {
        this.assertWarehouseIsWHSEnabled();

        select firstonly tmpLocationBuild;

        this.recurseSegments(tmpLocationBuild, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpLocationBuild</Name>
				<Source><![CDATA[
    public WHSTmpLocationBuild parmTmpLocationBuild(WHSTmpLocationBuild _tmpLocationBuild = tmpLocationBuild)
    {
        tmpLocationBuild = _tmpLocationBuild;

        return tmpLocationBuild;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocationBuildParams</Name>
				<Source><![CDATA[
    public WHSLocationBuildParameters parmLocationBuildParams(WHSLocationBuildParameters _locationBuildParams = locationBuildParams)
    {
        locationBuildParams = _locationBuildParams;

        return locationBuildParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLocationBuildParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the provided <c>WMSLocation</c> record with values provided through the <c>WHSLocationBuildParameters</c>.
    /// </summary>
    /// <param name = "_location">Warehouse location record to initialize.</param>
    /// <returns>The initialized warehouse location record.</returns>
    protected WMSLocation initFromLocationBuildParams(WMSLocation _location)
    {
        _location.inventLocationId = locationBuildParams.InventLocationId;
        _location.ZoneId = locationBuildParams.WarehouseZoneId;
        _location.AdditionalZone1 = locationBuildParams.WarehouseAdditionalZone1;
        _location.AdditionalZone2 = locationBuildParams.WarehouseAdditionalZone2;
        _location.AdditionalZone3 = locationBuildParams.WarehouseAdditionalZone3;
        _location.LocProfileId = locationBuildParams.LocationProfileId;

        return _location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStaticText</Name>
				<Source><![CDATA[
    private WMSLocationId addStaticText(WMSLocationId _wmsLocationId, WHSStaticText _staticText, WHSSegmentSeparator _separator)
    {
        if (strLen(_wmsLocationId + _staticText) > WMSLocationIdFieldLength)
        {
            warning(strFmt("@WAX329", _wmsLocationId + _staticText));
        }

        return _wmsLocationId + _staticText + _separator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSegment</Name>
				<Source><![CDATA[
    private WMSLocationId addSegment(WMSLocationId _wmsLocationId, Counter _counter, int _segmentLength, WHSSegmentSeparator _separator)
    {
        WMSLocationId wmsLocationId = _wmsLocationId;

        int chars     = strLen(int2str(_counter));
        int zeros     = _segmentLength - chars;

        for (Counter innercount = 1; innercount <= zeros; innercount++)
        {
            wmsLocationId += '0';
        }

        return wmsLocationId + int2str(_counter) + _separator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recurseSegments</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates location by recursing on the segments of the temporary location build data.
	/// </summary>
	/// <param name="_tmpLocationBuild">
	/// Temporary record that keeps location segment data.
	/// </param>
	/// <param name="_locId">
	/// Location id that is built recursively by static text and seperator defined on each segment.
	/// </param>
	/// <remarks>
	/// Skips already created locations.
	/// </remarks>
    public void recurseSegments(WHSTmpLocationBuild _tmpLocationBuild, WMSLocationId _locId)
    {
        LineNum             oldLineNum      = _tmpLocationBuild.LineNum;
        int                 fromNumber      = _tmpLocationBuild.FromNumber;
        int                 toNumber        = _tmpLocationBuild.ToNumber;
        int                 segmentLength   = _tmpLocationBuild.SegmentLength;
        WHSStaticText       staticText      = _tmpLocationBuild.StaticText;
        WHSSegmentSeparator separator       = _tmpLocationBuild.SegmentSeparator;

        select firstonly tmpLocationBuild
            where tmpLocationBuild.LineNum > oldLineNum;

        if (tmpLocationBuild)
        {
            if (staticText)
            {
                WMSLocationId wmsLocationId = this.addStaticText(_locId, staticText, separator);

                this.recurseSegments(tmpLocationBuild, wmsLocationId);
            }
            else
            {
                WHSTmpLocationBuild oldTmpLocationBuild;
                buf2Buf(tmpLocationBuild, oldTmpLocationBuild);
                for (Counter counter = fromNumber; counter <= toNumber; counter++)
                {
                    WMSLocationId wmsLocationId = this.addSegment(_locId, counter, segmentLength, separator);

                    this.recurseSegments(oldTmpLocationBuild, wmsLocationId);
                }
            }
        }
        else
        {
            WHSGenCheckDigit genCheckDigit = WHSLocationProfile::find(locationBuildParams.LocationProfileId).GenCheckDigit;

            if (staticText)
            {
                WMSLocationId wmsLocationId = this.addStaticText(_locId, staticText, separator);

                this.createNewLocationIfNotExists(wmsLocationId, genCheckDigit);
            }
            else
            {
                for (Counter counter = fromNumber; counter <= toNumber; counter++)
                {
                    WMSLocationId wmsLocationId = this.addSegment(_locId, counter, segmentLength, separator);

                    this.createNewLocationIfNotExists(wmsLocationId, genCheckDigit, false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewLocationIfNotExists</Name>
				<Source><![CDATA[
    protected void createNewLocationIfNotExists(WMSLocationId _wmsLocationId, boolean _generateCheckDigit, boolean _useSystemCheckDigitGenerator = true)
    {
        if (WMSLocation::exist(_wmsLocationId, locationBuildParams.InventLocationId))
        {
            info(strFmt("@WAX353", _wmsLocationId));
        }
        else
        {
            this.createNewLocation(_wmsLocationId, _generateCheckDigit, _useSystemCheckDigitGenerator);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewLocation</Name>
				<Source><![CDATA[
    protected void createNewLocation(WMSLocationId _wmsLocationId, boolean _generateCheckDigit, boolean _useSystemCheckDigitGenerator = true)
    {
        WMSLocation wmsLocation;
                    
        wmsLocation.initValue();
        wmsLocation.wmsLocationId    = _wmsLocationId;
        wmsLocation.InputLocation    = _wmsLocationId;
        wmsLocation.AisleId          = '--';

        this.initFromLocationBuildParams(wmsLocation);

        if (_generateCheckDigit)
        {
            if (_useSystemCheckDigitGenerator)
            {
                wmsLocation.whsGenerateCheckText();
            }
            else
            {
                wmsLocation.CheckText = int2str(random.nextInt() mod 999);                
            }
        }

        wmsLocation.insert();

        info(strFmt("@WAX354", _wmsLocationId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>