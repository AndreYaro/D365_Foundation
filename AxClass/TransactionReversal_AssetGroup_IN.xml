<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransactionReversal_AssetGroup_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TransactionReversal_AssetGroup_IN</c> class extends the <c>TransactionReversal_Asset</c> class and
///    contains the logic to reverse asset transactions, both value model and depreciation book, together
///    with the associated ledger transactions for indian.
/// </summary>
class TransactionReversal_AssetGroup_IN extends TransactionReversal_Asset
{
    AssetGroupTrans_IN          assetGroupTransLoc;
    AssetGroupTrans_IN          assetGroupTransOrig;
    AssetGroupInformation_IN    assetGroupInformation;
    AssetGroupInformation_IN    assetGroupInformationOrig;
    LineNum                     reversalJournalLineNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canReverse_Acq_AcqAdj_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if an Acquisition or Acquisition Adjustment transaction is able to be reversed.
    /// </summary>
    /// <param name="_assetGroupTransForOrig">
    /// An AssetGroupTrans_IN buffer containing the original transaction to be reversed.
    /// </param>
    /// <param name="_assetGroupTransMain">
    /// An AssetGroupTrans_IN buffer containing the selected transaction to reverse.
    /// </param>
    /// <param name="_assetRecId">
    /// Contains the RefRecId value of the original transaction.
    /// </param>
    /// <param name="_assetTransDate">
    /// Contains the AssetTransDate value of the original transaction.
    /// </param>
    /// <param name="_revoke">
    /// The attribute that determines to whether to validate a reversal or a revoke.
    /// </param>
    /// <returns>
    /// A container of an ErrorTolerance value (Error, Warning, or Accept) and one string:
    /// Accept if the transaction is able to be reversed or revoked, Warning if the transaction is able to be reverserd or
    /// revoked pending user approval, or Error if the transaction cannot be reversed.
    /// A string containing the error or warning message to display to the user.
    /// </returns>
    private container canReverse_Acq_AcqAdj_IN(AssetGroupTrans_IN   _assetGroupTransForOrig,
                                              AssetGroupTrans_IN   _assetGroupTransMain,
                                              RefRecId             _assetRecId,
                                              AssetTransDate       _assetTransDate,
                                              boolean              _revoke)
    {
        ErrorTolerance reversalTolerance = ErrorTolerance::Accept;
        str errorMsg          = '';

        AssetGroupTrans_IN assetGroupTransAll;
        AssetGroupInformation_IN assetGroupInformationForOrig;
        AssetGroupInformation_IN assetGroupInformationTransAll;
        TransactionReversalTrans reversalTrans;
        AssetBook assetBook;
        AssetGroupId assetGroup;

        assetGroupInformationForOrig  = AssetGroupInformation_IN::find(_assetGroupTransForOrig.AssetGroupInformation);
        if ((assetGroupInformationForOrig.TransType == AssetTransType::Acquisition) &&
            (_assetGroupTransForOrig.reversed() == false))
        {
            select RecId, AssetId, AssetGroupInformation, BookId  from assetGroupTransAll
                join TransType from assetGroupInformationTransAll
                    where assetGroupTransAll.AssetId                        == _assetGroupTransMain.AssetId
                        && assetGroupTransAll.BookId                         == _assetGroupTransMain.BookId
                        && assetGroupTransAll.RecId                         != _assetRecId
                        && assetGroupInformationTransAll.RecId              == assetGroupTransAll.AssetGroupInformation
                        && assetGroupInformationTransAll.TransType          == AssetTransType::Acquisition
            notexists join reversalTrans
                where reversalTrans.RefRecId  == assetGroupTransAll.RecId
                    && reversalTrans.RefTableId == assetGroupTransAll.TableId
                    && (reversalTrans.Reversed == true);

            if (assetGroupTransAll.RecId == 0)
            {
                assetGroupTransAll.clear();
                reversalTrans.clear();
                select firstonly RecId, AssetId, BookId from assetGroupTransAll

                        where assetGroupTransAll.AssetId    == _assetGroupTransMain.AssetId
                            && assetGroupTransAll.BookId     == _assetGroupTransMain.BookId
                            && assetGroupTransAll.RecId      != _assetRecId
                    notexists join reversalTrans
                        where reversalTrans.RefRecId  == assetGroupTransAll.RecId
                            && reversalTrans.RefTableId == assetGroupTransAll.TableId
                            && (reversalTrans.Reversed == true);

                if (assetGroupTransAll.RecId)

                {
                    errorMsg = strfmt("@SYS115982", _assetGroupTransForOrig.AssetId, _assetGroupTransMain.BookId);
                    reversalTolerance = ErrorTolerance::Error;
                }
                else
                {
                    // Finding the AssetBook on the basis of BookId and AssetId of AssetGroupTrans_IN.
                    assetBook = AssetBook::find(_assetGroupTransMain.AssetId, _assetGroupTransMain.BookId);

                    // Checking whether the AssetGroupDepreciation_IN is marked.
                    if ( assetBook.AssetGroupDepreciation_IN == NoYes::Yes)
                    {
                        assetGroup = assetBook.AssetGroup;

                        // Looping through AssetpBook to find in the AssetGroupDepreciation if for any one Aquistion the depreciation transaction
                        // is posted or not, If yes then will trow up the msg "you must reverse the other transaction before reversing the Aquistion.
                        while select assetBook
                                where assetBook.AssetGroup == assetGroup
                        {
                            select firstonly RecId, AssetId, BookId, AssetGroupInformation from assetGroupTransAll
                                    where assetGroupTransAll.AssetId              == assetBook.AssetId
                                        && assetGroupTransAll.BookId               == assetBook.BookId
                                        && assetGroupTransAll.RecId                != _assetRecId
                                        join TransType, RecId from assetGroupInformationTransAll
                                            where assetGroupInformationTransAll.RecId     == assetGroupTransAll.AssetGroupInformation
                                                && assetGroupInformationTransAll.TransType != AssetTransType::Acquisition
                                        notexists join reversalTrans
                                            where reversalTrans.RefRecId  == assetGroupTransAll.RecId
                                                 && reversalTrans.RefTableId == assetGroupTransAll.TableId
                                                && (reversalTrans.Reversed == true);

                            if (assetGroupTransAll.RecId)
                            {
                                errorMsg = strfmt("@SYS115982", _assetGroupTransForOrig.AssetId, _assetGroupTransForOrig.BookId);
                                reversalTolerance = ErrorTolerance::Error;
                            }
                        }
                    }
                }
            }
        }

        if ((reversalTolerance != ErrorTolerance::Error) && (assetGroupInformationForOrig.RevaluationDone == true))
        {
            if (_revoke)
            {
                errorMsg = strfmt("@SYS115981", _assetGroupTransForOrig.AssetId, _assetGroupTransMain.BookId);
                reversalTolerance = ErrorTolerance::Error;
            }
            else
            {
                errorMsg = strfmt("@SYS115979", _assetGroupTransForOrig.AssetId, _assetGroupTransMain.BookId);
                reversalTolerance = ErrorTolerance::Error;
            }
        }

        return [reversalTolerance, errorMsg];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReverse_AnyTransType_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a transaction is able to be reversed.
    /// </summary>
    /// <param name="_assetGroupTransForOrig">
    /// An AssetGroupTrans_IN buffer containing the original transaction to be reversed.
    /// </param>
    /// <param name="_assetGroupTransMain">
    /// An AssetGroupTrans_IN buffer containing the selected transaction to reverse.
    /// </param>
    /// <param name="_assetRecId">
    /// Contains the RefRecId value of the original transaction.
    /// </param>
    /// <param name="_assetTransDate">
    /// Contains the AssetTransDate value of the original transaction.
    /// </param>
    /// <returns>
    /// A container of an ErrorTolerance value (Error, Warning, or Accept) and one string:
    /// Accept if the transaction is able to be reversed or revoked, Warning if the transaction is able to be reverserd or
    /// revoked pending user approval, or Error if the transaction cannot be reversed.
    /// A string containing the error or warning message to display to the user.
    /// </returns>
    private container canReverse_AnyTransType_IN(AssetGroupTrans_IN _assetGroupTransForOrig,
                                                AssetGroupTrans_IN _assetGroupTransMain,
                                                RefRecId _assetRecId,
                                                AssetTransDate _assetTransDate)
    {
        ErrorTolerance reversalTolerance = ErrorTolerance::Accept;
        str errorMsg = '';

        AssetGroupTrans_IN assetGroupTransAll;
        AssetGroupInformation_IN assetGroupInformationForOrig;
        AssetGroupInformation_IN assetGroupInformationTransAll;
        AssetBook assetBook;
        AssetTransDate assetTransDateDerogatoryTrans;
        TransactionReversalTrans reversalTrans;

        assetGroupInformationForOrig  = AssetGroupInformation_IN::find(_assetGroupTransForOrig.AssetGroupInformation);

        select RecId, AssetId, AssetGroupInformation, BookId from assetGroupTransAll
            Join TransType from assetGroupInformationTransAll
                where assetGroupTransAll.AssetId        == _assetGroupTransMain.AssetId
                    && assetGroupTransAll.BookId         == _assetGroupTransMain.BookId
                    && assetGroupTransAll.RecId          != _assetRecId
                    && assetGroupInformationTransAll.RecId == assetGroupTransAll.AssetGroupInformation
                    && assetGroupInformationTransAll.TransDate      >= _assetTransDate
                    && ((assetGroupInformationTransAll.TransType    == AssetTransType::DisposalSale) || (assetGroupInformationTransAll.TransType == AssetTransType::DisposalScrap))

            notexists join reversalTrans
                where reversalTrans.RefRecId  == assetGroupTransAll.RecId
                    && reversalTrans.RefTableId == assetGroupTransAll.TableId
                    && (reversalTrans.Reversed == true);

        if (assetGroupTransAll.RecId != 0)
        {
            select Status from assetBook
                where assetBook.AssetId == _assetGroupTransMain.AssetId
                   && assetBook.BookId  == _assetGroupTransMain.BookId;

            if (assetBook.Status == AssetStatus::Open)
            {
                errorMsg = this.formatWarningMessages(errorMsg, strfmt("@SYS115984", assetGroupInformationTransAll.TransType, _assetGroupTransForOrig.AssetId, _assetGroupTransMain.BookId));
                reversalTolerance = ErrorTolerance::Warning;
            }
        }

        if (assetGroupInformationForOrig.TransType == AssetTransType::DerogatoryIncrease ||
            assetGroupInformationForOrig.TransType == AssetTransType::DerogatoryDecrease)
        {
            assetTransDateDerogatoryTrans = _assetTransDate + 1;
        }
        else
        {
            assetTransDateDerogatoryTrans = _assetTransDate;
        }

        select RecId, AssetId,AssetGroupInformation, BookId from assetGroupTransAll
            Join TransType,AssetGroup from assetGroupInformationTransAll
                where assetGroupTransAll.AssetId                   == _assetGroupTransMain.AssetId
                    && assetGroupTransAll.BookId                    == _assetGroupTransMain.BookId
                    && assetGroupTransAll.RecId                     != _assetRecId
                    && assetGroupInformationTransAll.RecId          == assetGroupTransAll.AssetGroupInformation
                    && assetGroupInformationTransAll.TransDate      >= assetTransDateDerogatoryTrans
                    && ((assetGroupInformationTransAll.TransType    == AssetTransType::Depreciation)
                    || (assetGroupInformationTransAll.TransType     == AssetTransType::BonusDepreciation)
                    || (assetGroupInformationTransAll.TransType     == AssetTransType::ExtraordinaryDepreciation))

        notexists join reversalTrans
            where reversalTrans.RefRecId  == assetGroupTransAll.RecId
                && reversalTrans.RefTableId == assetGroupTransAll.TableId
                && (reversalTrans.Reversed == true);

        if (assetGroupTransAll.RecId != 0)
        {
            errorMsg = this.formatWarningMessages(errorMsg, strfmt("@SYS115985", assetGroupInformationTransAll.TransType, _assetGroupTransForOrig.AssetId, _assetGroupTransMain.BookId));
            reversalTolerance = ErrorTolerance::Warning;
        }

        return [reversalTolerance, errorMsg];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReverse_CapReserve_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a Capital Reserve transaction is able to be reversed.
    /// </summary>
    /// <param name="_assetGroupTransForOrig">
    /// An AssetGroupTrans_IN buffer containing the original transaction to be reversed.
    /// </param>
    /// <param name="_assetGroupTransMain">
    /// An AssetGroupTrans_IN buffer containing the selected transaction to reverse.
    /// </param>
    /// <param name="_assetRecId">
    /// Contains the RefRecId value of the original transaction.
    /// </param>
    /// <param name="_assetTransDate">
    /// Contains the AssetTransDate value of the original transaction.
    /// </param>
    /// <returns>
    /// A container of an ErrorTolerance value (Error, Warning, or Accept) and one string:
    /// Accept if the transaction is able to be reversed or revoked, Warning if the transaction is able to be reverserd or
    /// revoked pending user approval, or Error if the transaction cannot be reversed.
    /// A string containing the error or warning message to display to the user.S
    /// </returns>
    private container canReverse_CapReserve_IN(AssetGroupTrans_IN _assetGroupTransForOrig,
                                              AssetGroupTrans_IN _assetGroupTransMain,
                                              RefRecId _assetRecId,
                                              AssetTransDate _assetTransDate)
    {
        ErrorTolerance reversalTolerance = ErrorTolerance::Accept;
        str errorMsg = '';

        AssetGroupTrans_IN assetGroupTransAll;
        AssetGroupInformation_IN assetGroupInformationForOrig;
        AssetGroupInformation_IN assetGroupInformationTransAll;
        TransactionReversalTrans reversalTrans;

        assetGroupInformationForOrig  = AssetGroupInformation_IN::find(_assetGroupTransForOrig.AssetGroupInformation);
        select RecId, AssetId, BookId, AssetGroupInformation from assetGroupTransAll
            join TransType from assetGroupInformationTransAll
                where assetGroupTransAll.AssetId    == _assetGroupTransMain.AssetId
                    && assetGroupTransAll.BookId     == _assetGroupTransMain.BookId
                    && assetGroupTransAll.RecId      != _assetRecId
                    && assetGroupInformationTransAll.RecId == assetGroupTransAll.AssetGroupInformation
                    && assetGroupInformationTransAll.TransDate  >= _assetTransDate
                    && assetGroupInformationTransAll.TransType  == AssetTransType::CapitalReserve

        notexists join
            reversalTrans
        where reversalTrans.RefRecId  == assetGroupTransAll.RecId
            && reversalTrans.RefTableId == assetGroupTransAll.TableId
            && (reversalTrans.Reversed == true);

        if (assetGroupTransAll.RecId != 0)
        {
            errorMsg = this.formatWarningMessages(errorMsg, strfmt("@SYS115980", _assetGroupTransForOrig.AssetId, _assetGroupTransMain.BookId));
            reversalTolerance = ErrorTolerance::Warning;
        }

        return [reversalTolerance, errorMsg];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReverse_Disposal_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a Disposal transaction is able to be reversed.
    /// </summary>
    /// <param name="_assetGroupTransForOrig">
    /// An AssetGroupTrans_IN buffer containing the original transaction to be reversed.
    /// </param>
    /// <param name="_assetGroupTransMain">
    /// An AssetGroupTrans_IN buffer containing the selected transaction to reverse.
    /// </param>
    /// <param name="_assetTransDate">
    /// Contains the AssetTransDate value of the original transaction.
    /// </param>
    /// <returns>
    /// A container of an ErrorTolerance value (Error, Warning, or Accept) and one string:
    /// Accept if the transaction is able to be reversed or revoked, Warning if the transaction is able to be reverserd or
    /// revoked pending user approval, or Error if the transaction cannot be reversed.
    /// A string containing the error or warning message to display to the user.
    /// </returns>
    private container canReverse_Disposal_IN(AssetGroupTrans_IN _assetGroupTransForOrig,
                                            AssetGroupTrans_IN _assetGroupTransMain,
                                            AssetTransDate _assetTransDate)
    {
        ErrorTolerance reversalTolerance = ErrorTolerance::Accept;
        str errorMsg = '';

        AssetGroupTrans_IN assetGroupTransAll;
        AssetGroupInformation_IN assetGroupInformationForOrig;
        AssetGroupInformation_IN assetGroupInformationTransAll;

        assetGroupInformationForOrig  = AssetGroupInformation_IN::find(_assetGroupTransForOrig.AssetGroupInformation);
        select RecId, AssetId, BookId, AssetGroupInformation  from assetGroupTransAll
            join TransType from assetGroupInformationTransAll
                where assetGroupTransAll.AssetId    == _assetGroupTransMain.AssetId
                   && assetGroupTransAll.BookId     == _assetGroupTransMain.BookId
                   && assetGroupTransAll.Voucher    != _assetGroupTransMain.Voucher
                   && assetGroupInformationTransAll.RecId == assetGroupTransAll.AssetGroupInformation
                   && assetGroupInformationTransAll.TransDate  >= _assetTransDate
                   && assetGroupInformationTransAll.TransType  == AssetTransType::CapitalReserve;

        if (assetGroupTransAll.RecId != 0)
        {
            errorMsg = this.formatWarningMessages(errorMsg, strfmt("@SYS115980", _assetGroupTransForOrig.AssetId, _assetGroupTransMain.BookId));
            reversalTolerance = ErrorTolerance::Warning;
        }

        return [reversalTolerance, errorMsg];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canTranBeReversed_ValueModels</Name>
				<Source><![CDATA[
    public container canTranBeReversed_ValueModels(Voucher           _voucher,
                                                   AssetTransDate    _transDate,
                                                   boolean           _revoke)
    {
        ErrorTolerance           reversalTolerance          = ErrorTolerance::Accept;
        ErrorTolerance           reversalToleranceAll       = ErrorTolerance::Accept;
        boolean                  origTranFound              = false;
        boolean                  nonReverseConditionFound   = false;
        str                      errorMsg                   = '';
        str                      errorMsgAll                = '';
        TraceNum                 traceNum                   = '';
        RefRecId                 assetRecId                 = 0;
        AssetTransDate           assetTransDate             = dateNull();

        AssetGroupTrans_IN       assetGroupTransMain;
        AssetGroupTrans_IN       assetGroupTransForOrig;
        AssetGroupTrans_IN       assetGroupTransForDate;
        AssetGroupInformation_IN  assetGroupInformationTransMain;
        AssetGroupInformation_IN  assetGroupInformationTransForOrig;
        AssetGroupInformation_IN  assetGroupInformationTransForDate;
        TransactionReversalTrans transRevTransForOrig;

        RefTableId               assetTableId               = tablenum('AssetGroupTrans_IN');

        while select AssetId, AssetGroupInformation, BookId, RecId, Voucher from assetGroupTransMain
            join RecId, AssetGroup, TransDate from assetGroupInformationTransMain
                where (assetGroupTransMain.Voucher   == _voucher)
                    && assetGroupInformationTransMain.RecId == assetGroupTransMain.AssetGroupInformation
                    && (assetGroupInformationTransMain.TransDate == _transDate)
                    && (assetGroupInformationTransMain.TransType == AssetTransType::Acquisition
                    ||  assetGroupInformationTransMain.TransType == AssetTransType::AcquisitionAdj
                    ||  assetGroupInformationTransMain.TransType == AssetTransType::BonusDepreciation
                    ||  assetGroupInformationTransMain.TransType == AssetTransType::CapitalReserve
                    ||  assetGroupInformationTransMain.TransType == AssetTransType::CapitalReserveTransfer
                    ||  assetGroupInformationTransMain.TransType == AssetTransType::Depreciation
                    ||  assetGroupInformationTransMain.TransType == AssetTransType::DepreciationAdj
                    ||  assetGroupInformationTransMain.TransType == AssetTransType::DisposalSale
                    ||  assetGroupInformationTransMain.TransType == AssetTransType::DisposalScrap
                    ||  assetGroupInformationTransMain.TransType == AssetTransType::ExtraordinaryDepreciation
                    ||  assetGroupInformationTransMain.TransType == AssetTransType::Revaluation
                    ||  assetGroupInformationTransMain.TransType == AssetTransType::DerogatoryDecrease
                    ||  assetGroupInformationTransMain.TransType == AssetTransType::DerogatoryIncrease
                    ||  assetGroupInformationTransMain.TransType == AssetTransType::WriteDownAdj
                    ||  assetGroupInformationTransMain.TransType == AssetTransType::WriteUpAdj)
        {
            select TraceNum, Original, RefRecId from transRevTransForOrig
                where transRevTransForOrig.RefRecId     == assetGroupTransMain.RecId
                    && transRevTransForOrig.RefTableId   == assetTableId;

            traceNum = transRevTransForOrig.TraceNum;
            if (!(traceNum == ''))
            {
                if (transRevTransForOrig.Original == NoYes::No)
                {
                    select RefRecId from transRevTransForOrig
                        join assetGroupTransForOrig
                            where transRevTransForOrig.RefRecId     == assetGroupTransForOrig.RecId
                                && transRevTransForOrig.TraceNum     == traceNum
                                && transRevTransForOrig.Original     == NoYes::Yes
                                && transRevTransForOrig.RefTableId   == assetTableId
                                && assetGroupTransForOrig.BookId     == assetGroupTransMain.BookId;

                    if (transRevTransForOrig.RefRecId == 0)
                    {
                        nonReverseConditionFound = true;
                        break;
                    }
                    else
                    {
                        assetRecId = transRevTransForOrig.RefRecId;
                        origTranFound = true;
                    }
                }
                else
                {
                    assetRecId = transRevTransForOrig.RefRecId;
                    origTranFound = true;
                }
            }
            else
            {
                assetRecId = assetGroupTransMain.RecId;
                assetTransDate = assetGroupInformationTransMain.TransDate;
                origTranFound = true;
            }

            if (assetTransDate == dateNull())
            {
                select  Recid, AssetGroupInformation from assetGroupTransForDate
                    join Recid, TransDate from assetGroupInformationTransForDate
                        where assetGroupTransForDate.RecId == assetRecId
                            && assetGroupInformationTransMain.RecId == assetGroupTransMain.AssetGroupInformation;
                if (assetGroupTransForDate)
                {
                    assetTransDate = assetGroupInformationTransMain.TransDate;
                }
            }

            if (!nonReverseConditionFound)
            {
                select AssetId,AssetGroupInformation, RecId, RevaluedTransID from assetGroupTransForOrig
                    join RecId, TransType, AssetGroup, RevaluationDone  from assetGroupInformationTransForOrig
                        where assetGroupTransForOrig.RecId == assetRecId
                           && assetGroupInformationTransForOrig.RecId   == assetGroupTransForOrig.AssetGroupInformation;

                switch (assetGroupInformationTransForOrig.TransType)
                {
                    case AssetTransType::Acquisition:
                    case AssetTransType::AcquisitionAdj:

                        [reversalTolerance, errorMsg] = this.canReverse_Acq_AcqAdj_IN(assetGroupTransForOrig, assetGroupTransMain, assetRecId, assetTransDate, _revoke);
                        break;

                    case AssetTransType::DisposalSale:
                    case AssetTransType::DisposalScrap:

                        [reversalTolerance, errorMsg] = this.canReverse_Disposal_IN(assetGroupTransForOrig, assetGroupTransMain, assetTransDate);
                        break;

                    case AssetTransType::CapitalReserve:

                        [reversalTolerance, errorMsg] = this.canReverse_CapReserve_IN(assetGroupTransForOrig, assetGroupTransMain, assetRecId, assetTransDate);
                        break;
                }

                if (reversalTolerance != ErrorTolerance::Error)
                {
                    [reversalToleranceAll, errorMsgAll] = this.canReverse_AnyTransType_IN(assetGroupTransForOrig, assetGroupTransMain, assetRecId, assetTransDate);

                    if (reversalToleranceAll == ErrorTolerance::Warning)
                    {
                        errorMsg = this.formatWarningMessages(errorMsg, errorMsgAll);
                        reversalTolerance = reversalToleranceAll;
                    }
                    else if (reversalToleranceAll == ErrorTolerance::Error)
                    {
                        errorMsg = errorMsgAll;
                        reversalTolerance = reversalToleranceAll;
                    }
                }
                else
                {
                    break;
                }
            }
        }

        return [reversalTolerance, origTranFound, errorMsg];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllAssetTransactions</Name>
				<Source><![CDATA[
    public void createAllAssetTransactions(Voucher _voucher, TransDate _transDate)
    {
        AssetTrans          assetTransUpdate;

        AssetGroupTrans_IN  assetGroupTransUpdate;
        AssetGroupInformation_IN    assetGroupInformationUpdate;
        TransactionReversal_Asset   transactionReversal_Asset;

        reversalVoucher     = this.parmReversalVoucher();
        reversalDate        = this.parmReversalDate();
        reversalTraceNum    = this.parmReversalTraceNum();
        reasonRefRecId      = this.parmReasonRefRecId();

        transactionReversal_Asset = TransactionReversal_Asset::construct();

        while select * from assetGroupTransUpdate
            join RecId, TransDate from assetGroupInformationUpdate
                where assetGroupTransUpdate.Voucher         == _voucher
                   && assetGroupInformationUpdate.RecId     == assetGroupTransUpdate.AssetGroupInformation
                   && assetGroupInformationUpdate.TransDate == _transdate
        {
            this.createAssetTrans_IN(assetGroupTransUpdate);
        }

        transactionReversal_Asset.parmReversalVoucher(reversalVoucher);
        transactionReversal_Asset.parmReversalDate(reversalDate);
        transactionReversal_Asset.parmReversalTraceNum(reversalTraceNum);
        transactionReversal_Asset.parmReasonRefRecId(reasonRefRecId);
        transactionReversal_Asset.parmRevoke(revoke);
        while select assetTransUpdate
            where assetTransUpdate.Voucher      == _voucher
               && assetTransUpdate.TransDate    == _transDate
        {
            transactionReversal_Asset.createAssetTrans(assetTransUpdate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAssetTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and reverses or revokes an individual asset transaction.
    /// </summary>
    /// <param name="_assetGroupTransOrig">
    /// The original asset transaction to be reversed or revoked.
    /// </param>
    /// <remarks>
    /// This method first creates a new asset transaction for the reversal.  It then
    /// creates an original transaction reversal record if this is the first record. Next, it updates the
    /// value model attributes depending on whether the transactions was reversed or revoked.
    /// Finally, it creates a transaction reversal record for the new reversal or revoke.
    /// </remarks>
    private void createAssetTrans_IN(AssetGroupTrans_IN  _assetGroupTransOrig)
    {
        AssetGroupTrans_IN          assetGroupTransNew;
        AssetGroupInformation_IN    assetGroupInformationNew,assetGroupInfoOrig;
        TransactionReversalTrans    transactionReversalTransLast;
        TraceNum                    traceNumOrig;

        assetGroupInfoOrig = AssetGroupInformation_IN::find(_assetGroupTransOrig.AssetGroupInformation);
        this.setTransactionTxt(assetGroupInfoOrig.TransDate, _assetGroupTransOrig.Voucher);

        assetGroupTransNew.clear();
        assetGroupInformationNew.clear();
        assetGroupTransNew.data(_assetGroupTransOrig);
        assetGroupInformationNew.data(assetGroupInfoOrig);
        assetGroupTransNew.Voucher           = reversalVoucher;
        assetGroupInformationNew.TransDate   = reversalDate;
        assetGroupInformationNew.Txt         = transactionTxt.txt();

        assetGroupInformationNew.AmountCur         = - assetGroupInfoOrig.AmountCur;
        assetGroupInformationNew.AmountMst         = - assetGroupInfoOrig.AmountMst;

        traceNumOrig = TransactionReversalTrans::findTransactionReversalTrans(_assetGroupTransOrig.TableId, _assetGroupTransOrig.RecId).TraceNum;
        transactionReversalTransLast = TransactionReversalTrans::findLastTransactionReversalTrans(traceNumOrig, true);

        if (!traceNumOrig)
        {
            TransactionReversalTrans::createTransaction(tablenum(AssetGroupTrans_IN),
                                                        _assetGroupTransOrig.RecId,
                                                        reversalTraceNum,
                                                        true,
                                                        false,
                                                        false);
        }
        else
            if (transactionReversalTransLast)
        {
            transactionReversalTransLast.Last = false;
            transactionReversalTransLast.update();
        }

        if (revoke)
        {
            assetGroupInformationNew.AmountCur          = - assetGroupInformationNew.AmountCur;
            assetGroupInformationNew.AmountMst          = - assetGroupInformationNew.AmountMst;
            assetGroupInformationNew.insert();

            assetGroupTransNew.AssetGroupInformation = assetGroupInformationNew.RecId;
            assetGroupTransNew.insert();

            TransactionReversalTrans::createTransaction(tablenum(AssetGroupTrans_IN),
                                                    assetGroupTransNew.RecId,
                                                    reversalTraceNum, false, true);
            this.updateAssetBookOrigRevoke_IN(assetGroupTransNew);
        }
        else
        {
            assetGroupInformationNew.insert();

            assetGroupTransNew.AssetGroupInformation = assetGroupInformationNew.RecId;
            assetGroupTransNew.insert();

            TransactionReversalTrans::createTransaction(tablenum(AssetGroupTrans_IN),
                                                    assetGroupTransNew.RecId,
                                                    reversalTraceNum, false, true);

            this.updateAssetBookOrigReversal_IN(assetGroupTransNew, _assetGroupTransOrig);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversalDate</Name>
				<Source><![CDATA[
    public TransDate parmReversalDate(TransDate  _reversalDate = reversalDate)
    {
        reversalDate = _reversalDate;

        return reversalDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversalJournalLineNum</Name>
				<Source><![CDATA[
    public LineNum parmReversalJournalLineNum(LineNum  _reversalJournalLineNum = reversalJournalLineNum)
    {
        reversalJournalLineNum = _reversalJournalLineNum;
        return reversalJournalLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversalJournalNumber</Name>
				<Source><![CDATA[
    public AssetJournalId parmReversalJournalNumber(AssetJournalId  _reversalJournalNumber = reversalJournalNumber)
    {
        reversalJournalNumber = _reversalJournalNumber;
        return reversalJournalNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversalTraceNum</Name>
				<Source><![CDATA[
    public TraceNum parmReversalTraceNum(TraceNum   _traceNum = reversalTraceNum)
    {
        reversalTraceNum = _traceNum;
        return reversalTraceNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversalVoucher</Name>
				<Source><![CDATA[
    public Voucher parmReversalVoucher(Voucher   _voucher = reversalVoucher)
    {
        reversalVoucher = _voucher;
        return reversalVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRevoke</Name>
				<Source><![CDATA[
    public boolean parmRevoke(boolean _revoke = revoke)
    {
        revoke = _revoke;
        return revoke;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversal</Name>
				<Source><![CDATA[
    public void reversal(Args _args)
    {
        this.reversalBook(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversalBook</Name>
				<Source><![CDATA[
    public void reversalBook(Args _args)
    {
        TransactionReversal_Ledger  transactionReversal_Ledger = TransactionReversal_Ledger::construct();

        recId                       assetGroupTransOrigRecId;

        AssetCalendarID             calendarId;
        boolean                     validPeriod;
        TransactionReversal_Asset   transactionReversal_Asset = TransactionReversal_Asset::construct();

        #OCCRetryCount

        if (TransactionReversalExecutionDetail::isReversingWithContract(this.parmContract()))
        {
            transactionReversal_Ledger.parmReasonRefRecId(this.parmReasonRefRecId());
        }

        assetGroupTransLoc = _args.record();
        assetGroupInformation    = AssetGroupInformation_IN::find(assetGroupTransLoc.AssetGroupInformation);
        [assetGroupTransOrig, revoke, reversalTraceNum] = TransactionReversalTrans::findAssetGroupTransOrig_IN(assetGroupTransLoc);
        assetGroupInformationOrig= AssetGroupInformation_IN::find(assetGroupTransOrig.AssetGroupInformation);
        if (this.validateReversal(assetGroupTransOrig ? assetGroupTransOrig.Voucher   : assetGroupTransLoc.Voucher,
                                  assetGroupInformationOrig ? assetGroupInformationOrig.TransDate : assetGroupInformation.TransDate,
                                  '', 0, revoke))

        {
            assetGroupTransLoc   = TransactionReversalTrans::findLastAssetGroupTrans_IN(assetGroupTransLoc);
            minimumDate = assetGroupInformationOrig.TransDate ? (revoke ? assetGroupInformation.TransDate : assetGroupInformationOrig.TransDate) : assetGroupInformation.TransDate;

            this.saveLast();

            if (this.skipDialogPrompt(_args) || this.prompt())
            {
                [validPeriod, calendarId] = TransactionReversal_AssetGroup_IN::checkValidAssetTranCalendar(assetGroupTransLoc.Voucher, assetGroupInformation.TransDate, '', 0, reversalDate);
                if (!validPeriod)
                  checkFailed(strfmt("@SYS95697", reversalDate, calendarId));
                else
                {
                    try
                    {
                        ttsbegin;

                        if (!assetGroupTransOrig)
                            assetGroupTransOrig = AssetGroupTrans_IN::findByRecId(assetGroupTransLoc.RecId,true);
                        else
                            assetGroupTransOrig = AssetGroupTrans_IN::findByRecId(assetGroupTransOrig.RecId,true);

                        assetGroupTransOrigRecId = assetGroupTransOrig.RecId;

                        inputGeneralJournalAccountEntry = GeneralLedgerExtension::findAccountEntryBySubledgerVoucherAccountingDate(
                                                                                        assetGroupTransLoc.Voucher,
                                                                                        assetGroupInformation.TransDate);

                        this.initLedgerVoucher();
                        transactionReversal_Ledger.parmReversalDate(reversalDate);
                        transactionReversal_Ledger.parmReversalTraceNum(reversalTraceNum);
                        transactionReversal_Ledger.parmSysModule(SysModule::FixedAssets);
                        transactionReversal_Ledger.createGeneralJournal(assetGroupTransLoc.Voucher, assetGroupInformation.TransDate, ledgerVoucher);

                        reversalTraceNum = transactionReversal_Ledger.parmReversalTraceNum();
                        reversalVoucher  = transactionReversal_Ledger.parmReversalVoucher();

                        assetGroupInformationOrig= AssetGroupInformation_IN::find(assetGroupTransOrig.AssetGroupInformation);

                        this.createAllAssetTransactions(assetGroupTransOrig.Voucher, assetGroupInformationOrig.TransDate);

                        ledgerVoucher.end();
                        transactionReversal_Ledger.postReversal();

                        this.updateOriginal(assetGroupInformationOrig.TransDate, assetGroupTransOrig.Voucher);

                        TransactionLog::create(TransactionLogType::TransactionReversal, "@SYS88955");

                        ttscommit;
                    }
                    catch (Exception::Deadlock)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::Deadlock;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    catch (Exception::UpdateConflict)
                    {
                        if (appl.ttsLevel() == 0)
                        {
                            if (xSession::currentRetryCount() >= #RetryNum)
                            {
                                throw Exception::UpdateConflictNotRecovered;
                            }
                            else
                            {
                                retry;
                            }
                        }
                        else
                        {
                            throw Exception::UpdateConflict;
                        }
                    }

                    info(revoke ? "@SYS111555" : "@SYS111551");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetBookOrigReversal_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///Updates the <c>lastdepreciationdate</c>, <c>LifeTimeRest</c>, <c>LastDepreciationDateExtraOrd</c>,
    ///    <c>status</c>, <c>ReserveTransferDone</c>, <c>RevaluationDone</c>, and <c>RevaluedTransID</c> value
    ///    model attributes for the transaction being reversed.
    /// </summary>
    /// <param name="_assetGroupTrans">
    /// The value model transaction being created and inserted.
    /// </param>
    /// <param name="_assetGroupTransOrig">
    /// The original value model transaction being reversed.
    /// </param>
    /// <remarks>
    ///The method first finds the asset book to be updated based on the past transaction.
    ///    This method
    ///    updates the <c>LastDepreciationDate</c> and <c>LifeTimeRest</c> for depreciation
    ///    transactions.
    ///    This method updates the <c>LastDepreciationDateExtraOrd</c> for extra ordinary
    ///    depreciation transactions.
    ///    This method updates the <c>status</c> for acquisition, disposal-sale,
    ///    and disposal-scrap transactions.
    ///    This method updates the <c>ReserveTransferDone</c> for
    ///    <c>CapitalReserveTransfer</c> transactions.
    ///    This method updates the <c>RevaluationDone</c> flag
    ///    for <c>Revaluation</c> transactions.
    /// </remarks>
    protected void updateAssetBookOrigReversal_IN(AssetGroupTrans_IN _assetGroupTrans,
                                               AssetGroupTrans_IN _assetGroupTransOrig)
    {
        AssetId                     assetId = _assetGroupTrans.AssetId;
        AssetBookId                 bookId  = _assetGroupTrans.BookId;
        AssetGroupTrans_IN          assetGroupTransLast;
        AssetGroupTrans_IN          assetGroupTransReserve;
        AssetGroupInformation_IN    assetGroupInformationLast,assetGroupInformationLoc;
        AssetGroupInformation_IN    assetGroupInformationReserve;
        AssetBook                   assetBook;
        AssetBook                   assetBookDepreciation;
        boolean                     isUpdate = false;
        AssetParameters             assetParameters;
        TransactionReversalTrans    transactionReversalTrans;

        assetParameters = AssetParameters::find();

        select forupdate LifeTimeRest, LastDepreciationDate, LastDepreciationDateExtraOrd, Status from assetBook
            where assetBook.AssetId == assetId
               && assetBook.BookId  == bookId;
        assetGroupInformationLoc =   AssetGroupInformation_IN::find(_assetGroupTrans.AssetGroupInformation);

        if  (assetGroupInformationLoc.TransType == AssetTransType::Depreciation)
        {
            while select forupdate assetBookDepreciation
            where assetBookDepreciation.AssetGroup                   == assetGroupInformationLoc.AssetGroup
                && assetBookDepreciation.BookId                      == _assetGroupTrans.BookId
                && assetBookDepreciation.AssetGroupDepreciation_IN   == NoYes::Yes
            {
                if (assetBookDepreciation.LifeTimeRest < assetBookDepreciation.LifeTime)
                {
                    assetBookDepreciation.LifeTimeRest = assetBookDepreciation.LifeTimeRest + 1;
                }

                assetBookDepreciation.LastDepreciationDate = dateNull();

                while select  assetGroupTransLast
                    join TransDate, RecId from assetGroupInformationLast order by TransDate desc
                        where assetGroupInformationLast.TransType       == AssetTransType::Depreciation        &&
                              assetGroupTransLast.AssetGroupInformation == assetGroupInformationLast.RecId     &&
                              assetGroupTransLast.BookId                == assetBook.BookId                    &&
                              assetGroupInformationLast.AssetGroup      == assetBook.AssetGroup                &&
                              assetGroupTransLast.RecId                 != _assetGroupTransOrig.RecId

                {
                    select transactionReversalTrans
                        where ( transactionReversalTrans.RefRecId == assetGroupTransLast.RecId
                           &&   transactionReversalTrans.RefTableId == assetGroupTransLast.TableId);
                    if ((! transactionReversalTrans) || ((transactionReversalTrans.Original == true) && (transactionReversalTrans.Reversed == false)))
                    {
                        assetBookDepreciation.LastDepreciationDate = assetGroupInformationLast.TransDate;
                        break;
                    }
                }
                assetBookDepreciation.update();
                isUpdate = true;
            }
        }

        if (assetGroupInformation.TransType == AssetTransType::ExtraordinaryDepreciation)
        {
            assetBook.LastDepreciationDateExtraOrd = dateNull();

            while select  assetGroupTransLast
                join TransDate, RecId from assetGroupInformationLast order by TransDate desc
                    where assetGroupInformationLast.TransType       == AssetTransType::ExtraordinaryDepreciation &&
                          assetGroupTransLast.AssetGroupInformation == assetGroupInformationLast.RecId           &&
                          assetGroupTransLast.AssetId               == assetBook.AssetId                         &&
                          assetGroupTransLast.BookId                == assetBook.BookId
            {
                select transactionReversalTrans
                    where transactionReversalTrans.RefRecId == assetGroupTransLast.RecId
                        && transactionReversalTrans.RefTableId == assetGroupTransLast.TableId
                        && transactionReversalTrans.Reversed == true;

                if (transactionReversalTrans)
                    continue;
                else
                {
                    assetBook.LastDepreciationDateExtraOrd = assetGroupInformationLast.TransDate;
                    break;
                }
            }
        }

        if  (assetGroupInformationLoc.TransType == AssetTransType::Acquisition)
        {
            if (assetParameters.MultiAcquisition == NoYes::No)
                assetBook.Status = AssetStatus::NoAcquisition;
            else
            {
                select  RecId from assetGroupTransLast
                    Join firstonly TransType, RecId from assetGroupInformationLast
                        where assetGroupInformationLast.TransType       == AssetTransType::Acquisition         &&
                              assetGroupTransLast.AssetGroupInformation == assetGroupInformationLast.RecId     &&
                              assetGroupTransLast.AssetId               == assetBook.AssetId                   &&
                              assetGroupTransLast.BookId                == assetBook.BookId                    &&
                              assetGroupTransLast.RecId                 != _assetGroupTransOrig.RecId
                    notexists join transactionReversalTrans
                        where transactionReversalTrans.RefRecId  == assetGroupTransLast.RecId
                            && transactionReversalTrans.RefTableId == assetGroupTransLast.TableId
                            && (transactionReversalTrans.Reversed == true);

                if (!assetGroupTransLast.RecId)
                {
                    assetBook.Status = AssetStatus::NoAcquisition;
                }
            }
        }

        if  ((assetGroupInformationLoc.TransType == AssetTransType::DisposalSale) && (assetBook.Status == AssetStatus::Sold))
        {
            assetBook.Status = AssetStatus::Open;
            assetBook.DisposalDate = dateNull();
            assetBook.SaleValue = 0;
        }

        if  ((assetGroupInformationLoc.TransType == AssetTransType::DisposalScrap) && (assetBook.Status == AssetStatus::Scrapped))
            assetBook.Status = AssetStatus::Open;

        if (!isUpdate)
        {
            assetBook.update();
        }

        if  (assetGroupInformationLoc.TransType == AssetTransType::CapitalReserveTransfer)
        {
            if (assetGroupInformationLoc.ReserveTransferDone)
            {
                assetGroupTransReserve = AssetGroupTrans_IN::findByRecId(_assetGroupTrans.ReserveTransId);
                assetGroupInformationReserve = AssetGroupInformation_IN::find(assetGroupTransReserve.AssetGroupInformation,true);
                assetGroupInformationReserve.ReserveTransferDone = false;
                assetGroupInformationReserve.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetBookOrigRevoke_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates value model attributes for the transaction being revoked.
    /// </summary>
    /// <param name="_assetGroupTrans">
    /// The value model transaction being revoked.
    /// </param>
    /// <remarks>
    ///  The method first finds the asset book to be updated based on the past transaction.
    ///    This method
    ///    updates the <c>LastDepreciationDate</c> and <c>LifeTimeRest</c> for depreciation
    ///    transactions.
    ///    This method updates the <c>LastDepreciationDateExtraOrd</c> for extra ordinary
    ///    depreciation transactions.
    ///    This method updates the status for acquisition, disposal-sale, and
    ///    disposal-scrap transactions.
    ///    This method updates the <c>ReserveTransferDone</c> for
    ///    <c>CapitalReserveTransfer</c> transactions.
    ///    This method updates the <c>RevaluationDone</c> flag
    ///    for <c>Revaluation</c> transactions.
    /// </remarks>
    protected void updateAssetBookOrigRevoke_IN(AssetGroupTrans_IN _assetGroupTrans)
    {
        AssetId                     assetId = _assetGroupTrans.AssetId;
        AssetBookId                 bookId  = _assetGroupTrans.BookId;
        AssetGroupTrans_IN          assetGroupTransLast;
        AssetGroupInformation_IN    assetGroupInformationLast,assetGroupInformationLoc;
        AssetGroupInformation_IN    assetGroupInformationReserve;
        AssetBook                   assetBook;
        AssetBook                   assetBookDepreciation;
        boolean                     isUpdate = false;
        TransactionReversalTrans    transactionReversalTrans;

        select forupdate LifeTimeRest, LastDepreciationDate, LastDepreciationDateExtraOrd, Status from assetBook
            where assetBook.AssetId == assetId
               && assetBook.BookId  == bookId;

        assetGroupInformationLoc =   AssetGroupInformation_IN::find(_assetGroupTrans.AssetGroupInformation);

        if (assetGroupInformationLoc.TransType == AssetTransType::Depreciation)
        {
            while select forupdate assetBookDepreciation
            where assetBookDepreciation.AssetGroup                   == assetGroupInformationLoc.AssetGroup
                && assetBookDepreciation.BookId                      == _assetGroupTrans.BookId
                && assetBookDepreciation.AssetGroupDepreciation_IN   == NoYes::Yes
            {
                if (assetBookDepreciation.LifeTimeRest > 0)
                    assetBookDepreciation.LifeTimeRest = assetBookDepreciation.LifeTimeRest - 1;

                assetBookDepreciation.LastDepreciationDate = assetGroupInformationLoc.TransDate;
                assetBookDepreciation.update();
                isUpdate = true;
            }
        }

        if  (assetGroupInformationLoc.TransType == AssetTransType::ExtraordinaryDepreciation)
        {
            assetBook.LastDepreciationDateExtraOrd = dateNull();

            while select  RecId from assetGroupTransLast
                join TransDate, RecId from assetGroupInformationLast order by TransDate desc
                    where assetGroupInformationLast.TransType == AssetTransType::ExtraordinaryDepreciation &&
                          assetGroupTransLast.AssetGroupInformation == assetGroupInformationLast.RecId     &&
                          assetGroupTransLast.AssetId   == assetBook.AssetId                               &&
                          assetGroupTransLast.BookId    == assetBook.BookId
            {
                select * from transactionReversalTrans
                    where transactionReversalTrans.RefRecId == assetGroupTransLast.RecId
                        && transactionReversalTrans.RefTableId == assetGroupTransLast.TableId
                        && transactionReversalTrans.Reversed == true;

                if (transactionReversalTrans)
                {
                    assetBook.LastDepreciationDateExtraOrd = assetGroupInformationLast.TransDate;
                    break;
                }
            }
        }

        if  (assetGroupInformationLoc.TransType == AssetTransType::Acquisition)
        {
            if (assetBook.Status == AssetStatus::NoAcquisition)
            {
                assetBook.Status = AssetStatus::Open;
            }
        }

        if  (assetGroupInformationLoc.TransType == AssetTransType::DisposalSale)
        {
            assetBook.Status = AssetStatus::Sold;
            assetBook.DisposalDate = assetGroupInformationLoc.TransDate;
            assetBook.SaleValue = assetGroupInformationLoc.AmountCur;
        }

        if  (assetGroupInformationLoc.TransType == AssetTransType::DisposalScrap)
        {
            assetBook.Status = AssetStatus::Scrapped;
        }

        if (!isUpdate)
        {
            assetBook.update();
        }

        if  (assetGroupInformationLoc.TransType == AssetTransType::CapitalReserveTransfer)
        {
            select forupdate ReserveTransferDone from assetGroupInformationReserve
                where assetGroupInformationReserve.RecId          == assetGroupInformationLoc.RecId
                   && assetGroupInformationReserve.TransDate      == assetGroupInformationLoc.TransDate;
            if (assetGroupInformationReserve)
            {
                assetGroupInformationReserve.ReserveTransferDone = true;
                assetGroupInformationReserve.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginal</Name>
				<Source><![CDATA[
    public void updateOriginal(
        TransDate _transDate,
        Voucher _voucher,
        boolean _excludeSubledgerJournalTransfers = false)
    {
        AssetGroupTrans_IN assetGroupTransLocal;
        AssetGroupInformation_IN assetGroupInformationLocal;

        while select RecId from assetGroupTransLocal
            join TransDate, RecId from assetGroupInformationLocal
                where assetGroupTransLocal.Voucher == _voucher
                    && assetGroupInformationLocal.RecId == assetGroupTransLocal.AssetGroupInformation
                    && assetGroupInformationLocal.TransDate == _transDate

        {
            TransactionReversalTrans::updateOriginal(tablenum(AssetGroupTrans_IN),
                                                     assetGroupTransLocal.RecId,
                                                     !revoke);
        }

        super(_transDate, _voucher, _excludeSubledgerJournalTransfers);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidAssetTranCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks valid asset transaction calendar.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher of the transaction.
    /// </param>
    /// <param name="_transDate">
    /// The date of the transaction.
    /// </param>
    /// <param name="_journalNumber">
    /// The journal number.
    /// </param>
    /// <param name="_journalLineNum">
    /// The journal line number.
    /// </param>
    /// <param name="_newDate">
    /// The new date.
    /// </param>
    /// <returns>
    /// The valid asset transaction calendar.
    /// </returns>
    public static container checkValidAssetTranCalendar(Voucher _voucher,
                                                        TransDate _transDate,
                                                        AssetJournalId _journalNumber,
                                                        LineNum _journalLineNum,
                                                        TransDate _newDate )
    {
        boolean isValid = true;

        AssetGroupTrans_IN bookTrans;
        AssetGroupInformation_IN assetGroupInformationloc;

        AssetBookTable assetBookTable;
        FiscalCalendarPeriod fiscalCalendarPeriod;

        FiscalCalendarRecId calendarRecId;

        bookTrans.selectLocked(false);
        fiscalCalendarPeriod.selectLocked(false);

        if (!(_voucher == ''))
        {
            while select RecId from bookTrans
                join FiscalCalendar, BookId from assetBookTable
                join RecId from assetGroupInformationloc
                    where bookTrans.BookId == assetBookTable.BookId &&
                          bookTrans.Voucher == _voucher               &&
                          assetGroupInformationloc.RecId == bookTrans.AssetGroupInformation &&
                          assetGroupInformationloc.TransDate == _transdate
            {
                if (assetBookTable.FiscalCalendar)
                {
                    // not checking the status, just checking that the date is valid.
                    if (!LedgerFiscalCalendar::findPeriodByPeriodCodeDate(assetBookTable.FiscalCalendar, _newDate))
                    {
                        isValid = false;
                        calendarRecId = assetBookTable.FiscalCalendar;
                        break;
                    }
                }
            }
        }

        return [isValid, calendarRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        TransactionReversal_AssetGroup_IN transactionReversal_AssetGroup = TransactionReversal_AssetGroup_IN::construct();

        transactionReversal_AssetGroup.reversal(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TransactionReversal_AssetGroup_IN construct()
    {
        return new TransactionReversal_AssetGroup_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        taxTransRecIdMap = new Map(Types::Int64, Types::Int64);

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>