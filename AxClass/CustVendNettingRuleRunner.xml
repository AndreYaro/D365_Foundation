<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingRuleRunner</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendNettingRuleRunner implements INettingRuleRunner
{
    private NettingRuleProcessParameter parameter;
    private INettingExecutionWrite writer;
    private INettingRuleQueryBuild queryBuilder;
    private INettingRuleQueryDetect queryDetect;
    private CustVendNettingLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(NettingRuleProcessParameter _parameter)
    {
        parameter = _parameter;
        writer = new CustVendNettingExecutionWriter();
        queryDetect = new CustVendNettingRuleQueryDetect();
        queryBuilder = new CustVendNettingRuleQueryBuilder();
        logger = CustVendNettingLogger::getLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CustVendNettingRuleRunner construct(NettingRuleProcessParameter _parameter)
    {
        return new CustVendNettingRuleRunner(_parameter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRule</Name>
				<Source><![CDATA[
    public void processRule(INettingRuleExecutionPair _nettingRuleExecutionPair)
    {
        using (SysInstrumentationActivityContext runActivityContext = logger.activityContextWithCustomProperties(CustVendNettingInstrumentationConstants::NettingRuleRunner))
        {
            List currenyCodeList = queryDetect.getCurrencyCodeProcessingList(_nettingRuleExecutionPair);
            ListEnumerator enumerator = currenyCodeList.getEnumerator();
            INettingMarkTrans markTrans = NettingMarkTransMgrFactory::construct(NettingRuleSelectionPolicyType::MarkAll);
            while (enumerator.moveNext())
            {
                CurrencyCode nettingCurrency = enumerator.current();
                CustVendNettingPair nettingPair = CustVendNettingPair::find(_nettingRuleExecutionPair.getPairRecId());
                CustVendNettingRuleNettingSequence sequence = _nettingRuleExecutionPair.getNettingMatchingSequence();

                if (_nettingRuleExecutionPair.isCreditNoteDebitNoteIncluded())
                {
                    logger.logInformation(strFmt('Process rule for netting pair %1 with currency %2 and credit debit note', any2Str(nettingPair.RecId), nettingCurrency));
                    this.processSingleRun(nettingCurrency, nettingPair, sequence, true, markTrans);
                }

                logger.logInformation(strFmt('Process rule for netting pair %1 with currency %2', any2Str(nettingPair.RecId), nettingCurrency));
                this.processSingleRun(nettingCurrency, nettingPair, sequence, false, markTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSingleRun</Name>
				<Source><![CDATA[
    private void processSingleRun(CurrencyCode _nettingCurrency, CustVendNettingPair _nettingPair, CustVendNettingRuleNettingSequence _sequence, boolean _isCreditDebitNote, INettingMarkTrans _markTrans)
    {
        Query debitQuery = queryBuilder.buildQueryForDebit(_nettingPair, _nettingCurrency, _sequence, _isCreditDebitNote, parameter);
        Query creditQuery = queryBuilder.buildQueryForCredit(_nettingPair, _nettingCurrency, _sequence, _isCreditDebitNote, parameter);
        INettingMarked marked = _markTrans.markTransWithPolicy(
            debitQuery,
            CustVendNettingRuleQueryBuilder::getDataSourceTableId(_nettingPair.DebitAccountType),
            _nettingPair.DebitCompany,
            creditQuery,
            CustVendNettingRuleQueryBuilder::getDataSourceTableId(_nettingPair.CreditAccountType),
            _nettingPair.CreditCompany);
        TransDate nettingDate = parameter.getNettingDate();
        RecId executionId = writer.writeExecution(_nettingPair, _nettingCurrency, marked, nettingDate, _isCreditDebitNote);

        if (executionId)
        {
            if (!parameter.getEnablePreview())
            {
                logger.logInformation(strFmt('Trigger netting process for execution %1', any2Str(executionId)));
                INettingProcessor processor = AbstractNettingProcessor::construct(NettingProcessorType::CustVendNetting, executionId, nettingDate);
                processor.process();
            }
            else
            {
                CustVendNettingExecution execution = CustVendNettingExecution::find(executionId);
                NettingAutomationPreviewTmp::create(parameter.getPreviewTmp(), execution);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>