<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgProfileSeconds</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgProfileSeconds</c> class represents a specific point in time and a number of the static
///    methods format time strings.
/// </summary>
/// <remarks>
///    Internally the point in time is stored as an integer, which can be directly compared to a
///    <c>DateTime</c> field type.
/// </remarks>
public class JmgProfileSeconds
{
    JmgSeconds  profSeconds;

    const Seconds  ProfTestSecOnHour = 3600;                   // Seconds on an hour
    const Seconds  ProfTestSec       = ProfTestSecOnHour * 24; // Seconds on 24 hours
    const date     ProfTestDate      = 1\1\1998;               // Date used for test in timecalculation

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>date</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the date of the current point in time that this instance represents.
    /// </summary>
    /// <param name="profSec">
    ///    Time in seconds which should be set internally before the date is returned; optional.
    /// </param>
    /// <returns>
    ///    The date that this instance represents.
    /// </returns>
    date date(JmgSeconds profSec = 0)
    {
        this.setProfileSeconds(profSec);

        return ProfTestDate + (profSeconds div ProfTestSec);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the date and time.
    /// </summary>
    /// <param name="profSec">
    /// The date and time in seconds, representing the date and time to set.
    /// </param>
    /// <returns>
    /// A container with the date and time, represented by this <c>JmgProfileSeconds</c> record.
    /// </returns>
    container dateSeconds(JmgSeconds profSec = 0)
    {
        this.setProfileSeconds(profSec);

        return [this.date(), this.seconds()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>JmgProfileSeconds</c> class.
    /// </summary>
    /// <param name="dateIn">
    ///    The date which the instance should represent. Default value is the <c>#ProfTestDate</c> macro
    ///    declared in the class declaration. May be set to null.
    /// </param>
    /// <param name="sec">
    ///    The time of day, that is, the number of seconds since midnight, that the instance should represent.
    ///    Default value is 0. May be set to null.
    /// </param>
    void new(StartDate dateIn = ProfTestDate, JmgSeconds sec = 0)
    {
        profSeconds = 0;
        this.setDateSeconds(dateIn,sec);
    }

]]></Source>
			</Method>
			<Method>
				<Name>profileSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the number of seconds since 01.01.1998, which this instance represents.
    /// </summary>
    /// <param name="dateIn">
    ///    The date, which this instance should represent, before the return value is calculated. The default
    ///    value is the <c>#ProfTestDate</c> macro defined in the class declaration. May be set to null.
    /// </param>
    /// <param name="sec">
    ///    The time, which this instance should represent, before the return value is calculated. The default
    ///    value is 0. May be set to null.
    /// </param>
    /// <returns>
    ///    The number of seconds since 01.01.1998, which this instance represents.
    /// </returns>
    JmgSeconds profileSeconds(date dateIn = ProfTestDate, JmgSeconds sec = 0)
    {
        this.setDateSeconds(dateIn,sec);

        return profSeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>seconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the time part of the date and time represented by the <c>JmgProfileSeconds</c> object.
    /// </summary>
    /// <param name="profSec">
    /// The date and time in seconds, representing the date and time to set.
    /// </param>
    /// <returns>
    /// The time part of the date and time represented by the <c>JmgProfileSeconds</c> object.
    /// </returns>
    JmgSeconds seconds(JmgSeconds profSec = 0)
    {
        this.setProfileSeconds(profSec);

        return profSeconds mod ProfTestSec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDateSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the date and time, which the <c>JmgProfileSeconds</c> object represent.
    /// </summary>
    /// <param name="dateIn">
    /// The date to set.
    /// </param>
    /// <param name="sec">
    /// The time to set.
    /// </param>
    void setDateSeconds(date dateIn = ProfTestDate, JmgSeconds sec = 0)
    {
        if ((dateIn > ProfTestDate) || (sec > 0))
            profSeconds = ((date2num(dateIn) - date2num(ProfTestDate))*ProfTestSec) + sec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProfileSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the date and time, which the <c>JmgProfileSeconds</c> object represents.
    /// </summary>
    /// <param name="profSec">
    ///    The date time in seconds to set.
    /// </param>
    void setProfileSeconds(JmgSeconds profSec)
    {
        if (profSec > 0)
            profSeconds = profSec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formattedSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Formats the specified time as a string.
    /// </summary>
    /// <param name="timeSec">
    ///    The time to format as a string.
    /// </param>
    /// <param name="_presentation">
    ///    The format of the time.
    /// </param>
    /// <returns>
    ///    The specified time as a string.
    /// </returns>
    static JmgTimeString formattedSeconds(JmgSeconds timeSec, JmgSecondPresentation _presentation = JmgParameters::find().SecondPresentation)
    {
        switch (_presentation)
        {
            case JmgSecondPresentationEnum::Seconds:
                return num2str(timeSec,1,0,0,0);

            case JmgSecondPresentationEnum::Minuts:
                return num2str(timeSec/60,1,0,0,0);

            case JmgSecondPresentationEnum::Clocktime:
                JmgTimeString ret;
        
                if (timeSec < 0)
                {
                    ret = '-';
                    timeSec = timeSec * -1;
                    ret += num2Str0( (timeSec div ProfTestSecOnHour),1,0,0,0)   +':';
                }
                else
                {
                    ret += num2Str0( (timeSec div ProfTestSecOnHour),2,0,0,0)   +':';
                }
                ret += num2Str0( (timeSec mod ProfTestSecOnHour) div 60,2,0,0,0) +':'+
                       num2Str0( (timeSec mod ProfTestSecOnHour) mod 60,2,0,0,0);
                return ret;
        
            case JmgSecondPresentationEnum::Centitime:
                return num2Str0(decround((timeSec/ProfTestSecOnHour),2),5,2,0,0);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the current date. The date is taken from either client or server, depending on the setup in
    ///    the <see cref="T:JmgParameters" /> table.
    /// </summary>
    /// <returns>
    ///    The <c>JmgDate</c> value that containing the current date on either client or server, based on the
    ///    Shop Floor Control parameter setup.
    /// </returns>
    static JmgDate getSysDate()
    {
        return DateTimeUtil::getToday(JmgProfileSeconds::getTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the current time. The time is taken from either client or server, depending on the setup in
    ///    the <see cref="T:JmgParameters" /> table.
    /// </summary>
    /// <returns>
    ///    The <c>JmgSeconds</c> value that contains the current time on either client or server, based on the
    ///    Shop Floor Control parameter setup.
    /// </returns>
    static JmgTime getSysTime()
    {
        return DateTimeUtil::getTimeNow(JmgProfileSeconds::getTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimeZone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the timezone to be used for calculation, based on the setup in <c>JmgParameters</c>
    /// </summary>
    /// <returns></returns>
    public static Timezone getTimeZone()
    {
        return
            JmgParameters::find().GetRegistrationTimeFrom == JmgGetRegistrationTimeFrom::AOSServer ?
            DateTimeUtil::getCompanyTimeZone() :
            DateTimeUtil::getUserPreferredTimeZone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJmgTermRegCurrentTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the current time in a format that is comparable to JmgTermReg.RegDateTime.
    /// The RegDateTime is always removed the user time zone before stored in the JmgTermReg table,
    /// even if legal entity time is used. To compare JmgTermReg.RegDateTime to the current time we
    /// therefore need to remove the user preferred time zone from the current time.
    /// </summary>
    /// <returns>The current time in a format that is comparable to JmgTermReg.RegDateTime</returns>
    public static utcdatetime getJmgTermRegCurrentTime()
    {
        return DateTimeUtil::newDateTime(JmgProfileSeconds::getSysDate(), JmgProfileSeconds::getSysTime(), DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxDaySeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the maximum number of seconds in one day.
    /// </summary>
    /// <returns>
    ///    The <c>JmgSeconds</c> value that contains the maximum number of seconds in a day.
    /// </returns>
    static JmgSeconds maxDaySeconds()
    {
        return ProfTestSec - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>minutes2seconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts number of minutes to number of seconds.
    /// </summary>
    /// <param name="inMinutes">
    ///    The number of minutes to convert.
    /// </param>
    /// <returns>
    ///    The <c>JmgSeconds</c> value that contains the number of seconds in the specified number of minutes.
    /// </returns>
    static JmgSeconds minutes2seconds(Minutes inMinutes)
    {
        return inMinutes*60;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proftestdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the date from which timestamps are calculated.
    /// </summary>
    /// <returns>
    ///    The value of the <c>#ProfTestDate</c> macro that is defined in the class declaration.
    /// </returns>
    static date proftestdate()
    {
        return ProfTestDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>time2sec</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Casts <c>TimeOfDay</c> values to <c>JmgSeconds</c> values.
    /// </summary>
    /// <param name="profSec">
    ///    The value to cast.
    /// </param>
    /// <returns>
    ///    The <c>JmgSeconds</c> value that contains the type-casted value.
    /// </returns>
    static JmgSeconds time2sec(timeOfDay profSec)
    {
        return profSec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unFormattedSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a <c>TimeString</c> to an integer value according to the specified format.
    /// </summary>
    /// <param name="timeVal">
    ///    The time value to convert.
    /// </param>
    /// <param name="presentation">
    ///    The format of the <c>timeVal</c> string. May be set to null.
    /// </param>
    /// <returns>
    ///    A <c>JmgSeconds</c> value that contains the converted number of seconds.
    /// </returns>
    /// <remarks>
    ///    If no presentation is specified, the <c>timeVal</c> string is assumed to be in the format that is
    ///    specified in the <c>SecondPresentation</c> field of the <see cref="T:JmgParameters" /> table. If
    ///    the input string cannot be parsed, 0 is returned.
    /// </remarks>
    static JmgSeconds unFormattedSeconds(JmgTimeString timeVal, JmgSecondPresentation presentation = JmgParameters::find().SecondPresentation)
    {
        NoYesId negSign;
        int     position;
        int     position2;
        str     secondsStr = timeVal; // use local variable to avoid truncation to the length of JmgTimeString

        if (presentation == JmgSecondPresentationEnum::Seconds)
            return any2int(str2num(secondsStr));

        if (presentation == JmgSecondPresentationEnum::Minuts)
            return any2int(str2num(secondsStr)*60);

        negSign  = (substr(secondsStr,1,1)=='-');
        if ((negSign) || (substr(secondsStr,1,1)=='+'))
        {
            secondsStr = substr(secondsStr,2,255);
        }

        position = strnfind(secondsStr,'0123456789',1,255);
        if (!position)
        {
            position = strlen(secondsStr)+1;
        }
        if (presentation == JmgSecondPresentationEnum::Clocktime)
        {
            if (position > 4)
            {
                position=3;
                secondsStr = strins(secondsStr,':',3);
                if (strlen(secondsStr)== 7)
                    secondsStr = strins(secondsStr,':',6);
            }
            position2 = strnfind(secondsStr,'0123456789',position+1,255);
            if (position2 < position)
                position2 = 255;

            return any2int((negSign?-1:1)*(str2num(substr(secondsStr,1,position-1))*ProfTestSecOnHour)+
                           (str2num(substr(secondsStr,position+1,position2 - position))*60) +
                           (str2num(substr(secondsStr,position2+1,255))));
        }
        if (presentation == JmgSecondPresentationEnum::Centitime)
        {
            if (position >= strlen(secondsStr))
                secondsStr += ',';
            secondsStr += '0';
            return any2int((negSign?-1:1)*(str2num(substr(secondsStr,1,position-1)) +(str2num(substr(secondsStr,position+1,255))/exp10(strlen(substr(secondsStr,position+1,255)))))*ProfTestSecOnHour);
        }

        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>