<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalUserInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendPaymProposalUserInteraction</c> is the plugin base class responsible for handling user interaction for payment proposal.
/// </summary>
[Microsoft.Dynamics.AX.Platform.Extensibility.ExportInterfaceAttribute()]
public abstract class CustVendPaymProposalUserInteraction
{
    CustVendCreatePaymJournal custVendCreatePaymJournal;
    Args args;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCustVendCreatePaymJournal</Name>
				<Source><![CDATA[
    public CustVendCreatePaymJournal parmCustVendCreatePaymJournal(CustVendCreatePaymJournal _custVendCreatePaymJournal = custVendCreatePaymJournal)
    {
        custVendCreatePaymJournal = _custVendCreatePaymJournal;
        return custVendCreatePaymJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Factory method for constructing appropriate instance of user interaction object during creation of payment proposal.
    /// </summary>
    /// <param name = "_args">Args object with <c>UserInteractive</c> enum value used for instantiating user interaction object.</param>
    /// <returns>Derived object instance of <c>CustVendPaymProposalUserInteraction</c> class.</returns>
    public static CustVendPaymProposalUserInteraction constructForProposal(Args _args)
    {
        str enumName;
        CustVendPaymProposalUserInteraction userInteraction;

        if (_args == null)
        {
            _args = new Args();
        }

        if (_args.parmEnumType() == 0)
        {
            _args.parmEnumType(enumNum(UserInteractive));
            _args.parmEnum(UserInteractive::Yes);
        }

        enumName = enumId2Name(_args.parmEnumType());

        userInteraction = CustVendPaymProposalUserInteraction::getUserInteraction(_args.parmEnum());
        userInteraction.parmArgs(_args);
        return userInteraction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForTransferProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Factory method for constructing interactive instance of user interaction object.
    /// </summary>
    /// <returns>Default instance of <c>CustVendPaymProposalUserInteraction</c> class.</returns>
    public static CustVendPaymProposalUserInteraction constructForTransferProposal()
    {
        return CustVendPaymProposalUserInteraction::getUserInteraction(UserInteractive::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserInteraction</Name>
				<Source><![CDATA[
    private static CustVendPaymProposalUserInteraction getUserInteraction(UserInteractive _interactionType)
    {
        str enumValue;
        SysPluginMetadataCollection metadataCollection;
        CustVendPaymProposalUserInteraction userInteraction;

        enumValue = enum2Symbol(enumnum(UserInteractive), _interactionType);
        metadataCollection = new SysPluginMetadataCollection();
        metadataCollection.SetManagedValue(enumstr(UserInteractive), enumValue);
        userInteraction = SysPluginFactory::Instance('Dynamics.AX.Application', classStr(CustVendPaymProposalUserInteraction), metadataCollection) as CustVendPaymProposalUserInteraction;
        return userInteraction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the LedgerJournalTable record for which payment will be created.
    /// </summary>
    /// <returns>The <c>LedgerJournalTable</c> record.</returns>
    public abstract LedgerJournalTable getLedgerJournalTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPromptForCreatingPaymentProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays payment proposal dialog for user interaction and hides it for non-interactive scenarios.
    /// </summary>
    /// <returns>Returns true when proceeding with payment proposal, otherwise false.</returns>
    public abstract boolean doPromptForCreatingPaymentProposal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProposalEditForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display payment proposal edit form.
    /// </summary>
    public abstract void runProposalEditForm()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>