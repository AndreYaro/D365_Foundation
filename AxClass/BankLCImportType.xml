<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCImportType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The Business class of <c>BankLCImport</c> object.
/// </summary>
class BankLCImportType extends BankLCType
{
    private VersioningUpdateType versioningUpdateType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Amends the Import Letter of Credit.
    /// </summary>
    public void amend()
    {
        if (this.isDataLoaded())
        {
            this.doAmend();
        }
        else
        {
            BankLCImportType::amendOnServer(this.parmBankLCRecId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>amendShipmentLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Amends the <c>BankLCImportLine</c> records of this letter of credit.
    /// </summary>
    /// <param name="_bankLCImport">
    ///    The letter of credit to amend.
    /// </param>
    /// <param name="_bankLCImportHistoryRefRecId">
    ///    The record ID of the letter of credit history record.
    /// </param>
    private void amendShipmentLines(
        BankLCImport                _bankLCImport,
        BankLCImportHistoryRefRecId _bankLCImportHistoryRefRecId)
    {
        BankLCImportLine        bankLCImportLineLocal;
        BankLCImportLineHistory newBankLCImportLineHistory;

        while select forupdate bankLCImportLineLocal
            where bankLCImportLineLocal.BankLC == _bankLCImport.RecId
        {
            newBankLCImportLineHistory.clear();

            newBankLCImportLineHistory.BankLCImportHistory = _bankLCImportHistoryRefRecId;
            newBankLCImportLineHistory.initFromBankLCImportLine(bankLCImportLineLocal);
            newBankLCImportLineHistory.insert();

            if (bankLCImportLineLocal.ImportShipmentStatus == BankLCImportShipmentStatusType::Open)
            {
                bankLCImportLineLocal.ImportShipmentStatus = BankLCImportShipmentStatusType::Created;
                bankLCImportLineLocal.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Closes the import letter of credit.
    /// </summary>
    public void close()
    {
        if (this.isDataLoaded())
        {
            this.doClose();
        }
        else
        {
            BankLCImportType::closeOnServer(this.parmBankLCRecId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Confirms the import letter of credit.
    /// </summary>
    public void confirm()
    {
        if (this.isDataLoaded())
        {
            this.doConfirm();
        }
        else
        {
            BankLCImportType::confirmOnServer(this.parmBankLCRecId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankLCImportTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and inserts the <c>BankLCImport</c> record based on the specified purchase order record.
    /// </summary>
    /// <param name="_purchTable">
    ///    The purchase order record.
    /// </param>
    /// <returns>
    ///    The created <c>BankLCImport</c> record.
    /// </returns>
    protected BankLCImport createBankLCImportTable(PurchTable _purchTable)
    {
        BankLCImport newBankLCImport;

        newBankLCImport.clear();

        newBankLCImport.initValue();
        newBankLCImport.initFromPurchTable(_purchTable);

        newBankLCImport.insert();

        return newBankLCImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipmentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and inserts the <c>BankLCImportLine</c> record for the letter of credit.
    /// </summary>
    /// <param name="_bankLCImport">
    ///    The letter of credit record.
    /// </param>
    /// <param name="_expectedDeliveryDate">
    ///    The expected delivery date.
    /// </param>
    /// <param name="_purchTable">
    ///    The purchase table to use to create a <c>BankLCImportLine</c> record.
    /// </param>
    /// <returns>
    ///    The created <c>BankLCImportLine</c> record.
    /// </returns>
    private BankLCImportLine createShipmentLine(
        BankLCImport    _bankLCImport,
        TransDate       _expectedDeliveryDate,
        PurchTable      _purchTable)
    {
        BankLCImportLine          newBankLCImportLine;
        BankLCImportPurchTotals   purchTotals;

        purchTotals = BankLCImportPurchTotals::construct(_purchTable, BankLCSalesPurchQtyCategoryType::Ordered);
        purchTotals.parmDeliveryDate(_expectedDeliveryDate);
        purchTotals.calc();

        newBankLCImportLine.initShipmentLine(
            _bankLCImport.RecId,
            _expectedDeliveryDate,
            purchTotals.purchTotalAmount());

        if (newBankLCImportLine.ShipmentAmountCur != 0
            && newBankLCImportLine.validateWrite())
        {
            newBankLCImportLine.insert();
        }

        return newBankLCImportLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipmentLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>BankLCImportLine</c> records for the Letter of Credit.
    /// </summary>
    public void createShipmentLines()
    {
        if (this.isDataLoaded())
        {
            this.doCreateShipmentLines();
        }
        else
        {
            BankLCImportType::createShipmentLinesOnServer(this.parmBankLCRecId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dealFacilityAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases or withdraws amount from LC related facility agreement.
    /// </summary>
    /// <param name="_amount">
    /// The amout to deal
    /// </param>
    /// <param name="_isWithdraw">
    /// True if this is withdraw operation; false if this is a releasing operation.
    /// </param>
    private void dealFacilityAgreement(
        AmountCur _amount,
        boolean   _isWithdraw = true)
    {
        BankDocumentFacilityAgreementLineType   bankDocumentFacilityAgreementLineType;
        BankLCImport                            bankLCImportLocal;

        bankLCImportLocal = this.parmBankLCImport();

        bankDocumentFacilityAgreementLineType = BankDocumentFacilityAgreementLineType::construct(
                                                  bankLCImportLocal.BankDocumentFacilityAgreementLine,
                                                  true,
                                                  true);
        if (_isWithdraw)
        {
            bankDocumentFacilityAgreementLineType.withdrawAmount(_amount);
        }
        else
        {
            bankDocumentFacilityAgreementLineType.releaseAmount(_amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAmend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the amendment of the Letter of Credit.
    /// </summary>
    private void doAmend()
    {
        #OCCRetryCount

        BankLCImportHistory bankLCImportHistory;
        boolean             isRetry = false;
        BankLCImport        bankLCImportLocal;
        bankLCInfo          bankLCInfoLocal;

        try
        {
            ttsbegin;

            if (isRetry)
            {
                this.reLoadBankLC(true, true);
            }

            bankLCImportLocal = this.parmBankLCImport();

            if (this.validateAmendment())
            {
                if (this.parmBankLCInfo().RecId == 0)
                {
                    this.reLoadBankLCInfo();
                }

                bankLCInfoLocal = this.parmBankLCInfo();

                bankLCImportHistory.clear();
                bankLCImportHistory.initFromBankLCImport(bankLCImportLocal);
                bankLCImportHistory.initFromBankLCInfo(bankLCInfoLocal);
                bankLCImportHistory.insert();

                this.amendShipmentLines(bankLCImportLocal, bankLCImportHistory.RecId);
                this.dealFacilityAgreement(bankLCImportLocal.getTotalShipmentAmountBalance(), false);

                bankLCImportLocal.Version       = bankLCImportLocal.Version + 1;
                bankLCImportLocal.ImportStatus  = BankLCImportStatusType::Created;
                bankLCImportLocal.AmountCur     = 0;
                bankLCImportLocal.VendTable     = "";
                bankLCImportLocal.CurrencyCode  = "";
                bankLCImportLocal.update();
            }
            else
            {
                // The letter of Credit amendment is cancelled.
                throw error ("@SYS316201");
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    isRetry = true;
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doClose</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Closes the letter of credit.
    /// </summary>
    private void doClose()
    {
        #OCCRetryCount

        boolean      isRetry = false;
        BankLCImport bankLCImportLocal;

        try
        {
            ttsbegin;

            if (isRetry)
            {
                this.reLoadBankLC(true, false);
            }

            bankLCImportLocal = this.parmBankLCImport();

            if (this.validateClose())
            {
                if (bankLCImportLocal.isConfirmed())
                {
                    this.dealFacilityAgreement(bankLCImportLocal.getTotalShipmentAmountBalance(), false);
                }

                bankLCImportLocal.ImportStatus = BankLCImportStatusType::Closed;
                bankLCImportLocal.update();
            }
            else
            {
                // The letter of Credit closing is cancelled.
                throw error ("@SYS316209");
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    isRetry = true;
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the confirmation.
    /// </summary>
    private void doConfirm()
    {
        #OCCRetryCount

        boolean          isRetry = false;
        BankLCImport     bankLCImportLocal;
        BankLCImportLine bankLCImportLineLocal;

        try
        {
            ttsbegin;

            if (isRetry)
            {
                this.reLoadBankLC(true, true);
            }

            bankLCImportLocal = this.parmBankLCImport();

            if (this.validateConfirmation())
            {
                this.dealFacilityAgreement(bankLCImportLocal.getTotalShipmentAmountBalance());

                bankLCImportLocal.AmountCur     = bankLCImportLocal.getBankLCAmount();
                bankLCImportLocal.CurrencyCode  = bankLCImportLocal.getPurchCurrencyCode();
                bankLCImportLocal.VendTable     = bankLCImportLocal.getPurchVendAccount();
                bankLCImportLocal.ImportStatus  = BankLCImportStatusType::Confirmed;

                bankLCImportLocal.update();

                update_recordset bankLCImportLineLocal
                    setting
                        ImportShipmentStatus = BankLCImportShipmentStatusType::Open
                    where bankLCImportLineLocal.BankLC                == bankLCImportLocal.RecId
                        && bankLCImportLineLocal.ImportShipmentStatus == BankLCImportShipmentStatusType::Created;
            }
            else
            {
                // The letter of Credit confirmation is cancelled.
                throw error ("@SYS316200");
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    isRetry = true;
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCreateShipmentLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>BankLCImportLine</c> records from the purchase order.
    /// </summary>
    private void doCreateShipmentLines()
    {
        #OCCRetryCount

        boolean         isRetry = false;
        BankLCImport    bankLCImportLocal;
        PurchLine       purchLineLocal;
        PurchTable      purchTableLocal;
        TransDate       expectedDeliveryDate;
        TransDate       puchLineDeliveryDate;

        try
        {
            ttsbegin;

            if (isRetry)
            {
                this.reLoadBankLC();
            }

            bankLCImportLocal = this.parmBankLCImport();

            select firstonly purchTableLocal
                where purchTableLocal.PurchId == bankLCImportLocal.PurchTable;

            while select DeliveryDate from purchLineLocal
                order by purchLineLocal.deliveryDate
                where purchLineLocal.PurchId    == bankLCImportLocal.PurchTable
                    && purchLineLocal.IsDeleted == NoYes::No
                    && (purchLineLocal.LineDeliveryType    == LineDeliveryType::DeliveryLine
                        || purchLIneLocal.LineDeliveryType == LineDeliveryType::OrderLine)
            {
                if (purchLineLocal.DeliveryDate)
                {
                    puchLineDeliveryDate = purchLineLocal.DeliveryDate;

                    if (expectedDeliveryDate != puchLineDeliveryDate)
                    {
                        if (expectedDeliveryDate)
                        {
                            this.createShipmentLine(
                                bankLCImportLocal,
                                expectedDeliveryDate,
                                purchTableLocal);
                        }
                        expectedDeliveryDate = puchLineDeliveryDate;
                    }
                }
            }

            if (expectedDeliveryDate)
            {
                this.createShipmentLine(
                    bankLCImportLocal,
                    expectedDeliveryDate,
                    purchTableLocal);
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    isRetry = true;
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateInvoicePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>BankLCImportLine</c> after the invoice has been posted.
    /// </summary>
    /// <param name="_bankLCImportLineRefRecId">
    /// The record Id of the <c>BankLCImportLine</c> which is marked on the invoice.
    /// </param>
    private void doUpdateInvoicePosted(BankLCLineRefRecId _bankLCImportLineRefRecId)
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            this.updateShipmentStatus(_bankLCImportLineRefRecId, BankLCImportShipmentStatusType::InvoiceUpdated);
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdatePackingSlipPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>BankLCImportLine</c> record after the packing slip has been posted.
    /// </summary>
    /// <param name="_bankLCImportLineRefRecId">
    /// The record Id of the <c>BankLCImportLine</c> which is marked on the packing slip.
    /// </param>
    private void doUpdatePackingSlipPosted(BankLCLineRefRecId _bankLCImportLineRefRecId)
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            this.updateShipmentStatus(_bankLCImportLineRefRecId,
                this.parmVersioningUpdateType() == VersioningUpdateType::Cancel ?
                    BankLCImportShipmentStatusType::Open:
                    BankLCImportShipmentStatusType::PackingSlipUpdated);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdatePaymentPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>BankLCImportLine</c> record after the payment has been posted.
    /// </summary>
    /// <param name="_bankLCImportLineRefRecId">
    ///    The record ID of the <c>BankLCImportLine</c> table that is marked on the payment.
    /// </param>
    private void doUpdatePaymentPosted(BankLCLineRefRecId _bankLCImportLineRefRecId)
    {
        #OCCRetryCount

        BankLCImportLine bankLCImportLineLocal;

        try
        {
            ttsbegin;
            bankLCImportLineLocal = BankLCImportLine::find(_bankLCImportLineRefRecId);
            this.dealFacilityAgreement(bankLCImportLineLocal.getShipmentAmountCurrency(), false);
            this.settleMargin(_bankLCImportLineRefRecId);
            this.updateShipmentStatus(_bankLCImportLineRefRecId, BankLCImportShipmentStatusType::Paid);
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidateUpdateInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if Letter of Credit related invoice is ok for posting or not.
    /// </summary>
    /// <param name="_formletterParmTable">
    /// The document
    /// </param>
    /// <returns>
    /// True if the validation is ok; otherwise, false
    /// </returns>
    protected boolean doValidateUpdateInvoice(FormletterParmTable _formletterParmTable)
    {
        boolean                 ok = true;
        BankLCImportLine        bankLCImportLineLocal;

        ok = super(_formletterParmTable);

        if (ok)
        {
            bankLCImportLineLocal = BankLCImportLine::find(_formletterParmTable.BankLCLine);
            if (BankLCImportMargin::hasUnAllocatedMargin(bankLCImportLineLocal.BankLC))
            {
                // The purchase order %1 related Letter of Credit still has unallocated margin amount.
                ok = checkFailed(strFmt("@SYS338884", _formletterParmTable.OrderId));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidateUpdatePackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if Letter of Credit related packing slip is ok for posting or not.
    /// </summary>
    /// <param name="_formletterParmTable">
    /// The document
    /// </param>
    /// <returns>
    /// True if the validation is ok; otherwise, false
    /// </returns>
    protected boolean doValidateUpdatePackingSlip(FormletterParmTable _formletterParmTable)
    {
        boolean             ok = true;
        BankLCImportLine    bankLCImportLineLocal;

        ok = super(_formletterParmTable);

        if (ok && BankLCImportChargeFeatureChecker_SA::construct().checkFeatureEnabled())
        {
            bankLCImportLineLocal = BankLCImportLine::find(_formletterParmTable.BankLCLine);
            if (BankLCImportHelper_SA::hasUnAllocatedCharge(bankLCImportLineLocal.BankLC))
            {
                // The purchase order %1 related Letter of Credit still has unallocated Misc.charge amount.
                ok = checkFailed(strFmt("@SYS338885", _formletterParmTable.OrderId));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidateUpdatePayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the letter of credit related payment is valid for posting.
    /// </summary>
    /// <param name="_ledgerJournalTransRefRecId">
    ///    The payment line.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    protected boolean doValidateUpdatePayment(RecId _ledgerJournalTransRefRecId)
    {
        boolean                     allOk = true;
        LedgerJournalTransBankLC    ledgerJournalTransBankLCLocal;
        BankLCImportLine            bankLCImportLineLocal;

        allOk = super(_ledgerJournalTransRefRecId);

        if (allOk)
        {
            ledgerJournalTransBankLCLocal = LedgerJournalTransBankLC::findByLedgerJournalTrans(_ledgerJournalTransRefRecId);
            bankLCImportLineLocal = BankLCImportLine::find(ledgerJournalTransBankLCLocal.BankLCLine);
            if (bankLCImportLineLocal.ImportShipmentStatus !=  BankLCImportShipmentStatusType::InvoiceUpdated)
            {
                // The shipment line is not invoiced.
                allOk = checkFailed("@SYS321191");
            }
        }
        return allOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount of the invoice.
    /// </summary>
    /// <param name="_formletterParmTable">
    ///    The invoice document.
    /// </param>
    /// <returns>
    ///    The invoice amount.
    /// </returns>
    protected AmountCur getInvoiceAmount(FormletterParmTable _formletterParmTable)
    {
        PurchTotals             purchTotals;
        VendInvoiceInfoTable    vendInvoiceInfoTable;

        vendInvoiceInfoTable = _formletterParmTable;
        purchTotals = PurchTotals::newParmTable(
                        vendInvoiceInfoTable,
                        vendInvoiceInfoTable.purchParmUpdate().SpecQty,
                        vendInvoiceInfoTable.ParmId,
                        vendInvoiceInfoTable.PurchId,
                        DocumentStatus::Invoice);
        purchTotals.calc();

        return purchTotals.purchTotalAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackingSlipAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount of the packing slip.
    /// </summary>
    /// <param name="_formletterParmTable">
    /// The packing slip document
    /// </param>
    /// <returns>
    /// The packing slip amount.
    /// </returns>
    protected AmountCur getPackingSlipAmount(FormletterParmTable _formletterParmTable)
    {
        PurchTotals         purchTotals;
        PurchParmTable      purchParmTable;

        purchParmTable  = _formletterParmTable;
        purchTotals     = PurchTotals::newParmTable(
                            purchParmTable,
                            purchParmTable.purchParmUpdate().SpecQty,
                            purchParmTable.ParmId,
                            purchParmTable.PurchId,
                            DocumentStatus::PackingSlip);
        purchTotals.calc();

        return purchTotals.purchTotalAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLCImport</Name>
				<Source><![CDATA[
    public BankLCImport parmBankLCImport(BankLCImport _bankLCImport = this.parmBankLC())
    {
        return this.parmBankLC(_bankLCImport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleMargin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Settles the posted margin to the bank letter of credit line.
    /// </summary>
    /// <param name="_bankLCImportLineRefRecId">
    ///    The <c>BankLCLineRefRecId</c> record that is used to find the related margins.
    /// </param>
    private void settleMargin(BankLCLineRefRecId _bankLCImportLineRefRecId)
    {
        BankLCImportMargin              bankLCImportMargin;
        BankLCImportMarginAllocation    bankLCImportMarginAllocation;

        ttsBegin;
        bankLCImportMarginAllocation.selectForUpdate(true);
        while select Settled, AllocatedAmountCur
            from bankLCImportMarginAllocation
                where bankLCImportMarginAllocation.BankLCImportLine == _bankLCImportLineRefRecId
            exists join bankLCImportMargin
                where bankLCImportMargin.RecId == bankLCImportMarginAllocation.BankLCImportMargin
        {
            bankLCImportMarginAllocation.updateSettleStatus();
            bankLCImportMarginAllocation.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoicePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>BankLCImportLine</c> after the invoice has been posted.
    /// </summary>
    /// <param name="_bankLCLineRefRecId">
    /// The record Id of the <c>BankLCImportLine</c> which is marked on the invoice.
    /// </param>
    public void updateInvoicePosted(BankLCLineRefRecId _bankLCLineRefRecId)
    {
        if (this.isDataLoaded())
        {
            this.doUpdateInvoicePosted(_bankLCLineRefRecId);
        }
        else
        {
            BankLCImportType::updateInvoicePostedOnServer(this.parmBankLCRecId(), _bankLCLineRefRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePackingSlipPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>BankLCImportLine</c> record after the packing slip has been posted.
    /// </summary>
    /// <param name="_bankLCLineRefRecId">
    ///    The record ID of the <c>BankLCImportLine</c> record which is marked on the packing slip.
    /// </param>
    public void updatePackingSlipPosted(BankLCLineRefRecId _bankLCLineRefRecId)
    {
        if (this.isDataLoaded())
        {
            this.doUpdatePackingSlipPosted(_bankLCLineRefRecId);
        }
        else
        {
            BankLCImportType::updatePackingSlipPostedOnServer(this.parmBankLCRecId(), _bankLCLineRefRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>BankLCImportLine</c> record after the payment has been posted.
    /// </summary>
    /// <param name="_bankLCLineRefRecId">
    ///    The record ID of the <c>BankLCImportLine</c> table that is marked on the payment.
    /// </param>
    public void updatePaymentPosted(BankLCLineRefRecId _bankLCLineRefRecId)
    {
        if (this.isDataLoaded())
        {
            this.doUpdatePaymentPosted(_bankLCLineRefRecId);
        }
        else
        {
            BankLCImportType::updatePaymentPostedOnServer(
                this.parmBankLCRecId(),
                _bankLCLineRefRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipmentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>BankLCImportLine</c> status.
    /// </summary>
    /// <param name="_bankLCImportLineRefRecId">
    ///    The record ID of the <c>BankLCImportLine</c> record.
    /// </param>
    /// <param name="_shipmentStatus">
    ///    The new status.
    /// </param>
    private void updateShipmentStatus(
        BankLCLineRefRecId             _bankLCImportLineRefRecId,
        BankLCImportShipmentStatusType _shipmentStatus)
    {
        BankLCImportLine bankLCImportLineLocal;

        bankLCImportLineLocal = BankLCImportLine::find(_bankLCImportLineRefRecId, true);
        bankLCImportLineLocal.ImportShipmentStatus = _shipmentStatus;
        bankLCImportLineLocal.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAmendment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the letter of credit can be amended.
    /// </summary>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    private boolean validateAmendment()
    {
        boolean         ok = true;
        BankLCImport    bankLCImportLocal;

        bankLCImportLocal = this.parmBankLCImport();

        ok = bankLCImportLocal.isConfirmed();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if Letter of Credit is ok to be closed or not.
    /// </summary>
    /// <returns>
    /// True if the validation is ok; otherwise, false.
    /// </returns>
    private boolean validateClose()
    {
        boolean      ok = true;
        BankLCImport bankLCImportLocal;

        bankLCImportLocal = this.parmBankLCImport();

        if (ok)
        {
            if (bankLCImportLocal.hasUnSettledTransactions())
            {
                // The letter of credit has un-paid shipment lines.
                ok = checkFailed("@SYS316208");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the letter of credit can be confirmed.
    /// </summary>
    /// <returns>
    ///    true if the letter of credit was validated; otherwise, false.
    /// </returns>
    protected boolean validateConfirmation()
    {
        boolean                                 ok = true;
        BankDocumentFacilityAgreementLineType   bankDocumentFacilityAgreementLineType;
        BankLCImport                            bankLCImportLocal;

        bankLCImportLocal = this.parmBankLCImport();

        ok = bankLCImportLocal.isCreated();

        if (ok)
        {
            ok = super();
        }

        if (ok)
        {
            if (bankLCImportLocal.getPurchTable().DocumentState != VersioningDocumentState::Confirmed)
            {
                // The purchase order does not confirmed.
                ok = checkFailed("@SYS316202");
            }
        }

        if (ok)
        {
            bankDocumentFacilityAgreementLineType = BankDocumentFacilityAgreementLineType::construct(
                bankLCImportLocal.BankDocumentFacilityAgreementLine, true);

            if (!bankDocumentFacilityAgreementLineType.anyRemainingBalance(bankLCImportLocal.getTotalShipmentAmountBalance()))
            {
                // Facility balance is less than the requested Letter of Credit/Import Collection amount.
                ok = checkFailed("@SYS313675");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLinesWhenConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether <c>BankLCImportLine</c> records are valid for letter of credit confirmation.
    /// </summary>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    protected boolean validateLinesWhenConfirm()
    {
        boolean             ok = true;
        BankLCImport        bankLCImportLocal;
        BankLCImportLine    bankLCImportLineLocal;

        bankLCImportLocal = this.parmBankLCImport();

        while select bankLCImportLineLocal
            where bankLCImportLineLocal.BankLC                == bankLCImportLocal.RecId
                && bankLCImportLineLocal.ImportShipmentStatus == BankLCImportShipmentStatusType::Created
        {
            if (!ok)
            {
                break;
            }

            ok = this.validateLineFieldsWhenConfirm(bankLCImportLineLocal);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTableFieldsWhenConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>BankLCImportLine</c> record fields is ok for confirmation.
    /// </summary>
    /// <returns>
    /// True if the validation is ok; otherwise, false.
    /// </returns>
    protected boolean validateTableFieldsWhenConfirm()
    {
        boolean      ok = true;
        BankLCImport bankLCImportLocal;

        bankLCImportLocal = this.parmBankLCImport();

        ok = super();

        if (ok)
        {
            if (bankLCImportLocal.ReceiptDateTime == DateTimeUtil::minValue())
            {
                // Date of Receipt could not be empty.
                ok = checkFailed("@SYS316197");
            }
            else if (bankLCImportLocal.ReceiptDateTime < bankLCImportLocal.ApplicationDateTime)
            {
                // The date of receipt cannot be earlier than the application date.
                ok = checkFailed("@SYS345013");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdateInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the invoice related to the letter of credit can be posted.
    /// </summary>
    /// <param name="_formletterParmTable">
    ///    The invoice that is related to the letter of credit.
    /// </param>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    public boolean validateUpdateInvoice(FormletterParmTable _formletterParmTable)
    {
        if (this.isDataLoaded())
        {
            return this.doValidateUpdateInvoice(_formletterParmTable);
        }
        else
        {
            return BankLCImportType::validateUpdateInvoiceOnServer(this.parmBankLCRecId(), _formletterParmTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdatePackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the packing slip that is related to the letter of credit can be posted.
    /// </summary>
    /// <param name="_formletterParmTable">
    ///    The packing slip.
    /// </param>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    public boolean validateUpdatePackingSlip(FormletterParmTable _formletterParmTable)
    {
        if (this.isDataLoaded())
        {
            return this.doValidateUpdatePackingSlip(_formletterParmTable);
        }
        else
        {
            return BankLCImportType::validateUpdatePackingSlipOnServer(this.parmBankLCRecId(), _formletterParmTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdatePayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the letter of credit related payment is valid for posting.
    /// </summary>
    /// <param name="_ledgerJournalTransRefRecId">
    ///    The payment line.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    public boolean validateUpdatePayment(RecId _ledgerJournalTransRefRecId)
    {
        if (this.isDataLoaded())
        {
            return this.doValidateUpdatePayment(_ledgerJournalTransRefRecId);
        }
        else
        {
            return BankLCImportType::validateUpdatePaymentOnServer(this.parmBankLCRecId(), _ledgerJournalTransRefRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>amendOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Forces the amendment to be done on server.
    /// </summary>
    /// <param name="_bankLCImportRecId">
    /// The given Letter of Credit record ID
    /// </param>
    private static void amendOnServer(BankLCRefRecId _bankLCImportRecId)
    {
        ttsbegin;
        BankLCImportType::construct(_bankLCImportRecId, true, true, true).doAmend();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forces the closing of the letter of credit to be done on server.
    /// </summary>
    /// <param name="_bankLCImportRecId">
    ///    The record ID of the letter of credit.
    /// </param>
    private static void closeOnServer(BankLCRefRecId _bankLCImportRecId)
    {
        ttsbegin;
        BankLCImportType::construct(_bankLCImportRecId, true, true).doClose();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Forces the confirmation to be done on server.
    /// </summary>
    /// <param name="_bankLCImportRecId">
    /// The Letter of Credit record ID
    /// </param>
    private static void confirmOnServer(BankLCRefRecId _bankLCImportRecId)
    {
        ttsbegin;
        BankLCImportType::construct(_bankLCImportRecId, true, true).doConfirm();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>BankLCImportType</c> class from the specified record ID of a
    ///    letter of credit.
    /// </summary>
    /// <param name="_bankLCRecId">
    ///    The record ID of the letter of credit to use.
    /// </param>
    /// <param name="_loadData">
    ///    A Boolean value that indicates whether to load the letter of credit record; optional.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_isLoadInfo">
    ///    A Boolean value that indicates whether to load the <c>BankLCInfo</c> record; optional.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>BankLCImportType</c> class.
    /// </returns>
    public static BankLCImportType construct(
        BankLCRefRecId  _bankLCRecId,
        boolean         _loadData       = false,
        boolean         _forUpdate      = false,
        boolean         _isLoadInfo     = false)
    {
        BankLCImportType    ret;
        BankLCImport        bankLCImport;

        if (_loadData)
        {
            bankLCImport = BankLCImport::find(_bankLCRecId, _forUpdate);
            ret          = BankLCImportType::constructByBankLCImport(bankLCImport, _isLoadInfo);
        }
        else
        {
            ret = new BankLCImportType();
            ret.parmBankLCRecId(_bankLCRecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructByBankLCImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of <c>BankLCImportType</c> by Letter of Credit Record.
    /// </summary>
    /// <param name="_bankLCImport">
    /// The given Letter of Credit record.
    /// </param>
    /// <param name="_isLoadInfo">
    /// A Boolean value that indicates whether to load the <c>BankLCInfo</c> record or not; optional.
    /// </param>
    /// <returns>
    /// The instance of <c>BankLCImportType</c>
    /// </returns>
    public static BankLCImportType constructByBankLCImport(
        BankLCImport    _bankLCImport,
        boolean         _isLoadInfo = false)
    {
        BankLCImportType bankLCImportType;

        if (_bankLCImport && _bankLCImport.RecId != 0)
        {
            bankLCImportType = new BankLCImportType();

            bankLCImportType.parmBankLCImport(_bankLCImport);

            if (_isLoadInfo)
            {
                bankLCImportType.loadBankLCInfo(_bankLCImport.selectForUpdate());
            }
        }

        return bankLCImportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersioningUpdateType</Name>
				<Source><![CDATA[
    public VersioningUpdateType parmVersioningUpdateType(VersioningUpdateType _versioningUpdateType = versioningUpdateType)
    {
        versioningUpdateType = _versioningUpdateType;
        return versioningUpdateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructByPurchId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>BankLCImportType</c> class by using the specified <c>PurchId</c>
    ///    value.
    /// </summary>
    /// <param name="_purchId">
    ///    The <c>PurchId</c> value to use.
    /// </param>
    /// <param name="_loadData">
    ///    A Boolean value that indicates whether to load the letter of credit record; optional.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_isLoadInfo">
    ///    A Boolean value that indicates whether to load the <c>BankLCInfo</c> record; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BankLCImportType</c> class
    /// </returns>
    public static BankLCImportType constructByPurchId(
        PurchId _purchId,
        boolean _loadData = false,
        boolean _forUpdate = false,
        boolean _isLoadInfo = false)
    {
        return BankLCImportType::construct(
            BankLCImport::findByPurchTable(_purchId).RecId,
            _loadData,
            _forUpdate,
            _isLoadInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankLCImport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and inserts a new <c>BankLCImportType</c> object for the purchase order.
    /// </summary>
    /// <param name="_purchId">
    ///    A <c>PurchId</c> value.
    /// </param>
    /// <returns>
    ///    The created <c>BankLCImportType</c> object that contains the new <c>BankLCImport</c> record.
    /// </returns>
    public static BankLCImportType createBankLCImport(PurchId _purchId)
    {
        BankLCImportType    bankLCImportType;
        BankLCImport        newBankLCImport;
        PurchTable          purchTableLocal;

        if (_purchId)
        {
            if (BankLCImport::existByPurchTable(_purchId))
            {
                return BankLCImportType::constructByPurchId(_purchId);
            }
            else
            {
                purchTableLocal = PurchTable::find(_purchId);

                if (!purchTableLocal || !purchTableLocal.PurchId)
                {
                    throw error (strFmt("@SYS34076", "@SYS15812"));
                }

                bankLCImportType = new BankLCImportType();

                ttsbegin;
                newBankLCImport = bankLCImportType.createBankLCImportTable(purchTableLocal);
                ttscommit;
                bankLCImportType.parmBankLCRecId(newBankLCImport.RecId);
            }
        }

        return bankLCImportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipmentLinesOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forces the <c>BankLCImportLine</c> record to be created on the server.
    /// </summary>
    /// <param name="_bankLCImportRecId">
    ///    The record ID of the letter of credit.
    /// </param>
    private static void createShipmentLinesOnServer(BankLCRefRecId _bankLCImportRecId)
    {
        ttsbegin;
        BankLCImportType::construct(_bankLCImportRecId, true, false).doCreateShipmentLines();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoicePostedOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forces the update of the <c>BankLCImportLine</c> record to be done on server.
    /// </summary>
    /// <param name="_bankLCImportRecId">
    ///    The record ID of the letter of credit.
    /// </param>
    /// <param name="_bankLCImportLineRefRecId">
    ///    The record ID of the letter of credit line.
    /// </param>
    private static void updateInvoicePostedOnServer(
        BankLCRefRecId      _bankLCImportRecId,
        BankLCLineRefRecId  _bankLCImportLineRefRecId)
    {
        ttsbegin;
        BankLCImportType::construct(
            _bankLCImportRecId,
            true,
            false).doUpdateInvoicePosted(_bankLCImportLineRefRecId);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePackingSlipPostedOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Forces the update of the <c>BankLCImportLine</c> to be done on server.
    /// </summary>
    /// <param name="_bankLCImportRecId">
    /// Letter of Credit record ID.
    /// </param>
    /// <param name="_bankLCImportLineRefRecId">
    /// The Letter of Credit line record Id
    /// </param>
    private static void updatePackingSlipPostedOnServer(
        BankLCRefRecId      _bankLCImportRecId,
        BankLCLineRefRecId  _bankLCImportLineRefRecId)
    {
        ttsbegin;
        BankLCImportType::construct(
            _bankLCImportRecId,
            true,
            false).doUpdatePackingSlipPosted(_bankLCImportLineRefRecId);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentPostedOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>BankLCImportLine</c> record on the server.
    /// </summary>
    /// <param name="_bankLCImportRecId">
    ///    The record ID of the letter of credit.
    /// </param>
    /// <param name="_bankLCImportLineRefRecId">
    ///    The letter of credit line record ID.
    /// </param>
    private static void updatePaymentPostedOnServer(
        BankLCRefRecId      _bankLCImportRecId,
        BankLCLineRefRecId  _bankLCImportLineRefRecId)
    {
        ttsbegin;
        BankLCImportType::construct(
            _bankLCImportRecId,
            true,
            false).doUpdatePaymentPosted(_bankLCImportLineRefRecId);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the required information about the letter of credit is attached correctly with
    ///    the invoices.
    /// </summary>
    /// <param name="_parmId">
    ///    The <c>ParmId</c> value of the <c>PurchParmUpdate</c> record that represents the invoices.
    /// </param>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    public static boolean validateInvoices(ParmId _parmId)
    {
        boolean                 ret = true;
        BankLCImportType        bankLCImportType;
        VendInvoiceInfoTable    vendInvoiceInfoTableLocal;
        PurchTable              purchTableLocal;

        while select count(RecId), sum(BankLCImportLine), Num from vendInvoiceInfoTableLocal
            group by vendInvoiceInfoTableLocal.Num
            where vendInvoiceInfoTableLocal.ParmId == _parmId
        {
            if (vendInvoiceInfoTableLocal.RecId > 1
                && vendInvoiceInfoTableLocal.BankLCImportLine > 0)
            {
                // Summary Invoice %1 could not be used for Letter of Credit related transactions.
                ret = checkFailed(strfmt("@SYS318806", vendInvoiceInfoTableLocal.Num));
            }
        }

        if (ret)
        {
            while select vendInvoiceInfoTableLocal
                where vendInvoiceInfoTableLocal.ParmId == _parmId
                join PurchId from purchTableLocal
                    where purchTableLocal.PurchId == vendInvoiceInfoTableLocal.PurchId
                        && (purchTableLocal.BankDocumentType    == BankDocumentType::ImportCollection
                            || purchTableLocal.BankDocumentType == BankDocumentType::LetterOfCredit)
            {
                bankLCImportType = BankLCImportType::constructByPurchId(purchTableLocal.PurchId, true);
                if (!bankLCImportType)
                {
                    // The purchase order %1 related Letter of Credit / Import Collection is not found.
                    ret = checkFailed(strFmt("@SYS318808", purchTableLocal.PurchId)) && ret;
                }
                else
                {
                    ret = bankLCImportType.validateUpdateInvoice(vendInvoiceInfoTableLocal) && ret;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePackingslips</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if Letter of Credit required info is attached ok with the packing slips or not.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> of the <c>PurchParmUpdate</c> represents the packing slips.
    /// </param>
    /// <returns>
    /// True if the validation is ok; otherwise, false.
    /// </returns>
    public static boolean validatePackingslips(ParmId _parmId)
    {
        boolean             ret = true;
        BankLCImportType    bankLCImportType;
        PurchParmTable      purchParmTableLocal;
        PurchTable          purchTableLocal;

        while select count(RecId), sum(BankLCImportLine), Num from purchParmTableLocal
            group by purchParmTableLocal.Num
                where purchParmTableLocal.ParmId == _parmId
        {
            if (purchParmTableLocal.RecId > 1
                && purchParmTableLocal.BankLCImportLine > 0)
            {
                // Summary Packing slip %1 could not be used for Letter of Credit related transactions.
                ret = checkFailed(strfmt("@SYS318807", purchParmTableLocal.Num));
            }

            if (ret)
            {
                while select purchParmTableLocal
                    where purchParmTableLocal.ParmId == _parmId
                    join PurchId from purchTableLocal
                        where purchTableLocal.PurchId == purchParmTableLocal.PurchId
                            && (purchTableLocal.BankDocumentType    == BankDocumentType::ImportCollection
                                || purchTableLocal.BankDocumentType == BankDocumentType::LetterOfCredit)
                {
                    bankLCImportType = BankLCImportType::constructByPurchId(purchTableLocal.PurchId, true);
                    if (!bankLCImportType)
                    {
                        // The purchase order %1 related Letter of Credit / Import Collection is not found.
                        ret = ret && checkFailed(strFmt("@SYS318808", purchTableLocal.PurchId));
                    }
                    else
                    {
                        ret = ret && bankLCImportType.validateUpdatePackingSlip(purchParmTableLocal);
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdateInvoiceOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forces the validation of the invoice to be done on the server.
    /// </summary>
    /// <param name="_bankLCImportRecId">
    ///    The record ID of the letter of credit.
    /// </param>
    /// <param name="_formletterParmTable">
    ///    The document.
    /// </param>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    private static boolean validateUpdateInvoiceOnServer(
        BankLCRefRecId      _bankLCImportRecId,
        FormletterParmTable _formletterParmTable)
    {
        boolean ret;

        ttsbegin;
        ret = BankLCImportType::construct(
                _bankLCImportRecId,
                true,
                false).doValidateUpdateInvoice(_formletterParmTable);
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdatePackingSlipOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forces the validation of the packing slip to be done on server.
    /// </summary>
    /// <param name="_bankLCImportRecId">
    ///    The record ID of the letter of credit.
    /// </param>
    /// <param name="_formletterParmTable">
    ///    The document.
    /// </param>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    private static boolean validateUpdatePackingSlipOnServer(
        BankLCRefRecId      _bankLCImportRecId,
        FormletterParmTable _formletterParmTable)
    {
        boolean ret;

        ttsbegin;
        ret = BankLCImportType::construct(
                _bankLCImportRecId,
                true,
                false).doValidateUpdatePackingSlip(_formletterParmTable);
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdatePaymentOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Forces the validation to be done on the server.
    /// </summary>
    /// <param name="_bankLCImportRecId">
    ///    The record ID of the letter of credit.
    /// </param>
    /// <param name="_ledgerJournalTransRefRecId">
    ///    The payment line.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise false.
    /// </returns>
    private static boolean validateUpdatePaymentOnServer(
        BankLCRefRecId  _bankLCImportRecId,
        RecId           _ledgerJournalTransRefRecId)
    {
        boolean ret;

        ttsbegin;
        ret = BankLCImportType::construct(
                _bankLCImportRecId,
                true,
                false).doValidateUpdatePayment(_ledgerJournalTransRefRecId);
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>