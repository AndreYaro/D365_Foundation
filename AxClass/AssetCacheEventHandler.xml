<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCacheEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class to handle events related to asset cache.
/// </summary>
internal class AssetCacheEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearCacheByAssetTrans</Name>
				<Source><![CDATA[
    private static void clearCacheByAssetTrans(AssetTrans _assetTrans)
    {
        AssetCacheManager::removeCacheAssetTrans(_assetTrans.AssetId, _assetTrans.BookId);
        if (_assetTrans.Txt == "@SYS67430")
        {
            AssetCacheManager::removeCacheSplitting(_assetTrans.AssetId, _assetTrans.BookId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssetTrans_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Handler for the Deleted event on the <c>AssetTrans</c> table.
    /// </summary>
    /// <param name="_sender">The <c>AssetTrans</c> record that is being deleted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(AssetTrans), DataEventType::Deleted), Hookable(false)]
    public static void AssetTrans_onDeleted(Common _sender, DataEventArgs _e)
    {
        AssetCacheEventHandler::clearCacheByAssetTrans(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssetTrans_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Handler for the Inserted event on the <c>AssetTrans</c> table.
    /// </summary>
    /// <param name="_sender">The <c>AssetTrans</c> record that is being inserted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(AssetTrans), DataEventType::Inserted), Hookable(false)]
    public static void AssetTrans_onInserted(Common _sender, DataEventArgs _e)
    {
        AssetCacheEventHandler::clearCacheByAssetTrans(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssetTrans_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Handler for the Updated event on the <c>AssetTrans</c> table.
    /// </summary>
    /// <param name="_sender">The <c>AssetTrans</c> record that is being updated.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(AssetTrans), DataEventType::Updated), Hookable(false)]
    public static void AssetTrans_onUpdated(Common _sender, DataEventArgs _e)
    {
        if (AssetTransTmpCache::isAssetTransChanged(_sender))
        {
            AssetCacheEventHandler::clearCacheByAssetTrans(_sender);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheByDocEntry_JP</Name>
				<Source><![CDATA[
    private static void clearCacheByDocEntry_JP(AssetDocumentEntry_JP _docEntry)
    {
        AssetCacheManager::removeCacheAssetTrans(_docEntry.AssetId, _docEntry.BookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssetDocumentEntry_JP_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Handler for the Deleted event on the <c>AssetDocumentEntry_JP</c> table.
    /// </summary>
    /// <param name="_sender">The <c>AssetDocumentEntry_JP</c> record that is being deleted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(AssetDocumentEntry_JP), DataEventType::Deleted), Hookable(false)]
    public static void AssetDocumentEntry_JP_onDeleted(Common _sender, DataEventArgs _e)
    {
        AssetCacheEventHandler::clearCacheByDocEntry_JP(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssetDocumentEntry_JP_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Handler for the Inserted event on the <c>AssetDocumentEntry_JP</c> table.
    /// </summary>
    /// <param name="_sender">The <c>AssetDocumentEntry_JP</c> record that is being inserted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(AssetDocumentEntry_JP), DataEventType::Inserted), Hookable(false)]
    public static void AssetDocumentEntry_JP_onInserted(Common _sender, DataEventArgs _e)
    {
        AssetCacheEventHandler::clearCacheByDocEntry_JP(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssetDocumentEntry_JP_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Handler for the Updated event on the <c>AssetDocumentEntry_JP</c> table.
    /// </summary>
    /// <param name="_sender">The <c>AssetDocumentEntry_JP</c> record that is being updated.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(AssetDocumentEntry_JP), DataEventType::Updated), Hookable(false)]
    public static void AssetDocumentEntry_JP_onUpdated(Common _sender, DataEventArgs _e)
    {
        AssetDocumentEntry_JP doc = _sender;
        AssetDocumentEntry_JP docOrig = doc.orig();
        if (doc.AssetId != docOrig.AssetId
            || doc.BookId != docOrig.BookId
            || doc.AssetDocumentTable_JP != docOrig.AssetDocumentTable_JP)
        {
            AssetCacheEventHandler::clearCacheByDocEntry_JP(_sender);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheByDocTable_JP</Name>
				<Source><![CDATA[
    private static void clearCacheByDocTable_JP()
    {
        AssetCacheManager::clearAllCacheScopes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssetDocumentTable_JP_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Handler for the Deleted event on the <c>AssetDocumentTable_JP</c> table.
    /// </summary>
    /// <param name="_sender">The <c>AssetDocumentTable_JP</c> record that is being deleted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(AssetDocumentTable_JP), DataEventType::Deleted), Hookable(false)]
    public static void AssetDocumentTable_JP_onDeleted(Common _sender, DataEventArgs _e)
    {
        AssetCacheEventHandler::clearCacheByDocTable_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssetDocumentTable_JP_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Handler for the Inserted event on the <c>AssetDocumentTable_JP</c> table.
    /// </summary>
    /// <param name="_sender">The <c>AssetDocumentTable_JP</c> record that is being inserted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(AssetDocumentTable_JP), DataEventType::Inserted), Hookable(false)]
    public static void AssetDocumentTable_JP_onInserted(Common _sender, DataEventArgs _e)
    {
        AssetCacheEventHandler::clearCacheByDocTable_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssetDocumentTable_JP_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Handler for the Updated event on the <c>AssetDocumentTable_JP</c> table.
    /// </summary>
    /// <param name="_sender">The <c>AssetDocumentTable_JP</c> record that is being updated.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(AssetDocumentTable_JP), DataEventType::Updated), Hookable(false)]
    public static void AssetDocumentTable_JP_onUpdated(Common _sender, DataEventArgs _e)
    {
        AssetDocumentTable_JP docTable = _sender;

        if (docTable.Type != docTable.orig().Type)
        {
            AssetCacheEventHandler::clearCacheByDocTable_JP();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheByDocTrans_JP</Name>
				<Source><![CDATA[
    private static void clearCacheByDocTrans_JP(AssetDocumentTrans_JP _docTrans)
    {
        AssetTrans assetTrans = AssetTrans::find(_docTrans.RefRecId);
        if (assetTrans.RecId)
        {
            AssetCacheEventHandler::clearCacheByAssetTrans(assetTrans);
        }
        else
        {
            AssetCacheEventHandler::clearCacheByDocEntry_JP(AssetDocumentEntry_JP::find(_docTrans.AssetDocumentEntry_JP));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssetDocumentTrans_JP_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Handler for the Deleted event on the <c>AssetDocumentTrans_JP</c> table.
    /// </summary>
    /// <param name="_sender">The <c>AssetDocumentTrans_JP</c> record that is being deleted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(AssetDocumentTrans_JP), DataEventType::Deleted), Hookable(false)]
    public static void AssetDocumentTrans_JP_onDeleted(Common _sender, DataEventArgs _e)
    {
        AssetCacheEventHandler::clearCacheByDocTrans_JP(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssetDocumentTrans_JP_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Handler for the Inserted event on the <c>AssetDocumentTrans_JP</c> table.
    /// </summary>
    /// <param name="_sender">The <c>AssetDocumentTrans_JP</c> record that is being inserted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(AssetDocumentTrans_JP), DataEventType::Inserted), Hookable(false)]
    public static void AssetDocumentTrans_JP_onInserted(Common _sender, DataEventArgs _e)
    {
        AssetCacheEventHandler::clearCacheByDocTrans_JP(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssetDocumentTrans_JP_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Handler for the Updated event on the <c>AssetDocumentTrans_JP</c> table.
    /// </summary>
    /// <param name="_sender">The <c>AssetDocumentTrans_JP</c> record that is being updated.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(AssetDocumentTrans_JP), DataEventType::Updated), Hookable(false)]
    public static void AssetDocumentTrans_JP_onUpdated(Common _sender, DataEventArgs _e)
    {
        AssetCacheEventHandler::clearCacheByDocTrans_JP(_sender);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>