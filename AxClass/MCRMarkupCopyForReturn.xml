<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRMarkupCopyForReturn</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRMarkupCopyForReturn</c> class copies charges to a return order.
/// </summary>
class MCRMarkupCopyForReturn
{
    Common bufferFrom;
    Common bufferTo;
    
    CurrencyCode        currencyCode;
    SalesTable          salesTableTo;       // return order
    SalesLine           salesLineTo;        // order being returned
    SalesTable          salesTableFrom;     // return line
    SalesLine           salesLineFrom;      // line being returned
    MCRSalesOrderTotals salesOrderTotalsReturn;

    AmountCur           productRetAmt;
    AmountCur           totalProductRetAmt;
    AmountCur           totalProductRetLineAmt;
    AmountCur           prodInvoiced;        // used to store of invoiced less what has been returned
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMarkupTrans</Name>
				<Source><![CDATA[
    protected boolean skipMarkupTrans(MarkupTrans _oldMarkupTrans)
    {
        return Markup::mcrOverriden(bufferTo.TableId, bufferTo.RecId, bufferFrom.TableId, bufferFrom.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMarkupTrans</Name>
				<Source><![CDATA[
    protected void insertMarkupTrans(AmountCur _value, MarkupTrans _oldMarkupTrans)
    {
        if (!this.skipMarkupTrans(_oldMarkupTrans))
        {
            MarkupTrans markupTrans;

            markupTrans = _oldMarkupTrans.data();
            markupTrans.TransTableId = bufferTo.TableId;
            markupTrans.TransRecId = bufferTo.RecId;
            markupTrans.OrigTableId = bufferFrom.TableId;
            markupTrans.OrigRecId = bufferFrom.RecId;
            markupTrans.CalculatedAmount = 0;
            markupTrans.Posted = 0;
            markupTrans.Voucher = '';
            markupTrans.TransDate = dateNull();

            markupTrans.Value = _value;

            markupTrans.CurrencyCode = currencyCode;
            markupTrans.MCRMarkupTransCreatedBy = MCRMarkupTransCreatedBy::Other;

            markupTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        switch (bufferTo.TableId)
        {
            case tableNum(SalesTable): 
                salesTableTo = bufferTo;
                currencyCode = salesTableTo.CurrencyCode;
                salesOrderTotalsReturn = new MCRSalesOrderTotals(salesTableTo);
                productRetAmt = salesOrderTotalsReturn.getTotalProduct();
                break;

            case tableNum(SalesLine): 
                salesLineTo = bufferTo;
                currencyCode = salesLineTo.CurrencyCode;
                productRetAmt = salesLineTo.LineAmount;
                break;
        }

        switch (bufferFrom.TableId)
        {
            case tableNum(SalesTable): 
                salesTableFrom = bufferFrom;
                totalProductRetAmt = abs(SalesTableType_ReturnItem::mcrGetRetProduct(salesTableFrom.SalesId));
                // get total invoiced product
                CustInvoiceJour custInvoiceJour;
                select sum(SalesBalanceMST) from custInvoiceJour 
                    where custInvoiceJour.SalesId == salesTableFrom.SalesId;
                prodInvoiced = custInvoiceJour.SalesBalanceMST - totalProductRetAmt - productRetAmt;
                break;

            case tableNum(SalesLine): 
                salesLineFrom = bufferFrom;
                totalProductRetLineAmt = abs(SalesLineType_ReturnItem::MCRGetRetLineAmount(salesLineFrom.InventTransId));
                CustInvoiceTrans custInvoiceTrans;
                select sum(LineAmountMST) from custInvoiceTrans
                    where custInvoiceTrans.InventTransId == salesLineFrom.InventTransId;
                prodInvoiced = custInvoiceTrans.LineAmountMST;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFixedProRatedCharges</Name>
				<Source><![CDATA[
    protected void copyFixedProRatedCharges()
    {
        MarkupTrans oldMarkupTrans;
        MarkupTable markupTable;
        MarkupTrans eligibleMarkupTrans;

        // get all fixed pro-rated charges
        while select sum(Value) from oldMarkupTrans
            group by MarkupCode
            where oldMarkupTrans.MCRSavedRecID == bufferFrom.RecId
                && oldMarkupTrans.MCRSavedTableID == bufferFrom.TableId
                && oldMarkupTrans.MarkupCategory == MarkupCategory::Fixed
                && oldMarkupTrans.Voucher
            // only charge line with refundable charge code would be copied to return order
            exists join markupTable
                where markupTable.MarkupCode == oldMarkupTrans.MarkupCode
                    && markupTable.CustType == MarkupType::CustVend
                    && markupTable.MCRProRate
                    && markupTable.Refundable
            // get the first like invoiced markup trans record to determine
            // if the charge was installment eligible.
            outer join firstOnly MCRInstallmentEligible from eligibleMarkupTrans
                where eligibleMarkupTrans.MCRSavedRecID == bufferFrom.RecId
                    && eligibleMarkupTrans.MCRSavedTableID == bufferFrom.TableId
                    && eligibleMarkupTrans.MarkupCategory == MarkupCategory::Fixed
                    && eligibleMarkupTrans.Voucher
                    && eligibleMarkupTrans.MarkupCode == oldMarkupTrans.MarkupCode
        {
            oldMarkupTrans.MCRInstallmentEligible = eligibleMarkupTrans.MCRInstallmentEligible;
            AmountCur proRatedCharge;

            if (bufferFrom.TableId == tableNum(SalesTable))
            {
                // get total return charge for the order
                // Returns merge
                AmountCur chargeRetAmt = SalesTableType_ReturnItem::mcrGetRetMiscCharge(salesTableFrom.SalesId, oldMarkupTrans.MarkupCode);

                // calculated pro-rated charge
                proRatedCharge = (productRetAmt/prodInvoiced) * (oldMarkupTrans.Value + chargeRetAmt);
            }
            else // Sales Line
            {
                // get total return charge for the item being returned
                AmountCur chargeRetAmt = SalesLineType_ReturnItem::MCRGetRetLineMiscCharge(salesLineFrom.InventTransId, oldMarkupTrans.MarkupCode);

                // calculated pro-rated charge
                proRatedCharge = (productRetAmt/prodInvoiced) * (oldMarkupTrans.Value + chargeRetAmt);
            }

            if (proRatedCharge)
            {
                // repopulate old record
                oldMarkupTrans.initFromMarkupTable(MarkupTable::find(MarkupModuleType::Cust, oldMarkupTrans.MarkupCode));
                oldMarkupTrans.ModuleType = MarkupModuleType::Cust;
                oldMarkupTrans.CurrencyCode = currencyCode;

                if (bufferFrom.TableId == tableNum(SalesTable))
                {
                    oldMarkupTrans.TaxGroup = oldMarkupTrans.TaxGroup ? oldMarkupTrans.TaxGroup: salesTableTo.TaxGroup;
                    oldMarkupTrans.LineNum = MarkupTrans::lastLineNum(salesTableTo.TableId, salesTableTo.RecId) + 1;
                }
                else
                {
                    oldMarkupTrans.TaxGroup = oldMarkupTrans.TaxGroup ? oldMarkupTrans.TaxGroup: salesLineTo.TaxGroup;
                    oldMarkupTrans.LineNum = MarkupTrans::lastLineNum(salesLineTo.TableId, salesLineTo.RecId) + 1;
                }

                if (!oldMarkupTrans.taxCombinationAllowed())
                {
                    oldMarkupTrans.TaxItemGroup = '';
                }

                this.insertMarkupTrans(proRatedCharge, oldMarkupTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFixedNonProRatedChargesForFullyReturnedOrders</Name>
				<Source><![CDATA[
    protected void copyFixedNonProRatedChargesForFullyReturnedOrders()
    {
        boolean fullyReturned;

        // Check if everything has been returned for the order/line
        // before returning fixed charges that have not been pro-rated.
        if (bufferFrom.TableId == tableNum(SalesTable))
        {
            fullyReturned = salesTableFrom.mcrIsOrderFullyReturned();
        }
        else // Sales Line
        {
            fullyReturned = salesLineFrom.mcrIsLineFullyReturned();
        }
        
        if (!fullyReturned)
        {
            return;
        }

        MarkupTrans oldMarkupTrans;
        MarkupTable markupTable;
        MarkupTrans eligibleMarkupTrans;

        // get all fixed non pro-rated charges if the order is fully returned
        while select oldMarkupTrans
            where oldMarkupTrans.MCRSavedRecID == bufferFrom.RecId
                && oldMarkupTrans.MCRSavedTableID == bufferFrom.TableId
                && oldMarkupTrans.MarkupCategory == MarkupCategory::Fixed
                && oldMarkupTrans.Voucher
            // only charge line with refundable charge code would be copied to return order
            exists join markupTable
                where markupTable.MarkupCode == oldMarkupTrans.MarkupCode
                    && markupTable.CustType == MarkupType::CustVend
                    && !markupTable.MCRProRate
                    && markupTable.Refundable
            // get the first like invoiced markup trans record to determine
            // if the charge was installment eligible.
            outer join firstonly MCRInstallmentEligible from eligibleMarkupTrans
                where eligibleMarkupTrans.MCRSavedRecID == bufferFrom.RecId
                    && eligibleMarkupTrans.MCRSavedTableID == bufferFrom.TableId
                    && eligibleMarkupTrans.MarkupCode == oldMarkupTrans.MarkupCode
                    && eligibleMarkupTrans.MarkupCategory == MarkupCategory::Fixed
                    && eligibleMarkupTrans.Voucher
        {
            oldMarkupTrans.MCRInstallmentEligible = eligibleMarkupTrans.MCRInstallmentEligible;
            oldMarkupTrans.LineNum = MarkupTrans::lastLineNum(bufferTo.TableId, bufferTo.RecId) + 1;

            // copy over to the return
            this.insertMarkupTrans(-oldMarkupTrans.Value, oldMarkupTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPerPriceAndPercentInvoicedCharges</Name>
				<Source><![CDATA[
    protected void copyPerPriceAndPercentInvoicedCharges()
    {
        MarkupTrans oldMarkupTrans;
        MarkupTrans invMarkupTrans;
        MarkupTrans eligibleMarkupTrans;

        // get per piece & percent invoiced charges
        while select oldMarkupTrans
            where oldMarkupTrans.TransRecId == bufferFrom.RecId
                && oldMarkupTrans.TransTableId == bufferFrom.TableId
                && oldMarkupTrans.MarkupCategory != MarkupCategory::Fixed
            exists join invMarkupTrans
                where invMarkupTrans.OrigRecId == oldMarkupTrans.RecId
                    && invMarkupTrans.OrigTableId == oldMarkupTrans.TableId
            // get the first like invoiced markup trans record to determine
            // if the charge was installment eligible.
            outer join firstOnly MCRInstallmentEligible from eligibleMarkupTrans
                where eligibleMarkupTrans.TransRecId == bufferFrom.RecId
                    && eligibleMarkupTrans.TransTableId == bufferFrom.TableId
                    && eligibleMarkupTrans.MarkupCode == oldMarkupTrans.MarkupCode
                    && eligibleMarkupTrans.MarkupCategory == oldMarkupTrans.MarkupCategory
        {
            oldMarkupTrans.MCRInstallmentEligible = eligibleMarkupTrans.MCRInstallmentEligible;
            // copy over to the return
            this.insertMarkupTrans(-oldMarkupTrans.Value, oldMarkupTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies from one buffer to another.
    /// </summary>
    /// <param name="_bufferFrom">
    /// The <c>Common</c> buffer being copied from.
    /// </param>
    /// <param name="_bufferTo">
    /// The <c>Common</c> buffer being copied to.
    /// </param>
    public void copy(Common _bufferFrom, Common _bufferTo)
    {
        if (!_bufferFrom ||
            !_bufferTo ||
            !isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            return;
        }

        MCRMarkupCopyForReturn markupCopyForReturn = MCRMarkupCopyForReturn::construct();

        markupCopyForReturn.bufferFrom = _bufferFrom;
        markupCopyForReturn.bufferTo = _bufferTo;

        markupCopyForReturn.init();
        markupCopyForReturn.performCopy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performCopy</Name>
				<Source><![CDATA[
    protected void performCopy()
    {
        ttsbegin;
        this.copyFixedProRatedCharges();
        this.copyFixedNonProRatedChargesForFullyReturnedOrders();
        this.copyPerPriceAndPercentInvoicedCharges();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRMarkupCopyForReturn construct()
    {
        return new MCRMarkupCopyForReturn();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>