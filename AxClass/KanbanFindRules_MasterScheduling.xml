<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanFindRules_MasterScheduling</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanFindRules_MasterScheduling</c> class provides the methods to find the kanban rules
///    that apply for master planning.
/// </summary>
public class KanbanFindRules_MasterScheduling extends KanbanFindRules
{
    InventTable     inventTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the related <c>InventTable</c> record for the specified item ID.
    /// </summary>
    /// <returns>
    /// An <c>InventTable</c> record.
    /// </returns>
    protected InventTable inventTable()
    {
        if (!inventTable)
        {
            inventTable = InventTable::find(itemId);
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAdd</Name>
				<Source><![CDATA[
/// <summary>
    ///    Determines if the specified <c>KanbanRule</c> record must be added to the result list.
    /// </summary>
    /// <param name="_kanbanRule">
    ///    The <c>KanbanRule</c> record to test.
    /// </param>
    /// <returns>
    ///    A Boolean value that indicates whether the record must be added.
    /// </returns>
    protected boolean mustAdd(KanbanRule _kanbanRule)
    {
        InventDim                               inventDimIssue;
        InventDimParm                           inventDimParmCov;

        boolean ret = super(_kanbanRule);

        if (   ret
            && _kanbanRule.KanbanType == LeanKanbanType::Withdrawal)
        {
            LeanRuleData leanRuleData = LeanRuleData::newKanbanRuleRecId(_kanbanRule.RecId);
            LeanProdFlowFindConsumptionActivity leanProdFlowFindConsumptionActivity = LeanProdFlowFindConsumptionActivity::newKanbanFlow(
                                                                                                                                this.inventTable(),
                                                                                                                                inventDim,
                                                                                                                                leanRuleData.kanbanFlow(),
                                                                                                                                _kanbanRule,
                                                                                                                                leanRuleData.leanKanbanType());
            leanProdFlowFindConsumptionActivity.parmLeanLocationCache(leanLocationCache);
            inventDimIssue.data(leanProdFlowFindConsumptionActivity.inventDimFinal());
            inventDimParmCov.initFromInventDim(inventDim);
            inventDimIssue.clearNotSelectedDim(inventDimParmCov);

            // If the issue dimensions are equal to the coverage dimensions then the rule is of no use in master scheduling.
            ret = ! InventDim::isInventDimEqual(inventDim,inventDimIssue);
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>toDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the to date and time value that will be used to find rules.
    /// </summary>
    /// <param name="_fromDateTime">
    /// The from date and time value.
    /// </param>
    /// <returns>
    /// The to date and time value.
    /// </returns>
    /// <remarks>
    /// If no specific time is given, the whole day is used to find rules; otherwise, the from date and
    /// time is also used as the to date and time.
    /// </remarks>
    protected TransDateTime toDateTime(TransDateTime _fromDateTime)
    {
        #TimeConstants
        TransDateTime   toDateTime;

        if (DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(_fromDateTime,DateTimeUtil::getCompanyTimeZone())) == 0)
        {
            toDateTime = DateTimeUtil::newDateTime(DateTimeUtil::date(_fromDateTime),#secondsPerDay-1,DateTimeUtil::getCompanyTimeZone());
        }
        else
        {
            toDateTime = _fromDateTime;
        }

        return toDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static KanbanFindRules_MasterScheduling construct()
    {
        return new KanbanFindRules_MasterScheduling();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanFindRules_MasterScheduling</c> class that has the specified
    ///    attributes.
    /// </summary>
    /// <param name="_itemId">
    ///    The string value that holds the item ID.
    /// </param>
    /// <param name="_reqDateTime">
    ///    A <c>TransDateTime</c> value that holds a requirement date and time.
    /// </param>
    /// <param name="_covInventDimId">
    ///    An <c>InventDimId</c> value that limits the operation of the <c>findKanbanRules</c> method.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanFindRules_MasterScheduling</c> class.
    /// </returns>
    public static KanbanFindRules newStandard(
        ItemId        _itemId,
        TransDateTime _reqDateTime,
        InventDimId   _covInventDimId)
    {
        KanbanFindRules_MasterScheduling    kanbanFindRules = KanbanFindRules_MasterScheduling::construct();

        kanbanFindRules.parmItemId(_itemId);
        kanbanFindRules.parmInventDimId(_covInventDimId);
        kanbanFindRules.parmInventDimParm(KanbanFindRules::defaultInventDimParm());
        kanbanFindRules.parmDateTimeFrom(_reqDateTime);
        kanbanFindRules.parmDateTimeTo(kanbanFindRules.toDateTime(_reqDateTime));
        kanbanFindRules.parmFirstRuleOnly(true);
        kanbanFindRules.parmIncludeManufacturing(true);
        kanbanFindRules.parmIncludeWithdrawal(true);
        kanbanFindRules.parmIncludePickupSemiFinished(true);
        kanbanFindRules.parmIncludePickupFinished(true);
        kanbanFindRules.parmIncludeReceiveSemiFinished(false);
        kanbanFindRules.parmIncludeReceiveFinished(true);
        kanbanFindRules.parmIncludeOnHandUpdateReceipt(true);

        // do include rules that do not update on hand receipt
        kanbanFindRules.parmIncludeNotOnHandUpdateReceipt(true);

        return kanbanFindRules;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
