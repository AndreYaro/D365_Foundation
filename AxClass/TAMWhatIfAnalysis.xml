<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMWhatIfAnalysis</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMWhatIfAnalysis</c> class calculates all fields on the what if
/// calculation and planned analysis form.
/// </summary>
class TAMWhatIfAnalysis
{
    TAMTradePromotion       tamTradePromotion;
    MCROverriddenShipQty    incrementalQty;
    MCROverriddenShipQty    overrideIncrementalQty;

    AmountCur avgUnitPrice;
    AmountCur lsCost;
    AmountCur extOIDisc;
    AmountCur extBBDisc;
    AmountCur extAvgPrice;
    AmountCur unitOIDisc;
    AmountCur unitBBDisc;
    AmountCur totalVarUnitDisc;
    AmountCur totalExtDisc;
    AmountCur unitNetDiscPrice;
    AmountCur extNetDiscPrice;
    AmountCur totalVarCost;
    AmountCur totalCost;
    AmountCur sales;
    AmountCur netPromoSales;
    AmountCur netIncSales;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAllValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates all values that are needed for this class.
    /// </summary>
    /// <remarks>
    /// It is important to leave these calls in a specific order, because some calls depend
    /// on global variables set in prior calls.
    /// </remarks>
    public void calcAllValues()
    {
        // Quantities.
        this.calcIncrementalQty();
        this.calcOverriddenIncrementalQty();

        // LumpSum - Fixed cost.
        this.calcLumpSumCost();
        // Off invoice  and bill backs - Variable cost.
        this.calcTotalAvgPrice();
        this.calcExtAvgPrice();
        this.calcExtOIDiscounts();
        this.calcExtBBDiscounts();
        this.calcUnitOIDisc();
        this.calcUnitBBDisc();
        this.calcTotalVariableUnitDisc();
        this.calcTotalVariableExtDisc();
        this.calcUnitNetDiscPrice();
        this.calcExtNetDiscPrice();
        this.calcTotalVariableCost();
        this.calcTotalCost();
        // Planned ROI.
        this.calcSales();
        this.calcNetPromotionSales();
        this.calcNetIncrementalSales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcExtAvgPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the extended average price.
    /// </summary>
    protected void calcExtAvgPrice()
    {
        extAvgPrice = avgUnitPrice * tamTradePromotion.OverriddenShipQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcExtBBDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the total discount of bill back merchandising events.
    /// </summary>
    protected void calcExtBBDiscounts()
    {
        TAMMerchandisingEvent tamMerchandisingEvent;

        TAMCalcMerchandiseCost tamCalcMerchandiseCost = new TAMCalcMerchandiseCost(TAMPromoMerchEvent::MerchEvent);

        while select MerchandisingEventID from tamMerchandisingEvent
            where tamMerchandisingEvent.PromotionID == tamTradePromotion.PromotionID
            && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::BillBack
        {
            tamCalcMerchandiseCost = new TAMCalcMerchandiseCost(TAMPromoMerchEvent::MerchEvent, tamMerchandisingEvent.MerchandisingEventID);
            extBBDisc += tamCalcMerchandiseCost.calcMerchEventCost(MCRMerchandisingEventCategory::BillBack, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcExtNetDiscPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the planned total sales for a promotion after all promotional
    /// discounts are taken.
    /// </summary>
    protected void calcExtNetDiscPrice()
    {
        extNetDiscPrice = unitNetDiscPrice * tamTradePromotion.OverriddenShipQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcExtOIDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the extended off invoice discount amount.
    /// </summary>
    protected void calcExtOIDiscounts()
    {
        Integer i = 0;
        TAMMerchandisingEvent tamMerchandisingEvent;
        TAMCalcMerchandiseCost tamCalcMerchandiseCost;

        while select MerchandisingEventID from tamMerchandisingEvent
            where tamMerchandisingEvent.PromotionID == tamTradePromotion.PromotionID
            && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::OffInvoice
        {
            i++;
            tamCalcMerchandiseCost = new TAMCalcMerchandiseCost(TAMPromoMerchEvent::MerchEvent, tamMerchandisingEvent.MerchandisingEventID);
            extOIDisc += tamCalcMerchandiseCost.calcMerchEventCost(MCRMerchandisingEventCategory::OffInvoice, false);
        }

        if (!i)
        {
            i = 1;
        }
        extOIDisc = extOIDisc/i;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIncrementalQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the qty expected to sell during the promotion period with lift.
    /// </summary>
    protected void calcIncrementalQty()
    {
        incrementalQty = (tamTradePromotion.LiftPercent * 0.01) * tamTradePromotion.BaseUnits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLumpSumCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost of all lump sum events on a promotion.
    /// </summary>
    protected void calcLumpSumCost()
    {
        TAMMerchEventPricing tamMerchEventPricing;
        TAMMerchandisingEvent tamMerchandisingEvent;

        select sum(LumpSumAmount) from tamMerchEventPricing
            exists join tamMerchandisingEvent
            where tamMerchEventPricing.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                && tamMerchandisingEvent.PromotionID == tamTradePromotion.PromotionID
                && tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::LumpSum;

        lsCost = tamMerchEventPricing.LumpSumAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNetIncrementalSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates sales above and beyond the amount of
    /// sales without the promotion.
    /// </summary>
    protected void calcNetIncrementalSales()
    {
        netIncSales = netPromoSales - sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNetPromotionSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates sales for the promotion.
    /// </summary>
    protected void calcNetPromotionSales()
    {
        netPromoSales = (tamTradePromotion.OverriddenShipQty * avgUnitPrice) - totalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOverriddenIncrementalQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the incremental planned qty of sales based on the overridden ship qty.
    /// </summary>
    protected void calcOverriddenIncrementalQty()
    {
        overrideIncrementalQty = tamTradePromotion.OverriddenShipQty - tamTradePromotion.BaseUnits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total sales of all items on a promotion.
    /// </summary>
    protected void calcSales()
    {
        sales = tamTradePromotion.BaseUnits * avgUnitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalAvgPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the average price of an item on the promotion
    /// in the promotion unit of measure.
    /// </summary>
    void calcTotalAvgPrice()
    {
        TAMMerchandisingEvent       tamMerchandisingEvent;
        TAMTradePromotion           tamTradePromotionLocal;
        TAMPromotionItem            merchEventItems;
        MCRWeighting                totalWeight = 0;
        AmountCur                   pricePerUnit;
        AmountCur                   amountInPromoUnit;
        AmountCur                   weightedAmount;
        AmountCur                   amountInPromoCurrency;
        InventTableModule           inventTableModule;
        Qty                         unitConversionFactor;
        AmountCur                   amountCurrencyConversion;

        while select UnitID, Currency from tamTradePromotionLocal
            where tamTradePromotionLocal.PromotionID == tamTradePromotion.PromotionID
        join RecId from tamMerchandisingEvent order by MerchandisingEventCategory
            where tamMerchandisingEvent.PromotionID == tamTradePromotion.PromotionID
        join ItemID, Weighting, InventDimID from merchEventItems
            where merchEventItems.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
        {
            totalWeight += merchEventItems.Weighting;

            inventTableModule = InventTableModule::find(merchEventItems.ItemID, ModuleInventPurchSales::Sales);
            unitConversionFactor = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                                        merchEventItems.ItemID,
                                                        merchEventItems.InventDimID,
                                                        1,
                                                        tamTradePromotionLocal.UnitID,
                                                        InventTable::find(merchEventItems.ItemID).inventUnitId());

            pricePerUnit = inventTableModule.price() / inventTableModule.priceUnit();
            amountInPromoUnit = unitConversionFactor * pricePerUnit;
                weightedAmount = amountInPromoUnit * merchEventItems.Weighting;
                amountCurrencyConversion = ExchangeRateHelper::curPrice2CurPrice(weightedAmount, CompanyInfoHelper::standardCurrency(), tamTradePromotionLocal.Currency);
                amountInPromoCurrency += amountCurrencyConversion;
            }
        if (!totalWeight)
        {
            totalWeight = 1;
        }
        avgUnitPrice = amountInPromoCurrency/totalWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates all costs associated with a promotion.
    /// </summary>
    protected void calcTotalCost()
    {
        totalCost = totalVarCost + LSCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalVariableCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total cost of bill backs and off
    /// invoices on a promotion.
    /// </summary>
    protected void calcTotalVariableCost()
    {
        totalVarCost = totalExtDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalVariableExtDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the off invoice and bill back discounts multiplied by
    /// the total qty expected to be sold during the promotion.
    /// </summary>
    protected void calcTotalVariableExtDisc()
    {
        totalExtDisc = totalVarUnitDisc * tamTradePromotion.OverriddenShipQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalVariableUnitDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the bill back plus off invoice cost.
    /// </summary>
    protected void calcTotalVariableUnitDisc()
    {
        totalVarUnitDisc = unitOIDisc + unitBBDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcUnitBBDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the bill back discount cost.
    /// </summary>
    protected void calcUnitBBDisc()
    {
        MCROverriddenShipQty overriddenShipQty;

        if (!tamTradePromotion.OverriddenShipQty)
        {
            overriddenShipQty = 1;
        }
        else
        {
            overriddenShipQty = tamTradePromotion.OverriddenShipQty;
        }
        unitBBDisc = extBBDisc/overriddenShipQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcUnitNetDiscPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the unit price after promotional discounts.
    /// </summary>
    protected void calcUnitNetDiscPrice()
    {
        unitNetDiscPrice = avgUnitPrice - totalVarUnitDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcUnitOIDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the off invoice discount cost.
    /// </summary>
    protected void calcUnitOIDisc()
    {
        MCROverriddenShipQty overriddenShipQty;

        if (!tamTradePromotion.OverriddenShipQty)
        {
            overriddenShipQty = 1;
        }
        else
        {
            overriddenShipQty = tamTradePromotion.OverriddenShipQty;
        }
        unitOIDisc = extOIDisc/overriddenShipQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvgUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the average unit price.
    /// </summary>
    /// <returns>
    /// The average unit price.
    /// </returns>
    public AmountCur getAvgUnitPrice()
    {
        return avgUnitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtAvgPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the extended average price.
    /// </summary>
    /// <returns>
    /// The extended average price.
    /// </returns>
    public AmountCur getExtAvgPrice()
    {
        return extAvgPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtBBDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the extended bill back discount.
    /// </summary>
    /// <returns>
    /// The extended bill back discount.
    /// </returns>
    public AmountCur getExtBBDisc()
    {
        return extBBDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtNetDiscPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the extended prices after discounts.
    /// </summary>
    /// <returns>
    /// The extended prices after discounts.
    /// </returns>
    public AmountCur getExtNetDiscPrice()
    {
        return extNetDiscPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtOIDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the extended off invoice discount.
    /// </summary>
    /// <returns>
    /// The extended off invoice discount.
    /// </returns>
    public AmountCur getExtOIDisc()
    {
        return extOIDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncrementalQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity that is planned to be sold above the normal levels due to the
    /// promotion.
    /// </summary>
    /// <returns>
    /// The quantity that is planned to be sold above the normal
    /// levels due to the promotion.
    /// </returns>
    public MCROverriddenShipQty getIncrementalQty()
    {
        return incrementalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLSCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the lump sum cost.
    /// </summary>
    /// <returns>
    /// The lump sum cost.
    /// </returns>
    public AmountCur getLSCost()
    {
        return lsCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNetIncSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales above normal amount
    /// due to a promotion.
    /// </summary>
    /// <returns>
    /// The sales above normal amount due to a promotion.
    /// </returns>
    public AmountCur getNetIncSales()
    {
        return netIncSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNetPromoSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales for the promotion.
    /// </summary>
    /// <returns>
    /// The sales amount due to a promotion.
    /// </returns>
    public AmountCur getNetPromoSales()
    {
        return netPromoSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverriddenIncrementalQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the qty to be sold over the normal
    /// amount due to the promotion.
    /// </summary>
    /// <returns>
    /// The qty to be sold over the normal
    /// amount due to the promotion.
    /// </returns>
    public MCROverriddenShipQty getOverriddenIncrementalQty()
    {
        return overrideIncrementalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the overall sales for the promotion.
    /// </summary>
    /// <returns>
    /// The overall sales for the promotion.
    /// </returns>
    public AmountCur getSales()
    {
        return sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total cost of the promotion.
    /// </summary>
    /// <returns>
    /// The total cost of the promotion.
    /// </returns>
    public AmountCur getTotalCost()
    {
        return totalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalExtDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total off invoice and
    /// bill back cost.
    /// </summary>
    /// <returns>
    /// The total off invoice and
    /// bill back cost.
    /// </returns>
    public AmountCur getTotalExtDisc()
    {
        return totalExtDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalVarCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total variable cost.
    /// </summary>
    /// <returns>
    /// The total variable cost.
    /// </returns>
    public AmountCur getTotalVarCost()
    {
        return totalVarCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalVarUnitDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit discounts for off invoice and bill back.
    /// </summary>
    /// <returns>
    /// The unit discounts for off invoice and bill back.
    /// </returns>
    public AmountCur getTotalVarUnitDisc()
    {
        return totalVarUnitDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitBBDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bill back discounts.
    /// </summary>
    /// <returns>
    /// The bill back discounts.
    /// </returns>
    public AmountCur getUnitBBDisc()
    {
        return unitBBDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitNetDiscPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit price after off invoice and bill back discounts.
    /// </summary>
    /// <returns>
    /// The unit price after off invoice and bill back discounts.
    /// </returns>
    public AmountCur getUnitNetDiscPrice()
    {
        return unitNetDiscPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitOIDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the off invoice discounts.
    /// </summary>
    /// <returns>
    /// The off invoice discounts.
    /// </returns>
    public AmountCur getUnitOIDisc()
    {
        return unitOIDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes all values to 0.
    /// </summary>
    public void initValues()
    {
        tamTradePromotion = null;
        incrementalQty = 0;
        overrideIncrementalQty = 0;

        avgUnitPrice = 0;
        lsCost = 0;
        extOIDisc = 0;
        extBBDisc = 0;
        extAvgPrice = 0;
        unitOIDisc = 0;
        unitBBDisc = 0;
        totalVarUnitDisc = 0;
        totalExtDisc = 0;
        unitNetDiscPrice = 0;
        extNetDiscPrice = 0;
        totalVarCost = 0;
        totalCost = 0;
        sales = 0;
        netPromoSales = 0;
        netIncSales = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values and sets the passed buffer.
    /// </summary>
    /// <param name="_tamTradePromotion">
    /// The <c>TAMTradePromotion</c> to be set.
    /// </param>
    public void new(TAMTradePromotion _tamTradePromotion)
    {
        this.initValues();
        tamTradePromotion = _tamTradePromotion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>