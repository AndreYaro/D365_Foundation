<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductTemplateApplyManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EcoResProductTemplateApplyManager</c> class applies templates to released products selected in a form.
/// </summary>
class EcoResProductTemplateApplyManager
{
    Set         setQuestionsAsked;
    EcoResProductTemplateApplyManagerUtils  templateApplyManagerUtils;
    SysRecordTemplateFactory                recordTemplateFactory;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies released product template to a product.
    /// </summary>
    /// <param name="_inventTable">
    /// An <c>InventTable</c> buffer for which the template will be applied. The buffer can come from a
    /// form. In this case the template will be applied to all selected records.
    /// </param>
    /// <remarks>
    /// The <c>InventTable</c> buffer can come from a form. In this case the template will be applied to
    /// all selected records.
    /// </remarks>
    public void applyTemplate(InventTable _inventTable)
    {
        Common              common;
        FormRun             callingForm;
        int                 dataSourceNo;

        container recordTemplateValues = this.getRecordTemplateValues(_inventTable);

        if (recordTemplateValues)
        {
            if (#PdsEnabled && ! this.canApplyTemplateToAllRecords(recordTemplateValues, _inventTable))
            {
                return;
            }

            if (FormDataUtil::isFormDataSource(_inventTable))
            {
                FormDataSource formDataSource = FormDataUtil::getFormDataSource(_inventTable) as FormDataSource;
                for (   common = formDataSource.getFirst(true)
                            ? formDataSource.getFirst(true)
                            : formDataSource.cursor();
                        common;
                        common = formDataSource.getNext())
                {
                    try
                    {
                        this.callApplyTemplateToSingleRecordOperation(common as InventTable, recordTemplateValues);
                    }
                    catch (Exception::Error)
                    {
                        exceptionTextFallThrough();
                    }
                }
            }
            else
            {
                this.callApplyTemplateToSingleRecordOperation(_inventTable, recordTemplateValues);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTemplateForInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the template values to the specified <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// An <c>InventTable</c> record.
    /// </param>
    /// <param name="_recordTemplateValues">
    /// A container that contains the template values.
    /// </param>
    protected void applyTemplateForInventTable(
        InventTable _inventTable,
        container   _recordTemplateValues)
    {
        SysRecordTemplate recordTemplate = this.recordTemplateFactory().newRecordTemplateFromCommon(_inventTable);
        recordTemplate.parmRecordTemplateValues(_recordTemplateValues);
        recordTemplate.createRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>callApplyTemplateToSingleRecordOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the template operation to a single record.
    /// </summary>
    /// <param name="_inventTable">
    /// An <c>InventTable</c> record.
    /// </param>
    /// <param name="_recordTemplateValues">
    /// A container with the data for the template to be applied.
    /// </param>
    protected void callApplyTemplateToSingleRecordOperation(
        InventTable _inventTable,
        container   _recordTemplateValues)
    {
        this.templateApplyManagerUtils().applyTemplate(
            _recordTemplateValues,
            _inventTable.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canApplyTemplateToAllRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the template values can be applied to all selected records.
    /// </summary>
    /// <param name="_recordTemplateValues">
    /// A container that contains the template values.
    /// </param>
    /// <param name="_inventTable">
    /// A record from the <c>InventTable</c> table.
    /// </param>
    /// <returns>
    /// true if the template values can be applied to all selected records; otherwise, false .
    /// </returns>
    protected boolean canApplyTemplateToAllRecords(container   _recordTemplateValues, InventTable _inventTable)
    {
        InventTable         inventTableTarget;
        InventTable         inventTableTemplate;
        Boolean             result = true;

        this.applyTemplateForInventTable(inventTableTemplate,_recordTemplateValues);

        if (FormDataUtil::isFormDataSource(_inventTable))
        {
            FormDataSource formDataSource = FormDataUtil::getFormDataSource(_inventTable) as FormDataSource;
            for (inventTableTarget = formDataSource.getFirst(true) is inventTable ? formDataSource.getFirst(true) : formDataSource.cursor();
                 inventTableTarget.RecId && result;
                 inventTableTarget = formDataSource.getNext())
            {
                result = this.canApplyTemplateToSingleRecord(inventTableTemplate,inventTableTarget);
            }
        }
        else
        {
            result = this.canApplyTemplateToSingleRecord(inventTableTemplate,_inventTable);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canApplyTemplateToSingleRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the template values can be applied to the specified <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTableTemplate">
    /// An <c>InventTable</c> record which contains the template values.
    /// </param>
    /// <param name="_inventTableTarget">
    /// An <c>InventTable</c> record which is the target for the template values.
    /// </param>
    /// <returns>
    /// true if the template values can be applied; otherwise, false .
    /// </returns>
    protected boolean canApplyTemplateToSingleRecord(
        InventTable     _inventTableTemplate,
        inventTable     _inventTableTarget)
    {
        boolean     applyTemplate = true;

        if (_inventTableTemplate.PmfProductType != _inventTableTarget.PmfProductType)
        {
            if (this.canPromptUser())
            {
                if (!setQuestionsAsked.in("@PRO2651"))
                {
                    applyTemplate = this.promptContinue("@PRO2651");
                    setQuestionsAsked.add("@PRO2651");
                }
            }
            else
            {
                applyTemplate = false;
            }
        }

        return applyTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPromptUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the user can be prompted.
    /// </summary>
    /// <returns>
    /// true if user can be prompted; otherwise, false .
    /// </returns>
    protected boolean canPromptUser()
    {
        return   appl.ttsLevel() == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordTemplateValues</Name>
				<Source><![CDATA[
    protected container getRecordTemplateValues(InventTable _inventTable)
    {
        SysRecordTemplate recordTemplate = this.recordTemplateFactory().newRecordTemplateFromCommon(_inventTable);
        recordTemplate.parmForceCompanyTemplate('');
        return recordTemplate.getRecordTemplateValues(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        setQuestionsAsked = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecordTemplateFactory</Name>
				<Source><![CDATA[
    public SysRecordTemplateFactory parmRecordTemplateFactory(SysRecordTemplateFactory _recordTemplateFactory = recordTemplateFactory)
    {
        recordTemplateFactory = _recordTemplateFactory;

        return recordTemplateFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateApplyManagerUtils</Name>
				<Source><![CDATA[
    public EcoResProductTemplateApplyManagerUtils parmTemplateApplyManagerUtils(
        EcoResProductTemplateApplyManagerUtils _templateApplyManagerUtils = templateApplyManagerUtils)
    {
        templateApplyManagerUtils = _templateApplyManagerUtils;

        return templateApplyManagerUtils;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptContinue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts the user to continue.
    /// </summary>
    /// <param name="_question">
    /// A string value that contains a question to the user.
    /// </param>
    /// <returns>
    /// true if the user selects ok to continue; otherwise, false .
    /// </returns>
    protected boolean promptContinue(Str   _question)
    {
        return Box::okCancel(_question, DialogButton::Cancel) == DialogButton::Ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordTemplateFactory</Name>
				<Source><![CDATA[
    protected SysRecordTemplateFactory recordTemplateFactory()
    {
        if (!recordTemplateFactory)
        {
            throw error(Error::missingParameter(this));
        }

        return recordTemplateFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateApplyManagerUtils</Name>
				<Source><![CDATA[
    protected EcoResProductTemplateApplyManagerUtils templateApplyManagerUtils()
    {
        if (!templateApplyManagerUtils)
        {
            throw error(Error::missingParameter(this));
        }

        return templateApplyManagerUtils;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductTemplateApplyManager construct()
    {
        return new EcoResProductTemplateApplyManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (!_args)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Common common = _args.record();
        if (    common
            &&  common is InventTable)
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
            {
                EcoResProductTemplateApplyManager productTemplateApplyManager = EcoResProductTemplateApplyManager::newDefault();
                productTemplateApplyManager.applyTemplate(common as InventTable);
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>EcoResProductTemplateApplyManager</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>EcoResProductTemplateApplyManager</c> class.
    /// </returns>
    public static EcoResProductTemplateApplyManager newDefault()
    {
        EcoResProductTemplateApplyManager productTemplateApplyManager = EcoResProductTemplateApplyManager::construct();

        productTemplateApplyManager.parmTemplateApplyManagerUtils(EcoResProductTemplateApplyManagerUtils::newDefault());
        productTemplateApplyManager.parmRecordTemplateFactory(SysRecordTemplateFactory::construct());

        return productTemplateApplyManager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>