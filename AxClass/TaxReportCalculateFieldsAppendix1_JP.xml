<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportCalculateFieldsAppendix1_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class TaxReportCalculateFieldsAppendix1_JP extends TaxReportCalculateFieldsAppendix_JP
{
    protected TaxReportDataLayout_JP appendix2DataLayout;
    protected MainAccountNum badDebtAccountNum;
    protected LedgerConsumptionTaxCalcTrans_JP taxCalcTrans10;
    protected TaxOriginAmount_JP tax8ReducedRefundableAmount;
    protected TaxOriginAmount_JP tax8ReducedPayableAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTaxReportLines</Name>
				<Source><![CDATA[
    protected void calculateTaxReportLines()
    {
        super();

        this.updateLocalConsumptionTaxItems();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCalculation</Name>
				<Source><![CDATA[
    protected void initializeCalculation()
    {
        super();

        badDebtAccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(LedgerBadDebtAccounts_JP::getLedgerBadDebtDimension());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxValueType</Name>
				<Source><![CDATA[
    protected void calculateTaxValueType(TaxValue _taxValue, TaxType_JP _taxType, TaxReportAmounts_JP _amounts)
    {
        if (!_taxValue)
        {
            return;
        }

        LedgerConsumptionTaxCalcTrans_JP taxCalcTrans = this.inititializeTaxCalcTrans(_taxValue, _taxType);

        this.calculateTaxReportLine(taxCalcTrans, _amounts);

        taxCalcTrans.write();

        if (_taxValue == 10)
        {
            taxCalcTrans10 = taxCalcTrans;
        }
        else if (_taxValue == 8 && _taxType == TaxType_JP::Reduced)
        {
            tax8ReducedRefundableAmount = taxCalcTrans.CalcItem8;
            tax8ReducedPayableAmount = taxCalcTrans.CalcItem9;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxReportLine</Name>
				<Source><![CDATA[
    private void calculateTaxReportLine(LedgerConsumptionTaxCalcTrans_JP _taxCalcTrans, TaxReportAmounts_JP _amounts)
    {
        LedgerConsumptionTaxCalcTrans_JP taxCalcTransAppendix2 = this.getTaxCalcTrans(_taxCalcTrans.TaxValue, _taxCalcTrans.TaxType, appendix2DataLayout, false);

        _taxCalcTrans.RatioOfTaxableSales = taxCalcTransAppendix2.RatioOfTaxableSales;
        _taxCalcTrans.CalcItem1_1 = TaxReportCalculateFields_JP::trunc1000(_amounts.amount1());

        if (taxCalcTransAppendix2.RatioOfTaxableSales < RatioTreshold && (_taxCalcTrans.TaxValue == 10 || _taxCalcTrans.TaxValue == 8 && _taxCalcTrans.TaxType != TaxType_JP::Reduced))
        {
            _taxCalcTrans.CalcItem1_2 = TaxReportCalculateFields_JP::trunc1000(_amounts.amount12());
            _taxCalcTrans.CalcItem5_2 = trunc(_amounts.nationalAmount7012());
        }

        _taxCalcTrans.CalcItem1 = _taxCalcTrans.CalcItem1_1 + _taxCalcTrans.CalcItem1_2;
        _taxCalcTrans.CalcItem2 = trunc(TaxReportCalculateFields_JP::calculateNationalTaxAmount(_taxCalcTrans.TaxValue, _taxCalcTrans.TaxType, _taxCalcTrans.CalcItem1) * _taxCalcTrans.TaxValue / 100);

        _taxCalcTrans.CalcItem3 = taxCalcTransAppendix2.CalcItem25 + taxCalcTransAppendix2.CalcItem26;
        _taxCalcTrans.CalcItem4 = taxCalcTransAppendix2.CalcItem24;
        
        _taxCalcTrans.CalcItem5_1 = trunc(_amounts.nationalAmount7001());
        _taxCalcTrans.CalcItem5 = _taxCalcTrans.CalcItem5_1 + _taxCalcTrans.CalcItem5_2;

        Amount amount8308 = _amounts.nationalAmount8308();

        if (!amount8308)
        {
            amount8308 = TaxReportCalculateFields_JP::calculateNationalTaxAmount(
                _taxCalcTrans.TaxValue,
                _taxCalcTrans.TaxType,
                this.getTaxAmountForMainAccount(badDebtAccountNum, _taxCalcTrans.TaxValue, _taxCalcTrans.TaxType));
        }
        
        _taxCalcTrans.CalcItem6 = trunc(amount8308);
        _taxCalcTrans.CalcItem7 = _taxCalcTrans.CalcItem4 + _taxCalcTrans.CalcItem5 + _taxCalcTrans.CalcItem6;
        _taxCalcTrans.CalcItem8 = _taxCalcTrans.CalcItem7 - _taxCalcTrans.CalcItem2 - _taxCalcTrans.CalcItem3;
        _taxCalcTrans.CalcItem9 = _taxCalcTrans.CalcItem2 + _taxCalcTrans.CalcItem3 - _taxCalcTrans.CalcItem7;
        _taxCalcTrans.CalcItem10 = max(0, _taxCalcTrans.CalcItem9) - max(0, _taxCalcTrans.CalcItem8);

        if (_taxCalcTrans.TaxValue == 5 || (_taxCalcTrans.TaxValue == 8 && _taxCalcTrans.TaxType != TaxType_JP::Reduced))
        {
            this.calculateLocalConsumptionTaxItems(_taxCalcTrans, _taxCalcTrans.CalcItem8, _taxCalcTrans.CalcItem9);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxAmount</Name>
				<Source><![CDATA[
    private TaxAmount calculateTaxAmount(TaxValue _taxValue, TaxType_JP _taxType, Amount _amount)
    {
        switch (_taxValue)
        {
            case 5:
                return _amount * 25 / 100;

            case 8:
                return _taxType == TaxType_JP::Reduced ? _amount * 22 / 78 : _amount * 17 / 63;

            case 10:
                return _amount * 22 / 78;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLocalConsumptionTaxItems</Name>
				<Source><![CDATA[
    protected void calculateLocalConsumptionTaxItems(
        LedgerConsumptionTaxCalcTrans_JP _taxCalcTrans,
        TaxOriginAmount_JP _taxRefundableAmount,
        TaxOriginAmount_JP _taxPayableAmount)
    {
        _taxCalcTrans.CalcItem11 = _taxRefundableAmount;
        _taxCalcTrans.CalcItem12 = _taxPayableAmount;
        _taxCalcTrans.CalcItem13 = max(0, _taxCalcTrans.CalcItem12) - max(0, _taxCalcTrans.CalcItem11);
        _taxCalcTrans.CalcItem14 = trunc(this.calculateTaxAmount(_taxCalcTrans.TaxValue, _taxCalcTrans.TaxType, _taxCalcTrans.CalcItem11));
        _taxCalcTrans.CalcItem15 = trunc(this.calculateTaxAmount(_taxCalcTrans.TaxValue, _taxCalcTrans.TaxType, _taxCalcTrans.CalcItem12));
        _taxCalcTrans.CalcItem16 = max(0, _taxCalcTrans.CalcItem15) - max(0, _taxCalcTrans.CalcItem14);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLocalConsumptionTaxItems</Name>
				<Source><![CDATA[
    private void updateLocalConsumptionTaxItems()
    {
        if (!taxCalcTrans10)
        {
            return;
        }

        this.calculateLocalConsumptionTaxItems(
            taxCalcTrans10, 
            taxCalcTrans10.CalcItem8 + tax8ReducedRefundableAmount, 
            taxCalcTrans10.CalcItem9 + tax8ReducedPayableAmount);

        taxCalcTrans10.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    internal static TaxReportCalculateFieldsAppendix1_JP newFromParameters(
        TaxPeriod _taxPeriod,
        FromDate _fromDate,
        ToDate _toDate,
        TypeOfDeclaration_JP _typeOfDeclaration,
        boolean _amendment,
        Map _taxTypeValues,
        CalcMethod_JP _calcMethod,
        TaxReportDataLayout_JP _dataLayout,
        TaxReportDataLayout_JP _appendix2DataLayout)
    {
        if (!_taxTypeValues)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        TaxReportCalculateFieldsAppendix1_JP instance = new TaxReportCalculateFieldsAppendix1_JP();

        instance.taxPeriod = _taxPeriod;
        instance.fromDate = _fromDate;
        instance.toDate = _toDate;
        instance.typeOfDeclaration = _typeOfDeclaration;
        instance.amendment = _amendment;
        instance.taxTypeValues = _taxTypeValues;
        instance.calcMethod = _calcMethod;
        instance.dataLayout = _dataLayout;
        instance.appendix2DataLayout = _appendix2DataLayout;

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    internal static void calculate(
        TaxPeriod _taxPeriod,
        FromDate _fromDate,
        ToDate _toDate,
        TypeOfDeclaration_JP _typeOfDeclaration,
        boolean _amendment,
        Map _taxTypeValues,
        CalcMethod_JP _calcMethod,
        TaxReportDataLayout_JP _dataLayout,
        TaxReportDataLayout_JP _appendix2DataLayout)
    {
        TaxReportCalculateFieldsAppendix1_JP::newFromParameters(
            _taxPeriod,
            _fromDate,
            _toDate,
            _typeOfDeclaration,
            _amendment,
            _taxTypeValues,
            _calcMethod,
            _dataLayout,
            _appendix2DataLayout).calculateTaxReportSheet();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>