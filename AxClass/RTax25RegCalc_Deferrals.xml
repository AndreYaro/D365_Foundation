<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_Deferrals</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25RegCalc_Deferrals extends RTax25RegCalc implements BatchRetryable
{
    RDeferralsBook          rDeferralsBook;
    RDeferralsTable         rDeferralsTable;
    RTax25Parameters        rTax25Parameters;
    RDeferralsAmount        totalAmount,
                            totalTypeAmount,
                            writtingOffSum,
                            totalDeferrals,
                            displayAmount;

    RefRecId                profitTableRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        Query                   query;

        QueryRun                queryRun;
        RefRecId                lastProfitTableRecId = 0;
        RDeferralsId            lastDeferralsId;
        boolean                 firstIteration = false;

        RDeferralsTransReportingView rDeferralsTrans;

        query = this.createQuery();

        try
        {
            ttsbegin;

            super();

            regQuery.addHeaderRecord();

            queryRun = new QueryRun(query);
            this.progressInit("",SysQuery::countTotal(queryRun));

            while (queryRun.next())
            {
                rDeferralsBook  = queryRun.get(tablenum(RDeferralsBook));
                rDeferralsTable = queryRun.get(tablenum(RDeferralsTable));

                rTax25PeriodIterator.first();

                do
                {
                    select firstonly RecId from rDeferralsTrans
                           where rDeferralsTrans.DeferralsId    == rDeferralsBook.DeferralsId      &&
                                rDeferralsTrans.DeferralsBookId == rDeferralsBook.DeferralsBookId  &&
                                rDeferralsTrans.TransType       == RDeferralsTransType::WritingOff &&
                                rDeferralsTrans.AccountingDate  >= rTax25PeriodIterator.fromDateAccounting() &&
                                rDeferralsTrans.AccountingDate  <= rTax25PeriodIterator.toDateAccounting()   &&
                                rDeferralsTrans.ReportingDate   >= rTax25PeriodIterator.fromDateReporting()  &&
                                rDeferralsTrans.ReportingDate   <= rTax25PeriodIterator.toDateReporting();

                    if (rDeferralsTrans.RecId)
                    {
                        break;
                    }
                }
                while (rTax25PeriodIterator.next());

                if (!rDeferralsTrans.RecId)
                {
                    continue;
                }

                profitTableRecId = RTax25ProfitTable::findDefaultDimension(rDeferralsBook.DefaultDimension).RecId;

                progress.setText(strfmt("@GLS104289", rDeferralsBook.DeferralsId));

                if (lastProfitTableRecId != profitTableRecId
                 || lastDeferralsId != rDeferralsBook.DeferralsId
                 || !firstIteration)
                {
                    if (lastDeferralsId != rDeferralsBook.DeferralsId && lastDeferralsId)
                    {
                        displayAmount = totalDeferrals;
                        regQuery.addFooterRecord(lastProfitTableRecId,
                                                 this.createFooter(),
                                                 0,
                                                 strfmt("@SYS99852", lastDeferralsId));
                        totalDeferrals = 0;
                    }
                    if (lastProfitTableRecId != profitTableRecId || ! firstIteration)
                    {
                        if (firstIteration)
                        {
                            displayAmount = totalTypeAmount;
                            regQuery.addFooterRecord(lastProfitTableRecId,
                                                     this.createFooter(),
                                                     0,
                                                     lastProfitTableRecId ? strfmt("@GLS103974", RTax25ProfitTable::find(lastProfitTableRecId).ProfitId) : "@GLS104449");
                            totalTypeAmount = 0;
                        }
                        regQuery.addHeaderRecord(profitTableRecId,
                                                 conNull(),
                                                 0,
                                                 profitTableRecId ? strfmt("@GLS104112", RTax25ProfitTable::find(profitTableRecId).ProfitId) : "@GLS104447");
                        firstIteration = true;
                    }
                    if (lastDeferralsId != rDeferralsBook.DeferralsId)
                    {
                        regQuery.addHeaderRecord(profitTableRecId,
                                                 conNull(),
                                                 0,
                                                 strfmt("@GLS104112", rDeferralsBook.DeferralsId));
                    }
                }
                writtingOffSum = 0;
                rTax25PeriodIterator.first();

                do
                {
                while select rDeferralsTrans
                        order by ReportingDate asc
                    where rDeferralsTrans.DeferralsId     == rDeferralsBook.DeferralsId      &&
                          rDeferralsTrans.DeferralsBookId == rDeferralsBook.DeferralsBookId  &&
                          rDeferralsTrans.TransType       == RDeferralsTransType::WritingOff &&
                              rDeferralsTrans.AccountingDate  >= rTax25PeriodIterator.fromDateAccounting() &&
                              rDeferralsTrans.AccountingDate  <= rTax25PeriodIterator.toDateAccounting()   &&
                              rDeferralsTrans.ReportingDate   >= rTax25PeriodIterator.fromDateReporting()  &&
                              rDeferralsTrans.ReportingDate   <= rTax25PeriodIterator.toDateReporting()
                {
                    regQuery.addBodyRecord(profitTableRecId,
                                               this.createContainer2(rDeferralsTrans, profitTableRecId),
                                           rDeferralsTrans.TableId,
                                               rDeferralsTrans.TransRecId);
                    }
                }
                while (rTax25PeriodIterator.next());

                totalAmount     += writtingOffSum;
                totalTypeAmount += writtingOffSum;
                totalDeferrals  += writtingOffSum;

                lastProfitTableRecId    = profitTableRecId;
                lastDeferralsId = rDeferralsBook.DeferralsId;
            }
            progress.incCount();

            if (firstIteration)
            {
                if (lastDeferralsId)
                {
                    displayAmount = totalDeferrals;
                    regQuery.addFooterRecord(lastProfitTableRecId,
                                             this.createFooter(),
                                             0,
                                             strfmt("@SYS99852", lastDeferralsId));
                }
                totalDeferrals = 0;
                displayAmount  = totalTypeAmount;
                regQuery.addFooterRecord(lastProfitTableRecId,
                                         this.createFooter(),
                                         0,
                                         lastProfitTableRecId ? strfmt("@GLS103974", RTax25ProfitTable::find(lastProfitTableRecId).ProfitId) : "@GLS104449");
            }

            displayAmount = totalAmount;
            regQuery.addFooterRecord(0, this.createFooter(), 0);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>createFooter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container createFooter()
    {
        return [dateNull(), "", "", "", 0.0, "", totalDeferrals, dateNull(), 0.0, displayAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMonths</Name>
				<Source><![CDATA[
    #define.NoOfMthOfYr(12)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int getMonths(date _startDate, date _endDate)
    {
        int     years, months;

        if (_endDate >= _startDate)
        {
            years       = year(_endDate) - year(_startDate);
            months      = mthofyr(_endDate) - mthofyr(_startDate);
        }

        return months + years * #NoOfMthOfYr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    public ReportingDate_RU correctedPeriodDate(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        ReportingDate_RU                correctedPeriodDate;
        RDeferralsTransCorrectiveView   deferralsTrans;
        QueryRun                        queryRun;
        Query                           query = this.createQuery();
        QueryBuildDataSource            qbdsBook, qbdsTable, qbdsTrans;

        query = this.createQuery();

        qbdsBook = query.dataSourceTable(tableNum(RDeferralsBook));
        qbdsTable = query.dataSourceTable(tableNum(RDeferralsTable));

        qbdsTable.findRange(fieldNum(RDeferralsTable, AcquisitionDate)).value(queryRange(dateNull(), _toDateCorr));

        qbdsBook.firstOnly(true);
        qbdsBook.addSelectionField(fieldNum(RDeferralsBook, TableId));
        qbdsTable.joinMode(JoinMode::ExistsJoin);

        qbdsTrans = qbdsBook.addDataSource(tableNum(RDeferralsTransCorrectiveView));
        qbdsTrans.addLink(fieldNum(RDeferralsBook, DeferralsId), fieldNum(RDeferralsTransCorrectiveView, DeferralsId));
        qbdsTrans.addRange(fieldNum(RDeferralsTransCorrectiveView, DeferralsBookId)).value(queryValue(RTax25Parameters::find().DeferralsBookId));
        qbdsTrans.addRange(fieldNum(RDeferralsTransCorrectiveView, TransType)).value(queryValue(RDeferralsTransType::WritingOff));
        qbdsTrans.fetchMode(QueryFetchMode::One2One);
        qbdsTrans.addSortField(fieldNum(RDeferralsTransCorrectiveView, ReportingDate), SortOrder::Ascending);
        qbdsTrans.addRange(fieldNum(RDeferralsTransCorrectiveView, AccountingDate)).value(queryRange(_fromDateCalc, _toDateCalc));
        qbdsTrans.addRange(fieldNum(RDeferralsTransCorrectiveView, ReportingDate)).value(queryRange(dateNull(), _toDateCorr));
        qbdsTrans.addSelectionField(fieldNum(RDeferralsTransCorrectiveView, ReportingDate));

        queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            deferralsTrans = queryRun.get(tableNum(RDeferralsTransCorrectiveView));
            correctedPeriodDate = dateEndQtr(deferralsTrans.ReportingDate);
        }

        return correctedPeriodDate;
    }
]]></Source>
			</Method>
			<Method>
				<Name>createContainer2</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container createContainer2(
        RDeferralsTransReportingView _rDeferralsTrans,
        RefRecId        _profitTableRecId)
    {
        real                            monthsAmount;
        container                       contain;
        RTax25ProfitTable               profit = RTax25ProfitTable::find(_profitTableRecId);

        if (rDeferralsBook.LifeTime && rDeferralsBook.StartDeferralsDate <= dateTo)
        {
            monthsAmount = this.getMonths(rDeferralsBook.StartDeferralsDate, _rDeferralsTrans.ReportingDate) + 1;
            monthsAmount = rDeferralsBook.LifeTime > monthsAmount ? monthsAmount : rDeferralsBook.LifeTime;
        }

        writtingOffSum  += _rDeferralsTrans.Amount;

        contain = [rDeferralsTable.AcquisitionDate,
                   profit.ProfitId,
                   profit.Description,
                   RDeferralsTable::find(rDeferralsBook.DeferralsId).Name,
                   rDeferralsBook.DeferralsAmount,
                   int2str(rDeferralsBook.LifeTime),
                   _rDeferralsTrans.Amount,
                   rDeferralsBook.StartDeferralsDate,
                   monthsAmount,
                   writtingOffSum];

        return contain;
    }
]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query createQuery()
    {
        QueryBuildDataSource    queryBuildDataSource;

        Query query = new Query();

        queryBuildDataSource = query.addDataSource(tablenum(RDeferralsBook));
        queryBuildDataSource.addRange(fieldnum(RDeferralsBook, DeferralsBookId)).value(RTax25Parameters::find().DeferralsBookId);

        SysQuery::addOrderByDimensionAttribute(query,
                                               queryBuildDataSource.name(),
                                               fieldstr(RDeferralsBook, DefaultDimension),
                                               DimensionComponent::DimensionAttribute,
                                               SortOrder::Ascending,
                                               DimensionAttribute::find(RTax25Parameters::find().DimensionAttribute).Name);

        queryBuildDataSource = queryBuildDataSource.addDataSource(tablenum(RDeferralsTable));
        queryBuildDataSource.fetchMode(QueryFetchMode::One2One);
        queryBuildDataSource.joinMode(JoinMode::InnerJoin);
        queryBuildDataSource.relations(true);
        queryBuildDataSource.addRange(fieldnum(RDeferralsTable, AcquisitionDate)).value(queryRange(dateNull(), dateTo));

        return query;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>