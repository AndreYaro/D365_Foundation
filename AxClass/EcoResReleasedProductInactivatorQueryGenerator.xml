<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResReleasedProductInactivatorQueryGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for generating queries used for identifying products that can be made inactive.
/// </summary>
public class EcoResReleasedProductInactivatorQueryGenerator
{
    container                       baseQueryInventDistinctProduct;
    int                             minNumberOfDaysSinceCreation;
    int                             minNumberOfDaysSinceLastTransaction;
    EcoResProductLifecycleStateId   excludeStateId;
    boolean                         excludeAllInactiveForPlanningStates;
    boolean                         resultAsCount;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmBaseQueryInventDistinctProduct</Name>
				<Source><![CDATA[
    protected container parmBaseQueryInventDistinctProduct(container _baseQueryInventDistinctProduct = baseQueryInventDistinctProduct)
    {
        baseQueryInventDistinctProduct = _baseQueryInventDistinctProduct;
        return baseQueryInventDistinctProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinNumberOfDaysSinceCreation</Name>
				<Source><![CDATA[
    protected int parmMinNumberOfDaysSinceCreation(int _minNumberOfDaysSinceCreation = minNumberOfDaysSinceCreation)
    {
        minNumberOfDaysSinceCreation = _minNumberOfDaysSinceCreation;
        return minNumberOfDaysSinceCreation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinNumberOfDaysSinceLastTransaction</Name>
				<Source><![CDATA[
    protected int parmMinNumberOfDaysSinceLastTransaction(int _minNumberOfDaysSinceLastTransaction = minNumberOfDaysSinceLastTransaction)
    {
        minNumberOfDaysSinceLastTransaction = _minNumberOfDaysSinceLastTransaction;
        return minNumberOfDaysSinceLastTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeStateId</Name>
				<Source><![CDATA[
    protected EcoResProductLifecycleStateId parmExcludeStateId(EcoResProductLifecycleStateId _excludeStateId = excludeStateId)
    {
        excludeStateId = _excludeStateId;
        return excludeStateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeAllInactiveForPlanningStates</Name>
				<Source><![CDATA[
    protected boolean parmExcludeAllInactiveForPlanningStates(boolean _excludeAllInactiveForPlanningStates = excludeAllInactiveForPlanningStates)
    {
        excludeAllInactiveForPlanningStates = _excludeAllInactiveForPlanningStates;
        return excludeAllInactiveForPlanningStates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResultAsCount</Name>
				<Source><![CDATA[
    protected boolean parmResultAsCount(boolean _resultAsCount = resultAsCount)
    {
        resultAsCount = _resultAsCount;
        return resultAsCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for items, where the main output will be in an InventTable record. 
    /// </summary>
    /// <returns>The query for finding items.</returns>
    public Query getQueryForItem()
    {
        Query query = new Query(baseQueryInventDistinctProduct);
        QueryBuildDataSource qbdsInventDistinctProduct = query.dataSourceTable(tablenum(InventDistinctProduct));
        qbdsInventDistinctProduct.addRange(fieldNum(InventDistinctProduct, InventDimId)).value(queryValue(InventDim::findOrCreateBlank().inventDimId));
        qbdsInventDistinctProduct.addSelectionField(fieldnum(InventDistinctProduct, TableId));

        this.addFilterCurrentState(qbdsInventDistinctProduct);
                                                                                                                
        QueryBuildDataSource qbdsInventTable = qbdsInventDistinctProduct.addDataSource(tablenum(InventTable));
        qbdsInventTable.joinMode(JoinMode::InnerJoin);
        qbdsInventTable.fetchMode(QueryFetchMode::One2One);
        qbdsInventTable.addLink(fieldnum(InventDistinctProduct, ItemId), fieldnum(InventTable, ItemId));
        qbdsInventTable.addSelectionField(fieldnum(InventTable, ItemId));
        qbdsInventTable.addSelectionField(fieldnum(InventTable, Product));
        qbdsInventTable.addSelectionField(fieldnum(InventTable, CreatedDateTime));

        // The Item/Variant was created minimum x number of days ago
        qbdsInventTable.addRange(fieldNum(InventTable, CreatedDateTime)).value(SysQuery::range(dateNull(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - minNumberOfDaysSinceCreation));

        // Add all additional filters
        this.addFilters(qbdsInventDistinctProduct, fieldnum(InventDistinctProduct, ItemId));
 
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForVariant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for variants, where the main output will be in an InventDimCombination record.
    /// </summary>
    /// <returns>The query for finding variants.</returns>
    public Query getQueryForVariant()
    {
        Query query = new Query(baseQueryInventDistinctProduct);
        QueryBuildDataSource qbdsInventDistinctProduct = query.dataSourceTable(tablenum(InventDistinctProduct));
        qbdsInventDistinctProduct.addSelectionField(fieldnum(InventDistinctProduct, TableId));
        
        this.addFilterCurrentState(qbdsInventDistinctProduct);

        QueryBuildDataSource qbdsInventDimCombination = qbdsInventDistinctProduct.addDataSource(tablenum(InventDimCombination));
        qbdsInventDimCombination.joinMode(JoinMode::InnerJoin);
        qbdsInventDimCombination.fetchMode(QueryFetchMode::One2One);
        qbdsInventDimCombination.addLink(fieldnum(InventDistinctProduct, ItemId), fieldnum(InventDimCombination, ItemId));
        qbdsInventDimCombination.addLink(fieldnum(InventDistinctProduct, InventDimId), fieldnum(InventDimCombination, InventDimId));
        qbdsInventDimCombination.addSelectionField(fieldnum(InventDimCombination, ItemId));
        qbdsInventDimCombination.addSelectionField(fieldnum(InventDimCombination, InventDimId));
        qbdsInventDimCombination.addSelectionField(fieldnum(InventDimCombination, DistinctProductVariant));
        qbdsInventDimCombination.addSelectionField(fieldnum(InventDimCombination, CreatedDateTime));
                
        QueryBuildDataSource qbdsInventDimCombinationInventDim = qbdsInventDimCombination.addDataSource(tableNum(InventDim), 'InventDimCombinationInventDim');
        qbdsInventDimCombinationInventDim.joinMode(JoinMode::InnerJoin);
        qbdsInventDimCombinationInventDim.fetchMode(QueryFetchMode::One2One);
        qbdsInventDimCombinationInventDim.addLink(fieldnum(InventDimCombination, InventDimId), fieldnum(InventDim, InventDimId));
        qbdsInventDimCombinationInventDim.addSelectionField(fieldnum(InventDim, TableId));
        
        // The Item/Variant was created minimum x number of days ago
        qbdsInventDimCombination.addRange(fieldNum(InventDimCombination, CreatedDateTime)).value(SysQuery::range(dateNull(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - minNumberOfDaysSinceCreation));

        // Add all additional filters
        this.addFilters(qbdsInventDimCombination, fieldnum(InventDimCombination, ItemId), qbdsInventDimCombinationInventDim);
 
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForActiveDistinctProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for distinct product, where the main output will be in distinct products filter on
    /// product lifecycle not set or product lifecycle set for planning.
    /// </summary>
    /// <returns>The query for finding distinct product.</returns>
    public Query getQueryForActiveDistinctProducts()
    {
        Query query = new Query(baseQueryInventDistinctProduct);
        QueryBuildDataSource qbdsInventDistinctProduct = query.dataSourceTable(tablenum(InventDistinctProduct));
        qbdsInventDistinctProduct.addSelectionField(fieldnum(InventDistinctProduct, TableId));

        QueryBuildDataSource qbdsLifecycleStateInventDistinctProduct = qbdsInventDistinctProduct.addDataSource(tableNum(EcoResProductLifecycleState));
        qbdsLifecycleStateInventDistinctProduct.joinMode(JoinMode::NoExistsJoin);
        qbdsLifecycleStateInventDistinctProduct.addLink(fieldnum(InventDistinctProduct, ProductLifecycleStateId), fieldnum(EcoResProductLifecycleState, StateId));
        qbdsLifecycleStateInventDistinctProduct.addRange(fieldNum(EcoResProductLifecycleState, IsActiveForPlanning)).value(queryValue(NoYes::No));                                                                                                               
 
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilters</Name>
				<Source><![CDATA[
    protected void addFilters(QueryBuildDataSource _qbdsMainTable, FieldId _itemIdFieldId, QueryBuildDataSource _qbdsInventDimMain = null)
    {
        this.addFilterMinStockLevel(_qbdsMainTable, _itemIdFieldId, _qbdsInventDimMain);

        this.addFilterCoProducts(_qbdsMainTable, _itemIdFieldId, _qbdsInventDimMain);
                
        this.addFilterForecast(_qbdsMainTable, _itemIdFieldId, _qbdsInventDimMain);
        
        this.addFilterAgreementLine(_qbdsMainTable, _itemIdFieldId, _qbdsInventDimMain);

        this.addFilterKanbanRule(_qbdsMainTable, _itemIdFieldId, _qbdsInventDimMain);

        this.addFilterServiceOrderLine(_qbdsMainTable, _itemIdFieldId, _qbdsInventDimMain);
        
        this.addFilterBOMLine(_qbdsMainTable, _itemIdFieldId, _qbdsInventDimMain);

        this.addFilterProdTable(_qbdsMainTable, _itemIdFieldId, _qbdsInventDimMain);
        
        this.addFilterInventTrans(_qbdsMainTable, _itemIdFieldId, _qbdsInventDimMain);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterCurrentState</Name>
				<Source><![CDATA[
    protected void addFilterCurrentState(QueryBuildDataSource _qbdsInventDistinctProduct)
    {
        if (excludeAllInactiveForPlanningStates)
        {
            // The current product lifecycle state of the item/variant must not be InactiveForPlanning
            QueryBuildDataSource qbdsLifecycleStateInventDistinctProduct = _qbdsInventDistinctProduct.addDataSource(tableNum(EcoResProductLifecycleState));
            qbdsLifecycleStateInventDistinctProduct.joinMode(JoinMode::NoExistsJoin);
            qbdsLifecycleStateInventDistinctProduct.addLink(fieldnum(InventDistinctProduct, ProductLifecycleStateId), fieldnum(EcoResProductLifecycleState, StateId));
            qbdsLifecycleStateInventDistinctProduct.addRange(fieldNum(EcoResProductLifecycleState, IsActiveForPlanning)).value(queryValue(NoYes::No));
        }
        else
        {
            // The current product lifecycle state of the item/variant must be different from a specific state
            _qbdsInventDistinctProduct.addRange(fieldNum(InventDistinctProduct, ProductLifecycleStateId)).value(SysQuery::valueNot(excludeStateId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterKanbanRule</Name>
				<Source><![CDATA[
    protected void addFilterKanbanRule(QueryBuildDataSource _qbdsMainTable, FieldId _itemIdFieldId, QueryBuildDataSource _qbdsInventDimMain)
    {
        // No active Kanban rule for the item/variant
        QueryBuildDataSource qbdsLeanCoverage = _qbdsMainTable.addDataSource(tableNum(LeanCoverage));
        qbdsLeanCoverage.joinMode(JoinMode::NoExistsJoin);
        qbdsLeanCoverage.addLink(_itemIdFieldId, fieldnum(LeanCoverage, ItemId));
        qbdsLeanCoverage.addRange(fieldnum(LeanCoverage, ItemDataAreaId)).value(queryValue(curExt2dataareaid(tableNum(InventTable))));
        if (_qbdsInventDimMain)
        {
            qbdsLeanCoverage.addLink(fieldNum(InventDim, inventDimId), fieldnum(LeanCoverage, InventDimId), _qbdsInventDimMain.name());
            qbdsLeanCoverage.addRange(fieldnum(LeanCoverage, InventDimDataAreaId)).value(queryValue(curExt2dataareaid(tableNum(InventDim))));
        }
        qbdsLeanCoverage.addRange(fieldnum(LeanCoverage, RuleCoverageType)).value(queryValue(LeanRuleCoverageType::Product));

        QueryBuildDataSource qbdsLeanCoverageKanbanRule = qbdsLeanCoverage.addDataSource(tableNum(LeanCoverageKanbanRule));
        qbdsLeanCoverageKanbanRule.joinMode(JoinMode::InnerJoin);
        qbdsLeanCoverageKanbanRule.addLink(fieldNum(LeanCoverage, RecId), fieldnum(LeanCoverageKanbanRule, Coverage));
        qbdsLeanCoverageKanbanRule.addRange(fieldNum(LeanCoverageKanbanRule, ValidTo)).value(queryRange(DateTimeUtil::getSystemDateTime(), DateTimeUtil::maxValue()));
        qbdsLeanCoverageKanbanRule.addRange(fieldNum(LeanCoverageKanbanRule, ValidTo)).value(queryValue(DateTimeUtil::minValue()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterServiceOrderLine</Name>
				<Source><![CDATA[
    protected void addFilterServiceOrderLine(QueryBuildDataSource _qbdsMainTable, FieldId _itemIdFieldId, QueryBuildDataSource _qbdsInventDimMain)
    {
        const str ServiceOrderLineFilter = 'ServiceOrderLineFilter';
        const str InventDimSMAServiceOrderLine = 'InventDimSMAServiceOrderLine';
        
        // No "active" service order line for the item/variant
        QueryBuildDataSource qbdsServiceOrderLine = _qbdsMainTable.addDataSource(tableNum(SMAServiceOrderLine), ServiceOrderLineFilter);
        qbdsServiceOrderLine.joinMode(JoinMode::NoExistsJoin);
        qbdsServiceOrderLine.addLink(_itemIdFieldId, fieldnum(SMAServiceOrderLine, ItemId), _qbdsMainTable.name());
        qbdsServiceOrderLine.addRange(fieldnum(SMAServiceOrderLine, ServiceOrderStatus)).value(queryValue(SMAServiceOrderStatus::Created));
        
        this.addInventDimProductDimJoin(_qbdsInventDimMain, qbdsServiceOrderLine, InventDimSMAServiceOrderLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterMinStockLevel</Name>
				<Source><![CDATA[
    protected void addFilterMinStockLevel(QueryBuildDataSource _qbdsMainTable, FieldId _itemIdFieldId, QueryBuildDataSource _qbdsInventDimMain)
    {
        const str InventDimReqItemTable = 'InventDimReqItemTable';

        // No minimum stock level has been set in item coverage for the item/variant
        QueryBuildDataSource qbdsReqItemTable = _qbdsMainTable.addDataSource(tableNum(ReqItemTable));
        qbdsReqItemTable.joinMode(JoinMode::NoExistsJoin);
        qbdsReqItemTable.addLink(_itemIdFieldId, fieldnum(ReqItemTable, ItemId));
        qbdsReqItemTable.addRange(fieldnum(ReqItemTable, MinInventOnhand)).value(SysQuery::valueNot(0));
        
        this.addInventDimProductDimJoin(_qbdsInventDimMain, qbdsReqItemTable, InventDimReqItemTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterForecast</Name>
				<Source><![CDATA[
    protected void addFilterForecast(QueryBuildDataSource _qbdsMainTable, FieldId _itemIdFieldId, QueryBuildDataSource _qbdsInventDimMain)
    {
        const str InventDimForecastInvent = 'InventDimForecastInvent';
        
        // No future demand or supply forecast for the item/variant
        QueryBuildDataSource qbdsForecastInvent = _qbdsMainTable.addDataSource(tableNum(ForecastInvent));
        qbdsForecastInvent.joinMode(JoinMode::NoExistsJoin);
        qbdsForecastInvent.addLink(_itemIdFieldId, fieldnum(ForecastInvent, ItemId));
        qbdsForecastInvent.addRange(fieldnum(ForecastInvent, DateBudget)).value(SysQuery::range(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), null));
        
        this.addInventDimProductDimJoin(_qbdsInventDimMain, qbdsForecastInvent, InventDimForecastInvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterAgreementLine</Name>
				<Source><![CDATA[
    protected void addFilterAgreementLine(QueryBuildDataSource _qbdsMainTable, FieldId _itemIdFieldId, QueryBuildDataSource _qbdsInventDimMain)
    {
        const str AgreementLineFilter = 'AgreementLineFilter';
        const str InventDimAgreementLine = 'InventDimAgreementLine';

        // No active or future sales/purchase agreement lines for the item/variant
        QueryBuildDataSource qbdsAgreementLine = _qbdsMainTable.addDataSource(tableNum(AgreementLine), AgreementLineFilter);
        qbdsAgreementLine.joinMode(JoinMode::NoExistsJoin);
        qbdsAgreementLine.addLink(_itemIdFieldId, fieldnum(AgreementLine, ItemId), _qbdsMainTable.name());
        qbdsAgreementLine.addRange(fieldnum(AgreementLine, ItemDataAreaId)).value(queryValue(curExt()));
        qbdsAgreementLine.addRange(fieldnum(AgreementLine, ExpirationDate)).value(queryRange(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), null));
                
        this.addInventDimProductDimJoin(_qbdsInventDimMain, qbdsAgreementLine, InventDimAgreementLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterBOMLine</Name>
				<Source><![CDATA[
    protected void addFilterBOMLine(QueryBuildDataSource _qbdsMainTable, FieldId _itemIdFieldId, QueryBuildDataSource _qbdsInventDimMain)
    {
        const str InventDimBOMName1 = 'InventDimBOM1';
        const str InventDimBOMVersionName1 = 'InventDimBOMVersion1';
        const str InventDimInventDistinctProductBomVersionName1 = 'InventDimInventDistinctProductBomVersion1';
        const str InventDimBOMName2 = 'InventDimBOM2';
        const str InventDimBOMVersionName2 = 'InventDimBOMVersion2';
        const str InventDimInventDistinctProductBomVersionName2 = 'InventDimInventDistinctProductBomVersion2';

        // The item/variant must not be used in a BOM that is associated with a non-expired approved BOM version for an item/variant that do not have a state set.
        QueryBuildDataSource qbdsInventDistinctProductBOMVersion1 = this.addFilterBOMLineAllStates(_qbdsMainTable, _itemIdFieldId, _qbdsInventDimMain, InventDimBOMName1, InventDimBOMVersionName1, InventDimInventDistinctProductBomVersionName1);
        qbdsInventDistinctProductBOMVersion1.addRange(fieldNum(InventDistinctProduct, ProductLifecycleStateId)).value(SysQuery::valueEmptyString());
        
        // The item/variant must not be used in a BOM that is associated with a non-expired approved BOM version for an item/variant that has state that is active for planning.
        QueryBuildDataSource qbdsInventDistinctProductBOMVersion2 = this.addFilterBOMLineAllStates(_qbdsMainTable, _itemIdFieldId, _qbdsInventDimMain, InventDimBOMName2, InventDimBOMVersionName2, InventDimInventDistinctProductBomVersionName2);        
        QueryBuildDataSource qbdsLifecycleStateInventDistinctProductBomVersion = qbdsInventDistinctProductBOMVersion2.addDataSource(tableNum(EcoResProductLifecycleState));
        qbdsLifecycleStateInventDistinctProductBomVersion.joinMode(JoinMode::InnerJoin);
        qbdsLifecycleStateInventDistinctProductBomVersion.fetchMode(QueryFetchMode::One2One);
        qbdsLifecycleStateInventDistinctProductBomVersion.addLink(fieldnum(InventDistinctProduct, ProductLifecycleStateId), fieldnum(EcoResProductLifecycleState, StateId));
        qbdsLifecycleStateInventDistinctProductBomVersion.addRange(fieldNum(EcoResProductLifecycleState, IsActiveForPlanning)).value(queryValue(NoYes::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterBOMLineAllStates</Name>
				<Source><![CDATA[
    protected QueryBuildDataSource addFilterBOMLineAllStates(QueryBuildDataSource _qbdsMainTable, FieldId _itemIdFieldId, QueryBuildDataSource _qbdsInventDimMain, str _inventDimBOMName, str _inventDimBOMVersionName, str _inventDimInventDistinctProductBomVersionName)
    {
        // The item/variant must not be used in a BOM that is associated with a non-expired approved BOM version for an item/variant.
        QueryBuildDataSource qbdsBOM = _qbdsMainTable.addDataSource(tableNum(BOM));
        qbdsBOM.joinMode(JoinMode::NoExistsJoin);
        qbdsBOM.addLink(_itemIdFieldId, fieldnum(BOM, ItemId));
        qbdsBOM.addRange(fieldnum(BOM, ToDate)).value(queryRange(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), null));
        qbdsBOM.addRange(fieldnum(BOM, ToDate)).value(queryValue(dateNull()));
        this.addInventDimProductDimJoin(_qbdsInventDimMain, qbdsBOM, _inventDimBOMName);

        QueryBuildDataSource qbdsBOMVersion = qbdsBOM.addDataSource(tableNum(BOMVersion));
        qbdsBOMVersion.joinMode(JoinMode::InnerJoin);
        qbdsBOMVersion.fetchMode(QueryFetchMode::One2One);
        qbdsBOMVersion.addLink(fieldnum(BOM, BOMId), fieldnum(BOMVersion, BOMId));
        qbdsBOMVersion.addRange(fieldnum(BOMVersion, ToDate)).value(queryRange(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), null));
        qbdsBOMVersion.addRange(fieldnum(BOMVersion, ToDate)).value(queryValue(dateNull()));
        qbdsBOMVersion.addRange(fieldnum(BOMVersion, Approved)).value(queryValue(NoYes::Yes));

        QueryBuildDataSource qbdsBOMVersionInventDim = qbdsBOMVersion.addDataSource(tableNum(InventDim), _inventDimBOMVersionName);
        qbdsBOMVersionInventDim.joinMode(JoinMode::InnerJoin);
        qbdsBOMVersionInventDim.fetchMode(QueryFetchMode::One2One);
        qbdsBOMVersionInventDim.addLink(fieldnum(BOMVersion, InventDimId), fieldnum(InventDim, InventDimId));

        QueryBuildDataSource qbdsInventDistinctProductBomVersion = qbdsBOMVersion.addDataSource(tableNum(InventDistinctProduct));
        qbdsInventDistinctProductBomVersion.joinMode(JoinMode::InnerJoin);
        qbdsInventDistinctProductBomVersion.fetchMode(QueryFetchMode::One2One);
        qbdsInventDistinctProductBomVersion.addLink(fieldnum(BOMVersion, ItemId), fieldnum(InventDistinctProduct, ItemId));
        this.addInventDimProductDimJoin(qbdsBOMVersionInventDim, qbdsInventDistinctProductBomVersion, _inventDimInventDistinctProductBomVersionName);

        return qbdsInventDistinctProductBomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterProdTable</Name>
				<Source><![CDATA[
    protected void addFilterProdTable(QueryBuildDataSource _qbdsMainTable, FieldId _itemIdFieldId, QueryBuildDataSource _qbdsInventDimMain)
    {
        const str InventDimProdTable = 'InventDimProdTable';
        
        // There are no open production orders (= status < ended) for the item/variant
        QueryBuildDataSource qbdsProdTable = _qbdsMainTable.addDataSource(tableNum(ProdTable));
        qbdsProdTable.joinMode(JoinMode::NoExistsJoin);
        qbdsProdTable.addLink(_itemIdFieldId, fieldnum(ProdTable, ItemId));
        qbdsProdTable.addRange(fieldnum(ProdTable, ProdStatus)).value(SysQuery::range(null, ProdStatus::ReportedFinished));
        
        this.addInventDimProductDimJoin(_qbdsInventDimMain, qbdsProdTable, InventDimProdTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterInventTrans</Name>
				<Source><![CDATA[
    protected void addFilterInventTrans(QueryBuildDataSource _qbdsMainTable, FieldId _itemIdFieldId, QueryBuildDataSource _qbdsInventDimMain)
    {
        const str InventDimInventTrans = 'InventDimInventTrans';
        
        // There are no open inventory transactions (= status issue ReservPhysical to QuotationIssue or status receipt Registrered to QuotationReceipt) for the item/variant
        // and no inventory transactions at all within the last X number of days for the item/variant
        QueryBuildDataSource qbdsInventTrans = _qbdsMainTable.addDataSource(tableNum(InventTrans));
        qbdsInventTrans.joinMode(JoinMode::NoExistsJoin);
        qbdsInventTrans.addLink(_itemIdFieldId, fieldnum(InventTrans, ItemId));
        qbdsInventTrans.addRange(fieldnum(InventTrans, StatusIssue)).value(
        strFmt('(((%1 >= %2) && (%1 <= %3)) || ((%4 >= %5) && (%4 <= %6)) || (%7 > %8))',
            fieldStr(InventTrans, StatusIssue), queryValue(enum2int(StatusIssue::ReservPhysical)), queryValue(enum2int(StatusIssue::QuotationIssue)),
            fieldStr(InventTrans, StatusReceipt), queryValue(enum2int(StatusReceipt::Registered)), queryValue(enum2int(StatusReceipt::QuotationReceipt)),
            fieldStr(InventTrans, DateStatus), Date2StrXpp(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - minNumberOfDaysSinceLastTransaction))
        );
        
        this.addInventDimProductDimJoin(_qbdsInventDimMain, qbdsInventTrans, InventDimInventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterCoProducts</Name>
				<Source><![CDATA[
    protected void addFilterCoProducts(QueryBuildDataSource _qbdsMainTable, FieldId _itemIdFieldId, QueryBuildDataSource _qbdsInventDimMain)
    {
        // No co-products with unspecified lifecycle state exist.
        QueryBuildDataSource qbdsCoProductWithoutLifecycleState = _qbdsMainTable.addDataSource(tableNum(InventDistinctProduct));
        qbdsCoProductWithoutLifecycleState.joinMode(JoinMode::NoExistsJoin);
        qbdsCoProductWithoutLifecycleState.addLink(_itemIdFieldId, fieldnum(InventDistinctProduct, PmfPlanningItemId));
        qbdsCoProductWithoutLifecycleState.addRange(fieldnum(InventDistinctProduct, PmfProductType)).value(queryValue(PmfProductType::Co_Product));
        qbdsCoProductWithoutLifecycleState.addRange(fieldnum(InventDistinctProduct, ProductLifecycleStateId)).value(xSysQuery::valueEmptyString());

        // No co-products with active lifecycle state exist.
        QueryBuildDataSource qbdsCoProductWithActiveLifecycleState = _qbdsMainTable.addDataSource(tableNum(InventDistinctProduct));
        qbdsCoProductWithActiveLifecycleState.joinMode(JoinMode::NoExistsJoin);
        qbdsCoProductWithActiveLifecycleState.addLink(_itemIdFieldId, fieldnum(InventDistinctProduct, PmfPlanningItemId));
        qbdsCoProductWithActiveLifecycleState.addRange(fieldnum(InventDistinctProduct, PmfProductType)).value(queryValue(PmfProductType::Co_Product));
        QueryBuildDataSource qbdsCoProductLifecycleState = qbdsCoProductWithActiveLifecycleState.addDataSource(tableNum(EcoResProductLifecycleState));
        qbdsCoProductLifecycleState.joinMode(JoinMode::ExistsJoin);
        qbdsCoProductLifecycleState.addLink(fieldnum(InventDistinctProduct, ProductLifecycleStateId), fieldNum(EcoResProductLifecycleState, StateId));
        qbdsCoProductLifecycleState.addRange(fieldnum(EcoResProductLifecycleState, IsActiveForPlanning)).value(queryValue(NoYes::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventDimProductDimJoin</Name>
				<Source><![CDATA[
    private void addInventDimProductDimJoin(QueryBuildDataSource _qbdsInventDimMain, QueryBuildDataSource _qbdsJoinToTable, str _newDSName)
    {
        QueryBuildDataSource qbdsInventDim = _qbdsJoinToTable.addDataSource(tableNum(InventDim), _newDSName);
        qbdsInventDim.joinMode(JoinMode::InnerJoin);
        qbdsInventDim.fetchMode(QueryFetchMode::One2One);
        qbdsInventDim.relations(true);
        
        if (_qbdsInventDimMain)
        {
            InventDim::queryAddLinkForProductDimensions(qbdsInventDim, _qbdsInventDimMain);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new instance of the class.
    /// </summary>
    /// <param name = "_packedInventDistinctProductQuery">The packed base query that must have InventDistinctProduct as main table.</param>
    /// <param name = "_minNumberOfDaysSinceCreation">The minimum number of days a product must have been created to be included in the query.</param>
    /// <param name = "_minNumberOfDaysSinceLastTransaction">The minimum number of days since the last inventory transaction for a product must have been created to be included in the query.</param>
    /// <param name = "_excludeStateId">A state that products should not be in to be included in the query.</param>
    /// <param name = "_excludeAllInactiveForPlanningStates">Determines if all products with a lifecycle states that has InactiveForPlanning should be excluded; optional.</param>
    /// <param name = "_resultAsCount">Determines if the query should be given; optional.</param>
    /// <returns></returns>
    public static EcoResReleasedProductInactivatorQueryGenerator newParameters(
        container                       _packedInventDistinctProductQuery,
        int                             _minNumberOfDaysSinceCreation,
        int                             _minNumberOfDaysSinceLastTransaction,
        EcoResProductLifecycleStateId   _excludeStateId,
        boolean                         _excludeAllInactiveForPlanningStates = false,
        boolean                         _resultAsCount = false)
    {
        EcoResReleasedProductInactivatorQueryGenerator generator = EcoResReleasedProductInactivatorQueryGenerator::construct();

        generator.parmBaseQueryInventDistinctProduct(_packedInventDistinctProductQuery);
        generator.parmMinNumberOfDaysSinceCreation(_minNumberOfDaysSinceCreation);
        generator.parmMinNumberOfDaysSinceLastTransaction(_minNumberOfDaysSinceLastTransaction);
        generator.parmExcludeStateId(_excludeStateId);
        generator.parmExcludeAllInactiveForPlanningStates(_excludeAllInactiveForPlanningStates);
        generator.parmResultAsCount(_resultAsCount);

        return generator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResReleasedProductInactivatorQueryGenerator construct()
    {
        return new EcoResReleasedProductInactivatorQueryGenerator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>