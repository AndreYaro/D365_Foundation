<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanExceptionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanExceptionHelper</c> class provides functionality that helps to work with exceptions.
/// </summary>
public class ReqDemPlanExceptionHelper
{
    #ReqDemPlan

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBasicExceptionMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns basic exception message from the CLRError exception.
    /// It drills down through TargetInvocationExceptions/AggregateException and returns first non TargetInvocationException/AggregateException message from the hierarchy
    /// </summary>
    /// <param name="_ex">
    /// <c>System.Exception</c> object, that can contain InnerExceptions
    /// </param>
    /// <returns>
    /// Basic exception message
    /// </returns>
    public static str getBasicExceptionMessage(System.Exception _ex)
    {
        str exceptionMessage;

        while (_ex != null)
        {
            if (!(_ex is System.Reflection.TargetInvocationException || _ex is System.AggregateException))
            {
                exceptionMessage = ReqDemPlanExceptionHelper::getLocalizedExceptionMessage(_ex);
                break;
            }

            _ex = _ex.get_InnerException();
        }

        return exceptionMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalizedExceptionMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the localized exception message from the label.
    /// </summary>
    /// <param name = "_ex"><c>System.Exception</c> object</param>
    /// <returns>Localized exception message</returns>
    public static str getLocalizedExceptionMessage(System.Exception _ex)
    {
        str exceptionText;
        var dataDict = _ex.get_Data();

        if (dataDict != null)
        {
            var labelFromException = dataDict.get_Item(#ExceptionLabelKey);

            if (labelFromException != null)
            {
                exceptionText = SysLabel::labelId2String2(labelFromException);
            }
            else
            {
                exceptionText = _ex.Message;
            }
        }

        return exceptionText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastExceptionMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns exception message from the last CLR exception.
    /// </summary>
    /// <param name="_logger">
    /// The <c>ReqDemPlanTaskLoggerInterface</c> instance that is used for logging detailed task message.
    /// </param>
    /// <returns>
    /// Last CLR exception message
    /// </returns>
    /// <remarks>
    /// Please note that this method can return last exception message only and only one time after it occurred.
    /// </remarks>
    public static str getLastExceptionMessage(ReqDemPlanTaskLoggerInterface _logger = null)
    {
        System.Exception ex = CLRInterop::getLastException();
        if (ex)
        {
            ApplicationUnhandledExceptionLogger::logCLRException(ex);
            if (_logger)
            {
                _logger.appendTaskDetailLog(ex.ToString());
            }
        }
        return ReqDemPlanExceptionHelper::getBasicExceptionMessage(ex);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>