<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobTmpPickListLoaderTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanJobTmpPickListLoader</c> class loads picking list records for the transfer kanban board.
/// </summary>
public class KanbanJobTmpPickListLoaderTransfer extends KanbanJobTmpPickListLoader
{
    KanbanBoardTmpTransferJob   kanbanBoardTmpTransferJob;
    KanbanJob                   previousKanbanJob;
    int                         numberOfLoadedJobs;

    InventTransOriginId         issueInventTransOriginId;
    boolean                     cachedInventTransOriginId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNext</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the next record.
    /// </summary>
    /// <returns>
    ///    true if a next record exists; otherwise, false.
    /// </returns>
    protected boolean getNext()
    {
        boolean result = numberOfLoadedJobs < numberOfJobs;

        if (result)
        {
            numberOfLoadedJobs++;
            cachedInventTransOriginId = false;
            kanbanBoardTmpTransferJob = conPeek(containerKanbanJobs,numberOfLoadedJobs);
            kanbanJob                 = KanbanJob::find(kanbanBoardTmpTransferJob.Job);
            previousKanbanJob         = kanbanJob.previousJob();
            kanbanEventQuantityMap    = KanbanEventQuantityMap::newStandard(kanbanJob);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWHSWave</Name>
				<Source><![CDATA[
    protected boolean hasWHSWave()
    {
        boolean ret = false;

        ret = WHSKanbanWaveLine::existsForInventTransIdNotPicked(kanbanJob.IssueInventTransId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWHSWork</Name>
				<Source><![CDATA[
    protected boolean hasWHSWork()
    {
        boolean     ret = false;

        ret = WHSWorkLine::existForInventTransIdNotClosed(kanbanJob.InventTransId)
		   || WHSWorkLine::existForInventTransIdNotClosed(kanbanJob.IssueInventTransId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record has an output order.
    /// </summary>
    /// <returns>
    /// true if the current record has an output order; otherwise, false.
    /// </returns>
    protected boolean hasWMSOrder()
    {
        return kanbanJob.hasWMSOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables.
    /// </summary>
    protected void init()
    {
        super();
        numberOfLoadedJobs = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExpectedQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the supply status of the current <c>kanbanJobTmpPickList</c> record.
    /// </summary>
    protected void initExpectedQuantities()
    {
        if (   kanbanJobTmpPickList.Issue
            && kanbanJob.Status < LeanKanbanJobStatus::Prepared
            && this.lineType() == KanbanJobPickingListLineType::Pegging
            && kanbanJobTmpPickList.ItemPegging == KanbanItemPegging::Kanban
            && previousKanbanJob.Status < LeanKanbanJobStatus::Completed)
        {
            kanbanJobTmpPickList.ExpectedNotAvailableQuantity = min(this.quantity(),previousKanbanJob.QuantityOrdered);
            kanbanJobTmpPickList.ExpectedAvailableQuantity    =   this.quantity()
                                                                - kanbanJobTmpPickList.ExpectedNotAvailableQuantity;
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current inventory dimension ID.
    /// </summary>
    /// <returns>
    ///    The current inventory dimension ID.
    /// </returns>
    protected InventDimId inventDimId()
    {
        return kanbanJob.IssueInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issueInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current inventory transaction origin.
    /// </summary>
    /// <returns>
    ///    The current inventory transaction origin.
    /// </returns>
    protected InventTransOriginId issueInventTransOriginId()
    {
        if (!cachedInventTransOriginId)
        {
            issueInventTransOriginId  = kanbanJob.issueInventTransOriginId();
            cachedInventTransOriginId = true;
        }

        return issueInventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current item ID.
    /// </summary>
    /// <returns>
    ///    The current item ID.
    /// </returns>
    protected ItemId itemId()
    {
        return kanbanBoardTmpTransferJob.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current line type.
    /// </summary>
    /// <returns>
    ///    The current line type.
    /// </returns>
    protected KanbanJobPickingListLineType lineType()
    {
        KanbanJobPickingListLineType    lineType;

        if (previousKanbanJob.RecId)
        {
            lineType = KanbanJobPickingListLineType::Pegging;
        }
        else
        {
            lineType = KanbanJobPickingListLineType::Item;
        }

        return lineType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current quantity.
    /// </summary>
    /// <returns>
    ///    The current quantity.
    /// </returns>
    protected InventQty quantity()
    {
        return kanbanBoardTmpTransferJob.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current unit ID.
    /// </summary>
    /// <returns>
    ///    The current unit ID.
    /// </returns>
    protected UnitIDBase unitId()
    {
        return kanbanBoardTmpTransferJob.InventUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsOrderQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the inventory quantity of open output orders that are related to the current record.
    /// </summary>
    /// <returns>
    /// The inventory quantity of output orders that are related to the current record.
    /// </returns>
    protected InventQty wmsOrderQuantity()
    {
        return kanbanJob.wmsOrderQuantity(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanJobTmpPickListLoaderTransfer construct()
    {
        return new KanbanJobTmpPickListLoaderTransfer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    public static KanbanJobTmpPickListLoaderTransfer newStandard(container _containerKanbanJobs)
    {
        KanbanJobTmpPickListLoaderTransfer  kanbanJobTmpPickListLoaderTransfer = KanbanJobTmpPickListLoaderTransfer::construct();

        kanbanJobTmpPickListLoaderTransfer.parmContainerKanbanJobs(_containerKanbanJobs);

        return kanbanJobTmpPickListLoaderTransfer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
