<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTRReportRunContract_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// Data contract for the <c>TaxGSTRReportRunController_IN</c> run.
/// </summary>
[
    DataContract,
    SysOperationGroup('PurchaseRegister', '@TaxEngineGSTR:PurchaseRegister', '1'),
    SysOperationGroup('Date', "@SYS7402", '2'),
    SysOperationGroup('ReturnFilingMonthAndQuarter', "@TaxEngineGSTR:ReturnFilingMonthAndQuarter", '3'),
    SysOperationGroup('RegistrationNumber', "@SYS313823", '4'),
    SysOperationGroup('ElectronicReporting', "@GLS114713", '5'),
    SysOperationGroup('BatchNumber', "@ApplicationSuite_Localization:NumberOfDaysPerBatch", '6'),
    SysOperationContractProcessing(classStr(TaxGSTRReportRunUIBuilder_IN))
]
public class TaxGSTRReportRunContract_IN extends ERFormatMappingRunBaseContract implements SysOperationValidatable
{ 
    private FromDate fromDate;
    private ToDate toDate;
    private ERFormatMappingId erConfiguration;
    private Filename reportName;
    private TaxRegistrationNumber_IN regNum;
    private Counter dayNumPerBatch;
    private FiscalCalendarID fiscalCalendarId;
    private FinancialYearName financialYear;
    private TaxGSTRTaxPeriod_IN taxPeriod;
    private TaxGSTRReturnFilingMonth_IN returnFilingMonth;
    private TaxGSTRReturnFilingQuarter_IN returnFilingQuarter;
    private NoYes batchExecute;

    private const Version CurrentVersion = 4;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFiscalCalendarId</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('PurchaseRegister'),
        SysOperationLabel(literalStr("@SYS105687")),
        SysOperationDisplayOrder('1')
    ]
    public FiscalCalendarID parmFiscalCalendarId(FiscalCalendarID _fiscalCalendarId = fiscalCalendarId)
    {
        fiscalCalendarId = _fiscalCalendarId;
        return fiscalCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinancialYear</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('PurchaseRegister'),
        SysOperationDisplayOrder('2')
    ]
    public FinancialYearName parmFinancialYear(FinancialYearName _financialYear = financialYear)
    {
        financialYear = _financialYear;
        return financialYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPeriod</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('PurchaseRegister'),
        SysOperationDisplayOrder('3')
    ]
    public TaxGSTRTaxPeriod_IN parmTaxPeriod(TaxGSTRTaxPeriod_IN _taxPeriod = taxPeriod)
    {
        taxPeriod = _taxPeriod;
        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('Date'),
        SysOperationDisplayOrder('1')
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('Date'),
        SysOperationDisplayOrder('2')
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnFilingMonth</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('ReturnFilingMonthAndQuarter'),
        SysOperationDisplayOrder('1')
    ]
     public TaxGSTRReturnFilingMonth_IN parmReturnFilingMonth(TaxGSTRReturnFilingMonth_IN _returnFilingMonth = returnFilingMonth)
    {
        returnFilingMonth = _returnFilingMonth;
        return returnFilingMonth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnFilingQuarter</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('ReturnFilingMonthAndQuarter'),
        SysOperationDisplayOrder('2')
    ]
   public TaxGSTRReturnFilingQuarter_IN parmReturnFilingQuarter(TaxGSTRReturnFilingQuarter_IN _returnFilingQuarter = returnFilingQuarter)
    {
        returnFilingQuarter = _returnFilingQuarter;
        return returnFilingQuarter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegNum</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('RegistrationNumber'),
        SysOperationDisplayOrder('1')
    ]
    public TaxRegistrationNumber_IN parmRegNum(TaxRegistrationNumber_IN _regNum = regNum)
    {
        regNum = _regNum;
        return regNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErConfiguration</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('ElectronicReporting'),
        SysOperationDisplayOrder('1')
    ]
    public ERFormatMappingId parmErConfiguration(ERFormatMappingId _erConfiguration = erConfiguration)
    {
        erConfiguration = _erConfiguration;
        return erConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportName</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('ElectronicReporting'),
        SysOperationDisplayOrder('2')
    ]
    public Filename parmReportName(Filename _reportName = reportName)
    {
        reportName = _reportName;
        return reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDayNumPerBatch</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('BatchNumber'),
        SysOperationLabel(literalStr("@ApplicationSuite_Localization:NumberOfDaysPerBatch")),
        SysOperationDisplayOrder('1')
    ]
    public Counter parmDayNumPerBatch(Counter _dayNumPerBatch = dayNumPerBatch)
    {
        dayNumPerBatch = _dayNumPerBatch;
        return dayNumPerBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchExecute</Name>
				<Source><![CDATA[
    public NoYes parmBatchExecute(NoYes _batchExecute = batchExecute)
    {
        batchExecute = _batchExecute;
        return batchExecute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates all the necessary conditions.
    /// </summary>
    /// <param name="_calledFrom">
    /// The object calling the method.
    /// </param>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;

        if (fromDate == dateNull())
        {
            return checkFailed("@SYS91557");
        }

        if (toDate == dateNull())
        {
            return checkFailed("@SYS90868");
        }

        if (fromDate > toDate)
        {
            return checkFailed("@SYS120590");
        }

        if (!erConfiguration)
        {
            return checkFailed(strFmt("@SYS50104", "@SYS304003"));
        }

        if (!reportName)
        {
            return checkFailed("@SYS18624");
        }

        ERSolutionTable solution;
        TaxGSTRReportControllerBase_IN reportController;
        solution = ERSolutionTable::find(erConfiguration);
        reportController = this.getReportClass(solution);

        if (dayNumPerBatch >= 1
            && batchExecute == NoYes::Yes
            && (reportController is TaxGSTRReportController1Govt_IN
                || reportController is TaxGSTRReportController1GovtANX1_IN
                || reportController is TaxGSTRReportControllerPurchaseRegister_IN))
        {
            return checkFailed(strFmt("@ApplicationSuite_Localization:NotSupportMultipleBatch", reportController.getControllerName()));
        }

        if (reportController is TaxGSTRReportControllerPurchaseRegister_IN)
        {
            if (!regNum)
            {
                return checkFailed(strFmt("@SYS50104", "@TaxEngineGSTR:RegostrationNumber"));
            }
            
            if (!financialYear)
            {
                return checkFailed(strFmt("@SYS50104", "@SYS326082"));
            }

            if (!taxPeriod)
            {
                return checkFailed(strFmt("@SYS50104", "@TaxEngineConfiguration:TaxPeriod"));
            }
        }



        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportClass</Name>
				<Source><![CDATA[
    private TaxGSTRReportControllerBase_IN getReportClass(ERSolutionTable _solution)
    {
        TaxSolutionReportConfigurations reportConfiguration = TaxSolutionReportConfigurations::find(
            TaxSolutionScopeSetup::findByLedger(Ledger::current()).TaxSolutionScope, _solution.RecId);

        DictClass dictClass = new DictClass(
            TaxGSTRReportingControllers_IN::find(reportConfiguration.ReportController).ReportControllerClassID);

        return dictClass.makeObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, [fromDate, toDate, regNum, reportName, erConfiguration, dayNumPerBatch, financialYear, taxPeriod, fiscalCalendarId]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = SysOperationHelper::getVersion(_packedClass);
        boolean ret = false;
        container packedData;

        switch (version)
        {
            case CurrentVersion:
                [version, packedData] = _packedClass;
                [fromDate, toDate, regNum, reportName, erConfiguration, dayNumPerBatch, financialYear, taxPeriod, fiscalCalendarId] = packedData;
                ret = true;
            case 1:
                [version, packedData] = _packedClass;
                [fromDate, toDate, regNum, reportName, erConfiguration] = packedData;
                ret = true;
                break;
            case 2:
                [version, packedData] = _packedClass;
                [fromDate, toDate, regNum, reportName, erConfiguration, dayNumPerBatch] = packedData;
                ret = true;
                break;
            case 3:
                [version, packedData] = _packedClass;
                [fromDate, toDate, regNum, reportName, erConfiguration, dayNumPerBatch, financialYear, taxPeriod] = packedData;
                ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>