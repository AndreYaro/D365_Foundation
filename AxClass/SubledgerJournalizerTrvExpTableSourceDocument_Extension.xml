<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalizerTrvExpTableSourceDocument_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension for <c>SubledgerJournalizer</c> which enables line-level transactionText for expense reports
/// to be individually processed - i.e. the description element can be embedded in a custom trans text
/// template and will reflect the value for the individual expense transaction.
/// </summary>

[ExtensionOf(classStr(SubledgerJournalizer))]
final class SubledgerJournalizerTrvExpTableSourceDocument_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTransactionText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Chain-of-command method to customize behavior for expense report lines.
    /// </summary>
    /// <param name = "_sourceDocument">The source document used to locate the expenses</param>
    /// <param name = "_accountingEvent">The accounting even associated with the current expense trans</param>
    /// <returns>String with the formatted text for the transaction specified by the accounting event</returns>
    public static str getTransactionText(SourceDocument _sourceDocument, AccountingEvent _accountingEvent)
    {
        // call the next version of the method, which will reach the original
        TransactionTextLarge transactionText = next getTransactionText(_sourceDocument, _accountingEvent);

        if (_sourceDocument)
        {
            if ((_accountingEvent.Type != AccountingEventType::PeriodClose && !(_sourceDocument is SourceDocumentIYearEnd))
                && (_accountingEvent.Type != AccountingEventType::PeriodOpen && !(_sourceDocument is SourceDocumentIYearEnd))
                && (_accountingEvent.Type != AccountingEventType::Finalize && !(_sourceDocument is SourceDocumentIFinalize)))
            {
                Voucher voucher;
                SourceDocumentILineVoucher lineVoucher = _sourceDocument as SourceDocumentILineVoucher;

                // getting the current line voucher will set source document implementation's
                // current expense line to the correct one
                if (lineVoucher)
                {
                    voucher = lineVoucher.parmCurrentLineVoucher(_accountingEvent);
                }

                if (voucher)
                {
                    transactionText = _sourceDocument.parmTransactionText();
                }
            }
        }

        return transactionText;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>