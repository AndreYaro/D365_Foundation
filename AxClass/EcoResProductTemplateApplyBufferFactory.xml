<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductTemplateApplyBufferFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResProductTemplateApplyBufferFactory</c> class is a factory class for the
/// <c>EcoResProductTemplateApplyBuffer</c> class hierarchy.
/// </summary>
class EcoResProductTemplateApplyBufferFactory
{
    InventTable inventTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTemplateApplyBufferFromCommon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a new instance of the <c>EcoResProductTemplateApplyBuffer</c> class or its subclass
    /// depending on the value of the <paramref name="_common" /> parameter.
    /// </summary>
    /// <param name="_common">
    /// A reference to a record that is used to create and initialize a new instance of the
    /// <c>EcoREsProductTemplateApplyBuffer</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>EcoREsProductTemplateApplyBuffer</c> class or its subclass.
    /// </returns>
    public EcoResProductTemplateApplyBuffer getTemplateApplyBufferFromCommon(Common _common)
    {
        EcoResProductTemplateApplyBuffer productTemplateApplyBuffer;

        switch (_common.TableId)
        {
            case tableNum(EcoResStorageDimensionGroupItem):
                EcoResProductTemplateApplyStorageGroup productTemplateApplyStorageGroup = EcoResProductTemplateApplyStorageGroup::construct();
                productTemplateApplyStorageGroup.parmInventoryDimensionGroups(InventTableInventoryDimensionGroups::construct());
                productTemplateApplyStorageGroup.parmOptionalFieldId(fieldNum(EcoResStorageDimensionGroupItem, StorageDimensionGroup));
                productTemplateApplyBuffer = productTemplateApplyStorageGroup;
                break;
            case tableNum(EcoResTrackingDimensionGroupItem):
                EcoResProductTemplateApplyTrackingGroup productTemplateApplyTrackingGroup = EcoResProductTemplateApplyTrackingGroup::construct();
                productTemplateApplyTrackingGroup.parmInventoryDimensionGroups(InventTableInventoryDimensionGroups::construct());
                productTemplateApplyTrackingGroup.parmOptionalFieldId(fieldNum(EcoResTrackingDimensionGroupItem, TrackingDimensionGroup));
                productTemplateApplyBuffer = productTemplateApplyTrackingGroup;
                break;
            case tableNum(InventModelGroupItem):
                productTemplateApplyBuffer = EcoResProductTemplateApplyBuffer::construct();
                productTemplateApplyBuffer.parmOptionalFieldId(fieldNum(InventModelGroupItem, ModelGroupId));
                break;
            case tableNum(InventItemGroupItem):
                productTemplateApplyBuffer = EcoResProductTemplateApplyBuffer::construct();
                productTemplateApplyBuffer.parmOptionalFieldId(fieldNum(InventItemGroupItem, ItemGroupId));
                break;
            case tableNum(WHSInventTable):
                productTemplateApplyBuffer = EcoResProductTemplateApplyWHSInventTable::construct();
                break;
            case tableNum(WHSReservationHierarchyItem):
                productTemplateApplyBuffer = EcoResProductTemplateApplyBuffer::construct();
                productTemplateApplyBuffer.parmOptionalFieldId(fieldNum(WHSReservationHierarchyItem, ReservationHierarchy));
                break;
            case tableNum(MCRInventTable):
                EcoResProductTemplateApplyMCRInventTable productTemplateApplyMCRInventTable = EcoResProductTemplateApplyMCRInventTable::construct();
                productTemplateApplyMCRInventTable.parmInventTable(inventTable);
                productTemplateApplyBuffer = productTemplateApplyMCRInventTable;
                break;
            case tableNum(EcoResProductDimensionGroupProduct):
                productTemplateApplyBuffer = EcoResProductTemplateApplyBuffer::construct();
                productTemplateApplyBuffer.parmOptionalFieldId(fieldNum(EcoResProductDimensionGroupProduct, ProductDimensionGroup));
                break;
            default:
                productTemplateApplyBuffer = EcoResProductTemplateApplyBuffer::construct();
                break;
        }

        if (_common is InventTable)
        {
            inventTable = _common;
        }

        productTemplateApplyBuffer.parmBuffer(_common);
        return productTemplateApplyBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static EcoResProductTemplateApplyBufferFactory construct()
    {
        return new EcoResProductTemplateApplyBufferFactory();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>