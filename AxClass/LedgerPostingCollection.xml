<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPostingCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerPostingCollection</c> class maintains a collection specific to a legal entity, ledger
///    category, and custom qualifier.
/// </summary>
public abstract class LedgerPostingCollection
{
    Map legalEntityLedgerCategoryCollection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInnerCollection</Name>
				<Source><![CDATA[
        private Map createInnerCollection()
    {
        return new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInnerKey</Name>
				<Source><![CDATA[
        private str createInnerKey(OperationsTax _ledgerCategory, RecId _customQualifier)
    {
        str key = enum2str(_ledgerCategory) + ':' + int642str(_customQualifier);

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCollection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the collection specific to the legal entity, ledger category, and custom qualifier.
    /// </summary>
    /// <param name="_legalEntity">
    ///    The legal entity of the collection.
    /// </param>
    /// <param name="_ledgerCategory">
    ///    The ledger category of the collection.
    /// </param>
    /// <param name="_customQualifier">
    ///    The custom qualifier of the ledger category collection; optional.
    /// </param>
    /// <returns>
    ///    A collection specific to the legal entity and ledger category.
    /// </returns>
    /// <remarks>
    ///    The value returned may be null. Use the <c>getCollectionForAdd</c> method if an initialized
    ///    collection is preferred.
    /// </remarks>
    public object getCollection(CompanyId _legalEntity, OperationsTax _ledgerCategory, RecId _customQualifier = 0)
    {
        Map ledgerCategoryCollection;
        str innerKey;
        object collection;

        if (legalEntityLedgerCategoryCollection.exists(_legalEntity))
        {
            ledgerCategoryCollection = legalEntityLedgerCategoryCollection.lookup(_legalEntity);
        }
        else
        {
            ledgerCategoryCollection = this.createInnerCollection();

            legalEntityLedgerCategoryCollection.insert(_legalEntity, ledgerCategoryCollection);
        }

        innerKey = this.createInnerKey(_ledgerCategory, _customQualifier);

        if (ledgerCategoryCollection.exists(innerKey))
        {
            collection = ledgerCategoryCollection.lookup(innerKey);
        }
        else
        {
            collection = null;
        }

        return collection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCollectionForAdd</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the collection specific to the legal entity, ledger category, and custom qualifier.
    /// </summary>
    /// <param name="_legalEntity">
    ///    The legal entity of the collection.
    /// </param>
    /// <param name="_ledgerCategory">
    ///    The ledger category of the collection.
    /// </param>
    /// <param name="_customQualifier">
    ///    The custom qualifier of the ledger category collection; optional.
    /// </param>
    /// <returns>
    ///    A collection specific to the legal entity and ledger category.
    /// </returns>
    /// <remarks>
    ///    A valid collection is always returned. Use the <c>getCollection</c> method if a null collection is
    ///    preferred.
    /// </remarks>
    public object getCollectionForAdd(CompanyId _legalEntity, OperationsTax _ledgerCategory, RecId _customQualifier = 0)
    {
        Map ledgerCategoryCollection;
        str innerKey;
        object innerCollection;

        if (legalEntityLedgerCategoryCollection.exists(_legalEntity))
        {
            ledgerCategoryCollection = legalEntityLedgerCategoryCollection.lookup(_legalEntity);
        }
        else
        {
            ledgerCategoryCollection = this.createInnerCollection();

            legalEntityLedgerCategoryCollection.insert(_legalEntity, ledgerCategoryCollection);
        }

        innerKey = this.createInnerKey(_ledgerCategory, _customQualifier);

        if (ledgerCategoryCollection.exists(innerKey))
        {
            innerCollection = ledgerCategoryCollection.lookup(innerKey);
        }
        else
        {
            innerCollection = this.getEmptyInstance();

            ledgerCategoryCollection.insert(innerKey, innerCollection);
        }

        return innerCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmptyInstance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an empty instance of the collection.
    /// </summary>
    /// <returns>
    ///    An empty instance of the collection.
    /// </returns>
    /// <remarks>
    ///    This method is used to initialize the collection for a new legal entity, ledger category, and
    ///    custom qualifier combination. The value returned corresponds to the values returned by the
    ///    <c>getCollection</c> method and the <c>getCollectionForAdd</c> method.
    /// </remarks>
    protected abstract object getEmptyInstance()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        legalEntityLedgerCategoryCollection = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>