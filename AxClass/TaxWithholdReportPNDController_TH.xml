<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdReportPNDController_TH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxWithholdReportPNDController_TH</c> class is the controller class for the
///    <c>TaxWithholdReportPND_TH</c> report.
/// </summary>
public class TaxWithholdReportPNDController_TH extends SrsReportRunController implements BatchRetryable
{
    TaxWithholdReportLayout_TH      reportLayout;
    TmpTaxWithholdReportData_TH     tmpTaxWithholdReportData_TH;
    TransDate                       transDate;
    TaxWithholdReportPNDTmp_TH      taxWithholdReportPNDTmp_TH;
    int                             grouping;
    VendName                        vendName;
    ContactPersonName               contactPerson;
    Addressing                      addressing;
    CompanyName                     companyName;
    CompanyCoRegNum                 regNum;
    CompanyBranchId                 branchId;
    TaxWithholdReportPNDContract_TH contract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fetchReportData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <returns>
    ///    The <c>RecId</c> value of the temporary table.
    /// </returns>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    private RecId fetchReportData()
    {
        RecId                   tmpTableDataRecId;
        SrsReportRunPermission  permission;
        CompanyInfo             companyInfo;

        tmpTaxWithholdReportData_TH = TaxWithholdPrintOut_TH::createReportData(reportLayout, transDate);

        select firstonly tmpTaxWithholdReportData_TH;

        if (tmpTaxWithholdReportData_TH)
        {
            companyInfo = CompanyInfo::find();
            companyName = companyInfo.Name;
            regNum      = companyInfo.CoRegNum;
            branchId    = companyInfo.BranchId;

            while select tmpTaxWithholdReportData_TH
            {
                if (vendName         != tmpTaxWithholdReportData_TH.Name
                    || contactPerson != tmpTaxWithholdReportData_TH.ContactPerson
                    || addressing    != tmpTaxWithholdReportData_TH.Address)
                {
                    vendName      = tmpTaxWithholdReportData_TH.Name;
                    contactPerson = tmpTaxWithholdReportData_TH.ContactPerson;
                    addressing    = tmpTaxWithholdReportData_TH.Address;
                    grouping++;
                }
                this.insertTaxWithholdReportDataTmp_TH();
            }
        }

        // Storing the temp table data using SRSTmpTblMarshaller
        permission = new SrsReportRunPermission();
        permission.assert();
        tmpTableDataRecId = this.storeTmpTable();
        CodeAccessPermission::revertAssert();

        delete_from taxWithholdReportPNDTmp_TH;

        return tmpTableDataRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxWithholdReportDataTmp_TH</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Insert the data into <c>TaxWithholdReportPNDTmp_TH</c> temporary table instance.
    /// </summary>
    private void insertTaxWithholdReportDataTmp_TH()
    {
        taxWithholdReportPNDTmp_TH.clear();
        taxWithholdReportPNDTmp_TH.LineNum         = tmpTaxWithholdReportData_TH.LineNum;
        taxWithholdReportPNDTmp_TH.NRICNumber      = tmpTaxWithholdReportData_TH.NRICNumber;
        taxWithholdReportPNDTmp_TH.VATNum          = tmpTaxWithholdReportData_TH.VATNum;
        taxWithholdReportPNDTmp_TH.PaymDate        = tmpTaxWithholdReportData_TH.PaymDate;
        taxWithholdReportPNDTmp_TH.RevenueType     = tmpTaxWithholdReportData_TH.RevenueType;
        taxWithholdReportPNDTmp_TH.WHTPercentage   = tmpTaxWithholdReportData_TH.WHTPercentage;
        taxWithholdReportPNDTmp_TH.TotalBaseAmount = tmpTaxWithholdReportData_TH.TotalBaseAmount;
        taxWithholdReportPNDTmp_TH.WHTAmount       = tmpTaxWithholdReportData_TH.WHTAmount;
        taxWithholdReportPNDTmp_TH.Conditions      = tmpTaxWithholdReportData_TH.Conditions;
        taxWithholdReportPNDTmp_TH.Name            = vendName;
        taxWithholdReportPNDTmp_TH.Address         = addressing;
        taxWithholdReportPNDTmp_TH.ContactPerson   = contactPerson;
        taxWithholdReportPNDTmp_TH.Grouping        = grouping;
        taxWithholdReportPNDTmp_TH.CompanyName     = companyName;
        taxWithholdReportPNDTmp_TH.CompanyCoRegNum = regNum;
        taxWithholdReportPNDTmp_TH.CompanyBranchId = branchId;
        taxWithholdReportPNDTmp_TH.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        contract = this.parmReportContract().parmRdpContract() as TaxWithholdReportPNDContract_TH;

        if (this.parmArgs().parmEnumType() == enumnum(TaxWithholdReportLayout_TH))
        {
            contract.parmReportLayout(this.parmArgs().parmEnum());
        }
        else
        {
            // @SYS32665: The report has been called with incorrect parameters
            throw error ("@SYS32665");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        RecId recId;

        contract = this.parmReportContract().parmRdpContract() as TaxWithholdReportPNDContract_TH;

        transDate    = contract.parmTransDate();
        reportLayout = contract.parmReportLayout();

        recId = this.fetchReportData();

        contract.parmSrsTmpTblMarshallerContract().parmTmpTableDataRecId(recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stores the temporary table by using the <c>SRSTmpTblMarshaller</c> class..
    /// </summary>
    /// <returns>
    ///    The <c>RecId</c> value of the data store table where the temporary table is stored.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RecId storeTmpTable()
    {
        return SRSTmpTblMarshaller::SendTmpTblToDataProvider(taxWithholdReportPNDTmp_TH);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceTH00005, funcName());

        SrsReportRunController controller = new TaxWithholdReportPNDController_TH();
        controller.parmReportName(ssrsReportStr(TaxWithholdReportPND_TH, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>