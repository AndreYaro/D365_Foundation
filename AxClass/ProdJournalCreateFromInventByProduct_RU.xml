<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalCreateFromInventByProduct_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdJournalCreateFromInventByProduct_RU extends RunBase
{
    ProdJournalId                   prodJournalId;
    ProdId                          prodId;

    TransDate                       transDate;
    ProdReleaseKindId_RU            prodReleaseKindId;

    Map                             inventByProductMarkedMap;
    ProdJournalFormTransRelease_RU  journalFormTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = Dialog::newFormnameRunbase(formstr(ProdJourCreateFromInventByProductDialog), this);

        dialog.caption("@GLS115744");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    public void initFromArgs(Args _args)
    {
        if (_args && formHasMethod(_args.caller(), identifierstr(journalForm)))
        {
            journalFormTrans = _args.caller().journalForm();

            if (!journalFormTrans || !SysDictClass::isEqualOrSuperclass(classidget(journalFormTrans), classnum(ProdJournalFormTransRelease_RU)))
            {
                throw error("@SYS18626");
            }

            ProdJournalRelease_RU prodJournalRelease = journalFormTrans.journalTransData().journalTrans();
            ProdJournalTable prodJournalTable = journalFormTrans.journalTable();
            prodJournalId = prodJournalTable.JournalId;
            prodId = prodJournalRelease.ProdId ? prodJournalRelease.ProdId : prodJournalTable.ProdId;
        }
        else
        {
            throw error(strfmt("@SYS76153", identifierstr(journalForm)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markLine</Name>
				<Source><![CDATA[
    public boolean markLine(boolean                 _set,
                            InventByProductTable_RU _inventByProductTable,
                            boolean                 _mark)
    {
        if (_set)
        {
            if (_mark)
            {
                inventByProductMarkedMap.insert(_inventByProductTable.RecId, _inventByProductTable);
            }
            else
            {
                inventByProductMarkedMap.remove(_inventByProductTable.RecId);
            }
        }

        return inventByProductMarkedMap.exists(_inventByProductTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        inventByProductMarkedMap = new Map(Types::Int64, Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdId</Name>
				<Source><![CDATA[
    public ProdId parmProdId(ProdId _prodId = prodId)
    {
        prodId = _prodId;

        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJournalId</Name>
				<Source><![CDATA[
    public ProdJournalId parmProdJournalId(ProdJournalId _prodJournalId = prodJournalId)
    {
        prodJournalId = _prodJournalId;

        return prodJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdReleaseKindId</Name>
				<Source><![CDATA[
    public ProdReleaseKindId_RU parmProdReleaseKindId(ProdReleaseKindId_RU _prodReleaseKindId = prodReleaseKindId)
    {
        prodReleaseKindId = _prodReleaseKindId;

        return prodReleaseKindId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        ProdJournalRelease_RU   prodJournalRelease;
        ProdJournalTable        prodJournalTable = ProdJournalTable::find(prodJournalId);

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00124,funcName());

        if (! this.validate())
        {
            throw error("@GLS110686");
        }

        try
        {
            ttsbegin;

            MapEnumerator mapEnumerator = inventByProductMarkedMap.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                InventByProductTable_RU inventByProductTable = mapEnumerator.currentValue();
                if (!inventByProductTable.RecId)
                {
                    continue;
                }

                prodJournalRelease.clear();
                prodJournalRelease.initFromProdJournalTable(prodJournalTable);
                prodJournalRelease.initFromInventByProduct(inventByProductTable);
                prodJournalRelease.TransDate        = transDate;
                prodJournalRelease.ReleaseKindId    = prodReleaseKindId;
                prodJournalRelease.insert();
            }

            journalFormTrans.journalTrans_DS().executeQuery();
            journalFormTrans.journalTableData().initTotal();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventByProductTable</Name>
				<Source><![CDATA[
    public void updateInventByProductTable(InventByProductTable_RU _inventByProductTable)
    {
        if (inventByProductMarkedMap.exists(_inventByProductTable.RecId))
        {
            inventByProductMarkedMap.insert(_inventByProductTable.RecId, _inventByProductTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (inventByProductMarkedMap.empty())
        {
            ret = checkFailed("@GLS115784");
        }

        if (!transDate)
        {
            ret = checkFailed("@SYS24455");
        }

        if (!prodReleaseKindId)
        {
            ret = checkFailed("@GLS115786");
        }

        if (!prodJournalId)
        {
            ret = checkFailed("@GLS115787");
        }

        if (!prodId)
        {
            ret = checkFailed("@GLS115788");
        }

        if (!ProdJournalTable::checkExist(prodJournalId))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS115789";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        ProdJournalCreateFromInventByProduct_RU prodJournalCreate = new ProdJournalCreateFromInventByProduct_RU();

        prodJournalCreate.initFromArgs(_args);

        if (prodJournalCreate.prompt())
        {
            prodJournalCreate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>