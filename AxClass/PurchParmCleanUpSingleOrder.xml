<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchParmCleanUpSingleOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchParmCleanUpSingleOrder</c> class is cleaned up single purchase order posting history records.
/// </summary>
internal final class PurchParmCleanUpSingleOrder extends PurchParmCleanUp
{
    PurchId purchId;
    DialogField dialogPurchId;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        purchId
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPurchId</Name>
				<Source><![CDATA[
    internal PurchId parmPurchId(PurchId _purchId = purchId)
    {
        purchId = _purchId;
        return purchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTables</Name>
				<Source><![CDATA[
    protected void deleteTables()
    {
        this.deletePurchParmSingleOrderTables();
        this.deleteInvoiceSingleOrderTables();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchParmSingleOrderTables</Name>
				<Source><![CDATA[
    private void deletePurchParmSingleOrderTables()
    {
        ttsbegin;
        PurchParmTable purchParmTable;
        PurchParmCleanUp::skipDeleteLogic(purchParmTable);

        delete_from purchParmTable
            where purchParmTable.PurchId == purchId;

        PurchParmUpdate purchParmUpdate;
        PurchParmCleanUp::skipDeleteLogic(purchParmUpdate);

        delete_from purchParmUpdate
            notexists join purchParmTable
                where purchParmUpdate.ParmId == purchParmTable.ParmId;

        PurchParmSubTable purchParmSubTable;
        PurchParmCleanUp::skipDeleteLogic(purchParmSubTable);

        delete_from purchParmSubTable
            notexists join purchParmTable
                where purchParmSubTable.ParmId == purchParmTable.ParmId   &&
                    purchParmSubTable.TableRefId == purchParmTable.TableRefId;

        PurchParmLine purchParmLine;
        PurchParmCleanUp::skipDeleteLogic(purchParmLine);

        delete_from purchParmLine
            notexists join purchParmTable
                where purchParmLine.ParmId  == purchParmTable.ParmId   &&
                    purchParmLine.TableRefId  == purchParmTable.TableRefId;

        PurchParmSubLine purchParmSubLine;
        PurchParmCleanUp::skipDeleteLogic(purchParmSubLine);

        delete_from purchParmSubLine
            notexists join purchParmLine
                where purchParmSubLine.LineRefRecId == purchParmLine.RecId;

        PurchParmLine_Asset purchParmLine_Asset;
        PurchParmCleanUp::skipDeleteLogic(purchParmLine_Asset);

        delete_from purchParmLine_Asset
            notexists join purchParmLine
                where purchParmLine_Asset.PurchParmLineRecId == purchParmLine.RecId;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            PurchParmTable_PaymentDisbursement paymentDisbursement;
            PurchParmCleanUp::skipDeleteLogic(paymentDisbursement);

            delete_from paymentDisbursement
                notexists join purchParmTable
                    where paymentDisbursement.ParmId == purchParmTable.ParmId &&
                        paymentDisbursement.TableRefId == purchParmTable.TableRefId &&
                        paymentDisbursement.VendAccount == purchParmTable.InvoiceAccount;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInvoiceSingleOrderTables</Name>
				<Source><![CDATA[
    private void deleteInvoiceSingleOrderTables()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        PurchPrepayTable purchPrepayTable;

        while select vendInvoiceInfoTable
            where vendInvoiceInfoTable.PurchId == purchId
            outer join RecId, PurchTable from purchPrepayTable
                where  vendInvoiceInfoTable.PurchId == purchPrepayTable.PurchTable &&
                    purchPrepayTable.PrepayApplicationRemaining > 0
        {
            if (purchPrepayTable.RecId == 0)
            {
                boolean fullySettled = true;

                VendTrans vendTrans;

                select RecId from vendTrans
                    where vendTrans.Invoice == vendInvoiceInfoTable.Num &&
                        vendTrans.SettleAmountCur < vendTrans.AmountCur;

                if (vendTrans.RecId)
                {
                    fullySettled = false;
                }

                if (fullySettled)
                {
                    ttsbegin;

                    PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoTable);
                    vendInvoiceInfoTable.selectForUpdate(true);
                    vendInvoiceInfoTable.delete();

                    PurchParmCleanUp::cleanupAfterDeleteForInvoiceTables();

                    // This method called with parameter 'true' will delete all orphaned data below VendInvoiceInfoSubTable and acts like a
                    // static in that it all orphaned data is removed.
                    vendInvoiceInfoTable.deleteWithoutDeleteActions(true);

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        dialogPurchId = dialog.addFieldValue(extendedTypeStr(PurchId), purchId);
        dialogPurchId.enabled(false);

        dialogCleanUpMode.visible(false);
        dialogCleanupDate.visible(false);
        dialogSetDaysAgo.visible(false);
        dialogDaysAgo.visible(false);

        if (dialogBypassInvoicePreprocessingApplicabilityCheck)
        {
            dialogBypassInvoicePreprocessingApplicabilityCheck.visible(false);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        boolean ret = super();

        cleanUpMode = SalesPurchParmCleanUpMode::Executed;
        cleanupDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS147071";
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static PurchParmCleanUpSingleOrder construct(PurchTable _purchTable)
    {
        PurchParmCleanUpSingleOrder purchParmCleanUpSingleOrder = new PurchParmCleanUpSingleOrder();
        purchParmCleanUpSingleOrder.parmPurchId(_purchTable.PurchId);
        return purchParmCleanUpSingleOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        if (!_args || !(_args.record() is PurchTable))
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        PurchParmCleanUpSingleOrder purchParmCleanUp = PurchParmCleanUpSingleOrder::construct(_args.record() as PurchTable);

        if (purchParmCleanUp.prompt())
        {
            purchParmCleanUp.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>