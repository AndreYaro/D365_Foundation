<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanDimensionStructureSynchronizationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>BudgetPlanDimensionStructureSynchronizationProvider</c> is the dimension structure synchronization provider for budget plan data.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.DimensionStructureISynchronizationTransactionProvider))]
[DimensionStructureSynchronizationProviderCaption("@Budget:BudgetPlanDimensionStructureSynchronizationProviderCaption")]
[DimensionStructureSynchronizationProviderInterface(true)]
[DimensionStructureSynchronizationProviderV2Flight(classStr(BudgetPlanDimensionStructureSynchronizationV2Flight))]
public class BudgetPlanDimensionStructureSynchronizationProvider implements DimensionStructureISynchronizationTransactionProvider, DimensionStructureISynchronizationTransactionProviderV2
{
    private const str InstrumentationNamespace = classStr(BudgetPlanDimensionStructureSynchronizationProvider);
    private SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(InstrumentationNamespace);
    private const int MaxRetryCount = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfStuctureRemovalFromLedgerIsPrevented</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the account structure is prevented from being removed from the ledger.
    /// </summary>
    /// <param name="_dimensionHierarchy">
    /// The account structure being removed.
    /// </param>
    /// <param name="_ledger">
    /// The <c>Ledger</c> record from which the structure is being removed.
    /// </param>
    /// <param name = "_ret">
    /// The event handler result.
    /// </param>
    /// <returns>
    /// true if the account structure cannot be removed; otherwise, false.
    /// </returns>
    [SubscribesTo(classStr(LedgerStructureDelegates), delegateStr(LedgerStructureDelegates, checkIfStuctureRemovalFromLedgerIsPrevented))]
    public static void checkIfStuctureRemovalFromLedgerIsPrevented(DimensionHierarchy _dimensionHierarchy, Ledger _ledger, EventHandlerResult _ret)
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(classStr(BudgetPlanDimensionStructureSynchronizationProvider),
            staticMethodStr(BudgetPlanDimensionStructureSynchronizationProvider, checkIfStuctureRemovalFromLedgerIsPrevented));
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(BudgetPlanDimensionStructureSynchronizationProvider));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            activityContext.addCustomProperty('MethodName', 'checkIfStuctureRemovalFromLedgerIsPrevented');

            BudgetPlanLine budgetPlanLine;
            BudgetPlanHeader budgetPlanHeader;
            BudgetPlanningProcess budgetPlanningProcess;
            DimensionAttributeValueGroupCombination dimAttrValueGroupCombination;
            DimensionAttributeValueGroup dimAttrValueGroup;

            unchecked(Uncheck::XDS)
            {
                // Locate any LedgerDimension from unposted budget plan lines
                select firstonly RecId from budgetPlanLine
            exists join budgetPlanHeader
                where budgetPlanHeader.RecId == budgetPlanLine.BudgetPlanHeader
                    && budgetPlanHeader.DocumentStatus != BudgetPlanStatus::Finalized
            exists join budgetPlanningProcess
                where budgetPlanHeader.BudgetPlanningProcess == budgetPlanningProcess.RecId
                    && budgetPlanningProcess.Ledger == _ledger.RecId
            exists join dimAttrValueGroupCombination
                where dimAttrValueGroupCombination.DimensionAttributeValueCombination == budgetPlanLine.LedgerDimension
            exists join dimAttrValueGroup
                where dimAttrValueGroup.RecId == dimAttrValueGroupCombination.DimensionAttributeValueGroup
                    && dimAttrValueGroup.DimensionHierarchy == _dimensionHierarchy.RecId;
            }

            if (budgetPlanLine.RecId)
            {
                // The account structure is referenced by a ledger dimension in unposted budgt plan lines
                checkFailed(strfmt("@Budget:BudgetPlanLineLedgerDimensionWithStructureInUseForLedger", _dimensionHierarchy.Name, _ledger.Name));
                _ret.booleanResult(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionSynchronize</Name>
				<Source><![CDATA[
    public void insertDimensionSynchronize(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

        if (synchronizationRequest)
        {
            unchecked(Uncheck::XDS)
            {
                DimensionSynchronize    dimSynchronize;
                DimensionSynchronize    dimSynchronizeNotExists;

                dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
                dimSynchronizeNotExists.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());

                BudgetPlanLine          budgetPlanLine;
                BudgetPlanHeader        budgetPlanHeader;
                BudgetPlanningProcess   budgetPlanningProcess;
                CompanyInfo             companyInfo;
                Ledger                  ledger;

                companyInfo.skipPostLoad(true);
                SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(BudgetPlanDimensionStructureSynchronizationProvider, insertDimensionSynchronize));

                using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
                {
                    // Extract LedgerDimensions from budget plan lines not on a Finalized budget plan header.

                    insert_recordset dimSynchronize (OriginalLedgerDimension, DataArea)
                    select LedgerDimension from budgetPlanLine
                        group by budgetPlanLine.LedgerDimension, companyInfo.DataArea
                        join budgetPlanHeader
                            where budgetPlanHeader.RecId == budgetPlanLine.BudgetPlanHeader
                                && budgetPlanHeader.DocumentStatus != BudgetPlanStatus::Finalized
                        join budgetPlanningProcess
                            where budgetPlanHeader.BudgetPlanningProcess == budgetPlanningProcess.RecId
                        join ledger
                            where budgetPlanningProcess.Ledger == ledger.RecId
                        join DataArea from companyInfo
                            where companyInfo.RecId == ledger.PrimaryForLegalEntity
                        notexists join dimSynchronizeNotExists
                            where dimSynchronizeNotExists.OriginalLedgerDimension == budgetPlanLine.LedgerDimension;

                    activityContext.addCustomProperty('MethodName', 'insertDimensionSynchronize');
                    activityContext.addCustomProperty('WereRecordsInserted', int2str(dimSynchronize.rowCount() > 0));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChanges</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChanges(DimensionSynchronize _dimensionSynchronize)
    {
        return DimensionStructureChangeSynchronize::synchronizeStructureChanges(_dimensionSynchronize.OriginalLedgerDimension, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferences</Name>
				<Source><![CDATA[
    public void updateProviderReferences(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(BudgetPlanDimensionStructureSynchronizationProvider, updateProviderReferences));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

            if (synchronizationRequest)
            {
                unchecked(Uncheck::XDS)
                {
                    DimensionSynchronize dimSynchronize;

                    dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());

                    BudgetPlanLine          budgetPlanLine;
                    BudgetPlanHeader        budgetPlanHeader;

                    //Update ledger dimensions for budget plan lines with headers that are not finalized

                    update_recordset budgetPlanLine
                    setting LedgerDimension = dimSynchronize.UpdatedLedgerDimension
                    join UpdatedLedgerDimension from dimSynchronize
                        where dimSynchronize.OriginalLedgerDimension == budgetPlanLine.LedgerDimension &&
                                dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension
                    join budgetPlanHeader
                        where budgetPlanHeader.RecId == budgetPlanLine.BudgetPlanHeader
                            && budgetPlanHeader.DocumentStatus != BudgetPlanStatus::Finalized;

                    Info(strFmt("@Dimension:StructureSynchronizationProviderLog", budgetPlanLine.rowCount(), tableId2PName(budgetPlanLine.TableId)));

                    activityContext.addCustomProperty('MethodName', 'updateProviderReferences');
                    activityContext.addCustomProperty('WereRecordsUpdated', int2str(budgetPlanLine.rowCount() > 0));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferencesV2</Name>
				<Source><![CDATA[
    public void updateProviderReferencesV2(DimensionStructureSynchronizationRequestV2 _request)
    {
        RecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(BudgetPlanDimensionStructureSynchronizationProvider, updateProviderReferences));
        
        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            unchecked(Uncheck::XDS)
            {
                DimensionSynchronizeDetail dimSynchronize;
                BudgetPlanLine budgetPlanLine;
                BudgetPlanHeader budgetPlanHeader;

                try
                {
                    ttsbegin;

                    update_recordset budgetPlanLine
                    setting LedgerDimension = dimSynchronize.UpdatedLedgerDimension
                    join UpdatedLedgerDimension from dimSynchronize
                        where dimSynchronize.OriginalLedgerDimension == budgetPlanLine.LedgerDimension &&
                                dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                                dimSynchronize.ProviderStatusTrackingId == _request.parmProviderStatusTrackingId()
                    join budgetPlanHeader
                        where budgetPlanHeader.RecId == budgetPlanLine.BudgetPlanHeader
                            && budgetPlanHeader.DocumentStatus != BudgetPlanStatus::Finalized;

                    ttscommit;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() > MaxRetryCount)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }

                Info(strFmt("@Dimension:StructureSynchronizationProviderLog", budgetPlanLine.rowCount(), tableId2PName(budgetPlanLine.TableId)));

                activityContext.addCustomProperty('MethodName', 'updateProviderReferencesV2');
                activityContext.addCustomProperty('WereRecordsUpdated', int2str(budgetPlanLine.rowCount() > 0));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChangesV2</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChangesV2(DimensionSynchronizeDetail _dimSynchronize)
    {
        return DimensionStructureChangeSynchronize::synchronizeStructureChanges(_dimSynchronize.OriginalLedgerDimension, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionSynchronizeV2</Name>
				<Source><![CDATA[
    public RefRecId insertDimensionSynchronizeV2(DimensionStructureSynchronizationRequestV2 _synchronizationRequest)
    {
        DimensionSynchronizeDetail dimSynchronize;
        DimensionSynchronizeDetail dimSynchronizeNotExists;
        BudgetPlanLine budgetPlanLine;
        BudgetPlanHeader budgetPlanHeader;
        BudgetPlanningProcess budgetPlanningProcess;
        CompanyInfo companyInfo;
        Ledger ledger;
        RefRecId providerStatusTrackingId;
        DimensionStructureSyncProviderStatusTracking dimensionStructureSyncProviderStatusTracking;

        companyInfo.skipPostLoad(true);
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(BudgetPlanDimensionStructureSynchronizationProvider, insertDimensionSynchronize));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            RecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();
            unchecked(Uncheck::XDS)
            {
                select forupdate firstonly dimensionStructureSyncProviderStatusTracking
                    where dimensionStructureSyncProviderStatusTracking.BatchJobId == batchJobId &&
                        dimensionStructureSyncProviderStatusTracking.ProviderName == _synchronizationRequest.parmProviderName();

                if (!dimensionStructureSyncProviderStatusTracking)
                {
                    dimensionStructureSyncProviderStatusTracking.BatchJobId = batchJobId;
                    dimensionStructureSyncProviderStatusTracking.ProviderName = _synchronizationRequest.parmProviderName();
                    dimensionStructureSyncProviderStatusTracking.insert();
                    providerStatusTrackingId = dimensionStructureSyncProviderStatusTracking.RecId;

                    // Skip event handlers to avoid falling back to row-by-row operation.
                    budgetPlanLine.skipEvents(true);
                    budgetPlanLine.skipPostLoad(true);

                    ttsbegin;

                    // Extract LedgerDimensions from budget plan lines not on a Finalized budget plan header.
                    insert_recordset dimSynchronize (ProviderStatusTrackingId, OriginalLedgerDimension, DataArea)
                    select providerStatusTrackingId, LedgerDimension from budgetPlanLine
                        group by budgetPlanLine.LedgerDimension, companyInfo.DataArea
                        join budgetPlanHeader
                            where budgetPlanHeader.RecId == budgetPlanLine.BudgetPlanHeader
                                && budgetPlanHeader.DocumentStatus != BudgetPlanStatus::Finalized
                        join budgetPlanningProcess
                            where budgetPlanHeader.BudgetPlanningProcess == budgetPlanningProcess.RecId
                        join ledger
                            where budgetPlanningProcess.Ledger == ledger.RecId
                        join DataArea from companyInfo
                            where companyInfo.RecId == ledger.PrimaryForLegalEntity
                        notexists join dimSynchronizeNotExists
                            where dimSynchronizeNotExists.OriginalLedgerDimension == budgetPlanLine.LedgerDimension &&
                                dimSynchronizeNotExists.ProviderStatusTrackingId == providerStatusTrackingId;

                    dimensionStructureSyncProviderStatusTracking.Status = DimensionStructureSyncProviderStatus::Inserted;
                    dimensionStructureSyncProviderStatusTracking.update();

                    ttscommit;
                }
                else
                {
                    providerStatusTrackingId = dimensionStructureSyncProviderStatusTracking.RecId;
                }

                activityContext.addCustomProperty('MethodName', 'insertDimensionSynchronizeV2');
                activityContext.addCustomProperty('WereRecordsInserted', int2str(dimSynchronize.rowCount() > 0));
            }

        }

        return providerStatusTrackingId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>