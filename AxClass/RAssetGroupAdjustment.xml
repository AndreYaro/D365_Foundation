<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetGroupAdjustment</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetGroupAdjustment extends RunBaseBatch implements BatchRetryable
{
    QueryRun              queryRun;

    RAssetStandardId      assetStandardId;
    DialogField           dialogAssetStandard;

    Factor                factor;
    DialogField           dialogFactor;

    Counter               progressCounter;

    RAssetAdjustmentTable assetAdjustmentTable;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        assetStandardId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@GLS116595");
        dialogAssetStandard = dialog.addField(extendedtypestr(RAssetStandardId), "@GLS116120");
        dialogFactor        = dialog.addFieldValue(extendedtypestr(Factor), 1, "@SYS5443");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    private void displayProgress(RAssetId _assetId)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(strfmt("@GLS116533", _assetId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        assetStandardId = dialogAssetStandard.value();
        factor          = dialogFactor.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        Query                   query           = new Query();
        QueryBuildDataSource    queryDataSource = query.addDataSource(tablenum(RAssetAdjustmentTrans));
        QueryBuildRange         queryRange      = queryDataSource.addRange(fieldnum(RAssetAdjustmentTrans, AdjustmentTableRecId));
        ;

        super();

        queryRange.value(queryValue(assetAdjustmentTable.RecId));
        queryRange.status(RangeStatus::Hidden);

        queryRange = queryDataSource.addRange(fieldnum(RAssetAdjustmentTrans, AssetStandardId));
        queryRange.status(RangeStatus::Hidden);

        queryDataSource = queryDataSource.addDataSource(tablenum(RAssetTable));
        queryDataSource.relations(true);
        queryDataSource.joinMode(JoinMode::ExistsJoin);
        queryRange      = queryDataSource.addRange(fieldnum(RAssetTable, AccountNum));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjTable</Name>
				<Source><![CDATA[
    public RAssetAdjustmentTable parmAdjTable(RAssetAdjustmentTable _assetAdjustmentTable = assetAdjustmentTable)
    {
        assetAdjustmentTable = _assetAdjustmentTable;
        return assetAdjustmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactor</Name>
				<Source><![CDATA[
    // created for using in Test Automation
    public Factor parmFactor(Factor _factor = factor)
    {
        factor = _factor;
        return factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRAssetStandardId</Name>
				<Source><![CDATA[
    // created for using in Test Automation
    public RAssetStandardId parmRAssetStandardId(RAssetStandardId _assetStandardId = assetStandardId)
    {
        assetStandardId = _assetStandardId;
        return assetStandardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildUpdate</Name>
				<Source><![CDATA[
    private void queryBuildUpdate()
    {
        ;

        if (assetStandardId)
        {
            queryRun.query().dataSourceTable(tablenum(RAssetAdjustmentTrans)).
                findRange(fieldnum(RAssetAdjustmentTrans, AssetStandardId)).
                value(queryValue(assetStandardId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RAssetAdjustmentTrans   assetAdjustmentTrans;
        Counter                 progressTotal;
        #macrolib.AviFiles
        ;

        this.queryBuildUpdate();
        progressTotal               = SysQuery::countTotal(queryRun);

        this.progressInit("@GLS116595", progressTotal, #AviUpdate);
        progress = this.parmProgress();

        queryRun.query().dataSourceTable(tablenum(RAssetAdjustmentTrans)).update(true);

        ttsbegin;
        while (queryRun.next())
        {
            assetAdjustmentTrans = queryRun.get(tablenum(RAssetAdjustmentTrans));
            this.displayProgress(assetAdjustmentTrans.AccountNum);

            assetAdjustmentTrans.Factor = factor;
            assetAdjustmentTrans.NewCost = assetAdjustmentTrans.OldCost * factor;
            assetAdjustmentTrans.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version     = conpeek(_packedClass, 1);
        PackedQueryRun  packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }

                if (assetAdjustmentTable.RecId !=
                    str2int64(queryRun.query().dataSourceTable(tablenum(RAssetAdjustmentTrans)).
                    findRange(fieldnum(RAssetAdjustmentTrans, AdjustmentTableRecId)).value()))
                {
                    this.initParmDefault();
                }

                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;
        ;

        ret = super(calledFrom);
        if (factor == 0)
        {
            info("@GLS116597");
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        RAssetGroupAdjustment assetGroupAdjustment = new RAssetGroupAdjustment();

        assetGroupAdjustment.parmAdjTable(_args.caller().assetAdjustmentTable());

        if (assetGroupAdjustment.prompt())
        {
            assetGroupAdjustment.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>