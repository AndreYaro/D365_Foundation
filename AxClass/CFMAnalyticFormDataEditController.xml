<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMAnalyticFormDataEditController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles design and operations in <c>CFMAnalyticFormDataEdit</c> form.
/// </summary>
class CFMAnalyticFormDataEditController
{
    CFMAnalyticSourceDataEdit sourceDataEdit;
    CFMAnalyticTableTmp analyticalTable;
    Map fieldSourceTargetMap;
    Map amountDateFieldIdMap;
    TransDate transDate;
    CFMJournalId journalId;
    CFMJournalTable journalTable;
    NoYes usePaymAccountNum;
    FormRealControl cashBalanceLimitCtrl, dailyBalanceLimitCtrl;
    CFMAnalyticTableFormController analyticFormController;
    FormStringControl paymentAccountCtrl;
    FormComboBoxControl paymentAccountTypeCtrl;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructFromAnalyticForm</Name>
				<Source><![CDATA[
    public static CFMAnalyticFormDataEditController constructFromAnalyticForm(CFMAnalyticTableFormController _analyticFormController,
        CFMAnalyticTableTmp _analyticalTable,
        Map _fieldSourceTargetMap,
        Map _amountDateFieldIdMap,
        TransDate _transDate,
        JournalId _journalId)
    {
        CFMAnalyticFormDataEditController controller = new CFMAnalyticFormDataEditController();

        controller.parmAnalyticFormController(_analyticFormController);
        controller.parmAnalyticalTable(_analyticalTable);
        controller.parmFieldSourceTargetMap(_fieldSourceTargetMap);
        controller.parmAmountDateFieldIdMap(_amountDateFieldIdMap);
        controller.parmTransDate(_transDate);
        controller.parmJournalId(_journalId);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormControls</Name>
				<Source><![CDATA[
    public void initFormControls()
    {
        if (this.parmUsePaymAccountNum())
        {
            if (cashBalanceLimitCtrl)
            {
                cashBalanceLimitCtrl.visible(true);
            }

            if (dailyBalanceLimitCtrl)
            {
                dailyBalanceLimitCtrl.visible(false);
            }

            if (paymentAccountCtrl)
            {
                paymentAccountCtrl.visible(true);
            }

            if (paymentAccountTypeCtrl)
            {
                paymentAccountTypeCtrl.visible(true);
            }
        }
        else
        {
            if (cashBalanceLimitCtrl)
            {
                cashBalanceLimitCtrl.visible(false);
            }

            if (dailyBalanceLimitCtrl)
            {
                dailyBalanceLimitCtrl.visible(true);
            }

            if (paymentAccountCtrl)
            {
                paymentAccountCtrl.visible(false);
            }

            if (paymentAccountTypeCtrl)
            {
                paymentAccountTypeCtrl.visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceDataEdit</Name>
				<Source><![CDATA[
    protected void initSourceDataEdit()
    {
        sourceDataEdit = CFMAnalyticSourceDataEdit::construct(analyticalTable,
            fieldSourceTargetMap,
            amountDateFieldIdMap,
            transDate,
            journalId);

        sourceDataEdit.parmUsePaymAccountNum(this.parmUsePaymAccountNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalStatus</Name>
				<Source><![CDATA[
    private boolean journalStatus()
    {
        if (journalTable.Posted)
        {
            return false;
        }

        if (JournalTableData::journalBlockLevel(journalTable) != JournalBlockLevel::None)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountDateFieldIdMap</Name>
				<Source><![CDATA[
    public Map parmAmountDateFieldIdMap(Map _amountDateFieldIdMap = amountDateFieldIdMap)
    {
        amountDateFieldIdMap = _amountDateFieldIdMap;

        return amountDateFieldIdMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAnalyticalTable</Name>
				<Source><![CDATA[
    public CFMAnalyticTableTmp parmAnalyticalTable(CFMAnalyticTableTmp _analyticalTable = analyticalTable)
    {
        analyticalTable = _analyticalTable;

        return analyticalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAnalyticFormController</Name>
				<Source><![CDATA[
    public CFMAnalyticTableFormController parmAnalyticFormController(CFMAnalyticTableFormController _analyticFormController = analyticFormController)
    {
        analyticFormController = _analyticFormController;

        return analyticFormController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCashBalanceLimitCtrl</Name>
				<Source><![CDATA[
    public FormRealControl parmCashBalanceLimitCtrl(FormRealControl _cashBalanceLimitCtrl = cashBalanceLimitCtrl)
    {
        cashBalanceLimitCtrl = _cashBalanceLimitCtrl;

        return cashBalanceLimitCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDailyBalanceLimitCtrl</Name>
				<Source><![CDATA[
    public FormRealControl parmDailyBalanceLimitCtrl(FormRealControl _dailyBalanceLimitCtrl = dailyBalanceLimitCtrl)
    {
        dailyBalanceLimitCtrl = _dailyBalanceLimitCtrl;

        return dailyBalanceLimitCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldSourceTargetMap</Name>
				<Source><![CDATA[
    public Map parmFieldSourceTargetMap(Map _fieldSourceTargetMap = fieldSourceTargetMap)
    {
        fieldSourceTargetMap = _fieldSourceTargetMap;

        return fieldSourceTargetMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public CFMJournalId parmJournalId(CFMJournalId _journalId = journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentAccountCtrl</Name>
				<Source><![CDATA[
    public FormStringControl parmPaymentAccountCtrl(FormStringControl _paymentAccountCtrl = paymentAccountCtrl)
    {
        paymentAccountCtrl = _paymentAccountCtrl;

        return paymentAccountCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentAccountTypeCtrl</Name>
				<Source><![CDATA[
    public FormComboBoxControl parmPaymentAccountTypeCtrl(FormComboBoxControl _paymentAccountTypeCtrl = paymentAccountTypeCtrl)
    {
        paymentAccountTypeCtrl = _paymentAccountTypeCtrl;

        return paymentAccountTypeCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsePaymAccountNum</Name>
				<Source><![CDATA[
    public NoYes parmUsePaymAccountNum(NoYes _usePaymaccountNum = usePaymaccountNum)
    {
        usePaymaccountNum = _usePaymaccountNum;

        return usePaymaccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareEditData</Name>
				<Source><![CDATA[
    private void prepareEditData()
    {
        if (sourceDataEdit)
        {
            sourceDataEdit.prepareSourceData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcAnalyticForm</Name>
				<Source><![CDATA[
    private void recalcAnalyticForm()
    {
        analyticFormController.parmForceRecalcForm(true);
        analyticFormController.calculateAnalyticalTable();
        analyticFormController.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showEditForm</Name>
				<Source><![CDATA[
    public void showEditForm()
    {
        journalTable = CFMJournalTable::find(journalId);

        if (this.journalStatus())
        {
            JournalTableData::newTable(journalTable).updateBlock(JournalBlockLevel::None, JournalBlockLevel::InUse);
            this.initSourceDataEdit();

            if (sourceDataEdit)
            {
                this.prepareEditData();

                Args args = new Args();
                args.caller(this);
                new MenuFunction(menuitemDisplayStr(CFMAnalyticFormDataEdit), MenuItemType::Display).run(args);
            }

            JournalTableData::newTable(journalTable).updateBlock(JournalBlockLevel::InUse, JournalBlockLevel::None);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDataEdit</Name>
				<Source><![CDATA[
    public CFMAnalyticSourceDataEdit sourceDataEdit()
    {
        return sourceDataEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAnalyticForm</Name>
				<Source><![CDATA[
    public void updateAnalyticForm(CFMAnalyticFormDataEditTmp _dataEditTmp, Array _markedRecords)
    {
        CFMAnalyticFormSourceEditJournal editJournal = CFMAnalyticFormSourceEditJournal::construct(_dataEditTmp, _markedRecords, journalId);

        if (editJournal.create())
        {
            this.recalcAnalyticForm();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>