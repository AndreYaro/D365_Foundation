<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestCatNCAApprovalEvtHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendRequestCatNCAApprovalEvtHandler</c> class implements the started, completed, canceled,
///    and denied workflow approval element event interfaces that are used for the approval process.
/// </summary>
class VendRequestCatNCAApprovalEvtHandler implements WorkflowElementCompletedEventHandler,
                                                   WorkflowElementCanceledEventHandler,
                                                   WorkflowElementDeniedEventHandler,
                                                   WorkflowElementStartedEventHandler

{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cancels a workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The workflow context of the workflow item that created the event.
    /// </param>
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendRequestCategoryExtension::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                VendRequestCategoryStatus::CategoryRequestRejected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the workflow context of the workflow item that created the event and sets the approval
    ///    status to the <c>RequestApproved</c> record.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The workflow context of the workflow item that created the event.
    /// </param>
    /// <remarks>
    ///    This method is called when an approve action is applied to a workflow item.
    /// </remarks>
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendRequestCategoryExtension    vendRequestCategoryExtension;

        ttsbegin;
        select  forupdate vendRequestCategoryExtension
        where   vendRequestCategoryExtension.RecId == _workflowElementEventArgs.parmWorkflowContext().parmRecId();
        if  (vendRequestCategoryExtension.RecId)
        {
            vendRequestCategoryExtension.CategoryExtensionStatus = VendRequestCategoryStatus::CategoryRequestApproved;
            vendRequestCategoryExtension.update();
            VendRequest::addCategoriesFromRequest(vendRequestCategoryExtension.RecId);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>denied</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the workflow state to the <c>CategoryRequestRejected</c> record.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The workflow context of the workflow item that created the event.
    /// </param>
    public void denied(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendRequestCategoryExtension::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                       VendRequestCategoryStatus::CategoryRequestRejected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the workflow context of the workflow item that created the event and sets the workflow
    ///    status to the <c>CategoryRequestPendingReview</c> enumeration value.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The workflow context of the workflow item that created the event.
    /// </param>
    /// <remarks>
    ///    This method is called when a start event is created for a workflow item.
    /// </remarks>
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendRequestCategoryExtension::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                       VendRequestCategoryStatus::CategoryRequestPendingApproval);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>