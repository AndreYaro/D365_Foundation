<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobTypeTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanJobTypeTransfer</c> class controls kanban jobs of the transfer type.
/// </summary>
[LeanKanbanJobTypeFactoryAttribute(LeanKanbanJobType::Transfer)]
public class KanbanJobTypeTransfer extends KanbanJobType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canChangeLicensePlateId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the license plate dimension can be changed.
    /// </summary>
    /// <returns>
    ///    true if the license plate dimension can be changed; otherwise, false.
    /// </returns>
    protected boolean canChangeLicensePlateId()
    {
        return    this.mustBeInventoryControlled()
               && kanbanJob.Status == LeanKanbanJobStatus::NotPlanned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGetLicensePlateFromKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the license plate dimension can be set from the kanban card.
    /// </summary>
    /// <returns>
    ///    true if the license plate can be set; otherwise, false.
    /// </returns>
    public boolean canGetLicensePlateFromKanban()
    {
        KanbanJob previousKanbanJob = kanbanJob.RecId ? kanbanJob.previousJob() : kanbanJob.kanban().lastKanbanJob();

        return    previousKanbanJob
               && previousKanbanJob.type().canGetLicensePlateFromKanban()
               && this.mustBeInventoryControlledIssue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>KanbanJob</c> table buffer can have the specified status.
    /// </summary>
    /// <param name="_leanKanbanJobStatus">
    ///    The <c>LeanKanbanJobStatus</c> enumeration value to test.
    /// </param>
    /// <returns>
    ///    true if the <c>KanbanJob</c> table buffer can have the status; otherwise false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns true.
    /// </remarks>
    public boolean canHaveStatus(LeanKanbanJobStatus _leanKanbanJobStatus)
    {
        return    _leanKanbanJobStatus == LeanKanbanJobStatus::NotPlanned
               || _leanKanbanJobStatus == LeanKanbanJobStatus::InProgress
               || _leanKanbanJobStatus == LeanKanbanJobStatus::Completed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the inventory movements related to the kanban job.
    /// </summary>
    public void deleteMovement()
    {
        if (this.mustBeInventoryControlledIssue())
        {
            InventUpd_DeleteMovement::newMovement(kanbanJob.inventMovement(),false).updateNow();
        }

        if (this.mustBeInventoryControlledReceipt())
        {
            InventUpd_DeleteMovement::newMovement(kanbanJob.inventMovement(InventMovSubType::TransferReceipt),false).updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory dimensions for issue and receipt by merging the item dimensions and
    /// location dimensions.
    /// </summary>
    /// <param name="_kanban">
    /// A <c>Kanban</c> table buffer that is used to initialize the inventory dimensions.
    /// </param>
    /// <param name="_issueInventDim">
    /// A <c>InventDim</c> table buffer that is used to initialize the inventory dimensions.
    /// </param>
    /// <param name="_receiptInventDim">
    /// A <c>InventDim</c> table buffer that is used to initialize the inventory dimensions.
    /// </param>
    public void initInventDimIds(
        Kanban    _kanban,
        InventDim _issueInventDim,
        InventDim _receiptInventDim)
    {
        InventDim   issueInventDim   = _issueInventDim.data();
        InventDim   receiptInventDim = _receiptInventDim.data();

        // validation takes place in the KanbanLicensePlate class
        // should a license plate have already been set, then the original value will be returned.
        if (this.mustBeInventoryControlledIssue())
        {
            issueInventDim.LicensePlateId = KanbanLicensePlate::newStandard(kanbanJob,false,this).setLicensePlate(issueInventDim);

            if (this.mustBeInventoryControlledReceipt())
            {
                receiptInventDim.LicensePlateId = KanbanLicensePlate::newStandard(kanbanJob,false,this).setLicensePlate(receiptInventDim);
            }
        }

        super(_kanban,issueInventDim,receiptInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the <c>LedgerTransType</c> enumeration value to use with ledger postings.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerTransType</c> value.
    /// </returns>
    public LedgerTransType ledgerTransType()
    {
        return this.mustBeWIPMovement() ? LedgerTransType::Production : LedgerTransType::Invent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeInventoryControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the kanban job must be inventory-controlled.
    /// </summary>
    /// <returns>
    ///    true if the kanban job must be inventory-controlled; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Inventory-controlled means that ending a kanban job creates inventory transactions.
    /// </remarks>
    public boolean mustBeInventoryControlled()
    {
        boolean result = kanbanJob.InventTransId      != ''
                 || kanbanJob.IssueInventTransId != '';

        if (   !result
            && !kanbanJob.RecId)
        {
            result =    this.mustBeWIPMovement()
                     || this.mustBeTransferMovement();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeInventoryControlledIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the kanban job issue must be inventory-controlled.
    /// </summary>
    /// <returns>
    ///    true if the kanban job must be inventory-controlled; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This is related to the kanban item instead of any of the used materials.
    /// </remarks>
    public boolean mustBeInventoryControlledIssue()
    {
        InventDimParm           inventDimParm;

        boolean result = kanbanJob.IssueInventTransId != '';

        if (   !result
            && !kanbanJob.RecId)
        {
            PlanActivity         planActivity          = kanbanJob.planActivity();
            LeanInventoryControl issueInventoryControl = planActivity.issueLocation().inventoryControl();
            NoYes                issueOnHandUpdate     = planActivity.onHandUpdate(PlanActivityType::Pick);

            //check, if the physical posting will in fact be on the supermarket.
            if (issueInventoryControl == LeanInventoryControl::Restricted)
            {
                InventDimGroupSetup::newInventTable(kanbanJob.inventTable()).inventDimParmActivePhysicalInventory(inventDimParm);
                issueInventoryControl = inventDimParm.wmsLocationIdFlag == NoYes::No ? LeanInventoryControl::Full : issueInventoryControl;
            }

            result =    issueOnHandUpdate
                     && issueInventoryControl == LeanInventoryControl::Full;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeTransferMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the movement for the <c>kanbanJob</c> record is a transfer type movement.
    /// </summary>
    /// <returns>
    ///    true if the movement must be a subtype of the <c>InventMov_KanbanJob_Transfer</c> class; otherwise,
    ///    false.
    /// </returns>
    /// <remarks>
    ///    A transfer type occurs when both sides of a transaction are booked in inventory.
    /// </remarks>
    public boolean mustBeTransferMovement()
    {
        return    this.mustBeInventoryControlledIssue()
               && this.mustBeInventoryControlledReceipt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeWIPIssueMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the movement for the <c>kanbanJob</c> record is a WIP issue type movement.
    /// </summary>
    /// <returns>
    ///    true if the movement must be a <c>InventMov_KanbanJob_WIP</c> object; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A WIP type occurs when only one side of a transaction is booked in the inventory.
    /// </remarks>
    public boolean mustBeWIPIssueMovement()
    {
        boolean result;

        if (kanbanJob.RecId)
        {
            result =     kanbanJob.IssueInventTransId
                     && !kanbanJob.InventTransId;
        }
        else
        {
            result =     this.mustBeInventoryControlledIssue()
                     && !this.mustBeInventoryControlledReceipt();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeWIPReceiptMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the movement for the <c>kanbanJob</c> record is a WIP receipt type movement.
    /// </summary>
    /// <returns>
    ///    true if the movement must be a <c>InventMov_KanbanJob_WIP</c> object; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A WIP type occurs when only one side of a transaction is booked in inventory.
    /// </remarks>
    public boolean mustBeWIPReceiptMovement()
    {
        boolean result;

        if (kanbanJob.RecId)
        {
            result =    !kanbanJob.IssueInventTransId
                     &&  kanbanJob.InventTransId;
        }
        else
        {
            result =    !this.mustBeInventoryControlledIssue()
                     &&  this.mustBeInventoryControlledReceipt();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEndUpdateFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the kanban job inventory transactions must be financially updated when ended.
    /// </summary>
    /// <returns>
    ///    true the kanban job inventory transactions must be financially updated; otherwise false.
    /// </returns>
    /// <remarks>
    ///    Transfer movements are updated financially when they end.
    /// </remarks>
    public boolean mustEndUpdateFinancial()
    {
        return this.mustBeTransferMovement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHaveKanbanJobIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a kanban job must have a <c>KanbanJobIssue</c> record.
    /// </summary>
    /// <returns>
    ///    true if a <c>KanbanJobIssue</c> record is required; otherwise, false.
    /// </returns>
    public boolean mustHaveKanbanJobIssue()
    {
        return !kanbanJob.existPreviousJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>KanbanJob</c> inventory transaction ids as required.
    /// </summary>
    public void setInventTransIds()
    {
        if (this.mustBeInventoryControlled())
        {
            if (   !kanbanJob.InventTransId
                && (this.mustBeWIPReceiptMovement()
                ||  this.mustBeTransferMovement()))
            {
                kanbanJob.InventTransId         = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
                kanbanJob.InventTransDataAreaId = kanbanJob.InventTransId ? appl.company().dataArea(tableNum(InventTransOrigin)) : '';
            }

            if (   !kanbanJob.IssueInventTransId
                && (this.mustBeWIPIssueMovement()
                ||  this.mustBeTransferMovement()))
            {
                kanbanJob.IssueInventTransId         = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
                kanbanJob.IssueInventTransDataAreaId = kanbanJob.IssueInventTransId ? appl.company().dataArea(tableNum(InventTransOrigin)) : '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the <c>SysModule</c> enumeration value to use with the ledger postings.
    /// </summary>
    /// <returns>
    ///    A <c>SysModule</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    The base class method is abstract.
    /// </remarks>
    public SysModule sysModule()
    {
        return SysModule::Invent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanJobTypeTransfer</c> class.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The <c>KanbanJob</c> table buffer to use to create the class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanJobTypeTransfer</c> class.
    /// </returns>
    public static KanbanJobType construct(KanbanJob _kanbanJob)
    {
        return new KanbanJobTypeTransfer(_kanbanJob);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>