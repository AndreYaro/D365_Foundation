<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgProdShopFloorValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgProdShopFloorValidation</c> class validates shop floor control in production context.
/// </summary>
internal class JmgProdShopFloorValidation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static JmgProdShopFloorValidation construct()
    {
        return new JmgProdShopFloorValidation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipValidation</Name>
				<Source><![CDATA[
    private boolean mustSkipValidation(ProdId _prodId)
    {
        ProdTable prodTable = ProdTable::find(_prodId);
        JmgProdParametersDim prodParametersDim = JmgProdParametersDim::find(prodTable.InventDimId);
        if (prodParametersDim.SkipTimeAdjustments)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasActiveJournalRegistrations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the order has active journal registrations (JmgStampJournalTrans) and display warning messages.
    /// </summary>
    /// <returns>true if there exists journal registrations, else false</returns>
    [Hookable(false)]
    public boolean hasActiveJournalRegistrations(ProdId _prodId)
    {
        if (FeatureStateProvider::isFeatureEnabled(JmgDecoupleMesAndTAAFeature::instance()))
        {
            if (this.mustSkipValidation(_prodId))
            {
                return false;
            }
        }

        JmgStampJournalTrans    jmgStampJournalTrans;

        // If any employees are currently working on jobs associated to the
        // production then prompt user to make sure that
        // all these registrations should be deleted from Shop Floor Control
        SysDaQueryObject qe = new SysDaQueryObject(jmgStampJournalTrans);
        SysDaGroupBys groups = new SysDaGroupBys();
        groups.add(fieldStr(JmgStampJournalTrans, ProfileDate))
                .add(fieldStr(JmgStampJournalTrans, Worker));
        qe.groupByClause(groups);

        this.buildJmgStampJournalTransProdWhereClause(jmgStampJournalTrans, qe, _prodId);

        var fo = new SysDaFindObject(qe);
        new SysDaFindStatement().execute(fo);

        if (jmgStampJournalTrans)
        {
            setPrefix("@SCM:ProdDetailedErrorDescJmgStampJournalTrans");

            while (jmgStampJournalTrans)
            {
                warning(strFmt("@SCM:ProdDetailedErrorPNumberProfileDate", HcmWorker::find(jmgStampJournalTrans.Worker).PersonnelNumber, jmgStampJournalTrans.ProfileDate));
                next jmgStampJournalTrans;
            }

            return true;
        }
        
        return jmgStampJournalTrans.Worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasActiveRawRegistrations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the order has active raw registrations (JmgTermReg) and display warning messages.
    /// </summary>
    /// <returns>true if there exists raw registrations, else false</returns>
    [Hookable(false)]
    public boolean hasActiveRawRegistrations(ProdId _prodId)
    {
        if (FeatureStateProvider::isFeatureEnabled(JmgDecoupleMesAndTAAFeature::instance()))
        {
            if (this.mustSkipValidation(_prodId))
            {
                return false;
            }
        }

        JmgTermReg              jmgTermReg;
        ProdRoute               prodRoute;
        ProdRouteJob            prodRouteJob;

        switch (JmgProdParameters::find().StampLevel)
        {
            case JmgStampLevel::Route:
                    select jmgTermReg
                        group by ProfileDate, Worker
                        where jmgTermReg.JobActive      == NoYes::Yes
                        exists join prodRoute
                        where prodRoute.ProdId          == _prodId &&
                              (prodRoute.JobIdSetup     == jmgTermReg.JobId ||
                               prodRoute.JobIdProcess   == jmgTermReg.JobId);
                if (jmgTermReg)
                {
                    this.printJmgTermRegErrorMsg(jmgTermReg);
                    return true;
                }
                break;
            case JmgStampLevel::Job:
                    select jmgTermReg
                        group by ProfileDate, Worker
                        where jmgTermReg.JobActive      == NoYes::Yes
                        exists join prodRouteJob
                        where prodRouteJob.ProdId   == _prodId &&
                              jmgTermReg.JobId      == prodRouteJob.JobId;
                if (jmgTermReg)
                {
                    this.printJmgTermRegErrorMsg(jmgTermReg);
                    return true;
                }
                break;
        }

        return jmgTermReg.Worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJmgTermRegErrorMsg</Name>
				<Source><![CDATA[
    private void printJmgTermRegErrorMsg(JmgTermReg _jmgTermReg)
    {
        setPrefix("@SCM:ProdDetailedErrorDescJmgTermReg");

        while (_jmgTermReg)
        {
            warning(strFmt("@SCM:ProdDetailedErrorPNumberProfileDate", HcmWorker::find(_jmgTermReg.Worker).PersonnelNumber, _jmgTermReg.ProfileDate));
            next _jmgTermReg;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildJmgStampJournalTransProdWhereClause</Name>
				<Source><![CDATA[
    private void buildJmgStampJournalTransProdWhereClause(JmgStampJournalTrans _jmgStampJournalTrans, SysDaQueryObject _qe, ProdId _prodId)
    {
        _qe.whereClause(
                new SysDaEqualsExpression(
            new SysDaFieldExpression(_jmgStampJournalTrans, fieldStr(JmgStampJournalTrans, JobRef)),
            new SysDaValueExpression(queryValue(_prodId)))
                .and(
                new SysDaEqualsExpression(
                new SysDaFieldExpression(_jmgStampJournalTrans, fieldStr(JmgStampJournalTrans, JobRefType)),
                new SysDaValueExpression(JmgJobRefTypeEnum::MrpSetup))
                .or(
                new SysDaEqualsExpression(
                new SysDaFieldExpression(_jmgStampJournalTrans, fieldStr(JmgStampJournalTrans, JobRefType)),
                new SysDaValueExpression(JmgJobRefTypeEnum::MrpQueueBefore))
                )
                .or(
                new SysDaEqualsExpression(
                new SysDaFieldExpression(_jmgStampJournalTrans, fieldStr(JmgStampJournalTrans, JobRefType)),
                new SysDaValueExpression(JmgJobRefTypeEnum::MrpQueueAfter))
                )
                .or(
                new SysDaEqualsExpression(
                new SysDaFieldExpression(_jmgStampJournalTrans, fieldStr(JmgStampJournalTrans, JobRefType)),
                new SysDaValueExpression(JmgJobRefTypeEnum::MrpProcess))
                )
                .or(
                new SysDaEqualsExpression(
                new SysDaFieldExpression(_jmgStampJournalTrans, fieldStr(JmgStampJournalTrans, JobRefType)),
                new SysDaValueExpression(JmgJobRefTypeEnum::MrpOverlap))
                )
                .or(
                new SysDaEqualsExpression(
                new SysDaFieldExpression(_jmgStampJournalTrans, fieldStr(JmgStampJournalTrans, JobRefType)),
                new SysDaValueExpression(JmgJobRefTypeEnum::MrpTransport))
                )
                ));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>