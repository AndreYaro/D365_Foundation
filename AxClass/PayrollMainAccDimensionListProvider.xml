<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollMainAccDimensionListProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PayrollMainAccDimensionListProvider</c> is the main account dimension list provider
///    that is used in the source document journalizing process for payroll.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(MainAccountDimensionListProviderType), MainAccountDimensionListProviderType::Payroll)
]
class PayrollMainAccDimensionListProvider extends MainAccountDimensionListProvider
{
    HcmBenefitPlanRecId             benefitPlanRecId;
    PayrollTaxCodeRecId             taxCodeRecId;
    PayrollEarningCodeRecId         earningCodeRecId;
    NoYes                           isEmployerLine;

    #define.KeySeperator('~')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPayrollSalaryClearingAccount</Name>
				<Source><![CDATA[
    private void addPayrollSalaryClearingAccount()
    {
        PayrollParameters payrollParameters;
        MainAccountDimension mainAccountDimension;

        // The salary clearing account is needed for all earning lines and all beneit/tax deduction lines.
        if (earningCodeRecId != 0 || isEmployerLine == NoYes::No)
        {
            payrollParameters = PayrollParameters::find();
            if (payrollParameters.SalaryClearingAccountLedgerDimension != 0)
            {
                mainAccountDimension = MainAccountDimension::newFromParameters(payrollParameters.SalaryClearingAccountLedgerDimension,
                                                                               this.parmAccountingRule().parmSide());

                mainAccountDimensionList.addEnd(mainAccountDimension);
            }
            else
            {
                throw warning("@Payroll:ThePayrollClearingAccountIsRequiredToPostPayStatementsAssign");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the main account dimension list.
    /// </summary>
    protected void initValues()
    {
        Object                                  sourceDocumentLineItem = accountingRule.parmSourceDocumentLineItem();
        SourceDocumentLineItemIPayroll          iPayroll;

        if (sourceDocumentLineItem is SourceDocumentLineItemIPayroll)
        {
            iPayroll = sourceDocumentLineItem as SourceDocumentLineItemIPayroll;
            benefitPlanRecId = iPayroll.parmBenefitPlan();
            taxCodeRecId = iPayroll.parmTaxCode();
            earningCodeRecId = iPayroll.parmEarningCode();
            isEmployerLine = iPayroll.parmIsEmployerLine();
            this.addPayrollSalaryClearingAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMainAccountDimensionList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the main account dimension list.
    /// </summary>
    protected void populateMainAccountDimensionList()
    {
        AccountingJournalizingRule          accountingJournalizingRule;
        JournalizingDefinitionManager       journalizingDefinitionManager;
        JournalizingDefinitionEntry         journalizingDefinitionEntry;
        JournalizingDefinitionId            journalizingDefinitionId;
        List                                list;
        ListEnumerator                      enumerator;
        MainAccountDimension                mainAccountDimension;
        AccountingDistributionRule          accountingDistributionRule;
        AccountingPolicy                    accountingPolicy;
        container                           cacheResult;
        MainAccountDimensionList            localMainAccountDimensionList;
        MainAccountDimensionListEnumerator  mainAccountDimensionListEnumerator;
        LedgerCacheScope                    ledgerCacheScope;
        LedgerPostingType                   journalizingDefLedgerPostingType;
        str                                 keyString;

        if (accountingRule is AccountingJournalizingRule)
        {
            accountingJournalizingRule = accountingRule;
            journalizingDefLedgerPostingType = accountingJournalizingRule.parmJournalizingDefLedgerPostingType();
        }
        else
        {
            journalizingDefLedgerPostingType = accountingRule.parmLedgerPostingType();
        }

        accountingPolicy = AccountingPolicy::newPolicy(accountingJournalizingRule.parmSourceDocumentLineItem());
        accountingDistributionRule = accountingPolicy.parmDistributionRule(accountingJournalizingRule.parmAccountingdistribution().MonetaryAmount);
        accountingDistributionRule.parmAccountingdistribution(accountingJournalizingRule.parmAccountingdistribution());

        ledgerCacheScope = LedgerCacheScope::JournalizingMainAccDimListProvPayroll;

        keyString = int642str(earningCodeRecId) + #KeySeperator
            + int642str(benefitPlanRecId) + #KeySeperator
            + int642str(taxCodeRecId) + #KeySeperator
            + int2str(isEmployerLine) + #KeySeperator
            + curext() + #KeySeperator
            + int642str(accountingJournalizingRule.parmAccountingdistribution().LedgerDimension) + #KeySeperator
            + int2str(accountingDistributionRule.parmSide());

        cacheResult = LedgerCache::getValue(ledgerCacheScope,
                                            [   accountingJournalizingRule.parmAccountingdistribution().AccountingDate,
                                                journalizingDefLedgerPostingType,
                                                keyString
                                            ]);

        if (cacheResult != conNull())
        {
            localMainAccountDimensionList = MainAccountDimensionList::create(cacheResult);

            mainAccountDimensionListEnumerator = localMainAccountDimensionList.getEnumerator();

            while (mainAccountDimensionListEnumerator.moveNext())
            {
                mainAccountDimensionList.addEnd(mainAccountDimensionListEnumerator.current());
            }
        }
        else
        {
            localMainAccountDimensionList = MainAccountDimensionList::construct();
            journalizingDefinitionManager = JournalizingDefinitionManager::newJournalizingDefinitionManagerPayroll(benefitPlanRecId,
                                                                                                                    taxCodeRecId,
                                                                                                                    earningCodeRecId,
                                                                                                                    isEmployerLine,
                                                                                                                    accountingJournalizingRule.parmAccountingdistribution().AccountingDate,
                                                                                                                    journalizingDefLedgerPostingType);

            journalizingDefinitionId = journalizingDefinitionManager.getDefaultJournalizingDefinition();
            journalizingDefinitionManager.parmJournalizingDefinition(journalizingDefinitionId);

            if (journalizingDefinitionManager)
            {
                list = journalizingDefinitionManager.getSystemGeneratedEntries(accountingDistributionRule.parmSide(),
                                                                               accountingJournalizingRule.parmAccountingdistribution().LedgerDimension);
                if (list && list.elements() != 0)
                {
                    enumerator = list.getEnumerator();
                    while (enumerator.moveNext())
                    {
                        journalizingDefinitionEntry = enumerator.current();

                        mainAccountDimension = MainAccountDimension::newFromParameters(journalizingDefinitionEntry.parmLedgerDimension(),
                                                                                       journalizingDefinitionEntry.parmJournalizingDefinitionDebitCredit());

                        localMainAccountDimensionList.addEnd(mainAccountDimension);
                        mainAccountDimensionList.addEnd(mainAccountDimension);
                    }
                }

                if (!localMainAccountDimensionList.empty())
                {
                    LedgerCache::insertValue(ledgerCacheScope,
                                                [   accountingJournalizingRule.parmAccountingdistribution().AccountingDate,
                                                    journalizingDefLedgerPostingType,
                                                    keyString
                                                ],
                                                localMainAccountDimensionList.pack()
                                            );
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears main account dimension list cache for payroll.
    /// </summary>
    public static void clearCache()
    {
        LedgerCache::clearScope(LedgerCacheScope::JournalizingMainAccDimListProvPayroll);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>