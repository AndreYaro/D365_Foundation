<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetImageController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Manages the image tab controls behavior on a form.
/// </summary>
public class AssetImageController
{
    FormDataSource     dataSource;
    FormTabPageControl tabPageControl;
    FormButtonControl  buttonControlUploadImage;
    FormButtonControl  buttonControlDefaultImage;
    FormButtonControl  buttonControlRemoveImage;
    FormWindowControl  imageControl;

    TableGroupAll      tableGroupAll;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmTableGroupAll</Name>
				<Source><![CDATA[
    public TableGroupAll parmTableGroupAll(TableGroupAll _tableGroupAll = tableGroupAll)
    {
        tableGroupAll = _tableGroupAll;

        return tableGroupAll;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmDataSource(FormDataSource _dataSource = dataSource)
    {
        dataSource = _dataSource;

        return dataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTabPageControl</Name>
				<Source><![CDATA[
    public FormTabPageControl parmTabPageControl(FormTabPageControl _tabPageControl = tabPageControl)
    {
        tabPageControl = _tabPageControl;

        return tabPageControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonControlUploadImage</Name>
				<Source><![CDATA[
    public FormButtonControl parmButtonControlUploadImage(FormButtonControl _buttonControlUploadImage = buttonControlUploadImage)
    {
        buttonControlUploadImage = _buttonControlUploadImage;

        return buttonControlUploadImage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonControlDefaultImage</Name>
				<Source><![CDATA[
    public FormButtonControl parmButtonControlDefaultImage(FormButtonControl _buttonControlDefaultImage = buttonControlDefaultImage)
    {
        buttonControlDefaultImage = _buttonControlDefaultImage;

        return buttonControlDefaultImage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonControlRemoveImage</Name>
				<Source><![CDATA[
    public FormButtonControl parmButtonControlRemoveImage(FormButtonControl _buttonControlRemoveImage = buttonControlRemoveImage)
    {
        buttonControlRemoveImage = _buttonControlRemoveImage;

        return buttonControlRemoveImage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImageControl</Name>
				<Source><![CDATA[
    public FormWindowControl parmImageControl(FormWindowControl _imageControl = imageControl)
    {
        imageControl = _imageControl;

        return imageControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class controls and subscribes the class instance to the control events.
    /// </summary>
    public void initialize()
    {
        tabPageControl.collapse();
        tabPageControl.OnExpanded += eventhandler(this.onTabExpanded);
        dataSource.OnActivated += eventhandler(this.onDataSourceActivated);
        
        if (buttonControlUploadImage != null)
        {
            buttonControlUploadImage.OnClicked += eventhandler(this.onUploadImageButtonClick);
        }
        if (buttonControlDefaultImage != null)
        {
            buttonControlDefaultImage.OnClicked += eventhandler(this.onDefaultImageButtonClick);
        }
        if (buttonControlRemoveImage != null)
        {
            buttonControlRemoveImage.OnClicked += eventhandler(this.onRemoveImageButtonClick);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTabExpanded</Name>
				<Source><![CDATA[
    private void onTabExpanded(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        this.updateImageTab();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onUploadImageButtonClick</Name>
				<Source><![CDATA[
    private void onUploadImageButtonClick(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        AssetImage::changeImage(tableGroupAll, dataSource.cursor().RecId);
        this.updateImageTab();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDefaultImageButtonClick</Name>
				<Source><![CDATA[
    private void onDefaultImageButtonClick(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        AssetImage::deleteImage(tableGroupAll, dataSource.cursor().RecId);
        this.updateImageTab();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onRemoveImageButtonClick</Name>
				<Source><![CDATA[
    private void onRemoveImageButtonClick(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        AssetImage::setEmptyImage(tableGroupAll, dataSource.cursor().RecId);
        this.updateImageTab();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDataSourceActivated</Name>
				<Source><![CDATA[
    private void onDataSourceActivated(FormDataSource _sender, FormDataSourceEventArgs _eventArgs)
    {
        this.updateImageTab();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateImageTab</Name>
				<Source><![CDATA[
    private void updateImageTab()
    {
        if (tabPageControl.isExpanded())
        {
            AssetImage imageRecord = AssetImage::findFor(tableGroupAll, dataSource.cursor().RecId);

            this.setImage(imageRecord.Image);

            if (buttonControlRemoveImage)
            {
                // Allow setting an empty image when another image exists
                buttonControlRemoveImage.enabled(imageRecord.Image != conNull());
            }

            if (buttonControlDefaultImage)
            {
                // Remove button is active only for records that have a direct reference
                buttonControlDefaultImage.enabled(AssetImage::exist(tableGroupAll, dataSource.cursor().RecId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setImage</Name>
				<Source><![CDATA[
    private void setImage(container _imageContainer)
    {
        if (_imageContainer)
        {
            Image image = new Image();
            image.setData(_imageContainer);
            imageControl.image(image);
        }
        else
        {
            imageControl.image(null);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>AssetImageController</c> class
    /// based on the parameter specified.
    /// </summary>
    /// <param name = "_tableGroupAll">
    /// Fixed asset, fixed asset group or default value.
    /// </param>
    /// <param name = "_dataSource">
    /// The related table data source.
    /// </param>
    /// <param name = "_tabPageControl">
    /// The tab page control that contains the image control.
    /// </param>
    /// <param name = "_imageControl">
    /// The image control.
    /// </param>
    /// <returns>
    /// An instance of the <c>AssetImageController</c> class.
    /// </returns>
    public static AssetImageController construct(
        TableGroupAll       _tableGroupAll,
        FormDataSource      _dataSource,
        FormTabPageControl  _tabPageControl,
        FormWindowControl   _imageControl)
    {
        AssetImageController controller = new AssetImageController();

        controller.parmTableGroupAll(_tableGroupAll);
        controller.parmDataSource(_dataSource);
        controller.parmTabPageControl(_tabPageControl);
        controller.parmImageControl(_imageControl);

        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>