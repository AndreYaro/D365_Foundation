<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLinesExtendedDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalexLinesExtendedDP</c> class is the Report Data Provider class for the
/// <c>SalesLinesExtended</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(SalesLinesExtended)),
    SRSReportParameterAttribute(classStr(SalesLinesExtendedContract))
]
public class SalesLinesExtendedDP extends SRSReportDataProviderPreProcessTempDB
{
    SalesLine                   salesLine;
    SalesPurchLineInterface     salesPurchLineInterface;
    InventDim                   inventDim;
    InventTable                 inventTable;
    EcoResCategory              ecoResCategory;
    SalesLinesExtendedTmp       salesLinesExtendedTmp;

    SalesQty                    invoicedSalesQty;
    SalesQty                    deliveredSalesQty;
    InventQty                   invoicedInventQty;
    InventQty                   deliveredInventQty;

    SalesLinesExtendedContract  contract;
    container                   inventDimFields;

    //Data Macros
    #define.AllocationSalesPct(1.00)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDeliveredCostValueCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the DeliveredCostValue.
    /// </summary>
    /// <returns>
    /// The DeliveredCost value.
    /// </returns>
    private AmountCur calcDeliveredCostValueCur()
    {
        AmountCur            amountCur;
        InventQty            costDeliveredQty;
        AmountCur            costDeliveredValue;
        CustPackingSlipTrans custPackingSlipTrans;

        if (!salesLine.isCategoryBased())
        {
            InventQty inventQty = salesPurchLineInterface.isStocked() ? deliveredInventQty - invoicedInventQty : deliveredSalesQty - invoicedSalesQty;
            while select InventQty, Qty, InventTransId, DeliveryDate, PackingSlipId from custPackingSlipTrans
                where custPackingSlipTrans.InventTransId == salesLine.InventTransId
            {
                costDeliveredQty   += salesPurchLineInterface.isStocked() ? custPackingSlipTrans.InventQty : custPackingSlipTrans.Qty;
                costDeliveredValue += CurrencyExchangeHelper::curAmount(-this.packingslipCostAmount(custPackingSlipTrans.InventTransId, custPackingSlipTrans.DeliveryDate, custPackingSlipTrans.PackingSlipId), salesLine.CurrencyCode, custPackingSlipTrans.DeliveryDate);
            }

            if (costDeliveredQty)
            {
                amountCur = CurrencyExchangeHelper::amount(inventQty * costDeliveredValue / costDeliveredQty);//cost value of the delivered but not invoiced items
            }
            amountCur += this.calcInvoicedCostValueCur(); //add cost value of the items that have been invoiced
        }
        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoicedCostValueCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the InvoicedCostValue.
    /// </summary>
    /// <returns>
    /// The InvoicedCost value.
    /// </returns>
    private AmountCur calcInvoicedCostValueCur()
    {
        AmountCur        amountCur = 0;
        InventQty        costInvoicedQty;
        AmountCur        costInvoicedValue;
        CustInvoiceTrans custInvoiceTrans;
        CustInvoiceJour  custInvoiceJour;

        if (!salesLine.isCategoryBased())
        {
            InventQty inventQty = invoicedInventQty ? invoicedInventQty : invoicedSalesQty;
            while select InventQty, Qty, InventTransId,InvoiceDate,InvoiceId from custInvoiceTrans
                where custInvoiceTrans.InventTransId == salesLine.InventTransId
                join ExchRate, ExchRateSecondary, Triangulation from custInvoiceJour
                where custInvoiceJour.InvoiceId == custInvoiceTrans.InvoiceId
                   && custInvoiceJour.SalesId == custInvoiceTrans.SalesId
                   && custInvoiceJour.InvoiceDate == custInvoiceTrans.InvoiceDate
                   && custInvoiceJour.NumberSequenceGroup == custInvoiceTrans.NumberSequenceGroup
            {
                costInvoicedQty   += salesPurchLineInterface.isStocked() ? custInvoiceTrans.InventQty : custInvoiceTrans.Qty;
                costInvoicedValue += CurrencyExchangeHelper::curAmount(-this.invoiceCostAmount(custInvoiceTrans.InventTransId, custInvoiceTrans.InvoiceDate, custInvoiceTrans.InvoiceId), salesLine.CurrencyCode, custInvoiceTrans.InvoiceDate, Currency::noYes2UnknownNoYes(custInvoiceJour.Triangulation), custInvoiceJour.ExchRate, custInvoiceJour.ExchRateSecondary);
            }

            if (costInvoicedQty)
            {
                amountCur = CurrencyExchangeHelper::amount(inventQty * costInvoicedValue / costInvoicedQty);
            }
        }
        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costInvoicedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the invoiced cost amount for cost.
    /// </summary>
    /// <returns>
    /// The invoiced cost amount.
    /// </returns>
    private CostAmount costInvoicedCost()
    {
        CostAmount  costAmount = 0;
        InventQty   inventQty = invoicedInventQty;
        InventQty   costInvoicedQty;
        AmountCur   costInvoicedValue;

        [costInvoicedQty, costInvoicedValue] = InventTransOrigin::calcInvoicedCostValue(InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId, salesLine.InventTransId));
        if (costInvoicedQty)
        {
            costAmount = CurrencyExchangeHelper::amount(inventQty * costInvoicedValue / costInvoicedQty);
        }

        // Convert cost amount to the customer currency before return it...
        return costAmount ? CurrencyExchangeHelper::curAmount(costAmount, salesLine.CurrencyCode) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLinesExtendedTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetching the data from <c>SalesLinesExtendedTmp</c> Table.
    /// </summary>
    /// <returns>
    /// Data from the <c>SalesLinesExtendedTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(SalesLinesExtendedTmp))
    ]
    public SalesLinesExtendedTmp getSalesLinesExtendedTmp()
    {
        select * from salesLinesExtendedTmp;
        return salesLinesExtendedTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into a temporary table.
    /// </summary>
    private void insertIntoTempTable()
    {
        this.initSalesLinesExtendedTmp();
        salesLinesExtendedTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesLinesExtendedTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data into a temporary table.
    /// </summary>
    protected void initSalesLinesExtendedTmp()
    {
        CostAmount      qtyOrderedAmount, deliveredAmount;

        salesPurchLineInterface = salesLine.salesPurchLineInterface();
        
        ItemNetWeight netWeight = this.netWeight();

        salesLinesExtendedTmp.SalesId                       = salesLine.SalesId;
        salesLinesExtendedTmp.ItemId                        = salesLine.ItemId;
        salesLinesExtendedTmp.SalesCategoryName             = ecoResCategory.Name;
        salesLinesExtendedTmp.InventDimPrint                = InventDim::dimReportStrAll(inventDim, inventDimFields, infolog.language());
        salesLinesExtendedTmp.ConfirmedDlv                  = salesLine.ConfirmedDlv;
        salesLinesExtendedTmp.SalesPrice                    = salesLine.SalesPrice;
        salesLinesExtendedTmp.LineDisc                      = salesLine.LineDisc;
        salesLinesExtendedTmp.LinePercent                   = salesLine.LinePercent;
        salesLinesExtendedTmp.CurrencyCode                  = salesLine.CurrencyCode;

        if (contract.parmQty()
         || contract.parmAllocation()
         || contract.parmWeight()
         || contract.parmVolume()
         || contract.parmGross()
         || contract.parmDisc()
         || contract.parmNet()
         || contract.parmCost()
         || contract.parmContributionMargin())
        {
            //Set the variables
            invoicedSalesQty    = salesLine.invoicedInTotal();
            deliveredSalesQty   = salesLine.deliveredInTotal();
            invoicedInventQty   = salesLine.invoicedInventInTotal();
            deliveredInventQty  = salesLine.deliveredInventInTotal();
        }

        if (contract.parmQty())
        {
            salesLinesExtendedTmp.QtySalesQty                   = salesLine.SalesQty;
            salesLinesExtendedTmp.QtyDelivered                  = deliveredSalesQty;
            salesLinesExtendedTmp.QtyInvoiced                   = invoicedSalesQty;
        }
        salesLinesExtendedTmp.QtyRemainSalesPhysical        = salesLine.RemainSalesPhysical;
        salesLinesExtendedTmp.QtySalesDeliverNow            = salesLine.SalesDeliverNow;

        if (contract.parmAllocation())
        {
            salesLinesExtendedTmp.AllocationSalesPct            = #AllocationSalesPct;
            salesLinesExtendedTmp.AllocationDeliverPct          = salesLine.SalesQty == 0 ? 0 : (deliveredSalesQty / salesLine.SalesQty);
            salesLinesExtendedTmp.AllocationInvoicedPct         = salesLine.SalesQty == 0 ? 0 : (invoicedSalesQty / salesLine.SalesQty);
            if (!contract.parmQty())
            {
                //QtySalesQty is needed to calculate allocation totals.
                salesLinesExtendedTmp.QtySalesQty                   = salesLine.SalesQty;
            }
        }

        if (contract.parmWeight())
        {
            salesLinesExtendedTmp.WeightSalesWeight             = salesPurchLineInterface.isStocked()  ? salesLine.QtyOrdered * netWeight : salesLine.SalesQty * netWeight;
            salesLinesExtendedTmp.WeightDeliveredWeight         = salesPurchLineInterface.isCategoryBased()? deliveredSalesQty  * netWeight : deliveredInventQty * netWeight;
            salesLinesExtendedTmp.WeightInvoicedWeight          = salesPurchLineInterface.isCategoryBased()? invoicedSalesQty   * netWeight : invoicedInventQty * netWeight;
        }

        if (contract.parmVolume())
        {
            ItemVolume unitVolume = inventTable.UnitVolume;
            salesLinesExtendedTmp.VolumeSalesVolume     = salesPurchLineInterface.isStocked() ? salesLine.QtyOrdered * unitVolume : salesLine.SalesQty * unitVolume;
            salesLinesExtendedTmp.VolumeDeliveredVolume = salesPurchLineInterface.isStocked() ? deliveredInventQty * unitVolume : deliveredSalesQty * unitVolume;
            salesLinesExtendedTmp.VolumeInvoicedVolume  = salesPurchLineInterface.isStocked() ? invoicedInventQty * unitVolume : invoicedSalesQty * unitVolume;
        }

        if (contract.parmGross())
        {
            salesLinesExtendedTmp.GrossSalesGross               = salesPurchLineInterface.calcGrossAmountExclTax(salesLine.SalesQty);
            salesLinesExtendedTmp.GrossDeliveredGross           = salesPurchLineInterface.calcGrossAmountExclTax(deliveredSalesQty);
            salesLinesExtendedTmp.GrossInvoicedGross            = salesPurchLineInterface.calcGrossAmountExclTax(invoicedSalesQty);
        }

        if (contract.parmDisc())
        {
            salesLinesExtendedTmp.DiscSalesDisc                 = salesPurchLineInterface.calcLineDiscExclTax(salesLine.SalesQty);
            salesLinesExtendedTmp.DiscDeliveredDisc             = salesPurchLineInterface.calcLineDiscExclTax(deliveredSalesQty);
            salesLinesExtendedTmp.DiscInvoicedDisc              = salesPurchLineInterface.calcLineDiscExclTax(invoicedSalesQty);
        }

        if (contract.parmNet())
        {
            salesLinesExtendedTmp.NetSalesNet                   = salesPurchLineInterface.calcLineAmountExclTax(salesLine.SalesQty);
            salesLinesExtendedTmp.NetDeliveredNet               = salesPurchLineInterface.calcLineAmountExclTax(deliveredSalesQty);
            salesLinesExtendedTmp.NetInvoicedNet                = salesPurchLineInterface.calcLineAmountExclTax(invoicedSalesQty);
        }

        if (contract.parmCost() || contract.parmContributionMargin())
        {
            qtyOrderedAmount                                    = this.qtyAmount(salesLine.QtyOrdered, salesLine.SalesQty);
            deliveredAmount                                     = this.qtyAmount(deliveredInventQty,deliveredSalesQty );
        }

        if (contract.parmCost())
        {
            salesLinesExtendedTmp.CostSalesCost                 = qtyOrderedAmount ? CurrencyExchangeHelper::curAmount(qtyOrderedAmount, salesLine.CurrencyCode) : 0;
            salesLinesExtendedTmp.CostDeliveredCost             = deliveredAmount ? CurrencyExchangeHelper::curAmount(deliveredAmount, salesLine.CurrencyCode) : 0;
            salesLinesExtendedTmp.CostInvoicedCost              = this.costInvoicedCost();
        }

        if (contract.parmContributionMargin())
        {
            salesLinesExtendedTmp.ContributionMarginSales       = qtyOrderedAmount ? salesPurchLineInterface.calcLineAmountExclTax(salesLine.SalesQty)-
                                                                    CurrencyExchangeHelper::curAmount(qtyOrderedAmount, salesLine.CurrencyCode): 0;
            salesLinesExtendedTmp.ContributionMarginDelivered   = deliveredAmount  ? salesPurchLineInterface.calcLineAmountExclTax(deliveredSalesQty)- this.calcDeliveredCostValueCur(): 0;
            salesLinesExtendedTmp.ContributionMarginInvoiced    = salesPurchLineInterface.calcLineAmountExclTax(invoicedSalesQty) - this.calcInvoicedCostValueCur();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InvoiceCostAmount</c> table.
    /// </summary>
    /// <param name="_inventTransId">
    /// The <c>InventTransId</c> value.
    /// </param>
    /// <param name="_invoiceDate">
    /// The <c>InvoiceDate</c> value.
    /// </param>
    /// <param name="_invoiceNum">
    /// The <c>InvoiceNum</c> value.
    /// </param>
    /// <returns>
    /// Data from the <c>InvoiceCostAmount</c> table.
    /// </returns>
    private CostAmount invoiceCostAmount(InventTransId     _inventTransId,
                                         TransDate         _invoiceDate,
                                         InvoiceId         _invoiceNum)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        CostAmount          invoiceCostAmount;

        if (salesPurchLineInterface.isStocked())
        {
            select sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                where inventTrans.DateFinancial   == _invoiceDate
                   && inventTrans.InvoiceId       == _invoiceNum
                   && inventTrans.StatusReceipt   <= StatusReceipt::Purchased
                   && inventTrans.StatusIssue     <= StatusIssue::Sold
                exists join inventTransOrigin
                    where inventTransOrigin.RecId         == inventTrans.InventTransOrigin
                       && inventTransOrigin.InventTransId == _inventTransId;

            invoiceCostAmount = CurrencyExchangeHelper::amount(inventTrans.CostAmountPosted + inventTrans.CostAmountAdjustment);
        }
        else if (salesLine.ItemId)
        {
            if (invoicedSalesQty >0)
            {
                invoiceCostAmount = CurrencyExchangeHelper::amount(invoicedSalesQty * salesPurchLineInterface.inventTable().costPcsPrice(salesLine.InventDimId));
            }
            else
            {
                invoiceCostAmount = CurrencyExchangeHelper::amount(invoicedSalesQty * salesLine.CostPrice);
            }
        }
        return invoiceCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netWeight</Name>
				<Source><![CDATA[
    private ItemNetWeight netWeight()
    {
        ItemNetWeight   netWeight;

        if (salesLine.ItemId)
        {
            netWeight = salesPurchLineInterface.inventTable().NetWeight;
        }
        else
        {
            netWeight = SalesLineForeignTradeCategory::find(salesLine.InventTransId,salesLine.DataAreaId).UnitWeight;
        }
        return netWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingslipCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>packingSlipCostAmount</c> value.
    /// </summary>
    /// <param name="_inventTransId">
    /// The <c>InventTransId</c> value.
    /// </param>
    /// <param name="_packingSlipDate">
    /// The <c>PackingSlipDate</c> value.
    /// </param>
    /// <param name="_packingSlipId">
    /// The <c>PackingSlipId</c> value.
    /// </param>
    /// <returns>
    /// The <c>packingSlipCostAmount</c> object.
    /// </returns>
    private CostAmount packingslipCostAmount(InventTransId     _inventTransId,
                                             TransDate         _packingSlipDate,
                                             PackingSlipId     _packingSlipId)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        select sum(CostAmountPhysical) from inventTrans
            where inventTrans.DatePhysical        == _packingSlipDate
               && inventTrans.PackingSlipId       == _packingSlipId
               && inventTrans.StatusReceipt       <= StatusReceipt::Received
               && inventTrans.StatusIssue         <= StatusIssue::Deducted
               && !inventTrans.DateFinancial
            exists join inventTransOrigin
                where inventTransOrigin.RecId         == inventTrans.InventTransOrigin
                   && inventTransOrigin.InventTransId == _inventTransId;

        return inventTrans.CostAmountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic and calls helper methods and inserts data to the temporary
    /// table.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. It will be called by SQL
    /// ServerReporting Services at runtime. The method should compute data and populate the data tables
    /// that will be returned to SQL ServerReporting Services.
    /// </remarks>
    public void processReport()
    {
        ListEnumerator        fieldListEnumerator = InventDim::dimFieldListEnumerator();

        contract = this.parmDataContract();
        InventDimParm inventDimParm = contract.parmInventDimViewContract().parmInventDimParm();

        while (fieldListEnumerator.moveNext())
        {
            fieldId fieldId = fieldListEnumerator.current();
            if (inventDimParm.(InventDim::dim2dimParm(fieldId)))
            {
                inventDimFields += fieldId;
            }
        }

        QueryRun qr = new QueryRun(this.parmQuery());

        while (qr.next())
        {
            salesLine      = qr.get(tableNum(SalesLine));
            inventDim      = qr.get(tableNum(InventDim));
            if (contract.parmVolume())
            {
                inventTable    = qr.get(tableNum(InventTable));
            }
            ecoResCategory = qr.get(tableNum(ecoResCategory));

            this.insertIntoTempTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyAmount</Name>
				<Source><![CDATA[
    private CostAmount qtyAmount(InventQty  _inventQty, SalesQty _salesQty)
    {
        CostAmount qtyDeliveredAmount;

        if (salesPurchLineInterface.isStocked())
        {
            qtyDeliveredAmount = salesLine.calcCostAmount(_inventQty);
        }
        else if (!salesLine.isCategoryBased())
        {
            if (salesLine.SalesQty > 0)
            {
                qtyDeliveredAmount = _salesQty * salesPurchLineInterface.inventTable().costPcsPrice(salesLine.InventDimId);
            }
            else
            {
                qtyDeliveredAmount = _salesQty * salesLine.CostPrice;
            }
        }

        return qtyDeliveredAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>