<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InfAdjReportsController_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InfAdjReportsController_MX</c> class is the controller class for the <c>InfAdjReports_MX</c>
///    report.
/// </summary>
class InfAdjReportsController_MX extends SrsReportRunController implements BatchRetryable
{
    #InfAdj_SSRSParameters_MX
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the report contract before the report is run.
    /// </summary>
    protected void preRunModifyContract()
    {
        InfAdjReportsContract_MX contract = this.parmReportContract().parmRdpContract() as InfAdjReportsContract_MX;
        container reportNameAndCaption;
        InfAdjReportsController_MX::modifyContract(contract, this.parmArgs());
        reportNameAndCaption = InfAdjReportsController_MX::getReportNameAndCaption(contract.parmAdjustmentMethod());
        this.parmReportName(conPeek(reportNameAndCaption,1));
        this.parmReportContract().parmReportName(conPeek(reportnameAndCaption,1));
        this.parmDialogCaption(conPeek(reportnameandcaption,2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InfAdjReportsController_MX construct()
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoMX, GlobalizationConstants::FeatureReferenceMX00002] ],
            funcName()
        );
        return new InfAdjReportsController_MX();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportNameAndCaption</Name>
				<Source><![CDATA[
        public static container getReportNameAndCaption(AdjustmentMethod_MX _adjustmentMethod)
    {
        str reportName;
        str reportCaption;

        switch (_adjustmentMethod)
        {
            case AdjustmentMethod_MX::OpenBalance :
                reportName    = #RepomoReportName;
                reportCaption = #RepomoReportCaption;
                break;

            case AdjustmentMethod_MX::MonthlyBalance:
                reportName    = #PLReportName;
                reportCaption = #PLReportCaption;
                break;

            case AdjustmentMethod_MX::Balance:
                reportName    = #InventoryReportName;
                reportCaption = #InventoryReportCaption;
                break;

            case AdjustmentMethod_MX::TransactionDate:
                reportName    = #CapitalReportName;
                reportCaption = #CapitalReportCaption;
                break;
        }

        return [reportName, reportCaption];
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        InfAdjReportsController_MX controller = InfAdjReportsController_MX::newFromArgs(_args);

        if (_args == null)
        {
            throw error(strfmt("@SYS22828", funcname()));
        }

        controller.parmReportName(#RepomoReportName);
        controller.parmDialogCaption("@SYS312853");

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Extracts the dates from the <c>args</c> object and modifies the dates range in the given contract.
    /// </summary>
    /// <param name="_contract">
    ///    The report contract.
    /// </param>
    /// <param name="_args">
    ///    The <c>args</c> object from the caller.
    /// </param>
    public static void modifyContract(InfAdjReportsContract_MX _contract, Args _args)
    {
        FromDate                        fromDate;
        ToDate                          toDate;
        InflationAdjJournal_MX inflationAdjJournal;
        AdjustmentMethod_MX adjustmentMethod;

        if (_args && _args.dataset() == tablenum(InflationAdjJournal_MX))
        {
            inflationAdjJournal = _args.record();
            fromDate            = inflationAdjJournal.FromDate;
            toDate              = inflationAdjJournal.ToDate;
            _contract.parmFromDate(fromDate);
            _contract.parmToDate(toDate);
        }

        if (_args && _args.parmEnumType())
        {
            adjustmentMethod = _args.parmEnum();
            _contract.parmAdjustmentMethod(adjustmentMethod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InfAdjReportsController_MX</c> class and sets the argument
    ///    properties.
    /// </summary>
    /// <param name="_args">
    ///    The <c>args</c> properties.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InfAdjReportsController_MX</c> class.
    /// </returns>
    public static InfAdjReportsController_MX newFromArgs(Args _args)
    {
        InfAdjReportsController_MX controller = InfAdjReportsController_MX::construct();

        controller.parmArgs(_args);

        return controller;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>