<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResTrackingDimensionGroupItem_DataSharingTableEvents</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>EcoResTrackingDimensionGroupItem_DataSharingTableEvents</c> class processes data sharing table event operations cross company.
/// </summary>
internal class EcoResTrackingDimensionGroupItem_DataSharingTableEvents implements SysDataSharingApplicationSuiteITableEventsProcessor
{
    private SysDataSharingApplicationSuiteTableEventsProcessorParameters dataSharingTableEventParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static EcoResTrackingDimensionGroupItem_DataSharingTableEvents construct()
    {
        return new EcoResTrackingDimensionGroupItem_DataSharingTableEvents();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSharingParameters</Name>
				<Source><![CDATA[
    public SysDataSharingApplicationSuiteTableEventsProcessorParameters dataSharingParameters()
    {
        return this.dataSharingTableEventParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProcessor</Name>
				<Source><![CDATA[
    public void initializeProcessor(Common _dataSharingRecord)
    {
        this.dataSharingTableEventParameters = EcoResTrackingDimensionGroupItem_DataSharingTableEvents::createParameters(_dataSharingRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataSharingCompany</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final void insertDataSharingCompany(DataAreaId _dataSharingCompany)
    {
        var context = SysDataSharingApplicationSuiteTableDataEventContext::current(tableStr(EcoResTrackingDimensionGroupItem), DataEventType::Inserted);
        
        if (context && this.dataSharingTableEventParameters && this.dataSharingTableEventParameters.OrigDataSharingRecord.RecId)
        {
            Set companyList = context.parmProcessedCompanies();
            if (!companyList.in(_dataSharingCompany))
            {
                companyList.add(_dataSharingCompany);

                if (this.dataSharingTableEventParameters && this.dataSharingTableEventParameters.OrigDataSharingRecord.RecId)
                {
                    EcoResTrackingDimensionGroupItem origTrackingDimensionGroupItem = this.dataSharingTableEventParameters.OrigDataSharingRecord;
                    EcoResTrackingDimensionGroupItem trackingDimensionGroupItem;
                    buf2Buf(origTrackingDimensionGroupItem, trackingDimensionGroupItem);
                    trackingDimensionGroupItem.ItemDataAreaId = _dataSharingCompany;
                    if (!trackingDimensionGroupItem.validateWrite())
                    {
                        throw error(strFmt("@SCM:SysDataSharingCannotInsertRecordInTable", tablePName(EcoResTrackingDimensionGroupItem), _dataSharingCompany));
                    }

                    trackingDimensionGroupItem.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDataSharingCompany</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final void deleteDataSharingCompany(DataAreaId _dataSharingCompany)
    {
        var context = SysDataSharingApplicationSuiteTableDataEventContext::current(tableStr(EcoResTrackingDimensionGroupItem), DataEventType::Deleted);
        
        if (context && this.dataSharingTableEventParameters && this.dataSharingTableEventParameters.OrigDataSharingRecord.RecId)
        {
            Set companyList = context.parmProcessedCompanies();
            if (!companyList.in(_dataSharingCompany))
            {
                companyList.add(_dataSharingCompany);

                EcoResTrackingDimensionGroupItem origTrackingDimensionGroupItem = this.dataSharingTableEventParameters.OrigDataSharingRecord;

                EcoResTrackingDimensionGroupItem trackingDimensionGroupItem = EcoResTrackingDimensionGroupItem::findByItem(_dataSharingCompany, origTrackingDimensionGroupItem.ItemId, true);
                if (trackingDimensionGroupItem.RecId)
                {
                    // validateDelete has a check if warehouse item has reservation hierarchy exist, if deleting an item then casade delete will not call validateDelete,
                    // so introducing validateDelete here would cause a regression. Workaround is to remove the reservation hierarchy from the item before deleting the tracking group.
                    trackingDimensionGroupItem.delete();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataSharingCompany</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final void updateDataSharingCompany(DataAreaId _dataSharingCompany)
    {
        var context = SysDataSharingApplicationSuiteTableDataEventContext::current(tableStr(EcoResTrackingDimensionGroupItem), DataEventType::Updated);
        
        if (context && this.dataSharingTableEventParameters && this.dataSharingTableEventParameters.OrigDataSharingRecord.RecId)
        {
            Set companyList = context.parmProcessedCompanies();
            if (!companyList.in(_dataSharingCompany))
            {
                companyList.add(_dataSharingCompany);
                
                EcoResTrackingDimensionGroupItem origtrackingDimensionGroupItem = this.dataSharingTableEventParameters.OrigDataSharingRecord;

                EcoResTrackingDimensionGroupItem trackingDimensionGroupItem = EcoResTrackingDimensionGroupItem::findByItem(_dataSharingCompany, origtrackingDimensionGroupItem.ItemId, true);
                if (trackingDimensionGroupItem.RecId)
                {
                    buf2Buf(origtrackingDimensionGroupItem, trackingDimensionGroupItem);
                    trackingDimensionGroupItem.ItemDataAreaId = _dataSharingCompany;
                    trackingDimensionGroupItem.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParameters</Name>
				<Source><![CDATA[
    private static SysDataSharingApplicationSuiteTableEventsProcessorParameters createParameters(Common _dataSharingRecord)
    {
        SysDataSharingApplicationSuiteTableEventsProcessorParameters tableEventsProcessorParameters = SysDataSharingApplicationSuiteTableEventsProcessorParameters::construct();
        tableEventsProcessorParameters.CurrentCompany = curExt();
        tableEventsProcessorParameters.DataSharingPolicyTableNames = [tableStr(InventTable)];
        tableEventsProcessorParameters.OrigDataSharingRecord = _dataSharingRecord;
        return tableEventsProcessorParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>EcoResTrackingDimensionGroupItem_onInserted</Name>
				<Source><![CDATA[
    // Post Events for Data sharing of EcoResTrackingDimensionGroupItem table 
    [DataEventHandler(tableStr(EcoResTrackingDimensionGroupItem), DataEventType::Inserted)]
    public static void EcoResTrackingDimensionGroupItem_onInserted(Common _dataSharingRecord, DataEventArgs e)
    {
        if (InventTableDataSharingFeature::isEnabled())
        {
            var context = SysDataSharingApplicationSuiteTableDataEventContext::current(tableStr(EcoResTrackingDimensionGroupItem), DataEventType::Inserted);
            if (!context && SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(curExt(), tableStr(InventTable)))
            {
                SysDataSharingApplicationSuiteITableEventsProcessor tableEventsProcessortrackingDimensionGroupItem = EcoResTrackingDimensionGroupItem_DataSharingTableEvents::construct();
                tableEventsProcessortrackingDimensionGroupItem.initializeProcessor(_dataSharingRecord);

                SysDataSharingApplicationSuiteTableEventsProcessor processor = SysDataSharingApplicationSuiteTableEventsProcessor::newTableEventProcessor(tableEventsProcessortrackingDimensionGroupItem);
                using (var contextInsertCompany = SysDataSharingApplicationSuiteTableDataEventContext::newTableEvent(tableStr(EcoResTrackingDimensionGroupItem), DataEventType::Inserted))
                {
                    processor.insertCrossCompany(false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EcoResTrackingDimensionGroupItem_onDeleted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(EcoResTrackingDimensionGroupItem), DataEventType::Deleted)]
    public static void EcoResTrackingDimensionGroupItem_onDeleted(Common _dataSharingRecord, DataEventArgs e)
    {
        if (InventTableDataSharingFeature::isEnabled())
        {
            var context = SysDataSharingApplicationSuiteTableDataEventContext::current(tableStr(EcoResTrackingDimensionGroupItem), DataEventType::Deleted);
            if (!context && SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(curExt(), tableStr(InventTable)))
            {
                SysDataSharingApplicationSuiteITableEventsProcessor tableEventsProcessortrackingDimensionGroupItem = new EcoResTrackingDimensionGroupItem_DataSharingTableEvents();
                tableEventsProcessortrackingDimensionGroupItem.initializeProcessor(_dataSharingRecord);

                SysDataSharingApplicationSuiteTableEventsProcessor processor = SysDataSharingApplicationSuiteTableEventsProcessor::newTableEventProcessor(tableEventsProcessortrackingDimensionGroupItem);
                using (var contextDeleteCompany = SysDataSharingApplicationSuiteTableDataEventContext::newTableEvent(tableStr(EcoResTrackingDimensionGroupItem), DataEventType::Deleted))
                {
                    processor.deleteCrossCompany(false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EcoResTrackingDimensionGroupItem_onUpdated</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(EcoResTrackingDimensionGroupItem), DataEventType::Updated)]
    public static void EcoResTrackingDimensionGroupItem_onUpdated(Common _dataSharingRecord, DataEventArgs e)
    {
        if (InventTableDataSharingFeature::isEnabled())
        {
            var context = SysDataSharingApplicationSuiteTableDataEventContext::current(tableStr(EcoResTrackingDimensionGroupItem), DataEventType::Updated);
            if (!context && SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(curExt(), tableStr(InventTable)))
            {
                SysDataSharingApplicationSuiteITableEventsProcessor tableEventsProcessortrackingDimensionGroupItem = new EcoResTrackingDimensionGroupItem_DataSharingTableEvents();
                tableEventsProcessortrackingDimensionGroupItem.initializeProcessor(_dataSharingRecord);

                SysDataSharingApplicationSuiteTableEventsProcessor processor = SysDataSharingApplicationSuiteTableEventsProcessor::newTableEventProcessor(tableEventsProcessortrackingDimensionGroupItem);
                using (var contextUpdateCompany = SysDataSharingApplicationSuiteTableDataEventContext::newTableEvent(tableStr(EcoResTrackingDimensionGroupItem), DataEventType::Updated))
                {
                    processor.updateCrossCompany(false);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>