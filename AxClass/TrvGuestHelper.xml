<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvGuestHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for guests on expense lines.
/// </summary>
class TrvGuestHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>giftAmountTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates gift amount total for an expense line.
    /// </summary>
    /// <param name="_expenseLine">
    /// RecId of the expense line.
    /// </param>
    /// <returns>
    /// A sum amount for all gift recipients of the expense line.
    /// </returns>
    public static TrvGuestGiftAmount giftAmountTotal(RefRecId _expenseLine)
    {
        TrvExpTransGuest    trvExpTransGuest;

        select sum(AmountCurr) from trvExpTransGuest where trvExpTransGuest.TrvExpTrans == _expenseLine;

        return trvExpTransGuest.AmountCurr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteGuestsforExpenseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes guests added to an expense line.
    /// </summary>
    /// <param name="_expenseLine">
    /// RecId of the expense line.
    /// </param>
    public static void deleteGuestsforExpenseLine(RefRecId _expenseLine)
    {
        TrvExpTransGuest    trvExpTransGuest;

        delete_from trvExpTransGuest where trvExpTransGuest.TrvExpTrans == _expenseLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetGuestAmountsforExpenseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates guest amounts to zero for an expense line.
    /// </summary>
    /// <param name="_expenseLine">
    /// RecId of the expense line.
    /// </param>
    public static void resetGuestAmountsforExpenseLine(RefRecId _expenseLine)
    {
        TrvExpTransGuest    trvExpTransGuest;

        update_recordset trvExpTransGuest
        setting
            AmountCurr = 0.0
            where trvExpTransGuest.TrvExpTrans == _expenseLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInternalGuest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new internal guest to an expense line.
    /// </summary>
    /// <param name="_expenseLine">
    /// Expense line to which this guest is added.
    /// </param>
    /// <param name="_name">
    /// Name of new guest.
    /// </param>
    /// <param name="_company">
    /// Company or organization of new guest.
    /// </param>
    /// <param name="_title">
    /// Title of new guest.
    /// </param>
    /// <param name="_creatingWorker">
    /// Creating worker for the guest.
    /// </param>
    public static void addInternalGuest(RefRecId _expenseLine, DirPartyName _name, DirPartyName _company, HcmTitleId _title, TrvHcmWorkerRecId _creatingWorker = HcmWorkerLookup::currentWorker())
    {
        TrvExpGuest::insertNewGuest(_expenseLine, _name, _company, _title, 0.0, TrvGuestType::Internal, _creatingWorker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyOverGuests</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Copy the guests from the source expense record to the destination expense record
    ///     when guests do not exist on the destination expense.
    /// </summary>
    /// <param name="_destinationExpense">
    ///     The expense to copy the guests to.
    /// </param>
    /// <param name="_sourceExpense">
    ///     The expense to copy the guests from.
    /// </param>
    public static void copyOverGuests(TrvExpTrans _destinationExpense, TrvExpTrans _sourceExpense)
    {
        if (!_destinationExpense.hasGuests() && _sourceExpense.hasGuests())
        {
            TrvExpTransGuest    expTransGuest;
            TrvExpTransGuest    expTransGuestOrig;

            update_recordset expTransGuest setting TrvExpTrans = _destinationExpense.RecId
                        where expTransGuest.TrvExpTrans == _sourceExpense.RecId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>