<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTurnoverReportSave_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTurnoverReportSave_RU</c> class adds ability to calculate in batch and save to the <c>InventTurnoverReport_RU</c> class.
/// </summary>
public class InventTurnoverReportSave_RU extends InventTurnoverReport_RU
{
    protected RecordInsertList ril;

    private const Version CurVersion = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurVersion, parmId, name] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   base;
        boolean     ret;

        switch (version)
        {
            case CurVersion:
                [version, parmId, name, base] = packedClass;
                ret = super(base);
                break;
            default:
                ret = false;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    public void getLast()
    {
        super();

        parmId = '';
        name = this.caption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        preProcess = this.isInBatch();

        sessionId = InventTurnoverReportSession_RU::parmId2SessionId(parmId);
        hideForm = NoYes::Yes;

        this.preRunCleanUp();

        super();

        InventTurnoverReportSession_RU session;
        update_recordset session
            setting Completed = NoYes::Yes, InventSumDateFinancialDimensionFocus = dimensionFocus
                where session.RecId == sessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalsToReportData</Name>
				<Source><![CDATA[
    protected Map addTotalsToReportData(Map _trans)
    {
        Map data = super(_trans);

        this.saveTotalToReportLineData(data);

        return data;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotalDataMap</Name>
				<Source><![CDATA[
    protected Map createTotalDataMap(Map _trans)
    {
        return new Map(Types::Container, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunCleanUp</Name>
				<Source><![CDATA[
    private void preRunCleanUp()
    {
        InventTurnoverReportLine_RU inventTurnoverReportLine;
        delete_from inventTurnoverReportLine
            where inventTurnoverReportLine.ParmId == parmId;

        InventTurnoverReportLineData_RU inventTurnoverReportLineData;
        delete_from inventTurnoverReportLineData
            where inventTurnoverReportLineData.SessionId == sessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTotalToReportLineData</Name>
				<Source><![CDATA[
    private void saveTotalToReportLineData(Map _totals)
    {
        RecordInsertList totalRecordInsertList = new RecordInsertList(tableNum(InventTurnoverReportLineData_RU));

        MapEnumerator totalsEnumerator = _totals.getEnumerator();
        while (totalsEnumerator.moveNext())
        {
            container totalsStartValues, totalsEndValues;
            [totalsStartValues, totalsEndValues] = totalsEnumerator.currentValue();

            InventSumDateFinancialTrans_RU totalsStart, totalsEnd;
            totalsStart.unpackValues(totalsStartValues);
            totalsEnd.unpackValues(totalsEndValues);

            InventSumDateFinancialDim_RU dim;
            dim.clear();
            dim.unpackKey(totalsEnumerator.currentKey());

            InventTurnoverReportLineData_RU reportLineData;
            reportLineData.clear();
            reportLineData.SessionId = sessionId;
            reportLineData.TotalTrans = TotalTrans::Total;
            reportLineData.FinancialDimItemId = InventSumDateFinancialDimItem_RU::findFinacialDimItemOrCreate(InventSumDateFinancialDim_RU::findDimDimensionOrCreate(dim).FinancialDimId, dim.ItemId).RecId;

            if (showItemName && itemNamesMap.exists(dim.ItemId))
            {
                reportLineData.ItemName = itemNamesMap.lookup(dim.ItemId);
            }

            reportLineData.calcValues(totalsStart, totalsEnd, showTransfers, showPhysical);
            totalRecordInsertList.add(reportLineData);
        }
        totalRecordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReportTrans</Name>
				<Source><![CDATA[
    protected Map calcReportTrans(Query _query)
    {
        ril = new RecordInsertList(tableNum(InventTurnoverReportLineData_RU));

        ttsbegin;
        Map trans = super(_query);

        ril.insertDatabase();
        ttscommit;

        return trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveCalculatedReportTrans</Name>
				<Source><![CDATA[
    protected void saveCalculatedReportTrans(
        Map _trans,
        InventTurnoverReportLineData_RU  _reportLineData,
        InventSumDateFinancialDim_RU _dim,
        InventSumDateFinancialTrans_RU transStart,
        InventSumDateFinancialTrans_RU transEnd)
    {
        super(_trans, _reportLineData, _dim, transStart, transEnd);
  
        this.saveTransToReportLineData(_reportLineData, _dim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTransToReportLineData</Name>
				<Source><![CDATA[
    private void saveTransToReportLineData(InventTurnoverReportLineData_RU _reportLineData, InventSumDateFinancialDim_RU _dim)
    {
        _reportLineData.SessionId = sessionId;
        _reportLineData.FinancialDimItemId = InventSumDateFinancialDimItem_RU::findFinacialDimItemOrCreate(InventSumDateFinancialDim_RU::findDimDimensionOrCreate(_dim).FinancialDimId, _dim.ItemId).RecId;
        _reportLineData.TotalTrans = TotalTrans::Trans;

        if (showItemName && itemNamesMap.exists(_dim.ItemId))
        {
            _reportLineData.ItemName = itemNamesMap.lookup(_dim.ItemId);
        }
        ril.add(_reportLineData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBatch</Name>
				<Source><![CDATA[
    protected void doBatch()
    {
        this.batchInfo();

        batchInfo.parmBatchExecute(NoYes::Yes);
        batchInfo.parmCaption(Name);

        this.generateParmId();
        
        super();

        if (batchInfo.parmBatchId())
        {
            Batch batch = batchInfo.parmBatch();
            InventTurnoverReportSession_RU session;
            session.ParmId = parmId;
            session.BatchId = batch.RecId;
            session.Name = Name;
            session.Parameters = batch.Parameters;
            session.ExecutionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            session.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        preProcess = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTurnoverReportSave_RU construct()
    {
        return new InventTurnoverReportSave_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventTurnoverReportSave_RU   report = InventTurnoverReportSave_RU::construct();
        
        if (report.prompt())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00121, funcName());

            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static Description description()
    {
        return "@Inventory_Localization:InventTurnoverReport";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>