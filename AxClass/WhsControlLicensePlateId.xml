<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsControlLicensePlateId</Name>
	<SourceCode>
		<Declaration><![CDATA[
// <summary>
/// The <c>WhsControlLicensePlateId</c> class is responsible for handling the license plate Id controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#LicensePlateId)]
class WhsControlLicensePlateId extends WhsControl
{
                  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        WHSWorkLine workLine = controlData.parmWorkLine();
        if (workLine.WorkType == WHSWorkType::Count)
        {
            fieldValues.parmLicensePlateId(this.parmData());
            
            WHSWorkLineCycleCount   workLineCycleCount;
            InventDim               cycleCountInventDim;
            select firstonly workLineCycleCount
                        join cycleCountInventDim
                        where workLineCycleCount.InventDimId            == cycleCountInventDim.InventDimId  &&
                              workLineCycleCount.WorkId                 == workLine.WorkId                  &&
                              cycleCountInventDim.LicensePlateId        == fieldValues.parmLicensePlateId() &&
                              (workLineCycleCount.CycleCountCounted     == NoYes::Yes                       ||
                               workLineCycleCount.CycleCountReconcile   == NoYes::Yes);

            if (workLineCycleCount.RecId != 0)
            {
                workLineCycleCount.clear();

                select firstonly RecId from workLineCycleCount
                            join cycleCountInventDim
                            where workLineCycleCount.InventDimId         == cycleCountInventDim.InventDimId  &&
                                  workLineCycleCount.WorkId              == workLine.WorkId                  &&
                                  cycleCountInventDim.LicensePlateId     == fieldValues.parmLicensePlateId() &&
                                  workLineCycleCount.CycleCountCounted   == NoYes::No                        &&
                                  workLineCycleCount.CycleCountReconcile == NoYes::No;

                if (workLineCycleCount.RecId == 0)
                {
                    return this.fail("@WAX3346");
                }
            }

            fieldValues.parmLicensePlateId('');

            if (!controlData.validateLicensePlateInLocation(this.parmData()))
            {
                if (!WHSInvent::canPutLicensePlateOnLocation(this.parmData(), pass.lookup(#WMSLocationId), pass.lookup(#InventLocationId), false))
                {
                    if (InventLocation::find(fieldValues.parmInventLocationId()).CycleCountAllowPalletMove)
                    {
                        if (this.isLicensePlateMovementConfirmationRequired())
                        {
                            this.registerLicensePlateMovementConfirmationRequired();
                            
                            this.prepareDataForLicensePlateMovement();
                            
                            return true;
                        }

                        fieldValues.parmLicensePlateId(this.parmData());

                        WMSLocationId cycleCountLocationId = controlData.findLocationByLicensePlate(fieldValues.parmLicensePlateId());

                        cycleCountInventDim.InventSiteId = fieldValues.parmInventSiteId();
                        cycleCountInventDim.InventLocationId = fieldValues.parmInventLocationId();
                        cycleCountInventDim.wMSLocationId = fieldValues.parmWMSLocationId();
                        cycleCountInventDim.LicensePlateId = fieldValues.parmLicensePlateId();

                        WHSWorkCreateMovementBasic::createBasicMovementWork(pass.lookup(#UserId),
                                                                                    '',
                                                                                    0,
                                                                                    '',
                                                                                    cycleCountInventDim,
                                                                                    fieldValues.parmLicensePlateId(),
                                                                                    cycleCountLocationId,
                                                                                    pass.lookupStr(WHSWorkExecuteDisplayLicensePlateMovementConfirmationConstants::ToWMSLocationId),
                                                                                    fieldValues.parmLicensePlateId(),
                                                                                    controlData.getInventStatusId(),
                                                                                    controlData.getInventStatusId());
      
                        // Remove the parent license plate if the license plate being moved
                        // is a child and is being moved to a different location.
                        this.removeLPFromParentLP();

                        // Any nested license plates need to move too.
                        this.moveNestedLPs();

                        WHSRFControlData::createCycleCountWorkLineLP(
                            fieldValues.parmLicensePlateId(), 
                            pass.lookupStr(WHSWorkExecuteDisplayLicensePlateMovementConfirmationConstants::ToWMSLocationId),
                            workLine.WorkId);

                        if (pass.exists(#RFAddLP))
                        {
                            pass.remove(#RFAddLP);
                        }
                        pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight);

                        return true;
                    }
                        
                    return this.fail("@WAX1677");
                }
                // A license plate being added or a parent license plate with no inventory
                // that has been moved are valid.
                if (pass.exists(#RFAddLP)
                    || pass.lookupStr(WHSWorkExecuteDisplayLicensePlateMovementConfirmationConstants::State) == WHSWorkExecuteDisplayLicensePlateMovementConfirmationConstants::Confirmed)
                {
                    fieldValues.insert(#LicensePlateId, this.parmData());
                    return true;
                }
                pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);

                WHSRFMenuItemCycleCount rfMenuItemCycleCount = WHSRFMenuItemCycleCount::find(pass.lookup(#MenuItem));

                if (pass.exists(#NewLicensePlateId)
                            && str2int(pass.lookup(#RetryCounter)) == rfMenuItemCycleCount.NumRetries
                            && pass.lookup(#NewLicensePlateId) != this.parmData())
                {
                    pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) - 1);
                }

                if (!rfMenuItemCycleCount.BlindItem)
                {
                    pass.insert(#RFAddLP, 1);
                    pass.insert(#NewLicensePlateId, this.parmData());
                }

                return this.fail(strFmt("@WAX:Error_LicensePlateNotInLocation", this.parmData(), fieldValues.parmWMSLocationId(), fieldValues.parmInventLocationId()));
            }

            fieldValues.parmLicensePlateId(this.parmData());

            if (!controlData.validateItemInLocation(fieldValues.parmItemId()))
            {
                fieldValues.parmLicensePlateId('');
                return this.fail(strFmt("@WAX:Error_ItemNotInLocation", fieldValues.parmItemId(), fieldValues.parmWMSLocationId(), fieldValues.parmInventLocationId()));
            }
            fieldValues.insert(#LicensePlateId, this.parmData());
            return true;
        }
        
        if (this.checkLicensePlateIdWorkExecuteMode())
        {
            if (!WHSLicensePlate::exist(this.parmData()))
            {
                if (workLine.WorkType != WHSWorkType::Put)
                {
                    return this.fail(strFmt("@WAX:Error_LicensePlateDoesNotExist", this.parmData()));
                }
                else
                {
                    WHSLicensePlate::createLicensePlate(this.parmData());
                }
            }
            else
            {
                fieldValues.parmLicensePlateId(this.parmData());

                if (mode == WHSWorkExecuteMode::InquiryLicensePlate)
                {
                    this.validateLicensePlateInWarehouse(this.parmData(), pass.lookup(#InventLocationId));                
                }

                if (mode == WHSWorkExecuteMode::ClusterPicking || mode == WHSWorkExecuteMode::SystemDirectedClusterPicking)
                {
                    if (!controlData.validateLicensePlateInLocation(this.parmData(), false, true))
                    {
                        fieldValues.parmLicensePlateId('');
                        return this.fail(strFmt("@WAX:Error_LicensePlateNotInLocation", this.parmData(), fieldValues.parmWMSLocationId(), fieldValues.parmInventLocationId()));
                    }
                    else if (!controlData.validateItemInLocation(pass.lookup(#ItemId)))
                    {
                        fieldValues.parmLicensePlateId('');
                        return this.fail(strFmt("@WAX:Error_ItemNotInLocation", pass.lookup(#ItemId), fieldValues.parmWMSLocationId(), fieldValues.parmInventLocationId()));
                    }
                }
                else if (mode != WHSWorkExecuteMode::UserDirected    &&
                         mode != WHSWorkExecuteMode::SystemDirected  &&
                         mode != WHSWorkExecuteMode::UserGrouping    &&
                         mode != WHSWorkExecuteMode::SystemGrouping  &&
                         mode != WHSWorkExecuteMode::PickPack        &&
                         mode != WHSWorkExecuteMode::ValidatedUserDirected)
                {
                    // If a movement is being done it is possible for the parent license plate
                    // to have inventory on it. 
                    if (!controlData.validateLicensePlateInLocation(this.parmData())
                        || ((mode == WHSWorkExecuteMode::Movement
                                || mode == WHSWorkExecuteMode::WarehouseTransfer)
                            &&  WHSLicensePlate::isParentLicensePlate(this.parmData())))
                    {
                        if ((mode == WHSWorkExecuteMode::Movement
                                || mode == WHSWorkExecuteMode::WarehouseTransfer)
                            && fieldValues.parmWMSLocationId() == controlData.findLocationByNestedPlate(this.parmData()))
                        {
                            pass.insert(#MoveNest, 1);
                            return true;
                        }

                        fieldValues.parmLicensePlateId('');
                        return this.fail(strFmt("@WAX:Error_LicensePlateNotInLocation", this.parmData(), fieldValues.parmWMSLocationId(), fieldValues.parmInventLocationId()));
                    }
                    
                    if (mode == WHSWorkExecuteMode::CreateTranferOrderFromLP 
                        && workLine.WorkType != WHSWorkType::Put
                        && WHSCreateTransferOrderFromLPValidateLicensePlatePolicyFlight::instance().isEnabled()
                        && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).CreateTransferOrderFromLPValidateLPPolicy == WhsCreateTransferOrderFromLPValidateLPPolicy::Error)

                    {
                        WHSWorkTable otherUnProcessedWork = WHSWorkTable::findOtherUnProcessedOrOpenWorkByTargetLp(workLine.WorkId, this.parmData());
                        if (otherUnProcessedWork)
                        {
                            fieldValues.parmLicensePlateId('');
                            return this.fail(strFmt("@WAX:Error_LicensePlateUsedAsTargetOnOtherWork", this.parmData(), otherUnProcessedWork.WorkId));
                        }

                        if (WHSControlLicensePlateIdBlockingStatusValidationFlight::instance().isEnabled()
                         && !this.validateLicensePlateBlockingStatus(this.parmData()))
                        {
                            fieldValues.parmLicensePlateId('');
                            return false;                                               
                        }
                    }
                }
                else if (workLine.WorkType != WHSWorkType::Put && !controlData.validateLicensePlateInLocation(this.parmData(), false, this.shouldCheckInventStatusForLPValidation(workLine)))
                {
                    fieldValues.parmLicensePlateId('');
                    return this.fail(strFmt("@WAX:Error_LicensePlateNotInLocation", this.parmData(), fieldValues.parmWMSLocationId(), fieldValues.parmInventLocationId()));
                }
                else if (workLine.WorkType != WHSWorkType::Put 
                         && !this.isItemEmptyAndWorkInbound(workLine)
                         && !controlData.validateItemInLocation(workLine.ItemId))
                {
                    fieldValues.parmLicensePlateId('');

                    InventDim inventDimCriteria = controlData.retrieveInventDimFromWorkLine(workLine.ItemId);
                        
                    return this.fail(strFmt("@WAX:ErrorLPNotHaveReservedDimensions", this.parmData(), inventDimCriteria.preFix(), workLine.ItemId));
                    
                } 
                else if (!this.validateOrderCommittedLP(workLine))
                {
                    return this.fail(strFmt("@WAX:TheSelectedLPIsntTheReservedOne1IsExpected", workLine.findOrderCommitedLicensePlateFromWorkInventTrans()));
                }
                else if (InventTable::find(workLine.ItemId).whsBatchActive()    &&
                                 workLine.inventDim().InventBatchId                     &&
                                 workLine.WorkType   == WHSWorkType::Pick            &&
                                 !controlData.batchExistInLocation(workLine.inventDim().InventBatchId))
                {
                    fieldValues.parmLicensePlateId('');
                    return this.fail(strFmt("@WAX:Error_BatchDoesNotExistInLocation", workLine.inventDim().InventBatchId, workLine.ItemId, fieldValues.parmWMSLocationId(), fieldValues.parmInventLocationId()));
                }
                else if (workLine.WorkType == WHSWorkType::Pick                          &&
                                workLine.whsWorkTable().WorkTransType == WHSWorkTransType::Sales &&
                                InventTable::find(workLine.ItemId).whsBatchActive()              &&
                                !WHSWorkLine::isPutBefore(workLine.WorkId, workLine.LineNum)     &&
                                !controlData.checkBatchSellableDays(workLine, this.parmData()))
                {
                    fieldValues.parmLicensePlateId('');
                    return this.fail("@WAX:BatchInvalidExpirationDate");
                }
                else if (this.isOldestBatchInLocationNotPicked(workLine))
                {
                    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).PickOldestBatch == WHSPickOldestBatch::Warn)
                    {
                        if (WHSCheckForAlreadyValidatedLicensePlateIdOrBatchIdOnPickOldestBatchWarningFlight::instance().isEnabled())
                        {
                            this.fail("@WAX:PickOldestBatchInLocationLicensePlateWarning");
                        }
                        else
                        {
                            this.fail("@WAX:PickOldestBatchWarning");
                        }
                        pass.insert(#FEFOWarnLP, fieldValues.parmLicensePlateId());
                        controlData.parmColorText(WHSRFColorText::Warning);
                        fieldValues.parmLicensePlateId('');
                        return true;
                    }

                    Set oldestBatchSet = WHSRFControlData::getOldestBatchInLocForPickLine(workLine);
                    fieldValues.parmLicensePlateId('');
                    return this.failOldestBatchInLocationNotPicked(oldestBatchSet);
                }
                else if (workLine.WorkType != WHSWorkType::Put)
                {
                    WHSWorkTable otherUnProcessedWork = WHSWorkTable::findOtherUnProcessedWorkByTargetLp(workLine.WorkId, this.parmData());
                    if (otherUnProcessedWork)
                    {
                        fieldValues.parmLicensePlateId('');
                        return this.fail(strFmt("@WAX:Error_LicensePlateUsedAsTargetOnOtherWork", this.parmData(), otherUnProcessedWork.WorkId));
                    }
                }

                if (pass.exists(#FEFOWarnLP))
                {
                    pass.remove(#FEFOWarnLP);
                }
            }
        } 
        else
        { 
            if (!super())
            {
                return false;
            }

            if (this.lpRegisteredForKanban())
            {
                fieldValues.parmLicensePlateId(this.parmData());
                return true;
            }
            else if (!this.validateLPForWorkLine(workLine))
            {
                return this.fail(strFmt("@WAX:Error_LicensePlateNotValid", this.parmData()));
            }
            else if (this.mustCheckPickPrintLicensePlate(workLine))
            {
                if (workLine.WorkType == WHSWorkType::Pick
                        && (mode == WHSWorkExecuteMode::ReportAsFinished
                        ||  mode == WHSWorkExecuteMode::ReportAsFinishedAndLocate
                        ||  mode == WHSWorkExecuteMode::ReportAsFinishedBySerial
                        ||  mode == WHSWorkExecuteMode::KanbanPut
                        ||  mode == WHSWorkExecuteMode::KanbanPutAndLocate
                        ||  mode == WHSWorkExecuteMode::LoadItemReceivingAndLocate 
					    ||  mode == WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate
                        ||  mode == WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate
                        ||  (mode == WHSWorkExecuteMode::MixedLPReceivingAndLocate
                        &&  WhsPurchaseOrderQualityItemSamplingMixedLPRcvAndPutawayFlight::instance().isEnabled())
                        ||  (mode != WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate
                        &&  WHSWorkExecutionMode::newFromMode(mode).isInboundOrderReceivingAndPutaway())
                        ||  workLine.whsWorkTable().WorkTransType == WHSWorkTransType::CrossDocking)) // Cross docking work can be done on multiple modes using 'andPutaway'
                {
                    if (!controlData.validateLicensePlateInLocation(this.parmData()))
                    {
                        return this.fail(strFmt("@WAX:Error_LicensePlateNotInLocation", this.parmData(), fieldValues.parmWMSLocationId(), fieldValues.parmInventLocationId()));
                    }
                }
                else if (workLine.WorkType == WHSWorkType::Print)
                {
                    fieldValues.parmLicensePlateId(this.parmData());
                    return true;
                }
                else
                {
                    return this.fail(strFmt("@WAX:Error_LicensePlateNotValid", this.parmData()));
                }
            }
        }

        fieldValues.parmLicensePlateId(this.parmData());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOldestBatchInLocationNotPicked</Name>
				<Source><![CDATA[
    private boolean isOldestBatchInLocationNotPicked(WHSWorkLine _workline)
    {
        if (!WHSCheckForAlreadyValidatedLicensePlateIdOrBatchIdOnPickOldestBatchWarningFlight::instance().isEnabled())
        {
            return this.parmEnabled()
                        &&  InventTable::find(_workline.ItemId).whsBatchActive()
                        &&  _workline.WorkType == WHSWorkType::Pick
                        &&  WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).PickOldestBatch != WHSPickOldestBatch::None
                        &&  (!pass.exists(#FEFOWarnLP)
                        ||  pass.lookup(#FEFOWarnLP)           != fieldValues.parmLicensePlateId())
                        &&  _workline.inventDim().InventBatchId == ''
                        &&  !controlData.validateOldestBatchForPickLine(fieldValues.parmLicensePlateId(), _workline);
        }

        return this.parmEnabled()
                        &&  InventTable::find(_workline.ItemId).whsBatchActive()
                        &&  _workline.WorkType == WHSWorkType::Pick
                        &&  WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).PickOldestBatch != WHSPickOldestBatch::None
                        &&  this.isLicensePlateIdMissingValidation()
                        &&  _workline.inventDim().InventBatchId == ''
                        &&  !controlData.validateOldestBatchForPickLine(fieldValues.parmLicensePlateId(), _workline);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLicensePlateIdMissingValidation</Name>
				<Source><![CDATA[
    private boolean isLicensePlateIdMissingValidation()
    {
        if (!pass.exists(#LicensePlateId))
        {
            //Means that is the very first time that we try to scan a license plate.
            return true;
        }

        str currentLicensePlateId = pass.parmLicensePlateId();
        
        if (currentLicensePlateId == '')
        {
            //Means that the license plate was already validated once with an error as a result, setting the LicensePlateId parameter to empty.
            return pass.parmFEFOWarnLP() != fieldValues.parmLicensePlateId();
        }

        //The license plate was confirmed before, but at some point during the process the worker could rescan the license plate.
        return currentLicensePlateId != fieldValues.parmLicensePlateId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCheckInventStatusForLPValidation</Name>
				<Source><![CDATA[
    private boolean shouldCheckInventStatusForLPValidation(WHSWorkLine _workLine)
    {

        // Inbound pick work line could reference several transactions with different dimensions (e.g. for different batches/serials)
        // in that case WorkLine InventDim would be 'AllBlank' and we would not be able to validate on-hand for InventStatus
        return !this.isWorkInbound(_workLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLPForWorkLine</Name>
				<Source><![CDATA[
    private boolean validateLPForWorkLine(WHSWorkLine _workLine)
    {
        return _workLine
            || mode == WHSWorkExecuteMode::ReportAsFinished
            || mode == WHSWorkExecuteMode::ReportAsFinishedAndLocate
            || mode == WHSWorkExecuteMode::ReportAsFinishedBySerial
            || mode == WHSWorkExecuteMode::AdjustmentIn
            || mode == WHSWorkExecuteMode::LicensePlateLoading
            || controlData.validateLicensePlateQty(this.parmData());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckPickPrintLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to check license plate for work types pick and print.
    /// </summary>
    /// <param name = "_workLine">A work line record.</param>
    /// <returns>true if the license plate must be checked; otherwise, false.</returns>
    protected boolean mustCheckPickPrintLicensePlate(WHSWorkLine _workLine)
    {
        return (_workLine 
            && mode != WHSWorkExecuteMode::AdjustmentIn
            && mode != WHSWorkExecuteMode::LicensePlateLoading
            && _workLine.WorkType != WHSWorkType::Put
            && !controlData.validateLicensePlateQty(this.parmData()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemEmptyAndWorkInbound</Name>
				<Source><![CDATA[
    private boolean isItemEmptyAndWorkInbound(WHSWorkLine _workLine)
    {
        if (_workLine.ItemId)
        {
            return false;
        }

        return this.isWorkInbound(_workLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkInbound</Name>
				<Source><![CDATA[
    private boolean isWorkInbound(WHSWorkLine _workLine)
    {
        WHSWorkTransType workTransType = WHSWorkClassTable::findByWorkClassId(_workLine.WorkClassId).WorkTransType;

        return WhsWorkTransactionType::singletonFromTypeOrDefault(workTransType).isForInboundShipment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNestedLPs</Name>
				<Source><![CDATA[
    private void moveNestedLPs()
    {
        if (WHSLicensePlate::isParentLicensePlate(fieldValues.parmLicensePlateId()))
        {
            WHSWorkCreateMovement::createNestedMovementWork(fieldValues.parmLicensePlateId(),
                                                            fieldValues.parmInventLocationId(),
                                                            pass.lookupStr(WHSWorkExecuteDisplayLicensePlateMovementConfirmationConstants::ToWMSLocationId),
                                                            pass.lookup(#UserId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLPFromParentLP</Name>
				<Source><![CDATA[
    private void removeLPFromParentLP()
    {
        if (WHSLicensePlate::find(this.parmData()).LicensePlateParent != '')
        {
            WHSLicensePlate::removeFromParentLp(this.parmData());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLicensePlateMovementConfirmationRequired</Name>
				<Source><![CDATA[
    private boolean isLicensePlateMovementConfirmationRequired()
    {
        return !pass.exists(WHSWorkExecuteDisplayLicensePlateMovementConfirmationConstants::State)
               || pass.lookupStr(WHSWorkExecuteDisplayLicensePlateMovementConfirmationConstants::State) == WHSWorkExecuteDisplayLicensePlateMovementConfirmationConstants::Required
               || !pass.exists(#LicensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerLicensePlateMovementConfirmationRequired</Name>
				<Source><![CDATA[
    private void registerLicensePlateMovementConfirmationRequired()
    {
        pass.insert(WHSWorkExecuteDisplayLicensePlateMovementConfirmationConstants::State, WHSWorkExecuteDisplayLicensePlateMovementConfirmationConstants::Required);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDataForLicensePlateMovement</Name>
				<Source><![CDATA[
    private void prepareDataForLicensePlateMovement()
    {
        WHSLicensePlateId licensePlateId = this.parmData();

        pass.insert(WHSWorkExecuteDisplayLicensePlateMovementConfirmationConstants::ToWMSLocationId, fieldValues.parmWMSLocationId());
        pass.insert(WHSWorkExecuteDisplayLicensePlateMovementConfirmationConstants::FromWMSLocationId, controlData.findLocationByLicensePlate(licensePlateId));
        fieldValues.parmLicensePlateId(licensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>failOldestBatchInLocationNotPicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Fail when an older unpicked batch number exists.
    /// </summary>
    /// <param name = "_oldestBatchSet">
    /// A set which stores the oldest batch number IDs.
    /// </param>
    /// <returns>false to indicate an error occurred.</returns>
    private boolean failOldestBatchInLocationNotPicked(Set _oldestBatchSet)
    {
        if (_oldestBatchSet.elements() != 0 )
        {
            SetEnumerator oldestBatchEnumerator = _oldestBatchSet.getEnumerator();
            oldestBatchEnumerator.moveNext();
            return this.fail(strFmt("@WAX4165", oldestBatchEnumerator.current()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLicensePlateIdWorkExecuteMode</Name>
				<Source><![CDATA[
    protected boolean checkLicensePlateIdWorkExecuteMode()
    {
        return mode != WHSWorkExecuteMode::AdjustmentIn                                 &&
               mode != WHSWorkExecuteMode::CompleteMixedLicensePlate                    &&
               mode != WHSWorkExecuteMode::ReportAsFinished                             &&
               mode != WHSWorkExecuteMode::ReportAsFinishedAndLocate                    &&
               mode != WHSWorkExecuteMode::ReportAsFinishedBySerial                     &&
               mode != WHSWorkExecuteMode::KanbanPut                                    &&
               mode != WHSWorkExecuteMode::KanbanPutAndLocate                           &&
               mode != WHSWorkExecuteMode::ReturnOrder                                  &&
               mode != WHSWorkExecuteMode::ReturnItemReceiving                          &&
               mode != WHSWorkExecuteMode::ReturnOrderAndLocate                         &&
               mode != WHSWorkExecuteMode::TransferOrderItemReceiving                   &&
               mode != WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate          &&
               mode != WHSWorkExecuteMode::TransferOrderLineReceiving                   &&
               mode != WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate          &&
               mode != WHSWorkExecuteMode::LicensePlateLoading                          &&
               mode != WHSWorkExecuteMode::MixedLPReceiving                             &&
               mode != WHSWorkExecuteMode::MixedLPReceivingAndLocate                    &&
               !WHSWorkExecutionMode::newFromMode(mode).isInboundOrderOrLoadReceiving();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    public void populate()
    {
        if (mode == WHSWorkExecuteMode::AdjustmentOut)
        {
            fieldValues.parmLicensePlateId(controlData.getLicensePlateId());
            
            if (!fieldValues.parmWMSLocationId())
            {
                fieldValues.parmWMSLocationId(controlData.findLocationByLicensePlate(fieldValues.parmLicensePlateId()));

                if (pass.lookup(#WMSLocationId) != '')
                {
                    pass.insert(#SystemPopulated, 1);
                }
            }
        }
        else if (step == #ShortPick)
        {
            // Short pick does not require License Plate to be specified if picking zero.
            if (pass.exists(#QtyToPick) && pass.parmQtyToPick() == 0)
            {
                fieldValues.remove(#LicensePlateId);
            }
            else
            {
                fieldValues.insert(#LicensePlateId, '');
            }
        }
        else
        {
            fieldValues.insert(#LicensePlateId, '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlateInWarehouse</Name>
				<Source><![CDATA[
    private void validateLicensePlateInWarehouse(WHSLicensePlateId _licensePlateId, InventLocationId _inventLocationId)
    {
        if (!WHSLicensePlate::isParentLicensePlate(_licensePlateId) || !WhsLicensePlate::hasChildLicensePlatesInLocation(_licensePlateId, _inventLocationId))
        {
            this.validateAndThrowError(WhsLicensePlate::findLicensePlatesWarehouse(_licensePlateId), _inventLocationId, _licensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndThrowError</Name>
				<Source><![CDATA[
    private void validateAndThrowError(InventLocationId _lpLocationId, InventLocationId _userLocationId, WHSLicensePlateId _licensePlateId)
    {
        if(!_lpLocationId)
        {
            throw error(strFmt("@WAX:Error_LicensePlateDoesNotExist", _licensePlateId));
        }
        else if (_lpLocationId != _userLocationId)
        {
            throw error(strFmt("@WAX:LPInAnotherWarehouse", _licensePlateId, _lpLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lpRegisteredForKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if licence plate is registered for kanban.
    /// </summary>
    /// <returns>true if licence plate vis registered for kanban; otherwise false</returns>
    private boolean lpRegisteredForKanban()
    {
        if ((mode == WHSWorkExecuteMode::KanbanPut
            ||  mode == WHSWorkExecuteMode::KanbanPutAndLocate)
            && pass.exists(#KanbanId))
        {
            InventTrans         inventTrans;
            InventTransOrigin   inventTransOrigin;
            InventDim           inventDim;

            KanbanId kanbanId = pass.lookup(#KanbanId);
            ItemId itemId = fieldValues.parmItemId();

            select firstonly RecId from inventTrans
                    where inventTrans.StatusReceipt == StatusReceipt::Registered
                        && inventTrans.StatusIssue == StatusIssue::None
                        && inventTrans.ItemId == itemId
                exists join inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                        && inventTransOrigin.ReferenceCategory == InventTransType::KanbanJobProcess
                        && inventTransOrigin.ReferenceId == kanbanId
                exists join inventDim
                    where inventDim.inventDimId == inventTrans.inventDimId
                        && inventDim.LicensePlateId == this.parmData();

            return inventTrans.RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOrderCommittedLP</Name>
				<Source><![CDATA[
    private boolean validateOrderCommittedLP(WHSWorkLine _workLine)
    {
        WHSLicensePlateId locatedLPId = _workLine.findOrderCommitedLicensePlateFromWorkInventTrans();
        return (!locatedLPId || locatedLPId == this.parmData());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlateBlockingStatus</Name>
				<Source><![CDATA[
    private boolean validateLicensePlateBlockingStatus(WHSLicensePlateId _licensePlateId)
    {
        boolean         isValid = true;
        InventSum       inventSum;       
        InventDim       inventDim;
        WHSInventStatus inventStatus;        
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            if (_licensePlateId)
            {
                if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
                {
                    while select InventDimId, ItemId, PhysicalInvent, PdsCWPhysicalInvent from inventSum
                        where inventSum.licensePlateId  == _licensePlateId
                           && (inventSum.PhysicalInvent != 0 || inventSum.PdsCWPhysicalInvent != 0)                           
                           && inventSum.ClosedQty       == NoYes::No
                    exists join inventStatus
                        where inventStatus.InventStatusId       == inventSum.InventStatusId
                          && inventStatus.InventStatusBlocking  == NoYes::Yes
                    {
                        if (inventSum.PhysicalInvent != 0 && inventSum.PdsCWPhysicalInvent == 0
                         && PdsCatchWeightItem::exist(inventSum.ItemId))
                        {
                            continue;
                        }
                        
                        break;
                    }
                }
                else
                {
                    select firstonly InventDimId, ItemId from inventSum
                        where inventSum.licensePlateId  == _licensePlateId
                           && inventSum.PhysicalInvent  != 0
                           && inventSum.ClosedQty       == NoYes::No
                    exists join inventStatus
                        where inventStatus.InventStatusId       == inventSum.InventStatusId
                           && inventStatus.InventStatusBlocking == NoYes::Yes;
                }

                inventDim = InventDim::find(inventSum.InventDimId);
            }
        }
        else
        {
            if (_licensePlateId)
            {
                if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
                {
                    while select inventDim
                        where inventDim.licensePlateId == _licensePlateId
                    join ItemId, PhysicalInvent, PdsCWPhysicalInvent from inventSum
                        where inventSum.InventDimId     == inventDim.InventDimId
                           && (inventSum.PhysicalInvent != 0 || inventSum.PdsCWPhysicalInvent != 0)
                           && inventSum.ClosedQty       == NoYes::No
                    exists join inventStatus
                        where inventStatus.InventStatusId       == inventSum.InventStatusId
                           && inventStatus.InventStatusBlocking == NoYes::Yes
                    {
                        if (inventSum.PhysicalInvent != 0 && inventSum.PdsCWPhysicalInvent == 0
                         && PdsCatchWeightItem::exist(inventSum.ItemId))
                        {
                            continue;
                        }
                        
                        break;
                    }
                }
                else
                {
                    select firstonly inventDim
                        where inventDim.licensePlateId == _licensePlateId
                    join ItemId from inventSum
                        where inventSum.InventDimId     == inventDim.InventDimId
                           && inventSum.PhysicalInvent  != 0
                           && inventSum.ClosedQty       == NoYes::No
                    exists join inventStatus
                        where inventStatus.InventStatusId       == inventSum.InventStatusId
                           && inventStatus.InventStatusBlocking == NoYes::Yes;
                }
            }
        }

        if (inventDim.RecId && inventSum.ItemId)
        {
            isValid = this.fail("@WAX:BlockingStatusCannotBeSetForTransferOrderTransactions" + ' ' + strFmt("@WAX:Error_WHSTransferOrderProcessingCannotCreateLineForDimensions", inventSum.ItemId, inventDim.preFix()));
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>