<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankSecurityUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankSecurityUtility</c> class provides the ability to mask sensitive bank information.
/// </summary>
public class BankSecurityUtility
{
    private const int maskLength = 3;
    private const int minElementLength = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mask</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Masks the beginning portion of the element.
    /// </summary>
    /// <param name = "_element">The sensitive element value.</param>
    /// <returns>The masked value.</returns>
    public str mask(str _element)
    {
        str result;

        if (this.canMask(_element))
        {
            int elementLength = strLen(_element);
            int elementLenghtWillBeMasked = elementLength - maskLength;
            str elementValueKept = strDel(_element, 0, elementLenghtWillBeMasked);
            str elementValueMasked;

            while (elementLenghtWillBeMasked > 0)
            {
                elementValueMasked = elementValueMasked + 'X';
                elementLenghtWillBeMasked--;
            }

            result = elementValueMasked + elementValueKept;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the element can be masked.
    /// </summary>
    /// <param name = "_element">The sensitive element value.</param>
    /// <returns>
    /// true if the element can be masked; otherwise false.
    /// </returns>
    public boolean canMask(str _element)
    {
        boolean canMask;

        int elementLength = strLen(_element);
        if (elementLength >= minElementLength)
        {
            canMask = true;
        }

        return canMask;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>