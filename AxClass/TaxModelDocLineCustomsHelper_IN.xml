<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineCustomsHelper_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The helper class to support the implementation of document line domain object supporting Service Tax.
/// </summary>
public class TaxModelDocLineCustomsHelper_IN extends TaxModelDocLineHelper_IN
{
    TaxModelCustomsTaxable_IN taxModelCustomsTaxable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustomsDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Customs Direction
    /// </summary>
    /// <returns>
    /// The <c>Direction_IN</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Direction_IN getCustomsDirection()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getCustomsReferenceTaxModelDocLine().getCustomsDirection();
        }
        else
        {
            return transTaxInformation.CustomsTariffDirection;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsReferenceTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets customs reference tax model doc line.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TaxModelCustomsTaxable_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TaxModelCustomsTaxable_IN getCustomsReferenceTaxModelDocLine()
    {
        return taxModelTaxable.getReferenceTaxModelDocLine() as TaxModelCustomsTaxable_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsTariffCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the <c>CustomsTariffCodeTable_IN</c> of this document line.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId getCustomsTariffCodeRefRecId()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getCustomsReferenceTaxModelDocLine().getCustomsTariffCodeRefRecId();
        }
        else
        {
            return transTaxInformation.CustomsTariffCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsTariffCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustomsTariffCodeTable_IN</c> of this document line.
    /// </summary>
    /// <returns>
    /// The <c>CustomsTariffCodeTable_IN</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustomsTariffCodeTable_IN getCustomsTariffCodeTable()
    {
        return CustomsTariffCodeTable_IN::find(taxModelCustomsTaxable.getCustomsTariffCodeRefRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsTaxAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxAccountType_IN getCustomsTaxAccountType(TaxOnItem _taxOnItem)
    {
        TaxAccountType_IN ret;

        switch (taxModelCustomsTaxable.getCustomsDirection())
        {
            case Direction_IN::Import :
                ret = TaxAccountType_IN::CustomsImportDutyExpenseAccount;
                break;
            case Direction_IN::Export :
                ret = TaxAccountType_IN::CustomsExportDutyPayableAccount;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsTaxOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxAccountType_IN getCustomsTaxOffsetAccountType(TaxOnItem _taxOnItem)
    {
        TaxAccountType_IN ret;

        switch (taxModelCustomsTaxable.getCustomsDirection())
        {
            case Direction_IN::Import :
                ret = TaxAccountType_IN::CustomsImportDutyPayableAccount;
                break;
            case Direction_IN::Export :
                ret = TaxAccountType_IN::CustomsExportDutyExpenseAccount;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Customs Registration Number
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRegistrationNumber_IN getCustomsTaxRegistrationNumber()
    {
        TaxModelTaxable_IN taxModelTaxableIN = taxModelTaxable as TaxModelTaxable_IN;
        return taxModelTaxableIN.getTaxRegistrationNumber(TaxType_IN::Customs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsTaxRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the the <c>RecId</c> of Customs Registration.
    /// </summary>
    /// <returns>
    /// The the <c>RefRecId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId getCustomsTaxRegistrationRefRecId()
    {
        TaxModelTaxable_IN taxModelTaxableIN = taxModelTaxable as TaxModelTaxable_IN;
        return taxModelTaxableIN.getTaxRegistrationNumberRefRecId(TaxType_IN::Customs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasApplyExcise</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if the transaction document has the applyExcise
    /// </summary>
    /// <returns>
    /// True, if it has.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean hasApplyExcise()
    {
        TaxGroupData    taxGroupData;
        taxOnItem       taxOnItem;
        TaxTable        taxTable;
        TaxComponentTable_IN taxComponentTable;

        select firstOnly RecId from taxOnItem
            where taxOnItem.TaxItemGroup            == taxModelTaxable.getTaxItemGroup()
            exists join taxGroupData
                where taxOnItem.TaxCode             == taxGroupData.TaxCode
                    && taxGroupData.TaxGroup        == taxModelTaxable.getTaxGroup()
            exists join taxTable
                where taxTable.TaxCode              == taxOnItem.TaxCode
                    && taxTable.TaxType_IN          == TaxType_IN::Customs
            exists join taxComponentTable
                where taxTable.TaxComponentTable_IN == taxComponentTable.RecId
                    && taxComponentTable.ApplyExcise    == NoYes::Yes;

        return taxOnItem.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomsPreferential</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is avaialbe for Preferential.
    /// </summary>
    /// <returns>
    /// True if the document line is Preferential applied; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes isCustomsPreferential()
    {
        CustTable custTable;
        VendTable vendTable;
        boolean   ret;

        custTable = taxModelTaxable.getCustTable();

        if (custTable)
        {
            ret = custTable.IsPreferential();
        }
        else
        {
            vendTable= taxModelTaxable.getVendTable();
            if (vendTable)
            {
                ret = vendTable.IsPreferential();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxModelCustomsTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the instance of <c>TaxModelCustomsTaxable_IN</c>
    /// </summary>
    /// <param name="_taxModelCustomsTaxable">
    /// The given instance of <c>TaxModelCustomsTaxable_IN</c>
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setTaxModelCustomsTaxable(TaxModelCustomsTaxable_IN _taxModelCustomsTaxable)
    {
        taxModelCustomsTaxable = _taxModelCustomsTaxable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipCustomsTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the Customs Tax be skipped on this transaction line?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c> on the transaction line.
    /// </param>
    /// <returns>
    /// True, it should be skipped; Otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean shouldSkipCustomsTax(TaxOnItem _taxOnItem)
    {
        boolean ret;

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            ret = this.getCustomsReferenceTaxModelDocLine().shouldSkipCustomsTax(_taxOnItem);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>