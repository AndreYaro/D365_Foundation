<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountStatementReconciliationCancelValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BankAccountStatementReconciliationCancelValidator</c> class is validating 
///     the bank statement cancel reconciliation.
/// </summary>
internal final class BankAccountStatementReconciliationCancelValidator
{
    private BankAccountStatement bankAccountStatement;
    private TransDate cancelDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the bank statement cancel reconciliation.
    /// </summary>
    /// <returns>true if the validation passes; otherwise, false.</returns>
    internal boolean validate()
    {
        return this.validateCancelDateWithStatementDate() && this.validateCancelDateInOpenPeriod() && this.validateIsMostRecentReconciledStatement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCancelDateInOpenPeriod</Name>
				<Source><![CDATA[
    private boolean validateCancelDateInOpenPeriod()
    {
        boolean isValid = LedgerFiscalCalendar::isDateInOpenPeriod(CompanyInfoHelper::fiscalCalendarRecId(), cancelDate);

        if (!isValid)
        {
            isValid = checkFailed(strFmt("@SYS18414", cancelDate));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCancelDateWithStatementDate</Name>
				<Source><![CDATA[
    private boolean validateCancelDateWithStatementDate()
    {
        boolean isValid = true;

        if (cancelDate < bankAccountStatement.AccountStatementDate)
        {
            isValid = checkFailed(strFmt("@CashManagement:BankReconciliationCancellationIncorrectCancelDate", bankAccountStatement.AccountStatementDate));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIsMostRecentReconciledStatement</Name>
				<Source><![CDATA[
    private boolean validateIsMostRecentReconciledStatement()
    {
        boolean isValid = true;

        if (!bankAccountStatement.isMostRecentReconciledStatement())
        {
            isValid = checkFailed(strFmt("@CashManagement:BankReconciliationCancellationMostRecentReconciledStatement", bankAccountStatement.AccountStatementNum));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>BankAccountStatementReconciliationCancelValidator</c> class.
    /// </summary>
    /// <param name = "_bankAccountStatement">The bank account statement.</param>
    /// <param name = "_cancelDate">The cancel date.</param>
    /// <returns>The <c>BankAccountStatementReconciliationCancelValidator</c> class instance.</returns>
    internal static BankAccountStatementReconciliationCancelValidator newFromBankStatement(BankAccountStatement _statement, TransDate _cancelDate)
    {
        BankAccountStatementReconciliationCancelValidator bankAccountStatementReconciliationCancelValidator = new BankAccountStatementReconciliationCancelValidator();

        bankAccountStatementReconciliationCancelValidator.bankAccountStatement = _statement;
        bankAccountStatementReconciliationCancelValidator.cancelDate = _cancelDate;

        return bankAccountStatementReconciliationCancelValidator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>