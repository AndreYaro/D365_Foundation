<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPayStatementPostTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollPayStatementPostTask</c> class initiates the posting process for the pay statement or group of
/// pay statements specified by the calling pay statement posting process driver class.
/// </summary>
class PayrollPayStatementPostTask extends RunBaseBatch implements BatchRetryable
{
    PayrollPayStatementRecId payStatementRecId;
    container batchTaskGroupList;
    Counter postedStatementsCounter;

    #DEFINE.LOGMSG("\%1 Payroll Pay Statement.")

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        payStatementRecId,
        batchTaskGroupList
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getStatementsPostedCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Retrieves the number of pay statements that have been successfully posted.
    /// </summary>
    /// <returns>
    ///  An integer count of the number of pay statements that were successfully
    ///  posted by the task.
    /// </returns>
    public Counter getStatementsPostedCount()
    {
        return postedStatementsCounter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchTaskGroupList</Name>
				<Source><![CDATA[
    public Container parmBatchTaskGroupList(Container _batchTaskGroupList = batchTaskGroupList)
    {
        batchTaskGroupList = _batchTaskGroupList;

        return batchTaskGroupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertPostedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverts a pay statement back to the None posted status.
    /// </summary>
    /// <param name="_payStatement">
    /// The pay statement to be reverted back to a posted status of None.
    /// </param>
    private void revertPostedStatus(PayrollPayStatement _payStatement)
    {
        ttsBegin;
        _payStatement.reread();
        _payStatement.PostedStatus = PayrollPayStatementPostedStatus::None;
        _payStatement.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAccountingEventForEarningStatement</Name>
				<Source><![CDATA[
    private void addAccountingEventForEarningStatement(SourceDocumentHeader _earningStatementSourceDocumentHeader)
    {
        AccountingEvent accountingEvent;

        ttsbegin;

        //Insert a new accounting event that we need to create for the source document
        accountingEvent.SourceDocumentHeader = _earningStatementSourceDocumentHeader.RecId;
        accountingEvent.Type = AccountingEventType::Original;
        accountingEvent.State = AccountingEventState::Complete;
        accountingEvent.AccountingDate = DateTimeUtil::date(DateTimeUtil::utcNow());
        accountingEvent.insert();

        ttscommit;

        AccountingDistribution accountingDistribution;

        update_recordset accountingDistribution
            setting AccountingEvent = accountingEvent.RecId
            where accountingDistribution.SourceDocumentHeader == _earningStatementSourceDocumentHeader.RecId 
                && accountingDistribution.AccountingEvent == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        PayrollPayStatement payStatement;
        PayrollPayStatementLine payStatementLine;
        int i = 1;

        //
        // The calling process has supplied a container with a list of 1..n pay statements for which
        // to post, so loop through this list and do so.
        //
        payStatementRecId = conpeek(batchTaskGroupList, i);
        while (i <= conlen(batchTaskGroupList))
        {
            i++;

            // Retrieve the pay statement to post
            payStatement = PayrollPayStatement::find(payStatementRecId, true);

            try
            {
                ttsBegin;

                // Delete all lines with IsMarkedForRemoval=Yes
                delete_from payStatementLine
                    where payStatementLine.PayStatement == payStatement.RecId
                    &&    payStatementLine.IsMarkedForRemoval == NoYes::Yes;

                // Attempt to journalize the source document and move it to the Completed status
                SourceDocumentProcessorFacade::submitSourceDocumentImplementation(payStatement, false, SourceDocumentAccountingStatus::Completed);

                PayrollEarningStatement earningStatement = PayrollEarningStatement::findByWorkerPayPeriod(payStatement.Worker, payStatement.PayPeriod);
                
                // The earningStatement's AccountingDistribution records don't have a corresponding AccountingEvent. This prevents Account Structures
                // from being deleted even after a pay statement has been posted. addAccountingEventForEarningStatement() will add a "Complete" accounting
                // event for the earningStatement's AccountingDistribution records.
                if (earningStatement)
                {
                    SourceDocumentHeader earningStatementSourceDocumentHeader = SourceDocumentHeader::find(earningStatement.SourceDocumentHeader);
                    this.addAccountingEventForEarningStatement(earningStatementSourceDocumentHeader);
                }

                TransactionLog::create(TransactionLogType::PayrollPaymReconciliation, strFmt(#LOGMSG, payStatement.DocumentNumber));

                payStatement.PostedStatus = PayrollPayStatementPostedStatus::Posted;
                payStatement.update();
                ttsCommit;

                postedStatementsCounter++;
            }
            catch (Exception::Error)
            {
                //
                // Assumes that any error message was already raised at the point that threw the exception,
                // so update the posting status and continue to the next pay statement.
                //
                this.revertPostedStatus(payStatement);
                continue;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    error("@SYS65063");
                    this.revertPostedStatus(payStatement);
                    continue;
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        error("@SYS107548");
                        this.revertPostedStatus(payStatement);
                        continue;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    error("@SYS107548");
                    this.revertPostedStatus(payStatement);
                    continue;
                }
            }

            payStatementRecId = conpeek(batchTaskGroupList, i);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        version     version = runbase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;

                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>