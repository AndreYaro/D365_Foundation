<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceXMLFormat_V4_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceXMLFormat_V4_MX</c> class is used to format the electronic invoice in a XML document.
/// </summary>
/// <remarks>
/// Extends the <c>EInvoiceXMLFormat_V3_3_MX</c> class to include aditional nodes to a CFDI V4.0 invoice.
/// </remarks>
public class EInvoiceXMLFormat_V4_MX extends EInvoiceXMLFormat_V3_3_MX
{
    private const str NotSubjectToTax = '01';
    private const str SubjectToTax = '02';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultNamespace</Name>
				<Source><![CDATA[
    protected str getDefaultNamespace()
    {
        return 'http://www.sat.gob.mx/cfd/4';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchemaLocation</Name>
				<Source><![CDATA[
    protected str getSchemaLocation()
    {
        return 'http://www.sat.gob.mx/cfd/4 http://www.sat.gob.mx/sitio_internet/cfd/4/cfdv40.xsd';
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldExportTaxBaseToTrasladoElement</Name>
				<Source><![CDATA[
    protected boolean shouldExportTaxBaseToTrasladoElement()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>version</Name>
				<Source><![CDATA[
    protected str version()
    {
        return '4.0';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXmlDocumentInvoiceJour</Name>
				<Source><![CDATA[
    protected XmlElement createXmlDocumentInvoiceJour()
    {
        return this.appendFirstChildIfNotNull(super(), this.create_InformacionGlobalElement());
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ComprobanteElement</Name>
				<Source><![CDATA[
    protected XmlElement create_ComprobanteElement()
    {
        XmlElement comprobanteElement = super();

        comprobanteElement.setAttribute('Exportacion', EInvoiceXMLFormat_MX::formatInteger(eInvoiceJourMap.export()));

        return comprobanteElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ReceptorElement</Name>
				<Source><![CDATA[
    protected XmlElement create_ReceptorElement()
    {
        XmlElement receptorElement;

        if (eInvoiceJourMap.eInvoiceJour().isRetailCFDIGlobalEInvoice())
        {
            receptorElement = this.createElement('Receptor');
            receptorElement.setAttribute('Rfc', eInvoiceJourMap.invoiceRFC());

            if (eInvoiceJourMap.invoiceAccount() != eInvoiceJourMap.orderAccount())
            {
                receptorElement.setAttribute('Nombre', DirPartyTable::findRec(eInvoiceJourMap.getCustTable().Party).Name);
                receptorElement.setAttribute('UsoCFDI', eInvoiceJourMap.getCustTable().SATPurpose_MX);
            }
            else
            {
                receptorElement.setAttribute('Nombre', eInvoiceJourMap.invoicingName());
                receptorElement.setAttribute('UsoCFDI', eInvoiceJourMap.eInvoicePurpose());
            }

            receptorElement.setAttribute('DomicilioFiscalReceptor', eInvoiceJourMap.emitentZipCode());
            receptorElement.setAttribute('RegimenFiscalReceptor', eInvoiceJourMap.recipientTaxRegimeCode());
        }
        else
        {
            receptorElement = super();
            CustTable custTable =  eInvoiceJourMap.getCustTable();
            receptorElement.setAttribute('DomicilioFiscalReceptor', this.valueOfDomicilioFiscalReceptor());
            receptorElement.setAttribute('RegimenFiscalReceptor', eInvoiceJourMap.recipientTaxRegimeCode());
        }

        return receptorElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ConceptoElement</Name>
				<Source><![CDATA[
    protected XmlElement create_ConceptoElement()
    {
        XmlElement conceptoElement = super();

        conceptoElement.setAttribute('ObjetoImp', CFDISharedLogic_MX::getObjetoImpValue(conceptoElement.selectSingleNode(@'/cfdi:Impuestos', nsmgr), eInvoiceJourMap.getCustTable().CFDISkipIEPSTaxes_MX));

        return conceptoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ConceptoElementMarkupTrans</Name>
				<Source><![CDATA[
    protected XmlElement create_ConceptoElementMarkupTrans(MarkupTrans _markupTrans)
    {
        XmlElement conceptoElement = super(_markupTrans);

        conceptoElement.setAttribute('ObjetoImp', CFDISharedLogic_MX::getObjetoImpValue(conceptoElement.selectSingleNode(@'/cfdi:Impuestos', nsmgr), eInvoiceJourMap.getCustTable().CFDISkipIEPSTaxes_MX));

        return conceptoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_InformacionGlobalElement</Name>
				<Source><![CDATA[
    protected XmlElement create_InformacionGlobalElement()
    {
        XmlElement informacionGlobalElement = null;

        if (eInvoiceJourMap.eInvoiceJour().isRetailCFDIGlobalEInvoice())
        {
            RetailEInvoicePeriod_MX period = eInvoiceJourMap.eInvoiceJour().RefTableId == tableNum(RetailEInvoiceAggregatedStatement_MX)
            ? RetailEInvoiceAggregatedStatement_MX::findRecId(eInvoiceJourMap.eInvoiceJour().RefRecId).AggregationPeriod
            : RetailEInvoicePeriod_MX::Daily;

            informacionGlobalElement = this.format_InformacionGlobalElement(period);
        }
        else if (eInvoiceJourMap.eInvoiceJour().CFDIEInvoicePeriod_MX)
        {
            informacionGlobalElement = this.format_InformacionGlobalElement(eInvoiceJourMap.eInvoiceJour().CFDIEInvoicePeriod_MX);
        }

        return informacionGlobalElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>format_InformacionGlobalElement</Name>
				<Source><![CDATA[
    private XmlElement format_InformacionGlobalElement(RetailEInvoicePeriod_MX _period)
    {
        RetailEInvoiceMonth_MX month = RetailEInvoicePeriodDatesCalculator_MX::calculate(_period, DateTimeUtil::date(eInvoiceJourMap.documentDateTime())).getMonth();
        int year = DateTimeUtil::year(eInvoiceJourMap.documentDateTime());

        XmlElement informacionGlobalElement = this.createElement('InformacionGlobal');
        informacionGlobalElement.setAttribute('Periodicidad', EInvoiceXMLFormat_MX::formatInteger(_period));
        informacionGlobalElement.setAttribute('Meses', EInvoiceXMLFormat_MX::formatInteger(month));
        informacionGlobalElement.setAttribute('AÃ±o', EInvoiceXMLFormat_MX::formatInteger(year));

        return informacionGlobalElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendFirstChildIfNotNull</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends new element as first child.
    /// </summary>
    /// <param name = "_parentNode">The parent node.</param>
    /// <param name = "_childNode">The child node.</param>
    /// <returns>The parent node.</returns>
    protected XmlNode appendFirstChildIfNotNull(XmlNode _parentNode, XmlNode _childNode)
    {
        if(_parentNode && _childNode)
        {
            if (_parentNode.hasChildNodes())
            {
                _parentNode.insertBefore(_childNode, _parentNode.firstChild());
            }
            else
            {
                _parentNode.appendChild(_childNode);
            }
        }

        return _parentNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetReceptorNombre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if "Nombre" attribute should be added to the "Receptor" node.
    /// </summary>
    /// <returns>Always returns true.</returns>
    protected boolean shouldSetReceptorNombre()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetEmisorNombre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if "Nombre" attribute should be added to the "Emisor" node.
    /// </summary>
    /// <returns>Always returns true.</returns>
    protected boolean shouldSetEmisorNombre()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateForeignTradeElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if "ComercioExterior" element should be created.
    /// </summary>
    /// <returns>true if "ComercioExterior" element should be created; otherwise, false.</returns>
    protected boolean shouldCreateForeignTradeElement()
    {
        return eInvoiceJourMap.isForeignTrade()
            && eInvoiceJourMap.export() == CFDIExport_MX::Definitive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ReceptorForeignTradeElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Receptor node for the foreign trade.
    /// </summary>
    /// <returns>
    /// The created Receptor element.
    /// </returns>
    protected XmlElement create_ReceptorForeignTradeElement()
    {
        XmlElement receptor = super();

        if (eInvoiceJourMap.recipientRFC() == EInvoiceJourBaseMap_MX::ForeignerRFC)
        {
            this.setAttributeIfNotEmpty(receptor, 'NumRegIdTrib', eInvoiceJourMap.numRegIdTrib());
        }

        return receptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_RelacionadosElementsMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates map with "CfdiRelacionados" elements where key is the relation type.
    /// </summary>
    /// <param name = "_comprobanteElement">The parent "Comprobante" element.</param>
    /// <returns>Map with "CfdiRelacionados" elements.</returns>
    protected Map create_RelacionadosElementsMap(XmlElement _comprobanteElement)
    {
        XmlElement relacionadosElement;
        EInvoiceCFDIReference_MX reference;
        RefRecId eInvoiceRecId = eInvoiceJourMap.eInvoiceJour().RecId;

        Map relacionadosElementsMap = new Map(Types::Enum, Types::Class);

        while select reference
            where reference.eInvoiceJour_MX == eInvoiceRecId
        {
            if (relacionadosElementsMap.exists(reference.ReferenceType))
            {
                relacionadosElement = relacionadosElementsMap.lookup(reference.ReferenceType);
            }
            else
            {
                relacionadosElement = this.createElement('CfdiRelacionados');
                relacionadosElement.setAttribute('TipoRelacion', strFmt('0%1', enum2int(reference.ReferenceType)));
                relacionadosElementsMap.add(reference.ReferenceType, relacionadosElement);
            }

            XmlElement relacionadoElement = this.create_RelacionadoElement(reference);
            relacionadosElement.appendChild(relacionadoElement);
        }

        return relacionadosElementsMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisplayExento</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if "Impuestos" attribute should be added to the "Comprobante" node when rate type is "Exento".
    /// </summary>
    /// <param name = "_hasRegularTax">Has regular tax in tax transactions list</param>
    /// <param name = "_isLineSection">Is it a line section in an XML document</param>
    /// <param name = "_hasTaxTrans">Has any tax transactions</param>
    /// <returns>true if "Impuestos" attribute should be added to the "Comprobante" node; otherwise, false.</returns>
    protected boolean isDisplayExento(boolean _hasRegularTax, boolean _isLineSection, boolean _hasTaxTrans)
    {
        if (!_hasRegularTax && !_isLineSection && _hasTaxTrans)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueOfDomicilioFiscalReceptor</Name>
				<Source><![CDATA[
    private str valueOfDomicilioFiscalReceptor()
    {
        Rfc_MX recipientRfc = eInvoiceJourMap.recipientRFC();
        boolean isRecipientForeignerRFC = recipientRfc == eInvoiceJourBaseMap_MX::ForeignerRFC;
        boolean isRecipientInternalTransferRFC = recipientRfc == eInvoiceJourBaseMap_MX::InternalTransferRFC;
        boolean isLugarExpedicion = isRecipientForeignerRFC || isRecipientInternalTransferRFC || isTraslado;

        return isLugarExpedicion ? this.getLugarExpedicion() : eInvoiceJourMap.invoiceZipCode();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>