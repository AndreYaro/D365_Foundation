<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayIncomeTaxTransferReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayIncomeTaxTransferReport extends OXMLExcelReport_RPay implements BatchRetryable
{
    RPayTmpCalculate            payTmpCalculate;
    DialogField                 fieldReportType;
    DialogField                 fieldPeriodStartDate;
    DialogField                 fieldPeriodEndDate;
    DialogField                 fieldSheetNum;
    DialogField                 fieldSheetPayPeriod;
    int                         stateCurrent;

    #DEFINE.sheetNumExpectedFieldName("Fld4_1")

    RPayIncomeTaxTransferType   reportType;
    StartDate                   periodStartDate;
    EndDate                     periodEndDate;
    RPaySheetNum                sheetNum;
    ReportPeriod_RU             sheetPayPeriod;
    Counter                     emplNum;
    RPayAmount                  subTotalAmount;
    RPayAmount                  totalAmount;
    ReportPeriod_RU             currentPayPeriod;

    #define.FileName('NDFL Trsansfered')
    #define.WidthPage(8)

    #define.ReportHeader('Header')
    #define.TableHeader('TableHeader')
    #define.Body('Body')
    #define.Footer('Footer')
    #define.SubTotal('SubTotal')
    #define.NewPage('NewPage') //pseudo section used to define new page action

    #define.StateStart  (0)
    #define.StatePrint  (1)
    #define.StateEnd    (2)

    #define.CurrentVersion(1)
    #localmacro.CurrentList
          reportType,
          periodStartDate,
          periodEndDate,
          sheetNum,
          sheetPayPeriod
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15)

        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkDocument()
    {
        if (! WinAPI::fileExists_RU(RPayIncomeTaxTransferReport::fullTemplateName()))
            return checkFailed(strFmt("@SYS60367", RPayIncomeTaxTransferReport::fullTemplateName()));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        this.initSectionMap();
        this.initTmpData();

        this.setCurrentWorksheetNum(1, #WidthPage);

        stateCurrent = #StateStart;

        while select payTmpCalculate
            order by TransDate, EmplId
        {
            this.handleAction(this.defineActionSeq());
        }

        if (this.isSectionPrinted())
        {
            this.handleAction(this.defineActionSeq());
            this.setPrintArea();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2StrDot</Name>
				<Source><![CDATA[
    private str date2StrDot(date _date, boolean _long = true)
    {
        Days d = dayOfMth(_date);
        Months m = mthOfYr(_date);
        Yr    y = year(_date);
        str ret;

        if (_long)
        {
            ret += ((d > 9) ? '' : '0') + int2str(d) + '.';
        }

        ret += ((m > 9) ? '' : '0') + int2str(m) + '.';
        ret += int2str(y);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineActionSeq</Name>
				<Source><![CDATA[
    private container defineActionSeq()
    {
        container con;

        if (stateCurrent == #StateStart)
        {
            con = [#ReportHeader, #TableHeader, #Body];

            stateCurrent = #StatePrint;
            currentPayPeriod = endmth(payTmpCalculate.TransDate);
        }
        else if (stateCurrent == #StatePrint)
        {
            if (this.isNewPage())
            {
                con = [#NewPage, #TableHeader];
            }

            if (payTmpCalculate.RecId == 0)
            {
                con = [#SubTotal, #Footer];
                stateCurrent = #StateEnd;
            }
            else if (currentPayPeriod != endmth(payTmpCalculate.TransDate))
            {
                con = [#SubTotal, #Body];
            }
            else
            {
                con += [#Body];
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = super();

        fieldReportType = dialog.addFieldValue(enumStr(RPayIncomeTaxTransferType), reportType);

        dialog.addGroup("@SYS4080");
        fieldPeriodStartDate = dialog.addFieldValue(extendedTypeStr(StartDate), periodStartDate);
        fieldPeriodEndDate   = dialog.addFieldValue(extendedTypeStr(EndDate), periodEndDate);

        dialog.addGroup("@RUP2714");
        fieldSheetNum        = dialog.addFieldValue(extendedTypeStr(RPaySheetNum), sheetNum);
        if (fieldSheetNum.name() != #sheetNumExpectedFieldName)
        {
            throw error(strFmt("@SYS79285", fieldSheetNum.name(), #sheetNumExpectedFieldName));
        }

        fieldSheetPayPeriod  = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), sheetPayPeriod);
        fieldSheetPayPeriod.allowEdit(false);

        dialog.allowUpdateOnSelectCtrl(true);
        this.dialogSelectCtrl(true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase dialog)
    {
        super(dialog);

        dialog.formRun().controlMethodOverload(true);
        dialog.formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    void dialogSelectCtrl(boolean _forceCall = false)
    {
        super();

        if (_forceCall || reportType != fieldReportType.value())
        {
            reportType = fieldReportType.value();

            fieldPeriodStartDate.allowEdit(reportType == RPayIncomeTaxTransferType::Dates);
            fieldPeriodStartDate.control().mandatory(reportType == RPayIncomeTaxTransferType::Dates);

            if (reportType != RPayIncomeTaxTransferType::Dates)
            {
                fieldPeriodStartDate.value(dateNull());
            }

            fieldPeriodEndDate.allowEdit(reportType == RPayIncomeTaxTransferType::Dates);
            fieldPeriodEndDate.control().mandatory(reportType == RPayIncomeTaxTransferType::Dates);

            if (reportType != RPayIncomeTaxTransferType::Dates)
            {
                fieldPeriodEndDate.value(dateNull());
            }

            fieldSheetNum.allowEdit(reportType == RPayIncomeTaxTransferType::PaySheets);
            fieldSheetNum.control().mandatory(reportType == RPayIncomeTaxTransferType::PaySheets);

            if (reportType != RPayIncomeTaxTransferType::PaySheets)
            {
                fieldSheetNum.value('');
                fieldSheetPayPeriod.value(dateNull());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return #FileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + curUserId() + '_' + strRem(DateTimeUtil::toStr(DateTimeUtil::utcNow()), ':');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    private void fillBody()
    {
        RPayAmount              incomeAmount;
        RPayAmount              deductTaxAmount;
        ReportPeriod_RU         payPeriod;
        container               taxEmplSum;

        payPeriod = endmth(payTmpCalculate.TransDate);

        taxEmplSum = RPayTaxEmplSum::getTaxSumTotal(payTmpCalculate.EmplId,
                                                    endmth(payTmpCalculate.TransDate),
                                                    endmth(payTmpCalculate.TransDate));
        incomeAmount    = conPeek(taxEmplSum, 1);
        deductTaxAmount = conPeek(taxEmplSum, 4);

        ++emplNum;

        this.insertValueToSection('Num', emplNum);
        this.insertValueToSection('EmplId', payTmpCalculate.EmplId);
        this.insertValueToSection('FIO', payTmpCalculate.Txt);
        this.insertValueToSection('Period', this.date2StrDot(payTmpCalculate.TransDate, false));
        this.insertValueToSection('DismissDate', payTmpCalculate.TransDate);
        this.insertValueToSection('WholeAmount', RPayTrans::calculateChargeType(RPayChargeType::AddSum, payPeriod, payTmpCalculate.EmplId));
        this.insertValueToSection('BaseAmount', incomeAmount);
        this.insertValueToSection('TaxAmount', deductTaxAmount);

        subTotalAmount += deductTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #ReportHeader:
                this.fillReportHeader();
                break;
            case #TableHeader:
                this.fillTableHeader();
                break;
            case #Body:
                this.fillBody();
                break;
            case #NewPage:
                this.newPage();
                break;
            case #Footer:
                this.fillFooter();
                break;
            case #SubTotal:
                this.fillSubTotal();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooter</Name>
				<Source><![CDATA[
    private void fillFooter()
    {
        this.insertValueToSection('TotalTxt', "@GLS100890");
        this.insertValueToSection('TotalAmount', totalAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    private void fillReportHeader()
    {
        this.insertValueToSection('ReportingPeriod', this.periodStr());
        this.insertValueToSection('CompanyName', CompanyInfo::find().Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSubTotal</Name>
				<Source><![CDATA[
    private void fillSubTotal()
    {
        this.insertValueToSection('SubTotalTxt', strFmt('Итого по периоду %1:', this.date2StrDot(currentPayPeriod, false)));
        this.insertValueToSection('SubtotalAmount', subTotalAmount);
        totalAmount += subTotalAmount;
        subTotalAmount = 0;
        currentPayPeriod = endmth(payTmpCalculate.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableHeader</Name>
				<Source><![CDATA[
    private void fillTableHeader()
    {
        //do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld4_1_lookup</Name>
				<Source><![CDATA[
    // this is a special name for method
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void fld4_1_lookup()
    {
        TableLookup_RU          sysTableLookup       = TableLookup_RU::newParameters(tableNum(RPaySheetTable), fieldSheetNum.fieldControl());
        Query                   query                = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(RPaySheetTable));
        RPaySheetTable  paySheetTable;

        sysTableLookup.addLookupfield(fieldNum(RPaySheetTable, PaySheetNum));
        sysTableLookup.addLookupfield(fieldNum(RPaySheetTable, Name));
        sysTableLookup.addLookupfield(fieldNum(RPaySheetTable, PayPeriod));
        sysTableLookup.addLookupfield(fieldNum(RPaySheetTable, TransDate));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();

        if (sysTableLookup.getFoundCursor())
        {
            paySheetTable = sysTableLookup.getFoundCursor();
            fieldSheetPayPeriod.value(paySheetTable.PayPeriod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            reportType      = fieldReportType.value();
            periodStartDate = fieldPeriodStartDate.value();
            periodEndDate   = fieldPeriodEndDate.value();
            sheetNum        = fieldSheetNum.value();
            sheetPayPeriod  = fieldSheetPayPeriod.value();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAction</Name>
				<Source><![CDATA[
    private void handleAction(container _actions)
    {
        int i;

        for (i = 1; i <= conLen(_actions); ++i)
        {
            if (conPeek(_actions, i) == #NewPage)
            {
                this.newPage();
            }
            else
            {
                this.execute(conPeek(_actions, i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#ReportHeader);
        this.addSection(#TableHeader);
        this.addSection(#Body);
        this.addSection(#Footer);
        this.addSection(#SubTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpData</Name>
				<Source><![CDATA[
    private void initTmpData()
    {
        RPayHistory             payHistory;
        RHRMEmplTable           emplTable;
        RPaySheetTable          paySheetTable;
        RPaySheetTrans          paySheetTrans;

        void insertRecord()
        {
            payTmpCalculate.clear();
            payTmpCalculate.EmplId    = emplTable.EmployeeId;
            payTmpCalculate.Txt       = emplTable.personTable().fio();
            payTmpCalculate.TransDate = payHistory.StartDate;
            payTmpCalculate.insert();
        }

        if (reportType == RPayIncomeTaxTransferType::Dates)
        {
            while select StartDate from payHistory
                order by StartDate
                where payHistory.OperationType  == RHRMJournalType::Dismiss &&
                      payHistory.StartDate      >= periodStartDate          &&
                      payHistory.StartDate      <= periodEndDate
                join EmployeeId, rhrmPersonTable from emplTable
                    order by EmployeeId
                    where emplTable.EmployeeId  == payHistory.Number
            {
                insertRecord();
            }
        }
        else
        {
            while select RecId from paySheetTrans
                join RecId from paySheetTable
                    where paySheetTable.RecId       == paySheetTrans.SheetTableRecId &&
                          paySheetTable.PaySheetNum == sheetNum                      &&
                          paySheetTable.PayPeriod   == sheetPayPeriod
                join rhrmPersonTable, EmployeeId from emplTable
                    order by EmployeeId
                    where emplTable.EmployeeId == paySheetTrans.Emplid
            {
                payHistory = RPayHistory::findLastOperation(emplTable.EmployeeId, RHRMJournalType::Dismiss, endmth(sheetPayPeriod) + 1);

                if (payHistory && payHistory.StartDate >= dateStartMth(sheetPayPeriod))
                {
                    insertRecord();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewPage</Name>
				<Source><![CDATA[
    private boolean isNewPage()
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(#Body);

        return (pageHeight - currentHeight < requiredHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPage</Name>
				<Source><![CDATA[
    private void newPage()
    {
        document.insertPageBreak(currentRow);
        currentHeight = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodStr</Name>
				<Source><![CDATA[
    private str periodStr()
    {
        if (reportType == RPayIncomeTaxTransferType::Dates)
        {
            return strFmt("@SYS76785",
                          this.date2StrDot(periodStartDate),
                          this.date2StrDot(periodEndDate));
        }
        else
        {
            return strFmt("@SYS76785",
                          this.date2StrDot(dateStartMth(sheetPayPeriod)),
                          this.date2StrDot(endmth(sheetPayPeriod)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(NDFLTransferred);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (super())
        {
            if (reportType == RPayIncomeTaxTransferType::Dates)
            {
                if (! periodStartDate)
                {
                    ret = checkFailed(strFmt("@GLS107196", fieldPeriodStartDate.fieldControl().labelText()));
                }

                if (! periodEndDate)
                {
                    ret = checkFailed(strFmt("@GLS107196", fieldPeriodEndDate.fieldControl().labelText()));
                }

                if (periodStartDate && periodEndDate && periodStartDate > periodEndDate)
                {
                    ret = checkFailed(strFmt("@RUP980",
                                             fieldPeriodStartDate.fieldControl().labelText(),
                                             fieldPeriodEndDate.fieldControl().labelText()));
                }
            }
            else if (reportType == RPayIncomeTaxTransferType::PaySheets)
            {
                if (! sheetNum)
                {
                    ret = checkFailed(strFmt("@GLS107196", fieldSheetNum.fieldControl().labelText()));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP2526";
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullTemplateName</Name>
				<Source><![CDATA[
    #define.reportName("NDFL_Transfered.xlt")
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str fullTemplateName()
    {
        return GlobalEx::templateFolder_W() + #reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayIncomeTaxTransferReport incomeTaxTransferReport = new RPayIncomeTaxTransferReport();

        if (incomeTaxTransferReport.prompt())
        {
            incomeTaxTransferReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>