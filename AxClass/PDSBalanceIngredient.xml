<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSBalanceIngredient</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PDSBalanceIngredient</c> class provides potency balancing logic for the ingredients on a production order.
/// </summary>
public class PDSBalanceIngredient
{
    ProdId                  prodId;
    PDSTmpBatchSelection    activeIng;
    Set                     result;

    int                     numActive;

    Map                     noneIngList;

    BOMQty                  totalBomQty;
    BOMQty                  runBalQty;

    #define.PosInventTransId(1)
    #define.PosUnNormalizedQty(5)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>balanceQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of items and quantities adjusted as necessary for balancing.
    /// </summary>
    /// <returns>
    /// A <c>Set</c> of containers with:
    ///   <list type="bullet">
    ///     <item><description>The inventory transaction ID (<c>InventTransId</c>).</description></item>
    ///     <item><description>The item ID.</description></item>
    ///     <item><description>The inventory quantity.</description></item>
    ///     <item><description>The inventory batch ID.</description></item>
    ///     <item><description>The balanced quantity based on the potency or the original quantity if potency does not apply.</description></item>
    ///   </list>
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Thrown if not overridden by a sub-class.
    /// </exception>
    public Set balanceQty()
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIngredientList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>Map</c> with ingredient item and quantity data on a production order of the appropriate ingredient type.
    /// </summary>
    /// <param name="_prodId">
    /// The <c>ProdId</c> value for the production order.
    /// </param>
    /// <returns>
    /// A <c>Map</c> containing the ingredient item and quantity data. The key is the <c>RecId</c> of the record of the
    /// <c>ProdBOM</c> table and the value is a container with:
    ///   <list type="bullet">
    ///     <item><description>The item ID.</description></item>
    ///     <item><description>The inventory batch ID and may be blank if there is no batch ID for the item.</description></item>
    ///     <item><description>The inventory quantity.</description></item>
    ///     <item><description>The inventory transaction ID (<c>InventTransId</c>).</description></item>
    ///     <item><description>The balanced quantity based on potency.</description></item>
    ///   </list>
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Thrown if not overridden by a sub-class.
    /// </exception>
    public Map getIngredientList(ProdId _prodId)
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalizeQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the normalized quantity for the standard potency value.
    /// </summary>
    /// <param name="_inventBatchId">
    /// The batch actually used which provides the actual potency.
    /// </param>
    /// <param name="_qty">
    /// The material quantity used.
    /// </param>
    /// <param name="_record">
    /// The record of either a <c>ProdBOM</c> table or an <c>InventBatch</c> table for the transaction.
    /// </param>
    /// <returns>
    /// The normalized quantity for the standard potency.
    /// </returns>
    public Qty normalizeQty(
        InventBatchId   _inventBatchId,
        Qty             _qty,
        Common          _record)
    {
        return _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveIng</Name>
				<Source><![CDATA[
    public PDSTmpBatchSelection parmActiveIng(PDSTmpBatchSelection _active = activeIng)
    {
        if (!prmisdefault(_active))
        {
            activeIng = _active;
        }

        return activeIng;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNoneIngList</Name>
				<Source><![CDATA[
    public Map parmNoneIngList(Map _none = noneIngList)
    {
        if (!prmisdefault(_none))
        {
            noneIngList = _none;
        }

        return noneIngList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdId</Name>
				<Source><![CDATA[
    public ProdId parmProdId(ProdId _prodId = prodId)
    {
        if (!prmisdefault(_prodId))
        {
            prodId = _prodId;
        }

        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResult</Name>
				<Source><![CDATA[
    public Set parmResult(Set _result = result)
    {
        if (!prmisdefault(_result))
        {
            result = _result;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processActiveNone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes balancing logic for <c>Active</c> and <c>None</c> ingredient items on a production order.
    /// </summary>
    /// <param name="_prodId">
    /// The <c>ProdId</c> value for the production order.
    /// </param>
    /// <returns>
    /// A <c>Set</c> of containers with:
    ///   <list type="bullet">
    ///     <item><description>The inventory transaction ID (<c>InventTransId</c>).</description></item>
    ///     <item><description>The item ID.</description></item>
    ///     <item><description>The inventory quantity.</description></item>
    ///     <item><description>The inventory batch ID.</description></item>
    ///     <item><description>The balanced quantity based on the potency or the original quantity if potency does not apply.</description></item>
    ///   </list>
    /// </returns>
    public Set processActiveNone(ProdId _prodId)
    {
        PDSBalanceIngredient    balanceIng;

        balanceIng = PDSBalanceIngredient::selectIngredient(PDSIngredientTypeEnum::Active);
        balanceIng.parmActiveIng(activeIng);
        result = balanceIng.balanceQty();

        balanceIng = PDSBalanceIngredient::selectIngredient(PDSIngredientTypeEnum::None);
        balanceIng.parmNoneIngList(noneIngList);
        balanceIng.parmResult(result);
        result = balanceIng.balanceQty();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCompensating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes balancing logic for the compensating ingredient type items on a production order.
    /// </summary>
    /// <param name="_prodId">
    /// The <c>ProdId</c> value for the production order.
    /// </param>
    /// <returns>
    /// A <c>Set</c> of containers with:
    ///   <list type="bullet">
    ///     <item><description>The inventory transaction ID (<c>InventTransId</c>).</description></item>
    ///     <item><description>The item ID.</description></item>
    ///     <item><description>The inventory quantity.</description></item>
    ///     <item><description>The inventory batch ID.</description></item>
    ///     <item><description>The balanced quantity based on the potency or the original quantity if potency does not apply.</description></item>
    ///   </list>
    /// </returns>
    public Set processCompensating(ProdId _prodId)
    {
        PDSBalanceIngredient    balanceIng;

        balanceIng = PDSBalanceIngredient::selectIngredient(PDSIngredientTypeEnum::Compensating);
        balanceIng.parmActiveIng(activeIng);
        balanceIng.parmProdId(_prodId);
        balanceIng.parmResult(result);
        result = balanceIng.balanceQty();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFiller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes balancing logic for the filler ingredient type items on a production order.
    /// </summary>
    /// <param name="_prodId">
    /// The <c>ProdId</c> value for the production order.
    /// </param>
    /// <returns>
    /// A <c>Set</c> of containers with:
    ///   <list type="bullet">
    ///     <item><description>The inventory transaction ID (<c>InventTransId</c>).</description></item>
    ///     <item><description>The item ID.</description></item>
    ///     <item><description>The inventory quantity.</description></item>
    ///     <item><description>The inventory batch ID.</description></item>
    ///     <item><description>The balanced quantity based on the potency or the original quantity if potency does not apply.</description></item>
    ///   </list>
    /// </returns>
    public Set processFiller(ProdId _prodId)
    {
        PDSBalanceIngredient    balanceIng;

        balanceIng = PDSBalanceIngredient::selectIngredient(PDSIngredientTypeEnum::Filler);
        balanceIng.parmProdId(_prodId);
        balanceIng.parmResult(result);
        result = balanceIng.balanceQty();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the quantity totals for the current result set.
    /// </summary>
    public void setTotals()
    {
        ProdBom             lclProdBom;
        SetEnumerator       resultIdx = result.getEnumerator();
        Container           con;
        Qty                 balancedQty;

        totalBomQty = 0;
        runBalQty   = 0;

        select sum(QtyBomCalc)
            from lclProdBom
            where lclProdBom.ProdId == prodId;

        totalBomQty = lclProdBom.QtyBomCalc;

        while (resultIdx.moveNext())
        {
            con             = resultIdx.current();
            balancedQty     = conpeek(con, #PosUnNormalizedQty);
            runBalQty      += balancedQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PDSBalanceIngredient construct()
    {
        return new PDSBalanceIngredient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalizeActiveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the normalized quantity for the standard potency value for the active ingredient.
    /// </summary>
    /// <param name="_itemId">
    /// The batch enabled item.
    /// </param>
    /// <param name="_inventBatchId">
    /// The batch actually used which provides the actual potency.
    /// </param>
    /// <param name="_qty">
    /// The material quantity used.
    /// </param>
    /// <returns>
    /// The normalized quantity for the standard potency.
    /// </returns>
    public static Qty normalizeActiveQty(
        ItemId          _itemId,
        InventBatchId   _inventBatchId,
        Qty             _qty)
    {
        InventBatch inventBatch = InventBatch::find(_inventBatchId, _itemId);
        return PDSBalanceIngredient::selectIngredient(PDSIngredientTypeEnum::Active).normalizeQty(_inventBatchId, _qty, inventBatch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs ingredient balancing for the specific production order.
    /// </summary>
    /// <param name="_active">
    /// The buffer for the <c>PDSTmpBatchSelection</c> table with the selected active ingredients.
    /// </param>
    /// <param name="_prodId">
    /// The production order ID.
    /// </param>
    /// <returns>
    /// A <c>Set</c> of containers with:
    ///   <list type="bullet">
    ///     <item><description>The inventory transaction ID (<c>InventTransId</c>).</description></item>
    ///     <item><description>The item ID.</description></item>
    ///     <item><description>The inventory quantity.</description></item>
    ///     <item><description>The inventory batch ID.</description></item>
    ///     <item><description>The balanced quantity based on the potency or the original quantity if potency does not apply.</description></item>
    ///   </list>
    /// </returns>
    public static Set process(
        PDSTmpBatchSelection    _active,
        ProdId                  _prodId)
    {
        PDSBalanceIngredient    balance;
        Set                     result = new Set(Types::container);
        ProdJournalTable        journal;

        select firstonly journal
            where journal.ProdId        == _prodId
                && journal.JournalType  == ProdJournalType::Picklist;

        if (journal)
        {
            throw error("@PSC232");
        }

        balance = PDSBalanceIngredient::construct();
        balance.parmActiveIng(_active);
        balance.parmNoneIngList(PDSBalanceIngredient::selectIngredient(PDSIngredientTypeEnum::None).getIngredientList(_prodId));
        result = balance.processActiveNone(_prodId);

        balance.parmResult(result);
        result = balance.processCompensating(_prodId);

        balance.parmResult(result);
        result = balance.processFiller(_prodId);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectIngredient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>PDSBalanceIngredient</c> class.
    /// </summary>
    /// <param name="_type">
    /// The ingredient type identifying the specific type of ingredients to process.
    /// </param>
    /// <returns>
    /// A new instance of the appropriate derived class of the <c>PDSBalanceIngredient</c> class hierarchy.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Thrown if <paramref name="_type"/> is not a known enumerate value.
    /// </exception>
    public static PDSBalanceIngredient selectIngredient(PDSIngredientTypeEnum _type)
    {
        PDSIngredientTypeFactoryAttribute attribute = new PDSIngredientTypeFactoryAttribute(_type);
        PDSBalanceIngredient instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(PDSBalanceIngredient), attribute) as PDSBalanceIngredient;

        if (!instance ||
            classIdGet(instance) == classNum(PDSBalanceIngredient)) //Only support derived classes
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }
        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>