<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCImportComponentAttributeHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PCImportComponentAttributeHandler extends PCImportModelNodeHandler
{
    EcoResAttribute             oldAttribute;
    EcoResAttribute             attribute;
    EcoResCategoryAttribute     categoryAttribute;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>categoryAttributeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the ID of the <c>EcoResCategoryAttribute</c> record created while importing data.
    /// </summary>
    /// <returns>
    /// The RecId.
    /// </returns>
    public RefRecId categoryAttributeId()
    {
        return categoryAttribute.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearState</Name>
				<Source><![CDATA[
    protected void clearState()
    {
        super();

        attribute.clear();

        oldAttribute.clear();
        categoryAttribute.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>importData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a prefix to an old version of the attribute of the same name if it exists, then creates the
    /// <c>EcoResAttribute</c>, <c>EcoResCategoryAttribute</c> and <c>PCSolverVariable</c>, updates the references
    /// to the attribute and deletes the old version. The new record is cached for easier search.
    /// </summary>
    protected void importData()
    {
        PCSolverVariable        solverVariable;

        PCImportXmlDocumentHandler    root    = this.root();
        PCImportComponentHandler      parent  = this.parent();

        this.copyField(fieldStr(EcoResAttribute, Name));

        attribute.AttributeType         = root.importedAttributeTypes().lookup(this.getFieldByName(#attributeType));
        attribute.AttributeModifier     = EcoResAttributeModifier::Component;
        solverVariable.Name             = this.getFieldByName(#solverName);
        solverVariable.IncludeInReuse   = this.getIntFieldByName(fieldStr(PCSolverVariable, IncludeInReuse));

        // Update the old record, adding a prefix to the name.
        select forupdate firstonly oldAttribute
            where oldAttribute.Name == attribute.Name
            join RecId from categoryAttribute
                where categoryAttribute.Attribute == oldAttribute.RecId
                &&    categoryAttribute.Category  == parent.currentComponentBeingUpdated().RecId;

        boolean reuseOldAttribute;
        if (oldAttribute.RecId != 0)
        {
            if (this.areAttributeDataIdentical(attribute, oldAttribute))
            {
                reuseOldAttribute = true;
            }
            else
            {
                oldAttribute.Name = #tempImportPrefix + int642str(oldAttribute.RecId);
                oldAttribute.update();
            }
        }

        PCSolverVariable oldSolverVariable;
        if (reuseOldAttribute)
        {
            attribute.data(oldAttribute);
            oldSolverVariable = PCSolverVariable::findByAttribute(attribute.RecId, true);
        }
        else
        {
            attribute.insert();
        }

        if (oldSolverVariable)
        {
            oldSolverVariable.Name = solverVariable.Name;
            oldSolverVariable.IncludeInReuse = solverVariable.IncludeInReuse;
            oldSolverVariable.update();
        }
        else
        {
            solverVariable.Attribute = attribute.RecId;
            solverVariable.insert();
        }

        categoryAttribute.Attribute = attribute.RecId;
        categoryAttribute.Category  = this.parent().recordRecId();
        categoryAttribute.Modifier  = EcoResCategoryAttributeModifier::Component;
        categoryAttribute.insert();

        // updating references
        if (oldAttribute.RecId != 0)
        {
            this.updateAttributeReferences(reuseOldAttribute);

            if (!reuseOldAttribute)
            {
                oldAttribute = EcoResAttribute::find(oldAttribute.RecId, true);
                oldAttribute.delete();
            }
        }

        parent.componentAttributes().insert(attribute.Name, categoryAttribute.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>areAttributeDataIdentical</Name>
				<Source><![CDATA[
    private boolean areAttributeDataIdentical(EcoResAttribute _oldAttribute, EcoResAttribute _newAttribute)
    {
        return _newAttribute.Name == _oldAttribute.Name
            && _newAttribute.AttributeType == _oldAttribute.AttributeType
            && _newAttribute.AttributeModifier == _oldAttribute.AttributeModifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOldAttributeReferencedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes data previously referenced by the attribute being updated.
    /// </summary>
    /// <remark>
    /// This data will be recreated by the import process.
    /// </remark>
    protected void deleteOldAttributeReferencedData()
    {
        EcoResAttributeTranslation attributeTranslation;
        delete_from attributeTranslation
            where attributeTranslation.Attribute == oldAttribute.RecId;

        EcoResAttributeDefaultValue attributeDefaultValue;
        delete_from attributeDefaultValue
            where attributeDefaultValue.Attribute == oldAttribute.RecId;

        PCImportComponentHandler parent = this.parent();
        EcoResCategoryAttribute oldCategoryAttribute;
        delete_from oldCategoryAttribute
                where oldCategoryAttribute.Attribute == oldAttribute.RecId
                    && oldCategoryAttribute.Category  == parent.currentComponentBeingUpdated().RecId
                    && oldCategoryAttribute.Modifier == EcoResCategoryAttributeModifier::Component;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    protected void postProcess()
    {
        PCImportComponentHandler parent = this.parent();

        parent.updateAttributePaths(this.node().nextSibling());
    }

]]></Source>
			</Method>
			<Method>
				<Name>record</Name>
				<Source><![CDATA[
    public Common record(boolean _suppressValidation = false)
    {
        return attribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAttributeReferences</Name>
				<Source><![CDATA[
    private void updateAttributeReferences(boolean _reuseOldAttribute)
    {
        // tables where references have to be updated on delete
        EcoResAttributeValue     attributeValue;
        PCImportComponentHandler parent = this.parent();

        // UI
        PCComponentAttributeGroupCategoryAttr   componentAttributeGroupAttribute;

        if (!_reuseOldAttribute)
        {
            update_recordset attributeValue
                setting Attribute = attribute.RecId
                where attributeValue.Attribute == oldAttribute.RecId;
        }

        update_recordset componentAttributeGroupAttribute
            setting CategoryAttribute = categoryAttribute.RecId
            where componentAttributeGroupAttribute.CategoryAttribute ==
                  EcoResCategoryAttribute::findOrCreateCategoryAttribute(parent.currentComponentBeingUpdated().RecId, oldAttribute.RecId, EcoResCategoryAttributeModifier::Component);

        if (_reuseOldAttribute)
        {
            this.deleteOldAttributeReferencedData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCImportComponentAttributeHandler construct()
    {
        return new PCImportComponentAttributeHandler();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>