<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillingClassificationReportManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustBillingClassificationReportManager</c> class provides assistance for the report classes
/// that are using a multi-select lookup for billing classification.
/// </summary>
class CustBillingClassificationReportManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBillingclassMultiSelectLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a multi select lookup for billing classification dialog field.
    /// </summary>
    /// <param name="_dialog">
    /// An instance of a report dialog box.
    /// </param>
    /// <param name="_dialogField">
    /// An instance of a dialog field of billing classification.
    /// </param>
    public static void createBillingclassMultiSelectLookup(
        Dialog      _dialog,
        DialogField _dialogField)
    {
        FormStringControl   fsc;

        fsc = _dialogField.control();
        fsc.displayLength(15);

        SysLookupMultiSelectCtrl::construct(_dialog.formRun(), _dialogField.control(), queryStr(CustBillingClassificationLookup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBillingClassificationRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a range containing the record IDs corresponding to the billing classifications specified.
    /// </summary>
    /// <param name="_billingClassification">
    /// A list of billing classifications
    /// </param>
    /// <param name="_inclTransWithNoBillingClass">
    /// A flag to select records without billing classification.
    /// </param>
    /// <returns>
    /// Returns a range of billing classification record IDs.
    /// </returns>
    public static str getBillingClassificationRange(
        List    _billingClassification,
        NoYes   _inclTransWithNoBillingClass)
    {
        str                         billingClassRange = '';
        Query                       query;
        QueryRun                    queryRun;
        QueryBuildDataSource        qbds;
        QueryBuildRange             qbr;
        ListEnumerator              listEnumerator;
        CustBillingClassification   custBillingClassification;

        listEnumerator = _billingClassification.getEnumerator();

        while (listEnumerator.moveNext())
        {
            billingClassRange = strFmt("%1%2, ", billingClassRange, listEnumerator.current());
        }

        query = new Query();
        qbds = query.addDataSource(tableNum(CustBillingClassification));
        qbr = qbds.addRange(fieldNum(CustBillingClassification, BillingClassification));
        qbr.value(billingClassRange);

        queryRun = new QueryRun(query);

        billingClassRange = '';

        while (queryRun.next())
        {
            custBillingClassification = queryRun.get(tableNum(CustBillingClassification));
            billingClassRange = strFmt("%1%2, ", billingClassRange, custBillingClassification.RecId);
        }

        if (_inclTransWithNoBillingClass == NoYes::Yes)
        {
            billingClassRange = strFmt("%1%2", billingClassRange, '0');
        }
        else
        {
            billingClassRange = subStr(billingClassRange, 1, strLen(billingClassRange) - 2);
        }

        return billingClassRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPublicSectorScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the SSRS report using the billing classification list is running a Public Sector scenario.
    /// </summary>
    /// <param name="_listBillingClassification">
    /// A list of selected billing classifications.
    /// </param>
    /// <returns>
    /// true if it is not executed from test code and Public Sector configuration key is ON and at least one billing classification exists; false otherwise.
    /// </returns>
    public static boolean isPublicSectorScenario(List _listBillingClassification)
    {
        boolean         isNoValueSelected = false;
        ListEnumerator  listEnumeratorBillingClassification;

        if (_listBillingClassification && !_listBillingClassification.empty())
        {
            listEnumeratorBillingClassification = _listBillingClassification.getEnumerator();
            listEnumeratorBillingClassification.moveNext();
            isNoValueSelected = listEnumeratorBillingClassification.current() == SysLabel::labelId2String(literalStr("@GLS223107"));
        }

        return !isNoValueSelected && CustParameters::isBillingClassificationEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBillingClassificationRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets ranges of billing classifications selected.
    /// </summary>
    /// <param name="_queryBuildDataSource">
    /// The <c>QueryBuildDatasource</c> object of BillingClassification records.
    /// </param>
    /// <param name="_billingClassValues">
    /// A list of selected billing classification values.
    /// </param>
    /// <param name="_inclTransWithNoBillingClass">
    /// The value of the <c>NoYes</c> field to select records without billing classification.
    /// </param>
    /// <param name="_billingClassificationRangeFieldId">
    /// The field identification of the billing classification field.
    /// </param>
    public static void setBillingClassificationRanges(
        QueryBuildDataSource    _queryBuildDataSource,
        List                    _billingClassValues,
        NoYes                   _inclTransWithNoBillingClass,
        FieldId                 _billingClassificationRangeFieldId = 0)
    {
        ListEnumerator  listEnumerator;
        QueryBuildRange queryBuildRange;
        container       conRangeCriteria;
        str             range = '';

        if (_billingClassValues && !_billingClassValues.empty())
        {
            listEnumerator = _billingClassValues.getEnumerator();

            if (_billingClassificationRangeFieldId)
            {
                queryBuildRange = SysQuery::findOrCreateRange(_queryBuildDataSource,_billingClassificationRangeFieldId);

                while (listEnumerator.moveNext())
                {
                    conRangeCriteria += CustBillingClassification::findByBillingClassification(listEnumerator.current()).RecId;
                }

                if (conLen(conRangeCriteria) && _inclTransWithNoBillingClass)
                {
                    conRangeCriteria += SysQuery::value('0');
                }
            }
            else
            {
                queryBuildRange = SysQuery::findOrCreateRange(_queryBuildDataSource,fieldNum(CustBillingClassification, BillingClassification));

                while (listEnumerator.moveNext())
                {
                    conRangeCriteria += listEnumerator.current();
                }

                if (conLen(conRangeCriteria) && _inclTransWithNoBillingClass)
                {
                    conRangeCriteria += SysQuery::valueEmptyString();
                }
            }

            range = SysOperationHelper::convertMultiSelectedValueString(conRangeCriteria);
            range = strReplace(range, ";" , ", ");

            queryBuildRange.value(range);
            queryBuildRange.status(RangeStatus::Hidden);
        }
        else if (_billingClassificationRangeFieldId)
        {
            queryBuildRange = SysQuery::findOrCreateRange(_queryBuildDataSource,_billingClassificationRangeFieldId);

            // _inclTransWithNoBillingClass is not checked here, because it is already checked in
            //CustBillingClassificationReportManager::validate method.
            queryBuildRange.value('0');
            queryBuildRange.status(RangeStatus::Hidden);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that if no bill classes are selected that transactions without a billing class are selected.
    /// box field.
    /// </summary>
    /// <param name="_billingClass">
    /// The value of the selected billing classification.
    /// </param>
    /// <param name="_inclTransWithNoBillingClass">
    /// The value of <c>NoYes</c> field to select records without billing classification.
    /// </param>
    /// <returns>
    /// true if the billing class field is selected or includes a transaction that does not have a billing
    /// class check box marked; otherwise, false .
    /// </returns>
    /// <remarks>
    /// If no billing classes are selected and transactions without a billing class is not checked, then do not proceed.
    /// </remarks>
    public static boolean validate(List _billingClass, NoYes _inclTransWithNoBillingClass)
    {
        boolean ret = true;

        if (_billingClass && _billingClass.empty() && !_inclTransWithNoBillingClass)
        {
            ret = checkFailed("@SPS673");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>