<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementHeaderFieldEditabilityDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AgreementHeaderFieldEditabilityDataProvider</c> class is responsible
/// for providing data that is necessary for detremining editability of agreement header fields.
/// </summary>
abstract class AgreementHeaderFieldEditabilityDataProvider
{
    // Input

    AgreementHeader                     agreementHeader;

    // Cached values (should only be accessed through lazy loading methods)

    IntercompanyAgreementActionPolicy   intercompanyAgreementActionPolicy;
    UnknownNoYes                        canBeIntercompanyAgreement = UnknownNoYes::Unknown;
    UnknownNoYes                        intercompanyLinkExists = UnknownNoYes::Unknown;
    AgreementHeaderDefault              agreementHeaderDefault;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>AgreementHeaderFieldEditabilityDataProvider</c> class
    /// for the specified <c>AgreementHeader</c> record.
    /// </summary>
    /// <param name = "_agreementHeader">The <c>AgreementHeader</c> record.</param>
    /// <returns>Creates a new instance of the <c>AgreementHeaderFieldEditabilityDataProvider</c> class.</returns>
    public static AgreementHeaderFieldEditabilityDataProvider newFromAgreementHeader(AgreementHeader _agreementHeader)
    {
        switch (_agreementHeader.moduleType())
        {
            case ModuleSalesPurch::Sales:
                return SalesAgreementHeaderFieldEditabilityDataProvider::newFromAgreementHeader(_agreementHeader);

            case ModuleSalesPurch::Purch:
                return PurchAgreementHeaderFieldEditabilityDataProvider::newFromAgreementHeader(_agreementHeader);

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>AgreementHeader</c> record for which fields editability must be determined.
    /// </summary>
    /// <returns>The <c>AgreementHeader</c> record for which fields editability must be determined.</returns>
    public AgreementHeader parmAgreementHeader()
    {
        return agreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementHeaderDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>AgreementHeaderDefault</c> record for the agreement.
    /// </summary>
    /// <returns>The <c>AgreementHeaderDefault</c> record for the agreement.</returns>
    public AgreementHeaderDefault parmAgreementHeaderDefault()
    {
        if (!agreementHeaderDefault)
        {
            agreementHeaderDefault = agreementHeader.agreementHeaderDefault();
        }

        return agreementHeaderDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanBeIntercompanyAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the agreement can be an intercompany agreement.
    /// </summary>
    /// <returns>true, if the agreement can be an intercompany agreement; otherwise, false.</returns>
    public boolean parmCanBeIntercompanyAgreement()
    {
        if (canBeIntercompanyAgreement == UnknownNoYes::Unknown)
        {
            canBeIntercompanyAgreement = this.booleanToUnknownNoYes(agreementHeader.isAgreementUsingActiveIntercompanyPartner());
        }

        return canBeIntercompanyAgreement == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntercompanyLinkExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an intercompany link exists for the agreement.
    /// </summary>
    /// <returns>true, if the agreement can be an intercompany agreement; otherwise, false.</returns>
    public boolean parmIntercompanyLinkExists()
    {
        if (intercompanyLinkExists == UnknownNoYes::Unknown)
        {
            intercompanyLinkExists = this.booleanToUnknownNoYes(agreementHeader.intercompanyLinkExist());
        }

        return intercompanyLinkExists == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntercompanyAgreementActionPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>IntercompanyAgreementActionPolicy</c> record for the agreement.
    /// </summary>
    /// <returns>The <c>IntercompanyAgreementActionPolicy</c> record for the agreement.</returns>
    public IntercompanyAgreementActionPolicy parmIntercompanyAgreementActionPolicy()
    {
        if (!intercompanyAgreementActionPolicy)
        {
            intercompanyAgreementActionPolicy = agreementHeader.findIntercompanyAgreementActionPolicy();
        }

        return intercompanyAgreementActionPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object based on the specified <c>AgreementHeader</c> record.
    /// </summary>
    /// <param name = "_agreementHeader">The <c>AgreementHeader</c> record.</param>
    protected void initFromAgreementHeader(AgreementHeader _agreementHeader)
    {
        agreementHeader = _agreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>booleanToUnknownNoYes</Name>
				<Source><![CDATA[
    protected UnknownNoYes booleanToUnknownNoYes(boolean _booleanValue)
    {
        return _booleanValue ? UnknownNoYes::Yes : UnknownNoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditValidityPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the validity period can be edited on the agreement.
    /// </summary>
    /// <returns>
    /// true if the validity period can be edited on the agreement; otherwise, false
    /// </returns>
    public boolean canEditValidityPeriod()
    {
        if (this.parmCanBeIntercompanyAgreement() && this.parmIntercompanyLinkExists())
        {
            return this.parmIntercompanyAgreementActionPolicy().AllowValidityPeriodEdit;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditAgreementState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the agreement state can be edited on the agreement.
    /// </summary>
    /// <returns>
    /// true if the agreement state can be edited on the agreement; otherwise, false.
    /// </returns>
    public boolean canEditAgreementState()
    {
        if (this.parmCanBeIntercompanyAgreement())
        {
            return this.parmIntercompanyAgreementActionPolicy().EffectiveOnHoldEdit;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether currency can be edited on the agreement.
    /// </summary>
    /// <returns>
    /// true if currency can be edited on the agreement; otherwise, false.
    /// </returns>
    public boolean canEditCurrency()
    {
        boolean showWarning = false;
        return agreementHeader.allowCurrencyChange(showWarning) && !PublicSectorUtils::isFrenchRegulatoryEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditDefaultAgreementLineType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether default commitment type can be edited on the agreement.
    /// </summary>
    /// <returns>
    /// true if default commitment type can be edited on the agreement; otherwise, false.
    /// </returns>
    public boolean canEditDefaultAgreementLineType()
    {
        return !this.parmCanBeIntercompanyAgreement();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>