<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcItem_PmfCoProduct</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BomCalcItem_PmfCoProduct extends BOMCalcItem
{
    ItemId          coProductItemId;
    InventDimId     coProductInventDimId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructCostCalcTransData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>CostCalcTransData</c> class for this item.
    /// </summary>
    /// <returns>A new instance of the <c>CostCalcTransData</c> class.</returns>
    protected CostCalcTransData constructCostCalcTransData()
    {
        // Use the coProductItemId to construct the class in order to pick the right costing sheet
        return CostCalcTransData::construct(coProductItemId, this.topParentQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    protected void initParameters()
    {
        if (!inventUnitId)
        {
            inventUnitId = InventTable::find(coProductItemId).inventUnitId();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>key1</Name>
				<Source><![CDATA[
    protected KeyValue key1()
    {
        return coProductItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>key2</Name>
				<Source><![CDATA[
    protected KeyValue key2()
    {
        return coProductInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCoProductInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmCoProductInventDimId(InventDimId _coProductInventDimId = coProductInventDimId)
    {
        coProductInventDimId = _coProductInventDimId;

        return coProductInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCoProductItemId</Name>
				<Source><![CDATA[
    public ItemId parmCoProductItemId(ItemId _coProductItemId = coProductItemId)
    {
        coProductItemId = _coProductItemId;
        return coProductItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BomCalcItem_PmfCoProduct construct()
    {
        return new BomCalcItem_PmfCoProduct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCoProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BomCalcItem_PmfCoProduct</c> class using specified parameters.
    /// </summary>
    /// <param name="_coProductId">
    /// The coproduct item id.
    /// </param>
    /// <param name="_itemId">
    /// The formula item id.
    /// </param>
    /// <param name="_inventDimId">
    /// Inventory dimension id.
    /// </param>
    /// <param name="_calcQty">
    /// Qty for which calculation is run.
    /// </param>
    /// <param name="_bomId">
    /// The BOM id.
    /// </param>
    /// <param name="_routeId">
    /// The route id.
    /// </param>
    /// <param name="_profitSet">
    /// The <c>CostProfitSet</c> enumeration value.
    /// </param>
    /// <param name="_bomCalcExplosionMode">
    /// The <c>BOMCalcExplosionMode</c> enumeration value.
    /// </param>
    /// <param name="_parentCalcId">
    /// The parent price calculation id.
    /// </param>
    /// <param name="_formSeriesSize">
    /// The formula series size.
    /// </param>
    /// <param name="_priceCalcId">
    /// The price calculation id.
    /// </param>
    /// <param name="_calcDate">
    /// The calculation date.
    /// </param>
    /// <param name="_bomRouteVersionSelect">
    /// The <c>BOMRouteVersionSelect</c> enumeration value.
    /// </param>
    /// <param name="_showProgress">
    /// True if progress bar should be shown; false otherwise.
    /// </param>
    /// <param name="_bomCalcType">
    /// The <c>BOMCalcType</c> enumeration value.
    /// </param>
    /// <param name="_costingVersionId">
    /// The costing version id.
    /// </param>
    /// <param name="_calcCostingVersionUpdate">
    /// The <c>BOMCalcCostingVersionUpdate</c> enumeration value.
    /// </param>
    /// <param name="_costPriceTransfer">
    /// True if cost price should be transferred; false otherwise.
    /// </param>
    /// <param name="_salesPriceTransfer">
    /// True if sales price should be transferred; false otherwise.
    /// </param>
    /// <param name="_bomCalcFallBack">
    /// The <c>BOMCalcFallBack</c> enumeration value.
    /// </param>
    /// <param name="_fallBackVersionId">
    /// The fallback costing version id.
    /// </param>
    /// <param name="_costPriceModel">
    /// The <c>BOMCostPriceModel</c> enumeration value.
    /// </param>
    /// <returns>
    /// The instance of the <c>BomCalcItem_PmfCoProduct</c> class.
    /// </returns>
public static BomCalcItem_PmfCoProduct newCoProduct(
        ItemId                      _coProductId,
        ItemId                      _itemId,
        InventDimId                 _inventDimId,
        Qty                         _calcQty,
        BOMId                       _bomId,
        RouteId                     _routeId,
        CostProfitSet               _profitSet,
        BOMCalcExplosionMode        _bomCalcExplosionMode,
        PmfPriceCalcId              _parentCalcId,
        Qty                         _formSeriesSize,
        PriceCalcId                 _priceCalcId                = '',
        TransDate                   _calcDate                   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        BOMRouteVersionSelect       _bomRouteVersionSelect      = BOMRouteVersionSelect::Active,
        boolean                     _showProgress               = false,
        BOMCalcType                 _bomCalcType                = BOMCalcType::Order,
        CostingVersionId            _costingVersionId           = '',
        BOMCalcCostingVersionUpdate _calcCostingVersionUpdate   = BOMCalcCostingVersionUpdate::Overwrite,
        NoYes                       _costPriceTransfer          = NoYes::No,
        NoYes                       _salesPriceTransfer         = NoYes::No,
        BOMCalcFallBack             _bomCalcFallBack            = BOMCalcFallBack::None,
        CostingVersionId             _fallBackVersionId         = '',
        BOMCostPriceModel           _costPriceModel             = BOMCostPriceModel::BOMCalcGroup
        )
    {
        BomCalcItem_PmfCoProduct bomCalcItem = BomCalcItem_PmfCoProduct::construct();

        bomCalcItem.initCoProduct(_coProductId,
                                  _itemId,
                                  _inventDimId,
                                  _calcQty,
                                  _bomId,
                                  _routeId,
                                  _profitSet,
                                  _bomCalcExplosionMode,
                                  _parentCalcId,
                                  _formSeriesSize,
                                  _priceCalcId,
                                  _calcDate,
                                  _bomRouteVersionSelect,
                                  _showProgress,
                                  _bomCalcType,
                                  _costingVersionId,
                                  _calcCostingVersionUpdate,
                                  _costPriceTransfer,
                                  _salesPriceTransfer,
                                  _bomCalcFallBack,
                                  _fallBackVersionId,
                                  _costPriceModel);

        return bomCalcItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostGroupId</Name>
				<Source><![CDATA[
    protected CostGroupId getCostGroupId()
    {
        return InventTable::find(this.parmCoProductItemId()).costGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCoProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance using specified parameters.
    /// </summary>
    /// <param name="_coProductId">
    /// The coproduct item id.
    /// </param>
    /// <param name="_itemId">
    /// The formula item id.
    /// </param>
    /// <param name="_inventDimId">
    /// Inventory dimension id.
    /// </param>
    /// <param name="_calcQty">
    /// Qty for which calculation is run.
    /// </param>
    /// <param name="_bomId">
    /// The BOM id.
    /// </param>
    /// <param name="_routeId">
    /// The route id.
    /// </param>
    /// <param name="_profitSet">
    /// The <c>CostProfitSet</c> enumeration value.
    /// </param>
    /// <param name="_bomCalcExplosionMode">
    /// The <c>BOMCalcExplosionMode</c> enumeration value.
    /// </param>
    /// <param name="_parentCalcId">
    /// The parent price calculation id.
    /// </param>
    /// <param name="_formSeriesSize">
    /// The formula series size.
    /// </param>
    /// <param name="_priceCalcId">
    /// The price calculation id.
    /// </param>
    /// <param name="_calcDate">
    /// The calculation date.
    /// </param>
    /// <param name="_bomRouteVersionSelect">
    /// The <c>BOMRouteVersionSelect</c> enumeration value.
    /// </param>
    /// <param name="_showProgress">
    /// True if progress bar should be shown; false otherwise.
    /// </param>
    /// <param name="_bomCalcType">
    /// The <c>BOMCalcType</c> enumeration value.
    /// </param>
    /// <param name="_costingVersionId">
    /// The costing version id.
    /// </param>
    /// <param name="_calcCostingVersionUpdate">
    /// The <c>BOMCalcCostingVersionUpdate</c> enumeration value.
    /// </param>
    /// <param name="_costPriceTransfer">
    /// True if cost price should be transferred; false otherwise.
    /// </param>
    /// <param name="_salesPriceTransfer">
    /// True if sales price should be transferred; false otherwise.
    /// </param>
    /// <param name="_bomCalcFallBack">
    /// The <c>BOMCalcFallBack</c> enumeration value.
    /// </param>
    /// <param name="_fallBackVersionId">
    /// The fallback costing version id.
    /// </param>
    /// <param name="_costPriceModel">
    /// The <c>BOMCostPriceModel</c> enumeration value.
    /// </param>
    protected void initCoProduct(ItemId                      _coProductId,
                                 ItemId                      _itemId,
                                 InventDimId                 _inventDimId,
                                 Qty                         _calcQty,
                                 BOMId                       _bomId,
                                 RouteId                     _routeId,
                                 CostProfitSet               _profitSet,
                                 BOMCalcExplosionMode        _bomCalcExplosionMode,
                                 PmfPriceCalcId              _parentCalcId,
                                 Qty                         _formSeriesSize,
                                 PriceCalcId                 _priceCalcId                = '',
                                 TransDate                   _calcDate                   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                 BOMRouteVersionSelect       _bomRouteVersionSelect      = BOMRouteVersionSelect::Active,
                                 boolean                     _showProgress               = false,
                                 BOMCalcType                 _bomCalcType                = BOMCalcType::Order,
                                 CostingVersionId            _costingVersionId           = '',
                                 BOMCalcCostingVersionUpdate _calcCostingVersionUpdate   = BOMCalcCostingVersionUpdate::Overwrite,
                                 NoYes                       _costPriceTransfer          = NoYes::No,
                                 NoYes                       _salesPriceTransfer         = NoYes::No,
                                 BOMCalcFallBack             _bomCalcFallBack            = BOMCalcFallBack::None,
                                 CostingVersionId            _fallBackVersionId          = '',
                                 BOMCostPriceModel           _costPriceModel             = BOMCostPriceModel::BOMCalcGroup)
    {
        InventDim foundInventDim;

        this.parmCoProductItemId(_coProductId);
        this.parmItemId(_itemId);
        this.parmInventTable(InventTable::find(_itemId));

        foundInventDim = InventDim::find(_inventDimId);
        this.parmInventDimId(_inventDimId);
        this.parmInventDim(foundInventDim);

        if (foundInventDim)
        {
            this.parmSiteId(foundInventDim.InventSiteId);
        }

        this.parmCalcConsumptionInventQty(_calcQty);
        this.parmActualConsumptionInventQty(_calcQty);
        this.parmActualNetWeightConsumptionInventQty(_calcQty);

        this.parmBOMId(_bomId);
        this.parmRouteId(_routeId);

        this.parmProfitSet(_profitSet);

        this.parmBomCalcExplosionMode(_bomCalcExplosionMode);

        this.parmPriceCalcId(_priceCalcId);

        this.parmCalcDate(_calcDate);

        this.parmBOMRouteVersionSelect(_bomRouteVersionSelect);

        this.parmShowProgress(_showProgress);

        this.parmBOMCalcType(_bomCalcType);
        this.parmCostingVersionId(_costingVersionId);
        this.parmCalcCostingVersionUpdate(_calcCostingVersionUpdate);

        this.parmCostPriceTransfer(_costPriceTransfer);
        this.parmSalesPriceTransfer(_salesPriceTransfer);

        this.parmBOMCalcFallBack(_bomCalcFallBack);
        this.parmFallBackVersionId(_fallBackVersionId);

        this.parmCostPriceModel(_costPriceModel);

        this.parmPmfParentCalcId(_parentCalcId);
        this.parmPmfFormulaSeriesSize(_formSeriesSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCoByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BomCalcItem_PmfCoProduct</c> class using specified parameters.
    /// </summary>
    /// <param name="_pmfProductType">
    /// The <c>PmfProductType</c> enumeration value. Depending on the value either instance of the <c>BomCalcItem_PmfCoProduct</c> or <c>BomCalcItem_PmfByProduct</c> is created.
    /// </param>
    /// <param name="_coProductId">
    /// The coproduct item id.
    /// </param>
    /// <param name="_itemId">
    /// The formula item id.
    /// </param>
    /// <param name="_inventDimId">
    /// Inventory dimension id.
    /// </param>
    /// <param name="_calcQty">
    /// Qty for which calculation is run.
    /// </param>
    /// <param name="_bomId">
    /// The BOM id.
    /// </param>
    /// <param name="_routeId">
    /// The route id.
    /// </param>
    /// <param name="_profitSet">
    /// The <c>CostProfitSet</c> enumeration value.
    /// </param>
    /// <param name="_bomCalcExplosionMode">
    /// The <c>BOMCalcExplosionMode</c> enumeration value.
    /// </param>
    /// <param name="_parentCalcId">
    /// The parent price calculation id.
    /// </param>
    /// <param name="_formSeriesSize">
    /// The formula series size.
    /// </param>
    /// <param name="_priceCalcId">
    /// The price calculation id.
    /// </param>
    /// <param name="_calcDate">
    /// The calculation date.
    /// </param>
    /// <param name="_bomRouteVersionSelect">
    /// The <c>BOMRouteVersionSelect</c> enumeration value.
    /// </param>
    /// <param name="_showProgress">
    /// True if progress bar should be shown; false otherwise.
    /// </param>
    /// <param name="_bomCalcType">
    /// The <c>BOMCalcType</c> enumeration value.
    /// </param>
    /// <param name="_costingVersionId">
    /// The costing version id.
    /// </param>
    /// <param name="_calcCostingVersionUpdate">
    /// The <c>BOMCalcCostingVersionUpdate</c> enumeration value.
    /// </param>
    /// <param name="_costPriceTransfer">
    /// True if cost price should be transferred; false otherwise.
    /// </param>
    /// <param name="_salesPriceTransfer">
    /// True if sales price should be transferred; false otherwise.
    /// </param>
    /// <param name="_bomCalcFallBack">
    /// The <c>BOMCalcFallBack</c> enumeration value.
    /// </param>
    /// <param name="_fallBackVersionId">
    /// The fallback costing version id.
    /// </param>
    /// <param name="_costPriceModel">
    /// The <c>BOMCostPriceModel</c> enumeration value.
    /// </param>
    /// <returns>
    /// The instance of the <c>BomCalcItem_PmfCoProduct</c> class.
    /// </returns>
    public static BomCalcItem_PmfCoProduct newCoByProduct(
        PmfProductType              _pmfProductType,
        ItemId                      _coProductId,
        ItemId                      _itemId,
        InventDimId                 _inventDimId,
        Qty                         _calcQty,
        BOMId                       _bomId,
        RouteId                     _routeId,
        CostProfitSet               _profitSet,
        BOMCalcExplosionMode        _bomCalcExplosionMode,
        PmfPriceCalcId              _parentCalcId,
        Qty                         _formSeriesSize,
        PriceCalcId                 _priceCalcId                = '',
        TransDate                   _calcDate                   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        BOMRouteVersionSelect       _bomRouteVersionSelect      = BOMRouteVersionSelect::Active,
        boolean                     _showProgress               = false,
        BOMCalcType                 _bomCalcType                = BOMCalcType::Order,
        CostingVersionId            _costingVersionId           = '',
        BOMCalcCostingVersionUpdate _calcCostingVersionUpdate   = BOMCalcCostingVersionUpdate::Overwrite,
        NoYes                       _costPriceTransfer          = NoYes::No,
        NoYes                       _salesPriceTransfer         = NoYes::No,
        BOMCalcFallBack             _bomCalcFallBack            = BOMCalcFallBack::None,
        CostingVersionId             _fallBackVersionId         = '',
        BOMCostPriceModel           _costPriceModel             = BOMCostPriceModel::BOMCalcGroup
        )
    {
        BomCalcItem_PmfCoProduct bomCalcItem;

        if (_pmfProductType == PmfProductType::Co_Product)
        {
            bomCalcItem = BomCalcItem_PmfCoProduct::construct();
        }
        else
        {
            bomCalcItem = BomCalcItem_PmfByProduct::construct();
        }

        bomCalcItem.initCoProduct(_coProductId,
                                  _itemId,
                                  _inventDimId,
                                  _calcQty,
                                  _bomId,
                                  _routeId,
                                  _profitSet,
                                  _bomCalcExplosionMode,
                                  _parentCalcId,
                                  _formSeriesSize,
                                  _priceCalcId,
                                  _calcDate,
                                  _bomRouteVersionSelect,
                                  _showProgress,
                                  _bomCalcType,
                                  _costingVersionId,
                                  _calcCostingVersionUpdate,
                                  _costPriceTransfer,
                                  _salesPriceTransfer,
                                  _bomCalcFallBack,
                                  _fallBackVersionId,
                                  _costPriceModel);

        return bomCalcItem;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>