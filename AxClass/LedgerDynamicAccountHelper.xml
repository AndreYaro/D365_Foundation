<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerDynamicAccountHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Helper methods for ledger dynamic accounts.
/// </summary>
public class LedgerDynamicAccountHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDimensionStorageFromAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new <c>DimensionStorage</c> object for the specified non-ledger account.
    /// </summary>
    /// <param name="_accountNumber">
    ///    The account number.
    /// </param>
    /// <param name="_accountType">
    ///    The type of the account.
    /// </param>
    /// <param name="_enumType">
    ///    The type of the enumeration for the account type; optional.
    /// </param>
    /// <param name="_custVend">
    ///    A value that indicates whether this is a customer or vendor module; optional.
    /// </param>
    /// <returns>
    ///    A <c>DimensionStorage</c> object that represents the single segment non-ledger account number.
    /// </returns>
    private static DimensionStorage createDimensionStorageFromAccountNumber(
        LedgerJournalAC _accountNumber,
        int _accountType,
        enumId _enumType = enumnum(LedgerJournalACType),
        ModuleInventCustVend _custVend = ModuleInventCustVend::Cust)
    {
        DimensionStorage        dimStorage;
        DimensionAttributeValue dimAttrValue;
        DimensionStorageSegment segment;

        Debug::assert(_accountNumber != '');

        if (DimensionHierarchyHelper::getHierarchyTypeByAccountType(_accountType, _enumType, _custVend ) == DimensionHierarchyType::AccountStructure)
        {
            dimStorage = DimensionStorage::findById(LedgerDefaultAccountHelper::getDefaultAccountFromMainAccountId(_accountNumber));
        }
        else
        {
            // Multi-typed accounts have exactly one segment
            dimStorage = DimensionStorage::construct(1);

            // Use the system-generated dimension hierarchy for the account type
            dimStorage.addAccountStructure(DimensionHierarchyHelper::getHierarchyIdByAccountType(_accountType, _enumType, _custVend), 1);
            segment = dimStorage.getSegment(1);

            // Set the account string value
            segment.parmDisplayValue(_accountNumber);

            // Get the dimension attribute value for the account
            dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndValue(
                LedgerDynamicAccountHelper::getDimensionAttributeFromAccountType(_accountType, _enumType, _custVend),
                _accountNumber,
                false,
                true);

            // The backing entity must exist for us to create a valid combination, otherwise no level values get inserted and a 0 recId is returned
            //    Debug::assert(dimAttrValue != null);

            segment.parmDimensionAttributeValueId(dimAttrValue.RecId);
            segment.parmHashKey(dimAttrValue.HashKey);

            // Required to reset the hasChanged flag
            dimStorage.setSegment(1, segment);
        }
        return dimStorage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountNumberFromDynamicAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the account number for a dynamic account.
    /// </summary>
    /// <param name="_dimAttrValueCombo">
    ///    The record ID of the account for which to retrieve a string value.
    /// </param>
    /// <returns>
    ///    The string value of the specified account.
    /// </returns>
    public static LedgerJournalAC getAccountNumberFromDynamicAccount(DimensionDynamicAccount _dimensionDynamicAccount)
    {
        return LedgerDimensionFacade::getDisplayValueForLedgerDimension(_dimensionDynamicAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttributeFromAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a system-generated dimension attribute for the specified account type.
    /// </summary>
    /// <param name="_accountType">
    ///    The account type for which to retrieve a dimension attribute.
    /// </param>
    /// <param name="_enumType">
    ///    The type of the enumeration that specifies the account type; optional.
    /// </param>
    /// <param name="_custVend">
    ///    A value the indicates whether this is a customer or vendor module; optional.
    /// </param>
    /// <returns>
    ///    A system-generated dimension attribute for the specified account type.
    /// </returns>
    public static DimensionAttribute getDimensionAttributeFromAccountType(
        int _accountType,
        enumId _enumType = enumNum(LedgerJournalACType),
        ModuleInventCustVend _custVend = ModuleInventCustVend::Cust)
    {
        DimensionHierarchyType dimHierarchyType;

        // Set appropriate backing entity information based on type
        dimHierarchyType = DimensionHierarchyHelper::getHierarchyTypeByAccountType(_accountType, _enumType, _custVend);
        return DimensionAttribute::getAttributeByHierarchyType(dimHierarchyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDynamicAccountFromAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a <c>DimensionDynamicAccount</c> for the specified non-ledger account.
    /// </summary>
    /// <param name="_accountNumber">
    ///    The account number.
    /// </param>
    /// <param name="_accountType">
    ///    The type of the account.
    /// </param>
    /// <returns>
    ///    The record ID of a ledger dimension that represents the specified account and type.
    /// </returns>
    public static DimensionDynamicAccount getDynamicAccountFromAccountNumber(LedgerJournalAC _accountNumber, LedgerJournalACType _accountType)
    {
        DimensionStorage dimStorage;
        container result;
        LedgerRecId ledgerRecId;

        // Empty account is a zero ledger dimension
        if (!_accountNumber)
        {
            return 0;
        }

        // String based multi-typed accounts are SaveDataPerCompany:Yes, therefore the cache key must be ledger aware
        ledgerRecId = Ledger::current();

        result = DimensionCache::getValue(DimensionCacheScope::DimensionStorageInstance, [ledgerRecId, _accountNumber, enum2int(_accountType)]);

        if (result == conNull())
        {
            dimStorage = LedgerDynamicAccountHelper::createDimensionStorageFromAccountNumber(_accountNumber, enum2int(_accountType));

            result = [dimStorage.save()];

            DimensionCache::insertValue(DimensionCacheScope::DimensionStorageInstance, [ledgerRecId, _accountNumber, enum2int(_accountType)], result);
        }

        return conPeek(result, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDynamicAccountFromAccountNumberEnumModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a <c>DimensionDynamicAccount</c> for the specified non-ledger account.
    /// </summary>
    /// <param name="_accountNumber">
    ///    The account number.
    /// </param>
    /// <param name="_accountType">
    ///    The type of the account.
    /// </param>
    /// <param name="_enumType">
    ///    The type of the enumeration for the account type.
    /// </param>
    /// <param name="_custVend">
    ///    A value that indicates whether this is a customer or vendor module.
    /// </param>
    /// <returns>
    ///    The record ID of a ledger dimension that represents the specified account and type.
    /// </returns>
    public static DimensionDynamicAccount getDynamicAccountFromAccountNumberEnumModule(
        LedgerJournalAC         _accountNumber,
        int                     _accountType,
        enumId                  _enumType,
        ModuleInventCustVend    _custVend)
    {
        DimensionStorage dimStorage;
        DimensionAttributeValue dimAttrValue;
        DimensionStorageSegment segment;
        container cacheKey, result;

        // Empty account is a zero ledger dimension
        if (!_accountNumber)
        {
            return 0;
        }

        cacheKey = [curext(), _accountNumber, _accountType, _enumType, _custVend];
        result = DimensionCache::getValue(DimensionCacheScope::DimensionStorageInstance, cacheKey);

        if (result == conNull())
        {
            // Multi-typed accounts have exactly one segment
            dimStorage = DimensionStorage::construct(1);

            // Use the system-generated dimension hierarchy for the account type
            dimStorage.addAccountStructure(DimensionHierarchyHelper::getHierarchyIdByAccountType(_accountType, _enumType, _custVend), 1);
            segment = dimStorage.getSegment(1);

            // Set the account string value
            segment.parmDisplayValue(_accountNumber);

            // Get the dimension attribute value for the account
            dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndValue(
                LedgerDynamicAccountHelper::getDimensionAttributeFromAccountType(_accountType, _enumType, _custVend),
                _accountNumber,
                false,
                true);

            // The backing entity must exist for us to create a valid combination, otherwise no level values get inserted and a 0 recId is returned
            //    debug::assert(dimAttrValue.RecId != 0);

            segment.parmDimensionAttributeValueId(dimAttrValue.RecId);
            segment.parmHashKey(dimAttrValue.HashKey);

            // Required to reset the hasChanged flag
            dimStorage.setSegment(1, segment);

            result = [dimStorage.save()];

            DimensionCache::insertValue(DimensionCacheScope::DimensionStorageInstance, cacheKey, result);
        }

        return conPeek(result, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toLedgerAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>LedgerAccountType</c> enumeration value for a <c>DimensionLedgerAccountType</c> enumeration value.
    /// </summary>
    /// <param name="_dimensionLedgerAccountType">
    ///    The <c>DimensionLedgerAccountType</c> enumeration value to convert.
    /// </param>
    /// <returns>
    ///    A <c>LedgerAccountType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    The process converts <c>DimensionLedgerAccountType</c> enumeration values to the corresponding <c>LedgerAccountType</c> enumeration values.
    ///    The values with no equivalent <c>LedgerAccountType</c> enumeration value are converted to <c>LedgerAccountType::ProfitAndLoss</c>.
    /// </remarks>
    public static LedgerAccountType toLedgerAccountType(DimensionLedgerAccountType _ledgerDimensionAccountType)
    {
        LedgerAccountType type;

        switch (_ledgerDimensionAccountType)
        {
            case DimensionLedgerAccountType::ProfitAndLoss:
                type = LedgerAccountType::AccountOperations;
                break;

            case DimensionLedgerAccountType::Revenue:
                type = LedgerAccountType::AccountRevenue;
                break;

            case DimensionLedgerAccountType::Expense:
                type = LedgerAccountType::AccountCost;
                break;

            case DimensionLedgerAccountType::BalanceSheet:
                type = LedgerAccountType::AccountStatus;
                break;

            case DimensionLedgerAccountType::Asset:
                type = LedgerAccountType::AccountActive;
                break;

            case DimensionLedgerAccountType::Liability:
                type = LedgerAccountType::AccountLiable;
                break;

            case DimensionLedgerAccountType::Total:
                type = LedgerAccountType::sum;
                break;

            case DimensionLedgerAccountType::Common_CN:
                if (LedgerParameters::isCommonAccountType_CN())
                {
                    type = LedgerAccountType::Common_CN;
                    break;
                }
                break;

            default:
                // No appropriate conversion
                Debug::assert(false);
                type = LedgerAccountType::AccountOperations;
                break;
        }

        return type;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>