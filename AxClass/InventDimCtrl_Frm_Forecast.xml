<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_Forecast</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventDimCtrl_Frm_Forecast</c> class is a derived version of the <c>InventDimCtrl_Frm</c>
///    class that extends the inherited class with functionality to determine which inventory dimension
///    should be marked as mandatory on the forecast lines.
/// </summary>
public class InventDimCtrl_Frm_Forecast extends InventDimCtrl_Frm_Editable
{
    NoYes   useItemAllocationKey;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initDimParmEnabled</Name>
				<Source><![CDATA[
        public InventDimParm initDimParmEnabled()
    {
        InventDimParm   inventDimParm;
        InventDimParm   inventDimParmCoverageDim;
        InventDimParm   inventDimParmMandatoryDim;

        if (useItemAllocationKey)
        {
            inventDimParmCoverageDim.initCovDimAllGrp();
            inventDimParmMandatoryDim.initMandatoryDimAllGrp();
            dimParmEnabled = InventDimParm::orParms(inventDimParmCoverageDim,inventDimParmMandatoryDim);
            dimParmEnabled.clearProductDimensions();
            inventDimParm = dimParmEnabled;
        }
        else
        {
            inventDimParm = super();
        }

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the active inventory dimension fields.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    The field ID of the inventory dimension.
    /// </param>
    /// <returns>
    ///    A <c>NoYes</c> enumeration value that indicates whether the field is enabled.
    /// </returns>
    /// <remarks>
    ///    The invocation of the <c>getFieldSetup</c> method makes sure that the object is initialized.
    /// </remarks>
    protected NoYes mustEnableField(FieldId _dimFieldId)
    {
        if (!super(_dimFieldId))
        {
            return NoYes::No;
        }

        InventDimGroupFieldSetup inventDimGroupFieldSetup = this.getFieldSetup(_dimFieldId);

        if (useItemAllocationKey)
        {
            return (inventDimGroupFieldSetup.isCoveragePlanByDimensionEnabled() ||
                    inventDimGroupFieldSetup.isMandatory())    &&
                   !inventDimGroupFieldSetup.isProductDimension();
        }

        return inventDimGroupFieldSetup.isCoveragePlanByDimensionEnabled() || inventDimGroupFieldSetup.isMandatory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustMarkFieldAsMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks dimension fields as mandatory.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    The field ID of the inventory dimension to mark.
    /// </param>
    /// <returns>
    ///    A <c>NoYes</c> enumeration value that indicates whether the field should be marked as mandatory.
    /// </returns>
    /// <remarks>
    ///    Dimension fields are marked as mandatory based on the result of the <c>mustEnableFields</c> method
    ///    when no item allocation key is used.If an item allocation key is used, no dimension fields are
    ///    marked as mandatory.
    /// </remarks>
    protected NoYes mustMarkFieldAsMandatory(FieldId _dimFieldId)
    {
        if (useItemAllocationKey)
        {
            return NoYes::No;
        }
        return  this.mustEnableField(_dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseItemAllocationKey</Name>
				<Source><![CDATA[
        public NoYes parmUseItemAllocationKey(NoYes _useItemAllocationKey = useItemAllocationKey)
    {
        useItemAllocationKey = _useItemAllocationKey;

        return useItemAllocationKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventDimCtrl_Frm_Forecast construct()
    {
        return new InventDimCtrl_Frm_Forecast();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of this class to use in forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained.
    /// </param>
    /// <returns>
    ///    An instance of this class to use in a form.
    /// </returns>
    public static InventDimCtrl_Frm_Forecast newFromForm(FormRun _formRun)
    {
        InventDimCtrl_Frm_Forecast       inventDimCtrl = InventDimCtrl_Frm_Forecast::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.init();
        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>