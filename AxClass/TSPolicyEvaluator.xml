<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSPolicyEvaluator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Abstract class for the timesheet policy evaluators
/// </summary>
public abstract class TSPolicyEvaluator
{
    List        policyViolations;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Abstract method that is implemented by subclasses with the actual evaluation of the policy
    /// </summary>
    /// <param name = "_record"> Recod on which the policy is to be evaluated </param>
    /// <param name = "_policyType"> PolicyType of the rules to consider </param>
    /// <param name = "_policyRuleType"> PolicyRule type of the rules to consider </param>
    public abstract void evaluate(
        Common _record,
        SysPolicyTypeEnum _policyType,
        SysPolicyRuleType _policyRuleType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPolicyViolation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to get the policy violation from the policy violations list based on the passed rule
    /// </summary>
    /// <param name="_tsPolicyRule">
    /// Rule for which the policy violation is to be retrieved
    /// </param>
    /// <returns>
    /// Policy violation for the rule from list if present; otherwise null
    /// </returns>
    public TSPolicyViolation getPolicyViolation(TSPolicyRule _tsPolicyRule)
    {
        ListEnumerator      listEnumerator;
        TSPolicyViolation   tsPolicyViolation;

        if (policyViolations)
        {
            listEnumerator = policyViolations.getEnumerator();

            while (listEnumerator.moveNext())
            {
                tsPolicyViolation = listEnumerator.current();

                if (tsPolicyViolation.parmPolicyRecId() == _tsPolicyRule.RecId)
                {
                    return tsPolicyViolation;
                }
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the violation into policy cache table
    /// </summary>
    /// <param name="_tsPolicyRule">
    /// Custom message for the policy violation
    /// </param>
    /// <param name="_tsTimesheetTable">
    /// Timesheet record for which the violation is observed
    /// </param>
    /// <param name="_ruleType">
    /// Rule type for which the violation is observed
    /// </param>
    /// <param name="_violationFromDate">
    /// From date of the violation
    /// </param>
    /// <param name="_violationToDate">
    /// To date of the violation
    /// </param>
    /// <param name="_projPeriodTimesheetWeek">
    /// Timesheet week of the violation
    /// </param>
    public void insertIntoCache(
        TSPolicyRule            _tsPolicyRule,
        TSTimesheetTable        _tsTimesheetTable,
        SysPolicyRuleTypeEnum   _ruleType,
        date                    _violationFromDate,
        date                    _violationToDate,
        ProjPeriodTimesheetWeek _projPeriodTimesheetWeek)
    {
        TSPolicyViolationsCache     cache;
        str userMessage    =       _tsPolicyRule.userMessage();
        utcDateTime                 dateTimeFrom, dateTimeTo;
        TSPolicyViolationsDates     tsPolicyViolationsDates;

        dateTimeFrom = DateTimeUtil::newDateTime(dateNull(), 0);
        dateTimeTo   = DateTimeUtil::newDateTime(dateMax(), 0);

        select firstonly RecId from cache
            where cache.TimesheetNbr                == _tsTimesheetTable.TimesheetNbr
                && cache.ProjPeriodTimesheetWeek    == _projPeriodTimesheetWeek.RecId
                && cache.Rule                       == _tsPolicyRule.RecId;

        if (cache.RecId == 0)
        {
            cache.clear();
            cache.Rule                      = _tsPolicyRule.RecId;
            cache.PolicyViolationLevel      = _tsPolicyRule.TSAction;
            cache.PolicyType                = SysPolicyTypeEnum::TimesheetPolicy;
            cache.PolicyRuleType            = _ruleType;
            cache.TimesheetNbr              = _tsTimesheetTable.TimesheetNbr;
            cache.ProjPeriodTimesheetWeek   = _projPeriodTimesheetWeek.RecId;
            cache.insert();
        }

        tsPolicyViolationsDates.FromDate  = _violationFromDate;
        tsPolicyViolationsDates.ToDate    = _violationToDate;
        tsPolicyViolationsDates.TSPolicyViolationsCache = cache.RecId;
        tsPolicyViolationsDates.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertViolationIntoList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the violation into the global policy violations container
    /// </summary>
    /// <param name="_tsPolicyRule">
    /// Rule that is violated
    /// </param>
    /// <param name="_customMessage">
    /// Custom message that has to be appended to the existing violation message
    /// </param>
    protected void insertViolationIntoList(TSPolicyRule _tsPolicyRule, str _customMessage)
    {
        int                     counts;
        str                     message;
        TSPolicyViolation       tsPolicyViolation;

        if (policyViolations == null)
        {
            policyViolations = new List(Types::Class);
        }

        tsPolicyViolation = this.getPolicyViolation(_tsPolicyRule);

        if (tsPolicyViolation)
        {
            counts  = tsPolicyViolation.parmCounts();
            tsPolicyViolation.parmCounts(counts+1);
            message = tsPolicyViolation.parmCustomMsg();
            tsPolicyViolation.parmCustomMsg(strFmt("@SYS26868", message, _customMessage));
        }
        else
        {
            tsPolicyViolation = TSPolicyViolation::construct();
            tsPolicyViolation.parmPolicyRecId(_tsPolicyRule.RecId);
            tsPolicyViolation.parmCounts(1);
            tsPolicyViolation.parmViolationLevel(_tsPolicyRule.TSAction);
            tsPolicyViolation.parmMessage(_tsPolicyRule.userMessage());
            tsPolicyViolation.parmCustomMsg(_customMessage);
            policyViolations.addEnd(tsPolicyViolation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwInfologs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the policy violation messages to the infolog.
    /// </summary>
    /// <returns>
    /// True if any error violation was written to the infolog, false otherwise.
    /// </returns>
    public boolean throwInfologs()
    {
        int                     counts;
        str                     msg,customMsg;
        boolean                 ret = true;
        TSPolicyViolationLevel  level;
        ListEnumerator          listEnumerator;
        TSPolicyViolation       tsPolicyViolation;

        if (policyViolations == null || policyViolations.elements() == 0)
        {
            return true;
        }

        listEnumerator = policyViolations.getEnumerator();

        while (listEnumerator.moveNext())
        {
            tsPolicyViolation   = listEnumerator.current();
            counts              = tsPolicyViolation.parmCounts();
            level               = tsPolicyViolation.parmViolationLevel();
            msg                 = tsPolicyViolation.parmMessage();
            customMsg           = tsPolicyViolation.parmCustomMsg();

            if (counts > 1)
            {
                msg = strFmt("@SYS76498", msg, strFmt("@SYS111640", counts));
            }

            if (!TSPolicyEvalEngine::showMessage(level, strFmt("@SYS191501", msg, customMsg)))
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPolicyEvaluator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Factory method to obtain a policy evaluator based on the rule type
    /// </summary>
    /// <param name = "policyRuleType">
    /// Policy rule type for which the evaluator is to be obtained
    /// </param>
    /// <returns>
    /// Policy evaluator for the given rule type
    /// </returns>
    public static TSPolicyEvaluator getPolicyEvaluator(SysPolicyRuleTypeEnum policyRuleType)
    {
        TSPolicyEvaluator    tsPolicyEvaluator;

        tsPolicyEvaluator = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(TSPolicyEvaluator), new TSPolicyEvaluatorExtensionAttribute(policyRuleType));

        return tsPolicyEvaluator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>