<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlRelievingChain</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlRelievingChain</c> class is responsible for modeling and processing chains of relieving source documents.
/// </summary>
internal final class BudgetControlRelievingChain
{
    private container queue;
    private Set visited;
    private BudgetControlRelievingChainTmp budgetControlRelievingChainTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAndInitialize</Name>
				<Source><![CDATA[
    internal static BudgetControlRelievingChain constructAndInitialize(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        BudgetControlRelievingChain relievingChain = new BudgetControlRelievingChain();

        relievingChain.insertDocument(_sourceDocumentHeaderRecId);
        relievingChain.findRelievingChain();

        return relievingChain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDocument</Name>
				<Source><![CDATA[
    private void insertDocument(
        SourceDocumentHeaderRecId _sourceDocumentHeaderRecId,
        BudgetRelievingSourceDocumentHeaderState _state = BudgetRelievingSourceDocumentHeaderState::ToProcess)
    {
        budgetControlRelievingChainTmp.SourceDocumentHeaderRecId = _sourceDocumentHeaderRecId;
        budgetControlRelievingChainTmp.State = _state;
        budgetControlRelievingChainTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelievingChain</Name>
				<Source><![CDATA[
    internal void findRelievingChain()
    {
        // MaxRelievingChainSize is determined by maximum downstream levels of relieving chain.
        // Max levels of relieving chain could be 4 as GBR->PR->PO->Invoice.
        // Each loop finds all documents in the same level. 
        // So all documents could be found within MaxRelievingChainSize.
        // This also plays as a role with a counter to avoid infinite loop.
        const int MaxRelievingChainSize = 4;
        int counter;

        this.budgetControlRelievingChainTmpSkipActions();

        while (this.existsDocumentToBeProcessed() && counter <= MaxRelievingChainSize)
        {
            // This finds all downstream documents in a chain from a selected document and stores them in a BudgetControlRelievingChainTmp table.
            // As new source document headers are found and inserted as New into the table by source document headers with a state of ToProcess,
            // and then ToProcess states are changed to Completed and New states are changed to ToProcess for next findings.
            this.findDocumentsThatRelieveThis();

            this.updateDocumentState(BudgetRelievingSourceDocumentHeaderState::ToProcess, BudgetRelievingSourceDocumentHeaderState::Completed);
            this.updateDocumentState(BudgetRelievingSourceDocumentHeaderState::New, BudgetRelievingSourceDocumentHeaderState::ToProcess);

            counter ++;
        }

        if (counter > MaxRelievingChainSize && this.existsDocumentToBeProcessed())
        {
            warning("@Budget:OverMaxRelievingChainSize");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelievedRelievingChain</Name>
				<Source><![CDATA[
    internal void findRelievedRelievingChain()
    {
        while(conLen(queue) > 0)
        {
            SourceDocumentHeaderRecId current = conPeek(queue, 1);
            this.queue = conDel(queue, 1, 1);

            if (!visited.in(current))
            {
                visited.add(current);

                this.findDocumentsThatThisRelieves(current);
                this.findDocumentsThatRelieveThisHeader(current);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsDocumentToBeProcessed</Name>
				<Source><![CDATA[
    private boolean existsDocumentToBeProcessed()
    {
        select firstonly RecId from budgetControlRelievingChainTmp
            where budgetControlRelievingChainTmp.State == BudgetRelievingSourceDocumentHeaderState::ToProcess;

        return budgetControlRelievingChainTmp.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentState</Name>
				<Source><![CDATA[
    private void updateDocumentState(BudgetRelievingSourceDocumentHeaderState _fromState, BudgetRelievingSourceDocumentHeaderState _toState)
    {
        update_recordset budgetControlRelievingChainTmp
            setting State = _toState
            where budgetControlRelievingChainTmp.State == _fromState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocumentsThatThisRelieves</Name>
				<Source><![CDATA[
    private void findDocumentsThatThisRelieves(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        AccountingDistribution currentDistribution;
        AccountingDistribution relievedDistribution;
        SourceDocumentHeader sourceDocumentHeader;

        while select RecId
            from sourceDocumentHeader
                group by sourceDocumentHeader.RecId
            exists join relievedDistribution
                where sourceDocumentHeader.RecId == relievedDistribution.SourceDocumentHeader
            exists join currentDistribution
                where relievedDistribution.RecId == currentDistribution.ReferenceDistribution
                    && currentDistribution.SourceDocumentHeader == _sourceDocumentHeaderRecId
                    && currentDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching
        {
            if (!visited.in(sourceDocumentHeader.RecId))
            {
                this.addDocument(sourceDocumentHeader.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocumentsThatRelieveThisHeader</Name>
				<Source><![CDATA[
    private void findDocumentsThatRelieveThisHeader(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        AccountingDistribution currentDistribution;
        AccountingDistribution relievingDistribution;
        SourceDocumentHeader sourceDocumentHeader;

        while select RecId
            from sourceDocumentHeader
                group by sourceDocumentHeader.RecId
            exists join relievingDistribution
                where relievingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching
                    && relievingDistribution.SourceDocumentHeader == sourceDocumentHeader.RecId
            exists join currentDistribution
                where relievingDistribution.ReferenceDistribution == currentDistribution.RecId
                    && currentDistribution.SourceDocumentHeader == _sourceDocumentHeaderRecId
        {
            if (!visited.in(sourceDocumentHeader.RecId))
            {
                this.addDocument(sourceDocumentHeader.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocumentsThatRelieveThis</Name>
				<Source><![CDATA[
    private void findDocumentsThatRelieveThis()
    {
        AccountingDistribution currentDistribution;
        AccountingDistribution relievingDistribution;
        SourceDocumentHeader sourceDocumentHeader;
        BudgetRelievingSourceDocumentHeaderState newState = BudgetRelievingSourceDocumentHeaderState::New;
        BudgetControlRelievingChainTmp localBudgetControlRelievingChainTmp;
        localBudgetControlRelievingChainTmp.linkPhysicalTableInstance(budgetControlRelievingChainTmp);

        // The joins to AccountingDistribution tables are intentional. 
        // Exists joins cause inefficient query plans to be selected when the tables are large.
        insert_recordset budgetControlRelievingChainTmp (SourceDocumentHeaderRecId, State)
            select RecId, newState from sourceDocumentHeader
                group by sourceDocumentHeader.RecId
            join relievingDistribution
                where relievingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching
                    && relievingDistribution.SourceDocumentHeader == sourceDocumentHeader.RecId
            join currentDistribution
                where relievingDistribution.ReferenceDistribution == currentDistribution.RecId
            join localBudgetControlRelievingChainTmp
                where localBudgetControlRelievingChainTmp.State == BudgetRelievingSourceDocumentHeaderState::ToProcess
                    && localBudgetControlRelievingChainTmp.SourceDocumentHeaderRecId == currentDistribution.SourceDocumentHeader
            notexists join budgetControlRelievingChainTmp
                where budgetControlRelievingChainTmp.SourceDocumentHeaderRecId == sourceDocumentHeader.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDocument</Name>
				<Source><![CDATA[
    private void addDocument(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        queue += _sourceDocumentHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    internal SetEnumerator getEnumerator()
    {
        return this.visited.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSourceDocumentHeaderTmp</Name>
				<Source><![CDATA[
    internal SourceDocumentHeaderTmp populateSourceDocumentHeaderTmp()
    {
        SourceDocumentHeaderTmp sourceDocumentHeaderTmp;

        insert_recordset sourceDocumentHeaderTmp (SourceDocumentHeader)
            select SourceDocumentHeaderRecId from budgetControlRelievingChainTmp
                group by budgetControlRelievingChainTmp.SourceDocumentHeaderRecId;

        return sourceDocumentHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentCount</Name>
				<Source><![CDATA[
    internal int getDocumentCount()
    {
        select count(RecId) from budgetControlRelievingChainTmp
            group by budgetControlRelievingChainTmp.SourceDocumentHeaderRecId;

        return budgetControlRelievingChainTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetControlRelievingChainTmpSkipActions</Name>
				<Source><![CDATA[
    private void budgetControlRelievingChainTmpSkipActions()
    {
        budgetControlRelievingChainTmp.skipDataMethods(true);
        budgetControlRelievingChainTmp.skipDatabaseLog(true);
        budgetControlRelievingChainTmp.skipEvents(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>