<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayCalendarCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
final public class rPayCalendarCopy extends RunBase
{
    RPayCalendarId  fromCalendarId;
    RPayCalendarId  toCalendarId;
    DialogField     fieldFromCalendarId;
    DialogField     fieldToCalendarId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    private void copy()
    {
        RPayCalendarTable       payCalendarTable;
        RPayCalendarTable       payCalendarTableFrom;
        RPayCalendarDate        payCalendarDate;
        RPayCalendarDateLine    payCalendarDateLine;

        ttsbegin;

        setPrefix(RPayCalendarCopy::description());

        //copy header
        if (! RPayCalendarTable::exist(toCalendarId))
        {
            payCalendarTable                 = RPayCalendarTable::find(fromCalendarId, true);
        }
        else
        {
            payCalendarTableFrom = RPayCalendarTable::find(fromCalendarId);
            payCalendarTable = RPayCalendarTable::find(toCalendarId, true);
            buf2Buf(payCalendarTableFrom, payCalendarTable);
        }

        payCalendarTable.CalendarId      = toCalendarId;
        payCalendarTable.PayCalendarType = RPayCalendarType::Other;
        payCalendarTable.Name            = strFmt("@RUP277",payCalendarTable.Name);

        if (! payCalendarTable.validateWrite())
        {
            throw error("@SYS18722");
        }

        if (payCalendarTable.RecId)
        {
            payCalendarTable.update();
        }
        else
        {
            payCalendarTable.insert();
        }

        setPrefix(#FieldLabelValue(payCalendarDateLine,CalendarId,toCalendarId));

        while select forupdate payCalendarDate index CalendarDateIdx
            where payCalendarDate.CalendarId == fromCalendarId
        {
            setPrefix(#FieldLabelValue(payCalendarDate,transDate,PayCalendarDate.transDate));

            payCalendarDate.CalendarId = toCalendarId;

            if (! payCalendarDate.validateWrite())
            {
                throw error("@SYS18722");
            }

            payCalendarDate.insert();

            while select forupdate payCalendarDateLine index CalendarDateFromIdx
                where payCalendarDateLine.CalendarId   == fromCalendarId   &&
                      payCalendarDateLine.TransDate    == payCalendarDate.TransDate
            {
                setPrefix(strFmt("@RUP278",
                    time2str(payCalendarDateLine.FromTime,-1,-1),
                    time2str(payCalendarDateLine.ToTime,-1,-1)));

                payCalendarDateLine.CalendarId = toCalendarId;

                if (! payCalendarDateLine.validateWrite())
                    throw error("@SYS18722");

                payCalendarDateLine.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        ;
        fieldFromCalendarId = dialog.addField(extendedTypeStr(RPayCalendarId),"@SYS55232");
        fieldToCalendarId   = dialog.addField(extendedTypeStr(RPayCalendarId),"@SYS55233");

        fieldFromCalendarId.value(fromCalendarId);
        fieldToCalendarId.value(toCalendarId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        fromCalendarId  = fieldFromCalendarId.value();
        toCalendarId    = fieldToCalendarId.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromCalendarId</Name>
				<Source><![CDATA[
    private RPayTimeId parmFromCalendarId(RPayCalendarId id = fromCalendarId)
    {
    ;
        fromCalendarId= id;

        return fromCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (! this.validate())
        {
            throw error("@SYS18722");
        }

        try
        {
            ttsbegin;

            this.copy();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (! fromCalendarId)
        {
            return checkFailed("@RUP279");
        }

        if (! RPayCalendarTable::checkExist(fromCalendarId))
        {
            return false;
        }

        if (fromCalendarId == toCalendarId)
        {
            return checkFailed("@RUP280");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS55229";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayCalendarTable rPayCalendarTable;
        ;
        switch (args.dataset())
        {
            case tableNum(RPayCalendarTable):
                rPayCalendarTable = args.record();
                RPayCalendarCopy::newPayCalendarTable(rPayCalendarTable);
                break;
            default:
                throw error(strFmt("@SYS29104",classId2Name(classNum(RPayCalendarCopy))));
        }

        if (FormDataUtil::getFormDataSource(rPayCalendarTable))
        {
            FormDataUtil::getFormDataSource(rPayCalendarTable).research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPayCalendarTable</Name>
				<Source><![CDATA[
    private static void newPayCalendarTable(RPayCalendarTable payCalendarTable)
    {
        RPayCalendarCopy copy = new RPayCalendarCopy();
        ;
        copy.parmFromCalendarId(payCalendarTable.CalendarId);

        if (copy.prompt())
        {
            copy.runOperation();
        }

        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>