<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjUtilProjectDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjUtilProjectDP</c> class contains the declaration of the global variables to use.
/// </summary>
/// <remarks>
///    This class provides methods to fetch the data that is used by the <c>ProjUtilProject</c> report.
/// </remarks>

[
    SRSReportQueryAttribute(queryStr(ProjUtilProject)),
    SRSReportParameterAttribute(classStr(ProjUtilEmplContract))
]
public class ProjUtilProjectDP extends SRSReportDataProviderBase
{
    ProjUtilReportParams    params;
    ProjId                  projId;
    str                     id;
    str                     idBuf;
    Level                   level;
    RealBase                utilizationHours;
    RealBase                burdenHours;
    RealBase                notIncludedHours;
    RealBase                overtimeHours;
    RealBase                normHours;
    RealBase                finalCalcResult;
    RealBase                utilizationHoursBuf;
    RealBase                burdenHoursBuf;
    RealBase                notIncludedHoursBuf;
    RealBase                overtimeHoursBuf;
    RealBase                normHoursBuf;
    boolean                 firstRun;
    ProjHourUtilizationTmp  tmpProjUtilProject;
    QueryRun                queryRun;
    int                     hourDec;
    int                     rateDec;
    str                     headerLabel;
    str                     dateLabel;
    ProjActualBudgetOnly    projActualVsBudget;
    ProjListStateProjType   projView;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>aggregate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds up the buffered values to accumulators.
    /// </summary>
    protected void aggregate()
    {
        utilizationHours    += utilizationHoursBuf;
        burdenHours         += burdenHoursBuf;
        notIncludedHours    += notIncludedHoursBuf;
        overtimeHours       += overtimeHoursBuf;
        normHours           += normHoursBuf;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPrint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the value of the current accumulator.
    /// </summary>
    /// <returns>
    ///    true if the current accumulator contents can be printed.
    /// </returns>

    public boolean canPrint()
    {
        if (params.parmSkipZero())
        {
            if (utilizationHours == 0 && burdenHours == 0 && notIncludedHours == 0)
            {
                return false;
            }
        }

        //Skip ids that have been assigned "No Id"
        if (params.parmSkipBlankId() && (id == "@SYS78757"))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeProjectLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles project aggregation by level.
    /// </summary>
    /// <param name="_projTable">
    ///    The project table in which to include the data.
    /// </param>
    protected void executeProjectLine(ProjTable _projTable)
    {
        level = _projTable.level();
        if (level > params.parmProjLevel())
        {
            this.aggregate();
        }
        else if (level <= params.parmProjLevel())
        {
            if (!firstRun)
            {
                //print out accumulated line
                finalCalcResult = ProjUtilCalc::finalCalc(utilizationHours, burdenHours, normHours, overtimeHours, NoYes::No);

                //go on to next transaction if we don't need to display this one
                if (this.canPrint())
                {
                    this.insertProjUtilProjectTmp();
                }
            }
            else
            {
                firstRun = false;
            }

            this.resetAccumulators();
            this.aggregate();

            id = idBuf;

            //add a star to the ids of projects with children
            if (_projTable.childExist() && level == params.parmProjLevel())
            {
                id += '*';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjUtilProjectTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the temporary table and returns a data table to the calling method.
    /// </summary>
    /// <returns>
    ///    The required report data from the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('ProjHourUtilizationTmp')
    ]
    public ProjHourUtilizationTmp getProjUtilProjectTmp()
    {
        select tmpProjUtilProject ;

        return tmpProjUtilProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjUtilProjectTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data and inserts it into the temporary table.
    /// </summary>

    public void insertProjUtilProjectTmp()
    {
        tmpProjUtilProject.Id                =   this.projectId();
        tmpProjUtilProject.Name              =   this.name();
        tmpProjUtilProject.ConsumedHours     =   utilizationHours + burdenHours + notIncludedHours;
        tmpProjUtilProject.NotIncludedHours  =   notIncludedHours;
        tmpProjUtilProject.IncludedHours     =   utilizationHours + burdenHours;
        tmpProjUtilProject.BurdenHours       =   burdenHours;
        tmpProjUtilProject.UtilizationHours  =   utilizationHours;
        tmpProjUtilProject.UtilizationRate   =   finalCalcResult;
        tmpProjUtilProject.HourDec           =   hourDec;
        tmpProjUtilProject.RateDec           =   rateDec;
        tmpProjUtilProject.HeaderLabel       =   headerLabel;
        tmpProjUtilProject.DateLabel         =   dateLabel;

        tmpProjUtilProject.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the project.
    /// </summary>
    /// <returns>
    ///    A string value that indicates the name of the project.
    /// </returns>

    public ProjName name()
    {
        ProjType projType;
        ProjSortCode sortCode;

        switch (params.parmProjView())
        {
            case ProjListStateProjType::Project:
                //strip off the star from project id before looking up name
                if (subStr(id, strLen(id), 1) == '*')
                {
                    return ProjTable::find(subStr(id, 1, strLen(id) - 1)).Name;
                }
                else
                {
                    return ProjTable::find(id).Name;
                }

            case ProjListStateProjType::Customer:
                return CustTable::find(id).name();

            case ProjListStateProjType::ProjGroup:
                return ProjGroup::find(id).Name;

            case ProjListStateProjType::WIPProject:
                return ProjTable::find(id).Name;

            case ProjListStateProjType::InvoiceProject:
                return ProjInvoiceTable::find(id).Description;

            case ProjListStateProjType::ResponsibleSales,
                ProjListStateProjType::Responsible,
                ProjListStateProjType::ResponsibleFinancial:
                return DirPartyTable::findRec(HcmWorker::findByPersonnelNumber(id).Person).Name;

            case ProjListStateProjType::Type:
                projType = str2int(id);
                return enum2str(projType);

            case ProjListStateProjType::Sorting1:
                sortCode = ProjSortValue::Sorting1;
                return ProjSorting::find(id, sortCode).Description;

            case ProjListStateProjType::Sorting2:
                sortCode = ProjSortValue::Sorting2;
                return ProjSorting::find(id, sortCode).Description;

            case ProjListStateProjType::Sorting3:
                sortCode = ProjSortValue::Sorting3;
                return ProjSorting::find(id, sortCode).Description;

            case ProjListStateProjType::Asset:
                return ProjTable::find(id).AssetId;

            case ProjListStateProjType::FundingSource:
                return ProjInvoiceTable::find(id).Description;
        }//end switch

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjUtilReportParams</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>Parameter</c> object.
    /// </summary>
    /// <param name="_params">
    ///    The <c>params</c> object to set.
    /// </param>
    /// <returns>
    ///    The parameter object.
    /// </returns>

    public ProjUtilReportParams parmProjUtilReportParams(ProjUtilReportParams _params = params)
    {
        params = _params;

        return params;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. The method should compute data and populate the data
    ///    tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjTable           projTableLocal;
        ProjFundingSource   projFundingSourceLocal;
        ProjUtilEmplContract contract = this.parmDataContract() as ProjUtilEmplContract;

        params = ProjUtilReportParams::construct();
        params.parmProjLevel(contract.parmProjLevel());
        params.parmProjView(contract.parmProjView());
        params.parmSkipBlankId(contract.parmProjSkipBlankId());
        params.parmSkipZero(contract.parmProjSkipZero());
        params.parmProjUtilCalcParams().paramFilterType(ProjUtilCalcFilterType::Project);

        if (contract.parmProjActualVsBudget() == ProjActualBudgetOnly::Actual)
        {
            params.parmProjUtilCalcParams().paramIsBudget(NoYes::No);
        }
        else
        {
            params.parmProjUtilCalcParams().paramIsBudget(NoYes::Yes);
            params.parmProjUtilCalcParams().paramForecastModelId(contract.parmProjForecastModelId());
        }

        params.parmProjUtilCalcParams().paramIsEfficiency(contract.parmProjIsEfficiency());
        params.parmProjUtilCalcParams().paramFromDate(contract.parmProjFromDate());
        params.parmProjUtilCalcParams().paramToDate(contract.parmProjToDate());

        if (!this.parmProjUtilReportParams().validate())
        {
            return;
        }

        firstRun = true;

        hourDec = ProjParameters::find().HourQtyDecimals;
        rateDec = ProjParameters::find().UtilRateDecimals;

        this.setHeaderLabels();
        this.sortQuery();

        while (queryRun.next())
        {
            projTableLocal = queryRun.get(tableNum(ProjTable));
            if (params.parmProjView() == ProjListStateProjType::FundingSource)
            {
                projFundingSourceLocal = queryRun.get(tableNum(ProjFundingSource));
            }
            this.setId(projTableLocal, projFundingSourceLocal);

            //set up parameters class for calculation
            this.setupParamsForCalc();

            [utilizationHoursBuf, burdenHoursBuf, normHoursBuf, overtimeHoursBuf, notIncludedHoursBuf, finalCalcResult] =
            ProjUtilCalc::calculate(params.parmProjUtilCalcParams());

            //handle the results: accumulate, display if necessary
            if (params.parmProjView() == ProjListStateProjType::Project)
            {
                this.executeProjectLine(projTableLocal);
            }
            else
            {
                if (id != idBuf)
                {
                    if (!firstRun) //make sure it's not the first run
                    {
                        //print out accumulated line
                        finalCalcResult = ProjUtilCalc::finalCalc(utilizationHours, burdenHours, normHours, overtimeHours, NoYes::No);
                        if (this.canPrint())
                        {
                            this.insertProjUtilProjectTmp();
                        }
                    }
                    else
                    {
                        firstRun = false;
                    }

                    this.resetAccumulators();
                    this.aggregate();

                    //set next id we'll report for
                    id = idBuf;
                }
                else //just add the values to accumulators
                {
                    this.aggregate();
                }
            }
        }

        //print out results
        finalCalcResult = ProjUtilCalc::finalCalc(utilizationHours, burdenHours, normHours, overtimeHours, NoYes::No);

        //go on to next transaction if we don't need to display this one
        if (this.canPrint())
        {
            this.insertProjUtilProjectTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displayes the ID values for the project.
    /// </summary>
    /// <returns>
    ///    A string that indicates the ID values for the project.
    /// </returns>

    public str projectId()
    {
        ProjType    typeEnum;

        #define.star('*')

        if (params.parmProjView() == ProjListStateProjType::Type)
        {
            typeEnum = str2int(id);
            return enum2str(typeEnum);
        }

        //project level 0 on view project means a total by all projects - show an asterix as id.
        if (!id && params.parmProjView() == ProjListStateProjType::Project && params.parmProjLevel() == 0)
        {
            id = #star;
        }

        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAccumulators</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the zero hour accumulators.
    /// </summary>

    protected void resetAccumulators()
    {
        utilizationHours    = 0;
        burdenHours         = 0;
        notIncludedHours    = 0;
        normHours           = 0;
        overtimeHours       = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderLabels</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the values for header labels.
    /// </summary>

    public void setHeaderLabels()
    {
        str periodLbl;

        if (params.parmProjUtilCalcParams().paramIsBudget())
        {
            headerlabel=("@SYS80981" + ' ' + params.parmProjUtilCalcParams().paramForecastModelId()); //Budget
        }
        else
        {
            headerlabel="@SYS33313"; //Actual
        }

        //Date from: %1 to %2
        periodLbl = strFmt("@SYS104135", date2StrUsr(params.parmProjUtilCalcParams().paramFromDate(), DateFlags::FormatAll),
                                         date2StrUsr(params.parmProjUtilCalcParams().paramToDate() == dateMax() ? dateNull() : params.parmProjUtilCalcParams().paramToDate(), DateFlags::FormatAll));

        dateLabel = periodLbl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID values for the project.
    /// </summary>
    /// <param name="_projTable">
    ///    The project table in which to include the data.
    /// </param>
    /// <param name="_projFundingSource">
    ///    Table which has information about customers who amy be invoiced by the associated contract
    /// </param>
    protected void setId(ProjTable _projTable, ProjFundingSource _projFundingSource)
    {
        //project we are calculating for in this iteration
        projId = _projTable.ProjId;

        switch (params.parmProjView())
        {
            case ProjListStateProjType::Project:
                idBuf = _projTable.ProjId;
                break;

            case ProjListStateProjType::Customer:
                idBuf = _projTable.CustAccount;
                break;

            case ProjListStateProjType::ProjGroup:
                idBuf = _projTable.ProjGroupId;
                break;

            case ProjListStateProjType::WIPProject:
                idBuf = _projTable.wipProject;
                break;

            case ProjListStateProjType::InvoiceProject:
                idBuf = _projTable.ProjInvoiceProjId;
                break;

            case ProjListStateProjType::ResponsibleSales:
                idBuf = HcmWorker::find(_projTable.WorkerResponsibleSales).PersonnelNumber;
                break;

            case ProjListStateProjType::Responsible:
                idBuf = HcmWorker::find(_projTable.WorkerResponsible).PersonnelNumber;
                break;

            case ProjListStateProjType::ResponsibleFinancial:
                idBuf = HcmWorker::find(_projTable.WorkerResponsibleFinancial).PersonnelNumber;
                break;

            case ProjListStateProjType::Type:
                idBuf = int2str(_projTable.Type);
                break;

            case ProjListStateProjType::Sorting1:
                idBuf = _projTable.SortingId[1];
                break;

            case ProjListStateProjType::Sorting2:
                idBuf = _projTable.SortingId[2];
                break;

            case ProjListStateProjType::Sorting3:
                idBuf = _projTable.SortingId[3];
                break;

            case ProjListStateProjType::Asset:
                idBuf = _projTable.AssetId;
                break;

            case ProjListStateProjType::FundingSource:
                if ((_projTable.ProjInvoiceProjId) != '' && (_projFundingSource.FundingSourceId != ''))
                {
                    idBuf = strFmt("@SYS313593", _projTable.ProjInvoiceProjId, _projFundingSource.FundingSourceId);
                }
                break;
        }//end switch

        //handle blank ids by replacing them with "No Id" label
        //this also ensures that if first entry has blank id, it is
        //still recognized as different from the default value and
        //will get a chance to be printed

        if (!idBuf)
        {
            idBuf = "@SYS78757";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupParamsForCalc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Set the parameters for the report.
    /// </summary>

    protected void setupParamsForCalc()
    {
        //setup filter value
        params.parmProjUtilCalcParams().paramFilterValue(projId);

        //always calculate for individual projects - aggregate later
        params.parmProjUtilCalcParams().paramFilterType(ProjUtilCalcFilterType::Project);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sorts the records that are returned by the main query.
    /// </summary>

    public void sortQuery()
    {
        queryRun =  new QueryRun(this.parmQuery());
        queryRun.query().dataSourceTable(tableNum(ProjTable)).sortClear();

        switch (params.parmProjView())
        {
            case ProjListStateProjType::Project:
                queryRun.query().dataSourceTable(tableNum(ProjTable)).addSortField(fieldNum(ProjTable,ProjId));
                break;

            case ProjListStateProjType::Customer:
                queryRun.query().dataSourceTable(tableNum(ProjTable)).addSortField(fieldNum(ProjTable,CustAccount));
                break;

            case ProjListStateProjType::ProjGroup:
                queryRun.query().dataSourceTable(tableNum(ProjTable)).addSortField(fieldNum(ProjTable,ProjGroupId));
                break;

            case ProjListStateProjType::WIPProject:
                queryRun.query().dataSourceTable(tableNum(ProjTable)).addSortField(fieldNum(ProjTable,wipProject));
                break;

            case ProjListStateProjType::InvoiceProject:
                queryRun.query().dataSourceTable(tableNum(ProjTable)).addSortField(fieldNum(ProjTable,ProjInvoiceProjId));
                break;

            case ProjListStateProjType::ResponsibleSales:
                queryRun.query().dataSourceNo(1).addSortField(fieldNum(ProjTable, WorkerResponsibleSales));
                break;

            case ProjListStateProjType::Responsible:
                queryRun.query().dataSourceNo(1).addSortField(fieldNum(ProjTable, WorkerResponsible));
                break;

            case ProjListStateProjType::ResponsibleFinancial:
                queryRun.query().dataSourceNo(1).addSortField(fieldNum(ProjTable, WorkerResponsibleFinancial));
                break;

            case ProjListStateProjType::Type:
                queryRun.query().dataSourceTable(tableNum(ProjTable)).addSortField(fieldNum(ProjTable,Type));
                break;

            case ProjListStateProjType::Sorting1:
                queryRun.query().dataSourceTable(tableNum(ProjTable)).addSortField(fieldNum(ProjTable, SortingId), SortOrder::Ascending, 1);
                break;

            case ProjListStateProjType::Sorting2:
                queryRun.query().dataSourceTable(tableNum(ProjTable)).addSortField(fieldNum(ProjTable, SortingId), SortOrder::Ascending, 2);
                break;

            case ProjListStateProjType::Sorting3:
                queryRun.query().dataSourceTable(tableNum(ProjTable)).addSortField(fieldNum(ProjTable, SortingId), SortOrder::Ascending, 3);
                break;

            case ProjListStateProjType::Asset:
                queryRun.query().dataSourceTable(tableNum(ProjTable)).addSortField(fieldNum(ProjTable, AssetId));
                break;

            case ProjListStateProjType::FundingSource:
                queryRun.query().dataSourceTable(tableNum(ProjTable)).addSortField(fieldNum(ProjTable,ProjInvoiceProjId));

                queryRun.query().dataSourceTable(tableNum(ProjTable)).addDataSource(tableNum(ProjInvoiceTable));
                queryRun.query().dataSourceTable(tableNum(ProjInvoiceTable)).joinMode(JoinMode::InnerJoin);
                queryRun.query().dataSourceTable(tableNum(ProjInvoiceTable)).addLink(fieldNum(ProjTable,ProjInvoiceProjId),fieldNum(ProjInvoiceTable,ProjInvoiceProjId));

                queryRun.query().dataSourceTable(tableNum(ProjInvoiceTable)).addDataSource(tableNum(ProjFundingSource));
                queryRun.query().dataSourceTable(tableNum(ProjFundingSource)).joinMode(JoinMode::InnerJoin);
                queryRun.query().dataSourceTable(tableNum(ProjFundingSource)).addLink(fieldNum(ProjInvoiceTable,ProjInvoiceProjId), fieldNum(ProjFundingSource,ContractId));
                queryRun.query().dataSourceTable(tableNum(ProjFundingSource)).addSortField(fieldNum(ProjFundingSource,FundingSourceId));
                break;
        }//end switch
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
