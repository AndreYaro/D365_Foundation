<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplaySysDaQueries</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class holds methods that return <c>SysDaQueryObject</c> instances with queries related to <c>WHSWorkExecuteDisplay</c>.
/// </summary>
internal final class WHSWorkExecuteDisplaySysDaQueries
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryLicensePlatesOrderedByBatchExpDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SysDaQueryObject</c> that joins InventBatch, a table with aggregated inventory information (such as inventSum) and inventDim.
    /// The results are grouped by the batch expiration date, disposition code and license plate id and ordered by the batch expiration date in ascending order.
    /// </summary>
    /// <param name = "_inventBatch">The buffer that will hold the InventBatch result</param>
    /// <param name = "_inventSumQuery">
    /// A <c>SysDaQueryObject</c> that will get all the records where physical inventory exists for the item.
    /// An example would be the SysDaQueryObject returned from WHSWorkExecuteDisplaySysDaQueries::getInventSumWithPhysicalInventForItem().
    /// </param>
    /// <param name = "_inventDim">The buffer that will hold the InventDim result</param>
    /// <param name = "_itemId">The item Id to be used as filter on InventBatch</param>
    /// <param name = "_minimumExpDate">The expiration date after which records on InventBatch will be considered.</param>
    /// <param name = "_minimumBestBeforeDate">The best before date after which records on InventBatch will be considered.</param>
    /// <param name = "_inventDimCriteria">An InventDim buffer with the constraints on InventDim.</param>
    /// <returns>An instance of <c>SysDaQueryObject</c>.</returns>
    /// <remarks>Either _minimumExpDate or _minimumBestBeforeDate will always be dateNull (because of item model group pick criteria) so it is possible to use "and" condition.</remarks>
    [Hookable(false)]
    internal static SysDaQueryObject buildQueryLicensePlatesOrderedByBatchExpDate(
        InventBatch         _inventBatch,
        SysDaQueryObject    _inventSumQuery,
        InventDim           _inventDim,
        ItemId              _itemId,
        InventBatchExpDate  _minimumExpDate,
        PdsBestBeforeDate   _minimumBestBeforeDate, 
        InventDim           _inventDimCriteria)
    {
        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(_inventDimCriteria);

        // InventBatch
        SysDaQueryObject inventBatchQuery = new SysDaQueryObject(_inventBatch);

        inventBatchQuery.groupByClause().add(fieldStr(InventBatch, PdsDispositionCode));
        inventBatchQuery.groupByClause().add(fieldStr(InventBatch, expDate));
        inventBatchQuery.orderByClause().add(fieldStr(InventBatch, expDate));

        SysDaQueryExpression inventBatchWhereClause = new SysDaEqualsExpression(new SysDaFieldExpression(_inventBatch, fieldStr(InventBatch, ItemId)), new SysDaValueExpression(_itemId))
            .and(new SysDaGreaterThanOrEqualsExpression(new SysDaFieldExpression(_inventBatch, fieldStr(InventBatch, expDate)), new SysDaValueExpression(_minimumExpDate)));

        inventBatchWhereClause = inventBatchWhereClause.and(new SysDaGreaterThanOrEqualsExpression(new SysDaFieldExpression(_inventBatch, fieldStr(InventBatch, PdsBestBeforeDate)), new SysDaValueExpression(_minimumBestBeforeDate)));

        inventBatchQuery.whereClause(inventBatchWhereClause);

        // InventDim
        SysDaQueryObject inventDimQuery = InventDimQueryBuilder::newFromQuery(_inventDim, _inventDimCriteria, inventDimParm).joinClause(new SysDaFieldExpression(_inventSumQuery.table(), identifierStr(InventDimId)));
        
        SysDaQueryExpression inventDimWhereClause = new SysDaEqualsExpression(new SysDaFieldExpression(_inventDim, fieldStr(InventDim, inventBatchId)), new SysDaFieldExpression(_inventBatch, fieldStr(InventBatch, inventBatchId)));

        inventDimQuery.whereClause(inventDimQuery.whereClause().and(inventDimWhereClause));
        inventDimQuery.groupByClause().add(fieldStr(InventDim, LicensePlateId));
        
        _inventSumQuery.joinClause(
            SysDaJoinKind::InnerJoin,
            inventDimQuery);

        inventBatchQuery.joinClause(
            SysDaJoinKind::InnerJoin,
            _inventSumQuery);

        return inventBatchQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryLPsByBatchExpDateForInvSumOrInvSumInvDimUnionDeltaInvDimPhysicalQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SysDaQueryObject</c> that joins InventBatch, a table with aggregated inventory information, and Common table that is either 
    /// an InventSum or InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.
    /// The results are grouped by the batch expiration date, disposition code and license plate id and ordered by the batch expiration date in ascending order.
    /// </summary>
    /// <param name = "_inventBatch">The buffer that will hold the InventBatch result</param>
    /// <param name = "_queryObject">
    /// A <c>SysDaQueryObject</c> that will get all the records where physical inventory exists for the item.
    /// An example would be the SysDaQueryObject returned from WHSWorkExecuteDisplaySysDaQueries::getInventSumWithPhysicalInventForItem().
    /// </param>
    /// <param name = "_tableOrView">The buffer that will hold either the InventSum or InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty result</param>
    /// <param name = "_itemId">The item Id to be used as filter on InventBatch</param>
    /// <param name = "_minimumExpDate">The expiration date after which records on InventBatch will be considered.</param>
    /// <param name = "_minimumBestBeforeDate">The best before date after which records on InventBatch will be considered.</param>
    /// <param name = "_inventDimCriteria">An InventDim buffer with the constraints on InventDim.</param>
    /// <returns>An instance of <c>SysDaQueryObject</c>.</returns>
    /// <remarks>Either _minimumExpDate or _minimumBestBeforeDate will always be dateNull (because of item model group pick criteria) so it is possible to use "and" condition.</remarks>
    [Hookable(false)]
    internal static SysDaQueryObject buildQueryLPsByBatchExpDateForInvSumOrInvSumInvDimUnionDeltaInvDimPhysicalQty(
        InventBatch             _inventBatch,
        SysDaQueryObject        _queryObject,
        Common                  _tableOrView,
        ItemId                  _itemId,
        InventBatchExpDate      _minimumExpDate,
        PdsBestBeforeDate       _minimumBestBeforeDate,
        InventDim               _inventDimCriteria)
    {
        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(_inventDimCriteria);

        // InventBatch
        SysDaQueryObject inventBatchQuery = new SysDaQueryObject(_inventBatch);
        
        inventBatchQuery.groupByClause().add(fieldStr(InventBatch, PdsDispositionCode));
        inventBatchQuery.groupByClause().add(fieldStr(InventBatch, expDate));
        inventBatchQuery.orderByClause().add(fieldStr(InventBatch, expDate));

        SysDaQueryExpression inventBatchWhereClause = new SysDaEqualsExpression(new SysDaFieldExpression(_inventBatch, fieldStr(InventBatch, ItemId)), new SysDaValueExpression(_itemId))
            .and(new SysDaGreaterThanOrEqualsExpression(
                new SysDaFieldExpression(_inventBatch, fieldStr(InventBatch, expDate)), new SysDaValueExpression(_minimumExpDate)));

        inventBatchWhereClause = inventBatchWhereClause.and(
            new SysDaGreaterThanOrEqualsExpression(new SysDaFieldExpression(_inventBatch, fieldStr(InventBatch, PdsBestBeforeDate)), new SysDaValueExpression(_minimumBestBeforeDate)));
        
        inventBatchQuery.whereClause(inventBatchWhereClause);

        str fieldStringBatchId = WHSWorkExecuteDisplaySysDaQueries::getFieldStringBatchIdForInvSumOrInvSumWithInvDimUnionDeltaWithInvDimPhysicalQty(_tableOrView);

        SysDaQueryExpression inventSumMatchInventBatchWhereClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(_tableOrView, fieldStringBatchId) , new SysDaFieldExpression(_inventBatch, fieldStr(InventBatch, inventBatchId)));

        SysDaQueryExpression selectedInventSumClause = new SysDaEqualsExpression(new SysDaValueExpression(true), new SysDaValueExpression(true));
        
        ListEnumerator dimFields = InventDim::dimEnabledFieldList().getEnumerator();

        while (dimFields.moveNext())
        {
            if (inventDimParm.isFieldIdEnabled(dimFields.current()))
            {
                FieldId dimFieldId = WHSWorkExecuteDisplaySysDaQueries::getDimFieldIdForInvSumOrInvSumWithInvDimUnionDeltaWithInvDimPhysicalQty(_tableOrView, dimFields.current());

                selectedInventSumClause = selectedInventSumClause
                    .and(
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(_tableOrView, fieldId2Name(_tableOrView.tableId, dimFieldId)),
                            new SysDaValueExpression(_inventDimCriteria.(dimFields.current()))));
            }
        }

        _queryObject.whereClause(_queryObject.whereClause().and(selectedInventSumClause));
        _queryObject.whereClause(_queryObject.whereClause().and(inventSumMatchInventBatchWhereClause));

        str fieldStringLicensePlateId = WHSWorkExecuteDisplaySysDaQueries::getFieldStringLPIdForInvSumOrInvSumWithInvDimUnionDeltaWithInvDimPhysicalQty(_tableOrView);
        _queryObject.groupByClause().add(fieldStringLicensePlateId);

        inventBatchQuery.joinClause(
            SysDaJoinKind::InnerJoin,
            _queryObject);

        return inventBatchQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryInventSumWithPhysicalInventForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SysDaQueryObject</c> that retrieves all the records from InventSum that have physical inventory for a provided item.
    /// </summary>
    /// <param name = "_inventSum">The buffer that will hold the InvenSum result</param>
    /// <param name = "_itemId">The item Id to be used as filter on InventSum.</param>
    /// <returns>An instance of <c>SysDaQueryObject</c></returns>
    [Hookable(false)]
    internal static SysDaQueryObject buildQueryInventSumWithPhysicalInventForItem(InventSum _inventSum, ItemId _itemId)
    {
        boolean isCWItem = PdsGlobal::pdsIsCWItem(_itemId);

        SysDaQueryObject inventSumQuery = new SysDaQueryObject(_inventSum);
        
        SysDaQueryExpression inventSumWhereClause = new SysDaEqualsExpression(new SysDaFieldExpression(_inventSum, fieldStr(InventSum, ItemId)), new SysDaValueExpression(_itemId))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_inventSum, fieldStr(InventSum, ClosedQty)), new SysDaValueExpression(NoYes::No)))
            .and(new SysDaOrExpression(
                    new SysDaAndExpression(
                        new SysDaValueExpression(isCWItem),
                        new SysDaGreaterThanExpression(new SysDaFieldExpression(_inventSum, fieldStr(InventSum, PdsCWPhysicalInvent)), new SysDaValueExpression(0))),
                    new SysDaAndExpression(
                        new SysDaValueExpression(!isCWItem),
                        new SysDaGreaterThanExpression(new SysDaFieldExpression(_inventSum, fieldStr(InventSum, PhysicalInvent)), new SysDaValueExpression(0)))));

        inventSumQuery.whereClause(inventSumWhereClause);

        return inventSumQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryInventSumUnionDeltaPhysicalQtyWithPhysicalInventForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SysDaQueryObject</c> that retrieves all the records from InventSumUnionDeltaPhysicalQty that have physical inventory for a provided item.
    /// </summary>
    /// <param name = "_inventSumUnionDeltaPhysicalQty">The buffer that will hold the InventSumUnionDeltaPhysicalQty result</param>
    /// <param name = "_itemId">The item Id to be used as filter on InventSumUnionDeltaPhysicalQty.</param>
    /// <returns>An instance of <c>SysDaQueryObject</c></returns>
    [Hookable(false)]
    internal static SysDaQueryObject buildQueryInventSumUnionDeltaPhysicalQtyWithPhysicalInventForItem(InventSumUnionDeltaPhysicalQty _inventSumUnionDeltaPhysicalQty, ItemId _itemId)
    {
        boolean isCWItem = PdsGlobal::pdsIsCWItem(_itemId);

        SysDaQueryObject inventSumUnionDeltaPhysicalQtyQuery = new SysDaQueryObject(_inventSumUnionDeltaPhysicalQty);
        
        SysDaQueryExpression inventSumWhereClause = new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventSumUnionDeltaPhysicalQty, fieldStr(InventSumUnionDeltaPhysicalQty, ItemId)), new SysDaValueExpression(_itemId))
                    .and(new SysDaOrExpression(
                            new SysDaAndExpression(
                                new SysDaValueExpression(isCWItem),
                                new SysDaGreaterThanExpression(
                                    new SysDaFieldExpression(_inventSumUnionDeltaPhysicalQty, fieldStr(InventSumUnionDeltaPhysicalQty, PdsCWPhysicalInvent)), new SysDaValueExpression(0))),
                            new SysDaAndExpression(
                                new SysDaValueExpression(!isCWItem),
                                new SysDaGreaterThanExpression(
                                    new SysDaFieldExpression(_inventSumUnionDeltaPhysicalQty, fieldStr(InventSumUnionDeltaPhysicalQty, PhysicalInvent)), new SysDaValueExpression(0)))));

        inventSumUnionDeltaPhysicalQtyQuery.whereClause(inventSumWhereClause);

        return inventSumUnionDeltaPhysicalQtyQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryInventSumWithInventDimUnionDeltaPhysicalQtyWithPhysicalInventForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SysDaQueryObject</c> that retrieves all the records from InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty that have physical inventory for a provided item.
    /// </summary>
    /// <param name = "_inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty">The buffer that will hold the InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty result</param>
    /// <param name = "_itemId">The item Id to be used as filter on InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.</param>
    /// <returns>An instance of <c>SysDaQueryObject</c></returns>
    [Hookable(false)]
    internal static SysDaQueryObject buildQueryInventSumWithInventDimUnionDeltaPhysicalQtyWithPhysicalInventForItem(
        InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty _inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, ItemId _itemId)
    {
        boolean isCWItem = PdsGlobal::pdsIsCWItem(_itemId);

        SysDaQueryObject inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty = new SysDaQueryObject(_inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty);
        
        SysDaQueryExpression inventSumWhereClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(_inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, fieldStr(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, ItemId)), new SysDaValueExpression(_itemId))
                .and(new SysDaOrExpression(
                        new SysDaAndExpression(
                            new SysDaValueExpression(isCWItem),
                            new SysDaGreaterThanExpression(
                                new SysDaFieldExpression(_inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, 
                                        fieldStr(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, 
                                        PdsCWPhysicalInvent)), new SysDaValueExpression(0))),
                        new SysDaAndExpression(
                            new SysDaValueExpression(!isCWItem),
                            new SysDaGreaterThanExpression(
                                new SysDaFieldExpression(_inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, 
                                        fieldStr(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, 
                                        PhysicalInvent)), new SysDaValueExpression(0)))));

        inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.whereClause(inventSumWhereClause);

        return inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldStringLPIdForInvSumOrInvSumWithInvDimUnionDeltaWithInvDimPhysicalQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    private static str getFieldStringLPIdForInvSumOrInvSumWithInvDimUnionDeltaWithInvDimPhysicalQty(Common _tableOrView)
    {
        if (_tableOrView.tableId == tableNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty))
        {
            return fieldStr(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, LicensePlateId);
        }
        else if (_tableOrView.tableId == tableNum(InventSum))
        {
            return fieldStr(InventSum, LicensePlateId);
        }
        
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldStringBatchIdForInvSumOrInvSumWithInvDimUnionDeltaWithInvDimPhysicalQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    private static str getFieldStringBatchIdForInvSumOrInvSumWithInvDimUnionDeltaWithInvDimPhysicalQty(Common _tableOrView)
    {
        if (_tableOrView.tableId == tableNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty))
        {
            return fieldStr(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, inventBatchId);
        }
        else if (_tableOrView.tableId == tableNum(InventSum))
        {
            return fieldStr(InventSum, inventBatchId);
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimFieldIdForInvSumOrInvSumWithInvDimUnionDeltaWithInvDimPhysicalQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    private static FieldId getDimFieldIdForInvSumOrInvSumWithInvDimUnionDeltaWithInvDimPhysicalQty(Common _tableOrView, anytype dimField)
    {
        if (_tableOrView.tableId == tableNum(InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty))
        {
            return InventDim::getInventSumInventDimUnionDeltaInventDimPhysicalQtyFieldIdFromInventDimFieldId(dimField);
        }
        else if (_tableOrView.tableId == tableNum(InventSum))
        {
            return InventDim::getInventSumFieldIdFromInventDimFieldId(dimField);
        }
        
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>