<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCertificationDP_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdCertificationDP_IT</c> class is the Report Data Provider class for the <c>TaxWithholdCertification_IT</c> report.
/// </summary>
[
    SRSReportQuery(querystr(TaxWithholdCertification_IT)),
    SRSReportParameterAttribute(classstr(TaxWithholdCertificationContract_IT))
]
class TaxWithholdCertificationDP_IT extends SRSReportDataProviderBase
{
    private const str FeatureReference = 'IT-00018';

    VendAccount fromVendAccount;
    VendAccount toVendAccount;
    TransDate fromPaymentDate;
    TransDate toPaymentDate;
    TransDate fromCompetenceDate;
    TransDate toCompetenceDate;
    AmountCur sumTotalAmount;
    AmountCur sumTaxNotTaxableExpenses;
    AmountCur sumTaxNotTaxableByTreaty;
    AmountCur sumTaxExemptedAmount;
    AmountCur sumTaxWithholdBaseAmount;
    AmountCur sumTaxTaxWithholdAmount;
    AmountCur sumNetAmount;
    AmountCur sumTaxReimbursement;
    RecordSortedList taxWithholdTransAdvance;
    RecordSortedList taxWithholdTransNotReported;
    RecordSortedList taxWithholdTransReported;
    TempStr headingText;
    TempStr footerText;
    TaxWithholdTrans taxWithholdTrans;
    TaxWithholdTable taxWithholdTable;
    VendTable vendTable;
    TaxWithholdCertificationTmp_IT taxWithholdCertificationTmp_IT;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdCertificationTmp_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>TaxWithholdCertificationTmp_IT</c> temporary table.
    /// </summary>
    /// <returns>
    /// Data from the <c>TaxWithholdCertificationTmp_IT</c> table.
    /// </returns>
    [
        SRSReportDataSet(tablestr(TaxWithholdCertificationTmp_IT))
    ]
    public TaxWithholdCertificationTmp_IT getTaxWithholdCertificationTmp_IT()
    {
        select * from taxWithholdCertificationTmp_IT;
        return taxWithholdCertificationTmp_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the global variables.
    /// </summary>
    public void init()
    {
        taxWithholdTransAdvance = new RecordSortedList(tablenum(TaxWithholdTrans));
        taxWithholdTransAdvance.sortOrder(fieldnum(TaxWithholdTrans, TaxWithholdCode));

        taxWithholdTransNotReported = new RecordSortedList(tablenum(TaxWithholdTrans));
        taxWithholdTransNotReported.sortOrder(fieldnum(TaxWithholdTrans, TaxWithholdCode));

        taxWithholdTransReported = new RecordSortedList(tablenum(TaxWithholdTrans));
        taxWithholdTransReported.sortOrder(fieldnum(TaxWithholdTrans, TaxWithholdCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>Query</c> object with the input values.
    /// </summary>
    /// <param name="_query">
    /// The current query of the report.
    /// </param>
    protected void initQuery(Query _query)
    {
        if (fromVendAccount && toVendAccount)
        {
            _query.dataSourceTable(tableNum(TaxWithholdTrans)).addRange(fieldnum(TaxWithholdTrans, VendAccount)).value(queryRange(fromVendAccount, toVendAccount));
        }
        else
        {
            _query.dataSourceTable(tablenum(TaxWithholdTrans)).clearRange(fieldnum(TaxWithholdTrans, VendAccount));
        }

        if (fromPaymentDate && toPaymentDate)
        {
            _query.dataSourceTable(tableNum(TaxWithholdTrans)).addRange(fieldnum(TaxWithholdTrans, TransDate)).value(queryRange(fromPaymentDate, toPaymentDate));
        }
        else
        {
            _query.dataSourceTable(tablenum(TaxWithholdTrans)).clearRange(fieldnum(TaxWithholdTrans, TransDate));
        }

        if (fromCompetenceDate && toCompetenceDate)
        {
            _query.dataSourceTable(tableNum(TaxWithholdTrans)).addRange(fieldnum(TaxWithholdTrans, CompetenceDate)).value(queryRange(fromCompetenceDate, toCompetenceDate));
        }
        else
        {
            _query.dataSourceTable(tablenum(TaxWithholdTrans)).clearRange(fieldnum(TaxWithholdTrans, CompetenceDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxWithholdCertificationTmp_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>TaxWithholdCertificationTmp_IT</c> temporary table based on the input string.
    /// </summary>
    private void insertTaxWithholdCertificationTmp_IT()
    {
        taxWithholdCertificationTmp_IT.AccountNum = vendTable.AccountNum;
        taxWithholdCertificationTmp_IT.BirthDate = vendTable.birthDate();
        taxWithholdCertificationTmp_IT.BirthPlace = vendTable.BirthPlace;
        taxWithholdCertificationTmp_IT.TaxWithholdName = taxWithholdTable.TaxWithholdName;
        taxWithholdCertificationTmp_IT.TotalAmount = taxWithholdTrans.TaxNotTaxableExpenses  +
                                                     taxWithholdTrans.TaxNotTaxableByTreaty  +
                                                     taxWithholdTrans.TaxExemptedAmount      +
                                                     taxWithholdTrans.TaxWithholdBaseAmount;
        taxWithholdCertificationTmp_IT.TaxNotTaxableExpenses = sumTaxNotTaxableExpenses;
        taxWithholdCertificationTmp_IT.TaxNotTaxableByTreaty = sumTaxNotTaxableByTreaty;
        taxWithholdCertificationTmp_IT.TaxExemptedAmount = sumTaxExemptedAmount;
        taxWithholdCertificationTmp_IT.TaxWithholdBaseAmount = sumTaxWithholdBaseAmount;
        taxWithholdCertificationTmp_IT.TaxTaxWithholdAmount = sumTaxTaxWithholdAmount;
        taxWithholdCertificationTmp_IT.NetAmount = sumNetAmount;
        taxWithholdCertificationTmp_IT.TaxReimbursement = sumTaxReimbursement;
        taxWithholdCertificationTmp_IT.CompanyName = CompanyInfo::find().name();
        taxWithholdCertificationTmp_IT.CompanyAddress = CompanyInfo::find().postalAddress().Address;
        taxWithholdCertificationTmp_IT.CompanyCoRegNum = CompanyInfo::find().CoRegNum;
        taxWithholdCertificationTmp_IT.VendName = vendTable.name();
        taxWithholdCertificationTmp_IT.VendAddress = vendTable.postalAddress().Address;
        taxWithholdCertificationTmp_IT.FiscalCode = vendTable.FiscalCode;
        taxWithholdCertificationTmp_IT.ResidenceForeignCountryName = LogisticsAddressCountryRegion::name(vendTable.ResidenceForeignCountryRegionId);
        taxWithholdCertificationTmp_IT.LegalInformation = this.legalInformation();
        taxWithholdCertificationTmp_IT.HeadingText = headingText;
        taxWithholdCertificationTmp_IT.Footerext = footerText;
        taxWithholdCertificationTmp_IT.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>legalInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the legal information string.
    /// </summary>
    /// <returns>
    /// A string value of legal information.
    /// </returns>
    public str legalInformation()
    {
        TransDate tmpFromCompetenceDate = fromCompetenceDate;
        TransDate tmpToCompetenceDate = toCompetenceDate;
        TaxWithholdTrans taxWithholdTransLoc;

        if (!tmpFromCompetenceDate)
        {
            select minof(CompetenceDate) from taxWithholdTransLoc
                where taxWithholdTransLoc.VendAccount == taxWithholdTrans.VendAccount &&
                      taxWithholdTransLoc.TransDate   >= fromPaymentDate &&
                      taxWithholdTransLoc.TransDate   <= toPaymentDate;
            tmpFromCompetenceDate = taxWithholdTransLoc.CompetenceDate;
        }

        if (!tmpToCompetenceDate)
        {
            select maxof(CompetenceDate) from taxWithholdTransLoc
                where taxWithholdTransLoc.VendAccount == taxWithholdTrans.VendAccount &&
                      taxWithholdTransLoc.TransDate   >= fromPaymentDate &&
                      taxWithholdTransLoc.TransDate   <= toPaymentDate;
            tmpToCompetenceDate = taxWithholdTransLoc.CompetenceDate;
        }

        return strfmt("@SYS81840", tmpFromCompetenceDate, tmpToCompetenceDate) + " " +
               strfmt("@SYS81779", fromPaymentDate, toPaymentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printRecordSortedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the filed sums.
    /// </summary>
    /// <param name="_recordSortedList">
    /// To sort the report data.
    /// </param>
    /// <param name="_headingText">
    /// The text to display on the report header.
    /// </param>
    /// <param name="_footerText">
    /// The text to display on the report footer.
    /// </param>
    public void printRecordSortedList(RecordSortedList _recordSortedList,
                                      TempStr _headingText,
                                      TempStr _footerText)
    {
        boolean  found = _recordSortedList.first(taxWithholdTrans);

        if (found)
        {
            headingText = _headingText;
            footerText = _footerText;

            while (found)
            {
                taxWithholdTable = TaxWithholdTable::find(taxWithholdTrans.TaxWithholdCode);

                sumTotalAmount += (taxWithholdTrans.TaxNotTaxableExpenses  +
                                   taxWithholdTrans.TaxNotTaxableByTreaty  +
                                   taxWithholdTrans.TaxExemptedAmount      +
                                   taxWithholdTrans.TaxWithholdBaseAmount);
                sumTaxNotTaxableExpenses += taxWithholdTrans.TaxNotTaxableExpenses;
                sumTaxNotTaxableByTreaty += taxWithholdTrans.TaxNotTaxableByTreaty;
                sumTaxExemptedAmount += taxWithholdTrans.TaxExemptedAmount;
                sumTaxWithholdBaseAmount += taxWithholdTrans.TaxWithholdBaseAmount;
                sumTaxTaxWithholdAmount += taxWithholdTrans.TaxTaxWithholdAmount;
                sumNetAmount += (taxWithholdTrans.TaxWithholdBaseAmount - taxWithholdTrans.TaxTaxWithholdAmount);
                sumTaxReimbursement += taxWithholdTrans.TaxReimbursement_IT;

                _recordSortedList.del(taxWithholdTrans);
                found = _recordSortedList.next(taxWithholdTrans);
                this.insertTaxWithholdCertificationTmp_IT();
            }
            sumTotalAmount = 0;
            sumTaxNotTaxableExpenses = 0;
            sumTaxNotTaxableByTreaty = 0;
            sumTaxExemptedAmount = 0;
            sumTaxWithholdBaseAmount = 0;
            sumTaxTaxWithholdAmount = 0;
            sumNetAmount = 0;
            sumTaxReimbursement = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printTaxWithholdTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>printRecordSortedList</c> method with different parameter combinations.
    /// </summary>
    public void printTaxWithholdTrans()
    {
        this.printRecordSortedList(taxWithholdTransAdvance, "@SYS81855", "@SYS81856");
        this.printRecordSortedList(taxWithholdTransNotReported, "@SYS81857", "@SYS81858");
        this.printRecordSortedList(taxWithholdTransReported, "@SYS81859", "@SYS81860");
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic.This method will be called by SSRS at
    /// runtime.The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        TaxWithholdCertificationContract_IT taxWithholdCertificationContract_IT = this.parmDataContract() as TaxWithholdCertificationContract_IT;

        fromVendAccount = taxWithholdCertificationContract_IT.parmFromVendAccount();
        toVendAccount = taxWithholdCertificationContract_IT.parmToVendAccount();
        fromPaymentDate = taxWithholdCertificationContract_IT.parmFromPaymentDate();
        toPaymentDate = taxWithholdCertificationContract_IT.parmToPaymentDate();
        fromCompetenceDate = taxWithholdCertificationContract_IT.parmFromCompetenceDate();
        toCompetenceDate = taxWithholdCertificationContract_IT.parmToCompetenceDate();

        this.init();
        Query q = new Query(this.parmQuery().name());
        this.initQuery(q);
        QueryRun qr = new QueryRun(q);

        while (qr.next())
        {
            taxWithholdTable = qr.get(tablenum(TaxWithholdTable));
            taxWithholdTrans = qr.get(tablenum(TaxWithholdTrans));
            taxWithholdTrans.TaxWithholdCode = taxWithholdTable.TaxWithholdCode;
            vendTable = VendTable::find(taxWithholdTrans.VendAccount);

            if (taxWithholdTable.TaxWithholdSource)
            {
                if (taxWithholdTable.TaxWithholdRecipient)
                {
                    taxWithholdTransReported.ins(taxWithholdTrans);
                }
                else
                {
                    taxWithholdTransNotReported.ins(taxWithholdTrans);
                }
            }
            else
            {
                taxWithholdTransAdvance.ins(taxWithholdTrans);
            }
            this.printTaxWithholdTrans();
        }
        this.printTaxWithholdTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdExclude</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>TaxWithholdExclude</c> value.
    /// </summary>
    /// <returns>
    /// The <c>TaxWithholdExclude</c> value.
    /// </returns>
    private TaxWithholdExclude taxWithholdExclude()
    {
        TaxWithholdExclude taxWithholdExclude;
        AmountCur tmpAmount = taxWithholdTrans.TaxExemptedAmount + taxWithholdTrans.TaxWithholdBaseAmount;

        if (tmpAmount)
        {
            taxWithholdExclude = taxWithholdTrans.TaxExemptedAmount * 100 / tmpAmount;
        }
        return taxWithholdExclude;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>