<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaServiceOrderAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SMAServiceOrderAction</c> class is a command-pattern class that implements typical service
/// order actions.
/// </summary>
class SmaServiceOrderAction extends RunBaseBatch implements BatchRetryable
{
    FormRun                           formRun;
    FormDataSource                    formRun_ds;
    SMAServiceOrderMultiSelectContext multiSelectContext;
    SMAServiceOrderTable              record;
    SMAServiceOrderActionType         actionType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actionCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the service order.
    /// </summary>
    private void actionCancel()
    {
        // Cancel record
        if (record)
        {
            record.updateCancelRevokeLines();
        }

        // Update detail form
        if (formRun)
        {
            this.refreshHeader();
            this.executeQueryLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>actionPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the service order.
    /// </summary>
    private void actionPost()
    {
        if (record)
        {
            record.updateProgress();
        }

        if (formRun)
        {
            this.refreshHeader();
            this.executeQueryLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>actionRevoke</Name>
				<Source><![CDATA[
    /// <summary>
    /// Revokes a service order that is canceled.
    /// </summary>
    private void actionRevoke()
    {
        // Revoke record
        if (record)
        {
            record.updateCancelRevokeLines(true);
        }

        // Update detail form
        if (formRun)
        {
            this.refreshHeader();
            this.executeQueryLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>actionTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers a service order that originated from the Web.
    /// </summary>
    private void actionTransfer()
    {
        container               tmpContainer;
        SMAServiceOrderTable    serviceOrder;

        serviceOrder = multiSelectContext.getFirst();
        if (!serviceOrder)
        {
            serviceOrder = record;
        }

        if (serviceOrder)
        {
            // Construct list of ids
            while (serviceOrder)
            {
                tmpContainer = conins(tmpContainer, 1, serviceOrder.ServiceOrderId);
                serviceOrder = multiSelectContext.getNext();
            }

            // Call table method
            SMAServiceOrderTable::updateIncomingWebOrders(tmpContainer);
        }

        // Refresh detail form
        if (formRun_ds)
        {
            formRun_ds.executeQuery();
        }

        this.setButtonAccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQueryLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the <c>queryLines</c> method of the target when this method is called for a <c>FormRun</c>
    /// object.
    /// </summary>
    public void executeQueryLines()
    {
        Object  formRunObject;

        if (formRun && formRun.name() == formstr(SMAServiceOrderTable))
        {
            if (formHasMethod(formRun, identifierstr(executeQueryLines)))
            {
                formRunObject = formRun;
                formRunObject.executeQueryLines();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance from the specified arguments.
    /// </summary>
    /// <param name="_args">
    /// The arguments from which to initialize the instance.
    /// </param>
    public void initFromArgs(Args _args)
    {
        if ( _args )
        {
            multiSelectContext = SMAServiceOrderMultiSelectContext::construct(_args);

            // Initialize from detail page
            if ( _args.caller() && _args.caller().name() == formstr(SMAServiceOrderTable) )
            {
                formRun    = _args.caller();
                formRun_ds = formRun.dataSource(tablestr(SMAServiceOrderTable));
                record     = formRun_ds.cursor();
            }
            // Initialize from list page
            else
            {
                record = _args.record();
            }

            // Get which action to perform
            if (_args.parmEnumType() == enumnum(SMAServiceOrderActionType))
            {
                actionType = _args.parmEnum();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates default instance of the class.
    /// </summary>
    public void new()
    {
        super();

        actionType = SMAServiceOrderActionType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the <c>refreshHeader</c> method of the target when this method is called for a
    /// <c>FormRun</c> object.
    /// </summary>
    public void refreshHeader()
    {
        Object  formRunObject;

        if (formRun && formRun.name() == formstr(SMAServiceOrderTable))
        {
            if (formHasMethod(formRun, identifierstr(refreshHeader)))
            {
                formRunObject = formRun;
                formRunObject.refreshHeader();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the encapsulated action.
    /// </summary>
    public void run()
    {
        switch (actionType)
        {
            case SMAServiceOrderActionType::Cancel:
                this.actionCancel();
                break;
            case SMAServiceOrderActionType::Revoke:
                this.actionRevoke();
                break;
            case SMAServiceOrderActionType::Transfer:
                this.actionTransfer();
                break;
            case SMAServiceOrderActionType::Post:
                this.actionPost();
                break;
            default:
                error("@SYS83964");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the <c>setButtonAccess</c> method of the target when this method is called for a
    /// <c>FormRun</c> object.
    /// </summary>
    public void setButtonAccess()
    {
        Object  formRunObject;

        if (formRun && formHasMethod(formRun, identifierstr(setButtonAccess)))
        {
            formRunObject = formRun;
            formRunObject.setButtonAccess();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// MenuItem entry point.
    /// </summary>
    /// <param name="_args">
    /// Instanse of <c>Args</c> passed by the caller.
    /// </param>
    public static void main(Args _args)
    {
        SMAServiceOrderAction action;

        action = SMAServiceOrderAction::newForm(_args);
        action.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance for a form.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the form.
    /// </param>
    /// <returns>
    /// The object that was initialized.
    /// </returns>
    public static SMAServiceOrderAction newForm(Args _args)
    {
        SMAServiceOrderAction   action;

        action = new SMAServiceOrderAction();
        action.getLast();
        action.initFromArgs(_args);

        return action;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>