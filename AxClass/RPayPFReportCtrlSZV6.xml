<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportCtrlSZV6</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class RPayPFReportCtrlSZV6 extends RPayPFReportCtrl
{
    IRPayPFReportData       dataProviderSeniority;
    IRPayPFReportCommand    commandSeniority;

    RPayPFSeniorityType     keySpecialSeniority;
    str                     categoryDisId;

    Map                     categoryPeriods;

    ReportPeriod_RU         seniorityStartPeriod,
                            seniorityEndPeriod;

    RPayReportCommandSZV6   fundAmountCommand, seniorityCommand;

    RPayAmount              fundAmountIns, fundAmountSto, deductionPctBase;
    RPayAmount              totalExtra1FundTotalAmount, totalExtra2FundTotalAmount;
    Counter                 emplNo;
    RPayCounterUnit         pensionExtra1fund, pensionExtra2fund;

    container               prevKey;

    Set                     selectedEmpl, validEmpl;
    Range                   deductionCodeExceedMax;
    RPayRateCode            foreignerRate, livingTypeRate;

    #RPayPFReportSZV6
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkSpecialSeniority</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected RPayPFSeniorityType checkSpecialSeniority()
    {
        RHRMEmplTable                   emplTableExist;
        RPayCivilContract               civilContract;
        RPayCivilContractType           contractTypes;
        RHRMOrderTrans                  orderTrans;
        RHRMOrderTable                  orderTable;
        RHRMVacationType                vacationType;
        RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTable,
                                        corrAverageEarnEmplPeriodTable;
        RPaySickIllParameters           sickIllParameters;

        select firstonly RecId from civilContract
            where civilContract.StartDate        <= seniorityEndPeriod          &&
                  (! civilContract.EndDate                                       ||
                  civilContract.EndDate          >= seniorityStartPeriod)
        join TableId from contractTypes
            where contractTypes.CivilContractTypeCode == civilContract.CivilContractTypeCode &&
                  contractTypes.InsuranceSeniorityTypeId
        exists join emplTableExist
            where emplTableExist.EmployeeId    == civilContract.EmplId        &&
                  emplTableExist.PayMainEmplId == keyEmplId;

        if (civilContract.RecId != 0)
        {
            return RPayPFSeniorityType::Special;
        }

        select firstonly RecId from orderTrans
            where orderTrans.StartDate           <= seniorityEndPeriod
               && orderTrans.EndDate             >= seniorityStartPeriod
        join TableId from vacationType
            where vacationType.VacationTypeId    == orderTrans.VacationTypeId
                && vacationType.InsuranceSeniorityTypeId
        exists join orderTable
            where orderTable.JournalId           == orderTrans.JournalId
               && orderTable.JournalType         == RHRMJournalType::Vacation
               && orderTable.Posted              == NoYes::Yes
        exists join emplTableExist
            where emplTableExist.EmployeeId      == orderTrans.EmplId
               && emplTableExist.PayMainEmplId   == keyEmplId;

        if (orderTrans.RecId != 0)
        {
            return RPayPFSeniorityType::Special;
        }

        while select EmplId, StartDate, RpaySickListId from averageEarnEmplPeriodTable
            where averageEarnEmplPeriodTable.StartDate           <= seniorityEndPeriod
               && averageEarnEmplPeriodTable.EndDate             >= seniorityStartPeriod
               && averageEarnEmplPeriodTable.averageEarnCodeType == RPayAverageEarnCodeType::SickList
               && ! averageEarnEmplPeriodTable.CorrectedSickListId
        join TableId from sickIllParameters
            where sickIllParameters.PayIllType          == averageEarnEmplPeriodTable.RpayIllType
               && sickIllParameters.InsuranceSeniorityTypeId
        exists join emplTableExist
            where emplTableExist.EmployeeId    == averageEarnEmplPeriodTable.EmplId
               && emplTableExist.PayMainEmplId == keyEmplId
        {
            select firstonly corrAverageEarnEmplPeriodTable
                where corrAverageEarnEmplPeriodTable.EmplId              == averageEarnEmplPeriodTable.EmplId
                   && corrAverageEarnEmplPeriodTable.StartDate           == averageEarnEmplPeriodTable.StartDate
                   && corrAverageEarnEmplPeriodTable.CorrectedSickListId == averageEarnEmplPeriodTable.RpaySickListId;

            if (corrAverageEarnEmplPeriodTable)
            {
                if (reportType == RpayPensionFundExportKindOfCorrection::Correctional)
                {
                    continue;
                }
                else
                {
                    if (corrAverageEarnEmplPeriodTable.PayPeriod >= seniorityStartPeriod &&
                        corrAverageEarnEmplPeriodTable.PayPeriod <= seniorityEndPeriod)
                        continue;
                }
            }

            return RPayPFSeniorityType::Special;
        }

        return RPayPFSeniorityType::Common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
        protected void end()
    {
        super();

        if (!validEmpl.empty())
        {
            info(strFmt("@RUP3055", validEmpl.elements(), selectedEmpl.elements()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSeniorityPeriods</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container getSeniorityPeriods(Set _seniorityPeriod)
    {
        container                       reportPeriodsCon;
        container                       seniorityPeriodsCon;

        RHRMEmplTable                   emplTableExist;
        RPayCivilContract               civilContract;
        RPayCivilContractType           contractTypes;
        RPayHistory                     payHistory,
                                        payHistoryDismiss;
        RHRMOrderTrans                  orderTrans;
        RHRMOrderTable                  orderTable;
        RHRMVacationType                vacationType;
        RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTable,
                                        corrAverageEarnEmplPeriodTable;
        RPaySickIllParameters           sickIllParameters;
        real                            ageLimit, ageLimitFSS;
        TransDate                       childAgePeriodStart, childAgePeriodEnd, childDateBreak;

        void fillReportPeriodsCon()
        {
            SetEnumerator se;
            Months                          monthNum;
            ReportPeriod_RU                 curPeriod,
                                            curPeriodStartDate,
                                            curPeriodEndDate,
                                            prevPeriodStartDate,
                                            prevPeriodEndDate;

            if (_seniorityPeriod.empty())
            {
                return;
            }

            se = _seniorityPeriod.getEnumerator();

            while (se.moveNext())
            {
                monthNum            = se.current();
                curPeriod           = endMth(mkDate(1, monthNum, year(seniorityStartPeriod)));
                curPeriodStartDate  = dateStartMth(curPeriod);
                curPeriodEndDate    = curPeriod;

                if (curPeriodStartDate == prevPeriodEndDate + 1)
                {
                    prevPeriodEndDate = curPeriodEndDate;
                    continue;
                }

                if (prevPeriodStartDate)
                {
                    reportPeriodsCon = conpoke(reportPeriodsCon, conlen(reportPeriodsCon) + 1, [prevPeriodStartDate, prevPeriodEndDate]);
                }

                prevPeriodStartDate = curPeriodStartDate;
                prevPeriodEndDate   = curPeriodEndDate;
            }

            if (prevPeriodStartDate)
            {
                reportPeriodsCon = conpoke(reportPeriodsCon, conlen(reportPeriodsCon) + 1, [prevPeriodStartDate, prevPeriodEndDate]);
            }
        }

        void insertSeniorityPeriod(StartDate                    _eventStartDate,
                                   EndDate                      _eventEndDate,
                                   RPayInsuranceSeniorityTypeId _insuranceSeniorityTypeId)
        {
            int                             reportPeriodIdx,
                                            senPeriodIdx;
            TransDate                       repPeriodStartDate,
                                            repPeriodEndDate,
                                            senPeriodStartDate,
                                            senPeriodEndDate,
                                            crossPeriodStartDate,
                                            crossPeriodEndDate;
            RPayInsuranceSeniorityTypeId    senInsuranceTypeId;
            container                       seniorityPeriodsConLoc = connull();

            if (_eventStartDate <= _eventEndDate)
            {
                for (senPeriodIdx = 1; senPeriodIdx <= conlen(seniorityPeriodsCon); senPeriodIdx++)
                {
                    [senPeriodStartDate, senPeriodEndDate, senInsuranceTypeId] = conpeek(seniorityPeriodsCon, senPeriodIdx);

                    crossPeriodStartDate = max(senPeriodStartDate, _eventStartDate);
                    crossPeriodEndDate   = min(senPeriodEndDate,   _eventEndDate);

                    if (crossPeriodStartDate <= crossPeriodEndDate)
                    {
                        if (senPeriodStartDate < crossPeriodStartDate)
                        {
                            seniorityPeriodsConLoc = conpoke(seniorityPeriodsConLoc, conlen(seniorityPeriodsConLoc) + 1,
                                                             [senPeriodStartDate, crossPeriodStartDate - 1, senInsuranceTypeId]);
                        }

                        if (crossPeriodEndDate < senPeriodEndDate)
                        {
                            seniorityPeriodsConLoc = conpoke(seniorityPeriodsConLoc, conlen(seniorityPeriodsConLoc) + 1,
                                                             [crossPeriodEndDate + 1, senPeriodEndDate, senInsuranceTypeId]);
                        }
                    }
                    else
                    {
                        seniorityPeriodsConLoc = conpoke(seniorityPeriodsConLoc, conlen(seniorityPeriodsConLoc) + 1,
                                                         [senPeriodStartDate, senPeriodEndDate, senInsuranceTypeId]);
                    }
                }

                for (reportPeriodIdx = 1; reportPeriodIdx <= conlen(reportPeriodsCon); reportPeriodIdx++)
                {
                    [repPeriodStartDate, repPeriodEndDate] = conpeek(reportPeriodsCon, reportPeriodIdx);

                    crossPeriodStartDate = max(_eventStartDate, repPeriodStartDate);
                    crossPeriodEndDate   = min(_eventEndDate,   repPeriodEndDate);

                    if (crossPeriodStartDate <= crossPeriodEndDate)
                    {
                        seniorityPeriodsConLoc = conpoke(seniorityPeriodsConLoc, conlen(seniorityPeriodsConLoc) + 1,
                                                         [crossPeriodStartDate, crossPeriodEndDate, _insuranceSeniorityTypeId]);
                    }
                }

                seniorityPeriodsCon = seniorityPeriodsConLoc;
            }
        }

        fillReportPeriodsCon();

        while select payHistory
            order by StartDate, TransTime
            where payHistory.OperationType == RHRMJournalType::Receive   &&
                  payHistory.StartDate     <= seniorityEndPeriod
        exists join emplTableExist
            where emplTableExist.EmployeeId    == payHistory.Number
               && emplTableExist.PayMainEmplId == keyEmplId
        {
            select firstonly payHistoryDismiss
                order StartDate, TransTime
                where payHistoryDismiss.Number        == payHistory.Number          &&
                      payHistoryDismiss.OperationType == RHRMJournalType::Dismiss   &&
                      payHistoryDismiss.StartDate     >= payHistory.StartDate;

            insertSeniorityPeriod(max(seniorityStartPeriod, payHistory.StartDate),
                                  min(seniorityEndPeriod, payHistoryDismiss.StartDate ? payHistoryDismiss.StartDate : dateMax()),
                                  '');
        }

        while select civilContract
            where civilContract.StartDate         <= seniorityEndPeriod         &&
                  (! civilContract.EndDate                                      ||
                   civilContract.EndDate          >= seniorityStartPeriod)
        join contractTypes
            where contractTypes.CivilContractTypeCode == civilContract.CivilContractTypeCode
        exists join emplTableExist
            where emplTableExist.EmployeeId    == civilContract.EmplId       &&
                  emplTableExist.PayMainEmplId == keyEmplId
        {
            insertSeniorityPeriod(max(seniorityStartPeriod, civilContract.StartDate),
                                  min(seniorityEndPeriod, civilContract.EndDate ? civilContract.EndDate : dateMax()),
                                  contractTypes.InsuranceSeniorityTypeId);
        }

        while select orderTrans
            where orderTrans.StartDate       <= seniorityEndPeriod
               && orderTrans.EndDate         >= seniorityStartPeriod
        join vacationType
            where vacationType.VacationTypeId    == orderTrans.VacationTypeId
               && vacationType.InsuranceSeniorityTypeId
        exists join orderTable
            where orderTable.JournalId           == orderTrans.JournalId
               && orderTable.JournalType         == RHRMJournalType::Vacation
               && orderTable.Posted              == NoYes::Yes
        exists join emplTableExist
            where emplTableExist.EmployeeId    == orderTrans.EmplId
               && emplTableExist.PayMainEmplId == keyEmplId
        {
            insertSeniorityPeriod(max(seniorityStartPeriod, orderTrans.StartDate),
                                  min(seniorityEndPeriod, orderTrans.EndDate),
                                  vacationType.InsuranceSeniorityTypeId);
        }

        while select averageEarnEmplPeriodTable
            where averageEarnEmplPeriodTable.StartDate           <= seniorityEndPeriod
               && averageEarnEmplPeriodTable.EndDate             >= seniorityStartPeriod
               && averageEarnEmplPeriodTable.averageEarnCodeType == RPayAverageEarnCodeType::SickList
               && ! averageEarnEmplPeriodTable.CorrectedSickListId
        join sickIllParameters
            where sickIllParameters.PayIllType          == averageEarnEmplPeriodTable.RpayIllType
               && sickIllParameters.InsuranceSeniorityTypeId
        exists join emplTableExist
            where emplTableExist.EmployeeId    == averageEarnEmplPeriodTable.EmplId
               && emplTableExist.PayMainEmplId == keyEmplId
        {
            select firstonly payPeriod from corrAverageEarnEmplPeriodTable
                where corrAverageEarnEmplPeriodTable.EmplId              == averageEarnEmplPeriodTable.EmplId
                   && corrAverageEarnEmplPeriodTable.StartDate           == averageEarnEmplPeriodTable.StartDate
                   && corrAverageEarnEmplPeriodTable.CorrectedSickListId == averageEarnEmplPeriodTable.RpaySickListId;

            if (corrAverageEarnEmplPeriodTable)
            {
                if (reportType == RpayPensionFundExportKindOfCorrection::Correctional)
                {
                    continue;
                }
                else
                {
                    if (corrAverageEarnEmplPeriodTable.PayPeriod >= seniorityStartPeriod &&
                        corrAverageEarnEmplPeriodTable.PayPeriod <= seniorityEndPeriod)
                    {
                        continue;
                    }
                }
            }

            if (sickIllParameters.PayIllType == RPayIllType::ChildVacation && sickIllParameters.AgeLimitFSS && sickIllParameters.ExcludeSeniorityTypeId)
            {
                ageLimit    = RPayRateTable::find(sickIllParameters.AgeLimit).getValue(RPayRateCallContext::construct(averageEarnEmplPeriodTable.StartDate, keyEmplId));
                ageLimitFSS = RPayRateTable::find(sickIllParameters.AgeLimitFSS).getValue(RPayRateCallContext::construct(averageEarnEmplPeriodTable.StartDate, keyEmplId));

                if (ageLimit > ageLimitFSS)
                {
                    childAgePeriodStart = max(averageEarnEmplPeriodTable.StartDate, reportStartDate);
                    childAgePeriodEnd   = min(averageEarnEmplPeriodTable.EndDate, reportEndDate);
                    childDateBreak      = RHRMVirtualNetworkFamily::findByRecId(averageEarnEmplPeriodTable.FamilyRecId).lastDateChildBenefit(real2int(ageLimitFSS));

                    if (childAgePeriodStart <= childDateBreak && childAgePeriodEnd > childDateBreak)
                    {
                        insertSeniorityPeriod(childAgePeriodStart,
                                              childDateBreak,
                                              sickIllParameters.InsuranceSeniorityTypeId);

                        insertSeniorityPeriod((childAgePeriodEnd == childDateBreak) ? childDateBreak : childDateBreak + 1,
                                              childAgePeriodEnd,
                                              sickIllParameters.ExcludeSeniorityTypeId);
                    }
                    else if (childAgePeriodStart > childDateBreak)
                    {
                        insertSeniorityPeriod(childAgePeriodStart,
                                              childAgePeriodEnd,
                                              sickIllParameters.ExcludeSeniorityTypeId);
                    }
                    else
                    {
                        insertSeniorityPeriod(childAgePeriodStart,
                                              childAgePeriodEnd,
                                              sickIllParameters.InsuranceSeniorityTypeId);
                    }
                }
                else
                {
                    insertSeniorityPeriod(max(seniorityStartPeriod, averageEarnEmplPeriodTable.StartDate),
                                          min(seniorityEndPeriod, averageEarnEmplPeriodTable.EndDate),
                                          sickIllParameters.InsuranceSeniorityTypeId);
                }
            }
            else
            {
                insertSeniorityPeriod(max(seniorityStartPeriod, averageEarnEmplPeriodTable.StartDate),
                                      min(seniorityEndPeriod, averageEarnEmplPeriodTable.EndDate),
                                      sickIllParameters.InsuranceSeniorityTypeId);
            }
        }

        return seniorityPeriodsCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecConditionsPeriods</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container getSpecConditionsPeriods()
    {
        RHRMStaffListHistory            rhrmStaffListHistory;
        RPayHistory                     payHistory;
        RHRMEmplTable                   emplTableExist;
        container                       specConditionsPeriods;
        StartDate                       lastStartDate;
        RHRMSpecCond                    lastSpecConditions;
        RHRMPositionList                lastPositionList;
        RHRMStaffListRefRecId           lastStaffListRecId;

        StartDate historyStartDate(RPayHistory _rPayHistory)
        {
            return _rPayHistory.operationType == RHRMJournalType::Dismiss ? _rPayHistory.StartDate + 1 : _rPayHistory.StartDate;
        }

        if (!totalExtra1FundTotalAmount && !totalExtra2FundTotalAmount)
        {
            return connull();
        }

        while select payHistory
            order by StartDate, TransTime
            where payHistory.StartDate               <= seniorityEndPeriod &&
                  (payHistory.HRMStaffListRefRecId   != 0 ||
                   payHistory.LastStaffListRefRecId  != 0)
        exists join emplTableExist
            where emplTableExist.EmployeeId    == payHistory.Number
               && emplTableExist.PayMainEmplId == keyEmplId
        {
            if (lastStartDate)
            {
                while select StartDate, SpecCond, PositionList from rhrmStaffListHistory
                    order by StartDate
                    where rhrmStaffListHistory.StaffListRefRecId == payHistory.LastStaffListRefRecId &&
                          rhrmStaffListHistory.StartDate > lastStartDate &&
                          rhrmStaffListHistory.StartDate <= historyStartDate(payHistory)
                {
                    specConditionsPeriods += [[lastStartDate, rhrmStaffListHistory.StartDate - 1, lastSpecConditions, lastPositionList]];

                    lastStartDate       = rhrmStaffListHistory.StartDate;
                    lastSpecConditions  = rhrmStaffListHistory.SpecCond;
                    lastPositionList    = rhrmStaffListHistory.PositionList;
                }

                specConditionsPeriods += [[lastStartDate, historyStartDate(payHistory) - 1, lastSpecConditions, lastPositionList]];
            }

            lastStartDate       = historyStartDate(payHistory);
            lastSpecConditions  = RHRMStaffListHistory::findLast(payHistory.HRMStaffListRefRecId, historyStartDate(payHistory)).SpecCond;
            lastPositionList    = RHRMStaffListHistory::findLast(payHistory.HRMStaffListRefRecId, historyStartDate(payHistory)).PositionList;
            lastStaffListRecId  = payHistory.HRMStaffListRefRecId;
        }

        if (lastStartDate && lastStartDate != seniorityEndPeriod)
        {
            while select StartDate, SpecCond, PositionList from rhrmStaffListHistory
                order by StartDate
                where rhrmStaffListHistory.StaffListRefRecId == lastStaffListRecId &&
                      rhrmStaffListHistory.StartDate > lastStartDate &&
                      rhrmStaffListHistory.StartDate <= seniorityEndPeriod
            {
                specConditionsPeriods += [[lastStartDate, rhrmStaffListHistory.StartDate - 1, lastSpecConditions, lastPositionList]];

                lastStartDate       = rhrmStaffListHistory.StartDate;
                lastSpecConditions  = rhrmStaffListHistory.SpecCond;
                lastPositionList    = rhrmStaffListHistory.PositionList;
            }

            specConditionsPeriods += [[lastStartDate, seniorityEndPeriod, lastSpecConditions, lastPositionList]];
        }

        specConditionsPeriods = this.updateConPeriods(specConditionsPeriods);

        return specConditionsPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        protected void init()
    {
        super();

        funds = [pensionInsuranceFund, pensionStorageFund];
        selectedEmpl = new Set(Types::String);
        validEmpl    = new Set(Types::String);
        livingTypeRate = RPayCounterTable::find(payTaxParameters.CounterUnit2011).PayRateEmpl;
        foreignerRate  = payTaxParameters.InsuredForeignCitizens;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCategoryPeriodsMap</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initCategoryPeriodsMap()
    {
        categoryPeriods = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCitizenshipStatus</Name>
				<Source><![CDATA[
        protected void initCitizenshipStatus()
    {
        super();

        keyForeign = RPayRateTable::find(foreignerRate).getValue(RPayRateCallContext::construct(keyPeriod, keyEmplId)) > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
        protected void initData()
    {
        reportData        = new RPayPFReportDataSZV6(this.parmKey());
        fundAmountCommand = new RPayReportCommandSZV6(reportData, [#FundAmountDS]);
        seniorityCommand  = new RPayReportCommandSZV6(reportData, [#SeniorityDS]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplCategory</Name>
				<Source><![CDATA[
        protected void initEmplCategory()
    {
        boolean temporaryLiving;

        super();

        if (keyForeign)
        {
            temporaryLiving = RPayRateTable::find(livingTypeRate).getValue(RPayRateCallContext::construct(keyPeriod, keyEmplId)) > 0;

            if (keyCategory == #InsuredPersonCatEmployee)
            {
                if (temporaryLiving)
                {
                    keyCategory = #TempLiveForeign;
                }
                else
                {
                    keyCategory = #TempResidenceForeign;
                }
            }
            else
            {
                if (temporaryLiving)
                {
                    keyCategory = #TempLiveForeignDis;
                }
                else
                {
                    keyCategory = #TempResidenceForeignDis;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmployeeData</Name>
				<Source><![CDATA[
        protected void initEmployeeData()
    {
        keySpecialSeniority = this.checkSpecialSeniority();
        this.initCategoryPeriodsMap();
        super();

        this.initEmplSeniority();
        totalExtra1FundTotalAmount = 0;
        totalExtra2FundTotalAmount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplPeriodData</Name>
				<Source><![CDATA[
        protected void initEmplPeriodData()
    {
        super();
        selectedEmpl.add(keyEmplId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplQuery</Name>
				<Source><![CDATA[
        protected void initEmplQuery()
    {
        //do nothing
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplSeniority</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initEmplSeniority()
    {
        container                       seniorityCon;
        container                       senioritySortedCon;
        MapEnumerator                   mapEnum;
        Set                             tmpSet;

        container getSenioriryPeriod(StartDate  _periodStartDate)
        {
            int                             periodIdxLocal;
            StartDate                       periodStartDateLocal;
            EndDate                         periodEndDateLocal;
            int                             senMonths,
                                            senDays;
            container                       ret                             = [dateNull(), dateNull(), ''];
            container                       seniorityData;

            if (conlen(seniorityCon) > 0)
            {
                for (periodIdxLocal = 1; periodIdxLocal <= conlen(seniorityCon); periodIdxLocal++)
                {
                    seniorityData        = conpeek(seniorityCon, periodIdxLocal);
                    periodStartDateLocal = conpeek(seniorityData, 1);
                    periodEndDateLocal   = conpeek(seniorityData, 2);

                    if (periodStartDateLocal == _periodStartDate)
                    {
                        senMonths   = (periodEndDateLocal - periodStartDateLocal + 1) div #DaysInMonth;
                        senDays     = (periodEndDateLocal - periodStartDateLocal + 1) - senMonths * #MonthsInYear;
                        ret = seniorityData + [senMonths, senDays];
                        break;
                    }
                }
            }

            return ret;
        }

        void writeEmplSeniority(Set _setSeniority)
        {
            int                             senIdx;
            StartDate                       senPeriodStartDate;

            ArrayExtend_RU                  senStartPeriodArray = new ArrayExtend_RU(Types::Date);
            StartDate                       arrayPeriodStartDate;
            container                       seniorityData;

            seniorityCon = this.getSeniorityPeriods(_setSeniority);

            if (conlen(seniorityCon) > 0)
            {
                for (senIdx = 1; senIdx <= conlen(seniorityCon); senIdx++)
                {
                    seniorityData = conpeek(seniorityCon, senIdx);
                    senPeriodStartDate = conpeek(seniorityData, 1);

                    senStartPeriodArray.addElement(senPeriodStartDate);
                }

                senStartPeriodArray = senStartPeriodArray.bubbleSorting();

                senioritySortedCon = connull();

                for (senIdx = 1; senIdx <= conlen(seniorityCon); senIdx++)
                {
                    arrayPeriodStartDate = senStartPeriodArray.value(senIdx);

                    seniorityData = getSenioriryPeriod(arrayPeriodStartDate);

                    senioritySortedCon = conpoke(senioritySortedCon, conlen(senioritySortedCon) + 1,
                                                 seniorityData);
                }

                seniorityCommand.parmValue([[#SeniorityKey] ,senioritySortedCon]);
                seniorityCommand.insert();
            }

            return;
        }

        mapEnum = categoryPeriods.getEnumerator();

        while (mapEnum.moveNext())
        {
            keyCategory = mapEnum.currentKey();
            tmpSet      = mapEnum.currentValue();
            writeEmplSeniority(tmpSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportCommand</Name>
				<Source><![CDATA[
        protected void initReportCommand()
    {
        this.updateTotalExtraFundsAmount();
        fundAmountCommand.parmValue([this.parmKey(), this.parmValue()]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeSpecConds2Seniority</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected container mergeSpecConds2Seniority(
        container _seniorityPeriodsCon,
        container _specConditionsPeriods)
    {
        int                             senPeriodIdx,
                                        specCondIdx;
        TransDate                       senPeriodStartDate,
                                        senPeriodEndDate,
                                        specCondStartDate,
                                        specCondEndDate,
                                        crossPeriodStartDate,
                                        crossPeriodEndDate;
        RHRMSpecCond                    specCond, currSpecCond;
        RHRMPositionList                positionList, currPositionList;
        RPayInsuranceSeniorityTypeId    senInsuranceTypeId;
        container                       seniorityPeriodsConLoc = connull();
        int                             i;

        for (specCondIdx = 1; specCondIdx <= conlen(_specConditionsPeriods); specCondIdx++)
        {
            [specCondStartDate, specCondEndDate, specCond, positionList] = conpeek(_specConditionsPeriods, specCondIdx);

            if (specCond)
            {
                for (senPeriodIdx = 1; senPeriodIdx <= conlen(_seniorityPeriodsCon); senPeriodIdx++)
                {
                    if (conlen(conpeek(_seniorityPeriodsCon, senPeriodIdx)) > 3)
                    {
                        [senPeriodStartDate, senPeriodEndDate, senInsuranceTypeId, currSpecCond, currPositionList] = conpeek(_seniorityPeriodsCon, senPeriodIdx);
                    }
                    else
                    {
                        [senPeriodStartDate, senPeriodEndDate, senInsuranceTypeId] = conpeek(_seniorityPeriodsCon, senPeriodIdx);
                    }

                    crossPeriodStartDate = max(specCondStartDate, senPeriodStartDate);
                    crossPeriodEndDate   = min(specCondEndDate,   senPeriodEndDate);

                    if (crossPeriodStartDate <= crossPeriodEndDate && senInsuranceTypeId == '')
                    {
                        if (senPeriodStartDate < crossPeriodStartDate)
                        {
                            seniorityPeriodsConLoc = conpoke(seniorityPeriodsConLoc, conlen(seniorityPeriodsConLoc) + 1,
                                                             [senPeriodStartDate, crossPeriodStartDate - 1, senInsuranceTypeId, currSpecCond, currPositionList]);
                        }

                        if (crossPeriodEndDate < senPeriodEndDate)
                        {
                            seniorityPeriodsConLoc = conpoke(seniorityPeriodsConLoc, conlen(seniorityPeriodsConLoc) + 1,
                                                             [crossPeriodEndDate + 1, senPeriodEndDate, senInsuranceTypeId, currSpecCond, currPositionList]);
                        }

                        seniorityPeriodsConLoc = conpoke(seniorityPeriodsConLoc, conlen(seniorityPeriodsConLoc) + 1,
                                                         [crossPeriodStartDate, crossPeriodEndDate, senInsuranceTypeId, specCond, positionList]);
                    }
                    else
                    {
                        seniorityPeriodsConLoc = conpoke(seniorityPeriodsConLoc, conlen(seniorityPeriodsConLoc) + 1,
                                                         [senPeriodStartDate, senPeriodEndDate, senInsuranceTypeId, currSpecCond, currPositionList]);
                    }
                }

                _seniorityPeriodsCon = seniorityPeriodsConLoc;
                seniorityPeriodsConLoc = connull();
            }
        }

        for (i = 1; i <= conlen(_seniorityPeriodsCon); i++)
        {
            if (conlen(conpeek(_seniorityPeriodsCon, i)) == 3)
            {
                seniorityPeriodsConLoc = conpeek(_seniorityPeriodsCon, i);
                seniorityPeriodsConLoc += ['', ''];
                _seniorityPeriodsCon = conpoke(_seniorityPeriodsCon, i, seniorityPeriodsConLoc);
            }
        }

        return _seniorityPeriodsCon;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmKey</Name>
				<Source><![CDATA[
        protected container parmKey()
    {
        return [#parmKeyReport];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValue</Name>
				<Source><![CDATA[
        protected container parmValue()
    {
        return [#parmValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCommand</Name>
				<Source><![CDATA[
        protected void runCommand()
    {
        Set tmpSet;
        fundAmountCommand.insert();

        if (keyCategory)
        {
            if (categoryPeriods.exists(keyCategory))
            {
                tmpSet = categoryPeriods.lookup(keyCategory);
            }
            else
            {
                tmpSet = new Set(Types::Integer);
            }

            if (!tmpSet.in(mthOfYr(keyPeriod)))
            {
                tmpSet.add(mthOfYr(keyPeriod));
                categoryPeriods.insert(keyCategory, tmpSet);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateConPeriods</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container updateConPeriods(container _conPeriods)
    {
        container       conPeriodsNew;
        container       period, lastPeriod, lastUpdatedPeriod;
        int             i;

        for (i = 1; i <= conlen(_conPeriods); i++)
        {
            period = conpeek(_conPeriods, i);

            if (conlen(lastPeriod) && conpeek(lastPeriod, 3) != conpeek(period, 3))
            {
                conPeriodsNew += [[conpeek(lastUpdatedPeriod, 1), conpeek(lastPeriod, 2), conpeek(lastPeriod, 3), conpeek(lastPeriod, 4)]];
                lastUpdatedPeriod = period;
            }

            lastPeriod = period;

            if (i == 1)
            {
                lastUpdatedPeriod = period;
            }
        }

        if (conlen(lastPeriod))
        {
            conPeriodsNew += [[conpeek(lastUpdatedPeriod, 1), conpeek(lastPeriod, 2), conpeek(lastPeriod, 3), conpeek(lastPeriod, 4)]];
        }

        return conPeriodsNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotalExtraFundsAmount</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void updateTotalExtraFundsAmount()
    {
        switch (keyFund)
        {
            case pensionExtra1fund:
                totalExtra1FundTotalAmount += fundTotalAmount;
                break;
            case pensionExtra2fund:
                totalExtra2FundTotalAmount += fundTotalAmount;
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>