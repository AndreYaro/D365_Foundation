<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollEarningRegularRatePayCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class calculates regular rate of pay based on basis earning code.
/// </summary>
class PayrollEarningRegularRatePayCalculate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateOvertimePremium</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the regular rate of pay for the earningstatement line.
    /// </summary>
    /// <param name="_positionRecId">
    /// The <c>HcmPosition</c> table record Id.
    /// </param>
    /// <param name="_earningStatementRecId">
    /// The <c>PayrollEarningStatement</c> table record Id.
    /// </param>
    /// <param name="_earningCode">
    /// The <c>PayrollEarningCode</c> table record Id.
    /// </param>
    /// <param name="_earningDate">
    /// The accounting date of the earning statement that contains the regular rate of pay type earning code.
    /// </param>
    /// <returns>
    /// The regular rate of pay for the earningstatement line.
    /// </returns>
    public static PayrollEarningRate calculateOvertimePremium(HcmPositionRecId _positionRecId,
                                                    PayrollEarningStatementRecId _earningStatementRecId,
                                                    PayrollEarningCode _earningCode,
                                                    TransDate _earningDate)
    {
        PayrollWorkPeriodRecId workPeriodRecId;
        PayrollPositionDetails positionDetails;
        PayrollEarningQuantity eslProductiveHoursSum;
        PayrollEarningRate eslEarningsAmountSum; // Sum of the earning statment lines that have non productive earning code
        PayrollEarningStatement earningStatement;
        PayrollEarningCodeDetail earningCodeDetail;
        PayrollEarningRate regularRatePay;
        PayrollTimePeriod timePeriod;
        PayrollPayPeriod payPeriod;

        if (PayrollEarningRegularRatePayCalculate::validatePreProcessRegularRate(_earningCode, _earningDate))
        {
            earningStatement = PayrollEarningStatement::find(_earningStatementRecId);
            earningCodeDetail =  PayrollEarningCodeDetail::findByEarningCode(_earningCode.RecId, _earningDate);
            positionDetails = PayrollPositionDetails::findByPosition(_positionRecId, _earningDate);
            timePeriod =  PayrollPayCycle::find(positionDetails.PayCycle).TimePeriod;
            payPeriod = PayrollPayPeriod::find(earningStatement.PayPeriod);

            // Retrieving the FLSA period for the earning statement line
            workPeriodRecId = PayrollWorkPeriod::findByWorkCycleDateInPayPeriod(positionDetails.WorkCycle, _earningDate, payPeriod.PeriodStartDate, payPeriod.PeriodEndDate).RecId;

            if (workPeriodRecId)
            {
                // Sum of the quantities of all ESL where the value of the Productive field on the ESL earning code = True
                eslProductiveHoursSum = PayrollEarningRegularRatePayCalculate::getRegularRateEarningProductiveHours(earningStatement.Worker,
                                                                                                    _earningCode,
                                                                                                    workPeriodRecId,
                                                                                                    positionDetails.PayCycle,
                                                                                                    positionDetails.WorkCycle,
                                                                                                    _earningDate);

                // Calculating earnings for the earning statement lines that are in the basis earning group
                eslEarningsAmountSum = PayrollEarningRegularRatePayCalculate::getRegularRateEarningsGroupAmount(earningStatement.Worker,
                                                                                                            workPeriodRecId,
                                                                                                            positionDetails.PayCycle,
                                                                                                            positionDetails.WorkCycle,
                                                                                                            _earningCode,
                                                                                                            _earningDate);

                if (eslProductiveHoursSum && eslEarningsAmountSum)
                {
                    regularRatePay = PayrollEarningRegularRatePayCalculate::computeRegularRatePayRate(eslEarningsAmountSum,
                                                                                eslProductiveHoursSum);
                }
            }
        }

        return regularRatePay;
    }
]]></Source>
			</Method>
			<Method>
				<Name>computeRegularRatePayRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the pay rate for the Premium adjustment earning statement line.
    /// </summary>
    /// <param name="_eslEarningsSum">
    /// The sum of all earning statement lines that have the same basis earning group.
    /// </param>
    /// <param name="_eslProductiveHourSum">
    /// The sum of the quantities of all earning statement lines where earning code on the earning statement line
    /// is of productive type and contains unit of measure of Hour type.
    /// </param>
    /// <returns>
    /// The regular rate of pay rate.
    /// </returns>
    public static PayrollEarningRate computeRegularRatePayRate(PayrollEarningRate _eslEarningsSum,
                                            PayrollEarningQuantity _eslProductiveHourSum)
    {
        PayrollEarningRate regularRatePayRate;

        if (_eslProductiveHourSum != 0)
        {
            regularRatePayRate = _eslEarningsSum / _eslProductiveHourSum;
        }

        return regularRatePayRate > 0 ? regularRatePayRate : 0;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getRegularRateEarningProductiveHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of the quantities of all earning statement lines that are in the assigned basis earning group
    /// and are associated with an earning code that is of the regular rate of pay type.
    /// </summary>
    /// <param name="_workerRecId">
    /// The <c>HcmWorker</c> table record Id that is associated with the earning statement record.
    /// </param>
    /// <param name="_eslRegularRatePayEarningCode">
    /// The <c>PayrollEarningCode</c> table record Id associated the earning statement line and of the regular rate type.
    /// </param>
    /// <param name="_workPeriodRecId">
    /// The <c>HcmWorkerPeriod</c> table record Id for which the regular rate will be calculated.
    /// </param>
    /// <param name="_payCycleRecId">
    /// The <c>PayrollPayCycle</c> table record Id that is associated with the position in the earning statement line.
    /// </param>
    /// <param name="_workCycleRecId">
    /// The <c>PayrollWorkCycle</c> table record Id.
    /// </param>
    /// <param name="_regularRatePayEarningDate">
    /// The accounting date of the earning statement that contains the regular rate of pay type earning code.
    /// </param>
    /// <returns>
    /// The sum of the quantities of all earning statement lines that are in assigned basis earning group.
    /// </returns>
    public static PayrollEarningQuantity getRegularRateEarningProductiveHours(
        HcmWorkerRecId _workerRecId,
        PayrollEarningCode _eslRegularRatePayEarningCode,
        PayrollWorkPeriodRecId _workPeriodRecId,
        PayrollPayCycleRecId _payCycleRecId,
        PayrollWorkCycleRecId _workCycleRecId,
        TransDate _regularRatePayEarningDate)
    {
        PayrollEarningStatement     earningStatement;
        PayrollEarningStatementLine earningStatementLine;
        PayrollEarningCodeGroupCode earningCodeGroupCode;
        PayrollPayPeriod            payPeriod;
        PayrollPayCycle             payCycle;
        PayrollEarningCode          earningCode;
        PayrollWorkPeriod           workPeriod;
        PayrollWorkCycle            workCycle;
        HcmPosition                 position;
        PayrollPositionDetails      positionDetails;

        select validTimeState(_regularRatePayEarningDate) sum(Quantity) from earningStatementLine
            where earningStatementLine.PaymentStatus != PayrollPaymentProcessingStatus::OnHold
            join RecId from position
                where earningStatementLine.Position == position.RecId
            join RecId from positionDetails
                where positionDetails.Position == position.RecId
                && positionDetails.WorkCycle == _workCycleRecId
            join RecId from earningStatement
                where earningStatement.Worker == _workerRecId
                && earningStatement.RecId == earningStatementLine.EarningStatement
            join RecId from payPeriod
                where earningStatement.PayPeriod == payPeriod.RecId
            join RecId from payCycle
                where payPeriod.PayCycle == payCycle.RecId
                && payPeriod.PayCycle == _payCycleRecId
            join RecId from workPeriod
                where workPeriod.RecId == _workPeriodRecId
                && earningStatementLine.AccountingDate >= workPeriod.PeriodStartDate
                && earningStatementLine.AccountingDate <= workPeriod.PeriodEndDate
            join RecId from workCycle
                where workPeriod.WorkCycle == workCycle.RecId
                && workCycle.RecId == _workCycleRecId
            join RecId from earningCodeGroupCode
                where earningCodeGroupCode.EarningCodeGroup == _eslRegularRatePayEarningCode.BasisEarningGroup
                && earningCodeGroupCode.EarningCode == earningStatementLine.EarningCode
            join RecId from earningCode
                where earningCode.RecId == earningCodeGroupCode.EarningCode
                && earningCode.IsProductive == true
                && earningCode.RecId != _eslRegularRatePayEarningCode.RecId
                && earningCode.QuantityUnit == PayrollQuantityUnit::Hours;

        return earningStatementLine.Quantity;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getRegularRateEarningsGroupAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of all earnings in earning statement lines where the earning code is
    /// associated with the basis earning group assigned to the earning statement line earning code.
    /// </summary>
    /// <param name="_workerRecId">
    /// The <c>HcmWorker</c> table record Id that is associated with the earning statement record.
    /// </param>
    /// <param name="_workPeriodRecId">
    /// The <c>HcmWorkerPeriod</c> table record Id for which the regular rate will be calculated.
    /// </param>
    /// <param name="_payCycleRecId">
    /// The <c>PayrollPayCycle</c> table record Id that is associated with the position in the earning statement line.
    /// </param>
    /// <param name="_workCycleRecId">
    /// The <c>PayrollWorkCycle</c> table record Id.
    /// </param>
    /// <param name="_eslRegularRatePayEarningCode">
    /// The <c>PayrollEarningCode</c> table record Id associated the earning statement line and of the regular rate type.
    /// </param>
    /// <param name="_regularRatePayEarningDate">
    /// The accounting date of the earning statement that contains the regular rate of pay type earning code.
    /// </param>
    /// <returns>
    /// The sum of all ESL earnings where the earning code belong to a earning statement line that is contained in the Basis Earning Group.
    /// </returns>
    public static PayrollEarningRate getRegularRateEarningsGroupAmount(
                                                            HcmWorkerRecId _workerRecId,
                                                            PayrollWorkPeriodRecId _workPeriodRecId,
                                                            PayrollPayCycleRecId _payCycleRecId,
                                                            PayrollWorkCycleRecId _workCycleRecId,
                                                            PayrollEarningCode _eslRegularRatePayEarningCode,
                                                            TransDate _regularRatePayEarningDate)
    {
        PayrollEarningStatement     earningStatement;
        PayrollEarningStatementLine earningStatementLine;
        PayrollEarningCodeGroupCode earningCodeGroupCode;
        PayrollPayPeriod            payPeriod;
        PayrollPayCycle             payCycle;
        PayrollEarningCode          earningCode;
        PayrollWorkPeriod           workPeriod;
        PayrollWorkCycle            workCycle;
        HcmPosition                 position;
        PayrollPositionDetails      positionDetails;

        select validTimeState(_regularRatePayEarningDate) sum(AccountingCurrencyAmount) from earningStatementLine
            where earningStatementLine.PaymentStatus != PayrollPaymentProcessingStatus::OnHold
            join RecId from position
                where earningStatementLine.Position == position.RecId
            join RecId from positionDetails
                where positionDetails.Position == position.RecId
                && positionDetails.WorkCycle == _workCycleRecId
            join RecId from earningStatement
                where earningStatement.Worker == _workerRecId
                && earningStatement.RecId == earningStatementLine.EarningStatement
            join RecId from payPeriod
                where earningStatement.PayPeriod == payPeriod.RecId
            join RecId from payCycle
                where payPeriod.PayCycle == payCycle.RecId
                && payPeriod.PayCycle == _payCycleRecId
            join RecId from workPeriod
                where workPeriod.RecId == _workPeriodRecId
                && earningStatementLine.AccountingDate >= workPeriod.PeriodStartDate
                && earningStatementLine.AccountingDate <= workPeriod.PeriodEndDate
            join RecId from workCycle
                where workPeriod.WorkCycle == workCycle.RecId
                && workCycle.RecId == _workCycleRecId
            join RecId from earningCodeGroupCode
                where earningCodeGroupCode.EarningCodeGroup == _eslRegularRatePayEarningCode.BasisEarningGroup
                && earningCodeGroupCode.EarningCode == earningStatementLine.EarningCode
            join RecId from earningCode
                where earningCode.RecId == earningCodeGroupCode.EarningCode
                && earningCode.RecId != _eslRegularRatePayEarningCode.RecId;

        return earningStatementLine.AccountingCurrencyAmount;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validatePreProcessRegularRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the earning code is of the regular rate type or not.
    /// </summary>
    /// <param name="_earningCode">
    /// The <c>PayrollEarningCode</c> table record.
    /// </param>
    /// <param name="_earningDate">
    /// The earning date to be used for finding the version of the <c>PayrollEarningCode</c> table.
    /// </param>
    /// <returns>
    /// true if the the earning code is of the regular rate type or not; otherwise, false.
    /// </returns>
    public static boolean validatePreProcessRegularRate(PayrollEarningCode _earningCode,
                                                    TransDate _earningDate)
    {
        boolean isValidEarningCode;

        isValidEarningCode = PayrollEarningCode::isValidRegularRatePayEarningCode(_earningCode.RecId, _earningDate);

        return isValidEarningCode;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>