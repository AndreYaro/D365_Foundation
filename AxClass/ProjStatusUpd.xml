<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjStatusUpd</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjStatusUpd
{
    ProjStatus  toProjStatus;
    ProjId      projId;
    ProjTable   projTable;

    boolean     updateSubProj;
    boolean     onlySameType;
    ProjType    projType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    protected boolean dialog()
    {
        boolean                         ret = false;
        ProjUpdateSubProjStagePrompt    projUpdateSubProjStagePrompt;
        ProjUpdateSubProjStage          projUpdateSubProjStage;
        ProjBudget                      projBudgetApproved;
        ProjId                          budgetRootProjId;
        str                             dialogMessage;

        if (projTable.childExist())
        {
            projUpdateSubProjStagePrompt = ProjUpdateSubProjStagePrompt::construct(toProjStatus);

            ret = projUpdateSubProjStagePrompt.prompt();
            if (ret)
            {
                projUpdateSubProjStagePrompt.runOperation();
                projUpdateSubProjStage = projUpdateSubProjStagePrompt.parmProjUpdateSubProjStage();
                switch (projUpdateSubProjStage)
                {
                    case ProjUpdateSubProjStage::Current:
                        updateSubProj = false;
                        break;

                    case ProjUpdateSubProjStage::All:
                        updateSubProj = true;
                        break;

                    case ProjUpdateSubProjStage::SameType:
                        updateSubProj = true;
                        onlySameType  = true;
                        projType      = projTable.Type;
                        break;
                }
            }
        }
        else
        {
            //determine which project the budget is associated with based
            //on <c>projTable.ProjBudgetManagement</c>
            if (projTable.ProjBudgetManagement == ProjBudgetManagement::None)
            {
                budgetRootProjId = ProjTable::getRootProjId(projTable.ProjId);
            }
            else
            {
                budgetRootProjId = projTable.ProjId;
            }
            select firstonly RecId from projBudgetApproved
                where projBudgetApproved.RootProjId == budgetRootProjId
                    && projBudgetApproved.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Approved;

            //warn user of unapproved budget if status is changed to in process, use budgeting is enabled but no associated approved budget
            if (toProjStatus == ProjStatus::InProcess && projTable.UseBudgeting == NoYes::Yes && !projBudgetApproved.RecId)
            {
                dialogMessage = "@SYS4010203";
            }
            else
            {
                dialogMessage = strFmt("@SYS53061", ProjStageTable::find(toProjStatus).Stage);
            }
            ret = Box::okCancel(dialogMessage,DialogButton::Ok,"@SYS8313")  == DialogButton::Ok;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    public void execute()
    {
        this.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of <c>ProjStatusUpd</c>.
    /// </summary>
    /// <param name = "_projTable">
    ///     The parent project, used to set all the sub project project status.
    /// </param>
    /// <param name = "_toProjStatus">
    ///     The <c>ProjStatus</c> to set for all the sub project project status.
    /// </param>
    /// <param name = "_updateSubProj">
    ///     A boolean value that indicates whether to set all the sub project project status; optional.
    /// </param>
    /// <param name = "_onlySameType">
    ///     A boolean value that indicates whether to set all the sub project project status of same type; optional.
    /// </param>
    /// <param name = "_projType">
    ///     A <c>ProjType</c> value for which to find the projects; optional.
    /// </param>
    protected void new(
        ProjTable  _projTable,
        ProjStatus _toProjStatus,
        boolean    _updateSubProj = false, // If true, sub-projects are updated as well.
        boolean    _onlySameType  = false, // If true, only sub-projects of same project type will be updated.
        ProjType   _projType      = ProjType::TimeMaterial
    )
    {
        if (!_projTable)
        {
            throw error(error::missingRecord(funcName()));
        }

        projTable       = _projTable;
        toProjStatus    = _toProjStatus;
        updateSubProj   = _updateSubProj;
        onlySameType    = _onlySameType;
        projType        = _projType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructProjStatusUpd</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Construct a new instance of <c>ProjStatusUpd</c>.
    /// </summary>
    /// <param name = "_projTable">
    ///     The parent project, used to set all the sub project project status.
    /// </param>
    /// <param name = "_toProjStatus">
    ///     The <c>ProjStatus</c> to set for all the sub project project status.
    /// </param>
    /// <param name = "_updateSubProj">
    ///     A boolean value that indicates whether to set all the sub project project status; optional.
    /// </param>
    /// <param name = "_onlySameType">
    ///     A boolean value that indicates whether to set all the sub project project status of same type; optional.
    /// </param>
    /// <param name = "_projType">
    ///     A <c>ProjType</c> value for which to find the projects; optional.
    /// </param>
    /// <returns>
    ///     The new instance of <c>ProjStatusUpd</c>.
    /// </returns>
    public static ProjStatusUpd constructProjStatusUpd(
        ProjTable  _projTable,
        ProjStatus _toProjStatus,
        boolean    _updateSubProj = false, // If true, sub-projects are updated as well.
        boolean    _onlySameType  = false, // If true, only sub-projects of same project type will be updated.
        ProjType   _projType      = ProjType::TimeMaterial)
    {
        ProjStatusUpd projStatusUpd = new ProjStatusUpd(_projTable, _toProjStatus, _updateSubProj, _onlySameType, _projType);
        return projStatusUpd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId    _projId = projId)
    {
        projId  = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    protected ProjId projId(ProjId    _projId = projId)
    {
        projId  = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ProjTable       projTableChild;
        ProjStatusUpd   projStatusUpd;

        if (!ProjStatusTypeRule::checkStatus(projTable.Type, toProjStatus))
        {
            info(strFmt("@SYS56161",toProjStatus,projTable.Type));
        }

        if (updateSubProj)
        {
            ttsbegin;

            while select forupdate projTableChild where projTableChild.ParentId == projTable.ProjId
            {
                projStatusUpd = ProjStatusUpd::construct(projTableChild,toProjStatus,updateSubProj,onlySameType,projType);
                projStatusUpd.run();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toProjStatus</Name>
				<Source><![CDATA[
    protected ProjStatus toProjStatus (ProjStatus _projStatus = toProjStatus)
    {
        toProjStatus  = _projStatus;

        return toProjStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjStatusUpd construct(
        ProjTable  _projTable,
        ProjStatus _projStatus,
        boolean    _updateSubProj = false, // If true, sub-projects are updated as well.
        boolean    _onlySameType  = false,  // If true, only sub-projects of same project type will be updated.
        ProjType   _projType      = ProjType::TimeMaterial
    )
    {
        ProjStatusUpd   projStatusUpd;

        switch (_projStatus)
        {
            case ProjStatus::Created:
                projStatusUpd = new ProjStatusUpd_Created(_projTable,_projStatus,_updateSubProj,_onlySameType,_projType);
                break;

            case ProjStatus::Estimated:
                projStatusUpd = new ProjStatusUpd_Estimated(_projTable,_projStatus,_updateSubProj,_onlySameType,_projType);
                break;

            case ProjStatus::Scheduled:
                projStatusUpd = new ProjStatusUpd_Scheduled(_projTable,_projStatus,_updateSubProj,_onlySameType,_projType);
                break;

            case ProjStatus::InProcess:
                projStatusUpd = new ProjStatusUpd_StartUp(_projTable,_projStatus,_updateSubProj,_onlySameType,_projType);
                break;

            case ProjStatus::User1:
                projStatusUpd = new ProjStatusUpd_User1(_projTable,_projStatus,_updateSubProj,_onlySameType,_projType);
                break;

            case ProjStatus::User2:
                projStatusUpd = new ProjStatusUpd_User2(_projTable,_projStatus,_updateSubProj,_onlySameType,_projType);
                break;

            case ProjStatus::User3:
                projStatusUpd = new ProjStatusUpd_User3(_projTable,_projStatus,_updateSubProj,_onlySameType,_projType);
                break;

            case ProjStatus::Completed:
                projStatusUpd = new ProjStatusUpd_ReportedFinished(_projTable,_projStatus,_updateSubProj,_onlySameType,_projType);
                break;

            default :
                var eventHandlerResult = new EventHandlerResult();
                ProjStatusUpd::projStatusUpdCreating(_projTable, _projStatus, _updateSubProj, _onlySameType, _projType, eventHandlerResult);

                if (eventHandlerResult.hasResult())
                {
                    projStatusUpd = eventHandlerResult.result();
                }
                else
                {
                    throw error("@SYS50049");
                }
        }

        return projStatusUpd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projStatusUpdCreating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the new <c>ProjStatusUpd</c> instance.
    /// </summary>
    /// <param name = "_projTable">
    /// A <c>ProjTable</c> record.
    /// </param>
    /// <param name = "_projStatus">
    /// A <c>ProjStatus</c> enumeration value.
    /// </param>
    /// <param name = "_updateSubProj">
    /// Boolean that determines if sub-projects are updated as well.
    /// </param>
    /// <param name = "_onlySameType">
    /// Boolean that determines if only sub-projects of same project type will be updated.
    /// </param>
    /// <param name = "_projType">
    /// A <c>ProjType</c> enumeration value.
    /// </param>
    /// <param name = "_result">
    /// An <c>EventHandlerResult</c> instance, where subscribers can provide the new <c>ProjStatusUpd</c> instance.
    /// </param>
    static delegate void projStatusUpdCreating(ProjTable _projTable, ProjStatus _projStatus, boolean _updateSubProj, boolean _onlySameType, ProjType _projType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>subPrjStatusUpdDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method opens a dialog box for the user to update all the sub projects or sub projects of same type.
    /// </summary>
    /// <param name = "_projStatusUpd">
    ///     Instance of <c>ProjStatusUpd</c>.
    /// </param>
    /// <param name = "_shouldSkipDialog">
    ///     Optional value to skip dialog.
    /// </param>
    /// <returns>
    ///     false if project status update dialog fails; otherwise, true.
    /// </returns>
    protected static boolean subPrjStatusUpdDialog(ProjStatusUpd _projStatusUpd, Boolean _shouldSkipDialog = false)
    {
        boolean ret = false;

        if (_shouldSkipDialog)
        {
            ret = true;
        }
        else
        {
            ret = _projStatusUpd.dialog();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides an entry point for the <c>ProjStatusUpd</c> class.
    /// </summary>
    /// <param name = "_args">
    ///     The arguments for the class.
    /// </param>
    private static void main(Args _args)
    {
        ProjTable           projTable;
        ProjStatus          projStatus;
        Object              caller = _args.caller();
        boolean             updateSubProj;

        if (_args && _args.dataset() == tableNum(ProjTable))
        {
            projTable = _args.record();
        }

        if (_args && _args.parmEnum())
        {
            if (_args.parmEnumType() == enumNum(ProjStatus))
            {
                projStatus = _args.parmEnum();
            }
        }

        ProjStatusUpd projStatusUpd = ProjStatusUpd::createProjStatusUpd(_args, projTable, projStatus, updateSubProj);

        projStatusUpd.toProjStatus(projStatus);

        if (ProjStatusUpd::subPrjStatusUpdDialog(projStatusUpd))
        {
            projStatusUpd.projId(projTable.ProjId);
            // Sync status with parent project
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && projTable.ParentId)
            {
                ProjTable parentProjTable = ProjTable::find(projTable.ParentId);

                if (parentProjTable.Status != ProjStatus::Created
                    && parentProjTable.Status != projStatus)
                {
                    if (Box::yesNo(strFmt("@PSA730",projTable.ParentId,parentProjTable.Stage()),DialogButton::Yes) == DialogButton::Yes)
                    {
                        projStatus = parentProjTable.Status;
                        if (projStatus != projTable.Status)
                        {
                            projStatusUpd = ProjStatusUpd::construct(projTable,projStatus);
                            projStatusUpd.toProjStatus(projStatus);
                        }
                    }
                }
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(Project)) ? projTable.Status != projStatus : true)
            {
                projStatusUpd.run();
            }

            if (projTable.RecId && FormDataUtil::getFormDataSource(projTable))
            {
                FormDataUtil::getFormDataSource(projTable).reread();
                FormDataUtil::getFormDataSource(projTable).refresh();
            }
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && caller && caller.name() == formStr(ProjTable))
            {
                caller.refreshDataSource();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjStatusUpd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>ProjStatusUpd</c>.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the class.
    /// </param>
    /// <param name="_projTable">
    /// A <c>ProjTable</c> record.
    /// </param>
    /// <param name="_projStatus">
    /// Instance of <c>ProjStatus</c>.
    /// </param>
    /// <param name = "_updateSubProj">
    /// A boolean value that indicates whether to set all the sub project project status;
    /// </param>
    /// <returns>
    /// An instance of the <c>ProjStatusUpd</c> class.
    /// </returns>
    public static ProjStatusUpd createProjStatusUpd(
        Args _args,
        ProjTable _projTable,
        ProjStatus _projStatus,
        boolean _updateSubProj)
    {
        return ProjStatusUpd::construct(_projTable, _projStatus, _updateSubProj);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>