<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEDatasourceVATDecl501S2_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerRRGEDatasourceVATDecl501S2_W</c> class calculates values for second section of the VAT declaration.
/// </summary>
public class LedgerRRGEDatasourceVATDecl501S2_W extends LedgerRRGEDatasourceVATDeclarationBase_W
{
    Map                 valuesMap;
    SetEnumerator       valuesKeyEnumerator;
    str                 worksheetName;
    CompanyInfo         companyInfo;
    int                 sectionNum;

    private const str   Worksheet           = 'стр.3';
    private const int   S2TableId           = 2000;
    private const int   Field1Id            = 1;
    private const int   Field2Id            = 2;
    private const int   Field3Id            = 3;
    private const int   Field4Id            = 4;
    private const int   Field5Id            = 5;
    private const int   Field6Id            = 6;
    private const int   Field7Id            = 7;
    private const int   Field8Id            = 8;
    private const int   Field9Id            = 9;
    private const int   Field10Id           = 10;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRecord</Name>
				<Source><![CDATA[
    private void addRecord(TaxTrans _taxTrans, Amount _taxAmountShipped, Amount _taxAmountPaid, Amount _taxAmountShippedPaid, Amount _taxAmount = 0)
    {
        str                                     key;
        VendName                                name;
        INN_RU                                  inn;
        PaymentOrderBudgetReceiptClassCode_RU   kbk;
        OKATO_RU                                okato;
        Amount                                  taxAmount;
        VATOperationCode_RU                     operationId;
        Amount                                  taxAmountShipped;
        Amount                                  taxAmountPaid;
        Amount                                  taxAmountShippedPaid;
        VendTable                               vendTable;
        TaxTrans_RU                             taxTrans_RU;

        taxTrans_RU = _taxTrans.taxTrans_RU();

        if (!_taxAmountShipped && !_taxAmountPaid && !_taxAmountShippedPaid && !_taxAmount)
        {
            return;
        }

        vendTable   = VendTable::find(taxTrans_RU.vatTaxAgentVendAccount_RU);
        kbk         = RTax25TaxTable::find(RTax25TaxModule::Tax, _taxTrans.TaxCode).PaymentOrderBudgetReceiptClassCode;
        key         = vendTable.name() + kbk + taxTrans_RU.vatOperationCode_RU;
        if (valuesMap.exists(key))
        {
            [name,
            inn,
            kbk,
            okato,
            taxAmount,
            operationId,
            taxAmountShipped,
            taxAmountPaid,
            taxAmountShippedPaid] = valuesMap.lookup(key);
        }
        else
        {
            if (!companyInfo)
            {
                companyInfo = CompanyInfo::find();
            }

            name        = vendTable.name();
            inn         = vendTable.partyINN_RU();
            okato       = CompanyInfoHelper::partyOKATO_RU(companyInfo);
            operationId = taxTrans_RU.vatOperationCode_RU;
        }

        taxAmountShipped        += _taxAmountShipped;
        taxAmountPaid           += _taxAmountPaid;
        taxAmountShippedPaid    += _taxAmountShippedPaid;

        if (prmisdefault(_taxAmount))
        {
            taxAmount = taxAmountShipped + taxAmountPaid - taxAmountShippedPaid;
        }
        else
        {
            taxAmount += _taxAmount;
        }

        valuesMap.insert(key, [
            name,
            inn,
            kbk,
            okato,
            taxAmount,
            operationId,
            taxAmountShipped,
            taxAmountPaid,
            taxAmountShippedPaid]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectValues</Name>
				<Source><![CDATA[
    private void collectValues()
    {
        TaxTrans    taxTrans;
        TaxTrans_RU taxTrans_RU;

        // Tax amount
        while select TaxCode, sum(TaxAmount) from taxTrans
            group by TaxCode, taxTrans_RU.vatOperationCode_RU, taxTrans_RU.vatTaxAgentVendAccount_RU
            where taxTrans.TaxDirection == TaxDirection::VATTaxAgentCharged_RU  &&
                  taxTrans.TransDate    >= periodStart                          &&
                  taxTrans.TransDate    <= periodEnd
            join vatOperationCode_RU, vatTaxAgentVendAccount_RU from taxTrans_RU
                where taxTrans_RU.TaxTrans == taxTrans.RecId
        {
            taxTrans.packTaxTrans_RU(taxTrans_RU);
            this.addRecord(taxTrans, 0, 0, 0, taxTrans.TaxAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>curWorksheetName</Name>
				<Source><![CDATA[
    protected str curWorksheetName(int _fieldId, int _tableId)
    {
        return worksheetName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWorksheet</Name>
				<Source><![CDATA[
    public str defaultWorksheet(int _tableId)
    {
        return Worksheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTables</Name>
				<Source><![CDATA[
    public void initTables()
    {
        const str TableName     = 'Раздел 2';
        const str Field1Req     = 'КППИно';
        const str Field1Name    = 'КПП подразделения иностранной организации, состоящей на учете налоговых органах';
        const str Field1Cell    = 'BI11:CI11';
        const str Field2Req     = 'НаимПрод';
        const str Field2Name    = 'Наименование налогоплательщика - продавца';
        const str Field2Cell    = 'BI13:DP13;BI15:DP15;BI17:DP17;BI19:DP19;BI21:DP21;BI23:DP23;BI25:DP25;BI27:DP27';
        const str Field3Req     = 'ИННЮЛПрод';
        const str Field3Name    = 'ИНН налогоплательщика - продавца';
        const str Field3Cell    = 'BI29:CR29';
        const str Field4Req     = 'КБК';
        const str Field4Name    = 'Код бюджетной классификации';
        const str Field4Cell    = 'BI31:DP31';
        const str Field5Req     = 'ОКАТО';
        const str Field5Name    = 'Код по ОКАТО';
        const str Field5Cell    = 'BI33:CO33';
        const str Field6Req     = 'СумИсчисл';
        const str Field6Name    = 'Сумма налога, исчисленная к уплате в бюджет (руб.)';
        const str Field6Cell    = 'BI35:CR35';
        const str Field7Req     = 'КодОпер';
        const str Field7Name    = 'Код операции';
        const str Field7Cell    = 'BI37:CC37';
        const str Field8Req     = 'СумИсчислОтгр';
        const str Field8Name    = 'Сумма налога, исчисленная при отгрузке товаров (выполнении работ, оказании услуг, передаче имущественных прав) (руб.)';
        const str Field8Cell    = 'BI39:CR39';
        const str Field9Req     = 'СумИсчислОпл';
        const str Field9Name    = 'Сумма налога, исчисленная при получении оплаты, частичной оплаты в счет предстоящей отгрузки товаров (выполнения работ, оказания услуг, передачи имущественных прав) (руб.)';
        const str Field9Cell    = 'BI42:CR42';
        const str Field10Req    = 'СумИсчислНА';
        const str Field10Name   = 'Сумма налога, исчисленная налоговым агентом с оплаты, частичной оплаты при отгрузке товаров (выполнении работ, оказании услуг, передаче имущественных прав) в счет этой оплаты, частичной оплаты (руб.)';
        const str Field10Cell   = 'BI45:CR45';

        super();

        this.addTable(S2TableId, TableName);

        this.addField(S2TableId, Field1Id,  Field1Req,  Field1Name,  Field1Cell,  SysAlignment::AlignLeft,   9, Minus);
        this.addField(S2TableId, Field2Id,  Field2Req,  Field2Name,  Field2Cell,  SysAlignment::AlignLeft, 160, Minus);
        this.addField(S2TableId, Field3Id,  Field3Req,  Field3Name,  Field3Cell,  SysAlignment::AlignLeft,  12, Minus);
        this.addField(S2TableId, Field4Id,  Field4Req,  Field4Name,  Field4Cell,  SysAlignment::AlignLeft,  20, Minus);
        this.addField(S2TableId, Field5Id,  Field5Req,  Field5Name,  Field5Cell,  SysAlignment::AlignLeft,  11);
        this.addField(S2TableId, Field6Id,  Field6Req,  Field6Name,  Field6Cell,  SysAlignment::AlignLeft,  12, Minus);
        this.addField(S2TableId, Field7Id,  Field7Req,  Field7Name,  Field7Cell,  SysAlignment::AlignLeft,   7, Minus);
        this.addField(S2TableId, Field8Id,  Field8Req,  Field8Name,  Field8Cell,  SysAlignment::AlignLeft,  12, Minus);
        this.addField(S2TableId, Field9Id,  Field9Req,  Field9Name,  Field9Cell,  SysAlignment::AlignLeft,  12, Minus);
        this.addField(S2TableId, Field10Id, Field10Req, Field10Name, Field10Cell, SysAlignment::AlignLeft,  12, Minus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next(int _tableId)
    {
        VendName                                name;
        INN_RU                                  inn;
        PaymentOrderBudgetReceiptClassCode_RU   kbk;
        OKATO_RU                                okato;
        Amount                                  taxAmount;
        VATOperationCode_RU                     operationId;
        Amount                                  taxAmountShipped;
        Amount                                  taxAmountPaid;
        Amount                                  taxAmountShippedPaid;

        if (vatDeclaration && valuesKeyEnumerator && valuesKeyEnumerator.moveNext() && valuesMap.exists(valuesKeyEnumerator.current()))
        {
            sectionNum++;

            [name,
            inn,
            kbk,
            okato,
            taxAmount,
            operationId,
            taxAmountShipped,
            taxAmountPaid,
            taxAmountShippedPaid] = valuesMap.lookup(valuesKeyEnumerator.current());

            vatDeclaration.setValue(Field1Id,  S2TableId, '');
            vatDeclaration.setValue(Field2Id,  S2TableId, name);
            vatDeclaration.setValue(Field3Id,  S2TableId, inn);
            vatDeclaration.setValue(Field4Id,  S2TableId, kbk);
            vatDeclaration.setValue(Field5Id,  S2TableId, okato);
            vatDeclaration.setValue(Field6Id,  S2TableId, decround(taxAmount, 0));
            vatDeclaration.setValue(Field7Id,  S2TableId, operationId);
            vatDeclaration.setValue(Field8Id,  S2TableId, decround(taxAmountShipped, 0));
            vatDeclaration.setValue(Field9Id,  S2TableId, decround(taxAmountPaid, 0));
            vatDeclaration.setValue(Field10Id, S2TableId, decround(taxAmountShippedPaid, 0));

            if (sectionNum > 1 && evaluator && evaluator.allowUpdateKeyCode())
            {
                worksheetName = evaluator.newWorksheetName(Worksheet);
            }

            this.setInitialized(_tableId);

            return true;
        }

        this.checkDynamicWorkdsheetInitialized(_tableId);

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageCount</Name>
				<Source><![CDATA[
    public int pageCount(int _tableId)
    {
        return worksheetDeleted ? 0 : valuesMap.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset(int _tableId)
    {
        super(_tableId);

        if (!worksheetDeleted)
        {
            sectionNum  = 0;
            valuesMap   = new Map(Types::String, Types::Container);

            this.collectValues();

            valuesKeyEnumerator = valuesMap.keySet().getEnumerator();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCellCode</Name>
				<Source><![CDATA[
    public void updateCellCode(int _fieldId, int _tableId)
    {
        if (sectionNum > 1 && evaluator && evaluator.allowUpdateKeyCode() && worksheetName)
        {
            evaluator.updateKeyCode(ComExcelDocument_RU::replaceWorksheetName(evaluator.keyCode(), worksheetName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEDatasourceVATDecl501S2_W construct()
    {
        return new LedgerRRGEDatasourceVATDecl501S2_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVATDeclaration</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEDatasourceVATDecl501S2_W newFromVATDeclaration(LedgerRRGEDatasourceVATDeclaration_W _vatDeclaration)
    {
        LedgerRRGEDatasourceVATDecl501S2_W section2 = LedgerRRGEDatasourceVATDecl501S2_W::construct();

        section2.parmVATDeclaration(_vatDeclaration);

        return section2;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>