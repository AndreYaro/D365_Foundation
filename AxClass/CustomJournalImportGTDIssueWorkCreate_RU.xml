<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalImportGTDIssueWorkCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustomJournalImportGTDIssueWorkCreate_RU</c> class provides ability to cancel works and revert inventory transactions related to GTD issue.
/// </summary>
internal class CustomJournalImportGTDIssueWorkCreate_RU
{
    private InventGTDId_RU        inventGtd;
    private CustomJournalId_RU    customJournalId;
    private WHSWorkId             workId;
    private InventCostOnhandCache inventCostOnhandCache;
    private boolean               skipWorkTransExistCheck;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createWorkLine</Name>
				<Source><![CDATA[
    private void createWorkLine(
        InventTrans _inventTrans,
        InventQty _inventQty,
        InventDimId _inventDimIdFrom,
        InventGtdId_RU _inventGtd,
        TransDateTime _transDate,
        InventTransId _parentInventTransId)
    {
        InventDim inventDim = InventDim::find(_inventDimIdFrom);

        WHSWorkLine workLine;

        workLine.WorkId        = this.workId(_inventTrans);
        workLine.LineNum       = WHSWorkLine::lastLineNum(workLine.WorkId) + 1;
        workLine.WorkType      = WHSWorkType::Adjustment;
        workLine.WMSLocationId = inventDim.wMSLocationId;
        workLine.InventDimId   = inventDim.inventDimId;
        workLine.Mandatory     = NoYes::Yes;
        workLine.ItemId         = _inventTrans.ItemId;
        workLine.InventTransId  = _inventTrans.inventTransOrigin().InventTransId;
        workLine.WorkInProcessUTCDateTime = _transDate;
        workLine.InventQtyWork  = _inventQty;
        workLine.AvailPhysical  = _inventQty;

        workLine.insert();

        WHSWorkInventTrans workInventTrans;
        workInventTrans.initFromWorkLine(workLine);

        workInventTrans.TransDateTime   = _transDate;
        workInventTrans.InventDimIdFrom = _inventDimIdFrom;

        inventDim.InventGtdId_RU               = _inventGtd;
 
        workInventTrans.InventDimIdTo       = InventDim::findOrCreate(inventDim).InventDimId;
        workInventTrans.InventTransIdParent = _parentInventTransId;

        workInventTrans.insert();

        WHSInvent::moveWorkQuantities(
            workInventTrans,
            workInventTrans.InventDimIdFrom,
            workInventTrans.InventDimIdTo,
            workInventTrans.Qty,
            0,
            this.inventCostOnhandCache());
        workLine.setStatusClosed();
        workLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWorkLineTo</Name>
				<Source><![CDATA[
    private void addWorkLineTo(InventTrans _inventTrans, InventDim _origInventDim)
    {
        InventQty     targetQty     = _inventTrans.Qty;
        InventTransId inventTransId = _inventTrans.inventTransOrigin().InventTransId;

        WHSWorkInventTrans workInventTransFinal;
        InventTrans        inventTransFinal;
        InventTransOrigin  inventTransOriginFinal;
        WHSWorkInventTrans workInventTransStart;
        InventTrans        inventTransStart;
        InventTransOrigin  inventTransOriginStart;
        WHSWorkTable       workTable;

        WHSWorkLine workLineFinish, workLineStart;

        while select TableId from workTable
            where workTable.WorkStatus == WHSWorkStatus::Closed
            join TableId from workLineFinish
                where workLineFinish.WorkId == workTable.workId
                    && workLineFinish.InventTransId == inventTransId
                    && workLineFinish.WorkType        == WHSWorkType::Put
                    && workLineFinish.WorkStatus      == WHSWorkStatus::Closed
            join TransDateTime from workInventTransFinal
                where workInventTransFinal.WorkId == workLineFinish.WorkId
                    && workInventTransFinal.LineNum == workLineFinish.LineNum
            join InventTransId from inventTransOriginFinal
                where inventTransOriginFinal.InventTransId == workInventTransFinal.InventTransIdTo
            join inventDimId, Qty from inventTransFinal
                where inventTransFinal.inventTransOrigin == inventTransOriginFinal.RecId
            exists join workLineStart
                where workLineStart.InventTransId == inventTransId
                    && workLineStart.WorkId == workLineFinish.WorkId
                    && workLineStart.LineNum <= workLineFinish.LineNum
            exists join workInventTransStart
                where workInventTransStart.WorkId == workLineStart.WorkId
                    && workInventTransStart.LineNum == workLineStart.LineNum
            exists join inventTransOriginStart
                where inventTransOriginStart.InventTransId == workInventTransStart.InventTransIdFrom
            exists join inventTransStart
                where inventTransStart.inventTransOrigin == inventTransOriginStart.RecId
                    && inventTransStart.InventDimId == _origInventDim.inventDimId
        {
            InventQty processQty = this.processQty(inventTransFinal.Qty, inventTransOriginFinal.InventTransId);
            processQty = min(processQty, targetQty);

            this.createWorkLine(
                _inventTrans,
                processQty,
                inventTransFinal.inventDimId,
                inventGtd,
                workInventTransFinal.TransDateTime,
                inventTransOriginFinal.InventTransId);

            targetQty -= processQty;

            if (targetQty <= 0)
            {
                break;
            }
        }

        // There can multiple work related to the same purchase order, so work related to the same purchase order line could use both the old and the new stack.
        if (targetQty && WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled())
        {
            WHSInventoryTransactionView inventoryTransactionViewFinal, inventoryTransactionViewStart;

            while select TableId from workTable
                where workTable.WorkStatus == WHSWorkStatus::Closed
                join TableId from workLineFinish
                    where workLineFinish.WorkId == workTable.workId
                        && workLineFinish.InventTransId == inventTransId
                        && workLineFinish.WorkType        == WHSWorkType::Put
                        && workLineFinish.WorkStatus      == WHSWorkStatus::Closed
                join forupdate workInventTransFinal
                    where workInventTransFinal.WorkId == workLineFinish.WorkId
                        && workInventTransFinal.LineNum == workLineFinish.LineNum
                join inventoryTransactionViewFinal
                    where inventoryTransactionViewFinal.InventoryTransactionOriginId == workInventTransFinal.InventoryTransactionOriginId
                       && inventoryTransactionViewFinal.Type == WHSInventoryTransactionTypeEnum::RegisteredReceipt
                exists join workLineStart
                    where workLineStart.InventTransId == inventTransId
                        && workLineStart.WorkId == workLineFinish.WorkId
                        && workLineStart.LineNum <= workLineFinish.LineNum
                exists join workInventTransStart
                    where workInventTransStart.WorkId == workLineStart.WorkId
                        && workInventTransStart.LineNum == workLineStart.LineNum
                exists join inventoryTransactionViewStart
                    where inventoryTransactionViewStart.InventoryTransactionOriginId == workInventTransStart.InventoryTransactionOriginId
                       && inventoryTransactionViewStart.Type == WHSInventoryTransactionTypeEnum::RegisteredIssue
                       && inventoryTransactionViewStart.InventSiteId == _origInventDim.inventSiteId
                       && inventoryTransactionViewStart.InventLocationId == _origInventDim.inventLocationId
                       && inventoryTransactionViewStart.WMSLocationId == _origInventDim.wmsLocationId
                       && inventoryTransactionViewStart.LicensePlateId == _origInventDim.licensePlateId
                       && inventoryTransactionViewStart.configId == _origInventDim.ConfigId
                       && inventoryTransactionViewStart.inventBatchId == _origInventDim.InventBatchId
                       && inventoryTransactionViewStart.inventColorId == _origInventDim.InventColorId
                       && inventoryTransactionViewStart.inventGtdId_RU == _origInventDim.InventGtdId_RU
                       && inventoryTransactionViewStart.inventOwnerId_RU == _origInventDim.InventOwnerId_RU
                       && inventoryTransactionViewStart.inventProfileId_RU == _origInventDim.InventProfileId_RU
                       && inventoryTransactionViewStart.inventSerialId == _origInventDim.InventSerialId
                       && inventoryTransactionViewStart.inventSizeId == _origInventDim.InventSizeId
                       && inventoryTransactionViewStart.inventStatusId == _origInventDim.InventStatusId
                       && inventoryTransactionViewStart.inventStyleId == _origInventDim.InventStyleId
                       && inventoryTransactionViewStart.inventVersionId == _origInventDim.InventVersionId
                       && inventoryTransactionViewStart.inventDimension1 == _origInventDim.InventDimension1
                       && inventoryTransactionViewStart.inventDimension2 == _origInventDim.InventDimension2
                       && inventoryTransactionViewStart.inventDimension3 == _origInventDim.InventDimension3
                       && inventoryTransactionViewStart.inventDimension4 == _origInventDim.InventDimension4
                       && inventoryTransactionViewStart.inventDimension5 == _origInventDim.InventDimension5
                       && inventoryTransactionViewStart.inventDimension6 == _origInventDim.InventDimension6
                       && inventoryTransactionViewStart.inventDimension7 == _origInventDim.InventDimension7
                       && inventoryTransactionViewStart.inventDimension8 == _origInventDim.InventDimension8
                       && inventoryTransactionViewStart.inventDimension9 == _origInventDim.InventDimension9
                       && inventoryTransactionViewStart.inventDimension10 == _origInventDim.InventDimension10
                       && inventoryTransactionViewStart.inventDimension11 == _origInventDim.InventDimension11
                       && inventoryTransactionViewStart.inventDimension12 == _origInventDim.InventDimension12
            {
                if (!workInventTransFinal.InventTransIdTo)
                {
                    // InventTransId is used as a reference for related work.
                    workInventTransFinal.InventTransIdTo = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
                    workInventTransFinal.doUpdate();
                    
                    InventUpd_Estimated inventUpd = InventUpd_Estimated::newInventMovement(InventMovement::construct(workInventTransFinal, InventMovSubType::TransferReceipt));
                    inventUpd.createInventTransOriginAndReferences();
                }
                InventQty processQty = this.processQty(inventoryTransactionViewFinal.InventoryQuantity, workInventTransFinal.InventTransIdTo);
                processQty = min(processQty, targetQty);

                InventDim inventDim;
                inventoryTransactionViewFinal.copyInventoryDimensionsTo(inventDim);

                this.createWorkLine(
                    _inventTrans,
                    processQty,
                    InventDim::findOrCreate(inventDim).inventDimId,
                    inventGtd,
                    workInventTransFinal.TransDateTime,
                    workInventTransFinal.InventTransIdTo);

                targetQty -= processQty;

                if (targetQty <= 0)
                {
                    break;
                }
            }
        }

        if (targetQty > 0 && !skipWorkTransExistCheck)
        {
            throw error("@Inventory_Localization:NotFoundEnoughWorkTransactionsForTargetGTD");
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>processQty</Name>
				<Source><![CDATA[
    private InventQty processQty(Qty _qty, InventTransId _inventTransId)
    {
        WHSWorkInventTrans workInventTrans;
        WHSWorkTable workTable;
        CustomJournalGTDIssueWHSWorkTable_RU gtdIssueLink;

        select sum(Qty) from workInventTrans
            where workInventTrans.InventTransIdParent == _inventTransId
            exists join workTable
                where workTable.WorkId == workInventTrans.WorkId
                    && workTable.WorkStatus == WHSWorkStatus::Closed
            exists join gtdIssueLink
                where workTable.WorkId == gtdIssueLink.WorkId;

        return _qty - workInventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWorkLineFrom</Name>
				<Source><![CDATA[
    private void addWorkLineFrom(InventTrans _inventTrans, InventDim _origInventDim)
    {
        InventQty     targetQty     = _inventTrans.Qty;
        InventTransId inventTransId = _inventTrans.inventTransOrigin().InventTransId;

        WHSWorkInventTrans workInventTransStart;
        InventTrans        inventTransStart;
        InventTransOrigin  inventTransOriginStart;
        WHSWorkTable       workTable;

        WHSWorkLine workLine, workLineStart;

        while select TableId from  workTable
            where workTable.WorkStatus == WHSWorkStatus::Closed
            join TableId from workLineStart
                where workLineStart.InventTransId == inventTransId
                    && workLineStart.WorkId == workTable.WorkId
            join TransDateTime from workInventTransStart
                where workInventTransStart.WorkId == workLineStart.WorkId
                    && workInventTransStart.LineNum == workLineStart.LineNum
            join InventTransId from inventTransOriginStart
                where inventTransOriginStart.InventTransId == workInventTransStart.InventTransIdFrom
            join Qty from inventTransStart
                where inventTransStart.inventTransOrigin == inventTransOriginStart.RecId
                    && inventTransStart.InventDimId == _origInventDim.inventDimId
            notexists join workLine
                where  workLine.WorkId == workTable.WorkId
                && workLine.LineNum < workLineStart.LineNum
        {
            InventQty processQty = this.processQty(-inventTransStart.Qty, inventTransOriginStart.InventTransId);
            processQty = min(processQty, targetQty);

            this.createWorkLine(
                _inventTrans,
                processQty,
                _inventTrans.inventDimId,
                '',
                workInventTransStart.TransDateTime,
                inventTransOriginStart.InventTransId);

            targetQty -= processQty;

            if (targetQty <= 0)
            {
                break;
            }
        }


        if (targetQty && WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled())
        {
            WHSInventoryTransactionView inventoryTransactionView;

            while select TableId from  workTable
                where workTable.WorkStatus == WHSWorkStatus::Closed
                join TableId from workLineStart
                    where workLineStart.InventTransId == inventTransId
                        && workLineStart.WorkId == workTable.WorkId
                join forupdate workInventTransStart
                    where workInventTransStart.WorkId == workLineStart.WorkId
                        && workInventTransStart.LineNum == workLineStart.LineNum
                join InventoryQuantity from inventoryTransactionView
                    where inventoryTransactionView.InventoryTransactionOriginId == workInventTransStart.InventoryTransactionOriginId
                       && inventoryTransactionView.Type == WHSInventoryTransactionTypeEnum::RegisteredIssue
                       && inventoryTransactionView.InventSiteId == _origInventDim.inventSiteId
                       && inventoryTransactionView.InventLocationId == _origInventDim.inventLocationId
                       && inventoryTransactionView.WMSLocationId == _origInventDim.wmsLocationId
                       && inventoryTransactionView.LicensePlateId == _origInventDim.licensePlateId
                       && inventoryTransactionView.configId == _origInventDim.ConfigId
                       && inventoryTransactionView.inventBatchId == _origInventDim.InventBatchId
                       && inventoryTransactionView.inventColorId == _origInventDim.InventColorId
                       && inventoryTransactionView.inventGtdId_RU == _origInventDim.InventGtdId_RU
                       && inventoryTransactionView.inventOwnerId_RU == _origInventDim.InventOwnerId_RU
                       && inventoryTransactionView.inventProfileId_RU == _origInventDim.InventProfileId_RU
                       && inventoryTransactionView.inventSerialId == _origInventDim.InventSerialId
                       && inventoryTransactionView.inventSizeId == _origInventDim.InventSizeId
                       && inventoryTransactionView.inventStatusId == _origInventDim.InventStatusId
                       && inventoryTransactionView.inventStyleId == _origInventDim.InventStyleId
                       && inventoryTransactionView.inventVersionId == _origInventDim.InventVersionId
                       && inventoryTransactionView.inventDimension1 == _origInventDim.InventDimension1
                       && inventoryTransactionView.inventDimension2 == _origInventDim.InventDimension2
                       && inventoryTransactionView.inventDimension3 == _origInventDim.InventDimension3
                       && inventoryTransactionView.inventDimension4 == _origInventDim.InventDimension4
                       && inventoryTransactionView.inventDimension5 == _origInventDim.InventDimension5
                       && inventoryTransactionView.inventDimension6 == _origInventDim.InventDimension6
                       && inventoryTransactionView.inventDimension7 == _origInventDim.InventDimension7
                       && inventoryTransactionView.inventDimension8 == _origInventDim.InventDimension8
                       && inventoryTransactionView.inventDimension9 == _origInventDim.InventDimension9
                       && inventoryTransactionView.inventDimension10 == _origInventDim.InventDimension10
                       && inventoryTransactionView.inventDimension11 == _origInventDim.InventDimension11
                       && inventoryTransactionView.inventDimension12 == _origInventDim.InventDimension12
                notexists join workLine
                    where  workLine.WorkId == workTable.WorkId
                    && workLine.LineNum < workLineStart.LineNum
            {
                if (!workInventTransStart.InventTransIdFrom)
                {
                    workInventTransStart.InventTransIdFrom = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
                    workInventTransStart.doUpdate();

                    InventUpd_Estimated inventUpd = InventUpd_Estimated::newInventMovement(InventMovement::construct(workInventTransStart));
                    inventUpd.createInventTransOriginAndReferences();
                }

                InventQty processQty = this.processQty(-inventoryTransactionView.InventoryQuantity, workInventTransStart.InventTransIdFrom);
                processQty = min(processQty, targetQty);
                
                this.createWorkLine(
                    _inventTrans,
                    processQty,
                    _inventTrans.inventDimId,
                    '',
                    workInventTransStart.TransDateTime,
                    workInventTransStart.InventTransIdFrom);

                targetQty -= processQty;

                if (targetQty <= 0)
                {
                    break;
                }
            }
        }

        if (targetQty > 0 && !skipWorkTransExistCheck)
        {
            throw error("@Inventory_Localization:NotFoundEnoughWorkTransactionsForTargetGTD");
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>createGTDWorkLines</Name>
				<Source><![CDATA[
    public void createGTDWorkLines(InventTrans _inventTrans, InventDim _origInventDim)
    {
        this.addWorkLineFrom(_inventTrans, _origInventDim);
        this.addWorkLineTo(_inventTrans, _origInventDim);

        if (workid)
        {
            WHSWorkTable::updateWorkStatusFromWorkLines(workid);

            CustomJournalGTDIssueWHSWorkTable_RU gtdIssueLink;
            gtdIssueLink.customJournalId = customJournalId;
            gtdIssueLink.WorkId          = workId;
            gtdIssueLink.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>workId</Name>
				<Source><![CDATA[
    private WHSWorkId workId(InventTrans _inventTrans)
    {
        if (workid)
        {
            return workId;
        }

        WHSWorkTable workTable;
        workTable.setWorkId();
        workTable.WorkBuildId   = WHSWorkTable::getNextWorkCreateId();
        workTable.WorkTransType = WHSWorkTransType::Purch;
        workTable.OrderNum      = InventTransOriginPurchLine::purchLine(_inventTrans.InventTransOrigin).PurchId;

        InventDim inventDim = _inventTrans.inventDim();

        workTable.InventSiteId     = inventDim.InventSiteId;
        workTable.InventLocationId = inventDim.InventLocationId;
        
        workTable.WorkCreatedBy      = curUserId();
        workTable.IsGTDIssueSupport_RU = NoYes::Yes;
        workTable.TransTxt += strfmt("@GLS106007"+' ' + "@GLS106007", customJournalId, inventGTD);
        using (var context = WHSEnforceInventoryTransactionMechanismContext::defaultInventoryTransactionMechanism(WHSInventoryTransactionMechanismEnum::InventTrans))
        {
            workTable.insert();
        }

        workId = workTable.WorkId;

        return workId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        const container notSupportedStatuses = [WHSWorkStatus::InProcess, WHSWorkStatus::Open];

        WHSWorkLine           workLine;
        InventTransOrigin     inventTransOrigin;
        CustomJournalTrans_RU customJournalTrans;
        PurchLine             purchLine;

        boolean ret = true;

        select WorkId from workLine
            where workLine.WorkStatus in notSupportedStatuses
            join ReferenceId from inventTransOrigin
                where inventTransOrigin.InventTransId == workLine.InventTransId
                    && inventTransOrigin.ReferenceCategory == InventTransType::Purch
            exists join purchLine
                where purchLine.PurchId == inventTransOrigin.ReferenceId
            exists join customJournalTrans
                where customJournalTrans.SalesPurchInventTransId == purchLine.InventTransId
                    && customJournalTrans.CustomJournalId == customJournalId;

        if (workLine)
        {
            ret = checkFailed (strFmt("@Inventory_Localization:UncompletedWarhouseWorksForPOPleseCompleteBeforeGTDIssue", workLine.WorkId, inventTransOrigin.ReferenceId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of <c>CustomJournalImportGTDIssueWorkCreate_RU</c>.
    /// </summary>
    /// <param name = "_inventGtd">The issued GTD value</param>
    /// <param name = "_customJournalId">The identificator of the journal for processing.</param>
    /// <param name = "_skipWorkTransExistCheck">The flage that determines if check for sufficient amoutn of work.</param>
    /// <returns>Initialized instance of the object.</returns>
    public static CustomJournalImportGTDIssueWorkCreate_RU construct(InventGTDId_RU _inventGtd, CustomJournalId_RU _customJournalId, boolean _skipWorkTransExistCheck)
    {
        CustomJournalImportGTDIssueWorkCreate_RU customsJournalGTDWorkCreate = new CustomJournalImportGTDIssueWorkCreate_RU();

        customsJournalGTDWorkCreate.inventGtd               = _inventGtd;
        customsJournalGTDWorkCreate.customJournalId         = _customJournalId;
        customsJournalGTDWorkCreate.skipWorkTransExistCheck = _skipWorkTransExistCheck;

        return customsJournalGTDWorkCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostOnhandCache</Name>
				<Source><![CDATA[
    private InventCostOnhandCache inventCostOnhandCache()
    {
        if (!inventCostOnhandCache)
        {
            inventCostOnhandCache = InventCostOnhandCache::construct();
        }

        return inventCostOnhandCache;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>