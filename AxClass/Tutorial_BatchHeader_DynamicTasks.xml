<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tutorial_BatchHeader_DynamicTasks</Name>
	<SourceCode>
		<Declaration>
			<![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
[SysObsolete('This class is obsolete and should not be used.', false, 30\3\2023)]
class Tutorial_BatchHeader_DynamicTasks extends RunBaseBatch
{
    DialogField dialogDelayDurationInSeconds;
    DialogField dialogTerminalDepth;
    DialogField dialogCreateChildTasksAsRuntime;
    DialogField dialogBranching;
    DialogField dialogFailTaskAtTerminalDepth;
    DialogField dialoglogLongInfolog;
    
    int delayDurationInSeconds;
    int terminalDepth;
    int depth;
    int branching;
    boolean createChildTasksAsRuntime;
    boolean failTaskAtTerminalDepth;
    boolean logLongInfolog;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        delayDurationInSeconds, terminalDepth, depth, branching, createChildTasksAsRuntime, failTaskAtTerminalDepth, logLongInfolog
    #endmacro
    

}
]]>
		</Declaration>
		<Methods>
			<Method>
				<Name>createChildTask</Name>
				<Source>
					<![CDATA[
    private Tutorial_BatchHeader_DynamicTasks createChildTask()
    {
        var childClass = new Tutorial_BatchHeader_DynamicTasks();
        childClass.depth = depth + 1;
        childClass.delayDurationInSeconds = delayDurationInSeconds;
        childClass.createChildTasksAsRuntime = createChildTasksAsRuntime;
        childClass.terminalDepth = terminalDepth;
        childClass.branching = branching;
        childClass.failTaskAtTerminalDepth =  failTaskAtTerminalDepth;
        childClass.logLongInfolog = logLongInfolog;
        return childClass;
    }

]]>
				</Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source>
					<![CDATA[
    public void run()
    {
        System.Exception ex;
        try
        {
            if (!Global::isRunningOnBatch())
            {
                info(strFmt("The class %1 is not running on batch", classStr(Tutorial_BatchHeader_DynamicTasks)));
                return;
            }
            else
            {
                info(strFmt("The class %1 is running on batch", classStr(Tutorial_BatchHeader_DynamicTasks)));
            }

            if (depth == terminalDepth)
            {
                if (failTaskAtTerminalDepth)
                {
                    throw Error("Failing the task based on parameters provided.");
                }
                else
                {
                    sleep(delayDurationInSeconds*1000);
                    return;
                }
            }

            utcdatetime startTime = DateTimeUtil::utcNow();
            info(strFmt("Tutorial_BatchHeader_DynamicTasks.run started execution at %1"
                            ,DateTimeUtil ::toStr(
                                DateTimeUtil ::utcNow())
                            ));
            var batchHeader = BatchHeader::getCurrentBatchHeader();
            BatchConstraintType constraintType = BatchConstraintType::Or;

            var rootTask = this.createChildTask();
            this.addTask(batchHeader, rootTask, constraintType);
            rootTask.batchInfo().parmCaption("Depth : " + int2Str(depth+1) +  ", Root : " + any2Str(true));
            
            if (depth mod 3 == 2 )
            {
                constraintType = BatchConstraintType::And;
            }

            for (int i = 0; i < branching; i++)
            {
                var task = this.createChildTask();
                task.batchInfo().parmCaption("Depth : " + int2Str(depth+1) +  ", Root : " + any2Str(false));
                
                this.addTask(batchHeader, task, constraintType);
                batchHeader.addDependency(task, rootTask, BatchDependencyStatus::Finished);
                batchHeader.addDependency(task, rootTask, BatchDependencyStatus::Error);
            }
            batchHeader.save();
            sleep(delayDurationInSeconds*1000);
       
		    if(logLongInfolog)
			{
                Info(Tutorial_BatchHeader_DynamicTasks::textForInfolog());
			}
			else
			{
			    Info(@"Task Executed Successfully");
			}
        }
        catch (ex)
        {
            error("Tutorial_BatchHeader_DynamicTasks :: Caught an system exception " + ex.ToString());
            throw;
        }
        finally
        {
            info("Executing Finally Block");
        }
    }

]]>
				</Source>
			</Method>
			<Method>
				<Name>addTask</Name>
				<Source>
					<![CDATA[
    private void addTask(BatchHeader batchHeader, Batchable task ,BatchConstraintType constraintType)
    {
        if (createChildTasksAsRuntime)
        {
            batchHeader.addRuntimeTask(task, this.batchInfo().parmBatchId(), constraintType);
        }
        else
        {
            batchHeader.addTask(task, constraintType);
        }
    }

]]>
				</Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source>
					<![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]>
				</Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source>
					<![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]>
				</Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source>
					<![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean getFromDialog()
    {
        delayDurationInSeconds = dialogDelayDurationInSeconds.value();
        terminalDepth = dialogTerminalDepth.value();
        createChildTasksAsRuntime = dialogCreateChildTasksAsRuntime.value();
        branching = dialogBranching.value();
        failTaskAtTerminalDepth = dialogFailTaskAtTerminalDepth.value();

        return super();
    }

]]>
				</Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source>
					<![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    ///    created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dlg = super();
        
        dialogDelayDurationInSeconds = dlg.addField(enum2Str(Types::Integer), "Duration of each task in seconds", "m");
        dialogDelayDurationInSeconds.value(delayDurationInSeconds);
        
        dialogTerminalDepth = dlg.addField(enum2Str(Types::Integer),"Terminal depth", "Depth at which the tasks will stop branching further.");
        dialogTerminalDepth.value(terminalDepth);

        dialogBranching = dlg.addField(enum2Str(Types::Integer), "Branching Factor", "Number of tasks created by each task.");
        dialogBranching.value(branching);

        dialogCreateChildTasksAsRuntime = dlg.addField("boolean", "Create child tasks as runtime task", @"If set to true creates child tasks as runtime tasks else
        create normal batch tasks.");
        dialogCreateChildTasksAsRuntime.value(createChildTasksAsRuntime);

        dialogFailTaskAtTerminalDepth = dlg.addField("boolean", "Fail tasks at terminal depth", @"If set to true all the tasks at the last level will throw exception and error out.");
        dialogFailTaskAtTerminalDepth.value(failTaskAtTerminalDepth);

        dialoglogLongInfolog = dlg.addField("boolean", "Log Large Infolog", @"If set to true this will log large infolog.");
        dialoglogLongInfolog.value(logLongInfolog);

        return dlg;
    }

]]>
				</Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source>
					<![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]>
				</Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source>
					<![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);
        container packedData;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]>
				</Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source>
					<![CDATA[
    public boolean canGoBatchJournal()
    {
        return false;
    }

]]>
				</Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source>
					<![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    client server static ClassDescription description()
    {
        return "Recursively adds new batch tasks dynamically with constraints.";
    }

]]>
				</Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source>
					<![CDATA[
    static void main (Args _args)
    {
        Tutorial_BatchHeader_DynamicTasks instance;

        instance = new Tutorial_BatchHeader_DynamicTasks();
        instance.batchInfo().parmBatchExecute(NoYes::Yes);

        if (instance.prompt())
        {
            instance.runOperation();
        }
    }

]]>
				</Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source>
					<![CDATA[
    void initParmDefault()
    {
        this.depth = 0;
        this.delayDurationInSeconds = 5;
        this.terminalDepth = 3;
        this.createChildTasksAsRuntime = 1;
        this.branching = 10;
        this.logLongInfolog = 0;

    }

]]>
				</Source>
			</Method>
			<Method>
				<Name>sampleText</Name>
				<Source>
					<![CDATA[
    static str sampleText()
    {
        return @"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce et lorem non est lobortis elementum nec ultrices tortor. Proin et augue id nibh convallis accumsan eu ut est. Praesent sit amet imperdiet arcu. Sed ullamcorper est eu lacus faucibus varius. Praesent et arcu iaculis, egestas odio quis, laoreet felis. Maecenas viverra elit urna, ut mollis nunc aliquet vel. Suspendisse tincidunt metus ac ex efficitur lobortis. Nam id eros ut nisl dapibus tincidunt ac efficitur magna. Maecenas sit amet urna tempor, lacinia ante feugiat, auctor nisl. Nunc rhoncus scelerisque viverra. Cras lorem massa, ornare non sapien et, molestie auctor tortor.

        Pellentesque leo dolor, laoreet eu iaculis a, posuere nec lacus. Morbi sed dui felis. Morbi porttitor tempor tellus, pharetra maximus lorem cursus ac. Pellentesque varius tempus egestas. Sed laoreet ornare nisi, eget pretium quam rhoncus ac. Sed sed urna interdum, mollis neque ut, sollicitudin turpis. Ut a varius quam. Morbi magna urna, maximus et ultrices eu, placerat nec sem.

        Donec nunc diam, malesuada et nibh vitae, vehicula interdum neque. Ut odio sapien, posuere vel justo sed, gravida dictum leo. Donec in justo ac lorem tincidunt luctus. Fusce elementum est suscipit enim vulputate eleifend. Ut aliquet justo vitae felis congue luctus eu non nibh. Maecenas at ornare quam. Aliquam dignissim sem id purus vulputate, id laoreet ante vulputate. Sed et ipsum varius, sagittis lorem vel, pulvinar diam. Fusce vitae elit vel nibh cursus tempus ultricies ac erat. Suspendisse faucibus ligula tellus, eu venenatis ante laoreet id.

        In id ex in nisi pulvinar congue ut ac ex. Suspendisse potenti. Aliquam eget pharetra felis. Donec convallis, magna nec commodo fermentum, justo tellus auctor dui, sed dapibus nibh lorem et diam. Ut vel eros rutrum, vehicula justo sed, imperdiet purus. Nulla ac massa vitae urna rutrum vulputate non ut tellus. Proin ante lacus, dictum ac nisi ut, mollis finibus augue.

        Aliquam efficitur sagittis diam, a cursus risus tempor eu. Donec in vestibulum arcu. Nam sed pulvinar mi. Nunc euismod maximus nulla nec efficitur. Phasellus commodo eros risus, sed fermentum felis iaculis quis. Etiam suscipit massa at ante eleifend sagittis. Integer sagittis turpis leo, ut laoreet diam fermentum sed. Sed vestibulum ex nisl, sed convallis eros molestie nec. Etiam ornare euismod vestibulum.

        In eget elit luctus, commodo ex a, ultricies dolor. Mauris eget dolor nisl. Mauris et dui velit. Ut malesuada pellentesque nisi. Suspendisse dapibus nisl nec tempor vehicula. Suspendisse dapibus sodales arcu vitae aliquet. Vivamus eu augue iaculis, tincidunt leo at, feugiat ligula. Nam viverra accumsan laoreet. Curabitur malesuada tincidunt nisi, quis accumsan ante mattis vitae. Vivamus convallis eget magna et mollis. Nulla tempor lectus sit amet quam vulputate ornare. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Praesent imperdiet aliquam ante ac sodales. Vivamus pulvinar sed arcu id iaculis.

        Ut lobortis elementum quam, eget luctus ex imperdiet eu. Etiam sollicitudin felis vel dolor consequat scelerisque. Suspendisse eget sagittis nisi. Vivamus vel rhoncus diam. Morbi sodales magna at tellus semper, quis cursus odio luctus. In auctor lacus sed hendrerit luctus. Nullam placerat felis aliquet, luctus leo eu, facilisis nisl. Nulla mollis, ante in imperdiet viverra, sem sapien porta neque, dignissim suscipit ligula velit eu erat. Donec gravida viverra augue et mollis. Duis a urna risus. In cursus aliquet quam, id faucibus sapien lacinia at. Cras interdum suscipit consectetur. Ut ullamcorper magna et tempor dapibus.

        Proin vel tempor felis. Etiam iaculis orci consectetur mollis rutrum. Donec sollicitudin, nibh ac porttitor dictum, risus metus varius lorem, nec posuere felis quam vitae risus. Praesent a est aliquet, aliquet ex tempus, porta erat. Donec eget vulputate magna. Cras efficitur id orci a aliquam. Cras pellentesque tempus ex at tempor. Fusce elementum finibus erat, eget congue ligula mollis in. Mauris vulputate lorem eu lacus tincidunt, eu feugiat lacus tincidunt. Integer nibh diam, iaculis vel vulputate vitae, porta quis felis. Donec accumsan orci sit amet ipsum viverra, non viverra nibh feugiat. Nulla eu porta nunc, et tincidunt odio. Cras tincidunt volutpat imperdiet. Ut id eleifend nisl, sagittis sollicitudin ex. Quisque vel sapien in massa consequat vehicula vitae vitae eros. In hac habitasse platea dictumst.

        Sed mattis euismod turpis, vitae sollicitudin libero dapibus in. Etiam in tellus tincidunt, fermentum neque sit amet, ultrices odio. Donec et faucibus ante, sed fringilla ex. Maecenas malesuada lorem vel consequat ornare. Curabitur eros sem, vehicula id euismod eget, interdum quis odio. Cras vel urna sit amet lectus tristique varius nec eget neque. Aenean accumsan, nisl vitae tincidunt aliquam, magna nisl dignissim lorem, ac mollis urna ipsum id velit.

        Fusce sodales vitae magna sit amet fermentum. Sed eget nisi sed mi tristique scelerisque a egestas justo. Aliquam erat volutpat. Mauris posuere neque a lorem efficitur, vitae consectetur erat egestas. Donec scelerisque sollicitudin sodales. Suspendisse maximus justo sit amet finibus porttitor. Nunc eget tortor diam.";
    }

]]>
				</Source>
			</Method>
			<Method>
				<Name>textForInfoLog</Name>
				<Source>
					<![CDATA[
    static str textForInfoLog()
    {
        var outputText = Tutorial_BatchHeader_DynamicTasks::sampleText();
        for(int i = 0; i < 10; i++)
        {
            outputText += outputText;
        }

        return outputText;
    }

]]>
				</Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>