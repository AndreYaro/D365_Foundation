<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCurrencyExchangeInformation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxCurrencyExchangeInformation</c> class holds all currency exchange related information and provide currency exchange rates.
/// </summary>
final public class TaxCurrencyExchangeInformation
{
    private Map currencyMap;
    private Map exchangeRateMap;
    private TransDate transDate;
    private Ledger ledger;
    private recId exchangeRateType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(CurrencyCode _transactionCurrency, TransDate _date, recId _exchangeRateType)
    {
        this.init(_transactionCurrency, _date, _exchangeRateType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init(CurrencyCode _transactionCurrency, TransDate _date, recId _exchangeRateType)
    {
        ledger = Ledger::findByLegalEntity(CompanyInfo::current());
        this.transDate = _date;

        currencyMap = new Map(Types::Enum, Types::AnyType);
        currencyMap.insert(TaxCurrency::AccountingCurrency, ledger.AccountingCurrency);
        currencyMap.insert(TaxCurrency::ReportingCurrency, ledger.ReportingCurrency);
        currencyMap.insert(TaxCurrency::TransactionCurrency, _transactionCurrency);

        exchangeRateMap = new Map(Types::Container, Types::Real);
        this.exchangeRateType = _exchangeRateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public void setTransactionCurrencyCode(CurrencyCode _transactionCurrency)
    {
        currencyMap.insert(TaxCurrency::TransactionCurrency, _transactionCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxCurrencyCode</Name>
				<Source><![CDATA[
    public void setTaxCurrencyCode(CurrencyCode _taxCurrency)
    {
        currencyMap.insert(TaxCurrency::TaxCurrency, _taxCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCodeByCurrencyType</Name>
				<Source><![CDATA[
    public CurrencyCode getCurrencyCodeByCurrencyType(TaxCurrency _currencyType)
    {
        return currencyMap.lookup(_currencyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRate</Name>
				<Source><![CDATA[
    public CurrencyExchangeRate getExchangeRate(TaxCurrency _fromCurrency, TaxCurrency _toCurrency)
    {
        container key = [currencyMap.lookup(_fromCurrency), currencyMap.lookup(_toCurrency)];
        if (!exchangeRateMap.exists(key))
        {
            if (currencyMap.lookup(_fromCurrency) == currencyMap.lookup(_toCurrency))
            {
                exchangeRateMap.insert(key, 100);
                return exchangeRateMap.lookup(key);
            }

            CurrencyExchangeRate crossRate = this.getExchangeRateEffectiveView(currencyMap.lookup(_fromCurrency), currencyMap.lookup(_toCurrency), this.transDate).CrossRate;
            exchangeRateMap.insert(key, crossRate);

        }
        return exchangeRateMap.lookup(key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateEffectiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate for provided condition, and the rate should be used as: TransactionCurrencyAmount * (exchangeRateView.CrossRate / 100)
    /// </summary>
    /// <param name = "_fromCurrencyCode">Convert from currency code</param>
    /// <param name = "_toCurrencyCode">Convert target currency code</param>
    /// <param name = "_transDate">Date of exchange rate</param>
    /// <returns>Exchange rate view which contains all related exchange rate information.</returns>
    private ExchangeRateEffectiveView getExchangeRateEffectiveView(
        CurrencyCode _fromCurrencyCode,
        CurrencyCode _toCurrencyCode,
        TransDate _transDate)
    {
        ExchangeRateEffectiveView view;

        // find values from view
        select firstonly view
            where view.ExchangeRateType == exchangeRateType
                && view.FromCurrencyCode == _fromCurrencyCode
                && view.ToCurrencyCode == _toCurrencyCode
                && view.ValidFrom <= _transDate && view.ValidTo >= _transDate;

        if (!view)
        {
            throw error(strfmt(
                "@SYS321719",
                ExchangeRateType::find(exchangeRateType).Name,
                _fromCurrencyCode,
                _toCurrencyCode,
                _transDate));
        }
        return view;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>