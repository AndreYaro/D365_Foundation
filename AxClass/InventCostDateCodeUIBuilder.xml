<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostDateCodeUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Handles the UI events for the date code lookup functionality.
/// </summary>
class InventCostDateCodeUIBuilder extends SrsReportDataContractUIBuilder
{
    DialogField dateCodeField;
    DialogField fromDateField;
    DialogField toDateField;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the dialog for the date code contract.
    /// </summary>
    public void build()
    {
        super();
        dateCodeField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventCostDateCodeContract, parmDateCode));
        dateCodeField.value('');
        fromDateField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventCostDateCodeContract, parmFromDate));
        toDateField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventCostDateCodeContract, parmToDate));

        // It may happen that <c>InventCostDateCodeContract</c> contract is embedded to another contract,
        // which might need to hide the date range fields under certain conditions.
        SysDictClass sysDictClass = new SysDictClass(classIdGet(this.controller()));
        if (sysDictClass.hasObjectMethod(identifierStr(allowEditDateInterval)))
        {
            Object controllerObject = this.controller();
            dateCodeField.visible(controllerObject.allowEditDateInterval());
            fromDateField.visible(controllerObject.allowEditDateInterval());
            toDateField.visible(controllerObject.allowEditDateInterval());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateCodeModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the UI modified event for the date code dialog field.
    /// </summary>
    /// <param name="_control">
    ///    The control behind the changed dialog field.
    /// </param>
    /// <returns>
    ///    true if the control value has been modified; otherwise false.
    /// </returns>
    /// <remarks>
    ///    The from date and to date are set according to the date code lookup.
    /// </remarks>
    public boolean dateCodeModified(FormStringControl _control)
    {
        boolean ret = _control.modified();

        if (ret)
        {
            if (dateCodeField.value() != '')
            {
                LedgerPeriodCode ledgerPeriodCode = LedgerPeriodCode::find(dateCodeField.value());
                fromDateField.value(ledgerPeriodCode.fromDate());
                toDateField.value(ledgerPeriodCode.toDate());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateCodeValidate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the date code is valid.
    /// </summary>
    /// <param name="_control">
    ///    The control behind the changed dialog field.
    /// </param>
    /// <returns>
    ///    true if the control value is valid; otherwise false.
    /// </returns>
    /// <remarks>
    ///    The data code must exist in the <c>LedgerPeriodCode</c> table.
    /// </remarks>
    public boolean dateCodeValidate(FormStringControl _control)
    {
        boolean ret = _control.modified();

        if (ret && dateCodeField.value())
        {
            if (!LedgerPeriodCode::checkExist(dateCodeField.value()))
            {
                ret = false;
                dateCodeField.value('');
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromOrToDateModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the date code dialog field if from or to- ate has been modified.
    /// </summary>
    /// <param name="_control">
    ///    The control behind the changed dialog field.
    /// </param>
    /// <returns>
    ///    true if the control value has been modified; otherwise false.
    /// </returns>
    public boolean fromOrToDateModified(FormDateControl _control)
    {
        boolean ret = _control.modified();

        if (ret)
        {
            dateCodeField.value('');
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Registers a method override in order to capture dialog events.
    /// </summary>
    public void postRun()
    {
        super();

        dialog.dialogForm().formRun().controlMethodOverload(false);

        dateCodeField.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(InventCostDateCodeUIBuilder, dateCodeModified), this);
        dateCodeField.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(InventCostDateCodeUIBuilder, dateCodeValidate), this);
        fromDateField.registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(InventCostDateCodeUIBuilder, fromOrToDateModified), this);
        toDateField.registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(InventCostDateCodeUIBuilder, fromOrToDateModified), this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
