<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetNodeCalculationOutUnitBased</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostSheetNodeCalculationOutUnitBased</c> class is used when you calculate overhead based on
/// the quantity, weight, or volume of manufactured products.
/// </summary>
public class CostSheetNodeCalculationOutUnitBased extends CostSheetNodeCalculationUnitBased
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowedSubtypeSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a <c>Set</c> object that contains the calculation subtypes that are allowed for this class.
    /// </summary>
    /// <returns>
    ///    The set that contains <c>CostCalculationUnitBasedSubtype</c> enumeration elements.
    /// </returns>
    Set allowedSubtypeSet()
    {
        Set set = new Set(Types::Enum);
        set.add(CostCalculationUnitBasedSubtype::Quantity);
        set.add(CostCalculationUnitBasedSubtype::Volume);
        set.add(CostCalculationUnitBasedSubtype::Weight);

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLowestLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the concrete amounts based on input data and costing sheet structure for leaf nodes.
    /// </summary>
    /// <param name="_costSheet">
    ///    The costing sheet object.
    /// </param>
    /// <param name="_costCalcTransData">
    ///    The <c>CostCalcTransData</c> object that has input data.
    /// </param>
    public void calcLowestLevel(
        CostSheet                   _costSheet,
        CostCalcTransData           _costCalcTransData)  // ignore _costCalctTransData
    {
        AmountMST                   contributionVariable;
        Qty                         consumptionVariable;

        UnitOfMeasureSymbol         contributionUnitId;    // The unit id for the base of the contribution calculation

        super(_costSheet, _costCalcTransData);

        CostTmpCalcTrans costTmpCalcTrans = _costCalcTransData.getCostTmpCalcTrans();

        CostSheetCalculationFactor costSheetCalculationFactor = this.selectCostSheetCalculationFactor();

        if (costSheetCalculationFactor)
        {
            InventTable inventItem = InventTable::find(_costCalcTransData.getItemId());
            switch (subtype)
            {
                case CostCalculationUnitBasedSubtype::Quantity :
                    contributionUnitId = InventTableModule::find(inventItem.ItemId, ModuleInventPurchSales::Invent).UnitId;
                    consumptionVariable = this.getCostCalcTransData().getCostSheetCalculationQuantity();
                    contributionVariable = consumptionVariable * costSheetCalculationFactor.Amount;
                    break;
                case CostCalculationUnitBasedSubtype::Weight :
                    contributionUnitId = UnitOfMeasure::find(
                        UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(
                            UnitOfMeasureClass::Mass).UnitOfMeasure).Symbol;
                    consumptionVariable = this.getCostCalcTransData().getCostSheetCalculationQuantity() * inventItem.NetWeight;
                    contributionVariable = consumptionVariable * costSheetCalculationFactor.Amount;
                    break;
                case CostCalculationUnitBasedSubtype::Volume :
                    contributionUnitId = UnitOfMeasure::find(
                        UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(
                            UnitOfMeasureClass::LiquidVolume).UnitOfMeasure).Symbol;
                    consumptionVariable = this.getCostCalcTransData().getCostSheetCalculationQuantity() * inventItem.UnitVolume;
                    contributionVariable = consumptionVariable * costSheetCalculationFactor.Amount;
                    break;
                default:
                    [contributionUnitId, consumptionVariable, contributionVariable] = this.initContributionUnitIdConsumptionAndContributionVariable(
                                                                                                    subtype, 
                                                                                                    _costCalcTransData,
                                                                                                    contributionUnitId,
                                                                                                    consumptionVariable,
                                                                                                    contributionVariable);
                    break;
            }

            if (this.getCostCalcTransData().getBOMCalcItem() != null)
            {
                this.bomCalcCheckIndirectCost().checkNoConsumption(_costCalcTransData.getItemId(), this.getCode(), consumptionVariable);
            }

            this.getCostCalcTransData().addCalcTrans(parentCostGroupId,
                                         contributionUnitId,
                                         ItemCalcType::IndirectOutUnitBased,
                                         this.getCode(),
                                         contributionVariable,
                                         0,
                                         consumptionVariable,
                                         0,
                                         this.getCostCalcTransData().getLevel(),
                                         '');
        }

        calculated = true;

        this.updateCostGroupImpactSet(_costSheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initContributionUnitIdConsumptionAndContributionVariable</Name>
				<Source><![CDATA[
    [Replaceable]
    protected container initContributionUnitIdConsumptionAndContributionVariable(
        CostCalculationUnitBasedSubtype _costCalculationUnitBasedSubtype,
        CostCalcTransData               _costCalcTransData,
        UnitOfMeasureSymbol             _contributionUnitId,
        Qty                             _consumptionVariable,
        AmountMST                       _contributionVariable
        )
    {
        return [_contributionUnitId, _consumptionVariable, _contributionVariable];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the resource index of the image that will represent this node in the editor.
    /// </summary>
    /// <returns>
    ///    The resource ID.
    /// </returns>
    public int getImage()
    {
        return #imageCalculationUnitBased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getType</Name>
				<Source><![CDATA[
    public CostSheetNodeType getType()
    {
        return CostSheetNodeType::CalculationOutUnitBased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toBOMCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a <c>BOMCalcTrans</c> record based on this costing sheet node.
    /// </summary>
    /// <param name="_costProfitSet">
    ///     An element of the <c>CostProfitSet</c> enumeration that identifies the profit settings.
    /// </param>
    /// <param name="_transDate">
    ///     The date of the transaction.
    /// </param>
    /// <returns>
    ///     The <c>BOMCalcTrans</c> record.
    /// </returns>
    public BOMCalcTrans toBOMCalcTrans(CostProfitSet _costProfitSet, TransDate _transDate)
    {
        BOMCalcTrans bomCalcTrans = super(_costProfitSet, _transDate);

        bomCalcTrans.CalcType = ItemCalcType::IndirectOutUnitBased;

        return bomCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toPmfCoByProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PmfCoByProdCalcTrans</c> record.
    /// </summary>
    /// <param name="_prodCalcMode">
    /// The calculation mode.
    /// </param>
    /// <param name="_costProfitSet">
    /// The cost profit.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The initialized <c>PmfCoByProdCalcTrans</c> record.
    /// </returns>
    public PmfCoByProdCalcTrans toPmfCoByProdCalcTrans(CostSheetProdCalcMode _prodCalcMode,
                                                       CostProfitSet         _costProfitSet  = CostProfitSet::Standard,
                                                       TransDate             _transDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        PmfCoByProdCalcTrans prodCalcTrans = super(_prodCalcMode, _costProfitSet, _transDate);

        prodCalcTrans.CalcType = ItemCalcType::IndirectOutUnitBased;

        return prodCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a <c>ProdCalcTrans</c> record based on this costing sheet node.
    /// </summary>
    /// <param name="_prodCalcMode">
    ///     An element of the <c>CostSheetProdCalcMode</c> enumeration that identifies whether
    ///     the calculation is made for estimation or actual costing.
    /// </param>
    /// <param name="_costProfitSet">
    ///     An element of the <c>CostProfitSet</c> enumeration that identifies the profit settings.
    /// </param>
    /// <param name="_transDate">
    ///     The date of the transaction.
    /// </param>
    /// <returns>
    ///     The <c>ProdCalcTrans</c> record.
    /// </returns>
    public ProdCalcTrans toProdCalcTrans(
        CostSheetProdCalcMode  _prodCalcMode,
        CostProfitSet           _costProfitSet = CostProfitSet::Standard,
        TransDate               _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
        )
    {
        ProdCalcTrans prodCalcTrans = super(_prodCalcMode, _costProfitSet, _transDate);

        prodCalcTrans.CalcType = ItemCalcType::IndirectOutUnitBased;

        return prodCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useBasis</Name>
				<Source><![CDATA[
    protected boolean useBasis()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>CostSheetNodeCalculationOutUnitBased</c> class.
    /// </summary>
    /// <param name="_costSheetNodeTable">
    ///     The record in the <c>CostSheetNodeTable</c> table that will be used to initialize this object.
    /// </param>
    /// <param name="_parentNodeId">
    ///     The ID of the parent node.
    /// </param>
    /// <param name="_modeStrategy">
    ///     The <c>CostSheetModeStrategy</c> object that controls the creation of the costing sheet.
    /// </param>
    /// <param name="_parentCostGroupId">
    ///     The ID of the <c>CostSheetNodeGroup</c> object that the calculation node belongs to.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>CostSheetNodeCalculationOutUnitBased</c> class.
    /// </returns>
    public static CostSheetNodeCalculationOutUnitBased construct(
        CostSheetNodeTable      _costSheetNodeTable,
        CostSheetNodeId         _parentNodeId,
        CostSheetModeStrategy   _modeStrategy,
        CostGroupId             _parentCostGroupId)
    {
        return new CostSheetNodeCalculationOutUnitBased(_costSheetNodeTable, _parentNodeId, _modeStrategy, _parentCostGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>CostSheetNodeCalculationOutUnitBased</c> class.
    /// </summary>
    /// <param name="_packedNode">
    ///     A container that holds a serialized <c>CostSheetNodeCalculationOutUnitBased</c> object.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>CostSheetNodeCalculationOutUnitBased</c> class.
    /// </returns>
    public static CostSheetNodeCalculationOutUnitBased create(container _packedNode)
    {
        CostSheetNodeCalculationOutUnitBased node = CostSheetNodeCalculationOutUnitBased::construct(null, 0, CostSheetModeStrategyPackUnpack::construct(), '');
        boolean ret = node.unpack(_packedNode);

        return ret ? node : null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>