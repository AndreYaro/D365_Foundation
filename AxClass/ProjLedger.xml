<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjLedger implements SysPackable
{
    ProjCostSales           costSales;
    ProjTransIdBase         projTransId;
    ProjId                  projId;

    ProjCategoryId          projCategoryId;
    ProjActivityNumber      activityNumber;
    ProjEmplItemId          projEmplItemId;
    ResourceRecId           resource;
    ResourceCategoryRecId   resourceCategory;
    Qty                     projQty;

    ProjTransType           projTransType;

    ProjTransDate           projTransDate;
    boolean                 transEqualLedgerDate;

    PackingSlipId           packingSlipId;
    ProjAdjustRefId         projAdjustRefId;
    SalesInvoiceId          salesInvoiceId;
    InventTransId           inventTransId;
    InventTransType         inventTransType;
    InventTransRefId        inventTransRefId;
    LastInvoiceId           purchInvoiceId;

    AmountMST               investmentTaxAmountMST;

    boolean                 elimination;
    boolean                 taxUpdate;

    ProjActivityId          m_sProjActivityId;
    ProjPaymentStatus       paymentStatus;
    TransDate               paymentDate;

    ProjItemTransCostType   projItemTransCostType;

    ProjTransactionOrigin   transactionOrigin;
    ProjLedgerOrigin        ledgerOrigin;
    ProjFundingSourceRefId  fundingSourceID;

    private boolean         useLedgerStatusCostOrig;

    // related to the LedgerPostingTransactionProjectTmp table
    RecId tempRecId;

    // NOTE: Any changes to the member variables of this class must also be
    // made in the LedgerPostingTransactionProjectTmp table

    #DEFINE.CurrentVersion(4)
    #LOCALMACRO.CurrentList
        costSales,
        projTransId,
        projId,

        projCategoryId,
        activityNumber,
        projEmplItemId,
        resource,
        resourceCategory,
        projQty,

        projTransType,

        projTransDate,
        transEqualLedgerDate,

        packingSlipId,
        projAdjustRefId,
        salesInvoiceId,
        inventTransId,
        inventTransType,
        inventTransRefId,
        purchInvoiceId,

        investmentTaxAmountMST,

        elimination,
        taxUpdate,

        paymentStatus,
        paymentDate,

        projItemTransCostType,

        transactionOrigin,
        ledgerOrigin,
        fundingSourceID,
        useLedgerStatusCostOrig
    ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clone</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a deep copy of an instance of the <c>ProjLedger</c> class.
    /// </summary>
    /// <returns>
    ///    The deep copy of an instance of the <c>ProjLedger</c> class.
    /// </returns>
    public ProjLedger clone()
    {
        ProjLedger projLedger = new ProjLedger();
        projLedger.parmActivityNumber( this.parmActivityNumber() );
        projLedger.parmCostSales( this.parmCostSales() );
        projLedger.parmElimination( this.parmElimination() );
        projLedger.parmfundingSourceID( this.parmfundingSourceID() );
        projLedger.parmInventTransId( this.parmInventTransId() );
        projLedger.parmInventTransRefId( this.parmInventTransRefId() );
        projLedger.parmInventTransType( this.parmInventTransType() );
        projLedger.parmLedgerOrigin( this.parmLedgerOrigin() );
        projLedger.parmProjAdjustRefId( this.parmProjAdjustRefId() );
        projLedger.parmProjCategoryId( this.parmProjCategoryId() );
        projLedger.parmProjEmplItemId( this.parmProjEmplItemId() );
        projLedger.parmProjId( this.parmProjId() );
        projLedger.parmProjItemTransCostType( this.parmProjItemTransCostType() );
        projLedger.parmProjQty( this.parmProjQty() );
        projLedger.parmProjTransDate( this.parmProjTransDate() );
        projLedger.parmProjTransId( this.parmProjTransId() );
        projLedger.parmProjTransType( this.parmProjTransType() );
        projLedger.parmSalesInvoiceId( this.parmSalesInvoiceId() );
        projLedger.parmTaxUpdate( this.parmTaxUpdate() );
        projLedger.parmTransactionOrigin( this.parmTransactionOrigin() );
        projLedger.parmTransEqualLedgerDate( this.parmTransEqualLedgerDate() );
        projLedger.parmResource( this.parmResource() );
        projLedger.parmResourceCategory( this.parmResourceCategory() );
        projLedger.parmTempRecId(tempRecId);
        projLedger.parmLedgerStatusCostOrig(useLedgerStatusCostOrig);

        return projLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectPostingTransaction</Name>
				<Source><![CDATA[
    public LedgerPostingTransactionProjectTmp getProjectPostingTransaction()
    {
        LedgerPostingTransactionProjectTmp projectTransaction;

        projectTransaction.CostSales = costSales;
        projectTransaction.TransId = projTransId;
        projectTransaction.Id = projId;

        projectTransaction.CategoryId = projCategoryId;
        projectTransaction.ActivityNumber = activityNumber;
        projectTransaction.EmplItemId = projEmplItemId;
        projectTransaction.Quantity = projQty;

        projectTransaction.TransType = projTransType;

        projectTransaction.TransDate = projTransDate;
        projectTransaction.IsTransDateEqualLedgerDate = transEqualLedgerDate;

        projectTransaction.PackingSlipId = packingSlipId;
        projectTransaction.AdjustRefId = projAdjustRefId;
        projectTransaction.SalesInvoiceId = salesInvoiceId;
        projectTransaction.InventTransId = inventTransId;
        projectTransaction.InventTransType = inventTransType;
        projectTransaction.InventTransRefId = inventTransRefId;
        projectTransaction.PurchInvoiceId = purchInvoiceId;

        projectTransaction.InvestmentTaxAmountMst = investmentTaxAmountMST;

        projectTransaction.IsElimination = elimination;
        projectTransaction.IsTaxUpdate = taxUpdate;

        projectTransaction.PaymentStatus = paymentStatus;
        projectTransaction.PaymentDate = paymentDate;

        projectTransaction.ItemTransCostType = projItemTransCostType;

        projectTransaction.TransactionOrigin = transactionOrigin;
        projectTransaction.LedgerOrigin = ledgerOrigin;
        projectTransaction.FundingSourceId = fundingSourceID;
        projectTransaction.Resource = resource;
        projectTransaction.ResourceCategory = resourceCategory;

        projectTransaction.RecId = tempRecId;
        projectTransaction.useLedgerStatusCostOrig = useLedgerStatusCostOrig;

        return projectTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjectPostingTransaction</Name>
				<Source><![CDATA[
    protected void initFromProjectPostingTransaction(LedgerPostingTransactionProjectTmp _projectPostingTransaction)
    {
        costSales = _projectPostingTransaction.CostSales;
        projTransId = _projectPostingTransaction.TransId;
        projId = _projectPostingTransaction.Id;

        projCategoryId = _projectPostingTransaction.CategoryId;
        activityNumber = _projectPostingTransaction.ActivityNumber;
        projEmplItemId = _projectPostingTransaction.EmplItemId;
        projQty = _projectPostingTransaction.Quantity;

        projTransType = _projectPostingTransaction.TransType;

        projTransDate = _projectPostingTransaction.TransDate;
        transEqualLedgerDate = _projectPostingTransaction.IsTransDateEqualLedgerDate;

        packingSlipId = _projectPostingTransaction.PackingSlipId;
        projAdjustRefId = _projectPostingTransaction.AdjustRefId;
        salesInvoiceId = _projectPostingTransaction.SalesInvoiceId;
        inventTransId = _projectPostingTransaction.InventTransId;
        inventTransType = _projectPostingTransaction.InventTransType;
        inventTransRefId = _projectPostingTransaction.InventTransRefId;
        purchInvoiceId = _projectPostingTransaction.PurchInvoiceId;

        investmentTaxAmountMST = _projectPostingTransaction.InvestmentTaxAmountMst;

        elimination = _projectPostingTransaction.IsElimination;
        taxUpdate = _projectPostingTransaction.IsTaxUpdate;

        paymentStatus = _projectPostingTransaction.PaymentStatus;
        paymentDate = _projectPostingTransaction.PaymentDate;

        projItemTransCostType = _projectPostingTransaction.ItemTransCostType;

        transactionOrigin = _projectPostingTransaction.TransactionOrigin;
        ledgerOrigin = _projectPostingTransaction.LedgerOrigin;
        fundingSourceID = _projectPostingTransaction.FundingSourceId;
        resource = _projectPostingTransaction.Resource;
        resourceCategory = _projectPostingTransaction.ResourceCategory;

        tempRecId = _projectPostingTransaction.RecId;
        useLedgerStatusCostOrig = _projectPostingTransaction.useLedgerStatusCostOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerStatusCostOrig</Name>
				<Source><![CDATA[
    public boolean parmLedgerStatusCostOrig(boolean _useLedgerStatusCostOrig = useLedgerStatusCostOrig)
    {
        useLedgerStatusCostOrig = _useLedgerStatusCostOrig;
        return useLedgerStatusCostOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActivityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber parmActivityNumber(ProjActivityNumber _activityNumber = activityNumber)
    {
        activityNumber = _activityNumber;

        return activityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostSales</Name>
				<Source><![CDATA[
    public ProjCostSales parmCostSales(ProjCostSales _costSales = costSales)
    {
        costSales    = _costSales;

        return costSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmElimination</Name>
				<Source><![CDATA[
    public boolean parmElimination(boolean _elimination = elimination)
    {
        elimination  = _elimination;

        return elimination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmfundingSourceID</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId parmfundingSourceID(ProjFundingSourceRefId _fundingSourceID = fundingSourceID)
    {
        fundingSourceID = _fundingSourceID;
        return fundingSourceID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    public InventTransId parmInventTransId(InventTransId _inventTransId = inventTransId)
    {
        inventTransId  = _inventTransId;

        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransRefId</Name>
				<Source><![CDATA[
    public InventTransRefId parmInventTransRefId(InventTransRefId _inventTransRefId = inventTransRefId)
    {
        inventTransRefId = _inventTransRefId;

        return inventTransRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransType</Name>
				<Source><![CDATA[
    public InventTransType parmInventTransType(InventTransType _inventTransType = inventTransType)
    {
        inventTransType = _inventTransType;

        return inventTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerOrigin</Name>
				<Source><![CDATA[
    public ProjLedgerOrigin parmLedgerOrigin(ProjLedgerOrigin _ledgerOrigin = ledgerOrigin)
    {
        ledgerOrigin  = _ledgerOrigin;
        return ledgerOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjAdjustRefId</Name>
				<Source><![CDATA[
    ProjAdjustRefId parmProjAdjustRefId(ProjAdjustRefId _projAdjustRefId  = projAdjustRefId)
    {
        projAdjustRefId   = _projAdjustRefId;
        return projAdjustRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjCategoryId(ProjCategoryId _projCategoryId = projCategoryId)
    {
        projCategoryId  = _projCategoryId;

        return projCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjEmplItemId</Name>
				<Source><![CDATA[
    public ProjEmplItemId parmProjEmplItemId(ProjEmplItemId _projEmplItemId = projEmplItemId)
    {
        projEmplItemId  = _projEmplItemId;

        return projEmplItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = projId)
    {
        projId  = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjItemTransCostType</Name>
				<Source><![CDATA[
    public ProjItemTransCostType parmProjItemTransCostType(ProjItemTransCostType _projItemTransCostType = projItemTransCostType)
    {
        projItemTransCostType = _projItemTransCostType;

        return projItemTransCostType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjQty</Name>
				<Source><![CDATA[
    public Qty parmProjQty(Qty _projQty = projQty)
    {
        projQty  = _projQty;

        return projQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTransDate</Name>
				<Source><![CDATA[
    public ProjTransDate parmProjTransDate(ProjTransDate _projTransDate = projTransDate)
    {
        projTransDate  = _projTransDate;

        return projTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTransId</Name>
				<Source><![CDATA[
    public ProjTransIdBase parmProjTransId(ProjTransIdBase _projTransId = projTransId)
    {
        projTransId  = _projTransId;

        return projTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTransType</Name>
				<Source><![CDATA[
    public ProjTransType parmProjTransType(ProjTransType _projTransType = projTransType)
    {
        projTransType  = _projTransType;

        return projTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>resource</c> variable.
    /// </summary>
    /// <param name="_resourceRecId">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>resource</c> variable.
    /// </returns>
    public ResourceRecId parmResource(ResourceRecId _resourceRecId = resource)
    {
        resource  = _resourceRecId;

        return resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>resourceCategory</c> variable.
    /// </summary>
    /// <param name="_resourceCategoryRecId">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>resourceCategory</c> variable.
    /// </returns>
    public ResourceCategoryRecId parmResourceCategory(ResourceCategoryRecId _resourceCategoryRecId = resourceCategory)
    {
        resourceCategory  = _resourceCategoryRecId;

        return resourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesInvoiceId</Name>
				<Source><![CDATA[
    PackingSlipId parmSalesInvoiceId(SalesInvoiceId _salesInvoiceId  = salesInvoiceId)
    {
        salesInvoiceId   = _salesInvoiceId;
        return salesInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxUpdate</Name>
				<Source><![CDATA[
    public boolean parmTaxUpdate(boolean _taxUpdate = taxUpdate)
    {
        taxUpdate  = _taxUpdate;

        return taxUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTempRecId</Name>
				<Source><![CDATA[
    public RecId parmTempRecId(RecId _tempRecId = tempRecId)
    {
        tempRecId = _tempRecId;

        return tempRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionOrigin</Name>
				<Source><![CDATA[
    public ProjTransactionOrigin parmTransactionOrigin(ProjTransactionOrigin _transactionOrigin = transactionOrigin)
    {
        transactionOrigin  = _transactionOrigin;
        return transactionOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransEqualLedgerDate</Name>
				<Source><![CDATA[
    boolean parmTransEqualLedgerDate(boolean _transEqualLedgerDate = transEqualLedgerDate)
    {
        transEqualLedgerDate    = _transEqualLedgerDate;
        return transEqualLedgerDate;

    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean success = false;
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                success = true;
                break;
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ProjLedger</c> class from a packed class.
    /// </summary>
    /// <param name="_packedClass">
    /// The <c>ProjLedger</c> class packed in a container.
    /// </param>
    /// <returns>
    /// A new instance of the <c>ProjLedger</c> class.
    /// </returns>
    /// <remarks>
    /// This method is for internal use only.
    /// </remarks>
    public static ProjLedger create(container _packedClass)
    {
        ProjLedger projLedger;

        projLedger = new ProjLedger();
        projLedger.unpack(_packedClass);

        return projLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventCost</Name>
				<Source><![CDATA[
    public static ProjLedger newInventCost(ProjId                _projId,
                                       ProjActivityNumber    _activityNumber,
                                       ProjCategoryId        _categoryId,
                                       InventTransId         _inventTransId,
                                       ProjAdjustRefId       _projAdjustRefId,
                                       ProjTransactionOrigin _transactionOrigin,
                                       ProjLedgerOrigin      _ledgerOrigin,
                                       ProjEmplItemId        _projEmplItemId           = '',
                                       boolean               _transDateEqualLedgerDate = true,
                                       ProjTransDate         _projTransDate            = dateNull(),
                                       ProjItemTransCostType _projItemTransCostType = ProjItemTransCostType::Cost,
                                       InventTransType       _transType = InventTransType::Project,
                                       InventTransRefId      _transRefId = '',
                                       ResourceRecId         _resourceRecId = 0,
                                       ResourceCategoryRecId _resourceCategoryRecId = 0)
    {
        if (!_projId)
        {
            return null;
        }

        ProjLedger projLedger = new ProjLedger();
        projLedger.parmProjId(_projId);
        projLedger.parmActivityNumber(_activityNumber);
        projLedger.parmProjCategoryId(_categoryId);
        projLedger.parmProjEmplItemId(_projEmplItemId);
        projLedger.parmInventTransId(_inventTransId);
        projLedger.parmInventTransType(_transType);
        projLedger.parmInventTransRefId(_transRefId);
        projLedger.parmProjAdjustRefId(_projAdjustRefId);
        projLedger.parmCostSales(ProjCostSales::Cost);
        projLedger.parmTransEqualLedgerDate(_transDateEqualLedgerDate);
        if (! _transDateEqualLedgerDate)
        {
            projLedger.parmProjTransDate(_projTransDate);
        }
        projLedger.parmProjTransType(ProjTransType::Item);
        projLedger.parmProjTransId('');
        projLedger.parmTransactionOrigin(_transactionOrigin);
        projLedger.parmLedgerOrigin(_ledgerOrigin);
        projLedger.parmProjItemTransCostType(_projItemTransCostType);
        projLedger.parmResource(_resourceRecId);
        projLedger.parmResourceCategory(_resourceCategoryRecId);

        // set Qtye when post item transaction
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && _inventTransId)
        {
            projLedger.parmProjQty(InventTrans::findTransId(_inventTransId).Qty);
        }

        ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(ProjTable::find(_projId).ProjInvoiceProjId);
        if (projInvoiceTable)
        {
            // Set project funding source if the project associated contract has only one funding source.
            if (ProjFundingSource::numberOfFundingSources(projInvoiceTable.ProjInvoiceProjId) == 1)
            {
                ProjFundingSource projFundingSource;
                select firstonly RecId from projFundingSource
                    where projFundingSource.ContractId == projInvoiceTable.ProjInvoiceProjId;
                projLedger.parmfundingSourceID(projFundingSource.RecId);
            }
        }

        return projLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventCostAdjust</Name>
				<Source><![CDATA[
    public static ProjLedger newInventCostAdjust(
        ProjId                  _projId,
        InventTransId           _inventTransId,
        ProjAdjustRefId         _projAdjustRefId,
        ProjLedgerOrigin        _ledgerOrigin,
        boolean                 _useTransid    = false)
    {
        if (!_projId)
        {
            return null;
        }

        ProjLedger projLedger = new ProjLedger();
        projLedger.parmProjId(_projId);
        projLedger.parmInventTransId(_inventTransId);
        projLedger.parmProjAdjustRefId(_projAdjustRefId);
        projLedger.parmCostSales(ProjCostSales::Cost);
        projLedger.parmTransEqualLedgerDate(false);
        projLedger.parmProjTransType(ProjTransType::Item);

        ProjItemTrans projItemTrans = ProjItemTrans::findInvent(_inventTransId, _projAdjustRefId);

        if (projItemTrans)
        {
            projLedger.parmProjTransDate(projItemTrans.TransDate);
            if (_useTransid)
            {
                projLedger.parmProjTransId(projItemTrans.ProjTransId);
            }
            else
            {
                projLedger.parmProjTransId('');
            }
            projLedger.parmProjCategoryId(projItemTrans.CategoryId);
            projLedger.parmProjEmplItemId(projItemTrans.ItemId);
            projLedger.parmActivityNumber(projItemTrans.ActivityNumber);
        }

        projLedger.parmTransactionOrigin(projItemTrans.TransactionOrigin);
        projLedger.parmLedgerOrigin(_ledgerOrigin);

        // set Qtye when post item transaction
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && _inventTransId)
        {
            projLedger.parmProjQty(InventTrans::findTransId(_inventTransId).Qty);
        }

        return projLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventSales</Name>
				<Source><![CDATA[
    public static ProjLedger newInventSales(ProjId                  _projId,
                                        ProjCategoryId          _categoryId,
                                        ProjActivityNumber      _activityNumber,
                                        InventTransId           _inventTransId,
                                        SalesInvoiceId          _salesInvoiceId,
                                        ProjAdjustRefId         _projAdjustRefId,
                                        ProjTransactionOrigin   _transactionOrigin,
                                        ProjLedgerOrigin        _ledgerOrigin,
                                        ProjEmplItemId          _projEmplItemId    = '',
                                        ProjFundingSourceRefId  _projFundingSourceId = 0,
                                        ResourceRecId           _resourceRecId = 0,
                                        ResourceCategoryRecId   _resourceCategoryRecId = 0
                                        )
    {
        if (!_projId)
        {
            return null;
        }
    
        ProjLedger projLedger = new ProjLedger();
        projLedger.parmProjId(_projId);
        projLedger.parmProjCategoryId(_categoryId);
        projLedger.parmActivityNumber(_activityNumber);
        projLedger.parmProjEmplItemId(_projEmplItemId);
        projLedger.parmInventTransId(_inventTransId);
        projLedger.parmSalesInvoiceId(_salesInvoiceId);
        projLedger.parmCostSales(ProjCostSales::Sales);
        projLedger.parmTransEqualLedgerDate(true);
        projLedger.parmProjTransType(ProjTransType::Item);
        projLedger.parmProjTransId('');
        projLedger.parmProjAdjustRefId(_projAdjustRefId);
        projLedger.parmTransactionOrigin(_transactionOrigin);
        projLedger.parmfundingSourceID(_projFundingSourceId);
        projLedger.parmResource(_resourceRecId);
        projLedger.parmResourceCategory(_resourceCategoryRecId);

        if (_transactionOrigin == ProjOrigin::SalesOrder)
            {
                projLedger.parmLedgerOrigin(ProjOrigin::Invoice);
            }
        else
            {
                projLedger.parmLedgerOrigin(_ledgerOrigin);
            }

        // set Qtye when post item transaction
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && _inventTransId)
        {
            projLedger.parmProjQty(InventTrans::findTransId(_inventTransId).Qty);
        }

        return projLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerJournalTax</Name>
				<Source><![CDATA[
    public static ProjLedger newLedgerJournalTax(
    LedgerJournalTrans  ledgerJournalTrans)
    {
        ProjLedger                  projLedger;
        LedgerJournalTrans_Project  ledgerJournalTrans_Project;
        ProjInvoiceTable            projInvoiceTable;
        ProjFundingSource           projFundingSource;

        if (!ledgerJournalTrans)
        {
            return null;
        }
    
        ledgerJournalTrans_Project = LedgerJournalTrans_Project::find(ledgerJournalTrans.RecId);

        projLedger = new ProjLedger();

        if (ledgerJournalTrans_Project)
        {
            projLedger.parmProjId(ledgerJournalTrans_Project.ProjId);
        }
        projLedger.parmProjCategoryId(ledgerJournalTrans_Project.CategoryId);
        projLedger.parmActivityNumber(ledgerJournalTrans_Project.ActivityNumber);
        projLedger.parmResource(ledgerJournalTrans_Project.Resource);
        projLedger.parmResourceCategory(ledgerJournalTrans_Project.resourceCategory());
        projLedger.parmProjQty(ledgerJournalTrans_Project.Qty);
        projLedger.parmTransEqualLedgerDate(false);
        projLedger.parmProjTransDate(ledgerJournalTrans.TransDate);
        projLedger.parmProjTransType(ProjTransType::Cost);
        projLedger.parmProjTransId(ledgerJournalTrans_Project.TransId);
        projLedger.parmCostSales(ProjCostSales::Cost);
        projLedger.parmTaxUpdate(true);

        projInvoiceTable = ProjInvoiceTable::find(ProjTable::find(projLedger.parmProjId()).ProjInvoiceProjId);
        if (projInvoiceTable)
        {
            if (ProjFundingSource::numberOfFundingSources(projInvoiceTable.ProjInvoiceProjId) == 1)
            {
                select firstonly RecId from projFundingSource where projFundingSource.ContractId == projInvoiceTable.ProjInvoiceProjId;
                projLedger.parmfundingSourceID(projFundingSource.RecId);
            }
        }

        return projLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjectCost</Name>
				<Source><![CDATA[
    public static ProjLedger newProjectCost(ProjTrans               _projTrans,
                                        ProjTransIdBase         _transId,
                                        ProjTransactionOrigin   _transactionOrigin,
                                        ProjLedgerOrigin        _ledgerOrigin,
                                        boolean                 _elimination      = NoYes::No,
                                        ProjFundingSourceRefId  _fundingSourceId  = 0,
                                        Qty                     _projQty          = 0)
    {
        if (!_projTrans)
        {
            return null;
        }

        ProjLedger projLedger = new ProjLedger();
        projLedger.parmProjId(_projTrans.projId());
        projLedger.parmProjCategoryId(_projTrans.categoryId());
        projLedger.parmActivityNumber(_projTrans.activityNumber());
        projLedger.parmProjEmplItemId(_projTrans.projEmplItemId());
        projLedger.parmResource(_projTrans.resource());
        projLedger.parmResourceCategory(_projTrans.resourceCategory());
        projLedger.parmLedgerStatusCostOrig(_projTrans.parmLedgerStatusCostOrig());
        if (!prmisDefault(_projQty))
        {
            projLedger.parmProjQty(_projQty);
        }
        else
        {
            projLedger.parmProjQty(_projTrans.qty());
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            // DOCUMENTDATE
            if (_projTrans.documentDate())
            {
                projLedger.parmProjTransDate(_projTrans.documentDate());
            }
            else
            {
                projLedger.parmProjTransDate(_projTrans.transDate());
            }
        }
        else
        {
            projLedger.parmTransEqualLedgerDate(false);
            projLedger.parmProjTransDate(_projTrans.transDate());
        }
        projLedger.parmProjTransType(_projTrans.transType());
        projLedger.parmProjTransId(_transId);

        if (_ledgerOrigin == ProjOrigin::PurchaseOrder && ProjSetFundingSourceForPOWithMFSFlightVendInvoice::instance().isEnabled())
        {
            projLedger.parmInventTransId(_projTrans.markedInventTransId());
        }
        else
        {
            projLedger.parmInventTransId(_projTrans.inventTransId());
        }

        projLedger.parmProjAdjustRefId(_projTrans.projAdjustRefId());
        projLedger.parmCostSales(ProjCostSales::Cost);

        projLedger.parmElimination(_elimination);

        projLedger.parmTransactionOrigin(_transactionOrigin);
        projLedger.parmLedgerOrigin(_ledgerOrigin);
        projLedger.parmfundingSourceID( _fundingSourceId );

        return projLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjectPostingTransaction</Name>
				<Source><![CDATA[
    public static ProjLedger newProjectPostingTransaction(LedgerPostingTransactionProjectTmp _projectPostingTransaction)
    {
        ProjLedger project;

        if (_projectPostingTransaction != null)
        {
            project = new ProjLedger();
            project.initFromProjectPostingTransaction(_projectPostingTransaction);
        }

        return project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjectPurch</Name>
				<Source><![CDATA[
    public static ProjLedger newProjectPurch(ProjId             _projId,
                                         ProjCategoryId     _categoryId,
                                         InventTransId      _inventTransId,
                                         LastInvoiceId      _purchLastInvoiceId,
                                         ProjAdjustRefId    _projAdjustRefId,
                                         ProjEmplItemId     _projEmplItemId    = '',
                                         ResourceRecId      _resourceRecId = 0,
                                         ResourceCategoryRecId _resourceCategoryRecId = 0,
                                         DocumentDate       _documentDate = dateNull()
                                         )

    {
        if (!_projId)
        {
            return null;
        }

        ProjLedger projLedger = new ProjLedger();
        projLedger.parmProjId(_projId);
        projLedger.parmProjCategoryId(_categoryId);
        projLedger.parmProjEmplItemId(_projEmplItemId);
        projLedger.parmInventTransId(_inventTransId);
        projLedger.parmCostSales(ProjCostSales::Sales);
        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            projLedger.parmTransEqualLedgerDate(true);
        }
        projLedger.parmProjTransType(ProjTransType::Item);
        projLedger.parmProjTransId('');
        projLedger.parmProjAdjustRefId(_projAdjustRefId);
        projLedger.parmProjId(_projId);
        // DOCUMENTDATE
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            projLedger.parmProjTransDate(_documentDate);
        }
        projLedger.parmTransEqualLedgerDate(false);
        projLedger.parmProjTransType(ProjTransType::Item);
        projLedger.parmCostSales(ProjCostSales::Sales);
        projLedger.parmResource(_resourceRecId);
        projLedger.parmResourceCategory(_resourceCategoryRecId);

        // set Qtye when post item transaction
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && _inventTransId)
        {
            projLedger.parmProjQty(InventTrans::findTransId(_inventTransId).Qty);
        }
        return projLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjectSales</Name>
				<Source><![CDATA[
    public static ProjLedger newProjectSales(ProjTrans              _projTrans,
                                         ProjTransIdBase        _transId,
                                         ProjTransactionOrigin  _transactionOrigin,
                                         ProjLedgerOrigin       _ledgerOrigin,
                                         boolean                _elimination        = NoYes::No,
                                         ProjFundingSourceRefId _fundingSourceRefID = 0,
                                         Qty                    _projQty            = 0)
    {
        if (!_projTrans)
        {
            return null;
        }

        ProjLedger projLedger = new ProjLedger();
        projLedger.parmProjId(_projTrans.projId());
        projLedger.parmProjCategoryId(_projTrans.categoryId());
        projLedger.parmProjEmplItemId(_projTrans.projEmplItemId());
        projLedger.parmResource(_projTrans.resource());
        projLedger.parmResourceCategory(_projTrans.resourceCategory());
        projLedger.parmActivityNumber(_projTrans.activityNumber());
        if (!prmisDefault(_projQty))
        {
            projLedger.parmProjQty(_projQty);
        }
        else
        {
            projLedger.parmProjQty(_projTrans.qty());
        }
        projLedger.parmTransEqualLedgerDate(false);
        projLedger.parmProjTransDate(_projTrans.transDate());
        projLedger.parmProjTransType(_projTrans.transType());
        projLedger.parmProjTransId(_transId);
        projLedger.parmInventTransId(_projTrans.inventTransId());
        projLedger.parmProjAdjustRefId(_projTrans.projAdjustRefId());
        projLedger.parmCostSales(ProjCostSales::Sales);
        projLedger.parmElimination(_elimination);

        projLedger.parmTransactionOrigin(_transactionOrigin);
        projLedger.parmLedgerOrigin(_ledgerOrigin);
        projLedger.parmfundingSourceID( _fundingSourceRefID );

        return projLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjLedgerFromProjTransPosting</Name>
				<Source><![CDATA[
	/// <summary>
    /// Creates a new <c>Projledger</c> instance using <c>ProjTransPosting</c> record.
    /// </summary>
    /// <param name = "_projTransPosting">
    /// <c>ProjTransPosting</c> record.
	/// </param>
    /// <param name = "_transID">
    /// New transaction ID which will be used to create new <c>ProjTransPosting</c> records.
	/// </param>
    /// <returns>
    /// Initialized <c>ProjLedger</c> instance.
	/// </returns>
	public static ProjLedger newProjLedgerFromProjTransPosting(ProjTransPosting _projTransPosting, ProjTransIdBase _transID)
    {
		if (!_projTransPosting)
        {
            return null;
        }
        
		ProjLedger projLedger = new ProjLedger();
        projLedger.parmProjId(_projTransPosting.ProjId);
        projLedger.parmProjCategoryId(_projTransPosting.CategoryId);
        projLedger.parmProjEmplItemId(_projTransPosting.EmplItemId);
        projLedger.parmResource(_projTransPosting.Resource);
        projLedger.parmResourceCategory(_projTransPosting.ResourceCategory);
        projLedger.parmActivityNumber(_projTransPosting.ActivityNumber);
        projLedger.parmProjQty(_projTransPosting.Qty);
        projLedger.parmProjTransDate(_projTransPosting.ProjTransDate);
        projLedger.parmProjTransType(_projTransPosting.ProjTransType);
        projLedger.parmProjTransId(_transId);
        projLedger.parmInventTransId(_projTransPosting.InventTransId);
        projLedger.parmProjAdjustRefId(_projTransPosting.ProjAdjustRefId);
        projLedger.parmCostSales(_projTransPosting.costSales);
        projLedger.parmTransactionOrigin(_projTransPosting.TransactionOrigin);
        projLedger.parmLedgerOrigin(_projTransPosting.LedgerOrigin);
        projLedger.parmfundingSourceID(_projTransPosting.ProjFundingSource);
        return projLedger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>