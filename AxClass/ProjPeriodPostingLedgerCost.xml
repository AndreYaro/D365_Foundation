<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPeriodPostingLedgerCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjPeriodPostingLedgerCost extends ProjPeriodPostingLedger
{
    #Define.CurrentVersion(16)

    #LOCALMACRO.CurrentList
        transActionDate,
        ProjLedgerStatus,
        acknowledgementDate
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase       dialogRunbase;

        dialogRunbase = new DialogRunbase(ProjPeriodPostingLedgerCost::description(),this);
        dialogTransDate = dialogRunbase.addFieldValue(extendedTypeStr(TransDate), transactionDate, "@SYS14475", "@SYS53214");
        if (LedgerParameters::find().AcknowledgementDate_IT)
        {
            dialogAcknowledgementDate = dialogRunbase.addFieldValue(extendedTypeStr(AcknowledgementDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS67", "@SYS99220");
        }

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enterCost</Name>
				<Source><![CDATA[
    private void enterCost(LedgerVoucher _ledgerVoucher)
    //private void enterCost(LedgerVoucherTrans _ledgerVoucherTrans)
    {
        ProjCostTrans       projCostTrans;
        ProjCostTransCost   projCostTransCost;

        projCostTransCost = ProjCostTransCost::find(tmpProjPeriodicCost.CostRefRecId, true);
        projCostTrans = ProjCostTrans::find(projCostTransCost.TransId, true);

        if (this.parmProjLedgerStatus()    != projCostTransCost.LedgerStatusCost   &&
            this.parmProjLedgerStatus()    != ProjLedgerStatus::None)
        {
            ProjPost::newEnterCost_TrxDetail(projCostTrans, projCostTransCost, _ledgerVoucher, this.parmProjLedgerStatus(),ProjOrigin::PostCost).postTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enterEmpl</Name>
				<Source><![CDATA[
    private void enterEmpl(LedgerVoucher _ledgerVoucher)
    {
        ProjEmplTrans               projEmplTrans;
        ProjEmplTransCost           projEmplTransCost;
        PSAIndirectComponentTrans   psaIndirectComponentTrans;

        projEmplTransCost = ProjEmplTransCost::find(tmpProjPeriodicCost.CostRefRecId, true);
        projEmplTrans = ProjEmplTrans::find(projEmplTransCost.TransId, true);

        if (this.parmProjLedgerStatus() != projEmplTransCost.LedgerStatusCost)
        {
            while select psaIndirectComponentTrans
                where psaIndirectComponentTrans.TransId == projEmplTransCost.TransId &&
                    psaIndirectComponentTrans.ProjFundingSource == projEmplTransCost.FundingSource &&
                    psaIndirectComponentTrans.IndirectComponentType == PSAIndirectComponentType::Cost
            {
                ProjPost::newEnterCost_TrxDetail(projEmplTrans, projEmplTransCost, _ledgerVoucher, projLedgerStatus, ProjOrigin::PostCost, false, false, psaIndirectComponentTrans).postTrans();
            }

            ProjPost::newEnterCost_TrxDetail(projEmplTrans, projEmplTransCost, _ledgerVoucher, projLedgerStatus, ProjOrigin::PostCost).postTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enterItem</Name>
				<Source><![CDATA[
    private void enterItem(LedgerVoucher _ledgerVoucher)
    {
        ProjItemTrans       projItemTrans;
        ProjItemTransCost   projItemTransCost;

        projItemTransCost = ProjItemTransCost::find(tmpProjPeriodic.InventTransId,
            tmpProjPeriodicCost.ProjAdjustRefId,
            tmpProjPeriodicCost.ItemlineNum,
            true);
        projItemTrans = ProjItemTrans::findInvent(projItemTransCost.InventTransId, projItemTransCost.ProjAdjustRefId, true);

        if (this.parmProjLedgerStatus() != projItemTransCost.LedgerStatusCost)
        {
            ProjPost::newEnterCost_TrxDetail(projItemTrans, projItemTransCost, _ledgerVoucher, projLedgerStatus, ProjOrigin::PostCost).postTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        tmpSortedList      = new SysRecordSortedList(tableNum(TmpProjPeriodic));
        tmpSortedCostList  = new SysRecordSortedList(tableNum(TmpProjPeriodicCost));
        tmpSortedSaleList  = new SysRecordSortedList(tableNum(TmpProjPeriodicSale));

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        while select tmpProjPeriodic
        {
            tmpSortedList.ins(tmpProjPeriodic);
        }

        while select tmpProjPeriodicCost
        {
            tmpSortedCostList.ins(tmpProjPeriodicCost);
        }

        while select tmpProjPeriodicSale
        {
            tmpSortedSaleList.ins(tmpProjPeriodicSale);
        }

        return [#CurrentVersion, #CurrentList, tmpSortedList.pack(), tmpSortedCostList.pack(), tmpSortedSaleList.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        NumberSeq               numberSeq =  NumberSeq::newGetVoucher(ProjParameters::numRefProjPeriodVoucher());

        LedgerVoucher           ledgerVoucher;
        LedgerVoucherObject     ledgerVoucherObject;
        DetailSummary           detailSummary = ProjParameters::find().LineTotalPostCost == ProjLineTotal::Line ? DetailSummary::Detail :  DetailSummary::Summary ;
        TransactionTxt          transTxt;

        Voucher                 voucher;

        transTxt  = TransactionTxt::construct(LedgerTransTxt::ProjectPostingLedger);

        try
        {
            ttsbegin;
            voucher = numberSeq.voucher();

            transTxt.setDate(transactionDate);
            transTxt.setVoucher(voucher);

            ledgerVoucher = LedgerVoucher::newLedgerPost(detailSummary,
                                                        SysModule::Project,
                                                        numberSeq.parmVoucherSequenceCode(),
                                                        this.transactionLogType(),
                                                        this.transactionLogTxt());
            ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucher,
                                                                  transactionDate,
                                                                  SysModule::Project,
                                                                  LedgerTransType::Project);

            if (!acknowledgementDate)
            {
                acknowledgementDate = transactionDate;
            }
            ledgerVoucherObject.parmAcknowledgementDate(acknowledgementDate);

            ledgerVoucherObject.lastTransTxt(transTxt.txt());
            ledgerVoucher.addVoucher(ledgerVoucherObject);
            
			ProjTable projTable;

            // Stops the processing of transactions where project stage is closed/finished.
            while select tmpProjPeriodic
                join tmpProjPeriodicCost
                    where tmpProjPeriodicCost.TransId == tmpProjPeriodic.TransId
                exists join projTable
					where projTable.ProjId == tmpProjPeriodic.ProjId
						&& projTable.Status != ProjStatus::Completed
            {
                this.updateTrans(ledgerVoucher);
            }

            if (ledgerVoucherObject.getInternalCollection().elements() != 0)
            {
                ledgerVoucher.end();

                info(strFmt("@SYS9799",voucher));
            }

            ttscommit;
        }
        catch (Exception::Error)
        {
            throw error("@SYS21628");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    TransTxt transactionLogTxt()
    {
        return "@SYS50276";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    TransactionLogType transactionLogType()
    {
        return TransactionLogType::ProjCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version        = conPeek(_packedClass,1);
        container       packedQuery, packedQuery2, packedQuery3;

        #LOCALMACRO.List14
            transActionDate,
            ProjLedgerStatus
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery,packedQuery2,packedQuery3]      = _packedClass;
                if (packedQuery)
                {
                    tmpSortedList.unpack(packedQuery);
                    tmpSortedList.first(tmpProjPeriodic);

                    while (tmpProjPeriodic)
                    {
                        tmpProjPeriodic.insert();
                        if (!tmpSortedList.next(tmpProjPeriodic))
                        {
                            break;
                        }
                    }
                }
                if (packedQuery2)
                {
                    tmpSortedCostList.unpack(packedQuery2);
                    tmpSortedCostList.first(tmpProjPeriodicCost);

                    while (tmpProjPeriodicCost)
                    {
                        tmpProjPeriodicCost.insert();
                        if (!tmpSortedCostList.next(tmpProjPeriodicCost))
                        {
                            break;
                        }
                    }
                }
                if (packedQuery3)
                {
                    tmpSortedSaleList.unpack(packedQuery3);
                    tmpSortedSaleList.first(tmpProjPeriodicSale);

                    while (tmpProjPeriodicSale)
                    {
                        tmpProjPeriodicSale.insert();
                        if (!tmpSortedSaleList.next(tmpProjPeriodicSale))
                        {
                            break;
                        }
                    }
                }
                break;

            case 15:
                [version,#CurrentList,packedQuery]      = _packedClass;
                if (packedQuery)
                {
                    tmpSortedList.unpack(packedQuery);
                    tmpSortedList.first(tmpProjPeriodic);

                    while (tmpProjPeriodic)
                    {
                        tmpProjPeriodic.insert();
                        if (!tmpSortedList.next(tmpProjPeriodic))
                        {
                            break;
                        }
                    }
                }
                break;

            case 14:
                [version, #List14, packedQuery]      = _packedClass;
                if (packedQuery)
                {
                    tmpSortedList.unpack(packedQuery);
                    tmpSortedList.first(tmpProjPeriodic);

                    while (tmpProjPeriodic)
                    {
                        tmpProjPeriodic.insert();
                        if (!tmpSortedList.next(tmpProjPeriodic))
                        {
                            break;
                        }
                    }
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the transactions.
    /// </summary>
    /// <param name = "_ledgerVoucher">The transactions to be updated.</param>
    protected void updateTrans(LedgerVoucher _ledgerVoucher)
    {
        if (tmpProjPeriodic.TransType   == ProjTransType::Hour)
        {
            this.enterEmpl(_ledgerVoucher);
        }

        if (tmpProjPeriodic.TransType   == ProjTransType::Cost)
        {
            this.enterCost(_ledgerVoucher);
        }

        if (tmpProjPeriodic.TransType   == ProjTransType::Item)
        {
            this.enterItem(_ledgerVoucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        if (!dialogTransDate.value())
        {
            return checkFailed("@SYS24455");
        }

        if (LedgerParameters::find().AcknowledgementDate_IT)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00010, funcName());
            if (dialogTransDate.value() > dialogAcknowledgementDate.value())
            {
                // Posting date may not exceed competence date.
                return checkFailed("@SYS99223");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS50276";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>