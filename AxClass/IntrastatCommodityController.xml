<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatCommodityController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controls Intrastat commodity field.
/// </summary>
public class IntrastatCommodityController
{
    ItemId itemId;
    EcoResCategoryId categoryId;
    EcoResCategoryHierarchyId commodityHierarchyId;

    int maxSearchLevels;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static IntrastatCommodityController construct()
    {
        IntrastatCommodityController controller = SysExtensionAppClassFactory::getClassFromSysAttribute(
            classStr(IntrastatCommodityController),
            new IntrastatCountryRegionAttribute(SysCountryRegionCode::countryInfo()));

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        commodityHierarchyId = IntrastatParameters::commodityHierarchyId();
        maxSearchLevels = 5;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxSearchLevels</Name>
				<Source><![CDATA[
    public int parmMaxSearchLevels(int _maxSearchLevels = maxSearchLevels)
    {
        maxSearchLevels = _maxSearchLevels;
        return maxSearchLevels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromItemAndCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class instance from item number and category id.
    /// </summary>
    /// <param name = "_itemId">
    /// Item number.
    /// </param>
    /// <param name = "_categoryId">
    /// Category id.
    /// </param>
    /// <returns>
    /// Class instance.
    /// </returns>
    public static IntrastatCommodityController newFromItemAndCategory(ItemId _itemId, EcoResCategoryId _categoryId)
    {
        IntrastatCommodityController instance = IntrastatCommodityController::construct();

        instance.itemId = _itemId;
        instance.categoryId = _categoryId;

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if source line is category-based.
    /// </summary>
    /// <returns>
    /// true if source line is category-based; false, otherwise.
    /// </returns>
    private boolean isCategoryBased()
    {
        return !itemId && categoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves a reference to a category code.
    /// </summary>
    /// <param name = "_formReferenceControl">
    /// The calling form reference control.
    /// </param>
    /// <returns>
    /// The selected record.
    /// </returns>
    public Common resolveReference(FormReferenceControl _formReferenceControl)
    {
        EcoResCategoryCommodityCode commodityCode = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(EcoResCategory, Code), tableStr(EcoResCategory))).value();
        commodityCode = strLRTrim(commodityCode);

        EcoResCategory category = EcoResCategory::findByCode(commodityCode, commodityHierarchyId);

        if (category.IsActive)
        {
            return category;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and displays a lookup from which the user can select Intrastat category commodity code.
    /// </summary>
    /// <param name = "_formReferenceControl">
    /// The calling form reference control.
    /// </param>
    /// <returns>
    /// The selected record.
    /// </returns>
    public Common lookupReference(FormReferenceControl _formReferenceControl)
    {
        IntrastatCommodityLookupParameters intrastatCommodityLookupParameters = new IntrastatCommodityLookupParameters(false, true, true, true);
        intrastatCommodityLookupParameters.parmCommodityFilter(this.createCommodityFilter());

        Args args = new Args();
        args.name(formStr(IntrastatCommodityLookup));
        args.caller(_formReferenceControl);
        args.record(EcoResCategoryHierarchy::find(commodityHierarchyId));
        args.lookupRecord(EcoResCategory::find(str2int64(_formReferenceControl.valueStr())));
        args.parmObject(intrastatCommodityLookupParameters);

        FormRun formRun = classfactory.formRunClass(args);
        formRun.init();

        _formReferenceControl.performFormLookup(formRun);

        return formRun.selectRecordModeSelectedRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefEmptyCommodityCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows product hierarchy, if it specifies in Intrastat parameters; otherwise shows list with all hierarchies.
    /// </summary>
    public static void jumpRefEmptyCommodityCode(Object _object, InventTable _inventTable)
    {
        Args                args;
        MenuFunction        menuFunction;
        IntrastatParameters intrastatParameters = IntrastatParameters::find();

        if (intrastatParameters.CommodityHierarchy)
        {
            EcoResCategoryHierarchy  ecoResCategoryHierarchy = EcoResCategoryHierarchy::find(intrastatParameters.CommodityHierarchy);

            menuFunction = new MenuFunction(menuitemDisplayStr(EcoResCategoryHierarchyDetails), MenuItemType::Display);

            args = new Args(formStr(EcoResCategory));
            args.record(ecoResCategoryHierarchy);
        }
        else
        {
            menuFunction = new MenuFunction(menuitemDisplayStr(EcoResCategoryHierarchyListPage), MenuItemType::Display);

            args = new Args(formStr(EcoResCategoryHierarchyListPage));
            args.record(_inventTable);
        }

        args.caller(_object);

        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCommodityFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates commodity codes filter.
    /// </summary>
    /// <returns>Commodity codes filter</returns>
    public TmpRecIdFilter createCommodityFilter()
    {
        TmpRecIdFilter tmpRecIdFilter;

        if (this.isCategoryBased())
        {
            tmpRecIdFilter = this.createFilterForCategoryBasedLine();
        }
        else
        if (this.itemId)
        {
            tmpRecIdFilter = this.createFilterForItemBasedLine();
        }

        return tmpRecIdFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFilterForItemBasedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates filter for item-based line.
    /// </summary>
    /// <returns>
    /// Filter for category-based lines.
    /// </returns>
    private TmpRecIdFilter createFilterForItemBasedLine()
    {
        EcoResCategory ecoResCategory;
        EcoResProductCategory ecoResProductCategory;
        InventTable inventTable;
        Set codesSet = new Set(Types::Int64);

        while select Category, CategoryHierarchy from ecoResProductCategory
            exists join inventTable
                where inventTable.Product == ecoResProductCategory.Product
                    && inventTable.ItemId == itemId
            exists join ecoResCategory
                where ecoResCategory.RecId == ecoResProductCategory.Category
                    && ecoResCategory.IsActive
        {
            // Commodity directly added to the product
            if (ecoResProductCategory.CategoryHierarchy == commodityHierarchyId)
            {
                codesSet.add(ecoResProductCategory.Category);
            }
            // Commodity linked to the category
            else
            {
                codesSet = Set::union(codesSet, this.getCommodityCodesByCategory(ecoResProductCategory.Category));
            }
        }

        TmpRecIdFilter tmpRecIdFilter;
        SetEnumerator se = codesSet.getEnumerator();
        while (se.moveNext())
        {
            tmpRecIdFilter.RefRecId = se.current();
            tmpRecIdFilter.doInsert();
        }

        return tmpRecIdFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFilterForCategoryBasedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates filter for category-based line.
    /// </summary>
    /// <returns>
    /// Filter for category-based lines.
    /// </returns>
    private TmpRecIdFilter createFilterForCategoryBasedLine()
    {
        TmpRecIdFilter tmpRecIdFilter;
        SetEnumerator se = this.getCommodityCodesByCategory(categoryId).getEnumerator();
        while (se.moveNext())
        {
            tmpRecIdFilter.RefRecId = se.current();
            tmpRecIdFilter.doInsert();
        }

        return tmpRecIdFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCommodityCodesByCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets commodity codes for category.
    /// </summary>
    /// <returns>Set with commodity codes.</returns>
    private Set getCommodityCodesByCategory(EcoResCategoryId _categoryId)
    {
        ProcCategoryCommodityCode procCategoryCommodityCode;
        EcoResCategory ecoResCategory;
        EcoResCategoryId curCategoryId = _categoryId;
        Set codesSet = new Set(Types::Int64);
        int curLevel;

        while (curCategoryId && (maxSearchLevels && curLevel < maxSearchLevels))
        {
            curLevel++;

            while select RecId from ecoResCategory
                where ecoResCategory.CategoryHierarchy == commodityHierarchyId
                    && ecoResCategory.IsActive
            exists join procCategoryCommodityCode
                where procCategoryCommodityCode.ProcurementCategory == curCategoryId
                    && procCategoryCommodityCode.Commodity == ecoResCategory.RecId
            {
                codesSet.add(ecoResCategory.RecId);
            }

            if (codesSet.elements())
            {
                break;
            }

            curCategoryId = EcoResCategory::find(curCategoryId).ParentCategory;
        }

        return codesSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>