<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscAdmAdjustment</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class    PriceDiscAdmAdjustment
extends         RunBase
{
    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        priceBase,
        priceChg,
        priceAmount,
        discBase,
        discChg,
        discAmount,
        pct1Base,
        pct1Chg,
        pct1Pct,
        pct2Base,
        pct2Chg,
        pct2Pct
    #ENDMACRO

    QueryRun                queryRun;

    DialogField             fieldPriceBase;
    DialogField             fieldPriceChg;
    DialogField             fieldPriceAmount;

    DialogField             fieldDiscBase;
    DialogField             fieldDiscChg;
    DialogField             fieldDiscAmount;

    DialogField             fieldPct1Base;
    DialogField             fieldPct1Chg;
    DialogField             fieldPct1Pct;

    DialogField             fieldPct2Base;
    DialogField             fieldPct2Chg;
    DialogField             fieldPct2Pct;

    PriceBase               priceBase;
    Percent                 priceChg;
    Amount                  priceAmount;

    DiscBase                discBase;
    DiscAmount              discChg;
    Percent                 discAmount;

    DiscBase                pct1Base;
    DiscAmount              pct1Chg;
    Percent                 pct1Pct;

    DiscBase                pct2Base;
    DiscAmount              pct2Chg;
    Percent                 pct2Pct;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        DialogGroup     dialogPriceGroup;
        DialogGroup     dialogDiscGroup;
        DialogGroup     dialogDiscSubGroup;
        dialogPriceGroup    = dialog.addGroup("@SYS23842");

        dialogPriceGroup.columns(3);

        fieldPriceBase      = dialog.addField(enumstr(PriceBase), "@SYS11865", "@SYS138545");
        fieldPriceChg       = dialog.addField(extendedtypestr(Percent)  , "@SYS62861", "@SYS138545");
        fieldPriceAmount    = dialog.addField(extendedtypestr(Amount)   , "@SYS62867", "@SYS138545");

        dialogDiscGroup     = dialog.addGroup("@SYS23843");
        dialogDiscGroup.columns(1);

        dialogDiscSubGroup  = dialog.addGroup('Disc1', dialogDiscGroup);
        dialogDiscSubGroup.columns(3);
        dialogDiscSubGroup.frameType(FormFrameType::None);

        fieldDiscBase       = dialog.addField(enumstr(DiscBase)  , "@SYS10946", "@SYS138546");
        fieldDiscChg        = dialog.addField(extendedtypestr(Percent), "@SYS62861", "@SYS138546");
        fieldDiscAmount     = dialog.addField(extendedtypestr(DiscAmount), "@SYS6928", "@SYS138546");

        dialogDiscSubGroup  = dialog.addGroup('Disc2', dialogDiscGroup);
        dialogDiscSubGroup.columns(3);
        dialogDiscSubGroup.frameType(FormFrameType::None);

        fieldPct1Base       = dialog.addField(enumstr(DiscBase), "@SYS901", "@SYS138547");
        fieldPct1Chg        = dialog.addField(extendedtypestr(Percent), "@SYS62861", "@SYS138547");
        fieldPct1Pct        = dialog.addField(extendedtypestr(DiscAmount), "@SYS62864", "@SYS138547");

        dialogDiscSubGroup  = dialog.addGroup('Disc3', dialogDiscGroup);
        dialogDiscSubGroup.columns(3);
        dialogDiscSubGroup.frameType(FormFrameType::None);

        fieldPct2Base       = dialog.addField(enumstr(DiscBase), "@SYS902", "@SYS138547");
        fieldPct2Chg        = dialog.addField(extendedtypestr(Percent), "@SYS62861", "@SYS138547");
        fieldPct2Pct        = dialog.addField(extendedtypestr(DiscAmount), "@SYS62864", "@SYS138547");

        dialog.addMenuItemButton(MenuItemType::Display,menuitemdisplaystr(RunBaseQueryDialog),DialogMenuItemGroup::BottomGrp);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean  getFromDialog()
    {
        priceBase       = fieldPriceBase.value();
        priceChg        = fieldPriceChg.value();
        priceAmount     = fieldPriceAmount.value();

        discBase        = fieldDiscBase.value();
        pct1Base        = fieldPct1Base.value();
        pct2Base        = fieldPct2Base.value();

        discChg         = fieldDiscChg.value();
        pct1Chg         = fieldPct1Chg.value();
        pct2Chg         = fieldPct2Chg.value();

        discAmount      = fieldDiscAmount.value();
        pct1Pct         = fieldPct1Pct.value();
        pct2Pct         = fieldPct2Pct.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new()
    {
        super();
        queryRun = new QueryRun(querystr(PriceDiscAdmTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        PriceDiscAdmTrans  priceDiscAdmTrans;
        ttsbegin;

        while (queryRun.next())
        {
            priceDiscAdmTrans = queryRun.get(priceDiscAdmTrans.TableId);
            this.updateNow(priceDiscAdmTrans);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer     version     = RunBase::getVersion(_packedClass);
        container   packedQueryRun;
        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQueryRun] = _packedClass;

                if (SysQuery::isPackedOk(packedQueryRun))
                    queryRun   = new QueryRun(packedQueryRun);
                else
                    return false;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceBase</Name>
				<Source><![CDATA[
    public PriceBase parmPriceBase()
    {
        return priceBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceChange</Name>
				<Source><![CDATA[
    public Percent parmPriceChange()
    {
        return priceChg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceAmount</Name>
				<Source><![CDATA[
    public Amount parmPriceAmount()
    {
        return priceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscBase</Name>
				<Source><![CDATA[
    public DiscBase parmDiscBase()
    {
        return discBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscAmount</Name>
				<Source><![CDATA[
    public DiscAmount parmDiscAmount()
    {
        return discAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscChange</Name>
				<Source><![CDATA[
    public Percent parmDiscChange()
    {
        return discChg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPct1Base</Name>
				<Source><![CDATA[
    public DiscBase parmPct1Base()
    {
        return pct1Base;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPct1Chg</Name>
				<Source><![CDATA[
    public DiscAmount parmPct1Chg()
    {
        return pct1Chg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPct1Pct</Name>
				<Source><![CDATA[
    public Percent parmPct1Pct()
    {
        return pct1Pct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPct2Base</Name>
				<Source><![CDATA[
    public DiscBase parmPct2Base()
    {
        return pct2Base;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPct2Chg</Name>
				<Source><![CDATA[
    public DiscAmount parmPct2Chg()
    {
        return pct2Chg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPct2Pct</Name>
				<Source><![CDATA[
    public Percent parmPct2Pct()
    {
        return pct2Pct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates amount value in the <c>PriceDiscAdmTrans</c> record.
    /// </summary>
    /// <param name = "_priceDiscTable">The value of <c>PriceDiscAdmTrans</c>.</param>
    protected void updateDiscAmount(PriceDiscAdmTrans _priceDiscTable)
    {
        switch (discBase)
        {
            case DiscBase::Blank:
                break;

            case DiscBase::Zero:
                _priceDiscTable.Amount = discAmount;
                break;

            case DiscBase::Current:
                _priceDiscTable.Amount += _priceDiscTable.Amount * (discChg / 100) + discAmount;
                break;
        }

        switch (pct1Base)
        {
            case DiscBase::Blank:
                break;

            case DiscBase::Zero:
                _priceDiscTable.Percent1 = pct1Pct;
                break;

            case DiscBase::Current:
                _priceDiscTable.Percent1 += _priceDiscTable.Percent1 * (pct1Chg / 100) + pct1Pct;
                break;
        }

        switch (pct2Base)
        {
            case DiscBase::Blank:
                break;

            case DiscBase::Zero:
                _priceDiscTable.Percent2 = pct2Pct;
                break;

            case DiscBase::Current:
                _priceDiscTable.Percent2 += _priceDiscTable.Percent2 * (pct2Chg / 100) + pct2Pct;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    void updateNow(PriceDiscAdmTrans _priceDiscTable)
    {
        switch (_priceDiscTable.Relation)
        {
            case PriceType::PricePurch:
            case PriceType::PriceSales:
                this.updatePurchSalesPriceAmount(_priceDiscTable);
                break;
            case PriceType::EndDiscPurch:
            case PriceType::EndDiscSales:
            case PriceType::LineDiscPurch:
            case PriceType::LineDiscSales:
            case PriceType::MultiLineDiscPurch:
            case PriceType::MultiLineDiscSales:
            case PriceType::MCRPostageDisc:
                this.updateDiscAmount(_priceDiscTable);
                break;
            default:
                this.updatingPriceDiscAmount(this, _priceDiscTable);
                break;
        }

        if (_priceDiscTable.Amount != _priceDiscTable.orig().Amount
            || _priceDiscTable.Percent1 != _priceDiscTable.orig().Percent1
            || _priceDiscTable.Percent2 != _priceDiscTable.orig().Percent2)
        {
            _priceDiscTable.DifferentFromPosted = NoYes::Yes;
        }
        _priceDiscTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchSalesPriceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the amount value of table <c>PriceDiscAdmTrans</c>.
    /// </summary>
    /// <param name = "_priceDiscTable">The record of table <c>PriceDiscAdmTrans</c>.</param>
    final protected void updatePurchSalesPriceAmount(PriceDiscAdmTrans _priceDiscTable)
    {
        InventTable inventTable;

        void doUnitConversion()
        {
            UnitOfMeasureSymbol toUnitId = priceBase == priceBase::StdCost? inventTable.inventTableModuleInvent().UnitId : inventTable.inventTableModuleSales().UnitId;
            _priceDiscTable.Amount  = _priceDiscTable.Amount * EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_priceDiscTable.itemId(),
                                                                                                                                     _priceDiscTable.InventDimId,
                                                                                                                                     1,
                                                                                                                                     _priceDiscTable.UnitId,
                                                                                                                                     toUnitId,
                                                                                                                                     NoYes::Yes);
        }
       
        switch (priceBase)
        {
            case PriceBase::Blank:
                break;

            case PriceBase::Zero:
                _priceDiscTable.Amount  = priceAmount;
                break;

            case PriceBase::Current:
                _priceDiscTable.Amount += _priceDiscTable.Amount * (priceChg / 100) + priceAmount;
                break;

            case PriceBase::StdCost:
                if (_priceDiscTable.ItemCode == PriceDiscProductCodeType::Table)
                {
                    inventTable = InventTable::find(_priceDiscTable.ItemRelation);
                    _priceDiscTable.Amount = inventTable.costPcsPrice(_priceDiscTable.InventDimId) * (1 + (priceChg / 100));

                    if (_priceDiscTable.PriceUnit)
                    {                       
                        _priceDiscTable.Amount = _priceDiscTable.PriceUnit * _priceDiscTable.Amount;
                    } 
                    
                    _priceDiscTable.Amount += priceAmount;

                    if (inventTable.inventTableModuleInvent().UnitId != _priceDiscTable.UnitId)
                    {
                        doUnitConversion();
                    }
                }
                break;

            case PriceBase::StdSales:
                if (_priceDiscTable.ItemCode == PriceDiscProductCodeType::Table)
                {
                    inventTable = InventTable::find(_priceDiscTable.ItemRelation);
                    _priceDiscTable.Amount = inventTable.salesPcsPrice() * (1 + (priceChg / 100));

                    if (_priceDiscTable.PriceUnit)
                    {
                        _priceDiscTable.Amount = _priceDiscTable.PriceUnit * _priceDiscTable.Amount;
                    }                    
                    
                    _priceDiscTable.Amount += priceAmount;

                    if (inventTable.inventTableModuleSales().UnitId != _priceDiscTable.UnitId)
                    {
                        doUnitConversion();
                    }
                }
                break;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.retrievePurchSalesPriceAmountDelegate(this, _priceDiscTable, result);

                if (result.hasResult())
                {
                    _priceDiscTable.Amount = result.result();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePurchSalesPriceAmountDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for providing the amount for the <c>PriceType</c> PricePurch or PriceSales for the <c>PriceBase</c> value.
    /// </summary>
    /// <param name = "_priceDiscAdmAdjustment">The <c>PriceDiscAdmAdjustment</c> value.</param>
    /// <param name = "_priceDiscAdmTrans">The <c>PriceDiscAdmTrans</c> value.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> to provide the result.</param>
    delegate void retrievePurchSalesPriceAmountDelegate(PriceDiscAdmAdjustment _priceDiscAdmAdjustment,  
        PriceDiscAdmTrans _priceDiscAdmTrans, 
        EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatingPriceDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for updating the prices and discounts for the <c>PriceType</c> value in the <c>PriceDiscAdmTrans</c> record.
    /// </summary>
    /// <param name = "_priceDiscAdmAdjustment">The <c>PriceDiscAdmAdjustment</c> value.</param>
    /// <param name = "_priceDiscAdmTrans">The <c>PriceDiscAdmTrans</c> value.</param>
    delegate void updatingPriceDiscAmount(PriceDiscAdmAdjustment _priceDiscAdmAdjustment, PriceDiscAdmTrans _priceDiscAdmTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    void  updateQueryBuild(PriceDiscAdmTrans priceDiscAdmTrans)
    {
        QueryBuildRange queryBuildRange;
        queryBuildRange = queryRun.query().dataSourceTable(tablenum(PriceDiscAdmTrans)).findRange(fieldnum(PriceDiscAdmTrans,JournalNum));
        queryBuildRange.value(queryValue(priceDiscAdmTrans.JournalNum));
        queryBuildRange.status(RangeStatus::Hidden);
        queryRun.title(PriceDiscAdmAdjustment::description());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS23842";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void  main(Args args)
    {
        PriceDiscAdmTrans           priceDiscAdmTrans;
        PriceDiscAdmAdjustment      priceDiscAdmAdjust = new PriceDiscAdmAdjustment();

        if (!(args.dataset() == tablenum(PriceDiscAdmTrans)))
        {
            throw error("@SYS18626");
        }

        priceDiscAdmTrans = args.record();
        if (!priceDiscAdmTrans.JournalNum)
        {
            throw error("@SYS59036");
        }

        priceDiscAdmAdjust.getLast();
        priceDiscAdmAdjust.updateQueryBuild(priceDiscAdmTrans);
        if (priceDiscAdmAdjust.prompt())
        {
            priceDiscAdmAdjust.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>