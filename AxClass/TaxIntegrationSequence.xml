<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationSequence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationSequence</c> class is a sequence of activities.
/// </summary>
public final class TaxIntegrationSequence
    extends TaxIntegrationAbstractActivity
{
    private List list;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationSequence</c>.
    /// </summary>
    /// <param name = "_name">The name of the sequence.</param>
    private void new(str _name)
    {
        super(_name);
        this.list = new List(Types::AnyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationSequence</c>.
    /// </summary>
    /// <param name = "_name">The name of the sequence.</param>
    /// <returns>The new <c>TaxIntegrationSequence</c>.</returns>
    public final static TaxIntegrationSequence construct(str _name)
    {
        return new TaxIntegrationSequence(_name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendActivitySequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends an activity sequence.
    /// </summary>
    /// <param name = "_sequence">The activity sequence.</param>
    /// <returns><c>this</c>.</returns>
    public final TaxIntegrationSequence appendActivitySequence(TaxIntegrationSequence _sequence)
    {
        list.addEnd(_sequence);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendActivityOnDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends an activity on documents.
    /// </summary>
    /// <param name = "_activity">The activity on documents.</param>
    /// <returns><c>this</c>.</returns>
    public final TaxIntegrationSequence appendActivityOnDocument(TaxIntegrationAbstractActivityOnDocument _activity)
    {
        list.addEnd(_activity);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendActivityOnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends an activity on lines or charges.
    /// </summary>
    /// <param name = "_activity">The activity on lines or charges.</param>
    /// <returns><c>this</c>.</returns>
    public final TaxIntegrationSequence appendActivityOnLine(TaxIntegrationAbstractActivityOnLine _activity)
    {
        list.addEnd(_activity);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>act</Name>
				<Source><![CDATA[
    /// <summary>
    /// Conducts the activity sequence.
    /// </summary>
    /// <param name = "_document">The document.</param>
    public final void act(TaxIntegrationDocumentObject _document)
    {
        if (TaxIntegrationLogLevelUtility::checkActivitySequence())
        {
            using (var context = this.getActivityContext())
            {
                this.actInternal(_document);
            }
        }
        else
        {
            this.actInternal(_document);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>actInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Conducts the activity sequence by going through all the nested activities.
    /// </summary>
    /// <param name = "_document">The document.</param>
    private void actInternal(TaxIntegrationDocumentObject _document)
    {
        var enumerator = list.getEnumerator();
        while (enumerator.moveNext())
        {
            anytype current = enumerator.current();

            if (current is TaxIntegrationSequence)
            {
                TaxIntegrationSequence sequence = current;
                sequence.act(_document);
                continue;
            }

            if (current is TaxIntegrationAbstractActivityOnDocument)
            {
                TaxIntegrationAbstractActivityOnDocument activity = current;
                if (!activity.shouldSkip(_document))
                {
                    activity.act(_document);
                }
                continue;
            }

            if (current is TaxIntegrationAbstractActivityOnLine)
            {
                TaxIntegrationAbstractActivityOnLine activity = current;

                if (!activity.shouldSkip(_document))
                {
                    SetEnumerator chargeEnumerator = _document.getChargeSet().getEnumerator();
                    while (chargeEnumerator.moveNext())
                    {
                        TaxIntegrationLineObject charge = chargeEnumerator.current();
                        activity.act(charge);
                    }

                    SetEnumerator lineEnumerator = _document.getLineSet().getEnumerator();
                    while (lineEnumerator.moveNext())
                    {
                        TaxIntegrationLineObject line = lineEnumerator.current();
                        activity.act(line);

                        chargeEnumerator = line.getChargeSet().getEnumerator();
                        while (chargeEnumerator.moveNext())
                        {
                            TaxIntegrationLineObject charge = chargeEnumerator.current();
                            activity.act(charge);
                        }
                    }
                }
                continue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this activity should be skipped for document.
    /// Sequence should never be skipped.
    /// </summary>
    /// <param name="_document">The <c>TaxIntegrationDoccumentObject</c> to determine the applicability.</param>
    /// <returns>true, if this activity should be skipped for document; otherwise, false.</returns>
    internal boolean shouldSkip(TaxIntegrationDocumentObject _document)
    {
        // Override super(), do not skip for sequence
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>