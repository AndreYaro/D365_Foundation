<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjSEFAInquiryFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using Microsoft.Dynamics.BusinessPlatform.SharedTypes;

/// <summary>
/// The <c>ProjSEFAInquiryFeature</c> class defines the schedule of expenditures of federal awards inquiry feature globally.
/// </summary>
[Export(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
[InternalUseOnly]
[FeatureMetadataConfigurationKey(configurationKeyStr(Project))]
internal final class ProjSEFAInquiryFeature implements IFeatureMetadata
{
    private static ProjSEFAInquiryFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeNew</Name>
				<Source><![CDATA[
    private static void typeNew()
    {
        instance = new ProjSEFAInquiryFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the singleton object instance.
    /// </summary>
    /// <returns>
    /// The <c>ProjSEFAInquiryFeature</c> instance.
    /// </returns>
    [Hookable(false)]
    public static ProjSEFAInquiryFeature instance()
    {
        return ProjSEFAInquiryFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the label for the feature.
    /// </summary>
    /// <returns>
    /// The label id for the feature.
    /// </returns>
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@Proj:SEFAFeatureName");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the module id for the feature.
    /// </summary>
    /// <returns>
    /// The int value for the module for the feature.
    /// </returns>
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::ProjectManagementAndAccounting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the summary for the feature.
    /// </summary>
    /// <returns>
    /// The description label id for the feature.
    /// </returns>
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@Proj:SEFAFeatureSummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the learn more link for the feature.
    /// </summary>
    /// <returns>
    /// The URL for information about the feature.
    /// </returns>
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return 'https://go.microsoft.com/fwlink/?linkid=2119147';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the feature is enabled by default in the system.
    /// </summary>
    /// <returns>
    /// false, since the feature is not enabled by default.
    /// </returns>
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the feature can be disabled after it has been enabled in the system.
    /// </summary>
    /// <returns>
    /// false, since the feature can not be disabled after it has been enabled.
    /// </returns>
    [Hookable(false)]
    public boolean canDisable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the SEFA inquiry feature is enabled.
    /// </summary>
    /// <returns>
    /// true if the SEFA inquiry feature is enabled; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public static boolean isEnabled()
    {
        return Dynamics.AX.Application.FeatureStateProvider::isFeatureEnabled(ProjSEFAInquiryFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>featureManagementState_onUpdating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs CFDA upgrade once feature is enabled in feature management.
    /// </summary>
    /// <param name = "_sender">The <c>FeatureManagementState</c> record to be written.</param>
    /// <param name = "_args">The event arguments.</param>
    [DataEventHandler(tableStr(FeatureManagementState), DataEventType::Updating)]
    public static void featureManagementState_onUpdating(Common _sender, DataEventArgs _args)
    {
        FeatureManagementState featureManagementState = _sender;

        if (featureManagementState.Name == Dynamics.AX.Application.FeatureStateProvider::featureName(ProjSEFAInquiryFeature::instance())
            && featureManagementState.IsEnabled == NoYes::Yes
            && featureManagementState.orig().IsEnabled == NoYes::No)
        {
            ProjCFDADataUpgrade::loadData();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>