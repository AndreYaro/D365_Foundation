<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PartyMainAccountDimensionListProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PartyMainAccountDimensionListProvider</c> class is the main account dimension list provider
/// for party accounts.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(MainAccountDimensionListProviderType), MainAccountDimensionListProviderType::Party)
]
class PartyMainAccountDimensionListProvider extends MainAccountDimensionListProvider
{
    // <GEERU>
    #isoCountryRegionCodes
    // </GEERU>

    CustVendTable   invoiceAccount;
    PostingProfile  postingProfile;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values of the party main account ledger dimension list provider.
    /// </summary>
    protected void initValues()
    {
        Object                          sourceDocumentLineItem = accountingRule.parmSourceDocumentLineItem();
        Object                          sourceDocument;
        SourceDocumentIParty            iParty;
        SourceDocumentIAccountingRule   iAccountingRule;

        if (sourceDocumentLineItem is SourceDocumentIParty)
        {
            iParty            = sourceDocumentLineItem as SourceDocumentIParty;
            invoiceAccount    = iParty.parmPartyAccount();
        }
        else
        {
            sourceDocument = sourceDocumentLineItem.parmSourceDocument();
            if (sourceDocument is SourceDocumentIParty)
            {
                iParty            = sourceDocument as SourceDocumentIParty;
                invoiceAccount    = iParty.parmPartyAccount();
            }
        }

        if (sourceDocument is SourceDocumentIAccountingRule)
        {
            iAccountingRule = sourceDocument as SourceDocumentIAccountingRule;
            postingProfile = iAccountingRule.parmPostingProfile();
        }

        if (!invoiceAccount)
        {
            throw error("@SYS4081923");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMainAccountDimensionList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the main account dimension list.
    /// </summary>
    protected void populateMainAccountDimensionList()
    {
        LedgerDimensionDefaultAccount       ledgerDimensionDefaultAccount;
        Object                              object = this.parmAccountingRule().parmSourceDocumentLineItem();
        SourceDocumentLineItemICharge       iCharge;
        MarkupTable                         markupTable;
        container                           cacheResult;
        LedgerCacheScope                    ledgerCacheScope;

        if (object is SourceDocumentLineItemICharge)
        {
            iCharge = object as SourceDocumentLineItemICharge;
            markupTable = iCharge.parmMarkupTable();
        }

        switch (invoiceAccount.TableId)
        {
            case tableNum(CustTable) :
                // Markups with both sides set to ledger do offset to the customer account
                if (markupTable != null &&
                    (markupTable.CustType == MarkupType::LedgerAccount &&
                    markupTable.VendType == MarkupType::LedgerAccount))
                {
                    ledgerDimensionDefaultAccount = markupTable.CustomerLedgerDimension;
                }
                else
                {
                    ledgerCacheScope = LedgerCacheScope::PartyMainAccountDimensionListProvCust;
                }
                break;
            case tableNum(VendTable) :
                // Markups with both sides set to ledger do offset to the vendor account
                if (markupTable != null &&
                    (markupTable.CustType == MarkupType::LedgerAccount &&
                    markupTable.VendType == MarkupType::LedgerAccount))
                {
                    ledgerDimensionDefaultAccount = markupTable.VendorLedgerDimension;
                }
                else
                {
                    ledgerCacheScope = LedgerCacheScope::PartyMainAccountDimensionListProvVend;
                }
                break;
        }

        boolean isRU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // <GEERU>
        if (isRU && markupTable && markupTable.needChargeIssue())
        {
            ledgerDimensionDefaultAccount = MarkupCustPosting_RU::findLedger(MarkupCustPostingType_RU::SalesConsumption,
                                                                    invoiceAccount.AccountNum,
                                                                    markupTable.MarkupCode).LedgerDimension;
            if (! ledgerDimensionDefaultAccount)
            {
                throw error(strFmt("@GLS114839", markupTable.MarkupCode));
            }
        }
        else
        {
        // </GEERU>

            if (!ledgerDimensionDefaultAccount)
             {
                changecompany(invoiceAccount.company())
                {
                    // include current company context in cache key, SubledgerJournalizer has properly set company context
                    cacheResult = LedgerCache::getValue(ledgerCacheScope, [curext(), invoiceAccount.AccountNum, invoiceAccount.GroupId, postingProfile]);

                    if (cacheResult == conNull())
                    {
                        switch (invoiceAccount.TableId)
                        {
                            case tableNum(CustTable):
                                ledgerDimensionDefaultAccount = CustLedgerAccounts::summaryLedgerDimension(invoiceAccount.AccountNum,
                                    postingProfile,
                                    isRU);
                            break;

                            case tableNum(VendTable):
                                ledgerDimensionDefaultAccount = VendLedgerAccounts::summaryLedgerDimension(invoiceAccount.AccountNum,
                                    postingProfile,
                                    isRU);
                            break;
                        }

                        LedgerCache::insertValue(ledgerCacheScope, [curext(), invoiceAccount.AccountNum, invoiceAccount.GroupId, postingProfile], [ledgerDimensionDefaultAccount]);
                    }
                    else
                    {
                        [ledgerDimensionDefaultAccount] = cacheResult;
                    }
                }
            }
        // <GEERU>
        }
        // </GEERU>

        this.addToMainAccDimensionList(ledgerDimensionDefaultAccount);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>