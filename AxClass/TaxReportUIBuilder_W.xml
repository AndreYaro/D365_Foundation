<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportUIBuilder_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportUIBuilder_W</c> class is the UI Builder class for <c>TaxReport_SE</c> and <c>TaxReport_FI</c> SSRS Reports.
/// </summary>
[SysObsolete('This class is no longer used.', true, 01\12\2022)]
class TaxReportUIBuilder_W extends SrsReportDataContractUIBuilder
{
    DialogField     taxCurrencyCode;
    DialogField     reportingCurrencyCode;
    DialogField     currencyRateOnReportingDate;
    DialogField     reportingDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Build actions.
    /// </summary>
    public void build()
    {
        super();

        taxCurrencyCode             = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(TaxReportContract_W, parmTaxCurrencyCode));
        reportingCurrencyCode       = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(TaxReportContract_W, parmReportingCurrencyCode));
        currencyRateOnReportingDate = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(TaxReportContract_W, parmCurrencyRateOnReportingDate));
        reportingDate               = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(TaxReportContract_W, parmReportingDate));

        reportingDate.enabled(currencyRateOnReportingDate.value() == true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyRateOnReportingDateModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles events for the Report Mode control.
    /// </summary>
    /// <param name="_currencyRateOnReportingDate">
    ///    CheckBox control with the parameter.
    /// </param>
    /// <returns>
    ///    true if the event handler is executed successfully; otherwise, false.
    /// </returns>
    public boolean currencyRateOnReportingDateModified(FormCheckBoxControl _currencyRateOnReportingDate)
    {
        ;

        if (_currencyRateOnReportingDate.modified() && _currencyRateOnReportingDate.value())
        {
            reportingDate.enabled(true);
        }
        else
        {
            reportingDate.enabled(false);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Post run actions.
    /// </summary>
    public void postRun()
    {
        Dialog dialogLocal = this.dialog();

        super();

        // This method should be called in order to handle events on dialogs.
        dialogLocal.dialogForm().formRun().controlMethodOverload(false);

        // register event handler for the 'taxCurrencyCode' control
        taxCurrencyCode.registerOverrideMethod(methodstr(FormStringControl, modified), methodstr(TaxReportUIBuilder_W, taxCurrencyCodeModified), this);

        // register event handler for the 'currencyRateOnReportingDate' control
        currencyRateOnReportingDate.registerOverrideMethod(methodstr(FormComboBoxControl, modified), methodstr(TaxReportUIBuilder_W, currencyRateOnReportingDateModified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCurrencyCodeModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles events for the Tax currency code control.
    /// </summary>
    /// <param name="_taxCurrencyCode">
    ///    String control with the parameter.
    /// </param>
    /// <returns>
    ///    true if the event handler is executed successfully; otherwise, false.
    /// </returns>
    public boolean taxCurrencyCodeModified(FormStringControl _taxCurrencyCode)
    {
        ;

        if (_taxCurrencyCode.modified() && _taxCurrencyCode.text())
        {
            reportingCurrencyCode.value(_taxCurrencyCode.text());
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>