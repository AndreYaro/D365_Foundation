<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCComponentTreeWithAttributes</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCComponentTreeWithAttributes</c> class handles the interaction with a form tree control
/// that shows a configuration model as components and subcomponents with attributes.
/// </summary>
class PCComponentTreeWithAttributes extends PCComponentTree
{
    // Map from item idx to pathId
    Map pathIDToIdx;

    // Map from pathId to node idx
    Map idxToPathId;

    // Map from item idx to extra text.
    Map idxToExtraText;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>expandPathToItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expands an item and all its parents.
    /// </summary>
    /// <param name="_idx">
    /// The item index.
    /// </param>
    protected void expandPathToItem(int _idx)
    {
        while (_idx > 0)
        {
            tree.expand(_idx, FormTreeExpand::Expand);
            _idx = tree.getParent(_idx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemBaseText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the text representation of a record.
    /// </summary>
    /// <param name="_common">
    /// The record from which to create the text.
    /// </param>
    /// <returns>
    /// A text representation of a record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// An exception is thrown for unknown record types.
    /// </exception>
    protected str getItemBaseText(Common _common)
    {
        EcoResCategoryAttribute categoryAttribute;

        switch (_common.TableId)
        {
            case tableNum(EcoResCategoryAttribute):
                categoryAttribute = _common as EcoResCategoryAttribute;
                return EcoResAttribute::find(categoryAttribute.Attribute).Name;

            default:
                return super(_common);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemIdxFromPathId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tree item index from a path ID.
    /// </summary>
    /// <param name="_pathId">
    /// The path ID.
    /// </param>
    /// <returns>
    /// A tree item index.
    /// </returns>
    protected int getItemIdxFromPathId(PCTableConstraintColumnCatAttrRecId _pathId)
    {
        if (pathIDToIdx.exists(_pathId))
        {
            return pathIDToIdx.lookup(_pathId);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedPathId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the path ID for the selected item.
    /// </summary>
    /// <returns>
    /// The path ID for the selected item.
    /// </returns>
    public PCTableConstraintColumnCatAttrRecId getSelectedPathId()
    {
        if (idxToPathId.exists(selectedItemIndex))
        {
            return idxToPathId.lookup(selectedItemIndex);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTreeIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the image index for a record.
    /// </summary>
    /// <param name="_common">
    /// The record for which to get the image.
    /// </param>
    /// <returns>
    /// The image index for a record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The record type is unknown.
    /// </exception>
    protected int getTreeIcon(Common _common)
    {
        #define.AttributeIconIdx(3)

        switch (_common.TableId)
        {
            case tableNum(EcoResCategoryAttribute):
                return #AttributeIconIdx;

            default:
                return super(_common);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>redrawTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Redraws the tree control in the form.
    /// </summary>
    public void redrawTree()
    {
        idxToPathId     = new Map(Types::Integer, Types::Int64);
        pathIDToIdx     = new Map(Types::Int64, Types::Integer);
        idxToExtraText  = new Map(Types::Integer, Types::String);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>redrawTreeIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Redraws the tree control icon in the form.
    /// </summary>
    /// <param name="_parent">
    /// The ID of the parent icon in the tree.
    /// </param>
    /// <param name="_parentClass">
    /// The component to which the icon relates.
    /// </param>
    /// <param name="_pathEnumerator">
    /// An enumerator over the selected path; optional.
    /// </param>
    protected void redrawTreeIcon(int _parent, PCClass _parentClass, ListEnumerator _pathEnumerator)
    {
        EcoResCategoryAttribute categoryAttribute;
        int             newChildItem;

        while select categoryAttribute
            where categoryAttribute.Category == _parentClass.RecId
        {
            newChildItem = this.addItem(categoryAttribute, _parent);

            if (this.isItemOnSelectedPath(_pathEnumerator, categoryAttribute))
            {
                // Advance also selects
                this.advancePathEnumerator(_pathEnumerator, newChildItem);
                // Do not use the enumerator on siblings since it has ben advanced.
                _pathEnumerator = null;
            }
        }

        super(_parent, _parentClass, _pathEnumerator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshItemText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the text for an item.
    /// </summary>
    /// <param name="_idx">
    /// The index of the item to refresh.
    /// </param>
    protected void refreshItemText(int _idx)
    {
        FormTreeItem item = tree.getItem(_idx);
        str baseText = this.getItemBaseText(dataMap.lookup(_idx));

        if (idxToExtraText.exists(_idx))
        {
            item.text(strFmt("@GLS180408", baseText, idxToExtraText.lookup(_idx)));
            item.stateBold(true);
            item.stateImage(1);
            this.expandPathToItem(_idx);
        }
        else
        {
            item.text(baseText);
            item.stateBold(false);
            item.stateImage(0);
        }

        tree.setItem(item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPathId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects an item with the specified path ID.
    /// </summary>
    /// <param name="_pathId">
    /// The path ID.
    /// </param>
    public void selectPathId(PCTableConstraintColumnCatAttrRecId _pathId)
    {
        tree.select(this.getItemIdxFromPathId(_pathId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPathExtraText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the extra text for an item based on a path ID.
    /// </summary>
    /// <param name="_pathId">
    /// The path ID.
    /// </param>
    /// <param name="_extraText">
    /// The extra text which will be shown and the text representation of the item.
    /// </param>
    public void setPathExtraText(PCTableConstraintColumnCatAttrRecId _pathId, str _extraText)
    {
        int idx = this.getItemIdxFromPathId(_pathId);

        if (idx)
        {
            if (_extraText == '')
            {
                idxToExtraText.remove(idx);
            }
            else
            {
                idxToExtraText.insert(idx, _extraText);
            }
            this.refreshItemText(idx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPathId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the path ID of an item given by a path.
    /// </summary>
    /// <param name="_path">
    /// The path of the item.
    /// </param>
    /// <param name="_pathId">
    /// The path ID.
    /// </param>
    public void setPathId(List _path, PCTableConstraintColumnCatAttrRecId _pathId)
    {
        int                                 idx = this.getItemIdxFromPath(_path);
        PCTableConstraintColumnCatAttrRecId oldPathId;

        if (_pathId)
        {
            idxToPathId.insert(idx, _pathId);
            pathIDToIdx.insert(_pathId, idx);
        }
        else
        {
            // Setting pathId to 0 means removing it
            if (idxToPathId.exists(idx))
            {
                oldPathId = idxToPathId.lookup(idx);
                idxToPathId.remove(idx);
                pathIDToIdx.remove(oldPathId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCComponentTreeWithAttributes construct()
    {
        return new PCComponentTreeWithAttributes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTreeComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>PCComponentTreeWithAttributes</c> object from a form tree control and a component
    /// context which will be the root of the tree.
    /// </summary>
    /// <param name="_tree">
    /// The form tree control.
    /// </param>
    /// <param name="_componentContext">
    /// The component context.
    /// </param>
    /// <returns>
    /// A <c>PCComponentTree</c> instance.
    /// </returns>
    public static PCComponentTreeWithAttributes newFromTreeComponent(FormTreeControl _tree, PCClass _componentContext)
    {
        PCComponentTreeWithAttributes componentTree = PCComponentTreeWithAttributes::construct();

        componentTree.parmTree(_tree);
        componentTree.parmComponentContext(_componentContext);

        return componentTree;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>