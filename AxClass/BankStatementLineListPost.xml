<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementLineListPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankStatementLineListPost</c>class performs posting of bank statement lines by <c>BankStatementLinePostTable</c>.
/// </summary>
internal final class BankStatementLineListPost
{
    private List statementLineRecIds;
    private int linePostCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postLineList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts voucher based on bank statement line post table by statement line list.
    /// </summary>
    /// <param name="_statementLineRecIds">The record list of bank statement line to post.</param>
    internal static void postLineList(List _statementLineRecIds)
    {
        BankStatementLineListPost lineTablePost = BankStatementLineListPost::construct(_statementLineRecIds);
        lineTablePost.post();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>BankStatementLineListPost</c>.
    /// </summary>
    /// <param name="_statementLineRecIds">The statement line RecId list that to post.</param>
    /// <returns>A new instance of <c>BankStatementLineListPost</c>.</returns>
    internal static BankStatementLineListPost construct(List _statementLineRecIds)
    {
        if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
        {
            BankStatementLineListPost post = new BankStatementLineListPost();
            post.statementLineRecIds = _statementLineRecIds;
            return post;
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the statement line list.
    /// </summary>
    /// <returns>Whether the posting is successful.</returns>
    /// <exception cref="Exception::UpdateConflictNotRecovered">Exception of not recovered conflict.</exception>
    /// <exception cref="Exception::UpdateConflict">Exception of conflict.</exception>
    /// <exception cref="Exception::error">Exception of error.</exception>
    internal boolean post()
    {
        boolean result = true;
        #OCCRetryCount

        Microsoft.Dynamics.Ax.Xpp.UpdateConflictException updateConflictException;
        Microsoft.Dynamics.Ax.Xpp.DeadlockException deadlockException;
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;

        BankStatementPostLogger lineTablePostlogger = new BankStatementPostLogger();

        try
        {
            lineTablePostlogger.addActivity(BankInstrumentationConstants::PostBankStatementLinePostTable);
            this.processStatementLinesIndividually();
            lineTablePostlogger.logLineCountMagnitude(linePostCount);
            info("@CashManagement:BankReconciliationDirectPostingResult");
        }
        catch (deadlockException)
        {
            result = false;
            lineTablePostlogger.logException(deadlockException);
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (updateConflictException)
        {
            result = false;
            lineTablePostlogger.logException(updateConflictException);
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (errorException)
        {
            result = false;
            lineTablePostlogger.logException(errorException);
            throw error("@Bank:StatementLinesPostError");
        }
        finally
        {
            lineTablePostlogger.finishActivity();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processStatementLinesIndividually</Name>
				<Source><![CDATA[
    private void processStatementLinesIndividually()
    {
        ListEnumerator enumerator = statementLineRecIds.getEnumerator();
        while (enumerator.moveNext())
        {
            BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(enumerator.current());
            BankStatementLinePost statementLinePost = BankStatementLinePost::construct(statementLine);
            statementLinePost.post();
            linePostCount ++;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>