<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSPEDContabilProcessorContract_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contract class for SPED Contabil file processing.
/// </summary>
[
    DataContractAttribute,
    SysOperationGroupAttribute('GeneralGroup', "@SYS35893", '1'),
    SysOperationGroupAttribute('PeriodGroup', "@SYS40", '2'),
    SysOperationGroupAttribute('AccountingStatementGroup', "@FBK237", '3'),
    SysOperationGroupAttribute('OptionsGroup', "@SYS22622", '4'),
    SysOperationGroupAttribute('MainAccountGroup', "@Ledger:MainAccountTitle", '5'),
    SysOperationContractProcessingAttribute(classStr(FBSPEDContabilProcessorUIBuilder_BR))
]
public class FBSPEDContabilProcessorContract_BR extends ERFormatMappingRunBaseContract implements SysOperationValidatable
{
    FBSPEDContabilType_BR                   type;
    FBSPEDContabilLayoutVersion_BR          layoutVersion;
    Filename                                fileName;
    FromDate                                fromDate;
    ToDate                                  toDate;
    FiscalOrganizationRecId_BR              fiscalOrganization;
    BookNumber_BR                           bookNumber;
    FBSpedContabilSituationType_BR          situationType;
    FBSpedContabilOpeningPeriodSituation_BR openingPeriodSituation;
    FBSpedContabilFileType_BR               fileType;
    FBSPEDFileType_BR                       fileTypeSimple;
    FBSpedContabilFileHash_BR               fileHash;
    FBSpedContabilAddAccountingStatement_BR addAccountingStatements;
    FBSpedContabilAccStatementPeriod_BR     accStatementPeriod;
    FBSpedContabilFiscalYearClosingDate_BR  fiscalYearClosingDate;
    Filename                                replaceRTFFileName;
    Description                             substDescription;
    str                                     replaceRTFFileContent;
    FBSPEDContabilInstitutionType_BR        institutionType;
    FBSPEDContabilSubstitutionReasonCode_BR substitutionReasonCode;
    protected NoYes                         referencedCoA;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAccStatementPeriod</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('AccountingStatementGroup'),
    SysOperationDisplayOrderAttribute('2')
    ]
    public FBSpedContabilAccStatementPeriod_BR parmAccStatementPeriod(FBSpedContabilAccStatementPeriod_BR _accStatementPeriod = accStatementPeriod)
    {
        accStatementPeriod = _accStatementPeriod;

        return accStatementPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddAccountingStatements</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('AccountingStatementGroup'),
    SysOperationDisplayOrderAttribute('1'),
    SysOperationLabelAttribute("@FBK238")
    ]
    public FBSpedContabilAddAccountingStatement_BR parmAddAccountingStatements(FBSpedContabilAddAccountingStatement_BR _addAccountingStatements = addAccountingStatements)
    {
        addAccountingStatements = _addAccountingStatements;

        return addAccountingStatements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookNumber</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('OptionsGroup'),
    SysOperationDisplayOrderAttribute('2')
    ]
    public BookNumber_BR parmBookNumber(BookNumber_BR _bookNumber = bookNumber)
    {
        bookNumber  = _bookNumber;

        return bookNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileHash</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('OptionsGroup'),
    SysOperationDisplayOrderAttribute('10')
    ]
    public FBSpedContabilFileHash_BR parmFileHash(FBSpedContabilFileHash_BR _fileHash = fileHash)
    {
        fileHash = _fileHash;

        return fileHash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationControlVisibilityAttribute(false)
    ]
    public Filename parmFileName(Filename _fileName = fileName)
    {
        fileName = _fileName;

        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileType</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('OptionsGroup'),
    SysOperationDisplayOrderAttribute('7')
    ]
    public FBSpedContabilFileType_BR parmFileType(FBSpedContabilFileType_BR _fileType = fileType)
    {
        fileType    = _fileType;

        return fileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileTypeSimple</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('OptionsGroup'),
    SysOperationDisplayOrderAttribute('8')
    ]
    public FBSpedFileType_BR parmFileTypeSimple(FBSpedFileType_BR _fileTypeSimple = fileTypeSimple)
    {
        fileTypeSimple    = _fileTypeSimple;

        return fileTypeSimple;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalOrganization</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('GeneralGroup'),
    SysOperationDisplayOrderAttribute('1')
    ]
    public FiscalOrganizationRecId_BR parmFiscalOrganization(FiscalOrganizationRecId_BR _fiscalOrganization = fiscalOrganization)
    {
        fiscalOrganization = _fiscalOrganization;

        return fiscalOrganization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalYearClosingDate</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('OptionsGroup'),
    SysOperationDisplayOrderAttribute('9')
    ]
    public FBSpedContabilFiscalYearClosingDate_BR parmFiscalYearClosingDate(FBSpedContabilFiscalYearClosingDate_BR _fiscalYearClosingDate = fiscalYearClosingDate)
    {
        fiscalYearClosingDate = _fiscalYearClosingDate;

        return fiscalYearClosingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('PeriodGroup'),
    SysOperationDisplayOrderAttribute('1')
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLayoutVersion</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('OptionsGroup'),
    SysOperationDisplayOrderAttribute('6')
    ]
    public FBSPEDContabilLayoutVersion_BR parmLayoutVersion(FBSPEDContabilLayoutVersion_BR _layoutVersion = layoutVersion)
    {
        layoutVersion = _layoutVersion;

        return layoutVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOpeningPeriodSituation</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('OptionsGroup'),
    SysOperationDisplayOrderAttribute('5')
    ]
    public FBSpedContabilOpeningPeriodSituation_BR parmOpeningPeriodSituation(FBSpedContabilOpeningPeriodSituation_BR _openingPeriodSituation = openingPeriodSituation)
    {
        openingPeriodSituation = _openingPeriodSituation;

        return openingPeriodSituation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplaceRTFFileName</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('OptionsGroup'),
    SysOperationDisplayOrderAttribute('11')
    ]
    public Filename parmReplaceRTFFileName(Filename _replaceRTFFileName = replaceRTFFileName)
    {
        replaceRTFFileName = _replaceRTFFileName;

        return replaceRTFFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplaceRTFFileContent</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationControlVisibilityAttribute(false)
    ]
    public str parmReplaceRTFFileContent(str _replaceRTFFileContent = replaceRTFFileContent)
    {
        replaceRTFFileContent = _replaceRTFFileContent;

        return replaceRTFFileContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSituationType</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('OptionsGroup'),
    SysOperationDisplayOrderAttribute('4')
    ]
    public FBSpedContabilSituationType_BR parmSituationType(FBSpedContabilSituationType_BR _situationType = situationType)
    {
        situationType = _situationType;

        return situationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubstDescription</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('OptionsGroup'),
    SysOperationDisplayOrderAttribute('12'),
    SysOperationLabelAttribute("@SPEDECDLayout5:DataFileDescription")
    ]
    public Description parmSubstDescription(Description _substDescription = substDescription)
    {
        substDescription = _substDescription;

        return substDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInstitutionType</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('OptionsGroup'),
    SysOperationDisplayOrderAttribute('14'),
    SysOperationLabelAttribute("@SPEDECDLayout7:InstitutionType")
    ]
    public FBSPEDContabilInstitutionType_BR parmInstitutionType(FBSPEDContabilInstitutionType_BR _institutionType = institutionType)
    {
        institutionType = _institutionType;

        return institutionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubstitutionReasonCode</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('OptionsGroup'),
    SysOperationDisplayOrderAttribute('13'),
    SysOperationLabelAttribute("@SPEDECDLayout7:SubstitutionReasonCode")
    ]
    public FBSPEDContabilSubstitutionReasonCode_BR parmSubstitutionReasonCode(FBSPEDContabilSubstitutionReasonCode_BR _substitutionReasonCode = substitutionReasonCode)
    {
        substitutionReasonCode = _substitutionReasonCode;

        return substitutionReasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferencedCoA</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('MainAccountGroup'),
    SysOperationDisplayOrderAttribute('1'),
    SysOperationLabelAttribute("@SPEDECDLayout8:ReferencedCoA")
    ]
    public NoYes parmReferencedCoA(NoYes _referencedCoA = referencedCoA)
    {
        referencedCoA = _referencedCoA;

        return referencedCoA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('PeriodGroup'),
    SysOperationDisplayOrderAttribute('2')
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmType</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute,
    SysOperationGroupMemberAttribute('OptionsGroup'),
    SysOperationDisplayOrderAttribute('3')
    ]
    public FBSPEDContabilType_BR parmType(FBSPEDContabilType_BR _type = type)
    {
        type = _type;

        return type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates setup parameters and system data to generate the SPED file successfully.
    /// </summary>
    /// <returns>
    /// True if it is valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        FBSPEDContabilSetupParameters_BR    spedContabilSetupParameters;
        boolean                             isValid = true;

        isValid = this.validateFieldsAreFilled();

        spedContabilSetupParameters = FBSPEDContabilSetupParameters_BR::find(fiscalOrganization);

        if (!spedContabilSetupParameters)
        {
            isValid = checkFailed("@FBK129");
        }

        if (isValid)
        {
            isValid = this.validatePeriod(spedContabilSetupParameters.DataArea)                                                     && isValid;
            isValid = this.validateDimensionSet(spedContabilSetupParameters.DimensionSetName, spedContabilSetupParameters.DataArea) && isValid;
            isValid = this.validateFiscalOrganization(spedContabilSetupParameters.DataArea)                                         && isValid;
            isValid = this.validateFileType()                                                                                       && isValid;
                                                                                  
            if (fileTypeSimple == FBSPEDFileType_BR::Substitute)
            {
                isValid = this.validateReplacementFileFormat()  && isValid;
                isValid = this.validateHexHash()                && isValid;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionSet</Name>
				<Source><![CDATA[
    private boolean validateDimensionSet(DimensionSetName _dimensionSetName, DataAreaId _dataAreaId)
    {
        DimensionAttributeRecId costCenterDimAttrRecId;
        DimensionHierarchy      dimHier;
        DimensionHierarchyLevel dimHierLevel;
        boolean                 isValid = true;

        dimHier = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, _dimensionSetName);

        changeCompany(_dataAreaId)
        {
            costCenterDimAttrRecId  = BrazilParameters::find().CostCenterDimensionAttribute;
        }

        if (!dimHier)
        {
            error(strFmt("@SYS333565", _dimensionSetName));
            isValid = false;
        }
        else
        {
            select firstOnly dimHierLevel
                where   dimHierLevel.DimensionHierarchy == dimHier.RecId
                    &&  dimHierLevel.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

            if (!dimHierLevel)
            {
                error(strFmt("@FBK271", _dimensionSetName));
                isValid = false;
            }

            select firstOnly dimHierLevel
                where   dimHierLevel.DimensionHierarchy == dimHier.RecId
                    &&  dimHierLevel.DimensionAttribute == costCenterDimAttrRecId;

            if (!dimHierLevel)
            {
                error(strFmt("@FBK272", _dimensionSetName));
                isValid = false;
            }

            select count(RecId) from dimHierLevel
                where   dimHierLevel.DimensionHierarchy == dimHier.RecId;

            if (dimHierLevel.RecId > 2)
            {
                error("@FBK273");
                isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldsAreFilled</Name>
				<Source><![CDATA[
    private boolean validateFieldsAreFilled()
    {
        boolean isValid  = true;

        if (!fromDate)
        {
            error(strFmt("@SYS26332", extendedTypeId2pname(extendedTypeNum(FromDate))));
            isValid = false;
        }

        if (!toDate)
        {
            error(strFmt("@SYS26332", extendedTypeId2pname(extendedTypeNum(ToDate))));
            isValid = false;
        }

        if (!fiscalOrganization)
        {
            error(strFmt("@SYS26332", extendedTypeId2pname(extendedTypeNum(FiscalOrganizationRecId_BR))));
            isValid = false;
        }

        if (!bookNumber)
        {
            error(strFmt("@SYS26332", extendedTypeId2pname(extendedTypeNum(BookNumber_BR))));
            isValid = false;
        }

        if (layoutVersion >= FBSPEDContabilLayoutVersion_BR::v400 && !fiscalYearClosingDate)
        {
            error(strFmt("@SYS26332", extendedTypeId2pname(extendedTypeNum(FBSpedContabilFiscalYearClosingDate_BR))));
            isValid = false;
        }

        if (layoutVersion >= FBSPEDContabilLayoutVersion_BR::v500
            && fileTypeSimple == FBSPEDFileType_BR::Substitute
            && !replaceRTFFileName)
        {
            error("@SPEDECDLayout5:ReplacementFileMustBeSpecified");
            isValid = false;
        }

        if (layoutVersion >= FBSPEDContabilLayoutVersion_BR::v800 
            && referencedCoA 
            && !institutionType)
        {
            error(strFmt("@SYS26332", enumId2pname(enumNum(FBSPEDContabilInstitutionType_BR))));
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFileType</Name>
				<Source><![CDATA[
    private boolean validateFileType()
    {
        FiscalOrganization_BR   fiscalOrg;
        boolean                 isValid = true;

        if (fileType == FBSpedContabilFileType_BR::SubstituteWithNIRE || fileType == FBSpedContabilFileType_BR::SubstituteWithNIREChanges)
        {
            fiscalOrg   = FiscalOrganization_BR::find(fiscalOrganization);

            changeCompany(fiscalOrg.FiscalEstablishmentDataArea)
            {
                if (!FiscalEstablishment_BR::findById(fiscalOrg.FiscalEstablishmentId).NIRE)
                {
                    error(strFmt("@FBK175", fiscalOrg.FiscalEstablishmentId));
                    isValid = false;
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFiscalOrganization</Name>
				<Source><![CDATA[
    private boolean validateFiscalOrganization(DataAreaId _dataAreaId)
    {
        FiscalEstablishment_BR              fiscalEstablishment, companyFiscalEstablishment, fiscalOrganizationFiscalEstablishment;
        boolean                             isValid = true;
        int                                 dataAreaCount = 0;

        while select crossCompany dataAreaId from fiscalEstablishment
            group by dataAreaId
                where fiscalEstablishment.FiscalOrganization_BR == fiscalOrganization
        {
            changeCompany(fiscalEstablishment.dataAreaId)
            {
                companyFiscalEstablishment              = null;
                fiscalOrganizationFiscalEstablishment   = null;

                select count(RecId) from companyFiscalEstablishment;

                select count(RecId) from fiscalOrganizationFiscalEstablishment
                    where fiscalOrganizationFiscalEstablishment.FiscalOrganization_BR == fiscalOrganization;

                if (fiscalOrganizationFiscalEstablishment.RecId != companyFiscalEstablishment.RecId)
                {
                    error(strFmt("@FBK91", fiscalEstablishment.dataAreaId));
                    isValid = false;
                }
            }

            dataAreaCount++;
        }

        if (dataAreaCount > 1)
        {
            changeCompany(_dataAreaId)
            {
                if (!CompanyInfo::find().IsConsolidationCompany)
                {
                    error("@FBK92");
                    isValid = false;
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHexHash</Name>
				<Source><![CDATA[
    private boolean validateHexHash()
    {
        const str hexChars = '0123456789abcdefABCDEF';

        if (strLen(strRem(fileHash, hexChars)) > 0)
        {
            error("@SPEDECDLayout5:HexCodeMustContainOnlyHexadecimalSymbols");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriod</Name>
				<Source><![CDATA[
    private boolean validatePeriod(DataAreaId _dataAreaId)
    {
        return this.validatePeriodExists(_dataAreaId) && this.validatePeriodRange() && this.validatePeriodEndDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriodExists</Name>
				<Source><![CDATA[
    private boolean validatePeriodExists(DataAreaId _dataAreaId)
    {
        boolean                 isValid = true;
        FiscalCalendarYear      fromDateFiscalCalendarYear, toDateFiscalCalendarYear;

        if (_dataAreaId)
        {
            changeCompany(_dataAreaId)
            {
                fromDateFiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), fromDate);
                toDateFiscalCalendarYear   = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), toDate);

                if (!fromDateFiscalCalendarYear || !toDateFiscalCalendarYear)
                {
                    error("@SYS17614");
                    isValid = false;
                }
                else if (fromDateFiscalCalendarYear.RecId != toDateFiscalCalendarYear.RecId)
                {
                    error("@FBK93");
                    isValid = false;
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriodRange</Name>
				<Source><![CDATA[
    private boolean validatePeriodRange()
    {
        boolean             isValid = true;

        if (!fromDate || !toDate)
        {
            return isValid;
        }

        if (!situationType)
        {
            if (dayOfMth(fromDate) != 1)
            {
                error("@FBK94");
                isValid = false;
            }

            if (toDate != endmth(toDate))
            {
                error("@FBK95");
                isValid = false;
            }
        }
        else
        {
            if (fromDate > toDate)
            {
                error("@FBK96");
                isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriodEndDate</Name>
				<Source><![CDATA[
    private boolean validatePeriodEndDate()
    {
        int             periodMonths;

        if (situationType)
        {
            return true;
        }

        if (!addAccountingStatements)
        {
            return true;
        }

        switch (accStatementPeriod)
        {
            case FBSpedContabilAccStatementPeriod_BR::Monthly:
                periodMonths = 1;
                break;
            case FBSpedContabilAccStatementPeriod_BR::Quarterly:
                periodMonths = 3;
                break;
            case FBSpedContabilAccStatementPeriod_BR::HalfYearly:
                periodMonths = 6;
                break;
            case FBSpedContabilAccStatementPeriod_BR::Yearly:
                periodMonths = 12;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (mthOfYr(toDate) mod periodMonths != 0)
        {
            error(strFmt("@Brazil:FBSpedECDEndDateMustBeEndOfPeriod", accStatementPeriod));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReplacementFileFormat</Name>
				<Source><![CDATA[
    private boolean validateReplacementFileFormat()
    {
        const str fileCheckSignature = @'{\rtf1\';
        
        if (subStr(replaceRTFFileContent, 1, strLen(fileCheckSignature)) == fileCheckSignature)
        {
            return true;
        }
        else
        {
            error("@SPEDECDLayout5:IncorrectReplacementFileFormat");
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>