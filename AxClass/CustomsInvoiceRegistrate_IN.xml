<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomsInvoiceRegistrate_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the customer invoice registrate.
/// </summary>
class  CustomsInvoiceRegistrate_IN
{
    Counter         progressCounter;
    FormDataSource  customsInvoiceRegnJournalTable_IN_ds;
    container       updatedInvRegnList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>customsInvoiceRegnJournalTable_IN_ds</Name>
				<Source><![CDATA[
    /// <summary>
    /// The customs of invoice registration journal.
    /// </summary>
    /// <param name="_customsInvoiceRegnJournalTable_IN_ds">
    /// The datasource of the coustoms registration journal.
    /// </param>
    /// <returns>
    /// The data of the coustoms of invoice registration journal.
    /// </returns>
    public FormDataSource  customsInvoiceRegnJournalTable_IN_ds(FormDataSource  _customsInvoiceRegnJournalTable_IN_ds = customsInvoiceRegnJournalTable_IN_ds)
    {
        customsInvoiceRegnJournalTable_IN_ds = _customsInvoiceRegnJournalTable_IN_ds;
        return customsInvoiceRegnJournalTable_IN_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Active customs of invoice registration journal.
    /// </summary>
    public void  run()
    {
        #define.emptyString('')

        str                                 orderedForUpdate = #emptyString;
        CustomsInvoiceRegnJournalTable_IN   customsInvoiceRegnJournalTable;
        CustomsImportInvoiceNumberTable_IN  customsImportInvoiceNumberTable;

        setprefix("@GLS5788");
        for (customsInvoiceRegnJournalTable = customsInvoiceRegnJournalTable_IN_ds.getFirst(true) ?
             customsInvoiceRegnJournalTable_IN_ds.getFirst(true) :
             customsInvoiceRegnJournalTable_IN_ds.cursor(); customsInvoiceRegnJournalTable;  customsInvoiceRegnJournalTable = customsInvoiceRegnJournalTable_IN_ds.getNext())
        {
            orderedForUpdate = orderedForUpdate ? orderedForUpdate+', ':orderedForUpdate;
            customsImportInvoiceNumberTable = CustomsImportInvoiceNumberTable_IN::find(customsInvoiceRegnJournalTable.CustomsImportInvoiceNumberTable);
            orderedForUpdate = orderedForUpdate + customsImportInvoiceNumberTable.ImporterInvoiceNumber + #emptyString;
        }
        for (customsInvoiceRegnJournalTable = customsInvoiceRegnJournalTable_IN_ds.getFirst(true) ?
             customsInvoiceRegnJournalTable_IN_ds.getFirst(true) :
             customsInvoiceRegnJournalTable_IN_ds.cursor(); customsInvoiceRegnJournalTable;  customsInvoiceRegnJournalTable = customsInvoiceRegnJournalTable_IN_ds.getNext())
        {
            this.updateCustomRegnJournal(customsInvoiceRegnJournalTable);
        }
        customsInvoiceRegnJournalTable_IN_ds.reread();
        customsInvoiceRegnJournalTable_IN_ds.refresh();
        customsInvoiceRegnJournalTable_IN_ds.active();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomRegnJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates customs registration journal.
    /// </summary>
    /// <param name="_customsInvoiceRegnJournalTable">
    /// The tables of customs registration journal.
    /// </param>
    public void  updateCustomRegnJournal(CustomsInvoiceRegnJournalTable_IN _customsInvoiceRegnJournalTable)
    {
        CustomsInvoiceRegnJournalLine_IN    customsInvoiceRegJournalLine;
        CustomsInvoiceRegnTrans_IN          customsInvoiceRegnTrans;
        QueryRun                            queryRun;
        PurchTable                          purchTableLoc;
        PurchTable_W                        purchTableLoc_W;
        CustomsImportInvoiceNumberTable_IN  customsImportInvoiceNumberTable;

        #define.emptyString('')

        ttsbegin;
        // update header
        if (!_customsInvoiceRegnJournalTable.ImportInvoiceDate)
        {
            _customsInvoiceRegnJournalTable.ImportInvoiceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            _customsInvoiceRegnJournalTable.update();
        }
        // update lines
        customsInvoiceRegnTrans.clear();
        queryRun = new QueryRun(_customsInvoiceRegnJournalTable.queryCustomsInvoiceRegnJournalLine(true));
        queryRun.query().dataSourceTable(tablenum(CustomsInvoiceRegnJournalLine_IN)).addRange(fieldnum(CustomsInvoiceRegnJournalLine_IN, Updated)).value(queryValue(NoYes::No));
        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(CustomsInvoiceRegnJournalLine_IN)))
            {
                customsInvoiceRegJournalLine = queryRun.get(tablenum(CustomsInvoiceRegnJournalLine_IN));
            }
            else
            {
                customsInvoiceRegJournalLine = null;
            }

            if (!customsInvoiceRegJournalLine.RecId)
            {
                continue;
            }
            if (!CustomsInvoiceRegnTrans_IN::checkIfQuantityConsumed(customsInvoiceRegJournalLine))
            {
                customsInvoiceRegnTrans.clear();
                customsInvoiceRegnTrans.initFromCustomsInvoiceRegnJournalLine(customsInvoiceRegJournalLine);
                customsInvoiceRegnTrans.write();
                customsInvoiceRegJournalLine.Updated = NoYes::Yes;
                customsInvoiceRegJournalLine.doUpdate();
            }
        }
        if (CustomsInvoiceRegnTrans_IN::checkPurchTableForUpdate(_customsInvoiceRegnJournalTable.OrderId))
        {
            purchTableLoc_W = PurchTable_W::findByPurchTable(PurchTable::find(_customsInvoiceRegnJournalTable.OrderId).RecId, true);
            purchTableLoc_W.CustomsInvoiceRegistered_IN = NoYes::Yes;
            purchTableLoc_W.update();
        }
        customsImportInvoiceNumberTable = CustomsImportInvoiceNumberTable_IN::find(_customsInvoiceRegnJournalTable.CustomsImportInvoiceNumberTable);
        if (customsInvoiceRegnTrans)
        {
            purchTableLoc = PurchTable::find(_customsInvoiceRegnJournalTable.OrderId, true);
            purchTableLoc.DocumentStatus = DocumentStatus::InvoiceRegistration_IN;
            purchTableLoc.update();
            updatedInvRegnList = conins(updatedInvRegnList, (conlen(updatedInvRegnList)+1), (strfmt("@GLS5742",customsImportInvoiceNumberTable.ImporterInvoiceNumber, _customsInvoiceRegnJournalTable.OrderId)));
        }
        else
        {
            updatedInvRegnList = conins(updatedInvRegnList, (conlen(updatedInvRegnList)+1), (strfmt("@GLS5741",customsImportInvoiceNumberTable.ImporterInvoiceNumber, _customsInvoiceRegnJournalTable.OrderId)));
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the <c>CustomsInvoiceRegistrate_IN</c> object.
    /// </summary>
    /// <returns>
    /// The instance of the <c>CustomsInvoiceRegistrate_IN</c> class.
    /// </returns>
    public static CustomsInvoiceRegistrate_IN  construct()
    {
        return new CustomsInvoiceRegistrate_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void  main(Args  _args)
    {
        CustomsInvoiceRegistrate_IN              customsInvoiceRegistrationRegistrate;
        CustomsInvoiceRegistrateForm_IN          customsInvoiceRegistrationForm;
        customsInvoiceRegistrationForm = CustomsInvoiceRegistrateForm_IN::construct();
        customsInvoiceRegistrationRegistrate = CustomsInvoiceRegistrate_IN::construct();

        if (_args.record())
        {
            customsInvoiceRegistrationRegistrate.customsInvoiceRegnJournalTable_IN_ds(FormDataUtil::getFormDataSource(_args.record()));
            customsInvoiceRegistrationForm.validateWrite(_args.record());
        }

        customsInvoiceRegistrationRegistrate.run();

        if (_args.caller() && _args.caller().name() == formstr(CustomsInvoiceRegistrate_IN))
        {
            _args.caller().callerRefresh();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>