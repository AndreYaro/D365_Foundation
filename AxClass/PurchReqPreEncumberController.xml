<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqPreEncumberController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReqPreEncumberController</c> class acts as a controller for the
/// <c>PurchReqPreEncumberOperation</c> service.
/// </summary>
/// <remarks>
/// This class is a customized controller that extends from the <c>SysOperationServiceController</c>
/// class.
/// </remarks>
class PurchReqPreEncumberController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>afterOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after a service operation is executed.
    /// </summary>
    /// <param name="_executionMode">
    /// The execution mode of a service operation.
    /// </param>
    /// <param name="_asyncResult">
    /// An asynchronous result structure.
    /// </param>
    /// <remarks>
    /// Override this to implement post processing logic.In the case of reliable asynchronous mode
    /// initiated from the desktop client, this method is called two times: one time with executionMode ==
    /// Synchronous as part of the batch execution and one time on the client by using executionMode ==
    /// ReliableAsynchronous. This enables client code to wait for the batch to be completed.
    /// </remarks>
    protected void afterOperation(SysOperationExecutionMode _executionMode, AifAsyncResult _asyncResult)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called before a service operation is executed.
    /// </summary>
    /// <param name="_executionMode">
    /// The execution mode with which the service operation will be executed.
    /// </param>
    /// <remarks>
    /// Override this method to implement pre-processing logic before a service operation is called.In the
    /// case when executionMode == ReliableAsynchronous, this method is called as a part of the batch
    /// execution on the server by using _executionMode == Synchronous.
    /// </remarks>
    protected void beforeOperation(SysOperationExecutionMode _executionMode)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>