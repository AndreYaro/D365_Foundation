<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetPostDisposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetPostDisposal
{
    LedgerVoucher ledgerVoucher;
    AssetTrans assetTrans;
    private Voucher depreciationAdjVoucher;

    AssetSumCalc_Trans assetSumPriorYears;
    AssetSumCalc_Trans assetSumAllYears;
    AssetSumCalc_Trans assetSumPriorYearsReportingCurrency;
    AssetSumCalc_Trans assetSumAllYearsReportingCurrency;
    #ISOCountryRegionCodes
    AmountCur adjustedDepreciationAmount;
    boolean isDisposalSameYear;
    AmountMST sumDepreciationPriorYears;
    AmountCur priorYearAdjustments;
    AmountCur currentYearAdjustments;
    real sumDepPeriod;
    real sumDepPeriodPriorYears;
    TransDate depreciationLastRunDate;
    RefRecId ledgerJournalTransRecId;
    private LedgerJournalTrans ledgerJournalTrans;
    boolean isCreditNote;

    // <GCN>
    AssetTrans assetTransDisposal;
    AssetBook assetBookDisposal;
    AssetDepreciationPolicyEnabled_CN isDepreciationPolicyEnabled;
    // </GCN>
    // <GIN>
    AssetGroupTrans_IN assetGroupTransNew;
    AssetGroupTrans_IN assetGroupTrans;
    AssetGroupInformation_IN assetGroupInformation;
    boolean isIsoIN;
    // </GIN>

    boolean isFrenchContext;
    // <GEEU>
    Percent assetSaleFactor;
    boolean isPolishContext;
    boolean isCzechContext;
    boolean isHungaryContext;
    boolean isCountryRegion_EELT;
    // </GEEU>
    // <GJP>
    LedgerDimensionDefaultAccount NBVOffsetAccount;
    boolean isAssetDocumentEnabled_JP;
    AssetDocumentSumCalcUtil_JP assetDocumentSumPriorYears;
    AssetDocumentSumCalcUtil_JP assetDocumentSumAllYears; // </GJP>
    private boolean isDerivedBookPosting;
    private AssetReversalRelatedVoucherManager assetReversalRelatedVoucherManager;
    private boolean isOneVoucherFeatureEnabled;
    AssetBookTable assetBookTableForInsertTrans;

    private boolean isAcquisition;
    private boolean isAcquisitionThisYear;
    private boolean isAcquisitionPriorYear;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isAnySplitTransactionPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for the split asset transaction for the mentioned transaction types.
    /// </summary>
    /// <param name = "_assetId">The assetId Value.</param>
    /// <param name = "_bookId"> The asset book id value.</param>
    /// <returns>
    /// Returns true if the asset transaction is spilt for the mentioned Transaction type; otherwise, false; 
    /// </returns>
    protected boolean isAnySplitTransactionPosted(AssetId _assetId, AssetBookId _bookId)
    {
        AssetTrans assetTransSplit;

        select firstOnly RecId from assetTransSplit
                where assetTransSplit.BookId == _bookId
                    && assetTransSplit.AssetId == _assetId
                    && assetTransSplit.Txt == "@SYS67430"
                    && (assetTransSplit.TransType == AssetTransType::Acquisition
                    || assetTransSplit.TransType == AssetTransType::AcquisitionAdj
                    || assetTransSplit.TransType == AssetTransType::Depreciation
                    || assetTransSplit.TransType == AssetTransType::DepreciationAdj);

        return assetTransSplit.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDisposalDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to calculate depreciation adjustment based on a given depreciation convention.
    /// </summary>
    /// <param name="_basisForDepreciation">
    /// Basis for depreciation calculation.
    /// </param>
    /// <param name="_assetBook">
    /// <c>AssetBook</c> table buffer.
    /// </param>
    /// <param name="_assetDisposalTransDate">
    /// The date of the disposal transaction.
    /// </param>
    /// <param name="_isReportingCurrency">
    /// A boolean value to identify reporting currency type.
    /// </param>
    /// <returns>
    /// Return calculated depreciation adjustment amount.
    /// </returns>
    private AmountCur adjustDisposalDepreciation(
        AssetAmount _basisForDepreciation,
        AssetBook _assetBook,
        AssetTransDate _assetDisposalTransDate,
        boolean _isReportingCurrency = false)
    {
        AssetTableInterval assetTableInterval;
        AssetBookTable assetBookTable;
        AssetDepreciationProfile assetDepreciationProfile;
        AmountCur adjustedDepreciation;
        AssetTableDepConv depreciationConvention;
        AssetAmount alreadyPostedDepreciationAmounts;
        AssetAmount alreadyPostedOtherDepreciationAmounts;
        AssetTransDate firstDayOfDisposalYear;
        AssetTransDate firstDayOfAcqusitionYear;
        container assetTransTypes;

        adjustedDepreciation = _basisForDepreciation;

        assetBookTable = AssetBookTable::find(assetTrans.BookId);
        assetDepreciationProfile = _assetBook.depreciationProfile();
        assetTableInterval = AssetTableInterval::construct(assetDepreciationProfile, assetBookTable.getFiscalCalendar());

        firstDayOfDisposalYear = assetTableInterval.findFirstDayOfYear(_assetDisposalTransDate);
        firstDayOfAcqusitionYear = assetTableInterval.findFirstDayOfYear(_assetBook.AcquisitionDate);

        boolean isSplitTransactionPosted = this.isAnySplitTransactionPosted(_assetBook.AssetId, _assetBook.BookId);

        // When the acquisition date is greater than placed in service date, depreciation adjustments amount is posted for the
        // first period of the depreciation. This amount needs to be added to the other depreciation amounts as it covers the periods
        // prior the acquisition date periods.
        if ((firstDayOfDisposalYear == firstDayOfAcqusitionYear && _assetBook.AcquisitionDate > _assetBook.UsedFromDate)
            || isSplitTransactionPosted)
        {
            assetTransTypes = [AssetTransType::Depreciation, AssetTransType::DepreciationAdj];
        }        
        // Account for already posted depreciation amounts in the year of the disposal transaction.
        else if (_assetBook.LastDepreciationDate >= firstDayOfDisposalYear)
        {
            assetTransTypes = [AssetTransType::Depreciation];
        }
        if (conLen(assetTransTypes) > 0)
        {
            if (_isReportingCurrency)
            {
                alreadyPostedDepreciationAmounts =
                        AssetTrans::amountReportingCurrencyPerDateTransTypes(
                        assetTrans.AssetId,
                        assetTrans.BookId,
                        assetTransTypes,
                        firstDayOfDisposalYear,
                        maxDate(),
                        this.getVoucherToExclude());
            }
            else
            {
                alreadyPostedDepreciationAmounts =
                        AssetTrans::amountMSTPerDateTransTypes(
                        assetTrans.AssetId,
                        assetTrans.BookId,
                        assetTransTypes,
                        firstDayOfDisposalYear,
                        maxDate(),
                        this.getVoucherToExclude());
            }

            adjustedDepreciation += alreadyPostedDepreciationAmounts;
        }

        depreciationConvention = AssetTableDepConv::newCalcAssetAmount(_assetBook, assetTableInterval, assetDepreciationProfile);
        depreciationConvention.parmIsReportingCurrencyDepreciation(_isReportingCurrency);

        if (_isReportingCurrency)
        {
            adjustedDepreciation = assetBookTable.roundOffDepreciationReportingCurrency(adjustedDepreciation
                * depreciationConvention.calculateDisposalDepreciationAdjRatio(assetTrans.TransDate));
        }
        else
        {
            adjustedDepreciation = assetBookTable.roundOffDepreciation(adjustedDepreciation
                * depreciationConvention.calculateDisposalDepreciationAdjRatio(assetTrans.TransDate));
        }

        // When the acquisition date is greater than placed in service date, depreciation adjustments are already summarized
        // in the execution above, so only extra ordinary depreciation needs to be added.
        if ((firstDayOfDisposalYear == firstDayOfAcqusitionYear && _assetBook.AcquisitionDate > _assetBook.UsedFromDate)
            || isSplitTransactionPosted)
        {
            assetTransTypes = [AssetTransType::ExtraordinaryDepreciation];
        }
        // If the depreciation adjustment amounts are posted in the year of disposal, the final amount need to be adjusted as it is possible
        // to have too much depreciation allowed for a given year.
        else
        {
            assetTransTypes = [AssetTransType::DepreciationAdj, AssetTransType::ExtraordinaryDepreciation];
        }

        if (_isReportingCurrency)
        {
            alreadyPostedOtherDepreciationAmounts =
                AssetTrans::amountReportingCurrencyPerDateTransTypes(
                assetTrans.AssetId,
                assetTrans.BookId,
                assetTransTypes,
                firstDayOfDisposalYear,
                maxDate(),
                this.getVoucherToExclude());
        }
        else
        {
            alreadyPostedOtherDepreciationAmounts =
                AssetTrans::amountMSTPerDateTransTypes(
                assetTrans.AssetId,
                assetTrans.BookId,
                assetTransTypes,
                firstDayOfDisposalYear,
                maxDate(),
                this.getVoucherToExclude());
        }

        adjustedDepreciation -= alreadyPostedOtherDepreciationAmounts;

        // The disposal process always calculates the amounts for the all the periods from the first period until the period of disposal.
        // If the depreciation amounts are already posted in the year of disposal, the final amount need to be adjusted by removing these amounts.
        adjustedDepreciation -= alreadyPostedDepreciationAmounts;

        // Make sure that the sum of depreciation amounts is not more than amount to leave at the book.
        if (assetBookTable.NetBookValueRest)
        {
            AmountMST amountToDepreciate;
            AmountMST totalAlreadyPostedDepreciation;

            if (_isReportingCurrency)
            {
                amountToDepreciate = AssetTrans::amountToDepriciateInReportingCurrency(assetTrans.AssetId, _assetDisposalTransDate, assetTrans.BookId);
                totalAlreadyPostedDepreciation = AssetTrans::amountReportingCurrencyPerDateTransTypes(
                assetTrans.AssetId,
                assetTrans.BookId,
                [AssetTransType::Depreciation, AssetTransType::DepreciationAdj,
                AssetTransType::ExtraordinaryDepreciation, AssetTransType::BonusDepreciation],
                dateNull(),
                maxDate());
            }
            else
            {
                amountToDepreciate = AssetTrans::amountToDepriciate(assetTrans.AssetId, _assetDisposalTransDate, assetTrans.BookId);
                totalAlreadyPostedDepreciation = AssetTrans::amountMSTPerDateTransTypes(
                    assetTrans.AssetId,
                    assetTrans.BookId,
                    [AssetTransType::Depreciation, AssetTransType::DepreciationAdj,
                    AssetTransType::ExtraordinaryDepreciation, AssetTransType::BonusDepreciation],
                    dateNull(),
                    maxDate());
            }

            AmountMST remainingDepreciableNetBookValue;

            if (_isReportingCurrency)
            {
                remainingDepreciableNetBookValue = amountToDepreciate + totalAlreadyPostedDepreciation - _assetBook.getNetBookValueRestReporting(assetBookTable);
            }
            else
            {
                remainingDepreciableNetBookValue = amountToDepreciate + totalAlreadyPostedDepreciation - _assetBook.getNetBookValueRest(assetBookTable);
            }

            if (_assetBook.getAcquisitionAmountSign() * -adjustedDepreciation > _assetBook.getAcquisitionAmountSign() * remainingDepreciableNetBookValue)
            {
                adjustedDepreciation = -remainingDepreciableNetBookValue;
            }
        }

        return adjustedDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherToExclude</Name>
				<Source><![CDATA[
    private Voucher getVoucherToExclude()
    {
        Voucher voucher = assetTrans.Voucher;

        if (isOneVoucherFeatureEnabled
            && depreciationAdjVoucher)
        {
            voucher = depreciationAdjVoucher;
        }

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNetBookAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates Net Book Value amount.
    /// </summary>
    /// <returns>
    /// Net book value amount.
    /// </returns>
    protected AssetAmount calculateNetBookAmount()
    {
        AssetAmount returnValue;

        returnValue = this.postValue(AssetPostValue::NBV);

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNetBookAmountReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates Net Book Value amount in reporting currency.
    /// </summary>
    /// <returns>
    /// Net book value amount.
    /// </returns>
    protected AssetAmount calculateNetBookAmountReportingCurrency()
    {
        AssetAmount returnValue;

        returnValue = this.postValueByCurrency(AssetPostValue::NBV, true);

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateProfitLossAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a profit or loss associated with the disposal
    /// </summary>
    /// <returns>
    /// The amount of the profit or loss.
    /// </returns>
    protected AssetAmount calculateProfitLossAmount()
    {
        return this.calculateProfitLossAmountByCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateProfitLossAmountByCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a profit or loss associated with the disposal
    /// </summary>
    /// <param name = "_isReporting">If true, calculates the values based on reporting currency, otherwise, accounting currency</param>
    /// <returns>
    /// The amount of the profit or loss.
    /// </returns>
    protected AssetAmount calculateProfitLossAmountByCurrency(boolean _isReporting = false)
    {
        AssetAmount profitLossAmount;
        if (this.parmIsCreditNote())
        {
            if (_isReporting)
            {
                profitLossAmount =  assetSumAllYearsReportingCurrency.profitLossValue();
            }
            else
            {
                profitLossAmount =  assetSumAllYears.profitLossValue();
            }
        }
        else
        {
            if (_isReporting)
            {
                profitLossAmount = -assetSumAllYearsReportingCurrency.netBookValue() - assetTrans.ReportingCurrencyAmount;
            }
            else
            {
                profitLossAmount = -assetSumAllYears.netBookValue() - assetTrans.AmountMST;
            }
        }
        return profitLossAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHalfDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks if the depreciation method is Accelerated or Regular CZ method and also checks if the accural is Yearly.
    ///   If yes returns true else false.
    /// </summary>
    /// <param name="_assetBook">
    /// An <c>AssetBook</c> table buffer.
    /// </param>
    /// <returns>
    ///   Returns true or false
    /// </returns>
    protected boolean checkHalfDepreciation(AssetBook _assetBook)
    {
        return isCzechContext &&
            _assetBook.depreciationProfile().Accrual == AssetAccrual::Yearly &&
            (_assetBook.depreciationProfile().Method == AssetDepreciationMethod::Accelerated_CZ ||
            _assetBook.depreciationProfile().Method == AssetDepreciationMethod::Regular_CZ);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDeprAdjustmentsWithAutoPostingOfDisposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates depreciation adjustments for the asset books which have automatic posting
    /// enabled and do not allow posting to general ledger.
    /// </summary>
    /// <param name = "_assetTrans">The assetTrans record.</param>
    public void createDeprAdjustmentsWithAutoPostingOfDisposal(AssetTrans _assetTrans)
    {
        AssetBook assetBook = assetTrans.assetBook();
        AssetBookTable assetBookTable = assetBook.assetBookTable();

        // Create depreciation adjustments with automatic posting of disposal
        if (this.isAutoCreateDepreciationAdjustments(assetBook)
            && !assetBookTable.postToGeneralLedger())
        {
            this.postDepreciation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAssetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>AssetTrans</c> transactions related to the asset disposal process.
    /// </summary>
    /// <param name="_exchRate">
    /// Primary exchange rate value.
    /// </param>
    /// <param name="_exchRateSecond">
    /// Secondary exchange rage value.
    /// </param>
    /// <remarks>
    /// The _triangulation parameter was removed in the AX2012 R2 release as it is no longer needed.
    /// </remarks>
    public void createAssetTrans(
        ExchRate _exchRate,
        ExchrateSecondary _exchRateSecond)

    {
        AssetTable assetTable;
        AmountMST profitLossAmount;
        AmountMST profitLossAmountReportingCurrency;
        AssetReserveType assetReserveType;
        CurrencyExchangeHelper exchangeRateHelper;
        LedgerVoucherTransObject ledgerVoucherTransObject;
        LedgerVoucherObject ledgerVoucherObject;
        LedgerVoucherObject originalLedgerVoucherObject;
        LedgerDimensionAccount mergedLedgerDimension;
        LedgerDimensionDefaultAccount mergedOffsetLedgerDimension;
        CurrentOperationsTax postingLayer;
        TransDate exchangeRateDate;

        // <GCN>
       
         isDepreciationPolicyEnabled = AssetParameters::isDepreciationPolicyEnabled();
        // </GCN>

        // <GEEPL>
        AssetDisposalParameters assetDisposalParameters;
        AssetGroupId assetGroupId;
        AssetPostType assetPostType;
        AssetSoldScrap soldScrap;

        AssetBook assetBook = assetTrans.assetBook();
        AssetBookTable assetBookTable = assetBook.assetBookTable();

        this.createDeprAdjustmentsWithAutoPostingOfDisposal(assetTrans);

        if (isPolishContext)
        {
            if ((assetTrans.AmountMST + (assetSumAllYears.netBookValue())) < 0)
            {
                assetPostType = AssetPostType::Positive;
            }
            else
            {
                assetPostType = AssetPostType::Negative;
            }

            soldScrap = this.determineAssetSoldScrap();

            assetGroupId = AssetTable::find(assetTrans.AssetId).AssetGroup;

            select firstOnly RecId from assetDisposalParameters
                where assetDisposalParameters.PostValue == AssetPostValue::NBV &&
                    assetDisposalParameters.SoldScrap == soldScrap &&
                    assetDisposalParameters.PostingProfile == assetTrans.PostingProfile &&
                    assetDisposalParameters.BookId == assetTrans.BookId &&
                    (assetDisposalParameters.ValueType == assetPostType ||
                    assetDisposalParameters.ValueType == AssetPostType::All) &&
                    ((assetDisposalParameters.AssetCode == TableGroupAll::Table &&
                    assetDisposalParameters.AssetRelation == assetTrans.AssetId) ||
                    (assetDisposalParameters.AssetCode == TableGroupAll::GroupId &&
                    assetDisposalParameters.AssetRelation == assetGroupId) ||
                    assetDisposalParameters.AssetCode == TableGroupAll::All);
        }
        // </GEEPL>

        // Modified the code to create transaction at the of asset disposal.
        // Profit/Loss
        profitLossAmount = this.calculateProfitLossAmount();
        profitLossAmountReportingCurrency = this.calculateProfitLossAmountByCurrency(true);

        //Only allow posting of profit for low value pools
        if ((AssetPost_LowValuePoolFlight::instance().isEnabled() 
             || !AssetBook::isLowValuePoolBook(assetTrans.BookId))
             || profitLossAmount > 0 
             || profitLossAmountReportingCurrency > 0)
        {
            // <GCN>
            // <GEEPL>
            if ((!isPolishContext || assetDisposalParameters || !assetBookTable.postToGeneralLedger()) && isDepreciationPolicyEnabled == false)
            {
            // </GCN>
            // </GEEPL>
                this.insertAssetTransV2(this.calculateNetBookAmount(), AssetTransType::NetBookValue, 
                    this.calculateNetBookAmountReportingCurrency());
            // <GCN>
            }
            // </GCN>

            assetReserveType = AssetReserveType::find(assetBook.ReserveTypeId);

            // <GCN>
            if (isDepreciationPolicyEnabled
                && AssetBookTable::find(assetBook.BookId).IsDeprecateInDisposal_CN)
            {
                this.createAssetTransPriorDisposal_CN(assetTrans, assetBook);
                this.initAssetSumValue_CN(); // Reset to calculate the profitLossAmount.
                this.insertAssetTransV2(assetSumAllYears.netBookValue(), AssetTransType::NetBookValue, assetSumAllYearsReportingCurrency.netBookValue());
                profitLossAmount = -assetSumAllYears.netBookValue() - assetTrans.AmountMST;
                profitLossAmountReportingCurrency = -assetSumAllYearsReportingCurrency.netBookValue() - assetTrans.ReportingCurrencyAmount;
            }
            // </GCN>

            if (assetTrans.TransType == AssetTransType::DisposalSale &&
                assetBook.ReserveTypeId &&
                profitLossAmount > 0 &&
                assetBook.lifeTimeMonth(assetTrans.TransDate) >= assetReserveType.LifeTime)
            {
                this.insertAssetTransV2(profitLossAmount, AssetTransType::CapitalReserve, profitLossAmountReportingCurrency);

                if (assetBookTable.postToGeneralLedger()
                    && !assetBook.IsDerogatoryBook_FR)
                {
                    assetTable = AssetTable::find(assetTrans.AssetId);

                    ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

                    postingLayer = AssetBookTable::find(assetTrans.BookId).CurrentOperationsTax;
                    if (ledgerVoucherObject.parmPostingLayer() != postingLayer)
                    {
                        // save the original
                        originalLedgerVoucherObject = ledgerVoucherObject;

                        // search for a posting voucher for the posting layer
                        ledgerVoucherObject = ledgerVoucher.findReference(
                            originalLedgerVoucherObject.parmSubledgerVoucher(),
                            originalLedgerVoucherObject.parmAccountingDate(),
                            postingLayer);

                        if (ledgerVoucherObject == null)
                        {
                            // create a new posting voucher for the posting layer
                            ledgerVoucherObject = LedgerVoucherObject::newReference(
                                originalLedgerVoucherObject.parmSubledgerVoucher(),
                                originalLedgerVoucherObject.parmAccountingDate(),
                                originalLedgerVoucherObject.parmSysModule());

                            ledgerVoucherObject.parmPostingLayer(postingLayer);
                            ledgerVoucher.addVoucher(ledgerVoucherObject);
                        }
                    }

                    exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(
                        Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                        ledgerVoucherObject.parmAccountingDate());
                    exchangeRateHelper.parmExchangeRate1(_exchRate);
                    exchangeRateHelper.parmExchangeRate2(_exchRateSecond);

                    mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                        assetTable.assetLedgerDimension(assetTrans.PostingProfile, assetTrans.TransType, assetTrans.BookId), 
                        assetTrans.DefaultDimension);

                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                        ledgerVoucherObject,
                        (profitLossAmount > 0 ? any2Enum(LedgerPostingType::FixedAssetsDebit) : any2Enum(LedgerPostingType::FixedAssetsCredit)),
                        mergedLedgerDimension,
                        assetTrans.CurrencyCode,
                        profitLossAmount,
                        exchangeRateHelper);

                    ledgerVoucherTransObject.parmSourceTableId(assetTrans.TableId);
                    ledgerVoucherTransObject.parmSourceRecId(assetTrans.RecId);
                    ledgerVoucherTransObject.parmText(assetTrans.Txt);
                    exchangeRateDate = AssetBook::find(assetTrans.AssetId, assetTrans.BookId).exchangeRateDate();
                    ledgerVoucherTransObject.parmHistoricalExchangeRateDate(exchangeRateDate? exchangeRateDate : assetTrans.TransDate);
                    ledgerVoucherTransObject.parmReasonRefRecID(assetTrans.ReasonRefRecId);
                    ledgerVoucherTransObject.parmPaymentReference(assetTrans.PaymReference);

                    this.addTransIntoLedgerVoucher(ledgerVoucherTransObject, ledgerVoucherObject);

                    mergedOffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                        assetTable.assetOffsetLedgerDimension(assetTrans.PostingProfile, assetTrans.TransType, assetTrans.BookId), 
                        assetTrans.DefaultDimension);

                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                        ledgerVoucherObject,
                        (-profitLossAmount > 0 ? any2Enum(LedgerPostingType::FixedAssetsDebit) : any2Enum(LedgerPostingType::FixedAssetsCredit)),
                        mergedOffsetLedgerDimension,
                        assetTrans.CurrencyCode,
                        -profitLossAmount,
                        exchangeRateHelper);

                    ledgerVoucherTransObject.parmSourceTableId(assetTrans.TableId);
                    ledgerVoucherTransObject.parmSourceRecId(assetTrans.RecId);
                    ledgerVoucherTransObject.parmText(assetTrans.Txt);
                    ledgerVoucherTransObject.parmReasonRefRecID(assetTrans.ReasonRefRecId);
                    ledgerVoucherTransObject.parmPaymentReference(assetTrans.PaymReference);

                    this.addTransIntoLedgerVoucher(ledgerVoucherTransObject, ledgerVoucherObject);

                    // <GEERU>
                    ledgerVoucher.bondLast2_RU();
                    // </GEERU>

                    mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                        assetTable.assetLedgerDimension(assetTrans.PostingProfile, AssetTransType::CapitalReserve, assetTrans.BookId), 
                        assetTrans.DefaultDimension);

                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                        ledgerVoucherObject,
                        (profitLossAmount > 0 ? any2Enum(LedgerPostingType::FixedAssetsDebit) : any2Enum(LedgerPostingType::FixedAssetsCredit)),
                        mergedLedgerDimension,
                        assetTrans.CurrencyCode,
                        -profitLossAmount,
                        exchangeRateHelper);

                    ledgerVoucherTransObject.parmSourceTableId(assetTrans.TableId);
                    ledgerVoucherTransObject.parmSourceRecId(assetTrans.RecId);
                    ledgerVoucherTransObject.parmText(assetTrans.Txt);
                    ledgerVoucherTransObject.parmHistoricalExchangeRateDate(exchangeRateDate? exchangeRateDate : assetTrans.TransDate);
                    ledgerVoucherTransObject.parmReasonRefRecID(assetTrans.ReasonRefRecId);
                    ledgerVoucherTransObject.parmPaymentReference(assetTrans.PaymReference);

                    this.addTransIntoLedgerVoucher(ledgerVoucherTransObject, ledgerVoucherObject);
                    
                    mergedOffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                        assetTable.assetOffsetLedgerDimension(assetTrans.PostingProfile, AssetTransType::CapitalReserve, assetTrans.BookId),
                        assetTrans.DefaultDimension);

                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                        ledgerVoucherObject,
                        (-profitLossAmount > 0 ? any2Enum(LedgerPostingType::FixedAssetsDebit) : any2Enum(LedgerPostingType::FixedAssetsCredit)),
                        mergedOffsetLedgerDimension,
                        assetTrans.CurrencyCode,
                        profitLossAmount,
                        exchangeRateHelper);

                    ledgerVoucherTransObject.parmSourceTableId(assetTrans.TableId);
                    ledgerVoucherTransObject.parmSourceRecId(assetTrans.RecId);
                    ledgerVoucherTransObject.parmText(assetTrans.Txt);
                    ledgerVoucherTransObject.parmReasonRefRecID(assetTrans.ReasonRefRecId);
                    ledgerVoucherTransObject.parmPaymentReference(assetTrans.PaymReference);

                    this.addTransIntoLedgerVoucher(ledgerVoucherTransObject, ledgerVoucherObject);

                    // <GEERU>
                    ledgerVoucher.bondLast2_RU();
                    // </GEERU>

                    if (originalLedgerVoucherObject != null)
                    {
                        // change back to the original posting voucher
                        ledgerVoucherObject = ledgerVoucher.findReference(
                        originalLedgerVoucherObject.parmSubledgerVoucher(),
                        originalLedgerVoucherObject.parmAccountingDate(),
                        originalLedgerVoucherObject.parmPostingLayer());

                        Debug::assert(ledgerVoucherObject != null);
                        originalLedgerVoucherObject = null;
                    }
                }
            }
            else
            {
                if (profitLossAmount == 0 &&
                    profitLossAmountReportingCurrency != 0 &&
                    (assetTrans.TransType == AssetTransType::DisposalSale ||
                    assetTrans.TransType == AssetTransType::DisposalScrap))
                {
                    assetTrans.ReportingCurrencyAmount += profitLossAmountReportingCurrency;
                }

                this.insertAssetTransV2(profitLossAmount, AssetTransType::ProfitLoss, profitLossAmountReportingCurrency);
                // <GEEEE>
                // <GEELT>
                // When the country is EE/LT and the transaction is a credit note for the original sale,
                // we need to reverse the net book value posting.
                if (this.parmIsCreditNote()
                   && !isDepreciationPolicyEnabled
                   && (AssetBook::isLowValuePoolBook(assetTrans.BookId) || !AssetPost_LowValuePoolFlight::instance().isEnabled()))
                {
                    this.insertAssetTransV2(-profitLossAmount + assetTrans.AmountMST, AssetTransType::NetBookValue,
                        -profitLossAmountReportingCurrency + assetTrans.ReportingCurrencyAmount);
                }
                // </GEELT>
                // </GEEEE>
            }

            this.createSummaryAssetTrans();
        }

        // <GIN>
        if (AssetParameters::isDepreciationIncomeTaxActEnable_IN()
            && assetBook.AssetGroupDepreciation_IN)
        {
            assetGroupTransNew.data(assetGroupTrans);

            assetGroupInformation.CurrencyCode = CompanyInfoHelper::standardCurrency();

            this.insertGroupTrans_IN(-assetSumPriorYears.acquisitionValue(), AssetTransType::AcqPriorYears);
            this.insertGroupTrans_IN(-assetSumPriorYears.acquisitionAdjValue(), AssetTransType::AcqAdjPriorYears);
            this.insertGroupTrans_IN(-assetSumPriorYears.revaluationValue(), AssetTransType::RevaluePriorYears);
            this.insertGroupTrans_IN(-assetSumPriorYears.writeUpAdjValue(), AssetTransType::WriteUpAdjPriorYears);
            this.insertGroupTrans_IN(-assetSumPriorYears.writeDownAdjValue(), AssetTransType::WriteDownAdjPriorYears);
            this.insertGroupTrans_IN(-assetSumPriorYears.extraDepreciationValue(), AssetTransType::ExtraDepPriorYears);

            this.insertGroupTrans_IN(-(assetSumAllYears.acquisitionValue() - assetSumPriorYears.acquisitionValue()), AssetTransType::AcqThisYear);
            this.insertGroupTrans_IN(-(assetSumAllYears.acquisitionAdjValue() - assetSumPriorYears.acquisitionAdjValue()), AssetTransType::AcqAdjThisYear);
            this.insertGroupTrans_IN(-(assetSumAllYears.revaluationValue() - assetSumPriorYears.revaluationValue()), AssetTransType::RevalueThisYear);
            this.insertGroupTrans_IN(-(assetSumAllYears.writeUpAdjValue() - assetSumPriorYears.writeUpAdjValue()), AssetTransType::WriteUpAdjThisYear);
            this.insertGroupTrans_IN(-(assetSumAllYears.writeDownAdjValue() - assetSumPriorYears.writeDownAdjValue()), AssetTransType::WriteDownAdjThisYear);
            this.insertGroupTrans_IN(-(assetSumAllYears.extraDepreciationValue() - assetSumPriorYears.extraDepreciationValue()), AssetTransType::ExtraDepThisYear);
            this.insertGroupTrans_IN(-(assetSumAllYears.bonusDepreciationValue() - assetSumPriorYears.bonusDepreciationValue()), AssetTransType::BonusDepThisYear);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineAssetSoldScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the <c>AssetSoldScrap</c>.
    /// </summary>
    /// <returns>
    /// The asset sold scrap value.
    /// </returns>
    protected AssetSoldScrap determineAssetSoldScrap()
    {
        AssetSoldScrap soldScrap;

        if (assetTrans.TransType == AssetTransType::DisposalSale)
        {
            soldScrap = AssetSoldScrap::Sold;
        }
        else
        {
            soldScrap = AssetSoldScrap::Scrap;
        }

        return soldScrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAssetTransPriorDisposal_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the depreciation transaction automatically when the parameter of "Depreciation fully when disposal" is set.
    /// </summary>
    /// <param name="_assetTransNew">
    /// the original disposal transaction.
    /// </param>
    /// <param name="_assetBook">
    /// the asset book.
    /// </param>
    public void createAssetTransPriorDisposal_CN(
        AssetTrans _assetTransNew,
        AssetBook _assetBook)
    {
        AssetTableMethod assetTableMethodPrimary;
        AssetTableMethod assetTableMethodSecondary;
        AmountMST amountMSTPrimary;
        AmountMST amountMSTSecondary;

        AssetDepreciationProfile assetDepreciationProfile;

        ttsbegin;
        assetBookDisposal.data(_assetBook);
        assetTransDisposal.data(_assetTransNew);

        assetDepreciationProfile = assetBookDisposal.depreciationAltProfile();
        //dual depreciation
        if (assetDepreciationProfile.RecId != 0
            && assetDepreciationProfile.Method != AssetDepreciationMethod::Consumption)
        {
            assetTableMethodPrimary = AssetTableMethod::construct(assetBookDisposal, endmth(assetTrans.TransDate), '', true);
            assetTableMethodSecondary = AssetTableMethod::construct(assetBookDisposal, endmth(assetTrans.TransDate), '', true, true);
            if (assetTableMethodPrimary
                && assetTableMethodSecondary)
            {
                while (assetTableMethodPrimary.next()
                        && assetTableMethodSecondary.next())
                {
                    amountMSTPrimary = -(assetTableMethodPrimary.calc());
                    amountMSTSecondary = -assetTableMethodSecondary.calc();
                    if (abs(amountMSTPrimary) > abs(amountMSTSecondary))
                    {
                        this.insertAssetTransPriorDisposal_CN(amountMSTPrimary, AssetTransType::Depreciation);
                    }
                    else
                    {
                        this.insertAssetTransPriorDisposal_CN(amountMSTSecondary, AssetTransType::Depreciation);
                    }
                }
            }
        }
        else  //mono depreciation
        {
            assetTableMethodPrimary = AssetTableMethod::construct(assetBookDisposal, endmth(assetTrans.TransDate));
            if (assetTableMethodPrimary)
            {
                while (assetTableMethodPrimary.next())
                {
                    amountMSTPrimary = -assetTableMethodPrimary.calc();
                    if (amountMSTPrimary)
                    {
                        this.insertAssetTransPriorDisposal_CN(amountMSTPrimary, AssetTransType::Depreciation);
                    }
                }
            }
        }

        this.updateDepreciationDate_CN(assetTransDisposal.TransDate);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSummaryAssetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>AssetTrans</c> records for available asset transactions of the this year and prior years for disposal.
    /// </summary>
    protected void createSummaryAssetTrans()
    {
        // Prior years
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::AcqPriorYears), AssetTransType::AcqPriorYears,
                                       -this.postValueByCurrency(AssetPostValue::AcqPriorYears, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::AcqAdjPriorYears), AssetTransType::AcqAdjPriorYears,
                                       -this.postValueByCurrency(AssetPostValue::AcqAdjPriorYears, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::DepPriorYears), AssetTransType::DepPriorYears,
                                       -this.postValueByCurrency(AssetPostValue::DepPriorYears, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::DepAdjPriorYears), AssetTransType::DepAdjPriorYears,
                                       -this.postValueByCurrency(AssetPostValue::DepAdjPriorYears, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::RevaluePriorYear), AssetTransType::RevaluePriorYears,
                                       -this.postValueByCurrency(AssetPostValue::RevaluePriorYear, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::WriteUpAdjPriorYear), AssetTransType::WriteUpAdjPriorYears,
                                       -this.postValueByCurrency(AssetPostValue::WriteUpAdjPriorYear, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::WriteDownAdjPriorYear), AssetTransType::WriteDownAdjPriorYears,
                                       -this.postValueByCurrency(AssetPostValue::WriteDownAdjPriorYear, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::ExtraDepPriorYears), AssetTransType::ExtraDepPriorYears,
                                       -this.postValueByCurrency(AssetPostValue::ExtraDepPriorYears, true));

        //
        // This years value is the difference between all year and prior years.
        // Can't use the assetSumCalc "This year" because this doesn't include transactions
        // that are in year beyond the disposal year, and these need to be included.
        //
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::AcqThisYear), AssetTransType::AcqThisYear,
                                       -this.postValueByCurrency(AssetPostValue::AcqThisYear, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::AcqAdjThisYear), AssetTransType::AcqAdjThisYear,
                                       -this.postValueByCurrency(AssetPostValue::AcqAdjThisYear, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::DepThisYear), AssetTransType::DepThisYear,
                                       -this.postValueByCurrency(AssetPostValue::DepThisYear, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::DepAdjThisYear), AssetTransType::DepAdjThisYear,
                                       -this.postValueByCurrency(AssetPostValue::DepAdjThisYear, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::RevalueThisYear), AssetTransType::RevalueThisYear,
                                       -this.postValueByCurrency(AssetPostValue::RevalueThisYear, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::WriteUpAdjThisYear), AssetTransType::WriteUpAdjThisYear,
                                       -this.postValueByCurrency(AssetPostValue::WriteUpAdjThisYear, true));
        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::WriteDownAdjThisYear), AssetTransType::WriteDownAdjThisYear,
                                       -this.postValueByCurrency(AssetPostValue::WriteDownAdjThisYear, true));

        this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::ExtraDepThisYear), AssetTransType::ExtraDepThisYear,
                                       -this.postValueByCurrency(AssetPostValue::ExtraDepThisYear, true));

        this.insertSummaryAssetTransV2(-(assetSumAllYears.bonusDepreciationValue() - assetSumPriorYears.bonusDepreciationValue()), AssetTransType::BonusDepThisYear, 
                                       -(assetSumAllYearsReportingCurrency.bonusDepreciationValue() - assetSumPriorYearsReportingCurrency.bonusDepreciationValue()));
        // <GIN>
        if (!isIsoIN)
        {
        // </GIN>
            this.insertSummaryAssetTransV2(-assetSumPriorYears.bonusDepreciationValue(), AssetTransType::BonusDepPriorYears, -assetSumPriorYearsReportingCurrency.bonusDepreciationValue());
        // <GIN>
        }
        // </GIN>

        // French Derogatory depreciation information
        if (isFrenchContext)
        {
            this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::DerogatoryDecreaseAllYears), AssetTransType::DerogatoryDecreaseAllYears,
                                           -this.postValueByCurrency(AssetPostValue::DerogatoryDecreaseAllYears, true));
            this.insertSummaryAssetTransV2(-this.postValue(AssetPostValue::DerogatoryIncreaseAllYears), AssetTransType::DerogatoryIncreaseAllYears,
                                           -this.postValueByCurrency(AssetPostValue::DerogatoryIncreaseAllYears, true));
        }
        // <GJP>
        if (isAssetDocumentEnabled_JP)
        {
            this.createSummaryAssetTrans_JP();
        }
        // </GJP>
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSummaryAssetTrans_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>AssetTrans</c> records for available asset transactions of the this year and prior years for disposal with
    /// Japan fixed asset document framework.
    /// </summary>
    protected void createSummaryAssetTrans_JP()
    {
        AssetDocumentEntry_JP documentEntryLoc;
        AssetDocumentEntry_JP documentEntryAssetLoc;
        AssetDocumentTable_JP documentTableLoc;
        AssetAmount assetAmountLoc;
        AssetAmount assetAmountReportingCurrencyLoc;
        AssetTransType assetTransTypeLoc;
        AssetPostValue assetPostValueLoc;
        container conTransTypesLoc;
        counter counterLoc;

        while select RecId, Type from documentTableLoc
            exists join documentEntryLoc
                where documentTableLoc.RecId == documentEntryLoc.AssetDocumentTable_JP
                    && documentEntryLoc.AssetId == assetTrans.AssetId
                    && documentEntryLoc.BookId == assetTrans.BookId
        {
            conTransTypesLoc = AssetDocumentUtility_JP::getDisposalPostValueByDocument(documentTableLoc.Type);
            for (counterLoc = conLen(conTransTypesLoc); counterLoc > 0; counterLoc--)
            {
                // get related post value and transaction types.
                assetPostValueLoc = conPeek(conTransTypesLoc,counterLoc);
                assetTransTypeLoc = AssetDocumentUtility_JP::assetPostValue2AssetTransType(assetPostValueLoc);

                // get first documeng entry to generate asset transaction.
                select firstonly RecId from documentEntryAssetLoc
                    where documentEntryAssetLoc.AssetDocumentTable_JP == documentTableLoc.RecId
                        && documentEntryAssetLoc.AssetId == assetTrans.AssetId
                        && documentEntryAssetLoc.BookId == assetTrans.BookId;

                // get document amount
                assetAmountLoc = -this.postValue_JP(assetPostValueLoc, documentTableLoc.Type);
                assetAmountReportingCurrencyLoc = -this.postValueByCurrency_JP(assetPostValueLoc, documentTableLoc.Type, true);

                // generate transaction
                this.insertAssetTransWithDocument_JPV2(assetAmountLoc, assetTransTypeLoc, documentEntryAssetLoc.RecId, assetAmountReportingCurrencyLoc);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNBVOffsetAccount_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets NBV offset account.
    /// </summary>
    /// <returns>
    /// NBV offset account.
    /// </returns>
    public LedgerDimensionDefaultAccount getNBVOffsetAccount_JP()
    {
        return NBVOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAssetSumValue_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init sum calculation value
    /// </summary>
    public void initAssetSumValue_CN()
    {
        assetSumPriorYears = AssetSumCalc_Trans::newAssetYear(assetTrans.AssetId, assetTrans.BookId, assetTrans.TransDate, AssetYear::PriorYears);
        assetSumPriorYearsReportingCurrency = AssetSumCalc_Trans::newAssetYearByCurrency(assetTrans.AssetId, assetTrans.BookId, assetTrans.TransDate, AssetYear::PriorYears, AssetSumCalcType::Reporting);
        assetSumAllYears = AssetSumCalc_Trans::newAssetYear(assetTrans.AssetId, assetTrans.BookId, assetTrans.TransDate, AssetYear::All);
        assetSumAllYearsReportingCurrency = AssetSumCalc_Trans::newAssetYearByCurrency(assetTrans.AssetId, assetTrans.BookId, assetTrans.TransDate, AssetYear::All, AssetSumCalcType::Reporting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>AssetTrans</c> transaction.
    /// </summary>
    /// <param name="_assetAmount">
    /// Transaction amount of the asset transaction.
    /// </param>
    /// <param name="_assetTransType">
    /// Transaction type of the asset transaction.
    /// </param>
    [SysObsolete('Method insertAssetTrans has been deprecated. Please use insertAssetTransV2 method instead.', true, 30\06\2018)]
    public void insertAssetTrans(
        AssetAmount      _assetAmount,
        AssetTransType   _assetTransType)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetTransV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>AssetTrans</c> transaction.
    /// </summary>
    /// <param name="_assetAmount">
    /// Transaction amount of the asset transaction.
    /// </param> 
    /// <param name="_assetTransType">
    /// Transaction type of the asset transaction.
    /// </param>
    /// <param name="_assetAmountReporting">
    /// Reporting amount of the asset transaction.
    /// </param>
    public void insertAssetTransV2(
        AssetAmount _assetAmount,
        AssetTransType _assetTransType,
        AssetAmount _assetAmountReporting = 0)
    {
        AssetAmount assetAmount = _assetAmount;
        AssetParameters assetParameters = AssetParameters::find();

        if (_assetAmount || (_assetAmountReporting && _assetTransType == AssetTransType::ProfitLoss))
        {
            AssetTrans assetTransNew = this.populateNewAssetTrans(assetTrans, _assetTransType);

            assetBookTableForInsertTrans = this.getAssetBookTableForInsertTrans(assetTransNew.BookId);
            
            container postValueType = [
            AssetTransType::DepreciationAdj,
            AssetTransType::Acquisition,
            AssetTransType::AcqThisYear,
            AssetTransType::AcqPriorYears];

            if (conFind(postValueType, _assetTransType) == 0
                && assetBookTableForInsertTrans.CurrentOperationsTax != CurrentOperationsTax::None
                && !assetBookTableForInsertTrans.IsDerogatoryBook_FR
                && assetParameters.PostDisposalTransactionsInDetail == NoYes::Yes)
            {
                this.validateAssetPostValue(
                _assetTransType,
                assetTransNew.AssetId,
                assetTransNew.BookId,
                assetTransNew.PostingProfile,
                assetTransNew.AmountMST);
            }


            if (this.parmIsCreditNote())
            {
                assetAmount = -assetAmount;
            }
            assetTransNew.AmountMST = assetAmount;
            assetTransNew.AmountCur = assetTransNew.AmountMST;
            assetTransNew.ReportingCurrencyAmount = this.getAssetTransReportingCurrencyAmount(
                assetAmount,
                _assetAmountReporting,
                _assetTransType,
                assetTransNew);

            assetTransNew.insert();

            if ((_assetTransType == AssetTransType::DepreciationAdj) && (!isDerivedBookPosting))
            {
                assetReversalRelatedVoucherManager = AssetReversalRelatedVoucherManager::construct();
                assetReversalRelatedVoucherManager.addReversalRelatedVouchers(assetTrans.Voucher, assetTransNew.Voucher, assetTrans.TransDate);

                AssetInstrumentationLogger::createLogger(AssetInstrumentationConstants::AssetOneVoucherFeatureLog)
                    .logOneVoucherScenario(
                        AssetInstrumentationConstants::DisposalWithDepreciationAdj,
                        isOneVoucherFeatureEnabled);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTransReportingCurrencyAmount</Name>
				<Source><![CDATA[
    private Amount getAssetTransReportingCurrencyAmount(
        Amount _assetAmount,
        Amount _assetAmountReporting,
        AssetTransType _assetTransType,
        AssetTrans _assetTrans)
    {
        Amount reportingCurrencyamount;

        if (_assetAmountReporting)
        {
            if (_assetAmount == 0 && _assetTransType == AssetTransType::ProfitLoss)
            {
                reportingCurrencyamount = 0;
            }
            else
            {
                reportingCurrencyamount = _assetAmountReporting;
            }
        }
        else
        {
            if (_assetTransType == AssetTransType::ProfitLoss)
            {
                reportingCurrencyamount = _assetAmountReporting;
            }
            else if (Ledger::reportingCurrency())
            {
                CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), _assetTrans.TransDate);
                reportingCurrencyamount = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(_assetTrans.CurrencyCode, _assetTrans.AmountCur, true);
            }
        }

        return reportingCurrencyamount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    private Voucher getVoucher(AssetTrans _assetTrans)
    {
        Voucher voucher = _assetTrans.Voucher;

        if (_assetTrans.TransType == AssetTransType::DepreciationAdj
            && this.isJournalDisposalScenario()
            && !isDerivedBookPosting)
        {
            voucher = depreciationAdjVoucher;
        }

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalDisposalScenario</Name>
				<Source><![CDATA[
    private boolean isJournalDisposalScenario()
    {
        return ledgerJournalTransRecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetTransPriorDisposal_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// insert depreciation transaction to table AssetTrans
    /// </summary>
    /// <param name="_assetAmount">
    /// Asset transaction amount
    /// </param>
    /// <param name="_assetTransType">
    /// Asset transaction type
    /// </param>
    private void insertAssetTransPriorDisposal_CN(
        AssetAmount _assetAmount,
        AssetTransType _assetTransType)
    {
        if (_assetAmount)
        {
            assetTransDisposal.TransType = _assetTransType;
            assetTransDisposal.AmountMST = _assetAmount;
            assetTransDisposal.AmountCur = _assetAmount;
            assetTransDisposal.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetTransWithDocument_JPV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>AssetTrans</c> transaction with related Japan fixed asset document transaction.
    /// </summary>
    /// <param name="_assetAmount">
    /// Transaction amount of the asset transaction.
    /// </param>
    /// <param name="_assetTransType">
    /// Transaction type of the asset transaction.
    /// </param>
    /// <param name="_assetDocumentEntryRecId">
    /// Asset document entry recid.
    /// </param>
    /// <param name="_assetAmountReportingCurrency">
    /// Optional, amount in reporting currency.
    /// </param>
    public void insertAssetTransWithDocument_JPV2(
        AssetAmount _assetAmount,
        AssetTransType _assetTransType,
        RecId _assetDocumentEntryRecId,
        AssetAmountReportingCurrency _assetAmountReportingCurrency = 0)
    {
        AssetTrans assetTransLoc;
        
        if (_assetAmount)
        {
            assetTransLoc.data(assetTrans);
            assetTransLoc.CurrencyCode = Ledger::accountingCurrency();
            assetTransLoc.TransType = _assetTransType;
            assetTransLoc.AmountMST = _assetAmount;
            assetTransLoc.ReportingCurrencyAmount = _assetAmountReportingCurrency;
            assetTransLoc.AmountCur = assetTransLoc.AmountMST;
            assetTransLoc.insert();

            AssetDocumentProcessor_JP::submitAssetDocument(
                _assetDocumentEntryRecId,
                assetTransLoc.TransType,
                assetTransLoc.TableId,
                assetTransLoc.RecId
            );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGroupTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an asset group transaction.
    /// </summary>
    /// <param name="_assetAmount">
    /// The asset amount.
    /// </param>
    /// <param name="_assetTransType">
    /// The asset ransaction type.
    /// </param>
    public void insertGroupTrans_IN(AssetAmount _assetAmount,
        AssetTransType _assetTransType)
    {
            if (_assetAmount)
            {
                assetGroupInformation.TransType = _assetTransType;
                assetGroupInformation.AmountMst = _assetAmount;
                assetGroupInformation.AmountCur = _assetAmount;

                assetGroupInformation.insert();

                assetGroupTransNew.AssetGroupInformation = assetGroupInformation.RecId;
                assetGroupTransNew.insert();
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerTransPriorDisposal_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the depreciation transaction automatically when the parameter of "Depreciation on the month when disposal" is set.
    /// </summary>
    /// <param name="_prevDepDate">
    /// The start date to insert the ledger transaction.
    /// </param>
    /// <param name="_tranDate">
    /// The end date to insert the ledger transaction.
    /// </param>
    /// <returns>
    /// return the auto depreciation amount.
    /// </returns>
    public AssetAmount insertLedgerTransPriorDisposal_CN(
        AssetTransDate _prevDepDate,
        AssetTransDate _tranDate)
    {
        AssetTableMethod assetTableMethodPrimary;
        AssetTableMethod assetTableMethodSecondary;

        AmountCur amountCurPrimary;
        AmountCur amountCurSecondary;
        AssetAmount amountAutoDeprecaition;

        AssetBook assetBook = AssetBook::find(assetTrans.AssetId, assetTrans.BookId);
        AssetTable assetTable = AssetTable::find(assetTrans.AssetId);
        AssetDepreciationProfile assetDepreciationProfile;
        LedgerVoucherTransObject ledgerVoucherTransObject;

        // <GCN>
        LedgerVoucherObject ledgerVoucherObject;
        LedgerDimensionAccount mergedLedgerDimension;
        LedgerDimensionDefaultAccount mergedOffsetLedgerDimension;
        CurrencyExchangeHelper exchangeRateHelper;
        // </GCN>

        CurrencyCode companyCurrency = CompanyInfoHelper::standardCurrency();

        void insertLedgerTrans(AssetAmount _assetAmount)
        {
            if (_assetAmount)
            {
                ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
                exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(
                    Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                    ledgerVoucherObject.parmAccountingDate());

                mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                    assetTable.assetLedgerDimension(assetTrans.PostingProfile, AssetTransType::Depreciation, assetTrans.BookId), 
                    assetTrans.DefaultDimension);

                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucherObject,
                    LedgerPostingType::FixedAssetsDebit,
                    mergedLedgerDimension,
                    assetTrans.CurrencyCode,
                    _assetAmount,
                    exchangeRateHelper);

                ledgerVoucherTransObject.parmSourceTableId(assetTrans.TableId);
                ledgerVoucherTransObject.parmSourceRecId(assetTrans.RecId);
                ledgerVoucherTransObject.parmText(assetTrans.Txt);
                this.addTransIntoLedgerVoucher(ledgerVoucherTransObject, ledgerVoucherObject);

                mergedOffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                    assetTable.assetOffsetLedgerDimension(assetTrans.PostingProfile, AssetTransType::Depreciation, assetTrans.BookId), 
                    assetTrans.DefaultDimension);

                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucherObject,
                    LedgerPostingType::FixedAssetsDebit,
                    mergedOffsetLedgerDimension,
                    assetTrans.CurrencyCode,
                    -_assetAmount,
                    exchangeRateHelper);

                ledgerVoucherTransObject.parmSourceTableId(assetTrans.TableId);
                ledgerVoucherTransObject.parmSourceRecId(assetTrans.RecId);
                ledgerVoucherTransObject.parmText(assetTrans.Txt);
                ledgerVoucherTransObject.parmReasonRefRecID(assetTrans.ReasonRefRecId);
                ledgerVoucherTransObject.parmPaymentReference(assetTrans.PaymReference);
                this.addTransIntoLedgerVoucher(ledgerVoucherTransObject, ledgerVoucherObject);
            }
        }

        ttsbegin;

        assetDepreciationProfile = assetBook.depreciationAltProfile();
        //dual depreciation
        if (assetDepreciationProfile.RecId != 0
            && assetDepreciationProfile.Method != AssetDepreciationMethod::Consumption)
        {
            assetTableMethodPrimary     = AssetTableMethod::construct(assetBook, endmth(assetTrans.TransDate), '', true);
            assetTableMethodSecondary   = AssetTableMethod::construct(assetBook, endmth(assetTrans.TransDate), '', true, true);

            if (assetTableMethodPrimary
                && assetTableMethodSecondary)
            {
                while (assetTableMethodPrimary.next()
                        && assetTableMethodSecondary.next())
                {
                    amountCurPrimary = -(assetTableMethodPrimary.calc());
                    amountCurPrimary = CurrencyExchange::round(amountCurPrimary,  assetTrans.CurrencyCode);
                    amountCurSecondary = -assetTableMethodSecondary.calc();
                    amountCurSecondary = CurrencyExchange::round(amountCurSecondary,  assetTrans.CurrencyCode);
                    insertLedgerTrans(amountCurPrimary);
                    if (abs(amountCurPrimary) > abs(amountCurSecondary))
                    {
                        amountAutoDeprecaition += amountCurPrimary;
                    }
                    else
                    {
                        amountAutoDeprecaition += amountCurSecondary;
                    }
                }
            }
        }
        else   //mono depreciation
        {
            assetTableMethodPrimary = AssetTableMethod::construct(assetBook, endmth(assetTrans.TransDate));

            if (assetTableMethodPrimary)
            {
                while (assetTableMethodPrimary.next())
                {
                    amountCurPrimary = -assetTableMethodPrimary.calc();
                    if (amountCurPrimary)
                    {
                        amountCurPrimary = CurrencyExchange::round(amountCurPrimary,  assetTrans.CurrencyCode);
                        insertLedgerTrans(amountCurPrimary);
                        amountAutoDeprecaition += amountCurPrimary;
                    }
                }
            }
        }
        ttscommit;
        return amountAutoDeprecaition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSummaryAssetTransV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes creation of a disposal summary asset transaction.
    /// </summary>
    /// <param name="_assetAmount">
    /// Asset transaction in accounting currency.
    /// </param>
    /// <param name="_assetTransType">
    /// Asset transaction type.
    /// </param>
    /// <param name="_assetAmountReporting">
    /// Asset reporting currency amount.
    /// </param>
    protected void insertSummaryAssetTransV2(
        AssetAmount      _assetAmount,
        AssetTransType   _assetTransType,        
        AssetAmount      _assetAmountReporting = 0)
    {
        this.insertAssetTransV2(_assetAmount, _assetTransType, _assetAmountReporting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValueModelDerivedModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the given asset book and transaction type combination has a derived model.
    /// </summary>
    /// <param name = "_assetBookId">The asset book Id value.</param>
    /// <param name = "_assetTransType">The asset transaction type.</param>
    /// <returns>
    /// Returns true if the asset book is derived model for the mentioned transaction type; otherwise, false; 
    /// </returns>
    protected boolean isValueModelDerivedModel(
        AssetBookId _assetBookId,
        AssetTransType _assetTransType)
    {
        AssetBookTableDerived assetBookTableDerived;

        select firstonly RecId from
            assetBookTableDerived
        where
            assetBookTableDerived.AssetTransType == _assetTransType
            && assetBookTableDerived.BookIdDerived  == _assetBookId;

        return (assetBookTableDerived.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(LedgerVoucher _ledgerVoucher,
             AssetTrans _assetTrans)
    {
        ledgerVoucher = _ledgerVoucher;
        assetTrans = _assetTrans;

        isOneVoucherFeatureEnabled = FeatureStateProvider::isFeatureEnabled(AssetOneVoucherFeature::instance());

        if (!_assetTrans.assetBookTable().postToGeneralLedger())
        {
            assetTrans.DisposalTransaction = NoYes::Yes;
        }
        assetSumPriorYears = AssetSumCalc_Trans::newAssetYear(_assetTrans.AssetId, _assetTrans.BookId, _assetTrans.TransDate, AssetYear::PriorYears);
        assetSumPriorYearsReportingCurrency = AssetSumCalc_Trans::newAssetYearByCurrency(_assetTrans.AssetId, _assetTrans.BookId, _assetTrans.TransDate, AssetYear::PriorYears, AssetSumCalcType::Reporting);
        assetSumAllYears = AssetSumCalc_Trans::newAssetYear(_assetTrans.AssetId, _assetTrans.BookId, _assetTrans.TransDate, AssetYear::All);
        assetSumAllYearsReportingCurrency = AssetSumCalc_Trans::newAssetYearByCurrency(_assetTrans.AssetId, _assetTrans.BookId, _assetTrans.TransDate, AssetYear::All, AssetSumCalcType::Reporting);

        // <GEEEE>
        // <GEELT>
        isCountryRegion_EELT = SysCountryRegionCode::isLegalEntityInCountryRegion([#IsoEE, #IsoLT]);
        // </GEELT>
        // </GEEEE>

        // <GEEPL>
        isPolishContext     = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);
        assetSaleFactor     = 100;
        // </GEEPL>
        // <GEECZ>
        isCzechContext      = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]);
        // </GEECZ>
        // <GEEHU>
        isHungaryContext    = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]);
        // </GEEHU>

        isFrenchContext     = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]);

        // <GJP>
        isAssetDocumentEnabled_JP = AssetDocumentUtility_JP::isAssetDocumentEnabled();
        if (isAssetDocumentEnabled_JP)
        {
            assetDocumentSumPriorYears = AssetDocumentSumCalcUtil_JP::construct(AssetDocumentUtility_JP::getDisposalSummaryTransType());
            assetSumPriorYears.parmIsDocumentAmountSeparate_JP(true);
            assetSumPriorYears.parmDocSumCalcUtil_JP(assetDocumentSumPriorYears);
            AssetDocumentSumCalcUtil_JP assetDocumentSumPriorYearsReportingCurrency = AssetDocumentSumCalcUtil_JP::construct(AssetDocumentUtility_JP::getDisposalSummaryTransType());
            assetSumPriorYearsReportingCurrency.parmIsDocumentAmountSeparate_JP(true);
            assetSumPriorYearsReportingCurrency.parmDocSumCalcUtil_JP(assetDocumentSumPriorYearsReportingCurrency);

            assetDocumentSumAllYears = AssetDocumentSumCalcUtil_JP::construct(AssetDocumentUtility_JP::getDisposalSummaryTransType());
            assetSumAllYears.parmIsDocumentAmountSeparate_JP(true);
            assetSumAllYears.parmDocSumCalcUtil_JP(assetDocumentSumAllYears);
            AssetDocumentSumCalcUtil_JP assetDocumentSumAllYearsReportingCurrency = AssetDocumentSumCalcUtil_JP::construct(AssetDocumentUtility_JP::getDisposalSummaryTransType());
            assetSumAllYearsReportingCurrency.parmIsDocumentAmountSeparate_JP(true);
            assetSumAllYearsReportingCurrency.parmDocSumCalcUtil_JP(assetDocumentSumAllYearsReportingCurrency);
        }
        // </GJP>

        // <GIN>
        isIsoIN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>        
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetGroupTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// The asset group transaction parameter.
    /// </summary>
    /// <param name="_assetGroupTrans">
    /// The asset group transaction information.
    /// </param>
    public void parmAssetGroupTrans_IN(AssetGroupTrans_IN    _assetGroupTrans)
    {
        assetGroupTrans = _assetGroupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetSaleFactor</Name>
				<Source><![CDATA[
    public Percent parmAssetSaleFactor(Percent _percent = assetSaleFactor)
    {
        assetSaleFactor = _percent;
        return assetSaleFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCreditNote</Name>
				<Source><![CDATA[
    public boolean parmIsCreditNote(boolean _isCreditNote = isCreditNote)
    {
        isCreditNote = _isCreditNote;
        return isCreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTransRecId</Name>
				<Source><![CDATA[
    public RefRecId parmLedgerJournalTransRecId(RefRecId _ledgerJournalTransRecId = ledgerJournalTransRecId)
    {
        if (ledgerJournalTransRecId != _ledgerJournalTransRecId)
        {
            select firstonly ledgerJournalTrans
                where ledgerJournalTrans.RecId == _ledgerJournalTransRecId;
        }

        ledgerJournalTransRecId = _ledgerJournalTransRecId;

        return ledgerJournalTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucherTransParametersForPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>AssetPostDisposalVoucherPostingParameters</c> object for posting.
    /// </summary>
    /// <param name = "_assetDisposalParameters">
    /// The asset disposal parameter table record.
    /// </param>
    /// <param name = "_assetTrans">
    /// The asset transaction table record.
    /// </param>
    /// <param name = "_assetAmount">
    /// The asset amount.
    /// </param>
    /// <param name = "_companyCurrency">
    /// The company currency code.
    /// </param>
    /// <param name = "_isCorrection">
    /// The flag for correction.
    /// </param>
    /// <returns>
    /// An instance of <c>AssetPostDisposalVoucherPostingParameters</c> object.
    /// </returns>
    protected AssetPostDisposalVoucherPostingParameters createVoucherTransParametersForPost(
        AssetDisposalParameters _assetDisposalParameters,
        AssetTrans              _assetTrans,
        AssetAmount             _assetAmount,
        CurrencyCode            _companyCurrency,
        boolean                 _isCorrection
        )
    {
        AssetPostDisposalVoucherPostingParameters voucherPostingParameters = AssetPostDisposalVoucherPostingParameters::construct();

        voucherPostingParameters.parmLedgerDimension(_assetDisposalParameters.LedgerDimension);
        voucherPostingParameters.parmOffsetLedgerDimension(_assetDisposalParameters.OffsetLedgerDimension);
        voucherPostingParameters.parmAssetTrans(_assetTrans);
        voucherPostingParameters.parmAssetAmount(_assetAmount);
        voucherPostingParameters.parmCompanyCurrency(_companyCurrency);
        voucherPostingParameters.parmIsCorrection(_isCorrection);

        return voucherPostingParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucherTransParametersForPost_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>AssetPostDisposalVoucherPostingParameters</c> object for Japanese posting.
    /// </summary>
    /// <param name = "_assetDisposalParameters_JP">
    /// The Japanese asset disposal parameter table record.
    /// </param>
    /// <param name = "_assetTrans">
    /// The asset transaction table record.
    /// </param>
    /// <param name = "_assetAmount">
    /// The asset amount.
    /// </param>
    /// <param name = "_companyCurrency">
    /// The company currency code.
    /// </param>
    /// <param name = "_isCorrection">
    /// The flag for correction.
    /// </param>
    /// <returns>
    /// An instance of <c>AssetPostDisposalVoucherPostingParameters</c> object.
    /// </returns>
    protected AssetPostDisposalVoucherPostingParameters createVoucherTransParametersForPost_JP(
        AssetDisposalParameters_JP  _assetDisposalParameters_JP,
        AssetTrans                  _assetTrans,
        AssetAmount                 _assetAmount,
        CurrencyCode                _companyCurrency,
        boolean                     _isCorrection
        )
    {
        AssetPostDisposalVoucherPostingParameters voucherPostingParameters = AssetPostDisposalVoucherPostingParameters::construct();

        voucherPostingParameters.parmLedgerDimension(_assetDisposalParameters_JP.LedgerDimension);
        voucherPostingParameters.parmOffsetLedgerDimension(_assetDisposalParameters_JP.OffsetLedgerDimension);
        voucherPostingParameters.parmAssetTrans(_assetTrans);
        voucherPostingParameters.parmAssetAmount(_assetAmount);
        voucherPostingParameters.parmCompanyCurrency(_companyCurrency);
        voucherPostingParameters.parmIsCorrection(_isCorrection);

        return voucherPostingParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Main posting routine for the asset disposal process.
    /// </summary>
    public void post()
    {
        AssetAmount assetAmount;
        AssetDisposalParameters assetDisposalParameters;
        AssetDisposalParameters l_assetDisposalParameters;
        AssetGroupId assetGroupId;
        AssetPostType assetPostType;
        AssetSoldScrap soldScrap;
        CurrencyCode companyCurrency = CompanyInfoHelper::standardCurrency();
        AssetBook assetBook;
        AssetBookTable assetBookTable;
        CurrencyCode reportingCurrencyCode = Ledger::reportingCurrency();
        AssetParameters assetParameters = AssetParameters::find();
        AssetPostValue assetPostValue;

	    // <GJP>
	    AssetDisposalParameters_JP assetDisposalParameters_JP;
	    AssetDocumentEntry_JP documentEntryLoc;
	    AssetDocumentTable_JP documentTableLoc;
	    AssetPostValue assetPostValueLoc;
	    AssetPostValue_JP assetPostValueLoc_JP;
	    container conPostValueLoc;
	    counter counterLoc;
	    // </GJP>
        // <GCN>
        AssetAmount amountAutoDepreciation;
        boolean isNetBookValue;
        boolean isAutoDepreciation;
        boolean isCorrection;
        boolean isReportingCurrencyLogic = ((companyCurrency != reportingCurrencyCode) && (reportingCurrencyCode != null));
        AssetAmount assetAmountReportingCurrency;

        isDepreciationPolicyEnabled = AssetParameters::isDepreciationPolicyEnabled();
        // </GCN>

        assetBook = AssetBook::find(assetTrans.AssetId, assetTrans.BookId);
        assetBookTable = AssetBookTable::find(assetTrans.BookId);

        AssetCacheManager::removeCacheAssetTrans(assetTrans.AssetId, assetTrans.BookId);

        ttsbegin;

        // Create depreciation adjustments with automatic posting of disposal
        if (this.isAutoCreateDepreciationAdjustments(assetBook))
        {
            this.postDepreciation();
        }

        if ((assetTrans.AmountMST + (assetSumAllYears.netBookValue())) < 0)
        {
            assetPostType = AssetPostType::Positive;
        }
        else
        {
            assetPostType = AssetPostType::Negative;
        }

        soldScrap = this.determineAssetSoldScrap();

        // If the value model is not a derogatory book, verify its disposal parameters.
        if (!isFrenchContext || !assetBookTable.IsDerogatoryBook_FR)
        {
            // Cache the assetGroupId to avoid repeated calls to AssetTable::find.
            assetGroupId = AssetTable::find(assetTrans.AssetId).AssetGroup;

            select assetDisposalParameters
                where assetDisposalParameters.PostValue == AssetPostValue::NBV &&
                    assetDisposalParameters.SoldScrap == soldScrap &&
                    assetDisposalParameters.PostingProfile == assetTrans.PostingProfile &&
                    assetDisposalParameters.BookId == assetTrans.BookId &&
                    (assetDisposalParameters.ValueType == assetPostType ||
                        assetDisposalParameters.ValueType == AssetPostType::All) &&
                    ((assetDisposalParameters.AssetCode == TableGroupAll::Table &&
                        assetDisposalParameters.AssetRelation == assetTrans.AssetId) ||
                        (assetDisposalParameters.AssetCode == TableGroupAll::GroupId &&
                        assetDisposalParameters.AssetRelation == assetGroupId) ||
                        assetDisposalParameters.AssetCode == TableGroupAll::All);
            
            if (!assetDisposalParameters.RecId
                // <GEEPL>
                && !isPolishContext)
                // </GEEPL>
            {
                throw error(strFmt("@SYS24602","@SYS67345" + '/' + "@SYS67538", "@SYS67500"));
            }

            if (AssetDisposalParametersAcquisitionFlight::instance().isEnabled()
                && assetParameters.PostDisposalTransactionsInDetail == NoYes::Yes)
            {
                this.validateDisposalParametersAcquisition(
                    assetTrans.AssetId,
                    assetTrans.BookId,
                    assetTrans.PostingProfile,
                    assetPostType,
                    soldScrap,
                    assetGroupId);

                if (!(isAcquisitionThisYear && isAcquisitionPriorYear) && !isAcquisition)
                {
                    if (isAcquisitionThisYear || isAcquisitionPriorYear)
                    {
                        throw error("@FixedAssets:AcquisitionThisPriorYearSetupDisposal");
                    }
                    else
                    {
                        throw error("@FixedAssets:AcquisitionSetupDisposal");
                    }
                }

                if ((isAcquisitionThisYear && isAcquisitionPriorYear))
                {
                    isAcquisition = false;
                }
            }

            AssetPostType assetPostTypeLocal = assetDisposalParameters.ValueType;

            while select PostValue from assetDisposalParameters
                group by PostValue
                where assetDisposalParameters.SoldScrap == soldScrap                    
                    && assetDisposalParameters.PostingProfile == assetTrans.PostingProfile    
                    && assetDisposalParameters.BookId == assetTrans.BookId            
                    && (assetDisposalParameters.ValueType == assetPostType 
                        || assetDisposalParameters.ValueType == AssetPostType::All)  
                    && ((assetDisposalParameters.AssetCode == TableGroupAll::Table   
                            && assetDisposalParameters.AssetRelation == assetTrans.AssetId) 
                        || (assetDisposalParameters.AssetCode == TableGroupAll::GroupId 
                            && assetDisposalParameters.AssetRelation == assetGroupId) 
                        ||  assetDisposalParameters.AssetCode == TableGroupAll::All)
            {
                // Retrieve the assetDisposalParamters for the current PostValue.

                if (AssetDisposalParametersAcquisitionFlight::instance().isEnabled()
                    && assetParameters.PostDisposalTransactionsInDetail == NoYes::Yes)
                {
                    if (assetDisposalParameters.PostValue == AssetPostValue::Acquisition && (isAcquisitionThisYear && isAcquisitionPriorYear))
                    {
                        continue;
                    }

                    if ((assetDisposalParameters.PostValue == AssetPostValue::AcqThisYear || assetDisposalParameters.PostValue == AssetPostValue::AcqPriorYears)
                        && isAcquisition)
                    {
                        continue;
                    }
                }

                l_assetDisposalParameters = AssetDisposalParameters::findPostingAccount(
                    soldScrap,
                    assetTrans.PostingProfile,
                    assetTrans.BookId,
                    assetDisposalParameters.PostValue,
                    assetTrans.AssetId,
                    assetGroupId,
                    // <GEEPL>
                    isPolishContext ? assetPostTypeLocal :
                    // </GEEPL>
                    assetPostType);

                assetAmount = this.postValue(l_assetDisposalParameters.PostValue);
                if (isReportingCurrencyLogic)
                {
                    assetAmountReportingCurrency = this.postValueByCurrency(l_assetDisposalParameters.PostValue, true);
                }

                if (this.shouldPostAssetAmount(assetAmount, l_assetDisposalParameters))
                {
                    // <GEEPL>
                    // Polish disposal allows to specify the percentage of the total amount to be the disposed amount.
                    if (isPolishContext
                        && assetSaleFactor != 100)
                    {
                        assetAmount = assetBookTable.roundOffDepreciation(assetAmount * assetSaleFactor / 100);
                        if (isReportingCurrencyLogic)
                        {
                            assetAmountReportingCurrency = assetBookTable.roundOffDepreciationReportingCurrency(
                                assetAmountReportingCurrency * assetSaleFactor / 100);
                        }
                    }
                    // </GEEPL>

                    // <GCN>
                    if (isDepreciationPolicyEnabled)
                    {
                        if (assetBookTable.IsDeprecateInDisposal_CN
                            && !isNetBookValue
                            && l_assetDisposalParameters.PostValue != AssetPostValue::DepPriorYears)
                        {
                            if (!isAutoDepreciation)
                            {
                                if (assetBook.LastDepreciationDate)
                                {
                                    amountAutoDepreciation = this.insertLedgerTransPriorDisposal_CN(assetBook.LastDepreciationDate, assetTrans.TransDate);
                                }
                                else
                                {
                                    amountAutoDepreciation = this.insertLedgerTransPriorDisposal_CN(assetBook.DepreciationStartDate, assetTrans.TransDate);
                                }

                                isAutoDepreciation = true;
                            }
                            if (assetAmount > 0)
                            {
                                isNetBookValue = true;
                            }
                            assetAmount += amountAutoDepreciation;
                        }
                    }
                    // </GCN>

                    // <GEEPL>
                    if (isPolishContext
                        && (l_assetDisposalParameters.PostValue == AssetPostValue::DepAdjThisYear
                        || l_assetDisposalParameters.PostValue == AssetPostValue::DepAdjPriorYears))
                    {
                        isCorrection = assetAmount < 0;
                    }
                    // </GEEPL>
                    AssetPostDisposalVoucherPostingParameters voucherPostingParameters = this.createVoucherTransParametersForPost(l_assetDisposalParameters, assetTrans, -assetAmount, companyCurrency, isCorrection);

                    if (isReportingCurrencyLogic)
                    {
                        voucherPostingParameters.parmAssetAmountReportingCurrency(-assetAmountReportingCurrency);
                    }

                    this.postVoucherTransactions(voucherPostingParameters);

                    // <GJP>
                    if (l_assetDisposalParameters.PostValue == AssetPostValue::NBV)
                    {
                        NBVOffsetAccount = l_assetDisposalParameters.OffsetLedgerDimension;
                    }
                    // </GJP>
                }
            }
            
            // <GJP>
            if (isAssetDocumentEnabled_JP)
            {
                while select Type from documentTableLoc
                    exists join documentEntryLoc
                        where documentTableLoc.RecId == documentEntryLoc.AssetDocumentTable_JP
                            && documentEntryLoc.AssetId == assetTrans.AssetId
                            && (documentEntryLoc.BookId == assetTrans.BookId
                                || documentTableLoc.Type == AssetDocumentType_JP::AssetReductionEntry_DirectOff)
                {
                    conPostValueLoc = AssetDocumentUtility_JP::getDisposalPostValueByDocument(documentTableLoc.Type);
                    for (counterLoc = conLen(conPostValueLoc); counterLoc > 0; counterLoc--)
                    {
                        // get related post value and transaction types.
                        assetPostValueLoc = conPeek(conPostValueLoc,counterLoc);

                        // get document amount
                        assetAmount = this.postValue_JP(assetPostValueLoc, documentTableLoc.Type);

                        // post amount
                        if (assetAmount)
                        {
                            assetPostValueLoc_JP = AssetDocumentUtility_JP::assetPostValue2AssetPostValue_JP(assetPostValueLoc, documentTableLoc.Type);

                            assetDisposalParameters_JP = AssetDisposalParameters_JP::findPostingAccount(
                                soldScrap,
                                assetTrans.PostingProfile,
                                assetTrans.BookId,
                                assetPostValueLoc_JP,
                                assetTrans.AssetId,
                                assetGroupId);

                            if (assetDisposalParameters_JP)
                            {
                                AssetPostDisposalVoucherPostingParameters voucherPostingParameters = this.createVoucherTransParametersForPost_JP(assetDisposalParameters_JP, assetTrans, -assetAmount, companyCurrency, isCorrection);

                                this.postVoucherTransactions(voucherPostingParameters);
                            }
                        }
                    }
                }
            }
            // </GJP>
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostAssetAmount</Name>
				<Source><![CDATA[
    private boolean shouldPostAssetAmount(AssetAmount _assetAmount, AssetDisposalParameters _assetDisposalParameters)
    {
        boolean shouldPostAssetAmount;

        if (_assetAmount)
        {
            shouldPostAssetAmount = true;
        }
        
        //Poland disposal sale or scrap journal will post net book value.  Avoid posting it twice.
        if (AssetPostDisposal_PLNBVFlight::instance().isEnabled()
            && this.isPolishContext
            && _assetDisposalParameters.PostValue == AssetPostValue::NBV
            && this.ledgerJournalTrans.RecId != 0
            && this.ledgerJournalTrans.AmountCurCredit == _assetAmount)
        {
            LedgerJournalTrans_Asset ledgerJournalTrans_Asset = LedgerJournalTrans_Asset::find(ledgerJournalTrans.RecId);
            if (ledgerJournalTrans_Asset.TransType == AssetTransTypeJournal::DisposalSale
                || ledgerJournalTrans_Asset.TransType == AssetTransTypeJournal::DisposalScrap)
            {
                MainAccountRecId disposalMainAccount = DimensionAttributeValueCombination::find(_assetDisposalParameters.OffsetLedgerDimension).MainAccount;
                MainAccountRecId journalMainAccount = DimensionAttributeValueCombination::find(ledgerJournalTrans.OffsetLedgerDimension).MainAccount;
                if (disposalMainAccount == journalMainAccount)
                {
                    shouldPostAssetAmount = false;
                }
            }
        }

        return shouldPostAssetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutoCreateDepreciationAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks for the asset books which have automatic posting
    /// enabled and checks whether the auto depreciation is allowed for the depreciation profile.
    /// </summary>
    /// <param name = "_assetBook">An <c>AssetBook</c> table buffer.</param>
    /// <returns>true if the automatic posting is enabled for the asset books and auto depreciation is allowed 
    /// for the depreciation profile; otherwise, false.</returns>
    protected boolean isAutoCreateDepreciationAdjustments(AssetBook _assetBook)
    {
        return AssetParameters::find().IsAutomaticPosting
            && _assetBook.Depreciation
            && (AssetDepreciationProfile::find(_assetBook.DepreciationProfile).Method == AssetDepreciationMethod::StraightLinePercentage_PL
                || AssetDepreciationProfile::isAutoDeprAllowedForProfile(_assetBook.DepreciationProfile));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to post depreciation at the time disposal, when the depreciation is not
    /// calculated for an asset until the disposal date.
    /// </summary>
    private void postDepreciation()
    {
        AssetBookTable assetBookTable;
        AssetTableInterval assetTableInterval;
        AssetTableMethod assetTableMethodPrimary;
        AssetTableMethod assetTableMethodSecondary;
        AssetTableMethod assetTableMethodPrimaryReportingCurrency;
        AssetTableMethod assetTableMethodSecondaryReportingCurrency;
        AmountCur amountCurPrimary;
        AmountCur amountCurSecondary;
        AssetJournal assetJournal;
        AssetBook assetBook;
        AssetTransDate currentYearDate;
        AssetTransDate assetTransDate;
        AssetTransDate assetDepreciationTransDate;
        TransDate depDate;
        real depPeriod;
        AssetRevaluationAmount revaluationAmount;
        AmountCur amountCur;
        Counter transactionCount = 0;
        boolean commitNeeded = false;
        boolean beginNeeded = true;
        AssetDepreciationProfile assetDepreciationProfile;
        
        AssetBudgetModelId assetBudgetModelId;
        AmountCur amountCurSum;
        AssetAmount totalDepreciationPriorYears;
        AssetAmount sumDepPeriodCurrentYear;
        TransDate priorYearDate;

        // This variable determines if LedgerJounalTrans record needs to be created.
        boolean isAssetJournalNeeded;
        boolean isDepreciationReversed;
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccountOffset;
        AssetAmountReportingCurrency amountPrimaryReportingCurrency;
        AssetAmountReportingCurrency amountSecondaryReportingCurrency;
        AssetAmountReportingCurrency amountReportingCurrency;
        AssetAmountReportingCurrency totalDepreciationPriorYearsReportingCurrency;
        AssetAmountReportingCurrency amountSumReportingCurrency;
        boolean executeReportingCurrencyLogic;
        boolean hasSameAccoutingAndReportingCurrency;
        // <GIN>
        boolean isIndiaDepreciationEnable = AssetParameters::isDepreciationCompaniesActEnable_IN();
        // </GIN>

        #avifiles

        if (ledgerJournalTransRecId)
        {
            this.parmLedgerJournalTransRecId(ledgerJournalTransRecId);
            assetTransDate = ledgerJournalTrans.TransDate;

            isAssetJournalNeeded = true;
        }
        else
        {
            assetTransDate = assetTrans.TransDate;
        }

        select firstfast * from assetBook
            where assetBook.BookId       == assetTrans.BookId
               && assetBook.AssetId      == assetTrans.AssetId
               && assetBook.Depreciation == NoYes::Yes
            join assetBookTable where assetBookTable.BookId == assetBook.BookId;

        hasSameAccoutingAndReportingCurrency = Ledger::reportingCurrency() == Ledger::accountingCurrency();

        if (!hasSameAccoutingAndReportingCurrency)
        {
            executeReportingCurrencyLogic = Ledger::reportingCurrency() != '';
        }

        if (assetBook)
        {
            try
            {
                assetDepreciationProfile = assetBook.depreciationProfile();
                assetTableInterval = AssetTableInterval::construct(assetDepreciationProfile, assetBookTable.getFiscalCalendar());
                assetDepreciationTransDate = assetTableInterval.findLastDayOfYear(assetTrans.TransDate);

                // start a transaction
                if (beginNeeded)
                {
                    ttsbegin;
                    commitNeeded = true;
                    beginNeeded = false;
                }

                // Verify that depreciations are allowed if disposal is in the same year as placed in service date.
                // If the depreciation transactions are not allowed, all the posted depreciation and depreciation adjustment
                // transactions will be reversed.
                isDepreciationReversed = (!assetBook.IsDisposalSameYear
                    && assetTableInterval.findLastDayOfYear(assetBook.UsedFromDate) == assetDepreciationTransDate);

                if (isDepreciationReversed)
                {
                    totalDepreciationPriorYears = -(AssetTrans::amountMSTPerDateTransTypes(
                        assetBook.AssetId,
                        assetBook.BookId,
                        [AssetTransType::Depreciation, AssetTransType::DepreciationAdj],
                        dateNull(),
                        maxDate()));

                    if (executeReportingCurrencyLogic)
                    {
                        totalDepreciationPriorYearsReportingCurrency = -(AssetTrans::amountReportingCurrencyPerDateTransTypes(
                        assetBook.AssetId,
                        assetBook.BookId,
                        [AssetTransType::Depreciation, AssetTransType::DepreciationAdj],
                        dateNull(),
                        maxDate()));
                    }
                }
                else
                {
                    // Mono depreciation.
                    if (!assetBook.depreciationAltProfile())
                    {
                        // only process if not consumption depreciation
                        if (assetDepreciationProfile.Method != AssetDepreciationMethod::Consumption)
                        {
                            assetTableMethodPrimary = AssetTableMethod::construct(assetBook, assetDepreciationTransDate, assetBudgetModelId);

                            if (executeReportingCurrencyLogic)
                            {
                                assetTableMethodPrimaryReportingCurrency = AssetTableMethod::constructForReportingCurrency(assetBook, assetDepreciationTransDate, assetBudgetModelId);                                
                            }
                            // <GIN>
                            if (isIndiaDepreciationEnable)
                            {
                                assetTableMethodPrimary.parmIsDisposal_IN(true);
                            }
                            // </GIN>

                            // <GEECZ>
                            if (this.checkHalfDepreciation(assetBook))
                            {
                                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00002, funcName());
                                assetTableMethodPrimary.parmHalfDepreciation_CZ(NoYes::Yes);
                            }
                            // </GEECZ>

                            amountCurPrimary            = 0;
                            amountCurSum                = 0;
                            totalDepreciationPriorYears = 0;
                            sumDepPeriodCurrentYear     = 0;
                            sumDepPeriodPriorYears      = 0;

                            if (executeReportingCurrencyLogic)
                            {
                                amountPrimaryReportingCurrency = 0;
                                amountSumReportingCurrency     = 0;
                                totalDepreciationPriorYearsReportingCurrency = 0;
                            }

                            // continue while there is another period
                            while (assetTableMethodPrimary.next())
                            {
                                amountCurPrimary += -assetTableMethodPrimary.calc();
                                revaluationAmount = assetTableMethodPrimary.revaluationAmount();
                                assetTableMethodPrimary.parmDepAmountPriorYears(conNull());
                                
                                depPeriod = assetTableMethodPrimary.depPeriod();
                                depDate   = assetTableMethodPrimary.depDate();

                                if (executeReportingCurrencyLogic && assetTableMethodPrimaryReportingCurrency.next())
                                {
                                    amountPrimaryReportingCurrency += -assetTableMethodPrimaryReportingCurrency.calc();                                    
                                    assetTableMethodPrimaryReportingCurrency.parmDepAmountPriorYears(conNull());

                                    if (assetTableMethodPrimary.parmIsEndOfAccountingDepreciation())                                                                                            
                                    {
                                        while (assetTableMethodPrimaryReportingCurrency.next())
                                        {
                                            amountPrimaryReportingCurrency   += assetTableMethodPrimaryReportingCurrency.calc();
                                        }
                                    }
                                }                                

                                if (AssetBook::checkPriorYearDepreciation(assetBook, assetTableInterval, assetTransDate, assetTableMethodPrimary))
                                {
                                    totalDepreciationPriorYears += amountCurPrimary;

                                    if (executeReportingCurrencyLogic)
                                    {
                                        totalDepreciationPriorYearsReportingCurrency += amountPrimaryReportingCurrency;
                                    }

                                    sumDepPeriodPriorYears      += depPeriod;
                                    priorYearDate                = depDate;
                                }
                                else
                                {
                                    amountCurSum += amountCurPrimary;

                                    if (executeReportingCurrencyLogic)
                                    {
                                        amountSumReportingCurrency += amountPrimaryReportingCurrency;
                                    }

                                    sumDepPeriodCurrentYear += depPeriod;
                                    currentYearDate = depDate;
                                }

                                amountCurPrimary = 0;
                                amountPrimaryReportingCurrency = 0;
                            }
                        }
                    }
                    // Dual depreciation.
                    else
                    {
                        // only process if not consumption depreciation
                        if (assetDepreciationProfile.Method != AssetDepreciationMethod::Consumption)
                        {
                            // construct two instances of the calc engine, one for the primary profile and another for the alternate profile
                            assetTableMethodPrimary   = AssetTableMethod::construct(assetBook, assetDepreciationTransDate, assetBudgetModelId, true);
                            assetTableMethodSecondary = AssetTableMethod::construct(assetBook, assetDepreciationTransDate, assetBudgetModelId, true, true);

                            if (executeReportingCurrencyLogic)
                            {
                                assetTableMethodPrimaryReportingCurrency   = AssetTableMethod::constructForReportingCurrency(assetBook, assetDepreciationTransDate, assetBudgetModelId, true);                                
                                assetTableMethodSecondaryReportingCurrency = AssetTableMethod::constructForReportingCurrency(assetBook, assetDepreciationTransDate, assetBudgetModelId, true, true);                                
                            }

                            // <GIN>
                            if (isIndiaDepreciationEnable)
                            {
                                assetTableMethodPrimary.parmIsDisposal_IN(true);
                                assetTableMethodSecondary.parmIsDisposal_IN(true);
                            }
                            // </GIN>

                            amountCurPrimary            = 0;
                            amountCurSecondary          = 0;
                            amountCurSum                = 0;
                            totalDepreciationPriorYears = 0;
                            sumDepPeriodCurrentYear     = 0;
                            sumDepPeriodPriorYears      = 0;

                            if (executeReportingCurrencyLogic)
                            {
                                amountPrimaryReportingCurrency            = 0;
                                amountSecondaryReportingCurrency          = 0;
                                amountSumReportingCurrency                = 0;
                                totalDepreciationPriorYearsReportingCurrency = 0;
                            }

                            // continue while there is another period
                            while (assetTableMethodPrimary.next() && assetTableMethodSecondary.next())
                            {
                                // get amounts from the calc engine
                                amountCurPrimary   = -(assetTableMethodPrimary.calc());
                                amountCurSecondary = -assetTableMethodSecondary.calc();

                                // get other values such as dates, number of periods from calc engine
                                if (abs(amountCurPrimary) > abs(amountCurSecondary))
                                {
                                    revaluationAmount = assetTableMethodPrimary.revaluationAmount();
                                    assetTableMethodSecondary.addPrevDepAmountExternal(-(amountCurPrimary - amountCurSecondary));
                                    depDate     = assetTableMethodPrimary.depDate();
                                    depPeriod   = assetTableMethodPrimary.depPeriod();
                                    amountCur   = amountCurPrimary;
                                }
                                else
                                {
                                    revaluationAmount = assetTableMethodSecondary.revaluationAmount();
                                    assetTableMethodPrimary.addPrevDepAmountExternal(-(amountCurSecondary - amountCurPrimary));
                                    depDate     = assetTableMethodSecondary.depDate();
                                    depPeriod   = assetTableMethodSecondary.depPeriod();
                                    amountCur   = amountCurSecondary;
                                }
                                
                                if (executeReportingCurrencyLogic && assetTableMethodPrimaryReportingCurrency.next() && assetTableMethodSecondaryReportingCurrency.next())
                                {
                                    amountPrimaryReportingCurrency   = -(assetTableMethodPrimaryReportingCurrency.calc());
                                    amountSecondaryReportingCurrency = -assetTableMethodSecondaryReportingCurrency.calc();

                                    if (assetTableMethodPrimary.parmIsEndOfAccountingDepreciation() && 
                                        assetTableMethodSecondary.parmIsEndOfAccountingDepreciation())
                                    {
                                        while (assetTableMethodPrimaryReportingCurrency.next() &&
                                            assetTableMethodSecondaryReportingCurrency.next())
                                        {
                                            amountPrimaryReportingCurrency   += assetTableMethodPrimaryReportingCurrency.calc();
                                            amountSecondaryReportingCurrency = -assetTableMethodSecondaryReportingCurrency.calc();
                                        }
                                    }

                                    // get other values such as dates, number of periods from calc engine
                                    if (abs(amountPrimaryReportingCurrency) > abs(amountSecondaryReportingCurrency))
                                    {                                        
                                        assetTableMethodSecondaryReportingCurrency.addPrevDepAmountExternal(-(amountPrimaryReportingCurrency - amountSecondaryReportingCurrency));
                                        amountReportingCurrency   = amountPrimaryReportingCurrency;
                                    }
                                    else
                                    {                                        
                                        assetTableMethodPrimaryReportingCurrency.addPrevDepAmountExternal(-(amountCurSecondary - amountCurPrimary));
                                        amountReportingCurrency   = amountSecondaryReportingCurrency;
                                    }
                                }

                                if (AssetBook::checkPriorYearDepreciation(assetBook, assetTableInterval, assetTransDate, assetTableMethodPrimary))
                                {
                                    totalDepreciationPriorYears  += amountCur;

                                    if (executeReportingCurrencyLogic)
                                    {
                                        totalDepreciationPriorYearsReportingCurrency  += amountReportingCurrency;
                                    }

                                    sumDepPeriodPriorYears       += depPeriod;
                                    priorYearDate                 = depDate;
                                }
                                else
                                {
                                    amountCurSum      += amountCur;

                                    if (executeReportingCurrencyLogic)
                                    {
                                        amountSumReportingCurrency  += amountReportingCurrency;
                                    }

                                    sumDepPeriodCurrentYear += depPeriod;
                                    currentYearDate    = depDate;
                                }
                                amountCurPrimary   = 0;
                                amountCurSecondary = 0;
                                amountCur          = 0;
                                amountPrimaryReportingCurrency   = 0;
                                amountSecondaryReportingCurrency = 0;
                                amountReportingCurrency          = 0;
                            }
                        }
                    }
                }

                if (assetBookTable.postToGeneralLedger() && (amountCurSum
                    || totalDepreciationPriorYears
                    || assetTransDate <= assetBook.LastDepreciationDate)
                    && !assetBook.IsDerogatoryBook_FR)
                {
                    ledgerDimensionDefaultAccount = AssetLedgerAccounts::assetLedgerDimension(assetTrans.AssetId,
                                                                    assetTrans.BookId,
                                                                    AssetTransType::DepreciationAdj,
                                                                    assetTrans.PostingProfile);
                    ledgerDimensionDefaultAccountOffset = AssetLedgerAccounts::assetOffsetLedgerDimension(assetTrans.AssetId,
                                                                    assetTrans.BookId,
                                                                    AssetTransType::DepreciationAdj,
                                                                    assetTrans.PostingProfile);
                }
                          
                // If the disposal is using a value model that has derived value model,
                // only main value model need to create the asset transaction in the journal.
                if (isAssetJournalNeeded
                    && this.isValueModelDerivedModel(assetTrans.BookId, assetTrans.TransType)
                    && ledgerJournalTrans.ledgerJournalTable().CurrentOperationsTax
                        != AssetBookTable::find(assetTrans.BookId).CurrentOperationsTax)
                {
                    isAssetJournalNeeded = false;
                }

                if (isAssetJournalNeeded)
                {
                    assetJournal = this.createAssetJournal();
                }

                if (totalDepreciationPriorYears)
                {
                    if (hasSameAccoutingAndReportingCurrency)
                    {
                        totalDepreciationPriorYearsReportingCurrency = totalDepreciationPriorYears;
                    }

                    if (isAssetJournalNeeded)
                    {
                        assetJournal.parmReportingCurrencyAmount(totalDepreciationPriorYearsReportingCurrency);
                        assetJournal.createTrans(totalDepreciationPriorYears, assetBook, assetTransDate, assetBudgetModelId, sumDepPeriodPriorYears);
                        depreciationAdjVoucher = assetJournal.parmVoucher();
                    }

                    depreciationLastRunDate = priorYearDate;
                    
                    this.insertAssetTransV2(totalDepreciationPriorYears, AssetTransType::DepreciationAdj, totalDepreciationPriorYearsReportingCurrency);
                    transactionCount++;
                    
                    if (assetBookTable.postToGeneralLedger()
                        && !assetBook.IsDerogatoryBook_FR)
                    {
                        AssetPostDisposalVoucherPostingParameters voucherPostingParameters = this.createVoucherTransParametersForPostDepreciation(
                            ledgerDimensionDefaultAccount, 
                            ledgerDimensionDefaultAccountOffset, 
                            this.getAssetTransForGLPosting(),
                            totalDepreciationPriorYears);

                        voucherPostingParameters.parmAssetAmountReportingCurrency(totalDepreciationPriorYearsReportingCurrency);
                        voucherPostingParameters.parmIsDepreciationAdj(true);

                        this.postVoucherTransactions(voucherPostingParameters);
                    }
                }

                // Additional depreciation adjustments should not be made if depreciation transactions were reversed.
                if (!isDepreciationReversed && (amountCurSum
                    || assetTransDate <= assetBook.LastDepreciationDate))
                {
                    depreciationLastRunDate = currentYearDate;

                    // Adjust the depreciation value based on the conventions specified.
                    amountCurSum = this.adjustDisposalDepreciation(amountCurSum, assetBook, assetTransDate);
                    
                    if (executeReportingCurrencyLogic)
                    {
                        amountSumReportingCurrency = this.adjustDisposalDepreciation(amountSumReportingCurrency, assetBook, assetTransDate, true);
                    }
                    else if (hasSameAccoutingAndReportingCurrency)
                    {
                        amountSumReportingCurrency = amountCurSum;
                    }

                    if (amountCurSum)
                    {
                        if (isAssetJournalNeeded)
                        {
                            assetJournal.parmReportingCurrencyAmount(amountSumReportingCurrency);
                            assetJournal.createTrans(amountCurSum, assetBook, ledgerJournalTrans.TransDate, assetBudgetModelId, sumDepPeriodCurrentYear);
                            depreciationAdjVoucher = assetJournal.parmVoucher();
                        }

                        this.insertAssetTransV2(amountCurSum, AssetTransType::DepreciationAdj, amountSumReportingCurrency);
                        transactionCount++;
                        
                        if (assetBookTable.postToGeneralLedger()
                            && !assetBook.IsDerogatoryBook_FR)
                        {
                            AssetPostDisposalVoucherPostingParameters voucherPostingParameters = this.createVoucherTransParametersForPostDepreciationAdjustment(
                                ledgerDimensionDefaultAccount, 
                                ledgerDimensionDefaultAccountOffset, 
                                this.getAssetTransForGLPosting(),
                                amountCurSum, 
                                CompanyInfoHelper::standardCurrency(), 
                                false);

                            voucherPostingParameters.parmAssetAmountReportingCurrency(amountSumReportingCurrency);
                            voucherPostingParameters.parmIsDepreciationAdj(true);
                            this.postVoucherTransactions(voucherPostingParameters);
                        }
                    }
                }

                // Commit transaction when asset dep book is changed and the
                if (transactionCount)
                {
                    ttscommit;
                    transactionCount = 0;
                    commitNeeded = false;
                    beginNeeded = true;
                }

                if (assetReversalRelatedVoucherManager)
                {
                    assetReversalRelatedVoucherManager.save();
                }

                // Commit any remaining transactions
                if (commitNeeded)
                {
                    ttscommit;
                }
            }
            // catch exceptions
            catch
            {
                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAssetJournal</Name>
				<Source><![CDATA[
    private AssetJournal createAssetJournal()
    {
        AssetJournal assetJournal = new AssetJournal(ledgerJournalTrans.JournalNum, AssetTransTypeJournal::DepreciationAdj);

        if (isOneVoucherFeatureEnabled)
        {
            assetJournal.parmIsOneVoucher(false);
        }
        else
        {
            assetJournal.parmIsOneVoucher(true);
            assetJournal.parmVoucher(ledgerJournalTrans.Voucher);
        }
        
        assetJournal.parmIsDepreciationAdjustment(true);

        return assetJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTransForGLPosting</Name>
				<Source><![CDATA[
    private AssetTrans getAssetTransForGLPosting()
    {
        AssetTrans assetTransNew = assetTrans;

        if (isOneVoucherFeatureEnabled)
        {
             assetTransNew = this.populateNewAssetTrans(assetTrans, AssetTransType::DepreciationAdj);
        }

        return assetTransNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateNewAssetTrans</Name>
				<Source><![CDATA[
    protected AssetTrans populateNewAssetTrans(AssetTrans _assetTrans, AssetTransType _assetTransType)
    {
        AssetTrans assetTransNew;
        buf2Buf(_assetTrans, assetTransNew);
        assetTransNew.CurrencyCode = Ledger::accountingCurrency();
        assetTransNew.TransType = _assetTransType;

        if (isOneVoucherFeatureEnabled)
        {            
            assetTransNew.Voucher = this.getVoucher(assetTransNew);
        }

        return assetTransNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucherTransParametersForPostDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>AssetPostDisposalVoucherPostingParameters</c> instance for depreciation posting.
    /// </summary>
    /// <param name = "_ledgerDimensionDefaultAccount">
    /// The main ledger dimension default account.
    /// </param>
    /// <param name = "_ledgerDimensionDefaultAccountOffset">
    /// The offset account.
    /// </param>
    /// <param name = "_assetTrans">
    /// The asset transaction table record.
    /// </param>
    /// <param name = "_assetAmount">
    /// The asset amount.
    /// </param>
    /// <returns>
    /// An instance of <c>AssetPostDisposalVoucherPostingParameters</c> object.
    /// </returns>
    protected AssetPostDisposalVoucherPostingParameters createVoucherTransParametersForPostDepreciation(
        LedgerDimensionDefaultAccount _ledgerDimensionDefaultAccount,
        LedgerDimensionDefaultAccount _ledgerDimensionDefaultAccountOffset,
        AssetTrans _assetTrans,
        AssetAmount _assetAmount
        )
    {
        AssetPostDisposalVoucherPostingParameters voucherPostingParameters = AssetPostDisposalVoucherPostingParameters::construct();
        voucherPostingParameters.parmLedgerDimension(_ledgerDimensionDefaultAccount);
        voucherPostingParameters.parmOffsetLedgerDimension(_ledgerDimensionDefaultAccountOffset);
        voucherPostingParameters.parmAssetTrans(_assetTrans);
        voucherPostingParameters.parmAssetAmount(_assetAmount);

        return voucherPostingParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucherTransParametersForPostDepreciationAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>AssetPostDisposalVoucherPostingParameters</c> instance for depreciation adjustment posting.
    /// </summary>
    /// <param name = "_ledgerDimensionDefaultAccount">
    /// The main ledger dimension default account.
    /// </param>
    /// <param name = "_ledgerDimensionDefaultAccountOffset">
    /// The ledger dimension offset account.
    /// </param>
    /// <param name = "_assetTrans">
    /// The asset transaction table record.
    /// </param>
    /// <param name = "_assetAmount">
    /// Asset amount.
    /// </param>
    /// <param name = "_companyCurrency">
    /// The company currency code.
    /// </param>
    /// <param name = "_isCorrection">
    /// The flag for correction.
    /// </param>
    /// <returns>
    /// An instance of <c>AssetPostDisposalVoucherPostingParameters</c> object.
    /// </returns>
    protected AssetPostDisposalVoucherPostingParameters createVoucherTransParametersForPostDepreciationAdjustment(
        LedgerDimensionDefaultAccount _ledgerDimensionDefaultAccount,
        LedgerDimensionDefaultAccount _ledgerDimensionDefaultAccountOffset,
        AssetTrans _assetTrans,
        AssetAmount _assetAmount,
        CurrencyCode _companyCurrency,
        boolean _isCorrection
        )
    {
        AssetPostDisposalVoucherPostingParameters voucherPostingParameters = AssetPostDisposalVoucherPostingParameters::construct();
        voucherPostingParameters.parmLedgerDimension(_ledgerDimensionDefaultAccount);
        voucherPostingParameters.parmOffsetLedgerDimension(_ledgerDimensionDefaultAccountOffset);
        voucherPostingParameters.parmAssetTrans(_assetTrans);
        voucherPostingParameters.parmAssetAmount(_assetAmount);
        voucherPostingParameters.parmCompanyCurrency(_companyCurrency);
        voucherPostingParameters.parmIsCorrection(_isCorrection);

        return voucherPostingParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the summary amount for a given asset post value for the disposal process.
    /// </summary>
    /// <param name="_postValue">
    /// Disposal transaction type.
    /// </param>
    /// <returns>
    /// Amount of the Disposal transaction type.
    /// </returns>
    public AssetAmount postValue(AssetPostValue _postValue)
    {
        return this.calculateSummaryAssetAmount(_postValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postValueByCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the summary amount for a given asset post value by currency for the disposal process.
    /// </summary>
    /// <param name="_postValue">
    /// Disposal transaction type.
    /// </param>
    /// <param name="_isReportingCurrency">
    /// Optional, true if the calculation is for reporting currency, otherwise false -- calculation in accounting currency.
    /// </param>
    /// <returns>
    /// Amount of the Disposal transaction type.
    /// </returns>
    public AssetAmount postValueByCurrency(AssetPostValue _postValue, boolean _isReportingCurrency = false)
    {
        return this.calculateSummaryAssetAmountByCurrency(_postValue, _isReportingCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSummaryAssetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the Asset Amount depending on the asset post value for the disposal process.
    /// </summary>
    /// <param name="_postValue">
    /// Asset post value type.
    /// </param>
    /// <returns>
    /// Amount of the Disposal transaction type.
    /// </returns>    
    protected AssetAmount calculateSummaryAssetAmount(AssetPostValue _postValue)
    {
        return this.calculateSummaryAssetAmountByCurrency(_postValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSummaryAssetAmountByCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the Asset Amount depending on the asset post value by currency for the disposal process.
    /// </summary>
    /// <param name="_postValue">
    /// Asset post value type.
    /// </param>
    /// <returns>
    /// Amount of the Disposal transaction type.
    /// </returns>
    private AssetAmount calculateSummaryAssetAmountByCurrency(AssetPostValue _postValue, boolean _isReportingCurrency = false)
    {
        AssetSumCalc_Trans  assetSumPriorYearsLocal;
        AssetSumCalc_Trans  assetSumAllYearsLocal;

        if (_isReportingCurrency)
        {
            assetSumPriorYearsLocal = assetSumPriorYearsReportingCurrency;
            assetSumAllYearsLocal = assetSumAllYearsReportingCurrency;
        }
        else
        {
            assetSumPriorYearsLocal = assetSumPriorYears;
            assetSumAllYearsLocal = assetSumAllYears;
        }

        switch (_postValue)
        {
            case AssetPostValue::AcqPriorYears:          return assetSumPriorYearsLocal.acquisitionValue();
            case AssetPostValue::AcqAdjPriorYears:       return assetSumPriorYearsLocal.acquisitionAdjValue();
            case AssetPostValue::DepPriorYears:          return assetSumPriorYearsLocal.depreciationValue();
            case AssetPostValue::DepAdjPriorYears:       return assetSumPriorYearsLocal.depreciationAdjValue();
            case AssetPostValue::RevaluePriorYear:       return assetSumPriorYearsLocal.revaluationValue();
            case AssetPostValue::WriteUpAdjPriorYear:    return assetSumPriorYearsLocal.writeUpAdjValue();
            case AssetPostValue::WriteDownAdjPriorYear:  return assetSumPriorYearsLocal.writeDownAdjValue();
            case AssetPostValue::ExtraDepPriorYears:     return assetSumPriorYearsLocal.extraDepreciationValue();

            //
            // This years value is the difference between all year and prior years.
            // Can't use the assetSumCalc "This year" because this doesn't include transactions
            // that are in year beyond the disposal year, and these need to be included.
            //
            case AssetPostValue::DepThisYear:            return assetSumAllYearsLocal.depreciationValue() - assetSumPriorYearsLocal.depreciationValue();
            case AssetPostValue::AcqAdjThisYear:         return assetSumAllYearsLocal.acquisitionAdjValue() - assetSumPriorYearsLocal.acquisitionAdjValue();
            case AssetPostValue::AcqThisYear:            return assetSumAllYearsLocal.acquisitionValue() - assetSumPriorYearsLocal.acquisitionValue();
            case AssetPostValue::DepAdjThisYear:         return assetSumAllYearsLocal.depreciationAdjValue() - assetSumPriorYearsLocal.depreciationAdjValue();
            case AssetPostValue::RevalueThisYear:        return assetSumAllYearsLocal.revaluationValue() - assetSumPriorYearsLocal.revaluationValue();
            case AssetPostValue::WriteUpAdjThisYear:     return assetSumAllYearsLocal.writeUpAdjValue() - assetSumPriorYearsLocal.writeUpAdjValue();
            case AssetPostValue::WriteDownAdjThisYear:   return assetSumAllYearsLocal.writeDownAdjValue() - assetSumPriorYearsLocal.writeDownAdjValue();
            case AssetPostValue::ExtraDepThisYear:       return assetSumAllYearsLocal.extraDepreciationValue() - assetSumPriorYearsLocal.extraDepreciationValue();

            case AssetPostValue::Acquisition:            return assetSumAllYearsLocal.acquisitionValue();
            // <GEEHU>
            case AssetPostValue::NBV:                    return isHungaryContext ? 0 : assetSumAllYearsLocal.netBookValue();
            // </GEEHU>
            case AssetPostValue::SaleValue:              return this.getSaleValueAmount(_isReportingCurrency);
            case AssetPostValue::CapitalReserve:         return assetSumAllYearsLocal.capitalReserveValue();
            case AssetPostValue::CapitalReserveTransfer: return assetSumAllYearsLocal.capitalReserveTransferValue();

            // French Derogatory depreciation
            case AssetPostValue::DerogatoryIncreaseAllYears:     return assetSumAllYearsLocal.derogatoryDecreaseValue();
            case AssetPostValue::DerogatoryDecreaseAllYears:     return assetSumAllYearsLocal.derogatoryIncreaseValue();
            // <GEEU>
            case AssetPostValue::PreAcquisition_CZ:      return assetSumAllYearsLocal.preAcquisitionValue_CZ() - assetSumAllYearsLocal.acquisitionValue();
            // </GEEU>
            case AssetPostValue::BonusDepreciation:      return assetSumAllYearsLocal.bonusDepreciationValue();

            default: return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSaleValueAmount</Name>
				<Source><![CDATA[
    private Amount getSaleValueAmount(boolean _isReportingCurrency)
    {
        if (_isReportingCurrency)
        {
            return assetTrans.ReportingCurrencyAmount;
        }
        else
        {
            return assetTrans.AmountMST;
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>postValue_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a summary amount of the prior years for a given disposal transaction type.
    /// </summary>
    /// <param name="_postValue">
    /// Disposal transaction type.
    /// </param>
    /// <param name="_documentType">
    /// Asset document type.
    /// </param>
    /// <returns>
    /// Amount of the dispoal transaction type.
    /// </returns>
    public AssetAmount postValue_JP(
        AssetPostValue         _postValue
        , AssetDocumentType_JP _documentType)
    {
        return this.postValueByCurrency_JP(_postValue, _documentType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postValueByCurrency_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a summary amount of the prior years for a given disposal transaction type.
    /// </summary>
    /// <param name="_postValue">
    /// Disposal transaction type.
    /// </param>
    /// <param name="_documentType">
    /// Asset document type.
    /// </param>
    /// <param name = "_isReporting">If true, calculates the values based on reporting currency, otherwise, accounting currency</param>
    /// <returns>
    /// Amount of the dispoal transaction type.
    /// </returns>
    public AssetAmount postValueByCurrency_JP(
        AssetPostValue          _postValue, 
        AssetDocumentType_JP    _documentType,
        boolean                 _isReporting = false)
    {
        AssetAmount ret;
        AssetSumCalc_Trans  assetSumPriorYearsLocal;
        AssetSumCalc_Trans  assetSumAllYearsLocal;

        if (_isReporting)
        {
            assetSumPriorYearsLocal = assetSumPriorYearsReportingCurrency;
            assetSumAllYearsLocal = assetSumAllYearsReportingCurrency;
        }
        else
        {
            assetSumPriorYearsLocal = assetSumPriorYears;
            assetSumAllYearsLocal = assetSumAllYears;
        }

        switch (_postValue)
        {
            case AssetPostValue::AcqThisYear:
                ret = assetSumAllYearsLocal.getAssetDocTypeVarValue_JP(AssetTransType::Acquisition, _documentType)
                    - assetSumPriorYearsLocal.getAssetDocTypeVarValue_JP(AssetTransType::Acquisition, _documentType);
                break;
            case AssetPostValue::AcqPriorYears:
                ret = assetSumPriorYearsLocal.getAssetDocTypeVarValue_JP(AssetTransType::Acquisition, _documentType);
                break;
            case AssetPostValue::AcqAdjThisYear:
                ret = assetSumAllYearsLocal.getAssetDocTypeVarValue_JP(AssetTransType::AcquisitionAdj, _documentType)
                    - assetSumPriorYearsLocal.getAssetDocTypeVarValue_JP(AssetTransType::AcquisitionAdj, _documentType);
                break;
            case AssetPostValue::AcqAdjPriorYears:
                ret = assetSumPriorYearsLocal.getAssetDocTypeVarValue_JP(AssetTransType::AcquisitionAdj, _documentType);
                break;
            case AssetPostValue::DepThisYear:
                ret = assetSumAllYearsLocal.getAssetDocTypeVarValue_JP(AssetTransType::Depreciation, _documentType)
                    - assetSumPriorYearsLocal.getAssetDocTypeVarValue_JP(AssetTransType::Depreciation, _documentType);
                break;
            case AssetPostValue::DepPriorYears:
                ret = assetSumPriorYearsLocal.getAssetDocTypeVarValue_JP(AssetTransType::Depreciation, _documentType);
                break;
            case AssetPostValue::WriteDownAdjThisYear:
                ret = assetSumAllYearsLocal.getAssetDocTypeVarValue_JP(AssetTransType::WriteDownAdj, _documentType)
                    - assetSumPriorYearsLocal.getAssetDocTypeVarValue_JP(AssetTransType::WriteDownAdj, _documentType);
                break;
            case AssetPostValue::WriteDownAdjPriorYear:
                ret = assetSumPriorYearsLocal.getAssetDocTypeVarValue_JP(AssetTransType::WriteDownAdj, _documentType);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucherTransObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LedgerVoucherTransObject</c>.
    /// </summary>
    /// <param name = "_ledgerVoucherTransObject">
    /// The <c>LedgerVoucherTransObject</c> instance.
    /// </param>
    /// <param name = "_voucherPostingParameters">
    /// An instance of <c>AssetPostDisposalVoucherPostingParameters</c> object that holds the information for initalization.
    /// </param>
    /// <returns>
    /// The initialized <c>LedgerVoucherTransObject</c> instance.
    ///</returns>
    protected LedgerVoucherTransObject initLedgerVoucherTransObject(
        LedgerVoucherTransObject                  _ledgerVoucherTransObject,
        AssetPostDisposalVoucherPostingParameters _voucherPostingParameters
        )
    {
        _ledgerVoucherTransObject.parmSourceTableId(_voucherPostingParameters.parmAssetTrans().TableId);
        _ledgerVoucherTransObject.parmSourceRecId(_voucherPostingParameters.parmAssetTrans().RecId);
        _ledgerVoucherTransObject.parmText(_voucherPostingParameters.parmAssetTrans().Txt);
        _ledgerVoucherTransObject.parmIsCorrection(_voucherPostingParameters.parmIsCorrection());
        _ledgerVoucherTransObject.parmReasonRefRecID(_voucherPostingParameters.parmAssetTrans().ReasonRefRecId);
        _ledgerVoucherTransObject.parmPaymentReference(_voucherPostingParameters.parmAssetTrans().PaymReference);

        return _ledgerVoucherTransObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postVoucherTransactions</Name>
				<Source><![CDATA[
    protected void postVoucherTransactions(AssetPostDisposalVoucherPostingParameters  _voucherPostingParameters)
    {
        LedgerVoucherObject ledgerVoucherObject;
        LedgerVoucherObject originalLedgerVoucherObject;
        LedgerVoucherTransObject ledgerVoucherTransObject;
        CurrentOperationsTax postingLayer;
        CurrencyExchangeHelper exchangeRateHelper;
        LedgerDimensionAccount mergedLedgerDimension;
        LedgerDimensionDefaultAccount mergedOffsetLedgerDimension;
        TransDate exchangeRateDate;

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

        postingLayer = AssetBookTable::find(_voucherPostingParameters.parmAssetTrans().BookId).CurrentOperationsTax;
        if (ledgerVoucherObject.parmPostingLayer() != postingLayer
            || (isOneVoucherFeatureEnabled
                && ledgerVoucherObject.parmSubledgerVoucher() != _voucherPostingParameters.parmAssetTrans().Voucher))
        {
            // save the original
            originalLedgerVoucherObject = ledgerVoucherObject;

            // search for a posting voucher for the posting layer
            ledgerVoucherObject = ledgerVoucher.findReference(
                _voucherPostingParameters.parmAssetTrans().Voucher,
                originalLedgerVoucherObject.parmAccountingDate(),
                postingLayer);

            if (ledgerVoucherObject == null)
            {
                // create a new posting voucher for the posting layer
                ledgerVoucherObject = LedgerVoucherObject::newReference(
                    _voucherPostingParameters.parmAssetTrans().Voucher,
                    originalLedgerVoucherObject.parmAccountingDate(),
                    originalLedgerVoucherObject.parmSysModule());

                ledgerVoucherObject.parmPostingLayer(postingLayer);
                ledgerVoucherObject.parmDocumentDate(originalLedgerVoucherObject.parmDocumentDate());
                ledgerVoucherObject.parmDocumentNumber(originalLedgerVoucherObject.parmDocumentNumber());
                ledgerVoucherObject.parmJournalCategory(LedgerTransType::FixedAssets);
                ledgerVoucher.addVoucher(ledgerVoucherObject);
            }
        }

        exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::primaryLedger(CompanyInfo::current()),
            ledgerVoucherObject.parmAccountingDate());

        if (_voucherPostingParameters.parmIsDepreciationAdj())
        {
            mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                _voucherPostingParameters.parmLedgerDimension(),
                AssetBook::find(_voucherPostingParameters.parmAssetTrans().AssetId, _voucherPostingParameters.parmAssetTrans().BookId).DefaultDimension);
        }
        else
        {
            mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                _voucherPostingParameters.parmLedgerDimension(),
                _voucherPostingParameters.parmAssetTrans().DefaultDimension);
        }

        if (AssetPostDisposalIsCreditFlight::instance().isEnabled())
        {
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                (this.adjustAmountForCreditNote(_voucherPostingParameters.parmAssetAmount()) > 0 ? any2Enum(LedgerPostingType::FixedAssetsDebit) : any2Enum(LedgerPostingType::FixedAssetsCredit)),
                mergedLedgerDimension,
                _voucherPostingParameters.parmCompanyCurrency(),
                this.adjustAmountForCreditNote(_voucherPostingParameters.parmAssetAmount()),
                exchangeRateHelper);
            if (_voucherPostingParameters.parmAssetAmountReportingCurrency())
            {
                ledgerVoucherTransObject.parmReportingCurrencyAmount(this.adjustAmountForCreditNote(_voucherPostingParameters.parmAssetAmountReportingCurrency()));
            }
        }
        else
        {
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                (_voucherPostingParameters.parmAssetAmount() > 0 ? any2Enum(LedgerPostingType::FixedAssetsDebit) : any2Enum(LedgerPostingType::FixedAssetsCredit)),
                mergedLedgerDimension,
                _voucherPostingParameters.parmCompanyCurrency(),
                _voucherPostingParameters.parmAssetAmount(),
                exchangeRateHelper);
            if (_voucherPostingParameters.parmAssetAmountReportingCurrency())
            {
                ledgerVoucherTransObject.parmReportingCurrencyAmount(_voucherPostingParameters.parmAssetAmountReportingCurrency());
            }
        }

        ledgerVoucherTransObject = this.initLedgerVoucherTransObject(ledgerVoucherTransObject, _voucherPostingParameters);

        exchangeRateDate = AssetBook::find(_voucherPostingParameters.parmAssetTrans().AssetId, _voucherPostingParameters.parmAssetTrans().BookId).exchangeRateDate();
        if (exchangeRateDate)
        {
            ledgerVoucherTransObject.parmHistoricalExchangeRateDate(exchangeRateDate);
        }
        else
        {
            ledgerVoucherTransObject.parmHistoricalExchangeRateDate(_voucherPostingParameters.parmAssetTrans().TransDate);
        }

        this.addTransIntoLedgerVoucher(ledgerVoucherTransObject, ledgerVoucherObject);

        if (_voucherPostingParameters.parmIsDepreciationAdj())
        {
            mergedOffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                _voucherPostingParameters.parmOffsetLedgerDimension(),
                AssetBook::find(_voucherPostingParameters.parmAssetTrans().AssetId, _voucherPostingParameters.parmAssetTrans().BookId).DefaultDimension);
        }
        else if (isDerivedBookPosting && ledgerJournalTransRecId)
        {
            this.parmLedgerJournalTransRecId(ledgerJournalTransRecId);
            mergedOffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                _voucherPostingParameters.parmOffsetLedgerDimension(),
                _voucherPostingParameters.parmAssetTrans().DefaultDimension,
                ledgerJournalTrans.getLedgerJournalTransOffsetDefaultDimensions());
        }
        else if (ledgerJournalTransRecId)
        {
            this.parmLedgerJournalTransRecId(ledgerJournalTransRecId);
            mergedOffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                _voucherPostingParameters.parmOffsetLedgerDimension(),
                ledgerJournalTrans.getLedgerJournalTransOffsetDefaultDimensions(),
                _voucherPostingParameters.parmAssetTrans().DefaultDimension);
        }
        else
        {
            mergedOffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                _voucherPostingParameters.parmOffsetLedgerDimension(),
                _voucherPostingParameters.parmAssetTrans().DefaultDimension);
        }        

        if (AssetPostDisposalIsCreditFlight::instance().isEnabled())
        {
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                (this.adjustAmountForCreditNote(-_voucherPostingParameters.parmAssetAmount()) > 0 ? any2Enum(LedgerPostingType::FixedAssetsDebit) : any2Enum(LedgerPostingType::FixedAssetsCredit)),
                mergedOffsetLedgerDimension,
                    _voucherPostingParameters.parmCompanyCurrency(),
                this.adjustAmountForCreditNote(-_voucherPostingParameters.parmAssetAmount()),
                exchangeRateHelper);
            if (_voucherPostingParameters.parmAssetAmountReportingCurrency())
            {
                ledgerVoucherTransObject.parmReportingCurrencyAmount(this.adjustAmountForCreditNote(-_voucherPostingParameters.parmAssetAmountReportingCurrency()));
            }
        }
        else
        {
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                (-_voucherPostingParameters.parmAssetAmount() > 0 ? any2Enum(LedgerPostingType::FixedAssetsDebit) : any2Enum(LedgerPostingType::FixedAssetsCredit)),
                mergedOffsetLedgerDimension,
                    _voucherPostingParameters.parmCompanyCurrency(),
                -_voucherPostingParameters.parmAssetAmount(),
                exchangeRateHelper);
            if (_voucherPostingParameters.parmAssetAmountReportingCurrency())
            {
                ledgerVoucherTransObject.parmReportingCurrencyAmount(-_voucherPostingParameters.parmAssetAmountReportingCurrency());
            }
        }

        ledgerVoucherTransObject = this.initLedgerVoucherTransObject(ledgerVoucherTransObject, _voucherPostingParameters);

        this.addTransIntoLedgerVoucher(ledgerVoucherTransObject, ledgerVoucherObject);

        // <GEERU>
        ledgerVoucher.bondLast2_RU();
        // </GEERU>

        if (originalLedgerVoucherObject != null)
        {
            // change back to the original posting voucher
            ledgerVoucherObject = ledgerVoucher.findReference(
                originalLedgerVoucherObject.parmSubledgerVoucher(),
                originalLedgerVoucherObject.parmAccountingDate(),
                originalLedgerVoucherObject.parmPostingLayer());

            Debug::assert(ledgerVoucherObject != null);
            originalLedgerVoucherObject = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustAmountForCreditNote</Name>
				<Source><![CDATA[
    private Amount adjustAmountForCreditNote(Amount _amount)
    {
        Amount ret = _amount;

        if (AssetPostDisposalIsCreditFlight::instance().isEnabled()
            && this.parmIsCreditNote() == true)
        {
            ret = -1 * _amount;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumPriorFiscalYears</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total depreciation and depreciation adjustment amount for prior years for value
    /// model.
    /// </summary>
    /// <param name="_isClosingPeriod">
    /// A Boolean used to check whether the current period is open or closed.
    /// </param>
    /// <returns>
    /// The prior year depreciation and depreciation adjustment amount.
    /// </returns>
    private AmountMST sumPriorFiscalYears(boolean _isClosingPeriod = false)
    {
        Query query = new Query();
        Query queryCurrentYear = new Query();

        AssetBook assetBook = assetTrans.assetBook();
        AssetBookTable assetBookTable = AssetBookTable::find(assetTrans.BookId);

        AssetTableInterval assetTableInterval = AssetTableInterval::construct(
            AssetDepreciationProfile::find(assetBook.DepreciationProfile),
            assetBookTable.FiscalCalendar);

        TransDate disposalTransDate = this.getDisposalTransDate();

        // For prior year depreciation transactions.
        TransDate transDate = assetTableInterval.openingPeriodDate(disposalTransDate) - 1;
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(AssetTrans));
        queryBuildDataSource.addSelectionField(fieldNum(AssetTrans,AmountMST),SelectionField::Sum);
        queryBuildDataSource.addSelectionField(fieldNum(AssetTrans,RevaluationAmount),SelectionField::Sum);
        // Group by these two fields, so that the sums are performed correctly.
        queryBuildDataSource.addGroupByField(fieldNum(AssetTrans, Reclassification));
        queryBuildDataSource.addGroupByField(fieldNum(AssetTrans, TransType));
        queryBuildDataSource.addRange(fieldNum(AssetTrans,AssetId)).value(assetTrans.AssetId);
        queryBuildDataSource.addRange(fieldNum(AssetTrans,BookId)).value(assetTrans.BookId);
        queryBuildDataSource.addRange(fieldNum(AssetTrans,TransDate)).value(queryRange(0, transDate));

        AmountMST depreciationPriorYears;
        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            AssetTrans assetTransLoc = queryRun.get(tableNum(AssetTrans));
            switch (assetTransLoc.TransType)
            {
                case AssetTransType::Depreciation:
                    depreciationPriorYears = assetTransLoc.AmountMST;
                    break;
            }
        }

        return depreciationPriorYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisposalTransDate</Name>
				<Source><![CDATA[
    private TransDate getDisposalTransDate()
    {
        TransDate disposalTransDate;

        if (ledgerJournalTransRecId)
        {
            this.parmLedgerJournalTransRecId(ledgerJournalTransRecId);
            disposalTransDate = ledgerJournalTrans.TransDate;
        }
        else
        {
            AssetTrans assetTransCheck;

            select firstonly TransDate from assetTransCheck
                order by TransDate
                where assetTransCheck.AssetId == assetTrans.AssetId
                   && assetTransCheck.BookId == assetTrans.BookId
                   && (assetTransCheck.TransType == AssetTransType::DisposalSale
                   || assetTransCheck.TransType == AssetTransType::DisposalScrap);

            if (assetTransCheck)
            {
                disposalTransDate = assetTransCheck.TransDate;
            }
            else
            {
                disposalTransDate = assetTrans.TransDate;
            }
        }

        return disposalTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDepreciationDate_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// update AssetBook table with last depreciation date.
    /// </summary>
    /// <param name="_transDate">
    /// Depreciation Date
    /// </param>
    private void updateDepreciationDate_CN(TransDate _transDate)
    {
        if (_transDate)
        {
            ttsbegin;
            assetBookDisposal.selectForUpdate(true);
            //Set the last depreciation time.
            assetBookDisposal.LastDepreciationDate = _transDate;
            assetBookDisposal.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisposalInLastYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the disposal transaction is the last year of service life of the value model.
    /// </summary>
    /// <param name="_assetBook">
    /// An <c>AssetBook</c> table buffer.
    /// </param>
    /// <param name="_disposalTransDate">
    /// The date of the disposal transaction.
    /// </param>
    /// <returns>
    /// true if the transaction is in the last of the depreciation; otherwise, false .
    /// </returns>
    public static boolean isDisposalInLastYear(AssetBook _assetBook, TransDate _disposalTransDate)
    {
        boolean                     returnValue;
        TransDate                   firstDateOfLastYear;
        int                         yearCount;
        int                         finalYear;
        TransDate                   lastRunDate;
        TransDate                   lastDateOfDepreciation;
        FiscalCalendarRecId         calendarRecId;
        AssetTableDepConv           assetTableDepConv;
        AssetTableInterval          assetTableInterval;
        AssetDepreciationProfile    assetDepreciationProfile;

        lastRunDate         = _assetBook.LastDepreciationDate ? _assetBook.LastDepreciationDate : _assetBook.DepreciationStartDate;
        calendarRecId       = AssetBookTable::find(_assetBook.BookId).getFiscalCalendar();
        assetDepreciationProfile = _assetBook.depreciationProfile();

        if (_assetBook.DepreciationConvention != AssetDepreciationConvention::None)
        {
            assetTableInterval = AssetTableInterval::construct(
                assetDepreciationProfile,
                calendarRecId);

            assetTableDepConv  = AssetTableDepConv::newCalcAssetAmount(
                _assetBook,
                assetTableInterval,
                assetDepreciationProfile);

            lastDateOfDepreciation = assetTableDepConv.getDateOfLastDepreciation(
                _disposalTransDate,
                _assetBook.LifeTimeRest,
                false);

            // Determine if the final year of the depreciation.
            switch (assetDepreciationProfile.DepreciationYear)
            {
                case AssetDepreciationYear::Calendar:
                    if (year(lastDateOfDepreciation) == year(_disposalTransDate))
                    {
                        returnValue = true;
                    }
                    break;

                case AssetDepreciationYear::Fiscal:
                    if (FiscalCalendars::areDatesInSameFiscalYear(
                        calendarRecId,
                        lastDateOfDepreciation,
                        _disposalTransDate))
                    {
                        returnValue = true;
                    }
                    break;
            }
        }
        else
        {
            switch (assetDepreciationProfile.DepreciationYear)
            {
                // Determine the final year of the depreciation.
                case AssetDepreciationYear::Calendar:
                    finalYear = year(_assetBook.AcquisitionDate);
                    yearCount = real2int(_assetBook.ServiceLife) - 1;
                    if (yearCount > 0)
                    {
                        finalYear = finalYear + yearCount;
                    }

                    if (finalYear == year(_disposalTransDate))
                    {
                        returnValue = true;
                    }
                    break;

                case AssetDepreciationYear::Fiscal:
                    firstDateOfLastYear = LedgerFiscalCalendar::findLastDayOfYear(calendarRecId, _assetBook.AcquisitionDate);
                    yearCount = real2int(_assetBook.ServiceLife) - 1;

                    // Loop through each year of the fiscal calendar and determine the first day of that calendar.
                    // Each fiscal calendar is not garunteed that has the same number of days.
                    while (yearCount > 0)
                    {
                        firstDateOfLastYear = LedgerFiscalCalendar::findLastDayOfYear(calendarRecId, firstDateOfLastYear + 1);
                        yearCount--;
                    }

                    if (FiscalCalendars::areDatesInSameFiscalYear(
                        calendarRecId,
                        firstDateOfLastYear,
                        _disposalTransDate))
                    {
                        returnValue = true;
                    }
                    break;
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDerivedBookPosting</Name>
				<Source><![CDATA[
    internal boolean parmIsDerivedBookPosting(boolean _isDerivedBookPosting = isDerivedBookPosting)
    {
        isDerivedBookPosting = _isDerivedBookPosting;
        return isDerivedBookPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransIntoLedgerVoucher</Name>
				<Source><![CDATA[
    private void addTransIntoLedgerVoucher(
        LedgerVoucherTransObject _ledgerVoucherTransObject,
        ledgerVoucherObject _ledgerVoucherObject)
    {
        ledgerVoucher.addTrans(_ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssetPostValue</Name>
				<Source><![CDATA[
    private void validateAssetPostValue(
        AssetTransType _assetTransType,
        AssetId _assetId,
        AssetBookId _assetBookId,
        AssetPostingProfile _assetPostingProfile,
        AssetAmount _amountMST)
    {
        AssetDisposalParameters assetDisposalParameters;
        AssetPostValue assetPostValue;
        AssetGroupId assetGroupId;
        AssetSoldScrap soldScrap;
        AssetPostType assetPostType;

        assetPostValue = this.mappingAssetTransTypeToPostValue(_assetTransType);
        assetGroupId = AssetTable::find(_assetId).AssetGroup;
        soldScrap = this.determineAssetSoldScrap();

        if ((_amountMST + (assetSumAllYears.netBookValue())) < 0)
        {
            assetPostType = AssetPostType::Positive;
        }
        else
        {
            assetPostType = AssetPostType::Negative;
        }

        select assetDisposalParameters
            where assetDisposalParameters.PostValue == assetPostValue &&
                assetDisposalParameters.BookId == _assetBookId &&
                assetDisposalParameters.SoldScrap == soldScrap &&
                assetDisposalParameters.PostingProfile == _assetPostingProfile &&
                (assetDisposalParameters.ValueType      == assetPostType ||
                 assetDisposalParameters.ValueType      == AssetPostType::All) &&
                ((assetDisposalParameters.AssetCode     == TableGroupAll::Table &&
                 assetDisposalParameters.AssetRelation == _assetId) ||
                (assetDisposalParameters.AssetCode     == TableGroupAll::GroupId &&
                 assetDisposalParameters.AssetRelation == assetGroupId) ||
                 assetDisposalParameters.AssetCode     == TableGroupAll::All);

        if (!assetDisposalParameters.RecId
            // <GEEPL>
            && !isPolishContext)
            // </GEEPL>
        {
            throw error(strFmt("@SYS24602","@SYS67345" + '/' +"@SYS67538", assetPostValue));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mappingAssetTransTypeToPostValue</Name>
				<Source><![CDATA[
    private AssetPostValue mappingAssetTransTypeToPostValue(AssetTransType _assetTransType)
    {
        AssetPostValue assetPostValue;

        switch (_assetTransType)
        {
            case AssetTransType::Acquisition:
                assetPostValue = AssetPostValue::Acquisition;
                break;
            case AssetTransType::DepPriorYears:
                assetPostValue = AssetPostValue::DepPriorYears;
                break;
            case AssetTransType::DepThisYear:
                assetPostValue = AssetPostValue::DepThisYear;
                break;
            case AssetTransType::DepAdjPriorYears:
                assetPostValue = AssetPostValue::DepAdjPriorYears;
                break;
            case AssetTransType::DepAdjThisYear:
                assetPostValue = AssetPostValue::DepAdjThisYear;
                break;
            case AssetTransType::NetBookValue:
                assetPostValue = AssetPostValue::NBV;
                break;
            case AssetTransType::AcqAdjThisYear:
                assetPostValue = AssetPostValue::AcqAdjThisYear;
                break;
            case AssetTransType::AcqAdjPriorYears:
                assetPostValue = AssetPostValue::AcqAdjPriorYears;
                break;
            case AssetTransType::AcqThisYear:
                assetPostValue = AssetPostValue::AcqThisYear;
                break;
            case AssetTransType::AcqPriorYears:
                assetPostValue = AssetPostValue::AcqPriorYears;
                break;
            case AssetTransType::RevalueThisYear:
                assetPostValue = AssetPostValue::RevalueThisYear;
                break;
            case AssetTransType::RevaluePriorYears:
                assetPostValue = AssetPostValue::RevaluePriorYear;
                break;
            case AssetTransType::WriteUpAdjThisYear:
                assetPostValue = AssetPostValue::WriteUpAdjThisYear;
                break;
            case AssetTransType::WriteUpAdjPriorYears:
                assetPostValue = AssetPostValue::WriteUpAdjPriorYear;
                break;
            case AssetTransType::WriteDownAdjPriorYears:
                assetPostValue = AssetPostValue::WriteDownAdjPriorYear;
                break;
            case AssetTransType::WriteDownAdjThisYear:
                assetPostValue = AssetPostValue::WriteDownAdjThisYear;
                break;
            case AssetTransType::ExtraDepThisYear:
                assetPostValue = AssetPostValue::ExtraDepThisYear;
                break;
            case AssetTransType::ExtraDepPriorYears:
                assetPostValue = AssetPostValue::ExtraDepPriorYears;
                break;
            case AssetTransType::CapitalReserve:
                assetPostValue = AssetPostValue::CapitalReserve;
                break;
            case AssetTransType::CapitalReserveTransfer:
                assetPostValue = AssetPostValue::CapitalReserveTransfer;
                break;
            case AssetTransType::DerogatoryIncreaseAllYears:
                assetPostValue = AssetPostValue::DerogatoryIncreaseAllYears;
                break;
            case AssetTransType::DerogatoryDecreaseAllYears:
                assetPostValue = AssetPostValue::DerogatoryIncreaseAllYears;
                break;
            case AssetTransType::BonusDepreciation:
                assetPostValue = AssetPostValue::BonusDepreciation;
                break;
            case AssetTransType::DepNotCostPriorYears_PL:
                assetPostValue = AssetPostValue::DepNotCostPriorYears_PL;
                break;
            case AssetTransType::DeprNotCostThisYear_PL:
                assetPostValue = AssetPostValue::DepNotCostThisYear_PL;
                break;
            case AssetTransType::AccDepreciationPriorYears_PL:
                assetPostValue = AssetPostValue::AccDeprPriorYears_PL;
                break;
            case AssetTransType::AccDepreciationThisYear_PL:
                assetPostValue = AssetPostValue::AccDeprThisYear_PL;
                break;
            case AssetTransType::PostOffAccDeprPriorYears_PL:
                assetPostValue = AssetPostValue::PostOffAccDPriorYears_PL;
                break;
            case AssetTransType::PostOffAccDeprThisYear_PL:
                assetPostValue = AssetPostValue::PostOffAccDThisYear_PL;
                break;
            case AssetTransType::PreAcquisition_CZ:
                assetPostValue = AssetPostValue::PreAcquisition_CZ;
                break;
        }

        return assetPostValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetBookTableForInsertTrans</Name>
				<Source><![CDATA[
    private AssetBookTable getAssetBookTableForInsertTrans(AssetBookId _assetBookId)
    {
        if (!assetBookTableForInsertTrans.RecId)
        {
            assetBookTableForInsertTrans = AssetBookTable::find(_assetBookId);
        }

        return assetBookTableForInsertTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDisposalParametersAcquisition</Name>
				<Source><![CDATA[
    private void validateDisposalParametersAcquisition(
        AssetId _assetId,
        AssetBookId _assetBookId,
        AssetPostingProfile _assetPostingProfile,
        AssetPostType _assetPostType,
        AssetSoldScrap _soldScrap,
        AssetGroupId _assetGroupId)
    {
        AssetDisposalParameters _assetDisposalParameters_Acquisition;
        AssetTableGroupAll assetCode_Acquisition;
        AssetRelation assetRelation_Acquisition;

        container postValueType = [AssetPostValue::Acquisition, AssetPostValue::AcqThisYear, AssetPostValue::AcqPriorYears];
        container assetCode = [TableGroupAll::Table, TableGroupAll::GroupId, TableGroupAll::All];
        container assetRelation = [_assetId, _assetGroupId, ''];

        for (int i=1; i <= conLen(assetCode); i++)
        {
            if (!(isAcquisitionThisYear && isAcquisitionPriorYear) && !isAcquisition)
            {
                assetCode_Acquisition = conPeek(assetCode, i);
                assetRelation_Acquisition = conPeek(assetRelation, i);

                while select PostValue from _assetDisposalParameters_Acquisition
                    where _assetDisposalParameters_Acquisition.SoldScrap == _soldScrap
                        && _assetDisposalParameters_Acquisition.PostingProfile == _assetPostingProfile
                        && _assetDisposalParameters_Acquisition.BookId == _assetBookId
                        && _assetDisposalParameters_Acquisition.PostValue in postValueType
                        && (_assetDisposalParameters_Acquisition.ValueType == _assetPostType
                            || _assetDisposalParameters_Acquisition.ValueType == AssetPostType::All)
                        && (_assetDisposalParameters_Acquisition.AssetCode == assetCode_Acquisition
                            && _assetDisposalParameters_Acquisition.AssetRelation == assetRelation_Acquisition)
                {
                    this.setAcquisitionValues(_assetDisposalParameters_Acquisition.PostValue);
                }
            }
        }    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAcquisitionValues</Name>
				<Source><![CDATA[
    private void setAcquisitionValues(AssetPostValue _postValue)
    {
        switch (_postValue)
        {
            case AssetPostValue::Acquisition:
                isAcquisition = true;
                break;
            case AssetPostValue::AcqThisYear:
                isAcquisitionThisYear = true;
                break;
            case AssetPostValue::AcqPriorYears:
                isAcquisitionPriorYear = true;
                break;
        } 
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>