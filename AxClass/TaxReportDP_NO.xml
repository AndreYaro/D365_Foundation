<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportDP_NO</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxReportDP_NO</c> class provides data for the <c>TaxReport_NO</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(TaxReportContract_NO))]
public class TaxReportDP_NO extends SrsReportDataProviderPreProcessTempDB
{
    private TaxReportTmp_NO taxReportTmp_NO;

    // Period Amounts
    private TaxBase taxBaseAmountOutLowRate;
    private TaxBase taxAmountOutLowRate;
    private TaxBase taxBaseAmountImpOfServ;
    private TaxBase taxAmountOutImpOfServ;
    private TaxBase taxAmountInImpOfServ;
    private TaxBase taxAmountInLowRate;
    private TaxBase taxBaseAmountOut;
    private TaxBase taxBaseAmountFree;
    private TaxBase taxBaseAmountOutOfArea;
    private TaxBase taxAmountIn;
    private TaxBase taxAmountout;
    private TaxBase taxBaseAmountOutMidRate;
    private TaxBase taxAmountOutMidRate;
    private TaxBase taxAmountInMidRate;

    // Year Amounts
    private TaxBase taxBaseAmountOutYear;
    private TaxBase taxBaseAmountFreeYear;
    private TaxBase taxBaseAmountOutOfAreaYear;
    private TaxBase taxAmountInYear;
    private TaxBase taxAmountoutYear;
    private TaxBase taxBaseAmountOutMidRateYear;
    private TaxBase taxBaseAmountOutLowRateYear;
    private TaxBase taxAmountOutMidRateYear;
    private TaxBase taxAmountOutLowRateYear;
    private TaxBase taxBaseAmountImpOfServYear;
    private TaxBase taxAmountOutImpOfServYear;
    private TaxBase taxAmountInImpOfServYear;
    private TaxBase taxAmountInMidRateYear;
    private TaxBase taxAmountInLowRateYear;

    private TransDate fromDate;
    private TransDate toDate;
    private TaxPeriod taxPeriod;
    private TaxRepVersion taxRepVersion;
    private TaxVersion taxRepCounter;
    private NoYes updateNow;

    private TaxPeriodAmounts taxPeriodAmounts;
    private TaxPeriodAmounts taxYearAmounts;
    private TransDate dateOfYear;
    private TmpTaxReportById tmpTaxReportById;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxReportDP_NO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the temporary table to retrieve the data table.
    /// </summary>
    /// <returns>
    /// The required report data from the temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TaxReportTmp_NO))]
    public TaxReportTmp_NO getTaxReportDP_NO()
    {
        select taxReportTmp_NO;
        return taxReportTmp_NO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>TaxReportTmp_NO</c> temporary table.
    /// </summary>
    public void processReport()
    {
        TaxReportContract_NO contract = this.parmDataContract() as TaxReportContract_NO;

        fromDate = contract.parmTaxFromDateContract();
        toDate = contract.parmTaxToDateContract();
        taxPeriod = contract.parmTaxPeriodContract();
        updateNow = contract.parmUpdateNow();
        taxRepCounter = contract.parmTaxRepCounterContract();
        taxRepVersion = contract.parmTaxRepVerisonContract();

        this.initAmounts();
        this.insertIntoTmpTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpTable</Name>
				<Source><![CDATA[
    public void insertIntoTmpTable()
    {
        Name companyName = CompanyInfo::find().name();
        char plusSign = '+';
        char minusSign = '-';

        taxReportTmp_NO.Text = "@SYS96566";
        taxReportTmp_NO.DatePeriod = fromDate;
        taxReportTmp_NO.DateYear = toDate;
        taxReportTmp_NO.Text2 = strfmt('%1',taxRepVersion);
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId = 0;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS26398";
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS77648";
        taxReportTmp_NO.Sign = ' ';
        taxReportTmp_NO.PeriodAmount = -(taxBaseAmountOut + taxBaseAmountOutMidRate + taxBaseAmountOutLowRate + taxBaseAmountFree + taxBaseAmountOutOfArea);
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS77660";
        taxReportTmp_NO.Sign = ' ';
        taxReportTmp_NO.PeriodAmount = -(taxBaseAmountOut + taxBaseAmountOutMidRate + taxBaseAmountOutLowRate + taxBaseAmountFree);
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS77649";
        taxReportTmp_NO.Sign = ' ';
        taxReportTmp_NO.PeriodAmount = -taxBaseAmountFree;
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS77650";
        taxReportTmp_NO.Sign = ' ';
        taxReportTmp_NO.PeriodAmount = -(taxBaseAmountOut);
        taxReportTmp_NO.Sign2 = plusSign;
        taxReportTmp_NO.Tax = -(taxAmountout);
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS96568";
        taxReportTmp_NO.Sign = ' ';
        taxReportTmp_NO.PeriodAmount = -taxBaseAmountOutMidRate;
        taxReportTmp_NO.Sign2 = plusSign;
        taxReportTmp_NO.Tax = -taxAmountOutMidRate;
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS77653";
        taxReportTmp_NO.Sign = ' ';
        taxReportTmp_NO.PeriodAmount = -taxBaseAmountOutLowRate;
        taxReportTmp_NO.Sign2 = plusSign;
        taxReportTmp_NO.Tax = -taxAmountOutLowRate;
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS77654";
        taxReportTmp_NO.Sign = ' ';
        taxReportTmp_NO.PeriodAmount = taxBaseAmountImpOfServ;
        taxReportTmp_NO.Sign2 = plusSign;
        taxReportTmp_NO.Tax = taxAmountOutImpOfServ;
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS77652";
        taxReportTmp_NO.Sign2 = minusSign;
        taxReportTmp_NO.Tax = taxAmountIn + taxAmountInImpOfServ;
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS96569";
        taxReportTmp_NO.Sign2 = minusSign;
        taxReportTmp_NO.Tax = taxAmountInMidRate;
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS77655";
        taxReportTmp_NO.Sign2 = minusSign;
        taxReportTmp_NO.Tax = taxAmountInLowRate;
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();
        // 72 true
        taxReportTmp_NO.Sign2 = minusSign;
        taxReportTmp_NO.Tax = (-taxAmountout - taxAmountOutMidRate - taxAmountOutLowRate + taxAmountOutImpOfServ) - (taxAmountIn + taxAmountInImpOfServ + taxAmountInMidRate + taxAmountInLowRate);
        taxReportTmp_NO.CompanyName = companyName;
        if (taxReportTmp_NO.Tax < 0)
        {
            taxReportTmp_NO.Text = "@SYS77656";
        }
        else if (taxReportTmp_NO.Tax > 0)
        {
            taxReportTmp_NO.Text = "@SYS72679";
        }
        else
        {
            taxReportTmp_NO.Text = "@SYS77658";
        }
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        //Blank Lines
        taxReportTmp_NO.Text = '';
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = '';
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = '';
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = '';
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = '';
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS96567";
        taxReportTmp_NO.DatePeriod = TaxPeriodAmounts::startDateOfYear(fromDate);
        taxReportTmp_NO.DateYear = toDate;
        taxReportTmp_NO.Text2 = strfmt('%1',TaxRepVersion::Total);
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS26398";
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS77648";
        taxReportTmp_NO.Sign = ' ';
        taxReportTmp_NO.PeriodAmount = -(taxBaseAmountOutYear + taxBaseAmountOutMidRateYear + taxBaseAmountOutLowRateYear + taxBaseAmountFreeYear + taxBaseAmountOutOfAreaYear);
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS77660";
        taxReportTmp_NO.Sign = ' ';
        taxReportTmp_NO.PeriodAmount = -(taxBaseAmountOutYear + taxBaseAmountOutMidRateYear + taxBaseAmountOutLowRateYear + taxBaseAmountFreeYear);
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS77649";
        taxReportTmp_NO.Sign = ' ';
        taxReportTmp_NO.PeriodAmount = -taxBaseAmountFreeYear;
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS77650";
        taxReportTmp_NO.Sign = ' ';
        taxReportTmp_NO.PeriodAmount = -(taxBaseAmountOutYear);
        taxReportTmp_NO.Sign2 = plusSign;
        taxReportTmp_NO.Tax = -(taxAmountoutYear);
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS96568";
        taxReportTmp_NO.Sign = ' ';
        taxReportTmp_NO.PeriodAmount = -taxBaseAmountOutMidRateYear;
        taxReportTmp_NO.Sign2 = plusSign;
        taxReportTmp_NO.Tax = -taxAmountOutMidRateYear;
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS77653";
        taxReportTmp_NO.Sign = ' ';
        taxReportTmp_NO.PeriodAmount = -taxBaseAmountOutLowRateYear;
        taxReportTmp_NO.Sign2 = plusSign;
        taxReportTmp_NO.Tax = -taxAmountOutLowRateYear;
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS77654";
        taxReportTmp_NO.Sign = ' ';
        taxReportTmp_NO.PeriodAmount = taxBaseAmountImpOfServYear;
        taxReportTmp_NO.Sign2 = plusSign;
        taxReportTmp_NO.Tax = taxAmountOutImpOfServYear;
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS77652";
        taxReportTmp_NO.Sign2 = minusSign;
        taxReportTmp_NO.Tax = taxAmountInYear + taxAmountInImpOfServYear;
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS96569";
        taxReportTmp_NO.Sign2 = minusSign;
        taxReportTmp_NO.Tax = taxAmountInMidRateYear;
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = "@SYS77655";
        taxReportTmp_NO.Sign2 = minusSign;
        taxReportTmp_NO.Tax = taxAmountInLowRateYear;
        taxReportTmp_NO.CompanyName = companyName;
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Sign2 = minusSign;
        taxReportTmp_NO.Tax = (-taxAmountoutYear - taxAmountOutMidRateYear - taxAmountOutLowRateYear + taxAmountOutImpOfServYear) - (taxAmountInYear + taxAmountInImpOfServYear + taxAmountInMidRateYear + taxAmountInLowRateYear);
        taxReportTmp_NO.CompanyName = companyName;
        if (taxReportTmp_NO.Tax < 0)
        {
            taxReportTmp_NO.Text = "@SYS77656";
        }
        else if (taxReportTmp_NO.Tax > 0)
        {
            taxReportTmp_NO.Text = "@SYS72679";
        }
        else
        {
            taxReportTmp_NO.Text = "@SYS77658";
        }
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        // Blank Lines
        taxReportTmp_NO.Text = '';
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = '';
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = '';
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = '';
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();

        taxReportTmp_NO.Text = '';
        taxReportTmp_NO.TaxId += 1;
        taxReportTmp_NO.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount values.
    /// </summary>
    private void initAmounts()
    {
        taxPeriodAmounts = TaxPeriodAmounts::construct(fromDate, toDate, taxPeriod, taxRepVersion, taxRepCounter, updateNow);

        tmpTaxReportById = TaxTrans::taxAmountByReportId_Table(fromDate, toDate, taxPeriod, taxRepVersion, taxRepCounter, updateNow);

        taxBaseAmountOutOfArea = this.amountReportId(11);
        taxBaseAmountFree = this.amountReportId(31);
        taxBaseAmountOut = this.amountReportId(41);
        taxAmountout = this.amountReportId(42);
        taxBaseAmountOutMidRate = this.amountReportId(51);
        taxAmountOutMidRate = this.amountReportId(52);
        taxBaseAmountOutLowRate = this.amountReportId(61);
        taxAmountOutLowRate = this.amountReportId(62);
        taxBaseAmountImpOfServ = this.amountReportId(71);
        taxAmountOutImpOfServ = this.amountReportId(72);
        taxAmountInImpOfServ = this.amountReportId(72,true);
        taxAmountIn = this.amountReportId(821,true);
        taxAmountInMidRate = this.amountReportId(92,true);
        taxAmountInLowRate = this.amountReportId(102,true);

        dateOfYear = TaxPeriodAmounts::startDateOfYear(fromDate);

        taxYearAmounts = TaxYearAmounts::construct(fromDate, toDate, taxPeriod, taxRepVersion, taxRepCounter);

        tmpTaxReportById = null;

        tmpTaxReportById = this.taxAmountByReportId_TableYear(dateOfYear, fromDate, taxPeriod);

        taxBaseAmountOutOfAreaYear = this.amountReportId(11);
        taxBaseAmountFreeYear = this.amountReportId(31);
        taxBaseAmountOutYear = this.amountReportId(41);
        taxAmountoutYear = this.amountReportId(42);
        taxBaseAmountOutMidRateYear = this.amountReportId(51);
        taxAmountOutMidRateYear = this.amountReportId(52);
        taxBaseAmountOutLowRateYear = this.amountReportId(61);
        taxAmountOutLowRateYear = this.amountReportId(62);
        taxBaseAmountImpOfServYear = this.amountReportId(71);
        taxAmountOutImpOfServYear = this.amountReportId(72);
        taxAmountInImpOfServYear = this.amountReportId(72,true);
        taxAmountInYear = this.amountReportId(821,true);
        taxAmountInMidRateYear = this.amountReportId(92,true);
        taxAmountInLowRateYear = this.amountReportId(102,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountByReportId_TableYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the tax report by ID value.
    /// </summary>
    /// <param name="_fromDate">
    /// The from date to use to retrieve the tax report ID.
    /// </param>
    /// <param name="_toDate">
    /// The to date to use to retrieve the tax report ID.
    /// </param>
    /// <param name="_taxPeriod">
    /// The tax period to use to retrieve the ax report ID.
    /// </param>
    /// <returns>
    /// The <c>tmpTaxReportByIdYear</c> value.
    /// </returns>
    public TmpTaxReportById taxAmountByReportId_TableYear(TransDate _fromDate, TransDate _toDate, TaxPeriod _taxPeriod)
    {
        TaxTrans taxTrans;
        TmpTaxReportById tmpTaxReportByIdYear;
        DebCredProposal debitCredit = DebCredProposal::None;
        TransDate tillDate = TaxReportPeriod::find(_taxPeriod,_toDate).ToDate;

        ttsbegin;

        if (debitCredit == DebCredProposal::None || debitCredit == DebCredProposal::Debit)
        {
            // Selects only transactions there isn´t caused by credit notes.
            while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST)
                 from taxTrans
                 group by TaxDirection, TaxCode, TaxOrigin
                 where taxTrans.TransDate >= _fromDate &&
                       taxTrans.TransDate <= tillDate &&
                       taxTrans.TaxPeriod == _taxPeriod &&
                       taxTrans.Source != TaxModuleType::Tax &&
                      (((taxTrans.TaxBaseAmount > 0 || taxTrans.TaxAmount > 0) &&
                        taxTrans.TaxOrigin != TaxOrigin::TaxReversed &&
                       (taxTrans.TaxDirection == TaxDirection::IncomingTax ||
                        taxTrans.TaxDirection == TaxDirection::UseTax ||
                        taxTrans.TaxDirection == TaxDirection::TaxTransaction)) ||
                      ((taxTrans.TaxBaseAmount < 0 || taxTrans.TaxAmount < 0) &&
                        taxTrans.TaxOrigin == TaxOrigin::TaxReversed &&
                       (taxTrans.TaxDirection == TaxDirection::IncomingTax ||
                        taxTrans.TaxDirection == TaxDirection::UseTax ||
                        taxTrans.TaxDirection == TaxDirection::TaxTransaction)) ||
                       ((taxTrans.TaxBaseAmount < 0 || taxTrans.TaxAmount < 0) &&
                        taxTrans.TaxOrigin != TaxOrigin::TaxReversed &&
                       (taxTrans.TaxDirection == TaxDirection::OutgoingTax ||
                        taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase ||
                        taxTrans.TaxDirection == TaxDirection::TaxExemptSales)) ||
                       ((taxTrans.TaxBaseAmount > 0 || taxTrans.TaxAmount > 0) &&
                        taxTrans.TaxOrigin == TaxOrigin::TaxReversed &&
                       (taxTrans.TaxDirection == TaxDirection::OutgoingTax ||
                        taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase ||
                        taxTrans.TaxDirection == TaxDirection::TaxExemptSales)))

            {
                tmpTaxReportByIdYear = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportByIdYear, NoYes::No, null, TaxReportLayout::Norway);
            }
        }

        if (debitCredit == DebCredProposal::None || debitCredit == DebCredProposal::Credit)
        {
            // Selects only transactions there is caused by credit notes.
            while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST)
                 from taxTrans
                 group by TaxDirection, TaxCode
                 where taxTrans.TransDate >= _fromDate &&
                       taxTrans.TransDate <= tillDate &&
                       taxTrans.TaxPeriod == _taxPeriod &&
                       taxTrans.Source != TaxModuleType::Tax &&
                      (((taxTrans.TaxBaseAmount < 0 || taxTrans.TaxAmount < 0) &&
                        taxTrans.TaxOrigin != TaxOrigin::TaxReversed &&
                       (taxTrans.TaxDirection == TaxDirection::IncomingTax ||
                        taxTrans.TaxDirection == TaxDirection::UseTax)) ||
                       ((taxTrans.TaxBaseAmount > 0 || taxTrans.TaxAmount > 0) &&
                        taxTrans.TaxOrigin == TaxOrigin::TaxReversed &&
                       (taxTrans.TaxDirection == TaxDirection::IncomingTax ||
                        taxTrans.TaxDirection == TaxDirection::UseTax)) ||
                       ((taxTrans.TaxBaseAmount > 0 || taxTrans.TaxAmount > 0) &&
                        taxTrans.TaxOrigin != TaxOrigin::TaxReversed &&
                       (taxTrans.TaxDirection == TaxDirection::OutgoingTax ||
                        taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase ||
                        taxTrans.TaxDirection == TaxDirection::TaxExemptSales)) ||
                       ((taxTrans.TaxBaseAmount < 0 || taxTrans.TaxAmount < 0) &&
                        taxTrans.TaxOrigin == TaxOrigin::TaxReversed &&
                       (taxTrans.TaxDirection == TaxDirection::OutgoingTax ||
                        taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase ||
                        taxTrans.TaxDirection == TaxDirection::TaxExemptSales)))
            {
                tmpTaxReportByIdYear = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportByIdYear, NoYes::Yes);
            }
        }

        ttscommit;
        return tmpTaxReportByIdYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountReportId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount value.
    /// </summary>
    /// <param name="_taxReportField">
    /// The tax report field value to use to calculate the amount value.
    /// </param>
    /// <param name="_taxExempt">
    /// The <c>taxExempt</c> conditional value.
    /// </param>
    /// <returns>
    /// The amount value.
    /// </returns>
    public TaxBase amountReportId(TaxReportField _taxReportField, boolean _taxExempt = false)
    {
        select firstonly tmpTaxReportById
            where tmpTaxReportById.TaxReportField == _taxReportField;

        return _taxExempt ? (tmpTaxReportById.Amount - tmpTaxReportById.TaxInCostPrice) : tmpTaxReportById.Amount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>