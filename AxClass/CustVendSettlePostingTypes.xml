<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendSettlePostingTypes</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  This <c>CustVendSettlePostingTypes</c> class is responsible for determining posting types.
/// </summary>
public class CustVendSettlePostingTypes
{
    CustVendTrans custVendTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustOriginalPostingAccountTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list of possible customer posting account types.
    /// </summary>
    /// <returns>
    /// A list of posting account types.
    /// </returns>
    /// <remarks>
    /// During settlements, a payment is typically settled against one or more invoices.  This method will
    /// create a list of possible posting types that the invoice(s) could have used.
    /// </remarks>
    protected List getCustOriginalPostingAccountTypes()
    {
        List ledgerPostingTypes = new List(Types::Enum);

        if (CustVendTransDistributionController::custVendTransHasSourceDocumentData(custVendTrans))
        {
            if (this.isProjectRelated())
            {
                ledgerPostingTypes.addEnd(LedgerPostingType::ProjTurnover);
            }
            else
            {
                ledgerPostingTypes.addEnd(LedgerPostingType::CustRevenue);
            }
        }
        else
        {
            switch (custVendTrans.TransType)
            {
                case LedgerTransType::GeneralJournal:
                case LedgerTransType::None:
                case LedgerTransType::Payment:

                    ledgerPostingTypes.addEnd(LedgerPostingType::Bank);
                    ledgerPostingTypes.addEnd(LedgerPostingType::LedgerJournal);
                    ledgerPostingTypes.addEnd(LedgerPostingType::InterCompany);
                    ledgerPostingTypes.addEnd(LedgerPostingType::FixedAssetsDebit);
                    ledgerPostingTypes.addEnd(LedgerPostingType::FixedAssetsCredit);
                    ledgerPostingTypes.addEnd(LedgerPostingType::ProjCost);
                    ledgerPostingTypes.addEnd(LedgerPostingType::ProjWIPCost);
                    break;

                case LedgerTransType::Project:

                    ledgerPostingTypes.addEnd(LedgerPostingType::ProjOnAccount);
                    ledgerPostingTypes.addEnd(LedgerPostingType::ProjTurnover);
                    ledgerPostingTypes.addEnd(LedgerPostingType::ProjWIPInvoicedOnAccount);
                    break;

               case LedgerTransType::Cust:

                    ledgerPostingTypes.addEnd(LedgerPostingType::SalesRevenue);
                    ledgerPostingTypes.addEnd(LedgerPostingType::SalesDisc);
                    ledgerPostingTypes.addEnd(LedgerPostingType::CustReimbursement);
                    break;

                default:

                    ledgerPostingTypes.addEnd(ledgerPostingType::SalesRevenue);
                    ledgerPostingTypes.addEnd(ledgerPostingType::SalesDisc);
                    break;
            }
        }

        return ledgerPostingTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectRelated</Name>
				<Source><![CDATA[
    private boolean isProjectRelated()
    {
        SubledgerJournalEntry subledgerJournalEntry;
        SubledgerJournalAccountEntry subledgerJournalAccountEntry;

        select RecId from subledgerJournalAccountEntry 
            join subledgerJournalEntry 
                where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
                    && subledgerJournalEntry.Voucher == custVendTrans.Voucher 
                    && subledgerJournalEntry.VoucherDataAreaId == custVendTrans.DataArea
                    && subledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjTurnover;

        return subledgerJournalAccountEntry.Recid != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalPostingAccountTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets a list of original possible expense or revenue posting types for the invoice.
    /// </summary>
    /// <returns>
    ///  A list of posting types.
    /// </returns>
    public List getOriginalPostingAccountTypes()
    {
        List ledgerPostingTypes;

        switch (custVendTrans.TableId)
        {
            case tableNum(VendTrans):
                ledgerPostingTypes = this.getVendOriginalPostingAccountTypes();
                break;
            case tableNum(CustTrans):
                ledgerPostingTypes = this.getCustOriginalPostingAccountTypes();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return ledgerPostingTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendOriginalPostingAccountTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list of possible vendor posting account types.
    /// </summary>
    /// <returns>
    /// A list of posting account types.
    /// </returns>
    /// <remarks>
    /// During settlements, a payment is typically settled against one or more invoices.  This method will
    /// create a list of possible posting types that the invoice(s) could have used.
    /// </remarks>
    protected List getVendOriginalPostingAccountTypes()
    {
        List ledgerPostingTypes = new List(Types::Enum);

        if (CustVendTransDistributionController::custVendTransHasSourceDocumentData(custVendTrans))
        {
            if (custVendTrans.TransType == LedgerTransType::Payment && custVendTrans.CompanyBankAccountId)
            {
                ledgerPostingTypes.addEnd(ledgerPostingType::Bank);
            }
            else
            {
                ledgerPostingTypes.addEnd(LedgerPostingType::PurchExpense);
                ledgerPostingTypes.addEnd(LedgerPostingType::PurchAdvance);
                ledgerPostingTypes.addEnd(LedgerPostingType::ProjCost);
                ledgerPostingTypes.addEnd(LedgerPostingType::PurchReceipt);
                ledgerPostingTypes.addEnd(LedgerPostingType::PurchConsump);
                ledgerPostingTypes.addEnd(LedgerPostingType::PurchStdCostPurchasePriceVariance);
                ledgerPostingTypes.addEnd(ledgerPostingType::PurchDisc);
                ledgerPostingTypes.addEnd(LedgerPostingType::ProdLeanWIPServiceReceipt);
                ledgerPostingTypes.addEnd(LedgerPostingType::ProjStatusAccountItem);
                ledgerPostingTypes.addEnd(LedgerPostingType::ProjWIPCostvalue);
            }
        }
        else
        {
            ledgerPostingTypes.addEnd(LedgerPostingType::Bank);
            ledgerPostingTypes.addEnd(LedgerPostingType::LedgerJournal);
            ledgerPostingTypes.addEnd(LedgerPostingType::InterCompany);
            ledgerPostingTypes.addEnd(LedgerPostingType::ProjCost);
            ledgerPostingTypes.addEnd(LedgerPostingType::ProjWIPCost);
            ledgerPostingTypes.addEnd(LedgerPostingType::ProjWIPCostvalue);
            ledgerPostingTypes.addEnd(LedgerPostingType::FixedAssetsDebit);
            ledgerPostingTypes.addEnd(LedgerPostingType::FixedAssetsCredit);
        }

        return ledgerPostingTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendTrans</Name>
				<Source><![CDATA[
    private CustVendTrans parmCustVendTrans(CustVendTrans _custVendTrans = custVendTrans)
    {
        custVendTrans = _custVendTrans;

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes an instance of the <c>CustVendSettlePostingTypes</c> class.
    /// </summary>
    /// <param name="_custVendTrans">
    ///  An instance of <c>CustVendTrans</c> that identifies the invoice transaction.
    /// </param>
    /// <returns>
    /// An instance of the <c>CustVendSettlePostingTypes</c> class.
    /// </returns>
    public static CustVendSettlePostingTypes construct(CustVendTrans _custVendTrans)
    {
        CustVendSettlePostingTypes custVendSettlePostingTypes;

        custVendSettlePostingTypes = new custVendSettlePostingTypes();
        custVendSettlePostingTypes.parmCustVendTrans(_custVendTrans);

        return custVendSettlePostingTypes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>