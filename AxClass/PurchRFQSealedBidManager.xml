<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSealedBidManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchRFQSealedBidManager</c> class is used to seal and unseal Bids.
/// </summary>
internal final class PurchRFQSealedBidManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal final static void main(Args _args)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        PurchRFQCaseTable purchRFQCaseTable = _args.record() as PurchRFQCaseTable;

        if(!purchRFQCaseTable.RecId)
        {
            throw error(error::missingRecord(tableStr(PurchRFQCaseTable)));
        }

        if (_args.menuItemName() == menuitemActionStr(PurchRFQCaseUnsealBids) &&
            Box::yesNo("@EPR4460198", DialogButton::Yes) == DialogButton::Yes)
        {
            Args arg = new Args();
            arg.record(purchRFQCaseTable);
            PurchRFQSealedBidUnsealingController::main(arg);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTempTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record in reply temporary tables for the given RFQ Id.
    /// </summary>
    /// <param name = "_purchRFQTmpSealedReplyTable">The buffer of the <c>PurchRFQTmpSealedReplyTable</c> table</param>
    /// <param name = "_purchRFQTmpSealedReplyLine">The buffer of the <c>PurchRFQTmpSealedReplyLine</c> table</param>
    /// <param name = "_sealedBidEncryptionManager">The <c>PurchRFQSealedBidEncryptionManager</c> object instance.</param>
    /// <param name = "_sealedAuditLogParameters">The object containing audit log parameters.</param>
    /// <param name = "_fillOnlyTmpLines">true, If we don't want to fill the temporary header but only temporary table lines.</param>
    [Hookable(false), Wrappable(false)]
    internal final static void fillTempTables(PurchRFQTmpSealedReplyTable _purchRFQTmpSealedReplyTable
                                             , PurchRFQTmpSealedReplyLine _purchRFQTmpSealedReplyLine
                                             , PurchRFQSealedBidEncryptionManager _sealedBidEncryptionManager
                                             , PurchRFQSealedAuditLogParameters _sealedAuditLogParameters
                                             , boolean _fillOnlyTmpLines = false)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        if (!_fillOnlyTmpLines)
        {
            delete_from _purchRFQTmpSealedReplyTable;
        }
        delete_from _purchRFQTmpSealedReplyLine;
        
        PurchRFQSealedReplyTable purchRFQSealedReplyTable;
        PurchRFQReplyTable purchRFQReplyTable;

        select firstonly purchRFQSealedReplyTable
            exists join RecId from purchRFQReplyTable
            where purchRFQSealedReplyTable.PurchRFQReplyTable == purchRFQReplyTable.RecId
                && purchRFQReplyTable.RFQId == _sealedBidEncryptionManager.parmRFQReplyId();

        PurchRFQSealedAuditLogParameters localPurchRFQSealedAuditLogParameters = PurchRFQSealedAuditLogParameters::construct(_sealedAuditLogParameters.parmActivity(),
            _sealedAuditLogParameters.parmCanCreatePurchRFQEncryptionAuditLogEntry());

        if (!purchRFQSealedReplyTable)
        {
            if (!_fillOnlyTmpLines)
            {
                PurchRFQSealedBidManager::fillReplyTmpTableFromRFQTable(_purchRFQTmpSealedReplyTable, _sealedBidEncryptionManager, localPurchRFQSealedAuditLogParameters);
            }

            if (localPurchRFQSealedAuditLogParameters.parmCanCreatePurchRFQEncryptionAuditLogEntry())
            {
                localPurchRFQSealedAuditLogParameters.parmCanCreatePurchRFQEncryptionAuditLogEntry(false);
            }

            PurchRFQSealedBidManager::fillReplyTmpLineFromRFQLine(_purchRFQTmpSealedReplyLine, _sealedBidEncryptionManager, localPurchRFQSealedAuditLogParameters);
        }
        else
        {
            unchecked(Uncheck::TableSecurityPermission)
            {
                if (!_fillOnlyTmpLines)
                {
                    PurchRFQSealedBidManager::fillTmpReplyTableFromSealedReplyTable(purchRFQSealedReplyTable
                                                                                   , _purchRFQTmpSealedReplyTable
                                                                                   , _sealedBidEncryptionManager
                                                                                   , localPurchRFQSealedAuditLogParameters);
                }

                if (localPurchRFQSealedAuditLogParameters.parmCanCreatePurchRFQEncryptionAuditLogEntry())
                {
                    localPurchRFQSealedAuditLogParameters.parmCanCreatePurchRFQEncryptionAuditLogEntry(false);
                }

                PurchRFQSealedReplyLine purchRFQSealedReplyLine;
                PurchRFQReplyLine purchRFQReplyLine;                 

                while select purchRFQSealedReplyLine
                    exists join RecId from purchRFQReplyLine
                    where purchRFQSealedReplyLine.PurchRFQReplyLine == purchRFQReplyLine.RecId
                        && purchRFQReplyLine.RFQId == _sealedBidEncryptionManager.parmRFQReplyId()
                {
                    PurchRFQSealedBidManager::fillTmpReplyLineFromSealedReplyLine(purchRFQSealedReplyLine
                                                                                 , _purchRFQTmpSealedReplyLine
                                                                                 , _sealedBidEncryptionManager
                                                                                 , localPurchRFQSealedAuditLogParameters);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReplyTmpLineFromRFQLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record in reply line temporary table for the given RFQ Id.
    /// </summary>
    /// <param name = "_purchRFQTmpSealedReplyLine">The buffer of the <c>PurchRFQTmpSealedReplyLine</c> table</param>
    /// <param name = "_sealedBidEncryptionManager">The <c>PurchRFQSealedBidEncryptionManager</c> object instance.</param>
    /// <param name = "_sealedAuditLogParameters">The object containing audit log parameters.</param>
    [Hookable(false), Wrappable(false)]
    internal final static void fillReplyTmpLineFromRFQLine(PurchRFQTmpSealedReplyLine _purchRFQTmpSealedReplyLine
                                                          , PurchRFQSealedBidEncryptionManager _sealedBidEncryptionManager
                                                          , PurchRFQSealedAuditLogParameters _sealedAuditLogParameters)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        PurchRFQTable purchRFQTable;
        PurchRFQLine purchRFQLine;
        PurchRFQReplyLine purchRFQReplyLine;
        PurchRFQSealedReplyLine purchRFQSealedReplyLine;
       
        insert_recordset _purchRFQTmpSealedReplyLine
            (RFQReplyLine, IsAlternate, RequestedDeliveryDate, RequestedExternalItemId, RequestedLineAmount, RequestedLineDisc, RequestedLinePercent,
             RequestedMultiLnDisc, RequestedMultiLnPercent, RequestedName, Name, RequestedPdsCWQty, RequestedPriceUnit, RequestedPurchMarkup, RequestedPurchPrice,
             RequestedPurchQty, RequestedPurchUnit, RequestedCategoryId, RequestedLineType, RequestedItemName, ItemName, RequestedItemId, RequestedRFQCaseLineLineNumber,
             DeliveryDate, LineAmount, LineDisc, LinePercent, MultiLnDisc, MultiLnPercent, PdsCWQty, PriceUnit, PurchMarkup, PurchPrice,
             PurchQty, PurchUnit)
            select RecId from purchRFQReplyLine
                join IsAlternate, DeliveryDate, ExternalItemId, LineAmount, LineDisc, LinePercent, MultiLnDisc, MultiLnPercent, Name, Name, PdsCWQty,
                PriceUnit, PurchMarkup, PurchPrice, PurchQty, PurchUnit, CategoryId, LineType, ItemName, ItemName, ItemId, RFQCaseLineLineNumber,
                DeliveryDate, LineAmount, LineDisc, LinePercent, MultiLnDisc, MultiLnPercent, PdsCWQty,
                PriceUnit, PurchMarkup, PurchPrice, PurchQty, PurchUnit
                from purchRFQLine
                where purchRFQLine.RFQId == _sealedBidEncryptionManager.parmRFQReplyId()
                    && purchRFQLine.RecId == purchRFQReplyLine.RFQLineRecId;
         
        unchecked(Uncheck::TableSecurityPermission)
        {
            ttsbegin;
            
            PurchRFQSealedReplyLine sealedReplyLine;

            while select _purchRFQTmpSealedReplyLine
                exists join purchRFQReplyLine
                where purchRFQReplyLine.RecId == _purchRFQTmpSealedReplyLine.RFQReplyLine
                    && purchRFQReplyLine.RFQId == _sealedBidEncryptionManager.parmRFQReplyId()
            {
                PurchRFQSealedBidManager::saveSealedReplyLine(_purchRFQTmpSealedReplyLine, _sealedBidEncryptionManager, _sealedAuditLogParameters);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMissingReplyTmpLineFromRFQLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the missing records in reply line temporary table that exists in reply line table but not exists in the reply line temporary table.
    /// </summary>
    /// <param name = "_purchRFQLineRecId">The record Id for the rfq line to be used.</param>
    /// <param name = "_purchRFQTmpSealedReplyLine">The buffer of the <c>PurchRFQTmpSealedReplyLine</c> table.</param>
    /// <param name = "_sealedBidEncryptionManager">The <c>PurchRFQSealedBidEncryptionManager</c> object instance.</param>
    /// <param name = "_sealedAuditLogParameters">The object containing audit log parameters.</param>
    [Hookable(false), Wrappable(false)]
    internal final static void fillMissingReplyTmpLineFromRFQLine(PurchRFQLineRefRecId _purchRFQLineRecId
                                                                 , PurchRFQTmpSealedReplyLine _purchRFQTmpSealedReplyLine
                                                                 , PurchRFQSealedBidEncryptionManager _sealedBidEncryptionManager
                                                                 , PurchRFQSealedAuditLogParameters _sealedAuditLogParameters)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        if (!_purchRFQTmpSealedReplyLine.validateCreateAlternate(_purchRFQLineRecId))
        {
            return;
        }

        PurchRFQLine purchRFQLine;
        PurchRFQReplyLine purchRFQReplyLine;
        PurchRFQTmpSealedReplyLine purchRFQTmpSealedReplyLineForInsert;
        boolean isAlternateLine = true;

        purchRFQTmpSealedReplyLineForInsert.linkPhysicalTableInstance(_purchRFQTmpSealedReplyLine);
       
        insert_recordset purchRFQTmpSealedReplyLineForInsert
            (RFQReplyLine, IsAlternate, RequestedDeliveryDate, RequestedExternalItemId, RequestedLineAmount, RequestedLineDisc, RequestedLinePercent,
             RequestedMultiLnDisc, RequestedMultiLnPercent, RequestedName, Name, RequestedPdsCWQty, RequestedPriceUnit, RequestedPurchMarkup, RequestedPurchPrice,
             RequestedPurchQty, RequestedPurchUnit, RequestedCategoryId, RequestedLineType, RequestedItemName, ItemName, RequestedItemId, RequestedRFQCaseLineLineNumber,
             DeliveryDate, LineAmount, LineDisc, LinePercent, MultiLnDisc, MultiLnPercent, PdsCWQty, PriceUnit, PurchMarkup, PurchPrice,
             PurchQty, PurchUnit)
            select RecId from purchRFQReplyLine
                join isAlternateLine, DeliveryDate, ExternalItemId, LineAmount, LineDisc, LinePercent, MultiLnDisc, MultiLnPercent, Name, Name, PdsCWQty,
                PriceUnit, PurchMarkup, PurchPrice, PurchQty, PurchUnit, CategoryId, LineType, ItemName, ItemName, ItemId, RFQCaseLineLineNumber,
                DeliveryDate, LineAmount, LineDisc, LinePercent, MultiLnDisc, MultiLnPercent, PdsCWQty,
                PriceUnit, PurchMarkup, PurchPrice, PurchQty, PurchUnit
                from purchRFQLine
                where purchRFQLine.RecId == _purchRFQLineRecId
                   && purchRFQLine.RecId == purchRFQReplyLine.RFQLineRecId;

        unchecked(Uncheck::TableSecurityPermission)
        {
            ttsbegin;
            
            PurchRFQSealedReplyLine sealedReplyLine;

            while select _purchRFQTmpSealedReplyLine
                exists join purchRFQReplyLine
                where purchRFQReplyLine.RecId == _purchRFQTmpSealedReplyLine.RFQReplyLine
                    && _purchRFQTmpSealedReplyLine.IsAlternate == NoYes::Yes
            {
                PurchRFQSealedBidManager::saveSealedReplyLine(_purchRFQTmpSealedReplyLine, _sealedBidEncryptionManager, _sealedAuditLogParameters);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAlternateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the alternate line from the sealed reply line and temporary sealed reply line tables.
    /// </summary>
    /// <param name = "_purchRFQTmpSealedReplyLine">The buffer of the <c>PurchRFQTmpSealedReplyLine<c> table.</param>
    [Hookable(false), Wrappable(false)]
    internal final static void removeAlternateLine(PurchRFQTmpSealedReplyLine _purchRFQTmpSealedReplyLine)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();
        
        PurchRFQTmpSealedReplyLine purchRFQTmpSealedReplyLineDelete;
        purchRFQTmpSealedReplyLineDelete.linkPhysicalTableInstance(_purchRFQTmpSealedReplyLine);

        ttsbegin;

        PurchRFQSealedReplyLine purchRFQSealedReplyLine;

		delete_from purchRFQSealedReplyLine
            where purchRFQSealedReplyLine.PurchRFQReplyLine == _purchRFQTmpSealedReplyLine.RFQReplyLine
				&& purchRFQSealedReplyLine.IsAlternate == NoYes::Yes;

        delete_from purchRFQTmpSealedReplyLineDelete
            where purchRFQTmpSealedReplyLineDelete.RecId == _purchRFQTmpSealedReplyLine.RecId
                && purchRFQTmpSealedReplyLineDelete.IsAlternate == NoYes::Yes;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReplyTmpTableFromRFQTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record in reply header temporary table for the given RFQ Id.
    /// </summary>
    /// <param name = "_purchRFQId">The Request for quotation Id to be used.</param>
    /// <param name = "_purchRFQTmpSealedReplyTable">The buffer of the <c>PurchRFQTmpSealedReplyTable</c> table.</param>
    /// <param name = "_sealedBidEncryptionManager">The <c>PurchRFQSealedBidEncryptionManager</c> object instance.</param>
    /// <param name = "_sealedAuditLogParameters">The object containing audit log parameters.</param>
    [Hookable(false), Wrappable(false)]
    internal final static void fillReplyTmpTableFromRFQTable(PurchRFQTmpSealedReplyTable _purchRFQTmpSealedReplyTable
                                                            , PurchRFQSealedBidEncryptionManager _sealedBidEncryptionManager
                                                            , PurchRFQSealedAuditLogParameters _sealedAuditLogParameters)

    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        PurchRFQTable purchRFQTable;
        PurchRFQReplyTable purchRFQReplyTable;
        PurchRFQSealedReplyTable purchRFQSealedReplyTable;
        
        insert_recordset _purchRFQTmpSealedReplyTable
            (RFQReplyTable, VendRef, ValidTo, ValidFrom, CurrencyCode,DeliveryDate, DiscPercent, DlvMode, DlvTerm, Payment, ValidityDateStart, ValidityDateEnd)
            select firstonly RecId, VendRef, ValidTo, ValidFrom from purchRFQReplyTable
                join CurrencyCode, DeliveryDate, DiscPercent, DlvMode, DlvTerm, Payment, ValidityDateStart, ValidityDateEnd
                from purchRFQTable
            where purchRFQReplyTable.RFQId == _sealedBidEncryptionManager.parmRFQReplyId()
                && purchRFQTable.RFQId == _sealedBidEncryptionManager.parmRFQReplyId();

        unchecked(Uncheck::TableSecurityPermission)
        {
            ttsbegin;
            
            select firstonly _purchRFQTmpSealedReplyTable
                exists join purchRFQReplyTable
                where _purchRFQTmpSealedReplyTable.RFQReplyTable == purchRFQReplyTable.RecId
                    && purchRFQReplyTable.RFQId == _sealedBidEncryptionManager.parmRFQReplyId();

            PurchRFQSealedBidManager::saveSealedReplyTable(_purchRFQTmpSealedReplyTable, _sealedBidEncryptionManager, _sealedAuditLogParameters);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRFQReply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets all the records in the reply temporary tables for the given RFQ Id.
    /// </summary>
    /// <param name = "_purchRFQTmpSealedReplyTable">The buffer of the <c>PurchRFQTmpSealedReplyTable</c> table</param>
    /// <param name = "_purchRFQTmpSealedReplyLine">The buffer of the <c>PurchRFQTmpSealedReplyLine</c> table</param>
    /// <param name = "_sealedBidEncryptionManager">The <c>PurchRFQSealedBidEncryptionManager</c> object instance.</param>
    [Hookable(false), Wrappable(false)]
    internal final static void resetRFQReply(PurchRFQTmpSealedReplyTable _purchRFQTmpSealedReplyTable
                                            , PurchRFQTmpSealedReplyLine _purchRFQTmpSealedReplyLine
                                            , PurchRFQSealedBidEncryptionManager _sealedBidEncryptionManager)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();
        
        ttsbegin;

        PurchRFQSealedBidManager::resetTmpReplyTable(_purchRFQTmpSealedReplyTable, _sealedBidEncryptionManager);
        
        while select forupdate _purchRFQTmpSealedReplyLine
        {
            if (_purchRFQTmpSealedReplyLine.IsAlternate == NoYes::Yes)
            {
                PurchRFQSealedBidManager::removeAlternateLine(_purchRFQTmpSealedReplyLine);
            }
			else
            {
                PurchRFQSealedBidManager::resetTmpReplyLine(_purchRFQTmpSealedReplyLine, _sealedBidEncryptionManager);
            }
        }

        ttscommit;       
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTmpReplyLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the record in reply line temporary table for the given RFQ Id.
    /// </summary>
    /// <param name = "_purchRFQTmpSealedReplyLine">The buffer of the <c>PurchRFQTmpSealedReplyLine</c> table</param>
    /// <param name = "_sealedBidEncryptionManager">The <c>PurchRFQSealedBidEncryptionManager</c> object instance.</param>
    [Hookable(false), Wrappable(false)]
    internal final static void resetTmpReplyLine(PurchRFQTmpSealedReplyLine _purchRFQTmpSealedReplyLine
                                                , PurchRFQSealedBidEncryptionManager _sealedBidEncryptionManager)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        ttsbegin;

        PurchRFQSealedReplyLine purchRFQSealedReplyLine;
        
        delete_from purchRFQSealedReplyLine
            where purchRFQSealedReplyLine.PurchRFQReplyLine == _purchRFQTmpSealedReplyLine.RFQReplyLine
                && purchRFQSealedReplyLine.IsAlternate == _purchRFQTmpSealedReplyLine.IsAlternate;
		
        _purchRFQTmpSealedReplyLine.selectForUpdate();
        _purchRFQTmpSealedReplyLine.resetLine();
        _purchRFQTmpSealedReplyLine.update();
        
        unchecked(Uncheck::TableSecurityPermission)
        {
            PurchRFQSealedAuditLogParameters purchRFQSealedAuditLogParameters = PurchRFQSealedAuditLogParameters::construct(PurchRFQReplyActivity::Saved);
            PurchRFQSealedBidManager::saveSealedReplyLine(_purchRFQTmpSealedReplyLine, _sealedBidEncryptionManager, purchRFQSealedAuditLogParameters);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTmpReplyTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the record in reply header temporary tables for the given RFQ Id.
    /// </summary>
    /// <param name = "_purchRFQTmpSealedReplyTable">The buffer of the <c>PurchRFQTmpSealedReplyTable</c> table</param>
    /// <param name = "_sealedBidEncryptionManager">The <c>PurchRFQSealedBidEncryptionManager</c> object instance.</param>
    [Hookable(false), Wrappable(false)]
    internal final static void resetTmpReplyTable(PurchRFQTmpSealedReplyTable _purchRFQTmpSealedReplyTable
                                                 , PurchRFQSealedBidEncryptionManager _sealedBidEncryptionManager)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        PurchRFQSealedReplyTable purchRFQSealedReplyTable;
        PurchRFQReplyTable purchRFQReplyTable;

        delete_from purchRFQSealedReplyTable
            exists join purchRFQReplyTable
            where purchRFQReplyTable.RecId == purchRFQSealedReplyTable.PurchRFQReplyTable
               && purchRFQReplyTable.RFQId == _sealedBidEncryptionManager.parmRFQReplyId();

        PurchRFQTable purchRFQTable;
        select firstonly purchRFQTable
            join purchRFQReplyTable
            where purchRFQReplyTable.RFQId == purchRFQTable.RFQId
                && purchRFQReplyTable.RecId == _purchRFQTmpSealedReplyTable.RFQReplyTable;

        _purchRFQTmpSealedReplyTable.initFromPurchRFQTable(purchRFQTable);
        _purchRFQTmpSealedReplyTable.update();

        unchecked(Uncheck::TableSecurityPermission)
        {
            ttsbegin;
            
            PurchRFQSealedAuditLogParameters sealedAuditLogParameters = purchRFQSealedAuditLogParameters::construct(PurchRFQReplyActivity::Saved);

            PurchRFQSealedBidManager::saveSealedReplyTable(_purchRFQTmpSealedReplyTable, _sealedBidEncryptionManager, sealedAuditLogParameters);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSealedReplyTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the <c>PurchRFQTmpSealedReplyTable</c> tables record in the sealed table.
    /// </summary>
    /// <param name = "_purchRFQTmpSealedReplyTable">The buffer of the <c>PurchRFQTmpSealedReplyTable</c> table</param>
    /// <param name = "_sealedBidEncryptionManager">The <c>PurchRFQSealedBidEncryptionManager</c> object instance.</param>
    /// <param name = "_sealedAuditLogParameters">The object containing audit log parameters.</param>
    [Hookable(false), Wrappable(false)]
    internal final static void saveSealedReplyTable(PurchRFQTmpSealedReplyTable _purchRFQTmpSealedReplyTable
                                                   , PurchRFQSealedBidEncryptionManager _sealedBidEncryptionManager
                                                   , PurchRFQSealedAuditLogParameters _sealedAuditLogParameters)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        if (!PurchRFQReplyTable::existsRecId(_purchRFQTmpSealedReplyTable.RFQReplyTable))
        {
            throw error("@SCM:RFQSealedErrorMessageOnBidSave");
        }

        if (PurchRFQSealedBidManager::checkReplyNotSubmitted(PurchRFQReplyTable::findRecId(_purchRFQTmpSealedReplyTable.RFQReplyTable).RFQId))
        {
            unchecked(Uncheck::TableSecurityPermission)
            {
                ttsbegin;
            
                PurchRFQSealedReplyTable replyTable = PurchRFQSealedReplyTable::findByPurchRFQReplyTable(_purchRFQTmpSealedReplyTable.RFQReplyTable, true);
            
                replyTable.PurchRFQReplyTable = _purchRFQTmpSealedReplyTable.RFQReplyTable;
                replyTable.sealedRecordEdit(true, buf2Con(_purchRFQTmpSealedReplyTable), _sealedBidEncryptionManager, _sealedAuditLogParameters);
                replyTable.write();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSealedReplyLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the <c>PurchRFQTmpSealedReplyLine</c> tables record in the sealed line table.
    /// </summary>
    /// <param name = "_purchRFQTmpSealedReplyLine">The buffer of the <c>PurchRFQTmpSealedReplyLine</c> table</param>
    /// <param name = "_sealedBidEncryptionManager">The <c>PurchRFQSealedBidEncryptionManager</c> object instance.</param>
    /// <param name = "_sealedAuditLogParameters">The object containing audit log parameters.</param>
    [Hookable(false), Wrappable(false)]
    internal final static void saveSealedReplyLine(PurchRFQTmpSealedReplyLine _purchRFQTmpSealedReplyLine
                                                  , PurchRFQSealedBidEncryptionManager _sealedBidEncryptionManager
                                                  , PurchRFQSealedAuditLogParameters _sealedAuditLogParameters)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        if (!PurchRFQReplyLine::existsRecId(_purchRFQTmpSealedReplyLine.RFQReplyLine))
        {
            throw error("@SCM:RFQSealedErrorMessageOnBidSave");
        }

        if (PurchRFQSealedBidManager::checkReplyNotSubmitted(PurchRFQReplyLine::findRecId(_purchRFQTmpSealedReplyLine.RFQReplyLine).RFQId))
        {        
            unchecked(Uncheck::TableSecurityPermission)
            {
                ttsbegin;
        
                PurchRFQSealedReplyLine replyLine = PurchRFQSealedReplyLine::findByPurchRFQReplyLine(
					_purchRFQTmpSealedReplyLine.RFQReplyLine,
					_purchRFQTmpSealedReplyLine.IsAlternate,
					true);

                replyLine.IsAlternate = _purchRFQTmpSealedReplyLine.IsAlternate;
                replyLine.PurchRFQReplyLine = _purchRFQTmpSealedReplyLine.RFQReplyLine;
                replyLine.sealedRecordEdit(true, buf2Con(_purchRFQTmpSealedReplyLine),_sealedBidEncryptionManager,  _sealedAuditLogParameters);
                replyLine.write();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTmpReplyTableFromSealedReplyTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Fills the reply header temporary table from the given sealed request for quotation reply header record.
    /// </summary>
    /// <param name = "_sealedReplyTable">The sealed request for quotation reply header record.</param>
    /// <param name = "_purchRFQTmpSealedReplyTable">The buffer of the <c>PurchRFQTmpSealedReplyTable</c> table</param>
    /// <param name = "_sealedBidEncryptionManager">The <c>PurchRFQSealedBidEncryptionManager</c> object instance.</param>
    /// <param name = "_sealedAuditLogParameters">The object containing audit log parameters.</param>
    [Hookable(false), Wrappable(false)]
    internal final static void fillTmpReplyTableFromSealedReplyTable(PurchRFQSealedReplyTable _sealedReplyTable
                                                                    , PurchRFQTmpSealedReplyTable _purchRFQTmpSealedReplyTable
                                                                    , PurchRFQSealedBidEncryptionManager _sealedBidEncryptionManager
                                                                    , PurchRFQSealedAuditLogParameters _sealedAuditLogParameters)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        ttsbegin;

        PurchRFQTmpSealedReplyTable purchRFQTmpSealedReplyTableLocal = _sealedReplyTable.sealedRecordEdit(false
                                                                                                         , _sealedReplyTable.SealedRecord
                                                                                                         , _sealedBidEncryptionManager
                                                                                                         , _sealedAuditLogParameters);
        purchRFQTmpSealedReplyTableLocal.linkPhysicalTableInstance(_purchRFQTmpSealedReplyTable);
        purchRFQTmpSealedReplyTableLocal.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTmpReplyLineFromSealedReplyLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Fills the reply line temporary table from the given sealed request for quotation reply line record.
    /// </summary>
    /// <param name = "_sealedReplyLine">The sealed request for quotation reply line record.</param>
    /// <param name = "_purchRFQTmpSealedReplyLine">The buffer of the <c>PurchRFQTmpSealedReplyLine</c> table</param>
    /// <param name = "_sealedBidEncryptionManager">The <c>PurchRFQSealedBidEncryptionManager</c> object instance.</param>
    /// <param name = "_sealedAuditLogParameters">The object containing audit log parameters.</param>
    [Hookable(false), Wrappable(false)]
    internal final static void fillTmpReplyLineFromSealedReplyLine(PurchRFQSealedReplyLine _sealedReplyLine
                                                                  , PurchRFQTmpSealedReplyLine _purchRFQTmpSealedReplyLine
                                                                  , PurchRFQSealedBidEncryptionManager _sealedBidEncryptionManager
                                                                  , PurchRFQSealedAuditLogParameters _sealedAuditLogParameters)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        ttsbegin;
        
        PurchRFQTmpSealedReplyLine purchRFQTmpSealedReplyLineLocal = _sealedReplyLine.sealedRecordEdit(false
                                                                                                      , _sealedReplyLine.SealedRecord
                                                                                                      , _sealedBidEncryptionManager
                                                                                                      , _sealedAuditLogParameters);
        purchRFQTmpSealedReplyLineLocal.linkPhysicalTableInstance(_purchRFQTmpSealedReplyLine);
        purchRFQTmpSealedReplyLineLocal.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsealPurchRFQ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unseals an RFQ.
    /// </summary>
    /// <param name="_purchRFQCaseTableRecId">
    /// The case table record ID of the RFQ case to be unsealed.
    /// </param>
    [Hookable(false), Wrappable(false)]
    internal final static void unsealPurchRFQ(PurchRFQCaseRecId _purchRFQCaseTableRecId)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        ttsBegin;
        PurchRFQCaseTable purchRFQCaseTable = PurchRFQCaseTable::findRecId(_purchRFQCaseTableRecId, true);

        if (purchRFQCaseTable)
        {
            purchRFQCaseTable.IsSealed = NoYes::No;
            purchRFQCaseTable.update();

            PurchRFQTmpSealedReplyTable purchRFQTmpSealedReplyTable;
            PurchRFQTmpSealedReplyLine purchRFQTmpSealedReplyLine;
            PurchRFQTable purchRFQTable;

            while select purchRFQTable
                where purchRFQTable.RFQCaseId == purchRFQCaseTable.RFQCaseId
                   && purchRFQTable.StatusHigh == PurchRFQStatus::Received
            {
                PurchRFQSealedAuditLogParameters sealedAuditLogParameters = PurchRFQSealedAuditLogParameters::construct(PurchRFQReplyActivity::Unsealed, true);
                PurchRFQSealedBidEncryptionManager sealedBidEncryptionManager = PurchRFQSealedBidEncryptionManager::newFromPurchRFQReplyTableRecId(PurchRFQReplyTable::find(purchRFQTable.RFQId).RecId);

                PurchRFQSealedBidManager::fillTempTables(purchRFQTmpSealedReplyTable, purchRFQTmpSealedReplyLine, sealedBidEncryptionManager, sealedAuditLogParameters);
                PurchRFQSealedBidManager::createAlternateRFQLineAndReplyLine(purchRFQTmpSealedReplyLine);
                PurchRFQSealedBidManager::updatePurchRFQReplyTable(purchRFQTable.RFQId, purchRFQTmpSealedReplyTable);
                PurchRFQSealedBidManager::updatePurchRFQReplyLine(purchRFQTable.RFQId, purchRFQTmpSealedReplyLine);
            }

            PurchRFQSealedBidManager::deleteSealedRecords(purchRFQCaseTable);
            PurchRFQSealedBidManager::createJournalsForPurchRFQCase(purchRFQCaseTable.RFQCaseId);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAlternateRFQLineAndReplyLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates alternate line record for a given <c>PurchRFQTmpSealedReplyLine</c> table record 
    /// in <c>PurchRFQLine</c> table and <c>PurchRFQReplyLine</c> table
    /// </summary>
    /// <param name="_purchRFQId">
    /// The corresponding RFQId of the reply.
    /// </param>
    /// <param name="_purchRFQTmpSealedReplyLine">
    /// The <c>PurchRFQTmpSealedReplyLine</c> table record.
    /// </param>
    private final static void createAlternateRFQLineAndReplyLine(PurchRFQTmpSealedReplyLine _purchRFQTmpSealedReplyLine)
    {
        PurchRFQLine purchRFQLine;
        PurchRFQReplyLine purchRFQReplyLine;
          
        if (PurchRFQUnsealUseRecIdIndexFlight::instance().isEnabled())
        {
            while select forupdate _purchRFQTmpSealedReplyLine
                index hint RecId
                where _purchRFQTmpSealedReplyLine.IsAlternate == NoYes::Yes
                join purchRFQReplyLine
                    where purchRFQReplyLine.RecId == _purchRFQTmpSealedReplyLine.RFQReplyLine
                join purchRFQLine
                    where purchRFQLine.RecId == purchRFQReplyLine.RFQLineRecId
            {
                PurchRFQLineCreateAlternateParameters createAlternateLineParameters = PurchRFQLineCreateAlternateParameters::construct();
                createAlternateLineParameters.BidType = PurchRFQBidType::Sealed;
                createAlternateLineParameters.ItemName = _purchRFQTmpSealedReplyLine.ItemName;
                createAlternateLineParameters.Name = _purchRFQTmpSealedReplyLine.Name;
            
                PurchRFQLine alternatePurchRFQLine = purchRFQLine.createAlternateLine(createAlternateLineParameters);
            
                PurchRFQReplyLine alternatePurchRFQReplyLine = PurchRFQReplyLine::findRFQLine(alternatePurchRFQLine.RecId);
            
                _purchRFQTmpSealedReplyLine.RFQReplyLine = alternatePurchRFQReplyLine.RecId;
                _purchRFQTmpSealedReplyLine.update();
            }
        }
        else
        {
            while select forupdate _purchRFQTmpSealedReplyLine
                where _purchRFQTmpSealedReplyLine.IsAlternate == NoYes::Yes
                join purchRFQReplyLine
                    where purchRFQReplyLine.RecId == _purchRFQTmpSealedReplyLine.RFQReplyLine
                join purchRFQLine
                    where purchRFQLine.RecId == purchRFQReplyLine.RFQLineRecId
            {
                PurchRFQLineCreateAlternateParameters createAlternateLineParameters = PurchRFQLineCreateAlternateParameters::construct();
                createAlternateLineParameters.BidType = PurchRFQBidType::Sealed;
                createAlternateLineParameters.ItemName = _purchRFQTmpSealedReplyLine.ItemName;
                createAlternateLineParameters.Name = _purchRFQTmpSealedReplyLine.Name;
            
                PurchRFQLine alternatePurchRFQLine = purchRFQLine.createAlternateLine(createAlternateLineParameters);
            
                PurchRFQReplyLine alternatePurchRFQReplyLine = PurchRFQReplyLine::findRFQLine(alternatePurchRFQLine.RecId);
            
                _purchRFQTmpSealedReplyLine.RFQReplyLine = alternatePurchRFQReplyLine.RecId;
                _purchRFQTmpSealedReplyLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchRFQReplyLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unseals a <c>PurchRFQReplyLine</c> record.
    /// </summary>
    /// <param name="_purchRFQId">
    /// The corresponding RFQId of the reply.
    /// </param>
    /// <param name="_purchRFQTmpSealedReplyLine">
    /// The <c>PurchRFQTmpSealedReplyLine</c> table record.
    /// </param>
    private final static void updatePurchRFQReplyLine(PurchRFQId _purchRFQId, PurchRFQTmpSealedReplyLine _purchRFQTmpSealedReplyLine)
    {
        PurchRFQReplyLine purchRFQReplyLine;
        PurchRFQReplyTable purchRFQReplyTable;
        
        Update_recordset purchRFQReplyLine
            setting IsAlternate = _purchRFQTmpSealedReplyLine.IsAlternate,
                Comment = _purchRFQTmpSealedReplyLine.Comment,
                DeliveryDate = _purchRFQTmpSealedReplyLine.DeliveryDate,
                ExternalItemId = _purchRFQTmpSealedReplyLine.ExternalItemId,
                LeadTime = _purchRFQTmpSealedReplyLine.LeadTime,
                LineAmount = _purchRFQTmpSealedReplyLine.LineAmount,
                LineDisc = _purchRFQTmpSealedReplyLine.LineDisc,
                LinePercent = _purchRFQTmpSealedReplyLine.LinePercent,
                MultiLnDisc = _purchRFQTmpSealedReplyLine.MultiLnDisc,
                MultiLnPercent = _purchRFQTmpSealedReplyLine.MultiLnPercent,
                Name = _purchRFQTmpSealedReplyLine.Name,
                PdsCWQty = _purchRFQTmpSealedReplyLine.PdsCWQty,
                PriceUnit = _purchRFQTmpSealedReplyLine.PriceUnit,
                PurchMarkup = _purchRFQTmpSealedReplyLine.PurchMarkup,
                PurchPrice = _purchRFQTmpSealedReplyLine.PurchPrice,
                PurchQty = _purchRFQTmpSealedReplyLine.PurchQty,
                PurchUnit = _purchRFQTmpSealedReplyLine.PurchUnit,
                ValidFrom = _purchRFQTmpSealedReplyLine.ValidFrom,
                ValidTo = _purchRFQTmpSealedReplyLine.ValidTo,
                CalendarDays = _purchRFQTmpSealedReplyLine.CalendarDays
            join _purchRFQTmpSealedReplyLine 
            where _purchRFQTmpSealedReplyLine.RFQReplyLine == purchRFQReplyLine.RecId
                && purchRFQReplyLine.RFQId == _purchRFQId;

        while select purchRFQReplyLine
            where purchRFQReplyLine.RFQId == _purchRFQId
        {
            PurchRFQSealedAttachmentManager::copySealedAttachmentsToDocuRef(purchRFQReplyLine);
            PurchRFQSealedAttachmentManager::unsealAttachmentsForLine(purchRFQReplyLine);            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchRFQReplyTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unseals a <c>PurchRFQReplyTable</c> record.
    /// </summary>
    /// <param name="_purchRFQId">
    /// The corresponding RFQId of the reply.
    /// </param>
    /// <param name="_purchRFQTmpSealedReplyTable">
    /// The <c>PurchRFQTmpSealedReplyTable</c> table record.
    /// </param>
    private final static void updatePurchRFQReplyTable(PurchRFQId _purchRFQId, PurchRFQTmpSealedReplyTable _purchRFQTmpSealedReplyTable)
    {
        PurchRFQReplyTable purchRFQReplyTable;

        Update_recordset purchRFQReplyTable
            setting CurrencyCode = _purchRFQTmpSealedReplyTable.CurrencyCode,
                DeliveryDate = _purchRFQTmpSealedReplyTable.DeliveryDate,
                DiscPercent = _purchRFQTmpSealedReplyTable.DiscPercent,
                DlvMode = _purchRFQTmpSealedReplyTable.DlvMode,
                DlvTerm = _purchRFQTmpSealedReplyTable.DlvTerm,
                Payment = _purchRFQTmpSealedReplyTable.Payment,
                ValidityDateStart = _purchRFQTmpSealedReplyTable.ValidityDateStart,
                ValidityDateEnd = _purchRFQTmpSealedReplyTable.ValidityDateEnd,
                VendRef = _purchRFQTmpSealedReplyTable.VendRef,
                ValidTo = _purchRFQTmpSealedReplyTable.ValidTo,
                ValidFrom = _purchRFQTmpSealedReplyTable.ValidFrom
            join  _purchRFQTmpSealedReplyTable
            where _purchRFQTmpSealedReplyTable.RFQReplyTable == purchRFQReplyTable.RecId
                && purchRFQReplyTable.RFQId == _purchRFQId;

        while select purchRFQReplyTable
            where purchRFQReplyTable.RFQId == _purchRFQId
        {
            PurchRFQSealedAttachmentManager::copySealedAttachmentsToDocuRef(purchRFQReplyTable);
            PurchRFQSealedAttachmentManager::unsealAttachmentsForTable(purchRFQReplyTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalsForPurchRFQCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates RFQ received journal and transactions.
    /// </summary>
    /// <param name="_purchRFQCaseID">
    /// The <c>PurchRFQCaseID</c> record to be used.
    /// </param>
    /// <remarks>
    /// Only creates the journal for the RFQ for which reply has been received.
    /// </remarks>
    private final static void createJournalsForPurchRFQCase(PurchRFQCaseID _purchRFQCaseID)
    {
        PurchRFQReceiveJournalCreate purchRFQReceiveJournalCreate = PurchRFQReceiveJournalCreate::construct();

        PurchRFQTable purchRFQTable;
        while select purchRFQTable
            where purchRFQTable.RFQCaseId  == _purchRFQCaseID
               && purchRFQTable.StatusHigh == PurchRFQStatus::Received
        {
            purchRFQReceiveJournalCreate.parmPurchRFQTable(purchRFQTable);
            purchRFQReceiveJournalCreate.parmUnsealPurchRFQ(true);
            purchRFQReceiveJournalCreate.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSealedRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called to delete all the sealed table records for a RFQ when finalizing an amendment.
    /// </summary>
    /// <param name = "_purchRFQCaseTable">The <c>PurchRFQCaseTable</c> table record.</param>    
    [Hookable(false), Wrappable(false)]
    internal final static void deleteSealedRecords(PurchRFQCaseTable _purchRFQCaseTable)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        PurchRFQSealedBidManager::deletePurchRFQSealedReplyLineRecords(_purchRFQCaseTable);
        PurchRFQSealedBidManager::deletePurchRFQSealedReplyTableRecords(_purchRFQCaseTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSealedBidKeyVault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Resets sealed bidding parameter with cleaning related key vault certificates.
    /// </summary>
    internal final static void resetSealedBidKeyVault()
    {
        PurchRFQSealedBidKeyVaultCertificateTableRelation sealedBidKeyVaultCertificateTableRelation;
        KeyVaultCertificateTable certificateTable;
        KeyVaultParameters keyVaultParameters;

        delete_from sealedBidKeyVaultCertificateTableRelation
            exists join certificateTable
                where certificateTable.RecId == sealedBidKeyVaultCertificateTableRelation.KeyVaultCertificateTable
            exists join keyVaultParameters
                where keyVaultParameters.RecId == certificateTable.KeyVaultRef
                    && keyVaultParameters.EnabledForSealedBidding == NoYes::Yes;

        delete_from certificateTable
            exists join keyVaultParameters
                where keyVaultParameters.RecId == certificateTable.KeyVaultRef
                    && keyVaultParameters.EnabledForSealedBidding == NoYes::Yes;

        update_recordset keyVaultParameters
            setting EnabledForSealedBidding = NoYes::No
                where keyVaultParameters.EnabledForSealedBidding == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReplyNotSubmitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the bid has been already submitted.
    /// </summary>
    /// <param name = "_purchRFQId">The corresponding RFQId of the reply.</param>
    /// <param name = "_showError">
    /// A Boolean value that indicates whether an Error should be shown if the bid has been already submitted; defaults to true.
    /// </param>
    /// <returns>true if the bid has not been submitted; otherwise false</returns>
    [Hookable(false), Wrappable(false)]
    internal final static boolean checkReplyNotSubmitted(PurchRFQId _purchRFQId, boolean _showError = true)
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();

        boolean isValid = true;
        
        if (PurchRFQTable::find(_purchRFQId).StatusHigh >= PurchRFQStatus::Received)
        {
            if (_showError)
            {
                throw Error("@SCM:RFQSealedBidSubmitErrorMessageOnSubmittedBid");
            }
            
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchRFQSealedReplyLineRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method deletes the sealed reply line records.
    /// </summary>
    /// <param name = "_purchRFQCaseTable">The <c>PurchRFQCaseTable</c> table record.</param>
    private final static void deletePurchRFQSealedReplyLineRecords(PurchRFQCaseTable _purchRFQCaseTable)
    {
        PurchRFQSealedReplyLine purchRFQSealedReplyLine;
        PurchRFQReplyLine purchRFQReplyLine;
        PurchRFQTable purchRFQTable;

        PurchRFQSealedBidManager::deletePurchRFQSealedReplyLineAttachmentRecords(_purchRFQCaseTable);
        unchecked(Uncheck::TableSecurityPermission)
        {
            delete_from purchRFQSealedReplyLine
                exists join purchRFQReplyLine
                where purchRFQReplyLine.RecId == purchRFQSealedReplyLine.PurchRFQReplyLine
                    exists join purchRFQTable
                    where purchRFQTable.RFQId == purchRFQReplyLine.RFQId
                        && purchRFQTable.RFQCaseId == _purchRFQCaseTable.RFQCaseId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchRFQSealedReplyLineAttachmentRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method deletes the sealed reply line attachment records.
    /// </summary>
    /// <param name = "_purchRFQReplyLineRecId">The record ID for the <c>PurchRFQReplyLine</c> table.</param>
    private final static void deletePurchRFQSealedReplyLineAttachmentRecords(PurchRFQCaseTable _purchRFQCaseTable)
    {
        PurchRFQSealedReplyLineAttachmentLink sealedReplyLineAttachmentLink;
        PurchRFQSealedReplyLineAttachment purchRFQSealedReplyLineAttachment;
        PurchRFQReplyLine purchRFQReplyLine;
        PurchRFQTable purchRFQTable;
        
        unchecked(Uncheck::TableSecurityPermission)
        {
            delete_from purchRFQSealedReplyLineAttachment
                exists join sealedReplyLineAttachmentLink
                where purchRFQSealedReplyLineAttachment.PurchRFQSealedReplyLineAttachmentLink == sealedReplyLineAttachmentLink.RecId
                    exists join purchRFQReplyLine
                    where sealedReplyLineAttachmentLink.PurchRFQReplyLine == purchRFQReplyLine.RecId
                        exists join purchRFQTable
                        where purchRFQTable.RFQId == purchRFQReplyLine.RFQId
                            && purchRFQTable.RFQCaseId == _purchRFQCaseTable.RFQCaseId;
        }

        delete_from sealedReplyLineAttachmentLink
            exists join purchRFQReplyLine
            where sealedReplyLineAttachmentLink.PurchRFQReplyLine == purchRFQReplyLine.RecId
                exists join purchRFQTable
                where purchRFQTable.RFQId == purchRFQReplyLine.RFQId
                    && purchRFQTable.RFQCaseId == _purchRFQCaseTable.RFQCaseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchRFQSealedReplyTableRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method deletes the sealed reply table records.
    /// </summary>
    /// <param name = "_purchRFQCaseTable">The <c>PurchRFQCaseTable</c> table record.</param>
    private final static void deletePurchRFQSealedReplyTableRecords(PurchRFQCaseTable _purchRFQCaseTable)
    {
        PurchRFQSealedReplyTable purchRFQSealedReplyTable;
        PurchRFQReplyTable purchRFQReplyTable;
        PurchRFQTable purchRFQTable;

        PurchRFQSealedBidManager::deletePurchRFQSealedReplyTableAttachmentRecords(_purchRFQCaseTable);
        unchecked(Uncheck::TableSecurityPermission)
        {
            delete_from purchRFQSealedReplyTable
                exists join purchRFQReplyTable
                where purchRFQReplyTable.RecId == purchRFQSealedReplyTable.PurchRFQReplyTable
                    exists join purchRFQTable
                    where purchRFQTable.RFQId == purchRFQReplyTable.RFQId
                        && purchRFQTable.RFQCaseId == _purchRFQCaseTable.RFQCaseId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchRFQSealedReplyTableAttachmentRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method deletes the sealed reply table attachment records.
    /// </summary>
    /// <param name = "_purchRFQReplyTableRecId">The record ID for the <c>PurchRFQReplyTable</c> table.</param>
    private final static void deletePurchRFQSealedReplyTableAttachmentRecords(PurchRFQCaseTable _purchRFQCaseTable)
    {
        PurchRFQSealedReplyTableAttachmentLink sealedReplyTableAttachmentLink;
        PurchRFQSealedReplyTableAttachment purchRFQSealedReplyTableAttachment;
        PurchRFQReplyTable purchRFQReplyTable;
        PurchRFQTable purchRFQTable;

        unchecked(Uncheck::TableSecurityPermission)
        {
            delete_from purchRFQSealedReplyTableAttachment
                exists join sealedReplyTableAttachmentLink
                where purchRFQSealedReplyTableAttachment.PurchRFQSealedReplyTableAttachmentLink == sealedReplyTableAttachmentLink.RecId
                    exists join purchRFQReplyTable
                    where sealedReplyTableAttachmentLink.PurchRFQReplyTable == purchRFQReplyTable.RecId
                        exists join purchRFQTable
                        where purchRFQTable.RFQId == purchRFQReplyTable.RFQId
                            && purchRFQTable.RFQCaseId == _purchRFQCaseTable.RFQCaseId;
        }

        delete_from sealedReplyTableAttachmentLink
            exists join purchRFQReplyTable
            where sealedReplyTableAttachmentLink.PurchRFQReplyTable == purchRFQReplyTable.RecId
                exists join purchRFQTable
                where purchRFQTable.RFQId == purchRFQReplyTable.RFQId
                    && purchRFQTable.RFQCaseId == _purchRFQCaseTable.RFQCaseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwSealedBidError</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void throwSealedBidError(PurchRFQSealedBidInstrumentationLogger _logger)
    {
        System.Exception ex = CLRInterop::getLastException();

        str exceptionMessage = (!CLRInterop::isNull(ex)
                                  && ex.InnerException != null
                                  && ex.InnerException.Message != null) ? ex.InnerException.Message : "@SCM:SealedBiddingGenericException";


        _logger.getlogger().logException(ex, exceptionMessage);

        if (xUserInfo::doesCurrentUserHaveProcurementAgentRights() || isSystemAdministrator())
        {
            throw error(exceptionMessage);
        }
        else
        {
            throw error("@SCM:BiddingSystemIsNotAvailable");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>