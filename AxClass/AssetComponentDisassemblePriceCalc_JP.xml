<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetComponentDisassemblePriceCalc_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculate the disassemble price.
/// </summary>
class AssetComponentDisassemblePriceCalc_JP
{   
    AssetBookId                             assetBookId;
    AssetId                                 assetId;
    AssetComponentDisassemblePriceMethod    method;
    TransDate                               calculationDate;

    DialogField                             dialogFieldMethod;
    DialogRunbase                           dialog;

    #macrolib.AssetCalculation_JP
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceJP00028, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetBookId</Name>
				<Source><![CDATA[
    public AssetBookId parmAssetBookId(AssetBookId _assetBookId = assetBookId)
    {
        assetBookId = _assetBookId;

        return assetBookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetId</Name>
				<Source><![CDATA[
    public AssetId parmAssetId(AssetId _assetId = assetId)
    {
        assetId = _assetId;

        return assetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculationDate</Name>
				<Source><![CDATA[
    public TransDate parmCalculationDate(TransDate _calculationDate = calculationDate)
    {
        calculationDate = _calculationDate;

        return calculationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMethod</Name>
				<Source><![CDATA[
    public AssetComponentDisassemblePriceMethod parmMethod(AssetComponentDisassemblePriceMethod _method = method)
    {
        method = _method;

        return method;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute the calculation.
    /// </summary>
    public void run()
    {
        switch (method)
        {
            case AssetComponentDisassemblePriceMethod::Proportion:
                AssetComponentDisassemblePriceCalc_JP::calcProportionate(
                    assetId,
                    assetBookId,
                    calculationDate);
                break;
            case AssetComponentDisassemblePriceMethod::Iterate:
                AssetComponentDisassemblePriceCalc_JP::calcIterate(
                    assetId,
                    assetBookId,
                    calculationDate);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIterate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform iterative calculation.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_assetBookId">
    /// The asset book id.
    /// </param>
    /// <param name="_calculationDate">
    /// The calculation date.
    /// </param>
    private static void calcIterate(AssetId _assetId, AssetBookId _assetBookId, TransDate _calculationDate)
    {
        AssetComponent_JP   assetComponentDisassemble;
        AssetComponent_JP   assetComponentOrigin;
        CostAmount          balanceSum;
        AssetTrans          assetTrans;
        Map                 costMap;
        Array               costArray;
        Set                 disAssembleSet;
        AssetComponent_JP   lastAssetComponent;
        int                 i, lasti;
        AssetSumCalc_Trans  assetSumCalc_Trans;
        CostAmount          netBookValue;
        CostAmount          currentCostTotal;
        CostAmount          accumulateDisassembleAmount;
        CostAmount          accumulateDisassembleAmountRounded;

        costMap = new Map(Types::Int64, Types::Real);
        costArray = new Array(Types::Record);
        disAssembleSet = new Set(Types::Int64);

        //initial cost
        i = 1;
        while select assetComponentOrigin
            order by TransDate, AssetTrans
            where   assetComponentOrigin.AssetId    == _assetId
                &&  assetComponentOrigin.Assembling == true
                &&  assetComponentOrigin.TransDate
        {
            costArray.value(i, assetComponentOrigin);
            i++;
            costMap.insert(assetComponentOrigin.RecId, assetComponentOrigin.CostPrice);
        }

        //disassemble transaction
        while select AssetTrans from assetComponentDisassemble
            where   assetComponentDisassemble.AssetId    == _assetId
                &&  assetComponentDisassemble.Assembling == false
                &&  assetComponentDisassemble.TransDate
        {
            disAssembleSet.add(assetComponentDisassemble.AssetTrans);
        }

        if (costArray.lastIndex() == 0)
        {
            return;
        }

        lasti = 1;
        lastAssetComponent = costArray.value(lasti);

        balanceSum = 0;

        while select RecId, TransDate, AmountMST from assetTrans
            order by TransDate asc, RecId asc
            where assetTrans.AssetId    == _assetId
                && assetTrans.BookId    == _assetBookId
                && (#IsAffectNetBookValue(assetTrans))
        {
            //disassemble
            if (disAssembleSet.in(assetTrans.RecId))
            {
                balanceSum += assetTrans.AmountMST;
                continue;
            }

            //assemble
            if (assetTrans.TransDate == lastAssetComponent.TransDate
                && assetTrans.RecId == lastAssetComponent.AssetTrans)
            {
                while (assetTrans.TransDate == lastAssetComponent.TransDate
                    && assetTrans.RecId == lastAssetComponent.AssetTrans)
                {
                    lasti++;
                    if (lasti > costArray.lastIndex())
                    {
                        break;
                    }
                    lastAssetComponent = costArray.value(lasti);
                }
                balanceSum += assetTrans.AmountMST;
                continue;
            }

            //update cost
            i = 1;
            while (i < lasti)
            {
                assetComponentOrigin = costArray.value(i);
                costMap.insert(
                    assetComponentOrigin.RecId,
                    costMap.lookup(assetComponentOrigin.RecId) * (1 + assetTrans.AmountMST / balanceSum));
                i++;
            }

            balanceSum += assetTrans.AmountMST;
        }

        //get current cost
        currentCostTotal = 0;
        while select Qty, DisassembledQty from assetComponentOrigin
            where   assetComponentOrigin.AssetId    == _assetId
                &&  assetComponentOrigin.Assembling == true
                &&  assetComponentOrigin.TransDate
        {
            currentCostTotal += costMap.lookup(assetComponentOrigin.RecId) * (assetComponentOrigin.Qty - assetComponentOrigin.DisassembledQty);
        }
        assetSumCalc_Trans = AssetSumCalc_Trans::newAssetId(_assetId, _assetBookId, dateNull(), _calculationDate);
        netBookValue = assetSumCalc_Trans.netBookValue();

        ttsbegin;

        accumulateDisassembleAmount = 0;
        accumulateDisassembleAmountRounded = 0;

        while select forUpdate assetComponentDisassemble
            where   assetComponentDisassemble.AssetId    == _assetId
                &&  assetComponentDisassemble.Assembling == false
                &&  !assetComponentDisassemble.TransDate
                &&  assetComponentDisassemble.ComponentRefRecId
        {
            accumulateDisassembleAmount += costMap.lookup(assetComponentDisassemble.ComponentRefRecId) * assetComponentDisassemble.Qty * netBookValue / currentCostTotal;
            assetComponentDisassemble.CostAmount = CurrencyExchangeHelper::amount(accumulateDisassembleAmount - accumulateDisassembleAmountRounded);
            accumulateDisassembleAmountRounded += assetComponentDisassemble.CostAmount;
            assetComponentDisassemble.CostPrice = assetComponentDisassemble.getCostPrice();
            assetComponentDisassemble.MarketAmount = assetComponentDisassemble.CostAmount;
            assetComponentDisassemble.update(true);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProportionate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform propotional calculation.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_assetBookId">
    /// The asset book id.
    /// </param>
    /// <param name="_calculationDate">
    /// The calculation date.
    /// </param>
    private static void calcProportionate(AssetId _assetId, AssetBookId _assetBookId, TransDate _calculationDate)
    {
        AssetComponent_JP   assetComponent;
        AssetComponent_JP   assetComponentOrigin;
        CostAmount          currentCostTotal;
        AssetSumCalc_Trans  assetSumCalc_Trans;
        CostAmount          netBookValue;
        CostAmount          accumulateDisassembleAmount;
        CostAmount          accumulateDisassembleAmountRounded;

        //get current cost
        currentCostTotal = 0;
        while select Qty, DisassembledQty, CostPrice from assetComponentOrigin
            where   assetComponentOrigin.AssetId    == _assetId
                &&  assetComponentOrigin.Assembling == true
                &&  assetComponentOrigin.TransDate
        {
            currentCostTotal += assetComponentOrigin.CostPrice * (assetComponentOrigin.Qty - assetComponentOrigin.DisassembledQty);
        }

        assetSumCalc_Trans = AssetSumCalc_Trans::newAssetId(_assetId, _assetBookId, dateNull(), _calculationDate);
        netBookValue = assetSumCalc_Trans.netBookValue();

        ttsBegin;

        accumulateDisassembleAmount = 0;
        accumulateDisassembleAmountRounded = 0;
        while select forUpdate assetComponent
            where   assetComponent.AssetId    == _assetId
                &&  assetComponent.Assembling == false
                &&  !assetComponent.TransDate
                &&  assetComponent.ComponentRefRecId
        {
            assetComponentOrigin = AssetComponent_JP::find(assetComponent.ComponentRefRecId);
            //ratio: current amount/ total cost * net book value
            accumulateDisassembleAmount += ((assetComponentOrigin.CostAmount *(assetComponentOrigin.Qty - assetComponentOrigin.DisassembledQty) / assetComponentOrigin.Qty) / currentCostTotal)
                * (assetComponent.Qty / (assetComponentOrigin.Qty - assetComponentOrigin.DisassembledQty))
                * netBookValue;
            assetComponent.CostAmount = CurrencyExchangeHelper::amount(accumulateDisassembleAmount - accumulateDisassembleAmountRounded);
            accumulateDisassembleAmountRounded += assetComponent.CostAmount;
            assetComponent.CostPrice = assetComponent.getCostPrice();
            assetComponent.MarketAmount = assetComponent.CostAmount;
            assetComponent.update(true);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>AssetComponentDisassemblePriceCalc_JP</c>.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_assetBookId">
    /// The asset book id.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// An instance of <c>AssetComponentDisassemblePriceCalc_JP</c>.
    /// </returns>
    public static AssetComponentDisassemblePriceCalc_JP construct(AssetId _assetId, AssetBookId _assetBookId, TransDate _transDate = dateMax())
    {
        AssetComponentDisassemblePriceCalc_JP priceCalc;
        priceCalc = new AssetComponentDisassemblePriceCalc_JP();
        priceCalc.parmAssetId(_assetId);
        priceCalc.parmAssetBookId(_assetBookId);
        priceCalc.parmCalculationDate(_transDate);

        return priceCalc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>