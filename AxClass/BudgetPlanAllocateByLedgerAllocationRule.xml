<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAllocateByLedgerAllocationRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanAllocateByLedgerAllocationRule</c> class manages the budget plan lines allocation by the
/// ledger allocation rule.
/// </summary>
public class BudgetPlanAllocateByLedgerAllocationRule extends BudgetPlanAllocate
{
    BudgetPlanScenarioRecId sourceBudgetPlanScenarioRecId;
    BudgetPlanScenarioRecId basisBudgetPlanScenarioRecId;
    BudgetPlanHeaderRecId   targetBudgetPlanHeaderRecId;
    UnitOfMeasureRecId      unitOfMeasureRecId;
    LedgerAllocationRuleID  ledgerAllocationRuleID;
    List                    listBudgetPlanLine;
    BudgetClass             budgetClass;
    LineNum                 scenarioLineNumber;
    boolean                 useSourceEffectiveDateForAllocation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBudgetPlanLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record of <c>BudgetPlanLine</c> table against the <c>BudgetPlanHeader</c> table record.
    /// </summary>
    /// <param name="_targetBudgetPlanLine">
    /// The <c>BudgetPlanLine</c> record ID to allocate.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    protected void createBudgetPlanLines(BudgetPlanLine _targetBudgetPlanLine)
    {
        BudgetPlanLine budgetPlanLineNew;
        Currency       currency = Currency::find(_targetBudgetPlanLine.TransactionCurrencyCode);

        // Create the new budget plan line.
        budgetPlanLineNew.clear();

        buf2Buf(_targetBudgetPlanLine, budgetPlanLineNew);

        budgetPlanLineNew.TransactionCurrencyAmount = currency.amount_Instance(budgetPlanLineNew.TransactionCurrencyAmount * factor);

        budgetPlanLineNew.ReportingCurrencyAmount   = budgetPlanCurrencyExchangeHelper.calculateReportingCurrencyAmount(
                                                            budgetPlanLineNew.TransactionCurrencyAmount,
                                                            _targetBudgetPlanLine.TransactionCurrencyCode,
                                                            budgetPlanLineNew.EffectiveDate);

        budgetPlanLineNew.AccountingCurrencyAmount  = budgetPlanCurrencyExchangeHelper.calculateAccountingCurrencyAmount(
                                                            budgetPlanLineNew.TransactionCurrencyAmount,
                                                            _targetBudgetPlanLine.TransactionCurrencyCode,
                                                            budgetPlanLineNew.EffectiveDate);

        budgetPlanLineNew.Quantity                  = decRound((budgetPlanLineNew.Quantity * factor), 2);
        budgetPlanLineNew.LineReferenceId           = newGuid();
        budgetPlanLineNew.BudgetClass               = budgetClass;

        if (BudgetPlanScenario::find(targetBudgetPlanScenarioRecId).UnitOfMeasureClass == UnitOfMeasureClass::Monetary)
        {
            budgetPlanLineNew.EstimateType = BudgetPlanEstimateType::Monetary;
        }
        else
        {
            budgetPlanLineNew.EstimateType = BudgetPlanEstimateType::Quantity;
        }

        if (budgetPlanLineNew.LedgerDimension && budgetPlanLineNew.validateWrite())
        {
            budgetPlanLineNew.write();
        }
        else
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSetSourceBudgetPlanLine</Name>
				<Source><![CDATA[
    protected boolean doSetSourceBudgetPlanLine(BudgetPlanLineRecId _sourceBudgetPlanLineRecId, BudgetPlanLineRecId _newBudgetPlanLineRecId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewLineCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number of target <c>BudgetPlanLine</c> table records.
    /// </summary>
    /// <returns>
    /// The number of <c>LedgerAllocationRuleDestination</c> table records for the specific <c>LedgerAllocationRule</c> record ID.
    /// </returns>
    protected LineNum getNewLineCount()
    {
        return any2real(listBudgetPlanLine.elements());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance of the <c>BudgetPlanAllocateByLedgerAllocationRule</c> class.
    /// </summary>
    /// <param name="_budgetPlanAllocateRequest">
    /// The instance of <c>BudgetPlanAllocateReqByLedgerAllocRule</c> class.
    /// </param>
    protected void initialize(BudgetPlanAllocateRequest _budgetPlanAllocateRequest)
    {
        BudgetPlanAllocateReqByLedgerAllocRule allocateRequestByLedgerRule;

        super(_budgetPlanAllocateRequest);

        allocateRequestByLedgerRule = _budgetPlanAllocateRequest as BudgetPlanAllocateReqByLedgerAllocRule;

        sourceBudgetPlanScenarioRecId = allocateRequestByLedgerRule.parmSourceBudgetPlanScenarioRecId();

        targetBudgetPlanHeaderRecId = allocateRequestByLedgerRule.parmParentBudgetPlanHeaderRecId();

        unitOfMeasureRecId = BudgetPlanScenario::find(targetBudgetPlanScenarioRecId).UnitOfMeasure;

        basisBudgetPlanScenarioRecId = allocateRequestByLedgerRule.parmBasisBudgetPlanScenarioRecId();

        ledgerAllocationRuleID = allocateRequestByLedgerRule.parmLedgerAllocationRuleID();

        useSourceEffectiveDateForAllocation = allocateRequestByLedgerRule.parmUseSourceEffectiveDateForAllocation();

        ledgerRecId = BudgetPlanningProcess::find(BudgetPlanHeader::find(targetBudgetPlanHeaderRecId).BudgetPlanningProcess).Ledger;

        budgetPlanCurrencyExchangeHelper.initializeCurrencyExchangeHelper(ledgerRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the allocation by ledger allocation rule on the source scenario <c>BudgetPlanLine</c> records.
    /// </summary>
    public void process()
    {
        ListEnumerator  listEnumerator;
        BudgetPlanLine  targetBudgetPlanLine;

        LedgerAllocationProcessReqByBudgetPlan  ledgerAllocationProcessReqByBudgetPlan;

        ttsbegin;

        changecompany(CompanyInfo::getDataArea(legalEntityRecId))
        {
            ledgerAllocationProcessReqByBudgetPlan = LedgerAllocationProcessReqByBudgetPlan::construct();

            ledgerAllocationProcessReqByBudgetPlan.initRequest(targetBudgetPlanHeaderRecId,
                                                                sourceBudgetPlanScenarioRecId,
                                                                basisBudgetPlanScenarioRecId,
                                                                targetBudgetPlanScenarioRecId,
                                                                ledgerAllocationRuleID,
                                                                useSourceEffectiveDateForAllocation,
                                                                appendLines);

            ledgerAllocationProcessReqByBudgetPlan.allocate();

            listBudgetPlanLine = ledgerAllocationProcessReqByBudgetPlan.getListOfBudgetPlanLineDistributions();

            if (listBudgetPlanLine.elements() > 0)
            {
                budgetClass = BudgetPlanLine::findByPlanHeaderScenario(targetBudgetPlanHeaderRecId, sourceBudgetPlanScenarioRecId).BudgetClass;

                listEnumerator = listBudgetPlanLine.getEnumerator();

                while (listEnumerator.moveNext())
                {
                    targetBudgetPlanLine = listEnumerator.current();

                    this.createBudgetPlanLines(targetBudgetPlanLine);
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerAllocationRuleLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a lookup for the <c>LedgerAllocationRule</c>.
    /// </summary>
    /// <param name="_legalEntityRecId">
    /// The legal entity to lookup the <c>LedgerAllocationRule</c>.
    /// </param>
    /// <returns>
    /// The query which displays lookup for the <c>LedgerAllocationRule</c>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static Query getLedgerAllocationRuleLookupQuery(LegalEntity _legalEntityRecId)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         qbrAllocationActive, qbrInterCompany, qbrEffectiveDateRange, qbrExpireDateRange;

        if (!_legalEntityRecId)
        {
            throw error(Error::missingParameter(null));
        }

        queryBuildDataSource = query.addDataSource(tableNum(LedgerAllocationRule));

        // Add legal entity to the query range
        query.allowCrossCompany(true);
        query.addCompanyRange(CompanyInfo::getDataArea(_legalEntityRecId));

        queryBuildDataSource.addSelectionField(fieldNum(LedgerAllocationRule, RuleId));

        qbrAllocationActive = queryBuildDataSource.addRange(fieldNum(LedgerAllocationRule, AllocationActive));
        qbrAllocationActive.value(SysQuery::value(NoYes::Yes));

        qbrInterCompany = queryBuildDataSource.addRange(fieldNum(LedgerAllocationRule, IntercompanyRule));
        qbrInterCompany.value(SysQuery::value(NoYes::No));

        qbrEffectiveDateRange = queryBuildDataSource.addRange(fieldNum(LedgerAllocationRule, EffectiveStartDate));
        qbrEffectiveDateRange.value(strFmt('((EffectiveStartDate == %1) || (EffectiveStartDate <= %2))',
                                    date2StrXpp(dateNull()), date2StrXpp(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))));
        qbrEffectiveDateRange.status(RangeStatus::Locked);

        qbrExpireDateRange = queryBuildDataSource.addRange(fieldNum(LedgerAllocationRule, EffectiveEndDate));
        qbrExpireDateRange.value(strFmt('((EffectiveEndDate == %1) || (EffectiveEndDate >= %2))',
                                    date2StrXpp(dateNull()), date2StrXpp(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))));
        qbrExpireDateRange.status(RangeStatus::Locked);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAllocationRuleLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a lookup for the <c>LedgerAllocationRule</c>.
    /// </summary>
    /// <param name="_ctrl">
    /// The calling control.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// The legal entity to lookup the <c>LedgerAllocationRule</c>.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static void ledgerAllocationRuleLookup(
        FormStringControl   _ctrl,
        LegalEntity         _legalEntityRecId)
    {
        SysTableLookup          sysTableLookup;

        if (!_ctrl || !_legalEntityRecId)
        {
            throw error(Error::missingParameter(null));
        }

        sysTableLookup = SysTableLookup::newParameters(
            tableNum(LedgerAllocationRule),
            _ctrl,
            false);

        sysTableLookup.addLookupfield(fieldNum(LedgerAllocationRule, RuleId));
        sysTableLookup.addLookupfield(fieldNum(LedgerAllocationRule, AllocationDescription));

        sysTableLookup.parmQuery(BudgetPlanAllocateByLedgerAllocationRule::getLedgerAllocationRuleLookupQuery(_legalEntityRecId));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerAllocationRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>LedgerAllocationRule</c> rule Id.
    /// </summary>
    /// <param name="_ledgerAllocationRuleID">
    /// The ledger allocate rule Id to validate.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// The ledger allocate key to validate.
    /// </param>
    /// <returns>
    /// true if the ledger allocate key is valid; otherwise, false.
    /// </returns>
    public static boolean validateLedgerAllocationRule(
        LedgerAllocationRuleID _ledgerAllocationRuleID,
        LegalEntity            _legalEntityRecId)
    {
        LedgerAllocationRule ledgerAllocationRule;
        boolean              isValid = true;

        changecompany(CompanyInfo::getDataArea(_legalEntityRecId))
        {
            ledgerAllocationRule = LedgerAllocationRule::find(_ledgerAllocationRuleID);

            if (ledgerAllocationRule.RecId == 0)
            {
                isValid = false;
            }
            else if (ledgerAllocationRule.AllocationActive == NoYes::No)
            {
                isValid = checkFailed("@SYS106011");
            }
            else if (ledgerAllocationRule.IntercompanyRule == NoYes::Yes)
            {
                isValid = checkFailed("@SYS4006012");
            }
            else if (!LedgerAllocationRules::isAsOfDateValid(_ledgerAllocationRuleID, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
            {
                isValid = checkFailed(strFmt("@SYS106012", date2StrUsr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateFlags::FormatAll)));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>