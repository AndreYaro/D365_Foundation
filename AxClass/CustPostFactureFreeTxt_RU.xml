<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPostFactureFreeTxt_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>CustPostFactureFreeTxt_RU</c> used for posting invoice and simultaneosly creating facture
/// </summary>
class CustPostFactureFreeTxt_RU extends CustPostInvoice
{
    NoYes printFacture;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPrintFacture_RU</Name>
				<Source><![CDATA[
    public NoYes parmPrintFacture_RU(NoYes _printFacture = printFacture)
    {
        printFacture = _printFacture;
        return printFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFacture_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used for posting and, if required, printing facture
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// <c>CustInvoiceJour</c> record which is source for facture creation
    /// </param>
    /// <param name="_printerSetting">
    /// Printer settings for facture printout
    /// </param>
    public void postFacture_RU(CustInvoiceJour _custInvoiceJour, container _printerSetting = conNull())
    {
        CustInvoiceJour_RU              custInvoiceJourRU;
        FactureJourCreate_RU            factureCreate;
        FactureEditLinesEngine_RU       engine;
        OfficialsServ_RU                offServer;
        FactureCalcAmountAdjustments_RU factureCalcAmountAdj;
        FactureExternalId_RU            factureExtId;

        custInvoiceJourRU = _custInvoiceJour.custInvoiceJour_RU();

        if (!custInvoiceJourRU.FacturedFully_RU)
        {
            if (OfficialsServ_RU::isFeatureEnabled())
            {
                offServer = new OfficialsServ_RU();
                offServer.initTableFacture(FactureModule_RU::Cust, _custInvoiceJour.InvoiceAccount, true, _custInvoiceJour.creditNote());
            }

            factureCreate   = FactureJourCreate_RU::construct(FactureModule_RU::Cust);
            engine          = FactureEditLinesEngine_RU::construct(factureCreate);
            engine.insertJour(_custInvoiceJour);

            if (useOriginalDocumentAsFacture)
            {
                factureExtId = _custInvoiceJour.InvoiceId;
            }

            factureCreate.initParameters(NoYes::Yes,
                                         NoYes::No,
                                         printFacture ? Printout::Current : Printout::After,
                                         printInMST,
                                         factureExtId,
                                         _custInvoiceJour.InvoiceDate,
                                         _custInvoiceJour.InvoiceAccount,
                                         _custInvoiceJour.CurrencyCode,
                                         FactureType_RU::Invoice,
                                         custInvoiceJourRU.ConsigneeAccount_RU,
                                         custInvoiceJourRU.ConsignorAccount_RU,
                                         offServer ? offServer.newId() : "",
                                         custInvoiceJourRU.AttorneyId_RU,
                                         custInvoiceJourRU.AttorneyIssuedName_RU,
                                         custInvoiceJourRU.AttorneyDate_RU,
                                         0,
                                         _custInvoiceJour.InvoiceDate,
                                         _custInvoiceJour.NumberSequenceGroup,
                                         custInvoiceTable.CorrectedFactureExternalId_RU,
                                         custInvoiceTable.CorrectedFactureDate_RU,
                                         custInvoiceTable.CorrectedPeriod_RU,
                                         custInvoiceTable.CorrectionType_RU);

            factureCreate.parmLanguageId(_custInvoiceJour.LanguageId);
            factureCreate.parmVATOnPayment(custInvoiceJourRU.vatOnPayment_RU);
            factureCreate.parmCorrect(custInvoiceJourRU.Correct_RU);
            factureCreate.parmDlvInfoNoPrint(NoYes::Yes);
            factureCreate.parmPrinterSettings(_printerSetting);
            factureCreate.parmUseOriginalDocumentAsFacture(useOriginalDocumentAsFacture);
            factureCreate.runOperation();

            FactureJour_RU::handleOperationTypeCodes(factureCreate.getFactureJour());

            factureCalcAmountAdj = FactureCalcAmountAdjustments_RU::newCustVendTrans(_custInvoiceJour.custTrans());
            factureCalcAmountAdj.calc();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>