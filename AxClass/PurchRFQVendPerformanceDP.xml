<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQVendPerformanceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQVendPerformanceDP</c> class is the data provider class of the
/// <c>VendorPerformance</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(PurchRFQVendPerformanceContract))
]
class PurchRFQVendPerformanceDP extends SRSReportDataProviderBase
{
    PurchRFQVendPerformance purchRFQVendPerformance;
    PurchRFQVendPerformanceTMP  purchRFQVendPerformanceTMP;
    PurchRFQVendPerformanceReasonCodeTMP    purchRFQVendPerformanceReasonCodeTMP;
    PurchRFQVendorPerformanceTmp    purchRFQVendorPerformanceTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches records based on the parameter values and inserts the records into the temporary table.
    /// </summary>
    public void processReport()
    {
        PurchRFQVendPerformanceContract dataContract = this.parmDataContract() as PurchRFQVendPerformanceContract;

        purchRFQVendPerformance =   new PurchRFQVendPerformance();
        purchRFQVendPerformance.parmFromDate(DateTimeUtil::date(dataContract.parmFromDate()));
        purchRFQVendPerformance.parmToDate(DateTimeUtil::date(dataContract.parmToDate()));
        purchRFQVendPerformance.parmToVendor(dataContract.parmVendAccount());
        purchRFQVendPerformance.parmFromVendor(dataContract.parmAccountNum());
        purchRFQVendPerformance.parmVendorImportance(dataContract.parmNoYesCombo());
        purchRFQVendPerformance.parmSuccessRate(dataContract.parmNoYes());
        purchRFQVendPerformance.buildData();

        purchRFQVendPerformanceTMP  =   purchRFQVendPerformance.purchRFQVendPerformanceTMP();
        purchRFQVendPerformanceReasonCodeTMP    =   purchRFQVendPerformance.purchRFQVendPerformanceReasonCodeTMP();

        while select purchRFQVendPerformanceTMP
        outer join  purchRFQVendPerformanceReasonCodeTMP
        where purchRFQVendPerformanceTMP.VendAccount == purchRFQVendPerformanceReasonCodeTMP.VendAccount
        {
            purchRFQVendorPerformanceTmp.VendAccount                =   purchRFQVendPerformanceTMP.VendAccount;
            purchRFQVendorPerformanceTmp.NoOfRFQsSend               =   purchRFQVendPerformanceTMP.NoRFQsSend;
            purchRFQVendorPerformanceTmp.NoRepliesAccepted          =   purchRFQVendPerformanceTMP.NoRepliesAccepted;
            purchRFQVendorPerformanceTmp.NoLinesSend                =   purchRFQVendPerformanceTMP.NoRFQLinesSend;
            purchRFQVendorPerformanceTmp.NoReplyLinesAccepted       =   purchRFQVendPerformanceTMP.NoReplyLinesAccepted;
            purchRFQVendorPerformanceTmp.AmountAcceptedVendor       =   purchRFQVendPerformanceTMP.AmountAcceptedVendor;
            purchRFQVendorPerformanceTmp.AmountAcceptedAllVendors   =   purchRFQVendPerformanceTMP.AmountAcceptedAllVendors;
            purchRFQVendorPerformanceTmp.ReasonId                   =   purchRFQVendPerformanceReasonCodeTMP.ReasonId;
            purchRFQVendorPerformanceTmp.RatioAccepted              =   purchRFQVendPerformanceReasonCodeTMP.ratioAccepted();
            purchRFQVendorPerformanceTmp.RatioRejected              =   purchRFQVendPerformanceReasonCodeTMP.ratioRejected();
            purchRFQVendorPerformanceTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQVendorPerformanceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The <c>PurchRFQVendorPerformanceTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute('PurchRFQVendorPerformanceTmp')]
    public PurchRFQVendorPerformanceTmp purchRFQVendorPerformanceTmp()
    {
        select * from purchRFQVendorPerformanceTmp;
        return purchRFQVendorPerformanceTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
