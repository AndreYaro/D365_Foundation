<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReleaseToWarehouseServiceBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSReleaseToWarehouseServiceBase</c> class exposes services for releasing to warehouse.
/// </summary>
public abstract class WHSReleaseToWarehouseServiceBase
{
    #OCCRetryCount

    protected WHSReleaseToWarehouseRetrieveRTWId  retrieveRTWId;
    protected WHSTmpReleaseToWarehouse releaseToWarehouse;
    protected WHSReleaseToWarehouseId releaseToWarehouseIdGlobal;
    protected boolean errorsFound;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoReleaseOrder</Name>
				<Source><![CDATA[
    protected void autoReleaseOrder(
        Common _order,
        boolean _shouldAllowPartiallyReleased,
        WHSReleaseQuantitySpecification _releaseQuantitySpecification,
        str _prefixMessage,
        str _errorMessage)
    {
        setPrefix(strFmt(_prefixMessage, this.orderId(_order)));

        WHSWarehouseReleaseProcessingResult processingResult = new WHSWarehouseReleaseProcessingResult();
        try
        {
            ttsBegin;

            boolean releaseLinesCreated = this.releaseOrder(_order, _shouldAllowPartiallyReleased, _releaseQuantitySpecification, processingResult);

            processingResult.displayOrderLevelMessages();

            if (processingResult.hasOrderLevelErrors())
            {
                error(_errorMessage);
                errorsFound = true;
                ttsAbort;
            }
            else if (!releaseLinesCreated)
            {
                ttsAbort;
            }
            else
            {
                ttsCommit;
            }
        }
        catch (Exception::Error)
        {
            error(_errorMessage);
            errorsFound = true;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() != 0)
            {
                throw Exception::UpdateConflict;
            }
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            retry;
        }
        catch
        {
            if (appl.ttsLevel() != 0)
            {
                throw error(strFmt("@SYS330665", funcName()));
            }

            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderId</Name>
				<Source><![CDATA[
    protected abstract WHSOrderNum orderId(Common _order)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseOrder</Name>
				<Source><![CDATA[
    private boolean releaseOrder(
        Common _order,
        boolean _shouldAllowPartiallyReleased,
        WHSReleaseQuantitySpecification _releaseQuantitySpecification,
        WHSWarehouseReleaseProcessingResult _processingResult)
    {
        if (this.orderInventLocation(_order).WarehouseAutoReleaseReservation)
        {
            this.reserveOrder(_order);
        }

        boolean releaseLinesCreated = false;

        if (this.checkCanReleaseOrderPreProcess(_order, _shouldAllowPartiallyReleased))
        {
            // Create temporary release to warehouse records for the order.
            if (!retrieveRTWId)
            {
                releaseLinesCreated = this.createTmpReleaseToWarehouse(releaseToWarehouseIdGlobal, releaseToWarehouse, _order, _processingResult, _releaseQuantitySpecification);
            }
            else
            {
                retrieveRTWId.clearOrderReleaseToWarehouseId();
                WHSReleaseToWarehouseId releaseToWarehouseId = retrieveRTWId.getReleaseToWarehouseId(_order);
                releaseLinesCreated = this.createTmpReleaseToWarehouse(releaseToWarehouseId, releaseToWarehouse, _order, _processingResult, _releaseQuantitySpecification);
            }
        }

        return releaseLinesCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderInventLocation</Name>
				<Source><![CDATA[
    protected abstract InventLocation orderInventLocation(Common _order)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoReleaseOrderToWarehouse</Name>
				<Source><![CDATA[
    internal void autoReleaseOrderToWarehouse(
        WHSInstrumentationReleaseToWarehousePerformanceTask _perfTask,
        str _prefixMessage,
        str _prefixExecutionMessage,
        Query _query,
        WHSReleaseQuantitySpecification _releaseQuantitySpecification,
        NoYes _allowPartiallyReleased,
        NoYes _groupIntoMultipleReleases)
    {
        this.checkTTSLevel();

        setPrefix(_prefixMessage);

        QueryRun queryRun = new QueryRun(this.finalOrdersReleaseQuery(_query));

        this.selectReleaseToWarehouse();

        boolean shipConsolidationPolicyExist = WHSShipConsolidationPolicy::anyPolicyExists();
        this.setReleaseToWarehouseIdGlobal(shipConsolidationPolicyExist, _groupIntoMultipleReleases);

        if (!releaseToWarehouseIdGlobal)
        {
            this.setWHSReleaseToWarehouseRetrieveRTWId(shipConsolidationPolicyExist);
        }
       
        int processedOrders = 0;
        while (queryRun.next())
        {
            Common orderRecord = this.retrieveOrder(queryRun);
            this.autoReleaseOrder(
                    orderRecord,
                    _allowPartiallyReleased,
                    _releaseQuantitySpecification,
                    _prefixExecutionMessage,
                    this.cannotReleaseMessage(orderRecord));

            processedOrders++;
        }

        this.setReleasedOrdersLog(_perfTask, processedOrders);

        this.releaseLinesToWarehouse(releaseToWarehouse, _releaseQuantitySpecification);

        this.validateAutoReleaseToWarehouse();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReleasedOrdersLog</Name>
				<Source><![CDATA[
    internal abstract void setReleasedOrdersLog(WHSInstrumentationReleaseToWarehousePerformanceTask _perfTask, int _processedOrders)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>cannotReleaseMessage</Name>
				<Source><![CDATA[
    protected abstract str cannotReleaseMessage(Common _order)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveOrder</Name>
				<Source><![CDATA[
    protected abstract Common retrieveOrder(QueryRun _queryRun)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>selectReleaseToWarehouse</Name>
				<Source><![CDATA[
    private void selectReleaseToWarehouse()
    {
        select firstOnly releaseToWarehouse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReleaseToWarehouseIdGlobal</Name>
				<Source><![CDATA[
    protected abstract void setReleaseToWarehouseIdGlobal(boolean _shipConsolidationPolicyExist, NoYes _shouldGroupIntoMultipleReleases)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWHSReleaseToWarehouseRetrieveRTWId</Name>
				<Source><![CDATA[
    private void setWHSReleaseToWarehouseRetrieveRTWId(boolean _shipConsolidationPolicyExist)
    {
        retrieveRTWId = WHSReleaseToWarehouseRetrieveRTWId::construct();
        retrieveRTWId.parmUseConsolidationPolicies(_shipConsolidationPolicyExist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAutoReleaseToWarehouse</Name>
				<Source><![CDATA[
    private void validateAutoReleaseToWarehouse()
    {
        if (errorsFound
            && BatchHeader::isExecutingInBatch()
            && WHSParameters::find().EnableReleaseToWarehouseErrorOnBatchFailure)
        {
            throw error("@WAX:AutoReleaseToWarehouseFailed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanReleaseOrderPreProcess</Name>
				<Source><![CDATA[
    protected abstract boolean checkCanReleaseOrderPreProcess(Common	_order, boolean	_allowPartiallyReleased)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTTSLevel</Name>
				<Source><![CDATA[
    private void checkTTSLevel()
    {
        if (appl.ttsLevel() != 0)
        {
            // The auto release job is using transaction management for rolling back reservations in cases of release failure.
            // Also infinite loop problems can happen when running the auto release functionality within a transaction scope.
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalOrdersReleaseQuery</Name>
				<Source><![CDATA[
    protected abstract Query finalOrdersReleaseQuery(Query _query)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveOrder</Name>
				<Source><![CDATA[
    protected abstract void reserveOrder(Common _order)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpReleaseToWarehouse</Name>
				<Source><![CDATA[
    protected abstract boolean createTmpReleaseToWarehouse(
        WHSReleaseToWarehouseId _releaseToWarehouseId,
        WHSTmpReleaseToWarehouse _releaseToWarehouse,
        Common _order,
        WHSWarehouseReleaseProcessingResult _processingResult,
        WHSReleaseQuantitySpecification _releaseQuantitySpecification = WHSReleaseQuantitySpecification::ReservedPhysically)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpReleaseToWarehouseRecords</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean createTmpReleaseToWarehouseRecords(
        WHSModule _module,
        WHSOrderNum _orderNum,
        InventTransType _inventTransType,
        WHSWarehouseReleaseProcessingResult _processingResult,
        WHSReleaseToWarehouseId _releaseToWarehouseId,
        WHSTmpReleaseToWarehouse _releaseToWarehouse,
        WHSReleaseQuantitySpecification _releaseQuantitySpecification,
        str _OrderLevelInfoessagae)
    {
        if (!this.validateOrderForProcessing(_processingResult, _orderNum, _inventTransType))
        {
            return false;
        }

        boolean lineReleased = this.releaseUsingQtySpecification(
            _orderNum,
            _module,
            _processingResult,
            _releaseToWarehouseId,
            _releaseToWarehouse,
            _releaseQuantitySpecification);

        if (this.anyUnprocessedOutputOrders(_orderNum))
        {
            _processingResult.addOrderLevelWarning("@WAX5826");
        }
        else if (!lineReleased)
        {
            _processingResult.addOrderLevelInfo(strFmt(_OrderLevelInfoessagae, _orderNum));
        }

        return lineReleased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOrderForProcessing</Name>
				<Source><![CDATA[
    private boolean validateOrderForProcessing(WHSWarehouseReleaseProcessingResult _processingResult, WHSOrderNum _orderNum, InventTransType _inventTransType)
    {
        if (!_orderNum || !_processingResult)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (WHSWarehouseRelease::isOrderOnLoadAndNotOnShipment(_orderNum, _inventTransType))
        {
            _processingResult.addOrderLevelError("@WAX4240");
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransSumDimEnumerator</Name>
				<Source><![CDATA[
    protected abstract WHSInventTransSumDimEnumerator inventTransSumDimEnumerator(WHSOrderNum _orderNum)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseUsingQtySpecification</Name>
				<Source><![CDATA[
    private boolean releaseUsingQtySpecification(
        WHSOrderNum _orderNum,
        WHSModule _module,
        WHSWarehouseReleaseProcessingResult _processingResult,
        WHSReleaseToWarehouseId _releaseToWarehouseId,
        WHSTmpReleaseToWarehouse _releaseToWarehouse,
        WHSReleaseQuantitySpecification _releaseQuantitySpecification)
    {
        WHSInventTransSumDimEnumerator inventTransSumDimEnumerator = this.inventTransSumDimEnumerator(_orderNum);
        boolean lineReleased;

        using (var context = new WHSAutoReleaseToWarehouseProcessingResultContext())
        {
            context.processingResult = _processingResult;
            lineReleased = WHSTmpReleaseToWarehouse::releaseUsingQtySpecification(inventTransSumDimEnumerator, _releaseToWarehouse, _releaseToWarehouseId, _releaseQuantitySpecification, _module);
        }
        return lineReleased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseLinesToWarehouse</Name>
				<Source><![CDATA[
    private void releaseLinesToWarehouse(WHSTmpReleaseToWarehouse _releaseToWarehouse, WHSReleaseQuantitySpecification _releaseQuantitySpecification)
    {
        if (releaseToWarehouseIdGlobal)
        {
            this.releaseLines(releaseToWarehouse, releaseToWarehouseIdGlobal, _releaseQuantitySpecification);
        }
        else
        {
            Enumerator rtwEnumerator = retrieveRTWId.getValidReleaseToWarehouseIds().getEnumerator();
            while (rtwEnumerator.moveNext())
            {
                this.releaseLines(releaseToWarehouse, rtwEnumerator.current(), _releaseQuantitySpecification);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Release the lines with the release Id specified.
    /// </summary>
    /// <param name="_releaseToWarehouse">
    /// The release to warehouse lines.
    /// </param>
    /// <param name="_releaseToWarehouseId">
    /// The release to warehouse Id to release.
    /// </param>
    /// <param name="_releaseQuantitySpecification">
    /// Quantity to release.
    /// </param>
    [Hookable(false)]
    protected void releaseLines(
        WHSTmpReleaseToWarehouse _releaseToWarehouse,
        WHSReleaseToWarehouseId _releaseToWarehouseId,
        WHSReleaseQuantitySpecification _releaseQuantitySpecification)
    {
        boolean                  isConsolidatedId;
        WHSOrderNum              firstOrderNum;

        try
        {
            WHSTmpReleaseToWarehouse releaseToWarehouseOrderRec;
            releaseToWarehouseOrderRec.linkPhysicalTableInstance(_releaseToWarehouse);

            select count(RecId) from releaseToWarehouseOrderRec
            group by OrderNum
            where releaseToWarehouseOrderRec.ReleaseToWarehouseId == _releaseToWarehouseId;

            isConsolidatedId = releaseToWarehouseOrderRec.RecId > 1 ? true : false;
            firstOrderNum = releaseToWarehouseOrderRec.OrderNum;

            using (WHSShouldReduceLoadLineWhenCrossDockFailedContext context = WHSShouldReduceLoadLineWhenCrossDockFailedContext::newFromParms(WhsAutoReleaseToWarehouse::shouldReduceLoadLineWhenCrossDockFailed(_releaseQuantitySpecification)))
            {
                ttsBegin;
                WHSWarehouseRelease::releaseToWarehouse(_releaseToWarehouse, _releaseToWarehouseId, false, false, true);
                ttsCommit;
            }
        }
        catch
        {
            // Display the order number that failed if possible.
            if (isConsolidatedId)
            {
                error("@WAX1895");
            }
            else
            {
                error(strFmt("@SYP4860551", firstOrderNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyUnprocessedOutputOrders</Name>
				<Source><![CDATA[
    protected abstract boolean anyUnprocessedOutputOrders(WHSOrderNum _orderNum)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>