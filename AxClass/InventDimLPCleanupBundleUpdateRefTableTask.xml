<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimLPCleanupBundleUpdateRefTableTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventDimLPCleanupBundleUpdateRefTableTask
{
    private List taskList;
    private UserConnection connection;
    private Statement statement;
    private str sqlStatement, directSQL, currentPartitionIdLiteral, dataAreaIdLiteral;
    private SysDictTable dictTable_RefTable;
    private TableName refTableName;
    private FieldName dimFieldName_FieldList, dimFieldName_WhereClause, dataAreaIdFieldName;

    #DEFINE.CURRENTVERSION(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    public System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventDimLPCleanupBundleUpdateRefTableTask),
                                                          staticMethodStr(InventDimLPCleanupBundleUpdateRefTableTask, runOperationAsync),
                                                          [this.pack()]);
        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventDimLPCleanupBundleUpdateRefTableTask construct()
    {
        return new InventDimLPCleanupBundleUpdateRefTableTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    public static InventDimLPCleanupBundleUpdateRefTableTask newParameters(List _taskList)
    {
        InventDimLPCleanupBundleUpdateRefTableTask refTableTaskUpdater = InventDimLPCleanupBundleUpdateRefTableTask::construct();
        refTableTaskUpdater.parmTaskList(_taskList);
        return refTableTaskUpdater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    private static container runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        InventDimLPCleanupBundleUpdateRefTableTask updateRefTableTask = new InventDimLPCleanupBundleUpdateRefTableTask();
        container packedUpdateRefTableTask;

        try
        {
            [packedUpdateRefTableTask] = params;
            updateRefTableTask.unpack(packedUpdateRefTableTask);
            updateRefTableTask.execute();
            return [true];
        }
        catch
        {
            return [false];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    private void execute()
    {
        System.Exception ex;
        connection = new UserConnection();
        SqlSystem sqlSystem = new SqlSystem();
        currentPartitionIdLiteral = sqlSystem.sqlLiteral(getCurrentPartitionRecId(), true);
        dataAreaIdLiteral = sqlSystem.sqlLiteral(curext());

        ListEnumerator taskEnumerator = taskList.getEnumerator();
        boolean allSuccess = true;

        TableId tableId;
        FieldId inventDimIdFieldId, dataAreaIdFieldId;

        while (taskEnumerator.moveNext())
        {
            try
            {
                [tableId, inventDimIdFieldId, dataAreaIdFieldId] = taskEnumerator.current();
                this.updateReferenceTable(tableId2Name(tableId), inventDimIdFieldId, dataAreaIdFieldId);
            }
            catch (ex)
            {
                warning(ex.Message);
                allSuccess = false;
            }
        }

        if (connection)
        {
            connection.finalize();
            connection = null;
        }

        if (!allSuccess)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReferenceTable</Name>
				<Source><![CDATA[
    public void updateReferenceTable(
        TableName _refTableName,
        FieldId _inventDimIdField,
        FieldId _dataAreaIdFieldId)
    {
        #OCCRetryCount

        statement = connection.createStatement();
        sqlStatement = this.buildSQLUpdateStr(_refTableName, _inventDimIdField, _dataAreaIdFieldId);

        if (sqlStatement == '')
        {
            return;
        }

        try
        {
            connection.ttsbegin();
            statement.executeUpdateWithParameters(sqlStatement, SqlParams::create());
            connection.ttscommit();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            // log but ignore the error.
            warning(strFmt("@SCM:InventDimLPCleanupBundleDuplicateKeyError", dimFieldName_FieldList, _refTableName));
        }
        finally
        {
            if (statement)
            {
                statement.close();
            }
        }

        Microsoft.Dynamics.Ax.Xpp.PredefinedFunctions::Flush(tableName2Id(_refTableName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSQLUpdateStr</Name>
				<Source><![CDATA[
    private str buildSQLUpdateStr(
        TableName _tableName,
        FieldId _inventDimIdField,
        FieldId _dataAreaIdFieldId)
    {
        dictTable_RefTable = SysDictTable::newName(_tableName);

        if (dictTable_RefTable == null)
        {
            return '';
        }

        refTableName = dictTable_RefTable.name(DbBackend::Sql);
        dimFieldName_FieldList = dictTable_RefTable.fieldName(_inventDimIdField, DbBackend::Sql, 0, FieldNameGenerationMode::FieldList);
        dimFieldName_WhereClause = dictTable_RefTable.fieldName(_inventDimIdField, DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);

        /* Build up the following SQL statement

        UPDATE DimRefTable
        SET    DimRefTable.InventDimId = T1.InventDimIdTo
        FROM   <REFERENCETABLE> DimRefTable
        JOIN InventDimLPCleanupChangeTmp T1 ON T1.InventDimIdFrom = DimRefTable.InventDimId
        WHERE  ( DimRefTable.PARTITION = 68719504489 AND T1.PARTITION = 68719504489 AND
                 DimRefTable.DataAreaId = N'dat' AND T1.DATAAREAID = N'dat' )*/

        directSQL = strFmt('UPDATE DIMREFTABLE SET DIMREFTABLE.%1 = T1.InventDimIdTo FROM %2 DIMREFTABLE JOIN InventDimLPCleanupChangeTmp T1 ON T1.InventDimIdFrom = DimRefTable.%1 WHERE (', dimFieldName_FieldList, refTableName);
        directSQL += strFmt(' DIMREFTABLE.PARTITION = %1 AND T1.PARTITION = %1 AND', currentPartitionIdLiteral);

        dataAreaIdFieldName = dictTable_RefTable.fieldName(_dataAreaIdFieldId, DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        directSQL += strFmt(' DIMREFTABLE.%1 = %2 AND T1.DATAAREAID = %2)', dataAreaIdFieldName, dataAreaIdLiteral);
        return directSQL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaskList</Name>
				<Source><![CDATA[
    public List parmTaskList(List _taskList = taskList)
    {
        taskList = _taskList;
        return taskList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, taskList.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);
        container taskListContainer;

        switch (version)
        {
            case #CurrentVersion:
                [version, taskListContainer] = _packedClass;
                break;
            default:
                return false;
        }

        taskList = List::create(taskListContainer);

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>