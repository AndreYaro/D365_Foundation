<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBatchJournalAttributeCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Class to calculate batch attributes during a batch merge.
/// </summary>
/// <remarks>
///     This class uses the classes deriving from <c>InventBatchJournalAttributeOperator</c> to perform the actual computations. Therefore, the operation supported by this "calculator" are
///     the operations that have been implemented via <c>InventBatchJournalAttributeOperator</c>.
/// </remarks>
public class InventBatchJournalAttributeCalculator
{
    PdsBatchAttrib                      batchAttrib;
    InventBatchJournalAttributeOperator operator;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>batchAttributeSupported</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the calculator supports the batch attribute that it is supposed to perform computations against.
    /// </summary>
    /// <returns>
    ///     true if supported; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     The determination is made directly by the <c>InventBatchJournalAttributeOperator</c> class. If there is an implementation to support the batch attribute then true
    ///     is returned; otherwise, false.
    /// </remarks>
    public boolean batchAttributeSupported()
    {
        return operator.supported();
    }

]]></Source>
			</Method>
			<Method>
				<Name>compute</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Computes or calculates the batch attribute based on the specified batch attribute value.
    /// </summary>
    /// <param name="_attribValue">
    ///     The batch attribute value.
    /// </param>
    /// <param name="_source">
    ///     The corresponding source line from a batch merge.
    /// </param>
    /// <returns>
    ///     The result of the computation as a new batch attribute value rounded to the nearest increment as specified by the batch attribute.
    /// </returns>
    /// <remarks>
    ///     The actual computation is dependent on the current instance of a <c>InventBatchJournalAttributeOperator</c> derived object. It is the responsibility of the caller to
    ///     ensure that the result is within tolerance.
    /// </remarks>
    public PdsBatchAttribValue compute(PdsBatchAttribValue _attribValue, InventBatchJournalSource _source)
    {
        PdsBatchAttribValue attribResultValue = operator.compute(_attribValue, _source.InventQty, _source.cwInventQty);

        if (batchAttrib.PdsBatchAttribType == PdsBatchAttribType::Integer || batchAttrib.PdsBatchAttribType == PdsBatchAttribType::Realnumber)
        {
            real resultNearestIncrement = batchAttrib.adjustValueToAttribType(round(str2num(attribResultValue), batchAttrib.PdsBatchAttribMultiple));
            attribResultValue = batchAttrib.value2Storage(resultNearestIncrement);
        }

        return attribResultValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchAttrib</Name>
				<Source><![CDATA[
    public PdsBatchAttrib parmBatchAttrib(PdsBatchAttrib _batchAttrib = batchAttrib)
    {
        batchAttrib = _batchAttrib;

        return batchAttrib;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventBatchJournalAttributeOperator</Name>
				<Source><![CDATA[
    protected InventBatchJournalAttributeOperator parmInventBatchJournalAttributeOperator(InventBatchJournalAttributeOperator _operator = operator)
    {
        operator = _operator;

        return operator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventBatchJournalAttributeCalculator construct()
    {
        return new InventBatchJournalAttributeCalculator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCalculator</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a calculator object to compute batch attribute values based on the specified batch attribute ID.
    /// </summary>
    /// <param name="_attribId">
    ///     The batch attribute ID.
    /// </param>
    /// <returns>
    ///     A calculator object to calculate batch attribute values based on the specified batch attribute ID.
    /// </returns>
    /// <remarks>
    ///     If a batch attributed ID is specified that is not supported by any <c>InventBatchJournalAttributeOperator</c> derived classes, then a default
    ///     <c>InventBatchJournalAttributeOperator</c> object is used. Subsequent calls to the method batchAttributeSupported will return false.
    /// </remarks>
    public static InventBatchJournalAttributeCalculator newCalculator(PdsBatchAttribId _attribId)
    {
        InventBatchJournalAttributeCalculator   calculator  = InventBatchJournalAttributeCalculator::construct();
        PdsBatchAttrib                          batchAttrib = PdsBatchAttrib::find(_attribId);

        calculator.parmBatchAttrib(batchAttrib);

        switch (batchAttrib.PdsBatchAttribType)
        {
            case PdsBatchAttribType::Integer:
            case PdsBatchAttribType::Realnumber:
                calculator.parmInventBatchJournalAttributeOperator(InventBatchJournalAttributeOpWeightedAvg::construct());
                break;
            default:
                // Unsupported batch attribues
                calculator.parmInventBatchJournalAttributeOperator(InventBatchJournalAttributeOpNull::construct());
                break;
        }

        return calculator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
