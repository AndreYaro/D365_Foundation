<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsJournalFormTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WmsJournalFormTable extends JournalFormTable
{
    FormFunctionButtonControl   ctrlPackingSlipUpdate;
    FormFunctionButtonControl   ctrlPackingSlipUpdateSales;
    FormFunctionButtonControl   ctrlTransferOrderReceive;
    FormFunctionButtonControl   ctrlCreateLines;
    FormStringControl           ctrlReturnItemNum;
    FormStringControl           ctrlReturnDispositionCodeId;
    FormStringControl           ctrlVendAccount;
    FormMenuButtonControl       ctrlFunctionsLinesButton;
    FormButtonGroupControl      ctrlNewDeleteLineGroup;

    InventDim                   inventDim;
    FormDataSource              inventDim_ds;

    WMSJournalFormTrans         wmsjournalFormTrans;

    private boolean wmsJournalTransPODocStateCheckFlight = WMSJournalPOExistsAndNotApproveDisablePostbtnFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runbaseMainEnd</Name>
				<Source><![CDATA[
    public void runbaseMainEnd(JournalRunbaseCallbackable _runBaseBatch, boolean _fromCatchError)
    {
        super(_runBaseBatch, _fromCatchError);

        if (wmsjournalFormTrans)
        {
            wmsjournalFormTrans.runbaseMainEnd(_runBaseBatch, _fromCatchError);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSJournalFormTrans</Name>
				<Source><![CDATA[
    public WMSJournalFormTrans parmWMSJournalFormTrans(WMSJournalFormTrans  _wmsJournalFormTrans = wmsJournalFormTrans)
    {
        wmsjournalFormTrans = _wmsJournalFormTrans;

        return wmsjournalFormTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal is enabled for editing.
    /// </summary>
    /// <returns>
    /// true if the journal is enabled; otherwise, false.
    /// </returns>
    public boolean isJournalEnabled()
    {
        return !journalTable.Posted && this.isJournalFree() && !formRun.inViewMode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains code to be executed after the active form post has been loaded.
    /// </summary>
    public void datasourceActivePost()
    {
        WMSJournalTable wmsJournalTable;

        if (inventDim_ds)
        {
            inventDim_ds.active();
        }

        wmsJournalTable.data(journalTable);
        ctrlReturnDispositionCodeId.enabled(wmsJournalTable.ReturnItemNum ? true : false);
        ctrlReturnItemNum.enabled(wmsJournalTable.InventTransType == InventTransType::Sales);
        this.setVendAccountEnabledState();

        //Note: if createQuarantineOrder is set for a transtype that does not support quarantine the control is enabled so the user can still de-select quarantine control
        if (!wmsJournalTable.CreateQuarantineOrder && !InventTrans::canTransTypeDoQuarantineMgmt(wmsJournalTable.InventTransType))
        {
            journalTable_ds.object(fieldNum(WMSJournalTable, CreateQuarantineOrder)).allowEdit(false);
            journalTable_ds.object(fieldNum(WMSJournalTable, CreateQuarantineOrder)).skip(true);
        }
        else
        {
            journalTable_ds.object(fieldNum(WMSJournalTable, CreateQuarantineOrder)).allowEdit(true);
            journalTable_ds.object(fieldNum(WMSJournalTable, CreateQuarantineOrder)).skip(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePre</Name>
				<Source><![CDATA[
    public boolean datasourceCreatePre()
    {
        boolean     ret = super();

        if (ret)
        {
            Args args = new Args();

            args.name(formstr(WMSJournalCreate));
            args.caller(this);
            args.parmEnum(this.journalTypeId());
            args.parmEnumType(enumnum(WMSJournalType));

            if (this.formRun() && this.formRun().args())
            {
                var record = this.formRun().args().record();
                args.record(record);
            }

            var journalCreate = ClassFactory.formRunClass(args);
            journalCreate.init();
            journalCreate.run();
            journalCreate.wait();

            ret = journalCreate.closedOk();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePost</Name>
				<Source><![CDATA[
    public void datasourceCreatePost()
    {
        super();
 
        journalTable.JournalNameId   = WMSJournalName::standardJournalName(journalTypeId);
        journalTable.JournalType     = journalTypeId;

        if (journalTable.JournalNameId)
        {
            this.fieldModifiedJournalNameIdPost();
            journalTable_ds.rereadReferenceDataSources();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    public void dataSourceInitPost(JournalTableMap _journalTable)
    {
        super(_journalTable);

        if (formRun.args())
        {
            JournalFormParameters journalFormParameters = formRun.args().parmObject() as JournalFormParameters;

            if (journalFormParameters)
            {
                str journalIdRangeValue = journalFormParameters.parmJournalIdRangeValue();

                QueryBuildDataSource journalQueryDataSource = journalTable_ds.query().dataSourceTable(tableNum(WMSJournalTable));
                QueryBuildRange journalIdRange = SysQuery::findOrCreateRange(journalQueryDataSource, fieldNum(WMSJournalTable, JournalId));
                journalIdRange.value(journalIdRangeValue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePre</Name>
				<Source><![CDATA[
    public void datasourceInitValuePre()
    {
        WMSJournalTable wmsJournalTable = this.journalTableData().journalTable();

        switch (this.journalTypeId())
        {
            case WMSJournalType::Reception:
                wmsJournalTable.InventTransType = InventTransType::Purch;
                break;
            case WMSJournalType::Production:
                wmsJournalTable.InventTransType = InventTransType::Production;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePost</Name>
				<Source><![CDATA[
    public void datasourceWritePost()
    {
        super();

        // special case: if there are no lines, and then you create a new line and hit the Functions button, then we will write
        // the new line to the database, which means the buttons under the Functions button should perhaps be enabled.
        this.enableButtonsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    public void enableButtonsActive(boolean _enableInfolog = true)
    {
        WMSJournalTable localWMSJournalTable = journalTable;

        super();

        if (ctrlPackingSlipUpdate)
        {
            ctrlPackingSlipUpdate.enabled(localWMSJournalTable.Posted && WMSJournalTable::hasPurchLines(localWMSJournalTable.JournalId));
        }

        if (ctrlPostJournal && ctrlPostJournal.isEnabled()
            && localWMSJournalTable.inventTransType == InventTransType::Purch && localWMSJournalTable.inventTransRefId
            && wmsJournalTransPODocStateCheckFlight)
        {
            PurchTable purchTable = PurchTable::find(localWMSJournalTable.inventTransRefId);
            ctrlPostJournal.enabled(purchTable.RecId && purchTable.DocumentState != VersioningDocumentState::Draft);
        }

        if (ctrlPackingSlipUpdateSales)
        {
            ctrlPackingSlipUpdateSales.enabled(localWMSJournalTable.Posted && WMSJournalTable::hasReturnLines(localWMSJournalTable.JournalId));
        }

        if (ctrlTransferOrderReceive)
        {
            ctrlTransferOrderReceive.enabled(localWMSJournalTable.Posted && localWMSJournalTable.InventTransType == InventTransType::TransferOrderReceive);
        }

        boolean journalIsEnabled = journalTable.JournalNameId != '' && this.isJournalEnabled();
        if (ctrlCreateLines)
        {
            ctrlCreateLines.enabled(journalIsEnabled);
        }

        if (ctrlFunctionsLinesButton)
        {
            ctrlFunctionsLinesButton.enabled(journalIsEnabled);
        }

        if (ctrlNewDeleteLineGroup)
        {
            ctrlNewDeleteLineGroup.enabled(journalIsEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedInventTransRefIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedInventTransRefIdPost()
    {
        ProdTable           prodTable;
        InventTransferTable inventTransferTable;
        InventMovement      inventMovement;
        WMSJournalTable     wmsJournalTable = journalTable;

        if (wmsJournalTable.InventTransRefId)
        {
            switch (wmsJournalTable.InventTransType)
            {
                case InventTransType::Production:
                    prodTable = ProdTable::find(wmsJournalTable.InventTransRefId);
                    if (prodTable)
                    {
                        inventMovement = InventMovement::construct(prodTable);
                        wmsJournalTable.initFromMovement(inventMovement, inventDim);
                    }
                    break;

                case InventTransType::TransferOrderReceive:
                    inventTransferTable = InventTransferTable::find(wmsJournalTable.InventTransRefId);
                    if (inventTransferTable)
                    {
                        inventDim.InventLocationId = inventTransferTable.InventLocationIdTo;
                        inventDim.InventSiteId     = InventLocation::find(inventTransferTable.InventLocationIdTo).InventSiteId;

                        inventDim.data(InventDim::findOrCreate(inventDim));
                        inventDim_ds.setCurrent();
                        inventDim_ds.refresh();
                    }
                    break;
                default:
                    break;
            }
        }

        ctrlReturnItemNum.enabled(wmsJournalTable.InventTransType == InventTransType::Sales);
        ctrlReturnDispositionCodeId.enabled(wmsJournalTable.InventTransType == InventTransType::Sales && wmsJournalTable.ReturnItemNum != '');
        this.setVendAccountEnabledState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedReturnItemNumPost</Name>
				<Source><![CDATA[
    public void fieldModifiedReturnItemNumPost()
    {
        WMSJournalTable wmsJournalTable = journalTable;

        ctrlReturnDispositionCodeId.enabled(wmsJournalTable.ReturnItemNum ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateDim_InventLocation</Name>
				<Source><![CDATA[
    public boolean fieldValidateDim_InventLocation()
    {
        boolean             ret                 = true;
        InventTransferTable inventTransferTable;
        WMSJournalTable     wmsJournalTable     = journalTable;

        if (wmsJournalTable.InventTransRefId)
        {
            switch (wmsJournalTable.InventTransType)
            {
                case InventTransType::TransferOrderReceive:
                    inventTransferTable = InventTransferTable::find(wmsJournalTable.InventTransRefId);
                    if (inventTransferTable.InventLocationIdTo != inventDim.InventLocationId)
                    {
                        ret = checkFailed(strFmt("@SYS54084",inventTransferTable.InventLocationIdTo));
                    }
                    break;

                default:
                    ret = true;
                    break;
            }
        }

        if (inventDim.InventSiteId && inventDim.InventLocationId)
        {
            if (InventLocation::find(inventDim.InventLocationId).InventSiteId != inventDim.InventSiteId)
            {
                ret = checkFailed(strFmt("@SYS104861",inventDim.InventLocationId,inventDim.InventSiteId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost()
    {
        this.parmPostingStatusFilterEnabled(true);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDatasourceAllow</Name>
				<Source><![CDATA[
    public void initDatasourceAllow()
    {
        if (!journalTable_ds)
        {
            return;
        }

        super();

        inventDim_ds.allowEdit(!journalTable.Posted && !formRunLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimInitPost</Name>
				<Source><![CDATA[
    public void inventDimInitPost(InventDim _inventDim)
    {
        inventDim       = _inventDim;
        inventDim_ds    = FormDataUtil::getFormDataSource(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesLeftForUpdateInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether <c>PurchLines</c> are left for packing slip update.
    /// </summary>
    /// <param name="_caller">
    ///    A <c>FormFunctionButtonControl</c> object.
    /// </param>
    public void linesLeftForUpdateInfo(FormFunctionButtonControl _caller)
    {
        switch (_caller.name())
        {
            case ctrlPackingSlipUpdateSales.name() :
                if (WMSJournalTable::hasPurchLines(journalTable.JournalId))
                {
                    //After this update Purch order lines are pending packing slip update
                    warning("@SYS117706");
                }
                break;

            case ctrlPackingSlipUpdate.name() :
                if (WMSJournalTable::hasReturnLines(journalTable.JournalId))
                {
                    //After this update Return order lines are pending packing slip update
                    warning("@SYS117707");
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendAccountEnabledState</Name>
				<Source><![CDATA[
    private void setVendAccountEnabledState()
    {
        WMSJournalTable wmsJournalTable = journalTable as WMSJournalTable;
        ctrlVendAccount.enabled(wmsJournalTable.InventTransType == InventTransType::Sales ||
                                wmsJournalTable.InventTransType == InventTransType::Purch ||
                                wmsJournalTable.InventTransType == InventTransType::ConsignmentReplenishmentOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlFunctionsLinesButton</Name>
				<Source><![CDATA[
    public FormMenuButtonControl parmCtrlFunctionsLinesButton(FormMenuButtonControl _ctrlFunctionsLinesButton = ctrlFunctionsLinesButton)
    {
        ctrlFunctionsLinesButton = _ctrlFunctionsLinesButton;
        return ctrlFunctionsLinesButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlNewDeleteLineGroup</Name>
				<Source><![CDATA[
    public FormButtonGroupControl parmCtrlNewDeleteLineGroup(FormButtonGroupControl _ctrlNewDeleteLineGroup = ctrlNewDeleteLineGroup)
    {
        ctrlNewDeleteLineGroup = _ctrlNewDeleteLineGroup;
        return ctrlNewDeleteLineGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCreateLines</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlCreateLines(FormFunctionButtonControl _ctrlCreateLines = ctrlCreateLines)
    {
        ctrlCreateLines = _ctrlCreateLines;
        return ctrlCreateLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPackingSlipUpdate</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlPackingSlipUpdate(FormFunctionButtonControl _ctrlPackingSlipUpdate = ctrlPackingSlipUpdate)
    {
        ctrlPackingSlipUpdate = _ctrlPackingSlipUpdate;
        return ctrlPackingSlipUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPackingSlipUpdateSales</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlPackingSlipUpdateSales(FormFunctionButtonControl _ctrlPackingSlipUpdateSales = ctrlPackingSlipUpdateSales)
    {
        ctrlPackingSlipUpdateSales = _ctrlPackingSlipUpdateSales;
        return ctrlPackingSlipUpdateSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlReturnDispositionCodeId</Name>
				<Source><![CDATA[
    public FormStringControl parmCtrlReturnDispositionCodeId (FormStringControl _ctrlReturnDispositionCodeId = ctrlReturnDispositionCodeId)
    {
        ctrlReturnDispositionCodeId = _ctrlReturnDispositionCodeId;
        return ctrlReturnDispositionCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlReturnItemNum</Name>
				<Source><![CDATA[
    public FormStringControl parmCtrlReturnItemNum(FormStringControl _ctrlReturnItemNum = ctrlReturnItemNum)
    {
        ctrlReturnItemNum = _ctrlReturnItemNum;
        return ctrlReturnItemNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlTransferOrderReceive</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlTransferOrderReceive(FormFunctionButtonControl _ctrlTransferOrderReceive = ctrlTransferOrderReceive)
    {
        ctrlTransferOrderReceive = _ctrlTransferOrderReceive;
        return ctrlTransferOrderReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlVendAccount</Name>
				<Source><![CDATA[
    public FormStringControl parmCtrlVendAccount(FormStringControl _ctrlVendAccount = ctrlVendAccount)
    {
        ctrlVendAccount = _ctrlVendAccount;
        return ctrlVendAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>