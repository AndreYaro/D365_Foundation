<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ThresholdValueCalculation_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ThresholdValueCalculation_IN</c> provides the cumulative value, transaction value, and transaction line value
///     which is used when check whether the threshold section is the targe threshold section to be targeted.
/// </summary>
abstract class ThresholdValueCalculation_IN
{
    ThresholdSections_IN    thresholdSection;
    FromDate                fromDate;
    ToDate                  toDate;
    boolean                 isCumulativeValueCalulated;
    boolean                 isTransValueCalculated;
    boolean                 isTransLineValueCalculated;
    Real                    cumulativeValue;
    Real                    transValue;
    Real                    transLineValue;
    ThresholdSourceLine_IN  thresholdSourceLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCumulativeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates cumulative value.
    /// </summary>
    abstract protected void calcCumulativeValue()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTransLineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates transaction Line value.
    /// </summary>
    abstract protected void calcTransLineValue()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTransValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates transaction value.
    /// </summary>
    abstract protected void calcTransValue()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCumulativeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets cumulative value, if it has not been calculated, calculate it.
    /// </summary>
    /// <returns>
    ///     Returns calculated cumulative value.
    /// </returns>
    public Real getCumulativeValue()
    {
        if (!isCumulativeValueCalulated)
        {
            this.calcCumulativeValue();
            isCumulativeValueCalulated = true;
        }
        return cumulativeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransLineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets transaction line value, if it has not been calculated, calculate it.
    /// </summary>
    /// <returns>
    ///     Returns calculated transaction line value.
    /// </returns>
    public Real getTransLineValue()
    {
        if (!isTransLineValueCalculated)
        {
            this.calcTransLineValue();
            isTransLineValueCalculated = true;
        }
        return TransLineValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets transaction value, if it has not been calculated, calculate it.
    /// </summary>
    /// <returns>
    ///     Returns calculated transaction value.
    /// </returns>
    public Real getTransValue()
    {
        if (!isTransValueCalculated)
        {
            this.calcTransValue();
            isTransValueCalculated = true;
        }
        return transValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>ThresholdValueCalculation_IN</c> instance.
    /// </summary>
    /// <param name="_thresholdSection">
    ///     The <c>ThresholdSections_IN</c> buffer.
    /// </param>
    /// <param name="_thresholdSourceLine">
    ///     The application <c>ThresholdSourceLine_IN</c> buffer.
    /// </param>
    public void initialize(ThresholdSections_IN _thresholdSection, ThresholdSourceLine_IN _thresholdSourceLine)
    {
        thresholdSourceLine     = _thresholdSourceLine;
        thresholdSection        = _thresholdSection;
        fromDate                = thresholdSection.ValidFrom;
        toDate                  = thresholdSection.ValidTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setThresholdSection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets <c>ThresholdSections_IN</c> buffer, reset calculation status of cumulative value if date ranged changed.
    /// </summary>
    /// <param name="_thresholdSection">
    ///     The <c>ThresholdSections_IN</c> buffer.
    /// </param>
    public void setThresholdSection(ThresholdSections_IN _thresholdSection)
    {
        thresholdSection = _thresholdSection;
        // If period change, then cumulative value need to be recalculated.
        if (thresholdSection.ValidFrom != fromDate || thresholdSection.ValidTo != toDate)
        {
            fromDate                = thresholdSection.ValidFrom;
            toDate                  = thresholdSection.ValidTo;
            isCumulativeValueCalulated = false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>