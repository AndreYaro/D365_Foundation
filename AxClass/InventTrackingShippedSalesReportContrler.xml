<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingShippedSalesReportContrler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTrackingShippedSalesReportContrler</c> class is the controller class for
/// the <c>InventTrackingShippedSalesReport</c> SSRS report.
/// </summary>
class InventTrackingShippedSalesReportContrler extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isStandalone</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the controller was invoked as a standalone or not.
    /// </summary>
    /// <returns>
    ///     True if invoked as standalone; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Standalone is meant where there is no object passed in the arguments, for example, from the main menu, and, therefore, would not have any information to populate the
    ///     parameter form with.
    /// </remarks>
    public boolean isStandalone()
    {
        Args    controllerArgs  = this.parmArgs();
        Object  object          = controllerArgs ? controllerArgs.object() : null;

        if (object != null
            && !(object is InventTrackingDimTracingCriteria))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return !controllerArgs || !object;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromSysLastValue</Name>
				<Source><![CDATA[
        protected void loadFromSysLastValue()
    {
        // Don't load from SysLastValue if controller was not invoked standalone.
        if (!this.isStandalone())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default values for the report parameters.
    /// </summary>
    protected void prePromptModifyContract()
    {
        InventTrackingShippedSalesReportContract    contract        = this.parmReportContract().parmRdpContract() as InventTrackingShippedSalesReportContract;
        InventTrackingDimTracingCriteria            criteria        = this.parmArgs().object() as InventTrackingDimTracingCriteria;
        QueryBuildDataSource                        qbdsCustTable   = this.getFirstQuery().dataSourceTable(tableNum(CustTable));

        // The query CustTableSRS is being used which was not created specifically for this report. Therefore, make sure the query is in a form that is expected for this report.
        qbdsCustTable.clearRanges();
        qbdsCustTable.addRange(fieldNum(CustTable, AccountNum));

        if (criteria)
        {
            contract.parmItemId(criteria.parmItemIdCriteria());
            contract.parmFromDate(criteria.parmFromDateCriteria());
            contract.parmToDate(criteria.parmToDateCriteria());
            contract.parmPdsVendBatchId(criteria.parmPdsVendBatchIdCriteria());
            contract.parmInventDimContract().parmInventDim(criteria.parmInventDimCriteria());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an <c>InventTrackingShippedSalesReportContrler</c> object.
    /// </summary>
    /// <returns>
    ///     An <c>InventTrackingShippedSalesReportContrler</c> object.
    /// </returns>
    public static InventTrackingShippedSalesReportContrler construct()
    {
        return new InventTrackingShippedSalesReportContrler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of <c>InventTrackingShippedSalesReportContrler</c> class and runs
    /// the <c>InventTrackingShippedSalesReport</c> report.
    /// </summary>
    /// <param name="_args">
    ///     Arguments passed from the corresponding menu item object.
    /// </param>
    public static void main(Args _args)
    {
        InventTrackingShippedSalesReportContrler controller = new InventTrackingShippedSalesReportContrler();

        controller.parmReportName(ssrsReportStr(InventTrackingShippedSalesReport, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>