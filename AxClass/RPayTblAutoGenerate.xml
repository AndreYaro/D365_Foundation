<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTblAutoGenerate</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RPayTblAutoGenerate extends RunBaseBatch implements BatchRetryable
{
    QueryRun            queryRun;
    RPayTblRateCode     rPayTblRateCode;
    NoYes               rPayTblInteractive;
    RPayTblType         rPayTblType;
    NoYes               rPayTransVisible;
    DialogField         rPayTblRateCodeField,
                        rPayTblTypeField,
                        rPayTblInteractiveField,
                        rPayTransVisibleField;
    RPayTblNum          prevTblNum;
    RPayTblDate         rPayTblDate;
    RPayTblParameters   rPayTblParameters;

    #define.CurrentVersion(2)

    #localmacro.CurrentList
        rPayTblRateCode,
        rPayTblInteractive,
        rPayTblType,
        rPayTransVisible,
        rPayTblDate
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildInternalQueryRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected QueryRun buildInternalQueryRun(QueryBuildDataSource _qbdsOld, boolean _copyChildren)
    {
        QueryBuildRange         qbrOld;
        QueryBuildDataSource    qbdsNew, qbdsChild;
        Query                   query;
        int                     i, j;

        query   = new Query();
        qbdsNew = query.addDataSource(_qbdsOld.table());

        for (i = 1; i <= _qbdsOld.rangeCount(); i++)
        {
            qbrOld = _qbdsOld.range(i);
            qbdsNew.addRange(qbrOld.field()).value(qbrOld.value());
        }

        if (_copyChildren)
        {
            for (j = 1; j <= _qbdsOld.childDataSourceCount(); j ++)
            {
                qbdsChild = _qbdsOld.childDataSourceNo(j);

                qbdsNew = qbdsNew.addDataSource(qbdsChild.table());
                qbdsNew.joinMode(qbdsChild.joinMode());
                qbdsNew.relations(true);

                for (i = 1; i <= qbdsChild.rangeCount(); i++)
                {
                    qbrOld = qbdsChild.range(i);
                    qbdsNew.addRange(qbrOld.field()).value(qbrOld.value());
                }
            }
        }

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTbl</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createTbl(RPayHrmOrganizationId _rPayHrmOrganizationId, RPayFormType _rPayFormType)
    {
        RPayTblDimension    tblDimension;
        ReportPeriod_RU     periodEndDate;
        ReportPeriod_RU     periodStartDate;

        tblDimension = new RPayTblDimension();
        tblDimension.parmOrganizationId(_rPayHrmOrganizationId);
        tblDimension.parmPayFormType(_rPayFormType);

        periodEndDate   = RPayParameters::payPeriod();
        periodStartDate = dateStartMth(periodEndDate);

        RPayTblUpdater::updateTimesheetFromDimension(periodStartDate, periodEndDate, tblDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase     dialog            = super();

        dialog.addGroup("@RUP364");
        rPayTblRateCodeField    = dialog.addField(extendedtypestr(RPayTblRateCode));

        dialog.addGroup("@SYS7895");
        rPayTblTypeField        = dialog.addField(enumStr(RPayTblType));
        rPayTblInteractiveField = dialog.addField(enumStr(NoYes), "@RUP417");

        dialog.addGroup("@SYS57714");
        rPayTransVisibleField   = dialog.addField(enumStr(NoYes), "@SYS8335");

        rPayTblRateCodeField.value(rPayTblRateCode ? rPayTblRateCode : rPayTblParameters.PayRate);
        rPayTblTypeField.value(rPayTblType ? rPayTblType : rPayTblParameters.PayTblType);
        rPayTblInteractiveField.value(rPayTblInteractive ? rPayTblInteractive : rPayTblParameters.Interactive);
        rPayTransVisibleField.value(rPayTransVisible ? rPayTransVisible : rPayTblParameters.Interactive);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean     ret;
        DictType    dictType = new DictType(extendedtypenum(RPayTblRateCode));
        int         i;

        ret = super();

        if (ret)
        {
            rPayTblRateCode = rPayTblRateCodeField.value();

            for (i = 1; i <= dictType.arraySize(); i ++)
            {
                if (rPayTblRateCode[i] && ! RPayRateTable::find(rPayTblRateCode[i]))
                {
                    ret = checkFailed(strfmt("@RUP2037", dictType.label(i)));
                }
            }

            rPayTblType        = rPayTblTypeField.value();
            rPayTblInteractive = rPayTblInteractiveField.value();
            rPayTransVisible   = rPayTransVisibleField.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters_T13</Name>
				<Source><![CDATA[
    private void initParameters_T13(RPayTblJournal _rPayTblJournal, RHRMOrganizationAll _rPayHrmOrganizationId)
    {
        RPayHRMOrganization rPayHRMOrganization = RPayHRMOrganization::find(_rPayHrmOrganizationId);

        _rPayTblJournal.OrganizationLead         = rPayHRMOrganization.OrganizationLead;
        _rPayTblJournal.Responsible              = rPayHRMOrganization.Responsible;
        _rPayTblJournal.PersonnelServiceEmployee = rPayTblParameters.PersonnelServiceEmployee;
        _rPayTblJournal.NonAppearenceGroupCode   = rPayTblParameters.NonAppearenceGroupCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        Query                query = new Query("@RUP2091");
        QueryBuildDataSource qbds;

        super();

        rPayTblParameters = RPayTblParameters::find();

        qbds = query.addDataSource(tablenum(RPayHRMOrganization));
        qbds.addRange(fieldnum(RPayHRMOrganization, HrmOrganizationId));
        qbds.addRange(fieldnum(RPayHRMOrganization, Responsible));

        qbds = query.addDataSource(tablenum(RPayFormTypeTable));
        qbds.addRange(fieldnum(RPayFormTypeTable, PayFormType));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ #CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTblDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTblDate parmTblDate(RPayTblDate _rPayTblDate = rPayTblDate)
    {
        rPayTblDate = _rPayTblDate;

        return rPayTblDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun(QueryRun _queryRun = queryRun)
    {
        queryRun = _queryRun;

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RPayHRMOrganization     rPayHRMOrganization;
        RPayFormTypeTable       rPayFormTypeTable;
        QueryRun                orgQueryRun, formQueryRun;
        QueryBuildDataSource    qbds;
        RPayTblJournal          tblJournal;
        QueryFilter             qf;
        int i;

        orgQueryRun  = this.buildInternalQueryRun(queryRun.query().dataSourceTable(tablenum(RPayHRMOrganization)), true);
        formQueryRun = this.buildInternalQueryRun(queryRun.query().dataSourceTable(tablenum(RPayFormTypeTable)), false);

        for (i = 1; i <= queryRun.query().queryFilterCount(); i++)
        {
            qf = queryRun.query().queryFilter(i);

            if (tableNum(RPayHRMOrganization) == qf.dataSource().table())
            {
                orgQueryRun.query().addQueryFilter(orgQueryRun.query().dataSourceTable(tableNum(RPayHRMOrganization)), qf.field()).value(qf.value());
            }

            if (tableNum(RPayFormTypeTable) == qf.dataSource().table())
            {
                formQueryRun.query().addQueryFilter(orgQueryRun.query().dataSourceTable(tableNum(RPayFormTypeTable)), qf.field()).value(qf.value());
            }
        }

        qbds = formQueryRun.query().dataSourceTable(tablenum(RPayFormTypeTable));
        qbds = qbds.addDataSource(tablenum(RHRMEmplTable));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.relations(true);

        this.progressInit("@RUP2091",
                          SysQuery::countLoops(formQueryRun) * SysQuery::countTotal(orgQueryRun),
                          #AviUpdate);

        ttsBegin;
        while (orgQueryRun.next())
        {
            rPayHRMOrganization = orgQueryRun.get(tablenum(RPayHRMOrganization));

            formQueryRun.reset();

            while (formQueryRun.next())
            {
                rPayFormTypeTable = formQueryRun.get(tablenum(RPayFormTypeTable));

                tblJournal = RPayTblJournal::findOrCreate(rPayHRMOrganization.hrmOrganizationId, RPayParameters::payPeriod(), rPayFormTypeTable.PayFormType);
                tblJournal.selectForUpdate(true);
                tblJournal.Interactive = rPayTblInteractive;
                tblJournal.PayTransVisible = rPayTransVisible;
                tblJournal.PayTblType = rPayTblType;
                tblJournal.PayRate = rPayTblRateCode;
                tblJournal.update();

                progress.incCount(1, 1);
                progress.setText(rPayHRMOrganization.Description + "@RUP2242" + rPayFormTypeTable.PayFormTypeName, 1);

                this.createTbl(rPayHRMOrganization.HrmOrganizationId, rPayFormTypeTable.PayFormType);
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = RunBase::getVersion(_packedClass);
        container   conQueryRun;

        switch (version)
        {
            case #CurrentVersion:

                [version, #CurrentList, conQueryRun] = _packedClass;
                queryRun = new QueryRun(conQueryRun);
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP2091";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayTblAutoGenerate rPayTblAutoGenerate;

        if (! _args.caller())
        {
            throw error("@SYS18626");
        }

        rPayTblAutoGenerate = new RPayTblAutoGenerate();

        rPayTblAutoGenerate.getLast();
        rPayTblAutoGenerate.parmTblDate(_args.caller().getTblDate());

        if (rPayTblAutoGenerate.prompt())
        {
            rPayTblAutoGenerate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>