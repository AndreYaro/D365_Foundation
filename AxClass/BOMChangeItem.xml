<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomChangeItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BomChangeItem extends RunBase
{
    ItemId              fromItemId;
    ItemId              toItemId;
    TransDate           fromDate;
    TransDate           toDate;
    OverwriteAppend     updateMethod;
    NoYes               removeConfigChoice;
    BOM                 tmpBOM;
    InventDim           tmpInventDim;
    QueryRun            queryRun;
    Map                 mapTmpBOM;
    Map                 mapBOMRecId;
    Map                 mapNewBOMRecId;

    DialogRunbase       dialog;
    DialogField         fieldToItemId;
    DialogField         fieldFromDate;
    DialogField         fieldToDate;
    DialogField         fieldUpdateMethod;
    DialogField         fieldRemoveConfigChoice;

    boolean             isFormula;

    #DEFINE.dialogToItemIdFieldNo(998)

    #DEFINE.dialogUpdateMethodFieldNo(999)
    #DEFINE.dialogUpdateMethodCtrlName("Fld999_1")

    #define.dialogQueryCtrlName('Grp_5')
    #DEFINE.CurrentVersion(4)
    #LOCALMACRO.CurrentList
        fromDate,
        toDate,
        toItemId,
        updateMethod,
        removeConfigChoice,
        isFormula
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryRun</Name>
				<Source><![CDATA[
    private void buildQueryRun()
    {
        Query                      query = new Query();
        QueryBuildDataSource       queryBuildDataSource = query.addDataSource(tablenum(BOM));
        QueryBuildRange itemIdRange = queryBuildDataSource.addRange(fieldnum(BOM,ItemId));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpBOM</Name>
				<Source><![CDATA[
    public void createTmpBOM()
    {
        container       packedInventDim;
        container       packedBOM;
        container       packedBOMRecId;
        Map             mapInventDim;
        MapEnumerator   inventDimMapEnumerator;
        MapEnumerator   tmpMapEnumerator;
        recId           origRecId;

        if (this.mustCreateTmpFile())
        {
            tmpBOM.setTmp();
            tmpInventDim.setTmp();

            delete_from tmpBOM;
            delete_from tmpInventDim;

            queryRun.reset();

            [packedBOM, packedBOMRecId, packedInventDim] = BOM::createBomChangeItem(queryRun.pack(), toItemId, fromDate, toDate, updateMethod);

            mapBOMRecId = Map::create(packedBOMRecId);
            mapNewBOMRecId = new Map(typeName2Type(extendedtypestr(recId)), typeName2Type(extendedtypestr(recId)));

            mapTmpBOM = Map::create(packedBOM);
            tmpMapEnumerator = mapTmpBOM.getEnumerator();

            mapInventDim = Map::create(packedInventDim);
            inventDimMapEnumerator = mapInventDim.getEnumerator();

            while (tmpMapEnumerator.moveNext())
            {
                tmpBOM.data(tmpMapEnumerator.currentValue());

                if (mapBOMRecId.exists(tmpBOM.RecId))
                {
                    origRecId = mapBOMRecId.lookup(tmpBOM.RecId);
                }
                if (!BOM::existRecId(origRecId))
                {
                    tmpBOM.LineCreationSequenceNumber = (tmpBOM.LineCreationSequenceNumber != 0) ? tmpBOM.LineCreationSequenceNumber : BOM::nextLineCreationSequenceNumber(tmpBOM);
                }
                tmpBOM.doInsert();
                mapNewBOMRecId.insert(tmpBOM.RecId, origRecId);
            }

            mapTmpBOM   = null;
            mapBOMRecId = null;
            mapBOMRecId = mapNewBOMRecId;

            while (inventDimMapEnumerator.moveNext())
            {
                tmpInventDim.data(inventDimMapEnumerator.currentValue());
                tmpInventDim.doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteConfigChoice</Name>
				<Source><![CDATA[
    void deleteConfigChoice(BOM bom, ItemId itemId)
    {
        ConfigChoice    configChoice;
        BOMVersion      bomVersion;

        select firstonly bomVersion
            where bomVersion.bomId == bom.bomId;

        if (bomVersion)
        {
            delete_from configChoice
                where   configChoice.ItemId          == bomVersion.ItemId   &&
                        configChoice.ChosenItemId    == itemId              &&
                        configChoice.ChosenGroupId   == bom.ConfigGroupId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        Object dialogGroup;

        dialog = super();
        if (this.pmfIsFormula())
        {
            dialog.caption("@PRO1014");

            dialogGroup = dialog.getDialogClass(#dialogQueryCtrlName);
            if (dialogGroup)
            {
                dialogGroup.caption("@PRO1509");
            }
        }

        // Cannot use standard addFieldValue method for adding fieldToItemId and fieldUpdateMethod as they
        // have validate/modiefied methods overloaded. For that reason the name needs to be explicitly set.

        //following lines equivalent to: fieldToItemId = dialog.addFieldValue(extendedTypeStr(ItemId), toItemId, "@SYS5347","@SYS75294");
        fieldToItemId = new DialogField(dialog,extendedtypestr(ItemId),#dialogToItemIdFieldNo);
        dialog.addCtrlDialogField(fieldToItemId.name());

        fieldToItemId.init(dialog);
        fieldToItemId.label("@SYS5347");
        fieldToItemId.helpText("@SYS75294");
        fieldToItemId.value(toItemId);
        fieldToItemId.fieldControl().mandatory(true);
        //fieldToItemId completely set

        //following lines equivalent to: fieldUpdateMethod = dialog.addFieldValue(enumStr(OverwriteAppend), updateMethod, "@SYS52538","@SYS70895");
        fieldUpdateMethod = new DialogField(dialog,enumstr(OverwriteAppend),#dialogUpdateMethodFieldNo);
        dialog.addCtrlDialogField(fieldUpdateMethod.name());

        fieldUpdateMethod.init(dialog);
        fieldUpdateMethod.label("@SYS52538");

        if ( this.pmfIsFormula())
        {
            fieldUpdateMethod.helpText("@PRO1011");
        }
        else
        fieldUpdateMethod.helpText("@SYS70895");
        fieldUpdateMethod.value(updateMethod);
        //fieldUpdateMethod completely set

        if (this.pmfIsFormula())
        {
            fieldToDate             = dialog.addFieldValue(extendedtypestr(ToDate), toDate, "@PRO1012","@SYS13966");
            fieldFromDate           = dialog.addFieldValue(extendedtypestr(FromDate), fromDate, "@PRO1013","@SYS9680");
        }
        else
        {
            fieldToDate             = dialog.addFieldValue(extendedtypestr(ToDate), toDate, "@SYS71000","@SYS13966");
            fieldFromDate           = dialog.addFieldValue(extendedtypestr(FromDate), fromDate, "@SYS70993","@SYS9680");
        }
        fieldRemoveConfigChoice = dialog.addFieldValue(enumstr(NoYes), removeConfigChoice,"@SYS87515","@SYS87516");

        if (fieldUpdateMethod.name() != #DialogUpdateMethodCtrlName)
        {
            if (this.pmfIsFormula())
            {
                throw error(strfmt(
                             "@PRO1510",
                             fieldUpdateMethod.name(),
                             #DialogUpdateMethodCtrlName));
            }
            throw error(strfmt("@SYS79285",fieldUpdateMethod.name(),#DialogUpdateMethodCtrlName()));
        }

        if (this.pmfIsFormula())
        {
            dialog.addMenuItemButton(
                MenuItemType::Display,
                menuitemdisplaystr(PmfFormChangeLine),
                DialogMenuItemGroup::BottomGrp);
        }
        else
        {
            dialog.addMenuItemButton(MenuItemType::Display, menuitemdisplaystr(BomChangeLine), DialogMenuItemGroup::BottomGrp);
        }

        // have the dialog call back to this runBase class for the Task method
        dialog.allowUpdateOnTask(this.pmfIsFormula());

        this.dialogActivateFields();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogActivateFields</Name>
				<Source><![CDATA[
    void dialogActivateFields()
    {
        if (fieldUpdateMethod.value() == OverwriteAppend::Overwrite)
        {
            fieldToDate.active(false);
            fieldToDate.value(dateNull());
            fieldFromDate.active(false);
            fieldFromDate.value(dateNull());
            fieldRemoveConfigChoice.active(true);
        }
        else
        {
            fieldToDate.active(true);
            fieldFromDate.active(true);
            fieldRemoveConfigChoice.active(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogTask</Name>
				<Source><![CDATA[
    public void dialogTask(int _task = 0)
    {
        #Task

        if (    (_task != #TaskF1)
             || !this.pmfIsFormula()
             || !PdsGlobal::pdsShowCustomHelp(dialog.formRun(), _task))
        {
            super(_task);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInventDimId</Name>
				<Source><![CDATA[
    boolean existInventDimId(InventDimId inventDimId)
    {
        select tmpInventDim
               index hint DimIdIdx
               where tmpInventDim.InventDimId == inventDimId;

        return inventDimId && tmpInventDim.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld998_1_validate</Name>
				<Source><![CDATA[
    public boolean fld998_1_validate()  // fieldToItemId
    {
        if (!InventTable::find(fieldToItemId.value()))
        {
            error(strfmt("@SYS55265",fieldToItemId.value(),"@SYS5347",tablepname(InventTable)));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld999_1_modified</Name>
				<Source><![CDATA[
    public boolean fld999_1_modified()  // fieldUpdateMethod
    {
        boolean ret;
        Object  control = dialog.formRun().controlCallingMethod();

        ret = control.modified();

        if (ret)
            this.dialogActivateFields();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();
        toItemId            = fieldToItemId.value();
        fromDate            = fieldFromDate.value();
        toDate              = fieldToDate.value();
        updateMethod        = fieldUpdateMethod.value();
        removeConfigChoice  = fieldRemoveConfigChoice.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds "Formula" suffix to the standard design name if the BOM is a formula.
    /// </summary>
    /// <returns>
    /// The standard identifiername with the Formula label appended if the BOM
    /// is a formula.
    /// </returns>
    public identifierName lastValueDesignName()
    {
        identifierName ret;

        ret = super();

        if (this.pmfIsFormula())
        {
            ret += "@PRO1115";
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateTmpFile</Name>
				<Source><![CDATA[
    boolean mustCreateTmpFile()
    {
        boolean         mustCreateTmpFile;
        if (tmpBOM)
        {
            if (Box::yesNo("@SYS70648", DialogButton::No) == DialogButton::Yes)
                mustCreateTmpFile = true;
            else
                mustCreateTmpFile = false;
        }
        else
        {
            mustCreateTmpFile = true;
        }
        return mustCreateTmpFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        this.buildQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (this.isSwappingPrompt())
        {
            return [#CurrentVersion,#CurrentList, queryRun.pack(), this.packfile(), mapBOMRecId.pack()];
        }
        else
        {
            return [#CurrentVersion,#CurrentList, queryRun.pack()];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packfile</Name>
				<Source><![CDATA[
    container packfile()
    {
        if (!mapTmpBOM)
        {
            mapTmpBOM = new Map(typeName2Type(extendedtypestr(recId)), Types::Record);
        }

        if (!mapBOMRecId)
        {
            mapBOMRecId = new Map(typeName2Type(extendedtypestr(recId)), typeName2Type(extendedtypestr(recId)));
        }

        if (!tmpBOM.isTmp())
        {
            tmpBOM.setTmp();
        }

        while select tmpBOM
        {
            mapTmpBOM.insert(tmpBOM.RecId,tmpBOM);
        }

        return mapTmpBOM.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromItemId</Name>
				<Source><![CDATA[
    ItemId parmFromItemId(ItemId _fromItemId = fromItemId)
    {
        fromItemId = _fromItemId;

        return fromItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsFormula</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and returns the isFormula global variable.
    /// </summary>
    /// <param name="_isFormula">
    /// Boolean value used to determine whether or not the BOM is a formula.
    /// </param>
    /// <returns>The value of the _isFormula parameter.</returns>
    protected boolean parmIsFormula(boolean _isFormula = isFormula)
    {
        isFormula = _isFormula;
        return isFormula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpBom</Name>
				<Source><![CDATA[
    BOM parmTmpBom(BOM _tmpBom = tmpBom)
    {
        tmpBom = _tmpBom;
        return tmpBom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpInventDim</Name>
				<Source><![CDATA[
    InventDim parmTmpInventDim(InventDim _tmpinventDim = tmpinventDim)
    {
        tmpinventDim = _tmpinventDim;
        return tmpinventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToItemId</Name>
				<Source><![CDATA[
    ItemId  parmToItemId(ItemId _toItemId = toItemId)
    {
        toItemId = _toItemId;
        return toItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateMethod</Name>
				<Source><![CDATA[
    OverwriteAppend parmUpdateMethod(OverwriteAppend _updateMethod = updateMethod)
    {
        updateMethod = _updateMethod;
        return updateMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsHtmlHelp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the help for the dialog to Formula
    /// help if the BOM is of type formula.
    /// </summary>
    /// <returns>Container containing the formula help.</returns>
    public container pdsHtmlHelp()
    {
        #PmfHelp

        container   helpData = connull();

        if (this.pmfIsFormula())
        {
            helpData = [#PmfHelpFile, #PmfBOMChangeItemHelp];
        }

        return helpData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfIsFormula</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the value of the global isFormula variable
    /// (set by call to parmIsFormula).
    /// </summary>
    /// <returns>Returns value BOMItem is of type Formula.</returns>
    public boolean pmfIsFormula()
    {
        return isFormula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        if (! this.validateItem())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsbegin;
            if (tmpBom)
            {
                this.updateBOMFromTmp();
            }
            else
            {
                this.updateBOM();
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> object.If you change the return value to false, the button will no
    ///    longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container           conMapBomTmp;
        container           conMapBOMRecId;
        container           packedQuery;
        Integer             version      = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                if (this.isSwappingPrompt())
                {
                    [version,#CurrentList, packedQuery, conMapBomTmp, conMapBOMRecId] = packedClass;
                    this.unpackFile(conMapBomTmp, conMapBOMRecId);
                }
                else
                {
                    [version,#CurrentList, packedQuery] = packedClass;
                }
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }

                break;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackFile</Name>
				<Source><![CDATA[
    void unpackFile(container conMapBomTmp, container conMapBOMRecId)
    {
        MapEnumerator       tmpMapEnumerator;
        recId               origRecId;

        mapTmpBOM = Map::create(conMapBomTmp);

        mapBOMRecId = Map::create(conMapBOMRecId);
        mapNewBOMRecId = new Map(typeName2Type(extendedtypestr(recId)), typeName2Type(extendedtypestr(recId)));

        if (!mapTmpBOM)
        {
            return;
        }

        tmpMapEnumerator = mapTmpBOM.getEnumerator();

        while (tmpMapEnumerator.moveNext())
        {
            tmpBom.data(tmpMapEnumerator.currentValue());

            if (mapBOMRecId.exists(tmpBom.RecId))
            {
                origRecId = mapBOMRecId.lookup(tmpBom.RecId);
            }
            if (!BOM::existRecId(origRecId))
            {
                tmpBOM.LineCreationSequenceNumber  = BOM::nextLineCreationSequenceNumber(tmpBOM);
            }            
            tmpBom.doInsert();
            mapNewBOMRecId.insert(tmpBom.RecId, origRecId);
        }

        mapBOMRecId = null;
        mapBOMRecId = mapNewBOMRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOM</Name>
				<Source><![CDATA[
    void updateBOM()
    {
        BOM         queryBOM;
        BOM         bom;

        while (queryRun.next())
        {
            queryBOM = queryRun.get(tablenum(BOM),1);

            bom = BOM::findRecId(queryBOM.RecId, true);

            if (bom.RecId)
            {
                str prefix = this.pmfIsFormula() ? "@PRO2115":"@SYS25825";
                
                setprefix(strfmt(prefix, bom.bomId));

                var originalLineNumber = bom.LineNum;
                var originalItemId = bom.ItemId;

                if (updateMethod == OverwriteAppend::Append)
                {
                    if (toDate)
                    {
                        bom.ToDate = toDate;
                    }

                    if (bom.ToDate  && (bom.ToDate < bom.FromDate))
                    {
                        throw error("@SYS22806");
                    }

                    bom.update();

                    bom.initFromInventTable(InventTable::find(toItemId));
                    bom.LineNum = BOM::nextLineNum(bom.bomId);
                    bom.ToDate  = dateNull();

                    if (fromDate)
                    {
                        bom.FromDate = fromDate;
                    }

                    bom.initPhysicalDimensionsFromBOM(queryBOM);

                    if (this.validateProductDimensions(bom, originalLineNumber, originalItemId, toItemId))
                    {
                        bom.insert();
                    }
                }
                else
                {
                    BOMLineCreationSequenceNumber origBOMLineCreationSequenceNumber = bom.LineCreationSequenceNumber;
                    bom.initFromInventTable(InventTable::find(toItemId));
                    bom.LineCreationSequenceNumber = origBOMLineCreationSequenceNumber;

                    bom.initPhysicalDimensionsFromBOM(queryBOM);
                    
                    if (this.validateProductDimensions(bom, originalLineNumber, originalItemId, toItemId))
                    {
                        bom.update();

                        if (removeConfigChoice == NoYes::Yes && bom.ConfigGroupId)
                        {
                            this.deleteConfigChoice(bom,this.parmFromItemId());
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductDimensions</Name>
				<Source><![CDATA[
    private boolean validateProductDimensions(
        BOM     _bom, 
        LineNum _originalLineNumber,
        ItemId  _fromItemId,
        ItemId  _toItemId)
    {
        if (!_bom.checkProductDim())
        {
            return checkFailed(strFmt("@SCM:ValidationMessage_BOMChangeItem_IncorrectProductDimension", _originalLineNumber, _fromItemId, _toItemId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOMFromTmp</Name>
				<Source><![CDATA[
    void updateBOMFromTmp()
    {
        #OCCRetryCount
        BOM         bom;

        if (! tmpBom)
            return;

        if (! mapBOMRecId)
            return;

        try
        {
            ttsbegin;

            while select tmpBom
            {
                bom = mapBOMRecId.exists(tmpBom.RecId)
                    ? BOM::findRecId(mapBOMRecId.lookup(tmpBom.RecId), true)
                    : BOM::findRecId(tmpBom.RecId);

                if (bom.RecId)
                {
                    buf2Buf(tmpBom,bom);
                    bom.update();

                    if (removeConfigChoice == NoYes::Yes && bom.ConfigGroupId)
                    {
                        this.deleteConfigChoice(bom, this.parmFromItemId());
                    }
                }
                else
                {
                    bom.initFromBOM(tmpBom);
                    bom.insert();
                }
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (updateMethod == OverwriteAppend::Append)
        {
            if (!fieldToDate.value())
            {
                ret = checkFailed(strfmt('%1 %2',"@SYS71000", "@SYS16926"));
            }

            if (!fieldFromDate.value())
            {
                ret = checkFailed(strfmt('%1 %2',"@SYS70993", "@SYS16926"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItem</Name>
				<Source><![CDATA[
    public boolean validateItem()
    {
        boolean                 ret = true;
        QueryBuildRange         queryBuildRangeItemId;

        queryBuildRangeItemId = queryRun.query().dataSourceTable(tablenum(BOM)).findRange(fieldnum(BOM,ItemId));

        if (!queryBuildRangeItemId || !queryBuildRangeItemId.value())
        {
            ret = checkFailed("@SYS70620");
        }

        this.parmFromItemId(queryBuildRangeItemId.value());

        if (toItemId == "")
        {
            ret = checkFailed("@SYS70619");
        }
        // Only inventoried items can be used in BOMs
        if (ret && !InventTable::find(toItemId).isStocked())
        {
            ret = checkFailed("@SYS183556");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BOMChangeItem construct()
    {
        return new BOMChangeItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS71622";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        BOMChangeItem   bomChangeItem = BOMChangeItem::construct();
        bomChangeItem.parmIsFormula(args.menuItemName() == menuitemdisplaystr(PmfFormulaChangeItem));
        if (bomChangeItem.prompt())
        {
            bomChangeItem.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>