<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetAcquisitionStmtDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetAcquisitionStmtDP</c> class is the data provider for the <c>AssetAcquisitionStatement</c> SSRS report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(AssetAcquisitionStmt)),
    SRSReportParameterAttribute(classStr(AssetAcquisitionStmtContract))
]
public class AssetAcquisitionStmtDP extends SRSReportDataProviderPreProcessTempDB
{
    AssetAcquisitionStmtTmp assetAcquisitionStmtTmp;
    private Set mainAccountIdSet = new Set(Types::String);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetAcquisitionStmtTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the temporary table for the report data provider.
    /// </summary>
    /// <returns>
    ///     The temporary table for the report data provider.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(AssetAcquisitionStmtTmp)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetAcquisitionStmtTmp getAssetAcquisitionStmtTmp()
    {
        select assetAcquisitionStmtTmp;
        return assetAcquisitionStmtTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        int hideAssetInfo;
        AssetAcquisitionStmtContract contract = this.parmDataContract() as AssetAcquisitionStmtContract;

        #IsoCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        {
            hideAssetInfo = 1;
        }
        else
        {
            hideAssetInfo = 0;
        }

        Query query = this.parmQuery();
        QueryBuildRange qbr = query.dataSourceTable(tableNum(AssetTrans)).findRange(fieldNum(AssetTrans, BookId));
        boolean isFilterByBook = qbr && qbr.value() != '';

        QueryRun queryRun = new QueryRun(this.parmQuery());
        RecordInsertList recordInsertList = new RecordInsertList(
            tableNum(assetAcquisitionStmtTmp),
            true,
            true,
            true,
            false,
            true,
            assetAcquisitionStmtTmp);

        AssetTable assetTable;
        AssetTrans assetTrans;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccount mainAccount;

        while (queryRun.next())
        {
            assetTable = queryRun.get(tableNum(AssetTable)) as AssetTable;
            assetTrans = queryRun.get(tableNum(AssetTrans)) as AssetTrans;
            generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
            mainAccount = queryRun.get(tableNum(MainAccount)) as MainAccount;

            if (queryRun.changed(tableNum(assetTrans)) && contract)
            {
                assetTrans.updateDocument_W(contract.parmDocumentNumber(), contract.parmDocumentDate());
            }

            assetAcquisitionStmtTmp.clear();
            assetAcquisitionStmtTmp.MainAccountId = mainAccount.MainAccountId;
            assetAcquisitionStmtTmp.HideAsset = hideAssetInfo;

            assetAcquisitionStmtTmp.initFromAssetTable(assetTable);
            assetAcquisitionStmtTmp.initFromAssetTrans(assetTrans);

            if (AssetAcquisitionStmtTotalSectionFlight::instance().isEnabled())
            {
                assetAcquisitionStmtTmp.initFromGeneralJournalAccountEntry(generalJournalAccountEntry);
            }
            else
            {
                this.initFromGeneralJournalAccountEntry(generalJournalAccountEntry, assetTrans, mainAccount.MainAccountId, isFilterByBook);
            }

            recordInsertList.add(assetAcquisitionStmtTmp);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    private void initFromGeneralJournalAccountEntry( 
        GeneralJournalAccountEntry _generalJournalAccountEntry,
        AssetTrans _assetTrans,
        MainAccountNum _mainAccountId,
        boolean _isFilterByBook)
    {
        if (_isFilterByBook
            && AssetBookTable::find(_assetTrans.BookId).CurrentOperationsTax != CurrentOperationsTax::None)
        {
            if (!mainAccountIdSet.in(_mainAccountId))
            {
                AssetBookTableDerived assetBookTableDerived;
                select firstonly BookId from assetBookTableDerived
                    where assetBookTableDerived.AssetTransType == _assetTrans.TransType
                        && (assetBookTableDerived.BookId == _assetTrans.BookId
                            || assetBookTableDerived.BookIdDerived ==  _assetTrans.BookId);

                AssetBookId baseBookId = assetBookTableDerived.BookId;

                if (baseBookId != '')
                {
                    LedgerDimensionDefaultAccount ledgerDimensionBaseBook = AssetLedgerAccounts::assetLedgerDimension(
                        _assetTrans.AssetId,
                        baseBookId,
                        _assetTrans.TransType,
                        _assetTrans.PostingProfile);

                    boolean isSameDimensionForBooks = true;

                    AssetBook assetBook;
                    AssetBookTable assetBookTable;

                    while select BookId from assetBook
                        where assetBook.AssetId == _assetTrans.AssetId
                    exists join assetBookTableDerived
                        where assetBookTableDerived.BookId == baseBookId
                            && assetBookTableDerived.BookIdDerived == assetBook.BookId
                    exists join assetBookTable
                        where assetBookTable.BookId == assetBook.BookId
                            && assetBookTable.CurrentOperationsTax != CurrentOperationsTax::None
                    {
                        LedgerDimensionDefaultAccount ledgerDimensionDerivedBook = AssetLedgerAccounts::assetLedgerDimension(
                            _assetTrans.AssetId,
                            assetBook.BookId,
                            _assetTrans.TransType,
                            _assetTrans.PostingProfile);

                        if (!LedgerDimensionFacade::areEqual(ledgerDimensionBaseBook, ledgerDimensionDerivedBook))
                        {
                            isSameDimensionForBooks = false;
                            break;
                        }
                    }

                    if (isSameDimensionForBooks)
                    {
                        _generalJournalAccountEntry.AccountingCurrencyAmount = abs(_assetTrans.AmountCur) * sign(_generalJournalAccountEntry.AccountingCurrencyAmount);
                        mainAccountIdSet.add(_mainAccountId);
                    }
                }
            }
            else
            {
                _generalJournalAccountEntry.AccountingCurrencyAmount = 0;
            }
        }

        assetAcquisitionStmtTmp.initFromGeneralJournalAccountEntry(_generalJournalAccountEntry);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>