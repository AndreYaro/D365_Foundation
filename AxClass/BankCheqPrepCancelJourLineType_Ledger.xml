<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCheqPrepCancelJourLineType_Ledger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCheqPrepCancelJourLineType_Ledger</c> class prepares a <c>LedgerJournalTrans</c> record with the values necessary to
/// cancel a cheque with a recipient type of ledger.
/// </summary>
class BankCheqPrepCancelJourLineType_Ledger extends BankCheqPrepCancelJourLineType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAmountCur</Name>
				<Source><![CDATA[
    protected AmountCur getAmountCur()
    {
        return bankChequeToCancel.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCurCredit</Name>
				<Source><![CDATA[
    protected AmountCur getAmountCurCredit()
    {
        return bankChequeToCancel.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initChequeRecipientTypeClass</Name>
				<Source><![CDATA[
    protected void initChequeRecipientTypeClass(Common _common, BankChequeRecipientType _bankChequeRecipientType, BankAccountTrans _bankAccountTrans, BankChequeTable _bankChequeTable)
    {
        Debug::assert(_common.TableId == tableNum(BankChequeTable));

        bankChequeToCancel = _common;
        bankAccountTransToCancel = _bankAccountTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retieveOriginalGeneralJournalToCancel</Name>
				<Source><![CDATA[
    private void retieveOriginalGeneralJournalToCancel(GeneralJournalEntry _generalJournalEntry, GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
        LedgerEntry ledgerEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        Debug::assert(bankChequeToCancel != null);

        select firstonly RecId from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.Voucher == bankChequeToCancel.Voucher
                && subledgerVoucherGeneralJournalEntry.AccountingDate == bankChequeToCancel.TransDate
                && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == bankChequeToCancel.DataAreaId
            join RecId, AccountingDate  from _generalJournalEntry
                where _generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry
                    && _generalJournalEntry.Ledger == Ledger::current()
            join * from _generalJournalAccountEntry
                where _generalJournalAccountEntry.GeneralJournalEntry == _generalJournalEntry.RecId
                    && _generalJournalAccountEntry.PaymentReference == bankChequeToCancel.ChequeNum
                    && _generalJournalAccountEntry.PostingType == LedgerPostingType::LedgerJournal;

        if (_generalJournalAccountEntry.RecId == 0)
        {
            select firstonly recid from subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.Voucher == bankChequeToCancel.Voucher
                    && subledgerVoucherGeneralJournalEntry.AccountingDate == bankChequeToCancel.TransDate
                    && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == bankChequeToCancel.DataAreaId
                join RecId, AccountingDate  from _generalJournalEntry
                    where _generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry
                        && _generalJournalEntry.Ledger == Ledger::current()
                join * from _generalJournalAccountEntry
                    where _generalJournalAccountEntry.GeneralJournalEntry == _generalJournalEntry.RecId
                        && _generalJournalAccountEntry.PaymentReference == bankChequeToCancel.ChequeNum
                join RecId from ledgerEntry
                    where ledgerEntry.GeneralJournalAccountEntry == _generalJournalAccountEntry.RecId
                        && ledgerEntry.IsBridgingPosting == NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecipientTypeSpecificJournalValues</Name>
				<Source><![CDATA[
    protected LedgerJournalTrans setRecipientTypeSpecificJournalValues(LedgerJournalTrans _ledgerJournalTrans)
    {
        ExchangeRateHelper          exchangeRateHelper;
        GeneralJournalEntry         generalJournalEntry;
        GeneralJournalAccountEntry  generalJournalAccountEntry;

        this.retieveOriginalGeneralJournalToCancel(generalJournalEntry, generalJournalAccountEntry);

        exchangeRateHelper = ExchangeRateHelper::newExchangeDate(
            Ledger::primaryLedger(CompanyInfo::findDataArea(generalJournalAccountEntry.company()).RecId),
            bankChequeToCancel.CurrencyCode,
            bankChequeToCancel.TransDate);

        _ledgerJournalTrans.DocumentNum         = bankChequeToCancel.ChequeNum;
        _ledgerJournalTrans.DocumentDate        = bankChequeToCancel.TransDate;
        _ledgerJournalTrans.PaymReference       = bankAccountTransToCancel.PaymReference;
        _ledgerJournalTrans.PaymMode            = bankAccountTransToCancel.PaymentMode;
        _ledgerJournalTrans.ExchRate            = exchangeRateHelper.getExchangeRate1();
        _ledgerJournalTrans.ExchRateSecond      = exchangeRateHelper.getExchangeRate2();

        if (Ledger::reportingCurrency())
        {
            exchangeRateHelper.parmToCurrency(Ledger::reportingCurrency());
            exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());
            _ledgerJournalTrans.ReportingCurrencyExchRate = exchangeRateHelper.getExchangeRate1();
            _ledgerJournalTrans.ReportingCurrencyExchRateSecondary = exchangeRateHelper.getExchangeRate2();
        }

        _ledgerJournalTrans.Triangulation       = false;
        _ledgerJournalTrans.DefaultDimension    = 0;
        _ledgerJournalTrans.LedgerDimension     = generalJournalAccountEntry.LedgerDimension;
        _ledgerJournalTrans.AccountType         = LedgerJournalACType::Ledger;
        _ledgerJournalTrans.Company             = bankChequeToCancel.company();
        _ledgerJournalTrans.CurrencyCode        = bankChequeToCancel.CurrencyCode;
        _ledgerJournalTrans.TransactionType     = LedgerTransType::Payment;

        return _ledgerJournalTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>