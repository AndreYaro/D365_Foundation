<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationDateOfVATRegisterActivityOnLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationDateOfVATRegisterActivityOnLine</c> class is to derive date of VAT register and determine exchange rate if relevant.
/// </summary>
/// <remarks>Only journal with date of VAT register derivation for tax integration. Other transactions are without.</remarks>
public class TaxIntegrationDateOfVATRegisterActivityOnLine
    extends TaxIntegrationAbstractActivityOnLine
{
    public const str LoggerName = 'Tax Integration - Date of VAT register and relevant logics';
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxIntegrationDateOfVATRegisterActivityOnLine construct()
    {
        return new TaxIntegrationDateOfVATRegisterActivityOnLine(LoggerName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this activity should be skipped for document.
    /// </summary>
    /// <param name="_document">The <c>TaxIntegrationDoccumentObject</c> to determine the applicability.</param>
    /// <returns>true, if this activity should be skipped for document; otherwise, false.</returns>
    /// <remarks>In most cases, super() should be called in derived class</remarks>
    internal boolean shouldSkip(TaxIntegrationDocumentObject _document)
    {
        boolean shouldSkip = super(_document);
        if (!shouldSkip
            && !(TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled()
                && _document is TaxIntegrationJournalDocumentObject)) // Only run for journal when date of VAT register is enabled.
        {
            shouldSkip = true;
        }
        return shouldSkip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>actInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Conducts the activity on the line or charge.
    /// </summary>
    /// <param name = "_line">The line or charge.</param>
    protected void actInternal(TaxIntegrationLineObject _line)
    {
        if (!(_line is TaxIntegrationJournalLineObject))
        {
            return;
        }

        TaxIntegrationJournalLineObject journalLine = _line as TaxIntegrationJournalLineObject;
        LedgerJournalTrans ledgerJournalTrans;
        ledgerJournalTrans.data(journalLine.getTaxableLine().getJournalizedLine());

        VatDueDate_W vatDueDateOld = ledgerJournalTrans.VatDueDate_W;
        TaxGroup taxGroupOld = ledgerJournalTrans.TaxGroup;
        ledgerJournalTrans.TaxGroup = journalLine.getTaxGroup();
        ledgerJournalTrans.TaxItemGroup = journalLine.getTaxItemGroup();
        ledgerJournalTrans.TaxCode = journalLine.getTaxCode();

        if (!ledgerJournalTrans.VatDueDate_W || ledgerJournalTrans.TaxGroup != taxGroupOld)
        {
            LedgerJournalTrans_W_Extension::modifyVatDueDate_W(ledgerJournalTrans);
        }
        journalLine.setVATRegisterDate(ledgerJournalTrans.VatDueDate_W);

        if (PurchParameters::find().DateOfExchRate_W == DateOfExchRate_W::DateOfVATRegister
            && journalLine.isVendorInvoiceJournal()
            && ledgerJournalTrans.VatDueDate_W != vatDueDateOld)
        {
            UnknownNoYes triangulation;
            ExchRate exchRate;
            ExchRate exchRateSecond;
            ExchRateSecondTxt exchRateSecondTxt;
            [triangulation, exchRate, exchRateSecond, exchRateSecondTxt] = LedgerJournalEngine_Server::currencyModified(
                ledgerJournalTrans,
                journalLine.getAncestorDocument().getEUROTriangulation());
            journalLine.setAccountingCurrencyFixedExchangeRate(exchRate);

            ExchRate reportingExchRate;
            ExchRate reportingExchRateSecond;
            ExchRateSecondTxt reportingExchRateSecondTxt;
            [reportingExchRate, reportingExchRateSecond, reportingExchRateSecondTxt] = LedgerJournalEngine_Server::reportingCurrencyModified(ledgerJournalTrans);
            journalLine.setReportingCurrencyFixedExchangeRate(reportingExchRate);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>