<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalDimensionStructureSynchronizationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>LedgerJournalDimensionStructureSynchronizationProvider</c> is the dimension structure synchronization provider for ledger journal data.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.DimensionStructureISynchronizationTransactionProvider))]
[DimensionStructureSynchronizationProviderCaption("@GeneralLedger:LedgerJournalDimensionStructureSynchronizationProviderCaption")]
[DimensionStructureSynchronizationProviderInterfaceAttribute(true)]
[DimensionStructureSynchronizationProviderV2Flight(classStr(LedgerJournalDimensionStructureSynchronizationV2Flight))]
public class LedgerJournalDimensionStructureSynchronizationProvider implements DimensionStructureISynchronizationTransactionProvider, DimensionStructureISynchronizationTransactionProviderV2
{
    private const str InstrumentationNamespace = classStr(LedgerJournalDimensionStructureSynchronizationProvider);
    private SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(InstrumentationNamespace);
    private const int MaxRetryCount = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfStuctureRemovalFromLedgerIsPrevented</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the account structure is prevented from being removed from the ledger.
    /// </summary>
    /// <param name="_dimensionHierarchy">
    /// The account structure being removed.
    /// </param>
    /// <param name="_ledger">
    /// The <c>Ledger</c> record from which the structure is being removed.
    /// </param>
    /// <param name = "_ret">
    /// The event handler result.
    /// </param>
    /// <returns>
    /// true if the account structure cannot be removed; otherwise, false.
    /// </returns>
    [SubscribesTo(classStr(LedgerStructureDelegates), delegateStr(LedgerStructureDelegates, checkIfStuctureRemovalFromLedgerIsPrevented))]
    public static void checkIfStuctureRemovalFromLedgerIsPrevented(DimensionHierarchy _dimensionHierarchy, Ledger _ledger, EventHandlerResult _ret)
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(classStr(LedgerJournalDimensionStructureSynchronizationProvider),
            staticMethodStr(LedgerJournalDimensionStructureSynchronizationProvider, checkIfStuctureRemovalFromLedgerIsPrevented));
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(LedgerJournalDimensionStructureSynchronizationProvider));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            activityContext.addCustomProperty('MethodName', 'checkIfStuctureRemovalFromLedgerIsPrevented');

            LedgerJournalTrans ledgerJournalTrans;
            LedgerJournalTable ledgerJournalTable;
            CustVendPaymJournalFee custVendPaymJournalFee;
            DimensionAttributeValueCombination dimAttrValueCombination;
            DimensionAttributeValueGroupCombination dimAttrValueGroupCombination;
            DimensionAttributeValueGroup dimAttrValueGroup;
            boolean prevent = false;

            unchecked(Uncheck::XDS)
            {
                CompanyInfo companyInfo = CompanyInfo::find(_ledger.PrimaryForLegalEntity);

                changecompany(companyInfo.DataArea)
                {
                    // LedgerDimension
                    select firstonly RecId from ledgerJournalTrans
                    where ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger
                        && ledgerJournalTrans.Cancel == NoYes::No
                        && ledgerJournalTrans.Company == companyInfo.DataArea
                    exists join dimAttrValueCombination
                        where dimAttrValueCombination.RecId == ledgerJournalTrans.LedgerDimension
                            && (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                            || dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                    exists join dimAttrValueGroupCombination
                        where dimAttrValueGroupCombination.DimensionAttributeValueCombination == dimAttrValueCombination.RecId
                    exists join dimAttrValueGroup
                        where dimAttrValueGroup.RecId == dimAttrValueGroupCombination.DimensionAttributeValueGroup
                            && dimAttrValueGroup.DimensionHierarchy == _dimensionHierarchy.RecId
                    exists join ledgerJournalTable
                        where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                            && ledgerJournalTable.Posted == NoYes::No
                            && ledgerJournalTable.JournalType != LedgerJournalType::Elimination
                            && ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal
                            && ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel;

                    if (ledgerJournalTrans.RecId)
                    {
                        prevent = true;
                    }

                    // OffsetLedgerDimension
                    if (!prevent)
                    {
                        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
                        {
                            // OffsetCompany can be blank which then means curext()
                            select firstonly RecId from ledgerJournalTrans
                            where ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger
                                && ledgerJournalTrans.Cancel == NoYes::No
                                && (ledgerJournalTrans.OffsetCompany == companyInfo.DataArea || ledgerJournalTrans.OffsetCompany == '')
                            exists join dimAttrValueCombination
                                where dimAttrValueCombination.RecId == ledgerJournalTrans.OffsetLedgerDimension
                                    && (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                                    || dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                            exists join dimAttrValueGroupCombination
                                where dimAttrValueGroupCombination.DimensionAttributeValueCombination == dimAttrValueCombination.RecId
                            exists join dimAttrValueGroup
                                where dimAttrValueGroup.RecId == dimAttrValueGroupCombination.DimensionAttributeValueGroup
                                    && dimAttrValueGroup.DimensionHierarchy == _dimensionHierarchy.RecId
                            exists join ledgerJournalTable
                                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                                    && ledgerJournalTable.Posted == NoYes::No
                                    && ledgerJournalTable.JournalType != LedgerJournalType::Elimination
                                    && ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal
                                    && ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel;
                        }
                        else
                        {
                            // OffsetCompany is not defined; implicitly defined via curext()
                            select firstonly RecId from ledgerJournalTrans
                            where ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger
                                && ledgerJournalTrans.Cancel == NoYes::No
                            exists join dimAttrValueCombination
                                where dimAttrValueCombination.RecId == ledgerJournalTrans.OffsetLedgerDimension
                                    && (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                                    || dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                            exists join dimAttrValueGroupCombination
                                where dimAttrValueGroupCombination.DimensionAttributeValueCombination == dimAttrValueCombination.RecId
                            exists join dimAttrValueGroup
                                where dimAttrValueGroup.RecId == dimAttrValueGroupCombination.DimensionAttributeValueGroup
                                    && dimAttrValueGroup.DimensionHierarchy == _dimensionHierarchy.RecId
                            exists join ledgerJournalTable
                                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                                    && ledgerJournalTable.Posted == NoYes::No
                                    && ledgerJournalTable.JournalType != LedgerJournalType::Elimination
                                    && ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal
                                    && ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel;
                        }

                        if (ledgerJournalTrans.RecId)
                        {
                            prevent = true;
                        }
                    }

                    if (prevent)
                    {
                        // The account structure is referenced by a ledger journal
                        checkFailed(strfmt("@GeneralLedger:LedgerJournalLedgerDimensionWithStructureInUseForLedger", _dimensionHierarchy.Name, _ledger.Name));
                        _ret.booleanResult(true);
                    }
                    else
                    {
                        // Journal fees
                        select firstonly RecId from custVendPaymJournalFee
                        where custVendPaymJournalFee.LedgerJournalACType == LedgerJournalACType::Ledger
                        exists join dimAttrValueCombination
                            where dimAttrValueCombination.RecId == custVendPaymJournalFee.LedgerDimension
                                && (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                                && dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                        exists join ledgerJournalTrans
                            where ledgerJournalTrans.RecId == custVendPaymJournalFee.RefRecId
                                && ledgerJournalTrans.Cancel == NoYes::No
                        exists join ledgerJournalTable
                            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                                && ledgerJournalTable.Posted == NoYes::No
                                && ledgerJournalTable.JournalType != LedgerJournalType::Elimination
                                && ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal
                                && ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel;

                        if (custVendPaymJournalFee.RecId)
                        {
                            // The account structure is referenced by a ledger journal
                            checkFailed(strfmt("@CashManagement:CustVendPaymJournalFeeLedgerDimensionWithStructureInUseForLedger", _dimensionHierarchy.Name, _ledger.Name));
                            _ret.booleanResult(true);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionSynchronize</Name>
				<Source><![CDATA[
    public void insertDimensionSynchronize(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

        if (synchronizationRequest)
        {
            DimensionSynchronize                dimSynchronize;
            DimensionSynchronize                dimSynchronizeNotExists;
            DimensionSynchronizeLedger          dimSynchronizeLedger;

            dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeNotExists.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeLedger.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronizeLedger());

            LedgerJournalTrans                  ledgerJournalTrans;
            LedgerJournalTable                  ledgerJournalTable;
            CustVendPaymJournalFee              custVendPaymJournalFee;
            DimensionAttributeValueCombination  dimAttrValueCombination;
            DataArea                            company;
            DataAreaId                          companyId;
            boolean                             includeCompany;

            SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(LedgerJournalDimensionStructureSynchronizationProvider, insertDimensionSynchronize));

            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                unchecked(Uncheck::XDS)
                {

                    // Extract LedgerDimension's from unposted journal lines and journal fees
                    while select Id from company where company.IsVirtual == NoYes::No
                    {
                        // Init includeCompany
                        companyId = company.Id;
                        select firstonly RecId from dimSynchronizeLedger where dimSynchronizeLedger.DataArea == companyId;
                        includeCompany = (dimSynchronizeLedger.RecId != 0);

                        changecompany(companyId)
                        {
                            // Company tables must be cleared to work properly when changecompany is invoked multiple times.
                            ledgerJournalTrans.clear();
                            ledgerJournalTable.clear();

                            // LedgerDimension
                            insert_recordset dimSynchronize (OriginalLedgerDimension, DataArea, LedgerDimensionType)
                                select LedgerDimension, Company from ledgerJournalTrans
                                        group by ledgerJournalTrans.LedgerDimension, ledgerJournalTrans.Company, dimAttrValueCombination.LedgerDimensionType
                                        where ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger &&
                                            ledgerJournalTrans.Cancel == NoYes::No
                                    join LedgerDimensionType from dimAttrValueCombination
                                        where dimAttrValueCombination.RecId == ledgerJournalTrans.LedgerDimension &&
                                            (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                            dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                    exists join dimSynchronizeLedger
                                        where dimSynchronizeLedger.DataArea == ledgerJournalTrans.Company
                                    exists join ledgerJournalTable
                                        where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                            ledgerJournalTable.Posted == NoYes::No &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                    notexists join dimSynchronizeNotExists
                                        where dimSynchronizeNotExists.OriginalLedgerDimension == ledgerJournalTrans.LedgerDimension;

                            activityContext.addCustomProperty('MethodName', 'insertDimensionSynchronize');
                            activityContext.addCustomProperty('WereRecordsInserted_LedgerDimension', int2str(dimSynchronize.rowCount() > 0));

                            // OffsetLedgerDimension
                            if (isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
                            {
                                // OffsetCompany can be blank which then means curext()
                                insert_recordset dimSynchronize (OriginalLedgerDimension, DataArea, LedgerDimensionType)
                                    select OffsetLedgerDimension, OffsetCompany from ledgerJournalTrans
                                            group by ledgerJournalTrans.OffsetLedgerDimension, ledgerJournalTrans.OffsetCompany, dimAttrValueCombination.LedgerDimensionType
                                            where ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger &&
                                                ledgerJournalTrans.Cancel == NoYes::No
                                        join LedgerDimensionType from dimAttrValueCombination
                                            where dimAttrValueCombination.RecId == ledgerJournalTrans.OffsetLedgerDimension &&
                                                (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                                dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                        exists join dimSynchronizeLedger
                                            where dimSynchronizeLedger.DataArea == ledgerJournalTrans.OffsetCompany
                                        exists join ledgerJournalTable
                                            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                                ledgerJournalTable.Posted == NoYes::No &&
                                                ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                                ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                                ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                        notexists join dimSynchronizeNotExists
                                            where dimSynchronizeNotExists.OriginalLedgerDimension == ledgerJournalTrans.OffsetLedgerDimension;

                                activityContext.addCustomProperty('WereRecordsInserted_OffsetLedgerDimension', int2str(dimSynchronize.rowCount() > 0));

                                // Process when OffsetCompany is blank
                                if (includeCompany)
                                {
                                    insert_recordset dimSynchronize (OriginalLedgerDimension, DataArea, LedgerDimensionType)
                                        select OffsetLedgerDimension, companyId from ledgerJournalTrans
                                                group by ledgerJournalTrans.OffsetLedgerDimension, dimAttrValueCombination.LedgerDimensionType
                                                where ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger &&
                                                    ledgerJournalTrans.Cancel == NoYes::No &&
                                                    ledgerJournalTrans.OffsetCompany == ''
                                            join LedgerDimensionType from dimAttrValueCombination
                                                where dimAttrValueCombination.RecId == ledgerJournalTrans.OffsetLedgerDimension &&
                                                    (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                                    dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                            exists join ledgerJournalTable
                                                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                                    ledgerJournalTable.Posted == NoYes::No &&
                                                    ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                                    ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                                    ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                            notexists join dimSynchronizeNotExists
                                                where dimSynchronizeNotExists.OriginalLedgerDimension == ledgerJournalTrans.OffsetLedgerDimension;

                                    activityContext.addCustomProperty('WereRecordsInserted_OffsetLedgerDimensionBlankCompany', int2str(dimSynchronize.rowCount() > 0));
                                }
                            }
                            else
                            {
                                if (includeCompany)
                                {
                                    // OffsetCompany is not defined; implicitly defined via curext()
                                    insert_recordset dimSynchronize (OriginalLedgerDimension, DataArea, LedgerDimensionType)
                                        select OffsetLedgerDimension, companyId from ledgerJournalTrans
                                                group by ledgerJournalTrans.OffsetLedgerDimension, dimAttrValueCombination.LedgerDimensionType
                                                where ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger &&
                                                    ledgerJournalTrans.Cancel == NoYes::No
                                            join LedgerDimensionType from dimAttrValueCombination
                                                where dimAttrValueCombination.RecId == ledgerJournalTrans.OffsetLedgerDimension &&
                                                    (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                                    dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                            exists join ledgerJournalTable
                                                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                                    ledgerJournalTable.Posted == NoYes::No &&
                                                    ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                                    ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                                    ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                            notexists join dimSynchronizeNotExists
                                                where dimSynchronizeNotExists.OriginalLedgerDimension == ledgerJournalTrans.OffsetLedgerDimension;

                                    activityContext.addCustomProperty('WereRecordsInserted_OffsetLedgerDimension_DefaultCompany', int2str(dimSynchronize.rowCount() > 0));
                                }
                            }
                        }

                        // Journal fees
                        if (includeCompany)
                        {
                            changecompany(companyId)
                            {
                                // Company tables must be cleared to work properly when changecompany is invoked multiple times.
                                custVendPaymJournalFee.clear();
                                ledgerJournalTable.clear();
                                ledgerJournalTrans.clear();

                                insert_recordset dimSynchronize (OriginalLedgerDimension, DataArea, LedgerDimensionType)
                                    select LedgerDimension, DataAreaId from custVendPaymJournalFee
                                        group by custVendPaymJournalFee.LedgerDimension, custVendPaymJournalFee.DataAreaId, dimAttrValueCombination.LedgerDimensionType
                                            where custVendPaymJournalFee.LedgerJournalACType == LedgerJournalACType::Ledger
                                        join LedgerDimensionType from dimAttrValueCombination
                                            where dimAttrValueCombination.RecId == custVendPaymJournalFee.LedgerDimension &&
                                                (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                                dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                        exists join ledgerJournalTrans
                                            where ledgerJournalTrans.RecId == custVendPaymJournalFee.RefRecId &&
                                                ledgerJournalTrans.Cancel == NoYes::No
                                        exists join ledgerJournalTable
                                            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                                ledgerJournalTable.Posted == NoYes::No &&
                                                ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                                ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                                ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                        notexists join dimSynchronizeNotExists
                                            where dimSynchronizeNotExists.OriginalLedgerDimension == custVendPaymJournalFee.LedgerDimension;

                                activityContext.addCustomProperty('WereRecordsInserted_LedgerDimension_JournalFees', int2str(dimSynchronize.rowCount() > 0));
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChanges</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChanges(DimensionSynchronize _dimensionSynchronize)
    {
        return DimensionStructureChangeSynchronize::synchronizeStructureChanges(_dimensionSynchronize.OriginalLedgerDimension, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferences</Name>
				<Source><![CDATA[
    public void updateProviderReferences(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

        if (synchronizationRequest)
        {
            DimensionSynchronize        dimSynchronize;
            DimensionSynchronizeLedger  dimSynchronizeLedger;

            dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeLedger.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronizeLedger());

            LedgerJournalTransRefRecId  lastUpdatedLedgerJournalTransRecId;
            LedgerJournalTrans          ledgerJournalTrans;
            LedgerJournalTable          ledgerJournalTable;
            RefRecId                    lastUpdatedCustVendPaymJournalFeeRecId;
            CustVendPaymJournalFee      custVendPaymJournalFee;
            DataArea                    company;
            DataAreaId                  companyId;
            boolean                     includeCompany;
            SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(LedgerJournalDimensionStructureSynchronizationProvider, updateProviderReferences));

            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                unchecked(Uncheck::XDS)
                {
                    int rowsRead, rowsUpdated;

                    // Update unposted journal lines and journal fees (update methods exists so don't use update_recordset)

                    while select Id from company where company.IsVirtual == NoYes::No
                    {
                        // Init includeCompany
                        companyId = company.Id;
                        select firstonly RecId from dimSynchronizeLedger where dimSynchronizeLedger.DataArea == companyId;
                        includeCompany = (dimSynchronizeLedger.RecId != 0);

                        changecompany(companyId)
                        {
                            ledgerJournalTable.clear();
                            ledgerJournalTrans.clear();

                            // LedgerDimension
                            lastUpdatedLedgerJournalTransRecId = 0;

                            while select forupdate ledgerJournalTrans
                                order by ledgerJournalTrans.RecId
                                where ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger &&
                                    ledgerJournalTrans.Cancel == NoYes::No
                                join dimSynchronizeLedger
                                    where dimSynchronizeLedger.DataArea == ledgerJournalTrans.Company
                                join RecId from ledgerJournalTable
                                    where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                        ledgerJournalTable.Posted == NoYes::No &&
                                        ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                        ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                        ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                join UpdatedLedgerDimension from dimSynchronize
                                    where dimSynchronize.OriginalLedgerDimension == ledgerJournalTrans.LedgerDimension &&
                                            dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension
                            {
                                if (lastUpdatedLedgerJournalTransRecId != ledgerJournalTrans.RecId)
                                {
                                    // The DimensionSynchronize may have multiple records for the OriginalLedgerDimension
                                    // only update the record if it has not been processed.
                                    ledgerJournalTrans.LedgerDimension = dimSynchronize.UpdatedLedgerDimension;
                                    ledgerJournalTrans.doUpdate();

                                    lastUpdatedLedgerJournalTransRecId = ledgerJournalTrans.RecId;
                                    rowsUpdated++;
                                }
                                rowsRead++;
                            }

                            Info(strFmt("@Dimension:StructureSynchronizationProviderLogPerCompany", rowsUpdated, tableId2PName(ledgerJournalTrans.TableId), companyId));

                            activityContext.addCustomProperty('MethodName', 'synchronizeStructureChanges');
                            activityContext.addCustomProperty('WereLedgerDimensionRowsRead', int2str(rowsRead > 0));
                            activityContext.addCustomProperty('WereLedgerDimensionRecordsUpdated', int2str(rowsUpdated > 0));

                            // OffsetLedgerDimension
                            if (isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
                            {
                                rowsRead = 0;
                                rowsUpdated = 0;
                                lastUpdatedLedgerJournalTransRecId = 0;

                                while select forupdate ledgerJournalTrans
                                    order by ledgerJournalTrans.RecId
                                    where ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger &&
                                        ledgerJournalTrans.Cancel == NoYes::No
                                    join dimSynchronizeLedger
                                        where dimSynchronizeLedger.DataArea == ledgerJournalTrans.Company
                                    join RecId from ledgerJournalTable
                                        where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                            ledgerJournalTable.Posted == NoYes::No &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                    join UpdatedLedgerDimension from dimSynchronize
                                        where dimSynchronize.OriginalLedgerDimension == ledgerJournalTrans.OffsetLedgerDimension &&
                                                dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension
                                {
                                    if (lastUpdatedLedgerJournalTransRecId != ledgerJournalTrans.RecId)
                                    {
                                        // The DimensionSynchronize may have multiple records for the OriginalLedgerDimension
                                        // only update the record if it has not been processed.
                                        ledgerJournalTrans.OffsetLedgerDimension = dimSynchronize.UpdatedLedgerDimension;
                                        ledgerJournalTrans.doUpdate();

                                        lastUpdatedLedgerJournalTransRecId = ledgerJournalTrans.RecId;
                                        rowsUpdated++;
                                    }
                                    rowsRead++;
                                }

                                activityContext.addCustomProperty('WereOffsetLedgerDimensionRecordsRead', int2str(rowsRead > 0));
                                activityContext.addCustomProperty('WereOffsetLedgerDimensionRecordsUpdated', int2str(rowsUpdated > 0));

                                // Process when OffsetCompany is blank
                                if (includeCompany)
                                {
                                    lastUpdatedLedgerJournalTransRecId = 0;
                                    rowsRead = 0;
                                    rowsUpdated = 0;

                                    while select forupdate ledgerJournalTrans
                                        order by ledgerJournalTrans.RecId
                                        where ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger &&
                                            ledgerJournalTrans.Cancel == NoYes::No &&
                                            ledgerJournalTrans.OffsetCompany == ''
                                        join RecId from ledgerJournalTable
                                            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                                ledgerJournalTable.Posted == NoYes::No &&
                                                ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                                ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                                ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                        join UpdatedLedgerDimension from dimSynchronize
                                            where dimSynchronize.OriginalLedgerDimension == ledgerJournalTrans.OffsetLedgerDimension &&
                                                    dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension
                                    {
                                        if (lastUpdatedLedgerJournalTransRecId != ledgerJournalTrans.RecId)
                                        {
                                            // The DimensionSynchronize may have multiple records for the OriginalLedgerDimension
                                            // only update the record if it has not been processed.
                                            ledgerJournalTrans.OffsetLedgerDimension = dimSynchronize.UpdatedLedgerDimension;
                                            ledgerJournalTrans.doUpdate();

                                            lastUpdatedLedgerJournalTransRecId = ledgerJournalTrans.RecId;
                                            rowsUpdated++;
                                        }
                                        rowsRead++;
                                    }

                                    activityContext.addCustomProperty('WereOffsetCompanyBlankRecordsRead', int2str(rowsRead > 0));
                                    activityContext.addCustomProperty('WereOffsetCompanyBlankRecordsUpdated', int2str(rowsUpdated > 0));
                                }
                            }
                            else
                            {
                                // OffsetCompany is not defined; implicitly defined via curext()
                                if (includeCompany)
                                {
                                    lastUpdatedLedgerJournalTransRecId = 0;
                                    rowsRead = 0;
                                    rowsUpdated = 0;

                                    while select forupdate ledgerJournalTrans
                                        order by ledgerJournalTrans.RecId
                                        where ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger &&
                                            ledgerJournalTrans.Cancel == NoYes::No
                                        join RecId from ledgerJournalTable
                                            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                                ledgerJournalTable.Posted == NoYes::No &&
                                                ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                                ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                                ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                        join UpdatedLedgerDimension from dimSynchronize
                                            where dimSynchronize.OriginalLedgerDimension == ledgerJournalTrans.OffsetLedgerDimension &&
                                                    dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension
                                    {
                                        if (lastUpdatedLedgerJournalTransRecId != ledgerJournalTrans.RecId)
                                        {
                                            // The DimensionSynchronize may have multiple records for the OriginalLedgerDimension
                                            // only update the record if it has not been processed.
                                            ledgerJournalTrans.OffsetLedgerDimension = dimSynchronize.UpdatedLedgerDimension;
                                            ledgerJournalTrans.doUpdate();

                                            lastUpdatedLedgerJournalTransRecId = ledgerJournalTrans.RecId;
                                            rowsUpdated++;
                                        }
                                        rowsRead++;
                                    }

                                    activityContext.addCustomProperty('WereOffsetCompanyUndefinedRecordsRead', int2str(rowsRead > 0));
                                    activityContext.addCustomProperty('WereOffsetCompanyUndefinedRecordsUpdated', int2str(rowsUpdated > 0));
                                }
                            }
                        }

                        // Journal fees
                        if (includeCompany)
                        {
                            changecompany(companyId)
                            {
                                custVendPaymJournalFee.clear();
                                ledgerJournalTable.clear();
                                ledgerJournalTrans.clear();

                                lastUpdatedCustVendPaymJournalFeeRecId = 0;
                                rowsRead = 0;
                                rowsUpdated = 0;

                                while select forupdate custVendPaymJournalFee
                                    order by custVendPaymJournalFee.RecId
                                    where custVendPaymJournalFee.LedgerJournalACType == LedgerJournalACType::Ledger
                                    join RecId from ledgerJournalTrans
                                        where ledgerJournalTrans.RecId == custVendPaymJournalFee.RefRecId &&
                                            ledgerJournalTrans.Cancel == NoYes::No
                                    join RecId from ledgerJournalTable
                                        where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                            ledgerJournalTable.Posted == NoYes::No &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                    join UpdatedLedgerDimension from dimSynchronize
                                        where dimSynchronize.OriginalLedgerDimension == custVendPaymJournalFee.LedgerDimension &&
                                                dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension
                                {
                                    if (lastUpdatedCustVendPaymJournalFeeRecId != custVendPaymJournalFee.RecId)
                                    {
                                        // The DimensionSynchronize may have multiple records for the OriginalLedgerDimension
                                        // only update the record if it has not been processed.
                                        custVendPaymJournalFee.LedgerDimension = dimSynchronize.UpdatedLedgerDimension;
                                        custVendPaymJournalFee.doUpdate();

                                        lastUpdatedCustVendPaymJournalFeeRecId = custVendPaymJournalFee.RecId;
                                        rowsUpdated++;
                                    }
                                    rowsRead++;
                                }

                                activityContext.addCustomProperty('WereRecordsRead', int2str(rowsRead > 0));
                                activityContext.addCustomProperty('WereRecordsUpdated', int2str(rowsUpdated > 0));
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferencesV2</Name>
				<Source><![CDATA[
    public void updateProviderReferencesV2(DimensionStructureSynchronizationRequestV2 _request)
    {
        DimensionSynchronizeDetail dimSynchronize;
        DimensionSynchronizeLedgerDetail dimSynchronizeLedger;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        CustVendPaymJournalFee custVendPaymJournalFee;
        DataArea company;
        DataAreaId companyId;
        boolean includeCompany;
        RecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(LedgerJournalDimensionStructureSynchronizationProvider, updateProviderReferences));

        try
        {
            ttsbegin;

            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                unchecked(Uncheck::XDS)
                {
                    ledgerJournalTrans.skipDataMethods(true);
                    ledgerJournalTrans.skipEvents(true);

                    while select Id from company where company.IsVirtual == NoYes::No
                    {
                        // Init includeCompany
                        companyId = company.Id;
                        select firstonly RecId from dimSynchronizeLedger where dimSynchronizeLedger.DataArea == companyId && dimSynchronizeLedger.BatchJobId == batchJobId;
                        includeCompany = (dimSynchronizeLedger.RecId != 0);

                        changecompany(companyId)
                        {
                            ledgerJournalTable.clear();
                            ledgerJournalTrans.clear();

                            update_recordset ledgerJournalTrans 
                                setting LedgerDimension = dimSynchronize.UpdatedLedgerDimension
                                    where ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger &&
                                        ledgerJournalTrans.Cancel == NoYes::No
                            join dimSynchronizeLedger
                                where dimSynchronizeLedger.DataArea == ledgerJournalTrans.Company &&
                                    dimSynchronizeLedger.BatchJobId == batchJobId
                            join RecId from ledgerJournalTable
                                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                    ledgerJournalTable.Posted == NoYes::No &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                            join UpdatedLedgerDimension from dimSynchronize
                                where dimSynchronize.OriginalLedgerDimension == ledgerJournalTrans.LedgerDimension &&
                                    dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                                    dimSynchronize.ProviderStatusTrackingId == _request.parmProviderStatusTrackingId();

                            info(strFmt("@Dimension:StructureSynchronizationProviderLogPerCompany", int2str(ledgerJournalTrans.rowCount()), tableId2PName(ledgerJournalTrans.TableId), companyId));
                            activityContext.addCustomProperty('MethodName', 'updateProviderReferencesV2');
                            activityContext.addCustomProperty('WereRecordsUpdated_InLedgerJournalTrans_LedgerDimension', int2str(ledgerJournalTrans.rowCount() > 0));

                            // OffsetLedgerDimension
                            if (isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
                            {
                                update_recordset ledgerJournalTrans setting OffsetLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                                    where ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger &&
                                            ledgerJournalTrans.Cancel == NoYes::No
                                join dimSynchronizeLedger
                                    where dimSynchronizeLedger.DataArea == ledgerJournalTrans.Company &&
                                        dimSynchronizeLedger.BatchJobId == batchJobId
                                join RecId from ledgerJournalTable
                                    where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                        ledgerJournalTable.Posted == NoYes::No &&
                                        ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                        ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                        ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                join UpdatedLedgerDimension from dimSynchronize
                                    where dimSynchronize.OriginalLedgerDimension == ledgerJournalTrans.OffsetLedgerDimension &&
                                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                                        dimSynchronize.ProviderStatusTrackingId == _request.parmProviderStatusTrackingId();

                                activityContext.addCustomProperty('WereRecordsUpdated_InLedgerJournalTrans_OffsetLedgerAdvInterCoOffset', int2str(ledgerJournalTrans.rowCount() > 0));

                                // Process when OffsetCompany is blank
                                if (includeCompany)
                                {
                                    update_recordset ledgerJournalTrans setting OffsetLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                                        where ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger &&
                                                ledgerJournalTrans.Cancel == NoYes::No &&
                                                ledgerJournalTrans.OffsetCompany == ''
                                    join RecId from ledgerJournalTable
                                        where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                            ledgerJournalTable.Posted == NoYes::No &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                    join UpdatedLedgerDimension from dimSynchronize
                                        where dimSynchronize.OriginalLedgerDimension == ledgerJournalTrans.OffsetLedgerDimension &&
                                            dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                                            dimSynchronize.ProviderStatusTrackingId == _request.parmProviderStatusTrackingId();

                                    activityContext.addCustomProperty('WereRecordsUpdated_InLedgerJournalTrans_BlankOffsetCompany', int2str(ledgerJournalTrans.rowCount() > 0));
                                }
                            }
                            else
                            {
                                // OffsetCompany is not defined; implicitly defined via curext()
                                if (includeCompany)
                                {
                                    update_recordset ledgerJournalTrans setting OffsetLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                                        where ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger &&
                                                ledgerJournalTrans.Cancel == NoYes::No
                                    join RecId from ledgerJournalTable
                                        where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                            ledgerJournalTable.Posted == NoYes::No &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                    join UpdatedLedgerDimension from dimSynchronize
                                        where dimSynchronize.OriginalLedgerDimension == ledgerJournalTrans.OffsetLedgerDimension &&
                                            dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                                            dimSynchronize.ProviderStatusTrackingId == _request.parmProviderStatusTrackingId();

                                    activityContext.addCustomProperty('WereRecordsUpdated_InLedgerJournalTransOffset', int2str(ledgerJournalTrans.rowCount() > 0));
                                }
                            }
                        }

                        // Journal fees
                        if (includeCompany)
                        {
                            custVendPaymJournalFee.skipDataMethods(true);
                            custVendPaymJournalFee.skipEvents(true);

                            changecompany(companyId)
                            {
                                custVendPaymJournalFee.clear();
                                ledgerJournalTable.clear();
                                ledgerJournalTrans.clear();

                                update_recordset custVendPaymJournalFee setting LedgerDimension = dimSynchronize.UpdatedLedgerDimension
                                    where custVendPaymJournalFee.LedgerJournalACType == LedgerJournalACType::Ledger
                                join RecId from ledgerJournalTrans
                                    where ledgerJournalTrans.RecId == custVendPaymJournalFee.RefRecId &&
                                        ledgerJournalTrans.Cancel == NoYes::No
                                join RecId from ledgerJournalTable
                                    where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                        ledgerJournalTable.Posted == NoYes::No &&
                                        ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                        ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                        ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                join UpdatedLedgerDimension from dimSynchronize
                                    where dimSynchronize.OriginalLedgerDimension == custVendPaymJournalFee.LedgerDimension &&
                                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                                        dimSynchronize.ProviderStatusTrackingId == _request.parmProviderStatusTrackingId();
                                
                                activityContext.addCustomProperty('WereRecordsUpdated_InCustVendPaymJOuranlFee', int2str(custVendPaymJournalFee.rowCount() > 0));   
                            }
                        }
                    }
                }
            }
            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() > MaxRetryCount)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionSynchronizeV2</Name>
				<Source><![CDATA[
    public RefRecId insertDimensionSynchronizeV2(DimensionStructureSynchronizationRequestV2 _synchronizationRequest)
    {
        DimensionSynchronizeDetail dimSynchronize;
        DimensionSynchronizeDetail dimSynchronizeNotExists;
        DimensionSynchronizeLedgerDetail dimSynchronizeLedger;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        CustVendPaymJournalFee custVendPaymJournalFee;
        DimensionAttributeValueCombination dimAttrValueCombination;
        DataArea company;
        DataAreaId companyId;
        boolean includeCompany;
        RefRecId correlationId;
        DimensionStructureSyncProviderStatusTracking dimensionStructureSyncProviderStatusTracking;

        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(LedgerJournalDimensionStructureSynchronizationProvider, insertDimensionSynchronizeV2));
        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            RecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();
            unchecked(Uncheck::XDS)
            {
                select forupdate firstonly dimensionStructureSyncProviderStatusTracking
                    where dimensionStructureSyncProviderStatusTracking.BatchJobId == batchJobId &&
                        dimensionStructureSyncProviderStatusTracking.ProviderName == _synchronizationRequest.parmProviderName();

                if (!dimensionStructureSyncProviderStatusTracking)
                {
                    dimensionStructureSyncProviderStatusTracking.BatchJobId = batchJobId;
                    dimensionStructureSyncProviderStatusTracking.ProviderName = _synchronizationRequest.parmProviderName();
                    dimensionStructureSyncProviderStatusTracking.insert();
                    correlationId = dimensionStructureSyncProviderStatusTracking.RecId;

                    ttsbegin;

                    // Extract LedgerDimension's from unposted journal lines and journal fees
                    while select Id from company where company.IsVirtual == NoYes::No
                    {
                        // Init includeCompany
                        companyId = company.Id;
                        select firstonly RecId from dimSynchronizeLedger where dimSynchronizeLedger.DataArea == companyId;
                        includeCompany = (dimSynchronizeLedger.RecId != 0);

                        changecompany(companyId)
                        {
                            // Company tables must be cleared to work properly when changecompany is invoked multiple times.
                            ledgerJournalTrans.clear();
                            ledgerJournalTable.clear();

                            // LedgerDimension
                            insert_recordset dimSynchronize (ProviderStatusTrackingId, OriginalLedgerDimension, DataArea, LedgerDimensionType)
                            select correlationId, LedgerDimension, Company from ledgerJournalTrans
                                group by ledgerJournalTrans.LedgerDimension, ledgerJournalTrans.Company, dimAttrValueCombination.LedgerDimensionType
                                where ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger &&
                                    ledgerJournalTrans.Cancel == NoYes::No
                            join LedgerDimensionType from dimAttrValueCombination
                                where dimAttrValueCombination.RecId == ledgerJournalTrans.LedgerDimension &&
                                    (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                    dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                            exists join dimSynchronizeLedger
                                where dimSynchronizeLedger.DataArea == ledgerJournalTrans.Company
                            exists join ledgerJournalTable
                                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                    ledgerJournalTable.Posted == NoYes::No &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                    ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                            notexists join dimSynchronizeNotExists
                                where dimSynchronizeNotExists.OriginalLedgerDimension == ledgerJournalTrans.LedgerDimension &&
                                    dimSynchronizeNotExists.ProviderStatusTrackingId == correlationId;

                            activityContext.addCustomProperty('MethodName', 'insertDimensionSynchronize');
                            activityContext.addCustomProperty('WereRecordsInserted_LedgerDimension', int2str(dimSynchronize.rowCount() > 0));

                            // OffsetLedgerDimension
                            if (isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
                            {
                                // OffsetCompany can be blank which then means curext()
                                insert_recordset dimSynchronize (ProviderStatusTrackingId, OriginalLedgerDimension, DataArea, LedgerDimensionType)
                                select correlationId, OffsetLedgerDimension, OffsetCompany from ledgerJournalTrans
                                    group by ledgerJournalTrans.OffsetLedgerDimension, ledgerJournalTrans.OffsetCompany, dimAttrValueCombination.LedgerDimensionType
                                    where ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger &&
                                        ledgerJournalTrans.Cancel == NoYes::No
                                join LedgerDimensionType from dimAttrValueCombination
                                    where dimAttrValueCombination.RecId == ledgerJournalTrans.OffsetLedgerDimension &&
                                        (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                        dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                exists join dimSynchronizeLedger
                                    where dimSynchronizeLedger.DataArea == ledgerJournalTrans.OffsetCompany
                                exists join ledgerJournalTable
                                    where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                        ledgerJournalTable.Posted == NoYes::No &&
                                        ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                        ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                        ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                notexists join dimSynchronizeNotExists
                                    where dimSynchronizeNotExists.OriginalLedgerDimension == ledgerJournalTrans.OffsetLedgerDimension &&
                                        dimSynchronizeNotExists.ProviderStatusTrackingId == correlationId;

                                activityContext.addCustomProperty('WereRecordsInserted_OffsetLedgerDimension', int2str(dimSynchronize.rowCount() > 0));

                                // Process when OffsetCompany is blank
                                if (includeCompany)
                                {
                                    insert_recordset dimSynchronize (ProviderStatusTrackingId, OriginalLedgerDimension, DataArea, LedgerDimensionType)
                                    select correlationId, OffsetLedgerDimension, companyId from ledgerJournalTrans
                                        group by ledgerJournalTrans.OffsetLedgerDimension, dimAttrValueCombination.LedgerDimensionType
                                        where ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger &&
                                            ledgerJournalTrans.Cancel == NoYes::No &&
                                            ledgerJournalTrans.OffsetCompany == ''
                                    join LedgerDimensionType from dimAttrValueCombination
                                        where dimAttrValueCombination.RecId == ledgerJournalTrans.OffsetLedgerDimension &&
                                            (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                            dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                    exists join ledgerJournalTable
                                        where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                            ledgerJournalTable.Posted == NoYes::No &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                    notexists join dimSynchronizeNotExists
                                        where dimSynchronizeNotExists.OriginalLedgerDimension == ledgerJournalTrans.OffsetLedgerDimension &&
                                            dimSynchronizeNotExists.ProviderStatusTrackingId == correlationId;

                                    activityContext.addCustomProperty('WereRecordsInserted_OffsetLedgerDimensionBlankCompany', int2str(dimSynchronize.rowCount() > 0));
                                }
                            }
                            else
                            {
                                if (includeCompany)
                                {
                                    // OffsetCompany is not defined; implicitly defined via curext()
                                    insert_recordset dimSynchronize (ProviderStatusTrackingId, OriginalLedgerDimension, DataArea, LedgerDimensionType)
                                select correlationId, OffsetLedgerDimension, companyId from ledgerJournalTrans
                                        group by ledgerJournalTrans.OffsetLedgerDimension, dimAttrValueCombination.LedgerDimensionType
                                        where ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger &&
                                            ledgerJournalTrans.Cancel == NoYes::No
                                    join LedgerDimensionType from dimAttrValueCombination
                                        where dimAttrValueCombination.RecId == ledgerJournalTrans.OffsetLedgerDimension &&
                                            (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                            dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                    exists join ledgerJournalTable
                                        where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                            ledgerJournalTable.Posted == NoYes::No &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                            ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                    notexists join dimSynchronizeNotExists
                                        where dimSynchronizeNotExists.OriginalLedgerDimension == ledgerJournalTrans.OffsetLedgerDimension &&
                                            dimSynchronizeNotExists.ProviderStatusTrackingId == correlationId;

                                    activityContext.addCustomProperty('WereRecordsInserted_OffsetLedgerDimension_DefaultCompany', int2str(dimSynchronize.rowCount() > 0));
                                }
                            }
                        }

                        // Journal fees
                        if (includeCompany)
                        {
                            changecompany(companyId)
                            {
                                // Company tables must be cleared to work properly when changecompany is invoked multiple times.
                                custVendPaymJournalFee.clear();
                                ledgerJournalTable.clear();
                                ledgerJournalTrans.clear();

                                insert_recordset dimSynchronize (ProviderStatusTrackingId, OriginalLedgerDimension, DataArea, LedgerDimensionType)
                                select correlationId, LedgerDimension, DataAreaId from custVendPaymJournalFee
                                    group by custVendPaymJournalFee.LedgerDimension, custVendPaymJournalFee.DataAreaId, dimAttrValueCombination.LedgerDimensionType
                                        where custVendPaymJournalFee.LedgerJournalACType == LedgerJournalACType::Ledger
                                join LedgerDimensionType from dimAttrValueCombination
                                    where dimAttrValueCombination.RecId == custVendPaymJournalFee.LedgerDimension &&
                                        (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                        dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                exists join ledgerJournalTrans
                                    where ledgerJournalTrans.RecId == custVendPaymJournalFee.RefRecId &&
                                        ledgerJournalTrans.Cancel == NoYes::No
                                exists join ledgerJournalTable
                                    where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                        ledgerJournalTable.Posted == NoYes::No &&
                                        ledgerJournalTable.JournalType != LedgerJournalType::Elimination &&
                                        ledgerJournalTable.JournalType != LedgerJournalType::BankChequeReversal &&
                                        ledgerJournalTable.JournalType != LedgerJournalType::BankDepositPaymCancel
                                notexists join dimSynchronizeNotExists
                                    where dimSynchronizeNotExists.OriginalLedgerDimension == custVendPaymJournalFee.LedgerDimension &&
                                        dimSynchronizeNotExists.ProviderStatusTrackingId == correlationId;

                                activityContext.addCustomProperty('WereRecordsInserted_LedgerDimension_JournalFees', int2str(dimSynchronize.rowCount() > 0));
                            }
                        }
                    }

                    dimensionStructureSyncProviderStatusTracking.Status = DimensionStructureSyncProviderStatus::Inserted;
                    dimensionStructureSyncProviderStatusTracking.update();
                    ttscommit;
                }
                else
                {
                    correlationId = dimensionStructureSyncProviderStatusTracking.RecId;
                }
            }
        }

        return correlationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChangesV2</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChangesV2(DimensionSynchronizeDetail _dimSynchronize)
    {
        LedgerDimensionBase ledgerDimension = _dimSynchronize.OriginalLedgerDimension;

        DimensionStorage dimStorage = DimensionValidation::syncStructureChanges(ledgerDimension, true, true);

        if (dimStorage)
        {
            ledgerDimension = dimStorage.save();
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>