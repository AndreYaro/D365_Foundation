<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgWorkPlannerProfileDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgWorkPlannerProfileDP</c> class is the Report Data Provider class for the work schedule
///    SSRS reports.
/// </summary>
[
    SRSReportParameterAttribute(classstr(JmgWorkPlannerProfileRDPContract)),
    SRSReportQueryAttribute(querystr(JmgWorkPlanner_Profile))
]
class JmgWorkPlannerProfileDP  extends SRSReportDataProviderBase
{
    JmgWorkPlannerProfileTmp     jmgWorkPlannerProfileTmp;
    JmgWorkPlannerDPHelper       helper;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getJmgWorkPlannerProfileTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insets data into the <c>JmgWorkPlannerProfileTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data from the <c>JmgWorkPlannerProfileTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('JmgWorkPlannerProfileTmp')
    ]
    public JmgWorkPlannerProfileTmp getJmgWorkPlannerProfileTmp()
    {
        select * from jmgWorkPlannerProfileTmp;
        return jmgWorkPlannerProfileTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the specified record into the database.
    /// </summary>
    /// <param name="_common">
    /// The record to insert into the database.
    /// </param>
    protected void insert(Common _common)
    {
        _common.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        super();
        helper = new JmgWorkPlannerDPHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateFrom</Name>
				<Source><![CDATA[
        public date parmDateFrom()
    {
        return this.parmDataContract().parmDateFrom();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTo</Name>
				<Source><![CDATA[
        public date parmDateTo()
    {
        return this.parmDataContract().parmDateTo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateJmgWorkPlannerProfileTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>JmgWorkPlannerProfileTmp</c> temporary buffer.
    /// </summary>
    protected void populateJmgWorkPlannerProfileTmp()
    {
        JmgProfileTable jmgProfileTable;
        SysQueryRun qr = new SysQueryRun(this.parmQuery());

        while (qr.next())
        {
            jmgProfileTable = qr.get(tablenum(JmgProfileTable));
            this.populateProfilesForAllEmployees(jmgProfileTable.Profile);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProfilesForAllEmployees</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the <c>JmgWorkPlannerProfileTmp</c> buffer with data for the specified profile.
    /// </summary>
    /// <param name="_profileId">
    ///    The profile ID for which to populate data.
    /// </param>
    protected void populateProfilesForAllEmployees(JmgProfileId _profileId)
    {
        JmgEmployee jmgEmployee;
        HcmWorker   hcmWorker;

        while select ProfileGroupId from jmgEmployee
            join PersonnelNumber from hcmWorker
            where jmgEmployee.Worker == hcmWorker.RecId
                  && jmgEmployee.Active == NoYes::Yes
                  && jmgEmployee.ActiveFrom <= this.parmDateFrom()
        {
            this.populateProfilesForAllWeeks(_profileId, jmgEmployee.ProfileGroupId, hcmWorker.PersonnelNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProfilesForAllWeeks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the <c>JmgWorkPlannerProfileTmp</c> temporary buffer with data for the specified profile,
    ///    profile group, and worker.
    /// </summary>
    /// <param name="_profileId">
    ///    The profile ID for which to populate data.
    /// </param>
    /// <param name="_profileGroupId">
    ///    The profile group for which to populate data.
    /// </param>
    /// <param name="_personnelNumber">
    ///    The personnel number of the worker for which to populate data.
    /// </param>
    protected void populateProfilesForAllWeeks(JmgProfileId _profileId, JmgProfileGroupId _profileGroupId, HcmPersonnelNumberId _personnelNumber)
    {
        JmgProfileDate startWeekDate   = JmgWorkPlannerDPHelper::getFirstDayOfTheWeek(this.parmDateFrom());
        JmgProfileDate dateTo = this.parmDateTo();

        while (startWeekDate <= dateTo)
        {
            this.populateProfilesForOneWeek(_profileId, _profileGroupId, _personnelNumber, startWeekDate);

            startWeekDate += 7;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProfilesForOneWeek</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the <c>JmgWorkPlannerProfileTmp</c> temporary buffer with data for the profile, profile
    ///    group, worker, and date.
    /// </summary>
    /// <param name="_profileId">
    ///    The profile ID for which to populate data.
    /// </param>
    /// <param name="_profileGroupId">
    ///    The profile group for which to populate data.
    /// </param>
    /// <param name="_personnelNumber">
    ///    The personnel number of the worker for which to populate data.
    /// </param>
    /// <param name="_startWeekDate">
    ///    The start date of the week for which to populate data.
    /// </param>
    public void populateProfilesForOneWeek(JmgProfileId _profileId, JmgProfileGroupId _profileGroupId, HcmPersonnelNumberId _personnelNumber, date _startWeekDate)
    {
        jmgWorkPlannerProfileTmp.Monday     = this.workerAtProfile(_profileId, _profileGroupId, _personnelNumber, _startWeekDate);
        jmgWorkPlannerProfileTmp.Tuesday    = this.workerAtProfile(_profileId, _profileGroupId, _personnelNumber, _startWeekDate + 1);
        jmgWorkPlannerProfileTmp.Wednesday  = this.workerAtProfile(_profileId, _profileGroupId, _personnelNumber, _startWeekDate + 2);
        jmgWorkPlannerProfileTmp.Thursday   = this.workerAtProfile(_profileId, _profileGroupId, _personnelNumber, _startWeekDate + 3);
        jmgWorkPlannerProfileTmp.Friday     = this.workerAtProfile(_profileId, _profileGroupId, _personnelNumber, _startWeekDate + 4);
        jmgWorkPlannerProfileTmp.Saturday   = this.workerAtProfile(_profileId, _profileGroupId, _personnelNumber, _startWeekDate + 5);
        jmgWorkPlannerProfileTmp.Sunday     = this.workerAtProfile(_profileId, _profileGroupId, _personnelNumber, _startWeekDate + 6);

        jmgWorkPlannerProfileTmp.Profile    = _profileId;
        jmgWorkPlannerProfileTmp.WeekNumber = JmgWorkPlannerDPHelper::generateWeekHeader(_startWeekDate);
        this.insert(jmgWorkPlannerProfileTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. This method will be called by
    /// at runtime. The method can compute data and populate the data tables that will be returned to .
    /// Note that this is a framework class. Customizing this class can cause problems with future upgrades
    /// to the software.
    /// </remarks>
    public void processReport()
    {
        helper.loadProfileGroups(this.parmDateFrom(), this.parmDateTo());
        super();
        this.populateJmgWorkPlannerProfileTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerAtProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the personnel number of the worker to display at the specified profile date.
    /// </summary>
    /// <param name="_profileId">
    /// The ID of the profile to test for.
    /// </param>
    /// <param name="_jmgProfileGroupId">
    /// The profile group to test for.
    /// </param>
    /// <param name="_personnelNumber">
    /// The personnel number to test for.
    /// </param>
    /// <param name="_profileDate">
    /// The profile date to test for.
    /// </param>
    /// <returns>
    /// the personnel number of the worker to display at the specified profile date.
    /// </returns>
    private str workerAtProfile(JmgProfileId _profileId, JmgProfileGroupId _jmgProfileGroupId, HcmPersonnelNumberId _personnelNumber, JmgProfileDate _profileDate)
    {
        if (helper.getProfile(_personnelNumber, _jmgProfileGroupId, _profileDate) == _profileId)
        {
            return _personnelNumber;
        }

        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
