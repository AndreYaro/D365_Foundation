<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGrandTotalJournalCalc_MultiService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates grand total journals.
/// </summary>
public class RetailGrandTotalJournalCalc_MultiService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the journals calculation.
    /// </summary>
    /// <param name = "_dataContract">The data contract.</param>
    public void run(RetailGrandTotalJournalCalc_MultiContract _dataContract)
    {
        RetailChannelTable retailChannelTable;
        SetEnumerator selectedStoreEnumerator;
        SetEnumerator oMInternalOrgRecIds;
        Set selectedStoreRecIds = new Set(Types::Int64);
        Set operatingUnitType = new Set(Types::Enum);
        Set descendants;
        SetEnumerator descendantsEnumerator;

        oMInternalOrgRecIds = _dataContract.parmSelectedOMInternalOrgRecIds().getEnumerator();

        // Used to filter the OMOperating unit type to include only Retail channel
        operatingUnitType.add(OMOperatingUnitType::RetailChannel);

        while (oMInternalOrgRecIds.moveNext())
        {
            // Get all the descendents for selected hierarchy node
            descendants = OMOperatingUnit::getDescendantsAndSelf(
                                        oMInternalOrgRecIds.current(),
                                        _dataContract.parmOMHierarchyRecId(),
                                        DateTimeUtil::utcNow(),
                                        operatingUnitType
                                        );

            // Start traversing on the descendants
            descendantsEnumerator = descendants.getEnumerator();
            while (descendantsEnumerator.moveNext())
            {
                retailChannelTable = RetailChannelTable::findByOperatingUnitId(descendantsEnumerator.current());

                if(retailChannelTable.RecId
                   && retailChannelTable.ChannelType == RetailChannelType::RetailStore
                   && !selectedStoreRecIds.in(retailChannelTable.RecId))
                {
                    selectedStoreRecIds.add(retailChannelTable.RecId);
                }
            }
        }

        if (!selectedStoreRecIds.elements())
        {
            throw error("@SYS107537");
        }

        // Start processing for selected stores
        selectedStoreEnumerator = selectedStoreRecIds.getEnumerator();
        while (selectedStoreEnumerator.moveNext())
        {
            this.createJournal(RetailStoreTable::findRecId(selectedStoreEnumerator.current()), _dataContract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateJournal</Name>
				<Source><![CDATA[
    private boolean canCreateJournal(RetailStoreTable _storeTable, RetailGrandTotalJournalCalc_MultiContract _dataContract)
    {
        RetailGrandTotalJournalTable journalTable;
        boolean ret = true;

        select firstOnly RecId from journalTable
            where journalTable.StoreId == _storeTable.StoreNumber
                && journalTable.Status != RetailGrandTotalJournalStatus::Canceled
                && journalTable.Annual == _dataContract.parmAnnual();

        if (!journalTable.RecId)
        {
            return ret;
        }

        select firstOnly RecId from journalTable
            where journalTable.StoreId == _storeTable.StoreNumber
                && journalTable.Status == RetailGrandTotalJournalStatus::Closed
                && journalTable.ToDate == _dataContract.parmFromDate() - 1
                && journalTable.Annual == _dataContract.parmAnnual();

        if (!journalTable.RecId)
        {
            error(strFmt("@RetailGrandTotalJournal:PrevPeriodNotClosed", _storeTable.StoreNumber, _dataContract.parmFromDate(), _dataContract.parmToDate()));
            ret = false;
        }

        if (ret)
        {
            select firstOnly RecId, JournalNum, FromDate, ToDate from journalTable
                where journalTable.StoreId == _storeTable.StoreNumber
                    && journalTable.Status != RetailGrandTotalJournalStatus::Canceled
                    && journalTable.FromDate <= _dataContract.parmToDate() 
                    && journalTable.ToDate >= _dataContract.parmFromDate()
                    && journalTable.Annual == _dataContract.parmAnnual();

            if (journalTable.RecId)
            {
                error(strFmt("@RetailGrandTotalJournal:JournalAlreadyExists", _storeTable.StoreNumber, _dataContract.parmFromDate(), _dataContract.parmToDate(), journalTable.JournalNum, journalTable.FromDate, journalTable.ToDate));
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    private void createJournal(RetailStoreTable _storeTable, RetailGrandTotalJournalCalc_MultiContract _dataContract)
    {
        RetailGrandTotalJournalTable journalTable;

        if (!this.canCreateJournal(_storeTable, _dataContract))
        {
            return;
        }

        try
        {
            ttsBegin;

            journalTable.StoreId = _storeTable.StoreNumber;
            journalTable.initFromStoreTable(_storeTable);

            journalTable.Annual = _dataContract.parmAnnual();

            journalTable.FromDate = _dataContract.parmFromDate();
            journalTable.ToDate = _dataContract.parmToDate();

            journalTable.Status = RetailGrandTotalJournalStatus::New;

            journalTable.updateDescription();

            journalTable.insert();

            if (_dataContract.parmCalcJournal())
            {
                RetailGrandTotalJournalUpdate::construct(RetailGrandTotalJourUpdAction::Calculate).update(journalTable);
            }

            ttsCommit;

            info(strFmt("@RetailGrandTotalJournal:JournalForStoreCreatedSuccessfully", journalTable.JournalNum, journalTable.StoreId, journalTable.FromDate, journalTable.ToDate));
        }
        catch
        {
            error(strFmt("@RetailGrandTotalJournal:JournalWasNotCreated", _storeTable.StoreNumber, _dataContract.parmFromDate(), _dataContract.parmToDate()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>