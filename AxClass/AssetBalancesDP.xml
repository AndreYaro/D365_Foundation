<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBalancesDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>AssetBalances</c> declares the variables, tables, enums etc used in the <c>AssetBalances</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(AssetBalancesContract)),
    SRSReportQueryAttribute(queryStr(AssetBalances))
]
public class AssetBalancesDP extends SRSReportDataProviderPreProcessTempDb
{
    AssetBalancesTmp assetBalancesTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetBalancesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// The data for the report in the <c>assetBalancesTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(AssetBalancesTmp))
    ]
    public AssetBalancesTmp getAssetBalancesTmp()
    {
        select assetBalancesTmp;
        return assetBalancesTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetBalancesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into temporary table <c>AssetBalancesTmp</c>.
    /// </summary>
    /// <param name="_assetBalances">
    /// Holds <c>AssetBalances</c> buffer.
    /// </param>
    /// <param name="_groupName">
    /// Holds asset group name field to which value is set.
    /// </param>
    /// <param name="_assetSumCalc">
    /// Holds <c>AssetSumCalc</c> class object.
    /// </param>
    private void insertAssetBalancesTmp(
        AssetBalances   _assetBalances,
        AssetGroupName  _groupName,
        AssetSumCalc    _assetSumCalc)
    {
        assetBalancesTmp.clear();

        assetBalancesTmp.AssetId              = _assetBalances.AssetId;
        assetBalancesTmp.AssetGroupId         = _assetBalances.AssetGroup;
        assetBalancesTmp.AssetGroupName       = _groupName;
        assetBalancesTmp.Name                 = _assetBalances.Name;
        assetBalancesTmp.BookId               = _assetBalances.BookId;
        assetBalancesTmp.CurrentOperationsTax = _assetBalances.CurrentOperationsTax;
        assetBalancesTmp.Status               = _assetBalances.Status;

        assetBalancesTmp.AcquisitionValue     = _assetSumCalc.acquisitionValueAll();

        assetBalancesTmp.DepreciationValue    = (_assetSumCalc.depreciationValueAll() +
                                                 _assetSumCalc.extraDepreciationValue());

        assetBalancesTmp.DisposalValue        = _assetSumCalc.disposalValue();
        assetBalancesTmp.RevaluationValue     = _assetSumCalc.revaluationValue();
        assetBalancesTmp.WriteUpDownAdjValue  = _assetSumCalc.writeUpDownAdjValue();
        assetBalancesTmp.ProfitLossValue      = (_assetSumCalc.profitLossValue() +
                                                 _assetSumCalc.capitalReserveValue());
        assetBalancesTmp.NetBookValue         = _assetSumCalc.netBookValue();

        assetBalancesTmp.BonusValue           = _assetSumCalc.bonusDepreciationValue();

        assetBalancesTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        AssetBalances   assetBalances;
        AssetTable      assetTable;
        AssetGroup      assetGroup;
        AssetSumCalc    assetSumCalc;
        QueryRun        queryRun;
        AssetBalancesContract contract = this.parmDataContract() as AssetBalancesContract;
        LedgerCurrencySelection currencySelected = contract.parmCurrencySelection();

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            assetBalances = queryRun.get(tablenum(AssetBalances));
            assetGroup = queryRun.get(tableNum(AssetGroup));

            if (currencySelected == LedgerCurrencySelection::Accounting)
            {
                assetSumCalc = AssetSumCalc_Trans::newAssetYear(
                      assetBalances.AssetId,
                      assetBalances.BookId);
            }
            else
            {
                assetSumCalc = AssetSumCalc_Trans::newAssetYearByCurrency(
                        assetBalances.AssetId,
                        assetBalances.BookId,
                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                        AssetYear::All,
                        AssetSumCalcType::Reporting);
            }
            

            this.insertAssetBalancesTmp(
                assetBalances,
                assetGroup.Name,
                assetSumCalc);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>