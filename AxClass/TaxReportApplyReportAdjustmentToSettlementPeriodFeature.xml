<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportApplyReportAdjustmentToSettlementPeriodFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;

/// <summary>
/// The <c>TaxReportApplyReportAdjustmentToSettlementPeriodFeature</c> class defines the feature of adjust tax settlement based on include correction parameter in settlement period.
/// </summary>
[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
internal final class TaxReportApplyReportAdjustmentToSettlementPeriodFeature extends TaxFeatureMetaDataBase implements IFeatureMetadata, IFeatureLifecycle, IFeatureMetadataEnablementNotifiable
{
    private static TaxReportApplyReportAdjustmentToSettlementPeriodFeature instance = new TaxReportApplyReportAdjustmentToSettlementPeriodFeature();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static TaxReportApplyReportAdjustmentToSettlementPeriodFeature instance()
    {
        return TaxReportApplyReportAdjustmentToSettlementPeriodFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@TaxReport:TaxReportApplyReportAdjustmentToSettlementPeriodFeatureName");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::Tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@TaxReport:TaxReportApplyReportAdjustmentToSettlementPeriodFeatureDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return 'https://go.microsoft.com/fwlink/?linkid=2270235';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
        this.updateReportAdjustmentOfExistingTaxPeriodHead();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportAdjustmentOfExistingTaxPeriodHead</Name>
				<Source><![CDATA[
    private void updateReportAdjustmentOfExistingTaxPeriodHead()
    {
        TaxPeriodHead taxPeriodHead;
        TaxParameters taxParameters;

        ttsbegin;

        taxPeriodHead.skipDataMethods(true);
        taxPeriodHead.skipEvents(true);
        taxPeriodHead.skipDatabaseLog(true);

        update_recordset crosscompany taxPeriodHead
            setting ReportAdjustment = taxParameters.ReportAdjustment
            join taxParameters
                where taxParameters.DataAreaId == taxPeriodHead.DataAreaId;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>