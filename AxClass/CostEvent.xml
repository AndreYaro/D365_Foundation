<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostEvent</c> class is an abstration for a cost event.
/// </summary>
abstract public class CostEvent extends CostEventBase
{
    CostEventRecId      id;
    CostEventRole       role;
    Voucher             voucher;
    TransDate           transDate;
    NoYes               isPosted;

    protected DataAreaId  dataAreaId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadEntries</Name>
				<Source><![CDATA[
    protected void loadEntries()
    {
        CostEntryTable  costEntryTable;

        if (id)
        {
            while select costEntryTable
                where costEntryTable.CostEvent == id
                {
                    this.addEntry(CostEntry::newFromCostEntryTable(costEntryTable.data()));
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadReconcilingEntries</Name>
				<Source><![CDATA[
    protected void loadReconcilingEntries()
    {
        CostEntryTable  costEntryTable;

        if (id)
        {
            while select costEntryTable
                where costEntryTable.ReconciledEvent == id
                {
                    this.addReconcilingEntry(CostEntry::newFromCostEntryTable(costEntryTable.data()));
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    public CostEventRecId parmId(CostEventRecId _id = id)
    {
        id = _id;

        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPosted</Name>
				<Source><![CDATA[
    public NoYes parmIsPosted(NoYes _isPosted = isPosted)
    {
        isPosted = _isPosted;

        return isPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRole</Name>
				<Source><![CDATA[
    public CostEventRole parmRole(CostEventRole _role = role)
    {
        role = _role;

        return role;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCostEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostEvent</c> class from a <c>CostInventoryEvent</c>.
    /// </summary>
    /// <param name="_event">
    /// An instace of the <c>CostInventoryEvent</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostEvent</c> class.
    /// </returns>
    public static CostEvent newCostEvent(CostInventoryEvent _event)
    {
        CostEvent       costEvent;

        CostEventTable costEventTable = CostEventTable::findFromParentEvent(_event);

        if (costEventTable)
        {
            costEvent = CostEvent::newCostEventTable(costEventTable);
        }

        return costEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCostEventRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostEvent</c> class from a <c>CostEventRole</c>.
    /// </summary>
    /// <param name="_eventRole">
    /// The <c>CostEventRole</c>.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostEvent</c> class.
    /// </returns>
    public static CostEvent newCostEventRole(CostEventRole _eventRole)
    {
        CostEvent       event;

        switch (_eventRole)
        {
            case CostEventRole::Benefit:
                event = CostBenefitEvent::construct();
                break;
            case CostEventRole::Adjustment:
                event = CostAdjustmentEvent::construct();
                break;
            case CostEventRole::Correction:
                event = CostCorrectionEvent::construct();
                break;
        }

        return event;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCostEventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostEvent</c> class from a <c>CostEventTable</c> buffer.
    /// </summary>
    /// <param name="_costEventTable">
    /// The <c>CostEventTable</c> buffer.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostEvent</c> class.
    /// </returns>
    /// <remarks>
    /// Initialization of parent is currently not needed.
    /// </remarks>
    public static CostEvent newCostEventTable(CostEventTable _costEventTable)
    {
        CostEvent       event;

        event = SysTransactionScopeCache::get(classStr(CostEvent), _costEventTable.RecId, event);

        if (!event)
        {
            event = CostEvent::newCostEventRole(_costEventTable.CostEventRole);
            event.parmId(_costEventTable.RecId);
            event.parmRole(_costEventTable.CostEventRole);
            event.parmIsPosted(_costEventTable.IsPosted);
            event.parmVoucher(_costEventTable.Voucher);
            event.parmTransDate(_costEventTable.TransDate);
            event.parmDataAreaId(_costEventTable.DataAreaId);

            SysTransactionScopeCache::set(classStr(CostEvent), _costEventTable.RecId, event);
        }

        return event;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmDataAreaId(DataAreaId _dataAreaId = dataAreaId)
    {
        dataAreaId = _dataAreaId;

        return dataAreaId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>