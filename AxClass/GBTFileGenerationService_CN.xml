<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GBTFileGenerationService_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The service of GBT file generation.
/// </summary>
class GBTFileGenerationService_CN extends SysOperationServiceBase
{
    PeriodName      startPeriodName;
    PeriodName      endPeriodName;
    PeriodName      periodName;
    FiscalYearName  fiscalYearName;
    TransDate       startPeriodtDate;
    TransDate       endPeriodDate;
    RefRecId        fiscalCalendarYearRecId;
    GBTParameters_CN GBTParameters;
    FiscalCalendarPeriod fiscalCalendarPeriod;
    container        fiscalPeriodRecIdCon;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateGBTXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs full process of generating GBT file.
    /// </summary>
    /// <param name="_contract">
    /// The contract instance
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void generateGBTXml(GBTFileGenerationDataContract_CN _contract)
    {
        ERIModelDefinitionParamsAction parameters;
        ERFormatMappingTable ERFormatMappingTable;
        GBTFileGenerationDataProvider_CN GBTFileGenerationDataProvider;
        Query query;
        QueryRun queryRun;
        const str Model = 'Model';
        const str Contract = 'Contract';

        GBTParameters = GBTParameters_CN::find();
        fiscalYearName = _contract.parmFiscalYearName();
        startPeriodName = _contract.parmStartPeriodName();
        endPeriodName = _contract.parmEndPeriodName();
        periodName = _contract.parmPeriodName();

        if (fiscalYearName && startPeriodName && endPeriodName && periodName)
        {
            try
            {
                [fiscalCalendarYearRecId, startPeriodtDate, endPeriodDate, fiscalCalendarPeriod] =
                    GBTFileGenerationHelper_CN::getPeriodDate(fiscalYearName, startPeriodName, endPeriodName, periodName);
                fiscalPeriodRecIdCon = GBTFileGenerationHelper_CN::getFiscalPeriod(startPeriodtDate, endPeriodDate, fiscalCalendarYearRecId);

                GBTFileGenerationDataProvider =
                    GBTFileGenerationDataProvider_CN::construct(
                        startPeriodtDate, endPeriodDate, fiscalYearName, fiscalCalendarYearRecId, fiscalPeriodRecIdCon, fiscalCalendarPeriod, periodName);
                GBTFileGenerationDataProvider.populateReportsData();

                parameters = new ERModelDefinitionParamsUIActionComposite()
                    // GL
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.getGLReports()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.getGLReportsData()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillChartOfAccountParameters()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillMainAccount()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillAccountStructure()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillCashflowInfo()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillCashflowVoucher()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillAccountBalanceAndNetAmount()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillLedgerVoucher()))
                    //APAR
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillTransactionType()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillARTransactions()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillAPTransactions()))
                    //Fixed assert
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillFixedAssetChangeType()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillFixedAssetCardInfo()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillFixedAssetCard()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillFixedAssetUsage()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillFixedAssetDisposal()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillFixedAssetDisposalAddition()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillFixedAssetChangeHistory()))
                    //Common
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillDepartment()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillELedgerBook()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillEmployee()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillFiscalPeriod()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillCustomDimensionAttribute()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillCustomDimensionAttributeValue()))
                    .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(GBTFileGenerationDataProvider.fillPaymentMethod()))
                    .add(new ERModelDefinitionObjectParameterAction(Model, Contract, _contract));

                query = this.buildFormatMappingQuery();
                queryRun = new QueryRun(query);

                while (queryRun.next())
                {
                    ERFormatMappingTable = queryRun.get(tableNum(ERFormatMappingTable));

                    // Call ER format mapping to generate the GBT file.
                    ERObjectsFactory::createFormatMappingRunByFormatMappingId(ERFormatMappingTable.RecId, ERSolutionTable::find(ERFormatMappingTable.Solution).Name)
                        .withParameter(parameters)
                        .withFileDestination(_contract.getFileDestination())
                        .run();
                }
            }
            catch
            {
                // An error occurred while exporting data.
                error("@SYP4861341");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFormatMappingQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all format mapping layout by model name
    /// </summary>
    /// <returns>The format mapping query</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query buildFormatMappingQuery()
    {
        ERDataModelTable ERDataModelTable;
        Query formatMappingQuery;

        if (GBTParameters.ERModelName)
        {
            ERDataModelTable = ERDataModelTable::findByName(GBTParameters.ERModelName);

            if (ERDataModelTable)
            {
                formatMappingQuery = ERObjectsFactory::createFormatMappingTableLookupForModel(ERDataModelTable.Name).buildQuery();
            }
        }

        return formatMappingQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>