<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxValidateForProjectInvoice_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxValidateForProjectInvoice_CN</c> class is used to validate tax for project invoice.
/// </summary>
class TaxValidateForProjectInvoice_CN extends TaxValidateForTaxIntegration_CN
{
    ProjInvoiceJour             projInvoiceJour;
    custBankAccount             custBankAccount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existTaxRegistrationNumberFromCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the tax registration number from cust exist.
    /// </summary>
    /// <param name="_companyInfoExtension">
    /// The company info extension information.
    /// </param>
    /// <returns>
    /// Returns true if the tax registration number from cust exist.
    /// </returns>
    public boolean existTaxRegistrationNumberFromCust(CompanyInfoExtension_CN _companyInfoExtension)
    {
        boolean ret = false;

        if (TaxRegistration::getTaxRegistrationNumberFromCust(ProjInvoiceJour.InvoiceAccount, ProjInvoiceJour.InvoiceDate, _companyInfoExtension.TaxRegistrationType))
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existVATInvoiceDescTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if VAT invoice desc table exist.
    /// </summary>
    /// <returns>
    /// Returns true if the VAT invoice desc table exist.
    /// </returns>
    public boolean existVATInvoiceDescTable()
    {
        boolean ret = false;

        if (ProjInvoiceJourExtensionCN::findByProjInvoiceJour(projinvoicejour.RecId).VATInvoiceDescTable)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAmountAndNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets invoice amount and number of lines.
    /// </summary>
    public void getInvoiceAmountAndNumOfLines()
    {
        ProjInvoiceTransUnion   ProjInvoiceTransUnion;
        AmountCur               netAmount;
        AmountCur               TaxAmount;

        select sum(LineAmount), count(RecId) from ProjInvoiceTransUnion
            where ProjInvoiceTransUnion.ProjInvoiceId  == projinvoicejour.ProjInvoiceId
                && ProjInvoiceTransUnion.InvoiceDate  == projinvoicejour.InvoiceDate ;

        netAmount = ProjInvoiceTransUnion.LineAmount;
        numOfLines = int642int(ProjInvoiceTransUnion.RecId);

        if (taxProfileTable.IncludeTax)
        {
            TaxAmount = projInvoiceJour.SumTax;
        }

        invoiceAmount = netAmount + TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueDefault</Name>
				<Source><![CDATA[
        public void initValueDefault()
    {
        super();
        ProjInvoiceJour     = common;

        custBankAccount    = CustBankAccount::find(this.parmInvoiceAccount(), this.parmCustBankAccountId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
        protected CurrencyCode parmCurrencyCode()
    {
        CurrencyCode localCurrencyCode;

        localCurrencyCode = projInvoiceJour.CurrencyId;

        return localCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustBankAccountId</Name>
				<Source><![CDATA[
        protected CustBankAccountId parmCustBankAccountId()
    {
        CustBankAccountId custBankAccountIdLocal;

        custBankAccountIdLocal = CustTable::find(this.parmInvoiceAccount()).BankAccount;

        return custBankAccountIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceAccount</Name>
				<Source><![CDATA[
        protected CustInvoiceAccount parmInvoiceAccount()
    {
        CustInvoiceAccount ret;

        ret = projInvoiceJour.InvoiceAccount;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
        protected InvoiceId parmInvoiceId()
    {
        invoiceId       invoiceIdLocal;

        invoiceIdLocal = projInvoiceJour.ProjInvoiceId;

        return  invoiceIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
        protected SalesId parmSalesId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxCode</Name>
				<Source><![CDATA[
        public boolean validateTaxCode()
    {
        ProjInvoiceTransUnion         ProjInvoiceTransUnion;
        boolean             ret = true;

        while select * from ProjInvoiceTransUnion
            group by ProjInvoiceTransUnion.TaxGroupId,ProjInvoiceTransUnion.TaxItemGroupId
                where ProjInvoiceTransUnion.ProjInvoiceId  == projinvoicejour.ProjInvoiceId
                    && ProjInvoiceTransUnion.InvoiceDate  == projinvoicejour.InvoiceDate
        {
            numOfTaxCode ++;
            this.validatePostTaxCode(ProjInvoiceTransUnion.TaxGroupId, ProjInvoiceTransUnion.TaxItemGroupId);
        }

        ret = ret && super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjectInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new project invoice.
    /// </summary>
    /// <param name="_projInvoiceJour">
    /// The project invoice journal.
    /// </param>
    /// <param name="_taxProfileTable">
    /// The tax profile table.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxValidateForProjectInvoice_CN</c> class.
    /// </returns>
    Static public TaxValidateForProjectInvoice_CN newProjectInvoice(ProjInvoiceJour  _projInvoiceJour, TaxProfileTable_CN _taxProfileTable)
    {
        TaxValidateForProjectInvoice_CN taxValidateForProjectInvoice = new TaxValidateForProjectInvoice_CN(_projInvoiceJour, _taxProfileTable);

        taxValidateForProjectInvoice.initValueDefault();

        return taxValidateForProjectInvoice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>