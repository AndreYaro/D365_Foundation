<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzVendTransOpenFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CzVendTransOpenFilter extends CzCustVendTransOpenFilter
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dlgSalesPurchId = dialog.addFieldValue(extendedTypeStr(PurchId), purchId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFilterStr</Name>
				<Source><![CDATA[
    protected void findFilterStr()
    {
        VendInvoiceJour                 vendInvoiceJour;
        VendTrans                       vendTrans;
        VendTransOpen                   vendTransOpen;
        CzVendAdvanceInvoiceLink        vendAdvanceInvoiceLink;
        CzVendAdvanceInvoiceTable       vendAdvanceInvoiceTable;
        ;

        // purch order invoice trans
        while select TableId from vendInvoiceJour
            where vendInvoiceJour.PurchId == purchId
            join TableId from vendTrans
                where vendTrans.Invoice       == vendInvoiceJour.InvoiceId      &&
                      vendTrans.AccountNum    == vendInvoiceJour.InvoiceAccount &&
                      vendTrans.TransDate     == vendInvoiceJour.InvoiceDate
            join RecId from vendTransOpen
                where vendTransOpen.RefRecId  == vendTrans.RecId
        {
            filterStr += (filterStr ? ',' : '') + int642str(vendTransOpen.RecId);
        }

        // Prepayments linked to advanced invoice
        while select crosscompany vendAdvanceInvoiceLink
            where vendAdvanceInvoiceLink.InvoiceCompany == curext()
        {
            select firstonly vendAdvanceInvoiceTable
                where vendAdvanceInvoiceTable.RecId     == vendAdvanceInvoiceLink.AdvanceInvoiceRecId
                   && vendAdvanceInvoiceTable.PurchId   == purchId;

            if (vendAdvanceInvoiceTable)
            {
                changecompany(vendAdvanceInvoiceLink.PaymentCompany)
                {
                    vendTransOpen = null;
                    vendTrans = null;
                    while select vendTransOpen
                        exists join vendTrans
                        where vendTransOpen.RefRecId  == vendTrans.RecId
                           && vendTrans.Voucher       == vendAdvanceInvoiceLink.Voucher
                           && vendTrans.TransDate     == vendAdvanceInvoiceLink.TransDate
                    {
                        filterStr += (filterStr ? ',' : '') + int642str(vendTransOpen.RecId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld1_1_lookup</Name>
				<Source><![CDATA[
    public void fld1_1_lookup()
    {
        SysTableLookup          tableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        ;

        query = new Query();
        queryBuildDataSource = query.addDataSource(tablenum(PurchTable));

        queryBuildRange = query.dataSourceNo(1).addRange(fieldnum(PurchTable, InvoiceAccount));
        queryBuildRange.value(custVendAccount);
        queryBuildRange.status(RangeStatus::Hidden);

        tableLookup = SysTableLookup::newParameters(tablenum(PurchTable), dlgSalesPurchId.control());
        tableLookup.addLookupfield(fieldnum(PurchTable, PurchId));
        tableLookup.addLookupfield(fieldnum(PurchTable, PurchName));
        tableLookup.addLookupfield(fieldnum(PurchTable, InvoiceAccount));
        tableLookup.addLookupfield(fieldnum(PurchTable, PurchStatus));
        tableLookup.parmQuery(query);

        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
    ;
        purchId = dlgSalesPurchId.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        PurchTable purchTable;

        if (!purchId)
            return checkFailed("@GLS111735");

        if (!calledFrom)
        {
            purchTable = PurchTable::find(purchId);
            if (!purchTable)
                return checkFailed(strfmt("@GLS111736", purchId));

            if (purchTable.InvoiceAccount != custVendAccount)
                return checkFailed(strfmt("@GLS111737", purchId, purchTable.InvoiceAccount, custVendAccount));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static CzVendTransOpenFilter construct()
    {
        return new CzVendTransOpenFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS111738";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCommon</Name>
				<Source><![CDATA[
    public static CzVendTransOpenFilter newFromCommon(Common _record)
    {
        PurchId                 purchId;
        VendAccount             vendAccount;
        CzVendTransOpenFilter   vendTransOpenFilter = CzVendTransOpenFilter::construct();
        VendTable               vendTable;
        PurchTable              purchTable;
        LedgerJournalTrans      ledgerJournalTrans;
    ;
        switch (_record.TableId)
        {
            case tablenum(VendTable):
                vendTable = _record;
                vendAccount = vendTable.AccountNum;
                break;

            case tablenum(PurchTable):
                purchTable  = _record;
                vendAccount = purchTable.InvoiceAccount;
                purchId     = purchTable.PurchId;
                break;

            case tablenum(LedgerJournalTrans):
                ledgerJournalTrans  = _record;
                if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                {
                    vendAccount = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.LedgerDimension);
                }
                else
                    if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
                    {
                        vendAccount = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.OffsetLedgerDimension);
                    }
                break;
        }

        vendTransOpenFilter.parmCustVendAccount(vendAccount);
        vendTransOpenFilter.parmPurchId(purchId);

        return vendTransOpenFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>