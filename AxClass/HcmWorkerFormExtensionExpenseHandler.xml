<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmWorkerFormExtensionExpenseHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the Expense module form extension events for the HcmWorker form.
/// </summary>
public class HcmWorkerFormExtensionExpenseHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>MainTab_OnTabChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// HcmWorker MainTab form control OnTabChanged event handler for the HcmWorker form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmWorker, MainTab), FormControlEventType::TabChanged)]
    public static void MainTab_OnTabChanged(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun hcmWorkerForm = _sender.formRun();
        FormDataSource hcmWorker_ds = hcmWorkerForm.dataSource(formDataSourceStr(HcmWorker, HcmWorker)) as FormDataSource;
        HcmWorker hcmWorker = hcmWorker_ds.cursor();
        var expenseEditControl = hcmWorkerForm.design().controlName(formControlStr(HcmWorker, ExpenseEdit)) as FormButtonGroupControl;

        //
        // Set visibility to controls that only requires the worker has an employment (Present, future, or past)
        // and user has access to the legal enity context of that employment
        //
        expenseEditControl.visible(HcmWorkerFormExtensionExpenseHandler::HasEmploymentAnytime(hcmWorker.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmWorker_employmentControlsUpdating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the worker form controls based on the employment type of the worker.
    /// </summary>
    /// <param name = "_formElement">The worker form instance that raised the event.</param>
    /// <param name = "_hasEmploymentInCurrentCompany">Indicates whether or not the worker has an employment record in the current company.</param>
    /// <param name = "_isEmployeeEmployment">Indicates whether or not the worker is employed as an employee.</param>
    [SubscribesTo(formStr(HcmWorker), delegateStr(HcmWorker, employmentControlsUpdating))]
    public static void HcmWorker_employmentControlsUpdating(FormRun _formElement, boolean _hasEmploymentInCurrentCompany, boolean _isEmployeeEmployment)
    {
        FormDataSource hcmWorker_ds = _formElement.dataSource(formDataSourceStr(HcmWorker, HcmWorker)) as FormDataSource;
        HcmWorker hcmWorker = hcmWorker_ds.cursor();
        var expenseEditControl = _formElement.design().controlName(formControlStr(HcmWorker, ExpenseEdit)) as FormButtonGroupControl;

        //
        // Set visibility to controls that only requires the worker has an employment (present, future, or past)
        // and user has access to the legal enity context of that employment
        //
        expenseEditControl.visible(HcmWorkerFormExtensionExpenseHandler::HasEmploymentAnytime(hcmWorker.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>HasEmploymentAnytime</Name>
				<Source><![CDATA[
    private static boolean HasEmploymentAnytime(HcmWorkerRecId worker)
    {
        boolean hasEmploymentAnytime = false;
        if (HcmEmployment::findByWorkerLegalEntity(worker, CompanyInfo::current(), DateTimeUtil::minValue(), DateTimeUtil::maxValue()))
        {
            hasEmploymentAnytime = true;
        }
        return hasEmploymentAnytime;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>