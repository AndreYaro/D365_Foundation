<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLinePurchParmLineImpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>PurchParmLine</c>.
/// </summary>
public class TaxModelDocLinePurchParmLineImpl extends TaxModelDocLinePurchLineImpl
{
    PurchParmTable purchParmTable;
    PurchParmLine  purchParmLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentLineMainTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TableId</c> of the document line main table.
    /// </summary>
    /// <returns>
    /// The <c>TableId</c>
    /// </returns>
    public TableId getDocumentLineMainTableId()
    {
        return purchParmLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineMainTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the document line main table.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> of the document line main table.
    /// </returns>
    public RecId getDocumentLineMainTableRecId()
    {
        return purchParmLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTransId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventTransId</c>
    /// </returns>
    public InventTransId getInventTransId()
    {
        return purchParmLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ItemId</c>
    /// </returns>
    public ItemId getItemId()
    {
        return purchParmLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        return purchParmLine.ReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        return purchParmTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        PurchLine purchLineLocal;

        purchParmLine = _documentLineMap;
        purchLineLocal = purchParmLine.purchLine();
        if (purchLineLocal.RecId == 0)
        {
            purchLineLocal = PurchLine::findInventTransId(purchParmLine.InventTransId);
        }
        super(purchLineLocal);
        purchParmTable = purchParmLine.purchParmTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total discount amount.
    /// </summary>
    /// <returns>The total discount amount</returns>
    public Amount getDiscAmount()
    {
        Amount totalDisc;

        PriceUnit priceUnit = purchParmLine.PriceUnit == 0? 1 : purchParmLine.PriceUnit;

        Amount netAmount = (purchParmLine.ReceiveNow * ((purchParmLine.PurchPrice - purchParmLine.discAmount()) / priceUnit)) * (100 - purchParmLine.discPercent()) / 100;

        totalDisc = netAmount * purchParmLine.purchTable().DiscPercent + (purchParmLine.ReceiveNow * purchParmLine.PurchPrice / priceUnit) - netAmount;

        return totalDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxableDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the taxable document type.
    /// </summary>
    /// <returns>The taxable document type.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str getTaxableDocumentType()
    {
        TaxableDocumentDescriptor taxableDocumentDescriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(purchParmTable);

        TaxableDocumentType taxableDocumentType = TaxableDocumentType::findByInterfaceName(taxableDocumentDescriptor.getSourceTaxableDocumentType());

        return taxableDocumentType.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount of the document line.
    /// </summary>
    /// <returns>
    /// The line amount.
    /// </returns>
    public LineAmount getLineAmount()
    {
        return purchParmLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    public NoYes shouldPostTaxTrans()
    {
        NoYes           ret;
        InventTable     inventTable;

        if(TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            inventTable = inventTable::find(this.getItemId());
            switch (purchParmTable.Ordering)
            {
                case DocumentStatus::PackingSlip:
                    //When post physical tax is marked, if line is a inventory line, tax should be posted
                    if (InventModelGroup::find(inventTable.modelGroupId()).PostPhysicalPurchase
                        && InventParameters::find().PostPhysicalTax)
                    {
                        ret = true;
                    }
                    break;

                default:
                    break;
            }
            return ret;
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return purchParmTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return purchParmTable.DocumentDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>