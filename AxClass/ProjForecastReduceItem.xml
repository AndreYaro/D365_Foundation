<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastReduceItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjForecastReduceItem extends ProjForecastReduce
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRemainingBudgetOnForecastModel</Name>
				<Source><![CDATA[
        public boolean checkRemainingBudgetOnForecastModel(ForecastModelId modelId)
    {
        return ForecastModel::checkRemainingBudget(modelId, ProjTransType::Item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructQuery</Name>
				<Source><![CDATA[
        protected Map constructQuery(container fieldList, ForecastModelId modelId, int lumpSum )
    {
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildDataSource    tempDataSource,tempDataSource2;
        int                     i,j;
        int                     currentField;
        int                     conLength;
        ForecastSales           forecastSales;
        Map                     mapForecast= new Map(Types::Container,Types::Enum);
        container               conParentProjects;
        str                     range;
        ProjParameters          projParameters;
        boolean                 checkCostTemplate=false;
        ProjControlId           controlId;
        ProjCostGroupId         costGroupId;

        conLength=conLen(fieldList);
        query=new Query();

        projParameters = ProjParameters::find();
        queryBuildDataSource = query.addDataSource(tableNum(ForecastSales));
        queryBuildDataSource.addRange(fieldNum(ForecastSales,ModelId)).value(modelId);
        //only reduce project's item forecast
        tempDataSource=queryBuildDataSource.addDataSource(tableNum(ProjTable));
        tempDataSource.fetchMode(JoinMode::InnerJoin);
        tempDataSource.relations(true);
        tempDataSource.addRange(fieldNum(ProjTable,ProjId)).value(SysQuery::valueNotEmptyString());

        if (lumpSum==1)
        {
            queryBuildDataSource.addRange(fieldNum(ForecastSales,ItemAllocateId)).value(strFmt('(%1=="%2") && (%1 != %3)',
                                          fieldStr(ForecastSales,ItemAllocateId),
                                          projParameters.ItemLumpSumAllocationKey,
                                          SysQuery::valueEmptyString()));
            queryBuildDataSource.addRange(fieldNum(ForecastSales,CostPrice)).value(SysQuery::valueNot(0));
        }
        else   //lumpsum=0
        {
            if ( projParameters.ItemLumpSumAllocationKey!='')
            {
                queryBuildDataSource.addRange(fieldNum(ForecastSales,ItemAllocateId)).value(SysQuery::valueNot(projParameters.ItemLumpSumAllocationKey));
            }

            // If the reduce forecast quantity is positive, we exclude forecasts with sales quantity = 0
            if (this.reduceForecastQty >= 0)
            {
                queryBuildDataSource.addRange(fieldNum(ForecastSales,SalesQty)).value(SysQuery::valueNot(0));
            }
        }

        for (i=1;i<= conLength;i++)
        {
            currentField=conPeek(fieldList,i);
            switch (currentField)
            {
                case ProjReduceCostPriority::Project:
                    queryBuildDataSource.addRange(fieldNum(ForecastSales,ProjId)).value(this.parmProjId());
                    break;

                case ProjReduceCostPriority::Category:
                    // if forecastSales.category is empty, treat as wildcard
                    queryBuildDataSource.addRange(fieldNum(ForecastSales,ProjCategoryId)).value(strFmt('(%1=="%2") || (%1 == "")',fieldStr(ForecastSales,ProjCategoryId),this.parmProjCategoryId()));
                    break;

                case ProjReduceCostPriority::EmployeeItem:
                    queryBuildDataSource.addRange(fieldNum(ForecastSales,ItemId)).value(strFmt('(%1=="%2") || (%1 == %3)',fieldStr(ForecastSales,ItemId),this.parmEmplItemId(),SysQuery::valueEmptyString()));
                    break;

                case ProjReduceCostPriority::ParentProject:
                    conParentProjects= ProjTable::ancestors(this.parmProjId());
                    conParentProjects +=this.parmProjId();
                    range='';
                    for (j=1; j<=conLen(conParentProjects); j++)
                    {
                        range+=strFmt('(%3.%1 =="%2")',fieldStr(ForecastSales, ProjId),conPeek(conParentProjects,j),query.dataSourceTable(tableNum(ForecastSales)).name());
                        if (j<conLen(conParentProjects))
                        {
                            range += '||';
                        }
                    }
                    queryBuildDataSource.addRange(fieldNum(ForecastSales,ProjId)).value(range);
                    break;

                case ProjReduceCostPriority::EstimateProject:
                    tempDataSource.addRange(fieldNum(ProjTable,wipProject)).value(strFmt('((%4.%1=="%2")&&(%4.%1!=%5))||(%4.%1=="%3")',
                    fieldStr(ProjTable,ProjId),this.parmEstimateProjId(),this.parmProjId(), query.dataSourceTable(tableNum(ProjTable)).name(),SysQuery::valueEmptyString()));
                    break;

                case ProjReduceCostPriority::ActivityNum:
                    queryBuildDataSource.addRange(fieldNum(ForecastSales,ActivityNumber)).value(this.parmProjActivityNumber()?this.parmProjActivityNumber():SysQuery::valueEmptyString());
                    break;

                case ProjReduceCostPriority::CategoryGroup:
                    tempDataSource2=queryBuildDataSource.addDataSource(tableNum(ProjCategory));
                    tempDataSource2.fetchMode(JoinMode::InnerJoin);
                    tempDataSource2.relations(true);
                    tempDataSource2.addRange(fieldNum(ProjCategory,CategoryGroupId)).value(this.parmProjCategoryGroupId());
                    break;

                case ProjReduceCostPriority::CostTemplateLine:
                    checkCostTemplate=true;
                    break;

                case ProjReduceCostPriority::ProjDate:
                    queryBuildDataSource.addRange(fieldNum(ForecastSales,StartDate)).value(queryRange('',this.parmProjDate()));
                    break;
            }
        }
        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            forecastSales=queryRun.get(tableNum(ForecastSales));
            if (checkCostTemplate&& this.parmProjCostGroupId() ) //Identify whether to skip this forecast
            {
                controlId=ProjWIPTable::find(ProjTable::find(forecastSales.ProjId).wipProject).ControlId;
                costGroupId='';
                if (!controlId)
                {
                    controlId=ProjParameters::find().CostTemplate;
                }

                if (controlId)
                {
                    costGroupId=ProjControlCategory::findCategoryGroup(controlId,forecastSales.ProjCategoryId);
                }

                if (costGroupId &&  costGroupId!=this.parmProjCostGroupId())
                {
                    continue;
                }
            }

            if (lumpSum) //lump sum reduce cost price
            {
                mapForecast.insert([forecastSales.ProjTransId,0,forecastSales.CostPrice],NoYes::Yes);
            }
            else //non lump sum reduce qty
            {
                mapForecast.insert([forecastSales.ProjTransId,forecastSales.SalesQty,forecastSales.costAmount()],NoYes::No);
            }
        }

        return mapForecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastMinus</Name>
				<Source><![CDATA[
        protected boolean forecastMinus(ProjTransIdBase _forecastTransId, ForecastModelId _modelId,Qty _qty,CostPrice _costPrice)
    {
        ForecastSales           forecastSales;
        ForecastModelId         modelId=_modelId;

        ttsbegin;

        super(_forecastTransId,_modelId, _qty, _costPrice);

        if (!_modelId)
        {
            modelId = ForecastSales::findProjTransId(_forecastTransId).ModelId;
        }

        select forupdate forecastSales
            where forecastSales.ProjTransId==_forecastTransId
            &&    forecastSales.ModelId ==modelId;
        if (forecastSales)
        {
            forecastSales.SalesQty = forecastSales.SalesQty- _qty;
            forecastSales.CostPrice = forecastSales.CostPrice-_costPrice;
            this.recalc(forecastSales);
            forecastSales.update();
        }
        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastPlus</Name>
				<Source><![CDATA[
        protected boolean forecastPlus(ProjTransIdBase _forecastTransId, ForecastModelId _modelId,Qty _qty,CostPrice _costPrice)
    {
        ForecastSales           forecastSales;
        boolean                 ret;
        ForecastModelId         modelId=_modelId;

        ttsbegin;

        if (!_modelId)
        {
            modelId=ForecastSales::findProjTransId(_forecastTransId).ModelId;
        }

        select forupdate forecastSales
            where forecastSales.ProjTransId == _forecastTransId
            &&    forecastSales.ModelId     == modelId;
        if (forecastSales)
        {
            forecastSales.SalesQty = forecastSales.SalesQty+ _qty;
            forecastSales.CostPrice = forecastSales.CostPrice+_costPrice;
            this.recalc(forecastSales);
            forecastSales.update();
            ret=true;
        }
        else //If the original forecast get deleted, it 's no longer recovered
        {
            ret=false;
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalc</Name>
				<Source><![CDATA[
        private void recalc(ForecastSales _forecastSales)
    {
        _forecastSales.modifiedField(fieldNum(ForecastSales, SalesQty));
        _forecastSales.Amount = _forecastSales.calcLineAmount();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>