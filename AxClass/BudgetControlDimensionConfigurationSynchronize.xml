<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlDimensionConfigurationSynchronize</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlDimensionConfigurationSynchronize</c> class is responsible for synchronizing changes to dimensions for budget control data.
/// </summary>
internal final class BudgetControlDimensionConfigurationSynchronize
{
    internal boolean synchronizeChangesDetected;
    internal BudgetControlLedgerDimensionTmp budgetControlLedgerDimensionTmp;

    private LedgerRecId primaryLedger;
    private TransDate fromDate;
    private TransDate toDate;
    private BudgetSourceTrackingStatus status;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateExistingSourceControlDetailsForTrackingDates</Name>
				<Source><![CDATA[
    private void populateExistingSourceControlDetailsForTrackingDates()
    {
        BudgetSourceTracking budgetSourceTracking;
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;

        ttsbegin;

        insert_recordset budgetControlLedgerDimensionTmp (BudgetSourceLedgerDimension, BudgetControlLedgerDimension)
        select BudgetSourceLedgerDimension, BudgetControlLedgerDimension
            from budgetSourceTrackingDetail
                group by BudgetControlLedgerDimension, BudgetSourceLedgerDimension
                where BudgetSourceTrackingDetail.PrimaryLedger == primaryLedger
            exists join budgetSourceTracking
                where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking
                    && budgetSourceTracking.Status == status
                    && budgetSourceTracking.TrackingDate >= fromDate
                    && budgetSourceTracking.TrackingDate <= toDate;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateExistingControlDetails</Name>
				<Source><![CDATA[
    private void populateExistingControlDetails()
    {
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;

        ttsbegin;

        insert_recordset budgetControlLedgerDimensionTmp (BudgetControlLedgerDimension)
            select BudgetControlLedgerDimension from budgetSourceTrackingDetail
                group by BudgetControlLedgerDimension
                where BudgetSourceTrackingDetail.PrimaryLedger == primaryLedger;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineConfigurationChangeLedgerDimensions</Name>
				<Source><![CDATA[
    private void determineConfigurationChangeLedgerDimensions()
    {
        ttsbegin;

        while select forupdate * from budgetControlLedgerDimensionTmp
        {
            LedgerDimensionBudgetControl controlLedgerDimension = BudgetControlLedgerDimensionHelper::findBudgetControlLedgerDimension(primaryLedger, budgetControlLedgerDimensionTmp.BudgetSourceLedgerDimension);

            if (controlLedgerDimension != budgetControlLedgerDimensionTmp.BudgetControlLedgerDimension)
            {
                budgetControlLedgerDimensionTmp.ReplacementControlLedgerDimension = controlLedgerDimension;
                budgetControlLedgerDimensionTmp.update();

                synchronizeChangesDetected = true;
            }
        }

        delete_from budgetControlLedgerDimensionTmp
            where budgetControlLedgerDimensionTmp.ReplacementControlLedgerDimension == 0;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineHashChangeLedgerDimensions</Name>
				<Source><![CDATA[
    private void determineHashChangeLedgerDimensions()
    {
        ttsbegin;

        while select forupdate * from budgetControlLedgerDimensionTmp
        {
            var controlLedgerDimension = BudgetControlLedgerDimensionHelper::findBudgetControlLedgerDimension(
                primaryLedger, budgetControlLedgerDimensionTmp.BudgetControlLedgerDimension);

            if (controlLedgerDimension != budgetControlLedgerDimensionTmp.BudgetControlLedgerDimension
                && LedgerDimensionFacade::areEqual(controlLedgerDimension, budgetControlLedgerDimensionTmp.BudgetControlLedgerDimension))
            {
                budgetControlLedgerDimensionTmp.ReplacementControlLedgerDimension = controlLedgerDimension;
                budgetControlLedgerDimensionTmp.update();

                synchronizeChangesDetected = true;
            }
        }

        delete_from budgetControlLedgerDimensionTmp
            where budgetControlLedgerDimensionTmp.ReplacementControlLedgerDimension == 0;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findConfigurationChangeDifferences</Name>
				<Source><![CDATA[
    internal void findConfigurationChangeDifferences()
    {
        this.populateExistingSourceControlDetailsForTrackingDates();
        this.determineConfigurationChangeLedgerDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDimensionHashDifferences</Name>
				<Source><![CDATA[
    internal void determineDimensionHashDifferences()
    {
        this.populateExistingControlDetails();
        this.determineHashChangeLedgerDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllControlLedgerDimensionReferences</Name>
				<Source><![CDATA[
    internal void updateAllControlLedgerDimensionReferences()
    {
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;

        ttsbegin;

        update_recordset budgetSourceTrackingDetail
            setting BudgetControlLedgerDimension = budgetControlLedgerDimensionTmp.ReplacementControlLedgerDimension
            where budgetSourceTrackingDetail.PrimaryLedger == primaryLedger
            join budgetControlLedgerDimensionTmp
                where budgetControlLedgerDimensionTmp.BudgetControlLedgerDimension == budgetSourceTrackingDetail.BudgetControlLedgerDimension;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(TransDate _fromDate, TransDate _toDate, BudgetSourceTrackingStatus _status)
    {
        this.primaryLedger = Ledger::current();
        this.fromDate = _fromDate;
        this.toDate = _toDate;
        this.status = _status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForConfigurationChange</Name>
				<Source><![CDATA[
    internal static BudgetControlDimensionConfigurationSynchronize constructForConfigurationChange(TransDate _fromDate, TransDate _toDate, BudgetSourceTrackingStatus _status)
    {
        var configurationSynchronize = new BudgetControlDimensionConfigurationSynchronize();
        configurationSynchronize.initialize(_fromDate, _toDate, _status);

        return configurationSynchronize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForHashChange</Name>
				<Source><![CDATA[
    internal static BudgetControlDimensionConfigurationSynchronize constructForHashChange()
    {
        return BudgetControlDimensionConfigurationSynchronize::constructForConfigurationChange(dateNull(), dateMax(), BudgetSourceTrackingStatus::Confirmed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerDimensionReferences</Name>
				<Source><![CDATA[
    internal static void updateLedgerDimensionReferences(BudgetControlLedgerDimensionTmp _ledgerDimensionTmp)
    {
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;
        BudgetControlLedgerDimensionTmp updateLedgerDimensionTmp;
        updateLedgerDimensionTmp.linkPhysicalTableInstance(_ledgerDimensionTmp);

        ttsbegin;

        update_recordset budgetSourceTrackingDetail
            setting BudgetControlLedgerDimension = updateLedgerDimensionTmp.ReplacementControlLedgerDimension
            join updateLedgerDimensionTmp
                where updateLedgerDimensionTmp.BudgetControlLedgerDimension == budgetSourceTrackingDetail.BudgetControlLedgerDimension
                    && updateLedgerDimensionTmp.BudgetSourceLedgerDimension == budgetSourceTrackingDetail.BudgetSourceLedgerDimension;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>