<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceBatchJobInitialPush</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceBatchJobInitialPush extends RunBaseBatch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBatch</Name>
				<Source><![CDATA[
    public void initBatch(Batch batch)
    {
        super(batch);

        batch.retriesOnFailure = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run()
    {
        boolean ifReturnDirectly = false;
        ttsbegin;
        InventoryServiceStatus serviceStatus = InventInventoryDataServiceParameters::findWithPessimisticLock().InventoryServiceStatus;
        if (serviceStatus == InventoryServiceStatus::Disabling)
        {
            this.deleteRelatedQueues();
            InventInventoryDataServiceParameters::updateInventoryServiceStatus(InventoryServiceStatus::Disabled);
            ifReturnDirectly = true;
        }
        ttscommit;

        if (ifReturnDirectly)
        {
            return;
        }

        try
        {
            InventInventoryDataServiceBatchJobInitialPush::performInitialPush();
        }
        catch
        {
            ttsbegin;
            InventInventoryDataServiceParameters::updateInventoryServiceStatus(InventoryServiceStatus::Disabled);
            ttscommit;
            throw;
        }

        ttsbegin;
        serviceStatus = InventInventoryDataServiceParameters::findWithPessimisticLock().InventoryServiceStatus;

        if (serviceStatus == InventoryServiceStatus::Enabling)
        {
            InventInventoryDataServiceBatchJobScheduler::scheduleJob();
        }
        else if (serviceStatus == InventoryServiceStatus::Disabling)
        {
            this.deleteRelatedQueues();
            InventInventoryDataServiceParameters::updateInventoryServiceStatus(InventoryServiceStatus::Disabled);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventInventoryDataServiceBatchJobInitialPush construct()
    {
        return new InventInventoryDataServiceBatchJobInitialPush();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    internal static ClassDescription description()
    {
        return "@SCM:InventoryServiceInitialPushBatchJobDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        if (InventUseDimOfInventSumToggle::instance().isEnabled() && InventUseDimOfInventSumDeltaToggle::instance().isEnabled())
        {
            InventInventoryDataServiceParameters inventoryServiceParameters = InventInventoryDataServiceParameters::find();

            var serviceHealthChecker = new InventoryServiceServiceHealthChecker();

            var isEndpointValid = inventoryServiceParameters.RecId && inventoryServiceParameters.InventoryServiceEndpoint != '' && serviceHealthChecker.checkHealth(inventoryServiceParameters.InventoryServiceEndpoint);

            if (!isEndpointValid)
            {
                var result = serviceHealthChecker.getServiceEndpoint();
                var endpoint = conPeek(result, 1);
                var errorMesg = conPeek(result, 2);

                if (errorMesg != '')
                {
                    error(errorMesg);
                }
                else
                {
                    if (endpoint != '')
                    {
                        isEndpointValid = serviceHealthChecker.upsertEndpoint(endpoint, "@SCM:InventoryServiceEndpointIsNotSetProperlyAndAskForAutoFillInEndpointDialog");
                        
                        if (isEndpointValid)
                        {
                            inventoryServiceParameters = InventInventoryDataServiceParameters::find();
                        }
                    }
                    else
                    {
                        error("@SCM:InventoryServiceEndpointIsNotSetProperlyAndCanNotBeGetAutomaticallyErrorMessage");
                    }
                }
            }

            if (isEndpointValid)
            {
                if (inventoryServiceParameters.InventoryServiceStatus == InventoryServiceStatus::Disabled)
                {
                    if (InventIVCheckConfigBeforeInitialPushFlight::instance().isEnabled())
                    {
                        var ivConfigReader = new InventoryServiceConfigReader();

                        ivConfigReader.validateInitialPush();
                    }

                    if (Box::yesNo("@SCM:InventoryServiceEnableDialog", DialogButton::No) == DialogButton::Yes)
                    {
                        InventInventoryDataServiceBatchJobInitialPush initialPushBatchJob = InventInventoryDataServiceBatchJobInitialPush::construct();

                        ttsbegin;
                        InventInventoryDataServiceParameters::updateInventoryServiceStatus(InventoryServiceStatus::Enabling);
                        ttscommit;
                    
                        InventInventoryDataServiceBatchJobHelper::researchDataSources(args);
                    
                        initialPushBatchJob.batchInfo().parmBatchExecute(NoYes::Yes);
                        initialPushBatchJob.doBatch();
                    }
                }
                else
                {
                    InventInventoryDataServiceBatchJobHelper::researchDataSources(args);
                    error("@SCM:InventoryServiceBatchJobErrorMessage");
                }
            }
        }
        else
        {
            error("@SCM:InventoryServiceInventSumDenormalizationErrorMessage");
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>performInitialPush</Name>
				<Source><![CDATA[
    internal static void performInitialPush()
    {
        InventSum inventSum;
        InventInventoryDataServiceInventSumQueue inventSumQueue;

        WHSInventReserve whsInventReserve;
        InventInventoryDataServiceWHSQueue whsInventReserveQueue;
        InventInventoryDataServiceParameters inventoryServiceParameters = InventInventoryDataServiceParameters::find();
        boolean isReservationOffsetEnabled = InventInventoryDataServiceSoftReservationHelper::isOffsetEnabled(inventoryServiceParameters);
        boolean isWHSItemEnabled = FeatureStateProvider::IsFeatureEnabled(InventInventoryDataServiceWHSFeature::instance()) &&
                                   inventoryServiceParameters.IsWHSItemEnabled;

        InventInstrumentationLogger logger = InventInstrumentationLogger::CreateLogger(classStr(InventInventoryDataServiceBatchJobInitialPush));
        var inventInventoryDataServiceInstrumentationActivity = logger.getInventoryDataServiceActivity();

        if (inventoryServiceParameters.ResyncBeforeInitialPush)
        {
            using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_PostResyncJobToInventoryService())
            {
                var isSuccess = InventInventoryDataServiceResyncJobHelper::postResyncJob();
                if (!isSuccess)
                {
                    logger.logInformation("Failed to post resync job, please search resync job related logs in IV service side.");
                    throw error("@SCM:InventoryServiceFailedtoPostResyncJobErrorMessage");
                }
                else
                {
                    logger.logInformation("Post resync job success.");
                    ttsbegin;
                    InventInventoryDataServiceParameters::updateResyncJobStatus(InventoryServiceResyncJobStatus::Completed, '');
                    ttscommit;
                }
            }
        }

        whsInventReserveQueue.skipDataMethods(true);
        whsInventReserveQueue.skipDatabaseLog(true);
        whsInventReserveQueue.skipEvents(true);

        inventSumQueue.skipDataMethods(true);
        inventSumQueue.skipDatabaseLog(true);
        inventSumQueue.skipEvents(true);
        ttsbegin;
        if (!isReservationOffsetEnabled && InventUseDimOfInventSumToggle::instance().isEnabled() && InventIVQueueGroupByCachePartitionFlight::instance().isEnabled())
        {
            insert_recordset inventSumQueue (ItemId, InventDimId, CachePartitionId_IV, Company)
                select crosscompany ItemId, InventDimId, InventLocationId, DataAreaId
                    from inventSum
                    group by InventLocationId, ItemId, InventDimId, DataAreaId
                    where inventSum.ClosedQty == 0;
        }
        else
        {
            insert_recordset inventSumQueue (ItemId, InventDimId, Company)
                select crosscompany ItemId, InventDimId, DataAreaId
                    from inventSum
                    group by ItemId, InventDimId, DataAreaId
                    where inventSum.ClosedQty == 0;
        }

        if (isWHSItemEnabled)
        {
            insert_recordset whsInventReserveQueue (ItemId, InventDimId, Company)
                select crosscompany ItemId, InventDimId, DataAreaId
                    from whsInventReserve
                    group by ItemId, InventDimId, DataAreaId; 
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRelatedQueues</Name>
				<Source><![CDATA[
    private void deleteRelatedQueues()
    {
        InventInventoryDataServiceInventSumQueue::truncate();
        InventInventoryDataServiceInventSumQueueBackup::truncate();
        InventInventoryDataServiceReservationQueue::truncate();
        InventInventoryDataServiceReservationQueueBackup::truncate();
        InventInventoryDataServiceWHSQueue::truncate();
        InventInventoryDataServiceWHSQueueBackup::truncate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>