<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCommitmentBalanceSummaryCalc_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PurchCommitmentBalanceSummaryCalc_PSN</c> class is used for calculating the balance summary amounts for a commitment.
/// </summary>
class PurchCommitmentBalanceSummaryCalc_PSN
{
    PurchLineAmount             totalAvailable,
                                totalRelievedAmount,
                                draftIncreases,
                                draftDecreases,
                                reservedCommitment,
                                totalCommitment,
                                confirmedPurchaseOrderAmount,
                                unconfirmedPurchaseOrderAmount,
                                totalPurchaseOrderAmount;
    PurchCommitmentLine_PSN     purchCommitmentLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateBudgetRelatedAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculate the amounts related to budget source using the <c>BudgetSourceInquiryDetails</c> API.
    /// </summary>
    /// <remarks>
    ///     The calculated values are stored in class variables.
    /// </remarks>
    private void calculateBudgetRelatedAmounts()
    {
        BudgetSourceInquiryDetails    currentBudgetDetails;
        PurchCommitmentHeader_PSN     purchCommitmentHeader         = purchCommitmentLine.getPurchCommitmentHeader_PSN();
        PurchCommitmentLine_PSN       purchCommitmentLineLocal;
        SourceDocumentLine            sourceDocumentLine;
        PurchLineAmount               consumedAmountFromDistributions;  

        if (purchCommitmentHeader.DocumentStatus    == PurchCommitmentDocumentStatus_PSN::Complete
            || purchCommitmentHeader.DocumentStatus == PurchCommitmentDocumentStatus_PSN::Closed)
        {
            sourceDocumentLine = SourceDocumentLine::find(purchCommitmentLine.SourceDocumentLine);
            
            if (sourceDocumentLine.AccountingStatus != SourceDocumentLineAccountingStatus::Finalized)
            {
                if (purchCommitmentLine.LineAmount == 0)
                {
                    purchCommitmentLineLocal = PurchCommitmentLine_PSN::find(purchCommitmentLine.RecId);
                    reservedCommitment = purchCommitmentLineLocal.LineAmount;
                }
                else
                {
                    reservedCommitment = purchCommitmentLine.LineAmount;
                }
            }
            else
            {
                reservedCommitment = 0;
            }
        }
        else if (purchCommitmentHeader.DocumentStatus == PurchCommitmentDocumentStatus_PSN::UnderRevision)
        {
            if (purchCommitmentLine.OriginalAmount == 0)
            {
                purchCommitmentLineLocal = PurchCommitmentLine_PSN::find(purchCommitmentLine.RecId);
                reservedCommitment = purchCommitmentLineLocal.OriginalAmount;
            }
            else
            {
                reservedCommitment = purchCommitmentLine.OriginalAmount;
            }
        }
        
        currentBudgetDetails = BudgetSourceSourceDocumentLine::getBudgetSourceInquiryDetails(SourceDocumentLine::find(purchCommitmentLine.SourceDocumentLine));

        if (currentBudgetDetails != null)
        {
            currentBudgetDetails.resetCurrent();

            while (currentBudgetDetails.next())
            {
                totalRelievedAmount += (currentBudgetDetails.currentAmountRelieved() * -1);
            }
        }

        if (purchCommitmentHeader.DocumentStatus    == PurchCommitmentDocumentStatus_PSN::UnderRevision
            || sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Finalized)
        {
            totalAvailable = 0;
        }
        else
        {
            consumedAmountFromDistributions = purchCommitmentLine.getConsumedAmountFromDistributions();

            if (totalRelievedAmount > consumedAmountFromDistributions)
            {
                // The total relieved amount can be greater than the consumedAmountFromDistributions 
                // if an associated PO was confirmed and then modified to a lower amount.
                totalAvailable = reservedCommitment - totalRelievedAmount;
            }
            else
            {
                totalAvailable = reservedCommitment - consumedAmountFromDistributions;
            }                
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDraftDecreases</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the draft decreases amount for a commitment line.
    /// </summary>
    /// <remarks>
    ///     The calculated values are stored in class variables.
    /// </remarks>
    private void calculateDraftDecreases()
    {
        if (purchCommitmentLine.DraftAmount < 0)
        {
            draftDecreases = purchCommitmentLine.DraftAmount * -1.0;
        }
        else
        {
            draftDecreases = 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDraftIncreases</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the draft increases amount for a commitment line.
    /// </summary>
    /// <remarks>
    ///     The calculated values are stored in class variables.
    /// </remarks>
    private void calculateDraftIncreases()
    {
        if (purchCommitmentLine.DraftAmount > 0)
        {
            draftIncreases = purchCommitmentLine.DraftAmount;
        }
        else
        {
            draftIncreases = 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionNumberMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gathers the maximum accounting distribution number for each source document that references the passed in 
    /// Commitment <c>SourceDocumentLineRecId</c> value.
    /// </summary>
    /// <param name = "_sourceDocumentLineRecId">
    /// The <c>SourceDocumentLineRecId</c> value of the Commitment.
    /// </param>
    /// <returns>
    /// A <c>Map</c> object that contains the <c>SourceDocumentLineRecId</c> value of the referencing document and its maximum number value.
    /// </returns>
    private Map getDistributionNumberMap(SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        Map distributionNumberMap = new Map(Types::Int64, Types::Integer);
        AccountingDistributionNumber distNum;

        PurchLine purchLine;
        while select SourceDocumentLine from purchLine
            where purchLine.PurchCommitmentLine_PSN == purchCommitmentLine.RecId
        {
            distNum = AccountingDistribution::getMaxAccountingDistributionNumber(purchLine.SourceDocumentLine);
            distributionNumberMap.insert(purchLine.SourceDocumentLine, distNum);
        }

        return distributionNumberMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePurchaseOrderAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculate the confirmed and unconfirmed purchase order amounts for a commitment document.
    /// </summary>
    /// <remarks>
    ///     The calculated values are stored in class variables.
    /// </remarks>
    private void calculatePurchaseOrderAmounts()
    {
        AccountingDistribution summingDistribution;
        AccountingDistribution currentDistribution;
        AccountingDistribution accountingDistributionParent;
        AccountingDistribution sourceDocumentLineDistribution;
        SourceDocumentLine summingSourceDocumentLine;
        AccountingDistributionTmpSum_PSN confirmedAccountingDistributionSum;
        AccountingDistributionTmpSum_PSN unconfirmedAccountingDistribution;
        Map distributionNumberMap;
        
        sourceDocumentLineDistribution = purchCommitmentLine.getAccountingDistribution();

        distributionNumberMap = this.getDistributionNumberMap(sourceDocumentLineDistribution.SourceDocumentLine);

        // Fill the confirmed and unconfirmed temp tables with distributions to calculate.
        while select currentDistribution
            where currentDistribution.SourceDocumentLine == sourceDocumentLineDistribution.SourceDocumentLine
        join ParentDistribution, TransactionCurrency, AccountingLegalEntity, AccountingDate, TransactionCurrencyAmount, Number from summingDistribution
            where summingDistribution.ReferenceDistribution == currentDistribution.RecId
            && summingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching
        join RecId, AccountingStatus from summingSourceDocumentLine
            where summingSourceDocumentLine.RecId == summingDistribution.SourceDocumentLine
        outer join RecId, Number from accountingDistributionParent
            where accountingDistributionParent.RecId == summingDistribution.ParentDistribution
        {
            SourceDocumentLine sourceDocumentLineParent = SourceDocumentLine::findTopParentSourceDocumentLine(summingSourceDocumentLine.RecId);
            
            AccountingDistributionNumber accountingDistributionNumber = accountingDistributionParent.RecId == 0
                ? summingDistribution.Number
                : accountingDistributionParent.Number;

            AccountingDistributionNumber accountingDistributionNumberCurrent;
            if (distributionNumberMap.exists(sourceDocumentLineParent.RecId))
            {
                accountingDistributionNumberCurrent = distributionNumberMap.lookup(sourceDocumentLineParent.RecId);
            }
            
            if ((sourceDocumentLineParent.SourceRelationType == tableNum(PurchLine))
                && (accountingDistributionNumber == accountingDistributionNumberCurrent))
            {
                if (summingSourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Completed
                    || summingSourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Finalized)
                {
                    confirmedAccountingDistributionSum.clear();
                    confirmedAccountingDistributionSum.AccountingDate = summingDistribution.AccountingDate;
                    confirmedAccountingDistributionSum.AccountingLegalEntity = summingDistribution.AccountingLegalEntity;
                    confirmedAccountingDistributionSum.TransactionCurrency = summingDistribution.TransactionCurrency;
                    confirmedAccountingDistributionSum.TransactionCurrencyAmount = summingDistribution.TransactionCurrencyAmount;
                    confirmedAccountingDistributionSum.topParentSourceDocumentLine = SourceDocumentLine::findTopParentSourceDocumentLine(summingSourceDocumentLine.RecId).RecId;
                    confirmedAccountingDistributionSum.insert();
                }
                else if (summingSourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Draft
                    || summingSourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed
                    || summingSourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::PartlyDistributed)
                {
                    unconfirmedAccountingDistribution.clear();
                    unconfirmedAccountingDistribution.AccountingDate = summingDistribution.AccountingDate;
                    unconfirmedAccountingDistribution.AccountingLegalEntity = summingDistribution.AccountingLegalEntity;
                    unconfirmedAccountingDistribution.TransactionCurrency = summingDistribution.TransactionCurrency;
                    unconfirmedAccountingDistribution.TransactionCurrencyAmount = summingDistribution.TransactionCurrencyAmount;
                    unconfirmedAccountingDistribution.topParentSourceDocumentLine = SourceDocumentLine::findTopParentSourceDocumentLine(summingSourceDocumentLine.RecId).RecId;
                    unconfirmedAccountingDistribution.insert();
                }
            }
        }

        // Perform actual calculations using the correct groupings.
        while select TransactionCurrency, AccountingLegalEntity, AccountingDate, sum(TransactionCurrencyAmount) from confirmedAccountingDistributionSum
            group by TransactionCurrency, AccountingLegalEntity, AccountingDate, TopParentSourceDocumentLine
        {
            confirmedPurchaseOrderAmount += confirmedAccountingDistributionSum.transactionAmountInBudgetingCurrency();
        }

        while select TransactionCurrency, AccountingLegalEntity, AccountingDate, sum(TransactionCurrencyAmount) from unconfirmedAccountingDistribution
            group by TransactionCurrency, AccountingLegalEntity, AccountingDate, TopParentSourceDocumentLine
        {
            unconfirmedPurchaseOrderAmount += unconfirmedAccountingDistribution.transactionAmountInBudgetingCurrency();
        }

        // Return the final amount.
        totalPurchaseOrderAmount = confirmedPurchaseOrderAmount + unconfirmedPurchaseOrderAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetRelatedAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the total invoiced, total available and reserved commitment amounts for a commitment line.
    /// </summary>
    /// <returns>
    ///     A container with the total invoiced, total available and reserved commitment amounts.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getBudgetRelatedAmounts()
    {
        this.calculateBudgetRelatedAmounts();

        return [totalRelievedAmount, reservedCommitment, totalAvailable];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDraftAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the draft increases and draft decreases for a commitment line.
    /// </summary>
    /// <returns>
    ///     A container with the draft increases and draft decreases amounts.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getDraftAmounts()
    {
        this.calculateDraftIncreases();
        this.calculateDraftDecreases();

        return [draftIncreases, draftDecreases];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchaseOrderAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the total purchase order, confirmed purchase order and unconfirmed purchase order amounts for a commitment line.
    /// </summary>
    /// <returns>
    ///     A container with the total purchase order, confirmed purchase order and unconfirmed purchase order amounts.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getPurchaseOrderAmounts()
    {
        this.calculatePurchaseOrderAmounts();

        return [totalPurchaseOrderAmount, confirmedPurchaseOrderAmount, unconfirmedPurchaseOrderAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets all the instance variables used for storing commitment balance summary amounts to zero.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initialize()
    {
        purchCommitmentLine.clear();
        totalAvailable = 0.0;
        totalRelievedAmount = 0.0;
        draftIncreases = 0.0;
        draftDecreases = 0.0;
        reservedCommitment = 0.0;
        totalCommitment = 0.0;
        confirmedPurchaseOrderAmount = 0.0;
        unconfirmedPurchaseOrderAmount = 0.0;
        totalPurchaseOrderAmount = 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchCommitmentLine</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public PurchCommitmentLine_PSN parmPurchCommitmentLine(PurchCommitmentLine_PSN _purchCommitmentLine = purchCommitmentLine)
    {
        purchCommitmentLine = _purchCommitmentLine;

        return purchCommitmentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates and initializes an instance of the <c>PurchCommitmentBalanceSummaryCalc_PSN</c> class.
    /// </summary>
    /// <returns>
    ///     An instance of the <c>PurchCommitmentBalanceSummaryCalc_PSN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PurchCommitmentBalanceSummaryCalc_PSN construct()
    {
        PurchCommitmentBalanceSummaryCalc_PSN balanceSummary;

        balanceSummary = new PurchCommitmentBalanceSummaryCalc_PSN();

        balanceSummary.initialize();

        return balanceSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalancesForBalanceSummaryForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets all the amounts required for displaying on the commitments balance summary form.
    /// </summary>
    /// <param name="_purchCommitmentLine">
    ///     An instance of the <c>PurchCommitmentLine</c> for which the balances are to be returned.
    /// </param>
    /// <returns>
    ///     A buffer of the <c>PurchCommitmentLineTmpBalanceSummary_PSN</c> in-memory table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PurchCommitmentLineTmpBalanceSummary_PSN getBalancesForBalanceSummaryForm(PurchCommitmentLine_PSN _purchCommitmentLine)
    {
        PurchLineAmount totalAvailable;
        PurchLineAmount totalRelievedAmount;
        PurchLineAmount draftIncreases;
        PurchLineAmount draftDecreases;
        PurchLineAmount reservedCommitment;
        PurchLineAmount confirmedPurchaseOrderAmount;
        PurchLineAmount unconfirmedPurchaseOrderAmount;
        PurchLineAmount totalPOAmount;

        PurchCommitmentBalanceSummaryCalc_PSN balanceSummaryCalculate;
        PurchCommitmentLineTmpBalanceSummary_PSN balanceSummary;

        balanceSummaryCalculate = PurchCommitmentBalanceSummaryCalc_PSN::construct();
        balanceSummaryCalculate.parmPurchCommitmentLine(_purchCommitmentLine);

        [draftIncreases, draftDecreases] = balanceSummaryCalculate.getDraftAmounts();
        [totalPOAmount, confirmedPurchaseOrderAmount, unconfirmedPurchaseOrderAmount] = balanceSummaryCalculate.getPurchaseOrderAmounts();
        [totalRelievedAmount, reservedCommitment, totalAvailable] = balanceSummaryCalculate.getBudgetRelatedAmounts();

        balanceSummary.clear();
        balanceSummary.PurchCommitmentLine_PSN = _purchCommitmentLine.RecId;
        balanceSummary.LedgerDimension = balanceSummaryCalculate.parmPurchCommitmentLine().LedgerDimension;
        balanceSummary.DraftDecreasesAmount = draftDecreases;
        balanceSummary.DraftIncreasesAmount = draftIncreases;
        balanceSummary.TotalPurchaseOrderAmount = totalPOAmount;
        balanceSummary.ConfirmedPurchaseOrderAmount = confirmedPurchaseOrderAmount;
        balanceSummary.UnconfirmedPurchaseOrderAmount = unconfirmedPurchaseOrderAmount;
        balanceSummary.TotalRelievedAmount = totalRelievedAmount;
        balanceSummary.ReservedCommitmentsAmount = reservedCommitment;
        balanceSummary.AvailableBalance = totalAvailable;
        balanceSummary.TotalCommitmentAmount = reservedCommitment + draftIncreases - draftDecreases;

        balanceSummary.insert();

        return balanceSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetSourceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the sum of all amounts of a budget source for a given source document line.
    /// </summary>
    /// <param name="_sourceDocumentLineId">
    ///     The source document line <c>RefRecId</c> for which the amounts are to be returned.
    /// </param>
    /// <param name="_allowDraft">
    ///     A boolean specifying if the draft budget reservations should be returned.
    /// </param>
    /// <returns>
    ///     A budget source amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Amount getBudgetSourceAmount(RefRecId _sourceDocumentLineId, boolean _allowDraft = true)
    {
        BudgetSource budgetSource;
        BudgetSourceTracking budgetSourceTracking;
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;

        select sum(AccountingCurrencyAmount) from budgetSourceTrackingDetail
            join RecId, Status from budgetSourceTracking
                where budgetSourceTrackingDetail.BudgetSourceTracking == budgetSourceTracking.RecId
                    && (_allowDraft || budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed)
            join RecId from budgetSource
                where budgetSourceTracking.BudgetSource == budgetSource.RecId
                    && budgetSource.SourceDocumentLine == _sourceDocumentLineId;

        return budgetSourceTrackingDetail.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>