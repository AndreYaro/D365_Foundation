<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkLineManualReallocatorProdPick</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkLineManualReallocatorProdPick</c> class is responsible for manually reallocating a production picking work line.
/// </summary>
[
    WHSWorkLineReallocatorAttribute(WHSWorkTransType::ProdPick)
]
public class WHSWorkLineManualReallocatorProdPick extends WHSWorkLineManualReallocatorBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSWorkLineManualReallocatorProdPick construct()
    {
        return new WHSWorkLineManualReallocatorProdPick();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reallocateWorkLine</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the reallocateWorkLineHandlingQty method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public InventQty reallocateWorkLine(WMSLocationId _locationId = '', InventQty _inventQtyToReallocate = 0)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId());

        return this.reallocateWorkLineHandlingQuantity(_locationId, _inventQtyToReallocate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reallocateWorkLineHandlingQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventHandlingQty reallocateWorkLineHandlingQty(WMSLocationId _locationId = '', InventHandlingQty _inventHandlingQtyToReallocate = 0)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId()))
        {
            return this.reallocateWorkLineHandlingQuantity(_locationId, _inventHandlingQtyToReallocate);
        }
        
        return this.reallocateWorkLine(_locationId, _inventHandlingQtyToReallocate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reallocateWorkLineHandlingQuantity</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected InventHandlingQty reallocateWorkLineHandlingQuantity(WMSLocationId _locationId, InventHandlingQty _inventHandlingQtyToReallocate)
    {
        super(_locationId, _inventHandlingQtyToReallocate);

        WHSProdBOMPool::adjustWavedHandlingQty(workLineToReallocate.InventTransId, reallocatedInventHandlingQty);

        return reallocatedInventHandlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyAvailForWorkCreationAboveLocationDims</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the calculateHandlingQtyAvailForWorkCreationAboveLocationDims method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public InventQty calculateQtyAvailForWorkCreationAboveLocationDims()
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId());

        return this.calculateHandlingQuantityAvailForWorkCreationAboveLocationDims();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateHandlingQtyAvailForWorkCreationAboveLocationDims</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventHandlingQty calculateHandlingQtyAvailForWorkCreationAboveLocationDims()
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId()))
        {
            return this.calculateHandlingQuantityAvailForWorkCreationAboveLocationDims();
        }

        return this.calculateQtyAvailForWorkCreationAboveLocationDims();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateHandlingQuantityAvailForWorkCreationAboveLocationDims</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected InventHandlingQty calculateHandlingQuantityAvailForWorkCreationAboveLocationDims()
    {
        InventQty inventQtyPhysicallyReserved = WHSInvent::calculateCommittedHandlingQuantity(workLineToReallocate.InventTransId, workLineToReallocate.inventDim().inventDimId);
        WHSProdBOMPool prodBOMPool = WHSProdBOMPool::find(workLineToReallocate.InventTransId);

        InventQty inventQtyOnDemand = inventQtyPhysicallyReserved - prodBOMPool.WavedQty;
        InventHandlingQty inventQtyLeftToWave = WHSPoolProdBOM::newStandard(prodBOMPool).handlingQtyLeftToWave();

        return min(inventQtyLeftToWave, inventQtyOnDemand);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>