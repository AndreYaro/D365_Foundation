<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookStructVATAmounts_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class BookStructVATAmounts_RU
{
    Amount  amountInclVAT;

    Amount  amountLiableToVAT20;
    Amount  taxAmountVAT20;

    Amount  amountLiableToVAT10;
    Amount  taxAmountVAT10;

    Amount  amountLiableToVAT0;

    Amount  amountNotLiableToVAT;
    boolean isGroupBy;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        amountInclVAT,
        amountLiableToVAT20,
        taxAmountVAT20,
        amountLiableToVAT10,
        taxAmountVAT10,
        amountLiableToVAT0,
        amountNotLiableToVAT,
        isGroupBy
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAmounts2</Name>
				<Source><![CDATA[
        public void addAmounts2(BookStructVATAmounts_RU _structAmounts)
    {
        amountInclVAT        += _structAmounts.amountInclVAT();

        amountLiableToVAT20  += _structAmounts.amountLiableToVAT20();
        taxAmountVAT20       += _structAmounts.taxAmountVAT20();

        amountLiableToVAT10  += _structAmounts.amountLiableToVAT10();
        taxAmountVAT10       += _structAmounts.taxAmountVAT10();

        amountLiableToVAT0   += _structAmounts.amountLiableToVAT0();

        amountNotLiableToVAT += _structAmounts.amountNotLiableToVAT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSmallAmounts</Name>
				<Source><![CDATA[
        public void addSmallAmounts(TaxCode        _taxCode,
                                AmountMST      _amountInclVAT,
                                TaxBase        _taxBaseAmount,
                                TaxAmount      _taxAmount)
    {
        amountInclVAT += _amountInclVAT;

        if ( ! _taxCode)
        {
            amountNotLiableToVAT += _taxBaseAmount;
        }
        else
        {
            switch (this.taxType(_taxCode))
            {
                case TaxType_W::VAT :
                    amountLiableToVAT20 += _taxBaseAmount;
                    taxAmountVAT20      += _taxAmount;
                    break;

                case TaxType_W::VATReduced :
                    amountLiableToVAT10 += _taxBaseAmount;
                    taxAmountVAT10      += _taxAmount;
                    break;

                case TaxType_W::VATZero :
                    amountLiableToVAT0 += _taxBaseAmount;
                    break;

                default :
                    amountNotLiableToVAT += _taxBaseAmount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSmallAmounts2</Name>
				<Source><![CDATA[
        public void addSmallAmounts2(TaxCode                       _taxCode,
                                 BookStructSmallVATAmounts_RU  _structAmounts)
    {
        amountInclVAT += _structAmounts.amountInclVAT();

        if ( ! _taxCode)
        {
            amountNotLiableToVAT += _structAmounts.amountLiableToVAT();
        }
        else
        {
            switch (this.taxType(_taxCode))
            {
                case TaxType_W::VAT :
                    amountLiableToVAT20 += _structAmounts.amountLiableToVAT();
                    taxAmountVAT20      += _structAmounts.taxAmountVAT();
                    break;

                case TaxType_W::VATReduced :
                    amountLiableToVAT10 += _structAmounts.amountLiableToVAT();
                    taxAmountVAT10      += _structAmounts.taxAmountVAT();
                    break;

                case TaxType_W::VATZero :
                    amountLiableToVAT0 += _structAmounts.amountLiableToVAT();
                    break;

                default :
                    amountNotLiableToVAT += _structAmounts.amountLiableToVAT();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountInclVAT</Name>
				<Source><![CDATA[
        public Amount amountInclVAT(Amount _amountInclVAT = amountInclVAT)
    {
        amountInclVAT = _amountInclVAT;
        return amountInclVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountLiableToVAT0</Name>
				<Source><![CDATA[
        public Amount  amountLiableToVAT0(Amount _amountLiableToVAT0 = amountLiableToVAT0)
    {
        amountLiableToVAT0 = _amountLiableToVAT0;
        return amountLiableToVAT0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountLiableToVAT10</Name>
				<Source><![CDATA[
        public Amount  amountLiableToVAT10(Amount _amountLiableToVAT10 = amountLiableToVAT10)
    {
        amountLiableToVAT10 = _amountLiableToVAT10;
        return amountLiableToVAT10;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountLiableToVAT20</Name>
				<Source><![CDATA[
        public Amount amountLiableToVAT20(Amount _amountLiableToVAT20 = amountLiableToVAT20)
    {
        amountLiableToVAT20 = _amountLiableToVAT20;
        return amountLiableToVAT20;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountNotLiableToVAT</Name>
				<Source><![CDATA[
        public Amount amountNotLiableToVAT(Amount _amountNotLiableToVAT = amountNotLiableToVAT)
    {
        amountNotLiableToVAT = _amountNotLiableToVAT;
        return amountNotLiableToVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGroupBy</Name>
				<Source><![CDATA[
        public boolean isGroupBy(boolean _isGroupBy = isGroupBy)
    {
        isGroupBy = _isGroupBy;
        return isGroupBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        amountInclVAT        = 0;

        amountLiableToVAT20  = 0;
        taxAmountVAT20       = 0;

        amountLiableToVAT10  = 0;
        taxAmountVAT10       = 0;

        amountLiableToVAT0   = 0;

        amountNotLiableToVAT = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseAmounts</Name>
				<Source><![CDATA[
        public void reverseAmounts()
    {
        amountInclVAT        = -amountInclVAT;

        amountLiableToVAT20  = -amountLiableToVAT20;
        taxAmountVAT20       = -taxAmountVAT20;

        amountLiableToVAT10  = -amountLiableToVAT10;
        taxAmountVAT10       = -taxAmountVAT10;

        amountLiableToVAT0   = -amountLiableToVAT0;

        amountNotLiableToVAT = -amountNotLiableToVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subAmounts</Name>
				<Source><![CDATA[
        public void subAmounts(AmountMST   _amountInclVAT,
                           TaxBase     _amountLiableToVAT20,
                           TaxBase     _amountLiableToVAT10,
                           TaxBase     _amountLiableToVAT0,
                           TaxBase     _amountNotLiableToVAT,
                           TaxAmount   _amountVAT20,
                           TaxAmount   _amountVAT10)
    {
        amountInclVAT        -= _amountInclVAT;

        amountLiableToVAT20  -= _amountLiableToVAT20;
        taxAmountVAT20       -= _amountVAT20;

        amountLiableToVAT10  -= _amountLiableToVAT10;
        taxAmountVAT10       -= _amountVAT10;

        amountLiableToVAT0   -= _amountLiableToVAT0;

        amountNotLiableToVAT -= _amountNotLiableToVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subAmounts2</Name>
				<Source><![CDATA[
        public void subAmounts2(BookStructVATAmounts_RU _structAmounts)
    {
        amountInclVAT        -= _structAmounts.amountInclVAT();

        amountLiableToVAT20  -= _structAmounts.amountLiableToVAT20();
        taxAmountVAT20       -= _structAmounts.taxAmountVAT20();

        amountLiableToVAT10  -= _structAmounts.amountLiableToVAT10();
        taxAmountVAT10       -= _structAmounts.taxAmountVAT10();

        amountLiableToVAT0   -= _structAmounts.amountLiableToVAT0();

        amountNotLiableToVAT -= _structAmounts.amountNotLiableToVAT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>subSmallAmounts2</Name>
				<Source><![CDATA[
        public void subSmallAmounts2(TaxCode                       _taxCode,
                                 BookStructSmallVATAmounts_RU  _structAmounts)
    {
        amountInclVAT -= _structAmounts.amountInclVAT();

        if ( ! _taxCode)
        {
            amountNotLiableToVAT -= _structAmounts.amountLiableToVAT();
        }
        else
        {
            switch (this.taxType(_taxCode))
            {
                case TaxType_W::VAT :
                    amountLiableToVAT20 -= _structAmounts.amountLiableToVAT();
                    taxAmountVAT20      -= _structAmounts.taxAmountVAT();
                    break;

                case TaxType_W::VATReduced :
                    amountLiableToVAT10 -= _structAmounts.amountLiableToVAT();
                    taxAmountVAT10      -= _structAmounts.taxAmountVAT();
                    break;

                case TaxType_W::VATZero :
                    amountLiableToVAT0 -= _structAmounts.amountLiableToVAT();
                    break;

                default :
                    amountNotLiableToVAT -= _structAmounts.amountLiableToVAT();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountVAT10</Name>
				<Source><![CDATA[
        public Amount taxAmountVAT10(Amount _taxAmountVAT10 = taxAmountVAT10)
    {
        taxAmountVAT10 = _taxAmountVAT10;
        return taxAmountVAT10;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountVAT20</Name>
				<Source><![CDATA[
        public Amount  taxAmountVAT20(Amount _taxAmountVAT20 = taxAmountVAT20)
    {
        taxAmountVAT20 = _taxAmountVAT20;
        return taxAmountVAT20;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxType</Name>
				<Source><![CDATA[
        private TaxType_W taxType(TaxCode _taxCode)
    {
        TaxTable taxTable;

        select firstonly TaxType_W from taxTable
            where taxTable.TaxCode == _taxCode;

        return taxTable.TaxType_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        int version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                return true;

            default :
                return false;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
        public static BookStructVATAmounts_RU create(container _packedClass)
    {
        BookStructVATAmounts_RU cls = new BookStructVATAmounts_RU();

        cls.unpack(_packedClass);

        return cls;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>