<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdWorkCenterDailyStatusDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdWorkCenterDailyStatusDP_CN</c> class provides data for the <c>ProdWorkCenterDailyStatus_CN</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the Report Data Provider class for the <c>ProdWorkCenterDailyStatus_CN</c> SSRS report.
/// </remarks>
[
      SRSReportQueryAttribute(querystr(ProdWorkCenterDailyStatus_CN)),
      SRSReportParameterAttribute(classstr(ProdWorkCenterDailyStatusContract_CN))
]
public class ProdWorkCenterDailyStatusDP_CN extends SRSReportDataProviderBase
{
    //Tmp table
    ProdWorkCenterDailyStatusTmp_CN     workCenterDailyStatusTmp_CN;

    //Report parameters
    ProdId              prodId;
    WrkCtrIdBase        wrkCtrId;
    TransDate           WIPDate;

    //Report business logic
    ProdRouteTrans              prodRouteTrans;
    ProdTable                   prodTable;
    WrkCtrTable                 wrkCtrTable;
    InventTable                 inventTable;
    ProdRoute                   prodRoute;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWorkCenterDailyStatusTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>ProdWorkCenterDailyStatusTmp_CN</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>ProdWorkCenterDailyStatusTmp_CN</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(ProdWorkCenterDailyStatusTmp_CN))
    ]
    public ProdWorkCenterDailyStatusTmp_CN getWorkCenterDailyStatusTmp_CN()
    {
        select WorkCenterDailyStatusTmp_CN;
        return WorkCenterDailyStatusTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkCenterDailyStatusTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    private void initWorkCenterDailyStatusTmp_CN()
    {
        Query           query = new Query();

        //Init query
        query   = new Query(querystr(ProdWorkCenterDailyStatus_CN));
        Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, transRefId)).value(prodId);
        Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, DateWIP)).value(strFmt('%1',WIPDate));
        Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, wrkCtrId)).value(wrkCtrId);

        QueryRun qr = new QueryRun(query);

        //Run query and insert data into temporary table
        while (qr.next())
        {
            prodRouteTrans  = qr.get(tableNum(ProdRouteTrans));
            prodTable       = qr.get(tableNum(ProdTable));
            inventTable     = qr.get(tableNum(InventTable));
            wrkCtrTable     = qr.get(tableNum(WrkCtrTable));
            prodRoute       = qr.get(tableNum(prodRoute));

            workCenterDailyStatusTmp_CN.clear();
            workCenterDailyStatusTmp_CN.WrkCtrId            = prodRouteTrans.WrkCtrId;
            workCenterDailyStatusTmp_CN.Name                = wrkCtrTable.Name;
            workCenterDailyStatusTmp_CN.ProdId              = prodRouteTrans.TransRefId;
            workCenterDailyStatusTmp_CN.ItemId              = prodTable.ItemId;
            workCenterDailyStatusTmp_CN.ItemName            = ecoResProductTranslation::findByProductLanguage(inventTable.Product, SystemParameters::systemLanguageId()).Name;
            workCenterDailyStatusTmp_CN.Qty                 = prodTable.QtySched;
            workCenterDailyStatusTmp_CN.Unit                = inventTable.BOMUnitId;
            workCenterDailyStatusTmp_CN.OprNum              = prodRouteTrans.OprNum;
            workCenterDailyStatusTmp_CN.OprId               = prodRouteTrans.OprId;
            workCenterDailyStatusTmp_CN.FinishedQty         = prodRouteTrans.QtyGood;
            workCenterDailyStatusTmp_CN.ScrapQty            = prodRouteTrans.QtyError;
            workCenterDailyStatusTmp_CN.OprNumNext          = prodRoute.OprNumNext;
            workCenterDailyStatusTmp_CN.DateWIP             = prodRouteTrans.DateWIP;
            workCenterDailyStatusTmp_CN.BeginningQty        = 0;
            workCenterDailyStatusTmp_CN.PreOprFinishedQty   = 0;
            workCenterDailyStatusTmp_CN.EndingQty           = 0;
            workCenterDailyStatusTmp_CN.FirstDate           = true;
            workCenterDailyStatusTmp_CN.FirstOpr            = true;
            workCenterDailyStatusTmp_CN.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SSRS report.
    /// </summary>
    /// <remarks>
    /// This method will be called by SSRS at run time.The method will compute the data and populate the
    /// data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00135, funcName());

        ProdWorkCenterDailyStatusContract_CN contract = this.parmDataContract();

        //Get report parameters by contract class
        wrkCtrId = contract.parmWrkCtrId();
        prodId   = contract.parmProdId();
        WIPDate  = contract.parmWIPDate();

        if (WIPDate == dateNull())
        {
            WIPDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        //Init temporary table
        this.initWorkCenterDailyStatusTmp_CN();
        this.updateWorkCenterDailyStatusTmp_CN();

        //If there is no record in tmp table, insert a blank record into it, in oreder to just display table header.
        select firstonly recId from workCenterDailyStatusTmp_CN;

        if (!workCenterDailyStatusTmp_CN.RecId)
        {
            workCenterDailyStatusTmp_CN.clear();
            workCenterDailyStatusTmp_CN.initValue();
            workCenterDailyStatusTmp_CN.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkCenterDailyStatusTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity and updates it into the temporary table.
    /// </summary>
    private void updateWorkCenterDailyStatusTmp_CN()
    {
        prodRouteTrans  tmpProdRouteTrans;
        prodRoute       tmpProdRoute;
        Query           query = new Query();
        QueryRun        qr;
        //Previous operation finished qty till to WIPDate (not include WIPDate)
        //Current operation finished qty till to WIPDate (not include WIPDate)
        //Previous operation finished qty on WIPDate

        //Init query
        query = new Query(querystr(ProdWorkCenterDailyStatusDetails_CN));

        while select forupdate workCenterDailyStatusTmp_CN
        {
            Qty preOprPrePeriodFinishedQty = 0;
            Qty curOprPrePeriodFinishedQty = 0;
            Qty preOprWIPDateFinishedQty   = 0;
            //Check whether this is the first operation
            select firstOnly recId from tmpProdRoute
                where tmpProdRoute.ProdId == workCenterDailyStatusTmp_CN.ProdId
                    && tmpProdRoute.OprNumNext ==  workCenterDailyStatusTmp_CN.OprNum;

            if (tmpProdRoute.RecId)
            {
                //Not first operation
                //get previous operation finished qty till to WIPDate (not include WIPDate)
                query.dataSourceTable(tableNum(ProdRouteTrans)).clearRange(fieldNum(ProdRouteTrans, wrkCtrId));
                query.dataSourceTable(tableNum(ProdRoute)).clearRange(fieldNum(ProdRoute, OprNum));

                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, transRefId)).value(workCenterDailyStatusTmp_CN.ProdId);
                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, DateWIP)).value(strFmt('<%1',WIPDate));
                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRoute)), fieldNum(ProdRoute, OprNumNext)).value(queryValue(workCenterDailyStatusTmp_CN.OprNum));

                qr = new QueryRun(query);
                qr.next();
                tmpProdRouteTrans = qr.get(tableNum(ProdRouteTrans));
                preOprPrePeriodFinishedQty = tmpProdRouteTrans.QtyGood;

                //get current operation finished qty till to WIPDate (not include WIPDate)
                query.dataSourceTable(tableNum(ProdRoute)).clearRange(fieldNum(ProdRoute, OprNumNext));

                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, transRefId)).value(workCenterDailyStatusTmp_CN.ProdId);
                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, DateWIP)).value(strFmt('<%1',WIPDate));
                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, wrkCtrId)).value(workCenterDailyStatusTmp_CN.WrkCtrId);
                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRoute)), fieldNum(ProdRoute, OprNum)).value(queryValue(workCenterDailyStatusTmp_CN.OprNum));

                qr = new QueryRun(query);
                qr.next();
                tmpProdRouteTrans = qr.get(tableNum(ProdRouteTrans));
                curOprPrePeriodFinishedQty = tmpProdRouteTrans.QtyGood;

                //get previous operation finished qty on WIPDate
                query.dataSourceTable(tableNum(ProdRouteTrans)).clearRange(fieldNum(ProdRouteTrans, wrkCtrId));
                query.dataSourceTable(tableNum(ProdRoute)).clearRange(fieldNum(ProdRoute, OprNum));

                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, transRefId)).value(workCenterDailyStatusTmp_CN.ProdId);
                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, DateWIP)).value(strFmt('%1',WIPDate));
                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRoute)), fieldNum(ProdRoute, OprNumNext)).value(queryValue(workCenterDailyStatusTmp_CN.OprNum));

                qr = new QueryRun(query);
                qr.next();
                tmpProdRouteTrans = qr.get(tableNum(ProdRouteTrans));
                preOprWIPDateFinishedQty = tmpProdRouteTrans.QtyGood;
            }
            else
            {
                //First operation
                preOprPrePeriodFinishedQty = workCenterDailyStatusTmp_CN.Qty;

                //get current operation finished qty till to WIPDate (not include WIPDate)
                query.dataSourceTable(tableNum(ProdRoute)).clearRange(fieldNum(ProdRoute, OprNumNext));

                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, transRefId)).value(workCenterDailyStatusTmp_CN.ProdId);
                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, DateWIP)).value(strFmt('<%1',WIPDate));
                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, wrkCtrId)).value(workCenterDailyStatusTmp_CN.WrkCtrId);
                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRoute)), fieldNum(ProdRoute, OprNum)).value(queryValue(workCenterDailyStatusTmp_CN.OprNum));

                qr = new QueryRun(query);
                qr.next();
                tmpProdRouteTrans = qr.get(tableNum(ProdRouteTrans));
                curOprPrePeriodFinishedQty = tmpProdRouteTrans.QtyGood;

                preOprWIPDateFinishedQty = 0;
            }

            //current operation beginning qty = previous operation finished qty till WIPDate - current operation finished qty till WIPDate
            workCenterDailyStatusTmp_CN.BeginningQty        = preOprPrePeriodFinishedQty - curOprPrePeriodFinishedQty;
            workCenterDailyStatusTmp_CN.PreOprFinishedQty   = preOprWIPDateFinishedQty;
            //current operation ending qty = current operation beginning qty + previous operation finished qty - current operation finished qty on WIPDate
            workCenterDailyStatusTmp_CN.EndingQty           = workCenterDailyStatusTmp_CN.BeginningQty + workCenterDailyStatusTmp_CN.PreOprFinishedQty - workCenterDailyStatusTmp_CN.FinishedQty;
            workCenterDailyStatusTmp_CN.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>