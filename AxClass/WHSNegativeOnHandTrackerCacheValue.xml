<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSNegativeOnHandTrackerCacheValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSNegativeOnHandTrackerCacheValue</c> class is designed to store
/// <c>WHSNegativeOnHandTracker</c> objects for physical and ordered availability.
/// Instances of the class are stored in the <c>WHSNegativeOnHandTrackerCache</c>.
/// </summary>
class WHSNegativeOnHandTrackerCacheValue
{
    ItemId                      itemId;
    InventDimId                 inventDimId;

    WHSNegativeOnHandTracker            availPhysicalTracker;
    WHSNegativeOnHandTracker            availOrderedTracker;
    private WHSNegativeOnHandTracker    availCWPhysicalTracker;
    private WHSNegativeOnHandTracker    availCWOrderedTracker;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>availOrderedTracker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WHSNegativeOnHandTracker</c> object that tracks information about ordered availability.
    /// </summary>
    /// <returns>
    /// The <c>WHSNegativeOnHandTracker</c> object that tracks information about ordered availability.
    /// </returns>
    public WHSNegativeOnHandTracker availOrderedTracker()
    {
        return availOrderedTracker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availCWOrderedTracker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WHSNegativeOnHandTracker</c> object that tracks information about ordered availability for catch weight quantities.
    /// </summary>
    /// <returns>
    /// The <c>WHSNegativeOnHandTracker</c> object that tracks information about catch weight ordered availability.
    /// </returns>
    [Hookable(false)]
    public WHSNegativeOnHandTracker availCWOrderedTracker()
    {
        return availCWOrderedTracker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availCWPhysicalTracker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WHSNegativeOnHandTracker</c> object that tracks information about physical availability for catch weight quantities.
    /// </summary>
    /// <returns>
    /// The <c>WHSNegativeOnHandTracker</c> object that tracks information about physical availability.
    /// </returns>
    [Hookable(false)]
    public WHSNegativeOnHandTracker availCWPhysicalTracker()
    {
        return availCWPhysicalTracker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availPhysicalTracker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WHSNegativeOnHandTracker</c> object that tracks information about physical availability.
    /// </summary>
    /// <returns>
    /// The <c>WHSNegativeOnHandTracker</c> object that tracks information about physical availability.
    /// </returns>
    public WHSNegativeOnHandTracker availPhysicalTracker()
    {
        return availPhysicalTracker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParameters</Name>
				<Source><![CDATA[
    private void initFromParameters(
        ItemId      _itemId,
        InventDimId _inventDimId,
        InventQty   _committedAvailPhysicalQty,
        InventQty   _committedAvailOrderedQty)
    {
        itemId = _itemId;
        inventDimId = _inventDimId;
        availPhysicalTracker = WHSNegativeOnHandTracker::newFromCommittedAvailableQty(_committedAvailPhysicalQty);
        availOrderedTracker = WHSNegativeOnHandTracker::newFromCommittedAvailableQty(_committedAvailOrderedQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCWTrackersFromWHSInventReserve</Name>
				<Source><![CDATA[
    private void initCWTrackersFromWHSInventReserve(WHSInventReserve _whsInventReserve)
    {
        if (_whsInventReserve.IsItemCatchWeightEnabled)
        {
            availCWPhysicalTracker = WHSNegativeOnHandTracker::newFromCommittedAvailableQty(_whsInventReserve.CWAvailPhysical);
            availCWOrderedTracker = WHSNegativeOnHandTracker::newFromCommittedAvailableQty(_whsInventReserve.CWAvailOrdered);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the inventory dimension values set for which availability is being tracked.
    /// </summary>
    /// <returns>
    /// The ID of the inventory dimension values set for which availability is being tracked.
    /// </returns>
    public InventDimId inventDimId()
    {
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the item for which availability is being tracked.
    /// </summary>
    /// <returns>
    /// The ID of the item for which availability is being tracked.
    /// </returns>
    public ItemId itemId()
    {
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSNegativeOnHandTrackerCacheValue construct()
    {
        return new WHSNegativeOnHandTrackerCacheValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>WHSNegativeOnHandTrackerCacheValue</c> based on the specified <c>WHSInventReserve</c> record.
    /// </summary>
    /// <param name="_inventReserve">
    /// The <c>WHSInventReserve</c> record.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSNegativeOnHandTrackerCacheValue</c> class.
    /// </returns>
    public static WHSNegativeOnHandTrackerCacheValue newFromInventReserve(WHSInventReserve _inventReserve)
    {
        WHSNegativeOnHandTrackerCacheValue negativeOnHandTrackerCacheValue = WHSNegativeOnHandTrackerCacheValue::newFromParameters(
                                                                                _inventReserve.ItemId,
                                                                                _inventReserve.InventDimId,
                                                                                _inventReserve.AvailPhysical,
                                                                                _inventReserve.AvailOrdered);

        negativeOnHandTrackerCacheValue.initCWTrackersFromWHSInventReserve(_inventReserve);

        return negativeOnHandTrackerCacheValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSNegativeOnHandTrackerCacheValue</c> class based on the specified parameters.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item for which availability needs to be tracked.
    /// </param>
    /// <param name="_inventDimId">
    /// The ID of the inventory dimensions value set for which availability needs to be tracked.
    /// </param>
    /// <param name="_committedAvailPhysicalQty">
    /// The physically available quantity that has been committed to the database.
    /// </param>
    /// <param name="_committedAvailOrderedQty">
    /// The ordered available quantity that has been committed to the database.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSNegativeOnHandTrackerCacheValue</c> class.
    /// </returns>
    public static WHSNegativeOnHandTrackerCacheValue newFromParameters(
        ItemId      _itemId,
        InventDimId _inventDimId,
        InventQty   _committedAvailPhysicalQty,
        InventQty   _committedAvailOrderedQty)
    {
        WHSNegativeOnHandTrackerCacheValue cacheValue = WHSNegativeOnHandTrackerCacheValue::construct();
        cacheValue.initFromParameters(_itemId, _inventDimId, _committedAvailPhysicalQty, _committedAvailOrderedQty);
        return cacheValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>