<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransItemTransCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransItemTransCost extends ProjTransItemTrans
{
    ProjItemTransCost   projItemTransCost;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeCapitalize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether costs from this transaction can be capitalized.
    /// </summary>
    /// <returns>
    /// true if costs from this transaction can be capitalized; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This value is based on project line property of the project associated with this transaction.
    /// </remarks>
    public boolean canBeCapitalize()
    {
        boolean ret;

        if (this.ledgerStatusCost() == ProjLedgerStatus::Never)
        {
            return false;
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    public CostPrice costPrice()
    {
        return this.qty() ? CurrencyExchangeHelper::price(this.transCost() / this.qty(), this.currencyIdCost()) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return  projItemTransCost.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return projItemTransCost.FundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    public InventTransId inventTransId()
    {
        return projItemTransCost.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales order line number for the inventory item that is associated with this
    /// transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public LineNum itemLineNum()
    {
        return projItemTransCost.ItemLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerCostAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost amount to be posted to the general ledger.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public AmountMST ledgerCostAmountMST()
    {
        return projItemTransCost.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerStatusCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger status for this transaction.
    /// </summary>
    /// <returns>
    /// A <c>ProjLedgerStatus::None</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjLedgerStatus ledgerStatusCost()
    {
        return projItemTransCost.LedgerStatusCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjItemTrans _projItemTrans, ProjItemTransCost _projItemTransCost)
    {
        projItemTransCost   = _projItemTransCost;

        super(_projItemTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projAdjustRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project adjustment reference that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjAdjustRefId projAdjustRefId()
    {
        return projItemTransCost.ProjAdjustRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        return projItemTransCost.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjItemTransCost));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public AmountCur transCost()
    {
        return projItemTransCost.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCostMST</Name>
				<Source><![CDATA[
    public AmountMST transCostMST(boolean _calledFromPSARecCost = false)// added parameter
    {
        return projItemTransCost.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transStatus</Name>
				<Source><![CDATA[
    public ProjTransStatus transStatus()
    {
        return projItemTransCost.TransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the start date of the estimate period for this transaction.
    /// </summary>
    /// <returns>
    /// A null date.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjPeriodFromWIP wipPeriod()
    {
        return projItemTransCost.wipPeriod;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>