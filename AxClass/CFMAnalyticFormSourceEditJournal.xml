<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMAnalyticFormSourceEditJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class implements creating of correction records in the cash flow journal.
/// </summary>
/// <remarks>
/// The common scenario to create corrected records:
/// Create reverse line
/// Create corrective line with uncommitted values.
/// </remarks>
public class CFMAnalyticFormSourceEditJournal
{
    Array markedRecords;
    CFMJournalId journalId;
    CFMAnalyticFormDataEditTmp formDataEdit, dataEditMarked;
    CFMJournalTransSaver saverTrans;
    CFMJournalSourceList sourceList;
    CFMAnalyticDataEditUncommitted editUncommitted;
    Counter markedRecordsQty, currentMarkedCnt;
    boolean handleMarkedRecordsOnly, selected;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates class <c>CFMAnalyticFormSourceEditJournal</c>.
    /// </summary>
    /// <param name="_formDataEdit">
    /// Record in temporary table that contains new values.
    /// </param>
    /// <param name="_markedLinesArray">
    /// Array that contains RecIds of marked lines of <c>CFMAnalyticFormDataEditTmp</c> table. If array is empty all records will be enumerated.
    /// </param>
    /// <param name="_journalId">
    /// Cash flow journal Id.
    /// </param>
    /// <returns>
    /// Instance of the <c>CFMAnalyticFormSourceEditJournal</c> class.
    /// </returns>
    public static CFMAnalyticFormSourceEditJournal construct(CFMAnalyticFormDataEditTmp _formDataEdit, Array _markedLinesArray, CFMJournalId _journalId)
    {
        return CFMAnalyticFormSourceEditJournal::constructOnServer(_formDataEdit, _markedLinesArray.pack(), _journalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructOnServer</Name>
				<Source><![CDATA[
    protected static CFMAnalyticFormSourceEditJournal constructOnServer(CFMAnalyticFormDataEditTmp _formDataEdit, container _markedLinesArray, CFMJournalId _journalId)
    {
        CFMAnalyticFormSourceEditJournal editJournal = new CFMAnalyticFormSourceEditJournal();

        editJournal.parmMarkedRecords(Array::create(_markedLinesArray));
        editJournal.parmJournalId(_journalId);
        editJournal.setFormDataEdit(_formDataEdit);

        editJournal.init();

        return editJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enumerates sources need to be corrected and creates new journal lines.
    /// </summary>
    /// <returns>
    /// <c>true</c> if at least one of the corrected lines is created; otherwise <c>false</c>.
    /// </returns>
    public boolean create()
    {
        boolean isTransCorrected;

        ttsBegin;
        CFMJournalTable journalTable = CFMJournalTable::find(journalId);
        saverTrans = CFMJournalTransSaver::constructFromJournal(journalTable);

        while (this.selectNextRecord())
        {
            container conFieldsChanged = dataEditMarked.fieldIdChanges();

            if (conFieldsChanged != conNull())
            {
                select firstOnly sourceList
                    where sourceList.CFMJournalTransSourceType == dataEditMarked.SourceType
                       && sourceList.SetupSourceType == CFMJournalSetupSourceType::JournalTable
                       && sourceList.SourceRecId == journalTable.RecId
                       && sourceList.CFMCashFlowDirection == dataEditMarked.CashFlowDirection;

                if (sourceList)
                {
                    editUncommitted = CFMAnalyticDataEditUncommitted::find(dataEditMarked.SourceType, dataEditMarked.SourceRefRecId, true);

                    this.createReverse(journalTable);
                    this.createOrUpdateUncommittedValues(journalTable);
                    this.createCorrection();
                    isTransCorrected = true;
                }
            }
        }

        saverTrans.flush();
        ttsCommit;

        return isTransCorrected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCorrection</Name>
				<Source><![CDATA[
    private void createCorrection()
    {
        this.createTrans(this.createLineSearch(CFMCorrectionType::Correction));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineSearch</Name>
				<Source><![CDATA[
    private CFMJournalLineSearch createLineSearch(CFMCorrectionType _correctionType)
    {
        CFMJournalLineSearch lineSearch = CFMJournalLineSearch::constructFromCFMJournalSourceList(sourceList, saverTrans, _correctionType, NoYes::Yes);

        lineSearch.parmSourceRefRecId(dataEditMarked.SourceRefRecId);
        lineSearch.init();

        return lineSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateUncommittedValues</Name>
				<Source><![CDATA[
    private void createOrUpdateUncommittedValues(CFMJournalTable _journalTable)
    {
        CFMDataEditUncommitted dataEditUncommitted = CFMDataEditUncommitted::construct(dataEditMarked, _journalTable.RecId);
        dataEditUncommitted.parmInitialValues(editUncommitted.RecId == 0 ? NoYes::Yes : NoYes::No);
        dataEditUncommitted.initDataUncommitted(editUncommitted);

        editUncommitted.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverse</Name>
				<Source><![CDATA[
    private void createReverse(CFMJournalTable _journalTable)
    {
        CFMJournalLineSearch lineSearch = this.createLineSearch(CFMCorrectionType::Reverse);

        if (editUncommitted.RecId == 0)
        {
            this.createOrUpdateUncommittedValues(_journalTable);
        }

        this.createTrans(lineSearch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    private void createTrans(CFMJournalLineSearch _lineSearch)
    {
        while (_lineSearch.next())
        {
            CFMJournalTrans journalTrans = _lineSearch.getCFMJournalTrans();
            RecId sourceHeaderRecId, sourceRecId;
            [sourceHeaderRecId, sourceRecId] = _lineSearch.logRefRecId();
            saverTrans.addLine(journalTrans, sourceRecId, sourceHeaderRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes instance by its default values
    /// </summary>
    public void init()
    {
        dataEditMarked.linkPhysicalTableInstance(formDataEdit);
        markedRecordsQty = markedRecords.lastIndex();
        handleMarkedRecordsOnly = markedRecordsQty > 1;

        if (handleMarkedRecordsOnly)
        {
            currentMarkedCnt = 1;
        }
        else
        {
            this.prepareCursor();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public CFMJournalId parmJournalId(CFMJournalId _journalId = journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkedRecords</Name>
				<Source><![CDATA[
    public Array parmMarkedRecords(Array _markedRecords = markedRecords)
    {
        markedRecords = _markedRecords;

        return markedRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareCursor</Name>
				<Source><![CDATA[
    private void prepareCursor()
    {
        select noFetch dataEditMarked
            where (dataEditMarked.PaymentAccountNum != dataEditMarked.PaymentAccountNumNew && dataEditMarked.PaymentAccountNumNew)
               || (dataEditMarked.PaymDate != dataEditMarked.DueDateNew && dataEditMarked.DueDateNew != dateNull())
               || (dataEditMarked.PaymMode != dataEditMarked.PaymModeNew && dataEditMarked.PaymModeNew)
               || (dataEditMarked.PaymSpec != dataEditMarked.PaymSpecNew && dataEditMarked.PaymSpec);

        selected = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectNextRecord</Name>
				<Source><![CDATA[
    private boolean selectNextRecord()
    {
        boolean ret;

        if (handleMarkedRecordsOnly)
        {
            if (currentMarkedCnt <= markedRecordsQty)
            {
                RefRecId markedRecId = markedRecords.value(currentMarkedCnt);

                select firstonly dataEditMarked
                    where dataEditMarked.RecId == markedRecId;

                currentMarkedCnt++;
                ret = true;
            }
        }
        else
        {
            ret = dataEditMarked.RecId != 0 || selected == false;

            if (ret)
            {
                next dataEditMarked;
                selected = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormDataEdit</Name>
				<Source><![CDATA[
    public void setFormDataEdit(CFMAnalyticFormDataEditTmp _formDataEdit)
    {
        formDataEdit = _formDataEdit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>