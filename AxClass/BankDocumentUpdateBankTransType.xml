<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentUpdateBankTransType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankDocumentUpdateBankTransType</c> class provides the ability to update a set of bank documents
/// with a new bank transaction type.
/// </summary>
internal final class BankDocumentUpdateBankTransType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the bank transaction type for bank documents based on the given query
    /// and bank account to the given new bank transaction type.
    /// </summary>
    /// <param name = "_documentQuery">The bank document view query for the bank documents to update.</param>
    /// <param name = "_bankAccountId">The bank account of the query.</param>
    /// <param name = "_bankTransType">The bank transaction type to set on the documents.</param>
    internal void updateTransType(Query _documentQuery, BankAccountId _bankAccountId, BankTransactionType _bankTransType)
    {
        if (BankDocumentUpdateBankTransTypeValidator::checkBankAccount(_bankAccountId)
            && BankDocumentUpdateBankTransTypeValidator::checkBankTransType(_bankTransType))
        {
            ttsbegin;

            TmpDataAreaRecIdFilter bankDocumentUpdateFilter = this.createBankDocumentUpdateFilter(_documentQuery);

            this.updateBankDocuments(bankDocumentUpdateFilter, _bankTransType);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankDocumentUpdateFilter</Name>
				<Source><![CDATA[
    private TmpDataAreaRecIdFilter createBankDocumentUpdateFilter(Query _documentQuery)
    {
        TmpDataAreaRecIdFilter bankDocumentUpdateFilter;

        Query::insert_recordset(
            bankDocumentUpdateFilter,
            this.getInsertRecordsetMapForDocumentTableView(_documentQuery.dataSourceTable(tableNum(BankDocumentTableView))),
            _documentQuery);

        return bankDocumentUpdateFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInsertRecordsetMapForDocumentTableView</Name>
				<Source><![CDATA[
    private Map getInsertRecordsetMapForDocumentTableView(QueryBuildDataSource _bankDocumentTableViewDS)
    {
        Map targetToSourceMap = new Map(Types::String, Types::Container);

        targetToSourceMap.insert(fieldStr(TmpDataAreaRecIdFilter, RefRecId), [_bankDocumentTableViewDS.uniqueId(), fieldStr(BankDocumentTableView, SourceRecId)]);
        targetToSourceMap.insert(fieldStr(TmpDataAreaRecIdFilter, RefTableId), [_bankDocumentTableViewDS.uniqueId(), fieldStr(BankDocumentTableView, SourceRelationType)]);

        return targetToSourceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankDocuments</Name>
				<Source><![CDATA[
    private void updateBankDocuments(TmpDataAreaRecIdFilter _bankDocumentUpdateFilter, BankTransactionType _bankTransType)
    {
        this.updateBankTransactions(_bankDocumentUpdateFilter, _bankTransType);
        this.updateBankCheques(_bankDocumentUpdateFilter, _bankTransType);
        this.updateBankDeposits(_bankDocumentUpdateFilter, _bankTransType);
        this.updateLedgerJournalTrans(_bankDocumentUpdateFilter, _bankTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankTransactions</Name>
				<Source><![CDATA[
    private void updateBankTransactions(TmpDataAreaRecIdFilter _bankDocumentUpdateFilter, BankTransactionType _bankTransType)
    {
        BankAccountTrans bankAccountTrans;

        this.skipTableMethods(bankAccountTrans);

        update_recordset bankAccountTrans
            setting BankTransType = _bankTransType
                where bankAccountTrans.BankTransType == ''
            exists join _bankDocumentUpdateFilter
                where bankAccountTrans.RecId == _bankDocumentUpdateFilter.RefRecId
                    && bankAccountTrans.TableId == _bankDocumentUpdateFilter.RefTableId;

        LedgerJournalTrans ledgerJournalTrans;

        this.skipTableMethods(ledgerJournalTrans);

        update_recordset ledgerJournalTrans
            setting BankTransType = _bankTransType
                where ledgerJournalTrans.BankTransType == ''
            exists join bankAccountTrans
                where ledgerJournalTrans.RecId == bankAccountTrans.SourceRecId
                    && ledgerJournalTrans.TableId == bankAccountTrans.SourceTableId
            exists join _bankDocumentUpdateFilter
                where bankAccountTrans.RecId == _bankDocumentUpdateFilter.RefRecId
                    && bankAccountTrans.TableId == _bankDocumentUpdateFilter.RefTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCheques</Name>
				<Source><![CDATA[
    private void updateBankCheques(TmpDataAreaRecIdFilter _bankDocumentUpdateFilter, BankTransactionType _bankTransType)
    {
        BankAccountTrans bankAccountTrans;

        this.skipTableMethods(bankAccountTrans);

        update_recordset bankAccountTrans
            setting BankTransType = _bankTransType
                where bankAccountTrans.BankTransType == ''
            exists join _bankDocumentUpdateFilter
                where bankAccountTrans.SourceRecId == _bankDocumentUpdateFilter.RefRecId
                    && bankAccountTrans.SourceTableId == _bankDocumentUpdateFilter.RefTableId;

        LedgerJournalTrans ledgerJournalTrans;
        BankChequeTable bankChequeTable;

        this.skipTableMethods(ledgerJournalTrans);

        update_recordset ledgerJournalTrans
            setting BankTransType = _bankTransType
                where ledgerJournalTrans.BankTransType == ''
            exists join bankChequeTable
                where ledgerJournalTrans.RecId == bankChequeTable.SourceRecId
                    && ledgerJournalTrans.TableId == bankChequeTable.SourceTableId
            exists join _bankDocumentUpdateFilter
                where bankChequeTable.RecId == _bankDocumentUpdateFilter.RefRecId
                    && bankChequeTable.TableId == _bankDocumentUpdateFilter.RefTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankDeposits</Name>
				<Source><![CDATA[
    private void updateBankDeposits(TmpDataAreaRecIdFilter _bankDocumentUpdateFilter, BankTransactionType _bankTransType)
    {
        // Bank deposit slips do not maintain a unique reference to the original payment journal once printed
        // The payment line will not be updated with the transaction type in this case

        BankDepositDocument bankDepositDocument;

        this.skipTableMethods(bankDepositDocument);

        update_recordset bankDepositDocument
            setting BankTransType = _bankTransType
                where bankDepositDocument.BankTransType == ''
            exists join _bankDocumentUpdateFilter
                where bankDepositDocument.RecId == _bankDocumentUpdateFilter.RefRecId
                    && bankDepositDocument.TableId == _bankDocumentUpdateFilter.RefTableId;

        BankDeposit bankDeposit;

        this.skipTableMethods(bankDeposit);

        update_recordset bankDeposit
            setting BankTransType = _bankTransType
                where bankDeposit.BankTransType == ''
            exists join bankDepositDocument
                where bankDeposit.BankDepositDocument == bankDepositDocument.RecId
            exists join _bankDocumentUpdateFilter
                where bankDepositDocument.RecId == _bankDocumentUpdateFilter.RefRecId
                    && bankDepositDocument.TableId == _bankDocumentUpdateFilter.RefTableId;

        BankAccountTrans bankAccountTrans;

        this.skipTableMethods(bankAccountTrans);

        update_recordset bankAccountTrans
            setting BankTransType = _bankTransType
                where bankAccountTrans.BankTransType == ''
            exists join _bankDocumentUpdateFilter
                where bankAccountTrans.SourceRecId == _bankDocumentUpdateFilter.RefRecId
                    && bankAccountTrans.SourceTableId == _bankDocumentUpdateFilter.RefTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTrans</Name>
				<Source><![CDATA[
    private void updateLedgerJournalTrans(TmpDataAreaRecIdFilter _bankDocumentUpdateFilter, BankTransactionType _bankTransType)
    {
        BankAccountTrans bankAccountTrans;

        this.skipTableMethods(bankAccountTrans);

        update_recordset bankAccountTrans
            setting BankTransType = _bankTransType
                where bankAccountTrans.BankTransType == ''
            exists join _bankDocumentUpdateFilter
                where bankAccountTrans.SourceRecId == _bankDocumentUpdateFilter.RefRecId
                    && bankAccountTrans.SourceTableId == _bankDocumentUpdateFilter.RefTableId;

        LedgerJournalTrans ledgerJournalTrans;

        this.skipTableMethods(ledgerJournalTrans);

        update_recordset ledgerJournalTrans
            setting BankTransType = _bankTransType
                where ledgerJournalTrans.BankTransType == ''
            exists join _bankDocumentUpdateFilter
                where ledgerJournalTrans.RecId == _bankDocumentUpdateFilter.RefRecId
                    && ledgerJournalTrans.TableId == _bankDocumentUpdateFilter.RefTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipTableMethods</Name>
				<Source><![CDATA[
    private void skipTableMethods(Common _table)
    {
        _table.skipDataMethods(true);
        _table.skipDatabaseLog(true);
        _table.skipEvents(true);
        _table.skipNumberSequenceCheck(true);
        _table.skipPostLoad(true);
        _table.skipTTSCheck(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BankDocumentUpdateBankTransType construct()
    {
        return new BankDocumentUpdateBankTransType();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>