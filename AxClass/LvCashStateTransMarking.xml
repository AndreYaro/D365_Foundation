<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LvCashStateTransMarking</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides a dialog for selecting records for print.
/// </summary>
public class LvCashStateTransMarking extends RunBaseBatch implements BatchRetryable
{
    QueryRun        queryRun;
    AmountMST       valueLimit;
    DialogField     dialogvalueLimit;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        valueLimit
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        DialogGroup     valueLimitGroup;

        valueLimitGroup  = dialog.addGroup("@SYS39453");
        dialogvalueLimit = dialog.addFieldValue(identifierStr(AmountMST), valueLimit, "@GLS113190", "@GLS113191" );

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value from the dialog.
    /// </summary>
    /// <returns>
    /// True if successful; otherwise false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        valueLimit = dialogvalueLimit.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        queryRun  = new QueryRun(querystr(LvCashStateTransMarking));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00012, funcName());

        LvCashStateTrans        lvCashStateTrans;
        LvCashStateTrans        lvCashStateTransUpdate;
        QueryRun                queryRunUpdate;
        QueryBuildDataSource    qbds;
        Query                   queryUpdate;

        qbds            = queryRun.query().dataSourceTable(tablenum(LvCashStateTrans));
        queryUpdate     = queryRun.query();
        queryUpdate.clearGroupBy();

        queryRunUpdate  = new QueryRun(queryUpdate);

        qbds.addSelectionField(fieldnum(LvCashStateTrans, PaymAmountMST), SelectionField::Sum);

        while (queryRun.next())
        {
            lvCashStateTrans = queryRun.get(tablenum(LvCashStateTrans)) as LvCashStateTrans;

            if (valueLimit < lvCashStateTrans.PaymAmountMST)
            {
                ttsBegin;

                while (queryRunUpdate.next())
                {
                    lvCashStateTransUpdate = queryRunUpdate.get(tablenum(LvCashStateTrans)) as LvCashStateTrans;
                    lvCashStateTransUpdate.selectForUpdate(true);
                    lvCashStateTransUpdate.Include = NoYes::Yes;
                    lvCashStateTransUpdate.update();
                }

                queryRunUpdate.reset();

                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    public boolean showDefaultButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version         version = RunBase::getVersion(_packedClass);
        PackedQueryRun  packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LvCashStateTransMarking construct()
    {
        return new LvCashStateTransMarking();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS113192";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LvCashStateTransMarking     lvCashStateTransMarking = LvCashStateTransMarking::construct();
        FormRun                     formRun;

        if (_args && _args.caller() && _args.dataset())
        {
            formRun = _args.caller();
        }
        else
        {
            throw error(Error::wrongUseOfFunction("@GLS113192"));
        }

        if (lvCashStateTransMarking.prompt())
        {
            lvCashStateTransMarking.runOperation();

            if (formRun && formRun.dataSource())
            {
                formRun.dataSource().research();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>