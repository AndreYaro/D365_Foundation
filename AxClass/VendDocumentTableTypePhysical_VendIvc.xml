<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentTableTypePhysical_VendIvc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendDocumentTableTypePhysical_VendIvc</c> class is used for validation and to apply default
///    values to invoices stored in the <c>VendInvoiceInfoTable</c> table.
/// </summary>
class VendDocumentTableTypePhysical_VendIvc extends VendDocumentTableTypePhysical
{
    #VendInvoiceFaults

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    // Saved invoice headers defaulting and validation.
    // Logic executed when invoice is entered through service

    /// <summary>
    ///    Applies default values into the <c>VendInvoiceInfoTable</c> table record for invoice document
    ///    types.
    /// </summary>
    public void defaultRow()
    {
        // Do not put fields that are common between service and interactive defaulting into this method.
        // If a field should be defaulted for both scenarios, but the defaulting is different
        // use either VendDocumentTableType.defaultRow or VendDocumentTableType.defaultAdditionalFields.

        this.mainStrategy().defaultField(fieldNum(VendInvoiceInfoTable, CashDiscDate));
        this.mainStrategy().defaultTableRefId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultRecalculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the recalculate field.
    /// </summary>
    /// <param name="_recalculate">
    /// The suggested value for the recalculate field.
    /// </param>
    /// <returns>
    /// The default value of the recalculate field for the current record.
    /// </returns>
    public NoYes determineDefaultRecalculate(NoYes _recalculate)
    {	
        VendDocumentTableType vendDocumentTableType = VendDocumentTableType::construct(vendDocumentTableMap);

        if (!vendDocumentTableMap.isFieldSet(vendDocumentTableType.getfieldNum(fieldnum(VendDocumentTableMap, CashDisc), vendDocumentTableMap.TableId)) &&
            !vendDocumentTableMap.isFieldSet(vendDocumentTableType.getfieldNum(fieldnum(VendDocumentTableMap, EndDisc), vendDocumentTableMap.TableId)) &&
            !vendDocumentTableMap.isFieldSet(vendDocumentTableType.getfieldNum(fieldnum(VendDocumentTableMap, TaxRoundOff), vendDocumentTableMap.TableId)) &&
            !vendDocumentTableMap.isFieldSet(vendDocumentTableType.getfieldNum(fieldnum(VendDocumentTableMap, InvoiceRoundOff), vendDocumentTableMap.TableId)))
        {
            return NoYes::Yes;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVendInvoiceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>VendInvoiceGroup</c> field.
    /// </summary>
    /// <returns>
    /// The default value of <c>VendInvoiceGroup</c> field for the current record.
    /// </returns>
    public VendInvoiceGrouping determineDefaultVendInvoiceGroup()
    {
        if (VendParameters::find().VendInvoiceGroupingEnable == NoYes::Yes)
        {
            return VendParameters::find().VendInvoiceWebServiceDefaultGroup;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultVendInvoiceSaveStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the save status of an invoice.
    /// </summary>
    /// <returns>
    /// An applicable <c>VendInvoiceSaveStatus</c> value.
    /// </returns>
    public VendInvoiceSaveStatus determineDefaultVendInvoiceSaveStatus()
    {
        return VendInvoiceSaveStatus::Pending;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultCashDiscDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the default values to fields that are required to calculate the <c>CashDiscDate</c> field.
    /// </summary>
    public void initDefaultCashDiscDate()
    {
        this.mainStrategy().defaultField(fieldNum(VendInvoiceInfoTable, DocumentDate));
        this.mainStrategy().defaultField(fieldNum(VendInvoiceInfoTable, TransDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrencyCodeForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>CurrencyCode</c> field for invoice documents.
    /// </summary>
    /// <returns>
    ///    true if the <c>CurrencyCode</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateCurrencyCodeForInvoice()
    {
        if (!Currency::exist(this.mainStrategy().vendDocumentTableMap().CurrencyCode))
        {
            checkFailed(strFmt("@SYS117888", this.vendDocumentTableMap().CurrencyCode));
            return false;
        }

        if (this.mainStrategy().vendDocumentTableMap().isNonPO())
        {
            // No need to do remaining validation for non-PO invoices
            return true;
        }

        if (this.mainStrategy().purchTable().CurrencyCode != this.mainStrategy().vendDocumentTableMap().CurrencyCode)
        {
            checkFailed(strFmt("@SYS128576", this.mainStrategy().vendDocumentTableMap().CurrencyCode,
                this.mainStrategy().vendDocumentTableMap().Num, this.mainStrategy().purchTable().CurrencyCode));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceAccountForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>InvoiceAccount</c> field for invoice documents.
    /// </summary>
    /// <returns>
    ///    true if the <c>InvoiceAccount</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateInvoiceAccountForInvoice()
    {
        if (this.mainStrategy().vendDocumentTableMap().isNonPO())
        {
            // No need to validate non-PO invoices
            return true;
        }

        if (this.mainStrategy().vendDocumentTableMap().InvoiceAccount != this.mainStrategy().purchTable().InvoiceAccount)
        {
            checkFailed(strFmt("@SYS128577", this.mainStrategy().vendDocumentTableMap().InvoiceAccount,
                this.mainStrategy().vendDocumentTableMap().Num, this.mainStrategy().purchTable().InvoiceAccount));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>Num</c> field for invoice documents.
    /// </summary>
    /// <returns>
    /// true if the <c>Num</c> field is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the value in the <c>Num</c> field has been previously used but is not allowed by the AP
    /// Parameters an entry will be recorded to the Log column so that the user can manually modify the
    /// <c>Num</c> field before posting.
    /// </remarks>
    public boolean validateNumForInvoice()
    {
        VendTable vendTable = VendTable::find(this.vendDocumentTableMap().InvoiceAccount);
        VendInvoiceInfoTable header;

        header = this.vendDocumentTableMap();

        if (!FeatureStateProvider::isFeatureEnabled(VendInvoiceExtendInvoiceIdFeature::instance()) && strLen(header.Num) > 20)
        {
            warning(strFmt("@AccountsPayable:VendInvoiceWithLongNumFail", header.Num));
            header.Log = strFmt("@AccountsPayable:VendInvoiceWithLongNumFail", header.Num);
            header.ParmJobStatus = ParmJobStatus::ContainErrors;
            return true;
        }

        if (VendInvoiceAutomationCreateAndPostInvoiceRegisterFeature::isEnabled()
            && header.PoolRecId
            && header.Ordering == DocumentStatus::ApproveJournal
            && header.DocumentOrigin == DocumentOrigin::Service)
        {
            return true;
        }

        if (!vendTable.checkInvoice(this.vendDocumentTableMap().Num, this.vendDocumentTableMap().TransDate, true))
        {
            // Put an entry into the Log column, for the web service scenario this is not a fatal error, the user should be able
            // to retrieve the document in the UI to edit, posting will check for this and fail the post.
            header.Log = strFmt("@SYS50887", header.Num, header.TransDate);
            header.ParmJobStatus = ParmJobStatus::ContainErrors;
            return true;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchIdForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>PurchId</c> field for invoice documents.
    /// </summary>
    /// <returns>
    ///    true if the <c>PurchId</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validatePurchIdForInvoice()
    {
        boolean isValid = super();

        if (isValid && this.mainStrategy().purchTable().isInterCompanyOrder())
        {
            checkFailed(
                strFmt("@SYS129550",
                    this.mainStrategy().purchTable().PurchId,
                    this.mainStrategy().vendDocumentTableMap().Num));

            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initState</Name>
				<Source><![CDATA[
    public void initState()
    {
        VendDocumentTableMap axHeader = this.vendDocumentTableMap();
        TradeLineRefId tableRefId = axHeader.TableRefId;

        super();

        if (tableRefId != '')
        {
            axHeader.TableRefId = tableRefId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>