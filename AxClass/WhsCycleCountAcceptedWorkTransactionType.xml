<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsCycleCountAcceptedWorkTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsCycleCountAcceptedWorkTransactionType</c> class handles logic specific to the counting discrepancies accepted work transaction type.
/// </summary>
[WhsWorkTransTypeStrategyFactory(WHSWorkTransType::CycleCountAccepted)]
class WhsCycleCountAcceptedWorkTransactionType extends WhsWorkTransactionType
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>locationDirectiveQueryName</Name>
				<Source><![CDATA[
    public QueryName locationDirectiveQueryName(WHSLocDirTable _whsLocDirTable)
    {
        return queryStr(WHSInventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTemplateQueryName</Name>
				<Source><![CDATA[
    public QueryName workTemplateQueryName(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        return queryStr(WHSWorkTemplateInvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    public WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        return WHSWorkExecuteMode::Movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSourceOrder</Name>
				<Source><![CDATA[
    public void openSourceOrder(WHSWorkTable _whsWorkTable)
    {
        super(_whsWorkTable);
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceOrderMenuItemDisplayStr</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str sourceOrderMenuItemDisplayStr()
    {
        return menuItemDisplayStr(WHSWorkTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceOrderByWorkOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Common findSourceOrderByWorkOrder(WHSWorkOrderInterface _workOrder)
    {
        WHSWorkId workId = _workOrder.parmWorkId();
        if (workId == '')
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return WHSWorkLineCycleCount::findByAdjustmentWorkId(workId).WHSWorkTable();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>