<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSScheduledRouteToLoadAssigner</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TMSScheduledRouteToLoadAssigner
{
    TMSRouteCode        routeCode;
    WHSLoadId           loadId;
    WHSLoadTable        scheduledRouteLoad;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRouteToLoad</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Assign the selected route to the newly created load.
    /// </summary>
    /// <param name="_route">
    ///  <c>TMSRoute</c> table buffer for scheduled route.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     If a load has already been assigned to the selected route,
    ///     throw an error and allow the user to choose another route.
    /// </exception>
    private void addRouteToLoad(TMSRoute _route)
    {
        TMSRouteAssignment_Load routeAssignment;
        TMSRouteTable           routeTable;

        ttsBegin;

        if (!_route.hasRouteSegmentLoad(scheduledRouteLoad.LoadId))
        {
            if (this.validateFreightPaymentOnLoad(_route.RouteCode))
            {
                select firstOnly routeTable
                    where routeTable.RefRecId == scheduledRouteLoad.RecId
                    &&    routeTable.RefTableId == scheduledRouteLoad.TableId;

                routeAssignment = TMSRouteAssignment_Load::newStandard(
                                    routeTable,
                                    this,
                                    scheduledRouteLoad);

                routeAssignment.assignToExistingRoute(_route.RouteCode);

                if (routeAssignment.parmRouteCode())
                {
                    this.runRouteWorkbench(_route);
                }
            }
            else
            {
                throw error(strFmt("@TRX2714", scheduledRouteLoad.LoadId));
            }
        }
        else
        {
            throw error(strFmt("@WAX5383", _route.RouteCode));
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignRateAndRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates load from a load proposal and then assigned a scheduledRoute route.
    /// </summary>
    public void assignRateAndRoute()
    {
        TMSRoute        scheduledRoute = TMSRoute::find(routeCode);

        scheduledRouteLoad = WHSLoadTable::find(loadId);

        if (scheduledRouteLoad)
        {
            // Rate scheduledRoute route
            try
            {
                this.retrieveRateRoute(scheduledRoute);
            }
            catch
            {
                throw error(strFmt("@TRX:ErrorUnableAssignScheduledRouteToLoad", scheduledRouteLoad.LoadId));
            }

            // Assign route to load
            this.addRouteToLoad(scheduledRoute);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadId</Name>
				<Source><![CDATA[
    public WHSLoadId parmLoadId(WHSLoadId _loadId = loadId)
    {
        loadId = _loadId;

        return loadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteCode</Name>
				<Source><![CDATA[
    public TMSRouteCode parmRouteCode(TMSRouteCode _routeCode = routeCode)
    {
        routeCode = _routeCode;

        return routeCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveRateRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Rates a scheduledRoute route based on load data.
    /// </summary>
    /// <param name="_scheduledRoute">
    ///  <c>TMSRoute</c> table buffer for scheduled route.
    /// </param>
    /// <exception cref="Exception::Error">
    ///  Processing XML has failed.
    /// </exception>
    private void retrieveRateRoute(TMSRoute _scheduledRoute)
    {
        TMSProcessXML_Base      processXML;
        TMSCommProxy            commProxy = new TMSCommProxy();
        LogisticsPostalAddress  logisticsPostalAddress;
        LogisticsLocation       logisticsLocation;
        TMSAddressPhone         fromAdd;
        TMSAddressPhone         toAdd;
        WHSLoadLine             loadLine;
        WHSSTCCCode             retSTCC;
        WHSLTLClassCode         retLTL;
        SalesTable              salesTable;
        WHSShipmentTable        whsShipmentTable;

        // Initializes parameters for rating the route
        loadLine = WHSLoadLine::findFirstForLoadId(scheduledRouteLoad.LoadId);

        salesTable = loadLine.orderHeader() as SalesTable;

        fromAdd     = scheduledRouteLoad.originAddress();
        toAdd       = scheduledRouteLoad.destinationAddress();

        [retSTCC, retLTL] = TMSAutoRouteAssignment::findLoadSTCCandLTL(scheduledRouteLoad.LoadId);

        select firstonly DlvTermId,ShipCarrierAccount from whsShipmentTable
            where whsShipmentTable.LoadId == scheduledRouteLoad.LoadId;

        processXML = TMSProcessXML_Base::construct(TMSRecordType::Load);

        select firstOnly RecId from logisticsPostalAddress
            where logisticsPostalAddress.Location == fromAdd.parmLocation()
            join logisticsLocation
                where logisticsLocation.RecId == logisticsPostalAddress.Location;

        fromAdd.parmName(logisticsLocation.Description);
        processXML.parmOriginalOriginPostalAddress(logisticsPostalAddress.RecId);
        processXML.parmFromAddress(fromAdd);

        select firstOnly RecId from logisticsPostalAddress
            where logisticsPostalAddress.Location == toAdd.parmLocation()
            join logisticsLocation
                where logisticsLocation.RecId == logisticsPostalAddress.Location;

        toAdd.parmName(logisticsLocation.Description);
        processXML.parmOriginalDestinationPostalAddress(logisticsPostalAddress.RecId);
        processXML.parmToAddress(toAdd);

        processXML.parmCommunicationType(TMSCommunicationType::RateRoute);
        processXML.initCarrierFields(scheduledRouteLoad.CarrierCode, scheduledRouteLoad.CarrierServiceCode, scheduledRouteLoad.CarrierGroupCode, scheduledRouteLoad.ModeCode, scheduledRouteLoad.TransportationTemplateId);
        processXML.parmInventSiteId(_scheduledRoute.InventSiteId);
        processXML.parmInventLocationId(_scheduledRoute.InventLocationId);
        processXML.parmLTLClass(retLTL);
        processXML.parmSTCC(retSTCC);
        processXML.parmDlvDateTime(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::newDateTime(scheduledRouteLoad.loadArrivalDate(), timeMax()), DateTimeUtil::getCompanyTimeZone()));
        processXML.parmShipDateTime(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::newDateTime(scheduledRouteLoad.loadSchedShipDate(), timeMax()), DateTimeUtil::getCompanyTimeZone()));

        processXML.initShippingDimensions(
            scheduledRouteLoad.effectiveGrossWeight(),
            scheduledRouteLoad.effectiveTotalVolumeInLoad(),
            scheduledRouteLoad.displayTotalAmount(),
            scheduledRouteLoad.tmsDisplayEquipmentCode());

        processXML.parmFreightTerm(whsShipmentTable.DlvTermId ? whsShipmentTable.DlvTermId:salesTable.DlvTerm);
        processXML.parmVendAccount('');
        processXML.parmCustAccount(salesTable.CustAccount);

        processXML.parmParentInventTransType(InventTransType::Sales);

        processXML.parmCustInvoiceAccount(salesTable.InvoiceAccount);
        processXML.parmVendInvoiceAccount('');
        processXML.parmOrderDim(salesTable.DefaultDimension);
        processXML.parmId(scheduledRouteLoad.LoadId);

        processXML.parmRecordType(TMSRecordType::Load);

        processXML.parmRouteCode(_scheduledRoute.RouteCode);
        processXML.parmRouteConfigCode(_scheduledRoute.RouteConfigCode);
        processXML.parmRouteGuideRecId(_scheduledRoute.RouteGuideRecId);
        processXML.parmRoutePlanName(_scheduledRoute.RoutePlanName);
        processXML.parmScheduledRoute(true);

        processXML.execute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRouteWorkbench</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Runs the <c>TMSRouteWorkbench</c> form when a route is assigned to a load.
    /// </summary>
    /// <param name="_route">
    ///     The route assigned to the load.  It is passed to the Route Workbench form.
    /// </param>
    public void runRouteWorkbench(TMSRoute _route)
    {
        Args    args = new Args();

        args.record(_route);
        info(strFmt("@TRX:MessageRouteAssignedToLoadSuccess", loadId));
        new MenuFunction(formStr(TMSRouteWorkbench), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSScheduledRouteToLoadAssigner construct()
    {
        return new TMSScheduledRouteToLoadAssigner();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFreightPaymentOnLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that existing <c>WHSLoadTable</c> records connected to
    /// <c>TMSRoute</c> record have the same setup for freight payments.
    /// </summary>
    /// <param name="_routeCode">
    /// Route code selected for assignment.
    /// </param>
    /// <returns>
    /// True, if existing <c>WHSLoadTable</c> records connected to
    /// <c>TMSRoute</c> record have the same setup for freight payments, otherwise False.
    /// </returns>
    protected boolean validateFreightPaymentOnLoad(TMSRouteCode _routeCode)
    {
        WHSLoadTable whsLoadTable;
        boolean      ret = true;

        select firstOnly RecId from whsLoadTable
            where whsLoadTable.RouteCode == _routeCode
               && whsLoadTable.LoadPaysFreight != scheduledRouteLoad.LoadPaysFreight;

        if (whsLoadTable.RecId)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>