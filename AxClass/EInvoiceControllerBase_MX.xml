<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceControllerBase_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceFreetextController_MX</c> is the base controller class for the
/// <c>EInvoiceReport_MX</c> report.
/// </summary>
public abstract class EInvoiceControllerBase_MX extends SrsPrintMgmtFormLetterController
{
    EInvoiceMail_MX         eInvoiceMail;
    boolean                 sendMailCalled;
    EInvoiceParameters_MX   eInvoiceParameters;
    boolean                 usePrintMgmtDestinations;
    PrintCopyOriginal       printCopyOriginal;
    RecordSortedList        journalList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes basic properties of the controller.
    /// </summary>
    /// <param name = "_args">Args received from main method.</param>
    public void initialize(Args _args)
    {
        this.parmReportName(this.getReportName());
        this.parmArgs(_args);
        this.parmShowDialog(false);

        printCopyOriginal = this.parmArgs().parmEnum();

        int callerClassId = classIdGet(this.parmArgs().caller());

        sendMailCalled = callerClassId == classNum(EInvoiceMailSender_MX) || callerClassId == classNum(EInvoiceCFDIMailSender_MX);

        this.initJournalList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the list of journals to be printed, from the arguments.
    /// </summary>
    protected void initJournalList()
    {
        if (this.parmArgs().record())
        {
            // Get journal list from the selected record/s
            journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            journalList = this.parmArgs().object();
        }

        if (!journalList)
        {
            throw error("@SYS26348");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes instance of form letter object.
    /// </summary>
    protected void initFormLetterReport()
    {
        formLetterReport = FormLetterReport::construct(this.getPrintMgmtDocumentType());
        formLetterReport.parmPrintType(printCopyOriginal);

        this.setPrintMgmt(formLetterReport);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the print management configuration into <c>FormLetterReport.</c>
    /// </summary>
    /// <param name = "_formLetterReport">The  <c>FormLetterReport.</c> that will be used in report printing.</param>
    /// <remarks>
    /// Override this method to set print management configuration specific.
    /// </remarks>
    protected void setPrintMgmt(FormLetterReport _formLetterReport)
    {
        if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            _formLetterReport.parmUsePrintMgmtDestinations(true);
            usePrintMgmtDestinations = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document type for the print management.
    /// </summary>
    /// <returns>A <c>PrintMgmtDocumentType</c> option.</returns>
    protected abstract PrintMgmtDocumentType getPrintMgmtDocumentType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report for the controller
    /// </summary>
    /// <returns>The name of the report to be generated.</returns>
    protected SRSCatalogItemName getReportName()
    {
        if (this.isCFDI())
        {
            return ssrsReportStr(EInvoiceCFDIReport_MX, Report);
        }

        return ssrsReportStr(EInvoiceReport_MX, Report);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the EInvoice related to the original invoice being printed.
    /// </summary>
    /// <returns>The <c>EinvoiceJour_MX</c> related to the original invoice.</returns>
    protected EInvoiceJour_MX getEInvoiceJour()
    {
        return EInvoiceJour_MX::findByRef(this.getInvoiceJour().TableId, this.getInvoiceJour().RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements print management functionality.
    /// </summary>
    protected void runPrintMgmt()
    {
        boolean hasRecord = this.first();

        while (hasRecord && !this.parmCancelRun())
        {
            Common  printMgmtReferencedTable = this.getPrintMgmtReferencedTable();

            formLetterReport.loadPrintSettings(this.getInvoiceJour(), printMgmtReferencedTable, this.getInvoiceLanguageId());

            this.outputReports();

            hasRecord = this.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current invoice to be printed.
    /// </summary>
    /// <returns>A record of the transaction to be printed.</returns>
    protected abstract Common getInvoiceJour()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the first invoice to be printed in invoiceJour.
    /// </summary>
    /// <returns>True if there are one invoice and it was load.</returns>
    protected abstract boolean first()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the next invoice to be printed in invoiceJour.
    /// </summary>
    /// <returns>True if there are one more invoice and it was load.</returns>
    protected abstract boolean next()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the language id of the invoice transaction that is being printed.
    /// </summary>
    /// <returns>the language id.</returns>
    protected abstract LanguageId getInvoiceLanguageId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtReferencedTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the print management referenced table.
    /// </summary>
    /// <returns>A loaded record.</returns>
    protected abstract Common getPrintMgmtReferencedTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCFDI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if the invoice to be printed is CFDI or CFD.
    /// </summary>
    /// <returns>True if the invoice is a CFDI, false if is CFD.</returns>
    protected abstract boolean isCFDI()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendPDFEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the e-mail with a PDF attachment.
    /// </summary>
    /// <param name="_eInvoiceJourMapping">The electronic invoice record.</param>
    /// <param name="_printSettings">The print settings.</param>
    public void sendPDFEmail(EInvoiceJourBaseMap_MX _eInvoiceJourMapping, SRSPrintDestinationSettings _printSettings)
    {
        boolean attachPdf = this.isCFDI() ?
            sendMailCalled && EInvoiceCFDIParameters_MX::find().SendReportFile == NoYes::Yes :
            sendMailCalled;

        if (attachPdf)
        {
            BinData binData = this.getBinaryDataForReport(_printSettings);
            this.sendMail(binData, _eInvoiceJourMapping);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReport</Name>
				<Source><![CDATA[
    protected void outputReport()
    {
        EInvoiceJourBaseMap_MX eInvoiceJourMapping;
        SRSPrintDestinationSettings printerSettings = formLetterReport.getCurrentPrintSetting().parmPrintJobSettings();

        EInvoiceJour_MX eInvoiceJour_MX = this.getEInvoiceJour();
        eInvoiceJourMapping = EInvoiceJourBaseMap_MX::construct(eInvoiceJour_MX);

        if (sendMailCalled)
        {
            printerSettings.parmPrintToArchive(true);
            printerSettings.printMediumType(SRSPrintMediumType::Archive);
        }

        formLetterReport.getCurrentPrintSetting().parmReportFormatName(this.parmReportName());

        super();

        this.sendPDFEmail(eInvoiceJourMapping, printerSettings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the opportunity to modify the contract before the report is run.
    /// </summary>
    protected void preRunModifyContract()
    {
        super();

        this.setReportContractProperties();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportContractProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets report contract and sets its properties.
    /// </summary>
    protected void setReportContractProperties()
    {
        EInvoiceJour_MX eInvoiceJour_MX = this.getEInvoiceJour();

        if (!eInvoiceJour_MX)
        {
            throw error("@SYS26348");
        }

        if (this.isCFDI())
        {
            EInvoiceCFDIReportContract_MX contract = this.parmReportContract().parmRdpContract() as EInvoiceCFDIReportContract_MX;

            contract.parmRecordId(eInvoiceJour_MX.RecId);
            contract.parmPrintCopyOriginal(printCopyOriginal);
        }
        else
        {
            EInvoiceReportContract_MX contract = this.parmReportContract().parmRdpContract() as EInvoiceReportContract_MX;

            contract.parmRecordId(eInvoiceJour_MX.RecId);
            contract.parmPrintCopyOriginal(printCopyOriginal);
        }

        SrsReportRdlDataContract rdlContract = this.parmReportContract().parmRdlContract();

        if (rdlContract)
        {
            rdlContract.parmLanguageId(this.getInvoiceLanguageId());
            rdlContract.parmLabelLanguageId(this.getInvoiceLanguageId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructSendMail</Name>
				<Source><![CDATA[
    protected EInvoiceMail_MX constructSendMail(
        Filename                _fileName,
        BinData                 _reportData,
        SysEmailRecipients      _toEmailAddr,
        SysEmailDescriptionType _emailIdentifier)
    {
        return EInvoiceMail_MX::construct(_fileName, _reportData, _toEmailAddr, _emailIdentifier);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyEMail</Name>
				<Source><![CDATA[
    protected str getPartyEMail(EInvoiceJourBaseMap_MX _eInvoiceJourMapping)
    {
        LogisticsElectronicAddress electronicAddress;
        electronicAddress = DirParty::primaryElectronicAddress(_eInvoiceJourMapping.getCustTable().Party, LogisticsElectronicAddressMethodType::Email);
        return electronicAddress ? electronicAddress.Locator : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the report contract parameter.
    /// </summary>
    /// <param name="_reportContract">The new value of the report contract parameter; optional.</param>
    /// <returns>The current value of the report contract parameter.</returns>
    public SrsReportDataContract parmReportContract(SrsReportDataContract _reportContract = reportContract)
    {
        SrsReportDataContract ret;

        // getter is called
        if (prmisDefault(_reportContract))
        {
            ret = super();
        }
        else
        {
            ret = super(_reportContract);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends an e-mail with a PDF attachment.
    /// </summary>
    /// <param name="_reportFile">The report file name.</param>
    /// <param name="_eInvoiceJourMapping">An <c>EInvoiceJourBaseMap_MX</c> record.</param>
    public void sendMail(BinData _reportFile, EInvoiceJourBaseMap_MX _eInvoiceJourMapping)
    {
        str         eMailId;
        str         eMailAddress;
        FileName    fileName;

        #define.EmailIdPrefixName('PdfEinvoice_')

        fileName = strFmt('EInvoice_%1.pdf', _eInvoiceJourMapping.invoiceId());

        emailAddress = this.getPartyEmail(_eInvoiceJourMapping);
        eMailId = #EmailIdPrefixName + _eInvoiceJourMapping.invoiceId();
        eInvoiceMail = this.constructSendMail(fileName, _reportFile, eMailAddress, eMailId);
        eInvoiceMail.addInvoiceNumberToMailSubject(_eInvoiceJourMapping.invoiceId());

        eInvoiceMail.sendMail();

        sendMailCalled = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBinaryDataForReport</Name>
				<Source><![CDATA[
    protected BinData getBinaryDataForReport(SRSPrintDestinationSettings _printerSettings)
    {
        PrintJobHeader printJobHeader;
        DocuRef        docuRef;

        select firstonly docuRef
            exists join printJobHeader
                where printJobHeader.printedTime == _printerSettings.parmSRSPrintArchiveContract().parmExecutionTime()
                    && printJobHeader.printedDate == _printerSettings.parmSRSPrintArchiveContract().parmExecutionDate()
                    && printJobHeader.jobDescription == _printerSettings.parmSRSPrintArchiveContract().parmJobDescription()
                    && printJobHeader.printedBy == curUserId()
                    && printJobHeader.RecId == docuRef.RefRecId
                    && printJobHeader.TableId == docuRef.RefTableId;

        BinData binData = new BinData();
        binData.setData(DocumentManagement::getAttachmentAsContainer(docuRef));

        return binData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>