<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetJournalAdd</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetJournalAdd extends RunBase
{
    LedgerJournalTable      ledgerJournalTable;

    RAssetTransDate         runDate;
    RAssetTransType         transType;
    RAssetId                rAssetId;
    RAssetStandardId        rAssetStandardId;
    RAssetDeprBonusId       bonusId;
    RAssetDeprBonusDateType bonusDateType;
    ReasonCode              reasonCode;
    ReasonComment           reasonComment;
    NoYes                   correct;
    CorrectedPeriod_RU      correctedPeriod;
    private NoYes calcToTransDate;

    DialogField             dlgRunDate;
    DialogField             dlgTransType;
    DialogField             dlgRAssetId;
    DialogField             dlgRAssetStandardId;
    DialogField             dlgBonusId;
    DialogField             dlgBonusDateType;
    DialogField             dlgReasonCode;
    DialogField             dlgReasonComment;
    DialogField             dlgCorrect;
    DialogField             dlgCorrectedPeriod;
    private DialogField dlgCalcToTransDate;


    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        runDate,
        transType,
        rAssetId,
        rAssetStandardId,
        bonusId,
        bonusDateType,
        reasonCode,
        reasonComment
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addJournalLine</Name>
				<Source><![CDATA[
    private void addJournalLine(RAssetStandardId _assetStandardId)
    {
        RAssetStandards   rAssetStandards = RAssetStandards::find(rAssetId, _assetStandardId);
        RAssetProposal    rAssetProposal  = RAssetProposal::construct(transType);
        ReasonRefRecID    reasonRefRecID  = ReasonTableRef::createReasonTableRef(reasonCode, reasonComment);
    
        rAssetProposal.parmReasonRefRecId(reasonRefRecID);
        rAssetProposal.initParameters(ledgerJournalTable.JournalNum, runDate, rAssetStandards, '', true);
        rAssetProposal.initParmDeprBonus(bonusId, bonusDateType);
        rAssetProposal.parmCalcToTransDate(calcToTransDate);
    
        if (correct)
        {
            rAssetProposal.parmCorrect(correct);
            rAssetProposal.parmCorrectedPeriod(correctedPeriod);
            rAssetProposal.initJournalCorrection();
        }
    
        if (rAssetProposal.canCreateJournalLine(_assetStandardId))
        {
            rAssetProposal.createJournalLines(_assetStandardId, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class in which the same parameters can be used
    ///    repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    ///    classes might build on data that is only valid for a short time. Not all classes can be run two
    ///    times with the same parameters. If the <c>canGoBatch</c> method returns false, this method will not
    ///    have any effect.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog =  super();
    
        dialog.caption("@GLS116118");
    
        dlgRunDate           = dialog.addFieldValue(extendedTypeStr(RAssetTransDate), runDate);
        dlgTransType         = dialog.addFieldValue(enumStr(RAssetTransType), transType);
        dlgRAssetId          = dialog.addFieldValue(extendedTypeStr(RAssetId), rAssetId);
        dlgRAssetStandardId  = dialog.addFieldValue(extendedTypeStr(RAssetStandardId), rAssetStandardId);
    
        dialog.addGroup("@GLS116827");
        dlgBonusId           = dialog.addFieldValue(extendedTypeStr(RAssetDeprBonusId), bonusId);
        dlgBonusId.enabled(false);
        dlgBonusDateType     = dialog.addFieldValue(enumStr(RAssetDeprBonusDateType), bonusDateType);
        dlgBonusDateType.enabled(false);
    
        dialog.addGroup("@SYS86426");
        dlgReasonCode        = dialog.addFieldValue(extendedTypeStr(ReasonCode), reasonCode);
        dlgReasonComment     = dialog.addFieldValue(extendedTypeStr(ReasonComment), reasonComment);
    
        dialog.addGroup("@GLS105434");
        dlgCorrect           = dialog.addFieldValue(extendedTypeStr(NoYesId), NoYes::No, "@GLS111911");
        dlgCorrectedPeriod   = dialog.addFieldValue(extendedTypeStr(CorrectedPeriod_RU), dateNull());

        dialog.addGroup("@SYS334035");
        dlgCalcToTransDate = dialog.addFieldValue(extendedTypeStr(NoYesId), NoYes::No, "@ApplicationSuite_Localization:CalcToTransDate");
    
        dlgTransType.control().registerOverrideMethod(
            methodStr(FormComboBoxControl, modified),
            methodStr(RAssetJournalAdd, dialogAssetTransType_modified),
            this);
    
        dlgRAssetId.control().registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(RAssetJournalAdd, dialogRAssetId_lookup),
            this);
        dlgRAssetId.control().registerOverrideMethod(
            methodStr(FormStringControl, jumpRef),
            methodStr(RAssetJournalAdd, dialogRAssetId_jumpRef),
            this);
        dlgRAssetId.control().registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(RAssetJournalAdd, dialogRAssetId_modified),
            this);
    
        dlgRAssetStandardId.control().registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(RAssetJournalAdd, dialogRAssetStandardId_lookup),
            this);
        dlgRAssetStandardId.control().registerOverrideMethod(
            methodStr(FormStringControl, jumpRef),
            methodStr(RAssetJournalAdd, dialogRAssetStandardId_jumpRef),
            this);
        dlgRAssetStandardId.control().registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(RAssetJournalAdd, dialogRAssetStandardId_modified),
            this);
    
        dlgBonusId.control().registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(RAssetJournalAdd, dialogBonusId_lookup),
            this);
        dlgBonusId.control().registerOverrideMethod(
            methodStr(FormStringControl, jumpRef),
            methodStr(RAssetJournalAdd, dialogBonusId_jumpRef),
            this);
    
        dlgReasonCode.control().registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(RAssetJournalAdd, dialogReasonCode_lookup),
            this);
        dlgReasonCode.control().registerOverrideMethod(
            methodStr(FormStringControl, jumpRef),
            methodStr(RAssetJournalAdd, dialogReasonCode_jumpRef),
            this);
        dlgReasonCode.control().registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(RAssetJournalAdd, dialogReasonCode_modified),
            this);
    
        dlgCorrect.control().registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(RAssetJournalAdd, dialogCorrect_modified),
            this);
    
        this.setControl();
        this.updateCorrectedPeriod();
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAssetTransType_modified</Name>
				<Source><![CDATA[
    private boolean dialogAssetTransType_modified(FormComboBoxControl _ctrl)
    {
        boolean           ret                  = _ctrl.modified();
        FormStringControl ctrlRAssetId         = dlgRAssetId.control();
        FormStringControl ctrlRAssetStandardId = dlgRAssetStandardId.control();
        FormStringControl ctrlBonusId          = dlgBonusId.control();
    
        ctrlRAssetId.text("");
        ctrlRAssetStandardId.text("");
    
        if (dlgTransType.value() != RAssetTransType::Revaluation &&
            dlgTransType.value() != RAssetTransType::Acquisition)
        {
            ctrlBonusId.text("");
        }
    
        this.setControl();
    
        ctrlRAssetId.update();
        ctrlRAssetStandardId.update();
        ctrlBonusId.update();
    
        this.updateCorrectedPeriod();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBonusId_jumpRef</Name>
				<Source><![CDATA[
    private void dialogBonusId_jumpRef(FormStringControl _ctrl)
    {
        RAssetBonus         rAssetBonus = RAssetBonus::find(_ctrl.valueStr());
        Args                args = new Args();

        args.record(rAssetBonus);
        new MenuFunction(menuitemDisplayStr('RAssetBonus'), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBonusId_lookup</Name>
				<Source><![CDATA[
    private void dialogBonusId_lookup(FormStringControl _ctrl)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tableNum(RAssetBonus));
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(RAssetBonus), _ctrl);

        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupfield(fieldNum(RAssetBonus, BonusId));
        sysTableLookup.addLookupfield(fieldNum(RAssetBonus, Description));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogRAssetId_jumpRef</Name>
				<Source><![CDATA[
    private void dialogRAssetId_jumpRef(FormStringControl _ctrl)
    {
        Args args = new Args();
        FormRun formRun;
        FormDataSource formDataSource;

        RAssetGroupTypes rAssetGroupType = RAssetMainGroup::find(RAssetTable::find(_ctrl.valueStr()).AssetGroup).GroupType;
        MenuItemName menuItemName;

        switch (rAssetGroupType)
        {
            case RAssetGroupTypes::FixedAssets:
                menuItemName = menuItemDisplayStr(RAssetTable);
                break;

            case RAssetGroupTypes::Cloths:
                menuItemName = menuItemDisplayStr(RAssetClothsTable);
                break;

            case RAssetGroupTypes::LowCostAssets:
                menuItemName = menuItemDisplayStr(RAssetLowCostTable);
                break;

            case RAssetGroupTypes::Rigging:
                menuItemName = menuItemDisplayStr(RAssetRiggingTable);
                break;

            default:
                menuItemName = menuItemDisplayStr(RAssetTable);
                break;
        }

        args.parmEnum(rAssetGroupType);
        MenuFunction mf = new MenuFunction(menuItemName, MenuItemType::Display);
        formRun = mf.create(Args);
        formDataSource = formRun.dataSource(1);
        formRun.run();
        formDataSource.filter(fieldNum(RAssetTable, AccountNum), _ctrl.valueStr());
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogRAssetId_lookup</Name>
				<Source><![CDATA[
    private void dialogRAssetId_lookup(FormStringControl _ctrl)
    {
        RAssetTable::lookupAccountNum(_ctrl, curext(), dlgTransType.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogRAssetId_modified</Name>
				<Source><![CDATA[
    private boolean dialogRAssetId_modified(FormStringControl _ctrl)
    {
        boolean           ret                  = _ctrl.modified();
        FormStringControl ctrlRAssetStandardId = dlgRAssetStandardId.control();

        ctrlRAssetStandardId.text("");

        this.setControl();

        ctrlRAssetStandardId.update();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogRAssetStandardId_jumpRef</Name>
				<Source><![CDATA[
    private void dialogRAssetStandardId_jumpRef(FormStringControl _ctrl)
    {
        RAssetStandardTable assetStandardTable;
        Args                args = new Args();

        assetStandardTable = RAssetStandardTable::find(_ctrl.valueStr());
        args.record(assetStandardTable);
        new MenuFunction(menuitemDisplayStr('RAssetStandardTable'), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogRAssetStandardId_lookup</Name>
				<Source><![CDATA[
    private void dialogRAssetStandardId_lookup(FormStringControl _ctrl)
    {
        RAssetStandards::lookupStandards(_ctrl, dlgRAssetId.value(), curext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogRAssetStandardId_modified</Name>
				<Source><![CDATA[
    private boolean dialogRAssetStandardId_modified(FormStringControl _ctrl)
    {
        boolean ret = _ctrl.modified();

        this.setControl();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogReasonCode_jumpRef</Name>
				<Source><![CDATA[
    private void dialogReasonCode_jumpRef(FormStringControl _ctrl)
    {
        Args args = new Args();
        args.parmEnumType(enumNum(ReasonCodeAccountTypeAll));
		args.parmEnum(enum2int(ReasonCodeAccountTypeAll::RAsset));

		FormRun formRun = new MenuFunction(menuitemDisplayStr(Reasons), MenuItemType::Display).create(args);
        formRun.run();
        formRun.wait();

    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogReasonCode_lookup</Name>
				<Source><![CDATA[
    private void dialogReasonCode_lookup(FormStringControl _ctrl)
    {
        LedgerJournalACType     ledgerJournalACType;

        ledgerJournalACType = LedgerJournalACType::FixedAssets_RU;
        ReasonFormTable::reasonCodeLookup(_ctrl, ledgerJournalACType, ledgerJournalACType, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogReasonCode_modified</Name>
				<Source><![CDATA[
    private boolean dialogReasonCode_modified(FormStringControl _ctrl)
    {
        boolean           ret               = _ctrl.modified();
        FormStringControl ctrlReasonComment = dlgReasonComment.control();

        ctrlReasonComment.text(ReasonTable::find(_ctrl.text()).Description);

        this.setControl();

        ctrlReasonComment.update();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// reads the entered dialog values from controls and put them to internal class variables
    /// </summary>
    /// <returns>
    /// a Boolean sign, true - the method is fulfilled successfully
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();
    
        if (ret)
        {
            runDate           = dlgRunDate.value();
            transType         = dlgTransType.value();
            rAssetId          = dlgRAssetId.value();
            rAssetStandardId  = dlgRAssetStandardId.value();
            bonusId           = dlgBonusId.value();
            bonusDateType     = dlgBonusDateType.value();
            reasonCode        = dlgReasonCode.value();
            reasonComment     = dlgReasonComment.value();
            correct           = dlgCorrect.value();
            correctedPeriod   = dlgCorrectedPeriod.value();
            calcToTransDate = dlgCalcToTransDate.value();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];

    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBonusDateType</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetDeprBonusDateType parmBonusDateType(RAssetDeprBonusDateType _bonusDateType = bonusDateType)
    {
        bonusDateType = _bonusDateType;

        return bonusDateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBonusId</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetDeprBonusId parmBonusId(RAssetDeprBonusId _bonusId = bonusId)
    {
        bonusId = _bonusId;

        return bonusId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTable</Name>
				<Source><![CDATA[
    public LedgerJournalTable parmLedgerJournalTable(LedgerJournalTable _ledgerJournalTable = ledgerJournalTable)
    {
        ledgerJournalTable = _ledgerJournalTable;

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRAssetId</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetId parmRAssetId(RAssetId _rAssetId = rAssetId)
    {
        rAssetId = _rAssetId;

        return rAssetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRAssetStandardId</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetStandardId parmRAssetStandardId(RAssetStandardId     _rAssetStandardId = rAssetStandardId)
    {
        rAssetStandardId = _rAssetStandardId;

        return rAssetStandardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonCode</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public ReasonCode parmReasonCode(ReasonCode _reasonCode = reasonCode)
    {
        reasonCode = _reasonCode;

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonComment</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public ReasonComment parmReasonComment(ReasonComment _reasonComment = reasonComment)
    {
        reasonComment = _reasonComment;

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetTransDate parmTransDate(RAssetTransDate _runDate = runDate)
    {
        runDate = _runDate;

        return runDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransType</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetTransType parmTransType(RAssetTransType _transType = transType)
    {
        transType = _transType;

        return transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RAssetStandards  assetStandards;
        DictEnum         assetTransTypeEnum   = new DictEnum(enumNum(RAssetTransType));
        boolean          addLineFromAllModels = RAssetProposal::addLineFromAllModels(transType) || ! rAssetStandardId;

        setPrefix("@GLS116185");
        ttsbegin;
        while select AssetStandardId from assetStandards
            where assetStandards.AssetId == rAssetId
        {
            setPrefix("@GLS104327" + "@GLS111192" + "@GLS102908" + assetStandards.AssetStandardId);

            if (addLineFromAllModels ||
                assetStandards.AssetStandardId == rAssetStandardId ||
                RAssetStandardTableDerived::existDerived(rAssetStandardId,
                                                         assetStandards.AssetStandardId,
                                                         assetTransTypeEnum.index2Value(transType)))
            {
                this.addJournalLine(assetStandards.AssetStandardId);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControl</Name>
				<Source><![CDATA[
    private void setControl()
    {
        dlgRAssetStandardId.allowEdit(! RAssetProposal::addLineFromAllModels(dlgTransType.value()));
        dlgBonusId.enabled(dlgTransType.value() == RAssetTransType::Revaluation ||
                           dlgTransType.value() == RAssetTransType::Acquisition);
        dlgBonusDateType.enabled(dlgTransType.value() == RAssetTransType::Revaluation);
        dlgCalcToTransDate.visible(dlgTransType.value() == RAssetTransType::Depreciation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// validates the entered dialog values
    /// </summary>
    /// <param name="_calledFrom">
    /// the instance of the dialog
    /// </param>
    /// <returns>
    /// a Boolean sign, true - the validations are OK.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        RAssetGroup rAssetGroup;
        boolean     ret;
    
        ret = super(_calledFrom);
    
        if (! runDate)
        {
            ret = checkFailed(strFmt("@SYS116347", new DictType(extendedTypeNum(RAssetTransDate)).label()));
        }
    
        if (! rAssetId)
        {
            ret = checkFailed(strFmt("@SYS116347", new DictType(extendedTypeNum(RAssetId)).label()));
        }
    
        if (rAssetId && rAssetStandardId && bonusId)
        {
            rAssetGroup = RAssetGroup::find(RAssetStandards::find(rAssetId, rAssetStandardId).AssetGroup);
            if (RAssetBonus::find(bonusId).Percentage > rAssetGroup.DepreciationBonusPercent)
            {
                ret = checkFailed(strFmt("@GLS114350", rAssetGroup.DepreciationBonusPercent, rAssetGroup.AssetGroupId));
            }
        }
    
        if (reasonCode)
        {
            if (! ReasonTable::exist(reasonCode))
            {
                ret = checkFailed(strFmt("@SYS112224", reasonCode, fieldId2name(tableNum(ReasonTable), fieldNum(ReasonTable, Reason)), tableId2name(tableNum(ReasonTable))));
            }
        }
        else if (RAssetParameters::transTypeRequiresValidation(transType))
        {
             ret = checkFailed(strFmt("@SYS116347", fieldPName(ReasonTableRef, Reason)));
        }
    
        if (correct)
        {
            if (!correctedPeriod)
            {
                ret = checkFailed(strfmt("@SYS110217", "@GLS111794"));
            }
    
            if (ret && (runDate < correctedPeriod))
            {
                ret = checkFailed(strfmt("@SYS91558", "@SYS67", "@GLS111794"));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RAssetJournalAdd construct()
    {
        return new RAssetJournalAdd();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// constructs the new instance of the RAssetJournalAdd class
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// a record of LedgerJournalTable table
    /// </param>
    /// <returns>
    /// the new instance of the RAssetJournalAdd class
    /// </returns>
    public static RAssetJournalAdd constructFromLedgerJournalTable(LedgerJournalTable _ledgerJournalTable)
    {
        RAssetJournalAdd journalAdd = RAssetJournalAdd::construct();

        journalAdd.parmLedgerJournalTable(_ledgerJournalTable);

        return journalAdd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RAssetJournalAdd journalAdd;

        if (_args.record() && _args.dataset() == tableNum(LedgerJournalTable))
        {
            journalAdd = RAssetJournalAdd::constructFromLedgerJournalTable(_args.record());
        }
        else
        {
            throw error("@SYS18626");
        }

        if (journalAdd.prompt())
        {
            journalAdd.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogCorrect_modified</Name>
				<Source><![CDATA[
    private boolean dialogCorrect_modified(FormCheckBoxControl _ctrl)
    {
        boolean ret = _ctrl.modified();
    
        if (ret)
        {
            this.updateCorrectedPeriod();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrect</Name>
				<Source><![CDATA[
    public NoYes parmCorrect(NoYes _correct = correct)
    {
        correct = _correct;
    
        return correct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedPeriod</Name>
				<Source><![CDATA[
    public CorrectedPeriod_RU parmCorrectedPeriod(CorrectedPeriod_RU _correctedPeriod = correctedPeriod)
    {
        correctedPeriod = _correctedPeriod;
    
        return correctedPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCorrectedPeriod</Name>
				<Source><![CDATA[
    private void updateCorrectedPeriod()
    {
        boolean allowSetupCorrectedPeriod = dlgTransType.value() != RAssetTransType::Depreciation;
        ;
    
        dlgCorrect.enabled(allowSetupCorrectedPeriod);
    
        if (!allowSetupCorrectedPeriod)
        {
            dlgCorrect.value(false);
        }
    
        dlgCorrectedPeriod.enabled(dlgCorrect.value());
    
        if (dlgCorrect.value())
        {
            dlgCorrectedPeriod.value(dlgRunDate.value());
        }
        else
        {
            dlgCorrectedPeriod.value(dateNull());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>