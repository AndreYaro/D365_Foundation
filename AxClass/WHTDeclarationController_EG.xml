<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHTDeclarationController_EG</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHTDeclarationController_EG</c> class is the controller class for Egypt WHT Declaration report.
/// </summary>
internal final class WHTDeclarationController_EG extends ERFormatMappingRunBaseController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WHTDeclarationController_EG controller = WHTDeclarationController_EG::construct();

        controller.parmArgs(_args);
        controller.prePromptModifyContract();
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a VATDeclarationController_W child class depending on the current CountryRegionCode.
    /// </summary>
    /// <returns>
    /// Returns new instance of chosen controller class.
    /// </returns>
    public static WHTDeclarationController_EG construct()
    {
        WHTDeclarationController_EG controller = new WHTDeclarationController_EG(
            classStr(WHTDeclarationService_EG),
            methodStr(WHTDeclarationService_EG, generateReports),
            SysOperationExecutionMode::Synchronous);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        WHTDeclarationContract_EG contract = this.getDataContractObject() as WHTDeclarationContract_EG;

        if (contract)
        {
            ERFormatMappingId whtReportFormatMappingId = LedgerParameters::find().ERFormatMappingWHT_EG;

            if (!whtReportFormatMappingId)
            {
                throw error(strFmt("@WHTDeclaration_EG:ParameterMustBeSelectedInTheGLParametersForm", fieldPName(LedgerParameters, ERFormatMappingWHT_EG)));
            }

            if (this.parmArgs() && this.parmArgs().parmObject() && this.parmArgs().parmObject().name() == classStr(TaxWithholdSettlement_TH))
            {
                TaxWithholdPeriodId_TH taxWithholdPeriodRecId = this.parmArgs().parmObject().taxWithholdPeriodRecId();
                FromDate dateFrom = this.parmArgs().parmObject().fromDate();

                TaxWithholdPeriodHead_TH taxWithholdPeriodHead = TaxWithholdPeriodHead_TH::find(taxWithholdPeriodRecId);
                TaxWithholdReportPeriod_TH whtReportPeriod = TaxWithholdReportPeriod_TH::findByPeriodWithholdDate(taxWithholdPeriodRecId, dateFrom);
                ToDate dateTo = whtReportPeriod.TaxWithholdToDate;

                contract.parmDateFrom(dateFrom);
                contract.parmtaxWithholdPeriodId(taxWithholdPeriodHead.TaxWithholdPeriod);
                contract.parmDateTo(dateTo);
                contract.parmFormatMapping(whtReportFormatMappingId);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>