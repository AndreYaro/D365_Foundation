<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceCapInvTransferProcessorBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;
internal abstract class VendInvoiceCapInvTransferProcessorBase
{
    protected VendInvoiceCapturedInvoiceInfoEntity infoEntity;
    protected DataAreaId dataAreaId;
    protected JObject capturedDocument;
    protected container capturedAttachment;
    protected str referenceId;
    protected CapturedInvoiceType invoiceType;
    protected NoYes transferAttachment;
    protected Map dimensionMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(VendInvoiceCapturedInvoiceInfoEntity _capturedInvoice, NoYes _transferAttachment)
    {
        // serialize invoice object
        JObject invoiceObject = this.deserializeInvoice(_capturedInvoice.CapturedInvoiceInfo);
        if (_transferAttachment == NoYes::Yes)
        {
            this.capturedAttachment = _capturedInvoice.AttachmentContent1;
        }
        this.infoEntity = _capturedInvoice;
        this.dataAreaId = _capturedInvoice.DataAreaId;
        this.capturedDocument = invoiceObject;
        this.referenceId = _capturedInvoice.CapturedDocumentId;
        this.invoiceType = _capturedInvoice.InvoiceType;
        this.transferAttachment = _transferAttachment;
        this.dimensionMap = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferInvoice</Name>
				<Source><![CDATA[
    public abstract void transferInvoice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deserializeInvoice</Name>
				<Source><![CDATA[
    public JObject deserializeInvoice(str encodedInvoice)
    {
        try
        {
            return Newtonsoft.Json.JsonConvert::DeserializeObject(System.Text.Encoding::UTF8.GetString(System.Convert::FromBase64String(encodedInvoice)));
        }
        catch (Exception::CLRError)
        {
            warning("Deserialize failed");
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    public void clear(VendInvoiceCapturedInvoiceInfoEntity capturedInvoice)
    {
        capturedInvoice.CapturedInvoiceInfo = '';
        capturedInvoice.AttachmentContent1 = conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmDataAreaId(DataAreaId _dataAreaId = dataAreaId)
    {
        dataAreaId = _dataAreaId;
        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCapturedDocument</Name>
				<Source><![CDATA[
    public JObject parmCapturedDocument(JObject _capturedDocument = capturedDocument)
    {
        capturedDocument = _capturedDocument;
        return capturedDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCapturedAttachment</Name>
				<Source><![CDATA[
    public container parmCapturedAttachment(container _capturedAttachment = capturedAttachment)
    {
        capturedAttachment = _capturedAttachment;
        return capturedAttachment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceId</Name>
				<Source><![CDATA[
    public str parmReferenceId(str _referenceId = referenceId)
    {
        referenceId = _referenceId;
        return referenceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCapturedInvoiceType</Name>
				<Source><![CDATA[
    public CapturedInvoiceType parmCapturedInvoiceType(CapturedInvoiceType _invoiceType = invoiceType)
    {
        invoiceType = _invoiceType;
        return invoiceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferAttachment</Name>
				<Source><![CDATA[
    public NoYes parmTransferAttachment(NoYes _transferAttachment = transferAttachment)
    {
        transferAttachment = _transferAttachment;
        return transferAttachment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalName</Name>
				<Source><![CDATA[
    protected LedgerJournalNameId getJournalName(LedgerJournalType ledgerJournalType)
    {
        OMLegalEntity omLegalEntity;
        CapturedInvoiceLegalEntity capturedInvoiceLegalEntity;

        select firstonly JournalName from capturedInvoiceLegalEntity
            join omLegalEntity
            where omLegalEntity.LegalEntityId == this.dataAreaId
            && capturedInvoiceLegalEntity.Selected == omLegalEntity.RecId;

        return capturedInvoiceLegalEntity.JournalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityAttributes</Name>
				<Source><![CDATA[
    protected JArray getEntityAttributes(JObject jObject)
    {
        JArray jArray = jObject.SelectToken('Attributes');
        return jArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntFromJObjectValue</Name>
				<Source><![CDATA[
    protected final int getIntFromJObjectValue(JObject jObject)
    {
        return jObject.GetValue('Value');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRealFromJObjectValue</Name>
				<Source><![CDATA[
    protected final real getRealFromJObjectValue(JObject jObject)
    {
        JObject nestedObject = jObject.GetValue('Value') as JObject;
        if (nestedObject != null)
        {
            return nestedObject.GetValue('Value');
        }
        else
        {
            return jObject.GetValue('Value');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContainerFromSASUrl</Name>
				<Source><![CDATA[
    protected final container getContainerFromSASUrl(str sasUrl)
    {
        System.Net.WebRequest request = System.Net.WebRequest::CreateHttp(sasUrl);
        request.set_Method("GET");
        System.Net.HttpWebResponse response = request.GetResponse();
        var connectStream = response.GetResponseStream();

        using(System.IO.MemoryStream stream = new System.IO.MemoryStream())
        {
            connectStream.CopyTo(stream);
            Binary binary = Binary::constructFromMemoryStream(stream);
            return Binary.getContainer();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContainerFromJObject</Name>
				<Source><![CDATA[
    protected final container getContainerFromJObject(JObject jObject, str propName)
    {
        str sasUrl = this.getStrFromJObject(jObject, propName);
        return this.getContainerFromSASUrl(sasUrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNoYesFromJObject</Name>
				<Source><![CDATA[
    protected final NoYes getNoYesFromJObject(JObject jObject, str propName)
    {
        str ans = this.getStrFromJObject(jObject, propName);
        return ans == "" || ans == "0" ? NoYes::No : NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStrFromJObject</Name>
				<Source><![CDATA[
    protected final str getStrFromJObject(JObject jObject, str propName)
    {
        JToken token = this.getPropertyValueFromJsonObject(jObject, propName);
        return token == null  ? "" : token.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStrFromJObjectValue</Name>
				<Source><![CDATA[
    protected final str getStrFromJObjectValue(JObject jObject)
    {
        return jObject.GetValue('Value').ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateFromJObjectValue</Name>
				<Source><![CDATA[
    protected final date getDateFromJObjectValue(JObject jObject)
    {
        return str2Date(this.getStrFromJObjectValue(jObject), 213);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNoYesFromJObjectValue</Name>
				<Source><![CDATA[
    protected final NoYes getNoYesFromJObjectValue(JObject jObject)
    {
        str ans = this.getStrFromJObjectValue(jObject);
        return ans == "" || ans == "0" ? NoYes::No : NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPropertyNameFromJObject</Name>
				<Source><![CDATA[
    protected final str getPropertyNameFromJObject(JObject jObject)
    {
        return jObject.GetValue('Key').ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPropertyValueFromJsonObject</Name>
				<Source><![CDATA[
    protected JToken getPropertyValueFromJsonObject(JObject jObject, str propName)
    {
        if (jObject != null && jObject.HasValues)
        {
            JToken jToken = jObject.get_Item(propName);
            return jToken;
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocuTypeId</Name>
				<Source><![CDATA[
    protected final DocuTypeId getDocuTypeId()
    {
        OMLegalEntity omLegalEntity;
        CapturedInvoiceLegalEntity capturedInvoiceLegalEntity;

        select firstonly AttachmentDocuTypeId from capturedInvoiceLegalEntity
            join omLegalEntity 
            where omLegalEntity.LegalEntityId == this.dataAreaId 
            && capturedInvoiceLegalEntity.Selected == omLegalEntity.RecId;

        if (capturedInvoiceLegalEntity.AttachmentDocuTypeId == null)
        {
            throw error('@AccountsPayable:AttachmentDocuTypeIdNotDefinedError');
        }

        return capturedInvoiceLegalEntity.AttachmentDocuTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLegalEntityValidity</Name>
				<Source><![CDATA[
    protected final void checkLegalEntityValidity()
    {
        OMLegalEntity omLegalEntity;
        CapturedInvoiceLegalEntity capturedInvoiceLegalEntity;

        select firstonly Selected from capturedInvoiceLegalEntity
            join omLegalEntity
            where omLegalEntity.LegalEntityId == this.dataAreaId
            && capturedInvoiceLegalEntity.Selected == omLegalEntity.RecId;

        if (capturedInvoiceLegalEntity.Selected == 0)
        {
            throw error(strFmt('@AccountsPayable:LegalEntityNotInSyncListError', this.dataAreaId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimensionValue</Name>
				<Source><![CDATA[
    protected str getDefaultDimensionValue()
    {
        if(dimensionMap.elements() == 0)
        {
            return "";
        }

        str displayValue;
        str dimensionSegmentDelimiter = DimensionParameters::getDimensionSegmentDelimiter();
        DefaultDimensionIntegrationStructureDisplay dimensionAttributesFormat = DimensionHierarchy::getDisplayStringDimensionIntegrationStructure(DimensionDataEntityStructureType::DataEntityDefaultDimensionFormat);
        List dimensionNames = DimensionResolver::splitByDimensionIntegrationDelimiter(dimensionAttributesFormat);
        ListEnumerator listEnum = dimensionNames.getEnumerator();
        int levelCount = 0;
        boolean hasDimension = false;

        while (listEnum.moveNext())
        {
            str dimensionName = listEnum.current();
            str segmentValue;

            if(dimensionMap.exists(dimensionName))
            {
                segmentValue = any2Str(dimensionMap.lookup(dimensionName));
                hasDimension = hasDimension || (segmentValue != "");
            }

            displayValue += (levelCount == 0) ? segmentValue : (dimensionSegmentDelimiter + segmentValue) ;
            levelCount++;
        }
        return hasDimension ? displayValue : "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertToDimensionMap</Name>
				<Source><![CDATA[
    protected void insertToDimensionMap(str dimensionName, str dimensionValue)
    {
        dimensionMap.insert(dimensionName, dimensionValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDimensionMap</Name>
				<Source><![CDATA[
    protected void resetDimensionMap()
    {
        dimensionMap = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>byte2Container</Name>
				<Source><![CDATA[
    private container byte2Container(System.Byte[] value)
    {
        container blobContainer;
        using (System.IO.MemoryStream stream = new System.IO.MemoryStream(value))
        {
            Binary binary = Binary::constructFromMemoryStream(stream);
            blobContainer = binary.getContainer();
            return blobContainer;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>