<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetPost_DisposalScrap</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetPost_DisposalScrap extends RAssetPost_Disposal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateAssetTrans</Name>
				<Source><![CDATA[
    public boolean canCreateAssetTrans()
    {
        return ledgerJournalTrans_RAsset.CanDisposal ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    public RAssetTrans initFromLedgerJournalTrans()
    {
        RAssetSumCalc rassetSumTrans;
        ;
        rAssetTrans = super();
        rassetSumTrans = RAssetSumCalc_Trans::newAssetPeriod(ledgerJournalTrans_RAsset.AssetId,
                                                             ledgerJournalTrans_RAsset.StandardId,
                                                             ledgerJournalTrans_RAsset.getTransDate(ledgerJournalTrans));
        rAssetTrans.Txt       = '';
        rAssetTrans.AmountCur = -rassetSumTrans.netBookValue();
        rAssetTrans.AmountMST = CurrencyExchangeHelper::mstAmount(rAssetTrans.AmountCur, rAssetTrans.CurrencyCode, transDate);
        return rAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lossAmount</Name>
				<Source><![CDATA[
    public RAssetAmount lossAmount()
    {
        RAssetAmount lossAmount;
        ;
        lossAmount   = CurrencyExchangeHelper::curAmount2CurAmount(ledgerJournalTrans_RAsset.sumDisposable(ledgerJournalTrans), ledgerJournalTrans.CurrencyCode, rAssetStandards.CurrencyCode, transDate);
        lossAmount = RassetDisposalValue::postValue(rAssetStandards.AssetId,
                                                    rAssetStandards.AssetStandardId,
                                                    RAssetPostValue::Gain,
                                                    lossAmount,
                                                    transDate);
        return lossAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post()
    {
        InventMov_Scrap_RU                      movement;
        InventUpd_Financial                     financial;
        InventUpd_Estimated                     estimated;
    
        RAssetScrap                             rAssetScrap;
        TransDate                               scrapTransDate = ledgerJournalTrans_RAsset.getTransDate(ledgerJournalTrans);
        ;
    
        ttsbegin;
    
        while select forupdate rAssetScrap
            where rAssetScrap.AssetId     == ledgerJournalTrans_RAsset.AssetId &&
                  rAssetScrap.Assembling  == NoYes::No                     &&
                  ! rAssetScrap.TransDate
        {
            if (strltrim(strrtrim(rAssetScrap.ItemId)) == strltrim(strrtrim(ledgerJournalTrans.Txt)))
            {
                rAssetScrap.InventTransId    = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
                rAssetScrap.DefaultDimension = ledgerJournalTrans.DefaultDimension;
                rAssetScrap.TransDate        = scrapTransDate;
                rAssetScrap.Voucher          = ledgerJournalTrans.Voucher;
                rAssetScrap.update();
    
                movement                  = InventMovement::construct(rAssetScrap);
                estimated                 = InventUpd_Estimated::newInventMovement(movement);
                estimated.updateNow();
    
                financial                 = InventUpd_Financial::newPostAsset_RU(movement,
                                                                                 ledgerVoucher,
                                                                                 abs(rAssetScrap.CostAmount) * movement.transSign());
                financial.updateNow();
            }
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    public void updateStatus()
    {
        RAssetStandards assetStandardsLocal;
        ;

        if (! rAssetTable)
            rAssetTable = RAssetTable::find(ledgerJournalTrans_RAsset.AssetId, true);

        if (! rAssetStandards)
            rAssetStandards = RAssetStandards::find(ledgerJournalTrans_RAsset.AssetId, ledgerJournalTrans_RAsset.StandardId, true);

        if (! (ledgerJournalTrans_RAsset.CanDisposal &&
            (! ledgerJournalTrans_RAsset.ToFromRecId  ? true : ledgerJournalTrans_RAsset.ToFromRecId == ledgerJournalTrans.RecId)))
            return;

        rAssetStandards.SaleValue    = CurrencyExchangeHelper::curAmount2CurAmount(ledgerJournalTrans_RAsset.sumDisposable(ledgerJournalTrans), ledgerJournalTrans.CurrencyCode, rAssetStandards.CurrencyCode, transDate);
        rAssetStandards.DisposalDate = transDate;
        rAssetStandards.doUpdate();
        this.createDeferrals(RassetDeferralsType::Disposal);
        select firstonly assetStandardsLocal
            where assetStandardsLocal.AssetId == rAssetTable.AccountNum &&
                  ! assetStandardsLocal.DisposalDate;

        if (! assetStandardsLocal)
        {
            rAssetTable.Status =  RAssetStatus::Scrapped;
            rAssetTable.doUpdate();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
