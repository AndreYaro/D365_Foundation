<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDiagnosticsRuleNumberSeqOperationalContinuous</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventDiagnosticsRuleNumberSeqOperationalContinuous</c> class is used to check if any number sequence is defined as continuous in operation modules.
/// </summary>
[DiagnosticsRuleAttribute]
public final class InventDiagnosticsRuleNumberSeqOperationalContinuous implements IDiagnosticsRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if any number sequence is defined as continuous in operation modules.
    /// </summary>
    /// <returns>
    /// An instance of <c>DiagnosticsRuleValidationResult</c> which contains the validation result.
    /// </returns>
    [DiagnosticsRuleSubscriptionAttribute(DiagnosticsArea::SCM, "@SCM:NumberSeqOperationalContinuousDiagnosticsRuleName", DiagnosticsRunFrequency::Monthly, "@SCM:ContinuousNumberSeqRuleDescription")]
    public DiagnosticsRuleValidationResult validate()
    {
        DiagnosticsRuleValidationResult validationResult = DiagnosticsRuleValidationResult::construct();
        NumberSequenceTable     sequenceTable;
        NumberSequenceScope     sequenceScope;
        NumberSequenceReference reference;
        NumberSequenceDatatype  dataType;
        boolean                 found;
        
        while select NumberSequence from sequenceTable
            where sequenceTable.Continuous == NoYes::Yes
                && sequenceTable.InUse == NoYes::Yes            
            join Module from dataType
                where dataType.WizardContinuous == NoYes::No
                    && (dataType.Module == NumberSeqModule::BOM ||
                        dataType.Module == NumberSeqModule::Invent ||
                        dataType.Module == NumberSeqModule::Pds ||
                        dataType.Module == NumberSeqModule::Prod ||
                        dataType.Module == NumberSeqModule::Req ||
                        dataType.Module == NumberSeqModule::Route ||
                        dataType.Module == NumberSeqModule::WHS ||
                        dataType.Module == NumberSeqModule::WMS)
            join DataArea from sequenceScope
            exists join reference
                where reference.NumberSequenceId == sequenceTable.RecId
                    && reference.NumberSequenceDataType == dataType.RecId
                    && reference.NumberSequenceScope == sequenceScope.RecId
        {
            if (!found)
            {
                validationResult.addValidationResult("@SCM:ContinuousNumberSeqRuleMessage", DiagnosticsValidationSeverity::High, "@SCM:ContinuousNumberSeqRuleRecommendation");
                found = true;
            }

            validationResult.addValidationDetail("@SYS330085", sequenceTable.NumberSequence);
            validationResult.addValidationDetail("@SYS9941", enum2Str(dataType.Module));
            validationResult.addValidationDetail("@SYS135113", sequenceScope.DataArea);
        }

        return validationResult;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>