<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationConfigurationBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailDocumentOperationConfigurationBase</c> class enables access to asynchronous document framework operation configuration
/// </summary>
internal class RetailDocumentOperationConfigurationBase
{
    internal const int MaximumRetryDelaySeconds = 86400; // 24 hours
    internal const int MaximumRetryDelayMultiplier = 10; // delay increases 10 times after each reply

    protected int processingTimeLimitInSeconds = 1800;
    protected int committedTimeLimitInSecond = 300;
    protected int maxRetryCount = 5;
    protected int retryDelayInitialSeconds = 0;
    protected int retryDelayAdditionalSeconds = 0;
    protected real retryDelayMultiplier = 1;
    protected int maxNumThreads = 1;

    private RetailDocumentOperationOperationName operationName;
    private RetailDocumentOperationGlobalParameters retailDocumentOperationGlobalParameters;
    private RetailDocumentOperationConfiguration retailDocumentOperationConfiguration;
    private RetailDocumentOperationSemaphoreManager semaphoreManager;
   

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs of new instance of <c>RetailDocumentOperationConfigurationBase</c>.
    /// </summary>
    /// <param name = "_operationName">Operation name to construct the configuration for</param>
    protected void new(RetailDocumentOperationOperationName _operationName)
    {
        this.operationName = _operationName;
        this.retailDocumentOperationGlobalParameters = RetailDocumentOperationGlobalParameters::find();
        if (!this.retailDocumentOperationGlobalParameters)
        {
            RetailDocumentOperationLogger::logConfigurationWarning('No configuration record is detected in the RetailDocumentOperationGlobalParameters. Will use default value instead.');
        }
        this.retailDocumentOperationConfiguration = RetailDocumentOperationConfiguration::find(_operationName);
        if (!this.retailDocumentOperationConfiguration)
        {
            RetailDocumentOperationLogger::logConfigurationWarning(strFmt('No configuration record is detected in the RetailDocumentOperationGlobalParameters for operation %1.', _operationName));
        }
        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>RetailDocumentOperationConfigurationBase</c> class.
    /// </summary>
    /// <param name = "_operationName">Operation name to create the object for.</param>
    /// <returns>A new instance of the class.</returns>
    internal static RetailDocumentOperationConfigurationBase construct(RetailDocumentOperationId _operationName)
    {
        return new RetailDocumentOperationConfigurationBase(_operationName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationName</Name>
				<Source><![CDATA[
    internal RetailDocumentOperationId getOperationName()
    {
        return this.operationName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessingTimeLimitInSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value we will use as the upper time limit for document operation framework can use to process an operation.
    /// </summary>
    /// <remarks>The document operation framework will not terminated the processor who hit the time limit now. Instead, the framework will log an error event against it.</remarks>
    /// <returns>Configuration parameter value.</returns>
    internal int getProcessingTimeLimitInSeconds()
    {
        return this.getProcessingTimeLimitInSecondsInternal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCommittedTimeLimitInSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value we will use as the upper time limit for document operation who can stay in committed status.
    /// </summary>
    /// <returns>Configuration parameter value.</returns>
    internal int getCommittedTimeLimitInSeconds()
    {
        return this.committedTimeLimitInSecond;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxRetryCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value we will use as the upper limit for document operation framework when retry the error operation.
    /// </summary>
    /// <returns>Configuration parameter value.</returns>
    internal int getMaxRetryCount()
    {
        return this.maxRetryCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxNumThreads</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value we will use as the upper limit for the number of threads document operation framework can use logical processors.
    /// </summary>
    /// <remarks>This value is the number of logical processors. e.g. on a machine with 2 dual-core hyperthreading processors, there are 2 * 2 * 2 logical processors.</remarks>
    /// <returns>The configuration parameter value</returns>
    internal int getMaxNumThreads()
    {
        return this.maxNumThreads;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSemaphoreManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the semaphore manager.
    /// </summary>
    /// <returns>The configuration parameter value</returns>
    internal RetailDocumentOperationSemaphoreManager getSemaphoreManager()
    {
        return this.semaphoreManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOperationQueuingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether operation queueing is enabled. When queueing is disabled the operation execution will not be retried after initial execution failed for any reason.
    /// </summary>
    /// <returns>True if queueing is enabled, otherwise false.</returns>
    internal boolean isOperationQueuingEnabled()
    {
        return this.maxRetryCount > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRetryDelayInSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the retry delay for the next retry.
    /// For no delay between retries set all delay parameters to 0 (there may be still delay because each operation is processed only once in each operation batch job execution)
    /// For constant delay set the initial and additional delay to the desired value set the multiplier to 0 or 1.
    /// For exponential backoff, set the retry multiple to the desired exponent value.
    /// </summary>
    /// <param name = "retryNumber">The number of the retry to calculate the delay for.</param>
    /// <returns>The value of the initial delay parameter when retry number is less or equal to 1. The additional retry delay multiplied by the retry multiplier in power of (retryNumber - 1). The delay is capped at 24 hours.</returns>
    internal int calculateRetryDelayInSeconds(int retryNumber)
    {
        if (retryNumber <= 1)
        {
            return this.retryDelayInitialSeconds;
        }
        else
        {
            int nextRetryDelay = real2int(this.retryDelayAdditionalSeconds * power(this.retryDelayMultiplier, retryNumber - 2));
            return min(nextRetryDelay, MaximumRetryDelaySeconds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGlobalParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the framework global parameters
    /// </summary>
    /// <returns>Global parameters record or null if no global parameters are saved in the database</returns>
    protected RetailDocumentOperationGlobalParameters getGlobalParameters()
    {
        return this.retailDocumentOperationGlobalParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the framework global parameters
    /// </summary>
    /// <returns>Global parameters record or null if no global parameters are saved in the database</returns>
    protected retailDocumentOperationConfiguration getOperationConfiguration()
    {
        return this.retailDocumentOperationConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the configuration values
    /// </summary>
    protected void initialize()
    {
        RetailDocumentOperationGlobalParameters globalParameters = this.getGlobalParameters();
        RetailDocumentOperationConfiguration operationConfiguration = this.getOperationConfiguration();

        if (operationConfiguration)
        {
            this.processingTimeLimitInSeconds = operationConfiguration.ProcessingTimeLimitInSeconds;
            this.committedTimeLimitInSecond = operationConfiguration.CommittedTimeLimitInSeconds;
            this.maxNumThreads = operationConfiguration.MaxNumThreads;
            this.maxRetryCount = operationConfiguration.MaxRetryCount;
            this.setRetryDelayParameters(operationConfiguration.RetryDelayInitialSeconds, operationConfiguration.RetryDelayAdditionalSeconds, operationConfiguration.RetryDelayMultiplier);
        }
        else
        {
            if (globalParameters)
            {
                this.processingTimeLimitInSeconds = globalParameters.ProcessingTimeLimitInSeconds;
                this.committedTimeLimitInSecond = globalParameters.CommittedTimeLimitInSeconds;
                this.maxRetryCount = globalParameters.MaxRetryCount;
                this.maxNumThreads = retailDocumentOperationGlobalParameters.MaxNumThreads;
                this.setRetryDelayParameters(0, 0, 1); // retry delay is not configured in global parameters, operation configuration must be defined for this
            }
        }

        this.semaphoreManager = this.createSemaphoreManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRetryDelayParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the retry delay parameters. The function makes sure that the final parameters values are in correct numeric range
    /// For no delay between retries set all delay parameters to 0. There may be still delay because each operation is processed only once in each operation batch job execution.
    /// For constant delay set the initial and additional delay to the desired value set the multiplier to 0 or 1.
    /// For exponential backoff, set the retry multiple to the desired exponent value.
    /// </summary>
    /// <param name = "_initialRetryDelay">Initial retry delay to set. The final value of the parameter will set in the range between 0 and 24 hours.</param>
    /// <param name = "_additionalRetryDelay">Additional retry delay to set. The final value of the parameter will set in the range between 0 and 24 hours.</param>
    /// <param name = "_retryDelayMultiplier">Retry delay multiplier parameter. The final value of the parameter will set in the range between 0 and 10.</param>
    protected void setRetryDelayParameters(int _initialRetryDelay, int _additionalRetryDelay, real _retryDelayMultiplier)
    {
        this.retryDelayInitialSeconds = max(0, min(_initialRetryDelay, MaximumRetryDelaySeconds));
        this.retryDelayAdditionalSeconds = max(0, min(_additionalRetryDelay, MaximumRetryDelaySeconds));

        if (_retryDelayMultiplier <= 0)
        {
            this.retryDelayMultiplier = 1;
        }
        else
        {
            this.retryDelayMultiplier = max(0, min(_retryDelayMultiplier, MaximumRetryDelayMultiplier));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSemaphoreManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates semaphore manager for the operation.
    /// </summary>
    /// <returns>New instance of incident manager class.</returns>
    protected RetailDocumentOperationSemaphoreManager createSemaphoreManager()
    {
        str semaphoreName = strFmt('Local\\%1-%2-%3', classStr(RetailDocumentOperationSemaphoreManager), this.operationName, int2Str(System.AppDomain::CurrentDomain.Id));

        System.UnauthorizedAccessException unauthorizedAccessException;
        try
        {
            return RetailDocumentOperationSemaphoreManager::construct(this.maxNumThreads, semaphoreName);
        }
        catch(unauthorizedAccessException)
        {
            str errorMessage = strFmt('UnauthorizedAccessException is thrown during init semaphore {0}', semaphoreName);
            RetailDocumentOperationLogger::logConfigurationError(errorMessage);
            throw error(errorMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessingTimeLimitInSecondsInternal</Name>
				<Source><![CDATA[
    //This method is created for known limitation that SysDetourContext can not detour to internal method(getProcessingTimeLimitInSeconds).
    // <returns>Configuration parameter value.</returns>
    private int getProcessingTimeLimitInSecondsInternal()
    {
        return this.processingTimeLimitInSeconds;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>