<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTableMethod</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetTableMethod
{
    RAssetTransDate      transDate;
    RAssetTable          rAssetTable;
    RAssetStandards      rAssetStandards;
    RAssetLifeTime       currentIntervalMth,
                         totalInterval;
    RAssetTableInterval  deprIntervalMth,
                         deprInterval;
    RAssetDeprPercentage rAssetDeprPercentage;
    RAssetDeprProfile    rAssetDeprProfile;
    RAssetAmount         parmPrevDepAmount,
                         amountToDepreciate,
                         amountNetBookValue,
                         parmAmountRevoluation;
    RAssetLifeTime       currentInterval;
    RAssetBudgetModelId  rAssetBudgetModelId;
    RAssetFactor         assetFactor;
    RAssetDepStartDate   deprStartDateVirtual;
    internal RAssetTransDate periodEndDate;
    private RAssetAmount deprBonusForPreviousPeriod;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountNetBookValue</Name>
				<Source><![CDATA[
        public RAssetAmount amountNetBookValue(RAssetAmount _amountNetBookValue = amountNetBookValue)
    {
        amountNetBookValue = _amountNetBookValue;
        return amountNetBookValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToDepreciate</Name>
				<Source><![CDATA[
        public RAssetAmount amountToDepreciate(RAssetAmount _amountToDepreciate = amountToDepreciate)
    {
        amountToDepreciate = _amountToDepreciate;
        return amountToDepreciate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
        public RAssetAmount calc(RAssetTransDate _transDate)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        #define.Value7(7)
    public void init(RAssetTransDate     _assetTransDate,
                     RAssetDepStartDate  _assetDepStartDate = rAssetStandards.startDepDate(this.parmBudgetModelId()))
    {
        RAssetSumCalc           rAssetSumCalc;
        TransDate               endDate       = _assetTransDate;
        RAssetInitDepStartDate  initStartDate = RAssetGroup::find(rAssetStandards.AssetGroup).InitDepStartDate;

        currentIntervalMth  = deprIntervalMth.interval(dateStartMth(_assetDepStartDate), endDate) + 1;
        currentIntervalMth -= RAssetSuspend::suspendBefore(endDate, rAssetStandards);

        totalInterval       = rAssetStandards.lifetime(endDate - 1);
        assetFactor         = 1;

        switch (initStartDate)
        {
            case RAssetInitDepStartDate::AcquisitionMonth,
                 RAssetInitDepStartDate::RegistrationDate,
                 RAssetInitDepStartDate::AcquisitionDate:
                endDate = endmth(endDate);
                break;

            case RAssetInitDepStartDate::NextMonth:
                endDate = dateStartMth(endDate) - 1;
                break;

            case RAssetInitDepStartDate::NextQuarter:
                endDate = dateStartQtr(endDate) - 1;
                break;

            case RAssetInitDepStartDate::NextHalfYear:
                endDate = mkDate(1, mthOfYr(endDate) < #Value7 ? 1 : #Value7, year(endDate)) - 1;
                break;

            case RAssetInitDepStartDate::NextYear:
                endDate = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), endDate) - 1;
                break;
        }

        if (this.parmBudgetModelId())
        {
            rAssetSumCalc      = RAssetSumCalc_Budget::newAssetPeriod(rAssetTable.AccountNum,
                                                                      rAssetStandards.AssetStandardId,
                                                                      rAssetBudgetModelId,
                                                                      endDate);
        }
        else
        {
            rAssetSumCalc      = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNum,
                                                                     rAssetStandards.AssetStandardId,
                                                                     this.virtualDepStartDate() ? this.virtualDepStartDate() : endDate);
        }

        amountToDepreciate  = rAssetSumCalc.acquisitionTotal() + parmAmountRevoluation + deprBonusForPreviousPeriod;
        if (this.virtualDepStartDate())
        {
            amountNetBookValue  = rAssetSumCalc.acquisitionValue() + parmAmountRevoluation;
        }
        else
        {
            amountNetBookValue  = rAssetSumCalc.netBookValue() + parmAmountRevoluation;
            if (endDate        <  _assetTransDate                      &&
                (initStartDate == RAssetInitDepStartDate::NextQuarter  ||
                 initStartDate == RAssetInitDepStartDate::NextHalfYear ||
                 initStartDate == RAssetInitDepStartDate::NextYear))
            {
                rAssetSumCalc.parmDateFrom(endDate);
                rAssetSumCalc.parmDateTo(endmth(_assetTransDate));
                amountNetBookValue += rAssetSumCalc.depreciationTotal();
            }
        }
        parmPrevDepAmount  += rAssetStandards.ScrapValue;
        currentInterval     = (currentIntervalMth  div deprInterval.periodMultiplier()) +
           ((currentIntervalMth  mod deprInterval.periodMultiplier() ? 1 : 0));

        if (! this.parmBudgetModelId())
        {
            rAssetSumCalc.parmDateFrom(_assetTransDate);
            rAssetSumCalc.parmDateTo(endmth(_assetTransDate));
            amountNetBookValue -= rAssetSumCalc.depreciationPostedBonusValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(RAssetStandards   _rAssetStandards,
                    TransDate         _transDate)
    {
        rAssetStandards      = _rAssetStandards;
        rAssetTable          = RAssetTable::find(_rAssetStandards.AssetId);
        deprIntervalMth      = new RAssetTableInterval_Month();
        rAssetDeprProfile    = rAssetStandards.deprProfile(_transDate - 1);
        deprInterval         = RAssetTableInterval::construct(_rAssetStandards, _transDate, rAssetDeprProfile);
        rAssetDeprPercentage = rAssetDeprProfile.DeprPercentage / deprInterval.periodMultiplier();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountRevoluation</Name>
				<Source><![CDATA[
        public void parmAmountRevoluation(RAssetAmount _parmAmountRevoluation)
    {
        parmAmountRevoluation = _parmAmountRevoluation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetModelId</Name>
				<Source><![CDATA[
        public RAssetBudgetModelId parmBudgetModelId(RAssetBudgetModelId _rAssetBudgetModelId = rAssetBudgetModelId)
    {
        rAssetBudgetModelId = _rAssetBudgetModelId;
        return rAssetBudgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodEndDate</Name>
				<Source><![CDATA[
    public RAssetTransDate parmPeriodEndDate(RAssetTransDate _periodEndDate = periodEndDate)
    {
        periodEndDate = _periodEndDate;
        return periodEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevDepAmount</Name>
				<Source><![CDATA[
        public void parmPrevDepAmount(RAssetAmount _parmPrevDepAmount = 0)
    {
        parmPrevDepAmount =_parmPrevDepAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>percentage</Name>
				<Source><![CDATA[
        protected RAssetDeprPercentage percentage()
    {
        return rAssetDeprPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalInterval</Name>
				<Source><![CDATA[
        public RAssetLifeTime totalInterval(RAssetLifeTime _totalInterval = totalInterval)
    {
        totalInterval = _totalInterval;
        return totalInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>virtualDepStartDate</Name>
				<Source><![CDATA[
        public RAssetDepStartDate virtualDepStartDate(RAssetDepStartDate _periodVirtual = deprStartDateVirtual)
    {
        deprStartDateVirtual = _periodVirtual;

        return deprStartDateVirtual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static RAssetTableMethod construct(RAssetStandards   _rAssetStandards,
                                              TransDate         _transDate)
    {
        RAssetTableMethod ret;

        if (_rAssetStandards.Say &&
            _rAssetStandards.AssetStandardId == RAssetParameters::find().StandardIdDefault)
        {
            ret = new RAssetTableMethod_Say(_rAssetStandards, _transDate);
        }
        else
        {
            ret = RAssetTableMethod::newFromDepreciationMethod(_rAssetStandards, _transDate);
        }

        if (!ret)
        {
            throw error("@GLS116218");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDepreciationMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>RAssetTableMethod</c> object.
    /// </summary>
    /// <param name = "_rAssetStandards">A <c>RAssetStandards</c> record.</param>
    /// <param name = "_transDate">An asset transaction date.</param>
    /// <returns>The proper instance of <c>RAssetTableMethod</c> class.</returns>
    protected static RAssetTableMethod newFromDepreciationMethod(
        RAssetStandards _rAssetStandards,
        TransDate _transDate)
    {
        RAssetTableMethod ret;

        switch (_rAssetStandards.assetDeprMethod(_transDate - 1))
        {
            case RAssetDeprMethod::StraightLine:
                ret = new RAssetTableMethod_SL(_rAssetStandards, _transDate);
                break;
            case RAssetDeprMethod::ReducingBalance:
                ret = new RAssetTableMethod_RB(_rAssetStandards, _transDate);
                break;
            case RAssetDeprMethod::Manual:
                ret = new RAssetTableMethod_Man(_rAssetStandards, _transDate);
                break;
            case RAssetDeprMethod::Factor:
                ret =  new RAssetTableMethod_Fact(_rAssetStandards, _transDate);
                break;
            case RAssetDeprMethod::Value:
                ret =  new RAssetTableMethod_Value(_rAssetStandards, _transDate);
                break;
            case RAssetDeprMethod::SumYears:
                ret =  new RAssetTableMethod_Years(_rAssetStandards, _transDate);
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundAmount</Name>
				<Source><![CDATA[
        public static AmountCur roundAmount(RAssetStandardId _assetStandardId,
                                        AmountCur        _amountCur)
    {
        return RAssetStandardTable::roundAmount(_assetStandardId, _amountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDepreciationAmountForPartialPeriod</Name>
				<Source><![CDATA[
    internal RAssetAmount adjustDepreciationAmountForPartialPeriod(RAssetDepStartDate _deprStartDate, RAssetAmount _depreciate)
    {
        RAssetAmount depreciate = _depreciate;

        if (rAssetStandards.assetGroup().InitDepStartDate == RAssetInitDepStartDate::AcquisitionDate)
        {
            RassetTransDate periodEnd = deprInterval.getEndDate(_deprStartDate);

            if (rAssetStandards.LastDepDate
                && periodEnd ==  deprInterval.getEndDate(rAssetStandards.LastDepDate))
            {
                return 0;
            }

            RAssetTransDate periodStart = deprInterval.getStartDate(_deprStartDate);
            int periodLength = periodEnd - periodStart + 1;

            if (periodLength)
            {
                RAssetTransDate currentPeriodEnd;

                if (!rAssetStandards.LastDepDate
                    && _deprStartDate == rAssetStandards.DepStartDate)
                {
                    currentPeriodEnd = periodEnd;
                }
                else if (periodEndDate != periodEnd && deprInterval.getEndDate(periodEndDate) == periodEnd)
                {
                    currentPeriodEnd = periodEndDate;
                }

                if (currentPeriodEnd)
                {
                    RAssetFactor partOfPeriod = (currentPeriodEnd - _deprStartDate + 1) / periodLength;
                    depreciate = depreciate * partOfPeriod;
                }
            }
        }

        return depreciate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeprBonusForPreviousPeriod</Name>
				<Source><![CDATA[
    internal RassetAmount parmDeprBonusForPreviousPeriod(RassetAmount _deprBonusForPreviousPeriod = deprBonusForPreviousPeriod)
    {
        deprBonusForPreviousPeriod = _deprBonusForPreviousPeriod;
        return deprBonusForPreviousPeriod;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>