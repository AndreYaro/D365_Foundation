<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLocationDirectiveStrategyLPLocateAndFEFOBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLocationDirectiveStrategyLPLocateAndFEFOBatch</c> class implements the Round up to the full license plate and FEFO batch strategy.
/// </summary>
[WhsLocationDirectiveStrategyFactory(WhsLocDirStrategy::LPLocateAndFEFOBatch)]
class WhsLocationDirectiveStrategyLPLocateAndFEFOBatch extends WhsLocationDirectiveStrategy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(
        WHSLocDirTable  _locDirTable,
        WHSLocDirLine   _locDirLine,
        WHSLocDirAction _locDirAction)
    {
        boolean ret = true;

        if (_locDirAction.BatchEnabled == NoYes::No)
        {
            ret = checkFailed("@WAX4152");
        }

        if (_locDirTable.WorkTransType != WHSWorkTransType::Replenishment)
        {
            ret = checkFailed("@WAX4304");
        }

        if (_locDirTable.WorkType != WHSWorkType::Pick)
        {
            ret = checkFailed(strFmt("@WAX4602", _locDirAction.LocDirStrategy, _locDirTable.WorkType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reliesOnDimensionsBelowLocation</Name>
				<Source><![CDATA[
    public boolean reliesOnDimensionsBelowLocation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckNonLPLocation</Name>
				<Source><![CDATA[
    public boolean mustCheckNonLPLocation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requiresBatchDimension</Name>
				<Source><![CDATA[
    public boolean requiresBatchDimension()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionsRequiredToChange</Name>
				<Source><![CDATA[
    public Set dimensionsRequiredToChange()
    {
        Set result = super();
        result.add(fieldStr(InventDim, LicensePlateId));
        result.add(fieldStr(InventDim, InventBatchId));
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performStrategy</Name>
				<Source><![CDATA[
    public boolean performStrategy(
        WhsLocationDirective _locationDirective,
        WhsLocationDirectiveStrategyParameters _parameters)
    {
        boolean             strategyResult;

        // Multi-batch LPs are not supported with this strategy.
        if (_parameters.WorkType == WHSWorkType::Pick)
        {
            // We need to determine how much of the batch is available in the location.
            InventDim  batchLocInventDim;

            batchLocInventDim.data(_parameters.InventDim);
            batchLocInventDim.clearInventDimId();
            batchLocInventDim.InventBatchId = _parameters.InventBatchId;

            InventQty batchInventQtyAvail;
            batchInventQtyAvail = WHSInventOnHand::getWorkPhysicalInventHandlingQtyByInventDim(_parameters.ItemId, batchLocInventDim);
            
            // Find total work in temp table that has been soft allocated for this batch
            InventQty inWorkInventQty = WHSLocationDirective::getTotalInTempTable(_parameters.Location.inventLocationId,
                                                                    _parameters.Location.wmsLocationId,
                                                                    _parameters.InventDim,
                                                                    _parameters.InventUOM,
                                                                    _parameters.ItemId,
                                                                    _parameters.WorkType,
                                                                    _parameters.InventBatchId);
            // Find total open work that has been soft allocated for this batch
            InventQty openBatchWorkInventQtyTotal = WhsLocationDirectiveStrategyFEFOBatch::getTotalOpenWork(_parameters.Location.InventLocationId,
                                                                    _parameters.Location.wmsLocationId,
                                                                    _parameters.InventDim,
                                                                    _parameters.InventUOM,
                                                                    _parameters.ItemId,
                                                                    _parameters.InventDim.InventStatusId,
                                                                    _parameters.InventBatchId);

            batchInventQtyAvail = batchInventQtyAvail - inWorkInventQty - openBatchWorkInventQtyTotal;

            // Next find the available amount on the LP (for that item not the specific batch)
            InventDim           lpInventDim;

            lpInventDim.data(_parameters.InventDim);
            lpInventDim.clearInventDimId();
            lpInventDim.LicensePlateId = _parameters.CurrentLPId;

            InventQty lpInventQtyAvail;
            lpInventQtyAvail = WHSInventOnHand::getWorkPhysicalInventHandlingQtyByInventDim(_parameters.ItemId, lpInventDim);
            
            // Find total work in temp table that has been soft allocated for this lp
            inWorkInventQty = WHSLocationDirective::getTotalInTempTable(_parameters.Location.InventLocationId,
                                                                    _parameters.Location.wmsLocationId,
                                                                    _parameters.InventDim,
                                                                    _parameters.InventUOM,
                                                                    _parameters.ItemId,
                                                                    _parameters.WorkType,
                                                                    '',
                                                                    _parameters.CurrentLPId);

            // Find total open work that has been soft allocated for this lp
            InventQty openLPWorkInventQtyTotal = WhsLocationDirectiveStrategyLPLocate::getTotalOpenWorkForLocatedLP(_parameters.Location.InventLocationId,
                                                                _parameters.Location.wmsLocationId,
                                                                _parameters.InventDim,
                                                                _parameters.InventUOM,
                                                                _parameters.ItemId,
                                                                _parameters.InventDim.InventStatusId,
                                                                _parameters.CurrentLPId);

            lpInventQtyAvail = lpInventQtyAvail - inWorkInventQty - openLPWorkInventQtyTotal;

            // If the qty of the LP is greater than the qty of the min of batchQtyAvail or availQty(loc level) then fail the strategy and Log.
            if (lpInventQtyAvail > min (batchInventQtyAvail, _parameters.AvailQty))
            {
                // Unable to locate a full LP from
                strategyResult = false;
            }
            else
            {
                strategyResult = true;

                _locationDirective.parmAvailQty(lpInventQtyAvail);

                // We are pulling the full LP so we must increase the findQty
                if (_parameters.InventFindQty < lpInventQtyAvail)
                {
                    _locationDirective.parmInventFindQty(lpInventQtyAvail);
                }

                // Set the oldest batch and located LP parameters so it can be set on the tmpWorkLine
                _locationDirective.parmFEFOBatchId(_parameters.InventBatchId);
                _locationDirective.parmLocatedLP(_parameters.CurrentLPId);
            }
        }

        return strategyResult;

    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPickLocDirActionQuery</Name>
				<Source><![CDATA[
    public boolean modifyPickLocDirActionQuery(WhsLocationDirectiveActionQuery _actionQuery, Query _query)
    {
        WhsLocationDirectiveStrategyFEFOBatch::addBatchFEFOSort(_query);
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>