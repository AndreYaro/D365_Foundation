<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceNotification</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

/// <summary>
/// The <c>RetailTransactionServiceNotification</c> implements the notification related methods of the service interface exposed by the <c>RetailTransactionService</c> class to the retail channels.
/// </summary>
public class RetailTransactionServiceNotification
{
    private const str entityAssemblyFileName = 'Microsoft.Dynamics.Commerce.Runtime.Entities';
    private const str entityNamespaceName = 'Microsoft.Dynamics.Commerce.Runtime.DataModel';
    private const str notificationSubscriptionName = 'NotificationSubscription';
    private const str notificationItemCollectionName = 'NotificationItemCollection';
    private const str notificationItemName = 'NotificationItem';
    private const str notificationDetailCollectionName = 'NotificationDetailCollection';
    private const str notificationDetailName = 'NotificationDetail';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNotifications</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list of notifications for the given subscribed operations for worker in the channel.
    /// </summary>
    /// <param name="_notificationSubscriptionJsonStr">
    /// The notification subscription JSON string.
    /// </param>
    /// <returns>
    /// A list of notifications in JSON format in a container object.
    /// </returns>
    public server static container getNotifications(str _notificationSubscriptionJsonStr)
    {
        container                               getNotificationsContainer = [false, '', '']; // Status, ErrorMsg, XmlResultSet
        Newtonsoft.Json.JsonSerializerSettings  settings;
        System.Type                             notificationSubscriptionType;
        System.Type                             subscribedOperationsType;
        System.Type                             notificationItemCollectionType;
        System.Type                             notificationItemType;
        RetailOperationId                       subscribedOperation;
        System.Object                           notificationSubscription;
        System.Object                           notificationContainer;
        System.Object                           notifications;
        System.Object                           notification;
        System.Object                           subscribedOperations;
        RetailChannelRecId                      channelId;
        RetailStaffId                           staffId;
        int                                     subscribedOperationsCount;
        int                                     i;
        int                                     fromLine;
        str                                     error = '';

        // For backward compatibility, check if the current namespace exists.
        notificationSubscriptionType = ReflectionHelper::getType(entityAssemblyFileName, entityNamespaceName, notificationSubscriptionName);

        if (notificationSubscriptionType == null)
        {
            ApplicationEventSource::EventWriteRetailTransactionServiceNotificationFailure(funcName(), "@Retail:CrtVersionMismatch");
            return [false, "@Retail:CrtVersionMismatch", ''];
        }

        try
        {
            fromLine = Global::infologLine();
                        
            settings = new Newtonsoft.Json.JsonSerializerSettings();
            settings.NullValueHandling = Newtonsoft.Json.NullValueHandling::Ignore;
            // In order to prevent the ACE, the generic properties are forbidden. Details can be found in the rule [CA2326]
            // Avoid making any breaking change for this, we use Newtonsoft.Json.TypeNameHandling::None instead of XMLSerializer
            settings.TypeNameHandling = Newtonsoft.Json.TypeNameHandling::None;

            notificationSubscription = Newtonsoft.Json.JsonConvert::DeserializeObject(_notificationSubscriptionJsonStr, notificationSubscriptionType, settings);
            
            notifications = ReflectionHelper::createInstance(entityAssemblyFileName, entityNamespaceName, notificationItemCollectionName);
            notificationItemCollectionType = notifications.GetType();
            notificationItemType = ReflectionHelper::getType(entityAssemblyFileName, entityNamespaceName, notificationItemName);

            channelId = ReflectionHelper::getObjectProperty(notificationSubscription, 'ChannelId');
            staffId = ReflectionHelper::getObjectProperty(notificationSubscription, 'StaffId');
            subscribedOperations = ReflectionHelper::getObjectProperty(notificationSubscription, 'SubscribedOperations');
            subscribedOperationsType = subscribedOperations.GetType();
            subscribedOperationsCount = ReflectionHelper::getObjectProperty(subscribedOperations, 'Count');

            if (subscribedOperationsCount > 0)
            {
                // For each subscribed operation, call the getNotificationDetail.
                for (i = 0; i < subscribedOperationsCount; i++)
                {
                    subscribedOperation = subscribedOperationsType.GetMethod('get_Item').Invoke(subscribedOperations, [i]);
                    notification = ReflectionHelper::createInstance(entityAssemblyFileName, entityNamespaceName, notificationItemName);

                    notificationItemType.GetProperty('Action').SetValue(notification, subscribedOperation);
                    notificationItemType.GetProperty('NotificationDetails').SetValue(
                        notification,
                        RetailTransactionServiceNotification::getNotificationDetails(channelId, staffId, subscribedOperation));

                    notificationItemCollectionType.GetMethod('Add').Invoke(notifications, [notification]);
                }
            }

            getNotificationsContainer = [true, '', Newtonsoft.Json.JsonConvert::SerializeObject(notifications, settings)];
        }
        catch (Exception::Error)
        {
            // Fail result due to unknown and /or type mismatch errors.
            getNotificationsContainer = [false, "@RET2382", ''];
            error = RetailTransactionServiceUtilities::getInfologMessages(fromLine);
            ApplicationEventSource::EventWriteRetailTransactionServiceNotificationFailure(funcName(), 'An error has occured during get notifications. Error:' + error);
        }

        return getNotificationsContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotificationDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list of notification items for the given operation.
    /// </summary>
    /// <param name = "_channelId">
    /// The channel rec id.
    /// </param>
    /// <param name = "_staffId">
    /// A worker identifier
    /// </param>
    /// <param name="_subscribedOperation">
    /// The operation / action identifier.
    /// </param>
    /// <returns>
    /// A list of notification detail items.
    /// </returns>
    private static System.Object getNotificationDetails(RetailChannelRecId _channelId, RetailStaffId _staffId, RetailOperationId _subscribedOperation)
    {
        const int FulfillmentOperation = 928;
        const int TaskManagementOperation = 1400;
        const int RecallOrderOperation = 515;

        System.Object retailNotificationItems = ReflectionHelper::createInstance(entityAssemblyFileName, entityNamespaceName, notificationDetailCollectionName);
        ApplicationEventSource::EventWriteRetailTransactionServiceNotificationInfoLog(funcName(), strFmt('Getting notification details for operation %1 started.', int2Str(_subscribedOperation)));

        // Call individual notification handler to get the notification details.
        try
        {
            switch (_subscribedOperation)
            {
                case FulfillmentOperation:
                    retailNotificationItems = RetailTransactionServiceFulfillment::getFulfillmentNotificationLines(_channelId);
                    break;
                case TaskManagementOperation:
                    retailNotificationItems = RetailTransactionServiceTaskManagement::getTaskManagementNotificationLines(_channelId, _staffId);
                    break;
                case RecallOrderOperation:
                    retailNotificationItems = RetailTransactionServiceOrders::getRecallOrderNotificationLines(_channelId);
                    break;
                default:
                    // Calls the custom extensions if exist.
                    EventHandlerResult result = new EventHandlerResult();
                    RetailTransactionServiceNotification retailTransactionServiceNotification = new RetailTransactionServiceNotification();
                    retailTransactionServiceNotification.getNotificationDetailsExtension(_channelId, _staffId, _subscribedOperation, result);
                    
                    if (result.hasResult())
                    {
                        ApplicationEventSource::EventWriteRetailTransactionServiceNotificationInfoLog(funcName(), strFmt('Successfully retrieved notification details for operation %1 from extension.', int2Str(_subscribedOperation)));
                        retailNotificationItems = result.result();
                    }
                    else
                    {
                        // Do nothing; Extension is not defined.
                    }
            }
        }
        catch (Exception::Error)
        {
            // Show that current operation failed to get notification and continue to get rest of the notifications without errors.
            ApplicationEventSource::EventWriteRetailTransactionServiceNotificationFailure(funcName(), strFmt('An error has occured during get notification details for operation %1.', int2Str(_subscribedOperation)));
            System.Type notificationDetailsType = ReflectionHelper::getType(entityAssemblyFileName, entityNamespaceName, notificationDetailCollectionName);
            System.Type notificationDetailType = ReflectionHelper::getType(entityAssemblyFileName, entityNamespaceName, notificationDetailName);
            System.Object errorNotificationItem  = notificationDetailType.GetMethod('GetNotificationErrorDetail').Invoke(null, [null, null]);
            notificationDetailsType.GetMethod('Add').Invoke(retailNotificationItems, [errorNotificationItem]);
        }

        ApplicationEventSource::EventWriteRetailTransactionServiceNotificationInfoLog(funcName(), strFmt('Getting notification details for operation %1 ended.', int2Str(_subscribedOperation)));
        return retailNotificationItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotificationDetailsExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting notification details for each retail operations.
    /// </summary>
    /// <param name = "_channelId">
    /// Channel identifier.
    /// </param>
    /// <param name = "_staffId">
    /// A worker identifier.
    /// </param>
    /// <param name="_operationId">
    /// The operation / action identifier.
    /// </param>
    /// <param name="_result">
    /// Subscribers should use this object to return true with the object if environment support is available for the specified
    /// operation; false otherwise.
    /// </param>
    /// <remarks> Should have NotificationDetailCollection into the result. The lastUpdatedDateTime should be formatted using DateTimeUtil::toStr().</remarks>
    delegate void getNotificationDetailsExtension(RetailChannelRecId _channelId, RetailStaffId _staffId, RetailOperationId _operationId, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>