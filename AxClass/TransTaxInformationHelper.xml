<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransTaxInformationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.TaxEngine.Instrumentation;

/// <summary>
/// The helper class for building tax information transaction.
/// </summary>
public class TransTaxInformationHelper
{
    #TransitDocumentManager

    internal TaxModelTaxable             taxModelTaxable;
    internal TransitDocumentManager_IN   transitDocumentManager;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disable new method.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCompanyLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get default company location.
    /// </summary>
    /// <param name="_companyId">
    /// The company Id.
    /// </param>
    /// <returns>
    /// The record Id for company location.
    /// </returns>
    public static RecId getDefaultCompanyLocation(CompanyId _companyId = curExt())
    {
        CompanyInfo         companyInfoLoc;
        DirPartyLocation    dirPartyLocation;
        LogisticsLocation   logisticsLocation;
    
        companyInfoLoc = CompanyInfo::findByCompany_IN(_companyId);
    
        dirPartyLocation = DirPartyLocation::findPrimaryPartyLocation(companyInfoLoc.RecId);
    
        if (dirPartyLocation)
        {
            logisticsLocation = LogisticsLocation::find(dirPartyLocation.Location);
        }
    
        return logisticsLocation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTableOrCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field base on project table or project category.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_sourceTable">
    /// The transation table.
    /// </param>
    /// <returns>
    /// True if TransTaxInformation is from ProjTable; otherwise, false.
    /// </returns>
    protected static boolean initFromProjTableOrCategory(TransTaxInformation _transTaxInformation, Common _sourceTable)
    {
        ProjId                      projId;
        ProjJournalTrans            projJournalTrans;
        TSTimesheetLine             tsTimesheetLine;
        TransTaxInformation         projTableTransTaxInfo;
        LedgerJournalTrans_project  ledgerJournalTrans_project;
        InventJournalTrans          inventJournalTrans;
        SMAServiceOrderLine         smaServiceOrderLine;
        LedgerJournalTrans          ledgerJournalTrans;
        ProjOnAccTrans              projOnAccTrans;
        VendTable                   vendTable;
        ItemId                      itemId;
        InventDimId                 inventDimId;
        CustTable                   custTable;
        ProjTable                   projTable;
        CategoryId                  categoryId;
        boolean                     isLedgerJourTransLedgerAcc;
        SalesLine                   salesLine;
        SalesQuotationLine          salesQuotationLine;
        boolean                     isTransTaxInformationFromProjTable;

        ProjAdvancedJournalLine projAdvancedJournalLine;
        ProjAdvancedJournalLineTaxExtensionIN projAdvancedJournalLineTaxExtIN;

        if (_sourceTable)
        {
            switch (_sourceTable.TableId)
            {
                case tableNum(ProjJournalTrans) :
                    projJournalTrans = _sourceTable;
                    categoryId = projJournalTrans.CategoryId;
                    projId = projJournalTrans.ProjId;
                    break;
    
                case tableNum(TSTimesheetLine) :
                    tsTimesheetLine = _sourceTable;
                    categoryId = tsTimesheetLine.CategoryId;
                    projId = tsTimesheetLine.ProjId;
                    break;
    
                case tableNum(LedgerJournalTrans_project) :
                    ledgerJournalTrans_project = _sourceTable;
                    ledgerJournalTrans = ledgerJournalTrans_project.ledgerJournalTrans();
                    categoryId = ledgerJournalTrans_project.CategoryId;
                    projId = ledgerJournalTrans_project.ProjId;
                    break;
    
                case tableNum(LedgerJournalTrans) :
                    ledgerJournalTrans = _sourceTable;
                    ledgerJournalTrans_project = ledgerJournalTrans_project::find(ledgerJournalTrans.RecId);
                    categoryId = ledgerJournalTrans_project.CategoryId;
                    projId = ledgerJournalTrans_project.ProjId;

                    switch (ledgerJournalTrans.OffsetAccountType)
                    {
                        case LedgerJournalACType::Vend :
                            vendTable = ledgerJournalTrans.findVendForOffset();
                            break;

                        case LedgerJournalACType::Cust :
                            custTable = ledgerJournalTrans.findCustForOffset();
                            break;

                        case LedgerJournalACType::Ledger :
                            isLedgerJourTransLedgerAcc = true;
                            break;

                        case LedgerJournalACType::Project :
                            if (projId && ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                            {
                                vendTable = ledgerJournalTrans.findVendTable();
                            }
                            else if (projId && ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
                            {
                                custTable = ledgerJournalTrans.findCustTable();
                            }
                            break;

                        default :
                            break;
                    }
                    break;
    
                case tableNum(InventJournalTrans) :
                    inventJournalTrans = _sourceTable;
                    categoryId = inventJournalTrans.ProjCategoryId;
                    projId = inventJournalTrans.ProjId;
                    itemId = inventJournalTrans.ItemId;
                    inventDimId = inventJournalTrans.InventDimId;
                    break;
    
                case tableNum(SMAServiceOrderLine) :
                    smaServiceOrderLine = _sourceTable;
                    categoryId = smaServiceOrderLine.ProjCategoryId;
                    projId = smaServiceOrderLine.ProjId;
                    if ((smaServiceOrderLine.TransactionType == SMATransactionType::Expense)
                            && (smaServiceOrderLine.OffsetAccountTypeExpense == LedgerJournalACType::Vend))
                    {
                        vendTable = VendTable::findByLedgerDimension(smaServiceOrderLine.LedgerDimension);
                    }
                    else if (smaServiceOrderLine.TransactionType == SMATransactionType::Item)
                    {
                        itemId = smaServiceOrderLine.ItemId;
                        inventDimId = smaServiceOrderLine.InventDimId;
                    }
                    custTable = CustTable::find(SMAServiceOrderTable::find(smaServiceOrderLine.ServiceOrderId).CustAccount);
                    break;
    
                case tableNum(ProjOnAccTrans) :
                    projOnAccTrans = _sourceTable;
                    projId = projOnAccTrans.ProjId;
                    break;
    
                case tableNum(SalesLine) :
                    salesLine = _sourceTable;
                    if (salesLine.SalesType == SalesType::ItemReq)
                    {
                        categoryId = salesLine.ProjCategoryId;
                        projId = salesLine.ProjId;
                        itemId = salesLine.ItemId;
                        inventDimId = salesLine.InventDimId;
                    }
                    break;
    
                case tableNum(SalesQuotationLine) :
                    salesQuotationLine = _sourceTable;
                    if (salesQuotationLine.QuotationType == QuotationType::Project)
                    {
                        categoryId = salesQuotationLine.ProjCategoryId;
                        projId = salesQuotationLine.projId();
                        if (salesQuotationLine.ProjTransType == QuotationProjTransType::Item)
                        {
                            itemId = salesQuotationLine.ItemId;
                            inventDimId = salesQuotationLine.InventDimId;
                        }
                    }
                    break;

                case tableNum(ProjAdvancedJournalLine) :
                    projAdvancedJournalLine = _sourceTable;
                    categoryId = projAdvancedJournalLine.ProjCategoryId;
                    break;

                case tableNum(ProjAdvancedJournalLineTaxExtensionIN) :
                    ProjAdvancedJournalLineTaxExtIN = _sourceTable;
                    ProjAdvancedJournalLine = ProjAdvancedJournalLineTaxExtIN.projAdvancedJournalLine();
                    categoryId = projAdvancedJournalLine.ProjCategoryId;
                    break;

            }
    
            if (projId)
            {
                projTable = ProjTable::find(projId);
            }

            if (projTable)
            {
                projTableTransTaxInfo = TransTaxInformationHelper::newHelper().findTransTaxInformationByRecord(projTable, TransTaxInformationType_IN::Normal);

                if (projTableTransTaxInfo)
                {
                    isTransTaxInformationFromProjTable = true;
                    
                    buf2Buf(projTableTransTaxInfo, _transTaxInformation);

                    _transTaxInformation.InclTax = TransTaxInformationHelper::determineInclTaxForProj(
                        _transTaxInformation,
                        projTable,
                        custTable,
                        vendTable);

                    if (isLedgerJourTransLedgerAcc)
                    {
                        _transTaxInformation.CustomerLocation = 0;
                        _transTaxInformation.CustomerTaxInformation = 0;
                        _transTaxInformation.VendorLocation = 0;
                        _transTaxInformation.VendorTaxInformation = 0;
                    }
                        
                    if (custTable)
                    {
                        if (ledgerJournalTrans_project)
                        {
                            _transTaxInformation.CustomerLocation = 0;
                        }
                        TransTaxInformationHelper::initFromCustomerLocation(_transTaxInformation, custTable);
                    }
    
                    if (vendTable)
                    {
                        if (!custTable)
                        {
                            _transTaxInformation.CustomerLocation = 0;
                            _transTaxInformation.CustomerTaxInformation = 0;
                        }
    
                        TransTaxInformationHelper::initFromVendorLocation(_transTaxInformation, vendTable);
                    }

                    if (itemId)
                    {
                        if (!custTable)
                        {
                            custTable = CustTable::find(projTable.CustAccount);
                        }

                        TransTaxInformationHelper::initFromInventItem(_transTaxInformation, itemId, custTable);
                    }

                    if (inventDimId)
                    {
                        InventDim inventDim = InventDim::find(inventDimId);

                        LogisticsLocationRecId locaitonFetchedBasedOnInventDim = TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(inventDim.InventLocationId, inventDim.InventSiteId);

                        if (_transTaxInformation.CompanyLocation != locaitonFetchedBasedOnInventDim)
                        {
                            TaxEngineEventSource log = TaxEngineEventSource::Get_Log();

                            log.TrackMetric(
                                'FetchCompanyLocationBasedOnInventDim', 
                                strFmt('Original value: %1, New value: %2', _transTaxInformation.CompanyLocation, locaitonFetchedBasedOnInventDim),
                                Microsoft.Dynamics.BusinessPlatform.ProductInformation.Provider.ProductInfoProvider::Provider.ApplicationBuildVersion,
                                _sourceTable.TableId,
                                _sourceTable.RecId);

                            _transTaxInformation.CompanyLocation = locaitonFetchedBasedOnInventDim;
                            TransTaxInformationHelper::initFromCompanyLocation(_transTaxInformation);
                            TransTaxInformationHelper::initFromTaxInformation(_transTaxInformation);
                        }
                    }
                }
            }

            if (categoryId)
            {
                ProjCategory category = ProjCategory::find(categoryId);

                if (category)
                {
                    TransTaxInformationHelper::initFromCategory(_transTaxInformation, _sourceTable, category);
                }
            }
        }
    
        return isTransTaxInformationFromProjTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineInclTaxForProj</Name>
				<Source><![CDATA[
    private static InclTax determineInclTaxForProj(
        TransTaxInformation _transTaxInformation,
        ProjTable _projTable,
        CustTable _custTable,
        VendTable _vendTable)
    {
        InclTax inclTax;
        if (_transTaxInformation.InclTax
            || (_projTable.CustAccount && CustTable::find(_projTable.CustAccount).InclTax)
            || _custTable.InclTax
            || _vendTable.InclTax)
        {
            inclTax = true;
        }
        return inclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes excise fields base on invent item.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_itemId">
    /// The invent item Id.
    /// </param>
    public static void initFromInventItem(TransTaxInformation _transTaxInformation, ItemId _itemId, CustVendTable _custVendTable)
    {
        if (!_transTaxInformation.TaxRateType)
        {
            InventTable inventTable;
            inventTable = InventTable::find(_itemId);
            _transTaxInformation.TaxRateType = inventTable.TaxRateType;
        }
	}

]]></Source>
			</Method>
			<Method>
				<Name>initFromEcoResCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TransTaxInformation</c> record from the <c>EcoResCategory</c> record.
    /// </summary>
    /// <param name = "_transTaxInformation">The transaction tax information.</param>
    /// <param name = "_categoryRecId">RecId of EcoResCategory record.</param>
    protected static void initFromEcoResCategory(TransTaxInformation _transTaxInformation, EcoResCategoryId  _categoryRecId)
    {
        if (!_transTaxInformation.TaxRateType)
        {
            EcoResCategoryTax   ecoResCategoryTax;
            EcoResCategory      selectedCategory;
            EcoResCategoryId    ecoResCategoryId = _categoryRecId;

            // If Tax rate type is defined in parent node but not in child node, Tax rate type will default from parent node.
            do
            {
                selectedCategory = EcoResCategory::find(ecoResCategoryId);
                ecoResCategoryTax = EcoResCategoryTax::findByEcoResCategoryId(selectedCategory.RecId);

                ecoResCategoryId = selectedCategory.ParentCategory;
            }
            while (!ecoResCategoryTax.TaxRateType && ecoResCategoryId);

            _transTaxInformation.TaxRateType = ecoResCategoryTax.TaxRateType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMarkupTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields base on markupTable.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    // <param name="_sourceTable">
    /// The buffer of source table.
    /// </param>
    protected static void initFromMarkupTable(TransTaxInformation _transTaxInformation, Common _sourceTable)
    {
        MarkupTrans markupTrans = _sourceTable;
        MarkupTable markupTable = MarkupTable::find(markupTrans.ModuleType, markupTrans.MarkupCode);

        _transTaxInformation.TaxRateType = markupTable.TaxRateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes default tax information from category
    /// </summary>
    /// <param name="_transTaxInformation">
    /// Category Id.
    /// </param>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_sourceTable">
    /// The transation table.
    /// </param>
    protected static void initFromCategory(TransTaxInformation _transTaxInformation, Common _sourceTable, ProjCategory category)
    {
        if (category && !_transTaxInformation.TaxRateType)
        {
            _transTaxInformation.TaxRateType = category.TaxRateType;
        }
	}

]]></Source>
			</Method>
			<Method>
				<Name>updateFromCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update transaction tax information from project category.
    /// </summary>
    /// <param name = "_transTaxInformation">The transaction tax information.</param>
    /// <param name = "_projCategory">The project category.</param>
    protected static void updateFromCategory(TransTaxInformation _transTaxInformation, ProjCategory _projCategory)
    {
        if (_projCategory)
        {
            _transTaxInformation.TaxRateType = _projCategory.TaxRateType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTaxInfoFromRefTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes default tax information from customer or vendor.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_custVendTable">
    /// The customer or vendor.
    /// </param>
    /// <param name="_taxModelTaxable">
    /// The transaction TaxModelTaxable object.
    /// </param>
    public static void initCustVendTaxInfoFromRefTaxModelDocLine(TransTaxInformation _transTaxInformation, CustVendTable _custVendTable, TaxModelTaxable _taxModelTaxable)
    {
        TaxModelTaxable taxModelTaxable = _taxModelTaxable.getReferenceTaxModelDocLine();
    
        if (taxModelTaxable)
        {
            switch (_custVendTable.TableId)
            {
                case tableNum(VendTable) :
                    _transTaxInformation.VendorLocation = taxModelTaxable.getPartyLogisticsPostalAddress().Location;
                    TransTaxInformationHelper::initFromVendorLocation(_transTaxInformation);
                    break;
                case tableNum(CustTable) :
                    _transTaxInformation.CustomerLocation   = taxModelTaxable.getPartyLogisticsPostalAddress().Location;
                    TransTaxInformationHelper::initFromCustomerLocation(_transTaxInformation);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of tax information helper class.
    /// </summary>
    /// <returns>
    /// The new TransTaxInformationHelper class.
    /// </returns>
    public static TransTaxInformationHelper newHelper()
    {
        TransTaxInformationHelper helper = new TransTaxInformationHelper();
    
        helper.init();
    
        return helper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes rule and TransitDocumentTaxInformationManager_IN.
    /// </summary>
    protected void init()
    {
        transitDocumentManager = TransitDocumentManager_IN::newManager();
    
        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransitDocumentType_IN transitDocumentType;
    
            select firstOnly RecId from transitDocumentType
                    where transitDocumentType.RefTableId == tableNum(TransTaxInformation);
    
            if (!transitDocumentType.RecId)
            {
                TransitDocumentTransactionRuleHelper_IN::initRule();
            }
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the tax information for source table.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table Id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record Id.
    /// </param>
    /// <param name="_type">
    /// The transTaxInformation type.
    /// </param>
    /// <returns>
    /// The tax information.
    /// </returns>
    public TransTaxInformation findTransTaxInformation(
            RefTableId                  _sourceTableId,
            RefRecId                    _sourceRecId,
            TransTaxInformationType_IN  _type = TransTaxInformationType_IN::Normal)
    {
        Common  record = DataExpUtil::find(_sourceTableId, _sourceRecId);

        return this.findTransTaxInformationByRecord(record, _type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransTaxInformationByRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the tax information for source table.
    /// </summary>
    /// <param name="_record">
    /// The source transaction record.
    /// </param>
    /// <param name="_type">
    /// The transTaxInformation type.
    /// </param>
    /// <returns>
    /// The tax information.
    /// </returns>
    public TransTaxInformation findTransTaxInformationByRecord(
            Common						_record,
            TransTaxInformationType_IN  _type = TransTaxInformationType_IN::Normal)
    {
        List                    transTaxInformationList;
        ListEnumerator          listEnumerator;
        TransTaxInformation     transTaxInformation;
        RefTableId              sourceTableId;
        RefRecId                sourceRecId;

        [sourceTableId, sourceRecId, _record.RecVersion] = this.getSourceRecordInfo(_record);

        if (sourceTableId && sourceRecId)
        {
            RefRecId recId;
            SysGlobalObjectCache cache = classFactory.globalObjectCache();
            container cacheKey = [sourceTableId, sourceRecId, _record.RecVersion, _type];

            container cachedValue = cache.find(#TransactionToTransTaxInformationCacheScope, cacheKey);
            if (cachedValue != conNull())
            {
                [recId] = cachedValue;
                select firstonly transTaxInformation
                    where transTaxInformation.RecId == recId;
            }

            if (!transTaxInformation)
            {
                cache.remove(#TransactionToTransTaxInformationCacheScope, cacheKey);

                transTaxInformationList = transitDocumentManager.findTransitDocumentsByReferenceRecord(
                                                                    _record,
                                                                    TransTaxInformationHelper::getSampleTransTaxInformation(sourceTableId, _type));
                listEnumerator = transTaxInformationList.getEnumerator();
    
                if (listEnumerator.moveNext())
                {
                    transTaxInformation = listEnumerator.current();
                }

                if(transTaxInformation.RecId)
                {
                    cache.insert(#TransactionToTransTaxInformationCacheScope, cacheKey, [transTaxInformation.RecId]);
                }
            }
        }
        return transTaxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceRecordInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets TableId, RecVersion and RecId of source record.
    /// </summary>
    /// <param name = "_SourceTable">The SourceTable object.</param>
    /// <returns>The TableId, RecVersion and RecId of source record.</returns>
    private container getSourceRecordInfo(Common _SourceTable)
    {
        container sourceInfo;
        switch (_sourceTable.tableId)
        {
            case tableNum(ProjProposalItem) :
                ProjProposalItem projProposalItem, projProposalItemLoc;
                projProposalItem = _SourceTable;
                ProjItemTrans projItemTrans;

                select firstonly RecId, RecVersion from projItemTrans
                    join RecId from projProposalItemLoc
                        where projProposalItemLoc.ProjTransId == projItemTrans.ProjTransId
                            && projProposalItemLoc.RecId  == projProposalItem.RecId;
                sourceInfo = [tableNum(ProjItemTrans), projItemTrans.RecId, projItemTrans.RecVersion];
                break;

            case tableNum(ProjProposalRevenue) :
                ProjProposalRevenue projProposalRevenue, projProposalRevenueLoc;
                projProposalRevenue = _SourceTable;
                ProjRevenueTrans projRevenueTrans;

                select firstonly RecId, RecVersion from projRevenueTrans
                    join RecId from projProposalRevenueLoc
                        where projProposalRevenueLoc.TransId == projRevenueTrans.TransId
                            && projProposalRevenueLoc.RecId == projProposalRevenue.RecId;
                sourceInfo = [tableNum(ProjRevenueTrans), projRevenueTrans.RecId, projRevenueTrans.RecVersion];

                break;

            case tableNum(ProjProposalOnAcc) :
                ProjProposalOnAcc projProposalOnAcc, ProjProposalOnAccLoc;
                projProposalOnAcc = _SourceTable;
                ProjOnAccTrans projOnAccTrans;

                select firstonly RecId, RecVersion from projOnAccTrans
                    join RecId from ProjProposalOnAccLoc
                        where ProjProposalOnAccLoc.TransId == projOnAccTrans.TransId
                            && ProjProposalOnAccLoc.RecId == projProposalOnAcc.RecId;
                sourceInfo = [tableNum(ProjOnAccTrans), projOnAccTrans.RecId, projOnAccTrans.RecVersion];

                break;

            case tableNum(ProjProposalEmpl) :
                ProjProposalEmpl projProposalEmpl, projProposalEmplLoc;
                projProposalEmpl = _SourceTable;
                ProjEmplTrans projEmplTrans;

                select firstonly RecId, RecVersion from projEmplTrans
                    join RecId from projProposalEmplLoc
                        where projProposalEmplLoc.TransId == projEmplTrans.TransId
                            && projProposalEmplLoc.RecId == projProposalEmpl.RecId;
                sourceInfo = [tableNum(ProjEmplTrans), projEmplTrans.RecId, projEmplTrans.RecVersion];

                break;

            case tableNum(ProjProposalCost) :
                ProjProposalCost projProposalCost, projProposalCostLoc;
                projProposalCost = _SourceTable;
                ProjCostTrans projCostTrans;

                select firstonly RecId, RecVersion from projCostTrans
                    join RecId from projProposalCostLoc
                        where projProposalCostLoc.TransId == projCostTrans.TransId
                            && projProposalCostLoc.RecId == projProposalCost.RecId;
                sourceInfo = [tableNum(ProjCostTrans), projCostTrans.RecId, projCostTrans.RecVersion];

                break;

            default :
                sourceInfo = [_SourceTable.TableId, _SourceTable.RecId, _SourceTable.RecVersion];
                break;
        }

        return sourceInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear the cache which accelerate the find process from trnascation to TransTaxInformation
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table Id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record Id.
    /// </param>
    public static void clearCache(
            RefTableId                  _sourceTableId,
            RefRecId                    _sourceRecId)
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSampleTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a sample transTaxInformation which is used for transit document framework.
    /// </summary>
    /// <param name = "_type">The type for transaction tax information.</param>
    /// <returns>
    /// The sample transTaxInformation.
    /// </returns>
    protected static TransTaxInformation getSampleTransTaxInformation(
            TableId                     _sourceTableId,
            TransTaxInformationType_IN  _type = TransTaxInformationType_IN::Normal)
    {
        TransTaxInformation transTaxInformation;
        transTaxInformation.Type = _type;
    
        if (_sourceTableId == tableNum(InventTransferLine) && _type == TransTaxInformationType_IN::Normal)
        {
            transTaxInformation.Type = TransTaxInformationType_IN::InventTransferFrom;
        }
    
        return transTaxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TransTaxInformation</c> record from the <c>TaxInformation_IN</c> record.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    public static TaxInformation_IN initFromTaxInformation(TransTaxInformation _transTaxInformation)
    {
        TaxInformation_IN taxInformation = TaxInformation_IN::find(_transTaxInformation.TaxInformation);
        _transTaxInformation.TaxID = taxInformation.TaxID;
        return taxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCompanyLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes tax information base on company location.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    public static void initFromCompanyLocation(TransTaxInformation _transTaxInformation)
    {
        _transTaxInformation.TaxInformation = TaxInformation_IN::findDefaultbyLocation(_transTaxInformation.CompanyLocation).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustomerLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes tax information base on Customer location.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_custVendTable">
    /// The customer table.
    /// </param>
    public static void initFromCustomerLocation(TransTaxInformation _transTaxInformation, CustVendTable _custVendTable = null)
    {
        if (_custVendTable && !_transTaxInformation.CustomerLocation)
        {
            _transTaxInformation.CustomerLocation = TransTaxInformationHelper::findLocationByParty(_custVendTable.Party);
        }
    
        _transTaxInformation.CustomerTaxInformation = TaxInformation_IN::findDefaultbyLocation(_transTaxInformation.CustomerLocation).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendorLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes tax information base on Vendor location.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_custVendTable">
    /// The vendor table.
    /// </param>
    public static void initFromVendorLocation(TransTaxInformation _transTaxInformation, CustVendTable _custVendTable = null)
    {
        if (_custVendTable)
        {
            _transTaxInformation.VendorLocation = TransTaxInformationHelper::findLocationByParty(_custVendTable.Party);
        }
    
        _transTaxInformation.VendorTaxInformation = TaxInformation_IN::findDefaultbyLocation(_transTaxInformation.VendorLocation).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLocationByParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the LogisticsLocationRecId with Party.
    /// </summary>
    /// <param name="_partyRecId">
    /// The DirParty RecId.
    /// </param>
    protected static LogisticsLocationRecId findLocationByParty(DirPartyRecId _partyRecId)
    {
        LogisticsLocation   logisticsLocation;
        DirPartyLocation    dirPartyLocation;

        select firstonly RecId from logisticsLocation
            where logisticsLocation.IsPostalAddress == NoYes::Yes
            exists join dirPartyLocation
                where dirPartyLocation.Location   == logisticsLocation.RecId
                    && dirPartyLocation.Party     == _partyRecId
                    && dirPartyLocation.IsPrimary == true;

        if(!logisticsLocation.RecId)
        {
            select firstonly RecId from logisticsLocation
                where logisticsLocation.IsPostalAddress == NoYes::Yes
                exists join dirPartyLocation
                    where dirPartyLocation.Location   == logisticsLocation.RecId
                        && dirPartyLocation.Party     == _partyRecId;
        }

        return logisticsLocation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInitForServiceOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check is init from service order.
    /// </summary>
    /// <param name="_taxModelTaxable">
    /// The transaction TaxModelTaxable object.
    /// </param>
    /// <returns>
    /// True if taxModelTaxable is exists and taxModelTaxable is from TaxModelDocLineServiceOrderImpl; otherwise, false.
    /// </returns>
    protected static boolean isInitForServiceOrder(TaxModelTaxable _taxModelTaxable)
    {
        return _taxModelTaxable && (_taxModelTaxable is TaxModelDocLineServiceOrderImpl);
	}

]]></Source>
			</Method>
			<Method>
				<Name>isInitForMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check is init from markup trans.
    /// </summary>
    /// <param name="_taxModelTaxable">
    /// The transaction TaxModelTaxable object.
    /// </param>
    /// <returns>
    /// True if taxModelTaxable is exists and taxModelTaxable is from TaxModelDocLineMarkupTransImpl; otherwise, false.
    /// </returns>
    protected static boolean isInitForMarkupTrans(TaxModelTaxable _taxModelTaxable)
    {
        return _taxModelTaxable && (_taxModelTaxable is TaxModelDocLineMarkupTransImpl);
	}

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field base on customer or vendor.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_custVendTable">
    /// The customer or vendor.
    /// </param>
    /// <param name="_taxModelTaxable">
    /// The transaction TaxModelTaxable object.
    /// </param>
    public static void initFromCustVend(
            TransTaxInformation _transTaxInformation,
            CustVendTable       _custVendTable,
            TaxModelTaxable     _taxModelTaxable = null)
    {
        if (_custVendTable)
        {
            if (TransTaxInformationHelper::isInitForMarkupTrans(_taxModelTaxable))
            {
                TransTaxInformationHelper::initCustVendTaxInfoFromRefTaxModelDocLine(_transTaxInformation, _custVendTable, _taxModelTaxable);
            }
            else if (TransTaxInformationHelper::isInitForServiceOrder(_taxModelTaxable))
            {
                TransTaxInformationHelper::initDefaultCustVendTaxInformation(_transTaxInformation, _taxModelTaxable.getCustTable());
                TransTaxInformationHelper::initFromVendorLocation(_transTaxInformation, _taxModelTaxable.getVendTable());
            }
            else
            {
                TransTaxInformationHelper::initDefaultCustVendTaxInformation(_transTaxInformation, _custVendTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendByRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TransTaxInformation</c> from customer or vendor for specific trasaction.
    /// </summary>
    /// <param name = "_transaction">Transaction record</param>
    /// <param name = "_custVendTable">Customer or Vendor</param>
    public static void initFromCustVendByRecord(Common _transaction, CustVendTable _custVendTable)
    {
        if (!_transaction || !_custVendTable)
        {
            return;
        }

        ttsbegin;
        TransTaxInformation transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(_transaction);

        transTaxInformation.selectForUpdate(true);
        TransTaxInformationHelper::initFromCustVend(transTaxInformation, _custVendTable);
        transTaxInformation.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultCustVendTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes default tax information from customer or vendor.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_custVendTable">
    /// The customer or vendor.
    /// </param>
    public static void initDefaultCustVendTaxInformation(TransTaxInformation  _transTaxInformation, CustVendTable _custVendTable)
    {
        switch (_custVendTable.TableId)
        {
            case tableNum(VendTable) :
                TransTaxInformationHelper::initFromVendorLocation(_transTaxInformation, _custVendTable);
                break;
            case tableNum(CustTable) :
                TransTaxInformationHelper::initFromCustomerLocation(_transTaxInformation, _custVendTable);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultBankTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes default tax information from bank.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_bankAccountTable">
    /// The bank table.
    /// </param>
    public static void initDefaultBankTaxInformation(TransTaxInformation  _transTaxInformation, BankAccountTable _bankAccountTable)
    {
        _transTaxInformation.BankLocation = _bankAccountTable.Location;
        _transTaxInformation.BankTaxInformation = TaxInformation_IN::findDefaultbyLocation(_transTaxInformation.BankLocation).RecId;
        _transTaxInformation.CustomerLocation = 0;
        _transTaxInformation.CustomerTaxInformation = 0;
        _transTaxInformation.VendorLocation = 0;
        _transTaxInformation.VendorTaxInformation = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransTaxInformationFromProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update transaction tax information from project table.
    /// </summary>
    /// <param name = "_sourceTable">
    /// The source transaction record.
    /// </param>
    /// <param name = "_type">
    /// Type of TransTaxInformation.
    /// </param>
    public void updateTransTaxInformationFromProjTable(
        Common						_sourceTable,
        TransTaxInformationType_IN	_type = TransTaxInformationType_IN::Normal)
    {
        ProjTable                   projTable;
        TSTimesheetLine             tsTimesheetLine;
        ProjJournalTrans            projJournalTrans;
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTrans_project  ledgerJournalTrans_project;
    
        if (_sourceTable)
        {
            switch (_sourceTable.TableId)
            {
                case tableNum(ProjJournalTrans) :
                    projJournalTrans = _sourceTable;
                    projTable = ProjTable::find(projJournalTrans.ProjId);
                    break;
    
                case tableNum(TSTimesheetLine) :
                    tsTimesheetLine = _sourceTable;
                    projTable = ProjTable::find(tsTimesheetLine.ProjId);
                    break;
    
                case tableNum(LedgerJournalTrans_project) :
                    ledgerJournalTrans_project = _sourceTable;
                    projTable = ProjTable::find(ledgerJournalTrans_project.ProjId);
                    break;
    
                case tableNum(LedgerJournalTrans) :
                    ledgerJournalTrans = _sourceTable;
                    projTable = ProjTable::find(ledgerJournalTrans.parmAccount());
                    break;
            }

			this.doUpdateTransTaxInformationFromProjTable(_sourceTable, projTable, _type);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransTaxInformationFromProjCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update transaction tax information from project category.
    /// </summary>
    /// <param name="_sourceTable">
    /// The source transaction.
    /// </param>
    /// <param name="_categoryId">
    /// The categoryId of source transaction.
    /// </param>
    /// <param name="_type">
    /// The type.
    /// </param>
    public void updateTransTaxInformationFromProjCategory(
        Common _sourceTable,
        CategoryId _categoryId,
        TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        TransTaxInformation         transTaxInformation;
        List                        transTaxInformationList;
        ListEnumerator              listEnumerator;
        CategoryId                  categoryId;
        ProjCategory                categoryLoc;
        
        if (_categoryId)
        {
            categoryLoc = ProjCategory::find(_categoryId);
        }

        if (categoryLoc)
        {
            transTaxInformationList = transitDocumentManager.findTransitDocumentsByReference(
                                                                _sourceTable.TableId,
                                                                _sourceTable.RecId,
                                                                TransTaxInformationHelper::getSampleTransTaxInformation(_sourceTable.TableId, _type));
            
            if (transTaxInformationList && transTaxInformationList.elements())
            {
                listEnumerator = transTaxInformationList.getEnumerator();
                listEnumerator.moveNext();
                transTaxInformation = listEnumerator.current();

                if (transTaxInformation)
                {
                    ttsbegin;
                    transTaxInformation.selectForUpdate(true);

                    TransTaxInformationHelper::updateFromCategory(transTaxInformation, categoryLoc);

                    transTaxInformation.update();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateTransTaxInformationFromProjTable</Name>
				<Source><![CDATA[
    /// <summary>
	/// Update transaction tax information from project table.
	/// </summary>
	/// <param name = "_sourceTable">
	/// The source transaction record.
	/// </param>
    /// <param name = "_projTable">
	/// The project table.
    /// </param>
    /// <param name = "_type">
    /// Type of TransTaxInformation.
    /// </param>
    protected void doUpdateTransTaxInformationFromProjTable(
        Common						_sourceTable,
        ProjTable                   _projTable,
        TransTaxInformationType_IN	_type = TransTaxInformationType_IN::Normal)
    {
	
	}

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find or create transaction tax information.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The transaction buffer table Id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The transaction buffer table record Id.
    /// </param>
    /// <param name="_selectForUpdate">
    /// The boolean value for update.
    /// </param>
    /// <param name="_type">
    /// The transaction tax information type.
    /// </param>
    /// <returns>
    /// Return the transaction tax information record, if exist the record, else create a new record and return it.
    /// </returns>
    public static TransTaxInformation findOrCreateTransTaxInformation(
            RefTableId  _sourceTableId,
            RefRecId    _sourceRecId,
            boolean     _selectForUpdate = false,
            TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        Common  record = DataExpUtil::find(_sourceTableId, _sourceRecId);

        return TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(record, _selectForUpdate, _type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateTransTaxInformationByRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find or create transaction tax information by record.
    /// </summary>
    /// <param name="_record">
    /// The transaction table.
    /// </param>
    /// <param name="_selectForUpdate">
    /// The boolean value for update.
    /// </param>
    /// <param name="_type">
    /// The transaction tax information type.
    /// </param>
    /// <returns>
    /// Return the transaction tax information record, if exist the record, else create a new record and return it.
    /// </returns>
    public static TransTaxInformation findOrCreateTransTaxInformationByRecord(
            Common		_record,
            boolean     _selectForUpdate = false,
            TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        TransTaxInformationHelper    helper = TransTaxInformationHelper::newHelper();
        TransTaxInformation transTaxInformation;
    
        transTaxInformation = helper.getTransTaxInformationByRecord(_record, _type);
    
        if (transTaxInformation)
        {
            transTaxInformation.selectForUpdate(_selectForUpdate);
        }
    
        return transTaxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCompanyLocationFromTransTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update company location from transaction table.
    /// </summary>
    /// <param name="_sourceTable">
    /// The source transaction.
    /// </param>
    /// <param name="_addressRecId">
    /// The logistics postal address RecId.
    /// </param>
    /// <param name="_type">
    /// The type.
    /// </param>
    public void updateCompanyLocationFromTransTable(
            Common _sourceTable,
            LogisticsPostalAddressRecId _addressRecId,
            TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        TransTaxInformation     transTaxInformation;
        List                    transTaxInformationList;
        ListEnumerator          listEnumerator;
    
        transTaxInformationList = transitDocumentManager.findTransitDocumentsByReference(
                                                                _sourceTable.TableId,
                                                                _sourceTable.RecId,
                                                                TransTaxInformationHelper::getSampleTransTaxInformation(_sourceTable.TableId, _type));
    
        if (transTaxInformationList && transTaxInformationList.elements())
        {
            listEnumerator = transTaxInformationList.getEnumerator();
            listEnumerator.moveNext();
            transTaxInformation = listEnumerator.current();
    
            if (transTaxInformation)
            {
                ttsbegin;
                transTaxInformation.selectForUpdate(true);
                transTaxInformation.CompanyLocation = LogisticsPostalAddress::getLocation(_addressRecId);
                TransTaxInformationHelper::initFromCompanyLocation(transTaxInformation);
                TransTaxInformationHelper::initFromTaxInformation(transTaxInformation);
                transTaxInformation.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransTaxInformations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the list of tax information for source table.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table Id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record Id.
    /// </param>
    public void createTransTaxInformations(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        Common  record = DataExpUtil::find(_sourceTableId, _sourceRecId);

        this.createTransTaxInformationsByRecord(record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransTaxInformationsByRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the list of tax information for source table.
    /// </summary>
    /// <param name="_record">
    /// The source transaction record.
    /// </param>
    /// <param name="_type">
    /// The type.
    /// </param>
    /// <returns>
    /// The transaction tax information record.
    /// </returns>
    public TransTaxInformation createTransTaxInformationsByRecord(
            Common   _record,
            TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        Common                  transactionHeader;
        TransTaxInformation     transTaxInformation;
        TransTaxInformation     ret;
        RefTableId              sourceTableId   = _record.TableId;
        RefRecId                sourceRecId     = _record.RecId;
        SalesPurchJournalLine   salesPurchJournalLine;
    
        if (sourceTableId && sourceRecId)
        {
            if (SalesPurchJournalLine::getBuffer(sourceTableId).TableId == sourceTableId)
            {
                salesPurchJournalLine = _record;
            }
            if (salesPurchJournalLine)
            {
                transactionHeader = salesPurchJournalLine.SalesPurchJournalLine::salesPurchJournalTable();
            }
            List transitDocTypeList = transitDocumentManager.findTransitDocTypes(sourceTableId, tableNum(TransTaxInformation));

            if (transitDocTypeList.empty())
            {
                var log = TaxEngineEventSource::Get_Log();
                str name = strFmt("TransitDocumentTransactionRule_IN_Missing_Between_TransTaxInformation_And_%1", tableId2PName(sourceTableId));
                str value = int2Str(sourceTableId);
                log.TrackMetric(name, value);
            }

            ListEnumerator enumerator = transitDocTypeList.getEnumerator();
    
            while (enumerator.moveNext())
            {
                TransitDocumentType_IN transitDocType = enumerator.current();
                    
                transTaxInformation = this.findTransTaxInformationByRecord(_record, transitDocType.DistinguishFieldValue);

                if (transTaxInformation.RecId == 0)
                {
                    transTaxInformation.clear();
                    transTaxInformation.initValue();
                    transTaxInformation.Type = transitDocType.DistinguishFieldValue;
                        
                    ttsbegin;
                    this.initTransTaxInformation(transTaxInformation, _record, transTaxInformation.Type);

                    if (transactionHeader)
                    {
                        transTaxInformation.HeadingTableId = transactionHeader.TableId;
                        transTaxInformation.HeadingRecId = transactionHeader.RecId;
                    }

                    transTaxInformation.insert();

                    transitDocumentManager.addTransitDocument(_record, transTaxInformation, transactionHeader);

                    SysGlobalObjectCache cache = classFactory.globalObjectCache();
                    container cacheKey = [sourceTableId, sourceRecId, _record.RecVersion, _type];

                    cache.insert(#TransactionToTransTaxInformationCacheScope, cacheKey, [transTaxInformation.RecId]);
                    
                    if (_type == transitDocType.DistinguishFieldValue)
                    {
                        ret = transTaxInformation;
                    }

                    ttscommit;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransactionRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find transaction record.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table Id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record Id.
    /// </param>
    /// <returns>
    /// The transaction table.
    /// </returns>
    private Common findTransactionRecord(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        DictTable   dictTable;
        Common      transaction;
    
        dictTable = new DictTable(_sourceTableId);
        transaction = dictTable.makeRecord();
    
        select firstonly transaction
                where transaction.RecId == _sourceRecId;
    
        return transaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets of tax information for source table.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table Id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record Id.
    /// </param>
    /// <param name="_type">
    /// The transaction tax information type.
    /// </param>
    /// <returns>
    /// The tax information.
    /// </returns>
    public TransTaxInformation getTransTaxInformation(
            RefTableId              _sourceTableId,
            RefRecId                _sourceRecId,
            TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        Common  record = DataExpUtil::find(_sourceTableId, _sourceRecId);
    
        return this.getTransTaxInformationByRecord(record, _type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransTaxInformationByRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets of tax information for source table by record.
    /// </summary>
    /// <param name="_record">
    /// The transaction table.
    /// </param>
    /// <param name="_type">
    /// The transaction tax information type.
    /// </param>
    /// <returns>
    /// The tax information.
    /// </returns>
    public TransTaxInformation getTransTaxInformationByRecord(
            Common					    _record,
            TransTaxInformationType_IN  _type = TransTaxInformationType_IN::Normal)
    {
        TransTaxInformation     transTaxInformation;
        List                    transTaxInformationList;

        transTaxInformation = this.findTransTaxInformationByRecord(_record, _type);
    
        if (!transTaxInformation)
        {
            transTaxInformation = this.createTransTaxInformationsByRecord(_record, _type);
        }
    
        return transTaxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transit tax information from the source transaction to the target transaction.
    /// </summary>
    /// <param name="_fromSourceTable">
    /// The source transaction table.
    /// </param>
    /// <param name="_toSourceTable">
    /// The target transaction table.
    /// </param>
    private void transitTransTaxInformation(Common _fromSourceTable, Common _toSourceTable)
    {
        SalesPurchJournalLine salesPurchJournalLine = SalesPurchJournalLine::findRecId(_toSourceTable.TableId, _toSourceTable.RecId);
        SalesPurchJournalTable sourceTableHeader;
    
        if (salesPurchJournalLine)
        {
            sourceTableHeader = salesPurchJournalLine.SalesPurchJournalLine::salesPurchJournalTable();
        }
        transitDocumentManager.transit(_fromSourceTable, _toSourceTable, sourceTableHeader, tableNum(TransTaxInformation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxModelTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set or get the TaxModelTaxable.
    /// </summary>
    /// <param name="_taxModelTaxable">
    /// The instance of TaxModelTaxable.
    /// </param>
    /// <returns>
    /// The TaxModelTaxable.
    /// </returns>
    public TaxModelTaxable parmTaxModelTaxable(TaxModelTaxable _taxModelTaxable = taxModelTaxable)
    {
        taxModelTaxable = _taxModelTaxable;
    
        return taxModelTaxable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes tax information transaction.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The buffer of tax information.
    /// </param>
    /// <param name="_sourceTable">
    /// The buffer of source table.
    /// </param>
    /// <param name="_type">
    /// Transaction tax information type.
    /// </param>
    private void initTransTaxInformation(
            TransTaxInformation         _transTaxInformation,
            Common                      _sourceTable,
            TransTaxInformationType_IN  _type = TransTaxInformationType_IN::Normal)
    {
        boolean         isTransTaxInformationFromProjTable;

        if (_sourceTable.TableId == tableNum(ProjJournalTrans)
                || _sourceTable.TableId == tableNum(TSTimesheetLine)
                || _sourceTable.TableId == tableNum(LedgerJournalTrans_Project)
                || (_sourceTable.TableId == tableNum(LedgerJournalTrans) && ledgerJournalTrans_project::find(_sourceTable.RecId))
                || (_sourceTable.TableId == tableNum(InventJournalTrans) && _sourceTable.(fieldNum(InventJournalTrans, ProjId)))
                || _sourceTable.TableId == tableNum(SMAServiceOrderLine)
                || _sourceTable.TableId == tableNum(ProjOnAccTrans)
                || (_sourceTable.TableId == tableNum(SalesLine) && _sourceTable.(fieldNum(SalesLine, ProjId))
                    && (_sourceTable.(fieldNum(SalesLine, SalesType)) == SalesType::ItemReq))
                || (_sourceTable.TableId == tableNum(SalesQuotationLine) && (_sourceTable.(fieldNum(SalesQuotationLine, QuotationType)) == QuotationType::Project))
                || (_sourceTable.TableId == tableNum(ProjAdvancedJournalLine)
                || (_sourceTable.TableId == tableNum(ProjAdvancedJournalLineTaxExtensionIN)))
                )
        {
            isTransTaxInformationFromProjTable = TransTaxInformationHelper::initFromProjTableOrCategory(_transTaxInformation, _sourceTable);
        }
    
        if (!isTransTaxInformationFromProjTable)
        {
            if (!taxModelTaxable)
            {
                taxModelTaxable = TaxModelDocLineFactory::getTaxModelDocLineInstance(_sourceTable, false);
            }

            ItemId itemId  = taxModelTaxable.getItemId();
            this.initFromNonProjTable(_transTaxInformation, _sourceTable, _type, itemId, taxModelTaxable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromNonProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes tax information transaction.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The buffer of tax information.
    /// </param>
    /// <param name="_sourceTable">
    /// The buffer of source table.
    /// </param>
    /// <param name="_type">
    /// Transaction tax information type.
    /// </param>
    /// <param name="_itemId">
    /// The item id information.
    /// </param>
    /// <param name="_taxModelTaxable">
    /// The tax model taxable information.
    /// </param>
    protected void initFromNonProjTable(
        TransTaxInformation         _transTaxInformation,
        Common                      _sourceTable,
        TransTaxInformationType_IN  _type            = TransTaxInformationType_IN::Normal,
        ItemId                      _itemId          = taxModelTaxable.getItemId(),
        TaxModelTaxable             _taxModelTaxable = taxModelTaxable)
    {
        CustVendTable custVendTable   = _taxModelTaxable.getPartyTable();
        _transTaxInformation.CompanyLocation = _taxModelTaxable.getTaxLogisticsPostalAddress(_type).Location;
        this.initTaxinformation(_transTaxInformation, custVendTable, _taxModelTaxable);

        boolean defaultCustomerLocationOfTaxInformationFeatureEnable = TaxPartyAddrOfTaxInfoTakeFromCustVendPrimaryAddrFeatureExposure::isEnabled();

        if (_sourceTable.TableId == tableNum(LedgerJournalTrans))
        {
            LedgerJournalTrans ledgerJournalTrans = _sourceTable;

            _transTaxInformation.InclTax = ledgerJournalTrans.ledgerJournalTable().LedgerJournalInclTax;

            if (ledgerJournalTrans.TransactionType == LedgerTransType::Fee && ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
            {
                BankAccountTable bankAccountTable = BankAccountTable::find(ledgerJournalTrans.parmOffsetAccount());
                TransTaxInformationHelper::initDefaultBankTaxInformation(_transTaxInformation, bankAccountTable);
            }
        }
        else if (_sourceTable.TableId == tableNum(SalesLine))
        {
            // When featrue management enables, the customer location of tax information takes from customer primary address, not taking from sales line.
            if (!defaultCustomerLocationOfTaxInformationFeatureEnable
                && !FeatureStateProvider::isFeatureEnabled(TaxCalculateGSTBasedOnInvoiceAccountFeature::instance())) // When feature "Calculate GST based on invoice account" enabled, the customer location should be taken from invoice account.
            {
                SalesLine salesLine = _sourceTable;
                _transTaxInformation.CustomerLocation = LogisticsPostalAddress::findRecId(salesLine.DeliveryPostalAddress).Location;
                TransTaxInformationHelper::initFromCustomerLocation(_transTaxInformation);
            }
        }
        else if (_sourceTable.TableId == tableNum(ProjAdvancedJournalLine)
            || _sourceTable.TableId == tableNum(ProjAdvancedJournalLineTaxExtensionIN))
        {
            ProjAdvancedJournalLine projAdvancedJournalLine;
            ProjAdvancedJournalLineTaxExtensionIN projAdvancedJournalLineTaxExtIN;
            switch (_sourceTable.TableId)
            {
                case tableNum(ProjAdvancedJournalLine) :
                    projAdvancedJournalLine = _sourceTable;
                    break;
                case tableNum(ProjAdvancedJournalLineTaxExtensionIN) :
                    projAdvancedJournalLineTaxExtIN = _sourceTable;
                    projAdvancedJournalLine = projAdvancedJournalLineTaxExtIN.projAdvancedJournalLine();
                    break;
            }
            ProjTable projTable = ProjTable::find(projAdvancedJournalLine.ProjId);
            CustTable custTable = _taxModelTaxable.getCustTable();
            VendTable VendTable = _taxModelTaxable.getVendTable();
            _transTaxInformation.InclTax =  TransTaxInformationHelper::determineInclTaxForProj(
                _transTaxInformation,
                projTable,
                custTable,
                vendTable);
        }

        if (_sourceTable.TableId == tableNum(MarkUpTrans))
        {
            TransTaxInformationHelper::initFromMarkupTable(_transTaxInformation, _sourceTable);
        }
        else
        {
            TransTaxInformationHelper::initFromInventItem(_transTaxInformation, _itemId, custVendTable);

            // It's possible to have both procurement/sales category and released product.
            // In that case, released product has higher priority to apply initialization information.
            if (_sourceTable.TableId == tableNum(PurchLine))
            {
                PurchLine purchLine = _sourceTable as PurchLine;
                if (purchLine.isCategoryBased())
                {
                    TransTaxInformationHelper::initFromEcoResCategory(_transTaxInformation, purchLine.ProcurementCategory);
                }

                // When featrue management enables, the company location of tax information of direct delivery PO takes from related SO company location.
                if (defaultCustomerLocationOfTaxInformationFeatureEnable && purchLine.ItemRefType == InventRefType::Sales)
                {
                    SalesLine salesLine;

                    select TableId, RecId from salesLine
                        where salesLine.SalesId == purchLine.inventRefId
                            && salesLine.InventTransId == purchLine.InventRefTransId
                            && purchLine.ItemRefType == InventRefType::Sales;

                    _transTaxInformation.CompanyLocation = this.findTransTaxInformation(salesLine.TableId, salesLine.RecId).CompanyLocation;
                    this.initTaxinformation(_transTaxInformation, custVendTable, _taxModelTaxable);
                }

            }
            else if (_sourceTable.TableId == tableNum(SalesLine))
            {
                SalesLine salesLine = _sourceTable as SalesLine;
                if (salesLine.isCategoryBased())
                {
                    TransTaxInformationHelper::initFromEcoResCategory(_transTaxInformation, salesLine.SalesCategory);
                }
            }
            else if (_sourceTable.TableId == tableNum(VendInvoiceInfoLine))
            {
                VendInvoiceInfoLine vendInvoiceInfoLine = _sourceTable;
                if (vendInvoiceInfoLine.isCategoryBased())
                {
                    TransTaxInformationHelper::initFromEcoResCategory(_transTaxInformation, vendInvoiceInfoLine.ProcurementCategory);
                }
            }
            else if (_sourceTable.TableId == tableNum(PurchReqLine))
            {
                PurchReqLine purchReqLine = _sourceTable as purchReqLine;
                if (purchReqLine.isCategoryBased())
                {
                    TransTaxInformationHelper::initFromEcoResCategory(_transTaxInformation, purchReqLine.ProcurementCategory);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxinformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the tax information.
    /// </summary>
    /// <param name = "_transTaxInformation">The buffer of tax information.</param>
    /// <param name = "_custVendTable">The customer or vendor.</param>
    /// <param name = "_taxModelTaxable">The transaction TaxModelTaxable object.</param>
    protected void initTaxinformation(TransTaxInformation _transTaxInformation,
                                      CustVendTable       _custVendTable,
                                      TaxModelTaxable     _taxModelTaxable)
    {
        TransTaxInformationHelper::initFromCompanyLocation(_transTaxInformation);
        TransTaxInformationHelper::initFromTaxInformation(_transTaxInformation);
        TransTaxInformationHelper::initFromCustVend(_transTaxInformation, _custVendTable, _taxModelTaxable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy tax information from one source table to other source table.
    /// </summary>
    /// <param name="_fromSourceTable">
    /// The from transaction buffer.
    /// </param>
    public static void copyTransTaxInformation(Common _fromSourceTable, Common _toSourceTable)
    {
        if (!_toSourceTable)
        {
            // Checks the target record first, cancel to copy if it's null.
            return;
        }

        // Tax information does not support transaction header and miscellaneous charges related to transaction header.
        // Copying tax information from transaction header will lead to runtime error, because 
        // it will initialize an empty object in method TaxModelDocLineMarkupTransImpl_IN::init.
        // So not need copy tax information of miscellaneous charges related to transaction header.
        boolean isNeedCopy = true;
        if (_fromSourceTable
            && _fromSourceTable.TableId == tableNum(MarkupTrans))
        {
            MarkupTrans markupTrans = _fromSourceTable;
            if (!Global::mappingExists(tableNum(SalesPurchJournalLine), markupTrans.TransTableId))
            {
                isNeedCopy = false;
            }
        }

        if (isNeedCopy)
        {
            // Need create transaction tax information for fromSourceTable when not exists
            TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(_fromSourceTable);

            TransTaxInformationHelper helper = TransTaxInformationHelper::newHelper();
            helper.transitTransTaxInformation(_fromSourceTable, _toSourceTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomerLocationFromTransTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update customer location from transaction table.
    /// </summary>
    /// <param name="_sourceTable">
    /// The source transaction.
    /// </param>
    /// <param name="_type">
    /// The type.
    /// </param>
    public void updateCustomerLocationFromTransTable(
        Common _sourceTable,
        TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        this.updateCustVendLocationFromTransTable(_sourceTable, _type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustVendLocationFromTransTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates customer/vendor location from transaction table.
    /// </summary>
    /// <param name="_sourceTable">The source transaction. </param>
    /// <param name="_type">The type.</param>
    public void updateCustVendLocationFromTransTable(
        Common _sourceTable,
        TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        TransTaxInformation     transTaxInformation;
        List                    transTaxInformationList;
        ListEnumerator          listEnumerator;
        ItemId                  itemId;

        if (!taxModelTaxable)
        {
            taxModelTaxable = TaxModelDocLineFactory::newTaxModelDocLine(_sourceTable);
        }
    
        itemId  = taxModelTaxable.getItemId();

        transTaxInformationList = transitDocumentManager.findTransitDocumentsByReference(
            _sourceTable.TableId,
            _sourceTable.RecId,
            TransTaxInformationHelper::getSampleTransTaxInformation(_sourceTable.TableId, _type));

        if (transTaxInformationList && transTaxInformationList.elements())
        {
            listEnumerator = transTaxInformationList.getEnumerator();
            listEnumerator.moveNext();
            transTaxInformation = listEnumerator.current();
            if (transTaxInformation)
            {
                ttsbegin;
                transTaxInformation.selectForUpdate(true);

                this.clearCustVendLocationBySourceTable(_sourceTable, transTaxInformation);
                this.initFromNonProjTable(transTaxInformation, _sourceTable, _type, itemId, taxModelTaxable);
                transTaxInformation.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCustVendLocationByTransTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets customer/vendor location of TransTaxInformation to default value.
    /// </summary>
    /// <param name = "_transTable">The transaction table.</param>
    public static void resetCustVendLocationByTransTable(Common _transTable)
    {
        TransTaxInformationHelper helper = TransTaxInformationHelper::newHelper();
        helper.clearCustVendLocation(_transTable, TransTaxInformationType_IN::Normal);
        helper.updateCustVendLocationFromTransTable(_transTable, TransTaxInformationType_IN::Normal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCustVendLocation</Name>
				<Source><![CDATA[
    private void clearCustVendLocation(
        Common _transTable,
        TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        TransTaxInformation     transTaxInformation;
        List                    transTaxInformationList;
        ListEnumerator          listEnumerator;

        transTaxInformationList = transitDocumentManager.findTransitDocumentsByReference(
            _transTable.TableId,
            _transTable.RecId,
            TransTaxInformationHelper::getSampleTransTaxInformation(_transTable.TableId, _type));

        if (transTaxInformationList && transTaxInformationList.elements())
        {
            listEnumerator = transTaxInformationList.getEnumerator();
            listEnumerator.moveNext();
            transTaxInformation = listEnumerator.current();
            if (transTaxInformation)
            {
                ttsbegin;
                transTaxInformation.selectForUpdate(true);

                transTaxInformation.CustomerLocation = 0;
                transTaxInformation.CustomerTaxInformation = 0;

                transTaxInformation.VendorLocation = 0;
                transTaxInformation.VendorTaxInformation = 0;

                transTaxInformation.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCustVendLocationBySourceTable</Name>
				<Source><![CDATA[
    private void clearCustVendLocationBySourceTable(Common _sourceTable, TransTaxInformation _transTaxInformation)
    {
        if(_sourceTable.TableId == tableNum(PurchLine))
        {
            _transTaxInformation.CustomerLocation = 0;
            _transTaxInformation.CustomerTaxInformation = 0;
        }
        else if (_sourceTable.TableId == tableNum(SalesLine))
        {
            _transTaxInformation.VendorLocation = 0;
            _transTaxInformation.VendorTaxInformation = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransTaxInformationByOldTransTaxInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>TransTaxInformation</c> for the transaction record.
    /// Then updates the field values with old <c>TransTaxInformation</c> buffer.
    /// </summary>
    /// <param name = "_record">The transaction record.</param>
    /// <param name = "_transTaxInformationOld">The old <c>TransTaxInformation</c> buffer.</param>
    internal static void createTransTaxInformationByOldTransTaxInfo(Common _record, TransTaxInformation _transTaxInformationOld)
    {
        ttsbegin;
        TransTaxInformation transTaxInformationNew =
            TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(_record, true);

        // HeadingTableId and HeadingRecId should keep the value of new record.
        RefTableId headingTableId = transTaxInformationNew.HeadingTableId;
        RefRecId headingRecId = transTaxInformationNew.HeadingRecId;

        buf2Buf(_transTaxInformationOld, transTaxInformationNew);

        transTaxInformationNew.HeadingTableId = headingTableId;
        transTaxInformationNew.HeadingRecId = headingRecId;

        transTaxInformationNew.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>