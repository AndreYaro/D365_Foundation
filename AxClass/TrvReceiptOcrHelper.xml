<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvReceiptOcrHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;
using System.Net.Http;
using Microsoft.Dynamics.ApplicationPlatform.Environment;
using Microsoft.Dynamics.Utilities.ExpenseReceiptHelper;

/// <summary>
/// The class holds the static methods for receipt capture functionality.
/// </summary>
public static class TrvReceiptOcrHelper
{
    private static const str ExpenseServiceName = 'expenseservice/api/receipt';
    private static const str ExpenseServiceEndpointWithEnvironmentId = 'expenseservice/api/environments/%1/receipt';
    private static SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(TrvReceiptOcrHelper));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>uploadReceiptToOcrService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uploads the receipt to the external service to retrieve and save receipt details.
    /// </summary>
    /// <param name = "_byteArray">Byte array for the attached receipt.</param>
    /// <param name = "_url">URL for the exyernal service which returns the data for the receipt. </param>
    /// <param name = "_docuRefRecId">The record identifier for the receipt.</param>
    /// <param name = "_hcmWorkerRecId">The record identifier for the employee.</param>
    /// <param name = "_isCreditCardExpense">If receipt is related to a corporate credit card expense, true; otherwise false.</param>
    /// <returns>
    /// JSON response from the OCR service in string format.
    /// </returns>
    public static str uploadReceiptToOcrService(System.Byte[] _byteArray, str _url, RefRecId _docuRefRecId, RefRecId _hcmWorkerRecId, boolean _isCreditCardExpense)
    {
        return TrvReceiptOcrHelper::getOcrDetailsForExpense(_byteArray, _url, _docuRefRecId, _hcmWorkerRecId, _isCreditCardExpense);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOcrDetailsForExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uploads the receipt to the external service to retrieve and save receipt details.
    /// </summary>
    /// <param name = "_byteArray">Byte array for the attached receipt.</param>
    /// <param name = "_url">URL for the exyernal service which returns the data for the receipt. </param>
    /// <param name = "_docuRefRecId">The record identifier for the receipt.</param>
    /// <param name = "_hcmWorkerRecId">The record identifier for the employee.</param>
    /// <param name = "_isCreditCardExpense">If receipt is related to a corporate credit card expense, true; otherwise false.</param>
    /// <param name = "_useEnvironmentId">If true updated url with environment id will be used</param>
    /// <returns>
    /// JSON response from the OCR service in string format.
    /// </returns>
    public static str getOcrDetailsForExpense(
        System.Byte[] _byteArray, str _url, RefRecId _docuRefRecId, RefRecId _hcmWorkerRecId, boolean _isCreditCardExpense, boolean _useEnvironmentId = false)
    {
        //If feature flag is disabled do nothing.
        if (!FeatureStateProvider::isFeatureEnabled(TrvReceiptCaptureEnableFeature::instance()))
        {
            return '';
        }

        str jsonResponse = '';

        try
        {
            //Verify file content, first verify if _byteArray is null, if not then verify length is valid.
            if (_byteArray == null || _byteArray.Length == 0)
            {
                throw error("@SYS:InvalidImageType");
            }

            TrvReceipt trvReceipt = new TrvReceipt();
            trvReceipt.ByteArray(_byteArray);
            trvReceipt.FileName(DocuRef::findRecId(_docuRefRecId).filename());

            HttpRequestMessage requestMessage = TrvReceiptOcrHelper::createRequest('POST', _url, trvReceipt, _useEnvironmentId);

            HttpResponseMessage responseMessage = TrvReceiptOcrHelper::sendRequestToService(requestMessage);
            
            jsonResponse = responseMessage.Content.ReadAsStringAsync().Result;
            Map data = RetailCommonWebAPI::getMapFromJsonString(jsonResponse);
            MapEnumerator mapEnumerator = data.getEnumerator();
            TrvReceiptOcrHelper::insertTrvReceiptOcrInfoTable(mapEnumerator, _docuRefRecId, _hcmWorkerRecId, _isCreditCardExpense);
        }
        catch
        {
            instrumentationLogger.logError('@Expense:ReceiptError');
            throw;
        }

        return jsonResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTrvReceiptOcrInfoTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through the receipt details and saves the record.
    /// </summary>
    /// <param name = "_mapEnumerator">The map enumerator created from the JSON response from OCR service.</param>
    /// <param name = "_docuRefRecId">The record identifier for the receipt.</param>
    /// <param name = "_hcmWorkerRecId">The record identifier for the employee.</param>
    /// <param name = "_isCreditCardExpense">If receipt is related to a corporate credit card expense, true; otherwise false.</param>
    private static void insertTrvReceiptOcrInfoTable(MapEnumerator _mapEnumerator, RefRecId _docuRefRecId, RefRecId _hcmWorkerRecId, boolean _isCreditCardExpense = false)
    {
        ttsbegin;
        TrvReceiptOcrInfo trvReceiptOcrInfo = TrvReceiptOcrInfo::find(_docuRefRecId, true);

        while (_mapEnumerator.moveNext())
        {
            switch (_mapEnumerator.currentKey())
            {
                case 'TransactionDate':
                    trvReceiptOcrInfo.TransDate = _mapEnumerator.currentValue(); 
                    break;
                case 'transactionTime':
                    trvReceiptOcrInfo.TransTime = _mapEnumerator.currentValue();
                    break;
                case 'SubTotal':
                    trvReceiptOcrInfo.TotalAmount = _mapEnumerator.currentValue();
                    break;
                case 'MerchantName':
                    trvReceiptOcrInfo.Merchant =_mapEnumerator.currentValue();
                    break;
                case 'Total':
                    trvReceiptOcrInfo.SubTotalAmount = _mapEnumerator.currentValue();
                    break;
            }
            
        }

        //If JSON response does not contain transaction date, default to current date.
        if (!trvReceiptOcrInfo.TransDate)
        {
            trvReceiptOcrInfo.TransDate = DateTimeUtil::date(DateTimeUtil::utcNow());
        }

        //If external service returns wrong value for Total and Sub-total, try to correct
        trvReceiptOcrInfo.TotalAmount = max(trvReceiptOcrInfo.TotalAmount,trvReceiptOcrInfo.SubTotalAmount);

        trvReceiptOcrInfo.HcmWorker = _hcmWorkerRecId;
        trvReceiptOcrInfo.IsCreditCardExpense = _isCreditCardExpense;
          
        // Cognitive service cannot infer currency from receipt, so defaulting to accounting currency for current company.
        trvReceiptOcrInfo.Currency = Ledger::accountingCurrency();

        if (trvReceiptOcrInfo.RecId)
        {
            trvReceiptOcrInfo.update();
        }
        else
        {
            trvReceiptOcrInfo.DocuRefRecId = _docuRefRecId;
            trvReceiptOcrInfo.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchExpenseFromReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Matches expense lines and expense receipts attached to the report.
    /// </summary>
    /// <param name = "_docuRefRecId">The record identifier for the receipt.</param>
    public static void matchExpenseFromReceipts(RefRecId _docuRefRecId)
    {
        TrvReceiptOcrInfo trvReceiptOcrInfo;
        DocuRef docuRef = DocuRef::findRecId(_docuRefRecId);
        TrvExpTable trvExpTable = TrvExpTable::findRecId(docuRef.RefRecId);
        const real ToleranceFactor = 1.5; //Assumption tip amount should not be greater than 50%. 

        while select trvReceiptOcrInfo
                    where trvReceiptOcrInfo.DocuRefRecId == docuRef.RecId
        {
            TrvExpTrans trvExpTrans = null;
            Amount toleranceAmount = trvReceiptOcrInfo.TotalAmount * ToleranceFactor;
            
            //Priority - 1: Where Transaction date and merchant matches and amount is in tolerance range
            select firstonly trvExpTrans
                 order by  trvExpTrans.AmountCurr desc
                    where trvExpTrans.TransDate == trvReceiptOcrInfo.TransDate
                    &&   trvExpTrans.AmountCurr >= trvReceiptOcrInfo.TotalAmount
                    &&   trvExpTrans.AmountCurr <  toleranceAmount
                    &&   trvExpTrans.MerchantId == trvReceiptOcrInfo.Merchant
                    &&   trvExpTrans.ReferenceDataAreaId == docuRef.ActualCompanyId
                    &&   trvExpTrans.ExpNumber == trvExpTable.ExpNumber;               
            
            //Priority - 2: Where Transaction date is receipt date is within a day of expense, amount and Currency matches
            if (!trvExpTrans.RecId)
            {
                select firstonly trvExpTrans
                    order by  trvExpTrans.AmountCurr desc
                            where (
                                    (trvExpTrans.TransDate <= (trvReceiptOcrInfo.TransDate +1)) &&
                                     (trvExpTrans.TransDate >= (trvReceiptOcrInfo.TransDate-1))
                                    )
                            &&   trvExpTrans.AmountCurr >= trvReceiptOcrInfo.TotalAmount
                            &&   trvExpTrans.AmountCurr <  toleranceAmount
                            &&   ( match(trvExpTrans.MerchantId,trvReceiptOcrInfo.Merchant) ||
                                    match(trvReceiptOcrInfo.Merchant,trvExpTrans.MerchantId)
                                    )
                            &&   trvExpTrans.ReferenceDataAreaId == docuRef.ActualCompanyId
                            &&   trvExpTrans.ExpNumber == trvExpTable.ExpNumber;
            }
            //if match found, attach receipts to line
            if (trvExpTrans.RecId)
            {
                TrvReceiptsHelper::attachReceiptToLine(trvReceiptOcrInfo.DocuRefRecId, trvExpTrans);
            }
            else
            {
                warning(strFmt("@Expense:ExpenseNoMatchInfo", docuRef.filename()));
            }
        }
             
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTrvExpTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates an expense transaction <c>TrvExpTrans</c> table with valid field values.
    /// </summary>
    /// <param name = "_expNumber">The record identifier for the expense report</param>
    /// <param name = "_docuRefRecId">The record identifier for the receipt</param>
    /// <returns>The instance of <c>TrvExpTrans</c> which contains expense line data.</returns>
    public static TrvExpTrans generateTrvExpTrans(TrvExpNumber _expNumber, RefRecId _docuRefRecId)
    {
        TrvExpTrans trvExpTrans;

        // Set expense line fields.
        trvExpTrans.ExpNumber = _expNumber;
        trvExpTrans.initFromTrvExpTable(_expNumber);
        trvExpTrans.initValue();

        TrvReceiptOcrInfo trvReceiptOcrInfo = TrvReceiptOcrInfo::find(_docuRefRecId);
        trvExpTrans.TransDate = trvReceiptOcrInfo.TransDate != dateNull() ? trvReceiptOcrInfo.TransDate: DateTimeUtil::date(DateTimeUtil::utcnow());
        trvExpTrans.CostType = trvReceiptOcrInfo.CostType;
        trvExpTrans.initFromCostType();
        
        if (!TrvExpTrans.ExchangeCode)
        {
            TrvExpTrans.ExchangeCode =  Ledger::accountingCurrency(CompanyInfo::current());
        }
        
        trvExpTrans.AmountCurr = trvReceiptOcrInfo.TotalAmount;
        trvExpTrans.amountMST();

        trvExpTrans.MerchantId = trvReceiptOcrInfo.Merchant;
        trvExpTrans.CreatingWorker = trvReceiptOcrInfo.HcmWorker;
        trvExpTrans.LineNumber = trvExpTrans.calculateNextLineNumber();
        trvExpTrans.ExpTransNumber = trvExpTrans::getNewExpTransNumber();
        
        return trvExpTrans;

    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReceiptDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process file and uploads it to cognitive service.
    /// </summary>
    /// <param name = "_docuRef">The record buffer for the DocuRef table for the receipt</param>
    /// <param name = "_hcmWorkerRecId">The record identifier for the employee.</param>
    /// <param name = "_isCreditCardExpense">If receipt is related to a corporate credit card expense, true; otherwise false.</param>
    public static void populateReceiptDetails(DocuRef _docuRef, RefRecId _hcmWorkerRecId, boolean _isCreditCardExpense = false)
    {

        System.Byte[] docuBytes = TrvReceiptOcrHelper::getByteArray(_docuRef);
        
        // Fetch expense service url.
        URL aiServiceURL = TrvReceiptOcrHelper::getEndpointWithEnvId();
        boolean isSuccessful =
            TrvReceiptOcrHelper::populateExpenseDetailsOfReceipt(docuBytes, aiServiceURL, _docuRef.RecId, _hcmWorkerRecId, _isCreditCardExpense, true);
        
        if (!isSuccessful)
        {
            aiServiceURL = TrvReceiptOcrHelper::getEndpoint();
            isSuccessful = TrvReceiptOcrHelper::populateExpenseDetailsOfReceipt(docuBytes, aiServiceURL, _docuRef.RecId, _hcmWorkerRecId, _isCreditCardExpense);
        }
        if (!isSuccessful) 
        {
            info('@Expense:ReceiptError');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateExpenseDetailsOfReceipt</Name>
				<Source><![CDATA[
    private static boolean populateExpenseDetailsOfReceipt(
        System.Byte[] _byteArray, str _url, RefRecId _docuRefRecId, RefRecId _hcmWorkerRecId, boolean _isCreditCardExpense, boolean _useEnvironmentId = false)
    {
        try
        {
            TrvReceiptOcrHelper::getOcrDetailsForExpense(_byteArray, _url, _docuRefRecId, _hcmWorkerRecId, _isCreditCardExpense, _useEnvironmentId);
        }
        catch
        {
            instrumentationLogger.logWarning(strFmt('Unable to populate receipt details with expense url: %1', _url));
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndpoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method attempts to fetch the island URL if it is available.
    /// </summary>
    /// <returns>Island URL if available, otherwise the endpoint from the <c>TrvParameters</c> table.</returns>
    [Hookable(false)]
    public static URL getEndpoint()
    {
        URL endPoint = '';

        // Get Island URI
        System.String islandUri = TrvReceiptOcrHelper::getEndPointFromEnvironmentSettings();

        if (System.String::IsNullOrEmpty(islandUri))
        {
            endPoint = TrvParameters::find().ReceiptOCRURL;
            instrumentationLogger.logInformation(strFmt("@Expense:EndpointAKSInfoMessage", endPoint));
        }
        else
        {
            if (!islandUri.EndsWith('/'))
            {
                islandUri += '/';
            }

            islandUri += ExpenseServiceName;
            endPoint = islandUri;
            instrumentationLogger.logInformation(strFmt("@Expense:EndpointIslandInfoMessage", endPoint));
        }

        return endPoint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndpointWithEnvId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method attempts to fetch the island URL with environment id.
    /// </summary>
    [Hookable(false)]
    public static URL getEndpointWithEnvId()
    {
        URL endPoint = '';
        // Get Island URI
        System.String islandUri = TrvReceiptOcrHelper::getEndPointFromEnvironmentSettings();
        if (!islandUri.EndsWith('/'))
        {
            islandUri += '/';
        }
        var environmentId = EnvironmentFactory::GetApplicationEnvironment().LCS.LCSEnvironmentId;
        
        if (environmentId == null) 
        {
            throw error("@Expense:EnvironmentIdNull");
        }
        islandUri += strFmt(ExpenseServiceEndpointWithEnvironmentId, environmentId);
        endPoint = islandUri;
        instrumentationLogger.logInformation(strFmt('Using island endpoint with environment Id %1', endPoint));
        return endPoint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndPointFromEnvironmentSettings</Name>
				<Source><![CDATA[
    private static URL getEndPointFromEnvironmentSettings()
    {
        System.String islandUri;

        try
        {
            islandUri = SysHttpCommunicationEnvironmentSettings::getMicroservicesApiEndpoint();
        }
        catch
        {
            instrumentationLogger.logWarning(strFmt('An exception occurred while trying to retrieve expense service URL from the environment settings.'));
        }

        return islandUri;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Http Request Message using request method, uri and receipt details
    /// </summary>
    /// <param name = "_requestMethod">Used to pass the request method Ex: POST</param>
    /// <param name = "_requestUri">Used to pass request uri as string.</param>
    /// <param name = "_trvReceipt">Used to pass TrvReceipt type.</param>
    /// <param name = "_useEnvironmentId">Used for expense service call with updated path having environmentId</param>
    /// <returns>Return HttpRequestMessage instance.</returns>
    private static HttpRequestMessage createRequest(str _requestMethod, str _requestUri, TrvReceipt _trvReceipt, boolean _useEnvironmentId = false)
    {
        HttpMethod httpMethod = new HttpMethod(_requestMethod);
 
        HttpRequestMessage httpRequestMessage = new System.Net.Http.HttpRequestMessage(httpMethod, _requestUri);
 
        Headers.HttpRequestHeaders httpRequestHeaders = httpRequestMessage.Headers;
                                                                                                                                                    
        str environmentId = EnvironmentFactory::GetApplicationEnvironment().LCS.LCSEnvironmentId;
 
        str correlationId = strLwr(guid2StrWithoutBraces(newGuid()));

        httpRequestHeaders.Add('x-ms-environment-id', environmentId);
        httpRequestHeaders.Add('x-ms-finops-expenseservice-s2s-token', TrvReceiptOcrHelper::generateToken(_useEnvironmentId));
        httpRequestHeaders.Add('ContentType', 'application/json');
        httpRequestHeaders.Add('x-ms-correlation-id', correlationId);
        httpRequestHeaders.Add('api-version', '1.0');

        instrumentationLogger.logInformation(strFmt('Correlation Id for expense-ocr-service is: %1', correlationId));


        TrvReceiptOcrHelper::addSecurityTokenToRequest(httpRequestMessage);

        str jsonContent = ReceiptUtility::GetJsonObject(_trvReceipt.FileName(), _trvReceipt.ByteArray());
    
        httpRequestMessage.Content = new StringContent(jsonContent, System.Text.Encoding::UTF8, "application/json");
 
        return httpRequestMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSecurityTokenToRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to add security token to the HttpRequestMessage.
    /// </summary>
    /// <param name = "httpRequestMessage">Used to pass instance of HttpRequestMessage.</param>
    public static void addSecurityTokenToRequest(HttpRequestMessage httpRequestMessage)
    {
        var logLineTry = infologLine();
        if (!TrvReceiptOcrHelper::tryAddSecurityTokenToRequest(httpRequestMessage))
        {
            instrumentationLogger.logError("Expense Service Client failed to acquire an authorization token.");

            // no error for now as x-ms-finops-expenseservice-s2s-token
            // may potentially be used for already running customers
            // but should throw error once GA as we _must_ use security service
            // token authentication via <c>SysHttpCommunicationSecurityServiceClient</c> instead.
            infolog.clear(logLineTry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHttpCommunicationClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates SysHttpCommunicationClient instance for external service calls.
    /// </summary>
    /// <returns>returns instance of type SysHttpCommunicationClient.</returns>
    private static SysHttpCommunicationClient createHttpCommunicationClient()
    {
        SysHttpCommunicationClientFactory factory = SysHttpCommunicationClientFactory::construct();

        SysHttpCommunicationClientBuilder clientBuilder = SysHttpCommunicationClientBuilder::construct(factory);

        SysHttpCommunicationClient commClient = clientBuilder.createClient();

        return commClient;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getToken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates token to communicate with expense service.
    /// </summary>
    /// <returns>A bearer token to authenticate that the call is from AOS.</returns>
    public static str getToken()
    {
        return TrvReceiptOcrHelper::generateToken();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateToken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates token to communicate with expense service.
    /// </summary>
    /// <param name = "_useEnvironmentId">Updates audience with new url with environmentId</param>
    /// <returns>A bearer token to authenticate that the call is from AOS.</returns>
    private static str generateToken(boolean _useEnvironmentId = false)
    {
        try
        {
            var applicationEnvironment = EnvironmentFactory::GetApplicationEnvironment(); 

            if (applicationEnvironment == null)
            {
                throw error("@Expense:EnvironmentException");
            }
            
            var environmentId = applicationEnvironment.LCS.LCSEnvironmentId;
            
            if (environmentId == null)
            {
                throw error("@Expense:EnvironmentIdNull");
            }

            var thumbprint = applicationEnvironment.get_Infrastructure().get_S2SCertThumbprint();

            if (thumbprint == null)
            {
                throw error("@Expense:S2SCertificateException");
            }

            URL audience = null;
            if (!_useEnvironmentId)
            {
                audience = TrvParameters::find().ReceiptOCRURL;
            }
            else 
            {
                var uri = new System.Uri(TrvParameters::find().ReceiptOCRURL);
                var host = uri.Host;
                instrumentationLogger.logInformation(strFmt('Base Url: %1', host));
                audience = strFmt('https://%1/api/environments/%2/receipt', host, environmentId);
                instrumentationLogger.logInformation(strFmt('Audience set to: %1', audience));
            }

            if (audience == null)
            {
                throw error("@Expense:CognitiveServiceUrlMissing");
            }

            str token = TrvS2STokenProvider::getToken(audience, thumbprint, environmentId);
           			
			return token;
        }
        catch
        {
            error("@Expense:TokenGenerationFailed");
            System.Exception sysException = CLRInterop::getLastException();
            error(sysException.get_Message());
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendRequestToService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the external expense management service.
    /// </summary>
    /// <param name = "requestMessage">Request message for the expense service.</param>
    /// <param name = "_requestTimeoutInmins">Request time-out value in minutes.</param>
    /// <returns>Response message received from the expense service.</returns>
    public static HttpResponseMessage sendRequestToService(HttpRequestMessage requestMessage, int _requestTimeoutInmins = 1)
    {
        #define.RetryCount(1)
        str operationName = 'sendRequestToService';
        HttpResponseMessage responseMessage;
        var timeout = new System.TimeSpan(0, _requestTimeoutInmins, 0);

        try
        {
            SysHttpCommunicationClient commclient = TrvReceiptOcrHelper::createHttpCommunicationClient();
            responseMessage = commclient.send(requestMessage);
        }
        catch
        {      
            int numberOfRetries = xSession::currentRetryCount();

            instrumentationLogger.logError(strFmt("@Expense:ServiceCallException", numberOfRetries));

            TrvReceiptOcrHelper::handleWebException(instrumentationLogger, ExpenseServiceName, operationName);
          
            if (numberOfRetries < #RetryCount)
            {
                retry;
            }
            else
            {
                info(strFmt("@Expense:FailureMessageAfterRetry", (numberOfRetries)));
            }

            TrvInstrumentationHelper::extractExceptionFromLastCLRException(ClrInterop::getLastException());
        }
         
        if (responseMessage)
        {
            instrumentationLogger.logInformation(strFmt('Received statuscode %1 from the web service', responseMessage.StatusCode));
        }
        instrumentationLogger.logInformation("@SYS4081523");

        //log the response received.
        if (responseMessage)
        {
           instrumentationLogger.logInformation(responseMessage.Content.ToString());
        }

        return responseMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryAddSecurityTokenToRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to add new Security Token part of the http request message header.
    /// </summary>
    /// <param name = "_httpRequestMessage">Used to pass HttpRequestMessage.</param>
    /// <returns>Returns true when security token is added to HttpRequestMessage header successfull else false.</returns>
    private static boolean tryAddSecurityTokenToRequest(HttpRequestMessage _httpRequestMessage)
    {
        const str operationName = 'tryAddSecurityTokenToRequest';
        const str serviceName = 'expenseservice';
        List scopes = new List(Types::String);
        scopes.addEnd(serviceName);
        
        boolean isSecurityServiceTokenAddedToRequest;

        try
        {
            isSecurityServiceTokenAddedToRequest = SysHttpCommunicationSecurityServiceClient::addSecurityServiceTokenToRequest(_httpRequestMessage, scopes);
            info(strFmt("@Expense:ExpenseServiceClientSecurityTokenStatus", isSecurityServiceTokenAddedToRequest));
        }
        catch (Exception::Error)
        {
            // because we are passing doNotThrowOnUnsuccessful response underneath
            // if we land here then it means that we parsed the error response from
            // security service then threw Global::error, so we have that OMS telemetry.
            instrumentationLogger.logError("@Expense:ExpenseServiceSecurityException");
        }
        catch (Exception::CLRError)
        {
            // meaning we received some .net exception before reaching security service,
            // from System.Net, or aad token retrieval, or certificate loading.
            TrvReceiptOcrHelper::handleWebException(instrumentationLogger, serviceName, operationName);
        }
        catch
        {
            // should not happen
            instrumentationLogger.logError("@Expense:ExpenseServiceGenericSecurityTokenError");
        }

        return isSecurityServiceTokenAddedToRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleWebException</Name>
				<Source><![CDATA[
    private static void handleWebException(SysInstrumentationLogger logger, str serviceName, str operationName)
    {
        System.Exception exception = ClrInterop::getLastException();

        if (exception)
        {
            instrumentationLogger.logError(strFmt("@Expense:ExpenseServiceClrException", exception.ToString()));

            var webException = TrvInstrumentationHelper::extractExceptionFromLastCLRException(exception);

            TrvInstrumentationHelper::LogWebException(webException, operationName, ExpenseServiceName, logger);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useMermoryStream</Name>
				<Source><![CDATA[
    private static boolean useMermoryStream()
    {
        return TrvReceiptMemoryStreamFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getByteArray</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static System.Byte[] getByteArray(DocuRef _docuRef)
    {
        System.Byte[] docuBytes;

        using (System.IO.Stream fileStream = DocumentManagement::getAttachmentStream(_docuRef))
        {
            if (TrvReceiptOcrHelper::useMermoryStream())
            {
            
                using (System.IO.MemoryStream memoryStream = new System.IO.MemoryStream())
                {
                    fileStream.CopyTo(memoryStream);
                    docuBytes = memoryStream.ToArray();
                }
            }
            else
            {
                if (!fileStream.CanSeek)
                {
                    TrvInstrumentationHelper::logExpenseOperationsInformation
                        (
                            strfmt("@ExpenseManagement:NonSeekableStreamError", _docuRef.Name, _docuRef.DocumentId),
                            staticMethodStr(TrvReceiptOcrHelper, populateReceiptDetails)
                        );
                }

                docuBytes   = new System.Byte[fileStream.Length]();
                int totalBytesCopied = 0;
                while (totalBytesCopied < fileStream.Length)
                {
                    totalBytesCopied += fileStream.Read(docuBytes, totalBytesCopied, int642int(fileStream.Length)-totalBytesCopied);
                }
            }
        }

        return docuBytes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>