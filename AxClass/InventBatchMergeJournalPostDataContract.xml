<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBatchMergeJournalPostDataContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventBatchMergeJournalDataContract</c> is the data contract for the <c>InventBatchMergeJournalCheckPost</c> class.
/// </summary>
[DataContractAttribute]
class InventBatchMergeJournalPostDataContract implements SysOperationValidatable
{
    InventBatchJournalId    inventBatchJournalId;
    boolean                 showDialogs;
    boolean                 warningsAsErrors;
    boolean                 transferToJournalOnly;
    UnknownNoYes            valid;

    InventBatchJournal      inventBatchJournal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBatchAttributeValueTolerances</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks that the batch attribute values are within tolerances.
    /// </summary>
    /// <returns>
    ///     <para>
    ///         true if the batch attribute values are within tolerances or they may be out of tolerance but the user has accepted them.
    ///     </para>
    ///     <para>
    ///         false if the batch attribute values are out of tolerances and the tolerance policy does not allow such intolerances or the user does not accept the
    ///         intolerances.
    ///     </para>
    /// </returns>
    /// <remarks>
    ///     If an intolerance is detected, a message box is given to the user inquiring his acceptance to the intolerances, if the tolerance policy allows it; otherwise,
    ///     the user is simply informed of the intolerances and the method returns false.
    /// </remarks>
    private boolean checkBatchAttributeValueTolerances()
    {
        InventBatchJournalResult                result              = InventBatchJournalResult::findFirst(inventBatchJournal.RecId);
        int                                     attributesPerPage   = InventBatchJournalAttribute::attributesPerPage();
        InventBatchJournalResultAttributeValue  resultAttributeValue;
        boolean                                 ok;
        boolean                                 stopError;
        int                                     i;
        str                                     message;

        // Record our starting point in the infolog queue.
        int startLine = infologLine();

        while select resultAttributeValue
            order by AttributePage
            where resultAttributeValue.InventBatchJournalResult == result.RecId
        {
            InventBatchJournalAttribute attribute = InventBatchJournalAttribute::find(inventBatchJournal.RecId, resultAttributeValue.AttributePage);
            for (i = 1; i <= attributesPerPage; i++)
            {
                setPrefix(attribute.AttributeId[i]);
                if (!resultAttributeValue.validateAttributeValue(resultAttributeValue.AttributeValue[i], i, attribute.AttributeId[i], false))
                {
                    stopError = stopError || PdsBatchAttrib::find(attribute.AttributeId[i]).PdsBatchAttribToleranceAction == PdsBatchAttribToleranceAction::NotAllowed;
                }
            }
        }

        // Warnings are displayed onto the infolog. If the tolerance policy on any batch attribute is set to Not Allow, then leave the messages on the infolog and stop
        // now ...
        if (stopError)
        {
            ok = false;
        }
        else
        {
            // ... otherwise, intercept the warnings, if any, and display them to the user in a message box.
            int endLine = infologLine();
            for (i = startLine + 1; i <= endLine; i++)
            {
                if (message)
                {
                    message += '\n\n';
                }
                message += infolog.text(i);
            }

            // Clear the infolog of any warnings that may have appeared during the validation. These warnings are going to be displayed to the user in a message box.
            infolog.clear(startLine);

            if (message)
            {
                message += '\n\n' + "@SYS73804";
            }

            ok = !message ? true : this.showOrLogWarning(message);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMissingBatchAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that all the filled attributes in the selected batches have been filled in the result.
    /// </summary>
    /// <returns>
    ///    true if there are no missing attributes or the user has approved the missing values; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    <para>If there are missing attributes and parameter <c>showDialogs</c> is <c>false</c>, then this still
    ///    returns <c>true</c> but reports the missing attributes as a warning.</para>
    /// </remarks>
    private boolean checkMissingBatchAttributes()
    {
        InventBatchJournalResult                result = InventBatchJournalResult::findFirst(inventBatchJournal.RecId);
        InventBatchJournalResultAttributeValue  inventBatchJournalResultAttributeValue;
        InventBatchJournalSourceAttributeValue  inventBatchJournalSourceAttributeValue;
        int                                     i;
        boolean                                 ret = true;
        str                                     missingAttributesText;
        Map                                     missingAttributesSortMap = new Map(Types::String, Types::Integer);

        while select inventBatchJournalResultAttributeValue
            order by AttributePage
            where inventBatchJournalResultAttributeValue.InventBatchJournalResult == result.RecId
        {
            InventBatchJournalAttribute inventBatchJournalAttribute = InventBatchJournalAttribute::find(inventBatchJournal.RecId, inventBatchJournalResultAttributeValue.AttributePage);
            int attributesOnPage = inventBatchJournalAttribute.attributes().elements();
            Set attributesChecked = new Set(Types::Integer);

            while select inventBatchJournalSourceAttributeValue
                where inventBatchJournalSourceAttributeValue.InventBatchJournal == inventBatchJournal.RecId
                    && inventBatchJournalSourceAttributeValue.AttributePage     == inventBatchJournalResultAttributeValue.AttributePage
            {
                for (i = 1; i <= attributesOnPage; i++)
                {
                    if (!attributesChecked.in(i)
                        && inventBatchJournalSourceAttributeValue.AttributeValue[i]
                        && !inventBatchJournalResultAttributeValue.AttributeValue[i])
                    {
                        attributesChecked.add(i);
                        missingAttributesSortMap.insert(inventBatchJournalAttribute.AttributeId[i], 0);
                    }
                }

                if (attributesChecked.elements() == attributesOnPage)
                {
                    break;
                }
            }
        }

        if (missingAttributesSortMap.elements())
        {
            MapEnumerator attributeMapEnumerator = missingAttributesSortMap.getEnumerator();
            while (attributeMapEnumerator.moveNext())
            {
                missingAttributesText += (missingAttributesText ? ', ' : '') + attributeMapEnumerator.currentKey();
            }

            ret = this.showOrLogWarning(strFmt((transferToJournalOnly ? "@SYS4001999" : "@SYS4001917"),
                result.inventDim().InventBatchId, missingAttributesText));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMissingBatchAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if there are any calculable batch attribute values are missing.
    /// </summary>
    /// <returns>
    ///    true if there are no missing attributes, or a column is entirely empty, or the user has accepted the warning and wishes to continue; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    <para>If there are missing attributes and parameter <c>showDialogs</c> is <c>false</c>, then this still
    ///    returns <c>true</c> but reports the missing attributes as a warning.</para>
    /// </remarks>
    private boolean checkMissingBatchAttributeValues()
    {
        Map                                     batchIdByAttributeId    = new Map(Types::String, Types::Class);
        Map                                     attributeIdByBatchId    = new Map(Types::String, Types::Container);
        int                                     attributePageSize       = InventBatchJournalAttribute::attributesPerPage();
        InventBatchId                           batchId;
        InventBatchJournalAttribute             journalAttribute;
        InventBatchJournalSourceAttributeValue  batchAttributeValue;
        InventBatchJournalSourceAttributeValue  sourceAttributeValue;
        PdsBatchAttribId                        attributeId;
        Set                                     batchIdSet;
        container                               attributeIds;
        int                                     i;
        int                                     numBatches;
        str                                     message;

        // Capture by attribute which batches have a missing attribute value.
        while select batchAttributeValue
            order by InventBatchId
            group by InventBatchId
            where batchAttributeValue.InventBatchJournal == inventBatchJournal.RecId
        {
            ++numBatches;

            while select sourceAttributeValue
                order by AttributePage
                where sourceAttributeValue.InventBatchJournal == inventBatchJournal.RecId
                    && sourceAttributeValue.InventBatchId == batchAttributeValue.InventBatchId
                join journalAttribute
                    where journalAttribute.InventBatchJournal == sourceAttributeValue.InventBatchJournal
                        && journalAttribute.AttributePage == sourceAttributeValue.AttributePage
            {
                for (i = 1; i <= attributePageSize; ++i)
                {
                    if (journalAttribute.AttributeId[i]
                        && InventBatchJournalAttributeCalculator::newCalculator(journalAttribute.AttributeId[i]).batchAttributeSupported())
                    {
                        if (!sourceAttributeValue.AttributeValue[i])
                        {
                            attributeId = journalAttribute.AttributeId[i];
                            if (batchIdByAttributeId.exists(attributeId))
                            {
                                batchIdSet = batchIdByAttributeId.lookup(attributeId);
                            }
                            else
                            {
                                batchIdSet = new Set(Types::String);
                                batchIdByAttributeId.insert(attributeId, batchIdSet);
                            }
                            batchIdSet.add(sourceAttributeValue.InventBatchId);
                        }
                    }
                }
            }
        }

        // Prepare a list of missing attributes by batch Id.
        MapEnumerator batchIdByAttributeIdEnumerator = batchIdByAttributeId.getEnumerator();
        while (batchIdByAttributeIdEnumerator.moveNext())
        {
            attributeId = batchIdByAttributeIdEnumerator.currentKey();
            batchIdSet  = batchIdByAttributeIdEnumerator.currentValue();

            // Only include batches where an attribute column has a mixture of empty and filled values. If the entire column is empty, then skip it.
            if (numBatches != batchIdSet.elements())
            {
                SetEnumerator batchIdEnumerator = batchIdSet.getEnumerator();
                while (batchIdEnumerator.moveNext())
                {
                    batchId = batchIdEnumerator.current();
                    if (!attributeIdByBatchId.exists(batchId))
                    {
                        attributeIds = conNull();
                    }
                    else
                    {
                        attributeIds = attributeIdByBatchId.lookup(batchId);
                    }
                    attributeIds += attributeId;
                    attributeIdByBatchId.insert(batchId, attributeIds);
                }
            }
        }

        // Inform the user by batch ID those attributes that are missing values.
        MapEnumerator attributeIdByBatchIdEnumerator = attributeIdByBatchId.getEnumerator();
        while (attributeIdByBatchIdEnumerator.moveNext())
        {
            batchId         = attributeIdByBatchIdEnumerator.currentKey();
            attributeIds    = attributeIdByBatchIdEnumerator.currentValue();
            if (message)
            {
                message += '\n\n';
            }
            message += strFmt("@SYS4009373", batchId, con2Str(attributeIds));
        }

        if (message)
        {
            message += "\n\n" + "@SYS73804";
        }

        return !message ? true : this.showOrLogWarning(message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMissingFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that all the filled characteristics in the selected batches have been filled in the result.
    /// </summary>
    /// <returns>
    ///    true if there are no missing fields or the user has approved the missing fields; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    <para>If there are missing fields and parameter <c>showDialogs</c> is <c>false</c>, then this still
    ///    returns <c>true</c> but reports the missing fields as a warning.</para>
    /// </remarks>
    private boolean checkMissingFields()
    {
        InventBatchJournalResult    result          = InventBatchJournalResult::findFirst(inventBatchJournal.RecId);
        InventBatchJournalResult    tmpResult;
        InventBatchJournalSource    source;
        InventDim                   inventDim;
        List                        fieldsToCheck   = InventBatchJournalResult::resultMergeFieldList();
        Set                         fieldsChecked   = new Set(Types::Integer);
        str                         missingFieldsText;

        boolean                     ret = true;

        // Check that all the filled characteristics in the selected batches have been filled in the result
        while select InventBatchId
            from inventDim
            group by InventBatchId
            exists join source
                where inventDim.InventDimId      == source.InventDimId
                    && source.InventBatchJournal == inventBatchJournal.RecId
        {
            tmpResult.clear();
            tmpResult.initFromInventBatch(InventBatch::find(inventDim.InventBatchId, inventBatchJournal.ItemId));

            ListEnumerator fieldEnumerator = fieldsToCheck.getEnumerator();
            while (fieldEnumerator.moveNext())
            {
                FieldId fieldId = fieldEnumerator.current();

                if (!fieldsChecked.in(fieldId) && tmpResult.(fieldId) && !result.(fieldId))
                {
                    fieldsChecked.add(fieldId);
                    missingFieldsText += (missingFieldsText ? ', ' : '') + new DictField(tableNum(InventBatchJournalResult), fieldId).label();
                }
            }

            if (fieldsChecked.elements() == fieldsToCheck.elements())
            {
                break;
            }
        }

        if (missingFieldsText)
        {
            ret = this.showOrLogWarning(strFmt((transferToJournalOnly ? "@SYS4002000" : "@SYS4001883"),
                result.inventDim().InventBatchId, missingFieldsText));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkResultBatchNumberGroupPerQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the inventory for the new batch does not exceed the journal item's batch number group per quantity.
    /// </summary>
    /// <returns>
    ///    true if the total inventory for the merged batch does not exceed the journal item's batch number group per quantity,
    ///    if the user does not want to proceed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This returns <c>true</c> and shows a warning in the infolog if the per quantity is exceeded.
    /// </remarks>
    private boolean checkResultBatchNumberGroupPerQty()
    {
        boolean                     ret = true;

        InventNumGroup batchNumberGroup = InventNumGroup::find(inventBatchJournal.inventTable().BatchNumGroupId);

        if (batchNumberGroup.PerQty)
        {
            InventBatchJournalResult result = InventBatchJournalResult::findFirst(inventBatchJournal.RecId);

            if (result.InventQty > batchNumberGroup.PerQty)
            {
                ret = this.showOrLogWarning("@SYS4001884");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the inventory batch journal for this data contract.
    /// </summary>
    /// <returns>
    ///    The record for the <c>InventBatchJournal</c> table referenced by this data contract.
    /// </returns>
    public InventBatchJournal inventBatchJournal()
    {
        if (!inventBatchJournal)
        {
            inventBatchJournal = InventBatchJournal::findByJournalId(inventBatchJournalId);
            if (!inventBatchJournal.RecId)
            {
                throw error(strFmt("@SYS4001885", inventBatchJournalId));
            }
        }

        return inventBatchJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventBatchJournalId</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public InventBatchJournalId parmInventBatchJournalId(InventBatchJournalId _inventBatchJournalId = inventBatchJournalId)
    {
        if (!prmisDefault(_inventBatchJournalId))
        {
            inventBatchJournalId = _inventBatchJournalId;
            inventBatchJournal   = null;
            valid                = UnknownNoYes::Unknown;
        }

        return inventBatchJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDialogs</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmShowDialogs(boolean _showDialogs = showDialogs)
    {
        showDialogs = _showDialogs;

        return showDialogs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferToJournalOnly</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmTransferToJournalOnly(boolean _transferToJournalOnly = transferToJournalOnly)
    {
        transferToJournalOnly = _transferToJournalOnly;

        return transferToJournalOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWarningsAsErrors</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmWarningsAsErrors(boolean _warningsAsErrors = warningsAsErrors)
    {
        if (!prmisDefault(_warningsAsErrors))
        {
            warningsAsErrors = _warningsAsErrors;
            valid            = UnknownNoYes::Unknown;
        }

        return warningsAsErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOrLogWarning</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows a warning dialog or logs the message as an info log warning depending on the settings for the <c>showDialog</c> class parameter.
    /// </summary>
    /// <param name="_messageText">
    ///    The message text to show or log.
    /// </param>
    /// <returns>
    ///    true if the warning was accepted or logged; otherwise, false.
    /// </returns>
    private boolean showOrLogWarning(str _messageText)
    {
        boolean ret = true;

        if (showDialogs)
        {
            ret = Box::yesNo(_messageText, DialogButton::No, "@SYS866") == DialogButton::Yes;
        }
        else
        {
            warning(_messageText);

            ret = !warningsAsErrors;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the inventory batch journal to ensure it is ready to be posted.
    /// </summary>
    /// <returns>
    ///    true if the inventory batch journal is valid for posting; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;

        if (valid != UnknownNoYes::Unknown)
        {
            return valid == UnknownNoYes::Yes;
        }

        inventBatchJournal = this.inventBatchJournal();

        if (inventBatchJournal.Posted)
        {
            ret = checkFailed(strFmt("@SYS4001886", inventBatchJournal.JournalId));
        }

        ret = ret && this.verifyResultDimensionFields();
        ret = ret && this.verifySourceQuantities();
        ret = ret && this.checkResultBatchNumberGroupPerQty();
        ret = ret && this.checkMissingFields();

        if (ret && inventBatchJournal.journalController().hasBatchAttributes())
        {
            ret = this.checkMissingBatchAttributes();
            ret = ret && this.checkMissingBatchAttributeValues();
            ret = ret && this.checkBatchAttributeValueTolerances();
        }

        valid = ret ? UnknownNoYes::Yes : UnknownNoYes::No;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyResultDimensionFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the result dimension fields are all filled in as expected.
    /// </summary>
    /// <returns>
    ///    true if the result dimension fields are valid; otherwise, false.
    /// </returns>
    private boolean verifyResultDimensionFields()
    {
        InventBatchJournalResult    localInventBatchJournalResult = InventBatchJournalResult::findFirst(inventBatchJournal.RecId);
        InventDimGroupSetup         inventDimGroupSetup           = InventDimGroupSetup::newInventTable(inventBatchJournal.inventTable());
        InventNumGroup              inventNumGroup                = InventNumGroup::find(inventBatchJournal.inventTable().BatchNumGroupId);
        List                        dimensionsToVerify            = new List(Types::Integer);
        boolean                     ret                           = true;

        if (!inventNumGroup.RecId || inventNumGroup.ManualAllocation)
        {
            dimensionsToVerify.addEnd(fieldNum(InventDim, InventBatchId));
        }
        dimensionsToVerify.addEnd(fieldNum(InventDim, wmsLocationId));

        InventDim inventDim = localInventBatchJournalResult.inventDim();
        ListEnumerator dimEnumerator = dimensionsToVerify.getEnumerator();
        while (dimEnumerator.moveNext())
        {
            FieldId fieldId = dimEnumerator.current();
            if (inventDimGroupSetup.isDimensionActive(fieldId) && !inventDim.(fieldId))
            {
                ret = checkFailed(strFmt("@SYS103633", fieldId2pname(tableNum(InventDim), fieldId)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifySourceQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the source quantities are still the same as physical available inventory.
    /// </summary>
    /// <returns>
    ///    true if the source quantities are still the same; otherwise, false.
    /// </returns>
    private boolean verifySourceQuantities()
    {
        InventBatchJournalSource    inventBatchJournalSource;
        InventSum                   inventSum;
        InventDim                   inventDim;
        InventBatchId               lastFailedInventBatchId;
        boolean                     hasFailed = false;
        boolean                     result    = true;

        if (WHSInventEnabled::exist(inventBatchJournal.ItemId))
        {
            InventTable inventTable = InventTable::find(inventBatchJournal.ItemId);

            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                while select PdsCWAvailPhysical, #InventDimGroupAllFields from inventSum
                    order by InventBatchId
                    where inventSum.ItemId       == inventBatchJournal.ItemId
                    join InventQty,cwInventQty from inventBatchJournalSource
                        where inventBatchJournalSource.InventDimId         == inventSum.InventDimId
                            && inventBatchJournalSource.InventBatchJournal == inventBatchJournal.RecId
                {
                    inventDim.clear();
                    inventDim.initFromInventSum(inventSum);

                    if (   lastFailedInventBatchId != inventDim.InventBatchId
                        || !hasFailed)
                    {
                        boolean checkFailRecord = inventSum.PdsCWAvailPhysical != inventBatchJournalSource.cwInventQty;

                        if (!checkFailRecord)
                        {
                            InventQtyAvailPhysical availPhysical = InventAvailabilityProvider::findByItemDim(inventTable, inventDim).parmInventAvailability().availPhysical();
                            checkFailRecord = availPhysical != inventBatchJournalSource.InventQty;
                        }

                        if (checkFailRecord)
                        {
                            result = checkFailed(strFmt("@SYS4001892", inventDim.InventBatchId));
                            lastFailedInventBatchId = inventDim.InventBatchId;
                            hasFailed               = true;
                        }
                    }
                }
            }
            else
            {
                while select inventDim
                    order by InventBatchId
                    join InventQty,cwInventQty from inventBatchJournalSource
                        where inventBatchJournalSource.InventDimId         == inventDim.InventDimId
                            && inventBatchJournalSource.InventBatchJournal == inventBatchJournal.RecId
                    join PdsCWAvailPhysical from inventSum
                        where inventSum.ItemId       == inventBatchJournal.ItemId
                            && inventSum.InventDimId == inventBatchJournalSource.InventDimId
                {
                    if (   lastFailedInventBatchId != inventDim.InventBatchId
                        || !hasFailed)
                    {
                        boolean checkFailRecord = inventSum.PdsCWAvailPhysical != inventBatchJournalSource.cwInventQty;

                        if (!checkFailRecord)
                        {
                            InventQtyAvailPhysical availPhysical = InventAvailabilityProvider::findByItemDim(inventTable, inventDim).parmInventAvailability().availPhysical();
                            checkFailRecord = availPhysical != inventBatchJournalSource.InventQty;
                        }

                        if (checkFailRecord)
                        {
                            result = checkFailed(strFmt("@SYS4001892", inventDim.InventBatchId));
                            lastFailedInventBatchId = inventDim.InventBatchId;
                            hasFailed               = true;
                        }
                    }
                }
            }
        }
        else
        {
            while select InventBatchId from inventDim
                group by InventBatchId
                exists join inventBatchJournalSource
                    where inventBatchJournalSource.InventDimId         == inventDim.InventDimId
                        && inventBatchJournalSource.InventBatchJournal == inventBatchJournal.RecId
                exists join inventSum
                    where inventSum.ItemId                  == inventBatchJournal.ItemId
                        && inventSum.InventDimId            == inventBatchJournalSource.InventDimId
                        && (inventSum.AvailPhysical         != inventBatchJournalSource.InventQty
                            || inventSum.PdsCWAvailPhysical != inventBatchJournalSource.cwInventQty)
            {
                result = checkFailed(strFmt("@SYS4001892", inventDim.InventBatchId));
            }
        }

        if (!result)
        {
            warning("@SYS4001893");
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>