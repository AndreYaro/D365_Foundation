<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesAgreementForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesAgreementForm extends AgreementForm
{
    AgreementFormArgs salesAgreementFormArgs;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSalesAgreementFormArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or set the arguments object containing all parameters passed to the <see cref="SalesAgreement Form"/>.
    /// </summary>
    /// <param name = "_salesAgreementFormArgs">The <c>AgreementFormArgs</c> object.</param>
    /// <returns>
    /// The <c>AgreementFormArgs</c> object.
    /// </returns>
    public AgreementFormArgs parmSalesAgreementFormArgs(AgreementFormArgs _salesAgreementFormArgs = salesAgreementFormArgs)
    {
        salesAgreementFormArgs = _salesAgreementFormArgs;
        return salesAgreementFormArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <see cref="SalesAgreementCreate Form"/>.
    /// </summary>
    /// <returns>
    /// The result of the form creation.
    /// </returns>
    public AgreementCreateResult create()
    {
        xArgs args = new xArgs();

        args.name(this.createFormName());
        args.caller(this);
        args.parmObject(salesAgreementFormArgs);
        FormRun salesAgreementCreate = classFactory.formRunClass(args);
        AgreementCreateIForm salesAgreementCreateIForm = salesAgreementCreate as AgreementCreateIForm;
        salesAgreementCreate.init();
        salesAgreementCreate.run();
        salesAgreementCreate.wait();

        return salesAgreementCreateIForm.getResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFormName</Name>
				<Source><![CDATA[
    public str createFormName()
    {
        return formStr(SalesAgreementCreate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableHeaderButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables the agreement header level buttons.
    /// </summary>
    public void disableHeaderButtons()
    {
        FormDesign design = formRun.design();

        design.controlName(formcontrolstr(SalesAgreement, buttonReleaseOrderCreate)).enabled(false);
        design.controlName(formcontrolstr(SalesAgreement, buttonConfirmation)).enabled(false);
        design.controlName(formcontrolstr(SalesAgreement, buttonConfirmationHistory)).enabled(false);
        design.controlName(formcontrolstr(SalesAgreement, buttonReleaseOrderMatch)).enabled(false);
        design.controlName(formcontrolstr(SalesAgreement, buttonInvoiceHistory)).enabled(false);
        design.controlName(formcontrolstr(SalesAgreement, purchAgreementGenerationTask)).enabled(false);
        design.controlName(formcontrolstr(SalesAgreement, ViewIntercompanyAgreement)).enabled(false);
        // <GEERU>
        if (countryRegion_RU)
        {
            design.controlName(formcontrolstr(SalesAgreement, PurchAgreementGenerationTask_RU)).enabled(false);
            design.controlName(formcontrolstr(SalesAgreement, ViewIntracompanyAgreement_RU)).enabled(false);
            design.controlName(formcontrolstr(SalesAgreement, AgreementSettleSalesTable_RU)).enabled(false);
            design.controlName(formcontrolstr(SalesAgreement, AgreementSettleCustFreeInvoice_RU)).enabled(false);
            design.controlName(formcontrolstr(SalesAgreement, AgreementNotSettleSalesTable_RU)).enabled(false);
            design.controlName(formcontrolstr(SalesAgreement, AgreementNotSettleCustFreeInvoice_RU)).enabled(false);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableLineButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables the agreement line level buttons.
    /// </summary>
    public void disableLineButtons()
    {
        FormDesign design = formRun.design();

        design.controlName(formcontrolstr(SalesAgreement, newLineGridCmdButton)).enabled(false);

        design.controlName(formcontrolstr(SalesAgreement, deleteLineGridCmdButton)).enabled(false);

        design.controlName(formcontrolstr(SalesAgreement, attachmentsLineGridCmdButton)).enabled(false);

        design.controlName(formcontrolstr(SalesAgreement, buttonReleaseOrderMatchLineGrid)).enabled(false);

        design.controlName(formcontrolstr(SalesAgreement, buttonInvoiceHistoryLineGrid)).enabled(false);

        design.controlName(formcontrolstr(SalesAgreement, buttonPriceDiscountLineGrid)).enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtons</Name>
				<Source><![CDATA[
    public void enableButtons( AgreementHeader _agreementHeader, AgreementLine _agreementLine)
    {
        this.enableHeaderButtons(_agreementHeader);
        this.enableLineButtons(_agreementLine, _agreementHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the agreement header level buttons.
    /// </summary>
    /// <param name="_agreementHeader">
    /// A table buffer contains the current agreement header table values.
    /// </param>
    public void enableHeaderButtons(AgreementHeader _agreementHeader)
    {
        container relatedObjectsExistanceFlags = _agreementHeader.relatedObjectExistanceFlags();

        boolean areReleasesExistForCurrentAgreement    = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posReleasesExist());
        boolean confirmationExistsForCurrentAgreement  = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posConfirmationsExist());
        boolean areInvoicesExistForCurrentAgreement    = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posInvoicesExist());
        boolean canCreateIntercompanyAgreement         = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posCanCreateIntercompanyAgreement());
        boolean canViewRelatedAgreement                = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posCanViewRelatedAgreement());
        boolean canDeleteAgreement                     = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posCanDeleteAgreement());
        boolean canRelease                             = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posCanReleaseAgreement());
        boolean canConfirm                             = _agreementHeader.RecId;
        // <GEERU>
        boolean canCreateIntracompanyAgreement_RU      = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posCanCreateIntracompanyAgreement_RU());
        boolean canViewRelatedAgreement_RU             = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posCanViewRelatedAgreement_RU());
        boolean canViewSettled_RU                      = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posCanViewSettled_RU());
        boolean canViewNotSettled_RU                   = conpeek(relatedObjectsExistanceFlags, AgreementHeader::posCanViewNotSettled_RU());
        // </GEERU>

        FormDesign design = formRun.design();

        design.controlName(formcontrolstr(SalesAgreement, buttonReleaseOrderCreate)).enabled(canRelease);
        design.controlName(formcontrolstr(SalesAgreement, buttonConfirmation)).enabled(canConfirm);
        design.controlName(formcontrolstr(SalesAgreement, buttonConfirmationHistory)).enabled(confirmationExistsForCurrentAgreement);
        design.controlName(formcontrolstr(SalesAgreement, buttonReleaseOrderMatch)).enabled(areReleasesExistForCurrentAgreement);
        design.controlName(formcontrolstr(SalesAgreement, buttonInvoiceHistory)).enabled(areInvoicesExistForCurrentAgreement);
        FormDataSource agreementHeaderDS = FormDataUtil::getFormDataSource(_agreementHeader);
        if (agreementHeaderDS)
        {
            agreementHeaderDS.allowDelete(canDeleteAgreement);
        }
        design.controlName(formcontrolstr(SalesAgreement, purchAgreementGenerationTask)).enabled(canCreateIntercompanyAgreement);
        design.controlName(formcontrolstr(SalesAgreement, ViewIntercompanyAgreement)).enabled(canViewRelatedAgreement);
        // <GEERU>
        if (countryRegion_RU)
        {
            design.controlName(formcontrolstr(SalesAgreement, purchAgreementGenerationTask_RU)).enabled(canCreateIntracompanyAgreement_RU);
            design.controlName(formcontrolstr(SalesAgreement, ViewIntracompanyAgreement_RU)).enabled(canViewRelatedAgreement_RU);

            design.controlName(formcontrolstr(SalesAgreement, AgreementSettleSalesTable_RU)).enabled(canViewSettled_RU);
            design.controlName(formcontrolstr(SalesAgreement, AgreementSettleCustFreeInvoice_RU)).enabled(canViewSettled_RU);
            design.controlName(formcontrolstr(SalesAgreement, AgreementNotSettleSalesTable_RU)).enabled(canViewNotSettled_RU);
            design.controlName(formcontrolstr(SalesAgreement, AgreementNotSettleCustFreeInvoice_RU)).enabled(canViewNotSettled_RU);

            if (agreementHeaderDS && CFMParameters::isPaymentRequestsEnabled() && _agreementHeader is SalesAgreementHeader)
            {
                SalesAgreementHeader salesAgreementHeader = _agreementHeader;

                agreementHeaderDS.allowDelete(canDeleteAgreement && !CFMPaymentRequestTable::existByAgreementId(salesAgreementHeader.SalesNumberSequence));
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the enable edit property on the specified header table fields of a sales agreement.
    /// </summary>
    /// <param name="_salesAgreementHeader_ds">
    ///    A handle to the data source of the header of the sales agreement form.
    /// </param>
    /// <param name="_dataProvider">
    /// The data provider that provides data necessary for determining agreement header fields editability; optional.
    /// </param>
    public void enableHeaderFields(
        FormDataSource _salesAgreementHeader_ds,
        AgreementHeaderFieldEditabilityDataProvider _dataProvider = SalesAgreementHeaderFieldEditabilityDataProvider::newFromAgreementHeader(_salesAgreementHeader_ds.cursor()))
    {
        SalesAgreementHeader    salesAgreementHeader = _salesAgreementHeader_ds.cursor() as SalesAgreementHeader;
        boolean                 allowEdit = true;

        super(_salesAgreementHeader_ds, _dataProvider);

        if (salesAgreementHeader.isReleaseOrderMatched())
        {
            allowEdit = false;
        }

        _salesAgreementHeader_ds.object(fieldnum(SalesAgreementHeader, CustAccount)).allowEdit(allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderFields_RU</Name>
				<Source><![CDATA[
    public void enableHeaderFields_RU(FormDataSource _salesAgreementHeader_ds,
        FormDataSource _salesAgreementHeaderExt_RU_ds,
        FormDataSource _salesAgreementHeaderDefault_ds)
    {
        SalesAgreementHeader salesAgreementHeader = _salesAgreementHeader_ds.cursor() as SalesAgreementHeader;

        super(_salesAgreementHeader_ds, _salesAgreementHeaderExt_RU_ds, _salesAgreementHeaderDefault_ds);

        if (salesAgreementHeader.RecId)
        {
            _salesAgreementHeader_ds.object(fieldNum(SalesAgreementHeader, CustAccount)).allowEdit(false);
            _salesAgreementHeader_ds.object(fieldNum(SalesAgreementHeader, CustAccount)).skip(true);
        }

        _salesAgreementHeaderDefault_ds.object(fieldNum(SalesAgreementHeaderDefault, CustomerInvoiceAccount)).allowEdit(
            _salesAgreementHeader_ds.object(fieldNum(SalesAgreementHeader, CustAccount)).allowEdit());
        _salesAgreementHeaderDefault_ds.object(fieldNum(SalesAgreementHeaderDefault, CustomerInvoiceAccount)).skip(
            _salesAgreementHeader_ds.object(fieldNum(SalesAgreementHeader, CustAccount)).skip());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the agreement line level buttons.
    /// </summary>
    /// <param name="_agreementLine">
    /// A table buffer that contains the current agreement line table values.
    /// </param>
    /// <param name="_agreementHeader">
    /// A table buffer that contains the current agreement header table values.
    /// </param>
    public void enableLineButtons(AgreementLine _agreementLine, AgreementHeader _agreementHeader)
    {
        container relatedObjectsExistanceFlags = _agreementLine.relatedObjectExistanceFlags();

        boolean areReleasesExistForCurrentLine    = conpeek(relatedObjectsExistanceFlags, AgreementLine::posReleasesExist());
        boolean areInvoicesExistForCurrentLine    = conpeek(relatedObjectsExistanceFlags, AgreementLine::posInvoicesExist());
        boolean canDeleteAgreementLine            = conpeek(relatedObjectsExistanceFlags, AgreementLine::posCanDeleteAgreementLine());
        boolean canCreateNewLine                  = _agreementHeader.RecId;
        boolean attachmentsEnabledForCurrentLine  = _agreementLine.RecId;
        boolean pricesEnabledForCurrentLine       = _agreementLine.isItemBased();

        FormDesign design = formRun.design();

        design.controlName(formcontrolstr(SalesAgreement, newLineGridCmdButton)).enabled(canCreateNewLine);
        design.controlName(formcontrolstr(SalesAgreement, deleteLineGridCmdButton)).enabled(canDeleteAgreementLine);
        design.controlName(formcontrolstr(SalesAgreement, attachmentsLineGridCmdButton)).enabled(attachmentsEnabledForCurrentLine);
        design.controlName(formcontrolstr(SalesAgreement, buttonReleaseOrderMatchLineGrid)).enabled(areReleasesExistForCurrentLine);
        design.controlName(formcontrolstr(SalesAgreement, buttonInvoiceHistoryLineGrid)).enabled(areInvoicesExistForCurrentLine);
        design.controlName(formcontrolstr(SalesAgreement, buttonPriceDiscountLineGrid)).enabled(pricesEnabledForCurrentLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableProjectHeaderFieldAccess</Name>
				<Source><![CDATA[
    public void enableProjectHeaderFieldAccess(FormDataSource _salesAgreementHeader_ds, FormDataSource _salesAgreementHeaderDefault_ds, FormDataSource _agreementHeaderDefault_ds)
    {
        SalesAgreementHeader    salesAgreementHeader = _salesAgreementHeader_ds.cursor() as SalesAgreementHeader;
        AgreementHeaderDefault  agreementHeaderDefault = _agreementHeaderDefault_ds.cursor() as AgreementHeaderDefault;
        boolean                 allowEditProject = true;
        boolean                 allowEditCustAccount = true;
        boolean                 allowEditCustomerInvoiceAccount = true;
        boolean                 allowEditCurrency = true;
        boolean                 allowEditLanguage = true;

        if (isProject)
        {
            if (agreementHeaderDefault.RecId)
            {
                allowEditProject = false;
            }

            _agreementHeaderDefault_ds.object(fieldnum(AgreementHeaderDefault, Project)).allowEdit(allowEditProject);
            _agreementHeaderDefault_ds.object(fieldnum(AgreementHeaderDefault, Project)).skip(!allowEditProject);

            if (salesAgreementHeader.isReleaseOrderMatched() || agreementHeaderDefault.Project)
            {
                allowEditCustAccount = false;
            }

            _salesAgreementHeader_ds.object(fieldNum(SalesAgreementHeader, CustAccount)).allowEdit(allowEditCustAccount);
            _salesAgreementHeader_ds.object(fieldNum(SalesAgreementHeader, CustAccount)).skip(!allowEditCustAccount);

            if (agreementHeaderDefault.Project)
            {
                allowEditCustomerInvoiceAccount = false;
            }

            _salesAgreementHeaderDefault_ds.object(fieldNum(SalesAgreementHeaderDefault, CustomerInvoiceAccount)).allowEdit(allowEditCustomerInvoiceAccount);
            _salesAgreementHeaderDefault_ds.object(fieldNum(SalesAgreementHeaderDefault, CustomerInvoiceAccount)).skip(!allowEditCustomerInvoiceAccount);

            if (agreementHeaderDefault.Project)
            {
                if (ProjInvoiceTable::isSalesCurrencyLocked(ProjTable::find(agreementHeaderDefault.Project).ProjInvoiceProjId))
                {
                    allowEditCurrency = false;
                }
            }

            _salesAgreementHeader_ds.object(fieldNum(SalesAgreementHeader, Currency)).allowEdit(allowEditCurrency);
            _salesAgreementHeader_ds.object(fieldNum(SalesAgreementHeader, Currency)).skip(!allowEditCurrency);

            if (agreementHeaderDefault.Project)
            {
                allowEditLanguage = false;
            }

            _salesAgreementHeader_ds.object(fieldNum(SalesAgreementHeader, Language)).allowEdit(allowEditLanguage);
            _salesAgreementHeader_ds.object(fieldNum(SalesAgreementHeader, Language)).skip(!allowEditLanguage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRangesFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form data sources and ranges by using the calling object.
    /// </summary>
    /// <param name="_agreementHeader_ds">
    /// A handle to the data source of the <c>AgreementHeader</c> form.
    /// </param>
    /// <param name="_agreementHeaderDefault_ds">
    /// A handle to the data source of the <c>AgreementHeaderDefault</c> form.
    /// </param>
    public void initRangesFromCaller(FormDataSource _agreementHeader_ds, FormDataSource _agreementHeaderDefault_ds)
    {
        if (formRun.args().dataset() == tableNum(PurchRFQLine) &&
            formRun.args().menuItemName() == menuitemDisplayStr(SalesAgreement))
        {
            PurchRFQLine purchRFQLine = formRun.args().record() as PurchRFQLine;
            QueryBuildDataSource queryBuildDataSource = SysQuery::findOrCreateDataSource(_agreementHeader_ds.query(), tableNum(SalesAgreementHeader));

            queryBuildDataSource.clearDynalinks();
            QueryBuildRange queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(SalesAgreementHeader, SalesNumberSequence));
            queryBuildRange.value(queryValue(purchRFQLine.AgreementId));
            queryBuildRange.status(RangeStatus::Locked);
        }
        else
        {
            super(_agreementHeader_ds, _agreementHeaderDefault_ds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandlerAgreementId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number sequence form handler.
    /// </summary>
    /// <param name="_agreementHeader_ds">
    ///    The data source for which the number sequence handler is needed.
    /// </param>
    /// <returns>
    ///    The number sequence form handler.
    /// </returns>
    /// <remarks>
    ///    This handler is used to manage the number sequence values for the <c>SalesNumberSequence</c> field
    ///    of the <c>SalesAgreementHeader</c> table.For more information, see <see
    ///    cref="formMethodDataSourceCreate Method" />, <see cref="formMethodDataSourceDelete Method" />, <see
    ///    cref="formMethodDataSourceLinkActive Method" />, <see cref="formMethodDataSourceValidateWrite
    ///    Method" />, <see cref="formMethodDataSourceWrite Method" />.
    /// </remarks>
    protected NumberSeqFormHandler numberSeqFormHandlerAgreementId(FormDataSource _agreementHeader_ds)
    {
        // <GEERU>
        RefRecId             numberSequenceId;

        if (countryRegion_RU)
        {
            SalesAgreementHeader salesAgreementHeader = _agreementHeader_ds.cursor() as SalesAgreementHeader;

            if (salesAgreementHeader.AgreementClassification)
            {
                numberSequenceId = AgreementClassificationExt_RU::findByAgreementClassification(
                    salesAgreementHeader.AgreementClassification).NumberSequenceTable;
            }

            if (!numberSequenceId)
            {
                numberSequenceId = SalesParameters::numRefSalesAgreementId().NumberSequenceId;
            }

            if (numberSeqFormHandlerAgreementId &&
                numberSeqFormHandlerAgreementId.parmNumberSequenceId() != numberSequenceId)
            {
                numberSeqFormHandlerAgreementId = null;
            }
        }
        // </GEERU>
        if (!numberSeqFormHandlerAgreementId)
        {
            numberSeqFormHandlerAgreementId = NumberSeqFormHandler::newForm(
                // <GEERU>
                numberSequenceId ? numberSequenceId : SalesParameters::numRefSalesAgreementId().NumberSequenceId,
                // </GEERU>
                formRun,
                _agreementHeader_ds,
                fieldnum(SalesAgreementHeader, SalesNumberSequence));
        }
        return numberSeqFormHandlerAgreementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relationType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the relation type of the agreement header.
    /// </summary>
    /// <returns>
    ///    The relation type of the agreement header.
    /// </returns>
    public relationType relationType()
    {
        return tablenum(SalesAgreementHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>SalesAgreementForm</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the sales agreement form.
    /// </returns>
    static public SalesAgreementForm construct()
    {
        SalesAgreementForm      salesAgreementForm = new SalesAgreementForm();

        return salesAgreementForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>SalesAgreementForm</c> class.
    /// </summary>
    /// <param name="_formRun">
    ///    A handle to the current sales agreement form.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>SalesAgreementForm</c> class.
    /// </returns>
    static public SalesAgreementForm newFormRun(FormRun  _formRun)
    {
        SalesAgreementForm      salesAgreementForm = SalesAgreementForm::construct();

        salesAgreementForm.parmFormRun(_formRun);

        return salesAgreementForm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>