<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;

/// <summary>
/// The class provides information related to a business document as well as details of its processing
/// by the Business Document Submission Service.
/// </summary>
final public class BusinessDocumentInfo
{
    private Map mapIdentificationKeys;
    private Map mapDocDetails;

    private str state;
    private str id;
    private str agentId;
    private utcdatetime createdDateTime;

    private BusinessDocumentInfo parent;

    private BusinessDocumentExecutionTmp executions;
    private BusinessDocumentExecutionActionTmp executionActions;
    private BusinessDocumentActionLogTmp executionActionLogs;
    private BusinessDocumentActionOutputFileTmp executionActionOutputFiles;
    private BusinessDocumentOutgoingVariablesTmp executionOutgoingVariables;
    private BusinessDocumentSubmission submission;

    private JObject docObject;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmObject</Name>
				<Source><![CDATA[
    public JObject parmObject(JObject _docObject = docObject)
    {
        docObject = _docObject;
        return docObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParent</Name>
				<Source><![CDATA[
    internal BusinessDocumentInfo parmParent(BusinessDocumentInfo _parent = parent)
    {
        parent = _parent;
        return parent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubmission</Name>
				<Source><![CDATA[
    public BusinessDocumentSubmission parmSubmission(BusinessDocumentSubmission _submission = submission)
    {
        submission = _submission;
        return submission;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreatedDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns the date and time of document creation.
    /// </summary>
    /// <returns>The date and time of document creation.</returns>
    public utcdatetime getCreatedDateTime()
    {
        return createdDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIdentificationKeys</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns a map containing identification information.
    /// </summary>
    /// <returns>A map containing identification information.</returns>
    public Map getIdentificationKeys()
    {
        return mapIdentificationKeys;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns a map containing document details.
    /// </summary>
    /// <returns>A map containing document details.</returns>
    [Hookable(false)]
    public Map getDocumentDetails()
    {
        return mapDocDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutputFiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns a temporary table containing references to the output files.
    /// </summary>
    /// <returns>A temporary table containing references to the output files.</returns>
    public BusinessDocumentActionOutputFileTmp getOutputFiles()
    {
        return executionActionOutputFiles;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExecutions</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns a temporary table containing submission executions.
    /// </summary>
    /// <returns>A temporary table containing submission executions.</returns>
    public BusinessDocumentExecutionTmp getExecutions()
    {
        return executions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExecutionActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns a temporary table containing execution actions.
    /// </summary>
    /// <returns>A temporary table containing execution actions.</returns>
    public BusinessDocumentExecutionActionTmp getExecutionActions()
    {
        return executionActions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExecutionLogs</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns a temporary table containing execution logs.
    /// </summary>
    /// <returns>A temporary table containing execution logs.</returns>
    public BusinessDocumentActionLogTmp getExecutionLogs()
    {
        return executionActionLogs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutgoingVariables</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns a temporary table containing execution outgoing variables.
    /// </summary>
    /// <returns>A temporary table containing execution outgoing variables.</returns>
    public BusinessDocumentOutgoingVariablesTmp getOutgoingVariables()
    {
        return executionOutgoingVariables;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getState</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns the business document state.
    /// </summary>
    /// <returns>The business document state.</returns>
    public str getState()
    {
        return state;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getId</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns the business document ID.
    /// </summary>
    /// <returns>The business document ID.</returns>
    public str getId()
    {
        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns the agent ID which submitted the document.
    /// </summary>
    /// <returns>The business document`s agent ID</returns>
    public str getAgentId()
    {
        return agentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unixTimeStampToDateTime</Name>
				<Source><![CDATA[
    private System.DateTime unixTimeStampToDateTime(real _seconds)
    {
        System.DateTime dtDateTime = new System.DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind::Utc);
        
        dtDateTime = dtDateTime.AddSeconds(_seconds);

        return dtDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseDocInfo</Name>
				<Source><![CDATA[
    private void parseDocInfo()
    {
        JToken selectTokenExt(JObject _object, str _name)
        {
            JToken token = _object.SelectToken(_name);
            if (!token)
            {
                token = _object.SelectToken(strUpr(subStr(_name, 1, 1)) + subStr(_name, 2, strLen(_name)));
            }

            return token;
        }

        boolean isSuccess;

        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentInfo));
        using (var activityContext = activities.parseDocumentInfo())
        {
            try
            {
                JToken payload = docObject.SelectToken(BusinessDocumentServiceController::PayloadToken);
                if (!payload)
                {
                    payload = docObject;
                }

                JArray jArray = payload as JArray;
                JObject jObject = jArray && jArray.Count > 0
                    ? jArray.get_Item(0)
                    : payload as JObject;

                if (!jObject)
                {
                    return;
                }

                JToken docId = jObject.SelectToken("id");
                if (docId)
                {
                    id = docId.ToString();
                }

                JToken docAgentId = jObject.SelectToken("channel");
                if (docAgentId)     
                {
                    agentId = docAgentId.ToString();
                }

                JToken dateTime = jObject.SelectToken("createdDateTime");
                if (dateTime)
                {
                    createdDateTime = dateTime.ToObject(System.DateTime::Now.GetType());
                }

                if (FeatureStateProvider::isFeatureEnabled(BusinessDocumentExtendedDocumentIdentificationInSubmissionLogFeature::instance()))
                {
                    JArray documentDetails = selectTokenExt(jObject, BusinessDocumentServiceController::DocumentDetailsToken);

                    if (documentDetails)
                    {
                        for (int i = 0; i < documentDetails.Count; i++)
                        {
                            JObject key = documentDetails.get_Item(i);
                            JToken name = selectTokenExt(key, 'name');
                            JToken valueTypeName = selectTokenExt(key, 'valueTypeName');
                            JToken value = selectTokenExt(key, 'value');
                
                            if (name && value)
                            {
                                if (valueTypeName && valueTypeName.ToString() == 'dateTime')
                                {
                                    real seconds = str2Num(value.ToString());
                                    mapDocDetails.insert(name.ToString(), this.unixTimeStampToDateTime(seconds).ToString());
                                }
                                else if (valueTypeName && valueTypeName.ToString() == 'number')
                                {
                                    mapDocDetails.insert(name.ToString(), value.ToString());
                                }
                                else
                                {
                                    mapDocDetails.insert(name.ToString(), JsonConvert::DeserializeObject(value.ToString()));
                                }
                            }
                        }
                    }
                }

                JArray identification = selectTokenExt(jObject, BusinessDocumentServiceController::DocumentIdentificationToken);
                if (identification)
                {
                    for (int i = 0; i < identification.Count; i++)
                    {
                        JObject key = identification.get_Item(i);
                        JToken name = selectTokenExt(key, "name");
                        JToken valueTypeName = selectTokenExt(key, "valueTypeName");
                        JToken value = selectTokenExt(key, "value");
                
                        if (name && value)
                        {
                            if (valueTypeName && valueTypeName.ToString() == 'dateTime')
                            {
                                real seconds = str2Num(value.ToString());
                                mapIdentificationKeys.insert(name.ToString(), this.unixTimeStampToDateTime(seconds).ToString());
                            }
                            else
                            {
                                mapIdentificationKeys.insert(name.ToString(), JsonConvert::DeserializeObject(value.ToString()));
                            }
                        }
                    }
                }

                JToken stateToken = jObject.SelectToken("state");
                if (stateToken)
                {
                    state = stateToken.ToString();
                }

                JObject parentDoc = jObject.SelectToken("parent");
                if (parentDoc)
                {
                    if (parent == null)
                    {
                        this.parmParent(new BusinessDocumentInfo());
                    }
                    JToken parentDocId = parentDoc.SelectToken("id");
                    if (parentDocId)
                    {
                        parent.id = parentDocId.ToString();
                    }

                    JToken parentDocAgentId = parentDoc.SelectToken("channel");
                    if (parentDocAgentId)
                    {
                        parent.agentId = parentDocAgentId.ToString();
                    }

                    JToken parentDocDateTime = parentDoc.SelectToken("createdDateTime");
                    if (parentDocDateTime)
                    {
                        parent.createdDateTime = parentDocDateTime.ToObject(System.DateTime::Now.GetType());
                    }

                    JToken parentDocState = parentDoc.SelectToken("state");
                    if (parentDocState)
                    {
                        parent.state = parentDocState.ToString();
                    }
                }

                JArray executionRequests = jObject.SelectToken("executions");
                if (executionRequests)
                {
                    for (int i = 0; i < executionRequests.Count; i++)
                    {
                        JObject request = executionRequests.get_Item(i);
                        JToken executionRequest = request.SelectToken("id");
                        str executionRequestId = executionRequest ? executionRequest.ToString() : '';

                        JToken timestamp = request.SelectToken("timestamp");
                        JToken status = request.SelectToken("status");

                        executions.clear();
                        executions.ID = str2Guid(executionRequestId);
                        if (timestamp)
                        {
                            executions.Timestamp = timestamp.ToObject(System.DateTime::Now.GetType());
                        }

                        executions.Status = status 
                            ? BusinessDocumentInfo::stateToLabel(status.ToString())
                            : '';

                        executions.insert();

                        JArray variables = request.SelectToken("variables");
                        if (variables)
                        {
                            for (int j = 0; j < variables.Count; j++)
                            {
                                JObject variable = variables.get_Item(j);
                                JToken name = variable.SelectToken("name");
                                JToken description = variable.SelectToken("description");
                                JToken valueTypeName = variable.SelectToken("valueTypeName");

                                if (name)
                                {
                                    executionOutgoingVariables.clear();
                                    executionOutgoingVariables.Name = name.ToString();
                                    executionOutgoingVariables.Description = description ? description.ToString() : '';
                                    executionOutgoingVariables.TypeName = valueTypeName ? valueTypeName.ToString() : '';
                                    executionOutgoingVariables.ExecutionID = executions.ID;
                                    executionOutgoingVariables.insert();
                                }
                            }
                        }

                        JArray actions = request.SelectToken("actions");
                        if (actions)
                        {
                            for (int j = 0; j < actions.Count; j++)
                            {
                                JObject action = actions.get_Item(j);
                                JToken executionAction = action.SelectToken("id");
                                str executionActionId = executionAction ? executionAction.ToString() : '';

                                timestamp = action.SelectToken("timestamp");
                                status = action.SelectToken("status");
                                JToken name = action.SelectToken("name");
                                JToken description = action.SelectToken("description");
                                JToken configurationAction = action.SelectToken("configurationActionId");
                                str configurationActionId = configurationAction ? configurationAction.ToString() : '';

                                executionActions.clear();
                                executionActions.ID = str2Guid(executionActionId);
                                executionActions.ConfigActionName = configurationActionId;
                                if (timestamp)
                                {
                                    executionActions.Timestamp = timestamp.ToObject(System.DateTime::Now.GetType());
                                }

                                executionActions.Status = status
                                    ? BusinessDocumentInfo::stateToLabel(status.ToString())
                                    : '';

                                executionActions.Name = name ? name.ToString() : '';
                                executionActions.Description = description ? description.ToString() : '';
                                executionActions.ExecutionID = executions.ID;
                                executionActions.insert();

                                JArray outputParams = action.SelectToken("outputParameters");
                                if (outputParams)
                                {
                                    for (int k = 0; k < outputParams.Count; k++)
                                    {
                                        JObject param = outputParams.get_Item(k);
                                        JToken valueTypeName = param.SelectToken("valueTypeName");
                                        if (valueTypeName && valueTypeName.ToString() == 'file')
                                        {
                                            JToken fileId = param.SelectToken("id");
                                            JToken fileName = param.SelectToken("name");
                                            JToken fileDescription = param.SelectToken("description");
                                    
                                            executionActionOutputFiles.clear();
                                            executionActionOutputFiles.IDName = fileId ? fileId.ToString() : '';
                                            executionActionOutputFiles.Name = fileName ? fileName.ToString() : '';
                                            executionActionOutputFiles.Description = fileDescription ? fileDescription.ToString() : '';
                                            executionActionOutputFiles.ActionID = executionActions.ID;
                                            executionActionOutputFiles.ExecutionID = executions.ID;
                                            executionActionOutputFiles.insert();
                                        }
                                    }
                                }

                                JArray logs = action.SelectToken("logs");
                                if (logs)
                                {
                                    List logEntries = new List(Types::Container);
                                    for (int k = 0; k < logs.Count; k++)
                                    {
                                        JObject logEntry = logs.get_Item(k);
                                        timestamp = logEntry.SelectToken("timestamp");
                                        JToken message = logEntry.SelectToken("message");
                                        JToken level = logEntry.SelectToken("level");
                                        JToken code = logEntry.SelectToken("code");
                                        JToken classification = logEntry.SelectToken("classification");

                                        executionActionLogs.clear();
                                        if (timestamp)
                                        {
                                            executionActionLogs.Timestamp = timestamp.ToObject(System.DateTime::Now.GetType());
                                        }
                                        executionActionLogs.Message = message ? message.ToString() : '';
                                        executionActionLogs.Level = level ? level.ToString() : '';
                                        executionActionLogs.ActionID = executionActions.ID;
                                        executionActionLogs.Code = code ? code.ToString() : '';
                                        executionActionLogs.Classification = classification
                                            ? symbol2Enum(enumNum(ErrorClassification), classification.ToString())
                                            : ErrorClassification::Notification;
                                        executionActionLogs.insert();
                                    }
                                }
                            }
                        }
                    }
                }

                isSuccess = true;
            }
            catch (Exception::CLRError)
            {
                str message = SRSProxy::getLastClrExceptionMessage();
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, message);
                error(message);
            }
            finally
            {
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsSuccess, any2Str(isSuccess));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        mapIdentificationKeys = new Map(Types::String, Types::String);
        mapDocDetails = new Map(Types::String, Types::String);

        if (docObject)
        {
            this.parseDocInfo();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>stateToLabel</Name>
				<Source><![CDATA[
    private static str stateToLabel(str _stateStr)
    {
        var stateEnum = symbol2Enum(enumNum(BusinessDocumentState), _stateStr);
        var dictEnum = new DictEnum(enumNum(BusinessDocumentState));

        return dictEnum.value2Label(stateEnum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method instantiates the class from a JSON object.
    /// </summary>
    /// <param name = "_docObject">A JSON object containing the document information.</param>
    /// <returns>An instance of the class.</returns>
    public static BusinessDocumentInfo newFromJSON(JObject _docObject)
    {
        BusinessDocumentInfo docInfo = BusinessDocumentInfo::construct();

        docInfo.parmObject(_docObject);
        docInfo.init();

        return docInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static BusinessDocumentInfo construct()
    {
        return new BusinessDocumentInfo();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>