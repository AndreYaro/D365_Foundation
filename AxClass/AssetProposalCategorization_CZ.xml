<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetProposalCategorization_CZ</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class AssetProposalCategorization_CZ extends AssetProposal implements BatchRetryable
{
    private const str FeatureReference = 'EEU-00027';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
        private AssetTransTypeJournal assetTransType()
    {
        return AssetTransTypeJournal::PreAcquisition_CZ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        public Object dialog()
    {
        DialogRunbase dialog = super();
        ;
        dialog.caption("@GLS111979");
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        Query           query = new Query(querystr(AssetProposal));
        QueryBuildRange qr;

        super();

        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        qr = query.dataSourceTable(tablenum(AssetBookTable)).addRange(fieldnum(AssetBookTable,
                                                                               CurrentOperationsTax));
        qr.status(RangeStatus::Locked);

        qr = query.dataSourceTable(tablenum(AssetBook)).addRange(fieldnum(AssetBook, Status));
        qr.value(queryValue(AssetStatus::NoAcquisition));
        qr.status(RangeStatus::Locked);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
        public boolean prompt()
    {
        boolean ret;

        if (AssetParameters::find().AllowPreAcquisition_CZ == AssetAllowPreAcquisition_CZ::No)
            return checkFailed("@GLS111981");

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        AssetJournal        assetJournal;
        AssetBook           assetBook;
        AssetTransDate      transDate;
        ;
        assetJournal = new AssetJournal(journalNum,this.assetTransType());

        ttsbegin;

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(AssetBook)))
            {
                assetBook = queryRun.get(tablenum(AssetBook));

                if (assetBook.AcquisitionPrice)
                {
                    transDate = this.initFirstDate(assetBook.CategorizationDate_CZ, assetBook.AssetId);
                    assetJournal.createTrans(assetBook.AcquisitionPrice, assetBook, transDate);
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>