<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25DebtDebitAmortisation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25DebtDebitAmortisation extends RTax25DebtAmortisation
{
    // Current transaction data
    AmountMST       availableReserveMST,
                    revenueExpenceMST,
                    amortisationMST,
                    taxAmortisationMST,
                    taxReserveWriteOff,
                    rapReserveWriteOff;
    boolean         taxModelPosting;
    RTax25DebtModel debtModel;

    // Common
    LedgerDimensionDefaultAccount amortisationLedgerDimension,
                                  revenueExpenseLedgerDimension,
                                  reserveWriteOffLedgerDimension,
                                  summaryLedgerDimension;

    DimensionDefault revenueDefaultDimension;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTransAmounts</Name>
				<Source><![CDATA[
    protected void calcTransAmounts()
    {
        RTax25DebtAmounts       debtAmounts;
        RefTableId              refTableId;
        RefRecId                refRecId;
        DocumentNum             srcDocNum;

        if (debtModel.AccountingPolicy == RTax25DebtPolicy::Document)
        {
            [srcDocNum, refTableId, refRecId] = RTax25RegCalc_DebtInventoryMultiply::findSourceDocument(custVendTrans);
        }

        debtAmounts = RTax25DebtAmounts::newModelParameters(
            transDate,
            RTax25DebtType::Debit,
            NoYes::Yes,
            refTableId,
            refRecId,
            taxModelPosting);

        availableReserveMST = debtAmounts.getReserve() - debtAmounts.getUsedReserve();

        hopelessDebtMST = CurrencyExchangeHelper::amountCur2MST(
            custVendTrans.remainAmountCur(),
            custVendTrans.CurrencyCode,
            0,
            transDate);

        if (debtAmounts.getExclFromReserve(custVendTrans.DefaultDimension))
        {
            amortisationMST     = 0;
            revenueExpenceMST   = hopelessDebtMST;
        }
        else
        {
            if (availableReserveMST - hopelessDebtMST >= 0)
            {
                amortisationMST       = hopelessDebtMST;
                revenueExpenceMST     = 0;
                availableReserveMST  -= hopelessDebtMST;
            }
            else
            {
                amortisationMST     = availableReserveMST;
                revenueExpenceMST   = hopelessDebtMST - amortisationMST;
                availableReserveMST = 0;
            }
        }

        hopelessDebtMST = -hopelessDebtMST;

        if (taxModelPosting)
        {
            taxAmortisationMST = amortisationMST;
            taxReserveWriteOff = 0;
        }
        else
        {
            rapReserveWriteOff = 0;
        }

        if (debtModel.AccountingPolicy == RTax25DebtPolicy::Document)
        {
            if (taxModelPosting)
            {
                taxReserveWriteOff = availableReserveMST;
            }
            else
            {
                rapReserveWriteOff = availableReserveMST;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
    protected void end()
    {
        if (taxModelPosting && ledgerVoucher)
        {
            if (ledgerBondClient)
            {
                ledgerBondClient.bondLastVRef2CurrentLog();
                ledgerBondClient.removeCurrentLogObject();
            }

            ledgerVoucher.end();
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        super();
        transTxt = "@GLS103828";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initModelAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes ledger dimensions of the debt model.
    /// </summary>
    /// <param name="_debtModel">
    /// The record ID reference to the debt model.
    /// </param>

    private void initModelAccounts(RefRecId _debtModel)
    {
        RTax25DebtLedgerAccounts          debtLedgerAccounts;
        DimensionAttributeValue           dimAttrValue;
        DimensionAttributeValueSetStorage dimAttrValueSetStorage;

        debtModel = RTax25DebtModel::findRecId(_debtModel);
        if (debtModel.AccountingPolicy == RTax25DebtPolicy::Document)
        {
            debtLedgerAccounts = RTax25DebtLedgerAccounts::getAccounts(
                _debtModel,
                custVendTrans.TableId == tableNum(CustTrans) ?
                ModuleCustVend::Cust                         :
                ModuleCustVend::Vend,
                custVendTrans.AccountNum);
        }

        amortisationLedgerDimension   = debtLedgerAccounts ?
                                    debtLedgerAccounts.BadDebtReserveLedgerDimension :
                                    debtModel.BadDebtReserveLedgerDimension;
        revenueExpenseLedgerDimension = debtLedgerAccounts ?
                                    debtLedgerAccounts.UnrealisedExpenseLedgerDimension :
                                    debtModel.UnrealisedExpenseLedgerDimension;
        reserveWriteOffLedgerDimension= debtLedgerAccounts ?
                                    debtLedgerAccounts.UnrealisedRevenueLedgerDimension :
                                    debtModel.UnrealisedRevenueLedgerDimension;
        summaryLedgerDimension        = debtLedgerAccounts ?
                                    debtLedgerAccounts.SummaryLedgerDimension :
                                    debtModel.SummaryLedgerDimension;

        dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(defaultDimension);
        dimAttrValue           = RTax25ProfitTable::profitRecId2DimensionAttributeValue(debtLedgerAccounts ?
                                                                                    debtLedgerAccounts.RTax25ProfitTableLoss :
                                                                                    debtModel.RTax25ProfitTableLoss);
        if (dimAttrValue)
        {
            dimAttrValueSetStorage.addItem(dimAttrValue);
            defaultDimension = dimAttrValueSetStorage.save();
        }

        revenueDefaultDimension = RTax25ProfitTable::profitRecId2DefaultDimension(debtLedgerAccounts ?
                                                                              debtLedgerAccounts.RTax25ProfitTableProfit :
                                                                              debtModel.RTax25ProfitTableProfit);

        if (!dimAttrValue)
        {
            throw error(strFmt("@GLS104379", "@SYS25196"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCustVendTrans</Name>
				<Source><![CDATA[
    protected void markCustVendTrans(AmountMST _amountMST = hopelessDebtMST,
                                     RefRecId  _recid     = custVendTransOpen.RecId)
    {
        super(-_amountMST, _recid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeq</Name>
				<Source><![CDATA[
    protected NumberSeq numberSeq()
    {
        NumberSeq   numberSeq;
        DictType    dictType;

        numberSeq = NumberSeq::newGetVoucher(CustParameters::numRefRTax25DebtDebitVoucher(),false,true);

        if (! numberSeq)
        {
            dictType = new DictType(extendedTypeNum(RTax25DebtDebitVoucher));
            throw error(strFmt("@SYS53184", "@SYS53912", dictType.label()));
        }
        return numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAmounts</Name>
				<Source><![CDATA[
    protected void postAmounts()
    {
        if (debtModel.AccountingPolicy == RTax25DebtPolicy::Document && availableReserveMST)
        {
            this.createLedgerTrans(
                amortisationLedgerDimension,
                availableReserveMST,
                revenueDefaultDimension);

            this.createLedgerTrans(
                reserveWriteOffLedgerDimension,
                -availableReserveMST,
                revenueDefaultDimension);

            if (ledgerBondClient)
            {
                ledgerBondClient.bondLastVRef2CurrentLog();
            }
        }

        this.createLedgerTrans(
            amortisationLedgerDimension,
            amortisationMST,
            debtModel.AccountingPolicy == RTax25DebtPolicy::Document ?
            custVendTrans.DefaultDimension :
            defaultDimension);

        this.createLedgerTrans(
            revenueExpenseLedgerDimension,
            revenueExpenceMST,
            debtModel.AccountingPolicy == RTax25DebtPolicy::Document ?
            custVendTrans.DefaultDimension :
            defaultDimension);

        if (taxModelPosting)
        {
            this.createLedgerTrans(summaryLedgerDimension, hopelessDebtMST, custVendTrans.DefaultDimension);
        }
        else
        {
            this.createCustVendVoucher(hopelessDebtMST);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTrans</Name>
				<Source><![CDATA[
    protected void processTrans()
    {
        taxModelPosting = true;
        if (CustParameters::rTax25DebtModelTax(false))
        {
            this.initModelAccounts(CustParameters::rTax25DebtModelTax());
            super();
        }

        taxModelPosting = false;
        this.initModelAccounts(CustParameters::rTax25DebtModel());
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOffsetTrans</Name>
				<Source><![CDATA[
    protected void updateOffsetTrans(CustVendTrans _custVendTrans)
    {
        CustVendTrans_W custVendTrans_W;

        if (_custVendTrans)
        {
            _custVendTrans.TransType = LedgerTransType::RTax25_BadDebtDebitAmortisation;

            custVendTrans_W = _custVendTrans.CustVendTrans::getCustVendTrans_W();
            custVendTrans_W.RTax25Amortisation_RU       = taxAmortisationMST;
            custVendTrans_W.RAPAmortisation_RU          = amortisationMST;
            custVendTrans_W.RTax25AmortisationExcess_RU = taxReserveWriteOff;
            custVendTrans_W.RAPAmortisationExcess_RU    = rapReserveWriteOff;

            custVendTrans_W.OffsetCustVendTrans_RU = this.isReverseMode() ?
                                                 custVendTrans.CustVendTrans::getCustVendTrans_W().OffsetCustVendTrans_RU :
                                                 custVendTrans.RecId;
            _custVendTrans.CustVendTrans::packCustVendTrans_W(custVendTrans_W);

            _custVendTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25DebtDebitAmortisation construct()
    {
        return new RTax25DebtDebitAmortisation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>