<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyPostPurch_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::Invoice)]
class InterCompanyPostPurch_Invoice extends InterCompanyPostPurch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus documentStatus()
    {
        return DocumentStatus::Invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExternalJournalsToTransfer</Name>
				<Source><![CDATA[
    protected void findExternalJournalsToTransfer()
    {
        if (transferFromJournal)
        {
            CustInvoicePackingSlipQuantityMatch custInvoicePackingSlipQuantityMatch;
            CustInvoiceTrans                    custInvoiceTrans;
            CustPackingSlipTrans                custPackingSlipTrans;
            
            while select custPackingSlipTrans
                exists join custInvoicePackingSlipQuantityMatch
                    where custInvoicePackingSlipQuantityMatch.PackingSlipSourceDocumentLine == custPackingSlipTrans.SourceDocumentLine
                    exists join custInvoiceTrans
                        where custInvoiceTrans.SourceDocumentLine == custInvoicePackingSlipQuantityMatch.InvoiceSourceDocumentLine
                           && custInvoiceTrans.InvoiceId == interCompanyJour.DocumentNum
                           && custInvoiceTrans.InvoiceDate == interCompanyJour.DocumentDate
                           && custInvoiceTrans.InventTransId == interCompanyTrans.InventTransId
            {
                changecompany(interCompanyJour.InterCompanyCompanyId)
                {
                    PurchLine purchLineLocal = PurchLine::findInventTransId(interCompanyTrans.InterCompanyInventTransId);

                    VendPackingSlipVersion vendPackingSlipVersion = this.findExternalVendPackingSlipVersion(interCompanyJour, interCompanyTrans, purchLineLocal, custPackingSlipTrans);

                    if (vendPackingSlipVersion)
                    {
                        this.insertTmpFrmVirtual(vendPackingSlipVersion);
                    }
                    else
                    {
                        tmpFrmVirtual = null;
                        transferFromJournal = false;
                        warning(strFmt("@SYS106122",interCompanyJour.InterCompanyId));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExternalVendPackingSlipVersion</Name>
				<Source><![CDATA[
    protected VendPackingSlipVersion findExternalVendPackingSlipVersion(InterCompanyJour _interCompanyJour, InterCompanyTrans _interCompanyTrans, PurchLine _purchLine, CustPackingSlipTrans _custPackingSlipTrans)
    {
        return VendPackingSlipVersion::findFromInterCompanyPackingSlip(_purchLine.PurchId, _custPackingSlipTrans.PackingSlipId, _custPackingSlipTrans.DeliveryDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterUpdate</Name>
				<Source><![CDATA[
    void formLetterUpdate()
    {
        formletterPrintout = purchTable.interCompanyEndpointActionPolicy().PrintPurchInvoice;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyMarkupAllocationForPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allocates various charges on an intercompany purchase order.
    /// </summary>
    /// <param name="_purchTable">
    ///    The purchase order.
    /// </param>
    /// <param name="_docNum">
    ///    The number of the invoice that triggers the allocation.
    /// </param>
    /// <param name="_transDate">
    ///    The date of the invoice that triggers the allocation.
    /// </param>
    protected void interCompanyMarkupAllocationForPO(PurchTable _purchTable, Num _docNum, TransDate _transDate)
    {
        InterCompanyPostPurch_Invoice::intercompanyMarkupAllocation(_purchTable, _docNum, _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusIssue</Name>
				<Source><![CDATA[
    protected StatusIssue statusIssue()
    {
        return StatusIssue::Sold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusReceipt</Name>
				<Source><![CDATA[
    protected StatusReceipt statusReceipt()
    {
        return StatusReceipt::Purchased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyMarkupAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allocates various charges on an intercompany purchase order.
    /// </summary>
    /// <param name="_purchTable">
    ///    The purchase order.
    /// </param>
    /// <param name="_docNum">
    ///    The number of the invoice that triggers the allocation.
    /// </param>
    /// <param name="_transDate">
    ///    The date of the invoice that triggers the allocation.
    /// </param>
    public static void intercompanyMarkupAllocation(PurchTable _purchTable, Num _docNum, TransDate _transDate)
    {
        MarkupAllocation markupAllocation;
        InterCompanyEndpointActionPolicy interCompanyEndpointActionPolicy;

        interCompanyEndpointActionPolicy = _purchTable.interCompanyEndpointActionPolicy();

        markupAllocation = MarkupAllocation::newMarkupAllocation(_purchTable);
        markupAllocation.parmAllocateAfter(interCompanyEndpointActionPolicy.MarkupAllocateAfter);
        markupAllocation.parmAllocateInventoried(interCompanyEndpointActionPolicy.MarkupInventoriedOnly);
        markupAllocation.parmAllocateOnlyReceived(true);
        markupAllocation.parmInterCompanyCompanyId(_purchTable.InterCompanyCompanyId);
        markupAllocation.parmInterCompanyInvoiceId(_docNum);
        markupAllocation.parmInterCompanyInvoiceDate(_transDate);
        markupAllocation.parmInterCompanyDirectDelivery(_purchTable.InterCompanyDirectDelivery);
        markupAllocation.parmSkipWarning(true);
        markupAllocation.runOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>