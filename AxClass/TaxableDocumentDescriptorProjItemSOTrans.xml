<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocumentDescriptorProjItemSOTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the tax document bundler for normal Project sales line transaction.
/// </summary>
[TaxableDocumentDescriptorAttribute('Project - Sales line', 'ProjItemSOTrans')]
public class TaxableDocumentDescriptorProjItemSOTrans extends TaxableDocumentDescriptorBase
    implements TaxableDocumentTypeDefinitionProjItemSOTrans
{
    ProjProposalJour projProposalJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDataProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data provider.
    /// </summary>
    /// <returns>
    /// The data provider instance.
    /// </returns>
    public ITaxableDocumentDataProvider getDataProvider()
    {
        return new TaxableDocProjItemSOTransDataProvider(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionSide</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the default distribution side for the transaction.
    /// </summary>
    /// <returns>The default distribution side for the transaction.</returns>
    public TaxAccountingPostingProfileDistributionSide getDistributionSide()
    {
        return TaxAccountingPostingProfileDistributionSide::Credit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTaxableDocumentType</Name>
				<Source><![CDATA[
    public ClassName getSourceTaxableDocumentType()
    {
        return classStr(TaxableDocumentTypeDefinitionProjItemSOTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxAdjustable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is tax adjustable for this transaction
    /// </summary>
    /// <returns>
    /// True if tax is adjustable; otherwise, false.
    /// </returns>
    public boolean isTaxAdjustable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxableDocumentRootRecord</Name>
				<Source><![CDATA[
    protected void setTaxableDocumentRootRecord(Common _rootRecord)
    {
        TaxEngineProjItemSOTransHeader headerTrans;
        TaxEngineProjItemSOJourHeader  headerJour;

        if (_rootRecord.TableId == tableNum(TaxEngineProjItemSOTransHeader))
        {
            rootTable        = _rootRecord;
            headerTrans      = rootTable as TaxEngineProjItemSOTransHeader;
            projProposalJour = projProposalJour::findRecid(headerTrans.ProjProposalJour);
        }
        else if (_rootRecord.TableId == tableNum(ProjProposalJour))
        {
            projProposalJour = _rootRecord as ProjProposalJour;
            headerTrans      = TaxEngineProjItemSOTransHeader::findOrCreateByProjProposalJour(projProposalJour);
            rootTable        = headerTrans;
        }
        else if (_rootRecord.TableId == tableNum(TaxEngineProjItemSOJourHeader))
        {
            rootTable        = _rootRecord;
            headerJour       = rootTable as TaxEngineProjItemSOJourHeader;
            projProposalJour = projProposalJour::find(ProjInvoiceJour::findRecId(headerJour.ProjInvoiceJour).ProposalId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPersistTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if tax document should be persisted in database.
    /// </summary>
    /// <returns>True if the tax document should be persisted; otherwise, false.</returns>
    public boolean shouldPersistTaxDocument()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSkipTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes skipTaxDocument attribute.
    /// </summary>
    protected void initSkipTaxDocument()
    {
        super();

        #ISOCountryRegionCodes
        if (!skipTaxDocument
                && projProposalJour.RecId
                && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            ProjProposalItem projProposalItem;
            select firstonly RecId from projProposalItem
                    where projProposalItem.ProposalId == projProposalJour.ProposalId
                        && projProposalItem.SalesId != '';

            if (!projProposalItem.RecId)
            {
                skipTaxDocument = true;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>