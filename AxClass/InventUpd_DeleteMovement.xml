<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventUpd_DeleteMovement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventUpd_DeleteMovement</c> class is used to update inventory when issues or receipts are
///    deleted. For example, if a sales order line is deleted, reservations that are done against
///    inventory must be updated.
/// </summary>
/// <remarks>
///    See the <c>PurchLineType.delete </c>method for an example of how the
///    <c>InventUpd_DeleteMovement</c> class is used.
/// </remarks>
public class InventUpd_DeleteMovement extends InventUpdate
{
    boolean     showInfoDelReserv;
    boolean     originReferenceRemains;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canTransExistsWithoutSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the inventory transaction can exist after the source document is deleted.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The value that specifies the inventory transaction.
    /// </param>
    /// <returns>
    ///    true if the transaction can exist after the source document is deleted; otherwise, false.
    /// </returns>
    protected boolean canTransExistsWithoutSourceDocument(InventTrans _inventTrans)
    {
        if (((_inventTrans.StatusReceipt == StatusReceipt::None) && (_inventTrans.StatusIssue == StatusIssue::Sold))
            ||
           ((_inventTrans.StatusIssue == StatusIssue::None) && (_inventTrans.StatusReceipt == StatusReceipt::Purchased)))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateMovement</Name>
				<Source><![CDATA[
    protected boolean  checkUpdateMovement()
    {
        if (!movement.allowInventoryUpdateWhenInventTransIdIsEmpty() && !movement.transId())
        {
            return checkFailed("@SYS50830");
        }
        
        if (movement.inventTransOriginId())
        {
            movement.validateCanDeleteMarkedTransaction();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeleteOperation</Name>
				<Source><![CDATA[
    public boolean isDeleteOperation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventTrans</Name>
				<Source><![CDATA[
    protected void deleteInventTrans(InventTrans _inventTrans)
    {
        if (_inventTrans.statusReceipt== StatusReceipt::None)
        {
            if (_inventTrans.StatusIssue  == StatusIssue::ReservPhysical  ||
                _inventTrans.StatusIssue  == StatusIssue::ReservOrdered   ||
                _inventTrans.StatusIssue  == StatusIssue::OnOrder         ||
                _inventTrans.StatusIssue  == StatusIssue::QuotationIssue)
            {
                if (_inventTrans.TransChildType   != movement.transChildType()   ||
                    _inventTrans.TransChildRefId  != movement.transChildRefId())
                {
                    throw error(strfmt("@SYS55037", _inventTrans.TransChildType, _inventTrans.TransChildRefId));
                }

                if (_inventTrans.MarkingRefInventTransOrigin)
                {
                    InventTransOrigin::deleteMarking(_inventTrans.MarkingRefInventTransOrigin, _inventTrans.InventTransOrigin, -_inventTrans.Qty,true);
                }

                if (_inventTrans.StatusIssue == StatusIssue::ReservPhysical)
                {
                    this.updateDimReservePhysical(InventDim::find(_inventTrans.InventDimId), -_inventTrans.Qty, 0, -_inventTrans.PdsCWQty);
                }

                // <GEERU>
                if (transLinkCache_RU)
                {
                    transLinkCache_RU.save(tableNum(InventTrans), _inventTrans.RecId);
                }
                // </GEERU>
                _inventTrans.delete(NoYes::No, NoYes::No);

                // delete the virtual receipt if there is any
                if (_inventTrans.MarkingRefInventTransOrigin)
                {
                    InventTrans inventTransRefReceipt = InventTrans::findByInventTransOrigin(_inventTrans.MarkingRefInventTransOrigin);
                    if (inventTransRefReceipt.RecId)
                    {
                        InventMovement movementRefReceipt = inventTransRefReceipt.inventMovement(true);

                        if (movementRefReceipt && movementRefReceipt.isVirtuel())
                        {
                            InventMov_Virtuel movementRefReceiptVirt = movementRefReceipt;
                            movementRefReceiptVirt.parmInventMovReference(movement);
                            InventUpd_DeleteMovement deleteMovRefReceipt = InventUpd_DeleteMovement::newMovement(movementRefReceiptVirt);
                            deleteMovRefReceipt.updateNow();
                        }
                    }
                }
               
                InventBlockingInventStatusSync::newStandardHandlingQuantities(movement, -_inventTrans.Qty, -_inventTrans.PdsCWQty).postSync();            
            }
            // note, transaction with StatusIssue::Sold is not deleted and it is not reported as an error
            // since it is considered as a valid situation
            else if (_inventTrans.StatusIssue == StatusIssue::Deducted ||
                     _inventTrans.StatusIssue == StatusIssue::Picked)
            {
                throw error(strfmt("@SYS19413", _inventTrans.StatusIssue));
            }
        }
        else
        {
            if (_inventTrans.StatusReceipt == StatusReceipt::Ordered  ||
                _inventTrans.StatusReceipt == StatusReceipt::QuotationReceipt)
            {
                if (_inventTrans.TransChildType   != movement.transChildType()   ||
                    _inventTrans.TransChildRefId  != movement.transChildRefId())
                {
                    throw error(strfmt("@SYS55037", _inventTrans.TransChildType, _inventTrans.TransChildRefId));
                }

                if (_inventTrans.MarkingRefInventTransOrigin)
                {
                    InventTransOrigin::deleteMarking(_inventTrans.MarkingRefInventTransOrigin, _inventTrans.InventTransOrigin, -_inventTrans.Qty, true, null, null, this.parmShowInfoDelReserv());
                }

                InventBlockingInventStatusSync::newStandardHandlingQuantities(movement, _inventTrans.Qty, _inventTrans.PdsCWQty).preSync();

                if (_inventTrans.StatusReceipt== StatusReceipt::Ordered)
                {
                    InventOnHandQty inventOnHandQty = InventOnHandQty::newPhysicalInvent(movement, _inventTrans.inventDim());
                    if (!this.allowChangeDim(inventOnHandQty, _inventTrans, _inventTrans.inventDim(), false, true))
                    {
                        throw error("@SYS18447");
                    }

                    inventOnHandQty.addDepreciateOrderedCheck(allowNegativePhysical);
                }

                // <GEERU>
                if (transLinkCache_RU)
                {
                    transLinkCache_RU.save(tableNum(InventTrans), _inventTrans.RecId);
                }
                // </GEERU>
                _inventTrans.delete(NoYes::No, NoYes::No); // should not delete InventTransOrigin - it will be explicitly deleted after all InventTrans records are deleted

                movement.transIdSum().setInventTransStatus(_inventTrans, StatusReceipt::None, StatusIssue::None);

                // Update reservation on the issue
                if (_inventTrans.MarkingRefInventTransOrigin)
                {
                    InventTrans inventTransRefIssue = InventTrans::findByInventTransOrigin(_inventTrans.MarkingRefInventTransOrigin);
                    if (inventTransRefIssue.RecId)
                    {
                        InventMovement movementRefIssue = inventTransRefIssue.inventMovement(true);

                        if (movementRefIssue)
                        {
                            InventUpd_Estimated estimatedRefIssue = InventUpd_Estimated::newInventMovement(movementRefIssue);
                            if (estimatedRefIssue)
                            {
                                estimatedRefIssue.updateReservation();
                            }

                            if (movementRefIssue.isVirtuel() && this.mustBeDeleteMovRefIssue(_inventTrans))
                            {
                                InventMov_Virtuel movementRefIssueVirt = movementRefIssue;
                                movementRefIssueVirt.parmInventMovReference(movement);
                                InventUpd_DeleteMovement deleteMovRefIssue = InventUpd_DeleteMovement::newMovement(movementRefIssueVirt);
                                deleteMovRefIssue.updateNow();
                            }
                        }
                    }
                }
            }
            // note, transaction with StatusReceipt::Purchased is not deleted and it is not reported as an error
            // since it is considered as a valid situation
            else if (_inventTrans.StatusReceipt == StatusReceipt::Received      ||
                     _inventTrans.StatusReceipt == StatusReceipt::Registered    ||
                     _inventTrans.StatusReceipt == StatusReceipt::Arrived)
            {
                throw error(strfmt("@SYS19413", _inventTrans.StatusReceipt));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUpdate</Name>
				<Source><![CDATA[
    protected void initUpdate()
    {
        super();

        if (movement.newMovement_TransferIssueReceive() ||
           (movement.newMovement_TransferReceipt()      &&
            movement.newMovement_TransferReceipt().newMovement_TransferIssueReceive()))
        {
            this.parmAllowNegativePhysical(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginReferenceRemains</Name>
				<Source><![CDATA[
    public boolean parmOriginReferenceRemains(boolean _originReferenceRemains = originReferenceRemains)
    {
        originReferenceRemains = _originReferenceRemains;
        return originReferenceRemains;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowInfoDelReserv</Name>
				<Source><![CDATA[
    protected boolean parmShowInfoDelReserv(boolean _showInfoDelReserv = showInfoDelReserv)
    {
        showInfoDelReserv = _showInfoDelReserv;
        return showInfoDelReserv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    public void updateNow()
    {
        using (var telemetryTask = new InventUpdateInstrumentationTask(this))
        {
			InventTrans             inventTrans;
			InventTransOriginId     inventTransOriginId;
			boolean                 canDeleteOrigin;

			ttsbegin;

			if (!this.checkUpdateMovement())
			{
				throw error("@SYS25904");
			}

			inventTransOriginId = movement.inventTransOriginId();

			if (inventTransOriginId)
			{
				canDeleteOrigin = true;

				while select forupdate inventTrans
					order by StatusReceipt // remove issues before receipts on transfers, for all issues StatusReceipt is StatusReceipt::None (0)
					where inventTrans.InventTransOrigin == inventTransOriginId
				{
					if (this.canTransExistsWithoutSourceDocument(inventTrans))
					{
						canDeleteOrigin = false;
					}
					else
					{
						this.deleteInventTrans(inventTrans);
					}
				}
				if (!this.parmOriginReferenceRemains())
				{
					// delete the origin and references only if no transactions left
					if (canDeleteOrigin)
					{
						// delete references like asset, project etc.
						this.deleteInventTransOriginAndReferences();
					}
					else
					{
						// the owner is going to be deleted, so we need to delete relationship owner-origin
						// even if we keep origin
						movement.deleteOriginOwnerRelationship();
					}
				}
			}
            
            this.updateCostCommitments();

			if (movement.canBeReserved()
				&& movement.mustBeAutoReserved())
			{
				movement.updateReqExplodeReservation();
			}

			ttscommit;
		}
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCostCommitments</Name>
				<Source><![CDATA[
    internal void updateCostCommitments()
    {
        if (movement.projId() && movement.canCommittedCostBeReversed()) //no matter the parameter is ON/OFf
        {
            CostControlPostingItem costControlPostingItem = CostControlPosting::newCostControlPostingItem(movement);
            costControlPostingItem.run(ProjCommittedCostUpdateAction::Delete);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement</Name>
				<Source><![CDATA[
    static public InventUpd_DeleteMovement newMovement(
        InventMovement      _movement,
        boolean             _showInfoDelReserv = true)
    {
        InventUpd_DeleteMovement inventUpd_DeleteMovement = new InventUpd_DeleteMovement(_movement);

        inventUpd_DeleteMovement.setParmAllowDefault();
        inventUpd_DeleteMovement.parmShowInfoDelReserv(_showInfoDelReserv);
        inventUpd_DeleteMovement.initUpdate();

        return inventUpd_DeleteMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeDeleteMovRefIssue</Name>
				<Source><![CDATA[
    private boolean mustBeDeleteMovRefIssue(InventTrans _inventTrans)
    {
        boolean canDeleteMovRefIssue = true;

        if (_inventTrans.MarkingRefInventTransOrigin
            && _inventTrans.Qty > 0)
        {
            InventTransOrigin inventTransOriginIssue = InventTransOrigin::find(_inventTrans.MarkingRefInventTransOrigin);

            // To check virtual inventory transaction marked on production or purchase order which is not linked to any other references like sales, purchase.
            if (inventTransOriginIssue
                && !inventTransOriginIssue.ReferenceId
                && inventTransOriginIssue.ReferenceCategory == InventTransType::InventTransaction)
            {
                InventTransOrigin inventTransOrigin;
                InventBlocking inventBlocking;
                InventBlockingQualityOrder inventBlockingQualityOrder;
                InventQualityOrderTable inventQualityOrderTable;

                // Checking whether the blocking quality order exists with reference type as route or purchase operations to skip deleting the project virtual transaction.
                select firstonly RecId, InventRefId, ReferenceType from inventQualityOrderTable
                        where inventQualityOrderTable.ReferenceType == InventTestReferenceType::RouteOpr
                           || inventQualityOrderTable.ReferenceType == InventTestReferenceType::Purch
                    exists join inventBlockingQualityOrder
                        where inventQualityOrderTable.QualityOrderId == inventBlockingQualityOrder.InventQualityOrderId
                    exists join inventBlocking
                        where inventBlocking.RecId == inventBlockingQualityOrder.InventBlocking
                           && inventBlocking.BlockingType == InventBlockingType::QualityOrder
                    exists join inventTransOrigin
                        where inventTransOrigin.InventTransId == inventBlocking.InventTransIdReceipt
                           && inventTransOrigin.RecId == _inventTrans.inventTransOrigin
                           && inventTransOrigin.ReferenceCategory == InventTransType::Blocking;

                if (inventQualityOrderTable.RecId)
                {
                    if (inventQualityOrderTable.ReferenceType == InventTestReferenceType::Purch && PurchTable::find(inventQualityOrderTable.InventRefId).ProjId)
                    {
                        canDeleteMovRefIssue = false;
                    }
                    else if (ProdTable::find(inventQualityOrderTable.InventRefId).ProjId)
                    {
                        canDeleteMovRefIssue = false;
                    }
                }
            }
        }

        return canDeleteMovRefIssue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>