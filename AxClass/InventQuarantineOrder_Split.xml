<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQuarantineOrder_Split</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventQuarantineOrder_Split   extends RunBase
{
    InventQuarantineId  inventQuarantineId;
    InventQty           splitQty;

    DialogRunbase       dialog;
    DialogField         dialogQuarantineId;
    DialogField         dialogSplitQty;

    PdsCWInventQty      cwSplitQty;
    PdsCWInventQty      cwOrigQty;
    DialogField         cwDialogSplitQty;

    Voucher             voucher;
    NumberSeq           numberSeq;

    LedgerVoucher       ledgerVoucher;

    #DEFINE.CurrentVersion(100)

    #LOCALMACRO.CurrentList
        inventQuarantineId,
        splitQty,
        cwSplitQty
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createReturnQuarantineFromInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new quarantine order.
    /// </summary>
    /// <param name="_inventTransId">
    /// A <c>InventTransId</c> record that corresponds to a sales line.
    /// </param>
    /// <param name="_origQuarantineOrder">
    /// An <c>InventQuarantine</c> table buffer.
    /// </param>
    /// <param name="_qty">
    /// An <c>InventQty</c> value.
    /// </param>
    /// <param name="_cwQty">
    /// A catch weight quantity.
    /// </param>
    /// <returns>
    /// An <c>InventQuarantineId</c> value.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// If the supplied <c>InventTrans</c> record does not point to an existing <c>SalesLine</c> record.
    /// </exception>
    private InventQuarantineId createReturnQuarantineFromInventTransId (
            InventTransId           _inventTransId, 
            InventQuarantineOrder   _origQuarantineOrder, 
            InventQty               _qty,
            PdsCWInventQty          _cwQty
        )
    {
        InventQuarantineOrder           quarantineOrder;
        InventParmQuarantineOrder       inventParmQuarantineOrder;
        if (_qty)
        {
            SalesLine returnLine = SalesLine::findInventTransId(_inventTransId, true);
            if (returnLine && returnLine.returnItem())
            {
                // Creates the new Quarantine order.
                quarantineOrder                         = _origQuarantineOrder.data();
                quarantineOrder.RecId                   = 0;
                quarantineOrder.ReturnDispositionCodeId = '';

                quarantineOrder.PdsCWQty                = _cwQty;
                quarantineOrder.PdsCWRemainQty          = _cwQty;

                quarantineOrder.Qty                     = _qty;
                quarantineOrder.RemainQty               = _qty;
                quarantineOrder.TransRefId              = returnLine.SalesId;
                quarantineOrder.InventTransIdRef        = returnLine.InventTransId;
                quarantineOrder.QuarantineId            = '';
                quarantineOrder.Status                  = InventQuarantineStatus::Created;
                quarantineOrder.insert();
                InventTransOriginId quarantineInventTransOriginId = InventTransOriginQuarantineOrder::findInventTransOriginId(quarantineOrder.DataAreaId, quarantineOrder.QuarantineId);

                //Establish hard marking between this Return order line and the new Quarantine order.
                returnLine.InventRefTransId = quarantineOrder.InventTransId;
                returnLine.InventRefId      = quarantineOrder.QuarantineId;
                returnLine.update();
                InventTransOriginId returnLineInventTransOriginId = InventTransOriginSalesLine::findInventTransOriginId(returnLine.DataAreaId, returnLine.InventTransId);
                InventTransOrigin::updateMarking(quarantineInventTransOriginId, returnLineInventTransOriginId, -quarantineOrder.Qty
                    , ''
                    , SortOrder::Ascending
                    , false
                    , null
                    , null
                    , -quarantineOrder.PdsCWQty
                    );
                InventTransOrigin::updateMarking(returnLineInventTransOriginId, quarantineInventTransOriginId, quarantineOrder.Qty
                    , ''
                    , SortOrder::Ascending
                    ,false
                    , null
                    , null
                    , quarantineOrder.PdsCWQty
                    );

                // Start the Quarantine order.
                if (_origQuarantineOrder.Status == InventQuarantineStatus::Started)
                {
                    inventParmQuarantineOrder.QuarantineId = quarantineOrder.QuarantineId;
                    inventParmQuarantineOrder.TransDate = quarantineOrder.QuarantineDate;
                    InventQuarantineUpdStartUp inventQuarantineUpdStartUp = InventQuarantineUpdStartUp::newParmBuffer(inventParmQuarantineOrder);
                    inventQuarantineUpdStartUp.run();
                }
            }
            else
            {       //The specified Return Order line could not be found. The operation is aborted.
                    throw error("@SYS120962");
            }
        }
        return quarantineOrder.QuarantineId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cwDialogSplitQtyModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the split quantity field when the CW split quantity is changed.
    /// </summary>
    /// <param name="_callerControl">
    ///    The calling form control.
    /// </param>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    protected boolean cwDialogSplitQtyModified(Object _callerControl)
    {
        if (   _callerControl
            && dialogSplitQty)
        {
            InventQuarantineOrder quarantineOrder = InventQuarantineOrder::find(inventQuarantineId);
            InventQty newSplitQty = PdsCatchWeight::inventQty(quarantineOrder.ItemId,_callerControl.realValue());
            dialogSplitQty.value(newSplitQty);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cwDialogSplitQtyValidate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the CW split quantity field.
    /// </summary>
    /// <param name="_callerControl">
    ///    The calling form control.
    /// </param>
    /// <returns>
    ///    true if the entered value is valid; otherwise, false.
    /// </returns>
    protected boolean cwDialogSplitQtyValidate(Object _callerControl)
    {
        boolean                 result = true;

        if (   _callerControl
            && dialogSplitQty)
        {
            InventQuarantineOrder quarantineOrder = InventQuarantineOrder::find(inventQuarantineId);
            PdsCWInventQty        cwNewSplitQty   = _callerControl.realValue();
            InventQty             newSplitQty     = PdsCatchWeight::inventQty(quarantineOrder.ItemId,cwNewSplitQty);
            result = this.validateSplitQuantities(quarantineOrder,newSplitQty,cwNewSplitQty);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        InventQuarantineOrder   quarantineOrder = InventQuarantineOrder::find(inventQuarantineId);
        boolean                 isCWItem = false;

        dialog = super();

        dialogQuarantineId = dialog.addField(extendedTypeStr(InventQuarantineId));
        dialogQuarantineId.value(inventQuarantineId);

        if (#PdsCatchWeightEnabled)
        {
            // Cannot allow user to switch from CW item to non-CW item or vice versa.
            dialogQuarantineId.active(false);

            isCWItem = PdsGlobal::pdsIsCWItem(quarantineOrder.ItemId);
            if (isCWItem)
            {
                DialogField cwQtyField = dialog.addField(extendedTypeStr(PdsCWInventQty), "@PDS147", "@PDS147");
                cwQtyField.value(InventQuarantineOrder::find(inventQuarantineId)
                    .PdsCWRemainQty);
                cwQtyField.active(false);
            }
        }

        DialogField qty = dialog.addField(extendedTypeStr(InventQty), "@SYS10197", "@SYS10197");
        qty.value(InventQuarantineOrder::find(inventQuarantineId).RemainQty);
        qty.active(false);

        if (isCWItem)
        {
            cwDialogSplitQty = dialog.addField(extendedTypeStr(PdsCWInventQty), "@PDS561", "@PDS561");
            cwDialogSplitQty.value(cwSplitQty);
            cwDialogSplitQty.registerOverrideMethod(
                methodStr(FormRealControl,modified),
                methodStr(InventQuarantineOrder_Split,cwDialogSplitQtyModified),
                this);
            cwDialogSplitQty.registerOverrideMethod(
                methodStr(FormRealControl,validate),
                methodStr(InventQuarantineOrder_Split,cwDialogSplitQtyValidate),
                this);
        }

        dialogSplitQty   = dialog.addField(extendedTypeStr(InventQty), "@SYS19602", "@SYS19602");
        dialogSplitQty.value(splitQty);
        dialogSplitQty.registerOverrideMethod(
            methodStr(FormRealControl,validate),
            methodStr(InventQuarantineOrder_Split,dialogSplitQtyValidate),
            this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSplitQtyValidate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the split quantity field.
    /// </summary>
    /// <param name="_callerControl">
    ///    The calling form control.
    /// </param>
    /// <returns>
    ///    true if the entered value is valid; otherwise, false.
    /// </returns>
    protected boolean dialogSplitQtyValidate(Object _callerControl)
    {
        PdsCWInventQty          cwValidateSplitQty = 0;
        InventQty               newSplitQty        = 0;
        boolean                 result             = true;

        if (dialogSplitQty)
        {
            InventQuarantineOrder quarantineOrder = InventQuarantineOrder::find(inventQuarantineId);
            newSplitQty = _callerControl.realValue();
            if (cwDialogSplitQty)
            {
                cwValidateSplitQty = cwDialogSplitQty.value();
            }

            result = this.validateSplitQuantities(quarantineOrder,newSplitQty,cwValidateSplitQty);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endQuarantineOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends a quarantine order.
    /// </summary>
    /// <param name="_quarantineOrder">
    /// A <c>QuarantineOrder</c> table buffer.
    /// </param>
    /// <param name="_qty">
    /// An <c>InventQty</c> that represents the quantity to end.
    /// </param>
    /// <param name="_cwQty">
    /// the catch weight quantity to end
    /// </param>
    /// <remarks>
    /// This is intended for internal use in quarantine order split logic. Since we're not actually ending the quarantine, quality
    /// order creation that should be triggered by ending a quarantine will be skipped.
    /// </remarks>
    private void endQuarantineOrder(
        InventQuarantineOrder _quarantineOrder, 
        InventQty _qty,
        PdsCWInventQty _cwQty)
    {
        InventParmQuarantineOrder inventParmQuarantineOrder;
        inventParmQuarantineOrder.QuarantineId = _quarantineOrder.QuarantineId;
        inventParmQuarantineOrder.TransDate    = _quarantineOrder.QuarantineDate;
        inventParmQuarantineOrder.Qty          = _qty;
        inventParmQuarantineOrder.PdsCWQty     = _cwQty;

        InventQuarantineUpdEnd inventQuarantineUpdEnd = InventQuarantineUpdEnd::newParmBuffer(inventParmQuarantineOrder);
        inventQuarantineUpdEnd.parmSkipQualityOrderCreation(true);
        inventQuarantineUpdEnd.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        splitQty            = dialogSplitQty.value();
        inventQuarantineId  = dialogQuarantineId.value();

        if (cwDialogSplitQty)
        {
            cwSplitQty      = cwDialogSplitQty.value();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        // This method will be put into the FPK model due to the changes
        // in the #CurrentList and #CurrentVersion macros.
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCWSplitQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the CWSplitQty parameter.
    /// </summary>
    /// <param name="_cwSplitQty">Value to set.</param>
    /// <returns>The cwSplitQty parameter.</returns>
    public PdsCWInventQty parmCWSplitQty(InventQty _cwSplitQty = cwSplitQty)
    {
        cwSplitQty = _cwSplitQty;
        return cwSplitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQuarantineId</Name>
				<Source><![CDATA[
    InventQuarantineId  parmInventQuarantineId(InventQuarantineId _inventQuarantineId = inventQuarantineId)
    {
        inventQuarantineId = _inventQuarantineId;
        return inventQuarantineId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitQty</Name>
				<Source><![CDATA[
    InventQty parmSplitQty(InventQty _splitQty = splitQty)
    {
        splitQty = _splitQty;
        return splitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount

        setPrefix(InventQuarantineOrder_Split::description());

        try
        {
            ttsbegin;

            if (!this.validate())
            {
                throw error("@SYS18447");
            }

            InventQuarantineOrder inventQuarantineOrder = InventQuarantineOrder::find(inventQuarantineId, true);

            if (inventQuarantineOrder.hasReturnOrderReference())
            {
                this.splitReturnOrderQuarantine(inventQuarantineOrder);
            }
            else if (inventQuarantineOrder.Status == InventQuarantineStatus::Started)
            {
                this.splitStarted(inventQuarantineOrder);
            }
            else
            {
                this.splitStandard(inventQuarantineOrder);
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitReturnOrderQuarantine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls the splitting of a quarantine order that is related to <c>ReturnOrder</c> lines.
    /// </summary>
    /// <param name="_quarantineOrder">
    /// An <c>InventQuarantineOrder</c> table buffer.
    /// </param>
    /// <remarks>
    /// The strategy to split <c>ReturnOrder</c> lines that are related to quarantine orders is to end the
    /// order in question, split the <c>ReturnOrder</c> line it points to, and then create two new
    /// quarantine orders pointing to the two <c>ReturnOrder</c> lines.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// There are not enough items with the status of ordered or registered to perform the split.
    /// </exception>
    private void splitReturnOrderQuarantine(InventQuarantineOrder _quarantineOrder)
    {
        InventTransId           origTransId = _quarantineOrder.InventTransIdRef;
        SalesLine               salesLine = SalesLine::findInventTransId(_quarantineOrder.InventTransIdRef);
        InventTransOriginId     salesInventTransOriginId = InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId, salesLine.InventTransId);
        InventTransOrigin       inventTransOrigin;
        InventTransOrigin       inventTransOriginQuarantine;
        InventTrans             inventTrans;
        InventQty               registrationQty = splitQty;
        boolean                 changeRegistration = false;
        InventQuarantineId      quarantineIdCopyOrig, quarantineIdNew;
        InventQuarantineOrder   quarantineOrder;
        boolean                 itemQuarantinControl = InventTable::modelGroupByItemId(_quarantineOrder.ItemId).QuarantineControl;
        InventTransIdSum        transIdSumSales = InventTransIdSum::newTransOriginId(salesInventTransOriginId);

        PdsCWInventQty        registrationCWQty = cwSplitQty;

        if (transIdSumSales.ordered() < splitQty)
        {
            if (transIdSumSales.ordered() + transIdSumSales.registered() < splitQty)
            {
                //There is not enough items with status Ordered or Registered to perform the split.
                throw error ("@SYS120963");
            }
            else if ((transIdSumSales.registered() + transIdSumSales.ordered() >= splitQty) && (transIdSumSales.ordered() < splitQty))
            {
                registrationQty = splitQty - transIdSumSales.ordered();

                registrationCWQty = cwSplitQty - transIdSumSales.pdsCWOrdered();

                changeRegistration = true;
            }
        }

        this.endQuarantineOrder(_quarantineOrder,_quarantineOrder.RemainQty, _quarantineOrder.PdsCWRemainQty);

        if (changeRegistration)
        {
            this.updateReturnLineRegistered(origTransId, -registrationQty, -registrationCWQty);
        }

        InventTransId newTransId = SalesLine::splitReturnLine(origTransId, -splitQty, -cwSplitQty);

        SalesLine::changeReturnOrderType(newTransId);

        if (changeRegistration)
        {
            this.updateReturnLineRegistered(newTransId, registrationQty, registrationCWQty);

            //In case the Item in question is subject for mandatory quarantine control, registration of the ReturnLine
            // created by the split in the previous section, will trigger creation of the new Quarantine order.
            select firstonly TableId from inventTransOrigin
                where inventTransOrigin.InventTransId     == newTransId
                   && inventTransOrigin.ReferenceCategory == InventTransType::Sales
                join RecId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    join RecId from inventTransOriginQuarantine
                        where inventTransOriginQuarantine.RecId == inventTrans.MarkingRefInventTransOrigin
                        join QuarantineId, InventTransId from quarantineOrder
                            where quarantineOrder.InventTransId == inventTransOriginQuarantine.InventTransId;

            quarantineIdNew = quarantineOrder.QuarantineId;
        }

        quarantineIdCopyOrig = this.createReturnQuarantineFromInventTransId(origTransId, _quarantineOrder, _quarantineOrder.RemainQty - splitQty, _quarantineOrder.PdsCWRemainQty - cwSplitQty);

        //If the new Quarantine order wasn't created during the previous registration we're creating it now.
        if (!quarantineIdNew)
        {
            quarantineIdNew = this.createReturnQuarantineFromInventTransId(newTransId, _quarantineOrder, splitQty, cwSplitQty);
        }
        else
        {
            SalesLine returnLine        = SalesLine::findInventTransId(newTransId, true);
            returnLine.InventRefTransId = quarantineOrder.InventTransId;
            returnLine.InventRefId      = quarantineOrder.QuarantineId;
            returnLine.update();
        }

                    //As part of the splitting, Quarantine order %1 has been ended.
        info(strFmt("@SYS120971", _quarantineOrder.QuarantineId));
        if (quarantineIdCopyOrig)
        {               //Quarantine order %1, with reference to Return order %2, has been created.
            info(strFmt("@SYS120972", quarantineIdCopyOrig, SalesTable::find(_quarantineOrder.TransRefId).ReturnItemNum));
        }
        if (quarantineIdNew)
        {                //Quarantine order %1, with reference to Return order %2, has been created.
            info(strFmt("@SYS120972", quarantineIdNew, SalesTable::find(_quarantineOrder.TransRefId).ReturnItemNum));
        }           //Quarantine order %1, with reference to Return order %2, has been created.
        info(strFmt("@SYS120973", _quarantineOrder.QuarantineId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitStarted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits a started quarantine order that is not related to a return order line.
    /// </summary>
    /// <param name="_quarantineOrderToSplit">The quarantine order to split.</param>
    private void splitStarted(InventQuarantineOrder _quarantineOrderToSplit)
    {
        InventQuarantineOrderSplitStarted split = InventQuarantineOrderSplitStarted::newFromParameters(_quarantineOrderToSplit, splitQty, cwSplitQty);
        split.execute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Splits a created quarantine order that is not related to a <c>ReturnOrder</c> line.
    /// </summary>
    /// <param name="_inventQuarantineOrder">
    ///    An <c>InventQuarantineOrder</c> table buffer.
    /// </param>
    private void splitStandard(InventQuarantineOrder _inventQuarantineOrder)
    {
        InventQuarantineOrder   inventQuarantineOrder = _inventQuarantineOrder;

        InventQuarantineStatus inventQuarantineStatus = inventQuarantineOrder.Status;

        inventQuarantineOrder.Qty -= splitQty;
        inventQuarantineOrder.RemainQty -= splitQty;

        inventQuarantineOrder.PdsCWQty       -= cwSplitQty;
        inventQuarantineOrder.PdsCWRemainQty -= cwSplitQty;

        if (inventQuarantineOrder.RemainQty == 0)
        {
            inventQuarantineOrder.Status = InventQuarantineStatus::Ended;
        }

        InventQuarantineOrder inventQuarantineOrderCopy = inventQuarantineOrder.data();
        inventQuarantineOrderCopy.Status = inventQuarantineStatus; // original status
        inventQuarantineOrderCopy.RecId = 0;
        inventQuarantineOrderCopy.QuarantineId = InventQuarantineOrder::numberSeq().num();
        inventQuarantineOrderCopy.Qty = splitQty;
        inventQuarantineOrderCopy.RemainQty = splitQty;

        inventQuarantineOrderCopy.PdsCWQty       = cwSplitQty;
        inventQuarantineOrderCopy.PdsCWRemainQty = cwSplitQty;

        inventQuarantineOrder.update(NoYes::No, NoYes::No);

        inventQuarantineOrderCopy.insert(NoYes::No, NoYes::No);
        InventTransOriginId copyInventTransOriginId = InventTransOriginQuarantineOrder::findInventTransOriginId(inventQuarantineOrderCopy.DataAreaId, inventQuarantineOrderCopy.QuarantineId);

        InventTransOrigin::deleteMarking(copyInventTransOriginId, copyInventTransOriginId, -splitQty,  false, null, null,false,false, -cwSplitQty);  // remove marking done automatic
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        #LOCALMACRO.CurrentListV1
            inventQuarantineId,
            splitQty
        #ENDMACRO

        Integer     version      = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;

            case 1 :
                [version,#CurrentListV1] = packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReturnLineRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the registered quantity of a <c>ReturnOrder</c> line.
    /// </summary>
    /// <param name="_inventTransId">
    /// An <c>InventTransId</c> .
    /// </param>
    /// <param name="_qty">
    /// An <c>InventQty</c> .
    /// </param>
    /// <param name="_cwQty">
    /// A catch weight quantity.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The supplied <c>InventTransId</c> does not associate to a <c>SalesLine</c> record.
    /// </exception>
    private void updateReturnLineRegistered(
        InventTransId _inventTransId,
        InventQty _qty,
        PdsCWInventQty _cwQty)
    {
        InventDimParm          inventDimParm;

        SalesLine salesLine = SalesLine::findInventTransId(_inventTransId, true);

        if (salesLine && salesLine.returnItem())
        {
            InventMovement movement = InventMovement::construct(salesLine);
            InventDim inventDim = InventQuarantineOrder::find(inventQuarantineId).inventDim();
            InventDim inventDimArriveOrRegistration = InventQuarantineOrder::inventDimArriveOrRegistration(inventDim, inventDim, salesLine.ItemId);
            inventDimParm.initFromInventDim(inventDim);

            // If _qty is signed negative, the number of registered items on the Return line in question will be decreased  -  and vice versa.
            InventUpd_Registered inventUpd_Registered = InventUpd_Registered::newParameters(
                                                         movement,
                                                         inventDimArriveOrRegistration,
                                                         inventDimParm,
                                                         inventDimArriveOrRegistration,
                                                         inventDimParm,
                                                         _qty,
                                                         _cwQty);

            inventUpd_Registered.updateNow();
        }
        else
        {
            //The specified Return Order line could not be found. The operation is aborted.
            throw error("@SYS120962");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object calledFrom = null)
    {
        InventQuarantineOrder inventQuarantineOrder = InventQuarantineOrder::find(inventQuarantineId);

        if (!inventQuarantineOrder)
        {
            return checkFailed(strFmt("@SYS58441", inventQuarantineId));
        }

        switch (inventQuarantineOrder.Status)
        {
            case InventQuarantineStatus::ReportedFinished:
            case InventQuarantineStatus::Ended:
                return checkFailed(strFmt("@SYS58714", inventQuarantineId));
        }

        return this.validateSplitQuantities(inventQuarantineOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSplitQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the split quantity values.
    /// </summary>
    /// <param name="_inventQuarantineOrder">
    ///    The <c>InventQuarantineOrder</c> record to be split.
    /// </param>
    /// <param name="_splitQty">
    ///    The split quantity in inventory unit.
    /// </param>
    /// <param name="_cwSplitQty">
    ///    The catch weight split quantity in CW unit.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    protected boolean validateSplitQuantities(
        InventQuarantineOrder _inventQuarantineOrder = InventQuarantineOrder::find(inventQuarantineId),
        InventQty             _splitQty              = splitQty,
        PdsCWInventQty        _cwSplitQty            = cwSplitQty)
    {
        if (!PdsCatchWeight::validateInventQty(_inventQuarantineOrder.ItemId,_splitQty,_cwSplitQty))
        {
            return false;
        }

        if (!PdsCatchWeight::validateInventQty(_inventQuarantineOrder.ItemId,
                                               _inventQuarantineOrder.Qty - _splitQty,
                                               _inventQuarantineOrder.PdsCWQty - _cwSplitQty))
        {
            return false;
        }

        if (_splitQty * _inventQuarantineOrder.RemainQty < 0)
        {
            return checkFailed("@SYS19603");
        }

        if (_splitQty > _inventQuarantineOrder.RemainQty || _splitQty <= 0)
        {
            return checkFailed("@SYS13895");
        }

        if (_splitQty == _inventQuarantineOrder.RemainQty && _splitQty == _inventQuarantineOrder.Qty)
        {
            return checkFailed("@SYS13895");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventQuarantineOrder_Split construct()
    {
        return new InventQuarantineOrder_Split();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS10133";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        InventQuarantineOrder_Split     inventQuarantineOrder_Split;

        if (args && args.record())
        {
            switch (args.record().TableId)
            {
                case (tableNum(InventQuarantineOrder)) :
                    InventQuarantineOrder inventQuarantineOrder = args.record();
                    inventQuarantineOrder_Split = InventQuarantineOrder_Split::construct();

                    inventQuarantineOrder_Split.getLast();

                    inventQuarantineOrder_Split.parmInventQuarantineId(inventQuarantineOrder.QuarantineId);

                    if (PdsGlobal::pdsIsCWItem(inventQuarantineOrder.ItemId))
                    {
                        inventQuarantineOrder_Split.parmCWSplitQty(1
                            * (inventQuarantineOrder.PdsCWRemainQty >= 0
                                ? 1 : -1));
                        inventQuarantineOrder_Split.parmSplitQty(
                            PdsCatchWeight::inventQty(inventQuarantineOrder.ItemId,
                                inventQuarantineOrder_Split.parmCWSplitQty()));
                    }
                    else
                    {
                        inventQuarantineOrder_Split.parmSplitQty(1 * (inventQuarantineOrder.RemainQty >= 0 ? 1 : -1));
                    }

                    if (!inventQuarantineOrder_Split.prompt())
                        return;

                    inventQuarantineOrder_Split.runOperation();

                    Object callerForm = args.caller();
                    callerForm.doResearch();

                    break;

                default:
                    throw error(strFmt("@SYS19306",funcName()));
            }
        }
        else
        {
            inventQuarantineOrder_Split = InventQuarantineOrder_Split::construct();
            if (!inventQuarantineOrder_Split.prompt())
                return;

            inventQuarantineOrder_Split.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>