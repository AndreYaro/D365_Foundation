<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchComplInvoiceCalcTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchComplInvoiceCalcTax</c> class calculates tax amount and provide data to tax engine
/// for purchase complementary invoices.
/// </summary>
class PurchComplInvoiceCalcTax extends ComplementaryInvoiceCalcTax
{
    PurchComplementaryInvoiceHeader complInvHeader;
    PurchComplementaryInvoiceLine   complInvLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>additionalICMSAmount</Name>
				<Source><![CDATA[
    public TaxAmount additionalICMSAmount()
    {
        return complInvLine.AdditionalICMSAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalIPIAmount</Name>
				<Source><![CDATA[
    public TaxAmount additionalIPIAmount()
    {
        return complInvLine.AdditionalIPIAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAmount</Name>
				<Source><![CDATA[
    AmountCur  baseAmount()
    {
        return complInvLine.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    public TaxAmountCur calcTax(AmountCur _balance)
    {
        TaxAmountCur ret;

        ret = super(_balance);

        return -ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>complementaryType</Name>
				<Source><![CDATA[
    public InvoiceComplementaryType_BR complementaryType()
    {
        return complInvHeader.ComplementaryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return complInvHeader.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return complInvLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public Name description()
    {
        return complInvLine.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    public date documentDate()
    {
        return complInvHeader.DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return complInvHeader.exchRate(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return complInvHeader.exchRateSecondary(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    void  initCursor()
    {
        Query     query = new Query();

        query.addDataSource(tablenum(PurchComplementaryInvoiceLine));
        query.dataSourceTable(tablenum(PurchComplementaryInvoiceLine)).addRange(fieldnum(PurchComplementaryInvoiceLine, PurchComplementaryInvoiceHeader)).value(queryValue(complInvHeader.RecId));

        queryTransact = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    TransDate invoiceDate()
    {
        return complInvHeader.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucher</Name>
				<Source><![CDATA[
    public Voucher ledgerVoucher()
    {
        return complInvHeader.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new <c>PurchComplInvoiceCalcTax</c> object for a given <c>PurchComplementaryInvoiceHeader</c> record.
    /// </summary>
    /// <param name="_header">
    /// <c>PurchComplementaryInvoiceHeader</c> record for which the tax will be calculated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(PurchComplementaryInvoiceHeader _header)
    {
        complInvHeader = _header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        complInvLine = null;

        while (queryTransact.next())
        {
            complInvLine = this.queryGet(queryTransact);
            if (complInvLine)
                break;
        }
        return complInvLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccount</Name>
				<Source><![CDATA[
    LedgerDimensionAccount operationAccount()
    {
        return complInvLine.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPosting</Name>
				<Source><![CDATA[
    LedgerPostingType operationPosting()
    {
        LedgerPostingType ledgerPostingType;
        InventModelGroup  inventModelGroup;

        inventModelGroup = InventTable::find(complInvLine.ItemId).modelGroup();

        if (inventModelGroup.PostOnhandFinancial)
        {
            ledgerPostingType = LedgerPostingType::PurchReceipt;
        }
        else if (complInvLine.isStocked)
        {
            ledgerPostingType = LedgerPostingType::PurchConsump;
        }
        else if (complInvLine.AssetId)
        {
            ledgerPostingType = LedgerPostingType::FixedAssetsDebit;
        }
        else
        {
            ledgerPostingType = LedgerPostingType::PurchExpense;
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(LedgerPostingController _ledgerPostingController)
    {
        TaxPost taxPost;

        taxPost = TaxPost::newForSourceType(TaxSourceType::ComplementaryInvoice, this, true);
        taxPost.updateAndPost(_ledgerPostingController);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    Common queryGet(QueryRun _queryRun)
    {
        PurchComplementaryInvoiceLine queryComplLine;

        if (_queryRun.changed(tablenum(PurchComplementaryInvoiceLine)))
            queryComplLine = _queryRun.get(tablenum(PurchComplementaryInvoiceLine));

        return queryComplLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recID</Name>
				<Source><![CDATA[
    recId  recID()
    {
        return complInvHeader.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    tableId  tableId()
    {
        return complInvHeader.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxationOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the taxation origin of the current complementary invoice line.
    /// </summary>
    /// <returns>
    /// A taxation origin of the item that is associated with the line of the complementary invoice
    /// </returns>
    /// <remarks>
    /// The taxation origin will be retrieved from the invent table
    /// </remarks>
    public FITaxationOrigin_BR taxationOrigin()
    {
        return InventTable::find(complInvLine.ItemId).TaxationOrigin_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxModuleType</Name>
				<Source><![CDATA[
    public TaxModuleType taxModuleType()
    {
        return TaxModuleType::PurchInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    TaxGroup transTaxGroup()
    {
        return complInvLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    TaxItemGroup transTaxItemGroup()
    {
        return complInvLine.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAndConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the operation is for a final user or not.
    /// </summary>
    /// <returns>True if is a final user use otherwise false</returns>
    public boolean useAndConsumption()
    {
        return complInvHeader.VendFinalUser;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>