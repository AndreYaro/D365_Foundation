<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkTemplateTableForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkTemplateTableForm</c> class contains the business logic of the <c>WhsWorkTemplateTable</c> form.
/// </summary>
public class WhsWorkTemplateTableForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buttonCopyDialog</Name>
				<Source><![CDATA[
	/// <summary>
	/// Handles when Copy button is clicked for a work template record.
	/// </summary>
	/// <param name="_whsWorkTemplateTable">
	/// The work template record.
	/// </param>
	/// <returns>
	/// True when the template code is a new code, false otherwise.
	/// </returns>
    public boolean buttonCopyDialog(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        Dialog                  dlg;
        DialogGroup             dlgGroup;
        DialogField             dlgField;
        WHSWorkTemplateCode     newCode;
        boolean                 executeQuery = false;
        WHSWorkTemplateTable    whsWorkTemplateTable = _whsWorkTemplateTable;

        dlg = new Dialog("@WAX1352");

        dlgGroup = dlg.addGroup("@WAX291");

        dlgField = dlg.addField(extendedTypeStr(WHSLocDirName), "@WAX291");

        if (dlg.run())
        {
            newCode = dlgField.value();
        }

        if (newCode && !WHSWorkTemplateTable::exist(newCode, whsWorkTemplateTable.WorkTransType))
        {
            WHSWorkTemplateTable::copyWorkTemplate(whsWorkTemplateTable.WorkTransType,
                                                   whsWorkTemplateTable.WorkTemplateCode,
                                                   newCode);
            executeQuery = true;
        }

        return executeQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reorderWorkTemplateLines</Name>
				<Source><![CDATA[
	/// <summary>
	/// Reorder the work template line numbers when the last selected row is deleted
	/// </summary>
	/// <param name="_workTemplateLinesDS">
	/// Form data source containing the selected work template lines.
	/// </param>
	/// <param name="_workTemplateCode">
	/// Work template code of the deleted line.
	/// </param>
	/// <param name="_workTransType">
	/// Work transaction type of the deleted line.
	/// </param>
	/// <param name="_selectedRows">
	/// Selected row number.
	/// </param>
    public void reorderWorkTemplateLines(
		FormDataSource		_workTemplateLinesDS,
        WHSWorkTemplateCode	_workTemplateCode,
        WHSWorkTransType    _workTransType,
        int                 _selectedRows)
    {
        // Reorder the work template line numbers when the last selected row is deleted
        if (_selectedRows <= 1)
        {
            WHSWorkTemplateLine::reorderWorkTemplateLines(_workTemplateCode, _workTransType);
            _workTemplateLinesDS.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineNumDownLine</Name>
				<Source><![CDATA[
    [SysObsolete('Use WHSSequenceNumberMoverForm for Move up/down buttons logic', false, 13\09\2022)]
    public void setLineNumDownLine(FormDataSource _workTemplateLineDS)
    {
        WHSWorkTemplateLine workTemplateLineLocal;

        workTemplateLineLocal = _workTemplateLineDS.cursor();
        workTemplateLineLocal = workTemplateLineLocal.sortingNoArrange(false);

        _workTemplateLineDS.executeQuery();
        _workTemplateLineDS.positionToRecord(workTemplateLineLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineNumUpLine</Name>
				<Source><![CDATA[
    [SysObsolete('Use WHSSequenceNumberMoverForm for Move up/down buttons logic', false, 13\09\2022)]
    public void setLineNumUpLine(FormDataSource _workTemplateLineDS)
    {
        WHSWorkTemplateLine workTemplateLineLocal;

        workTemplateLineLocal = _workTemplateLineDS.cursor();
        workTemplateLineLocal = workTemplateLineLocal.sortingNoArrange(true);

        _workTemplateLineDS.executeQuery();
        _workTemplateLineDS.positionToRecord(workTemplateLineLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMaxLineNum</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the maximum line number set to a line of a work template.
	/// </summary>
	/// <param name="_whsWorkTemplateTable">
	/// The work template header.
	/// </param>
	/// <returns>
	/// The maximum line number.
	/// </returns>
    public LineNum setMaxLineNum(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        return WHSWorkTemplateTable::getMaxLineNum(_whsWorkTemplateTable.WorkTemplateCode, _whsWorkTemplateTable.WorkTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRun</Name>
				<Source><![CDATA[
	/// <summary>
	/// Sets work template header query run depending on the work transaction type.
	/// </summary>
	/// <param name="_whsWorkTemplateTable">
	/// The Work template header.
	/// </param>
	/// <param name="_workTransType">
	/// Selected work transaction type.
	/// </param>
	/// <exception cref="Exception::Error">
	/// Invalid work item area.
	/// </exception>
    [SysObsolete('Method was moved to WHSWorkTemplateTable.initQuery()', false, 19\08\2022)]
	public void setQueryRun(
        WHSWorkTemplateTable _whsWorkTemplateTable,
        WHSWorkTransType     _workTransType)
    {
        // tempType is used for backward compatibility.
        // Initially WHSWorkTemplateTable.initQuery() was defined here and it accepted _workTransType as a parameter, which was used to build the default query.
        // And it did not make much sense as the callers have always been passing the WorkTransType of the table itself, meaning we could just use it directly.
        // And we did, now initQuery() method uses whsWorkTemplateTable.WorkTransType internally.
        // But for backward compatibility we need to keep the logic in case customers use it somehow else.
        WHSWorkTransType tempType = _whsWorkTemplateTable.WorkTransType;
        _whsWorkTemplateTable.WorkTransType = _workTransType;
        _whsWorkTemplateTable.initQuery();
        _whsWorkTemplateTable.WorkTransType = tempType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTemplateTable</Name>
				<Source><![CDATA[
	/// <summary>
	/// Write work template record to database.
	/// </summary>
	/// <param name="_whsWorkTemplateTable">
	/// The work template header record.
	/// </param>
    public void writeTemplateTable(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        WHSWorkTemplateTable whsWorkTemplateTable = _whsWorkTemplateTable;

        whsWorkTemplateTable.validateLines();
        whsWorkTemplateTable.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldChangeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the query for the work template should be changed, before updating it.
    /// </summary>
    /// <param name="_whsWorkTemplateTable">
    /// Work template for which the query is being changed.
    /// </param>
    /// <param name="_workTransTypeSelect">
    /// Work order type for the template, as a string.
    /// </param>
    /// <param name="_queryRun">
    /// The new query.
    /// </param>
    /// <returns>
    /// True if the user confirms that the query can be changed; false otherwise.
    /// </returns>
    public boolean shouldChangeQuery(
        WHSWorkTemplateTable _whsWorkTemplateTable,
        str                  _workTransTypeSelect,
        QueryRun             _queryRun)
    {
        if (!Box::yesNo("@WAX1157", DialogButton::No, "@WAX1158"))
        {
            return false;
        }

        if (!this.validateMandatoryGroupingFieldsPresent(_whsWorkTemplateTable, _queryRun))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMandatoryGroupingFieldsPresent</Name>
				<Source><![CDATA[
    private boolean validateMandatoryGroupingFieldsPresent(WHSWorkTemplateTable _whsWorkTemplateTable, queryRun _queryRun)
    {
        Map               mandatoryGroupingFields          = _whsWorkTemplateTable.getMandatoryGroupingFields();
        int               numberOfSortingFieldsInQuery     =_queryRun.query().orderByFieldCount();
        MapEnumerator     me                               = mandatoryGroupingFields.getEnumerator();
        int               counter;
        QueryOrderByField qobf;
        boolean           fieldExists;
        container         keyCon;

        while (me.moveNext())
        {
            fieldExists = false;
            keyCon = me.currentKey();
            for (counter = 1; counter <=  numberOfSortingFieldsInQuery; counter++)
            {
                qobf = _queryRun.query().orderByField(counter);

                if (qobf && (keyCon == [qobf.dataSource().table(), qobf.fieldID()]))
                {
                    fieldExists = true;
                    break;
                }
            }

            if (!fieldExists)
            {
                if (!Box::confirm(strFmt("%1 %2", me.currentValue(), "@SYP4881950")))
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>