<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmEmplOutlookSetupWizard</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]
public class SmmEmplOutlookSetupWizard extends SysWizard
{
    public const int StartPageTabIndex = 1;
    public const int UserMappingTabIndex = 2;
    public const int OutlookSyncTabIndex = 3;
    public const int EndTabIndex = 4;

    Password    exchangePassword;
    Email       exchangeEmail;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>back</Name>
				<Source><![CDATA[
    public void back()
    {
        super();

        if (!formRun.prevPageOK())
        {
            this.back();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtons</Name>
				<Source><![CDATA[
    protected void enableButtons(boolean _setFocus = false)
    {
        super(_setFocus);
        backButton.saveRecord(false);
        nextButton.saveRecord(false);
        cancelButton.saveRecord(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    public FormName formName()
    {
        return formstr(SmmEmplOutlookSetupWizard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formRun</Name>
				<Source><![CDATA[
    public FormRun formRun()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public void next()
    {
        super();

        if (!formRun.nextPageOK())
        {
            this.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTabsToSkip</Name>
				<Source><![CDATA[
    public void setTabsToSkip(boolean _skip)
    {
        skipTab[OutlookSyncTabIndex]   = _skip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupNavigation</Name>
				<Source><![CDATA[
    public void setupNavigation()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateServerAndEmailSettings</Name>
				<Source><![CDATA[
    public boolean validateServerAndEmailSettings()
    {
        Microsoft.Dynamics.AX.ExchangeIntegration.Connection                exchangeConnection;
        boolean                                                             success = false;
        OutlookUserSetup                                                    outlookUserSetup;
        URL                                                                 exchangeUrlToLogin;
        OutlookSyncParameters                                               outlookSyncParameters;

        select firstonly ExchangeServerUrl from outlookUserSetup where outlookUserSetup.UserId == curUserId();

        if (outlookUserSetup.ExchangeServerUrl)
        {
            exchangeUrlToLogin = outlookUserSetup.ExchangeServerUrl;
        }
        else
        {
            select ExchangeServerUrl from outlookSyncParameters;
            exchangeUrlToLogin = outlookSyncParameters.ExchangeServerUrl;
        }

        exchangeConnection = new Microsoft.Dynamics.AX.ExchangeIntegration.Connection(this.parmExchangeEmail());
        exchangeConnection.setServiceUrl(exchangeUrlToLogin);

        success = exchangeConnection.ewsLogon();

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        // Employee/Outlook setup
        return "@SYS80670";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        smmEmplOutlookSetupWizard wizard = new smmEmplOutlookSetupWizard();

        if (wizard.prompt())
        {
            wizard.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeEmail</Name>
				<Source><![CDATA[
    public Email parmExchangeEmail(Email _exchangeEmail = exchangeEmail)
    {
        exchangeEmail = _exchangeEmail;
        return exchangeEmail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangePassword</Name>
				<Source><![CDATA[
    public Password parmExchangePassword(Password _exchangePassword = exchangePassword)
    {
        exchangePassword = _exchangePassword;
        return exchangePassword;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>