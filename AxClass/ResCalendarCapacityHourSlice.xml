<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResCalendarCapacityHourSlice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents an hour slice of daily capacity.
/// </summary>
class ResCalendarCapacityHourSlice
{
    #timeconstants

    const int secondsPerMinute = #secondsPerMinute;
    const int secondsPerHour = #secondsPerHour;

    int hour;
    TimeOfDay start;
    TimeOfDay end;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ResCalendarCapacityHourSlice construct()
    {
        return new ResCalendarCapacityHourSlice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ToString</Name>
				<Source><![CDATA[
    public str ToString()
    {
        return System.String::Format('{0:d2}:{1:d2}-{2:d2}:{3:d}', hour, start div secondsPerMinute, end div secondsPerMinute, this.getCapacityValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStart</Name>
				<Source><![CDATA[
    public TimeOfDay parmStart(Seconds _start = start)
    {
        start = _start;
        return start;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnd</Name>
				<Source><![CDATA[
    public TimeOfDay parmEnd(Seconds _end = end)
    {
        end = _end;
        return end;
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalize</Name>
				<Source><![CDATA[
    public ResCalendarCapacityHourSlice normalize()
    {
        this.parmEnd(this.getCapacityValue());
        this.parmStart(0);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds capacity to current slice.
    /// </summary>
    /// <param name = "_other">The capacity slice that holds value to be added.</param>
    /// <returns>Current slice.</returns>
    public ResCalendarCapacityHourSlice addCapacity(ResCalendarCapacityHourSlice _other)
    {
        var result = this;

        result.parmStart(this.parmStart() + _other.parmStart());
        result.parmEnd(this.parmEnd() + _other.parmEnd());

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>substractCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Substracts capacity from current slice.
    /// </summary>
    /// <param name = "_other">The capacity slice that holds value to be substracted.</param>
    /// <returns>Current slice.</returns>
    public ResCalendarCapacityHourSlice substractCapacity(ResCalendarCapacityHourSlice _other)
    {
        var result = this;

        result.parmStart(this.parmStart() - _other.parmStart());
        result.parmEnd(this.parmEnd() - _other.parmEnd());

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCapacityValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Capacity value defined by current slice.
    /// </summary>
    /// <returns>Capacity value of the current slice.</returns>
    public Seconds getCapacityValue()
    {
        return this.parmEnd() - this.parmStart();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHour</Name>
				<Source><![CDATA[
    public int parmHour(int _hour = hour)
    {
        hour = _hour;
        return hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Start time in seconds.
    /// </summary>
    /// <returns>Start time of th current slice.</returns>
    public TimeOfDay getStartTime()
    {
        return this.getHourTime() + start;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// End time in seconds.
    /// </summary>
    /// <returns>End time of the current slice.</returns>
    public TimeOfDay getEndTime()
    {
        return this.getHourTime() + end;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHourTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hour time in seconds.
    /// </summary>
    /// <returns>Hour time that the current capacity slice falls into.</returns>
    public TimeOfDay getHourTime()
    {
        return hour * secondsPerHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSet</Name>
				<Source><![CDATA[
    public static Set newSet()
    {
        return new Set(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Equals</Name>
				<Source><![CDATA[
    public System.Boolean Equals(System.Object obj)
    {
        System.Boolean result = false;

        if (obj && (this.GetType().Equals(obj.GetType())))
        {
            ResCalendarCapacityHourSlice slice = obj;

            result = (this.hour == slice.hour
                        && this.start == slice.start
                            && this.end == slice.end);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetHashCode</Name>
				<Source><![CDATA[
    public System.Int32 GetHashCode()
    {
        int hashCode = 17;

        hashCode = 251 * hashCode + this.hour;
        hashCode = 251 * hashCode + this.start;
        hashCode = 251 * hashCode + this.end;

        return hashCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
