<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchaseLineAmountsCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchaseLineAmountsCalculate</c> class extends the <c>TradeLineAmountsCalculate</c> class
/// and calculates ordered, invoiced, and invoice remaining amounts for a purchase order in transaction
/// currency amount.
/// </summary>
public class PurchaseLineAmountsCalculate extends TradeLineAmountsCalculate
{
    PurchId purchId;
    Amount  totalInvoiceRemaining;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmTotalInvoiceRemaining</Name>
				<Source><![CDATA[
        public Amount parmTotalInvoiceRemaining(Amount _totalInvoiceRemaining = totalInvoiceRemaining)
    {
        totalInvoiceRemaining = _totalInvoiceRemaining;

        return totalInvoiceRemaining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and stores the ordered, invoiced, and invoice remaining amounts for a purchase order.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase order ID for which the amounts have to be calculated.
    /// </param>
    public void populateAmounts(PurchId _purchId)
    {
        SourceDocumentBalanceProvider           balanceProvider;

        purchId               = _purchId;
        totalInvoiceRemaining = 0;

        if (_purchId)
        {
            super(_purchId);

            balanceProvider = SourceDocumentBalanceProvider::newFromSourceDocumentImplementation(PurchTable::find(_purchId));
            balanceProvider.initializeBalance();

            totalInvoiceRemaining  = balanceProvider.parmTotalBalance();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>