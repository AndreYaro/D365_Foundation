<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookDataCalc_Sales_Export_Cancel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class BookDataCalc_Sales_Export_Cancel_RU extends BookDataCalc_Sales_Export_RU implements BatchRetryable
{
    SalesBookVATProcessLogTable_RU salesBookVATProcessLogTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>begin</Name>
				<Source><![CDATA[
        protected void begin()
    {
        // there is no super() call
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineData</Name>
				<Source><![CDATA[
        protected void calcLineData()
    {
        SalesBookVATProcessLogTrans_RU          logTrans;
        SalesBookVATProcessLogTransOper_RU      logTransOper;
        TmpSalesBookVATProcessLogTrans_RU       tmpLogTrans = salesPurchBookData;
        BookStructVATAmounts_RU                 settledAmounts;
        BookStructSmallVATAmounts_RU            operSettledAmounts;
        recId                                   currentLogTransRecId;
        Map                                     mapOperSettledAmounts = new Map(Types::Container, Types::Class);
        container                               operationKey = [logTransOper.RefRecId, logTransOper.TaxCode, logTransOper.DefaultDimension,
                                                    logTransOper.InventTransId, logTransOper.RestoringType];

        while select sum(AmountLiableToVAT), sum(TaxAmount) from logTransOper
            group by RefRecId, TaxCode, DefaultDimension, InventTransId, RestoringType
            where logTransOper.LogTableRefRecId  == salesBookVATProcessLogTable.RecId &&
                  logTransOper.CanceledRefRecId  == 0                                 &&
                  logTransOper.Correct           == NoYes::No                         &&
                  logTransOper.Blocked           == NoYes::No
        {
            if (mapOperSettledAmounts.exists(operationKey))
            {
                operSettledAmounts =  mapOperSettledAmounts.lookup(operationKey);
            }
            else
            {
                operSettledAmounts =  new BookStructSmallVATAmounts_RU();
            }
            operSettledAmounts.addAmounts(logTransOper.amountInclVAT(), logTransOper.AmountLiableToVAT, logTransOper.TaxAmount);
            mapOperSettledAmounts.insert(operationKey, operSettledAmounts);
        }

        while select logTransOper
            order by RefRecId
            where logTransOper.LogTableRefRecId  == salesBookVATProcessLogTable.RecId &&
                  logTransOper.CanceledRefRecId  == 0                                 &&
                  logTransOper.Correct           == NoYes::No                         &&
                  logTransOper.Blocked           == NoYes::No
            join logTrans
                where logTrans.RecId    == logTransOper.RefRecId &&
                      logTrans.Reversed == NoYes::No
        {
            if (logTrans.RecId != currentLogTransRecId)
            {
                currentLogTransRecId = logTrans.RecId;

                progress.setText(strFmt('%1 %2, %3 %4', "@SYS302",
                                        logTrans.AccountNum,
                                        "@GLS104802",
                                        logTrans.FactureExternalId));

                settledAmounts = SalesBookVATProcessLogTrans_RU::getLogAmounts(logTrans.RecId, salesBookVATProcessLogTable.RecId, false, false);  // not blocked & not canceled
                tmpLogTrans.clear();
                tmpLogTrans.initFromSBookVATProcessLogTrans(logTrans);
                tmpLogTrans.initFromSalesBookVATProcessLogTable(salesBookVATProcessLogTable);
                tmpLogTrans.SettledAmounts = settledAmounts.pack();
                tmpLogTrans.insert();
            }

            operSettledAmounts = mapOperSettledAmounts.lookup(operationKey);

            tmpProcessLogTransOper.clear();
            tmpProcessLogTransOper.initFromSBookVATProcessLogTransOper(logTransOper);
            tmpProcessLogTransOper.initFromSalesBookVATProcessLogTable(salesBookVATProcessLogTable);
            tmpProcessLogTransOper.initFromTmpSalesBookVATProcessLogTrans(tmpLogTrans);
            tmpProcessLogTransOper.SettledAmounts = operSettledAmounts.pack();
            tmpProcessLogTransOper.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
        public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
        protected void end()
    {
        // there is no super() call
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchNextRecord</Name>
				<Source><![CDATA[
        protected boolean fetchNextRecord()
    {
        return recordSortedList.next(salesBookVATProcessLogTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInfologPrefix</Name>
				<Source><![CDATA[
        protected InfologText getInfologPrefix()
    {
        return BookDataCalc_Sales_Export_Cancel_RU::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        public boolean init()
    {
        TmpSalesBookVATProcessLogTrans_RU logTrans;

        processMode = SalesBookVATProcessCancelType_RU::Cancel;

        this.initRecordSortedList();

        salesPurchBookData = logTrans;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedList</Name>
				<Source><![CDATA[
        protected void initRecordSortedList()
    {
        SalesBookVATProcessLogTable_RU      localLogTable;
        SalesBookVATProcessLogTrans_RU      localLogTrans;
        SalesBookVATProcessLogTransOper_RU  localLogTransOper;

        recordSortedList = new RecordSortedList(tableNum(SalesBookVATProcessLogTable_RU));

        recordSortedList.sortOrder(fieldNum(SalesBookVATProcessLogTable_RU, TransDate),
                                   fieldNum(SalesBookVATProcessLogTable_RU, Voucher));

        while select localLogTable
            where localLogTable.TransDate  >= fromDate &&
                  localLogTable.TransDate  <= toDate   &&
                  localLogTable.ActionType == SalesBookVATProcessCancelType_RU::Process
            exists join localLogTransOper
                where localLogTransOper.LogTableRefRecId  == localLogTable.RecId &&
                      localLogTransOper.CanceledRefRecId  == 0                   &&
                      localLogTransOper.Correct           == NoYes::No
            exists join localLogTrans
                where localLogTrans.RecId    == localLogTransOper.RefRecId &&
                      localLogTrans.Reversed == NoYes::No
        {
            recordSortedList.ins(localLogTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInfologPrefix</Name>
				<Source><![CDATA[
        protected void setInfologPrefix()
    {
        setPrefix(BookDataCalc_Sales_Export_Cancel_RU::description());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        boolean ret;

        ret = super(_packedClass);

        bookTableMode = false;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        public static ClassDescription description()
    {
        return "@GLS112978";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>