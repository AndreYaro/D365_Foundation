<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHandAggregatedViewBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventOnHandAggregatedViewBuilder</c> class provides reusable functionality for building SQL views for representing inventory on-hand data.
/// </summary>
public abstract class InventOnHandAggregatedViewBuilder extends ApplicationSQLObjects
{
    protected const str InventReserveSubQueryAlias = 'INVENTRESERVES';
    protected const str CalculationsSubQueryAlias = 'CALCULATIONS';

    private Map inventoryDimensionsSourceToTargetFieldsMap = new Map(Types::String, Types::String);
    private Map inventoryDimensionsSourceToInventDimFieldsMap = new Map(Types::String, Types::Integer);
    private Map reservationHierarchySourceToInventDimFieldsMap = new Map(Types::String, Types::Integer);

    private SysDictTable inventDimTableDictionary;
    private SysDictTable inventReserveTableDictionary;

    private FieldName inventReserveItemId;
    private FieldName inventReservePartition;
    private FieldName inventReserveDataAreaId;
    private FieldName inventReserveInventDimIdFieldName;

    private const str ReservedPhysicalCalculatedFieldAlias = 'RESERVPHYSICAL';
    private const str ReservedOrderedCalculatedFieldAlias = 'RESERVORDERED';
    private const str AvailableOrderedCalculatedFieldAlias = 'AVAILORDERED';
    private const str AvailablePhysicalCalculatedFieldAlias = 'AVAILPHYSICAL';
    private const str CoalesceSumPattern = 'COALESCE(SUM(%1), 0)';
    private const str Equals = ' = ';
    private const str And = ' AND ';
    private const str Or = ' OR ';
    private const str AsStatement = ' AS ';
    private const str WhereStatement = ' WHERE ';
    private const str SelectStatement = ' SELECT ';
    private const str OrderedQuantityFormat = '%1 + %2 - %3';

    private str reservedPhysicalCalculatedFullFieldAlias;
    private str reservedOrderedCalculatedFullFieldAlias;
    private str availableOrderedCalculatedFullFieldAlias;
    private str availablePhysicalCalculatedFullFieldAlias;
    private str orderedQuantityCalculateExpression;
    private str orderedQuantityExpression;

    private boolean isCWConfigurationKeyEnabled;
    private boolean isWHSCWConfigurationkeyEnabled;
    private const str CWReservedPhysicalCalculatedFieldAlias = 'CWRESERVPHYSICAL';
    private const str CWReservedOrderedCalculatedFieldAlias = 'CWRESERVORDERED';
    private const str CWAvailableOrderedCalculatedFieldAlias = 'CWAVAILORDERED';
    private const str CWAvailablePhysicalCalculatedFieldAlias = 'CWAVAILPHYSICAL';

    private str cwReservedPhysicalCalculatedFullFieldAlias;
    private str cwReservedOrderedCalculatedFullFieldAlias;
    private str cwAvailableOrderedCalculatedFullFieldAlias;
    private str cwAvailablePhysicalCalculatedFullFieldAlias;
    private str cwOrderedQuantityCalculateExpression;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createViews</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recreates the view.
    /// </summary>
    protected boolean createViews()
    {
        this.dropView(this.parmViewName());

        var logger = InventInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        var activity = logger.activity(methodStr(InventOnHandAggregatedViewBuilder, createViews));
        using (var activityContext = logger.activityContext(activity))
        {
            this.logExtensionInfo(activityContext);
            return this.executeSqlStatement(this.createViewSqlStmt());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventDimensionMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a set of metadata related to an inventory dimension.
    /// </summary>
    /// <param name = "_asFieldName">The target view field name.</param>
    /// <param name = "_sourceFieldName">The source view field name.</param>
    /// <param name = "_inventDimFieldId">The dimension field Id.</param>
    /// <param name = "_isPartOfReservationHierarchy">true if a field is a reservation hierarchy dimension field; otherwise, false.</param>
    protected void addInventDimensionMetadata(
        FieldName _asFieldName,
        FieldName _sourceFieldName,
        FieldId _inventDimFieldId,
        boolean _isPartOfReservationHierarchy = false)
    {
        inventoryDimensionsSourceToTargetFieldsMap.insert(_sourceFieldName, _asFieldName);

        inventoryDimensionsSourceToInventDimFieldsMap.insert(_sourceFieldName, _inventDimFieldId);

        if (_isPartOfReservationHierarchy)
        {
            reservationHierarchySourceToInventDimFieldsMap.insert(_sourceFieldName, _inventDimFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The name of the view to be built.
    /// </summary>
    /// <returns>The view name.</returns>
    protected abstract TableName parmViewName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceViewName</Name>
				<Source><![CDATA[
    protected TableName parmSourceViewName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildViewSqlSelectStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a SQL statement for creating a view.
    /// </summary>
    /// <returns>A create view SQL statement.</returns>
    protected abstract str buildViewSqlSelectStatement()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>aggregationsToSelectFromInventReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a SQL statement to select aggregated measures from the <c>WHSInventReserve</c> table.
    /// </summary>
    /// <returns>The fields list SQL statement.</returns>
    protected SysSQLStatementText aggregationsToSelectFromInventReserve()
    {
        FieldName inventReserveReservedPhysicalFieldName = this.buildFieldName(inventReserveTableDictionary, fieldNum(WhsInventReserve, ReservPhysical));
        FieldName inventReserveReservOrderedFieldName = this.buildFieldName(inventReserveTableDictionary, fieldNum(WhsInventReserve, ReservOrdered));
        FieldName inventReserveAvailableOrderedFieldName = this.buildFieldName(inventReserveTableDictionary, fieldNum(WhsInventReserve, AvailOrdered));
        FieldName inventReserveAvailablePhysicalFieldName = this.buildFieldName(inventReserveTableDictionary, fieldNum(WhsInventReserve, AvailPhysical));

        return this.as(strFmt(CoalesceSumPattern, inventReserveReservedPhysicalFieldName), ReservedPhysicalCalculatedFieldAlias) + ', ' +
            this.as(strFmt(CoalesceSumPattern, inventReserveReservOrderedFieldName), ReservedOrderedCalculatedFieldAlias) + ', ' +
            this.as(strFmt(CoalesceSumPattern, inventReserveAvailableOrderedFieldName), AvailableOrderedCalculatedFieldAlias) + ', ' +
            this.as(strFmt(CoalesceSumPattern, inventReserveAvailablePhysicalFieldName), AvailablePhysicalCalculatedFieldAlias);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsCWAggregationsToSelectFromInventReserve</Name>
				<Source><![CDATA[
    protected SysSQLStatementText whsCWAggregationsToSelectFromInventReserve()
    {
        if (isWHSCWConfigurationkeyEnabled)
        {
            FieldName inventReserveCWReservedPhysicalFieldName = this.buildFieldName(inventReserveTableDictionary, fieldNum(WhsInventReserve, CWReservPhysical));
            FieldName inventReserveCWReservOrderedFieldName = this.buildFieldName(inventReserveTableDictionary, fieldNum(WhsInventReserve, CWReservOrdered));
            FieldName inventReserveCWAvailableOrderedFieldName = this.buildFieldName(inventReserveTableDictionary, fieldNum(WhsInventReserve, CWAvailOrdered));
            FieldName inventReserveCWAvailablePhysicalFieldName = this.buildFieldName(inventReserveTableDictionary, fieldNum(WhsInventReserve, CWAvailPhysical));

            return this.as(strFmt(CoalesceSumPattern, inventReserveCWReservedPhysicalFieldName), CWReservedPhysicalCalculatedFieldAlias) + ', ' +
                this.as(strFmt(CoalesceSumPattern, inventReserveCWReservOrderedFieldName), CWReservedOrderedCalculatedFieldAlias) + ', ' +
                this.as(strFmt(CoalesceSumPattern, inventReserveCWAvailableOrderedFieldName), CWAvailableOrderedCalculatedFieldAlias) + ', ' +
                this.as(strFmt(CoalesceSumPattern, inventReserveCWAvailablePhysicalFieldName), CWAvailablePhysicalCalculatedFieldAlias);
        }

        return this.whsCWZerosToSubstituteAggregationsFromInventReserve();
    }

]]></Source>
			</Method>
			<Method>
				<Name>zerosToSubstituteAggregationsFromInventReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a SQL statement to select empty aggregated measures.
    /// </summary>
    /// <returns>The fields list SQL statement.</returns>
    protected SysSQLStatementText zerosToSubstituteAggregationsFromInventReserve()
    {
        const str EmptyAggregation = '0';

        return this.as(EmptyAggregation, ReservedPhysicalCalculatedFieldAlias) + ', ' +
            this.as(EmptyAggregation, ReservedOrderedCalculatedFieldAlias) + ', ' +
            this.as(EmptyAggregation, AvailableOrderedCalculatedFieldAlias) + ', ' +
            this.as(EmptyAggregation, AvailablePhysicalCalculatedFieldAlias);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsCWZerosToSubstituteAggregationsFromInventReserve</Name>
				<Source><![CDATA[
    protected SysSQLStatementText whsCWZerosToSubstituteAggregationsFromInventReserve()
    {
        const str WHSCWEmptyAggregation = '0';

        return this.as(WHSCWEmptyAggregation, CWReservedPhysicalCalculatedFieldAlias) + ', ' +
            this.as(WHSCWEmptyAggregation, CWReservedOrderedCalculatedFieldAlias) + ', ' +
            this.as(WHSCWEmptyAggregation, CWAvailableOrderedCalculatedFieldAlias) + ', ' +
            this.as(WHSCWEmptyAggregation, CWAvailablePhysicalCalculatedFieldAlias);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryDimensionsToSelectFromSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a SQL statement to select inventory dimensions from the source.
    /// </summary>
    /// <returns>The fields list SQL statement.</returns>
    protected SysSQLStatementText inventoryDimensionsToSelectFromSource()
    {
        SysSQLStatementText dimensionsSelectStatement;

        MapEnumerator productDimensionsSourceToTargetFieldMapEnumerator = inventoryDimensionsSourceToTargetFieldsMap.getEnumerator();
        while (productDimensionsSourceToTargetFieldMapEnumerator.moveNext())
        {
            dimensionsSelectStatement += this.as(productDimensionsSourceToTargetFieldMapEnumerator.currentKey(), productDimensionsSourceToTargetFieldMapEnumerator.currentValue()) + ', ';
        }

        return dimensionsSelectStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventReserveStandardQueryRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a SQL statement to filter records from the <c>WHSInventReserve</c> table.
    /// </summary>
    /// <param name = "_sourceDataAreaIdFieldName">The source data area Id field name.</param>
    /// <param name = "_sourcePartitionFieldName">The source partition field name.</param>
    /// <param name = "_sourceItemNumberFieldName">The source item number field name.</param>
    /// <returns>The build SQL statement to filter inventory reserve records.</returns>
    protected SysSQLStatementText inventReserveStandardQueryRange(
        FieldName _sourceDataAreaIdFieldName,
        FieldName _sourcePartitionFieldName,
        FieldName _sourceItemNumberFieldName)
    {
        return inventReserveItemId + Equals + _sourceItemNumberFieldName + And +
            inventReservePartition + Equals + _sourcePartitionFieldName + And +
            inventReserveDataAreaId + Equals + _sourceDataAreaIdFieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimToInventReserveStandardQueryRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a SQL statement to join records from the <c>InventDim</c> and the <c>WHSInventReserve</c> tables.
    /// </summary>
    /// <returns>The build SQL statement to join inventory dimension and inventory reserve records.</returns>
    protected SysSQLStatementText inventDimToInventReserveStandardQueryRange()
    {
        FieldName inventDimIdFieldName = this.buildFieldName(inventDimTableDictionary, fieldNum(InventDim, InventDimId));
        FieldName inventDimPartitionIdFieldName = this.buildFieldName(inventDimTableDictionary, fieldNum(InventDim, Partition));
        FieldName inventDimDataAreaIdFieldName = this.buildFieldName(inventDimTableDictionary, fieldNum(InventDim, DataAreaId));

        return inventDimDataAreaIdFieldName + Equals + inventReserveDataAreaId + And +
            inventDimIdFieldName + Equals + inventReserveInventDimIdFieldName + And +
            inventDimPartitionIdFieldName + Equals + inventReservePartition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderedQuantityExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a SQL calculation expression for the ordered quantity.
    /// </summary>
    /// <param name = "_sourceOrderedQuantityFieldName">The ordered quantity field name from the source.</param>
    /// <param name = "_sourceAreWarehouseManagementProcessesUsedFieldName">A field name from the source that indicates whether warehouse management processes are used for an item.</param>
    /// <returns>The build SQL calculation expression for the ordered quantity.</returns>
    protected SysSQLStatementText orderedQuantityExpression(FieldName _sourceOrderedQuantityFieldName, FieldName _sourceAreWarehouseManagementProcessesUsedFieldName)
    {
        return this.caseWhenThenElse(
            this.sourceAreWarehouseManagementProcessesUsedExpression(_sourceAreWarehouseManagementProcessesUsedFieldName),
            orderedQuantityCalculateExpression,
            _sourceOrderedQuantityFieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsCWOrderedQuantityExpression</Name>
				<Source><![CDATA[
    protected SysSQLStatementText whsCWOrderedQuantityExpression(FieldName _sourceOrderedQuantityFieldName, FieldName _sourceAreWarehouseManagementProcessesUsedFieldName)
    {
        if (isWHSCWConfigurationkeyEnabled)
        {
            return this.caseWhenThenElse(
                this.sourceAreWarehouseManagementProcessesUsedExpression(_sourceAreWarehouseManagementProcessesUsedFieldName),
                cwOrderedQuantityCalculateExpression,
                _sourceOrderedQuantityFieldName);
        }
        return _sourceOrderedQuantityFieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservedOrderedQuantityExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a SQL calculation expression for the reserved ordered quantity.
    /// </summary>
    /// <param name = "_sourceReservedOrderedQuantityFieldName">The reserved ordered quantity field name from the source.</param>
    /// <param name = "_sourceAreWarehouseManagementProcessesUsedFieldName">A field name from the source that indicates whether warehouse management processes are used for an item.</param>
    /// <returns>The build SQL calculation expression for the reserved ordered quantity.</returns>
    protected SysSQLStatementText reservedOrderedQuantityExpression(FieldName _sourceReservedOrderedQuantityFieldName, FieldName _sourceAreWarehouseManagementProcessesUsedFieldName)
    {
        return this.caseWhenThenElse(
            this.sourceAreWarehouseManagementProcessesUsedExpression(_sourceAreWarehouseManagementProcessesUsedFieldName),
             reservedOrderedCalculatedFullFieldAlias,
            _sourceReservedOrderedQuantityFieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsCWReservedOrderedQuantityExpression</Name>
				<Source><![CDATA[
    protected SysSQLStatementText whsCWReservedOrderedQuantityExpression(FieldName _sourceReservedOrderedQuantityFieldName, FieldName _sourceAreWarehouseManagementProcessesUsedFieldName)
    {
        if (isWHSCWConfigurationkeyEnabled)
        {
            return this.caseWhenThenElse(
                this.sourceAreWarehouseManagementProcessesUsedExpression(_sourceAreWarehouseManagementProcessesUsedFieldName),
                 cwReservedOrderedCalculatedFullFieldAlias,
                _sourceReservedOrderedQuantityFieldName);
        }
        return _sourceReservedOrderedQuantityFieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservedOnHandQuantityExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a SQL calculation expression for the reserved on-hand quantity.
    /// </summary>
    /// <param name = "_sourceReservedOnHandQuantityFieldName">The reserved on-hand quantity field name from the source.</param>
    /// <param name = "_sourceAreWarehouseManagementProcessesUsedFieldName">A field name from the source that indicates whether warehouse management processes are used for an item.</param>
    /// <returns>The build SQL calculation expression for the reserved on-hand quantity.</returns>
    protected SysSQLStatementText reservedOnHandQuantityExpression(FieldName _sourceReservedOnHandQuantityFieldName, FieldName _sourceAreWarehouseManagementProcessesUsedFieldName)
    {
        return this.caseWhenThenElse(
            this.sourceAreWarehouseManagementProcessesUsedExpression(_sourceAreWarehouseManagementProcessesUsedFieldName),
            reservedPhysicalCalculatedFullFieldAlias,
            _sourceReservedOnHandQuantityFieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsCWReservedOnHandQuantityExpression</Name>
				<Source><![CDATA[
    protected SysSQLStatementText whsCWReservedOnHandQuantityExpression(FieldName _sourceReservedOnHandQuantityFieldName, FieldName _sourceAreWarehouseManagementProcessesUsedFieldName)
    {
        if (isWHSCWConfigurationkeyEnabled)
        {
            return this.caseWhenThenElse(
                this.sourceAreWarehouseManagementProcessesUsedExpression(_sourceAreWarehouseManagementProcessesUsedFieldName),
                cwReservedPhysicalCalculatedFullFieldAlias,
                _sourceReservedOnHandQuantityFieldName);
        }

        return _sourceReservedOnHandQuantityFieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availableOnHandQuantityExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a SQL calculation expression for the available on-hand quantity.
    /// </summary>
    /// <param name = "_sourceOnHandQuantityFieldName">The on-hand quantity field name from the source.</param>
    /// <param name = "_asReservedOnHandQuantityFieldName">The reserved on-hand quantity field name from the target.</param>
    /// <returns>The build SQL calculation expression for the available on-hand quantity.</returns>
    protected SysSQLStatementText availableOnHandQuantityExpression(FieldName _sourceOnHandQuantityFieldName, FieldName _asReservedOnHandQuantityFieldName)
    {
        return '(' + _sourceOnHandQuantityFieldName + ' - ' + this.buildFullFieldName(CalculationsSubQueryAlias, _asReservedOnHandQuantityFieldName) + ')';
    }

]]></Source>
			</Method>
			<Method>
				<Name>availableOrderedQuantityExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a SQL calculation expression for the available ordered quantity.
    /// </summary>
    /// <param name = "_asOrderedQuantityFieldName">The ordered quantity field name from the target.</param>
    /// <param name = "_asReservedOrderedQuantityFieldName">The reserved ordered quantity field name from the target.</param>
    /// <returns>The build SQL calculation expression for the available ordered quantity.</returns>
    protected SysSQLStatementText availableOrderedQuantityExpression(FieldName _asOrderedQuantityFieldName, FieldName _asReservedOrderedQuantityFieldName)
    {
        return '(' + this.buildFullFieldName(CalculationsSubQueryAlias, _asOrderedQuantityFieldName) + ' - ' + this.buildFullFieldName(CalculationsSubQueryAlias, _asReservedOrderedQuantityFieldName) + ')';
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventReserveSelectStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a SQL statement that queries the <c>WHSInventReserve</c> table and gets required aggregated measures.
    /// </summary>
    /// <param name = "_sourceDataAreaIdFieldName">The source data area Id field name.</param>
    /// <param name = "_sourcePartitionFieldName">The source partition field name.</param>
    /// <param name = "_sourceItemNumberFieldName">The source item number field name.</param>
    /// <returns>The built SQL statement to query inventory reserves.</returns>
    protected SysSQLStatementText inventReserveSelectStatement(
        FieldName _sourceDataAreaIdFieldName,
        FieldName _sourcePartitionFieldName,
        FieldName _sourceItemNumberFieldName)
    {
        TableName inventReserveTableName = inventReserveTableDictionary.name(DbBackend::Sql);

        TableName inventDimTableName = inventDimTableDictionary.name(DbBackend::Sql);
        FieldName inventDimIdFieldName = this.buildFieldName(inventDimTableDictionary, fieldNum(InventDim, InventDimId));

        SysSQLStatementText reservationHierarchyDimensionsQueryRanges = this.reservationHierarchyInventoryDimensionsQueryRange();
        SysSQLStatementText result;

        if (this.isConfigurationKeyEnabledForTable(inventReserveTableDictionary))
        {
            result = SelectStatement + this.aggregationsToSelectFromInventReserve() +
            '   FROM ' + inventReserveTableName + ' ' +
            WhereStatement + this.inventReserveStandardQueryRange(_sourceDataAreaIdFieldName, _sourcePartitionFieldName, _sourceItemNumberFieldName) + And +
            '       EXISTS (' + SelectStatement + 'TOP 1 ' + inventDimIdFieldName +
            '               FROM ' + inventDimTableName +
            WhereStatement + this.inventDimToInventReserveStandardQueryRange() + And +

            (reservationHierarchyDimensionsQueryRanges ? (reservationHierarchyDimensionsQueryRanges + And) : '') +
            this.reservationHierarchyLevelQueryRange(_sourceDataAreaIdFieldName, _sourcePartitionFieldName, _sourceItemNumberFieldName) + '))';
        }
        else
        {
            result = SelectStatement + this.zerosToSubstituteAggregationsFromInventReserve();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caseWhenThenElse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a case SQL statement snippet.
    /// </summary>
    /// <param name = "_when">The "when" SQL case snippet part.</param>
    /// <param name = "_then">The "then" SQL case snippet part.</param>
    /// <param name = "_else">The "else" SQL case snippet part.</param>
    /// <returns>The built "case" SQL snippet.</returns>
    protected SysSQLStatementText caseWhenThenElse(str _when, str _then, str _else)
    {
        return strFmt('(CASE WHEN %1 THEN %2 ELSE %3 END)', _when, _then, _else);
    }

]]></Source>
			</Method>
			<Method>
				<Name>as</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a SQL statement snippet that contains a field name and its alias.
    /// </summary>
    /// <param name = "_fieldName">A field name.</param>
    /// <param name = "_alias">A field alias.</param>
    /// <returns>The built "as" SQL snippet.</returns>
    protected SysSQLStatementText as(str _fieldName, FieldName _alias)
    {
        return _fieldName + AsStatement + _alias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsAs</Name>
				<Source><![CDATA[
    protected SysSQLStatementText pdsAs(str _fieldName, FieldName _aliasFromDbBackend, FieldName _aliasFieldName)
    {
        if (isCWConfigurationKeyEnabled)
        {
            return this.as(_fieldName, _aliasFromDbBackend);
        }

        return this.as('0', _aliasFieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIsEqualToOrEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a SQL statement snippet that is true if either two fields are equal or <paramref name="_field" /> is empty.
    /// </summary>
    /// <param name = "_field">The first field.</param>
    /// <param name = "_fieldToCompareWith">The second field.</param>
    /// <param name = "_emptyFieldValue">Empty field value for the <paramref name="_field" />.</param>
    /// <returns>The built SQL snippet.</returns>
    protected SysSQLStatementText fieldIsEqualToOrEmpty(FieldName _field, FieldName _fieldToCompareWith, anytype _emptyFieldValue)
    {
        return strFmt(
            '(%1 %4 %2 %5 %2 %4 %3)',
            _fieldToCompareWith,
            _field,
            this.convertEmptyFieldValueToStr(_emptyFieldValue),
            Equals,
            Or);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertEmptyFieldValueToStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts empty field value to a string value to be used in a SQL snippet construction.
    /// </summary>
    /// <param name = "_emptyFieldValue">An empty field value.</param>
    /// <returns>A string representation of an empty field value.</returns>
    protected str convertEmptyFieldValueToStr(anytype _emptyFieldValue)
    {
        switch(typeOf(_emptyFieldValue))
        {
            case Types::Int64:
            case Types::Integer:
            case Types::Real:
            case Types::Enum:
                return any2Str(_emptyFieldValue);
            default:
                return strFmt('\'%1\'', any2Str(_emptyFieldValue));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the extension mapping fields  to be added to the view.
    /// </summary>
    /// <returns>A <c>Map</c> of source and target extended field IDs from the source view to be added on the corresponding builder's target view.</returns>
    protected Map getExtensionFields()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildExtensionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the extension fields required to be added to the view.
    /// </summary>
    /// <returns>A select sql statement clause containing all extended fields to be added to the view.</returns>
    internal SysSQLStatementText buildExtensionFields()
    {
        SysSQLStatementText extensionFields;
        Map extensionFieldsMap = this.getExtensionFields();
        TableName sourceViewName = this.parmSourceViewName();
        if (extensionFieldsMap && extensionFieldsMap.elements() && sourceViewName)
        {
            MapEnumerator extensionFieldsEnumerator = extensionFieldsMap.getEnumerator();
            SysDictTable targetView =  new SysDictTable(tableName2Id(this.parmViewName()));
            SysDictTable sourceView = new SysDictTable(tableName2Id(sourceViewName));
            while (extensionFieldsEnumerator.moveNext())
            {
                FieldId sourceExtensionFieldId = extensionFieldsEnumerator.currentKey();
                FieldId extensionFieldAliasId = extensionFieldsEnumerator.currentValue();
                FieldName sourceExtensionFieldName = this.buildFieldName(sourceView, sourceExtensionFieldId);
                FieldName fieldAlias = this.buildFieldName(targetView, extensionFieldAliasId, true);
                extensionFields += this.as(sourceExtensionFieldName, fieldAlias) + ', ';
            }
        }
        return extensionFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a field name from the related data such as the <c>SysDictTable</c> instance and the <c>FieldId</c> instance.
    /// </summary>
    /// <param name = "_table">A table dictionary instance.</param>
    /// <param name = "_fieldId">A field id.</param>
    /// <param name = "_skipTableName">Whether table name must be skipped.</param>
    /// <returns>The field name.</returns>
    protected FieldName buildFieldName(SysDictTable _table, FieldId _fieldId, boolean _skipTableName = false)
    {
        FieldName fieldName = _table.fieldObject(_fieldId).name(DbBackend::Sql);

        return _skipTableName
            ? fieldName
            : _table.name(DbBackend::Sql) + '.' + fieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFullFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a field name including its table name.
    /// </summary>
    /// <param name = "_tableName">A table name.</param>
    /// <param name = "_fieldName">A field name.</param>
    /// <returns>The field name.</returns>
    protected FieldName buildFullFieldName(TableName _tableName, FieldName _fieldName)
    {
        Debug::assert(!strContains(_fieldName, '.'));

        return _tableName + '.' + _fieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        inventDimTableDictionary = new SysDictTable(tableNum(InventDim));
        inventReserveTableDictionary = new SysDictTable(tableNum(WhsInventReserve));

        reservedPhysicalCalculatedFullFieldAlias = this.buildFullFieldName(InventReserveSubQueryAlias, ReservedPhysicalCalculatedFieldAlias);
        reservedOrderedCalculatedFullFieldAlias = this.buildFullFieldName(InventReserveSubQueryAlias, ReservedOrderedCalculatedFieldAlias);
        availableOrderedCalculatedFullFieldAlias = this.buildFullFieldName(InventReserveSubQueryAlias, AvailableOrderedCalculatedFieldAlias);
        availablePhysicalCalculatedFullFieldAlias = this.buildFullFieldName(InventReserveSubQueryAlias, AvailablePhysicalCalculatedFieldAlias);
        orderedQuantityCalculateExpression = strFmt(OrderedQuantityFormat, availableOrderedCalculatedFullFieldAlias, reservedOrderedCalculatedFullFieldAlias, availablePhysicalCalculatedFullFieldAlias);

        inventReserveItemId = this.buildFieldName(inventReserveTableDictionary, fieldNum(WhsInventReserve, ItemId));
        inventReservePartition = this.buildFieldName(inventReserveTableDictionary, fieldNum(WhsInventReserve, Partition));
        inventReserveDataAreaId = this.buildFieldName(inventReserveTableDictionary, fieldNum(WhsInventReserve, DataAreaId));
        inventReserveInventDimIdFieldName = this.buildFieldName(inventReserveTableDictionary, fieldNum(WhsInventReserve, InventDimId));

        isCWConfigurationKeyEnabled = this.isConfigurationKeyEnabledForEdt(new SysDictType(extendedTypeNum(PdsCWQty)));
        isWHSCWConfigurationkeyEnabled = this.isConfigurationKeyEnabledForEdt(new SysDictType(extendedTypeNum(WHSCWReservOrdered)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsInitInventReserveCWFullFieldsAlias</Name>
				<Source><![CDATA[
    protected void whsInitInventReserveCWFullFieldsAlias()
    {
        cwReservedPhysicalCalculatedFullFieldAlias = this.buildFullFieldName(InventReserveSubQueryAlias, CWReservedPhysicalCalculatedFieldAlias);
        cwReservedOrderedCalculatedFullFieldAlias = this.buildFullFieldName(InventReserveSubQueryAlias, CWReservedOrderedCalculatedFieldAlias);
        cwAvailableOrderedCalculatedFullFieldAlias = this.buildFullFieldName(InventReserveSubQueryAlias, CWAvailableOrderedCalculatedFieldAlias);
        cwAvailablePhysicalCalculatedFullFieldAlias = this.buildFullFieldName(InventReserveSubQueryAlias, CWAvailablePhysicalCalculatedFieldAlias);
        cwOrderedQuantityCalculateExpression = strFmt(OrderedQuantityFormat, CWAvailableOrderedCalculatedFullFieldAlias, cwReservedOrderedCalculatedFullFieldAlias, cwAvailablePhysicalCalculatedFullFieldAlias);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfigurationKeyEnabledForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether configuration key assigned to a table is enabled.
    /// </summary>
    /// <param name = "_table">A table dictionary.</param>
    /// <returns>true if configuration key assigned to the table is enabled or table has no any configuration key assigned; otherwise, false.</returns>
    protected boolean isConfigurationKeyEnabledForTable(DictTable _table)
    {
        return this.isConfigurationKeyEnabled(_table.configurationKeyId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfigurationKeyEnabledForEdt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether configuration key assigned to an EDT is enabled.
    /// </summary>
    /// <param name = "_edt">A type dictionary.</param>
    /// <returns>true if configuration key assigned to the EDT is enabled or EDT has no any configuration key assigned; otherwise, false.</returns>
    protected boolean isConfigurationKeyEnabledForEdt(DictType _edt)
    {
        return this.isConfigurationKeyEnabled(_edt.configurationKeyId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceAreWarehouseManagementProcessesUsedExpression</Name>
				<Source><![CDATA[
    private SysSQLStatementText sourceAreWarehouseManagementProcessesUsedExpression(FieldName _sourceAreWarehouseManagementProcessesUsedFieldName)
    {
        return _sourceAreWarehouseManagementProcessesUsedFieldName + Equals + '1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createViewSqlStmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a SQL statement to create a view.
    /// </summary>
    /// <returns>The SQL statement to create a view.</returns>
    private SysSQLStatementText createViewSqlStmt()
    {
        SysSQLStatementText sqlStmt = 'CREATE VIEW ' + this.parmViewName() + AsStatement + this.buildViewSqlSelectStatement();

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservationHierarchyInventoryDimensionsQueryRange</Name>
				<Source><![CDATA[
    private SysSQLStatementText reservationHierarchyInventoryDimensionsQueryRange()
    {
        SysSQLStatementText reservationHierarchyDimensionQueryRangeStatement;

        MapEnumerator productDimensionSourceToInventDimFieldMapEnumerator = inventoryDimensionsSourceToInventDimFieldsMap.getEnumerator();
        int itemIndex = 1;
        while (productDimensionSourceToInventDimFieldMapEnumerator.moveNext())
        {
            FieldId inventDimFieldId = productDimensionSourceToInventDimFieldMapEnumerator.currentValue();
            reservationHierarchyDimensionQueryRangeStatement += this.fieldIsEqualToOrEmpty(
                productDimensionSourceToInventDimFieldMapEnumerator.currentKey(),
                this.buildFieldName(inventDimTableDictionary, inventDimFieldId),
                InventDim::emptyDimField(inventDimFieldId));

            if (itemIndex < inventoryDimensionsSourceToInventDimFieldsMap.elements())
            {
                reservationHierarchyDimensionQueryRangeStatement += And;
            }

            itemIndex++;
        }

        return reservationHierarchyDimensionQueryRangeStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservationHierarchyLevelQueryRange</Name>
				<Source><![CDATA[
    private SysSQLStatementText reservationHierarchyLevelQueryRange(
        FieldName _sourceDataAreaIdFieldName,
        FieldName _sourcePartitionFieldName,
        FieldName _sourceItemNumberFieldName)
    {
        SysDictTable reservationHierarchyElementTableDictionary = new SysDictTable(tableNum(WHSReservationHierarchyElement));
        TableName reservationHierarchyElementTableName = reservationHierarchyElementTableDictionary.name(DbBackend::Sql);
        FieldName reservationHierarchyElementLevelFieldName = this.buildFieldName(reservationHierarchyElementTableDictionary, fieldNum(WHSReservationHierarchyElement, ReservationHierarchyLevel));
        FieldName reservationHierarchyElementHierarchyIdFieldName = this.buildFieldName(reservationHierarchyElementTableDictionary, fieldNum(WHSReservationHierarchyElement, ReservationHierarchy));
        FieldName reservationHierarchyElementDimFieldIdFieldName = this.buildFieldName(reservationHierarchyElementTableDictionary, fieldNum(WHSReservationHierarchyElement, DimensionFieldId));
        FieldName reservationHierarchyElementPartitionFieldName = this.buildFieldName(reservationHierarchyElementTableDictionary, fieldNum(WHSReservationHierarchyElement, Partition));

        SysDictTable reservationHierarchyItemTableDictionary = new SysDictTable(tableNum(WHSReservationHierarchyItem));
        TableName reservationHierarchyItemTableName = reservationHierarchyItemTableDictionary.name(DbBackend::Sql);
        FieldName reservationHierarchyItemHierarchyIdFieldName = this.buildFieldName(reservationHierarchyItemTableDictionary, fieldNum(WHSReservationHierarchyItem, ReservationHierarchy));
        FieldName reservationHierarchyItemItemIdFieldName = this.buildFieldName(reservationHierarchyItemTableDictionary, fieldNum(WHSReservationHierarchyItem, ItemId));
        FieldName reservationHierarchyItemDataAreaIdFieldName = this.buildFieldName(reservationHierarchyItemTableDictionary, fieldNum(WHSReservationHierarchyItem, ItemDataAreaId));

        FieldName inventReserveHierarchyLevel = this.buildFieldName(inventReserveTableDictionary, fieldNum(WhsInventReserve, HierarchyLevel));

        SysSQLStatementText reservationHierarchyQueryRangeStatement;

        reservationHierarchyQueryRangeStatement = inventReserveHierarchyLevel + Equals + '(' +
            SelectStatement + 'MAX(' + reservationHierarchyElementLevelFieldName + ')' +
            ' FROM ' + reservationHierarchyElementTableName +
            '   JOIN ' + reservationHierarchyItemTableName + ' ON ' + reservationHierarchyItemDataAreaIdFieldName + Equals + _sourceDataAreaIdFieldName + And +
            reservationHierarchyElementPartitionFieldName + Equals + _sourcePartitionFieldName + And +
            reservationHierarchyElementHierarchyIdFieldName + Equals + reservationHierarchyItemHierarchyIdFieldName + And +
            reservationHierarchyItemItemIdFieldName + Equals + _sourceItemNumberFieldName;

        if (reservationHierarchySourceToInventDimFieldsMap.elements() > 0)
        {
            reservationHierarchyQueryRangeStatement += WhereStatement;
        
            MapEnumerator reservationHierarchySourceToInventDimFieldIdsMapEnumerator = reservationHierarchySourceToInventDimFieldsMap.getEnumerator();
            int reservationHierarchyIndex = 1;
            while (reservationHierarchySourceToInventDimFieldIdsMapEnumerator.moveNext())
            {
                reservationHierarchyQueryRangeStatement += '(' + reservationHierarchyElementDimFieldIdFieldName + Equals + int2Str(reservationHierarchySourceToInventDimFieldIdsMapEnumerator.currentValue()) + And + reservationHierarchySourceToInventDimFieldIdsMapEnumerator.currentKey() + ' != \'\')';
            
                if (reservationHierarchyIndex < reservationHierarchySourceToInventDimFieldsMap.elements())
                {
                    reservationHierarchyQueryRangeStatement += Or;
                }

                reservationHierarchyIndex++;
            }
        }

        return reservationHierarchyQueryRangeStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExtensionInfo</Name>
				<Source><![CDATA[
    private void logExtensionInfo(SysInstrumentationActivityContext _activityContext)
    {
        _activityContext.addCustomProperty('SourceViewName', this.parmSourceViewName());
        _activityContext.addCustomProperty('TargetViewName', this.parmViewName());

        Map extensionFieldsMap = this.getExtensionFields();
        str extensionFieldsMapStr;
        if (extensionFieldsMap)
        {
            MapEnumerator me = extensionFieldsMap.getEnumerator();
            while (me.moveNext())
            {
                extensionFieldsMapStr += '[' + int2Str(me.currentKey()) + ',' + int2Str(me.currentValue()) + ']';
            }
        }
        
        _activityContext.addCustomProperty('SourceToTargetExtensionFieldIdsMap', extensionFieldsMapStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfigurationKeyEnabled</Name>
				<Source><![CDATA[
    private boolean isConfigurationKeyEnabled(ConfigurationKeyId _configurationKeyId)
    {
        return _configurationKeyId && new DictConfigurationKey(_configurationKeyId).enabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>