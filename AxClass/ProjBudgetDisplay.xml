<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetDisplay</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjBudgetDisplay</c> class is used to obtain the project budget details that are affected
///    by the purchasing documents.
/// </summary>
public class ProjBudgetDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    public static FiscalCalendarPeriod getFiscalCalendarPeriod(recId _fiscalCalendarYear, date _date)
    {
        FiscalCalendarPeriod        fiscalCalendarPeriod;
        LedgerFiscalCalendarPeriod  ledgerFiscalCalendarPeriod;

        select firstonly fiscalCalendarPeriod
            where fiscalCalendarPeriod.FiscalCalendarYear == _fiscalCalendarYear &&
                fiscalCalendarPeriod.StartDate <= _date &&
                fiscalCalendarPeriod.EndDate >= _date
            join RecId from ledgerFiscalCalendarPeriod
                where ledgerFiscalCalendarPeriod.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId &&
                    ledgerFiscalCalendarPeriod.Ledger == Ledger::current() &&
                    ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Open;

        return fiscalCalendarPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodName</Name>
				<Source><![CDATA[
    public static PeriodName getPeriodName(ProjBudgetAllocationLine _projBudgetAllocationLine)
    {
        PeriodName              ret;
        FiscalCalendarYear      fiscalCalendarYear;
        FiscalCalendarPeriod    fiscalCalendarPeriod;

        if (_projBudgetAllocationLine.FiscalCalendarPeriod)
        {
            fiscalCalendarPeriod = FiscalCalendarPeriod::find(_projBudgetAllocationLine.FiscalCalendarPeriod);
            ret = fiscalCalendarPeriod.periodName();
        }
        else if (_projBudgetAllocationLine.Quarter)
        {
            fiscalCalendarYear = FiscalCalendarYear::find(_projBudgetAllocationLine.FiscalCalendarYear);
            ret = strFmt("@SYS26868", enum2str(_projBudgetAllocationLine.Quarter), fiscalCalendarYear.yearName());
        }
        else if (_projBudgetAllocationLine.FiscalCalendarYear)
        {
            fiscalCalendarYear = FiscalCalendarYear::find(_projBudgetAllocationLine.FiscalCalendarYear);
            ret = fiscalCalendarYear.yearName();
        }
        else
        {
            throw error(strFmt("@SYS22828",funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjBudgetAllocationLine</Name>
				<Source><![CDATA[
    public static ProjBudgetAllocationLine getProjBudgetAllocationLine(ProjBudgetLine _projBudgetLine, date _date)
    {
        ProjBudgetAllocationLine    projBudgetAllocationLine;
        FiscalCalendarYear          fiscalCalendarYear;
        FiscalCalendarPeriod        fiscalCalendarPeriod;

        fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), _date);

        switch (_projBudgetLine.ProjAllocationMethod)
        {
            case ProjAllocationMethod::Yearly:
                select firstonly projBudgetAllocationLine
                    where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLine.RecId &&
                        projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarYear.RecId;
                break;
            case ProjAllocationMethod::Quarter:
                fiscalCalendarPeriod = ProjBudgetDisplay::getFiscalCalendarPeriod(fiscalCalendarYear.RecId, _date);
                select firstonly projBudgetAllocationLine
                    where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLine.RecId &&
                        projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarYear.RecId &&
                        projBudgetAllocationLine.Quarter == fiscalCalendarPeriod.Quarter;
                break;
            case ProjAllocationMethod::Periods:
                fiscalCalendarPeriod = ProjBudgetDisplay::getFiscalCalendarPeriod(fiscalCalendarYear.RecId, _date);
                select firstonly projBudgetAllocationLine
                    where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLine.RecId &&
                        projBudgetAllocationLine.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId;
                break;
            default:
                throw error(strFmt("@SYS22828",funcName()));
        }

        if (!projBudgetAllocationLine)
        {
            select firstonly projBudgetAllocationLine
                where projBudgetAllocationLine.ProjBudgetLine == _projBudgetLine.RecId;
        }

        return projBudgetAllocationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjBudgetLine</Name>
				<Source><![CDATA[
    public static ProjBudgetLine getProjBudgetLine(
        ProjId              _projId,
        ProjCategoryId      _projCategoryId,
        smmActivityNumber   _smmActivityNumber,
        ProjBudgetLineType  _projBudgetLineType
    )
    {
        ProjBudgetLine  projBudgetLine;

        select projBudgetLine
            where projBudgetLine.ProjId == _projId &&
                projBudgetLine.CategoryId == _projCategoryId &&
                projBudgetLine.ActivityNumber == _smmActivityNumber &&
                projBudgetLine.ProjBudgetLineType == _projBudgetLineType;
        if (!projBudgetLine)
        {
            select projBudgetLine
                where projBudgetLine.ProjId == _projId &&
                    projBudgetLine.CategoryId == _projCategoryId &&
                    projBudgetLine.ActivityNumber == '' &&
                    projBudgetLine.ProjBudgetLineType == _projBudgetLineType;
        }

        return projBudgetLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectBudgetDetails</Name>
				<Source><![CDATA[
    public static container getProjectBudgetDetails(Common _common)
    {
        Map                     projBudgetLineMap;
        List                    projectAccountingDistributionList;
        PurchReqTable           purchReqTable;
        PurchReqLine            purchReqLine;
        PurchTable              purchTable;
        PurchLine               purchLine;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        VendInvoiceInfoLine     vendInvoiceInfoLine;

        void processSourceDocumentLine(SourceDocumentLine _sourceDocumentLine, Map _projBudgetLineMap, List _projectAccountingDistributionList)
        {
            SourceDocumentLineItem          sourceDocumentLineItem;
            SourceDocumentLineItemIProduct  sourceDocumentLineItemIProduct;
            Set                             set;
            SetEnumerator                   setEnumerator;
            AccountingDistribution          accountingDistribution;
            ProjectAccountingDistribution   projectAccountingDistribution;
            ProjTable                       projTable;
            ProjId                          projId;
            ProjCategoryId                  projCategoryId;
            smmActivityNumber               smmActivityNumber;
            ProjBudgetLine                  projBudgetLine;
            ProjBudgetAllocationLine        projBudgetAllocationLine;
            PeriodName                      periodName;
            str                             key;
            AmountMST                       costAmount;
            ProjTmpBudgetDisplay            tmpProjBudgetLine;
            ProjTmpBudgetDisplay            tmpProjectAccountingDistribution;

            sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(_sourceDocumentLine);

            set = ProjBudgetDisplay::getSourceDocumentLinesSet(_sourceDocumentLine.RecId);
            setEnumerator = set.getEnumerator();
            while (setEnumerator.moveNext())
            {
                while select accountingDistribution
                    where accountingDistribution.SourceDocumentLine == setEnumerator.current()
                    join projectAccountingDistribution
                        where projectAccountingDistribution.AccountingDistribution == accountingDistribution.RecId
                            && accountingDistribution.MonetaryAmount != MonetaryAmount::Tax
                {
                    changecompany (CompanyInfo::findRecId(accountingDistribution.AccountingLegalEntity).DataArea)
                    {
                        projTable = ProjTable::findRecId(projectAccountingDistribution.ProjTable);
                        if (projTable.UseAlternateProject == NoYes::Yes)
                        {
                            projId = projTable.AlternateBudgetProject;
                        }
                        else
                        {
                            projId = projTable.ProjId;
                        }
                        projCategoryId = ProjCategory::findRecId(projectAccountingDistribution.ProjCategory).CategoryId;
                        smmActivityNumber = smmActivities::findWithRecId(projectAccountingDistribution.SmmActivities).ActivityNumber;

                        projBudgetLine = ProjBudgetDisplay::getProjBudgetLine(projId, projCategoryId, smmActivityNumber, ProjBudgetLineType::Cost);

                        key = projId + "#" +
                            projCategoryId + "#" +
                            smmActivityNumber + "#";
                        if (projBudgetLine)
                        {
                            projBudgetAllocationLine = ProjBudgetDisplay::getProjBudgetAllocationLine(projBudgetLine, accountingDistribution.AccountingDate);
                            periodName = ProjBudgetDisplay::getPeriodName(projBudgetAllocationLine);
                            key += periodName;
                        }

                        if (!_projBudgetLineMap.exists(key))
                        {
                            tmpProjBudgetLine.clear();
                            tmpProjBudgetLine.ProjId = projId;
                            tmpProjBudgetLine.ProjCategory = projCategoryId;
                            tmpProjBudgetLine.ActivityNumber = smmActivityNumber;
                            if (projBudgetLine)
                            {
                                tmpProjBudgetLine.PeriodAmount = projBudgetAllocationLine.remainingBudget();
                                tmpProjBudgetLine.PeriodName = periodName;
                                tmpProjBudgetLine.TotalBudget = projBudgetLine.remainingBudget();
                                tmpProjBudgetLine.BudgetDefined = NoYesCombo::Yes;
                            }
                            else
                            {
                                tmpProjBudgetLine.PeriodAmount = 0;
                                tmpProjBudgetLine.PeriodName = "";
                                tmpProjBudgetLine.TotalBudget = 0;
                                tmpProjBudgetLine.BudgetDefined = NoYesCombo::No;
                            }
                        }
                        else
                        {
                            tmpProjBudgetLine = _projBudgetLineMap.lookup(key);
                            _projBudgetLineMap.remove(key);
                        }

                        costAmount = BudgetTransactionManager::calculateTransAmountToAccountingAmount(
                                ProjectAccountingDistribution::transactionCurrencyCostAmount(accountingDistribution, projectAccountingDistribution),
                                ProjectAccountingDistribution::transactionCostCurrency(accountingDistribution, projectAccountingDistribution),
                                accountingDistribution.AccountingDate);

                        tmpProjBudgetLine.Amount += costAmount;
                        _projBudgetLineMap.insert(key, tmpProjBudgetLine);

                        tmpProjectAccountingDistribution.clear();
                        tmpProjectAccountingDistribution.ProjId = tmpProjBudgetLine.ProjId;
                        tmpProjectAccountingDistribution.ProjCategory = tmpProjBudgetLine.ProjCategory;
                        tmpProjectAccountingDistribution.ActivityNumber = tmpProjBudgetLine.ActivityNumber;
                        tmpProjectAccountingDistribution.PeriodName = tmpProjBudgetLine.PeriodName;
                        tmpProjectAccountingDistribution.LineNum = sourceDocumentLineItem.parmLineNum();
                        if (sourceDocumentLineItem is SourceDocumentLineItemIProduct)
                        {
                            sourceDocumentLineItemIProduct = sourceDocumentLineItem as SourceDocumentLineItemIProduct;
                            tmpProjectAccountingDistribution.ItemNumber = sourceDocumentLineItemIProduct.parmItemId();
                            tmpProjectAccountingDistribution.ItemName = InventTable::find(tmpProjectAccountingDistribution.ItemNumber).itemName();
                            tmpProjectAccountingDistribution.EcoResCategory = sourceDocumentLineItemIProduct.parmCategory().RecId;
                        }
                        tmpProjectAccountingDistribution.Qty = ProjectAccountingDistribution::quantity(accountingDistribution);
                        tmpProjectAccountingDistribution.Amount = costAmount;
                        if (tmpProjectAccountingDistribution.Qty)
                        {
                            tmpProjectAccountingDistribution.CostPrice = CurrencyExchangeHelper::price(costAmount / tmpProjectAccountingDistribution.Qty, CompanyInfoHelper::standardCurrency());
                        }
                        _projectAccountingDistributionList.addEnd(tmpProjectAccountingDistribution);
                    }
                }
            }
        }

        void processSourceDocumentHeaderImplementation(SourceDocumentHeaderImplementation _sourceDocumentHeaderImplementation)
        {
            SourceDocumentLine  sourceDocumentLine;

            // Get all top level source document lines. ProcessSourceDocumentLine() will handle child lines.
            while select sourceDocumentLine
                where sourceDocumentLine.SourceDocumentHeader == _sourceDocumentHeaderImplementation.SourceDocumentHeader
                   && sourceDocumentLine.ParentSourceDocumentLine == 0
            {
                processSourceDocumentLine(sourceDocumentLine, projBudgetLineMap, projectAccountingDistributionList);
            }
        }

        projBudgetLineMap = new Map(Types::String, Types::Record);
        projectAccountingDistributionList = new List(Types::Record);

        switch (_common.TableId)
        {
            case tableNum(PurchReqTable):
                purchReqTable = _common as PurchReqTable;
                processSourceDocumentHeaderImplementation(purchReqTable);
                break;

            case tableNum(PurchReqLine):
                purchReqLine = _common as PurchReqLine;
                purchReqTable = PurchReqTable::find(purchReqLine.PurchReqTable);
                processSourceDocumentHeaderImplementation(purchReqTable);
                break;

            case tableNum(PurchTable):
                purchTable = _common as PurchTable;
                processSourceDocumentHeaderImplementation(purchTable);
                break;

            case tableNum(PurchLine):
                purchLine = _common as PurchLine;
                purchTable = purchLine.purchTable();
                processSourceDocumentHeaderImplementation(purchTable);
                break;

            case tableNum(VendInvoiceInfoTable):
                vendInvoiceInfoTable = _common as VendInvoiceInfoTable;
                processSourceDocumentHeaderImplementation(vendInvoiceInfoTable);
                break;

            case tableNum(VendInvoiceInfoLine):
                vendInvoiceInfoLine = _common as VendInvoiceInfoLine;
                vendInvoiceInfoTable = vendInvoiceInfoLine.vendInvoiceInfoTable();
                processSourceDocumentHeaderImplementation(vendInvoiceInfoTable);
                break;

            default:
                throw error("@SYS6144");
        }

        return [projBudgetLineMap.pack(), projectAccountingDistributionList.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentLinesSet</Name>
				<Source><![CDATA[
    public static Set getSourceDocumentLinesSet(RefRecId _sourceDocumentLine)
    {
        Set                 sourceDocumentLines;
        SourceDocumentLine  childSourceDocumentLine;
        Stack               stack;
        RefRecId            currenSourceDocumentLine;

        sourceDocumentLines = new Set(Types::Int64);

        if (_sourceDocumentLine)
        {
            stack = new Stack();
            stack.push([_sourceDocumentLine]);

            while (stack.qty())
            {
                [currenSourceDocumentLine] = stack.pop();

                sourceDocumentLines.add(currenSourceDocumentLine);

                while select ParentSourceDocumentLine, RecId
                    from childSourceDocumentLine
                    where childSourceDocumentLine.ParentSourceDocumentLine == currenSourceDocumentLine
                {
                    stack.push([childSourceDocumentLine.RecId]);
                }
            }
        }

        return sourceDocumentLines;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>