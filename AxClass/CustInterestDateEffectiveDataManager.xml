<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInterestDateEffectiveDataManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustInterestDateEffectiveDataManager</c> class provides the date effectivity implementation
///    specific to the customer interest code feature.
/// </summary>
class CustInterestDateEffectiveDataManager extends SysDateEffectiveDataManager
{
    #define.CustInterestValidTimeStateUpdateMode('CustInterestValidTimeStateUpdateMode')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFutureRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a future version of the record from an earlier version of the effective dated record.
    /// </summary>
    /// <param name="_oldVersionId">
    ///    The record ID of the earlier version of the effective dated record.
    /// </param>
    /// <param name="_buffer">
    ///    The record buffer that contains the future version of the effective dated record.
    /// </param>
    public void addFutureRecord(RecId _oldVersionId, Common _buffer)
    {
        // The class %1 must implement the methods %2.
        throw error(strfmt("@SYS191647", classstr(CustInterestDateEffectiveDataManager), 'addFutureRecord'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the name of the global cache variable which is specified in the derived class and is used
    ///    to track the update mode of the effective dated table.
    /// </summary>
    /// <returns>
    ///    The string value that is used to identify the global cache variable specified in the derived class.
    /// </returns>
    protected str cacheKey()
    {
        return #CustInterestValidTimeStateUpdateMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new version of the effective dated record in the <c>CustInterestVersion</c> table.
    /// </summary>
    /// <param name="_custInterestVersionId">
    ///    The record ID of the earlier version of the effective dated record in the
    ///    <c>CustInterestVersion</c> table.
    /// </param>
    /// <returns>
    ///    The record ID of the new version of the effective dated record in the <c>CustInterestVersion</c>
    ///    table.
    /// </returns>
    public RecId createNewVersion(RecId _custInterestVersionId)
    {
        CustInterestVersion custInterestVersion;

        custInterestVersion = CustInterestVersion::find(_custInterestVersionId,true);
        custInterestVersion.ValidFrom = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        custInterestVersion.doInsert();

        return custInterestVersion.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireCurrentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expires a currently active record of the effective dated table by changing the expiration date to a
    ///    past value.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the earlier version of the effective dated record.
    /// </param>
    public void expireCurrentRecord(RecId _recId)
    {
        // The class %1 must implement the methods %2.
        throw error(strfmt("@SYS191647", classstr(CustInterestDateEffectiveDataManager), 'expireCurrentRecord'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDateEffectiveVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns null if invoked by using the <c>SysDateEffectiveDataManager</c> class object; otherwise,
    ///    the corresponding instance of the <c>SysDateEffectiveVersion</c> map as specified in the derived
    ///    class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>CustInterestVersion</c> class.
    /// </returns>
    public SysDateEffectiveVersion getSysDateEffectiveVersion()
    {
        CustInterestVersion custInterestVersion;
        return custInterestVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustInterestFee</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs insert, update, or delete operations on the <c>CustInterestFee</c> table to copy data from
    ///    the earlier version to the new version.
    /// </summary>
    /// <param name="_newcustInterestVersionDetailRecId">
    ///    The record ID of a record of the <c>CustInterestVersionDetail</c> table that is created because of
    ///    the new version of the effective-dated table record.
    /// </param>
    /// <param name="_custInterestFee">
    ///    The <c>CustInterestFee</c> buffer.
    /// </param>
    /// <remarks>
    ///    The <paramref name="_buffer" /> parameter is used to make sure that only a single record of the
    ///    corresponding table is inserted, updated, or deleted. Once that record is processed, the buffer
    ///    value is set to null and no other record of the corresponding table is processed.
    /// </remarks>
    private void processCustInterestFee(CustInterestVersionDetailRecId _newcustInterestVersionDetailRecId,
                                            CustInterestFee _custInterestFee)
    {
        CustInterestRange custInterestRange;
        LanguageTxt languageTxt;
        CustInterestFeeRecId custInterestFeeRecId;

        _custInterestFee.CustInterestVersionDetail = _newcustInterestVersionDetailRecId;
        custInterestFeeRecId = _custInterestFee.RecId;
        _custInterestFee.doInsert();
        while select custInterestRange
            where custInterestRange.CustInterestFee == custInterestFeeRecId
        {
            this.processCustInterestRange(_custInterestFee.RecId, custInterestRange);
        }

        while select languageTxt
            where languageTxt.TxtRecId == custInterestFeeRecId && languageTxt.TxtTableId == tablenum(CustInterestFee)
        {
            this.processLanguageTxt(_custInterestFee.RecId, languageTxt);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustInterestRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs insert, update, or delete operations on the <c>CustInterestRange</c> table to copy data
    ///    from the earlier version to the new version.
    /// </summary>
    /// <param name="_newCustInterestFeeRecId">
    ///    The record ID of a record in the <c>CustInterestFee</c> table that was created because of the new
    ///    version of the effective-dated table record.
    /// </param>
    /// <param name="_custInterestRange">
    ///    The <c>CustInterestRange</c> buffer.
    /// </param>
    /// <remarks>
    ///    The <paramref name="_buffer" /> parameter is used to make sure that only a single record of the
    ///    corresponding table is inserted, updated, or deleted. Once that record is processed the buffer
    ///    value is set to null and no other record of the corresponding table is processed.
    /// </remarks>
    private void processCustInterestRange(CustInterestFeeRecId _newCustInterestFeeRecId,
                                            CustInterestRange _custInterestRange)
    {
        _custInterestRange.CustInterestFee = _newCustInterestFeeRecId;
        _custInterestRange.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustInterestVersionDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs insert, update, or delete operations on the <c>CustInterestVersionDetail</c> table to copy
    ///    data from the earlier version to the new version.
    /// </summary>
    /// <param name="_newCustInterestVersionRecId">
    ///    The record ID of a record in the <c>CustInterestVersion</c> table that was created because of the
    ///    new version of the effective-dated table record.
    /// </param>
    /// <param name="_custInterestVersionDetail">
    ///    The <c>CustInterestVersionDetail</c> buffer.
    /// </param>
    /// <remarks>
    ///    The <paramref name="_buffer" /> parameter is used to make sure that only a single record of the
    ///    corresponding table is inserted, updated, or deleted. Once that record is processed the buffer
    ///    value is set to null and no other record of the corresponding table is processed.
    /// </remarks>
    private void processCustInterestVersionDetail(CustInterestVersionRecId _newCustInterestVersionRecId,
                                                    CustInterestVersionDetail _custInterestVersionDetail)
    {
        CustInterestFee custInterestFee;
        CustInterestVersionDetailRecId custInterestVersionDetailRecId;

        _custInterestVersionDetail.CustInterestVersion = _newCustInterestVersionRecId;
        custInterestVersionDetailRecId = _custInterestVersionDetail.RecId;
        _custInterestVersionDetail.doInsert();
        while select custInterestFee
            where custInterestFee.CustInterestVersionDetail == custInterestVersionDetailRecId
        {
            this.processCustInterestFee(_custInterestVersionDetail.RecId, custInterestFee);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustInterestVersionLanguageTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the insert, update, or delete operations on the <c>LanguageTxt</c> table to copy the data
    ///    from the earlier version to the new version.
    /// </summary>
    /// <param name="_newVersionId">
    ///    The record ID of a record in the <c>LanguageTxt</c> table created from the new version of the
    ///    effective dated table record.
    /// </param>
    /// <param name="_languageTxt">
    ///    The record of the <c>LanguageTxt</c> table.
    /// </param>
    private void processCustInterestVersionLanguageTxt(CustInterestVersionRecId _newVersionId,
                                         LanguageTxt _languageTxt)
    {
        _languageTxt.TxtRecId = _newVersionId;
        _languageTxt.TxtTableId = tablenum(CustInterestVersion);
        _languageTxt.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the data from the earlier version of the customer interest record to the new version of
    ///    customer interest record in all tables that correspond.
    /// </summary>
    /// <param name="_oldVersionId">
    ///    The record ID of the earlier version of the effective-dated record in the
    ///    <c>CustInterestVersion</c> table.
    /// </param>
    /// <param name="_newVersionId">
    ///    The record ID of the new version of the effective-dated record in the <c>CustInterestVersion</c>
    ///    table.
    /// </param>
    /// <param name="_buffer">
    ///    The buffer of the corresponding table in which any operation has to be performed.
    /// </param>
    /// <param name="_operationToPerform">
    ///    The enumeration value that specifies the type of the operation performed in any of the
    ///    corresponding tables.
    /// </param>
    /// <remarks>
    ///    The <c>_buffer</c> parameter is used to make sure that only a single record in the corresponding
    ///    table is inserted, updated, or deleted. Once that record is processed the buffer value is set to
    ///    null and no other record in the corresponding table is processed.
    /// </remarks>
    protected void processData(RecId _oldVersionId, RecId _newVersionId, Common _buffer, SysDateEffectiveOperation _operationToPerform)
    {
        CustInterestVersionDetail custInterestVersionDetail;
        LanguageTxt languageTxt;
        ttsbegin;
        while select custInterestVersionDetail
            where custInterestVersionDetail.CustInterestVersion == _oldVersionId
        {
            this.processCustInterestVersionDetail(_newVersionId, custInterestVersionDetail);
        }

        if (CustInterest::find(CustInterestVersion::find(_oldVersionId).CustInterest).CustInterestType == CustInterestType::MultipleRate)
        {
            while select languageTxt
                where languageTxt.TxtRecId == _oldVersionId && languageTxt.TxtTableId == tablenum(CustInterestVersion)
            {
                this.processCustInterestVersionLanguageTxt(_newVersionId, languageTxt);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLanguageTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs insert, update, or delete operations on the <c>LanguageTxt</c> table to copy data from the
    ///    earlier version to the new version.
    /// </summary>
    /// <param name="_newCustInterestFeeRecId">
    ///    The record ID of a record in the <c>LanguageTxt</c> table that was created because of the new
    ///    version of the effective-dated table record.
    /// </param>
    /// <param name="_languageTxt">
    ///    The <c>LanguageTxt</c> buffer.
    /// </param>
    /// <remarks>
    ///    The <paramref name="_buffer" /> parameter is used to make sure that only a single record of the
    ///    corresponding table is inserted, updated, or deleted. Once that record is processed the buffer
    ///    value is set to null and no other record of the corresponding table is processed.
    /// </remarks>
    private void processLanguageTxt(CustInterestFeeRecId _newCustInterestFeeRecId,
                                        LanguageTxt _languageTxt)
    {
        _languageTxt.TxtRecId = _newCustInterestFeeRecId;
        _languageTxt.TxtTableId = tablenum(CustInterestFee);
        _languageTxt.doInsert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>