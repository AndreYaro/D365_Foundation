<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentKanbanJobDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    A <c>LeanDocumentKanbanJobDataProvider</c> class is the provider class of kanban jobs, which belong
///    to the same purchase line.
/// </summary>
public class LeanDocumentKanbanJobDataProvider extends LeanDocumentDataProvider
{
    KanbanJob filterKanbanJob;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the two objects are equal.
    /// </summary>
    /// <param name="otherObject">
    ///    The other object.
    /// </param>
    /// <returns>
    ///    true if the two objects hold the same state; otherwise, false.
    /// </returns>
    public boolean equal(Object otherObject)
    {
        LeanDocumentKanbanJobDataProvider otherProvider = otherObject as LeanDocumentKanbanJobDataProvider;

        return  otherObject == this
                || ( otherProvider != null
                        && filterKanbanJob.RecId == otherProvider.parmFilterKanbanJob().RecId
                        && super(otherObject));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal state of the providers.
    /// </summary>
    protected void init()
    {
        // only fetch jobs belonging to the same purch line as the filter job
        this.addRange(tablenum(KanbanJobPurchaseLine),
                        fieldnum(KanbanJobPurchaseLine, PurchLineInventTransId),
                        SysQuery::value(KanbanJobPurchaseLine::findKanbanJob(filterKanbanJob.RecId).PurchLineInventTransId));

        // this needs to be done after all the ranges have been added, otherwise the QueryRUn
        // created in the parent won't fetch them during the t-sql generation
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(KanbanJob _filterKanbanJob)
    {
        super(new Query(querystr(LeanDocumentServiceUpdate)));

        filterKanbanJob = _filterKanbanJob;

        if (!filterKanbanJob.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterKanbanJob</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected KanbanJob parmFilterKanbanJob(KanbanJob _filterKanbanJob = filterKanbanJob)
    {
        filterKanbanJob = _filterKanbanJob;

        return filterKanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of the <c>LeanDocumentKanbanJobDataProvider</c> class.
    /// </summary>
    /// <param name="_filterKanbanJob">
    ///    The kanban job that is used for initial filtering.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LeanDocumentKanbanJobDataProvider</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanDocumentKanbanJobDataProvider newStandard(KanbanJob _filterKanbanJob)
    {
        LeanDocumentKanbanJobDataProvider result = new LeanDocumentKanbanJobDataProvider(_filterKanbanJob);

        result.init();
        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>