<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsPriceEstablisher</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Establishes an adjusted unit price.
/// </summary>
abstract class PdsPriceEstablisher
{
    PDSCalculableOrderMap   calculableOrderMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>averageAdjustedUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the average adjusted unit price.
    /// </summary>
    /// <returns>
    ///     The average adjusted unit price.
    /// </returns>
    public PDSCalculatedUnitPrice averageAdjustedUnitPrice()
    {
        setPrefix(strFmt("@PSC758", this.itemId()));

        return PDSPriceEstablisher::averageAdjustedUnitPriceOnServer(this.parmCalculableOrderMap(), this.parmBaseBuffer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>direction</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the direction of calculation whether it is Sales or Purchase.
    /// </summary>
    /// <returns>
    ///     The direction of calculation.
    /// </returns>
    abstract protected SalesPurch direction()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>elementValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the value for the specified element type.
    /// </summary>
    /// <param name="_elementType">
    ///     The element type to get the value for.
    /// </param>
    /// <param name="_inventBatchId">
    ///     The inventory batch ID for the actual batch attribute element type. Optional.
    /// </param>
    /// <param name="_batchAttribId">
    ///     The batch attribute ID for the batch attribute element types. Optional.
    /// </param>
    /// <returns>
    ///     The value for the element type.
    /// </returns>
    protected RealBase elementValue(PDSCalcElementTypeBase _elementType, InventBatchId _inventBatchId = '', PdsBatchAttribId _batchAttribId = '')
    {
        real value;

        switch (_elementType)
        {
            case PDSCalcElementTypeBase::PurchPrice:
                value = this.unitPrice();
                break;
            case PDSCalcElementTypeBase::PurchReceiptQty:
                value = this.qty();
                break;
            case PDSCalcElementTypeBase::BatchAttribTarget:
                value = str2num(PdsBatchAttribByItem::findItemId(this.itemId(), _batchAttribId, TableGroupAll::Table).pdsBaseValue);
                if (!value)
                {
                    error("@PSC646");
                }
                break;
            case PDSCalcElementTypeBase::BatchAttribActual:
                value = str2num(PdsBatchAttributes::find(this.itemId(), _inventBatchId, _batchAttribId).PdsBatchAttribValue);
                if (!value)
                {
                    error(strFmt("@PSC647", _batchAttribId, _inventBatchId));
                }
                break;
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the inventory transaction ID.
    /// </summary>
    /// <returns>
    ///     The inventory transaction ID.
    /// </returns>
    abstract protected InventTransId inventTransId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransIdReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the lot ID of the item that is being returned.
    /// </summary>
    /// <returns>
    ///     The lot ID of the item being returned. If there is no return, then an empty string.
    /// </returns>
    /// <remarks>
    ///     This method always returns an empty string. Override this method if logic is needed to determine the return lot ID.
    /// </remarks>
    protected InventTransIdReturn inventTransIdReturn()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the item ID.
    /// </summary>
    /// <returns>
    ///     The item ID.
    /// </returns>
    abstract protected ItemId itemId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxStatusIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the maximum status issue.
    /// </summary>
    /// <returns>
    ///     The maximum status issue.
    /// </returns>
    /// <remarks>
    ///     This method always returns StatusIssue::Sold. This should be overridden by a derived class if this is not appropriate.
    /// </remarks>
    protected StatusIssue maxStatusIssue()
    {
        return StatusIssue::Sold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxStatusReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the maximum status receipt.
    /// </summary>
    /// <returns>
    ///     The maximum status receipt.
    /// </returns>
    /// <remarks>
    ///     This method always returns StatusReceipt::Purchased. This should be overridden by a derived class if this is not appropriate.
    /// </remarks>
    protected StatusReceipt maxStatusReceipt()
    {
        return StatusReceipt::Purchased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBaseBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets or sets the base buffer property.
    /// </summary>
    /// <param name="_baseBuffer">
    ///     A buffer of the source record as contained in the property calculableOrderMap.
    /// </param>
    /// <returns>
    ///     The current base buffer.
    /// </returns>
    /// <remarks>
    ///     The base buffer represents the source record as contained in the property calculableOrderMap. Since the source record may be of different types, it is necessary for the derived class to implement
    ///     this method according to the type it is handling.
    /// </remarks>
    public abstract Common parmBaseBuffer(Common _baseBuffer = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculableOrderMap</Name>
				<Source><![CDATA[
        public PDSCalculableOrderMap parmCalculableOrderMap(PDSCalculableOrderMap _calculableOrderMap = null)
    {
        if (!prmisDefault(_calculableOrderMap))
        {
            calculableOrderMap = _calculableOrderMap;

            this.setInternalBuffer(calculableOrderMap.OrigRecId);
        }

        return calculableOrderMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pricingPrecision</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the pricing precision.
    /// </summary>
    /// <returns>
    ///     The pricing precision.
    /// </returns>
    abstract protected PDSPricingPrecision pricingPrecision()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the quantity.
    /// </summary>
    /// <returns>
    ///     The quantity.
    /// </returns>
    abstract protected Qty qty()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInternalBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the internal buffer according to the specififed record ID
    /// </summary>
    /// <param name="_baseRecId">
    ///     The base record ID.
    /// </param>
    abstract protected void setInternalBuffer(PDSCalculableOrderLineRecId _baseRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the unit price.
    /// </summary>
    /// <returns>
    ///     The unit price.
    /// </returns>
    abstract protected PriceCur unitPrice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>averageAdjustedUnitPriceOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the average adjusted unit price.
    /// </summary>
    /// <param name="_calculableOrderMap">
    ///     Table map representing one of the pricing calculation extension tables.
    /// </param>
    /// <param name="_baseBuffer">
    ///     A buffer containing the source record associated with _calculableOrderMap.
    /// </param>
    /// <param name="_factory">
    ///     A factory that actually constructs a <c>PDSPriceEstablisher</c> derived object.
    /// </param>
    /// <returns>
    ///     The average adjusted unit price.
    /// </returns>
    /// <remarks>
    ///     Use the parameter _baseBuffer only when the source record ID specified by <paramref name="_calculableOrderMap">_calculableOrderMap</paramref> is not yet found in the database such as when a
    ///     record ID is preallocated and the record is not yet saved to the database.
    /// </remarks>
    protected static PDSCalculatedUnitPrice averageAdjustedUnitPriceOnServer(
        PDSCalculableOrderMap       _calculableOrderMap,
        Common                      _baseBuffer = null,
        PDSPriceEstablisherFactory  _factory    = new PDSPriceEstablisherFactory())
    {
        PDSPriceEstablisher     priceEstablisher    = PDSPriceEstablisher::construct(_calculableOrderMap, _factory);
        PDSAdvancedPricing      calculator          = PDSAdvancedPricing::construct(priceEstablisher.parmCalculableOrderMap().PriceCalculation, PDSAdvancedPricingType::Calculator);
        ListEnumerator          listEnum            = calculator.getElementDefinitions().getEnumerator();
        InventTrans             inventTrans;
        InventTransId           inventTransId;
        InventTransOrigin       inventTransOrigin;
        PdsBatchAttribId        batchAttribId;
        PDSCalcElementBase      element;
        PDSCalcElementTypeBase  elementType;
        SalesPurch              direction;
        StatusIssue             maxIssue;
        StatusReceipt           maxReceipt;
        boolean                 error;

        InventTransIdReturn     inventTransIdReturn;

        if (!prmisDefault(_baseBuffer))
        {
            priceEstablisher.parmBaseBuffer(_baseBuffer);
        }

        inventTransId   = priceEstablisher.inventTransId();
        direction       = priceEstablisher.direction();
        maxIssue        = priceEstablisher.maxStatusIssue();
        maxReceipt      = priceEstablisher.maxStatusReceipt();

        inventTransIdReturn = priceEstablisher.inventTransIdReturn();
        select firstOnly RecId
            from inventTransOrigin
            where inventTransOrigin.InventTransId == (inventTransIdReturn ? inventTransIdReturn : inventTransId);

        // If this is a return, inventory transactions are not guaranteed for the return. For example, the return item is being scrapped. Therefore, for returns, use the inventory
        // transactions used for invoicing.
        if (inventTransIdReturn)
        {
            select inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    && direction == SalesPurch::Sales
                    && inventTrans.StatusIssue == StatusIssue::Sold;
        }
        else
        {
            select inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    && ((direction == SalesPurch::Purch
                            && inventTrans.StatusReceipt    >= maxReceipt
                            && inventTrans.StatusReceipt    <= StatusReceipt::Arrived
                            && inventTrans.StatusIssue      == StatusIssue::None)
                        || (direction == SalesPurch::Sales
                            && inventTrans.StatusIssue      >= maxIssue
                            && inventTrans.StatusIssue      <= StatusIssue::ReservOrdered
                            && inventTrans.StatusReceipt    == StatusReceipt::None
                            && inventTrans.ReturnInventTransOrigin != inventTransOrigin.RecId));
        }

        while (inventTrans && !error)
        {
            listEnum.reset();
            while (listEnum.moveNext())
            {
                [element, elementType, batchAttribId] = listEnum.current();
                calculator.setElementValue(element, priceEstablisher.elementValue(elementType, inventTrans.inventBatchId(), batchAttribId));
            }

            calculator.averageAdjustedUnitPrice(0, inventTrans.Qty);

            error = calculator.isError();
            next inventTrans;
        }

        return error ? 0 : calculator.averageAdjustedUnitPrice(priceEstablisher.pricingPrecision());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a <c>PDSPriceEstablisher</c> derived object based on the calculable order map.
    /// </summary>
    /// <param name="_calculableOrderMap">
    ///     Table map representing one of the pricing calculation extension tables.
    /// </param>
    /// <param name="_factory">
    ///     A factory that actually constructs a <c>PDSPriceEstablisher</c> derived object.
    /// </param>
    /// <returns>
    ///     A <c>PDSPriceEstablisher</c> derived object.
    /// </returns>
    public static PDSPriceEstablisher construct(PDSCalculableOrderMap _calculableOrderMap, PDSPriceEstablisherFactory _factory = new PDSPriceEstablisherFactory())
    {
        // If consumer explicitly passes null for the factory, then create a valid factory.
        if (!prmisDefault(_factory) && !_factory)
        {
            _factory = new PDSPriceEstablisherFactory();
        }

        return _factory.constructPriceEstablisher(_calculableOrderMap);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>