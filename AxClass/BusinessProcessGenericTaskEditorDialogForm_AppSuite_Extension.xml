<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessProcessGenericTaskEditorDialogForm_AppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension class of the <c>BusinessProcessGenericTaskEditorDialog</c> form, which is used for retail business process.
/// </summary>
[ExtensionOf(formStr(BusinessProcessGenericTaskEditorDialog))]
final class BusinessProcessGenericTaskEditorDialogForm_AppSuite_Extension
{  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        next init();

        BusinessProcessIGenericSubtypeFilterable caller = this.args().caller() as BusinessProcessIGenericSubtypeFilterable;

        if (caller && caller.getGenericSubtype() == BusinessProcessGenericSubtype::Retail)
        {
            FormControl assignmentTypeControl = this.design(0).controlName(formControlStr(BusinessProcessGenericTaskEditorDialog, BusinessProcessTask_AssignmentType));
            assignmentTypeControl.visible(false);

            FormControl instructionTab = this.design(0).controlName(formControlStr(BusinessProcessGenericTaskEditorDialog, Instructions));
            instructionTab.visible(false);

            FormStringControl descriptionControl = this.design(0).controlName(formControlStr(BusinessProcessGenericTaskEditorDialog, BusinessProcessTask_Description));
            descriptionControl.visible(false);

            FormControl optionalControl = this.design(0).controlName(formControlStr(BusinessProcessGenericTaskEditorDialog, BusinessProcessTask_IsOptional));
            optionalControl.visible(false);

            FormControl noteGroup = this.design(0).controlName(formControlStr(BusinessProcessGenericTaskEditorDialog, NotesGroup));
            noteGroup.visible(true);

            FormStringControl nameControl = this.design(0).controlName(formControlStr(BusinessProcessGenericTaskEditorDialog, BusinessProcessTask_Name));
            nameControl.label('@RetailTaskManagement:RetailTaskName');
            
            FormControl contactPersonControl = this.design(0).controlName(formControlStr(BusinessProcessGenericTaskEditorDialog, BusinessProcessTask_ContactPerson));
            contactPersonControl.visible(false);
            
            FormControl contactWorkerControl = this.design(0).controlName(formControlStr(BusinessProcessGenericTaskEditorDialog, BusinessProcessTask_ContactWorker));
            contactWorkerControl.visible(true);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>BusinessProcessTask_OnValidatingWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler of write validation for <c>BusinessProcessTask</c>.
    /// </summary>
    /// <param name="sender">the sender FormDataSource</param>
    /// <param name="e">args</param>
    [FormDataSourceEventHandler(formDataSourceStr(BusinessProcessGenericTaskEditorDialog, BusinessProcessTask), FormDataSourceEventType::ValidatingWrite)]
    public static void BusinessProcessTask_OnValidatingWrite(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();
        BusinessProcessIGenericSubtypeFilterable parentFormRun = formRun.args().caller() as BusinessProcessIGenericSubtypeFilterable;
        
        if (parentFormRun && parentFormRun.getGenericSubtype() == BusinessProcessGenericSubtype::Retail)
        {
            BusinessProcessTask task = sender.cursor();
            boolean shouldCancel = false;
            if (task.Name == '')
            {
                shouldCancel = !checkFailed('@RetailTaskManagement:RetailBusinessProcessTaskEmptyNameError') || shouldCancel;
            }
        
            if (task.DueDate == dateNull())
            {
                shouldCancel = !checkFailed('@RetailTaskManagement:RetailBusinessProcessTaskEmptyDueDateError') || shouldCancel;
            }

            FormDataSourceCancelEventArgs args = e;
            args.cancel(args.cancel() || shouldCancel);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>BusinessProcessTask_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler of form data source initialized method
    /// </summary>
    /// <param name = "sender">the form data source</param>
    /// <param name = "e">args</param>
    [FormDataSourceEventHandler(formDataSourceStr(BusinessProcessGenericTaskEditorDialog, BusinessProcessTask), FormDataSourceEventType::Initialized)]
    public static void BusinessProcessTask_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormControl control = sender.formRun().args().callerFormControl();
        BusinessProcessIGenericSubtypeFilterable parentForm = control.formRun() as BusinessProcessIGenericSubtypeFilterable;

        if (parentForm && parentForm.getGenericSubtype() == BusinessProcessGenericSubtype::Retail)
        {
            BusinessProcessGenericTaskEditorDialogOverrides overrides = BusinessProcessGenericTaskEditorDialogOverrides::construct();

            sender.object(fieldNum(BusinessProcessTask, ContactWorker)).registerOverrideMethod(methodStr(FormDataObject, lookupReference), 
                methodStr(BusinessProcessGenericTaskEditorDialogOverrides, ContactWorker_OnLookupReference), overrides);
        }
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>