<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PostSettlement_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Posts settlement for India.
/// </summary>
class PostSettlement_IN
{
    ExciseNumSequenceRef_IN         numSequenceRef;
    TaxTrans                        taxTrans;
    TaxTrans                        taxTransLoc;
    TaxLedgerAccounts_IN            taxLedgerAccounts;
    TaxAmount                       taxAmountCur;
    TaxAmount                       amountBasis;
    UpdatePLAEnquiry_IN             updatePLA_Enq;
    UpdatePLA_IN                    updatePLA;

    LedgerVoucherObject             ledgerVoucherObject;

    NumberSequenceReference         numberSequenceReference;
    LedgerVoucher                   ledgerVoucher;
    NumberSeq                       numberSeq;
    Voucher                         voucher;
    VendVoucher                     vendVoucher;

    VendTrans                       vendTrans;
    FormDataSource                  updatePLAEnquiry_ds;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exciseUpdatePLARegisters_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates PLA registers.
    /// </summary>
    /// <param name="_eccNumber">
    /// The ecc number.
    /// </param>
    /// <param name="_taxComponent">
    /// The tax component.
    /// </param>
    /// <param name="_amount">
    /// The tax amount.
    /// </param>
    /// <param name="_numberSeq">
    /// The number sequence.
    /// </param>
    /// <param name="_plaAccount">
    /// The pla account.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal transaction.
    /// </param>
    /// <param name="_interimPlaAccount">
    /// The pla interim account.
    /// </param>
    public void exciseUpdatePLARegisters_IN(
        RefRecId            _eccNumber,
        RefRecId            _taxComponent,
        TaxAmount           _amount,
        Num                 _numberSeq,
        RefRecId            _plaAccount,
        LedgerJournalTrans  _ledgerJournalTrans,
        RefRecId            _interimPlaAccount = 0)
    {
        ExcisePLARegister_IN       excisePLARegister;

        ttsbegin;

        excisePLARegister.TaxRegistrationNumberTable    = _eccNumber;
        excisePLARegister.rgDate                        = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) ;
        excisePLARegister.TaxComponentTable             = _taxComponent;
        excisePLARegister.DebitBalance                  = _amount;
        excisePLARegister.NumberSequence                = _numberSeq;
        excisePLARegister.PLALedgerDimension            = _plaAccount;

        if (_plaAccount != 0)
        {
            excisePLARegister.insert();
        }

        TaxTrans_IN::insertIntoTaxTransPLA(excisePLARegister,
                                           _ledgerJournalTrans,
                                           '',
                                           _plaAccount,
                                           _interimPlaAccount,
                                           excisePLARegister.RGDate,
                                           _eccNumber,
                                           '',
                                           _taxComponent,
                                           excisePLARegister.TaxCode);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts settlement information.
    /// </summary>
    /// <param name="_updatePLA">
    /// The instance of the <c>UpdatePLA_IN</c> class.
    /// </param>
    protected void new(UpdatePLA_IN _updatePLA)
    {
        updatePLA = _updatePLA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// The post method.
    /// </summary>
    public void post()
    {
        LedgerJournalTrans                  ledgerJournalTrans;
        boolean                             check;
        LedgerJournalTable                  ledgerJournalTable;
        AmountCur                           plaAmount;
        Num                                 numberSequence;
        AmountCur                           checkPlaAmount;
        RefRecId                            taxLedgerAccountSetup;
        CurrencyExchangeHelper              exchRateHelper;
        LedgerDimensionAccount              ledgerDimension;
        TaxTrans_IN                         taxTransIN;

        ttsbegin;
        numSequenceRef = ExciseNumSequenceRef_IN::findByRegistrationNumber(updatePLA.ECCTaxRegistrationNumberTable,  ExciseReference_IN::PLA);

        select ledgerJournalTrans
            where ledgerJournalTrans.RecId == updatePLA.SourceRecID;

        select JournalNum from ledgerJournalTable
            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum;

        exchRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                     ledgerJournalTrans.TransDate);
        if (numSequenceRef)
        {
            ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,SysModule::None,NumberSequenceTable::find(numSequenceRef.NumberSequenceTable).NumberSequence);
            voucher = NumberSeq::newGetVoucherFromCode(NumberSequenceTable::find(numSequenceRef.NumberSequenceTable).NumberSequence, NumberSeqScopeFactory::createDefaultScope(), false).voucher();
        }
        else
        {
            throw error ("@SYS53911");
        }

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                     SysModule::Ledger,
                                                     NumberSequenceTable::find(numSequenceRef.NumberSequenceTable).NumberSequence,
                                                     TransactionLogType::LedgerJournal,
                                                     ledgerJournalTable.JournalNum);

        ledgerVoucher.parmCheckBlockedDimensions(false);

        ledgerVoucher.addVoucher(
                LedgerVoucherObject::newVoucher(voucher,
                                                ledgerJournalTrans.TransDate,
                                                SysModule::Ledger));

        while select updatePLA_Enq
            where updatePLA_Enq.TransRecId == updatePLA.RecId
        {
            if (updatePLA.SettleInterimPLA)
            {
                numberSequence = NumberSeq::newGetNumFromCode(NumberSequenceTable::find(numSequenceRef.NumberSequenceTable).NumberSequence, NumberSeqScopeFactory::createDefaultScope(), true,false).num();

                taxLedgerAccountSetup = TaxLedgerAccountsetup_IN::findByTaxAccountGroup(updatePLA.TaxLedgerAccountGroup, TaxAccountCode_IN::Table, updatePLA.ECCTaxRegistrationNumberTable).RecId;
                if (!taxLedgerAccountSetup)
                {
                    taxLedgerAccountSetup = TaxLedgerAccountsetup_IN::findByTaxAccountGroup(updatePLA.TaxLedgerAccountGroup, TaxAccountCode_IN::All).RecId;
                }
                taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxLedgerAccountSetup,
                                                                            TaxAccountType_IN::ExciseInterimPLAAccount,
                                                                            updatePLA_Enq.TaxComponentTable);

                ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(taxLedgerAccounts.LedgerDimension);

                select sum(PostedTaxAmout) from taxTransIN
                    where taxTransIN.InterimPLALedgerDimension == ledgerDimension
                    &&    taxTransIN.TaxComponentTable == updatePLA_Enq.TaxComponentTable;

                if (!taxLedgerAccounts)
                {
                    warning(strfmt("@SYS94719","@GLS5014"));
                    throw error("@SYS21533");
                }

                //Interim amount > PLA update amount, post full PLA amount to Interim account
                if (abs(taxTransIN.PostedTaxAmout)  >= updatePLA_Enq.Amount)
                {
                    //Debit PLA Interim Account
                    ledgerVoucher.addTrans(
                            LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucher.findLedgerVoucherObject(),
                                                                                LedgerPostingType::LedgerJournal,
                                                                                ledgerDimension,
                                                                                ledgerJournalTrans.CurrencyCode,
                                                                                updatePLA_Enq.Amount,
                                                                                exchRateHelper));

                    this.exciseUpdatePLARegisters_IN(updatePLA.eccTaxRegistrationNumberTable,
                                                    updatePLA_Enq.TaxComponentTable,
                                                    updatePLA_Enq.Amount,
                                                    numberSequence,
                                                    0,
                                                    ledgerJournalTrans,
                                                    ledgerDimension);
                }

                if (abs(taxTransIN.PostedTaxAmout)  < updatePLA_Enq.Amount)
                {
                    checkPlaAmount = updatePLA_Enq.Amount - abs(taxTransIN.PostedTaxAmout);

                    if (taxTransIN.PostedTaxAmout != 0)
                    {
                        //Debit PLA Interim Account
                        ledgerVoucher.addTrans(
                                LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucher.findLedgerVoucherObject(),
                                                                                    LedgerPostingType::LedgerJournal,
                                                                                    ledgerDimension,
                                                                                    ledgerJournalTrans.CurrencyCode,
                                                                                    abs(taxTransIN.PostedTaxAmout),
                                                                                    exchRateHelper));

                        this.exciseUpdatePLARegisters_IN(updatePLA.eccTaxRegistrationNumberTable,
                                                        updatePLA_Enq.TaxComponentTable,
                                                        abs(taxTransIN.PostedTaxAmout),
                                                        numberSequence,
                                                        0,
                                                        ledgerJournalTrans,
                                                        ledgerDimension);
                    }
                    //Debit remaining amount to PLA account
                    ledgerVoucher.addTrans(
                            LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucher.findLedgerVoucherObject(),
                                                                                LedgerPostingType::LedgerJournal,
                                                                                LedgerDimensionFacade::serviceCreateLedgerDimension(updatePLA_Enq.plaLedgerDimension, 0),
                                                                                ledgerJournalTrans.CurrencyCode,
                                                                                checkPlaAmount,
                                                                                exchRateHelper));

                    this.exciseUpdatePLARegisters_IN(updatePLA.eccTaxRegistrationNumberTable,
                                                    updatePLA_Enq.TaxComponentTable,
                                                    checkPlaAmount,
                                                    numberSequence,
                                                    LedgerDimensionFacade::serviceCreateLedgerDimension(updatePLA_Enq.plaLedgerDimension, 0),
                                                    ledgerJournalTrans,
                                                    0);
                }
            }
            else
            {
                ledgerVoucher.addTrans(
                                     LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucher.findLedgerVoucherObject(),
                                                                                           LedgerPostingType::LedgerJournal,
                                                                                           LedgerDimensionFacade::serviceCreateLedgerDimension(updatePLA_Enq.plaLedgerDimension, 0),
                                                                                           ledgerJournalTrans.CurrencyCode,
                                                                                           updatePLA_Enq.Amount,
                                                                                           exchRateHelper));

                numberSequence = NumberSeq::newGetNumFromCode(NumberSequenceTable::find(numSequenceRef.NumberSequenceTable).NumberSequence,NumberSeqScopeFactory::createDefaultScope(),true,false).num();

                this.exciseUpdatePLARegisters_IN(updatePLA.eccTaxRegistrationNumberTable,
                                                    updatePLA_Enq.TaxComponentTable,
                                                    updatePLA_Enq.Amount,
                                                    numberSequence,
                                                    LedgerDimensionFacade::serviceCreateLedgerDimension(updatePLA_Enq.plaLedgerDimension, 0),
                                                    ledgerJournalTrans,
                                                    0);
            }

            plaAmount += updatePLA_Enq.Amount * -1;
            check = true;
        }

        if (ledgerJournalTrans.AccountType       == LedgerJournalACType::Ledger &&
            ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
        {
            ledgerJournalTrans.AccountType = LedgerJournalACType::Vend;
            ledgerJournalTrans.LedgerDimension  = ledgerJournalTrans.OffsetLedgerDimension;
        }
        if (ledgerJournalTrans.AccountType       == LedgerJournalACType::Bank &&
            ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
        {
            ledgerJournalTrans.AccountType = LedgerJournalACType::Vend;
            ledgerJournalTrans.LedgerDimension  = ledgerJournalTrans.OffsetLedgerDimension;
        }
        if (check)
        {
            vendVoucher = VendVoucher::newVendVoucherJournal(ledgerJournalTrans, 0);
            vendVoucher.parmAmountCur(plaAmount);
            vendVoucher.parmPostingProfile(VendParameters::find().PostingProfile);
        }

        vendVoucher.parmTransVoucher('');
        vendVoucher.post(ledgerVoucher, vendTrans);

        Docu::copy(ledgerJournalTrans, vendTrans);
        VendInvoiceInfo::copy(ledgerJournalTrans, vendTrans);
        while select forupdate updatePLA_Enq
            where updatePLA_Enq.TransRecId == updatePLA.RecId
        {
            updatePLA_Enq.SourceRecID = ledgerJournalTrans.RecId;
            updatePLA_Enq.LedgerVoucher = voucher;
            updatePLA_Enq.TransDate = ledgerJournalTrans.TransDate;
            updatePLA_Enq.update();
        }

        updatePLA.Posted = NoYes::Yes;
        updatePLA.update();

        ledgerVoucher.end();
        ttscommit;

        if (check)
        {
            info(strfmt("@SYS25783", 1));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PostSettlement_IN construct(UpdatePLA_IN _updatePLA)
    {
        return new PostSettlement_IN(_updatePLA);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>