<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjControlPostingPosted</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjControlPostingPosted extends ProjControlPosting implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCloseDialog</Name>
				<Source><![CDATA[
    public boolean checkCloseDialog(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (!this.parmPeriodFrom())
        {
            return checkFailed("@SYS74628");
        }

        if ((select projPeriodLine where projPeriodLine.PeriodId == this.parmProjPeriodId() && projPeriodLine.PeriodFrom == this.parmPeriodFrom()).RecId)
        {
            return true;
        }
        else
        {
            return checkFailed("@SYS74628");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formStr(ProjControlPosting_Post),this);

        dialog.caption(ProjControlPostingPosted::description());
        dialog = this.dialogInternal(dialog,true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAction</Name>
				<Source><![CDATA[
    public boolean doAction(ProjControlPeriodTable _projControlPeriodTable)
    {
        boolean ret = false;

        ret = super(_projControlPeriodTable);

        if (ret)
        {
            if (_projControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Created)
            {
                ret = true;
            }
            else
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projControlPeriodStatusNew</Name>
				<Source><![CDATA[
    protected ProjControlPeriodStatus projControlPeriodStatusNew()
    {
        return ProjControlPeriodStatus::Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    public TransTxt transactionLogTxt()
    {
        return "@SYS92317";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    public TransactionLogType transactionLogType()
    {
        return TransactionLogType::ProjEstimate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriod</Name>
				<Source><![CDATA[
    public boolean validatePeriod(ProjControlPeriodTable  _projControlPeriodTable)
    {
        ProjTable           projTable;
        ProjOnAccTrans      projOnAccTrans;
        ProjOnAccTransSale  projOnAccTransSale;
        ProjRevRecContractLine projRevRecContractLine;
        boolean ret;

        ret = super(_projControlPeriodTable);

        if (LedgerParameters::find().AcknowledgementDate_IT)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00010, funcName());
            if (acknowledgementDate < transDate)
            {
                // Posting date may not exceed competence date.
                ret = checkFailed("@SYS99223");
            }
        }

        if (ret)
        {
            if(isContractLineUsed && contractLineBasedRevRecFeature)
            {
                while select projRevRecContractLine
                where projRevRecContractLine.RevenueRecognitionId          == _projControlPeriodTable.ProjId
                join RecId from projOnAccTrans
                where  projOnAccTrans.PSAContractLineNum        == projRevRecContractLine.ContractLineNum
                   join TransStatus from projOnAccTransSale
                   where projOnAccTransSale.TransId == projOnAccTrans.TransId
                   && (projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal ||
                       projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    if (projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                    {
                        ret = checkFailed(strFmt("@Proj:OnAccTransStatusMarkedCreditnoteInvalidForEstimatePosting", projOnAccTrans.ProjId));
                    }
                    else if (projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
                    {
                        ret = checkFailed(strFmt("@Proj:OnAccTransStatusCreditnoteProposalInvalidForEstimatePosting", projOnAccTrans.ProjId));
                    }
                }
            }
            else
            {
                while select ProjId, RecId from projTable
                where projTable.wipProject          == _projControlPeriodTable.ProjId
                join RecId from projOnAccTrans
                where  projOnAccTrans.ProjID        == projTable.ProjId
                   join TransStatus from projOnAccTransSale
                   where projOnAccTransSale.TransId == projOnAccTrans.TransId
                   && (projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal ||
                       projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    if (projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                    {
                        ret = checkFailed(strFmt("@Proj:OnAccTransStatusMarkedCreditnoteInvalidForEstimatePosting", projTable.ProjId));
                    }
                    else if (projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
                    {
                        ret = checkFailed(strFmt("@Proj:OnAccTransStatusCreditnoteProposalInvalidForEstimatePosting", projTable.ProjId));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePosting</Name>
				<Source><![CDATA[
    protected boolean validatePosting(ProjControlPeriodTable _projControlPeriodTable)
    {
        boolean ret = false;

        if (ProjRevRecHelper::getSalesPriceMatchingPrincipleForProjControlPeriodTable(_projControlPeriodTable) == ProjSalesPriceMatchingPrincip::MarkupPercentEstimateLine &&
            !ProjControlPeriodCostGroup::checkTotalContract(_projControlPeriodTable))
        {
            ret = true;
        }

        if (ProjControlPeriodCostGroup::checkTotalEstimateCTC(_projControlPeriodTable.ProjId,
            _projControlPeriodTable.ControlId,
            _projControlPeriodTable.PeriodFrom,
            _projControlPeriodTable.Version,
            this.projParameters().TotalEstimatePostingTolerance == ErrorTolerance::Accept ? ProjMsgLevel::Info : ProjMsgLevel::Warning))
        {
            if ((this.projParameters().TotalEstimatePostingTolerance == ErrorTolerance::Error)
                || (this.projParameters().TotalEstimatePostingTolerance == ErrorTolerance::Warning && !this.parmPostWarnings()))
            {
                ret = true;
            }
        }

        if (ret)
        {
            return checkFailed("@SYS117295");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription description()
    {
        return "@SYS75507";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryValues</Name>
				<Source><![CDATA[
    public void setQueryValues()
    {
        super();

        Query query = queryRun.query();

        QueryBuildDataSource projControlPeriodTable_ds = queryRun.query().dataSourceTable(tableNum(ProjControlPeriodTable));
        QueryBuildRange rangePeriodStatus = projControlPeriodTable_ds.findRange(fieldNum(ProjControlPeriodTable,PeriodStatus));

        if (!rangePeriodStatus)
        {
            rangePeriodStatus = projControlPeriodTable_ds.addRange(fieldNum(ProjControlPeriodTable,PeriodStatus));
        }

        rangePeriodStatus.value(queryValue(ProjControlPeriodStatus::Created));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>