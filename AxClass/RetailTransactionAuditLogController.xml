<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionAuditLogController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionAuditLogController</c> class orchestrates the whole record auditing flow.
/// </summary>
internal class RetailTransactionAuditLogController
{
    /// <summary>
    /// The record being audited.
    /// </summary>
    protected Common targetTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>RetailTransactionAuditLogController</c>.
    /// </summary>
    /// <param name = "_targetTable">The record being audited.</param>
    /// <returns>An instance of <c>RetailTransactionAuditLogController</c>.</returns>
    public static RetailTransactionAuditLogController construct(Common _targetTable)
    {
        RetailTransactionAuditLogController instance = new RetailTransactionAuditLogController();

        instance.targetTable = _targetTable;

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>auditChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes all steps to audit the change to the transaction record.
    /// </summary>
    public void auditChanges()
    {
        TableName tableName = tableId2Name(targetTable.TableId);

        using (var auditTelemetry = RetailTransactionAuditLogTelemetry::construct('AuditChanges', targetTable))
        {
            List listOfChanges = RetailTransactionAuditLogChangeCollector::collectChanges(targetTable);

            using (var persistTelemetry = RetailTransactionAuditLogTelemetry::construct('PersistChanges', targetTable))
            {
                RetailTransactionAuditLogStrategy::construct(targetTable).persist(listOfChanges);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>