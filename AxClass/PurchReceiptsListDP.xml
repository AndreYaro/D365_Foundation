<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReceiptsListDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReceiptsListDP</c> class is the report Data Provider class for the
/// <c>PurchReceiptsList</c> SSRS report.
/// </summary>
[SRSReportParameterAttribute(classStr(PurchReceiptsListContract))]
public class PurchReceiptsListDP extends SrsReportDataProviderPreProcess
{
    private container                   inventDimSetup;
    private container                   inventDimProductSetup;
    private InventDimCtrl_Rep_Purch     inventDimReport;
    private boolean                     insertInventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the report.
    /// </summary>
    /// <param name="_contract">
    /// An instance of <c>PurchReceiptsListContract</c> report contract class.
    /// </param>
    public void createData(PurchReceiptsListContract _contract)
    {
        this.parmDataContract(_contract);

        this.createReportData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report data for the purchase receipts list document.
    /// </summary>
    /// <returns>
    /// The <c>PurchReceiptsListHeaderTmp</c> record which is the header for the report data.
    /// </returns>
    protected PurchReceiptsListHeaderTmp createReportData()
    {
        this.initializeReportData();

        VendReceiptsListJour vendReceiptsListJour = VendReceiptsListJour::findRecId(this.parmReceiptsListContract().parmRecordId());

        return this.createPurchaseReceiptsList(vendReceiptsListJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report data.
    /// </summary>
    protected void initializeReportData()
    {
        this.initializeInventDimReportSetup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDimReportSetup</Name>
				<Source><![CDATA[
    private void initializeInventDimReportSetup()
    {
        inventDimReport             = InventDimCtrl_Rep_Purch::construct();
        inventDimReport.parmDocumentStatus(DocumentStatus::ReceiptsList);
        inventDimReport.initDimParmVisible();
        inventDimSetup              = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
        inventDimReport.initProductDimParmVisible();
        inventDimProductSetup       = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());

        insertInventDim = inventDimReport.isInventDimLine() || inventDimReport.isInventDimItemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseReceiptsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the purchase receipts list document.
    /// </summary>
    /// <param name = "_vendReceiptsListJour">
    /// A <c>VendReceiptsListJour</c> record which the purchase receipts list should be created for.
    /// </param>
    /// <returns>
    /// The <c>PurchReceiptsListHeaderTmp</c> record which is the header for the report data.
    /// </returns>
    protected PurchReceiptsListHeaderTmp createPurchaseReceiptsList(VendReceiptsListJour _vendReceiptsListJour)
    {
        PurchReceiptsListHeaderTmp purchReceiptsListHeaderTmp = this.createPurchaseReceiptsListHeader(_vendReceiptsListJour);

        this.createPurchaseReceiptsListLines(purchReceiptsListHeaderTmp, _vendReceiptsListJour);

        return purchReceiptsListHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseReceiptsListHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a purchase receipts list header.
    /// </summary>
    /// <param name = "_vendReceiptsListJour">
    /// A <c>VendReceiptsListJour</c> record which the purchase receipts list should be created for.
    /// </param>
    /// <returns>
    /// The created <c>PurchReceiptsListHeaderTmp</c> purchase receipts list header record.
    /// </returns>
    protected PurchReceiptsListHeaderTmp createPurchaseReceiptsListHeader(VendReceiptsListJour _vendReceiptsListJour)
    {
        PurchReceiptsListHeaderTmp purchReceiptsListHeaderTmp = this.initializePurchaseReceiptsListHeader(_vendReceiptsListJour);

        this.insertPurchaseReceiptsListHeader(purchReceiptsListHeaderTmp);

        return purchReceiptsListHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPurchaseReceiptsListHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the purchase receipts list header.
    /// </summary>
    /// <param name = "_purchReceiptsListHeaderTmp">
    /// A <c>PurchReceiptsListHeaderTmp</c> purchase receipts list header record to insert.
    /// </param>
    protected void insertPurchaseReceiptsListHeader(PurchReceiptsListHeaderTmp _purchReceiptsListHeaderTmp)
    {
        _purchReceiptsListHeaderTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseReceiptsListLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the purchase receipts list lines
    /// </summary>
    /// <param name = "_purchReceiptsListHeaderTmp">
    /// A <c>PurchReceiptsListHeaderTmp</c> record which is the purchase receipts list header.
    /// </param>
    /// <param name = "_vendReceiptsListJour">
    /// A <c>VendReceiptsListJour</c> record which the purchase receipts list should be created for.
    /// </param>
    protected void createPurchaseReceiptsListLines(PurchReceiptsListHeaderTmp _purchReceiptsListHeaderTmp, VendReceiptsListJour _vendReceiptsListJour)
    {
        VendReceiptsListTrans   vendReceiptsListTrans;
        InventDim               vendReceiptsListTransInventDim;

        QueryRun tradeLoopTrans = new QueryRun(this.buildPurchaseReceiptsListLineQuery(_vendReceiptsListJour));

        while (tradeLoopTrans.next())
        {
            vendReceiptsListTrans           = tradeLoopTrans.get(tableNum(VendReceiptsListTrans));
            vendReceiptsListTransInventDim  = tradeLoopTrans.get(tableNum(InventDim));

            if (this.mustCreatePurchaseReceiptsListLine(_purchReceiptsListHeaderTmp, _vendReceiptsListJour, vendReceiptsListTrans, vendReceiptsListTransInventDim))
            {
                this.createPurchaseReceiptsListLine(_purchReceiptsListHeaderTmp, _vendReceiptsListJour, vendReceiptsListTrans, vendReceiptsListTransInventDim);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPurchaseReceiptsListLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the purchase receipts list line query.
    /// </summary>
    /// <param name = "_vendReceiptsListJour">
    /// A <c>VendReceiptsListJour</c> record to retrieve purchase receipts list lines from.
    /// </param>
    /// <returns>
    /// The purchase receipts list line query.
    /// </returns>
    protected Query buildPurchaseReceiptsListLineQuery(VendReceiptsListJour _vendReceiptsListJour)
    {
        Query tradeLoopTrans = new TradeLoopTrans(_vendReceiptsListJour, tableNum(VendReceiptsListTrans)).buildQuery();

        QueryBuildDataSource vendReceiptsListTransDS    = tradeLoopTrans.dataSourceTable(tableNum(VendReceiptsListTrans));
        QueryBuildDataSource inventDimQBDS              = vendReceiptsListTransDS.addDataSource(tableNum(InventDim));
        inventDimQBDS.joinMode(JoinMode::OuterJoin);
        inventDimQBDS.fetchMode(QueryFetchMode::One2One);
        inventDimQBDS.addLink(fieldNum(VendReceiptsListTrans, InventDimId), fieldNum(InventDim, InventDimId));

        return tradeLoopTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreatePurchaseReceiptsListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a purchase receipts list line must be created.
    /// </summary>
    /// <param name = "_purchReceiptsListHeaderTmp">
    /// A <c>PurchReceiptsListHeaderTmp</c> record which is the purchase receipts list header.
    /// </param>
    /// <param name = "_vendReceiptsListJour">
    /// A <c>VendReceiptsListJour</c> record which is the purchase receipts list journal header.
    /// </param>
    /// <param name = "_vendReceiptsListTrans">
    /// A <c>VendReceiptsListTrans</c> record which the purchase receipts list line should be created for.
    /// </param>
    /// <param name = "_vendReceiptsListTransInventDim">
    /// An <c>InventDim</c> record associated with the purchase receipts list line.
    /// </param>
    /// <returns>
    /// true, if the purchase receipts list line must be created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method is meant as an extension point to change the decision whether a purchase receipts list line must be created.
    /// </remarks>
    protected boolean mustCreatePurchaseReceiptsListLine(
        PurchReceiptsListHeaderTmp  _purchReceiptsListHeaderTmp, 
        VendReceiptsListJour        _vendReceiptsListJour, 
        VendReceiptsListTrans       _vendReceiptsListTrans, 
        InventDim                   _vendReceiptsListTransInventDim)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseReceiptsListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a purchase receipts list line.
    /// </summary>
    /// <param name = "_purchReceiptsListHeaderTmp">
    /// A <c>PurchReceiptsListHeaderTmp</c> record which is the purchase receipts list header.
    /// </param>
    /// <param name = "_vendReceiptsListJour">
    /// A <c>VendReceiptsListJour</c> record which is the purchase receipts list journal header.
    /// </param>
    /// <param name = "_vendReceiptsListTrans">
    /// A <c>VendReceiptsListTrans</c> record which the purchase receipts list line should be created for.
    /// </param>
    /// <param name = "_vendReceiptsListTransInventDim">
    /// An <c>InventDim</c> record associated with the purchase receipts list line.
    /// </param>
    /// <returns>
    /// The created <c>PurchPackingSlipTmp</c> purchase receipts list line record.
    /// </returns>
    protected PurchReceiptsListDetailsTmp createPurchaseReceiptsListLine(
        PurchReceiptsListHeaderTmp  _purchReceiptsListHeaderTmp, 
        VendReceiptsListJour        _vendReceiptsListJour, 
        VendReceiptsListTrans       _vendReceiptsListTrans, 
        InventDim                   _vendReceiptsListTransInventDim)
    {
        PurchReceiptsListDetailsTmp purchReceiptsListDetailsTmp = this.initializePurchaseReceiptsListLine(_purchReceiptsListHeaderTmp, _vendReceiptsListJour, _vendReceiptsListTrans, _vendReceiptsListTransInventDim);
        
        this.insertPurchaseReceiptsListLine(purchReceiptsListDetailsTmp);

        return purchReceiptsListDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPurchaseReceiptsListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the purchase receipts list line.
    /// </summary>
    /// <param name = "_purchReceiptsListDetailsTmp">
    /// A <c>PurchReceiptsListDetailsTmp</c> purchase receipts list line record to insert.
    /// </param>
    protected void insertPurchaseReceiptsListLine(PurchReceiptsListDetailsTmp _purchReceiptsListDetailsTmp)
    {
        _purchReceiptsListDetailsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchReceiptsListHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>PurchReceiptsListHeaderTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>PurchReceiptsListHeaderTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PurchReceiptsListHeaderTmp))]
    public PurchReceiptsListHeaderTmp getPurchReceiptsListHeaderTmp()
    {
        PurchReceiptsListHeaderTmp purchReceiptsListHeaderTmp;

        this.setTransactionConnection(PurchReceiptsListHeaderTmp);

        select purchReceiptsListHeaderTmp;
        
        return purchReceiptsListHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchReceiptsListTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from the <c>PurchReceiptsListDetailsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>PurchReceiptsListDetailsTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PurchReceiptsListDetailsTmp))]
    public PurchReceiptsListDetailsTmp getPurchReceiptsListTmp()
    {
        PurchReceiptsListDetailsTmp purchReceiptsListTmp;

        this.setTransactionConnection(purchReceiptsListTmp);

        select purchReceiptsListTmp;
        
        return purchReceiptsListTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Item ID.
    /// </summary>
    /// <param name = "_vendReceiptsListTrans">
    /// A <c>VendReceiptsListTrans</c> record to retrieve the item ID from.
    /// </param>
    /// <param name = "_vendReceiptsListTransInventDim">
    /// An <c>InventDim</c> record associated with the purchase receipts list line.
    /// </param>
    /// <returns>
    /// The Item ID.
    /// </returns>
    private ItemId  itemId(VendReceiptsListTrans _vendReceiptsListTrans, InventDim _vendReceiptsListTransInventDim)
    {
        ItemId  itemId = _vendReceiptsListTrans.ItemId;

        if (inventDimReport.isInventDimItemId())
        {
            itemId += inventDimReport.reportStrItemId(_vendReceiptsListTransInventDim);
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the Invent Quantity and Invent Storage Dimensions.
    /// </summary>
    /// <param name = "_vendPackingSlipJour">
    /// A <c>VendPackingSlipJour</c> record which is the purchase receipts list journal header.
    /// </param>
    /// <param name = "_vendPackingSlipTrans">
    /// A <c>VendPackingSlipTrans</c> record which the purchase receipts list line should be initialized from.
    /// </param>
    /// <param name = "_vendPackingSlipTransInventDim">
    /// An <c>InventDim</c> record associated with the purchase receipts list line.
    /// </param>
    /// <returns>
    /// The string with the inventory dimensions.
    /// </returns>
    /// <remarks>
    /// This method is called for each of the transactions.
    /// </remarks>
    protected str printInventTrans(VendReceiptsListJour _vendReceiptsListJour, VendReceiptsListTrans _vendReceiptsListTrans, InventDim _vendReceiptsListTransInventDim)
    {
        InventQty               qtyRemain = _vendReceiptsListTrans.InventQty;
        InventQty               qtyTrans;
        InventTransOrigin       localInventTransOrigin;
        InventTrans             inventTrans;
        InventDim               localInventDim;
        InventReportDimHistory  inventReportDimHistory;
        str                     dimHistoryStr;

        void inventDimPrint()
        {
            InventQty               purchQty;
            str                     inventDimString;
            #xppTexts

            if (inventReportDimHistory.Qty && localInventDim)
            {
                inventDimString = FormLetter::inventDimReport(localInventDim, inventDimSetup, infolog.language());
                if (inventDimString)
                {
                    if (_vendReceiptsListTrans.StockedProduct)
                    {
                        purchQty    = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_vendReceiptsListTrans.ItemId, 
                                                                                                            _vendReceiptsListTrans.InventDimId,
                                                                                                            inventReportDimHistory.Qty,
                                                                                                            InventTable::find(_vendReceiptsListTrans.ItemId).inventUnitId(),
                                                                                                            _vendReceiptsListTrans.PurchUnit, 
                                                                                                            NoYes::Yes);
                    }
                    else
                    {
                        purchQty    = inventReportDimHistory.Qty;
                    }
                    if (dimHistoryStr)
                    {
                        dimHistoryStr += #newline;
                    }
                    dimHistoryStr += strFmt("@SYS321794", purchQty, inventDimString);
                }
            }
        }

        if (_vendReceiptsListJour.isProforma())
        {
            if (_vendReceiptsListTrans.StockedProduct)
            {
                if (qtyRemain)
                {
                    while select inventTrans
                            order by StatusReceipt, InventDimId
                        where inventTrans.StatusReceipt     == StatusReceipt::Ordered
                               && inventTrans.StatusIssue   == StatusIssue::None
                        join localInventDim
                            where localInventDim.InventDimId == inventTrans.InventDimId
                        exists join localInventTransOrigin
                            where localInventTransOrigin.InventTransId  == _vendReceiptsListTrans.InventTransId
                                &&  inventTrans.InventTransOrigin       == localInventTransOrigin.RecId
                    {
                        if (qtyRemain)
                        {
                            if (abs(inventTrans.Qty) > qtyRemain)
                            {
                                qtyTrans   = qtyRemain;
                                qtyRemain  = 0;
                            }
                            else
                            {
                                qtyTrans   = inventTrans.Qty;
                                qtyRemain -= abs(qtyTrans);
                            }

                            inventReportDimHistory.Qty = qtyTrans;
                            inventDimPrint();
                        }
                        else
                        {
                            break;
                        }
                    }
                }
            }
            else
            {
                localInventDim = _vendReceiptsListTransInventDim;
                inventReportDimHistory.Qty = _vendReceiptsListTrans.PurchQty;
                inventDimPrint();
            }
        }
        else
        {
            while select inventReportDimHistory
                where inventReportDimHistory.InventTransId  == _vendReceiptsListTrans.InventTransId             &&
                  inventReportDimHistory.TransRefId         == _vendReceiptsListTrans.ReceiptsListId            &&
                  inventReportDimHistory.TransactionLogType == InventReportDimHistoryLogType::PurchReceiptList
                  join localInventDim
                        where localInventDim.InventDimId == inventReportDimHistory.InventDimId
            {
                inventDimPrint();
            }
        }

        return dimHistoryStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic. Calls helper methods and inserts data to temporary table.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by
    /// SSRS at runtime. The method should compute data and populate the data tables that will be
    /// returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        PurchReceiptsListContract   contract                    = this.parmDataContract() as PurchReceiptsListContract;
        PurchReceiptsListHeaderTmp  purchReceiptsListHeaderTmp  = PurchReceiptsListHeaderTmp::findJourRecId(contract.parmRecordId());

        if (purchReceiptsListHeaderTmp.RecId && purchReceiptsListHeaderTmp.IsProForma)
        {
            //the report data is already created so use it. this is the proforma scenario.
            this.copyReportData(purchReceiptsListHeaderTmp);
        }
        else
        {
            this.createReportData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the report data for a purchase receipts list document.
    /// </summary>
    /// <param name = "_purchReceiptsListHeaderTmp">
    /// A <c>PurchReceiptsListHeaderTmp</c> record which is the purchase receipts list to be copied.
    /// </param>
    protected void copyReportData(PurchReceiptsListHeaderTmp _purchReceiptsListHeaderTmp)
    {
        this.copyHeader(_purchReceiptsListHeaderTmp);
        this.copyLines(_purchReceiptsListHeaderTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the purchase receipts list header.
    /// </summary>
    /// <param name = "_purchReceiptsListHeaderTmp">
    /// A <c>PurchReceiptsListHeaderTmp</c> record to copy.
    /// </param>
    protected void copyHeader(PurchReceiptsListHeaderTmp _purchReceiptsListHeaderTmp)
    {
        RecordSortedList recordList = new RecordSortedList(tableNum(PurchReceiptsListHeaderTmp));
        recordList.sortOrder(fieldNum(PurchReceiptsListHeaderTmp, RecId));
        recordList.ins(_purchReceiptsListHeaderTmp);

         //the created data is copied so it should be deleted.
        this.deleteCopiedHeader(_purchReceiptsListHeaderTmp);

        recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user user connection so the framework will delete it automatically after the report is done.
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCopiedHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the copied purchase receipts list header.
    /// </summary>
    /// <param name = "_purchReceiptsListHeaderTmp">
    /// A <c>PurchReceiptsListHeaderTmp</c> record which is the copied purchase receipts list.
    /// </param>
    protected void deleteCopiedHeader(PurchReceiptsListHeaderTmp _purchReceiptsListHeaderTmp)
    {
        PurchReceiptsListHeaderTmp purchReceiptsListHeaderTmp;

        delete_from purchReceiptsListHeaderTmp
            where purchReceiptsListHeaderTmp.RecId == _purchReceiptsListHeaderTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies purchase receipts list lines.
    /// </summary>
    /// <param name = "_purchReceiptsListHeaderTmp">
    /// A <c>PurchReceiptsListHeaderTmp</c> record which is the purchase receipts list header for the lines to copy.
    /// </param>
    protected void copyLines(PurchReceiptsListHeaderTmp _purchReceiptsListHeaderTmp)
    {
        RecordSortedList recordList = new RecordSortedList(tableNum(PurchReceiptsListDetailsTmp));
        recordList.sortOrder(fieldNum(PurchReceiptsListDetailsTmp, RecId));

        PurchReceiptsListDetailsTmp purchReceiptsListDetailsTmp;
        while select purchReceiptsListDetailsTmp
                    where purchReceiptsListDetailsTmp.CreatedTransactionId == _purchReceiptsListHeaderTmp.CreatedTransactionId
        {
            recordList.ins(purchReceiptsListDetailsTmp);
        }

        //the created data is copied so it should be deleted.
        this.deleteCopiedLines(_purchReceiptsListHeaderTmp);

        recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user user connection so the framework will delete it automatically after the report is done.
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCopiedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the copied purchase receipts list lines.
    /// </summary>
    /// <param name = "_purchReceiptsListHeaderTmp">
    /// A <c>PurchReceiptsListHeaderTmp</c> record which is the copied purchase receipts list.
    /// </param>
    protected void deleteCopiedLines(PurchReceiptsListHeaderTmp _purchReceiptsListHeaderTmp)
    {
        purchReceiptsListDetailsTmp purchReceiptsListDetailsTmp;

        delete_from purchReceiptsListDetailsTmp        
            where purchReceiptsListDetailsTmp.CreatedTransactionId == _purchReceiptsListHeaderTmp.CreatedTransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns catch weight fields.
    /// </summary>
    /// <param name = "_purchReceiptsListTmp">
    /// A <c>PurchReceiptsListDetailsTmp</c> record to assign catch weight values to.
    /// </param>
    /// <param name = "_vendReceiptsListTrans">
    /// A <c>VendReceiptsListTrans</c> record to retrieve catch weight values from.
    /// </param>
    /// <param name = "_purchReceiptsListHeaderTmp">
    /// A <c>PurchReceiptsListHeaderTmp</c> record which is the purchase receipts list header.
    /// </param>
    /// <remarks>
    /// Concatenates the field values along with labels to show as a seperate
    /// line in the report.
    /// </remarks>
    private void setPdsFields(PurchReceiptsListHeaderTmp _purchReceiptsListHeaderTmp, VendReceiptsListTrans _vendReceiptsListTrans, PurchReceiptsListDetailsTmp _purchReceiptsListTmp)
    {
        if (_purchReceiptsListHeaderTmp.PdsEnabled)
        {
            _purchReceiptsListTmp.PdsCWQty = _vendReceiptsListTrans.PdsCWInventQty;
            _purchReceiptsListTmp.PdsCWUnit = _vendReceiptsListTrans.pdsCWUnitId();

            if (currentSessionLanguageRTL())
            {
                // Flip the order of labels and values.
                if (_purchReceiptsListTmp.PdsCWQty)
                {
                    _purchReceiptsListTmp.PdsCWStr = '  ' + strFmt("@SYS191501", "@PDS1", _purchReceiptsListTmp.PdsCWQty);
                }

                if (_purchReceiptsListTmp.PdsCWUnit)
                {
                    _purchReceiptsListTmp.PdsCWStr = strFmt("@SYS191501", "@PDS3", _purchReceiptsListTmp.PdsCWUnit) + _purchReceiptsListTmp.PdsCWStr;
                }
            }
            else
            {
                if (_purchReceiptsListTmp.PdsCWQty)
                {
                    _purchReceiptsListTmp.PdsCWStr = strFmt("@SYS191501", "@PDS1", _purchReceiptsListTmp.PdsCWQty) + '  ';
                }

                if (_purchReceiptsListTmp.PdsCWUnit)
                {
                    _purchReceiptsListTmp.PdsCWStr += strFmt("@SYS191501", "@PDS3", _purchReceiptsListTmp.PdsCWUnit);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchaseReceiptsListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a purchase receipts list line.
    /// </summary>
    /// <param name = "_purchReceiptsListHeaderTmp">
    /// A <c>PurchPackingSlipHeaderTmp</c> record which is the purchase receipts list header.
    /// </param>
    /// <param name = "_vendPackingSlipVersion">
    /// A <c>PurchReceiptsListHeaderTmp</c> record which is the version of the purchase receipts list.
    /// </param>
    /// <param name = "_vendReceiptsListJour">
    /// A <c>VendReceiptsListJour</c> record which is the purchase receipts list journal header.
    /// </param>
    /// <param name = "_vendReceiptsListTrans">
    /// A <c>VendReceiptsListTrans</c> record which the purchase receipts list line should be initialized from.
    /// </param>
    /// <param name = "_vendReceiptsListTransInventDim">
    /// An <c>InventDim</c> record associated with the purchase receipts list line.
    /// </param>
    /// <returns>
    /// The initialized <c>PurchPackingSlipTmp</c> purchase receipts list line record.
    /// </returns>
    protected PurchReceiptsListDetailsTmp initializePurchaseReceiptsListLine(
        PurchReceiptsListHeaderTmp  _purchReceiptsListHeaderTmp, 
        VendReceiptsListJour        _vendReceiptsListJour, 
        VendReceiptsListTrans       _vendReceiptsListTrans, 
        InventDim                   _vendReceiptsListTransInventDim)
    {
        PurchReceiptsListDetailsTmp purchReceiptsListTmp;

        this.setTransactionConnection(purchReceiptsListTmp);

        purchReceiptsListTmp.JournalRecId           = _vendReceiptsListJour.RecId;
        purchReceiptsListTmp.VendReceiptsListTrans  = _vendReceiptsListTrans.RecId;

        purchReceiptsListTmp.ItemId                 = this.itemId(_vendReceiptsListTrans, _vendReceiptsListTransInventDim);

        purchReceiptsListTmp.Name                   = _vendReceiptsListTrans.Name;
        purchReceiptsListTmp.PurchQty               = _vendReceiptsListTrans.PurchQty;
        purchReceiptsListTmp.PurchUnit              = _vendReceiptsListTrans.PurchUnit;
        purchReceiptsListTmp.ConfirmedDlv           = _vendReceiptsListTrans.DeliveryDate;
        purchReceiptsListTmp.InventQty              = _vendReceiptsListTrans.InventQty;
        purchReceiptsListTmp.PurchaseLineLineNumber = _vendReceiptsListTrans.PurchaseLineLineNumber;

        if (insertInventDim)
        {
            purchReceiptsListTmp.InventDimProduct   = FormLetter::inventDimReport(_vendReceiptsListTransInventDim, inventDimProductSetup, infolog.language());
        }

        this.setPdsFields(_purchReceiptsListHeaderTmp, _vendReceiptsListTrans, purchReceiptsListTmp);

        purchReceiptsListTmp.InventDimPrint         = this.printInventTrans(_vendReceiptsListJour, _vendReceiptsListTrans, _vendReceiptsListTransInventDim);

        return purchReceiptsListTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchaseReceiptsListHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a purchase receipts list header.
    /// </summary>
    /// <param name = "_vendReceiptsListJour">
    /// A <c>VendReceiptsListJour</c> record which the purchase receipts list header should be initialized from.
    /// </param>
    /// <returns>
    /// The initialized <c>PurchReceiptsListHeaderTmp</c> purchase receipts list header record.
    /// </returns>
    protected PurchReceiptsListHeaderTmp initializePurchaseReceiptsListHeader(VendReceiptsListJour _vendReceiptsListJour)
    {
        #ISOCountryRegionCodes

        CompanyInfo companyInfo = CompanyInfo::find();

        PurchReceiptsListHeaderTmp purchReceiptsListHeaderTmp;

        this.setTransactionConnection(purchReceiptsListHeaderTmp);

        purchReceiptsListHeaderTmp.JournalRecId               = _vendReceiptsListJour.RecId;

        purchReceiptsListHeaderTmp.PdsEnabled                 = #PdsCatchWeightEnabled;

        purchReceiptsListHeaderTmp.CompanyPhone               = companyInfo.phone();
        purchReceiptsListHeaderTmp.CompanyTeleFax             = companyInfo.teleFax();
        purchReceiptsListHeaderTmp.CompanyGiro                = companyInfo.Giro;
        purchReceiptsListHeaderTmp.CompanyCoRegNum            = companyInfo.CoRegNum;
        purchReceiptsListHeaderTmp.CompanyLogo                = FormLetter::companyLogo();

        // <GEECZ>
        if (SysCountryRegionCode::countryInfo() == #isoCZ)
        {
            purchReceiptsListHeaderTmp.CompanyRegNum    = companyInfo.RegNum;
            purchReceiptsListHeaderTmp.CompanyEmail     = companyInfo.email();
            purchReceiptsListHeaderTmp.CompanyName      = companyInfo.Name;
            purchReceiptsListHeaderTmp.CompanyAddress   = companyInfo.postalAddress().Address;

            purchReceiptsListHeaderTmp.RegNumCompaniesFieldMap::initCommercialRegisterFromTaxRegistration(companyInfo, _vendReceiptsListJour.ReceiptsListDate);

            BankAccountTable companyBankAccount = BankAccountTable::find(companyInfo.Bank);
            purchReceiptsListHeaderTmp.CompanyBankAccountName       = companyBankAccount.Name;
            purchReceiptsListHeaderTmp.CompanyBankAccountNum        = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
                                                                        companyBankAccount.AccountNum : "@AccountsReceivable:FiveAsterisk";
            purchReceiptsListHeaderTmp.CompanyBankAccountRoutingNum = companyBankAccount.RegistrationNum;
        }
        // </GEECZ>

        if (conLen(purchReceiptsListHeaderTmp.CompanyLogo) == 0)
        {
            purchReceiptsListHeaderTmp.PrintLogo              = NoYes::No;
        }
        else
        {
            purchReceiptsListHeaderTmp.PrintLogo              = NoYes::Yes;
        }
        purchReceiptsListHeaderTmp.CompanyEnterpriseNumber    = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _vendReceiptsListJour.ReceiptsListDate);

        purchReceiptsListHeaderTmp.DeliveryName               = _vendReceiptsListJour.DeliveryName;
        purchReceiptsListHeaderTmp.DeliveryAddress            = _vendReceiptsListJour.deliveryAddress();
        purchReceiptsListHeaderTmp.PurchId                    = _vendReceiptsListJour.PurchId;
        purchReceiptsListHeaderTmp.ReceiptsListDate           = _vendReceiptsListJour.ReceiptsListDate;
        purchReceiptsListHeaderTmp.DeliveryMode               = _vendReceiptsListJour.deliveryMode();
        purchReceiptsListHeaderTmp.DeliveryTerms              = _vendReceiptsListJour.deliveryTerms();
        purchReceiptsListHeaderTmp.ReqAttention               = _vendReceiptsListJour.ReqAttention;
        purchReceiptsListHeaderTmp.ShowCompanyVATNum          = VendFormletterParameters::find().PrintPurchReceiptsListVATNum;
        purchReceiptsListHeaderTmp.CompanyVATNum              = TaxRegistration::getTaxRegNumFromJournal(
            _vendReceiptsListJour.TableId,
            _vendReceiptsListJour.RecId,
            _vendReceiptsListJour.ReceiptsListDate);
        purchReceiptsListHeaderTmp.IsProForma                 = _vendReceiptsListJour.isProforma();

        return purchReceiptsListHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiptsListContract</Name>
				<Source><![CDATA[
    public PurchReceiptsListContract parmReceiptsListContract()
    {
        return this.parmDataContract() as PurchReceiptsListContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the database transaction connection for a record from the connection associated with the report.
    /// </summary>
    /// <param name = "_reportRecord">
    /// A record to set database transaction for.
    /// </param>
    final protected void setTransactionConnection(Common _reportRecord)
    {
        var connection = this.parmUserConnection();

        if (connection)
        {
            _reportRecord.setConnection(connection);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>