<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessProcessGenericProcessFormPart_AppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension class of the <c>BusinessProcessGenericProcessFormPart</c> form, which is used for retail business process.
/// </summary>
[ExtensionOf(formStr(BusinessProcessGenericProcessFormPart))]
final class BusinessProcessGenericProcessFormPart_AppSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        // need to init filter combobox before calling next init()
        if (this.getGenericSubtype() == BusinessProcessGenericSubtype::Retail)
        {
            Set headerStatusEnumSet = new Set(Types::Enum);
            headerStatusEnumSet.add(BusinessProcessHeaderStatus::NotStarted);
            headerStatusEnumSet.add(BusinessProcessHeaderStatus::InProgress);
            headerStatusEnumSet.add(BusinessProcessHeaderStatus::Completed);
            sysFormEnumComboBox::newParameters(this, this.controlId(formControlStr(BusinessProcessGenericProcessFormPart, ProcessStatusFilter)), enumNum(BusinessProcessHeaderStatus), headerStatusEnumSet);
        }

        next init();

        if (this.getGenericSubtype() == BusinessProcessGenericSubtype::Retail)
        {
            FormControl notStartedControl = this.design(0).controlName(formControlStr(BusinessProcessGenericProcessFormPart, NotStartedStatus));
            notStartedControl.visible(true);

            FormControl processCardControl = this.design(0).controlName(formControlStr(BusinessProcessGenericProcessFormPart, ProcessCard));
            processCardControl.visible(false);

            FormControl processFieldGroupControl = this.design(0).controlName(formControlStr(BusinessProcessGenericProcessFormPart, ProcessFieldGroup));
            processFieldGroupControl.visible(true);

            FormFunctionButtonControl editProcessHeaderControl = this.design(0).controlName(formControlStr(BusinessProcessGenericProcessFormPart, EditProcessHeader));
            editProcessHeaderControl.autoRefreshData(true);

            FormControl descriptionControl = this.design(0).controlName(formControlStr(BusinessProcessGenericProcessFormPart, BusinessProcessTask_Description));
            descriptionControl.visible(false);
            
            FormControl notesControl = this.design(0).controlName(formControlStr(BusinessProcessGenericProcessFormPart, BusinessProcessTask_Notes));
            notesControl.visible(true);

            FormControl taskCanceledStatusControl = this.design(0).controlName(formControlStr(BusinessProcessGenericProcessFormPart, CanceledStatus));
            taskCanceledStatusControl.visible(false);

            FormControl isOptional = this.design(0).controlName(formControlStr(BusinessProcessGenericProcessFormPart, BusinessProcessTask_IsOptional));
            isOptional.visible(false);

            FormControl ownerControl = this.design(0).controlName(formControlStr(BusinessProcessGenericProcessFormPart, BusinessProcessHeader_ProcessOwner));
            ownerControl.visible(false);

            BusinessProcessHeader_ds.query().dataSourceNo(1).addSortField(fieldNum(BusinessProcessHeader, TargetDate), SortOrder::Ascending);
            
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>