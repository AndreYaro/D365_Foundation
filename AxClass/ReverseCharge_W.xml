<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReverseCharge_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The class <c>ReverseCharge_W</c> contains logic of appliyng reverse charge tax groups to document lines.
/// </summary>
/// <remarks>
///   Depending on type of document appropriate subclass created.
///   Method <c>lineDSPreWrite</c> must be called before super in datasource write method and <c>lineDSPostWrite</c> after.
/// </remarks>
abstract class ReverseCharge_W
{
    protected boolean   enabled;
    protected boolean   isHeaderInitialized;

    protected TaxGroup  purchTaxGroup,
                        salesTaxGroup;

    protected Map       categoryMap;   //Map to cache category to item group id relation
    protected Set       ruleSet;
    protected Map       itemGroupMap;  //Map to cache item to item group id relation

    protected Map       lineGroupMap;  //Map to cache line rec id to item group id relation
    protected Map       lineAmountMap; //Map to cache line amounts
    protected Map       rulePromptMap; //Map to store user entered values whether if he should not be prompted for rule

    protected Common    headerRecord,
                        lineRecord;

    protected RecId     lastHeaderRecId;

    protected CountryRegionType partnerCountryRegionType,
                                deliveryCountryRegionType;

    protected ReverseChargeItemGroupId_W  itemGroupId;

    protected boolean   updateMatchingLines;

    protected ReverseChargeItemGroupId_W    ruleItemGroupId;
    protected AmountMST                     ruleThreshold;
    protected LineAmount                    currentlineAmount; //To store current line amount until rec id was assigned and line was cached

    protected boolean lineNotInitialized;
	
    private Map ruleApplyMap;
    private container ruleApplyCon;

					
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRuleApplyCon</Name>
				<Source><![CDATA[
    internal container getRuleApplyCon()
    {
        return this.ruleApplyMap().pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateMatchingLines</Name>
				<Source><![CDATA[
    public boolean parmUpdateMatchingLines(boolean _updateMatchingLines = updateMatchingLines)
    {
        updateMatchingLines = _updateMatchingLines;
        return updateMatchingLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemGroupNoThreshold</Name>
				<Source><![CDATA[
    /// <summary>
    ///   In case when no threshold is set in rule and that's first pass on order lines, checks if item group matches group in rule.
    /// </summary>
    /// <param name = "_purchSales">
    ///   Is purchase or sales related operation.
    /// </param>
    /// <param name = "_itemId">
    ///   Item id.
    /// </param>
    /// <param name = "_ecoResCategoryId">
    ///   Category id.
    /// </param>
    /// <returns>
    ///   True if line is valid for reverse charge; Otherwise, false.
    /// </returns>
    protected boolean checkItemGroupNoThreshold(ReverseChargePurchSales_W _purchSales, ItemId _itemId, EcoResCategoryId _ecoResCategoryId)
    {
        return !ruleItemGroupId || ruleThreshold ||
            ruleItemGroupId == this.findGroupByItemCategory(_purchSales , _itemId, _ecoResCategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineAmountMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes map which contains cached order lines and its amounts.
    /// </summary>
    /// <returns>
    ///  <c>Map</c>object.
    /// </returns>
    protected Map initLineAmountMap()
    {
        if (!lineAmountMap)
        {
            lineAmountMap = new Map(Types::Int64, Types::Real);
        }
        return lineAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addChildCategories</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds child categories to map which contains relationships between reverse charge item groups and categories.
    /// </summary>
    /// <param name = "_reverseChargeItemGroupId">
    ///     Id of reverse charge item group.
    /// </param>
    /// <param name = "_ecoResCategoryId">
    ///     Parent category id.
    /// </param>
    private void addChildCategories(ReverseChargeItemGroupId_W _reverseChargeItemGroupId, EcoResCategoryId _ecoResCategoryId)
    {
        EcoResCategory ecoResCategory;

        while select RecId from ecoResCategory
            where ecoResCategory.ParentCategory == _ecoResCategoryId
        {
            categoryMap.insert(ecoResCategory.RecId, _reverseChargeItemGroupId);

            this.addChildCategories(_reverseChargeItemGroupId, ecoResCategory.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineToCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds line record to cache which holds relationship between item groups and document lines
    /// </summary>
    /// <param name = "_itemGroupId">
    ///     Reverse charge item group code.
    /// </param>
    /// <param name = "_lineRecId">
    ///     Record id of line to be added to cache; Optional.
    /// </param>
    protected void addLineToCache(
        ReverseChargeItemGroupId_W _itemGroupId = itemGroupId,
        RecId _lineRecId = lineRecord.RecId)
    {
        Set  lineRecIdSet;

        if (_lineRecId)
        {
            if (lineGroupMap)
            {
                if (lineGroupMap.exists(_itemGroupId))
                {
                    lineRecIdSet = lineGroupMap.lookup(_itemGroupId);
                }
                else
                {
                    lineRecIdSet = new Set(Types::Int64);
                    lineGroupMap.insert(_itemGroupId, lineRecIdSet);
                }

                lineRecIdSet.add(_lineRecId);
            }

            if (currentlineAmount)
            {
                this.initLineAmountMap();
                lineAmountMap.insert(_lineRecId, currentLineAmount);
                currentLineAmount = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns document type for current document.
    /// </summary>
    /// <returns>
    ///   <c>ReverseChargeDocumentType_W</c> value.
    /// </returns>
    abstract protected ReverseChargeDocumentType_W documentType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGroupByItemCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Searches for reverse charge item group by given item id and category.
    /// </summary>
    /// <param name = "_purchSales">
    ///   <c>ReverseChargePurchSales_W</c> value.
    /// </param>
    /// <param name = "_itemId">
    ///   Item id.
    /// </param>
    /// <param name = "_ecoResCategoryId">
    ///   Category id.
    /// </param>
    /// <returns>
    ///   Item group id value.
    /// </returns>
    public ReverseChargeItemGroupId_W findGroupByItemCategory(
        ReverseChargePurchSales_W _purchSales,
        ItemId                    _itemId,
        EcoResCategoryId          _ecoResCategoryId)
    {
        ReverseChargeItemGroupData_W  reverseChargeItemGroupData;
        InventTable                   inventTable;
        ReverseChargeItemGroupId_W    reverseChargeItemGroupId;
        str                           key;

        key = _itemId ? _itemId : int642str(_ecoResCategoryId);

        if (this.itemGroupMap().exists(key))
        {
            reverseChargeItemGroupId = this.itemGroupMap().lookup(key);
        }
        else
        {
            if (_itemId)
            {
                select firstOnly GroupId from reverseChargeItemGroupData
                    where reverseChargeItemGroupData.PurchSales == _purchSales
                       && reverseChargeItemGroupData.ItemCode   == TableGroupCategoryAll::Table
                       && reverseChargeItemGroupData.ItemId     == _itemId;

                reverseChargeItemGroupId = reverseChargeItemGroupData.GroupId;

                if (!reverseChargeItemGroupId)
                {
                    inventTable = InventTable::find(_itemId);

                    select firstOnly GroupId from reverseChargeItemGroupData
                        where reverseChargeItemGroupData.PurchSales  == _purchSales
                           && reverseChargeItemGroupData.ItemCode    == TableGroupCategoryAll::Group
                           && reverseChargeItemGroupData.ItemGroupId == inventTable.itemGroupId();

                    reverseChargeItemGroupId = reverseChargeItemGroupData.GroupId;
                }
            }

            if ((!_itemId || !reverseChargeItemGroupId) &&
                _ecoResCategoryId                       &&
                categoryMap.exists(_ecoResCategoryId))
            {
                reverseChargeItemGroupId = categoryMap.lookup(_ecoResCategoryId);
            }

            if (!reverseChargeItemGroupId)
            {
                select firstOnly GroupId from reverseChargeItemGroupData
                        where reverseChargeItemGroupData.PurchSales == _purchSales
                            && reverseChargeItemGroupData.ItemCode  == TableGroupCategoryAll::All;

                reverseChargeItemGroupId = reverseChargeItemGroupData.GroupId;
            }

            this.itemGroupMap().insert(key, reverseChargeItemGroupId);
        }

        return reverseChargeItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes variables when header record changes.
    /// </summary>
    protected void headerChanged()
    {
        isHeaderInitialized = true;

        lastHeaderRecId = headerRecord.RecId;

        lineGroupMap = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerDSPostWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Method validates if rules are applicable in case when header is modified and sets reverse charge tax groups.
    /// </summary>
    public void headerDSPostWrite()
    {
        if (this.isEnabled() &&
            lineRecord.RecId)
        {
            if (this.isHeaderChanged())
            {
                this.headerChanged();

                if (isHeaderInitialized)
                {
                    this.lineChanged();
                    this.setReverseChargeGroupIfApplicable(true);

                    this.addLineToCache();
                    this.setReverseChargeGroupMatchingLines(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDSPreDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Method removes cached amount from cache.
    /// </summary>
    public void lineDSPreDelete()
    {
        if (this.isEnabled() &&
            lineAmountMap &&
            lineAmountMap.exists(lineRecord.RecId))
        {
            lineAmountMap.remove(lineRecord.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns rec id of document header record.
    /// </summary>
    /// <returns>
    ///   Rec id value.
    /// </returns>
    protected RecId headerRecId()
    {
        return headerRecord.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCategoryMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes <c>Map</c> object which caches relations between item groups and categories.
    /// </summary>
    private void initCategoryMap()
    {
        ReverseChargeItemGroupData_W  reverseChargeItemGroupData;

        categoryMap = new Map(Types::Int64, Types::Int64);

        while select GroupId, EcoResCategoryId from reverseChargeItemGroupData
            where reverseChargeItemGroupData.ItemCode == TableGroupCategoryAll::Category
        {
            categoryMap.insert(reverseChargeItemGroupData.EcoResCategoryId, reverseChargeItemGroupData.GroupId);

            this.addChildCategories(reverseChargeItemGroupData.GroupId, reverseChargeItemGroupData.EcoResCategoryId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineGroupMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes <c>Map</c> object which caches relations between item groups and document lines.
    /// </summary>
    protected void initLineGroupMap()
    {
        if (!lineGroupMap)
        {
            lineGroupMap = new Map(Types::Int64, Types::Class);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRuleSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes <c>Set</c> object which caches reverse charge rules.
    /// </summary>
    private void initRuleSet()
    {
        str featureReference = ReverseChargeTaxSetupToggle::getFeatureReference();

        if (featureReference)
        {
            GlobalizationInstrumentationHelper::featureRun(featureReference, funcName());
        }

        ReverseChargeRule_W   reverseChargeRule;

        ruleSet = new Set(Types::Container);

        while select reverseChargeRule
            where reverseChargeRule.DocumentType == this.documentType() &&
            reverseChargeRule.Action       != ReverseChargeAction_W::None
        {
            ruleSet.add([
                reverseChargeRule.PartnerCountryRegionType,
                reverseChargeRule.DomesticDlvAddress,
                reverseChargeRule.ItemGroupId,
                reverseChargeRule.Threshold,
                reverseChargeRule.EmptyTaxBaseForOutgoingTax,
                reverseChargeRule.Action,
                reverseChargeRule.RecId]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines, if reverse charge functionality is enabled.
    /// </summary>
    /// <returns>
    ///   True, if reverse charge functionality is enabled; Otherwise, false.
    /// </returns>
    public boolean isEnabled()
    {
        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHeaderChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks if header record cursor moved to another record.
    /// </summary>
    /// <returns>
    ///   True, if header record changed; Otherwise, false.
    /// </returns>
    protected boolean isHeaderChanged()
    {
        return (lastHeaderRecId != headerRecord.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReverseChargeGroupSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines if reverse charge group already set.
    /// </summary>
    /// <returns>
    ///   True, if reverse charge tax group already set; Otherwise, false.
    /// </returns>
    abstract protected boolean isReverseChargeGroupSet()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidLineForThresholdCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks if lines is valid for threshold calculation.
    /// </summary>
    /// <returns>
    ///   True, if line is valid, Otherwise false.
    /// </returns>
    protected boolean isValidLineForThresholdCalculation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemGroupMap</Name>
				<Source><![CDATA[
    private Map itemGroupMap()
    {
        if (!itemGroupMap)
        {
            itemGroupMap = new Map(Types::String, Types::Int64);
        }
        return itemGroupMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns line amount.
    /// </summary>
    /// <param name = "_lineRecId">
    ///   Record id of line.
    /// </param>
    /// <param name = "_line">
    ///   Cursor containing unsaved document line.
    /// </param>
    /// <returns>
    ///   Line amount.
    /// </returns>
    abstract protected AmountMST lineAmount(RecId _lineRecId, Common _line = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Called when line cursor moves to another line.
    /// </summary>
    protected void lineChanged()
    {
        updateMatchingLines = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDSPostWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates other docuemnt lines, depending on user selection.
    /// </summary>
    public void lineDSPostWrite()
    {
        if (this.isEnabled() && isHeaderInitialized)
        {
            this.addLineToCache();
            this.setReverseChargeGroupMatchingLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDSPreWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Called before super in write method. Sets reverse charge tax group or prompts user if he wants to set it.
    /// </summary>
    public void lineDSPreWrite()
    {
        if (this.isEnabled())
        {
            if (this.isHeaderChanged())
            {
                this.headerChanged();
            }

            if (isHeaderInitialized)
            {
                this.lineChanged();
                this.setReverseChargeGroupIfApplicable();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.initCategoryMap();

        ReverseChargeParameters_W reverseChargeParameters = ReverseChargeParameters_W::find();
        enabled = reverseChargeParameters.Enabled;

        if (enabled)
        {
            purchTaxGroup = reverseChargeParameters.PurchTaxGroup;
            salesTaxGroup = reverseChargeParameters.SalesTaxGroup;

            this.initLineAmountMap();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleApplyMap</Name>
				<Source><![CDATA[
    private Map ruleApplyMap()
    {
        if (!ruleApplyMap)
        {
            ruleApplyMap = new Map(Types::Container, Types::Enum);
        }
        return ruleApplyMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rulePromptMap</Name>
				<Source><![CDATA[
    private Map rulePromptMap()
    {
        if (!rulePromptMap)
        {
            rulePromptMap = new Map(Types::Container, Types::Enum);
        }
        return rulePromptMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleSet</Name>
				<Source><![CDATA[
    private Set ruleSet()
    {
        if (!ruleSet)
        {
            this.initRuleSet();
        }
        return ruleSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogTxt</Name>
				<Source><![CDATA[
    private void setDialogTxt(
        Dialog                                   _dialog,
        ReverseChargePartnerCountryRegionType_W  _partnerCountryType,
        NoYes                                    _domesticDlvAddress,
        ReverseChargeItemGroupId_W               _itemGroupId,
        AmountMST                                _threshold)
    {
        str text;
        int lineNo = 2;
        DialogText dialogText;

        text = "@Tax:FollowRCRuleIsAppl" + '\n';

        text += strFmt("@Tax:PartnerCountryTypeIs" + '\n', _partnerCountryType);

        if (_domesticDlvAddress)
        {
            text += "@Tax:DlvAddrIsDomestic" + '\n';
            lineNo++;
        }

        if (_itemGroupId)
        {
            text += strFmt("@Tax:ItemGroupIs" + '\n', ReverseChargeItemGroup_W::find(_itemGroupId).Name);
            lineNo++;
        }

        if (_threshold)
        {
            text += strFmt("@Tax:ThresholdIsExceeded", _threshold);
            lineNo++;
        }

        dialogText = _dialog.addText(text);

        dialogText.displayHeight(lineNo + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets header record cursor reference.
    /// </summary>
    /// <param name = "_headerRecord">
    ///   Reference to header record.
    /// </param>
    protected void setHeaderRecord(Common _headerRecord)
    {
        headerRecord = _headerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets lines record cursor reference.
    /// </summary>
    /// <param name = "_lineRecord">
    ///   Reference to line record.
    /// </param>
    protected void setLineRecord(Common _lineRecord)
    {
        lineRecord = _lineRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReverseChargeGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets reverse charge tax group on specific document line.
    /// </summary>
    abstract protected void setReverseChargeGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOverrideSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets OverrideSalesTax to yes if the tax service is enabled.
    /// </summary>
    /// <param name = "_lineRecord">The transaction line record.</param>
    protected void setOverrideSalesTax(SalesPurchJournalLine _lineRecord)
    {
        _lineRecord.OverrideSalesTax = Tax::isTaxIntegrationEnabledForTable(_lineRecord.TableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>needSetOverrideSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether the transaction line record needs to set the OverrideSalesTax.
    /// </summary>
    /// <param name = "_lineRecord">The transaction line record.</param>
    /// <returns></returns>
    protected boolean needSetOverrideSalesTax(SalesPurchJournalLine _lineRecord)
    {
        return Tax::isTaxIntegrationEnabledForTable(_lineRecord.TableId) && _lineRecord.OverrideSalesTax == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReverseChargeGroupIfApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates rules, and, depending on setting and user selection, sets reverse charge tax group on current line
    ///   or remembers if other lines must be updated also.
    /// </summary>
    protected void setReverseChargeGroupIfApplicable(boolean _fromHeader = false)
    {
        boolean applicable;

        NoYes                                    ruleDomesticDlvAddress;
        ReverseChargePartnerCountryRegionType_W  rulePartnerCountryType;
        NoYes                                    ruleEmptyBaseForOutgoingTax;
        ReverseChargeAction_W                    ruleAction;
        RecId                                    ruleRecId;
        SetEnumerator                            seRules;

        ReverseChargeApply_W                     reverseChargeApply = ReverseChargeApply_W::None;

        if (lineNotInitialized)
        {
            return;
        }

        if (this.isReverseChargeGroupSet() && !this.needSetOverrideSalesTax(lineRecord))
        {
            return;
        }

        seRules = this.ruleSet().getEnumerator();

        while (seRules.moveNext())
        {
            [rulePartnerCountryType,
             ruleDomesticDlvAddress,
             ruleItemGroupId,
             ruleThreshold,
             ruleEmptyBaseForOutgoingTax,
             ruleAction,
             ruleRecId] = seRules.current();

            switch (rulePartnerCountryType)
            {
                case ReverseChargePartnerCountryRegionType_W::All:
                    applicable = true;
                    break;
                case ReverseChargePartnerCountryRegionType_W::Domestic:
                    applicable = (partnerCountryRegionType == CountryRegionType::Domestic);
                    break;
                case ReverseChargePartnerCountryRegionType_W::EU:
                    applicable = (partnerCountryRegionType == CountryRegionType::EU);
                    break;
                case ReverseChargePartnerCountryRegionType_W::Foreign:
                    applicable = (partnerCountryRegionType != CountryRegionType::Domestic);
                    break;
                case ReverseChargePartnerCountryRegionType_W::ThirdCountry:
                    applicable = (partnerCountryRegionType == CountryRegionType::ThirdCountryRegion);
                    break;
                case ReverseChargePartnerCountryRegionType_W::GCC:
                    applicable = (partnerCountryRegionType == CountryRegionType::GCC);
                    break;
                default:
                    applicable = false;
            }

            if (applicable && ruleDomesticDlvAddress)
            {
                applicable = (deliveryCountryRegionType == CountryRegionType::Domestic);
            }

            if (applicable && ruleItemGroupId)
            {
                applicable = (itemGroupId == ruleItemGroupId);
            }

            if (applicable && ruleThreshold)
            {
                applicable = (this.thresholdByGroup(ruleItemGroupId) >= ruleThreshold);
            }

            if (applicable)
            {
                switch (ruleAction)
                {
                    case ReverseChargeAction_W::Prompt:
                        reverseChargeApply = this.showDialog(
                            rulePartnerCountryType,
                            ruleDomesticDlvAddress,
                            ruleItemGroupId,
                            ruleThreshold,
                            ruleRecId);
                        break;
                    case ReverseChargeAction_W::Set:
                        reverseChargeApply = ReverseChargeApply_W::CurrentLine;
                        break;
                }

                if (reverseChargeApply != ReverseChargeApply_W::None)
                {
                    if (!_fromHeader)
                    {
                        this.setReverseChargeGroup();
                    }

                    // in case when rc group must be set automatically and header changed, rc must be applied to all lines,
                    // as well as in case when threshold was exceeded
                    if (reverseChargeApply == ReverseChargeApply_W::AllLines ||
                       (ruleAction == ReverseChargeAction_W::Set &&
                        (_fromHeader || ruleThreshold)))
                    {
                        updateMatchingLines = true;
                    }

                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReverseChargeGroupMatchingLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets reverse charge groups on other(non-current) lines of document or on all lines if called from header.
    /// </summary>
    /// <param name = "_fromHeader">
    ///   Indicates that function has been called from header. If true, all lines must be updated, if false, current line must be skipped.
    /// </param>
    /// <remarks>
    ///   In case function called from header, datasource reseach will be called from active on header datasource.
    ///   To avoid errors when researching, that line is not current, all lines must updated explicitly here.
    /// </remarks>
    protected void setReverseChargeGroupMatchingLines(boolean _fromHeader = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDialog</Name>
				<Source><![CDATA[
    private ReverseChargeApply_W showDialog(
        ReverseChargePartnerCountryRegionType_W  _partnerCountryType,
        NoYes                                    _domesticDlvAddress,
        ReverseChargeItemGroupId_W               _itemGroupId,
        AmountMST                                _threshold,
        RecId                                    _ruleRecId)
    {
        Dialog                  dialog;
        DialogField             dialogFieldApply;
        DialogField             dialogFieldDoNotPromptDocument;

        boolean                 doNotPrompt;
        ReverseChargeApply_W    reverseChargeApply;

        if (this.rulePromptMap().exists([this.documentType(), this.headerRecId(), _ruleRecId]))
        {
            reverseChargeApply = rulePromptMap.lookup([this.documentType(), this.headerRecId(), _ruleRecId]);
        }
        else
        {
            dialog = new Dialog("@Tax:RCCondionsAreMet");

            this.setDialogTxt(
                dialog,
                _partnerCountryType,
                _domesticDlvAddress,
                _itemGroupId,
                _threshold);

            dialogFieldApply = dialog.addField(enumStr(ReverseChargeApply_W), "@Tax:ApplyReverseCharge");
            dialogFieldDoNotPromptDocument = dialog.addField(extendedTypeStr(NoYesId), "@Tax:DontShowDialogForDoc");

            if (dialog.run())
            {
                reverseChargeApply = dialogFieldApply.value();
                doNotPrompt = dialogFieldDoNotPromptDocument.value();

                if (doNotPrompt)
                {
                    rulePromptMap.insert([this.documentType(), this.headerRecId(), _ruleRecId], reverseChargeApply);
                }
                
                this.ruleApplyMap().insert([this.documentType(), lineRecord.RecId], reverseChargeApply);
            }
            else
            {
                reverseChargeApply = ReverseChargeApply_W::None;
            }
        }

        return reverseChargeApply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thresholdByGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates amounts by item groups in document and returns value for the given group.
    /// </summary>
    /// <param name = "_ruleItemGroupId">
    ///   Reverse charge item group id.
    /// </param>
    /// <returns>
    ///   Amount of items without tax for given item group.
    /// </returns>
    private AmountMST thresholdByGroup(ReverseChargeItemGroupId_W _ruleItemGroupId)
    {
        AmountMST threshold;

        if (_ruleItemGroupId && lineGroupMap)
        {
            threshold = this.thresholdByGroupUseMap(_ruleItemGroupId);
        }
        else
        {
            threshold = this.thresholdByGroupUseDB(_ruleItemGroupId);
        }

        if (!_ruleItemGroupId || itemGroupId == _ruleItemGroupId)
        {
            if (this.isValidLineForThresholdCalculation())
            {
                threshold += this.lineAmount(lineRecord.RecId, lineRecord);
            }
        }

        return threshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thresholdByGroupUseDB</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates amount by item group fetching all records from DB, validating their item groups.
    ///   Caches which line belong to which group.
    /// </summary>
    /// <param name = "_ruleItemGroupId">
    ///   Reverse charge item group id.
    /// </param>
    /// <returns>
    ///   Amount by group for all document lines, exempt current(which can be unsaved).
    /// </returns>
    abstract protected AmountMST thresholdByGroupUseDB(ReverseChargeItemGroupId_W _ruleItemGroupId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>thresholdByGroupUseMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates amount by item group using map which holds relations between item groups and lines.
    /// </summary>
    /// <param name = "_itemGroupId">
    ///   Reverse charge item group id.
    /// </param>
    /// <returns>
    ///   Amount by group for all lines, exempt current(which can be unsaved).
    /// </returns>
    private AmountMST thresholdByGroupUseMap(ReverseChargeItemGroupId_W _itemGroupId)
    {
        AmountMST     threshold;
        SetEnumerator se;
        Set           linesSet;

        if (lineGroupMap && lineGroupMap.exists(_itemGroupId))
        {
            linesSet = lineGroupMap.lookup(_itemGroupId);

            se = linesSet.getEnumerator();

            while (se.moveNext())
            {
                if (se.current() != lineRecord.RecId)
                {
                    threshold += this.lineAmount(se.current());
                }
            }
        }

        return threshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates new instance of <c>ReverseCharge_W</c> class.
    /// </summary>
    /// <param name = "_headerTableId">
    ///   Table id of header record.
    /// </param>
    /// <returns>
    ///   New instance of <c>ReverseCharge_W</c> class.
    /// </returns>
    private static ReverseCharge_W construct(TableId _headerTableId)
    {
        ReverseCharge_W reverseCharge;

        switch (_headerTableId)
        {
            case tableNum(PurchTable):
                reverseCharge = new ReverseChargePurchaseOrder_W();
                break;
            case tableNum(SalesTable):
                reverseCharge = new ReverseChargeSalesOrder_W();
                break;
            case tableNum(CustInvoiceTable):
                reverseCharge = new ReverseChargeFreeInvoice_W();
                break;
            case tableNum(VendInvoiceInfoTable):
                reverseCharge = new ReverseChargeVendInvoice_W();
                break;
            case tableNum(LedgerJournalTrans):
                reverseCharge = new ReverseChargeInvoiceJournal_W();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        return reverseCharge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates new instance of <c>ReverseCharge_W</c> class and initializes its parameters.
    /// </summary>
    /// <param name = "_headerRecord">
    ///    Reference to header cursor.
    /// </param>
    /// <param name = "_lineRecord">
    ///    Reference to lines cursor.
    /// </param>
    /// <returns>
    ///   New instance of <c>ReverseCharge_W</c> class.
    /// </returns>
    public static ReverseCharge_W newParameters(Common _headerRecord, Common _lineRecord)
    {
        ReverseCharge_W reverseCharge = ReverseCharge_W::construct(_headerRecord.TableId);

        reverseCharge.setHeaderRecord(_headerRecord);
        reverseCharge.setLineRecord(_lineRecord);

        return reverseCharge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGroupByItemCategoryStatic</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Serches reverse charge item group by given item id or category.
    /// </summary>
    /// <param name = "_purchSales">
    ///   <c>ReverseChargePurchSales_W</c> value.
    /// </param>
    /// <param name = "_itemId">
    ///   Item id.
    /// </param>
    /// <param name = "_ecoResCategoryId">
    ///   Category id.
    /// </param>
    /// <returns>
    ///   <c>ReverseChargeItemGroupId_W</c> value.
    /// </returns>
    public static ReverseChargeItemGroupId_W findGroupByItemCategoryStatic(
        ReverseChargePurchSales_W _purchSales,
        ItemId                    _itemId,
        EcoResCategoryId          _ecoResCategoryId)
    {
        ReverseCharge_W reverseCharge = ReverseCharge_W::construct(tableNum(SalesTable));

        return reverseCharge.findGroupByItemCategory(_purchSales, _itemId, _ecoResCategoryId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>