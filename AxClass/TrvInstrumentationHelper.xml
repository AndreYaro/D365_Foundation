<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvInstrumentationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TrvInstrumentationHelper
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>extractWebExceptionFromLastCLRException</Name>
				<Source><![CDATA[
        /// <summary>
    /// Extracts the web exception from last CLR exception.
    /// </summary>
    /// <returns>The web exception.</returns>
    [SysObsoleteAttribute("extractWebExceptionFromLastCLRException method is obsolete. use extractExceptionFromLastCLRException()", true, 20\4\2020)]
    public static System.Net.WebException extractWebExceptionFromLastCLRException()
    {
        throwâ€¯error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractExceptionFromLastCLRException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extracts the web exception from last CLR exception and logs it if it is web exception.
    /// </summary>
    /// <param name = "exception">Used to pass System.Exception for logging.</param>
    /// <returns>Return WebException</returns>
    public static System.Net.WebException extractExceptionFromLastCLRException(System.Exception exception)
    {
        while (exception)
        {
            var webException = exception as System.Net.WebException;
    
            if (webException)
            {
                return webException;
            }
    
            exception = exception.get_InnerException();
        }
        
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWebException</Name>
				<Source><![CDATA[
    /// <summary>
    /// logWebException is used to log the web exception with httpStatuCode received from external services.
    /// </summary>
    /// <param name = "_webException">Used to pass System.Net.WebException.</param>
    /// <param name = "exceptionLocationName">string exception location name. ex: operation name.</param>
    /// <param name = "serviceName">Used to pass external service name which raised exception.</param>
    /// <param name = "instrumentationLogger">logger of type SysInstrumentationLogger.</param>
    public static void logWebException(System.Net.WebException _webException, 
        str exceptionLocationName, 
        str serviceName, 
        SysInstrumentationLogger instrumentationLogger)
    {
        if (_webException)
        {
            instrumentationLogger.logException(_webException, "@Expense:ServiceCallException");

            using (var response = _webException.Response)
            {
                if (response)
                {
                    var responseStatusCode = (response as System.Net.HttpWebResponse).StatusCode;
                    instrumentationLogger.logError(strFmt("@Expense:ExternalServiceWebException", serviceName, exceptionLocationName, responseStatusCode, _webException));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExpenseOperationsInformation</Name>
				<Source><![CDATA[
    public static void logExpenseOperationsInformation(str _stringValue, str _className)
    {
        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(_className);

        logger.logInformation(_stringValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExpenseOperationsError</Name>
				<Source><![CDATA[
    public static void logExpenseOperationsError(str _stringValue, str _className)
    {
        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(_className);

        logger.logError(_stringValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExpenseOperationsInformationWithPath</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Logs expense operation instrumentation with code path.
    /// </summary>
    /// <param name = "_stringValue">Instrumentation message.</param>
    /// <param name = "_path">Code path, e.g., className/methodName, tableName/methodName.</param>
    public static void logExpenseOperationsInformationWithPath(str _stringValue, str _path)
    {
        str callStack = TrvInstrumentationHelper::getCallStack();
        str message = strFmt("Call stack: %1; Information: %2", callStack, _stringValue);

        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(_path);

        logger.logInformation(message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCallStack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the call stack.
    /// </summary>
    /// <returns>A call stack.</returns>
    private static str getCallStack()
    {
        container callStack;

        callStack = xSession::xppCallStack();

        str path;

        for(int i=1; i<=conlen(callStack); i++)
        {
            path += strFmt("%1\n", conpeek(callStack, i));
        }

        return path;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>