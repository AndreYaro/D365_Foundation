<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocParmDataCreatorVendProForma_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>FiscalDocumentParmData_BR</c> which represents a pro forma vendor fiscal document.
/// </summary>
public class FiscalDocParmDataCreatorVendProForma_BR extends FiscalDocParmDataCreatorVendInvoice_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createParmData</Name>
				<Source><![CDATA[
        public FiscalDocumentParmData_BR createParmData()
    {
        FiscalDocumentParmData_BR ret;

        ret = super();

        ret.parmIsProForma(true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentNumber</Name>
				<Source><![CDATA[
        protected Num getFiscalDocumentNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTrans</Name>
				<Source><![CDATA[
        protected boolean hasCustVendTrans()
    {
        return purchTable.createVendTrans_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
        protected FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
        FiscalDocumentCustVendTransParmData_BR custTransParmData = new FiscalDocumentCustVendTransParmData_BR();

        custTransParmData.parmAmount(vendInvoiceJour.InvoiceAmountMST);
        custTransParmData.parmDueDate(vendInvoiceJour.DueDate);

        return custTransParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
        protected List initListOfInstallments()
    {
        CustVendPaymSched custVendPaymSched;

        List ret;

        if (purchTable.PaymentSched &&
           !VendPaymSched::exist(purchTable.TableId,
                                 purchTable.RecId))
        {
            custVendPaymSched = CustVendPaymSched::construct(SysModule::Vend, purchTable);
            custVendPaymSched.setPurchTotals(purchTotals);
            custVendPaymSched.createPaymSched(PaymSched::find(purchTable.PaymentSched));
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfTaxTransParmDataForLine</Name>
				<Source><![CDATA[
        protected List initListOfTaxTransParmDataForLine(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        List                                    listOfTaxParmData = new List(Types::Class);
        FiscalDocumentTaxTransParmData_BR       fiscalDocumentTaxTransParmData;
        TaxUncommitted                          taxUncommitted;

        while select taxUncommitted
            where taxUncommitted.SourceRecId == _fiscalDocumentLineParmData.parmRefRecId()
                && taxUncommitted.SourceTableId == _fiscalDocumentLineParmData.parmRefTableId()
                && !taxUncommitted.TaxSubstitution_BR
        {
            fiscalDocumentTaxTransParmData = new FiscalDocumentTaxTransParmData_BR();

            this.initTaxTransParmDataFromTaxUncommitted(_fiscalDocumentParmData,
                                                        fiscalDocumentTaxTransParmData,
                                                        taxUncommitted);

            listOfTaxParmData.addEnd(fiscalDocumentTaxTransParmData);
        }

        return listOfTaxParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransParmDataFromTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>FiscalDocumentTaxTransParmData_BR</c> object with data from <c>TaxUncommitted</c> buffers.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// <c>FiscalDocumentParmData_BR</c> of the header of the document being updated.
    /// </param>
    /// <param name="_fiscalDocumentTaxTransParmData">
    /// <c>FiscalDocumentTaxTransParmData_BR</c> to be set.
    /// </param>
    /// <param name="_taxUncommitted">
    /// <c>TaxUncommitted</c> buffer with base tax data.
    /// </param>
    protected void initTaxTransParmDataFromTaxUncommitted(FiscalDocumentParmData_BR            _fiscalDocumentParmData,
                                                          FiscalDocumentTaxTransParmData_BR    _fiscalDocumentTaxTransParmData,
                                                          TaxUncommitted                       _taxUncommitted)
    {
        TaxTable                taxTable;
        TaxationCode_BR         taxationCodeIPI;
        TaxationCodeTable_BR    taxationCodeTable;

        taxTable = TaxTable::find(_taxUncommitted.TaxCode);

        _fiscalDocumentTaxTransParmData.parmTaxTransSourceTableId   (_taxUncommitted.SourceTableId);
        _fiscalDocumentTaxTransParmData.parmTaxTransSourceRecId     (_taxUncommitted.SourceRecId);
        _fiscalDocumentTaxTransParmData.parmTaxTrans                (_taxUncommitted.RecId);
        _fiscalDocumentTaxTransParmData.parmType                    (_taxUncommitted.TaxType_BR);

        // IPI demands that we construct the taxation code based on fiscal document direction.
        if (_taxUncommitted.TaxType_BR == TaxType_BR::IPI)
        {
            taxationCodeTable = TaxationCodeTable_BR::find(_taxUncommitted.TaxType_BR, _taxUncommitted.TaxationCode_BR);
            if (_fiscalDocumentParmData.parmDirection() == FiscalDocDirection_BR::Incoming)
            {
                taxationCodeIPI = taxationCodeTable.InputCode;
            }
            else
            {
                taxationCodeIPI = taxationCodeTable.OutputCode;
            }
            taxationCodeIPI += taxationCodeTable.AtoCotepeTaxCode;
            _fiscalDocumentTaxTransParmData.parmTaxationCode(taxationCodeIPI);
        }
        else
        {
            _fiscalDocumentTaxTransParmData.parmTaxationCode(_taxUncommitted.TaxationCode_BR);
        }

        _fiscalDocumentTaxTransParmData.parmTaxValue        (_taxUncommitted.showTaxValue());
        _fiscalDocumentTaxTransParmData.parmFiscalValue     (_taxUncommitted.FiscalValue_BR);
        _fiscalDocumentTaxTransParmData.parmRetainedTax     (taxTable.RetainedTax_BR);
        _fiscalDocumentTaxTransParmData.parmIncludedTax     (taxTable.IncludedTax_BR);
        _fiscalDocumentTaxTransParmData.parmTaxAmount       (_taxUncommitted.TaxAmount - _taxUncommitted.TaxInCostPrice);

        if (_fiscalDocumentTaxTransParmData.parmTaxAmount() != 0)
        {
            if (_taxUncommitted.taxBaseAmountHasBeenAdjusted_BR())
            {
                _fiscalDocumentTaxTransParmData.parmTaxBaseAmount(_taxUncommitted.getTaxBaseAmountRegulatedMST_BR());
            }
            else
            {
                _fiscalDocumentTaxTransParmData.parmTaxBaseAmount(_taxUncommitted.TaxBaseAmount);
            }
        }

        _fiscalDocumentTaxTransParmData.parmTaxReductionPct(_taxUncommitted.TaxReductionPct_BR);

        _fiscalDocumentTaxTransParmData.parmTaxSubstitutionMarkupPct        (TaxData::find(_taxUncommitted.TaxCode, _taxUncommitted.TransDate, _taxUncommitted.TaxBaseAmount).TaxSubstitutionMarkupValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineParmDataRefRecord</Name>
				<Source><![CDATA[
        protected void setLineParmDataRefRecord(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, VendInvoiceTrans _vendInvoiceTrans)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        select RecId from vendInvoiceInfoLine
            where vendInvoiceInfoLine.InventTransId == _vendInvoiceTrans.InventTransId;

        _fiscalDocumentLineParmData.parmRefTableId      (tableNum(VendInvoiceInfoLine));
        _fiscalDocumentLineParmData.parmRefRecId        (vendInvoiceInfoLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPaymSchedRefRecId</Name>
				<Source><![CDATA[
        protected RecId vendPaymSchedRefRecId()
    {
        return purchTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPaymSchedRefTableId</Name>
				<Source><![CDATA[
        protected TableId vendPaymSchedRefTableId()
    {
        return purchTable.TableId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>