<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBFiscalDocumentBookPreProcessor_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Starts preparing fiscal documents for the bookkeeping process. 
/// </summary>
internal class FBFiscalDocumentBookPreProcessor_BR extends FBFiscalDocumentBookProcessor_BR
{
    private FiscalEstablishment_BR fiscalEstablishmentRoot;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deletePrepFiscalDocuments</Name>
				<Source><![CDATA[
    private void deletePrepFiscalDocuments()
    {
        FiscalDocument_BR fiscalDocument;
        FBBookingPeriodPrepFiscalDocument_BR fbBookingPeriodPrepFiscalDocument;

        //Deletes the relation of the cancelled and reversed fiscal documents
        delete_from fbBookingPeriodPrepFiscalDocument
        exists join fiscalDocument
            where fbBookingPeriodPrepFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                && fiscalDocument.FiscalEstablishment == fiscalEstablishment.FiscalEstablishmentId
                && (fiscalDocument.Status == FiscalDocumentStatus_BR::Cancelled
                    || fiscalDocument.Status == FiscalDocumentStatus_BR::Reversed
                    || fiscalDocument.Status == FiscalDocumentStatus_BR::Denied
                    || fiscalDocument.Status == FiscalDocumentStatus_BR::Discarded);

        FBBookingPeriodFiscalDocument_BR fbBookingPeriodFiscalDocument;

        //delete booked documents
        delete_from fbBookingPeriodPrepFiscalDocument
        exists join fbBookingPeriodFiscalDocument
            where fbBookingPeriodFiscalDocument.FiscalDocument_BR == fbBookingPeriodPrepFiscalDocument.FiscalDocument_BR
        exists join fiscalDocument
            where fbBookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                && fiscalDocument.FiscalEstablishment == fiscalEstablishment.FiscalEstablishmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalEstablishment</Name>
				<Source><![CDATA[
    private List getFiscalEstablishment()
    {
        FiscalOrganization_BR fiscalOrganization = FiscalOrganization_BR::findByFiscalEstablishmentId(fiscalEstablishmentRoot.FiscalEstablishmentId, fiscalEstablishmentRoot.dataAreaId);
        List fiscalEstablishmentList = new List(Types::Record);

        FiscalEstablishment_BR fiscalEstablishmentLocal;

        while select crossCompany fiscalEstablishmentLocal
            where fiscalEstablishmentLocal.FiscalOrganization_BR == fiscalOrganization.RecId
        {
            fiscalEstablishmentList.addEnd(fiscalEstablishmentLocal);
        }

        return fiscalEstablishmentList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRangesFiscalDocumentDataSource</Name>
				<Source><![CDATA[
    internal void applyRangesFiscalDocumentDataSource(QueryBuildDataSource _qbdsFiscalDocument)
    {
        const container ApplicableStatuses =
            [FiscalDocumentStatus_BR::Approved,
            FiscalDocumentStatus_BR::Denied,
            FiscalDocumentStatus_BR::Discarded,
            FiscalDocumentStatus_BR::Cancelled];

        _qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, FiscalEstablishment)).value(queryValue(this.fiscalEstablishmentId()));
        _qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, Version)).value(con2Str(FiscalBooksConstants_BR::FiscalDocumentVersion, Delimeter));
        _qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, Status)).value(con2Str(ApplicableStatuses, Delimeter));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishmentRoot</Name>
				<Source><![CDATA[
    internal FiscalEstablishment_BR parmFiscalEstablishmentRoot(FiscalEstablishment_BR _fiscalEstablishmentRoot = fiscalEstablishmentRoot)
    {
        fiscalEstablishmentRoot = _fiscalEstablishmentRoot;

        return fiscalEstablishmentRoot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryApplicableFiscalDocuments</Name>
				<Source><![CDATA[
    internal Query initQueryApplicableFiscalDocuments()
    {
        Query query = super();
        QueryBuildDataSource qbdsFiscalDocument = query.dataSourceTable(tableNum(FiscalDocument_BR));
        QueryBuildDataSource qbdsPrepFiscalDocument = qbdsFiscalDocument.addDataSource(tableNum(FBBookingPeriodPrepFiscalDocument_BR));
        qbdsPrepFiscalDocument.relations(true);
        qbdsPrepFiscalDocument.joinMode(JoinMode::NoExistsJoin);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static FBFiscalDocumentBookPreProcessor_BR construct()
    {
        return new FBFiscalDocumentBookPreProcessor_BR(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance of the <c>FBFiscalDocumentBookPreProcessor_BR</c> object.
    /// </summary>
    /// <param name = "_fiscalEstablishmentRoot">
    /// The root of the fiscal establishments.
    /// </param>
    /// <returns>The <c>FBFiscalDocumentBookPreProcessor_BR</c> object.</returns>
    internal static FBFiscalDocumentBookPreProcessor_BR initFromFiscalEstablishment(FiscalEstablishment_BR _fiscalEstablishmentRoot)
    {
        FBFiscalDocumentBookPreProcessor_BR preProcessor = FBFiscalDocumentBookPreProcessor_BR::construct();
        preProcessor.parmFiscalEstablishmentRoot(_fiscalEstablishmentRoot);

        return preProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBooking</Name>
				<Source><![CDATA[
    public void processBooking()
    {
        List fiscalEstablishmentList = this.getFiscalEstablishment();
        ListEnumerator le = fiscalEstablishmentList.getEnumerator();

        while (le.moveNext())
        {
            fiscalEstablishment = le.current();
            if (fiscalEstablishment)
            {
                changeCompany(fiscalEstablishment.dataAreaId)
                {
                    try
                    {
                        ttsbegin;
                        this.deletePrepFiscalDocuments();
                        this.bookApplicableFiscalDocuments();
                        ttscommit;
                    }
                    catch
                    {
                        ttsabort;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBookingFiscalDocument</Name>
				<Source><![CDATA[
    internal Common initBookingFiscalDocument(FiscalDocument_BR _fiscalDocument)
    {
        Common ret = super(_fiscalDocument);

        if (ret.TableId == tableNum(FBBookingPeriodFiscalDocument_BR))
        {
            FBBookingPeriodFiscalDocument_BR fbBookingPeriodFiscalDocument = ret;
            FBBookingPeriodPrepFiscalDocument_BR fbBookingPeriodPrepFiscalDocument;

            fbBookingPeriodPrepFiscalDocument.FiscalDocument_BR = fbBookingPeriodFiscalDocument.FiscalDocument_BR;
            fbBookingPeriodPrepFiscalDocument.FiscalSituation = fbBookingPeriodFiscalDocument.FiscalSituation;
            fbBookingPeriodPrepFiscalDocument.HasIcms = fbBookingPeriodFiscalDocument.HasIcms ;
            fbBookingPeriodPrepFiscalDocument.HasIpi = fbBookingPeriodFiscalDocument.HasIpi;
            fbBookingPeriodPrepFiscalDocument.HasPis = fbBookingPeriodFiscalDocument.HasPis;
            fbBookingPeriodPrepFiscalDocument.HasCofins = fbBookingPeriodFiscalDocument.HasCofins;
            fbBookingPeriodPrepFiscalDocument.HasIcmsSt = fbBookingPeriodFiscalDocument.HasIcmsSt;
            fbBookingPeriodPrepFiscalDocument.HasIcmsDiff = fbBookingPeriodFiscalDocument.HasIcmsDiff;
            fbBookingPeriodPrepFiscalDocument.HasIss = fbBookingPeriodFiscalDocument.HasIss;
            fbBookingPeriodPrepFiscalDocument.HasInss = fbBookingPeriodFiscalDocument.HasInss;
            fbBookingPeriodPrepFiscalDocument.HasInssRet = fbBookingPeriodFiscalDocument.HasInssRet;
            fbBookingPeriodPrepFiscalDocument.ThirdPartyType = fbBookingPeriodFiscalDocument.ThirdPartyType;
            fbBookingPeriodPrepFiscalDocument.SpedFiscalRecord = fbBookingPeriodFiscalDocument.SpedFiscalRecord;
            fbBookingPeriodPrepFiscalDocument.SpedContribRecord = fbBookingPeriodFiscalDocument.SpedContribRecord;

            ret = fbBookingPeriodPrepFiscalDocument;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>