<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportExcel_SZV61_2011</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportExcel_SZV61_2011 extends RPayPFReportExcel implements IRPayReportRunClass
{
    #define.ReportTitle("@RUP3079")

    RPayPFReportCtrl                reportData;
    IRPayPFReportCommand            totalFundCommand, seniorityCommand;

    IRPayPFReportDataIterator       fundDataIterator, seniorityIterator;

    #RPayPFReportSZV61

    RPayAmount                      fundAmountIns, fundAmountSto;
    Counter                         emplNo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmpl</Name>
				<Source><![CDATA[
    protected boolean checkEmpl(RHRMEmplTable   _emplTable,
                                boolean     _displayMessage = true,
                                str 20      _personCategory = '',
                                str 20      _formType       = '')
    {
        boolean ret = true;

        ret = this.checkEmplIsInsured(_emplTable, _displayMessage) && ret;

        if (ret)
        {
            ret = this.checkMainInsuredPersonCat(_emplTable, _displayMessage) && ret;
            ret = this.checkEmplPFNumber(_emplTable, _displayMessage) && ret;
            ret = this.checkEmplPersonalInfo(_emplTable, _displayMessage, false, true) && ret;
            ret = this.checkEmplHasSpecSen(_emplTable, _displayMessage, _personCategory) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFundAmounts</Name>
				<Source><![CDATA[
    protected void fillFundAmounts(int _workSheetNum)
    {
        BookMark            cellInsurance1,
                            cellInsurance2,
                            cellStorage1,
                            cellStorage2;

        [cellInsurance1, cellInsurance2, cellStorage1, cellStorage2] = this.fundAmountCells();

        excelDocument.insertValue(cellInsurance1,   fundAmountIns,    _workSheetNum);
        excelDocument.insertValue(cellInsurance2,   fundAmountIns,    _workSheetNum);

        excelDocument.insertValue(cellStorage1,     fundAmountSto,    _workSheetNum);
        excelDocument.insertValue(cellStorage2,     fundAmountSto,    _workSheetNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    protected void fillHeader(int               _workSheetNum,
                              str 20            _personCategory,
                              RHRMEmplTable     _emplTable)
    {
        void fillCorrectPeriod()
        {
            if (reportYear > #ReportYear2010)
            {
                if (this.periodType() == enumnum(RPayReportSocialTaxPeriod))
                {
                    switch (taxPeriod)
                    {
                        case RPayReportSocialTaxPeriod::Quarter :
                            excelDocument.insertValue('BQ21', #CheckSign, _workSheetNum);
                            break;
                        case RPayReportSocialTaxPeriod::HalfYear :
                            excelDocument.insertValue('CL21', #CheckSign, _workSheetNum);
                            break;
                        case RPayReportSocialTaxPeriod::NineMonth :
                            excelDocument.insertValue('DE21', #CheckSign, _workSheetNum);
                            break;
                        case RPayReportSocialTaxPeriod::Year :
                            excelDocument.insertValue('DP21', #CheckSign, _workSheetNum);
                            break;
                    }
                }
                else if (this.periodType() == enumnum(RPayPFReportPeriod))
                {
                    switch (corrTaxPeriodByQtr)
                    {
                        case RPayPFReportPeriod::Quarter1 :
                            excelDocument.insertValue('BQ21', #CheckSign, _workSheetNum);
                            break;
                        case RPayPFReportPeriod::Quarter2 :
                            excelDocument.insertValue('CL21', #CheckSign, _workSheetNum);
                            break;
                        case RPayPFReportPeriod::Quarter3 :
                            excelDocument.insertValue('DE21', #CheckSign, _workSheetNum);
                            break;
                        case RPayPFReportPeriod::Quarter4 :
                            excelDocument.insertValue('DP21', #CheckSign, _workSheetNum);
                            break;
                    }
                }
            }
            else
            {
                switch (taxPeriod2010)
                {
                    case RPayReportPensionPeriod2010::HalfYear :
                        excelDocument.insertValue('CL21', #CheckSign, _workSheetNum);
                        break;
                    case RPayReportPensionPeriod2010::Year :
                        excelDocument.insertValue('DP21', #CheckSign, _workSheetNum);
                        break;
                }
            }
            excelDocument.insertValue('BE23', corrReportYear, _workSheetNum);
        }

        excelDocument.insertValue('AO7',    companyInfo.PFRegNum_RU,    _workSheetNum);
        excelDocument.insertValue('AD8',    companyInfo.Name,           _workSheetNum);
        excelDocument.insertValue('H9',     CompanyInfoHelper::partyINN_RU(companyInfo),  _workSheetNum);
        excelDocument.insertValue('AU9',    CompanyInfoHelper::partyKPP_RU(companyInfo),  _workSheetNum);
        excelDocument.insertValue('AU10',   _personCategory,            _workSheetNum);

        if (reportYear > #ReportYear2010)
        {
            if (this.periodType() == enumnum(RPayReportSocialTaxPeriod))
            {
                switch (taxPeriod)
                {
                    case RPayReportSocialTaxPeriod::Quarter :
                        excelDocument.insertValue('M14', #CheckSign, _workSheetNum);
                        break;
                    case RPayReportSocialTaxPeriod::HalfYear :
                        excelDocument.insertValue('AH14', #CheckSign, _workSheetNum);
                        break;
                    case RPayReportSocialTaxPeriod::NineMonth :
                        excelDocument.insertValue('BA14', #CheckSign, _workSheetNum);
                        break;
                    case RPayReportSocialTaxPeriod::Year :
                        excelDocument.insertValue('BL14', #CheckSign, _workSheetNum);
                        break;
                }
            }
            else if (this.periodType() == enumnum(RPayPFReportPeriod))
            {
                switch (taxPeriodByQtr)
                {
                    case RPayPFReportPeriod::Quarter1 :
                        excelDocument.insertValue('M14',  #CheckSign, _workSheetNum);
                        break;
                    case RPayPFReportPeriod::Quarter2 :
                        excelDocument.insertValue('AH14', #CheckSign, _workSheetNum);
                        break;
                    case RPayPFReportPeriod::Quarter3 :
                        excelDocument.insertValue('BA14', #CheckSign, _workSheetNum);
                        break;
                    case RPayPFReportPeriod::Quarter4 :
                        excelDocument.insertValue('BL14',  #CheckSign, _workSheetNum);
                        break;
                }
            }
            excelDocument.insertValue('CW14', reportYear, _workSheetNum);
        }
        else
        {
            if (taxPeriod2010 == RPayReportPensionPeriod2010::HalfYear)
            {
                excelDocument.insertValue('AW16', #CheckSign, _workSheetNum);
            }
            else
            {
                excelDocument.insertValue('BH16', #CheckSign, _workSheetNum);
            }
        }

        switch (reportType)
        {
            case RpayPensionFundExportKindOfCorrection::Cancellative:
                excelDocument.insertValue('D23', #CheckSign, _workSheetNum);
                fillCorrectPeriod();
                break;

            case RpayPensionFundExportKindOfCorrection::None:
                excelDocument.insertValue('T18', #CheckSign, _workSheetNum);
                break;

            case RpayPensionFundExportKindOfCorrection::Correctional:
                excelDocument.insertValue('D21', #CheckSign, _workSheetNum);
                fillCorrectPeriod();
                break;
        }

        excelDocument.insertValue('B28',    _emplTable.Name(),      _workSheetNum);
        excelDocument.insertValue('AC28',   _emplTable.payPFRINN(), _workSheetNum);
        if (reportType != RpayPensionFundExportKindOfCorrection::Cancellative)
            excelDocument.insertValue('AR28',   strupr(LogisticsPostalAddress::findByLocation(_emplTable.personTable().PensionFundLocation).Address), _workSheetNum);

        excelDocument.insertValue('B46',    OfficialsTable_RU::findDirector().Title,    _workSheetNum);
        excelDocument.insertValue('CL46',   OfficialsTable_RU::nameDirector(),          _workSheetNum);

        excelDocument.insertValue('I48',    DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), _workSheetNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSeniorityPeriods</Name>
				<Source><![CDATA[
    protected void fillSeniorityPeriods(int             _workSheetNum,
                                        str 20          _personCategory,
                                        RHRMEmplTable   _emplTable,
                                        int             _rowStart       = 32,
                                        int             _rowMax         = 44)
    {
        container                       seniorityPeriods;
        StartDate                       periodStartDate;
        EndDate                         periodEndDate;
        RPayInsuranceSeniorityTypeId    insuranceSeniorityTypeId;

        int                             curRow;

        seniorityCommand.parmValue([#SeniorityKey]);
        seniorityIterator = seniorityCommand.iterator();

        curRow = _rowStart;

        while (seniorityIterator.more())
        {
            seniorityPeriods = seniorityIterator.value();
            [periodStartDate, periodEndDate, insuranceSeniorityTypeId] = seniorityPeriods;

            excelDocument.insertValue('B'  + int2str(curRow), curRow - _rowStart + 1,   _workSheetNum);
            excelDocument.insertValue('I'  + int2str(curRow), date2str(periodStartDate, 123, 2, 2, 2, 2, 4, DateFlags::None),   _workSheetNum);
            excelDocument.insertValue('Y'  + int2str(curRow), date2str(periodEndDate, 123, 2, 2, 2, 2, 4, DateFlags::None),     _workSheetNum);
            excelDocument.insertValue('CI' + int2str(curRow), insuranceSeniorityTypeId, _workSheetNum);

            curRow++;
            if (curRow > _rowMax)
                break;

            seniorityIterator.moveNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundAmountCells</Name>
				<Source><![CDATA[
    protected container fundAmountCells()
    {
        return ['BR28', 'CI28', 'CZ28', 'DQ28'];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmployeesData</Name>
				<Source><![CDATA[
    protected void initEmployeesData()
    {
        parmContract = new RPayPFReportParmContract();
        parmContract.reportStartPeriod(reportStartPeriod);
        parmContract.reportEndPeriod(reportEndPeriod);
        parmContract.corrReportStartPeriod(corrReportStartPeriod);
        parmContract.corrReportEndPeriod(corrReportEndPeriod);
        parmContract.seniorityEndPeriod(seniorityEndPeriod);
        parmContract.seniorityStartPeriod(seniorityStartPeriod);
        parmContract.queryRun(queryRun.pack());
        parmContract.correctionType(reportType);

        reportData = RPayPFReportCtrl::construct(this);
        reportData.prepareData();
        totalFundCommand = new RPayReportCommandSZV6(reportData.reportData(), [#FundAmountDS]);
        seniorityCommand = new RPayReportCommandSZV6(reportData.reportData(), [#SeniorityDS]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    protected void initParameters()
    {
        super();

        if (! payTaxParameters.PensionFundinvalidDeduction)
        {
            info(strFmt("@SYS76498", "@RUP854", "@RUP1178"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>minYearEnabled</Name>
				<Source><![CDATA[
    protected Yr minYearEnabled()
    {
        return #ReportYear2010;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    public container parmContract()
    {
        return parmContract.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodType</Name>
				<Source><![CDATA[
    protected enumId periodType()
    {
        return enumnum(RPayPFReportPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportData</Name>
				<Source><![CDATA[
    public RPayPFReportCtrl reportData()
    {
        return new RPayPFReportCtrlSZV61();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RHRMEmplTable   emplTableLocal;
        container       con;

        RHRMEmplId      prevEmplId;
        str             prevCategory;
        int             workSheetNum;

        if (! this.checkCompanyInfo() || ! this.checkTaxParameters())
            return;

        this.initEmployeesData();

        totalFundCommand.parmValue(connull());
        fundDataIterator = totalFundCommand.iterator();

        if (fundDataIterator.more())
        {
            this.progressInit(this.caption(), SysQuery::countTotal(queryRun), #AviFormLetter);
            progress.updateInterval(0);

            while (fundDataIterator.more())
            {
                con = fundDataIterator.value();
                this.getKeyValue(con);

                if (keyEmplId && keyCategory)
                {
                    if (prevEmplId != keyEmplId)
                    {
                        emplTableLocal = RHRMEmplTable::find(keyEmplId);
                        progress.setText(strFmt("@RUP3038", emplTableLocal.EmployeeId, emplTableLocal.Name()));
                        progress.incCount();

                        if (excelDocument)
                        {
                            if (workSheetNum == 1)
                            {
                                excelDocument.deleteWorkSheet(2);
                            }
                            excelDocument.visible(true);
                            excelDocument = NULL;
                        }

                        if (!this.makeDocument())
                        {
                            continue;
                        }

                        workSheetNum = 1;
                        this.fillHeader(workSheetNum, keyCategory, emplTableLocal);
                        this.fillFundAmounts(workSheetNum);
                        excelDocument.insertSheet(1, 1);
                        this.fillSeniorityPeriods(workSheetNum, keyCategory, emplTableLocal);
                        prevCategory = keyCategory;
                        prevEmplId   = keyEmplId;
                    }

                    if (prevCategory != keyCategory && excelDocument)
                    {
                        ++workSheetNum;
                        this.fillHeader(workSheetNum, keyCategory, emplTableLocal);
                        this.fillFundAmounts(workSheetNum);
                        this.fillSeniorityPeriods(workSheetNum, keyCategory, emplTableLocal);
                        prevCategory = keyCategory;
                    }
                }

                fundDataIterator.moveNext();
            }

            if (excelDocument)
            {
                if (workSheetNum == 1)
                {
                    excelDocument.deleteWorkSheet(2);
                }
                excelDocument.visible(true);
                excelDocument = NULL;
            }
        }
        else
        {
            info("@GLS101555");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version        = conpeek(_packedClass, 1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    this.initQuery();
                }

                this.setQueryEmplRange();
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyValue</Name>
				<Source><![CDATA[
    protected void getKeyValue(container _con)
    {
        [#parmKeyReport] = conpeek(_con, 1);
        [#parmValue]     = conpeek(_con, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>