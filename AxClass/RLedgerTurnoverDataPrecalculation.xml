<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RLedgerTurnoverDataPrecalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RLedgerTurnoverDataPrecalculation</c> class calculates preprocessed transaction data for utilizing in turnover statements.
/// </summary>
class RLedgerTurnoverDataPrecalculation extends RunBaseBatch implements BatchRetryable
{
    NoYes                    deleteAll;
    RLedgerTurnoverSheetType type;

    DialogField              dlgDeleteAll;
    DialogField              dlgType;

    protected const Version currentVersion = 1;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog box can be shown and the parameters can be changed, but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class two times with the
    ///    same parameters is not always possible. If the <c>RunBaseBatch.canGoBatch</c> method is false, this
    ///    method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    ///    created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dlgType      = dialog.addFieldValue(enumstr(RLedgerTurnoverSheetType), type);
        dlgDeleteAll = dialog.addFieldValue(enumstr(NoYes), deleteAll, "@SYS3947", "@SYS4081695");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers values from dialog fields to the class member values that represent the user input.
    /// </summary>
    /// <returns>
    /// true if super(), otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        type      = dlgType.value();
        deleteAll = dlgDeleteAll.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, deleteAll, type];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        Common                               common;
        CustTrans                            custTrans;
        VendTrans                            vendTrans;
        Empltrans_RU                         emplTrans;
        RLedgerTurnoverParamValueCombination paramValueCombination;
        GeneralJournalAccountEntry           accountEntry;
        RLedgerJournalAccountEntryModule  accountEntryModule;
        LedgerParameters                     ledgerParameters;
        const int retryNum = 5;

        try
        {
            if (deleteAll)
            {
                ttsBegin;

                ledgerParameters = LedgerParameters::find(true);
                ledgerParameters.UsePrecalcData_RU = NoYes::No;
                ledgerParameters.update();

                delete_from paramValueCombination
                    where paramValueCombination.ReportType == type;

                if (type == RLedgerTurnoverSheetType::LedgerDimension)
                {
                    delete_from accountEntryModule;
                }

                ttsCommit;
            }

            switch (type)
            {
                case RLedgerTurnoverSheetType::CustTurnover :
                    common = custTrans;
                    break;
                case RLedgerTurnoverSheetType::VendTurnover :
                    common = vendTrans;
                    break;
                case RLedgerTurnoverSheetType::EmplTurnover :
                    common = emplTrans;
                    break;
                case RLedgerTurnoverSheetType::LedgerDimension :
                    common = accountEntry;
                    break;
            }

            RLedgerTurnoverType::updatePrecalcData(common, type, true);

            ttsBegin;

            ledgerParameters = LedgerParameters::find(true);
            ledgerParameters.UsePrecalcData_RU      = NoYes::Yes;
            ledgerParameters.PrecalcDataActual_RU   = NoYes::Yes;
            ledgerParameters.update();

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= retryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the job can be executed in impersonate mode.
    /// </summary>
    /// <returns>
    ///    true if the job can be executed in impersonate mode; otherwise, false.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case currentVersion:
                [version, deleteAll, type] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>RLedgerTurnoverDataPrecalculation</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>RLedgerTurnoverDataPrecalculation</c> class.
    /// </returns>
    static public RLedgerTurnoverDataPrecalculation construct()
    {
        return new RLedgerTurnoverDataPrecalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS4081701";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        RLedgerTurnoverDataPrecalculation dataPrecalc;

        dataPrecalc = RLedgerTurnoverDataPrecalculation::construct();

        if (dataPrecalc.prompt())
        {
            dataPrecalc.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>