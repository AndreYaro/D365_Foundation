<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationAddressValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using TaxServiceAPIContracts = Microsoft.Dynamics.TaxCalculation.ApiContracts;

/// <summary>
/// This class is the enter point of tax intergration address validation
/// </summary>
internal class TaxIntegrationAddressValidator
{
    private TaxIntegrationAddressValidationObject taxIntegrationAddressValidationObject;
    private TaxIntegrationAddressValidationController taxIntegrationAddressValidationController;
    private TaxIntegrationFeatureSetupId featureSetupId;
    private SysInstrumentationLogger instrumentationLogger;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        taxIntegrationAddressValidationController = TaxIntegrationAddressValidationController::instance();
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(TaxIntegrationAddressValidator));
        this.setFeatureSetupId(this.taxIntegrationAddressValidationController.getTaxIntegrationFeatureSetupId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate address
    /// </summary>
    /// <param name = "_logisticsPostalAddress">logisticsPostalAddress</param>
    public void validateAddress(LogisticsPostalAddress _logisticsPostalAddress)
    {
        TaxServiceAPIContracts.TaxServiceISVAddressValidationInput addressValidationInput = new TaxServiceAPIContracts.TaxServiceISVAddressValidationInput();
        this.taxIntegrationAddressValidationObject = new TaxIntegrationAddressValidationObject(_logisticsPostalAddress);
        taxIntegrationAddressValidationObject.generateTargetAddressObject();

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(funcName(), TaxIntegrationAddressValidationConstants::InstrumentationNamespace))
        {
            this.checkBeforeRequest();

            MapEnumerator addressMapEnumerator = taxIntegrationAddressValidationObject.getAddressObjectMap().getEnumerator();
            while (addressMapEnumerator.moveNext())
            {
                addressValidationInput.AddOrUpdateField(addressMapEnumerator.currentKey(), addressMapEnumerator.currentValue());
            }
            this.doAddressValidation(addressValidationInput);
        }
        this.checkAfterResponse();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAddressValidation</Name>
				<Source><![CDATA[
    private void doAddressValidation(TaxServiceAPIContracts.TaxServiceISVAddressValidationInput _addressValidationInput)
    {
        TaxServiceAPIContracts.TaxCalculationISVAddressValidationResultAggregator result;

        try
        {
            var taxEngineProxy = new TaxEngineServicePlusProxy();
            result = taxEngineProxy.doAddressValidation(this.featureSetupId, _addressValidationInput);
            if (result.OK)
            {
                taxIntegrationAddressValidationObject.generateResultAddressObject(result);
            }
            else
            {
                instrumentationLogger.logException(result.Exception, 'Exception happened when calling remote address validation API.');
                error("@TaxIntegration:AddressValidationError");
            }
        }
        catch (Exception::CLRError)
        {
            var clrException = CLRInterop::getLastException();

            if (clrException)
            {
                instrumentationLogger.logError(strFmt('Failed to validate address %1. Exception: %2',
                        taxIntegrationAddressValidationObject.getOriginalLogisticsPostalAddress().Location ,
                        clrException.ToString()));
            }

            error("@SYS331662");
        }
        catch (Exception::Break)
        {
            instrumentationLogger.logInformation('Address validation cancelled.');
        }
        catch
        {
            instrumentationLogger.logError(strFmt('An error occurred while validating address %1',
                    taxIntegrationAddressValidationObject.getOriginalLogisticsPostalAddress().Location));
            error("@TaxIntegration:AddressValidationError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIntegrationLogisticsPostalAddressObject</Name>
				<Source><![CDATA[
    public TaxIntegrationAddressValidationObject getTaxIntegrationLogisticsPostalAddressObject()
    {
        return this.taxIntegrationAddressValidationObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxIntegrationAddressValidationObject</Name>
				<Source><![CDATA[
    public void setTaxIntegrationAddressValidationObject(TaxIntegrationAddressValidationObject _taxIntegrationAddressValidationObject )
    {
        this.taxIntegrationAddressValidationObject = _taxIntegrationAddressValidationObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFeatureSetupId</Name>
				<Source><![CDATA[
    public void setFeatureSetupId(TaxIntegrationFeatureSetupId _featureSetupId)
    {
        this.featureSetupId = _featureSetupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeatureSetupId</Name>
				<Source><![CDATA[
    public TaxIntegrationFeatureSetupId getFeatureSetupId()
    {
        return  this.featureSetupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAfterResponse</Name>
				<Source><![CDATA[
    private boolean checkAfterResponse()
    {
        if (taxIntegrationAddressValidationObject.getValidatedAddressCount() == 0)
        {
            info::addMessage(Exception::Info, "@TaxIntegration:AddressValidationNoValidatedAddressMsg");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBeforeRequest</Name>
				<Source><![CDATA[
    private boolean checkBeforeRequest()
    {
        if (!this.featureSetupId)
        {
            throw error("@TaxIntegration:AddressValidationFeatureNotProvidedError");
        }

        if (!this.taxIntegrationAddressValidationController.isCountryRegionSupported(taxIntegrationAddressValidationObject.getOriginalLogisticsPostalAddress().CountryRegionId))
        {
            throw Error("@TaxIntegration:AddressValidationCountryNotSupporttedError");
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>