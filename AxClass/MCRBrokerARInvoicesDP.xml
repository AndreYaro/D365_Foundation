<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRBrokerARInvoicesDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRBrokerARInvoicesDP</c> populates the temporary table
/// used in the broker accounts receivable invoices report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(MCRBrokerARInvoices)),
    SRSReportParameterAttribute(classstr(MCRBrokerARInvoicesContract))
]
public class MCRBrokerARInvoicesDP extends SRSReportDataProviderBase
{
    TmpMCRARInvoice     tmpMCRARInvoice;
    MCRBrokerAccrual    mcrBrokerAccrual;
    VendTable           vendTable;
    CustTable           custTable;
    CustTrans           custTrans;

    List                broker;
    List                salesId;

    TransDate           fromDate;
    TransDate           toDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpMCRARInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first record in the <c>TmpMCRARInvoice</c> temporary table.
    /// </summary>
    /// <returns>
    /// The now set <c>TmpMCRARInvoice</c> calss variable.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(TmpMCRARInvoice))
    ]
    public TmpMCRARInvoice getTmpMCRARInvoice()
    {
        select tmpMCRARInvoice;
        return tmpMCRARInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpMCRARInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and inserts a <c>TmpMCRARInvoice</c> buffer.
    /// </summary>
    public void insertTmpMCRARInvoice()
    {
        MCRBrokerAccrual mcrBrokerAccrualLoc;
        RecIdCount      lineCount;

        select count(RecId) from mcrBrokerAccrualLoc
            where mcrBrokerAccrualLoc.BrokerID  == mcrBrokerAccrual.BrokerID
               && mcrBrokerAccrualLoc.SalesId   == mcrBrokerAccrual.SalesId
               && mcrBrokerAccrualLoc.InvoiceId == mcrBrokerAccrual.InvoiceId;

        lineCount = mcrBrokerAccrualLoc.RecId;

        tmpMCRARInvoice.BrokerId             = mcrBrokerAccrual.BrokerID;
        tmpMCRARInvoice.BrokerName           = DirPartyTable::findRec(vendTable.Party).Name;
        tmpMCRARInvoice.SalesId              = mcrBrokerAccrual.SalesId;
        tmpMCRARInvoice.CustomerId           = custTable.AccountNum;
        tmpMCRARInvoice.CustomerName         = DirPartyTable::findRec(custTable.Party).Name;
        tmpMCRARInvoice.InvoiceId            = mcrBrokerAccrual.InvoiceId;
        tmpMCRARInvoice.LineCount            = lineCount;
        tmpMCRARInvoice.InvoiceAmount        = custTrans.AmountMST;
        tmpMCRARInvoice.PartialInvoiceAmount = (tmpMCRARInvoice.InvoiceAmount / lineCount);
        tmpMCRARInvoice.SettledAmount        = custTrans.SettleAmountMST;
        tmpMCRARInvoice.PartialSettledAmount = (tmpMCRARInvoice.SettledAmount / lineCount);
        tmpMCRARInvoice.OpenAmount           = MCRBrokerARInvoicesOpenAmountFlight::instance().isEnabled() ?
            custTrans.remainAmountMST() : (custTrans.AmountMST - custTrans.SettleAmountMST);
        tmpMCRARInvoice.PartialOpenAmount    = (tmpMCRARInvoice.OpenAmount / lineCount);
        tmpMCRARInvoice.MiscChargeCode       = mcrBrokerAccrual.MiscChargeCode;
        tmpMCRARInvoice.QualifiedAmount      = mcrBrokerAccrual.QualifiedAmt;
        tmpMCRARInvoice.ApprovedAmount       = mcrBrokerAccrual.ApprovedAmt;
        tmpMCRARInvoice.DifferenceAmount     = (tmpMCRARInvoice.QualifiedAmount - tmpMCRARInvoice.ApprovedAmount);

        tmpMCRARInvoice.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        Query                           query;
        QueryRun                        queryRun;
        QueryBuildRange                 qbRange;
        MCRBrokerARInvoicesContract     contract;
        ListEnumerator                  brokerListEnum;
        ListEnumerator                  salesIdListEnum;
        contract = this.parmDataContract() as MCRBrokerARInvoicesContract;

        broker   = contract.parmBroker();
        salesId  = contract.parmSalesId();
        fromDate = contract.parmFromDate();
        toDate   = contract.parmToDate();

        query = this.parmQuery();
        queryRun = new QueryRun(query);

        if (broker != null)
        {
            qbRange = queryRun.query().dataSourceTable(tableNum(MCRBrokerAccrual)).addRange(fieldNum(MCRBrokerAccrual, BrokerID));
            brokerListEnum = broker.getEnumerator();

            while (brokerListEnum.moveNext())
            {
                //Finding the corresponding account number for the account name.
                qbRange.value(queryRangeConcat(qbRange.value(), brokerListEnum.current()));
            }
        }

        if (salesId != null)
        {
            qbRange = queryRun.query().dataSourceTable(tableNum(MCRBrokerAccrual)).addRange(fieldNum(MCRBrokerAccrual, SalesId));
            salesIdListEnum = salesId.getEnumerator();

            while (salesIdListEnum.moveNext())
            {
                qbRange.value(queryRangeConcat(qbRange.value(), salesIdListEnum.current()));
            }
        }

        if (fromDate != dateNull()
            || toDate != dateNull())
        {
            qbRange = queryRun.query().dataSourceTable(tableNum(MCRBrokerAccrual)).addRange(fieldNum(MCRBrokerAccrual, createdDateTime));
            qbRange.value(queryRange(fromDate, toDate));
        }

        qbRange = queryRun.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans, TransType));
        qbRange.value(SysQuery::value(LedgerTransType::Sales));

        while (queryRun.next())
        {
            MCRBrokerAccrual = queryRun.get(tableNum(MCRBrokerAccrual));
            vendTable = queryRun.get(tableNum(VendTable));
            custTable = queryRun.get(tableNum(CustTable));
            custTrans = queryRun.get(tableNum(CustTrans));

            this.insertTmpMCRARInvoice();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>