<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXJobUploadTargetLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the logger class for upload target sync operations of a job
/// </summary>
internal class RetailCDXJobUploadTargetLogger extends RetailCDXLogger
{
    RetailCDXJobUploadTargetContext context;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>RetailCDXJobUploadTargetLogger</c> class.
    /// </summary>
    /// <param name = "context">The upload target context object.</param>
    internal void new(RetailCDXJobUploadTargetContext _jobContext)
    {
        this.context = _jobContext;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadTargetProcessingStart</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadTargetProcessingStart()
    {
        this.logStartEvent('CDXJobUploadTargetProcessing', this.getEventDataFromContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadTargetProcessingFailure</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadTargetProcessingFailure(System.Exception exception)
    {
        this.logEvent('CDXJobUploadTargetProcessingFailure', this.getEventDataFromContext(exception), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadTargetProcessingStop</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadTargetProcessingStop(System.Exception exception)
    {
        this.logStopEvent('CDXJobUploadTargetProcessing', this.getEventDataFromContext(exception));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadTargetProcessingSkipped</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadTargetProcessingSkipped()
    {
        this.logEvent('CDXJobUploadTargetProcessingSkipped', this.getEventDataFromContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadTargetCtxInitializationStart</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadTargetCtxInitializationStart()
    {
        this.logStartEvent('CDXJobUploadTargetCtxInitialization', this.getEventDataFromContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadTargetCtxInitializationFailure</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadTargetCtxInitializationFailure(System.Exception exception)
    {
        this.logEvent('CDXJobUploadTargetCtxInitializationFailure', this.getEventDataFromContext(exception), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadTargetCtxInitializationStop</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadTargetCtxInitializationStop(System.Exception exception)
    {
        this.logStopEvent('CDXJobUploadTargetCtxInitialization', this.getEventDataFromContext(exception));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadTargetRetrieveDataPackageStart</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadTargetRetrieveDataPackageStart()
    {
        this.logStartEvent('CDXJobUploadTargetRetrieveDataPackage', this.getEventDataFromContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadTargetRetrieveDataPackageFailure</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadTargetRetrieveDataPackageFailure(System.Exception exception)
    {
        this.logEvent('CDXJobUploadTargetRetrieveDataPackageFailure', this.getEventDataFromContext(exception), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadTargetRetrieveDataPackageStop</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadTargetRetrieveDataPackageStop(System.Exception exception)
    {
        this.logStopEvent('CDXJobUploadTargetRetrieveDataPackage', this.getEventDataFromContext(exception));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadTargetApplyDataPackageStart</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadTargetApplyDataPackageStart()
    {
        this.logStartEvent('CDXJobUploadTargetApplyDataPackage', this.getEventDataFromContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadTargetApplyDataPackageFailure</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadTargetApplyDataPackageFailure(System.Exception exception)
    {
        this.logEvent('CDXJobUploadTargetApplyDataPackageFailure', this.getEventDataFromContext(exception), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadTargetApplyDataPackageStop</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadTargetApplyDataPackageStop(System.Exception exception)
    {
        this.logStopEvent('CDXJobUploadTargetApplyDataPackage', this.getEventDataFromContext(exception));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadTargetUpdateSessionStart</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadTargetUpdateSessionStart()
    {
        this.logStartEvent('CDXJobUploadTargetUpdateSession', this.getEventDataFromContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadTargetUpdateSessionFailure</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadTargetUpdateSessionFailure(System.Exception exception)
    {
        this.logEvent('CDXJobUploadTargetUpdateSessionFailure', this.getEventDataFromContext(exception), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadTargetUpdateSessionStop</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadTargetUpdateSessionStop(System.Exception exception)
    {
        this.logStopEvent('CDXJobUploadTargetUpdateSession', this.getEventDataFromContext(exception));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventDataFromContext</Name>
				<Source><![CDATA[
    private container getEventDataFromContext(System.Exception exception = null)
    {
        boolean success; str errorMessage;
        [success, errorMessage] = this.getResultFromException([exception]);

        if (context)
        {
            return  [context.paramSession(),
                int642Str(context.paramDataGroupRecID()),
                context.paramScheduleRecID(),
                context.paramJobID(),
                context.paramDataStoreName(),
                context.paramRowsAffected(),
                context.paramFileSize(),
                context.paramPackageId(),
                context.paramCurrentTryCount(),
                enum2Symbol(enumNum(RetailCDXUploadSessionStatus), context.paramSessionStatus()),
                context.paramCorrelationId(),
                this.duration('CDXJobUploadTargetRetrieveDataPackage'),
                this.duration('CDXJobUploadTargetApplyDataPackage'),
                this.duration('CDXJobUploadTargetUpdateSession'),
                this.duration('CDXJobUploadTargetProcessing'),
                success,
                errorMessage,
                this.previousErrorEvent
            ];
        }
        else
        {
            return [0,
                '',
                0,
                '',
                '',
                0,
                0,
                nullValueFromType(Types::Guid),
                0,
                nullValueFromType(Types::Guid),
                0,
                0,
                0,
                0,
                false,
                errorMessage,
                this.previousErrorEvent
                ];
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>