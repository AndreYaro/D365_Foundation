<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcAvailableDlvDates_TransferTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesCalcAvailableDlvDates_TransferTable extends SalesCalcAvailableDlvDates
{
    InventTransferTable   inventTransferTable;
    InventTransferTable   inventTransferTableOrig;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        inventTransferTable,
        inventTransferTableOrig
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditDlvMode</Name>
				<Source><![CDATA[
    public boolean allowEditDlvMode()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditInventLocation</Name>
				<Source><![CDATA[
    public boolean allowEditInventLocation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditInventSite</Name>
				<Source><![CDATA[
    public boolean allowEditInventSite()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLeadTime</Name>
				<Source><![CDATA[
    public LeadTime salesLeadTime(CalendarDays _basedOnCalendarSetup = NoYes::Yes)
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to do delivery date control on the confirmed dates.
    /// </summary>
    /// <returns>
    /// true if it should do the delivery date control on confirmed dates; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method should always return false in sub-classes that are related to tables that do not
    /// contain confirmed date fields. For example, the <c>TmpSalesTable</c> and <c>TmpSalesLine</c> tables.
    /// </remarks>
    protected boolean checkConfirmedDates()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateCaller</Name>
				<Source><![CDATA[
    protected boolean doUpdateCaller(boolean _disableDlvDateControl = false)
    {
        if (_disableDlvDateControl)
        {
            if (inventTransferTableOrig.DeliveryDateControlType != SalesDeliveryDateControlType::None)
            {
                return true;
            }
        }
        else
        {
            if (deliveryDateControlMap.DlvMode                 != inventTransferTableOrig.DlvModeId             ||
                deliveryDateControlMap.InventLocationId        != inventTransferTableOrig.InventLocationIdFrom  ||
                deliveryDateControlMap.ShippingDateRequested   != inventTransferTableOrig.ShipDate              ||
                deliveryDateControlMap.ReceiptDateRequested    != inventTransferTableOrig.ReceiveDate)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether changes have been made to fields that influence the delivery date control.
    /// </summary>
    /// <returns>
    /// true if changes have been made to fields that influence the delivery date control; otherwise, false.
    /// </returns>
    protected boolean doValidateWrite()
    {
        if (inventTransferTable.DlvModeId                   != inventTransferTableOrig.DlvModeId                    ||
            inventTransferTable.InventLocationIdFrom        != inventTransferTableOrig.InventLocationIdFrom         ||
            inventTransferTable.InventLocationIdTo          != inventTransferTableOrig.InventLocationIdTo           ||
            inventTransferTable.DeliveryDateControlType     != inventTransferTableOrig.DeliveryDateControlType      ||
            inventTransferTable.atpTimeFence                != inventTransferTableOrig.atpTimeFence                 ||
            inventTransferTable.atpInclPlannedOrders        != inventTransferTableOrig.atpInclPlannedOrders         ||
            inventTransferTable.atpApplyDemandTimeFence     != inventTransferTableOrig.atpApplyDemandTimeFence      ||
            inventTransferTable.atpApplySupplyTimeFence     != inventTransferTableOrig.atpApplySupplyTimeFence      ||
            inventTransferTable.atpBackwardDemandTimeFence  != inventTransferTableOrig.atpBackwardDemandTimeFence   ||
            inventTransferTable.atpBackwardSupplyTimeFence  != inventTransferTableOrig.atpBackwardSupplyTimeFence)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldId2DlvDateType</Name>
				<Source><![CDATA[
    protected SalesDlvDateType fieldId2DlvDateType(fieldId _fieldId)
    {
        SalesDlvDateType    dlvDateType;
        switch (_fieldId)
        {
            case fieldnum(InventTransferTable,ReceiveDate) :
                dlvDateType = SalesDlvDateType::RequestedReceipt;
                break;
            case fieldnum(InventTransferTable,ShipDate) :
                dlvDateType = SalesDlvDateType::RequestedShipping;
                break;
            default :
                dlvDateType = SalesDlvDateType::None;
                break;
        }

        return dlvDateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    protected InventLocationId parmInventLocationId(InventLocationId  _inventLocationId = inventTransferTable.InventLocationIdFrom)
    {
        deliveryDateControlMap.InventLocationId  = _inventLocationId;
        inventTransferTable.InventLocationIdFrom = _inventLocationId;
        return inventTransferTable.InventLocationIdFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    protected InventSiteId parmInventSiteId(InventSiteId  _inventSiteId = '')
    {
        return this.parmInventSiteIdSelected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransferTable</Name>
				<Source><![CDATA[
    public InventTransferTable parmInventTransferTable(InventTransferTable _inventTransferTable = inventTransferTable)
    {
        deliveryDateControlMap        = _inventTransferTable.data();
        inventTransferTable           = _inventTransferTable.data();
        inventTransferTableOrig       = _inventTransferTable.orig();

        return inventTransferTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptCalendarId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the receipt calendar ID for the customer and returns it.
    /// </summary>
    /// <returns>
    /// The receipt calendar ID for the customer.
    /// </returns>
    protected CalendarId receiptCalendarId()
    {
        if (receiptCalendarId)
        {
            return receiptCalendarId;
        }

        receiptCalendarId = InventLocation::find(inventTransferTable.InventLocationIdTo).ReqCalendarId;

        return receiptCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesLeadTimeBasedOnDeliveryDateControlType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales lead time based on the delivery date control type and sets that the sales lead time has been found.
    /// </summary>
    protected void initializeSalesLeadTimeBasedOnDeliveryDateControlType()
    {
        switch (inventTransferTable.DeliveryDateControlType)
        {
            case SalesDeliveryDateControlType::ATP:
            case SalesDeliveryDateControlType::ATPPlusIssueMargin:
                salesLeadTime  = 0;
                salesLeadTimeBasedOnCalendarSetup = salesLeadTime;
                break;
            case SalesDeliveryDateControlType::None:
            case SalesDeliveryDateControlType::SalesLeadTime:
                // For SalesDeliveryDateControlType::None lead time should also be calculated.
                salesLeadTime  = SalesParameters::find().LeadTimeSalesDefault;
                salesLeadTimeBasedOnCalendarSetup = this.adjustLeadTimeForWorkingDays(salesLeadTime);
                break;
        }

        salesLeadTimeFound = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of days it takes an order to retrieve from the shipping point to the receiving
    /// point for a given mode of delivery.
    /// </summary>
    /// <returns>
    /// The number of days it takes an order to retrieve from the shipping point to the receiving point for
    /// a given mode of delivery.
    /// </returns>
    public CustVendTransportDays transportDays()
    {
        CustVendTransportDays transportDays = CustVendTransportPointLine::defaultTransportDays(dlvModeIdSelected,
                                                                                       inventLocationIdSelected,
                                                                                       '',
                                                                                       '',
                                                                                       '',
                                                                                       '',
                                                                                       inventTransferTable.InventLocationIdTo);
        return transportDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = RunBase::getVersion(_packedClass);
        container   packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedSuper] = _packedClass;

                if (packedSuper)
                    return super(packedSuper);
            break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCaller</Name>
				<Source><![CDATA[
    protected void updateCaller(Common  _record,
                                boolean _disableDlvDateControl = false)
    {
        super(_record,_disableDlvDateControl);

        if (this.parmCheckOnly())
            return;

        if (_record.TableId != tablenum(InventTransferTable))
            throw error("@SYS18626");

        InventTransferTable inventTransferTableCaller = _record;

        if (this.parmCancelModifiedField())
        {
            if (inventTransferTableCaller.RecId)
            {
                inventTransferTableCaller.ShipDate                   = inventTransferTableOrig.ShipDate;
                inventTransferTableCaller.ReceiveDate                = inventTransferTableOrig.ReceiveDate;
                inventTransferTableCaller.DeliveryDateControlType    = inventTransferTableOrig.DeliveryDateControlType;
                inventTransferTableCaller.atpTimeFence               = inventTransferTableOrig.atpTimeFence;
                inventTransferTableCaller.atpInclPlannedOrders       = inventTransferTableOrig.atpInclPlannedOrders;
                inventTransferTableCaller.atpApplyDemandTimeFence    = inventTransferTableOrig.atpApplyDemandTimeFence;
                inventTransferTableCaller.atpApplySupplyTimeFence    = inventTransferTableOrig.atpApplySupplyTimeFence;
                inventTransferTableCaller.atpBackwardDemandTimeFence = inventTransferTableOrig.atpBackwardDemandTimeFence;
                inventTransferTableCaller.atpBackwardSupplyTimeFence = inventTransferTableOrig.atpBackwardSupplyTimeFence;
            }
            return;
        }

        if (_disableDlvDateControl)
        {
            inventTransferTableCaller.DeliveryDateControlType    = SalesDeliveryDateControlType::None;
            inventTransferTableCaller.atpTimeFence               = 0;
            inventTransferTableCaller.atpInclPlannedOrders       = false;
            inventTransferTableCaller.atpApplyDemandTimeFence    = 0;
            inventTransferTableCaller.atpApplySupplyTimeFence    = 0;
            inventTransferTableCaller.atpBackwardDemandTimeFence = 0;
            inventTransferTableCaller.atpBackwardSupplyTimeFence = 0;
        }
        else
        {
            inventTransferTableCaller.DlvModeId            = deliveryDateControlMap.DlvMode;
            inventTransferTableCaller.InventLocationIdFrom = deliveryDateControlMap.InventLocationId;
            inventTransferTableCaller.ReceiveDate          = deliveryDateControlMap.ReceiptDateRequested;
            inventTransferTableCaller.ShipDate             = deliveryDateControlMap.ShippingDateRequested;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static SalesCalcAvailableDlvDates_TransferTable construct()
    {
        return new SalesCalcAvailableDlvDates_TransferTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(
        InventTransferTable _inventTransferTable,
        FieldId             _fieldId = 0)
    {
        SalesDlvDateType    initMasterDateType = this.fieldId2DlvDateType(_fieldId);

        this.parmInventTransferTable(_inventTransferTable);
        this.parmInventLocationIdSelected(_inventTransferTable.InventLocationIdFrom);
        this.parmDlvModeIdSelected(_inventTransferTable.DlvModeId);
        this.parmInventLocationTransportShipping(_inventTransferTable.InventLocationIdFrom);

        InventLocation inventLocation = InventLocation::find(_inventTransferTable.InventLocationIdTo);
        this.parmOrderEntryDeadlineGroupId(InventSite::find(inventLocation.InventSiteId).OrderEntryDeadlineGroupId);
        this.parmInventSiteIdSelected(InventLocation::find(_inventTransferTable.InventLocationIdFrom).InventSiteId);

        this.initMaster(initMasterDateType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransferTable</Name>
				<Source><![CDATA[
    public static SalesCalcAvailableDlvDates_TransferTable newTransferTable(
        InventTransferTable _inventTransferTable,
        fieldId             _fieldId = 0)
    {
        SalesCalcAvailableDlvDates_TransferTable salesCalc = SalesCalcAvailableDlvDates_TransferTable::construct();

        salesCalc.initialize(_inventTransferTable, _fieldId);

        return salesCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>