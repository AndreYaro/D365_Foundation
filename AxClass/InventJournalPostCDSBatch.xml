<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalPostCDSBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventJournalPostCDSBatch</c> class posts adjustment and transfer journals created from CDS integration.
/// </summary>
public class InventJournalPostCDSBatch extends RunBaseBatch implements BatchRetryable
{
    private JournalTransferErrors   transferErrors;
    private DialogField             dialogFieldTransferErrors;
    private BatchHeader             batchHeader;
    private const Version           CurrentVersion = 1;
    private boolean                 isPostAllExternalJournalsFlightEnabled = InventJournalPostCDSPostAllExternalJournalsFlight::instance().isEnabled();
    
    #localmacro.CurrentList
        transferErrors
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>batchHeader</Name>
				<Source><![CDATA[
    private BatchHeader batchHeader()
    {
        if (!batchHeader)
        {
            batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        }
        return batchHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        Dialog ret = this.dialogInternal(dialog, forceOnClient);
        dialogFieldTransferErrors = ret.addField(extendedTypeStr(NoYesId), "@SYS62633", "@SYS62633");
        dialogFieldTransferErrors.value(transferErrors);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            transferErrors = dialogFieldTransferErrors.value();
        }
      
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferErrors</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public JournalTransferErrors parmTransferErrors()
    {
        return transferErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:CDSPostInventoryJournals";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventJournalPostCDSBatch postJournals = new InventJournalPostCDSBatch();

        if (postJournals.prompt())
        {
            postJournals.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
    
        switch (version)
        {
            case CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTask</Name>
				<Source><![CDATA[
    private void runTask(JournalCheckPost _journalCheckPost)
    {
        if (this.isInBatch())
        {
            this.batchHeader().addRuntimeTask(_journalCheckPost, this.parmCurrentBatch().RecId, BatchConstraintType::And);
        }
        else
        {
            _journalCheckPost.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    private void postJournal(InventJournalTable _inventJournalTable)
    {        
        JournalCheckPost journalCheckPost;

        journalCheckPost = InventJournalCheckPost::newPostJournal(_inventJournalTable);
        journalCheckPost.parmTransferErrors(this.parmTransferErrors());
        journalCheckPost.parmThrowCheckFailed(false);

        this.runTask(journalCheckPost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        try
        {
            if (!this.batchInfo())
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            ttsbegin;

            this.execute();

            ttscommit;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() != 0)
            {
                throw Exception::DuplicateKeyException;
            }
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
        
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() != 0)
            {
                throw Exception::UpdateConflict;
            }
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
        
            retry;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }

            retry;
        }
        catch
        {
            if (appl.ttsLevel() != 0)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
            error("@SYS21533");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    private void execute()
    {
        InventJournalTable  inventJournalTable;
  
        while select inventJournalTable
            where inventJournalTable.Posted == NoYes::No
                && (isPostAllExternalJournalsFlightEnabled || inventJournalTable.NumOfLines > 0)
                && inventJournalTable.JournalOriginType == InventJournalOriginType::ExternalIntegration
        {
            try
            {
                this.postJournal(inventJournalTable);
            }
            catch
            {
                continue;
            }
        }

        if (this.isInBatch())
        {
            this.batchHeader().save();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>