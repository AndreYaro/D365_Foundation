<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjHourRateContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjListProjHourRateContract</c> class is the Data Contract class for the
/// <c>ProjListProjHourRateProj</c>Microsoft SQL Server Reporting Services report.
/// </summary>
/// <remarks>
/// This is the Data Contract class for the <c>ProjListProjHourRateProj</c>,
/// <c>ProjListProjHourRateEmplItem</c>, and <c>ProjListProjHourRateCategory</c>Reporting Services
/// reports.
/// </remarks>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classstr(ProjHourRateEmplUIBuilder), SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)
]
public class ProjListProjHourRateContract implements SysOperationValidatable,SysOperationInitializable
{
    boolean    timeMaterial;
    boolean    fixedPrice;
    boolean    timeMaterialBillingMethod;
    boolean    fixedPriceBillingMethod;
    boolean    investment;
    boolean    internalCost;
    boolean    time;
    boolean    hour;
    boolean    expenses;
    boolean    item;
    boolean    revenue;
    boolean    onAcc;
    TransDate    projFromDate;
    TransDate    projToDate;
    TransDate    ledgerFromDate;
    TransDate    ledgerToDate;
    ProjListColumnData      actualVsBudget;
    ProjForecastModelId     forecastModelId;
    ProjListStateProjType   stateProjType;
    Level           level;
    boolean         skipBlankId;
    boolean         skipZero;
    ProjShowAmount  showAmount;
    ProjAmountQty   amountQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default values for parameters.
    /// </summary>
    public void initialize()
    {
        this.parmLevel(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActualVsBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter actualVsBudget.
    /// </summary>
    /// <param name="_actualVsBudget">
    /// The new value of the datacontract parameter actualVsBudget; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter actualVsBudget
    /// </returns>
    [
        DataMemberAttribute('ActualVsBudget'),
        SysOperationLabelAttribute(literalstr("@SYS82685")),
        SysOperationHelpTextAttribute(literalstr("@SYS90657"))
    ]
    public ProjListColumnData parmActualVsBudget(ProjListColumnData _actualVsBudget = actualVsBudget)
    {
        actualVsBudget = _actualVsBudget;
        return actualVsBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter amountQty.
    /// </summary>
    /// <param name="_amountQty">
    /// The new value of the datacontract parameter amountQty; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter amountQty
    /// </returns>
    [
        DataMemberAttribute('AmountQty'),
        SysOperationLabelAttribute(literalstr("@SYS91943")),
        SysOperationHelpTextAttribute(literalstr("@SYS91207"))
    ]
    public ProjAmountQty parmAmountQty(ProjAmountQty _amountQty = amountQty)
    {
        amountQty = _amountQty;
        return amountQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpenses</Name>
				<Source><![CDATA[
/// <summary>
    /// Gets or sets the value of the datacontract parameter expenses.
    /// </summary>
    /// <param name="_expenses">
    /// The new value of the datacontract parameter expenses; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter expenses
    /// </returns>
    [
        DataMemberAttribute('Expenses'),
        SysOperationLabelAttribute(literalstr("@SYP4882014")),
        SysOperationHelpTextAttribute(literalstr("@SYS78369"))
    ]
    public boolean parmExpenses(boolean _expenses = expenses)
    {
        expenses = _expenses;
        return expenses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixedPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter fixedPrice.
    /// </summary>
    /// <param name="_fixedPrice">
    /// The new value of the datacontract parameter fixedPrice; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter fixedPrice
    /// </returns>
    [
        DataMemberAttribute('FixedPrice'),
        SysOperationLabelAttribute(literalstr("@SYS3237")),
        SysOperationHelpTextAttribute(literalstr("@SYS78361"))
    ]
    public boolean parmFixedPrice(boolean _fixedPrice = fixedPrice)
    {
        fixedPrice = _fixedPrice;
        return fixedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixedPriceBillingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter fixedPriceBillingMethod.
    /// </summary>
    /// <param name="_fixedPriceBillingMethod">
    /// The new value of the datacontract parameter fixedPriceBillingMethod; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter fixedPriceBillingMethod
    /// </returns>
    [
        DataMemberAttribute('FixedPriceBillingMethod'),
        SysOperationLabelAttribute(literalstr("@SYS3237")),
        SysOperationHelpTextAttribute(literalstr("@Proj:FixedPriceBillingMethodHelp"))
    ]
    public boolean parmFixedPriceBillingMethod(boolean _fixedPriceBillingMethod = fixedPriceBillingMethod)
    {
        fixedPriceBillingMethod = _fixedPriceBillingMethod;
        return fixedPriceBillingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastModelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter forecastModelId.
    /// </summary>
    /// <param name="_forecastModelId">
    /// The new value of the datacontract parameter forecastModelId; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter forecastModelId
    /// </returns>
    [
        DataMemberAttribute('ForecastModelId'),
        SysOperationLabelAttribute(literalstr("@SYS82923")),
        SysOperationHelpTextAttribute(literalstr("@SYS90481"))
    ]
    public ProjForecastModelId parmForecastModelId(ProjForecastModelId _forecastModelId = forecastModelId)
    {
        forecastModelId = _forecastModelId;
        return forecastModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter hour.
    /// </summary>
    /// <param name="_hour">
    /// The new value of the datacontract parameter hour; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter hour
    /// </returns>
    [
        DataMemberAttribute('Hour'),
        SysOperationLabelAttribute(literalstr("@SYS5269")),
        SysOperationHelpTextAttribute(literalstr("@SYS78368"))
    ]
    public boolean parmHour(boolean _hour = hour)
    {
        hour = _hour;
        return hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInternalCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter internalCost.
    /// </summary>
    /// <param name="_internalCost">
    /// The new value of the datacontract parameter internalCost; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter internalCost
    /// </returns>
    [
        DataMemberAttribute('InternalCost'),
        SysOperationLabelAttribute(literalstr("@SYS78366")),
        SysOperationHelpTextAttribute(literalstr("@SYS78363"))
    ]
    public boolean parmInternalCost(boolean _internalCost = internalCost)
    {
        internalCost = _internalCost;
        return internalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvestment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter investment.
    /// </summary>
    /// <param name="_investment">
    /// The new value of the datacontract parameter investment; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter investment
    /// </returns>
    [
        DataMemberAttribute('Investment'),
        SysOperationLabelAttribute(literalstr("@SYS78353")),
        SysOperationHelpTextAttribute(literalstr("@SYS78364"))
    ]
    public boolean parmInvestment(boolean _investment = investment)
    {
        investment = _investment;
        return investment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter item.
    /// </summary>
    /// <param name="_item">
    /// The new value of the datacontract parameter item; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter item
    /// </returns>
    [
        DataMemberAttribute('Item'),
        SysOperationLabelAttribute(literalstr("@SYS7407")),
        SysOperationHelpTextAttribute(literalstr("@SYS78372"))
    ]
    public boolean parmItem(boolean _item = item)
    {
        item = _item;
        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ledgerFromDate.
    /// </summary>
    /// <param name="_ledgerFromDate">
    /// The new value of the datacontract parameter ledgerFromDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ledgerFromDate
    /// </returns>
    [
        DataMemberAttribute('LedgerFromDate'),
        SysOperationLabelAttribute(literalstr("@SYS24050")),
        SysOperationHelpTextAttribute(literalstr("@SYS90469"))
    ]
    public TransDate parmLedgerFromDate(TransDate _ledgerFromDate = ledgerFromDate)
    {
        ledgerFromDate = _ledgerFromDate;
        return ledgerFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ledgerToDate.
    /// </summary>
    /// <param name="_ledgerToDate">
    /// The new value of the datacontract parameter ledgerToDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ledgerToDate
    /// </returns>
    [
        DataMemberAttribute('LedgerToDate'),
        SysOperationLabelAttribute(literalstr("@SYS80934")),
        SysOperationHelpTextAttribute(literalstr("@SYS90470"))
    ]
    public TransDate parmLedgerToDate(TransDate _ledgerToDate = ledgerToDate)
    {
        ledgerToDate = _ledgerToDate;
        return ledgerToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter level.
    /// </summary>
    /// <param name="_level">
    /// The new value of the datacontract parameter level; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter level
    /// </returns>
    [
        DataMemberAttribute('Level'),
        SysOperationLabelAttribute(literalstr("@SYS90474")),
        SysOperationHelpTextAttribute(literalstr("@SYS90477"))
    ]
    public Level parmLevel(Level _level = level)
    {
        level = _level;
        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter onAcc.
    /// </summary>
    /// <param name="_onAcc">
    /// The new value of the datacontract parameter onAcc; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter onAcc
    /// </returns>
    [
        DataMemberAttribute('OnAcc'),
        SysOperationLabelAttribute(literalstr("@SYS7659")),
        SysOperationHelpTextAttribute(literalstr("@SYS78371"))
    ]
    public boolean parmOnAcc(boolean _onAcc = onAcc)
    {
        onAcc = _onAcc;
        return onAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter projFromDate.
    /// </summary>
    /// <param name="_projFromDate">
    /// The new value of the datacontract parameter projFromDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter projFromDate
    /// </returns>
    [
        DataMemberAttribute('ProjFromDate'),
        SysOperationLabelAttribute(literalstr("@SYS24050")),
        SysOperationHelpTextAttribute(literalstr("@SYS90467"))
    ]
    public TransDate parmProjFromDate(TransDate _projFromDate = projFromDate)
    {
        projFromDate = _projFromDate;
        return projFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter projToDate.
    /// </summary>
    /// <param name="_projToDate">
    /// The new value of the datacontract parameter projToDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter projToDate
    /// </returns>
    [
        DataMemberAttribute('ProjToDate'),
        SysOperationLabelAttribute(literalstr("@SYS80934")),
        SysOperationHelpTextAttribute(literalstr("@SYS90468"))
    ]
    public TransDate parmProjToDate(TransDate _projToDate = projToDate)
    {
        projToDate = _projToDate;
        return projToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter revenue.
    /// </summary>
    /// <param name="_revenue">
    /// The new value of the datacontract parameter revenue; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter revenue
    /// </returns>
    [
        DataMemberAttribute('Revenue'),
        SysOperationLabelAttribute(literalstr("@SYS9154")),
        SysOperationHelpTextAttribute(literalstr("@SYS78818"))
    ]
    public boolean parmRevenue(boolean _revenue = revenue)
    {
        revenue = _revenue;
        return revenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter showAmount.
    /// </summary>
    /// <param name="_showAmount">
    /// The new value of the datacontract parameter showAmount; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter showAmount
    /// </returns>
    [
        DataMemberAttribute('ShowAmount'),
        SysOperationLabelAttribute(literalstr("@SYS91075")),
        SysOperationHelpTextAttribute(literalstr("@SYS91339"))
    ]
    public ProjShowAmount parmShowAmount(ProjShowAmount _showAmount = showAmount)
    {
        showAmount = _showAmount;
        return showAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipBlankId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter skipBlankId.
    /// </summary>
    /// <param name="_skipBlankId">
    /// The new value of the datacontract parameter skipBlankId; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter skipBlankId
    /// </returns>
    [
        DataMemberAttribute('SkipBlankId'),
        SysOperationLabelAttribute(literalstr("@SYS91206")),
        SysOperationHelpTextAttribute(literalstr("@SYS91208"))
    ]
    public boolean parmSkipBlankId(boolean _skipBlankId = skipBlankId)
    {
        skipBlankId = _skipBlankId;
        return skipBlankId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipZero</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter skipZero.
    /// </summary>
    /// <param name="_skipZero">
    /// The new value of the datacontract parameter skipZero; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter skipZero
    /// </returns>
    [
        DataMemberAttribute('SkipZero'),
        SysOperationLabelAttribute(literalstr("@SYS19052")),
        SysOperationHelpTextAttribute(literalstr("@SYS90472"))
    ]
    public boolean parmSkipZero(boolean _skipZero = skipZero)
    {
        skipZero = _skipZero;
        return skipZero;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStateProjType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter stateProjType.
    /// </summary>
    /// <param name="_stateProjType">
    /// The new value of the datacontract parameter stateProjType; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter stateProjType
    /// </returns>
    [
        DataMemberAttribute('StateProjType'),
        SysOperationLabelAttribute(literalstr("@SYS75799")),
        SysOperationHelpTextAttribute(literalstr("@SYS90476"))
    ]
    public ProjListStateProjType parmStateProjType(ProjListStateProjType _stateProjType = stateProjType)
    {
        stateProjType = _stateProjType;
        return stateProjType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter time.
    /// </summary>
    /// <param name="_time">
    /// The new value of the datacontract parameter time; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter time
    /// </returns>
    [
        DataMemberAttribute('Time'),
        SysOperationLabelAttribute(literalstr("@SYS8827")),
        SysOperationHelpTextAttribute(literalstr("@SYS78365"))
    ]
    public boolean parmTime(boolean _time = time)
    {
        time = _time;
        return time;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeMaterial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter timeMaterial.
    /// </summary>
    /// <param name="_timeMaterial">
    /// The new value of the datacontract parameter timeMaterial; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter timeMaterial
    /// </returns>
    [
        DataMemberAttribute('TimeMaterial'),
        SysOperationLabelAttribute(literalstr("@SYS53874")),
        SysOperationHelpTextAttribute(literalstr("@SYS78362"))
    ]
    public boolean parmTimeMaterial(boolean _timeMaterial = timeMaterial)
    {
        timeMaterial = _timeMaterial;
        return timeMaterial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeMaterialBillingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter timeMaterialBillingMethod.
    /// </summary>
    /// <param name="_timeMaterialBillingMethod">
    /// The new value of the datacontract parameter timeMaterialBillingMethod; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter timeMaterialBillingMethod
    /// </returns>
    [
        DataMemberAttribute('TimeMaterialBillingMethod'),
        SysOperationLabelAttribute(literalstr("@SYS53874")),
        SysOperationHelpTextAttribute(literalstr("@Proj:TimeMaterialBillingMethodHelp"))
    ]
    public boolean parmTimeMaterialBillingMethod(boolean _timeMaterialBillingMethod = timeMaterialBillingMethod)
    {
        timeMaterialBillingMethod = _timeMaterialBillingMethod;
        return timeMaterialBillingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true when the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        if (this.parmActualVsBudget() == ProjListColumnData::Budget && !this.parmForecastModelId())
        {
            isValid = checkFailed("@SYS87707");
        }

        if ((this.parmProjFromDate() > this.parmProjToDate() && this.parmProjToDate()) || (this.parmLedgerFromDate() > this.parmLedgerToDate() && this.parmLedgerToDate()))
        {
            // Invalid date interval
            isValid = checkFailed("@SYS91020");
        }

        if (!ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() &&
            !(this.parmFixedPrice() ||
              this.parmTimeMaterial() ||
              this.parmInternalCost() ||
              this.parmInvestment() ||
              this.parmTime()))
        {
            // Project type not selected
            isValid = checkFailed("@SYS91026");
        }

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()
            && !(this.parmTimeMaterialBillingMethod() ||
                this.parmFixedPriceBillingMethod()))
        {
            isValid = checkFailed("@Proj:BillingMethodIsEmptyError");
        }

        if (!(this.parmHour() || this.parmExpenses() || this.parmRevenue() || this.parmOnAcc() || this.parmItem()))
        {
            // Transaction type not selected
            isValid = checkFailed("@SYS91027");
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>