<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductDimGroupSetupCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EcoResProductDimGroupSetupCache
{
    #Define.ActiveKey('Active')
    #Define.ActiveAllGroupKey('ActiveAllGroup')
    #Define.PurchPriceKey('PurchPrice')
    #Define.SalesPriceKey('SalesPrice')
    #Define.AllPriceDiscKey('AllPriceDisc')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>active</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information about which dimensions are active.
    /// </summary>
    /// <param name="_productDimensionGroup">
    ///    The specified product dimension group for which information is to be retrieved.
    /// </param>
    /// <returns>
    ///    A <c>InventDimParm</c> table that contains the requested information.
    /// </returns>
    static public InventDimParm active(EcoResProductDimensionGroupRecId _productDimensionGroup)
    {
        container   key     = [#ActiveKey, _productDimensionGroup];

        return EcoResProductDimGroupSetupCache::getCachedInventDimParm(_productDimensionGroup, key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>classScope</Name>
				<Source><![CDATA[
        private static GlobalObjectCacheScope classScope()
    {
        return classStr(EcoResProductDimGroupSetupCache);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
        public static void clearCache()
    {
        if (xGlobal::hasClient())
        {
            EcoResProductDimGroupSetupCache::clearCacheClient();
        }
        EcoResProductDimGroupSetupCache::clearCacheServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheClient</Name>
				<Source><![CDATA[
        private static void clearCacheClient()
    {
        classfactory.globalObjectCache().clear(EcoResProductDimGroupSetupCache::classScope());
        InventDimGroupSetup::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheServer</Name>
				<Source><![CDATA[
        private static void clearCacheServer()
    {
        classfactory.globalObjectCache().clear(EcoResProductDimGroupSetupCache::classScope());
        InventDimGroupSetup::clearCache();
        SalesPurchLineInterface::flushPriceDiscCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>consistent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information about which dimensions are active and to be considered as consistent
    ///    dimensions.
    /// </summary>
    /// <param name="_productDimensionGroup">
    ///    The specified product dimension group for which information is to be retrieved.
    /// </param>
    /// <returns>
    ///    A <c>InventDimParm</c> table that contains the requested information.
    /// </returns>
    static public InventDimParm consistent(EcoResProductDimensionGroupRecId _productDimensionGroup)
    {
        return EcoResProductDimGroupSetupCache::active(_productDimensionGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static EcoResProductDimGroupSetupCache construct()
    {
        return new EcoResProductDimGroupSetupCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>coveragePlanByDimensionEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information about which dimensions are active and marked to be included when doing master
    ///    planning.
    /// </summary>
    /// <param name="_productDimensionGroup">
    ///    The specified product dimension group for which information is to be retrieved.
    /// </param>
    /// <returns>
    ///    A <c>InventDimParm</c> table that contains the requested information.
    /// </returns>
    static public InventDimParm coveragePlanByDimensionEnabled(EcoResProductDimensionGroupRecId _productDimensionGroup)
    {
        return EcoResProductDimGroupSetupCache::active(_productDimensionGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialInventoryEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information about which dimensions are active and marked as being part of financial
    ///    inventory.
    /// </summary>
    /// <param name="_productDimensionGroup">
    ///    The specified product dimension group for which information is to be retrieved.
    /// </param>
    /// <returns>
    ///    A <c>InventDimParm</c> table that contains the requested information.
    /// </returns>
    static public InventDimParm financialInventoryEnabled(EcoResProductDimensionGroupRecId _productDimensionGroup)
    {
        return EcoResProductDimGroupSetupCache::active(_productDimensionGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCachedInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets a cached record.
    /// </summary>
    /// <param name="_productDimensionGroup">
    ///    The product dimension group for which to get.
    /// </param>
    /// <param name="_key">
    ///    The key into the global cache.
    /// </param>
    /// <returns>
    ///    A record in the <c>InventDimParm</c> table.
    /// </returns>
    static protected InventDimParm getCachedInventDimParm(
        EcoResProductDimensionGroupRecId    _productDimensionGroup,
        container                           _key)
    {
        SysGlobalObjectCache    sysGlobalObjectCache    = classfactory.globalObjectCache();
        GlobalObjectCacheScope  classScope              = EcoResProductDimGroupSetupCache::classScope();
        container               packedRecordCache       = conNull();
        InventDimParm           inventDimParm;

        if (!_productDimensionGroup)
        {
            return inventDimParm;
        }

        while (packedRecordCache == conNull())
        {
            packedRecordCache = sysGlobalObjectCache.find(classScope , _key);
            if (!packedRecordCache || conLen(packedRecordCache) == 0)
            { // Not cached yet
                EcoResProductDimGroupSetupCache::initProductDimGroupCache(_productDimensionGroup);  // This will always initialize the cache.
                packedRecordCache = sysGlobalObjectCache.find(classScope , _key);                   // but the cache could be cleared by other processes, so finding an entry isn't guaranteed.
            }
        }

        [inventDimParm] = packedRecordCache;
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>InventDimGroupFieldSetup</c> class by using the specified
    ///    dimension setup record.
    /// </summary>
    /// <param name="_productDimensionGroup">
    ///    The ID of the product dimension group.
    /// </param>
    /// <param name="_dimensionFieldId">
    ///    The dimension field ID of the record to find.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventDimGroupFieldSetup</c> class.
    /// </returns>
    /// <remarks>
    ///    The instance of the <c>InventDimGroupFieldSetup</c> class that is returned is never null, but may
    ///    not have a dimension field ID.
    /// </remarks>
    static public InventDimGroupFieldSetup getFieldSetup(
        EcoResProductDimensionGroupRecId    _productDimensionGroup,
        FieldId                             _dimensionFieldId)
    {
        EcoResProductDimensionGroupFldSetup ecoResProductDimensionGroupFldSetup;

        if (!_productDimensionGroup || !_dimensionFieldId)
        {
            ecoResProductDimensionGroupFldSetup.DimensionFieldId = _dimensionFieldId;
            return InventDimGroupFieldSetup::newEcoResProductDimensionGroupFldSetup(ecoResProductDimensionGroupFldSetup);
        }

        ecoResProductDimensionGroupFldSetup = EcoResProductDimensionGroupFldSetup::findByDimensionGroupFieldId(_productDimensionGroup, _dimensionFieldId);
        ecoResProductDimensionGroupFldSetup.DimensionFieldId = _dimensionFieldId; // Ensure that dimension field is still specified even if not found
        return InventDimGroupFieldSetup::newEcoResProductDimensionGroupFldSetup(ecoResProductDimensionGroupFldSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmInitAllActiveDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets information about which dimensions are active.
    /// </summary>
    /// <returns>
    ///     A <c>InventDimParm</c> table with the fields set to the <c>NoYes::Yes</c> enumeration value for
    ///    the active dimension.
    /// </returns>
    /// <remarks>
    ///    Information is gathered from all product dimensions in the system. If a dimension is active in one
    ///    product dimension group it will be returned as active dimension.
    /// </remarks>
    static protected InventDimParm initInventDimParmInitAllActiveDim()
    {
        EcoResProductDimensionGroup             ecoResProductDimensionGroup;
        InventDimParm                           inventDimParmInitAllActiveDim;

        while select RecId from ecoResProductDimensionGroup
        {
            InventDimGroupFieldSetupEnumerator enumerator = EcoResProductDimGroupSetup::newDimensionGroup(ecoResProductDimensionGroup.RecId).getFieldSetupEnumerator();
            while (enumerator.moveNext())
            {
                InventDimGroupFieldSetup inventDimGroupFieldSetup = enumerator.current();

                if (inventDimGroupFieldSetup.isActive())
                {
                    FieldId inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();
                    FieldId dimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);
                    inventDimParmInitAllActiveDim.(dimParmFieldId) = NoYes::Yes;
                }
            }
        }

        return inventDimParmInitAllActiveDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmInitAllPriceDiscDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets information about which dimensions are marked as part of purchase or sales order price search.
    /// </summary>
    /// <returns>
    ///    A <c>InventDimParm</c> table with the fields set to the <c>NoYes::Yes</c> enumeration value for
    ///    dimensions with price search enabled.
    /// </returns>
    /// <remarks>
    ///    Information is gathered from all product dimensions in the system. If a dimension is active in one
    ///    product dimension group it will be returned as active dimension.
    /// </remarks>
    static protected InventDimParm initInventDimParmInitAllPriceDiscDim()
    {
        EcoResProductDimensionGroup             ecoResProductDimensionGroup;
        InventDimParm                           inventDimParmInitAllPriceDiscDim;

        while select RecId from ecoResProductDimensionGroup
        {
            InventDimGroupFieldSetupEnumerator enumerator = EcoResProductDimGroupSetup::newDimensionGroup(ecoResProductDimensionGroup.RecId).getFieldSetupEnumerator();
            while (enumerator.moveNext())
            {
                InventDimGroupFieldSetup inventDimGroupFieldSetup = enumerator.current();

                if (inventDimGroupFieldSetup.isActive() && (inventDimGroupFieldSetup.isSalesPriceSearchEnabled() || inventDimGroupFieldSetup.isPurchPriceSearchEnabled()))
                {
                    FieldId inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();
                    FieldId dimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);
                    inventDimParmInitAllPriceDiscDim.(dimParmFieldId) = NoYes::Yes;
                }
            }
        }

        return inventDimParmInitAllPriceDiscDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductDimGroupCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal cache.
    /// </summary>
    /// <param name="_productDimensionGroup">
    ///    The product dimension group for which cache is to be initialized.
    /// </param>
    static protected void initProductDimGroupCache(EcoResProductDimensionGroupRecId _productDimensionGroup)
    {
        SysGlobalObjectCache    sysGlobalObjectCache    = classfactory.globalObjectCache();
        GlobalObjectCacheScope  classScope              = EcoResProductDimGroupSetupCache::classScope();
        container               activeKey               = [#ActiveKey, _productDimensionGroup];
        container               purchPriceKey           = [#PurchPriceKey, _productDimensionGroup];
        container               salesPriceKey           = [#SalesPriceKey, _productDimensionGroup];

        InventDimParm   isActive;
        InventDimParm   purchPriceSearchEnabled;
        InventDimParm   salesPriceSearchEnabled;

        if (! _productDimensionGroup)
        {
            return;
        }

        purchPriceSearchEnabled.clear();
        salesPriceSearchEnabled.clear();
        isActive.clear();
        isActive.ItemIdFlag = NoYes::Yes;

        InventDimGroupFieldSetupEnumerator enumerator = EcoResProductDimGroupSetup::newDimensionGroup(_productDimensionGroup).getFieldSetupEnumerator();
        while (enumerator.moveNext())
        {
            InventDimGroupFieldSetup inventDimGroupFieldSetup = enumerator.current();

            if (inventDimGroupFieldSetup.isActive())
            {
                FieldId inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();
                FieldId dimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);

                isActive.(dimParmFieldId) = NoYes::Yes;

                if (inventDimGroupFieldSetup.isPurchPriceSearchEnabled())
                {
                    purchPriceSearchEnabled.(dimParmFieldId) = NoYes::Yes;
                }

                if (inventDimGroupFieldSetup.isSalesPriceSearchEnabled())
                {
                    salesPriceSearchEnabled.(dimParmFieldId) = NoYes::Yes;
                }
            }
        }

        sysGlobalObjectCache.insert(classScope, activeKey, [isActive]);
        sysGlobalObjectCache.insert(classScope, purchPriceKey, [purchPriceSearchEnabled]);
        sysGlobalObjectCache.insert(classScope, salesPriceKey, [salesPriceSearchEnabled]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmInitAllActiveDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets information about which dimensions are active.
    /// </summary>
    /// <param name="_inventDimParmInitAllActiveDim">
    ///    The <c>InventDimParm</c> table with the fields set to the <c>NoYes::Yes</c> enumeration value for
    ///    an active product dimension.
    /// </param>
    /// <remarks>
    ///    Information is gathered from all product dimensions in the system. If a dimension is active in one
    ///    product dimension group it will be returned as active dimension.
    /// </remarks>
    static public void inventDimParmInitAllActiveDim(InventDimParm _inventDimParmInitAllActiveDim)
    {
        SysGlobalObjectCache    sysGlobalObjectCache    = classfactory.globalObjectCache();
        GlobalObjectCacheScope  classScope              = EcoResProductDimGroupSetupCache::classScope();
        container               key                     = [#ActiveAllGroupKey];
        InventDimParm           recordCache;
        ListEnumerator          dimFieldList = EcoResProductDimGroupSetup::dimFields().getEnumerator();

        container packedRecordCache = sysGlobalObjectCache.find(classScope , key);
        if (!packedRecordCache || conLen(packedRecordCache) == 0)
        {
            recordCache = EcoResProductDimGroupSetupCache::initInventDimParmInitAllActiveDim();
            sysGlobalObjectCache.insert(classScope, key, [recordCache]);
        }
        else
        {
            [recordCache] = packedRecordCache;
        }

        while (dimFieldList.moveNext())
        {
            FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldList.current());
            if (recordCache.(dimParmFieldId))
            {
                _inventDimParmInitAllActiveDim.(dimParmFieldId) = recordCache.(dimParmFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmInitAllPriceDiscDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets information about which dimensions are marked as part of purchase or sales order price search.
    /// </summary>
    /// <param name="_inventDimParmInitAllPriceDiscDim">
    ///    The <c>InventDimParm</c> table with the fields set to <c>NoYes::Yes</c> enumeration value for
    ///    dimensions which are part of price searches.
    /// </param>
    /// <remarks>
    ///    Information is gathered from all product dimensions in the system. If a dimension is active in one
    ///    product dimension group it will be returned as active dimension.
    /// </remarks>
    static public void inventDimParmInitAllPriceDiscDim(InventDimParm _inventDimParmInitAllPriceDiscDim)
    {
        SysGlobalObjectCache    sysGlobalObjectCache    = classfactory.globalObjectCache();
        GlobalObjectCacheScope  classScope              = EcoResProductDimGroupSetupCache::classScope();
        container               key                     = [#AllPriceDiscKey];
        InventDimParm           recordCache;
        ListEnumerator          dimFieldList = EcoResProductDimGroupSetup::dimFields().getEnumerator();

        container packedRecordCache = sysGlobalObjectCache.find(classScope , key);
        if (!packedRecordCache || conLen(packedRecordCache) == 0)
        {
            recordCache = EcoResProductDimGroupSetupCache::initInventDimParmInitAllPriceDiscDim();
            sysGlobalObjectCache.insert(classScope, key, [recordCache]);
        }
        else
        {
            [recordCache] = packedRecordCache;
        }

        while (dimFieldList.moveNext())
        {
            FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldList.current());
            if (recordCache.(dimParmFieldId))
            {
                _inventDimParmInitAllPriceDiscDim.(dimParmFieldId) = recordCache.(dimParmFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mandatory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information about which dimensions are active and marked as mandatory.
    /// </summary>
    /// <param name="_productDimensionGroup">
    ///    The specified product dimension group for which information is to be retrieved.
    /// </param>
    /// <returns>
    ///    A <c>InventDimParm</c> table that contains the requested information.
    /// </returns>
    static public InventDimParm mandatory(EcoResProductDimensionGroupRecId _productDimensionGroup)
    {
        return EcoResProductDimGroupSetupCache::active(_productDimensionGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalInventoryEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information about which dimensions are active and marked as part of physical inventory.
    /// </summary>
    /// <param name="_productDimensionGroup">
    ///    The specified product dimension group for which information is to be retrieved.
    /// </param>
    /// <returns>
    ///    A <c>InventDimParm</c> table that contains the requested information.
    /// </returns>
    static public InventDimParm physicalInventoryEnabled(EcoResProductDimensionGroupRecId _productDimensionGroup)
    {
        return EcoResProductDimGroupSetupCache::active(_productDimensionGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryStockingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information about which dimensions are active and marked as primary stocking dimensions.
    /// </summary>
    /// <param name="_productDimensionGroup">
    ///    The specified product dimension group for which information is to be retrieved.
    /// </param>
    /// <returns>
    ///    A <c>InventDimParm</c> table that contains the requested information.
    /// </returns>
    static public InventDimParm primaryStockingEnabled(EcoResProductDimensionGroupRecId _productDimensionGroup)
    {
        return EcoResProductDimGroupSetupCache::active(_productDimensionGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchPriceSearchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information about which dimensions are active and marked to be included when searching
    ///    for purchase price.
    /// </summary>
    /// <param name="_productDimensionGroup">
    ///    The specified product dimension group for which information is to be retrieved.
    /// </param>
    /// <returns>
    ///    A <c>InventDimParm</c> table that contains the requested information.
    /// </returns>
    static public InventDimParm purchPriceSearchEnabled(EcoResProductDimensionGroupRecId _productDimensionGroup)
    {
        container   key     = [#PurchPriceKey, _productDimensionGroup];

        return EcoResProductDimGroupSetupCache::getCachedInventDimParm(_productDimensionGroup, key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPriceSearchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information about which dimensions are active and marked to be included when searching
    ///    for sales price.
    /// </summary>
    /// <param name="_productDimensionGroup">
    ///    The specified product dimension group for which information is to be retrieved.
    /// </param>
    /// <returns>
    ///    A <c>InventDimParm</c> table that contains the requested information.
    /// </returns>
    static public InventDimParm salesPriceSearchEnabled(EcoResProductDimensionGroupRecId _productDimensionGroup)
    {
        container   key     = [#SalesPriceKey, _productDimensionGroup];

        return EcoResProductDimGroupSetupCache::getCachedInventDimParm(_productDimensionGroup, key);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
