<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocumentManager_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsbile for actual creation / removal of export document in physical table.
/// </summary>
public class TaxIntgrExportDocumentManager_CN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createExportDocumentFromMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create export documents and operations from tmp tables given
    /// </summary>
    /// <param name="_sourceRecIds">
    /// rec Ids of document sources
    /// </param>
    /// <param name="_exportDocMap">
    /// The map with all the export document.
    /// </param>
    /// <param name="_operationType">
    /// The operation type.
    /// </param>
    /// <param name="_exportDocumentLineInsertList">
    /// The line insert list.
    /// </param>
    /// <param name="_operationInsertList">
    /// The operation insert list.
    /// </param>
    /// <returns>
    /// list of rec id of the export documents created.
    /// </returns>
    public static List createExportDocumentFromMap(
        List                                    _sourceRecIds,
        Map                                     _exportDocMap,
        TaxIntgrExportDocumentOperationType_CN  _operationType,
        RecordInsertList                        _exportDocumentLineInsertList = null,
        RecordInsertList                        _operationInsertList = null,
        boolean                                 _isGenerateFromOriginalDoc = false)
    {
        List                recIdCreatedExportDocs = new List(Types::Int64);
        RecordInsertList    exportDocumentLineInsertList;
        RecordInsertList    operationInsertList;

        int                             numofSources = _sourceRecIds.elements();
        ListEnumerator                  sourceEnumerator = _sourceRecIds.getEnumerator();
        TaxIntgrExportDocumentSource_CN docSource;
        RefRecId                        sourceRecId;
        int                             i = 0;
        NumberSequenceReference         numberSequenceReference;

        TaxIntgrExportDocTmp_CN     tmpDocLocal;
        TaxIntgrExportDocLineTmp_CN tmpDocLineLocal;
        MapEnumerator               docMapEnum;
        MapEnumerator               lineMapEnum;
        Map                         lineMap;

        TaxIntgrExportDocument_CN           exportDoc;
        TaxIntgrExportDocument_CN           originalDoc;
        Map                                 exportDocSourceCache = new Map(Types::Int64, Types::Record);
        Map                                 originalDocCache = new Map(Types::Int64, Types::Record);
        TaxIntgrExportDocumentLine_CN       exportDocLine;
        TaxIntgrExportDocumentOperation_CN  operation;
        #avifiles

        SysOperationProgress                progressLocal;

        //use external record insert list to reduce serevr trip
        exportDocumentLineInsertList = _exportDocumentLineInsertList;
        if (exportDocumentLineInsertList == null)
        {
            exportDocumentLineInsertList = new RecordInsertList(tableNum(TaxIntgrExportDocumentLine_CN));
        }

        operationInsertList = _operationInsertList;
        if (operationInsertList == null)
        {
            operationInsertList = new RecordInsertList(tableNum(TaxIntgrExportDocumentOperation_CN));
        }

        progressLocal = SysOperationProgress::newGeneral(#AviFormLetter, "@SYS21847", _exportDocMap.elements());
        ttsbegin;

        numberSequenceReference = TaxIntgrUtility_CN::numRefTaxIntgExportDocumentId();

        docMapEnum = _exportDocMap.getEnumerator();
        while (docMapEnum.moveNext())
        {
            tmpDocLocal = docMapEnum.currentKey();

            sourceEnumerator.reset();
            sourceEnumerator.moveNext();
            sourceRecId = sourceEnumerator.current();

            // create export document
            if (_isGenerateFromOriginalDoc)
            {
                if (originalDocCache.exists(sourceRecId))
                {
                    originalDoc = originalDocCache.lookup(sourceRecId);
                }
                else
                {
                    select firstOnly originalDoc
                        exists join operation
                            where originalDoc.RecId == operation.TaxIntgrExportDocument_CN
                                && operation.TaxIntgrExportDocumentSource_CN == sourceRecId;

                    originalDocCache.insert(sourceRecId, originalDoc);
                }

                exportDoc = TaxIntgrExportDocumentManager_CN::newExportDocumentFromDocument(
                    originalDoc,
                    tmpDocLocal.TransactionCurrencyAmount,
                    numberSequenceReference);
            }
            else
            {
                if (exportDocSourceCache.exists(sourceRecId))
                {
                    docSource.data(exportDocSourceCache.lookup(sourceRecId));
                }
                else
                {
                    docSource = TaxIntgrExportDocumentSource_CN::find(sourceRecId);
                    exportDocSourceCache.insert(sourceRecId, docSource);
                }

                exportDoc = TaxIntgrExportDocumentManager_CN::newExportDocumentFromSource(
                    docSource,
                    tmpDocLocal.TransactionCurrencyAmount,
                    numberSequenceReference);
            }

            exportDoc.MiscChargesNetAmount = tmpDocLocal.MiscChargesNetAmount;
            exportDoc.MiscChargesTaxAmount = tmpDocLocal.MiscChargesTaxAmount;
            exportDoc.insert();

            recIdCreatedExportDocs.addEnd(exportDoc.RecId);

            for (i = 0; i < numofSources; i++)
            {
                // create operation type
                operation.clear();
                operation.TaxIntgrExportDocumentSource_CN = sourceEnumerator.current();
                operation.TaxIntgrExportDocument_CN = exportDoc.RecId;
                operation.OperationType = _operationType;
                operation.OperatedBy = curUserId();
                operation.OperationDateTime = DateTimeUtil::getSystemDateTime();
                operationInsertList.add(operation);
                sourceEnumerator.moveNext();
            }

            lineMap = docMapEnum.currentValue();
            lineMapEnum = lineMap.getEnumerator();
            while (lineMapEnum.moveNext())
            {
                //create line
                tmpDocLineLocal = lineMapEnum.currentValue();
                exportDocLine.clear();
                exportDocLine.TaxIntgrExportDocument_CN = exportDoc.RecId;
                exportDocLine.TaxIntgrExportDocumentSourceLine_CN =
                    tmpDocLineLocal.TaxIntgrExportDocumentSourceLine_CN;
                exportDocLine.TransactionCurrencyNetAmount =
                    tmpDocLineLocal.TransactionCurrencyNetAmount;
                exportDocLine.TransactionCurrencyTaxAmount =
                    tmpDocLineLocal.TransactionCurrencyTaxAmount;
                exportDocLine.Qty = tmpDocLineLocal.Qty;
                exportDocLine.TransactionCurrencyMiscChargesNetAmount =
                    tmpDocLineLocal.TransactionCurrencyMiscChargesNetAmount;
                exportDocLine.TransactionCurrencyMiscChargesTaxAmount =
                    tmpDocLineLocal.TransactionCurrencyMiscChargesTaxAmount;

                exportDocumentLineInsertList.add(exportDocLine);
            }

            progressLocal.incCount();
        }

        exportDocumentLineInsertList.insertDatabase();
        operationInsertList.insertDatabase();

        ttsCommit;

        if (progressLocal)
        {
            progressLocal.reset();
        }

        return recIdCreatedExportDocs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewExportDocumentIdForRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets new export document ID from number sequence reference.
    /// </summary>
    /// <param name = "_numberSequenceReference">
    /// The number sequence reference.
    /// </param>
    /// <returns>
    /// new export document ID
    /// </returns>
    public static TaxIntgrExportDocumentId_CN getNewExportDocumentIdForRef(NumberSequenceReference _numberSequenceReference)
    {
        return NumberSeq::newGetNum(_numberSequenceReference, !TaxIntgrExportDocumentMultiTaxFeature::isEnabled()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newExportDocumentFromSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new record of export document.
    /// </summary>
    /// <param name="_docSource">
    /// The export document source.
    /// </param>
    /// <param name="_documentAmount">
    /// The document amount.
    /// </param>
    /// <returns>
    /// The export document record.
    /// </returns>
    public static TaxIntgrExportDocument_CN newExportDocumentFromSource(
        TaxIntgrExportDocumentSource_CN _docSource,
        AmountCur   _documentAmount,
        NumberSequenceReference _numberSequenceReference)
    {
        TaxIntgrExportDocument_CN exportDoc;

        exportDoc.initFromDocumentSource(_docSource);
        exportDoc.Id = TaxIntgrExportDocumentManager_CN::getNewExportDocumentIdForRef(_numberSequenceReference);
        exportDoc.IsExported = false;
        exportDoc.TransactionCurrencyAmount = _documentAmount;
        exportDoc.IsOverAmountLimit = TaxIntgrUtility_CN::isOverAmountLimit(exportDoc.TaxCode, exportDoc.TransactionCurrencyAmount);

        return exportDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newExportDocumentFromDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new record of export document.
    /// </summary>
    /// <param name = "_splitDocument">
    /// The split export document.
    /// </param>
    /// <param name = "_documentAmount">
    /// The document amount.
    /// </param>
    /// <returns>
    /// The export document record.
    /// </returns>
    public static TaxIntgrExportDocument_CN newExportDocumentFromDocument(
        TaxIntgrExportDocument_CN _splitDocument,
        AmountCur   _documentAmount,
        NumberSequenceReference _numberSequenceReference)
    {
        TaxIntgrExportDocument_CN exportDoc;

        exportDoc.initFromExportDocument(_splitDocument);
        exportDoc.Id = TaxIntgrExportDocumentManager_CN::getNewExportDocumentIdForRef(_numberSequenceReference);
        exportDoc.IsExported = false;
        exportDoc.TransactionCurrencyAmount = _documentAmount;
        exportDoc.IsOverAmountLimit = TaxIntgrUtility_CN::isOverAmountLimit(exportDoc.TaxCode, exportDoc.TransactionCurrencyAmount);

        return exportDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateExportDocumentHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates export document history.
    /// </summary>
    /// <param name="_setOfImpactedDocument">
    /// Set of impacted document.
    /// </param>
    /// <param name="_operationType">
    /// The operation type.
    /// </param>
    /// <returns>
    /// The history record id.
    /// </returns>
    public static RefRecId populateExportDocumentHistory(
        Set _setOfImpactedDocument,
        TaxIntgrExportDocumentOperationType_CN _operationType)
    {
        TaxIntgrExportDocOperationHistory_CN        history;
        TaxIntgrExportDocOperationHistoryLine_CN    historyLine;
        RecordInsertList                            historyLineInsertList;
        SetEnumerator                               setEnumerator;
        RefRecId                                    historyRecId;

        //populate history, which is critical for the set based operation
        if (_setOfImpactedDocument.elements())
        {
            history.clear();
            history.OperationType = _operationType;
            history.insert();
            historyRecId = history.RecId;

            historyLineInsertList = new RecordInsertList(historyLine.TableId);
            setEnumerator = _setOfImpactedDocument.getEnumerator();
            int position = 0;
            str exportDateTimeLocal = DateTimeUtil::toStr(DateTimeUtil::getSystemDateTime());
            while (setEnumerator.moveNext())
            {
                position++;
                historyLine.clear();
                historyLine.TaxIntgrExportDocOperationHistory_CN = history.RecId;
                historyLine.ExportDocumentId = setEnumerator.current();
                historyLine.Position = position;
                historyLine.BatchName = "@SYS14204" + exportDateTimeLocal;
                historyLineInsertList.add(historyLine);
            }
            historyLineInsertList.insertDatabase();
        }

        return historyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExportDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all export documents related to the history.
    /// </summary>
    /// <param name="_operationHistoryRecId">
    /// The history record id.
    /// </param>
    public static void removeExportDocument(RefRecId _operationHistoryRecId)
    {
        TaxIntgrExportDocument_CN                   taxIntgrExportDocument_CN;
        TaxIntgrExportDocumentOperation_CN          taxIntgrExportDocumentOperation_CN;
        TaxIntgrExportDocumentLine_CN               taxIntgrExportDocumentLine_CN;
        TaxIntgrExportDocOperationHistoryLine_CN    historyLine;

        ttsBegin;

        delete_from taxIntgrExportDocumentLine_CN
            exists join taxIntgrExportDocument_CN
                where   taxIntgrExportDocumentLine_CN.TaxIntgrExportDocument_CN == taxIntgrExportDocument_CN.RecId
            exists join historyLine
                where   historyLine.TaxIntgrExportDocOperationHistory_CN == _operationHistoryRecId
                    &&  historyLine.ExportDocumentId == taxIntgrExportDocument_CN.Id;

        delete_from taxIntgrExportDocumentOperation_CN
            exists join taxIntgrExportDocument_CN
                where   taxIntgrExportDocumentOperation_CN.TaxIntgrExportDocument_CN == taxIntgrExportDocument_CN.RecId
            exists join historyLine
                where   historyLine.TaxIntgrExportDocOperationHistory_CN == _operationHistoryRecId
                    &&  historyLine.ExportDocumentId == taxIntgrExportDocument_CN.Id;

        delete_from taxIntgrExportDocument_CN
            exists join historyLine
                where   historyLine.TaxIntgrExportDocOperationHistory_CN == _operationHistoryRecId
                    &&  historyLine.ExportDocumentId == taxIntgrExportDocument_CN.Id;

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>