<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountTransClearedDateUpgrade</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class BankAccountTransClearedDateUpgrade extends SysOperationServiceController
{
    private const int BundleSize = 10000;
    private static const ClassId BankAccountTransClearedDateUpgradeClassId = classNum(BankAccountTransClearedDateUpgrade);

    private RefRecId workItemRecId;
    private boolean isChildBatchTask;

    #define.CurrentVersion(1)

    #LocalMacro.CurrentList
        workItemRecId,
        isChildBatchTask
    #EndMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBatchJob</Name>
				<Source><![CDATA[
    internal static void createBatchJob()
    {
        const str BatchJobName = "@CashManagement:BankAccountTransDataUpgrade";
        const SysRecurrenceUnit RecurrenceUnit = SysRecurrenceUnit::Hour;
        const int RecurrenceInUnits = 3;
        const int RecurrenceExecutions = 7;

        if (!BankAccountTransClearedDateUpgrade::doesBatchJobExist())
        {
            SysRecurrenceData recurrenceData = SysRecurrence::defaultRecurrence();

            recurrenceData = SysRecurrence::setRecurrenceStartDateTime(recurrenceData, DateTimeUtil::utcNow());

            recurrenceData = SysRecurrence::setRecurrenceEndAfter(recurrenceData, RecurrenceExecutions);

            recurrenceData = SysRecurrence::setRecurrenceUnit(recurrenceData, RecurrenceUnit, RecurrenceInUnits);

            BankAccountTransClearedDateUpgrade processingController =
            new BankAccountTransClearedDateUpgrade(
                classStr(BankAccountTransClearedDateUpgrade),
                methodStr(BankAccountTransClearedDateUpgrade, run),
                SysOperationExecutionMode::ScheduledBatch);

            BatchInfo batchInfo = processingController.batchInfo();
            batchInfo.parmCaption(BatchJobName);
            batchInfo.parmRecurrenceData(recurrenceData);

            processingController.doBatch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {
        if (!this.allowUpgrade())
        {
            this.endRecurrence();
            return;
        }

        if (this.isChildBatchTask)
        {
            this.processBatchTask();
        }
        else
        {
            if (BankAccountTransClearedDateUpgrade::isComplete())
            {
                return;
            }

            if (!BankAccountTransClearedDateUpgrade::haveWorkItemsBeenCreated())
            {
                this.createWorkItems();
            }

            if (!BankAccountTransClearedDateUpgrade::haveBatchTasksBeenScheduled())
            {
                this.scheduleBatchTasks();
            }
            else
            {
                this.rescheduleBatchTasks();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkItems</Name>
				<Source><![CDATA[
    private void createWorkItems()
    {
        date minDate = this.calculateMinDate();

        BankAccountTransClearedDateTmp bankAccountTransTmp;

        int transactionCount;
        RefRecId currentTransRecId;
        RefRecId minTransRecId;
        RefRecId maxTransRecId;
        CompanyBankAccountId currentBankAccountId;

        ttsbegin;

        DataArea dataArea;
        while select id from dataArea
            where !dataArea.isVirtual
        {
            changecompany(dataArea.Id)
            {
                delete_from bankAccountTransTmp;
                this.populateBankAccountTransTable(bankAccountTransTmp, minDate);

                transactionCount = 0;
                currentTransRecId = 0;
                minTransRecId = 0;
                maxTransRecId = 0;

                select firstonly AccountId from bankAccountTransTmp
                    order by AccountId, BankAccountTransRefRecId;
                currentBankAccountId = bankAccountTransTmp.AccountId;

                while select bankAccountTransTmp
                    order by AccountId, BankAccountTransRefRecId
                {
                    currentTransRecId = bankAccountTransTmp.BankAccountTransRefRecId;

                    if (transactionCount == 0)
                    {
                        maxTransRecId = 0;
                        minTransRecId = currentTransRecId;
                    }
                    
                    transactionCount++;

                    if (transactionCount == BundleSize
                        || bankAccountTransTmp.AccountId != currentBankAccountId)
                    {
                        maxTransRecId = currentTransRecId;
                        this.createWorkItem(minTransRecId, maxTransRecId, currentBankAccountId);
                        transactionCount = 0;
                        currentBankAccountId = bankAccountTransTmp.AccountId;
                    }
                }

                if (minTransRecId > 0 && maxTransRecId == 0)
                {
                    maxTransRecId = currentTransRecId;
                    this.createWorkItem(minTransRecId, maxTransRecId, currentBankAccountId);
                }
            }
        }

        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkItem</Name>
				<Source><![CDATA[
    private void createWorkItem(
        RefRecId _minTransRecId,
        RefRecId _maxTransRecId,
        CompanyBankAccountId _bankAccountId)
    {
        BankAccountTransClearedDateUpgradeWorkItem workItem;

        workItem.Company = curExt();
        workItem.BankAccountTransFromRecId = _minTransRecId;
        workItem.BankAccountTransToRecId = _maxTransRecId;
        workItem.AccountId = _bankAccountId;
        workItem.insert();

        this.createStatus(workItem.RecId, BankAccountTransClearedDateWorkItemStatus::Created);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleBatchTasks</Name>
				<Source><![CDATA[
    private void scheduleBatchTasks()
    {
        BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        SysDictClass sysDictClass = new SysDictClass(classIdGet(this));

        ttsbegin;

        BankAccountTransClearedDateUpgradeWorkItem workItem;
        while select workItem
        {
            this.scheduleBatchTask(batchHeader, sysDictClass, workItem);
        }

        batchHeader.save();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleBatchTask</Name>
				<Source><![CDATA[
    private void scheduleBatchTask(
        BatchHeader _batchHeader,
        SysDictClass _sysDictClass,
        BankAccountTransClearedDateUpgradeWorkItem _workItem)
    {
        BankAccountTransClearedDateUpgrade childBatchTask = _sysDictClass.makeObject();
        childBatchTask.unpack(this.pack());

        childBatchTask.parmWorkItemRecId(_workItem.RecId);
        childBatchTask.parmIsChildBatchTask(true);
        childBatchTask.batchInfo().parmCaption(strFmt(
                "@CashManagement:BankAccountTransClearedDateUpgradeBatchTaskCaption",
                _workItem.AccountId,
                _workItem.BankAccountTransFromRecId,
                _workItem.BankAccountTransToRecId));

        _batchHeader.addRuntimeTask(childBatchTask, this.parmCurrentBatch().RecId);

        this.createStatus(_workItem.RecId, BankAccountTransClearedDateWorkItemStatus::Scheduled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBatchTask</Name>
				<Source><![CDATA[
    private void processBatchTask()
    {
        #OCCRetryCount

        int BackOffWait = RandomGenerate::construct().randomInt(50, 1000);

        try
        {
            ttsbegin;
            this.executeBatchTask();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                this.logWorkItemStatus(this.workItemRecId, BankAccountTransClearedDateWorkItemStatus::Error);
                throw Exception::Deadlock;
            }
            else
            {
                sleep(xSession::currentRetryCount() * BackOffWait);
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.logWorkItemStatus(this.workItemRecId, BankAccountTransClearedDateWorkItemStatus::Error);
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    sleep(xSession::currentRetryCount() * BackOffWait);
                    retry;
                }
            }
            else
            {
                this.logWorkItemStatus(this.workItemRecId, BankAccountTransClearedDateWorkItemStatus::Error);
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.logWorkItemStatus(this.workItemRecId, BankAccountTransClearedDateWorkItemStatus::Error);
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    sleep(xSession::currentRetryCount() * BackOffWait);
                    retry;
                }
            }
            else
            {
                this.logWorkItemStatus(this.workItemRecId, BankAccountTransClearedDateWorkItemStatus::Error);
                throw Exception::DuplicateKeyException;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeBatchTask</Name>
				<Source><![CDATA[
    private void executeBatchTask()
    {
        this.logWorkItemStatus(this.workItemRecId, BankAccountTransClearedDateWorkItemStatus::Processing);

        BankAccountTransClearedDateUpgradeWorkItem workItem;
        select firstonly workItem where workItem.RecId == this.workItemRecId;

        if (workItem)
        {
            changecompany(workItem.Company)
            {
                BankAccountTransClearedDateTmp bankAccountTransTmp;

                this.populateBankAccountTransFilterTable(
                    bankAccountTransTmp,
                    this.calculateMinDate(),
                    workItem.AccountId,
                    workItem.BankAccountTransFromRecId,
                    workItem.BankAccountTransToRecId);

                this.updateBankAccountTransClearedDate(bankAccountTransTmp);
                this.createStatus(workItem.RecId, BankAccountTransClearedDateWorkItemStatus::Completed);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rescheduleBatchTasks</Name>
				<Source><![CDATA[
    private void rescheduleBatchTasks()
    {
        BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        SysDictClass sysDictClass = new SysDictClass(classIdGet(this));

        ttsbegin;

        BankAccountTransClearedDateUpgradeWorkItem workItem;
        while select workItem
        {
            BankAccountTransClearedDateWorkItemStatus status = this.findLastWorkItemStatusExist(workItem.RecId);

            switch (status)
            {
                case BankAccountTransClearedDateWorkItemStatus::Completed:
                case BankAccountTransClearedDateWorkItemStatus::Processing:
                    continue;

                case BankAccountTransClearedDateWorkItemStatus::Error:
                    this.scheduleBatchTask(batchHeader, sysDictClass, workItem);
                    break;

                default:
                    break;
            }
        }

        batchHeader.save();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endRecurrence</Name>
				<Source><![CDATA[
    private void endRecurrence()
    {
        BatchJob batchJob;

        ttsbegin;
        select firstonly forupdate batchJob
        where batchJob.RecId == currentBatch.BatchJobId;

        if (batchJob
            && batchJob.RecurrenceData
            && SysRecurrence::nextTime(batchJob.RecurrenceData) != 0)
        {
            batchJob.RecurrenceData = SysRecurrence::setRecurrenceEndAfter(batchJob.RecurrenceData, 1);
            batchJob.update();
        }
        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBankAccountTransTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void populateBankAccountTransTable(BankAccountTransClearedDateTmp _bankAccountTransTmp, date _minDate)
    {
        DataAreaId currentCompany = curExt();
        BankAccountTrans bankAccountTransLocal;

        insert_recordset _bankAccountTransTmp (RefDataAreaId, AccountId, BankAccountTransRefRecId)
            select currentCompany, AccountId, RecId
                from bankAccountTransLocal
                    where bankAccountTransLocal.TransDate >= _minDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBankAccountTransFilterTable</Name>
				<Source><![CDATA[
    protected void populateBankAccountTransFilterTable(
        BankAccountTransClearedDateTmp _bankAccountTransTmp,
        date _minDate,
        CompanyBankAccountId _accountId,
        RefRecId _minBankAccountTransRecId,
        RefRecId _maxBankAccountTransRecid)
    {
        DataAreaId currentCompany = curExt();

        BankAccountTrans bankAccountTransLocal;

        BankAccountTransClearedDateTmp bankAccountTransSet;
        insert_recordset bankAccountTransSet (RefDataAreaId, BankAccountTransRefRecId)
            select currentCompany, RecId
                from bankAccountTransLocal
                    where bankAccountTransLocal.TransDate >= _minDate
                        && bankAccountTransLocal.AccountId == _accountId
                        && bankAccountTransLocal.RecId >= _minBankAccountTransRecId
                        && bankAccountTransLocal.RecId <= _maxBankAccountTransRecid;

        BankAccountTrans bankAccountTransIncluded;
        insert_recordset _bankAccountTransTmp(RefDataAreaId, BankAccountTransRefRecId, ClearedDate)
            select currentCompany, RecId, AccountStatementDate
                from bankAccountTransIncluded
                exists join bankAccountTransSet
                    where bankAccountTransIncluded.RecId == bankAccountTransSet.BankAccountTransRefRecId
                        && bankAccountTransIncluded.Included == NoYes::Yes;

        BankAccountTrans bankAccountTransReconciled;
        BankDocumentTable bankDocumentTable;
        BankStmtISOReportEntry reportEntry;
        BankReconciliationMatchingItemView matchingItemView;

        while select RecId
            from bankAccountTransReconciled
                where bankAccountTransReconciled.Reconciled == NoYes::Yes
            join BookingDateTime from reportEntry
                where reportEntry.Reconciled == NoYes::Yes
            exists join bankAccountTransSet
                where bankAccountTransReconciled.RecId == bankAccountTransSet.BankAccountTransRefRecId
            exists join bankDocumentTable
                where bankDocumentTable.SourceRelationType == bankAccountTransReconciled.SourceTableId
                    && bankDocumentTable.SourceRecId == bankAccountTransReconciled.SourceRecId
                    && bankDocumentTable.IsReconciled == NoYes::Yes
            exists join matchingItemView
                where matchingItemView.BankDocumentTable == bankDocumentTable.RecId
                && matchingItemView.Cancelled == NoYes::No
                && matchingItemView.BankStmtISOReportEntry == reportEntry.RecId
        {
            _bankAccountTransTmp.RefDataAreaId = currentCompany;
            _bankAccountTransTmp.BankAccountTransRefRecId = bankAccountTransReconciled.RecId;
            _bankAccountTransTmp.ClearedDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(reportEntry.BookingDateTime, DateTimeUtil::getCompanyTimeZone()));
            _bankAccountTransTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankAccountTransClearedDate</Name>
				<Source><![CDATA[
    protected void updateBankAccountTransClearedDate(BankAccountTransClearedDateTmp _bankAccountTransTmp)
    {
        BankAccountTrans bankAccountTrans;

        bankAccountTrans.skipAosValidation(true);
        bankAccountTrans.skipBusinessEvents(true);
        bankAccountTrans.skipDatabaseLog(true);
        bankAccountTrans.skipDataMethods(true);
        bankAccountTrans.skipEvents(true);

        update_recordset bankAccountTrans
            setting ClearedDate = _bankAccountTransTmp.ClearedDate
            join _bankAccountTransTmp
                where _bankAccountTransTmp.BankAccountTransRefRecId == bankAccountTrans.RecId
                    && bankAccountTrans.ClearedDate == dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesBatchJobExist</Name>
				<Source><![CDATA[
    internal static boolean doesBatchJobExist()
    {
        Batch batch;
        BatchJob batchJob;
        boolean doesBatchJobExist;

        select firstonly batchJob
            where batchJob.DataPartition == getCurrentPartition()
                && (batchJob.Status == BatchStatus::Ready
                    || batchJob.Status == BatchStatus::Waiting
                    || batchJob.Status == BatchStatus::Scheduled
                    || batchJob.Status == BatchStatus::Executing)
            exists join batch
                where batch.ClassNumber == BankAccountTransClearedDateUpgradeClassId
                    && batch.DataPartition == batchJob.DataPartition
                    && batch.BatchJobId == batchJob.RecId;

        if (batchJob)
        {
            doesBatchJobExist = true;
        }

        return doesBatchJobExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStatus</Name>
				<Source><![CDATA[
    private void createStatus(
        RefRecId _workItemRecId,
        BankAccountTransClearedDateWorkItemStatus _status)
    {
        BankAccountTransClearedDateUpgradeStatus upgradeStatus;

        upgradeStatus.WorkItemRecId = _workItemRecId;
        upgradeStatus.Status = _status;
        upgradeStatus.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isComplete</Name>
				<Source><![CDATA[
    private static boolean isComplete()
    {
        BankAccountTransClearedDateUpgradeWorkItem workItem;
        select count(RecId) from workItem;

        if (workItem.RecId == 0)
        {
            return false;
        }

        BankAccountTransClearedDateUpgradeWorkItem workItemUpgradeStatus;
        BankAccountTransClearedDateUpgradeStatus upgradeStatus;
        select count(RecId)
            from workItemUpgradeStatus
            join upgradeStatus
            where workItemUpgradeStatus.RecId == upgradeStatus.WorkItemRecId
                && upgradeStatus.Status == BankAccountTransClearedDateWorkItemStatus::Completed;

        return workItem.RecId == workItemUpgradeStatus.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveWorkItemsBeenCreated</Name>
				<Source><![CDATA[
    private static boolean haveWorkItemsBeenCreated()
    {
        BankAccountTransClearedDateUpgradeWorkItem workItem;
        BankAccountTransClearedDateUpgradeStatus upgradeStatus;

        select firstonly RecId from workItem
            join upgradeStatus
                where workItem.RecId == upgradeStatus.WorkItemRecId
                    && upgradeStatus.Status == BankAccountTransClearedDateWorkItemStatus::Created;

        return workItem.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveBatchTasksBeenScheduled</Name>
				<Source><![CDATA[
    private static boolean haveBatchTasksBeenScheduled()
    {
        BankAccountTransClearedDateUpgradeWorkItem workItem;
        BankAccountTransClearedDateUpgradeStatus upgradeStatus;

        select firstonly RecId
            from workItem
            join upgradeStatus
            where workItem.RecId == upgradeStatus.WorkItemRecId
                && upgradeStatus.Status == BankAccountTransClearedDateWorkItemStatus::Scheduled;

        return workItem.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWorkItemStatus</Name>
				<Source><![CDATA[
    private void logWorkItemStatus(RefRecId _workItemRecId, BankAccountTransClearedDateWorkItemStatus _status)
    {
        UserConnection userConnection = new UserConnection();
        try
        {
            userConnection.ttsbegin();
            this.createStatus(_workItemRecId, _status);
            userConnection.ttscommit();
        }
        finally
        {
            userConnection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastWorkItemStatusExist</Name>
				<Source><![CDATA[
    private BankAccountTransClearedDateWorkItemStatus findLastWorkItemStatusExist(RefRecId _workItemRecId)
    {
        BankAccountTransClearedDateUpgradeStatus upgradeStatus;
        select firstonly upgradeStatus
            order by upgradeStatus.RecId desc
            where upgradeStatus.WorkItemRecId == _workItemRecId;

        return upgradeStatus.Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUpgrade</Name>
				<Source><![CDATA[
    private NoYes allowUpgrade()
    {
        return FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMinDate</Name>
				<Source><![CDATA[
    private date calculateMinDate()
    {
        TransDate currentSystemDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        date minDate = prevYr(currentSystemDate);
        return minDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsChildBatchTask</Name>
				<Source><![CDATA[
    internal boolean parmIsChildBatchTask(
        boolean _isChildBatchTask = isChildBatchTask)
    {
        isChildBatchTask = _isChildBatchTask;
        return isChildBatchTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkItemRecId</Name>
				<Source><![CDATA[
    internal RefRecId parmWorkItemRecId(RefRecId _workItemRecId = workItemRecId)
    {
        workItemRecId = _workItemRecId;
        return workItemRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ClassDescription defaultCaption()
    {
        return "@CashManagement:BankAccountTransDataUpgrade";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal IDialogable dialog()
    {
        this.batchInfo().parmBatchExecute(NoYes::Yes);

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean validate()
    {
        boolean ret = super();

        if (this.batchInfo().parmBatchExecute() == NoYes::No)
        {
            ret = checkFailed("@CashManagement:BankAccountTransClearedDateMustBeInBatch");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>