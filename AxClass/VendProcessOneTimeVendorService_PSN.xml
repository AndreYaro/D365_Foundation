<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendProcessOneTimeVendorService_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Service class for processing one-time vendor and invoices data from <c>VendOneTimeVendInvoiceStaging_PSN</c> table.
/// </summary>
public class VendProcessOneTimeVendorService_PSN extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAccountingDistribution</Name>
				<Source><![CDATA[
    private void createAccountingDistribution(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        SourceDocumentProcessorFacade::submitSourceDocumentLinesForHeader(_vendInvoiceInfoTable, SourceDocumentLineAccountingStatus::FullyDistributed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAddress</Name>
				<Source><![CDATA[
    private LogisticsPostalAddress createAddress(VendOneTimeVendInvoiceStaging_PSN _vendOneTimeVendInvoiceStaging)
    {
        LogisticsPostalAddress logisticsPostalAddress;

        logisticsPostalAddress.Street          = _vendOneTimeVendInvoiceStaging.Street;
        logisticsPostalAddress.State           = _vendOneTimeVendInvoiceStaging.State;
        logisticsPostalAddress.City            = _vendOneTimeVendInvoiceStaging.City;
        logisticsPostalAddress.CountryRegionId = _vendOneTimeVendInvoiceStaging.CountryRegionId;
        logisticsPostalAddress.ZipCode         = _vendOneTimeVendInvoiceStaging.ZipCode;
        logisticsPostalAddress.ZipCodeRecId    = LogisticsAddressZipcode::find(_vendOneTimeVendInvoiceStaging.ZipCode).RecId;

        var addressStringBuilderParameters = LogisticsPostalAddressStringBuilderParameters::constructFromLogisticsPostalAddress(logisticsPostalAddress);
        logisticsPostalAddress.Address = LogisticsPostalAddressStringBuilder::buildAddressStringFromParameters(addressStringBuilderParameters);

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrFindVendor</Name>
				<Source><![CDATA[
    private VendTable createOrFindVendor(VendOneTimeVendInvoiceStaging_PSN _vendOneTimeVendInvoiceStagingGroupByFederalTaxId,
        VendProcessOneTimeVendorDataContract_PSN _vendOneTimeVendInvoiceDataContract)
    {
        VendOneTimeVendInvoiceStaging_PSN  vendOneTimeVendInvoiceStagingHeader;
        VendOneTimeVendInvoiceService_PSN  vendOneTimeVendInvoiceService_PSN;
        VendOneTimeVendInvoiceForm_PSN     vendOneTimeVendInvoiceForm_PSN;
        VendTable                          vendTable;
        vendTable                          vendTableDuplicate;
        NoYesCombo                         allowDuplicate;

        allowDuplicate = _vendOneTimeVendInvoiceDataContract.parmAllowDuplicate();

        select firstOnly vendOneTimeVendInvoiceStagingHeader
                where vendOneTimeVendInvoiceStagingHeader.FederalTaxID      == _vendOneTimeVendInvoiceStagingGroupByFederalTaxId.FederalTaxID
                    && vendOneTimeVendInvoiceStagingHeader.FirstName        == _vendOneTimeVendInvoiceStagingGroupByFederalTaxId.FirstName
                    && vendOneTimeVendInvoiceStagingHeader.MiddleName       == _vendOneTimeVendInvoiceStagingGroupByFederalTaxId.MiddleName
                    && vendOneTimeVendInvoiceStagingHeader.LastName         == _vendOneTimeVendInvoiceStagingGroupByFederalTaxId.LastName
                    && vendOneTimeVendInvoiceStagingHeader.OrganizationName == _vendOneTimeVendInvoiceStagingGroupByFederalTaxId.OrganizationName
                    && vendOneTimeVendInvoiceStagingHeader.UserID           == curUserId();

        vendOneTimeVendInvoiceForm_PSN    = this.fillVendOneTimeVendInvoiceForm_PSN(vendOneTimeVendInvoiceStagingHeader);
        vendOneTimeVendInvoiceService_PSN = new VendOneTimeVendInvoiceService_PSN();

        vendOneTimeVendInvoiceService_PSN.init(vendOneTimeVendInvoiceForm_PSN);

        if (!allowDuplicate)
        {
            vendTableDuplicate = vendOneTimeVendInvoiceService_PSN.findDuplicateVendor();
        }

        if (allowDuplicate || !vendTableDuplicate.RecId)
        {
            vendTable = vendOneTimeVendInvoiceService_PSN.createVendTable();
        }

        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillVendInvoiceHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills header data for one-time vendor invoices.
    /// </summary>
    /// <param name="_vendOneTimeVendInvoiceStaging">
    /// Record buffer for <c>VendOneTimeVendInvoiceStaging_PSN</c> table.
    /// </param>
    /// <param name="_vendTable">
    /// Record buffer for <c>VendTable</c> table.
    /// </param>
    private VendInvoiceInfoTable fillVendInvoiceHeader(VendOneTimeVendInvoiceStaging_PSN _vendOneTimeVendInvoiceStaging, VendTable _vendTable)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        vendInvoiceInfoTable.initValue();
        vendInvoiceInfoTable.Num                   = _vendOneTimeVendInvoiceStaging.InvoiceNumber;
        vendInvoiceInfoTable.OrderAccount          = _vendTable.AccountNum;
        vendInvoiceInfoTable.CurrencyCode          = CompanyInfoHelper::standardCurrency();
        vendInvoiceInfoTable.Description           = _vendOneTimeVendInvoiceStaging.InvoiceDescription;
        vendInvoiceInfoTable.InvoiceAccount        = _vendTable.AccountNum;
        vendInvoiceInfoTable.PaymMode              = _vendTable.PaymTermId;
        vendInvoiceInfoTable.DocumentDate          = _vendOneTimeVendInvoiceStaging.InvoiceDate;
        vendInvoiceInfoTable.FixedDueDate          = _vendOneTimeVendInvoiceStaging.DueDate;
        vendInvoiceInfoTable.TransDate             = _vendOneTimeVendInvoiceStaging.PostingDate;
        vendInvoiceInfoTable.PaymMode              = _vendTable.PaymMode;
        vendInvoiceInfoTable.VendInvoiceSaveStatus = VendInvoiceSaveStatus::Pending;
        vendInvoiceInfoTable.DocumentOrigin        = DocumentOrigin::Service;
        vendInvoiceInfoTable.ParmJobStatus         = ParmJobStatus::Waiting;
        vendInvoiceInfoTable.defaultRow();

        if ((_vendOneTimeVendInvoiceStaging.VendGroup != '') && (VendParameters::find().VendInvoiceGroupingEnable == NoYes::Yes))
        {
            vendInvoiceInfoTable.VendInvoiceGroup = _vendOneTimeVendInvoiceStaging.VendGroup;
        }

        vendInvoiceInfoTable.insert();

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillVendInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills line data for one-time vendor invoices.
    /// </summary>
    /// <param name="_vendOneTimeVendInvoiceStagingLine">
    /// Lines for the one-time vendor invoice form <c>VendOneTimeVendInvoiceStaging_PSN</c> table.
    /// </param>
    /// <param name="_vendInvoiceInfoLine">
    /// Record buffer for <c>VendInvoiceInfoLine</c> table.
    /// </param>
    private VendInvoiceInfoLine fillVendInvoiceLine(VendOneTimeVendInvoiceStaging_PSN _vendOneTimeVendInvoiceStagingLine, VendInvoiceInfoSubTable _vendInvoiceInfoSubTable)
    {
        EcoResCategory      procurementCategory;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        
        vendInvoiceInfoLine.initValue();
        vendInvoiceInfoLine.ParmId      = _vendInvoiceInfoSubTable.ParmId;
        vendInvoiceInfoLine.TableRefId  = _vendInvoiceInfoSubTable.TableRefId;
        vendInvoiceInfoLine.ItemId      = _vendOneTimeVendInvoiceStagingLine.ItemNumber;
        vendInvoiceInfoLine.defaultRow();
        vendInvoiceInfoLine.PurchUnit  = _vendOneTimeVendInvoiceStagingLine.PurchUnit;
        vendInvoiceInfoLine.LineAmount  = _vendOneTimeVendInvoiceStagingLine.LineAmount;
        vendInvoiceInfoLine.LineNum     = _vendOneTimeVendInvoiceStagingLine.LineNumber;
        vendInvoiceInfoLine.DefaultDimension = DimensionAttributeValueSetStorage::getDefaultDimensionFromDimensionCombination(_vendOneTimeVendInvoiceStagingLine.LedgerDimension);

        if (_vendOneTimeVendInvoiceStagingLine.Name && _vendOneTimeVendInvoiceStagingLine.ProcurementCategoryHierarchy && !_vendOneTimeVendInvoiceStagingLine.ItemNumber)
        {
            vendInvoiceInfoLine.ProcurementCategory = EcoResCategory::findCategoryByNameAndHierarchy(_vendOneTimeVendInvoiceStagingLine.Name,
                _vendOneTimeVendInvoiceStagingLine.ProcurementCategoryHierarchy).RecId;

            // Set the TaxItemGroup based on the procurement category selected
            TaxItemGroupHeading taxItemGroupHeading = EcoResCategory::getProcurementCategoryItemTaxGroup(vendInvoiceInfoLine.ProcurementCategory);

            if (taxItemGroupHeading)
            {
                vendInvoiceInfoLine.TaxItemGroup = taxItemGroupHeading.TaxItemGroup;
            }
        }

        if (!_vendOneTimeVendInvoiceStagingLine.LineAmount)
        {
            vendInvoiceInfoLine.LineAmount = _vendOneTimeVendInvoiceStagingLine.UnitPrice * _vendOneTimeVendInvoiceStagingLine.Quantity;
            vendInvoiceInfoLine.PurchPrice  = _vendOneTimeVendInvoiceStagingLine.UnitPrice;
        }
        else if (_vendOneTimeVendInvoiceStagingLine.LineAmount == _vendOneTimeVendInvoiceStagingLine.UnitPrice * _vendOneTimeVendInvoiceStagingLine.Quantity)
        {
            vendInvoiceInfoLine.PurchPrice  = _vendOneTimeVendInvoiceStagingLine.UnitPrice;
        }
        else
        {
            vendInvoiceInfoLine.PurchPrice = 0;
        }

        if (!_vendOneTimeVendInvoiceStagingLine.Quantity)
        {
            vendInvoiceInfoLine.ReceiveNow  = 1;
        }
        else
        {
            vendInvoiceInfoLine.ReceiveNow  = _vendOneTimeVendInvoiceStagingLine.Quantity;
        }

        if (_vendOneTimeVendInvoiceStagingLine.BudgetReservationDocumentNumber && _vendOneTimeVendInvoiceStagingLine.BudgetReservationLineNumber && PublicSectorUtils::isBudgetReservationEnabled())
        {
            BudgetReservationHeader_PSN budgetReservationHeader = BudgetReservationHeader_PSN::findByDocumentNumber(_vendOneTimeVendInvoiceStagingLine.BudgetReservationDocumentNumber);

            BudgetReservationLine_PSN budgetReservationLine = BudgetReservationLine_PSN::findByLineNumber(_vendOneTimeVendInvoiceStagingLine.BudgetReservationLineNumber, budgetReservationHeader.RecId);
            
            vendInvoiceInfoLine.BudgetReservationLine_PSN = budgetReservationLine.RecId;
        }

        SysTransactionScopeCache::set(identifierStr(VendProcessOneTimeVendorService_PSN), identifierStr(VendProcessOneTimeVendorService_PSN), true);

        vendInvoiceInfoLine.insert();

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillVendOneTimeVendInvoiceForm_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills one-time vendor and invoice contract class <c>VendOneTimeVendInvoiceForm_PSN></c>.
    /// </summary>
    /// <param name="_vendOneTimeVendInvoiceStaging">
    /// Record buffer for <c>VendOneTimeVendInvoiceStaging_PSN</c> table.
    /// </param>
    /// <returns>
    /// Returns contract class <c>VendOneTimeVendInvoiceForm_PSN></c>.
    /// </returns>
    private VendOneTimeVendInvoiceForm_PSN fillVendOneTimeVendInvoiceForm_PSN(VendOneTimeVendInvoiceStaging_PSN _vendOneTimeVendInvoiceStaging)
    {
        VendOneTimeVendInvoiceForm_PSN vendOneTimeVendInvoiceForm_PSN;

        vendOneTimeVendInvoiceForm_PSN = new VendOneTimeVendInvoiceForm_PSN();

        vendOneTimeVendInvoiceForm_PSN.parmDefaultVendTable       (this.getDefaultVendTable());
        vendOneTimeVendInvoiceForm_PSN.parmVendRecordType         (_vendOneTimeVendInvoiceStaging.RecordType);
        vendOneTimeVendInvoiceForm_PSN.parmBankAccountId          (_vendOneTimeVendInvoiceStaging.BankAccountId);
        vendOneTimeVendInvoiceForm_PSN.parmBankAccountNumber      (_vendOneTimeVendInvoiceStaging.BankAccountNumber);
        vendOneTimeVendInvoiceForm_PSN.parmBankIBAN               (_vendOneTimeVendInvoiceStaging.IBAN);
        vendOneTimeVendInvoiceForm_PSN.parmBankRoutingNumber      (_vendOneTimeVendInvoiceStaging.RoutingNumber);
        vendOneTimeVendInvoiceForm_PSN.parmBankSWIFTNo            (_vendOneTimeVendInvoiceStaging.SWIFTCode);
        vendOneTimeVendInvoiceForm_PSN.parmlogisticsAddressStreet (_vendOneTimeVendInvoiceStaging.Street);
        vendOneTimeVendInvoiceForm_PSN.parmLogisticsPostalAddress (this.createAddress(_vendOneTimeVendInvoiceStaging));
        vendOneTimeVendInvoiceForm_PSN.parmOrganizationName       (_vendOneTimeVendInvoiceStaging.OrganizationName);
        vendOneTimeVendInvoiceForm_PSN.parmPersonFirstName        (_vendOneTimeVendInvoiceStaging.FirstName);
        vendOneTimeVendInvoiceForm_PSN.parmPersonMiddleName       (_vendOneTimeVendInvoiceStaging.MiddleName);
        vendOneTimeVendInvoiceForm_PSN.parmPersonLastName         (_vendOneTimeVendInvoiceStaging.LastName);
        vendOneTimeVendInvoiceForm_PSN.parmTax1099RegNum          (_vendOneTimeVendInvoiceStaging.FederalTaxID);
        vendOneTimeVendInvoiceForm_PSN.parmTaxIDType              (_vendOneTimeVendInvoiceStaging.FederalTaxIDType);
        vendOneTimeVendInvoiceForm_PSN.parmVendAccount            (NumberSeq::newGetNum(VendParameters::numRefOneTimeSupplierAccount()).num());
        vendOneTimeVendInvoiceForm_PSN.parmVendGroupId            (_vendOneTimeVendInvoiceStaging.VendGroup);

        return vendOneTimeVendInvoiceForm_PSN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the default vendor configured in AP Parameters.
    /// </summary>
    /// <returns>
    /// The <c>VendTable</c> record for default vendor.
    /// </returns>
    private VendTable getDefaultVendTable()
    {
        return VendTable::find(VendParameters::find().DefaultVend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOneTimeVendorInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process one-time vendor and invoices from <c>VendOneTimeVendInvoiceStaging_PSN</c> staging table.
    /// </summary>
    /// <param name="_vendOneTimeVendInvoiceDataContract">
    /// Data contract for <c>VendProcessOneTimeVendorService_PSN</c>
    /// </param>
    public void processOneTimeVendorInvoice(VendProcessOneTimeVendorDataContract_PSN _vendOneTimeVendInvoiceDataContract)
    {
        VendTable               vendTable;
        boolean                 isProcessed;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        CurrencyCode            currencyCode;

        VendOneTimeVendInvoiceStaging_PSN vendOneTimeVendInvoiceStagingGroupByFederalTaxId;
        VendOneTimeVendInvoiceStaging_PSN vendOneTimeVendInvoiceStagingHeaderGroupBy;
        VendOneTimeVendInvoiceStaging_PSN vendOneTimeVendInvoiceStagingHeader;
        VendOneTimeVendInvoiceStaging_PSN vendOneTimeVendInvoiceStagingLines;
        VendOneTimeVendInvoiceStaging_PSN vendOneTimeVendInvoiceStagingLinesGroupBy;
        VendOneTimeVendInvoiceStaging_PSN vendOneTimeVendInvoiceStaging_PSN;

        Counter vendorsProcessedCount, vendorsAddedCount, invoicesAddedCount;
        int64   errorCount;
        Set     vendorsAddedSet = new Set(Types::Int64);

        currencyCode = CompanyInfoHelper::standardCurrency();

        ttsBegin;

        while select FederalTaxID, MiddleName, FirstName, LastName, OrganizationName from vendOneTimeVendInvoiceStagingGroupByFederalTaxId
            group by FederalTaxID, MiddleName, FirstName, LastName, OrganizationName
            where vendOneTimeVendInvoiceStagingGroupByFederalTaxId.UserID == curUserId()
        {
            vendTable = this.createOrFindVendor(vendOneTimeVendInvoiceStagingGroupByFederalTaxId,
                _vendOneTimeVendInvoiceDataContract);

            if (vendTable.RecId)
            {
                isProcessed = true;
                vendorsProcessedCount++;
                vendorsAddedSet.add(vendTable.RecId);

                while select InvoiceNumber from vendOneTimeVendInvoiceStagingHeaderGroupBy
                    group by InvoiceNumber
                    where vendOneTimeVendInvoiceStagingHeaderGroupBy.FederalTaxID      == vendOneTimeVendInvoiceStagingGroupByFederalTaxId.FederalTaxID
                        && vendOneTimeVendInvoiceStagingHeaderGroupBy.OrganizationName == vendOneTimeVendInvoiceStagingGroupByFederalTaxId.OrganizationName
                        && vendOneTimeVendInvoiceStagingHeaderGroupBy.MiddleName       == vendOneTimeVendInvoiceStagingGroupByFederalTaxId.MiddleName
                        && vendOneTimeVendInvoiceStagingHeaderGroupBy.FirstName        == vendOneTimeVendInvoiceStagingGroupByFederalTaxId.FirstName
                        && vendOneTimeVendInvoiceStagingHeaderGroupBy.LastName         == vendOneTimeVendInvoiceStagingGroupByFederalTaxId.LastName
                        && vendOneTimeVendInvoiceStagingHeaderGroupBy.UserID           == curUserId()
                {
                    //Create invoice header information
                    select firstOnly vendOneTimeVendInvoiceStagingHeader
                        where vendOneTimeVendInvoiceStagingHeader.InvoiceNumber == vendOneTimeVendInvoiceStagingHeaderGroupBy.InvoiceNumber
                            && vendOneTimeVendInvoiceStagingHeader.UserID       == curUserId();

                    invoicesAddedCount++;
                    vendInvoiceInfoTable    =  this.fillVendInvoiceHeader(vendOneTimeVendInvoiceStagingHeader, vendTable);
                    vendInvoiceInfoSubTable =  VendInvoiceInfoSubTable::createFromVendInvoiceInfoTable(vendInvoiceInfoTable);

                    while select InvoiceNumber, LineNumber from vendOneTimeVendInvoiceStagingLinesGroupBy
                            group by InvoiceNumber, LineNumber
                            where vendOneTimeVendInvoiceStagingLinesGroupBy.InvoiceNumber == vendOneTimeVendInvoiceStagingHeader.InvoiceNumber
                        && vendOneTimeVendInvoiceStagingLinesGroupBy.UserID == curUserId()

                    {
                        select firstOnly vendOneTimeVendInvoiceStagingLines
                            where vendOneTimeVendInvoiceStagingLines.InvoiceNumber == vendOneTimeVendInvoiceStagingLinesGroupBy.InvoiceNumber
                                && vendOneTimeVendInvoiceStagingLines.LineNumber   == vendOneTimeVendInvoiceStagingLinesGroupBy.LineNumber
                                && vendOneTimeVendInvoiceStagingLines.UserID       == curUserId();

                        // Invoice lines
                        vendInvoiceInfoLine = this.fillVendInvoiceLine(vendOneTimeVendInvoiceStagingLines, vendInvoiceInfoSubTable);
                    }

                    // Distributions
                    if (SysTransactionScopeCache::get (identifierStr(VendProcessOneTimeVendorService_PSN), identifierStr(VendProcessOneTimeVendorService_PSN), false))
                    {
                        this.createAccountingDistribution(vendInvoiceInfoTable);
                    }

                    // Deletes invoice record from vendOneTimeVendInvoiceStaging_PSN staging table
                    delete_from vendOneTimeVendInvoiceStaging_PSN
                        where vendOneTimeVendInvoiceStaging_PSN.InvoiceNumber == vendOneTimeVendInvoiceStagingHeaderGroupBy.InvoiceNumber
                        && vendOneTimeVendInvoiceStaging_PSN.UserID == curUserId();
                }
            }
        }

        ttsCommit;

        if (!isProcessed)
        {
            error("@SYP4860713");
        }
        else
        {
            errorCount = (select count(RecId) from vendOneTimeVendInvoiceStaging_PSN where vendOneTimeVendInvoiceStaging_PSN.UserID == curUserId()).RecId;

            if (_vendOneTimeVendInvoiceDataContract.parmAllowDuplicate())
            {
                vendorsAddedCount = vendorsProcessedCount;
            }
            else
            {
                vendorsAddedCount = vendorsAddedSet.elements();
            }

            info("@SYP4950210");
            info("@SYP4861368" + strFmt(" %1", errorCount));
            info("@SYP4950205" + strFmt(" %1", vendorsProcessedCount));
            info("@SYP4950152" + strFmt(" %1", vendorsAddedCount));
            info("@SYP4950145" + strFmt(" %1", invoicesAddedCount));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>