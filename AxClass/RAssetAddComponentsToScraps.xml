<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetAddComponentsToScraps</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetAddComponentsToScraps extends RunBaseBatch implements BatchRetryable
{
    private RAssetScrap rAssetScrap;
    private RAssetTable rAssetTable;
    private RecordSortedList rAssetScrapList;
    private InventQtyJournal qty;
    private DialogField dialogQty;
    private DialogField dialogAvailableQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateLine</Name>
				<Source><![CDATA[
    private boolean canCreateLine()
    {
        boolean ret = true;

        if (!rAssetScrap.TransDate)
        {
            ret = false;
        }
        if (!rAssetScrap.Assembling)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean ret = true;

        if (!rAssetTable.isFixedAssetType())
        {
            DictField dictFieldSerialId = new DictField(tablenum(InventDim), fieldnum(InventDim, InventSerialId));
            DictField dictFieldBatchId = new DictField(tablenum(InventDim), fieldnum(InventDim, InventBatchId));

            InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(rAssetScrap.ItemId);

            if (!inventDimGroupSetup.isDimensionActive(dictFieldSerialId.id()))
            {
                ret = checkFailed(strfmt("@GLS113981", dictFieldSerialId.label(), rAssetScrap.ItemId));
            }

            if (!inventDimGroupSetup.isDimensionActive(dictFieldBatchId.id()))
            {
                ret = checkFailed(strfmt("@GLS113981", dictFieldBatchId.label(), rAssetScrap.ItemId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    private void createLine(InventQtyJournal _qty)
    {
        RAssetScrap rassetScrapNew;
        rassetScrapNew.clear();
        rassetScrapNew.AssetId = rAssetTable.AccountNum;
        rassetScrapNew.ItemId = rAssetScrap.ItemId;

        if (!rAssetTable.isFixedAssetType())
        {
            rassetScrapNew.InventDimId = this.initInventDimNVFA(rAssetScrap.InventDimId);
        }
        else
        {
            rassetScrapNew.InventDimId = rAssetScrap.InventDimId;
        }

        rassetScrapNew.Qty = _qty;
        rassetScrapNew.InitialCostPrice = rAssetScrap.CostPrice;
        rassetScrapNew.InitialCostAmount = rAssetScrap.calcCostAmount(_qty);
        rassetScrapNew.ComponentRefRecId = rAssetScrap.RecId;
        rassetScrapNew.AssemblingDate = rAssetScrap.TransDate;
        rassetScrapNew.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        RAssetInventQty availQty = rAssetScrap.availableScrapQty();
        
        DialogRunbase dialog = super();
        dialog.caption("@GLS116961");
        dialogAvailableQty = dialog.addFieldValue(extendedtypestr(RAssetInventQty), availQty, "@SYS54429");
        dialogAvailableQty.allowEdit(false);

        dialogQty = dialog.addFieldValue(extendedtypestr(RAssetInventQty), availQty, "@SYS35402");
        dialogQty.allowEdit(rAssetTable.isFixedAssetType());

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        qty = dialogQty.value();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimNVFA</Name>
				<Source><![CDATA[
    private InventDimId initInventDimNVFA(InventDimId    _inventDimId)
    {
        InventDim inventDim = InventDim::find(_inventDimId);

        if (!InventSerial::exist(rAssetTable.AccountNum, rAssetScrap.ItemId))
        {
            InventSerial inventSerial;
            inventSerial.ItemId = rAssetScrap.ItemId;
            inventSerial.InventSerialId = rAssetTable.AccountNum;
            inventSerial.insert();
        }

        if (!InventBatch::exist(rAssetTable.AccountNumReference, rAssetScrap.ItemId))
        {
            InventBatch inventBatch;
            inventBatch.InventBatchId = rAssetTable.AccountNumReference;
            inventBatch.ItemId = rAssetScrap.ItemId;
            inventBatch.insert();
        }

        inventDim.InventBatchId = rAssetTable.AccountNumReference;
        inventDim.InventSerialId = rAssetTable.AccountNum;

        inventDim = InventDim::findOrCreate(inventDim);

        return inventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    public InventQtyJournal parmQty(InventQtyJournal _qty = qty)
    {
        qty = _qty;
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRAssetScrap</Name>
				<Source><![CDATA[
    public RAssetScrap parmRAssetScrap(RAssetScrap _rAssetScrap = rAssetScrap)
    {
        rAssetScrap = _rAssetScrap;
        return rAssetScrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRAssetScrapList</Name>
				<Source><![CDATA[
    public RecordSortedList parmRAssetScrapList(RecordSortedList _rAssetScrapList = rAssetScrapList)
    {
        rAssetScrapList = _rAssetScrapList;
        return rAssetScrapList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRAssetTable</Name>
				<Source><![CDATA[
    public RAssetTable parmRAssetTable(RAssetTable _rAssetTable = rAssetTable)
    {
        rAssetTable = _rAssetTable;
        return rAssetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Counter counter;

        super();

        if (!this.check())
        {
            return;
        }

        if (rAssetScrap)
        {
            if (this.canCreateLine()
                && qty)
            {
                this.createLine(qty);
                counter++;
            }
        }
        else
        {
            for (boolean more = rAssetScrapList.first(rAssetScrap); more; more = rAssetScrapList.next(rAssetScrap))
            {
                if (this.canCreateLine()
                    && rAssetScrap.availableScrapQty())
                {
                    this.createLine(rAssetScrap.availableScrapQty());
                    counter++;
                }
            }
        }

        info(strfmt("@GLS116964", counter));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDialog</Name>
				<Source><![CDATA[
    public boolean showDialog()
    {
        return rAssetScrap.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (dialogQty.value() <= 0)
        {
            ret = checkFailed("@SYS16660");
        }

        if (dialogQty.value() > rAssetScrap.Qty)
        {
            ret = checkFailed("@GLS116965");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RAssetAddComponentsToScraps addComponentsToScraps = new RAssetAddComponentsToScraps();
        RecordSortedList rAssetScrapList = new RecordSortedList(tablenum(RAssetScrap));

        if(!_args
            || !_args.caller()
            || !(_args.caller() is RAssetIComponents))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        RAssetIComponents rAssetIComponents = _args.caller() as RAssetIComponents;
        FormDataSource components_ds = rAssetIComponents.rAssetComponents_ds();

        if (components_ds.anyMarked())
        {
            rAssetScrapList.sortOrder(fieldnum(RAssetScrap,RecId));

            for (RAssetScrap rAssetScrap = components_ds.getFirst(true, false); rAssetScrap; rAssetScrap = components_ds.getNext())
            {
                rAssetScrapList.ins(rAssetScrap);
            }
            addComponentsToScraps.parmRAssetScrapList(rAssetScrapList);
        }
        else
        {
            addComponentsToScraps.parmRAssetScrap(components_ds.cursor());
        }

        addComponentsToScraps.parmRAssetTable(rAssetIComponents.rAssetTable());

        if (addComponentsToScraps.prompt())
        {
            addComponentsToScraps.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>