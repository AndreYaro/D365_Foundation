<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionConsistencyCheckerTaskParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionConsistencyCheckerTaskParameters</c> class holds the parameters for the consistency checker job.
/// </summary>
internal class RetailTransactionConsistencyCheckerTaskParameters implements SysPackable
{
    #define.CurrentVersion(2)

    #localmacro.CurrentListV1
        storeId, statementId
    #endmacro
    #localmacro.CurrentListV2
        storeId, statementId
    #endmacro

    private RetailStoreId storeId;
    private RetailStatementId statementId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the RetailTransactionConsistencyCheckerTaskParameters.
    /// </summary>
    /// <returns>A container that contains the current instance of the RetailTransactionConsistencyCheckerTaskParameters.</returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentListV2];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the <paramref name="_packedClass"/> parameter to the current instance of the RetailTransactionConsistencyCheckerTaskParameters.
    /// </summary>
    /// <param name = "_packedClass">The container from which to deserialize the instance.</param>
    /// <returns>true if deserialization was successful; otherwise, false.</returns>
    public boolean unpack(container _packedClass)
    {
        int version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentListV2] = _packedClass;
                break;
            case 1:
                [version, storeId] = _packedClass;
                statementId = ''; // in V1 statementId is not part of the container, setting it to blank.
                break;
            default:
                return false;
        }

        // If we unpacked the class members but there is no store, we should abort.
        if (!RetailStoreTable::find(storeId))
        {
            return false;
        }

        // If statement is populated and we can't find it, we should abort.
        if (statementId && !RetailStatementTable::find(statementId))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatementId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the statement id.
    /// </summary>
    /// <returns>The statement id.</returns>
    /// <remarks>
    /// StatementId may be empty when the job is being executed with 'Store' scope.
    /// </remarks>
    public RetailStatementId getStatementId()
    {
        return statementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStoreId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the store id.
    /// </summary>
    /// <returns>The store id.</returns>
    public RetailStoreId getStoreId()
    {
        return storeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>RetailTransactionConsistencyCheckerTaskParameters</c> to be used to run consistency checker with a store scope.
    /// </summary>
    /// <param name = "_storeId">The store id.</param>
    /// <returns>A new <c>RetailTransactionConsistencyCheckerTaskParameters</c> instance.</returns>
    public static RetailTransactionConsistencyCheckerTaskParameters constructForStore(RetailStoreId _storeId)
    {
        RetailTransactionConsistencyCheckerTaskParameters params = new RetailTransactionConsistencyCheckerTaskParameters();

        params.storeId = _storeId;
        params.statementId = '';
        
        return params;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>RetailTransactionConsistencyCheckerTaskParameters</c> to be used to run consistency checker with a statement scope.
    /// </summary>
    /// <param name = "_statementTable">The <c>RetailStatementTable</c> record.</param>
    /// <returns>A new <c>RetailTransactionConsistencyCheckerTaskParameters</c> instance.</returns>
    public static RetailTransactionConsistencyCheckerTaskParameters constructForStatement(RetailStatementTable _statementTable)
    {
        RetailTransactionConsistencyCheckerTaskParameters params = new RetailTransactionConsistencyCheckerTaskParameters();
        
        params.storeId = _statementTable.storeId;
        params.statementId = _statementTable.statementId;
        
        return params;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new empty instance of <c>RetailTransactionConsistencyCheckerTaskParameters</c>.
    /// </summary>
    /// <returns>A new <c>RetailTransactionConsistencyCheckerTaskParameters</c> instance.</returns>
    public static RetailTransactionConsistencyCheckerTaskParameters constructEmpty()
    {
        RetailTransactionConsistencyCheckerTaskParameters params = new RetailTransactionConsistencyCheckerTaskParameters();
        
        params.storeId = '';
        params.statementId = '';
        
        return params;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>RetailTransactionConsistencyCheckerTaskParameters</c> from a container which has previously serialized data.
    /// </summary>
    /// <param name = "_packedObject">The container containing the serialized object.</param>
    /// <returns>The deserialized <c>RetailTransactionConsistencyCheckerTaskParameters</c>.</returns>
    public static RetailTransactionConsistencyCheckerTaskParameters create(container _packedObj)
    {
        RetailTransactionConsistencyCheckerTaskParameters params = new RetailTransactionConsistencyCheckerTaskParameters();
        
        params.unpack(_packedObj);
        
        return params;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>