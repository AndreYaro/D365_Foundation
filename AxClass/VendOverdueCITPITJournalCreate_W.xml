<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOverdueCITPITJournalCreate_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>VendOverdueCITPITJournalCreate_W</c> used to create vendor overdue debt journal for CIT and PIT.
/// </summary>
class VendOverdueCITPITJournalCreate_W extends OverdueJournalCreate_W implements BatchRetryable
{
    FromDate                firstFromDate;
    ToDate                  firstToDate;
    OverdueCalcType_W       firstCalcType;

    FromDate                secondFromDate;
    ToDate                  secondToDate;
    OverdueCalcType_W       secondCalcType;

    DialogField             dfTransDate;
    DialogField             dfDescription;

    DialogField             dfFirstCalcType;
    DialogField             dfFirstFromDate;
    DialogField             dfFirstToDate;

    DialogField             dfSecondCalcType;
    DialogField             dfSecondFromDate;
    DialogField             dfSecondToDate;

    DialogRunbase           dialog;

    OverdueJournalSettings_W    firstOverdueJournalSettings;
    OverdueJournalSettings_W    secondOverdueJournalSettings;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcFromDate</Name>
				<Source><![CDATA[
    private FromDate calcFromDate(OverdueJournalSettings_W  _overdueJournalSettings)
    {
        return dfTransDate.value() - _overdueJournalSettings.MaxDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcToDate</Name>
				<Source><![CDATA[
    private ToDate calcToDate(OverdueJournalSettings_W  _overdueJournalSettings)
    {
        return dfTransDate.value() - _overdueJournalSettings.MinDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@SYS4003975";
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendSettlementTableId</Name>
				<Source><![CDATA[
    protected TableId custVendSettlementTableId()
    {
        return tableNum(VendSettlement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransOpenTableId</Name>
				<Source><![CDATA[
    protected TableId custVendTransOpenTableId()
    {
        return tableNum(VendTransOpen);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransTableId</Name>
				<Source><![CDATA[
    protected TableId custVendTransTableId()
    {
        return tableNum(VendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        DictType dictType = new DictType(extendedtypenum(TransDate));
        dfTransDate = dialog.addFieldValue(extendedTypeStr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), dictType.label(), "@SYS14475");
        dfTransDate.registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(VendOverdueCITPITJournalCreate_W, fld990_1_modified), this);

        if (firstOverdueJournalSettings)
        {
            dialog.addGroup(firstOverdueJournalSettings.getPeriodLabelValue());
            dfFirstCalcType = dialog.addFieldValue(enumStr(OverdueCalcType_W), firstOverdueJournalSettings.CalcType);
            dfFirstFromDate = dialog.addFieldValue(extendedTypeStr(FromDate), this.calcFromDate(firstOverdueJournalSettings));
            dfFirstToDate   = dialog.addFieldValue(extendedTypeStr(ToDate), this.calcToDate(firstOverdueJournalSettings));
            dfFirstCalcType.allowEdit(false);
            dfFirstFromDate.allowEdit(false);
            dfFirstToDate.allowEdit(false);
        }

        if (secondOverdueJournalSettings)
        {
            dialog.addGroup(secondOverdueJournalSettings.getPeriodLabelValue());
            dfSecondCalcType = dialog.addFieldValue(enumStr(OverdueCalcType_W), secondOverdueJournalSettings.CalcType);
            dfSecondFromDate = dialog.addFieldValue(extendedTypeStr(FromDate), this.calcFromDate(secondOverdueJournalSettings));
            dfSecondToDate   = dialog.addFieldValue(extendedTypeStr(ToDate), this.calcToDate(secondOverdueJournalSettings));
            dfSecondCalcType.allowEdit(false);
            dfSecondFromDate.allowEdit(false);
            dfSecondToDate.allowEdit(false);
        }

        dfDescription = dialog.addField(extendedTypeStr(Description));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dueDateSettlementFieldId</Name>
				<Source><![CDATA[
    protected FieldId dueDateSettlementFieldId()
    {
        return fieldNum(VendSettlement, DueDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dueDateTransOpenFieldId</Name>
				<Source><![CDATA[
    protected FieldId dueDateTransOpenFieldId()
    {
        return fieldNum(VendTransOpen, DueDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeReversedFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field id of <c>CanBeReversed</c> of <c>VendSettlement</c>.
    /// </summary>
    /// <returns>The field id of <c>CanBeReversed</c>.</returns>
    protected FieldId canBeReversedFieldId()
    {
        return fieldNum(VendSettlement, CanBeReversed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld990_1_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that is executed when the dialog control <c>TransDate</c> is modified.
    /// </summary>
    /// <returns>
    /// true if the control is modified; otherwise false.
    /// </returns>
    public boolean fld990_1_modified(FormDateControl _ctrl)  // dfTransDate
    {
        boolean ret;

        ret = _ctrl.modified();

        if (ret)
        {
            if (dfFirstFromDate && dfFirstToDate)
            {
                dfFirstFromDate.value(this.calcFromDate(firstOverdueJournalSettings));
                dfFirstToDate.value(this.calcToDate(firstOverdueJournalSettings));
            }
            if (dfSecondFromDate && dfSecondToDate)
            {
                dfSecondFromDate.value(this.calcFromDate(secondOverdueJournalSettings));
                dfSecondToDate.value(this.calcToDate(secondOverdueJournalSettings));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        transDate  = dfTransDate.value();
        description = dfDescription.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesLists</Name>
				<Source><![CDATA[
    protected void initLinesLists()
    {
        turnLinesList = new RecordSortedList(tableNum(VendOverdueCITPITTurnJournalLine_W));
        turnLinesList.sortOrder(
            fieldNum(VendOverdueCITPITTurnJournalLine_W, JournalId),
            fieldNum(VendOverdueCITPITTurnJournalLine_W, SettingRecId),
            fieldNum(VendOverdueCITPITTurnJournalLine_W, TransRefRecId),
            fieldNum(VendOverdueCITPITTurnJournalLine_W, DueDate));

        debtLinesList = new RecordSortedList(tableNum(VendOverdueCITPITDebtJournalLine_W));
        debtLinesList.sortOrder(
            fieldNum(VendOverdueCITPITDebtJournalLine_W, JournalId),
            fieldNum(VendOverdueCITPITDebtJournalLine_W, SettingRecId),
            fieldNum(VendOverdueCITPITDebtJournalLine_W, TransRefRecId),
            fieldNum(VendOverdueCITPITDebtJournalLine_W, DueDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOverdueTurnJournalLine</Name>
				<Source><![CDATA[
    protected OverdueTurnJournalLine_W initOverdueTurnJournalLine(OverdueDebtJournalLine_W _previousDebtLine, OverdueDebtJournalLine_W _currentDebtLine)
    {
        OverdueTurnJournalLine_W    newLine, lastLine;

        newLine     = super(_previousDebtLine, _currentDebtLine);

        lastLine    = this.overdueTurnJournalLine();
        select firstonly Exclude from lastLine
            order by Exclude
            where   lastLine.TransRefRecId  == newLine.TransRefRecId;

        newLine.Exclude    = lastLine.Exclude;

        return newLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDateFieldId</Name>
				<Source><![CDATA[
    protected FieldId invoiceDateFieldId()
    {
        return fieldNum(VendTrans, TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceFieldId</Name>
				<Source><![CDATA[
    protected FieldId invoiceFieldId()
    {
        return fieldNum(VendTrans, Invoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalType</Name>
				<Source><![CDATA[
    protected OverdueJournalType_W journalType()
    {
        return OverdueJournalType_W::VendCITPITJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateLine</Name>
				<Source><![CDATA[
    protected boolean mustCreateLine(OverdueTurnJournalLine_W  _overdueTurnJournalLine)
    {
        return _overdueTurnJournalLine.OverdueAmountCur || _overdueTurnJournalLine.OverdueAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        firstOverdueJournalSettings     = OverdueJournalSettings_W::findJournalType(this.journalType());
        secondOverdueJournalSettings    = OverdueJournalSettings_W::findJournalType(this.journalType(), firstOverdueJournalSettings.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalId</Name>
				<Source><![CDATA[
    protected OverdueJournalId_W newJournalId()
    {
        return NumberSeq::newGetNum(VendParameters::numRefOverdueCITPITJournalId_W()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>overdueDebtJournalLine</Name>
				<Source><![CDATA[
    protected OverdueDebtJournalLine_W overdueDebtJournalLine()
    {
        VendOverdueCITPITDebtJournalLine_W   ret;
        return ret.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>overdueJournalTable</Name>
				<Source><![CDATA[
    protected OverdueJournalTable_W overdueJournalTable()
    {
        VendOverdueCITPITJournalTable_W    ret;
        return ret.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>overdueTurnJournalLine</Name>
				<Source><![CDATA[
    protected OverdueTurnJournalLine_W overdueTurnJournalLine()
    {
        VendOverdueCITPITTurnJournalLine_W   ret;
        return ret.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        if (overdueJournalTable)
        {
            VendOverdueCalcCITPITLineDetail_W::runOnServer(overdueJournalTable.JournalId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateSettlementFieldId</Name>
				<Source><![CDATA[
    protected TableId transDateSettlementFieldId()
    {
        return fieldNum(VendSettlement, TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTypeFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return field id of <c>TransType</c> field in <c>CustVendTrans</c> table.
    /// </summary>
    /// <returns>
    /// Field id of <c>TransType</c> field.
    /// </returns>
    protected FieldId transTypeFieldId()
    {
        return fieldNum(VendTrans, TransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether it is all right to continue.
    /// </summary>
    /// <param name="_calledFrom">
    ///    Identifies the object from which this method is called. Default value is null.
    /// </param>
    /// <returns>
    ///    true if it is all right to continue; otherwise false.
    /// </returns>
    public boolean validate(Object _calledFrom   = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (!transDate)
        {
            ret = checkFailed("@SYS24455");
        }

        if (previousJournalTable.TransDate >= transDate)
        {
            ret = checkFailed("@SYS4003974");
        }

        if (!VendParameters::find().OverdueCITPITDimensionAttribute_W)
        {
            ret = checkFailed("@SYS4003998");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>