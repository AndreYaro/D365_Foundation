<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransGeneralJournalAccountEntryGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates the linkage record between <c>TaxTrans</c> and <c>GeneralJournalAccountEntry</c>.
/// </summary>
public class TaxTransGeneralJournalAccountEntryGenerator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateTaxTransGeneralJournalAccEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates <c>TaxTransGeneralJournalAccountEntry</c> records for the specified source document.
    /// </summary>
    /// <param name="_sourceDocumentHeaderId">
    /// The identity of the <c>SourceDocumentHeader</c> record for the tax transaction.
    /// </param>
    /// <remarks>
    /// Use this method to create the <c>TaxTransGeneralJournalAccountEntry</c> record when the subledger journal entries for
    /// the tax source document has been transferred to the ledger prior to the tax transaction records are created.
    /// </remarks>
    public static void generateTaxTransGeneralJournalAccEntry(SourceDocumentHeaderRecId _sourceDocumentHeaderId)
    {
        SubledgerJournalEntry               localSubledgerJournalEntry;
        AccountingEvent                     localAccountingEvent;
        SubledgerJournalAccountEntry        localSubledgerJournalAccountEntry;
        TaxTransGeneralJournalAccountEntry  localTaxTransGeneralJournalAccountEntry;

        if (_sourceDocumentHeaderId)
        {
            while select TransferId, Ledger from localSubledgerJournalEntry
                group by TransferId, Ledger
                where localSubledgerJournalEntry.Status == SubledgerJournalEntryStatus::Transferred &&
                    localSubledgerJournalEntry.TransferId != 0
                join RecId from localAccountingEvent
                    where localSubledgerJournalEntry.AccountingEvent == localAccountingEvent.RecId &&
                        localAccountingEvent.State == AccountingEventState::Complete &&
                        localAccountingEvent.SourceDocumentHeader == _sourceDocumentHeaderId
                // skip those that have already been processed. This can happen when a document has multiple submissions
                // (e.g. purch req with multiple lines that are submitted independently
                join RecId from localSubledgerJournalAccountEntry
                    where localSubledgerJournalAccountEntry.SubledgerJournalEntry == localSubledgerJournalEntry.RecId &&
                        localSubledgerJournalAccountEntry.GeneralJournalAccountEntry != 0 
                        && (localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::Tax
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::CustRevenue       // Revenue FTI
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::VendInvoiceDisc   // Vendor invoice total discount
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchConsump      // Expenditure for product (stocked items)
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchDisc         // Vendor invoice line discount
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchAdvance      // Prepayment invoice
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchExpense      // Expenditure for expense (categories)
                            // Posting types likely used for ledger charge
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::CustInvoiceDisc
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesDisc
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesFreight
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesFee
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesPostage
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::Rebate
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchCash
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchFreight
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchFee
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchPostage
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchMarkupFreight
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchMarkupCustoms
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchMarkupInsurance
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::PurchCharge
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::MCRBrokerFee
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::LedgerJournal
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjCost
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjWIPCost
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjWIPCostvalue
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::IntercompanyCost
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::IntercompanyRevenue
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjStatusAccountItem
                            || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::ProjPayrollAllocation
                            // <GIN>
                            || (TaxParameters::checkTaxParameters_IN()
                                && (localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::VAT_IN
                                    || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::SalesTax_IN
                                    || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::Excise_IN
                                    || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::ServiceTax_IN
                                    || localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::Customs_IN)))
                            // </GIN>
                        notexists join localTaxTransGeneralJournalAccountEntry
                    where localTaxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == localSubledgerJournalAccountEntry.GeneralJournalAccountEntry

            {
                // Establish the relationship between the TaxTrans and the GeneralJournalAccountEntry because
                // The taxTrans's source document has been processed and the amounts have been posted/transferred
                // to the ledger, but the relationship between the TaxTrans and the GeneralJournalAccountEntry
                // has not been established yet.
                TaxTransGeneralJournalAccountEntry::create(localSubledgerJournalEntry.TransferId, localSubledgerJournalEntry.Ledger);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>