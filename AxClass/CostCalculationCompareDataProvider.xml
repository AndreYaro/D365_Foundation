<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostCalculationCompareDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostCalculationCompareDataProvider</c> class provides a temporary buffer for comparison of cost calculations.
/// </summary>
public class CostCalculationCompareDataProvider
{
    CostTransRefId  costRollupId;
    ItemId          itemId;
    InventDimId     inventDimId;
    InventTransId   inventTransId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostCalculationCompareDataProvider construct()
    {
        return new CostCalculationCompareDataProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>CostCalculationCompareDataProvider</c> class from a costing transaction reference ID.
    /// </summary>
    /// <param name = "_costCompareArgs">Costing comparison parameters.</param>
    public void init(CostRollupCompareArgs _costCompareArgs)
    {
        this.setCostRollupId(_costCompareArgs.parmCostRollupId());
        this.setItemId(_costCompareArgs.parmItemId());
        this.setInventDimId(_costCompareArgs.parmInventDimId());
        this.setInventTransId(_costCompareArgs.parmInventTransId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostRollupId</Name>
				<Source><![CDATA[
    public void setCostRollupId(CostTransRefId _costRollupId)
    {
        costRollupId = _costRollupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemId</Name>
				<Source><![CDATA[
    public void setItemId(ItemId _itemId)
    {
        itemId = _itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransId</Name>
				<Source><![CDATA[
    public void setInventTransId(InventTransId _inventTransId)
    {
        inventTransId = _inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _inventDimId)
    {
        inventDimId = _inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a set comparison of two sets of records from the <c>CostCalculationCompareView</c> view for two cost calculations.
    /// </summary>
    /// <remarks>
    /// For estimated and realized cost, the method loads data based on the provided <c>ProdId</c>.
    /// For active cost it looks up the <c>PriceCalcId</c> based on the passed values of <c>ItemId</c> and <c>InventDimId</c>.
    /// If current active cost is not a calculated cost the method will inject/join a single record at level 0.
    ///
    /// The data is loaded in the Multilevel format - meaning that level 0 plus all records
    /// from subsequent levels that are not partial sums are loaded.
    /// </remarks>
    /// <returns>A <c>CostCalculationCompareTmp</c> cursor.</returns>
    public CostCalculationCompareTmp loadData()
    {
        CostCalculationCompareTmp     calculationCompareData;
        CostEstimatedRealizedFullView costEstimatedRealizedFullView;

        var activePrice = this.findPriceActiveAtTheTimeOfProductionEnding();
        
        select firstonly LotSizeEstimated, LotSizeRealized from costEstimatedRealizedFullView
            where costEstimatedRealizedFullView.CostRollupId == costRollupId
                && costEstimatedRealizedFullView.CostRollupSourceId == itemId
                && costEstimatedRealizedFullView.InventTransId == inventTransId
                && costEstimatedRealizedFullView.CalcType == ItemCalcType::Production;

        if (costEstimatedRealizedFullView)
        {
            var realizedQty = costEstimatedRealizedFullView.LotSizeRealized;
            var estimatedQty = costEstimatedRealizedFullView.LotSizeEstimated;

            ttsbegin;
            this.insertDataFromLeftOuterJoin(calculationCompareData, activePrice);
            if (activePrice)
            {
                if (activePrice.PriceCalcId)
                {
                    this.insertDataFromRightOuterJoin(calculationCompareData, activePrice);
                }
                else
                {
                    this.insertManuallyCreatedPrice(1, calculationCompareData, activePrice);
                }
            }

            this.updateActivePriceCost(calculationCompareData, realizedQty);
            this.updateUnitValuesAndDifferenceFields(calculationCompareData, realizedQty, estimatedQty);

            ttscommit;
        }

        return calculationCompareData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPriceActiveAtTheTimeOfProductionEnding</Name>
				<Source><![CDATA[
    private InventItemPrice findPriceActiveAtTheTimeOfProductionEnding()
    {
        var prodTable = ProdTable::findTransId(inventTransId);
        
		var activePrice = InventItemPrice::findCurrent(itemId, CostingVersionPriceType::Cost, inventDimId, prodTable.RealDate);
        if (!activePrice)
        {
            activePrice = InventItemPrice::findCurrent(itemId, CostingVersionPriceType::Cost, inventDimId);
        }

        return activePrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataFromLeftOuterJoin</Name>
				<Source><![CDATA[
    private void insertDataFromLeftOuterJoin(CostCalculationCompareTmp _calculationCompareData, InventItemPrice _price)
    {
        CostCalculationCompareView    costCalculation1;
        CostCalculationCompareView    costCalculation2;
        CostCalculationCompareView    costCalculation3;

        insert_recordset _calculationCompareData (Level, CostGroupType, CostGroupId, Resource, UnitId, Type, CostEstimatedValue, CostRealizedValue, CostActiveValue, LotSizeActive)
        select Level, CostGroupType, CostGroupId, Resource, UnitId, Type, Cost from costCalculation1
            where costCalculation1.CostRollupId == costRollupId
            && costCalculation1.CostRollupSourceId == itemId
            && costCalculation1.InventTransId == inventTransId
            && costCalculation1.State == int2Str(enum2int(CostCalculationState::Estimated))
            && costCalculation1.IsSplit == false
            outer join Cost from costCalculation2
                where costCalculation2.CostRollupId == costRollupId
                    && costCalculation2.CostRollupSourceId == itemId
                    && costCalculation2.InventTransId == inventTransId
                    && costCalculation2.State == int2Str(enum2int(CostCalculationState::Realized))
                    && costCalculation2.IsSplit == false
                    && costCalculation1.Level == costCalculation2.Level
                    && costCalculation1.CostGroupId == costCalculation2.CostGroupId
                    && costCalculation1.Resource == costCalculation2.Resource
                    && costCalculation1.Type == costCalculation2.Type
            outer join Cost, LotSize from costCalculation3
                where costCalculation3.CostRollupId == _price.PriceCalcId
                    && costCalculation3.State == int2Str(enum2int(CostCalculationState::Active))
                    && costCalculation3.IsSplit == false
                    && costCalculation1.Level == costCalculation3.Level
                    && costCalculation1.CostGroupId == costCalculation3.CostGroupId
                    && costCalculation1.Resource == costCalculation3.Resource
                    && costCalculation1.Type == costCalculation3.Type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataFromRightOuterJoin</Name>
				<Source><![CDATA[
    private void insertDataFromRightOuterJoin(CostCalculationCompareTmp _calculationCompareData, InventItemPrice _price)
    {
        CostCalculationCompareView    costCalculation1;
        CostCalculationCompareView    costCalculation2;

        insert_recordset _calculationCompareData (Level, CostGroupType, CostGroupId, Resource, UnitId, Type, CostActiveValue, LotSizeActive)
            select Level, CostGroupType, CostGroupId, Resource, UnitId, Type, Cost, LotSize from costCalculation1
                where costCalculation1.CostRollupId == _price.PriceCalcId
                      && costCalculation1.CostRollupSourceId == itemId
                      && (costCalculation1.IsSplit == false)
                notexists join costCalculation2
                    where costCalculation2.CostRollupId == costRollupId
                        && costCalculation2.CostRollupSourceId == itemId
                        && (costCalculation2.IsSplit == false || costCalculation2.Level == 0)
                        && costCalculation1.Level == costCalculation2.Level
                        && costCalculation1.CostGroupId == costCalculation2.CostGroupId
                        && costCalculation1.Resource == costCalculation2.Resource
                        && costCalculation1.Type == costCalculation2.Type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertManuallyCreatedPrice</Name>
				<Source><![CDATA[
    private void insertManuallyCreatedPrice(
        Level                       _level,
        CostCalculationCompareTmp   _calculationCompareData,
        InventItemPrice             _price)
    {
        select firstonly forupdate _calculationCompareData
                where _calculationCompareData.Level == _level
                    && _calculationCompareData.CostGroupId == _price.costGroupId()
                    && _calculationCompareData.Resource == _price.ItemId;

        // Always include markup in the unit cost to match the way BomCalcTrans calculates unit cost
        _price.PriceAllocateMarkup = true;

        if (_calculationCompareData)
        {
            _calculationCompareData.QuantityActiveValue = _price.PriceUnit;
            _calculationCompareData.CostActiveValue = _price.price();
            _calculationCompareData.LotSizeActive = _price.priceUnit();
            _calculationCompareData.update();
        }
        else
        {
            _calculationCompareData.Level = _level;
            _calculationCompareData.Resource = _price.ItemId;
            _calculationCompareData.CostGroupType = CostGroupType::DirectMaterials;
            _calculationCompareData.CostGroupId = _price.costGroupId();
            _calculationCompareData.UnitId = _price.UnitID;
            _calculationCompareData.Type = ItemCalcType::Item;
            _calculationCompareData.QuantityEstimatedValue = 0;
            _calculationCompareData.QuantityRealizedValue = 0;
            _calculationCompareData.QuantityActiveValue = _price.PriceUnit;
            _calculationCompareData.CostEstimatedValue = 0;
            _calculationCompareData.CostRealizedValue = 0;
            _calculationCompareData.CostActiveValue = _price.price();
            _calculationCompareData.LotSizeActive = _price.priceUnit();
            _calculationCompareData.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUnitValuesAndDifferenceFields</Name>
				<Source><![CDATA[
    private void updateUnitValuesAndDifferenceFields(
        CostCalculationCompareTmp _calculationCompareData,
        Qty                       _realizedQty,
        Qty                       _estimatedQty)
    {
        if (_realizedQty == 0)
        {
            update_recordset _calculationCompareData
            setting
                CostEstimatedUnitValue              = _calculationCompareData.CostEstimatedValue / _estimatedQty,
                CostRealizedUnitValue               = 0,
                CostDifferenceEstimatedRealized     = _calculationCompareData.CostRealizedValue - _calculationCompareData.CostEstimatedValue,
                CostDifferenceActiveRealized        = _calculationCompareData.CostRealizedValue - _calculationCompareData.CostActiveValue,
                CostDifferenceActiveEstimated       = _calculationCompareData.CostEstimatedValue - _calculationCompareData.CostActiveValue,
                CostDifferenceEstimatedRealizedUnit = _calculationCompareData.CostRealizedUnitValue - _calculationCompareData.CostEstimatedUnitValue,
                CostDifferenceActiveRealizedUnit    = _calculationCompareData.CostRealizedUnitValue - _calculationCompareData.CostActiveUnitValue,
                CostDifferenceActiveEstimatedUnit   = _calculationCompareData.CostEstimatedUnitValue - _calculationCompareData.CostActiveUnitValue;
        }
        else
        {
            update_recordset _calculationCompareData
            setting
                CostEstimatedUnitValue              = _calculationCompareData.CostEstimatedValue / _estimatedQty,
                CostRealizedUnitValue               = _calculationCompareData.CostRealizedValue / _realizedQty,
                CostDifferenceEstimatedRealized     = _calculationCompareData.CostRealizedValue - _calculationCompareData.CostEstimatedValue,
                CostDifferenceActiveRealized        = _calculationCompareData.CostRealizedValue - _calculationCompareData.CostActiveValue,
                CostDifferenceActiveEstimated       = _calculationCompareData.CostEstimatedValue - _calculationCompareData.CostActiveValue,
                CostDifferenceEstimatedRealizedUnit = _calculationCompareData.CostRealizedUnitValue - _calculationCompareData.CostEstimatedUnitValue,
                CostDifferenceActiveRealizedUnit    = _calculationCompareData.CostRealizedUnitValue - _calculationCompareData.CostActiveUnitValue,
                CostDifferenceActiveEstimatedUnit   = _calculationCompareData.CostEstimatedUnitValue - _calculationCompareData.CostActiveUnitValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActivePriceCost</Name>
				<Source><![CDATA[
    private void updateActivePriceCost(CostCalculationCompareTmp _calculationCompareData, Qty _realizedQty)
    {
        update_recordset _calculationCompareData
        setting
            CostActiveUnitValue = _calculationCompareData.CostActiveValue / _calculationCompareData.LotSizeActive,
            CostActiveValue = (_calculationCompareData.CostActiveValue / _calculationCompareData.LotSizeActive) * _realizedQty
        where _calculationCompareData.LotSizeActive != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>