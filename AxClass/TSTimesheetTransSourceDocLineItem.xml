<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSTimesheetTransSourceDocLineItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TsTimesheetTransSourceDocLineItem</c> class provides the information to handle the
/// distributions and sub-ledger journal account entries for a timesheet line.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_ProjectTimesheets), SourceDocumentLine_ProjectTimesheets::TimesheetTrans)]
public class TsTimesheetTransSourceDocLineItem extends SourceDocumentLineItem
                                               implements SourceDocumentLineItemITimesheets,
                                                          SourceDocumentLineItemIProjectTransDate,
                                                          SourceDocumentLineItemIAccDateUpdateable
{
    TSTimesheetTrans tsTimesheetTrans;
    TSTimesheetLine  tsTimesheetLine;
    ProjTransIdBase  projTransId;
    TSTimesheetTable tsTimesheetTable;
    ProjParameters   projParameters;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default dimension for the timesheet line.
    /// </summary>
    /// <returns>
    /// The default dimension value.
    /// </returns>
    protected DimensionDefault calculateDefaultDimension()
    {
        return tsTimesheetLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the legal entity for the line.
    /// </summary>
    /// <returns>
    /// The current company value.
    /// </returns>
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        SourceDocumentAmountMap sourceDocumentAmountMap = SourceDocumentAmountMap::construct();
        SourceDocumentAmount    sourceDocumentAmount;
        AmountCur               amountCur;

        amountCur = tsTimesheetTrans.CostPrice * tsTimesheetTrans.Hours;

        sourceDocumentAmount = SourceDocumentAmount::newFromParameters(this.parmSourceDocumentLine(),
                            amountCur,
                            MonetaryAmount::ExtendedPrice,
                            false);

        sourceDocumentAmountMap.insert(sourceDocumentAmount);

        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the accounting date can be updated when it lies in a closed period.
    /// </summary>
    /// <returns>
    /// true if the accounting date can be updated; otherwise, false.
    /// </returns>
    public boolean canUpdateAccountingDate()
    {
        return projParameters.AllowDateCorrection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SourceDocumentLineItem</c> class documents a business event.
    /// </summary>
    /// <returns>
    /// true if the <c>SourceDocumentLineItem</c> class documents a business event; otherwise, false.
    /// </returns>
    public BusinessEvent documentsBusinessEvent()
    {
        BusinessEvent       businessEvent;

        businessEvent = new BusinessEvent(enumNum(BusinessEvent_ProjectTimesheets), BusinessEvent_ProjectTimesheets::ProjectTimesheetPosting);

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsInterCompanyBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SourceDocumentLineItem</c> documents an intercompany business event.
    /// </summary>
    /// <returns>
    /// true if the <c>SourceDocumentLineItem</c> documents an intercompany business event; otherwise,
    /// false.
    /// </returns>
    public boolean documentsInterCompanyBusinessEvent()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance variables.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    ///    A source document line implementation table.
    /// </param>
    /// <param name="_additionalInformation">
    /// A map to hold buffers of pre initiliazed objects need by the framework to the source document.
    /// </param>
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        tsTimesheetTrans = _sourceDocumentLineImplementation;
        tsTimesheetTrans.reread();
        tsTimesheetLine  = tsTimesheetTrans.timesheetLine();
        tsTimesheetTable = TSTimesheetTable::find(tsTimesheetLine.TimesheetNbr);
        projParameters   = ProjParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        AccountingDistribution      accountingDistribution;
        AccountingDate              accountingDate;

        accountingDate = tsTimesheetTrans.TransDate;

        // If allowed to update accounting date, get the updated accounting date
        if (projParameters.AllowDateCorrection)
        {
            select firstonly AccountingDate from accountingDistribution
            where accountingDistribution.SourceDocumentLine == tsTimesheetTrans.SourceDocumentLine;

            tsTimesheetTable = TSTimesheetTable::find(tsTimesheetTrans.TimesheetNbr);

            // This method is run even when the timesheet is in pending status and we want to change the accounting date only when it is required.
            if (accountingDistribution.AccountingDate && tsTimesheetTable.ApprovalStatus == TSAppStatus::Approved)
            {
                accountingDate = accountingDistribution.AccountingDate;
            }
        }

        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBusinessEventDate</Name>
				<Source><![CDATA[
    public DocumentDate parmBusinessEventDate()
    {
        return tsTimesheetTrans.ProjTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributeAmountsToLegalEntities</Name>
				<Source><![CDATA[
    public boolean parmDistributeAmountsToLegalEntities()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectActivityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber parmProjectActivityNumber()
    {
        return tsTimesheetLine.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjectCategoryId()
    {
        return tsTimesheetLine.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectFundingSourceRecId</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId parmProjectFundingSourceRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectId</Name>
				<Source><![CDATA[
    public ProjId parmProjectId()
    {
        return tsTimesheetLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectItemSalesTaxGroup</Name>
				<Source><![CDATA[
    public ProjTaxItemGroup parmProjectItemSalesTaxGroup()
    {
        return tsTimesheetLine.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectLegalEntity</Name>
				<Source><![CDATA[
    public LegalEntityRecId parmProjectLegalEntity()
    {
        return CompanyInfo::findDataArea(tsTimesheetLine.ProjectDataAreaId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectLineProperty</Name>
				<Source><![CDATA[
    public ProjLinePropertyId parmProjectLineProperty()
    {
        return tsTimesheetLine.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceCategoryRecId</Name>
				<Source><![CDATA[
    public ResourceCategoryRecId parmProjectResourceCategoryRecId()
    {
        return ResourceFacade::getResourceCategory(this.parmProjectResourceRecId(), this.parmAccountingDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceRecId</Name>
				<Source><![CDATA[
    public ResourceRecId parmProjectResourceRecId()
    {
        return tsTimesheetLine.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesCurrencyCode</Name>
				<Source><![CDATA[
    public ProjSalesCurrencyCode parmProjectSalesCurrencyCode()
    {
        return tsTimesheetLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesPrice</Name>
				<Source><![CDATA[
    public SalesPrice parmProjectSalesPrice()
    {
        return tsTimesheetTrans.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesTaxGroup</Name>
				<Source><![CDATA[
    public ProjTaxGroup parmProjectSalesTaxGroup()
    {
        return tsTimesheetLine.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesUnit</Name>
				<Source><![CDATA[
    public SalesUnit parmProjectSalesUnit()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectTransactionId</Name>
				<Source><![CDATA[
    public ProjTransIdBase parmProjectTransactionId()
    {
        return tsTimesheetTrans.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTransDate</Name>
				<Source><![CDATA[
    public ProjTransDate parmProjTransDate()
    {
        return tsTimesheetTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    public Qty parmQuantity()
    {
        return tsTimesheetTrans.Hours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimesheetTrans</Name>
				<Source><![CDATA[
    public TSTimesheetTrans parmTimesheetTrans()
    {
        return tsTimesheetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode()
    {
        // Timesheet cost is always in accounting currency
        return Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectCostPrice</Name>
				<Source><![CDATA[
    public CostPrice parmProjectCostPrice()
    {
        return tsTimesheetTrans.CostPrice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>