<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetRetirementSumCalculation_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Asset retirement transaction summary calculation. Consumed by explorer and reports.
/// </summary>
class AssetRetirementSumCalculation_JP
{
    TransDate           fromDate;
    TransDate           toDate;
    AssetId             assetId;
    AssetBookId         assetBookId;
    AssetDocumentId_JP  documentId;
    RefRecId            documentEntryRecId;
    Query               searchQuery;
    boolean             isSearchRetired;
    boolean             onlyIncludeLiability;

    Query       calculationQuery;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildBasicQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the basic query.
    /// </summary>
    /// <returns>
    /// The basic query.
    /// </returns>
    protected Query buildBasicQuery()
    {
        Query                   query;
        QueryBuildDataSource    dataSource;
        QueryBuildDataSource    documentTransactiondataSource;
        QueryBuildDataSource    transactiondataSource;

        query = new Query();
        dataSource = query.addDataSource(tableNum(AssetTrans));
        dataSource.addSelectionField(fieldNum(AssetTrans, AmountMST), SelectionField::Sum);
        dataSource.addRange(fieldNum(AssetTrans, TransDate));
        dataSource.addRange(fieldNum(AssetTrans, AssetId));
        dataSource.addRange(fieldNum(AssetTrans, BookId));
        transactiondataSource = dataSource;

        dataSource = dataSource.addDataSource(tableNum(AssetDocumentTrans_JP));
        dataSource.addLink(fieldNum(AssetTrans, RecId), fieldNum(AssetDocumentTrans_JP, RefRecId));
        dataSource.addRange(fieldNum(AssetDocumentTrans_JP, RefTableId)).value(SysQuery::value(tableNum(AssetTrans)));
        dataSource.addRange(fieldNum(AssetDocumentTrans_JP, AssetDocumentEntry_JP));
        documentTransactiondataSource = dataSource;

        dataSource = dataSource.addDataSource(tableNum(AssetDocumentEntry_JP));
        dataSource.addLink(fieldNum(AssetDocumentTrans_JP, AssetDocumentEntry_JP), fieldNum(AssetDocumentEntry_JP, RecId));

        dataSource = dataSource.addDataSource(tableNum(AssetDocumentTable_JP));
        dataSource.addLink(fieldNum(AssetDocumentEntry_JP, AssetDocumentTable_JP), fieldNum(AssetDocumentTable_JP, RecId));
        dataSource.addRange(fieldNum(AssetDocumentTable_JP, DocumentId));
        dataSource.addGroupByField(fieldNum(AssetDocumentTable_JP, DocumentId));

        dataSource = dataSource.addDataSource(tableNum(AssetRetirementObligationTrans_JP));
        dataSource.addLink(fieldNum(AssetDocumentTrans_JP, RecId), fieldNum(AssetRetirementObligationTrans_JP, AssetDocumentTrans_JP), documentTransactiondataSource.name());
        dataSource.addGroupByField(fieldNum(AssetRetirementObligationTrans_JP, Type));
        if (onlyIncludeLiability)
        {
            //exclude depreciation
            dataSource.addRange(fieldNum(AssetRetirementObligationTrans_JP, Type)).value(SysQuery::range(AssetRetirementObligationResultType_JP::Aquisition, AssetRetirementObligationResultType_JP::Interest));
        }

        if (isSearchRetired)
        {
            dataSource = dataSource.addDataSource(tableNum(AssetBook));
            dataSource.addLink(fieldNum(AssetTrans, BookId), fieldNum(AssetBook, BookId), transactiondataSource.name());
            dataSource.addLink(fieldNum(AssetTrans, AssetId), fieldNum(AssetBook, AssetId), transactiondataSource.name());
            dataSource.addRange(fieldNum(AssetBook, DisposalDate));
            dataSource.addRange(fieldNum(AssetBook, Status)).value(SysQuery::range(AssetStatus::Sold, AssetStatus::Scrapped));
        }

        dataSource = dataSource.addDataSource(tableNum(TransactionReversalTrans));
        dataSource.joinMode(JoinMode::NoExistsJoin);
        dataSource.addLink(fieldNum(AssetDocumentTrans_JP, RecId), fieldNum(TransactionReversalTrans, RefRecId), transactiondataSource.name());
        dataSource.addRange(fieldNum(TransactionReversalTrans, RefTableId)).value(SysQuery::value(tableNum(AssetTrans)));
        dataSource.addRange(fieldNum(TransactionReversalTrans, Reversed)).value(SysQuery::value(NoYes::Yes));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does the calculation.
    /// </summary>
    /// <returns>
    /// The calculation result.
    /// </returns>
    public AssetRetirementSumCalcResultTmp_JP calculate()
    {
        QueryRun queryRun;
        AssetTrans                          assetTrans;
        AssetDocumentTable_JP               document;
        AssetRetirementObligationTrans_JP   retirementTransaction;
        AssetRetirementSumCalcResultTmp_JP  result;

        this.initializeQuery();

        queryRun = new QueryRun(calculationQuery);
        while (queryRun.next())
        {
            assetTrans = queryRun.get(tableNum(AssetTrans));
            document = queryRun.get(tableNum(AssetDocumentTable_JP));
            retirementTransaction = queryRun.get(tableNum(AssetRetirementObligationTrans_JP));

            result.clear();
            result.FromDate = fromDate;
            result.ToDate = toDate;
            result.DocumentId = document.DocumentId;
            result.Amount = assetTrans.AmountMST;
            result.Type = retirementTransaction.Type;
            result.insert();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the query.
    /// </summary>
    protected void initializeQuery()
    {
        int i;
        QueryBuildDataSource dataSource;

        calculationQuery = this.buildBasicQuery();

        if (fromDate || toDate)
        {
            calculationQuery.dataSourceTable(tableNum(AssetTrans)).findRange(fieldNum(AssetTrans, TransDate)).value(SysQuery::range(fromDate, toDate));
        }

        if (assetId)
        {
            calculationQuery.dataSourceTable(tableNum(AssetTrans)).findRange(fieldNum(AssetTrans, AssetId)).value(SysQuery::value(assetId));
        }

        if (assetBookId)
        {
            calculationQuery.dataSourceTable(tableNum(AssetTrans)).findRange(fieldNum(AssetTrans, BookId)).value(SysQuery::value(assetBookId));
        }

        if (documentId)
        {
            calculationQuery.dataSourceTable(tableNum(AssetDocumentTable_JP)).findRange(fieldNum(AssetDocumentTable_JP, DocumentId)).value(SysQuery::value(documentId));
        }

        if (documentEntryRecId)
        {
            calculationQuery.dataSourceTable(tableNum(AssetDocumentTrans_JP)).findRange(fieldNum(AssetDocumentTrans_JP, AssetDocumentEntry_JP)).value(SysQuery::value(documentEntryRecId));
        }

        if (isSearchRetired && toDate)
        {
            calculationQuery.dataSourceTable(tableNum(AssetTrans)).findRange(fieldNum(AssetTrans, TransDate)).value(SysQuery::range(datenull(), toDate));
            calculationQuery.dataSourceTable(tableNum(AssetBook)).findRange(fieldNum(AssetBook, DisposalDate)).value(SysQuery::range(fromDate, toDate));
        }

        if (searchQuery)
        {
            dataSource = calculationQuery.dataSourceTable(tableNum(AssetDocumentTable_JP));
            for (i = 1; i <= searchQuery.queryFilterCount(); i++)
            {
                calculationQuery.addQueryFilter(dataSource, searchQuery.queryFilter(i).field()).value(searchQuery.queryFilter(i).value());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetBookId</Name>
				<Source><![CDATA[
        public AssetBookId parmAssetBookId(AssetBookId _assetBookId = assetBookId)
    {
        assetBookId = _assetBookId;

        return assetBookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetId</Name>
				<Source><![CDATA[
        public AssetId parmAssetId(AssetId _assetId = assetId)
    {
        assetId = _assetId;

        return assetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentEntryRecId</Name>
				<Source><![CDATA[
        public RefRecId parmDocumentEntryRecId(RefRecId _documentEntryRecId = documentEntryRecId)
    {
        documentEntryRecId = _documentEntryRecId;

        return documentEntryRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentId</Name>
				<Source><![CDATA[
        public AssetDocumentId_JP parmDocumentId(AssetDocumentId_JP _documentId = documentId)
    {
        documentId = _documentId;

        return documentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
        public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSearchRetired</Name>
				<Source><![CDATA[
        public boolean parmIsSearchRetired(boolean _isSearchRetired = isSearchRetired)
    {
        isSearchRetired = _isSearchRetired;

        return isSearchRetired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyIncludeLiability</Name>
				<Source><![CDATA[
        public boolean parmOnlyIncludeLiability(boolean _onlyIncludeLiability = onlyIncludeLiability)
    {
        onlyIncludeLiability = _onlyIncludeLiability;

        return onlyIncludeLiability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchQuery</Name>
				<Source><![CDATA[
        public Query parmSearchQuery(Query _searchQuery = searchQuery)
    {
        searchQuery = _searchQuery;

        return searchQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
        public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>AssetRetirementSumCalculation_JP</c>.
    /// </summary>
    /// <returns>
    /// An instance of <c>AssetRetirementSumCalculation_JP</c>.
    /// </returns>
    public static AssetRetirementSumCalculation_JP construct()
    {
        AssetRetirementSumCalculation_JP sumCalculation;

        sumCalculation = new AssetRetirementSumCalculation_JP();

        return sumCalculation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>