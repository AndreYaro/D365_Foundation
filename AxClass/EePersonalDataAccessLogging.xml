<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EePersonalDataAccessLogging</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EePersonalDataAccessLogging
{
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hcmEmploymentFindPerson</Name>
				<Source><![CDATA[
    private static RefRecId hcmEmploymentFindPerson(RefRecId hcmEmploymentRecId)
    {
        HcmEmployment hcmEmployment;
        HcmWorker hcmWorker;

        select firstonly Person from hcmWorker
            join RecId from hcmEmployment
            where hcmEmployment.RecId == hcmEmploymentRecId
            && hcmEmployment.Worker == hcmWorker.RecId;

        return hcmWorker.Person;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hcmWorkerFindPerson</Name>
				<Source><![CDATA[
    private static RefRecId hcmWorkerFindPerson(RefRecId hcmWorkerRecId)
    {
        HcmWorker hcmWorker;

        select firstonly Person from hcmWorker where hcmWorker.RecId == hcmWorkerRecId;

        return hcmWorker.Person;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logReadAccess</Name>
				<Source><![CDATA[
    public static void logReadAccess(Common _record)
    {
        str recIdName = fieldStr(Common, RecId);

        if (!_record.isFieldDataRetrieved(recIdName))
        {
            return;
        }

        RefRecId refRecId;
        EeReadDataBaseLog readDataBaseLog;

        readDataBaseLog.RefTableId = _record.TableId;
        readDataBaseLog.LogRecId = _record.RecId;

        switch (_record.TableId)
        {
            case tableNum(ContactPerson):
                if (!_record.isFieldDataRetrieved(fieldStr(ContactPerson, Party)))
                {
                    return;
                }
                readDataBaseLog.Person = _record.getFieldValue(fieldStr(ContactPerson, Party));
                break;

            case tableNum(DirPerson):
                if (!_record.isFieldDataRetrieved(fieldStr(DirPerson, RecId)))
                {
                    return;
                }
                readDataBaseLog.Person = _record.getFieldValue(fieldStr(DirPerson, RecId));
                break;

            case tableNum(HcmEmployment):
                if (!_record.isFieldDataRetrieved(fieldStr(HcmEmployment, Worker)))
                {
                    return;
                }
                refRecId = _record.getFieldValue(fieldStr(HcmEmployment, Worker));
                readDataBaseLog.Person = EePersonalDataAccessLogging::hcmWorkerFindPerson(refRecId);
                break;

            case tableNum(HcmEmploymentContractor):
                if (!_record.isFieldDataRetrieved(fieldStr(HcmEmploymentContractor, Employment)))
                {
                    return;
                }
                refRecId = _record.getFieldValue(fieldStr(HcmEmploymentContractor, Employment));
                readDataBaseLog.Person = EePersonalDataAccessLogging::hcmEmploymentFindPerson(refRecId);
                break;

            case tableNum(HcmEmploymentDetail):
                if (!_record.isFieldDataRetrieved(fieldStr(HcmEmploymentDetail, Employment)))
                {
                    return;
                }
                refRecId = _record.getFieldValue(fieldStr(HcmEmploymentDetail, Employment));
                readDataBaseLog.Person = EePersonalDataAccessLogging::hcmEmploymentFindPerson(refRecId);
                break;

            case tableNum(HcmEmploymentEmployee):
                if (!_record.isFieldDataRetrieved(fieldStr(HcmEmploymentEmployee, Employment)))
                {
                    return;
                }
                refRecId = _record.getFieldValue(fieldStr(HcmEmploymentEmployee, Employment));
                readDataBaseLog.Person = EePersonalDataAccessLogging::hcmEmploymentFindPerson(refRecId);
                break;

            case tableNum(HcmEmploymentTerm):
                if (!_record.isFieldDataRetrieved(fieldStr(HcmEmploymentTerm, Employment)))
                {
                    return;
                }
                refRecId = _record.getFieldValue(fieldStr(HcmEmploymentTerm, Employment));
                readDataBaseLog.Person = EePersonalDataAccessLogging::hcmEmploymentFindPerson(refRecId);
                break;

            case tableNum(HcmEmploymentVacation):
                if (!_record.isFieldDataRetrieved(fieldStr(HcmEmploymentVacation, Employment)))
                {
                    return;
                }
                refRecId = _record.getFieldValue(fieldStr(HcmEmploymentVacation, Employment));
                readDataBaseLog.Person = EePersonalDataAccessLogging::hcmEmploymentFindPerson(refRecId);
                break;

            case tableNum(HcmPersonAccommodation):
                if (!_record.isFieldDataRetrieved(fieldStr(HcmPersonAccommodation, Person)))
                {
                    return;
                }
                readDataBaseLog.Person = _record.getFieldValue(fieldStr(HcmPersonAccommodation, Person));
                break;

            case tableNum(HcmPersonDetails):
                if (!_record.isFieldDataRetrieved(fieldStr(HcmPersonDetails, Person)))
                {
                    return;
                }
                readDataBaseLog.Person = _record.getFieldValue(fieldStr(HcmPersonDetails, Person));
                break;

            case tableNum(HcmPersonEducation):
                if (!_record.isFieldDataRetrieved(fieldStr(HcmPersonEducation, Person)))
                {
                    return;
                }
                readDataBaseLog.Person = _record.getFieldValue(fieldStr(HcmPersonEducation, Person));
                break;

            case tableNum(HcmPersonIdentificationNumber):
                if (!_record.isFieldDataRetrieved(fieldStr(HcmPersonIdentificationNumber, Person)))
                {
                    return;
                }
                readDataBaseLog.Person = _record.getFieldValue(fieldStr(HcmPersonIdentificationNumber, Person));
                break;

            case tableNum(HcmPersonPrivateDetails):
                if (!_record.isFieldDataRetrieved(fieldStr(HcmPersonPrivateDetails, Person)))
                {
                    return;
                }
                readDataBaseLog.Person = _record.getFieldValue(fieldStr(HcmPersonPrivateDetails, Person));
                break;
            
            case tableNum(HcmPersonPrivateCitizenshipDetails):
                if (!_record.isFieldDataRetrieved(fieldStr(HcmPersonPrivateCitizenshipDetails, Person)))
                {
                    return;
                }
                readDataBaseLog.Person = _record.getFieldValue(fieldStr(HcmPersonPrivateCitizenshipDetails, Person));
                break;
            
            case tableNum(HcmPersonProfessionalExperience):
                if (!_record.isFieldDataRetrieved(fieldStr(HcmPersonProfessionalExperience, Person)))
                {
                    return;
                }
                readDataBaseLog.Person = _record.getFieldValue(fieldStr(HcmPersonProfessionalExperience, Person));
                break;

            case tableNum(HcmWorkerBankAccount):
                if (!_record.isFieldDataRetrieved(fieldStr(HcmWorkerBankAccount, Worker)))
                {
                    return;
                }
                refRecId = _record.getFieldValue(fieldStr(HcmWorkerBankAccount, Worker));
                readDataBaseLog.Person = EePersonalDataAccessLogging::hcmWorkerFindPerson(refRecId);
                break;

            case tableNum(HcmWorkerEnrolledBenefit):
                if (!_record.isFieldDataRetrieved(fieldStr(HcmWorkerEnrolledBenefit, Worker)))
                {
                    return;
                }
                refRecId = _record.getFieldValue(fieldStr(HcmWorkerEnrolledBenefit, Worker));
                readDataBaseLog.Person = EePersonalDataAccessLogging::hcmWorkerFindPerson(refRecId);
                break;

            case tableNum(PayrollEarningStatement):
                if (!_record.isFieldDataRetrieved(fieldStr(PayrollEarningStatement, Worker)))
                {
                    return;
                }
                refRecId = _record.getFieldValue(fieldStr(PayrollEarningStatement, Worker));
                readDataBaseLog.Person = EePersonalDataAccessLogging::hcmWorkerFindPerson(refRecId);
                break;

            default:
                return;
        }

        readDataBaseLog.LogMap::setDataWithIncludeBaseTables(_record);
        readDataBaseLog.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUserRoleChange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Logs users granted and revoked security role access.
    /// </summary>
    /// <param name="_securityRole">
    ///     A reference record ID that defines the security role.
    /// </param>
    /// <param name="_omInternalOrganization">
    ///     A reference record ID that defines the legal entity.
    /// </param>
    /// <param name="_userId">
    ///     The user.
    /// </param>
    /// <param name="_addRemove">
    ///     add if user is granted permission; delete if user is revoked permission.
    /// </param>   
    [SubscribesTo(formStr(SysSecRoleAssignOM), delegateStr(SysSecRoleAssignOM, userRoleChange))]
    public static void logUserRoleChange(
        RefRecId _securityRole,
        RefRecId _omInternalOrganization,
        UserId _userId,
        AddRemove _addRemove)
    {
        unchecked(Uncheck::TableSecurityPermission)
        {
            CompanyInfo companyInfo;
            EeUserRoleChangeLog log;
            boolean doInsert;
            int addCount;
            int removeCount;

            if (_omInternalOrganization == 0)
            {
                if (SysCountryRegionCode::isAnyLegalEntityInCountryRegion(#ISOEE))
                {
                    doInsert = true;
                }
            }
            else
            {
                select firstOnly DataArea, RecId
                    from companyInfo
                    where companyInfo.Recid == _omInternalOrganization;

                if (companyInfo.RecId && SysCountryRegionCode::isLegalEntityInCountryRegion([#ISOEE], companyInfo.DataArea))
                {
                    doInsert = true;
                }
            }

            if (doInsert)
            {
                //When we grant organizations, we have to turn off access to all
                //organizations.  The application does this implicitly, but the
                //log will do it explictly.
                if (_omInternalOrganization && _addRemove == AddRemove::Add)
                {
                    select firstOnly AddRemove, RecId
                        from log
                        order by log.recId desc
                        where log.SecurityRole == _securityRole
                        && log.OMInternalOrganization == 0
                        && log.UserId == _userId;

                    if (log.recid && log.AddRemove == AddRemove::Add)
                    {
                        log.clear();
                        log.SecurityRole = _securityRole;
                        log.omInternalOrganization = 0;
                        log.UserId = _userId;
                        log.AddRemove = AddRemove::Remove;
                        log.ChangedBy = curUserId();
                        log.insert();
                    }
                }

                log.clear();
                log.SecurityRole = _securityRole;
                log.omInternalOrganization = _omInternalOrganization;
                log.UserId = _userId;
                log.AddRemove = _addRemove;
                log.ChangedBy = curUserId();
                log.insert();

                //When we revoke access to the last organization, they have implicit
                //access to all organizations.  The log will do this explictly.
                if (_omInternalOrganization && _addRemove == AddRemove::Remove)
                {
                    while select AddRemove, RecId
                        from log
                        order by log.recId desc
                        where log.SecurityRole == _securityRole
                        && log.OMInternalOrganization != 0
                        && log.UserId == _userId
                    {
                        if (log.AddRemove == AddRemove::Add)
                        {
                            addCount++;
                        }
                        else
                        {
                            removeCount++;
                        }
                    }

                    if (addCount == removeCount)
                    {
                        log.clear();
                        log.SecurityRole = _securityRole;
                        log.omInternalOrganization = 0;
                        log.UserId = _userId;
                        log.AddRemove = AddRemove::Add;
                        log.ChangedBy = curUserId();
                        log.insert();
                    }
                }

                EePersonalDataAccessLogging::logSecurityRightsChange(_securityRole, _userId, _addRemove, _omInternalOrganization);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPersonalDataAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log personal data record access.
    /// </summary>
    /// <param name = "_sender">
    /// The record which was loaded.
    /// </param>
    [PostHandlerFor(tablestr(DirPerson), tableMethodStr(DirPerson, postLoad)),
    PostHandlerFor(tablestr(ContactPerson), tableMethodStr(ContactPerson, postLoad)),
    PostHandlerFor(tablestr(HcmEmployment), tableMethodStr(HcmEmployment, postLoad)),
    PostHandlerFor(tablestr(HcmEmploymentContractor), tableMethodStr(HcmEmploymentContractor, postLoad)),
    PostHandlerFor(tablestr(HcmEmploymentDetail), tableMethodStr(HcmEmploymentDetail, postLoad)),
    PostHandlerFor(tablestr(HcmEmploymentEmployee), tableMethodStr(HcmEmploymentEmployee, postLoad)),
    PostHandlerFor(tablestr(HcmEmploymentTerm), tableMethodStr(HcmEmploymentTerm, postLoad)),
    PostHandlerFor(tablestr(HcmEmploymentVacation), tableMethodStr(HcmEmploymentVacation, postLoad)),
    PostHandlerFor(tablestr(HcmPersonAccommodation), tableMethodStr(HcmPersonAccommodation, postLoad)),
    PostHandlerFor(tablestr(HcmPersonDetails), tableMethodStr(HcmPersonDetails, postLoad)),
    PostHandlerFor(tablestr(HcmPersonEducation), tableMethodStr(HcmPersonEducation, postLoad)),
    PostHandlerFor(tablestr(HcmPersonIdentificationNumber), tableMethodStr(HcmPersonIdentificationNumber, postLoad)),
    PostHandlerFor(tablestr(HcmPersonPrivateDetails), tableMethodStr(HcmPersonPrivateDetails, postLoad)),
    PostHandlerFor(tablestr(HcmPersonPrivateCitizenshipDetails), tableMethodStr(HcmPersonPrivateCitizenshipDetails, postLoad)),
    PostHandlerFor(tablestr(HcmPersonProfessionalExperience), tableMethodStr(HcmPersonProfessionalExperience, postLoad)),
    PostHandlerFor(tablestr(HcmWorkerBankAccount), tableMethodStr(HcmWorkerBankAccount, postLoad)),
    PostHandlerFor(tablestr(PayrollEarningStatement), tableMethodStr(PayrollEarningStatement, postLoad)),
    PostHandlerFor(tablestr(HcmWorkerEnrolledBenefit), tableMethodStr(HcmWorkerEnrolledBenefit, postLoad)),

    PostHandlerFor(tablestr(DirPerson), tableMethodStr(DirPerson, postCacheLoad)),
    PostHandlerFor(tablestr(ContactPerson), tableMethodStr(ContactPerson, postCacheLoad)),
    PostHandlerFor(tablestr(HcmEmployment), tableMethodStr(HcmEmployment, postCacheLoad)),
    PostHandlerFor(tablestr(HcmEmploymentContractor), tableMethodStr(HcmEmploymentContractor, postCacheLoad)),
    PostHandlerFor(tablestr(HcmEmploymentDetail), tableMethodStr(HcmEmploymentDetail, postCacheLoad)),
    PostHandlerFor(tablestr(HcmEmploymentEmployee), tableMethodStr(HcmEmploymentEmployee, postCacheLoad)),
    PostHandlerFor(tablestr(HcmEmploymentTerm), tableMethodStr(HcmEmploymentTerm, postCacheLoad)),
    PostHandlerFor(tablestr(HcmEmploymentVacation), tableMethodStr(HcmEmploymentVacation, postCacheLoad)),
    PostHandlerFor(tablestr(HcmPersonAccommodation), tableMethodStr(HcmPersonAccommodation, postCacheLoad)),
    PostHandlerFor(tablestr(HcmPersonDetails), tableMethodStr(HcmPersonDetails, postCacheLoad)),
    PostHandlerFor(tablestr(HcmPersonEducation), tableMethodStr(HcmPersonEducation, postCacheLoad)),
    PostHandlerFor(tablestr(HcmPersonIdentificationNumber), tableMethodStr(HcmPersonIdentificationNumber, postCacheLoad)),
    PostHandlerFor(tablestr(HcmPersonPrivateDetails), tableMethodStr(HcmPersonPrivateDetails, postCacheLoad)),
    PostHandlerFor(tablestr(HcmPersonPrivateCitizenshipDetails), tableMethodStr(HcmPersonPrivateCitizenshipDetails, postCacheLoad)),
    PostHandlerFor(tablestr(HcmPersonProfessionalExperience), tableMethodStr(HcmPersonProfessionalExperience, postCacheLoad)),
    PostHandlerFor(tablestr(HcmWorkerBankAccount), tableMethodStr(HcmWorkerBankAccount, postCacheLoad)),
    PostHandlerFor(tablestr(PayrollEarningStatement), tableMethodStr(PayrollEarningStatement, postCacheLoad)),
    PostHandlerFor(tablestr(HcmWorkerEnrolledBenefit), tableMethodStr(HcmWorkerEnrolledBenefit, postCacheLoad))]
    public static void logPersonalDataAccess(XppPrePostArgs _args)
    {
        if (CompanyInfo::eeEnablePersonalDataReadLog())
        {
            EePersonalDataAccessLogging::logReadAccess(_args.getThis());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUserRoleMappingChanging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log user role changing.
    /// </summary>
    /// <param name = "_securityRole">
    /// Security role.
    /// </param>
    /// <param name = "_userId">
    /// User Id.
    /// </param>
    /// <param name = "_addRemove">
    /// Action type.
    /// </param>
    [SubscribesTo(classstr(SysSecRole), delegatestr(SysSecRole, UserRoleMappingChanging))]
    static void logUserRoleMappingChanging(RefRecId _securityRole, UserId _userId, AddRemove _addRemove)
    {
        if (_addRemove == AddRemove::Remove)
        {
            OMUserRoleOrganization org;

            while select OMInternalOrganization, SecurityRole from org where org.User == _userId && org.SecurityRole == _securityRole
            {
                EePersonalDataAccessLogging::logUserRoleChange(org.SecurityRole, org.omInternalOrganization, _userId, _addRemove);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUserRoleMappingChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log user role changed.
    /// </summary>
    /// <param name = "_securityRole">
    /// Security role.
    /// </param>
    /// <param name = "_userId">
    /// User Id.
    /// </param>
    /// <param name = "_addRemove">
    /// Action type.
    /// </param>
    [SubscribesTo(classstr(SysSecRole), delegatestr(SysSecRole, UserRoleMappingChanged))]
    static void logUserRoleMappingChanged(RefRecId _securityRole, UserId _userId, AddRemove _addRemove)
    {
        EePersonalDataAccessLogging::logUserRoleChange(_securityRole, 0, _userId, _addRemove);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logSecurityRightsChange</Name>
				<Source><![CDATA[
    static void logSecurityRightsChange(RefRecId _securityRole, UserId _userId, AddRemove _addRemove, RefRecId _organizationId)
    {
        if (CompanyInfo::find().EeEnableRoleChangeLog)
        {
            EeSecurityRightsUpdateLogOperation::initPriviledgesToTrack();

            SysOperationServiceController securityRightsChangeController = new SysOperationServiceController(classStr(EeSecurityRightsUpdateLogOperation),
                                                identifierStr(process),
                                                SysOperationExecutionMode::ReliableAsynchronous);

            EESecurityRightsUpdateLogRequest securityRightsChangeRequest = securityRightsChangeController.getDataContractObject();
            securityRightsChangeRequest.parmUserIdChangedBy(curUserId());
            securityRightsChangeRequest.parmUserIdChangedTo(_userId);
            securityRightsChangeRequest.parmSecurityRoleRecId(_securityRole);
            securityRightsChangeRequest.parmChangeType(_addRemove);
            securityRightsChangeRequest.parmInternalOrganizationRecId(_organizationId);
            securityRightsChangeRequest.parmDateTime(DateTimeUtil::getSystemDateTime());
            securityRightsChangeController.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>