<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaym_Cur_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class VendOutPaym_Cur_RU extends VendOutPaym_RU
{
    HcmWorkerRecId  workerResponsible;
    BankAccountID   commBankAccountId;
    boolean         yourCharges;
    boolean         yourCorrCharges;

    DialogField     dialogWorkerResponsible;
    DialogField     dialogCommBankAccountId;
    DialogField     dialogYourCharges;
    DialogField     dialogYourCorrCharges;

    #define.CurrentVersion(7)
    #localmacro.CurrentList
        workerResponsible,
        commBankAccountId,
        yourCharges,
        yourCorrCharges
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custVendOutPaymRecordRootClassId</Name>
				<Source><![CDATA[
        public classId custVendOutPaymRecordRootClassId()
    {
        return classnum(VendOutPaymRecord_Cur_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        public Object dialog()
    {
        DialogRunbase   dialog = new DialogRunbase("@GLS102280", this);
        ;

        dialog.addGroup("@GLS102281");
        dialogWorkerResponsible = dialog.addFieldValue(extendedtypestr(HcmWorkerRecId), workerResponsible);

        dialog.addGroup("@GLS102282");
        dialogCommBankAccountId = dialog.addFieldValue(extendedtypestr(CompanyBankAccountId), commBankAccountId, "@GLS102283");
        dialogYourCharges       = dialog.addFieldValue(enumstr(NoYes), yourCharges, "@GLS102284");
        dialogYourCorrCharges   = dialog.addFieldValue(enumstr(NoYes), yourCorrCharges, "@GLS102285");

        this.dialogAddPrintDocument(PaymDocumentType::Document, dialog);

        dialogPrintWarrantText  = dialog.addFieldValue(enumstr(NoYes), printWarrantText, "@GLS112130");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPaymentOrder</Name>
				<Source><![CDATA[
        protected void fillPaymentOrder(LedgerJournalTrans    _ledgerJournalTrans,
                                    CustVendOutPaymRecord _vendOutPaymRecord)
    {
        VendTable       vendTable = _vendOutPaymRecord.parmCustVendPaym().custVendTable();
        ;

        super(_ledgerJournalTrans, _vendOutPaymRecord);

        paymentOrderJour.PaymOrderType   = PaymOrderType_RU::Cur;
        paymentOrderJour.FreeFormat      = _vendOutPaymRecord.parmCustVendPaym().paymNote();
        paymentOrderJour.YourCharges     = this.getYourCharges();
        paymentOrderJour.YourCorrCharges = this.getYourCorrCharges();

        if (this.getYourCharges() || this.getYourCorrCharges())
        {
            paymentOrderJour.CommBankAccountPayer  = BankAccountTable::find(this.getCommBankAccountId()).AccountNum;
        }

        if (CompanyInfo::find().Resident_W)
        {
            paymentOrderJour.WorkerResponsible          = this.getResponsEmpl();
            paymentOrderJour.TransTypeCur               = _ledgerJournalTrans.BankCentralBankTransTypeCur_RU ?
                                                          _ledgerJournalTrans.BankCentralBankTransTypeCur_RU :
                                                          vendTable.BankCentralBankTransTypeCur_RU;
            paymentOrderJour.BankCurrencyTransferLog_RU = _ledgerJournalTrans.BankCurrencyTransferLog_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCommBankAccountId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public BankAccountID getCommBankAccountId()
    {
        return commBankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public boolean getFromDialog()
    {
        boolean   ret = super();
        ;

        if (ret)
        {
            workerResponsible = dialogWorkerResponsible.value();
            commBankAccountId = dialogCommBankAccountId.value();
            yourCharges       = dialogYourCharges.value();
            yourCorrCharges   = dialogYourCorrCharges.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponsEmpl</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public HcmWorkerRecId getResponsEmpl()
    {
        return workerResponsible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getYourCharges</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean getYourCharges()
    {
        return yourCharges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getYourCorrCharges</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean getYourCorrCharges()
    {
        return yourCorrCharges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
        public void initParmDefault()
    {
        HcmWorker hcmWorker;

        hcmWorker = HcmWorker::findByPerson(DirPartyTable::findByName(OfficialsTable_RU::nameDirector()).RecId);

        workerResponsible = hcmWorker.RecId;
        commBankAccountId = '';
        yourCharges       = false;
        yourCorrCharges   = false;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
        public className interfaceName()
    {
        return "@GLS102327";
    }

]]></Source>
			</Method>
			<Method>
				<Name>numSeqTypeId</Name>
				<Source><![CDATA[
        public int numSeqTypeId()
    {
        return extendedtypenum(BankPaymentOrderCur_Vend_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container packedClass)
    {
        Integer     version = RunBase::getVersion(packedClass);
        container   con;

        ;

        switch (version)
        {
            case #CurrentVersion :

                [version, #CurrentList, con] = packedClass;
                super(con);

                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        public boolean validate(Object _calledFrom = null)
    {
        QueryRun            checkBankQueryRun;
        LedgerJournalTrans  ledgerJournalTrans;
        boolean             ret = super(_calledFrom);

        if (ret && commBankAccountId)
        {
            checkBankQueryRun = new QueryRun(queryRun.pack());

            while (ret && checkBankQueryRun.next())
            {
                if (checkBankQueryRun.changed(tablenum(LedgerJournalTrans)))
                {
                    ledgerJournalTrans = checkBankQueryRun.get(tablenum(LedgerJournalTrans));

                    ret = BankAccountTable::checkIsActive(commBankAccountId, ledgerJournalTrans.TransDate);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>