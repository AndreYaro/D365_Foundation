<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceSimulatedPostInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>VendInvoiceSimulatedPostInvoice</c> operates on the <c>VendInvoiceInfoTable</c> for simulated post of vendor invoices.
/// </summary>
[ExportMetadata(classStr(VendInvoiceSimulatedPost), VendInvoiceSimulatedPostType::InitializePurchFormLetterInvoice)]
[Export("Dynamics.AX.Application.VendInvoiceSimulatedPost")]
internal final class VendInvoiceSimulatedPostInvoice extends VendInvoiceSimulatedPost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    internal void initFromVendInvoiceInfoTable(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        this.parmVendInvoiceInfoTable(_vendInvoiceInfoTable);
        this.parmPurchFormLetterInvoice(this.initPurchFormLetterInvoice(_vendInvoiceInfoTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSimulatedPost</Name>
				<Source><![CDATA[
    internal void runSimulatedPost()
    {
        this.parmPurchFormLetterInvoice().update(
            this.parmVendInvoiceInfoTable(),
            this.parmVendInvoiceInfoTable().Num,
            this.parmPurchFormLetterInvoice().transDate(),
            PurchUpdate::All,
            AccountOrder::None,
            this.parmPurchFormLetterInvoice().proforma(),
            this.parmPurchFormLetterInvoice().printFormLetter(),
            false,
            this.parmPurchFormLetterInvoice().creditRemaining(),
            conNull(),
            true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchFormLetterInvoice</Name>
				<Source><![CDATA[
    private PurchFormLetter_Invoice initPurchFormLetterInvoice(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        PurchFormLetter_Invoice purchFormLetterInvoiceLocal;

        if (_vendInvoiceInfoTable.Ordering == DocumentStatus::ApproveJournal)
        {
            purchFormLetterInvoiceLocal = PurchFormLetter_ApproveJournal::newApprovalFromSavedInvoice(
                _vendInvoiceInfoTable,
                LedgerJournalTrans::findRecId(_vendInvoiceInfoTable.PoolRecId, false),
                true); // Get all the related invoices from the same Pool
        }
        else
        {
            purchFormLetterInvoiceLocal = PurchFormLetter_Invoice::newFromSavedInvoice(_vendInvoiceInfoTable);
        }

        purchFormLetterInvoiceLocal.reArrangeNow(false);
        purchFormLetterInvoiceLocal.purchParmUpdate(null);
        purchFormLetterInvoiceLocal.parmId(strMin());
        purchFormLetterInvoiceLocal.initNewPurchParmUpdate();
        purchFormLetterInvoiceLocal.printFormLetter(false);
        purchFormLetterInvoiceLocal.usePrintManagement(false);
        purchFormLetterInvoiceLocal.printSalesFormLetter(false);
        purchFormLetterInvoiceLocal.printEUVatInvoice(false);
        purchFormLetterInvoiceLocal.proforma(false);

        return purchFormLetterInvoiceLocal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>