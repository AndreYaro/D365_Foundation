<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBatchMerge</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventBatchHandlingTypeMerge</c> class provides specific functionality for a merge
///    batch handling journal.
/// </summary>
[InventBatchJournalTypeAttribute(InventBatchJournalType::Merge)]
class InventBatchMerge extends InventBatchJournalController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventBatchId</Name>
				<Source><![CDATA[
    public void addInventBatchId(InventBatchId _inventBatchId)
    {
        InventBatchJournalSource    sourceLine;
        InventBatchJournalSource    existingLine;

        boolean                     anyDeleted;

        InventDimParm               inventDimParm;
        InventDimParm               inventDimParmGroupBy;

        ttsbegin;

        sourceLine.InventBatchJournal = inventBatchJournal.RecId;

        InventBatchJournalResult resultLine = InventBatchJournalResult::findFirst(inventBatchJournal.RecId, true);
        boolean hasBatch = this.lineForBatchExists(_inventBatchId);
        boolean first = !hasBatch && !this.hasLines();

        if (!hasBatch)
        {
            this.createOrUpdateSourceAttributes(_inventBatchId);
        }

        InventDim inventDimCrit = inventBatchJournal.inventDim();
        inventDimCrit.InventBatchId = _inventBatchId;
        inventDimParm.initFromInventDim(inventDimCrit);
        inventDimParm.ItemIdFlag = NoYes::Yes;
        inventDimParm.ClosedFlag = NoYes::No;

        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(inventBatchJournal.ItemId);
        inventDimParmGroupBy.initFromInventDimFieldList(inventDimGroupSetup.activeFields());

        Query query = InventSum::newQuery(null, inventBatchJournal.ItemId, inventDimCrit, inventDimParm, inventDimParmGroupBy);
        QueryBuildDataSource dsInventSum = query.dataSourceTable(tableNum(InventSum));

        boolean anyActivity = false;
        boolean anyDimNotAllowed = false;

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            InventSum inventSum = queryRun.get(tableNum(InventSum));
            InventDim inventDim = queryRun.get(tableNum(InventDim));

            inventDimParm.clear();
            inventDimParm.initFromInventDim(inventDim);

            InventOnHandQty inventOnHandQty = InventOnHandQty::newParameters(inventBatchJournal.ItemId,inventDim,inventDimParm);
            boolean skipRecord = inventOnHandQty.availPhysical() <= 0;

            if (   !skipRecord
                && !this.allowInventDim(inventDim))
            {
                anyDimNotAllowed = true;
                skipRecord       = true;
            }

            if (!skipRecord)
            {
                anyActivity = true;

                inventDim = InventDim::findOrCreate(inventDim);

                if (hasBatch)
                {
                    existingLine = InventBatchJournalSource::find(inventBatchJournal.RecId, inventDim.InventDimId, true);
                }

                if (existingLine.RecId)
                {
                    if (existingLine.InventQty      != inventOnHandQty.availPhysical()
                        || existingLine.cwInventQty != inventOnHandQty.pdsCWAvailPhysical())
                    {
                        existingLine.InventQty   = inventOnHandQty.availPhysical();
                        existingLine.cwInventQty = inventOnHandQty.pdsCWAvailPhysical();

                        resultLine.InventQty    += (existingLine.InventQty - existingLine.orig().InventQty);
                        resultLine.cwInventQty  += (existingLine.cwInventQty - existingLine.orig().cwInventQty);

                        if (existingLine.InventQty == 0)
                        {
                            existingLine.doDelete();
                            anyDeleted = true;
                        }
                        else
                        {
                            existingLine.update();
                        }
                    }
                }
                else
                {
                    sourceLine.InventQty   = inventOnHandQty.availPhysical();
                    sourceLine.cwInventQty = inventOnHandQty.pdsCWAvailPhysical();
                    sourceLine.InventDimId = inventDim.InventDimId;
                    sourceLine.insert();

                    resultLine.InventQty   += sourceLine.InventQty;
                    resultLine.cwInventQty += sourceLine.cwInventQty;
                    if (first)
                    {
                        resultLine.copyMergeResultFrom(sourceLine.inventDim());
                    }
                    else
                    {
                        resultLine.summarizeMergeResultFrom(sourceLine.inventDim());
                    }
                    first = false;
                }
            }
        }

        if (anyDeleted)
        {
            this.recomputeMergeResult(resultLine);
        }

        if (anyDimNotAllowed && !anyActivity)
        {
            error("@SYS4001448");
        }

        resultLine.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified inventory dimension should be allowed for continued processing.
    /// </summary>
    /// <param name="_inventDim">
    ///     Inventory dimension record to determine allowance.
    /// </param>
    /// <returns>
    ///     true if the inventory dimensions should be allowed for continued processing; otherwise, false.
    /// </returns>
    private boolean allowInventDim(InventDim _inventDim)
    {
        return !_inventDim.InventProfileId_RU
            || _inventDim.inventProfile_RU().InventProfileType != InventProfileType_RU::Bailee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewResultLineIfNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and inserts the merge result record if one does not already exist.
    /// </summary>
    private void insertNewResultLineIfNeeded()
    {
        InventBatchJournalResult    resultLine;
        InventDimParm               inventDimParm;

        ttsbegin;

        if (!InventBatchJournalResult::existForJournal(inventBatchJournal.RecId))
        {
            InventDim inventDim = inventBatchJournal.inventDim();
            inventDimParm.initFromInventDim(inventDim);
            inventDimParm.InventLocationIdFlag = NoYes::Yes;
            inventDim.clearNotSelectedDim(inventDimParm);
            inventDim = InventDim::findOrCreate(inventDim);

            resultLine.InventBatchJournal               = inventBatchJournal.RecId;
            resultLine.InventDimId                      = inventDim.InventDimId;
            resultLine.BatchMergeDateCalculationMethod  = inventBatchJournal.inventTable().BatchMergeDateCalculationMethod;
            resultLine.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInsert</Name>
				<Source><![CDATA[
    public void onInsert()
    {
        super();

        this.insertNewResultLineIfNeeded();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSourceLinesDeleted</Name>
				<Source><![CDATA[
    public void onSourceLinesDeleted()
    {
        ttsbegin;

        InventBatchJournalResult result = InventBatchJournalResult::findFirst(inventBatchJournal.RecId, true);
        if (result)
        {
            this.recomputeMergeResult(result);
            result.update();
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onUpdate</Name>
				<Source><![CDATA[
    public void onUpdate(InventBatchJournal _inventBatchJournalOrig)
    {
        super(_inventBatchJournalOrig);

        this.insertNewResultLineIfNeeded();
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantityForBatch</Name>
				<Source><![CDATA[
    public container quantityForBatch(InventBatchId _inventBatchId)
    {
        InventBatchJournalSource    line;
        InventDim                   inventDim;

        select sum(InventQty), sum(cwInventQty) from line
            where line.InventBatchJournal  == inventBatchJournal.RecId
            join TableId from inventDim
            where inventDim.InventDimId    == line.InventDimId
                && inventDim.InventBatchId == _inventBatchId;

        return [line.InventQty, line.cwInventQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>recomputeMergeResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Computes the merge result fields using all the current source lines.
    /// </summary>
    /// <param name="_resultLine">
    ///    The buffer for the <c>InventBatchJournalResult</c> table to fill with the new merge result values.
    /// </param>
    private void recomputeMergeResult(InventBatchJournalResult _resultLine)
    {
        InventBatchJournalSource    sourceLine;
        InventDim                   inventDim;
        InventDim                   sourceInventDim;
        boolean                     first = true;

        _resultLine.InventQty   = 0;
        _resultLine.cwInventQty = 0;

        // Initialize the dimension with all the values in the criteria - these are fixed
        sourceInventDim.data(inventBatchJournal.inventDim());

        // Only select and group by the dimensions that can be used directly in the result
        // (all others will automatically be applied from the source record during posting)
        while select sum(InventQty), sum(cwInventQty)
            from sourceLine
            where sourceLine.InventBatchJournal == _resultLine.InventBatchJournal
            join InventBatchId, wmsLocationId, InventStatusId, LicensePlateId
                from inventDim
                group by InventBatchId, wmsLocationId, InventStatusId, LicensePlateId
                where inventDim.InventDimId == sourceLine.InventDimId
        {
            sourceInventDim.InventBatchId  = inventDim.InventBatchId;
            sourceInventDim.wmsLocationId  = inventDim.wmsLocationId;
            sourceInventDim.InventStatusId = inventDim.InventStatusId;
            sourceInventDim.LicensePlateId = inventDim.LicensePlateId;

            if (first)
            {
                _resultLine.copyMergeResultFrom(sourceInventDim);
                first = false;
            }
            else
            {
                _resultLine.summarizeMergeResultFrom(sourceInventDim);
            }

            _resultLine.InventQty   += sourceLine.InventQty;
            _resultLine.cwInventQty += sourceLine.cwInventQty;
        }

        // No source batch lines so initialize the result
        if (first)
        {
            _resultLine.clearMergeResultFields();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshSourceLines</Name>
				<Source><![CDATA[
    public void refreshSourceLines()
    {
        InventBatchJournalSource    sourceLine;
        InventSum                   inventSum;
        InventTable                 inventTable                  = inventBatchJournal.inventTable();
        Set                         batchesWithAttributesCreated = new Set(Types::String);
        boolean                     first                        = true;

        ttsbegin;

        if (this.hasBatchAttributes())
        {
            this.reloadAttributesForJournal();
        }

        InventBatchJournalResult resultLine = InventBatchJournalResult::findFirst(inventBatchJournal.RecId, true);
        resultLine.clearMergeResultFields();
        resultLine.InventQty                        = 0;
        resultLine.cwInventQty                      = 0;
        resultLine.BatchMergeDateCalculationMethod  = inventTable.BatchMergeDateCalculationMethod;

        while select forupdate sourceLine
            where sourceLine.InventBatchJournal     == inventBatchJournal.RecId
                outer join inventSum
                    where inventSum.ItemId          == inventBatchJournal.ItemId
                        && inventSum.InventDimId    == sourceLine.InventDimId
                        && inventSum.AvailPhysical  > 0
        {
            InventQtyAvailPhysical availPhysical = InventAvailabilityProvider::findByItemSumDim(inventTable, inventSum, sourceLine.inventDim()).parmInventAvailability().availPhysical();

            if (   sourceLine.InventQty   != availPhysical
                || sourceLine.cwInventQty != inventSum.PdsCWAvailPhysical)
            {
                sourceLine.InventQty    = availPhysical;
                sourceLine.cwInventQty  = inventSum.PdsCWAvailPhysical;
                sourceLine.update();
            }

            if (sourceLine.InventQty)
            {
                InventDim sourceInventDim = sourceLine.inventDim();

                if (this.hasBatchAttributes() && !batchesWithAttributesCreated.in(sourceInventDim.InventBatchId))
                {
                    this.createOrUpdateSourceAttributes(sourceInventDim.InventBatchId);
                    batchesWithAttributesCreated.add(sourceInventDim.InventBatchId);
                }

                resultLine.InventQty   += sourceLine.InventQty;
                resultLine.cwInventQty += sourceLine.cwInventQty;
                if (first)
                {
                    resultLine.copyMergeResultFrom(sourceInventDim);
                }
                else
                {
                    resultLine.summarizeMergeResultFrom(sourceInventDim);
                }
                first = false;
            }
        }

        sourceLine.skipDataMethods(true);
        delete_from sourceLine
            where sourceLine.InventBatchJournal == inventBatchJournal.RecId
                && sourceLine.InventQty         == 0;

        resultLine.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventBatchMerge construct()
    {
        return new InventBatchMerge();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
