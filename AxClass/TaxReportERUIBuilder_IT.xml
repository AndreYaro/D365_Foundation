<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportERUIBuilder_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class TaxReportERUIBuilder_IT extends SysOperationAutomaticUIBuilder
{
    private TaxReportERContract_IT contract;
    private TaxReport_IT taxReport_IT;
    private DialogTabPage salesTaxPaymentsTabPage;
    private FormTabPageControl salesTaxPaymentsTabPageControl;
    private boolean isTaxReportPeriodOpen;
    private boolean separateTaxSummary;
    private boolean isCalledFromReportSalesTax;
    private boolean isCalledFromSettleAndPostSalesTax;
    private boolean isCalledFromTaxReportVoucher;

    private DialogField taxPeriodField;
    private DialogField isVariativePeriodField;
    private DialogField fromDateField;
    private DialogField toDateField;
    private DialogField taxBookTypeJournalField;
    private DialogField fromTaxBookRecIdField;
    private DialogField toTaxBookRecIdField;
    private DialogField printVATBooksField;
    private DialogField printVATSummaryField;
    private DialogField printVATPaymentField;
    private DialogField printPlafondField;
    private DialogField updateNumberOfPagesField;

    // Sales tax payment fields
    private DialogField vatBalancePeriodField;
    private DialogField prevVATCreditField;
    private DialogField vatCompensationField;
    private DialogField prevVATDebitField;
    private DialogField vatPrePaymentField;
    private DialogField vatBalanceField;
    private DialogField vatPaymentAmountField;
    private DialogField paymentDateField;
    private DialogField bankAccountIdField;
    private DialogField bankRef1Field;
    private DialogField bankRef2Field;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    public void build()
    {
        super();

        contract = this.dataContractObject();

        taxReport_IT = new TaxReport_IT();
        taxReport_IT.unpack(SysOperationHelper::base64Decode(contract.parmTaxReport_IT()));
        isTaxReportPeriodOpen = taxReport_IT.taxReportPeriodOpen();

        Args args = this.controller().parmArgs();

        if (args && args.dataset() == tableNum(TaxReportVoucher))
        {
            isCalledFromTaxReportVoucher = true;
        }
        else if (taxReport_IT.update() == NoYes::Yes)
        {
            isCalledFromSettleAndPostSalesTax = true;
        }
        else
        {
            isCalledFromReportSalesTax = true;
        }

        taxPeriodField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportERContract_IT, parmTaxPeriod));
        taxPeriodField.allowEdit(false);
        separateTaxSummary = TaxAuthorityAddress::find(TaxPeriodHead::find(taxPeriodField.value()).TaxAuthority).SeparateTaxSummary;

        isVariativePeriodField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportERContract_IT, parmIsVariativePeriod));
        isVariativePeriodField.allowEdit(isCalledFromReportSalesTax);

        fromDateField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportERContract_IT, parmFromDate));
        toDateField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportERContract_IT, parmToDate));

        taxBookTypeJournalField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportERContract_IT, parmTaxBookTypeJournal));
        taxBookTypeJournalField.allowEdit(isCalledFromReportSalesTax);

        fromTaxBookRecIdField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportERContract_IT, parmFromTaxBookRecId));
        fromTaxBookRecIdField.allowEdit(isCalledFromReportSalesTax);

        toTaxBookRecIdField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportERContract_IT, parmToTaxBookRecId));
        toTaxBookRecIdField.allowEdit(isCalledFromReportSalesTax);

        printVATBooksField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportERContract_IT, parmPrintVATBooks));
        printVATBooksField.allowEdit(isCalledFromReportSalesTax);

        printVATSummaryField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportERContract_IT, parmPrintVATSummary));
        printVATSummaryField.allowEdit(isCalledFromReportSalesTax);

        printVATPaymentField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportERContract_IT, parmPrintVATPayment));
        printVATPaymentField.allowEdit(isCalledFromReportSalesTax);

        printPlafondField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportERContract_IT, parmPrintPlafond_IT));
        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForVATDeclarations())
        {
            printPlafondField.visible(false);
            printPlafondField.value(false);
        }

        updateNumberOfPagesField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(TaxReportERContract_IT, parmUpdateNumberOfPages));

        this.initSalesTaxPaymentFields();

        isVariativePeriodField.registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(TaxReportERUIBuilder_IT, isVariativePeriodFieldModified),
            this);

        taxBookTypeJournalField.registerOverrideMethod(
            methodStr(FormComboBoxControl, modified),
            methodStr(TaxReportERUIBuilder_IT, taxBookTypeJournalFieldModified),
            this);

        fromTaxBookRecIdField.registerOverrideMethod(
            methodStr(FormReferenceGroupControl, modified),
            methodStr(TaxReportERUIBuilder_IT, fromTaxBookRecIdFieldModified),
            this);

        toTaxBookRecIdField.registerOverrideMethod(
            methodStr(FormReferenceGroupControl, modified),
            methodStr(TaxReportERUIBuilder_IT, toTaxBookRecIdFieldModified),
            this);

        printVATBooksField.registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(TaxReportERUIBuilder_IT, printVATBooksFieldModified),
            this);

        printVATSummaryField.registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(TaxReportERUIBuilder_IT, printVATSummaryFieldModified),
            this);

        printVATPaymentField.registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(TaxReportERUIBuilder_IT, printVATPaymentFieldModified),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVariativePeriodFieldModified</Name>
				<Source><![CDATA[
    private boolean isVariativePeriodFieldModified(FormCheckBoxControl _formCheckBoxControl)
    {
        boolean ret = _formCheckBoxControl.modified();

        if (ret)
        {
            this.updateDesign();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBookTypeJournalFieldModified</Name>
				<Source><![CDATA[
    private boolean taxBookTypeJournalFieldModified(FormComboBoxControl _formComboBoxControl)
    {
        boolean ret = _formComboBoxControl.modified();

        if (ret)
        {
            this.updateDesign();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromTaxBookRecIdFieldModified</Name>
				<Source><![CDATA[
    private boolean fromTaxBookRecIdFieldModified(FormReferenceGroupControl _formReferenceGroupControl)
    {
        boolean ret = _formReferenceGroupControl.modified();

        if (ret)
        {
            this.updateDesign();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toTaxBookRecIdFieldModified</Name>
				<Source><![CDATA[
    private boolean toTaxBookRecIdFieldModified(FormReferenceGroupControl _formReferenceGroupControl)
    {
        boolean ret = _formReferenceGroupControl.modified();

        if (ret)
        {
            this.updateDesign();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printVATBooksFieldModified</Name>
				<Source><![CDATA[
    private boolean printVATBooksFieldModified(FormCheckBoxControl _formCheckBoxControl)
    {
        boolean ret = _formCheckBoxControl.modified();

        if (ret)
        {
            this.updateDesign();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printVATSummaryFieldModified</Name>
				<Source><![CDATA[
    private boolean printVATSummaryFieldModified(FormCheckBoxControl _formCheckBoxControl)
    {
        boolean ret = _formCheckBoxControl.modified();

        if (ret)
        {
            this.updateDesign();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printVATPaymentFieldModified</Name>
				<Source><![CDATA[
    private boolean printVATPaymentFieldModified(FormCheckBoxControl _formCheckBoxControl)
    {
        boolean ret = _formCheckBoxControl.modified();

        if (ret)
        {
            this.updateDesign();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public void getFromDialog()
    {
        super();

        contract.parmVATBalancePeriod(vatBalancePeriodField.value());
        contract.parmPrevVATCredit(prevVATCreditField.value());
        contract.parmVATCompensation(vatCompensationField.value());
        contract.parmPrevVATDebit(prevVATDebitField.value());
        contract.parmVATPrePayment(vatPrePaymentField.value());
        contract.parmVATBalance(vatBalanceField.value());
        contract.parmVATPaymentAmount(vatPaymentAmountField.value());
        contract.parmPaymentDate(paymentDateField.value());
        contract.parmBankAccountId(bankAccountIdField.value());
        contract.parmBankRef1(bankRef1Field.value());
        contract.parmBankRef2(bankRef2Field.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTaxPaymentFields</Name>
				<Source><![CDATA[
    private void initSalesTaxPaymentFields()
    {
        Dialog dialogLocal = this.dialog();
        salesTaxPaymentsTabPage = dialogLocal.addTabPage("@SYS75093");
        DialogGroup dialogGroup = dialogLocal.addGroup();
        dialogGroup.columns(2);

        vatBalancePeriodField = dialogLocal.addFieldValue(extendedTypeStr(AmountMST), contract.parmVATBalancePeriod(), "@SYS75095");
        vatBalancePeriodField.allowEdit(false);

        prevVATCreditField = dialogLocal.addFieldValue(extendedTypeStr(AmountMST), contract.parmPrevVATCredit(), "@SYS75115");
        vatCompensationField = dialogLocal.addFieldValue(extendedTypeStr(AmountMST), contract.parmVATCompensation(), "@SYS75116");
        prevVATDebitField = dialogLocal.addFieldValue(extendedTypeStr(AmountMST), contract.parmPrevVATDebit(), "@SYS75114");
        vatPrePaymentField = dialogLocal.addFieldValue(extendedTypeStr(AmountMST), contract.parmVATPrePayment(), "@SYS75117");

        vatBalanceField = dialogLocal.addFieldValue(extendedTypeStr(AmountMST), contract.parmVATBalance(), "@SYS75104");
        vatBalanceField.allowEdit(false);

        vatPaymentAmountField = dialogLocal.addFieldValue(extendedTypeStr(AmountMST), contract.parmVATPaymentAmount(), "@SYS75096");
        paymentDateField = dialogLocal.addFieldValue(extendedTypeStr(TransDate), contract.parmPaymentDate(), "@SYS16653");
        bankAccountIdField = dialogLocal.addFieldValue(extendedTypeStr(CompanyBankAccountId), contract.parmBankAccountId(), "@SYS1517");

        bankRef1Field = dialogLocal.addFieldValue(extendedTypeStr(BankReference_IT), contract.parmBankRef1(), "@SYS75118");
        bankRef1Field.displayLength(12);

        bankRef2Field = dialogLocal.addFieldValue(extendedTypeStr(BankReference_IT), contract.parmBankRef2(), "@SYS75119");
        bankRef2Field.displayLength(12);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    public void postRun()
    {
        super();

        salesTaxPaymentsTabPageControl = this.dialog().dialogForm().formRun().design().controlName(salesTaxPaymentsTabPage.name());

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    private void updateDesign()
    {
        boolean isVariativePeriod = isVariativePeriodField.value();
        boolean printVATBooks = printVATBooksField.value();
        boolean printVATSummary = printVATSummaryField.value();
        boolean printVATPayment = printVATPaymentField.value();

        if (isVariativePeriod)
        {
            fromDateField.allowEdit(true);
            toDateField.allowEdit(true);
            printVATPaymentField.allowEdit(false);
            printVATPaymentField.value(false);
            printVATPayment = false;
        }
        else
        {
            fromDateField.allowEdit(false);
            fromDateField.value(taxReport_IT.parmFromDate());

            toDateField.allowEdit(false);
            toDateField.value(taxReport_IT.parmToDate());

            printVATPaymentField.allowEdit(isCalledFromReportSalesTax);
        }

        if (printVATPayment && !isVariativePeriod)
        {
            salesTaxPaymentsTabPageControl.expand();
            printPlafondField.allowEdit(true);
        }
        else
        {
            salesTaxPaymentsTabPageControl.collapse();
            printPlafondField.allowEdit(false);
            printPlafondField.value(false);
        }

        if (isVariativePeriod
            || (!printVATBooks && !printVATSummary && !printVATPayment))
        {
            updateNumberOfPagesField.allowEdit(false);
            updateNumberOfPagesField.value(false);
        }
        else
        {
            updateNumberOfPagesField.allowEdit(true);
        }

        boolean allowEditSalesTaxPaymentFields = printVATPayment && isTaxReportPeriodOpen && !isVariativePeriod;
        prevVATCreditField.allowEdit(allowEditSalesTaxPaymentFields);
        vatCompensationField.allowEdit(allowEditSalesTaxPaymentFields);
        prevVATDebitField.allowEdit(allowEditSalesTaxPaymentFields);
        vatPrePaymentField.allowEdit(allowEditSalesTaxPaymentFields);
        vatPaymentAmountField.allowEdit(allowEditSalesTaxPaymentFields);
        paymentDateField.allowEdit(allowEditSalesTaxPaymentFields);
        bankAccountIdField.allowEdit(allowEditSalesTaxPaymentFields);
        bankRef1Field.allowEdit(allowEditSalesTaxPaymentFields);
        bankRef2Field.allowEdit(allowEditSalesTaxPaymentFields);

        if (!printVATBooks && !printVATSummary && printVATPayment)
        {
            taxBookTypeJournalField.allowEdit(false);
            taxBookTypeJournalField.value(TaxBookTypeJournal::Empty);

            fromTaxBookRecIdField.allowEdit(false);
            fromTaxBookRecIdField.value(0);

            toTaxBookRecIdField.allowEdit(false);
            toTaxBookRecIdField.value(0);
        }
        else
        {
            taxBookTypeJournalField.allowEdit(isCalledFromReportSalesTax);
            fromTaxBookRecIdField.allowEdit(isCalledFromReportSalesTax);
            toTaxBookRecIdField.allowEdit(isCalledFromReportSalesTax);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>