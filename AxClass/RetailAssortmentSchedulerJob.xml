<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailAssortmentSchedulerJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailAssortmentSchedulerJob</c> is a dialog class used to schedule retail assortments job.
/// </summary>
class RetailAssortmentSchedulerJob extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTasksByChannel</Name>
				<Source><![CDATA[
    private void createTasksByChannel()
    {
        BatchHeader                     batchHeader;
        RetailAssortmentTable           assortment;
        RetailAssortmentChannelLine     channel;
        RetailAssortmentSchedulerTask   task;

        OMOperatingUnit                 omOperatingUnit;
        Set                             omOperatingUnits;
        SetEnumerator                   omOperatingUnitsEnumerator;
        Set                             assortmentSet;

        Map                             omOperatingUnitMap = new Map(Types::Int64, Types::Class);
        MapEnumerator                   omOperatingUnitMapEnumerator;
        Set organizationTypes           = new Set(Types::Enum);
        str stepName                    = 'createTasksByChannel';
        ;
        Microsoft.Dynamics.Retail.Tracing.RetailAXTraceProvider::EventWriteRAXAssortmentExplodeStepStart(0, 0, 0, stepName);

        // Used to filter the organization model to include only operating units.
        organizationTypes.add(OMInternalOrganizationType::OperatingUnit);

        while select RecId
            from assortment
                where
                    assortment.Status == RetailAssortmentStatusType::Published ||
                    (assortment.Status == RetailAssortmentStatusType::Draft && assortment.PublishedDateTime != DateTimeUtil::minValue())
            join OMInternalOrganizationId, OMHierarchyTypeId from channel
                where
                    channel.AssortmentRecId == assortment.RecId &&
                    channel.Status == RetailAssortmentStatusType::Published
        {
            // Filter the organization model to include only operating units effective as of right now.
            omOperatingUnits = OMInternalOrganization::getDescendantsAndSelf(channel.OMInternalOrganizationId, channel.OMHierarchyTypeId, DateTimeUtil::utcNow(), organizationTypes);
            omOperatingUnitsEnumerator = omOperatingUnits.getEnumerator();
            while (omOperatingUnitsEnumerator.moveNext())
            {
                omOperatingUnit = OMOperatingUnit::find(omOperatingUnitsEnumerator.current(), OMOperatingUnitType::RetailChannel);
                if (!omOperatingUnit)
                {
                    // The operating unit was not a retail channel. No need to assort to it.
                    continue;
                }

                if (!omOperatingUnitMap.exists(omOperatingUnit.RecId))
                {
                    assortmentSet = new Set(Types::Int64);
                }
                else
                {
                    assortmentSet = omOperatingUnitMap.lookup(omOperatingUnit.RecId);
                }

                if (!assortmentSet.in(assortment.RecId))
                {
                    assortmentSet.add(assortment.RecId);
                    omOperatingUnitMap.insert(omOperatingUnit.RecId, assortmentSet);
                }
            }
        }

        omOperatingUnitMapEnumerator = omOperatingUnitMap.getEnumerator();
        while (omOperatingUnitMapEnumerator.moveNext())
        {
            task = new RetailAssortmentSchedulerTask();
            task.parmOMOperatingUnitRefRecId(omOperatingUnitMapEnumerator.currentKey());
            task.parmAssortmentSet(omOperatingUnitMapEnumerator.currentValue());

            if (this.isInBatch())
            {
                if (!batchHeader)
                {
                    batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
                }

                batchHeader.addRuntimeTask(task, this.parmCurrentBatch().RecId);
            }
            else
            {
                task.runOperation();
            }
        }

        if (batchHeader)
        {
            batchHeader.save();
        }

        // Remove any channels that were removed from the assorted set
        this.deleteRemovedChannels(omOperatingUnitMap.getEnumerator());

        Microsoft.Dynamics.Retail.Tracing.RetailAXTraceProvider::EventWriteRAXAssortmentExplodeStepEnd(0, 0, 0, stepName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRemovedChannels</Name>
				<Source><![CDATA[
    private void deleteRemovedChannels(MapEnumerator omOperatingUnits)
    {
        Query                       query = new query();
        QueryBuildDataSource        queryBuildDataSource;
        QueryBuildRange             queryBuildRange;
        QueryRun                    queryRun;

        TableId                     tableId = tableNum(RetailAssortmentExploded);
        FieldId                     fieldId = fieldNum(RetailAssortmentExploded, OMOperatingUnitId);

        OMOperatingUnitRefRecId     omOperatingUnitId;
        RetailAssortmentExploded    row, exploded;
        str stepName                = 'deleteRemovedChannels';
        RefTableId                  assortmentTableId = tableNum(RetailAssortmentExploded);
        ;
        Microsoft.Dynamics.Retail.Tracing.RetailAXTraceProvider::EventWriteRAXAssortmentExplodeStepStart(0, 0, 0, stepName);

        queryBuildDataSource = query.addDataSource(tableId);
        queryBuildDataSource.fields().addField(fieldId);
        queryBuildDataSource.addGroupByField(fieldId);

        queryBuildDataSource = queryBuildDataSource.addDataSource(tableId);
        queryBuildDataSource.fields().addField(fieldId);
        queryBuildDataSource.addGroupByField(fieldId);
        queryBuildDataSource.relations(false);
        queryBuildDataSource.addLink(fieldId, fieldId);
        queryBuildDataSource.joinMode(JoinMode::NoExistsJoin);

        omOperatingUnits.reset();
        while (omOperatingUnits.moveNext())
        {
            omOperatingUnitId = omOperatingUnits.currentKey();
            queryBuildRange = queryBuildDataSource.addRange(fieldId);
            queryBuildRange.value(queryValue(omOperatingUnitId));
        }

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            row = queryRun.get(tableId);

            ttsBegin;

            delete_from exploded
                where exploded.OMOperatingUnitId == row.OMOperatingUnitId;

            ttsCommit;
        }

        Microsoft.Dynamics.Retail.Tracing.RetailAXTraceProvider::EventWriteRAXAssortmentExplodeStepEnd(0, 0, 0, stepName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>expirePublishedAssortments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensure that all published assortments that are no longer valid are marked
    /// as expired. This ensures that they are no longer considered during the
    /// explode phase.
    /// </summary>
    private void expirePublishedAssortments()
    {
        RetailAssortmentTable   assortment;
        str stepName = 'expirePublishedAssortments';
        ;
        Microsoft.Dynamics.Retail.Tracing.RetailAXTraceProvider::EventWriteRAXAssortmentExplodeStepStart(0, 0, 0, stepName);

        ttsBegin;

        update_recordset assortment
        setting Status = RetailAssortmentStatusType::Expired
        where
            assortment.Status == RetailAssortmentStatusType::Published &&
            assortment.ValidTo < DateTimeUtil::date(DateTimeUtil::utcNow());

        ttsCommit;

        Microsoft.Dynamics.Retail.Tracing.RetailAXTraceProvider::EventWriteRAXAssortmentExplodeStepEnd(0, 0, 0, stepName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        ;
        Microsoft.Dynamics.Retail.Tracing.RetailAXTraceProvider::EventWriteRAXAssortmentExplodeStart(0, 0, 0, '');

        //make sure that categories are exploded before running anything.
        RetailCategoryContainmentLookup::synchronizeCategoriesLookup(true);

        // Update any assortments that have expired.
        this.expirePublishedAssortments();

        // Partition the data to be processed by channel.
        this.createTasksByChannel();

        Microsoft.Dynamics.Retail.Tracing.RetailAXTraceProvider::EventWriteRAXAssortmentExplodeEnd(0, 0, 0, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@RET6064";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailAssortmentSchedulerJob scheduler = new RetailAssortmentSchedulerJob();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailAssortmentSchedulerJob</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailAssortmentSchedulerJob</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>