<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportPeriodLock</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxReportPeriodLock</c> class is used to lock period for tax report.
/// </summary>
class TaxReportPeriodLock
{
    Map acquiredLocks;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isLockAcquired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does this instance of <c>TaxReportPeriodLock</c> have a lock on the settlement period.
    /// </summary>
    /// <param name="_taxReportPeriodRecId">
    /// The rec id of the settlement period to check.
    /// </param>
    /// <returns>
    /// Does this instance hold the lock on the table for the settlement period.
    /// </returns>
    /// <remarks>
    /// The settlement period may be locked on the table by a different instance of the <c>TaxReportPeriodLock</c>.
    /// This instance would return false, while the instance that does hold the lock would return true.
    /// </remarks>
    public boolean isLockAcquired(TaxReportPeriodRecId _taxReportPeriodRecId)
    {
        boolean lockAcquired = false;

        if (_taxReportPeriodRecId && acquiredLocks.exists(_taxReportPeriodRecId))
        {
            lockAcquired = acquiredLocks.lookup(_taxReportPeriodRecId);
        }

        return lockAcquired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockSettlementPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Locks the settlement period to restrict access during mutli-user scenarios.
    /// </summary>
    /// <param name="_taxReportPeriodRecId">
    /// The settlement period to lock.
    /// </param>
    /// <exception cref="Exception::UpdateConflict">
    /// If the settlement period is already locked when this method is called then
    /// an infolog is generated and an update conflict exception is thrown.
    /// </exception>
    public void lockSettlementPeriod(TaxReportPeriodRecId _taxReportPeriodRecId)
    {
        boolean         canSet = true;
        TaxReportPeriod taxReportPeriod;
        TaxPeriodHead   taxPeriodHead;

        select firstOnly forUpdate taxReportPeriod
            where taxReportPeriod.RecId == _taxReportPeriodRecId;

        if (taxReportPeriod)
        {
            if (taxReportPeriod.isPeriodSettlementInProcess())
            {
                select firstOnly taxPeriodHead
                    where TaxPeriodHead.TaxPeriod == taxReportPeriod.TaxPeriod;

                checkFailed(strFmt("@SYP4882012",
                                    taxReportPeriod.TaxPeriod,
                                    taxReportPeriod.FromDate,
                                    taxReportPeriod.ToDate,
                                    taxReportPeriod.SettlementPeriodInProcessBy,
                                    fieldPName(TaxReportPeriod, SettlementPeriodInProcessBy),
                                    formName2Pname(formStr(TaxPeriod))),
                            '',
                            SysInfoAction_TableField::newBuffer(taxPeriodHead));

                throw Exception::UpdateConflict;
            }

            this.setSettlementPeriodInProcessBy(taxReportPeriod, curUserId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        acquiredLocks = new Map(Types::Int64, Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSettlementPeriodInProcessBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the value of the SettlementPeriodInProcessBy field on the <c>TaxReportPeriod</c> table to
    /// restrict access to the settlement period in multi-user scenarios when settling taxes.
    /// </summary>
    /// <param name="_record">
    /// The record to lock or unlock.
    /// </param>
    /// <param name="_user">
    /// User that has locked the settlment period.
    /// </param>
    /// <remarks>
    /// Only the session that updated the value of the field initially should update it again. Otherwise in
    /// multi-user scenarios an update conflict could occur. The update of this field is committed to the
    /// database immediately so the information is available to other user sessions.
    /// </remarks>
    private void setSettlementPeriodInProcessBy(TaxReportPeriod _record, UserId _user)
    {
        if (_record)
        {
            ttsbegin;

            _record.SettlementPeriodInProcessBy = _user;
            _record.update();

            ttscommit;

            if (_user != "")
            {
                acquiredLocks.insert(_record.RecId, true);
            }
            else
            {
                acquiredLocks.insert(_record.RecId, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlockSettlementPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unlocks the settlement period.
    /// </summary>
    /// <param name="_taxReportPeriodRecId">
    /// The settlement period to unlock.
    /// </param>
    /// <remarks>
    /// Only settlement periods that have been locked by this instance of the <c>TaxReportPeriodLock</c> can
    /// be unlocked by this instance of the <c>TaxReportPeriodLock</c>.
    /// </remarks>
    public void unlockSettlementPeriod(TaxReportPeriodRecId _taxReportPeriodRecId)
    {
        TaxReportPeriod taxReportPeriod;

        select firstOnly forUpdate taxReportPeriod
            where taxReportPeriod.RecId == _taxReportPeriodRecId;

        if (taxReportPeriod && this.isLockAcquired(taxReportPeriod.RecId))
        {
            this.setSettlementPeriodInProcessBy(taxReportPeriod, "");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>