<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationPurchRFQTableDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationPurchRFQTableDataRetrieval</c> class retrieves data from <c>PurchRFQTable</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(PurchRFQTable))]
public class TaxIntegrationPurchRFQTableDataRetrieval
    extends TaxIntegrationAbstractDataRetrievalTemplate
{
    protected PurchRFQTable purchRFQTable;
    protected PurchRFQLine purchRFQLine;

    protected PurchRFQReplyTable purchRFQReplyTable;
    protected PurchRFQReplyLine purchRFQReplyLine;
    protected PurchCalcTax_RFQReply purchCalcTaxRFQReply;

    protected PurchRFQParmTable purchRFQParmTable;
    protected PurchRFQParmLine purchRFQParmLine;
    protected PurchCalcTax_RFQParmTrans purchCalcTaxRFQParmTrans;

    protected VendTable vendTable;

    protected InventDim inventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(TaxIntegrationDocumentObject _document)
    {
        super(_document);

        if (this.document.getLegacyTax())
        {
            PurchCalcTax purchCalcTax = this.document.getLegacyTax().purchCalcTax();
            if (purchCalcTax is PurchCalcTax_RFQReply)
            {
                this.purchCalcTaxRFQReply = purchCalcTax;
                this.purchRFQReplyTable = this.purchCalcTaxRFQReply.getPurchRFQPurchTable();
            }
            else if (purchCalcTax is PurchCalcTax_RFQParmTrans)
            {
                this.purchCalcTaxRFQParmTrans = purchCalcTax;
                this.purchRFQParmTable = this.purchCalcTaxRFQParmTrans.getPurchRFQParmTable();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.purchRFQTable)
            .where(this.purchRFQTable, fieldStr(PurchRFQTable, RecId))
                .isEqualToLiteral(this.document.getLocalRecId())
            .outerJoin(this.vendTable) // alternate key
                .where(this.vendTable, fieldStr(VendTable, AccountNum))
                    .isEqualTo(this.purchRFQTable, fieldStr(PurchRFQTable, VendAccount))
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        if (this.purchRFQReplyTable)
        {
            return SysDaQueryObjectBuilder::from(this.purchRFQLine)
                .where(this.purchRFQLine, fieldStr(PurchRFQLine, RFQId))
                    .isEqualToLiteral(this.purchRFQTable.RFQId)
                .innerJoin(this.purchRFQReplyLine)
                    .where(this.purchRFQReplyLine, fieldStr(PurchRFQReplyLine, rfqLineRecId))
                        .isEqualTo(this.purchRFQLine, fieldStr(PurchRFQLine, RecId))
                .outerJoin(this.inventDim) // alternate key
                    .where(this.inventDim, fieldStr(InventDim, inventDimId))
                        .isEqualTo(this.purchRFQLine, fieldStr(PurchRFQLine, InventDimId))
                .toSysDaQueryObject();
        }
        else if (this.purchRFQParmTable)
        {
            return SysDaQueryObjectBuilder::from(this.purchRFQLine)
                .where(this.purchRFQLine, fieldStr(PurchRFQLine, RFQId))
                    .isEqualToLiteral(this.purchRFQTable.RFQId)
                .innerJoin(this.purchRFQParmLine)
                    .where(this.purchRFQParmLine, fieldStr(PurchRFQParmLine, ParmId))
                        .isEqualToLiteral(this.purchRFQParmTable.ParmId)
                    .where(this.purchRFQParmLine, fieldStr(PurchRFQParmLine, TableRefId))
                        .isEqualToLiteral(this.purchRFQParmTable.TableRefId)
                    .where(this.purchRFQParmLine, fieldStr(PurchRFQParmLine, RFQLineRecId))
                        .isEqualTo(this.purchRFQLine, fieldStr(PurchRFQLine, RecId))
                .outerJoin(this.inventDim) // alternate key
                    .where(this.inventDim, fieldStr(InventDim, inventDimId))
                        .isEqualTo(this.purchRFQLine, fieldStr(PurchRFQLine, InventDimId))
                .toSysDaQueryObject();
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.purchRFQLine)
                .where(this.purchRFQLine, fieldStr(PurchRFQLine, RFQId))
                    .isEqualToLiteral(this.purchRFQTable.RFQId)
                .outerJoin(this.inventDim) // alternate key
                    .where(this.inventDim, fieldStr(InventDim, inventDimId))
                        .isEqualTo(this.purchRFQLine, fieldStr(PurchRFQLine, InventDimId))
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.purchRFQTable.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.purchRFQTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.purchRFQLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.purchRFQLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        return TaxIntegrationLineObject::constructOnDocument(
            this.purchRFQLine.TableId,
            this.purchRFQLine.RecId,
            this.document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document.
    /// </summary>
    protected void copyToDocument()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the document.
    /// </summary>
    protected void copyToDocumentByDefault()
    {
        super();

        document.setDirection(TaxIntegrationDirection::Purchase);
        document.setInvoiceId('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document from <c>PurchRFQTable</c>, <c>PurchRFQReplyTable</c>, <c>PurchRFQParmTable</c>.
    /// </summary>
    protected void copyToDocumentFromHeaderTable()
    {
        super();

        this.copyToDocumentFromInventStorageDimMap(document, this.purchRFQTable);

        document.setDeliveryDate(this.purchRFQTable.DeliveryDate);
        if (this.purchRFQReplyTable)
        {
            document.setTransactionCurrencyCode(this.purchRFQReplyTable.CurrencyCode);
        }
        else if (this.purchRFQParmTable)
        {
            document.setTransactionCurrencyCode(this.purchRFQParmTable.CurrencyCode);
        }
        else
        {
            document.setTransactionCurrencyCode(this.purchRFQTable.CurrencyCode);
        }
        document.setIncludingTax(this.purchRFQTable.InclTax);
        document.setOrderAccount(this.purchRFQTable.VendAccount);
        CustVendTable custVendInvoiceTable = VendTable::find(VendTable::find(document.getOrderAccount()).InvoiceAccount);
        document.setInvoiceAccount(custVendInvoiceTable ? custVendInvoiceTable.AccountNum : document.getOrderAccount());
        document.setDeliveryTerm(this.purchRFQTable.DlvTerm);
        this.copyToDocumentFromVATNum(
            this.purchRFQTable.VATNum,
            this.purchRFQTable.VATNumTableType,
            this.purchRFQTable.VATNumRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document's address.
    /// </summary>
    protected void copyAddressToDocument()
    {
        super();

        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromVendor(
            this.vendTable,
            LogisticsLocationRoleType::Delivery);
        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress = LogisticsPostalAddress::findRecId(
            this.purchRFQTable.DeliveryPostalAddress);

        this.copyToDocumentFromShipmentAddressWithCountryRegionType(
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLine(TaxIntegrationLineObject _line)
    {
        super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromLineTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        this.copyToLineFromSalesPurchJournalLine(_line, this.purchRFQLine);
        this.copyToLineFromInventTable(_line, this.purchRFQLine.inventTable());
        this.copyToLineFromInventDim(_line, this.inventDim);

        if (this.purchRFQReplyLine)
        {
            _line.setUnit(this.purchRFQReplyLine.PurchUnit);
        }

        // no _line.setProductVariant
       // no _line.setIntrastatCommodityId

       // no _line.setDirectDelivery
       // no _line.setDeliveryTerm
        _line.setDeliveryDate(this.purchRFQReplyLine.DeliveryDate ?
            this.purchRFQReplyLine.DeliveryDate :
            this.purchRFQLine.deliveryDate(document.getInvoiceDate()));

        _line.setLedgerDimension(this.purchRFQLine.DefaultDimension);
        InventMovement inventMovement = InventMovement::construct(this.purchRFQLine);
        if (inventMovement.mustBeBookedFinancially())
        {
            if (inventMovement.mustBeBookedBalanceSheet())
            {
                _line.setOperationLedgerDimension(inventMovement.accountBalanceSheet());
            }
            else if (inventMovement.mustBeBookedOperations())
            {
                _line.setOperationLedgerDimension(inventMovement.accountOperations());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quantity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        super(_line);

        if (this.purchRFQReplyLine)
        {
            _line.setQuantity(this.purchRFQReplyLine.PurchQty);
            _line.setLineAmount(PriceDisc::price2Amount(
                this.purchRFQReplyLine.PurchPrice,
                this.purchRFQReplyLine.PriceUnit,
                PriceDisc::discAmount(
                    document.getTaxIntegrationSetting().getDiscountParameter(),
                    this.purchRFQReplyLine.LineDisc,
                    this.purchRFQReplyLine.MultiLnDisc),
                _line.getQuantity(),
                this.purchRFQReplyLine.PurchQty,
                this.purchRFQReplyLine.PurchMarkup,
                PriceDisc::discPercent(
                    document.getTaxIntegrationSetting().getDiscountParameter(),
                    this.purchRFQReplyLine.LinePercent,
                    this.purchRFQReplyLine.MultiLnPercent),
                this.purchRFQLine.CurrencyCode,
                this.purchRFQReplyLine.LineAmount));
        }
        else if (this.purchRFQParmLine)
        {
            _line.setQuantity(this.purchRFQParmLine.PurchQty);
            _line.setLineAmount(this.purchRFQParmLine.LineAmount);
        }
        else
        {
            _line.setQuantity(this.purchRFQLine.PurchQty);
            _line.setLineAmount(PriceDisc::price2Amount(
                this.purchRFQLine.PurchPrice,
                this.purchRFQLine.PriceUnit,
                PriceDisc::discAmount(
                    document.getTaxIntegrationSetting().getDiscountParameter(),
                    this.purchRFQLine.LineDisc,
                    this.purchRFQLine.MultiLnDisc),
                _line.getQuantity(),
                this.purchRFQLine.PurchQty,
                this.purchRFQLine.PurchMarkup,
                PriceDisc::discPercent(
                    document.getTaxIntegrationSetting().getDiscountParameter(),
                    this.purchRFQLine.LinePercent,
                    this.purchRFQLine.MultiLnPercent),
                this.purchRFQLine.CurrencyCode,
                this.purchRFQLine.LineAmount));
        }

        _line.setTransactionAmount(_line.getLineAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's address.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyAddressToLine(TaxIntegrationLineObject _line)
    {
        super(_line);

        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromVendor(
            this.vendTable, // document
            LogisticsLocationRoleType::Delivery);
        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress = LogisticsPostalAddress::findRecId(this.purchRFQLine.DeliveryPostalAddress);

        this.copyToLineFromShipmentAddressWithCountryRegionType(
            _line,
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>PurchRFQTable</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromHeaderTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        if (this.purchRFQReplyLine && this.purchRFQReplyTable.DiscPercent)
        {
            _line.setTransactionAmount(_line.getTransactionAmount() * (100 - purchRFQReplyTable.DiscPercent) / 100);
        }
        else if (this.purchRFQParmLine && this.purchRFQTable.DiscPercent)
        {
            _line.setTransactionAmount(_line.getTransactionAmount() * (100 - purchRFQTable.DiscPercent) / 100);
        }
        else if (this.purchRFQTable.DiscPercent)
        {
            _line.setTransactionAmount(_line.getTransactionAmount() * (100 - purchRFQTable.DiscPercent) / 100);
        }

        _line.setDeliveryTerm(this.purchRFQTable.DlvTerm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentCharge(TaxIntegrationLineObject _charge)
    {
        super(_charge);
        this.copyToDocumentChargeFromDocumentChargeTable(_charge);
        this.copyToDocumentChargeFromHeaderTable(_charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentChargeFromDocumentChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document from <c>MarkupTrans</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentChargeFromDocumentChargeTable(TaxIntegrationLineObject _charge)
    {
        this.copyToChargeFromChargeTable(_charge, this.markupTransOfDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentChargeFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the document from <c>PurchRFQTable</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the document.</param>
    protected void copyToDocumentChargeFromHeaderTable(TaxIntegrationLineObject _charge)
    {
        _charge.setLedgerDimension(this.purchRFQTable.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineCharge(TaxIntegrationLineObject _charge)
    {
        super(_charge);
        this.copyToLineChargeFromLineChargeTable(_charge);
        this.copyToLineChargeFromLineTable(_charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineChargeFromLineChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>MarkupTrans</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineChargeFromLineChargeTable(TaxIntegrationLineObject _charge)
    {
        this.copyToChargeFromChargeTable(_charge, markupTransOfLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineChargeFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>PurchRFQLine</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineChargeFromLineTable(TaxIntegrationLineObject _charge)
    {
        _charge.setInventoryTransactionId(this.purchRFQLine.InventTransId);
        _charge.setLedgerDimension(this.purchRFQLine.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToChargeFromChargeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>MarkupTable</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    /// <param name = "_markupTrans">The record of <c>MarkupTrans</c>.</param>
    protected void copyToChargeFromChargeTable(TaxIntegrationLineObject _charge, MarkupTrans _markupTrans)
    {
        MarkupTable markupTable = _markupTrans.markupTable();

        switch (markupTable.CustType)
        {
            case MarkupType::LedgerAccount :
                _charge.setOperationLedgerDimension(markupTable.parmCustomerLedgerDimension());
                break;
            case MarkupType::CustVend :
                _charge.setOperationLedgerDimension(VendLedgerAccounts::summaryLedgerDimension(purchRFQTable.VendAccount));
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>