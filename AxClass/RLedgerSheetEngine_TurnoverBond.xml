<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rLedgerSheetEngine_TurnoverBond</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rLedgerSheetEngine_TurnoverBond extends RLedgerSheetClient implements BatchRetryable
{
     Map   accountBalances, rowTotals, colTotals;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotalRow</Name>
				<Source><![CDATA[
    public void addTotalRow()
    {
        FormListItem  formListItem;
        int           col, idx, maxCol;
        Amount        amount, turnoverTotal;
        MainAccountNum offsetAccount;

        formListItem = new FormListItem("@SYS7446", value2);
        formListItem.idx(listControl.getCount() + 1);

        idx      = listControl.addItem(formListItem);
        col      = 1;

        maxCol   = listControl.getColumnCount() - 1;
        for (col = 1; col <= maxCol; col++)
        {
            offsetAccount = listControl.getColumn(col).text();
            if (offsetAccount)
            {
                amount = 0;
                if (colTotals.exists(offsetAccount))
                {
                    amount = colTotals.lookup(offsetAccount);
                }

                this.addAmountItemToFormListControl(amount, col, idx);

                if (MainAccount::findByMainAccountId(offsetAccount).Type != DimensionLedgerAccountType::Total)
                {
                    turnoverTotal += amount;
                }
            }
        }

        col    = listControl.getColumnCount() - 1;
        this.addAmountItemToFormListControl(turnoverTotal, col, idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>contextMenu</Name>
				<Source><![CDATA[
    public void contextMenu(HWND _hwnd,int _idx,int _col)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExcelReport</Name>
				<Source><![CDATA[
    protected OXMLExcelReport_LedgerSheet_RU createExcelReport()
    {
        OXMLExcelReport_TurnoverBond_RU report = OXMLExcelReport_TurnoverBond_RU::construct();

        report.setParameters(listControl, this);

        return report;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCaption</Name>
				<Source><![CDATA[
    public str datasourceCaption(int _dataSourceNo)
    {
        str datasourceCaption;

        switch (_dataSourceNo)
        {
            case 2:
                datasourceCaption = "@GLS105067";
                break;
            case 5:
                datasourceCaption = "@GLS105068";
                break;
            default:
                datasourceCaption ="";
        }

        return datasourceCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogUpdateDesign</Name>
				<Source><![CDATA[
    protected void dialogUpdateDesign(Dialog _dialog)
    {
        FormDesign            formDesign;

        super(_dialog);
        formDesign = dialogFormRun.design();
        formDesign.controlName(dialogCrediting).visible(true);
        formDesign.controlName(dialogMainAccountNum).visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandColAccount</Name>
				<Source><![CDATA[
    protected void expandColAccount(MainAccount _mainAccount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandRowAccount</Name>
				<Source><![CDATA[
    protected void expandRowAccount(MainAccount _mainAccount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchNextRows</Name>
				<Source><![CDATA[
    public void fetchNextRows()
    {
        str           txt      = "@GLS106105" + "@GLS111326";
        MapEnumerator   enumerator = new MapEnumerator(rowTotals);

        enumerator.reset();
        while (enumerator.moveNext())
        {
            progress.setText(txt + strFmt("@GLS104975", enumerator.currentKey()));
            this.insertRow(0, 0, enumerator.currentKey());
        }
        this.addTotalRow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterValues</Name>
				<Source><![CDATA[
    public container filterValues(container _con)
    {
        container excludeCon = ["@GLS104963", "@GLS104957", "@SYS7446"];
        container filteredCon;
        for (int idx = 1; idx <= conLen(_con); idx++)
        {
            str currentColumn = conPeek(_con, idx);
            filteredColumnsMap.insert(currentColumn, idx-1);

            if (conFind(excludeCon, currentColumn) == 0)
            {
                filteredCon += currentColumn;
            }
        }
        return filteredCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formDesignCaption</Name>
				<Source><![CDATA[
    public str formDesignCaption(int _idx = -1)
    {
        FormListItem item;

        item = listControl.getItem(_idx);
        if (fromDate)
        {
            return strFmt("@GLS105004", item.text(), (crediting ? "@GLS101048" : "@GLS101070"),fromDate,toDate);
        }
        else
        {
            return strFmt("@GLS105005", item.text(), (crediting ? "@GLS101048" : "@GLS101070"),toDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataFromServer</Name>
				<Source><![CDATA[
    protected void getDataFromServer()
    {
        RLedgerSheetServer_TurnoverBond rLedgerSheetServerTB = rLedgerSheetServer;
        Map mapGlobal;

        if (Global::isAOS())
        {
            mapGlobal       = rLedgerSheetServerTB.getGlobalMap();
            accountBalances = Map::create(mapGlobal.lookup(1));
            rowTotals       = Map::create(mapGlobal.lookup(value2));
            colTotals       = Map::create(mapGlobal.lookup(value3));
        }
        else
        {
            accountBalances = rLedgerSheetServerTB.getAccountBalance();
            rowTotals       = rLedgerSheetServerTB.getRowTotals();
            colTotals       = rLedgerSheetServerTB.getColTotals();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHelpText</Name>
				<Source><![CDATA[
    public str getHelpText(int _idx, int _col)
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAccounts</Name>
				<Source><![CDATA[
    protected void initAccounts()
    {
        accountBalances = new Map(Types::Container, Types::Real);
        rowTotals       = new Map(Types::String,    Types::Real);
        colTotals       = new Map(Types::String,    Types::Real);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListView</Name>
				<Source><![CDATA[
    public void initListView()
    {
        FormListColumn  listColumn;
        MapEnumerator     enumerator = new MapEnumerator(colTotals);

        super();

        listColumn = new FormListColumn(crediting ? "@GLS104963" : "@GLS104957" , 0);
        listControl.addColumn(1,listColumn);

        enumerator.reset();
        while (enumerator.moveNext())
        {
            listColumn = new FormListColumn();
            listColumn.format(FormListFormat::Right);
            listColumn.text(enumerator.currentKey());
            if (showSumAccount)
            {
                listColumn.image(MainAccount::findByMainAccountId(enumerator.currentKey()).Type == DimensionLedgerAccountType::Total);
            }

            listControl.addColumn(listControl.getColumnCount()+1, listColumn);
        }

        listColumn = new FormListColumn();
        listColumn.format(FormListFormat::Right);

        listColumn.text("@SYS7446");
        listColumn.image(value2);
        listControl.addColumn(listControl.getColumnCount()+1,listColumn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRow</Name>
				<Source><![CDATA[
    protected void insertRow(int            _currentRow = 0,
                             int            _notUsed    = 0,
                             MainAccountNum _account    = "",
                             boolean        _rowOnly    = false)
    {
        FormListItem  formListItem;
        int           idx, col, maxCol;
        MainAccountNum offsetAccount;
        Amount        amount;

        formListItem = new FormListItem(_account);
        formListItem.idx(_rowOnly ? _currentRow : listControl.getCount() + 1);

        if (showSumAccount)
        {
            formListItem.image(MainAccount::findByMainAccountId(_account).Type == DimensionLedgerAccountType::Total);
        }

        idx    = listControl.addItem(formListItem);
        maxCol = listControl.getColumnCount() - 1;

        for (col = 1; col <= maxCol; col++)
        {
            offsetAccount = listControl.getColumn(col).text();
            if (offsetAccount)
            {
                amount = 0;
                if (accountBalances.exists([_account, offsetAccount]))
                {
                    amount = accountBalances.lookup([_account, offsetAccount]);
                }
                this.addAmountItemToFormListControl(amount, col, idx);
            }
        }

        col    = listControl.getColumnCount() - 1;
        amount = rowTotals.lookup(_account);
        this.addAmountItemToFormListControl(amount, col, idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSumAccountShrinked</Name>
				<Source><![CDATA[
    protected boolean isSumAccountShrinked(MainAccountNum _mainAccountNum,
                                           container     _cont = conNull(),
                                           boolean       _row = true)
    {
        int             i;
        MainAccountNum  account;
        MapEnumerator     mapEnumerator;
        DimensionAttributeValue dimensionAttributeValue;

        mainAccount = MainAccount::findByMainAccountId(_mainAccountNum);

        while select TableId from dimensionAttributeValue
             where dimensionAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                 && dimensionAttributeValue.EntityInstance     == mainAccount.RecId
        join InvertTotalSign, FromValue, ToValue from dimAttrValueTotCrit
            where dimAttrValueTotCrit.DimensionAttributeValue == dimensionAttributeValue.RecId
        {
            mapEnumerator = new MapEnumerator(_row ? rowTotals : colTotals);

            mapEnumerator.reset();
            while (mapEnumerator.moveNext())
            {
                account = mapEnumerator.currentKey();

                if (account != _mainAccountNum                  &&
                    account >= dimAttrValueTotCrit.FromValue    &&
                    account <= dimAttrValueTotCrit.ToValue)
                {
                    if (_row)
                    {
                        for (i = 0; i <= listControl.getCount() - 1; i++)
                        {
                            if (listControl.getItem(i).text() == account)
                            {
                                return false;
                            }
                        }
                    }
                    else
                    {
                        for (i = 1; i <= listControl.getColumnCount() - 1; i++)
                        {
                            if (listControl.getColumn(i).text() == account)
                            {
                                return false;
                            }
                        }
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proceedDisplayingVouchers</Name>
				<Source><![CDATA[
    public void proceedDisplayingVouchers(int _col)
    {
        if (listControl.getItem(row) &&  listControl.getColumn(_col))
        {
            this.showOriginalDocuments(listControl.getItem(row).text(),
                                       listControl.getColumn(_col).text(),
                                       crediting ? DebCredProposal::Credit : DebCredProposal::Debit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    public Query query()
    {
        Query                query =  super();
        QueryBuildDataSource qBd;
        QueryBuildRange      qBr;

        qBd = query.dataSourceTable(tableNum(MainAccount), value2);
        qBr = qBd.findRange(fieldNum(MainAccount, MainAccountId));
        qBr.status(RangeStatus::Open);

        qBd = query.dataSourceTable(tablenum(GeneralJournalAccountEntry),1);
        qBd.orderMode(OrderMode::GroupBy);

        qBd = query.dataSourceTable(tableNum(GeneralJournalAccountEntry), value2);
        qBd.addSortField(fieldNum(GeneralJournalAccountEntry, IsCredit));
        qBd.orderMode(OrderMode::GroupBy);

        qBd.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount),  SelectionField::Sum);
        qBd.addSelectionField(fieldNum(GeneralJournalAccountEntry, ReportingCurrencyAmount),   SelectionField::Sum);
        qBd.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount), SelectionField::Sum);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00012, funcName());
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>leaveTotalAccountsOnly</Name>
				<Source><![CDATA[
    public void leaveTotalAccountsOnly()
    {
        if (showTotalsOnly)
        {
            this.saveListOrder();

            while select mainAccount
                where mainAccount.Type                  == DimensionLedgerAccountType::Total &&
                      mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
            {
                if (rowTotals.exists(mainAccount.MainAccountId))
                {
                        this.shrinkRowAccount(mainAccount);
                }

                if (colTotals.exists(mainAccount.MainAccountId))
                {
                        this.shrinkColAccount(mainAccount);
                }
            }

            this.restoreSortOrder();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    public void updateQuery(boolean _update = false)
    {
        QueryBuildRange qbr;
        Query           query = queryRun.query();

        query.dataSourceTable(tableNum(MainAccount), crediting ? 1       : value2).label(accountDebitDSLabel);
        query.dataSourceTable(tableNum(MainAccount), crediting ? 1       : value2).name(accountDebitDSName);

        query.dataSourceTable(tableNum(MainAccount), crediting ? value2 : 1).label(accountCreditDSLabel);
        query.dataSourceTable(tableNum(MainAccount), crediting ? value2 : 1).name(accountDebitDSName);

        super(_update);

        if (crediting)
        {
            qbr = findOrCreateRange_W(query.dataSourceTable(tableNum(GeneralJournalAccountEntry), 1), fieldNum(GeneralJournalAccountEntry, IsCredit));
            qbr.value(queryValue(NoYes::Yes));

            qbr = findOrCreateRange_W(query.dataSourceTable(tableNum(GeneralJournalAccountEntry), value2), fieldNum(GeneralJournalAccountEntry, IsCredit));
            qbr.value(queryValue(NoYes::No));
        }
        else
        {
            qbr = findOrCreateRange_W(query.dataSourceTable(tableNum(GeneralJournalAccountEntry), 1), fieldNum(GeneralJournalAccountEntry, IsCredit));
            qbr.value(queryValue(NoYes::No));

            qbr = findOrCreateRange_W(query.dataSourceTable(tableNum(GeneralJournalAccountEntry), value2), fieldNum(GeneralJournalAccountEntry, IsCredit));
            qbr.value(queryValue(NoYes::Yes));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static str description()
    {
        return "@GLS104985";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogFormName_Ru</Name>
				<Source><![CDATA[
    public static TreeNodeName dialogFormName_Ru()
    {
        return formStr(RLedgerSheetDialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>