<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanProductionFlowVisualizationModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents a model of lean production flow.
/// </summary>
class LeanProductionFlowVisualizationModel
{
    private RecId planReferenceRecId;

    private Map activities  = new Map(Types::Int64, Types::Class);
    private Map relations   = new Map(Types::Int64, Types::Class);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructVisualizationDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Based on current model, constructs data structure to pass to client.
    /// </summary>
    /// <returns>Data structure with model info.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanProductionFlowVisualizationDataContract constructVisualizationDataContract()
    {
        var dataContract = new LeanProductionFlowVisualizationDataContract();

        var activitiesEnumerator = activities.getEnumerator();
        while (activitiesEnumerator.moveNext())
        {
            dataContract.parmNodes().addEnd(activitiesEnumerator.currentValue());
        }

        var relationsEnumerator = relations.getEnumerator();
        while (relationsEnumerator.moveNext())
        {
            List activityRelations = relationsEnumerator.currentValue();

            var activityRelationsEnumerator = activityRelations.getEnumerator();
            while (activityRelationsEnumerator.moveNext())
            {
                dataContract.parmEdges().addEnd(activityRelationsEnumerator.current());
            }
        }

        return dataContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds activity to the model.
    /// </summary>
    /// <param name = "_planActivity">Activity to add to the model.</param>
    private void addActivity(PlanActivity _planActivity)
    {
        var node = new LeanProductionFlowVisualizationNodeContract();

        node.parmId(any2Str(_planActivity.RecId));
        node.parmActivityId(_planActivity.PlanActivityId);
        node.parmName(_planActivity.Name);
        node.parmType(_planActivity.PlanActivityType);
        node.parmIsFeederBridge(LeanProductionFlowActivity::findPlanActivity(_planActivity.RecId).FeederBridge == NoYes::Yes);

        if (_planActivity.PlanActivityType == PlanActivityType::Process)
        {
            WrkCtrResourceGroup workCell = _planActivity.wrkCtrResourceGroup();

            node.parmWorkCell(workCell.WrkCtrId);
            node.parmFromWarehouse(workCell.InputInventLocationId);
            node.parmFromLocation(workCell.InputWMSLocationId);
            node.parmToWarehouse(workCell.OutputInventLocationId);
            node.parmToLocation(workCell.OutputWMSLocationId);
        }
        else
        {
            WMSLocation fromWmsLocation = _planActivity.nextLevelPlanActivity(PlanActivityType::Pick).planActivityLocation().inventDim().wmsLocation();
            WMSLocation toWmsLocation = _planActivity.receiptLocation().inventDim().wmsLocation();

            node.parmFromWarehouse(fromWmsLocation.InventLocationId);
            node.parmFromLocation(fromWmsLocation.WmsLocationId);
            node.parmToWarehouse(toWmsLocation.InventLocationId);
            node.parmToLocation(toWmsLocation.WmsLocationId);
            node.parmFreightedBy(enum2str(_planActivity.FreightedBy));

            node.parmIsUpdateOnHandOnReceipt(_planActivity.onHandUpdate(PlanActivityType::Receive) == NoYes::Yes);
            node.parmIsUpdateOnHandOnPick(_planActivity.onHandUpdate(PlanActivityType::Pick) == NoYes::Yes);
        }

        this.addMaterialTimeInfo(node, _planActivity);
        this.addCycleTimeInfo(node, _planActivity);

        activities.insert(_planActivity.RecId, node);
        relations.insert(_planActivity.RecId, new List(Types::Class));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCrossProductionFlowActivityNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds cross production flow activity node
    /// </summary>
    /// <param name = "_fromPlanActivity">From activity.</param>
    /// <param name = "_toPlanActivity">To activity.</param>
    private void addCrossProductionFlowActivityNode(PlanActivity _fromPlanActivity, PlanActivity _toPlanActivity)
    {
        if (_fromPlanActivity.PlanReference != _toPlanActivity.PlanReference && !activities.exists(_toPlanActivity.RecId))
        {
            this.addActivity(_toPlanActivity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds relation between activities to the model.
    /// </summary>
    /// <param name = "_fromPlanActivity">From activity.</param>
    /// <param name = "_toPlanActivity">To activity.</param>
    /// <param name = "_planActivityRelationship">Additional relationship data.</param>
    private void addRelation(PlanActivity _fromPlanActivity, PlanActivity _toPlanActivity, PlanActivityRelationship _planActivityRelationship)
    {
        List activityRelationsList = relations.lookup(_fromPlanActivity.RecId);

        this.addCrossProductionFlowActivityNode(_fromPlanActivity, _toPlanActivity);

        var edge = new LeanProductionFlowVisualizationEdgeContract();

        edge.parmId(any2Str(_planActivityRelationship.RecId));
        edge.parmFromNode(any2Str(_fromPlanActivity.RecId));
        edge.parmToNode(any2Str(_toPlanActivity.RecId));
        edge.parmIsSemiFinished(LeanProductionFlowActivity::findPlanActivity(_fromPlanActivity.RecId).ReceiveSemiFinished);

        PlanSequenceConstraintValue planSequenceConstraintValue = PlanSequenceConstraintValue::findConstraintRoleType(_planActivityRelationship.Constraint, ConstraintRoleTypes::Minimum);
        if (planSequenceConstraintValue)
        {
            edge.parmTimeConstraint(strFmt('%1 %2', this.toStrAndRemoveTrailingZeroes(planSequenceConstraintValue.Value), UnitOfMeasure::find(planSequenceConstraintValue.UnitOfMeasure).Symbol));
        }

        var leanProdFlowPlanActivityRelation = LeanProdFlowPlanActivityRelation::findPlanActivityRelationship(_planActivityRelationship.RecId, LeanProductionFlow::findPlan(planReferenceRecId).RecId);
        edge.parmCycleTimeRatio(any2Str(this.toStrAndRemoveTrailingZeroes(leanProdFlowPlanActivityRelation.CycleTimeRatio)));

        activityRelationsList.addEnd(edge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCycleTimeInfo</Name>
				<Source><![CDATA[
    private void addCycleTimeInfo(LeanProductionFlowVisualizationNodeContract _node, PlanActivity _planActivity)
    {
        var leanProductionFlowActivity = LeanProductionFlowActivity::findPlanActivity(_planActivity.RecId);
        var productionFlow = LeanProductionFlow::findPlan(planReferenceRecId);

        _node.parmCycleTime(strFmt('%1 %2', this.toStrAndRemoveTrailingZeroes(leanProductionFlowActivity.CycleTime), UnitOfMeasure::find(productionFlow.TaktUnitOfMeasure).Symbol));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMaterialTimeInfo</Name>
				<Source><![CDATA[
    private void addMaterialTimeInfo(LeanProductionFlowVisualizationNodeContract _node, PlanActivity _planActivity)
    {
        PlanActivityTimeComponent planActivityTimeComponent;

        var planActivityTimesEnumerator = _planActivity.mapPlanActivityTimes().getEnumerator();
        while (planActivityTimesEnumerator.moveNext())
        {
            PlanActivityTime planActivityTime = planActivityTimesEnumerator.currentValue();

            _node.parmProcessQuantity(this.formatProcessActivityQuantity(planActivityTime));

            while select planActivityTimeComponent
                where planActivityTimeComponent.PlanActivityTime == planActivityTime.RecId
            {
                switch (planActivityTimeComponent.TimeType)
                {
                    case PlanActivityTimeTypes::QueueTimeBefore:
                        _node.parmQueueTimeBefore(this.formatPlanActivityTime(planActivityTimeComponent));
                        break;

                    case PlanActivityTimeTypes::RunTime:
                        _node.parmRunTime(this.formatPlanActivityTime(planActivityTimeComponent));
                        break;

                    case PlanActivityTimeTypes::QueueTimeAfter:
                        _node.parmQueueTimeAfter(this.formatPlanActivityTime(planActivityTimeComponent));
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatProcessActivityQuantity</Name>
				<Source><![CDATA[
    private str formatProcessActivityQuantity(PlanActivityTime _planActivityTime)
    {
        return strFmt('%1 %2',
            this.toStrAndRemoveTrailingZeroes(_planActivityTime.ProcessQuantity),
            UnitOfMeasure::find(_planActivityTime.QuantityUnitOfMeasure).Symbol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatPlanActivityTime</Name>
				<Source><![CDATA[
    private str formatPlanActivityTime(PlanActivityTimeComponent _planActivityTimeComponent)
    {
        return strFmt('%1%2/%3%4',
            this.toStrAndRemoveTrailingZeroes(_planActivityTimeComponent.Time),
            UnitOfMeasure::find(_planActivityTimeComponent.TimeUnitOfMeasure).Symbol,
            this.toStrAndRemoveTrailingZeroes(_planActivityTimeComponent.TimeRelatedQuantity),
            UnitOfMeasure::find(_planActivityTimeComponent.QuantityUnitOfMeasure).Symbol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toStrAndRemoveTrailingZeroes</Name>
				<Source><![CDATA[
    private str toStrAndRemoveTrailingZeroes(real _value)
    {
        return System.String::Format("{0:G29}", _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignHierarchyLevelToNode</Name>
				<Source><![CDATA[
    private void assignHierarchyLevelToNode(LeanProductionFlowVisualizationNodeContract _fromNode, Set _visitedNodes)
    {
        List activityRelations = relations.lookup(any2Int64(_fromNode.parmId()));

        if (_visitedNodes.in(_fromNode.parmId()))
        {
            return;
        }

        _visitedNodes.add(_fromNode.parmId());

        var activityRelationsEnumerator = activityRelations.getEnumerator();
        while (activityRelationsEnumerator.moveNext())
        {
            LeanProductionFlowVisualizationEdgeContract edge = activityRelationsEnumerator.current();
            LeanProductionFlowVisualizationNodeContract toNode = activities.lookup(any2Int64(edge.parmToNode()));

            toNode.parmLevel(max(_fromNode.parmLevel() + 1, toNode.parmLevel()));

            this.assignHierarchyLevelToNode(toNode, _visitedNodes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignBasicHierarchyLevels</Name>
				<Source><![CDATA[
    private void assignBasicHierarchyLevels()
    {
        var activitiesEnumerator = activities.getEnumerator();
        while (activitiesEnumerator.moveNext())
        {
            this.assignHierarchyLevelToNode(activitiesEnumerator.currentValue(), new Set(Types::String));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>alignTransferAndProcessActivities</Name>
				<Source><![CDATA[
    private void alignTransferAndProcessActivities()
    {
        var activitiesEnumerator = activities.getEnumerator();
        while (activitiesEnumerator.moveNext())
        {
            LeanProductionFlowVisualizationNodeContract fromNode = activitiesEnumerator.currentValue();

            if (fromNode.parmType() == any2Int(PlanActivityType::Transfer) && fromNode.parmLevel() == 0)
            {
                List activityRelations = relations.lookup(any2Int64(fromNode.parmId()));

                if (this.areAnyActivitiesOnTheSameLevel(activityRelations))
                {
                    continue;
                }

                var activityRelationsEnumerator = activityRelations.getEnumerator();
                while (activityRelationsEnumerator.moveNext())
                {
                    LeanProductionFlowVisualizationEdgeContract edge = activityRelationsEnumerator.current();
                    LeanProductionFlowVisualizationNodeContract toNode = activities.lookup(any2Int64(edge.parmToNode()));

                    if (fromNode.parmLevel() == 0)
                    {
                        fromNode.parmLevel(toNode.parmLevel());
                    }
                    else
                    {
                        fromNode.parmLevel(min(fromNode.parmLevel(), toNode.parmLevel()));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>areAnyActivitiesOnTheSameLevel</Name>
				<Source><![CDATA[
    private boolean areAnyActivitiesOnTheSameLevel(List _activityRelations)
    {
        Set levels = new Set(Types::Integer);

        var activityRelationsEnumerator = _activityRelations.getEnumerator();
        while (activityRelationsEnumerator.moveNext())
        {
            LeanProductionFlowVisualizationEdgeContract edge = activityRelationsEnumerator.current();
            LeanProductionFlowVisualizationNodeContract toNode = activities.lookup(any2Int64(edge.parmToNode()));

            if (levels.in(toNode.parmLevel()))
            {
                return true;
            }

            levels.add(toNode.parmLevel());
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalizeLevels</Name>
				<Source><![CDATA[
    private void normalizeLevels()
    {
        int minLevel = intMax();

        var activitiesEnumerator = activities.getEnumerator();
        while (activitiesEnumerator.moveNext())
        {
            LeanProductionFlowVisualizationNodeContract node = activitiesEnumerator.currentValue();
            minLevel = min(node.parmLevel(), minLevel);
        }

        if (minLevel > 0)
        {
            activitiesEnumerator = activities.getEnumerator();
            while (activitiesEnumerator.moveNext())
            {
                LeanProductionFlowVisualizationNodeContract node = activitiesEnumerator.currentValue();
                node.parmLevel(node.parmLevel() - minLevel);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignHierarchyLevels</Name>
				<Source><![CDATA[
    private void assignHierarchyLevels()
    {
        this.assignBasicHierarchyLevels();
        this.alignTransferAndProcessActivities();
        this.normalizeLevels();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeModel</Name>
				<Source><![CDATA[
    private void initializeModel()
    {
        PlanActivity                planActivity;
        PlanActivity                dependentPlanActivity;
        PlanPlanActivity            planPlanActivity;
        PlanActivityRelationship    planActivityRelationship;

        while select planActivity
            exists join planPlanActivity
                where planPlanActivity.PlanActivity == planActivity.RecId
                    && planPlanActivity.Plan == planReferenceRecId
        {
            this.addActivity(planActivity);

            while select dependentPlanActivity
                where dependentPlanActivity.PlanActivityType == PlanActivityType::Process
                    || dependentPlanActivity.PlanActivityType == PlanActivityType::Transfer
                join planActivityRelationship
                    where planActivityRelationship.IndependentPlanActivity == planActivity.RecId
                        && planActivityRelationship.DependentPlanActivity == dependentPlanActivity.RecId
            {
                this.addRelation(planActivity, dependentPlanActivity, planActivityRelationship);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromPlan</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanProductionFlowVisualizationModel constructFromPlan(Plan _plan)
    {
        var model = new LeanProductionFlowVisualizationModel();

        model.planReferenceRecId = _plan.RecId;

        model.initializeModel();
        model.assignHierarchyLevels();

        return model;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>