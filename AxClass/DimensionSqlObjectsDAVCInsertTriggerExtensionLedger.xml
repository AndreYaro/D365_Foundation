<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionSqlObjectsDAVCInsertTriggerExtensionLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides extensions to the instead of insert trigger on <c>DimensionAttributeValueCombination</c> for ledger accounts.
/// </summary>
[System.ComponentModel.Composition.ExportAttribute("Dynamics.AX.Application.DimensionSQLObjectsDAVCInsertTriggerExtension")]
public class DimensionSQLObjectsDAVCInsertTriggerExtensionLedger extends DimensionSQLObjectsDAVCInsertTriggerExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getHashMessageTypeFlag</Name>
				<Source><![CDATA[
    public str getHashMessageTypeFlag()
    {
        return this.getHashMessageTypeFlagForType(LedgerDimensionType::Account);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHashMessageTypeFlagDefaultAccount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str getHashMessageTypeFlagDefaultAccount()
    {
        return this.getHashMessageTypeFlagForType(LedgerDimensionType::DefaultAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHashMessagePrefixCase</Name>
				<Source><![CDATA[
    public str getHashMessagePrefixCase()
    {
        return strfmt(@" WHEN %1 THEN '%2' WHEN %3 THEN '%4' ",
            enum2int(LedgerDimensionType::Account),
            this.getHashMessageTypeFlag(),
            enum2int(LedgerDimensionType::DefaultAccount),
            this.getHashMessageTypeFlagDefaultAccount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDAVCToInsertValidationSQL</Name>
				<Source><![CDATA[
    public str getDAVCToInsertValidationSQL()
    {
        // Validate an account structure is specified for each ledger account
        str sqlStatement = strFmt(@"
        IF EXISTS (SELECT 'x' FROM @DAVCToInsert WHERE LedgerDimensionType = %1 AND AccountStructure = 0)
            throw 50000, 'Combinations of type Ledger must specify an AccountStructure', 1;
        ", enum2int(LedgerDimensionType::Account));

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountStructureDerivationSQL</Name>
				<Source><![CDATA[
    public str getAccountStructureDerivationSQL()
    {
        str dimAttributeColumnCases = '';
        str filterToMultiTypedAccounts = '';
        container multiTypedAccountTypes = DimensionHierarchy::getSystemGeneratedHierarchyTypes();

        for (int i = 1; i <= conLen(multiTypedAccountTypes); i++)
        {
            DimensionHierarchyType dimHierarchyType = conpeek(multiTypedAccountTypes, i);
            str dimAttributeName = DimensionAttribute::getSystemGeneratedAttributeName(dimHierarchyType);

            dimAttributeColumnCases += strfmt(@"
                WHEN (%1 <> 0) THEN (SELECT TOP 1 DH.RECID FROM DIMENSIONHIERARCHY DH WHERE DH.PARTITION = DAVC.PARTITION AND DH.STRUCTURETYPE = %2)",
                dimAttributeName,
                enum2int(dimHierarchyType));

            filterToMultiTypedAccounts += strFmt(@"%1(%2 <> 0)", (i > 1 ? ' OR ' : ''), dimAttributeName);
        }

        str sqlStatement = strFmt(@"
            -- Derive multi-typed accounts
            UPDATE @DAVCToInsert SET ACCOUNTSTRUCTURE =
                (CASE %1
                ELSE 0
                END),
                CLEARACCOUNTSTRUCTUREATSAVE = 1
                FROM @DAVCToInsert DAVC
                WHERE DAVC.ACCOUNTSTRUCTURE = 0
                AND DAVC.LEDGERDIMENSIONTYPE = %3
                AND (%2)
        ",
            dimAttributeColumnCases,
            filterToMultiTypedAccounts,
            enum2int(LedgerDimensionType::Account));

        sqlStatement += strFmt(@"
            -- Derive default accounts
            UPDATE @DAVCToInsert SET ACCOUNTSTRUCTURE = (SELECT TOP 1 DH.RECID FROM DIMENSIONHIERARCHY DH WHERE DH.PARTITION = DAVC.PARTITION AND DH.STRUCTURETYPE = %1),
                CLEARACCOUNTSTRUCTUREATSAVE = 1
                FROM @DAVCToInsert DAVC
                WHERE DAVC.ACCOUNTSTRUCTURE = 0
                AND DAVC.LEDGERDIMENSIONTYPE = %2
        ",
            enum2int(DimensionHierarchyType::DefaultAccount),
            enum2int(LedgerDimensionType::DefaultAccount));

        sqlStatement += strFmt(@"
            -- Derive ledger accounts
            UPDATE @DAVCToInsert SET ACCOUNTSTRUCTURE = DHL.DIMENSIONHIERARCHY
                FROM @DAVCToInsert DAVC
                JOIN DIRPARTYTABLE DPT ON DPT.PARTITION = DAVC.PARTITION AND DPT.INSTANCERELATIONTYPE = %1 AND DPT.DATAAREA = DAVC.DATAAREAFORCREATION
                JOIN LEDGER L ON L.PARTITION = DAVC.PARTITION AND L.PRIMARYFORLEGALENTITY = DPT.RECID
                JOIN LEDGERSTRUCTURE LS ON LS.PARTITION = DAVC.PARTITION AND LS.LEDGER = L.RECID
                JOIN DIMENSIONHIERARCHYLEVEL DHL ON DHL.PARTITION = DAVC.PARTITION AND DHL.DIMENSIONHIERARCHY = LS.DIMENSIONHIERARCHY
                JOIN DIMENSIONATTRIBUTE DA ON DA.PARTITION = DAVC.PARTITION AND DA.RECID = DHL.DIMENSIONATTRIBUTE AND DA.TYPE = %2
                JOIN DIMENSIONCONSTRAINTTREE DCT ON DCT.PARTITION = DAVC.PARTITION AND DCT.DIMENSIONHIERARCHY = DHL.DIMENSIONHIERARCHY
                JOIN DIMENSIONCONSTRAINTNODE DCN ON DCN.PARTITION = DAVC.PARTITION AND DCN.DIMENSIONHIERARCHYLEVEL = DHL.RECID
                JOIN DIMENSIONCONSTRAINTNODECRITERIA CRIT ON CRIT.PARTITION = DAVC.PARTITION AND CRIT.DIMENSIONCONSTRAINTNODE = DCN.RECID
                WHERE DAVC.ACCOUNTSTRUCTURE = 0
                AND DAVC.LEDGERDIMENSIONTYPE = %3
                AND (DAVC.MAINACCOUNTVALUE LIKE CRIT.WILDCARDSTRING OR (
                    (CRIT.WILDCARDSTRING = '')
                AND (CRIT.RANGEFROM = '' OR (CRIT.ISFROMOPEN = 0 AND DAVC.MAINACCOUNTVALUE >= CRIT.RANGEFROM) OR (CRIT.ISFROMOPEN = 1 AND DAVC.MAINACCOUNTVALUE > CRIT.RANGEFROM))
                AND (CRIT.RANGETO = '' OR (CRIT.ISTOOPEN = 0 AND DAVC.MAINACCOUNTVALUE <= CRIT.RANGETO) OR (CRIT.ISTOOPEN = 1 AND DAVC.MAINACCOUNTVALUE < CRIT.RANGETO))
                ))
        ",
            tableNum(CompanyInfo),
            enum2int(DimensionAttributeType::MainAccount),
            enum2int(LedgerDimensionType::Account));

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvancedRuleDerivationRestrictionSQL</Name>
				<Source><![CDATA[
    public str getAdvancedRuleDerivationRestrictionSQL(str _davcToInsertTableAlias, str _dimensionRuleTableAlias)
    {
        return strFmt(@"%1.LEDGERDIMENSIONTYPE = %3 AND %2.TYPE = %4",
            _davcToInsertTableAlias,
            _dimensionRuleTableAlias,
            enum2int(LedgerDimensionType::Account),
            enum2int(DimensionRuleType::GeneralLedger));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityInstanceResolutionRestrictionSQL</Name>
				<Source><![CDATA[
    public str getEntityInstanceResolutionRestrictionSQL(DimensionAttributeType _dimAttrType, str _dimensionViewName)
    {
        str sqlStatement = '';

        if (_dimAttrType == DimensionAttributeType::MainAccount)
        {
            sqlStatement = strFmt(@"
                    JOIN LEDGER L
                    ON L.PARTITION = FS.PARTITION
                    AND L.CHARTOFACCOUNTS = %2.CATEGORY
                    JOIN DIRPARTYTABLE DPT
                    ON DPT.PARTITION = FS.PARTITION
                    AND DPT.INSTANCERELATIONTYPE = %1
                    AND DPT.RECID = L.PRIMARYFORLEGALENTITY
                    AND DPT.DATAAREA = FS.DATAAREAFORCREATION
            ",
                tableNum(CompanyInfo),
                _dimensionViewName);
        }

        return sqlStatement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>