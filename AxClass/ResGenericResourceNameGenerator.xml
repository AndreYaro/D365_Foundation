<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResGenericResourceNameGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Recommends planned activity team resource name
/// </summary>
public class ResGenericResourceNameGenerator
{
    private int nameIndex;
    private ActivityRecId activity;
    private ResourceCategoryRecId resourceCategory;
    private ResourceCategoryId categoryId;
    private Set ids;

    private Map numberOfRolesMapping;
    private int numberofResources;
    private boolean dbCall = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the resource category record identifier.
    /// </summary>
    /// <param name = "_resourceCategory">Resource category record identifier.</param>
    /// <returns>Resource category record identifier.</returns>
    public ResourceCategoryRecId resourceCategory(ResourceCategoryRecId _resourceCategory = resourceCategory)
    {
        if (resourceCategory != _resourceCategory)
        {
            resourceCategory = _resourceCategory;

            if (resourceCategory)
            {
                categoryId = ResourceCategoryFacade::getId(resourceCategory);
            }

            ids = new Set(Types::Integer);

            if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
            {
                PSAProjSchedRole teamTable;

                while select Name from teamTable
                where teamTable.RootActivity == activity
                    && teamTable.Name like strFmt('%1*', categoryId)
                {
                    this.addResourceCategoryValueSet(strReplace(teamTable.Name, categoryId, ''));
                }
            }
            else
            {
                ResActivityResourceEngagementView activityResources;

                while select Name from activityResources
                where activityResources.Activity == activity
                    && activityResources.Name like strFmt('%1*', categoryId)
                {
                    this.addResourceCategoryValueSet(strReplace(activityResources.Name, categoryId, ''));
                }
            }
        }

        return resourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResourceCategoryValueSet</Name>
				<Source><![CDATA[
    private void addResourceCategoryValueSet(str _numericId)
    {
        if (str2IntOk(_numericId))
        {
            ids.add(str2Int(_numericId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of planned activity resource name generator
    /// </summary>
    /// <param name = "_activity">Activity record identifier</param>
    /// <param name = "_resourceCategory">Resource category record identifier</param>
    protected void new(ActivityRecId _activity = 0, ResourceCategoryRecId _resourceCategory = 0)
    {
        if (_activity == 0)
        {
            dbCall = false;
        }

        if (dbCall)
        {
            activity = _activity;
            this.resourceCategory(_resourceCategory);
            nameIndex = 1;
        }
        else
        {
            numberOfRolesMapping = new Map(Types::String, Types::Integer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of planned activity resource name generator
    /// </summary>
    /// <param name = "_activity">Activity record identifier</param>
    /// <param name = "_resourceCategory">Resource category record identifier</param>
    /// <returns>Planned activity resource name generator object</returns>
    public static ResGenericResourceNameGenerator construct(ActivityRecId _activity = 0, ResourceCategoryRecId _resourceCategory = 0)
    {
        return new ResGenericResourceNameGenerator(_activity, _resourceCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next planned activity resource name
    /// </summary>
    /// <returns>Planned resource name with numeric number.</returns>
    public Name getNextName()
    {
        Name name;

        if (ids)
        {
            while (ids.in(nameIndex))
            {
                nameIndex++;
            }

            name = strfmt("%1 %2", categoryId, nameIndex);
            ids.add(nameIndex);
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextNewName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the renewed planned activity resource name
    /// </summary>
    /// <param name = "_genericResourceName">Planned activity resource name</param>
    /// <returns>New planned activity resource name</returns>
    public Name getNextNewName(Name _genericResourceName)
    {
        if (numberOfRolesMapping.exists(_genericResourceName))
        {
            numberofResources = numberOfRolesMapping.lookup(_genericResourceName) + 1;
            numberOfRolesMapping.remove(_genericResourceName);
        }
        else
        {
            numberofResources   = 1;
        }

        numberOfRolesMapping.insert(_genericResourceName, numberofResources);
        return strfmt("%1 %2", _genericResourceName, int2str(numberofResources));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>