<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceChooseNormal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjInvoiceChooseNormal extends ProjInvoiceChoose implements BatchRetryable
{
    QueryBuildDataSource retentionDataSource;
    QueryBuildDataSource retentionSaleDataSource;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignTables</Name>
				<Source><![CDATA[
    protected void assignTables()
    {
        // Do not call super()
        //super();

        if (!pProjTable || queryRun.changed(tableNum(ProjTable)))
        {
            pProjTable = queryRun.get(tableNum(ProjTable));
            pProjInvoiceTable = ProjInvoiceTable::find(pProjTable.ProjInvoiceProjId);
        }

        if (queryEmpl && queryRun.changed(tableNum(ProjEmplTrans)))
        {
            pProjEmplTrans    = queryRun.get(tableNum(ProjEmplTrans));
        }

        if (queryRevenue || querySubscription || queryRetention)
        {
            pProjRevenueTrans = queryRun.get(tableNum(ProjRevenueTrans));
        }

        if (queryCost)
        {
            pProjCostTrans    = queryRun.get(tableNum(ProjCostTrans));
        }

        if (queryItem)
        {
            pProjItemTrans    = queryRun.get(tableNum(ProjItemTrans));
        }

        if (!smaServiceOrderTable &&
            queryRun.query().dataSourceTable(tableNum(ProjOnAccTrans)) &&
            queryRun.query().dataSourceTable(tableNum(ProjOnAccTrans)).enabled())
        {
            pProjOnAccTrans   = queryRun.get(tableNum(ProjOnAccTrans));
            if (pProjOnAccTrans && !queryOnAcc    && this.isOnAccTrans(pProjOnAccTrans))
            {
                pProjOnAccTrans = null;
            }

            if (pProjOnAccTrans && !queryAdvances && this.isAdvanceTrans(pProjOnAccTrans))
            {
                pProjOnAccTrans = null;
            }
        }

        if (querySalesLine)
        {
            pSalesTable       = queryRun.get(tableNum(SalesTable));
            pSalesLine        = queryRun.get(tableNum(SalesLine));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialogRunbase = super();

        this.constructDialog(dialogRunbase);

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the fields and field groups for the dialog.
    /// </summary>
    /// <param name = "_dialogRunbase">
    /// A <c>DialogRunbase</c> instance.
    /// </param>
    protected void constructDialog(DialogRunbase _dialogRunbase)
    {
        _dialogRunbase.addGroup("@SYS90570");

        dialogInvoiceType = _dialogRunbase.addFieldValue(enumStr(ProjInvoiceTypeSelection), queryInvoiceType, "@SYS78538", "@SYS78540");

        if (!this.parmCalledFromTrans())
        {
            _dialogRunbase.addGroup("@SYS78373");

            dialogEmpl          = _dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionHours), queryEmpl, "@SYS5269", "@SYS78368");
            dialogCost          = _dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionCost), queryCost, "@SYP4882014", "@SYS78369");
            dialogItem          = _dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionItem), queryItem, "@SYS7407",  "@SYS78372");
            dialogRevenue       = _dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionRevenue), queryRevenue, "@SYS9154", "@SYS78818");
            dialogSubscription  = _dialogRunbase.addFieldValue(extendedTypeStr(SMAProjoptionSubscription), querySubscription, "@SYS84335", "@SYS90561");
            dialogOnAcc         = _dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionOnAcc), queryOnAcc, "@SYS7659", "@SYS78371");

            _dialogRunbase.addGroup("@SYS90571");
            dialogSalesLine = _dialogRunbase.addFieldValue(extendedTypeStr(ProjOptionSales), querySalesLine, "@SYS90573", "@SYS90572");
            dialogQtyUpdate = _dialogRunbase.addFieldValue(enumStr(SalesUpdate), salesUpdate, "@SYS58517", "@SYS90574" );

            _dialogRunbase.addGroup("@SYS54242");
            dialogFromDate      = _dialogRunbase.addFieldValue(extendedTypeStr(TransDate), fromDate, "@SYS24050", "@SYS90467");
            dialogToDate        = _dialogRunbase.addFieldValue(extendedTypeStr(TransDate), toDate, "@SYS80934", "@SYS90468");
        }

        invoiceDate = (invoiceDate ? invoiceDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        if (this.parmProjProposalJour())
        {
            invoiceDate = this.parmProjProposalJour().InvoiceDate;
        }

        _dialogRunbase.addGroup("@SYS23410");

        dialogInvoiceDate = _dialogRunbase.addFieldValue(extendedTypeStr(InvoiceDate), invoiceDate, "@SYS57610", "@SYS90567");

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            dialogTaxPeriodPaymentCode = _dialogRunbase.addFieldValue(extendedTypeStr(PlTaxPeriodPaymentCode), taxPeriodPaymentCode);
        }
        // </GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>doProposal</Name>
				<Source><![CDATA[
    protected void doProposal()
    {
        super();

        if (queryEmpl & queryRun.changed(tableNum(ProjEmplTrans)))
        {
            this.doEmpl();
        }

        if (queryCost && queryRun.changed(tableNum(ProjCostTrans)))
        {
            this.doCost();
        }

        if ((queryRevenue || querySubscription || queryRetention) &&
            queryRun.changed(tableNum(ProjRevenueTrans)))
        {
            this.doRevenue();
        }

        if (this.hasQueryItem() && queryRun.changed(tableNum(ProjItemTrans)))
        {
            this.doItem();
        }

        if (querySalesLine && queryRun.changed(tableNum(SalesLine)))
        {
           this.doSalesLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    void initQuery()
    {
        QueryBuildDataSource    qbdsSmaServiceOrderLine;
        QueryBuildDataSource    qbds;
        QueryBuildRange         emplTransDate,
                                costTransDate,
                                revenueTransDate,
                                itemTransDate,
                                onAccTransDate;

        QueryBuildRange         emplCurrency,
                                costCurrency,
                                revenueCurrency,
                                itemCurrency,
                                onAccCurrency;

        projInvoiceDataSource   = queryRun.query().dataSourceTable(tableNum(ProjInvoiceTable));
        projTableDataSource     = queryRun.query().dataSourceTable(tableNum(ProjTable));
        emplDataSource          = queryRun.query().dataSourceTable(tableNum(ProjEmplTrans));
        emplSaleDataSource      = queryRun.query().dataSourceTable(tableNum(ProjEmplTransSale));
        costDataSource          = queryRun.query().dataSourceTable(tableNum(ProjCostTrans));
        costSaleDataSource      = queryRun.query().dataSourceTable(tableNum(ProjCostTransSale));
        itemDataSource          = queryRun.query().dataSourceTable(tableNum(ProjItemTrans));
        itemSaleDataSource      = queryRun.query().dataSourceTable(tableNum(ProjItemTransSale));
        revenueDataSource       = queryRun.query().dataSourceTable(tableNum(ProjRevenueTrans));
        revenueSaleDataSource   = queryRun.query().dataSourceTable(tableNum(ProjRevenueTransSale));
        onAccDataSource         = queryRun.query().dataSourceTable(tableNum(ProjOnAccTrans));
        onAccSaleDataSource     = queryRun.query().dataSourceTable(tableNum(ProjOnAccTransSale));
        salesTableDataSource    = queryRun.query().dataSourceTable(tableNum(SalesTable));
        salesLineDataSource     = queryRun.query().dataSourceTable(tableNum(SalesLine));

        if (queryEmpl)
        {
            emplDataSource.enabled(true);
            emplSaleDataSource.enabled(true);
            if (fromDate || toDate)
            {
                 emplTransDate    = emplDataSource.findRange(fieldNum(ProjEmplTrans, TransDate));
                 emplTransDate.value(this.queryFromDate() + '..' + this.queryToDate());
            }

            this.addEmplTransSaleRange(emplSaleDataSource);
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                emplDataSource.addSortField(fieldNum(ProjEmplTrans,TransDate));
            }

            if (this.parmCalledFromTrans())
            {
                this.rangeTransId(emplDataSource);
            }

            if (currencyId)
            {
                emplCurrency = emplDataSource.addRange(fieldNum(ProjEmplTrans, CurrencyId));
                emplCurrency.value(queryValue(currencyId));
            }

            if (smaServiceOrderTable)
            {
                qbds = emplSaleDataSource.addDataSource(tableNum(ProjEmplTrans));
                qbds.relations(true);

                qbdsSmaServiceOrderLine = qbds.addDataSource(tableNum(SMAServiceOrderLine));
                qbdsSmaServiceOrderLine.relations(true);

                qbdsSmaServiceOrderLine.addLink(fieldNum(ProjEmplTrans, TransIdRef), fieldNum(SMAServiceOrderLine, ProjTransId));
                qbdsSmaServiceOrderLine.addLink(fieldNum(ProjEmplTrans, ProjId), fieldNum(SMAServiceOrderLine, ProjId));
                qbdsSmaServiceOrderLine.joinMode(JoinMode::InnerJoin);

                qbdsSmaServiceOrderLine.addRange(fieldNum(SMAServiceOrderLine, ServiceOrderId)).value(queryValue(smaServiceOrderTable.ServiceOrderId));
                qbdsSmaServiceOrderLine.addRange(fieldNum(SMAServiceOrderLine, ProjId)).value(queryValue(smaServiceOrderTable.ProjId));
            }
        }

        if (queryCost)
        {
            costDataSource.enabled(true);
            costSaleDataSource.enabled(true);
            if (fromDate || toDate)
            {
                 costTransDate    = costDataSource.findRange(fieldNum(ProjCostTrans, TransDate));
                 costTransDate.value(this.queryFromDate() + '..' + this.queryToDate());
            }

            this.addCostTransSaleRange(costSaleDataSource);
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                costDataSource.addSortField(fieldNum(ProjCostTrans,TransDate));
            }

            if (this.parmCalledFromTrans())
            {
                this.rangeTransId(costDataSource);
            }

            if (currencyId)
            {
                costCurrency = costDataSource.addRange(fieldNum(ProjCostTrans, CurrencyId));
                costCurrency.value(queryValue(currencyId));
            }

            if (smaServiceOrderTable)
            {
                qbds = costSaleDataSource.addDataSource(tableNum(ProjCostTrans));
                qbds.relations(true);

                qbdsSmaServiceOrderLine = qbds.addDataSource(tableNum(SMAServiceOrderLine));

                qbdsSmaServiceOrderLine.addLink(fieldNum(ProjCostTrans, TransIdRef), fieldNum(SMAServiceOrderLine, ProjTransId));
                qbdsSmaServiceOrderLine.addLink(fieldNum(ProjCostTrans, ProjId), fieldNum(SMAServiceOrderLine, ProjId));
                qbdsSmaServiceOrderLine.joinMode(JoinMode::InnerJoin);

                qbdsSmaServiceOrderLine.addRange(fieldNum(SMAServiceOrderLine, ServiceOrderId)).value(queryValue(smaServiceOrderTable.ServiceOrderId));
                qbdsSmaServiceOrderLine.addRange(fieldNum(SMAServiceOrderLine, ProjId)).value(queryValue(smaServiceOrderTable.ProjId));
            }
        }

        if (this.hasQueryItem())
        {
            itemDataSource.enabled(true);
            itemSaleDataSource.enabled(true);
            if (fromDate || toDate)
            {
                 itemTransDate    = itemDataSource.findRange(fieldNum(ProjItemTrans,TransDate));
                 itemTransDate.value(this.queryFromDate()+'..'+this.queryToDate());
            }

            this.addItemTransSaleRange(itemSaleDataSource);
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                itemDataSource.addSortField(fieldNum(ProjItemTrans,TransDate));
            }

            if (this.parmCalledFromTrans())
            {
                this.rangeTransId(itemDataSource);
            }

            if (currencyId)
            {
                itemCurrency = itemDataSource.addRange(fieldNum(ProjItemTrans, CurrencyId));
                itemCurrency.value(queryValue(currencyId));
            }
            if (smaServiceOrderTable)
            {
                qbds = itemSaleDataSource.addDataSource(tableNum(ProjItemTrans));
                qbds.relations(true);

                qbdsSmaServiceOrderLine = qbds.addDataSource(tableNum(SMAServiceOrderLine));

                qbdsSmaServiceOrderLine.addLink(fieldNum(ProjItemTrans, ProjTransIdRef), fieldNum(SMAServiceOrderLine, ProjTransId));
                qbdsSmaServiceOrderLine.addLink(fieldNum(ProjItemTrans, ProjId), fieldNum(SMAServiceOrderLine, ProjId));
                qbdsSmaServiceOrderLine.joinMode(JoinMode::InnerJoin);

                qbdsSmaServiceOrderLine.addRange(fieldNum(SMAServiceOrderLine, ServiceOrderId)).value(queryValue(smaServiceOrderTable.ServiceOrderId));
                qbdsSmaServiceOrderLine.addRange(fieldNum(SMAServiceOrderLine, ProjId)).value(queryValue(smaServiceOrderTable.ProjId));
            }
        }

        if (queryRevenue || querySubscription || queryRetention)
        {
            revenueDataSource.enabled(true);
            revenueSaleDataSource.enabled(true);
            if (fromDate || toDate)
            {
                 revenueTransDate    = revenueDataSource.findRange(fieldNum(ProjRevenueTrans, TransDate));
                 revenueTransDate.value(this.queryFromDate() + '..' + this.queryToDate());
            }

            this.addRevenueTransSaleRange(revenueSaleDataSource);

            // Description: Add range for contract line
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)) )
            {
                revenueSaleDataSource.addRange(fieldNum(ProjRevenueTransSale, TransStatus)).value(queryValue(ProjTransStatus::InvoiceProposal));
            }
            // Description: Add range for contract line
            else
            if (this.parmCalledFromTrans())
            {
                this.rangeTransId(revenueDataSource);
            }

            if (currencyId)
            {
                revenueCurrency = revenueDataSource.addRange(fieldNum(ProjRevenueTrans, CurrencyId));
                revenueCurrency.value(queryValue(currencyId));
            }
            if (smaServiceOrderTable)
            {
                qbds = revenueSaleDataSource.addDataSource(tableNum(ProjRevenueTrans));
                qbds.relations(true);

                qbdsSmaServiceOrderLine = qbds.addDataSource(tableNum(SMAServiceOrderLine));

                qbdsSmaServiceOrderLine.addLink(fieldNum(ProjRevenueTrans, TransIdRef), fieldNum(SMAServiceOrderLine, ProjTransId));
                qbdsSmaServiceOrderLine.addLink(fieldNum(ProjRevenueTrans, ProjId), fieldNum(SMAServiceOrderLine, ProjId));
                qbdsSmaServiceOrderLine.joinMode(JoinMode::InnerJoin);

                qbdsSmaServiceOrderLine.addRange(fieldNum(SMAServiceOrderLine, ServiceOrderId)).value(queryValue(smaServiceOrderTable.ServiceOrderId));
                qbdsSmaServiceOrderLine.addRange(fieldNum(SMAServiceOrderLine, ProjId)).value(queryValue(smaServiceOrderTable.ProjId));
            }
        }

        if (!smaServiceOrderTable && (queryOnAcc || queryAdvances))
        {
            onAccDataSource.enabled(true);
            onAccSaleDataSource.enabled(true);

            if (fromDate || toDate)
            {
                 onAccTransDate    = onAccDataSource.findRange(fieldNum(ProjOnAccTrans, TransDate));
                 onAccTransDate.value(this.queryFromDate() + '..' + this.queryToDate());
            }

            if (filterOnAccTrans)
            {
                onAccDataSource.addRange(fieldNum(ProjOnAccTrans, TransactionOrigin)).value(SysQuery::valueNot(ProjOrigin::Deduction));
                onAccDataSource.addRange(fieldNum(ProjOnAccTrans, TransactionOrigin)).value(SysQuery::valueNot(ProjOrigin::Prepayment));
            }

            this.addOnAccTransSaleRange(onAccSaleDataSource);

            if (this.parmCalledFromTrans())
            {
                this.rangeTransId(onAccDataSource);
            }

            if (currencyId)
            {
                onAccCurrency = onAccDataSource.addRange(fieldNum(ProjOnAccTrans, CurrencyId));
                onAccCurrency.value(queryValue(currencyId));
            }
        }

        if (querySalesLine)
        {
            salesTableDataSource.enabled(true);
            salesLineDataSource.joinMode(JoinMode::InnerJoin);
            salesLineDataSource.enabled(true);

            this.addSalesLineRange(salesLineDataSource);

            qbds = salesLineDataSource.addDataSource(tableNum(ProjProposalItem));
            qbds.addRange(fieldNum(ProjProposalItem,ItemType)).value(queryValue(ProjItemType::SalesOrder));
            qbds.relations(true);
            qbds.joinMode(JoinMode::NoExistsJoin);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjProposalJour _projProposalJour = null)
    {
        projInvoiceType = ProjInvoiceType::Invoice;

        super(_projProposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public QueryRun queryBuild()
    {
        queryRun = new QueryRun(queryStr(ProjInvoiceNormal));

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a Select button to the dialog box.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> object. If you change the return value to false, the button will no
    /// longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (!this.parmInvoiceDate())
        {
            ret = checkFailed("@SYS33044");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS50159";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasQueryItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether item proposal creation is needed
    /// </summary>
    /// <returns>true if item proposal creation is needed; otherwise, false</returns>
    protected boolean hasQueryItem()
    {
        return queryItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>