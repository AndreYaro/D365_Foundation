<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenseDimensionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains implementation for interactions between Expense and Ledger modules.
/// </summary>
class TrvExpenseDimensionHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateDefaultDimensionFromWorkerAndProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a merge of financial dimensions from a project and/or a worker only using values that are valid in <c>defaultDimensionLE</c>.
    /// </summary>
    /// <param name="dimensionDefaultFromWorker">The financial dimensions retrieved from the worker.</param>
    /// <param name="dimensionDefaultFromProject">The financial dimensions retrieved from the project.</param>
    /// <param name="workerDimensionLE">The legal entity on which the worker is employed.</param>
    /// <param name="projectDimensionLE">The legal entity on which the project is located.</param>
    /// <param name="defaultDimensionLE">The target legal entity for the returned financial dimensions.</param>
    /// <returns>A merge of default dimensions that is valid in <c>defaultDimensionLE</c>.</returns>
    public static DimensionDefault generateDefaultDimensionFromWorkerAndProject(DimensionDefault dimensionDefaultFromWorker,
                                                                                DimensionDefault dimensionDefaultFromProject,
                                                                                LegalEntityDataAreaId workerDimensionLE,
                                                                                LegalEntityDataAreaId projectDimensionLE,
                                                                                LegalEntityDataAreaId defaultDimensionLE)
    {
        DimensionDefault        defaultDimension;
        DimensionDefault        correctedProjectDefaultDimension;
        DimensionDefault        correctedWorkerDefaultDimension;
        container               correctedDimensions;

        correctedDimensions = TrvExpenseDimensionHelper::correctedDefaultDimensions(defaultDimensionLE,
                                                                                    dimensionDefaultFromWorker,workerDimensionLE,
                                                                                    dimensionDefaultFromProject, projectDimensionLE);

        correctedProjectDefaultDimension = conPeek(correctedDimensions, 1);
        correctedWorkerDefaultDimension = conPeek(correctedDimensions, 2);

        defaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(correctedProjectDefaultDimension, correctedWorkerDefaultDimension);

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDefaultDimensionForExpenseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a merge of financial dimensions from up to three financial dimensions using values that are valid in <c>defaultDimensionLE</c>.
    /// </summary>
    /// <param name="_defaultDimensionLE">The target legal entity for the returned financial dimensions.</param>
    /// <param name="_dimensionSecondInMerge">The financial dimensions second in the merge precedence order.</param>
    /// <param name="_secondDimensionLE">The legal entity in which the second dimension is valid.</param>
    /// <param name="_dimensionFirstInMerge">The financial dimensions taking precedence.</param>
    /// <param name="_firstDimensionLE">The legal entity of the first dimension. The other dimensions must be valid in this Legal entity for the merge to occur.</param>
    /// <param name="_dimensionThirdInMerge">The financial dimensions third in the merge precedence order.</param>
    /// <param name="_thirdDimensionLE">The legal entity in which the third dimension is valid.</param>
    /// <returns>A merge of default dimensions for the expense line.</returns>
    public static DimensionDefault generateDefaultDimensionForExpenseLine(LegalEntityDataAreaId _defaultDimensionLE,
                                                                            DimensionDefault _dimensionSecondInMerge,
                                                                            LegalEntityDataAreaId _secondDimensionLE,
                                                                            DimensionDefault _dimensionFirstInMerge,
                                                                            LegalEntityDataAreaId _firstDimensionLE,
                                                                            DimensionDefault _dimensionThirdInMerge = 0,
                                                                            LegalEntityDataAreaId _thirdDimensionLE = "")
    {
        DimensionDefault        correctedSecondDimension;
        DimensionDefault        correctedFirstDimension;
        DimensionDefault        correctedThirdDimension;
        container               correctedDimensions;

        correctedDimensions = TrvExpenseDimensionHelper::correctedDefaultDimensions(_defaultDimensionLE,
                                                            _dimensionSecondInMerge,_secondDimensionLE,
                                                            _dimensionFirstInMerge, _firstDimensionLE,
                                                            _dimensionThirdInMerge, _thirdDimensionLE);

        correctedFirstDimension = conPeek(correctedDimensions, 1);
        correctedSecondDimension = conPeek(correctedDimensions, 2);
        correctedThirdDimension = conPeek(correctedDimensions, 3);

        DimensionDefault expenseLineDefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(correctedFirstDimension, correctedSecondDimension, correctedThirdDimension);

        return expenseLineDefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimensionLegalEntityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine what is the accounting legal entity of an expense document. This defines the legal entity on which
    /// the document's financial dimensions should be valid.
    /// </summary>
    /// <param name="_isInterCompany">true if the document is intercompany; false otherwise.</param>
    /// <param name="_referenceDataAreaId">The source legal entity of the document.</param>
    /// <param name="_interCompanyLE">The borrowing legal entity for the document.</param>
    /// <param name="_isInterCompany">true if the document is intercompany with project; false otherwise.</param>
    /// <returns>The legal entity on which the document's default dimensions should be valid.</returns>
    public static SelectableDataArea getDefaultDimensionLegalEntityName(boolean _isInterCompany,
                                                                        SelectableDataArea _referenceDataAreaId,
                                                                        SelectableDataArea _interCompanyLE,
                                                                        boolean _isIntercompanyWithProject = false)
    {
        SelectableDataArea ret;

        ret = (!_isInterCompany || _isIntercompanyWithProject) ? _referenceDataAreaId : _interCompanyLE;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedDefaultDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets corrected or shared default dimensions for project, worker and expense report.
    /// </summary>
    /// <param name="_defaultDimensionLE">The target legal entity for the returned financial dimensions.</param>
    /// <param name="_dimensionDefaultFromWorker">The financial dimensions retrieved from the worker.</param>
    /// <param name="_workerDimensionLE">The legal entity on which the worker is employed.</param>
    /// <param name="_dimensionDefaultFromProject">The financial dimensions retrieved from the project.</param>
    /// <param name="_projectDimensionLE">The legal entity in which the project is located.</param>
    /// <param name="_dimensionDefaultFromExpenseReport">The financial dimensions retrieved from the Expense report.</param>
    /// <param name="_expenseReportLE">The legal entity in which the Expense report is processed.</param>
    /// <returns>Corrected default dimensions that  valid in <c>defaultDimensionLE</c>.
    /// Note that dimensions are returned in a different order than sent: Project, Worker, Expense report.
    /// </returns>
    private static container correctedDefaultDimensions(LegalEntityDataAreaId _defaultDimensionLE,
                                                        DimensionDefault _dimensionDefaultFromWorker,
                                                        LegalEntityDataAreaId _workerDimensionLE,
                                                        DimensionDefault _dimensionDefaultFromProject,
                                                        LegalEntityDataAreaId _projectDimensionLE,
                                                        DimensionDefault _dimensionDefaultFromExpenseReport = 0,
                                                        LegalEntityDataAreaId _expenseReportLE = "")
    {
        DimensionDefault        correctedProjectDefaultDimension;
        DimensionDefault        correctedWorkerDefaultDimension;
        DimensionDefault        correctedExpenseReportDefaultDimension;

        // Only shared dimensions of the project will be considered in case of project LE being different.
        correctedProjectDefaultDimension = TrvExpenseDimensionHelper::getSharedDefaultDimension(_dimensionDefaultFromProject, _projectDimensionLE, _defaultDimensionLE);

        // Only shared dimensions of the worker will be considered in case of worker LE being different.
        correctedWorkerDefaultDimension = TrvExpenseDimensionHelper::getSharedDefaultDimension(_dimensionDefaultFromWorker, _workerDimensionLE, _defaultDimensionLE);

        if (_dimensionDefaultFromExpenseReport != 0 && _expenseReportLE != '')
        {
            // Only shared dimensions of the expense report LE will be considered in case of intercompany expense line
            correctedExpenseReportDefaultDimension = TrvExpenseDimensionHelper::getSharedDefaultDimension(_dimensionDefaultFromExpenseReport, _expenseReportLE, _defaultDimensionLE);
        }

        return [correctedProjectDefaultDimension, correctedWorkerDefaultDimension, correctedExpenseReportDefaultDimension];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharedDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shared dimension value from a target legal entity for a dimension given from source legal entity.
    /// </summary>
    /// <param name = "_defaultDimension">Financial dimension retrieved from project, worker or expense report.</param>
    /// <param name = "_leDataAreaIDForSource">The legal entity of source company.</param>
    /// <param name = "_leDataAreaIDForTarget">The legal entity of target company.</param>
    /// <returns>Shared dimension from target legal entity.</returns>
    private static DimensionDefault getSharedDefaultDimension(DimensionDefault _defaultDimension, 
                                                              LegalEntityDataAreaId _leDataAreaIDSource,
                                                              LegalEntityDataAreaId _leDataAreaIDTarget)
    {
        DimensionDefault sharedDefaultDimension;

        // In case of LE being different only shared dimensions will be considered.
        if (_leDataAreaIDSource != _leDataAreaIDTarget)
        {
            sharedDefaultDimension = TrvExpenseDimensionHelper::getDefaultDimensionUsingSharedAttributes(_defaultDimension, _leDataAreaIDSource, _leDataAreaIDTarget);;
        }
        else
        {
            sharedDefaultDimension = _defaultDimension;
        }

        return sharedDefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimensionUsingSharedAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the default dimension for a target company based on the shared dimensions between source and target companies.
    /// </summary>
    /// <param name = "_dimensionDefaultSource">The financial dimensions retrieved from the source company.</param>
    /// <param name = "_leDataAreaIDForSource">The legal entity on source company.</param>
    /// <param name = "_leDataAreaIDForTarget">The legal entity of target company.</param>
    /// <returns>Default dimension value based of the target company.</returns>
    public static DimensionDefault getDefaultDimensionUsingSharedAttributes(DimensionDefault _dimensionDefaultSource,
                                                                                LegalEntityDataAreaId _leDataAreaIDSource,
                                                                                LegalEntityDataAreaId _leDataAreaIDTarget)
    {
        DimensionAttributeValueSetStorage       defaultStorageTarget;
        DimensionAttributeValueSetStorage       dimAttrValSetStorageSource;
        DimensionAttributeSetStorage            dimAttrSetStorageTarget;
        DimensionAttributeValue                 dimAttrValueForSource;
        DimensionAttributeRecId                 dimAttrRecId;
        DimensionEnumeration                    dimAttrSetTarget;
        DimensionDefault                        dimensionDefaultTarget;
        DimensionAttribute                      dimAttrSource;
        container                               cachedResult;
        container                               cacheKey = [_dimensionDefaultSource, _leDataAreaIDSource, _leDataAreaIDTarget];
        LedgerCacheScope                        ledgerCacheScope = LedgerCacheScope::DefaultDimensionOfSharedAttributes;

        if (_dimensionDefaultSource != 0)
        {
            cachedResult = LedgerCache::getValue(ledgerCacheScope, cacheKey);

            if (cachedResult == conNull())
            {
                // Get dimensionAttribute for target company
                dimAttrSetTarget = DimensionCache::getDimensionAttributeSetForLedger(Ledger::PrimaryLedger(CompanyInfo::findDataArea(_leDataAreaIDTarget).RecId));

                if (dimAttrSetTarget)
                {
                    dimAttrSetStorageTarget = DimensionAttributeSetStorage::find(dimAttrSetTarget);

                    // Get dimensionAttributeSetStorage for source company
                    dimAttrValSetStorageSource = DimensionAttributeValueSetStorage::find(_dimensionDefaultSource);

                    if (dimAttrValSetStorageSource && dimAttrSetStorageTarget)
                    {
                        defaultStorageTarget = new DimensionAttributeValueSetStorage();

                        // Go through all the dimension attributes from source company and capture only the shared ones
                        for (int idx = 1; idx <= dimAttrValSetStorageSource.elements(); idx++)
                        {
                            dimAttrRecId = dimAttrValSetStorageSource.getAttributeByIndex(idx);

                            if (dimAttrSetStorageTarget.containsDimensionAttribute(dimAttrRecId))
                            {
                                dimAttrSource = DimensionAttribute::find(dimAttrValSetStorageSource.getAttributeByIndex(idx));

                                if (!TrvExpenseDimensionHelper::isSharedDimensionAttributeBackingEntityDataPerCompany(dimAttrSource.BackingEntityTableId))
                                {
                                    // Add this specific dimension attribute value to the target company set
                                    select dimAttrValueForSource
                                        where dimAttrValueForSource.Recid == dimAttrValSetStorageSource.getValueByIndex(idx);

                                    defaultStorageTarget.addItem(dimAttrValueForSource);
                                }
                            }
                        }
                    }

                    dimensionDefaultTarget = defaultStorageTarget.save();

                    cachedResult = [dimensionDefaultTarget];

                    LedgerCache::insertValue(ledgerCacheScope, cacheKey, cachedResult);
                }
            }
        }

        return conpeek(cachedResult, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSharedDimensionAttributeBackingEntityDataPerCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Figure out whether backing entity behind the dimension attribute is saving data per company or not.
    /// </summary>
    /// <param name = "_backingEntityTableId">Dimension attribute backing entity table id.</param>
    /// <returns>True if backing entity data is saved per company, otherwise false.</returns>
    public static boolean isSharedDimensionAttributeBackingEntityDataPerCompany(RefTableId _backingEntityTableId)
    {
        boolean                 backingEntityDataPerCompany = false;
        DictTable               dictTable;
        container               cachedResult;
        container               cacheKey = [_backingEntityTableId];
        DimensionCacheScope     dimensionCacheScope = DimensionCacheScope::DimensionAttributeSaveDataPerCompany;

        cachedResult = DimensionCache::getValue(dimensionCacheScope, cacheKey);

        if (cachedResult == conNull())
        {
            dictTable = new DictTable(_backingEntityTableId);
            if (dictTable.dataPrCompany())
            {
                backingEntityDataPerCompany = true;
            }

            cachedResult = [backingEntityDataPerCompany];

            DimensionCache::insertValue(dimensionCacheScope, cacheKey, cachedResult);
        }

        return conpeek(cachedResult, 1);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>