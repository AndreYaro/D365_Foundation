<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcJobItemTaskBatchManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BOMCalcJobItemTaskBatchManager</c> class is responsible for creating batch tasks for the BOM calculation.
/// </summary>
class BomCalcJobItemTaskBatchManager
{
    #DEFINE.DEFAULT_NUMBER_OF_BATCHSESSIONS(4)
    #DEFINE.MAX_NUMBER_OF_BATCHSESSIONS(64)

    BatchHeader batchHeader;
    Batch       currentBatch;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTask</Name>
				<Source><![CDATA[
/// <summary>
    ///    Adds a run time batch task and handles dependencies.
    /// </summary>
    /// <param name="_dependentTaskList">
    ///    A list of tasks that the batch on which the task is dependent.
    /// </param>
    /// <param name="_runBaseBatchtask">
    ///    The task to run.
    /// </param>
    protected void addTask(
        List                    _dependentTaskList,
        RunBaseBatch            _runBaseBatchtask)
    {
        RunBaseBatch                dependentTask;
        ListEnumerator              depTaskEnumerator;

        _runBaseBatchtask.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);

        batchHeader.addRuntimeTask(_runBaseBatchtask,this.parmCurrentBatch().RecId);

        depTaskEnumerator = _dependentTaskList.getEnumerator();

        while (depTaskEnumerator.moveNext())
        {
            dependentTask = depTaskEnumerator.current();
            batchHeader.addDependency(_runBaseBatchtask, dependentTask, BatchDependencyStatus::FinishedOrError);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates batch tasks for an instance of the <c>BOMCalcJob_All</c> class.
    /// </summary>
    /// <param name="_bomCalcJob_All">
    /// An instance of the <c>BOMCalcJob_All</c> class
    /// </param>
    public void createBatchTasks(BOMCalcJob_All _bomCalcJob_All)
    {
        int                             numberOfBatchSessions;
        int                             i;
        List                            dependentTaskList;
        List                            currentTaskList;
        RunBaseBatch                    runBaseBatchTask;
        BomCalcItemTask                 bomCalcItemTask;

        numberOfBatchSessions = this.numberOfBatchSessions();

        //do bomcalculation from bottom up
        while select bomLevel from bomCalcItemTask
        group by bomLevel
        order by bomLevel desc
            where bomCalcItemTask.SessionGuid == _bomCalcJob_All.parmSessionGuid()
        {
            dependentTaskList = new List(Types::Class);

            //each level of tasks is dependent on the level before, so the last levels current tasks is the dependent tasks for the new loop
            if (currentTaskList)
            {
                dependentTaskList.appendList(currentTaskList);
            }

            currentTaskList = new List(Types::Class);

            //create batch tasks that will do the actual calculation
            for (i=1; i<= numberOfBatchSessions; i++)
            {
                runBaseBatchTask = this.createCalculationTask(bomCalcItemTask,_bomCalcJob_All);
                this.addTask(dependentTaskList, runBaseBatchTask);
                currentTaskList.addEnd(runBaseBatchTask);
            }
        }
        //nothing was added so there is nothing to run
        if (!currentTaskList)
        {
            return;
        }
        //add clean up task as the last one
        runBaseBatchTask = this.createCleanUpTask(_bomCalcJob_All);
        this.addTask(currentTaskList,runBaseBatchTask);

        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalculationTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a task used for the BOM calculation.
    /// </summary>
    /// <param name="_bomCalcItemTask">
    ///    A <c>BOMCalcItemTask</c> record that is used to instantiate the task.
    /// </param>
    /// <param name="_bomCalcJob_All">
    ///    A <c>BOMCalcJob_All</c> instance used to instantiate the task.
    /// </param>
    /// <returns>
    ///    A task used for the BOM calculation.
    /// </returns>
    protected RunBaseBatch createCalculationTask(
        BomCalcItemTask _bomCalcItemTask,
        BOMCalcJob_All _bomCalcJob_All)
    {
        BOMCalcJobRunCalculationTask bomCalcJobRunCalculationTask = BOMCalcJobRunCalculationTask::newFromParameters(_bomCalcItemTask.bomLevel,_bomCalcJob_All);

        return bomCalcJobRunCalculationTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCleanUpTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a task used for clean up after the BOM calculation.
    /// </summary>
    /// <param name="_bomCalcJob_All">
    /// A <c>BOMCalcJob_All</c> instance used to instantiate the task.
    /// </param>
    /// <returns>
    /// A task used for clean up after the BOM calculation.
    /// </returns>
    protected RunBaseBatch createCleanUpTask(BOMCalcJob_All _bomCalcJob_All)
    {
        BOMCalcJobCleanUpTask bomCalcJobCleanUpTask = BOMCalcJobCleanUpTask::newFromClass(_bomCalcJob_All);

        return bomCalcJobCleanUpTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultNumberOfBatchSessions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the default number of batch sessions that are used when you create batch tasks.
    /// </summary>
    /// <returns>
    ///    The default number of batch sessions that are used when you create batch tasks.
    /// </returns>
    protected int defaultNumberOfBatchSessions()
    {
        return #DEFAULT_NUMBER_OF_BATCHSESSIONS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfBatchSessions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number of batch sessions that are used when you create batch tasks.
    /// </summary>
    /// <returns>
    ///    The number of batch sessions that are used when you create batch tasks.
    /// </returns>
    protected int numberOfBatchSessions()
    {
        SysServerConfig             serverConfig;
        BatchServerConfig           batchServerConfig;

        int numberOfBatchSessions = 0;

        select sum(MaxBatchSessions) from batchServerConfig
        join TableId from serverConfig
            where serverConfig.ServerId         == batchServerConfig.ServerId
            &&    serverConfig.EnableBatch      == NoYes::Yes;

        if (batchServerConfig.MaxBatchSessions)
        {
            // When number of batch sessions reach to 160 in real case, BatchConstraints table impact perf dramatically because of blocking.
            // So limit the number of total batch sessions bellow 64.
            numberOfBatchSessions = min(batchServerConfig.MaxBatchSessions, #MAX_NUMBER_OF_BATCHSESSIONS);
        }

        if (numberOfBatchSessions == 0)
        {
            numberOfBatchSessions = this.defaultNumberOfBatchSessions();
        }

        return numberOfBatchSessions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchHeader</Name>
				<Source><![CDATA[
    public BatchHeader parmBatchHeader(BatchHeader _batchHeader = batchHeader)
    {
        batchHeader = _batchHeader;

        return batchHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentBatch</Name>
				<Source><![CDATA[
    public Batch parmCurrentBatch(Batch _currentBatch = currentBatch)
    {
        currentBatch = _currentBatch;

        return currentBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGroupId</Name>
				<Source><![CDATA[
    private void setGroupId(RunBaseBatch _runBaseBatch)
    {
        _runBaseBatch.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>BOMCalcJobItemTaskBatchManager</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>BOMCalcJobItemTaskBatchManager</c> class.
    /// </returns>
    public static BOMCalcJobItemTaskBatchManager construct()
    {
        return new BOMCalcJobItemTaskBatchManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBatchParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>BOMCalcJobItemTaskBatchManager</c> class.
    /// </summary>
    /// <param name="_batchHeader">
    ///    A <c>BatchHeader</c> that is used when you create the batch tasks.
    /// </param>
    /// <param name="_currentBatch">
    ///    A <c>Batch</c> record that is used when you create the batch tasks.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>BOMCalcJobItemTaskBatchManager</c> class.
    /// </returns>
    public static BOMCalcJobItemTaskBatchManager newFromBatchParameters(
        BatchHeader _batchHeader,
        Batch       _currentBatch)
    {
        BOMCalcJobItemTaskBatchManager  bomCalcJobItemTaskBatchManager;

        if (!_batchHeader)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        bomCalcJobItemTaskBatchManager = BOMCalcJobItemTaskBatchManager::construct();
        bomCalcJobItemTaskBatchManager.parmBatchHeader(_batchHeader);
        bomCalcJobItemTaskBatchManager.parmCurrentBatch(_currentBatch);

        return bomCalcJobItemTaskBatchManager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>