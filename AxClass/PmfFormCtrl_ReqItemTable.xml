<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ReqItemTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class serves as a FormCtrl for ReqItemTable
/// </summary>
class PmfFormCtrl_ReqItemTable extends PmfFormCtrl
{
    InventTable     inventTable;
    ReqItemTable    reqItemTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ReqItemTable,PdsFormulaPriority_PmfPlanningItemId)),
                methodstr(PmfFormCtrl_ReqItemTable, isCoByItem),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ReqItemTable,PdsFormulaPriority_PmfPlanPriorityDefault)),
                methodstr(PmfFormCtrl_ReqItemTable, isCoByItem),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ReqItemTable,PdsFormulaPriority_PmfPlanPriorityCurrent)),
                methodstr(PmfFormCtrl_ReqItemTable, isCoByItem),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ReqItemTable,PdsFormulaPriority_PmfPlanPriorityDateChanged)),
                methodstr(PmfFormCtrl_ReqItemTable, isCoByItem),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ReqItemTable,pdsCWQtyMin)),
                methodstr(PmfFormCtrl_ReqItemTable, isCWItem),
                ButtonRuleEffectType::AllowEdit);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ReqItemTable,ReqItemTable_MinInventOnhand)),
                methodstr(PmfFormCtrl_ReqItemTable, isStdItem),
                ButtonRuleEffectType::AllowEdit);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ReqItemTable,pdsCWQtyMax)),
                methodstr(PmfFormCtrl_ReqItemTable, isSpecificationOfCWMaxValueAllowed),
                ButtonRuleEffectType::AllowEdit);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ReqItemTable,ReqItemTable_MaxInventOnhand)),
                methodstr(PmfFormCtrl_ReqItemTable, isSpecificationOfInventMaxValueAllowed),
                ButtonRuleEffectType::AllowEdit);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ReqItemTable,MinMax_M_pdsCWQtyMin)),
                methodstr(PmfFormCtrl_ReqItemTable, isCWItem),
                ButtonRuleEffectType::AllowEdit);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ReqItemTable,MinMax_MinInventOnhand)),
                methodstr(PmfFormCtrl_ReqItemTable, isStdItem),
                ButtonRuleEffectType::AllowEdit);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ReqItemTable,MinMax_M_pdsCWQtyMax)),
                methodstr(PmfFormCtrl_ReqItemTable, isSpecificationOfCWMaxValueAllowed),
                ButtonRuleEffectType::AllowEdit);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ReqItemTable,MinMax_MaxInventOnhand)),
                methodstr(PmfFormCtrl_ReqItemTable, isSpecificationOfInventMaxValueAllowed),
                ButtonRuleEffectType::AllowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCoByItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check ifcaller item is a co/by product
    /// </summary>
    /// <returns>True if item is either co/by products; oterwise false</returns>
    protected boolean isCoByItem()
    {
        return InventTable::isCoByItem(inventTable.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCWItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the selected item is catch-weight.
    /// </summary>
    /// <returns>
    ///     true if the item is catch-weight.
    /// </returns>
    public boolean isCWItem()
    {
        return PdsGlobal::pdsIsCWItem(reqItemTable.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSpecificationOfCWMaxValueAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the selected settings allow the specification of the maximum catch-weight quantity value.
    /// </summary>
    /// <returns>
    ///     true if the coverage rules allow specification of the maximum catch-weight quantity value.
    /// </returns>
    public boolean isSpecificationOfCWMaxValueAllowed()
    {
        return this.isSpecificationOfMaxValueAllowed() && this.isCWItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSpecificationOfInventMaxValueAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the selected settings allow the specification of the maximum inventory quantity value.
    /// </summary>
    /// <returns>
    ///     true if the coverage rules allow specification of the maximum inventory quantity value.
    /// </returns>
    public boolean isSpecificationOfInventMaxValueAllowed()
    {
        return this.isSpecificationOfMaxValueAllowed() && this.isStdItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSpecificationOfMaxValueAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the selected settings allow the specification of the maximum value.
    /// </summary>
    /// <returns>
    ///     true if the coverage rules allow specification of the maximum value.
    /// </returns>
    /// <remarks>
    ///     The maximum value of the buffer is reset if the maximum value is not allowed.
    ///     This is because the action of unchecking the coverage group override
    ///     will not reset the value and that may leave the database with an unconsistent min-max combination.
    /// </remarks>
    public boolean isSpecificationOfMaxValueAllowed()
    {
        boolean ret = reqItemTable.isMaxInventOnhandEditable();
        if (!ret)
        {
            //reset the value or user can achieve a wrong combination by unchecking the override checkbox
            reqItemTable.MaxInventOnhand = 0;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStdItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the selected item is not catch-weight.
    /// </summary>
    /// <returns>
    ///     true if the item does not have catch-weight definitions.
    /// </returns>
    public boolean isStdItem()
    {
        return !this.isCWItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The object is created
    /// </summary>
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refresh</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the rule effect buttons.
    /// </summary>
    public void refresh()
    {
        this.refreshManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set inventTable variable for parameter if InventTable record
    /// </summary>
    /// <param name="_common">record of caller</param>
    public void setCaller(Common _common)
    {
        if (_common.TableId == tablenum(InventTable))
        {
            inventTable = _common;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReqItemTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the datasource buffer of the <c>ReqItemTable</c> table.
    /// </summary>
    /// <param name="_bufferReqItemTable">
    ///    A <c>ReqItemTable</c> record buffer to set.
    /// </param>
    public void setReqItemTableBuffer(ReqItemTable _bufferReqItemTable)
    {
        reqItemTable = _bufferReqItemTable;
        if (inventTable.ItemId != reqItemTable.ItemId)
        {
            inventTable = InventTable::find(reqItemTable.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>returns instance</returns>
    public static PmfFormCtrl_ReqItemTable construct()
    {
        return new PmfFormCtrl_ReqItemTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set Form control based on calling form
    /// </summary>
    /// <param name="_fr">Calling Form</param>
    /// <returns>Return new instance of PmfFromCtrl_ReqItemTable</returns>
    public static PmfFormCtrl_ReqItemTable newFromForm(
        FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_ReqItemTable::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>