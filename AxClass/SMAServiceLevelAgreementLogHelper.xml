<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaServiceLevelAgreementLogHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmaServiceLevelAgreementLogHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAndStopSLA</Name>
				<Source><![CDATA[
        public static boolean checkAndStopSLA(SMAServiceOrderId _serviceOrderId, Common argsType)
    {
        Args                    args;
        MenuFunction            menuFunction;
        boolean                 result = false;

        // check if SLA is open
        if (SMAServiceLevelAgreementLogHelper::shouldStopSLALog(_serviceOrderId))
        {
            result = true;

            // show SLA cancel prompt
            menuFunction = new MenuFunction(menuitemactionstr(SMAServiceLevelAgreementLog_Close), MenuItemType::Action);
            args = new Args();
            args.record(argsType);
            menuFunction.run(args);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndStopSLAWeb</Name>
				<Source><![CDATA[
        public static boolean checkAndStopSLAWeb(SMAServiceOrderId _serviceOrderId,
                                            SMASLAStartDateTime _endTime,
                                            boolean _createReason,
                                            SMAReasonId _reasonId,
                                            Description _description)
    {
        SMAServiceLevelAgreementLog     serviceLevelAgreementLog;
        SMAServiceOrderTable            serviceOrder;
        SMAReasonType                   reasonType = SMAReasonType::Stop;
        SMAParameters                   parameters = SMAParameters::find();
        SMALatestCompletionDateTime     lastCompletionDateTime;
        boolean                         result = false;

        // make sure we should stop the SLA in the first place
        if (!SMAServiceLevelAgreementLogHelper::shouldStopSLALog(_serviceOrderId))
            return result;

        if (_createReason && (!_reasonId || !SMAReasonTable::find(_reasonId)))
        {
            // Invalid reason specified
            return checkFailed("@SYS104856");
        }

        // check if reason should be provided
        if (!_createReason && parameters.ReasonOnExceedTime)
        {
            serviceOrder = SMAServiceOrderTable::find(_serviceOrderId);
            lastCompletionDateTime = serviceOrder.displayLatestCompletionDateTime();

            if (_endTime > lastCompletionDateTime)
            {
                // A reason must be specified when the service order is closed later than agreed
                return checkFailed("@SYS104857");
            }
        }

        ttsbegin;

        select firstonly forupdate serviceLevelAgreementLog order by RecId desc
            where serviceLevelAgreementLog.ServiceOrderId == _serviceOrderId;

        serviceLevelAgreementLog.EndDateTime    = _endTime;
        serviceLevelAgreementLog.Status         = SMALogStatus::Closed;

        if (serviceLevelAgreementLog.validateWrite())
        {
            serviceLevelAgreementLog.update();

            serviceOrder = SMAServiceOrderTable::find(_serviceOrderId, true);
            serviceOrder.ServiceLevelAgreementStatus = SMALogStatus::Closed;
            serviceOrder.calcServiceLevelAgreementCompliance();

            serviceOrder.update();

            if (_createReason)
            {
                SMAServiceOrderReason::createReasonFromTimeLog(_serviceOrderId, _reasonId, reasonType, _description);
            }

            result = true;
        }

        ttscommit;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateSignOffServiceOrderFromLine</Name>
				<Source><![CDATA[
        public static void checkUpdateSignOffServiceOrderFromLine(SMAServiceOrderLine _serviceLine)
    {
        SMAServiceOrderTable   serviceOrderTable;
        SMAServiceOrderLine    serviceOrderLine;

        serviceOrderTable = SMAServiceOrderTable::find(_serviceLine.ServiceOrderId,true);

        if ((_serviceLine.SignOff != serviceOrderTable.SignOff))
        {
            // Sign off the Service Order if all lines are signed off
            select RecId from  serviceOrderLine
                         where serviceOrderLine.ServiceOrderId  == _serviceLine.ServiceOrderId
                            && serviceOrderLine.SignOff         == NoYes::No;
            serviceOrderTable.SignOff   = !serviceOrderLine.RecId;
            serviceOrderTable.update(true, false, null, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSignOffServiceOrderLines</Name>
				<Source><![CDATA[
        public static boolean shouldSignOffServiceOrderLines(SMAServiceOrderId _serviceOrderId, RecId _serviceLineRecId)
    {
        SMAServiceOrderLine     serviceOrderLine;

        // all lines should be signed off to sign off the header
        select RecId from  serviceOrderLine
                         where serviceOrderLine.ServiceOrderId  == _serviceOrderId
                            && serviceOrderLine.SignOff         == NoYes::No
                            && serviceOrderLine.RecId           != _serviceLineRecId;

        return SMAServiceOrderLine::existServiceOrderLine(_serviceOrderId)
                && !serviceOrderLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldStopSLALog</Name>
				<Source><![CDATA[
        public static boolean shouldStopSLALog(SMAServiceOrderId _serviceOrderId)
    {
        SMAServiceOrderTable serviceOrder = SMAServiceOrderTable::find(_serviceOrderId);

        return serviceOrder.SignOff == NoYes::No &&
                 serviceOrder.ServiceLevelAgreementStatus == SMALogStatus::Open;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>