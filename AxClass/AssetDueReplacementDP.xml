<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDueReplacementDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetDueReplacementDP</c> class provides data for the <c>AssetDueReplacement</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(AssetDueReplacementDS)),
    SRSReportParameterAttribute(classStr(AssetDueReplacementContract))
]
public class AssetDueReplacementDP extends SRSReportDataProviderPreProcessTempDb
{
    AssetBook assetBook;
    AssetBookTable assetBookTable;
    AssetDueReplacementTmp assetDueReplacementTmp;
    AssetTable assetTable;
    DimensionAttributeValueSetItemView dimensionAttributeValueSetItemView;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetDueReplacementTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves data from the <c>AssetDueReplacementTmp</c> table.
    /// </summary>
    /// <returns>
    ///    A buffer from the <c>AssetDueReplacementTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(AssetDueReplacementTmp))]
    public AssetDueReplacementTmp getAssetDueReplacementTmp()
    {
        select assetDueReplacementTmp;
        return assetDueReplacementTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetDueReplacementTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>AssetDueReplacementTmp</c> table.
    /// </summary>
    private void insertAssetDueReplacementTmp()
    {
        DimensionAttributeValue dimensionAttributeValue;

        assetDueReplacementTmp.AssetId              = assetTable.AssetId;
        assetDueReplacementTmp.AssetGroup           = assetTable.AssetGroup;
        assetDueReplacementTmp.Name                 = assetTable.Name;
        assetDueReplacementTmp.AssetReplaceCost     = assetTable.AssetReplaceCost;
        assetDueReplacementTmp.BookId               = assetBook.BookId;
        assetDueReplacementTmp.AcquisitionPrice     = assetBook.AcquisitionPrice;
        assetDueReplacementTmp.AcquisitionDate      = assetBook.AcquisitionDate;
        assetDueReplacementTmp.ReplacementDate      = assetBook.ReplacementDate;
        assetDueReplacementTmp.CurrentOperationsTax = assetBookTable.CurrentOperationsTax;

        if (this.parmDataContract().parmDimensionAttribute() == '')
        {
            // A Dimension for grouping was not selected.
            assetDueReplacementTmp.Dimension = "";
        }
        else
        {
            dimensionAttributeValue = DimensionAttributeValue::find(dimensionAttributeValueSetItemView.DimensionAttributeValue);

            if (!dimensionAttributeValue)
            {
                // No dimension value was found; print the dimension attribute name with a blank value.
                assetDueReplacementTmp.Dimension = strFmt("%1 :", this.parmDataContract().parmDimensionAttribute());
            }
            else
            {
                // A dimension value was found; print the dimension attribute name, attribute value, and attibute value name.
                assetDueReplacementTmp.Dimension = strFmt("%1 : %2 - %3", this.parmDataContract().parmDimensionAttribute(), dimensionAttributeValueSetItemView.DisplayValue, dimensionAttributeValue.getName());
            }
        }

        assetDueReplacementTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves records based on the entered parameter values and inserts records into the <c>AssetDueReplacementTmp</c> table.
    /// </summary>
    public void processReport()
    {
        CurrentOperationsTax        postingLayer;
        AssetReplacementDate        dateFrom;
        AssetReplacementDate        dateTo;
        Name                        dimension;
        AssetDueReplacementContract contract;
        Query                       query;
        QueryRun                    queryRun;
        QueryBuildDataSource        qbds;

        contract        = this.parmDataContract();
        postingLayer    = contract.parmPostingLayer();
        dateFrom        = contract.parmDateFrom();
        dateTo          = contract.parmDateTo();
        dimension       = contract.parmDimensionAttribute();

        query = new Query(this.parmQuery());

        qbds = query.dataSourceTable(tableNum(AssetBook));
        SysQuery::findOrCreateRange(qbds, fieldNum(AssetBook, ReplacementDate)).value(queryRange(dateFrom, dateTo));

        qbds = query.dataSourceTable(tableNum(AssetBookTable));
        SysQuery::findOrCreateRange(qbds, fieldNum(AssetBookTable, CurrentOperationsTax)).value(queryValue(postingLayer));

        if (dimension != '')
        {
            query.dataSourceTable(tableNum(DimensionAttributeValueSetItemView)).addRange(fieldNum(DimensionAttributeValueSetItemView, DimensionAttribute)).value(
                queryValue(DimensionAttribute::findByName(dimension).RecId));
        }
        else
        {
            query.dataSourceTable(tableNum(DimensionAttributeValueSetItemView)).enabled(false);
        }

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            assetTable              = queryRun.get(tableNum(AssetTable));
            assetBook               = queryRun.get(tableNum(AssetBook));
            assetBookTable          = queryRun.get(tableNum(AssetBookTable));

            if (dimension != '')
            {
                dimensionAttributeValueSetItemView = queryRun.get(tableNum(DimensionAttributeValueSetItemView)) as DimensionAttributeValueSetItemView;
            }

            this.insertAssetDueReplacementTmp();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
