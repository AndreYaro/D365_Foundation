<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBalancesDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>AssetBalancesDP_IN</c> declares the variables, tables, enums etc used in the <c>AssetBalances_IN</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(AssetBalancesContract)),
    SRSReportQueryAttribute(queryStr(AssetBalances_IN))
]
public class AssetBalancesDP_IN extends SrsReportDataProviderPreProcessTempDB
{
    AssetBalancesTmp_IN          assetBalancesTmp_IN;
    AssetSumCalc_Trans_IN        assetSumCalc_Trans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetBalancesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// The data for the report in the <c>AssetBalancesTmp_IN</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(AssetBalancesTmp_IN))
    ]
    public AssetBalancesTmp_IN getAssetBalancesTmp()
    {
        return assetBalancesTmp_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetGroupNetBookOrPLValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates NetBookValue and ProfitLossValue.
    /// </summary>
    /// <param name="_calculatePLValue">
    /// Holds Yes or No value to indicate whether ProfitLossValue calculated.
    /// </param>
    /// <param name="_bookId">
    /// The <c>BookId</c> field to which value is assigned.
    /// </param>
    /// <param name="_assetGroupId">
    /// The <c>AssetGroupId</c> field to which value is assigned.
    /// </param>
    /// <returns>
    /// The NetBookValue or the profitLossValue based on _calculatePLValue parameter.
    /// </returns>
    public AssetNetBookValue getAssetGroupNetBookOrPLValue(
        NoYes           _calculatePLValue,
        AssetBookId     _bookId,
        AssetGroupId    _assetGroupId)
    {
        AssetSumCalc assetSumCalc;

        assetSumCalc = assetSumCalc_Trans;
        assetSumCalc.parmAllAssetsSold_IN(AssetBook::checkAllAssetsSold_IN(_assetGroupId, _bookId));

        assetSumCalc.parmGroup_IN(NoYes::Yes);

        if (_calculatePLValue == NoYes::Yes)
        {
            return assetSumCalc.profitLossValue();
        }
        else
        {
            return assetSumCalc.netBookValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetBalancesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into temporary table <c>AssetBalancesTmp_IN</c>.
    /// </summary>
    /// <param name="_groupStatus">
    /// Holds <c>Status</c> field to which value is set.
    /// </param>
    /// <param name="_name">
    /// Holds <c>Name</c> field to which value is set.
    /// </param>
    /// <param name="_groupnetVisibilityFlag">
    /// Holds Yes or No value to set GroupNetBookValueFlag.
    /// </param>
    /// <param name="_assetSumCalc">
    /// Holds <c>AssetSumCalc</c> class object.
    /// </param>
    /// <param name="_assetBook">
    /// Passes <c>AssetBook</c> table object.
    /// </param>
    private void insertAssetBalancesTmp(
        AssetStatus     _groupStatus,
        AssetName       _name,
        boolean         _groupnetVisibilityFlag,
        AssetSumCalc    _assetSumCalc,
        AssetBook       _assetBook)
    {
        assetBalancesTmp_IN.AssetGroup         = _assetBook.AssetGroup;
        assetBalancesTmp_IN.AssetId            = _assetBook.AssetId;
        assetBalancesTmp_IN.Name               = _name;
        assetBalancesTmp_IN.BookId             = _assetBook.BookId;
        assetBalancesTmp_IN.Status             = _assetBook.Status;
        assetBalancesTmp_IN.GroupStatus        = _groupStatus;
        assetBalancesTmp_IN.AcquisitionValue   = _assetSumCalc.acquisitionValueAll();
        assetBalancesTmp_IN.Bonus              = _assetSumCalc.bonusDepreciationValue();
        assetBalancesTmp_IN.DepreciationValue  = (_assetSumCalc.depreciationValueAll() +
                                                 _assetSumCalc.extraDepreciationValue());
        assetBalancesTmp_IN.DisposalSaleValue  = _assetSumCalc.disposalValue();
        assetBalancesTmp_IN.RevaluationValue   = _assetSumCalc.revaluationValue();
        assetBalancesTmp_IN.WriteDownAdjValue  = _assetSumCalc.writeUpDownAdjValue();
        assetBalancesTmp_IN.ProfitLossValue    = (_assetSumCalc.profitLossValue() +
                                                 _assetSumCalc.capitalReserveValue());
        assetBalancesTmp_IN.NetBookValue       = _assetSumCalc.netBookValue();

        assetBalancesTmp_IN.AcquisitionGroupValue  = assetSumCalc_Trans.acquisitionValueAll();
        assetBalancesTmp_IN.BonusGroupValue        = assetSumCalc_Trans.bonusDepreciationValue();
        assetBalancesTmp_IN.DepreciationGroupValue = (assetSumCalc_Trans.depreciationValueAll() +
                                                        assetSumCalc_Trans.extraDepreciationValue());
        assetBalancesTmp_IN.DisposalSaleGroupValue = assetSumCalc_Trans.disposalValue();
        assetBalancesTmp_IN.RevaluationGroupValue  = assetSumCalc_Trans.revaluationValue();
        assetBalancesTmp_IN.WriteDownAdjGroupValue = assetSumCalc_Trans.writeUpDownAdjValue();

        assetBalancesTmp_IN.ProfitLossGroupValue = this.getAssetGroupNetBookOrPLValue(
          NoYes::Yes,
          _assetBook.BookId,
          _assetBook.AssetGroup);

        assetBalancesTmp_IN.AssetGroupNetBookValue = this.getAssetGroupNetBookOrPLValue(
          NoYes::No,
          _assetBook.BookId,
          _assetBook.AssetGroup);

        assetBalancesTmp_IN.GroupNetBookValueFlag = _groupnetVisibilityFlag;
        assetBalancesTmp_IN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        boolean groupnetVisibilityFlag;

        if (AssetParameters::find().DepreciationIncomeTaxAct_IN)
        {
            groupnetVisibilityFlag = NoYes::Yes;
        }
        else
        {
            groupnetVisibilityFlag = NoYes::No;
        }

        QueryRun queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            AssetBook assetBook = queryRun.get(tablenum(AssetBook));
            AssetTable assetTable = queryRun.get(tablenum(AssetTable));
            AssetStatus groupStatus = assetBook.Status;

            AssetGroupId currentAssetGroup;
            AssetBook assetBookLoc;

            if (currentAssetGroup != assetBook.AssetGroup)
            {
                select firstOnly recId from assetBookLoc
                    where assetBookLoc.AssetGroup == assetBook.AssetGroup
                        && assetBookLoc.Status == AssetStatus::Open;
                currentAssetGroup = assetBook.AssetGroup;
            }

            if (assetBookLoc.RecId)
            {
                groupStatus = AssetStatus::Open;
            }

            AssetSumCalcType assetSumCalcType = AssetSumCalcType::MST;
            AssetBalancesContract contract = this.parmDataContract() as AssetBalancesContract;

            if (contract)
            {
                assetSumCalcType = contract.parmCurrencySelection() == LedgerCurrencySelection::Accounting ? AssetSumCalcType::MST : AssetSumCalcType::Reporting;
            }

            AssetSumCalc assetSumCalc = AssetSumCalc_Trans::newAssetYearByCurrency(
                assetBook.AssetId,
                assetBook.BookId,
                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                AssetYear::All,
                assetSumCalcType);

            assetSumCalc_Trans = AssetSumCalc_Trans_IN::newAssetYearByCurrency(
                assetBook.AssetGroup,
                assetBook.BookId,
                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                AssetYear::All,
                assetSumCalcType);

            this.insertAssetBalancesTmp(
                groupStatus,
                assetTable.Name,
                groupnetVisibilityFlag,
                assetSumCalc,
                assetBook);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>