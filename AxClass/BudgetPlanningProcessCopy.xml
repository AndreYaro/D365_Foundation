<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanningProcessCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanningProcessCopy</c> class creates a copy of the budget planning process.
/// </summary>
class BudgetPlanningProcessCopy
{
    BudgetPlanningProcessRecId  budgetPlanningProcessRecIdSource;
    BudgetPlanningProcessRecId  budgetPlanningProcessRecIdTarget;
    BudgetPlanningProcessName   budgetPlanningProcessNameTarget;
    BudgetCycleRecId            budgetCycleRecIdTarget;
    LedgerRecId                 ledgerRecIdTarget;
    DimensionHierarchyId        accountStructureTarget;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of the <c>BudgetPlannigProcess</c> table.
    /// </summary>
    /// <exception cref="M:Exception::Deadlock">
    /// An unrecoverable deadlock occurred.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    /// An unrecoverable update conflict occurred inside the scope of another transaction.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    /// An irrecoverable update conflict occurred outside the scope of another transaction.
    /// </exception>
    protected void createBudgetPlanningProcess()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            this.createBudgetPlanningProcessHeader();
            this.createBudgetPlanningProcessAdmin();
            this.createBudgetPlanningStageRule();
            this.createBudgetPlanPriorityConstraint();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetPlanningProcessAdmin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates copies of the <c>BudgetPlanningProcessAdministration</c> records associated with the source <c>BudgetPlanningProcess</c> record
    /// for the target budget planning process.
    /// </summary>
    protected void createBudgetPlanningProcessAdmin()
    {
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministrationSource;
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministrationTarget;

        insert_recordset budgetPlanningProcessAdministrationTarget(
            BudgetingOrganization,
            BudgetPlanningProcess,
            BudgetPlanningWorkflow)
        select BudgetingOrganization,
            budgetPlanningProcessRecIdTarget,
            BudgetPlanningWorkflow
            from budgetPlanningProcessAdministrationSource
            where budgetPlanningProcessAdministrationSource.BudgetPlanningProcess == budgetPlanningProcessRecIdSource;

        budgetPlanningProcessAdministrationTarget.clear();
        BudgetPlanningProcess budgetPlanningProcessSource = BudgetPlanningProcess::find(budgetPlanningProcessRecIdSource);

        OMHierarchyRelationship hierarchyRelationship;
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;
        utcDateTime uTcDateTimeNow = DateTimeUtil::utcNow();

        // Create the records for any budgeting organizations that are in the org hierarchy but not currently associated with the source budget planning process.
        insert_recordset budgetPlanningProcessAdministrationTarget(
            BudgetingOrganization,
            BudgetPlanningProcess)
            select validTimeState(uTcDateTimeNow) ChildOrganization, budgetPlanningProcessRecIdTarget
                from hierarchyRelationship
                where hierarchyRelationship.HierarchyType == budgetPlanningProcessSource.OrganizationHierarchyType
            notexists join budgetPlanningProcessAdministration
                where budgetPlanningProcessAdministration.BudgetingOrganization == hierarchyRelationship.ChildOrganization
                    && budgetPlanningProcessAdministration.BudgetPlanningProcess == budgetPlanningProcessRecIdTarget;

        hierarchyRelationship.clear();
        budgetPlanningProcessAdministrationTarget.clear();
        // Delete the records for any budgeting organizations that are no longer in the org hierarchy but are currently associated with the source budget planning process.
        while select forupdate validTimeState(uTcDateTimeNow) budgetPlanningProcessAdministrationTarget
            where budgetPlanningProcessAdministrationTarget.BudgetPlanningProcess == budgetPlanningProcessRecIdTarget
            notexists join hierarchyRelationship
                where budgetPlanningProcessAdministrationTarget.BudgetingOrganization == hierarchyRelationship.ChildOrganization &&
                      hierarchyRelationship.HierarchyType == budgetPlanningProcessSource.OrganizationHierarchyType
        {
            // Note: delete_from can't be used because validTimeState can't be set on the join or delete_from statements.
            budgetPlanningProcessAdministrationTarget.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetPlanningProcessHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a header level record for the <c>BudgetPlanningProcess</c> table.
    /// </summary>
    protected void createBudgetPlanningProcessHeader()
    {
        BudgetPlanningProcess budgetPlanningProcessSource;
        BudgetPlanningProcess budgetPlanningProcessTarget;

        // Select BudgetPlanningProcess record of source budget and use it for the copy.
        select firstonly budgetPlanningProcessSource
            where budgetPlanningProcessSource.RecId == budgetPlanningProcessRecIdSource;

        budgetPlanningProcessTarget.data(budgetPlanningProcessSource);

        budgetPlanningProcessTarget.Name                 = budgetPlanningProcessNameTarget;
        budgetPlanningProcessTarget.BudgetCycle          = budgetCycleRecIdTarget;
        budgetPlanningProcessTarget.ApprovalProcessState = BudgetPlanningApprovalProcessState::Draft;
        budgetPlanningProcessTarget.Ledger               = ledgerRecIdTarget;
        budgetPlanningProcessTarget.AccountStructure     = accountStructureTarget;

        budgetPlanningProcessTarget.insert();

        this.parmBudgetPlanningProcessRecIdTarget(budgetPlanningProcessTarget.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetPlanningStageRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetPlanningStageRule</c> record for the <c>BudgetPlanningProcess</c> table.
    /// </summary>
    protected void createBudgetPlanningStageRule()
    {
        // As Insert method of the table BudgetPlanningProcessAdministration table is overriden and which first deletes all
        // the budget planning stage rule and then create a new one, in order to retain
        // it to its original state deleteAllProcessStageRules method is called.

        BudgetPlanningStageRule budgetPlanningStageRule;
        delete_from budgetPlanningStageRule
            where budgetPlanningStageRule.BudgetPlanningProcess == budgetPlanningProcessRecIdTarget;

        Map budgetPlanningStageRuleLinks = new Map(Types::Int64, Types::Int64);

        BudgetPlanningStageRule budgetPlanningStageRuleSource;
        while select budgetPlanningStageRuleSource
            where budgetPlanningStageRuleSource.BudgetPlanningProcess == budgetPlanningProcessRecIdSource
        {
            BudgetPlanningStageRule budgetPlanningStageRuleTarget;
            budgetPlanningStageRuleTarget.BudgetPlanningProcess = budgetPlanningProcessRecIdTarget;
            budgetPlanningStageRuleTarget.BudgetPlanningWorkflowStage = budgetPlanningStageRuleSource.BudgetPlanningWorkflowStage;
            budgetPlanningStageRuleTarget.CanAddBudgetPlanLines = budgetPlanningStageRuleSource.CanAddBudgetPlanLines;
            budgetPlanningStageRuleTarget.CanAddChildBudgetPlans = budgetPlanningStageRuleSource.CanAddChildBudgetPlans;
            budgetPlanningStageRuleTarget.CanModifyBudgetPlanLines = budgetPlanningStageRuleSource.CanModifyBudgetPlanLines;
            budgetPlanningStageRuleTarget.Layout = budgetPlanningStageRuleSource.Layout;

            if (budgetPlanningStageRuleTarget.validateWrite())
            {
                budgetPlanningStageRuleTarget.write();

                // Record the target record that was created for the source BudgetPlanningStageRule because it
                // may need to be used in creating the BudgetPlanAlternateLayout records.
                budgetPlanningStageRuleLinks.insert(budgetPlanningStageRuleSource.RecId, budgetPlanningStageRuleTarget.RecId);
            }
        }

        this.createBudgetPlanningStageRuleAlternateLayouts(budgetPlanningStageRuleLinks);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetPlanningStageRuleAlternateLayouts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>BudgetPlanAlternateLayout</c> records associated with the <c>BudgetPlanningStageRule</c> records copied
    /// for the <c>BudgetPlanningProcess</c> record.
    /// </summary>
    /// <param name="_budgetPlanningStageRuleLinks">
    /// A <c>Map</c> instance that holds the mapping between the source <c>BudgetPlanningStageRule</c> record ID as the key and
    /// the target <c>BudgetPlanningStageRule</c> record ID as the value.
    /// </param>
    protected void createBudgetPlanningStageRuleAlternateLayouts(Map _budgetPlanningStageRuleLinks)
    {
        BudgetPlanningStageRule budgetPlanningStageRule;
        BudgetPlanAlternateLayout budgetPlanAlternateLayoutSource;
        
        while select budgetPlanAlternateLayoutSource
            join budgetPlanningStageRule
            where budgetPlanningStageRule.RecId == budgetPlanAlternateLayoutSource.BudgetPlanningStageRule &&
                budgetPlanningStageRule.BudgetPlanningProcess == budgetPlanningProcessRecIdSource
        {
            BudgetPlanAlternateLayout budgetPlanAlternateLayoutTarget;
            budgetPlanAlternateLayoutTarget.BudgetPlanLayout = budgetPlanAlternateLayoutSource.BudgetPlanLayout;

            // Set BudgetPlanningStageRule to the RecId of the new BudgetPlanningStageRule record that was created for the source.
            budgetPlanAlternateLayoutTarget.BudgetPlanningStageRule = _budgetPlanningStageRuleLinks.lookup(budgetPlanningStageRule.RecId);

            if (budgetPlanAlternateLayoutTarget.validateWrite())
            {
                budgetPlanAlternateLayoutTarget.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetPlanPriorityConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetPlanPriorityConstraint</c> record for the <c>BudgetPlanningProcess</c> table.
    /// </summary>
    protected void createBudgetPlanPriorityConstraint()
    {
        BudgetPlanPriorityConstraint budgetPlannPriorityConstraintSource;
        BudgetPlanPriorityConstraint budgetPlannPriorityConstraintTarget;

        insert_recordset budgetPlannPriorityConstraintTarget(
            BudgetPlanningProcess,
            BudgetPlanPriority)
        select budgetPlanningProcessRecIdTarget,
            BudgetPlanPriority
            from budgetPlannPriorityConstraintSource
            where budgetPlannPriorityConstraintSource.BudgetPlanningProcess == budgetPlanningProcessRecIdSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class level variables.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the source <c>BudgetPlanningProcess</c> table.
    /// </param>
    /// <param name="_budgetPlanningProcessName">
    /// The <c>Name</c> field of the <c>BudgetPlanningProcess</c> table.
    /// </param>
    /// <param name="_budgetCycleRecId">
    /// The record ID of the <c>BudgetCycle</c> field of the <c>BudgetPlanningProcess</c> table.
    /// </param>
    /// <param name="_ledgerRecId">
    /// The record ID of the <c>Ledger</c> field of the <c>BudgetPlanningProcess</c> table.
    /// </param>
    /// <param name="_accountStructure">
    /// The record ID of the <c>AccountStructure</c> field of the <c>BudgetPlanningProcess</c> table.
    /// </param>
    protected void init(
        BudgetPlanningProcessRecId  _budgetPlanningProcessRecId,
        BudgetPlanningProcessName   _budgetPlanningProcessName,
        BudgetCycleRecId            _budgetCycleRecId,
        LedgerRecId                 _ledgerRecId,
        DimensionHierarchyId        _accountStructure)
    {
        budgetPlanningProcessRecIdSource    = _budgetPlanningProcessRecId;
        budgetPlanningProcessNameTarget     = _budgetPlanningProcessName;
        budgetCycleRecIdTarget              = _budgetCycleRecId;
        ledgerRecIdTarget                   = _ledgerRecId;
        accountStructureTarget              = _accountStructure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanningProcessRecIdTarget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the record ID for the target <c>BudgetPlanningProcess</c> table.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the target <c>BudgetPlanningProcess</c> table.
    /// </param>
    /// <returns>
    /// The record ID of the target <c>BudgetPlanningProcess</c> table.
    /// </returns>
    public BudgetPlanningProcessRecId parmBudgetPlanningProcessRecIdTarget(BudgetPlanningProcessRecId _budgetPlanningProcessRecId = budgetPlanningProcessRecIdTarget)
    {
        budgetPlanningProcessRecIdTarget = _budgetPlanningProcessRecId;

        return budgetPlanningProcessRecIdTarget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static BudgetPlanningProcessCopy construct()
    {
        return new BudgetPlanningProcessCopy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetPlanningProcessCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of a <c>BudgetPlanningProcess</c> record.
    /// </summary>
    /// <param name="_budgetPlanningProcessName">
    /// The <c>Name</c> field of the <c>BudgetPlanningProcess</c> table.
    /// </param>
    /// <param name="_budgetCycleRecId">
    /// The record ID of the <c>BudgetCycle</c> field of the <c>BudgetPlanningProcess</c> table.
    /// </param>
    /// <param name="_ledgerRecId">
    /// The record ID of the <c>Ledger</c> field of the <c>BudgetPlanningProcess</c> table.
    /// </param>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the source <c>BudgetPlanningProcess</c> table.
    /// </param>
    public static void createBudgetPlanningProcessCopy(
        BudgetPlanningProcessName   _budgetPlanningProcessName,
        BudgetCycleRecId            _budgetCycleRecId,
        LedgerRecId                 _ledgerRecId,
        DimensionHierarchyId        _accountStructure,
        BudgetPlanningProcessRecId  _budgetPlanningProcessRecId)
    {
        BudgetPlanningProcessCopy budgetPlanningProcessCopy;

        if (_budgetPlanningProcessRecId)
        {
            budgetPlanningProcessCopy = BudgetPlanningProcessCopy::construct();
            budgetPlanningProcessCopy.init(_budgetPlanningProcessRecId,
                _budgetPlanningProcessName,
                _budgetCycleRecId,
                _ledgerRecId,
                _accountStructure);

            budgetPlanningProcessCopy.createBudgetPlanningProcess();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>