<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetMoveHistEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetMoveHistEngine
{
    RAssetMoveHist     moveHist, moveHistLast;
    FormDataSource     rAssetMoveHist_ds;
    RAssetMoveStandard rAssetMoveStandard;
    FormDataSource     rAssetMoveStandard_ds;
    RAssetStatusType   rAssetStatusType;
    RAssetTable        rAssetTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>active</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles active event of the transfer history data source.
    /// </summary>
    public void active()
    {
        moveHist     = rAssetMoveHist_ds.cursor();
        moveHistLast = RAssetMoveHist::findLastOperation(moveHist.AccountNum,
                                                         moveHist.MoveType,
                                                         NoYes::No,
                                                         moveHist.ChangeDate - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(RAssetMoveHist _rAssetMoveHist)
    {
        moveHist          = _rAssetMoveHist;
        moveHistLast      = RAssetMoveHist::findLastOperation(moveHist.AccountNum,
                                                              moveHist.MoveType,
                                                              NoYes::No,
                                                              moveHist.ChangeDate - 1);
        rAssetMoveHist_ds = FormDataUtil::getFormDataSource(moveHist);
        if (rAssetMoveHist_ds)
        {
            rAssetMoveStandard_ds = rAssetMoveHist_ds.formRun().dataSource(tableStr(RAssetMoveStandard));
            if (rAssetMoveStandard_ds)
            {
                rAssetMoveStandard    = rAssetMoveStandard_ds.cursor();
            }
        }
        rAssetTable      = RAssetTable::find(moveHist.AccountNum);
        rAssetStatusType = RAssetStatusType::construct(rAssetTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    public void updateDesign()
    {
        boolean allow;

        if (! rAssetMoveHist_ds)
            return;

        rAssetMoveHist_ds.allowEdit(! moveHist.Posted);

        allow = moveHist.Posted || moveHist.TransferTransRecId ||
            (select firstonly RecId from rAssetMoveStandard
                 where rAssetMoveStandard.RefRecId   == moveHist.RecId   &&
                       rAssetMoveStandard.RefTableId == moveHist.TableId &&
                       rAssetMoveStandard.Posted).RecId != 0;

        rAssetMoveHist_ds.allowDelete(! allow);

        if (rAssetMoveStandard_ds)
        {
            rAssetMoveStandard_ds.allowCreate(! moveHist.Posted);
            rAssetMoveStandard_ds.allowEdit(! rAssetMoveStandard.Posted);
            rAssetMoveStandard_ds.allowDelete(! rAssetMoveStandard.Posted);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(boolean _needinfo = true)
    {
        RAssetMoveHist rAssetMoveHistLocal;
        DataArea       dataArea;

        if (moveHist.ChangeDate < rAssetTable.AcquisitionDate)
            return _needinfo ? checkFailed(strFmt("@GLS116735", moveHist.AccountNum)) : false;

        if (moveHistLast.RecId &&
            moveHistLast.ChangeDate >= moveHist.ChangeDate)
            return _needinfo ? checkFailed(strFmt("@GLS116694", moveHist.AccountNum)) : false;

        if (moveHist.AssetId && moveHist.Company)
        {
            while select Id from dataArea
                where dataArea.IsVirtual == NoYes::No
            {
                rAssetMoveHistLocal = moveHist.existsAssetId(dataArea.Id);
                if (rAssetMoveHistLocal)
                    return _needinfo ? checkFailed(strFmt("@GLS116693", moveHist.AssetId, moveHist.MoveType, rAssetMoveHistLocal.AccountNum, dataArea.Id)) : false;
            }
            rAssetMoveHistLocal = moveHist.findConcerned();
            if (rAssetMoveHistLocal.AssetId && rAssetMoveHistLocal.AssetId != moveHist.AccountNum)
                return _needinfo ? checkFailed(strFmt("@GLS116693", rAssetMoveHistLocal.AccountNum, moveHist.MoveType, rAssetMoveHistLocal.AssetId, rAssetMoveHistLocal.Company)) : false;

            if (rAssetMoveHistLocal.Company && rAssetMoveHistLocal.Company != moveHist.DataAreaId)
                return _needinfo ? checkFailed(strFmt("@GLS116696", rAssetMoveHistLocal.AccountNum, rAssetMoveHistLocal.MoveType, rAssetMoveHistLocal.Company)) : false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write()
    {
        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RAssetMoveHistEngine construct(RAssetMoveHist _rAssetMoveHist)
    {
        RAssetMoveHistEngine rAssetMoveHistEngine;

        switch (_rAssetMoveHist.MoveType)
        {
            case RAssetMoveType::CompanyIssue:
                rAssetMoveHistEngine = new RAssetMoveHistEngine_CompanyIssue(_rAssetMoveHist);
                break;
            case RAssetMoveType::CompanyReceipt:
                rAssetMoveHistEngine = new RAssetMoveHistEngine_CompanyReceipt(_rAssetMoveHist);
                break;
            case RAssetMoveType::Transfer:
                rAssetMoveHistEngine = new RAssetMoveHistEngine_Both(_rAssetMoveHist);
                break;
            default:
                throw error("@SYS59121");
        }
        return rAssetMoveHistEngine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>