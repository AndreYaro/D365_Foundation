<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendReversePostingLog_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CustVendReversePostingLog_RU
{
    Query                           query;
    RefRecId                        transRecId, offsetRecId;
    TaxReverseTaxCustVendSettle_RU  taxReverseTax;
    LedgerVoucher                   ledgerVoucher;
    TransDate                       foundTransDate;
    Voucher                         foundVoucher;
    Stack                           stateStack;
    NoYes                           foundCorrectionAccounting;
    NoYes                           foundCorrectionReporting;
    TransDate                       settlementDate;
    DimensionDefault                foundOffsetDefaultDimensionAccounting;
    DimensionDefault                foundOffsetDefaultDimensionReporting;
    ModuleCustVend                  moduleCustVend;
    CompanyId                       transCompany, offsetCompany;
    Counter                         settlementGroupPlaceHolder;
    CustVendTransSettlement         custVendTransSettlement;
    CustVendAdvAdjustmentDocUpdate_W custVendAdvAdjustmentDocUpdate;
    Set                             reversePostingLogSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAllowedPostingLogType</Name>
				<Source><![CDATA[
    public void addAllowedPostingLogType(CustVendTransPostingLogType_RU _postingLogType)
    {
        query.dataSourceNo(1).addRange(fieldNum(CustVendTransPostingLog_RU, PostingLogType)).value(enum2Value(_postingLogType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    #define.OR(' || ')
    #localmacro.AND
        ' && '
    #endmacro
    #localmacro.queryRangeMask
        '(\%1.\%2 == \%4) && (\%1.\%3 == "\%5")'
    #endmacro

    private void buildQuery(boolean _precisely)
    {
        QueryBuildDataSource    qbds;
        str                     rangeStr;

        str embracedStr(str _str)
        {
            return '(' + _str + ')';
        }

        query = new Query();

        qbds = query.addDataSource(tableNum(CustVendTransPostingLog_RU), tableStr(CustVendTransPostingLog_RU));
        qbds.update(true);

        qbds.addSortField(fieldNum(CustVendTransPostingLog_RU, Voucher));

        rangeStr  = strFmt(#queryRangeMask, qbds.name(),
                                            fieldStr(CustVendTransPostingLog_RU, TransRecId),
                                            fieldStr(CustVendTransPostingLog_RU, TransCompany),
                                            transRecId,
                                            transCompany) +
                    #AND +
                    strFmt(#queryRangeMask, qbds.name(),
                                            fieldStr(CustVendTransPostingLog_RU, OffSetRecId),
                                            fieldStr(CustVendTransPostingLog_RU, OffsetCompany),
                                            offsetRecId,
                                            offsetCompany);

        if (! _precisely)
        {
            rangeStr  = embracedStr(rangeStr) + #OR;

            rangeStr += embracedStr(
                                    strFmt(#queryRangeMask, qbds.name(),
                                                            fieldStr(CustVendTransPostingLog_RU, TransRecId),
                                                            fieldStr(CustVendTransPostingLog_RU, TransCompany),
                                                            offsetRecId,
                                                            offsetCompany) +
                                    #AND +
                                    strFmt(#queryRangeMask, qbds.name(),
                                                            fieldStr(CustVendTransPostingLog_RU, OffSetRecId),
                                                            fieldStr(CustVendTransPostingLog_RU, OffsetCompany),
                                                            transRecId,
                                                            transCompany)
                                   );
        }

        rangeStr = embracedStr(rangeStr);
        qbds.addRange(fieldNum(CustVendTransPostingLog_RU, RecId)).value(rangeStr);

        qbds.addRange(fieldNum(CustVendTransPostingLog_RU, TransDate)).value(queryValue(settlementDate));
        qbds.addRange(fieldNum(CustVendTransPostingLog_RU, Reversed)).value(queryValue(NoYes::No));
        qbds.addRange(fieldNum(CustVendTransPostingLog_RU, CannotBeReversed)).value(queryValue(NoYes::No));
        qbds.addRange(fieldNum(CustVendTransPostingLog_RU, RefTableId)).value(queryValue(moduleCustVend == ModuleCustVend::Vend ? tableNum(VendTrans) : tableNum(CustTrans)));

        qbds.addSortField(fieldNum(CustVendTransPostingLog_RU, TransRecId));
        qbds.addSortField(fieldNum(CustVendTransPostingLog_RU, OffSetRecId));
        qbds.addSortField(fieldNum(CustVendTransPostingLog_RU, ReverseTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>doReverse</Name>
				<Source><![CDATA[
    #define.LogLength2(2)
    public boolean doReverse(boolean _useOldVoucher  = false,
                             boolean _useVoucherDate = false,
                             boolean _postVATTransit = true)
    {
        QueryRun                    qr;
        CustVendTransPostingLog_RU  transPostingLog;
        LedgerVoucherObject         ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        LedgerBondClient_RU         ledgerBondClient = ledgerVoucherObject.ledgerBondClient_RU();
        boolean                     ret = false;
        TransDate                   transactionDate = ledgerVoucher.lastTransDate();
        AmountCur                   taxAmountCur;
        AmountMST                   totalInvoiceAmount, totalTaxAmount, tmpInvoiceAmount;
        RefRecId                    invoiceTransRecId;
        GeneralJournalEntry         generalJournalEntrySettle;
        LedgerTransType             ledgerTransType;
        ExchRate                    accountingRate;
        ExchRate                    reportingRate;
        LedgerPostingType           balancePosting;
        boolean                     accountingParamsFound;

        GeneralJournalAccountEntry          accountEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucher;
        CustVendTransPostingLog_RU          summarizedTransPostingLog;
        #ISOCountryRegionCodes

        boolean isReverseTrans(CustVendTransPostingLog_RU _log)
        {
            return _log.ReverseTrans
                && _log.LedgerDimension
                && _log.OffsetLedgerDimension
                && (_log.PostingLogType == CustVendTransPostingLogType_RU::VATTransit ? _postVATTransit : true);
        }
        boolean isPostingProfileSettleGroupEnd(CustVendTransPostingLog_RU _current)
        {
            return summarizedTransPostingLog
                && (summarizedTransPostingLog.TransRecId        != _current.TransRecId
                 || summarizedTransPostingLog.OffSetRecId       != _current.OffSetRecId
                 || summarizedTransPostingLog.PostingLogType    != _current.PostingLogType
                 || summarizedTransPostingLog.Posting           != _current.Posting
                 || ! isReverseTrans(_current));
        }
        void reversePostingProfileSettle(CustVendTransPostingLog_RU _log, boolean _recordCustVendTrans)
        {
            CustVendTrans  custVendTransDebet, custVendTransCredit;
            // This block is only executed in case of posting profile difference transactions (ReverseTrans flag is set).
            // Posting profile difference transactions
            // are not needed in a cross company settlement because the due to/from transactions
            // will be done instead.
            if (moduleCustVend == ModuleCustVend::Vend)
            {
                custVendTransDebet  = VendTrans::find(_log.TransRecId);
                custVendTransCredit = VendTrans::find(_log.OffSetRecId);
            }
            else
            {
                custVendTransDebet  = CustTrans::find(_log.TransRecId);
                custVendTransCredit = CustTrans::find(_log.OffSetRecId);
            }

            CustVendSettle::postingProfileSettle_RU(ledgerVoucher,
                                                    custVendTransDebet,
                                                    - _log.AmountCur,
                                                    custVendTransSettlement,
                                                    settlementGroupPlaceHolder,
                                                    custVendTransDebet.DefaultDimension,
                                                    custVendTransDebet.PostingProfile,
                                                    LedgerTransTxt::Settlement,
                                                    - _log.AmountMST,
                                                    - _log.AmountMSTSecond,
                                                    _log.CurrencyCode,
                                                    _recordCustVendTrans ? 0 : _log.LedgerDimension,
                                                    _recordCustVendTrans,
                                                    ! _recordCustVendTrans);

            ledgerVoucherObject.lastTransTxt(strFmt("@SYS53179", "@SYS4412", "@SYS12371", transPostingLog.Voucher));

            CustVendSettle::postingProfileSettle_RU(ledgerVoucher,
                                                    custVendTransCredit,
                                                    _log.AmountCur,
                                                    custVendTransSettlement,
                                                    settlementGroupPlaceHolder,
                                                    custVendTransCredit.DefaultDimension,
                                                    custVendTransCredit.PostingProfile,
                                                    LedgerTransTxt::Settlement,
                                                    _log.AmountMST,
                                                    _log.AmountMSTSecond,
                                                    _log.CurrencyCode,
                                                    _recordCustVendTrans ? 0 : _log.OffsetLedgerDimension,
                                                    _recordCustVendTrans,
                                                    ! _recordCustVendTrans);
            if (! _recordCustVendTrans && (_log.AmountMST || _log.AmountMSTSecond))
            {
                ledgerVoucher.bondLast2_RU();
            }
        }

        void processPostingProfileSettleGroupEnd(CustVendTransPostingLog_RU _current)
        {
            if (isPostingProfileSettleGroupEnd(_current))
            {
                reversePostingProfileSettle(summarizedTransPostingLog, true);
                summarizedTransPostingLog = null;
            }
            if (isReverseTrans(_current))
            {
                if (! summarizedTransPostingLog)
                {
                    summarizedTransPostingLog.data(_current);
                }
                else
                {
                    summarizedTransPostingLog.AmountCur         += transPostingLog.AmountCur;
                    summarizedTransPostingLog.AmountMST         += transPostingLog.AmountMST;
                    summarizedTransPostingLog.AmountMSTSecond   += transPostingLog.AmountMSTSecond;
                }
            }
            else
            {
                summarizedTransPostingLog = null;
            }
        }

        ttsbegin;

        this.voucherStateSave();

        qr = new QueryRun(query);

        if (! _useOldVoucher && ledgerBondClient)
        {
            ledgerBondClient.addNewLogObject();
        }

        if (moduleCustVend == ModuleCustVend::Vend)
        {
            balancePosting = LedgerPostingType::VendBalance;
        }
        else
        {
            balancePosting = LedgerPostingType::CustBalance;
        }

        while (qr.next())
        {
            transPostingLog     = qr.getNo(1);
            processPostingProfileSettleGroupEnd(transPostingLog);
            foundTransDate          = transPostingLog.TransDate;
            foundVoucher            = transPostingLog.Voucher;
            transactionDate         = _useVoucherDate ? transactionDate : foundTransDate;
            if (transPostingLog.AmountMSTSecond && !transPostingLog.AmountMST)
            {
                foundCorrectionReporting             = ! transPostingLog.Correct;
                foundOffsetDefaultDimensionReporting = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(transPostingLog.OffsetLedgerDimension);

                if (!accountingParamsFound)
                {
                    foundCorrectionAccounting               = foundCorrectionReporting;
                    foundOffsetDefaultDimensionAccounting   = foundOffsetDefaultDimensionReporting;
                }
            }
            else
            {
                foundCorrectionAccounting               = ! transPostingLog.Correct;
                foundOffsetDefaultDimensionAccounting   = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(transPostingLog.OffsetLedgerDimension);
                accountingParamsFound                   = true;
            }

            if ((transPostingLog.LedgerDimension                                                          ||
                 transPostingLog.OffsetLedgerDimension                                                    ||
                 transPostingLog.IsTaxed                                                                  ||
                (transPostingLog.PostingLogType == CustVendTransPostingLogType_RU::AdvanceAdjustment      &&
                 moduleCustVend                 == ModuleCustVend::Vend))                                 &&
                (transPostingLog.PostingLogType == CustVendTransPostingLogType_RU::VATTransit ? _postVATTransit : true))
            {
                ret = true;

                if (_useOldVoucher &&
                    transPostingLog.Voucher != ledgerVoucherObject.parmVoucher())
                {
                    ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject(transPostingLog.Voucher, transactionDate);

                    if (! ledgerVoucherObject)
                    {
                        ledgerVoucherObject = LedgerVoucherObject::newVoucher(transPostingLog.Voucher,
                                                                              transactionDate,
                                                                              ledgerVoucher.parmSysModuleDefault(),
                                                                              ledgerVoucher.findLedgerVoucherObject().parmLedgerTransType());
                        ledgerVoucherObject.parmVoucherCheck(false);
                        ledgerVoucher.addVoucher(ledgerVoucherObject);
                    }
                    ledgerVoucher.lastVoucher(transPostingLog.Voucher);
                    ledgerVoucher.lastTransDate(transactionDate);
                }

                ledgerVoucherObject.parmCorrection(! transPostingLog.Correct);
                ledgerVoucherObject.parmTransDate (transactionDate);
                ledgerBondClient = ledgerVoucherObject.ledgerBondClient_RU();
                ledgerVoucherObject.lastTransTxt(strFmt("@SYS53179", "@SYS4412", "@SYS12371", transPostingLog.Voucher));

                if (ledgerBondClient)
                {
                    ledgerBondClient.addNewLogObject();
                }

                if (transPostingLog.ReverseTrans && transPostingLog.LedgerDimension && transPostingLog.OffsetLedgerDimension)
                {
                    reversePostingProfileSettle(transPostingLog, false);
                }
                else
                {
                    generalJournalEntrySettle = GeneralLedgerExtension::findBySubledgerVoucherAccountingDate(transPostingLog.Voucher, transPostingLog.TransDate);
                    ledgerTransType = generalJournalEntrySettle ? generalJournalEntrySettle.JournalCategory : ledgerVoucherObject.parmTransactionTypeDefault();
                    ledgerVoucherObject.parmTransactionTypeDefault(ledgerTransType);

                    boolean postCashDiscTax = false;

                    if (transPostingLog.PostingLogType == CustVendTransPostingLogType_RU::CashDisc && transPostingLog.Posting == LedgerPostingType::Tax)
                    {
                        postCashDiscTax = TaxTrans::find(transPostingLog.Voucher, transPostingLog.TransDate).TaxDirection == TaxDirection::UseTax;
                    }

                    if (transPostingLog.LedgerDimension
                        && transPostingLog.PostingLogType != CustVendTransPostingLogType_RU::VATTaxAgent
                        && !postCashDiscTax)
                    {
                        ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicDefault(
                            ledgerVoucherObject,
                            this.getReverseLedgerPostingType(transPostingLog),
                            transPostingLog.LedgerDimension,
                            transPostingLog.CurrencyCode,
                            -transPostingLog.AmountCur,
                            -transPostingLog.AmountMST,
                            -transPostingLog.AmountMSTSecond);

                        if (CurrencyLedgerGainLossFromNetValueFeature_PL::isEnabled()
                            && transPostingLog.PostingLogType == CustVendTransPostingLogType_RU::ExchAdjustment
                            && (   ledgerVoucherTransObject.parmPostingType() == LedgerPostingType::ExchRateGain
                                || ledgerVoucherTransObject.parmPostingType() == LedgerPostingType::ExchRateLoss))
                        {
                            ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Summary);
                        }

                        ledgerVoucherObject.addTrans(ledgerVoucherTransObject);
                    }

                    LedgerDimensionAccount initialTransLedgerDim = transPostingLog.OffsetLedgerDimension;
                    if (!initialTransLedgerDim)
                    {
                        initialTransLedgerDim = this.getTransInitialLedgerDimension(transPostingLog);
                    }

                    if  (initialTransLedgerDim
                        && transPostingLog.PostingLogType != CustVendTransPostingLogType_RU::VATTaxAgent
                        && !postCashDiscTax)
                    {
                        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]) && _useVoucherDate && transPostingLog.IsTaxed)
                        {
                            this.updateAmountsFromTransactionDate(transPostingLog, transactionDate);
                        }

                        ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicDefault(
                            ledgerVoucherObject,
                            (transPostingLog.PostingLogType == CustVendTransPostingLogType_RU::ExchAdjustment       ||
                             transPostingLog.PostingLogType == CustVendTransPostingLogType_RU::GainLossCurrencyDeal ||
                             transPostingLog.PostingLogType == CustVendTransPostingLogType_RU::AdvanceAdjustment    ||
                             transPostingLog.PostingLogType == CustVendTransPostingLogType_RU::CashDisc             ||
                             transPostingLog.PostingLogType == CustVendTransPostingLogType_RU::UnrealisedExchAdj)   &&
                            !transPostingLog.IsReportingCurrencyTax ?
                                balancePosting :
                                transPostingLog.Posting,
                            initialTransLedgerDim,
                            transPostingLog.CurrencyCode,
                            transPostingLog.AmountCur,
                            transPostingLog.AmountMST,
                            transPostingLog.AmountMSTSecond);

                        if (CurrencyLedgerGainLossFromNetValueFeature_PL::isEnabled()
                            && transPostingLog.PostingLogType == CustVendTransPostingLogType_RU::ExchAdjustment
                            && (   ledgerVoucherTransObject.parmPostingType() == LedgerPostingType::CustBalance
                                || ledgerVoucherTransObject.parmPostingType() == LedgerPostingType::VendBalance))
                        {
                            ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Summary);
                        }

                        ledgerVoucherObject.addTrans(ledgerVoucherTransObject);
                    }
                }

                taxAmountCur = 0;
                if (transPostingLog.IsTaxed)
                {
                    taxReverseTax.parmVoucher(ledgerVoucher.lastVoucher());
                    taxReverseTax.parmTaxDate(transactionDate);

                    accountingRate  = transPostingLog.AmountCur         ? transPostingLog.AmountMST * 100 / transPostingLog.AmountCur       : 0;
                    reportingRate   = transPostingLog.AmountMSTSecond   ? transPostingLog.AmountMST * 100 / transPostingLog.AmountMSTSecond : 0;

                    if (!accountingRate)
                    {
                        select firstonly TransactionCurrencyAmount, AccountingCurrencyAmount from accountEntry
                            exists join subledgerVoucher
                                where subledgerVoucher.GeneralJournalEntry  == accountEntry.GeneralJournalEntry
                                   && subledgerVoucher.Voucher              == foundVoucher
                                   && subledgerVoucher.AccountingDate       == foundTransDate
                                   && accountEntry.AccountingCurrencyAmount;

                        if (accountEntry.TransactionCurrencyAmount)
                        {
                            accountingRate = accountEntry.AccountingCurrencyAmount * 100 / accountEntry.TransactionCurrencyAmount;
                        }
                        else
                        {
                            accountingRate = transPostingLog.CurrencyCode ? ExchangeRateHelper::exchRate(transPostingLog.CurrencyCode, foundTransDate) : 100;
                        }
                    }

                    if (!reportingRate)
                    {
                        select firstonly TransactionCurrencyAmount, ReportingCurrencyAmount from accountEntry
                            exists join subledgerVoucher
                                where subledgerVoucher.GeneralJournalEntry  == accountEntry.GeneralJournalEntry
                                   && subledgerVoucher.Voucher              == foundVoucher
                                   && subledgerVoucher.AccountingDate       == foundTransDate
                                   && accountEntry.ReportingCurrencyAmount;

                        if (accountEntry.ReportingCurrencyAmount)
                        {
                            reportingRate = accountEntry.AccountingCurrencyAmount * 100 / accountEntry.ReportingCurrencyAmount;
                        }
                        else
                        {
                            reportingRate = Ledger::reportingCurrency() ? ExchangeRateHelper::exchRate(Ledger::reportingCurrency(), foundTransDate) : 100;
                        }
                    }

                    taxReverseTax.setExchRates(transPostingLog.CurrencyCode, accountingRate, reportingRate, UnknownNoYes::No);
                    taxReverseTax.parmOriginalTransDate_RU(foundTransDate);
                    taxReverseTax.parmLedgerPostingType(transPostingLog.Posting);
                    taxReverseTax.parmAmountMSTSecondary( - transPostingLog.AmountMSTSecond);
                    taxReverseTax.setReverseRecId(transPostingLog.RecId);
                    taxReverseTax.parmSkipDistribution(true);
                    taxAmountCur = - taxReverseTax.calcAndPost(LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher),
                                                               foundVoucher,
                                                               foundTransDate,
                                                               true,
                                                               transPostingLog.RecId);
                }

                if (transPostingLog.PostingLogType == CustVendTransPostingLogType_RU::AdvanceAdjustment && transPostingLog.InvoiceTransRecId)
                {
                    if (transPostingLog.InvoiceTransTableId != tableNum(MarkupTrans) && ! invoiceTransRecId)
                    {
                        invoiceTransRecId = transPostingLog.InvoiceTransRecId;
                    }

                    tmpInvoiceAmount = custVendAdvAdjustmentDocUpdate.updateReversedAmountsMap(moduleCustVend, transPostingLog, taxAmountCur);

                    totalInvoiceAmount += tmpInvoiceAmount;
                    totalTaxAmount     += taxAmountCur;
                }

                this.reverseVATTaxAgentLog(transPostingLog, transactionDate);

                if (ledgerBondClient)
                {
                    if (ledgerBondClient.currentLogLength(transactionDate) == #LogLength2)
                    {
                        ledgerBondClient.bondLastVRef2CurrentLog(transactionDate);
                    }
                    else
                    {
                        ledgerBondClient.bondLog2Log(transactionDate);
                    }

                    ledgerBondClient.removeCurrentLogObject();
                }
            }

            transPostingLog.reversePosting(transactionDate);

            if (transPostingLog.RecId && transPostingLog.Reversed)
            {
                reversePostingLogSet.add(transPostingLog.RecId);
            }
        }

        processPostingProfileSettleGroupEnd(null);

        if (totalInvoiceAmount && invoiceTransRecId)
        {
            custVendAdvAdjustmentDocUpdate.updateCustVendInvoiceJourReverse(moduleCustVend,
                                                                            invoiceTransRecId,
                                                                            transRecId,
                                                                            offsetRecId,
                                                                            totalInvoiceAmount,
                                                                            totalTaxAmount);
        }

        if (! _useOldVoucher && ledgerBondClient)
        {
            ledgerBondClient.bondLog2Log();
            ledgerBondClient.removeCurrentLogObject();
        }

        this.voucherStateRestore();

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAmountsFromTransactionDate</Name>
				<Source><![CDATA[
    private void updateAmountsFromTransactionDate(CustVendTransPostingLog_RU _postingLog, TransDate _transDate)
    {
        CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::primaryLedger(CompanyInfo::findDataArea(_postingLog.TransCompany).RecId), _transDate);

        _postingLog.AmountMst = exchangeRateHelper.calculateTransactionToAccounting(
            _postingLog.CurrencyCode,
            _postingLog.AmountCur,
            true);

        _postingLog.AmountMstSecond = exchangeRateHelper.calculateTransactionCurrencyToReportingCurrency(
            _postingLog.CurrencyCode,
            _postingLog.AmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>foundCorrection</Name>
				<Source><![CDATA[
    public NoYes foundCorrection()
    {
        return foundCorrectionAccounting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>foundCorrectionReporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if correction should be set in restored transaction on exchange rate adjustment.
    /// </summary>
    /// <returns>
    /// True if correction should be set in restored transaction on exchange rate adjustment; otherwise false.
    /// </returns>
    public NoYes foundCorrectionReporting()
    {
        return foundCorrectionReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>foundOffsetDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns found offset default dimension
    /// </summary>
    /// <returns>
    /// Found offset default dimension
    /// </returns>
    public DimensionDefault foundOffsetDefaultDimension()
    {
        return foundOffsetDefaultDimensionAccounting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>foundOffsetDefaultDimensionReporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns found offset default dimension for reporting currency.
    /// </summary>
    /// <returns>
    /// Found offset default dimension for reporting currency.
    /// </returns>
    public DimensionDefault foundOffsetDefaultDimensionReporting()
    {
        return foundOffsetDefaultDimensionReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(ModuleCustVend _moduleCustVend,
                     RefRecId       _transRecId,
                     RefRecId       _offsetRecId,
                     LedgerVoucher  _ledgerVoucher,
                     TransDate      _settlementDate,
                     CompanyId      _transCompany,
                     CompanyId      _offsetCompany)
    {
        transRecId      = _transRecId;
        offsetRecId     = _offsetRecId;
        ledgerVoucher   = _ledgerVoucher;
        moduleCustVend  = _moduleCustVend;
        stateStack      = new Stack(conNull());
        settlementDate  = _settlementDate;
        transCompany    = _transCompany;
        offsetCompany   = _offsetCompany;

        reversePostingLogSet = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReverseLedgerPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ledger posting type when reverting cash discounts
    /// </summary>
    /// <param name = "_transPostingLog">The CustVendTransPostingLogType_RU record</param>
    /// <returns>Proper ledger posting type</returns>
    protected LedgerPostingType getReverseLedgerPostingType(CustVendTransPostingLog_RU _transPostingLog)
    {
        LedgerPostingType postingTypeLocal = _transPostingLog.Posting;

        if (_transPostingLog.PostingLogType == CustVendTransPostingLogType_RU::CashDisc)
        {
            switch (moduleCustVend)
            {
                case ModuleCustVend::Vend:
                    postingTypeLocal = LedgerPostingType::VendCashDisc;
                    break;

                case ModuleCustVend::Cust:
                    postingTypeLocal = LedgerPostingType::CustCashDisc;
                    break;
            }
        }

        return postingTypeLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendTransSettlement</Name>
				<Source><![CDATA[
    public CustVendTransSettlement parmCustVendTransSettlement(CustVendTransSettlement _custVendTransSettlement = custVendTransSettlement)
    {
        custVendTransSettlement = _custVendTransSettlement;

        return custVendTransSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSettlementGroupPlaceHolder</Name>
				<Source><![CDATA[
    public Counter parmSettlementGroupPlaceHolder(Counter _settlementGroupPlaceHolder = settlementGroupPlaceHolder)
    {
        settlementGroupPlaceHolder = _settlementGroupPlaceHolder;

        return settlementGroupPlaceHolder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseVATTaxAgentLog</Name>
				<Source><![CDATA[
    void reverseVATTaxAgentLog(CustVendTransPostingLog_RU  _transPostingLog,
                               TransDate                   _transactionDate)
    {
        FactureJour_RU              factureJour;
        CustVendTransPostingLog_RU  postingLogSource;

        if (_transPostingLog.PostingLogType == CustVendTransPostingLogType_RU::VATTaxAgent)
        {
            update_recordset factureJour
                setting Reversed    = NoYes::Yes,
                        ReverseDate = _transactionDate
                where factureJour.PostingLogRecId == _transPostingLog.RecId;

            select firstonly forupdate postingLogSource
                where postingLogSource.RefTableId          == _transPostingLog.RefTableId          &&
                      postingLogSource.OffSetRecId         == _transPostingLog.OffSetRecId         &&
                      postingLogSource.TaxCode             == _transPostingLog.TaxCode             &&
                      postingLogSource.vatOperationCode_RU == _transPostingLog.vatOperationCode_RU &&
                      postingLogSource.CannotBeReversed    == NoYes::Yes                           &&
                      postingLogSource.PostingLogType      == CustVendTransPostingLogType_RU::VATTaxAgent;

            if (postingLogSource.RecId)
            {
                postingLogSource.AmountMST        += _transPostingLog.AmountMST;
                postingLogSource.AmountCur        += _transPostingLog.AmountCur;
                postingLogSource.AmountMSTSecond  += _transPostingLog.AmountMSTSecond;
                postingLogSource.TaxBaseAmountCur += _transPostingLog.TaxBaseAmountCur;
                postingLogSource.TaxBaseAmountMST += _transPostingLog.TaxBaseAmountMST;
                postingLogSource.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowedVoucher</Name>
				<Source><![CDATA[
    public void setAllowedVoucher(Voucher _voucher)
    {
        findOrCreateRange_W(query.dataSourceNo(1),fieldNum(CustVendTransPostingLog_RU, Voucher),queryValue(_voucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendAdvAdjustmentDocUpdate</Name>
				<Source><![CDATA[
    public void setCustVendAdvAdjustmentDocUpdate(CustVendAdvAdjustmentDocUpdate_W _custVendAdvAdjustmentDocUpdate)
    {
        custVendAdvAdjustmentDocUpdate = _custVendAdvAdjustmentDocUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxReverseTax</Name>
				<Source><![CDATA[
    public void setTaxReverseTax(TaxReverseTaxCustVendSettle_RU _taxReverseTax)
    {
        taxReverseTax = _taxReverseTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherStateRestore</Name>
				<Source><![CDATA[
    public void voucherStateRestore()
    {
        TransDate   lastTransDate, parmTransDate;
        Voucher     lastVoucher;
        Correct     parmCorrect;

        LedgerVoucherObject ledgerVoucherObject;

        [parmCorrect,
         parmTransDate,
         lastTransDate,
         lastVoucher] = stateStack.pop();

        ledgerVoucher.lastVoucher  (lastVoucher);
        ledgerVoucher.lastTransDate(lastTransDate);

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
        ledgerVoucherObject.parmCorrection(parmCorrect);
        ledgerVoucherObject.parmTransDate (parmTransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherStateSave</Name>
				<Source><![CDATA[
    public void voucherStateSave()
    {
        stateStack.push([ledgerVoucher.findLedgerVoucherObject().parmCorrection(),
                         ledgerVoucher.findLedgerVoucherObject().parmTransDate(),
                         ledgerVoucher.lastTransDate(),
                         ledgerVoucher.lastVoucher()]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustVendSettlement</Name>
				<Source><![CDATA[
    public static CustVendReversePostingLog_RU newCustVendSettlement(CustVendSettlement      _custVendSettlement,
                                                                     LedgerVoucher           _ledgerVoucher,
                                                                     boolean                 _precisely = false)
    {
        CustVendReversePostingLog_RU postingLog;

        postingLog = new  CustVendReversePostingLog_RU(_custVendSettlement.TableId == tableNum(CustSettlement) ?
                                                       ModuleCustVend::Cust                                    :
                                                       ModuleCustVend::Vend,
                                                       _custVendSettlement.TransRecId,
                                                       _custVendSettlement.OffsetRecId,
                                                       _ledgerVoucher,
                                                       _custVendSettlement.TransDate,
                                                       _custVendSettlement.TransCompany,
                                                       _custVendSettlement.OffsetCompany);

        postingLog.buildQuery(_precisely);

        return postingLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReversePostingLogSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a set containing record IDs of transactions on settlement log records.
    /// </summary>
    /// <returns>
    /// A set containing record IDs of transactions on settlement log records.
    /// </returns>

    public Set getReversePostingLogSet()
    {
        return reversePostingLogSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates reporting date information for reversed transactions on settlement.
    /// </summary>
    /// <param name="_reversePostingLogSet">
    /// A set containing record IDs of transactions on settlement log records.
    /// </param>

    public static void createTransLink(Set _reversePostingLogSet)
    {
        CustVendTransPostingLog_RU  postingLog;
        SubledgerVoucherGeneralJournalEntry ledgerTrans, ledgerTransReverse;
        LedgerTransLink_RU          ledgerTransLink;
        SetEnumerator               enumerator = _reversePostingLogSet.getEnumerator();

        while (enumerator.moveNext())
        {
            select firstonly Voucher, TransDate, ReverseAccountingDate from postingLog
                where postingLog.RecId == enumerator.current();

            ledgerTrans.Voucher             = postingLog.Voucher;
            ledgerTrans.AccountingDate      = postingLog.TransDate;

            ledgerTransReverse.Voucher          = postingLog.Voucher;
            ledgerTransReverse.AccountingDate   = postingLog.ReverseAccountingDate;

            ledgerTransLink = LedgerTransLink_RU::newTrans(ledgerTransReverse, ledgerTrans);
            ledgerTransLink.parmReportingDate(postingLog.TransDate);
            ledgerTransLink.run();

            TransLink_RU::createGeneralJourTransLink(postingLog.Voucher, 
                postingLog.TransDate,
                postingLog.Voucher,
                postingLog.ReverseAccountingDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransInitialLedgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount getTransInitialLedgerDimension(CustVendTransPostingLog_RU _log)
    {
        LedgerDimensionAccount ret;

        if (_log.PostingLogType == CustVendTransPostingLogType_RU::CashDisc
            && _log.moduleCustVend() == ModuleCustVend::Vend)
        {
            VendTrans vendTrans;

            select firstonly DefaultDimension, PostingProfile, TransType from vendTrans
                where vendTrans.RecId == _log.TransRecId;

            if (vendTrans && vendTrans.TransType == LedgerTransType::Vend)
            {
                ret = LedgerDimensionFacade::serviceCreateLedgerDimension(
                    vendTrans.summaryLedgerDimension(vendTrans.PostingProfile),
                    vendTrans.DefaultDimension);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>