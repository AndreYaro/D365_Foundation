<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineLeadTimeDetailDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchLineLeadTimeDetailDP</c> class is the Report Data Provider class for the
/// <c>PurchLineLeadTimeDetail</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(PurchLineLeadTime)),
    SRSReportParameterAttribute(classStr(PurchLineLeadTimeDetailContract))
]
public class PurchLineLeadTimeDetailDP extends SRSReportDataProviderPreProcessTempDB
{
    PurchLineLeadTimeDetailContract     localContract;
    PurchLeadTimeDetailTmp              purchLeadTimeDetailTmp;
    FromDate                            fromDate;
    ToDate                              toDate;
    date                                todaysDate;
    PurchPlacer                         orderer;
    ItemBuyerGroupId                    buyerGroup;
    ItemGroupId                         itemGroup;
    PurchLineLeadTimeDocumentState      documentState;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to retrieve data filtered by the contract parameters.
    /// </summary>
    /// <returns>
    /// The query to retrieve report data.
    /// </returns>
    protected Query buildQuery()
    {
        Query                   q;
        QueryBuildDataSource    qbd;
        QueryBuildDataSource    qbdPurchLine;
        QueryBuildDataSource    qbdPurchTable;
        QueryBuildRange         qbr;

        q = new Query(this.parmQuery());

        qbdPurchTable = q.dataSourceTable(tableNum(PurchTable));
        qbdPurchLine = q.dataSourceTable(tableNum(PurchLine));

        if (buyerGroup)
        {
            qbr = qbdPurchTable.addRange(fieldNum(PurchTable, ItemBuyerGroupId));
            qbr.value(queryValue(buyerGroup));
        }

        if (orderer)
        {
            qbr = qbdPurchTable.addRange(fieldNum(PurchTable, WorkerPurchPlacer));
            qbr.value(queryValue(orderer));
        }

        qbr = qbdPurchTable.addRange(fieldNum(PurchTable, DocumentState));
        switch (documentState)
        {
            case PurchLineLeadTimeDocumentState::NotApproved:
                qbr.value(strFmt('(%1.%2 < %3)',
                                qbdPurchTable.name(),
                                fieldStr(PurchTable, DocumentState),
                                enum2int(VersioningDocumentState::Approved)));
                break;

            case PurchLineLeadTimeDocumentState::Approved:
                qbr.value(queryValue(VersioningDocumentState::Approved));
                break;

            case PurchLineLeadTimeDocumentState::Confirmed:
                qbr.value(queryValue(VersioningDocumentState::Confirmed));
                break;

            case PurchLineLeadTimeDocumentState::InExternalReview:
                qbr.value(queryValue(VersioningDocumentState::InExternalReview));
                break;

            default:    // All
                qbr.value(SysQuery::valueNot(VersioningDocumentState::Finalized));
        }

        if (itemGroup)
        {
            qbd = qbdPurchLine.addDataSource(tableNum(InventTable));
            qbd.fetchMode(QueryFetchMode::One2One);
            qbd.joinMode(JoinMode::ExistsJoin);
            qbd.relations(true);

            qbd = qbd.addDataSource(tableNum(InventItemGroupItem));
            qbd.fetchMode(QueryFetchMode::One2One);
            qbd.joinMode(JoinMode::ExistsJoin);
            qbd.relations(true);

            qbr = qbd.addRange(fieldNum(InventItemGroupItem, ItemGroupId));
            qbr.value(queryValue(itemGroup));
        }

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>daysToBeginLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of days until the delivery lead time of a purchase order line begins.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record buffer from which to calculate the delivery lead time.
    /// </param>
    /// <returns>
    /// The number of days until the lead time begins.
    /// </returns>
    private Days daysToBeginLeadTime(PurchLine _purchLine)
    {
        WorkCalendarSched   workCalendarSched = new WorkCalendarSched();
        PriceDisc_Price     priceDisc_Price = _purchLine.salesPurchLineInterface().priceDisc_PriceCache();

        SchedDate beginLeadTimeDate = workCalendarSched.schedDate(SchedDirection::Backward,
                                                                  _purchLine.DeliveryDate,             // FromDate
                                                                  priceDisc_Price.deliveryDays(),      // LeadTime
                                                                  priceDisc_Price.calendarDays(),
                                                                  _purchLine.vendTable_OrderAccount().PurchCalendarId);
        return beginLeadTimeDate - todaysDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the purchase order placer by using a specified a personnel number.
    /// </summary>
    /// <param name="_personnelNumber">
    /// A personnel number.
    /// </param>
    /// <returns>
    /// The purchase order placer record ID.
    /// </returns>
    private PurchPlacer getOrderer(Str60 _personnelNumber)
    {
        PurchPlacer purchPlacer = 0;

        if (_personnelNumber != '')
        {
            purchPlacer = HcmWorker::findByPersonnelNumber(_personnelNumber).RecId;
        }

        return purchPlacer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchLeadTimeDetailTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from <c>PurchLeadTimeDetailTmp</c> table.
    /// </summary>
    /// <returns>
    /// Data from the <c>PurchLeadTimeDetailTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PurchLeadTimeDetailTmp))
    ]
    public PurchLeadTimeDetailTmp getPurchLeadTimeDetailTmp()
    {
        select purchLeadTimeDetailTmp;
        return purchLeadTimeDetailTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parameters for processing the report.
    /// </summary>
    protected void initializeParameters()
    {
        todaysDate          = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(
                                            DateTimeUtil::getSystemDateTime(),
                                            DateTimeUtil::getUserPreferredTimeZone()));

        localContract       = this.parmDataContract() as PurchLineLeadTimeDetailContract;

        fromDate            = localContract.parmFromDate();
        toDate              = localContract.parmToDate();

        buyerGroup          = localContract.parmBuyerGroup();
        itemGroup           = localContract.parmItemGroup();

        orderer             = this.getOrderer(localContract.parmOrderer());

        documentState       = localContract.parmDocumentState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic by obtaining records from the <c>PurchLineLeadTimeDetail</c>
    /// query into the <c>PurchLeadTimeDetailTmp</c> table.
    /// </summary>
    public void processReport()
    {
        PurchTable              purchTable;
        PurchLine               purchLine;
        QueryRun                qr;
        Days                    daysToBeginLeadTime;
        TransDate               leadTimeBegin;

        this.initializeParameters();

        qr = new QueryRun(this.buildQuery());

        ttsbegin;

        delete_from purchLeadTimeDetailTmp;

        while (qr.next())
        {
            purchTable = qr.get(tableNum(PurchTable));
            purchLine  = qr.get(tableNum(PurchLine));

            daysToBeginLeadTime = this.daysToBeginLeadTime(purchLine);
            leadTimeBegin = daysToBeginLeadTime + todaysDate;

            // Consider orders happening only within the date range specified
            if (    leadTimeBegin >= fromDate
                &&  leadTimeBegin <= toDate)
            {
                purchLeadTimeDetailTmp.clear();

                purchLeadTimeDetailTmp.DaysToBeginLeadTime  = daysToBeginLeadTime;
                purchLeadTimeDetailTmp.DeliveryDate         = purchLine.DeliveryDate;
                purchLeadTimeDetailTmp.DocumentState        = purchTable.DocumentState;
                purchLeadTimeDetailTmp.ItemId               = purchLine.ItemId;
                purchLeadTimeDetailTmp.TodayPlusLeadTime    = this.todayPlusLeadTimeDate(purchLine);
                purchLeadTimeDetailTmp.OrderAccount         = purchTable.OrderAccount;
                purchLeadTimeDetailTmp.ProductName          = purchLine.itemName();
                purchLeadTimeDetailTmp.PurchId              = purchTable.PurchId;
                purchLeadTimeDetailTmp.PurchName            = purchTable.PurchName;
                purchLeadTimeDetailTmp.PurchUnit            = purchLine.PurchUnit;
                purchLeadTimeDetailTmp.RemainPurchPhysical  = purchLine.RemainPurchPhysical;

                purchLeadTimeDetailTmp.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>todayPlusLeadTimeDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a purchase order line delivery date in which the lead time starts today.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record from which to calculate the delivery lead time.
    /// </param>
    /// <returns>
    /// The date that is obtained by adding the delivery lead time to the current date.
    /// </returns>
    private SchedDate todayPlusLeadTimeDate(PurchLine _purchLine)
    {
        WorkCalendarSched   workCalendarSched = new WorkCalendarSched();
        PriceDisc_Price     priceDisc_Price = _purchLine.salesPurchLineInterface().priceDisc_PriceCache();

        return workCalendarSched.schedDate(SchedDirection::Forward,
                                           todaysDate,                         // FromDate
                                           priceDisc_Price.deliveryDays(),     // LeadTime
                                           priceDisc_Price.calendarDays(),
                                           _purchLine.vendTable_OrderAccount().PurchCalendarId,
                                           _purchLine.type().internalCalendarId());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>