<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCountCreateItemTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventCountCreateItemTask extends InventCountCreate implements CostIAsyncRunnable
{
    List    itemsToProcess;

    int     numOfTasks;
    int     currentTaskNum;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList1
         numOfTasks,
         currentTaskNum,
         lineNum
    #ENDMACRO

    #Define.LineNumAdd(0.00001)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    public System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventCountCreateItemTask),
                                                          staticMethodStr(InventCountCreateItemTask, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    private static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        InventCountCreateItemTask inventCountCreateItemTask = new InventCountCreateItemTask();
        container packedInventCountCreateItemTask;

        [packedInventCountCreateItemTask] = params;
        inventCountCreateItemTask.unpack(packedInventCountCreateItemTask);

        inventCountCreateItemTask.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (itemsToProcess.empty())
        {
            this.createOnHandCountingJournal();
            return;
        }
       
        boolean allSuccess = true;
        ListEnumerator enumerator = itemsToProcess.getEnumerator();
        while (enumerator.moveNext())
        {
            ItemId itemId = enumerator.current();
            try
            {
                QueryBuildDataSource qbdSum = this.queryRun().query().dataSourceTable(tableNum(InventSum));
                SysQuery::findOrCreateRange(qbdSum, fieldNum(InventSum, ItemId)).value(itemId);

                this.createOnHandCountingJournal();
            }
            catch
            {
                warning(strFmt("@SCM:InventCountCreateItemException", itemId));
                allSuccess = false;
            }

            lineNum = trunc(lineNum + 1);
        }
        if  (!allSuccess) throw Exception::Error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCountCreateItemTask</Name>
				<Source><![CDATA[
    public static InventCountCreateItemTask newCountCreateItemTask(
        InventJournalId _journalId,
        TransDate       _transDate,
        InventDimParm   _inventDimParm,
        List            _itemsToProcess,
        int             _numOfTasks,
        int             _currentTaskNum,
        Query           _query,
        int             _itemSetBaseLineNum)
    {
        InventCountCreateItemTask   inventCountCreateItemTask = new InventCountCreateItemTask();

        inventCountCreateItemTask.getLast();
        inventCountCreateItemTask.parmJournalId(_journalId);
        inventCountCreateItemTask.parmCountDate(_transDate);
        inventCountCreateItemTask.parmInventDimParm(_inventDimParm);

        inventCountCreateItemTask.parmItemsToProcess(_itemsToProcess);

        inventCountCreateItemTask.numOfTasks = _numOfTasks;
        inventCountCreateItemTask.currentTaskNum = _currentTaskNum;
        inventCountCreateItemTask.queryRun().query(_query);
        inventCountCreateItemTask.lineNum = _itemSetBaseLineNum;

        return inventCountCreateItemTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOnHandCountingJournal</Name>
				<Source><![CDATA[
    private void createOnHandCountingJournal()
    {
        this.runSingleTransaction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSingleTransaction</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void runSingleTransaction()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            this.queryAddGroupFields();
            this.progressInit(InventCountCreate::description(),maxLines,#AviUpdate);


            this.initBulkInventSum();

            this.addFilterToCountingGroup();

            InventSum   inventSum;
            InventDim   inventDim;

            while (this.getNextRecord(inventSum, inventDim))
            {
                setPrefix(#prefixField(inventSum,itemId));
                progress.setText(inventSum.ItemId, 1);

                if (this.doCounting(inventSum,inventDim))
                {
                    this.createInventJournalTrans(inventSum,inventDim, includeZeroOnHand);
                    progress.incCount();
                }

                if (!this.allowMoreLines())
                {
                    break;
                }
            }

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            queryRun.reset();
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    queryRun.reset();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPartitionTransaction</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void runPartitionTransaction()
    {
        #OCCRetryCount

        if (! this.validate())
        {
            throw error("@SYS18447");
        }

        this.queryAddGroupFields();
        this.progressInit(InventCountCreate::description(),maxLines,#AviUpdate);
        this.initJournalTableData();

        this.initBulkInventSum();

        this.addFilterToCountingGroup();

        InventSum   inventSum;
        InventDim   inventDim;
        
        using (InventRecordPartitionCommitter partitionCommitter = InventRecordPartitionCommitter::construct(50))
        {
            while (this.getNextRecord(inventSum, inventDim))
            {
                setPrefix(#prefixField(inventSum,itemId));
                progress.setText(inventSum.ItemId, 1);

                if (this.doCounting(inventSum,inventDim))
                {
                    try
                    {
                        partitionCommitter.beginTransactionIfNeeded();
                        this.createInventJournalTrans(inventSum,inventDim, includeZeroOnHand);
                        progress.incCount();
                        partitionCommitter.commitTransactionIfNeeded();
                    }
                    catch (Exception::Deadlock)
                    {
                        retry;
                    }
                    catch (Exception::UpdateConflict)
                    {
                        if (appl.ttsLevel() == 0)
                        {
                            if (xSession::currentRetryCount() >= #RetryNum)
                            {
                                throw Exception::UpdateConflictNotRecovered;
                            }
                            else
                            {
                                retry;
                            }
                        }
                        else
                        {
                            throw Exception::UpdateConflict;
                        }
                    }

                    if (!this.allowMoreLines())
                    {
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineNum</Name>
				<Source><![CDATA[
    protected LineNum calculateLineNum()
    {
        LineNum result = lineNum;
        lineNum += #LineNumAdd;
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemsToProcess</Name>
				<Source><![CDATA[
    protected List parmItemsToProcess(List _itemsToProcess = itemsToProcess)
    {
        itemsToProcess = _itemsToProcess;
        return itemsToProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList1,itemsToProcess.pack()] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = conPeek(_packedClass,1);
        container itemsToProcessContainer;
        container base;
    
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList1,itemsToProcessContainer,base] = _packedClass;
                if (base)
                {
                    super(base);
                }
                break;
            default:
                return false;
        }

        itemsToProcess = List::create(itemsToProcessContainer);

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>