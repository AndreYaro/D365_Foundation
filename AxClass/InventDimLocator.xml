<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimLocator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class that contain methods for finding an InventDim related to a specific record or a caller datasource.
/// </summary>
public class InventDimLocator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findAnyFromArgsCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first InventDim related to a calling datasouce.
    /// </summary>
    /// <param name = "_args">Args with a caller.</param>
    /// <returns>The first releated InventDim if one exists.</returns>
    public static InventDim findAnyFromArgsCaller(Args _args)
    {
        InventDim inventDim;

        FormControl callerFormControl = SysTableLookup::getCallerControl(_args, false);
        if (callerFormControl
            && callerFormControl.dataSourceObject()
            && callerFormControl.dataSourceObject().cursor())
        {
            Common record = callerFormControl.dataSourceObject().cursor();
            inventDim = InventDimLocator::findAnyFromRecord(record);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAnyFromRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first InventDim related to a record.
    /// </summary>
    /// <param name = "_record">Any record that might have a relation to the InventDim table.</param>
    /// <returns>The first releated InventDim if one exists.</returns>
    public static InventDim findAnyFromRecord(Common _record)
    {
        InventDim inventDim;
        DictRelation dictRelation = new DictRelation(_record.tableId);
        dictRelation.loadTableRelation(tableNum(InventDim));

        if (dictRelation.lines())
        {
            InventDimId inventDimId;
            DataAreaId dataAreaId;
            RecId recId;

            for (int i = 1; i <= dictRelation.lines(); i++)
            {
                FieldId toFieldId = dictRelation.lineExternTableValue(i);
                FieldId fromFieldId = dictRelation.lineTableValue(i);

                if (toFieldId == fieldNum(InventDim, InventDimId))
                {
                    inventDimId = _record.(fromFieldId);
                }
                else if (toFieldId == fieldNum(InventDim, DataAreaId))
                {
                    dataAreaId = _record.(fromFieldId);
                }
                else if (toFieldId == fieldNum(InventDim, RecId))
                {
                    recId = _record.(fromFieldId);
                }
            }

            if (dataAreaId && inventDimId)
            {
                inventDim = inventDim::findInLegalEntity(inventDimId, dataAreaId);
            }
            else if (inventDimId)
            {
                inventDim = InventDim::find(inventDimId);
            }
            else if (recId)
            {
                select firstonly inventDim
                    where inventDim.RecId == recId;
            }
        }

        // There are a number of temp tables that do not have metadata relations
        // to InventDim, so we search for a field with the InventDimId EDT.
        if (!inventDim && _record.isTempDb())
        {
            SysDictTable sdt = new SysDictTable(_record.TableId);
            SetEnumerator fieldEnumerator = sdt.fields().getEnumerator();
            while (fieldEnumerator.moveNext())
            {
                DictField currentField = fieldEnumerator.current();
                if (SysDictType::isEqualOrExtending(currentField.typeId(), extendedTypeNum(InventDimId)))
                {
                    InventDimId inventDimId = _record.getFieldValue(currentField.name());
                    if (inventDimId)
                    {
                        inventDim = InventDim::find(inventDimId);
                    }
                    break;
                }
            }
        }

        return inventDim;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>