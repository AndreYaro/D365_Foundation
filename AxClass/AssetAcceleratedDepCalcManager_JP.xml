<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetAcceleratedDepCalcManager_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for calculation of accelerated depreciation
/// </summary>
class AssetAcceleratedDepCalcManager_JP
{
    AssetTransDate                  transDate;
    AssetAcceleratedDepGroupId_JP   groupId;

    #AssetDepCalculation_JP
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acceleratedDepRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate accelerated depreciation rate
    /// </summary>
    /// <param name="_docAccDepTable">
    /// The record of <C>AssetDocumentAcceleratedDepTable_JP</C> to calculate
    /// </param>
    /// <returns>
    /// Accelerated depreciation rate
    /// </returns>
    public static AssetDepreciationRate_JP acceleratedDepRate(AssetDocumentAcceleratedDepTable_JP _docAccDepTable)
    {
        AssetDepreciationRate_JP accDepRate;

        accDepRate = _docAccDepTable.OveruseRate;

        accDepRate = roundUp(accDepRate, #AcceleratedDepRatePrecision);

        return accDepRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidAcceleratedDocumentEntries</Name>
				<Source><![CDATA[
    internal static List getValidAcceleratedDocumentEntries(
        container _acceleratedEntryContainer,
        AssetTransDate _fromDate,
        AssetTransDate _toDate)
    {
        Counter conLength;
        Counter counter;
        AssetTransDate validFrom;
        AssetTransDate validTo;
        AssetDocumentEntry_JP assetDocumentEntry;
        AssetDocumentEntry_JP assetDocumentEntryTmpLoc;
        List ret = new List(Types::Class);

        if (_fromDate && _toDate)
        {
            conLength = conLen(_acceleratedEntryContainer);
            for (counter = 1; counter <= conLength; counter++)
            {
                [validFrom, validTo, assetDocumentEntryTmpLoc] = conPeek(_acceleratedEntryContainer, counter);

                if ((validFrom <= _fromDate && validTo >= _fromDate)
                    || (validFrom <= _toDate && validTo >= _toDate)
                    || (validFrom >= _fromDate && validTo <= _toDate))
                {
                    assetDocumentEntry = assetDocumentEntryTmpLoc;

                    AssetAcceleratedDocumentEntry_JP assetAcceleratedDocumentEntry_JP = new AssetAcceleratedDocumentEntry_JP();
                    assetAcceleratedDocumentEntry_JP.parmValidFrom(validFrom);
                    assetAcceleratedDocumentEntry_JP.parmValidTo(validTo);
                    assetAcceleratedDocumentEntry_JP.parmAssetDocumentEntry_JP(assetDocumentEntry);

                    ret.addEnd(assetAcceleratedDocumentEntry_JP);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidAcceleratedDocumentEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets valid document entry in specific date
    /// </summary>
    /// <param name="_acceleratedEntryContainer">
    /// Accelerated document entry container.
    /// </param>
    /// <param name="_transDate">
    /// Specific transaction date.
    /// </param>
    /// <returns>
    /// <c>AssetDocumentEntry_JP</c> record
    /// </returns>
    public static AssetDocumentEntry_JP getValidAcceleratedDocumentEntry(
        container      _acceleratedEntryContainer,
        AssetTransDate _transDate)
    {
        Counter                  conLength;
        Counter                  counter;
        AssetTransDate           validFrom;
        AssetTransDate           validTo;
        AssetDocumentEntry_JP    assetDocumentEntry;
        AssetDocumentEntry_JP    assetDocumentEntryTmpLoc;

        if (_transDate)
        {
            conLength = conLen(_acceleratedEntryContainer);
            for (counter = 1; counter <= conLength; counter++)
            {
                [validFrom, validTo, assetDocumentEntryTmpLoc] = conPeek(_acceleratedEntryContainer, counter);

                // valid asset document entry
                if (validFrom <= _transDate
                    && validTo >= _transDate)
                {
                    assetDocumentEntry = assetDocumentEntryTmpLoc;

                    AssetAcceleratedDepreciation_JPContext context = AssetAcceleratedDepreciation_JPContext::current();
                    if (context)
                    {
                        context.fromDate = validFrom;
                        context.toDate = validTo;
                    }

                    break;
                }

                // no valid document entry in time sequence
                if (_transDate < validFrom)
                {
                    break;
                }

                if (_transDate > validTo
                    && AssetAcceleratedDepreciation_JPContext::getAssetAccrual() == AssetAccrual::Yearly
                    && AssetAcceleratedDepreciation_JPContext::getStartOfDeprPeriod() < validTo)
                {
                    assetDocumentEntry = assetDocumentEntryTmpLoc;

                    AssetAcceleratedDepreciation_JPContext context = AssetAcceleratedDepreciation_JPContext::current();
                    if (context)
                    {
                        context.fromDate = validFrom;
                        context.toDate = validTo;
                    }

                    break;
                }
            }
        }

        return assetDocumentEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccDepEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Judge if accelerated depreciation is enabled
    /// </summary>
    /// <param name="_docAccDepTable">
    /// The record of <C>AssetDocumentAcceleratedDepTable_JP</C> to calculate
    /// </param>
    /// <returns>
    /// Returns true if accelerated depreciation is enabled, else returns false.
    /// </returns>
    public static boolean isAccDepEnabled(AssetDocumentAcceleratedDepTable_JP _docAccDepTable)
    {
        boolean                  ret;

        if (_docAccDepTable.OveruseRate < _docAccDepTable.RateThreshold)
        {
            ret = false;
        }
        else
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>