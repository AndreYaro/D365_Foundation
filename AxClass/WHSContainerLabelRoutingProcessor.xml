<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSContainerLabelRoutingProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSContainerLabelRoutingProcessor
{
    private WHSContainerTable containerTable;
    private WHSShipmentTable shipmentTable;
    private InventLocationId inventLocationId;
    private WMSLocationId wmsLocationId;
    private WHSUserId userId;
    private HcmWorkerRecId hcmWorkerRecId;
    private WHSMobileAppDeviceId deviceId;

    private WhsDocumentRoutingTranslator documentRoutingTranslator;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(
        WHSContainerTable _containerTable, 
        WHSShipmentTable _shipmentTable,
        InventLocationId _inventLocationId,
        WMSLocationId _wmsLocationId,
        WHSUserId _userId,
        HcmWorkerRecId _hcmWorkerRecId,
        WHSMobileAppDeviceId _deviceId)
    {
        containerTable = _containerTable;
        shipmentTable = _shipmentTable;
        inventLocationId = _inventLocationId;
        wmsLocationId = _wmsLocationId;
        userId = _userId;
        hcmWorkerRecId = _hcmWorkerRecId;
        deviceId = _deviceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelForCreatedContainer</Name>
				<Source><![CDATA[
    [SubscribesTo(tableStr(WHSContainerTable), staticDelegateStr(WHSContainerTable, onContainerCreated))]
    internal static void printLabelForCreatedContainer(WHSCreateContainerParameters _createContainerParameters)
    {
        if (_createContainerParameters.parmPrintContainerLabel())
        {
            HcmWorkerRecId hcmWorkerRecId = 0;
            if (_createContainerParameters.parmWhsWorkerRecId())
            {
                WHSWorker whsWorker = WHSWorker::find(_createContainerParameters.parmWhsWorkerRecId());
                if (whsWorker.RecId)
                {
                    hcmWorkerRecId = HcmWorker::find(whsWorker.Worker).RecId;
                }
            }

            InventLocationId inventLocationId;
            WMSLocationId wmsLocationId;

            if (_createContainerParameters.parmContainerLocation())
            {
                inventLocationId = _createContainerParameters.parmContainerLocation().inventLocationId;
                wmsLocationId = _createContainerParameters.parmContainerLocation().wMSLocationId;
            }

            WHSDocumentRoutingContext currentDocumentRoutingContext = WHSDocumentRoutingContext::current();

            WHSContainerLabelRoutingParameters containerLabelRoutingParameters = new WHSContainerLabelRoutingParameters(
                _createContainerParameters.parmContainerId(),
                inventLocationId,
                wMSLocationId,
                _createContainerParameters.parmUserId(),
                hcmWorkerRecId,
                currentDocumentRoutingContext ? currentDocumentRoutingContext.parmMobileDeviceId() : nullValueFromType(Types::Guid));

            var routingProcessor = WHSContainerLabelRoutingProcessor::newFromParameters(containerLabelRoutingParameters);
            routingProcessor.printLabel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelForClosedContainer</Name>
				<Source><![CDATA[
    internal static void printLabelForClosedContainer(WHSContainerTable _containerTable, InventDimId _packStationInventDim)
    {
        InventDim containerLocationInventDim = InventDim::find(_packStationInventDim);
        
        WHSDocumentRoutingContext context = WHSDocumentRoutingContext::current();

        WHSContainerLabelRoutingParameters containerLabelRoutingParameters = new WHSContainerLabelRoutingParameters(
            _containerTable.ContainerId,
            containerLocationInventDim.InventLocationId,
            containerLocationInventDim.wmsLocationId,
            context ? context.parmWorkUserId() : '',
            context ? context.parmWorker() : 0,
            context ? context.parmMobileDeviceId() : nullValueBaseType(Types::Guid));

        var routingProcessor = WHSContainerLabelRoutingProcessor::newFromParameters(containerLabelRoutingParameters);
        routingProcessor.printLabel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSContainerLabelRoutingProcessor newFromParameters(WHSContainerLabelRoutingParameters _containerLabelPrintingParams)
    {
        WHSContainerTable containerTable =  WHSContainerTable::findByContainerId(_containerLabelPrintingParams.parmContainerId());
        WHSShipmentTable shipmentTable = WHSShipmentTable::find(containerTable.ShipmentId);

        return new WHSContainerLabelRoutingProcessor(
            containerTable, 
            shipmentTable,
            _containerLabelPrintingParams.parmInventLocationId(),
            _containerLabelPrintingParams.parmWMSLocationId(),
            _containerLabelPrintingParams.parmUserId(),
            _containerLabelPrintingParams.parmHcmWorkerRecId(),
            _containerLabelPrintingParams.parmDeviceId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabel</Name>
				<Source><![CDATA[
    protected internal void printLabel()
    {
        RefRecId routeRecId = this.findRoute();
        WHSContainerLabelRoutingLine routingLine;

        WHSLabelPrinterSelector labelPrinterSelector = WHSLabelPrinterSelector::construct();
        labelPrinterSelector.withWarehouseId(inventLocationId)
                            .withLocationId(wmsLocationId)
                            .withDeviceId(deviceId)
                            .withUserId(userId);

        while select routingLine
            where routingLine.ContainerLabelRouting == routeRecId
        {
            if (this.mustPrintLabel(routingLine))
            {
                WHSLabelLayout labelLayout;

                if (!routingLine.PrinterName)
                {
                    labelLayout = WHSLabelLayout::findRecId(routingLine.LabelLayout);
                }

                labelPrinterSelector.withForceUseOfFallbackPrinter(routingLine.UseSpecifiedPrinter == WHSDocumentRoutingUseSpecifiedPrinter::Always);
                labelPrinterSelector.withFallbackPrinter(routingLine.PrinterName);
                routingLine.PrinterName = labelPrinterSelector.selectPrinterForPrinterStockType(labelLayout.PrinterStockTypeName);

                WHSContainerLabelPrintCommandGenerator::printLabelsForContainer(routingLine, containerTable, shipmentTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPrintLabel</Name>
				<Source><![CDATA[
    protected boolean mustPrintLabel(WHSContainerLabelRoutingLine _routingLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRoute</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected RefRecId findRoute()
    {
        WHSContainerLabelRouting containerLabelRouting;

        while select containerLabelRouting
            order by SeqNum asc
            where containerLabelRouting.InventLocationId == inventLocationId
                && (!containerLabelRouting.PackingStation || containerLabelRouting.PackingStation == wmsLocationId)
                && (!containerLabelRouting.HcmWorker || containerLabelRouting.HcmWorker == hcmWorkerRecId)
                && (!containerLabelRouting.UserId || containerLabelRouting.UserId == userId)
                && (!containerLabelRouting.ContainerTypeCode || containerLabelRouting.ContainerTypeCode == containerTable.ContainerTypeCode)
                && (!containerLabelRouting.ContainerStatus || containerLabelRouting.ContainerStatus == containerTable.ContainerStatus)
                && (!containerLabelRouting.AccountNum || containerLabelRouting.AccountNum == shipmentTable.AccountNum)
                && (!containerLabelRouting.CarrierCode || containerLabelRouting.CarrierCode == shipmentTable.CarrierCode)                
        {
            // If we don't need to run the query, we found a route.
            if (!containerLabelRouting.RunQuery || containerLabelRouting.Query == conNull())
            {
                break;
            }

            QueryRun qr = new QueryRun(containerLabelRouting.Query);
            SysQuery::findOrCreateRange(qr.query().dataSourceTable(tableNum(WHSContainerTable)), fieldNum(WHSContainerTable, ContainerId)).value(containerTable.ContainerId);
            if (qr.next())
            {
                break;
            }
        }

        return containerLabelRouting.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>