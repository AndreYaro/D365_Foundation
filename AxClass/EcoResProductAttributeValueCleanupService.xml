<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductAttributeValueCleanupService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResProductAttributeValueCleanupService</c> class is responsible for deleting <c>EcoResAttributeValue</c> records for products and attributes that are not associated
/// anymore via a product category.
/// </summary>
public class EcoResProductAttributeValueCleanupService
{
    private EcoResInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanupProductAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>EcoResAttributeValue</c> records for products and attributes not associated together via a product category.
    /// </summary>
    [Hookable(false)]
    public void cleanupProductAttributeValues(EcoResProductAttributeValueCleanupDataContract _dataContract)
    {
        EcoResProductRecId productRecIdFilter = _dataContract.parmProductRecId();
        EcoResAttributeRecId attributeRecIdFilter = _dataContract.parmAttributeRecId();

        using (var releaseProductAttributeActivityContext = this.logger().productAttributeActivities().valuesCleanup())
        {
            this.logger().logProductAttributeInformation(productRecIdFilter, attributeRecIdFilter);

            new SysDaDeleteStatement().executeQuery(new SysDaDeleteObject(this.buildDeleteAttributeValueQuery(productRecIdFilter, attributeRecIdFilter)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDeleteAttributeValueQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query on <c>EcoResAttributeValue</c> table with an exists join on <c>EcoResProductAttributeValueCleanupView</c> to identify attribute value records not associated to a product via a category.
    /// </summary>
    /// <param name = "_productRecIdFilter">The product record ID to filter the query for a specific product</param>
    /// <param name = "_attributeRecIdFilter">The attribute record ID to filter the query for a specific attribute</param>
    /// <returns>The created SysDA query object.</returns>
    /// <remarks>
    /// The <c>EcoResProductAttributeValueCleanupView</c> view returns the product attribute values with products and attributes that are associated via a product category.
    /// </remarks>
    private SysDaQueryObject buildDeleteAttributeValueQuery(EcoResProductRecId _productRecIdFilter, EcoResAttributeRecId _attributeRecIdFilter)
    {
        EcoResAttributeValue attributeValue;

        attributeValue.skipDataMethods(true);
        
        SysDaQueryObject deleteQuery = new SysDaQueryObject(attributeValue);

        deleteQuery.joinClause(SysDaJoinKind::ExistsJoin, this.deleteAttributeValueNotAssociatedJoinClause(attributeValue));

        SysDaQueryExpression whereClauseQueryExpression;
        if (_attributeRecIdFilter)
        {
            whereClauseQueryExpression = new SysDaEqualsExpression(new SysDaFieldExpression(attributeValue, fieldStr(EcoResAttributeValue, Attribute)), new SysDaValueExpression(_attributeRecIdFilter));
        }

        if (_productRecIdFilter)
        {
            EcoResProductInstanceValue productInstanceValueFilter = EcoResProductInstanceValue::findByProduct(_productRecIdFilter);
            var whereClauseQueryExpressionProduct = new SysDaEqualsExpression(new SysDaFieldExpression(attributeValue, fieldStr(EcoResAttributeValue, InstanceValue)), new SysDaValueExpression(productInstanceValueFilter.RecId));

            if (whereClauseQueryExpression)
            {
                whereClauseQueryExpression = new SysDaAndExpression(whereClauseQueryExpression, whereClauseQueryExpressionProduct);
            }
            else
            {
                whereClauseQueryExpression = whereClauseQueryExpressionProduct;
            }
        }

        if (whereClauseQueryExpression)
        {
            deleteQuery.whereClause(whereClauseQueryExpression);
        }
        
        return deleteQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAttributeValueNotAssociatedJoinClause</Name>
				<Source><![CDATA[
    private SysDaQueryObject deleteAttributeValueNotAssociatedJoinClause(EcoResAttributeValue _attributeValue)
    {
        EcoResProductAttributeValueCleanupView productAttributeValueCleanupView;

        SysDaQueryObject joinQuery = new SysDaQueryObject(productAttributeValueCleanupView);

        joinQuery.whereClause(new SysDaEqualsExpression(new SysDaFieldExpression(_attributeValue, fieldStr(EcoResAttributeValue, RecId)),
                                                        new SysDaFieldExpression(productAttributeValueCleanupView, fieldStr(EcoResProductAttributeValueCleanupView, AttributeValueRecId))));

        return joinQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductAttributeValueCleanupService construct()
    {
        return new EcoResProductAttributeValueCleanupService();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private EcoResInstrumentationLogger logger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = EcoResInstrumentationLogger::createLogger(classStr(EcoResProductAttributeValueCleanupService));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>