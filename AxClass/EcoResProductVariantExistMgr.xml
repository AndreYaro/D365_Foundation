<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductVariantExistMgr</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EcoResProductVariantExistMgr</c> class is used to determine whether the product variants
///    exists.
/// </summary>
/// <remarks>
///    The purpose of the class is to determine whether product variants exist on an enterprise level.
/// </remarks>
class EcoResProductVariantExistMgr
{
    QueryBuildDataSource    qbdsVariant;
    Query                   queryVariantExist;
    RefRecId                productMaster;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDimensionDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a dimension data source to the data source for the product variant.
    /// </summary>
    /// <param name="_subtype">
    ///    The subtype of the dimension.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    The ID of the product dimension attribute.
    /// </param>
    /// <param name="_dimensionFieldId">
    ///    The field ID for the variants dimension attribute value.
    /// </param>
    /// <param name="_dimension">
    ///    The ID of the dimension value.
    /// </param>
    /// <remarks>
    ///    This method can be used when the primary key of the dimension table is used to filter.
    /// </remarks>
    private void addDimensionDataSource(
                                        TableId     _subtype,
                                        RefRecId    _productDimensionAttribute,
                                        FieldId     _dimensionFieldId,
                                        RefRecId    _dimension)
    {
        QueryBuildDataSource qbds = qbdsVariant.addDataSource(_subtype);
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addRange(fieldNum(EcoResProductVariantDimensionValue, ProductDimensionAttribute)).value(queryValue(_productDimensionAttribute));
        qbds.addRange(_dimensionFieldId).value(queryValue(_dimension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimensionDataSourceWithValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a dimension data source to the data source for the product variant.
    /// </summary>
    /// <param name="_subtype">
    ///    The subtype of the dimension.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    The ID of the product dimension attribute.
    /// </param>
    /// <param name="_dimensionTable">
    ///    The table ID of the dimension table.
    /// </param>
    /// <param name="_dimensionFieldId">
    ///    The field ID of the dimension table to use to filter.
    /// </param>
    /// <param name="_dimensionValue">
    ///    The value to use to filter.
    /// </param>
    /// <remarks>
    ///    This method can be used when the natural key of the dimension table is used to filter.
    /// </remarks>
    private void addDimensionDataSourceWithValue(
                                                 TableId     _subtype,
                                                 RefRecId    _productDimensionAttribute,
                                                 TableId     _dimensionTable,
                                                 FieldId     _dimensionFieldId,
                                                 Name        _dimensionValue)
    {
        QueryBuildDataSource qbds = qbdsVariant.addDataSource(_subtype);
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addRange(fieldNum(EcoResProductVariantDimensionValue, ProductDimensionAttribute)).value(queryValue(_productDimensionAttribute));

        qbds = qbds.addDataSource(_dimensionTable);
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addRange(_dimensionFieldId).value(queryValue(_dimensionValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDsFromDimFieldIdWithValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a data source to the product variant data source by using the <c>dimFieldId</c> field.
    /// </summary>
    /// <param name="_dimFieldId">
    ///    The field ID of a field in the <c>InventDim</c> table.
    /// </param>
    /// <param name="_dimValue">
    ///    The value of a field in the <c>InventDim</c> table with an ID equal to the field ID.
    /// </param>
    private void addDsFromDimFieldIdWithValue(FieldId _dimFieldId, Name _dimValue)
    {
        //get the dimension attribute id for the field id
        RefRecId productDimensionAttributeRecId = EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(_dimFieldId);
        EcoResProductDimensionAttribute ecoResProductDimensionAttribute = EcoResProductDimensionAttribute::find(productDimensionAttributeRecId);
        //find product variant dimension table
        TableId dimensionVariantTableId = ecoResProductDimensionAttribute.getVariantDimensionTableId();

        //find the related dimension table
        TableId dimensionTableId = ecoResProductDimensionAttribute.getDimensionTableId();
        FieldId dimNaturalkeyFldId = EcoResProductDimensionAttribute::getDimensionTableNaturalKeyFieldId(dimensionTableId);

        this.addDimensionDataSourceWithValue(dimensionVariantTableId,
                                             productDimensionAttributeRecId,
                                             dimensionTableId,
                                             dimNaturalkeyFldId,
                                             _dimValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsVariant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a product variant exists.
    /// </summary>
    /// <returns>
    ///    true if a product variant exists; otherwise, false.
    /// </returns>
    public boolean existsVariant()
    {
        if (!queryVariantExist)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        QueryRun queryRun = new QueryRun(queryVariantExist);
        //if queryRun.next() return true then product variant exists
        return queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVariant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the product variant for the specified product master and product dimension values.
    /// </summary>
    /// <returns>
    ///    An <c>EcoResDistinctProductVariantRecId</c> value for the distinct product variant; otherwise, 0.
    /// </returns>
    public EcoResDistinctProductVariantRecId findVariant()
    {
        EcoResDistinctProductVariantRecId   distinctProductVariantRecId;

        if (!queryVariantExist)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        qbdsVariant = queryVariantExist.dataSourceTable(tableNum(EcoResDistinctProductVariant));
        qbdsVariant.addRange(fieldNum(EcoResDistinctProductVariant, ProductMaster)).value(queryValue(productMaster));

        QueryRun queryRun = new QueryRun(queryVariantExist);

        if (queryRun.next())
        {
            EcoResDistinctProductVariant ecoResDistinctProductVariant = queryRun.get(tableNum(EcoResDistinctProductVariant));
            distinctProductVariantRecId =  ecoResDistinctProductVariant.RecId;
        }

        return distinctProductVariantRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVariantWithDefaultConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the current product variant that has the default configuration for constraint based products.
    /// </summary>
    /// <returns>
    ///    An <c>EcoResDistinctProductVariantRecId</c> value for the distinct product variant which has the
    ///    default configuration for constraint based products.
    /// </returns>
    public EcoResDistinctProductVariantRecId findVariantWithDefaultConfiguration()
    {
        EcoResDistinctProductVariantRecId distinctProductVariantRecId;

        if (EcoResProductMaster::find(productMaster).isConstraintBased())
        {
            distinctProductVariantRecId = EcoResProductVariantExistMgr::findVariantByMasterAndDimensions(productMaster,
                EcoResProductVariantDimValue::getDimensionValuesContainerForConfiguration(EcoResProductParameters::getConfigurationName()));
        }

        return distinctProductVariantRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDistinctProductVariantDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the data source for the distinct product variant.
    /// </summary>
    private void initDistinctProductVariantDataSource()
    {
        qbdsVariant = queryVariantExist.addDataSource(tableNum(EcoResDistinctProductVariant));
        qbdsVariant.firstOnly(true);
        qbdsVariant.addSelectionField(fieldNum(EcoResDistinctProductVariant,RecId));

        // add a range on the product master to filter only matching variants
        qbdsVariant.addRange(fieldNum(EcoResDistinctProductVariant, ProductMaster)).value(SysQuery::value(productMaster));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance of the <c>EcoResProductVariantExistsMgr</c> class by using the specified
    ///    ID of a product master.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of a product master.
    /// </param>
    protected void initFromProductMaster(RefRecId _productMaster)
    {
        productMaster = _productMaster;

        this.initDistinctProductVariantDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        queryVariantExist = new Query();

        // RLS is implicitly enabled when executing dynamically-built queries. RLS adds a filter to only return records
        // for the sub types that the user has access to. In this place we don't want a filtered result, so we need to disable RLS.
        queryVariantExist.recordLevelSecurity(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static EcoResProductVariantExistMgr construct()
    {
        return new EcoResProductVariantExistMgr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDistinctProductVariantFromItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the existence of a distinct product variant.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID of the item to check for existence.
    /// </param>
    /// <param name="_inventDim">
    ///    An <c>InventDim</c> buffer with the values that are used to determine the existence of a related
    ///    product variant.
    /// </param>
    /// <returns>
    ///    true if a distinct product variant exists; otherwise, false.
    /// </returns>
    static boolean existDistinctProductVariantFromItem(ItemId _itemId, InventDim _inventDim)
    {
        InventTable                         inventTable                         = InventTable::find(_itemId);
        EcoResProductDimensionGroupProduct  ecoResProductDimensionGroupProduct  = EcoResProductDimensionGroupProduct::findByProduct(inventTable.Product);
        //get a container of active dimensions for this field group and set the class wide variables
        List                                activeProductDimFieldsCon           = ecoResProductDimensionGroupProduct.activeProductDimensions();
        ListEnumerator                      enumerator                          = activeProductDimFieldsCon.getEnumerator();
        EcoResProductVariantExistMgr        ecoResProductVariantExistMgr        = EcoResProductVariantExistMgr::construct();
        RefRecId                            productMasterId                     = EcoResProductMaster::find(inventTable.Product).RecId;

        if (!productMasterId)
        {
            throw error(EcoResProductMaster::txtNotExist());
        }

        if (!activeProductDimFieldsCon.elements())
        {
            throw error ("@SYS133916");
        }

        ecoResProductVariantExistMgr = EcoResProductVariantExistMgr::newFromProductMaster(productMasterId);

        // loop through active product dimensions to build the correct datastructure for later calls
        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();

            if (!_inventDim.(dimFieldId))
            {
                throw error (strFmt("@SYS53724",fieldId2pname(tableNum(InventDim),dimFieldId)));
            }

            ecoResProductVariantExistMgr.addDsFromDimFieldIdWithValue(dimFieldId,_inventDim.(dimFieldId));
        }

        return ecoResProductVariantExistMgr.existsVariant();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVariantByMasterAndDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the distinct product variant by the product master record and the set of product dimension
    ///    values.
    /// </summary>
    /// <param name="_productMasterRecId">
    ///    The <c>EcoResProductMasterRecId</c> value
    /// </param>
    /// <param name="_productDimensions">
    ///    A container that contains the product dimension values.
    /// </param>
    /// <returns>
    ///    A <c>EcoResDistinctProductVariantRecId</c> value; otherwise, 0.
    /// </returns>
    static EcoResDistinctProductVariantRecId findVariantByMasterAndDimensions(EcoResProductMasterRecId _productMasterRecId, container  _productDimensions)
    {
        EcoResProductDimensionGroupProduct  ecoResProductDimensionGroupProduct  = EcoResProductDimensionGroupProduct::findByProduct(_productMasterRecId);

        //get a container of active dimensions for this field group and set the class wide variables
        List                                activeProductDimFieldsCon           = ecoResProductDimensionGroupProduct.activeProductDimensions();
        ListEnumerator                      enumerator                          = activeProductDimFieldsCon.getEnumerator();
        EcoResProductVariantExistMgr        ecoResProductVariantExistMgr        = EcoResProductVariantExistMgr::construct();
        int                                 dimensionIndex;
        RefRecId                            productDimensionAttributeRecId;
        RefRecId                            dimensionTableRecId;
        Map                                 inventDimValuesMap = new Map(Types::Integer, Types::String);

        if (!_productMasterRecId)
        {
            throw error(EcoResProductMaster::txtNotExist());
        }

        if (!activeProductDimFieldsCon.elements())
        {
            throw error ("@SYS133916");
        }

        ecoResProductVariantExistMgr = EcoResProductVariantExistMgr::newFromProductMaster(_productMasterRecId);

        for (dimensionIndex = conLen(_productDimensions); dimensionIndex > 0; --dimensionIndex)
        {
            [productDimensionAttributeRecId, dimensionTableRecId] = conPeek(_productDimensions, dimensionIndex);

            EcoResProductDimensionAttribute ecoResProductDimensionAttribute = EcoResProductDimensionAttribute::find(productDimensionAttributeRecId);

            inventDimValuesMap.insert(ecoResProductDimensionAttribute.getInventDimFieldId(), ecoResProductDimensionAttribute.getDimensionTableValue(dimensionTableRecId));
        }

        // loop through active product dimensions to build the correct datastructure for later calls
        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();

            if (!inventDimValuesMap.exists(dimFieldId) || inventDimValuesMap.lookup(dimFieldId) == "")
            {
                throw error (strFmt("@SYS53724",fieldId2pname(tableNum(InventDim),dimFieldId)));
            }

            Name value = inventDimValuesMap.lookup(dimFieldId);

            ecoResProductVariantExistMgr.addDsFromDimFieldIdWithValue(dimFieldId, value);
        }

        return ecoResProductVariantExistMgr.findVariant();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultConfigForConstrBasedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the current product variant has the default configuration for constraint based
    ///    products.
    /// </summary>
    /// <param name="_distinctProductVariantRecId">
    ///    The <c>EcoResDistinctProductVariantRecId</c> value.
    /// </param>
    /// <returns>
    ///    true if the current product variant has the default configuration for constraint based products;
    ///    otherwise, false.
    /// </returns>
    public static boolean isDefaultConfigForConstrBasedProduct(EcoResDistinctProductVariantRecId _distinctProductVariantRecId)
    {
        int                             dimensionIndex;
        container                       productDimensions = EcoResProductVariantDimValue::getDimensionContainerByProductVariant(_distinctProductVariantRecId);
        RefRecId                        productDimensionAttributeRecId;
        RefRecId                        dimensionTableRecId;
        EcoResConfigurationName         name = EcoResProductParameters::getConfigurationName();
        boolean                         ret = false;

        for (dimensionIndex = conLen(productDimensions); dimensionIndex > 0; --dimensionIndex)
        {
            [productDimensionAttributeRecId, dimensionTableRecId] = conPeek(productDimensions, dimensionIndex);

            EcoResProductDimensionAttribute ecoResProductDimensionAttribute = EcoResProductDimensionAttribute::find(productDimensionAttributeRecId);

            if (ecoResProductDimensionAttribute.getInventDimFieldId() == fieldNum(InventDim, ConfigId))
            {
                if (name ==  ecoResProductDimensionAttribute.getDimensionTableValue(dimensionTableRecId))
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>EcoResProductVariantExistMgr</c> class.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of a product master.
    /// </param>
    /// <returns>
    ///    An instance of the <c>EcoResProductVariantExistMgr</c> class.
    /// </returns>
    public static EcoResProductVariantExistMgr newFromProductMaster(RefRecId _productMaster)
    {
        EcoResProductVariantExistMgr ecoResProductVariantExistMgr = EcoResProductVariantExistMgr::construct();

        ecoResProductVariantExistMgr.initFromProductMaster(_productMaster);

        return ecoResProductVariantExistMgr;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
