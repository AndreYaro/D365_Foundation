<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetBudgetLineQueryExpression</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using Microsoft.Xrm.Sdk.Query;

/// <summary>
/// The ProjBudgetBudgetLineQueryExpression class is used to build a QueryExpression which can retrieve Budget Line Entity from Dataverse.
/// This class implements the ProjBudgetRootQueryExpression interface.
/// </summary>
internal class ProjBudgetBudgetLineQueryExpression implements ProjBudgetQueryExpressionInterface
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the entity for the provided query builder to the "PROJECT_ENTITY" from ProjBudgetDataverseConstants.
    /// This method also creates a new ColumnSet with PROJECTID, PROJECTNUMBER, and CURRENCYID columns
    /// from ProjBudgetDataverseConstants, and adds this ColumnSet to the query builder.
    /// </summary>
    /// <param name="_queryBuilder">An optional ProjBudgetQueryExpressionBuilder object to which the entity and column set will be added.
    /// If none is provided, a new ProjBudgetQueryExpressionBuilder is used.</param>
    public void setEntity(ProjBudgetQueryExpressionBuilder _queryBuilder = null)
    {
        _queryBuilder.setEntity(ProjBudgetDataverseConstants::PROJECT_ENTITY);

        ColumnSet projectColumn = new ColumnSet(ProjBudgetDataverseConstants::PROJECTID, ProjBudgetDataverseConstants::PROJECTNUMBER, ProjBudgetDataverseConstants::CURRENCYID);
       _queryBuilder.addColumnSet(projectColumn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCondition</Name>
				<Source><![CDATA[
    private void setCondition(ProjBudgetQueryExpressionBuilder _queryBuilder, str _projId)
    {
        _queryBuilder.addCondition(ProjBudgetDataverseConstants::PROJECTNUMBER, ConditionOperator::Equal, _projId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLinkEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up several linked entities and their respective attributes in a QueryExpression,
    /// including Budget Header, Budget Line, Transaction Category, Product, Task, and Resource entities.
    /// Each of these linked entities is connected to the query according to specified conditions.
    /// </summary>
    /// <param name="_queryBuilder">The QueryExpression builder to which linked entities are added.</param>
    /// <param name="_conditions">The conditions Map that guides how linked entities are added.</param>
    private void  setLinkEntity(ProjBudgetQueryExpressionBuilder _queryBuilder, Map _conditions)
    {
        // adding Link Entity for Budget Header
        ColumnSet budgetColumn = new ColumnSet(ProjBudgetDataverseConstants::PROJECT);
        LinkEntity budgetLink = _queryBuilder.addLinkEntity(ProjBudgetDataverseConstants::BUDGET_ENTITY, ProjBudgetDataverseConstants::PROJECTID, ProjBudgetDataverseConstants::PROJECT, JoinOperator::Inner);
        _queryBuilder.addLinkCriteria(budgetLink, ProjBudgetDataverseConstants::STATECODE, ConditionOperator::Equal, this.getStateCode(_conditions));
        _queryBuilder.addLinkCriteria(budgetLink, ProjBudgetDataverseConstants::STATUSCODE, ConditionOperator::Equal, this.getStatusCode(_conditions));
        budgetLink = _queryBuilder.addColumnSetToLinkEntity(budgetLink, budgetColumn);

        // adding Link Entity for Budget Line
        ColumnSet budgetLineColumns = new ColumnSet(true);
        LinkEntity budgetLineLink = _queryBuilder.addLinkEntityToLinkEntity(budgetLink, ProjBudgetDataverseConstants::BUDGETLINE_ENTITY, ProjBudgetDataverseConstants::BUDGETID, ProjBudgetDataverseConstants::BUDGET, JoinOperator::Inner);
        budgetLineLink = _queryBuilder.addColumnSetToLinkEntity(budgetLineLink, budgetLineColumns);

        // adding Link Entity for transaction category Entity
        ColumnSet transactionCategoryColumn =  new ColumnSet(ProjBudgetDataverseConstants::TRANSACTION_NUMBER);
        LinkEntity transactionCategoryLink = _queryBuilder.addLinkEntityToLinkEntity(budgetLineLink, ProjBudgetDataverseConstants::TRANSACTION_CATEGORY_ENTITY, ProjBudgetDataverseConstants::TRANSACTION_CATEGORY, ProjBudgetDataverseConstants::TRANSACTION_CATEGORY_ID, JoinOperator::LeftOuter);
        transactionCategoryLink = _queryBuilder.addColumnSetToLinkEntity(transactionCategoryLink, transactionCategoryColumn);

        // adding Link Entity for Product Entity
        ColumnSet productColumns =  new ColumnSet(ProjBudgetDataverseConstants::PRODUCT_NUMBER, ProjBudgetDataverseConstants::PRODUCT_DESCRIPTION);
        LinkEntity productLink = _queryBuilder.addLinkEntityToLinkEntity(budgetLineLink, ProjBudgetDataverseConstants::PRODUCT_ENTITY, ProjBudgetDataverseConstants::PRODUCT, ProjBudgetDataverseConstants::PRODUCT_ID, JoinOperator::LeftOuter);
        productLink = _queryBuilder.addColumnSetToLinkEntity(productLink, productColumns);

        // adding Link Entity for task Entity
        ColumnSet taskColumns = new ColumnSet(ProjBudgetDataverseConstants::ACTIVITY_NUMBER);
        LinkEntity taskLink = _queryBuilder.addLinkEntityToLinkEntity(budgetLineLink, ProjBudgetDataverseConstants::TASK_ENTITY, ProjBudgetDataverseConstants::TASK, ProjBudgetDataverseConstants::Project_Task_ID, JoinOperator::LeftOuter);
        taskLink = _queryBuilder.addColumnSetToLinkEntity(taskLink, taskColumns);
        
        // adding Link Entity for Resource Entity
        ColumnSet resourceColumns = new ColumnSet(ProjBudgetDataverseConstants::BOOKABLE_RESOURCE_CATEGORY_NUMBER);
        LinkEntity resourceLink = _queryBuilder.addLinkEntityToLinkEntity(budgetLineLink, ProjBudgetDataverseConstants::BOOKABLE_RESOURCE_CATEGORY_ENTITY, ProjBudgetDataverseConstants::RESOURCE_CATEGORY, ProjBudgetDataverseConstants::BOOKABLE_RESOURCE_CATEGORY_ID, JoinOperator::LeftOuter);
        resourceLink = _queryBuilder.addColumnSetToLinkEntity(resourceLink, resourceColumns);

    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjId</Name>
				<Source><![CDATA[
    private str getProjId(Map _conditions)
    {
        str ret = '';

        if(_conditions.exists(ProjBudgetDataverseConstants::PROJ_ID))
        {
            ret = _conditions.lookup(ProjBudgetDataverseConstants::PROJ_ID);
        }
        else
        {
            throw Error("@proj:ProjBudgetMissingProjId");
        }

        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getStateCode</Name>
				<Source><![CDATA[
    private int getStateCode(Map _conditions)
    {
        int ret = 0;

        if(_conditions.exists(ProjBudgetDataverseConstants::STATECODE))
        {
            ret = str2int(_conditions.lookup(ProjBudgetDataverseConstants::STATECODE));
        }
        else
        {
            throw Error("@proj:ProjBudgetMissingStateCode");
        }

        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatusCode</Name>
				<Source><![CDATA[
    private int getStatusCode(Map _conditions)
    {
        int ret = 0;

        if(_conditions.exists(ProjBudgetDataverseConstants::STATUSCODE))
        {
            ret = str2int(_conditions.lookup(ProjBudgetDataverseConstants::STATUSCODE));
        }
        else
        {
            throw Error("@proj:ProjBudgetMissingStatusCode");
        }

        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a QueryExpression based on the provided conditions.
    /// This method uses helper methods to get a project ID from the conditions, set the query's entity, set the query's conditions, and set the query's linked entities.
    /// The constructed QueryExpression is then returned.
    /// </summary>
    /// <param name="_conditions">A map of conditions to use when building the QueryExpression.</param>
    /// <returns>A QueryExpression built based on the provided conditions.</returns>
    public QueryExpression build(Map _conditions = null)
    {
        ProjBudgetQueryExpressionBuilder queryBuilder = ProjBudgetQueryExpressionBuilder::builder();

        str _projId = this.getProjId(_conditions);

        this.setEntity(queryBuilder);

        this.setCondition(queryBuilder, _projId);
        
        this.setLinkEntity(queryBuilder, _conditions);
        
        return queryBuilder.build();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>