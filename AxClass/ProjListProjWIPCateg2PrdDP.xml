<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjWIPCateg2PrdDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjWIPCateg2PrdDP</c> class provides data for the
///    <c>ProjListProjWIPCategory2ColumnPeriod</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(ProjStatementCategory)),
    SRSReportParameterAttribute(classstr(ProjListProjWIPContract))
]

class ProjListProjWIPCateg2PrdDP extends SRSReportDataProviderPreProcessTempDB
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    ProjOptionTime          time;
    ProjOptionHours         hour;
    ProjOptionCost          expenses;
    ProjOptionItem          item;
    ProjOptionRevenue       revenue;
    ProjOptionOnAcc         onAcc;
    TransDate               ledgerFromDate;
    TransDate               ledgerToDate;
    TransDate               ledgerFromDate1;
    TransDate               ledgerToDate1;
    ProjListColumnData      actualVsBudget;
    ForecastModelId         forecastModelId;
    ProjShowAmount          showAmount;
    ProjAmountQty           amountQty;
    boolean                 skipBlankId;
    boolean                 skipZero;

    ProjListProjWIPTmp              projListProjWIPTmp;

    ProjListProjTrans_WIP           listProjTrans;
    ProjListProjTransLayout         listProjTransLayout;
    projListProjTrans2Period        listProjTrans2Period;
    projStatement                   period1ProjStatement;
    projStatement                   period2ProjStatement;

    QueryRun            queryRun;

    ProjCategoryId      id;
    ProjCategoryName    name;

    AmountMST           period1WIPCostPrice;
    AmountMST           period2WIPCostPrice;
    AmountMST           period1WIPSalesPrice;
    AmountMST           period2WIPSalesPrice;
    AmountMST           period1Net;
    AmountMST           period2Net;
    Qty                 period1HourQty;
    Qty                 period2HourQty;

    int         showCostValue, showGross, showNet, showOnAccount, showQtyHour, showSalesValue;
    str         costValueLabel, salesValueLabel, netLabel, period1Label, period2Label, headerLabel;
    int         hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculate the amounts that are needed for the report.
    /// </summary>
    void calculate()
    {
        period1ProjStatement.parmCategoryId(id);
        period2ProjStatement.parmCategoryId(id);

        if (amountQty ==ProjAmountQty::Qty ||
            amountQty ==ProjAmountQty::AmountQty)
        {
            period1HourQty      = period1ProjStatement.b300_Gross_qty();
            period2HourQty      = period2ProjStatement.b300_Gross_qty();
        }

        period1Net          = period1ProjStatement.b500_Net();
        period1WIPCostPrice = period1ProjStatement.b300_Gross();
        period1WIPSalesPrice= period1ProjStatement.b400_wip_Invoiced_OnAccount();

        period2Net          = period2ProjStatement.b500_Net();
        period2WIPCostPrice = period2ProjStatement.b300_Gross();
        period2WIPSalesPrice= period2ProjStatement.b400_wip_Invoiced_OnAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNoId</Name>
				<Source><![CDATA[
    void calculateNoId()
    {
        period1ProjStatement.parmCategoryId(SysQuery::valueEmptyString());
        period2ProjStatement.parmCategoryId(SysQuery::valueEmptyString());

        if (amountQty ==ProjAmountQty::Qty ||
            amountQty ==ProjAmountQty::AmountQty)
        {
            period1HourQty      = period1ProjStatement.b300_Gross_qty();
            period2HourQty      = period2ProjStatement.b300_Gross_qty();
        }

        period1Net          = period1ProjStatement.b500_Net();
        period1WIPCostPrice = period1ProjStatement.b300_Gross();
        period1WIPSalesPrice= period1ProjStatement.b400_wip_Invoiced_OnAccount();

        period2Net          = period2ProjStatement.b500_Net();
        period2WIPCostPrice = period2ProjStatement.b300_Gross();
        period2WIPSalesPrice= period2ProjStatement.b400_wip_Invoiced_OnAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjWIPTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>ProjListProjWIPProjSRSTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>ProjListProjWIPProjSRSTmp</c> table.
    /// </returns>

    [SRSReportDataSetAttribute('ProjListProjWIPTmp')]
    public ProjListProjWIPTmp getProjListProjWIPTmp()
    {
        select * from projListProjWIPTmp;
        return projListProjWIPTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ProjListProjTrans</c> class by using the parameters.
    /// </summary>
    private void initProjListTrans()
    {
        listProjTrans2Period = projListProjTrans2Period::construct(ProjListStateType::WIP, ProjListStateId::Category);
        listProjTrans = listProjTrans2Period.getProjListProjTrans1();
        listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans2Period.getProjListProjTrans1());

        listProjTrans.parmTimeMaterial(timeMaterial);
        listProjTrans.parmFixedPrice(fixedPrice);
        listProjTrans.parmInvestment(investment);
        listProjTrans.parmInternalCost(internalCost);

        listProjTrans.parmHour(hour);
        listProjTrans.parmExpenses(expenses);
        listProjTrans.parmItem(item);
        listProjTrans.parmRevenue(revenue);
        listProjTrans.parmOnAcc(onAcc);

        listProjTrans2Period.parmPeriod1FromDate(ledgerFromDate);
        listProjTrans2Period.parmPeriod1ToDate(ledgerToDate);
        listProjTrans2Period.parmPeriod2FromDate(ledgerFromDate1);
        listProjTrans2Period.parmPeriod2ToDate(ledgerToDate1);

        listProjTrans2Period.parmColumnData(actualVsBudget);
        listProjTrans2Period.parmForecastModelId(forecastModelId);

        listProjTransLayout.parmSkipBlank(skipBlankId);
        listProjTransLayout.parmSkipZero(skipZero);

        listProjTransLayout.parmShowAmount(showAmount);
        listProjTransLayout.parmAmountQty(amountQty);

        if (listProjTransLayout.parmStateProjType() != ProjListStateProjType::Project)
        {
            listProjTransLayout.parmLevel(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjWIPTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    private void insertProjListProjWIPTmp()
    {
        projListProjWIPTmp.clear();

        projListProjWIPTmp.Id   = id;
        projListProjWIPTmp.Name = name;

        projListProjWIPTmp.CostValue  = listProjTransLayout.showAmountReport(period1WIPCostPrice);
        projListProjWIPTmp.CostValue1 = listProjTransLayout.showAmountReport(period2WIPCostPrice);

        projListProjWIPTmp.SalesValue = listProjTransLayout.showAmountReport(period1WIPSalesPrice);
        projListProjWIPTmp.SalesValue1= listProjTransLayout.showAmountReport(period2WIPSalesPrice);

        projListProjWIPTmp.Net        = listProjTransLayout.showAmountReport(period1Net);
        projListProjWIPTmp.Net1       = listProjTransLayout.showAmountReport(period2Net);

        projListProjWIPTmp.QtyHour    = listProjTransLayout.showAmountReport(period1HourQty);
        projListProjWIPTmp.QtyHour1   = listProjTransLayout.showAmountReport(period2HourQty);

        // set labels
        projListProjWIPTmp.IdLabel         = "@SYS69410";
        projListProjWIPTmp.HeaderLabel     = headerLabel;
        projListProjWIPTmp.PeriodLabel     = period1Label;
        projListProjWIPTmp.PeriodLabel1    = period2Label;
        projListProjWIPTmp.CostValueLabel  = costValueLabel;
        projListProjWIPTmp.SalesValueLabel = salesValueLabel;
        projListProjWIPTmp.NetLabel        = netLabel;

        // set field visibility
        projListProjWIPTmp.ShowNet        = showNet;
        projListProjWIPTmp.ShowQtyHour    = showQtyHour;
        projListProjWIPTmp.ShowSalesValue = showSalesValue;
        projListProjWIPTmp.ShowCostValue  = showCostValue;

        // set decimals
        projListProjWIPTmp.DecimalAmount  = amountDecimals;
        projListProjWIPTmp.DecimalHourQty = hourQtyDecimals;

        projListProjWIPTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the amounts are equal to zero.
    /// </summary>
    /// <returns>
    ///    trueif the values are not zero; otherwise false.
    /// </returns>
    boolean lineValue()
    {
        return  (period1Net != 0) ||
                (period2Net != 0) ||
                (period1HourQty != 0) ||
                (period2HourQty != 0) ||
                (period1WIPSalesPrice != 0) ||
                (period2WIPSalesPrice != 0) ||
                (period1WIPCostPrice != 0) ||
                (period2WIPCostPrice != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the query ranges.
    /// </summary>
    void modifyQuery()
    {
        QueryBuildDataSource    queryDataSource;
        QueryBuildRange         rangeHide, rangeDummy;

        queryDataSource     = queryRun.query().dataSourceTable(tablenum(ProjCategory));

        queryDataSource.addSortField(fieldnum(ProjCategory,CategoryId));
        rangeHide           = queryDataSource.addRange(fieldnum(ProjCategory,CategoryType));
        rangeHide.status(RangeStatus::Hidden);

        if (hour)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Hour));
        }

        if (expenses)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Cost));
        }

        if (item)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Item));
        }

        if (revenue)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Revenue));
        }

        if (! (hour || expenses || item || revenue))
        {
            rangeDummy            = queryDataSource.addRange(fieldnum(ProjCategory,CategoryType));
            rangeDummy.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the category record and calls the <c>calculate</c> method.
    /// </summary>
    void printCategory()
    {
        ProjCategory    projCategoryLocal;

        projCategoryLocal   = queryRun.get(tablenum(ProjCategory));

        id                  = projCategoryLocal.CategoryId;
        name                = projCategoryLocal.Name;

        this.calculate();

        if (! skipZero || (this.lineValue()))
        {
            this.insertProjListProjWIPTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. This method should compute data and populate the data
    ///    tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjListProjWIPContract contract = this.parmDataContract() as ProjListProjWIPContract;

        timeMaterial = contract.parmTimeMaterial();
        fixedPrice = contract.parmFixedPrice();
        investment = contract.parmInvestment();
        internalCost = contract.parmInternalCost();

        hour = contract.parmHour();
        expenses = contract.parmExpenses();
        item = contract.parmItem();
        revenue = contract.parmRevenue();
        onAcc = contract.parmOnAcc();

        ledgerFromDate = contract.parmLedgerFromDate();
        ledgerToDate = contract.parmLedgerToDate();
        ledgerFromDate1 = contract.parmLedgerFromDate1();
        ledgerToDate1 = contract.parmLedgerToDate1();

        actualVsBudget = contract.parmActualVsBudget();
        forecastModelId = contract.parmForecastModelIdV2();

        skipBlankId = contract.parmSkipBlankId();
        skipZero = contract.parmSkipZero();

        showAmount = contract.parmShowAmount();
        amountQty = contract.parmAmountQty();

        this.initProjListTrans();

        period1Label = listProjTrans2Period.formatPeriodLabel("@SYS9308", 1, DateFlags::None);
        period2Label = listProjTrans2Period.formatPeriodLabel("@SYS13183",2, DateFlags::None);
        headerLabel = listProjTrans2Period.formatSelection(showAmount);

        netLabel = "@SYS78442";
        salesValueLabel = "@SYS82747";
        costValueLabel = listProjTrans.setDisplayLabel2PeriodColumn(hour, expenses, item, revenue, onAcc);

        [showQtyHour, showNet, showSalesValue, showCostValue] = listProjTrans.setDisplayFlags2PeriodColumn(hour, expenses, item,
                                                                            revenue, onAcc, amountQty);

        [hourQtyDecimals, amountDecimals,
         grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

         period1ProjStatement   = projStatement::newProjListWIP(
                                        listProjTrans2Period.getProjListProjTrans1(),
                                        projListProjTrans2Period::columnData2ActualBudget(actualVsBudget) ,
                                        amountQty,
                                        forecastModelId);
         period2ProjStatement    = projStatement::newProjListWIP(
                                        listProjTrans2Period.getProjListProjTrans2(),
                                        projListProjTrans2Period::columnData2ActualBudget(actualVsBudget) ,
                                        amountQty,
                                        forecastModelId);

        queryRun = new QueryRun(this.parmQuery());

        this.modifyQuery();

        //  print lines with no Id eg. cost and revenue with no Employee
        if (! skipBlankId)
        {
            this.calculateNoId();
            if (this.lineValue())
            {
                this.insertProjListProjWIPTmp();
            }
        }

        while (queryRun.next())
        {
            this.printCategory();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>