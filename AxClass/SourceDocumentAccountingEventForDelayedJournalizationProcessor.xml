<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentAccountingEventForDelayedJournalizationProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class SourceDocumentAccountingEventForDelayedJournalizationProcessor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAccountingEventForDelayedJournalizationOfSourceDocumentLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates an accounting event for delayed journalization process where document accounting will be done in 
    /// different transaction scope than the subledger posting process. 
    /// </summary>
    /// <param name = "_sourceDocumentHeaderImplementation">The header implementation record for the document</param>
    /// <param name = "_sourceDocumentLineImplementationList">The list of the source document line implementation for the document</param>
    /// <param name = "_requiredAccountingEventType">The accounting type that needs to be created for the accounting</param>
    /// <param name = "_dataAreaIdForDocument">The company in which the document will be journalized or accounting will be performed</param>
    /// <returns>This return the accounting event recId that will be used to journalize the document and its marked lines for that event</returns>
    internal static AccountingEventRecId createAccountingEventForDelayedJournalizationOfSourceDocumentLines(
        SourceDocumentHeaderImplementation _sourceDocumentHeaderImplementation,
        SourceDocumentLineImplementationList _sourceDocumentLineImplementationList,
        AccountingEventType _requiredAccountingEventType,
        DataAreaId _dataAreaIdForDocument)
    {
        ttsbegin;

        SourceDocumentLineRecIdTmp sourceDocumentLineRecIdTmp;

        SourceDocumentLineImplementationListEnum sourceDocumentLineImplementationListEnumerator = _sourceDocumentLineImplementationList.getEnumerator();

        boolean isDistributionAccountingValid = true;

        while (sourceDocumentLineImplementationListEnumerator.moveNext())
        {
            SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(sourceDocumentLineImplementationListEnumerator.current().SourceDocumentLine);
            
            if (SourceDocumentValidateAccountingDistributionAccountingFlight::instance().isEnabled())
            {
                //validate ledger dimension values if accounting is not generated in same connection so that we can avoid scenario where combination is not valid anymore
                if (!SourceDocumentProvider::areSourceDocLineAccDistAccountValid(sourceDocumentLine, true, true))
                {
                    isDistributionAccountingValid = false;
                }
            }

            sourceDocumentLineRecIdTmp.SourceDocumentLineRecId = sourceDocumentLine.RecId;
            sourceDocumentLineRecIdTmp.insert();
        }

        if (!isDistributionAccountingValid)
        {
            throw Error("@SYS340058");
        }

        SourceDocument sourceDocument = SourceDocument::newFromSourceDocumentImplementation(_sourceDocumentHeaderImplementation);

        SourceDocumentAccountingEventForDelayedJournalizationProcessor::validateAccountingDate(
            _dataAreaIdForDocument,
            sourceDocument.parmAccountingDate(),
            sourceDocument.parmSourceDocumentType());

        SourceDocumentAccountingEventForDelayedJournalizationProcessor::validateAccountingVoucher(
            sourceDocument,
            _dataAreaIdForDocument,
            sourceDocument.parmAccountingDate());

        AccountingEventRecId accountingEventRecid = AccountingEventSourceDocumentProcessor::createAccountingEventForDelayedJournalizationProcess(
            sourceDocument,
            _requiredAccountingEventType,
            _dataAreaIdForDocument);

        SourceDocumentLineForDelayedJournalizerProcessing::addAccountingDataForSourceDocumentLinesDelayedJournalization(
            accountingEventRecid,
            sourceDocumentLineRecIdTmp);

        ttscommit;

        return accountingEventRecid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAccountingEventForDelayedJournalizationOfSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates an accounting event for delayed journalization process where document accounting will be done in
    /// different transaction scope than the subledger posting process.
    /// </summary>
    /// <param name = "_sourceDocumentHeaderImplementation">The header implementation record for the document</param>
    /// <param name = "_requiredAccountingEventType">The accounting type that needs to be created for the accounting</param>
    /// <param name = "_dataAreaIdForDocument">The company in which the document will be journalized or accounting will be performed</param>
    /// <returns>This return the accounting event recId that will be used to journalize the document and its marked lines for that event</returns>
    internal static AccountingEventRecId createAccountingEventForDelayedJournalizationOfSourceDocument(
        SourceDocumentHeaderImplementation _sourceDocumentHeaderImplementation,
        AccountingEventType _requiredAccountingEventType,
        DataAreaId _dataAreaIdForDocument)
    {
        ttsbegin;

        SourceDocument sourceDocument = SourceDocument::newFromSourceDocumentImplementation(_sourceDocumentHeaderImplementation);

        if (SourceDocumentValidateAccountingDistributionAccountingFlight::instance().isEnabled())
        {
            //validate ledger dimension values if accounting is not generated in same connection so that we can avoid scenario where combination is not valid anymore
            if (!SourceDocumentProvider::areSourceDocAccDistAccountValid(sourceDocument.parmSourceDocumentHeader(), true, true))
            {
                throw Error("@SYS340058");
            }
        }

        SourceDocumentAccountingEventForDelayedJournalizationProcessor::validateAccountingDate(
            _dataAreaIdForDocument,
            sourceDocument.parmAccountingDate(),
            sourceDocument.parmSourceDocumentType());

        SourceDocumentAccountingEventForDelayedJournalizationProcessor::validateAccountingVoucher(
            sourceDocument,
            _dataAreaIdForDocument,
            sourceDocument.parmAccountingDate());

        AccountingEventRecId accountingEventRecid = AccountingEventSourceDocumentProcessor::createAccountingEventForDelayedJournalizationProcess(
            sourceDocument,
            _requiredAccountingEventType,
            _dataAreaIdForDocument);

        ttscommit;

        return accountingEventRecid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountingDate</Name>
				<Source><![CDATA[
    private static boolean validateAccountingDate(DataAreaId _dataAreaIdForDocument, AccountingDate _accountingDate, SourceDocumentType _sourceDocumentType)
    {
        boolean isValid = true;
            
        if (SourceDocumentDelayedJournalizerValidateAccountingDateFlight::instance().isEnabled())
        {
            FiscalCalendarPeriod fiscalCalendarPeriod;
            FiscalCalendarYear fiscalCalendarYear;
            LedgerFiscalCalendarPeriod ledgerFiscalCalendarPeriod;

            LedgerParameters ledgerParameters = LedgerParameters::findByCompany(_dataAreaIdForDocument);
            LegalEntityRecId legalEntityRecId = CompanyInfo::current(_dataAreaIdForDocument);

            Ledger ledger = Ledger::findByLegalEntity(legalEntityRecId);

            fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate
            (   Ledger::fiscalCalendar(),
                _accountingDate,
                FiscalPeriodType::Operating
            );

            if (ledger.FiscalCalendar == 0)
            {
                isValid = checkFailed("@SYS128634")  && isValid;
            }

            if (fiscalCalendarPeriod.RecId == 0)
            {
                isValid = checkFailed(strFmt("@SYS17614", _accountingDate)) && isValid;
            }

            fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(ledger.FiscalCalendar, _accountingDate);

            if (fiscalCalendarPeriod == null ||
                fiscalCalendarYear == null ||
                fiscalCalendarPeriod.FiscalCalendarYear != fiscalCalendarYear.RecId ||
                _accountingDate > fiscalCalendarPeriod.EndDate)
            {
                isValid = checkFailed(strFmt("@SYS17614", _accountingDate)) && isValid;
            }

            ledgerFiscalCalendarPeriod = LedgerFiscalCalendar::findLedgerPeriod(fiscalCalendarPeriod.RecId, ledger.RecId);
            if (fiscalCalendarPeriod != null && ledgerFiscalCalendarPeriod.Status != FiscalPeriodStatus::Open)
            {
                isValid = checkFailed(strFmt("@SYS17615", _accountingDate)) && isValid;
            }

            if (fiscalCalendarPeriod != null && fiscalCalendarPeriod.Type == FiscalPeriodType::Opening)
            {
                isValid = checkFailed("@SYS16774") && isValid;
            }
        
            if (LedgerFiscalCalendar::checkModuleIsOpen(_sourceDocumentType.parmModule(), _accountingDate, fiscalCalendarPeriod) == false)
            {
                isValid = checkFailed(strFmt("@Subledger:Subledger_MessageError_PeriodValidationError", ledgerParameters.company())) && isValid;
            }

            if (!isValid)
            {
                throw Error(strFmt("@Subledger:Subledger_MessageError_PeriodValidationError", ledgerParameters.company()));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountingVoucher</Name>
				<Source><![CDATA[
    private static boolean validateAccountingVoucher(SourceDocument _sourceDocument, DataAreaId _dataAreaIdForDocument, AccountingDate _accountingDate)
    {
        boolean isValid = true;
            
        if (SourceDocumentDelayedJournalizerValidateAccountingVoucherFlight::instance().isEnabled())
        {
            LedgerParameters ledgerParameters = LedgerParameters::findByCompany(_dataAreaIdForDocument);
            LegalEntityRecId legalEntityRecId = CompanyInfo::current(_dataAreaIdForDocument);

            Ledger ledger = Ledger::findByLegalEntity(legalEntityRecId);

            Voucher voucher = _sourceDocument.parmCurrentVoucher(_dataAreaIdForDocument);

            SourceDocumentHeaderRecId sourceDocumentHeaderRecId = _sourceDocument.parmSourceDocumentHeader().RecId;
        
            if (voucher == '')
            {
                isValid = checkFailed("@SYS24569") && isValid;
            }
            else
            {                
                boolean skipDuplicateVoucherCheck = _sourceDocument.parmSourceDocumentType().parmSkipDuplicateVoucherCheck();

                if (GeneralLedgerExtension::validateReferenceNumber(
                        ledger.FiscalCalendar,
                        ledgerParameters.CheckVoucher,
                        voucher,
                        _accountingDate,
                        ledgerParameters.DataAreaId,
                        false,
                        false,
                        false,
                        sourceDocumentHeaderRecId,
                        skipDuplicateVoucherCheck) == false)
                {
                    throw error(strFmt("@Ledger:ErrorMessageReuseVoucher", voucher));;
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>