<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetPanel_PmfCoByProdCalcTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// class for cost sheet panel on production costs for co-products
/// </summary>
class CostSheetPanel_PmfCoByProdCalcTrans extends CostSheetPanel_ProdCalcTrans
{
    PmfProdCoBy coBy;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initUnitIdAndLotSize</Name>
				<Source><![CDATA[
    ///<summary>
    ///initlizes the lot size, per series and unitid
    ///</summary>
    protected void initUnitIdAndLotSize()
    {
        if (costSheetProdCalcMode == CostSheetProdCalcMode::Costing)
        {
            lotSize = coBy.reportedFinishedGood();
        }
        else
        {
            lotSize = coBy.QtyCoByCalc;
        }

        if (lotSize == 0.00)
        {
            lotSize = 1.00;
        }

        if (per == CostSheetPanelPer::LotSize)
        {
            qtyReal.realValue(lotSize);
        }

        unitID = coBy.inventTable().inventUnitId();
        if (unitIdString != null)
        {
            unitIdString.text(unitID);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedView</Name>
				<Source><![CDATA[
    protected void modifiedView()
    {
        //do not call super
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedRecordsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns a packed container of the record list built on the server
    /// </summary>
    /// <returns>Packed record list</returns>
    protected container packedRecordsList()
    {
        return CostSheetPanel_PmfCoByProdCalcTrans::packedServerCoBy(
                                                        coBy,
                                                        costSheetProdCalcMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPmfCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the PmfProdCoBy record
    /// </summary>
    /// <param name="_coBy">
    /// Batch Co/by
    /// </param>
    /// <returns>
    /// PmfProdCoBy record
    /// </returns>
    public PmfProdCoBy parmPmfCoBy(PmfProdCoBy _coBy = coBy)
    {
        coBy = _coBy;
        return coBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>
    /// returns a new instance of the costsheet panel for co/by production lines
    /// </returns>
    public static CostSheetPanel_PmfCoByProdCalcTrans construct()
    {
        return new CostSheetPanel_PmfCoByProdCalcTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class, expects a formrun of the form calling
    /// </summary>
    /// <param name="_formRun">
    /// Form Runs of form calling
    /// </param>
    /// <param name="_parentId">
    /// Form controlId
    /// </param>
    /// <returns>
    /// returns the new instance of the costsheet panel for co/by production lines
    /// </returns>
    public static CostSheetPanel_PmfCoByProdCalcTrans newForm(
        FormRun         _formRun,
        FormControlId   _parentId)
    {
        CostSheetPanel_PmfCoByProdCalcTrans costSheetPanel = CostSheetPanel_PmfCoByProdCalcTrans::construct();
        costSheetPanel.parmFormRun(_formRun);
        costSheetPanel.parmParentId(_parentId);
        costSheetPanel.build();

        return costSheetPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedServerCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an container of packed recordlist
    /// </summary>
    /// <param name="_coBy">
    /// Production co/by
    /// </param>
    /// <param name="_costSheetProdCalcMode">
    /// Calc mode
    /// </param>
    /// <param name="_tmpProdCalcTrans">
    /// Co/by production calc trans
    /// </param>
    /// <returns>
    /// returns container of packed record list
    /// </returns>
    protected static container packedServerCoBy(
        PmfProdCoBy             _coBy,
        CostSheetProdCalcMode   _costSheetProdCalcMode,
        PmfCoByProdCalcTrans    _tmpProdCalcTrans = null)
    {
        #define.CollectRefOffset(2)

        PmfCoByProdCalcTrans    tmpProdCalcTrans;
        PmfCoByProdCalcTrans    tmpProdCalcTransCopy;
        PmfCoByProdCalcTrans    tmpProdCalcTransBreakdown;
        PmfCoByProdCalcTrans    prodCalcTrans;
        CostTmpCostRollup       costTmpCostRollup;

        void addBOMRecordToRollup(NoYes _split)
        {
            costTmpCostRollup.initFromProdCalcTrans(tmpProdCalcTrans, _costSheetProdCalcMode);
            costTmpCostRollup.Split = _split;
            costTmpCostRollup.insert();
        }

        if (!_coBy)
        {
            return new List(Types::Record).pack();
        }

        tmpProdCalcTrans.setTmp();
        if (_tmpProdCalcTrans.isTmp())
        {
            tmpProdCalcTrans.setTmpData(_tmpProdCalcTrans);
        }
        else
        {
            prodCalcTrans.recordLevelSecurity(true);

            while select prodCalcTrans
                where prodCalcTrans.PmfIdRefCoByRecId == _coBy.RecId
            {
                tmpProdCalcTrans.data(prodCalcTrans);
                tmpProdCalcTrans.insert();
            }
        }

        select firstonly tmpProdCalcTrans
            where tmpProdCalcTrans.PmfIdRefCoByRecId == _coBy.RecId
               && tmpProdCalcTrans.CalcType == ItemCalcType::Production;

        if (!tmpProdCalcTrans.CollectRefProdId)
        {
            return new List(Types::Record).pack();
        }

        ProdCollectRefLevel collectRefLevel = tmpProdCalcTrans.CollectRefLevel;
        ProdCollectRefProdId collectRefProdId = tmpProdCalcTrans.CollectRefProdId;

        if (tmpProdCalcTrans.CollectRefLevel == 0)
        {
            // this single record will be used when displaying 'Total' rollup level
            costTmpCostRollup.initFromProdCalcTrans(
                                tmpProdCalcTrans,
                                _costSheetProdCalcMode);
            costTmpCostRollup.insert();
        }

        tmpProdCalcTransBreakdown.setTmp();
        tmpProdCalcTransBreakdown.setTmpData(tmpProdCalcTrans);

        tmpProdCalcTransCopy.setTmp();
        tmpProdCalcTransCopy.setTmpData(tmpProdCalcTrans);

        List list = new List(Types::Record);

        while select tmpProdCalcTrans
            where tmpProdCalcTrans.PmfIdRefCoByRecId == _coBy.RecId
               && tmpProdCalcTrans.CollectRefLevel == collectRefLevel + 1
        {
            if (tmpProdCalcTrans.CalcType == ItemCalcType::BOM)
            {
                boolean breakdownExists = false;
                while select CostGroupId, CollectRefLevel, bom, Qty,
                            sum(CostAmount),
                            sum(CostMarkup),
                            sum(RealCostAmount),
                            sum(RealCostAdjustment)
                    from tmpProdCalcTransBreakdown
                    group by CostGroupId, CollectRefLevel, bom, Qty
                    where tmpProdCalcTransBreakdown.PmfIdRefCoByRecId
                            == _coBy.RecId
                       && tmpProdCalcTransBreakdown.Resource
                           == tmpProdCalcTrans.Resource
                       && tmpProdCalcTransBreakdown.IdRefTableId
                            == tmpProdCalcTrans.IdRefTableId
                       && tmpProdCalcTransBreakdown.IdRefRecId
                            == tmpProdCalcTrans.IdRefRecId
                       && tmpProdCalcTransBreakdown.CollectRefProdId
                            == collectRefProdId
                       && tmpProdCalcTransBreakdown.CollectRefLevel
                            == collectRefLevel + #CollectRefOffset
                       && tmpProdCalcTransBreakdown.CalcType
                            == ItemCalcType::CostGroup
                       && tmpProdCalcTransBreakdown.LineNum
                            > tmpProdCalcTrans.LineNum
                       && tmpProdCalcTransBreakdown.LineNum
                            < tmpProdCalcTrans.LineNum + 1
                {
                    breakdownExists = true;
                    costTmpCostRollup.initFromProdCalcTrans(
                        tmpProdCalcTransBreakdown,
                        _costSheetProdCalcMode);
                    costTmpCostRollup.insert();
                }

                if (breakdownExists)
                {
                    if (tmpProdCalcTrans.CollectRefLevel == 1)
                    {
                        // BOM lines will be used only when calculating 'Single' rollup level.
                        // 'Multilevel' should ignore BOM lines, but always consider their components
                        costTmpCostRollup.initFromProdCalcTrans(
                            tmpProdCalcTrans,
                            _costSheetProdCalcMode);
                        costTmpCostRollup.insert();
                    }
                    continue; // cost breakdown exists - we don't care whether the std cost item initiates a sub-production or not
                }

                if (tmpProdCalcTrans.DerivedReference == InventRefType::Production
                    && tmpProdCalcTrans.DerivedRefNum)
                {
                    throw error("@SCM:CoProductionCostBreakDownNotSupportSubProductionOrder");
                }
                else
                {
                    addBOMRecordToRollup(NoYes::No); // the BOM has neither breakdown nor sub-production. Use BOM line instead
                }
            }
            else
            {
                addBOMRecordToRollup(NoYes::No); // make sure that the Split for non-BOM items is set to No
            }
        }

        while select CostGroupId, Level, Split, sum(CostAmount)
            from costTmpCostRollup
            group by CostGroupId, Level, Split
        {
            list.addEnd(costTmpCostRollup);
        }

        return list.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>