<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgMESClientSelection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgMESClientSelection</c> class is used to select the key function that is performed when a
///    button is pressed.
/// </summary>
class JmgMESClientSelection extends RunBase
{    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buttonFunction2MenuItemNameDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for providing the name of the menu item for a button function.
    /// </summary>
    /// <param name = "_buttonFunction">The button function.</param>
    /// <param name = "_eventHandlerResult">Subscribers can use this class to provide the result.</param>
    static delegate void buttonFunction2MenuItemNameDelegate(JmgSignInButtonFunction _buttonFunction, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonFunction2MenuItemTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for providing the type of the menu item for a button function.
    /// </summary>
    /// <param name = "_buttonFunction">The button function.</param>
    /// <param name = "_eventHandlerResult">Subscribers can use this class to provide the result.</param>
    static delegate void buttonFunction2MenuItemTypeDelegate(JmgSignInButtonFunction _buttonFunction, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonFunction2MenuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the menu item name, which is tied to the specified button function.
    /// </summary>
    /// <param name="_buttonFunction">
    /// The button function to retrieve the menu item for.
    /// </param>
    /// <returns>
    /// A string, which corresponds to the menu item tied to the button function.
    /// </returns>    
    static private str buttonFunction2MenuItemName(JmgSignInButtonFunction _buttonFunction)
    {
        switch (_buttonFunction)
        {
            case JmgSignInButtonFunction::Approve :
                return menuitemactionstr(JmgBeginMarkedJobs);
            case JmgSignInButtonFunction::Assistance :
                return menuitemdisplaystr(JmgMESAssistance);
            case JmgSignInButtonFunction::Feedback :
                return menuitemactionstr(JmgReportFeedback);
            case JmgSignInButtonFunction::FeedbackComplete :
                return menuitemactionstr(JmgReportFeedbackComplete);
            case JmgSignInButtonFunction::FeedbackStopped :
                return menuitemactionstr(JmgReportFeedbackStopped);
            case JmgSignInButtonFunction::FeedbackInProgress :
                return menuitemactionstr(JmgReportFeedbackInProgress);
            case JmgSignInButtonFunction::Materials :
                return menuitemdisplaystr(JmgProdBOMOprNum);
            case JmgSignInButtonFunction::AttendanceOverview :
                return menuitemdisplaystr(JmgEmplSignedIn);
            case JmgSignInButtonFunction::Break :
                return menuitemdisplaystr(JmgBreak);
            case JmgSignInButtonFunction::StopBreak:
                return menuitemactionstr(JmgStopBreak);
            case JmgSignInButtonFunction::IPC :
                return menuitemactionstr(JmgMESShowIPC);
            case JmgSignInButtonFunction::Balances :
                return menuitemactionstr(JmgMESBalance);
            case JmgSignInButtonFunction::Info :
                return menuitemactionstr(JmgMESLogbook);
            case JmgSignInButtonFunction::SwitchCode :
                return menuitemdisplaystr(JmgMESSwitchCode);
            case JmgSignInButtonFunction::Production :
                return menuitemactionstr(JmgMESShowProd);
            case JmgSignInButtonFunction::Project :
                return menuitemactionstr(JmgMESShowProj);
            case JmgSignInButtonFunction::Bundle :
                return menuitemactionstr(JmgMESBundle);
            case JmgSignInButtonFunction::ChangeWrkCtr :
                return menuitemactionstr(JmgMESChangeWrkCtr);
            case JmgSignInButtonFunction::SignInOut :
                return menuitemactionstr(JmgMESClockOut);
            case JmgSignInButtonFunction::Cancel :
                return menuitemactionstr(JmgMESSwitchUser);
            case JmgSignInButtonFunction::InventJournal :
                return menuitemactionstr(JmgMESShowInventJournal);
            case JmgSignInButtonFunction::ProjFee :
                return menuitemactionstr(JmgMESShowProjFee);
            case JmgSignInButtonFunction::ProjItem :
                return menuitemactionstr(JmgMESShowProjItem);
            case JmgSignInButtonFunction::Attachment :
                return menuitemactionstr(JmgMESShowAttachments);
            case JmgSignInButtonFunction::Jobs :
                return menuitemactionstr(JmgMESShowJobs);
            case JmgSignInButtonFunction::SelectedJobs :
                return menuitemactionstr(JmgMESShowSelectedJobs);
            case JmgSignInButtonFunction::AssistResource :
                return menuitemdisplaystr(JmgMESAssistanceResource);
            case JmgSignInButtonFunction::StartResourceJobs :
                return menuitemactionstr(JmgMESBeginResourceRegistration);
            case JmgSignInButtonFunction::ShowCurrentActivities :
                return menuitemactionstr(JmgMESShowCurrentActivities);
            case JmgSignInButtonFunction::pmfCoByProducts :
                return menuitemdisplaystr(PmfProdCoBy);
        }

        EventHandlerResult result = EventHandlerResult::newSingleResponse();
        JmgMESClientSelection::buttonFunction2MenuItemNameDelegate(_buttonFunction, result);
        if (result.hasResult())
        {
            return result.result();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonFunction2MenuItemStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the menu item, which is tied to the specified button function.
    /// </summary>
    /// <param name="_buttonFunction">
    /// The button function to retrieve the menu item for.
    /// </param>
    /// <param name="_includeType">
    /// true, if the type should be included in the returned string; otherwise, false.
    /// </param>
    /// <returns>
    /// A string, which corresponds to the menu item tied to the button function.
    /// </returns>
    static str buttonFunction2MenuItemStr(JmgSignInButtonFunction _buttonFunction, boolean _includeType = true)
    {
        str ret;

        if (_includeType)
        {
            MenuItemType menuItemType = JmgMESClientSelection::buttonFunction2MenuItemType(_buttonFunction);
            //These are menu item path strings, which will never be present on the UI, no RTL conversion needed.
            ret = enum2str(menuItemType)+@'\';
        }

        ret += JmgMESClientSelection::buttonFunction2MenuItemName(_buttonFunction);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonFunction2MenuItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of menu item, which is tied to the specified button function.
    /// </summary>
    /// <param name="_buttonFunction">
    /// The button function to fetch the menu item type for.
    /// </param>
    /// <returns>
    /// The type of menu item, which is tied to the specified button function.
    /// </returns>
    static MenuItemType buttonFunction2MenuItemType(JmgSignInButtonFunction _buttonFunction)
    {
        switch (_buttonFunction)
        {
            case JmgSignInButtonFunction::Assistance :
            case JmgSignInButtonFunction::AssistResource :
            case JmgSignInButtonFunction::SwitchCode :
            case JmgSignInButtonFunction::Break :
            case JmgSignInButtonFunction::Materials :
            case JmgSignInButtonFunction::pmfCoByProducts :
            case JmgSignInButtonFunction::AttendanceOverview :
                return MenuItemType::Display;
                
            case JmgSignInButtonFunction::Approve :
            case JmgSignInButtonFunction::Feedback :
            case JmgSignInButtonFunction::FeedbackComplete :
            case JmgSignInButtonFunction::FeedbackInProgress :
            case JmgSignInButtonFunction::FeedbackStopped :
            case JmgSignInButtonFunction::IPC :
            case JmgSignInButtonFunction::Balances :
            case JmgSignInButtonFunction::Info :
            case JmgSignInButtonFunction::Production :
            case JmgSignInButtonFunction::Project :
            case JmgSignInButtonFunction::Bundle :
            case JmgSignInButtonFunction::ChangeWrkCtr :
            case JmgSignInButtonFunction::SignInOut :
            case JmgSignInButtonFunction::Cancel :
            case JmgSignInButtonFunction::InventJournal :
            case JmgSignInButtonFunction::ProjFee :
            case JmgSignInButtonFunction::ProjItem :
            case JmgSignInButtonFunction::Attachment :
            case JmgSignInButtonFunction::Jobs :
            case JmgSignInButtonFunction::SelectedJobs :
            case JmgSignInButtonFunction::StartResourceJobs :
            case JmgSignInButtonFunction::ShowCurrentActivities :
            case JmgSignInButtonFunction::StopBreak :
                return MenuItemType::Action;
        }
        
        EventHandlerResult result = EventHandlerResult::newSingleResponse();
        JmgMESClientSelection::buttonFunction2MenuItemTypeDelegate(_buttonFunction, result);
        if (result.hasResult())
        {
            return result.result();
        }

        return MenuItemType::Display;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Object              myCaller;
        str                 name;
        str                 menuItemName;
        JmgRegistrationForm regForm;

        if (_args == null)
        {
            return;
        }
        myCaller = _args.caller();
        name  = myCaller.name();
        if (name != formstr(JmgRegistration))
        {
            return;
        }
        menuItemName = _args.menuItemName();

        if (!menuItemName)
        {
            return;
        }

        regForm = myCaller.registrationFormClass();
        jmgMESClientSelection::callFromMenuItemStr(menuItemName, regForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calledFromMenuItemStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Event raised to enable extensions to call a method.
    /// </summary>
    /// <param name="_menuItemStr">
    ///    The menu item for which to find the method.
    /// </param>
    /// <param name="_form">
    ///    The form controller class to call the method on.
    /// </param>
    static delegate void calledFromMenuItemStr(str _menuItemStr, JmgRegistrationForm _form)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>callFromMenuItemStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls a method based on the specified menu item.
    /// </summary>
    /// <param name="_menuItemStr">
    ///    The menu item for which to find the method.
    /// </param>
    /// <param name="_form">
    ///    The form controller class to call the method on.
    /// </param>
    static void callFromMenuItemStr(str _menuItemStr, JmgRegistrationForm _form)
    {
        boolean                  isMenuItemExtension      = false;
        using(var activityContext = JmgInstrumentationLogger::createLogger(classStr(jmgMESClientSelection)).registration().callFromMenuItemStr())
        {
            var jmgRegistrationSetup = _form.parmRegistrationSetup();

            if (jmgRegistrationSetup.LockEmployee)
            {
			    // If lock employee and doing below activities, we should end the break first.
                switch (_menuItemStr)
                {
                    case menuitemactionstr(JmgBeginMarkedJobs):
                    // fallthrough
                    case menuitemactionstr(JmgReportFeedback):
                    // fallthrough
                    case menuitemactionstr(JmgReportFeedbackComplete):
                    // fallthrough
                    case menuitemactionstr(JmgReportFeedbackStopped):
                    // fallthrough
                    case menuitemactionstr(JmgReportFeedbackInProgress):
                    // fallthrough
                    case menuitemactionstr(JmgMESBundle):
                    // fallthrough
                    case menuitemactionstr(JmgMESBeginResourceRegistration):
                        _form.autoEndBreak(jmgRegistrationSetup, true);
                        break;
                }
            }

            switch (_menuItemStr)
                {
                case menuitemactionstr(JmgBeginMarkedJobs):
                    _form.beginMarkedJobs();
                    break;
                case menuitemactionstr(JmgReportFeedback):
                    _form.startFeedback();
                    break;
                case menuitemactionstr(JmgReportFeedbackComplete):
                    _form.startFeedbackCompleted();
                    break;
                case menuitemactionstr(JmgReportFeedbackStopped):
                    _form.startFeedbackStopped();
                    break;
                case menuitemactionstr(JmgReportFeedbackInProgress):
                    _form.startFeedbackPreset();
                    break;
                case menuitemactionstr(JmgMESShowIPC):
                    _form.showIPC();
                    break;
                case menuitemactionstr(JmgMESShowProd):
                    _form.showProd();
                    break;
                case menuitemactionstr(JmgMESShowProj):
                    _form.showProj();
                    break;
                case menuitemactionstr(JmgMESBundle):
                    _form.bundle();
                    break;
                case menuitemactionstr(JmgMESChangeWrkCtr):
                    _form.changeWrkCtr();
                    break;
                case menuitemactionstr(JmgMESClockOut):
                    _form.clockUserOut();
                    break;
                case menuitemactionstr(JmgMESSwitchUser):
                    _form.switchUser();
                    break;
                case menuitemactionstr(JmgMESShowInventJournal):
                    _form.showLossProfit();
                    break;
                case menuitemactionstr(JmgMESShowProjFee):
                    _form.showProjectFee();
                    break;
                case menuitemactionstr(JmgMESShowProjItem):
                    _form.showProjectItem();
                    break;
                case menuitemactionstr(JmgMESShowAttachments):
                    _form.showAttachments();
                    break;
                case menuitemactionstr(JmgMESShowJobs):
                    _form.showJobs();
                    break;
                case menuitemactionstr(JmgMESShowSelectedJobs):
                    _form.showSelectedJobs();
                    break;
                case menuitemactionstr(JmgMESBeginResourceRegistration):
                    _form.beginResourceRegistration();
                    break;
                case menuitemactionstr(JmgMESShowCurrentActivities):
                    _form.showCurrentActivities();
                    break;
                case menuitemactionstr(JmgStopBreak):
                    _form.stopBreak(jmgRegistrationSetup);
                    break;
                default:
                    jmgMESClientSelection::calledFromMenuItemStr(_menuItemStr, _form);
                    isMenuItemExtension = true;
                    break;
            }
            if(!isMenuItemExtension)
            {
                activityContext.addCustomProperty(JmgRegistrationInstrumentationActivities::ParmMenuItemName, _menuItemStr);
                activityContext.addCustomProperty(JmgRegistrationInstrumentationActivities::ParmFormCaller, formstr(JmgRegistration));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>