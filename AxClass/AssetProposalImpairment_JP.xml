<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetProposalImpairment_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetProposalImpairment_JP</c> class handles the impairment proposal of fixed asset.
/// </summary>
[AssetDocumentProposalTypeAttribute_JP(AssetDocumentProposalType_JP::ImpairmentProposal)]
public class AssetProposalImpairment_JP extends AssetDocumentProposal_JP implements BatchRetryable
{
    DialogField                 resultIdField;
    AssetImpairmentTestNum_JP   headerNum;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        headerNum
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the subtasks for asset proposal.
    /// </summary>
    public void buildTasks()
    {
        AssetProposal       assetProposalCopy;
        LedgerJournalTable  journalTable;
        BatchHeader         batchHeader;
        #OCCRetryCount

        try
        {
            assetProposalCopy = AssetDocumentProposal_JP::construct(this.parmAssetDocumentProposalType());
            assetProposalCopy.unpack(this.pack());
            assetProposalCopy.parmBatchEnabled(false);

            // Journal has to be blocked until the batch task completes so that it is not available for other users.
            journalTable = null;
            journalTable.JournalName = journalName.JournalName;
            journalTable.SystemBlocked = NoYes::Yes;
            journalTable.insert();

            assetProposalCopy.journalNum(journalTable.JournalNum);
            assetProposalCopy.batchInfo().parmCaption(
                strFmt("@FixedAssetsImpairementAccounting:BatchCaption",
                    journalTable.JournalNum,
                    headerNum));

            batchHeader = this.getBatchHeader();
            batchHeader.addTask(assetProposalCopy);
            batchHeader.save();
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS4005146";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        FormBuildStringControl control;

        dialog.caption("@SYS4005128");
        resultIdField = dialog.addFieldValue(extendedTypeStr(AssetImpairmentTestNum_JP), headerNum, "@SYS4005161");

        control = resultIdField.control();
        resultIdField.lookupButton(FormLookupButton::Always);
        control.replaceOnLookup(true);
        resultIdField.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(AssetProposalImpairment_JP, testNumLookup), this);
        resultIdField.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(AssetProposalImpairment_JP, testNumValidate), this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            headerNum = resultIdField.value();

            if (this.parmBatchEnabled())
            {
                ledgerNameId = dialogJournalName.value();
                postingLayer = dialogPostingLayer.value();
                journalName = LedgerJournalName::find(ledgerNameId);
                this.updatePostingLayer(journalName.CurrentOperationsTax, RangeStatus::Hidden);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        Query query = new Query(identifierStr(AssetProposalImpairment_JP));

        super();

        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00014] ],
            funcName()
        );
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00019] ],
            funcName()
        );

        assetDocumentType = AssetDocumentType_JP::AssetImpairment;

        query.name(classStr(AssetProposalImpairment_JP));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Query                                query = queryRun.query();
        QueryBuildRange                      qr;
        AssetImpairmentTestResult_JP         testResult;
        AssetImpairmentTestResultDocEntry_JP results;
        AssetDocumentTable_JP                docTable;
        AssetDocumentEntry_JP                docEntry;
        AssetJournal                         assetJournal;
        AssetTransDate                       transDate;
        Counter                              transactionCount = 0;

        // Running as periodic batch process.
        if (this.parmBatchEnabled() && this.isInBatch())
        {
            this.buildTasks();
        }
        else
        {
            this.createAndLockJournalForBatchProcessing();

            qr = query.dataSourceTable(tableNum(AssetImpairmentTestResult_JP))
                    .rangeField(fieldNum(AssetImpairmentTestResult_JP, TestNum));

            qr.value(queryValue(headerNum));

            assetJournal = new AssetJournal(journalNum, AssetTransTypeJournal::WriteDownAdj);

            ttsbegin;

            while (queryRun.next())
            {
                results = queryRun.get(tableNum(AssetImpairmentTestResultDocEntry_JP)) as AssetImpairmentTestResultDocEntry_JP;
                docEntry = queryRun.get(tableNum(AssetDocumentEntry_JP)) as AssetDocumentEntry_JP;
                docTable = queryRun.get(tableNum(AssetDocumentTable_JP)) as AssetDocumentTable_JP;
                testResult = queryRun.get(tableNum(AssetImpairmentTestResult_JP)) as AssetImpairmentTestResult_JP;
                transDate = testResult.TestDate;

                if (docTable.MainType == AssetDocumentMainType_JP::AssetImpairment
                    && results.Status == AssetImpairmentTestResultEntryStatus_JP::NotPosted
                    && results.ImpairmentAdjustment != 0)
                {
                    assetJournal.createTrans(
                        results.ImpairmentAdjustment,
                        AssetBook::find(docEntry.AssetId, docEntry.BookId),
                        transDate,
                        '',
                        0,
                        0,
                        false,
                        0,
                        0,
                        dateNull(),
                        false,
                        false,
                        docTable.Type,
                        docEntry.RecId);
                    transactionCount++;
                }
                if (transactionCount >= this.getMaxJournalLinesInTransactionBoundry())
                {
                    ttscommit;
                    ttsbegin;
                    transactionCount = 0;
                }
            }

            ttscommit;

            this.updateJournalTotals();
            this.unlockJournal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if show query select button or not.
    /// </summary>
    /// <returns>
    /// Returns false.
    /// </returns>
    public boolean showQuerySelectButton()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testNumLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds lookup for <c>testNum</c> field.
    /// </summary>
    /// <param name="_control">
    /// The form string control.
    /// </param>
    public void testNumLookup(FormStringControl _control)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryDS;
        SysTableLookup          sysLookup;

        sysLookup = SysTableLookup::newParameters(tableNum(AssetImpairmentTestResult_JP), _control);
        sysLookup.addLookupfield(fieldNum(AssetImpairmentTestResult_JP, TestNum));
        sysLookup.addLookupfield(fieldNum(AssetImpairmentTestResult_JP, Description));
        sysLookup.addLookupfield(fieldNum(AssetImpairmentTestResult_JP, TestDate));
        queryDS = query.addDataSource(tableNum(AssetImpairmentTestResult_JP));
        queryDS.addRange(fieldNum(AssetImpairmentTestResult_JP, AssetBookType)).value(queryValue(AssetBookType::ValueModel));
        queryDS.addRange(fieldNum(AssetImpairmentTestResult_JP, Status)).value(
                strFmt('((%1 != 0) && (%2 == %3)) || (%4 == 0)',
                fieldId2name(tableNum(AssetImpairmentTestResult_JP), fieldNum(AssetImpairmentTestResult_JP, RecId)),
                fieldId2name(tableNum(AssetImpairmentTestResult_JP), fieldNum(AssetImpairmentTestResult_JP, Status)),
                any2int(AssetImpairmentTestResultStatus_JP::ReadyForProposal),
                fieldId2name(tableNum(AssetImpairmentTestResult_JP), fieldNum(AssetImpairmentTestResult_JP, RecId))));
        sysLookup.parmCallingControl(_control);
        sysLookup.parmQuery(query);
        sysLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>testNumValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds validation for <c>testNum</c> field.
    /// </summary>
    /// <param name="_control">
    /// The form string control.
    /// </param>
    /// <returns>
    /// Returns true if valid.
    /// </returns>
    public boolean testNumValidate(FormStringControl _control)
    {
        AssetImpairmentTestResult_JP result;

        select firstOnly RecId from result
            where result.AssetBookType == AssetBookType::ValueModel
               && result.TestNum == _control.valueStr()
               && ((result.CGUGroup != 0 && result.Status == AssetImpairmentTestResultStatus_JP::ReadyForProposal)
                   || (result.CGUGroup == 0));

        return result.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version = conPeek(packedClass,1);
        container       base;
        boolean         ret;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;
            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the result id field is valid or not.
    /// </summary>
    /// <param name="_calledFrom">
    /// The object who called.
    /// </param>
    /// <returns>
    /// Returns true if valid.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (resultIdField && resultIdField.value() == '')
        {
            return checkFailed("@FixedAssetsImpairementAccounting:EnterImpairmentTestID");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>