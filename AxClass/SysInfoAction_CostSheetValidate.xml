<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysInfoAction_CostSheetValidate</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class SysInfoAction_CostSheetValidate extends SysInfoAction
{
    CostSheetNodeId    nodeId;
    CostGroupId         costGroupId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        nodeId,
        costGroupId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        str description()
    {
        return "@SYS104676";
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostGroupId</Name>
				<Source><![CDATA[
        public CostGroupId parmCostGroupId(CostGroupId _costGroupId = costGroupId)
    {
        ;
        costGroupId = _costGroupId;

        return costGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNodeId</Name>
				<Source><![CDATA[
        public CostSheetNodeId parmNodeId(CostSheetNodeId _nodeId = nodeId)
    {
        ;
        nodeId = _nodeId;

        return nodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        void run()
    {
        #define.BOMCostGroup(2)

        Object                  object = infolog.infoActionObject();
        CostSheetDesignerCtrl   costSheetDesignerCtrl;
        int                     treeNodeIdx;
        FormRun                 formRun;
        FormTreeControl         sheetTreeControl;
        FormTabPageControl      bomCostGroupTabPageControl;
        FormDataSource          bomCostGroupDatasource;
        ;

        super();

        if (!object || classidget(object) != classnum(CostSheetDesignerCtrl))
        {
            return;
        }

        costSheetDesignerCtrl = object;
        formRun = costSheetDesignerCtrl.getFormRun();

        if (!formRun)
        {
            return;
        }

        if (nodeId)
        {
            // one of the sheet nodes is not valid: select it in the sheet designer form
            sheetTreeControl = formRun.design().controlName(identifierstr('SheetTree'));
            if (!sheetTreeControl)
            {
                error(Error::wrongUseOfFunction(funcname()));
                return;
            }

            treeNodeIdx = costSheetDesignerCtrl.costSheetNodeId2TreeNodeIdx(nodeId);
            sheetTreeControl.select(treeNodeIdx);
        }
        else if (costGroupId)
        {
            // one of the cost groups is not used: find it in the grid
            bomCostGroupTabPageControl = formRun.design().controlName(identifierstr('BOMCostGroupTP'));
            if (!bomCostGroupTabPageControl)
            {
                error(Error::wrongUseOfFunction(funcname()));
                return;
            }

            bomCostGroupTabPageControl.activatePage();

            bomCostGroupDatasource = formRun.dataSource(#BOMCostGroup);
            if (bomCostGroupDatasource.table() != tablenum(BOMCostGroup))
            {
                error(Error::wrongUseOfFunction(funcname()));
                return;
            }

            bomCostGroupDatasource.findRecord(BOMCostGroup::find(costGroupId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass, Object _object = null)
    {
        Integer version = RunBase::getVersion(_packedClass);
        ;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static SysInfoAction_CostSheetValidate construct()
    {
        return new SysInfoAction_CostSheetValidate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGroupId</Name>
				<Source><![CDATA[
        static public SysInfoAction_CostSheetValidate newGroupId(CostGroupId _costGroupId)
    {
        SysInfoAction_CostSheetValidate infoAction = SysInfoAction_CostSheetValidate::construct();
        ;

        infoAction.parmCostGroupId(_costGroupId);

        return infoAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newNodeId</Name>
				<Source><![CDATA[
        static public SysInfoAction_CostSheetValidate newNodeId(CostSheetNodeId _nodeId)
    {
        SysInfoAction_CostSheetValidate infoAction = SysInfoAction_CostSheetValidate::construct();
        ;

        infoAction.parmNodeId(_nodeId);

        return infoAction;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>