<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25OriginalDocuments</Name>
	<SourceCode>
		<Declaration><![CDATA[
#define.RecIdField("RecId")
final class rTax25OriginalDocuments
{
    SysDictTable                dictTable;
    Common                      common;

    JournalFormTable            journalFormTable;
    Args                        formTableArgs;

    RTax25RegisterJournalTrans  registerJournalTrans;
    RTax25RegisterTransMap      registerTrans;
    RTax25RegisterType          registerType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>args</Name>
				<Source><![CDATA[
    // an accessor function for JournalFormTable
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Args args()
    {
        return formTableArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookRefresh</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void bookRefresh()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calledFromProject</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean calledFromProject()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callJournalTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void callJournalTrans(JournalTransMap _journalTransMap)
    {
        JournalTableMap     journalTableMap;
        Args                args;
        FormRun             formRun;
        FormDataSource      formDataSource;
        JournalFormTrans    journalFormTrans;
        Object              o;

        switch (_journalTransMap.TableId)
        {
            case tablenum(LedgerJournalTrans) :
                journalTableMap = LedgerJournalTable::find(_journalTransMap.JournalId, true);
                break;
            default :
                journalTableMap = JournalStatic::findJournalTableFromTrans(_journalTransMap, true);
        }
        if (! journalTableMap)
        {
            info(strfmt("@GLS104417"));
            return;
        }
        journalTableMap.skipTTSCheck(true); // skip an error in LedgerJournalTransDaily.close()

        formTableArgs = new Args();
        formTableArgs.record(journalTableMap);

        journalFormTable = new RTax25OriginalJournalFormTable();
        journalFormTable.datasourceInitPost(journalTableMap);   // Load journalTable
        journalFormTable.datasourceLinkActivePre();             // Init journalType

        args = new Args();
        args.record(journalTableMap);
        args.caller(this);
        MenuFunction mf = new MenuFunction(journalFormTable.journalTableData().journalStatic().menuItemStrLines(), MenuItemType::Display);
        formRun = mf.create(args);

        o = formRun;
        journalFormTrans = o.journalForm();

        formDataSource = journalFormTrans.journalTrans_DS();
        if (! formDataSource)
        {
            formDataSource = formRun.defaultDataSource() ?
                                formRun.defaultDataSource() :
                                formRun.dataSource(tableid2name(_journalTransMap.TableId));
        }
        formDataSource.linkActive(); // disable editing, init ledgerJournalEngine

        formRun.run();
        formDataSource.filter(fieldname2id(_journalTransMap.TableId, #RecIdField), queryValue(_journalTransMap.RecId));

        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMenuItemRef</Name>
				<Source><![CDATA[
    #AOT
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SysElementName displayMenuItemRef()
    {
        SysElementName formRef;
        
        if (TreeNode::findNode(#MenuItemsDisplayPath + #AOTRootPath + dictTable.formRef()))
        {
            formRef = dictTable.formRef();
        }
        return formRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalForm</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public JournalForm journalForm()
    {
        return journalFormTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    // an accessor function for JournalFormTrans
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str name()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(tableId _tableId,
                    RecId   _recId)
    {
        dictTable = new SysDictTable(_tableId);
        common = dictTable.makeRecord();
    
        if (_recId)
            select firstonly common
                where common.RecId == _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegisterJournalTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterJournalTrans parmRegisterJournalTrans(RTax25RegisterJournalTrans _registerJournalTrans)
    {
        registerJournalTrans = _registerJournalTrans;
        return registerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegisterTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterTransMap parmRegisterTrans(RTax25RegisterTransMap _registerTrans)
    {
        registerTrans = _registerTrans;
        return registerTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public void run()
    {
        Args                                args = new Args();
        FormRun                             formRun;
        VendInvoiceJour                     vendInvoiceJour;
        CustInvoiceJour                     custInvoiceJour;
        FormDataSource                      formDataSource;

        void relationForm(Common _record, str _displayMenuItemName, TableId _tableId)
        {
            if (_record)
            {
                args = new Args();
                args.record(_record);
                MenuFunction mf = new MenuFunction(_displayMenuItemName, MenuItemType::Display);
                formRun = mf.create(args);

                formDataSource = formRun.dataSource(1);
                formRun.run();
                SysDictTable dt = new SysDictTable(_tableId);
                formDataSource.filter(dt.fieldName2Id('RecId'), queryValue(_record.RecId));
                formRun.detach();
            }
            else
            {
                info("@GLS104403");
            }
        }

        registerType = RTax25RegisterTable::findRegisterId(registerJournalTrans.RegisterId).RegisterType;
    
        if (! common.RecId && registerType == RTax25RegisterType::InventReceipt)
        { // for collapsed register transactions
            args = new Args();
            MenuFunction mf1 = new MenuFunction(menuItemDisplayStr(InventTrans), MenuItemType::Display);
            formRun = mf1.create(args);
            formDataSource = formRun.dataSource(1);
            formRun.run();
            formDataSource.filter(fieldnum(InventTrans, DateFinancial),
                                  queryValue(registerTrans.(fieldnum(RTax25RegisterTrans_InventReceipt, DateFinancial))));
            formDataSource.filter(fieldnum(InventTrans, ItemId),
                                  queryValue(registerTrans.(fieldnum(RTax25RegisterTrans_InventReceipt, ItemName))));
    
            formRun.detach();
            return;
        }
    
        if (! common.RecId && registerType == RTax25RegisterType::ProfitAllocation)
        { // for collapsed register transactions
            args = new Args();
            args.record(registerTrans);
            MenuFunction mf2 = new MenuFunction(menuItemDisplayStr(RTax25AllocCalcDetails), MenuItemType::Display);
            formRun = mf2.create(args);
            formRun.run();
            formRun.detach();
    
            return;
        }
    
        this.redefinedSources();
    
        args = new Args();
		
        switch (common.TableId)
        {
            case tablenum(LedgerJournalTrans),
                 tablenum(InventJournalTrans) :
                this.callJournalTrans(common);
                break;

            case tablenum(CustInvoiceJour):
                custInvoiceJour = common;
                relationForm(custInvoiceJour, menuItemDisplayStr(CustInvoiceJournal), tableNum(CustInvoiceJour));
                break;

            case tablenum(CustInvoiceTrans):
                CustInvoiceTrans custInvoiceTrans = common;
                custInvoiceJour = CustInvoiceJour::findFromCustInvoiceTrans(
                    custInvoiceTrans.SalesId,
                    custInvoiceTrans.InvoiceId,
                    custInvoiceTrans.InvoiceDate,
                    custInvoiceTrans.NumberSequenceGroup);
                relationForm(custInvoiceJour, menuItemDisplayStr(CustInvoiceJournal), tableNum(CustInvoiceJour));
                break;

            case tablenum(CustInvoiceLine):
                CustInvoiceLine custInvoiceLine = common;
                CustInvoiceTable custInvoiceTable = custInvoiceLine.custInvoiceTable();
                custInvoiceJour  = custInvoiceTable.custInvoiceJour();
                relationForm(custInvoiceJour, menuItemDisplayStr(CustInvoiceJournal), tableNum(CustInvoiceJour));
                break;

            case tablenum(RTax25RegisterTrans):
                RTax25OriginalDocuments::rTax25RegisterCall(common);
                break;
    
            case tablenum(RTax25RegisterTrans_AmountDifference):
            case tablenum(RTax25RegisterTrans_AssessedDeprCost):
            case tablenum(RTax25RegisterTrans_AssessedTax):
            case tablenum(RTax25RegisterTrans_AssessedTotalDepr):
            case tablenum(RTax25RegisterTrans_AssetCost):
            case tablenum(RTax25RegisterTrans_AssetDeprBonus):
            case tablenum(RTax25RegisterTrans_AssetsDisposal):
            case tablenum(RTax25RegisterTrans_ConstantDifferences):
            case tableNum(RTax25RegisterTrans_ConstantDifferencesByBalance):
            case tablenum(RTax25RegisterTrans_DebtCreditInventory):
            case tablenum(RTax25RegisterTrans_DebtCreditMovement):
            case tablenum(RTax25RegisterTrans_DebtDebitInventory):
            case tablenum(RTax25RegisterTrans_DebtDebitMovement):
            case tablenum(RTax25RegisterTrans_DebtDebitReservation):
            case tablenum(RTax25RegisterTrans_DebtDebitReservMov):
            case tablenum(RTax25RegisterTrans_Deferrals):
            case tablenum(RTax25RegisterTrans_ExchangeAdj):
            case tablenum(RTax25RegisterTrans_Income):
            case tablenum(RTax25RegisterTrans_IntangibleAssetInfo):
            case tablenum(RTax25RegisterTrans_IntangibleDepr):
            case tablenum(RTax25RegisterTrans_IntangibleGroupDepr):
            case tablenum(RTax25RegisterTrans_InventReceipt):
            case tablenum(RTax25RegisterTrans_InventReceiptTotal):
            case tablenum(RTax25RegisterTrans_LandTax):
            case tablenum(RTax25RegisterTrans_LandTaxCalc):
            case tablenum(RTax25RegisterTrans_NonInventIssue):
            case tablenum(RTax25RegisterTrans_NonInventReceipt):
            case tablenum(RTax25RegisterTrans_NotInfluenceIncome):
            case tablenum(RTax25RegisterTrans_PaymentConsumption):
            case tablenum(RTax25RegisterTrans_PaymentReceipt):
            case tablenum(RTax25RegisterTrans_PayRoll):
            case tablenum(RTax25RegisterTrans_ProfitAllocation):
            case tablenum(RTax25RegisterTrans_OutlayReal):
            case tablenum(RTax25RegisterTrans_OutlayRealTax):
            case tablenum(RTax25RegisterTrans_OutlayUnreal):
            case tablenum(RTax25RegisterTrans_OutlayUnrealOther):
            case tablenum(RTax25RegisterTrans_StdDeferralsRate):
            case tablenum(RTax25RegisterTrans_StdCurrentRate):
            case tablenum(RTax25RegisterTrans_StdCurrentExpense):
            case tablenum(RTax25RegisterTrans_TangibleAssetInfo):
            case tablenum(RTax25RegisterTrans_TangibleDepr):
            case tablenum(RTax25RegisterTrans_TangibleGroupDepr):
            case tablenum(RTax25RegisterTrans_TaxExchangeAdj):
            case tablenum(RTax25RegisterTrans_TaxRemainGoods):
            case tablenum(RTax25RegisterTrans_TemporaryDifferences):
            case tableNum(RTax25RegisterTrans_TemporaryDifferencesByBalance):
            case tablenum(RTax25RegisterTrans_TransportTax):
            case tablenum(RTax25RegisterTrans_TransportTaxCalc):
                RTax25OriginalDocuments::rTax25RegisterMapCall(common);
                break;

            case tableNum(RAssetTrans):
                RAssetTrans rAssetTrans = RAssetTrans::find(common.(fieldnum(RAssetTrans, RecId)));
                relationForm(rAssetTrans, menuItemDisplayStr(RAssetTrans), tableNum(RAssetTrans));
                break;
    
            case tablenum(RCashTrans):
                RCashTrans rCashTrans = RCashTrans::findRecId(common.(fieldnum(RCashTrans, RecId)));
                relationForm(rCashTrans, menuItemDisplayStr(RCashTrans), tableNum(RCashTrans));
                break;

            case tablenum(VendInvoiceJour):
                vendInvoiceJour = common;
                relationForm(vendInvoiceJour, menuItemDisplayStr(VendInvoiceJournal), tableNum(VendInvoiceJour));
                break;

            case tablenum(VendInvoiceTrans):
                VendInvoiceTrans vendInvoiceTrans = common;
                vendInvoiceJour = VendInvoiceJour::findFromVendInvoiceTrans(
                    vendInvoiceTrans.PurchID,
                    vendInvoiceTrans.InvoiceId,
                    vendInvoiceTrans.InvoiceDate,
                    vendInvoiceTrans.NumberSequenceGroup,
                    vendInvoiceTrans.InternalInvoiceId);

                relationForm(vendInvoiceJour, menuItemDisplayStr(VendInvoiceJournal), tableNum(VendInvoiceJour));
                break;
    
            case tablenum(CustSettlement),tablenum(VendSettlement):
                RTax25OriginalDocuments::custVendSettlementCall(common);
                break;
    
            case tablenum(RPayCounterTable) :
                relationForm(common, menuItemDisplayStr(RPayTaxFund), tableNum(RPayCounterTable));
                break;
    
            case tablenum(RPayAverageEarnEmplPeriodTable) :
                RPayAverageEarnEmplPeriodTable avgEmplPeriodTable = common;
                MenuFunction mf3;
                switch (avgEmplPeriodTable.averageEarnCodeType)
                {
                    case RpayAverageEarnCodeType::Vacation:
                        mf3 = new MenuFunction(menuItemDisplayStr(RPayVacationTable), MenuItemType::Display);
                        break;
                    case RpayAverageEarnCodeType::SickList:
                        mf3 = new MenuFunction(menuItemDisplayStr(RPaySickListTable), MenuItemType::Display);
                        break;
                    case RpayAverageEarnCodeType::BusinessTrip:
                        mf3 = new MenuFunction(menuItemDisplayStr(RPayBusinessTripTable), MenuItemType::Display);
                        break;
                    default:
                        mf3 = new MenuFunction(menuItemDisplayStr(RPayAverageEarnEmplPeriodTable), MenuItemType::Display);
                        break;
                }
    
                args.record(common);
                args.caller(this);
                formRun = mf3.create(args);
                formDataSource = formRun.dataSource(1);
                formRun.run();
                formDataSource.filter(fieldnum(RPayAverageEarnEmplPeriodTable, RecId), queryValue(common.RecId));
                formRun.detach();
                break;
    
            case tablenum(RPayTrans) :
                args.record(common);
                args.caller(this);
                var mfRPaySumEmpl = new MenuFunction(menuItemDisplayStr(RPaySumEmpl), MenuItemType::Display);
                formRun = mfRPaySumEmpl.create(args);
                formDataSource = formRun.dataSource(1);
                formRun.run();
                formDataSource.filter(fieldnum(RPayTrans, RecId), queryValue(common.RecId));
                formRun.detach();
                break;
    
            case tablenum(MainAccount) :
                GeneralJournalAccountEntry accountEntry;
                GeneralJournalEntry entry;
                DimensionAttributeLevelValueView dimAccount;
                DimensionAttribute mainAccountAttr = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));

                select firstOnly accountEntry
                    exists join dimAccount
                        where dimAccount.ValueCombinationRecId == accountEntry.LedgerDimension   &&
                              dimAccount.DimensionAttribute    == mainAccountAttr.RecId          &&
                              dimAccount.EntityInstance        == common.RecId
                        exists join entry
                            where entry.RecId            == accountEntry.GeneralJournalEntry   &&
                                  entry.Ledger           == Ledger::current()                  &&
                                  entry.AccountingDate      >= registerJournalTrans.fromDate() &&
                                  entry.AccountingDate      <= registerJournalTrans.toDate();
    
                args.record(accountEntry);
                var mfLedgerTransAccount = new MenuFunction(menuItemDisplayStr(LedgerTransAccount), MenuItemType::Display);
                formRun = mfLedgerTransAccount.create(args);
                formRun.run();
    
                formDataSource = SysFormDataSource::findDataSource(formRun, tablenum(GeneralJournalAccountEntry));
                Query genQuery = formDataSource.queryRun().query();
                QueryBuildDataSource genQbds;
                QueryBuildRange genQbr;

                if (registerTrans.rTax25ProfitTable)
                {
                    DimensionAttribute dimAttr = DimensionAttribute::find(RTax25Parameters::find().DimensionAttribute);

                    genQbds = genQuery.dataSourceTable(tablenum(GeneralJournalAccountEntry));
                    genQbr = SysQuery::addDimensionAttributeRange(genQuery,
                                                                  genQbds.name(),
                                                                  fieldstr(GeneralJournalAccountEntry, LedgerDimension),
                                                                  DimensionComponent::DimensionAttribute,
                                                                  RTax25ProfitTable::find(registerTrans.rTax25ProfitTable).ProfitId,
                                                                  dimAttr.Name);
                    genQbr.dataSource().joinMode(JoinMode::ExistsJoin);
                }
    
                genQbds = genQuery.dataSourceTable(tablenum(GeneralJournalEntry));
                genQbr = SysQuery::findOrCreateRange(genQbds, fieldnum(GeneralJournalEntry, AccountingDate));
                genQbr.value(queryRange(registerJournalTrans.fromDate(), registerJournalTrans.toDate()));
                formDataSource = SysFormDataSource::findDataSource(formRun, tablenum(GeneralJournalAccountEntry));
                formDataSource.research();
    
                formRun.detach();
                break;
    
            case tablenum(RDeferralsTrans) :
                var mfRDeferralsTrans = new MenuFunction(menuItemDisplayStr(RDeferralsTrans), MenuItemType::Display);
                formRun = mfRDeferralsTrans.create(args);
                formDataSource = formRun.dataSource(1);
                formRun.run();
                formDataSource.filter(fieldnum(RDeferralsTrans, RecId), queryValue(common.RecId));
    
                formRun.detach();
                break;

            case tablenum(RAssetTable) :
                RAssetTable rAssetTable = common;
                args.parmEnum(RAssetMainGroup::find(rAssetTable.AssetGroup).GroupType);
                
                var mfAssetTable = new MenuFunction(menuItemDisplayStr(RAssetTable), MenuItemType::Display);
                formRun = mfAssetTable.create(args);
                formDataSource = formRun.dataSource(1);
                formRun.run();
                formDataSource.filter(fieldnum(RAssetTable, RecId), queryValue(common.RecId));
    
                formRun.detach();
                break;
    
            default :
                str formRef = this.displayMenuItemRef();
                if (formRef)
                {
                    args.caller(this);
                    args.record(common);
                    new MenuFunction(formRef, MenuItemType::Display).run(args);
                }
                else
                {
                    info("@GLS104403");
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendSettlementCall</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void custVendSettlementCall(CustVendSettlement _custVendSettlement)
    {
        str findOffsets()
        {
            Range              range;
            CustVendSettlement custVendSettlementOffset = _custVendSettlement.data();

            while select reverse custVendSettlementOffset order by RecId
                where (custVendSettlementOffset.TransRecId   == _custVendSettlement.OffsetRecId  &&
                       custVendSettlementOffset.OffsetRecId  == _custVendSettlement.TransRecId)  ||
                      (custVendSettlementOffset.TransRecId   == _custVendSettlement.TransRecId   &&
                       custVendSettlementOffset.OffsetRecId  == _custVendSettlement.OffsetRecId) &&
                      (custVendSettlementOffset.CanBeReversed == true)
            {
                range += (range ? "@SYS35667" : "") + queryValue(custVendSettlementOffset.RecId);
            }

            return range;
        }
        
        CustVendTable custVendTable;
        MenuFunction mf;

        if (_custVendSettlement.TableId == tablenum(CustSettlement))
        {
            custVendTable = CustTable::find(_custVendSettlement.AccountNum);
            mf = new MenuFunction(menuItemDisplayStr(CustOpenTransReverse), MenuItemType::Display);
        }
        else
        {
            custVendTable = VendTable::find(_custVendSettlement.AccountNum);
            mf = new MenuFunction(menuItemDisplayStr(VendOpenTransReverse), MenuItemType::Display);
        }
        
        Args args = new Args();
        args.record(custVendTable);

        FormRun formRun = mf.create(args);
        formRun.init();
        FormDataSource formDataSource = formRun.dataSource(1);
        formDataSource.query().dataSourceTable(_custVendSettlement.TableId).addRange(fieldname2id(_custVendSettlement.TableId,#RecIdField)).value(findOffsets());
        formDataSource.linkActive();
        formRun.run();
        formRun.detach();

    }

]]></Source>
			</Method>
			<Method>
				<Name>rTax25RegisterCall</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void rTax25RegisterCall(RTax25RegisterTrans _rTax25RegisterTrans)
    {
        RTax25RegisterJournalTrans rTax25RegisterJournalTrans;
        RTax25RegTransEngine       rTax25RegTransEngine;
        Args                       args;
        Object                     formRun;
        FormDataSource             formDataSource;
    
        rTax25RegisterJournalTrans = RTax25RegisterJournalTrans::find(_rTax25RegisterTrans.JournalNum,
                                                                      _rTax25RegisterTrans.PeriodType,
                                                                      _rTax25RegisterTrans.PeriodNum,
                                                                      _rTax25RegisterTrans.FiscalYear,
                                                                      _rTax25RegisterTrans.RegisterId);
        args = new Args();
        args.record(rTax25RegisterJournalTrans);
    
        MenuFunction mf = new MenuFunction(menuItemDisplayStr(Rtax25RegisterTrans), MenuItemType::Display);
        formRun = mf.create(args);
        formRun.run();
        formRun.detach();
        rTax25RegTransEngine = formRun.rTax25RegTransEngine();
        formDataSource = formRun.dataSource(1);
        formDataSource.filter(fieldnum(RTax25RegisterTrans,RecId),queryValue(_rTax25RegisterTrans.RecId));
        rTax25RegTransEngine.filtered(true);
        rTax25RegTransEngine.listControl().deleteAll();
        rTax25RegTransEngine.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>redefinedSources</Name>
				<Source><![CDATA[
    private void redefinedSources()
    {
        InventTrans                         inventTrans;
        Description                         paymDesc;
        Description                         objectDesc;
        RefTableId                          refTableId;
        RefRecId                            refRecId;
        RTax25RegisterTrans_InventReceipt   inventReceipt;
    
        if (registerType == RTax25RegisterType::InventReceipt &&
            registerTrans.RefTableId == tablenum(InventTrans))
        {
            inventReceipt = registerTrans;
            inventTrans   = InventTrans::findRecId(registerTrans.RefRecId);
    
            [refTableId, refRecId, paymDesc, objectDesc] = RTax25RegCalc_InventReceiptMultiply::defineSources(inventTrans, inventTrans.inventTransOrigin());
    
            if (refTableId && refRecId)
            {
                dictTable = new SysDictTable(refTableId);
                common = dictTable.makeRecord();
                select firstonly common
                    where common.RecId == refRecId;
    
                ttsbegin;
                registerTrans.selectForUpdate(true);
                registerTrans.RefTableId = refTableId;
                registerTrans.RefRecId   = refRecId;
                inventReceipt.ObjectDesc = objectDesc;
                inventReceipt.PaymDesc   = paymDesc;
                registerTrans.doUpdate();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rTax25RegisterMapCall</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens form <c>RTax25RegisterTransMap</c>.
    /// </summary>
    /// <param name="_registerTransMap">
    /// Record from table <c>RTax25RegisterTransMap</c> is used for filtering query.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void rTax25RegisterMapCall(RTax25RegisterTransMap _registerTransMap)
    {
        Rtax25RegisterJournalTrans registerJournalTrans;
        Rtax25RegTransMapEngine    engine;
        Args                       args;
        Object                     formRun;
        FormDataSource             formDataSource;

        registerJournalTrans = Rtax25RegisterJournalTrans::findRecId(_registerTransMap.JournalTransRefRecId);
    
        args = new Args();
        args.record(registerJournalTrans);
        MenuFunction mf = new MenuFunction(menuItemDisplayStr(RTax25RegisterTransMap), MenuItemType::Display);
        formRun = mf.create(args);
        formRun.run();
        formRun.detach();
        engine = formRun.rTax25RegTransMapEngine();
        formDataSource = formRun.dataSource(1);
        formDataSource.filter(fieldnum(RTax25RegisterTransMap, RecId), queryValue(_registerTransMap.RecId));
        engine.init();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>