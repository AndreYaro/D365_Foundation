<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQLineType</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class PurchRFQLineType extends InventType implements InventDistinctProductOrderDefaulting
{
    PurchRFQLine    purchRFQLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canInventBeReserved</Name>
				<Source><![CDATA[
    boolean  canInventBeReserved()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdFinancial</Name>
				<Source><![CDATA[
    boolean  canInventUpdFinancial()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdPhysical</Name>
				<Source><![CDATA[
    boolean  canInventUpdPhysical()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDelete</Name>
				<Source><![CDATA[
    public boolean checkDelete()
    {
        return (!purchRFQLine.RecId || purchRFQLine.Status < PurchRFQStatus::Received ||
            (!purchRFQLine.rfqCaseLineRefRecId && purchRFQLine.Status <= PurchRFQStatus::Received));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdate</Name>
				<Source><![CDATA[
    public boolean checkUpdate()
    {
        boolean ok = true;

        if (!purchRFQLine.purchRFQTable().RecId)
            ok = false;
        else if (purchRFQLine.Status > PurchRFQStatus::Received)
            ok = false;
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an RFQ line record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an RFQ line record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory and financial dimensions for a <c>PurchRFQCaseLine</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// A <c>InventTable</c> record buffer.
    /// </param>
    /// <param name="_rfqLine">
    /// A <c>PurchRFQLine</c> record buffer.
    /// </param>
    /// <returns>
    /// The <c>InventDim</c> record buffer.
    /// </returns>
    InventDim initDimensions(InventTable _inventTable, PurchRFQLine _rfqLine = null)
    {
        InventDim                               inventDim = purchRFQLine.inventDim();
        InventDim                               rfqLineInventDim;
        InventDimGroupFieldSetupEnumerator      enumerator;
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        FieldId                                 inventDimFieldId;

        if (_inventTable)
        {
            inventDim.initFromInventTable(_inventTable, InventItemOrderSetupType::Purch, inventDim);
        }

        if (_rfqLine)
        {
            rfqLineInventDim = _rfqLine.inventDim();
            enumerator = InventDimGroupSetup::newInventTable(_inventTable).getFieldSetupEnumerator();
            while (enumerator.moveNext())
            {
                inventDimGroupFieldSetup = enumerator.current();
                inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

                if (inventDimGroupFieldSetup.isActive()
                && inventDimGroupFieldSetup.isCoveragePlanByDimensionEnabled()
                && inventDimGroupFieldSetup.isMandatory()
                && !inventDim.(inventDimFieldId))
                {
                    inventDim.(inventDimFieldId) = rfqLineInventDim.(inventDimFieldId);
                }
            }
        }

        inventDim                = InventDim::findOrCreate(inventDim);
        purchRFQLine.setInventDimId(inventDim.InventDimId, inventDim);
        purchRFQLine.setAddressFromInventDim(inventDim);

        purchRFQLine.DefaultDimension = purchRFQLine.mergeDimension(_inventTable.DefaultDimension);

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes dimensions based on the <c>InventTable</c> record and any dimensions specific settings.
    /// </summary>
    /// <param name = "_inventTable">The <c>InventTable</c> record to use for initializing base dimensions.</param>
    /// <param name = "_executeOnlyIfProductIsFullySpecified">true if dimension specific defaulting gets executed only if all active product dimensions are set; otherwise false.</param>
    public void initFromInventTable(InventTable _inventTable, boolean _executeOnlyIfProductIsFullySpecified = false)
    {
        InventDistinctProductOrderDefaultingController::itemIdModified(this, InventDistinctProductDimensionSpecificDefaultingArgs::construct(_inventTable, _executeOnlyIfProductIsFullySpecified, InventItemOrderSetupType::Purch));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStorageDimensionsFromHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes storage dimensions from header.
    /// </summary>
    public void initStorageDimensionsFromHeader()
    {
        this.initFromPurchRFQTable(purchRFQLine.purchRFQTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets an <c>InventDim</c> relation.
    /// </summary>
    /// <param name = "_inventDim">A <c>InventDim</c> record buffer.</param>
    public void setInventDim(InventDim _inventDim)
    {
        purchRFQLine.setInventDimIdFromInventDim(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the associated <c>InventDim</c> record.
    /// </summary>
    /// <returns>the associated <c>InventDim</c> record.</returns>
    public InventDim inventDim()
    {
        return purchRFQLine.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>PurchRFQCaseLine</c> record buffer, from the <c>PurchRFQTable</c> record buffer.
    /// </summary>
    /// <param name="_purchRFQTable">
    /// A <c>PurchRFQTable</c> record buffer.
    /// </param>
    public void initFromPurchRFQTable(PurchRFQTable _purchRFQTable)
    {
        InventDim   inventDim = purchRFQLine.inventDim();

        purchRFQLine.rfqType            = _purchRFQTable.rfqType;
        purchRFQLine.rfqId              = _purchRFQTable.rfqId;
        purchRFQLine.CurrencyCode       = _purchRFQTable.CurrencyCode;
        purchRFQLine.TaxGroup           = _purchRFQTable.TaxGroup;
        purchRFQLine.OverrideSalesTax   = _purchRFQTable.OverrideSalesTax;
        purchRFQLine.DefaultDimension   = purchRFQLine.copyDimension(_purchRFQTable.DefaultDimension);
        purchRFQLine.DeliveryDate       = _purchRFQTable.DeliveryDate;
        purchRFQLine.ExpiryDateTime     = _purchRFQTable.ExpiryDateTime;

        if (_purchRFQTable.InventLocationId || _purchRFQTable.InventSiteId)
        {
            inventDim.InventLocationId  = _purchRFQTable.InventLocationId;
            inventDim.InventSiteId      = _purchRFQTable.InventSiteId;
        }

        purchRFQLine.setInventDimIdFromInventDim(inventDim);
        purchRFQLine.setAddressFromPurchRFQTable(_purchRFQTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchQty</Name>
				<Source><![CDATA[
    public void initPurchQty()
    {
        if (purchRFQLine.ItemId)
            purchRFQLine.QtyOrdered = purchRFQLine.calcQtyOrdered();
        else
            purchRFQLine.QtyOrdered = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        purchRFQLine.LineType       = PurchRFQLineItemType::Item;
        purchRFQLine.DeliveryDate   = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an RFQ line record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an RFQ line record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdChanged</Name>
				<Source><![CDATA[
    public void itemIdChanged()
    {
        this.initFromInventTable(purchRFQLine.inventTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventBeQuotationControlled</Name>
				<Source><![CDATA[
    boolean  mustInventBeQuotationControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(PurchRFQLine _purchRFQLine)
    {
        super(_purchRFQLine);

        purchRFQLine = _purchRFQLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRFQLine</Name>
				<Source><![CDATA[
    public PurchRFQLine parmPurchRFQLine()
    {
        return purchRFQLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an RFQ line record is updated.
    /// </summary>
    public void updating()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an RFQ line record has been updated.
    /// </summary>
    /// <param name="_purchRFQLineOrig">
    /// The original RFQ line which is updated.
    /// </param>
    public void updated(PurchRFQLine _purchRFQLineOrig)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDim</Name>
				<Source><![CDATA[
    void updateInventDim()
    {
        InventDim       inventDim;
        PurchRFQTable   purchRFQTable;

        if (purchRFQLine.LineType == PurchRFQLineItemType::Category ||
            purchRFQLine.ItemId == '' )
        {
            inventDim = purchRFQLine.inventDim();
            purchRFQTable = PurchRFQTable::find(purchRFQLine.rfqId);

            //get from header (if exists)
            if (purchRFQTable.InventLocationId)
            {
                inventDim.InventLocationId = purchRFQTable.InventLocationId;
                inventDim.initFromInventLocation(inventDim.inventLocation());
            }
            else if (purchRFQTable.InventSiteId)
            {
                inventDim.InventLocationId = '';
                inventDim.InventSiteId = purchRFQTable.InventSiteId;
            }

            inventDim = InventDim::findOrCreate(inventDim);
            purchRFQLine.setInventDimId(inventDim.InventDimId, inventDim);
            purchRFQLine.setAddressFromInventDim(inventDim);
        }
        else
        {
            this.initFromInventTable(purchRFQLine.inventTable());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReleasedProductSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes settings that are based on the released product.
    /// </summary>
    /// <param name = "_inventTable">An <c>InventTable</c> record buffer.</param>
    public void initReleasedProductSpecificDefaulting(InventTable _inventTable)
    {
        purchRFQLine.PurchRFQLineMap::initReleasedProductSpecificDefaulting(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes product dimension specific order defaulting.
    /// </summary>
    /// <param name = "_inventDistinctProductDimensionSpecificDefaultingArgs">Product dimension specific order defaulting arguments.</param>
    public void initDimensionsSpecificDefaulting(InventDistinctProductDimensionSpecificDefaultingArgs _inventDistinctProductDimensionSpecificDefaultingArgs)
    {
        if (EcoResProductVariantItemSalesTaxGroupFeature::isFeatureEnabled()
            && (!EcoResProductVariantItemSalesTaxGroupNoBRFlight::instance().isEnabled() || !(BrazilParameters::isEnabled() && purchRFQLine.CFOPTable_BR)))
        {
            purchRFQLine.TaxItemGroup = InventTable::getTaxItemGroupId(ModuleInventPurchSales::Purch, purchRFQLine.ItemId, this.initDimensions(_inventDistinctProductDimensionSpecificDefaultingArgs.InventTable).inventDimId);
        }
        else
        {
            purchRFQLine.TaxItemGroup = InventTableModule::find(purchRFQLine.ItemId, ModuleInventPurchSales::Purch).TaxItemGroupId;
        }

        purchRFQLine.PurchRFQLineMap::initDimensionsSpecificDefaulting(_inventDistinctProductDimensionSpecificDefaultingArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMRP_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the MRP information.
    /// </summary>
    public void updateMRP_IN()
    {
        PurchRFQReplyLine purchRFQReplyLine;

        if (purchRFQLine.RecId)
        {
            ttsbegin;
            purchRFQReplyLine = PurchRFQReplyLine::findRFQLine(purchRFQLine.RecId,true);
            if (purchRFQReplyLine.RecId)
            {
                purchRFQLine.purchRFQLineTaxExtensionIN().MaximumRetailPrice = purchRFQReplyLine.MaximumRetailPrice_IN;
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    public void updateStatus()
    {
        PurchRFQReplyLine purchRFQReplyLine;
        if (purchRFQLine.RecId &&
            (purchRFQLine.Status == PurchRFQStatus::Created ||
             purchRFQLine.Status == PurchRFQStatus::Sent))
        {
            purchRFQLine.Status = PurchRFQStatus::Received;

            ttsbegin;
            purchRFQReplyLine = PurchRFQReplyLine::findRFQLine(purchRFQLine.RecId,true);
            if (purchRFQReplyLine.RecId)
            {
                purchRFQReplyLine.ReplyReceived = NoYes::Yes;
                purchRFQReplyLine.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchRFQLineType construct(PurchRFQLine _purchRFQLine)
    {
        PurchRFQTypeFactoryAttribute        attribute       = new PurchRFQTypeFactoryAttribute(_purchRFQLine.rfqType);
        SysExtensionGenericInstantiation    instantiation   = new SysExtensionGenericInstantiation(_purchRFQLine);
        PurchRFQLineType                    instance        = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(PurchRFQLineType), attribute, instantiation) as PurchRFQLineType;

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>