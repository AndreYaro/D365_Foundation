<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCExpressionStringHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A helper class for performing various simple string operations on an expression.
/// </summary>
class PCExpressionStringHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getChar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the char at a specific position in the string.
    /// </summary>
    /// <param name="_text">
    /// The string.
    /// </param>
    /// <param name="_charPosition">
    /// The char position.
    /// </param>
    /// <returns>
    /// The token at a specific position in the string.
    /// </returns>
    public str getChar(str _text, int _charPosition)
    {
        return subStr(_text, _charPosition, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCharCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number of occurences of a char in a string.
    /// </summary>
    /// <param name="_text">
    /// The string.
    /// </param>
    /// <param name="_char">
    /// The char.
    /// </param>
    /// <returns>
    /// The number of occurences of a char in a string.
    /// </returns>
    public int getCharCount(str _text, str _char)
    {
        return strLen(_text) - strLen(strReplace(_text, _char, ''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnlyBlanks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dtermines if the string only contains blank characters.
    /// </summary>
    /// <param name="_text">
    /// The string.
    /// </param>
    /// <returns>
    /// true if the string only contains blank characters; otherwise, false.
    /// </returns>
    public boolean isOnlyBlanks(str _text)
    {
        return match("^[\r\n\t ]*$", _text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits a string in two with the first part containing all characters up to but not including the split position, and the second part containing the rest.
    /// </summary>
    /// <param name="_stringToSplit">
    /// The string to split.
    /// </param>
    /// <param name="_splitPosition">
    /// The split position.
    /// </param>
    /// <returns>
    /// A container of two strings.
    /// </returns>
    public container splitString(str _stringToSplit, int _splitPosition)
    {
        return [subStr(_stringToSplit, 0, max(0, _splitPosition-1)), subStr(_stringToSplit, _splitPosition, strLen(_stringToSplit))];
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCExpressionStringHelper construct()
    {
        return new PCExpressionStringHelper();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>