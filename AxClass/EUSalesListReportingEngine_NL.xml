<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EuSalesListReportingEngine_NL</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The <c>EUSalesListReportingEngine_NL</c> class extends the functionality of the
/// <c>EUSalesListReportingEngine</c> class in order to support requirements that are specific to the
/// Netherlands.
/// </summary>
#ISOCountryRegionCodes
[CountryRegionAttribute(#isoNL)]
class EuSalesListReportingEngine_NL extends EUSalesListReportingEngine implements BatchRetryable
{
    QueryRun                queryRunOrig;
    Listcode                listcode;
    boolean                 firstLine;
    TaxIntraCommTable_NL    taxIntraCommTable;
    Map                     vatNumTableInfoMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and inserts a record in the <c>EUSalesListReportingGroup</c> table.
    /// </summary>
    /// <param name="_euSalesListReportingHeaderRecId">
    /// The reference to the header record to which the group belongs.
    /// </param>
    /// <param name="_correction">
    /// A value that indicates whether group for holding correction lines must be created.
    /// </param>
    /// <param name="_triangular">
    /// A value that indicates whether group for holding triangular lines must be created.
    /// </param>
    /// <returns>
    /// A <c>EUSalesListReportingGroup</c> table buffer.
    /// </returns>
    protected EUSalesListReportingGroup addGroup(RefRecId _euSalesListReportingHeaderRecId, Correct _correction = NoYes::No, NoYes _triangular = NoYes::No)
    {
        EUSalesListReportingGroup  euSalesListReportingGroup;

        euSalesListReportingGroup = super(_euSalesListReportingHeaderRecId);

        euSalesListReportingGroup.Corrected  = _correction;
        euSalesListReportingGroup.Triangular_NL = _triangular;
        euSalesListReportingGroup.update();

        return euSalesListReportingGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and inserts a record into the <c>EUSalesListReportingHeader</c> table.
    /// </summary>
    /// <returns>
    /// A <c>EUSalesListReportingHeader</c> table buffer.
    /// </returns>
    protected EUSalesListReportingHeader addHeader()
    {
        EUSalesListReportingHeader euSalesListReportingHeader;

        // queryRun is used to link two tables
        if (queryRun.next())
        {
            euSalesListReportingHeader = super();

            taxIntraCommTable = queryRun.get(tableNum(TaxIntraCommTable_NL));

            euSalesListReportingHeader.TaxIntraCommTable_NL = taxIntraCommTable.RecId;
            euSalesListReportingHeader.update();

            queryRun.reset();
        }

        return euSalesListReportingHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes and inserts a record in <c>EUSalesListReportingLine</c> table and corresponding line amounts in
    ///     <c>EUSalesListReportingLineAmount</c>.
    /// </summary>
    /// <param name="_euSalesListReportingGroupRecId">
    ///     The reference to the group record to which the line belongs.
    /// </param>
    /// <param name="_vatNum">
    ///     Vat number of the customer.
    /// </param>
    /// <param name="_countryRegionId">
    ///     CountryRegion of the customer.
    /// </param>
    /// <param name="_corrected">
    ///     Differentiation between normal and correction lines.
    /// </param>
    /// <param name="_taxPeriod">
    ///     Tax period of ICP declaration
    /// </param>
    /// <param name="_itemAmount">
    ///     Item amount.
    /// </param>
    /// <param name="_serviceAmount">
    ///     Service amount.
    /// </param>
    /// <param name="_triangularAmount">
    ///     Triangular amount.
    /// </param>
    /// <returns>
    ///     <c>EUSalesListReportingLine</c> table buffer.
    /// </returns>
    protected EUSalesListReportingLine addLine(RefRecId                 _euSalesListReportingGroupRecId,
                                               VATNum                   _vatNum             = '',
                                               AddressCountryRegionId   _countryRegionId    = '',
                                               Correct                  _corrected          = NoYes::No,
                                               TaxPeriodOfYear          _taxPeriod          = 0,
                                               AmountMST                _itemAmount         = 0,
                                               AmountMST                _serviceAmount      = 0,
                                               AmountMST                _triangularAmount   = 0)
    {
        EUSalesListReportingLine euSalesListReportingLine;
        VATName                  name;
        AddressCountryRegionId   countryRegionId;

        [countryRegionId, name] = this.getVatNumTableInfo(_countryRegionId, _vatNum);

        euSalesListReportingLine.euSalesListReportingGroup = _euSalesListReportingGroupRecId;
        euSalesListReportingLine.ItemAmountMST             = _itemAmount;
        euSalesListReportingLine.ServiceAmountMST          = _serviceAmount;
        euSalesListReportingLine.TriangularAmountMST       = _triangularAmount;
        euSalesListReportingLine.CountryRegionId           = countryRegionId;
        euSalesListReportingLine.euSalesListTaxCode        = _countryRegionId;
        euSalesListReportingLine.TaxPeriod_NL              = _taxPeriod;
        euSalesListReportingLine.Name                      = name;
        euSalesListReportingLine.Corrected                 = _corrected;

        this.fillStrippedVATNum(euSalesListReportingLine, _vatNum);

        euSalesListReportingLine.insert();

        return euSalesListReportingLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    public RefRecId calculate()
    {
        EUSalesListReportingHeader euSalesListReportingHeader;

        euSalesListReportingHeader = this.addHeader();

        // save original query in separate object to be able to reuse original version later
        queryRunOrig = new QueryRun(queryRun.query());

        this.processCorrections(euSalesListReportingHeader.RecId);

        this.processCorrectionsTriangular(euSalesListReportingHeader.RecId);

        this.processDeliveries(euSalesListReportingHeader.RecId);

        this.processDeliveriesTriangular(euSalesListReportingHeader.RecId);

        if (euSalesListReportingHeader)
        {
            this.calculateGrandTotals(euSalesListReportingHeader);
        }

        return euSalesListReportingHeader.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSendElectronically</Name>
				<Source><![CDATA[
    protected boolean canSendElectronically()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Object                  ret;
        TaxIntraCommTable_NL    taxIntraCommTableLocal;
        container               reportingParameters;

        if (args && args.dataset() == tableNum(TaxIntraCommTable_NL))
        {
            taxIntraCommTableLocal = TaxIntraCommTable_NL::find(args.record().RecId);
            filename = taxIntraCommTableLocal.MessageID + '.xml';
        }

        ret = super();

        if (ret && taxIntraCommTableLocal)
        {
            reportingParameters = EUSalesListEvat_NL::getReportingParameters(taxIntraCommTableLocal.TaxPeriod);

            dialogReportingPeriodType.value(conPeek(reportingParameters, 1));
            dialogFromDate.value(conPeek(reportingParameters, 2));
            dialogToDate.value(conPeek(reportingParameters, 3));

            dialogReportingPeriodType.enabled(false);
            dialogFromDate.enabled(false);
            dialogToDate.enabled(false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFiles</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates one or more output files for EU sales list reporting.
    /// </summary>
    /// <param name="_euSalesListReportingHeaderRecId">
    ///    The reference to the header record.
    /// </param>
    /// <remarks>
    ///    The default implementation produces a single file. Subclasses may override it to customize the
    ///    behavior.
    /// </remarks>
    protected void generateFiles(RefRecId _euSalesListReportingHeaderRecId)
    {
        super(_euSalesListReportingHeaderRecId);

        ttsbegin;
        taxIntraCommTable.selectForUpdate(true);
        taxIntraCommTable.FileName = filename;
        taxIntraCommTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVatNumTableInfo</Name>
				<Source><![CDATA[
    private container getVatNumTableInfo(AddressCountryRegionId _countryRegionId, VATNum _vatNum)
    {
        TaxCountryRegionParameters taxCountryRegionParameters;
        TaxVATNumTable             taxVATNumTable;

        // _countryRegionId contains not a real AddressCountryRegionId value, but the SalesTaxCode value from TaxCountryRegionParameters
        // to find value of real CountryRegionId the values of _vatNum and _countryRegionId are used
        // in table TAXVatNumTAble field VATNum contains full VAT number, but parameter _vatNum contains stripped VAT number
        // so to get record correctly while select is required

        if (! vatNumTableInfoMap.exists(_vatNum))
        {
            while select vatNum, Name, CountryRegionId from taxVATNumTable
                exists join taxCountryRegionParameters
                    where taxCountryRegionParameters.CountryRegionId == taxVATNumTable.CountryRegionId &&
                          taxCountryRegionParameters.SalesTaxCode    == _countryRegionId
            {
                if (TaxVATNumTable::stripVATNum(taxVATNumTable.vatNum, _countryRegionId) == _vatNum)
                {
                    break;
                }
            }
            vatNumTableInfoMap.insert(_vatNum, [taxVATNumTable.CountryRegionId, taxVATNumTable.Name]);
        }

        return vatNumTableInfoMap.lookup(_vatNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        Query query;

        super();

        query = new Query();

        query.addDataSource(tableNum(TaxIntraCommTable_NL));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to create a new record in the <c>EUSalesListReportingGroup</c> table.
    /// </summary>
    /// <returns>
    /// true if a new group is created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Descendant classes can override this method to support any special or logical grouping logic such
    /// as the splitting of files.
    /// </remarks>
    protected boolean isNewGroup()
    {
        boolean                     ret;
        
        if (this.canCreateNewGroup())
        {
            firstLine = false;
            ret       = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateNewGroup</Name>
				<Source><![CDATA[
    private boolean canCreateNewGroup()
    {
        TaxIntraCommCorrection_NL taxIntraCommCorrection = queryRun.get(tableNum(TaxIntraCommCorrection_NL));

        return firstLine 
            || ((listcode == Listcode::ProductionOnToll 
                    || listcode == Listcode::EUTrade
                    || listcode == Listcode::IncludeNot) 
                && (taxIntraCommCorrection.TriangularTrade == Listcode::TriangularEUTrade
                    || taxIntraCommCorrection.TriangularTrade == Listcode::TriangularProductionOnToll
                    || taxIntraCommCorrection.TriangularTrade == Listcode::PropertyMoving_CZ
                    || taxIntraCommCorrection.TriangularTrade == Listcode::TriangularIntermediateRole_HU
                    || taxIntraCommCorrection.TriangularTrade == Listcode::DEL_EUService
                    || taxIntraCommCorrection.TriangularTrade == Listcode::PurchasedOnBehalf_LV));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        vatNumTableInfoMap = new Map(Types::String, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies any runtime filters on the query for data selection.
    /// </summary>
    protected void prepareQuery()
    {
        TaxPeriodOfYear taxPeriod;

        taxPeriod = str2int(EUSalesListEvat_NL::getReportingPeriodCode(reportingPeriodType, fromDate));

        queryRun.query().dataSourceTable(tableNum(TaxIntraCommTable_NL)).addRange(fieldNum(TaxIntraCommTable_NL, TaxPeriod)).value(queryValue(taxPeriod));

        if (args && args.dataset() == tableNum(TaxIntraCommTable_NL))
        {
            queryRun.query().dataSourceTable(tableNum(TaxIntraCommTable_NL)).addRange(fieldNum(TaxIntraCommTable_NL, RecId)).value(queryValue(args.record().RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCorrections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes correction lines from ICP declaration.
    /// </summary>
    /// <param name="_euSalesListReportingHeaderRecId">
    /// The reference to the header record to which the group belongs.
    /// </param>
    private void processCorrections(RefRecId _euSalesListReportingHeaderRecId)
    {
        Query                       query;
        QueryBuildDataSource        qbds;
        TaxIntraCommCorrection_NL   taxIntraCommCorrection;
        EUSalesListReportingGroup   euSalesListReportingGroup;
        EUSalesListReportingLine    euSalesListReportingLine;
        QueryRun                    queryRunLocal;

        firstLine = true;

        query = new Query(queryRun.query());

        qbds = query.dataSourceTable(tableNum(TaxIntraCommTable_NL)).addDataSource(tableNum(TaxIntraCommCorrection_NL));
        qbds.relations(true);
        qbds.addGroupByField(fieldNum(TaxIntraCommCorrection_NL, CountryRegion));
        qbds.addGroupByField(fieldNum(TaxIntraCommCorrection_NL, VatNum));
        qbds.addGroupByField(fieldNum(TaxIntraCommCorrection_NL, TaxPeriod));

        qbds.addSelectionField(fieldNum(TaxIntraCommCorrection_NL, Amount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(TaxIntraCommCorrection_NL, ServiceAmount), SelectionField::Sum);

        qbds.addRange(fieldNum(TaxIntraCommCorrection_NL, TriangularTrade)).value(SysQuery::range(Listcode::EUTrade, Listcode::ProductionOnToll));

        queryRunLocal = new QueryRun(query);

        // items
        while (queryRunLocal.next())
        {
            taxIntraCommCorrection = queryRunLocal.get(tableNum(TaxIntraCommCorrection_NL));
            lineCount++;
            if (firstLine)
            {
                euSalesListReportingGroup = this.addGroup(_euSalesListReportingHeaderRecId, NoYes::Yes, NoYes::No);
                firstLine = false;
            }

            euSalesListReportingLine = this.addLine(euSalesListReportingGroup.RecId,
                                                    taxIntraCommCorrection.VatNum,
                                                    taxIntraCommCorrection.CountryRegion,
                                                    NoYes::Yes,
                                                    taxIntraCommCorrection.TaxPeriod,
                                                    taxIntraCommCorrection.Amount);
            this.saveLastLineAmounts(euSalesListReportingLine);
        }

        // services
        qbds.findRange(fieldNum(TaxIntraCommCorrection_NL, TriangularTrade)).value(SysQuery::valueUnlimited());
        queryRunLocal = new QueryRun(query);

        while (queryRunLocal.next())
        {
            taxIntraCommCorrection = queryRunLocal.get(tableNum(TaxIntraCommCorrection_NL));
            lineCount++;
            if (firstLine)
            {
                euSalesListReportingGroup = this.addGroup(_euSalesListReportingHeaderRecId, NoYes::Yes, NoYes::No);
                firstLine = false;
            }

            euSalesListReportingLine = this.addLine(euSalesListReportingGroup.RecId,
                                                    taxIntraCommCorrection.VatNum,
                                                    taxIntraCommCorrection.CountryRegion,
                                                    NoYes::Yes,
                                                    taxIntraCommCorrection.TaxPeriod,
                                                    0,
                                                    taxIntraCommCorrection.ServiceAmount);
            this.saveLastLineAmounts(euSalesListReportingLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCorrectionsTriangular</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes triangular correction lines from ICP declaration.
    /// </summary>
    /// <param name="_euSalesListReportingHeaderRecId">
    /// The reference to the header record to which the group belongs.
    /// </param>
    private void processCorrectionsTriangular(RefRecId _euSalesListReportingHeaderRecId)
    {
        Query                       query;
        QueryBuildDataSource        qbds;
        TaxIntraCommCorrection_NL   taxIntraCommCorrection;
        EUSalesListReportingGroup   euSalesListReportingGroup;
        EUSalesListReportingLine    euSalesListReportingLine;
        QueryRun                    queryRunLocal;

        firstLine = true;

        queryRunLocal = new QueryRun(queryRun.query());

        query = queryRunLocal.query();

        qbds = query.dataSourceTable(tableNum(TaxIntraCommTable_NL)).addDataSource(tableNum(TaxIntraCommCorrection_NL));
        qbds.relations(true);
        qbds.addRange(fieldNum(TaxIntraCommCorrection_NL, TriangularTrade)).value(SysQuery::range(Listcode::TriangularEUTrade, Listcode::TriangularProductionOnToll));

        // items
        while (queryRunLocal.next())
        {
            taxIntraCommCorrection = queryRunLocal.get(tableNum(TaxIntraCommCorrection_NL));
            lineCount++;
            if (firstLine)
            {
                euSalesListReportingGroup = this.addGroup(_euSalesListReportingHeaderRecId, NoYes::Yes, NoYes::Yes);
                firstLine = false;
            }

            euSalesListReportingLine = this.addLine(euSalesListReportingGroup.RecId,
                                                    taxIntraCommCorrection.VatNum,
                                                    taxIntraCommCorrection.CountryRegion,
                                                    NoYes::Yes,
                                                    taxIntraCommCorrection.TaxPeriod,
                                                    0,
                                                    0,
                                                    taxIntraCommCorrection.Amount);
            this.saveLastLineAmounts(euSalesListReportingLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDeliveries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes typical lines from ICP declaration.
    /// </summary>
    /// <param name="_euSalesListReportingHeaderRecId">
    /// The reference to the header record to which the group belongs.
    /// </param>
    private void processDeliveries(RefRecId _euSalesListReportingHeaderRecId)
    {
        Query                       query;
        QueryBuildDataSource        qbds;
        TaxIntraCommDelivery_NL     taxIntraCommDelivery;
        EUSalesListReportingGroup   euSalesListReportingGroup;
        EUSalesListReportingLine    euSalesListReportingLine;
        QueryRun                    queryRunLocal;

        firstLine = true;

        query = new Query(queryRun.query());

        qbds = query.dataSourceTable(tableNum(TaxIntraCommTable_NL)).addDataSource(tableNum(TaxIntraCommDelivery_NL));
        qbds.relations(true);
        qbds.addGroupByField(fieldNum(TaxIntraCommDelivery_NL, CountryRegion));
        qbds.addGroupByField(fieldNum(TaxIntraCommDelivery_NL, VatNum));

        qbds.addSelectionField(fieldNum(TaxIntraCommDelivery_NL, Amount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(TaxIntraCommDelivery_NL, ServiceAmount), SelectionField::Sum);

        qbds.addRange(fieldNum(TaxIntraCommDelivery_NL, TriangularTrade)).value(SysQuery::range(Listcode::EUTrade, Listcode::ProductionOnToll));

        queryRunLocal = new QueryRun(query);

        // items
        while (queryRunLocal.next())
        {
            taxIntraCommDelivery = queryRunLocal.get(tableNum(TaxIntraCommDelivery_NL));
            lineCount++;
            if (firstLine)
            {
                euSalesListReportingGroup = this.addGroup(_euSalesListReportingHeaderRecId, NoYes::No, NoYes::No);
                firstLine = false;
            }

            euSalesListReportingLine = this.addLine(euSalesListReportingGroup.RecId,
                                                    taxIntraCommDelivery.VatNum,
                                                    taxIntraCommDelivery.CountryRegion,
                                                    NoYes::No,
                                                    0,
                                                    taxIntraCommDelivery.Amount);
            this.saveLastLineAmounts(euSalesListReportingLine);
        }

        // services
        qbds.findRange(fieldNum(TaxIntraCommDelivery_NL, TriangularTrade)).value(SysQuery::valueUnlimited());
        queryRunLocal = new QueryRun(query);

        while (queryRunLocal.next())
        {
            taxIntraCommDelivery = queryRunLocal.get(tableNum(TaxIntraCommDelivery_NL));
            lineCount++;
            if (firstLine)
            {
                euSalesListReportingGroup = this.addGroup(_euSalesListReportingHeaderRecId, NoYes::No, NoYes::No);
                firstLine = false;
            }

            euSalesListReportingLine = this.addLine(euSalesListReportingGroup.RecId,
                                                    taxIntraCommDelivery.VatNum,
                                                    taxIntraCommDelivery.CountryRegion,
                                                    NoYes::No,
                                                    0,
                                                    0,
                                                    taxIntraCommDelivery.ServiceAmount);
            this.saveLastLineAmounts(euSalesListReportingLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDeliveriesTriangular</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes triangular lines from ICP declaration.
    /// </summary>
    /// <param name="_euSalesListReportingHeaderRecId">
    /// The reference to the header record to which the group belongs.
    /// </param>
    private void processDeliveriesTriangular(RefRecId _euSalesListReportingHeaderRecId)
    {
        Query                       query;
        QueryBuildDataSource        qbds;
        TaxIntraCommDelivery_NL     taxIntraCommDelievery;
        EUSalesListReportingGroup   euSalesListReportingGroup;
        EUSalesListReportingLine    euSalesListReportingLine;
        QueryRun                    queryRunLocal;

        firstLine = true;

        queryRunLocal = new QueryRun(queryRun.query());

        query = queryRunLocal.query();

        qbds = query.dataSourceTable(tableNum(TaxIntraCommTable_NL)).addDataSource(tableNum(TaxIntraCommDelivery_NL));
        qbds.relations(true);
        qbds.addRange(fieldNum(TaxIntraCommDelivery_NL, TriangularTrade)).value(SysQuery::range(Listcode::TriangularEUTrade, Listcode::TriangularProductionOnToll));

        // items
        while (queryRunLocal.next())
        {
            taxIntraCommDelievery = queryRunLocal.get(tableNum(TaxIntraCommDelivery_NL));
            lineCount++;
            if (firstLine)
            {
                euSalesListReportingGroup = this.addGroup(_euSalesListReportingHeaderRecId, NoYes::No, NoYes::Yes);
                firstLine = false;
            }

            euSalesListReportingLine = this.addLine(euSalesListReportingGroup.RecId,
                                                    taxIntraCommDelievery.VatNum,
                                                    taxIntraCommDelievery.CountryRegion,
                                                    NoYes::No,
                                                    0,
                                                    0,
                                                    0,
                                                    taxIntraCommDelievery.Amount);
            this.saveLastLineAmounts(euSalesListReportingLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendElectronically</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the generated XML file electronically to the authorities.
    /// </summary>
    protected void sendElectronically()
    {
        super();

        ERFileDestinationMemory eRFileDestinationMemory = fileDestination;
        TaxDPSend_NL::sendICP(taxIntraCommTable, eRFileDestinationMemory.getByteArray());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean              ret;
        TaxIntraCommTable_NL taxIntraCommTableValidate;
        TaxPeriodOfYear      taxPeriod = str2int(EUSalesListEvat_NL::getReportingPeriodCode(reportingPeriodType, fromDate));

        ret = super(calledFrom);

        if (ret)
        {
            if (args && args.dataset() == tableNum(TaxIntraCommTable_NL))
            {
                taxIntraCommTableValidate = TaxIntraCommTable_NL::find(args.record().RecId);
            }
            else
            {
                select firstonly taxIntraCommTableValidate
                    where taxIntraCommTableValidate.TaxPeriod == taxPeriod;
            }

            if (! taxIntraCommTableValidate)
            {
                ret = checkFailed("@EUSalesListCommon:ElectronicICPDeclarationMustBeCreated", '', SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(TaxIntraCommTable_NL), MenuItemType::Display));
            }
            else
            {
                ret = EUSalesListReportingEngine_NL::validateXmlFields(taxIntraCommTableValidate);
            }

            if (sendElectronically)
            {
                ret = ret & TaxEvatParameters_NL::validateServiceParameters();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS26943";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateXmlFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates different fields for correctness.
    /// </summary>
    /// <param name="_taxIntraCommTable">
    /// The reference to the header of ICP declaration.
    /// </param>
    /// <returns>
    /// true if validation is succeeded; otherwise false.
    /// </returns>
    static public boolean validateXmlFields(TaxIntraCommTable_NL _taxIntraCommTable)
    {
        boolean ret = true;

        switch (_taxIntraCommTable.ContactPersonType)
        {
            case ContactPersonType::NT:
                ret = TaxEvatParameters_NL::checkBecon(_taxIntraCommTable.ContactPersonId);
                break;
            case ContactPersonType::BPL:
                ret = TaxEvatParameters_NL::checkVat(_taxIntraCommTable.ContactPersonId);
                break;

            default:
                break;
        }

        ret  = ret && TaxEvatParameters_NL::checkVat(_taxIntraCommTable.VatNum);

        if (! TaxIntraCommCorrection_NL::exist(_taxIntraCommTable.RecId) &&
            ! TaxIntraCommDelivery_NL::exist(_taxIntraCommTable.RecId) &&
            ! TaxIntraCommCorrection_NL::exist(_taxIntraCommTable.RecId, NoYes::No) &&
            ! TaxIntraCommDelivery_NL::exist(_taxIntraCommTable.RecId, NoYes::No))
        {
            ret = checkFailed("@SYS96832");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>