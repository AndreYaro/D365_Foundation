<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupAllocationSelectionManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>MarkupAllocationSelectionManager</c> class contains logic for storing user selected lines
///    for miscellaneous charge allocation.
/// </summary>
public class MarkupAllocationSelectionManager
{
    Set                     selectedRecIds;
    Set                     fullSet;
    boolean                 inventoriedRangeApplied;
    QueryBuildDataSource    vendInvoiceInfoLineDS;
    QueryBuildDataSource    purchLineDS;
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearAndPopulateFullSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the full set and populates it with the elements from the selected record IDs set.
    /// </summary>
    public void clearAndPopulateFullSet()
    {
        SetEnumerator se;

        if (fullSet)
        {
            fullSet = this.clearSet(fullSet);
            se = selectedRecIds.getEnumerator();
            while (se.moveNext())
            {
                fullSet.add(se.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the elements in the specified set.
    /// </summary>
    /// <param name="_setToClear">
    ///    The set to clear.
    /// </param>
    /// <returns>
    ///    The cleared set.
    /// </returns>
    protected Set clearSet(Set _setToClear)
    {
        if (_setToClear)
        {
            _setToClear = new Set(typeName2Type(extendedtypestr(recId)));
        }

        return _setToClear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFullSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the selected record IDs set and copies the elements from the full set to the selected record
    ///    IDs set.
    /// </summary>
    public void copyFullSet()
    {
        SetEnumerator se;

        this.clearSet(selectedRecIds);
        se = fullSet.getEnumerator();
        while (se.moveNext())
        {
            selectedRecIds.add(se.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createClearSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the selected record IDs set and full set.
    /// </summary>
    public void createClearSet()
    {
        if (!selectedRecIds)
        {
            selectedRecIds = new Set(typeName2Type(extendedtypestr(recId)));
        }
        if (!fullSet)
        {
            fullSet = new Set(typeName2Type(extendedtypestr(recId)));
        }

        selectedRecIds = this.clearSet(selectedRecIds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedRecIdsSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the selected record IDs set.
    /// </summary>
    /// <returns>
    ///    The selected record IDs set.
    /// </returns>
    public Set getSelectedRecIdsSet()
    {
        return selectedRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the selected record IDs set and the full set, and then clears both sets after
    ///    initialization.
    /// </summary>
    public void init()
    {
        this.createClearSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRemoveSelectedRecIdsSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds or removes a specified record ID from the selected record IDs set.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID to add or remove from the selected record IDs set.
    /// </param>
    /// <param name="_addRemove">
    ///    An <c>AddRemove</c> value that specifies whether the record ID should be added or removed from the
    ///    selected record IDs set.
    /// </param>
    public void insertRemoveSelectedRecIdsSet(RecId _recId, AddRemove _addRemove)
    {
        if (_addRemove == AddRemove::Add)
        {
            selectedRecIds.add(_recID);
        }
        else
        {
            selectedRecIds.remove(_recID);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the specified record ID occurs in the selected record IDs set.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID for which to check.
    /// </param>
    /// <returns>
    ///    true if the record ID occurs in the selected record IDs set; otherwise, false.
    /// </returns>
    public boolean isMarked(RecId _recId)
    {
        return (selectedRecIds.in(_recId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEditToFalse</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>AllowEdit</c> property to false for all table fields in the specified
    ///    <c>FormDataSource</c> object.
    /// </summary>
    /// <param name="_formDataSource">
    ///    The <c>FormDataSource</c> object to be processed by this method.
    /// </param>
    public void setAllowEditToFalse(FormDataSource _formDataSource)
    {
        if (_formDataSource && _formDataSource.table())
        {
            SysDictTable dictTable = new SysDictTable(_formDataSource.table());

            Counter fieldCount = dictTable.fieldCntWithoutSys();
            for (Counter i = 1; i <= fieldCount; i++)
            {
                FieldId fieldId = dictTable.fieldCnt2Id(i);
                if (fieldId)
                {
                    FormDataObject field = _formDataSource.object(fieldId);
                    if (field)
                    {
                        field.allowEdit(false);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRangesBasedOnTableId</Name>
				<Source><![CDATA[
    protected void setQueryRangesBasedOnTableId(tableId _tableId, Query _query, str _formDataSourceName)
    {
        switch (_tableId)
        {
            case(tablenum(PurchTable)):
                _query.dataSourceName(_formDataSourceName).addRange(fieldnum(PurchLine, PurchStatus)).value(strfmt('%1','..'+enum2str(PurchStatus::Received)));
                break;
            case(tablenum(SalesTable)):
                _query.dataSourceName(_formDataSourceName).addRange(fieldnum(SalesLine, SalesStatus)).value(strfmt('%1','..'+enum2str(SalesStatus::Delivered)));
                break;
            case(tablenum(MarkupTrans)):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    _query.dataSourceName(_formDataSourceName).addRange(fieldnum(PurchLine, PurchStatus)).value(strfmt('%1','..'+enum2str(PurchStatus::Received)));
                }
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocateOnFieldNum</Name>
				<Source><![CDATA[
    ///<summary>
    ///    Gets the markup allocate on field Id.
    ///</summary>
    ///<param name="_tableId">
    ///     The TableId value of the caller record buffer.
    ///</param>
    ///<param name="_query">
    ///    An instance of the <c>Query</c> class to which to have the ranges applied.
    ///</param>
    protected FieldId getAllocateOnFieldNum(tableId _tableId, Query _query)
    {
        FieldId allocateOnFieldNum;

        switch (_tableId)
        {
            case(tablenum(PurchTable)):
                allocateOnFieldNum = fieldnum(PurchLine, LineAmount);
                break;
            case(tablenum(SalesTable)):
                allocateOnFieldNum = fieldnum(SalesLine, LineAmount);
                break;
            case(tablenum(VendInvoiceInfoSubTable)), (tablenum(VendInvoiceInfoTable)):
                allocateOnFieldNum = fieldnum(VendInvoiceInfoLine, LineAmount);
                break;
            case(tablenum(VendInvoiceJour)):
                allocateOnFieldNum = fieldnum(VendInvoiceTrans, LineAmount);
                // <GIN>
                break;
            case(tablenum(MarkupTrans)):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    allocateOnFieldNum = fieldnum(PurchLine, LineAmount);
                }
                break;
            // </GIN>
        }

        return allocateOnFieldNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocateInventoriedFieldNum</Name>
				<Source><![CDATA[
    ///<summary>
    ///    Gets the allocate inventoried field Id.
    ///</summary>
    ///<param name="_tableId">
    ///     The TableId value of the caller record buffer.
    ///</param>
    ///<param name="_query">
    ///    An instance of the <c>Query</c> class to which to have the ranges applied.
    ///</param>
    protected FieldId getAllocateInventoriedFieldNum(tableId _tableId, Query _query)
    {
        FieldId allocateInventoriedFieldNum;

        switch (_tableId)
        {
            case(tablenum(PurchTable)):
                allocateInventoriedFieldNum = fieldnum(PurchLine, StockedProduct);
            break;
            case(tablenum(SalesTable)):
                allocateInventoriedFieldNum = fieldnum(SalesLine, StockedProduct);
            break;
            case(tablenum(VendInvoiceInfoSubTable)), (tablenum(VendInvoiceInfoTable)):
                allocateInventoriedFieldNum = fieldnum(PurchLine, StockedProduct);
                break;
            case(tablenum(VendInvoiceJour)):
                allocateInventoriedFieldNum = fieldnum(VendInvoiceTrans, StockedProduct);
                break;
            case(tablenum(MarkupTrans)):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    allocateInventoriedFieldNum = fieldnum(PurchLine, StockedProduct);
                }
                break;
        }

        return allocateInventoriedFieldNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRanges</Name>
				<Source><![CDATA[
    ///<summary>
    ///    Applies query ranges to the specified instance of the <c>Query</c> class.
    ///</summary>
    ///<param name="_tableId">
    ///     The TableId value of the caller record buffer.
    ///</param>
    ///<param name="_query">
    ///    An instance of the <c>Query</c> class to which to have the ranges applied.
    ///</param>
    ///<param name="_allocateOn">
    ///    The <c>MarkupAllocateOn</c> value that indicates to which lines the miscellaneous charges should be
    ///    distributed.
    ///</param>
    ///<param name="_allocateInventoried">
    ///    A Boolean value that specifies whether miscellaneous charges should only be allocated to lines
    ///    tracked in the inventory.
    ///</param>
    ///<param name="_formDataSourceName">
    ///     The name of the caller Form datasource.
    ///</param>
    ///<returns>
    ///    The instance of the <c>Query</c> class that has the appropriate query ranges applied.
    ///</returns>
    public Query setQueryRanges(tableId _tableId, Query _query, MarkupAllocateOn _allocateOn,
                                boolean _allocateInventoried, str _formDataSourceName)
    {
        this.setQueryRangesBasedOnTableId(_tableId, _query, _formDataSourceName);

        this.setQueryRangesForAllocateOn(_tableId, _query, _allocateOn, _formDataSourceName);

        this.setQueryRangesBasedOnAllocateInventoried(_tableId, _query, _allocateInventoried, _formDataSourceName);

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRangesForAllocateOn</Name>
				<Source><![CDATA[
    ///<summary>
    ///    Applies query ranges to the specified instance of the <c>Query</c> class based on the <c>MarkupAllocateOn</c> value.
    ///</summary>
    ///<param name="_tableId">
    ///     The TableId value of the caller record buffer.
    ///</param>
    ///<param name="_query">
    ///    An instance of the <c>Query</c> class to which to have the ranges applied.
    ///</param>
    ///<param name="_allocateOn">
    ///    The <c>MarkupAllocateOn</c> value that indicates to which lines the miscellaneous charges should be
    ///    distributed.
    ///</param>
    ///<param name="_formDataSourceName">
    ///     The name of the caller Form datasource.
    ///</param>
    protected void setQueryRangesForAllocateOn(tableId _tableId, Query _query, MarkupAllocateOn _allocateOn, str _formDataSourceName)
    {
        FieldId allocateOnFieldNum = this.getAllocateOnFieldNum(_tableId, _query);
        _query.dataSourceName(_formDataSourceName).clearRange(allocateOnFieldNum);

        switch (_allocateOn)
        {
            case MarkupAllocateOn::AllLines:
                break;
            case MarkupAllocateOn::PositiveLine:
                _query.dataSourceName(_formDataSourceName).addRange(allocateOnFieldNum).value('> 0');
                break;
            case MarkupAllocateOn::NegativeLines:
                _query.dataSourceName(_formDataSourceName).addRange(allocateOnFieldNum).value('< 0');
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRangesBasedOnAllocateInventoried</Name>
				<Source><![CDATA[
    ///<summary>
    ///    Applies query ranges to the specified instance of the <c>Query</c> class based on allocate inventoried.
    ///</summary>
    ///<param name="_tableId">
    ///The TableId value of the caller record buffer.
    ///</param>
    ///<param name="_query">
    ///    An instance of the <c>Query</c> class to which to have the ranges applied.
    ///</param>
    ///<param name="_allocateOn">
    ///    The <c>MarkupAllocateOn</c> value that indicates to which lines the miscellaneous charges should be
    ///    distributed.
    ///</param>
    ///<param name="_formDataSourceName">
    ///     The name of the caller Form datasource.
    ///</param>
    protected void setQueryRangesBasedOnAllocateInventoried(tableId _tableId, Query _query, boolean _allocateInventoried, str _formDataSourceName)
    {
        FieldId allocateInventoriedFieldNum = this.getAllocateInventoriedFieldNum(_tableId, _query);

        _query.dataSourceName(_formDataSourceName).clearRange(allocateInventoriedFieldNum);

        if (_tableId == tablenum(VendInvoiceInfoTable) || _tableId == tablenum(VendInvoiceInfoSubTable))
        {
            if (_allocateInventoried == true && inventoriedRangeApplied == false)
            {
                vendInvoiceInfoLineDS = _query.dataSourceName(_formDataSourceName);
                purchLineDS = vendInvoiceInfoLineDS.addDataSource(tablenum(PurchLine));
                purchLineDS.addLink(fieldnum(VendInvoiceInfoLine, PurchLineRecId), fieldnum(PurchLine, RecId));
                purchLineDS.joinMode(JoinMode::InnerJoin);
                purchLineDS.addRange(allocateInventoriedFieldNum).value(enum2str(NoYes::Yes));
                purchLineDS.fetchMode(QueryFetchMode::One2One);
                inventoriedRangeApplied =  true;
            }
            else if (_allocateInventoried == false && inventoriedRangeApplied == true)
            {
                purchLineDS.enabled(false);
                inventoriedRangeApplied = false;
            }
        }
        else if (_allocateInventoried == true)
        {
            _query.dataSourceName(_formDataSourceName).addRange(allocateInventoriedFieldNum).value(enum2str(NoYes::Yes));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MarkupAllocationSelectionManager construct()
    {
        return new MarkupAllocationSelectionManager();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>