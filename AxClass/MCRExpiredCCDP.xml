<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRExpiredCCDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRExpiredCCDP</c> class declares the variables and tables required for the report <c>MCRExpiredCC</c>.
/// </summary>
[
    SRSReportParameterAttribute(classstr(MCRExpiredCCContract))
]
public class MCRExpiredCCDP extends SrsReportDataProviderBase
{
    // Report Datasources
    CustTable                   custTable;
    MCRCustPaymTable            mcrCustPaymTable;
    SalesTable                  salesTable;
    MCRContinuityCustHeader     mcrContinuityCustHeader;
    RetailCreditCardCustView    creditCardCust;
    MCRExpiredCCTmp             mcrExpiredCCTmp;
    Months                      monthsFwd;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getExpiredCCTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the <c>MCRExpiredCCTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(MCRExpiredCCTmp))
    ]
    public MCRExpiredCCTmp getExpiredCCTmp()
    {
        select mcrExpiredCCTmp;
        return mcrExpiredCCTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the <c>MCRExpiredCC</c> report.
    /// </summary>
    public void processReport()
    {
        MCRExpiredCCContract    mcrExpiredCCContract;
        accountNum              prevCustAccount;
        Salesid                 prevSalesId;
        date                    thruDate;
        boolean                 customerChanged;
        CreditCardNumber        prevCCNum;

        mcrExpiredCCContract = this.parmDataContract() as MCRExpiredCCContract;
        monthsFwd = mcrExpiredCCContract.parmMonthsFwd();
        thruDate = dateMthFwd(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), monthsFwd);

        // Select all customers who have a credit card that is about to expire and
        // have open payments that are not pre-paid against that card.
        while select TableId, AccountNum, Party from custTable
            order by accountnum
            join TableId, CardNumber, CreditCardTypeName, ExpiryDate from creditCardCust
                order by cardNumber
                where custTable.AccountNum == creditCardCust.CustAccount &&
                      creditCardCust.ExpiryDate < thruDate
            join RecId, PaymInfoTableId, PaymInfoRecId from MCRCustPaymTable
                order by RecId
                where creditCardCust.CardRecId == mcrCustPaymTable.PaymInfoRecId &&
                      mcrCustPaymTable.PaymInfoTableId == tableNum(CreditCardCust) &&
                      mcrCustPaymTable.PostedAmount < mcrCustPaymTable.Amount
            join RecId, SalesId, CreatedDateTime, SalesStatus from salesTable
                where salesTable.RecId == mcrCustPaymTable.RefRecId &&
                      salesTable.TableId == mcrCustPaymTable.RefTableId
                    && (salesTable.SalesStatus == SalesStatus::None
                        || salesTable.SalesStatus == SalesStatus::Backorder
                        || salesTable.SalesStatus == SalesStatus::Delivered)
                    && salesTable.CustAccount == custTable.AccountNum
        {
            //Only print the customers info once.
            if (custTable.AccountNum != prevCustAccount)
            {
                prevCustAccount = custTable.AccountNum;
                this.setExpiredCCTmp(custTable.TableId);
                customerChanged = true;
            }

            //Only print the customers credit card info once.
            if (creditCardCust.CardNumber != prevCCNum ||
            customerChanged)
            {
                prevCCNum = creditCardCust.CardNumber;
                this.setExpiredCCTmp(creditCardCust.TableId);
            }

            //Print out the sales order number.
            if (salesTable.SalesId != prevSalesId)
            {
                prevSalesId = salesTable.SalesId;
                this.setExpiredCCTmp(salesTable.TableId);
            }

            customerChanged = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExpiredCCTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the details of <c>MCRExpiredCC</c> report into the temporary table.
    /// </summary>
    /// <param name="_tableNum">
    /// The <c>TableId</c> value of the table that has the expired credit card number.
    /// </param>
    private void setExpiredCCTmp(tableId _tableNum)
    {
        MCRExpiredCCTmp.clear();

        MCRExpiredCCTmp.CCVendor = creditCardCust.CreditCardTypeName;

        //Set date in m/YYYY format.
        MCRExpiredCCTmp.ExpiryDate = date2str(creditCardCust.ExpiryDate,123,0,DateSeparator::None,2,DateSeparator::Slash,4, DateFlags::FormatAll);

        switch (_tableNum)
        {
            case tableNum(SalesTable):
            MCRExpiredCCTmp.SalesId = salesTable.SalesId;
            MCRExpiredCCTmp.SalesCreatedDateTime = salesTable.createdDateTime;
            MCRExpiredCCTmp.ContinuityOrder = salesTable.mcrSalesTable().ContinuityOrder;
            MCRExpiredCCTmp.SalesStatus = salesTable.SalesStatus;

            case tableNum(RetailCreditCardCustView):
            MCRExpiredCCTmp.CCNum = mcrCustPaymTable.getCCNumMasked();

            case tableNum(CustTable):
            MCRExpiredCCTmp.AccountNum = custTable.AccountNum;
            MCRExpiredCCTmp.CustName = custTable.name();
            MCRExpiredCCTmp.CustAddress = custTable.address();
            MCRExpiredCCTmp.CustPhone = custTable.phone();
            MCRExpiredCCTmp.CustEmail = custTable.email();

            break;
        }
        str s = tableId2Name(_tableNum);
        MCRExpiredCCTmp.TableName = tableId2Name(_tableNum);

        MCRExpiredCCTmp.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>