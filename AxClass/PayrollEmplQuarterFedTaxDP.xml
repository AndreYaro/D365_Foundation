<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollEmplQuarterFedTaxDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used as the data provider for the <c>PayrollEmplQuarterFedTax</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(PayrollEmplQuarterFedTaxContract)),
    SRSReportQueryAttribute('PayrollEmpQtrFedTaxReturnReport')
]
public class PayrollEmplQuarterFedTaxDP extends SRSReportDataProviderBase
{
    CompanyInfoRecId                       currentDataAreaRecId;
    PayrollEmpQuarterlyFedTaxRtnDetailTmp  payrollEmpQuarterlyFedTaxRtnDetailTmp;
    PayrollEmpQtrFedTaxRtnHeaderTmp        payrollEmpQtrFedTaxRtnHeaderTmp;
    PayrollEmplQuarterFedTaxContract       contract;
    ToDate                                 toDate;
    FromDate                               fromDate;
    PayrollTaxYear                         payrollTaxYear;
    MonthsOfYear                           taxPayPeriodMonth;
    Map                                    firstMonthOfQuarter;
    Map                                    secondMonthOfQuarter;
    Map                                    thirdMonthOfQuarter;
    Array                                  monthsOfQuarter;
    PayrollWageTaxQuarter                  payrollWageTaxQuarter;
    MonthsOfYear                           firstMonth;
    MonthsOfYear                           secondMonth;
    MonthsOfYear                           thirdMonth;
    Counter                                taxReturnRecordsCounter;
    Counter                                taxReturnDaysCounter;
    HcmDateTimeUtil                        hcmDateTimeUtil;

    #DEFINE.TAXRETURNRECORDSCOUNTER(11)
    #DEFINE.TAXRETURNDAYSCOUNTER(22)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillMonthsMap</Name>
				<Source><![CDATA[
    private void fillMonthsMap()
    {
        int             firstMonthDays;
        int             secondMonthDays;
        int             thirdMonthDays;
        Counter         dayCounter;

        hcmDateTimeUtil = new hcmDateTimeUtil();

        firstMonthDays  = hcmDateTimeUtil.getDaysOfMonth(contract.parmPayrollTaxYear(), firstMonth);
        secondMonthDays = hcmDateTimeUtil.getDaysOfMonth(contract.parmPayrollTaxYear(), secondMonth);
        thirdMonthDays  = hcmDateTimeUtil.getDaysOfMonth(contract.parmPayrollTaxYear(), thirdMonth);

        for (dayCounter = 1; dayCounter <= 31; dayCounter++)
        {
            if (firstMonthDays >= dayCounter)
            {
                firstMonthOfQuarter.insert(dayCounter, 0.00);
            }

            if (secondMonthDays >= dayCounter)
            {
                secondMonthOfQuarter.insert(dayCounter, 0.00);
            }

            if (thirdMonthDays >= dayCounter)
            {
                thirdMonthOfQuarter.insert(dayCounter, 0.00);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayrollEmpQtrFedTaxRtnHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects all of the records from the temporary table and returns them to the report.
    /// </summary>
    /// <returns>
    /// The content of the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PayrollEmpQtrFedTaxRtnHeaderTmp))
    ]
    public PayrollEmpQtrFedTaxRtnHeaderTmp getPayrollEmpQtrFedTaxRtnHeaderTmp()
    {
        select payrollEmpQtrFedTaxRtnHeaderTmp;

        return payrollEmpQtrFedTaxRtnHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayrollEmpQuarterlyFedTaxRtnDetailTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects all of the records from the temporary table and returns them to the report.
    /// </summary>
    /// <returns>
    /// The content of the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PayrollEmpQuarterlyFedTaxRtnDetailTmp))
    ]
    public PayrollEmpQuarterlyFedTaxRtnDetailTmp getPayrollEmpQuarterlyFedTaxRtnDetailTmp()
    {
        select payrollEmpQuarterlyFedTaxRtnDetailTmp;

        return payrollEmpQuarterlyFedTaxRtnDetailTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeMap</Name>
				<Source><![CDATA[
    private void initializeMap()
    {
        firstMonthOfQuarter  = new Map(Types::Integer, Types::Real);
        secondMonthOfQuarter = new Map(Types::Integer, Types::Real);
        thirdMonthOfQuarter  = new Map(Types::Integer, Types::Real);

        //sets the variable for the months of a quarter.
        switch (contract.parmPayrollWageTaxQuarter())
        {
            case PayrollWageTaxQuarter::Q1:
                firstMonth  = MonthsOfYear::January;
                secondMonth =  MonthsOfYear::February;
                thirdMonth  =  MonthsOfYear::March;
                break;

            case PayrollWageTaxQuarter::Q2:
                firstMonth  = MonthsOfYear::April;
                secondMonth =  MonthsOfYear::May;
                thirdMonth  =  MonthsOfYear::June;
                break;

            case PayrollWageTaxQuarter::Q3:
                firstMonth  = MonthsOfYear::July;
                secondMonth =  MonthsOfYear::August;
                thirdMonth  =  MonthsOfYear::September;
                break;

            case PayrollWageTaxQuarter::Q4:
                firstMonth  = MonthsOfYear::October;
                secondMonth =  MonthsOfYear::November;
                thirdMonth  =  MonthsOfYear::December;
                break;
        }

        this.fillMonthsMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTempTableData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into the PayrollEmpQuarterlyFedTaxRtnDetailTmp.
    /// </summary>
    /// <param name="_month">
    /// The month of the selected quarter.
    /// </param>
    private void insertTempTableData(MonthsOfYear _month)
    {
        Counter recordCounter = 1;

        while (recordCounter <= #TAXRETURNRECORDSCOUNTER)
        {
            payrollEmpQuarterlyFedTaxRtnDetailTmp.Day1to11 = recordCounter;
            payrollEmpQuarterlyFedTaxRtnDetailTmp.Day12to22 = recordCounter + #TAXRETURNRECORDSCOUNTER;

            if (_month == MonthsOfYear::January || _month == MonthsOfYear::April || _month == MonthsOfYear::July || _month == MonthsOfYear::October)
            {
                payrollEmpQuarterlyFedTaxRtnDetailTmp.MonthIdentifier = _month;
                payrollEmpQuarterlyFedTaxRtnDetailTmp.Amount1to11 = firstMonthOfQuarter.lookup(payrollEmpQuarterlyFedTaxRtnDetailTmp.Day1to11);
                payrollEmpQuarterlyFedTaxRtnDetailTmp.Amount12to22 = firstMonthOfQuarter.lookup(payrollEmpQuarterlyFedTaxRtnDetailTmp.Day12to22);

                if (firstMonthOfQuarter.elements() >= recordCounter + #TAXRETURNDAYSCOUNTER  && recordCounter + #TAXRETURNDAYSCOUNTER <= hcmDateTimeUtil.getDaysOfMonth(contract.parmPayrollTaxYear(), _month))
                {
                    payrollEmpQuarterlyFedTaxRtnDetailTmp.Day23toRest = recordCounter + #TAXRETURNDAYSCOUNTER;
                    payrollEmpQuarterlyFedTaxRtnDetailTmp.Amount23toRest = firstMonthOfQuarter.lookup(payrollEmpQuarterlyFedTaxRtnDetailTmp.Day23toRest);
                }
                else
                {
                    payrollEmpQuarterlyFedTaxRtnDetailTmp.Day23toRest = 0;
                }
            }

            if (_month == MonthsOfYear::February || _month == MonthsOfYear::May || _month == MonthsOfYear::August || _month == MonthsOfYear::November)
            {
                payrollEmpQuarterlyFedTaxRtnDetailTmp.MonthIdentifier = _month;
                payrollEmpQuarterlyFedTaxRtnDetailTmp.Amount1to11 = secondMonthOfQuarter.lookup(recordCounter);
                payrollEmpQuarterlyFedTaxRtnDetailTmp.Amount12to22 = secondMonthOfQuarter.lookup(recordCounter + #TAXRETURNRECORDSCOUNTER);

                if (secondMonthOfQuarter.elements() >= recordCounter + #TAXRETURNDAYSCOUNTER && recordCounter + #TAXRETURNDAYSCOUNTER <= hcmDateTimeUtil.getDaysOfMonth(contract.parmPayrollTaxYear(), _month))
                {
                    payrollEmpQuarterlyFedTaxRtnDetailTmp.Day23toRest = recordCounter + #TAXRETURNDAYSCOUNTER;
                    payrollEmpQuarterlyFedTaxRtnDetailTmp.Amount23toRest = secondMonthOfQuarter.lookup(recordCounter + #TAXRETURNDAYSCOUNTER);
                }
                else
                {
                    payrollEmpQuarterlyFedTaxRtnDetailTmp.Day23toRest = 0;
                }
            }

            if (_month == MonthsOfYear::March || _month == MonthsOfYear::June || _month == MonthsOfYear::September || _month == MonthsOfYear::December)
            {
                payrollEmpQuarterlyFedTaxRtnDetailTmp.MonthIdentifier = _month;
                payrollEmpQuarterlyFedTaxRtnDetailTmp.Amount1to11 = thirdMonthOfQuarter.lookup(recordCounter);
                payrollEmpQuarterlyFedTaxRtnDetailTmp.Amount12to22 = thirdMonthOfQuarter.lookup(recordCounter + #TAXRETURNRECORDSCOUNTER);

                if (thirdMonthOfQuarter.elements() >= recordCounter + #TAXRETURNDAYSCOUNTER && recordCounter + #TAXRETURNDAYSCOUNTER <= hcmDateTimeUtil.getDaysOfMonth(contract.parmPayrollTaxYear(), _month))
                {
                    payrollEmpQuarterlyFedTaxRtnDetailTmp.Day23toRest = recordCounter + #TAXRETURNDAYSCOUNTER;
                    payrollEmpQuarterlyFedTaxRtnDetailTmp.Amount23toRest = thirdMonthOfQuarter.lookup(recordCounter + #TAXRETURNDAYSCOUNTER);
                }
                else
                {
                    payrollEmpQuarterlyFedTaxRtnDetailTmp.Day23toRest = 0;
                }
            }

            ttsBegin;
            payrollEmpQuarterlyFedTaxRtnDetailTmp.insert();
            ttsCommit;

            payrollEmpQuarterlyFedTaxRtnDetailTmp.clear();

            recordCounter++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportData</Name>
				<Source><![CDATA[
    private void prepareReportData()
    {
        #PayrollConstants
        Query                             query;
        QueryRun                          queryRun;
        Amount                            wagesAndCompensation;
        Amount                            incomeWithheldWagesAndCompensation;
        Amount                            taxableSocialSecurityWages;
        Amount                            taxableMedicareWage;
        Amount                            taxableWagesTaxWithholding;
        PayrollTaxCode                    payrollTaxCode;

        Date                              dateCurrent;
        Date                              dateEnd;
        PayrollTaxTransactionHistoryUnion payrollTaxTransactionHistoryUnion;

        PayrollPayStatement               payrollPayStatement;

        PayrollPayPeriod                  payrollPayPeriod;
        int                               dayOfMonthCurrent;
        int                               monthOfYearCurrent;
        Set                               numberOfWorkersSet;
        Counter                           monthCounter;

        payrollTaxYear        = contract.parmPayrollTaxYear();
        payrollWageTaxQuarter = contract.parmPayrollWageTaxQuarter();

        numberOfWorkersSet    = new Set(Types::Int64);
        hcmDateTimeUtil       = new hcmDateTimeUtil();

        query                 = this.parmQuery();

        payrollWageTaxQuarter = contract.parmPayrollWageTaxQuarter();

        // Sets the date range for tax transactions
        fromDate = PayrollDateTimeUtil::getFromDateForQuarter(payrollWageTaxQuarter, payrollTaxYear);
        toDate   = PayrollDateTimeUtil::getToDateForQuarter(payrollWageTaxQuarter, payrollTaxYear);

        query.dataSourceTable(tableNum(PayrollTaxTransactionHistoryUnion)).addRange(fieldNum(PayrollTaxTransactionHistoryUnion, TransDate)).value(SysQuery::range(fromDate, toDate));

        query.dataSourceTable(tableNum(PayrollTaxTransactionHistoryUnion)).addSortField(fieldNum(PayrollTaxTransactionHistoryUnion, TransDate));

        monthsOfQuarter = new Array(Types::Integer);

        this.initializeMap();

        this.setMonthsOfQuarter();

        dateEnd = mkDate(12, mthOfYr(toDate), payrollTaxYear);

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            payrollTaxTransactionHistoryUnion = queryRun.get(tableNum(PayrollTaxTransactionHistoryUnion));
            payrollPayStatement               = queryRun.get(tableNum(PayrollPayStatement));

            payrollTaxCode = PayrollTaxCode::find(payrollTaxTransactionHistoryUnion.TaxCode);

            // Grab wages from issues pay statements or manual tax history entries
            if (!payrollPayStatement || payrollPayStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued)
            {
                switch (payrollTaxCode.Code)
                {
                    case #EMPLOYEEFIT:
                        wagesAndCompensation               += payrollTaxTransactionHistoryUnion.Subjectwages;
                        incomeWithheldWagesAndCompensation += payrollTaxTransactionHistoryUnion.TaxLineAmount;
                        break;

                    case #EMPLOYEEFICA:
                        taxableSocialSecurityWages += payrollTaxTransactionHistoryUnion.SubjectWages;
                        break;

                    case #EMPLOYERMEDICARECODE:
                        taxableMedicareWage += payrollTaxTransactionHistoryUnion.SubjectWages;
                        break;

                    case #EMPLOYEEMEDICAREADDITIONAL:
                        taxableWagesTaxWithholding += payrollTaxTransactionHistoryUnion.SubjectWages;
                        break;
                }

                dateCurrent = payrollTaxTransactionHistoryUnion.TransDate;
                dayOfMonthCurrent = dayOfMth(dateCurrent);
                monthOfYearCurrent = mthOfYr(dateCurrent);

                // Getting the PayPeriod from PayStatement
                select firstonly PeriodStartDate, PeriodEndDate from payrollPayPeriod
                    where payrollPayPeriod.RecId == payrollPayStatement.PayPeriod;

                if (monthOfYearCurrent == MonthsOfYear::March || monthOfYearCurrent == MonthsOfYear::June || monthOfYearCurrent == MonthsOfYear::September || monthOfYearCurrent == MonthsOfYear::December)
                {
                    if (payrollPayPeriod.PeriodStartDate <= dateEnd && payrollPayPeriod.PeriodEndDate >= dateEnd)
                    {
                        if (!numberOfWorkersSet.in(payrollTaxTransactionHistoryUnion.Worker))
                        {
                            numberOfWorkersSet.add(payrollTaxTransactionHistoryUnion.Worker);
                        }
                    }
                }
            }

            if (payrollPayStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued)
            {
                if (payrollTaxCode.Code == #EMPLOYEEFIT || payrollTaxCode.Code == #EMPLOYEEFICA ||
                        payrollTaxCode.Code == #EMPLOYERFICACODE || payrollTaxCode.Code == #EMPLOYERMEDICARECODE ||
                        payrollTaxCode.Code == #EMPLOYEEMEDICARE || payrollTaxCode.Code == #EMPLOYEEMEDICAREADDITIONAL)
                {
                    if (monthOfYearCurrent == MonthsOfYear::January || monthOfYearCurrent == MonthsOfYear::April || monthOfYearCurrent == MonthsOfYear::July || monthOfYearCurrent == MonthsOfYear::October)
                    {
                        firstMonthOfQuarter.insert(dayOfMonthCurrent, payrollTaxTransactionHistoryUnion.TaxLineAmount + firstMonthOfQuarter.lookup(dayOfMonthCurrent));
                    }

                    if (monthOfYearCurrent == MonthsOfYear::February || monthOfYearCurrent == MonthsOfYear::May || monthOfYearCurrent == MonthsOfYear::August || monthOfYearCurrent == MonthsOfYear::November)
                    {
                        secondMonthOfQuarter.insert(dayOfMonthCurrent, payrollTaxTransactionHistoryUnion.TaxLineAmount + secondMonthOfQuarter.lookup(dayOfMonthCurrent));
                    }

                    if (monthOfYearCurrent == MonthsOfYear::March || monthOfYearCurrent == MonthsOfYear::June || monthOfYearCurrent == MonthsOfYear::September || monthOfYearCurrent == MonthsOfYear::December)
                    {
                        thirdMonthOfQuarter.insert(dayOfMonthCurrent, payrollTaxTransactionHistoryUnion.TaxLineAmount + thirdMonthOfQuarter.lookup(dayOfMonthCurrent));
                    }
                }
            }
        }

        // Insert the records into the PayrollEmpQuarterlyFedTaxRtnDetailTmp
        for (monthCounter = 1; monthCounter <= 3; monthCounter++)
        {
            this.insertTempTableData(monthsOfQuarter.value(monthCounter));
        }

        // Insert the records into the PayrollEmpQtrFedTaxRtnHeaderTmp
        payrollEmpQtrFedTaxRtnHeaderTmp.NumberOfWorkers                    = numberOfWorkersSet.elements();
        payrollEmpQtrFedTaxRtnHeaderTmp.WagesAndCompensation               = wagesAndCompensation;
        payrollEmpQtrFedTaxRtnHeaderTmp.IncomeWithheldWagesAndCompensation = incomeWithheldWagesAndCompensation;
        payrollEmpQtrFedTaxRtnHeaderTmp.TaxableSocialSecurityWages         = taxableSocialSecurityWages;
        payrollEmpQtrFedTaxRtnHeaderTmp.TaxableMedicareWage                = taxableMedicareWage;
        payrollEmpQtrFedTaxRtnHeaderTmp.TaxableWagesTaxWithholding         = taxableWagesTaxWithholding;
        payrollEmpQtrFedTaxRtnHeaderTmp.insert();

        payrollEmpQtrFedTaxRtnHeaderTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Process PayrollEmplQuarterFedTaxReport data.
    /// </summary>
    public void processReport()
    {
        contract = this.parmDataContract() as PayrollEmplQuarterFedTaxContract;

        if (contract)
        {
            this.prepareReportData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMonthsOfQuarter</Name>
				<Source><![CDATA[
    private void setMonthsOfQuarter()
    {
        switch (payrollWageTaxQuarter)
        {
            case PayrollWageTaxQuarter::Q1:
                monthsOfQuarter.value(1, 1);
                monthsOfQuarter.value(2, 2);
                monthsOfQuarter.value(3, 3);
                break;

            case PayrollWageTaxQuarter::Q2:
                monthsOfQuarter.value(1, 4);
                monthsOfQuarter.value(2, 5);
                monthsOfQuarter.value(3, 6);
                break;

            case PayrollWageTaxQuarter::Q3:
                monthsOfQuarter.value(1, 7);
                monthsOfQuarter.value(2, 8);
                monthsOfQuarter.value(3, 9);
                break;

            case PayrollWageTaxQuarter::Q4:
                monthsOfQuarter.value(1, 10);
                monthsOfQuarter.value(2, 11);
                monthsOfQuarter.value(3, 12);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PayrollEmplQuarterFedTaxDP construct()
    {
        return new PayrollEmplQuarterFedTaxDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>