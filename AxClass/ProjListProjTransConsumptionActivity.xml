<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjTransConsumptionActivity</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjListProjTransConsumptionActivity extends ProjListProjTrans

{
    DialogField     dialogHour,
                    dialogExpenses,
                    dialogItem;

    boolean         hour;
    boolean         expenses;
    boolean         item;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        hour,
        expenses,
        item
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
Object dialog(Object _dialog)
    {
        Dialog        dialog = _dialog;
        DialogGroup   dialogMainGroup;

        dialogMainGroup = dialog.addGroup();
        dialogMainGroup.columns(1);
        dialogMainGroup.frameType(FormFrameType::None);

        dialog.addGroup("@SYS78373", dialogMainGroup);

        dialogHour         = dialog.addFieldValue(extendedTypeStr(ProjOptionHours),      hour,         "@SYS5269",  "@SYS78368");
        dialogExpenses     = dialog.addFieldValue(extendedTypeStr(ProjOptionCost),       expenses,     "@SYP4882014", "@SYS78369");
        dialogItem         = dialog.addFieldValue(extendedTypeStr(ProjOptionItem),       item,         "@SYS7407",  "@SYS78372");

        dialog = super(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ;
        super();

        hour            = dialogHour.value();
        expenses        = dialogExpenses.value();
        item            = dialogItem.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowBlankId</Name>
				<Source><![CDATA[
    boolean mustShowBlankId()
    {
        return listStateId != ProjListStateId::Category;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #currentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpenses</Name>
				<Source><![CDATA[
    public boolean parmExpenses(boolean _expenses = expenses)
    {
        ;
        expenses = _expenses;

        return expenses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHour</Name>
				<Source><![CDATA[
    public boolean parmHour(boolean _hour = hour)
    {
        ;
        hour = _hour;

        return hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItem</Name>
				<Source><![CDATA[
    public boolean parmItem(boolean _item = item)
    {
        ;
        item = _item;

        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version    = RunBase::getVersion(_packedClass);
        container       conListProjTrans;

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, conListProjTrans] = _packedClass;
                super(conListProjTrans);
                ret = true;
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        boolean ret;

        ret = super();

        if (!(hour || expenses || item))
        {
            // Transaction type not selected
            ret = checkFailed("@SYS91027");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>