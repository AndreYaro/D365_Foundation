<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NumberSeqStringControlHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class that implements handling of a numbering sequence for a <c>StringEdit</c> control that is not bound to a datasource.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class NumberSeqStringControlHelper
{
    NumberSeq               numberSeq;
    RefRecId                numberSequenceId;
    NumberSequenceTable     numberSequenceTable;
    FormStringControl       formStringControl;
    tableId                 tableIdNum;
    fieldId                 fieldIdNum;
    Num                     lastNumber;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Discards a number drawn from a number sequence.
    /// </summary>
    public void cancel()
    {
        if (numberSeq && lastNumber)
        {
            numberSeq.abort();
            lastNumber  = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkChangeNumber</Name>
				<Source><![CDATA[
    protected boolean checkChangeNumber(Num _origNum, Num _newNum)
    {
        return NumberSeq::checkChangeNumber(numberSequenceTable,
                                            tableIdNum,
                                            fieldIdNum,
                                            _origNum,
                                            _newNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a control for which number sequence is set can be edited.
    /// </summary>
    /// <returns>
    /// True if the field can be edited; otherwise, false.
    /// </returns>
    public boolean controlAllowEdit()
    {
        return numberSequenceTable.RecId ? numberSequenceTable.numAllowEdit() : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlValue</Name>
				<Source><![CDATA[
    protected Num getControlValue()
    {
        return formStringControl.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNumberSequenceManual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a number sequence is set up as manual for a control that is being handled by this class.
    /// </summary>
    /// <returns>
    /// True if the number sequence is manual; otherwise, false.
    /// </returns>
    public boolean isNumberSequenceManual()
    {
        return numberSequenceTable.RecId ? numberSequenceTable.Manual : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNumberSequenceSetUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a number sequence is set up for a control that is being handled by this class.
    /// </summary>
    /// <returns>
    /// True if the number sequence is set up; otherwise, false.
    /// </returns>
    public boolean isNumberSequenceSetUp()
    {
        return numberSequenceTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Draws a new number from a number sequence.
    /// </summary>
    public void newNumber()
    {
        if (!numberSequenceTable.RecId)
        {
            return;
        }

        this.setControlAllowEdit();

        numberSeq = NumberSeq::newGetNumFromId(numberSequenceTable.RecId, true);

        if (numberSeq)
        {
            lastNumber = numberSeq.num();
            this.setControlValue(lastNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldIdNum</Name>
				<Source><![CDATA[
    public fieldId parmFieldIdNum(fieldId _fieldIdNum = fieldIdNum)
    {
        fieldIdNum = _fieldIdNum;
        return fieldIdNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormStringControl</Name>
				<Source><![CDATA[
    public FormStringControl parmFormStringControl(FormStringControl _formStringControl = formStringControl)
    {
        formStringControl = _formStringControl;
        return formStringControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberSequenceId</Name>
				<Source><![CDATA[
    public RefRecId parmNumberSequenceId(RefRecId _numberSequenceId = numberSequenceId)
    {
        numberSequenceId = _numberSequenceId;

        if (numberSequenceId)
        {
            numberSequenceTable = NumberSequenceTable::find(numberSequenceId);
        }
        else
        {
            numberSequenceTable.clear();
        }

        return numberSequenceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableIdNum</Name>
				<Source><![CDATA[
    public tableId parmTableIdNum(tableId _tableIdNum = tableIdNum)
    {
        tableIdNum = _tableIdNum;
        return tableIdNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlAllowEdit</Name>
				<Source><![CDATA[
    protected void setControlAllowEdit()
    {
        formStringControl.allowEdit(this.controlAllowEdit());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlValue</Name>
				<Source><![CDATA[
    protected void setControlValue(Num _number)
    {
        formStringControl.text(_number);
        formStringControl.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a value entered into a control is valid.
    /// </summary>
    /// <returns>
    /// True if a value is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A number sequence can be set up to allow entry of values even if not in manual mode. The entered value must comply to a format defined for the number sequence.
    /// </remarks>
    public boolean validateWrite()
    {
        if (numberSeq && lastNumber)
        {
            if (this.getControlValue() != lastNumber && !this.checkChangeNumber(lastNumber, this.getControlValue()))
            {
                this.setControlValue(lastNumber);
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirms or discards a number drawn from a numbering sequence.
    /// </summary>
    /// <remarks>
    /// The number is confirmed if a value in a control is the same as the number drawn from the number sequence. If the number is different then it is discarded.
    /// </remarks>
    public void write()
    {
        if (numberSeq)
        {
            numberSeq.onNumberUsed(this.getControlValue(), lastNumber);
        }

        lastNumber = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static NumberSeqStringControlHelper construct()
    {
        return new NumberSeqStringControlHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStringControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the class.
    /// </summary>
    /// <param name="_numberSequenceId">
    ///    The ID of a record in the <c>NumberSequenceTable</c> table.
    /// </param>
    /// <param name="_formStringControl">
    ///    A reference to a <c>StringEdit</c> control for which a number sequence will be used.
    /// </param>
    /// <param name="_tableIdNum">
    ///    The ID of a table where a value from the control will ultimately be saved.
    /// </param>
    /// <param name="_fieldIdNum">
    ///    The ID of a field into which a value from the control will ultimately be saved.
    /// </param>
    /// <returns>
    ///    A new instance of the class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    Invalid values for <paramref name="_formStringControl" /> or <paramref name="_tableIdNum" /> or
    ///    <paramref name="_fieldIdNum" /> have been passed.
    /// </exception>
    public static NumberSeqStringControlHelper newStringControl(
        RefRecId                _numberSequenceId,
        FormStringControl       _formStringControl,
        tableId                 _tableIdNum,
        fieldId                 _fieldIdNum)
    {
        NumberSeqStringControlHelper numberSeqStringControlHelper;

        if (!_formStringControl || !_tableIdNum || !_fieldIdNum)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        numberSeqStringControlHelper = NumberSeqStringControlHelper::construct();

        numberSeqStringControlHelper.parmNumberSequenceId(_numberSequenceId);
        numberSeqStringControlHelper.parmFormStringControl(_formStringControl);
        numberSeqStringControlHelper.parmTableIdNum(_tableIdNum);
        numberSeqStringControlHelper.parmFieldIdNum(_fieldIdNum);

        return numberSeqStringControlHelper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>