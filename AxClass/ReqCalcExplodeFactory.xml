<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcExplodeFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqCalcExplodeFactory</c> class initializes new instances of the <c>ReqCalcExplode</c> class.
/// </summary>
class ReqCalcExplodeFactory
{
    boolean callGetLast;
    ReqRefType reqRefType;
    InventTransRefId inventTransRefId;
    InventTransOriginId inventTransOriginId;
    
    private boolean inventTransRefIdProvided;
    private boolean inventTransOriginIdProvided;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>withSysLastValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instructs the factory to call getLast() on the instance.
    /// </summary>
    /// <returns><c>this</c>; enabling a fluent API.</returns>
    public ReqCalcExplodeFactory withSysLastValue()
    {
        callGetLast = true;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withReqRefType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instructs the factory to create an instance matching a <c>ReqRefType</c> enum.
    /// </summary>
    /// <param name = "_reqRefType">The value to match.</param>
    /// <returns><c>this</c>; enabling a fluent API.</returns>
    public ReqCalcExplodeFactory withReqRefType(ReqRefType _reqRefType)
    {
        reqRefType = _reqRefType;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instructs the factory to create an instance matching a <c>InventTransOriginId</c> value.
    /// </summary>
    /// <param name = "_inventTransOriginId">The value to match.</param>
    /// <returns><c>this</c>; enabling a fluent API.</returns>
    public ReqCalcExplodeFactory withInventTransOriginId(InventTransOriginId _inventTransOriginId)
    {
        inventTransOriginId = _inventTransOriginId;
        inventTransOriginIdProvided = true;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withInventTransRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instructs the factory to create an instance matching a <c>InventTransRefId</c> value.
    /// </summary>
    /// <param name = "_inventTransRefId"></param>
    /// <returns><c>this</c>; enabling a fluent API.</returns>
    public ReqCalcExplodeFactory withInventTransRefId(InventTransRefId _inventTransRefId)
    {
        inventTransRefId = _inventTransRefId;
        inventTransRefIdProvided = true;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ReqCalcExplode</c> class.
    /// </summary> 
    /// <returns>A <c>ReqCalcExplode</c> object.</returns>
    public ReqCalcExplode createInstance()
    {
        ReqCalcExplode instance = this.createInstanceFromParameters();

        if (instance)
        {
            this.initializeInstance(instance);
        }
        
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the instance.
    /// </summary>
    /// <param name = "_instance">The instance to initialize.</param>
    protected void initializeInstance(ReqCalcExplode _instance)
    {
        if (callGetLast)
        {
            _instance.getLast();
        }

        _instance.parmRefType(reqRefType);

        if (inventTransRefIdProvided)
        {
            _instance.parmRefId(inventTransRefId);
        }

        if (inventTransOriginIdProvided)
        {
            _instance.parmInventTransOriginId(inventTransOriginId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstanceFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>ReqCalcExplode</c> class from the parameters provided to the factory.
    /// </summary>
    /// <returns>
    /// A <c>ReqCalcExplode</c> object.
    /// </returns>
    /// <remarks>
    /// You can use this method as an extension point to introduce nested explosions by following the composite pattern, and return the Composite instance here.
    /// </remarks>
    protected ReqCalcExplode createInstanceFromParameters()
    {
        if (reqRefType == ReqRefType::None)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        ReqRefTypeFactoryAttribute attr = new ReqRefTypeFactoryAttribute(reqRefType);

        ReqCalcExplode instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(ReqCalcExplode), attr) as ReqCalcExplode;

        if (instance)
        {
            return instance;
        }

        if (ReqCalcExplode::canRunReqTrans(reqRefType))
        {
            return ReqCalcExplode::newInstance();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqCalcExplodeFactory construct()
    {
        return new ReqCalcExplodeFactory();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>