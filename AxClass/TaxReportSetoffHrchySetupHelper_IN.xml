<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportSetoffHrchySetupHelper_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Tax.Instrumentation;

/// <summary>
/// This is a helper class to handle action for tax report set off hierarchy.
/// </summary>
class TaxReportSetoffHrchySetupHelper_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findSetOffHierarchyVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the active setoff hierarchy with the specified transaction date.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date, or the current system date if not specified.
    /// </param>
    /// <param name="_taxReportHrchyStructDesignType">
    /// The <c>TaxReportHrchyStructDesignType_IN</c> type of a hierarchy.
    /// </param>
    /// <returns>
    /// The <c>TaxReportHierarchyVersion_IN</c> for the active setoff hierarchy.
    /// </returns>
    public static TaxReportHierarchyVersion_IN findSetOffHierarchyVersion(date _transDate,
        TaxReportHrchyStructDesignType_IN _taxReportHrchyStructDesignType = TaxReportHrchyStructDesignType_IN::Setoff)
    {
        TaxReportHierarchy_IN               hierarchy, hierarchyBuf;
        TaxReportHierarchyVersion_IN        hierarchyVersion, hierarchyVersionBuf;
        TaxReportSetOffHierarchySetup_IN    hierarchySetup;
        TaxSolutionScopeRecId               taxSolutionScopeRecId;
        TaxRuntimeDefContextVersionRecId    taxRuntimeDefContextVersionRecId;
        TaxRuntimeDocContextVersionRecId    taxRuntimeDocContextVersionRecId;

        TaxReportHrchyStructureDesign_IN structureDesign = TaxReportHrchyStructDesignFactory_IN::getStructureDesign(_taxReportHrchyStructDesignType);

        if (_taxReportHrchyStructDesignType == TaxReportHrchyStructDesignType_IN::GTE)
        {
            hierarchyBuf = TaxReportHierarchy_IN::initFromTaxSolutionScope();
            hierarchyVersionBuf = TaxReportHierarchyVersion_IN::initFromTaxSolutionScope();

            taxSolutionScopeRecId = hierarchyBuf.TaxSolutionScope;
            taxRuntimeDefContextVersionRecId = hierarchyVersionBuf.DefContextVersion;
            taxRuntimeDocContextVersionRecId = hierarchyVersionBuf.DocContextVersion;
        }

        select firstOnly TaxReportHierarchyVersion from hierarchySetup
            order by hierarchySetup.EffectiveDate desc
            where hierarchySetup.EffectiveDate <= _transDate
                && hierarchySetup.IsDraft == NoYes::No
            join hierarchyVersion
                where hierarchyVersion.RecId == hierarchySetup.TaxReportHierarchyVersion
                    && hierarchyVersion.DefContextVersion == taxRuntimeDefContextVersionRecId
                    && hierarchyVersion.DocContextVersion == taxRuntimeDocContextVersionRecId
            join hierarchy
                where hierarchy.RecId == hierarchyVersion.TaxReportHierarchy_IN
                    && hierarchy.RefClassId == structureDesign.parmRefClassId()
                    && hierarchy.TaxSolutionScope == taxSolutionScopeRecId;

        if (!hierarchyVersion && _taxReportHrchyStructDesignType == TaxReportHrchyStructDesignType_IN::GTE)
        {
            select firstOnly TaxReportHierarchyVersion from hierarchySetup
                order by hierarchySetup.EffectiveDate desc, hierarchyVersion.Version desc
                where hierarchySetup.EffectiveDate <= _transDate
                    && hierarchySetup.IsDraft == NoYes::No
                    && hierarchySetup.TaxReportSetOffHrchySetupHistory == 0
                join hierarchyVersion
                    where hierarchyVersion.RecId == hierarchySetup.TaxReportHierarchyVersion
                join hierarchy
                    where hierarchy.RecId == hierarchyVersion.TaxReportHierarchy_IN
                        && hierarchy.RefClassId == structureDesign.parmRefClassId()
                        && hierarchy.TaxSolutionScope == taxSolutionScopeRecId;
        }

        return hierarchyVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxReportHierarchyNodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the specified hierarchy version for the specified <c>TaxTrans_IN</c> record.
    /// </summary>
    /// <param name="_taxTransIN">
    /// The <c>TaxTrans_IN</c> record.
    /// </param>
    /// <param name="_hierarchyVersion">
    /// The hierarchy version to be applied for the tax transaction.
    /// </param>
    /// <returns>
    /// RecId of the <c>TaxReportHierarchyNode_IN</c> record, or zero if the
    /// <c>TaxTrans_IN</c> record cannot be matched with the hierarchy version.
    /// </returns>
    public static RefRecId findTaxReportHierarchyNodeId(
        TaxTrans_IN _taxTransIN,
        TaxReportHierarchyVersion_IN _hierarchyVersion = null)
    {
        TaxReportHrchyStructureDesign_IN    structureDesign;
        TaxReportHierarchyVersion_IN        setoffHierarchyVersion;
        TaxReportHierarchy_IN               setoffHierarchy;

        TaxReportHrchyStructDesignType_IN taxReportHrchyStructDesignType = _taxTransIN.TaxType
            == TaxType_IN::GST || (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && _taxTransIN.TaxType == TaxType_IN::VAT)
            ? TaxReportHrchyStructDesignType_IN::GTE : TaxReportHrchyStructDesignType_IN::Setoff;

        if (!_hierarchyVersion)
        {
            setoffHierarchyVersion = TaxReportSetoffHrchySetupHelper_IN::findSetOffHierarchyVersion(_taxTransIN.TransDate, taxReportHrchyStructDesignType);
        }
        else
        {
            setoffHierarchyVersion = _hierarchyVersion;
        }
        setoffHierarchy = TaxReportHierarchy_IN::find(setoffHierarchyVersion.TaxReportHierarchy_IN);
        structureDesign = TaxReportHrchyStructDesignFactory_IN::getStructureDesignById(setoffHierarchy.RefClassId);

        if (!TaxReportHrchyNodeMatchRule_IN::canMatchNode(_taxTransIN))
        return 0;

        return structureDesign.findTaxReportHrchyNodeForTrans(_taxTransIN, setoffHierarchyVersion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxReportPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the time frame by finding all sales tax settlement periods that
    /// include the specified effective date.
    /// </summary>
    /// <param name="_effectiveDate">
    /// The effective date.
    /// </param>
    /// <returns>
    /// A <c>TaxReportPeriod</c> record representing the time frame,
    /// 1) FromDate - start date of the time frame
    /// 2) ToDate - end date of the time frame
    /// 3) RecId - number of sales tax settlement periods included in the time frame
    /// </returns>
    public static TaxReportPeriod findTaxReportPeriods(date _effectiveDate)
    {
        TaxReportPeriod taxReportPeriod;

        select minOf(FromDate), maxOf(ToDate), count(RecId) from taxReportPeriod
            where taxReportPeriod.FromDate <= _effectiveDate
               && taxReportPeriod.ToDate   >= _effectiveDate;

        return taxReportPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSetoffHierarchyVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup form for selecting a setoff hierarchy version, which is,
    /// 1) The hierarchy version is active
    /// 2) The hierarchy is able to be used to setoff
    /// </summary>
    /// <param name="_formReferenceControl">
    /// Form control attached with the lookup form.
    /// </param>
    /// <returns>
    /// The <c>TaxReportHierarchyVersion_IN</c> record selected from the lookup form.
    /// </returns>
    public static Common lookupSetoffHierarchyVersion(FormReferenceControl _formReferenceControl)
    {
        Query lookupQuery;
        SysReferenceTableLookup sysTableLookup;
        QueryBuildDataSource dsHierarchyVersion;
        QueryBuildDataSource dsHierarchy;
        TaxReportHierarchy_IN taxReportHierarchyBuf;
        TaxReportHierarchyVersion_IN taxReportHierarchyVersionBuf;

        lookupQuery = new Query();

        dsHierarchyVersion = lookupQuery.addDataSource(tableNum(TaxReportHierarchyVersion_IN));


        if (TaxSolutionScopeIntegrationUtil::IsCompanyEnabled())
        {
            taxReportHierarchyBuf = TaxReportHierarchy_IN::initFromTaxSolutionScope();
            taxReportHierarchyVersionBuf = TaxReportHierarchyVersion_IN::initFromTaxSolutionScope();
        }

        dsHierarchy = dsHierarchyVersion.addDataSource(tableNum(TaxReportHierarchy_IN));
        dsHierarchy.joinMode(JoinMode::InnerJoin);
        dsHierarchy.relations(true);

        dsHierarchyVersion.addRange(fieldNum(TaxReportHierarchyVersion_IN, IsActive)).value(enum2str(NoYes::Yes));
        dsHierarchy.addRange(fieldNum(TaxReportHierarchy_IN, IsSetoffable)).value(enum2str(NoYes::Yes));
        dsHierarchy.addRange(fieldNum(TaxReportHierarchy_IN, TaxSolutionScope)).value(con2Str([0, taxReportHierarchyBuf.TaxSolutionScope]));

        sysTableLookup = SysReferenceTableLookup::newParameters(
        tableNum(TaxReportHierarchyVersion_IN), _formReferenceControl, true);

        sysTableLookup.addLookupfield(fieldNum(TaxReportHierarchyVersion_IN, TaxReportHierarchy_IN));
        sysTableLookup.addLookupfield(fieldNum(TaxReportHierarchyVersion_IN, Version));
        sysTableLookup.addLookupfield(fieldNum(TaxReportHierarchyVersion_IN, Description));
        sysTableLookup.parmQuery(lookupQuery);

        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxReportHierarchyNodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the specified hierarchy version for the specified <c>TaxTrans_IN</c> record.
    /// Throws exception when the <c>TaxTrans_IN</c> record cannot be matched with the hierarchy version.
    /// </summary>
    /// <param name="_taxTransIN">
    /// The <c>TaxTrans_IN</c> record.
    /// </param>
    /// <param name="_hierarchyVersion">
    /// The hierarchy version to be applied for the tax transaction.
    /// </param>
    /// <returns>
    /// RecId of the <c>TaxReportHierarchyNode_IN</c> record.
    /// </returns>
    public static RefRecId updateTaxReportHierarchyNodeId(
        TaxTrans_IN _taxTransIN,
        TaxReportHierarchyVersion_IN _hierarchyVersion = null)
    {
        TaxReportHrchyStructureDesign_IN        structureDesign;
        TaxReportHierarchyVersion_IN            setoffHierarchyVersion;
        TaxReportHierarchy_IN                   setoffHierarchy;
        RefRecId                                setoffHierarchyNodeId;
        TaxReportSetOffHierarchySetup_IN        setoffHierarchySetup;
        TaxReportHrchyNodeComboDisplayValue_IN  nodeDisplayValue;

        var log = TaxEventSource::Get_Log();
       
        TaxReportHrchyStructDesignType_IN taxReportHrchyStructDesignType = _taxTransIN.TaxType 
            == TaxType_IN::GST || (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && _taxTransIN.TaxType == TaxType_IN::VAT)
            ? TaxReportHrchyStructDesignType_IN::GTE : TaxReportHrchyStructDesignType_IN::Setoff;

        if (!_hierarchyVersion)
        {
            setoffHierarchyVersion = TaxReportSetoffHrchySetupHelper_IN::findSetOffHierarchyVersion(_taxTransIN.TransDate, taxReportHrchyStructDesignType);
        }
        else
        {
            setoffHierarchyVersion = _hierarchyVersion;
        }

        setoffHierarchy = TaxReportHierarchy_IN::find(setoffHierarchyVersion.TaxReportHierarchy_IN);
        structureDesign = TaxReportHrchyStructDesignFactory_IN::getStructureDesign(taxReportHrchyStructDesignType, setoffHierarchy.Name);
        
        if (!TaxReportHrchyNodeMatchRule_IN::canMatchNode(_taxTransIN))
            return 0;

        setoffHierarchyNodeId = structureDesign.findTaxReportHrchyNodeForTrans(_taxTransIN);
        if (setoffHierarchyNodeId)
        {
            _taxTransIN.TaxReportHierarchyNode_IN = setoffHierarchyNodeId;
        }
        else
        {
            nodeDisplayValue = structureDesign.getDisplayCombination(_taxTransIN);
            info(nodeDisplayValue);

            select firstonly RecId from setoffHierarchySetup
                join RecId from setoffHierarchyVersion
                    where setoffHierarchyVersion.RecId == setoffHierarchySetup.TaxReportHierarchyVersion
                        && setoffHierarchySetup.IsDraft == NoYes::No;

            log.SalesTaxHierarchyProcessFailed(enum2Str(_taxTransIN.TaxType), _taxTransIN.TaxComponentTable, nodeDisplayValue);

            if(!setoffHierarchySetup.RecId)
            {
                throw error("@ErrorInfoForSetoffHrchySetup:WithoutActiveSetoffHrchyProfile");
            }

            throw error(strFmt(
                "@ErrorInfoForSetoffHrchySetup:MisMatchedSetoffHrchy",
                setoffHierarchy.Name,
                setoffHierarchyVersion.Version));
        }

        return setoffHierarchyNodeId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>