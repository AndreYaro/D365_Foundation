<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostTransCostList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventCostTransCostList</c> class represents a more specialized form of the
/// <c>RecordSortedList</c> class that holds the <c>InventCostTransVariance</c> records, which
/// represent the cost of a transaction.
/// </summary>
/// <remarks>
/// This class is used by the <c>InventCost</c> framework to handle the adding of costs to a
/// transaction. It provides some functions to add and summarize <c>InventCostTransVariance</c> records
/// into a <c>RecordSortedList</c> object.
/// </remarks>

class InventCostTransCostList
{
    // This class is representing a more specialized form of a recordSortedList.
    // it is representing the cost that can either be actual or estimated.
    // For storing these cost, the inventCostTransVariance table is used as a carrier.
    // So whenever in this class, a inventCostTransVariance record is refered,
    // this record does not store a variance, it will store the costs.
    RecordSortedList               costList;
    /// <summary>
    ///    Adds an <c>InventCostTransVariance</c> record to the <c>RecordSortedList</c> object.
    /// </summary>
    /// <param name="_inventCostTransVariance">
    ///    The <c>InventCostTransVariance</c> record that will be added.
    /// </param>
    /// <remarks>
    ///    When the record that needs to be added is already found in the list, the <c>costAmount</c> field
    ///    will be summed.
    /// </remarks>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    public void add(InventCostTransVariance  _inventCostTransVariance)
    {
        InventCostTransVariance     inventCostTransVariance;

        // First, try to get the record that should be added out of the costTransList
        inventCostTransVariance.initFromInventCostTransVariance(_inventCostTransVariance);

        this.find(inventCostTransVariance);

        // If the record was found, the qty fields should have been set, so now add the qty
        // <GEERU>
        inventCostTransVariance.addCostAmount(_inventCostTransVariance.CostAmount, _inventCostTransVariance.CostAmountSecCur_RU);
        // </GEERU>

        // Due to the fact that the cost amount has be come zero, check this field
        // <GEERU>
        if (inventCostTransVariance.CostAmount != 0 || inventCostTransVariance.CostAmountSecCur_RU != 0)
        // </GEERU>
        {
            // (Re)Insert the record to the list
            this.insert(inventCostTransVariance);
        }
        else
        {
            // Record is or has become zero ==> remove it from the list
            this.delete(inventCostTransVariance);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFromVarianceList</Name>
				<Source><![CDATA[
        public void addFromVarianceList(InventCostTransVarianceList _varianceList,
                                    Qty                         _qty)
    {
        InventCostTransVariance     costTransVariance;

        // Iterate over variance list
        if (_varianceList && _varianceList.length() != 0)
        {
            boolean found = _varianceList.first(costTransVariance);
            while (found)
            {
                // Set costamount regarding qty that is currently processed
                costTransVariance.CostAmount = costTransVariance.CostAmount * _qty;
                // <GEERU>
                costTransVariance.CostAmountSecCur_RU = costTransVariance.CostAmountSecCur_RU * _qty;
                // </GEERU>

                // add it to the cost list
                this.add(costTransVariance);

                found = _varianceList.next(costTransVariance);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes an <c>InventCostTransVariance</c> record from the <c>RecordSortedList</c> object.
    /// </summary>
    /// <param name="_inventCostTransVariance">
    ///    The <c>InventCostTransVariance</c> record that is to be deleted.
    /// </param>
    /// <returns>
    ///    A Boolean value which is the return value from the <c>del</c> method of the <c>RecordSortedList</c>
    ///    class.
    /// </returns>
    /// <remarks>
    ///    The <c>del</c> method of the <c>RecordSortedList</c> class will be called to remove the given
    ///    record from the <c>RecordSortedList</c> object
    /// </remarks>

    public boolean delete(InventCostTransVariance _inventCostTransVariance)
    {
        return costList.del(_inventCostTransVariance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds an <c>InventCostTransVariance</c> record in the <c>RecordSortedList</c> object.
    /// </summary>
    /// <param name="_inventCostTransVariance">
    ///    The <c>InventCostTransVariance</c> record that is to be found.
    /// </param>
    /// <returns>
    ///    A Boolean value which is the return value of the <c>find</c> method of the <c>RecordSortedList</c>
    ///    class.
    /// </returns>
    /// <remarks>
    ///    The <c>find</c> method of the <c>recordSortedList</c> class is called to find the given record in
    ///    the <c>RecordSortedList</c> object.
    /// </remarks>

    public boolean find(InventCostTransVariance _inventCostTransVariance)
    {
        return costList.find(_inventCostTransVariance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the cursor for the <c>RecordSortedList</c> object to the first position.
    /// </summary>
    /// <param name="_inventCostTransVariance">
    ///    An instance of the <c>InventCostTransVariance</c> table where the first record of the cost list
    ///    should be stored.
    /// </param>
    /// <returns>
    ///    A Boolean value which is the return value of the <c>first</c> method of the <c>recordSortedList</c>
    ///    class.
    /// </returns>
    /// <remarks>
    ///    The <c>first</c> method of the <c>recordSortedList</c> class is called to find the first record in
    ///    the <c>RecordSortedList</c> object.
    /// </remarks>

    public boolean first(InventCostTransVariance _inventCostTransVariance)
    {
        return costList.first(_inventCostTransVariance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>RecordSortedList</c> object.
    /// </summary>
    /// <remarks>
    ///    The
    ///    <c>
    ///       RecordSortedList
    ///    </c>
    ///     object is initialized using the following sort order:
    ///    <list type="number">
    ///       <item>
    ///          <description>Level</description>
    ///       </item>
    ///       <item>
    ///          <description>CostGroupId </description>
    ///       </item>
    ///       <item>
    ///          <description>Split</description>
    ///       </item>
    ///       <item>
    ///          <description>VarianceType</description>
    ///       </item>
    ///       <item>
    ///          <description>Dimension </description>
    ///       </item>
    ///    </list>
    ///     This is the default sort order for a
    ///    <c>
    ///       RecordSortedList
    ///    </c>
    ///     object in the
    ///    <c>
    ///       inventCost
    ///    </c>
    ///     framework. The same sort order is used also in the
    ///    <c>
    ///       inventCostTransVarianceList
    ///    </c>
    ///     class.
    /// </remarks>

    protected void init()
    {
        costList = new RecordSortedList(tableNum(InventCostTransVariance));
        costList.sortOrder(fieldNum(InventCostTransVariance, Level),
                           fieldNum(InventCostTransVariance, CostGroupId),
                           fieldNum(InventCostTransVariance, Split),
                           fieldNum(InventCostTransVariance, VarianceType),
                           fieldNum(InventCostTransVariance, DefaultDimension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts an <c>InventCostTransVariance</c> record into the <c>RecordSortedList</c> object.
    /// </summary>
    /// <param name="_inventCostTransVariance">
    ///    The <c>InventCostTransVariance</c> record that is to be inserted.
    /// </param>
    /// <param name="_updateIfExist">
    ///    A Boolean parameter that is passed to the <c>ins</c> method of the <c>RecordSortedList</c> class;
    ///    optional.
    /// </param>
    /// <returns>
    ///    A Boolean value that is the return value for the <c>ins</c> method of the <c>RecordSortedList</c>
    ///    class.
    /// </returns>
    /// <remarks>
    ///    The <c>ins</c> method of the <c>RecordSortedList</c> class is called to insert the record in the
    ///    <c>RecordSortedList</c> object.
    /// </remarks>

    public boolean insert(InventCostTransVariance _inventCostTransVariance,
                          boolean                 _updateIfExist = true)
    {
        return costList.ins(_inventCostTransVariance, _updateIfExist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>length</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number of records in the <c>RecordSortedList</c> object.
    /// </summary>
    /// <returns>
    ///    An integer that is the return value of the <c>len</c> method of the <c>recordSortedList</c> class.
    /// </returns>
    /// <remarks>
    ///    The <c>len</c> method of the <c>RecordSortedList</c> class is called to get the number of records
    ///    from the <c>RecordSortedList</c> object.
    /// </remarks>

    public int length()
    {
        return costList.len();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventCostTransCostList</c> class.
    /// </summary>
    /// <remarks>
    ///    This method is protected to ensure that the <c>construct</c> method is used.
    /// </remarks>

    protected void new()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the cursor for the <c>RecordSortedList</c> object to the next position.
    /// </summary>
    /// <param name="_inventCostTransVariance">
    ///    An instance of the <c>InventCostTransVariance</c> table where the next record of the cost list is
    ///    stored.
    /// </param>
    /// <returns>
    ///    A Boolean value which is the return value for the <c>next</c> method of the <c>recordSortedList</c>
    ///    class.
    /// </returns>
    /// <remarks>
    ///    The <c>next</c> method of the <c>RecordSortedList</c> class is called to find the next record in
    ///    the <c>RecordSortedList</c> object.
    /// </remarks>

    public boolean next(InventCostTransVariance _inventCostTransVariance)
    {
        return costList.next(_inventCostTransVariance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Summarizes a given cost list to the <c>RecordSortedList</c> object.
    /// </summary>
    /// <param name="_sourceList">
    ///    The <c>InventCostTransVarianceList</c> record that must be added.
    /// </param>
    /// <param name="_qty">
    ///    The quantity that will be used to multiply the cost amount of the source list; optional.
    /// </param>
    /// <remarks>
    ///    Each record that is stored in the source list is added to the cost list by calling the <c>add</c>
    ///    method.
    /// </remarks>

    public void summarize(InventCostTransCostList _sourceList,
                          Qty                     _qty = 1)
    {
        InventCostTransVariance  sourceVariance;
        boolean                  found;

        if (_sourceList && _sourceList.length() != 0)
        {
            found = _sourceList.first(sourceVariance);
            while (found)
            {
                // Calculate new cost amount
                sourceVariance.CostAmount = sourceVariance.CostAmount * _qty;

                // <GEERU>
                sourceVariance.CostAmountSecCur_RU = sourceVariance.CostAmountSecCur_RU * _qty;
                // </GEERU>

                // Add this record to the costList
                this.add(sourceVariance);

                found = _sourceList.next(sourceVariance);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventCostTransCostList construct()
    {
        return new InventCostTransCostList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newActualCostList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a recordSortedList that contains the actual cost broken down on cost groups for an inventory transaction.
    /// </summary>
    /// <param name="_inventTable">
    /// An InventTable buffer used to initialize the cost list.
    /// </param>
    /// <param name="_inventTransOrigin">
    /// An InventTransOrigin buffer for which the actual cost is calculated.
    /// </param>
    /// <param name="_inventTrans">
    /// An InventTrans buffer for which the actual cost is calculated.
    /// </param>
    /// <param name="_varianceType">
    /// An InventTransVarianceType used to initialize the cost list.
    /// </param>
    /// <param name="_dimension">
    /// An Dimension used to initialize the cost list.
    /// </param>
    /// <param name="_inventItemPrice">
    /// An InventItemPrice used to initialize the cost list; optional.
    /// The parameter must be set if transaction can be financially updated in the same transaction scope as the physical update.
    /// </param>
    /// <param name="_qty">
    /// The quantity used to initialize the cost list.
    /// </param>
    /// <returns>
    /// Returns a recordSortedList containing the actual cost broken down on cost groups for the given quantity.
    /// </returns>

    public static InventCostTransCostList newActualCostList(
        InventTable             _inventTable,
        InventTransOrigin       _inventTransOrigin,
        InventTrans             _inventTrans,
        InventCostVarianceType  _varianceType,
        DimensionDefault        _dimension,
        InventItemPrice         _inventItemPrice,
        Qty                     _qty)
    {
        InventCostTrans             costTrans;
        InventCostTransVariance     variance;
        InventCostTransVarianceList varianceList;
        InventCostTransCostList     stdCostList;
        InventCostTransCostList     costList = InventCostTransCostList::construct();
        Qty                         currVarianceQty;

        DimensionDefault            dimension;
        boolean                     foundPhysicalTrans = false;

        // Find the transaction from the physical update

        costTrans = InventCostTrans::initInventCostTrans(InventCostTransState::Physical,
                                                         _inventItemPrice,
                                                         _inventTable,
                                                         _inventTrans.VoucherPhysical,
                                                         _inventTrans.DatePhysical,
                                                         dimension,
                                                         _inventTrans,
                                                         _inventTrans.inventDim(),
                                                         _inventTransOrigin);

        costTrans = InventCostTrans::findCostTrans(costTrans);

        if (!_inventTransOrigin.isPhysicalOffsetInventory())
        {
            if (!costTrans.allQtyFieldsZero())
            {
                foundPhysicalTrans = true;
                stdCostList = InventCostTransCostList::newStdCostList(costTrans.ItemPriceRefRecId, _varianceType, _dimension);
                // Init the est cost list from the std cost at time of physical
                costList = InventCostTransCostList::newFromList(stdCostList, _qty);

                // Now check if there has been a variace
                if (costTrans.VarianceQty)
                {
                    // Variance was created ==> retrieve it either form Memory of from Database
                    varianceList = InventCostTransVarianceList::newFromInventCostTrans(costTrans);

                    // Add the physical variance now as poart of the est cost list.
                    // Important: The proportional factor for this inventTrans record has to be determinded
                    currVarianceQty = _qty / (costTrans.VarianceQty ? costTrans.VarianceQty : 1);
                    costList.addFromVarianceList(varianceList, currVarianceQty);
                }
            }
            else
            {
                if (_inventTrans.StatusReceipt == StatusReceipt::Received)
                {
                    if (_inventTrans.DatePhysical < InventStdCostConvItem::itemConversionDate(_inventTrans.ItemId) && _inventTrans.Qty != 0)
                    {
                        foundPhysicalTrans = true;
                        // No break down - transaction created with previous model.
                        variance.initInventCostTransVariance(_inventTable.costGroup(), _varianceType, _dimension, ((_inventTrans.CostAmountPhysical / _inventTrans.Qty) *  _qty));
                        costList.insert(variance, true);
                    }
                }
            }
        }

        costTrans = InventCostTrans::initInventCostTrans(InventCostTransState::Financial,
                                                         _inventItemPrice,
                                                         _inventTable,
                                                         _inventTrans.Voucher,
                                                         _inventTrans.DateFinancial,
                                                         dimension,
                                                         _inventTrans,
                                                         _inventTrans.inventDim(),
                                                         _inventTransOrigin);

        costTrans = InventCostTrans::findCostTrans(costTrans);

        if (!costTrans.allQtyFieldsZero())
        {
            if (!foundPhysicalTrans)
            {
                stdCostList = InventCostTransCostList::newStdCostList(costTrans.ItemPriceRefRecId, _varianceType, _dimension);
                // Init the est cost list from the std cost at time of
                costList = InventCostTransCostList::newFromList(stdCostList, _qty);
            }

            // Now check if there has been a variace
            if (costTrans.VarianceQty)
            {
                // Variance was created ==> retrieve it either form Memory of from Database
                varianceList = InventCostTransVarianceList::newFromInventCostTrans(costTrans);

                // Add the physical variance now as poart of the est cost list.
                // Important: The proportional factor for this inventTrans record has to be determinded
                currVarianceQty = _qty / (costTrans.VarianceQty ? costTrans.VarianceQty : 1);
                costList.addFromVarianceList(varianceList, currVarianceQty);
            }
        }
        else
        {
            if (_inventTrans.DateFinancial < InventStdCostConvItem::itemConversionDate(_inventTrans.ItemId) && _inventTrans.Qty != 0)
            {
                // No break down - transaction created with previous model.
                // <GEERU>
                variance.initInventCostTransVariance(_inventTable.costGroup(),
                                                     _varianceType,
                                                     _dimension,
                                                     ((_inventTrans.CostAmountPhysical          / _inventTrans.Qty) *  _qty),
                                                     ((_inventTrans.CostAmountSecCurPhysical_RU / _inventTrans.Qty) *  _qty));
                // </GEERU>
                costList.insert(variance, true);
            }
            else
            {
                throw error(strFmt("@SYS19306",funcName()));
            }
        }
        return costList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromList</Name>
				<Source><![CDATA[
        public static InventCostTransCostList newFromList(InventCostTransCostList  _fromList,
                                                      Qty                      _qty)
    {
        InventCostTransVariance     costTransVariance;

        // Assign list to get same sort order
        InventCostTransCostList inventCostTransCostList = InventCostTransCostList::construct();

        // Step through from list
        if (_fromList)
        {
            boolean found = _fromList.first(costTransVariance);
            while (found)
            {
                // Set new cost amount
                costTransVariance.CostAmount = costTransVariance.CostAmount * _qty;
                // <GEERU>
                costTransVariance.CostAmountSecCur_RU = costTransVariance.CostAmountSecCur_RU * _qty;
                // </GEERU>
                // Update in list
                inventCostTransCostList.insert(costTransVariance, true);
                found = _fromList.next(costTransVariance);
            }
        }

        return inventCostTransCostList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPlannedCostList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventCostTransCostList</c> class that contains the planned
    /// cost broken down on cost groups for an inventory transaction.
    /// </summary>
    /// <param name="_inventTable">
    /// An <c>InventTable</c> buffer used to initialize the cost list.
    /// </param>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> buffer for which the planned cost is calculated.
    /// </param>
    /// <param name="_varianceType">
    /// An <c>InventTransVarianceType</c> used to initialize the cost list.
    /// </param>
    /// <param name="_dimension">
    /// The dimension that used to initialize the cost list.
    /// </param>
    /// <param name="_qty">
    /// The quantity that is used to initialize the cost list.
    /// </param>
    /// <param name="_stdCostList">
    /// An InventCostTransCostList that contains the current standard cost.
    /// </param>
    /// <param name="_inventItemPrice">
    /// An <c>InventItemPrice</c> used to initialize the cost list; optional.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventCostTransCostList</c> class that contains the planned cost broken
    /// down on cost groups for the given quantity.
    /// </returns>

    public static InventCostTransCostList newPlannedCostList(
        InventTable             _inventTable,
        InventTrans             _inventTrans,
        InventCostVarianceType  _varianceType,
        DimensionDefault        _dimension,
        Qty                     _qty,
        InventCostTransCostList _stdCostList,
        InventItemPrice         _inventItemPrice = null) // Must be set if transaction can be financially updated in the same transaction scope as the physical update

    {
        InventCostTrans                 costTrans;
        InventCostTransVarianceList     varianceList;
        InventCostTransCostList         costList = InventCostTransCostList::construct();
        Qty                             currVarianceQty;

        DimensionDefault                dimension;
        InventCostTransVariance         variance;

        // Plan = Std + Phys
        CostParameters costParameters = CostParameters::find();
        if (InventCostDimensionDefaultingSourceFeature::instance().isEnabled()
            && costParameters.DimensionDefaultingSource == DimensionDefaultingSource::Posting)
        {
            costTrans = InventCostTrans::initInventCostTrans(InventCostTransState::Physical,
                                                                   _inventItemPrice,
                                                                   _inventTable,
                                                                   _inventTrans.VoucherPhysical,
                                                                   _inventTrans.DatePhysical,
                                                                   _dimension,
                                                                   _inventTrans,
                                                                   _inventTrans.inventDim());
        }
        else
        {
            costTrans = InventCostTrans::initInventCostTrans(InventCostTransState::Physical,
                                                                   _inventItemPrice,
                                                                   _inventTable,
                                                                   _inventTrans.VoucherPhysical,
                                                                   _inventTrans.DatePhysical,
                                                                   dimension,
                                                                   _inventTrans,
                                                                   _inventTrans.inventDim());
        }
        container tmpCostTransValues = [costTrans.TransDate, costTrans.Voucher, costTrans.ItemPriceRefRecId, costTrans.FinancialInventDimId, costTrans.InventTransId];

        costTrans = InventCostTrans::findCostTrans(costTrans);

        if (!costTrans.allQtyFieldsZero())
        {
            // Init the est cost list from the std cost
            if (_inventTrans.inventTransOrigin().isPhysicalOffsetInventory())
            {
                // At the current standard cost because the offset is revaluated.
                costList = InventCostTransCostList::newFromList(_stdCostList, _qty);
            }
            else
            {
                // At the standard cost at the time of the physical update because the offset isn't revaluated.
                costList = InventCostTransCostList::newFromList(InventCostTransCostList::newStdCostList(costTrans.ItemPriceRefRecId, _varianceType, _dimension), _qty);
            }

            // Now check if there as been a variace
            if (costTrans.VarianceQty != 0)
            {
                // Variance was created ==> retrieve it either form Memory of from Database
                varianceList = InventCostTransVarianceList::newFromInventCostTrans(costTrans);

                // Add the physical variance now as poart of the est cost list.
                // Important: The proportional factor for this inventTrans record has to be determinded
                currVarianceQty = _qty / (costTrans.VarianceQty ? costTrans.VarianceQty : 1);
                costList.addFromVarianceList(varianceList, currVarianceQty);
            }
        }
        else
        {
            if
            // by products may not have a record of InventCostTrans associated
            (   _inventTable.isByProduct() ||
                (_inventTrans.PackingSlipReturned == NoYes::Yes && _inventTrans.InventTransOrigin().ReferenceCategory == InventTransType::QuarantineOrder) ||
                (_inventTrans.DatePhysical < InventStdCostConvItem::itemConversionDate(_inventTrans.ItemId) && _inventTrans.Qty != 0)
            )
            {
                if (_inventTrans.inventTransOrigin().isPhysicalOffsetInventory())
                {
                    // At the current standard cost because the offset is revaluated.
                    costList = InventCostTransCostList::newFromList(_stdCostList, _qty);
                }
                else
                {
                    // Fallback to the actual cost
                    // <GEERU>
                    variance.initInventCostTransVariance(_inventTable.costGroup(),
                                                         _varianceType,
                                                         _dimension,
                                                         ((_inventTrans.CostAmountPhysical          / _inventTrans.Qty) *  _qty),
                                                         ((_inventTrans.CostAmountSecCurPhysical_RU / _inventTrans.Qty) *  _qty));
                    // </GEERU>
                    costList.insert(variance, true);
                }
            }
            else
            {
                if (!costTrans.RecId)
                {
                    warning(strFmt("@SCM:InventCostTransMissingForInvoiceWarningMessage", conPeek(tmpCostTransValues, 1), conPeek(tmpCostTransValues, 2), conPeek(tmpCostTransValues, 3), conPeek(tmpCostTransValues, 4), conPeek(tmpCostTransValues, 5)));
                }
                else
                {
                    warning("@SCM:InventCostTransAllQtyFieldZeroWarningMessage");
                }
                throw error(strFmt("@SYS19306",funcName()));
            }
        }

        return costList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReturnCostList</Name>
				<Source><![CDATA[
/// <summary>
    ///    Initializes a <c>recordSortedList</c> list that contains the return cost broken down on cost groups.
    /// </summary>
    /// <param name="_inventTable">
    ///    An <c>InventTable</c> buffer used to initialize the cost list.
    /// </param>
    /// <param name="_returnTransOriginId">
    ///    The <c>InventTransOriginId</c> record that identifies the return issue.
    /// </param>
    /// <param name="_toTransOriginId">
    ///    The <c>InventTransOriginId</c> record that identifies the return reciept.
    /// </param>
    /// <param name="_varianceType">
    ///    An <c>InventTransVarianceType</c> record used to initialize the cost list.
    /// </param>
    /// <param name="_dimension">
    ///    The dimension used to initialize the cost list.
    /// </param>
    /// <param name="_inventItemPrice">
    ///    An <c>InventItemPrice</c> record used to initialize the cost list; optional.
    /// </param>
    /// <param name="_qty">
    ///    The quantity used to initialize the cost list.
    /// </param>
    /// <returns>
    ///    The method returns a <c>recordSortedList</c> list that contains the returned cost broken down on
    ///    cost groups.
    /// </returns>

    public static InventCostTransCostList newReturnCostList(
        InventTable             _inventTable,
        InventTransOriginId     _returnTransOriginId,
        InventTransOriginId     _toTransOriginId,
        InventCostVarianceType  _varianceType,
        DimensionDefault        _dimension,
        InventItemPrice         _inventItemPrice,
        Qty                     _qty)
    {
        InventCostTransCostList     costList;
        InventTransOrigin           inventTransOrigin;
        InventTrans                 inventTrans;
        Qty                         totalQty;
        InventCostTransVariance     variance;
        boolean                     found;
        str                         cacheKey;
        str                         cacheScope;
        str                         cacheScopeQty;

        [cacheScope, cacheScopeQty] = InventCostTransCostList::getCacheScope();
        cacheKey = int642str(_inventTable.RecId)                    + '#' +
                   int642str(_returnTransOriginId)                  + '#' +
                   int642str(_toTransOriginId)                      + '#' +
                   enum2str(_varianceType)                          + '#' +
                   int642str(_dimension)                            + '#' +
                   int642str(_inventItemPrice.RecId);
        costList = SysTransactionScopeCache::get(cacheScope, cacheKey, null);
        totalQty = SysTransactionScopeCache::get(cacheScopeQty, cacheKey, 0);

        if (!costList)
        {
            costList = InventCostTransCostList::construct();
        // A weighted average principle is applied
        // First of all, get all the costTrans records that are returned
        while select inventTransOrigin
            where inventTransOrigin.RecId             == _returnTransOriginId
            join inventTrans
            where inventTrans.InventTransOrigin       == inventTransOrigin.RecId
               && inventTrans.StatusIssue             == StatusIssue::Sold
               && inventTrans.StatusReceipt           == StatusReceipt::None
               && inventTrans.PackingSlipReturned     == NoYes::No
               && inventTrans.ReturnInventTransOrigin == _toTransOriginId
        {
            totalQty += inventTrans.Qty;
            costList.summarize(InventCostTransCostList::newActualCostList(
                                _inventTable,
                                inventTransOrigin,
                                inventTrans,
                                _varianceType,
                                _dimension,
                                _inventItemPrice,
                                inventTrans.Qty));
        }

            SysTransactionScopeCache::set(cacheScope, cacheKey, costList);
            SysTransactionScopeCache::set(cacheScopeQty, cacheKey, totalQty);
        }

        // We need to operate on a copy because the records get removed from this list later on and the cached instance has to stay intact.
        costList = InventCostTransCostList::newFromList(costList, 1);

        if (costList.length())
        {
            // OK, I have filled the list, now calc the average
            found = costList.first(variance);
            while (found)
            {
                // <GEERU>
                variance.CostAmount          = (variance.CostAmount          / (totalQty ? totalQty : 1)) * _qty;
                variance.CostAmountSecCur_RU = (variance.CostAmountSecCur_RU / (totalQty ? totalQty : 1)) * _qty;
                // </GEERU>

                costList.insert(variance, true);
                found = costList.next(variance);
            }
        }
        return costList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStdCostList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>RecordSortedList</c> object that contains the std cost broken down on cost groups.
    /// </summary>
    /// <param name="_inventItemPriceRefRecId">
    ///    The record ID that should be used to find the <c>InventItemCostGroupRollup</c> records.
    /// </param>
    /// <param name="_varianceType">
    ///    The variance type for which the list should be initialized.
    /// </param>
    /// <param name="_dimension">
    ///    The dimension for which the list should be initialized.
    /// </param>
    /// <returns>
    ///    A <c>RecordSortedList</c> object that contains the std cost broken down on cost groups.
    /// </returns>
    /// <remarks>
    ///    For better performance the <c>InventItemPrice</c> record and a cost amount can be given.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    No cost group can be found in the <c>InventItemCostGroupRollup</c> table or in the
    ///    <c>InventTable</c>. The process has to be stopped.
    /// </exception>

    public static InventCostTransCostList newStdCostList(InventItemPriceRefRecId _inventItemPriceRefRecId,
                                                         InventCostVarianceType  _varianceType,
                                                         DimensionDefault        _dimension)
    {
        InventItemCostGroupRollup   itemCostGroupRollup;
        InventCostTransVariance     costTransVariance;
        InventCostTransCostList     inventCostTransCostList;

        // Initialize the list
        inventCostTransCostList = InventCostTransCostList::construct();

        // Several posibilities which values have to be filled in
        // 1.) A cost break down has been specied in the inventItemCostGroupPrice
        while select * from itemCostGroupRollup
            order by CostLevel
            where itemCostGroupRollup.InventItemPriceRefRecId == _inventItemPriceRefRecId
        {
            // Initialize variance
            costTransVariance.clear();
            costTransVariance.initFromInventItemCostGroupRollup(itemCostGroupRollup);
            costTransVariance.DefaultDimension    = _dimension;
            costTransVariance.VarianceType = _varianceType;

            costTransVariance.Split = itemCostGroupRollup.Split;

            costTransVariance.CostAmount += itemCostGroupRollup.CostAmountStd / (itemCostGroupRollup.Qty ? itemCostGroupRollup.Qty : 1);
            // <GEERU>
            costTransVariance.CostAmountSecCur_RU += itemCostGroupRollup.CostAmountSecCur_RU / (itemCostGroupRollup.Qty ? itemCostGroupRollup.Qty : 1);
            // </GEERU>

            inventCostTransCostList.insert(costTransVariance);
        }

        // At least one costList entry must exist
        if (inventCostTransCostList.length() == 0)
        {
            throw error ("@SYS112593");
        }

        return inventCostTransCostList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStdCostList</Name>
				<Source><![CDATA[
    public static boolean checkStdCostList(InventItemPriceRefRecId _inventItemPriceRefRecId)
    {
        InventItemCostGroupRollup   itemCostGroupRollup;

        select firstOnly RecId from itemCostGroupRollup
            where itemCostGroupRollup.InventItemPriceRefRecId == _inventItemPriceRefRecId;
    
        if (!itemCostGroupRollup.RecId)
        {
            return checkFailed("@SYS112593");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clean up cache of InventCostTransCostList.
    /// </summary>
    /// <remarks>
    /// This method should be called whenever InventTrans.ReturnInventTransOrigin field is updated.
    /// </remarks>
    public static void flushCache()
    {
        str cacheScope;
        str cacheScopeQty;

        [cacheScope, cacheScopeQty] = InventCostTransCostList::getCacheScope();

        SysTransactionScopeCache::clear(cacheScope);
        SysTransactionScopeCache::clear(cachescopeQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheScope</Name>
				<Source><![CDATA[
    private static container getCacheScope()
    {
        return  [classStr(InventCostTransCostList), classStr(InventCostTransCostList) + '#' + extendedTypeStr(Qty)];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>