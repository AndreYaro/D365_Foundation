<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximEPCGUpd_Merge_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim EPCG update merge class.
/// </summary>
class EximEPCGUpd_Merge_IN extends EximEPCGUpdate_IN implements BatchRetryable
{
    EximEPCGId_IN                      schemeId;
    TmpEximEPCGSchemeMergeReference_IN epcgSchemeMergeReference;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>epcgSchemeMergeRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// The epcg scheme merge reference.
    /// </summary>
    /// <param name="_epcgSchemeMergeRef">
    /// The epcg scheme merge reference.
    /// </param>
    /// <returns>
    /// The instance of the <c>TmpEximEPCGSchemeMergeReference_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TmpEximEPCGSchemeMergeReference_IN epcgSchemeMergeRef(TmpEximEPCGSchemeMergeReference_IN _epcgSchemeMergeRef = null)
    {
        if (!prmisdefault(_epcgSchemeMergeRef))
        {
            epcgSchemeMergeReference.setTmpData(_epcgSchemeMergeRef);
        }

        return epcgSchemeMergeReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEPCGMergeReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts EPCG scheme merge reference.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertEPCGMergeReference()
    {
        EximEPCGSchemeTable_IN epcgSchemeTable;
        RefRecId               epcgSchemeId;
        Counter                iCount;
        EximEPCGSchemeLine_IN  epcgSchemeLine;

        ttsbegin;
        for (iCount = 1; iCount <= conlen(selectedEpcgIds); iCount++)
        {
            epcgSchemeId = conpeek(selectedEpcgIds, iCount);

            select firstonly LicenseNum, IssueDateTime
                from epcgSchemeTable
                    where epcgSchemeTable.RecId == epcgSchemeId
                        join LicenseStatus
                            from epcgSchemeLine
                                where epcgSchemeLine.SchemeTableRecId == epcgSchemeTable.RecId;

            if (epcgSchemeTable)
            {
                epcgSchemeMergeReference.clear();
                epcgSchemeMergeReference.LicenseNum    = epcgSchemeTable.LicenseNum;
                epcgSchemeMergeReference.IssueDateTime = epcgSchemeTable.IssueDateTime;
                epcgSchemeMergeReference.LicenseStatus = epcgSchemeLine.LicenseStatus;
                epcgSchemeMergeReference.insert();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExportObligationDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts export obligation details.
    /// </summary>
    /// <param name="_eximEPCGExportObligationPeriod">
    /// The exprot obligation period of the exim EPCG scheme.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertExportObligationDetails(EximEPCGExportObligationPeriod_IN _eximEPCGExportObligationPeriod)
    {
        EximEPCGExportObligationDetails_IN eximEPCGExportObligationDetails;
        RecordInsertList                   recordInsertList = new RecordInsertList(tablenum(EximEPCGExportObligationDetails_IN));
        ToDateTime                         toDateTime;
        EximEPCGSchemeApprove_IN           epcgSchemeApprove;
        EximEPCGSchemeTable_IN             epcgSchemeTable;

        ttsbegin;

        select SchemeTableRecId
            from epcgSchemeApprove
                where epcgSchemeApprove.RecId == _eximEPCGExportObligationPeriod.SchemeApproveRecId
                join RecId
                    from epcgSchemeTable
                        where epcgSchemeTable.RecId == epcgSchemeApprove.SchemeTableRecId;

        eximEPCGExportObligationDetails.FromDateTime = _eximEPCGExportObligationPeriod.FromDateTime;
        while (eximEPCGExportObligationDetails.FromDateTime <= _eximEPCGExportObligationPeriod.ToDateTime)
        {
            if (eximEPCGExportObligationDetails.FromDateTime != _eximEPCGExportObligationPeriod.ToDateTime)
            {
                toDateTime = DateTimeUtil::newDateTime(endmth(DateTimeUtil::date(
                                                                                DateTimeUtil::addSeconds(EximEPCGUpdate_IN::extendDateTime(DateTimeUtil::applyTimeZoneOffset(eximEPCGExportObligationDetails.FromDateTime,
                                                                                DateTimeUtil::getUserPreferredTimeZone()), 1, PaymentPer_IN::Years), -1))),0);

                toDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::addSeconds(DateTimeUtil::addDays(toDateTime, 1), -1), DateTimeUtil::getUserPreferredTimeZone());
                eximEPCGExportObligationDetails.ToDateTime   = toDateTime;
            }
            else
            {
                eximEPCGExportObligationDetails.ToDateTime = _eximEPCGExportObligationPeriod.ToDateTime;
            }
            eximEPCGExportObligationDetails.ExportObligationPeriodRecId = _eximEPCGExportObligationPeriod.RecId;
            eximEPCGExportObligationDetails.Block                       = _eximEPCGExportObligationPeriod.Block;
            eximEPCGExportObligationDetails.SchemeTableRecId            = epcgSchemeTable.RecId;

            recordInsertList.add(eximEPCGExportObligationDetails);
            eximEPCGExportObligationDetails.FromDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::addSeconds(
                                                                    DateTimeUtil::applyTimeZoneOffset(eximEPCGExportObligationDetails.ToDateTime, DateTimeUtil::getUserPreferredTimeZone()), 1), DateTimeUtil::getUserPreferredTimeZone());
        }
        recordInsertList.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExportObligationPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the export obligation period.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertExportObligationPeriod()
    {
        EximEPCGExportObligationPeriod_IN epcgExportObligationPeriod;
        EximEPCGSchemeApprove_IN          epcgSchemeApproval;

        epcgSchemeApproval = EximEPCGSchemeApprove_IN::findRefRecId(mergedSchemeTableRecId);

        if (epcgSchemeApproval)
        {
            while select tmpEximEPCGExportObligationPeriod
            {
                epcgExportObligationPeriod.Block                  = tmpEximEPCGExportObligationPeriod.Block;
                epcgExportObligationPeriod.Description            = tmpEximEPCGExportObligationPeriod.Description;
                epcgExportObligationPeriod.PeriodInterval         = tmpEximEPCGExportObligationPeriod.PeriodInterval;
                epcgExportObligationPeriod.Units                  = tmpEximEPCGExportObligationPeriod.Units;
                epcgExportObligationPeriod.Percentage             = tmpEximEPCGExportObligationPeriod.Percentage;
                epcgExportObligationPeriod.FromDateTime           = tmpEximEPCGExportObligationPeriod.FromDateTime;
                epcgExportObligationPeriod.ToDateTime             = tmpEximEPCGExportObligationPeriod.ToDateTime;
                epcgExportObligationPeriod.ExportObligationAmount = tmpEximEPCGExportObligationPeriod.ExportObligationAmount;
                epcgExportObligationPeriod.SchemeApproveRecId     = epcgSchemeApproval.RecId;
                epcgExportObligationPeriod.insert();

                this.insertExportObligationDetails(epcgExportObligationPeriod);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSchemes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts scheme information.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertSchemes()
    {
        EximEPCGSchemeApprove_IN epcgSchemeApprove;
        EximEPCGSchemeTable_IN   epcgSchemeTableIns;
        EximEPCGSchemeTable_IN   epcgSchemeTable;
        NumberSeq                numberSeq;

        if (schemeTableRecId)
        {
            epcgSchemeTable = EximEPCGSchemeTable_IN::findSchemeId(schemeId);

            numberSeq = NumberSeq::newGetNumFromCode(EximParameters_IN::numRefEPCGId().numberSequenceTable().NumberSequence);

            epcgSchemeTableIns.SchemeId       = numberSeq.num();
            epcgSchemeTableIns.SchemeDateTime = DateTimeUtil::getSystemDateTime();
            epcgSchemeTableIns.Basis          = epcgSchemeTable.Basis;
            epcgSchemeTableIns.Status         = EximEPCGSchemeStatus_IN::Approved;
            epcgSchemeTableIns.EximPorts      = epcgSchemeTable.EximPorts;
            epcgSchemeTableIns.insert();

            this.parmMergedRecId(epcgSchemeTableIns.RecId);

            if (tmpEximEPCGSchemeApproval)
            {
                epcgSchemeApprove.data(tmpEximEPCGSchemeApproval);
                epcgSchemeApprove.SchemeTableRecId = mergedSchemeTableRecId;
                epcgSchemeApprove.OrigSchemeId     = schemeId;
                epcgSchemeApprove.OrigLicenseNum   = EximEPCGSchemeTable_IN::findSchemeId(schemeId).LicenseNum;
                epcgSchemeApprove.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        tmpEximEPCGSchemeApproval = null;
        tmpEximEPCGExportObligationPeriod = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMergedRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmMergedRecId(RefRecId _mergedSchemeTableRecId = mergedSchemeTableRecId)
    {
        mergedSchemeTableRecId = _mergedSchemeTableRecId;
        return mergedSchemeTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchemeId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximEPCGId_IN parmSchemeId(EximEPCGId_IN _schemeId = schemeId)
    {
        schemeId = _schemeId;
        return schemeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedSchemeIds</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container parmSelectedSchemeIds(container _selectedEpcgIds = selectedEpcgIds)
    {
        selectedEpcgIds = _selectedEpcgIds;

        return selectedEpcgIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        EximEPCGSchemeTableRecId_IN mergeRecId;

        try
        {
            mergeRecId = EximEPCGUpd_Merge_IN::runOnServer(schemeTableRecId,
                                              tmpEximEPCGSchemeApproval,
                                              tmpEximEPCGExportObligationPeriod,
                                              selectedEpcgIds,
                                              schemeId,
                                              licenseNum,
                                              basis,
                                              issueDateTime);
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        info(strfmt("@GLS62297", EximEPCGSchemeTable_IN::findRecId(mergeRecId).SchemeId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedSchemes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Seletes scheme information.
    /// </summary>
    /// <param name="_formDataSource">
    /// The form data source.
    /// </param>
    protected void selectedSchemes(FormDataSource _formDataSource)
    {
        EximEPCGSchemeTable_IN epcgSchemeTable;

        selectedEpcgIds = connull();
        epcgSchemeTable = _formDataSource.getFirst(true);

        if (!epcgSchemeTable)
        {
            epcgSchemeTable = _formDataSource.cursor();

            if (epcgSchemeTable)
            {
                selectedEpcgIds = [epcgSchemeTable.RecId];
            }
        }
        else
        {
            for (epcgSchemeTable = _formDataSource.getFirst(true); epcgSchemeTable; epcgSchemeTable = _formDataSource.getNext())
            {
                selectedEpcgIds += [epcgSchemeTable.RecId];
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeSchemes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes scheme information.
    /// </summary>
    /// <returns>
    /// The instance of the <c>EximEPCGSchemeTableRecId_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected EximEPCGSchemeTableRecId_IN writeSchemes()
    {
        EximEPCGSchemeApprove_IN        eximEPCGSchemeApproval;
        EximEPCGSchemeLine_IN           eximEPCGSchemeLine;
        EximEPCGSchemeTable_IN          eximEPCGSchemeTable;
        EximEPCGSchemeMergeReference_IN eximEPCGSchemeMergeReference;
        Counter                         recCount;

        eximEPCGSchemeApproval = EximEPCGSchemeApprove_IN::findRefRecId(mergedSchemeTableRecId);

        if (eximEPCGSchemeApproval)
        {
            eximEPCGSchemeTable = EximEPCGSchemeTable_IN::findRecId(eximEPCGSchemeApproval.SchemeTableRecId, true);
            if (eximEPCGSchemeTable)
            {
                eximEPCGSchemeTable.Status               = EximEPCGSchemeStatus_IN::Approved;
                eximEPCGSchemeTable.LicenseNum           = licenseNum;
                eximEPCGSchemeTable.IssueDateTime        = DateTimeUtil::removeTimeZoneOffset(issueDateTime, DateTimeUtil::getUserPreferredTimeZone());
                eximEPCGSchemeTable.ApprovalBasis        = basis;
                eximEPCGSchemeTable.ImportValueMST       = EximEPCGSchemeApprove_IN::importValueMST(eximEPCGSchemeApproval.ImportValue,
                                                                                                    eximEPCGSchemeApproval.Currency,
                                                                                                    eximEPCGSchemeTable.IssueDateTime);
                eximEPCGSchemeTable.ImportExpiryDateTime = DateTimeUtil::removeTimeZoneOffset(
                                                                DateTimeUtil::addSeconds(EximEPCGUpdate_IN::extendDateTime(DateTimeUtil::applyTimeZoneOffset(eximEPCGSchemeTable.IssueDateTime, DateTimeUtil::getUserPreferredTimeZone()),
                                                                                                             EximParameters_IN::find().epcgImportPeriod,
                                                                                                             EximParameters_IN::find().epcgImportPeriodUnit), - 1), DateTimeUtil::getUserPreferredTimeZone());
                eximEPCGSchemeTable.update();
            }

            eximEPCGSchemeLine = EximEPCGSchemeLine_IN::findRefRecId(mergedSchemeTableRecId);
            if (!eximEPCGSchemeLine)
            {
                eximEPCGSchemeLine.SchemeTableRecId          = mergedSchemeTableRecId;
                eximEPCGSchemeLine.LicenseStatus             = EximEPCGLicenseStatus_IN::Merged;
                eximEPCGSchemeLine.ExportObligationAmountMST = eximEPCGSchemeApproval.expObligationAmtMST(basis,
                                                                                                          DateTimeUtil::removeTimeZoneOffset(issueDateTime, DateTimeUtil::getUserPreferredTimeZone()));
                eximEPCGSchemeLine.VersionNum                = EximEPCGSchemeLine_IN::findVersionNum(mergedSchemeTableRecId) + 1;
                eximEPCGSchemeLine.insert();
            }

            for (recCount = 1; recCount <= conlen(selectedEpcgIds); recCount++)
            {
                eximEPCGSchemeTable.clear();

                eximEPCGSchemeTable = EximEPCGSchemeTable_IN::findRecId(conpeek(selectedEpcgIds, recCount), true);
                eximEPCGSchemeTable.Status            = EximEPCGSchemeStatus_IN::Merged;
                eximEPCGSchemeTable.Closed            = NoYes::Yes;
                eximEPCGSchemeTable.update();

                eximEPCGSchemeMergeReference.SchemeTableRecId = eximEPCGSchemeApproval.SchemeTableRecId;
                eximEPCGSchemeMergeReference.ReferenceSchemeTableRecId = eximEPCGSchemeTable.RecId;
                eximEPCGSchemeMergeReference.insert();
            }
        }
        return mergedSchemeTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpMergeReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts scheme merge refernece.
    /// </summary>
    /// <param name="_referenceRecId">
    /// The record if of the reference.
    /// </param>
    /// <returns>
    /// The merge referenece of the EPCG scheme.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TmpEximEPCGSchemeMergeReference_IN insertTmpMergeReference(EximEPCGSchemeTableRecID_IN _referenceRecId)
    {
        TmpEximEPCGSchemeMergeReference_IN tmpEPCGSchemeMergeReference;
        EximEPCGSchemeTable_IN             epcgSchemeTableCopy;
        EximEPCGSchemeMergeReference_IN    epcgSchemeMergeReference;

        while select ReferenceSchemeTableRecId
            from epcgSchemeMergeReference
                where epcgSchemeMergeReference.SchemeTableRecId == _referenceRecId
        {
            epcgSchemeTableCopy = EximEPCGSchemeTable_IN::findRecId(epcgSchemeMergeReference.ReferenceSchemeTableRecId);
            tmpEPCGSchemeMergeReference.LicenseNum    = epcgSchemeTableCopy.LicenseNum;
            tmpEPCGSchemeMergeReference.IssueDateTime = epcgSchemeTableCopy.IssueDateTime;
            tmpEPCGSchemeMergeReference.LicenseStatus = EximEPCGSchemeLine_IN::findRefRecId(epcgSchemeTableCopy.RecId).LicenseStatus;
            tmpEPCGSchemeMergeReference.insert();
        }
        return tmpEPCGSchemeMergeReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method run on the server side.
    /// </summary>
    /// <param name="_schemeTableRecId">
    /// The scheme table rec id.
    /// </param>
    /// <param name="_tmpEximEPCGSchemeApproval">
    /// The tmp exim epcg scheme approval information.
    /// </param>
    /// <param name="_tmpEximEPCGExportObligationPeriod">
    /// The tmp exim epcg export obligation period.
    /// </param>
    /// <param name="_selectedEpcgIds">
    /// The selected epcg ids.
    /// </param>
    /// <param name="_schemeId">
    /// The scheme id.
    /// </param>
    /// <param name="_licenseNum">
    /// The license number.
    /// </param>
    /// <param name="_basis">
    /// The exim epcg export obligation basis.
    /// </param>
    /// <param name="_issueDateTime">
    /// The issue date time.
    /// </param>
    /// <returns>
    /// The instance of the <c>EximEPCGSchemeTableRecId_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximEPCGSchemeTableRecId_IN runOnServer(
        RefRecId                                _schemeTableRecId,
        EximEPCGSchemeApprove_IN                _tmpEximEPCGSchemeApproval,
        TmpEximEPCGExportObligationPeriod_IN    _tmpEximEPCGExportObligationPeriod,
        container                               _selectedEpcgIds,
        EximEPCGId_IN                           _schemeId,
        EximLicenseNum_IN                       _licenseNum,
        EximEPCGExportObligationBasis_IN        _basis,
        TransDateTime                           _issueDateTime)
    {
        EximEPCGUpd_Merge_IN        epcgMerge = new EximEPCGUpd_Merge_IN();
        EximEPCGSchemeTableRecId_IN schemeTableRecId;

        ttsbegin;

        epcgMerge.parmSchemeTableRecId(_schemeTableRecId);
        epcgMerge.parmTmpEximEPCGSchemeApproval(_tmpEximEPCGSchemeApproval);
        epcgMerge.parmTmpExpObligation(_tmpEximEPCGExportObligationPeriod);
        epcgMerge.parmSelectedSchemeIds(_selectedEpcgIds);
        epcgMerge.parmSchemeId(_schemeId);
        epcgMerge.parmLicenseNum(_licenseNum);
        epcgMerge.parmApproveBasis(_basis);
        epcgMerge.parmIssueDateTime(_issueDateTime);

        epcgMerge.insertSchemes();
        schemeTableRecId = epcgMerge.writeSchemes();
        epcgMerge.insertExportObligationPeriod();

        ttscommit;

        return schemeTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>