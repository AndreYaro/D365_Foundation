<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostInventoryStatementCmdMapQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostInventoryStatementCmdMapQuery</c> class is a command that maps data from a row in a <c>QueryRun</c> object.
/// </summary>
public class CostInventoryStatementCmdMapQuery implements InventAgingICommand
{
    QueryRun                                                        queryRun;
    CostInventoryStatementMap                                       inventValueView;
    InventCostTransVarianceView                                     varianceView;
    boolean                                                         varianceViewChanged;
    CostOffsetPostingType2CostStatementLineCategoryLevel2Mapping    costOffsetPostingType2CostStatementLineCategoryLevel2Mapping;
    CostInventTransType2CostStatementLineCategoryLevel2Mapping      costInventTransType2CostStatementLineCategoryLevel2Mapping;
    boolean                                                         useCostStatementCache;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAmount</Name>
				<Source><![CDATA[
    public CostAmount parmAmount()
    {
        return this.isVariance() ? varianceView.CostAmountPosted : inventValueView.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    public CostAmount parmQuantity()
    {
        return inventValueView.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate()
    {
        return this.isVariance() ? varianceView.TransDate : inventValueView.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostTransRefType</Name>
				<Source><![CDATA[
    public InventCostTransRefType parmCostTransRefType()
    {
        return varianceView.CostTransRefType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVariance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the row is variance data or not.
    /// </summary>
    /// <returns>true if the data comes from a variance row; otherwise, false.</returns>
    public boolean isVariance()
    {
        return varianceViewChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatementLineType1</Name>
				<Source><![CDATA[
    public CostStatementLineCategoryLevel1 parmStatementLineType1()
    {
        return inventValueView.StatementLineCategoryLevel1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatementLineType2</Name>
				<Source><![CDATA[
    public CostStatementLineCategoryLevel2 parmStatementLineType2()
    {
        return inventValueView.StatementLineCategoryLevel2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatementLineType3</Name>
				<Source><![CDATA[
    public CostStatementLineCategoryLevel3 parmStatementLineType3()
    {
        return inventValueView.StatementLineCategoryLevel3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatementType</Name>
				<Source><![CDATA[
    public CostStatementType parmStatementType()
    {
        return inventValueView.StatementType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from the <c>QueryRun</c> object.
    /// </summary>
    public void execute()
    {
        varianceViewChanged = false;
        if (useCostStatementCache)
        {
            if (queryRun.changed(tableNum(CostStatementCache)))
            {
                inventValueView.data(queryRun.get(tableNum(CostStatementCache)));
            }
            else
            {
                inventValueView.clear();
            }
        }
        else
        {
            if (queryRun.changed(tableNum(InventValueReportView)))
            {
                inventValueView.data(queryRun.get(tableNum(InventValueReportView)));
            }
            else if (queryRun.changed(tableNum(InventCostTransVarianceView)))
            {
                varianceViewChanged = true;
                varianceView.data(queryRun.get(tableNum(InventCostTransVarianceView)));
            }
            else
            {
                inventValueView.clear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CostInventoryStatementCmdMapQuery</c> class.
    /// </summary>
    /// <param name="_queryRun">
    /// An instance of the <c>QueryRun</c> class to map.
    /// </param>
    protected void initialize(QueryRun _queryRun)
    {
        queryRun = _queryRun;

        if (queryRun.query().dataSourceTable(tableNum(CostStatementCache)))
        {
            useCostStatementCache = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        costOffsetPostingType2CostStatementLineCategoryLevel2Mapping = CostOffsetPostingType2CostStatementLineCategoryLevel2Mapping::construct();
        costInventTransType2CostStatementLineCategoryLevel2Mapping = CostInventTransType2CostStatementLineCategoryLevel2Mapping::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static CostInventoryStatementCmdMapQuery construct()
    {
        return new CostInventoryStatementCmdMapQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostInventoryStatementCmdMapQuery</c> class.
    /// </summary>
    /// <param name="_queryRun">
    /// The instance of the <c>QueryRun</c> class to map.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostInventoryStatementCmdMapQuery</c> class.
    /// </returns>
    public static CostInventoryStatementCmdMapQuery newFromQueryRun(QueryRun _queryRun)
    {
        CostInventoryStatementCmdMapQuery inventoryStatementCmdMapQuery = CostInventoryStatementCmdMapQuery::construct();
        inventoryStatementCmdMapQuery.initialize(_queryRun);

        return inventoryStatementCmdMapQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>