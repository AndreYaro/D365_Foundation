<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureAccountingJournalReportExcel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

class FactureAccountingJournalReportExcel_RU extends XMLExcelReport_RU  implements BatchRetryable, ERIReportPostProcessingSupported
{
    
    TransDate                   fromDate;
    TransDate                   toDate;
    FactureOutReportMethod_RU   outReportMethod;
    NoYes                       useReportingDate;
    NoYes                       exportToXml;
    ERFormatMappingId           formatMappingId;

    Dialog                      dialog;
    
    DialogField                 fromDateDlg;
    DialogField                 toDateDlg;
    DialogField                 periodCodeDlg;
    DialogField                 outReportMethodDlg;
    DialogField                 useReportingDateDlg;
    DialogField                 exportToXmlDlg;
    DialogField                 formatMappingIdDlg;
    
    BookDateNumDelimiter_RU     bookDateNumDelimiter;
    SysQueryRun                 queryRun;
    str                         taxPeriodStr;
    
    TmpLedgerVATDeclaratoinLine_RU      line, lineComm, reportLine;
    TmpLedgerVATDeclaratoinHeader_RU    header; 
    
    str         factureStr;
    str         factureStrRevision;
    str         factureStrCorr;
    str         factureStrCorrRevision;
    str         sellerBuyerName;
    str         sellerBuyerINNKPP;
    str         agentName;
    str         agentINNKPP;
    str         factureSellerStr;
    str         dealTypeCode;
    str         currencyCodeName;
    
    protected const int currentVersion = 1;
    protected const int dialogPeriodCodeFieldNo = 101;
    
    #FactureHeader_RU
    
    protected const str reportHeader    = 'REPORTHEADER';
    protected const str pageHeader      = 'PAGEHEADER';
    protected const str body            = 'BODY';
    protected const str reportHeader2   = 'REPORTHEADER2';
    protected const str pageHeader2     = 'PAGEHEADER2';
    protected const str body2           = 'BODY2';
    protected const str reportFooter2   = 'REPORTFOOTER2';
    
    protected const int width = 19;
    protected str newLine = num2char(10);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        const real minHeight = 10.50;
        real ret;
        
        this.getReportLineData();
        
        switch (_bookmark)
        {
                    case body:
                        ret = max(
                        document.getNamedRangeHeightWrapped('FactureNumDate', factureStr),
                            document.getNamedRangeHeightWrapped('RevisionNumDate', factureStrRevision),
                            document.getNamedRangeHeightWrapped('CorrFactureNumDate', factureStrCorr),
                            document.getNamedRangeHeightWrapped('CorrRevisionNumDate', factureStrCorrRevision),
                            document.getNamedRangeHeightWrapped('CustName', sellerBuyerName),
                            document.getNamedRangeHeightWrapped('CustINNKPP', sellerBuyerINNKPP),
                            document.getNamedRangeHeightWrapped('SellerName', agentName),
                            document.getNamedRangeHeightWrapped('SellerINNKPP', agentINNKPP),
                            document.getNamedRangeHeightWrapped('SellerFactureNumDate', factureSellerStr),
                            document.getNamedRangeHeightWrapped('CurrencyCodeName', currencyCodeName),
                            minHeight);
                        break;
                    case body2:
                        ret = max(
                        document.getNamedRangeHeightWrapped('FactureNumDate2', factureStr),
                            document.getNamedRangeHeightWrapped('RevisionNumDate2', factureStrRevision),
                            document.getNamedRangeHeightWrapped('CorrFactureNumDate2', factureStrCorr),
                            document.getNamedRangeHeightWrapped('CorrRevisionNumDate2', factureStrCorrRevision),
                            document.getNamedRangeHeightWrapped('VendName', sellerBuyerName),
                            document.getNamedRangeHeightWrapped('VendINNKPP', sellerBuyerINNKPP),
                            document.getNamedRangeHeightWrapped('ComissionAgentName', agentName),
                            document.getNamedRangeHeightWrapped('ComissionINNKPP', agentINNKPP),
                            document.getNamedRangeHeightWrapped('DealTypeCode', dealTypeCode),
                            document.getNamedRangeHeightWrapped('CurrencyCodeName2', currencyCodeName),
                            minHeight);
                        break;
            
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00023, funcName());

        taxPeriodStr = this.getTaxPeriodStr(fromDate, toDate);

        this.prepareDataAndExportToXml();

        this.initBookDateNumDelimiter();

        this.initSectionMap();

        this.setCurrentWorksheetNum(1, width);

        //Title and Officials to Excel
        this.execute(reportHeader);
        this.execute(pageHeader);

        // Part 1 Outgoing facture
        lineComm.setTmpData(line);

        while select line
            order by LineNumber
            where line.FactureJourRefRecId != 0
               && line.LineNumber != 0
        {
            reportLine = line;
            this.execute(body);

            while select lineComm
                where lineComm.FactureJourRefRecId == line.FactureJourRefRecId
                   && lineComm.LineNumber == 0
            {
                reportLine = lineComm;
                this.execute(body);
            }
        }

        this.setPrintArea();
        this.setCurrentWorksheetNum(2, width);
        this.execute(reportHeader2);
        this.execute(pageHeader2);

        // Part 2 Incoming facture
        while select line
        order by LineNumber
        where line.FactureJourRefRecId == 0
        {
            reportLine = line;
            this.execute(body2);
        }

        this.execute(reportFooter2);
        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyNameCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds currency description which includes currency text name and ISO code.
    /// </summary>
    /// <param name="_currencyCode">
    /// Currency code.
    /// </param>
    /// <returns>
    /// Currency description in format: currency text name, ISO code.
    /// </returns>
    public Description currencyNameCode(CurrencyCode _currencyCode)
    {
        Currency currency = Currency::find(_currencyCode);
        ISOCurrencyCode isoCurrency = ISOCurrencyCode::find(currency.CurrencyCodeISO);

        return strFmt("@SYS26868", currency.Txt, isoCurrency.ISOCurrencyCodeNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        dialog.addGroup("@SYS23339");
        periodCodeDlg = new DialogField(dialog, extendedTypeStr(DateCode), dialogPeriodCodeFieldNo);
        dialog.addCtrlDialogField(periodCodeDlg.name());
        periodCodeDlg.init(dialog);

        fromDateDlg         = dialog.addFieldValue(extendedTypeStr(FromDate), fromDate);
        toDateDlg           = dialog.addFieldValue(extendedTypeStr(ToDate), toDate);
        outReportMethodDlg  = dialog.addFieldValue(enumStr(FactureOutReportMethod_RU), outReportMethod);
        useReportingDateDlg = dialog.addFieldValue(enumStr(NoYes), useReportingDate, "@SYP4881152", "@GLS113017");        
        exportToXmlDlg      = dialog.addFieldValue(enumStr(NoYes), exportToXml, "@SYS114646");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method called after dialog run and allows to overload dialog form control methods
    /// </summary>
    /// <param name="_dialog">
    /// <c>DialogRunBase</c> object
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatDate</Name>
				<Source><![CDATA[
    private str formatDate(TransDate _date)
    {
        return date2str(_date, 123, DateDay::Digits2, DateSeparator::None, DateMonth::Digits2, DateSeparator::None, DateYear::Digits4, DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'FactureAccountingJournal';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return strFmt("@GLS110611", this.formatDate(fromDate), this.formatDate(toDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section with data
    /// </summary>
    private void fillBody()
    {
        int rowCount;

        this.insertValueToSection('Num'                 , reportLine.LineNumber ? strFmt("@GLS106745", reportLine.LineNumber) : '');
        this.insertValueToSection('FactureDate'         , reportLine.LineNumber ? strFmt("@GLS106745", reportLine.FactureDateIssueReceive) : '');
        this.insertValueToSection('OperationTypeCode'   , reportLine.LineNumber ? reportLine.OperationTypeCodes : '');
        this.insertValueToSection('FactureNumDate'      , factureStr);
        this.insertValueToSection('RevisionNumDate'     , factureStrRevision);
        this.insertValueToSection('CorrFactureNumDate'  , factureStrCorr);
        this.insertValueToSection('CorrRevisionNumDate' , factureStrCorrRevision);
        this.insertValueToSection('CustName'            , sellerBuyerName);
        this.insertValueToSection('CustINNKPP'          , sellerBuyerINNKPP);
        this.insertValueToSection('SellerName'          , agentName);
        this.insertValueToSection('SellerINNKPP'        , agentINNKPP);
        this.insertValueToSection('SellerFactureNumDate', factureSellerStr);
        this.insertValueToSection('CurrencyCodeName'    , currencyCodeName);
        this.insertValueToSection('FactureAmount'       , reportLine.AmountInclVATStr);
        this.insertValueToSection('TaxAmount'           , this.getAmountStr(reportLine.TaxAmountVATStr));
        this.insertValueToSection('DiffTotalDecr'       , this.getAmountStr(reportLine.AmountDiffMinusStr));
        this.insertValueToSection('DiffTotalIncr'       , this.getAmountStr(reportLine.AmountDiffPlusStr));
        this.insertValueToSection('DiffTaxDecr'         , this.getAmountStr(reportLine.TaxAmountDiffMinusStr));
        this.insertValueToSection('DiffTaxIncr'         , this.getAmountStr(reportLine.TaxAmountDiffPlusStr));

        rowCount = strLen(strKeep(factureStr, newLine));
        if (rowCount > 0)
        {
            this.setRangeHeight('Num', (rowCount + 1) * 13);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body2 section with data
    /// </summary>
    private void fillBody2()
    {
        int rowCount;

        this.insertValueToSection('NumP2'                , strFmt("@GLS106745", reportLine.LineNumber));
        this.insertValueToSection('FactureDate2'         , strFmt('%1', reportLine.FactureDateIssueReceive));
        this.insertValueToSection('OperationTypeCode2'   , reportLine.OperationTypeCodes);
        this.insertValueToSection('FactureNumDate2'      , factureStr);
        this.insertValueToSection('RevisionNumDate2'     , factureStrRevision);
        this.insertValueToSection('CorrFactureNumDate2'  , factureStrCorr);
        this.insertValueToSection('CorrRevisionNumDate2' , factureStrCorrRevision);
        this.insertValueToSection('VendName'             , sellerBuyerName);
        this.insertValueToSection('VendINNKPP'           , sellerBuyerINNKPP);
        this.insertValueToSection('ComissionAgentName'   , agentName);
        this.insertValueToSection('ComissionINNKPP'      , agentINNKPP);
        this.insertValueToSection('DealTypeCode'         , dealTypeCode);
        this.insertValueToSection('CurrencyCodeName2'    , currencyCodeName);
        this.insertValueToSection('FactureAmount2'       , reportLine.AmountInclVATStr);
        this.insertValueToSection('TaxAmount2'           , this.getAmountStr(reportLine.TaxAmountVATStr));
        this.insertValueToSection('DiffTotalDecr2'       , this.getAmountStr(reportLine.AmountDiffMinusStr));
        this.insertValueToSection('DiffTotalIncr2'       , this.getAmountStr(reportLine.AmountDiffPlusStr));
        this.insertValueToSection('DiffTaxDecr2'         , this.getAmountStr(reportLine.TaxAmountDiffMinusStr));
        this.insertValueToSection('DiffTaxIncr2'         , this.getAmountStr(reportLine.TaxAmountDiffPlusStr));

        rowCount = strLen(strKeep(factureStr, newLine));
        if (rowCount > 0)
        {
            this.setRangeHeight('NumP2', (rowCount + 1) * 13);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case reportHeader:
                this.fillReportHeader();
                break;
            case body:
                this.fillBody();
                break;
            case body2:
                this.fillBody2();
                break;
            case reportFooter2:
                this.fillReportFooter2();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills reportFooter section with data
    /// </summary>
    private void fillReportFooter2()
    {
        this.insertValueToSection('Director', OfficialsTable_RU::nameDirector());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills reportHeader section with data
    /// </summary>
    private void fillReportHeader()
    {
        CompanyInfo   companyInfo = CompanyInfo::find();
        INN_RU        inn         = companyInfo.partyINNasOfDate_RU(toDate);
        KPPU_RU       kpp         = companyInfo.partyKPPasOfDate_RU(toDate);

        this.insertValueToSection('CompanyName', companyInfo.Name);
        this.insertValueToSection('CompanyINN', inn + (kpp ? ' / ' + kpp : ''));
        this.insertValueToSection('Period', taxPeriodStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld101_1_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides Period control modified method
    /// </summary>
    /// <returns>
    /// True if  modified succeed
    /// </returns>
    private boolean fld101_1_modified()
    {
        LedgerPeriodCode    ledgerPeriodCode;
        Object              control;
        boolean             ret;

        control = dialog.formRun().controlCallingMethod();
        ret = control.modified();

        if (ret && periodCodeDlg.value())
        {
            ledgerPeriodCode = LedgerPeriodCode::find(periodCodeDlg.value());
            fromDateDlg.value(ledgerPeriodCode.fromDate());
            toDateDlg.value(ledgerPeriodCode.toDate());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountStr</Name>
				<Source><![CDATA[
    protected str getAmountStr(str  _amountStr)
    {
        return _amountStr == #withoutVAT ? "@GLS101894" : _amountStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureSellerStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns description string for facture.
    /// </summary>
    /// <param name="_line">
    /// <c>TmpLedgerVATDeclaratoinLine_RU</c> record which is currently being printed.
    /// </param>
    /// <returns>
    /// Description string.
    /// </returns>
    protected str getFactureSellerStr(TmpLedgerVATDeclaratoinLine_RU  _line)
    {
        return _line.FactureNumSeller ? strFmt('%1%2%3', _line.FactureNumSeller, bookDateNumDelimiter, _line.FactureDateSeller) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns description string for facture.
    /// </summary>
    /// <param name="_line">
    /// <c>TmpLedgerVATDeclaratoinLine_RU</c> record which is currently being printed.
    /// </param>
    /// <returns>
    /// Description string.
    /// </returns>
    protected str getFactureStr(TmpLedgerVATDeclaratoinLine_RU  _line)
    {
        return _line.LineNumber ? strFmt('%1%2%3', _line.FactureNum, bookDateNumDelimiter, _line.FactureDate) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureStrCorr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value which should be printed to "Corrected facture number and date" field.
    /// </summary>
    /// <param name="_line">
    /// <c>TmpLedgerVATDeclaratoinLine_RU</c> record which is currently being printed.
    /// </param>
    /// <returns>
    /// Value which should be printed to "Corrected facture number and date" field.
    /// </returns>
    protected str getFactureStrCorr(TmpLedgerVATDeclaratoinLine_RU  _line)
    {
        return _line.LineNumber && _line.CorrFactureNum ? strfmt('%1%2%3', _line.CorrFactureNum, bookDateNumDelimiter, _line.CorrFactureDate) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureStrCorrRevision</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value which should be printed to "Revision facture number and date" field if there's
    /// a revision of corrected facture.
    /// </summary>
    /// <param name="_line">
    /// <c>TmpLedgerVATDeclaratoinLine_RU</c> record which is currently being printed.
    /// </param>
    /// <returns>
    /// Value which should be printed to "Revision facture number and date" field.
    /// </returns>
    protected str getFactureStrCorrRevision(TmpLedgerVATDeclaratoinLine_RU  _line)
    {
        return _line.LineNumber && _line.CorrFactureCorrRevision ? strfmt('%1%2%3', _line.CorrFactureCorrRevision, bookDateNumDelimiter, _line.CorrFactureCorrDate) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureStrRevision</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value which should be printed to "Revision facture number and date" field.
    /// </summary>
    /// <param name="_line">
    /// <c>TmpLedgerVATDeclaratoinLine_RU</c> record which is currently being printed.
    /// </param>
    /// <returns>
    /// Value which should be printed to "Revision facture number and date" field.
    /// </returns>
    protected str getFactureStrRevision(TmpLedgerVATDeclaratoinLine_RU  _line)
    {
        return _line.LineNumber && _line.FactureCorrRevision ? strfmt('%1%2%3', _line.FactureCorrRevision, bookDateNumDelimiter, _line.FactureCorrDate) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data entered by user to dialog
    /// </summary>
    /// <returns>
    /// Returns true if data valid
    /// </returns>
    public boolean getFromDialog()
    {
        fromDate            = fromDateDlg.value();
        toDate              = toDateDlg.value();
        outReportMethod     = outReportMethodDlg.value();
        useReportingDate    = useReportingDateDlg.value();
        exportToXml         = exportToXmlDlg.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportLineData</Name>
				<Source><![CDATA[
    private void getReportLineData()
    {
        factureStr              = this.getFactureStr(reportLine);
        factureStrRevision      = this.getFactureStrRevision(reportLine);
        factureStrCorr          = this.getFactureStrCorr(reportLine);
        factureStrCorrRevision  = this.getFactureStrCorrRevision(reportLine);
        sellerBuyerName         = reportLine.SellerBuyerName;
        sellerBuyerINNKPP       = reportLine.sellerBuyerINNKPPStr();
        agentName               = reportLine.AgentName;
        agentINNKPP             = reportLine.agentINNKPPStr();
        factureSellerStr        = reportLine.FactureJourRefRecId ? this.getFactureSellerStr(reportLine) : '';
        dealTypeCode            = reportLine.FactureJourRefRecId ? '' : reportLine.DealTypeCode;
        currencyCodeName        = this.currencyNameCode(reportLine.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxPeriodStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates string, representing period name
    /// </summary>
    /// <param name="_fromDate">
    /// Start date of period
    /// </param>
    /// <param name="_toDate">
    /// End date of period
    /// </param>
    /// <returns>
    /// String, representing period name
    /// </returns>
    private TempStr getTaxPeriodStr(TaxPeriodDate _fromDate, TaxPeriodDate _toDate)
    {
        const int quarter = 3;

        TempStr taxPeriodStrLocal;

        if (year(_fromDate) == year(_toDate)
            && endmth(_toDate) == _toDate
            && dayOfMth(_fromDate) == 1)
        {
            switch (mthOfYr(_toDate) - mthOfYr(_fromDate) + 1)
            {
                case quarter :
                    taxPeriodStrLocal = strFmt('за %1 квартал %2 года', date2Qtr(_fromDate), year(_fromDate));
                    break;

                default :
                    taxPeriodStrLocal = strFmt('за период с %1 по %2', _fromDate, _toDate);
                    break;
            }
        }
        else
        {
            taxPeriodStrLocal = strFmt('за период с %1 по %2', _fromDate, _toDate);
        }

        return taxPeriodStrLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBookDateNumDelimiter</Name>
				<Source><![CDATA[
    private void initBookDateNumDelimiter()
    {
        const str defaultBookDateNumDelimiter = ';';

        bookDateNumDelimiter = LedgerParameters::find().setBookDateNumDelimiter_RU(false);
        bookDateNumDelimiter = bookDateNumDelimiter ? bookDateNumDelimiter : defaultBookDateNumDelimiter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        date currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        
        fromDate = dateStartQtr(currentDate);
        toDate   = dateEndQtr(currentDate);

        this.initQuery();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private void initQuery()
    {
        Query query = new Query();

        query.addDataSource(tableNum(FactureJour_RU));

        findOrCreateRange_W(query.dataSourceNo(1), fieldNum(FactureJour_RU, Module));
        findOrCreateRange_W(query.dataSourceNo(1), fieldNum(FactureJour_RU, FactureType));

        findOrCreateRange_W(query.dataSourceNo(1),
                        fieldNum(FactureJour_RU, InventProfileType),
                        con2Str([enum2Value(InventProfileType_RU::CommissionAgent),
                                 enum2Value(InventProfileType_RU::CommissionPrincipalAgent)]));

        queryRun = new SysQueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(reportHeader);
        this.addSection(pageHeader);
        this.addSection(body, true);
        this.addSection(reportHeader2);
        this.addSection(pageHeader2);
        this.addSection(body2, true);
        this.addSection(reportFooter2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [
            currentVersion, 
            fromDate,
            toDate,
            outReportMethod,
            useReportingDate, 
            queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDataAndExportToXml</Name>
				<Source><![CDATA[
    private void prepareDataAndExportToXml()
    {
        LedgerVATDeclarationContract_RU     contract;
        FactureAccountingJournalReport_RU   journalReport;

        contract = LedgerVATDeclarationContract_RU::construct();
        contract.parmIsCalledFromXMLExcelReport(true);
        contract.parmFromDate(fromDate);
        contract.parmToDate(toDate);
        contract.parmFactureJourQueryRun(queryRun.pack());
        contract.parmOutReportMethod(outReportMethod);
        contract.parmUseReportingDate(useReportingDate);

        journalReport = FactureAccountingJournalReport_RU::construct();
        journalReport.setContract(contract.pack());
        journalReport.run();

        header = journalReport.getHeader();
        line = journalReport.getLine();    

        ERModelDefinitionDatabaseContext dbParameter = new ERModelDefinitionDatabaseContext();
        dbParameter.addTemporaryTable(header);
        dbParameter.addTemporaryTable(line);

        ERmodelDefinitionInputParametersAction inputParameter = new ERmodelDefinitionInputParametersAction();
        inputParameter.addParameter(ERPath::combine("model", "ReportCaller"), 
            classStr(FactureAccountingJournalReportExcel_RU));
        inputParameter.addParameter(ERPath::combine("model", "005_Period/Period010_DateFrom"), fromDate);
        inputParameter.addParameter(ERPath::combine("model", "005_Period/Period020_DateTo"), toDate);

        if (exportToXml)
        {            
            formatMappingId = TaxParameters::find().FactureJournalFormatMappingID;

            ERObjectsFactory::createFormatMappingRunByFormatMappingId(formatMappingId)
                .withParameter(dbParameter)
                .withParameter(inputParameter)
                .withFileDestination(ERObjectsFactory::createFileDestinationBrowser())
                .run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    public boolean runOnServer()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(FactureAccountingJour_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        const int cellsLine = 19;
        const int cellsOther = 5;
        
        select count(RecId) from line;

        return int642int(line.RecId) * cellsLine + cellsOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        container   queryCon;

        switch (version)
        {
            case currentVersion:
                [   version, 
                    fromDate,
                    toDate,
                    outReportMethod,
                    useReportingDate, 
                    queryCon] = _packedClass;
                
                if (SysQuery::isPackedOk(queryCon))
                {
                    queryRun = new SysQueryRun(queryCon);
                }
                else
                {
                    this.initQuery();
                }
                break;
            
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates values entered in dialog
    /// </summary>
    /// <param name="calledFrom">
    /// Object this method has been called from
    /// </param>
    /// <returns>
    /// True if values entered are valid, otherwise false
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (! toDate)
        {
            ret = checkFailed("@GLS105013");
        }
        else if (fromDate > toDate)
        {
            ret = checkFailed("@GLS101164");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new instance of <c>FactureAccountingJournalReportExcel_RU</c> class.
    /// </summary>
    /// <returns>
    /// New instance of <c>FactureAccountingJournalReportExcel_RU</c> class.
    /// </returns>
    public static client FactureAccountingJournalReportExcel_RU construct()
    {
        return new FactureAccountingJournalReportExcel_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS4081815";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args  args)
    {
        FactureAccountingJournalReportExcel_RU  factureAccountingJournal;

        factureAccountingJournal = new FactureAccountingJournalReportExcel_RU();

        if (factureAccountingJournal.prompt())
        {
            factureAccountingJournal.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report name.
    /// </summary>
    /// <returns>The report name.</returns>
    public str getReportName()
    {
        return 'FactureAccountingJournal';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report output file name.
    /// </summary>
    /// <returns>The report output file name.</returns>
    public Filename getReportFileName()
    {
        return this.fileName() + this.fileNamePostfix();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>