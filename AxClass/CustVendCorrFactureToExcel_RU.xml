<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCorrFactureToExcel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>CustVendCorrFactureToExcel_RU</c> used for output of form "Correction facture" to excel.
/// </summary>
class CustVendCorrFactureToExcel_RU extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    FactureJour_RU              factureJour;

    boolean                     headerOnlyMode;
    int                         numOfLines,
                                lineNo;

    MapEnumerator               bodyEnumerator;

    CustVendCorrFactureCalc_RU  custVendCorrFactureCalc;

    #FactureHeader_RU
    #CustVendCorrFactureReport_RU

    protected const str ReportHeader = 'REPORTHEADER';
    protected const str PageHeader = 'PAGEHEADER';
    protected const str Body = 'BODY';
    protected const str PageFooter = 'PAGEFOOTER';
    protected const str ReportFooter = 'REPORTFOOTER';

    protected const int Width = 229;
    protected const str Russian = 'ru';
    protected const int TotalCells = 128;

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newLine</Name>
				<Source><![CDATA[
    private str newLine()
    {
        return num2char(10);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        Map             mapFactureTransGroup;

        custVendCorrFactureCalc = CustVendCorrFactureCalc_RU::calculate(factureJour, headerOnlyMode);

        mapFactureTransGroup = custVendCorrFactureCalc.getMapFactureTransGroup();

        numOfLines = mapFactureTransGroup.elements();

        this.initSectionMap();
        this.setCurrentWorksheetNum(1, Width);

        this.execute(ReportHeader);
        this.execute(PageHeader);

        bodyEnumerator = mapFactureTransGroup.getEnumerator();
        while (bodyEnumerator.moveNext())
        {
            lineNo++;

            if (this.mustCreateNewPage())
            {
                this.execute(PageFooter);
                document.insertPageBreak(currentRow, curWorksheetNum);

                currentHeight = 0;
                this.execute(PageHeader);
            }

            this.execute(Body);
        }

        this.execute(ReportFooter);
        this.execute(PageFooter);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'CorrectionFacture';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return strFmt("%1_%2-%3-%4", factureJour.FactureExternalId, dayOfMth(factureJour.FactureDate), mthOfYr(factureJour.FactureDate), year(factureJour.FactureDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    private void fillBody()
    {
        Struct      factureTransData = bodyEnumerator.currentValue();
        container   factureKey       = bodyEnumerator.currentKey();
        str         tempStr;

        this.insertValueToSection(#LineNumber, factureTransData.value(#LineNumber));
        this.insertValueToSection(#Description, factureTransData.value(#Description));

        if (conPeek(factureKey, 3) != FactureLineType_RU::InvoiceLine)
        {
            this.insertValueToSection(#FEACCIdBefore , #ScorecardMissing);
            this.insertValueToSection(#FEACCIdAfter  , #ScorecardMissing);
            this.insertValueToSection(#UnitCodeBefore, #ScorecardMissing);
            this.insertValueToSection(#UnitCodeAfter , #ScorecardMissing);
            this.insertValueToSection(#UnitIdBefore  , #ScorecardMissing);
            this.insertValueToSection(#UnitIdAfter   , #ScorecardMissing);
            this.insertValueToSection(#QtyBefore     , #ScorecardMissing);
            this.insertValueToSection(#QtyAfter      , #ScorecardMissing);
            this.insertValueToSection(#PriceBefore   , #ScorecardMissing);
            this.insertValueToSection(#PriceAfter    , #ScorecardMissing);
        }
        else
        {
            this.insertValueToSection(#FEACCIdBefore , factureTransData.value(#FEACCIdBefore));
            this.insertValueToSection(#FEACCIdAfter  , factureTransData.value(#FEACCIdAfter));
            this.insertValueToSection(#UnitCodeBefore, factureTransData.value(#UnitCodeBefore));
            this.insertValueToSection(#UnitCodeAfter , factureTransData.value(#UnitCodeAfter));
            this.insertValueToSection(#UnitIdBefore  , factureTransData.value(#UnitIdBefore));
            this.insertValueToSection(#UnitIdAfter   , factureTransData.value(#UnitIdAfter));
            this.insertValueToSection(#QtyBefore     , factureTransData.value(#QtyBefore));
            this.insertValueToSection(#QtyAfter      , factureTransData.value(#QtyAfter));
            this.insertValueToSection(#PriceBefore   , factureTransData.value(#PriceBefore));
            this.insertValueToSection(#PriceAfter    , factureTransData.value(#PriceAfter));
        }

        if (conPeek(factureKey, 7) == VATType_RU::NonLiable)
        {
            tempStr = SysLabel::labelId2String(literalStr("@GLS101443"), Russian);
            tempStr = strPoke(tempStr, strLwr(subStr(tempStr, 1, 1)), 1);

            this.insertValueToSection(#VATValueBefore   , tempStr);
            this.insertValueToSection(#VATValueAfter    , tempStr);

            this.insertValueToSection(#TaxAmountBefore  , tempStr);
            this.insertValueToSection(#TaxAmountAfter   , tempStr);
            this.insertValueToSection(#TaxAmountIncrease, #ScorecardMissing);
            this.insertValueToSection(#TaxAmountDecrease, #ScorecardMissing);
        }
        else
        {
            this.insertValueToSection(#VATValueBefore   , factureTransData.value(#VATValueBefore));
            this.insertValueToSection(#VATValueAfter    , factureTransData.value(#VATValueAfter));

            this.insertValueToSection(#TaxAmountBefore  , factureTransData.value(#TaxAmountBefore));
            this.insertValueToSection(#TaxAmountAfter   , factureTransData.value(#TaxAmountAfter));
            this.insertValueToSection(#TaxAmountIncrease, factureTransData.value(#TaxAmountIncrease));
            this.insertValueToSection(#TaxAmountDecrease, factureTransData.value(#TaxAmountDecrease));
        }

        if (factureTransData.value(#ExciseBefore) ||
            factureTransData.value(#ExciseAfter))
        {
            this.insertValueToSection(#ExciseBefore   , factureTransData.value(#ExciseBefore));
            this.insertValueToSection(#ExciseAfter    , factureTransData.value(#ExciseAfter));
        }
        else
        {
            str labelNoExcise = factureJour.LanguageId ? SysLabel::labelId2String(literalStr("@SYS4081841"), factureJour.LanguageId) : "@SYS4081841";

            this.insertValueToSection(#ExciseBefore , labelNoExcise);
            this.insertValueToSection(#ExciseAfter , labelNoExcise);
        }

        this.insertValueToSection(#LineAmountBefore  , factureTransData.value(#LineAmountBefore));
        this.insertValueToSection(#LineAmountAfter   , factureTransData.value(#LineAmountAfter));
        this.insertValueToSection(#LineAmountIncrease, factureTransData.value(#LineAmountIncrease));
        this.insertValueToSection(#LineAmountDecrease, factureTransData.value(#LineAmountDecrease));

        this.insertValueToSection(#AmountInclTaxBefore  , factureTransData.value(#AmountInclTaxBefore));
        this.insertValueToSection(#AmountInclTaxAfter   , factureTransData.value(#AmountInclTaxAfter));
        this.insertValueToSection(#AmountInclTaxIncrease, factureTransData.value(#AmountInclTaxIncrease));
        this.insertValueToSection(#AmountInclTaxDecrease, factureTransData.value(#AmountInclTaxDecrease));

        this.insertValueToSection(#CountryCodeBefore, factureTransData.value(#CountryCodeBefore));
        this.insertValueToSection(#CountryBefore, factureTransData.value(#CountryBefore));
        this.insertValueToSection(#CountryCodeAfter, factureTransData.value(#CountryCodeAfter));
        this.insertValueToSection(#CountryAfter, factureTransData.value(#CountryAfter));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case ReportHeader:
                this.fillReportHeader();
                break;
            case Body:
                this.fillBody();
                break;
            case ReportFooter:
                this.fillReportFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    private void fillReportFooter()
    {
        FactureHeaderData_RU    headerData = custVendCorrFactureCalc.getHeaderData();

        this.insertValueToSection('LineAmountTotalIncrease'       , custVendCorrFactureCalc.getTotalLineAmountPlus());
        this.insertValueToSection('LineAmountTotalDecrease'       , custVendCorrFactureCalc.getTotalLineAmountMinus());
        this.insertValueToSection('TaxAmountTotalIncrease'        , custVendCorrFactureCalc.getTotalTaxAmountPlus());
        this.insertValueToSection('TaxAmountTotalDecrease'        , custVendCorrFactureCalc.getTotalTaxAmountMinus());
        this.insertValueToSection('AmountInclTaxTotalIncrease'    , custVendCorrFactureCalc.getTotalAmountWTaxPlus());
        this.insertValueToSection('AmountInclTaxTotalDecrease'    , custVendCorrFactureCalc.getTotalAmountWTaxMinus());

        this.insertValueToSection('DirectorName'    , headerData.offDirector());
        this.insertValueToSection('AccountantName'  , headerData.offAccountant());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    private void fillReportHeader()
    {
        FactureHeaderData_RU    headerData = custVendCorrFactureCalc.getHeaderData();
        Currency                currency;
        ISOCurrencyCode         isoCurrency;
        str                     innStr;

        if (custVendCorrFactureCalc.getFactureSepDivId())
        {
            this.insertValueToSection('FactureNum', strFmt("@GLS111217", custVendCorrFactureCalc.getFactureNum(), custVendCorrFactureCalc.getFactureSepDivId()));
        }
        else
        {
            this.insertValueToSection('FactureNum', custVendCorrFactureCalc.getFactureNum());
        }

        this.insertValueToSection('FactureDate', strFmt("@SYS82282", custVendCorrFactureCalc.getFactureDate()));

        if (factureJour.CorrectionType == FactureCorrectionType_RU::Revision)
        {
            this.insertValueToSection('ModificationNum', factureJour.RevisionNum);

            if (factureJour.FactureDate_External)
            {
                this.insertValueToSection('ModificationDate', strFmt("@SYS82282", factureJour.FactureDate_External));
            }
            else
            {
                this.insertValueToSection('ModificationDate', strFmt("@SYS82282", factureJour.FactureDate));
            }
        }
        else
        {
            this.insertValueToSection('ModificationNum',  #ScorecardMissing);
            this.insertValueToSection('ModificationDate', #ScorecardMissing);
        }

        this.setRangeHeight('OrigFactureNum', conLen(custVendCorrFactureCalc.getOrigFactureNums()) * 13);

        this.insertValueToSection('OrigFactureNum',  con2Str(custVendCorrFactureCalc.getOrigFactureNums(),  this.newLine()));
        this.insertValueToSection('OrigFactureDate', con2Str(custVendCorrFactureCalc.getOrigFactureDates(), this.newLine()));

        this.insertValueToSection('OrigModificationNum',
            conLen(custVendCorrFactureCalc.getOrigFactureRevisionNum()) ?
            con2Str(custVendCorrFactureCalc.getOrigFactureRevisionNum(),  this.newLine()) :
            #ScorecardMissing
        );
        this.insertValueToSection('OrigModificationDate',
            conLen(custVendCorrFactureCalc.getOrigFactureRevisionDate()) ?
            con2Str(custVendCorrFactureCalc.getOrigFactureRevisionDate(), this.newLine()) :
            #ScorecardMissing
        );

        this.insertValueToSection('CompanyName'   , headerData.getHeaderAttribute(#CompanyName));
        this.insertValueToSection('CompanyAddress', headerData.getHeaderAttribute(#CompanyAddress));

        if (headerData.getHeaderAttribute(#CompanyKPP))
        {
            innStr = strFmt("@GLS111217", headerData.getHeaderAttribute(#CompanyINN), headerData.getHeaderAttribute(#CompanyKPP));
        }
        else
        {
            innStr = headerData.getHeaderAttribute(#CompanyINN);
        }

        this.insertValueToSection('CompanyINN'  , innStr);
        this.insertValueToSection('BuyerName'   , headerData.getHeaderAttribute(#ContragentName));
        this.insertValueToSection('BuyerAddress', headerData.getHeaderAttribute(#ContragentAddress));

        if (headerData.getHeaderAttribute(#ContragentKPP))
        {
            innStr = strFmt("@GLS111217", headerData.getHeaderAttribute(#ContragentINN), headerData.getHeaderAttribute(#ContragentKPP));
        }
        else
        {
            innStr = headerData.getHeaderAttribute(#ContragentINN);
        }

        this.insertValueToSection('BuyerINN', innStr);

        currency = Currency::find(factureJour.PrintInMST ? CompanyInfoHelper::standardCurrency() : factureJour.CurrencyCode);
        isoCurrency = ISOCurrencyCode::find(currency.CurrencyCodeISO);

        if (isoCurrency.isoCurrencyCodeNum)
        {
            this.insertValueToSection('CurrencyCode', strFmt("@GLS106745", isoCurrency.isoCurrencyCodeNum));
        }
        else
        {
            this.insertValueToSection('CurrencyCode', strFmt("@GLS106745", currency.CurrencyCode));
        }

        this.insertValueToSection('CurrencyName', currency.Txt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(ReportHeader);
        this.addSection(PageHeader);
        this.addSection(Body);
        this.addSection(PageFooter);
        this.addSection(ReportFooter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method checks whether report should create new page
    /// </summary>
    /// <returns>
    /// Whether last fetched record should be printed on current page
    /// </returns>
    protected boolean mustCreateNewPage()
    {
        real    requiredHeight;

        requiredHeight = conPeek(mapSections.lookup(Body), #posSectionHeight);
        requiredHeight += conPeek(mapSections.lookup(PageFooter), #posSectionHeight);

        if (lineNo == numOfLines && lineNo != 1)
        {
            requiredHeight += conPeek(mapSections.lookup(ReportFooter), #posSectionHeight);
        }

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactureJour</Name>
				<Source><![CDATA[
    public FactureJour_RU parmFactureJour(FactureJour_RU _factureJour = factureJour)
    {
        factureJour = _factureJour;
        return factureJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeaderOnlyMode</Name>
				<Source><![CDATA[
    public boolean parmHeaderOnlyMode(boolean _headerOnlyMode = headerOnlyMode)
    {
        headerOnlyMode = _headerOnlyMode;

        return headerOnlyMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(FactureCorrective_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        return TotalCells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendCorrFactureToExcel_RU construct()
    {
        return new CustVendCorrFactureToExcel_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the <c>CustVendCorrFactureToExcel_RU</c> class.
    /// </summary>
    /// <returns>
    /// Returns the description of the <c>CustVendCorrFactureToExcel_RU</c> class.
    /// </returns>
    public static Description description()
    {
        return "@SYS4081862";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustVendCorrFactureToExcel_RU corrFactureReport;

        if (! _args)
        {
           throw error("@GLS103487");
        }

        if (! _args.dataset() == tableNum(FactureJour_RU))
        {
            throw error("@SYS18626");
        }

        corrFactureReport = CustVendCorrFactureToExcel_RU::construct();
        corrFactureReport.parmFactureJour(_args.record());
        corrFactureReport.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report name.
    /// </summary>
    /// <returns>The report name.</returns>
    public str getReportName()
    {
        return 'CorrFacture';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report output file name.
    /// </summary>
    /// <returns>The report output file name.</returns>
    public Filename getReportFileName()
    {
        return this.fileName() + this.fileNamePostfix();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>