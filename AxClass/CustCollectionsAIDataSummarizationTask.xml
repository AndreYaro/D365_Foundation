<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsAIDataSummarizationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Provides service to do Collections AI data summarization tasks
/// </summary>
[ExportMetadataAttribute(classStr(ProcessAutomationTask), classStr(CustCollectionsAIDataSummarizationTask))]
[ExportAttribute('Microsoft.Dynamics.AX.Application.ProcessAutomationTask')]
internal final class CustCollectionsAIDataSummarizationTask extends ProcessAutomationTask implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isProcessAutomationEnabledForThisTask</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isProcessAutomationEnabledForThisTask()
    {
        return CustCollectionsAIDataSummarizationFlight::instance().isEnabled() && 
            (CustAgingDetailSummary::hasCustAgingLegalEntityRecordsNotSummarized() || StatRepIntervalLineAsColumns::hasStatRepIntervalLineRecordsNotDefinedAsColumns());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfWorkToBePerformed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected List getListOfWorkToBePerformed()
    {
        List controllerList = new List(Types::Class);
        Batch batch;

        //verify that we do not have more than one process in execution if yes then we will skip this execution, we are using the classname.
        //Method to identify the execution so we should not change that and if we do we will need to do this change here too.
        select count(RecId) from batch
            where batch.Status == BatchStatus::Executing &&
            batch.ClassNumber == classNum(CustCollectionsAIDataSummarizationController);

        if (batch.RecId == 0)
        {            
            CustCollectionsAIDataSummarizationController controller = new CustCollectionsAIDataSummarizationController(
                classStr(CustCollectionsAIDataSummarizationController),
                methodStr(CustCollectionsAIDataSummarizationController, runDataSummarization),
                SysOperationExecutionMode::Synchronous);

            ProcessScheduleWorkItem processScheduleWorkItemContract = controller.getDataContractObject() as ProcessScheduleWorkItem;

            processScheduleWorkItemContract.initializeFromScheduleWorkItem(this.parmProcessScheduleWorkItem());

            controllerList.addEnd(controller);
        }

        return controllerList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchJobCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected BatchCaption batchJobCaption()
    {
        return "@AccountsReceivable:CustCollectionsAIDataSummarizationType";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>