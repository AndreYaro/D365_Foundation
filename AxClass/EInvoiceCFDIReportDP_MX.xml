<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceCFDIReportDP_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceReportDP_MX</c> class is a report data provider (RDP) class for the associated SSRS
/// <c>EInvoiceCFDIReport_MX</c> report.
/// </summary>
using Microsoft.Dynamics.ApplicationSuite.QRCode;
[
    SRSReportParameterAttribute(classStr(EInvoiceCFDIReportContract_MX))
]
public class EInvoiceCFDIReportDP_MX extends SRSReportDataProviderBase
{
    EInvoiceCFDIReportTmp_MX                eInvoiceCFDIReportTmp_MX;

    CompanyInfo                             companyInfo;
    EInvoiceJourBaseMap_MX                  eInvoiceJourMapping;
    EInvoiceTransBaseMap_MX                 eInvoiceTransMapping;
    EInvoiceXMLDocReader_MX                 xmlEInvReader;

    SalesFormLetter                         salesFormLetter;
    ProjFormLetter                          projFormLetter;

    SalesFormLetterReport_Invoice           salesFormLetterReport;
    SalesFormLetterReport_FreeText          salesFormLetterFreeTxt;
    SalesFormLetterReport_InvoiceProject    projFormLetterReport;

    CustInvoiceJour                         custInvoiceJour;
    ProjInvoiceJour                         projInvoiceJour;
    CustPostInvoice                         custPostInvoice;

    boolean                                 salesInvoice;
    boolean                                 freeTextInvoice;
    boolean                                 projectInvoice;
    boolean                                 isCustInvoiceJour;

    EInvoiceMail_MX                         eInvoiceMail;

    EInvoiceCFDIParameters_MX               eInvoiceParameters;

    PrintCopyOriginal                       printCopyOriginal;

    Filename                                filename;
    recId                                   recId;
    PaymentType_MX                          paymentType;

    const str                               strMN = ' M.N.';

    private AmountMST totalDiscount;
    private AmountMST invoiceSubTotal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getResponseChain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the "Cadena Original" that is a sequence of fields used to authenticate the XML
    /// </summary>
    /// <returns>
    /// Return the "Cadena Original" that is a sequence of fields used to authenticate the XML.
    /// </returns>
    private str getResponseChain()
    {
        str originalChain;

        #define.delimiter('|')

        originalChain = #delimiter + #delimiter;

        originalChain += "@Mexico:CFDICadenaOriginalVersion" + #delimiter;
        originalChain += eInvoiceJourMapping.eInvoiceUUID() + #delimiter;
        originalChain += DateTimeUtil::toStr(eInvoiceJourMapping.eInvoiceDateTimeStamp()) + #delimiter;
        originalChain += eInvoiceJourMapping.eInvoiceCFDISATStamp() + #delimiter;
        originalChain += eInvoiceJourMapping.eInvoiceSATCertificateNumber();

        originalChain += #delimiter + #delimiter;

        return originalChain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountInWords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total amount of the invoice in words, according to the language and currency of the customer or project.
    /// </summary>
    /// <returns>
    /// A string that contains the total amount of the invoice in words.
    /// </returns>
    private str amountInWords()
    {
        Amount amount = this.totalAmount();

        return (this.getLanguageId() == 'en-US') ?
            numeralsToTxt_EN(this.totalAmount()) :
            numeralsToTxt_ES(this.totalAmount(), GenderMaleFemale::Male, true, '', true, this.shouldInsertPesosText());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLanguageId</Name>
				<Source><![CDATA[
    private str getLanguageId()
    {
        return custInvoiceJour.RecId ? custInvoiceJour.LanguageId : projInvoiceJour.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInsertPesosText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the text "Pesos" should be inserted into the invoice amount in words.
    /// </summary>
    /// <returns>
    /// True if the currency is Mexican, false otherwise.
    /// </returns>
    private boolean shouldInsertPesosText()
    {
        boolean isMexicanCurrency =
            eInvoiceJourMapping.currencyCode() == enum2Symbol(enumNum(ISOCurrencyCodes), ISOCurrencyCodes::MXN);

        return isMexicanCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callQRCodeEncoder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a QRCode file for a given input.
    /// </summary>
    /// <param name="_inputToEncode">
    /// The string to be encoded.
    /// </param>
    /// <returns>
    /// The QRCode file path as string.
    /// </returns>
    /// <remarks>
    /// The QRCode file is generated by an assembly in a temp folder.
    /// </remarks>
    str callQRCodeEncoder(str _inputToEncode)
    {
        System.String   returnData;
        Encoder         qrCodeEncoder;

        try
        {
            qrCodeEncoder = new Encoder();

            returnData = qrCodeEncoder.GetTempFile(_inputToEncode);
        }
        catch (Exception::CLRError)
        {
            error(CLRInterop::getLastException().ToString());
        }

        return returnData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyCityZipStateCountry</Name>
				<Source><![CDATA[
    private str companyCityZipStateCountry()
    {
        str companyAddress;

        if (eInvoiceJourMapping.emitentCity())
        {
            companyAddress += eInvoiceJourMapping.emitentCity();
        }

        if (eInvoiceJourMapping.emitentZipCode())
        {
            companyAddress += ', ' + eInvoiceJourMapping.emitentZipCode();
        }

        if (eInvoiceJourMapping.emitentState())
        {
            companyAddress +=  ', ' + eInvoiceJourMapping.emitentState();
        }

        if (eInvoiceJourMapping.emitentCountryRegion())
        {
            companyAddress +=  ', ' + eInvoiceJourMapping.emitentCountryRegion();
        }

        return companyAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyCountryRegion</Name>
				<Source><![CDATA[
    private LogisticsAddressCountryRegionShortName companyCountryRegion()
    {
        return eInvoiceJourMapping.emitentCountryRegion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyCounty</Name>
				<Source><![CDATA[
    private LogisticsAddressStateId companyCounty()
    {
        return eInvoiceJourMapping.emitentCounty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyName</Name>
				<Source><![CDATA[
    private str companyName()
    {
        return companyInfo.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyState</Name>
				<Source><![CDATA[
    private LogisticsAddressStatename companyState()
    {
        return eInvoiceJourMapping.emitentState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyStreet</Name>
				<Source><![CDATA[
    private LogisticsAddressStreet companyStreet()
    {
        return eInvoiceJourMapping.emitentStreet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyStreetAndCounty</Name>
				<Source><![CDATA[
    private str companyStreetAndCounty()
    {
        str companyAddress;

        if (this.companyStreet())
        {
            companyAddress += this.companyStreet();
        }

        if (this.companyCounty())
        {
            companyAddress += ', '  + this.companyCounty();
        }

        return this.formatAddress(companyAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyZipCode</Name>
				<Source><![CDATA[
    private LogisticsAddressZipCodeId companyZipCode()
    {
        return eInvoiceJourMapping.emitentZipCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a instance of a <c>EInvoiceJourBaseMap_MX</c> class.
    /// </summary>
    /// <param name="_electronicInvoiceJour_MX">
    /// The <c>EInvoiceJour_MX</c> to construct the <c>EInvoiceJourBaseMap_MX</c> object.
    /// </param>
    /// <returns>
    /// The <c>EInvoiceJourBaseMap_MX</c> object.
    /// </returns>
    protected EInvoiceJourBaseMap_MX constructMap(EInvoiceJour_MX _electronicInvoiceJour_MX)
    {
        return EInvoiceJourBaseMap_MX::construct(_electronicInvoiceJour_MX);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesFromMarkup</Name>
				<Source><![CDATA[
    private void createLinesFromMarkup(List _list)
    {
        ListEnumerator  listEnumerator;

        if (!_list)
        {
            return;
        }

        listEnumerator = _list.getEnumerator();

        while (listEnumerator.moveNext())
        {
            this.insertLinesFromMarkup(listEnumerator.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the company address
    /// </summary>
    /// <param name="companyAddress">The company address</param>
    /// <returns>The formatted address</returns>
    public str formatAddress(str companyAddress)
    {
        while (strFind(companyAddress, '\n', 0, strLen(companyAddress)))
        {
            companyAddress = strIns(companyAddress, ' ', strFind(companyAddress, '\n', 0, strLen(companyAddress)));
            companyAddress = strDel(companyAddress, strFind(companyAddress, '\n', 0, strLen(companyAddress)), 1);
        }

        return companyAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEInvoiceReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from <c>SalesInvoiceTmp</c> Temp Table.
    /// </summary>
    /// <returns>
    /// Data from <c>SalesInvoiceTmp</c>.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(EInvoiceCFDIReportTmp_MX))]
    public EInvoiceCFDIReportTmp_MX getEInvoiceReportTmp()
    {
        select * from eInvoiceCFDIReportTmp_MX;
        return eInvoiceCFDIReportTmp_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQRCodeString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string to generate a QRCode.
    /// </summary>
    /// <returns>
    /// A string to generate a QRCode.
    /// </returns>
    str getQRCodeString()
    {
        str             UUID;
        str             qrCodeString;
        str             rfcIssuer;
        str             rfcCustomer;
        str             totalAmount;
        str             digitalStamp;
        CustTable       custTable = eInvoiceJourMapping.getCustTable();
        const str       MapURL = 'https://verificacfdi.facturaelectronica.sat.gob.mx/default.aspx';

        rfcIssuer = strfmt('%1%2','?re=',companyInfo.RFC_MX);

        if (custTable.ForeignTaxRegistration_MX)
        {
            rfcCustomer = strFmt('%1%2','&nr=',custTable.ForeignTaxRegistration_MX);
        }
        else
        {
            rfcCustomer = strFmt('%1%2','&rr=',eInvoiceJourMapping.invoiceRFC());
        }

        if (eInvoiceJourMapping.totalAmount() < 0)
        {
            totalAmount = strfmt('%1%2','&tt=-',strRFix(num2str(abs(eInvoiceJourMapping.totalAmount()),10,6,0,0),17,'0'));
        }
        else
        {
            totalAmount = strfmt('%1%2','&tt=',strRFix(num2str(eInvoiceJourMapping.totalAmount(),10,6,0,0),17,'0'));
        }

        UUID = strfmt('%1%2','&id=',eInvoiceJourMapping.eInvoiceUUID());

        digitalStamp = strFmt('%1%2','&fe=',subStr(eInvoiceJourMapping.eInvoiceCFDIStamp(), strLen(eInvoiceJourMapping.eInvoiceCFDIStamp()), -8));

        qrCodeString = MapURL + rfcIssuer + rfcCustomer + totalAmount + UUID + digitalStamp;

        return qrCodeString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLinesFromMarkup</Name>
				<Source><![CDATA[
    private void insertLinesFromMarkup(MarkupTrans _markupTrans)
    {
        utcdatetime tranportationDateTime = eInvoiceJourMapping.transportationDateTime() ? eInvoiceJourMapping.transportationDateTime() : eInvoiceJourMapping.documentDateTime();

        eInvoiceCFDIReportTmp_MX.CertificateSerialNumber = eInvoiceJourMapping.certificateSerialNumber();
        eInvoiceCFDIReportTmp_MX.CompanyCity = eInvoiceJourMapping.emitentCity();
        eInvoiceCFDIReportTmp_MX.DeliveryCounty = eInvoiceJourMapping.deliveryCounty();
        eInvoiceCFDIReportTmp_MX.InvoiceId = eInvoiceJourMapping.invoiceId();
        eInvoiceCFDIReportTmp_MX.InvoicingName = eInvoiceJourMapping.invoicingName();
        eInvoiceCFDIReportTmp_MX.InvoiceSeries = eInvoiceJourMapping.invoiceSeries();
        eInvoiceCFDIReportTmp_MX.AuthorizationYear = eInvoiceJourMapping.authorizationYear();
        eInvoiceCFDIReportTmp_MX.AuthorizationCode = eInvoiceJourMapping.authorizationCode();
        eInvoiceCFDIReportTmp_MX.DeliveryCompanyRFC = eInvoiceJourMapping.invoiceRFC();
        eInvoiceCFDIReportTmp_MX.DeliveryCity = eInvoiceJourMapping.deliveryCity();
        eInvoiceCFDIReportTmp_MX.DeliveryZipCode = eInvoiceJourMapping.deliveryZipCode();
        eInvoiceCFDIReportTmp_MX.DeliveryStreet = this.formatAddress(eInvoiceJourMapping.deliveryStreet());
        eInvoiceCFDIReportTmp_MX.InvoiceDateTime = DateTimeUtil::toStr(tranportationDateTime);
        eInvoiceCFDIReportTmp_MX.CompanyRFC = companyInfo.Rfc_MX;
        eInvoiceCFDIReportTmp_MX.CompanyTaxRegime = companyInfo.TaxRegimeCode_MX;
        eInvoiceCFDIReportTmp_MX.CompanyTaxRegimeDesc = EInvoiceExtCodeTable_MX::find(
            companyInfo.TaxRegimeCode_MX,
            EInvoiceExtCodeType_MX::TaxRegime,
            DateTimeUtil::date(tranportationDateTime)).Description;
        eInvoiceCFDIReportTmp_MX.CompanyStreetAndCounty = this.companyStreetAndCounty();
        eInvoiceCFDIReportTmp_MX.CompanyState = this.companyState();
        eInvoiceCFDIReportTmp_MX.CompanyCountryRegion = this.companyCountryRegion();
        eInvoiceCFDIReportTmp_MX.CompanyCityZipStateCountry = this.companyCityZipStateCountry();
        eInvoiceCFDIReportTmp_MX.CompanyStreet = this.companyStreet();
        eInvoiceCFDIReportTmp_MX.CompanyZipCode = this.companyZipCode();
        eInvoiceCFDIReportTmp_MX.CompanyCounty = this.companyCounty();
        eInvoiceCFDIReportTmp_MX.OriginalString = eInvoiceJourMapping.eInvoiceOriginalString();
        eInvoiceCFDIReportTmp_MX.Discounts = abs(eInvoiceJourMapping.totalDiscountAmount());
        eInvoiceCFDIReportTmp_MX.ieps = abs(eInvoiceJourMapping.totalTaxAmountRegular(TaxType_MX::IEPS));
        eInvoiceCFDIReportTmp_MX.ivaWithheld = abs(eInvoiceJourMapping.totalTaxAmountRetained(TaxType_MX::IVA));
        eInvoiceCFDIReportTmp_MX.isrWithheld = abs(eInvoiceJourMapping.totalTaxAmountRetained(TaxType_MX::ISR));
        eInvoiceCFDIReportTmp_MX.ivaTax = abs(eInvoiceJourMapping.totalTaxAmountRegular(TaxType_MX::IVA));
        eInvoiceCFDIReportTmp_MX.TotalAmount = this.totalAmount();
        eInvoiceCFDIReportTmp_MX.SubTotal = abs(eInvoiceJourMapping.subTotal());

        if (eInvoiceJourMapping.currencyCode() == Ledger::accountingCurrency() ||
            eInvoiceJourMapping.eInvoiceJour().PrintInMST)
        {
            eInvoiceCFDIReportTmp_MX.AmountInWords = this.amountInWords() + strMN;
            eInvoiceCFDIReportTmp_MX.LineAmount = abs(CurrencyExchangeHelper::mstAmount(_markupTrans.CalculatedAmount, _markupTrans.CurrencyCode, _markupTrans.TransDate));
        }
        else
        {
            eInvoiceCFDIReportTmp_MX.AmountInWords = this.amountInWords() + ' ' + Currency::find(eInvoiceJourMapping.currencyCode()).CurrencyCodeISO;
            eInvoiceCFDIReportTmp_MX.LineAmount = abs(_markupTrans.CalculatedAmount);
        }

        eInvoiceCFDIReportTmp_MX.UnitPrice = eInvoiceCFDIReportTmp_MX.LineAmount;
  
        eInvoiceCFDIReportTmp_MX.Description = _markupTrans.markupTable().Txt;
        eInvoiceCFDIReportTmp_MX.Quantity = 1;
        eInvoiceCFDIReportTmp_MX.TypeOfPrint = this.typeOfPrint();
        eInvoiceCFDIReportTmp_MX.CompanyName = this.companyName();
        eInvoiceCFDIReportTmp_MX.InvoiceUUID = eInvoiceJourMapping.eInvoiceUUID();
        eInvoiceCFDIReportTmp_MX.SATCertificateNumber = eInvoiceJourMapping.eInvoiceSATCertificateNumber();
        eInvoiceCFDIReportTmp_MX.QRCode = this.invoiceQRCode();
        eInvoiceCFDIReportTmp_MX.CFDIStamp = eInvoiceJourMapping.eInvoiceCFDIStamp();
        eInvoiceCFDIReportTmp_MX.CFDISATStamp = eInvoiceJourMapping.eInvoiceCFDISATStamp();
        eInvoiceCFDIReportTmp_MX.cfdiDateTimeStamp = DateTimeUtil::toStr(EInvoiceDocState_MX::applyTimeZoneOffset(eInvoiceJourMapping.eInvoiceJour().cfdiDateTimeStamp));
        eInvoiceCFDIReportTmp_MX.PaymMethodDesc = EInvoiceExtCodeTable_MX::find(
            eInvoiceJourMapping.orderOfPayment(),
            EInvoiceExtCodeType_MX::PaymentMethod,
            DateTimeUtil::date(eInvoiceJourMapping.documentDateTime())).Description;
        eInvoiceCFDIReportTmp_MX.PaymentTypeDesc = enum2str(paymentType);
        eInvoiceCFDIReportTmp_MX.ZipCode = eInvoiceJourMapping.emitentZipCode();

        eInvoiceCFDIReportTmp_MX.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecord</Name>
				<Source><![CDATA[
    private void insertRecord()
    {
        const str Si = 'Sí';
        const str No = 'No';

        CustTable custTable = eInvoiceJourMapping.getCustTable();

        if (custTable && custTable.CFDISkipIEPSTaxes_MX == NoYes::Yes)
        {
            Amount iepsAmount = this.getIEPSAdjustment();
            Amount iepsAmountPerUnit = this.getIEPSAdjustment(true);

            Qty qty = eInvoiceTransMapping.qty();

            if (!qty)
            {
                qty = 1;
            }

            real discountMultiplier;
            real discountTotalMultiplier;
            Amount invoiceAmount = eInvoiceTransMapping.amount();
            Amount subTotalNoDiscount = eInvoiceJourMapping.subTotal() - eInvoiceJourMapping.totalDiscountAmount();

            if (invoiceAmount)
            {
                discountMultiplier = (eInvoiceTransMapping.amount() + eInvoiceTransMapping.discountAmount()) / invoiceAmount;
            }

            if (subTotalNoDiscount)
            {
                discountTotalMultiplier = eInvoiceJourMapping.subTotal() / subTotalNoDiscount;
            }

            eInvoiceCFDIReportTmp_MX.ieps = 0;
            eInvoiceCFDIReportTmp_MX.LineAmount = abs(eInvoiceTransMapping.amount() + eInvoiceTransMapping.discountAmount() - CurrencyExchangeHelper::price(iepsAmount * discountMultiplier, eInvoiceJourMapping.currencyCode()) - iepsAmountPerUnit);
            eInvoiceCFDIReportTmp_MX.UnitPrice = abs(eInvoiceTransMapping.unitPrice() - (CurrencyExchangeHelper::price(iepsAmount * discountMultiplier, eInvoiceJourMapping.currencyCode()) + iepsAmountPerUnit) / qty);
            totalDiscount += abs(eInvoiceTransMapping.discountAmount() +  CurrencyExchangeHelper::price(iepsAmount * (1 - discountMultiplier), eInvoiceJourMapping.currencyCode()));
        }
        else
        {
            eInvoiceCFDIReportTmp_MX.ieps = abs(eInvoiceJourMapping.totalTaxAmountRegular(TaxType_MX::IEPS));
            eInvoiceCFDIReportTmp_MX.LineAmount = abs(eInvoiceTransMapping.amount() + eInvoiceTransMapping.discountAmount());
            eInvoiceCFDIReportTmp_MX.UnitPrice = abs(eInvoiceTransMapping.unitPrice());

            totalDiscount += abs(eInvoiceTransMapping.discountAmount());
        }

        invoiceSubTotal += eInvoiceCFDIReportTmp_MX.LineAmount;

        eInvoiceCFDIReportTmp_MX.CertificateSerialNumber = eInvoiceJourMapping.certificateSerialNumber();
        eInvoiceCFDIReportTmp_MX.CompanyCity = eInvoiceJourMapping.emitentCity();
        eInvoiceCFDIReportTmp_MX.DeliveryCounty = eInvoiceJourMapping.deliveryCounty();
        eInvoiceCFDIReportTmp_MX.InvoiceId = eInvoiceJourMapping.invoiceId();
        eInvoiceCFDIReportTmp_MX.InvoicingName = eInvoiceJourMapping.invoicingName();
        eInvoiceCFDIReportTmp_MX.InvoiceSeries = eInvoiceJourMapping.invoiceSeries();
        eInvoiceCFDIReportTmp_MX.AuthorizationYear = eInvoiceJourMapping.authorizationYear();
        eInvoiceCFDIReportTmp_MX.AuthorizationCode = eInvoiceJourMapping.authorizationCode();
        eInvoiceCFDIReportTmp_MX.DeliveryCompanyRFC = eInvoiceJourMapping.invoiceRFC();
        eInvoiceCFDIReportTmp_MX.DeliveryCity = eInvoiceJourMapping.deliveryCity();
        eInvoiceCFDIReportTmp_MX.DeliveryZipCode = eInvoiceJourMapping.deliveryZipCode();
        eInvoiceCFDIReportTmp_MX.DeliveryStreet = this.formatAddress(eInvoiceJourMapping.deliveryStreet());
        eInvoiceCFDIReportTmp_MX.InvoiceDateTime = DateTimeUtil::toStr(eInvoiceJourMapping.documentDateTime());
        eInvoiceCFDIReportTmp_MX.CompanyRFC = companyInfo.Rfc_MX;
        eInvoiceCFDIReportTmp_MX.CompanyTaxRegime = companyInfo.TaxRegimeCode_MX;
        eInvoiceCFDIReportTmp_MX.PaymType = eInvoiceJourMapping.eInvoicePurpose();
        eInvoiceCFDIReportTmp_MX.PaymMethod = eInvoiceJourMapping.eInvoicePaymMethod();
        eInvoiceCFDIReportTmp_MX.CompanyTaxRegimeDesc = EInvoiceExtCodeTable_MX::find(
            companyInfo.TaxRegimeCode_MX,
            EInvoiceExtCodeType_MX::TaxRegime,
            DateTimeUtil::date(eInvoiceJourMapping.documentDateTime())).Description;
        eInvoiceCFDIReportTmp_MX.CompanyStreetAndCounty = this.companyStreetAndCounty();
        eInvoiceCFDIReportTmp_MX.CompanyState = this.companyState();
        eInvoiceCFDIReportTmp_MX.CompanyCountryRegion = this.companyCountryRegion();
        eInvoiceCFDIReportTmp_MX.CompanyCityZipStateCountry = this.companyCityZipStateCountry();
        eInvoiceCFDIReportTmp_MX.CompanyStreet = this.companyStreet();
        eInvoiceCFDIReportTmp_MX.CompanyZipCode = this.companyZipCode();
        eInvoiceCFDIReportTmp_MX.CompanyCounty = this.companyCounty();
        eInvoiceCFDIReportTmp_MX.OriginalString = this.getResponseChain();
        eInvoiceCFDIReportTmp_MX.ivaWithheld = abs(eInvoiceJourMapping.totalTaxAmountRetained(TaxType_MX::IVA));
        eInvoiceCFDIReportTmp_MX.isrWithheld = abs(eInvoiceJourMapping.totalTaxAmountRetained(TaxType_MX::ISR));
        eInvoiceCFDIReportTmp_MX.ivaTax = abs(eInvoiceJourMapping.totalTaxAmountRegular(TaxType_MX::IVA));
        eInvoiceCFDIReportTmp_MX.TotalAmount = this.totalAmount();
        eInvoiceCFDIReportTmp_MX.AmountInWords = this.amountInWords() +
            (eInvoiceJourMapping.currencyCode() == Ledger::accountingCurrency() ||
             eInvoiceJourMapping.eInvoiceJour().PrintInMST  ?
             strMN                                        :
             ' ' + Currency::find(eInvoiceJourMapping.currencyCode()).CurrencyCodeISO);
        eInvoiceCFDIReportTmp_MX.Description = eInvoiceTransMapping.itemName();
        eInvoiceCFDIReportTmp_MX.Quantity = eInvoiceTransMapping.qty();
        eInvoiceCFDIReportTmp_MX.Unit = eInvoiceTransMapping.unit();
        eInvoiceCFDIReportTmp_MX.TypeOfPrint = this.typeOfPrint();
        eInvoiceCFDIReportTmp_MX.CompanyName = this.companyName();
        eInvoiceCFDIReportTmp_MX.InvoiceUUID = eInvoiceJourMapping.eInvoiceUUID();
        eInvoiceCFDIReportTmp_MX.SATCertificateNumber = eInvoiceJourMapping.eInvoiceSATCertificateNumber();
        eInvoiceCFDIReportTmp_MX.QRCode = this.invoiceQRCode();
        eInvoiceCFDIReportTmp_MX.CFDIStamp = eInvoiceJourMapping.eInvoiceCFDIStamp();
        eInvoiceCFDIReportTmp_MX.CFDISATStamp = eInvoiceJourMapping.eInvoiceCFDISATStamp();
        eInvoiceCFDIReportTmp_MX.cfdiDateTimeStamp = DateTimeUtil::toStr(EInvoiceDocState_MX::applyTimeZoneOffset(eInvoiceJourMapping.eInvoiceJour().cfdiDateTimeStamp));
        eInvoiceCFDIReportTmp_MX.PaymMethodDesc = EInvoiceExtCodeTable_MX::find(
            eInvoiceJourMapping.orderOfPayment(),
            EInvoiceExtCodeType_MX::PaymentMethod,
            DateTimeUtil::date(eInvoiceJourMapping.documentDateTime())).Description;
        eInvoiceCFDIReportTmp_MX.PaymentTypeDesc = enum2str(paymentType);

        if (eInvoiceJourMapping.isCartaPorteUsed())
        {
            eInvoiceCFDIReportTmp_MX.TransCardIncluded = Si;
            eInvoiceCFDIReportTmp_MX.NetWeight = eInvoiceTransMapping.totalWeight();
            eInvoiceCFDIReportTmp_MX.DeliveryDateTime = DateTimeUtil::toStr(DateTimeUtil::addHours(
                eInvoiceJourMapping.documentDateTime(),
                eInvoiceJourMapping.timeTraveled()));
            eInvoiceCFDIReportTmp_MX.TravelDistance = eInvoiceJourMapping.distanceTraveled();
            eInvoiceCFDIReportTmp_MX.IsHazardous = eInvoiceTransMapping.isHazardous() ? Si : No;
            eInvoiceCFDIReportTmp_MX.HazardousMaterialType = eInvoiceTransMapping.hazardousMaterialType();
            eInvoiceCFDIReportTmp_MX.ContainerType = eInvoiceTransMapping.containerType();
            eInvoiceCFDIReportTmp_MX.InsuranceVendor = eInvoiceJourMapping.insuranceVendor();
            eInvoiceCFDIReportTmp_MX.PermissionType = eInvoiceJourMapping.permissionType();
            eInvoiceCFDIReportTmp_MX.PermissionID = eInvoiceJourMapping.permissionID();
            eInvoiceCFDIReportTmp_MX.InsurancePolicyNumber = eInvoiceJourMapping.insurancePolicyNum();
            eInvoiceCFDIReportTmp_MX.TruckSerialNum = eInvoiceJourMapping.truckSerialNum();
            eInvoiceCFDIReportTmp_MX.TruckConfig = eInvoiceJourMapping.truckConfig();
            eInvoiceCFDIReportTmp_MX.TruckYear = eInvoiceJourMapping.truckModelYear();
            eInvoiceCFDIReportTmp_MX.TrailerType = eInvoiceJourMapping.trailer1Config();
            eInvoiceCFDIReportTmp_MX.TrailerNumber = eInvoiceJourMapping.trailer1SerialNum();
            eInvoiceCFDIReportTmp_MX.AdditionalTrailerType = eInvoiceJourMapping.trailer2Config();
            eInvoiceCFDIReportTmp_MX.AdditionalTrailerNumber = eInvoiceJourMapping.trailer2SerialNum();
            eInvoiceCFDIReportTmp_MX.EnvironmentalDamageInsuranceVendor = eInvoiceJourMapping.environmentalDamageInsuranceVendor();
            eInvoiceCFDIReportTmp_MX.EnvironmentalDamageInsurancePolicyNum = eInvoiceJourMapping.environmentalDamageInsurancePolicyNum();

            HcmWorker hcmWorker = HcmWorker::find(eInvoiceJourMapping.worker1());
            eInvoiceCFDIReportTmp_MX.Worker1Name = eInvoiceJourMapping.worker1Name();
            eInvoiceCFDIReportTmp_MX.Worker1NationalId = eInvoiceJourMapping.worker1NationalId();
            eInvoiceCFDIReportTmp_MX.Worker1DriverLicense = eInvoiceJourMapping.worker1DriverLicense();
            eInvoiceCFDIReportTmp_MX.Worker1CountryRegion = eInvoiceJourMapping.worker1CountryRegion();

            LogisticsPostalAddress workerAddress = LogisticsPostalAddress::findByAddress_IN(hcmWorker.primaryAddress());
            eInvoiceCFDIReportTmp_MX.Worker1State = workerAddress.State;
            eInvoiceCFDIReportTmp_MX.Worker1County = workerAddress.County;
            eInvoiceCFDIReportTmp_MX.Worker1State = workerAddress.State;
            eInvoiceCFDIReportTmp_MX.Worker1Street = workerAddress.Street;
            eInvoiceCFDIReportTmp_MX.Worker1ZipCode = workerAddress.ZipCode;

            hcmWorker = HcmWorker::find(eInvoiceJourMapping.worker2());
            eInvoiceCFDIReportTmp_MX.Worker2Name = eInvoiceJourMapping.worker2Name();
            eInvoiceCFDIReportTmp_MX.Worker2NationalId = eInvoiceJourMapping.worker2NationalId();
            eInvoiceCFDIReportTmp_MX.Worker2DriverLicense = eInvoiceJourMapping.worker2DriverLicense();
            eInvoiceCFDIReportTmp_MX.Worker2CountryRegion = eInvoiceJourMapping.worker2CountryRegion();

            workerAddress = LogisticsPostalAddress::findByAddress_IN(hcmWorker.primaryAddress());
            eInvoiceCFDIReportTmp_MX.Worker2State = workerAddress.State;
            eInvoiceCFDIReportTmp_MX.Worker2County = workerAddress.County;
            eInvoiceCFDIReportTmp_MX.Worker2State = workerAddress.State;
            eInvoiceCFDIReportTmp_MX.Worker2Street = workerAddress.Street;
            eInvoiceCFDIReportTmp_MX.Worker2ZipCode = workerAddress.ZipCode;
        }
        else
        {
            eInvoiceCFDIReportTmp_MX.TransCardIncluded = No;
        }

        eInvoiceCFDIReportTmp_MX.insert();

        this.createLinesFromMarkup(eInvoiceTransMapping.markupTransList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceQRCode</Name>
				<Source><![CDATA[
    private container invoiceQRCode()
    {
        System.Drawing.Bitmap bm = null;
        try
        {
            var qrCodeEncoder = new Encoder();
            bm = qrCodeEncoder.Encode(this.getQRCodeString());
        }
        catch (Exception::CLRError)
        {
            //BP Deviation documented
            error(CLRInterop::getLastException().ToString());
        }
        using (var stream = new System.IO.MemoryStream())
        {
            bm.Save(stream, System.Drawing.Imaging.ImageFormat::Bmp);
            bm.Dispose();
            return Binary::constructFromMemoryStream(stream).getContainer();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord</Name>
				<Source><![CDATA[
    private void processRecord()
    {
        EInvoiceJour_MX electronicInvoiceJour_MX;

        electronicInvoiceJour_MX = EInvoiceJour_MX::find(recId);
        eInvoiceJourMapping = this.constructMap(electronicInvoiceJour_MX);
        eInvoiceJourMapping.parmIsPrint(true);

        paymentType = str2int(eInvoiceJourMapping.methodOfPayment());

        xmlEInvReader = EInvoiceXMLDocReader_MX::construct(electronicInvoiceJour_MX);

        while (eInvoiceJourMapping.nextLine())
        {
            eInvoiceTransMapping = eInvoiceJourMapping.currentLine();
            eInvoiceTransMapping.parmIsPrint(true);
            this.insertRecord();
        }

        update_recordSet eInvoiceCFDIReportTmp_MX
        setting
            SubTotal = invoiceSubTotal,
            Discounts = totalDiscount;

        this.createLinesFromMarkup(eInvoiceJourMapping.markupTransList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic. Calls helper methods and inserts data to temporary table.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by
    /// SSRS at runtime. The method should compute data and populate the data tables that will be
    /// returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        EInvoiceCFDIReportContract_MX contract;

        companyInfo = CompanyInfo::find();
        contract = this.parmDataContract() as EInvoiceCFDIReportContract_MX;
        recId = contract.parmRecordId();
        printCopyOriginal =  contract.parmPrintCopyOriginal();

        this.processRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount</Name>
				<Source><![CDATA[
    private Amount totalAmount()
    {
        return abs(eInvoiceJourMapping.totalAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeOfPrint</Name>
				<Source><![CDATA[
    private str typeOfPrint()
    {
        if (printCopyOriginal == PrintCopyOriginal::Copy)
        {
            return "@SYS35043";
        }
        else
        {
            return "@SYS5301";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIEPSAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the IEPS amount for the tax transaction.
    /// </summary>
    /// <returns>
    /// The IEPS amount.
    /// </returns>
    private Amount getIEPSAdjustment(boolean _amountPerUnit = false)
    {
        TaxTrans taxTrans;
        TaxTable taxTable;

        select sum(TaxAmount), sum(SourceRegulateAmountCur) from taxTrans
            where taxTrans.SourceTableId == eInvoiceTransMapping.sourceTableId()
                && taxTrans.SourceRecId == eInvoiceTransMapping.sourceRecId()
        exists join taxTable
            where taxTable.TaxCode == taxTrans.TaxCode
                && taxTable.TaxType_MX == TaxType_MX::IEPS
                && taxTable.TaxType_MX == TaxType_MX::IEPS
                && ((_amountPerUnit && taxTable.TaxBase == TaxBaseType::AmountByUnit) || (!_amountPerUnit && taxTable.TaxBase != TaxBaseType::AmountByUnit));

        return eInvoiceJourMapping.eInvoiceJour().PrintInMST == NoYes::Yes
            ? taxTrans.TaxAmount : taxTrans.SourceRegulateAmountCur;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>