<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMerchandisingCopilotCapiProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Xrm.Sdk;

/// <summary>
/// The util class that provides access to CAPI for merchandising scenarios.
/// </summary>
internal final class RetailMerchandisingCopilotCapiProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getConfigurationRisksSummaries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets configuration risks summaries for a given channel.
    /// </summary>
    /// <param name = "_args">The container that contains the channel's internal organization record.</param>
    /// <returns>The risks summaries in a container - [productRisksSummary, categoryRisksSummary, catalogRisksSummary]</returns>
    internal static container getConfigurationRisksSummaries(container _args)
    {
        // Extract input parameters.
        OMInternalOrganization omInternalOrganization;
        guid uniqueCorrelationId;
        [omInternalOrganization, uniqueCorrelationId] = _args;

        // If the last validation completed after AI summaries were cached, we should clear the cache since the cache value is based on stale validation result.
        RetailMerchandisingCopilotCapiProvider::removeRisksSummariesCacheIfStale(omInternalOrganization);
        
        str risksSummaries, errorCode;

        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(RetailMerchandisingCopilotCapiProvider));
        using (SysInstrumentationActivityContext activityContext = logger.activityContext(staticMethodStr(RetailMerchandisingCopilotCapiProvider, getConfigurationRisksSummaries), classStr(RetailMerchandisingCopilotCapiProvider))
            .addCustomProperty('PrincipalObjectId', guid2Str(curUserGuid()))
            .addCustomProperty('ActivityId', guid2Str(getCurrentThreadActivityId()))
            .addCustomProperty('UniqueCorrelationId', guid2Str(uniqueCorrelationId)))

        {
            boolean isSuccessful = false, noDataToSummarize = false, isLanguageError = false;

            if (AppCopilotDataverseUtility::canMakeAICall(RetailMerchandisingCopilotSummaryConstants::GenerateConfigurationRisksSummariesApiName, RetailMerchandisingCopilotSummaryConstants::ScmAISolutionName))
            {
                // Call CAPI to generate risks summaries.
                ParameterCollection capiResponse = RetailMerchandisingCopilotCapiProvider::generateConfigurationRisksSummaries(omInternalOrganization, uniqueCorrelationId);

                if (capiResponse != null &&
                    (capiResponse.ContainsKey(RetailMerchandisingCopilotSummaryConstants::RisksSummariesResponsePropertyName) || capiResponse.ContainsKey(RetailMerchandisingCopilotSummaryConstants::ErrorCodePropertyName)))
                {
                    if (capiResponse.ContainsKey(RetailMerchandisingCopilotSummaryConstants::ErrorCodePropertyName))
                    {
                        errorCode = capiResponse.get_Item(RetailMerchandisingCopilotSummaryConstants::ErrorCodePropertyName);
                    }
                    
                    if (capiResponse.ContainsKey(RetailMerchandisingCopilotSummaryConstants::RisksSummariesResponsePropertyName))
                    {
                        risksSummaries = capiResponse.get_Item(RetailMerchandisingCopilotSummaryConstants::RisksSummariesResponsePropertyName);
                    }

                    if (errorCode == RetailMerchandisingCopilotSummaryConstants::LanguageNotSupportedErrorCode)
                    {
                        risksSummaries = RetailMerchandisingCopilotSummaryConstants::LanguageNotSupportedErrorCode;
                        isLanguageError = true;
                    }
                    else if (errorCode != '')
                    {
                        logger.logError(strFmt('Summary returned error code %1', errorCode));
                    }
                    else if (risksSummaries == RetailMerchandisingCopilotSummaryConstants::NoDataToSummarize)
                    {
                        noDataToSummarize = true;
                    }
                    else if (risksSummaries != '')
                    {
                        isSuccessful = true;
                    }
                    else
                    {
                        logger.logError('Summary returned blank response');
                    }
                }
                else
                {
                    risksSummaries = RetailMerchandisingCopilotSummaryConstants::AISummaryUnavailableErrorCode;
                    logger.logError('Result collection null or missing response');
                }
            }
            else
            {
                risksSummaries = RetailMerchandisingCopilotSummaryConstants::AISummaryUnavailableErrorCode;
                logger.logError('AI summary unavailable');
            }

            activityContext.addCustomProperty('IsSuccessful', any2Str(isSuccessful));
            activityContext.addCustomProperty('NoDataToSummarize', any2Str(noDataToSummarize));
            activityContext.addCustomProperty('IsLanguageError', any2Str(isLanguageError));
        }

        return [risksSummaries];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChannelOverview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the overview for channel.
    /// </summary>
    /// <param name = "_args">The container that contains the channel's internal organization record.</param>
    /// <returns>The container that contains the channel overview.</returns>
    internal static container getChannelOverview(container _args)
    {
        // Extract input parameters.
        OMInternalOrganization omInternalOrganization;
        guid uniqueCorrelationId;
        [omInternalOrganization, uniqueCorrelationId] = _args;

        str channelOverview, errorCode;

        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(RetailMerchandisingCopilotCapiProvider));
        using (SysInstrumentationActivityContext activityContext = logger.activityContext(staticMethodStr(RetailMerchandisingCopilotCapiProvider, getChannelOverview), classStr(RetailMerchandisingCopilotCapiProvider))
            .addCustomProperty('PrincipalObjectId', guid2Str(curUserGuid()))
            .addCustomProperty('ActivityId', guid2Str(getCurrentThreadActivityId()))
            .addCustomProperty('UniqueCorrelationId', guid2Str(uniqueCorrelationId)))
        {
            boolean isSuccessful = false, noDataToSummarize = false, isLanguageError = false;

            if (AppCopilotDataverseUtility::canMakeAICall(RetailMerchandisingCopilotSummaryConstants::GenerateChannelOverviewApiName, RetailMerchandisingCopilotSummaryConstants::ScmAISolutionName))
            {
                // Call CAPI to generate channel overview.
                ParameterCollection capiResponse = RetailMerchandisingCopilotCapiProvider::generateChannelOverview(omInternalOrganization, uniqueCorrelationId);

                if (capiResponse != null &&
                    (capiResponse.ContainsKey(RetailMerchandisingCopilotSummaryConstants::ChannelOverviewResponsePropertyName) || capiResponse.ContainsKey(RetailMerchandisingCopilotSummaryConstants::ErrorCodePropertyName)))
                {
                    if (capiResponse.ContainsKey(RetailMerchandisingCopilotSummaryConstants::ErrorCodePropertyName))
                    {
                        errorCode = capiResponse.get_Item(RetailMerchandisingCopilotSummaryConstants::ErrorCodePropertyName);
                    }
                    
                    if (capiResponse.ContainsKey(RetailMerchandisingCopilotSummaryConstants::ChannelOverviewResponsePropertyName))
                    {
                        channelOverview = capiResponse.get_Item(RetailMerchandisingCopilotSummaryConstants::ChannelOverviewResponsePropertyName);
                    }

                    if (errorCode == RetailMerchandisingCopilotSummaryConstants::LanguageNotSupportedErrorCode)
                    {
                        channelOverview = RetailMerchandisingCopilotSummaryConstants::LanguageNotSupportedErrorCode;
                        isLanguageError = true;
                    }
                    else if (errorCode != '')
                    {
                        logger.logError(strFmt('Summary returned error code %1', errorCode));
                    }
                    else if (channelOverview == RetailMerchandisingCopilotSummaryConstants::NoDataToSummarize)
                    {
                        noDataToSummarize = true;
                    }
                    else if (channelOverview != '')
                    {
                        isSuccessful = true;
                    }
                    else
                    {
                        logger.logError('Summary returned blank response');
                    }
                }
                else
                {
                    channelOverview = RetailMerchandisingCopilotSummaryConstants::AISummaryUnavailableErrorCode;
                    logger.logError('Result collection null or missing response');
                }
            }
            else
            {
                channelOverview = RetailMerchandisingCopilotSummaryConstants::AISummaryUnavailableErrorCode;
                logger.logError('AI summary unavailable');
            }

            activityContext.addCustomProperty('IsSuccessful', any2Str(isSuccessful));
            activityContext.addCustomProperty('NoDataToSummarize', any2Str(noDataToSummarize));
            activityContext.addCustomProperty('IsLanguageError', any2Str(isLanguageError));
        }

        return [channelOverview];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChannelOverviewCacheKey</Name>
				<Source><![CDATA[
    internal static container getChannelOverviewCacheKey(RefRecId _omInternalOrganizationRecId)
    {
        return [curUserId(), currentUserLanguage(), _omInternalOrganizationRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfigurationRisksSummariesCacheKey</Name>
				<Source><![CDATA[
    internal static container getConfigurationRisksSummariesCacheKey(RefRecId _omInternalOrganizationRecId)
    {
        return [curUserId(), currentUserLanguage(), _omInternalOrganizationRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSummaryResult</Name>
				<Source><![CDATA[
    internal static boolean validateSummaryResult(container _cacheKey, container _summaryResult, boolean _isFromCache)
    {
        if (_cacheKey == conNull() || _summaryResult == conNull() || conLen(_summaryResult) < 1)
        {
            return false;
        }

        str AIResponse = conPeek(_summaryResult, 1);

        if (AIResponse == '' ||
            AIResponse == RetailMerchandisingCopilotSummaryConstants::NoDataToSummarize ||
            AIResponse == RetailMerchandisingCopilotSummaryConstants::AISummaryUnavailableErrorCode ||
            AIResponse == RetailMerchandisingCopilotSummaryConstants::LanguageNotSupportedErrorCode)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRisksSummariesCacheIfStale</Name>
				<Source><![CDATA[
    private static void removeRisksSummariesCacheIfStale(OMInternalOrganization _omInternalOrganization)
    {
        str risksSummariesCacheScope = strFmt('%1_%2', formStr(RetailInternalOrganization), RetailMerchandisingCopilotSummaryConstants::ConfigurationRisksTopicGroupName);
        container risksSummariesCacheKey = RetailMerchandisingCopilotCapiProvider::getConfigurationRisksSummariesCacheKey(_omInternalOrganization.RecId);
        RetailCommerceValidator lastCompletedValidation = RetailCommerceValidator::findLastCompletedValidation(_omInternalOrganization.RecId);

        if (lastCompletedValidation &&
            lastCompletedValidation.LastCompletedDateTime > AppCopilotCache::getCachedDateTime(risksSummariesCacheScope, risksSummariesCacheKey))
        {
            AppCopilotCache::removeValue(risksSummariesCacheScope, risksSummariesCacheKey);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateConfigurationRisksSummaries</Name>
				<Source><![CDATA[
    private static ParameterCollection generateConfigurationRisksSummaries(OMInternalOrganization _omInternalOrganization, guid _uniqueCorrelationId)
    {
        // Prepare CAPI request parameters.
        int productRisksCount, categoryRisksCount, catalogRisksCount;
        str productRisks, categoryRisks, catalogRisks;

        RetailMerchandisingCopilotConfigurationRisksDataProvider dataProvider = RetailMerchandisingCopilotConfigurationRisksDataProvider::construct(_omInternalOrganization);

        [productRisksCount, productRisks] = dataProvider.getConfigurationRisks(RetailCommerceValidatorTestStage::Products);
        [categoryRisksCount, categoryRisks] = dataProvider.getConfigurationRisks(RetailCommerceValidatorTestStage::CommerceCategories);
        [catalogRisksCount, catalogRisks] = dataProvider.getConfigurationRisks(RetailCommerceValidatorTestStage::CommerceCatalogs);

        // No need to call CAPI if there is no data, just mock the response.
        if (productRisksCount == 0 &&
            categoryRisksCount == 0 &&
            catalogRisksCount == 0)
        {
            ParameterCollection results = new ParameterCollection();
            results.AddOrUpdateIfNotNull(RetailMerchandisingCopilotSummaryConstants::RisksSummariesResponsePropertyName, RetailMerchandisingCopilotSummaryConstants::NoDataToSummarize);

            return results;
        }

        // Make CAPI call.
        ParameterCollection requestParameters = new ParameterCollection();
        requestParameters.AddOrUpdateIfNotNull(RetailMerchandisingCopilotSummaryConstants::LanguageParameterName, currentUserLanguage());
        requestParameters.AddOrUpdateIfNotNull(RetailMerchandisingCopilotSummaryConstants::ProductRisksRequestParameterName, productRisks);
        requestParameters.AddOrUpdateIfNotNull(RetailMerchandisingCopilotSummaryConstants::ProductRisksCountRequestParameterName, productRisksCount);
        requestParameters.AddOrUpdateIfNotNull(RetailMerchandisingCopilotSummaryConstants::CategoryRisksRequestParameterName, categoryRisks);
        requestParameters.AddOrUpdateIfNotNull(RetailMerchandisingCopilotSummaryConstants::CategoryRisksCountRequestParameterName, CategoryRisksCount);
        requestParameters.AddOrUpdateIfNotNull(RetailMerchandisingCopilotSummaryConstants::CatalogRisksRequestParameterName, catalogRisks);
        requestParameters.AddOrUpdateIfNotNull(RetailMerchandisingCopilotSummaryConstants::CatalogRisksCountRequestParameterName, catalogRisksCount);

        ParameterCollection results = AppCopilotDataverseUtility::callAPIInternal(
            RetailMerchandisingCopilotSummaryConstants::ScmAISolutionName,
            RetailMerchandisingCopilotSummaryConstants::GenerateConfigurationRisksSummariesApiName,
            requestParameters,
            _uniqueCorrelationId);

        return results;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateChannelOverview</Name>
				<Source><![CDATA[
    private static ParameterCollection generateChannelOverview(OMInternalOrganization _omInternalOrganization, guid _uniqueCorrelationId)
    {
        // Prepare CAPI request parameters.
        RetailMerchandisingCopilotChannelOverviewDataProvider dataProvider = RetailMerchandisingCopilotChannelOverviewDataProvider::construct(_omInternalOrganization);

        int channelAssortedProductsCount = dataProvider.getChannelAssortedProductsCount();
        int channelAssortmentsCount = dataProvider.getChannelAssortmentsCount();
        int channelCatalogsCount = dataProvider.getChannelCatalogsCount();
        int channelCategoriesCount = dataProvider.getChannelCategoriesCount();

        // No need to call CAPI if there is no data, just mock the response.
        if (channelAssortedProductsCount == 0 &&
            channelAssortmentsCount == 0 &&
            channelCatalogsCount == 0 &&
            channelCategoriesCount == 0)
        {
            ParameterCollection results = new ParameterCollection();
            results.AddOrUpdateIfNotNull(RetailMerchandisingCopilotSummaryConstants::ChannelOverviewResponsePropertyName, RetailMerchandisingCopilotSummaryConstants::NoDataToSummarize);

            return results;
        }

        // Make CAPI call.
        ParameterCollection requestParameters = new ParameterCollection();
        requestParameters.AddOrUpdateIfNotNull(RetailMerchandisingCopilotSummaryConstants::LanguageParameterName, currentUserLanguage());
        requestParameters.AddOrUpdateIfNotNull(RetailMerchandisingCopilotSummaryConstants::NumAssortedProductsRequestParameterName, channelAssortedProductsCount);
        requestParameters.AddOrUpdateIfNotNull(RetailMerchandisingCopilotSummaryConstants::NumAssortmentsRequestParameterName, channelAssortmentsCount);
        requestParameters.AddOrUpdateIfNotNull(RetailMerchandisingCopilotSummaryConstants::NumCatalogsRequestParameterName, channelCatalogsCount);
        requestParameters.AddOrUpdateIfNotNull(RetailMerchandisingCopilotSummaryConstants::NumCategoriesRequestParameterName, channelCategoriesCount);

        ParameterCollection results = AppCopilotDataverseUtility::callAPIInternal(
            RetailMerchandisingCopilotSummaryConstants::ScmAISolutionName,
            RetailMerchandisingCopilotSummaryConstants::GenerateChannelOverviewApiName,
            requestParameters,
            _uniqueCorrelationId);

        return results;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>