<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPeggingTreeNodeKanban</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqPeggingTreeNodeKanban extends ReqPeggingTreeNode
{
    Kanban      kanban;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides the textual description of the node.
    /// </summary>
    /// <returns>
    ///    A string that contains the description text of the node.
    /// </returns>
    public str description()
    {
        return strFmt("@SYS320509", kanban.KanbanId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the event type for the current tree node.
    /// </summary>
    /// <returns>
    ///    A <c>LeanPeggedEventType</c> enumeration value.
    /// </returns>
    public LeanPeggedEventType eventType()
    {
        return LeanPeggedEventType::Kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>ReqPeggingTreeDetails</c> class that contains data.
    /// </summary>
    /// <param name="_details">
    ///    The object that holds the details.
    /// </param>
    public void initializeDetails(ReqPeggingTreeDetails _details)
    {
        _details.initFromKanban(kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>listChildren</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the list of children record buffers, which are kanban job picking lists and kanban job
    ///    issues.
    /// </summary>
    /// <returns>
    ///    A list that contains the kanban job picking list records and kanban job issues that supplies the
    ///    kanban of the node.
    /// </returns>
    public List listChildren()
    {
        List                    list = new List(Types::Record);

        KanbanJob               kanbanJob;
        KanbanJobIssue          kanbanJobIssue;
        KanbanJobPickingList    kanbanJobPickingList;

        container cachedResult = reqPeggingListCache.find(classStr(ReqPeggingTreeNodeKanban), [kanban.RecId]);

        if (cachedResult != conNull())
        {
            return List::create(cachedResult);
        }

        while select kanbanJobPickingList
            where kanbanJobPickingList.Kanban == kanban.RecId
        {
            list.addEnd(kanbanJobPickingList);
        }

        while select kanbanJobIssue
            exists join kanbanJob
                where kanbanJob.RecId  == kanbanJobIssue.KanbanJob
                   && kanbanJob.Kanban == kanban.RecId
        {
            list.addEnd(kanbanJobIssue);
        }

        cachedResult = list.pack();
        reqPeggingListCache.insert(classStr(ReqPeggingTreeNodeKanban),[kanban.RecId], cachedResult);
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the kanban job pick list, kanban job issue, or sales order line record buffer of the
    ///    parent node.
    /// </summary>
    /// <returns>
    ///    A <c>KanbanJobPickingList</c>, <c>KanbanJobIssue</c> or <c>SalesOrderLine</c> record buffer.
    /// </returns>
    public Common parent()
    {
        Common                  parent;

        SourceDocumentLine      sourceDocumentLineRequirement;
        ReqPeggingAssignment    reqPeggingAssignmentRequirement;
        ReqPegging              reqPegging;
        ReqPeggingAssignment    reqPeggingAssignmentSupply;
        KanbanJobReceipt        kanbanJobReceipt;
        KanbanJob               kanbanJob;

        // Get the source document line of the requirement side
        select firstonly RecId, SourceRelationType from sourceDocumentLineRequirement
            exists join reqPeggingAssignmentRequirement
                where reqPeggingAssignmentRequirement.SourceDocumentLine       == sourceDocumentLineRequirement.RecId
                   && reqPeggingAssignmentRequirement.ReqPeggingAssignmentType == ReqPeggingAssignmentType::Requirement
            exists join reqPegging
                where reqPegging.PeggingAssignedRequirement == reqPeggingAssignmentRequirement.RecId
            exists join reqPeggingAssignmentSupply
                where reqPeggingAssignmentSupply.RecId == reqPegging.PeggingAssignedSupply
                   && reqPeggingAssignmentSupply.ReqPeggingAssignmentType == ReqPeggingAssignmentType::Supply
            exists join kanbanJobReceipt
                where kanbanJobReceipt.SourceDocumentLine == reqPeggingAssignmentSupply.SourceDocumentLine
            exists join kanbanJob
                where kanbanJob.RecId  == kanbanJobReceipt.KanbanJob
                   && kanbanJob.Kanban == kanban.RecId;

        // The query ramifies as the kanban could have several kinds of parent node.
        // Determine the type and get the parent from the right table.
        switch (sourceDocumentLineRequirement.SourceRelationType)
        {
            case tableNum(KanbanJobPickingList):
                parent = KanbanJobPickingList::findSourceDocumentLine(sourceDocumentLineRequirement.RecId);
                break;

            case tableNum(KanbanJobIssue):
                parent = KanbanJobIssue::findSourceDocumentLine(sourceDocumentLineRequirement.RecId);
                break;

            case tableNum(SalesLine):
                parent = SalesLine::findSourceDocumentLine(sourceDocumentLineRequirement.RecId);
                break;
        }

        return parent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanban</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Kanban parmKanban(Kanban _kanban = kanban)
    {
        kanban = _kanban;

        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the source document number.
    /// </summary>
    /// <returns>
    ///    A source document number.
    /// </returns>
    /// <remarks>
    ///    This method is only implemented for root level nodes.
    /// </remarks>
    public str sourceDocNumber()
    {
        return kanban.KanbanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqPeggingTreeNodeKanban construct()
    {
        return new ReqPeggingTreeNodeKanban();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the class.
    /// </summary>
    /// <param name="_kanban">
    ///    The <c>Kanban</c> record buffer that is represented by the node.
    /// </param>
    /// <returns>
    ///    A new instance of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqPeggingTreeNodeKanban newStandard(Kanban _kanban)
    {
        ReqPeggingTreeNodeKanban    reqPeggingTreeNodeKanban = ReqPeggingTreeNodeKanban::construct();

        reqPeggingTreeNodeKanban.parmKanban(_kanban);

        return reqPeggingTreeNodeKanban;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>