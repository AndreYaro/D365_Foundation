<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UpdateTaxDocumentRowTransaction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Updated TaxDocumentRowTransaction.invoicedate
/// </summary>
class UpdateTaxDocumentRowTransaction extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    /// true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A class that can be used in a batch journal is a class where the same parameters can be used
    /// repeatedly. The dialog box can be shown and the parameters can be changed but parameters of some
    /// classes might build on data that is only valid for a short time. Running a class two times with the
    /// same parameters is not always possible. If <see cref="M:RunBaseBatch.canGoBatch" /> is false, this
    /// method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job will be run with the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that return true must not access any client-side functionality. If true is
    /// returned, the batch server will execute the job by using the <c>runAs</c> method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@ApplicationSuite_Localization:UpdateInvoiceDateTransaction";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        UpdateTaxDocumentRowTransaction updateTransaction = new UpdateTaxDocumentRowTransaction();

        if (updateTransaction.prompt())
        {
            updateTransaction.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run in new session.
    /// </summary>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.updateTaxDocumentRowTransactionInvoiceDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxDocumentRowTransactionInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updated TaxDocumentRowTransaction.invoicedate
    /// </summary>
    protected void updateTaxDocumentRowTransactionInvoiceDate()
    {
        this.updateTaxDocumentRowTransactionByLedgerJournalTrans();
        this.updateTaxDocumentExtensionByLedgerJournalTrans();
        this.updateMultipleLineTaxDocumentRowTransactionByLedgerJournalTrans();
        this.updateMultipleLineTaxDocumentExtensionByLedgerJournalTrans();
        this.updateTaxDocumentRowTransactionByVendInvoiceJour();
        this.updateTaxDocumentExtensionByVendInvoiceJour();
        this.updateTaxDocumentExtension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxDocumentRowTransactionByLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updated TaxDocumentRowTransaction.invoicedate by ledgerJournalTrans.DocumentDate
    /// </summary>
    private void updateTaxDocumentRowTransactionByLedgerJournalTrans()
    {
        TaxDocumentRowTransaction       taxDocumentRowTransaction;
        LedgerJournalTrans              ledgerJournalTrans;
        TaxDocumentRowTransaction_IN    taxDocumentRowTransaction_IN;
        TaxDocumentExtension_IN         taxDocumentExtension_IN;

        ttsbegin;

        update_recordset taxDocumentRowTransaction
            setting InvoiceDate = ledgerJournalTrans.DocumentDate
            where taxDocumentRowTransaction.TransactionLineTableId == tableNum(LedgerJournalTrans)
                join ledgerJournalTrans
                    where ledgerJournalTrans.RecId == taxDocumentRowTransaction.TransactionLineRecId
                        && ledgerJournalTrans.DocumentDate != ledgerJournalTrans.TransDate
                        && ledgerJournalTrans.DocumentDate != taxDocumentRowTransaction.InvoiceDate
                        && ledgerJournalTrans.DocumentDate
                join taxDocumentRowTransaction_IN
                    where taxDocumentRowTransaction_IN.TaxDocumentRowTransactionRecId == taxDocumentRowTransaction.RecId
                    join taxDocumentExtension_IN
                        where taxDocumentExtension_IN.RecId == taxDocumentRowTransaction_IN.TaxDocumentExtension
                            && taxDocumentExtension_IN.TaxableDocumentType == TaxableDocumentTypeConstants::TDTGenJourVendInvoice;
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxDocumentExtensionByLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updated taxDocumentExtension.TaxTransactionDate by ledgerJournalTrans.DocumentDate
    /// </summary>
    private void updateTaxDocumentExtensionByLedgerJournalTrans()
    {
        TaxDocumentExtension_IN         taxDocumentExtension;
        LedgerJournalTrans              ledgerJournalTrans;
        TaxDocumentRowTransaction_IN    taxDocumentRowTransactionIN;
        TaxDocumentRowTransaction       taxDocumentRowTransaction;
        
        ttsbegin;

        update_recordset taxDocumentExtension
            setting TaxTransactionDate = ledgerJournalTrans.DocumentDate
            where taxDocumentExtension.TaxableDocumentType == TaxableDocumentTypeConstants::TDTGenJourVendInvoice
                join taxDocumentRowTransactionIN
                    where taxDocumentRowTransactionIN.TaxDocumentExtension == taxDocumentExtension.RecId
                    join taxDocumentRowTransaction
                        where taxDocumentRowTransaction.RecId == taxDocumentRowTransactionIN.TaxDocumentRowTransactionRecId
                            && taxDocumentRowTransaction.TransactionLineTableId == tableNum(LedgerJournalTrans)
                        join ledgerJournalTrans
                            where ledgerJournalTrans.RecId == taxDocumentRowTransaction.TransactionLineRecId
                                && ledgerJournalTrans.DocumentDate != taxDocumentExtension.TaxTransactionDate
                                && ledgerJournalTrans.TransDate != ledgerJournalTrans.DocumentDate
                                && ledgerJournalTrans.DocumentDate;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMultipleLineTaxDocumentRowTransactionByLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updated TaxDocumentRowTransaction.invoicedate by ledgerJournalTrans.DocumentDate
    /// </summary>
    private void updateMultipleLineTaxDocumentRowTransactionByLedgerJournalTrans()
    {
        TaxDocumentRowTransaction       taxDocumentRowTransaction;
        LedgerJournalTrans              ledgerJournalTrans, ledgerJournalTransTax;
        TaxDocumentRowTransaction_IN    taxDocumentRowTransactionIN;
        TaxDocumentExtension_IN         taxDocumentExtension;

        ttsbegin;

        update_recordset taxDocumentRowTransaction
            setting InvoiceDate = ledgerJournalTransTax.DocumentDate
            where taxDocumentRowTransaction.TransactionJourLineTableId == tablenum(LedgerJournalTrans)
            join ledgerJournalTrans
                where ledgerJournalTrans.RecId == taxDocumentRowTransaction.TransactionJourLIneRecId
                join ledgerJournalTransTax
                    where ledgerJournalTransTax.JournalNum == ledgerJournalTrans.JournalNum
                        && ledgerJournalTransTax.Voucher == ledgerJournalTrans.Voucher
                        && ledgerJournalTransTax.RecId != ledgerJournalTrans.RecId
                        && ledgerJournalTransTax.AccountType == LedgerJournalACType::Vend
                        && ledgerJournalTransTax.DocumentDate != taxDocumentRowTransaction.InvoiceDate
                        && ledgerJournalTransTax.DocumentDate
            join taxDocumentRowTransactionIN
                where taxDocumentRowTransactionIN.TaxDocumentRowTransactionRecId == taxDocumentRowTransaction.RecId
                join taxDocumentExtension
                    where taxDocumentExtension.RecId == taxDocumentRowTransactionIN.TaxDocumentExtension
                        && taxDocumentExtension.TaxableDocumentType == TaxableDocumentTypeConstants::TDTGenJourVendInvoice;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMultipleLineTaxDocumentExtensionByLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updated taxDocumentExtension.TaxTransactionDate by ledgerJournalTrans.DocumentDate
    /// </summary>
    private void updateMultipleLineTaxDocumentExtensionByLedgerJournalTrans()
    {
        TaxDocumentRowTransaction       taxDocumentRowTransaction;
        TaxDocumentRowTransaction_IN    taxDocumentRowTransactionIN;
        TaxDocumentExtension_IN         taxDocumentExtension;

        ttsbegin;

        update_recordset taxDocumentExtension
            setting TaxTransactionDate = taxDocumentRowTransaction.InvoiceDate
            where taxDocumentExtension.TaxableDocumentType == TaxableDocumentTypeConstants::TDTGenJourVendInvoice
            join taxDocumentRowTransactionIN
                where taxDocumentRowTransactionIN.TaxDocumentExtension == taxDocumentExtension.RecId
                join taxDocumentRowTransaction
                    where taxDocumentRowTransaction.RecId == taxDocumentRowTransactionIN.TaxDocumentRowTransactionRecId
                        && taxDocumentRowTransaction.InvoiceDate != taxDocumentExtension.TaxTransactionDate
                        && taxDocumentRowTransaction.InvoiceDate;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxDocumentRowTransactionByVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updated TaxDocumentRowTransaction.invoicedate by vendInvoiceJour.DocumentDate
    /// </summary>
    private void updateTaxDocumentRowTransactionByVendInvoiceJour()
    {
        TaxDocumentRowTransaction   taxDocumentRowTransaction;
        VendInvoiceJour             vendInvoiceJour;

        ttsbegin;

        update_recordset taxDocumentRowTransaction
            setting InvoiceDate = vendInvoiceJour.DocumentDate
            where taxDocumentRowTransaction.TransactionJourHeaderTableId == tablenum(VendInvoiceJour)
            join vendInvoiceJour
                where vendInvoiceJour.RecId == taxDocumentRowTransaction.TransactionJourHeaderRecId
                    && vendInvoiceJour.DocumentDate != taxDocumentRowTransaction.InvoiceDate
                    && vendInvoiceJour.DocumentDate;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxDocumentExtensionByVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updated taxDocumentExtension.TaxTransactionDate by vendInvoiceJour.DocumentDate
    /// </summary>
    private void updateTaxDocumentExtensionByVendInvoiceJour()
    {
        TaxDocumentRowTransaction       taxDocumentRowTransaction;
        TaxDocumentRowTransaction_IN    taxDocumentRowTransactionIN;
        TaxDocumentExtension_IN         taxDocumentExtension;
        VendInvoiceJour                 vendInvoiceJour;

        ttsbegin;

        update_recordset taxDocumentExtension
            setting TaxTransactionDate = vendInvoiceJour.DocumentDate
            join taxDocumentRowTransactionIN
                where taxDocumentRowTransactionIN.TaxDocumentExtension == taxDocumentExtension.RecId
                join taxDocumentRowTransaction
                    where taxDocumentRowTransaction.RecId == taxDocumentRowTransactionIN.TaxDocumentRowTransactionRecId
                        && taxDocumentRowTransaction.TransactionJourHeaderTableId == tablenum(VendInvoiceJour)
                    join vendInvoiceJour
                        where vendInvoiceJour.RecId == taxDocumentRowTransaction.TransactionJourHeaderRecId
                            && vendInvoiceJour.DocumentDate != taxDocumentExtension.TaxTransactionDate
                            && vendInvoiceJour.DocumentDate;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxDocumentExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update TaxDocumentExtension_IN.RefTaxTransactionDate
    /// </summary>
    private void updateTaxDocumentExtension()
    {
        TaxDocumentExtension_IN         taxDocumentExtension, taxDocumentExtensionIN;

        ttsbegin;

        update_recordset taxDocumentExtension
            setting RefTaxTransactionDate = taxDocumentExtensionIN.TaxTransactionDate
            join taxDocumentExtensionIN
                where taxDocumentExtensionIN.RecId == taxDocumentExtension.RefTaxDocumentExtension
                    && taxDocumentExtensionIN.TaxTransactionDate != taxDocumentExtension.RefTaxTransactionDate;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>