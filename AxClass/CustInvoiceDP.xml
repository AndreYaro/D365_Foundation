<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustInvoiceDP</c> class is the data provider class for the <c>CustInvoice</c>Microsoft SQL
/// Server Reporting Services report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(CustInvoiceContract)),
    SRSReportQueryAttribute(queryStr(CustInvoiceSRS))
]
class CustInvoiceDP extends SRSReportDataProviderPreProcessTempDB
{
    CustInvoiceJour custInvoiceJour;
    CustInvoiceTmp custInvoiceTmp;
    DimensionDisplayValue dimensionFocusDisplayValue;
    Name dimensionFocusName;
    FromDate fromDate;
    ToDate toDate;
    OpenPaidBoth invoiceType;

    Map summaryAccountsForPostingProfileMap;

    NoYes inclTransWithNoBillingClass;
    List billingClassification;
    CustTrans custTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query that is used to pull the records for the report.
    /// </summary>
    /// <param name="_query">
    /// The report query object to modify.
    /// </param>
    /// <param name="_fromDate">
    /// The from date range parameter of the report.
    /// </param>
    /// <param name="_toDate">
    /// The to date range parameter of the report.
    /// </param>
    /// <param name="_invoiceType">
    /// The invoice type parameter of the report.
    /// </param>
    /// <returns>
    /// The modified query object to use to pull records for the report.
    /// </returns>
    private Query buildQuery(
        Query _query,
        FromDate _fromDate,
        ToDate _toDate,
        OpenPaidBoth _invoiceType)
    {
        QueryBuildDataSource qbdsCustTrans;
        QueryBuildDataSource qbdsCustInvoiceJour;
        QueryBuildDataSource custTransDS;

        // Add the date range on all three data sources to allow SQL to restrict the records as much as possible prior to processing
        _query.dataSourceTable(tableNum(CustInvoiceTrans), 1).addRange(fieldNum(CustInvoiceTrans, InvoiceDate)).value(queryRange(_fromDate, _toDate));
        _query.dataSourceTable(tableNum(CustInvoiceJour), 1).addRange(fieldNum(CustInvoiceJour, InvoiceDate)).value(queryRange(_fromDate, _toDate));
        _query.dataSourceTable(tableNum(CustTrans), 1).addRange(fieldNum(CustTrans, TransDate)).value(queryRange(_fromDate, _toDate));

        if (_invoiceType == OpenPaidBoth::Paid)
        {
            _query.dataSourceTable(tableNum(CustTrans), 1).addRange(fieldNum(CustTrans, Closed)).value(queryRange(_fromDate, _toDate));
        }

        // Add link from CustTrans.AccountNum to CustInvoiceJour.InvoiceAccount since this can not
        // be done in metadata directly. The two data sources are linked through CustInvoiceTrans
        // which does not have an AccountNum field. Without this join there are extra CustTrans records
        // returned that have the same date and invoice ID but *different* accounts.
        qbdsCustInvoiceJour = _query.dataSourceTable(tableNum(CustInvoiceJour), 1);
        qbdsCustTrans = _query.dataSourceTable(tableNum(CustTrans), 1);
        qbdsCustTrans.addLink(fieldNum(CustInvoiceJour, InvoiceAccount), fieldNum(CustTrans, AccountNum), qbdsCustInvoiceJour.name());

        if (CustBillingClassificationReportManager::isPublicSectorScenario(billingClassification)
            && !BrazilParameters::isEnabled())
        {
            custTransDS = _query. dataSourceTable(tableNum(CustTrans));

            CustBillingClassificationReportManager::setBillingClassificationRanges(custTransDS, billingClassification, inclTransWithNoBillingClass,
                fieldNum(CustTrans, CustBillingClassification));
        }

        if (dimensionFocusName != '')
        {
            _query.dataSourceTable(tablenum(GeneralJournalAccountEntry), 1).addRange(fieldnum(GeneralJournalAccountEntry, PostingType)).value(queryValue(LedgerPostingType::CustBalance));
        }
        else
        {
            _query.dataSourceTable(tablenum(GeneralJournalAccountEntry), 1).enabled(false);
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the actual data for the report from the temporary table.
    /// </summary>
    /// <returns>
    ///    The <c>CustInvoiceTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(CustInvoiceTmp))
    ]
    public CustInvoiceTmp getCustInvoiceTmp()
    {
        select custInvoiceTmp;
        return custInvoiceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the report parameters from data contract to member variables.
    /// </summary>
    private void getReportParameters()
    {
        CustInvoiceContract contract = this.parmDataContract();

        if (contract)
        {
            dimensionFocusName = contract.parmDimensionFocus();
            fromDate = contract.parmFromDate();
            toDate = contract.parmToDate();
            invoiceType = contract.parmInvoiceType();

            billingClassification = contract.parmBillingClassification();
            inclTransWithNoBillingClass = contract.parmInclTransWithNoBillingClass();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummaryAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the summary accounts that are associated with the posting profile for the customer.
    /// </summary>
    /// <param name="_accountNum">
    /// The customer account number for which the summary account details must be identified.
    /// </param>
    /// <param name="_postingProfile">
    /// The posting profile for which the summary account details must be identified.
    /// </param>
    /// <returns>
    /// The summary account for the customer posting profile.
    /// </returns>
    private LedgerDimensionDefaultAccount getSummaryAccount(AccountNum _accountNum, PostingProfile _postingProfile)
    {
        LedgerDimensionDefaultAccount summaryAccount;
        str key;

        Debug::assert(_accountNum != '');

        if (_postingProfile != '')
        {
            key = strFmt('%1%2', _accountNum, _postingProfile);

            if (summaryAccountsForPostingProfileMap.exists(key))
            {
                summaryAccount = summaryAccountsForPostingProfileMap.lookup(key);
            }
            else
            {
                summaryAccount = CustLedgerAccounts::summaryLedgerDimension(_accountNum, _postingProfile);

                summaryAccountsForPostingProfileMap.insert(key, summaryAccount);
            }
        }

        return summaryAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>CustInvoiceTmp</c> temporary table, which will be used by the report.
    /// </summary>
    /// <param name = "_generalJournalAccountEntry">General journal account entry buffer.</param>
    /// <remarks>Parameter is used when dimension focus is specified. </remarks>
    protected void insertCustInvoiceTmp(GeneralJournalAccountEntry _generalJournalAccountEntry = null)
    {
        this.populateCustInvoiceTmp(_generalJournalAccountEntry);

        custInvoiceTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates data into <c>CustInvoiceTmp</c> table.
    /// </summary>
    /// <param name = "_generalJournalAccountEntry">General journal account entry buffer.</param>
    /// <remarks>Parameter is used when dimension focus is specified. </remarks>
    protected void populateCustInvoiceTmp(GeneralJournalAccountEntry _generalJournalAccountEntry = null)
    {
        custInvoiceTmp.clear();

        custInvoiceTmp.InvoiceDate = custInvoiceJour.InvoiceDate;
        custInvoiceTmp.InvoiceId = custInvoiceJour.InvoiceId;
        custInvoiceTmp.SalesId = custInvoiceJour.SalesId;
        custInvoiceTmp.OrderAccount = custInvoiceJour.OrderAccount;
        custInvoiceTmp.InvoiceAccount = custInvoiceJour.InvoiceAccount;
        custInvoiceTmp.DeliveryName = custInvoiceJour.DeliveryName;
        custInvoiceTmp.CurrencyCode = custInvoiceJour.CurrencyCode;
        custInvoiceTmp.SumMarkup = custInvoiceJour.SumMarkup;
        
        if (_generalJournalAccountEntry)
        {
            custInvoiceTmp.InvoiceAmount = _generalJournalAccountEntry.TransactionCurrencyAmount;
            custInvoiceTmp.InvoiceAmountMST = _generalJournalAccountEntry.AccountingCurrencyAmount;
        }
        else
        {
            custInvoiceTmp.InvoiceAmount = custInvoiceJour.InvoiceAmount;
            // Invoice amount in accounting currency
            custInvoiceTmp.InvoiceAmountMST = custInvoiceJour.InvoiceAmountMST;
        }

        custInvoiceTmp.DimensionFocusDisplayValue = dimensionFocusDisplayValue;
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            custInvoiceTmp.FiscalEstablishmentId = custTrans.fiscalEstablishmentId_BR();
        }
        // </GBR>
        else if (custTrans.CustBillingClassification)
        {
            custInvoiceTmp.BillingClassification = CustBillingClassification::find(custTrans.CustBillingClassification).BillingClassification;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves records based on the parameter values and inserts the records into the temporary table.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun;
        CustSettlement localCustSettlement;
        RecordInsertList recordInsertList;

        this.getReportParameters();

        queryRun = new QueryRun(this.buildQuery(this.parmQuery(), fromDate, toDate, invoiceType));

        summaryAccountsForPostingProfileMap = new Map(Types::String, Types::Int64);

        if (CustInvoiceDpPerformanceOptimizationFlight::instance().isEnabled())
        {
            recordInsertList = new RecordInsertList(tableNum(CustInvoiceTmp), false, false, false, false, true, custInvoiceTmp);
        }

        using (SysInstrumentationActivityContext activityContext = this.logProcessReport())
        {

            while (queryRun.next())
            {
                if (queryRun.changed(tableNum(CustInvoiceJour)))
                {
                    custInvoiceJour = queryRun.get(tableNum(CustInvoiceJour));

                    custTrans = queryRun.get(tableNum(CustTrans));

                    if (invoiceType == OpenPaidBoth::Open)
                    {
                        if (custTrans.Closed != dateNull())
                        {
                            select sum(SettleAmountMST), sum(ExchAdjustment) from localCustSettlement
                            where localCustSettlement.TransCompany == custTrans.company() &&
                                localCustSettlement.TransRecId == custTrans.RecId &&
                                localCustSettlement.AccountNum == custTrans.AccountNum &&
                                localCustSettlement.TransDate <= toDate;

                            if (localCustSettlement.SettleAmountMST - localCustSettlement.ExchAdjustment == custTrans.AmountMST)
                            {
                                continue;
                            }
                        }
                    }

                    if (dimensionFocusName != '')
                    {
                        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;
                        GeneralJournalEntry generalJournalEntryLocal;
                        GeneralJournalAccountEntry generalJournalAccountEntryLocal;

                        while select sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount) from generalJournalAccountEntryLocal
                        group by LedgerDimension
                            where generalJournalAccountEntryLocal.PostingType == LedgerPostingType::CustBalance
                                exists join generalJournalEntryLocal
                                    where generalJournalEntryLocal.RecId == generalJournalAccountEntryLocal.GeneralJournalEntry
                                        exists join subledgerVoucherLink
                                            where subledgerVoucherLink.GeneralJournalEntry == generalJournalEntryLocal.RecId &&
                                                subledgerVoucherLink.Voucher == custInvoiceJour.LedgerVoucher &&
                                                subledgerVoucherLink.VoucherDataAreaId == custInvoiceJour.DataAreaId &&
                                                subledgerVoucherLink.AccountingDate == custInvoiceJour.InvoiceDate
                        {
                            if (generalJournalAccountEntryLocal.TransactionCurrencyAmount != 0)
                            {
                                dimensionFocusDisplayValue = DimensionSet::getDisplayValueForDimensionSetName(generalJournalAccountEntryLocal.LedgerDimension, dimensionFocusName);

                                if (CustInvoiceDpPerformanceOptimizationFlight::instance().isEnabled())
                                {
                                    this.populateCustInvoiceTmp(generalJournalAccountEntryLocal);

                                    recordInsertList.add(custInvoiceTmp);
                                }
                                else
                                {
                                    this.insertCustInvoiceTmp(generalJournalAccountEntryLocal);
                                }
                                
                                dimensionFocusDisplayValue = '';
                            }
                        }
                    }
                    else
                    {
                        if (CustInvoiceDpPerformanceOptimizationFlight::instance().isEnabled())
                        {
                            this.populateCustInvoiceTmp();

                            recordInsertList.add(custInvoiceTmp);
                        }
                        else
                        {
                            this.insertCustInvoiceTmp();
                        }
                    }
                }
            }

            if (CustInvoiceDpPerformanceOptimizationFlight::instance().isEnabled())
            {
                recordInsertList.insertDatabase();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustInvoiceDP construct()
    {
        return new CustInvoiceDP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessReport</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext logProcessReport()
    {
        const str InstrumentationNamespace = classStr(CustInvoiceDP);

        return this.getActivityContextForReport(InstrumentationNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForReport</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext getActivityContextForReport(str _instrumentationNamespace)
    {
        const str MetricName = methodStr(LedgerJournalDP, processReport);

        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(_instrumentationNamespace);
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(
            MetricName,
            _instrumentationNamespace);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity);

        int rowCount = QueryRun::getQueryRowCount(this.parmQuery(), maxInt());
        const str DimensionFocusNameStr = 'DimensionFocusName';
        const str InclTransWithNoBillingClassStr = 'InclTransWithNoBillingClass';
        const str BillingClassificationStr = 'BillingClassificationList';

        activityContext.addCustomProperty(extendedTypeStr(NumberOfRecords), int2Str(rowCount));
        activityContext.addCustomProperty(extendedTypeStr(FromDate), date2StrXpp(fromDate));
        activityContext.addCustomProperty(extendedTypeStr(ToDate), date2StrXpp(toDate));
        activityContext.addCustomProperty(enumStr(OpenPaidBoth), enum2Str(invoiceType));
        activityContext.addCustomProperty(extendedTypeStr(DimensionDisplayValue), dimensionFocusDisplayValue);
        activityContext.addCustomProperty(DimensionFocusNameStr, dimensionFocusName);
        activityContext.addCustomProperty(InclTransWithNoBillingClassStr, enum2Str(inclTransWithNoBillingClass));
        activityContext.addCustomProperty(BillingClassificationStr, billingClassification.toString());
        
        return activityContext;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>