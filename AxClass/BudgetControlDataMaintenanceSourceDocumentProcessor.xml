<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlDataMaintenanceSourceDocumentProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlDataMaintenanceSourceDocumentProcessor</c> is responsible for submitting budget check requests
/// for source document data maintenance.
/// </summary>
internal final class BudgetControlDataMaintenanceSourceDocumentProcessor extends BudgetControlSourceDocumentProcessor
{
    private AccountingEventRecId currentAccountingEvent;
    private Map distributionsForEvent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBudgetControlProcessor</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected BudgetControlProcessor getBudgetControlProcessor()
    {
        return BudgetControlMaintenanceProcessor::instance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitSourceDocumentLineToCheckBudget</Name>
				<Source><![CDATA[
    internal static void submitSourceDocumentLineToCheckBudget(
        SourceDocumentLineRecId _sourceDocumentLineRecId,
        boolean _isDraftReservation,
        boolean _isOnDemandBudgetCheck = false,
        boolean _isCarryforwardReservation = false,
        AccountingEventRecId _accountingEventRecId = 0)
    {
        if (_sourceDocumentLineRecId && BudgetControlConfiguration::isControlConfigured())
        {
            SourceDocumentLine topParentSourceDocumentLine = SourceDocumentLine::findTopParentSourceDocumentLine(_sourceDocumentLineRecId);

            if (!topParentSourceDocumentLine)
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }

            SourceDocumentLineItem budgetSourceSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(topParentSourceDocumentLine);

            UserId user = curUserId();
            SourceDocumentProcessorCaller caller = null;
            BudgetControlSourceDocumentLinePolicy budgetControlSourceDocumentLinePolicy = BudgetControlSourceDocumentLinePolicy::newPolicy(
                    budgetSourceSourceDocumentLineItem,
                    _isDraftReservation,
                    caller,
                    _isOnDemandBudgetCheck,
                    curuserid());

            BudgetControlDataMaintenanceSourceDocumentProcessor processor = BudgetControlDataMaintenanceSourceDocumentProcessor::construct();

            processor.initializeToCheckBudget(
                _sourceDocumentLineRecId,
                budgetSourceSourceDocumentLineItem,
                budgetControlSourceDocumentLinePolicy,
                _isDraftReservation,
                caller,
                _isOnDemandBudgetCheck,
                user,
                _isCarryforwardReservation,
                false);

            if (_accountingEventRecId)
            {
                processor.currentAccountingEvent = _accountingEventRecId;
            }

            processor.doCheckBudget();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitSourceDocLineToReturnRemaining</Name>
				<Source><![CDATA[
    internal static void submitSourceDocLineToReturnRemaining(
        SourceDocumentLineRecId _sourceDocumentLineRecId,
        date _returnDate,
        boolean _doReturnAsClosing = false)
    {
        if (_sourceDocumentLineRecId != 0)
        {
            SourceDocumentLine topParentSourceDocumentLine = SourceDocumentLine::findTopParentSourceDocumentLine(_sourceDocumentLineRecId);

            if (!topParentSourceDocumentLine)
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }

            BudgetSourceRecId budgetSourceId = BudgetSourceSourceDocumentLine::findBudgetSourceId(topParentSourceDocumentLine.RecId);

            if (budgetSourceId)
            {
                SourceDocumentLineItem budgetSourceSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(topParentSourceDocumentLine);
                UserId user = curUserId();
                SourceDocumentProcessorCaller caller = null;

                // Initialize budget check policy with the override line entry budget control configuration option.
                BudgetControlSourceDocumentLinePolicy budgetControlSourceDocumentLinePolicy = BudgetControlSourceDocumentLinePolicy::newPolicy(
                    budgetSourceSourceDocumentLineItem,
                    false,
                    caller,
                    true,
                    user);

                var processor = BudgetControlDataMaintenanceSourceDocumentProcessor::construct();

                processor.initializeToReturnRemainingBudget(
                        _sourceDocumentLineRecId,
                        budgetSourceSourceDocumentLineItem,
                        budgetSourceId,
                        budgetControlSourceDocumentLinePolicy,
                        _returnDate,
                        caller,
                        user,
                        _doReturnAsClosing);

                processor.runReturnRemainingBudget();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static BudgetControlDataMaintenanceSourceDocumentProcessor construct()
    {
        return new BudgetControlDataMaintenanceSourceDocumentProcessor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveDistributions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected AccountingDistributionList getActiveDistributions(SourceDocumentLine _sourceDocumentLine)
    {
        AccountingDistributionList accountingDistributions = AccountingDistributionList::construct();

        if (_sourceDocumentLine)
        {
            AccountingDistribution accountingDistribution;

            // If we have an accounting event, use that. Otherwise just select all accounting distributions for the line
            if (this.currentAccountingEvent)
            {
                while select accountingDistribution
                    where accountingDistribution.SourceDocumentLine == _sourceDocumentLine.RecId
                        && accountingDistribution.AccountingEvent == this.currentAccountingEvent
                {
                    accountingDistributions.addEnd(accountingDistribution);
                }
            }
            else
            {
                AccountingEvent accountingEvent;

                while select * from accountingDistribution
                    where accountingDistribution.SourceDocumentLine == _sourceDocumentLine.RecId
                    notexists join accountingEvent
                        where accountingEvent.RecId == accountingDistribution.AccountingEvent
                {
                    accountingDistributions.addEnd(accountingDistribution);
                }
            }
        }

        if (!accountingDistributions.elements())
        {
            BudgetControlInstrumentationLogger::createLogger(classStr(BudgetControlDataMaintenanceSourceDocumentProcessor))
                        .dataMaintenance().missingDistributionsForSourceDocumentLine(_sourceDocumentLine.RecId);
        }

        return accountingDistributions;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>