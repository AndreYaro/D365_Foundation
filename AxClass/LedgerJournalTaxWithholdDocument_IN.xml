<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTaxWithholdDocument_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   This implementation of the interface TaxableDocument is for the Journals.
///   This is used to feed data to Withhold Tax to support withholding Tax calculations and withholding Tax posting.
/// </summary>
public class LedgerJournalTaxWithholdDocument_IN extends LedgerJournalTaxDocument
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an object which implements <c>TaxableLine</c> interface that represents the current
    ///    transaction line.
    /// </summary>
    /// <returns>
    ///    An object that represents the current transaction line.
    /// </returns>
    /// <remarks>
    ///    If there is no current line null may be returned.
    /// </remarks>
    public TaxableLine getCurrentLine()
    {
        if (!noMoreRecords)
        {
            LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt = unsavedLedgerJournalTrans.ledgerJournalTransTaxExtensionIN();
            if (ledgerJournalTrans.RecId == 0
                && (ledgerJournalTransTaxExt.TDSGroup != ''
                    || ledgerJournalTransTaxExt.TCSGroup != '')
                && unsavedLedgerJournalTrans.amount() != 0)
            {
                return LedgerJournalTaxLine::construct(this, unsavedLedgerJournalTrans, false);
            }
            else
            {
                return LedgerJournalTaxLine::construct(this, ledgerJournalTrans, false);
            }
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads the first transaction line.
    /// </summary>
    /// <returns>
    ///    true if the first transaction line was found; otherwise, false.
    /// </returns>
    public boolean getFirstLine()
    {
        noMoreRecords = false;

        select *
            from ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == journalId &&
                  ledgerJournalTrans.Voucher == referenceNumber &&
                  ledgerJournalTrans.Invoice == invoiceId &&
                  ledgerJournalTrans.RecId != unsavedLedgerJournalTrans.RecId;

        currentIsUnsaved = false;
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt = unsavedLedgerJournalTrans.ledgerJournalTransTaxExtensionIN();

        if (ledgerJournalTrans.RecId == 0
            && (ledgerJournalTransTaxExt.TDSGroup != ''
                || ledgerJournalTransTaxExt.TCSGroup != ''))
        {
            currentIsUnsaved = true;
            return true;
        }
        else if (ledgerJournalTrans.RecId != 0)
        {
            return true;
        }
        noMoreRecords = true;
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Reads the next transaction line.
    /// </summary>
    /// <returns>
    ///   true if a transaction line was found; otherwise, false.
    /// </returns>
    public boolean getNextLine()
    {
        if (!currentIsUnsaved)
        {
            next ledgerJournalTrans;
            LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt = unsavedLedgerJournalTrans.ledgerJournalTransTaxExtensionIN();

            if (ledgerJournalTrans.RecId == 0
                && (ledgerJournalTransTaxExt.TDSGroup != ''
                    || ledgerJournalTransTaxExt.TCSGroup != ''))
            {
                currentIsUnsaved = true;
                return true;
            }
            else if (ledgerJournalTrans.RecId != 0)
            {
                return true;
            }
        }
        noMoreRecords = true;
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>LedgerJournalTaxWithholdDocument_IN</c> class.
    /// </summary>
    /// <param name="_journalId">
    ///    The journal ID.
    /// </param>
    /// <param name="_referenceNumber">
    ///    The reference number.
    /// </param>
    /// <param name="_invoiceId">
    ///    The invoice ID.
    /// </param>
    /// <param name="_unsavedLedgerJournalTrans">
    ///    An instance of the <c>LedgerJournalTrans</c> table buffer that represents a record that has not
    ///    been saved to SQL.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LedgerJournalTaxWithholdDocument_IN</c> class.
    /// </returns>
    /// <remarks>
    ///    null may be passed for the <paramref name="_unsavedLedgerJournalTrans" /> parameter if all
    ///    <c>LedgerJournalTrans</c> records in SQL are up to date.
    /// </remarks>
    public static LedgerJournalTaxWithholdDocument_IN construct(
        JournalId           _journalId,
        Voucher             _referenceNumber,
        InvoiceId           _invoiceId,
        LedgerJournalTrans  _unsavedLedgerJournalTrans = null)
    {
        return new LedgerJournalTaxWithholdDocument_IN(_unsavedLedgerJournalTrans, _journalId, _referenceNumber, _invoiceId, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForNew</Name>
				<Source><![CDATA[
    public static LedgerJournalTaxWithholdDocument_IN constructForNew(LedgerJournalTrans _unsavedLedgerJournalTrans,
                                         JournalId _journalId,
                                         Voucher _referenceNumber,
                                         InvoiceId _invoiceId,
                                         boolean _forPostingUseOnly)
    {
        return new LedgerJournalTaxWithholdDocument_IN( _unsavedLedgerJournalTrans,
                                         _journalId,
                                         _referenceNumber,
                                         _invoiceId,
                                         _forPostingUseOnly);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>