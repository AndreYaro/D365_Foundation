<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalLineInsertFromTmpDB</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendPaymProposalLineInsertFromTmpDB</c> class inserts the logged <c>CustVendPaymProposalLine</c> rows to the database.
/// </summary>
public final class CustVendPaymProposalLineInsertFromTmpDB extends SysQueryInsertRecordSet
{
    private CustVendPaymProposalLine custVendPaymProposalLineTmpDB;
    private const int CustVendPaymProposalLineTableId = tableNum(CustVendPaymProposalLine);
    protected int custVendPaymProposalLineTmpDBDataSourceId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMapping</Name>
				<Source><![CDATA[
    protected void insertMapping(FieldId _fieldNum)
    {
        this.insertFieldMap(
            custVendPaymProposalLineTmpDBDataSourceId,
            CustVendPaymProposalLineTableId,
            _fieldNum,
            CustVendPaymProposalLineTableId,
            _fieldNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldMapping</Name>
				<Source><![CDATA[
    protected void initFieldMapping()
    {
        this.insertMapping(fieldNum(CustVendPaymProposalLine, AccountNum));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, AccountNumCompany));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, AccountType));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, BankCentralBankPurposeCode));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, BankCentralBankPurposeText));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, BankRemittanceType));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, CompanyBankAccountIdNegInst));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, CurrencyCode));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, DefaultDimension));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, EPBankFolder_BR));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, EPBarCodeInfo_BR));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, EPDocumentType_BR));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, EPInstruction_1_BR));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, EPInstruction_2_BR));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, EPPaymentType_BR));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, EPPaymentWay_BR));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, EPRemitOccCode_BR));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, EPTypedLine_BR));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, Invoice));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, InvoiceTaxCode_RU));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, JournalCompany));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, JournalId));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, LedgerDimension));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, LedgerJournalTransRecId));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, NegInstID));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, NegInstSeqNum));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, NegInstStatus));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, OffsetLedgerDimension));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, PaymAccountType));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, PaymDate));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, PaymId));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, PaymMode));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, PaymSpec));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, PaymVATAmount_RU));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, PostingProfile));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, RemittanceLocation));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, TmpRecId));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, ThirdPartyBankAccountID));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, TransOpenRecId));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, VATPaymRefRecId_RU));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, VendPaymentGroup));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, VoucherTypeId_CN));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, CFMPaymentOrderHash));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, CFMPaymentRequestRecId));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, CFMPrepayment));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, CFMTaxGroup));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, CFMTaxItemGroup));
        this.insertMapping(fieldNum(CustVendPaymProposalLine, PSNVendRoutingSlipId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected Query initQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsTmpDB = query.addDataSource(tableNum(CustVendPaymProposalLine));
        qbdsTmpDB.cursor(custVendPaymProposalLineTmpDB);

        custVendPaymProposalLineTmpDBDataSourceId = qbdsTmpDB.uniqueId();

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTargetCursor</Name>
				<Source><![CDATA[
    protected Common initTargetCursor()
    {
        CustVendPaymProposalLine custVendPaymProposalLine;

        custVendPaymProposalLine.skipDatabaseLog(true);
        custVendPaymProposalLine.skipDataMethods(true);
        custVendPaymProposalLine.skipEvents(true);

        return custVendPaymProposalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCustVendPaymProposalLineTmpDB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>CustVendPaymProposalLineInsertFromTmpDB</c> class.
    /// </summary>
    /// <param name="_custVendPaymProposalLineTmpDB">
    /// The populated TempDB <c>CustVendPaymProposalLine</c> table.
    /// </param>
    /// <returns>
    /// The instantiated <c>CustVendPaymProposalLineInsertFromTmpDB</c> object.
    /// </returns>
    public static CustVendPaymProposalLineInsertFromTmpDB newFromCustVendPaymProposalLineTmpDB(CustVendPaymProposalLine _custVendPaymProposalLineTmpDB)
    {
        CustVendPaymProposalLineInsertFromTmpDB instance = new CustVendPaymProposalLineInsertFromTmpDB();
        CustVendPaymProposalLine custVendPaymProposalLineTmpDb = instance.custVendPaymProposalLineTmpDB;
        custVendPaymProposalLineTmpDb.setTempDB();
        custVendPaymProposalLineTmpDb.linkPhysicalTableInstance(_custVendPaymProposalLineTmpDB);
        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>