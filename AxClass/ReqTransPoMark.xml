<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransPoMark</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class ReqTransPoMark extends RunBaseBatch
{
    container   conReqTransMark;
    Map         mapReqTransMark;
    Map         mapReqTransDeleted;
    Map         mapReqTransUpdated;
    Map         mapReqPoDeleted;
    Map         mapReqPoUpdated;
    Common      callerDataSourceRecord;
    int         countReqTransMarkInitial;
    int         countReqTransMarkFinal;

    protected boolean mpsMustRunPlanning;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        conReqTransMark,
        mpsMustRunPlanning
    #ENDMACRO

    #DEFINE.Version1(1)
    #LOCALMACRO.CurrentListV1
        conReqTransMark
    #ENDMACRO

    // Dialog
    Dialog dialog;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>countDisqualifiedMarkedElements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the number of disqualified records.
    /// </summary>
    /// <returns>
    ///    The number of disqualified records.
    /// </returns>
    public int countDisqualifiedMarkedElements()
    {
        this.mapReqTransMark();

        return countReqTransMarkInitial - countReqTransMarkFinal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countMarkedElements</Name>
				<Source><![CDATA[
    public Integer countMarkedElements()
    {
        return this.mapReqTransMark().elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs post processing.
    /// </summary>
    /// <remarks>
    /// This is an extension point.
    /// </remarks>
    protected void postProcess()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMustRunPlanning</Name>
				<Source><![CDATA[
    public boolean parmMustRunPlanning(boolean _mustRunPlanning = mpsMustRunPlanning)
    {
        mpsMustRunPlanning = _mustRunPlanning;

        return mpsMustRunPlanning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddDefaultFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds fields to the dialog that are common for all dialogs in the hierachy.
    /// </summary>
    /// <param name="_dialog">
    ///    The <c>Dialog</c> object that the fields are added to.
    /// </param>
    /// <param name="_addEmptyGroup">
    ///    A Boolean value that indicates if an empty group is added.
    /// </param>
    /// <param name="_addMarkedInfoAsGroup">
    ///    A Boolean value that indicates if the marked record information is added as a group.
    /// </param>
    [SuppressBpWarning('BPParameterNotUsed', 'The parameter is not used but it is mandate by the API it is extending, implementing or mocking.')]
    protected void dialogAddDefaultFields(
        Dialog  _dialog,
        boolean _addEmptyGroup,
        boolean _addMarkedInfoAsGroup)
    {
        int countMarkedElements             = this.countMarkedElements();
        int countDisqualifiedMarkedElements = this.countDisqualifiedMarkedElements();
        str text;

        // info: removed elements
        text = this.labelDialogDisqualifiedMarkedElements(countDisqualifiedMarkedElements);
        if (text)
        {
            dialog.addText(text);
        }

        // info: selected count & action
        text = this.labelDialogMarkedElements(countMarkedElements);
        if (text)
        {
            if (_addMarkedInfoAsGroup)
            {
                _dialog.addGroup(text);
            }
            else
            {
                _dialog.addText(text);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Encapsulates the typical workflow of the action.
    /// </summary>
    public void executeAction()
    {
        if (   this.countMarkedElements()
            || this.countDisqualifiedMarkedElements())
        {
            if (this.prompt())
            {
                this.run();
                this.refreshCaller();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes a caller form data source.
    /// </summary>
    /// <remarks>
    ///    Refreshes a caller form data source, so that changes done by this class are reflected in the caller form.
    ///    Default implementation refreshes a caller main datasource.
    /// </remarks>
    protected void refreshCaller()
    {
        ReqTransPoMark::refreshCallerMainDataSource(callerDataSourceRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConReqTransMark</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an internal container with the set of selected <c>ReqTrans</c> records.
    /// </summary>
    /// <param name="_args">
    ///    An <c>Args</c> value from the caller.
    /// </param>
    /// <remarks>
    ///    The container is used as the source of records that must be processed by the action. For example,
    ///    set of planned orders that must be firmed.
    /// </remarks>
    protected void initConReqTransMark(Args _args)
    {
        this.parmConReqTransMark(ReqTransPoMark::createConReqTransMark(_args, callerDataSourceRecord));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>ReTransPoMark</c> class by using the arguments that are passed in
    ///    by the caller.
    /// </summary>
    /// <param name="_args">
    ///    An instance of <c>Args</c> class passed by the caller.
    /// </param>
    public void initFromArgs(Args _args)
    {
        if (_args)
        {
            this.setCallerDataSourceRecord(_args.record());
            this.initConReqTransMark(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelDialogDisqualifiedMarkedElements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a label to be used in the dialog for showing how many marked records were disqualified.
    /// </summary>
    /// <param name="_countDisqualifiedMarkedElements">
    ///    The number of disqualified records.
    /// </param>
    /// <returns>
    ///    A label.
    /// </returns>
    protected str labelDialogDisqualifiedMarkedElements(int _countDisqualifiedMarkedElements)
    {
        str text;

        if (_countDisqualifiedMarkedElements == 1)
        {
            text = "@SYS345113";
        }
        else
        {
            if (_countDisqualifiedMarkedElements > 1)
            {
                text = strFmt("@SYS345114",_countDisqualifiedMarkedElements);
            }
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelDialogMarkedElements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a label to be used in the dialog for showing how many marked records were marked.
    /// </summary>
    /// <param name="_countMarkedElements">
    ///    The number of marked records.
    /// </param>
    /// <returns>
    ///    A label.
    /// </returns>
    [SuppressBpWarning('BPParameterNotUsed', 'The parameter is not used but it is mandate by the API it is extending, implementing or mocking.')]
    protected str labelDialogMarkedElements(int _countMarkedElements)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapReqTransMark</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal map of marked transactions.
    /// </summary>
    /// <returns>
    ///    The initialized map.
    /// </returns>
    /// <remarks>
    ///    The method removes marked records from the initial map, if they do not qualify for processing.
    /// </remarks>
    protected Map mapReqTransMark()
    {
        ReqTrans        reqTrans;
        Map             mapReqTransMarkFinal;
        MapEnumerator   me;

        if (!mapReqTransMark)
        {
            mapReqTransMark = conReqTransMark ? Map::create(conReqTransMark) : new Map(typeName2Type(extendedTypeStr(recId)), Types::Record);

            if (mapReqTransMark.elements())
            {
                countReqTransMarkInitial = mapReqTransMark.elements();
                mapReqTransMarkFinal     = new Map(mapReqTransMark.keyType(), mapReqTransMark.valueType());
                me                       = mapReqTransMark.getEnumerator();

                while (me.moveNext())
                {
                    reqTrans = me.currentValue();

                    if (!this.mustDisqualifyReqTrans(reqTrans))
                    {
                        mapReqTransMarkFinal.insert(me.currentKey(), me.currentValue());
                        countReqTransMarkFinal++;
                    }
                }

                mapReqTransMark = mapReqTransMarkFinal;
            }
        }

        return mapReqTransMark;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDisqualifyReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a given record must be disqualified.
    /// </summary>
    /// <param name="_reqTrans">
    ///    The <c>ReqTrans</c> record to validate.
    /// </param>
    /// <returns>
    ///    true if the record must be disqualified; otherwise, false.
    /// </returns>
    protected boolean mustDisqualifyReqTrans(ReqTrans _reqTrans)
    {
        return _reqTrans.IsDerivedDirectly == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        mpsMustRunPlanning = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packReqPoDeleted</Name>
				<Source><![CDATA[
    public container packReqPoDeleted()
    {
        return mapReqPoDeleted ? mapReqPoDeleted.pack() : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packReqPoUpdated</Name>
				<Source><![CDATA[
    public container packReqPoUpdated()
    {
        return mapReqPoUpdated ? mapReqPoUpdated.pack() : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packReqTransDeleted</Name>
				<Source><![CDATA[
    public container packReqTransDeleted()
    {
        return mapReqTransDeleted ? mapReqTransDeleted.pack() : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packReqTransMark</Name>
				<Source><![CDATA[
    public container packReqTransMark()
    {
        return this.mapReqTransMark() ? mapReqTransMark.pack() : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packReqTransUpdated</Name>
				<Source><![CDATA[
    public container packReqTransUpdated()
    {
        return mapReqTransUpdated ? mapReqTransUpdated.pack() : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConReqTransMark</Name>
				<Source><![CDATA[
    public container parmConReqTransMark(container _conReqTransMark = conReqTransMark)
    {
        conReqTransMark = _conReqTransMark;
        return conReqTransMark;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDeletedFromMark</Name>
				<Source><![CDATA[
    protected void removeDeletedFromMark()
    {
        MapEnumerator   me;

        if (   this.mapReqTransMark()
            && mapReqTransDeleted
            && mapReqTransDeleted.elements())
        {
            me = mapReqTransDeleted.getEnumerator();

            while (me.moveNext())
            {
                if (mapReqTransMark.exists(me.currentKey()))
                {
                    mapReqTransMark.remove(me.currentKey());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.mapReqTransMark();

        mapReqTransDeleted  = new Map(typeName2Type(extendedTypeStr(recId)), Types::Record);
        mapReqTransUpdated  = new Map(typeName2Type(extendedTypeStr(recId)), Types::Record);

        mapReqPoDeleted     = new Map(typeName2Type(extendedTypeStr(recId)), Types::Record);
        mapReqPoUpdated     = new Map(typeName2Type(extendedTypeStr(recId)), Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    ///    return false, if those tasks are to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCallerDataSourceRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the active record of the caller form.
    /// </summary>
    /// <param name="_record">
    /// The active record of the caller.
    /// </param>
    public void setCallerDataSourceRecord(Common _record)
    {
        callerDataSourceRecord = _record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            case #Version1:
                [version, #CurrentListV1] = _packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countMarkedCanBePmfPlanned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number of plan order transactions that can be use for plan planning functionality.
    /// </summary>
    /// <remarks>
    /// public client server static Integer countMarkedCanBePmfPlanned(Map _mapReqTrans)
    /// </remarks>
    /// <param name="_mapReqTrans">Transaction list.</param>
    /// <returns>Number of records.</returns>
    public static Integer countMarkedCanBePmfPlanned(
        Map _mapReqTrans)
    {
        MapIterator mi;
        ReqTrans    reqTransTest;

        Integer     countPo;

        mi = new MapIterator(_mapReqTrans);
        mi.begin();
        while (mi.more())
        {
            reqTransTest = _mapReqTrans.lookup(mi.key());
            if (reqTransTest.reqPo().PmfPlanningItemId)
            {
                countPo++;
            }

            mi.next();
        }

        return countPo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countMarkedCanBeProduced</Name>
				<Source><![CDATA[
    static Integer countMarkedCanBeProduced(Map _mapReqTrans)
    {
        MapEnumerator   me;
        ReqTrans        reqTransTest;
        InventTable     inventTable;
        Integer         countPo;

        if (   _mapReqTrans
            && _mapReqTrans.elements())
        {
            me = _mapReqTrans.getEnumerator();

            while (me.moveNext())
            {
                reqTransTest = me.currentValue();

                inventTable = InventTable::find(reqTransTest.ItemId);

                if (inventTable.inventItemType().canBeProduced())
                {
                    countPo++;
                }
            }
        }

        return countPo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countMarkedCanBeTransferred</Name>
				<Source><![CDATA[
    static Integer countMarkedCanBeTransferred(Map _mapReqTrans)
    {
        MapEnumerator           me;
        ReqTrans                reqTransTest;
        InventDimParm           inventDimParm;
        Integer                 countPo;
        InventDimGroupSetup     inventDimGroupSetup;
        ItemId                  lastItemId = '';

        if (   _mapReqTrans
            && _mapReqTrans.elements())
        {
            me = _mapReqTrans.getEnumerator();

            while (me.moveNext())
            {
                reqTransTest = me.currentValue();

                if (lastItemId != reqTransTest.ItemId)
                {
                    inventDimGroupSetup = InventDimGroupSetup::newItemId(reqTransTest.ItemId);
                    lastItemId          = reqTransTest.ItemId;
                }

                inventDimParm.initCovPrDimension(inventDimGroupSetup);
                if (inventDimParm.InventLocationIdFlag)
                {
                    countPo++;
                }
            }
        }

        return countPo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countMarkedCanHaveFormula</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number of plan order transactions that can have a formula.
    /// </summary>
    /// <param name="_mapReqTrans">
    /// A transaction list.
    /// </param>
    /// <returns>
    /// The number of records counted in the transaction list.
    /// </returns>
    public static Integer countMarkedCanHaveFormula(
        Map _mapReqTrans)
    {
        MapIterator mi;
        ReqTrans    reqTransTest;

        Integer     countPo;

        mi = new MapIterator(_mapReqTrans);
        mi.begin();
        while (mi.more())
        {
            reqTransTest = _mapReqTrans.lookup(mi.key());
            if (InventTable::find(reqTransTest.ItemId).isFormulaAllowed())
            {
                countPo++;
            }
            mi.next();
        }

        return countPo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countMarkedCoProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines number of plan order transactions that are co-products.
    /// </summary>
    /// <remarks>
    /// public client server static Integer countMarkedCoProducts(Map _mapReqTrans)
    /// </remarks>
    /// <param name="_mapReqTrans">Transaction list.</param>
    /// <returns>Number of records.</returns>
    public static Integer countMarkedCoProducts(
        Map         _mapReqTrans)
    {
        MapIterator mi;
        ReqTrans    reqTransTest;

        Integer     countPo;

        mi = new MapIterator(_mapReqTrans);
        mi.begin();
        while (mi.more())
        {
            reqTransTest = _mapReqTrans.lookup(mi.key());
            if (InventTable::find(reqTransTest.ItemId).PmfProductType
                    == PmfProductType::Co_Product)
            {
                countPo++;
            }
            mi.next();
        }

        return countPo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countMarkedRefType</Name>
				<Source><![CDATA[
    static Integer countMarkedRefType(
        Map         _mapReqTrans,
        ReqRefType  _refType)
    {
        MapEnumerator   me;
        ReqTrans        reqTransTest;
        Integer         countPo;

        if (   _mapReqTrans
            && _mapReqTrans.elements())
        {
            me = _mapReqTrans.getEnumerator();

            while (me.moveNext())
            {
                reqTransTest = me.currentValue();

                if (reqTransTest.RefType == _refType)
                {
                    countPo++;
                }
            }
        }

        return countPo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConReqTransMark</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a container with the set of selected <c>ReqTrans</c> records.
    /// </summary>
    /// <param name="_args">
    ///    An <c>Args</c> value from the caller.
    /// </param>
    /// <param name="_callerDataSourceRecord">
    ///    The primary record of the caller.
    /// </param>
    /// <returns>
    ///    A container with the set of selected <c>ReqTrans</c> records.
    /// </returns>
    public static container createConReqTransMark(
        Args   _args,
        Common _callerDataSourceRecord)
    {
        Common                          markedRecord;
        Map                             markedRecordsMap      = new Map(typeName2Type(extendedTypeStr(recId)), Types::Record);
        ReqTransPOMultiSelectionContext multiSelectionContext = ReqTransPOMultiSelectionContext::construct(_args);
        ReqTrans                        reqTrans;

        for (markedRecord = multiSelectionContext.getFirst(); markedRecord; markedRecord = multiSelectionContext.getNext())
        {
            markedRecordsMap.insert(markedRecord.RecId, markedRecord);
        }

        // Insert current record in case no records were multi-selected.
        if ( !markedRecordsMap.elements() && _callerDataSourceRecord.RecId )
        {
            reqTrans = ReqTransPoMark::getReqTransFromRecord(_callerDataSourceRecord);
            markedRecordsMap.insert(reqTrans.RecId, reqTrans);
        }

        return markedRecordsMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqTransFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a <c>ReqTrans</c> record based on the record passed by the caller in the instance of the
    ///    <c>Args</c> class.
    /// </summary>
    /// <param name="_args">
    ///    An <c>Args</c> value from the caller.
    /// </param>
    /// <returns>
    ///    A <c>ReqTrans</c> record.
    /// </returns>
    /// <remarks>
    ///    A calling form may pass either <c>ReqTrans</c> record or <c>ReqPO</c> record depending on the
    ///    conditions. If <c>ReqTrans</c> is passed it will be returned as is; otherwise if <c>ReqPO</c> is
    ///    passed the method returns joined <c>ReqTrans</c> record.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    Record of unexpected type is passed by the caller.
    /// </exception>
    public static ReqTrans getReqTransFromArgs(Args _args)
    {
        ReqTrans    reqTrans;

        if (_args)
        {
            reqTrans = ReqTransPoMark::getReqTransFromRecord(_args.record());
        }

        if (!reqTrans)
        {
            throw error("@SYS320237");
        }

        return reqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqTransFromRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>ReqTrans</c> record based on the record passed by the caller.
    /// </summary>
    /// <param name="_record">
    ///    A <c>Common</c> value from the caller.
    /// </param>
    /// <returns>
    ///    A <c>ReqTrans</c> record.
    /// </returns>
    /// <remarks>
    ///    A calling form may pass either a <c>ReqTrans</c> record or a <c>ReqPO</c> record depending on the
    ///    conditions. If a <c>ReqTrans</c> record is passed it will be returned as is; otherwise if a
    ///    <c>ReqPO</c> record is passed the method returns a joined <c>ReqTrans</c> record.
    /// </remarks>
    public static ReqTrans getReqTransFromRecord(Common _record)
    {
        ReqPO       reqPO;
        ReqTrans    reqTrans;

        if (_record is ReqTrans)
        {
            reqTrans = _record as ReqTrans;
        }
        else
        if (_record is ReqPO)
        {
            reqPO    = _record as ReqPO;
            reqTrans = reqPO.reqTrans();
        }

        return reqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCallerMainDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes caller form data source, so that changes done by this class are reflected in the caller form.
    /// </summary>
    /// <param name="_callerDataSourceRecord">
    ///    A <c>Common</c> value from the caller.
    /// </param>
    public static void refreshCallerMainDataSource(Common _callerDataSourceRecord)
    {
        if (_callerDataSourceRecord
            && (!ReqTransPoRereadActiveRowForDetailsModeFlight::instance().isEnabled() 
                || !ReqTransPoMarkOverrideRefreshCallerContext::current()))
        {
            FormDataSource dataSource = FormDataUtil::getFormDataSource(_callerDataSourceRecord);
            dataSource.research(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>