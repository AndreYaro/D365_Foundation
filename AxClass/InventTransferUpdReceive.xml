<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferUpdReceive</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTransferUpdReceive</c> class handles updates that are specific to receipts of transfer orders.
/// </summary>
class InventTransferUpdReceive extends InventTransferUpd
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>stockTransferPostTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the tax for the posted transfer line.
    /// </summary>
    /// <param name = "_inventTransLine">The <c>InventTransferLine</c> record.</param>
    /// <param name = "_inventTransferParmLine">The <c>InventTransferParmLine</c> record.</param>
    /// <param name = "_ledgerVoucher">The voucher to post tax.</param>
    /// <param name = "_defaultDimension">The default dimension value to be used in transaction.</param>
    public void stockTransferPostTax(
        InventTransferLine     _inventTransLine,
        InventTransferParmLine _inventTransferParmLine,
        LedgerVoucher          _ledgerVoucher,
        DimensionDefault       _defaultDimension)
    {
        LedgerDimensionDefaultAccount interimInventTransitAcc = InventPosting::itemLedgerDimensionFromParameter(_inventTransLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::TransferInterim_IN));

        if (!interimInventTransitAcc)
        {
            this.throwInventoryPostingAccountError(
                true,
                _inventTransLine.ItemId,
                InventAccountType::TransferInterim_IN);
        }

        TaxAmountCur loadOnInventoryTaxAmount;
        TaxAmountCur interimTaxAmount;

        [loadOnInventoryTaxAmount, interimTaxAmount] = this.calculateInterimTaxAmountGTE(
            _inventTransferParmLine,
            InventTransferUpdateType::Receive);

        CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), _ledgerVoucher.findLedgerVoucherObject().parmAccountingDate());

        _ledgerVoucher.addTrans(
            LedgerVoucherTransObject::newTransactionAmountDefault(
                _ledgerVoucher.findLedgerVoucherObject(),
                LedgerPostingType::TransferInterim_IN,
                LedgerDimensionFacade::serviceCreateLedgerDimension(interimInventTransitAcc, _defaultDimension),
                Ledger::accountingCurrency(),
                -interimTaxAmount,
                exchangeRateHelper));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVoucherTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the dimension account based on the Invent Account Type passed and to get the voucher object.
    /// </summary>
    /// <param name="_inventTransLine">
    /// A buffer of <c>InventTransferLine</c> table.
    /// </param>
    /// <param name="_inventTransferParmLine">
    /// A buffer of <c>InventTransferParmLine</c> table.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// A ledger voucher object.
    /// </param>
    /// <exception cref="Exception::Error">
    /// A exception will throw if not find any account.
    /// </exception>
    public void addVoucherTrans_IN(InventTransferLine      _inventTransLine,
                                   InventTransferParmLine  _inventTransferParmLine,
                                   LedgerVoucher           _ledgerVoucher)
    {
        AmountCur                       retentionTaxAmt;
        AmountCur                       unRelProfitAmt;
        AmountCur                       unRelLossAmt;
        CostPrice                       inventCostPrice;
        VATRetentionTrans_IN            vatRetentionTrans;
        CostPrice						inventScrapPrice;
        real                            priceInclTaxAmt;
        real                            lineAmt;

        InventDim                       inventDimTransitReceipt;

        InventTransferLine_IN           inventTransferLineIN = _inventTransLine.inventTransferLine_IN();
        InventTransOrigin               inventTransOrigin;
        InventTrans                     inventTrans;

        if (_inventTransferParmLine.QtyScrapNow > 0)
        {
            CostPrice linePrice = _inventTransLine.itemCostPrice_IN();
            inventScrapPrice = CurrencyExchangeHelper::price(linePrice, inventTransferLineIN.CurrencyCode);
        }

        inventTransferTable inventTransferTableLoc = inventTransferTable::find(_inventTransLine.TransferId);
        if (inventTransferTableLoc.TransferType_IN == TransferType_IN::StockTransfer)
        {
            inventCostPrice    = _inventTransferParmLine.inventTransferLine().inventTransferLine_IN().InventCostPriceCalculated;
            if (inventCostPrice == 0)
            {
                if (_inventTransLine.AutoReservation)
                {
                    select firstOnly InventDimId from inventTrans
                    exists join inventTransOrigin
                    where inventTransOrigin.RecId         == inventTrans.InventTransOrigin
                       && inventTransOrigin.InventTransId == _inventTransLine.InventTransIdTransitFrom;

                    inventDimTransitReceipt = _inventTransLine.inventDimMergeWarehouse(inventTransferTableLoc.InventLocationIdTransit, inventTransferTableLoc,InventDim::find(inventTrans.InventDimId));
                }
                else
                {
                    inventDimTransitReceipt = _inventTransLine.inventDimMergeWarehouse(inventTransferTableLoc.InventLocationIdTransit, inventTransferTableLoc);
                }

                real priceLoc = InventSum::find(_inventTransferParmLine.ItemId, inventDimTransitReceipt.InventDimId).costPricePcs();
                inventCostPrice = CurrencyExchangeHelper::amount(priceLoc, inventTransferLineIN.CurrencyCode);
            }
        }
        else
        {
            inventCostPrice = _inventTransLine.itemCostPrice_IN();
        }

        if (inventCostPrice < 0)
        {
            inventCostPrice = 0;
        }

        inventTransLineTax = InventTransLineTax_IN::construct(_inventTransLine, _inventTransferParmLine.inventTransferParmTable().TransDate, _inventTransferParmLine);
        inventTransLineTax.setTransferStatus(false);

        TaxAmount         taxAmount       = CurrencyExchangeHelper::amount(inventTransLineTax.calcOnPost(), inventTransferLineIN.CurrencyCode);
        real              amountOriginVal = inventTransLineTax.getAmountOrigin(_inventTransLine);
        InventTransferQty qtyTransfer;
        if (_inventTransLine.checkForUnitID_IN())
        {
            qtyTransfer = _inventTransLine.convertUnitForItem_IN(_inventTransferParmLine.ItemId, _inventTransferParmLine.InventDimId, _inventTransferParmLine.QtyReceiveNow);
        }
        else
        {
            qtyTransfer = _inventTransferParmLine.QtyReceiveNow;
        }

        // <GTE>
        TaxAmountCur loadOnInventoryTaxAmount;
        TaxAmountCur interimTaxAmount;

        [loadOnInventoryTaxAmount, interimTaxAmount] = this.calculateInterimTaxAmountGTE(
            _inventTransferParmLine,
            InventTransferUpdateType::Receive);
        // </GTE>

        if (amountOriginVal)
        {
            amountOriginVal     = amountOriginVal/qtyTransfer;
            if (amountOriginVal < (inventTransferLineIN.NetAmount / qtyTransfer))
            {
                lineAmt         = inventTransferLineIN.NetAmount / qtyTransfer;
                priceInclTaxAmt = taxAmount / qtyTransfer;
            }
        }
        else
        {
            if (inventTransferLineIN.UnitPrice == 0)
            {
                amountOriginVal = CurrencyExchangeHelper::amount(inventTransferLineIN.NetAmount / _inventTransLine.QtyTransfer, inventTransferLineIN.CurrencyCode);
                lineAmt         = amountOriginVal;
            }
            else
            {
                amountOriginVal     = inventTransferLineIN.UnitPrice;
                lineAmt             = amountOriginVal;
            }
        }
        TaxValue taxVal = vatRetentionTrans.checkFormType(_inventTransLine);

        TaxTable taxTable = TaxTable::find(inventTransferLineIN.vatRetentionCode);

        if (taxVal == 0)
        {
            retentionAmt            = CurrencyExchangeHelper::amount(vatRetentionTrans.calcVATAmt(_inventTransLine) / _inventTransLine.QtyTransfer, inventTransferLineIN.CurrencyCode) * qtyTransfer;
            retentionTaxAmt         = CurrencyExchangeHelper::amount(retentionAmt * inventTransferLineIN.Retention / 100, inventTransferLineIN.CurrencyCode);
        }

        AmountCur lineValue = CurrencyExchangeHelper::amount(inventCostPrice * qtyTransfer, inventTransferLineIN.CurrencyCode);
        AmountCur orginLineValue = CurrencyExchangeHelper::amount(amountOriginVal * qtyTransfer, inventTransferLineIN.CurrencyCode);

        AmountCur unRelAmt = amountOriginVal - inventCostPrice ;

        CostAmount scrapAmt = inventScrapPrice * _inventTransferParmLine.QtyScrapNow;

        if (unRelAmt > 0)
        {
            unRelProfitAmt = unRelAmt;
            unRelLossAmt   = 0;
        }
        else
        {
            unRelProfitAmt = 0;
            unRelLossAmt   = unRelAmt;
        }

        AmountCur interimInventTransitAmt = CurrencyExchangeHelper::amount((lineAmt - inventCostPrice) * qtyTransfer, inventTransferLineIN.CurrencyCode);

        LedgerDimensionDefaultAccount goodsAcc = InventPosting::itemLedgerDimensionFromParameter(_inventTransLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::TransferGoodsTransit_IN));

        LedgerDimensionDefaultAccount unRelProfitAcc = InventPosting::itemLedgerDimensionFromParameter(_inventTransLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::TransferProfit_IN));

        LedgerDimensionDefaultAccount unRelLossAcc = InventPosting::itemLedgerDimensionFromParameter(_inventTransLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::TransferLoss_IN));

        LedgerDimensionDefaultAccount inventReceiptAcc = InventPosting::itemLedgerDimensionFromParameter(_inventTransLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::TransferReceipt_IN));

        LedgerDimensionDefaultAccount scrapAcc = InventPosting::itemLedgerDimensionFromParameter(_inventTransLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::TransferScrap_IN));

        LedgerDimensionDefaultAccount inventIssueAcc = InventPosting::itemLedgerDimensionFromParameter(_inventTransLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::TransferIssue_IN));

        LedgerDimensionDefaultAccount interimInventTransitAcc = InventPosting::itemLedgerDimensionFromParameter(_inventTransLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::TransferInterim_IN));

        taxTable                =   TaxTable::find(inventTransferLineIN.vatRetentionCode);

        TransTaxInformation transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(_inventTransLine, false, TransTaxInformationType_IN::InventTransferTo);

        TaxLedgerAccountSetup_IN taxLedgerAccountSetupTable = TaxLedgerAccountSetup_IN::findByTaxAccountGroup(taxTable.TaxLedgerAccountGroup_IN,
                                                                                                                TaxAccountCode_IN::Table,
                                                                                                                transTaxInformation.VATTIN);

        LedgerDimensionDefaultAccount invRetentionRcptAcc = TaxLedgerAccounts_IN::findByTaxAccounts(taxLedgerAccountSetupTable.RecId,
                                                                                                      TaxAccountType_IN::VATRecoverableAccount,
                                                                                                      taxTable.TaxComponentTable_IN).LedgerDimension;

        if (!invRetentionRcptAcc)
        {
            TaxLedgerAccountSetup_IN taxLedgerAccountSetupAll = TaxLedgerAccountSetup_IN::findByTaxAccountGroup(taxTable.TaxLedgerAccountGroup_IN,
                                                                                                           TaxAccountCode_IN::All,
                                                                                                           0);

            invRetentionRcptAcc     =   TaxLedgerAccounts_IN::findByTaxAccounts(taxLedgerAccountSetupAll.RecId,
                                                                                TaxAccountType_IN::VATRecoverableAccount,
                                                                                taxTable.TaxComponentTable_IN).LedgerDimension;
        }

        if ( !goodsAcc
            || !unRelProfitAcc
            || !unRelLossAcc
            || !inventReceiptAcc
            || !scrapAcc
            || !inventIssueAcc
            || !interimInventTransitAcc
            || (retentionTaxAmt > 0 && !invRetentionRcptAcc))
        {
            this.throwInventoryPostingAccountError(
                !goodsAcc,
                _inventTransLine.ItemId,
                InventAccountType::TransferGoodsTransit_IN);
            this.throwInventoryPostingAccountError(
                !unRelProfitAcc,
                _inventTransLine.ItemId,
                InventAccountType::TransferProfit_IN);
            this.throwInventoryPostingAccountError(
                !unRelLossAcc,
                _inventTransLine.ItemId,
                InventAccountType::TransferLoss_IN);
            this.throwInventoryPostingAccountError(
                !inventReceiptAcc,
                _inventTransLine.ItemId,
                InventAccountType::TransferReceipt_IN);
            this.throwInventoryPostingAccountError(
                !scrapAcc,
                _inventTransLine.ItemId,
                InventAccountType::TransferScrap_IN);
            this.throwInventoryPostingAccountError(
                !inventIssueAcc,
                _inventTransLine.ItemId,
                InventAccountType::TransferIssue_IN);
            this.throwInventoryPostingAccountError(
                !interimInventTransitAcc,
                _inventTransLine.ItemId,
                InventAccountType::TransferInterim_IN);

            this.throwTaxLedgerPostingAccountError(
                retentionTaxAmt > 0 && !invRetentionRcptAcc,
                _inventTransLine.ItemId,
                TaxAccountType_IN::VATRecoverableAccount);
        }

        CurrencyCode accountingCurrency = Ledger::accountingCurrency();

        boolean isPostFinancial = InventTable::find(_inventTransLine.ItemId).modelGroup().PostOnhandFinancial;

        // respect isPostFinancial value for India
        mustBeBookedFinancially = isPostFinancial;

        if (goodsAcc && isPostFinancial)
        {
            invoiceAmount +=  (orginLineValue + abs(taxAmount) + abs(retentionTaxAmt))
                        //<GTE>
                        + loadOnInventoryTaxAmount + interimTaxAmount
                        //</GTE>
                        ;
            _ledgerVoucher.addTrans(
                                LedgerVoucherTransObject::newBasicDefault(
                                                            _ledgerVoucher.findLedgerVoucherObject(),
                                                            LedgerPostingType::TransferGoodsTransit_IN,
                                                            LedgerDimensionFacade::serviceCreateLedgerDimension(goodsAcc, _inventTransferParmLine.DefaultDimension_IN),
                                                            accountingCurrency,
                                                            -lineValue,
                                                            -lineValue,
                                                            CurrencyExchangeHelper::amountCur2MSTSecond_RU(-lineValue, accountingCurrency, 0, _ledgerVoucher.lastTransDate())));
        }

        if (unRelProfitAcc || unRelLossAcc)
        {
            if ((lineAmt - inventCostPrice - abs(priceInclTaxAmt)) > 0 )
            {
                _ledgerVoucher.addTrans(
                                    LedgerVoucherTransObject::newBasicDefault(
                                                                _ledgerVoucher.findLedgerVoucherObject(),
                                                                LedgerPostingType::TransferLoss_IN,
                                                                LedgerDimensionFacade::serviceCreateLedgerDimension(unRelLossAcc, _inventTransferParmLine.DefaultDimension_IN),
                                                                accountingCurrency,
                                                                CurrencyExchangeHelper::amount(abs((lineAmt - inventCostPrice - abs(priceInclTaxAmt)) * qtyTransfer), inventTransferLineIN.CurrencyCode),
                                                                CurrencyExchangeHelper::amount(abs((lineAmt - inventCostPrice - abs(priceInclTaxAmt)) * qtyTransfer), inventTransferLineIN.CurrencyCode),
                                                                CurrencyExchangeHelper::amountCur2MSTSecond_RU(abs((lineAmt - inventCostPrice - abs(priceInclTaxAmt)) * qtyTransfer), accountingCurrency, 0, _ledgerVoucher.lastTransDate())));
            }
            else
            {
                _ledgerVoucher.addTrans(
                                    LedgerVoucherTransObject::newBasicDefault(
                                                                _ledgerVoucher.findLedgerVoucherObject(),
                                                                LedgerPostingType::TransferProfit_IN,
                                                                LedgerDimensionFacade::serviceCreateLedgerDimension(unRelProfitAcc, _inventTransferParmLine.DefaultDimension_IN),
                                                                accountingCurrency,
                                                                CurrencyExchangeHelper::amount((lineAmt - inventCostPrice - abs(priceInclTaxAmt)) * qtyTransfer, inventTransferLineIN.CurrencyCode),
                                                                CurrencyExchangeHelper::amount((lineAmt - inventCostPrice - abs(priceInclTaxAmt)) * qtyTransfer, inventTransferLineIN.CurrencyCode),
                                                                CurrencyExchangeHelper::amountCur2MSTSecond_RU((lineAmt - inventCostPrice - abs(priceInclTaxAmt)) * qtyTransfer, accountingCurrency, 0, _ledgerVoucher.lastTransDate())));
            }
        }

        if (inventReceiptAcc && isPostFinancial)
        {
            if (InventTable::find(_inventTransLine.ItemId).modelGroup().InventModel == InventModel::StdCost)
            {
                real inventStdCostPrice = CurrencyExchangeHelper::amount(InventTable::findCostPcsPrice(_inventTransLine.ItemId, _inventTransferParmLine.InventDimId, null, maxDate()), inventTransferLineIN.CurrencyCode);

                AmountCur inventStdCostAmountWithoutTax = CurrencyExchangeHelper::amount(inventStdCostPrice * qtyTransfer, inventTransferLineIN.CurrencyCode);

                AmountCur inventStdCostAmount = inventStdCostAmountWithoutTax
                                    //<GTE>
                                    + loadOnInventoryTaxAmount
                                    //</GTE>
                                    ;
                if (inventCostPrice != inventStdCostPrice)
                {
                    LedgerDimensionDefaultAccount costChangeVarianceAcc = InventPosting::itemLedgerDimensionFromParameter(_inventTransLine.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventStdCostChangeVariance));

                    _ledgerVoucher.addTrans(
                                        LedgerVoucherTransObject::newBasicDefault(
                                                                    _ledgerVoucher.findLedgerVoucherObject(),
                                                                    LedgerPostingType::InventStdCostChangeVariance,
                                                                    LedgerDimensionFacade::serviceCreateLedgerDimension(costChangeVarianceAcc, _inventTransferParmLine.DefaultDimension_IN),
                                                                    accountingCurrency,
                                                                    CurrencyExchangeHelper::amount(lineValue - inventStdCostAmountWithoutTax, inventTransferLineIN.CurrencyCode),
                                                                    CurrencyExchangeHelper::amount(lineValue - inventStdCostAmountWithoutTax, inventTransferLineIN.CurrencyCode),
                                                                    CurrencyExchangeHelper::amountCur2MSTSecond_RU(lineValue - inventStdCostAmountWithoutTax, accountingCurrency, 0, _ledgerVoucher.lastTransDate())));
                }

                _ledgerVoucher.addTrans(
                                    LedgerVoucherTransObject::newBasicDefault(
                                                                _ledgerVoucher.findLedgerVoucherObject(),
                                                                LedgerPostingType::TransferReceipt_IN,
                                                                LedgerDimensionFacade::serviceCreateLedgerDimension(inventReceiptAcc, _inventTransferParmLine.DefaultDimension_IN),
                                                                accountingCurrency,
                                                                CurrencyExchangeHelper::amount(inventStdCostAmount, inventTransferLineIN.CurrencyCode),
                                                                CurrencyExchangeHelper::amount(inventStdCostAmount, inventTransferLineIN.CurrencyCode),
                                                                CurrencyExchangeHelper::amountCur2MSTSecond_RU(inventStdCostAmount, accountingCurrency, 0, _ledgerVoucher.lastTransDate())));
            }
            else
            {
                AmountCur inventCostAmount = abs(inventCostPrice * qtyTransfer)
                                //<GTE>
                                + loadOnInventoryTaxAmount
                                //</GTE>
                                ;
                _ledgerVoucher.addTrans(
                                    LedgerVoucherTransObject::newBasicDefault(
                                                                _ledgerVoucher.findLedgerVoucherObject(),
                                                                LedgerPostingType::TransferReceipt_IN,
                                                                LedgerDimensionFacade::serviceCreateLedgerDimension(inventReceiptAcc, _inventTransferParmLine.DefaultDimension_IN),
                                                                accountingCurrency,
                                                                CurrencyExchangeHelper::amount(inventCostAmount, inventTransferLineIN.CurrencyCode),
                                                                CurrencyExchangeHelper::amount(inventCostAmount, inventTransferLineIN.CurrencyCode),
                                                                CurrencyExchangeHelper::amountCur2MSTSecond_RU(inventCostAmount, accountingCurrency, 0, _ledgerVoucher.lastTransDate())));
            }
        }

        if (scrapAcc)
        {
            _ledgerVoucher.addTrans(
                                LedgerVoucherTransObject::newBasicDefault(
                                                            _ledgerVoucher.findLedgerVoucherObject(),
                                                            LedgerPostingType::TransferScrap_IN,
                                                            LedgerDimensionFacade::serviceCreateLedgerDimension(scrapAcc, _inventTransferParmLine.DefaultDimension_IN),
                                                            accountingCurrency,
                                                            scrapAmt,
                                                            scrapAmt,
                                                            CurrencyExchangeHelper::amountCur2MSTSecond_RU(scrapAmt, accountingCurrency, 0, _ledgerVoucher.lastTransDate())));
        }

        if (inventIssueAcc)
        {
            _ledgerVoucher.addTrans(
                                LedgerVoucherTransObject::newBasicDefault(
                                                            _ledgerVoucher.findLedgerVoucherObject(),
                                                            LedgerPostingType::TransferIssue_IN,
                                                            LedgerDimensionFacade::serviceCreateLedgerDimension(inventIssueAcc, _inventTransferParmLine.DefaultDimension_IN),
                                                            accountingCurrency,
                                                            - scrapAmt,
                                                            - scrapAmt,
                                                            CurrencyExchangeHelper::amountCur2MSTSecond_RU(-scrapAmt, accountingCurrency, 0, _ledgerVoucher.lastTransDate())));
        }

        if (interimInventTransitAcc)
        {
            AmountCur totalInterimInventTransitAmt = interimInventTransitAmt + abs(taxAmount)
                                        //<GTE>
                                        + interimTaxAmount
                                        //</GTE>
                                        ;
            _ledgerVoucher.addTrans(
                LedgerVoucherTransObject::newBasicDefault(
                    _ledgerVoucher.findLedgerVoucherObject(),
                    LedgerPostingType::TransferInterim_IN,
                    LedgerDimensionFacade::serviceCreateLedgerDimension(interimInventTransitAcc, _inventTransferParmLine.DefaultDimension_IN),
                    Ledger::accountingCurrency(),
                    -totalInterimInventTransitAmt,
                    -totalInterimInventTransitAmt,
                    CurrencyExchangeHelper::amountCur2MSTSecond_RU(-totalInterimInventTransitAmt, accountingCurrency, 0, _ledgerVoucher.lastTransDate())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustTaxInCostPrice_BR</Name>
				<Source><![CDATA[
    private void adjustTaxInCostPrice_BR(InventTransferParmLine _inventTransferParmLine, InventTransferLine _inventTransferLine)
    {
        InventTrans                 inventTrans;
        InventAdjustmentSpec        inventAdjustmentSpec = InventAdjustmentSpec::ItemNum;

        if (!inventTransferTableFiscalInfo_BR.canCreateReceiveFiscalDocument() || inventTransferParmTable.ReceiveUpdateQty == InventTransferReceiveUpdateQty::DocumentReturn_RU)
        {
            return;
        }

        LedgerVoucherObject ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

        InventTransAdjust inventTransAdjust = new InventTransAdjust(ledgerVoucherObject.parmTransDate(),
                                                                     ledgerVoucherObject.parmVoucher());

        InventTrans inventTransReceive = InventTrans::findTransId(_inventTransferLine.InventTransIdReceive);

        CostAmount amountToAdd = inventTransferTotals_BR.tax().taxInCostPrice(_inventTransferLine.TableId, _inventTransferLine.RecId);

        if (!amountToAdd)
        {
            return;
        }

        InventAdjustAllocate inventAdjustAllocate = new InventAdjustAllocate(_inventTransferParmLine.QtyReceiveNow, amountToAdd);

        while select forupdate inventTrans
            where inventTrans.InventTransOrigin     == inventTransReceive.InventTransOrigin
                &&  inventTrans.DateFinancial       == inventTransferParmTable.TransDate
                &&  inventTrans.StatusReceipt       == StatusReceipt::Purchased
                &&  inventTrans.StatusIssue         == StatusIssue::None
                &&  inventTrans.PackingSlipReturned == 0
                &&  !inventAdjustAllocate.isAllocated()
        {
            boolean postOnhandFinancial = inventTrans.inventTable().modelGroup().PostOnhandFinancial;

            CostAmount adjustCostAmountCur = inventAdjustAllocate.calcAdjustment(inventTrans, CompanyInfoHelper::standardCurrency());

            inventTransAdjust.updateNow(inventTrans,
                        NoYes::No,
                        NoYes::No,
                        adjustCostAmountCur,
                        postOnhandFinancial, LedgerPostingType::None, 0,
                        !postOnhandFinancial, LedgerPostingType::None, 0,
                        false,
                        ledgerVoucher,
                        inventAdjustmentSpec);

            if (!inventAdjustAllocate.isAllocated())
            {
                throw error("@SYS15814");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>beginLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the data that is required for updating the ledger voucher.
    /// </summary>
    /// <remarks>
    /// The data is not committed before the <see cref="M:InventTransferUpd.commitLedger" /> method is
    /// called.
    /// </remarks>
    protected void beginLedger()
    {
        // <GBR>
        if (BrazilParameters::isEnabled() && inventTransferTableFiscalInfo_BR.canCreateShipmentFiscalDocument())
        {
            fiscalDocumentNumber_BR = this.getFiscalDocumentNumber_BR();
        }
        // </GBR>

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Commits the voucher.
    /// </summary>
    protected void commitLedger()
    {
        InventTransferParmTable canceledInventTransferParmTable;

        InventTransferJour InventTransferJourToCancel;

        this.postTax(true);

        super();

        if (BrazilParameters::isEnabled())
        {
            if (inventTransferTableFiscalInfo_BR.canCreateReceiveFiscalDocument())
            {
                FiscalDocument_BR rejectedThirdPartyTransferFiscalDocument = inventTransferTableFiscalInfo_BR.getRejectedThirdPartyTransferFiscalDocument();

                if (rejectedThirdPartyTransferFiscalDocument)
                {
                    this.processRejectedFiscalDocument(rejectedThirdPartyTransferFiscalDocument);
                }
                else if (inventTransferParmTable.ReceiveUpdateQty != InventTransferReceiveUpdateQty::DocumentReturn_RU)
                {
                    FiscalDocumentPost_BR fiscalDocumentPost = new FiscalDocumentPost_BR(
                        FiscalDocParmDataCreatorInvTransfer_BR::fromInventTransferOrder(inventTransferJour, inventTransferParmTable, inventTransferTable, inventTransferTableFiscalInfo_BR, InventTransferUpdateType::Receive, inventTransferTotals_BR, fiscalDocumentNumber_BR));

                    fiscalDocumentPost.run();
                }
                else
                {
                    select RecId, ReasonTableRef_BR from InventTransferJourToCancel
                        where InventTransferJourToCancel.VoucherId == inventTransferParmTable.VoucherShipmentId;

                    FiscalDocument_BR fiscalDocumentToCancel = FiscalDocument_BR::findByRef(InventTransferJourToCancel.TableId, InventTransferJourToCancel.RecId);
                    FiscalDocumentPost_BR::cancelFiscalDocument(fiscalDocumentToCancel,
                                                                '',dateNull(),'',
                                                                ReasonTableRef::find(InventTransferJourToCancel.ReasonTableRef_BR).ReasonComment);

                    // clean VoucherShipmentId to enable receive the shipment again
                    if (inventTransferTableFiscalInfo_BR.isFiscalEstablishmentOrder())
                    {
                        update_recordSet canceledInventTransferParmTable
                            setting VoucherShipmentId = ''
                            where canceledInventTransferParmTable.TransferId == inventTransferParmTable.TransferId
                                && canceledInventTransferParmTable.VoucherShipmentId == this.getShipInventTransferJourVoucherId_BR(fiscalDocumentToCancel);
                    }
                    else
                    {
                        update_recordSet canceledInventTransferParmTable
                            setting VoucherShipmentId = ''
                            where canceledInventTransferParmTable.TransferId == inventTransferParmTable.TransferId;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentNumber_BR</Name>
				<Source><![CDATA[
    private FiscalDocumentNumber_BR getFiscalDocumentNumber_BR()
    {
        FiscalDocument_BR shipFiscaldocument;
        InventTransferJour shipInventTransferJour;

        select FiscalDocumentNumber, Model, FiscalDocumentSeries, Specie from shipFiscaldocument
            exists join shipInventTransferJour
                where shipInventTransferJour.RecId == shipFiscaldocument.RefRecId
                    && shipInventTransferJour.TableId == shipFiscaldocument.RefTableId
                    && shipInventTransferJour.VoucherId == inventTransferParmTable.VoucherShipmentId
                    && shipInventTransferJour.UpdateType == InventTransferUpdateType::Shipment;

        return shipFiscaldocument.FiscalDocumentNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipInventTransferJourVoucherId_BR</Name>
				<Source><![CDATA[
    private InventTransferVoucherId getShipInventTransferJourVoucherId_BR(FiscalDocument_BR recieveFiscalDocument)
    {
        FiscalDocument_BR shipmentFiscalDocument;
        InventTransferJour shipmentInventTransferJour;

        select VoucherId from shipmentInventTransferJour
            exists join shipmentFiscalDocument
                where shipmentFiscalDocument.FiscalDocumentNumber           == recieveFiscalDocument.FiscalDocumentNumber
                    && shipmentFiscalDocument.FiscalDocumentSeries          == recieveFiscalDocument.FiscalDocumentSeries
                    && shipmentFiscalDocument.FiscalEstablishmentCNPJCPF    == recieveFiscalDocument.ThirdPartyCNPJCPF
                    && shipmentFiscalDocument.ThirdPartyCNPJCPF             == recieveFiscalDocument.FiscalEstablishmentCNPJCPF
                    && shipmentFiscalDocument.Status                        == FiscalDocumentStatus_BR::Approved
                    && shipmentFiscalDocument.RefRecId                      == shipmentInventTransferJour.RecId
                    && shipmentFiscalDocument.RefTableId                    == shipmentInventTransferJour.TableId;

        return shipmentInventTransferJour.VoucherId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRejectedFiscalDocument</Name>
				<Source><![CDATA[
    private void processRejectedFiscalDocument(FiscalDocument_BR _fiscalDocument)
    {
        InventTransferJour inventTransferJourToCancel = InventTransferJour::findRecId(_fiscalDocument.RefRecId);

        FiscalDocumentPost_BR::cancelFiscalDocument(
            _fiscalDocument,
            '',
            inventTransferJourToCancel.TransDate,
            '',
            ReasonTableRef::find(inventTransferJourToCancel.ReasonTableRef_BR).ReasonComment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransferTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal <see cref="T:InventTransferTable" /> buffer based on the internal <see
    /// cref="T:InventTransferLine" /> table.
    /// </summary>
    protected void initInventTransferTable()
    {
        super();

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            inventTransferTableFiscalInfo_BR = inventTransferTable.inventTransferTableFiscalInfo_BR();
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the transfer order taxes.
    /// </summary>
    /// <param name="_post">
    /// A Boolean value that indicates whether the taxes will be posted or not.
    /// </param>
    protected void  postTax(boolean _post)
    {
        super(_post);

        if (BrazilParameters::isEnabled() && inventTransferTableFiscalInfo_BR.canCreateReceiveFiscalDocument())
        {
            TradeCalcTax tradeCalcTax = InventTransferCalcTax_BR::construct(inventTransferJour);

            if (tradeCalcTax)
            {
                tradeCalcTax.tax(inventTransferTotals_BR.tax());
                tradeCalcTax.post(ledgerVoucher, _post);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUpdateFieldId_RU</Name>
				<Source><![CDATA[
    protected FieldId qtyUpdateFieldId_RU()
    {
        return fieldNum(InventTransferParmLine, QtyReceiveNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles initialization and updates, for example, of journals and ledger transactions, that are
    ///    performed during the update.
    /// </summary>
    void run()
    {
        setPrefix(InventTransferMultiReceive::description());
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCatchWeightReceiveNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets <c>ReceiveNow</c> field value based on the inventory quantity calculated from the inventory transactions.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    /// An <c>InventTransferParmLine</c> table buffer.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Not enough transactions in status registered.
    /// </exception>
    protected void setCatchWeightReceiveNow(InventTransferParmLine _inventTransferParmLine)
    {
        PdsCatchWeightMovementQtyAdjustment pdsCatchWeightMovementQtyAdjustment = PdsCatchWeightMovementQtyAdjustment::newTransferReceive(
            _inventTransferParmLine,
            ledgerVoucher);

        _inventTransferParmLine.QtyReceiveNow = pdsCatchWeightMovementQtyAdjustment.transferReceiptQty(
            InventTransferUpdateType::Receive,
            _inventTransferParmLine.PdsCWQtyReceiveNow);

        if (!pdsCatchWeightMovementQtyAdjustment.isFullCatchWeightQuantityAssigned())
        {
            warning("@SCM:ItemFullCatchWeightQuantityNotAssigned");
            Info("@SCM:InventOrderRegisterGeneralGuide");
            throw error(strFmt("@SYS54028",StatusReceipt::Registered));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCatchWeightScrapNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets <c>ScrapNow</c> field value based on the inventory quantity calculated from the inventory transactions.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    /// An <c>InventTransferParmLine</c> table buffer.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Not enough transactions in status registered.
    /// </exception>
    protected void setCatchWeightScrapNow(InventTransferParmLine _inventTransferParmLine)
    {
        PdsCatchWeightMovementQtyAdjustment pdsCatchWeightMovementQtyAdjustment = PdsCatchWeightMovementQtyAdjustment::newTransferScrap(
            _inventTransferParmLine,
            ledgerVoucher);

        _inventTransferParmLine.QtyScrapNow = pdsCatchWeightMovementQtyAdjustment.transferReceiptQty(
            InventTransferUpdateType::Receive,
            _inventTransferParmLine.PdsCWQtyScrapNow);

        if (!pdsCatchWeightMovementQtyAdjustment.isFullCatchWeightQuantityAssigned())
        {
            throw error(strFmt("@SYS54028",StatusReceipt::Registered));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransitFromIdentifiedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory transactions physically and financially for the from <c>InventMovement</c>.
    /// </summary>
    /// <param name = "_movementTransitFrom">The from <c>InventMovement</c>.</param>
    /// <param name = "_inventTransferParmLine">An <c>InventTransferParmLine</c> record that defines the <c>InventTransferLine</c> for which
    /// inventory transactions are updated.</param>
    /// <param name = "_inventTransferLine">The <c>InventTransferLine</c> for which inventory transactions are updated.</param>
    /// <param name = "_inventDimTransitIssue">An <c>InventDim</c> record used for the update.</param>
    /// <returns>The <c>InventUpd_Financial</c> used for the update.</returns>
    protected InventUpd_Financial updateTransitFromIdentifiedTransactions(
        InventMovement _movementTransitFrom,
        InventTransferParmLine _inventTransferParmLine,
        InventTransferLine _inventTransferLine,
        InventDim _inventDimTransitIssue)
    {
        InventDimParm  inventDimParm;
        inventDimParm.initDimTransferReceipt(_inventDimTransitIssue);

        InventUpd_Financial inventUpd_Financial;

        // Physical and financial receive issue update
        if (_inventTransferLine.checkForUnitID_IN())
        {
            inventUpd_Financial = InventUpd_Financial::newInventTransferLineReceive(_movementTransitFrom,
                                                                                    ledgerVoucher,
                                                                                    0,
                                                                                    _inventTransferLine.convertUnitForItem_IN(_inventTransferParmLine.ItemId, _inventTransferParmLine.InventDimId, _inventTransferParmLine.QtyReceiveNow),
                                                                                    _inventDimTransitIssue,
                                                                                    inventDimParm);
        }
        else
        {
            boolean cwItem = PdsGlobal::pdsIsCWItem(_inventTransferLine.ItemId);
            inventUpd_Financial = InventUpd_Financial::newInventTransferLineReceive(_movementTransitFrom,
                                                                                    ledgerVoucher,
                                                                                    0,
                                                                                    _inventTransferParmLine.QtyReceiveNow,
                                                                                    _inventDimTransitIssue,
                                                                                    inventDimParm,
                                                                                    cwItem ? _inventTransferParmLine.PdsCWQtyReceiveNow : 0);
        }

        if (InventTransferOrderRecordInventDimForCostFlight::instance().isEnabled())
        {
            using (InventTransferUpdRecordInventDimForCostContext context = new InventTransferUpdRecordInventDimForCostContext())
            {
                inventUpd_Financial.updateNow();
            }
        }
        else
        {
            inventUpd_Financial.updateNow();
        }
    
        return inventUpd_Financial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransitFromUnIdentifiedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory transactions physically and financially for the to <c>InventMovement</c>.
    /// </summary>
    /// <param name = "_movementTo">The to <c>InventMovement</c>.</param>
    /// <param name = "_inventTransferParmLine">An <c>InventTransferParmLine</c> record that defines the <c>InventTransferLine</c> for which
    /// inventory transactions are updated.</param>
    /// <param name = "_inventTransferLine">the <c>InventTransferLine</c> for which inventory transactions are updated.</param>
    /// <returns>The <c>InventUpd_Financial</c> used for the update.</returns>
    protected InventUpd_Financial updateTransitFromUnIdentifiedTransactions(
        InventMovement _movementTo,
        InventTransferParmLine _inventTransferParmLine,
        InventTransferLine _inventTransferLine)
    {
        InventUpd_Financial inventUpd_Financial;

        // Physical and financial receive issue update
        if (_inventTransferLine.checkForUnitID_IN())
        {
            inventUpd_Financial = InventUpd_Financial::newInventTransferLineReceive(_movementTo,
                                                                                    ledgerVoucher,
                                                                                    0,
                                                                                    _inventTransferLine.convertUnitForItem_IN(_inventTransferParmLine.ItemId, _inventTransferParmLine.InventDimId, _inventTransferParmLine.QtyReceiveNow),
                                                                                    null,
                                                                                    null);
        }
        else
        {
            inventUpd_Financial = InventUpd_Financial::newInventTransferLineReceive(_movementTo,
                                                                                    ledgerVoucher,
                                                                                    0,
                                                                                    _inventTransferParmLine.QtyReceiveNow,
                                                                                    null,
                                                                                    null,
                                                                                    _inventTransferParmLine.PdsCWQtyReceiveNow);
        }
         
        if (InventTransferOrderRecordInventDimForCostFlight::instance().isEnabled())
        {
            using (InventTransferUpdRecordInventDimForCostContext context = new InventTransferUpdRecordInventDimForCostContext())
            {
                inventUpd_Financial.updateNow();
            }
        }
        else
        {
            inventUpd_Financial.updateNow();
        }
                
        return inventUpd_Financial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates an <c>InventTransferLine</c> record.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    /// An <c>InventTransferParmLine</c> record that defines the <c>InventTransferLine</c> record to be
    /// updated.
    /// </param>
    /// <remarks>
    /// The method should not update a related <c>InventTransferTable</c> record because the record will be
    /// updated by the caller after all lines are updated.
    /// </remarks>
    protected void updateInventTransferLine(InventTransferParmLine  _inventTransferParmLine)
    {
        InventDimParm                           inventDimParm;
        InventDimParm                           inventDimParmReceipt;

        InventUpd_Financial                     inventUpd_Financial;
        InventTrans                             inventTrans;
        InventTrans                             inventTransReceipt;
        CostAmount                              costAmountReceiptInitial;
        CostAmount                              costAmountReceiptCurrent;

        CostAmount                              costAmountReceiptScrap;

        PdsCWInventQty                          cwQtyReceive;

        // <GIN>
        real                    itemUnitPrice;
        TaxTrans_IN             taxTransCopy, taxTransloc;
        TaxAmount               allocatedLoadOnInventoryAmount;
        TaxAmount               adjustLoadOnInventoryAmount;
        InventTransferLine_IN   inventTransferLineIN;
        // </GIN>
        //<GEERU>
        boolean                 countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || BrazilParameters::isEnabled();
        CostAmount              costAmountReceiptUndamagedSecCur_RU;
        CostAmount              costAmountReceiptScrapSecCur_RU;
        //</GEERU>

        //    check line
        InventTransferLine inventTransferLine = InventTransferLine::findTransIdReceive(_inventTransferParmLine.InventTransId,true);

        boolean cwItem = PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId);

        if (! inventTransferLine.RecId)
        {
            throw error(strFmt("@SYS78590",_inventTransferParmLine.InventTransId));
        }

        setPrefix(#PreFixField(inventTransferLine,LineNum));

        // <GEERU>
        if (! countryRegion_RU)
        {
            // </GEERU>
            if (_inventTransferParmLine.qtyReceiveNowTotal() <= 0)
            {
                throw error("@SYS78701");
            }

            if (_inventTransferParmLine.QtyScrapNow < 0)
            {
                throw error("@SYS78692");
            }

            if (_inventTransferParmLine.QtyReceiveNow <= 0)
            {
                throw error("@SYS78530");
            }
            // <GEERU>
        }

        if (countryRegion_RU
            && (_inventTransferParmLine.qtyReceiveNowTotal() == 0))
        {
            throw error("@GLS113816");
        }

        if (countryRegion_RU
            && (_inventTransferParmLine.qtyReceiveNowTotal() * _inventTransferParmLine.QtyScrapNow < 0))
        {
            throw error("@GLS113803");
        }

        if (countryRegion_RU
            && (_inventTransferParmLine.qtyReceiveNowTotal() < 0))
        {
            if (abs(_inventTransferParmLine.qtyReceiveNowTotal()) > inventTransferLine.QtyReceived)
            {
                throw error(strFmt("@GLS113814", abs(_inventTransferParmLine.QtyReceiveNow), inventTransferLine.QtyReceived));
            }

            if (abs(_inventTransferParmLine.QtyScrapNow) > inventTransferLine.QtyScrapped)
            {
                throw error(strFmt("@GLS113810", abs(_inventTransferParmLine.QtyScrapNow), inventTransferLine.QtyScrapped));
            }

            if (inventTransferLine.QtyScrapped &&
                abs(_inventTransferParmLine.QtyReceiveNow - _inventTransferParmLine.QtyScrapNow) > abs(inventTransferLine.QtyReceived - inventTransferLine.QtyScrapped))
            {
                throw error(strFmt("@GLS113817", abs(_inventTransferParmLine.QtyReceiveNow), inventTransferLine.QtyScrapped));
            }
        }
        else
        {
            // </GEERU>
            if (!cwItem && inventTransferLine.QtyRemainReceive < _inventTransferParmLine.qtyReceiveNowTotal())
                throw error(strFmt("@SYS78702",_inventTransferParmLine.qtyReceiveNowTotal(),inventTransferLine.QtyRemainReceive));

            if (!cwItem && _inventTransferParmLine.qtyReceiveNowTotal() + inventTransferLine.QtyReceived > inventTransferLine.QtyShipped)
            {
                // <GEERU>
                if (countryRegion_RU)
                {
                    throw error(strFmt("@SYS78776",_inventTransferParmLine.qtyReceiveNowTotal() + inventTransferLine.QtyReceived,inventTransferLine.QtyShipped));
                }
                else
                {
                    // </GEERU>
                    throw error(strFmt("@SYS78776",_inventTransferParmLine.qtyReceiveNowTotal(),inventTransferLine.QtyShipped));
                    // <GEERU>
                }
                // </GEERU>
            }

            if (inventTransferParmTable.ReceiveUpdateQty == InventTransferReceiveUpdateQty::Shipment
                && ! inventTransferParmTable.ExplodeLines)
            {
                if (!inventTransferParmTable.VoucherShipmentId)
                {
                    InventTransferJourLine inventTransferJourLine;

                    while select VoucherId from inventTransferJourLine
                        group by VoucherId
                        where inventTransferJourLine.TransferId == inventTransferParmTable.TransferId
                        && inventTransferJourLine.InventTransId == inventTransferLine.InventTransId
                    {
                        if (! inventTransferLine.canReceiptBeIdentified(inventTransferJourLine.VoucherId))
                        {
                            throw error(strFmt("@SYS78947","@SYS78725"));
                        }
                    }
                }
                else
                {
                    if (! inventTransferLine.canReceiptBeIdentified(inventTransferParmTable.VoucherShipmentId))
                    {
                        throw error(strFmt("@SYS78947","@SYS78725"));
                    }
                }
            }
            // <GEERU>
        }
        // </GEERU>

        if (cwItem)
        {
            if (inventTransferLine.PdsCWQtyRemainReceive < _inventTransferParmLine.PdsCWQtyReceiveNow)
            {
                throw error(strFmt("@PDS151", _inventTransferParmLine.PdsCWQtyReceiveNow, inventTransferLine.PdsCWQtyRemainReceive));
            }

            if (_inventTransferParmLine.PdsCWQtyReceiveNow + inventTransferLine.PdsCWQtyReceived > inventTransferLine.PdsCWQtyShipped)
            {
                throw error(strFmt("@SYS78776", _inventTransferParmLine.PdsCWQtyReceiveNow, inventTransferLine.PdsCWQtyShipped));
            }

            this.setCatchWeightReceiveNow(_inventTransferParmLine);
            this.setCatchWeightScrapNow(_inventTransferParmLine);
        }

        if (_inventTransferParmLine.QtyScrapNow > 0
            && !inventTransferParmTable.ExplodeLines
            && inventTransferLine.mustTransitIssueBeIdentified(_inventTransferParmLine.QtyScrapNow))
        {
            throw error("@SYS4002473");
        }

        // init movements
        InventMovement movementTo = InventMovement::construct(inventTransferLine,InventMovSubType::TransferOrderTo);
        InventMovement movementTransitFrom = InventMovement::construct(inventTransferLine,InventMovSubType::TransferOrderTransitFrom);

        // <GIN>
        if ((SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && inventTransferLine.inventTransferTable().TransferType_IN == TransferType_IN::StockTransfer) ||
            (inventTransferLine.checkForUnitID_IN()))
        {
            movementTo.parmInventParmID_IN(_inventTransferParmLine.ParmId);
            movementTransitFrom.parmInventParmID_IN(_inventTransferParmLine.ParmId);
        }
        // </GIN>

        // <GEERU>
        if (countryRegion_RU)
        {
            movementTo.parmStorno_RU(isStorno);
            movementTransitFrom.parmStorno_RU(isStorno);
        }
        // </GEERU>

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            mustBeBookedFinancially = movementTo.mustBeBookedFinancially();
        }
        this.updateInventoryTax(movementTo, _inventTransferParmLine);
        TaxAmountCur inventoryTaxAmount = this.calculateInventoryTaxAmountGTE(_inventTransferParmLine,TaxAccountingPostingProfileDistributionSide::Debit);
        // </GTE>

        InventDim inventDim = InventDim::find(_inventTransferParmLine.InventDimId);
        inventDimParm.initFromInventDim(inventDim);

        // Initial check ensures that _inventTransferParmLine.QtyReceiveNow is not zero
        real scrapRatio = _inventTransferParmLine.QtyScrapNow / _inventTransferParmLine.QtyReceiveNow;
        
        if (scrapRatio != 1 && inventTransferLine.mustTransitIssueBeIdentified(_inventTransferParmLine.QtyReceiveNow))
        {
            // <GEERU>
            //return received items partly
            if (countryRegion_RU
                && (_inventTransferParmLine.QtyReceiveNow < 0))
            {
                this.updateInventTransferReceiveRetPartly_RU(_inventTransferParmLine,
                                                             inventTransferLine,
                                                             movementTransitFrom,
                                                             movementTo,
                                                             inventDim);
            }
            else
            {
                // </GEERU>
                InventDim inventDimTransitIssue = movementTransitFrom.inventDimMerged(inventDim);
                inventDimParm.initDimTransferReceipt(inventDimTransitIssue);

                inventUpd_Financial = this.updateTransitFromIdentifiedTransactions(movementTransitFrom, _inventTransferParmLine, inventTransferLine, inventDimTransitIssue);

                costAmountReceiptScrap = CurrencyExchangeHelper::amount(-inventUpd_Financial.updCostAmountInvent() * scrapRatio);
                costAmountReceiptInitial = -inventUpd_Financial.updCostAmountInvent() - costAmountReceiptScrap
                                            // <GTE>
                                            + inventoryTaxAmount
                                            // </GTE>
                                            ;
                CostAmount costAmountReceiptRemain = costAmountReceiptInitial;

                // Physical and financial receive receipt update
                inventDimTransitIssue             = null;
                InventQty      qtyRemainReceive   = _inventTransferParmLine.QtyReceiveNow - _inventTransferParmLine.QtyScrapNow;
                PdsCWInventQty cwQtyRemainReceive = _inventTransferParmLine.PdsCWQtyReceiveNow - _inventTransferParmLine.PdsCWQtyScrapNow;
                Voucher        lastVoucher        = ledgerVoucher.lastVoucher();

                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    inventTransTable = InventTransferTable::find(inventTransferLine.TransferId, false);
                    inventTransferLineIN = inventTransferLine.inventTransferLine_IN();

                    if (inventTransTable.TransferType_IN == TransferType_IN::StockTransfer)
                    {
                        if (inventTransTable.StockTransferCostPriceHandlingImprovement_IN)
                        {
                            this.stockTransferPostTax(inventTransferLine, _inventTransferParmLine, ledgerVoucher, movementTo.defaultDimension());
                        }
                        else
                        {
                            this.addVoucherTrans_IN(inventTransferLine, _inventTransferParmLine, ledgerVoucher);
                            inventTransLineTax.setVoucherId(voucherId);
                            inventTransLineTax.setLoadOnInventAcc(inventTransferLine);
                            inventTransLineTax.inventPost(ledgerVoucher, false, _inventTransferParmLine, voucherId);
                            if (inventTransferLineIN.UnitPrice == 0)
                            {
                                itemUnitPrice = CurrencyExchangeHelper::price(inventTransferLineIN.NetAmount / inventTransferLine.QtyTransfer, inventTransferLineIN.CurrencyCode);
                            }
                            else
                            {
                                itemUnitPrice = inventTransferLineIN.UnitPrice;
                            }

                            select sum(LoadOnInventoryAmount) from taxTransloc
                                where taxTransloc.SourceRecId    == inventTransferLine.RecId
                                    && taxTransloc.SourceTableId == inventTransferLine.TableId
                                    && taxTransloc.Voucher       == lastVoucher;

                            TaxAmount loadOnInventoryAmount = abs(taxTransloc.LoadOnInventoryAmount);
                            allocatedLoadOnInventoryAmount = CurrencyExchangeHelper::amount(loadOnInventoryAmount /  _inventTransferParmLine.QtyReceiveNow, inventTransferLineIN.CurrencyCode);
                            adjustLoadOnInventoryAmount = loadOnInventoryAmount - allocatedLoadOnInventoryAmount * _inventTransferParmLine.QtyReceiveNow;

                            update_recordset taxTransCopy
                            setting TransactionAmount = _inventTransferParmLine.QtyReceiveNow * itemUnitPrice,
                                    Quantity          = _inventTransferParmLine.QtyReceiveNow
                            where taxTransCopy.SourceTableId == tableNum(InventTransferLine)
                                && taxTransCopy.SourceRecId  == inventTransferLine.RecId;

                            inventTransferLine.QtyScrapped = _inventTransferParmLine.QtyScrapNow;
                        }
                    }
                }
                // </GIN>

                Map previouslyProcessedReceiptQtyPerInventDimId = new Map(Types::String, Types::Container);

                //loop sold issues from transit warehouse and update the matching receipts on the to warehouse
                while select sum(Qty), sum(PdsCWQty)
                from inventTrans
                group by InventDimId desc //Group opposite of what parmlines are, to avoid selecting allready updated receipts
                    where inventTrans.InventTransOrigin     == movementTransitFrom.inventTransOriginId()
                    &&    inventTrans.StatusReceipt         == StatusReceipt::None
                    &&    inventTrans.StatusIssue           == StatusIssue::Sold
                    &&    inventTrans.Voucher               == lastVoucher
                join #InventDimGroupAllFields from inventDimTransitIssue
                group by #InventDimGroupAllFields
                    where inventDimTransitIssue.InventDimId == inventTrans.InventDimId
                {
                    InventDim inventDimReceipt = movementTo.inventDimMerged(inventDimTransitIssue);

                    //We may have received the line on two different locations with exact same dimensions.
                    //In that case location should be merged to inventDimParm and we should merge wmslocationid from the inventtransferparmline to make the search more specific
                    // inventDim comes from parm lines and if parm lines specify a specific wMSLocationId
                    if (inventDim.wMSLocationId)
                    {
                        inventDimReceipt.wMSLocationId = inventDim.wMSLocationId;
                        inventDimReceipt = InventDim::findOrCreate(inventDimReceipt);
                    }

                    Qty previouslyProcessedReceiptQty;
                    Qty previouslyProcessedCWReceiptQty;

                    if (previouslyProcessedReceiptQtyPerInventDimId.exists(inventDimReceipt.inventDimId))
                    {
                        [previouslyProcessedReceiptQty, previouslyProcessedCWReceiptQty] = previouslyProcessedReceiptQtyPerInventDimId.lookup(inventDimReceipt.inventDimId);
                    }

                    inventDimParmReceipt.initDimTransferReceipt(inventDimReceipt);
                    
                    //When receiveing we need use wmsLocationid to query inventtrans if inventDim has wmslocationid.
                    //This is to cover scenarios where the line has been registered on different locations.
                    // Note that we need to force the wMSLocationIdFlag only if wMSLocationId was explicitly passed in inventDim (from parm lines). InventDimReceipt can have a defaulted receipt location
                    if (inventDim.wMSLocationId)
                    {
                        inventDimParmReceipt.WMSLocationIdFlag = NoYes::Yes;
                    }

                    // If we receiving into a non-LPN controlled location then LP is not mergable
                    if (inventDimParmReceipt.LicensePlateFlag == NoYes::Yes &&
                        WHSInventEnabled::exist(_inventTransferParmLine.ItemId) &&
                        !inventDimReceipt.wmsLocation().whsLocationIsLPControlled())
                    {
                        inventDimParmReceipt.LicensePlateFlag = NoYes::No;
                    }

                    InventDim inventDimJoin;

                    select sum(Qty), sum(PdsCWQty)
                    from inventTransReceipt
                        where inventTransReceipt.InventTransOrigin  == movementTo.inventTransOriginId()
                        &&    inventTransReceipt.Voucher            == lastVoucher
                        &&    inventTransReceipt.StatusReceipt      == StatusReceipt::Purchased
                    #inventDimExistsJoin(inventTransReceipt.InventDimId, inventDimJoin, inventDimReceipt, inventDimParmReceipt);


                    if (inventTransReceipt.Qty - previouslyProcessedReceiptQty < abs(inventTrans.Qty))
                    {
                        InventQty qtyReceive = min(qtyRemainReceive,(abs(inventTrans.Qty) - (inventTransReceipt.Qty - previouslyProcessedReceiptQty)));
                        previouslyProcessedReceiptQty += qtyReceive;

                        if (cwItem)
                        {
                            cwQtyReceive = min(cwQtyRemainReceive, (abs(inventTrans.PdsCWQty) - (inventTransReceipt.PdsCWQty - previouslyProcessedCWReceiptQty)));
                            previouslyProcessedCWReceiptQty += cwQtyReceive;
                        }
                        else
                        {
                            cwQtyReceive = 0;
                        }

                        previouslyProcessedReceiptQtyPerInventDimId.insert(inventDimReceipt.inventDimId, [previouslyProcessedReceiptQty, previouslyProcessedCWReceiptQty]);

                        if (qtyReceive == qtyRemainReceive)
                        {
                            // To avoid getting hit by rounding errors
                            costAmountReceiptCurrent = costAmountReceiptRemain;
                        }
                        else
                        {
                            //Initial check ensures that _inventTransferParmLine.QtyReceiveNow is not zero
                            costAmountReceiptCurrent = CurrencyExchangeHelper::amount(costAmountReceiptInitial * qtyReceive / _inventTransferParmLine.QtyReceiveNow);
                        }

                        costAmountReceiptRemain -= costAmountReceiptCurrent;

                        // <GIN>
                        if (inventTransferLine.checkForUnitID_IN())
                        {
                            inventUpd_Financial = InventUpd_Financial::newInventTransferLineReceive(
                                movementTo,
                                ledgerVoucher,
                                costAmountReceiptCurrent,
                                inventTransferLine.convertUnitForItem_IN(_inventTransferParmLine.ItemId, _inventTransferParmLine.InventDimId, qtyReceive),
                                inventDimReceipt,
                                inventDimParmReceipt);
                        }
                        else
                        {
                            // </GIN>
                            inventUpd_Financial = InventUpd_Financial::newInventTransferLineReceive(
                                movementTo,
                                ledgerVoucher,
                                costAmountReceiptCurrent,
                                qtyReceive,
                                inventDimReceipt,
                                inventDimParmReceipt,
                                cwQtyReceive);
                            // <GIN>
                        }
                        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                            && inventTransTable.TransferType_IN == TransferType_IN::StockTransfer)
                        {
                            AmountCur costAmountCurloc = inventUpd_Financial.parmCostAmountCur() + abs(allocatedLoadOnInventoryAmount + adjustLoadOnInventoryAmount);
                            inventUpd_Financial.parmCostAmountCur(costAmountCurloc);
                            // clear adjusted amount to zero anyway
                            adjustLoadOnInventoryAmount = 0;
                        }
                        // </GIN>
                        inventUpd_Financial.updateNow();

                        inventTransferLine.QtyReceived += inventUpd_Financial.updFinancial();

                        qtyRemainReceive -= inventUpd_Financial.updFinancial();

                        if (cwItem)
                        {
                            inventTransferLine.PdsCWQtyReceived += inventUpd_Financial.pdsCWUpdFinancial();
                            cwQtyRemainReceive -= inventUpd_Financial.pdsCWUpdFinancial();
                        }

                        if (!qtyRemainReceive)
                        {
                            break;
                        }
                    }
                }

                //    If there is still something remaining to be received we must fail,
                //    since it means that less than what was shipped at transit warehouse is received at the To warehouse.
                if (qtyRemainReceive)
                {
                    throw error("@SYS18447");
                }
                // <GEERU>
            }
            // </GEERU>
            inventDimParm.initFromInventDim(inventDim);
        }
        else
        {
            // <GEERU>
            //return received items fully
            if (countryRegion_RU
                && (_inventTransferParmLine.QtyReceiveNow < 0))
            {
                this.updateInventTransferReceiveRetPartly_RU(_inventTransferParmLine,
                                                             inventTransferLine,
                                                             movementTransitFrom,
                                                             movementTo,
                                                             inventDim);
            }
            else
            {
                // </GEERU>

                inventUpd_Financial = this.updateTransitFromUnIdentifiedTransactions(movementTransitFrom, _inventTransferParmLine, inventTransferLine);


                costAmountReceiptInitial = -inventUpd_Financial.updCostAmountInvent()
                                            // <GTE>
                                            + inventoryTaxAmount
                                            // </GTE>
                                            ;

                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    inventTransTable = InventTransferTable::find(inventTransferLine.TransferId, false);
                    inventTransferLineIN = inventTransferLine.inventTransferLine_IN();

                    if (inventTransTable.TransferType_IN == TransferType_IN::StockTransfer)
                    {
                        if (inventTransTable.StockTransferCostPriceHandlingImprovement_IN)
                        {
                            this.stockTransferPostTax(inventTransferLine, _inventTransferParmLine, ledgerVoucher, movementTo.defaultDimension());
                        }
                        else
                        {
                            this.addVoucherTrans_IN(inventTransferLine, _inventTransferParmLine, ledgerVoucher);
                            //<GTE>
                            if (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                            {
                                //</GTE>
                                inventTransLineTax.setVoucherId(voucherId);
                                inventTransLineTax.setLoadOnInventAcc(inventTransferLine);
                                inventTransLineTax.inventPost(ledgerVoucher, false, _inventTransferParmLine, voucherId);
                                //<GTE>
                            }
                            //</GTE>

                            if (inventTransferLineIN.UnitPrice == 0)
                            {
                                itemUnitPrice = CurrencyExchangeHelper::price(inventTransferLineIN.NetAmount / inventTransferLine.QtyTransfer, inventTransferLineIN.CurrencyCode);
                            }
                            else
                            {
                                itemUnitPrice = inventTransferLineIN.UnitPrice;
                            }

                            select sum(LoadOnInventoryAmount) from taxTransloc
                                where taxTransloc.SourceRecId    == inventTransferLine.RecId
                                    && taxTransloc.SourceTableId == inventTransferLine.TableId;

                            costAmountReceiptInitial = costAmountReceiptInitial + abs(taxTransloc.LoadOnInventoryAmount);

                            update_recordset taxTransCopy
                                setting
                                    TransactionAmount = _inventTransferParmLine.QtyReceiveNow * itemUnitPrice,
                                    Quantity          = _inventTransferParmLine.QtyReceiveNow
                                where taxTransCopy.SourceTableId == tableNum(InventTransferLine) &&
                                    taxTransCopy.SourceRecId     == inventTransferLine.RecId;
                        }
                    }
                }
                // </GIN>

                InventQty      qtyReceiveUndamaged   = _inventTransferParmLine.QtyReceiveNow - _inventTransferParmLine.QtyScrapNow;
                PdsCWInventQty cwQtyReceiveUndamaged = _inventTransferParmLine.PdsCWQtyReceiveNow - _inventTransferParmLine.PdsCWQtyScrapNow;
                costAmountReceiptScrap = CurrencyExchangeHelper::amount(costAmountReceiptInitial * scrapRatio);
                CostAmount costAmountReceiptUndamaged = costAmountReceiptInitial - costAmountReceiptScrap;
                // <GEERU>
                if (countryRegion_RU)
                {
                    costAmountReceiptScrapSecCur_RU     = CurrencyExchangeHelper::amount(-inventUpd_Financial.updCostAmountInventSecCur_RU() * scrapRatio, Ledger::reportingCurrency());
                    costAmountReceiptUndamagedSecCur_RU = -inventUpd_Financial.updCostAmountInventSecCur_RU() - costAmountReceiptScrapSecCur_RU;
                }
                // </GEERU>

                if (qtyReceiveUndamaged > 0)
                {
                    // <GIN>
                    if (inventTransferLine.checkForUnitID_IN())
                    {
                        qtyReceiveUndamaged = inventTransferLine.convertUnitForItem_IN(_inventTransferParmLine.ItemId, _inventTransferParmLine.InventDimId, qtyReceiveUndamaged);
                    }
                    // </GIN>

                    // Physical and financial receive receipt update for undamaged goods (can be autoreserved)
                    inventUpd_Financial = InventUpd_Financial::newInventTransferLineReceive(
                        movementTo,
                        ledgerVoucher,
                        costAmountReceiptUndamaged,
                        qtyReceiveUndamaged,
                        null,
                        null,
                        cwQtyReceiveUndamaged
                        // <GEERU>
                        , costAmountReceiptUndamagedSecCur_RU
                        // </GEERU>
                        );

                    inventUpd_Financial.updateNow();

                    inventTransferLine.QtyReceived += inventUpd_Financial.updFinancial();
                    inventTransferLine.PdsCWQtyReceived += inventUpd_Financial.pdsCWUpdFinancial();
                }
                // <GEERU>
            }
            // </GEERU>
        }

        // update scrap
        if (_inventTransferParmLine.QtyScrapNow > 0)
        {
            InventQty qtyReceiveScrap = _inventTransferParmLine.QtyScrapNow;
            PdsCWInventQty cwQtyReceiveScrap = _inventTransferParmLine.PdsCWQtyScrapNow;

            // <GIN>
            if (inventTransferLine.checkForUnitID_IN())
            {
                qtyReceiveScrap = inventTransferLine.convertUnitForItem_IN(_inventTransferParmLine.ItemId, _inventTransferParmLine.InventDimId, qtyReceiveScrap);
            }
            // </GIN>

            // Physical and financial receive receipt update for scrapped goods (cannot be autoreserved)
            inventUpd_Financial = InventUpd_Financial::newInventTransferLineReceive(
                movementTo,
                ledgerVoucher,
                costAmountReceiptScrap,
                qtyReceiveScrap,
                inventDim,
                inventDimParm,
                cwQtyReceiveScrap
                // <GEERU>
                , costAmountReceiptScrapSecCur_RU
                // </GEERU>
                );

            inventUpd_Financial.parmAllowAutoReserveDim(false);
            inventUpd_Financial.updateNow();

            inventTransferLine.QtyReceived += inventUpd_Financial.updFinancial();
            inventTransferLine.PdsCWQtyReceived += inventUpd_Financial.pdsCWUpdFinancial();

            this.updateScrap(_inventTransferParmLine, inventTransferLine, inventDim, inventDimParm);
        }

        // Update transfer line
        inventTransferLine.QtyReceiveNow        = 0;
        inventTransferLine.PdsCWQtyReceiveNow   = 0;

        InventTransferLineUpdateParameters parameters =  this.setupInventTransferLineUpdateParameters_PostProcessing(inventTransferLine);

        inventTransferLine.update(parameters);

        this.createInventTransferJourLine(_inventTransferParmLine, inventTransferLine, inventDim, inventDimParm);

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.adjustTaxInCostPrice_BR(_inventTransferParmLine, inventTransferLine);
        }
        // </GBR>

        isSomeThingPosted = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupInventTransferLineUpdateParameters_PostProcessing</Name>
				<Source><![CDATA[
    protected InventTransferLineUpdateParameters setupInventTransferLineUpdateParameters_PostProcessing(InventTransferLine _inventTransferLine)
    {
        InventTransferLineEstimation estimation = InventTransferLineEstimation::newFromLine(_inventTransferLine);
        
        estimation.parmDropEstimated(NoYes::Yes); //the receipt should have handled the correct update of transactions
        estimation.parmUpdateHeader(NoYes::No); //update of the header is done once after all lines have been posted
        estimation.parmSkipReservation(NoYes::Yes);//the receipt does not need reservation to update reservations since it is a receipt
        InventTransferLineUpdateParameters parameters = _inventTransferLine.createUpdateParameters(estimation);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScrap</Name>
				<Source><![CDATA[
    protected void updateScrap(
        InventTransferParmLine  _inventTransferParmLine,
        InventTransferLine      _inventTransferLine,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParm)
    {
        InventTrans                         inventTransSearch;
        InventTransOriginId                 inventTransOriginTransferScrapId;
        InventTrans                         inventTransMarked;
        InventTransOrigin                   inventTransOriginMarked;
        InventDim                           inventDim;

        PmfQtyDataCarrier                   outQuantities = new PmfQtyDataCarrier();

        if (! _inventTransferLine.InventTransIdScrap)
           _inventTransferLine.InventTransIdScrap = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

        InventQty qtyMarkNow = _inventTransferParmLine.QtyScrapNow;
        PdsCWInventQty cwQtyMarkNow = _inventTransferParmLine.PdsCWQtyScrapNow;

        InventTransOriginId inventTransOriginTransferReceiveId = InventTransOriginTransferReceive::findInventTransOriginId( _inventTransferLine.DataAreaId,
                                                                                                                            _inventTransferLine.TransferId,
                                                                                                                            _inventTransferLine.LineNum);

        if (inventTransferParmTable.ExplodeLines)
        {
            select forceplaceholders inventTransSearch
                order by StatusReceipt,StatusIssue
                where   inventTransSearch.InventTransOrigin             == inventTransOriginTransferReceiveId
                    &&  inventTransSearch.StatusIssue                   == StatusIssue::None
                    &&  inventTransSearch.StatusReceipt                 == StatusReceipt::Purchased
                    && !inventTransSearch.PackingSlipReturned
                    && !inventTransSearch.MarkingRefInventTransOrigin
                    &&  inventTransSearch.Voucher                       == voucherId
                    &&  inventTransSearch.DateFinancial                 == inventTransferParmTable.TransDate
            #inventDimExistsJoin(inventTransSearch.InventDimId,inventDim,_inventDimCriteria,_inventDimParm);
        }
        else
        {
            select forceplaceholders inventTransSearch
                order by StatusReceipt,StatusIssue
                where   inventTransSearch.InventTransOrigin             == inventTransOriginTransferReceiveId
                    &&  inventTransSearch.StatusIssue                   == StatusIssue::None
                    &&  inventTransSearch.StatusReceipt                 == StatusReceipt::Purchased
                    && !inventTransSearch.PackingSlipReturned
                    && !inventTransSearch.MarkingRefInventTransOrigin
                    &&  inventTransSearch.Voucher                       == voucherId
                    &&  inventTransSearch.DateFinancial                 == inventTransferParmTable.TransDate;
        }

        while (inventTransSearch.RecId)
        {
            InventTrans inventTrans = InventTrans::findRecId(inventTransSearch.RecId,true);

            if (inventTrans.RecId)
            {
                if (abs(qtyMarkNow) < abs(inventTrans.Qty))
                    inventTrans.updateSplit(
                        inventTrans.Qty > 0 ? abs(qtyMarkNow) : - abs(qtyMarkNow),
                        inventTrans.Qty > 0 ? abs(cwQtyMarkNow) : -abs(cwQtyMarkNow)
                        );

                InventMovement movement = InventMovement::newTransferScrapMovement(_inventTransferLine, inventTrans, inventTransferParmTable);

                InventUpd_Financial inventUpd_Financial = InventUpd_Financial::newInventTransferLineScrap(movement,ledgerVoucher);
                // <GIN>
                if (inventTransTable.TransferType_IN == TransferType_IN::StockTransfer
                    && !inventTransTable.StockTransferCostPriceHandlingImprovement_IN
                    && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    inventUpd_Financial.parmCheckStockTransferScrapQty_IN(true);
                }
                // </GIN>
                inventUpd_Financial.updateNow();

                if (!inventTransOriginTransferScrapId)
                {
                    InventTransOriginTransferScrapId = movement.inventTransOriginId();
                }
                //Create marking from scrap transaction to receipt transaction
                _inventTransferLine.QtyScrapped += InventTransOrigin::updateMarking(inventTransOriginTransferScrapId, inventTransOriginTransferReceiveId, inventUpd_Financial.updFinancial(),
                        '', SortOrder::Ascending, false, null, null,inventUpd_Financial.pdsCWUpdFinancial(), outQuantities);
                qtyMarkNow     -= inventTrans.Qty;

                PdsCWInventQty cwUpdMarkQty = outQuantities.parmCwQty();

                _inventTransferLine.PdsCWQtyScrapped += cwUpdMarkQty;
                cwQtyMarkNow -= inventTrans.PdsCWQty;
            }

            if (! qtyMarkNow)
                break;

            next inventTransSearch;
        }

        if (qtyMarkNow)
        {
            select firstonly inventTransMarked
                order by StatusIssue desc //find the one that is easiest to remove marking on first
                where   inventTransMarked.ItemId                        == _inventTransferLine.ItemId
                &&      inventTransMarked.MarkingRefInventTransOrigin   == inventTransOriginTransferReceiveId
                join ReferenceCategory, ReferenceId from inventTransOriginMarked
                    where   inventTransOriginMarked.RecId               == inventTransMarked.InventTransOrigin
                         && inventTransOriginMarked.ReferenceId         != _inventTransferLine.TransferId
                         && inventTransOriginMarked.ItemId              == _inventTransferLine.ItemId;

            if (inventTransMarked)
            {
                throw error(strFmt("@SYS99974",_inventTransferLine.ItemId, inventTransOriginMarked.ReferenceCategory, inventTransOriginMarked.ReferenceId));
            }
            throw error(strFmt("@SYS78723",qtyMarkNow));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventTransferUpdReceive construct()
    {
        InventTransferUpdReceive       inventTransferUpdReceive = new InventTransferUpdReceive();

        return inventTransferUpdReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an instance of <c>InventTransferUpdReceive</c> with the <c>_inventTransferParmTable</c>
    ///    assigned.
    /// </summary>
    /// <param name="_inventTransferParmTable">
    ///    The <c>InventTransferParmTable</c> that the object should hold a reference to.
    /// </param>
    /// <returns>
    ///    An instance of <c>InventTransferUpdReceive</c> with the <c>inventTransferParmTable</c> assigned.
    /// </returns>
    static InventTransferUpdReceive newParmBuffer(InventTransferParmTable _inventTransferParmTable)
    {
        _inventTransferParmTable.skipTTSCheck(true);
        _inventTransferParmTable.ParmBuffer::initParmId();
        _inventTransferParmTable.write();

        InventTransferUpdReceive inventTransferUpdReceive = InventTransferUpdReceive::construct();
        inventTransferUpdReceive.parmParmBuffer(_inventTransferParmTable);

        return inventTransferUpdReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Udpate inventory tax for transfer order receive.
    /// </summary>
    /// <param name = "_inventMovement">The <c>InventMovement</c> object.</param>
    /// <param name = "_inventTransferParmLine">The <c>InventTransferParmLine</c> record.</param>
    protected void updateInventoryTax(InventMovement _inventMovement, InventTransferParmLine _inventTransferParmLine)
    {
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            ITaxDocument taxDocument = TaxBusinessService::calculateTax(TaxableDocumentObject::construct(
            TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(_inventTransferParmLine.inventTransferParmTable())));
            if (taxDocument)
            {
                _inventMovement.setTaxEngineInventMovement(TaxEngineInventMovement::construct(_inventTransferParmLine, taxDocument));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>