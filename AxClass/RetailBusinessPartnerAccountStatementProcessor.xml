<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailBusinessPartnerAccountStatementProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Runtime.Entities.DataModel;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.IO;
using System.Text;

/// <summary>
/// The <c>RetailBusinessPartnerAccountStatementProcessor</c> class is used to proccess the request acount statement operation.
/// </summary>
internal class RetailBusinessPartnerAccountStatementProcessor extends RetailBusinessPartnerOperationProcessorBase
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processInternal</Name>
				<Source><![CDATA[
    protected void processInternal(RetailBusinessPartnerOperation _operation)
    {
        AccountStatementRequest request = this.deserializeAccountStatementRequestFromJson(_operation.Value);
        DataAreaId dataAreaId = RetailChannelTable::findByRecId(_operation.Channel).inventLocationDataAreaId;

        if (!AcctStatementLookupOrgCustomerFlight::instance().isEnabled() && request.IsForFullOrganization)
        {
            var orgController = this.initB2BOrganizationStatementController(request);
            orgController.startOperation();
        }
        else
        {
            CustAccountStatementExtController statementController = this.initController(request, dataAreaId);
            statementController.startOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initB2BOrganizationStatementController</Name>
				<Source><![CDATA[
    internal RetailB2BOrganizationStatementController initB2BOrganizationStatementController(AccountStatementRequest _request)
    {
        var orgController = new RetailB2BOrganizationStatementController();
        orgController.parmReportName(ssrsReportStr(RetailB2BOrganizationStatement, Report));
        
        RetailCustTable retailCustTable;
        CustTable custTable;
        CustHierarchyNode custHierarchyNode;

        select firstonly accountNum from retailCustTable where retailCustTable.B2BUserId == str2Guid(_request.RequestedUserId)
            join RecId from custTable where retailCustTable.accountNum == custTable.AccountNum
            join CustHierarchyId from custHierarchyNode where custHierarchyNode.RecId == retailCustTable.B2BCustomerHierarchyNode;

        str sendToEmail = _request.RequestingUserEmail;

        date fromDate = RetailBusinessPartnerAccountStatementProcessor::getDateFromDateTimeOffset(_request.FromDate);
        
        date toDate = RetailBusinessPartnerAccountStatementProcessor::getDateFromDateTimeOffset(_request.ToDate);

        Args args = new Args();
        orgController.parmArgs(args);

        str body = "@RetailBusinessPartner:RequestOrganizationStatementEmailBody";
        str subject = strFmt("@RetailBusinessPartner:OrganizationStatementAttachmentName", custHierarchyNode.CustHierarchyId);
        SRSPrintDestinationSettings printSettings = RetailBusinessPartnerAccountStatementExtensions::initPrintDestinationSettings(body, subject, sendToEmail);
        orgController.parmReportContract().parmPrintSettings(printSettings);

        var contract = new RetailB2BOrganizationStatementContract();
        contract.parmFromDate(fromDate);
        contract.parmToDate(toDate);
        contract.parmCustomerRecId(custTable.RecId);

        orgController.parmReportContract().parmRdpContract(contract);
        orgController.parmShowDialog(false);
        orgController.parmLoadFromSysLastValue(false); // This prevents the contract from using or saving a configuration and thus messing with the reports generated from the ui.

        return orgController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateFromDateTimeOffset</Name>
				<Source><![CDATA[
    private static date getDateFromDateTimeOffset(System.DateTimeOffset _dateTimeOffset)
    {
        System.DateTimeOffset dateTimeOffset = _dateTimeOffset;

        return dateTimeOffset.Date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initController</Name>
				<Source><![CDATA[
    internal CustAccountStatementExtController initController(AccountStatementRequest _request, DataAreaId _dataAreaId)
    {
        CustAccountStatementExtController statementController = new CustAccountStatementExtController();
        statementController.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::CustAccountStatement).getDefaultReportFormat());

        AccountNum account = this.getAccountStatementAcct(_request, _dataAreaId);

        str sendToEmail = _request.RequestingUserEmail;

        date fromDate = RetailBusinessPartnerAccountStatementProcessor::getDateFromDateTimeOffset(_request.FromDate);
        
        date toDate = RetailBusinessPartnerAccountStatementProcessor::getDateFromDateTimeOffset(_request.ToDate);

        CustTable custTable = this.getCustAccountById(account);
        Args args = new Args();
        args.record(custTable);
        statementController.parmArgs(args);

        str body = "@RetailBusinessPartner:RequestAccountStatementEmailBody";
        str subject = strFmt("@RetailBusinessPartner:AccountStatementAttachmentName", account);
        SRSPrintDestinationSettings printSettings = RetailBusinessPartnerAccountStatementExtensions::initPrintDestinationSettings(body, subject, sendToEmail);
        statementController.parmReportContract().parmPrintSettings(printSettings);

        CustAccountStatementExtContract statementContract = new CustAccountStatementExtContract();
        statementContract.parmUsePrintManagement(true);
        statementContract.parmFromDate(fromDate);
        statementContract.parmToDate(toDate);
        statementContract.parmCustAccount(account);

        statementController.parmReportContract().parmRdpContract(statementContract);
        statementController.parmShowDialog(false);
        statementController.parmLoadFromSysLastValue(false); // This prevents the contract from using or saving a configuration and thus messing with the reports generated from the ui.

        return statementController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountStatementAcct</Name>
				<Source><![CDATA[
    internal str getAccountStatementAcct(AccountStatementRequest _request, DataAreaId _dataAreaId)
    {
        RetailCustTable retailCustTable;
        CustTable orgCustomer;
        CustHierarchy hierarchy;
        CustHierarchyNode node;
        AccountNum account;
        
        changecompany(_dataAreaId)
        {
            if (AcctStatementLookupOrgCustomerFlight::instance().isEnabled() && _request.IsForFullOrganization)
            {
                select firstonly orgCustomer
                exists join hierarchy where orgCustomer.Party == hierarchy.OrganizationParty
                exists join node where hierarchy.CustHierarchyId == node.CustHierarchyId
                exists join retailCustTable where node.RecId == retailCustTable.B2BCustomerHierarchyNode
                && retailCustTable.B2BUserId == str2Guid(_request.RequestedUserId);

                if (AcctStatementSkipInvoiceAcctFlight::instance().isEnabled())
                {
                    account = orgCustomer.AccountNum;
                }
                else
                {
                    account = orgCustomer.InvoiceAccount ? orgCustomer.InvoiceAccount: orgCustomer.AccountNum;
                }
            }
            else
            {
                retailCustTable = RetailCustTable::findByB2BUserId(str2Guid(_request.RequestedUserId));
                account = retailCustTable.accountNum;
            }
        }

        return account;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeserializeAccountStatementRequestFromJSON</Name>
				<Source><![CDATA[
    private AccountStatementRequest DeserializeAccountStatementRequestFromJSON(System.String jsonObject)
    {
        AccountStatementRequest deserializedRequest = new AccountStatementRequest();
        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(deserializedRequest.GetType(), 0);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(deserializedRequest.GetType(), typeArray);
            deserializedRequest = serializer.ReadObject(ms) as AccountStatementRequest;
        }

        return deserializedRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustAccountById</Name>
				<Source><![CDATA[
    private CustTable getCustAccountById(str _custAccountNumber)
    {
        CustTable custTable = CustTable::find(_custAccountNumber, false);

        if (custTable.RecId != 0)
        {
            return custTable;
        }
        else
        {
            throw error("@RetailBusinessPartner:AccountNotFoundError");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>