<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBTaxAssessmentDetailCreatorIcmsSt_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the ICMS tax assessment details
/// </summary>
class FBTaxAssessmentDetailCreatorIcmsSt_BR extends FBTaxAssessmentDetailCreator_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAllAssessmentDetails</Name>
				<Source><![CDATA[
/// <summary>
    /// Creates the ICMS-ST assessment detail for all fiscal documents.
    /// </summary>
    public void createAllAssessmentDetails()
    {
        FiscalDocument_BR                   fiscalDocument;
        FiscalDocumentLine_BR               fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR           fiscalDocumentTaxTrans;
        FiscalDocumentTaxTransPovertyFund_BR    fiscalDocumentTaxTransPovertyFund;
        LogisticsPostalAddress              logisticsPostalAddress;
        FBBookingPeriodFiscalDocument_BR    bookingPeriodFiscalDocument;
        FBTaxTrans_BR                       existingFbTaxTrans;
        FBTaxTrans_BR                       fbTaxTrans;
        FBTaxTransPovertyFund_BR                fbTaxTransPovertyFund;
        utcdatetime validFrom = DateTimeUtil::minValue();
        utcdatetime validTo   = DateTimeUtil::maxValue();

        // It there is no tax assessment for the period, there is no reason to calculate details for the fiscal documents in that period, so exit.
        if (!fbTaxAssessment)
        {
            return;
        }

        ttsbegin;

        this.bookPostedTaxAdjustments();

        while select validTimeState(validFrom, validTo) fiscalDocumentLine
            join RecId, FiscalDocumentLine, FiscalValue, Type, TaxAmount, TaxBaseAmount, TaxBaseAmountExempt, TaxBaseAmountOther, RetainedTax, TaxationOrigin, TaxationCode
                from fiscalDocumentTaxTrans
                where fiscalDocumentTaxTrans.FiscalDocumentLine        == fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTrans.Type                     == TaxType_BR::ICMSST
            join RecId, Voucher, AccountingDate, FiscalEstablishment, DataAreaId
                from fiscalDocument
                where fiscalDocument.AccountingDate  >= fbTaxAssessment.FromDate
                    && fiscalDocument.AccountingDate <= fbTaxAssessment.ToDate
                    && fiscalDocument.RecId          == fiscalDocumentLine.FiscalDocument
            outer join TaxPovertyFundAmount
                from fiscalDocumentTaxTransPovertyFund
                where fiscalDocumentTaxTransPovertyFund.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTrans.RecId
            exists join bookingPeriodFiscalDocument
                where bookingPeriodFiscalDocument.fbBookingPeriod_BR    == fbTaxAssessment.fbBookingPeriod_BR
                    && bookingPeriodFiscalDocument.FiscalDocument_BR    == fiscalDocumentLine.FiscalDocument
                    && (bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Regular
                        || bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Complementary
                        || bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::SpecialLegislation)
            exists join logisticsPostalAddress
                where logisticsPostalAddress.RecId  == fiscalDocument.ThirdPartyPostalAddress
                    && logisticsPostalAddress.State == fbTaxAssessment.State
            notexists join existingFbTaxTrans
                where existingFbTaxTrans.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTrans.RecId
        {
            fbTaxTrans.TaxType                   = TaxType_BR::ICMSST;
            fbTaxTrans.Classification            = FBTaxAssessmentDetailCreatorIcmsSt_BR::getTaxAssessmentClassificationIcmsSt(fiscalDocumentLine);
            fbTaxTrans.FBTaxAssessment_BR        = fbTaxAssessment.RecId;
            fbTaxTrans.FiscalDocument_BR         = fiscalDocument.RecId;
            fbTaxTrans.FiscalEstablishmentId     = fiscalDocument.FiscalEstablishment;
            fbTaxTrans.FiscalEstablishmentDataArea = fiscalDocument.dataAreaId;
            fbTaxTrans.CFOP                      = fiscalDocumentLine.cfop;

            fbTaxTrans.FiscalDocumentTaxTrans_BR = fiscalDocumentTaxTrans.RecId;
            fbTaxTrans.TaxationCode              = strFmt('%1%2', enum2int(fiscalDocumentTaxTrans.TaxationOrigin), fiscalDocumentTaxTrans.TaxationCode);
            fbTaxTrans.TaxAmount                 = fiscalDocumentTaxTrans.TaxAmount;
            fbTaxTrans.TaxBaseAmount             = fiscalDocumentTaxTrans.TaxBaseAmount;
            fbTaxTrans.TaxBaseAmountExempt       = fiscalDocumentTaxTrans.TaxBaseAmountExempt;
            fbTaxTrans.TaxBaseAmountOther        = fiscalDocumentTaxTrans.TaxBaseAmountOther;
            fbTaxTrans.WithholdingTax            = fiscalDocumentTaxTrans.RetainedTax;

            fbTaxTrans.Voucher                   = fiscalDocument.Voucher;
            fbTaxTrans.VoucherDataArea           = fiscalDocument.dataAreaId;
            fbTaxTrans.VoucherTransDate          = fiscalDocument.AccountingDate;

            fbTaxTrans.insert();

            if (fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount
                && fiscalDocumentTaxTrans.FiscalValue == TaxFiscalValue_BR::WithCreditDebit)
            {
                fbTaxTransPovertyFund.FBTaxTrans_BR = fbTaxTrans.RecId;
                fbTaxTransPovertyFund.TaxAmount = fiscalDocumentTaxTransPovertyFund.TaxPovertyFundAmount;
                fbTaxTransPovertyFund.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAssessmentClassificationIcmsSt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the ICMS-ST assessment classification for a fiscal document line
    /// </summary>
    /// <param name="_fiscalDocumentLine">
    ///     A <c>FiscalDocumentLine_BR</c> table buffer
    /// </param>
    /// <returns>
    ///     An enum with the corresponding classification
    /// </returns>
    public static FBTaxAssessmentClassification_BR getTaxAssessmentClassificationIcmsSt(FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        #CFOP

        SalesPurchCFOPId_BR cfop;

        cfop = strKeep(_fiscalDocumentLine.CFOP, '0123456789');

	    if (_fiscalDocumentLine.fiscalDocument_BR().Model == FiscalBooksConstants_BR::FiscalDocModel_63)
        {
            return FBTaxAssessmentClassification_BR::Informative;
        }

        if (cfop     == #CFOP_1410
            || cfop == #CFOP_1411
            || cfop == #CFOP_1414
            || cfop == #CFOP_1415
            || cfop == #CFOP_1660
            || cfop == #CFOP_1661
            || cfop == #CFOP_1662
            || cfop == #CFOP_2410
            || cfop == #CFOP_2411
            || cfop == #CFOP_2414
            || cfop == #CFOP_2415
            || cfop == #CFOP_2660
            || cfop == #CFOP_2661
            || cfop == #CFOP_2662)
        {
            return FBTaxAssessmentClassification_BR::ReturnDocument;
        }

        if (cfop == #CFOP_1603 || cfop == #CFOP_2603)
        {
            return FBTaxAssessmentClassification_BR::CompensationDocument;
        }

        if ((_fiscalDocumentLine.fiscalDocument_BR().Direction == FiscalDocDirection_BR::Incoming)
            && (subStr(cfop, 1, 1) == '1' || subStr(cfop, 1, 1) == '2')
            && (cfop != #CFOP_1410
                && cfop  != #CFOP_1411
                && cfop  != #CFOP_1414
                && cfop  != #CFOP_1415
                && cfop  != #CFOP_1660
                && cfop  != #CFOP_1661
                && cfop  != #CFOP_1662
                && cfop  != #CFOP_2410
                && cfop  != #CFOP_2411
                && cfop  != #CFOP_2414
                && cfop  != #CFOP_2415
                && cfop  != #CFOP_2660
                && cfop  != #CFOP_2661
                && cfop  != #CFOP_2662
                && cfop  != #CFOP_1603
                && cfop != #CFOP_2603))
        {
            return FBTaxAssessmentClassification_BR::DocumentOtherCredit;
        }

        if (_fiscalDocumentLine.fiscalDocument_BR().Direction == FiscalDocDirection_BR::Outgoing)
        {
            return FBTaxAssessmentClassification_BR::RetentionDocument;
        }

        return FBTaxAssessmentClassification_BR::Informative;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>