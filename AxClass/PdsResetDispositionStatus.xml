<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsResetDispositionStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>PdsResetDispositionStatus</c> class provides a method to reset/change the
/// batch disposition status.
/// </summary>
/// <remarks>
/// This method provides both a user dialog and the logic to update/ reset the
/// batch disposition status.
/// </remarks>
class PdsResetDispositionStatus extends RunBaseBatch implements BatchRetryable
{
    PdsDispositionCode      pdsNewDispositionCode;
    ItemId                  pdsItemId;
    InventBatchId           pdsInventBatchId;
    str                     pdsInventBatchRecId;

    DialogField             dlgNewCode;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        pdsItemId,
        pdsNewDispositionCode,
        pdsInventBatchId,
        pdsInventBatchRecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBatchNumberRange</Name>
				<Source><![CDATA[
    private void addBatchNumberRange(InventBatchId _inventBatchId)
    {
        if (pdsInventBatchId)
        {
            pdsInventBatchId += ', ';
        }
        pdsInventBatchId += _inventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventBatchToRanges</Name>
				<Source><![CDATA[
    private void addInventBatchToRanges(Set _itemSet, Set _batchSet, ItemId _itemId, InventBatchId _inventBatchId)
    {
        this.addBatchRecIdRange(InventBatch::find(_inventBatchId, _itemId).RecId);

        if (_itemId && !_itemSet.in(_itemId))
        {
            this.addItemIdRange(_itemId);
            _itemSet.add(_itemId);
        }
        if (_inventBatchId && !_batchSet.in(_inventBatchId))
        {
            this.addBatchNumberRange(_inventBatchId);
            _batchSet.add(_inventBatchId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addItemIdRange</Name>
				<Source><![CDATA[
    private void addItemIdRange(ItemId _itemId)
    {
        if (pdsItemId)
        {
            pdsItemId += ', ';
        }
        pdsItemId += _itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// May be run as batch job
    /// </summary>
    /// <returns>
    /// True
    /// </returns>
    /// <remarks>
    /// The class is allowed to be run as batch job.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// User dialog for collection of disposition code information
    /// </summary>
    /// <returns>
    /// Initialized dialog
    /// </returns>
    /// <remarks>
    /// The user is provided a dialog to provide a new disposition code.
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.addGroup("@PRO189");

        DialogField dlgItemId = dialog.addField(extendedtypestr(Range), "@SYS12836");
        dlgItemId.allowEdit(false);
        dlgItemId.value(this.parmGetItemNumberRange());

        DialogField dlgBatchNumber = dialog.addField(extendedtypestr(Range), "@SYS53635");
        dlgBatchNumber.allowEdit(false);
        dlgBatchNumber.value(this.parmGetBatchNumberRange());

        dlgNewCode = dialog.addFieldValue(extendedtypestr(PdsDispositionCode), pdsNewDispositionCode, "@PRO188");
        
        if (isConfigurationkeyEnabled(configurationkeynum(Req)))
        {
            const int StaticTextWidth = 200;
            dialog.addGroup("@SYS58386");
            dialog.addText("@SCM:PdsResetDispositionStatus_NetRequirementsNotUpdated", StaticTextWidth);
        }
        
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstOrArgs</Name>
				<Source><![CDATA[
    private Common getFirstOrArgs(FormDataSource _datasource, Args _argsGetRecord)
    {
        Common dataSourceFirst;

        if (_datasource)
        {
            dataSourceFirst = _datasource.getfirst(true);
        }

        if (dataSourceFirst)
        {
            return dataSourceFirst;
        }
        else
        {
            return _argsGetRecord.record();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get information entered by user
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    /// <remarks>
    /// Method retrieves the information entered by user and set the class
    /// variable pdsNewDispositionCode.
    /// </remarks>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        pdsNewDispositionCode = dlgNewCode.value();

        if (!pdsNewDispositionCode)
        {
            ret = checkFailed("@PRO989");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves values from last run of class by user
    /// </summary>
    /// <remarks>
    /// Previous values are retrieved
    /// </remarks>
    public void getLast()
    {
        // Values will be filled based on the arguments passed
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextFromDatasource</Name>
				<Source><![CDATA[
    private Common getNextFromDatasource(FormDataSource _datasource)
    {
        Common nextRecord;

        if (_datasource)
        {
            nextRecord = _datasource.getNext();
        }

        return nextRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    public boolean initFromArgs(Args _args)
    {
        if (!_args.dataset())
        {
            return false;
        }

        boolean ret = false;

        switch (_args.dataset())
        {
            case tablenum(InventBatch) :
                ret = this.initFromInventBatch(_args);
                break;

            case tablenum(SalesLine) :
                ret = this.initFromSalesLine(_args);
                break;

            case tablenum(PurchLine) :
                ret = this.initFromPurchLine(_args);
                break;

            case tablenum(InventJournalTrans) :
                ret = this.initFromInventJournalTrans(_args);
                break;

            case tablenum(ProdParmReportFinished) :
                ret = this.initFromProdParmReportFinished(_args);
                break;

            case tablenum(InventSum) :
                ret = this.initFromInventSum(_args);
                break;

            case tablenum(InventTrans) :
                ret = this.initFromInventTrans(_args);
                break;

            case tablenum(ProdJournalBOM) :
                ret = this.initFromProdJournalBOM(_args);
                break;

            case tablenum(CustInvoiceTrans) :
                ret = this.initFromCustInvoiceTrans(_args);
                break;

            case tablenum(VendInvoiceTrans) :
                ret = this.initFromVendInvoiceTrans(_args);
                break;

            case tablenum(SalesParmLine)    :
                ret = this.initFromSalesParmLine(_args);
                break;

            case tablenum(PurchParmLine)        :
                ret = this.initFromPurchParmLine(_args);
                break;

            case tablenum(InventJournalTrans_Tag) :
                ret = this.initFromInventJournalTransTag(_args);
                break;

            case tablenum(WMSJournalTrans) :
                ret = this.initFromWMSJournalTrans(_args);
                break;

            case tablenum(ConsignmentDraftReplenishmentOrderJournalLine) :
                ret = this.initFromConsignmentDraftReplenishmentOrderJournalLine(_args);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    private boolean initFromCustInvoiceTrans(Args _args)
    {
        CustInvoiceTrans    custInvoiceTrans;
        Object              callerDatasource;
        Set                 itemSet = new Set(Types::String);
        Set                 batchSet = new Set(Types::String);

        callerDataSource =  FormDataUtil::getFormDataSource(_args.record());
        for (custInvoiceTrans = this.getFirstOrArgs(callerDataSource, _args);
        custInvoiceTrans;
        custInvoiceTrans = this.getNextFromDatasource(callerDataSource))
        {
            this.addInventBatchToRanges(itemSet, batchSet,
                    custInvoiceTrans.ItemId,
                    InventDim::find(custInvoiceTrans.InventDimId).InventBatchId);
        }

        return batchSet.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventBatch</Name>
				<Source><![CDATA[
    private boolean initFromInventBatch(Args _args)
    {
        InventBatch inventBatch;
        Object      callerDatasource;
        Set         itemSet = new Set(Types::String);
        Set         batchSet = new Set(Types::String);

        callerDataSource =  FormDataUtil::getFormDataSource(_args.record());
        for (inventBatch = this.getFirstOrArgs(callerDataSource, _args);
        inventBatch;
        inventBatch = this.getNextFromDatasource(callerDataSource))
        {
            this.addInventBatchToRanges(itemSet, batchSet, inventBatch.itemId, inventBatch.inventBatchId);
        }

        return batchSet.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventJournalTrans</Name>
				<Source><![CDATA[
    private boolean initFromInventJournalTrans(Args _args)
    {
        InventJournalTrans  inventJournalTrans;
        InventBatchId       inventBatchId;
        Object              callerDatasource;
        Set                 itemSet = new Set(Types::String);
        Set                 batchSet = new Set(Types::String);

        callerDataSource =  FormDataUtil::getFormDataSource(_args.record());
        for (inventJournalTrans = this.getFirstOrArgs(callerDataSource, _args);
        inventJournalTrans;
        inventJournalTrans = this.getNextFromDatasource(callerDataSource))
        {
            if (inventJournalTrans.ToInventDimId)
            {
                inventBatchId = InventDim::find(inventJournalTrans.ToInventDimId).InventBatchId;
            }
            else
            {
                inventBatchId = InventDim::find(inventJournalTrans.InventDimId).InventBatchId;
            }
            this.addInventBatchToRanges(itemSet, batchSet,
                    inventJournalTrans.ItemId,
                    inventBatchId);
        }

        return batchSet.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventJournalTransTag</Name>
				<Source><![CDATA[
    private boolean initFromInventJournalTransTag(Args _args)
    {
        InventJournalTrans_Tag  inventJournalTrans;
        Object                  callerDatasource;
        Set                     itemSet = new Set(Types::String);
        Set                     batchSet = new Set(Types::String);

        callerDataSource =  FormDataUtil::getFormDataSource(_args.record());
        for (inventJournalTrans = this.getFirstOrArgs(callerDataSource, _args);
        inventJournalTrans;
        inventJournalTrans = this.getNextFromDatasource(callerDataSource))
        {
            this.addInventBatchToRanges(itemSet, batchSet,
                    inventJournalTrans.ItemId,
                    InventDim::find(inventJournalTrans.InventDimId).InventBatchId);
        }

        return batchSet.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventSum</Name>
				<Source><![CDATA[
    private boolean initFromInventSum(Args _args)
    {
        Set             itemSet = new Set(Types::String);
        Set             batchSet = new Set(Types::String);

        FormObjectSet inventSumDataSource =  FormDataUtil::getFormDataSource(_args.record());
        MultiSelectionHelper inventSumMultiSelect = MultiSelectionHelper::createFromCaller(_args.caller());

        MultiSelectionHelper inventDimMultiSelect;

        InventSum inventSum = inventSumMultiSelect.getFirst();
        while (inventSum)
        {
            InventBatchId inventBatchId;

            if (inventSum.InventDimId)
            {
                inventBatchId = InventDim::find(inventSum.InventDimId).InventBatchId;
            }
            else
            {
                InventDim inventDim;

                if (!inventDimMultiSelect)
                {
                    inventDimMultiSelect = this.createInventDimMultiSelect(Global::getJoinChildFormDataSource(inventSumDataSource, tableNum(InventDim)));
                    if (!inventDimMultiSelect)
                    {
                        break; // Give up, can't find the batch ID.
                    }

                    inventDim = inventDimMultiSelect.getFirst();
                }
                else
                {
                    inventDim = inventDimMultiSelect.getNext();
                }

                inventBatchId = inventDim.inventBatchId;
            }

            this.addInventBatchToRanges(itemSet, batchSet,
                    inventSum.ItemId,
                    inventBatchId);

            inventSum = inventSumMultiSelect.getNext();
        }

        return batchSet.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventDimMultiSelect</Name>
				<Source><![CDATA[
    private MultiSelectionHelper createInventDimMultiSelect(FormDataSource _inventDimDataSource)
    {
        MultiSelectionHelper inventDimMultiSelect;
        if (_inventDimDataSource)
        {
            inventDimMultiSelect = MultiSelectionHelper::construct();
            inventDimMultiSelect.parmDatasource(_inventDimDataSource);
        }

        return inventDimMultiSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTrans</Name>
				<Source><![CDATA[
    private boolean initFromInventTrans(Args _args)
    {
        InventTrans inventTrans;
        Object      callerDatasource;
        Set         itemSet = new Set(Types::String);
        Set         batchSet = new Set(Types::String);

        callerDataSource =  FormDataUtil::getFormDataSource(_args.record());
        for (inventTrans = this.getFirstOrArgs(callerDataSource, _args);
        inventTrans;
        inventTrans = this.getNextFromDatasource(callerDataSource))
        {
            this.addInventBatchToRanges(itemSet, batchSet,
                    inventTrans.ItemId,
                    InventDim::find(inventTrans.InventDimId).InventBatchId);
        }

        return batchSet.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdJournalBOM</Name>
				<Source><![CDATA[
    private boolean initFromProdJournalBOM(Args _args)
    {
        ProdJournalBOM  prodJournalBOM;
        Object          callerDatasource;
        Set             itemSet = new Set(Types::String);
        Set             batchSet = new Set(Types::String);

        callerDataSource =  FormDataUtil::getFormDataSource(_args.record());
        for (prodJournalBOM = this.getFirstOrArgs(callerDataSource, _args);
        prodJournalBOM;
        prodJournalBOM = this.getNextFromDatasource(callerDataSource))
        {
            this.addInventBatchToRanges(itemSet, batchSet,
                    prodJournalBOM.ItemId,
                    InventDim::find(prodJournalBOM.InventDimId).InventBatchId);
        }

        return batchSet.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdParmReportFinished</Name>
				<Source><![CDATA[
    private boolean initFromProdParmReportFinished(Args _args)
    {
        ProdParmReportFinished  prodParmReportFinished;
        Object                  callerDatasource;
        Set                     itemSet = new Set(Types::String);
        Set                     batchSet = new Set(Types::String);

        callerDataSource =  FormDataUtil::getFormDataSource(_args.record());
        for (prodParmReportFinished = this.getFirstOrArgs(callerDataSource, _args);
        prodParmReportFinished;
        prodParmReportFinished = this.getNextFromDatasource(callerDataSource))
        {
            this.addInventBatchToRanges(itemSet, batchSet,
                    prodParmReportFinished.ItemId,
                    InventDim::find(prodParmReportFinished.InventDimId).InventBatchId);
        }

        return batchSet.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    private boolean initFromPurchLine(Args _args)
    {
        PurchLine   purchLine;
        Object      callerDatasource;
        Set         itemSet = new Set(Types::String);
        Set         batchSet = new Set(Types::String);

        callerDataSource =  FormDataUtil::getFormDataSource(_args.record());
        for (purchLine = this.getFirstOrArgs(callerDataSource, _args);
        purchLine;
        purchLine = this.getNextFromDatasource(callerDataSource))
        {
            this.addInventBatchToRanges(itemSet, batchSet,
                    purchLine.ItemId,
                    InventDim::find(purchLine.InventDimId).InventBatchId);
        }

        return batchSet.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchParmLine</Name>
				<Source><![CDATA[
    private boolean initFromPurchParmLine(Args _args)
    {
        PurchParmLine   purchParmLine;
        Object          callerDatasource;
        Set             itemSet = new Set(Types::String);
        Set             batchSet = new Set(Types::String);

        callerDataSource =  FormDataUtil::getFormDataSource(_args.record());
        for (purchParmLine = this.getFirstOrArgs(callerDataSource, _args);
        purchParmLine;
        purchParmLine = this.getNextFromDatasource(callerDataSource))
        {
            this.addInventBatchToRanges(itemSet, batchSet,
                    purchParmLine.ItemId,
                    InventDim::find(purchParmLine.InventDimId).InventBatchId);
        }

        return batchSet.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    private boolean initFromSalesLine(Args _args)
    {
        SalesLine   salesLine;
        Object      callerDatasource;
        Set         itemSet = new Set(Types::String);
        Set         batchSet = new Set(Types::String);

        callerDataSource =  FormDataUtil::getFormDataSource(_args.record());
        for (salesLine = this.getFirstOrArgs(callerDataSource, _args);
        salesLine;
        salesLine = this.getNextFromDatasource(callerDataSource))
        {
            this.addInventBatchToRanges(itemSet, batchSet,
                    SalesLine.ItemId,
                    InventDim::find(salesLine.InventDimId).InventBatchId);
        }

        return batchSet.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesParmLine</Name>
				<Source><![CDATA[
    private boolean initFromSalesParmLine(Args _args)
    {
        SalesParmLine   salesParmLine;
        Object          callerDatasource;
        Set             itemSet = new Set(Types::String);
        Set             batchSet = new Set(Types::String);

        callerDataSource =  FormDataUtil::getFormDataSource(_args.record());
        for (salesParmLine = this.getFirstOrArgs(callerDataSource, _args);
        salesParmLine;
        salesParmLine = this.getNextFromDatasource(callerDataSource))
        {
            this.addInventBatchToRanges(itemSet, batchSet,
                    salesParmLine.ItemId,
                    InventDim::find(salesParmLine.InventDimId).InventBatchId);
        }

        return batchSet.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    private boolean initFromVendInvoiceTrans(Args _args)
    {
        VendInvoiceTrans    vendInvoiceTrans;
        Object              callerDatasource;
        Set                 itemSet = new Set(Types::String);
        Set                 batchSet = new Set(Types::String);

        callerDataSource =  FormDataUtil::getFormDataSource(_args.record());
        for (vendInvoiceTrans = this.getFirstOrArgs(callerDataSource, _args);
        vendInvoiceTrans;
        vendInvoiceTrans = this.getNextFromDatasource(callerDataSource))
        {
            this.addInventBatchToRanges(itemSet, batchSet,
                    vendInvoiceTrans.ItemId,
                    InventDim::find(vendInvoiceTrans.InventDimId).InventBatchId);
        }

        return batchSet.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWMSJournalTrans</Name>
				<Source><![CDATA[
    private boolean initFromWMSJournalTrans(Args _args)
    {
        WMSJournalTrans wmsJournalTrans;
        Object          callerDatasource;
        Set             itemSet = new Set(Types::String);
        Set             batchSet = new Set(Types::String);

        callerDataSource =  FormDataUtil::getFormDataSource(_args.record());
        for (wmsJournalTrans = this.getFirstOrArgs(callerDataSource, _args);
        wmsJournalTrans;
        wmsJournalTrans = this.getNextFromDatasource(callerDataSource))
        {
            this.addInventBatchToRanges(itemSet, batchSet,
                    wmsJournalTrans.ItemId,
                    InventDim::find(wmsJournalTrans.InventDimId).InventBatchId);
        }

        return batchSet.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromConsignmentDraftReplenishmentOrderJournalLine</Name>
				<Source><![CDATA[
    private boolean initFromConsignmentDraftReplenishmentOrderJournalLine(Args _args)
    {
        ConsignmentDraftReplenishmentOrderJournalLine   consignmentDraftReplenishmentOrderJournalLine;
        Set                                             itemSet = new Set(Types::String);
        Set                                             batchSet = new Set(Types::String);

        Object callerDataSource =  FormDataUtil::getFormDataSource(_args.record());
        for (consignmentDraftReplenishmentOrderJournalLine = this.getFirstOrArgs(callerDataSource, _args);
        consignmentDraftReplenishmentOrderJournalLine;
        consignmentDraftReplenishmentOrderJournalLine = this.getNextFromDatasource(callerDataSource))
        {
            this.addInventBatchToRanges(itemSet, batchSet,
                    consignmentDraftReplenishmentOrderJournalLine.ItemId,
                    InventDim::find(consignmentDraftReplenishmentOrderJournalLine.InventDimId).InventBatchId);
        }

        return batchSet.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGetBatchNumberRange</Name>
				<Source><![CDATA[
    public str parmGetBatchNumberRange(str _range = pdsInventBatchId)
    {
        if (!prmisdefault(_range))
        {
            pdsInventBatchId = _range;
        }

        return pdsInventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGetItemNumberRange</Name>
				<Source><![CDATA[
    public str parmGetItemNumberRange(str _range = pdsItemId)
    {
        if (!prmisdefault(_range))
        {
            pdsItemId = _range;
        }

        return pdsItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsNewDispositionCode</Name>
				<Source><![CDATA[
    public PdsBatchDispositionCode parmPdsNewDispositionCode(PdsBatchDispositionCode _pdsNewDispositionCode = pdsNewDispositionCode)
    {
        pdsNewDispositionCode = _pdsNewDispositionCode;

        return pdsNewDispositionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update batch Disposition code
    /// </summary>
    /// <remarks>
    /// Method runs through all batches that are within the range selected
    /// by the user and updates these qualifying batches
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Disposition code is not valid
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Invalid range so not records updated
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Invalid range so not records updated
    /// </exception>
    public void run()
    {
        super();

        this.validateNewDispositionCode();
        
        ttsbegin;

        boolean pdsValueUpdate = false;
        var pdsQ = new Query();
        var pdsQBD = pdsQ.addDataSource(tablenum(InventBatch));
        if ((this.parmGetBatchNumberRange() == '')
            || (this.parmGetItemNumberRange() == ''))
        {
            throw error("@PRO194");
        }

        pdsQBD.addRange(fieldnum(InventBatch, RecId)).value(this.parmGetBatchRecIdRange());
        var pdsQR = new QueryRun(pdsQ);

        while (pdsQR.next() && (this.parmGetItemNumberRange() != ''))
        {
            InventBatch inventBatch = pdsQR.getNo(1);
            InventBatch newInventBatch = InventBatch::find(inventBatch.InventBatchId, inventBatch.ItemId, true);

            if (#PdsBatchAttribEnabled && newInventBatch.pdsBatchAttribCheckMandatory() && !newInventBatch.pdsBatchAttribValidateMandatory())
            {
                error(strfmt("@PRO1685", newInventBatch.pdsBatchAttribMandatory().PdsBatchAttribId, inventBatch.InventBatchId));
                continue;
            }

            if (!this.mustUpdateDispositionCode(newInventBatch))
            {
                continue;
            }

            newInventBatch.PdsDispositionCode = pdsNewDispositionCode;
            newInventBatch.update();

            PdsHistoryInventDisposition pdsHistoryInventDisposition;
            pdsHistoryInventDisposition.ItemId = inventBatch.ItemId;
            pdsHistoryInventDisposition.InventBatchId = inventBatch.InventBatchId;
            pdsHistoryInventDisposition.OldDispositionCode = inventBatch.PdsDispositionCode;
            pdsHistoryInventDisposition.NewDispositionCode = newInventBatch.PdsDispositionCode;
            pdsHistoryInventDisposition.insert();

            pdsValueUpdate = true;
        }

        ttscommit;

        if (!pdsValueUpdate)
        {
            throw error("@PRO194");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateDispositionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the disposition code must be updated on the inventory batch.
    /// </summary>
    /// <param name = "_inventBatch">An inventory batch record.</param>
    /// <returns>true if the disposition code must be updated; otherwise, false.</returns>
    protected boolean mustUpdateDispositionCode(InventBatch _inventBatch)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNewDispositionCode</Name>
				<Source><![CDATA[
    private void validateNewDispositionCode()
    {
        if (pdsNewDispositionCode != '' && !PdsDispositionMaster::exist(pdsNewDispositionCode))
        {
            throw error("@PRO211");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should query values be shown
    /// </summary>
    /// <returns>
    /// True
    /// </returns>
    /// <remarks>
    /// Query values will be shown
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret;

        int version = RunBase::getVersion(_packedClass);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PdsResetDispositionStatus construct()
    {
        return new PdsResetDispositionStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@PDS2007";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustStartOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the operation must start.
    /// </summary>
    /// <returns>true if operation must start; otherwise, false.</returns>
    protected boolean mustStartOperation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PdsResetDispositionStatus pdsUpdateDispositionStatus = PdsResetDispositionStatus::construct();
        
        if (!pdsUpdateDispositionStatus.initFromArgs(_args))
        {
            throw error("@PRO212");
        }

        if (pdsUpdateDispositionStatus.mustStartOperation())
        {
            if (pdsUpdateDispositionStatus.prompt())
            {
                pdsUpdateDispositionStatus.runOperation();

                Object callerForm = _args.caller();
                if (callerForm && formHasMethod(callerForm, identifierStr(doRefresh)))
                {
                    callerForm.doRefresh();
                }
                info("@PRO195");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBatchDispositionCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the disposition code for the specified batch ID.
    /// </summary>
    /// <param name="_itemId">
    ///     The item ID.
    /// </param>
    /// <param name="_inventBatchId">
    ///     The inventory batch ID.
    /// </param>
    /// <param name="_dispositionCode">
    ///     The disposition code to be assigned to the batch.
    /// </param>
    /// <param name="_whsUserId">
    ///     The executing user ID; optional.
    /// </param>
    public static void setBatchDispositionCode(
        ItemId                        _itemId,
        InventBatchId                 _inventBatchId,
        PdsBatchDispositionCode       _dispositionCode,
        WHSUserId                     _whsUserId = '')
    {
        PdsResetDispositionStatus   pdsResetDispositionStatus;

        if (PdsDispositionMaster::exist(_dispositionCode))
        {
            pdsResetDispositionStatus = PdsResetDispositionStatus::construct();

            pdsResetDispositionStatus.parmGetItemNumberRange(_itemId);
            pdsResetDispositionStatus.parmGetBatchNumberRange(_inventBatchId);
            pdsResetDispositionStatus.parmGetBatchRecIdRange(int642str(InventBatch::find(_inventBatchId, _itemId).RecId));
            pdsResetDispositionStatus.parmPdsNewDispositionCode(_dispositionCode);
            pdsResetDispositionStatus.runOperation();

            if (_whsUserId)
            {
                WHSMobileDeviceActivityLogger::newStandard(_whsUserId, WHSWorkExecuteMode::ChangeBatchDisposition)
                    .append(#WHSLabelFromEDT(ItemId), _itemId)
                    .append(#WHSLabelFromEDT(InventBatchId), _inventBatchId)
                    .append(#WHSLabelFromEDT(PdsDispositionCode), _dispositionCode)
                    .save();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBatchRecIdRange</Name>
				<Source><![CDATA[
    private void addBatchRecIdRange(RecId _recId)
    {
        if (_recId)
        {
            if (pdsInventBatchRecId)
            {
                pdsInventBatchRecId += ',';
            }
            pdsInventBatchRecId += int642str(_recId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGetBatchRecIdRange</Name>
				<Source><![CDATA[
    public str parmGetBatchRecIdRange(str _range = pdsInventBatchRecId)
    {
        if (!prmisdefault(_range))
        {
            pdsInventBatchRecId = _range;
        }

        return pdsInventBatchRecId;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>