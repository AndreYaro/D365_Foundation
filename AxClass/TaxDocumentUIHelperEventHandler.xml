<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxDocumentUIHelperEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// TaxDocumentUIHelper and TaxDocumentTaxDetailsUIHelper EventHandler.
/// </summary>
class TaxDocumentUIHelperEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>TaxDocumentUIHelper_Post_recalculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post tax document recalculation.
    /// </summary>
    /// <param name="args"></param>
    [
        PostHandlerFor(classStr(TaxDocumentUIHelper), methodStr(TaxDocumentUIHelper, recalculate)),
        PostHandlerFor(classStr(TaxDocumentTaxDetailsUIHelper), methodStr(TaxDocumentTaxDetailsUIHelper, recalculate))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void TaxDocumentUIHelper_Post_recalculate(XppPrePostArgs args)
    {
        Common                            souceDocumentTable;
        ledgerJournalTable                ledgerJournalTable;
        TaxEngineLedgerJournalTransHeader TaxEngineLedgerJournalTransHeader;

        ITaxDocument taxDocumentObject = args.getThis().getTaxDocument();
        TaxDocument taxDocument = TaxDocument::findByGUID(taxDocumentObject.getGUID());
        Common sourceTable = taxDocument.getOriginalSource();
        switch (sourceTable.TableId)
        {
            case tableNum(TaxEngineLedgerJournalTransHeader) :
                taxEngineLedgerJournalTransHeader = sourceTable;
                select firstonly ledgerJournalTable
                    where ledgerJournalTable.JournalNum == taxEngineLedgerJournalTransHeader.JournalNum;
                souceDocumentTable = ledgerJournalTable;
                break;

            case tableNum(TaxEngineProjCostTransHeader) :
            case tableNum(TaxEngineProjEmplTransHeader) :
            case tableNum(TaxEngineProjItemSOTransHeader) :
            case tableNum(TaxEngineProjItemTransHeader) :
            case tableNum(TaxEngineProjOnAcctTransHeader) :
            case tableNum(TaxEngineProjRevenueSubTransHeader) :
            case tableNum(TaxEngineProjRevenueTransHeader) :
                // Withhold tax for project will recalculate ervery time, so it doesn't need to delete uncommitted withhold tax.
                break;

            case tableNum(TaxEngineProjAdvancedJournalLineHeader) :
                TaxEngineProjAdvancedJournalLineHeader taxEngineProjAdvancedJournalLineHeader = sourceTable;
                ProjAdvancedJournal projAdvancedJournal = ProjAdvancedJournalLine::findByVoucher(taxEngineProjAdvancedJournalLineHeader.Voucher).getProjAdvancedJournal();
                souceDocumentTable = projAdvancedJournal;
                break;

            default :
                souceDocumentTable = sourceTable;
                break;
        }

        if (souceDocumentTable)
        {
            switch(souceDocumentTable.TableId)
            {
                case tableNum(ledgerJournalTable):
                    TaxWithholdUncommitted_IN::deleteForVoucher(
                        souceDocumentTable.TableId,
                        souceDocumentTable.RecId,
                        taxEngineLedgerJournalTransHeader.Voucher);
                    break;

                default:
                    TaxWithholdUncommitted_IN::deleteForDocumentHeader(souceDocumentTable.TableId, souceDocumentTable.RecId);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate tax document during tax document UI refresh.
    /// </summary>
    /// <param name = "_formRun">The <c>FormRun</c> object.</param>
    [
        SubscribesTo(classStr(TaxDocumentUIHelper), delegateStr(TaxDocumentUIHelper, onRefreshTaxDocument)),
        SubscribesTo(classStr(TaxDocumentTaxDetailsUIHelper), delegateStr(TaxDocumentTaxDetailsUIHelper, onRefreshTaxDocument))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void refreshTaxDocument(FormRun _formRun)
    {
        TaxDocumentDisplayModel model = _formRun.args().parmObject();
        ITaxableDocument taxableDocumentObject = TaxableDocumentObject::constructServer(model.parmTaxableDocument().parmTaxableDocumentDescriptor());

        if (taxableDocumentObject.parmTaxableDocumentDescriptor() is TaxableDocumentDescriptorProjAdvancedJournal)
        {
            TaxBusinessService::calculateTaxForProjAdvancedJournal(taxableDocumentObject, false);
        }
        else
        {
            TaxBusinessService::calculateTax(taxableDocumentObject, false);
        }

        model.parmTaxableDocument(taxableDocumentObject);
        model.parmTaxDocument(taxableDocumentObject.parmTaxDocument());
        model.parmTaxDocumentLine(null);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>