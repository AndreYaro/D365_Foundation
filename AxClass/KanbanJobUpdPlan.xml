<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobUpdPlan</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanJobUpdPlan</c> class performs status updates for kanban jobs with target status
///    planned.
/// </summary>
public class KanbanJobUpdPlan extends KanbanJobUpd
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createKanbanWave</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a warehouse wave for the kanban material if required.
    /// </summary>
    protected void createKanbanWave()
    {
        WHSPoolKanbanJobPickingList::createPoolAndWave(kanbanJob.Kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions for the plan status update.
    /// </summary>
    protected void runStatus()
    {
        this.updateKanbanJobSchedule();
        this.updateKanbanJobPickingList();
        this.createKanbanWave();
        this.setStatus(LeanKanbanJobStatus::Planned);
        this.updateKanbanJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateKanbanJobPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the material date for picking list lines 
    /// </summary>
    protected void updateKanbanJobPickingList()
    {
        ttsbegin;

        KanbanJobPickingListMaterialDateTime materialDateTime = KanbanDateCalculation::newKanbanJob(kanbanJob).jobMaterialDateTime(kanbanJob);
        KanbanJobPickingList::setMaterialDateTimeInRecordset(kanbanJob.RecId, materialDateTime);
        
        KanbanJobPickingList kanbanJobPickingList;
        while select kanbanJobPickingList
            where kanbanJobPickingList.Job == kanbanJob.RecId
        {
            ReqEventProcessParm reqEventProcessParm = ReqEventProcessParm::newInventMovement(kanbanJobPickingList.inventMovement());
            ReqEventProcessKanban::newStandard(kanbanJobPickingList, false, false, reqEventProcessParm).runOperation();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateKanbanJobSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the kanban job into the <c>KanbanJobSchedule</c> table after the indicated kanban job or
    /// sequence line number.
    /// </summary>
    protected void updateKanbanJobSchedule()
    {
        KanbanJobSchedulerPlan::newStandard(this,null,this.kanbanJob(),kanbanJobStatusUpdate).run();
        kanbanJob = KanbanJob::find(kanbanJob.RecId,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanJobUpd construct()
    {
        return new KanbanJobUpdPlan();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>