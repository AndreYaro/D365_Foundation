<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxInventTransferInvoice_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>Tax</c> implementation for inventory transfer invoices.
/// </summary>
class TaxInventTransferInvoice_BR extends TaxInventTransfer_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>moveFromTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the <c>TmpTaxWorkTrans</c> references from the order.
    /// </summary>
    /// <param name="_tableId">
    /// Table ID of the buffer to transfer the references from.
    /// </param>
    /// <param name="_recId">
    /// Record ID of the buffer to transfer the references from.
    /// </param>
    protected void moveFromTransfer(tableId   _tableId,
                                    recId     _recId)
    {
        while select taxWorkTrans
            where taxWorkTrans.SourceTableId == _tableId
                && taxWorkTrans.SourceRecId == _recId
        {
            taxWorkTrans.HeadingTableId           = headingTableId;
            taxWorkTrans.HeadingRecId             = headingRecId;
            taxWorkTrans.SourceTableId            = this.sourceTableId();
            taxWorkTrans.SourceRecId              = this.sourceRecId();

            taxWorkTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(NoYes                      _post,
             InventTransferCalcTax_BR   _calcTax,
             LedgerVoucher              _ledgerVoucher,
             TmpTaxWorkTrans            _tmpTaxWorkTrans)
    {
        LedgerVoucher ledgerVoucher;

        post                = _post;
        transferCalcTax     = _calcTax;
        ledgerVoucher       = _ledgerVoucher;
        taxWorkTrans        = _tmpTaxWorkTrans;

        taxModuleType       = TaxModuleType::SalesInvoice;

        headingTableId      = transferCalcTax.tableId();
        headingRecId        = transferCalcTax.recID();

        super();

        if (!headingRecId)
        {
            throw error("@SYS18447");
        }
        else
        {
            if (! this.checkParameters())
                throw error("@SYS18447");

            if (ledgerVoucher)
            {
                voucher             = ledgerVoucher.lastVoucher();
                taxDate             = ledgerVoucher.lastTransDate();
            }
            else
            {
                taxDate             = transferCalcTax.invoiceDate();
            }
            sourceCurrencyCode   = transferCalcTax.currencyCode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the inventory transfer taxes.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// <c>LedgerPostingController</c> for the posting.
    /// </param>
    /// <param name="_taxTrans">
    /// <c>TaxTrans</c> being posted
    /// </param>
    /// <param name="_taxAmount">
    /// <c>TaxAmount</c> being posted
    /// </param>
    /// <param name="_chargeAmount">
    /// Charge amount
    /// </param>
    /// <param name="_exchRateHelper">
    /// <c>CurrencyExchangeHelper</c> for currency transformations.
    /// </param>
    /// <param name="_ledgerDimension">
    /// <c>LedgerDimensionAccount</c> for the posting.
    /// </param>
    /// <param name="_operationLedgerDimension">
    /// <c>LedgerDimensionAccount</c> for the operation.
    /// </param>
    /// <param name="_taxOffsetUseTaxLedgerDimension">
    /// <c>LedgerDimensionAccount</c> for the tax offset
    /// </param>
    /// <param name="_ledgerDetailLevel">
    /// <c>LedgerDetailLevel</c> for the posting; optional.
    /// </param>
    /// <param name="_projLedger">
    /// <c>ProjLedger</c> for the posting; optional.
    /// </param>
    /// <param name="_offsetLedgerDimension">
    /// <c>LedgerDimensionAccount</c> for the offset; optional.
    /// </param>
    /// <param name="_amountMSTSecondary">
    /// <c>AmountMSTSecondary</c> for the posting; optional.
    /// </param>
    [Hookable(true)]
    protected void post(LedgerPostingController _ledgerPostingController,
                        TaxTrans _taxTrans,
                        TaxAmount _taxAmount,
                        TaxAmount _chargeAmount,
                        CurrencyExchangeHelper _exchRateHelper,
                        LedgerDimensionAccount _ledgerDimension,
                        LedgerDimensionAccount _operationLedgerDimension,
                        LedgerDimensionAccount _taxOffsetUseTaxLedgerDimension,
                        LedgerDetailLevel _ledgerDetailLevel = LedgerDetailLevel::AsDefault,
                        ProjLedger              _projLedger = null
                        ,LedgerDimensionAccount _offsetLedgerDimension = 0,
                        AmountMSTSecondary      _amountMSTSecondary    = 0
                        )
    {
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        TaxAmountCur                taxExpenseAmount;
        LedgerDimensionAccount      ledgerDimensionAccount;

        super(_ledgerPostingController,
              _taxTrans,
              _taxAmount,
              _chargeAmount,
              _exchRateHelper,
              _ledgerDimension,
              _operationLedgerDimension,
              _taxOffsetUseTaxLedgerDimension,
              _ledgerDetailLevel,
              _projLedger,
              _offsetLedgerDimension,
              _amountMSTSecondary);

        if (transferCalcTax.updateType() == InventTransferUpdateType::Receive
            && _taxTrans.TaxDirection == TaxDirection::IncomingTax && !TaxTable::find(_taxTrans.TaxCode).RetainedTax_BR)
        {
            if (!_taxTrans.TaxInCostPrice)
            {
                taxExpenseAmount = -(_taxAmount - _chargeAmount);
            }
            else
            {
                taxExpenseAmount = -_taxAmount;

                ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(_operationLedgerDimension,
                                                                                                  LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_ledgerDimension));

                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(_ledgerPostingController.getReference(),
                                                                                    LedgerPostingType::Tax,
                                                                                    ledgerDimensionAccount,
                                                                                    _taxTrans.SourceCurrencyCode,
                                                                                    _taxAmount,
                                                                                    _exchRateHelper);

                // If TaxTrans exists, create the relationship between TaxTrans and LedgerEntry for the tax amount
                if (_taxTrans)
                {
                    // TaxTrans will not exist in the case where a transaction is only being validated,
                    // and in that case the tax trans relationship should not be created
                    ledgerVoucherTransObject.addTaxTransRelationship(_taxTrans.RecId, TaxTransRelationshipType::Tax);
                }

                ledgerVoucherTransObject.parmLedgerDetailLevel(_ledgerDetailLevel);

                _ledgerPostingController.addTrans(ledgerVoucherTransObject);
            }

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(_ledgerPostingController.getReference(),
                                                                                LedgerPostingType::TaxExpense_BR,
                                                                                _taxTrans.taxTrans_BR().TaxSalesOffsetLedgerDimension_BR,
                                                                                _taxTrans.SourceCurrencyCode,
                                                                                taxExpenseAmount,
                                                                                _exchRateHelper);

            // If TaxTrans exists, create the relationship between TaxTrans and LedgerEntry for the tax amount
            if (_taxTrans)
            {
                // TaxTrans will not exist in the case where a transaction is only being validated,
                // and in that case the tax trans relationship should not be created
                if (TaxTransferOrderReceiveTaxRelationTypeCorrectionFlight::instance().isEnabled())
                {
                    // Relationship type OFFset_RU is set here, because for outbound document in method Tax::postPost_BR() such sales tax expense posting type is also setting this relationship type.
                    // and if we set relationship type Tax here, the inbound document would have one relationship type Tax assigned to 2 posting types: tax and sales tax expense.
                    // in such case, when trying to post tax payment. the database would randomly retrieve either of these 2 GeneralJournalAccountEntries and one of them providing wrong account.
                    ledgerVoucherTransObject.addTaxTransRelationship(_taxTrans.RecId, TaxTransRelationshipType::Offset_RU);
                }
                else
                {
                    ledgerVoucherTransObject.addTaxTransRelationship(_taxTrans.RecId, TaxTransRelationshipType::Tax);
                }
            }

            ledgerVoucherTransObject.parmLedgerDetailLevel(_ledgerDetailLevel);

            _ledgerPostingController.addTrans(ledgerVoucherTransObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    public recId sourceRecId()
    {
        return sourceRecord.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    public tableId sourceTableId()
    {
        return sourceRecord.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Put to the general ledger.
    /// </summary>
    /// <param name="_ledgerPostingController">
    ///  A <c>LedgerPostingController</c> to post to the general ledger.
    /// </param>
    /// <returns>
    ///  Total tax amount.
    /// </returns>
    public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxAmount       taxAmount;
        boolean         moreLines;

        ttsbegin;

        transferCalcTax.initCursor();
        moreLines   = true;
        while (moreLines)
        {
            if (transferCalcTax.nextLine())
            {
                sourceRecord = transferCalcTax.queryGet();

                this.moveFromTransfer(transferCalcTax.transTableId(),
                                      transferCalcTax.transRecId());
            }
            else
                moreLines   = false;
        }
        ttscommit;

        if (post)
        {
            this.saveAndPost(_ledgerPostingController);
            taxAmount = Tax::taxTotalVoucherDate(voucher, taxDate);
        }
        else
        {
            this.saveInJournalTrans(headingTableId, headingRecId);
            taxAmount = this.totalTaxAmount();
        }

        return taxAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>