<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConvUpd</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class InventStdCostConvUpd
{
    InventStdCostConv   inventStdCostConv;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(InventStdCostConv _inventStdCostConv)
    {
        inventStdCostConv = _inventStdCostConv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that performs the actual job of the class.
    /// </summary>
    abstract public void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        if (!args || !args.record() || args.parmEnumType() != enumNum(InventStdCostConvStatus))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        InventStdCostConvUpd inventStdCostConvUpd = InventStdCostConvUpd::newInventStdCostConvStatus(args.parmEnum(), args.record());
        inventStdCostConvUpd.run();

        Common common = args.record();
        if (FormDataUtil::isFormDataSource(common))
        {
            FormDataSource formDataSource = FormDataUtil::getFormDataSource(common);

            formDataSource.formRun().lock();
            formDataSource.reread();
            formDataSource.refreshEx();
            formDataSource.active();
            formDataSource.formRun().unLock();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventStdCostConvStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an <c>InventStdCostConvUpd</c> object from the specified parameters.
    /// </summary>
    /// <param name="_inventStdCostConvStatus">
    ///    An <c>InventStdCostConvStatus</c> enumeration value that specifies the status to which the record
    ///    buffer should be set.
    /// </param>
    /// <param name="_inventStdCostConv">
    ///    An <c>InventStdCostConv</c> record buffer that must have its status updated.
    /// </param>
    /// <returns>
    ///    An <c>InventStdCostConvUpd</c> object.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    An object could not be initialized because the status cannot be updated.
    /// </exception>
    static public InventStdCostConvUpd newInventStdCostConvStatus(InventStdCostConvStatus _inventStdCostConvStatus, InventStdCostConv _inventStdCostConv)
    {
        switch (_inventStdCostConvStatus)
        {
            case InventStdCostConvStatus::Ready:
                return InventStdCostConvUpd_Ready::construct(_inventStdCostConv);

            case InventStdCostConvStatus::InProgress:
                return InventStdCostConvUpd_InProgress::construct(_inventStdCostConv);

            case InventStdCostConvStatus::Completed:
                return InventStdCostConvUpd_Completed::construct(_inventStdCostConv);
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
