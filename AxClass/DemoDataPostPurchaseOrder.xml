<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DemoDataPostPurchaseOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processes and posts purchase orders based on run document parameters.
/// </summary>
[DemoDataPostBaseFactoryAttribute(DemoDataPostDocument::PurchaseOrder)]
public class DemoDataPostPurchaseOrder extends DemoDataPostBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canPurchOrderBeUpdatedForDocumentStatus</Name>
				<Source><![CDATA[
    private boolean canPurchOrderBeUpdatedForDocumentStatus(PurchTable _purchTable, DocumentStatus _purchaseOrderDocumentStatus)
    {
        container canBeUpdated = _purchTable.checkIfUpdate();
        PurchTableCanBeUpdatedContract canBeUpdatedContract = PurchTableCanBeUpdatedContract::create(canBeUpdated);

        boolean allowUpdate;

        switch (_purchaseOrderDocumentStatus)
        {
            case DocumentStatus::PurchaseOrder:
                allowUpdate = _purchTable.type().canPurchaseOrderBeUpdated();
                break;

            case DocumentStatus::ConfirmationRequest:
                allowUpdate = _purchTable.type().canConfirmationRequestBeUpdated();
                break;

            case DocumentStatus::PackingSlip:
                allowUpdate = canBeUpdatedContract.parmCanPackingSlipBeUpdated();
                break;

            case DocumentStatus::Invoice:
                allowUpdate = canBeUpdatedContract.parmCanInvoiceBeUpdated();
                break;
        }

        return allowUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doProcess</Name>
				<Source><![CDATA[
    private void doProcess(RecordSortedList _purchaseOrders, DocumentStatus _purchaseOrderDocumentStatus)
    {
        var purchFormLetter = PurchFormLetter::construct(_purchaseOrderDocumentStatus);

        DemoDataPostRunDocumentStatus runDocumentStatus;
        DemoDataPostDocumentStatus status;
        PurchTable purchTable;
        boolean purchOrderFound = _purchaseOrders.first(purchTable);

        while (purchOrderFound)
        {
            status = DemoDataPostDocumentStatus::Failed;

            runDocumentStatus = DemoDataPostRunDocumentStatus::addDocumentForProcessing(
                runId,
                demoDataPostRunDocument.RecId,
                purchTable.RecId,
                purchTable.TableId,
                purchTable.PurchId);

            try
            {
                purchFormLetter.update(
                    purchTable,
                    purchTable.PurchId,
                    purchTable.AccountingDate,
                    PurchUpdate::All,
                    AccountOrder::None,
                    NoYes::No,
                    NoYes::No);

                status = DemoDataPostDocumentStatus::Success;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0 && xSession::currentRetryCount() < DemoDataPostConstants::MaxRetryCount)
                {
                    retry;
                }
            }
            catch
            {
                Global::exceptionTextFallThrough();
            }
            finally
            {
                ttsbegin;

                runDocumentStatus.DocumentStatus = status;
                runDocumentStatus.CompletionTime = DateTimeUtil::getSystemDateTime();
                runDocumentStatus.update();

                ttscommit;
            }

            purchOrderFound = _purchaseOrders.next(purchTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocumentStatus</Name>
				<Source><![CDATA[
    private DocumentStatus findDocumentStatus()
    {
        DocumentStatus purchaseOrderDocumentStatus;

        switch (demoDataPostRunDocument.DocumentTarget)
        {
            case DemoDataPostDocumentTarget::Confirm:
                purchaseOrderDocumentStatus = DocumentStatus::PurchaseOrder;
                break;

            case DemoDataPostDocumentTarget::VendorConfirm:
                purchaseOrderDocumentStatus = DocumentStatus::ConfirmationRequest;
                break;

            case DemoDataPostDocumentTarget::ProductReceipt:
                purchaseOrderDocumentStatus = DocumentStatus::PackingSlip;
                break;

            case DemoDataPostDocumentTarget::Invoice:
                purchaseOrderDocumentStatus = DocumentStatus::Invoice;
                break;

            default:
                throw error(strFmt("@DemoDataPost:InvalidDocumentTarget", demoDataPostRunDocument.DocumentTarget, demoDataPostRunDocument.Document));
        }

        return purchaseOrderDocumentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchaseOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the set of purchase orders to process.
    /// </summary>
    /// <param name = "_purchaseOrderDocumentStatus">The purchase order document status for processing.</param>
    /// <returns>The set of purchase orders.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RecordSortedList findPurchaseOrders(DocumentStatus _purchaseOrderDocumentStatus)
    {
        RecordSortedList purchTableList = new RecordSortedList(tableNum(PurchTable));
        purchTableList.sortOrder(fieldNum(PurchTable, PurchId));

        PurchTable purchTable;

        if (demoDataPostRunDocument.FromDocumentId && demoDataPostRunDocument.ToDocumentId)
        {
            while select purchTable
                order by PurchId
                where purchTable.PurchId >= demoDataPostRunDocument.FromDocumentId
                    && purchTable.PurchId <= demoDataPostRunDocument.ToDocumentId
            {
                if (this.canPurchOrderBeUpdatedForDocumentStatus(purchTable, _purchaseOrderDocumentStatus))
                {
                    purchTableList.ins(purchTable);
                }
            }
        }
        else if (demoDataPostRunDocument.FromDocumentId && !demoDataPostRunDocument.ToDocumentId)
        {
            while select purchTable
                order by PurchId
                where purchTable.PurchId >= demoDataPostRunDocument.FromDocumentId
            {
                if (this.canPurchOrderBeUpdatedForDocumentStatus(purchTable, _purchaseOrderDocumentStatus))
                {
                    purchTableList.ins(purchTable);
                }
            }
        }
        else if (!demoDataPostRunDocument.FromDocumentId && demoDataPostRunDocument.ToDocumentId)
        {
            while select purchTable
                order by PurchId
                where purchTable.PurchId <= demoDataPostRunDocument.ToDocumentId
            {
                if (this.canPurchOrderBeUpdatedForDocumentStatus(purchTable, _purchaseOrderDocumentStatus))
                {
                    purchTableList.ins(purchTable);
                }
            }
        }
        else
        {
            while select purchTable
                order by PurchId
            {
                if (this.canPurchOrderBeUpdatedForDocumentStatus(purchTable, _purchaseOrderDocumentStatus))
                {
                    purchTableList.ins(purchTable);
                }
            }
        }

        return purchTableList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    public DemoDataPostDocument getDocument()
    {
        return DemoDataPostDocument::PurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process()
    {
        DocumentStatus purchaseOrderDocumentStatus = this.findDocumentStatus();

        RecordSortedList purchOrderList = this.findPurchaseOrders(purchaseOrderDocumentStatus);

        this.doProcess(purchOrderList, purchaseOrderDocumentStatus);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>