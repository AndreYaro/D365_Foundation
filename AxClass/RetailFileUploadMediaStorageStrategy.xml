<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailFileUploadMediaStorageStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.DynamicsOnline.Infrastructure.Components.SharedServiceUnitStorage;

/// <summary>
/// The <c>RetailFileUploadMediaStorageStrategy</c> class used to upload a Retail media file to in the Azure blob.
/// </summary>
class RetailFileUploadMediaStorageStrategy extends FileUploadStrategyBase
{
    /// <summary>
    /// The blob container files are stored in.
    /// </summary>
    public const str AzureStorageCategory = "RetailMediaStaticImages";
    public const str SupportedImageFileTypes = "image/*,.jpg,.jpeg,.gif,.bmp,.png";
    public const int UrlExpirationForPublicContainerBlobs = 0;
    private const str ThumbnailImageNamePrefix = "thumbnail_";
    private const str CustomImageNamePrefix = "custom_";
    private const int ThumbnailImageSize = 30;
    private const int CustomImageSize = 60;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowedFileTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the filetypes accepted.
    /// </summary>
    /// <returns>A list of valid file types and extensions.</returns>
    /// <remarks>
    /// The list of the types and extensions should consist of a set of comma-separated tokens, each of which must be an ASCII case-insensitive match for one of the followining.
    /// </remarks>
    public str allowedFileTypes()
    {
        return SupportedImageFileTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultClassName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class name of the upload result class used in this strategy.
    /// </summary>
    /// <returns>The <c>RetailFileUploadMediaStorageStrategy</c> class name.</returns>
    public str getResultClassName()
    {
        return classstr(RetailFileUploadMediaStorageResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uploads the file to the blob and returns the <c>RetailFileUploadMediaStorageStrategy</c>.
    /// </summary>
    /// <param name = "_stream">The stream of the file.</param>
    /// <param name = "_fileName">The name of the file., e.g., "test.txt".</param>
    /// <param name = "_contenType">The MIME type of the file, e.g., "image/jpeg".</param>
    /// <param name = "_fileExtension">The extension of the file, e.g., ".txt".</param>
    /// <param name = "_metaData">Additional information associated with the file.</param>
    /// <returns>The <c>FileUploadResultBase</c> class.</returns>
    public FileUploadResultBase uploadFile(System.IO.Stream _stream, str _fileName, str _contentType = null, str _fileExtension = null, str _metaData = null)
    {
        Microsoft.WindowsAzure.Storage.StorageException storageException;
        str imageUrl = "";
        str thumbnailImageUrl = "";
        str customImageUrl = "";
        str thumbnailImageFileName = "";
        str customImageFileName = "";
        str errorMessage = "";
        boolean isUploadSuccess = false;
        guid fileGuid = newGuid();
        guid customImageGuid = newGuid();
        guid thumbnailImageGuid = newGuid();
        System.IO.MemoryStream thumbnailImageInStream = null;
        System.IO.MemoryStream customImageInStream = null;

        str fileId = guid2str(fileGuid);
        RetailFileUploadMediaStorageResult result;

        try
        {
            if (_fileName != "")
            {
                imageUrl = this.uploadFileToMediaStore(_stream, _fileName, fileGuid);

                //Create Thumbnail image
                thumbnailImageInStream = RetailMediaHelper::getResizedImage(_stream, ThumbnailImageSize);
                thumbnailImageFileName = ThumbnailImageNamePrefix + _fileName;
                thumbnailImageUrl = this.uploadFileToMediaStore(thumbnailImageInStream, thumbnailImageFileName, thumbnailImageGuid);

                //Create Custom image
                customImageInStream = RetailMediaHelper::getResizedImage(_stream, CustomImageSize);
                customImageFileName = CustomImageNamePrefix + _fileName;
                customImageUrl = this.uploadFileToMediaStore(customImageInStream, customImageFileName, customImageGuid);

                if (imageUrl != "" && thumbnailImageUrl != "" && customImageUrl != "")
                {
                    //Now update DB
                    System.Drawing.Bitmap img = new System.Drawing.Bitmap(_stream);
                    var sizeInBytes = _stream.Length;
                    var imageHeight = img.Height;
                    var imageWidth = img.Width;

                    ttsbegin;
                    RetailImageResource imageTable;
                    imageTable.ResourceId = RetailMediaResource::GetNextResourceId();
                    imageTable.FileName = _fileName;
                    imageTable.SharedStorageId = fileGuid;
                    if ( sizeInBytes < 1024 )
                    {
                        imageTable.SizeInKB = 1;
                    }
                    else
                    {
                        imageTable.SizeInKB = real2int(sizeInBytes / 1024);
                    }
                    imageTable.Height = imageHeight;
                    imageTable.Width = imageWidth;
                    imageTable.ThumbnailSharedStorageId = thumbnailImageGuid;
                    imageTable.SmallImageSharedStorageId = customImageGuid;
                    imageTable.ResourceURL =  imageUrl;
                    imageTable.ThumbnailURL = thumbnailImageUrl;
                    imageTable.SmallImageURL = customImageUrl;
                    imageTable.ThumbnailBlob = Binary::constructFromMemoryStream(thumbnailImageInStream).getContainer();
                    imageTable.SmallImageBlob = Binary::constructFromMemoryStream(customImageInStream).getContainer();
                    imageTable.Description = "Retail Image";
                    imageTable.write();

                    ttscommit;
                    isUploadSuccess = true;
                    result = new RetailFileUploadMediaStorageResult(_fileName, _contentType, isUploadSuccess, errorMessage, imageUrl, fileId);
                    result.resourceId(imageTable.ResourceId);
                }
            }
            else
            {
                errorMessage = "@ApplicationPlatform:EmptyFileName";
            }
        }
        catch(storageException)
        {
            errorMessage = "@ApplicationPlatform:FileUploadFailedInStrategy";
            error(errorMessage);
        }
        catch (Exception::Error)
        {
            errorMessage = "@ApplicationPlatform:FileUploadFailedInStrategy";
            error(errorMessage);
        }
        finally
        {
            if (thumbnailImageInStream != null )
                thumbnailImageInStream.Dispose();

            if ( customImageInStream != null)
                customImageInStream.Dispose();
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadFileToMediaStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes a stream, and then returns a URL pointing to the file in its new location in temp storage.
    /// </summary>
    /// <param name="_stream">
    /// The stream of the file to upload.
    /// </param>
    /// <param name="_uniqueFileName">
    /// The filename of the stream.
    /// </param>
    /// <param name="_fileId">
    /// A unique ID that is used as a key in the backing storage
    /// </param>
    /// <returns>
    /// A URL that points to the file in temp storage if the file upload was successful; otherwise, an empty string.
    /// </returns>
    private str uploadFileToMediaStore(System.IO.Stream _stream, str _uniqueFileName, guid _fileId)
    {
        Microsoft.WindowsAzure.Storage.StorageException storageException;
        str downloadUrl = "";

        try
        {
            if (_stream == null)
            {
                throw error(Error::missingParameter(null));
            }

            if (_stream.CanSeek)
            {
                _stream.Seek(0, System.IO.SeekOrigin::Begin);
            }

            var blobInfo = new SharedServiceUnitStorageData();
            blobInfo.Id = guid2str(_fileId);
            blobInfo.Category = RetailFileUploadMediaStorageStrategy::AzureStorageCategory;
            blobInfo.Name = _uniqueFileName;
            blobInfo.Accessibility = Accessibility::Public;
            blobInfo.Retention = Retention::Permanent;
            blobInfo.IsContainerPublic = true;

            var blobStorageService = new SharedServiceUnitStorage(SharedServiceUnitStorage::GetDefaultStorageContext());
            blobStorageService.UploadData(blobInfo, _stream);

            // Fetch a read-only link.
            System.TimeSpan duration = System.TimeSpan::FromHours(UrlExpirationForPublicContainerBlobs);
            var uploadedBlobInfo = blobStorageService.GetData(blobInfo.Id, blobInfo.Category, BlobUrlPermission::Read, duration);
            downloadUrl = uploadedBlobInfo.BlobLink;
        }
        catch(storageException)
        {
            error("@ApplicationPlatform:FileUploadFailed");
        }
        catch(Exception::Error)
        {
            error("@ApplicationPlatform:FileUploadFailed");
        }

        return downloadUrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>