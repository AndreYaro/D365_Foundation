<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStatementCalculate_Multi</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generates the statement for all the transactions for a particular store and also for all the staffs and terminals involved in the specified store.
/// </summary>
/// <remarks>
/// Runs the class in batch.
/// </remarks>
[SysObsolete('This class is obsolete. Use RetailEodStatementCalculateBatchScheduler instead.', true, 30\11\2019)]
class RetailStatementCalculate_Multi extends RunBaseBatch implements RetailIOperatingUnitPickerCaller, BatchRetryable
{
    BatchHeader batchHeader;
    Set         selectedOMInternalOrgRecIds;
    container   packedOMUnits;
    RecId       oMHierarchyRecId;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        packedOMUnits,
        oMHierarchyRecId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    //Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    public Object dialog()
    {
        // If the flag to suppress obsolete errors is not set, then throw an error.
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());

        DialogRunbase   dialog = Dialog::newFormnameRunbase(formstr(RetailOperatingUnitPicker), this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        // If the flag to suppress obsolete errors is not set, then throw an error.
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());

        if (selectedOMInternalOrgRecIds)
        {
            packedOMUnits = selectedOMInternalOrgRecIds.pack();
        }

        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOMHierarchyRecId</Name>
				<Source><![CDATA[
    public RecId  parmOMHierarchyRecId(RecId _oMHierarchyRecId = oMHierarchyRecId)
    {
        // If the flag to suppress obsolete errors is not set, then throw an error.
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());

        oMHierarchyRecId = _oMHierarchyRecId;

        return oMHierarchyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedOMInternalOrgRecIds</Name>
				<Source><![CDATA[
    public Set  parmSelectedOMInternalOrgRecIds(Set _selectedOMInternalOrgRecIds = selectedOMInternalOrgRecIds)
    {
        // If the flag to suppress obsolete errors is not set, then throw an error.
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());

        if (!prmIsDefault(_selectedOMInternalOrgRecIds))
        {
            selectedOMInternalOrgRecIds = _selectedOMInternalOrgRecIds;
        }

        return selectedOMInternalOrgRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPickerInitParameters</Name>
				<Source><![CDATA[
    RetailOperatingUnitPickerData getPickerInitParameters()
    {
        // If the flag to suppress obsolete errors is not set, then throw an error.
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());
        
        RetailOperatingUnitPickerData pickerInitParameter = new RetailOperatingUnitPickerData();
        pickerInitParameter.hierarchyPurpose = HierarchyPurpose::RetailPOSPosting;

        if (this.parmInBatch())
        {
            pickerInitParameter.omInternalOrganizationRecIds = selectedOMInternalOrgRecIds;
            pickerInitParameter.omHierarchyTypeRecId = this.oMHierarchyRecId;
        }

        return pickerInitParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOperatingUnitPickerData</Name>
				<Source><![CDATA[
    void processOperatingUnitPickerData(RetailOperatingUnitPickerData operatingUnitPickerData)
    {
        // If the flag to suppress obsolete errors is not set, then throw an error.
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());
        
        this.parmSelectedOMInternalOrgRecIds(operatingUnitPickerData.omInternalOrganizationRecIds);
        this.parmOMHierarchyRecId(operatingUnitPickerData.omHierarchyTypeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the statement for all the transactions for a particular store and also for all the staffs involved in the specified store.
    /// </summary>
    /// <remarks>
    /// Create the statement based on the particular Store for all staffs and all terminals.
    /// </remarks>
    public void run()
    {
        RetailStoreTable                storeTable;
        RetailStatementCalculate        rboStatementCalculate;
        RetailStaffTable                staffTable;
        RetailTerminalTable             terminalTable;
        RetailPosBatchTable             posBatchTable;
        RetailTransactionTable          transactionTable;
        SetEnumerator                   selectedStoreEnumerator;
        SetEnumerator                   oMInternalOrgRecIds;
        RetailChannelTable              retailChannelTable;
        Set selectedStoreRecIds = new Set(Types::Int64);
        Set operatingUnitType = new Set(Types::Enum);
        Set                     descendants;
        SetEnumerator           descendantsEnumerator;
        ;

        // If the flag to suppress obsolete errors is not set, then throw an error.
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());

        Microsoft.Dynamics.Retail.Tracing.RetailAXTraceProvider::EventWriteRAXStatementCreateMultiStart(0, "", "", "", 0);

        oMInternalOrgRecIds = selectedOMInternalOrgRecIds.getEnumerator();

        // Used to filter the OMOperating unit type to include only Retail channel.
        operatingUnitType.add(OMOperatingUnitType::RetailChannel);

        while (oMInternalOrgRecIds.moveNext())
        {
            //get all the descendents for selected hierarchy node.
            descendants = OMOperatingUnit::getDescendantsAndSelf(
                                            oMInternalOrgRecIds.current(),
                                            oMHierarchyRecId,
                                            DateTimeUtil::utcNow(),
                                            operatingUnitType
                                            );

            // start traversing on the descendants.
            descendantsEnumerator = descendants.getEnumerator();
            while (descendantsEnumerator.moveNext())
            {
                retailChannelTable = RetailChannelTable::findByOperatingUnitId(descendantsEnumerator.current());

                if (retailChannelTable.RecId &&
                    retailChannelTable.ChannelType == RetailChannelType::RetailStore &&
                    !selectedStoreRecIds.in(retailChannelTable.RecId))
                {
                    selectedStoreRecIds.add(retailChannelTable.RecId);
                }
            }
        }

        // start processing for selected Stores.
        selectedStoreEnumerator = selectedStoreRecIds.getEnumerator();
        while (selectedStoreEnumerator.moveNext())
        {
            storeTable = RetailStoreTable::findRecId(selectedStoreEnumerator.current());

            if (storeTable.statementMethod != RetailStaffTerminalTotal::Total
                && storeTable.statementMethod != RetailStaffTerminalTotal::Shift
                && storeTable.separateStmtPerStaffTerminal)
            {
                switch (storeTable.statementMethod)
                {
                    case RetailStaffTerminalTotal::Staff:

                        // Find all staff-members who were involved in transactions at specified store.
                        // Create a separate statement for each of them.
                        // Cannot go by the store mapping in RboStaffTable because we allow staff members to move across stores.

                        if (storeTable.oneStatementPerDay)
                        {
                            // Group by businessDate if oneStatementPerDay is set on the store
                            while select staff, businessDate from transactionTable
                                group by transactionTable.staff, transactionTable.businessDate
                                where
                                    transactionTable.store == storeTable.StoreNumber &&
                                    transactionTable.entryStatus != RetailEntryStatus::Voided &&
                                    transactionTable.entryStatus != RetailEntryStatus::Training &&
                                    ! transactionTable.statementId
                            {
                                rboStatementCalculate = new RetailStatementCalculate();
                                rboStatementCalculate.parmStoreId(storeTable.StoreNumber);
                                rboStatementCalculate.parmStaffId(transactionTable.staff);
                                rboStatementCalculate.parmBusinessDate(transactionTable.businessDate);
                                this.runScheduleJob(rboStatementCalculate);
                            }
                        }
                        else
                        {
                            while select staff from transactionTable
                                group by transactionTable.staff
                                where
                                    transactionTable.store == storeTable.StoreNumber &&
                                    transactionTable.entryStatus != RetailEntryStatus::Voided &&
                                    transactionTable.entryStatus != RetailEntryStatus::Training &&
                                    ! transactionTable.statementId
                            {
                                rboStatementCalculate = new RetailStatementCalculate();
                                rboStatementCalculate.parmStoreId(storeTable.StoreNumber);
                                rboStatementCalculate.parmStaffId(staffTable.staffId);
                                this.runScheduleJob(rboStatementCalculate);
                            }
                        }
                        break;

                    case RetailStaffTerminalTotal::Terminal:

                        // Create a separate statement per terminal that belongs to the selected store.

                        if (storeTable.oneStatementPerDay)
                        {
                            // Group by businessDate if oneStatementPerDay is set on the store
                            while select terminal, businessDate from transactionTable
                                group by transactionTable.terminal, transactionTable.businessDate
                                where
                                    transactionTable.store == storeTable.StoreNumber &&
                                    transactionTable.entryStatus != RetailEntryStatus::Voided &&
                                    transactionTable.entryStatus != RetailEntryStatus::Training &&
                                    ! transactionTable.statementId
                            {
                                rboStatementCalculate = new RetailStatementCalculate();
                                rboStatementCalculate.parmStoreId(storeTable.StoreNumber);
                                rboStatementCalculate.parmTerminalId(terminalTable.terminalId);
                                rboStatementCalculate.parmBusinessDate(transactionTable.businessDate);
                                this.runScheduleJob(rboStatementCalculate);
                            }
                        }
                        else
                        {
                            while select terminal from transactionTable
                                group by transactionTable.terminal
                                where
                                    transactionTable.store == storeTable.StoreNumber &&
                                    transactionTable.entryStatus != RetailEntryStatus::Voided &&
                                    transactionTable.entryStatus != RetailEntryStatus::Training &&
                                    ! transactionTable.statementId
                            {
                                rboStatementCalculate = new RetailStatementCalculate();
                                rboStatementCalculate.parmStoreId(storeTable.StoreNumber);
                                rboStatementCalculate.parmTerminalId(terminalTable.terminalId);
                                this.runScheduleJob(rboStatementCalculate);
                            }
                        }

                        break;
                }
            }
            else if (storeTable.statementMethod == RetailStaffTerminalTotal::Shift)
            {                
                if (storeTable.separateStmtPerStaffTerminal && !storeTable.oneStatementPerDay)
                {
                    // Create a separate statement per batch/shift that belongs to the selected store.
                    while select StoreId, BatchId, TerminalId from posBatchTable
                               where posBatchTable.StoreId == storeTable.StoreNumber
                                  && !posBatchTable.Posted
                    {
                        rboStatementCalculate = new RetailStatementCalculate();
                        rboStatementCalculate.parmStoreId(storeTable.StoreNumber);
                        rboStatementCalculate.parmUniqueShiftId(RetailStatementLine::makeUniqueShiftId(posBatchTable.TerminalId, posBatchTable.BatchID));
                        this.runScheduleJob(rboStatementCalculate);
                    }
                }
                else
                {
                    // Create one statement for all shifts that belongs to the selected store.
                    while select businessDate from transactionTable
                        group by transactionTable.businessDate
                        where
                            transactionTable.store == storeTable.StoreNumber &&
                            !transactionTable.statementId &&
                            transactionTable.entryStatus != RetailEntryStatus::Voided &&
                            transactionTable.entryStatus != RetailEntryStatus::Training &&
                            transactionTable.BatchID != 0
                    {
                        rboStatementCalculate = new RetailStatementCalculate();
                        rboStatementCalculate.parmStoreId(storeTable.StoreNumber);
                        rboStatementCalculate.parmBusinessDate(transactionTable.businessDate);
                        this.runScheduleJob(rboStatementCalculate);
                    }
                }
            }
            else
            {
                // The statement-method is 'Total'

                // Group by businessDate if oneStatementPerDay is set on the store
                if (storeTable.oneStatementPerDay)
                {
                    while select businessDate from transactionTable
                        group by transactionTable.businessDate
                        where
                            transactionTable.store == storeTable.StoreNumber &&
                            transactionTable.entryStatus != RetailEntryStatus::Voided &&
                            transactionTable.entryStatus != RetailEntryStatus::Training &&
                            ! transactionTable.statementId
                    {
                        rboStatementCalculate = new RetailStatementCalculate();
                        rboStatementCalculate.parmStoreId(storeTable.StoreNumber);
                        rboStatementCalculate.parmBusinessDate(transactionTable.businessDate);
                        this.runScheduleJob(rboStatementCalculate);
                    }
                }
                else
                {
                    // create one statement with all transactions.
                    rboStatementCalculate = new RetailStatementCalculate();
                    rboStatementCalculate.parmStoreId(storeTable.StoreNumber);
                    this.runScheduleJob(rboStatementCalculate);
                }
            }
        }

        if (batchHeader)
        {
            RetailStatementBatchHeaderHelper::save(batchHeader, this.parmCurrentBatch().BatchJobId);
        }

        Microsoft.Dynamics.Retail.Tracing.RetailAXTraceProvider::EventWriteRAXStatementCreateMultiEnd(0, "", "", "", 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runScheduleJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedule the batch job.
    /// </summary>
    /// <param name="_rboStatementCalculate">
    /// The current instance of the <c>RetailStatementCalculate</c> class.
    /// </param>
    /// <remarks>
    /// Adds the record to the batch job by setting the properties.
    /// </remarks>
    void runScheduleJob(RetailStatementCalculate _rboStatementCalculate)
    {
        // If the flag to suppress obsolete errors is not set, then throw an error.
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());

        if (this.isInBatch())
        {
            // Schedule for later run
            if (!batchHeader)
            {
                batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            }

            _rboStatementCalculate.parmInBatch(true);
            _rboStatementCalculate.batchInfo().parmCaption(
                strfmt("@RET5021",
                    _rboStatementCalculate.parmStoreId(),
                    _rboStatementCalculate.parmStaffId() ? _rboStatementCalculate.parmStaffId() : 'all',
                    _rboStatementCalculate.parmTerminalId() ? _rboStatementCalculate.parmTerminalId() : 'all'));

            batchHeader.addRuntimeTask(_rboStatementCalculate, this.parmCurrentBatch().RecId);

            // Need make the jobs critical to enable monitoring.
            batchHeader.parmCritical(NoYes::Yes);
            batchHeader.parmMonitoringCategory(BatchMonitoringCategory::RetailStatementCalculate_Multi);
            RetailStatementBatchHeaderHelper::save(batchHeader, this.parmCurrentBatch().BatchJobId, _rboStatementCalculate.statementTable().statementId);
        }
        else
        {
            // Run right away
            _rboStatementCalculate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version     = conpeek(packedClass,1);

        // If the flag to suppress obsolete errors is not set, then throw an error.
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                if (packedOMUnits)
                {
                    selectedOMInternalOrgRecIds = Set::create(packedOMUnits);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@RET3863";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        // If the flag to suppress obsolete errors is not set, then throw an error.
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());
        
        RetailStatementCalculate_Multi retailStatementCalculate_Multi  = new RetailStatementCalculate_Multi();

        if (RetailEodStatementFeatureHelper::isNewEodEnabled())
        {
            str dictMenuLabel = "@Retail:RetailEodRetailCalculateBatchLabel";

            // Your system is configured to use the new statement posting process. Please use the menu item "Calculate statements in batch" to execute using the new process.
            throw error (strFmt("@Retail:RetailEodKeyEnabledMenuItemError", dictMenuLabel));
        }

        if (retailStatementCalculate_Multi.prompt())
        {
            RetailStatementCalculate_Multi::runServer(retailStatementCalculate_Multi.pack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is executed in the server which calls the method <c>run</c> to execute the actual process of creating statement for a particular store.
    /// </summary>
    /// <param name="_packedRetailStatementCalculateMulti">
    /// A container which holds the values entered in the prompt.
    /// </param>
    static void runServer(container _packedRetailStatementCalculateMulti)
    {
        // If the flag to suppress obsolete errors is not set, then throw an error.
        RetailStatementFeatureControl::checkAndThrowIfLegacyObsoleteErrorsEnabled(funcName());
        
        RetailStatementCalculate_Multi  rboStatementCalculate_Multi = new RetailStatementCalculate_Multi();

        rboStatementCalculate_Multi.unpack(_packedRetailStatementCalculateMulti);
        rboStatementCalculate_Multi.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>