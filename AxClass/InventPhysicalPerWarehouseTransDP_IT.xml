<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPhysicalPerWarehouseTransDP_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventPhysicalPerWarehouseTransDP_IT</c> class is the Report Data Provider class for the
/// <c>InventPhysicalPerWarehouseTrans_IT</c> report.
/// </summary>
/// <remarks>
/// This section contains declaration of variables that will be used through out the class.
/// </remarks>
[
    SRSReportQuery              (queryStr(InventPhysicalPerWarehouseTrans_IT)),
    SRSReportParameterAttribute (classStr(InventPhysPerWarehouseTransCtrt_IT))
]
public class InventPhysicalPerWarehouseTransDP_IT extends SRSReportDataProviderPreProcessTempDB
{
    boolean                                 groupByWarehouse;
    InventTransOrigin                       inventTransOrigin;
    InventTrans                             inventTrans;
    InventDim                               inventDim;
    Query                                   reportQuery;
    InventPhysicalPerWarehouseTransTmp_IT   inventPhysicalPerWarehouseTransTmp_IT;

    const str Empty = '';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes
        super();
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoIT, GlobalizationConstants::FeatureReferenceIT00011] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionsSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether any value is given to the ranges of the <c>InventDim</c> table in the query.
    /// </summary>
    /// <param name="_query">
    /// The query object that is passed from the <c>processReport</c> method.
    /// </param>
    /// <returns>
    /// true if the values are specified in the range; otherwise, false.
    /// </returns>
    private boolean dimensionsSelected(Query _query)
    {
        Counter                 i;

        QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(InventDim));

        for (i = 1; i <= qbds.rangeCount(); i++)
        {
            if (qbds.range(i).value())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventPhysicalPerWarehouseTransTmp_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the <c>InventPhysicalPerWarehouseTransTmp_IT</c> temporary table and returns a data table
    /// to the calling method.
    /// </summary>
    /// <returns>
    /// The required report data from the temporary table.
    /// </returns>
    [SRSReportDataSet(tableStr(InventPhysicalPerWarehouseTransTmp_IT))]
    public InventPhysicalPerWarehouseTransTmp_IT getInventPhysicalPerWarehouseTransTmp_IT()
    {
        select inventPhysicalPerWarehouseTransTmp_IT;
        return inventPhysicalPerWarehouseTransTmp_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the  <c> InventPhysicalPerWarehouseTransTmp_IT </c> temporary table.
    /// </summary>
    private void insertTmpTable()
    {
        inventPhysicalPerWarehouseTransTmp_IT.DatePhysical              = inventTrans.DatePhysical;
        inventPhysicalPerWarehouseTransTmp_IT.VoucherPhysical           = inventTrans.VoucherPhysical;
        inventPhysicalPerWarehouseTransTmp_IT.ItemId                    = inventTransOrigin.ItemId;
        inventPhysicalPerWarehouseTransTmp_IT.ReferenceCategory         = inventTransOrigin.ReferenceCategory;
        inventPhysicalPerWarehouseTransTmp_IT.ReferenceId               = inventTransOrigin.ReferenceId;
        inventPhysicalPerWarehouseTransTmp_IT.QtyReceived               = (inventTrans.StatusReceipt)? inventTrans.Qty : 0;
        inventPhysicalPerWarehouseTransTmp_IT.QtyIssued                 = (inventTrans.StatusIssue)? inventTrans.Qty : 0;
        inventPhysicalPerWarehouseTransTmp_IT.SourceDestinationType     = this.sourceDestinationType();
        inventPhysicalPerWarehouseTransTmp_IT.SourceDestinationNo       = this.sourceDestinationNo();
        inventPhysicalPerWarehouseTransTmp_IT.InventDimFieldsMap::initAllDimensionsFrom(inventDim);

        inventPhysicalPerWarehouseTransTmp_IT.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by  at runtime.
    /// This method will compute data and populate the data tables that will be returned to .
    /// </remarks>
    public void processReport()
    {
        QueryBuildDataSource    qbds;

        InventPhysPerWarehouseTransCtrt_IT inventPhysPerWarehouseTransCtrt_IT = this.parmDataContract() as InventPhysPerWarehouseTransCtrt_IT;

        groupByWarehouse = inventPhysPerWarehouseTransCtrt_IT.parmGroupByWarehouse();

        reportQuery = this.parmQuery();
        if (groupByWarehouse)
        {
            qbds = reportQuery.dataSourceTable(tableNum(InventDim));
            qbds.sortClear();
            qbds.addOrderByField(fieldNum(InventDim, InventLocationId));
        }

        qbds = reportQuery.dataSourceTable(tableNum(InventTrans));
        QueryBuildRange qbr = qbds.findRange(fieldNum(InventTrans, DatePhysical));

        if (!qbr)
        {
            qbr = qbds.addRange(fieldNum(InventTrans, DatePhysical));
        }

        if (!qbr.value())
        {
            qbr.value('!..');
        }
        qbds.sortClear();
        qbds.addOrderByField(fieldNum(InventTrans, DatePhysical));

        qbds = reportQuery.dataSourceTable(tableNum(InventTransOrigin));
        qbds.sortClear();
        qbds.addOrderByField(fieldNum(InventTransOrigin, ItemId));

        if (!groupByWarehouse)
        {
            qbds = reportQuery.dataSourceTable(tableNum(InventDim));
            qbds.sortClear();
            qbds.addOrderByField(fieldNum(InventDim, InventLocationId));
        }

        qbds = reportQuery.dataSourceTable(tableNum(InventTable));
        qbds.sortClear();
        qbds.addRange(fieldNum(InventTable, ItemType)).value('!' + enum2Value(ItemType::Service));

        str inventTransTypes = '!' + enum2Value(InventTransType::SummedUp) +
                               ',!' + enum2Value(InventTransType::WMSOrder) +
                               ',!' + enum2Value(InventTransType::Asset) +
                               ',!' + enum2Value(InventTransType::ProdRelease_RU) +
                               ',!' + enum2Value(InventTransType::FixedAssets_RU) +
                               ',!' + enum2Value(InventTransType::Assembling_JP) +
                               ',!' + enum2Value(InventTransType::WHSWork) +
                               ',!' + enum2Value(InventTransType::WHSQuarantine) +
                               ',!' + enum2Value(InventTransType::WHSContainer);

        if (!groupByWarehouse && !this.dimensionsSelected(reportQuery))
        {
            inventTransTypes += ',!' + enum2Value(InventTransType::InventTransfer) +
                                ',!' + enum2Value(InventTransType::QuarantineOrder);
        }

        qbds = reportQuery.dataSourceTable(tableNum(InventTransOrigin));

        qbds.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(inventTransTypes);

        QueryRun queryRun = new QueryRun(reportQuery);
        UserConnection userConnection = this.parmUserConnection();

        if (userConnection)
        {
            inventPhysicalPerWarehouseTransTmp_IT.setConnection(userConnection);
        }

        while (queryRun.next())
        {
            inventTransOrigin = queryRun.get(tableNum(InventTransOrigin));
            inventTrans       = queryRun.get(tableNum(InventTrans));
            inventDim         = queryRun.get(tableNum(InventDim));

            this.insertTmpTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDestinationNo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>SourceDestinationNo</c> field in the
    /// <c>InventPhysicalPerWarehouseTransTmp_IT</c> temporary table.
    /// </summary>
    /// <returns>
    /// A value that is based on the provided <c>ReferenceCategory</c> field in the
    /// <c>InventTransOrigin</c> table.
    /// </returns>
    private str 20 sourceDestinationNo()
    {
        InventTrans inventTransSelect;

        switch (inventTransOrigin.ReferenceCategory)
        {
            case InventTransType::Sales, InventTransType::Purch :
                return inventTransOrigin.custVendAC();

            case InventTransType::InventTransfer, InventTransType::WMSTransport :
                select firstonly inventTransSelect
                    where inventTransSelect.InventTransOrigin == inventTransOrigin.RecId &&
                          ( (inventTransSelect.Qty < 0 && inventTrans.Qty > 0) ||
                            (inventTransSelect.Qty > 0 && inventTrans.Qty < 0));

                return  inventTransSelect.InventDimId;

            case InventTransType::QuarantineOrder :
                select firstonly InventDimId
                    from inventTransSelect
                    where inventTransSelect.InventTransOrigin == inventTransOrigin.RecId &&
                          ( (inventTransSelect.Qty < 0 && inventTrans.Qty > 0) ||
                            (inventTransSelect.Qty > 0 && inventTrans.Qty < 0));

                return InventDim::find(inventTransSelect.InventDimId).InventLocationId;

            case InventTransType::ProdLine :
                return InventTransOriginProdTable::prodTable(inventTransOrigin.RecId).ItemId;

            case InventTransType::BOMLine :
                return inventTransOrigin.ItemId;

            case InventTransType::Production, InventTransType::BOMMain :
                return inventDim.InventLocationId;

            case InventTransType::Project :
                return inventTrans.ProjId;

            case InventTransType::TransferOrderShip, InventTransType::TransferOrderReceive, InventTransType::KanbanJobTransferIssue, InventTransType::KanbanJobTransferReceipt :
                return num2Str(inventTrans.Qty, 7, 6, DecimalSeparator::Auto, ThousandSeparator::Auto);
        }

        return Empty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDestinationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>SourceDestinationType</c> field in the
    /// <c>InventPhysicalPerWarehouseTransTmp_IT</c> temporary table.
    /// </summary>
    /// <returns>
    /// A String that is based on the provided <c>ReferenceCategory</c> field in the
    /// <c>InventTransOrigin</c> table.
    /// </returns>
    private str 20 sourceDestinationType()
    {
        switch (inventTransOrigin.ReferenceCategory)
        {
            case InventTransType::Sales :
                return "@SYS24704";

            case InventTransType::Purch :
                return "@SYS8079";

            case InventTransType::Production, InventTransType::QuarantineOrder, InventTransType::BOMMain :
                return "@SYS6437";

            case InventTransType::ProdLine, InventTransType::BOMLine :
                return "@SYS14428";

            case InventTransType::InventTransfer, InventTransType::WMSTransport :
                return "@SYS5951";

            case InventTransType::Project :
                return "@SYS4534";

            case InventTransType::TransferOrderShip, InventTransType::KanbanJobTransferIssue :
                return "@SYS15242";

            case InventTransType::TransferOrderReceive, InventTransType::KanbanJobTransferReceipt :
                return "@SYS16476";
        }

        return Empty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>