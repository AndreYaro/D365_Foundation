<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCostOutsourcing</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanCostOutsourcing</c> class encapsulates logic for creating lean outsourcing cost
///    transactions.
/// </summary>
/// <remarks>
///    The direct outsourcing cost transactions are created in the <c>ProdRouteTrans</c> table.
/// </remarks>
abstract class LeanCostOutsourcing
{
    LeanCostingFacadeBase       leanCostingFacade;
    LeanConversionCostUpd       leanConversionCostUpd;
    LedgerVoucher               ledgerVoucher;

    RefRecId                    productionFlowReferenceRecId;
    LeanServiceItemId           serviceItemId;
    InventDimId                 serviceInventDimId;
    Qty                         quantity;
    Price                       price;
    RefRecId                    originRefRecId;
    DimensionDefault            defaultDimension;
    SourceDocumentLineRefRecId  sourceDocumentLineRefRecId;
    #ISOCountryRegionCodes
    boolean                     countryRegion_RU;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDirectOutsourcingConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Registers an outsourcing cost transaction that is used to calculate indirect cost on it.
    /// </summary>
    /// <param name="_inventSiteId">
    ///    The invent site ID.
    /// </param>
    /// <param name="_prodRouteTrans">
    ///    The outsourcing cost transaction.
    /// </param>
    /// <remarks>
    ///    This method delegates to a similar method in the <c>LeanConversionCostUpd</c> class.
    /// </remarks>
    protected void addDirectOutsourcingConsumption(
        InventSiteId        _inventSiteId,
        ProdRouteTrans      _prodRouteTrans
        )
    {
        leanConversionCostUpd.addProdRouteTransConsumption(_inventSiteId, _prodRouteTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addIndirectCostPhysicalPosting</Name>
				<Source><![CDATA[
    protected void addIndirectCostPhysicalPosting(
        LedgerVoucher       _ledgerVoucher,
        ProdIndirectTrans   _prodIndirectTrans)
    {
        CurrencyCode currencyCode = CompanyInfoHelper::standardCurrency();

        AmountMST indirectCostAmount = CurrencyExchangeHelper::amount(_prodIndirectTrans.Amount);

        LedgerVoucherObject ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();
        CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());

        LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucherObject,
                    _prodIndirectTrans.PostingEstimatedIndirectAbsorption,
                    _prodIndirectTrans.EstimatedIndirectAbsorpLedgerDimension,
                    currencyCode,
                    -indirectCostAmount,
                    exchangeRateHelper);

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucherObject,
                    _prodIndirectTrans.PostingEstimatedIndirectAbsorptionOffset,
                    _prodIndirectTrans.EstimIndirectAbsorpOffsetLedgerDimension,
                    currencyCode,
                    indirectCostAmount,
                    exchangeRateHelper);

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);

        _prodIndirectTrans.VoucherEstimation = ledgerVoucher.lastVoucher();
        _prodIndirectTrans.DateEstimation = ledgerVoucher.lastTransDate();
        _prodIndirectTrans.Posted = NoYes::Yes;

        // <GEERU>
        if (countryRegion_RU)
        {
            _ledgerVoucher.bondLast2_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndPostIndirectCostReversal</Name>
				<Source><![CDATA[
    protected void createAndPostIndirectCostReversal(
        ProdRouteTrans _originalProdRouteTrans,
        Percent        _percentageOfIndirectCostToReverse)
    {
        ProdIndirectTrans   prodIndirectTrans, newProdIndirectTrans;

        ttsbegin;

        // Reversal records will be created per cost group because indirect cost is recorded per cost group
        while select prodIndirectTrans
        where prodIndirectTrans.TransRefId == _originalProdRouteTrans.TransRefId
            && prodIndirectTrans.TransRefType == _originalProdRouteTrans.TransRefType
            && prodIndirectTrans.VoucherEstimation == _originalProdRouteTrans.VoucherWIP
            && prodIndirectTrans.DateEstimation == _originalProdRouteTrans.DateWIP
        {
            newProdIndirectTrans.data(prodIndirectTrans);
            Percent proratingPercentage = (_originalProdRouteTrans.Amount / prodIndirectTrans.Basis);
            newProdIndirectTrans.Amount = - CurrencyExchangeHelper::amount(prodIndirectTrans.Amount * _percentageOfIndirectCostToReverse * proratingPercentage);
            newProdIndirectTrans.Basis = - CurrencyExchangeHelper::amount(prodIndirectTrans.Basis * _percentageOfIndirectCostToReverse * proratingPercentage);

            // Is it possible that the matched record is already updated by eop back-flush.
            // If yes, we need to reset the reversal transaction to a not "back-flushed" state
            // by setting the calculated field to "No". This will ensure that the indirect cost record will
            // be picked up by the next eop back-flush job.
            newProdIndirectTrans.Calculated = NoYes::No;
            newProdIndirectTrans.VoucherCalc = '';
            newProdIndirectTrans.DateCalc = dateNull();

            if (prodIndirectTrans.Posted)
            {
                // We only make a physical posting because the financial posting will be done by
                // the next end of period back-flush job.
                this.addIndirectCostPhysicalPosting(ledgerVoucher, newProdIndirectTrans);
            }

            newProdIndirectTrans.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDirectOutsourcingCostReversal</Name>
				<Source><![CDATA[
    protected ProdRouteTrans createDirectOutsourcingCostReversal(
        ProdRouteTrans  _originalProdRouteTrans,
        Qty             _qtyToReverse,
        systemSequence  _systemSequence = null)
    {
        ProdRouteTrans reversalTransaction;

        ttsbegin;
        reversalTransaction.data(_originalProdRouteTrans);
        if (_systemSequence)
        {
            reversalTransaction.RecId = _systemSequence.reserveValues(1, tableNum(ProdRouteTrans));
        }
        reversalTransaction.QtyGood = -_qtyToReverse;
        reversalTransaction.Amount = CurrencyExchangeHelper::amount(reversalTransaction.QtyGood * reversalTransaction.QtyPrice);

        // Reversal transactions should be created with current voucher
        reversalTransaction.VoucherWIP = ledgerVoucher.lastVoucher();
        reversalTransaction.DateWIP = ledgerVoucher.lastTransDate();

        // Is it possible that the matched record is already updated by eop back-flush.
        // If yes, we need to reset the reversal transaction to a not "back-flushed" state
        // by setting the calculated field to "No". This will ensure that the record will
        // be picked up by the next eop back-flush job.
        reversalTransaction.Calculated = NoYes::No;
        reversalTransaction.VoucherCalc = '';
        reversalTransaction.DateCalc = dateNull();

        reversalTransaction.insert();

        this.createOutsourcingOriginRelation(reversalTransaction);
        ttscommit;

        return reversalTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOutsourcingCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates outsourcing cost transactions.
    /// </summary>
    /// <param name="_systemSequence">
    ///    The system sequence that is used for getting a record ID for transactions.
    /// </param>
    /// <param name="_newTransactionsList">
    ///    The transactions list to which to add the new transactions.
    /// </param>
    /// <param name="_inventSiteId">
    ///    The invent site ID.
    /// </param>
    /// <remarks>
    ///    Records are not inserted to the database, but added to the transaction list.
    /// </remarks>
    public abstract void createOutsourcingCost(
        systemSequence      _systemSequence,
        RecordInsertList    _newTransactionsList,
        InventSiteId        _inventSiteId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOutsourcingOriginRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the corresponding relationship record for the outsourcing cost transaction.
    /// </summary>
    /// <param name="_outsourcingProdRouteTrans">
    ///    The outsourcing cost transaction.
    /// </param>
    /// <returns>
    ///    The corresponding relationship record.
    /// </returns>
    public abstract Common createOutsourcingOriginRelation(
        ProdRouteTrans      _outsourcingProdRouteTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdRouteTransOutsourcing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new record in the <c>ProdRouteTrans</c> table to store the outsourcing cost data.
    /// </summary>
    /// <param name="_systemSequence">
    ///    The sequence to use for getting the record ID.
    /// </param>
    /// <param name="_productionFlowReferenceRecId">
    ///    The production flow reference.
    /// </param>
    /// <param name="_serviceItemId">
    ///    The service item ID.
    /// </param>
    /// <param name="_inventDimId">
    ///    The invent dimension ID.
    /// </param>
    /// <param name="_defaultDimension">
    ///    The default dimension.
    /// </param>
    /// <param name="_transactionQuantity">
    ///    The transaction quantity.
    /// </param>
    /// <param name="_transactionPrice">
    ///    The transaction price.
    /// </param>
    /// <param name="_transactionAmount">
    ///    The transaction amount.
    /// </param>
    /// <returns>
    ///    A newly created record in the <c>ProdRouteTrans</c> table.
    /// </returns>
    protected ProdRouteTrans createProdRouteTransOutsourcing(
        systemSequence      _systemSequence,
        RefRecId            _productionFlowReferenceRecId,
        LeanServiceItemId   _serviceItemId,
        InventDimId         _inventDimId,
        DimensionDefault    _defaultDimension,
        Qty                 _transactionQuantity,
        Price               _transactionPrice,
        Amount              _transactionAmount)
    {
        ProdRouteTrans          prodRouteTrans;

        prodRouteTrans.RecId = _systemSequence.reserveValues(1, tableNum(ProdRouteTrans));

        // Outsourced item
        prodRouteTrans.ServiceItemId = _serviceItemId;
        prodRouteTrans.ServiceInventDimId = _inventDimId;

        // Default dimension (taken from purchase order line)
        prodRouteTrans.DefaultDimension = _defaultDimension;

        // Link to production flow
        prodRouteTrans.TransRefId   = LeanProductionFlowReference::find(_productionFlowReferenceRecId).planReference().PlanName;
        prodRouteTrans.TransRefType = ProdTransRefType::ProductionFlow;

        // Default values
        prodRouteTrans.JobType      = RouteJobType::Process;
        prodRouteTrans.TransType    = ProdRouteTransType::Qty;
        prodRouteTrans.ExecutedPct  = 100;

        // Voucher and TransDate
        prodRouteTrans.DateWIP      = ledgerVoucher.lastTransDate();
        prodRouteTrans.VoucherWIP   = ledgerVoucher.lastVoucher();

        // Set the accounts
        prodRouteTrans.PostingWIPValuation = LedgerPostingType::ProdLeanWIPServiceReceipt;
        prodRouteTrans.wipValuationLedgerDimension = this.getReceiptAccount(
            _productionFlowReferenceRecId,
            _serviceItemId,
            prodRouteTrans.DefaultDimension);

        // Cost
        prodRouteTrans.QtyGood = _transactionQuantity;
        prodRouteTrans.QtyPrice = _transactionPrice;
        prodRouteTrans.Amount = _transactionAmount;

        return prodRouteTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostAmount</Name>
				<Source><![CDATA[
    protected CostAmount getCostAmount()
    {
        return InventCostInputAmount::getInputAmountFromDistributionForAccount(
                    sourceDocumentLineRefRecId,
                    this.getReceiptAccount(),
                    AccountingDistributionReferenceRole::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceiptAccount</Name>
				<Source><![CDATA[
    protected LedgerDimensionAccount getReceiptAccount(
        RefRecId            _productionFlowReferenceRecId = productionFlowReferenceRecId,
        LeanServiceItemId   _serviceItemId = serviceItemId,
        DimensionDefault    _defaultDimension = defaultDimension)
    {
        ProdGroup prodGroup = leanCostingFacade.getProductionGroup(_productionFlowReferenceRecId);

        if (prodGroup &&
            (prodGroup.LeanWIPServiceReceiptLedgerDimension
            || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup))
        {
            return LedgerDimensionFacade::serviceCreateLedgerDimension(prodGroup.LeanWIPServiceReceiptLedgerDimension, _defaultDimension);
        }
        else
        {
            return LedgerDimensionFacade::serviceCreateLedgerDimension(InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(InventAccountType::ProdLeanWIPServiceReceipt, _serviceItemId)), _defaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">An inventory account type.</param>
    /// <param name="_itemId">An item Id.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(
        InventAccountType   _inventAccountType,
        ItemId              _itemId)
    {
        return InventPostingItemLedgerDimensionParameters::newFromParameters(_inventAccountType, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountingDifferent</Name>
				<Source><![CDATA[
    protected boolean isAccountingDifferent(ProdRouteTrans  _matchingProdRouteTrans)
    {
        // Add here any other accounting conditions that should trigger a reversing of the matching record
        return this.getReceiptAccount() != _matchingProdRouteTrans.wipValuationLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRecordCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements logic that determines whether the outsourcing cost is recorded.
    /// </summary>
    /// <returns>
    ///    true if the outsourcing cost is recorded; otherwise, false.
    /// </returns>
    public abstract boolean mustRecordCost()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension(DimensionDefault _defaultDimension = defaultDimension)
    {
        defaultDimension = _defaultDimension;

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanConversionCostUpd</Name>
				<Source><![CDATA[
    public LeanConversionCostUpd parmLeanConversionCostUpd(LeanConversionCostUpd _leanConversionCostUpd = leanConversionCostUpd)
    {
        leanConversionCostUpd = _leanConversionCostUpd;

        return leanConversionCostUpd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanCostingFacade</Name>
				<Source><![CDATA[
    public LeanCostingFacadeBase parmLeanCostingFacade(LeanCostingFacadeBase _leanCostingFacade = leanCostingFacade)
    {
        leanCostingFacade = _leanCostingFacade;

        return leanCostingFacade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucher</Name>
				<Source><![CDATA[
    public LedgerVoucher parmLedgerVoucher(LedgerVoucher _ledgerVoucher = ledgerVoucher)
    {
        ledgerVoucher = _ledgerVoucher;

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginRefRecId</Name>
				<Source><![CDATA[
    public RefRecId parmOriginRefRecId(RefRecId _originRefRecId = originRefRecId)
    {
        originRefRecId = _originRefRecId;

        return originRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrice</Name>
				<Source><![CDATA[
    public Price parmPrice(Price _price = price)
    {
        price = _price;

        return price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductionFlowReferenceRecId</Name>
				<Source><![CDATA[
    public RefRecId parmProductionFlowReferenceRecId(RefRecId _productionFlowReferenceRecId = productionFlowReferenceRecId)
    {
        productionFlowReferenceRecId = _productionFlowReferenceRecId;

        return productionFlowReferenceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    public Qty parmQuantity(Qty _quantity = quantity)
    {
        quantity = _quantity;

        return quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmServiceInventDimId(InventDimId _serviceInventDimId = serviceInventDimId)
    {
        serviceInventDimId = _serviceInventDimId;

        return serviceInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceItemId</Name>
				<Source><![CDATA[
    public LeanServiceItemId parmServiceItemId(LeanServiceItemId _serviceItemId = serviceItemId)
    {
        serviceItemId = _serviceItemId;

        return serviceItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLineRefRecId</Name>
				<Source><![CDATA[
    public SourceDocumentLineRefRecId parmSourceDocumentLineRefRecId(SourceDocumentLineRefRecId _sourceDocumentLineRefRecId = sourceDocumentLineRefRecId)
    {
        sourceDocumentLineRefRecId = _sourceDocumentLineRefRecId;

        return sourceDocumentLineRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates instances that are based on the outsourcing cost transaction origin.
    /// </summary>
    /// <param name="_outsourcingCostOrigin">
    ///    The outsourcing cost origin code.
    /// </param>
    /// <param name="_leanConversionCostUpd">
    ///    A reference to the <c>LeanConversionCostUpd</c> object.
    /// </param>
    /// <param name="_leanCostingFacade">
    ///    The <c>LeanCostingFacade</c> reference.
    /// </param>
    /// <param name="_ledgerVoucher">
    ///    The <c>ledgerVoucher</c> reference.
    /// </param>
    /// <returns>
    ///    A new instance that is based on the origin.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    An invalid origin is specified.
    /// </exception>
    public static LeanCostOutsourcing constructForOrigin(
        TableId                 _outsourcingCostOrigin,
        LeanConversionCostUpd   _leanConversionCostUpd,
        LeanCostingFacadeBase   _leanCostingFacade,
        LedgerVoucher           _ledgerVoucher)
    {
        LeanCostOutsourcing     newInstance;
        switch (_outsourcingCostOrigin)
        {
            case tableNum(VendPackingSlipTrans):
                newInstance = new LeanCostOutsourcingPackingSlip();
                break;
            case tableNum(VendInvoiceInfoLine):
                newInstance = new LeanCostOutsourcingVendInvoice();
                break;
            default:
                throw error("@SYS334969");
        }

        newInstance.parmLeanConversionCostUpd(_leanConversionCostUpd);
        newInstance.parmLeanCostingFacade(_leanCostingFacade);
        newInstance.parmLedgerVoucher(_ledgerVoucher);

        return newInstance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>