<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>fbSpedFile_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>fbSpedFile_BR</c> class represents a sped file.
/// </summary>
class fbSpedFile_BR
{
    protected Map             mapOfFileParentRecords;
    protected Map             mapOfRecordTotals;
    protected Map             mapOfBlockTotals;
    protected int64           totalRecords;
    private boolean           skipOpeningRecords;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSkipOpeningRecords</Name>
				<Source><![CDATA[
    public boolean parmSkipOpeningRecords(boolean _skipOpeningRecords = skipOpeningRecords)
    {
        skipOpeningRecords = _skipOpeningRecords;

        return skipOpeningRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addChildRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a child record.
    /// </summary>
    /// <param name="_parentRecord">
    ///     An instance of  <c>FBSpedRecord_BR</c> representing the parent record.
    /// </param>
    /// <param name="_childRecord">
    ///     An instance of  <c>FBSpedRecord_BR</c> representing the child record to be added.
    /// </param>
    public void addChildRecord(FBSpedRecord_BR _parentRecord, FBSpedRecord_BR _childRecord)
    {
        FBSpedRecord_BR                     topmostParentRecord;
        FBSpedFileRecordIdentification_BR   recordIdentification;
        FBSpedFileParentRecord_BR           spedFileParentRecord;

        _childRecord.parmParentRecord(_parentRecord);

        // Finds the root parent so that we can write to its file
        topmostParentRecord = _childRecord.getTopmostParentRecord();

        recordIdentification = topmostParentRecord.type();

        if (mapOfFileParentRecords.exists(recordIdentification))
        {
            spedFileParentRecord = mapOfFileParentRecords.lookup(recordIdentification);
        }
        else
        {
            spedFileParentRecord = new FBSpedFileParentRecord_BR(recordIdentification);
            spedFileParentRecord.openFile();
            mapOfFileParentRecords.insert(recordIdentification, spedFileParentRecord);
        }

        spedFileParentRecord.writeRecord(_childRecord);

        this.incrementTotalRecordsByType(_childRecord.type());
        totalRecords++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a record to the file
    /// </summary>
    /// <param name="_fbSpedRecord">
    ///     The instance of <c>FBSpedRecord_BR</c> to be added to the file.
    /// </param>
    public void addRecord(FBSpedRecord_BR _fbSpedRecord)
    {
        FBSpedFileRecordIdentification_BR   recordIdentification = _fbSpedRecord.type();
        FBSpedFileParentRecord_BR           spedFileParentRecord;

        if (mapOfFileParentRecords.exists(recordIdentification))
        {
            spedFileParentRecord = mapOfFileParentRecords.lookup(recordIdentification);
        }
        else
        {
            spedFileParentRecord = new FBSpedFileParentRecord_BR(recordIdentification);
            spedFileParentRecord.openFile();
            mapOfFileParentRecords.insert(recordIdentification, spedFileParentRecord);
        }

        spedFileParentRecord.writeRecord(_fbSpedRecord);

        this.incrementTotalRecordsByType(recordIdentification);
        totalRecords++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>blocks</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the set of blocks existing in the file.
    /// </summary>
    /// <returns>
    ///     A list of strings where wach string represents a different block existing in the file.
    /// </returns>
    /// <remarks>
    ///     A block is a logical concept here. There is not a class that represents a block. Blocks are simply logical
    ///     groupings of records that are identified by a string of size 1 (e.g 'A', 'C', '9').
    /// </remarks>
    public List blocks()
    {
        List            listOfBlocks = new List(Types::String);
        MapEnumerator   me;

        me = mapOfBlockTotals.getEnumerator();

        while (me.moveNext())
        {
            listOfBlocks.addEnd(me.current());
        }

        return listOfBlocks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractBlockNameFromRecordType</Name>
				<Source><![CDATA[
    private str 1 extractBlockNameFromRecordType(str _recordType)
    {
        return subStr(_recordType, 1, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordNameNormalizedForSorting</Name>
				<Source><![CDATA[
    private FBSpedFileBlockIdentification_BR getRecordNameNormalizedForSorting(FBSpedFileRecordIdentification_BR _recordIdentification)
    {
        FBSpedFileBlockIdentification_BR    blockName = this.extractBlockNameFromRecordType(_recordIdentification);
        FBSpedFileRecordIdentification_BR   normalizedRecordName;

        switch (blockName)
        {
            case '0':
                normalizedRecordName = '0' + _recordIdentification;
                break;
            case '1':
                normalizedRecordName = 'X' + _recordIdentification;
                break;
            case '9':
                normalizedRecordName = 'X' + _recordIdentification;
                break;
            default:
                normalizedRecordName = blockName + _recordIdentification;
                break;
        }

        return normalizedRecordName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementTotalRecordsByBlock</Name>
				<Source><![CDATA[
    private void incrementTotalRecordsByBlock(FBSpedFileBlockIdentification_BR _blockName)
    {
        int64 recordTotal;

        if (mapOfBlockTotals.exists(_blockName))
        {
            recordTotal = mapOfBlockTotals.lookup(_blockName);
        }
        recordTotal++;
        mapOfBlockTotals.insert(_blockName, recordTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementTotalRecordsByType</Name>
				<Source><![CDATA[
    private void incrementTotalRecordsByType(FBSpedFileRecordIdentification_BR _recordType)
    {
        int64 recordTotal;

        if (mapOfRecordTotals.exists(_recordType))
        {
            recordTotal = mapOfRecordTotals.lookup(_recordType);
        }
        recordTotal++;
        mapOfRecordTotals.insert(_recordType, recordTotal);

        this.incrementTotalRecordsByBlock(this.extractBlockNameFromRecordType(_recordType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        mapOfFileParentRecords = new Map(Types::String, Types::Class);
        mapOfRecordTotals = new Map(Types::String, Types::Int64);
        mapOfBlockTotals = new Map(Types::String, Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>records</Name>
				<Source><![CDATA[
    private List records()
    {
        List            listOfRecords = new List(Types::String);
        Set             setOfRecordsSortable = new Set(Types::String);
        MapEnumerator   me;
        SetEnumerator   se;

        me = mapOfFileParentRecords.getEnumerator();

        while (me.moveNext())
        {
            setOfRecordsSortable.add(this.getRecordNameNormalizedForSorting(me.currentKey()));
        }

        se = setOfRecordsSortable.getEnumerator();
        while (se.moveNext())
        {
            listOfRecords.addEnd(subStr(se.current(), 2, strLen(se.current())));
        }

        return listOfRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the set of record types existing in the file.
    /// </summary>
    /// <returns>
    ///     A Set of strings representing the types of records existing in the file.
    /// </returns>
    public Set recordTypes()
    {
        Set             recordTypes;
        MapEnumerator   me;

        recordTypes = new Set(Types::String);

        me = mapOfRecordTotals.getEnumerator();
        while (me.moveNext())
        {
            recordTypes.add(me.currentKey());
        }

        return recordTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the total number of records existing in the file.
    /// </summary>
    /// <returns>
    ///     A integer with the total of records existing in the file.
    /// </returns>
    public int64 totalRecords()
    {
        return totalRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalRecordsInBlock</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the total number of records existing in a given block.
    /// </summary>
    /// <param name="_blockName">
    ///     The identifier of the block (e.g. 'A', 'C', '9').
    /// </param>
    /// <returns>
    ///     An integer indicating the total number of records existing in the given block.
    /// </returns>
    public int64 totalRecordsInBlock(str 1 _blockName)
    {
        int64 totalRecordsInBlock;

        if (mapOfBlockTotals.exists(_blockName))
        {
            totalRecordsInBlock = mapOfBlockTotals.lookup(_blockName);
        }

        return totalRecordsInBlock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalRecordsOfType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the total of records of a given type existing in the file.
    /// </summary>
    /// <param name="_recordType">
    ///     The type of the records to count.
    /// </param>
    /// <returns>
    ///     An integer with the total of records existing in the file for the given record type.
    /// </returns>
    public int64 totalRecordsOfType(FBSpedFileRecordIdentification_BR _recordType)
    {
        int64 totalRecordsOfType;

        if (mapOfRecordTotals.exists(_recordType))
        {
            totalRecordsOfType = mapOfRecordTotals.lookup(_recordType);
        }

        return totalRecordsOfType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeContent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Writes the content to the <c>FBFile_BR</c>.
    /// </summary>
    /// <param name="_fbFile">
    ///     An instance of <c>FBFile_BR</c> representing the file where the content will be written to.
    /// </param>
    public void writeContent(FBFile_BR _fbFile)
    {
        ListEnumerator                      le;
        FBSpedFileRecordIdentification_BR   recordIdentification;
        FBSpedFileBlockIdentification_BR    previousBlock, currentBlock;

        le = this.records().getEnumerator();

        while (le.moveNext())
        {
            recordIdentification = le.current();

            if (!skipOpeningRecords)
            {
                currentBlock = this.extractBlockNameFromRecordType(recordIdentification);

                if (currentBlock != '0')
                {
                    if (previousBlock != currentBlock && this.needOpeningRecordForBlock())
                    {
                        this.writeOpeningRecordForBlock(_fbFile, currentBlock);
                    }
                }
                previousBlock = currentBlock;
            }

            this.writeRecord(_fbFile, recordIdentification);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeOpeningRecordForBlock</Name>
				<Source><![CDATA[
    private void writeOpeningRecordForBlock(FBFile_BR _fbFile, FBSpedFileBlockIdentification_BR _blockIdentification)
    {
        FBSpedRecord_BR blockInitializationRecord = FBSpedRecord_BR::constructEmpty(_blockIdentification + '001');
        boolean         hasMovementInBLock = this.totalRecordsInBlock(_blockIdentification) > 1;

        if (hasMovementInBLock)
        {
            blockInitializationRecord.addFieldNumeric(0);   // has movement for the block
        }
        else
        {
            blockInitializationRecord.addFieldNumeric(1);   // does not have movement for the block
        }

        _fbFile.write(blockInitializationRecord.content());
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecord</Name>
				<Source><![CDATA[
    private void writeRecord(FBFile_BR _fbFile, FBSpedFileRecordIdentification_BR _recordIdentification)
    {
        FBSpedFileParentRecord_BR           spedFileParentRecord;

        if (mapOfFileParentRecords.exists(_recordIdentification))
        {
            spedFileParentRecord = mapOfFileParentRecords.lookup(_recordIdentification);
            spedFileParentRecord.closeFile();

            var fileName = spedFileParentRecord.getFileName();

            using (System.IO.StreamReader reader = new System.IO.StreamReader(fileName, spedFileParentRecord.getEncoding()))
            {
                while (!reader.EndOfStream)
                {
                    System.String line = reader.ReadLine();

                    _fbFile.write(line);
                }
            }

            spedFileParentRecord.deleteFile();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needOpeningRecordForBlock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether opening records are needed like '*001'.
    /// </summary>
    /// <returns>Always true.</returns>
    protected boolean needOpeningRecordForBlock()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>