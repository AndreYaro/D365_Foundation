<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAccountStatementPerCurrencyDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerAccountStatementPerCurrencyDP</c> class is used to handle the business logic that
///    displays data on the <c>LedgerAccountStatementPerCurrency</c> report.
/// </summary>
[SRSReportQueryAttribute(queryStr(LedgerAccountStatementPerCurrency)),
 SRSReportParameterAttribute(classStr(LedgerAccountStatementCurrencyContract))]
class LedgerAccountStatementPerCurrencyDP extends SRSReportDataProviderPreProcessTempDB
{
    LedgerAccountStatementPerCurrencyTmp ledgerAccountStatementPerCurrencyTmp;

    Map generalJournalEntryToAccountNumber; // [GeneralJournalEntry.RecId, AccountNum]

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findOtherAccount</Name>
				<Source><![CDATA[
    private AccountNum findOtherAccount(Voucher _subledgerVoucher, TransDate _accountingDate)
    {
        CustTrans custTrans;

        select firstOnly AccountNum from custTrans
            where custTrans.Voucher == _subledgerVoucher
                && custTrans.TransDate == _accountingDate;

        if (custTrans.AccountNum)
        {
            return custTrans.AccountNum;
        }

        VendTrans vendTrans;

        select firstOnly AccountNum from vendTrans
            where vendTrans.Voucher == _subledgerVoucher
                && vendTrans.TransDate == _accountingDate;

        if (vendTrans.AccountNum)
        {
            return vendTrans.AccountNum;
        }

        ProjTransPosting projTransPosting;

        select firstonly ProjId from projTransPosting
            where projTransPosting.Voucher == _subledgerVoucher &&
                projTransPosting.ProjTransDate == _accountingDate;
        if (projTransPosting.ProjId)
        {
            return projTransPosting.ProjId;
        }

        BankAccountTrans bankAccountTrans;

        select firstonly AccountId from bankAccountTrans
            where bankAccountTrans.Voucher == _subledgerVoucher &&
                bankAccountTrans.TransDate == _accountingDate;
        if (bankAccountTrans.AccountId)
        {
            return bankAccountTrans.AccountId;
        }

        AssetTrans assetTrans;

        select firstOnly AssetId from assetTrans
            where assetTrans.Voucher == _subledgerVoucher
                && assetTrans.TransDate == _accountingDate;

        if (assetTrans.AssetId)
        {
            return assetTrans.AssetId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerAccountStatementPerCurrencyTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects and returns the <c>LedgerAccountStatementPerCurrencyTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The <c> LedgerAccountStatementPerCurrencyTmp </c>  table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(LedgerAccountStatementPerCurrencyTmp))]
    public LedgerAccountStatementPerCurrencyTmp getLedgerAccountStatementPerCurrencyTmp()
    {
        select ledgerAccountStatementPerCurrencyTmp;
        return ledgerAccountStatementPerCurrencyTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsettingLedgerAccount</Name>
				<Source><![CDATA[
    private DimensionDisplayValue getOffsettingLedgerAccount(
        GeneralJournalEntryRecId _generalJournalEntryRecId,
        GeneralJournalAccountEntryRecId _accountEntryOfMainAccountRecId,
        AmountCur _transactionCurrencyAmount)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        DimensionDisplayValue ledgerDimensionDisplay;
        boolean isFirstRecord = true;

        while select TransactionCurrencyAmount, LedgerAccount from generalJournalAccountEntry
            where generalJournalAccountEntry.RecId != _accountEntryOfMainAccountRecId &&
                generalJournalAccountEntry.GeneralJournalEntry == _generalJournalEntryRecId
        {
            if (isFirstRecord)
            {
                ledgerDimensionDisplay = generalJournalAccountEntry.LedgerAccount;
                isFirstRecord = false;
            }

            if (abs(generalJournalAccountEntry.TransactionCurrencyAmount) >= abs(_transactionCurrencyAmount))
            {
                ledgerDimensionDisplay = generalJournalAccountEntry.LedgerAccount;
                break;
            }
        }

        return ledgerDimensionDisplay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOtherAccount</Name>
				<Source><![CDATA[
    private AccountNum getOtherAccount(RecId _generalJournalEntry, Voucher _subledgerVoucher, TransDate _accountingDate)
    {
        if (generalJournalEntryToAccountNumber.exists(_generalJournalEntry))
        {
            return generalJournalEntryToAccountNumber.lookup(_generalJournalEntry);
        }
        else
        {
            AccountNum accountNumber = this.findOtherAccount(_subledgerVoucher, _accountingDate);

            generalJournalEntryToAccountNumber.insert(_generalJournalEntry, accountNumber);

            return accountNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    public void initialize()
    {
        if (DimensionFocusBalanceUpdateByLedgerFlight::instance().isEnabled())
        {
            MainAccountEventArgs args = MainAccountEventArgs::construct();
            args.parmBalanceLedgerRecId(Ledger::current());

            MainAccount::updateBalancesWithArgs(args);
        }
        else
        {
            MainAccount::updateBalances();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the business logic and inserts data into the temporary table.
    /// </summary>
    public void processReport()
    {
        LedgerAccountStatementCurrencyContract contract = this.parmDataContract() as LedgerAccountStatementCurrencyContract;
        boolean includeOpeningInDetail = contract.parmIncludeOpening();
        boolean includeReversed = contract.parmIncludeReversed();
        TransDate fromDate = contract.parmFromDate();
        TransDate toDate = contract.parmToDate();

        FiscalCalendarRecId calendarRecId = Ledger::fiscalCalendar(CompanyInfo::current());
        StartDate startDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, fromDate);

        generalJournalEntryToAccountNumber = new Map(Types::Int64, Types::String);

        LedgerBalanceMainAccountAmounts ledgerBalanceOpening;
        if (startDate < fromDate)
        {
            ledgerBalanceOpening = LedgerBalanceMainAccountAmounts::construct();
            ledgerBalanceOpening.parmAccountingDateRange(startDate, fromDate - 1);
            ledgerBalanceOpening.parmIncludeRegularPeriod(true);
            ledgerBalanceOpening.parmIncludeOpeningPeriod(true);
            ledgerBalanceOpening.parmIncludeClosingPeriod(true);
        }
        else if (startDate == fromDate && !includeOpeningInDetail)
        {
            ledgerBalanceOpening = LedgerBalanceMainAccountAmounts::construct();
            ledgerBalanceOpening.parmAccountingDateRange(startDate, fromDate);
            ledgerBalanceOpening.parmIncludeRegularPeriod(false);
            ledgerBalanceOpening.parmIncludeOpeningPeriod(true);
            ledgerBalanceOpening.parmIncludeClosingPeriod(false);
        }

        Query query = this.parmQuery();

        QueryBuildDataSource ds = query.dataSourceTable(tableNum(GeneralJournalEntry));
        QueryBuildRange range = SysQuery::findOrCreateRange(ds, fieldNum(GeneralJournalEntry, Ledger));
        range.value(SysQuery::value(Ledger::current()));

        range = ds.findRange(fieldNum(GeneralJournalEntry, PostingLayer));

        CurrentOperationsTax currentPostingLayer;
        boolean postingLayerSet;

        if (range && range.value())
        {
            currentPostingLayer = str2enum(currentPostingLayer, range.value());
            postingLayerSet = true;
        }
        else
        {
            QueryFilter filter = query.findQueryFilter(ds, fieldStr(GeneralJournalEntry, PostingLayer));

            if (filter && filter.value())
            {
                currentPostingLayer = str2enum(currentPostingLayer, filter.value());
                postingLayerSet = true;
            }
        }

        if (postingLayerSet && ledgerBalanceOpening)
        {
            // Opening Balance requires a value of type OperationsTax so we must convert from the entered type
            // The type value must be one that restricts to only one posting layer
            ledgerBalanceOpening.parmPostingLayerList(con2List([currentPostingLayer]));
        }

        range = SysQuery::findOrCreateRange(ds, fieldNum(GeneralJournalEntry, AccountingDate));
        range.value(SysQuery::range(fromDate, toDate));

        QueryBuildDataSource qbGeneralJournalAccountEntry = query.dataSourceTable(tableNum(GeneralJournalAccountEntry));
        range = SysQuery::findOrCreateRange(qbGeneralJournalAccountEntry, fieldNum(GeneralJournalAccountEntry, PostingType));
        range.value(SysQuery::valueNot(int2str(enum2int(LedgerPostingType::TransferOpeningClosing))));

        ds = qbGeneralJournalAccountEntry.addDataSource(tableNum(TransactionReversalTrans));
        ds.addLink(fieldNum(GeneralJournalAccountEntry, TableId), fieldNum(TransactionReversalTrans, RefTableId));
        ds.addLink(fieldNum(GeneralJournalAccountEntry, RecId), fieldNum(TransactionReversalTrans, RefRecId));
        ds.fetchMode(QueryFetchMode::One2One);

        if (includeReversed)
        {
            ds.joinMode(JoinMode::OuterJoin);
            ds.addSelectionField(fieldNum(TransactionReversalTrans, TraceNum));
            ds.addSelectionField(fieldNum(TransactionReversalTrans, RecId));
        }
        else
        {
            ds.joinMode(JoinMode::NoExistsJoin);
            range = SysQuery::findOrCreateRange(ds, fieldNum(TransactionReversalTrans, Reversed));
            range.value(enum2str(enum2int(NoYes::Yes)));
        }

        // Never include opening transactions if the start and from dates are not equal since they will be included in the opening balance
        if (startDate < fromDate)
        {
            ds = query.dataSourceTable(tableNum(FiscalCalendarPeriod));
            range = SysQuery::findOrCreateRange(ds, fieldNum(FiscalCalendarPeriod, Type));
            range.value(SysQuery::range(FiscalPeriodType::Operating, FiscalPeriodType::Closing));
        }

        query.clearOrderBy();
        query.clearGroupBy();
        ds = query.dataSourceTable(tableNum(DimensionAttributeValueCombination));
        ds.addOrderByField(fieldNum(DimensionAttributeValueCombination, MainAccount));

        RecordInsertList reportTempTable = new RecordInsertList(tableNum(LedgerAccountStatementPerCurrencyTmp), true, true, true, false, false, ledgerAccountStatementPerCurrencyTmp);
        MainAccountRecId prevMainAccount;
        MainAccount mainAccount;

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            GeneralJournalAccountEntry generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
            GeneralJournalEntry generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry)) as GeneralJournalEntry;
            FiscalCalendarPeriod fiscalCalendarPeriod = queryRun.get(tableNum(FiscalCalendarPeriod)) as FiscalCalendarPeriod;
            DimensionAttributeValueCombination dimAttrValueCombo = queryRun.get(tableNum(DimensionAttributeValueCombination)) as DimensionAttributeValueCombination;

            AccountName localizedName;

            if (dimAttrValueCombo.MainAccount != prevMainAccount)
            {
                mainAccount = MainAccount::find(dimAttrValueCombo.MainAccount);
                localizedName = mainAccount.localizedName();
            }

            ledgerAccountStatementPerCurrencyTmp.clear();
            ledgerAccountStatementPerCurrencyTmp.MainAccountId = mainAccount.MainAccountId;
            ledgerAccountStatementPerCurrencyTmp.AccountName = localizedName;

            AmountMST openingBalance = 0;

            if (dimAttrValueCombo.MainAccount != prevMainAccount)
            {
                if (mainAccount && ledgerBalanceOpening)
                {
                    ledgerBalanceOpening.calculateBalance(mainAccount);
                    openingBalance = ledgerBalanceOpening.getAccountingCurrencyBalance();
                }

                ledgerAccountStatementPerCurrencyTmp.OpeningBalance = openingBalance;
                reportTempTable.add(ledgerAccountStatementPerCurrencyTmp);

                prevMainAccount = dimAttrValueCombo.MainAccount;
            }

            // Only display opening transactions if the flag is set but they need to be read in case only opening transactions exist
            if (fiscalCalendarPeriod.Type == FiscalPeriodType::Closing
                || fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
                || (includeOpeningInDetail && fiscalCalendarPeriod.Type == FiscalPeriodType::Opening))
            {
                DimensionDisplayValue offsetLedgerAccount = '';

                AccountNum offsetOtherAccount;
                if (generalJournalEntry.SubledgerVoucher == '')
                {
                    offsetOtherAccount = '';
                }
                else
                {
                    offsetOtherAccount = this.getOtherAccount(generalJournalEntry.RecId, generalJournalEntry.SubledgerVoucher, generalJournalEntry.AccountingDate);
                }

                if (offsetOtherAccount == '')
                {
                    // Use the amount out of generalJournalAccountEntry since it is part of the selection criteria in the method
                    offsetLedgerAccount = this.getOffsettingLedgerAccount(
                        generalJournalEntry.RecId,
                        generalJournalAccountEntry.RecId,
                        generalJournalAccountEntry.TransactionCurrencyAmount);
                }

                ledgerAccountStatementPerCurrencyTmp.TransDate = generalJournalEntry.AccountingDate;
                ledgerAccountStatementPerCurrencyTmp.GeneralJournalEntry = generalJournalEntry.RecId;

                if (generalJournalEntry.SubledgerVoucher)
                {
                    ledgerAccountStatementPerCurrencyTmp.Voucher = generalJournalEntry.SubledgerVoucher;
                }
                else
                {
                    ledgerAccountStatementPerCurrencyTmp.Voucher = "@SYS110428";
                }
                ledgerAccountStatementPerCurrencyTmp.GeneralJournalEntry = generalJournalEntry.RecId;
                ledgerAccountStatementPerCurrencyTmp.LedgerAccount = offsetLedgerAccount;
                ledgerAccountStatementPerCurrencyTmp.OtherAccount = offsetOtherAccount;
                ledgerAccountStatementPerCurrencyTmp.TransactionText = generalJournalAccountEntry.Text;
                ledgerAccountStatementPerCurrencyTmp.Currency = generalJournalAccountEntry.TransactionCurrencyCode;

                if (generalJournalAccountEntry.IsCredit)
                {
                    ledgerAccountStatementPerCurrencyTmp.AccountingCurrencyCreditAmount = -generalJournalAccountEntry.AccountingCurrencyAmount;
                    ledgerAccountStatementPerCurrencyTmp.TransactionCurrencyCreditAmount = -generalJournalAccountEntry.TransactionCurrencyAmount;
                }
                else
                {
                    ledgerAccountStatementPerCurrencyTmp.AccountingCurrencyDebitAmount = generalJournalAccountEntry.AccountingCurrencyAmount;
                    ledgerAccountStatementPerCurrencyTmp.TransactionCurrencyDebitAmount = generalJournalAccountEntry.TransactionCurrencyAmount;
                }

                if (includeReversed)
                {
                    TransactionReversalTrans transactionReversalTrans = queryRun.get(tableNum(TransactionReversalTrans)) as TransactionReversalTrans;
                    ledgerAccountStatementPerCurrencyTmp.TraceNum = transactionReversalTrans.TraceNum;

                    // Only read if there is a reversal transaction
                    if (transactionReversalTrans.RecId
                        && TransactionReversalTrans::findTransactionReversalTrans(tableNum(GeneralJournalAccountEntry), generalJournalAccountEntry.RecId).Reversed == NoYes::Yes)
                    {
                        ledgerAccountStatementPerCurrencyTmp.Reversed = "@SYS321480";
                    }
                }

                ledgerAccountStatementPerCurrencyTmp.OpeningBalance = openingBalance;
                reportTempTable.add(ledgerAccountStatementPerCurrencyTmp);
            }
        }
        reportTempTable.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>