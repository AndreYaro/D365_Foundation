<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqLineEvaluateRFQRequirement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchReqLineEvaluateRFQRequirement</c> class is used to evaluate RFQ requirement for a purchase requisition line
///    workflow.
/// </summary>
class PurchReqLineEvaluateRFQRequirement
{
    PurchReqLine    purchReqLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ancestorCondition</Name>
				<Source><![CDATA[
    private PurchReqControlRFQCategoryCondition ancestorCondition(boolean                      _isFormal,
                                                                  EcoResCategoryHierarchyId    _procureEcoResCategoryHierarchyId,
                                                                  recId                        _purchReqControlRFQRuleRecId,
                                                                  EcoResCategoryNestedSetLeft  _nestedSetLeft,
                                                                  EcoResCategoryNestedSetRight _nestedSetRight)
    {
        //the condition may be defined on acenstor category and we need to get first such condition.
        PurchReqControlRFQCategoryCondition categoryCondition;
        EcoResCategory                      ecoResCategory;

        select firstonly categoryCondition where
                categoryCondition.PurchReqControlRFQRule   == _purchReqControlRFQRuleRecId &&
                categoryCondition.IsFormal                 == _isFormal
            join RecId from ecoResCategory order by Level desc where
                ecoResCategory.RecId             == categoryCondition.Category         &&
                ecoResCategory.CategoryHierarchy == _procureEcoResCategoryHierarchyId  &&
                ecoResCategory.NestedSetLeft     <= _nestedSetLeft                     &&
                ecoResCategory.NestedSetRight    >= _nestedSetRight;

        if (categoryCondition && !categoryCondition.ThresholdCurrencyCode)
        {
            //Currency code not specified for Purchase requisition RFQ rule
            throw error("@SYS331049");
        }

        return categoryCondition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRFQRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates whether the request for quote is required for the <c>PurchReqLine</c> record.
    /// </summary>
    /// <returns>
    /// The type of RFQ that is required for the <c>PurchReqLine</c> record.
    /// </returns>
    public PurchReqRFQRequirement getRFQRequirement()
    {
        recId                               purchReqControlRFQRuleRecId;
        PurchReqControlRFQRule              purchReqControlRFQRule;
        EcoResCategory                      ecoResCategoryPurchReqLine         = EcoResCategory::find(purchReqLine.ProcurementCategory);
        PurchReqControlRFQCategoryCondition formalCondition;
        PurchReqControlRFQCategoryCondition informalCondition;
        EcoResCategoryHierarchyId           procureEcoResCategoryHierarchyId;

        purchReqControlRFQRuleRecId = this.purchReqControlRFQRuleRecId(purchReqLine);

        if (!purchReqControlRFQRuleRecId)
        {
            return PurchReqRFQRequirement::None;
        }

        purchReqControlRFQRule      = PurchReqControlRFQRule::find(purchReqControlRFQRuleRecId);
        //we have a couple of combinations to check for forma-informal requirement. always- aways, always - never, never-always,never - never
        //always - conditional, never - conditional, conditional - conditional, conditional - Always, conditional - never.

        //always - always, always - never, always conditional
        //formal has a precedence over informal. If formal is always then we do not need to consider informal even if it is set to conditional
        if (purchReqControlRFQRule.FormalRequirement == PurchReqControlRFQFormalRequirement::Always)
        {
            return PurchReqRFQRequirement::Formal;
        }
        //never - always
        else if (purchReqControlRFQRule.FormalRequirement   == PurchReqControlRFQFormalRequirement::Never &&
                 purchReqControlRFQRule.InformalRequirement == PurchReqControlRFQInformalRequirement::Always)
        {
            return PurchReqRFQRequirement::Informal;
        }
        //never - never
        if (purchReqControlRFQRule.FormalRequirement   == PurchReqControlRFQFormalRequirement::Never &&
            purchReqControlRFQRule.InformalRequirement == PurchReqControlRFQInformalRequirement::Never)
        {
            return PurchReqRFQRequirement::None;
        }

        //now we are checking for never - conditional, conditional - conditional, conditional - Always, conditional - never.
        // this checks need to be performance twice once at the over all level and then at the individual lower threshold on catagories.

        //Check if RFQRule threshold is satisfied at the top level.

        if ((purchReqControlRFQRule.FormalRequirement   == PurchReqControlRFQFormalRequirement::Conditional
                && !purchReqControlRFQRule.FormalThresholdCurrencyCode) ||
             purchReqControlRFQRule.InformalRequirement   == PurchReqControlRFQInformalRequirement::Conditional
                && !purchReqControlRFQRule.InformalThresholdCurrencyCode)
        {
            //Currency code not specified for Purchase requisition RFQ rule
            throw error("@SYS331049");
        }

        //conditional - never, conditional - conditional, conditional - always
        if (purchReqControlRFQRule.FormalRequirement   == PurchReqControlRFQFormalRequirement::Conditional &&
            this.isThresholdExceeded(purchReqControlRFQRule.FormalThresholdAmount, purchReqControlRFQRule.FormalThresholdCurrencyCode))
        {
            return PurchReqRFQRequirement::Formal;
        }
        // never - conditional
        else if (purchReqControlRFQRule.FormalRequirement     == PurchReqControlRFQFormalRequirement::Never         &&
                 purchReqControlRFQRule.InformalRequirement   == PurchReqControlRFQInformalRequirement::Conditional &&
                 this.isThresholdExceeded(purchReqControlRFQRule.InformalThresholdAmount, purchReqControlRFQRule.InformalThresholdCurrencyCode))
        {
            return PurchReqRFQRequirement::Informal;
        }

        procureEcoResCategoryHierarchyId = EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Procurement).CategoryHierarchy;

        //Check if RFQRule threshold is satisfied at the bottom level.
        if (purchReqControlRFQRule.FormalRequirement == PurchReqControlRFQFormalRequirement::Conditional)
        {
            formalCondition   = this.ancestorCondition(true,  procureEcoResCategoryHierarchyId, purchReqControlRFQRuleRecId, ecoResCategoryPurchReqLine.NestedSetLeft, ecoResCategoryPurchReqLine.NestedSetRight);
        }

        if (purchReqControlRFQRule.InformalRequirement == PurchReqControlRFQInformalRequirement::Conditional)
        {
            informalCondition = this.ancestorCondition(false, procureEcoResCategoryHierarchyId, purchReqControlRFQRuleRecId, ecoResCategoryPurchReqLine.NestedSetLeft, ecoResCategoryPurchReqLine.NestedSetRight);
        }

        //This takes care of the scenario where top condition is not specified and bottom thresholds catgories are not applicable.
        if (!formalCondition && !informalCondition)
        {
            // we may reach here in case always - conditional
            if (purchReqControlRFQRule.InformalRequirement == PurchReqControlRFQInformalRequirement::Always)
            {
                return PurchReqRFQRequirement::Informal;
            }

            return PurchReqRFQRequirement::None;
        }

        //formal conditiona satisfied.

        if (formalCondition && this.isThresholdExceeded(formalCondition.ThresholdAmount, formalCondition.ThresholdCurrencyCode))
        {
            return PurchReqRFQRequirement::Formal;
        }

        //informal condition satisfied.
        if (informalCondition && this.isThresholdExceeded(informalCondition.ThresholdAmount, informalCondition.ThresholdCurrencyCode))
        {
            return PurchReqRFQRequirement::Informal;
        }

        if (purchReqControlRFQRule.InformalRequirement == PurchReqControlRFQInformalRequirement::Always)
        {
            //we reach here in case of conditional - always and formal condition not being satisfied.
            return PurchReqRFQRequirement::Informal;
        }

        //conditional - conditional but none of the conditions are satisfied for formal as well as informal.
        return PurchReqRFQRequirement::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isThresholdExceeded</Name>
				<Source><![CDATA[
    private boolean isThresholdExceeded(Amount _thresholdAmount, CurrencyCode _currencyCode)
    {
        if (purchReqLine.LineAmount > CurrencyExchangeHelper::curAmount2CurAmount(_thresholdAmount, _currencyCode, purchReqLine.CurrencyCode))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(PurchReqLine _purchReqLine)
    {
        purchReqLine = _purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqControlRFQRuleRecId</Name>
				<Source><![CDATA[
    private recId purchReqControlRFQRuleRecId(PurchReqLine _purchReqLineLocal)
    {
        int64           orgArray[2];

        orgArray[1] = _purchReqLineLocal.BuyingLegalEntity;
        orgArray[2] = _purchReqLineLocal.ReceivingOperatingUnit;

        return SysPolicies::getPolicyRuleID(
                    orgArray,
                    SysPolicyRuleType::findByRuleTypePolicyType(SysPolicyRuleTypeEnum::PurchReqControlRFQRule, SysPolicyTypeEnum::PurchasingPolicy).RecId,
                    SysPolicyTypeEnum::PurchasingPolicy);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
