<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventReleaseOrderPickingForm_Transfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventReleaseOrderPickingForm_Transfer</c> class is used to create and update orders.
/// </summary>
/// <remarks>
///  The following table lists the variables in the
///  <c>
///  classDeclaration
///  </c>
///   with their type and description.
///  <list type="table">
///   <listHeader>
///   <description>Variables in the classDeclaration</description><description>Type and
///   description</description>
///   </listHeader>
///   <item>
///    <description>
///    InventTransferReleaseOrderPickingTmp
///    </description>
///    <description>
///    <c>InventTransferReleaseOrderPickingTmp</c>The temporary table that holds the record ID from the
///    sales lines to be displayed in the form.
///    </description>
///   </item>
///   <item>
///    <description>
///    ShippingDateFrom
///    </description>
///    <description>
///    <c>DateExpected</c>The shipping date that will be used when order lines are selected.
///    </description>
///   </item>
///   <item>
///    <description>
///    ShippingDateTo
///    </description>
///    <description>
///    <c>DateExpected</c>The shipping date that will be used when order lines are selected.
///    </description>
///   </item>
///   <item>
///    <description>
///    InventDimParm
///    </description>
///    <description>
///    <c>InventDimCtrL_Frm_OnHand</c>The class that displays the inventory dimensions on the form.
///    </description>
///   </item>
///   <item>
///    <description>
///    LatestUpdateDate
///    </description>
///    <description>
///    <c>TransDate</c>The latest date that sales lines and inventory on hand are calculated.
///    </description>
///   </item>
///   <item>
///    <description>
///    LatestUpdateTime
///    </description>
///    <description>
///    <c>TimeOfDay</c>The latest time that sales lines and inventory on hand are calculated.
///    </description>
///   </item>
///  </list>
/// </remarks>
class InventReleaseOrderPickingForm_Transfer extends InventReleaseOrderPickingForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bldInventReleaseOrderPickingTmp</Name>
				<Source><![CDATA[
/// <summary>
    ///    Builds the temporary table InventTransferReleaseOrderPickingTmp. This is the main method in the class.
    /// </summary>
    /// <param name="_packedQueryRun">
    ///    A packed <c>QueryRun</c> instance.
    /// </param>
    /// <remarks>
    ///       First, the OrderLines are selected from the inventTransferLine table, within the period of the variables shippingDateFrom and shippingDateTo.
    ///   For each OrderLine that meets the criteria, the following is done:
    ///   Find available quantity on stock in the variable qtyAvailPhysical via the method findQtyAvailPhysical for this item and dimension on the
    ///    <c>
    ///       inventTransferLine
    ///    </c>
    ///       .
    ///   The quantity with status reserved ordered is calculated in the variable qtyReservedOrdered and the method findQtyReservedOrdered. This variable is later deducted from the variable qtyRemainToDeliver.
    ///   The quantity remain to deliver is calculated in the variable qtyRemainToDeliver.
    ///   If qtyAvailPhysical > 0, which means that stock is on hand, and if qtyRemainToDeliver > 0, which means that there is more to deliver on this sales line,  the line will be selected and inserted in the temporary table.
    ///   The next section builds the temporary table with following fields:
    ///
    ///    <list type="bullet">
    ///       <item>
    ///          <description>RecId from inventTransferLine.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>TransferId from inventTransferLine.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             AllOrdersDeliverable, via the method <c>allOrdersDeliverable</c>-a method calculating if all orders with this item and dimension can be delivered.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             NeedAllocation, via the method <c>needAllocation</c>-a method calculating if some orders, with this item and dimension, can be delivered and need allocation.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             ProductionOrderExist, via the method <c>productionOrderExist</c>-a method that returns if a production order exist for this item.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>SalesOrderExist, via the method <see cref="InventTransferReleaseOrderPickingForm.salesOrderExist Method" />-a method that returns if a transfer order exists for this item.
    ///          </description>
    ///       </item>
    ///    </list>
    ///       ///   Finally, the delivery .pct for the entire order is calculated via the method
    ///    <c>
    ///       DeliverPossiblePctCalc
    ///    </c>
    ///       .
    ///
    /// </remarks>
    void bldInventReleaseOrderPickingTmp(container _packedQueryRun)
    {
        #avifiles

        InventQty               qtyReservedOrdered;

        PdsCWInventQty          cwQtyReservedOrdered;

        InventDimParm           inventDimParm;

        ttsbegin;

        delete_from inventReleaseOrderPickingTmp;

        QueryRun queryRun = new QueryRun(_packedQueryRun);

        //Pull out date range so it can be used for the sales,prod,and transfer exist queries
        QueryBuildDataSource qbdsTransferLine = queryRun.query().dataSourceTable(tableNum(InventTransferLine));

        if (qbdsTransferLine)
        {
            QueryBuildRange qbrDates = qbdsTransferLine.findRange(fieldNum(InventTransferLine,ShipDate));

            if (qbrDates)
            {
                dateRange = qbrDates.value();
            }
        }

        SysOperationProgress progressBar = SysOperationProgress::newGeneral(#aviUpdate, "@SYS90369", QueryRun::getQueryRowCount(queryRun.query(), maxInt()));

        while (queryRun.next())
        {
            InventTransferLine inventTransferLine = queryRun.get(tableNum(InventTransferLine));
            progressBar.incCount();
            progressBar.setText(strFmt("@SYS90383",inventTransferLine.TransferId));

            boolean addLine = false;
            InventQty qtyRemainToPick = 0;
            InventDim inventDimTransferLine = inventTransferLine.inventDim();
            inventDimParm.initFromInventDim(inventDimTransferLine);

            boolean isCWItem = PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId);
            if (isCWItem)
            {
                PdsCWInventQty cwQtyPhysicalInvent = this.pdsCWFindQtyPhysicalInvent(inventTransferLine.ItemId,  inventDimTransferLine);
                if (cwQtyPhysicalInvent > 0 && deductUnReserved)
                {
                    cwQtyPhysicalInvent   -= this.pdsCWFindQtyOnPick(inventTransferLine.ItemId, inventDimTransferLine);
                }
                PdsCWInventQty cwQtyOnPickWMSOrder = -InventTrans::pdsCWQtyWMSOrder(InventTransOriginTransferShip::findInventTransOriginId(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum));
                cwQtyReservedOrdered = this.pdsCWFindQtyReservedOrdered(inventTransferLine.InventTransId);
                PdsCWInventQty cwQtyRemainToPick = inventTransferLine.PdsCWQtyRemainShip - cwQtyReservedOrdered - cwQtyOnPickWMSOrder -inventTransferLine.pdsCWQtyShipPicked();
                if (cwQtyPhysicalInvent > 0 && cwQtyRemainToPick > 0)
                {
                    addLine = true;
                }
            }
            else
            {
                InventQty qtyPhysicalInvent = this.findQtyPhysicalInvent(inventTransferLine.ItemId,inventDimTransferLine);

                if (qtyPhysicalInvent > 0 && deductUnReserved)
                {
                    qtyPhysicalInvent   -= this.findQtyOnPick(inventTransferLine.ItemId,inventDimTransferLine);
                }

                InventQty qtyWMSOrder = -InventTrans::qtyWMSOrder(InventTransOriginTransferShip::findInventTransOriginId(inventTransferLine.DataAreaId, inventTransferLine.TransferId, inventTransferLine.LineNum));

                qtyReservedOrdered = this.findQtyReservedOrdered(inventTransferLine.InventTransId);

                qtyRemainToPick = inventTransferLine.QtyRemainShip - qtyReservedOrdered - qtyWMSOrder - inventTransferLine.qtyShipPicked();

                if (qtyPhysicalInvent > 0 && qtyRemainToPick > 0)
                {
                    addLine = true;
                }
            }
            if (addLine)
            {
                inventReleaseOrderPickingTmp.TransType              = InventReleaseOrderPickingType::Transfer;
                inventReleaseOrderPickingTmp.TransRecId             = inventTransferLine.RecId;
                inventReleaseOrderPickingTmp.OrderId                = inventTransferLine.TransferId;

                if (isCWItem)
                {
                    inventReleaseOrderPickingTmp.AllOrdersDeliverable = cwQtyReservedOrdered ? false : this.pdsCWAllOrdersDeliverable(inventTransferLine.ItemId, inventDimTransferLine);
                    inventReleaseOrderPickingTmp.NeedAllocation       = this.pdsCWNeedAllocation(inventTransferLine.ItemId, inventDimTransferLine);
                }
                else
                {
                    inventReleaseOrderPickingTmp.AllOrdersDeliverable = qtyReservedOrdered ? false : this.allOrdersDeliverable(inventTransferLine.ItemId, inventDimTransferLine);
                    inventReleaseOrderPickingTmp.NeedAllocation       = this.needAllocation(inventTransferLine.ItemId, inventDimTransferLine);
                }

                inventReleaseOrderPickingTmp.ProductionOrderExist   = this.productionOrderLineExist(inventTransferLine.ItemId, inventDimTransferLine.InventDimId, dateRange);
                inventReleaseOrderPickingTmp.SalesOrderExist        = this.salesOrderExist(inventTransferLine.ItemId, inventDimTransferLine.InventDimId, dateRange);

                inventReleaseOrderPickingTmp.insert();
            }
        }

        this.deliverPossiblePctCalc();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliverPossiblePctCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the delivery percent possible for the whole order and updates this amount in the
    /// temporary table.
    /// </summary>
    protected void deliverPossiblePctCalc()
    {
        InventReleaseOrderPickingTmp    releaseOrderPickingTmp;
        InventTransferLine              inventTransferLine;
        InventTable                     inventTable;

        releaseOrderPickingTmp.linkPhysicalTableInstance(inventReleaseOrderPickingTmp);

        while select count(RecId) from inventReleaseOrderPickingTmp
            group by OrderId
        {
            // find total number of possible order lines for this order
            select count(RecId) from inventTransferLine
                where inventTransferLine.TransferId     == inventReleaseOrderPickingTmp.OrderId &&
                      inventTransferLine.RemainStatus   == InventTransferRemainStatus::Shipping
                notexists join inventTable
                    where inventTable.ItemId        == inventTransferLine.ItemId                &&
                          inventTable.ItemType      == ItemType::Service;

                Counter numberOfOrderLines = any2int(inventTransferLine.RecId);

            // find total number of order lines found deliverable (AllOrderDeliverable == Yes)
            select count(RecId) from releaseOrderPickingTmp
                where releaseOrderPickingTmp.OrderId              == inventReleaseOrderPickingTmp.OrderId &&
                      releaseOrderPickingTmp.AllOrdersDeliverable == NoYes::Yes;
            Counter numberOfOrderLinesDeliverable = any2int(releaseOrderPickingTmp.RecId);

            // calculate the possible delivery percentage for the entire order
            Percent deliverPossiblePct = numberOfOrderLinesDeliverable * 100 / minOne(numberOfOrderLines);

            update_recordset releaseOrderPickingTmp
                setting DeliverPossiblePct = deliverPossiblePct
                where releaseOrderPickingTmp.OrderId == inventReleaseOrderPickingTmp.OrderId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the temporary table that is used in the related forms.
    /// </summary>
    /// <param name="_inventReleaseOrderPickingTmp">
    /// The instance of the temporary table in which the proposed and selected order lines are held.
    /// </param>
    /// <param name="_packedQueryRun">
    /// A container that has the packed <c>QueryRun</c> object that should be used for the order lines
    /// selection.
    /// </param>
    /// <param name="_deductUnreserved">
    /// A Boolean value that indicates whether the form check box is marked.
    /// </param>
    static public void buildData(
        InventReleaseOrderPickingTmp    _inventReleaseOrderPickingTmp,
        container                       _packedQueryRun,
        boolean                         _deductUnreserved)
    {
        select firstonly _inventReleaseOrderPickingTmp; // Ensure that instance has been initialized;

        InventReleaseOrderPickingForm_Transfer inventReleaseOrderPickingForm_Transfer = InventReleaseOrderPickingForm_Transfer::construct();
        inventReleaseOrderPickingForm_Transfer.parmDeductUnreserved(_deductUnreserved);
        inventReleaseOrderPickingForm_Transfer.parmInventReleaseOrderPickingTmp(_inventReleaseOrderPickingTmp);

        inventReleaseOrderPickingForm_Transfer.bldInventReleaseOrderPickingTmp(_packedQueryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverActivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the user is requesting to release a quantity that exceeds the available quantity.
    /// </summary>
    /// <param name="_inventTransferLine">
    /// The transfer order line that is being modified.
    /// </param>
    /// <param name="_activateNow">
    /// The quantity that is being requested by the user.
    /// </param>
    /// <param name="_deductUnreserved">
    /// A Boolean value that indicates whether the form check box is marked.
    /// </param>
    /// <param name="_cwActivateNow">
    ///    The catch weight quantity being requested by the user.
    /// </param>
    /// <returns>
    /// true if the quantity is acceptable; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The <paramref>_cwActivateNow</paramref> parameter has been introduced in the AX2012 R2 release
    /// to support the catch weight feature which requires to track both inventory quantity
    /// and catch weight quantity rather than just inventory quantity.
    /// </remarks>
    static public boolean checkOverActivate(
        InventTransferLine  _inventTransferLine,
        InventQty           _activateNow,
        boolean             _deductUnreserved,
        PdsCWInventQty      _cwActivateNow)
    {
        return InventReleaseOrderPickingForm::checkOverActivate(_inventTransferLine, _activateNow, _deductUnreserved, _cwActivateNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventReleaseOrderPickingForm_Transfer construct()
    {
        return new InventReleaseOrderPickingForm_Transfer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClearActivateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the values that are entered in the activate now field for each order line.
    /// </summary>
    /// <param name="_inventReleaseOrderPickingTmp">
    /// A reference to the temporary table instance in the form holding the selected order lines.
    /// </param>
    /// <remarks>
    /// This method is used by the <c>inventTransferReleaseOrderPicking</c> form.
    /// </remarks>
    static public void updateClearActivateNow(InventReleaseOrderPickingTmp _inventReleaseOrderPickingTmp)
    {
        InventTransferLine              inventTransferLine;
        InventReleaseOrderPickingTmp    inventReleaseOrderPickingTmp;

        ttsbegin;
        inventReleaseOrderPickingTmp.linkPhysicalTableInstance(_inventReleaseOrderPickingTmp);

        update_recordSet inventTransferLine
            setting PdsCWQtyShipNow = 0,
                    QtyShipNow = 0
            where inventTransferLine.PdsCWQtyShipNow != 0 ||
                  inventTransferLine.QtyShipNow != 0
                    exists join inventReleaseOrderPickingTmp
                where inventReleaseOrderPickingTmp.TransRecId == inventTransferLine.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNoManualAllocationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all order lines in the form where no manual allocation is needed with the quantity in the
    /// activate now field.
    /// </summary>
    /// <param name="_inventReleaseOrderPickingTmp">
    /// A reference to the temporary table instance in the form holding the selected order lines.
    /// </param>
    static public void updateNoManualAllocationNeeded(InventReleaseOrderPickingTmp _inventReleaseOrderPickingTmp)
    {
        InventTransferLine              inventTransferLine;
        InventQty                       reservQty;
        InventReleaseOrderPickingTmp    inventReleaseOrderPickingTmp;

        PdsCWInventQty          cwReservQty;

        ttsbegin;

        inventReleaseOrderPickingTmp.linkPhysicalTableInstance(_inventReleaseOrderPickingTmp);

        while select forupdate inventTransferLine
            exists join inventReleaseOrderPickingTmp
                where inventReleaseOrderPickingTmp.TransRecId           == inventTransferLine.RecId &&
                      inventReleaseOrderPickingTmp.AllOrdersDeliverable == NoYes::Yes
        {
            boolean pdsIsCWItem = PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId);
            if (pdsIsCWItem)
            {
                inventTransferLine.PdsCWQtyShipNow = inventTransferLine.pdsCWQtyActivateRemainder();
            }

            inventTransferLine.QtyShipNow = inventTransferLine.qtyActivateRemainder();
            inventTransferLine.update();

            InventMovement movement = InventMovement::construct(inventTransferLine);

            if (movement.pdsCWItem())
            {
                cwReservQty =
                        (movement.pdsCWReserveQty()
                            - movement.transIdSum().pdsCWReserved())
                            - inventTransferLine.PdsCWQtyShipNow
                            - (inventTransferLine.PdsCWQtyTransfer
                                - inventTransferLine.pdsCWQtyActivateRemainder());
                reservQty   = PdsCatchWeight::inventQty(inventTransferLine.ItemId, cwReservQty);
            }
            else
            {
                cwReservQty = 0;
                reservQty   = (movement.reserveQty() - movement.transIdSum().reserved()) - inventTransferLine.QtyShipNow - (inventTransferLine.QtyTransfer - inventTransferLine.qtyActivateRemainder());
            }
            InventUpd_Reservation reservation = InventUpd_Reservation::newMovement(
                                                                              movement,
                                                                              reservQty,
                                                                              true,
                                                                              false,
                                                                              false,
                                                                              cwReservQty);
            reservation.updateNow();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservedPhyscical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the activate now field by using the quantity reserved physical for all order lines that
    /// have a quantity reserved physical.
    /// </summary>
    /// <param name="_inventReleaseOrderPickingTmp">
    /// A reference to the temporary table instance in the form holding the selected order lines.
    /// </param>
    static public void updateReservedPhyscical(InventReleaseOrderPickingTmp _inventReleaseOrderPickingTmp)
    {
        InventTransferLine              inventTransferLine;
        InventQty                       inventQty;
        InventReleaseOrderPickingTmp    inventReleaseOrderPickingTmp;
        PdsCWInventQty                  cwQty;

        ttsbegin;

        inventReleaseOrderPickingTmp.linkPhysicalTableInstance(_inventReleaseOrderPickingTmp);

        while select forupdate inventTransferLine
            exists join inventReleaseOrderPickingTmp
                where inventReleaseOrderPickingTmp.TransRecId == inventTransferLine.RecId
        {
            if (inventTransferLine.InventTransId)
            {
                InventTransOriginId inventTransOriginId = InventTransOriginTransferShip::findInventTransOriginId(
                    inventTransferLine.DataAreaId,
                    inventTransferLine.TransferId,
                    inventTransferLine.LineNum);

                cwQty = -InventTransIdSumSingleStatus::pdsCWQtyReservPhysicalChildTypeNone(
                    inventTransOriginId);

                inventQty = -InventTransIdSumSingleStatus::qtyReservPhysicalChildTypeNone(
                    inventTransOriginId);
            }
            else
            {
                inventQty = 0;
                cwQty = 0;
            }

            inventTransferLine.QtyShipNow = inventQty;
            inventTransferLine.PdsCWQtyShipNow = cwQty;

            inventTransferLine.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhereEntireOrderCanBeDelivered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the activate now field by using the quantity on all order lines in the form where delivery
    /// percent is 100.
    /// </summary>
    /// <param name="_inventReleaseOrderPickingTmp">
    /// A reference to the temporary table instance in the form holding the selected order lines.
    /// </param>
    static public void updateWhereEntireOrderCanBeDelivered(InventReleaseOrderPickingTmp _inventReleaseOrderPickingTmp)
    {
        InventTransferLine              inventTransferLine;
        InventQty                       reservQty;
        InventReleaseOrderPickingTmp    inventReleaseOrderPickingTmp;

        PdsCWInventQty          cwReservQty;

        ttsbegin;

        inventReleaseOrderPickingTmp.linkPhysicalTableInstance(_inventReleaseOrderPickingTmp);

        while select forupdate inventTransferLine
            exists join inventReleaseOrderPickingTmp
                where inventReleaseOrderPickingTmp.TransRecId         == inventTransferLine.RecId &&
                      inventReleaseOrderPickingTmp.DeliverPossiblePct == 100
        {
            boolean isCWItem = PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId);
            if (isCWItem)
            {
                inventTransferLine.PdsCWQtyShipNow = inventTransferLine.pdsCWQtyActivateRemainder();
            }

            inventTransferLine.QtyShipNow = inventTransferLine.qtyActivateRemainder();
            inventTransferLine.update();

            InventMovement movement = InventMovement::construct(inventTransferLine);

            if (movement.pdsCWItem())
            {
                cwReservQty =
                    (movement.pdsCWReserveQty()
                            - movement.transIdSum().pdsCWReserved())
                        - inventTransferLine.PdsCWQtyShipNow
                        - (inventTransferLine.PdsCWQtyTransfer
                        - inventTransferLine.pdsCWQtyActivateRemainder());
                reservQty = PdsCatchWeight::inventQty(inventTransferLine.ItemId, cwReservQty);
            }
            else
            {
                cwReservQty = 0;
                reservQty   = (movement.reserveQty() - movement.transIdSum().reserved()) - inventTransferLine.QtyShipNow - (inventTransferLine.QtyTransfer - inventTransferLine.qtyActivateRemainder());
            }
            InventUpd_Reservation reservation = InventUpd_Reservation::newMovement(
                                                                              movement,
                                                                              reservQty,
                                                                              true,
                                                                              false,
                                                                              false,
                                                                              cwReservQty);
            reservation.updateNow();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
