<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceWhsInventReserveBatchJobTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceWhsInventReserveBatchJobTask extends InventInventoryDataServiceBatchJobTask
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    internal System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventInventoryDataServiceWhsInventReserveBatchJobTask),
                                                          staticMethodStr(InventInventoryDataServiceWhsInventReserveBatchJobTask, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    protected static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        InventInventoryDataServiceWhsInventReserveBatchJobTask dataCollectionTask = new InventInventoryDataServiceWhsInventReserveBatchJobTask();
        container packedDataCollectionTask;

        [packedDataCollectionTask] = params;
        dataCollectionTask.unpack(packedDataCollectionTask);

        dataCollectionTask.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.runProcessWHSQueue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessWHSQueue</Name>
				<Source><![CDATA[
    public void runProcessWHSQueue()
    {
        InventInventoryDataServiceWHSQueueTemp          whsInventReserveQueueTemp;
        WHSInventReserve whsInventReserve;

        InventInventoryDataServiceParameters inventoryServiceParameters = InventInventoryDataServiceParameters::find();

        boolean isWHSItemEnabled = FeatureStateProvider::IsFeatureEnabled(InventInventoryDataServiceWHSFeature::instance()) &&
                                   inventoryServiceParameters.IsWHSItemEnabled;

        if (!isWHSItemEnabled)
        {
            return;
        }

        List whsInventReserveQueueList = new List(Types::Class);
        Map whsInventReserveMap = new Map(Types::Int64, Types::Record);    // key = whsInventReserveQueueTemp.RecId, value = whsInventReserve

        // Currently we don't support offseting for warehouse scenarios
        // This needs to be supported later on.
        while select crosscompany whsInventReserve
            join whsInventReserveQueueTemp
            where whsInventReserve.DataAreaId == whsInventReserveQueueTemp.company
                && whsInventReserve.ItemId == whsInventReserveQueueTemp.ItemId
                && whsInventReserve.InventDimId == whsInventReserveQueueTemp.InventDimId
                && whsInventReserveQueueTemp.RecId >= minRecId
                && whsInventReserveQueueTemp.RecId <= maxRecId
        {
            if (!whsInventReserveMap.exists(whsInventReserveQueueTemp.RecId))
            {
                whsInventReserveMap.insert(whsInventReserveQueueTemp.RecId, whsInventReserve);
            }

            if (whsInventReserve.ItemId &&
                (InventoryServiceTransmitAllWHSDataFlight::instance().isEnabled() || whsInventReserve.HierarchyLevel >= 2)) // Process all unless disable flight to process level >= 2 only.
            {
                whsInventReserveQueueList.addEnd(this.transformWHSInventReserve(whsInventReserve, whsInventReserveQueueTemp.RecId, new List(Types::Class)));
            }
        }

        if (InventoryServiceHandleDeletedInventSumFlight::instance().isEnabled())
        {
            select count(RecId) from whsInventReserveQueueTemp
                 where whsInventReserveQueueTemp.RecId >= minRecId
                    && whsInventReserveQueueTemp.RecId <= maxRecId;

            if (whsInventReserveMap.elements() != whsInventReserveQueueTemp.RecId)
            {
                while select whsInventReserveQueueTemp
                    where whsInventReserveQueueTemp.RecId >= minRecId
                       && whsInventReserveQueueTemp.RecId <= maxRecId
                {
                    if (!whsInventReserveMap.exists(whsInventReserveQueueTemp.RecId))
                    {
                        var whsChangeEvent = InventOnHandChangeEvent_WHS::buildZeroQtyEvent(whsInventReserveQueueTemp);
                        if (whsChangeEvent.parmId())
                        {
                            whsInventReserveQueueList.addEnd(whsChangeEvent);
                        }
                    }
                }
            }
        }

        if (!whsInventReserveQueueList.empty())
        {
            this.postWhsInventReserveQueueList(whsInventReserveQueueList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postWhsInventReserveQueueList</Name>
				<Source><![CDATA[
    private void postWhsInventReserveQueueList(List whsInventReserveQueueList)
    {
        var inventoryServiceClient = new InventoryServiceClient();
        var inventInventoryDataServiceInstrumentationActivity_WHS = logger.getInventoryDataServiceActivity();

        using (var activityContext = inventInventoryDataServiceInstrumentationActivity_WHS.getActivityContext_PostRecords('PostWHSInventReserves'))
        {
            var correlationId = '';
            container response;
            InventInventoryDataServiceWHSQueueTemp whsInventReserveQueueTemp;
            try
            {
                // response is a container [responseContent, correlationId].
                try
                {
                    response = inventoryServiceClient.postWhsInventReserves(whsInventReserveQueueList);
                }
                catch
                {
                    if (InventInventoryDataServiceRetryHelper::retryTransientError())
                    {
                        retry;
                    }
                    else
                    {
                        throw;
                    }
                }
                var responseContent = conPeek(response, 1);
                correlationId = conPeek(response, 2);

                Newtonsoft.Json.Linq.JObject responseJObject = Newtonsoft.Json.JsonConvert::DeserializeObject(responseContent);
                Newtonsoft.Json.Linq.JArray failureWHSArray = responseJObject.GetValue('failure');
                Newtonsoft.Json.Linq.JArray successWHSArray = responseJObject.GetValue('success');
                 
                ttsbegin;
                // Use a separate parameter
                InventInventoryDataServiceParameters::addSuccessfullyPostedCountWHS(successWHSArray.Count);
                ttscommit;

                if (failureWHSArray.Count != 0)
                {
                    Map responseMap = new Map(Types::String, Types::Container);
                    this.insertResToMap(responseMap, failureWHSArray, 'failure');

                    str failedRecIdsAndErrorMessages = '';

                    ttsbegin;
                    while select forupdate whsInventReserveQueueTemp
                        where whsInventReserveQueueTemp.RecId >= minRecId
                            && whsInventReserveQueueTemp.RecId <= maxRecId
                    {
                        var recId = int642Str(whsInventReserveQueueTemp.RecId);
                        if (responseMap.exists(recId) && conPeek(responseMap.lookup(recId), 1) == 'failure')
                        {
                            whsInventReserveQueueTemp.PostFailed = true;
                            whsInventReserveQueueTemp.update();
                            failedRecIdsAndErrorMessages += recId + ': ';
                            failedRecIdsAndErrorMessages += conPeek(responseMap.lookup(recId), 2) + '; ';
                        }
                    }
                    ttscommit;

                    NoYes postSuccessed = failedRecIdsAndErrorMessages == '' ? NoYes::Yes : NoYes::No;
                    inventInventoryDataServiceInstrumentationActivity_WHS.logPostInventSumsInfo(activityContext, minRecId, maxRecId, postSuccessed, correlationId, failedRecIdsAndErrorMessages);
                }
            }
            catch
            {
                ttsbegin;
                update_recordset whsInventReserveQueueTemp
                    setting PostFailed = true
                    where whsInventReserveQueueTemp.RecId >= minRecId
                    && whsInventReserveQueueTemp.RecId <= maxRecId;
                        
                ttscommit;

                inventInventoryDataServiceInstrumentationActivity_WHS.logPostInventSumsInfo(activityContext, minRecId, maxRecId, NoYes::No, correlationId, 'Post request failed. Please find more information for this request on Kusto.');
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>