<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTaxDeclaration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>RAssetTaxDeclaration</c> class is a parent class for tax declaration classes: rAssetAssessedTaxDeclaration, rAssetLandTaxDeclaration and rAssetTransportTaxDeclaration.
/// </summary>
abstract class rAssetTaxDeclaration extends RunBaseBatch
{
    RTax25RegisterJournalTable          journalTable;
    CompanyInfo                         companyInfo;
    ComExcelDocument_RU                 excelDocument;
    Description                         documentDescription;
    int                                 correctionNumber;
    OKATO_RU                            curRCOAD;
    int                                 totalPages;

    RAssetEmployee                      employeeId;
    boolean                             exportToER;
    boolean                             reorganization;
    RAssetTaxReorganizationCode         reorganizationCode;
    INN_RU                              reorganizationINN;
    KPPU_RU                             reorganizationRRC;
    INN_RU                              inn;
    KPPU_RU                             kpp;
    OKDP_RU                             okdp;
    FirstName                           firstName;
    LastName                            lastName;
    MiddleName                          middleName;
    str                                 taxPayerSing;
    Phone                               companyPhone;
    DirPartyName                        companyName;
    GniCode_RU                          gniCode;
    VendAccount                         curVendAccount;

    Set                                 declarationSet;

    #macrolib.RAssetMSOfficeConstant

    #define.cellMacro(1)
    #define.const(64)
    #define.letterCount(26)

    #define.Value2(2)
    #define.Value3(3)
    #define.Value4(4)
    #define.Value5(5)
    #define.Value6(6)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the electronic documents setup for the tax declaration is valid.
    /// </summary>
    /// <returns>
    /// true if the setup is OK; otherwise, false.
    /// </returns>
    protected boolean checkDocument()
    {
        boolean               ret = true;

        if (exportToER)
        {
            //POSTR1TODO: create validation for export
        }

        if (!declarationSet || !declarationSet.elements())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeExcelDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes previously opened document.
    /// </summary>
    protected void closeExcelDocument()
    {
        if (excelDocument && excelDocument.isDocumentValid())
        {
            excelDocument.closeDocument();
            excelDocument = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        FormRun      dialogForm;
        Args         args = new Args(formStr(RAssetAssessedTaxDeclaration));

        args.record(journalTable);
        args.caller(this);
        dialogForm = classfactory.formRunClass(args);
        dialogForm.init();

        return dialogForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the finally operations on the declaration: shows the number of the report pages, exports to the electronic report, shows the excel document.
    /// </summary>
    protected void endDocument()
    {
        this.fillTotalPages();

        if (exportToER)
        {
            //POSTR1TODO: write method for export report
        }

        excelDocument.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCellsLeft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the report cells with values in left-to-rigth consecutive order.
    /// </summary>
    /// <param name="_workSheet">
    /// The workSheet number of the report.
    /// </param>
    /// <param name="_cellName">
    /// The cell name of the report.
    /// </param>
    /// <param name="_row">
    /// The row number of the report.
    /// </param>
    /// <param name="_text">
    /// The string value which is printed into the report cells.
    /// </param>
    /// <param name="_number">
    /// The number of the letters of the string value which is printed into the report cells.
    /// </param>
    /// <param name="_filler">
    /// The default letter value which is printed into the report cells.
    /// </param>
    /// <param name="_cellMacro">
    /// The number of excel cells.
    /// </param>
    protected void fillCellsLeft(int _workSheet, str _cellName, int _row, str _text, int _number = strLen(_text), str _filler = "", int _cellMacro = #cellMacro)
    {
        int             i, number, firstColumn;
        ArrayExtend_RU  totalArray;

        number = min(strLen(_text), _number);
        firstColumn = (char2num(_cellName, strLen(_cellName)) - #const) +
                      (char2num(_cellName, 1) - #const) * #letterCount * (strLen(_cellName) - 1);

        totalArray = new ArrayExtend_RU(Types::String, _number);

        while (i < number)
        {
            i++;
            totalArray.value((i - 1) * _cellMacro + 1, subStr(_text, i, 1));
        }

        if (strLen(_filler) != 0)
        {
            while (i < _number)
            {
                i++;
                totalArray.value((i - 1) * _cellMacro + 1 , _filler);
            }
        }
        if (i)
        {
            excelDocument.insertValue(ComExcelDocument_RU::numToNameCell(firstColumn, _row) + "@SYS35675" +
                                      ComExcelDocument_RU::numToNameCell(firstColumn + (i - 1) * _cellMacro, _row),
                                      totalArray.getArray(), _workSheet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCellsRight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the report cells with values in rigth-to-left consecutive order.
    /// </summary>
    /// <param name="_workSheet">
    /// The workSheet number of the report.
    /// </param>
    /// <param name="_cellName">
    /// The cell name of the report.
    /// </param>
    /// <param name="_row">
    /// The row number of the report.
    /// </param>
    /// <param name="_text">
    /// The string value which is printed into the report cells.
    /// </param>
    /// <param name="_number">
    /// The number of the letters of the string value which is printed into the report cells.
    /// </param>
    /// <param name="_filler">
    /// The default letter value which is printed into the report cells.
    /// </param>
    /// <param name="_cellMacro">
    /// The number of excel cells.
    /// </param>
    protected void fillCellsRight(int _workSheet, str _cellName, int _row, str _text, int _number = strLen(_text), str _filler = '', int _cellMacro = #cellMacro)
    {
        int             i, lastColumn, number;
        ArrayExtend_RU  totalArray;

        number = min(strLen(_text), _number);
        lastColumn = (char2num(_cellName, strLen(_cellName)) - #const) +
                     (char2num(_cellName, 1) - #const) * #letterCount * (strLen(_cellName) - 1);
        i          = number;
        totalArray = new ArrayExtend_RU(Types::String, _number);

        while (i > 0)
        {
            totalArray.value((_number + (i - number - 1)) * _cellMacro + 1, subStr(_text, i, 1));
            i--;
        }

        if (strLen(_filler) != 0)
        {
            i = _number - number;
            while (i > 0)
            {
                totalArray.value((i - 1) * _cellMacro + 1, _filler);
                i--;
            }
        }

        excelDocument.insertValue(ComExcelDocument_RU::numToNameCell(lastColumn + (i - _number + 1) * _cellMacro, _row) + "@SYS35675" +
                                  ComExcelDocument_RU::numToNameCell(lastColumn, _row),
                                  totalArray.getArray(), _workSheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotalPages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the number of the report pages.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The method must be overridden.
    /// </exception>
    protected void fillTotalPages()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>gniCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the GNI code.
    /// </summary>
    /// <param name="_rcoad">
    /// The RCOAD code.
    /// </param>
    /// <returns>
    /// The GNI code.
    /// </returns>
    protected GniCode_RU gniCode(OKATO_RU _rcoad = curRCOAD)
    {
        return TaxAuthorityAddress::findByOKATO_RU(_rcoad).GniCode_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs initialization.
    /// </summary>
    /// <param name="_args">
    /// An <c>Args</c> object to use to initiate the <c>RAssetTaxDeclaration</c> class instance.
    /// </param>
    public void initValue(Args _args)
    {
        journalTable  = _args.record();
        companyInfo   = CompanyInfo::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeclarationSet</Name>
				<Source><![CDATA[
    public Set parmDeclarationSet(Set _declarationSet = declarationSet)
    {
        declarationSet = _declarationSet;

        return declarationSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentDescription</Name>
				<Source><![CDATA[
    public Description parmDocumentDescription(Description _documentDescription = documentDescription)
    {
        documentDescription = _documentDescription;

        return documentDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentType</Name>
				<Source><![CDATA[
    public int parmDocumentType(int  _correctionNumber = correctionNumber)
    {
        correctionNumber = _correctionNumber;
        return correctionNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmployeeId</Name>
				<Source><![CDATA[
    public RAssetEmployee parmEmployeeId(RAssetEmployee _employeeId = employeeId)
    {
        employeeId = _employeeId;

        return employeeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportToER</Name>
				<Source><![CDATA[
    public boolean parmExportToER(boolean _exportToER = exportToER)
    {
        exportToER = _exportToER;

        return exportToER;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReorganization</Name>
				<Source><![CDATA[
    public boolean parmReorganization(boolean  _reorganization = reorganization)
    {
        reorganization = _reorganization;
        return reorganization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReorganizationCode</Name>
				<Source><![CDATA[
    public RAssetTaxReorganizationCode parmReorganizationCode(RAssetTaxReorganizationCode  _reorganizationCode = reorganizationCode)
    {
        reorganizationCode = _reorganizationCode;
        return reorganizationCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReorganizationINN</Name>
				<Source><![CDATA[
    public INN_RU parmReorganizationINN(INN_RU  _reorganizationINN = reorganizationINN)
    {
        reorganizationINN = _reorganizationINN;
        return reorganizationINN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReorganizationRRC</Name>
				<Source><![CDATA[
    public KPPU_RU parmReorganizationRRC(KPPU_RU  _reorganizationRRC = reorganizationRRC)
    {
        reorganizationRRC = _reorganizationRRC;
        return reorganizationRRC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>round</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds the declaration amounts.
    /// </summary>
    /// <param name="_amount">
    /// The amount to round.
    /// </param>
    /// <returns>
    /// The result of the round amount.
    /// </returns>
    protected RAssetAmount round(RAssetAmount _amount)
    {
        return round(_amount, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDeclarationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the tax declaration type.
    /// </summary>
    /// <returns>
    /// The tax declaration type.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The method must be overridden.
    /// </exception>
    public RAssetAssessedTaxRegType taxDeclarationType()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the template name of the report.
    /// </summary>
    /// <returns>
    /// The template name of the report.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The method must be overridden.
    /// </exception>
    protected str templateName()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToER</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the tax declaration into the electronic reports.
    /// </summary>
    public static void exportToER()
    {
        //POSTR1TODO: write method for export report
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>