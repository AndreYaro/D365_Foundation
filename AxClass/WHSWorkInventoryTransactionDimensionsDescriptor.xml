<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkInventoryTransactionDimensionsDescriptor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkInventoryTransactionDimensionsDescriptor</c> class describes the inventoy dimensions associated with certain inventory change.
/// </summary>
public final class WHSWorkInventoryTransactionDimensionsDescriptor
{
    private WHSInventoryStorageDimensions           storageDimensions;
    private WHSInventoryProductTrackingDimensions   productTrackingDimensions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmStorageDimensions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSInventoryStorageDimensions parmStorageDimensions()
    {
        return storageDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductTrackingDimensions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSInventoryProductTrackingDimensions parmProductTrackingDimensions()
    {
        return productTrackingDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKey</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal container getKey()
    {
        return [
            this.parmStorageDimensions().parmInventSiteId(),
            this.parmStorageDimensions().parmInventLocationId(),
            this.parmStorageDimensions().parmWMSLocationId(),
            this.parmStorageDimensions().parmLicensePlateId(),
            this.parmProductTrackingDimensions().parmConfigId(),
            this.parmProductTrackingDimensions().parmInventBatchId(),
            this.parmProductTrackingDimensions().parmInventColorId(),
            this.parmProductTrackingDimensions().parmInventGtdId_RU(),
            this.parmProductTrackingDimensions().parmInventOwnerId_RU(),
            this.parmProductTrackingDimensions().parmInventProfileId_RU(),
            this.parmProductTrackingDimensions().parmInventSerialId(),
            this.parmProductTrackingDimensions().parmInventSizeId(),
            this.parmProductTrackingDimensions().parmInventStatusId(),
            this.parmProductTrackingDimensions().parmInventStyleId(),
            this.parmProductTrackingDimensions().parmInventVersionId(),
            this.parmProductTrackingDimensions().parmInventDimension1(),
            this.parmProductTrackingDimensions().parmInventDimension2(),
            this.parmProductTrackingDimensions().parmInventDimension3(),
            this.parmProductTrackingDimensions().parmInventDimension4(),
            this.parmProductTrackingDimensions().parmInventDimension5(),
            this.parmProductTrackingDimensions().parmInventDimension6(),
            this.parmProductTrackingDimensions().parmInventDimension7(),
            this.parmProductTrackingDimensions().parmInventDimension8(),
            this.parmProductTrackingDimensions().parmInventDimension9(),
            this.parmProductTrackingDimensions().parmInventDimension10(),
            this.parmProductTrackingDimensions().parmInventDimension11(),
            this.parmProductTrackingDimensions().parmInventDimension12()
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventDim convertToInventDim(boolean _ensureExists = false)
    {
        InventDim inventDim;

        this.parmStorageDimensions().copyInventoryDimensionsTo(inventDim);
        this.parmProductTrackingDimensions().copyInventoryDimensionsTo(inventDim);

        if (_ensureExists)
        {
            inventDim = InventDim::findOrCreate(inventDim);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDimensions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkInventoryTransactionDimensionsDescriptor newFromDimensions(
        WHSInventoryStorageDimensions           _storageDimensions,
        WHSInventoryProductTrackingDimensions   _productTrackingDimensions)
    {
        WHSWorkInventoryTransactionDimensionsDescriptor descriptor = new WHSWorkInventoryTransactionDimensionsDescriptor();

        descriptor.storageDimensions = _storageDimensions;
        descriptor.productTrackingDimensions = _productTrackingDimensions;

        return descriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkInventoryTransactionDimensionsDescriptor newFromInventDim(InventDim _inventDim)
    {
        WHSWorkInventoryTransactionDimensionsDescriptor descriptor = new WHSWorkInventoryTransactionDimensionsDescriptor();

        descriptor.storageDimensions = WHSInventoryStorageDimensions::newFromInventDim(_inventDim);
        descriptor.productTrackingDimensions = WHSInventoryProductTrackingDimensions::newFromInventDim(_inventDim);

        return descriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventoryTransaction</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkInventoryTransactionDimensionsDescriptor newFromInventoryTransaction(
        WHSInventoryTransaction _inventoryTransaction,
        WHSInventoryItemSetElement _itemSetElement)
    {
        InventDim inventDim;
        _inventoryTransaction.copyInventoryDimensionsTo(inventDim);
        _itemSetElement.copyInventoryDimensionsTo(inventDim);

        return WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventoryTransactionSumCheckView</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkInventoryTransactionDimensionsDescriptor newFromInventoryTransactionSumCheckView(
        WHSInventoryTransactionSumCheckView _whsInventoryTransactionSumCheckView)
    {
        InventDim inventDim;
        _whsInventoryTransactionSumCheckView.copyInventoryDimensionsTo(inventDim);

        return WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventoryTransactionView</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkInventoryTransactionDimensionsDescriptor newFromInventoryTransactionView(
        WHSInventoryTransactionView _inventoryTransactionView)
    {
        InventDim inventDim;
        _inventoryTransactionView.copyInventoryDimensionsTo(inventDim);

        return WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventDim(inventDim);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>