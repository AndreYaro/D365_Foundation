<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSConsolidatedWorkLineTraverser</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class WHSConsolidatedWorkLineTraverser
{
    private WHSConsolidatedWorkLineVisitor workLineVisitor;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSConsolidatedWorkLineTraverser construct()
    {
        return new WHSConsolidatedWorkLineTraverser();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForVisitor</Name>
				<Source><![CDATA[
    internal static WHSConsolidatedWorkLineTraverser newForVisitor (WHSConsolidatedWorkLineVisitor _visitor)
    {
        WHSConsolidatedWorkLineTraverser retObj = WHSConsolidatedWorkLineTraverser::construct();
        retObj.workLineVisitor = _visitor;
        return retObj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>traverseRun</Name>
				<Source><![CDATA[
    internal void traverseRun(WHSWorkLine _workLineStartedPoint)
    {
        ttsbegin;
        this.traverse(_workLineStartedPoint, 0);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>traverse</Name>
				<Source><![CDATA[
    private void traverse(WHSWorkLine _workLineConsolidated, Counter _depthGuard)
    {
        _depthGuard ++;
        if (_depthGuard >= WHSConsolidatedWorkLine::maxConsolidationHierarchyDepth())
        {
            throw error(strFmt("@WAX:MaximumNumberOfIterationsInMethodReached", WHSConsolidatedWorkLine::maxConsolidationHierarchyDepth(), funcName()));
        }

        WHSWorkLine workLineOrig;
        WHSConsolidatedWorkLine consolidatedWorkLine;
        
        while select RecId from consolidatedWorkLine 
            where consolidatedWorkLine.ConsolidatedWorkLine == _workLineConsolidated.RecId
            join WorkId, LineNum from workLineOrig where workLineOrig.RecId == consolidatedWorkLine.OriginWorkLine
        {
            boolean inInitialPicks = true;
            WHSWorkLine workLineLoop;

            while select forupdate workLineLoop 
                order by WorkId, LineNum asc
                where workLineLoop.WorkId == workLineOrig.WorkId
                   && workLineLoop.LineNum <= workLineOrig.LineNum
                   && workLineLoop.WorkStatus != WHSWorkStatus::Skipped
                   && workLineLoop.WorkStatus  != WHSWorkStatus::Cancelled
                   && (workLineLoop.WorkType == WHSWorkType::Pick || workLineLoop.WorkType == WHSWorkType::Put)
            {
                if (workLineLoop.WorkType == WHSWorkType::Put)
                {
                    inInitialPicks = false;
                }
                else if (inInitialPicks)
                {
                    workLineVisitor.visitInitialPickLine(workLineLoop);
                }
                else
                {
                    this.traverse(workLineLoop, _depthGuard);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>