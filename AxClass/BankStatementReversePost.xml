<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementReversePost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BankStatementReversePost
{
    private BankStmtISOAccountStatement statement;
    private Map voucherReversalDateMap;
    private ReasonTableRef reverseReason;
    private boolean hasNewTrans;
    private boolean reverseStmtWithNewTransEnabled;

    Voucher voucherPosting;
    TransDate accountingDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BankStatementReversePost::reverseBankStatement(_args.record());
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseBankStatement</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void reverseBankStatement(BankStmtISOAccountStatement _statement)
    {
        BankStatementReversePost::reverseBankStatementOnSpecifiedDate(_statement, new Map(Types::String, Types::Date), '', '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseBankStatementOnSpecifiedDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void reverseBankStatementOnSpecifiedDate(BankStmtISOAccountStatement _statement, Map _voucherReversalDateMap, ReasonCode _reasonCode, ReasonComment _reasonComment)
    {
        BankStatementReversePost reversePost = BankStatementReversePost::construct(_statement, _voucherReversalDateMap, _reasonCode, _reasonComment);

        reversePost.post();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatement</Name>
				<Source><![CDATA[
    public void setStatement(BankStmtISOAccountStatement _statement)
    {
        statement = _statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatement</Name>
				<Source><![CDATA[
    public BankStmtISOAccountStatement getStatement()
    {
        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReversalDate</Name>
				<Source><![CDATA[
    internal static void checkReversalDate(TransDate _reversalDate, TransDate _accountingDate)
    {
        if (_reversalDate < _accountingDate)
        {
            throw error("@CashManagement:CannotUseDateEarlierThanAccountingDate");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static BankStatementReversePost construct(BankStmtISOAccountStatement _statement, Map _voucherReversalDateMap, ReasonCode _reasonCode, ReasonComment _reasonComment)
    {
        BankStatementReversePost post = new BankStatementReversePost();
        _statement.reread();
        _statement.selectForUpdate(true);
        post.setStatement(_statement);
        post.voucherReversalDateMap = _voucherReversalDateMap;
        post.reverseReason = ReasonTableRef::find(ReasonTableRef::createReasonTableRef(_reasonCode, _reasonComment));
        post.reverseStmtWithNewTransEnabled = FeatureStateProvider::isFeatureEnabled(BankStatementReversePostWithNewTransactionFeature::instance());

        return post;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    protected boolean post()
    {
        #OCCRetryCount

        this.validateStatement();

        try
        {
            ttsbegin;

            if (reverseStmtWithNewTransEnabled && hasNewTrans)
            {
                if (statement.Voucher)
                {
                    this.reverseNewTransactionsSingleVoucher();
                }
                else
                {
                    this.reverseNewTransactions();
                }

                this.processStatement();

                TaxUncommitted::deleteForDocumentHeader(statement.TableId, statement.RecId, false);

                this.createNewSourceDocument();
            }
            else
            {
                this.processStatement();

                this.processSourceDocument();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error(strFmt("@CashManagement:BankStatementReversePostError", statement.Identification));
        }

        info(strFmt("@CashManagement:BankStatementReversePostSucceed", statement.Identification));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processStatement</Name>
				<Source><![CDATA[
    private void processStatement()
    {
        if (hasNewTrans && reverseStmtWithNewTransEnabled)
        {
            statement.SourceDocumentHeader = 0;
        }

        statement.Voucher = '';
        statement.Posted = false;
        statement.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSourceDocument</Name>
				<Source><![CDATA[
    private void processSourceDocument()
    {
        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(statement, false, SourceDocumentAccountingStatus::InProcess);

        BankStmtISOReportEntry reportEntry;
        while select forupdate reportEntry
            where reportEntry.SourceDocumentLine != 0
                && reportEntry.BankStmtISOAccountStatement == statement.RecId
        {
            SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(reportEntry.SourceDocumentLine, true);
            sourceDocumentLine.delete();
            reportEntry.SourceDocumentLine = 0;
            reportEntry.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseNewTransactions</Name>
				<Source><![CDATA[
    private void reverseNewTransactions()
    {
        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(statement, false, SourceDocumentAccountingStatus::InProcess);

        BankStmtISOReportEntry reportEntry;

        while select forupdate reportEntry
            where reportEntry.IsNewBankDocument == NoYes::Yes
                && reportEntry.BankStmtISOAccountStatement == statement.RecId
        {
            this.checkGeneralJournalEntry(reportEntry.Voucher);

            Voucher voucherToReverse = reportEntry.Voucher;
            Voucher reversalVoucher = NumberSeq::newGetNum(BankParameters::numRefBankStatementReversalVoucher(), false).num();

            TransDate originalDate = reportEntry.AccountingDate;
            TransDate actualReversalDate = voucherReversalDateMap.exists(voucherToReverse) ? voucherReversalDateMap.lookup(voucherToReverse) : originalDate;

            BankStatementReversePost::checkReversalDate(actualReversalDate, originalDate);

            BankStmtISODecimal originalAmount = reportEntry.Amount;

            reportEntry.Amount = 0;
            reportEntry.AccountingDate = actualReversalDate;
            reportEntry.Voucher = reversalVoucher;
            reportEntry.doUpdate();

            TaxUncommitted::deleteForDocumentLine(reportEntry.TableId, reportEntry.RecId, false, true);

            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(reportEntry, false, SourceDocumentLineAccountingStatus::FullyDistributed);

            SourceDocumentLineImplementationList sourceDocumentLineImplementationList = SourceDocumentLineImplementationList::construct();
            sourceDocumentLineImplementationList.addEnd(reportEntry);

            SourceDocumentProcessorFacade::submitSourceDocumentImplementation(
                statement,
                false,
                SourceDocumentAccountingStatus::Completed,
                null,
                curUserId(),
                true,
                sourceDocumentLineImplementationList);

            reportEntry.AccountingDate = originalDate;
            reportEntry.Amount = originalAmount;
            reportEntry.update();

            this.reverseTaxTrans(voucherToReverse, reversalVoucher, reportEntry.RecId, reportEntry.TableId, originalDate, actualReversalDate);

            this.createReversedBankAccountTrans(voucherToReverse, reversalVoucher, actualReversalDate);

            BankStatementReverseHistory::recordReverse(statement, reportEntry, voucherToReverse, reversalVoucher);

            this.createVoucherLink(
                voucherToReverse,
                originalDate,
                reversalVoucher,
                actualReversalDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseNewTransactionsSingleVoucher</Name>
				<Source><![CDATA[
    private void reverseNewTransactionsSingleVoucher()
    {
        this.checkGeneralJournalEntry(Statement.Voucher);

        Voucher voucherToReverse = statement.Voucher;
        Voucher reversalVoucher = NumberSeq::newGetNum(BankParameters::numRefBankStatementReversalVoucher(), false).num();

        TransDate originalDate = statement.AccountingDate;
        TransDate actualReversalDate = voucherReversalDateMap.exists(voucherToReverse) ? voucherReversalDateMap.lookup(voucherToReverse) : originalDate;

        BankStatementReversePost::checkReversalDate(actualReversalDate, originalDate);

        statement.Voucher = reversalVoucher;
        statement.AccountingDate = actualReversalDate;
        statement.update();

        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(statement, false, SourceDocumentAccountingStatus::InProcess);

        SourceDocumentLineImplementationList sourceDocumentLineImplementationList = SourceDocumentLineImplementationList::construct();

        Map originalAmountMap = new Map(Types::Int64, Types::Real);

        BankStmtISOReportEntry reportEntry;
        while select forupdate reportEntry
            where reportEntry.IsNewBankDocument == NoYes::Yes
                && reportEntry.BankStmtISOAccountStatement == statement.RecId
        {
            originalAmountMap.insert(reportEntry.RecId, reportEntry.Amount);
            reportEntry.Amount = 0;

            reportEntry.doUpdate();

            TaxUncommitted::deleteForDocumentLine(reportEntry.TableId, reportEntry.RecId, false, true);

            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(reportEntry, false, SourceDocumentLineAccountingStatus::FullyDistributed);

            sourceDocumentLineImplementationList.addEnd(reportEntry);

            BankStatementReverseHistory::recordReverse(statement, reportEntry, voucherToReverse, reversalVoucher);
        }

        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(
            statement,
            false,
            SourceDocumentAccountingStatus::Completed,
            null,
            curUserId(),
            true,
            sourceDocumentLineImplementationList);

        MapEnumerator mapEnumerator = originalAmountMap.getEnumerator();

        while (mapEnumerator.moveNext())
        {
            BankStmtISOReportEntry entry = BankStmtISOReportEntry::find(mapEnumerator.currentKey(), true);
            entry.Amount = mapEnumerator.currentValue();
            entry.doUpdate();
        }

        this.reverseTaxTrans(voucherToReverse, reversalVoucher, 0, 0, originalDate, actualReversalDate);

        this.createReversedBankAccountTrans(voucherToReverse, reversalVoucher, actualReversalDate);

        statement.AccountingDate = originalDate;
        statement.doUpdate();

        this.createVoucherLink(
            voucherToReverse,
            originalDate,
            reversalVoucher,
            actualReversalDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTaxTrans</Name>
				<Source><![CDATA[
    private void reverseTaxTrans(Voucher _voucherToReverse, Voucher _reversalVoucher, RecId _reverseRecId, TableId _reverseTableId, TransDate _origTransDate, TransDate _reversalDate)
    {
        LedgerVoucher ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Ledger, null);

        ledgerVoucher.addVoucher(LedgerVoucherObject::newVoucher(_reversalVoucher, _reversalDate, SysModule::Ledger));

        TaxReverseTax reverseTax = new TaxReverseTax(
            _reversalVoucher,
            _reversalDate,
            reverseReason.ReasonComment);

        reverseTax.setReverseRecId(_reverseRecId);
        reverseTax.setReverseTableId(_reverseTableId);

        reverseTax.calcAndPost(LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher), _voucherToReverse, _origTransDate);

        if (_reverseRecId == 0)
        {
            TaxTrans taxTrans;
            taxTrans.skipDataMethods(true);
            taxTrans.skipDatabaseLog(true);
            taxTrans.skipEvents(true);

            TaxTrans originalTaxTrans;
            update_recordset taxTrans
                setting SourceRecId = originalTaxTrans.SourceRecId,
                    SourceTableId = originalTaxTrans.SourceTableId
                join originalTaxTrans
                where originalTaxTrans.Voucher == _voucherToReverse
                    && originalTaxTrans.SourceDocumentLine == taxTrans.SourceDocumentLine
                    && taxTrans.Voucher == _reversalVoucher;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewSourceDocument</Name>
				<Source><![CDATA[
    private void createNewSourceDocument()
    {
        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(statement);

        statement.update();

        this.resetDataOnStatementLine();

        BankStmtISOReportEntry reportEntry;
        while select forupdate reportEntry
            where reportEntry.BankStmtISOAccountStatement == statement.RecId
                && reportEntry.IsNewBankDocument == NoYes::Yes
        {
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(reportEntry);
            reportEntry.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatement</Name>
				<Source><![CDATA[
    private void validateStatement()
    {
        if (statement.Posted == false)
        {
            throw error("@CashManagement:UnpostedBankStatementCannotBeReversed");
        }

        hasNewTrans = BankStmtISOReportEntry::existsNewForStatement(statement.RecId) || this.hasNewTaxTrans();

        if (hasNewTrans && !reverseStmtWithNewTransEnabled)
        {
            throw error("@CashManagement:BankStatementPostCannotBeReversed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDataOnStatementLine</Name>
				<Source><![CDATA[
    private void resetDataOnStatementLine()
    {
        BankStmtISOReportEntry reportEntry;
        reportEntry.skipDataMethods(true);
        reportEntry.skipDatabaseLog(true);
        reportEntry.skipEvents(true);

        update_recordset reportEntry
            setting SourceDocumentLine = 0,
                Voucher = '',
                OriginSourceDocumentLine = reportEntry.SourceDocumentLine
            where reportEntry.BankStmtISOAccountStatement == statement.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNewTaxTrans</Name>
				<Source><![CDATA[
    private boolean hasNewTaxTrans()
    {
        TaxTrans taxTrans;
        SourceDocumentLine sourceDocLine;

        select count(RecId) from taxTrans
            exists join sourceDocLine
                where taxTrans.SourceDocumentLine == sourceDocLine.RecId
                    && sourceDocLine.SourceDocumentHeader == statement.SourceDocumentHeader;

        return taxTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGeneralJournalEntry</Name>
				<Source><![CDATA[
    private void checkGeneralJournalEntry(Voucher _voucherToReverse)
    {
        GeneralJournalEntry generalJournalEntry;
        select firstonly RecId from generalJournalEntry
            where generalJournalEntry.SubledgerVoucher == _voucherToReverse;

        if (generalJournalEntry.RecId == 0)
        {
            throw error("@CashManagement:SubLedgerTransferNotFinished");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversedBankAccountTrans</Name>
				<Source><![CDATA[
    private void createReversedBankAccountTrans(Voucher _voucherToReverse, Voucher _reversalVoucher, TransDate _reversalDate)
    {
        BankAccountTrans bankAccountTrans;
        BankStmtISOReportEntry reportEntry;
        while select bankAccountTrans
            exists join reportEntry
            where bankAccountTrans.SourceRecId == reportEntry.RecId
                && bankAccountTrans.SourceTableId == reportEntry.TableId
                && bankAccountTrans.Voucher == _voucherToReverse
                && reportEntry.BankStmtISOAccountStatement == statement.RecId
        {
            BankAccountTrans reversedBankAccountTrans = bankAccountTrans.data();

            reversedBankAccountTrans.Voucher = _reversalVoucher;
            reversedBankAccountTrans.TransDate = _reversalDate;
            reversedBankAccountTrans.Included = NoYes::No;
            reversedBankAccountTrans.Reconciled = NoYes::Yes;
            reversedBankAccountTrans.AmountCur = -bankAccountTrans.AmountCur;
            reversedBankAccountTrans.AmountMST = -bankAccountTrans.AmountMST;
            reversedBankAccountTrans.AmountReportingCurrency = -bankAccountTrans.AmountReportingCurrency;
            reversedBankAccountTrans.BankTransAmountCur = -bankAccountTrans.BankTransAmountCur;
            reversedBankAccountTrans.ReasonRefRecID = reverseReason.RecId;
            reversedBankAccountTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucherLink</Name>
				<Source><![CDATA[
    private void createVoucherLink(Voucher _parentVoucher, TransDate _parentTransDate, Voucher _relatedVoucher, TransDate _relatedTransDate)
    {
        RecId voucherGroupId = LedgerTransVoucherLink::findOrCreateParentVoucherLink(_parentVoucher, _parentTransDate).VoucherGroupId;
        LedgerTransVoucherLink::getCurrentVoucherGroupId(voucherGroupId, _relatedVoucher, _relatedTransDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>