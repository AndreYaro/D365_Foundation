<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepProfileChangeHelper_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is a helper class for asset depreciation profile change.
/// </summary>
class AssetDepProfileChangeHelper_JP
{
    #AssetDepCalculation_JP
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcNewServiceLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the new fixed asset service life after the depreciation method change over
    /// </summary>
    /// <param name="_fromMethod">
    /// The depreciation method changed from
    /// </param>
    /// <param name="_toMethod">
    /// The depreciation method changed to
    /// </param>
    /// <param name="_oldServiceLife">
    /// Old service life
    /// </param>
    /// <param name="_remainingBalanceRate">
    /// Remaining balance rate of the fixed asset
    /// </param>
    /// <returns>
    /// New service life
    /// </returns>
    public static AssetServiceLife calcNewServiceLife(AssetDepreciationMethod _fromMethod, AssetDepreciationMethod _toMethod, AssetServiceLife _oldServiceLife, real _remainingBalanceRate)
    {
        const str FeatureReference = 'JP-00029';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        AssetServiceLife                        ret;
        AssetUndepreciatedBalanceSchedule_JP    schedule;
        AssetUndepreciatedBalance_JP            balance;

        if (AssetDepProfileChange_JPFlight::instance().isEnabled()
            && _remainingBalanceRate == 1) 
        {
            ret = _oldServiceLife;        
        }
        else 
        {
            schedule = AssetUndepreciatedBalanceSchedule_JP::find(_fromMethod, _toMethod);
            if (schedule)
            {
                balance = AssetUndepreciatedBalance_JP::find(schedule.RecId, _oldServiceLife, _remainingBalanceRate);
            }

            if (balance)
            {
                ret = _oldServiceLife - balance.AssetYearsPassed_JP;
            }
            else
            {
                // The data is not available in the %1. Please add data to the %1 or select another schedule.
                throw error(strFmt("@SYS4003038",
                    AssetDepProfileChangeHelper_JP::getUndepreciatedBalanceScheduleName(_fromMethod, _toMethod)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRemainingBalanceRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the remaining balance rate on the speficied date
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// An record of <c>AssetDepBookMap_JP</c>
    /// </param>
    /// <param name="_transDate">
    /// The date to calculate the remaining balance rate
    /// </param>
    /// <returns>
    /// A container [Remaining balance rate, Remaining balance, Acquisition price]
    /// </returns>
    public static container calcRemainingBalanceRate(AssetDepBookMap_JP _assetDepBookMap, AssetTransDate _transDate)
    {
        AssetAmount                     accumulatedDep;
        AssetAmount                     acquisitionPrice;
        AssetAmount                     beginningBalance;
        AssetAmount                     remainingBalance;
        AssetBookType                   assetBookType;
        AssetDepBookTableMap_JP         assetDepBookTableMap;
        AssetDepTableMethodInterface_JP assetDepTableMethodInterface;
        AssetTableInterval              assetTableInterval;
        AssetTransDate                  toDate;
        AssetUndepBalanceLimit_JP       remainingBalanceRate;
        container                       ret = [0, 0 ,0];

        assetBookType = _assetDepBookMap.AssetDepBookMap_JP::assetBookType();
        assetDepBookTableMap = AssetDepBookTableMap_JP::find(assetBookType, _assetDepBookMap.AssetBookId);
        assetTableInterval = _assetDepBookMap.AssetDepBookMap_JP::assetTableInterval(_transDate);

        toDate = assetTableInterval.startOfPeriod(_transDate)-1;
        assetDepTableMethodInterface = _assetDepBookMap.AssetDepBookMap_JP::assetDepTableMethod(toDate);

        if (assetDepTableMethodInterface)
        {
            acquisitionPrice = _assetDepBookMap.AcquisitionPrice;
            if (acquisitionPrice > 0)
            {
                beginningBalance = assetDepTableMethodInterface.getAmountToDepreciate();
                accumulatedDep = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(_assetDepBookMap, dateNull(), toDate);
                while (assetDepTableMethodInterface.next())
                {
                    accumulatedDep += assetDepTableMethodInterface.calc();
                }
                remainingBalance = beginningBalance - accumulatedDep;
                remainingBalanceRate = AssetDepProfileChangeHelper_JP::roundOffRemainingBalanceRate(remainingBalance / acquisitionPrice);
                ret = [remainingBalanceRate, remainingBalance, acquisitionPrice];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRemainingBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check beginning balance at the change is valid
    /// </summary>
    /// <param name="_methodChange">
    /// A method change container [fromMethod, toMethod]
    /// </param>
    /// <param name="_acquisitionPrice">
    /// Acquisition price
    /// </param>
    /// <param name="_remainingBalance">
    /// Beginning balance at the chagne
    /// </param>
    /// <param name="_isShowWarning">
    /// true to show warning message if any
    /// </param>
    /// <returns>
    /// true if valid
    /// </returns>
    public static boolean checkRemainingBalance(container _methodChange, AssetAmount _acquisitionPrice, AssetAmount _remainingBalance, boolean _isShowWarning = false)
    {
        boolean ret = true;
        boolean remainingBalanceLessThanPercentage;

        // remaining balance - NBV at the beginning of the period when depreciation profile is changed
        if (AssetProfileChangeFromODBToOSL_JPFlight::instance().isEnabled())
        {
            remainingBalanceLessThanPercentage = _remainingBalance - _acquisitionPrice * #RemainingDepRatioForTangibleOnOSL <= 0;
        }
        else
        {
            remainingBalanceLessThanPercentage = _remainingBalance - _acquisitionPrice * #ExclusiveDepRatioForTangibleOnOSL <= 0;
        }

        if (_methodChange == [AssetDepreciationMethod::OldDecliningBalance_JP, AssetDepreciationMethod::OldStraightLine_JP] && remainingBalanceLessThanPercentage)
        {
            ret = false;
            if (_isShowWarning)
            {
                if (AssetProfileChangeFromODBToOSL_JPFlight::instance().isEnabled())
                {
                    checkFailed("@FixedAssets:ChangingDepreciationProfileWarning");
                }
                else
                {
                    // The depreciation profile change-over is not allowed as a negative depreciation
                    // amount will happen for the calculation of beginning balance of book value at
                    // the change - acquisition cost * 10%.
                    checkFailed("@SYS4003112");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUndepreciatedBalanceScheduleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets undepreciated balance schedule name
    /// </summary>
    /// <param name="_fromMethod">
    /// The depreciation method is changed from.
    /// </param>
    /// <param name="_toMethod">
    /// The depreciation method is changed to.
    /// </param>
    /// <returns>
    /// Undepreciated balance schedule name.
    /// </returns>
    public static str getUndepreciatedBalanceScheduleName(AssetDepreciationMethod _fromMethod, AssetDepreciationMethod _toMethod)
    {
        str scheduleName;

        if (_fromMethod == AssetDepreciationMethod::OldDecliningBalance_JP
            && _toMethod == AssetDepreciationMethod::OldStraightLine_JP)
        {
            // Undepreciated balance schedules
            scheduleName = "@SYS4003001";
        }
        else
        {
            // Years passed schedules
            scheduleName = "@SYS4003034";
        }

        return scheduleName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidToDepMethodsQueryValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets query value string of valid depreciation methods that can be changed to
    /// </summary>
    /// <param name="_assetType">
    /// Asset type
    /// </param>
    /// <param name="_method">
    /// Depreciation method
    /// </param>
    /// <returns>
    /// Query value string
    /// </returns>
    private static str getValidToDepMethodsQueryValue(AssetType _assetType, AssetDepreciationMethod _method)
    {
        AssetDepMethodChangeSettings_JP settings;

        container   toMethods;
        int         i;
        str         ret;

        settings = AssetDepMethodChangeSettings_JP::construct(_assetType);
        toMethods = settings.getValidToMethods(_method);

        if (toMethods != conNull())
        {
            for (i=1; i<=conLen(toMethods); i++)
            {
                ret += ',' + queryValue(conPeek(toMethods, i));
            }
            ret = subStr(ret, 2, strLen(ret) - 1);
        }
        else
        {
            // filter out all depreciation profile
            ret = '-';
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDepProfileChangeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the depreciation profile can be changed to another one
    /// </summary>
    /// <param name="_assetType">
    /// Asset type
    /// </param>
    /// <param name="_profile">
    /// Fixed asset depreciation profile
    /// </param>
    /// <returns>
    /// true if enabled
    /// </returns>
    public static boolean isDepProfileChangeEnabled(AssetType _assetType, AssetDepreciationProfile _profile)
    {
        AssetDepMethodChangeSettings_JP settings;
        boolean                         ret;

        settings = AssetDepMethodChangeSettings_JP::construct(_assetType);
        ret = settings.enabled(_profile.Method);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupToDepProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds up a lookup for the valid depreciation profiles that can be changed to
    /// </summary>
    /// <param name="callingControl">
    /// <c>FormControl</c> that calls the lookup
    /// </param>
    /// <param name="_assetType">
    /// Asset type
    /// </param>
    /// <param name="_curDepProfile">
    /// Current depreciation profile
    /// </param>
    /// <remarks>
    /// Used both in form <c>AssetDepProfileChangeApply_JP</c> and form <c>AssetDepProfileChange_JP</c>
    /// </remarks>
    public static void lookupToDepProfile(FormControl callingControl, AssetType _assetType, AssetDepreciationProfile _curDepProfile)
    {
        Query query                     = new Query();
        QueryBuildDataSource qbds;
        SysTableLookup sysTableLookup   = SysTableLookup::newParameters(tablenum(AssetDepreciationProfile), callingControl);

        sysTableLookup.addLookupField(fieldnum(AssetDepreciationProfile, Profile), true);
        sysTableLookup.addLookupField(fieldnum(AssetDepreciationProfile, Method));
        sysTableLookup.addLookupField(fieldnum(AssetDepreciationProfile, Interval));
        sysTableLookup.addLookupField(fieldnum(AssetDepreciationProfile, Percentage));

        qbds = query.addDataSource(tablenum(AssetDepreciationProfile));
        qbds.addRange(fieldnum(AssetDepreciationProfile, Method)).value(AssetDepProfileChangeHelper_JP::getValidToDepMethodsQueryValue(_assetType, _curDepProfile.Method));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffRemainingBalanceRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Round off the remaining balance rate.
    /// </summary>
    /// <param name="_rate">
    /// The remaining balance rate that is used for rounding.
    /// </param>
    /// <returns>
    /// The round off value.
    /// </returns>
    public static real roundOffRemainingBalanceRate(real _rate)
    {
        real ret;

        ret = round(_rate, #RemainingBalanceRatePrecision);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the new service life and updates to the <c>AssetDepProfileChange_JP</c> record
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A record of map <c>AssetDepBookMap_JP</c> which the depreciation profile change will be applied to.
    /// </param>
    /// <param name="_changeSettings">
    /// Asset depreciation method change settings
    /// </param>
    /// <param name="_prevDepProfileChange">
    /// previous <c>AssetDepProfileChange_JP</c> record for calculation
    /// </param>
    /// <param name="_curDepProfileChange">
    /// Current <c>AssetDepProfileChange_JP</c> record to be calculated
    /// </param>
    /// <param name="_isUpdateServiceLife">
    /// true to auto calculate the service life
    /// </param>
    /// <param name="_isShowWarning">
    /// true to show warning message if any
    /// </param>
    /// <returns>
    /// true if service life is updated successfully; return false to stop the change
    /// apply from group level to current fixed asset
    /// </returns>
    public static boolean updateServiceLife(
        AssetDepBookMap_JP              _assetDepBookMap,
        AssetDepMethodChangeSettings_JP _changeSettings,
        AssetDepProfileChange_JP        _prevDepProfileChange,
        AssetDepProfileChange_JP        _curDepProfileChange,
        boolean                         _isUpdateServiceLife,
        boolean                         _isShowWarning = false)
    {
        AssetAmount                 acquisitionPrice;
        AssetAmount                 remainingBalance;
        AssetDepreciationProfile    prevDepProfile, curDepProfile;
        AssetServiceLife            oldServiceLife, newServiceLife;
        AssetUndepBalanceLimit_JP   remainingBalanceRate;
        container                   methodChange;
        AssetTransDate              calcStartDate;

        oldServiceLife = AssetDepProfileChangeHelper_JP::determineOldServiceLife(_assetDepBookMap, _prevDepProfileChange);
        prevDepProfile = AssetDepProfileChangeHelper_JP::determinePrevDepProfile(_assetDepBookMap, _prevDepProfileChange);
        curDepProfile = AssetDepProfileChangeHelper_JP::determineCurDepProfile(_curDepProfileChange);
        methodChange = AssetDepProfileChangeHelper_JP::determineMethodChange(prevDepProfile, curDepProfile);
        calcStartDate = AssetDepProfileChangeHelper_JP::determineCalcStartDate(_curDepProfileChange, curDepProfile, prevDepProfile);

        if (AssetDepProfileChangeHelper_JP::canCheckRemainingBalance(
            prevDepProfile, 
            curDepProfile, 
            _isUpdateServiceLife, 
            _changeSettings, 
            methodChange, 
            oldServiceLife))
        {
            // ExclusiveDepRatioForTangibleOnOSL = 0.1
            [remainingBalanceRate, remainingBalance, acquisitionPrice] = AssetDepProfileChangeHelper_JP::calcRemainingBalanceRate(_assetDepBookMap, calcStartDate);
            if (AssetDepProfileChangeHelper_JP::checkRemainingBalance(methodChange, acquisitionPrice, remainingBalance, _isShowWarning) && remainingBalanceRate > 0)
            {
                newServiceLife = AssetDepProfileChangeHelper_JP::calcNewServiceLife(
                    prevDepProfile.Method,
                    curDepProfile.Method,
                    oldServiceLife,
                    remainingBalanceRate);
            }
            else
            {
                return false;
            }

            // use equally divided formula when new service life is less than 2 for the change from ODB to OSL
            if (newServiceLife < #ChangeServiceLifeThreshold && _changeSettings.isUseEquallyDividedFormulaEnabled(methodChange))
            {
                _curDepProfileChange.ServiceLife = #ChangeServiceLifeThreshold;

                if (!AssetProfileChangeFromODBToOSL_JPFlight::instance().isEnabled())
                {
                    _curDepProfileChange.IsUseEquallyDividedFormula = NoYes::Yes;
                }
            }
            else
            {
                _curDepProfileChange.ServiceLife = newServiceLife;
            }
        }
        else
        {
            _curDepProfileChange.ServiceLife = oldServiceLife;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateServiceLife</Name>
				<Source><![CDATA[
    internal static boolean canUpdateServiceLife(
        AssetDepBookMap_JP _assetDepBookMap,
        AssetDepMethodChangeSettings_JP _changeSettings,
        AssetDepProfileChange_JP _prevDepProfileChange,
        AssetDepProfileChange_JP _curDepProfileChange,
        boolean _isUpdateServiceLife,
        boolean _isShowWarning = false)
    {
        AssetAmount acquisitionPrice;
        AssetAmount remainingBalance;
        AssetDepreciationProfile prevDepProfile, curDepProfile;
        AssetServiceLife oldServiceLife;
        AssetUndepBalanceLimit_JP remainingBalanceRate;
        container methodChange;
        AssetTransDate calcStartDate;
        boolean canUpdateServiceLife = true;

        oldServiceLife = AssetDepProfileChangeHelper_JP::determineOldServiceLife(_assetDepBookMap, _prevDepProfileChange);
        prevDepProfile = AssetDepProfileChangeHelper_JP::determinePrevDepProfile(_assetDepBookMap, _prevDepProfileChange);
        curDepProfile = AssetDepProfileChangeHelper_JP::determineCurDepProfile(_curDepProfileChange);
        methodChange = AssetDepProfileChangeHelper_JP::determineMethodChange(prevDepProfile, curDepProfile);
        calcStartDate = AssetDepProfileChangeHelper_JP::determineCalcStartDate(_curDepProfileChange, curDepProfile, prevDepProfile);

        if (AssetDepProfileChangeHelper_JP::canCheckRemainingBalance(
            prevDepProfile,
            curDepProfile,
            _isUpdateServiceLife,
            _changeSettings,
            methodChange,
            oldServiceLife))
        {
            // ExclusiveDepRatioForTangibleOnOSL = 0.1
            [remainingBalanceRate, remainingBalance, acquisitionPrice] = AssetDepProfileChangeHelper_JP::calcRemainingBalanceRate(_assetDepBookMap, calcStartDate);
            if (AssetDepProfileChangeHelper_JP::checkRemainingBalance(methodChange, acquisitionPrice, remainingBalance, _isShowWarning) && remainingBalanceRate > 0)
            {
                canUpdateServiceLife = true;
            }
            else
            {
                canUpdateServiceLife = false;
            }
        }

        return canUpdateServiceLife;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineOldServiceLife</Name>
				<Source><![CDATA[
    private static AssetServiceLife determineOldServiceLife(
        AssetDepBookMap_JP _assetDepBookMap,
        AssetDepProfileChange_JP _prevDepProfileChange)
    {
        AssetServiceLife oldServiceLife;

        if (_prevDepProfileChange)
        {
            oldServiceLife = _prevDepProfileChange.ServiceLife;
        }
        else
        {
            oldServiceLife = _assetDepBookMap.ServiceLife;
        }

        return oldServiceLife;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePrevDepProfile</Name>
				<Source><![CDATA[
    private static AssetDepreciationProfile determinePrevDepProfile(
        AssetDepBookMap_JP _assetDepBookMap,
        AssetDepProfileChange_JP _prevDepProfileChange)
    {
        AssetDepreciationProfile prevDepProfile;

        if (_prevDepProfileChange)
        {
            prevDepProfile = _prevDepProfileChange.DepreciationProfile();
        }
        else
        {
            prevDepProfile = _assetDepBookMap.depreciationProfile();
        }

        return prevDepProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCalcStartDate</Name>
				<Source><![CDATA[
    private static AssetTransDate determineCalcStartDate(
        AssetDepProfileChange_JP _curDepProfileChange,
        AssetDepreciationProfile _curDepProfile, 
        AssetDepreciationProfile _prevDepProfile)
    {
        AssetTransDate calcStartDate;

        if (AssetProfileChangeFromODBToOSL_JPFlight::instance().isEnabled() && _prevDepProfile.Method == AssetDepreciationMethod::OldDecliningBalance_JP
            && _curDepProfile.Method == AssetDepreciationMethod::OldStraightLine_JP)
        {
            calcStartDate = LedgerFiscalCalendar::findFirstDayOfYear(Ledger::fiscalCalendar(), _curDepProfileChange.ValidFrom);
        }
        else
        {
            calcStartDate =  _curDepProfileChange.ValidFrom;
        }

        return calcStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCurDepProfile</Name>
				<Source><![CDATA[
    private static AssetDepreciationProfile determineCurDepProfile(
        AssetDepProfileChange_JP _curDepProfileChange)
    {
        AssetDepreciationProfile curDepProfile;

        curDepProfile = _curDepProfileChange.DepreciationProfile();

        return curDepProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineMethodChange</Name>
				<Source><![CDATA[
    private static container determineMethodChange(
        AssetDepreciationProfile _prevDepProfile, 
        AssetDepreciationProfile _curDepProfile)
    {
        return [_prevDepProfile.Method, _curDepProfile.Method];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCheckRemainingBalance</Name>
				<Source><![CDATA[
    private static boolean canCheckRemainingBalance(
        AssetDepreciationProfile _prevDepProfile,
        AssetDepreciationProfile _curDepProfile,
        boolean _isUpdateServiceLife,
        AssetDepMethodChangeSettings_JP _changeSettings,
        container _methodChange,
        AssetServiceLife _oldServiceLife)
    {
        boolean canCheckRemainingBalance;

        if (_prevDepProfile && _curDepProfile && _isUpdateServiceLife && _changeSettings.isUpdateServiceLifeEnabled(_methodChange) && _oldServiceLife > 0)
        {
            canCheckRemainingBalance = true;
        }

        return canCheckRemainingBalance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>