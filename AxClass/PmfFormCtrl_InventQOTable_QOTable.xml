<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_InventQOTable_QOTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form class control for invent quality order form.
/// </summary>
public class PmfFormCtrl_InventQOTable_QOTable extends PdsCWFormCtrl_Min
{
    InventQualityOrderTable inventQualityOrderTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (#PdsBatchAttribEnabled)
        {
            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(InventQualityOrderTable,PdsBatchAttribAssociate)),
                methodstr(
                    PmfFormCtrl_InventQOTable_QOTable,
                    isPdsBatchAttribAssociateVisible),
                ButtonRuleEffectType::Enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPdsBatchAttribAssociateVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the PdsBatchAttribAssociate button should be visible.
    /// </summary>
    /// <returns>
    /// A boolean indicating if the PdsBatchAttribAssociate button is visible.
    /// </returns>
    public boolean isPdsBatchAttribAssociateVisible()
    {
        return ((inventQualityOrderTable.ReferenceType   == InventTestReferenceType::Production
                || inventQualityOrderTable.ReferenceType   == InventTestReferenceType::Purch
                || inventQualityOrderTable.ReferenceType   == InventTestReferenceType::PmfProdCoBy)
            && inventQualityOrderTable.inventTable().isItemBatchActivated());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instanciates the class.
    /// </summary>
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasource inventQualityOrderTable that is used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(InventQualityOrderTable))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        inventQualityOrderTable = _datasources1;

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the design of the form.
    /// </summary>
    public void updateDesign()
    {
        super();

        this.refreshManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instanciate the PmfFormCtrl_InventQOTable_QOTable class to manage all process functionalies of the form.
    /// </summary>
    /// <returns>
    /// A PmfFormCtrl_InventQOTable_QOTable instance.
    /// </returns>
    public static PmfFormCtrl_InventQOTable_QOTable construct()
    {
        return new PmfFormCtrl_InventQOTable_QOTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the PmfFormCtrl_InventQOTable_QOTable class to manage all process functionalies of the form.
    /// </summary>
    /// <param name="_fr">
    /// FormRun instance of the form.
    /// </param>
    /// <returns>
    /// A PmfFormCtrl_InventQOTable_QOTable instance.
    /// </returns>
    public static PmfFormCtrl_InventQOTable_QOTable newFromForm(
        FormRun _fr)
    {
        PmfFormCtrl_InventQOTable_QOTable frmCtrl;

        frmCtrl = PmfFormCtrl_InventQOTable_QOTable::construct();
        frmCtrl.parmFormRun(_fr);
        frmCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
            [[  fieldNum(InventQualityOrderTable, Qty),
                fieldNum(InventQualityOrderTable, PdsCWQty),
                false ]]));
        frmCtrl.parmItemFieldId(fieldNum(InventQualityOrderTable, ItemId));

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>