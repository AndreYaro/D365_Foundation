<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SpecTransViewerSpecificationIdGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SpecTransViewerSpecificationIdGenerator</c> class finds the unique document number and document type
/// associated with a given <c>SpecTrans</c> record for the most common marked invoice scenarios.
/// For other scenarios, the document number is left blank and the document source derived from the table label.
/// </summary>
internal final class SpecTransViewerSpecificationIdGenerator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateViewerWithSpecificationData</Name>
				<Source><![CDATA[
    internal void updateViewerWithSpecificationData(SpecTransViewerTmp _viewerTmp)
    {
        SpecTrans specTransCompanies;
        SpecTransViewerSpecDocumentTmp documentInfo;

        while select SpecCompany from specTransCompanies
            group by SpecCompany
            exists join _viewerTmp
                where specTransCompanies.RecId == _viewerTmp.SpecTransRecId
        {
            if (SpecTrans::isCompanyValid(specTransCompanies.SpecCompany))
            {
                changecompany(specTransCompanies.SpecCompany)
                {
                    this.addDocumentInfoForKnownScenarios(_viewerTmp, documentInfo);
                }
            }
        }

        this.updateViewerTmpForKnownScenarios(_viewerTmp, documentInfo);

        this.updateViewerTmpForOtherScenarios(_viewerTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDocumentInfoForKnownScenarios</Name>
				<Source><![CDATA[
    private void addDocumentInfoForKnownScenarios(SpecTransViewerTmp _viewerTmp, SpecTransViewerSpecDocumentTmp _documentInfo)
    {
        SpecTransViewerSpecDocumentSource documentSource;
        DictEnum dictEnum = new DictEnum(enumNum(SpecTransMarkedByType));

        SpecTrans specTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalName ledgerJournalName;

        insert_recordset _documentInfo
            (SpecDocumentId, SpecDocumentSource, SpecTransRecId)
            select JournalNum from ledgerJournalTrans
            join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
            join Name from ledgerJournalName
                where ledgerJournalName.JournalName == ledgerJournalTable.JournalName
            join RecId from specTrans
                where specTrans.SpecCompany == ledgerJournalTrans.DataAreaId
                    && specTrans.SpecTableId == ledgerJournalTrans.TableId
                    && specTrans.SpecRecId == ledgerJournalTrans.RecId
            exists join _viewerTmp
                where _viewerTmp.SpecTransRecId == specTrans.RecId;

        CustVendPaymProposalLine custVendPaymProposalLine;
        documentSource = dictEnum.value2Label(SpecTransMarkedByType::PaymentProposal);

        insert_recordset _documentInfo
            (SpecDocumentId, SpecDocumentSource, SpecTransRecId)
            select JournalId, documentSource from custVendPaymProposalLine
            join RecId from specTrans
                where specTrans.SpecCompany == custVendPaymProposalLine.DataAreaId
                    && specTrans.SpecTableId == custVendPaymProposalLine.TableId
                    && specTrans.SpecRecId == custVendPaymProposalLine.RecId
            exists join _viewerTmp
                where _viewerTmp.SpecTransRecId == specTrans.RecId;

        CustTable custTable;
        documentSource = dictEnum.value2Label(SpecTransMarkedByType::Customer);

        insert_recordset _documentInfo
            (SpecDocumentId, SpecDocumentSource, SpecTransRecId)
            select AccountNum, documentSource from custTable
            join RecId from specTrans
                where specTrans.SpecCompany == custTable.DataAreaId
                    && specTrans.SpecTableId == custTable.TableId
                    && specTrans.SpecRecId == custTable.RecId
            exists join _viewerTmp
                where _viewerTmp.SpecTransRecId == specTrans.RecId;

        VendTable vendTable;
        documentSource = dictEnum.value2Label(SpecTransMarkedByType::Vendor);

        insert_recordset _documentInfo
            (SpecDocumentId, SpecDocumentSource, SpecTransRecId)
            select AccountNum, documentSource from vendTable
            join RecId from specTrans
                where specTrans.SpecCompany == vendTable.DataAreaId
                    && specTrans.SpecTableId == vendTable.TableId
                    && specTrans.SpecRecId == vendTable.RecId
            exists join _viewerTmp
                where _viewerTmp.SpecTransRecId == specTrans.RecId;

        SalesTable salesTable;
        documentSource = dictEnum.value2Label(SpecTransMarkedByType::SalesOrder);

        insert_recordset _documentInfo
            (SpecDocumentId, SpecDocumentSource, SpecTransRecId)
            select SalesId, documentSource from salesTable
            join RecId from specTrans
                where specTrans.SpecCompany == salesTable.DataAreaId
                    && specTrans.SpecTableId == salesTable.TableId
                    && specTrans.SpecRecId == salesTable.RecId
            exists join _viewerTmp
                where _viewerTmp.SpecTransRecId == specTrans.RecId;

        PurchTable purchTable;
        documentSource = dictEnum.value2Label(SpecTransMarkedByType::PurchaseOrder);

        insert_recordset _documentInfo
            (SpecDocumentId, SpecDocumentSource, SpecTransRecId)
            select PurchId, documentSource from purchTable
            join RecId from specTrans
                where specTrans.SpecCompany == purchTable.DataAreaId
                    && specTrans.SpecTableId == purchTable.TableId
                    && specTrans.SpecRecId == purchTable.RecId
            exists join _viewerTmp
                where _viewerTmp.SpecTransRecId == specTrans.RecId;

        CustInvoiceTable custInvoiceTable;
        documentSource = dictEnum.value2Label(SpecTransMarkedByType::FreeTextInvoice);

        insert_recordset _documentInfo
            (SpecDocumentId, SpecDocumentSource, SpecTransRecId)
            select InvoiceId, documentSource from custInvoiceTable
            join RecId from specTrans
                where specTrans.SpecCompany == custInvoiceTable.DataAreaId
                    && specTrans.SpecTableId == custInvoiceTable.TableId
                    && specTrans.SpecRecId == custInvoiceTable.RecId
            exists join _viewerTmp
                where _viewerTmp.SpecTransRecId == specTrans.RecId;

        SpecContext specContext;
        documentSource = dictEnum.value2Label(SpecTransMarkedByType::Customer);

        insert_recordset _documentInfo
            (SpecDocumentId, SpecDocumentSource, SpecTransRecId)
            select AccountNum, documentSource from custTable
            join specContext
                where custTable.RecId == specContext.CustVendRecId
                    && custTable.TableId == specContext.CustVendTableId
            join RecId from specTrans
                where specTrans.SpecCompany == specContext.DataAreaId
                    && specTrans.SpecTableId == specContext.TableId
                    && specTrans.SpecRecId == specContext.RecId
            exists join _viewerTmp
                where _viewerTmp.SpecTransRecId == specTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateViewerTmpForKnownScenarios</Name>
				<Source><![CDATA[
    private void updateViewerTmpForKnownScenarios(SpecTransViewerTmp _viewerTmp, SpecTransViewerSpecDocumentTmp _documentInfo)
    {
        update_recordset _viewerTmp
            setting SpecDocumentId = _documentInfo.SpecDocumentId,
                SpecDocumentSource = _documentInfo.SpecDocumentSource
            join _documentInfo
                where _viewerTmp.SpecTransRecId == _documentInfo.SpecTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateViewerTmpForOtherScenarios</Name>
				<Source><![CDATA[
    private void updateViewerTmpForOtherScenarios(SpecTransViewerTmp _viewerTmp)
    {
        SpecTrans specTrans;
        Map tableIdToLabelMap = new Map(Types::Int64, Types::String);

        while select SpecTableId from specTrans
            group by specTrans.SpecTableId
            where specTrans.SpecTableId != tableNum(LedgerJournalTrans)
                && specTrans.SpecTableId != tableNum(CustVendPaymProposalLine)
                && specTrans.SpecTableId != tableNum(CustTable)
                && specTrans.SpecTableId != tableNum(VendTable)
                && specTrans.SpecTableId != tableNum(SalesTable)
                && specTrans.SpecTableId != tableNum(PurchTable)
                && specTrans.SpecTableId != tableNum(CustInvoiceTable)
                && specTrans.SpecTableId != tableNum(SpecContext)
            exists join _viewerTmp
                where specTrans.RecId == _viewerTmp.SpecTransRecId
        {
            SpecTransViewerSpecDocumentSource tableLabel = this.getTableLabel(specTrans.SpecTableId);

            if (tableLabel)
            {
                tableIdToLabelMap.insert(specTrans.SpecTableId, tableLabel);
            }
        }

        MapEnumerator tableLabelsEnumerator = tableIdToLabelMap.getEnumerator();

        while (tableLabelsEnumerator.moveNext())
        {
            update_recordset _viewerTmp
                setting SpecDocumentSource = tableLabelsEnumerator.currentValue()
                where _viewerTmp.SpecDocumentSource == ''
                exists join specTrans
                    where specTrans.SpecTableId == tableLabelsEnumerator.currentKey()
                        && specTrans.RecId == _viewerTmp.SpecTransRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableLabel</Name>
				<Source><![CDATA[
    private SpecTransViewerSpecDocumentSource getTableLabel(RefTableId _tableId)
    {
        SpecTransViewerSpecDocumentSource tableName;
        DictTable dictTable = new DictTable(_tableId);

        if (dictTable)
        {
            tableName = dictTable.label();
        }

        return tableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static SpecTransViewerSpecificationIdGenerator construct()
    {
        return new SpecTransViewerSpecificationIdGenerator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>