<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdWIPLedgerConflictInventTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdWIPLedgerConflictInventTrans</c> class executes the extraction and verification of the
///    inventory transactions data, and calculates the balance for inventory.
/// </summary>
public class ProdWIPLedgerConflictInventTrans extends ProdWIPLedgerConflictTransBase
{
    #define.qbdOr          ('||')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and runs as an asynchronous task.
    /// </summary>
    /// <returns>The created asynchronous task.</returns>
    public System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(ProdWIPLedgerConflictInventTrans),
                                                          staticMethodStr(ProdWIPLedgerConflictInventTrans, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    private static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        ProdWIPLedgerConflictInventTrans  dataCollectionTask = new ProdWIPLedgerConflictInventTrans();
        container                         packedDataCollectionTask;

        [packedDataCollectionTask] = params;
        dataCollectionTask.unpack(packedDataCollectionTask);

        dataCollectionTask.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addConflictMessagePhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a conflict message to the specified list of conflicts if a conflict has been detected on a
    /// physical transaction.
    /// </summary>
    /// <param name="_conflicts">
    /// The list of conflicts to add the conflict messages to.
    /// </param>
    /// <param name="_inventValueTransUnionAll">
    /// The view buffer that has inventory transaction data.
    /// </param>
    /// <param name="_modelGroupId">
    /// The item model group for the conflicting transaction.
    /// </param>
    /// <remarks>
    /// This method does not indicate that a conflict has occurred.
    /// </remarks>
    protected void addConflictMessagePhysical(
        List                        _conflicts,
        InventValueTransUnionAll    _inventValueTransUnionAll,
        InventModelGroupId          _modelGroupId)
    {
        // Apply site name to message if prodparameters are site specific
        String255 applySiteName(
            ProdParametersDim   _prodParametersDim,
            String255           _siteMessage,
            String255           _noSiteMessage)
        {
            String255   retVal;

            if (ProdParameters::find().ProdParamInventDimLookup == ProdParamInventDimLookup::Company)
            {
                retVal = _noSiteMessage;
            }
            else
            {
                retVal = strFmt(_siteMessage, _prodParametersDim.siteName());
            }

            return retVal;
        }

        // Always add this message
        if (InventModelGroup::find(_modelGroupId).PostOnhandPhysical == NoYes::No)
        {
            _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(strFmt("@GLS3800112", _modelGroupId)));
        }
        else
        {
            _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(strFmt("@GLS3800113", _modelGroupId)));
        }

        switch (_inventValueTransUnionAll.ReferenceCategory)
        {
            case InventTransType::ProdLine:
                ProdParametersDim prodParametersDim = ProdParametersDim::find(_inventValueTransUnionAll.InventDimId);
                if (prodParametersDim.PostPickList == NoYes::No)
                {
                    _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(applySiteName(prodParametersDim, "@GLS3800114", "@GLS3800116")));
                }
                else
                {
                    _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(applySiteName(prodParametersDim, "@GLS3800115", "@GLS3800117")));
                }
                break;
            case InventTransType::Production:
                prodParametersDim = ProdParametersDim::find(_inventValueTransUnionAll.InventDimId);
                if (prodParametersDim.PostReportedFinished == NoYes::No)
                {
                    _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(applySiteName(prodParametersDim, "@GLS3800118", "@GLS3800120")));
                }
                else
                {
                    _conflicts.addEnd(InventLedgerConflictMessage::newFromParm(applySiteName(prodParametersDim, "@GLS3800119", "@GLS3800121")));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query that finds inventory transactions in a given period.
    /// </summary>
    /// <returns>
    ///    A query that finds inventory transactions.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query buildQuery()
    {
        Query                   query = new Query();
        List                    includedRefCategories = new List(Types::Enum);
        boolean                 firstField = true;
        str                     rangeValue              = '';
        str                     postingTypeField        = fieldStr(InventValueTransUnionAll, ReferenceCategory);

        QueryBuildDataSource qbdsInventValueTransUnionAll = query.addDataSource(tableNum(InventValueTransUnionAll));
        qbdsInventValueTransUnionAll.addRange(fieldNum(InventValueTransUnionAll, TransDate)).value(SysQuery::range(
            inventLedgerConflictContract.parmInventCostDateCodeContract().parmFromDate(),
            inventLedgerConflictContract.parmInventCostDateCodeContract().parmToDate()));

        qbdsInventValueTransUnionAll.addSelectionField(fieldNum(InventValueTransUnionAll, Amount), SelectionField::Sum);

        qbdsInventValueTransUnionAll.orderMode(OrderMode::GroupBy);
        qbdsInventValueTransUnionAll.addGroupByField(fieldNum(InventValueTransUnionAll, TransDate));
        qbdsInventValueTransUnionAll.addGroupByField(fieldNum(InventValueTransUnionAll, InventTransId));
        qbdsInventValueTransUnionAll.addGroupByField(fieldNum(InventValueTransUnionAll, ItemId));
        qbdsInventValueTransUnionAll.addGroupByField(fieldNum(InventValueTransUnionAll, IsPosted));
        qbdsInventValueTransUnionAll.addGroupByField(fieldNum(InventValueTransUnionAll, PostingType));
        qbdsInventValueTransUnionAll.addGroupByField(fieldNum(InventValueTransUnionAll, PostingTypeOffset));
        qbdsInventValueTransUnionAll.addGroupByField(fieldNum(InventValueTransUnionAll, ReferenceCategory));
        qbdsInventValueTransUnionAll.addGroupByField(fieldNum(InventValueTransUnionAll, InventTransPostingType));
        qbdsInventValueTransUnionAll.addGroupByField(fieldNum(InventValueTransUnionAll, LedgerDimension));
        qbdsInventValueTransUnionAll.addGroupByField(fieldNum(InventValueTransUnionAll, LedgerDimensionOffset));
        qbdsInventValueTransUnionAll.addGroupByField(fieldNum(InventValueTransUnionAll, InventDimId));
        qbdsInventValueTransUnionAll.addGroupByField(fieldNum(InventValueTransUnionAll, Voucher));
        qbdsInventValueTransUnionAll.addGroupByField(fieldNum(InventValueTransUnionAll, UnionAllBranchId));

        includedRefCategories.addEnd(InventTransType::Production);
        includedRefCategories.addEnd(InventTransType::ProdLine);
        includedRefCategories.addEnd(InventTransType::KanbanJobProcess);
        includedRefCategories.addEnd(InventTransType::KanbanJobTransferReceipt);
        includedRefCategories.addEnd(InventTransType::KanbanJobTransferIssue);
        includedRefCategories.addEnd(InventTransType::KanbanJobPickingList);
        includedRefCategories.addEnd(InventTransType::KanbanEmptied);
        includedRefCategories.addEnd(InventTransType::KanbanJobWIP);
        includedRefCategories.addEnd(InventTransType::PmfProdCoBy);

        ListEnumerator listEnumerator = includedRefCategories.getEnumerator();
        while (listEnumerator.moveNext())
        {
            if (!firstField)
            {
                rangeValue += ' ' + #qbdOr + ' ';
            }
            else
            {
                firstField = false;
            }
            rangeValue += strFmt('(%1 == %2)', postingTypeField, queryValue(enum2int(listEnumerator.current())));
        }

        qbdsInventValueTransUnionAll.addRange(fieldNum(InventValueTransUnionAll, ReferenceCategory)).value(rangeValue);

        qbdsInventValueTransUnionAll.addRange(fieldNum(InventValueTransUnionAll, Amount)).value(
            strFmt('( (%1 != %2) || (%3 != %4) )',
                   fieldStr(InventValueTransUnionAll, Amount), 0,
                   fieldStr(InventValueTransUnionAll, IsPosted), any2int(NoYes::No)));

        if (inventLedgerConflictContract.parmExcludePhysicalToLedger() == NoYes::Yes)
        {
            // Transactions that are physical and not posted should be excluded
            // This is achieved by adding this range:
            // InventTransPostingType != InventTransPostingType::Physical or IsPosted != NoYes::No
            qbdsInventValueTransUnionAll.addRange(fieldNum(InventValueTransUnionAll, InventTransPostingType)).value(
                strFmt('( (%1 != %2) || (%3 != %4) )',
                fieldStr(InventValueTransUnionAll, InventTransPostingType),
                any2int(InventTransPostingType::Physical),
                fieldStr(InventValueTransUnionAll, IsPosted),
                any2int(NoYes::No)));
        }

        QueryBuildDataSource qbdsInventTable = qbdsInventValueTransUnionAll.addDataSource(tableNum(InventTable));
        qbdsInventTable.addGroupByField(fieldNum(InventTable, ItemType));
        qbdsInventTable.addLink(fieldNum(InventValueTransUnionAll, ItemId), fieldNum(InventTable, ItemId));
        qbdsInventTable.joinMode(JoinMode::InnerJoin);
        qbdsInventTable.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsInventModelGroupItem = qbdsInventTable.addDataSource(tableNum(InventModelGroupItem));
        qbdsInventModelGroupItem.joinMode(JoinMode::OuterJoin);
        qbdsInventModelGroupItem.fetchMode(QueryFetchMode::One2One);
        qbdsInventModelGroupItem.relations(true);
        qbdsInventModelGroupItem.addGroupByField(fieldNum(InventModelGroupItem, ModelGroupId));

        // Filter on dimension attribute if selected in the dialog
        if (inventLedgerConflictContract.parmDimensionAttribute())
        {
            QueryBuildDataSource qbdsDimAttrValueComb = qbdsInventValueTransUnionAll.addDataSource(tableNum(DimensionAttributeValueCombination));
            qbdsDimAttrValueComb.addLink(fieldNum(InventValueTransUnionAll, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));
            if (inventLedgerConflictContract.parmIncludeBlankDimensions())
            {
                qbdsDimAttrValueComb.joinMode(JoinMode::OuterJoin);
            }
            else
            {
                qbdsDimAttrValueComb.joinMode(JoinMode::InnerJoin);
            }
            qbdsDimAttrValueComb.fetchMode(QueryFetchMode::One2One);
            qbdsDimAttrValueComb.addGroupByField(fieldNum(DimensionAttributeValueCombination, TableId)); // Trick to avoid selection of fields
            QueryBuildDataSource qbdsDimAttrLevelValueView = qbdsDimAttrValueComb.addDataSource(tableNum(DimensionAttributeLevelValueView));
            qbdsDimAttrLevelValueView.addLink(fieldNum(DimensionAttributeValueCombination, RecId), fieldNum(DimensionAttributeLevelValueView, ValueCombinationRecId));
            qbdsDimAttrLevelValueView.fetchMode(QueryFetchMode::One2One);
            qbdsDimAttrLevelValueView.addRange(fieldNum(DimensionAttributeLevelValueView, DimensionAttribute)).value(queryValue(inventLedgerConflictContract.parmDimensionAttribute()));
            if (inventLedgerConflictContract.parmIncludeBlankDimensions())
            {
                qbdsDimAttrLevelValueView.joinMode(JoinMode::NoExistsJoin);
            }
            else
            {
                qbdsDimAttrLevelValueView.joinMode(JoinMode::InnerJoin);
                qbdsDimAttrLevelValueView.addRange(fieldNum(DimensionAttributeLevelValueView, EntityInstance)).value(queryValue(inventLedgerConflictContract.parmEntityInstance()));
            }
            qbdsDimAttrValueComb.addGroupByField(fieldNum(DimensionAttributeLevelValueView, TableId)); // Trick to avoid selection of fields
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForConflicts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for conflicts in inventory transactions. The inventory transactions are stored in the
    ///    <c>InventValueTransUnionAll</c> view buffer.
    /// </summary>
    /// <param name="_inventValueTransUnionAll">
    ///    The view buffer with inventory transaction data.
    /// </param>
    /// <param name="_itemType">
    ///    The item type for the transaction.
    /// </param>
    /// <param name="_itemGroupId">
    ///    The item group for the transaction.
    /// </param>
    /// <returns>
    ///    A list of conflict messages if any conflicts were detected.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected List checkForConflicts(
        InventValueTransUnionAll    _inventValueTransUnionAll,
        ItemType                    _itemType,
        ItemGroupId                 _itemGroupId)
    {
        List    retVal = new List(Types::Class);

        // Apply main account rules
        if (_inventValueTransUnionAll.IsPosted)
        {
            this.validateMainAccount(retVal, _inventValueTransUnionAll.LedgerDimension, _inventValueTransUnionAll.LedgerDimensionOffset, _inventValueTransUnionAll.PostingType, _inventValueTransUnionAll.PostingTypeOffset);
        }

        // Apply posting rules
        if (_itemType == ItemType::Item || _itemType == ItemType::Service)
        {
            boolean conflict = this.postingRulePhysicalOrFinancialNotPosted(_inventValueTransUnionAll);

            if (conflict)
            {
                if (_inventValueTransUnionAll.InventTransPostingType == InventTransPostingType::Financial)
                {
                    this.addConflictMessageFinancial(retVal, _inventValueTransUnionAll.PostingType, _itemGroupId);
                }
                else
                {
                    this.addConflictMessagePhysical(retVal, _inventValueTransUnionAll, _itemGroupId);
                }
            }
        }

        // All transactions with blank dimensions should have a conflict message
        if (inventLedgerConflictContract.parmIncludeBlankDimensions())
        {
            retVal.addEnd(InventLedgerConflictMessage::newFromParm("@SYS332489"));
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingRulePhysicalOrFinancialNotPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a conflict has occurred on a non-transfer or non-journal financial transaction.
    /// </summary>
    /// <param name="_inventValueTransUnionAll">
    ///    A view buffer that has inventory transaction data.
    /// </param>
    /// <returns>
    ///    true if a conflict has been detected; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean postingRulePhysicalOrFinancialNotPosted(InventValueTransUnionAll _inventValueTransUnionAll)
    {
        return this.isReferenceCategoryProdLineOrProduction(_inventValueTransUnionAll.ReferenceCategory)
            && (_inventValueTransUnionAll.InventTransPostingType == InventTransPostingType::Physical
            || _inventValueTransUnionAll.InventTransPostingType == InventTransPostingType::Financial)
            && !_inventValueTransUnionAll.IsPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the data collection that includes extraction and verification of the inventory
    /// transactions and calculates the balance for inventory.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        InventValueReportParm               inventValueReportParm;
        SRSDynaLink                         dynaLink = new SRSDynaLink();
        AmountMST                           balance = 0;
        InventLedgerConflictTmpBalance      inventLedgerConflictTmpBalance;
        InventLedgerConflictTmpConflict     inventLedgerConflictTmpConflict;
        Map                                 inventoryRelevantFields = new Map(Types::String, Types::Container);

        // Prepare drillThrough string
        dynaLink.context(SRSDynaLink::getReportRunContext(inventLedgerConflictContract.parmSRSPrintMediumType()));
        dynaLink.clientMenuFunction(menuitemDisplayStr(InventTransVoucher), MenuItemType::Display);
        dynaLink.tableId(tableNum(InventTransOrigin));

        Query query = this.buildQuery();

        // Fields from the temporary table that are relevant to the Inventory query are applied
        inventoryRelevantFields.insert(fieldStr(InventLedgerConflictTmpConflict, ItemId),
                                       [fieldNum(InventValueTransUnionAll, ItemId),
                                       tableNum(InventValueTransUnionAll)]);

        inventoryRelevantFields.insert(fieldStr(InventLedgerConflictTmpConflict, ReferenceCategory),
                                       [fieldNum(InventValueTransUnionAll, ReferenceCategory),
                                       tableNum(InventValueTransUnionAll)]);

        inventoryRelevantFields.insert(fieldStr(InventLedgerConflictTmpConflict, InventTransId),
                                       [fieldNum(InventValueTransUnionAll, InventTransId),
                                       tableNum(InventValueTransUnionAll)]);

        InventLedgerConflictInit::applyInputQuery(inventoryRelevantFields, inventLedgerConflictContract.parmQuery(), query);
        QueryRun queryRun = new QueryRun(query);

        ttsbegin;

        inventValueReportParm.SessionId = inventLedgerConflictContract.parmSessionId();
        inventValueReportParm.FromDate  = inventLedgerConflictContract.parmInventCostDateCodeContract().parmFromDate();
        inventValueReportParm.insert();

        while (queryRun.next())
        {
            InventValueTransUnionAll inventValueTransUnionAll = queryRun.get(tableNum(InventValueTransUnionAll));
            InventTable              inventTable              = queryRun.get(tableNum(InventTable));
            InventModelGroupItem     inventModelGroupItem     = queryRun.get(tableNum(InventModelGroupItem));

            inventValueTransUnionAll.Amount = -inventValueTransUnionAll.Amount;
            List comments = this.checkForConflicts(inventValueTransUnionAll, inventTable.ItemType, inventModelGroupItem.ModelGroupId);
            if (comments.elements() > 0)
            {
                ListEnumerator listEnumerator = comments.getEnumerator();
                int messageNumber = 1;
                while (listEnumerator.moveNext())
                {
                    dynaLink.recordKey(queryValue(fieldNum(InventTransOrigin, RecId)) + ':' + queryValue(InventTransOrigin::findByInventTransId(inventValueTransUnionAll.InventTransId).RecId));
                    InventLedgerConflictMessage inventLedgerConflictMessage = listEnumerator.current();

                    inventLedgerConflictTmpConflict.ItemId              = inventValueTransUnionAll.ItemId;

                    if (messageNumber > 1)
                    {
                        inventLedgerConflictTmpConflict.Amount          = 0;
                    }
                    else
                    {
                        inventLedgerConflictTmpConflict.Amount          = inventLedgerConflictMessage.parmAmountMultiplier() * inventValueTransUnionAll.Amount;
                    }

                    inventLedgerConflictTmpConflict.InventTransId       = inventValueTransUnionAll.InventTransId;
                    inventLedgerConflictTmpConflict.ReferenceCategory   = inventValueTransUnionAll.ReferenceCategory;
                    inventLedgerConflictTmpConflict.TransDate           = inventValueTransUnionAll.TransDate;
                    inventLedgerConflictTmpConflict.PrintAsterisk       = false;
                    inventLedgerConflictTmpConflict.DrillThroughAction  = dynaLink.url();
                    inventLedgerConflictTmpConflict.MessageNumber       = messageNumber;
                    inventLedgerConflictTmpConflict.Comment             = inventLedgerConflictMessage.parmMessage();
                    inventLedgerConflictTmpConflict.SessionId           = inventLedgerConflictContract.parmSessionId();
                    inventLedgerConflictTmpConflict.ReportId            = inventLedgerConflictContract.parmReportId();
                    inventLedgerConflictTmpConflict.ReportDate          = inventLedgerConflictContract.parmReportDate();
                    inventLedgerConflictTmpConflict.ResourceType        = InventValueReportResourceType::Material;
                    inventLedgerConflictTmpConflict.insert();

                    messageNumber++;
                }
            }
            // Only physical transactions are included in the balance. Service items are not part of the balance, unless comsuned in production
            if (inventValueTransUnionAll.InventTransPostingType == InventTransPostingType::Physical &&
                (inventTable.ItemType != ItemType::Service || inventValueTransUnionAll.ReferenceCategory == InventTransType::ProdLine))
            {
                balance += inventValueTransUnionAll.Amount;
            }
        }

        select forUpdate inventLedgerConflictTmpBalance where
            inventLedgerConflictTmpBalance.Module == InventLedgerConflictModule::WIP &&
            inventLedgerConflictTmpBalance.SessionId    == inventLedgerConflictContract.parmSessionId() &&
            inventLedgerConflictTmpBalance.ReportId     == inventLedgerConflictContract.parmReportId();

        inventLedgerConflictTmpBalance.Balance      += balance;
        inventLedgerConflictTmpBalance.Module       = InventLedgerConflictModule::WIP;
        inventLedgerConflictTmpBalance.SessionId    = inventLedgerConflictContract.parmSessionId();
        inventLedgerConflictTmpBalance.ReportId     = inventLedgerConflictContract.parmReportId();
        inventLedgerConflictTmpBalance.ReportDate   = inventLedgerConflictContract.parmReportDate();
        inventLedgerConflictTmpBalance.write();

        delete_from inventValueReportParm
              where inventValueReportParm.SessionId == inventLedgerConflictContract.parmSessionId();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ProdWIPLedgerConflictInventTrans construct()
    {
        return new ProdWIPLedgerConflictInventTrans();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>