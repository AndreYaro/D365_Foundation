<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzAdvanceInvoiceCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CzAdvanceInvoiceCreate</c> class is responsible for creation of advance invoice for Czech Republic.
/// </summary>
abstract class CzAdvanceInvoiceCreate extends RunBase
{
    SalesPurchTable         salesPurchTable;
    CzAdvanceInvoiceTable   table;
    CzAdvanceInvoiceLine    line;

    DialogField             percentField;
    DialogField             postingProfileField;

    Percent                 percent;
    PostingProfile          postingProfile;

    #define.CurrentVersion(1)
    #LocalMacro.CurrentList
        percent
    #EndMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcLine</Name>
				<Source><![CDATA[
    private Amount calcLine(TaxGroup _taxGroup, TaxItemGroup _taxItemGroup, AmountCur _amountCur)
    {
        TaxTable     taxTable;
        TaxGroupData taxGroupData;
        TaxOnItem    taxOnItem;

        line.TaxGroup     = _taxGroup;
        line.TaxItemGroup = _taxItemGroup;
        line.AmountCur    = CurrencyExchangeHelper::amount(_amountCur * percent / 100, table.CurrencyCode);

        select firstonly TaxCode from taxTable
            where taxTable.TaxType_W     == TaxType_W::VAT        ||
                  taxTable.TaxType_W     == TaxType_W::VATReduced ||
                  taxTable.TaxType_W     == TaxType_W::VATZero
        exists join taxGroupData
            where taxGroupData.TaxCode   == taxTable.TaxCode      &&
                  taxGroupData.TaxGroup  == _taxGroup
        exists join taxOnItem
            where taxOnItem.TaxCode      == taxTable.TaxCode      &&
                  taxOnItem.TaxItemGroup == _taxItemGroup;

        line.Description  = strfmt("@GLS114107", taxTable.TaxCode);

        line.LineNum ++;

        line.insert();

        return line.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineOther</Name>
				<Source><![CDATA[
    private void calcLineOther(Amount _vatNotLiableAmount)
    {
        line.AmountCur = CurrencyExchangeHelper::amount(_vatNotLiableAmount, table.CurrencyCode);

        if (line.AmountCur)
        {
            line.TaxGroup     = "";
            line.TaxItemGroup = "";

            line.Description  = "@GLS114108";

            line.LineNum ++;

            line.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTable</Name>
				<Source><![CDATA[
    protected void calcTable(SalesPurchTable _salesPurchTable)
    {
        SalesPurchTableInterface salesPurchTableInterface = _salesPurchTable.salesPurchTableInterface();

        table.Payment             = salesPurchTableInterface.parmPayment();
        table.initFromPayment();

        if (salesPurchTableInterface.parmPaymentSched())
        {
            table.PaymentSched    = salesPurchTableInterface.parmPaymentSched();
        }

        table.PaymMode            = salesPurchTableInterface.parmPaymMode();
        table.PaymSpec            = salesPurchTableInterface.parmPaymSpec();

        if (! table.InvoiceDate)
        {
            table.InvoiceDate     = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        table.calcDue();

        table.LanguageId          = salesPurchTableInterface.parmLanguageId();
        table.CustVendGroup       = salesPurchTableInterface.parmCustVendGroup();

        table.OrderAccount        = salesPurchTableInterface.parmOrderAccount();
        table.InvoiceAccount      = table.InvoiceAccount ?
                                    table.InvoiceAccount :
                                    (salesPurchTableInterface.parmInvoiceAccount() ?
                                     salesPurchTableInterface.parmInvoiceAccount() :
                                     salesPurchTableInterface.parmOrderAccount());

        table.NumberSequenceGroup = salesPurchTableInterface.parmNumberSequenceGroup();
        table.DefaultDimension    = salesPurchTableInterface.parmDefaultDimension();
        table.CurrencyCode        = salesPurchTableInterface.parmCurrencyCode();

        table.PostingProfile      = postingProfile;

            table.setInvoiceAddress();
        table.setListCode();

        table.WorkerSalesTaker    = HcmWorker::userId2Worker(curuserid());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog ret = super();

        ret.addGroup("@GLS108362");
        percentField = ret.addFieldValue(extendedTypeStr(Percent), percent);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        percent        = percentField.value();
        postingProfile = postingProfileField.value();

        if (percent > 100 || percent <= 0)
        {
            ret = checkFailed("@SYS67342");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLine</Name>
				<Source><![CDATA[
    protected void initLine(CzAdvanceInvoiceTable _table)
    {
        line.initValue();
        line.ParentRecId = _table.RecId;
        line.LineNum     = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        percent = 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SalesPurchTable       _salesPurchTable,
                    CzAdvanceInvoiceTable _table,
                    CzAdvanceInvoiceLine  _line)
    {
        salesPurchTable = _salesPurchTable;
        table           = _table;
        line            = _line;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ #CurrentVersion, #CurrentList ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPercent</Name>
				<Source><![CDATA[
    public Percent parmPercent(Percent _percent = percent)
    {
        percent = _percent;
        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordSortedListLine</Name>
				<Source><![CDATA[
    protected RecordSortedList recordSortedListLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    final public void run()
    {
        Amount              vatNotLiableAmount;
        SalesPurchLine      recordLine;
        RecordSortedList    recordSortedList;
        Map                 taxMap = new Map(Types::Container, Types::Real);
        MapEnumerator       me;
        AmountCur           totalLineAmount, lineAmount;
        TaxGroup            taxGroup;
        TaxItemGroup        taxItemGroup;
        container           mapKey;
        TmpTaxWorkTrans     tmpTrans;
        TaxTable            taxTable;
        boolean             includeTax;
        Tax                 calcTax;
        Set                 taxSet = new Set(Types::Container);
        MarkupTrans         markupTrans;

        ttsbegin;

        this.calcTable(salesPurchTable);
        table.insert();

        vatNotLiableAmount = table.InvoiceAmount;

        this.initLine(table);

        calcTax             = this.tax();
        recordSortedList    = this.recordSortedListLine();

        if (calcTax)
            tmpTrans.setTmpData(calcTax.tmpTaxWorkTrans());

        if (recordSortedList)
        {
            recordLine = this.salesPurchLine();
            if (recordSortedList.first(recordLine))
            {
                do
                {
                    SalesPurchLineInterface  salesPurchLineInterface    = recordLine.salesPurchLineInterface();

                    mapKey     = [ salesPurchLineInterface.parmTaxGroup(), salesPurchLineInterface.parmTaxItemGroup()];
                    lineAmount = this.salesPurchLineAmount(recordLine);

                    using (MarkupValueCalculationContext_W context = new MarkupValueCalculationContext_W())
                    {
                        context.parmLineAmount(lineAmount);
                        context.parmLineQty(this.salesPurchLineQty(recordLine));

                        lineAmount += MarkupTrans::getChargesValue(
                            recordLine.TableId,
                            recordLine.RecId,
                            salesPurchLineInterface.parmTaxGroup(),
                            salesPurchLineInterface.parmTaxItemGroup());
                    }

                    if (lineAmount)
                    {
                        totalLineAmount = lineAmount;

                        if (taxMap.exists(mapKey))
                        {
                            totalLineAmount += taxMap.lookup(mapKey);
                            includeTax       = true;
                        }
                        else
                        {
                            // Exclude non VAT tax groups
                            select firstonly RecId from tmpTrans
                                where tmpTrans.TaxGroup     == salesPurchLineInterface.parmTaxGroup() &&
                                      tmpTrans.TaxItemGroup == salesPurchLineInterface.parmTaxItemGroup()
                            join TableId from taxTable
                                where taxTable.TaxCode      == tmpTrans.TaxCode        &&
                                      taxTable.TaxType_W    != TaxType_W::Other        &&
                                      taxTable.TaxType_W    != TaxType_W::AssessedTax  &&
                                      taxTable.TaxType_W    != TaxType_W::TransportTax &&
                                      taxTable.TaxType_W    != TaxType_W::LandTax;

                            includeTax = tmpTrans.RecId != 0;
                        }

                        if (includeTax)
                        {
                            SalesPurchTableInterface salesPurchTableInterface   = salesPurchLineInterface.salesPurchTable().salesPurchTableInterface();

                            if (!salesPurchTableInterface.parmInclTax())
                            {
                                totalLineAmount += Tax::calcTaxAmount(salesPurchLineInterface.parmTaxGroup(),
                                                                      salesPurchLineInterface.parmTaxItemGroup(),
                                                                      salesPurchLineInterface.taxDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
                                                                      salesPurchLineInterface.parmCurrencyCode(),
                                                                      lineAmount,
                                                                      salesPurchTableInterface.parmTaxModuleType());
                            }

                            taxMap.insert(mapKey, totalLineAmount);
                        }
                    }
                } while (recordSortedList.next(recordLine));
            }
        }
        
        
        while select markupTrans
                    where markupTrans.TransTableId == salesPurchTable.TableId
                        && markupTrans.TransRecId == salesPurchTable.RecId
                        && markupTrans.TaxGroup != ''
                        && markupTrans.TaxItemGroup != ''
        {
            mapKey = [ markupTrans.TaxGroup, markupTrans.TaxItemGroup];
            lineAmount = 0;

            if (!taxSet.in(mapKey))
            {
                using (MarkupValueCalculationContext_W context = new MarkupValueCalculationContext_W())
                {
                    lineAmount += MarkupTrans::getChargesValue(
                                                    salesPurchTable.TableId,
                                                    salesPurchTable.RecId,
                                                    markupTrans.TaxGroup,
                                                    markupTrans.TaxItemGroup);
                }
                taxSet.add(mapKey);

                if (lineAmount)
                {
                    totalLineAmount = lineAmount;

                    if (taxMap.exists(mapKey))
                    {
                        totalLineAmount += taxMap.lookup(mapKey);
                        includeTax = true;
                    }
                    else
                    {
                        // Exclude non VAT tax groups
                        select firstonly RecId from tmpTrans
                                    where tmpTrans.TaxGroup == markupTrans.TaxGroup &&
                                          tmpTrans.TaxItemGroup == markupTrans.TaxItemGroup
                                    join TableId from taxTable
                                    where taxTable.TaxCode == tmpTrans.TaxCode        &&
                                          taxTable.TaxType_W != TaxType_W::Other        &&
                                          taxTable.TaxType_W != TaxType_W::AssessedTax  &&
                                          taxTable.TaxType_W != TaxType_W::TransportTax &&
                                          taxTable.TaxType_W != TaxType_W::LandTax;

                        includeTax = tmpTrans.RecId != 0;
                    }

                    if (includeTax)
                    {
                        SalesPurchTableInterface salesPurchTableInterface = salesPurchTable.salesPurchTableInterface();
                            
                        if (!salesPurchTableInterface.parmInclTax())
                        {
                            totalLineAmount += Tax::calcTaxAmount(
                                                    markupTrans.TaxGroup,
                                                    markupTrans.TaxItemGroup,
                                                    DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                    salesPurchTableInterface.parmCurrencyCode(),
                                                    lineAmount,
                                                    salesPurchTableInterface.parmTaxModuleType());
                        }

                        taxMap.insert(mapKey, totalLineAmount);
                    }
                }
            }
        }
        

        me = taxMap.getEnumerator();
        while (me.moveNext())
        {
            [ taxGroup, taxItemGroup ] = me.currentKey();
            totalLineAmount            = me.currentValue();

            vatNotLiableAmount -= this.calcLine(taxGroup, taxItemGroup, totalLineAmount);
        }

        this.calcLineOther(vatNotLiableAmount);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLine</Name>
				<Source><![CDATA[
    protected SalesPurchLine salesPurchLine()
    {   
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineAmount</Name>
				<Source><![CDATA[
    abstract protected Amount salesPurchLineAmount(SalesPurchLine _line)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    protected Tax tax()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxSign</Name>
				<Source><![CDATA[
    abstract protected int taxSign()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        boolean ret     = true;

        switch (version)
        {
            case #CurrentVersion:
                [ version, #CurrentList ] = _packedClass;
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays advance invoice creation dialog off of the <c>PurchTable</c> form.
    /// </summary>
    /// <param name="_salesPurchTable">
    ///     The <c>SalesPurchTable</c> map used in creating the advance invoice.
    /// </param>
    /// <param name="_table">
    ///     The <c>CzAdvanceInvoiceTable</c> record to modify.
    /// </param>
    /// <param name="_line">
    ///     The <c>CzAdvanceInvoiceTable</c> record to modify.
    /// </param>
    /// <returns>
    ///     true if the advance invoice was created; otherwise, false
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Throw error if incorrect parameters are provided.
    /// </exception>
    public static boolean createFromForm(SalesPurchTable       _salesPurchTable,
                                      CzAdvanceInvoiceTable _table,
                                      CzAdvanceInvoiceLine  _line)
    {
        CzAdvanceInvoiceCreate create;

        if (! _salesPurchTable                                          ||
            (_table.TableId != tablenum(CzCustAdvanceInvoiceTable) &&
             _table.TableId != tablenum(CzVendAdvanceInvoiceTable))     ||
            (_line.TableId  != tablenum(CzCustAdvanceInvoiceLine)  &&
             _line.TableId  != tablenum(CzVendAdvanceInvoiceLine)))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        switch (_table.TableId)
        {
            case (tablenum(CzCustAdvanceInvoiceTable)) :
                create = new CzAdvanceInvoiceCreate_Cust(_salesPurchTable, _table, _line);
                break;
            case (tablenum(CzVendAdvanceInvoiceTable)) :
                create = new CzAdvanceInvoiceCreate_Vend(_salesPurchTable, _table, _line);
                break;
        }

        if (create.prompt())
        {
            CzAdvanceInvoiceCreate::runOnServer(create.pack(), _salesPurchTable, _table, _line);
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Runs the specified packed instance of the <c>CzAdvanceInvoiceCreate</c> class on the server.
    /// </summary>
    /// <param name="_packedCzAdvanceInvoiceCreate">
    ///     A packed instance of the <c>CzAdvanceInvoiceCreate</c> class.
    /// </param>
    /// <param name="_salesPurchTable">
    ///     The <c>SalesPurchTable</c> map used in creating the advance invoice.
    /// </param>
    /// <param name="_table">
    ///     The <c>CzAdvanceInvoiceTable</c> record to modify.
    /// </param>
    /// <param name="_line">
    ///     The <c>CzAdvanceInvoiceTable</c> record to modify.
    /// </param>
    public static void runOnServer(
        container               _packedCzAdvanceInvoiceCreate,
        SalesPurchTable         _salesPurchTable,
        CzAdvanceInvoiceTable   _table,
        CzAdvanceInvoiceLine    _line)
    {
        CzAdvanceInvoiceCreate  create;

        switch (_table.TableId)
        {
            case (tablenum(CzCustAdvanceInvoiceTable)) :
                create = new CzAdvanceInvoiceCreate_Cust(_salesPurchTable, _table, _line);
                break;
            case (tablenum(CzVendAdvanceInvoiceTable)) :
                create = new CzAdvanceInvoiceCreate_Vend(_salesPurchTable, _table, _line);
                break;
        }

        create.unpack(_packedCzAdvanceInvoiceCreate);

        create.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a quantity of the line.
    /// </summary>
    /// <param name = "_line">A table buffer of the map <c>SalesPurchLine</c>.</param>
    /// <returns>A quantity of the line</returns>
    /// <remarks>The method should be overridden.</remarks>
    protected UnitQty salesPurchLineQty(SalesPurchLine _line)
    {
        return 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>