<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceCleanReservationIdBatchJobTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventInventoryDataServiceCleanReservationIdBatchJobTask
{
    RecId           minRecId;
    RecId           maxRecId;
    TableId         sourceTableId;
    internal InventInstrumentationLogger    logger;

    #DEFINE.CurrentVersion(1)
    
    #LOCALMACRO.CurrentList
        minRecId,
        maxRecId,
        sourceTableId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    internal container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    internal boolean unpack(container _packed)
    {
        Version version = RunBase::getVersion(_packed);
    
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packed;
                break;
    
            default:
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinRecId</Name>
				<Source><![CDATA[
    internal Recid parmMinRecId(RecId _minRecId = minRecId)
    {
        minRecId = _minRecId;
        return minRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxRecId</Name>
				<Source><![CDATA[
    internal Recid parmMaxRecId(RecId _maxRecId = maxRecId)
    {
        maxRecId = _maxRecId;
        return maxRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTableId</Name>
				<Source><![CDATA[
    internal TableId parmSourceTableId(TableId _sourceTableId = sourceTableId)
    {
        sourceTableId = _sourceTableId;
        return sourceTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        logger = InventInstrumentationLogger::CreateLogger(classStr(InventInventoryDataServiceCleanReservationIdBatchJobTask));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static InventInventoryDataServiceCleanReservationIdBatchJobTask construct()
    {
        return new InventInventoryDataServiceCleanReservationIdBatchJobTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    internal System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventInventoryDataServiceCleanReservationIdBatchJobTask),
                                                          staticMethodStr(InventInventoryDataServiceCleanReservationIdBatchJobTask, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    internal static InventInventoryDataServiceCleanReservationIdBatchJobTask create(RecId minRecId, RecId maxRecId, TableId sourceTableId)
    {
        InventInventoryDataServiceCleanReservationIdBatchJobTask batchJobTask = new InventInventoryDataServiceCleanReservationIdBatchJobTask();
        batchJobTask.parmMinRecId(minRecId);
        batchJobTask.parmMaxRecId(maxRecId);
        batchJobTask.parmSourceTableId(sourceTableId);
        return batchJobTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    protected static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        InventInventoryDataServiceCleanReservationIdBatchJobTask dataCollectionTask = new InventInventoryDataServiceCleanReservationIdBatchJobTask();
        container packedDataCollectionTask;

        [packedDataCollectionTask] = params;
        dataCollectionTask.unpack(packedDataCollectionTask);

        dataCollectionTask.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run()
    {
        var inventInventoryDataServiceInstrumentationActivity = logger.getInventoryDataServiceActivity();

        using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_CleanReservationIdsPerThread(sourceTableId, minRecId, maxRecId))
        {
            switch (sourceTableId)
            {
                case tableNum(SalesLine):
                    SalesLine salesLine;
                    salesLine.skipDatabaseLog(true);
                    salesLine.skipDataMethods(true);
                    salesLine.skipEvents(true);
                    ttsbegin;
                    update_recordset crosscompany salesLine
                        setting InventoryServiceReservationId = ''
                    where salesLine.RecId >= minRecId
                        && salesLine.RecId <= maxRecId
                        && salesLine.InventoryServiceReservationId != '';
                    ttscommit;
                    ttsbegin;
                    update_recordset crosscompany salesLine
                        setting InventoryServiceAutoOffset = NoYes::No
                    where salesLine.RecId >= minRecId
                        && salesLine.RecId <= maxRecId
                        && salesLine.InventoryServiceAutoOffset == NoYes::Yes;
                    ttscommit;
                    break;
                case tableNum(InventTransferLine):
                    InventTransferLine  inventTransferLine;
                    inventTransferLine.skipDatabaseLog(true);
                    inventTransferLine.skipDataMethods(true);
                    inventTransferLine.skipEvents(true);
                    ttsbegin;
                    update_recordset crosscompany inventTransferLine
                        setting InventoryServiceReservationId = ''
                    where inventTransferLine.RecId >= minRecId
                        && inventTransferLine.RecId <= maxRecId
                        && inventTransferLine.InventoryServiceReservationId != '';
                    ttscommit;
                    ttsbegin;
                    update_recordset crosscompany inventTransferLine
                        setting InventoryServiceAutoOffset = NoYes::No
                    where inventTransferLine.RecId >= minRecId
                        && inventTransferLine.RecId <= maxRecId
                        && inventTransferLine.InventoryServiceAutoOffset == NoYes::Yes;
                    ttscommit;
                    break;
                default:
                    throw new System.NotImplementedException();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>