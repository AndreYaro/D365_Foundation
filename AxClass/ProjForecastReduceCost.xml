<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastReduceCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjForecastReduceCost extends ProjForecastReduce
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRemainingBudgetOnForecastModel</Name>
				<Source><![CDATA[
public boolean checkRemainingBudgetOnForecastModel(ForecastModelId modelId)
{
    return ForecastModel::checkRemainingBudget(modelId, ProjTransType::Cost);
}

]]></Source>
			</Method>
			<Method>
				<Name>constructQuery</Name>
				<Source><![CDATA[
protected Map constructQuery(container fieldList, ForecastModelId modelId, int lumpSum )
{
    Query                   query;
    QueryRun                queryRun;
    QueryBuildDataSource    queryBuildDataSource;
    QueryBuildDataSource    tempDataSource;
    int                     i,j;
    int                     currentField;
    int                     conLength;
    ProjForecastCost        projForecastCost;
    Map                     mapForecast= new Map(Types::Container,Types::Enum);
    container               conParentProjects;
    str                     range;
    ProjParameters          projParameters;
    boolean                 checkCostTemplate=false;
    ProjControlId           controlId;
    ProjCostGroupId         costGroupId;

    conLength=conLen(fieldList);
    query=new Query();

    projParameters = ProjParameters::find();
    queryBuildDataSource = query.addDataSource(tableNum(ProjForecastCost));
    if (lumpSum==1)
    {
        queryBuildDataSource.addRange(fieldNum(ProjForecastCost,ProjAllocateId)).value(strFmt('(%1=="%2") && (%1 != %3)',
                                      fieldStr(ProjForecastCost,ProjAllocateId),
                                      projParameters.ExpenseLumpSumAllocationKey,
                                      SysQuery::valueEmptyString()));
        queryBuildDataSource.addRange(fieldNum(ProjForecastCost,CostPrice)).value(SysQuery::valueNot(0));
    }
    else   //lumpsum=0
    {
        if ( projParameters.ExpenseLumpSumAllocationKey!='')
        {
            queryBuildDataSource.addRange(fieldNum(ProjForecastCost,ProjAllocateId)).value(SysQuery::valueNot(projParameters.ExpenseLumpSumAllocationKey));
            queryBuildDataSource.addRange(fieldNum(ProjForecastCost,Qty)).value(SysQuery::valueNot(0));
        }
        else
        {
            queryBuildDataSource.addRange(fieldNum(ProjForecastCost,Qty)).value(SysQuery::valueNot(0));
        }
    }

    queryBuildDataSource.addRange(fieldNum(ProjForecastCost,ModelId)).value(modelId);
    for (i=1;i<= conLength;i++)
    {
        currentField=conPeek(fieldList,i);
        switch (currentField)
        {
            case ProjReduceCostPriority::Project:
                queryBuildDataSource.addRange(fieldNum(ProjForecastCost,ProjId)).value(this.parmProjId());
                break;

            case ProjReduceCostPriority::Category:
                queryBuildDataSource.addRange(fieldNum(ProjForecastCost,CategoryId)).value(this.parmProjCategoryId());
                break;

            case ProjReduceCostPriority::EmployeeItem:
                //if Resource RecId is empty, empty resource as wildcard
                queryBuildDataSource.addRange(fieldNum(ProjForecastCost, Resource)).value(strFmt('(%1==%2) || (%1 == %3)', fieldStr(ProjForecastCost, Resource), this.parmResource(), queryValue(0)));
                break;

            case ProjReduceCostPriority::ParentProject:
                conParentProjects= ProjTable::ancestors(this.parmProjId());
                conParentProjects +=this.parmProjId();
                range='';
                for (j=1; j<=conLen(conParentProjects); j++)
                {
                    range+=strFmt('(%3.%1 =="%2")',fieldStr(ProjForecastCost, ProjId),conPeek(conParentProjects,j),query.dataSourceTable(tableNum(ProjForecastCost)).name());
                    if (j<conLen(conParentProjects))
                    {
                        range += '||';
                    }
                }
                queryBuildDataSource.addRange(fieldNum(ProjForecastCost,ProjId)).value(range);
                break;

            case ProjReduceCostPriority::EstimateProject:
                tempDataSource=queryBuildDataSource.addDataSource(tableNum(ProjTable));
                tempDataSource.fetchMode(JoinMode::InnerJoin);
                tempDataSource.relations(true);
                tempDataSource.addRange(fieldNum(ProjTable,wipProject)).value(strFmt('((%4.%1=="%2")&&(%4.%1!=%5))||(%4.%1=="%3")',
                fieldStr(ProjTable,ProjId),this.parmEstimateProjId(),this.parmProjId(), query.dataSourceTable(tableNum(ProjTable)).name(),SysQuery::valueEmptyString()));
                break;

            case ProjReduceCostPriority::ActivityNum:
                queryBuildDataSource.addRange(fieldNum(ProjForecastCost,ActivityNumber)).value(this.parmProjActivityNumber()?this.parmProjActivityNumber():SysQuery::valueEmptyString());
                break;

            case ProjReduceCostPriority::CategoryGroup:
                tempDataSource=queryBuildDataSource.addDataSource(tableNum(ProjCategory));
                tempDataSource.fetchMode(JoinMode::InnerJoin);
                tempDataSource.relations(true);
                tempDataSource.addRange(fieldNum(ProjCategory,CategoryGroupId)).value(this.parmProjCategoryGroupId());
                break;

            case ProjReduceCostPriority::CostTemplateLine:
                checkCostTemplate=true;
                break;

            case ProjReduceCostPriority::ProjDate:
                queryBuildDataSource.addRange(fieldNum(ProjForecastCost,StartDate)).value(queryRange('',this.parmProjDate()));
                break;
        }
    }
    queryRun = new QueryRun(query);
    while (queryRun.next())
    {
        projForecastCost=queryRun.get(tableNum(ProjForecastCost));
        if (checkCostTemplate&& this.parmProjCostGroupId() ) //Identify whether to skip this forecast
        {
            controlId=ProjWIPTable::find(ProjTable::find(projForecastCost.ProjId).wipProject).ControlId;
            costGroupId='';
            if (!controlId)
            {
                controlId=ProjParameters::find().CostTemplate;
            }

            if (controlId)
            {
                costGroupId=ProjControlCategory::findCategoryGroup(controlId,projForecastCost.CategoryId);
            }

            if (costGroupId &&  costGroupId!=this.parmProjCostGroupId())
            {
                continue;
            }
        }
        if (lumpSum) //lump sum reduce cost price
        {
            mapForecast.insert([projForecastCost.TransId,0,projForecastCost.CostPrice],NoYes::Yes);
        }
        else //non lump sum reduce qty
        {
            mapForecast.insert([projForecastCost.TransId,projForecastCost.Qty,projForecastCost.costAmount()],NoYes::No);
        }
    }

    return mapForecast;
}

]]></Source>
			</Method>
			<Method>
				<Name>forecastMinus</Name>
				<Source><![CDATA[
protected boolean forecastMinus(ProjTransIdBase _forecastTransId,ForecastModelId _modelId,Qty _qty,CostPrice _costPrice)
{
    ProjForecastCost        projForecastCost;
    ForecastModelId         modelId=_modelId;

    ttsbegin;
    super(_forecastTransId,_modelId, _qty, _costPrice);
    if (!_modelId)
    {
        modelId=ProjForecastCost::find(_forecastTransId).ModelId;
    }

    select forupdate projForecastCost
        where projForecastCost.TransId==_forecastTransId
            &&    projForecastCost.ModelId==modelId;
    if (projForecastCost)
    {
        projForecastCost.Qty = projForecastCost.Qty- _qty;
        projForecastCost.CostPrice = projForecastCost.CostPrice-_costPrice;
        projForecastCost.update();
    }
    ttscommit;

    return true;
}

]]></Source>
			</Method>
			<Method>
				<Name>forecastPlus</Name>
				<Source><![CDATA[
protected boolean forecastPlus(ProjTransIdBase _forecastTransId,ForecastModelId _modelId,Qty _qty,CostPrice _costPrice)
{
    ProjForecastCost        projForecastCost;
    boolean                 ret;
    ForecastModelId         modelId=_modelId;

    ttsbegin;
    if (!_modelId)
    {
        modelId=ProjForecastCost::find(_forecastTransId).ModelId;
    }

    select forupdate projForecastCost
        where projForecastCost.TransId==_forecastTransId
        &&    projForecastCost.ModelId==modelId;
    if (projForecastCost)
    {
        projForecastCost.Qty = projForecastCost.Qty+ _qty;
        projForecastCost.CostPrice = projForecastCost.CostPrice+_costPrice;
        projForecastCost.update();
        ret=true;
    }
    //If the original forecast get deleted, it 's no longer recovered
    else
    {
        ret=false;
    }

    ttscommit;

    return ret;
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>