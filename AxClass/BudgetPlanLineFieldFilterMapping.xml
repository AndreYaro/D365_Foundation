<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLineFieldFilterMapping</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanLineFieldFilterMapping</c> is responsible for maintaining a mapping between budget plan line fields
/// used as row elements and the field and table names used to filter data.
/// </summary>
public class BudgetPlanLineFieldFilterMapping
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getColumnFilterTableFieldMappingForRowElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the mapping between the fields of the <c>BudgetPlanColumnRule</c> table and the <c>BudgetPlanRow</c> table.
    /// </summary>
    /// <param name = "_fieldName">
    /// The value of the <c>FieldName</c> field of the <c>BudgetPlanRow</c> table.
    /// </param>
    /// <returns>
    /// Container that consists of the values of the <c>TableName</c> and the <c>FieldName</c> fields of the <c>BudgetPlanColumnRule</c> table.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The passed fieldName value was not expected.
    /// </exception>
    public static container getColumnFilterTableFieldMappingForRowElement(FieldName _fieldName)
    {
        FieldName budgetPlanColumnFieldName;
        TableName budgetPlanColumnTableName;

        switch (_fieldName)
        {
            case fieldStr(BudgetPlanLine, Comment):
            case fieldStr(BudgetPlanLine, IsRecurring):
            case fieldStr(BudgetPlanLine, IsNewRequest):
            case fieldStr(BudgetPlanLine, BudgetClass):
                budgetPlanColumnTableName = tableStr(BudgetPlanLine);
                budgetPlanColumnFieldName = _fieldName;
                break;

            case fieldStr(BudgetPlanLine, TransactionCurrencyCode):
                budgetPlanColumnTableName = tableStr(Currency);
                budgetPlanColumnFieldName = fieldStr(Currency, CurrencyCode);
                break;

            case fieldStr(BudgetPlanLine, AssetId):
                budgetPlanColumnTableName = tableStr(AssetTable);
                budgetPlanColumnFieldName = _fieldName;
                break;

            case fieldStr(BudgetPlanLine, ProposedAsset):
                budgetPlanColumnTableName = tableStr(BudgetPlanProposedAsset);
                budgetPlanColumnFieldName = fieldStr(BudgetPlanProposedAsset, Name);
                break;

            case fieldStr(BudgetPlanLine, ProposedProject):
                budgetPlanColumnTableName = tableStr(BudgetPlanProposedProject);
                budgetPlanColumnFieldName = fieldStr(BudgetPlanProposedProject, Name);
                break;

            case fieldStr(BudgetPlanLine, ProjectId):
                budgetPlanColumnTableName = tableStr(ProjTable);
                budgetPlanColumnFieldName = fieldStr(ProjTable, ProjId);
                break;

            case fieldStr(BudgetPlanLine, Position):
                budgetPlanColumnTableName = tableStr(HcmPositionForecast);
                budgetPlanColumnFieldName = fieldStr(HcmPositionForecast, Position);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return [budgetPlanColumnTableName, budgetPlanColumnFieldName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryTableFieldNameMappingForRowElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the mapping between the fields of the <c>BudgetPlanRow</c> table with the primary data sources of those fields.
    /// </summary>
    /// <param name = "_fieldName">
    /// The value of the <c>FieldName</c> field of the <c>BudgetPlanRow</c> table.
    /// </param>
    /// <returns>
    /// Container that consists of the values of the <c>TableName</c> and the <c>FieldName</c> fields of the primary table.
    /// </returns>
    public static container getPrimaryTableFieldNameMappingForRowElement(FieldName _fieldName)
    {
        return BudgetPlanLineFieldFilterMapping::getPrimaryTableFieldNameMappingForColumnFilter(
                BudgetPlanLineFieldFilterMapping::getColumnFilterTableFieldMappingForRowElement(_fieldName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryTableFieldNameMappingForColumnFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the mapping between the fields of the <c>BudgetPlanColumnRule</c> table with the primary data sources of those fields.
    /// </summary>
    /// <param name = "_tableFieldNameContainer">
    /// Container that consists of the values of the <c>TableName</c> and the <c>FieldName</c> fields of the <c>BudgetPlanColumnRule</c> table.
    /// </param>
    /// <returns>
    /// Container that consists of the values of the <c>TableName</c> and the <c>FieldName</c> fields of the primary table.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The passed fieldName value was not expected.
    /// </exception>
    public static container getPrimaryTableFieldNameMappingForColumnFilter(container _tableFieldNameContainer)
    {
        TableName budgetPlanColumnTableName, tableName;
        FieldName budgetPlanColumnFieldName, fieldName;

        [budgetPlanColumnTableName, budgetPlanColumnFieldName] = _tableFieldNameContainer;

        switch (budgetPlanColumnTableName)
        {
            case tableStr(BudgetPlanLine):
            case tableStr(AssetTable):
            case tableStr(ProjTable):
            case tableStr(Currency):
                fieldName = BudgetPlanLineFieldFilterMapping::getRowTableFieldMappingForColumnFilter(_tableFieldNameContainer);
                tableName = tableStr(BudgetPlanLine);
                break;

            case tableStr(BudgetPlanProposedAsset):
            case tableStr(BudgetPlanProposedProject):
                [tableName, fieldName] = _tableFieldNameContainer;
                break;

            case tableStr(HcmPositionForecast):
                tableName = tableStr(HcmPosition);
                fieldName = fieldStr(HcmPosition, PositionId);
                break;

            case tableStr(MainAccount):
                // No mapping available in the BudgetPlanLine table
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return [tableName, fieldName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRowTableFieldMappingForColumnFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the mapping between the fields of the <c>BudgetPlanRow</c> table and the <c>BudgetPlanColumnRule</c> table.
    /// </summary>
    /// <param name = "_tableFieldNameContainer">
    /// Container that consists of the values of the <c>TableName</c> and the <c>FieldName</c> fields of the <c>BudgetPlanColumnRule</c> table.
    /// </param>
    /// <returns>
    /// The value of the <c>FieldName</c> field of the <c>BudgetPlanRow</c> table.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The passed fieldName value was not expected.
    /// </exception>
    public static FieldName getRowTableFieldMappingForColumnFilter(container _tableFieldNameContainer)
    {
        TableName budgetPlanColumnTableName;
        FieldName budgetPlanColumnFieldName, fieldName;

        [budgetPlanColumnTableName, budgetPlanColumnFieldName] = _tableFieldNameContainer;

        switch (budgetPlanColumnTableName)
        {
            case tableStr(BudgetPlanLine):
            case tableStr(AssetTable):
                fieldName = budgetPlanColumnFieldName;
                break;

            case tableStr(BudgetPlanProposedAsset):
                if (budgetPlanColumnFieldName == fieldStr(BudgetPlanProposedAsset, Name))
                {
                    fieldName = fieldStr(BudgetPlanLineActiveView, ProposedAsset);
                }
                break;

            case tableStr(BudgetPlanProposedProject):
                if (budgetPlanColumnFieldName == fieldStr(BudgetPlanProposedProject, Name))
                {
                    fieldName = fieldStr(BudgetPlanLineActiveView, ProposedProject);
                }
                break;

            case tableStr(ProjTable):
                if (budgetPlanColumnFieldName == fieldStr(ProjTable, ProjId))
                {
                    fieldName = fieldStr(BudgetPlanLineActiveView, ProjectId);
                }
                break;

            case tableStr(HcmPositionForecast):
                if (budgetPlanColumnFieldName == fieldStr(HcmPositionForecast, Position))
                {
                    fieldName = fieldStr(BudgetPlanLineActiveView, Position);
                }
                break;

            case tableStr(Currency):
                if (budgetPlanColumnFieldName == fieldStr(Currency, CurrencyCode))
                {
                    fieldName = fieldStr(BudgetPlanLineActiveView, TransactionCurrencyCode);
                }
                break;

            case tableStr(MainAccount):
                // No mapping available in the BudgetPlanLine table
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return fieldName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>