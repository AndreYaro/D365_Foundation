<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>StockTransferPriceCalc_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>StockTransferPriceCalc_IN</c> class and its child classes perform calculation
///    of price data for Indian Stock transfer oder.
/// </summary>
internal abstract class StockTransferPriceCalc_IN
{
    protected InventTransferLine_IN inventTransferLineIN;
    protected InventTransferLine inventTransferLine;
    protected InventDim inventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateFromInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>StockTransferPrice_IN</c> with calculated price.
    /// </summary>
    /// <param name="_common">
    ///    The record of <c>InventTransferLine_IN</c> type.
    /// </param>
    /// <param name = "_inventTransferLine">
    ///    The record of <c>InventTransferLine</c> type.
    /// </param>
    /// <returns>
    ///    The <c>StockTransferPrice_IN</c> with calculated price.
    /// </returns>    
    /// <remarks>
    ///    The calculation uses inventory dimension from Invent transfer line. Please use the <c>calculateFromInventTransferLineInventDim</c> method 
    ///    to calculate price fro arbitrary Inventory dimension for example for unsaved data on forms.
    /// </remarks>
    public static StockTransferPrice_IN calculateFromInventTransferLine(InventTransferLine_IN _inventTransferLineIN, InventTransferLine _inventTransferLine)
    {
        StockTransferPriceCalcAttribute_IN attribute = new StockTransferPriceCalcAttribute_IN(_inventTransferLineIN.PriceType);
        StockTransferPriceCalc_IN calculator = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(StockTransferPriceCalc_IN), attribute);

        if (!calculator)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        calculator.inventTransferLine = _inventTransferLine;
        calculator.inventTransferLineIN = _inventTransferLineIN;

        StockTransferPriceCalcContext_IN stockTransferPriceCalcContext = StockTransferPriceCalcContext_IN::current();
        if (stockTransferPriceCalcContext)
        {
            calculator.InventDim = stockTransferPriceCalcContext.parmInventDim();
        }
        else
        {
            calculator.InventDim = _inventTransferLine.inventDim();
        }

        return calculator.calculatePrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFromInventTransferLineInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>StockTransferPrice_IN</c> with calculated price.
    /// </summary>
    /// <param name="_common">
    ///    The record of <c>InventTransferLine_IN</c> type.
    /// </param>
    /// <param name = "_inventTransferLine">
    ///    The record of <c>InventTransferLine</c> type.
    /// </param>
    /// <param name = "_inventDim">
    ///    The record of <c>InventDim</c> type.
    /// </param>
    /// <returns>
    ///    The <c>StockTransferPrice_IN</c> with calculated price.
    /// </returns>
    public static StockTransferPrice_IN calculateFromInventTransferLineInventDim(InventTransferLine_IN _inventTransferLineIN, InventTransferLine _inventTransferLine, InventDim _inventDim)
    {
        StockTransferPrice_IN stockTransferPrice;
        using (StockTransferPriceCalcContext_IN stockTransferPriceCalcContext = StockTransferPriceCalcContext_IN::instance())
        {
            stockTransferPriceCalcContext.parmInventDim(_inventDim);

            stockTransferPrice = StockTransferPriceCalc_IN::calculateFromInventTransferLine(_inventTransferLineIN, _inventTransferLine);
        }
        return stockTransferPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the <c>StockTransferPrice_IN</c>.
    /// </summary>
    /// <returns>
    /// The <c>StockTransferPrice_IN</c> with calculated price.
    /// </returns>
    protected abstract StockTransferPrice_IN calculatePrice()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>