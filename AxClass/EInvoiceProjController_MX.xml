<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>eInvoiceProjController_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceProjController_MX</c> class is a controller class for <c>EInvoiceReport_MX</c>
/// report.
/// </summary>
public class eInvoiceProjController_MX extends EInvoiceCFDIProjController_MX implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the print management configuration into <c>FormLetterReport.</c>
    /// </summary>
    /// <param name = "_formLetterReport">The  <c>FormLetterReport.</c> that will be used in report printing.</param>
    /// <remarks>
    /// Override this method to set print management configuration specific.
    /// </remarks>
    protected void setPrintMgmt(FormLetterReport _formLetterReport)
    {
        if (args && args.caller())
        {
            if (classIdGet(args.caller()) == classNum(ProjFormLetter_Invoice))
            {
                ProjFormLetter projFormLetter = args.caller();

                _formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(projFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Copy)));
                _formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(projFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Original)));
                _formLetterReport.parmUsePrintMgmtDestinations(projFormLetter.usePrintManagement());
                _formLetterReport.parmUseUserDefinedDestinations(projFormLetter.parmUseUserDefinedDestinations());
                usePrintMgmtDestinations = projFormLetter.usePrintManagement();
            }
            else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
            {
                _formLetterReport.parmUsePrintMgmtDestinations(true);
                usePrintMgmtDestinations = true;
            }
            else if (classIdGet(args.caller()) == classNum(ProjPrintInvoice))
            {
                ProjPrintInvoice projPrintInvoice = args.caller();

                _formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(projPrintInvoice.printerSettingsPrintInvoice()));
                _formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(projPrintInvoice.printerSettingsPrintInvoice()));
                _formLetterReport.parmUsePrintMgmtDestinations(false);
                _formLetterReport.parmUseUserDefinedDestinations(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCFDI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if the invoice to be printed is CFDI or CFD.
    /// </summary>
    /// <returns>True if the invoice is a CFDI, false if is CFD.</returns>
    protected boolean isCFDI()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tests whether the <c>CustInvoiceJour</c> record in the <c>Args</c> object has a related
    /// <c>EInvoice</c> record
    /// </summary>
    /// <param name="_args">The <c>Args</c> parameter.</param>
    /// <returns>true if the <c>CustInvoiceJour</c> record in the <c>Args</c> object has a related <c>EInvoice</c> record.</returns>
    public static boolean hasEInvoice(Args _args)
    {
        EInvoiceJour_MX eInvoiceJour_MX;
        ProjInvoiceJour projInvoiceJour;
        RecordSortedList journalList;

        // if we have a record, get a journal list, else posting sent a journa list
        journalList = _args.record() ? FormLetter::createJournalListCopy(_args.record()) : _args.object();

        if (!journalList || !journalList.first(projInvoiceJour))
        {
            throw error("@SYS26348");
        }

        do
        {
            eInvoiceJour_MX = EInvoiceJour_MX::findByRef(tableNum(ProjInvoiceJour), projInvoiceJour.RecId);

            if (!eInvoiceJour_MX)
            {
                return false;
            }
        }
        while (journalList.next(projInvoiceJour));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <c>EInvoiceReport_MX</c> SRS Report.
    /// </summary>
    /// <param name="_args">Args object.</param>
    public static void main(Args _args)
    {
        EInvoiceControllerBase_MX controller = new EInvoiceProjController_MX();

        controller.initialize(_args);

        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>