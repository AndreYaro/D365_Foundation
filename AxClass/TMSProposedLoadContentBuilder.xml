<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSProposedLoadContentBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSProposedLoadContentBuilder</c> class is responsible for building proposed load content.
/// </summary>
public class TMSProposedLoadContentBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildProposedLoadContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds proposed load content.
    /// </summary>
    /// <param name="_packedSupplyDemandQueryRun">
    /// A packed <c>QueryRun</c> object.
    /// </param>
    /// <param name="_loadBuildSupplyDemandType">
    /// The <c>TMSLoadBuildSupplyDemandType</c> type that the content is for.
    /// </param>
    /// <param name="_loadBuildSessionId">
    /// The <c>TMSLoadBuildSessionId</c> ID of the session that creates the proposed content.
    /// </param>
    public void buildProposedLoadContent(
        container                               _packedSupplyDemandQueryRun,
        TMSLoadBuildSupplyDemandType            _loadBuildSupplyDemandType,
        TMSLoadBuildSessionId                   _loadBuildSessionId)
    {
        TMSProposedLoadContentInitiator         proposedLoadContentInitiator;
        TMSLoadBuildStrategyInputSetAssigner    loadBuildStrategyInputSetAssigner;

        loadBuildStrategyInputSetAssigner = TMSLoadBuildStrategyInputSetAssigner::newParameters(_loadBuildSessionId);
        proposedLoadContentInitiator = TMSProposedLoadContentInitiator::newFromParameters(_loadBuildSupplyDemandType);

        this.buildProposedLoadContentFromParameters(_packedSupplyDemandQueryRun,
                                                    _loadBuildSupplyDemandType,
                                                    _loadBuildSessionId,
                                                    loadBuildStrategyInputSetAssigner,
                                                    proposedLoadContentInitiator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProposedLoadContentFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds proposed load content.
    /// </summary>
    /// <param name="_packedSupplyDemandQueryRun">
    /// A packed <c>QueryRun</c> object.
    /// </param>
    /// <param name="_loadBuildSupplyDemandType">
    /// The <c>TMSLoadBuildSupplyDemandType</c> type that the content is for.
    /// </param>
    /// <param name="_loadBuildSessionId">
    /// The <c>TMSLoadBuildSessionId</c> ID of the session that creates the proposed content.
    /// </param>
    /// <param name="_loadBuildStrategyInputSetAssigner">
    /// An instance of the <c>TMSLoadBuildStrategyInputSetAssigner</c> class that is used to determine which sets the proposed load content records will belong to.
    /// </param>
    /// <param name="_proposedLoadContentInitiator">
    /// An instance of the <c>TMSProposedLoadContentInitiator</c> class.
    /// </param>
    public void buildProposedLoadContentFromParameters(
        container                               _packedSupplyDemandQueryRun,
        TMSLoadBuildSupplyDemandType            _loadBuildSupplyDemandType,
        TMSLoadBuildSessionId                   _loadBuildSessionId,
        TMSLoadBuildStrategyInputSetAssigner    _loadBuildStrategyInputSetAssigner,
        TMSProposedLoadContentInitiator         _proposedLoadContentInitiator)
    {
        SysQueryRun                             sysQueryRun;
        RecordInsertList                        insertList;
        TableId                                 sourceTableId;
        TMSProposedLoadContent                  proposedLoadContent;

        sysQueryRun = new sysQueryRun(_packedSupplyDemandQueryRun);

        if (!sysQueryRun)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        ttsBegin;
        sourceTableId = TMSProposedLoadContent::supplyDemandTypeToTableId(_loadBuildSupplyDemandType);

        insertList = new RecordInsertList(tableNum(TMSProposedLoadContent));

        while (sysQueryRun.next())
        {
            proposedLoadContent = this.initTMSProposedLoadContent(_loadBuildSessionId, _proposedLoadContentInitiator, _loadBuildStrategyInputSetAssigner, sysQueryRun.get(sourceTableId));

            if (this.mustCreateProposedLoadContent(proposedLoadContent))
            {
                if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled()
                    && this.isCWItemPresent(proposedLoadContent.InventTransId))
                {
                    continue;
                }

                insertList.add(proposedLoadContent);
            }
        }

        insertList.insertDatabase();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTMSProposedLoadContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>TMSProposedLoadContent</c> buffer that has been initialized.
    /// </summary>
    /// <param name="_loadBuildSessionId">
    /// The <c>TMSLoadBuildSessionId</c> ID of the session that creates the proposed content.
    /// </param>
    /// <param name="_proposedLoadContentInitiator">
    /// An instance of the <c>TMSProposedLoadContentInitiator</c> class.
    /// </param>
    /// <param name="_loadBuildStrategyInputSetAssigner">
    /// An instance of the <c>TMSLoadBuildStrategyInputSetAssigner</c> class that is used to determine which sets the proposed load content records will belong to.
    /// </param>
    /// <param name="_common">
    /// A record that values will be initialized from.
    /// </param>
    /// <returns>
    /// A <c>TMSProposedLoadContent</c> buffer that has been initialized
    /// </returns>
    protected TMSProposedLoadContent initTMSProposedLoadContent(
        TMSLoadBuildSessionId                   _loadBuildSessionId,
        TMSProposedLoadContentInitiator         _proposedLoadContentInitiator,
        TMSLoadBuildStrategyInputSetAssigner    _loadBuildStrategyInputSetAssigner,
        Common                                  _common)
    {
        TMSProposedLoadContent proposedLoadContent;

        proposedLoadContent.LoadBuildSession = _loadBuildSessionId;
        proposedLoadContent.LoadBuildStrategyInputSet = _loadBuildStrategyInputSetAssigner.findOrCreateInputSet(_common).RecId;

        _proposedLoadContentInitiator.initProposedLoadContent(proposedLoadContent, _common);

        return proposedLoadContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateProposedLoadContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the proposed load content should be inserted.
    /// </summary>
    /// <param name="_proposedLoadContent">
    /// A <c>TMSProposedLoadContent</c> buffer.
    /// </param>
    /// <returns>
    /// true if the buffer should be inserted; otherwise, false.
    /// </returns>
    protected boolean mustCreateProposedLoadContent(TMSProposedLoadContent _proposedLoadContent)
    {
        boolean createProposedLoadContent = true;

        if (_proposedLoadContent.Pieces == 0)
        {
            createProposedLoadContent = false;
        }

        return createProposedLoadContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSProposedLoadContentBuilder construct()
    {
        return new TMSProposedLoadContentBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCWItemPresent</Name>
				<Source><![CDATA[
    private boolean isCWItemPresent(InventTransId _inventTransId)
    {
        if (_inventTransId)
        {
            InventTransOrigin inventTransOrigin;

            select firstOnly ItemId from inventTransOrigin
                where inventTransOrigin.InventTransId == _inventTransId;

            if (PdsGlobal::pdsIsCWItem(inventTransOrigin.ItemId))
            {
                warning(strFmt("@WAX:ProposedLoadsDoesNotSupportCW", inventTransOrigin.ItemId));
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>