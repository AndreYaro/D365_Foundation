<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAllocationBasisRulesByBudgetPlan</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the amount and quantity for a specific ledger allocation basis id.
/// </summary>
/// <remarks>
/// <c>LedgerAllocationBasisRulesByBudgetPlan</c> class is similar to <c>LedgerAllocationBasisRules</c> class.
/// </remarks>
public class LedgerAllocationBasisRulesByBudgetPlan
{
    CurrencyCode                    callersMSTCurrency;
    StartDate                       periodStart;
    EndDate                         periodEnd;
    BudgetPlanHeaderRecId           budgetPlanHeader;
    BudgetPlanScenarioRecId         budgetPlanBasisScenarioRecId;
    BudgetPlanUnitOfMeasureRecId    unitofMeasure;
    BudgetPlanScenario              budgetPlanBasisScenario;
    Map                             effectiveDateBasisAllocationMap;
    Map                             effectiveDateBasisAllocationLedgerDestinationMap;
    boolean                         useSourceEffectiveDateForAllocation;
    LineNum                         ledgerAllocationRuleDestinationLineNum;
    BudgetPlanLineEffectiveDate     budgetPlanLineDefaultEffectiveDate;

    private static const LineNum DefaultLineNumber = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBudgetPlanLineSumQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query object and defines its ranges and selected fields based on the <c>LedgerAllocationBasisRule</c> table record id.
    /// </summary>
    /// <param name="_basisId">
    /// Record ID of the <c>LedgerAllocationBasisRule</c> table.
    /// </param>
    /// <param name="_company">
    /// Current company Id.
    /// </param>
    /// <returns>
    /// instance of <c>Query</c> class.
    /// </returns>
    private Query createBudgetPlanLineSumQuery(
        LedgerAllocationBasisNum    _basisId,
        DataAreaId                  _company)
    {
        RecId                           mainAccountDimAttrId;
        RecId                           keyValue;
        str                             emptyStr, queryValueStr;
        Query                           query;
        QueryBuildDataSource            qbds;
        QueryBuildRange                 qbr;
        Map                             dimensionRange;
        Set                             dimensionRangeIncludeEmpty;
        LedgerAllocationBasisRuleSource ruleSource;

        dimensionRange = new Map(Types::Int64, Types::String);
        dimensionRangeIncludeEmpty = new Set(Types::Int64);
        mainAccountDimAttrId = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);
        emptyStr = SysQuery::valueEmptyString();

        // Create a new query.
        query = new Query();

        // Define the table you wish to query from.
        qbds = query.addDataSource(tableNum(BudgetPlanLine));

        // Budget plan selection fields
        qbds.addSelectionField(fieldNum(BudgetPlanLine, TransactionCurrencyAmount));
        qbds.addSelectionField(fieldNum(BudgetPlanLine, Quantity));
        qbds.addSelectionField(fieldNum(BudgetPlanLine, EffectiveDate));
        qbds.addSelectionField(fieldNum(BudgetPlanLine, TransactionCurrencyCode));
        qbds.addSelectionField(fieldNum(BudgetPlanLine, UnitOfMeasure));

        // Add ranges
        qbr = qbds.addRange(fieldNum(BudgetPlanLine, BudgetPlanHeader));
        qbr.value(queryValue(budgetPlanHeader));

        qbr = qbds.addRange(fieldNum(BudgetPlanLine, BudgetPlanScenario));
        qbr.value(queryValue(budgetPlanBasisScenarioRecId));

        // Add the range for the start and end date
        qbr = qbds.addRange(fieldNum(BudgetPlanLine, EffectiveDate));
        qbr.value(SysQuery::range(periodStart, periodEnd));

        // Cache the rules
        while select BasisCriteria, BasisDimensionAttribute, FieldSetting from ruleSource where
            ruleSource.BasisId == _basisId && ruleSource.Company == _company
        {
            if (ruleSource.BasisCriteria == '')
            {
                // empty SourceCriteria for dimensions needs to map to blank dimension
                ruleSource.BasisCriteria = emptyStr;
            }

            // Get the key for the map
            keyValue = this.setBasisRuleSourceFieldSetting(ruleSource, mainAccountDimAttrId);

            this.processRuleSourceCriteria(query, ruleSource);

            this.createBasisRuleSourceCriteria(ruleSource, keyValue, emptyStr, dimensionRange, dimensionRangeIncludeEmpty);
        }

        QueryBuildDataSource qbdsDavc = qbds.addDataSource(tableNum(DimensionAttributeValueCombination));
        qbdsDavc.joinMode(JoinMode::ExistsJoin);
        qbdsDavc.addLink(fieldNum(BudgetPlanLine, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));
        qbdsDavc.fetchMode(QueryFetchMode::One2One);

        LedgerAllocationProcessRequest::createDimensionRanges(qbdsDavc, dimensionRange.getEnumerator(), dimensionRangeIncludeEmpty);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBasisTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sums Amount and quantity based on the <c>LedgerAllocationBasisRule</c> table record id.
    /// </summary>
    /// <param name="_basisId">
    /// Record id of <c>LedgerAllocationBasisRule</c> table.
    /// </param>
    /// <param name="_ledgerAllocationRuleDestinationLineNum">
    /// The line number value of <c>LedgerAllocationRuleDestination</c> record.
    /// </param>
    /// <returns>
    /// A container containing the amount and quantity.
    /// </returns>
    /// <remarks>
    /// Date range in the query is appended from the ledger allocation basis rule.
    /// BudgetPlan version of the method return a container because in case of BudgetPlan, amount is used for monetary basis scanario and quantity for non-monetary basis scanerio.
    /// </remarks>
    public container getBasisTotal(
        LedgerAllocationBasisNum _basisId,
        LineNum                  _ledgerAllocationRuleDestinationLineNum = DefaultLineNumber)
    {
        container                       basisValues;
        LedgerAllocationBasisRule       ledgerAllocationBasisRule;
        LedgerPeriodCode                ledgerPeriodCode;
        StartDate                       startDate;
        EndDate                         endDate;

        // Calculate the periodStart & periodEnd dates to use when retrieving basis amounts from the budgetplanline
        ledgerAllocationBasisRule = LedgerAllocationBasisRule::find(_basisId);

        if (ledgerAllocationBasisRule.DateInterval)
        {
            // we are doing period balance; get the date range for the date interval chosen based on the 'as of date'
            // Since in case of budgetplan allocation when using ledger allocation rule, as of date is not specified by the user, session date is used instead.
            ledgerPeriodCode = LedgerPeriodCode::find(ledgerAllocationBasisRule.DateInterval);
            startDate = ledgerPeriodCode.fromDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            endDate = ledgerPeriodCode.toDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }
        else
        {
            //
            // we are doing net change; date range is from start of time up to the 'as of date'
            // Since in case of budgetplan allocation when using ledger allocation rule, as of date is not specified by the user, maximum date is used
            // as per the functional requirements.
            //
            startDate = dateNull();
            endDate = dateMax();
        }

        // set the class variables to the calculated period dates
        periodStart = startDate;
        periodEnd = endDate;

        ledgerAllocationRuleDestinationLineNum = _ledgerAllocationRuleDestinationLineNum;

        basisValues = this.getBasisValues(_basisId);

        return basisValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBasisValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sums the Amount and quantity for the specified basis id.
    /// </summary>
    /// <param name="_basisId">
    /// Record id of <c>LedgerAllocationBasisRule</c> table.
    /// </param>
    /// <returns>
    /// A container containing both amount and quantity.
    /// </returns>
    /// <remarks>
    /// This method is similar to <c>LedgerAllocationBasisRules</c> class <c>getBasisAmount</c> method.
    /// BudgetPlan version of the method return a container because in case of BudgetPlan, amount is used for monetary basis scanario and quantity for non-monetary basis scanerio.
    /// </remarks>
    private container getBasisValues(LedgerAllocationBasisNum _basisId)
    {
        Query                           query;
        QueryRun                        queryRun;
        CurrencyCode                    basisCurrencyCode;
        BudgetPlanQuantity              totalQuantity;
        BudgetPlanQuantity              subTotalQuantity;
        BudgetPlanCurrencyAmount        totalAmount;
        BudgetPlanCurrencyAmount        subTotalAmount;
        container                       basisValues;
        BudgetPlanLine                  budgetPlanLine;
        LedgerAllocationBasisRuleSource ledgerAllocationBasisRuleSource;

        // Create the budgetplanline query.
        while select Company from ledgerAllocationBasisRuleSource
            group by Company
            where ledgerAllocationBasisRuleSource.BasisId == _basisId
        {
            query = this.createBudgetPlanLineSumQuery(_basisId, ledgerAllocationBasisRuleSource.Company);

            queryRun = new QueryRun(query);

            // Get the summarized amount from BudgetPlanLine
            while (queryRun.next())
            {
                budgetPlanLine = queryRun.get(tableNum(BudgetPlanLine));

                if (this.isMonetary())
                {
                    subTotalAmount      = budgetPlanLine.TransactionCurrencyAmount;
                    subTotalQuantity    = 0;
                    basisCurrencyCode   = budgetPlanLine.TransactionCurrencyCode;

                    if (subTotalAmount != 0 && callersMSTCurrency != basisCurrencyCode)
                    {
                        // Convert the amount into the caller's standard currency using the budgeting exchange rate type.
                        subTotalAmount = BudgetTransactionManager::calculateTransAmountToAccountingAmount(subTotalAmount, basisCurrencyCode,
                                                                                                          budgetPlanLine.EffectiveDate);
                    }

                    totalAmount += subTotalAmount;
                }
                else
                {
                    subTotalAmount    = 0;
                    subTotalQuantity  = budgetPlanLine.Quantity;

                    if (subTotalQuantity != 0 && unitofMeasure != budgetPlanLine.UnitOfMeasure)
                    {
                        UnitOfMeasureConverter unitOfMeasureConverter  = UnitOfMeasureConverter::newFromConversionParameters(
                                                    budgetPlanLine.UnitOfMeasure,
                                                    unitofMeasure,
                                                    NoYes::No);

                        subTotalQuantity        = unitOfMeasureConverter.convertValue(subTotalQuantity);
                    }

                    totalQuantity += subTotalQuantity;
                }

                // Add the total amount and quantity for an effective date.
                if (useSourceEffectiveDateForAllocation)
                {
                    this.addAmountAndQuantityByEffectiveDate(budgetPlanLine.EffectiveDate, subTotalAmount, subTotalQuantity);
                }
            }
        }

        // If use source effective date field is not checked, add the current budget cycle start date to the map with total amount and quantity to be allocated.
        if (!useSourceEffectiveDateForAllocation)
        {
            this.addAmountAndQuantityByEffectiveDate(budgetPlanLineDefaultEffectiveDate, totalAmount, totalQuantity);
        }

        basisValues = [totalAmount , totalQuantity];

        return basisValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize class variables for allocation process.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> table.
    /// </param>
    /// <param name="_budgetPlanBasisScenarioRecId">
    /// The record ID of the <c>BudgetPlanScenario</c> table.
    /// </param>
    /// <param name="_useSourceEffectiveDateForAllocation">
    /// A boolean value that indicates if source effective date is to be used; optional.
    /// </param>
    /// <param name="_budgetPlanLineDefaultEffectiveDate">
    /// The effective date of the <c>BudgetPlanLine</c> record; optional.
    /// </param>
    public void initRequest(
        BudgetPlanHeaderRecId       _budgetPlanHeaderRecId,
        BudgetPlanScenarioRecId     _budgetPlanBasisScenarioRecId,
        boolean                     _useSourceEffectiveDateForAllocation    = false,
        BudgetPlanLineEffectiveDate _budgetPlanLineDefaultEffectiveDate     = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        callersMSTCurrency                  = CompanyInfoHelper::standardCurrency();
        budgetPlanHeader                    = _budgetPlanHeaderRecId;
        budgetPlanBasisScenarioRecId        = _budgetPlanBasisScenarioRecId;
        budgetPlanBasisScenario             = BudgetPlanScenario::find(budgetPlanBasisScenarioRecId);
        unitofMeasure                       = budgetPlanBasisScenario.UnitOfMeasure;
        useSourceEffectiveDateForAllocation = _useSourceEffectiveDateForAllocation;
        budgetPlanLineDefaultEffectiveDate  = _budgetPlanLineDefaultEffectiveDate;

        effectiveDateBasisAllocationMap = new Map(Types::Date, Types::Container);
        effectiveDateBasisAllocationLedgerDestinationMap = new Map(Types::Container, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMapKeyForEffectiveDateLedgerDestMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the map key used by the effective date map.
    /// </summary>
    /// <param name="_budgetPlanLineEffectiveDate">
    /// The effective date of the <c>BudgetPlanLine</c> record.
    /// </param>
    /// <param name="_ledgerAllocationRuleDestinationLineNum">
    /// The Line number of <c>LedgerAllocationRuleDestination</c> record.
    /// </param>
    /// <returns>
    /// The string type map key value.
    /// </returns>
    /// <remarks>
    /// We want to have a map key combination of budget plan line effective date and ledger destination line number.
    /// The map values i.e. amount and quantity is retrieved to perform allocation by basis case only and used for creating
    /// each budget plan line record in target scenario.
    /// </remarks>
    private static str getMapKeyForEffectiveDateLedgerDestMap(
        BudgetPlanLineEffectiveDate _budgetPlanLineEffectiveDate,
        LineNum                     _ledgerAllocationRuleDestinationLineNum)
    {
        str mapKey;

        mapKey = strFmt(
                    "%1~%2",
                    date2str(_budgetPlanLineEffectiveDate, 0, 2, DateSeparator::Slash, 2, DateSeparator::Slash, 4, DateFlags::FormatAll),
                    real2int(_ledgerAllocationRuleDestinationLineNum));

        return mapKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMonetary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>BudgetPlanScenario</c> record's <c>UnitOfMeasureClass</c> field is monetary or non-monetary.
    /// </summary>
    /// <returns>
    /// true if the <c>UnitOfMeasureClass</c> field is monetary; otherwise false.
    /// </returns>
    public boolean isMonetary()
    {
        return (budgetPlanBasisScenario.UnitOfMeasureClass == UnitOfMeasureClass::Monetary ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerAllocationBasisRulesByBudgetPlan construct()
    {
        return new LedgerAllocationBasisRulesByBudgetPlan();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAsOfDateValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the ledger allocation basis rule is valid on the current date.
    /// </summary>
    /// <param name="_ruleId">
    /// <c>LedgerAllocationBasisNum</c> field of <c>LedgerAllocationBasisRule</c> table.
    /// </param>
    /// <returns>
    /// True if the basis rule valid for the session date; otherwise false.
    /// </returns>
    public static boolean isAsOfDateValid(LedgerAllocationBasisNum _ruleId)
    {
        boolean                     ret = false;
        LedgerAllocationBasisRule   basisRule;

        // Retrieve record for this allocation rule.
        basisRule = LedgerAllocationBasisRule::find(_ruleId);

        // If the start date is empty or <= to the asofdate and the end date is
        // empty or >= the asofdate, the asofdate is valid.
        if ((!basisRule.EffectiveStartDate ||
            basisRule.EffectiveStartDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) &&
            (!basisRule.EffectiveEndDate ||
            basisRule.EffectiveEndDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
        {
            // Since in case of budgetplan allocation when using ledger allocation rule, as of date is not specified by the user, session date is used instead.
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRuleActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the ledger allocation basis rule is active.
    /// </summary>
    /// <param name="_basisId">
    /// Record ID of the <c>LedgerAllocationBasisRule</c> table.
    /// </param>
    /// <returns>
    /// True when the rule basis rule is active; otherwise false.
    /// </returns>
    public static boolean isRuleActive(LedgerAllocationBasisNum _basisId)
    {
        return LedgerAllocationBasisRule::find(_basisId).BasisActive == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAmountAndQuantityByEffectiveDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts amount and quantity to be allocated for an effective date in a map.
    /// </summary>
    /// <param name="_budgetPlanLineEffectiveDate">
    /// The effective date of the <c>BudgetPlanLine</c> record.
    /// </param>
    /// <param name="_budgetPlanCurrencyAmount">
    /// The allocated amount for an effective date.
    /// </param>
    /// <param name="_budgetPlanQuantity">
    /// The allocated quantity for an effective date.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Wrong use of function error is thrown if no value is passed for date parameter.
    /// </exception>
    private void addAmountAndQuantityByEffectiveDate(
        BudgetPlanLineEffectiveDate _budgetPlanLineEffectiveDate,
        BudgetPlanCurrencyAmount    _budgetPlanCurrencyAmount,
        BudgetPlanQuantity          _budgetPlanQuantity)
    {
        BudgetPlanCurrencyAmount budgetPlanCurrencyAmount;
        BudgetPlanQuantity       budgetPlanQuantity;

        if (_budgetPlanLineEffectiveDate == dateNull())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        str mapKey = LedgerAllocationBasisRulesByBudgetPlan::getMapKeyForEffectiveDateLedgerDestMap(_budgetPlanLineEffectiveDate, ledgerAllocationRuleDestinationLineNum);

        // Inserting or updating total amount and quantity in a map by an effective date and line number.
        if (effectiveDateBasisAllocationLedgerDestinationMap.exists([mapKey]))
        {
            [budgetPlanCurrencyAmount, budgetPlanQuantity] = effectiveDateBasisAllocationLedgerDestinationMap.lookup([mapKey]);

            budgetPlanCurrencyAmount    += _budgetPlanCurrencyAmount;
            budgetPlanQuantity          += _budgetPlanQuantity;
        }
        else
        {
            budgetPlanCurrencyAmount    = _budgetPlanCurrencyAmount;
            budgetPlanQuantity          = _budgetPlanQuantity;
        }

        effectiveDateBasisAllocationLedgerDestinationMap.insert(
            [mapKey],
            [budgetPlanCurrencyAmount,
            budgetPlanQuantity]);

        // Inserting or updating total amount and quantity in a map by an effective date.
        if (effectiveDateBasisAllocationMap.exists(_budgetPlanLineEffectiveDate))
        {
            [budgetPlanCurrencyAmount, budgetPlanQuantity] = effectiveDateBasisAllocationMap.lookup(_budgetPlanLineEffectiveDate);
            budgetPlanCurrencyAmount    += _budgetPlanCurrencyAmount;
            budgetPlanQuantity          += _budgetPlanQuantity;
        }
        else
        {
            budgetPlanCurrencyAmount    = _budgetPlanCurrencyAmount;
            budgetPlanQuantity          = _budgetPlanQuantity;
        }

        effectiveDateBasisAllocationMap.insert(
            _budgetPlanLineEffectiveDate,
            [budgetPlanCurrencyAmount,
            budgetPlanQuantity]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEffectiveDateBasisAllocationMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns total amount and quantity from a map against an effective date.
    /// </summary>
    /// <param name="_budgetPlanLineEffectiveDate">
    /// The effective date of the <c>BudgetPlanLine</c> record.
    /// </param>
    /// <returns>
    /// A container containing total amount and quantity against an effective date.
    /// </returns>
    public container getEffectiveDateBasisAllocationMap(BudgetPlanLineEffectiveDate _budgetPlanLineEffectiveDate)
    {
        container basisValueContainer;

        if (effectiveDateBasisAllocationMap.exists(_budgetPlanLineEffectiveDate))
        {
            basisValueContainer = effectiveDateBasisAllocationMap.lookup(_budgetPlanLineEffectiveDate);
        }
        else
        {
            basisValueContainer = [0, 0];
        }

        return basisValueContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEffectiveDateBasisAllocLedgerDestMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns total amount and quantity from a map against an effective date and line number.
    /// </summary>
    /// <param name="_budgetPlanLineEffectiveDate">
    /// The effective date of the <c>BudgetPlanLine</c> record.
    /// </param>
    /// <param name="_ledgerAllocationRuleDestinationLineNum">
    /// The Line number of <c>LedgerAllocationRuleDestination</c> record.
    /// </param>
    /// <returns>
    /// A container containing total amount and quantity against an effective date and line number.
    /// </returns>
    public container getEffectiveDateBasisAllocLedgerDestMap(
        BudgetPlanLineEffectiveDate _budgetPlanLineEffectiveDate,
        LineNum _ledgerAllocationRuleDestinationLineNum)
    {
        container basisValueContainer;
        str       mapKey;

        mapKey = LedgerAllocationBasisRulesByBudgetPlan::getMapKeyForEffectiveDateLedgerDestMap(_budgetPlanLineEffectiveDate, _ledgerAllocationRuleDestinationLineNum);

        if (effectiveDateBasisAllocationLedgerDestinationMap.exists([mapKey]))
        {
            basisValueContainer = effectiveDateBasisAllocationLedgerDestinationMap.lookup([mapKey]);
        }
        else
        {
            basisValueContainer = [0, 0];
        }

        return basisValueContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRuleSourceCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query ranges based on the allocation rule source criteria.
    /// </summary>
    /// <param name="_query">
    /// The query to determine the amounts to be allocated from ledger.
    /// </param>
    /// <param name="_ruleSource">
    /// The <c>LedgerAllocationBasisRuleSource</c> record.
    /// </param>
    protected void processRuleSourceCriteria(Query _query, LedgerAllocationBasisRuleSource _ruleSource)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBasisRuleSourceFieldSetting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the dimension attribute value based on the field setting.
    /// </summary>
    /// <param name="_ledgerAllocBasisRuleSource">
    /// The <c>LedgerAllocationBasisRuleSource</c> record.
    /// </param>
    /// <param name="_mainAccountDimAttrId">
    /// The identifier of the primary dimension attribute.
    /// </param>
    /// <returns>
    /// The unique identifier of the <c>DimensionAttribute</c>.
    /// </returns>
    protected RecId setBasisRuleSourceFieldSetting(LedgerAllocationBasisRuleSource _ledgerAllocBasisRuleSource, RecId _mainAccountDimAttrId)
    {
        RecId keyValue;
        if (_ledgerAllocBasisRuleSource.FieldSetting == LedgerAllocationAccountDimension::Account)
        {
            keyValue = _mainAccountDimAttrId;
        }
        else
        {
            keyValue = _ledgerAllocBasisRuleSource.BasisDimensionAttribute;
        }
        return keyValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBasisRuleSourceCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the ledger allocation basis rule source criteria.
    /// </summary>
    /// <param name="_ledgerAllocBasisRuleSource">
    /// The <c>LedgerAllocationBasisRuleSource</c> record.
    /// </param>
    /// <param name="_keyValue">
    /// The identifier of the primary dimension attribute.
    /// </param>
    /// <param name="_emptyRangeValue">
    /// Empty string.
    /// </param>
    /// <param name="_dimensionRange">
    /// The map to build dimension attribute criteria.
    /// </param>
    /// <param name="_dimensionRangeIncludeEmpty">
    /// The set to track empty values included in the dimension attribute.
    /// </param>
    protected void createBasisRuleSourceCriteria(LedgerAllocationBasisRuleSource _ledgerAllocBasisRuleSource, RecId _keyValue, str _emptyRangeValue, Map _dimensionRange, Set _dimensionRangeIncludeEmpty)
    {
        if (_ledgerAllocBasisRuleSource.FieldSetting == LedgerAllocationAccountDimension::Account || _ledgerAllocBasisRuleSource.FieldSetting == LedgerAllocationAccountDimension::Dimension)
        {
            if (_ledgerAllocBasisRuleSource.BasisCriteria == _emptyRangeValue)
            {
                // Track whether empty is included by dimension attribute
                _dimensionRangeIncludeEmpty.add(_keyValue);

                // Then mark that this dimension attribute exists as criteria
                if (!_dimensionRange.exists(_keyValue))
                {
                    _dimensionRange.insert(_keyValue, _emptyRangeValue);
                }
            }
            else
            {
                // Build up criteria
                if (_dimensionRange.exists(_keyValue) && _dimensionRange.lookup(_keyValue) != _emptyRangeValue)
                {
                    _dimensionRange.insert(_keyValue, _dimensionRange.lookup(_keyValue) + ',' + _ledgerAllocBasisRuleSource.BasisCriteria);
                }
                else
                {
                    _dimensionRange.insert(_keyValue, _ledgerAllocBasisRuleSource.BasisCriteria);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>