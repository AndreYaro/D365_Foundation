<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemType</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventItemType
{
    InventTable inventTable;

    #resAppl
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculationType</Name>
				<Source><![CDATA[
    public ItemCalcType calculationType()
    {
        return ItemCalcType::Item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeAutoReserved</Name>
				<Source><![CDATA[
    public boolean canBeAutoReserved()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeProduced</Name>
				<Source><![CDATA[
    public boolean canBeProduced()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeTransferred</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>ItemType</c> can be transferred when it uses transfer orders.
    /// </summary>
    /// <returns>
    ///    true if the <c>ItemType</c> can be transferred; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    By default, the method returns false.
    /// </remarks>
    public boolean canBeTransferred()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveBOM</Name>
				<Source><![CDATA[
    public boolean canHaveBOM()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveRoutes</Name>
				<Source><![CDATA[
    public boolean canHaveRoutes()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCostGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default cost group.
    /// </summary>
    /// <returns>
    /// The default cost group.
    /// </returns>
    /// <remarks>
    /// This method returns an empty cost group ID. The default cost group retrieval is handled by
    /// subclasses.
    /// </remarks>
    public CostGroupId defaultCostGroupId()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageRessNo</Name>
				<Source><![CDATA[
    public int imageRessNo()
    {
        return #ImageItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCostGroupTypeValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the cost group type of the current cost group is correct based on the product type.
    /// </summary>
    /// <returns>
    ///    By default, true.
    /// </returns>
    /// <remarks>
    ///    This method is overridden in derived concrete item type classes.
    /// </remarks>
    public boolean isCostGroupTypeValid()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isServiceItem</Name>
				<Source><![CDATA[
    public boolean isServiceItem()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeReqCreated</Name>
				<Source><![CDATA[
    public boolean mustBeReqCreated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventBeControlled</Name>
				<Source><![CDATA[
    public boolean mustInventBeControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    protected InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        inventTable = _inventTable;
        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeItemTypes</Name>
				<Source><![CDATA[
    static private ListEnumerator activeItemTypes()
    {
        List                    activeItemTypes = new List(Types::Enum);
        Counter                 i;

        DictEnum dictEnum = new DictEnum(enumNum(ItemType));
        for (i = 0; i < dictEnum.values(); i++)
        {
            ConfigurationKeyId configurationKeyId = dictEnum.index2ConfigurationKey(i);
            if (!configurationKeyId || isConfigurationkeyEnabled(configurationKeyId))
            {
                ItemType itemType = dictEnum.index2Value(i);
                activeItemTypes.addEnd(itemType);
            }
        }

        return activeItemTypes.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public InventItemType construct(ItemType _itemType)
    {
        switch (_itemType)
        {
            case ItemType::Item       : return InventItemType_Item::construct(_itemType);
            case ItemType::Service    : return InventItemType_Service::construct(_itemType);
        }

        return InventItemType::constructDefault(_itemType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDefault</Name>
				<Source><![CDATA[
    protected static InventItemType constructDefault(ItemType _itemType)
    {
        switch (_itemType)
        {
            default : return new InventItemType();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventItemType</c> class from an <c>InventTable</c> buffer.
    /// </summary>
    /// <param name="_inventTable">
    ///    The <c>InventTable</c> buffer.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventItemType</c> class.
    /// </returns>
    public static InventItemType newInventTable(InventTable _inventTable)
    {
        InventItemType  inventItemType = InventItemType::construct(_inventTable.ItemType);

        inventItemType.parmInventTable(_inventTable);
        return inventItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemId</Name>
				<Source><![CDATA[
    public static InventItemType newItemId(ItemId _itemId)
    {
        return InventItemType::construct(InventTable::find(_itemId).ItemType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemType</Name>
				<Source><![CDATA[
    public static InventItemType newItemType(ItemType _itemType)
    {
        return InventItemType::construct(_itemType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddBomRouteItemTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds active bom and route item types to the lookup.
    /// </summary>
    /// <param name = "_lookup">A lookup for which to add the item types filter.</param>
    /// <param name = "_addBOM">A boolean value indicating if an active item type can have a route.</param>
    /// <param name = "_addRoute">A boolean value indicating if an active item type can have a bom.</param>
    /// <returns>A count of item types.</returns>
    static public Integer queryAddBomRouteItemTypes(
        InventItemIdLookup      _lookup,
        boolean                 _addBOM,
        boolean                 _addRoute)
    {
        List itemTypes = InventItemType::getBomRouteItemTypes(_addBOM, _addRoute);
        if (!itemTypes.empty())
        {
            ItemType itemType;
            ListEnumerator listEnumerator = itemTypes.getEnumerator();
            while (listEnumerator.moveNext())
            {
                itemType = listEnumerator.current();
                _lookup.filterItemType(ItemType);
            }
        }

        return itemTypes.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBomRouteItemTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the active bom- and route-dependent item types.
    /// </summary>
    /// <param name = "_addBOM">A boolean value indicating if an active item type can have a bom.</param>
    /// <param name = "_addRoute">A boolean value indicating if an active item type can have a route.</param>
    /// <returns>A list of active bom and route item types.</returns>
    static public List getBomRouteItemTypes(
                    boolean                 _addBOM,
                    boolean                 _addRoute)
    {
        List            itemTypes = new List(Types::Enum);
        ListEnumerator  enumerator = InventItemType::activeItemTypes();

        while (enumerator.moveNext())
        {
            ItemType itemType = enumerator.current();
            InventItemType inventItemType = InventItemType::construct(itemType);
            if (_addBOM && inventItemType.canHaveBOM())
            {
                itemTypes.addEnd(ItemType);
            }
            else
            {
                if (_addRoute && inventItemType.canHaveRoutes())
                {
                    itemTypes.addEnd(ItemType);
                }
            }
        }

        return itemTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueCanBeProduced</Name>
				<Source><![CDATA[
    static public str valueCanBeProduced()
    {
        ListEnumerator          enumerator = InventItemType::activeItemTypes();
        str                     itemTypeTxt;

        while (enumerator.moveNext())
        {
            ItemType itemType = enumerator.current();
            InventItemType inventItemType = InventItemType::construct(itemType);
            if (inventItemType.canBeProduced())
            {
                itemTypeTxt += itemTypeTxt ? ',' : '';
                itemTypeTxt += queryValue(queryValue(itemType));
            }
        }

        return itemTypeTxt ? itemTypeTxt : SysQuery::valueEmptyString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueCanBeTransferred</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a comma-separated string that contains the <c>itemtype</c>s that can be transferred.
    /// </summary>
    /// <returns>
    ///    A comma-separated string that contains the <c>itemtype</c>s that can be transferred.
    /// </returns>
    static public str valueCanBeTransferred()
    {
        ListEnumerator          enumerator = InventItemType::activeItemTypes();
        str                     itemTypeTxt;

        while (enumerator.moveNext())
        {
            ItemType itemType = enumerator.current();
            InventItemType inventItemType = InventItemType::construct(itemType);
            if (inventItemType.canBeTransferred())
            {
                itemTypeTxt += itemTypeTxt ? ',' : '';
                itemTypeTxt += queryValue(queryValue(itemType));
            }
        }

        return itemTypeTxt ? itemTypeTxt : SysQuery::valueEmptyString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueCanHaveBOM</Name>
				<Source><![CDATA[
    static public str valueCanHaveBOM()
    {
        ListEnumerator          enumerator = InventItemType::activeItemTypes();
        str                     itemTypeTxt;

        while (enumerator.moveNext())
        {
            ItemType itemType = enumerator.current();
            InventItemType inventItemType = InventItemType::construct(itemType);
            if (inventItemType.canHaveBOM())
            {
                itemTypeTxt += itemTypeTxt ? ',' : '';
                itemTypeTxt += queryValue(queryValue(itemType));
            }
        }

        return itemTypeTxt ? itemTypeTxt : SysQuery::valueEmptyString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueCanHaveFormula</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a comma-delimited list of item types that can support a formula.
    /// </summary>
    /// <returns>
    /// A comma-delimeted list of item types that can support a formula.
    /// </returns>
    /// <remarks>
    /// The string can be used as a query range.
    /// </remarks>
    public static str valueCanHaveFormula()
    {
        Counter                 i;
        str                     itemTypeTxt;

        DictEnum dictEnum = new DictEnum(enumnum(ItemType));

        for (i=0;i<dictEnum.values();i++)
        {
            if (!isConfigurationkeyEnabled(dictEnum.value2ConfigurationKey(i)))
            {
                continue;
            }

            ItemType itemType = dictEnum.index2Value(i);
            InventItemType inventItemType = InventItemType::construct(itemType);
            if (inventItemType.canHaveBOM())
            {
                itemTypeTxt += itemTypeTxt ? ',' : '';
                itemTypeTxt += queryValue(queryValue(itemType));
            }
        }

        return itemTypeTxt ? itemTypeTxt : SysQuery::valueEmptyString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueMustBeReqCreated</Name>
				<Source><![CDATA[
    static public str valueMustBeReqCreated()
    {
        ListEnumerator          enumerator = InventItemType::activeItemTypes();
        str                     itemTypeTxt;

        while (enumerator.moveNext())
        {
            ItemType itemType = enumerator.current();
            InventItemType inventItemType = InventItemType::construct(itemType);
            if (inventItemType.mustBeReqCreated())
            {
                itemTypeTxt += itemTypeTxt ? ',' : '';
                itemTypeTxt += queryValue(queryValue(itemType));
            }
        }

        return itemTypeTxt ? itemTypeTxt : SysQuery::valueEmptyString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueMustInventBeControlled</Name>
				<Source><![CDATA[
    static public str valueMustInventBeControlled()
    {
        ListEnumerator          enumerator = InventItemType::activeItemTypes();
        str                     itemTypeTxt;

        while (enumerator.moveNext())
        {
            ItemType itemType = enumerator.current();
            InventItemType inventItemType = InventItemType::construct(itemType);
            if (inventItemType.mustInventBeControlled())
            {
                itemTypeTxt += itemTypeTxt ? ',' : '';
                itemTypeTxt += queryValue(queryValue(itemType));
            }
        }

        return itemTypeTxt ? itemTypeTxt : SysQuery::valueEmptyString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
