<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWarehouseMobileDeviceTelemetryEventLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using XppRuntimeEventSource = Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation.XppRuntimeEventSource;

/// <summary>
///     The <c>WHSWarehouseMobileDeviceTelemetryEventLogger</c> class is used to generate WHS user telemetry events
/// </summary>
internal class WHSWarehouseMobileDeviceTelemetryEventLogger
{    
    #WHSRF

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>logUserLogin</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates an event to log a WHS user login
    /// </summary>
    /// <param name = "_activityData">
    ///     Class containing the information that will be logged
    /// </param>
    public static void logUserLogin(WHSWarehouseMobileDeviceActivityData _activityData)
    {
        ApplicationEventSource::EventWriteWhsUserLoginEvent(
                            _activityData.parmWhsUserGuid(),
                            _activityData.parmWorkerSysUserRelationObjectId(),
                            _activityData.parmCompany(),
                            _activityData.parmSite(),
                            _activityData.parmWarehouse(),
                            _activityData.parmDeviceId(),
                            _activityData.parmWhsUserSessionId());

        WHSInstrumentationLogger::createLogger('WriteWhsUserLoginEvent')
            .logUserLogin(_activityData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUserLogout</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates an event to log a WHS user logout
    /// </summary>
    /// <param name = "_activityData">
    ///     Class containing the information that will be logged
    /// </param>
    public static void logUserLogout(WHSWarehouseMobileDeviceActivityData _activityData)
    {
        ApplicationEventSource::EventWriteWhsUserLogoutEvent(
                            _activityData.parmWhsUserGuid(),
                            _activityData.parmWorkerSysUserRelationObjectId(),
                            _activityData.parmCompany(),
                            _activityData.parmSite(),
                            _activityData.parmWarehouse(),
                            _activityData.parmDeviceId(),
                            _activityData.parmWhsUserSessionId());

        WHSInstrumentationLogger::createLogger('WriteWhsUserLogoutEvent')
            .logUserLogout(_activityData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUserActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates an event to log a WHS user activity
    /// </summary>
    /// <param name = "_activityData">
    ///     Class containing the information that will be logged
    /// </param>
    public static void logUserActivity(WHSWarehouseMobileDeviceActivityData _activityData)
    {
        str scrubedParmRequestXML = WHSWarehouseMobileDeviceTelemetryEventLogger::scrubRequestXML(_activityData.parmRequestXML());

        ApplicationEventSource::EventWriteWhsUserActivityEvent(
                            _activityData.parmWhsUserGuid(),
                            _activityData.parmWorkerSysUserRelationObjectId(),
                            _activityData.parmCompany(),
                            _activityData.parmSite(),
                            _activityData.parmWarehouse(),
                            _activityData.parmDeviceId(),
                            WHSWorkExecutionMode::newFromMode(_activityData.parmMode()).toString(),
                            _activityData.parmStep(),
                            _activityData.parmButtonClicked(),
                            scrubedParmRequestXML,
                            _activityData.parmWhsUserSessionId(),
                            _activityData.parmWorkTableRecId(),
                            _activityData.parmWorkTableRecId() ? enum2Symbol(enumNum(WHSWorkTransType), enum2int(_activityData.parmWorkTransType())) : '',
                            _activityData.parmWorklineRecId(),
                            _activityData.parmWorklineRecId() ? enum2Symbol(enumNum(WHSWorkType), enum2int(_activityData.parmWorkLineType())) : '',
                            _activityData.parmDurationInMilliSeconds(),
                            _activityData.parmProcessGuideStepName(),
                            _activityData.parmInventTableRecId(),
                            _activityData.parmIsCWItem(),
                            _activityData.parmWorkLineWMSLocationRecId());

        
        WHSInstrumentationLogger::createLogger('WriteWhsUserActivityEvent')
            .logUserActivity(_activityData, scrubedParmRequestXML);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logMobileDeviceRequestInternalError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a log, when we get an internal error, that points to a record in the whsOperationInternalErrorLog table
    /// where we can find more information about the event.
    /// </summary>
    /// <param name = "_type">The type of the incident.</param>
    /// <param name = "_recId">The record id in the _detailsTable with the related information.</param>
    [Hookable(false)]
    internal static void logMobileDeviceRequestInternalError(WHSOperationInternalErrorType _type, RecId _recId)
    {
        XppRuntimeEventSource::EventWriteInfoLogMark(
            Exception::Info,
            strFmt('Category: mobileDeviceRequest, Action: mobileDeviceRequestInternalError, Type: %1, RecId: %2', enum2Symbol(enumNum(WHSOperationInternalErrorType), enum2int(_type)), _recId));

       WHSInstrumentationLogger::createLogger('WriteInfoLogMark').logInformation(
            strFmt('Category: mobileDeviceRequest, Action: mobileDeviceRequestInternalError, Type: %1, RecId: %2', enum2Symbol(enumNum(WHSOperationInternalErrorType), enum2int(_type)), _recId));

    }

]]></Source>
			</Method>
			<Method>
				<Name>logMobileDeviceRequestViolationExeception</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs mobile device protocol violation exception.
    /// </summary>
    /// <param name = "_exceptionData">
    /// An instance of the <c>WHSMobileDeviceProtocolViolationExceptionData</c> class containing exception information.
    /// </param>
    internal static void logMobileDeviceRequestViolationExeception(WHSMobileDeviceProtocolViolationExceptionData _exceptionData)
    {
        WHSWarehouseMobileDeviceTelemetryEventLogger::doLogException(_exceptionData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doLogException</Name>
				<Source><![CDATA[
    private static void doLogException(WHSMobileDeviceProtocolViolationExceptionData _exceptionData)
    {
        ApplicationEventSource::EventWriteWhsMobileDeviceProtocolViolationException(
            _exceptionData.parmDeviceId(),
            WHSWarehouseMobileDeviceTelemetryEventLogger::scrubRequestXML(_exceptionData.parmRequestXML()),
            _exceptionData.parmWhsUserSessionId());

        WHSInstrumentationLogger::createLogger('WriteWhsMobileDeviceProtocolViolationException').logAttributeValueInformation(_exceptionData.initializeAttributeValuesForLogging());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHideValue</Name>
				<Source><![CDATA[
    private static boolean mustHideValue(System.Xml.XmlTextReader _reader)
    {
        str attributeName = _reader.Name;
        str attributeValue = _reader.Value;

        return !WHSMobileAppScrubController::isValueAllowed(attributeName, attributeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scrubRequestXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Modify the WMDP request XML, removing data values that could contain personal information with dummy values.
    /// </summary>
    /// <param name = "_requestXML">The request XML that needs scrubbing.</param>
    /// <returns>A scrubbed XML which contains no personal information.</returns>
    public static str scrubRequestXML(str _requestXML)
    {
        XML result = '';
        str previousElement = '';
        using (System.IO.StringWriter stringWriter = new System.IO.StringWriter())
        using (System.Xml.XmlTextWriter writer = WHSWorkExecuteSerializationHelper::createXMLTextWriter(stringWriter))       
        using (System.IO.StringReader stringReader = new System.IO.StringReader(_requestXML))
        using (System.Xml.XmlTextReader reader = WHSWorkExecuteSerializationHelper::createXMLTextReader(stringReader))
        {
            while (reader.Read())
            {
                switch (reader.NodeType)
                {
                    case XmlNodeType::Element:
                        writer.WriteStartElement(reader.Prefix, reader.LocalName, reader.NamespaceURI);
                        previousElement = reader.LocalName;

                        for (int attInd = 0; attInd < reader.AttributeCount; attInd++)
                        {
                            reader.MoveToAttribute(attInd);

                            if (WHSWarehouseMobileDeviceTelemetryEventLogger::mustHideValue(reader))
                            {
                                writer.WriteAttributeString(reader.Name, '-censored-');
                            }
                            else
                            {
                                writer.WriteAttributeString(reader.Name, reader.Value);
                            }
                                        
                        }
                        reader.MoveToElement();

                        if (reader.IsEmptyElement)
                        {
                            writer.WriteEndElement();
                        }
                        break;
                    case XmlNodeType::Text:
                        if (WHSMobileAppScrubController::shouldHideText(previousElement, reader.Value))
                        {
                            writer.WriteString('-censored-');
                        }
                        else
                        {
                            writer.WriteString(reader.Value);
                        }
                        break;
                    case XmlNodeType::Whitespace:
                    case XmlNodeType::SignificantWhitespace:
                        writer.WriteWhitespace(reader.Value);
                        break;
                    case XmlNodeType::CDATA:
                        writer.WriteCData(reader.Value);
                        break;
                    case XmlNodeType::EntityReference:
                        writer.WriteEntityRef(reader.Name);
                        break;
                    case XmlNodeType::XmlDeclaration:
                    case XmlNodeType::ProcessingInstruction:
                        writer.WriteProcessingInstruction(reader.Name, reader.Value);
                        break;
                    case XmlNodeType::DocumentType:
                        writer.WriteDocType(reader.Name, reader.GetAttribute("PUBLIC"), reader.GetAttribute("SYSTEM"), reader.Value);
                        break;
                    case XmlNodeType::Comment:
                        writer.WriteComment(reader.Value);
                        break;
                    case XmlNodeType::EndElement:
                        writer.WriteFullEndElement();
                        break;
                }
            }
            
            result = stringWriter.ToString();
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>