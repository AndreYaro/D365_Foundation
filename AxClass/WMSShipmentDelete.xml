<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsShipmentDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WmsShipmentDelete
{
    WMSShipmentId   wmsShipmentId;
    boolean         deleteRoutes;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteRoutes</Name>
				<Source><![CDATA[
    public boolean parmDeleteRoutes(boolean _deleteRoutes = deleteRoutes)
    {
        deleteRoutes = _deleteRoutes;

        return deleteRoutes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsShipmentId</Name>
				<Source><![CDATA[
    public WMSShipmentId parmWmsShipmentId(WMSShipmentId _wmsShipmentId = wmsShipmentId)
    {
        wmsShipmentId = _wmsShipmentId;

        return wmsShipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the deletion of a shipment.
    /// </summary>
    public void run()
    {
        WMSShipment     wmsShipment;
        WMSPickingRoute wmsPickingRoute;

        ttsbegin;
        wmsShipment = WMSShipment::find(wmsShipmentId);
        if (!wmsShipment.RecId)
        {
            throw error(strFmt("@SYS115891", wmsShipmentId));
        }

        this.deleteWMSOrderTrans(wmsShipment);

        if (deleteRoutes)
        {
            while select forupdate wmsPickingRoute
                where wmsPickingRoute.ShipmentId == wmsShipment.ShipmentId
            {
                wmsPickingRoute.delete(false);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceOrderQuantityDuringDeletionDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Delegate for determining if order quantity should be reduced during deletion for the specified shipment.
    /// </summary>
    /// <param name="_wmsShipment">
    ///    The <c>WMSShipment</c> record used to determine which <c>WMSOrderTrans</c> records to be deleted.
    /// </param>
    /// <param name="_result">
    ///    An <c>EventHandlerResult</c> object to return the reply.
    /// </param>
    delegate void reduceOrderQuantityDuringDeletionDelegate(WMSShipment _wmsShipment, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceOrderQuantityDuringDeletion</Name>
				<Source><![CDATA[
    private boolean reduceOrderQuantityDuringDeletion(WMSShipment _wmsShipment)
    {
        UnknownNoYes reduceOrderQuantity = UnknownNoYes::Unknown;
        
        switch (_wmsShipment.Status)
        {
            case WMSShipmentStatus::Registered:
            case WMSShipmentStatus::Canceled:
                reduceOrderQuantity = UnknownNoYes::No;
                break;
            case WMSShipmentStatus::Shipped:
                reduceOrderQuantity = UnknownNoYes::Yes;
                break;
            default:
                if (_wmsShipment.ShipmentType == WMSShipmentType::OrderPick)
                {
                    //don't force deletion of output order, since InventParameters.AutoEndOrderPick is used to determine what should happen
                    reduceOrderQuantity = UnknownNoYes::No;
                }
                break;
        }

        if (reduceOrderQuantity == UnknownNoYes::Unknown)
        {
            EventHandlerResult result = EventHandlerResult::newSingleResponse();
            this.reduceOrderQuantityDuringDeletionDelegate(_wmsShipment, result);
            if (result.hasResult())
            {
                reduceOrderQuantity = result.result();
            }
        }

        switch (reduceOrderQuantity)
        {
            case UnknownNoYes::No:
                return false;
            case UnknownNoYes::Yes:
                return true;
        }
        throw error(strFmt("@SYS125599", wmsShipmentId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWMSOrderTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the <c>WMSOrderTrans</c> related to the specified shipment.
    /// </summary>
    /// <param name="_wmsShipment">
    ///    The <c>WMSShipment</c> record used to determine which <c>WMSOrderTrans</c> records are deleted.
    /// </param>
    private void deleteWMSOrderTrans(WMSShipment _wmsShipment)
    {
        WMSOrderTrans::deleteFromShipment(_wmsShipment, this.reduceOrderQuantityDuringDeletion(_wmsShipment));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSShipmentDelete construct()
    {
        return new WMSShipmentDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes information related to a specified shipment.
    /// </summary>
    /// <param name="_wmsShipmentId">
    ///    The identification of the shipment.
    /// </param>
    /// <param name="_deleteRoutes">
    ///    A Boolean value that indicates whether the associated routes should also be deleted.
    /// </param>
    /// <remarks>The shipment is not being deleted by this class.</remarks>
    static void deleteShipment(WMSShipmentId _wmsShipmentId, boolean _deleteRoutes)
    {
        WMSShipmentDelete   wmsShipmentDelete   = WMSShipmentDelete::construct();

        wmsShipmentDelete.parmWmsShipmentId(_wmsShipmentId);
        wmsShipmentDelete.parmDeleteRoutes(_deleteRoutes);
        wmsShipmentDelete.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>