<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailUpdateProductDimensionsWithVariantGroupsService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailUpdateProductDimensionsWithVariantGroupsService</c> class is responsible for updating product dimensions of Color, Size, Style
/// with color groups, size groups, style groups respectively and synchronizing translations of product master dimension values.
/// </summary>
internal class RetailUpdateProductDimensionsWithVariantGroupsService
{
    private RefRecId colorGroupTransRecId;
    private RefRecId sizeGroupTransRecId;
    private RefRecId styleGroupTransRecId;
    private LanguageIdAll languageId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateProductDimensionsWithColorGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the product dimensions of color with color groups using <c>RetailColorGroupTrans</c>
    /// </summary>
    /// <param name = "_contract">
    /// An instance of class <c>RetailUpdateProductDimensionsWithVariantGroupsContract</c> representing the contract for the service.
    /// </param>
    [Hookable(false)]
    public void updateProductDimensionsWithColorGroup(RetailUpdateProductDimensionsWithVariantGroupsContract _contract)
    {
        RetailColorGroupTrans retailColorGroupTrans;
        colorGroupTransRecId = _contract.parmColorGroupTransRecId();

        retailColorGroupTrans = RetailColorGroupTrans::findByRecId(colorGroupTransRecId);

        if (retailColorGroupTrans)
        {
            retailColorGroupTrans.insertUpdateInventColor();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncProductLevelTranslationsForColor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the corresponding product master dimension value translations for the specified <c>RetailColorGroupTransTranslation</c> RecId.
    /// </summary>
    /// <param name = "_contract">
    /// An instance of class <c>RetailUpdateProductDimensionsWithVariantGroupsContract</c> representing the contract for the service.
    /// </param>
    [Hookable(false)]
    public void syncProductLevelTranslationsForColor(RetailUpdateProductDimensionsWithVariantGroupsContract _contract)
    {
        RetailColorGroupTransTranslation colorGroupTransTranslation;

        colorGroupTransRecId = _contract.parmColorGroupTransRecId();
        languageId           = _contract.parmLanguageId();

        select firstonly colorGroupTransTranslation
            where colorGroupTransTranslation.RetailColorGroupTrans == colorGroupTransRecId
            && colorGroupTransTranslation.LanguageId == languageId;

        if (colorGroupTransTranslation)
        {
            ttsbegin;
            colorGroupTransTranslation.syncProductLevelTranslations();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductDimensionsWithSizeGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the product dimensions of size with size groups using <c>RetailSizeGroupTrans</c>
    /// </summary>
    /// <param name = "_contract">
    /// An instance of class <c>RetailUpdateProductDimensionsWithVariantGroupsContract</c> representing the contract for the service.
    /// </param>
    [Hookable(false)]
    public void updateProductDimensionsWithSizeGroup(RetailUpdateProductDimensionsWithVariantGroupsContract _contract)
    {
        RetailSizeGroupTrans retailSizeGroupTrans;
        sizeGroupTransRecId = _contract.parmSizeGroupTransRecId();

        retailSizeGroupTrans = RetailSizeGroupTrans::findByRecId(sizeGroupTransRecId);

        if (retailSizeGroupTrans)
        {
            retailSizeGroupTrans.insertUpdateInventSize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncProductLevelTranslationsForSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the corresponding product master dimension value translations for the specified <c>RetailSizeGroupTransTranslation</c> RecId.
    /// </summary>
    /// <param name = "_contract">
    /// An instance of class <c>RetailUpdateProductDimensionsWithVariantGroupsContract</c> representing the contract for the service.
    /// </param>
    [Hookable(false)]
    public void syncProductLevelTranslationsForSize(RetailUpdateProductDimensionsWithVariantGroupsContract _contract)
    {
        RetailSizeGroupTransTranslation sizeGroupTransTranslation;

        sizeGroupTransRecId = _contract.parmSizeGroupTransRecId();
        languageId           = _contract.parmLanguageId();

        select firstonly sizeGroupTransTranslation
            where sizeGroupTransTranslation.RetailSizeGroupTrans == sizeGroupTransRecId
            && sizeGroupTransTranslation.LanguageId == languageId;

        if (sizeGroupTransTranslation)
        {
            ttsbegin;
            sizeGroupTransTranslation.syncProductLevelTranslations();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductDimensionsWithStyleGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the product dimensions of style with style groups using <c>RetailStyleGroupTrans</c>
    /// </summary>
    /// <param name = "_contract">
    /// An instance of class <c>RetailUpdateProductDimensionsWithVariantGroupsContract</c> representing the contract for the service.
    /// </param>
    [Hookable(false)]
    public void updateProductDimensionsWithStyleGroup(RetailUpdateProductDimensionsWithVariantGroupsContract _contract)
    {
        RetailStyleGroupTrans retailStyleGroupTrans;
        styleGroupTransRecId = _contract.parmStyleGroupTransRecId();

        retailStyleGroupTrans = RetailStyleGroupTrans::findByRecId(styleGroupTransRecId);

        if (retailStyleGroupTrans)
        {
            retailStyleGroupTrans.insertUpdateInventStyle();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncProductLevelTranslationsForStyle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the corresponding product master dimension value translations for the specified <c>RetailStyleGroupTransTranslation</c> RecId.
    /// </summary>
    /// <param name = "_contract">
    /// An instance of class <c>RetailUpdateProductDimensionsWithVariantGroupsContract</c> representing the contract for the service.
    /// </param>
    [Hookable(false)]
    public void syncProductLevelTranslationsForStyle(RetailUpdateProductDimensionsWithVariantGroupsContract _contract)
    {
        RetailStyleGroupTransTranslation styleGroupTransTranslation;

        styleGroupTransRecId = _contract.parmStyleGroupTransRecId();
        languageId           = _contract.parmLanguageId();

        select firstonly styleGroupTransTranslation
            where styleGroupTransTranslation.RetailStyleGroupTrans == styleGroupTransRecId
            && styleGroupTransTranslation.LanguageId == languageId;

        if (styleGroupTransTranslation)
        {
            ttsbegin;
            styleGroupTransTranslation.syncProductLevelTranslations();
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>