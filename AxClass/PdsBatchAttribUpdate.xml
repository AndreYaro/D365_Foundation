<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsBatchAttribUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class to update batch attributes manually.
/// </summary>
class PdsBatchAttribUpdate
{
    RecordSortedList        journalList;

    InventBatch             inventBatch;
    InventQualityOrderTable orderTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasDuplicateReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the inventory batches attributes can be updated from more than one source.
    /// </summary>
    /// <returns>
    /// Returns true if a duplicate or duplicates are found; otherwise false.
    /// </returns>
    private boolean hasDuplicateReceipt()
    {
        InventTrans inventTrans;
        boolean     ret = false;
        InventDim   inventDim;
        InventTransOrigin inventTransOrigin;

        select firstonly RecId
            from inventTrans
            where inventTrans.ItemId == inventBatch.ItemId
            &&    (inventTrans.StatusReceipt == StatusReceipt::Purchased
                   || inventTrans.StatusReceipt == StatusReceipt::Received
                   || inventTrans.StatusReceipt == StatusReceipt::Registered)
            &&    inventTrans.StatusIssue == StatusIssue::None 
            join  TableId
            from  inventTransOrigin
            where inventTransOrigin.RecId == inventTrans.InventTransOrigin
            &&    inventTransOrigin.InventTransId != orderTable.InventRefTransId
            &&    (inventTransOrigin.ReferenceCategory  == InventTransType::Purch
                  || inventTransOrigin.ReferenceCategory == InventTransType::Production
                  || inventTransOrigin.ReferenceCategory == InventTransType::PmfProdCoBy)
            join TableId
            from inventDim
            where inventTrans.InventDimId == inventDim.InventDimId
                && inventDim.InventBatchId == inventBatch.InventBatchId;

        if (inventTrans.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instanciates the class.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQualityOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets the global variable orderTable to the input parameter _orderTable.
    /// </summary>
    /// <param name="_orderTable">
    /// The new value for the quality order.
    /// </param>
    /// <returns>
    /// returns the global variable orderTable.
    /// </returns>
    public InventQualityOrderTable parmInventQualityOrderTable(
        InventQualityOrderTable _orderTable = orderTable)
    {
        if (!prmisdefault(_orderTable))
        {
            orderTable = _orderTable;
        }

        return orderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets the global variable journalList to the input parameter _journalList.
    /// </summary>
    /// <param name="_journalList">
    /// The new value for the journalList record set.
    /// </param>
    /// <returns>
    /// returns the new value of the class record set of inventory batches.
    /// </returns>
    public RecordSortedList parmJournalList(
        RecordSortedList _journalList = journalList)
    {
        if (!prmisdefault(_journalList))
        {
            journalList = _journalList;
        }

        return journalList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the logic to update batch attributes for all selected inventory batches.
    /// </summary>
    public void run()
    {
        InventQualityReferenceType qualityReferenceType;

        boolean checkOverwriteAttribValues()
        {
            boolean ret = true;

            journalList.first(inventBatch);

            while (inventBatch)
            {
                if (inventBatch.pdsBatchAttribValues())
                {
                    if (Box::yesNo("@PDS2019", DialogButton::No, "@PDS1203")
                            == DialogButton::No)
                    {
                        ret = false;
                    }

                    break;
                }

                if (!journalList.next(inventBatch))
                {
                    break;
                }
            }

            return ret;
        }

        if (checkOverwriteAttribValues())
        {
            journalList.first(inventBatch);

            while (inventBatch)
            {
                if (!this.hasDuplicateReceipt())
                {
                    qualityReferenceType = InventQualityReferenceType::newPdsBatchAttribUpdateBuffer(
                        InventQualityReferenceType::newFromQualityOrder(orderTable).parmBuffer(),
                        PdsBatchAttribUpdateType::All,
                        false);
                    qualityReferenceType.parmPdsInventBatchId(inventBatch.InventBatchId);
                    qualityReferenceType.pdsBatchAttribSelect();
                }
                else
                {
                    warning(strfmt("@PDS2018", inventBatch.InventBatchId));
                }

                if (!journalList.next(inventBatch))
                {
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instanciate the PdsBatchAttribUpdate class to update attribute values for selected inventory batches.
    /// </summary>
    /// <returns>
    /// A PdsBatchAttribUpdate instance.
    /// </returns>
    public static PdsBatchAttribUpdate construct()
    {
        return new PdsBatchAttribUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the PdsBatchAttribUpdate class to update attribute values for selected inventory batches.
    /// </summary>
    /// <param name="_journalList">
    /// The set of inventory batches to update.
    /// </param>
    /// <returns>
    /// A PdsBatchAttribUpdate instance.
    /// </returns>
    public static PdsBatchAttribUpdate newBuffer(
        RecordSortedList _journalList)
    {
        PdsBatchAttribUpdate pdsBatchAttribUpdate;

        pdsBatchAttribUpdate = PdsBatchAttribUpdate::construct();
        pdsBatchAttribUpdate.parmJournalList(_journalList);

        return pdsBatchAttribUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PdsBatchAttribUpdate    pdsBatchAttribUpdate;
        RecordSortedList        journalList;
        InventBatch             localInventBatch;
        FormDataSource          inventBatch_ds;
        InventQualityOrderTable localInventQualityOrderTable;

        if (_args.record() && _args.record().TableId == tableNum(InventBatch))
        {
            localInventBatch = _args.record();
            inventBatch_ds = FormDataUtil::getFormDataSource(localInventBatch);
        }
        else
        {
            throw(error(Error::wrongUseOfFunction(funcName())));
        }

        try
        {
            if (localInventBatch)
            {
                journalList = FormLetter::createJournalListCopy(localInventBatch);
            }
            else
            {
                warning("@PRO1126");
            }

            pdsBatchAttribUpdate = PdsBatchAttribUpdate::newBuffer(journalList);

            if (_args.caller() && _args.caller().args() && _args.caller().args().record())
            {
                localInventQualityOrderTable = _args.caller().args().record();
                pdsBatchAttribUpdate.parmInventQualityOrderTable(localInventQualityOrderTable);
            }
            else
            {
                throw(error(Error::wrongUseOfFunction(funcName())));
            }

            pdsBatchAttribUpdate.run();
        }
        catch (Exception::Error)
        {
            throw error("@PDS1223");
        }

        inventBatch_ds.refresh();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>