<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCov</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxCov</c> class posts the calculated tax in cash flow forecasts.
/// </summary>
final class TaxCov
{
    LedgerCoverage  ledgerCoverage;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>TaxCov</c> class.
    /// </summary>
    /// <param name="_ledgerCoverage">
    ///    An instance of the <c>LedgerCoverage</c> class.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    An instance of the <c>LedgerCoverage</c> class was not specified.
    /// </exception>
    public void new(LedgerCoverage _ledgerCoverage)
    {
        if (!_ledgerCoverage)
        {
            throw error(strfmt("@SYS18707", funcname()));
        }

        ledgerCoverage  = _ledgerCoverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxLedgerCov</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates cash flow forecast records for the specified tax transactions.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    ///    A <c>TmpTaxWorkTrans</c> buffer that holds the tax transaction information.
    /// </param>
    /// <param name="_taxDate">
    ///    The date of the tax transaction; optional.
    /// </param>
    /// <remarks>
    ///    Specifying a value for the <paramref name="_taxDate" /> parameter overrides the value in the
    ///    <c>TmpTaxWorkTrans</c> record.
    /// </remarks>
    public void taxLedgerCov(TmpTaxWorkTrans _tmpTaxWorkTrans, TransDate _taxDate = dateNull())
    {
        TmpTaxWorkTrans    tmpTaxWorkTrans;

        RecId              mainAccountId;
        DimensionDefault   dimensionDefault;

        TaxTable           taxTable;
        TransDate          clearingDate;
        MainAccount        clearingAccount;
        TaxAmountCur       taxAmountCur;
        TransDate          taxDate;

        tmpTaxWorkTrans  = _tmpTaxWorkTrans;

        while select
                  sum(TaxAmount),
                  sum(SourceTaxAmountCur),
                  sum(SourceRegulateAmountCur)
              from tmpTaxWorkTrans
              group by TransDate, SourceCurrencyCode, LedgerDimension, TaxDirection,
              TaxOffsetUseTaxLedgerDimension, TaxCode, TaxAutogenerated
            // <GEERU>
              , OffsetLedgerDimension_RU, InventProfileType_RU, PostingProfile_RU
            // </GEERU>
              where tmpTaxWorkTrans.TaxDirection != TaxDirection::TaxExemptPurchase &&
                    tmpTaxWorkTrans.TaxDirection != TaxDirection::TaxExemptSales
        {
            if (_taxDate)
            {
                taxDate = _taxDate;
            }
            else
            {
                taxDate = tmpTaxWorkTrans.TransDate;
            }

            if (tmpTaxWorkTrans.TaxAutogenerated)
            {
                taxAmountCur = tmpTaxWorkTrans.SourceTaxAmountCur;
            }
            else
            {
                taxAmountCur = tmpTaxWorkTrans.SourceRegulateAmountCur;
            }

            taxTable = TaxTable::find(tmpTaxWorkTrans.TaxCode);

            clearingAccount     = LedgerDimensionFacade::getMainAccountFromLedgerDimension(TaxLedgerAccountGroup::find(taxTable.TaxAccountGroup).TaxReportLedgerDimension);
            clearingDate        = TaxPeriodHead::taxReportDate(taxTable.TaxPeriod, taxDate);

            if (!clearingDate)
            {
                checkFailed(strFmt("@SYS28773", taxTable.TaxPeriod, date2StrUsr(taxDate, DateFlags::FormatAll)));
            }
            // <GEERU>
            ledgerCoverage.parmPostingProfile_RU(tmpTaxWorkTrans.PostingProfile_RU);
            ledgerCoverage.parmInventProfileType_RU(tmpTaxWorkTrans.InventProfileType_RU);
            // </GEERU>

            if (!TaxParameters::find().PurchTaxOnOperations ||
                tmpTaxWorkTrans.TaxDirection == TaxDirection::OutgoingTax)
            {
                mainAccountId = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(tmpTaxWorkTrans.LedgerDimension);
                dimensionDefault = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(tmpTaxWorkTrans.LedgerDimension);

                ledgerCoverage.updateSum(taxDate,
                                         LedgerPostingType::Tax,
                                         mainAccountId,
                                         dimensionDefault,
                                         tmpTaxWorkTrans.SourceCurrencyCode,
                                         taxAmountCur);

                // <GEERU>
                if (tmpTaxWorkTrans.OffsetLedgerDimension_RU)
                {
                    ledgerCoverage.updateSum(taxDate,
                                             LedgerPostingType::Tax,
                                             LedgerDimensionFacade::getMainAccountFromLedgerDimension(tmpTaxWorkTrans.OffsetLedgerDimension_RU).RecId,
                                             dimensionDefault,
                                             tmpTaxWorkTrans.SourceCurrencyCode,
                                             -taxAmountCur);
                }
                // </GEERU>

                ledgerCoverage.updateSum(clearingDate,
                                         LedgerPostingType::Tax,
                                         mainAccountId,
                                         dimensionDefault,
                                         tmpTaxWorkTrans.SourceCurrencyCode,
                                         -taxAmountCur);

                ledgerCoverage.updateSum(clearingDate,
                                         LedgerPostingType::Tax,
                                         clearingAccount.RecId,
                                         dimensionDefault,
                                         tmpTaxWorkTrans.SourceCurrencyCode,
                                         taxAmountCur);
            }

            if (tmpTaxWorkTrans.TaxDirection == TaxDirection::UseTax)
            {
                mainAccountId = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(tmpTaxWorkTrans.TaxOffsetUseTaxLedgerDimension);
                dimensionDefault = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(tmpTaxWorkTrans.TaxOffsetUseTaxLedgerDimension);

                ledgerCoverage.updateSum(taxDate,
                                         LedgerPostingType::Tax,
                                         mainAccountId,
                                         dimensionDefault,
                                         tmpTaxWorkTrans.SourceCurrencyCode,
                                         -taxAmountCur);

                ledgerCoverage.updateSum(clearingDate,
                                         LedgerPostingType::Tax,
                                         mainAccountId,
                                         dimensionDefault,
                                         tmpTaxWorkTrans.SourceCurrencyCode,
                                         taxAmountCur);

                ledgerCoverage.updateSum(clearingDate,
                                         LedgerPostingType::Tax,
                                         clearingAccount.RecId,
                                         dimensionDefault,
                                         tmpTaxWorkTrans.SourceCurrencyCode,
                                         -taxAmountCur);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>