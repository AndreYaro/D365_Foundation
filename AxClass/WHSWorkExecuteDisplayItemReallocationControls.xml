<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayItemReallocationControls</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class responsible to build the mobile device display for the item reallocation process.
/// </summary>
public class WHSWorkExecuteDisplayItemReallocationControls
{
    #WHSRF
    private static const str ItemReallocationControlNamePrefix = 'Realloc ';
    private static const str LocationOnHandInfoControlNamePrefix = 'LocInfo ';

    public static const str ProceedControlName = 'Proceed';
    public static const str ProceedControlLabel = "@WAX:Proceed";
    public static const str ItemInformationControlName = 'ItemToReallocateInfo';
    public static const str AvailQtyInLocationsForReallocationControlName = 'AvailQtyInLocs';
    public static const str MaximumNumberOfLocationsExceededControlName = 'MaxNumLocs';

    public static const str TotalWorkLineInventQty = 'TotalInventQty';
    public static const str TotalReallocatedQty = 'TotalReallocatedQty';
    public static const str InventPickQtyFromInitialLocation = 'InventPickQtyFromInitialLoc';
    public static const str AutoReallocationRequired = 'AutoReallocationRequired';
    public static const str ManualSelectedLocationBeforeTrackingDimsAssigned = 'ManualSelectedLoc';
    public static const str WorkTransStr = 'WorkTrans';
    public static const str WorkTransSeperator = 'WorkTransSep';
    public static const str ShortPickedWorkLineRecId = 'ShortPickedWorkLineRecId';
    public static const str SelectedReallocationProcess = 'SelectedReallocationProcess';
    public static const str WarningLabel = 'WarningLabel';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getMaximumNumberOfLocationsExceededControlLabel</Name>
				<Source><![CDATA[
    public static str getMaximumNumberOfLocationsExceededControlLabel(ItemId _itemId)
    {
        return strFmt("@WAX:OnlyTheFirst120LocationsToReallocateAreDisplayed", _itemId) + '\n';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailQtyInLocationsForReallocationControlLabel</Name>
				<Source><![CDATA[
    public static str getAvailQtyInLocationsForReallocationControlLabel()
    {
        return "@WAX:AvailableQtyInLocations" + '\n' + '\n';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemReallocationForLocationControlName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the name of the control showing the information of a specific location to reallocate the item from.
    /// </summary>
    /// <param name = "_locationId">The current location ID</param>
    /// <returns>The name of the control</returns>
    public static FormControlName getItemReallocationForLocationControlName(WMSLocationId _locationId)
    {
        return ItemReallocationControlNamePrefix + _locationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocationOnHandInformationControlName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the name of the control showing the information of a specific location to reallocate the item from.
    /// </summary>
    /// <param name = "_locationId">The current location ID</param>
    /// <returns>The name of the control</returns>
    public static FormControlName getLocationOnHandInformationControlName(WMSLocationId _locationId)
    {
        return LocationOnHandInfoControlNamePrefix + _locationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemInformationControlLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the label of the control showing the information of the item that needs to be reallocated.
    /// </summary>
    /// <param name = "_itemId">The item ID</param>
    /// <param name = "_inventDim">The inventDim record</param>
    /// <param name = "_totalInventQtyToPick">The total inventory quantity needed to be picked</param>
    /// <param name = "_remainingInventQtyToReallocate">The inventory quantity remaining to be reallocated</param>
    /// <param name = "_remainingReservInventQtyToReallocate">The available reserved quantity to be reallocated</param>
    /// <returns>The label of the control showing general information of the item that needs to be reallocated</returns>
    public static str getItemInformationControlLabel(
                                ItemId      _itemId,
                                InventDim   _inventDim,
                                InventQty   _totalInventQtyToPick,
                                InventQty   _remainingInventQtyToReallocate,
                                InventQty   _remainingReservInventQtyToReallocate)
    {
        InventTable inventTable = InventTable::find(_itemId);
        str label = strFmt("@WAX3002", inventTable.productNameWhsWorkExecute());

        label += WHSWorkExecuteDisplayItemReallocationControls::getAboveLocationDimensionsLabel(inventTable, _inventDim);
        label += '\n';
        label += WHSWorkExecuteDisplayItemReallocationControls::getInventAndGroupedQtyLabel("@WAX:TotalQty", _itemId, _inventDim.inventDimId, _totalInventQtyToPick);
        label += '\n';
        label += WHSWorkExecuteDisplayItemReallocationControls::getInventAndGroupedQtyLabel("@WAX:RemainingToReallocateQty", _itemId, _inventDim.inventDimId, _remainingInventQtyToReallocate);
        label += '\n';

        if (_remainingReservInventQtyToReallocate < _remainingInventQtyToReallocate)
        {
            label += WHSWorkExecuteDisplayItemReallocationControls::getInventAndGroupedQtyLabel("@WAX:AvailReservedQtyToReallocate", _itemId, _inventDim.inventDimId, _remainingReservInventQtyToReallocate);
            label += '\n';
        }
        return label;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocationOnHandInformationControlLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the label of the control showing the on hand quantity information of a specific location available to reallocate the item from.
    /// </summary>
    /// <param name = "_itemId">The item ID</param>
    /// <param name = "_inventDimId">The inventDim ID</param>
    /// <param name = "_availablePhysicalInventQty">The available inventory quantity on this location for the specified inventDim</param>
    /// <returns>The label of the control</returns>
    public static str getLocationOnHandInformationControlLabel(
                                                    ItemId              _itemId,
                                                    InventDimId         _inventDimId,
                                                    InventQty           _availablePhysicalInventQty)
    {
        str label;

        label += WHSWorkExecuteDisplayItemReallocationControls::getInventAndGroupedQtyLabel("@WAX1283", _itemId, _inventDimId, _availablePhysicalInventQty);
        label += '\n';
        label += '\n';

        return label;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocationIdFromControl</Name>
				<Source><![CDATA[
    public static WMSLocationId getLocationIdFromControl(FormControlName _controlName)
    {
        int reallocationPrefixLength = strLen(ItemReallocationControlNamePrefix);
        return subStr(_controlName, reallocationPrefixLength + 1, strLen(_controlName) - reallocationPrefixLength + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemReallocationControl</Name>
				<Source><![CDATA[
    public static boolean isItemReallocationControl(FormControlName _controlNameToValidate)
    {
        return strContains(_controlNameToValidate, ItemReallocationControlNamePrefix);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProceedControl</Name>
				<Source><![CDATA[
    public static boolean isProceedControl(FormControlName _controlNameToValidate)
    {
        return _controlNameToValidate == ProceedControlName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAboveLocationDimensionsLabel</Name>
				<Source><![CDATA[
    private static str getAboveLocationDimensionsLabel(InventTable _inventTable, InventDim _inventDim)
    {
        str label;

        ListEnumerator le = WHSReservationHierarchyProvider::construct().getDimListAboveLocationFromInventTable(_inventTable, WHSReservationHierarchySortOrder::TopDown).getEnumerator();

        while (le.moveNext())
        {
            WHSReservationHierarchyElementData hierarchyElementData = le.current();
            FieldId dimFieldId = hierarchyElementData.parmDimensionFieldId();

            if (_inventDim.(dimFieldId)
                && dimFieldId != fieldNum(InventDim, InventLocationId)
                && dimFieldId != fieldNum(InventDim, InventSiteId))
            {
                label += strFmt("\n %1: %2", new DictField(tableNum(InventDim), dimFieldId).label(), _inventDim.(dimFieldId));
            }
        }

        return Label;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventAndGroupedQtyLabel</Name>
				<Source><![CDATA[
    private static str getInventAndGroupedQtyLabel(str _qtyDescription, ItemId _itemId, InventDimId _inventDimId, InventQty _inventQty)
    {
        const str UomQtySeparator = ';\t';
        Qty                     groupedQty;
        UnitOfMeasureSymbol     groupedQtyUnitId;
        UnitOfMeasureSymbol     inventUnitId = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);

        [groupedQty,
            groupedQtyUnitId] = WHSInventTable::getHighestUnitQtyByUOMSeqGroup(_itemId, _inventQty, inventUnitId , _inventDimId);

        Description inventUnitIdDescription = UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::unitOfMeasureIdBySymbol(inventUnitId), Global::currentUserLanguage()).Description;
        Description groupedQtyUnitIdDescription = (inventUnitId == groupedQtyUnitId) ? inventUnitIdDescription : UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::unitOfMeasureIdBySymbol(groupedQtyUnitId), Global::currentUserLanguage()).Description;

        return strFmt(_qtyDescription,
                    _inventQty,
                    inventUnitIdDescription,
                    groupedQty,
                    groupedQtyUnitIdDescription,
                    UomQtySeparator);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>