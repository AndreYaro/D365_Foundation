<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOpportunisticCrossDockCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSOpportunisticCrossDockCreator</c> class identifies cross docking opportunities, and
/// links the demand and supply transactions.
/// </summary>
public class WHSOpportunisticCrossDockCreator
{
    WHSCrossDockOpportunityPolicy       crossDockPolicy;
    InventTransId                       supplyTransId;
    InventTransOriginIdMarked           markedTransId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>crossDock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks for and processes cross dock opportunities.
    /// </summary>
    /// <param name = "_supplyQtyToCrossDock">
    /// The available cross dock supply quantity.
    /// </param>
    /// <param name = "_supplyInventDim">
    /// The <c>InventDim</c> of the available supply for cross docking.
    /// </param>
    /// <returns>
    /// A <c>WHSCrossDockId</c> if a cross dock opportunity is available.
    /// </returns>
    public WHSCrossDockId crossDock(
        InventQty _supplyQtyToCrossDock,
        InventDim _supplyInventDim)
    {
        ttsbegin;

        WHSCrossDockDemandSourceSelectionCriteria crossDockDemandSourceSelectionCriteria;
        WHSCrossDockId                            crossDockId;
        InventQty                                 remainingCrossDockQty = _supplyQtyToCrossDock;

        while select crossDockDemandSourceSelectionCriteria
            order by crossDockDemandSourceSelectionCriteria.Priority
            where crossDockDemandSourceSelectionCriteria.CrossDockOpportunityPolicy == crossDockPolicy.RecId
        {
            WHSCrossDockDemandSelector crossDockDemandSelector = WHSCrossDockDemandSelector::newFromWorkTypeFulfillmentStrategy(crossDockDemandSourceSelectionCriteria.DemandSourceType,
                                                                                                                                crossDockDemandSourceSelectionCriteria.CrossDockFulfillmentStrategy);

            remainingCrossDockQty = crossDockDemandSelector.selectDemandSourcesToCrossDock(remainingCrossDockQty,
                                                                                           _supplyInventDim,
                                                                                           supplyTransId,
                                                                                           crossDockDemandSourceSelectionCriteria.RequiresLocation,
                                                                                           crossDockId,
                                                                                           markedTransId);

            if (!crossDockId)
            {
                crossDockId = crossDockDemandSelector.crossDockId;
            }

            if (!remainingCrossDockQty)
            {
                break;
            }
        }

        if (crossDockId)
        {
            this.processCrossDockOpportunities(crossDockId);
        }

        ttscommit;

        return crossDockId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCrossDockOpportunities</Name>
				<Source><![CDATA[
    private void processCrossDockOpportunities(WHSCrossDockId _crossDockId)
    {
        WHSCrossDockOpportunity crossDockOpportunity;
        InventTransOrigin       demandInventTransOrigin;
        InventTransOrigin       supplyInventTransOrigin;

        while select forupdate crossDockOpportunity
            where crossDockOpportunity.CrossDockId == _crossDockId
            join ReferenceCategory, RecId from demandInventTransOrigin
                where demandInventTransOrigin.InventTransId == crossDockOpportunity.DemandTransId
            join RecId from supplyInventTransOrigin
                where supplyInventTransOrigin.InventTransId == crossDockOpportunity.SupplyTransId
        {
            WHSCrossDockCreatorDemand crossDockCreatorDemand = WHSCrossDockCreatorDemand::newFromDemandTransactionType(demandInventTransOrigin.ReferenceCategory, crossDockOpportunity.DemandTransId);

            InventDim supplyInventDimCriteria = InventDim::find(crossDockOpportunity.SupplyInventDimId);
            supplyInventDimCriteria.clearLocationAndBelowDim(InventTransOrigin::findByInventTransId(crossDockOpportunity.SupplyTransId).ItemId);

            InventDimParm supplyInventDimParm;
            supplyInventDimParm.initFromInventDim(supplyInventDimCriteria);

            InventDim demandInventDimCriteria = crossDockCreatorDemand.getDemandInventDimCriteria();

            InventDimParm demandInventDimParm;
            demandInventDimParm.initFromInventDim(demandInventDimCriteria);

            // Find existing marked qty
            InventQty existingMarkedQty = this.getExistingMarkedQty(crossDockOpportunity);
            InventQty qtyToMark = max((crossDockOpportunity.CrossDockQuantity - existingMarkedQty), 0);

            if (qtyToMark)
            {
                InventTransOrigin::updateMarking(demandInventTransOrigin.RecId, supplyInventTransOrigin.RecId, -qtyToMark, '', SortOrder::Ascending, false, demandInventDimCriteria, demandInventDimParm);
                InventTransOrigin::updateMarking(supplyInventTransOrigin.RecId, demandInventTransOrigin.RecId,  qtyToMark, '', SortOrder::Ascending, false, supplyInventDimCriteria, supplyInventDimParm);

                InventUpd_Reservation::updateReserveRefTransId(crossDockCreatorDemand.getDemandMovement(),
                                                               true,
                                                               false,
                                                               true);
            }

            supplyInventDimCriteria = InventDim::findOrCreate(supplyInventDimCriteria);

            if (supplyInventDimCriteria.inventDimId != demandInventDimCriteria.inventDimId
            &&  crossDockOpportunity.LoadLine)
            {
                // Update load line, splits if needed.
                RecId newLoadLineRecId = this.synchronizeLoadLine(crossDockOpportunity, supplyInventDimCriteria.inventDimId);

                crossDockOpportunity.LoadLine = newLoadLineRecId;
                crossDockOpportunity.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExistingMarkedQty</Name>
				<Source><![CDATA[
    private InventQty getExistingMarkedQty(WHSCrossDockOpportunity _crossDockOpportunity)
    {
        InventTransOriginId supplyTransOriginId = InventTransOrigin::findByInventTransId(_crossDockOpportunity.SupplyTransId).RecId;
        InventTransOrigin   demandTransOrigin;
        InventTrans         demandTrans;

        select sum(Qty) from demandTrans
            where demandTrans.MarkingRefInventTransOrigin == supplyTransOriginId
            &&    (demandTrans.StatusIssue                == StatusIssue::OnOrder
            ||     demandTrans.StatusIssue                == StatusIssue::ReservOrdered)
            exists join demandTransOrigin
                where demandTransOrigin.RecId         == demandTrans.InventTransOrigin
                &&    demandTransOrigin.InventTransId == _crossDockOpportunity.DemandTransId;

        return abs(demandTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeLoadLine</Name>
				<Source><![CDATA[
    private RefRecId synchronizeLoadLine(
        WHSCrossDockOpportunity _crossDockOpportunity,
        InventDimID             _supplyInventDimId)
    {
        WHSLoadLineDataBuilder loadLineDataBuider = WHSLoadLineDataBuilder::construct();
        loadLineDataBuider.fillCrossDockOpportunityMap(_crossDockOpportunity, _supplyInventDimId);

        WHSLoadLine loadLine = WHSLoadLine::findbyRecId(_crossDockOpportunity.LoadLine);

        WHSLoadLineUpdater loadLineUpdater = WHSLoadLineUpdater::newFromTransId(loadLine.InventTransId);
        loadLineUpdater.createSplitLoadLines(loadLine.InventDimId, loadLineDataBuider.parmMapLoadLinesOpenQty(), loadLine.LoadId);

        WHSLoadLine newLoadLine;

        select firstonly RecId from newLoadLine
            where newLoadLine.LoadId        == loadLine.LoadId
            &&    newLoadLine.InventTransId == loadLine.InventTransId
            &&    newLoadLine.InventDimId   == _supplyInventDimId;

        return newLoadLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>WHSOpportunisticCrossDockCreator</c> based on common parameters.
    /// </summary>
    /// <param name = "_supplyTransId">
    /// The <C>InventTransId</C> of the supply transaction for cross docking.
    /// </param>
    /// <param name = "_crossDockPolicyRecId"></param>
    /// <returns></returns>
    public static WHSOpportunisticCrossDockCreator newFromParameters(
        InventTransId             _supplyTransId,
        RefRecId                  _crossDockPolicyRecId,
        InventTransOriginIdMarked _markedTransId = 0)
    {
        var opportunisticCrossDock = WHSOpportunisticCrossDockCreator::construct();

        opportunisticCrossDock.supplyTransId    = _supplyTransId;
        opportunisticCrossDock.crossDockPolicy  = WHSCrossDockOpportunityPolicy::findByRecId(_crossDockPolicyRecId);
        opportunisticCrossDock.markedTransId    = _markedTransId;

        return opportunisticCrossDock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSOpportunisticCrossDockCreator construct()
    {
        return new WHSOpportunisticCrossDockCreator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>