<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSPEDContabilProcessorUIBuilder_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Builds custom UI for SPED Contabil processing.
/// </summary>
public class FBSPEDContabilProcessorUIBuilder_BR extends SysOperationAutomaticUIBuilder
{
    DialogField                         dialogFieldFiscalOrganization;
    DialogField                         dialogFieldLayoutVersion;
    DialogField                         dialogFieldOpeningSituation;
    DialogField                         dialogFieldSituationType;
    DialogField                         dialogFieldType;
    DialogField                         dialogFieldFileType;
    DialogField                         dialogFieldFileTypeSimple;
    DialogField                         dialogFieldFromDate;
    DialogField                         dialogFieldToDate;
    DialogField                         dialogFieldAddAccountingStatements;
    DialogField                         dialogFieldAccStatementPeriod;
    DialogField                         dialogFieldFiscalYearClosingDate;
    DialogField                         dialogFieldFileHash;
    DialogField                         dialogFieldSubstDescription;
    DialogField                         dialogFieldSubstReasonCode;
    protected DialogField               dialogFieldReferencedCoA;
    protected DialogField               dialogFieldInstitutionType;

    FBSPEDContabilProcessorContract_BR  spedContabilProcessorContract;
    FileUpload                          rtfFileUpload;

    private const str rtfFileUploadName = 'RTFFileUpload';
    private const str OkButtonName = 'CommandButton';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAccStatementModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the accounting statement period dialog field according to the checkbox control value.
    /// </summary>
    /// <param name="_formCheckBoxControl">
    /// The checkbox control.
    /// </param>
    /// <returns>
    /// True if the value was modified successfully; otherwise, false.
    /// </returns>
    public boolean addAccStatementModified(FormCheckBoxControl _formCheckBoxControl)
    {
        boolean ret;

        ret = _formCheckBoxControl.modified();

        dialogFieldAccStatementPeriod.enabled(_formCheckBoxControl.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referencedCoAModified</Name>
				<Source><![CDATA[
    public boolean referencedCoAModified(FormCheckBoxControl _formCheckBoxControl)
    {
        boolean ret = _formCheckBoxControl.modified();

        dialogFieldInstitutionType.allowEdit(_formCheckBoxControl.value());
        dialogFieldInstitutionType.value(_formCheckBoxControl.value() ? dialogFieldInstitutionType.value() : 0);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDateModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes both the file name and the fiscal year closing date according to the date control value.
    /// </summary>
    /// <param name="_formDateControl">
    /// The date control.
    /// </param>
    /// <returns>
    /// True if the value was modified successfully; otherwise, false.
    /// </returns>
    public boolean toDateModified(FormDateControl _formDateControl)
    {
        boolean ret;

        ret = _formDateControl.modified();

        this.setFiscalYearClosingDate();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileTypeModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the file type change event.
    /// </summary>
    /// <param name="_formComboBoxControl">
    /// The file type control.
    /// </param>
    /// <returns>
    /// True if the value was modified successfully; otherwise, false.
    /// </returns>
    public boolean fileTypeModified(FormComboBoxControl _formComboBoxControl)
    {
        boolean ret = _formComboBoxControl.modified();

        this.setReplacementVisible();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalOrganizationModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the setup parameters and changes the file name according to the fiscal organization value.
    /// </summary>
    /// <param name="_referenceGroupControl">
    /// The fiscal organization value control.
    /// </param>
    /// <returns>
    /// True if the fiscal organization was modified successfully; otherwise, false.
    /// </returns>
    public boolean fiscalOrganizationModified(FormReferenceGroupControl _referenceGroupControl)
    {
        boolean ret;

        ret = _referenceGroupControl.modified();

        this.loadSetupParameters();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>layoutVersionModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the layout version change event.
    /// </summary>
    /// <param name="_formComboBoxControl">
    /// The layout version control.
    /// </param>
    /// <returns>
    /// True if the value was modified successfully; otherwise, false.
    /// </returns>
    public boolean layoutVersionModified(FormComboBoxControl _formComboBoxControl)
    {
        boolean ret = _formComboBoxControl.modified();

        this.setFileTypeControl(_formComboBoxControl.selection());
        this.setReplacementVisible();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSetupParameters</Name>
				<Source><![CDATA[
    private void loadSetupParameters()
    {
        FBSPEDContabilSetupParameters_BR    spedContabilSetupParameters;
        FiscalOrganizationRecId_BR          fiscalOrganizationRecId;

        fiscalOrganizationRecId = dialogFieldFiscalOrganization.value();

        spedContabilSetupParameters = FBSPEDContabilSetupParameters_BR::find(fiscalOrganizationRecId);

        dialogFieldLayoutVersion.value(spedContabilSetupParameters.LayoutVersion);
        dialogFieldOpeningSituation.value(spedContabilSetupParameters.OpeningPeriodSituation);
        dialogFieldSituationType.value(spedContabilSetupParameters.SituationType);
        dialogFieldType.value(spedContabilSetupParameters.Type);
        this.layoutVersionModified(dialogFieldLayoutVersion.control());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the dialog UI after core initialization.
    /// </summary>
    public void postBuild()
    {
        super();

        spedContabilProcessorContract       = this.dataContractObject();

        dialogFieldFiscalOrganization       = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmFiscalOrganization));
        dialogFieldLayoutVersion            = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmLayoutVersion));
        dialogFieldOpeningSituation         = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmOpeningPeriodSituation));
        dialogFieldSituationType            = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmSituationType));
        dialogFieldType                     = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmType));
        dialogFieldFileType                 = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmFileType));
        dialogFieldFileTypeSimple           = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmFileTypeSimple));
        dialogFieldFromDate                 = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmFromDate));
        dialogFieldToDate                   = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmToDate));
        dialogFieldAddAccountingStatements  = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmAddAccountingStatements));
        dialogFieldAccStatementPeriod       = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmAccStatementPeriod));
        dialogFieldFiscalYearClosingDate    = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmFiscalYearClosingDate));
        dialogFieldFileHash                 = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmFileHash));
        dialogFieldSubstDescription         = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmSubstDescription));
        dialogFieldSubstReasonCode          = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmSubstitutionReasonCode));
        dialogFieldReferencedCoA           = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmReferencedCoA));
        dialogFieldInstitutionType          = this.bindInfo().getDialogField(spedContabilProcessorContract, methodStr(FBSPEDContabilProcessorContract_BR, parmInstitutionType));

        dialogFieldFiscalOrganization.registerOverrideMethod(methodStr(FormReferenceGroupControl, modified), methodStr(FBSPEDContabilProcessorUIBuilder_BR, fiscalOrganizationModified), this);
        dialogFieldToDate.registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(FBSPEDContabilProcessorUIBuilder_BR, toDateModified), this);
        dialogFieldAddAccountingStatements.registerOverrideMethod(methodStr(FormCheckBoxControl, modified), methodStr(FBSPEDContabilProcessorUIBuilder_BR, addAccStatementModified), this);
        dialogFieldLayoutVersion.registerOverrideMethod(methodStr(FormComboBoxControl, modified), methodStr(FBSPEDContabilProcessorUIBuilder_BR, layoutVersionModified), this);
        dialogFieldFileTypeSimple.registerOverrideMethod(methodStr(FormComboBoxControl, modified), methodStr(FBSPEDContabilProcessorUIBuilder_BR, fileTypeModified), this);
        dialogFieldReferencedCoA.registerOverrideMethod(methodStr(FormCheckBoxControl, modified), methodStr(FBSPEDContabilProcessorUIBuilder_BR, referencedCoAModified), this);

        dialogFieldType.allowEdit(false);
        dialogFieldInstitutionType.allowEdit(dialogFieldReferencedCoA.value());
        dialogFieldInstitutionType.value(dialogFieldReferencedCoA.value() ? dialogFieldInstitutionType.value() : 0);

        dialogFieldAccStatementPeriod.enabled(spedContabilProcessorContract.parmAddAccountingStatements());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileTypeControl</Name>
				<Source><![CDATA[
    private void setFileTypeControl(FBSPEDContabilLayoutVersion_BR _layoutVersion)
    {
        switch (_layoutVersion)
        {
            default :
                dialogFieldFileTypeSimple.visible(true);
                dialogFieldFileType.visible(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFiscalYearClosingDate</Name>
				<Source><![CDATA[
    private void setFiscalYearClosingDate()
    {
        FiscalCalendarYear      fiscalCalendarYear;
        FiscalCalendarPeriod    fiscalCalendarPeriod;

        fiscalCalendarYear  = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), dialogFieldToDate.value());

        select firstOnly EndDate from fiscalCalendarPeriod
        where   fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId
            &&  fiscalCalendarPeriod.Type               == FiscalPeriodType::Closing;

        dialogFieldFiscalYearClosingDate.value(fiscalCalendarPeriod.EndDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReplacementVisible</Name>
				<Source><![CDATA[
    private void setReplacementVisible()
    {
        FormComboBoxControl fileTypeControl = dialogFieldFileTypeSimple.control() as FormComboBoxControl;
        boolean visible = fileTypeControl.visible() && fileTypeControl.selection() == FBSPEDFileType_BR::Substitute;

        dialogFieldFileHash.visible(visible);
        rtfFileUpload.visible(visible);
        dialogFieldSubstDescription.visible(visible);
        dialogFieldSubstReasonCode.visible(visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    public void postRun()
    {
        super();

        var formRun = this.dialog().dialogForm().formRun();
        rtfFileUpload = formRun.control(formRun.controlId(rtfFileUploadName));

        if (rtfFileUpload)
        {
            rtfFileUpload.notifyUploadAttemptStarted += eventhandler(this.rtfUploadAttemptStarted);
            rtfFileUpload.notifyUploadCompleted += eventhandler(this.rtfUploadCompleted);
        }

        this.setFileTypeControl(spedContabilProcessorContract.parmLayoutVersion());
        this.setReplacementVisible();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rtfUploadAttemptStarted</Name>
				<Source><![CDATA[
    protected void rtfUploadAttemptStarted()
    {
        if (rtfFileUpload)
        {
            if (dialogFieldSubstDescription.value() && dialogFieldSubstDescription.value() == spedContabilProcessorContract.parmReplaceRTFFileName())
            {
                dialogFieldSubstDescription.value('');
            }

            spedContabilProcessorContract.parmReplaceRTFFileContent('');
            spedContabilProcessorContract.parmReplaceRTFFileName('');

            var formRun = this.dialog().dialogForm().formRun();
            this.setDialogOkButtonEnabled(formRun, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rtfUploadCompleted</Name>
				<Source><![CDATA[
    protected void rtfUploadCompleted()
    {
        if (rtfFileUpload)
        {
            if (rtfFileUpload.getFileUploadResult())
            {
                spedContabilProcessorContract.parmReplaceRTFFileName(rtfFileUpload.getFileUploadResult().getFileName());

                try
                {
                    using (System.IO.Stream stream = rtfFileUpload.getFileUploadResult().openResult())
                    {
                        using (System.IO.StreamReader sr = new System.IO.StreamReader(stream))
                        {
                            spedContabilProcessorContract.parmReplaceRTFFileContent(sr.ReadToEnd());
                        }
                    }
                }
                catch
                {
                    error("@SPEDECDLayout5:TheReplacementFileCannotBeLoaded");
                }
                
                if (!dialogFieldSubstDescription.value())
                {
                    dialogFieldSubstDescription.value(spedContabilProcessorContract.parmReplaceRTFFileName());
                }

                rtfFileUpload.getFileUploadResult().deleteResult();
            }

            var formRun = this.dialog().dialogForm().formRun();
            this.setDialogOkButtonEnabled(formRun, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogOkButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Enables or disables the dialog Ok button.
    /// </summary>
    /// <param name = "_formRun">The <c>FormRun</c> object.</param>
    /// <param name = "_isEnabled">Indicates to enable or disable the Ok button.</param>
    protected void setDialogOkButtonEnabled(FormRun _formRun, boolean _isEnabled)
    {
        FormControl okButtonControl = _formRun.control(_formRun.controlId(OkButtonName));
        if (okButtonControl)
        {
            okButtonControl.enabled(_isEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDialogField</Name>
				<Source><![CDATA[
    protected DialogField addDialogField(IdentifierName methodName, Object _dataContract = this.dataContractObject())
    {
        DialogField ret;
    
        if (methodName == methodStr(FBSPEDContabilProcessorContract_BR, parmReplaceRTFFileName))
        {
            Dialog dlg = this.dialog() as Dialog;
            FormBuildGroupControl groupControl = dlg.curFormBuildGroup();
            FileUploadBuild dialogFileUpload = groupControl.addControlEx(classstr(FileUpload), rtfFileUploadName);
            dialogFileUpload.style(FileUploadStyle::MinimalWithFilename);
            dialogFileUpload.baseFileUploadStrategyClassName(classstr(FileUploadTemporaryStorageStrategy));
            dialogFileUpload.fileNameLabel("@SYS332565");
        }
        else
        {
            ret = super(methodName, _dataContract);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>