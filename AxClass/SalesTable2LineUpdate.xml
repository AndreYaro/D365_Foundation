<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTable2LineUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesTable2LineUpdate
{
    SalesTable                  salesTable;
    List                        salesTable2LineUpdateFields;
    NoYes                       updatePricedisc;
    PriceDiscUpdatePriceDisc    updatePriceDiscMode;
    DialogButton                copyTaxGroupToMarkupTrans;
    DeliveryDateUpdateInLines   deliveryDateUpdateInLines;
    protected DialogButton copyOverrideSalesTaxToMarkupTrans;
    private boolean isTaxIntegrationEnabledForSales = Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SalesTable2LineUpdatePrompt salesTable2LineUpdatePrompt)
    {
        this.initFromSalesTable2LineUpdatePrompt(salesTable2LineUpdatePrompt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable2LineUpdatePrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize from the <c>SalesTable2LineUpdatePrompt</c> class.
    /// </summary>
    /// <param name="_salesTable2LineUpdatePrompt">Instance to the <c>SalesTable2LineUpdatePrompt</c> class.</param>
    protected void initFromSalesTable2LineUpdatePrompt(SalesTable2LineUpdatePrompt _salesTable2LineUpdatePrompt)
    {
        salesTable = _salesTable2LineUpdatePrompt.salesTable();
        container packedList = _salesTable2LineUpdatePrompt.packedSalesTable2LineUpdateFields();
        
        if (packedList)
        {
            salesTable2LineUpdateFields = List::create(packedList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyTaxGroupToMarkupTrans</Name>
				<Source><![CDATA[
    public DialogButton parmCopyTaxGroupToMarkupTrans(DialogButton _copyTaxGroupToMarkupTrans = copyTaxGroupToMarkupTrans)
    {
        copyTaxGroupToMarkupTrans = _copyTaxGroupToMarkupTrans;

        return copyTaxGroupToMarkupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryDateUpdateInLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets which type of the update of the delivery dates should be used.
    /// </summary>
    /// <param name="_deliveryDateUpdateInLines">
    /// The <c>DeliveryDateUpdateInLines</c> value.
    /// </param>
    public void parmDeliveryDateUpdateInLines(DeliveryDateUpdateInLines _deliveryDateUpdateInLines)
    {
        deliveryDateUpdateInLines = _deliveryDateUpdateInLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdatePricedisc</Name>
				<Source><![CDATA[
    public NoYes parmUpdatePricedisc(NoYes _updatePricedisc = updatePricedisc)
    {
        updatePricedisc = _updatePricedisc;
        return updatePricedisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdatePriceDiscMode</Name>
				<Source><![CDATA[
    public PriceDiscUpdatePriceDisc parmUpdatePriceDiscMode(PriceDiscUpdatePriceDisc _updatePriceDiscMode = updatePriceDiscMode)
    {
        updatePriceDiscMode = _updatePriceDiscMode;
        return updatePriceDiscMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunLine</Name>
				<Source><![CDATA[
    QueryRun queryRunLine(boolean _update = false)
    {
        return new QueryRun(salesTable.querySalesLine(_update));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsAsModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields as modified.
    /// </summary>
    /// <param name = "_salesTable2LineField">The modified field.</param>
    /// <param name = "_axSalesTable">The AxBC-class for the <c>SalesTable</c> record.</param>
    protected void setFieldsAsModified(SalesTable2LineField _salesTable2LineField, AxSalesTable _axSalesTable)
    {
        switch (_salesTable2LineField.fieldId())
        {
            case fieldNum(SalesTable, DeliveryDate):
                _axSalesTable.setFieldAsModified(fieldNum(SalesTable, ShippingDateConfirmed));
                _axSalesTable.setFieldAsModified(fieldNum(SalesTable, ReceiptDateConfirmed));
                _axSalesTable.setFieldAsModified(fieldNum(SalesTable, ReceiptDateRequested));
                _axSalesTable.setFieldAsModified(fieldNum(SalesTable, ShippingDateRequested));
                break;

            case fieldNum(SalesTable, InventLocationId):
                _axSalesTable.setFieldAsModified(fieldNum(SalesTable, InventSiteId));
                break;

            case fieldNum(SalesTable, DlvMode):
                _axSalesTable.setFieldAsModified(fieldNum(SalesTable, ShipCarrierId));
                _axSalesTable.setFieldAsModified(fieldNum(SalesTable, ShipCarrierAccountCode));
                _axSalesTable.setFieldAsModified(fieldNum(SalesTable, ShipCarrierDlvType));
                break;
        }

        _axSalesTable.setFieldAsModified(_salesTable2LineField.fieldId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;

        AxSalesTable axSalesTable = AxSalesTable::newSalesTable(salesTable);

        //<GEERU>
        #isoCountryRegionCodes
        AxSalesTable_RU axSalesTable_RU;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            axSalesTable_RU = AxSalesTable_RU::newSalesTable_RU(salesTable.salesTable_RU());
        }
        //</GEERU>

        //<GEECZ>
        AxSalesTable_Intrastat axSalesTable_Intrastat;
        if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(SalesTable_Intrastat)))
        {
            axSalesTable_Intrastat = AxSalesTable_Intrastat::newSalesTable_Intrastat(salesTable.salesTable_Intrastat());
        }
        //</GEECZ>
        
        boolean updateTaxGroupOnLines = false;
        boolean updateOverrideSalesTaxOnLines = false;
        if (salesTable2LineUpdateFields)
        {
            ListEnumerator salesTable2LineUpdateFieldsEnumerator = salesTable2LineUpdateFields.getEnumerator();

            while (salesTable2LineUpdateFieldsEnumerator.moveNext())
            {
                SalesTable2LineField salesTable2LineField = salesTable2LineUpdateFieldsEnumerator.current();

                if (salesTable2LineField.updateSalesLines())
                {
                    //<GEERU>
                    if (axSalesTable_RU && salesTable2LineField.tableId() == tableNum(SalesTable_RU))
                    {
                        axSalesTable_RU.setFieldAsModified(salesTable2LineField.fieldId());
                    }
                    //</GEERU>
                    // <GEECZ>
                    else if (axSalesTable_Intrastat && salesTable2LineField.tableId() == tableNum(SalesTable_Intrastat))
                    {
                        axSalesTable_Intrastat.setFieldAsModified(salesTable2LineField.fieldId());
                    }
                    else
                    {
                        // </GEECZ>
                        this.setFieldsAsModified(salesTable2LineField, axSalesTable);
                        
                        switch (salesTable2LineField.fieldId())
                        {
                            case fieldNum(SalesTable, TaxGroup):
                                updateTaxGroupOnLines = true;
                                break;
                            case fieldNum(SalesTable, OverrideSalesTax):
                                updateOverrideSalesTaxOnLines = true;
                                copyOverrideSalesTaxToMarkupTrans = this.promptCopyOverrideSalesTaxToSalesLineCharges();
                                break;
                        }
                        //<GEERU>
                    }
                    //</GEERU>
                }
            }
        }

        QueryRun queryRun = this.queryRunLine(true);

        setPrefix(#PreFixField(SalesTable, SalesId));
                    
        boolean errorFound = false;
        KittingISalesPurchTableToLineUpdate kittingISalesPurchTableToLineUpdate = KittingClassDelegateHelper::createISalesPurchTableToLineUpdate(axSalesTable);

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(SalesLine)))
            {
                SalesLine salesLine = queryRun.get(tableNum(SalesLine));
                if (salesLine)
                {
                    AxSalesLine axSalesLine;
                    if (kittingISalesPurchTableToLineUpdate && kittingISalesPurchTableToLineUpdate.excludePriceFromUpdate(salesLine, updatePriceDiscMode))
                    {
                        kittingISalesPurchTableToLineUpdate.manipulateFields(AddRemove::Remove);
                    }

                    if (this.canUpdateSalesLine(salesLine, axSalesTable))
                    {
                        //The method update in the class SalesLineUpdate calls some kitting methods
                        if (kittingISalesPurchTableToLineUpdate)
                        {
                            kittingISalesPurchTableToLineUpdate.reread(salesLine);
                        }

                        this.reReserveShelfInventory(salesLine, axSalesTable);

                        axSalesLine = this.instantiateAxSalesLine(salesLine);
                        axSalesLine.axSalesTable(axSalesTable);
                        //<GEERU>
                        if (axSalesTable_RU)
                        {
                            axSalesLine.axSalesTable_RU(axSalesTable_RU);
                        }
                        //</GEERU>
                        //<GEECZ>
                        AxSalesLine_Intrastat axSalesLine_Intrastat;
                        if (axSalesTable_Intrastat)
                        {
                            axSalesLine_Intrastat = AxSalesLine_Intrastat::newSalesLine_Intrastat(SalesLine_Intrastat::findBySalesLine(salesLine.RecId, true));
                            axSalesLine_Intrastat.parentAxBC(axSalesTable_Intrastat);
                        }
                        //</GEECZ>

                        this.modifySalesLine(salesLine, axSalesLine, updateTaxGroupOnLines);
                        this.modifyOverrideSalesTaxFromSalesLine(salesLine, axSalesLine, updateOverrideSalesTaxOnLines);

                        axSalesLine.save();
                        //<GEECZ>
                        if (axSalesTable_Intrastat)
                        {
                            axSalesLine_Intrastat.save();
                        }
                        //</GEECZ>
                    }
                    else
                    {
                        if (!errorFound)
                        {
                            info("@SYS114394");
                            errorFound = true;
                        }
                        info(strFmt("@SYS114393", salesLine.ItemId, salesLine.SalesQty));
                    }

                    if (kittingISalesPurchTableToLineUpdate)
                    {
                        if (axSalesLine.isFieldModified(fieldNum(SalesLine, SalesPrice)))
                        {
                            kittingISalesPurchTableToLineUpdate.storeLineInventTransId(axSalesLine.salesLine().InventTransId);
                            kittingISalesPurchTableToLineUpdate.resetPrice(salesLine);
                        }

                        kittingISalesPurchTableToLineUpdate.manipulateFields(AddRemove::Add);
                    }
                }
            }
        }

        if (kittingISalesPurchTableToLineUpdate)
        {
            kittingISalesPurchTableToLineUpdate.UpdateKitLineFields(this.queryRunLine(), tableNum(salesLine), updatePriceDiscMode);
            kittingISalesPurchTableToLineUpdate.resetPriceForKitHeaderFields(tableNum(SalesLine), this.queryRunLine());
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a <c>SalesLine</c> record can be updated based on a <c>SalesTable</c> record.
    /// </summary>
    /// <param name = "_salesLine">The <c>SalesLine</c> record.</param>
    /// <param name = "_axSalesTable">The AxBC-class for the <c>SalesTable</c> record.</param>
    /// <returns>true if the <c>SalesLine</c> record can be updated; otherwise, false.</returns>
    protected boolean canUpdateSalesLine(SalesLine _salesLine, AxSalesTable  _axSalesTable)
    {
        if (_salesLine.SalesStatus == SalesStatus::Invoiced)
        {
            return false;
        }
        
        InventMovement inventMovement = InventMovement::construct(_salesLine);
        if (_axSalesTable.getModifiedFields().in(fieldNum(SalesTable, InventSiteId)) && !inventMovement.canChangeConsistentDim(true))
        {
            return false;
        }

        InventDim inventDim = _salesLine.inventDim();
        inventDim.InventLocationId = salesTable.InventLocationId;
        if (_axSalesTable.getModifiedFields().in(fieldNum(SalesTable, InventLocationId))
         && (!_salesLine.validateModifyInventDim(inventDim, fieldNum(InventDim, InventLocationId))
          || !_salesLine.validateModifyInventDimOrderCommittedReservation(inventDim)))
        {
            return false;
        }

        if ((_axSalesTable.getModifiedFields().in(fieldNum(SalesTable, DlvMode))
            || _axSalesTable.getModifiedFields().in(fieldNum(SalesTable, ShippingDateRequested))
            || _axSalesTable.getModifiedFields().in(fieldNum(SalesTable, InventLocationId)))
            && !_salesLine.validateModifyTimeslotRelatedFields())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reReserveShelfInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Re-reserves the shelf life inventory for a sales line when the receipt dates are changed.
    /// </summary>
    /// <param name = "_salesLine">The <c>SalesLine</c> record.</param>
    /// <param name = "_axSalesTable">The AxBC-class for the <c>SalesTable</c> record.</param>
    protected void reReserveShelfInventory(SalesLine  _salesLine, AxSalesTable _axSalesTable)
    {
        if (#PdsShelfEnabled)
        {
            Set modifiedFieldsSet = _axSalesTable.getModifiedFields();
            if (modifiedFieldsSet.in(fieldNum(SalesTable, ReceiptDateRequested))
             || modifiedFieldsSet.in(fieldNum(SalesTable, ShippingDateRequested))
             || modifiedFieldsSet.in(fieldNum(SalesTable, ShippingDateConfirmed)))
            {
                PdsShelfLifeDateChangeValidatorFactory factory = PdsShelfLifeDateChangeValidatorFactory::construct();
                PdsShelfLifeIDateChangeValidator dateValidator = factory.createDateValidatorFromOrderLine(_salesLine);

                dateValidator.reReserveShelfInventory();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifySalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the <c>SalesLine</c> record based on a <c>SalesTable</c> record.
    /// </summary>
    /// <param name = "_salesLine">The <c>SalesLine</c> record.</param>
    /// <param name = "_axSalesLine">The AxBC-class for the <c>SalesLine</c> record.</param>
    /// <param name = "_updateTaxGroup">Whether to update the <c>TaxGroup</c> field.</param>
    protected void modifySalesLine(SalesLine _salesLine, AxSalesLine  _axSalesLine, boolean _updateTaxGroup)
    {
        _axSalesLine.setForceDeliveryDates(true);

        this.setPriceDiscountUpdateForReturnOrder(_salesLine);

        if (updatePricedisc)
        {
            boolean createSystemEntryChangePolicy = false;
            switch (updatePriceDiscMode)
            {
                case PriceDiscUpdatePriceDisc::KeepManualSystem :
                    if (!_axSalesLine.parmSystemEntryChangePolicy())
                    {
                        createSystemEntryChangePolicy = true;
                        _axSalesLine.salesLine().setPriceDiscChangePolicy(PriceDiscSystemSource::CopyFromSalesOrder);
                    }
                case PriceDiscUpdatePriceDisc::UpdateIndividual :
                    container priceDiscChangePolicyFieldIds = PriceDiscPolicyCheckPolicy::newFromParm(_salesLine).getPolicyFields();
                    for (int i = 1; i <= conLen(priceDiscChangePolicyFieldIds); i++)
                    {
                        _axSalesLine.setFieldAsTouched(conPeek(priceDiscChangePolicyFieldIds, i));
                    }

                    if (_salesLine.ProjId && !_salesLine.ManualEntryChangepolicy)
                    {
                        _axSalesLine.setFieldAsTouched(fieldNum(SalesLine, SalesPrice));
                    }

                    if (createSystemEntryChangePolicy)
                    {
                        SalesLine::resetAxSalesLinePolicies(_axSalesLine, PriceDiscSystemSource::None, 0, _axSalesLine.parmManualEntryChangepolicy());
                    }
                    break;

                case PriceDiscUpdatePriceDisc::UpdateAll :
                    SalesLine::resetAxSalesLinePolicies(_axSalesLine);
                    break;
            }
        }

        _salesLine.salesPurchLineInterface().setPriceDiscFixedPolicy(_salesLine, _axSalesLine);

        if (_updateTaxGroup)
        {
            // Also update misc. charges associated with the line.
            MarkupTrans::updateTaxGroup(_salesLine.TableId, _salesLine.RecId, salesTable.TaxGroup, _salesLine.TaxGroup, copyTaxGroupToMarkupTrans, _salesLine.isInterCompanyOrderLineInvoiceMatched());
        }

        _axSalesLine.setDeliveryDateUpdateInLines(deliveryDateUpdateInLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyOverrideSalesTaxFromSalesLine</Name>
				<Source><![CDATA[
    private void modifyOverrideSalesTaxFromSalesLine(SalesLine _salesLine, AxSalesLine  _axSalesLine, boolean _updateOverrideSalesTax)
    {
        if (_updateOverrideSalesTax && isTaxIntegrationEnabledForSales)
        {
            // Also update misc. charges associated with the line.
            MarkupTrans::updateOverrideSalesTax(_salesLine.TableId, _salesLine.RecId, salesTable.OverrideSalesTax, copyOverrideSalesTaxToMarkupTrans, _salesLine.isInterCompanyOrderLineInvoiceMatched());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateAxSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates <c>AxSalesLine</c> record.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record.
    /// </param>
    /// <returns>
    /// A <c>AxSalesLine</c> record.
    /// </returns>
    /// <remarks>
    /// This method is an extension point to control the creation of <c>AxSalesLine</c> record.
    /// </remarks>
    protected AxSalesLine instantiateAxSalesLine(SalesLine _salesLine)
    {
        return AxSalesLine::newSalesLine(_salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCopyOverrideSalesTaxToSalesLineCharges</Name>
				<Source><![CDATA[
    private DialogButton promptCopyOverrideSalesTaxToSalesLineCharges()
    {
        DialogButton ret = DialogButton::No;

        if (isTaxIntegrationEnabledForSales)
        {
            MarkupTrans markupTrans;
            SalesLine salesLine;
            select firstonly RecId from salesLine
                where salesLine.SalesId == salesTable.SalesId
                join TransTableId, TransRecId, IsDeleted from markupTrans
                    where markupTrans.TransTableId == tableNum(SalesLine)
                        && markupTrans.TransRecId == salesLine.RecId
                        && !markupTrans.IsDeleted;

            if (salesLine.RecId)
            {
                ret = MarkupTrans::promptCopyOverrideSalesTaxToMarkupTrans(tableNum(SalesLine), salesLine.RecId, false);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscountUpdateForReturnOrder</Name>
				<Source><![CDATA[
    private void setPriceDiscountUpdateForReturnOrder(SalesLine _salesLine)
    {
        if (_salesLine.InventTransIdReturn)
        {
            SalesLine returnSalesLine = SalesLine::findInventTransId(_salesLine.InventTransIdReturn);

            if (returnSalesLine && _salesLine.SalesType == SalesType::ReturnItem)
            {
                updatePricedisc = true;
                updatePriceDiscMode = PriceDiscUpdatePriceDisc::KeepManualSystem;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>