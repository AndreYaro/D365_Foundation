<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvReceiptsHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvReceiptsHelper
{
    #TrvUnreconciledExpense

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>detachUnreconciledReceipt</Name>
				<Source><![CDATA[
    [SubscribesTo(tablestr(TrvUnreconciledExpenseTransaction), delegatestr(TrvUnreconciledExpenseTransaction, detachUnreconciledReceipt))]
    public static void detachUnreconciledReceipt(RefRecId _docuRefRecId)
    {
        TrvReceiptsHelper::detachDocument(_docuRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>detachDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves receipts attached to expense report or line or unreconciled to unreconciled receipt container.
    /// If unreconciled receipt (receipt was attached to unreconciled receipt container), then delete it.
    /// </summary>
    /// <param name="_docuRefRecId">
    /// A reference to the document attachment.
    /// </param>
    /// <param name = "_skipExpenseLineUpdate">
    /// Skips updating expense line's ReceiptAttached field when set to true.
    /// </param>
    /// <remarks>
    /// A detached document is attached to first empty unreconciled expense record for a worker, specified
    /// as Creating worker on Expense report header.If no record in unreconciled expense table is found
    /// for this worker, a new empty record is created.
    /// </remarks>
    public static void detachDocument(RefRecId _docuRefRecId, boolean _skipExpenseLineUpdate = false)
    {
        DocuRef                             docuRef;
        TrvExpTrans                         trvExpTrans;
        TrvExpTable                         trvExpTable;
        TrvUnreconciledExpenseTransaction   trvUnreconciledExpense;
        TrvUnreconciledExpenseTransaction   unreconciledReceiptContainer;
        TrvHcmWorkerRecId                   workerRecId;
        boolean                             detachReceipts;

        docuRef = DocuRef::findRecId(_docuRefRecId, true);

        if (docuRef)
        {
            switch (docuRef.RefTableId)
            {
                case tablenum(TrvExpTable):
                    select firstonly CreatingWorker from trvExpTable where trvExpTable.RecId == docuRef.RefRecId;
                    workerRecId = trvExpTable.CreatingWorker;
                    detachReceipts = true;
                    break;

                case tablenum(TrvExpTrans):
                    select firstonly CreatingWorker from trvExpTrans where trvExpTrans.RecId == docuRef.RefRecId;
                    workerRecId = trvExpTrans.CreatingWorker;
                    break;

                case tablenum(TrvUnreconciledExpenseTransaction):
                    select firstonly Worker, IsEmpty from trvUnreconciledExpense where trvUnreconciledExpense.RecId == docuRef.RefRecId;
                    // If the receipt is unreconciled, then delete it.
                    if (trvUnreconciledExpense.IsEmpty)
                    {
                        ttsbegin;
                        docuRef.delete();
                        ttscommit;
                        return;
                    }
                    // Else, receipt is attached to an unreconciled expense.
                    workerRecId = trvUnreconciledExpense.Worker;
                    break;

                default:
                    ttsbegin;
                    docuRef.delete();
                    ttscommit;
                    return;
            }

            // Detached receipts become unreconciled receipts.
            if (workerRecId)
            {
                unreconciledReceiptContainer = TrvReceiptsHelper::getOrCreateUnreconciledReceiptContainer(workerRecId);

                ttsbegin;
                if (detachReceipts)
                {
                    DocuRef lineAttachments;

                    while select lineAttachments where lineAttachments.ValueRecId == docuRef.ValueRecId
                    {
                        TrvReceiptsHelper::detachReceiptFromLine(lineAttachments.RecId);
                    }
                }

                TrvReceiptsHelper::transferReceipt(_docuRefRecId, unreconciledReceiptContainer, _skipExpenseLineUpdate);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocuTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the document type ID for an expense report attachment.
    /// </summary>
    /// <returns>
    ///    The document type ID.
    /// </returns>
    public static DocuTypeId getDocuTypeId()
    {
        DocuType docuType;

        docuType = DocuType::findGroup(DocuTypeGroup::File);

        if (docuType.RecId == 0)
        {
            DocuType::createDefaults();
            docuType = DocuType::findGroup(DocuTypeGroup::File);
        }
        return docuType.TypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentAttachedToExpenseReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there are any receipts attached to the specified expense report.
    /// </summary>
    /// <param name="_trvExpTableRecId">
    /// The record ID of the expense report
    /// </param>
    /// <returns>
    /// true if the receipts are attached to the expense report; otherwise, false.
    /// </returns>
    public boolean isDocumentAttachedToExpenseReport(RecId _trvExpTableRecId)
    {
        DocuRef                docuRef;
        TrvExpTable            trvExpTable;

        select firstonly RecId from docuRef where
            docuRef.RefTableId   == tableNum(TrvExpTable) &&
            docuRef.RefRecId     == _trvExpTableRecId &&
            docuRef.RefCompanyId == trvExpTable.dataAreaId;

        //Verify if there is a document attached to the line
        if (!docuRef.RecId)
        {
            TrvExpTrans trvExpTrans;

            return (select firstonly ReceiptsAttached
                    from trvExpTrans
                    where trvExpTrans.TrvExpTable == _trvExpTableRecId).ReceiptsAttached;
        }

        return (docuRef.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDocumentsFromUnreconciledToExpense</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves attachments from the unreconciled expense transaction to an expense line.
    /// </summary>
    /// <param name="_unreconciledExpenseRecId">
    ///    The unreconciled expense transaction recid.
    /// </param>
    /// <param name="_expenseLineRecId">
    ///    The expense line recid.
    /// </param>
    public static void moveDocumentsFromUnreconciledToExpense(RecId _unreconciledExpenseRecId, RecId _expenseLineRecId)
    {
        DocuRef                             docuRef;
        // TrvExpTrans is used here because we want DocuRef.Transfer and DocuRef.insert use the same table id.
        // DocuRef.insert uses RootTableId.
        TrvExpTrans 		                trvExpTrans;

        if (_unreconciledExpenseRecId && _expenseLineRecId)
        {
            select firstonly RecId, TableId, DataAreaId from trvExpTrans
                    where trvExpTrans.RecId == _expenseLineRecId;

            while select RecId from docuRef
                where   docuRef.RefTableId == tableNum(TrvUnreconciledExpenseTransaction)
                    &&  docuRef.RefRecId == _unreconciledExpenseRecId
                    &&  docuRef.RefCompanyId == trvExpTrans.dataAreaId
            {
                ttsbegin;
                TrvReceiptsHelper::transferReceipt(docuRef.RecId, trvExpTrans);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDocumentsFromExpenseToUnreconciled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves attachments from the expense to the original unreconciled expense transaction.
    /// </summary>
    /// <param name="_expenseLineRecId">
    ///    The expense line recid.
    /// </param>
    /// <param name = "skipExpenseLineUpdate">
    ///     Skips updating expense line's ReceiptAttached field when set to true.
    /// </param>
    /// <remarks>
    ///    This operation is called on the deletion of an expense report line.
    /// </remarks>
    public static void moveDocumentsFromExpenseToUnreconciled(RecId _expenseLineRecId, boolean skipExpenseLineUpdate = false)
    {
        DocuRef                             docuRef;
        TrvUnreconciledExpenseTransaction   trvUnreconciledExpenseTransaction;
        // TrvExpTrans is used here because we want DocuRef.Transfer and DocuRef.insert use the same table id.
        // DocuRef.insert uses RootTableId.
        TrvExpTrans 		                trvExpTrans;

        select firstonly RecId, DataAreaId from trvExpTrans
                where trvExpTrans.RecId == _expenseLineRecId;

        select firstonly RecId, TableId, DataAreaId from trvUnreconciledExpenseTransaction
            where trvUnreconciledExpenseTransaction.ExpenseLine == _expenseLineRecId;

        if (trvUnreconciledExpenseTransaction.RecId && trvExpTrans.RecId)
        {
            ttsbegin;
            while select RecId from docuRef
                where   docuRef.RefTableId == tableNum(TrvExpTrans)
                    &&  docuRef.RefRecId == trvExpTrans.RecId
                    &&  docuRef.RefCompanyId == trvExpTrans.dataAreaId
            {
                TrvReceiptsHelper::transferReceipt(docuRef.RecId, trvUnreconciledExpenseTransaction, skipExpenseLineUpdate);
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAvailableReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether worker has unreconciled expense records with documents that are attached and
    ///     available to transfer to expense report.
    /// </summary>
    /// <param name="_hcmWorker">
    ///    The worker in which to check.
    /// </param>
    /// <returns>
    ///    <c>true</c> if there are unreconciled transactions; otherwise, false.
    /// </returns>
    public static boolean existAvailableReceipts(HcmWorker _hcmWorker)
    {
        return TrvUnreconciledExpenseTransaction::existUnreconciledReceiptsForWorker(_hcmWorker.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrCreateUnreconciledReceiptContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find or create a new unreconciled expense record to hold attachments.
    /// </summary>
    /// <param name="_worker">
    /// The record ID of the <c>HcmWorker</c> record of the worker.
    /// </param>
    /// <returns>
    /// A <c>TrvUnreconciledExpenseTransaction</c> record for the worker to hold unreconciled receipts.
    /// </returns>
    public static TrvUnreconciledExpenseTransaction getOrCreateUnreconciledReceiptContainer(TrvHcmWorkerRecId _worker)
    {
        TrvUnreconciledExpenseTransaction   unreconciledExpense;
        HcmWorker                           hcmWorker;

        select firstonly RecId from hcmWorker
            where hcmWorker.RecId == _worker
            outer join firstonly RecId, TableId, DataAreaId, IsEmpty from unreconciledExpense
                where unreconciledExpense.Worker        == hcmWorker.RecId
                    && unreconciledExpense.ExpenseLine  == 0
                    && unreconciledExpense.IsEmpty      == true;

        if (!unreconciledExpense.RecId)
        {
            // create a new unreconciled expense record to hold attachments
            ttsbegin;
            unreconciledExpense.clear();
            unreconciledExpense.Worker       = _worker;
            unreconciledExpense.TransDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            unreconciledExpense.insert();
            ttscommit;
        }

        return unreconciledExpense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReceiptsAttachedForExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the ReceiptsAttached field for the expense line. If there are any receipts linked through DocuRef, it will be set to true; otherwise, false.
    /// </summary>
    /// <param name = "expenseLineRecId">Expense line recid</param>
    public static void updateReceiptsAttachedForExpense(RecId expenseLineRecId)
    {
        DocuRef     docuRef;
        TrvExpTrans trvExpTrans;

        if (expenseLineRecId)
        {
            select firstonly forupdate trvExpTrans where trvExpTrans.RecId == expenseLineRecId;

            if (trvExpTrans)
            {
                select firstonly RecId from docuRef where docuRef.RefTableId == tablenum(TrvExpTrans) && docuRef.RefRecId == expenseLineRecId;

                ttsbegin;
                trvExpTrans.ReceiptsAttached = docuRef.RecId != 0;
                trvExpTrans.doUpdate();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReceiptsAttachedToTrue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the ReceiptsAttached field to true unconditionally.
    /// </summary>
    /// <param name = "expenseLineRecId">Expense line recid</param>
    public static void setReceiptsAttachedToTrue(RecId expenseLineRecId)
    {
        TrvExpTrans trvExpTrans;

        select firstonly forupdate trvExpTrans where trvExpTrans.RecId == expenseLineRecId;

        if (trvExpTrans && !trvExpTrans.ReceiptsAttached)
        {
            ttsbegin;
            trvExpTrans.ReceiptsAttached = true;
            trvExpTrans.doUpdate();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfer a list of receipts to a target record.
    /// </summary>
    /// <param name = "_receipts">List of receipts of type <c>DocuRef</c>.</param>
    /// <param name = "_to">Target record.</param>
    /// <param name = "skipExpenseLineUpdate">Skips updating expense line's ReceiptAttached field when set to true.</param>
    public static void transferReceipts(List _receipts, Common _to, boolean skipExpenseLineUpdate = false)
    {
        ListEnumerator  listEnumerator;
        DocuRef         receipt;

        if (_to.RecId)
        {
            // Convert expense or report entity to table for DocuRef to work with.
            if (_to.TableId == tablenum(TrvExpTrans))
            {
                _to = TrvExpTrans::find(_to.RecId);
            }
            else if (_to.TableId == tablenum(TrvExpTable))
            {
                _to = TrvExpTable::findRecId(_to.RecId);
            }
            
            listEnumerator = _receipts.getEnumerator();
            listEnumerator.reset();

            while (listEnumerator.moveNext())
            {
                receipt = listEnumerator.current();
                TrvReceiptsHelper::transferReceipt(receipt.RecId, _to, skipExpenseLineUpdate);

                // Tries to match receipts
                // if target record is an expense header record and receipt capture feature is enabled
                if (_to.TableId == tablenum(TrvExpTable) && 
                    FeatureStateProvider::isFeatureEnabled(TrvReceiptCaptureEnableFeature::instance()))
                {
                    TrvReceiptOcrHelper::matchExpenseFromReceipts(receipt.RecId);
                }

            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Wrapper over Docu::transfer() to take care of updating expense line's ReceiptAttached field. Handles policy evaluation if needed.
    /// </summary>
    /// <param name = "docuRefRecId">DocuRef recid that is being transferred.</param>
    /// <param name = "_to">Target record. This could be an expense or a header or an unreconciled expense.</param>
    /// <param name = "skipExpenseLineUpdate">Skips updating expense line's ReceiptAttached field when set to true.</param>
    public static void transferReceipt(RecId docuRefRecId, Common _to, boolean skipExpenseLineUpdate = false)
    {
        DocuRef             docuRef;

        docuRef = DocuRef::findRecId(docuRefRecId);

        if (!TrvReceiptsHelper::isReceiptAttached(docuRef.ValueRecId, _to.RecId, _to.TableId))
        {
            Docu::transfer(docuRefRecId, _to);

            if (!skipExpenseLineUpdate)
            {
                // If being transferred to expense, update the "ReceiptsAttached" field to true.
                if (_to.TableId == tablenum(TrvExpTrans))
                {
                    TrvReceiptsHelper::setReceiptsAttachedToTrue(_to.RecId);
                    TrvReceiptsHelper::evaluatePoliciesForExpense(_to.RecId);
                }
                
                // If being transferred from expense, update the "ReceiptsAttached" field. It will be set to false if we are moving the last receipt.
                if (docuRef.RefTableId == tablenum(TrvExpTrans))
                {
                    TrvReceiptsHelper::updateReceiptsAttachedForExpense(docuRef.RefRecId);
                    TrvReceiptsHelper::evaluatePoliciesForExpense(docuRef.RefRecId);
                }
            
                // If transferred to or from expense header, policies may need to be re-evaluated.
                if (_to.TableId == tablenum(TrvExpTable))
                {
                    TrvReceiptsHelper::evaluatePoliciesForHeader(_to.RecId);
                }
                else if (docuRef.RefTableId == tablenum(TrvExpTable))
                {
                    TrvReceiptsHelper::evaluatePoliciesForHeader(docuRef.RefRecId);
                }
            }
        }
        else
        {
            // Already exists on the target record, simply remove from the existing record.
            docuRef.selectForUpdate(true);
            ttsbegin;
            docuRef.delete();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Wrapper over Docu::createFromDocuRef() to take care of updating expense line's ReceiptAttached field. Handles policy evaluation if needed.
    /// </summary>
    /// <param name = "_docuRef"><c>DocuRef</c> that is being copied.</param>
    /// <param name = "_to">Target record. This could be an expense or a header or an unreconciled expense.</param>
    /// <param name = "_skipExpenseLineUpdate">Skips updating expense line's ReceiptAttached field when set to true.</param>
    public static void copyReceipts(DocuRef _docuRef, Common _to, boolean _skipExpenseLineUpdate = false)
    {
        DocuRef copiedDocuRef = DocuRef::createFromDocuRef(_docuRef, _to.RecId, _to.TableId);

        if (!_skipExpenseLineUpdate)
        {
            // If being transferred to expense, update the "ReceiptsAttached" field to true.
            if (_to.TableId == tablenum(TrvExpTrans) && copiedDocuRef)
            {
                TrvReceiptsHelper::setReceiptsAttachedToTrue(_to.RecId);
                TrvReceiptsHelper::evaluatePoliciesForExpense(_to.RecId);
            }
                
            // If transferred to or from expense header, policies may need to be re-evaluated.
            if (_to.TableId == tablenum(TrvExpTable) && copiedDocuRef)
            {
                TrvReceiptsHelper::evaluatePoliciesForHeader(_to.RecId);
            }
            else if (_docuRef.RefTableId == tablenum(TrvExpTable))
            {
                TrvReceiptsHelper::evaluatePoliciesForHeader(_docuRef.RefRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleReceiptOnReceiptRemove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method handles multiple scenarios where docuRef record gets affected. 
    /// </summary>
    /// <param name = "trvExpTrans">Parameter to hold expense line record for unattaching receipt.</param>
    /// <param name = "docuRefRecId">Parameter to hold receipt record.</param>
    /// <param name = "removeExpense">Parameter to hold whether expense is getting removed.</param>
    public static void handleReceiptOnReceiptRemove(TrvExpTrans trvExpTrans, RecId docuRefRecId, boolean removeExpense = false)
    { 
        if (trvExpTrans.ExpNumber == '')
        {
            TrvReceiptsHelper::detachDocument(docuRefRecId, true);
            return;
        }
        
        DocuRef docuRef = DocuRef::findRecId(docuRefRecId, true);
        RecId trvExpTableRecId =  TrvExpTable::find(trvExpTrans.ExpNumber).RecId;
        if (TrvReceiptsHelper::isReceiptAttachedToMultipleLines(docuRef.ValueRecId, trvExpTableRecId))
        {
           
            TrvReceiptsHelper::detachReceiptFromLine(docuRefRecId);
            return;
        }

        DocuRef docuRefHeaderRecord;

        select firstonly docuRefHeaderRecord where
            docuRefHeaderRecord.RefRecId == trvExpTableRecId
            && docuRefHeaderRecord.ValueRecId == docuRef.ValueRecId;

        if (docuRefHeaderRecord.RecId != 0)
        {
            TrvReceiptsHelper::detachDocument(docuRefHeaderRecord.RecId, true);
        }
        else
        {
            TrvReceiptsHelper::detachDocument(docuRefRecId, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleReceiptOnExpenseRemove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method handles receipts on expense line remove/delete. 
    /// </summary>
    /// <param name = "expNumber">Expense report number for expense line</param>
    /// <param name = "docuRef">Receipt record.</param>
    public static void handleReceiptOnExpenseRemove(TrvExpNumber expNumber, DocuRef docuRef)
    {
        if (expNumber == '')
        {
            TrvReceiptsHelper::detachDocument(docuRef.RecId);
            return;
        }

        RecId trvExpTableRecId =  TrvExpTable::find(expNumber).RecId;

        if (!TrvReceiptsHelper::isReceiptAttachedToMultipleLines(docuRef.ValueRecId, trvExpTableRecId))
        {
            DocuRef docuRefHeaderRecord;

            select firstonly docuRefHeaderRecord where
            docuRefHeaderRecord.RefRecId == trvExpTableRecId
            && docuRefHeaderRecord.ValueRecId == docuRef.ValueRecId;
            
            docuRefHeaderRecord.selectForUpdate(true);

            ttsbegin;
            docuRefHeaderRecord.delete();
            ttscommit;
        }
        else 
        {
            TrvReceiptsHelper::detachReceiptFromLine(docuRef.RecId, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveReceiptsForExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves, duplicates, or removes header level receipts when a expense is moved from one header to another.
    /// </summary>
    /// <param name = "originalExpReportRecId">RecId of the expense header the expense is moving from.</param>
    /// <param name = "newExpReportRecId">RecId of the expense header the expense is moving to.</param>
    /// <param name = "expLineRecId">RecId of the expense that is moving headers.</param>
    public static void moveReceiptsForExpense(RecId originalExpReportRecId, RecId newExpReportRecId, RecId expLineRecId)
    {
        DocuRef docuRef;

        while select ValueRecId, RecId from docuRef where docuRef.RefRecId == expLineRecId
                && docuRef.RefTableId == tableNum(TrvExpTrans)
        {
            if (originalExpReportRecId)
            {
                boolean receiptAttachedToMultipleLines = TrvReceiptsHelper::isReceiptAttachedToMultipleLines(docuRef.ValueRecId, originalExpReportRecId);
                DocuRef headerDocuRef;

                select firstonly forupdate RecId from headerDocuRef where headerDocuRef.RefRecId == originalExpReportRecId
                    && headerDocuRef.RefTableId == tableNum(TrvExpTable)
                    && headerDocuRef.ValueRecId == docuRef.ValueRecId;

                if (newExpReportRecId)
                {
                    if (receiptAttachedToMultipleLines)
                    {
                        TrvReceiptsHelper::attachReceiptToHeader(docuRef.RecId, newExpReportRecId);
                    }
                    else
                    {
                        TrvReceiptsHelper::transferReceipt(headerDocuRef.RecId, TrvExpTable::findRecId(newExpReportRecId));
                    }
                }
                else
                {
                    if (!receiptAttachedToMultipleLines)
                    {
                        ttsbegin;
                        headerDocuRef.delete();
                        ttscommit;
                    }
                }
            }
            else if (newExpReportRecId)
            {
                TrvReceiptsHelper::attachReceiptToHeader(docuRef.RecId, newExpReportRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceiptAttachedToMultipleLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified receipt is attached to multiple lines in the same header.
    /// </summary>
    /// <param name = "docuValueRecId">RecId of the DocuValue that represents the receipt.</param>
    /// <param name = "trvExpTableRecId">RecId of the expense header to check.</param>
    /// <returns>True if the receipt is attached to multiple lines, otherwise false.</returns>
    private static boolean isReceiptAttachedToMultipleLines(RecId docuValueRecId, RecId trvExpTableRecId)
    {
        DocuRef docuRef;
        TrvExpTrans trvExpTrans;

        select count(RecId) from docuRef join trvexpTrans
            where docuRef.RefRecId == trvExpTrans.RecId
            && docuRef.RefTableId == tableNum(TrvExpTrans)
            && docuRef.ValueRecId == docuValueRecId
            && trvExpTrans.trvExpTable == trvExpTableRecId;

        return docuRef.RecId > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachReceiptToHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attaches receipt to an expense header.
    /// </summary>
    /// <param name = "docuRefRecId">The recId of the existing receipt attachement.</param>
    /// <param name = "trvExpTable">The recId of the header to attach the receipt to.</param>
    public static void attachReceiptToHeader(RecId docuRefRecId, RecId trvExpTableRecId)
    {
        DocuRef docuRef = DocuRef::findRecId(docuRefRecId);

        if (!TrvReceiptsHelper::isReceiptAttached(docuRef.ValueRecId, trvExpTableRecId, tableNum(TrvExpTable)))
        {
            DocuRef::createFromDocuRef(docuRef, trvExpTableRecId, tableNum(TrvExpTable));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachReceiptToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attaches receipts to an expense line.
    /// </summary>
    /// <param name = "docuRefRecId">The recId of the existing receipt attachement.</param>
    /// <param name = "_trvExpTrans">Expense line to attach the receipt to.</param>
    /// <param name = "skipExpenseLineUpdate">Skips updating expense line's ReceiptAttached field when set to true.</param>
    /// <param name = "_skipPolicyEvaluation">Skips policy evaluation for the expense line when set to true.</param>
    public static void attachReceiptToLine(RecId docuRefRecId, TrvExpTrans _trvExpTrans, boolean skipExpenseLineUpdate = false, boolean _skipPolicyEvaluation = false)
    {
        DocuRef docuRef = DocuRef::findRecId(docuRefRecId);
        
        if (_trvExpTrans.RecId != 0 && docuRef.RefRecId == TrvExpTable::find(_trvExpTrans.ExpNumber).RecId
            && !TrvReceiptsHelper::isReceiptAttached(docuRef.ValueRecId, _trvExpTrans.RecId, _trvExpTrans.TableId))
        {
            DocuRef::createFromDocuRef(docuRef, _trvExpTrans.RecId, tableNum(TrvExpTrans));

            if (!skipExpenseLineUpdate)
            {
                TrvReceiptsHelper::setReceiptsAttachedToTrue(_trvExpTrans.RecId);
                if (!_skipPolicyEvaluation)
                {
                    TrvReceiptsHelper::evaluatePoliciesForExpense(_trvExpTrans.RecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceiptAttached</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a receipts is already attached to a record.
    /// </summary>
    /// <param name = "_receiptRecId">RecId of the DocuValue.</param>
    /// <param name = "_trvExpTransRecId">RecId of the record.</param>
    /// <param name = "_tableId">TableId of the record.</param>
    /// <returns>True if the receipts is already attached to the expense line, otherwise false.</returns>
    public static boolean isReceiptAttached(RecId _receiptRecId, RecId _attachToRecId, TableId _tableId = tableNum(TrvExpTrans))
    {
        DocuRef docuRef;

        select firstonly RecId from docuRef where docuRef.ValueRecId == _receiptRecId && docuRef.RefRecId == _attachToRecId && DocuRef.RefTableId == _tableId;

        return docuRef.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>detachReceiptFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detatches a receipt from an expense line.  If no other expense lines reference that receipt,
    /// the receipt will be detached from the header as well.
    /// </summary>
    /// <param name = "docuRefRecId">The document to detatch.</param>
    /// <param name = "_trvExpTrans">The expense line to detatch from.</param>
    /// <param name = "skipExpenseLineUpdate">Skips updating expense line's ReceiptAttached field when set to true.</param>
    public static boolean detachReceiptFromLine(RecId docuRefRecId, boolean skipExpenseLineUpdate = false)
    {
        DocuRef docuRef = DocuRef::findRecId(docuRefRecId, true);

        if (docuRef.RefTableId != tableNum(TrvExpTrans))
        {
            return false;
        }

        ttsbegin;
        docuRef.delete();
        ttscommit;

        if (!skipExpenseLineUpdate)
        {
            TrvReceiptsHelper::updateReceiptsAttachedForExpense(docuRef.RefRecId);
            TrvReceiptsHelper::evaluatePoliciesForExpense(docuRef.RefRecId);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluatePoliciesForExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluate expense and project policies when receipts are attached/detached.
    /// This will evaluate only if general parameters is setup to evaluate policies on line save.
    /// </summary>
    /// <param name = "_expenseLineRecId">The RecId of expense.</param>
    public static void evaluatePoliciesForExpense(RecId _expenseLineRecId)
    {
        TrvParameters   trvParameters = TrvParameters::find();
        TrvExpTrans     trvExpTrans;

        ttsbegin;
        if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
        {
            TrvPolicyEvalEngine::evaluateViolationsForLine(_expenseLineRecId, SysPolicyTypeEnum::TrvExpensePolicy);
            trvExpTrans = TrvExpTrans::find(_expenseLineRecId);

            // If there are any report or day violations, skip updating the receipt violation.
            // It will be taken care of during submit.
            if (!trvExpTrans.anyDayOrReportProjectPolicyViolations())
            {
                trvExpTrans.evaluateProjectPoliciesAndSave();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluatePoliciesForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluate expense header policies when receipts are attached/detached.
    /// This will evaluate only if general parameters is setup to evaluate policies on line save.
    /// </summary>
    /// <param name = "_expenseLineRecId">The RecId of expense header.</param>
    public static void evaluatePoliciesForHeader(RecId _headerRecId)
    {
        TrvParameters   trvParameters = TrvParameters::find();

        if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
        {
            TrvPolicyEvalEngine::evaluateViolationsForHdr(_headerRecId, SysPolicyTypeEnum::TrvExpensePolicy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isImageFileType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a document is an image or not.
    /// </summary>
    /// <param name = "_docuValue"></param>
    /// <returns>True if the <c>DocuValue</c> record is an image, false otherwise.</returns>
    public static boolean isImageFileType(str _filetype)
    {
        switch (_filetype)
        {
            case "gif":
            case "jpeg":
            case "jpg":
            case "pjpeg":
            case "png":
            case "bmp":
            case "svg+xml":
            case "tiff":
            case "vnd.djvu":
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayReceiptInBrowser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Redirects the user to view the full size receipt opened by the browser.
    /// </summary>
    /// <param name = "_docuValue">A record from <c>DocuValue</c> whose file will be opened by the browser.</param>
    public static void displayReceiptInBrowser(DocuValue _docuValue)
    {
        str displayUrl;
        Browser br = new Browser();
        
        displayUrl = DocumentManagement::getAttachmentPublicUrl(DocuRef::findValue(_docuValue.RecId));
        br.navigate(displayUrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>importReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Imports a receipt to the system.
    /// </summary>
    /// <param name = "_refTableId">The reference <c>TableId</c> for the receipt.</param>
    /// <param name = "_refRecId">The reference <c>RecId</c> for the receipt.</param>
    /// <param name = "_refDataAreaId">The reference <c>DataAreaId</c> for the receipt.</param>
    /// <param name = "_receiptFile">The <c>FileUploadTemporaryStorageResult</c> corresponding to the file to import.</param>
    /// <param name = "_notes">Optional notes to store for the file created.</param>
    /// <param name = "_notes">Optional alternative file name to use instead of the one used when uploading.</param>
    /// <returns>The <c>DocuRef</c> record created when the receipt is imported.</returns>
    public static DocuRef importReceipt(TableId _refTableId, RefRecId _refRecId, DataAreaId _refDataAreaId,
                                        FileUploadTemporaryStorageResult _receiptFile, str _notes = "", str _fileName = _receiptFile.getFileName())
    {
        DocuRef docuRef;
        DocuTypeId docuTypeId;

        if (_refTableId != 0 && _refRecId != 0 && _refDataAreaId != null && _receiptFile != null)
        {
            using (System.IO.Stream attachmentStream = _receiptFile.openResult())
            {
                // Get file extension and file type.
                str fileExtension = Docu::GetFileExtension(_fileName);

                docuTypeId = TrvReceiptsHelper::isImageFileType(fileExtension) ? DocuType::typeImage() : DocuType::typeFile();

                docuRef = DocumentManagement::attachFile(_refTableId, _refRecId, _refDataAreaId, docuTypeId, attachmentStream,
                                                         _fileName, _receiptFile.getFileContentType(), _fileName, _notes);
            }

            // Delete file in temporary blob to save space.
            _receiptFile.deleteResult();
        }
        else
        {
            throw error(error::missingParameter(null));
        }
        
        return docuRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyOverReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Copy the receipts from the second expense record to the first expense record
    ///     when receipts do not exist on the original expense.
    /// </summary>
    /// <param name="_destinationExpense">
    ///     The expense to copy the receipts to.
    /// </param>
    /// <param name="_sourceExpense">
    ///     The expense to copy the receipts from.
    /// </param>
    public static void copyOverReceipts(TrvExpTrans _destinationExpense, TrvExpTrans _sourceExpense)
    {
        if (!_destinationExpense.ReceiptsAttached && _sourceExpense.ReceiptsAttached)
        {
            DocuRef docuRef;
            while select RecId from docuRef where docuRef.RefRecId == _sourceExpense.RecId && docuRef.RefTableId == tableNum(TrvExpTrans)
            {
                TrvReceiptsHelper::transferReceipt(docuRef.RecId, _destinationExpense);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Duplicate the receipts from the second expense record to the first expense record
    ///     when receipts do not exist on the original expense.
    /// </summary>
    /// <param name="_destinationExpense">
    ///     The expense to duplicate the receipts to.
    /// </param>
    /// <param name="_sourceExpense">
    ///     The expense to duplicate the receipts from.
    /// </param>
    public static void duplicateReceipts(TrvExpTrans _destinationExpense, TrvExpTrans _sourceExpense)
    {
        if (_sourceExpense.ReceiptsAttached)
        {
            DocuRef docuRef;
            while select docuRef where docuRef.RefRecId == _sourceExpense.RecId && docuRef.RefTableId == tableNum(TrvExpTrans)
            {
                TrvReceiptsHelper::copyReceipts(docuRef, _destinationExpense);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchHeaderReceiptDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the Expense report receipt dialog for managing receipts associated with the header.
    /// </summary>
    /// <param name = "_expenseReport">The expense report to which the receipts are associated.</param>
    /// <param name = "_docuRefDS">The document datasource from the calling form.</param>
    /// <param name = "_editable">True if the expense report is in a state that allows editing of receipts.</param>
    /// <param name = "_callerObject">The caller which can be used to call various functions/methods of calling object.</param>
    [SysObsolete("This method has been made obsolete, please use TrvReceiptsHelper::OpenHeaderReceiptDialog instead.", false, 08\07\2020)]
    public static void launchHeaderReceiptDialog(TrvExpTable _expenseReport, FormDataSource _docuRefDS, boolean _editable)
    {
        Args args = new Args();

        args.openMode(_editable ? OpenMode::Edit : OpenMode::View);
        args.record(_expenseReport);
        args.parmObject(_docuRefDS);

        // The core code will call both methods and this will no longer open the dialog to add receipts.
        // new MenuFunction(MenuItemDisplayStr(TrvExpenseReportReceiptDialog), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openHeaderReceiptDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the Expense report receipt dialog for managing receipts associated with the header.
    /// </summary>
    /// <param name = "_expenseReport">The expense report to which the receipts are associated.</param>
    /// <param name = "_docuRefDS">The document datasource from the calling form.</param>
    /// <param name = "_editable">True if the expense report is in a state that allows editing of receipts.</param>
    /// <param name = "_callerObject">The caller which can be used to call various functions/methods of calling object.</param>
    public static void openHeaderReceiptDialog(TrvExpTable _expenseReport, FormDataSource _docuRefDS, boolean _editable, Object _callerObject = null)
    {
        Args args = new Args();

        args.openMode(_editable ? OpenMode::Edit : OpenMode::View);
        args.record(_expenseReport);
        args.parmObject(_docuRefDS);
        args.caller(_callerObject);

        new MenuFunction(MenuItemDisplayStr(TrvExpenseReportReceiptDialog), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>