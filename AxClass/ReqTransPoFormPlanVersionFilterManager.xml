<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransPoFormPlanVersionFilterManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class ReqTransPoFormPlanVersionFilterManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updatePlanVersionQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update plan recid ranges to a new value in saved queries.
    /// </summary>
    /// <param name = "_query">A saved query.</param>
    /// <param name = "_activePlanVersionRecId">RecId of the current active plan version.</param>
    public static void updatePlanVersionQueryRanges(Query _query, RefRecId _activePlanVersionRecId)
    {
        for (int i = 1; i <= _query.dataSourceCount(); i++)
        {
            QueryBuildDataSource qbds = _query.dataSourceNo(i);
            QueryBuildRange qbr  = ReqTransPoFormPlanVersionFilterManager::findExistingPlanVersionRange(qbds);
            if (qbr)
            {
                qbr.value(queryValue(_activePlanVersionRecId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExistingPlanVersionRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the plan version range.
    /// </summary>
    /// <param name = "_qbds">Query build data source.</param>
    /// <returns>The found query build range.</returns>
    private static QueryBuildRange findExistingPlanVersionRange(QueryBuildDataSource _qbds)
    {
        QueryBuildRange qbr;
        switch (_qbds.table())
        {
            case tableNum(ReqPo):
                qbr = ReqTransPoFormPlanVersionFilterManager::findEnabledRange(_qbds, fieldNum(ReqPO, PlanVersion));
                break;
            case tableNum(ReqTrans):
                qbr = ReqTransPoFormPlanVersionFilterManager::findEnabledRange(_qbds, fieldNum(ReqTrans, PlanVersion));
                break;
            case tableNum(ReqPlanVersion):
                qbr = ReqTransPoFormPlanVersionFilterManager::findEnabledRange(_qbds, fieldNum(ReqPlanVersion, RecId));
                break;
        }
        return qbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEnabledRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a enabled range for specific field.
    /// </summary>
    /// <param name = "_qbds">Query build data source.</param>
    /// <param name = "_fieldId">A field number for the range.</param>
    /// <param name = "_create">Indicates whether a range should be created if not found.</param>
    /// <returns>The found range.</returns>
    public static QueryBuildRange findEnabledRange(QueryBuildDataSource _qbds, FieldId _fieldId, boolean _create = false)
    {
        QueryBuildRange range; 

        for (int i = 1; i <= _qbds.rangeCount(); i++)
        {
            QueryBuildRange foundRange = _qbds.findRange(_fieldId, i);

            if (foundRange && foundRange.enabled())
            {
                range = foundRange;
                break;
            }
        }

        if (!range && _create)
        {
            range = SysQuery::findOrCreateRange(_qbds, _fieldId);
        }

        return range;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>