<?xml version="1.0" encoding="utf-8"?>

<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>PayrollTaxCodeLookup</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// The <c>PayrollTaxCodeLookup</c> class manages the lookup validation and querying for
/// fields that are foreign keys to the <c>PayrollTaxCode</c> table.
/// </summary>
class PayrollTaxCodeLookup
{
    Query query;
    LogisticsAddressCountryRegionId countryRegionId;
    boolean filterByIsEmployerTax;
    NoYes isEmployerTax;
    boolean requireVendor;
    NoYes isPayStatementLocked;
    boolean filterByIsPayStatementLocked;
    boolean isPayStatementPaymentTypeManual;
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>lookupTaxCode</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Opens the tax code lookup with an applied filter to restrict the lookup to the specified subset of
    ///    tax codes.
    /// </summary>
    /// <param name="_formControl">
    ///    The form control that is opening the tax code lookup.
    /// </param>
    /// <returns>
    ///    A <c>PayrollTaxCode</c> record buffer that references the selected record.
    /// </returns>
    public PayrollTaxCode lookupTaxCode(FormControl _formControl)
    {
        PayrollTaxCode          selectedRecord;
        Args                    args;
        FormRun                 formRun;
        Form                    benefitPlanLookupForm = new Form(formStr(PayrollTaxCodeLookup));
        FormReferenceControl    referenceControl    = _formControl as FormReferenceControl;
        FormStringControl       stringControl       = _formControl as FormStringControl;

        args = new Args();
        args.name(formStr(PayrollTaxCodeLookup));
        args.caller(_formControl);
        args.parmObject(this);

        // position the lookup to highlight the current record
        // use different approaches to find the record depending on
        // what value the calling control contains
        if (referenceControl)
        {
            // a reference control supposed to contain a key RecId value
            selectedRecord = PayrollTaxCode::find(referenceControl.value());
        }
        else if (stringControl)
        {
            // a string control supposed to contain a tax code id value
            selectedRecord = PayrollTaxCode::findByCodeCountryRegion(stringControl.text(), countryRegionId);
        }

        if (selectedRecord.RecId != 0)
        {
            args.lookupRecord(selectedRecord);
        }

        query = this.updateQuery();

        // perform form lookup on the caller form control
        if (referenceControl)
        {
            formRun = FormAutoLookupFactory::buildReferenceLookupFromCustomForm(referenceControl, benefitPlanLookupForm, args);
            referenceControl.performFormLookup(formRun);
        }
        else if (stringControl)
        {
            formRun = FormAutoLookupFactory::buildLookupFromCustomForm(stringControl, benefitPlanLookupForm, AbsoluteFieldBinding::construct(fieldStr(PayrollTaxCode, Code), tableStr(PayrollTaxCode)), args);
            stringControl.performFormLookup(formRun);
        }

        selectedRecord = formRun.selectRecordModeSelectedRecord();

        return selectedRecord;
    }

]]></Source>
      </Method>
      <Method>
        <Name>new</Name>
        <Source><![CDATA[
    protected void new()
    {
        query = new Query(queryStr(PayrollTaxCodeLookup));
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmCountryRegionId</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Gets or sets the country region id value to filter tax codes.
    /// </summary>
    /// <param name="_countryRegionId">
    ///    The value to set.
    /// </param>
    /// <returns>
    /// The country region id to filter tax codes on.
    /// </returns>
    public LogisticsAddressCountryRegionId parmCountryRegionId(LogisticsAddressCountryRegionId _countryRegionId = countryRegionId)
    {
        countryRegionId = _countryRegionId;

        return countryRegionId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmFilterByIsEmployerTax</Name>
        <Source><![CDATA[
    public boolean parmFilterByIsEmployerTax(boolean _filterByIsEmployerTax = filterByIsEmployerTax)
    {
        filterByIsEmployerTax = _filterByIsEmployerTax;

        return filterByIsEmployerTax;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmFilterByIsPayStatementLocked</Name>
        <Source><![CDATA[
    public boolean parmFilterByIsPayStatementLocked(boolean _filterByIsPayStatementLocked = filterByIsPayStatementLocked)
    {
        filterByIsPayStatementLocked = _filterByIsPayStatementLocked;

        return filterByIsPayStatementLocked;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmIsEmployerTax</Name>
        <Source><![CDATA[
    public NoYes parmIsEmployerTax(NoYes _isEmployerTax = isEmployerTax)
    {
        isEmployerTax = _isEmployerTax;

        return isEmployerTax;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmIsPaymentTypeManual</Name>
        <Source><![CDATA[
    public boolean parmIsPaymentTypeManual(boolean _isPayStatementPaymentTypeManual = isPayStatementPaymentTypeManual)
    {
        isPayStatementPaymentTypeManual = _isPayStatementPaymentTypeManual;

        return isPayStatementPaymentTypeManual;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmisPayStatementLocked</Name>
        <Source><![CDATA[
    public NoYes parmisPayStatementLocked(NoYes _isPayStatementLocked = isPayStatementLocked)
    {
        isPayStatementLocked = _isPayStatementLocked;

        return isPayStatementLocked;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmRequireVendor</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Gets or sets whether to include only tax codes with a vendor account.
    /// </summary>
    /// <param name="_requireVendor">
    ///    The value to set.
    /// </param>
    /// <returns>
    /// true if only tax codes with a vendor account are filtered in the lookup; otherwise, false.
    /// </returns>
    public boolean parmRequireVendor(boolean _requireVendor = requireVendor)
    {
        requireVendor = _requireVendor;

        return requireVendor;
    }

]]></Source>
      </Method>
      <Method>
        <Name>updateQuery</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Modifies the ranges of the query to match the selected parameters in the <c>PayrollTaxCodeLookup</c>
    ///    object.
    /// </summary>
    /// <param name="_taxCodeRecId">
    ///    The record ID of the selected <c>PayrollTaxCode</c> record.
    /// </param>
    /// <returns>
    ///    The updated query.
    /// </returns>
    /// <remarks>
    ///    The <c>PayrollTaxCodeLookup</c> form uses this method to adjust the query as the user makes changes to
    ///    the filter options. If an <c>PayrollTaxCodeRecId</c> value is specified, this method is used to verify
    ///    that the tax code selected is valid under the filter parameters of the <c>PayrollTaxCodeLookup</c>
    ///    form.
    /// </remarks>
    public Query updateQuery(PayrollTaxCodeRecId _taxCodeRecId = 0)
    {
        QueryBuildRange         taxCodeRange;
        QueryBuildRange         legalEntityRange;
        QueryBuildRange         vendorRange;
        QueryBuildRange         isEmployerTaxRange;
        QueryBuildRange         isPayStatementLockedRange;
        QueryBuildRange         countryRegionIdRange;
        QueryBuildDataSource    qbdsTaxCode;
        QueryBuildDataSource    qbdsTaxCodeDefaultDimension;

        qbdsTaxCode = query.dataSourceTable(tableNum(PayrollTaxCode));
        taxCodeRange = qbdsTaxCode.findRange(fieldNum(PayrollTaxCode, RecId));
        countryRegionIdRange = qbdsTaxCode.findRange(fieldNum(PayrollTaxCode, CountryRegionId));

        if (_taxCodeRecId != 0)
        {
            // Filter the PayrollTaxCode table on the passed tax code RecId
            taxCodeRange.value(queryValue(_taxCodeRecId));
        }
        else
        {
            // Include all tax codes
            taxCodeRange.value(SysQuery::valueUnlimited());
        }

        if (requireVendor)
        {
            qbdsTaxCodeDefaultDimension = SysQuery::findOrCreateDataSource(query, tableNum(PayrollTaxCodeDefaultDimension), tableNum(PayrollTaxCode));
            qbdsTaxCodeDefaultDimension.joinMode(JoinMode::ExistsJoin);
            qbdsTaxCodeDefaultDimension.relations(true);

            legalEntityRange = SysQuery::findOrCreateRange(qbdsTaxCodeDefaultDimension, fieldNum(PayrollTaxCodeDefaultDimension, LegalEntity));
            legalEntityRange.value(queryValue(CompanyInfo::current()));

            vendorRange = SysQuery::findOrCreateRange(qbdsTaxCodeDefaultDimension, fieldNum(PayrollTaxCodeDefaultDimension, VendAccountNum));
            vendorRange.value(SysQuery::valueNotEmptyString());
        }

        if (filterByIsEmployerTax)
        {
            isEmployerTaxRange = SysQuery::findOrCreateRange(qbdsTaxCode, fieldNum(PayrollTaxCode, IsEmployerTax));
            isEmployerTaxRange.value(queryValue(isEmployerTax));
        }

        if (!isPayStatementPaymentTypeManual && filterByIsPayStatementLocked)
        {
            // if pay statement's payment type is manual, then lookup query should not have query range on isPayStatementLineLocked field
            isPayStatementLockedRange = SysQuery::findOrCreateRange(qbdsTaxCode, fieldNum(PayrollTaxCode, IsPayStatementLineLocked));
            isPayStatementLockedRange.value(queryValue(isPayStatementLocked));
        }

        if (countryRegionId)
        {
            countryRegionIdRange.value(countryRegionId);
        }
        else
        {
            countryRegionIdRange.value(SysQuery::valueUnlimited());
        }

        return query;
    }

]]></Source>
      </Method>
      <Method>
        <Name>validateTaxCode</Name>
        <Source><![CDATA[
    /// <summary>
    ///     Determines whether a given <c>PayrollTaxCodeRecId</c> is valid
    ///     under the filter restrictions of the lookup object.
    /// </summary>
    /// <param name="_taxCodeRecId">
    ///     The record id of the <c>PayrollTaxCode</c> to validate.
    /// </param>
    /// <returns>
    ///     true if the tax code is valid under the filter restrictions; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     This method is used in the <c>ResolveReference</c> method
    ///     override to ensure the record is valid.
    /// </remarks>
    public boolean validateTaxCode(PayrollTaxCodeRecId _taxCodeRecId)
    {
        PayrollTaxCode          taxCode;
        QueryRun                queryRun;
        boolean                 ret = true;

        taxCode = PayrollTaxCode::find(_taxCodeRecId);

        if (taxCode.RecId == 0)
        {
            // Tax code could not be found
            ret = false;
        }

        query = this.updateQuery(_taxCodeRecId);
        queryRun = new QueryRun(query);

        if (queryRun.next() == false)
        {
            // Tax code did not match filter criteria
            ret = false;
        }

        return ret;
    }

]]></Source>
      </Method>
      <Method>
        <Name>construct</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>PayrollTaxCodeLookup</c> class.
    /// </summary>
    /// <returns>
    ///    The new instance of the <c>PayrollTaxCodeLookup</c> class.
    /// </returns>
    public static PayrollTaxCodeLookup construct()
    {
        PayrollTaxCodeLookup hcmTaxCodeLookup = new PayrollTaxCodeLookup();
        return hcmTaxCodeLookup;
    }

]]></Source>
      </Method>
      <Method>
        <Name>newAllTaxCodes</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>PayrollTaxCodeLookup</c> class that has no filters applied.
    /// </summary>
    /// <returns>
    ///    The new instance of the <c>PayrollTaxCodeLookup</c> class.
    /// </returns>
    public static PayrollTaxCodeLookup newAllTaxCodes()
    {
        PayrollTaxCodeLookup taxCodeLookup = PayrollTaxCodeLookup::construct();

        taxCodeLookup.parmCountryRegionId('');
        taxCodeLookup.parmFilterByIsEmployerTax(false);
        taxCodeLookup.parmRequireVendor(false);

        return taxCodeLookup;
    }

]]></Source>
      </Method>
      <Method>
        <Name>newByPayStatementLocked</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>PayrollTaxCodeLookup</c> class for filtering the lookup by using the
    ///    passed parameters.
    /// </summary>
    /// <param name="_filterByIsPayStatementLocked">
    ///    Whether or not to filter tax codes by the pay statement line locked value.
    /// </param>
    /// <param name="_isPayStatementLocked">
    ///    The is pay statement locked value to fitler tax codes on.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>PayrollTaxCodeLookup</c> class.
    /// </returns>
    public static PayrollTaxCodeLookup newByPayStatementLocked(
        boolean _filterByIsPayStatementLocked = true,
        NoYes   _isPayStatementLocked = NoYes::No)
    {
        PayrollTaxCodeLookup taxCodeLookup = PayrollTaxCodeLookup::construct();

        taxCodeLookup.parmFilterByIsPayStatementLocked(_filterByIsPayStatementLocked);
        taxCodeLookup.parmisPayStatementLocked(_isPayStatementLocked);

        return taxCodeLookup;
    }

]]></Source>
      </Method>
      <Method>
        <Name>newCustomOptions</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>PayrollTaxCodeLookup</c> class for filtering the lookup by using the
    ///    passed parameters.
    /// </summary>
    /// <param name="_countryRegionId">
    ///    The country region id to filter tax codes on.
    /// </param>
    /// <param name="_filterByIsEmployerTax">
    ///    Whether or not to filter tax codes by the is employer tax value.
    /// </param>
    /// <param name="_isEmployerTax">
    ///    The is employer tax value to fitler tax codes on.
    /// </param>
    /// <param name="_requireVendor">
    ///    Whether or not to include only tax codes with a vendor account.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>PayrollTaxCodeLookup</c> class.
    /// </returns>
    public static PayrollTaxCodeLookup newCustomOptions(
    LogisticsAddressCountryRegionId _countryRegionId,
    boolean                         _filterByIsEmployerTax,
    NoYes                           _isEmployerTax,
    boolean                         _requireVendor
    )
    {
        PayrollTaxCodeLookup taxCodeLookup = PayrollTaxCodeLookup::construct();

        taxCodeLookup.parmCountryRegionId(_countryRegionId);
        taxCodeLookup.parmFilterByIsEmployerTax(_filterByIsEmployerTax);
        taxCodeLookup.parmIsEmployerTax(_isEmployerTax);
        taxCodeLookup.parmRequireVendor(_requireVendor);

        return taxCodeLookup;
    }

]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>