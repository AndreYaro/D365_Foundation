<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_Mov_ProdRelease_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimCtrl_Frm_Mov_ProdRelease_RU extends InventDimCtrl_Frm_Mov
{
    boolean allowEditConsistentDim;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formActiveSetup</Name>
				<Source><![CDATA[
    void formActiveSetup(
        InventDimGroupSetup _inventDimGroupSetup = null,
        InventMovement      _movement            = null,
        ProdJournalRelease_RU _prodJournalRelease_RU = null)
    {
        allowEditConsistentDim = _prodJournalRelease_RU.RecId ? true : false;

        super(_inventDimGroupSetup, _movement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableOnlyActiveDimensions</Name>
				<Source><![CDATA[
    protected boolean mustEnableOnlyActiveDimensions()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableField</Name>
				<Source><![CDATA[
    NoYes mustEnableField(fieldId _dimFieldId)
    {
        if (!super(_dimFieldId))
        {
            return NoYes::No;
        }

        if (movement)
        {
            InventDimGroupFieldSetup inventDimGroupFieldSetup = this.getFieldSetup(_dimFieldId);

            if (!inventDimGroupFieldSetup.dimFieldId())
            {
                return !movement.buffer().RecId;
            }

            if (allowEditConsistentDim && inventDimGroupFieldSetup.isConsistent())
            {
                return NoYes::Yes;
            }

            if (movement.buffer().RecId && inventDimGroupFieldSetup.isConsistent())
            {
                return NoYes::No;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimCtrl_Frm_Mov_ProdRelease_RU construct()
    {
        return new InventDimCtrl_Frm_Mov_ProdRelease_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of this class to be used in Forms.
    /// </summary>
    /// <param name="_formRun">
    /// The Form where controls are maintained
    /// </param>
    /// <param name="_movement">
    /// An instance of the movement for which the class is used.
    /// </param>
    /// <returns>
    /// A instance of this class to be used in a Form
    /// </returns>
    public static InventDimCtrl_Frm_Mov_ProdRelease_RU newFromFormMovement(FormRun _formRun, InventMovement _movement)
    {
        InventDimCtrl_Frm_Mov_ProdRelease_RU    inventDimCtrl   = InventDimCtrl_Frm_Mov_ProdRelease_RU::construct();
        InventDimAxFormAdapter                  adapter         = InventDimAxFormAdapter::newFromForm(_formRun);
        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.parmMovement(_movement);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormMovementDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of this class to be used in Forms.
    /// </summary>
    /// <param name="_formRun">
    /// The Form where controls are maintained
    /// </param>
    /// <param name="_movement">
    /// An instance of the movement for which the class is used.
    /// </param>
    /// <param name="_validDataSources">
    /// A set of names (strings) for the data sources in the form to be controlled by this class
    /// </param>
    /// <returns>
    /// A instance of this class to be used in a Form
    /// </returns>
    public static InventDimCtrl_Frm_Mov_ProdRelease_RU newFromFormMovementDataSources(FormRun _formRun, InventMovement _movement, Set _validDataSources)
    {
        InventDimCtrl_Frm_Mov_ProdRelease_RU   inventDimCtrl = InventDimCtrl_Frm_Mov_ProdRelease_RU::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);
        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.parmMovement(_movement);
        inventDimCtrl.parmValidDataSources(_validDataSources);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
