<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCancelContinuityParent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRCancelContinuityParent</c> class cancels a continuity order from the parent line.
/// </summary>
class MCRCancelContinuityParent
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelContinuityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Completes the continuity order and cancels any related open child sales orders.
    /// </summary>
    /// <param name="_salesId">
    ///     The sales ID for the order being canceled.
    /// </param>
    /// <param name="_inventTransId">
    ///     The inventTransID relating to the continuity header.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     An ErrorException is thrown if the continuity header does not update successfully.
    /// </exception>
    static public void cancelContinuityOrder(salesId _salesId, inventTransId  _inventTransId)
    {
        SalesLine                   salesLine;
        SalesTable                  salesTable;
        MCRContinuityCustHeader     continuityCustHeader;
        MCRContinuityCustLine       continuityCustLine;

        salesLine = SalesLine::findInventTransId(_inventTransId);

        // If Cancellation is allowed attempt to cancel it and the line is cancelled
        // the update the MCRContinuityCustHeader to complete and cancel all related
        // sales lines from sub orders that have been generated.
        if (salesLine.mcrSalesLine().ContinuityScheduleId
            && salesLine.SalesStatus == SalesStatus::Canceled)
        {
            // Change the MCRContinuityCustHeader to have a status of complete.
            ttsBegin;
            select forupdate continuityCustHeader
                where continuityCustHeader.InventTransId == _inventTransId;
            continuityCustHeader.Complete = true;
            if (continuityCustHeader.validateWrite())
            {
                continuityCustHeader.update();
            }
            else
            {
                throw error("@SYS104318");
            }
            ttsCommit;

            // Find all sales orders that have been created as children to this subscription and run them through the cancellation logic to see
            // if they should be canceled.
            while select SalesId from continuityCustLine
                where continuityCustLine.InventTransId == _inventTransId
                    && continuityCustLine.SalesId
                join salesTable
                where salesTable.SalesId == continuityCustLine.SalesId
            {
                //Cancel Children sales order.
                MCRSalesOrderCancellation::cancelOrder(salesTable, false);
                MCRCancelContinuityParent::MCRLaunchCancelOrderSummary(salestable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrLaunchCancelOrderSummary</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calls SO Recap screen when cancelling an order.
    /// </summary>
    /// <param name="_salesTable">
    ///     The sales table being canceled.
    /// </param>
    static public void mcrLaunchCancelOrderSummary(SalesTable _salesTable)
    {
        Args                recapArgs;
        FormRun             recapFormRun;
        MCRSalesOrderRecapConfigure salesOrderRecapConfigure = new MCRSalesOrderRecapConfigure();

        // Call Order Recap Screen
        recapArgs = new Args();
        recapArgs.name(formstr(MCRSalesOrderRecap));
        recapArgs.record(_salesTable);
        salesOrderRecapConfigure.parmShowModifyOrderButton(true);
        salesOrderRecapConfigure.parmIsOrderCancellation(true);
        recapArgs.parmObject(salesOrderRecapConfigure);
        recapFormRun = classFactory.formRunClass(recapArgs);
        recapFormRun.run();
        recapFormRun.wait();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>