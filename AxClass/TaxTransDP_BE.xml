<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransDP_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxTransDP_BE</c> class provides data for the <c>TaxTrans_BE</c> report.
/// </summary>
[
    SRSReportQuery(queryStr(TaxTrans_BE))
]
public class TaxTransDP_BE extends SrsReportDataProviderPreProcessTempDB
{
    TaxTransTmp_BE      taxTransTmp_BE;
    TaxTrans_BE         taxTrans_BE;
    TaxTrans            taxTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBE00007, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransTmp_BE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the temporary table to retrieve the required report data.
    /// </summary>
    /// <returns>
    ///    The required report data from the temporary table.
    /// </returns>
    [
        SRSReportDataSet('TaxTransTmp_BE')
    ]
    public TaxTransTmp_BE getTaxTransTmp_BE()
    {
        select taxTransTmp_BE;
        return taxTransTmp_BE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets the required data and inserts it in to the temporary table.
    /// </summary>
    public void insertTmpTable()
    {
        taxTransTmp_BE.TransDate            =   taxTrans.TransDate;
        taxTransTmp_BE.Voucher              =   taxTrans.Voucher;
        taxTransTmp_BE.TaxCode              =   taxTrans.TaxCode;
        taxTransTmp_BE.SourceName           =   taxTrans.sourceName();
        taxTransTmp_BE.Source               =   taxTrans.Source;
        taxTransTmp_BE.SourceInvoiceNo      =   taxTrans.sourceInvoiceNo();
        taxTransTmp_BE.TaxAmount            =   taxTrans_BE.ICTaxAmount();
        taxTransTmp_BE.NetTaxAmount         =   taxTrans_BE.netTaxAmount();
        taxTransTmp_BE.SourceNetTaxAmount   =   taxTrans_BE.sourceNetTaxAmount();
        taxTransTmp_BE.SourceCurrencyCode   =   taxTrans.SourceCurrencyCode;
        taxTransTmp_BE.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun;

        taxTrans_BE = new TaxTrans_BE();
        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            // The query outer joins to multiple source tables (TaxTransGeneralJournalAccountEntry, MainAccountLedgerDimensionView) based on voucher.
            // The join is only used to identify the Voucher, Sales tax code
            // Joining this information in the query performs better than an individual select on each TaxTrans record but
            // has the caveat that the join may return the same TaxTrans multiple times.
            // Check the changed status of the TaxTrans datasource to ensure we only process each TaxTrans record once.
            if (queryRun.changed(tableNum(TaxTrans)))
            {
                taxTrans = queryRun.get(tablenum(TaxTrans));
                taxTrans_BE.parmTaxTrans(taxTrans);
                taxTrans_BE.parmTaxTrans(taxTrans);
                this.insertTmpTable();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>