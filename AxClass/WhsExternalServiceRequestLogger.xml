<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsExternalServiceRequestLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net.Http;
using Microsoft.Dynamics.ApplicationPlatform;

internal final class WhsExternalServiceRequestLogger
{
    private WhsExternalServiceLoggingLevel loggingLevel = WhsExternalServiceLoggingLevel::None;
    private WhsExternalServiceLoggingLevel bodyLoggingLevel = WhsExternalServiceLoggingLevel::None;

    private WhsExternalServiceRequestLog requestLog;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WhsExternalServiceRequestLogger construct()
    {
        WhsExternalServiceRequestLogger requestLogger = new WhsExternalServiceRequestLogger();
        return requestLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withLoggingLevel</Name>
				<Source><![CDATA[
    internal WhsExternalServiceRequestLogger withLoggingLevel(WhsExternalServiceLoggingLevel _loggingLevel)
    {
        loggingLevel = _loggingLevel;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withBodyLoggingLevel</Name>
				<Source><![CDATA[
    internal WhsExternalServiceRequestLogger withBodyLoggingLevel(WhsExternalServiceLoggingLevel _bodyLoggingLevel)
    {
        bodyLoggingLevel = _bodyLoggingLevel;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRequestLogFromExternalServiceInstanceAndOperation</Name>
				<Source><![CDATA[
    internal void initRequestLogFromExternalServiceInstanceAndOperation(WhsExternalServiceInstance _externalServiceInstance, WhsExternalServiceOperation _externalServiceOperation)
    {
        requestLog.ExternalServiceInstance = _externalServiceInstance.RecId;
        requestlog.ExternalServiceOperation = _externalServiceOperation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRequestBodyLogString</Name>
				<Source><![CDATA[
    internal void initRequestBodyLogString(WhsExternalServiceInstance _externalServiceInstance, HttpRequestMessage _requestMessage)
    {
        System.Text.StringBuilder logMessageBuilder;
        
        try
        {
            const str AuthSecretReplacementPlaceholder = '--SECRET REMOVED--';
            
            logMessageBuilder = PooledStringBuilder::GetInstance();

            // [SuppressMessage("Microsoft.Security", "CS002:SecretInNextLine", Justification="This is just a placeholder so we can replace the actual security info.")]
            str authSecretPlaceHolder = _externalServiceInstance.getAuthenticationSecret();

            if (authSecretPlaceHolder)
            {
                logMessageBuilder.AppendLine(_requestMessage.ToString()
                                                .Replace(authSecretPlaceHolder, AuthSecretReplacementPlaceholder));
                logMessageBuilder.AppendLine('====');
                logMessageBuilder.AppendLine(_requestMessage.Content.ReadAsStringAsync().Result
                                                .Replace(authSecretPlaceHolder, AuthSecretReplacementPlaceholder));
            }
            else
            {
                logMessageBuilder.AppendLine(_requestMessage.ToString());
                logMessageBuilder.AppendLine('====');
                logMessageBuilder.AppendLine(_requestMessage.Content.ReadAsStringAsync().Result);
            }

            requestLog.Request = PooledStringBuilder::GetStringAndRelease(logMessageBuilder);
            logMessageBuilder = null;
        }
        finally
        {
            if (logMessageBuilder)
            {
                PooledStringBuilder::Free(logMessageBuilder);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logGeneralError</Name>
				<Source><![CDATA[
    internal void logGeneralError(str _errorMessage)
    {
        if (loggingLevel == WhsExternalServiceLoggingLevel::None)
        {
            return;
        }

        requestLog.Failure = true;
        requestLog.ErrorMessage = _errorMessage;
        requestLog.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logRequestError</Name>
				<Source><![CDATA[
    internal void logRequestError(str _errorMessage, str _httpResponseCode = '')
    {    
        if (loggingLevel== WhsExternalServiceLoggingLevel::None)
        {
            return;
        }
        
        requestLog.Failure = true;
        requestLog.ErrorMessage = _errorMessage;
        requestLog.HttpResponseCode = _httpResponseCode;
        
        if (!this.shouldLogRequestMessage(requestLog.Failure))
        {
            requestLog.Request = '';
        }
        
        requestLog.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logRequestSuccess</Name>
				<Source><![CDATA[
    internal void logRequestSuccess(HttpResponseMessage _responseMessage)
    {
        if (loggingLevel != WhsExternalServiceLoggingLevel::SuccessAndError)
        {
            return;
        }

        requestLog.Failure = false;
        requestLog.HttpResponseCode = _responseMessage.StatusCode.ToString('d');
        
        if (!this.shouldLogRequestMessage(requestLog.Failure))
        {
            requestLog.Request = '';
        }

        requestLog.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldLogRequestMessage</Name>
				<Source><![CDATA[
    private boolean shouldLogRequestMessage(boolean _failure)
    {
        return (_failure && bodyLoggingLevel <= WhsExternalServiceLoggingLevel::SuccessAndError)
               || (!_failure && bodyLoggingLevel == WhsExternalServiceLoggingLevel::SuccessAndError);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>