<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceDocumentController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceDocumentController</c> class is the helper class for the associated Microsoft SQL
/// Server Reporting Services report.
/// </summary>
public class VendInvoiceDocumentController extends SrsPrintMgmtFormLetterController implements BatchRetryable
{
    #ISOCountryRegionCodes

    PrintCopyOriginal printCopyOriginal;
    PurchInvoiceJournalPrint purchInvoiceJournalPrint;
    RecordSortedList journalList;
    VendInvoiceJour vendInvoiceJour;
    LedgerJournalTrans ledgerJournalTrans;
    VendInvoiceDocumentContract vendInvoiceDocumentContract;
    boolean isTaxInvoice;
    VendParameters vendParameters;

    // <GBR>
    #NFPrinting_BR
    FiscalDocumentContract_BR fiscalDocumentContract;
    FiscalDocument_BR fiscalDocument;
    // </GBR>

    // <GTE><GIN>
    boolean isGSTInvoice;
    GSTInvoiceContract_IN gstInvoiceContract;
    SRSCatalogItemName preReportName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIsTaxInvoice</Name>
				<Source><![CDATA[
    // </GTE></GIN>

    /// <summary>
    /// Checks whether the invoice is a tax invoice.
    /// </summary>
    private void checkIsTaxInvoice()
    {
        if (vendInvoiceDocumentContract.parmParm() == enum2str(ItemType::Item)
            || vendInvoiceDocumentContract.parmParm() == enum2str(ItemType::Service))
        {
            isTaxInvoice = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the document title value.
    /// </summary>
    /// <returns>
    ///     The document title value.
    /// </returns>
    protected str documentTitle()
    {
        str documentTitle;

        if (vendInvoiceJour.InvoiceAmount >= 0)
        {
            if (printCopyOriginal == PrintCopyOriginal::Copy)
            {
                documentTitle = this.getDocumentTitleByParameters(
                    isTaxInvoice,
                    "@SYS87980",
                    "@SYS121363",
                    "@SYS70789",
                    "@SYS121364",
                    "@SYS24428");
            }
            else
            {
                documentTitle = this.getDocumentTitleByParameters(
                    isTaxInvoice,
                    "@SYS87979",
                    "@SYS121362",
                    "@SYS4701",
                    "@SYS115505",
                    "@SYS12128");
            }
        }
        else
        {
            if (printCopyOriginal == PrintCopyOriginal::Copy)
            {
                boolean isValid = (vendParameters.CreditInvoicingReport == NoYes::Yes);
                documentTitle = this.getDocumentTitleByParameters(
                    isValid,
                    "@SYS87981",
                    "@SYS99741",
                    "@SYS71588",
                    "@SYS99733",
                    "@SYS71589");
            }
            else
            {
                boolean isValid = (vendParameters.CreditInvoicingReport == NoYes::Yes);
                documentTitle = this.getDocumentTitleByParameters(
                    isValid,
                    "@SYS87981",
                    "@SYS99741",
                    "@SYS71590",
                    "@SYS99734",
                    "@SYS71591");
            }
        }

        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTitleByParameters</Name>
				<Source><![CDATA[
    private str getDocumentTitleByParameters(
        boolean _isValid,
        str _label1, 
        str _label2,
        str _label3,
        str _label4,
        str _label5)
    {
        str documentTitle;

        if (vendInvoiceJour.isProforma())
        {
            if (vendInvoiceJour.Prepayment)
            {
                documentTitle = _label1;
            }
            else
            {
                if (_isValid)
                {
                    documentTitle = _label2;
                }
                else
                {
                    documentTitle = _label3;
                }
            }
        }
        else
        {
            if (_isValid)
            {
                documentTitle = _label4;
            }
            else
            {
                documentTitle = _label5;
            }
        }

        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTitle_SA</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the document title value.
    /// </summary>
    /// <returns>
    ///     The document title value.
    /// </returns>
    private str documentTitle_SA()
    {
        str documentTitle;
        
        if (vendInvoiceJour.InvoiceAmount >= 0)
        {
            if (printCopyOriginal == PrintCopyOriginal::Copy)
            {
                if (vendInvoiceJour.isProforma())
                {
                    if (vendInvoiceJour.Prepayment)
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS87980"), vendInvoiceJour.LanguageId);
                    }
                    else
                    {
                        if (isTaxInvoice)
                        {
                            documentTitle = SysLabel::labelId2String(literalStr("@SYS121363"), vendInvoiceJour.LanguageId);
                        }
                        else
                        {
                            documentTitle = SysLabel::labelId2String(literalStr("@SYS70789"), vendInvoiceJour.LanguageId);
                        }
                    }
                }
                else
                {
                    if (isTaxInvoice)
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS121364"), vendInvoiceJour.LanguageId);
                    }
                    else
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS24428"), vendInvoiceJour.LanguageId);
                    }
                }
            }
            else
            {
                if (vendInvoiceJour.isProforma())
                {
                    if (vendInvoiceJour.Prepayment)
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS87979"), vendInvoiceJour.LanguageId);
                    }
                    else
                    {
                        if (isTaxInvoice)
                        {
                            documentTitle = SysLabel::labelId2String(literalStr("@SYS121362"), vendInvoiceJour.LanguageId);
                        }
                        else
                        {
                            documentTitle = SysLabel::labelId2String(literalStr("@SYS4701"), vendInvoiceJour.LanguageId);
                        }
                    }
                }
                else
                {
                    if (isTaxInvoice)
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS115505"), vendInvoiceJour.LanguageId);
                    }
                    else
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS12128"), vendInvoiceJour.LanguageId);
                    }
                }
            }
        }
        else
        {
            if (printCopyOriginal == PrintCopyOriginal::Copy)
            {
                if (vendInvoiceJour.isProforma())
                {
                    if (vendInvoiceJour.Prepayment)
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS87981"), vendInvoiceJour.LanguageId);
                    }
                    else
                    {
                        if (vendParameters.CreditInvoicingReport)
                        {
                            documentTitle = SysLabel::labelId2String(literalStr("@SYS99741"), vendInvoiceJour.LanguageId);
                        }
                        else
                        {
                            documentTitle = SysLabel::labelId2String(literalStr("@SYS71588"), vendInvoiceJour.LanguageId);
                        }
                    }
                }
                else
                {
                    if (vendParameters.CreditInvoicingReport)
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS99733"), vendInvoiceJour.LanguageId);
                    }
                    else
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS71589"), vendInvoiceJour.LanguageId);
                    }
                }
            }
            else
            {
                if (vendInvoiceJour.isProforma())
                {
                    if (vendInvoiceJour.Prepayment)
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS87981"), vendInvoiceJour.LanguageId);
                    }
                    else
                    {
                        if (vendParameters.CreditInvoicingReport)
                        {
                            documentTitle = SysLabel::labelId2String(literalStr("@SYS99741"), vendInvoiceJour.LanguageId);
                        }
                        else
                        {
                            documentTitle = SysLabel::labelId2String(literalStr("@SYS71590"), vendInvoiceJour.LanguageId);
                        }
                    }
                }
                else
                {
                    if (vendParameters.CreditInvoicingReport)
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS99734"), vendInvoiceJour.LanguageId);
                    }
                    else
                    {
                        documentTitle = SysLabel::labelId2String(literalStr("@SYS71591"), vendInvoiceJour.LanguageId);
                    }
                }
            }
        }
        
        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTitleLocalization</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the document title value.
    /// </summary>
    /// <returns>
    ///     The document title value.
    /// </returns>
    private str documentTitleLocalization()
    {
        str documentTitle;
        CompanyInfo companyInfo = CompanyInfo::find();
        LogisticsAddressCountryRegionISOCode isoCountryCode;

        isoCountryCode = SysCountryRegionCode::countryInfo();

        if (isoCountryCode == #isoLV)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00010, funcName());
        }

        if (isoCountryCode == #isoLT
            || isoCountryCode == #isoLV
            || isoCountryCode == #isoHU
            || (isoCountryCode == #isoCZ && vendInvoiceJour.InvoiceAmount >= 0))
        {
            if (vendInvoiceJour.PurchaseType == PurchaseType::ReturnItem)
            {
                if (printCopyOriginal == PrintCopyOriginal::Copy)
                {
                    if (vendInvoiceJour.isProforma())
                    {
                        if (vendInvoiceJour.Prepayment)
                        {
                            documentTitle = "@GLS221216";
                        }
                        else
                        {
                            documentTitle = "@GLS221217";
                        }
                    }
                    else
                    {
                        documentTitle = "@GLS221218";
                    }
                }
                else
                {
                    if (vendInvoiceJour.isProforma())
                    {
                        if (vendInvoiceJour.Prepayment)
                        {
                            documentTitle = "@GLS221219";
                        }
                        else
                        {
                            documentTitle = "@GLS221220";
                        }
                    }
                    else
                    {
                        documentTitle = "@GLS107500";
                    }
                }
            }
            else
            {
                if (printCopyOriginal == PrintCopyOriginal::Copy)
                {
                    if (vendInvoiceJour.isProforma())
                    {
                        if (vendInvoiceJour.Prepayment)
                        {
                            documentTitle = "@SYS87980";
                        }
                        else
                        {
                            documentTitle = "@SYS70789";
                        }
                    }
                    else
                    {
                        documentTitle = "@SYS24428";
                    }
                }
                else
                {
                    if (vendInvoiceJour.isProforma())
                    {
                        if (vendInvoiceJour.Prepayment)
                        {
                            documentTitle = "@SYS87979";
                        }
                        else
                        {
                            documentTitle = "@SYS4701";
                        }
                    }
                    else
                    {
                        documentTitle = "@SYS12128";
                    }
                }
            }
        }
        // <GEECZ>
        else if (isoCountryCode == #isoCZ)
        {
            if (printCopyOriginal == PrintCopyOriginal::Copy)
            {
                if (vendInvoiceJour.isProforma())
                {
                    if (vendInvoiceJour.Prepayment)
                    {
                        documentTitle = "@SYS87981";
                    }
                    else
                    {
                        documentTitle = "@SYS71588";
                    }
                }
                else
                {
                    documentTitle = "@SYS71589";
                }
            }
            else
            {
                if (vendInvoiceJour.isProforma())
                {
                    if (vendInvoiceJour.Prepayment)
                    {
                        documentTitle = "@SYS87981";
                    }
                    else
                    {
                        documentTitle = "@SYS71590";
                    }
                }
                else
                {
                    documentTitle = "@SYS71591";
                }
            }
        }
        // </GEECZ>

        // <GEELT>
        if (isoCountryCode == #isoLT && strLRTrim(companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, vendInvoiceJour.InvoiceDate)))
        {
            documentTitle = strFmt("@SYS76498", "@GLS107406", documentTitle);
        }
        // </GEELT>

        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report and sets the print management.
    /// </summary>
    protected void initFormLetterReport()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (classIdGet(this.parmArgs().caller()) == classNum(PurchInvoiceJournalPrint))//PurchInvoiceJournalPrint class is also used for approvals
        {
            purchInvoiceJournalPrint = this.parmArgs().caller();
        }

        if (this.parmArgs().record())
        {
            journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            journalList = this.parmArgs().object();
        }

        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::PurchaseOrderInvoice);
        formLetterReport.parmPrintType(printCopyOriginal);

        if (purchInvoiceJournalPrint)
        {
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(purchInvoiceJournalPrint.parmPrinterSettingsFormLetterCopy()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(purchInvoiceJournalPrint.parmPrinterSettingsFormLetter()));
            formLetterReport.parmUsePrintMgmtDestinations(purchInvoiceJournalPrint.parmUsePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReport</Name>
				<Source><![CDATA[
    protected void outputReport()
    {
        str documentTitle;

        // <GIN><GTE>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.initReportName_IN();

            if (this.parmIsGSTInvoice_IN())
            {
                this.outputReport_IN();
                super();
                return;
            }
        }
        // </GTE></GIN>

        // <GBR>
        if (!BrazilParameters::isEnabled())
        {
        // </GBR>
            if (formLetterReport.getCurrentPrintSetting().parmType() == PrintMgmtDocInstanceType::Copy)
            {
                printCopyOriginal = PrintCopyOriginal::Copy;
            }
            else
            {
                printCopyOriginal = PrintCopyOriginal::Original;
            }

            if (!vendInvoiceDocumentContract)
            {
                vendInvoiceDocumentContract = this.parmReportContract().parmRdpContract() as VendInvoiceDocumentContract;
            }

            // <GMY>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMY]))
            {
                documentTitle = this.documentTitle_MY();
            }
            else
            // </GMY>
            // <GSA>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA]))
            {
                documentTitle = this.documentTitle_SA();
            }
            else
            // </GSA>
            // <GEEU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoHU, #isoLT, #isoLV]))
            {
                documentTitle = this.documentTitleLocalization();
            }
            else
            {
            // </GEEU>
                documentTitle = this.documentTitle();
            // <GEEU>
            }
            // </GEEU>

            documentTitle = SysLabel::labelId2String2(documentTitle, this.parmReportContract().parmRdlContract().parmLanguageId());

            vendInvoiceDocumentContract.parmDocumentTitle(documentTitle);
        // <GBR>
        }
        // </GBR>
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReport_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the report for the print management setting that is currently loaded.
    /// </summary>
    /// <remarks>
    /// The <c>outReports</c> method iterates over print management settings and calls this method for each
    /// print management setting that is loaded. Override this method to modify parameters for each print
    /// settings if you want to provide different footer text for each print settings loaded for a given
    /// report.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The print management object has not been initialized.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void outputReport_IN()
    {
        TaxDocument             taxDocument;
        TaxDocumentExtension_IN taxDocumentExtension;

        taxDocument = this.getTaxDocumentByVendInvoiceJour(vendInvoiceJour);

        if (taxDocument.TaxDocumentGuid)
        {
            taxDocumentExtension = TaxDocumentExtension_in::findByTaxDocument(taxDocument.TaxDocumentGuid);
        }

        GSTInvoiceDPBase_IN gstInvoiceDPBaseImp = new TaxGSTPurchInvoiceDP_IN();
        PrintMgmtPrintSettingDetail detail = formLetterReport.getCurrentPrintSetting();

        gstInvoiceContract.parmInstanceType(detail.parmType());
        gstInvoiceContract.parmIdentificationText(detail.parmIdentificationText());
        gstInvoiceContract.parmledgerJournalTransRecordId(ledgerJournalTrans.RecId);

        switch (formLetterReport.getCurrentPrintSetting().parmType())
        {
            case PrintMgmtDocInstanceType::Copy : printCopyOriginal = PrintCopyOriginal::Copy;
                break;

            case PrintMgmtDocInstanceType::Original : printCopyOriginal = PrintCopyOriginal::OriginalPrint;
                break;
        }

        gstInvoiceContract.parmPrintCopyOriginal(printCopyOriginal);
        gstInvoiceContract.parmDocumentTitle(gstInvoiceDPBaseImp.documentTitle(
            vendInvoiceJour.isProforma(),
            taxDocumentExtension,
            printCopyOriginal,
            ModuleType_IN::AccountsPayable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>SRSReportParameters</c> values to the report contract.
    /// </summary>
    protected void preRunModifyContract()
    {
        SRSTmpDataStore srsTmpDataStore;
        // <GBR>
        FiscalEstablishment_BR fiscalEstablishment;
        // </GBR>
        VendInvoiceDocumentTmp vendInvoiceDocumentTmp;

        // <GIN><GTE>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
            && this.parmIsGSTInvoice_IN())
        {
            this.preRunModifyContract_IN();
            super();
            return;
        }
        // </GTE></GIN>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            fiscalDocumentContract = this.parmReportContract().parmRdpContract() as FiscalDocumentContract_BR;

            select firstOnly fiscalDocument
                where fiscalDocument.RefRecId == vendInvoiceJour.RecId
                   && fiscalDocument.RefTableId == vendInvoiceJour.TableId
                join EFDocPrePrintedSecurityForm, efDocEnvironment from fiscalEstablishment
                where fiscalEstablishment.FiscalEstablishmentId == fiscalDocument.FiscalEstablishment;

            fiscalDocumentContract.parmRecordId(fiscalDocument.RecId);
            fiscalDocumentContract.parmPrePrintedSecurityForm(fiscalEstablishment.EFDocPrePrintedSecurityForm);
            fiscalDocumentContract.parmMaxDescSizeAdditionaInfFirstPage(#MaxDescSizeAdditionaInfFirstPage);
            fiscalDocumentContract.parmProForma(vendInvoiceJour.isProforma());

            if (fiscalDocument.isElectronic())
            {
                fiscalDocumentContract.parmMaxDescSizeAdditionalInformation(#MaxDescSizeAdditionalInformation);
            }
            else
            {
                fiscalDocumentContract.parmMaxDescSizeAdditionalInformation(#MaxNFMemoLines * #MaxNFMemoDescriptionSize);
            }

            if (fiscalEstablishment.efDocEnvironment == EFDocEnvironment_BR::Testing)
            {
                fiscalDocumentContract.parmEFDocEnvironment(true);
            }
            else
            {
                fiscalDocumentContract.parmEFDocEnvironment(false);
            }

            if (purchInvoiceJournalPrint)
            {
                // Pack the class and insert into the temporary store.
                srsTmpDataStore.Value = purchInvoiceJournalPrint.pack();
                srsTmpDataStore.insert();

                // Set the rec id to contract parameter
                fiscalDocumentContract.parmFormLetterRecordId(srsTmpDataStore.RecId);
            }
        }
        else
        {
        // </GBR>
        if (!vendInvoiceDocumentContract)
        {
            vendInvoiceDocumentContract = this.parmReportContract().parmRdpContract() as VendInvoiceDocumentContract;
        }

        vendParameters = VendParameters::find();

        // Set PrintCopyOriginal value
        vendInvoiceDocumentContract.parmPrintCopyOriginal(printCopyOriginal);

        // Set Record Id
        vendInvoiceDocumentContract.parmRecordId(vendInvoiceJour.RecId);

        // set LedgerJournalTrans Recid
        if (ledgerJournalTrans)
        {
            vendInvoiceDocumentContract.parmRecordIdLedgerJourTrans(ledgerJournalTrans.RecId);
        }

        // Set parm
        if (this.parmArgs().parm())
        {
            vendInvoiceDocumentContract.parmParm(this.parmArgs().parm());

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
            {
                this.checkIsTaxInvoice();
            }
        }

        // <GSA>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA]))
        {
            this.parmReportContract().parmRdlContract().parmLanguageId(vendInvoiceJour.LanguageId);
        }
        // </GSA>

        if (purchInvoiceJournalPrint)
        {
            // Pack the class and insert into the temporary store.
            srsTmpDataStore.Value = purchInvoiceJournalPrint.pack();
            srsTmpDataStore.insert();

            // Set the rec id to contract parameter
            vendInvoiceDocumentContract.parmFormLetterRecordId(srsTmpDataStore.RecId);
        }
        // <GBR>
        }
        // </GBR>

        // <GSA>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA]))
        {
            // To Capture the createdTransactionId.
            select firstonly JournalRecId, CreatedTransactionId from vendInvoiceDocumentTmp
                    where vendInvoiceDocumentTmp.JournalRecId == vendInvoiceJour.RecId;
            vendInvoiceDocumentContract.parmCreatedTransactionId(vendInvoiceDocumentTmp.createdTransactionId);
            vendInvoiceDocumentContract.parmLanguageId(vendInvoiceJour.LanguageId);
        }
        // </GSA>
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>SRSReportParameters</c> values to the report contract.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void preRunModifyContract_IN()
    {
        SRSTmpDataStore srsTmpDataStore;
        GSTInvoiceHeaderFooterTmp_IN gstInvoiceHeaderFooterTmp;

        if (!gstInvoiceContract)
        {
            gstInvoiceContract = this.parmReportContract().parmRdpContract();
        }

        if (!ledgerJournalTrans)
        {
            // Process the AP invoice journal
            select firstOnly RecId from ledgerJournalTrans
                where ledgerJournalTrans.Invoice    == vendInvoiceJour.invoiceId
                    && ledgerJournalTrans.Voucher   == vendInvoiceJour.LedgerVoucher;
        }

        gstInvoiceContract.parmPrintCopyOriginal(printCopyOriginal);
        gstInvoiceContract.parmRecordId(vendInvoiceJour.RecId);
        gstInvoiceContract.parmTableId(tableNum(VendInvoiceJour));
        gstInvoiceContract.parmledgerJournalTransRecordId(ledgerJournalTrans.RecId);
        gstInvoiceContract.parmGSTInvoiceControllerName(classId2Name(classIdGet(this)));
        this.parmReportContract().parmRdlContract().parmLanguageId(vendInvoiceJour.LanguageId);

        if (purchInvoiceJournalPrint)
        {
            // Pack the class and insert into the temporary store.
            srsTmpDataStore.Value = purchInvoiceJournalPrint.pack();
            srsTmpDataStore.insert();

            // Set the rec id to contract parameter
            gstInvoiceContract.parmFormLetterRecordId(srsTmpDataStore.RecId);

            // To Capture the createdTransactionId.
            select firstonly JournalRecId, CreatedTransactionId from gstInvoiceHeaderFooterTmp
                where gstInvoiceHeaderFooterTmp.JournalRecId == vendInvoiceJour.RecId;

            gstInvoiceContract.parmCreatedTransactionId(gstInvoiceHeaderFooterTmp.createdTransactionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetReportDataContract</Name>
				<Source><![CDATA[
    private void resetReportDataContract()
    {
        contractsInitialized = false;
        this.parmReportRun(null);
        this.parmReportContract(null);

        // <GTE><GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            gstInvoiceContract = null;
            vendInvoiceDocumentContract = null;
        }
        // </GTE></GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        // <GBR>
        PrintMgmtPrintSettingDetail printSettingDetail;
        // </GBR>
        // <GSA>
        LanguageId originalLanguageId;
        // </GSA>
        if (!journalList)
        {
            throw error("@SYS26348");
        }

        // Once journalist.first() is called in outer method, journalList.next(vendInvoiceJour) is return false.
        journalList.first(vendInvoiceJour);
        if (!this.parmCancelRun())
        {
            do
            {
                if (!vendInvoiceJour)
                {
                    throw error("@SYS26348");
                }

                if (vendInvoiceJour.PurchId)
                {
                    formLetterReport.loadPrintSettings(vendInvoiceJour,
                                                       vendInvoiceJour.purchTable(),
                                                       vendInvoiceJour.LanguageId);
                }
                else
                {
                    if (formLetterReport is PurchFormLetterReport_Invoice)
                    {
                        PurchFormLetterReport_Invoice purchFormLetterInvoicePrint = formLetterReport;
                        purchFormLetterInvoicePrint.setPrintMgmtNodeTypeForVendor(true);
                        purchFormLetterInvoicePrint.loadPrintSettings(vendInvoiceJour,
                                                                      vendInvoiceJour.vendTable_InvoiceAccount(),
                                                                      vendInvoiceJour.LanguageId);
                    }
                }

                // <GBR>
                if (BrazilParameters::isEnabled())
                {
                    if (formLetterReport.moveNextPrintSetting())
                    {
                        printSettingDetail = formLetterReport.getCurrentPrintSetting();

                        if (printSettingDetail.parmReportFormatName() == PrintMgmtDocType::construct(PrintMgmtDocumentType::PurchaseOrderInvoice).getDefaultReportFormat())
                        {
                            fiscalDocument = vendInvoiceJour.fiscalDocument_BR();

                            // Retrieves the appropiate SSRS Report name to show an invoice (FiscalDocument_BR, EFDocDANFE_BR, RPS_BR)
                            this.parmReportName(fiscalDocument.getReportName());

                            // Change the default report to Brazilian Format
                            printSettingDetail.parmReportFormatName(this.parmReportName());
                        }
                        else
                        {
                            // Uses the SSRS Report name configured by user on Print Management
                            this.parmReportName(printSettingDetail.parmReportFormatName());
                        }

                        this.resetReportDataContract();
                        formLetterReport.parmReportRun().loadSettingDetail(printSettingDetail);
                    }
                }
                // </GBR>
                this.outputReports();

                if (purchInvoiceJournalPrint && purchInvoiceJournalPrint.parmPrintEUVatInvoice())
                {
                    vendInvoiceJour.printEUVatInvoice(purchInvoiceJournalPrint);
                }

                // <GSA>
                if (CustVendInvoiceJour::needToPrintInCompanyLanguage_SA(vendInvoiceJour))
                {
                    originalLanguageId = vendInvoiceJour.LanguageId;
                    CustVendInvoiceJour::setLanguage_SA(vendInvoiceJour, CompanyInfo::languageId());
                }
                else
                if (originalLanguageId)
                {
                    if (! vendInvoiceJour.Proforma)
                    {
                        CustVendInvoiceJour::setLanguage_SA(vendInvoiceJour, originalLanguageId);
                    }
                    originalLanguageId = '';
                }
                // </GSA>
            }
            while (originalLanguageId || journalList.next(vendInvoiceJour));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailzes the controller, sets the print management, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        // <GEERU>
        #isoCountryRegionCodes
        // </GEERU>
        VendInvoiceJour     vendInvoiceJournal;
        RecordSortedList    journalList;
        // <GTE><GIN>
        Common                              common;
        LedgerJournalTrans                  ledgerJournalTransLoc;
        TaxDocumentExtension_IN             taxDocumentExtension;
        TaxEngineLedgerJournalTransHeader   taxEngineLedgerJournalTransHeader;
        VendInvoiceDocumentController       vendInvoiceDocumentController;
        // </GTE></GIN>
        SrsReportRunController formLetterController = new VendInvoiceDocumentController();

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (!NonSSRSPrintMgmtAdapter::runPrintMgmtNonSSRS(PrintMgmtDocumentType::PurchaseOrderInvoice, _args))
            {
                return;
            }
        }
        // </GEERU>

        formLetterController.parmArgs(_args);

        if (classIdGet(_args.caller()) == classNum(PurchInvoiceJournalPrint))
        {
            formLetterController.renderingCompleted += eventhandler(PurchInvoiceJournalPrint::renderingCompleted);
        }
        // <GIN><GTE>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            journalList = _args.record() ? FormLetter::createJournalListCopy(_args.record()) : _args.object();
            journalList.first(vendInvoiceJournal);

            if (vendInvoiceJournal.PurchId)
            {
                common = VendInvoiceInfoTable::findPurchInvFromVendInvoiceJour(vendInvoiceJournal.PurchId, vendInvoiceJournal.InvoiceId, vendInvoiceJournal.ParmId);
            }
            else
            {
                select firstOnly TableId, RecId from taxEngineLedgerJournalTransHeader
                    join RecId from ledgerJournalTransLoc
                        where ledgerJournalTransLoc.AccountType    == LedgerJournalACType::Vend
                            && ledgerJournalTransLoc.JournalNum    == taxEngineLedgerJournalTransHeader.JournalNum
                            && ledgerJournalTransLoc.Voucher       == taxEngineLedgerJournalTransHeader.Voucher
                            && ledgerJournalTransLoc.Invoice       == vendInvoiceJournal.InvoiceId
                            && ledgerJournalTransLoc.Voucher       == vendInvoiceJournal.LedgerVoucher;

                common = taxEngineLedgerJournalTransHeader;
            }

            TaxDocument taxDocument = TaxDocumentUtils::getTaxDocumentBySource(common.TableId, common.RecId);

            if (taxDocument)
            {
                taxDocumentExtension = TaxDocumentExtension_IN::findByTaxDocument(taxDocument.TaxDocumentGuid);
            }

            vendInvoiceDocumentController = formLetterController;

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && taxDocumentExtension.TaxInvReferenceType != GSTReference_IN::None)
            {
                vendInvoiceDocumentController.parmIsGSTInvoice_IN(true);
                formLetterController.parmReportName(ssrsReportStr(GSTInvoiceReport_IN, Report));
            }
            else
            {
                formLetterController.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::PurchaseOrderInvoice).getDefaultReportFormat());
            }
        }
        else
        {
        // </GTE></GIN>
        formLetterController.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::PurchaseOrderInvoice).getDefaultReportFormat());
        // <GIN><GTE>
        }
        // </GTE></GIN>
        formLetterController.parmShowDialog(false);
        formLetterController.parmDialogCaption("@SYS22766");
        formLetterController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportName_IN</Name>
				<Source><![CDATA[
    private void initReportName_IN()
    {
        PrintMgmtPrintSettingDetail printSettingDetail = formLetterReport.getCurrentPrintSetting();

        if (printSettingDetail.parmReportFormatName() == PrintMgmtDocType::construct(PrintMgmtDocumentType::PurchaseOrderInvoice).getDefaultReportFormat())
        {
            TaxDocument taxDocument = this.getTaxDocumentByVendInvoiceJour(vendInvoiceJour);

            if (taxDocument.TaxDocumentGuid && TaxDocumentExtension_IN::findByTaxDocument(taxDocument.TaxDocumentGuid).TaxInvReferenceType != GSTReference_IN::None)
            {
                this.parmIsGSTInvoice_IN(true);
                this.parmReportName(ssrsReportStr(GSTInvoiceReport_IN, Report));
            }
            else
            {
                this.parmIsGSTInvoice_IN(false);
                this.parmReportName(ReportName);
            }
            if (preReportName && preReportName != this.parmReportName())
            {
                this.resetReportDataContract();
            }
            preReportName = this.parmReportName();

            printSettingDetail.parmReportFormatName(this.parmReportName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTitle_MY</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the document title value for Malaysia.
    /// </summary>
    /// <returns>
    ///     The document title value.
    /// </returns>
    private str documentTitle_MY()
    {
        str documentTitle;

        NoteType_MY noteTypelocal;
        VendInvoiceJour_W vendInvoiceJour_W = vendInvoiceJour.vendInvoiceJour_W();

        noteTypeLocal = vendInvoiceJour_W.NoteType_MY;

        if (noteTypeLocal == NoteType_MY::Blank && vendInvoiceJour.InvoiceAmount < 0)
        {
            // When NoteType_MY is Blank and invoice amount < 0, will follow sys logic to print "Credit note".
            noteTypeLocal = NoteType_MY::CreditNote;
        }

        switch (noteTypelocal)
        {
            case NoteType_MY::CreditNote:
                if (printCopyOriginal == PrintCopyOriginal::Copy)
                {
                    if (vendInvoiceJour.isProforma())
                    {
                        if (vendInvoiceJour.Prepayment)
                        {
                            documentTitle = "@SYS87981";
                        }
                        else
                        {
                            documentTitle = "@SYS99741";
                        }
                    }
                    else
                    {
                        documentTitle = "@SYS99733";
                    }
                }
                else
                {
                    if (vendInvoiceJour.isProforma())
                    {
                        if (vendInvoiceJour.Prepayment)
                        {
                            documentTitle = "@SYP4861023";
                        }
                        else
                        {
                            documentTitle = "@SYS24608";
                        }
                    }
                    else
                    {
                        documentTitle = "@SYS99734";
                    }
                }
                break;
            case NoteType_MY::DebitNote:
                if (printCopyOriginal == PrintCopyOriginal::Copy)
                {
                    if (vendInvoiceJour.isProforma())
                    {
                        if (vendInvoiceJour.Prepayment)
                        {
                            documentTitle = "@SYP4860810";
                        }
                        else
                        {
                            documentTitle = "@SYP4860812";
                        }
                    }
                    else
                    {
                        documentTitle = "@SYP4860807";
                    }
                }
                else
                {
                    if (vendInvoiceJour.isProforma())
                    {
                        if (vendInvoiceJour.Prepayment)
                        {
                            documentTitle = "@SYP4860809";
                        }
                        else
                        {
                            documentTitle = "@SYP4860811";
                        }
                    }
                    else
                    {
                        documentTitle = "@SYP4860805";
                    }
                }
                break;
            case NoteType_MY::Blank:
                if (printCopyOriginal == PrintCopyOriginal::Copy)
                {
                    if (vendInvoiceJour.isProforma())
                    {
                        if (vendInvoiceJour.Prepayment)
                        {
                            documentTitle = "@SYS87980";
                        }
                        else
                        {
                            if (isTaxInvoice)
                            {
                                documentTitle = "@SYS121363";
                            }
                            else
                            {
                                documentTitle = "@SYS70789";
                            }
                        }
                    }
                    else
                    {
                        if (isTaxInvoice)
                        {
                            documentTitle = "@SYS121364";
                        }
                        else
                        {
                            documentTitle = "@SYS24428";
                        }
                    }
                }
                else
                {
                    if (vendInvoiceJour.isProforma())
                    {
                        if (vendInvoiceJour.Prepayment)
                        {
                            documentTitle = "@SYS87979";
                        }
                        else
                        {
                            if (isTaxInvoice)
                            {
                                documentTitle = "@SYS121362";
                            }
                            else
                            {
                                documentTitle = "@SYS4701";
                            }
                        }
                    }
                    else
                    {
                        if (isTaxInvoice)
                        {
                            documentTitle = "@SYS115505";
                        }
                        else
                        {
                            documentTitle = "@SYS12128";
                        }
                    }
                }
                break;
        }

        if (vendInvoiceJour_W.InvoiceType_MY == InvoiceType_MY::SelfBilled)
        {
            documentTitle = strfmt("@SYS76498", "@SYP4860864", documentTitle);
        }

        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsGSTInvoice_IN</Name>
				<Source><![CDATA[
    private boolean parmIsGSTInvoice_IN(boolean _isGSTInvoice = isGSTInvoice)
    {
        // <GTE><GIN>
        isGSTInvoice = _isGSTInvoice;
        return isGSTInvoice;
        // </GTE></GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDocumentByVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets taxdocument by vendInvoiceJour.
    /// </summary>
    /// <param name = "_vendInvoiceJour">The vendInvoiceJour.</param>
    /// <returns>The taxdocument.</returns>
    private TaxDocument getTaxDocumentByVendInvoiceJour(VendInvoiceJour _vendInvoiceJour)
    {
        TaxDocument taxDocument;

        if (_vendInvoiceJour.PurchId)
        {
            taxDocument = TaxDocumentUtils::getTaxDocumentBySource(_vendInvoiceJour.TableId, _vendInvoiceJour.RecId);
        }
        // For invoice journal transaction, post invoice can't execute transit logic, so through source information to find taxdocument.
        else
        {
            TaxEngineLedgerJournalTransHeader   taxEngineLedgerJournalTransHeader;
            LedgerJournalTrans                  ledgerJournalTransLoc;

            select firstOnly TableId, RecId from taxEngineLedgerJournalTransHeader
                join RecId from ledgerJournalTransLoc
                    where ledgerJournalTransLoc.AccountType    == LedgerJournalACType::Vend
                        && ledgerJournalTransLoc.JournalNum    == taxEngineLedgerJournalTransHeader.JournalNum
                        && ledgerJournalTransLoc.Voucher       == taxEngineLedgerJournalTransHeader.Voucher
                        && ledgerJournalTransLoc.Invoice       == _vendInvoiceJour.InvoiceId
                        && ledgerJournalTransLoc.Voucher       == _vendInvoiceJour.LedgerVoucher;

            taxDocument = TaxDocumentUtils::getTaxDocumentBySource(taxEngineLedgerJournalTransHeader.TableId, taxEngineLedgerJournalTransHeader.RecId);
        }
        return taxDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>