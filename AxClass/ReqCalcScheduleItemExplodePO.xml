<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcScheduleItemExplodePO</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqCalcScheduleItemExplodePO</c> class runs a net changed minimized master scheduling for
///    the specified item and for derived items that are related to the open planned orders.
/// </summary>
/// <remarks>
///    The logic in this class is useful if several planned orders are deleted and new planned orders are
///    created. The released issues from the deletion of the planned orders will be settled against the
///    new planned orders according to regular logic. The derived requirements for the created planned
///    orders will be included in the calculation and planned orders might be created to cover these
///    requirements.
/// </remarks>
public class ReqCalcScheduleItemExplodePO  extends ReqCalcScheduleItem implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds requirement transactions to the internal cache in order to coverage schedule these later.
    /// </summary>
    protected void insertData()
    {
        ReqPO           reqPO;
        ReqTrans        reqTrans;

        super();

        // Add derived requirements from open plannned orders (new planned orders)
        while select reqTrans
            where reqTrans.PlanVersion  == this.reqPlanVersionRefRecId()
               && reqTrans.ItemId       == itemId
               && reqTrans.CovQty       == 0
            exists join reqPO
                where reqPO.PlanVersion == reqTrans.PlanVersion
                   && reqPO.RefType     == reqTrans.RefType
                   && reqPO.RefId       == reqTrans.RefId
                   && reqPO.ItemId      == itemId
        {
            if (ReqTrans::derivedRefType(reqTrans.RefType)!= ReqRefType::None)
            {
                this.addRef2ReqTransCache(ReqTrans::derivedRefType(reqTrans.RefType),
                                          reqTrans.RefId,
                                          0,
                                          true,
                                          InventDistinctProduct::find(reqTrans.ItemId, reqTrans.CovInventDimId).Level);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReqCalcUpdateFixed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the master scheduling principle is fixed.
    /// </summary>
    /// <returns>
    /// true if the master scheduling principle is fixed; otherwise, false.
    /// </returns>
    protected boolean isReqCalcUpdateFixed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the object settings.
    /// </summary>
    /// <param name="calledFrom">
    /// An object that represents the calling object.
    /// </param>
    /// <returns>
    /// true if the settings are valid; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret && reqCalcUpdate != ReqCalcUpdate::NetChangeMinimized)
        {
            // The master scheduling principle must be to %1.
            ret = checkFailed(strfmt("@SYS325317", ReqCalcUpdate::NetChangeMinimized));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static ReqCalcScheduleItemExplodePO construct()
    {
        return new ReqCalcScheduleItemExplodePO();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ReqCalcScheduleItemExplodePO</c> class.
    /// </summary>
    /// <param name="_itemId">
    /// A string value that holds an item ID.
    /// </param>
    /// <param name="_reqPlanIdSched">
    /// A string value that holds a master scheduling plan ID.
    /// </param>
    /// <returns>
    /// A <c>ReqCalcScheduleItemExplodePO</c> object.
    /// </returns>
    public static ReqCalcScheduleItemExplodePO newItemId(
        ItemId          _itemId,
        ReqPlanIdSched  _reqPlanIdSched)
    {
        ReqCalcScheduleItemExplodePO reqCalcScheduleItemExplodePO  = ReqCalcScheduleItemExplodePO::construct();

        reqCalcScheduleItemExplodePO.getLast();
        reqCalcScheduleItemExplodePO.parmItemId(_itemId);

        reqCalcScheduleItemExplodePO.parmReqPlanId(_reqPlanIdSched);
        reqCalcScheduleItemExplodePO.parmReqCalcUpdate(ReqCalcUpdate::NetChangeMinimized);
        reqCalcScheduleItemExplodePO.parmAutoReserveCoverage(false);

        return reqCalcScheduleItemExplodePO;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>