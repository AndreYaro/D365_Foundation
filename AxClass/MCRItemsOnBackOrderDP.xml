<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRItemsOnBackOrderDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRItemsOnBackorder</c> class is the report data provider class that supports the
/// <c>MCRItemsOnBackorder</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(MCRItemsOnBackOrder)),
    SRSReportParameterAttribute(classstr(MCRItemsOnBackOrderContract))
]
public class MCRItemsOnBackOrderDP extends SRSReportDataProviderBase
{
    const int               secondsInDay = 86400;
    TmpMCRItemOnBackOrder   tmpMCRItemsOnBackOrder;
    SalesTable              salesTable;
    SalesLine               salesLine;
    InventTrans             inventTrans;
    InventDim               inventDim;
    ItemId                  itemId;
    MCRSalesTableShipping   mcrSalesTableShipping;
    boolean                 expeditedOrder;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpMCRItemOnBackOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>TmpMCRItemOnBackOrder</c> buffer.
    /// </summary>
    /// <returns>
    /// The <c>TmpMCRItemOnBackOrder</c> buffer.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(TmpMCRItemOnBackOrder))
    ]
    public TmpMCRItemOnBackOrder getTmpMCRItemOnBackOrder()
    {
        select  tmpMCRItemsOnBackOrder;

        return  tmpMCRItemsOnBackOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertItemsOnBackOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>TmpMCRItemsOnBackOrder</c> record.
    /// </summary>
    private void insertItemsOnBackOrder()
    {
        tmpMCRItemsOnBackOrder.SalesLineRecId = salesLine.RecId;
        tmpMCRItemsOnBackOrder.SalesId        = salesLine.SalesId;
        tmpMCRItemsOnBackOrder.Itemid         = inventTrans.ItemId;
        tmpMCRItemsOnBackOrder.ItemName       = inventTrans.itemName();
        tmpMCRItemsOnBackOrder.Amount         = salesLine.SalesPrice;
        tmpMCRItemsOnBackOrder.Qty            = inventTrans.Qty;
        tmpMCRItemsOnBackOrder.ConfigId       = inventDim.configId;
        tmpMCRItemsOnBackOrder.InventSizeId   = inventDim.InventSizeId;
        tmpMCRItemsOnBackOrder.InventColorId  = inventDim.InventColorId;
        tmpMCRItemsOnBackOrder.DateExpected   = inventTrans.DateExpected;
        tmpMCRItemsOnBackOrder.CreatedDate    = DateTimeUtil::date(
                                                                DateTimeUtil::applyTimeZoneOffset(salesTable.CreatedDateTime,
                                                                DateTimeUtil::getUserPreferredTimeZone()));
        tmpMCRItemsOnBackOrder.MCRExpedite   = SalesTable::find(salesLine.SalesId).mcrSalesTableShipping().Expedite;

        tmpMCRItemsOnBackOrder.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        Query                       query;
        QueryRun                    queryRun;
        MCRBackorderNumDays         backorderDays;
        MCRItemsOnBackOrderContract contract;

        query = this.parmQuery();
        queryRun = new QueryRun(query);

        backorderDays = MCROrderParameters::find().BackorderDays;
        contract = this.parmDataContract() as MCRItemsOnBackOrderContract;

        utcdatetime toDateTime = DateTimeUtil::newDateTime(contract.parmToDate(), secondsInDay - 1, DateTimeUtil::getUserPreferredTimeZone());
        utcdatetime fromDateTime = DateTimeUtil::newDateTime(contract.parmFromDate(), 0, DateTimeUtil::getUserPreferredTimeZone());

        if (contract.parmFromDate() != dateNull()
            || contract.parmToDate() != dateNull())
        {
            QueryBuildDataSource salesTableDS = queryRun.query().dataSourceTable(tableNum(SalesTable));
            salesTableDS.addRange(fieldNum(SalesTable, CreatedDateTime))
                .value(SysQuery::range(fromDateTime, toDateTime));
        }

        date backOrderDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) - backorderDays;
        date effectiveBackOrderDate = backOrderDate;

        if (contract.parmExpectedToDate() != dateNull())
        {
            effectiveBackOrderDate = backOrderDate < contract.parmExpectedToDate()? backOrderDate : contract.parmExpectedToDate();
        }

        QueryBuildDataSource inventTransDs     = queryRun.query().dataSourceTable(tableNum(InventTrans));
        inventTransDs.addRange(fieldNum(InventTrans, DateExpected))
            .value(SysQuery::range(dateNull(), effectiveBackOrderDate));

        expeditedOrder = contract.parmExpeditedOrder();

        while (queryRun.next())
        {
            salesLine               = queryRun.get(tableNum(SalesLine));
            inventTrans             = queryRun.get(tableNum(InventTrans));
            inventDim               = queryRun.get(tableNum(InventDim));
            salesTable              = queryRun.get(tableNum(SalesTable));
            mcrSalesTableShipping   = queryRun.get(tableNum(MCRSalesTableShipping));

            if (!expeditedOrder || mcrSalesTableShipping.Expedite != '')
            {
                this.insertItemsOnBackOrder();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>