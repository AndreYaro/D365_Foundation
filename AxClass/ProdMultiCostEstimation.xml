<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdMultiCostEstimation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdMultiCostEstimation</c> class shows the user dialog box for the estimation of production
/// orders.
/// </summary>
/// <remarks>
/// Several production orders can be selected in the user dialog box. Each production order will be
/// estimated by using the <see cref="T:ProdUpdCostEstimation" />.
/// </remarks>
class ProdMultiCostEstimation extends ProdMulti implements BatchRetryable
{
    // Packed
    ProdParmCostEstimation    standardParmCostEstimation;

    #DEFINE.CurrentVersion(6)
    #LOCALMACRO.CurrentList
        standardParmCostEstimation
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the class is shown in the list of batch journal types.
    /// </summary>
    /// <returns>
    /// true if the class is shown in the list of batch journal types; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A class that can be used in a batch journal is a class for which the same parameters can repeatedly
    /// be used. The dialog box can be shown and the parameters can be changed in all applicable classes,
    /// but parameters of some classes might build on data that is only valid for a short time. Running a
    /// class two times with the same parameters is not always possible.If the <see
    /// cref="M:RunBaseBatch.canGoBatch" /> returns a value of false, this method will have no effect.
    /// </remarks>
    boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    boolean checkBuffer(Common _prodTable)
    {
        ProdTable prodTable = _prodTable as ProdTable;
        Common anyBuffer;

        return !ProdParmCostEstimation::exist(parmId,prodTable.ProdId) && prodTable.status().runCostEstimation(anyBuffer,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables you to perform any cleanup that is required after a dialog box has been canceled.
    /// </summary>
    /// <remarks>
    ///    Override this method if any cleanup is necessary after a dialog box has been canceled.
    /// </remarks>
    void cleanupDialog()
    {
        super();

        ProdParmCostEstimation::deleteParameters(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer defaultParmBuffer()
    {
        ProdParmCostEstimation  prodParmCostEstimation;

        return prodParmCostEstimation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the form that is provided with a user interface to specify the parameters
    ///    that are used for the update of production.
    /// </summary>
    /// <returns>
    ///    The name of the form.
    /// </returns>
    formName formName()
    {
        return formstr(ProdParmCostEstimation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer _prodParmCostEstimation)
    {
        ProdParmCostEstimation prodParmCostEstimation = _prodParmCostEstimation;
        ProdParmCostEstimation saveProdParmCostEstimation;
        saveProdParmCostEstimation.data(prodParmCostEstimation);
        prodParmCostEstimation.data(standardParmCostEstimation);

        prodParmCostEstimation.ParmId               = saveProdParmCostEstimation.ParmId;
        prodParmCostEstimation.RecId                = saveProdParmCostEstimation.RecId;
        prodParmCostEstimation.LineNum              = saveProdParmCostEstimation.LineNum;
        prodParmCostEstimation.ProdId               = saveProdParmCostEstimation.ProdId;
        prodParmCostEstimation.RefProduction        = saveProdParmCostEstimation.RefProduction;
        prodParmCostEstimation.JobStatus            = saveProdParmCostEstimation.JobStatus;
        prodParmCostEstimation.ExecutedDateTime     = saveProdParmCostEstimation.ExecutedDateTime;

        prodParmCostEstimation.AutoUpdate           = autoUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(
        Common               _prodTable,
        ParmBuffer  _prodParmCostEstimation
        )
    {
        ProdTable prodTable = _prodTable as ProdTable;
        ProdParmCostEstimation prodParmCostEstimation = _prodParmCostEstimation;

        super(_prodTable,_prodParmCostEstimation);

        prodParmCostEstimation.ProdId = prodTable.ProdId;
        prodParmCostEstimation.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    LineNum lastLineNum()
    {
        return ProdParmCostEstimation::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>ProdMultiCostEstimation</c> class.
    /// </summary>
    /// <returns>
    ///    A container that contains the current instance of the <c>ProdMultiCostEstimation</c> class.
    /// </returns>
    /// <remarks>
    ///    All variables that are required to re-initialize the class after constructing it must be packed.
    ///    Normally, a macro in the class declaration is used to list the variables to pack. Another macro
    ///    holds a version number, which refers to the version of the variable list. When a new variable is
    ///    introduced, follow these steps:
    ///    <list type="number">
    ///       <item>
    ///          <description>Increment the version number that is in the version macro.</description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Copy the current list to the <c>unpack</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>Add the new variable to the bottom of the list.</description>
    ///       </item>
    ///       <item>
    ///          <description>Recompile the class.</description>
    ///       </item>
    ///    </list>
    ///     When the
    ///    <c>
    ///       isSwappingPrompt
    ///    </c>
    ///     method returns a value of true, you may have to pack some prompt-related variables.
    /// </remarks>
    container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
    ParmBuffer parmStandardParm(ParmBuffer  _standard  = standardParmCostEstimation)
    {
        standardParmCostEstimation = _standard;

        return standardParmCostEstimation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        return new QueryRun(querystr(ProdMultiSelectCostEstimation)).query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        using (var m = ProdInstrumentationSegmentFactory::create(ProdInstrumentationActivities::MultiCostEstimation))
        {
            #OCCRetryCount
            // Current parm record

            super();

            ProdMultiPurchLateSubmissionToWorkflow subcontractingHelper = ProdMultiPurchLateSubmissionToWorkflow::construct();
            subcontractingHelper.setLateSubmissionOfPurchaseOrdersToWorkflow(this.setProduction());

            ProdPurch prodPurch = ProdPurch::newProd();
            ProdParmCostEstimation curParmCostEstimation = this.setProduction();

            boolean enableConext = BOMCalcProdLineUseProdTableRefLevelToCalcFlight::instance().isEnabled();

            using (var context = enableConext ? BOMCalcProdLineFromProdEstimationContext::construct() : null)
            {
                while (curParmCostEstimation)
                {
                    try
                    {
                        this.estimateProductionOrder(curParmCostEstimation, prodPurch);
                    }
                    catch (Exception::Deadlock)
                    {
                        retry;
                    }
                    catch (Exception::UpdateConflict)
                    {
                        if (appl.ttsLevel() == 0)
                        {
                            if (xSession::currentRetryCount() >= #RetryNum)
                            {
                                throw Exception::UpdateConflictNotRecovered;
                            }
                            else
                            {
                                retry;
                            }
                        }
                        else
                        {
                            throw Exception::UpdateConflict;
                        }
                    }
                    catch (Exception::Error)
                    {
                        exceptionTextFallThrough();
                    }
                    next curParmCostEstimation;
                }
            }

            subcontractingHelper.performLateSubmissionOfPurchaseOrdersToWorkflow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimateProductionOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs cost estimation on a single production order.
    /// </summary>
    /// <param name = "_prodParmCostEstimation">Cost estimation parameters.</param>
    /// <param name = "_prodPurch">A linked purchase order creation helper.</param>
    [Replaceable]
    protected void estimateProductionOrder(ProdParmCostEstimation _prodParmCostEstimation, ProdPurch _prodPurch)
    {
        if (WHSProdTable::find(_prodParmCostEstimation.ProdId).Stopped)
        {
            error(strFmt("@WAX1701", _prodParmCostEstimation.ProdId));
        }
        else
        {
            ProdTable prodTable = this.initProdTable(_prodParmCostEstimation.ProdId);
            prodTable.status().runCostEstimation(_prodParmCostEstimation, false, _prodPurch, this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="_packedClass" /> parameter value to an instance of the
    ///    <c>ProdMultiCostEstimation</c> class.
    /// </summary>
    /// <param name="_packedClass">
    ///    The container from which to deserialize the instance.
    /// </param>
    /// <returns>
    ///    true if deserialization was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When the <c>isSwappingPrompt</c> method returns a value of true, it may be necessary to unpack some
    ///    prompt-related variables also.
    /// </remarks>
    boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version     = conpeek(_packedClass,1);
        container   base;
        boolean     dummy;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,base] = _packedClass;
                ret = super(base);
                break;
            case 4:
                [version,
                 parmId,
                 dummy,
                 standardParmCostEstimation.ProfitSet,
                 standardParmCostEstimation.References,
                 standardParmCostEstimation.EndJob
                ]    = _packedClass;
                ret = true;
                break;
            default :
                this.initParmDefault();
                ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdMultiCostEstimation construct(Args _args)
    {
        ProdMultiCostEstimation prodMultiCostEstimation = new ProdMultiCostEstimation();

        return prodMultiCostEstimation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS4398" + ' - ' + "@SYS16377";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        XDSServices xdsServices = new XDSServices();
        #DirParty

        if (_args.parmEnum() == RunChoose::Run)
        {
            ProdMultiCostEstimation prodMultiCostEstimation = ProdMultiCostEstimation::construct(_args);

            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextByFormAndAction(prodMultiCostEstimation.formName(), _args.menuItemName()))
            {
                RunBaseMultiParm::initFromForm(prodMultiCostEstimation,_args);

                if (! prodMultiCostEstimation.prompt())
                {
                    return;
                }

                // Disable the DirPartyTable XDS policies by passing a non blank context string
                xdsServices.setXDSContext(0, #SystemUser);
                prodMultiCostEstimation.runOnServer();
                xdsServices.setXDSContext(0, '');
                prodMultiCostEstimation.refreshCaller(_args);
            }
        }
        else
        {
            RunBaseMultiParm::runSpecial(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>