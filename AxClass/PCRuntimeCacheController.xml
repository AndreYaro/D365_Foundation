<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimeCacheController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for interacting with the runtime xml cache.
/// </summary>
public class PCRuntimeCacheController
{
    private PCInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        logger = PCInstrumentationLogger::createLogger(classStr(PCRuntimeCacheController));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the key used for identifying the cached entry
    /// </summary>
    /// <param name="_enumDefinitionId">
    /// Identifier of the enum
    /// </param>
    /// <param name="_dataAreaId">
    /// Data area for which the data is cached
    /// </param>
    /// <param name="_languageId">
    /// Language identifier for the data
    /// </param>
    /// <returns>
    /// Cache key
    /// </returns>
    private container buildCacheKey(str _enumDefinitionId, str _dataAreaId, str _languageId)
    {
        return [_dataAreaId, xLanguage::languageID2LCID(_languageId), _enumDefinitionId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an entry in the runtime xml cache.
    /// </summary>
    /// <param name="_referenceTableId">
    /// A table ID.
    /// </param>
    /// <param name="_referenceId">
    /// A record ID.
    /// </param>
    /// <param name="_runtimeXml">
    /// Runtime xml for an element in a product configuration model.
    /// </param>
    /// <param name="_priceModelId">
    /// A reference ID to a price model.
    /// </param>
    /// <param name="_currencyCode">
    /// A currency code.
    /// </param>
    public void createEntry(
        TableId         _referenceTableId,
        RefRecId        _referenceId,
        PCRuntimeXml            _runtimeXml,
        PCPriceModelRefRecId    _priceModelId = 0,
        CurrencyCode            _currencyCode = '')
    {
        PCRuntimeCacheXml runtimeCacheXml;

        if (this.isCacheDisabled())
        {
            return;
        }

        runtimeCacheXml.ReferenceTableId    = _referenceTableId;
        runtimeCacheXml.ReferenceId         = _referenceId;
        runtimeCacheXml.RuntimeXml          = _runtimeXml;
        runtimeCacheXml.LanguageId          = infolog.language();
        runtimeCacheXml.PriceModel                  = _priceModelId;
        runtimeCacheXml.PriceModelCurrencyCode      = _currencyCode;

        runtimeCacheXml.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createObjectEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an object entry in the cache.
    /// </summary>
    /// <param name="_enumDefinitionId">
    /// A cache key entry.
    /// </param>
    /// <param name="_packedObject">
    /// A packed object.
    /// </param>
    public void createObjectEntry(
        str         _enumDefinitionId,
        container   _packedObject)
    {
        container cacheKey = this.buildCacheKey(_enumDefinitionId, curext(), infolog.language());

        if (this.isCacheDisabled())
        {
            return;
        }

        SysExtensionCache::insertValue(SysExtensionCacheScope::Extension, cacheKey, _packedObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRuntimePackedClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a runtime packed class from the cache if one exists.
    /// </summary>
    /// <param name="_enumDefinitionId">
    /// A cache key.
    /// </param>
    /// <returns>
    /// A cached class instance or null.
    /// </returns>
    public container getRuntimePackedClass(str _enumDefinitionId)
    {
        container cacheKey = this.buildCacheKey(_enumDefinitionId, curext(), infolog.language());

        if (!this.isCacheDisabled() && SysExtensionCache::isCached(SysExtensionCacheScope::Extension, cacheKey))
        {
            return SysExtensionCache::getValue(SysExtensionCacheScope::Extension, cacheKey);
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRuntimeXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the runtime cached xml if any exists.
    /// </summary>
    /// <param name="_referenceTableId">
    /// A target table ID.
    /// </param>
    /// <param name="_referenceId">
    /// A reference ID.
    /// </param>
    /// <param name="_priceModelId">
    /// A reference ID to a price model.
    /// </param>
    /// <param name="_currencyCode">
    /// A currency code.
    /// </param>
    /// <returns>
    /// A cached runtime xml string or the empty string.
    /// </returns>
    public PCRuntimeXml getRuntimeXml(
        TableId         _referenceTableId,
        PCReferenceId           _referenceId,
        PcPriceModelRefRecId    _priceModelId = 0,
        CurrencyCode            _currencyCode = '')
    {
        PCRuntimeCacheXml runtimeCacheXml;

        if (this.isCacheDisabled())
        {
            return '';
        }

        using (var activityContext = logger.preRuntime().getCachedXml())
        {
            select firstOnly RuntimeXml from runtimeCacheXml
            where   runtimeCacheXml.ReferenceTableId    == _referenceTableId
            &&      runtimeCacheXml.ReferenceId         == _referenceId
            &&      runtimeCacheXml.LanguageId              == infolog.language()
            &&      runtimeCacheXml.PriceModel              == _priceModelId
            &&      runtimeCacheXml.PriceModelCurrencyCode  == _currencyCode;

            return runtimeCacheXml.RuntimeXml;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCacheDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if caching is disabled.
    /// </summary>
    /// <returns>
    /// true if caching is disabled; false, otherwise.
    /// </returns>
    private boolean isCacheDisabled()
    {
        return EcoResProductParameters::find().PCRuntimeCacheEnable == PCRuntimeCacheEnable::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCacheEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a cache entry in all legal entities.
    /// </summary>
    /// <param name="_referenceTableId">
    /// A table ID.
    /// </param>
    /// <param name="_referenceId">
    /// A record ID.
    /// </param>
    public void removeCacheEntry(
        TableId         _referenceTableId,
        RefRecId        _referenceId)
    {
        PCRuntimeCacheXml   runtimeCacheXml;

        ttsBegin;

        while select crossCompany DataAreaId from runtimeCacheXml group by DataAreaId
            where runtimeCacheXml.ReferenceTableId  == _referenceTableId
            &&    runtimeCacheXml.ReferenceId       == _referenceId
        {
            changecompany(runtimeCacheXml.DataAreaId)
            {
                PCRuntimeCacheXml   runtimeCacheXmlPerCompany;

                delete_from runtimeCacheXmlPerCompany
                    where runtimeCacheXmlPerCompany.ReferenceTableId  == _referenceTableId
                    &&    runtimeCacheXmlPerCompany.ReferenceId       == _referenceId;
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeObjectEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes an object entry in the cache.
    /// </summary>
    /// <param name="_enumDefinitionId">
    /// A cache key entry.
    /// </param>
    public void removeObjectEntry(str _enumDefinitionId)
    {
        DataArea        dataArea;
        LanguageTable   languageTable;
        container       cacheKey;

        while select crossCompany id from dataArea where !dataArea.isVirtual
        {
            changeCompany(dataArea.id)
            {
                while select LanguageId from languageTable where languageTable.LabelFile
                {
                    cacheKey = this.buildCacheKey(_enumDefinitionId, curext(), languageTable.LanguageId);
                    SysExtensionCache::removeValue(SysExtensionCacheScope::Extension, cacheKey);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCRuntimeCacheController construct()
    {
        return new PCRuntimeCacheController();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>