<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionLookupEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the ApplicationSuite module events for the HcmPositionLookup class.
/// </summary>
class HcmPositionLookupEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>HcmPositionLookup_updatingPositionLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the ranges of the query to match the selected parameters in the <c>HcmPositionLookup</c>
    ///    object.
    /// </summary>
    /// <param name="_query">
    /// The query to be modified based on parameters.
    /// </param>
    /// <param name="_restrictToLegalEntityRecId">
    /// The record id of the  <c>CompanyInfo</c> to validate.
    /// </param>
    /// <param name="_restrictToPaycycleRecId">
    /// The record id of the <c>PayrollPayCycle</c> to validate.
    /// </param>
    /// <param name="_result">The value of <c>EventHandlerResult</c>
    /// </param>
    [SubscribesTo(classStr(HcmPositionLookup), delegateStr(HcmPositionLookup, updatingPositionLookupQuery))]
    public static void HcmPositionLookup_updatingPositionLookupQuery(Query _query,
        RefRecId _restrictLegalEntity,
        PayrollPayCycleRecId _restrictToPayCycleRecId,
        EventHandlerResult _result)
    {
       QueryBuildDataSource    qbdsPayrollPositionDetails;
       QueryBuildDataSource    qbdsPosition;
       QueryBuildRange         legalEntityRange;
       QueryBuildRange         payCycleRange;

       qbdsPosition = _query.dataSourceTable(tableNum(HcmPosition));

        if (_restrictLegalEntity != 0 || _restrictToPayCycleRecId != 0)
        {
            qbdsPayrollPositionDetails = _query.dataSourceTable(tableNum(PayrollPositionDetails));

            if (!qbdsPayrollPositionDetails)
            {
                // The PayrollPositionDetails data source does not exist on the query, so it must be added
                qbdsPayrollPositionDetails = qbdsPosition.addDataSource(tableNum(PayrollPositionDetails));
                qbdsPayrollPositionDetails.joinMode(JoinMode::InnerJoin);
                qbdsPayrollPositionDetails.relations(true);
            }
        }

        if (_restrictLegalEntity != 0 )
        {
            // Check whether the legalEntityRange already exists on the query
            legalEntityRange = qbdsPayrollPositionDetails.findRange(fieldNum(PayrollPositionDetails, PaidByLegalEntity));

            if (!legalEntityRange)
            {
                // The legalEntityRange range does not exist on the query, so it must be added
                legalEntityRange = qbdsPayrollPositionDetails.addRange(fieldNum(PayrollPositionDetails, PaidByLegalEntity));
            }

            legalEntityRange.value(queryValue(_restrictLegalEntity));
        }

        if (_restrictToPayCycleRecId != 0 )
        {
            // Check whether the payCycleRange already exists on the query
            payCycleRange = qbdsPayrollPositionDetails.findRange(fieldNum(PayrollPositionDetails, PayCycle));

            if (!payCycleRange)
            {
                // The payCycleRange range does not exist on the query, so it must be added
                payCycleRange = qbdsPayrollPositionDetails.addRange(fieldNum(PayrollPositionDetails, PayCycle));
            }

            payCycleRange.value(queryValue(_restrictToPayCycleRecId));
        }
        _result.result(_query);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>