<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostVarianceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventStdCostVarianceController</c> class is the controller class for the
///    <c>InventStdCostVariance</c> report.
/// </summary>
class InventStdCostVarianceController extends SrsReportRunController implements BatchRetryable
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00006, funcName());

            Query query = this.getFirstQuery();
            QueryBuildDatasource queryBuildDatasource = query.dataSourceTable(tableNum(InventTrans));

            QueryBuildRange queryBuildRange = queryBuildDatasource.findRange(fieldNum(InventTrans, StatusIssue));
            queryBuildRange.status(RangeStatus::Open);

            queryBuildRange         = queryBuildDatasource.findRange(fieldNum(InventTrans, StatusReceipt));
            queryBuildRange.status(RangeStatus::Open);

            queryBuildRange         = queryBuildDatasource.findRange(fieldNum(InventTrans, Qty));
            queryBuildRange.value('!= 0');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventStdCostVarianceController construct()
    {
        return new InventStdCostVarianceController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventStdCostVarianceController controller  = new InventStdCostVarianceController();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00111, funcName());

            controller.parmReportName(ssrsReportStr(InventStdCostVarianceSecCur, Report));
        }
        else
        {
            controller.parmReportName(ssrsReportStr(InventStdCostVariance, Report));
        }

        controller.parmDialogCaption("@SYS58836");
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>