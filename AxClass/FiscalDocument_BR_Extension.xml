<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocument_BR_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class FiscalDocument_BR_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeComplemented</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a complementary invoice can be created to complement this fiscal document.
    /// </summary>
    /// <returns>
    /// true if a complementary invoice can be created for this document; false otherwise.
    /// </returns>
    /// <remarks>
    /// This check is valid regardless of the nature of the complementary invoice, i.e.,
    /// it is valid for both sales and purchase complementary invoices.
    /// </remarks>
    public static boolean canBeComplemented(FiscalDocument_BR _fiscalDoc)
    {
        if (_fiscalDoc.Status != FiscalDocumentStatus_BR::Approved)
        {
            return false;
        }

        // Complementary and tax fiscal documents cannot be complemented
        if (_fiscalDoc.Purpose != FiscalDocumentPurpose_BR::Regular && _fiscalDoc.Purpose != FiscalDocumentPurpose_BR::Return)
        {
            return false;
        }

        switch (_fiscalDoc.RefTableId)
        {
            case tableNum(CustPackingSlipJour) :
            case tableNum(InventTransferJour) :

                return false;
        }

        if (_fiscalDoc.isRetailConsumerDocument())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRefRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record that represents the source document that originated the current fiscal document.
    /// </summary>
    /// <returns>
    /// The referenced table buffer of the referenced record, if any; otherwise, an empty record.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The method was called with a not supported referenced table.
    /// </exception>
    public static Common findRefRecord(FiscalDocument_BR _fiscalDoc)
    {
        switch (_fiscalDoc.RefTableId)
        {
            case tablenum(CustInvoiceJour):
                return CustInvoiceJour::findRecId(_fiscalDoc.RefRecId);

            case tablenum(VendInvoiceJour):
                return VendInvoiceJour::findRecId(_fiscalDoc.RefRecId);

            case tablenum(ProjInvoiceJour):
                return ProjInvoiceJour::findRecId(_fiscalDoc.RefRecId);

            case tablenum(CustPackingSlipJour):
                return CustPackingSlipJour::findRecId(_fiscalDoc.RefRecId);

            case tableNum(SalesComplementaryInvoiceHeader):
                return SalesComplementaryInvoiceHeader::find(_fiscalDoc.RefRecId);

            case tableNum(PurchComplementaryInvoiceHeader):
                return PurchComplementaryInvoiceHeader::find(_fiscalDoc.RefRecId);

            case tableNum(TaxFiscalDocument_BR):
                return TaxFiscalDocument_BR::findRecId(_fiscalDoc.RefRecId);

            default : throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTextToList</Name>
				<Source><![CDATA[
    private static FiscalDocumentTextListParmData_BR addTextToList(DocuRef _docuRef, DocuRefExt_BR _docuRefExt, FiscalDocumentTextListParmData_BR _fiscalDocumentTextListParmData)
    {
        FiscalDocumentTextParmData_BR fiscalDocumentTextParmData = FiscalDocumentTextParmData_BR::construct();
        fiscalDocumentTextParmData.parmFiscalInformation(_docuRefExt.FiscalInformation);
        fiscalDocumentTextParmData.parmName(_docuRef.Name);
        fiscalDocumentTextParmData.parmNotes(_docuRef.Notes);
        fiscalDocumentTextParmData.parmRestriction(_docuRef.Restriction);
        fiscalDocumentTextParmData.parmTextID(_docuRefExt.TextID);
        fiscalDocumentTextParmData.parmType(_docuRefExt.Type);

        _fiscalDocumentTextListParmData.add(fiscalDocumentTextParmData);

        FiscalDocumentReferencedProcess_BR referencedProccess;

        while select referencedProccess
            where referencedProccess.DocuRefExt_BR == _docuRefExt.RecId
        {
            FiscalDocumentRefProcessParmData_BR fiscalDocumentRefProcessParmData = new FiscalDocumentRefProcessParmData_BR();

            fiscalDocumentRefProcessParmData.parmAgency(referencedProccess.Agency);
            fiscalDocumentRefProcessParmData.parmProcessNumber(referencedProccess.ProcessNumber);
            fiscalDocumentRefProcessParmData.parmConcessionaryActType(referencedProccess.ConcessionaryActType);

            fiscalDocumentTextParmData.addFiscalRefProcess(fiscalDocumentRefProcessParmData);
        }

        return _fiscalDocumentTextListParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdditionalInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves additional information texts associated with the fiscal document in context.
    /// </summary>
    /// <returns>
    ///     An instance of <c>FiscalDocumentTextListParmData_BR</c> where each entry represents a diferent additional information text retrieved from the fiscal document header.
    /// </returns>
    /// <remarks>
    ///     Only fiscal document texts not marked as Fiscal Information are retrieved by this method as they represent additional information.
    ///     This method also eliminates any duplicates that might exists among the retrieved additional information texts.
    /// </remarks>
    public static FiscalDocumentTextListParmData_BR getAdditionalInformation(FiscalDocument_BR _fiscalDoc)
    {
        DocuRef                             docuRef;
        DocuRefExt_BR                       docuRefExt;
        FiscalDocumentTextParmData_BR       fiscalDocumentTextParmData;
        FiscalDocumentTextListParmData_BR   fiscalDocumentTextListParmData = FiscalDocumentTextListParmData_BR::construct();

        // Retrieves additional information texts associated with the header
        while select Name, Notes, Restriction from docuRef
            where docuRef.RefTableId == _fiscalDoc.TableId
               && docuRef.RefRecId == _fiscalDoc.RecId
               && docuRef.RefCompanyId == _fiscalDoc.dataAreaId
               && docuRef.Restriction == DocuRestriction::External
            join FiscalInformation, TextID, Type from docuRefExt
                where docuRefExt.DocuRef == docuRef.RecId
                   && docuRefExt.FiscalInformation == NoYes::No
        {
            fiscalDocumentTextParmData = FiscalDocumentTextParmData_BR::construct();
            fiscalDocumentTextParmData.parmFiscalInformation(docuRefExt.FiscalInformation);
            fiscalDocumentTextParmData.parmName(docuRef.Name);
            fiscalDocumentTextParmData.parmNotes(docuRef.Notes);
            fiscalDocumentTextParmData.parmRestriction(docuRef.Restriction);
            fiscalDocumentTextParmData.parmTextID(docuRefExt.TextID);
            fiscalDocumentTextParmData.parmType(docuRefExt.Type);

            fiscalDocumentTextListParmData.add(fiscalDocumentTextParmData);
        }

        return fiscalDocumentTextListParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdditionalInformationAsString</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves additional information texts associated with the fiscal document in context.
    /// </summary>
    /// <param name="_separator">
    ///     A string to be used as separator for each text.
    /// </param>
    /// <returns>
    ///     A string containing the additional information texts contatenated and separated from each other by the given separator character.
    /// </returns>
    /// <remarks>
    ///     Only fiscal document texts not marked as Fiscal Information are retrieved by this method as they represent additional information.
    ///     This method also eliminates any duplicates that might exists among the retrieved additional information texts.
    /// </remarks>
    public static str getAdditionalInformationAsString(FiscalDocument_BR _fiscalDoc, str _separator = ' ')
    {
        FiscalDocumentTextListParmData_BR fiscalDocumentTexts;

        fiscalDocumentTexts = _fiscalDoc.getAdditionalInformation();

        return fiscalDocumentTexts.getAlltextsAsString(_separator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllLegalTexts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves legal texts associated with the fiscal document in context and its lines.
    /// </summary>
    /// <returns>
    ///     An instance of <c>FiscalDocumentTextListParmData_BR</c> where each entry represents a diferent legal text retrieved from the fiscal document header and its lines.
    /// </returns>
    /// <remarks>
    ///     Only fiscal document texts marked as Fiscal Information are retrieved by this method as they represent Legal Texts.
    ///     This method also eliminates any duplicates that might exists among the retrieved legal texts.
    /// </remarks>
    public static FiscalDocumentTextListParmData_BR getAllLegalTexts(FiscalDocument_BR _fiscalDoc)
    {
        DocuRef                             docuRef;
        DocuRefExt_BR                       docuRefExt;
        FiscalDocumentLine_BR               fiscalDocumentLine;
        FiscalDocumentTextListParmData_BR   fiscalDocumentTextListParmData = FiscalDocumentTextListParmData_BR::construct();

        // Retrieves texts associated with the header
        while select Name, Notes, Restriction  from docuRef
            where docuRef.RefTableId == _fiscalDoc.TableId
               && docuRef.RefRecId == _fiscalDoc.RecId
               && docuRef.RefCompanyId == _fiscalDoc.dataAreaId
            join FiscalInformation, TextId, Type from docuRefExt
                where docuRefExt.DocuRef == docuRef.RecId
                   && docuRefExt.FiscalInformation == NoYes::Yes
        {
            fiscalDocumentTextListParmData = FiscalDocument_BR_Extension::addTextToList(docuRef, docuRefExt, fiscalDocumentTextListParmData);
        }

        // Retrieves legal texts from lines
        while select Name, Notes, Restriction from docuRef
            join * from docuRefExt
                where docuRefExt.DocuRef == docuRef.RecId
                   && docuRefExt.FiscalInformation == NoYes::Yes
            exists join fiscalDocumentLine
            where docuRef.RefTableId == fiscalDocumentLine.TableId
               && docuRef.RefRecId == fiscalDocumentLine.RecId
               && docuRef.RefCompanyId == fiscalDocumentLine.dataAreaId
               && fiscalDocumentLine.FiscalDocument  == _fiscalDoc.RecId
        {
            fiscalDocumentTextListParmData = FiscalDocument_BR_Extension::addTextToList(docuRef, docuRefExt, fiscalDocumentTextListParmData);
        }

        return fiscalDocumentTextListParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalTexts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves legal texts associated with the fiscal document in context and its lines.
    /// </summary>
    /// <param name="_docuRestriction">
    ///     A value in <c>DocuRestriction</c> base enum indicating the visibility restrictions for the fiscal document texts being retrieved.
    /// </param>
    /// <returns>
    ///     An instance of <c>FiscalDocumentTextListParmData_BR</c> where each entry represents a diferent legal text retrieved from the fiscal document header and its lines.
    /// </returns>
    /// <remarks>
    ///     Only fiscal document texts marked as Fiscal Information are retrieved by this method as they represent Legal Texts.
    ///     This method also eliminates any duplicates that might exists among the retrieved legal texts.
    /// </remarks>
    public static FiscalDocumentTextListParmData_BR getLegalTexts(FiscalDocument_BR _fiscalDoc, DocuRestriction _docuRestriction)
    {
        DocuRef                             docuRef;
        DocuRefExt_BR                       docuRefExt;
        FiscalDocumentLine_BR               fiscalDocumentLine;
        FiscalDocumentTextListParmData_BR   fiscalDocumentTextListParmData = FiscalDocumentTextListParmData_BR::construct();

        // Retrieves texts associated with the header
        while select Name, Notes, Restriction  from docuRef
            where docuRef.RefTableId == _fiscalDoc.TableId
               && docuRef.RefRecId == _fiscalDoc.RecId
               && docuRef.RefCompanyId == _fiscalDoc.dataAreaId
               && docuRef.Restriction == _docuRestriction
            join FiscalInformation, TextId, Type from docuRefExt
                where docuRefExt.DocuRef == docuRef.RecId
                   && docuRefExt.FiscalInformation == NoYes::Yes
        {
            fiscalDocumentTextListParmData = FiscalDocument_BR_Extension::addTextToList(docuRef, docuRefExt, fiscalDocumentTextListParmData);
        }

        // Retrieves legal texts from lines
        while select Name, Notes, Restriction from docuRef
            where docuRef.Restriction == _docuRestriction
            join * from docuRefExt
                where docuRefExt.DocuRef == docuRef.RecId
                   && docuRefExt.FiscalInformation == NoYes::Yes
            exists join fiscalDocumentLine
            where docuRef.RefTableId == fiscalDocumentLine.TableId
               && docuRef.RefRecId == fiscalDocumentLine.RecId
               && docuRef.RefCompanyId == fiscalDocumentLine.dataAreaId
               && fiscalDocumentLine.FiscalDocument  == _fiscalDoc.RecId
        {
            fiscalDocumentTextListParmData = FiscalDocument_BR_Extension::addTextToList(docuRef, docuRefExt, fiscalDocumentTextListParmData);
        }

        return fiscalDocumentTextListParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalTextsAsString</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the contatenation of the legal texts associated with the fiscal document and its lines.
    /// </summary>
    /// <param name="_docuRestriction">
    ///     A value in <c>DocuRestriction</c> base enum indicating the visibility restrictions for the texts being retrieved.
    /// </param>
    /// <param name="_separator">
    ///     A string to be used as separator for each text.
    /// </param>
    /// <returns>
    ///     A string containing the fiscal document texts contatenated and separated from each other by the given separator character.
    /// </returns>
    public static str getLegalTextsAsString(FiscalDocument_BR _fiscalDoc, DocuRestriction _docuRestriction, str _separator = ' ')
    {
        FiscalDocumentTextListParmData_BR fiscalDocumentTexts;

        fiscalDocumentTexts = _fiscalDoc.getLegalTexts(_docuRestriction);

        return fiscalDocumentTexts.getAlltextsAsString(_separator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>DirPartyType</c> that represents the type of the fiscal document third party.
    /// </summary>
    /// <returns>
    ///     The <c>DirPartyType</c> representing the type of the fiscal document third party.
    /// </returns>
    public static DirPartyType thirdPartyType(FiscalDocument_BR _fiscalDoc)
    {
        DirPartyType dirPartyType = DirPartyType::None;

        switch (_fiscalDoc.FiscalDocumentAccountType)
        {
            case CustVendType_BR::Customer:
                dirPartyType = CustTable::find(_fiscalDoc.FiscalDocumentAccountNum).partyType();
                break;

            case CustVendType_BR::Vendor:
                dirPartyType = VendTable::find(_fiscalDoc.FiscalDocumentAccountNum).partyType();
                break;

            case CustVendType_BR::FiscalEstablishment:
                dirPartyType = DirPartyType::Organization;
                break;
        }

        return dirPartyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyEmail</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>Email</c> of the fiscal document third party.
    /// </summary>
    /// <returns>
    ///     The <c>Email</c> of the fiscal document third party.
    /// </returns>
    public static Email thirdPartyEmail(FiscalDocument_BR _fiscalDoc)
    {
        CustVendTable custVendTable;

        switch (_fiscalDoc.FiscalDocumentAccountType)
        {
            case CustVendType_BR::Customer:
                custVendTable = CustTable::find(_fiscalDoc.FiscalDocumentAccountNum);
                break;

            case CustVendType_BR::Vendor:
                custVendTable = VendTable::find(_fiscalDoc.FiscalDocumentAccountNum);
                break;
        }

        return custVendTable.email();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the appropriate report name to show an invoice.
    /// </summary>
    /// <returns>
    /// The name of SSRSReport.
    /// </returns>
    public static str getReportName(FiscalDocument_BR _fiscalDoc)
    {
        str reportName;

        if (_fiscalDoc.isElectronic())
        {
            reportname = ssrsReportStr(EFDocDANFE_BR, Report);
        }
        else if (_fiscalDoc.isElectronicConsumerFiscalDoc())
        {
            reportname = ssrsReportStr(EFDocDANFENfce_BR, Report);
        }
        else
        {
            if (EFDocumentCity_BR::findByFiscalDocumentRef(_fiscalDoc.RecId))
            {
                reportname = ssrsReportStr(RPS_BR, Report);
            }
            else
            {
                reportname = ssrsReportStr(FiscalDocument_BR, Report);
            }
        }

        return reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExternalLegalTextsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves external legal texts associated with the fiscal document in context and its lines.
    /// </summary>
    /// <param name = "_fiscaldocument"></param>
    /// <returns></returns>
    [ERTableName(tablestr(DocuRefExt_BR))]
    public static Query getExternalLegalTextsQuery(FiscalDocument_BR _fiscaldocument)
    {
        return FiscalDocument_BR_Extension::createDocuRefExtQuery(_fiscaldocument, DocuRestriction::External);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInternalLegalTextsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves internal legal texts associated with the fiscal document in context and its lines.
    /// </summary>
    /// <param name = "_fiscaldocument"></param>
    /// <returns></returns>
    [ERTableName(tablestr(DocuRefExt_BR))]
    public static Query getInternalLegalTextsQuery(FiscalDocument_BR _fiscaldocument)
    {
        return FiscalDocument_BR_Extension::createDocuRefExtQuery(_fiscaldocument, DocuRestriction::Internal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDocuRefExtQuery</Name>
				<Source><![CDATA[
    private static Query createDocuRefExtQuery(FiscalDocument_BR _fiscaldocument, DocuRestriction _restriction)
    {
        Query query = new Query();
        query.queryType(QueryType::Union);

        QueryBuildDataSource addDatasource(Query _query, str _dataSourceName)
        {
            var dataSource = query.addDataSource(tableNum(DocuRefExt_BR), _dataSourceName);
            dataSource.addRange(fieldNum(DocuRefExt_BR, FiscalInformation)).value(queryvalue(NoYes::Yes));

            var dataSourceRef = dataSource.addDataSource(tableNum(DocuRef));
            dataSourceRef.addRange(fieldNum(DocuRef, Restriction)).value(queryvalue(_restriction));
            dataSourceRef.relations(true);
            dataSourceRef.joinMode(JoinMode::ExistsJoin);

            return dataSourceRef;
        }

        var docuRef_ds = addDatasource(query, 'FiscaldocumentDocuRef');
        docuRef_ds.addRange(fieldNum(DocuRef, RefTableId)).value(queryvalue(_fiscaldocument.TableId));
        docuRef_ds.addRange(fieldNum(DocuRef, RefRecId)).value(queryvalue(_fiscaldocument.RecId));
        docuRef_ds.addRange(fieldNum(DocuRef, RefCompanyId)).value(queryvalue(_fiscaldocument.dataAreaId));

        var lineDocuRef_ds = addDatasource(query, 'FiscaldocumentLineDocuRef');
        var fiscaldocumentLineDS = lineDocuRef_ds.addDataSource(tableNum(FiscalDocumentLine_BR));
        fiscaldocumentLineDS.joinMode(JoinMode::ExistsJoin);
        fiscaldocumentLineDS.addLink(fieldNum(DocuRef, RefTableId), fieldNum(FiscalDocumentLine_BR, TableId));
        fiscaldocumentLineDS.addLink(fieldNum(DocuRef, RefRecId), fieldNum(FiscalDocumentLine_BR, RecId));
        fiscaldocumentLineDS.addLink(fieldNum(DocuRef, RefCompanyId), fieldNum(FiscalDocumentLine_BR, dataAreaId));
        fiscaldocumentLineDS.addRange(fieldNum(FiscalDocumentLine_BR, FiscalDocument)).value(queryvalue(_fiscaldocument.RecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromfiscalDocumentParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new fiscal document table record values from the representation of a fiscal document in memory.
    /// </summary>
    /// <param name = "fiscalDocumentParmData">The representation of a fiscal document in memory.</param>
    public static void initFromfiscalDocumentParmData(FiscalDocument_BR _fiscalDocument, FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        _fiscalDocument.initValue();

        _fiscalDocument.Version = FiscalDocumentVersion_BR::v1;
        _fiscalDocument.FinalUser = _fiscalDocumentParmData.parmFinalUser();
        _fiscalDocument.PresenceType = _fiscalDocumentParmData.parmPresenceType();
        _fiscalDocument.PaymentMethod = _fiscalDocumentParmData.parmPaymentMethod();
        _fiscalDocument.FiscalDocumentNumber = _fiscalDocumentParmData.parmFiscalDocumentNumber();
        _fiscalDocument.FiscalDocumentDate = _fiscalDocumentParmData.parmFiscalDocumentDate();
        _fiscalDocument.AccountingDate = _fiscalDocumentParmData.parmAccountingDate();
        _fiscalDocument.CancelAccountingDate = _fiscalDocumentParmData.parmCancelAccountingDate();
        _fiscalDocument.FiscalDocumentAccountNum = _fiscalDocumentParmData.parmFiscalDocumentAccountNum();
        _fiscalDocument.FiscalDocumentAccountType = _fiscalDocumentParmData.parmFiscalDocumentAccountType();
        _fiscalDocument.SalesCarrier = _fiscalDocumentParmData.parmSalesCarrier();
        _fiscalDocument.SalesCarrierLogisticsPostalAddress = _fiscalDocumentParmData.parmSalesCarrierPostalAddress();
        _fiscalDocument.CFPSId = _fiscalDocumentParmData.parmCFPSId();
        _fiscalDocument.ComplementaryType = _fiscalDocumentParmData.parmComplementaryType();
        _fiscalDocument.ComplementedFiscalDocument = _fiscalDocumentParmData.parmComplementedFiscalDocument();
        _fiscalDocument.Purpose = _fiscalDocumentParmData.parmPurpose();
        _fiscalDocument.DeliveryMode = _fiscalDocumentParmData.parmDeliveryMode();
        _fiscalDocument.DeliveryTerm = _fiscalDocumentParmData.parmDeliveryTerm();
        _fiscalDocument.FiscalEstablishment = _fiscalDocumentParmData.parmFiscalEstablishmentID();
        _fiscalDocument.FiscalEstablishmentName = _fiscalDocumentParmData.parmFiscalEstablishmentName();
        _fiscalDocument.FiscalEstablishmentPostalAddress = _fiscalDocumentParmData.parmFiscalEstablishmentPostalAddress();
        _fiscalDocument.FiscalEstablishmentCNPJCPF = _fiscalDocumentParmData.parmFiscalEstablishmentCNPJCPF();
        _fiscalDocument.FiscalEstablishmentIE = _fiscalDocumentParmData.parmFiscalEstablishmentIE();
        _fiscalDocument.FiscalEstablishmentCCMNum = _fiscalDocumentParmData.parmFiscalEstablishmentCCMNum();
        _fiscalDocument.FiscalEstablishmentPhone = _fiscalDocumentParmData.parmFiscalEstablishmentPhone();
        _fiscalDocument.FiscalEstablishmentTribSubstitutionReg = _fiscalDocumentParmData.parmFiscalEstablishmentTribSubstReg();
        _fiscalDocument.ThirdPartyName = _fiscalDocumentParmData.parmThirdPartyName();
        _fiscalDocument.ThirdPartyPostalAddress = _fiscalDocumentParmData.parmThirdPartyPostalAddress();
        _fiscalDocument.ThirdPartyCNPJCPF = _fiscalDocumentParmData.parmThirdPartyCNPJCPF();
        _fiscalDocument.ThirdPartyForeignerId = _fiscalDocumentParmData.parmThirdPartyForeignerId();
        _fiscalDocument.ThirdPartyIE = _fiscalDocumentParmData.parmThirdPartyIE();
        _fiscalDocument.ThirdPartyCCMNum = _fiscalDocumentParmData.parmThirdPartyCCMNum();
        _fiscalDocument.ThirdPartyPhone = _fiscalDocumentParmData.parmThirdPartyPhone();
        _fiscalDocument.ThirdPartyFax = _fiscalDocumentParmData.parmThirdPartyFax();
        _fiscalDocument.ThirdPartyEmail = _fiscalDocumentParmData.parmThirdPartyEmail();
        _fiscalDocument.ThirdPartyICMSContributor = _fiscalDocumentParmData.parmThirdPartyIcmsContributor();
        _fiscalDocument.ThirdPartyForeignerId = _fiscalDocumentParmData.parmThirdPartyForeignerId();
        _fiscalDocument.Direction = _fiscalDocumentParmData.parmDirection();
        _fiscalDocument.FiscalDocumentFormat = _fiscalDocumentParmData.parmFiscalDocumentType().format().RecId;
        _fiscalDocument.FreightChargeTerms = _fiscalDocumentParmData.parmFreightChargeTerms();
        _fiscalDocument.InventoryVoucher = _fiscalDocumentParmData.parmInventoryVoucher();
        _fiscalDocument.FiscalDocumentIssuer = _fiscalDocumentParmData.parmFiscalDocumentIssuer();
        _fiscalDocument.Model = _fiscalDocumentParmData.parmModel();
        _fiscalDocument.FiscalDocumentSeries = _fiscalDocumentParmData.parmFiscalDocumentSeries();
        _fiscalDocument.RefTableId = _fiscalDocumentParmData.parmRefTableId();
        _fiscalDocument.RefRecId = _fiscalDocumentParmData.parmRefRecId();
        _fiscalDocument.Specie = _fiscalDocumentParmData.parmSpecie();
        _fiscalDocument.TotalAmount = _fiscalDocumentParmData.parmTotalAmount();
        _fiscalDocument.TotalMarkupFreightAmount = _fiscalDocumentParmData.parmTotalMarkupFreightAmount();
        _fiscalDocument.TotalMarkupInsuranceAmount = _fiscalDocumentParmData.parmTotalMarkupInsuranceAmount();
        _fiscalDocument.TotalMarkupOtherAmount = _fiscalDocumentParmData.parmTotalMarkupOtherAmount();
        _fiscalDocument.VehicleLicensePlateNumber = _fiscalDocumentParmData.parmVehicleLicensePlateNumber();
        _fiscalDocument.VehicleLicensePlateState = _fiscalDocumentParmData.parmVehicleLicensePlateState();
        _fiscalDocument.PackingBrand = _fiscalDocumentParmData.parmPackingBrand();
        _fiscalDocument.Voucher = _fiscalDocumentParmData.parmVoucher();
        _fiscalDocument.ImportDeclaration = _fiscalDocumentParmData.parmImportDeclaration();
        _fiscalDocument.AccessKey = _fiscalDocumentParmData.parmFiscalDocumentAccessKey();
        _fiscalDocument.NumericCode = _fiscalDocumentParmData.parmEFiscalDocumentNumericCode();
        _fiscalDocument.TypeOfCTe = _fiscalDocumentParmData.parmTypeOfCTe();
        _fiscalDocument.FinalUser = _fiscalDocumentParmData.parmFinalUser();
        _fiscalDocument.PresenceType = _fiscalDocumentParmData.parmPresenceType();
        _fiscalDocument.PaymentAmount = _fiscalDocumentParmData.parmPaymentAmount();
        _fiscalDocument.ApplicationVersion = _fiscalDocumentParmData.parmApplicationVersion();

        boolean isNFeNT2020006v100Enabled = FiscalEstablishment_BR::findById(_fiscalDocumentParmData.parmFiscalEstablishmentID())
            .checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2020006v100);

        if (isNFeNT2020006v100Enabled)
        {
            _fiscalDocument.ThirdPartySalesDigitalPlatform = _fiscalDocumentParmData.parmThirdPartySalesDigitalPlatform();
        }

        if (_fiscalDocumentParmData.parmThirdPartySalesDigitalPlatform() == NoYes::Yes
            && FiscalDocumentHelper::checkIfThirdPartySalesDigitalPlatformApplicable(
            _fiscalDocumentParmData.parmDirection(),
            isNFeNT2020006v100Enabled,
            _fiscalDocumentParmData.parmPresenceType()))
        {
            _fiscalDocument.ThirdPartySalesDigitalPlatformCNPJ = _fiscalDocumentParmData.parmThirdPartySalesDigitalPlatformCNPJ();
            _fiscalDocument.ThirdPartySalesDigitalPlatformSalesResponsible = _fiscalDocumentParmData.parmThirdPartySalesDigitalPlatformSalesResponsible();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderLegalTexts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves legal texts associated with the fiscal document in context.
    /// </summary>
    /// <returns>
    ///     An instance of <c>FiscalDocumentTextListParmData_BR</c> where each entry represents a different legal text retrieved from the fiscal document header.
    /// </returns>
    /// <remarks>
    ///     Only fiscal document texts marked as Fiscal Information are retrieved by this method as they represent Legal Texts.
    ///     This method also eliminates any duplicates that might exists among the retrieved legal texts.
    /// </remarks>
    public static FiscalDocumentTextListParmData_BR getHeaderLegalTexts(FiscalDocument_BR _fiscalDoc)
    {
        DocuRef                             docuRef;
        DocuRefExt_BR                       docuRefExt;
        FiscalDocumentTextListParmData_BR   fiscalDocumentTextListParmData = FiscalDocumentTextListParmData_BR::construct();
       
        // Retrieves texts associated with the header
        while select Name, Notes, Restriction  from docuRef
            where docuRef.RefTableId == _fiscalDoc.TableId
               && docuRef.RefRecId == _fiscalDoc.RecId
               && docuRef.RefCompanyId == _fiscalDoc.dataAreaId
            join FiscalInformation, TextId, Type from docuRefExt
                where docuRefExt.DocuRef == docuRef.RecId
                   && docuRefExt.FiscalInformation == NoYes::Yes
        {
            fiscalDocumentTextListParmData = FiscalDocument_BR_Extension::addTextToList(docuRef, docuRefExt, fiscalDocumentTextListParmData);
        }
        
        return fiscalDocumentTextListParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether this fiscal document is a return order or not.
    /// </summary>
    /// <returns>
    /// True if current fiscal document is a return order; otherwise, false.
    /// </returns>
    public static boolean isReturnOrder(FiscalDocument_BR _fiscalDocument)
    {
        switch (_fiscalDocument.Direction)
        {
            case FiscalDocDirection_BR::Outgoing:
                switch (_fiscalDocument.RefTableId)
                {
                    case tableNum(VendInvoiceJour):
                    case tableNum(PurchComplementaryInvoiceHeader):
                        return true;

                    default:
                        return false;
                }
                break;

            case FiscalDocDirection_BR::Incoming:
                switch (_fiscalDocument.RefTableId)
                {
                    case tableNum(VendInvoiceJour):
                    case tableNum(PurchComplementaryInvoiceHeader):
                    case tableNum(InventTransferJour):
                    case tableNum(TaxFiscalDocument_BR):
                        return false;

                    default:
                        return true;
                }
                break;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>