<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPrepaymentFactureCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustPrepaymentFactureCreate_RU extends RunBase
{
    FactureDate_RU  factureDate;
    DialogField     dlgFactureDate;
    Map             custTransMap;
    CustTrans        custTransTmp;
    RecordSortedList rslCustTrans;

    protected const int currentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    boolean check(CustTrans    _custTrans)
    {
        CustVendTransDetails custVendTransDetails;
        SalesBookTable_RU    salesBookTable = SalesBookTable_RU::getLastClosedBook();
        TransDate            fromDate, toDate;
        boolean              ret = true;

        if (! _custTrans.Prepayment)
        {
            ret = checkFailed("@GLS112788");
        }

        if (_custTrans.isTmp())
        {
            if (FactureJour_RU::find(_custTrans.custTrans_W().PrepaymentFactureId_W, FactureModule_RU::Vend).FactureDate_External != factureDate)
            {
                ret = checkFailed("@SalesPurchBook:FactureMustBeEqualOrigFactureDate");
            }
        }
        else
        {
            if(_custTrans.TransDate > factureDate)
            {
                ret = checkFailed(strfmt("@GLS112787", _custTrans.Voucher, _custTrans.TransDate, _custTrans.AccountNum));
            }


            if(_custTrans.custTrans_W().PrepaymentFactureId_W)
            {
                ret = checkFailed("@GLS112789");
            }


            if(! SalesBookTable_RU::canProcessDate(factureDate))
            {
                ret = checkFailed(strfmt("@GLS113010", _custTrans.Voucher, ''));
            }

            [fromDate, toDate] = BookDataCalc_RU::datePeriodBook(salesBookTable.ClosingDate + 1);

            if (factureDate < fromDate || factureDate > toDate)
            {
                ret = checkFailed(strfmt("@SYS95262", "@GLS101221", fromDate, toDate));
            }

            custVendTransDetails = new CustVendTransDetails(_custTrans, toDate);

            if(custVendTransDetails.amountCurSettled())
            {
                if(! PurchBookTable_RU::canProcessDate(toDate))
                {
                    ret = checkFailed(strfmt("@GLS104850", _custTrans.Voucher, ''));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFacture</Name>
				<Source><![CDATA[
    protected void createFacture(CustTrans _custTrans, UseOriginalDocumentAsFacture_RU _useOriginalDocumentAsFacture = NoYes::No)
    {
        FactureJour_RU      factureJour;
        LedgerJournalTrans  ledgerJournalTrans;
        ExchRate            exchRate;
        CustTrans_W         custTrans_W;

        ledgerJournalTrans  = this.prepaymentJournal(_custTrans, _useOriginalDocumentAsFacture);

        if (ledgerJournalTrans)
        {
            factureJour = FactureJourCreate_RU::newPrepaymentFactureLedgerJournalTrans(ledgerJournalTrans,
                                                                                       true,
                                                                                       NoYes::Yes,
                                                                                       factureDate);
        }
        else
        {
            exchRate    = _custTrans.AmountCur ? _custTrans.AmountMST / _custTrans.AmountCur * 100 : 0;
            factureJour = FactureJourCreate_RU::newPrepaymentFactureCustTrans(_custTrans,
                                                                              exchRate,
                                                                              factureDate,
                                                                              _custTrans.AmountCur,
                                                                              _useOriginalDocumentAsFacture);
        }

        if (factureJour)
        {
            if (! _custTrans.isTmp())
            {
                custTrans_W = _custTrans.custTrans_W();
                custTrans_W.PrepaymentFactureId_W = factureJour.FactureId;
                _custTrans.packCustTrans_W(custTrans_W);
                _custTrans.update();
            }
  
            factureJour.PostingLogRecId      = this.postingLog(_custTrans).RecId;
            factureJour.OperationTypeCodes   = FactureJour_RU::getInitialTypeCodes(factureJour);
            factureJour.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunBase   dialog;
        
        dialog = super();
        dlgFactureDate = dialog.addFieldValue(extendedtypestr(FactureDate_RU), factureDate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();
        factureDate = dlgFactureDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTransValue</Name>
				<Source><![CDATA[
    private LedgerJournalTrans initLedgerJournalTransValue(LedgerJournalTrans   _ledgerJournalTrans,
                                                           CustTrans            _custTrans,
                                                           LedgerJournalEngine  _ledgerJournalEngine)
    {
        _ledgerJournalTrans.clear();
        _ledgerJournalTrans.AccountType    = LedgerJournalACType::Cust;
        _ledgerJournalTrans.Voucher        = _custTrans.Voucher;
        _ledgerJournalTrans.TransDate      = _custTrans.TransDate;

        _ledgerJournalTrans.Prepayment     = NoYes::Yes;
        _ledgerJournalTrans.JournalNum     = _ledgerJournalEngine.ledgerJournalTable().JournalNum;
        _ledgerJournalTrans.DocumentDate   = _custTrans.DocumentDate;
        _ledgerJournalTrans.DocumentNum    = _custTrans.DocumentNum;
        _ledgerJournalTrans.Txt            = _custTrans.Txt;
        _ledgerJournalTrans.Company        = curext();

        _ledgerJournalTrans.parmAccount(_custTrans.AccountNum);

        _ledgerJournalEngine.accountModified(_ledgerJournalTrans);

        _ledgerJournalTrans.DefaultDimension = _custTrans.DefaultDimension;

        _ledgerJournalTrans.CurrencyCode   = _custTrans.CurrencyCode;
        _ledgerJournalEngine.currencyModified(_ledgerJournalTrans);
        _ledgerJournalTrans.ExchRate       = _custTrans.ExchRate;
        _ledgerJournalTrans.ExchRateSecond = _custTrans.ExchRateSecond;
        _ledgerJournalTrans.amountCur2DebCred(_custTrans.AmountCur);
        _ledgerJournalTrans.CustFactureAutoCreate_RU = NoYes::Yes;
        _ledgerJournalTrans.PostingProfile = _custTrans.PostingProfile;
        _ledgerJournalTrans.CommProfileType_RU = _custTrans.custTrans_W().CommProfileType_RU;

        if (_custTrans.isTmp())
        {
            _ledgerJournalTrans.ReasonRefRecID = _custTrans.ReasonRefRecId;
        }
  
        return _ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTable</Name>
				<Source><![CDATA[
    private LedgerJournalTable ledgerJournalTable()
    {
        LedgerJournalTable ledgerJournalTable;
        const str journalNum = 'Prepayment';

        ledgerJournalTable.JournalNum           = journalNum;
        ledgerJournalTable.LedgerJournalInclTax = NoYes::Yes;
        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, factureDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustTransSet</Name>
				<Source><![CDATA[
    void parmCustTransSet(container _custTransSet)
    {
        custTransMap = Map::create(_custTransSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactureDate</Name>
				<Source><![CDATA[
    FactureDate_RU parmFactureDate(FactureDate_RU _factureDate = factureDate)
    {
        factureDate = _factureDate;
        return factureDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingLog</Name>
				<Source><![CDATA[
    protected CustVendTransPostingLog_RU postingLog(CustTrans _custTrans)
    {
        CustVendTransPostingLog_RU  postingLog;
        CustTrans                   custTransOrig;

        select firstonly postingLog
            where postingLog.PostingLogType == CustVendTransPostingLogType_RU::Prepayment &&
                  postingLog.RefTableId     == _custTrans.TableId
            join RecId from custTransOrig
                where (custTransOrig.RecId      == postingLog.TransRecId       ||
                       custTransOrig.RecId      == postingLog.OffSetRecId)     &&
                       custTransOrig.TransDate  == _custTrans.TransDate        &&
                       custTransOrig.Voucher    == _custTrans.Voucher          &&
                       custTransOrig.RecId      != _custTrans.RecId;

        return postingLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepaymentJournal</Name>
				<Source><![CDATA[
    protected LedgerJournalTrans prepaymentJournal(CustTrans  _custTrans, UseOriginalDocumentAsFacture_RU _useOriginalDocumentAsFacture = NoYes::No)
    {
        LedgerJournalTrans              ledgerJournalTrans;
        LedgerJournalEngine             ledgerJournalEngine;

        if (! _custTrans.isTmp() && this.postingLog(_custTrans))
        {
            return ledgerJournalTrans;
        }
        ledgerJournalEngine = new LedgerJournalEngine(null);
        ledgerJournalEngine.newJournalActive(this.ledgerJournalTable());
        ledgerJournalTrans.setTmp();
        this.initLedgerJournalTransValue(ledgerJournalTrans, _custTrans, ledgerJournalEngine);
        ledgerJournalTrans.UseOriginalDocumentAsFacture_RU = _useOriginalDocumentAsFacture;
        ledgerJournalTrans.insert();

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        CustTrans           custTrans;
        RefRecId            recId;
        MapEnumerator       mapEnumerator = custTransMap.getEnumerator();

        UseOriginalDocumentAsFacture_RU useOriginalDocumentAsFacture;

        container           con;
        const int recIdPos = 2;

        while(mapEnumerator.moveNext())
        {
            con = mapEnumerator.currentKey();
            useOriginalDocumentAsFacture = mapEnumerator.currentValue();

            ttsbegin;

            if (custTransTmp)
            {
                recId = conpeek(con, recIdPos);
                select firstonly forupdate custTransTmp
                where custTransTmp.RecId == recId;

                custTrans = custTransTmp;

                if (rslCustTrans)
                {
                    rslCustTrans.find(custTrans);
                }
            }
            else
            {
                custTrans = CustTrans::find(conpeek(con, recIdPos), true);
            }

            if (this.check(custTrans))
            {
                this.createFacture(custTrans, useOriginalDocumentAsFacture);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes the temporary table reference used as a source of data for facture creation.
    /// </summary>
    /// <param name="_custTrans">
    /// _custTrans - temporary table buffer used as a source of data for facture creation.
    /// </param>
    public void setCustTransTmp(CustTrans _custTrans)
    {
        custTransTmp.setTmp();
        custTransTmp.setTmpData(_custTrans);

        select custTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecordSortedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes the record sorted list used as a source of data for facture creation.
    /// </summary>
    /// <param name="_rslCustTrans">
    /// Temporary table buffer used as a source of data for facture creation.
    /// </param>
    public void setRecordSortedList(RecordSortedList _rslCustTrans)
    {
        rslCustTrans = _rslCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        ;
        switch (version)
        {
            case currentVersion:
                [version, factureDate] = packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);
        if (factureDate == dateNull())
        {
            ret = checkFailed("@GLS112791");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static CustPrepaymentFactureCreate_RU construct(container _custTransSet)
    {
        CustPrepaymentFactureCreate_RU ret = new CustPrepaymentFactureCreate_RU();
        ret.parmCustTransSet(_custTransSet);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS112790";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    static void newFromForm(
        container _custTransSet,
        CustTrans _custTransTmp = null,
        RecordSortedList _rslCustTrans = null)
    {
        CustPrepaymentFactureCreate_RU    factureCreate;

        factureCreate = CustPrepaymentFactureCreate_RU::construct(_custTransSet);

        if (_custTransTmp && _custTransTmp.isTmp())
        {
            factureCreate.setCustTransTmp(_custTransTmp);
        }

        factureCreate.setRecordSortedList(_rslCustTrans);

        if (factureCreate.prompt())
        {
            factureCreate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>