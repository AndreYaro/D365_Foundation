<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalCreateJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdJournalCreateJob</c> is used for creating Journals for <c>ProdRouteJob</c> feedback
/// </summary>
public class ProdJournalCreateJob extends ProdJournalCreate
{
    protected ProdJobId              jobId;
    protected ProdRouteJob           prodRouteJob;
    protected ProdReportedHours      hours;
    protected ProdReportedGood       qtyGood;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>ProdJournalCreateJob</c>
    /// </summary>
    /// <returns>A new instance of <c>ProdJournalCreateJob</c></returns>
    public static ProdJournalCreateJob construct()
    {
        return new ProdJournalCreateJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJobId</Name>
				<Source><![CDATA[
    public ProdJobId parmJobId(ProdJobId _jobId = jobId)
    {
        if (!prmIsDefault(_jobId))
        {
            jobId        = _jobId;
            prodRouteJob = ProdRouteJob::findJobId(_jobId);
        }

        return jobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHours</Name>
				<Source><![CDATA[
    public ProdReportedHours parmHours(ProdReportedHours _hours = hours)
    {
        hours = _hours;
        return hours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyGood</Name>
				<Source><![CDATA[
    public ProdReportedGood parmQtyGood(ProdReportedGood _qtyGood = qtyGood)
    {
        qtyGood = _qtyGood;
        return qtyGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>ProdJournalCreateJob</c> for the specified parameters.
    /// </summary>
    /// <param name = "_prodId">The id of the production order.</param>
    /// <param name = "_jobId">The id of the production job.</param>
    /// <param name = "_transDate">The date of the journal.</param>
    /// <param name = "_hours">The quantity of hours.</param>
    /// <param name = "_qtyGood">The good quantity.</param>
    /// <param name = "_journalNameId">The name of the journal.</param>
    /// <returns>A new instance of <c>ProdJournalCreateJob</c> for the specified parameters.</returns>
    public static ProdJournalCreateJob newParm(
        ProdId                 _prodId,
        ProdJobId              _jobId,
        TransDate              _transDate,
        ProdReportedHours      _hours,
        ProdReportedGood       _qtyGood,
        ProdJournalNameId      _journalNameId)
    {
        ProdJournalCreateJob  prodJournalCreate = ProdJournalCreateJob::construct();
        prodJournalCreate.getLast();

        prodJournalCreate.parmProdId(_prodId);
        prodJournalCreate.parmJobId(_jobId);
        prodJournalCreate.parmTransDate(_transDate);
        prodJournalCreate.parmHours(_hours);
        prodJournalCreate.parmQtyGood(_qtyGood);
        prodJournalCreate.parmJournalNameId(_journalNameId);

        prodJournalCreate.init();
        return prodJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates journal lines from the production job.
    /// </summary>
    protected void createLines()
    {
        ProdJournalRoute    prodJournalRoute;

        this.initProdJournalTableData(ProdJournalType::JobCard);
        prodJournalTableData.initJournalId();

        ProdJournalTransDataRoute journalTransDataRoute = prodJournalTableData.journalStatic().newJournalTransData(prodJournalRoute, prodJournalTableData);
        journalTransDataRoute.initFromJournalTable();

        ProdJobType prodJobType = ProdJobType::construct(prodRouteJob.JobType);
        prodJobType.initProdJournalRoute(prodRouteJob.prodRoute(), prodJournalRoute, prodRouteJob);

        if (! prodJournalRoute.ProdId)
        {
            prodJournalRoute.ProdId     = prodRouteJob.ProdId;
        }

        prodJournalRoute.JobId          = prodRouteJob.JobId;

        prodJournalRoute.JournalId      = prodJournalTable.JournalId;
        prodJournalRoute.TransDate      = transDate;
        prodJournalRoute.QtyGood        = qtyGood;
        prodJournalRoute.Hours          = hours;
        prodJournalRoute.ErrorCause     = ProdErrorCause::None;

        prodJournalRoute.JobFinished        = endUpdate;
        prodJournalRoute.OprFinished        = endUpdate;
        prodJournalRoute.ProdReportFinished = NoYes::No;

        prodJournalRoute.ProdPickList   = NoYes::No;
        prodJournalRoute.ExecutedPct    = prodJournalRoute.proposalJobExecutedPct();

        journalTransDataRoute.create();

        if (prodJournalRoute.Hours)
        {
            if (prodJournalRoute.isProjMethodConsumed())
            {
                JmgPostStandardSystem::createProjTransFromProdJournalRoute(prodJournalRoute , prodJobType);
            }
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>