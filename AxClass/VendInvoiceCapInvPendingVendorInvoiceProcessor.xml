<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceCapInvPendingVendorInvoiceProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;
using Microsoft.Dynamics.AX.Framework.Utilities.UrlHelper;

internal final class VendInvoiceCapInvPendingVendorInvoiceProcessor extends VendInvoiceCapInvTransferProcessorBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>transferInvoice</Name>
				<Source><![CDATA[
    public void transferInvoice()
    {
        this.checkLegalEntityValidity();

        ttsbegin;
        changecompany(this.dataAreaId)
        {
            VendorInvoiceHeaderEntity header = this.createInvoiceHeader();

            if (this.invoiceType != CapturedInvoiceType::HeaderOnly)
            {
                this.createInvoiceLines(header);
            }
        
            if (this.transferAttachment == NoYes::Yes)
            {
                this.createInvoiceAttachment();
            }

            this.createInvoiceHeaderCharges(header);

            if (VendInvoiceCapturedInvoiceInfoQueryStringFlight::instance().isEnabled())
            {
                this.updateQueryString(header);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceHeader</Name>
				<Source><![CDATA[
    private VendorInvoiceHeaderEntity createInvoiceHeader()
    {
        this.resetDimensionMap();
        JArray entityAttributes = this.getEntityAttributes(capturedDocument.SelectToken("$.VendorInvoiceHeader"));
        VendorInvoiceHeaderEntity entity;

        entity.HeaderReference = this.referenceId;
        if (this.invoiceType == CapturedInvoiceType::HeaderOnly)
        {
            entity.HeaderOnlyImport = NoYes::Yes;
        }

        System.Collections.IEnumerator iterator = entityAttributes.GetEnumerator();
        while (iterator.MoveNext())
        {
            JObject attribute = iterator.Current;
            str propName = this.getPropertyNameFromJObject(attribute);
            switch (propName)
            {
                case "vis_invoicenumber":
                    entity.InvoiceNumber = this.getStrFromJObjectValue(attribute);
                    break;
                case "vis_currencycode":
                    entity.Currency = this.getStrFromJObjectValue(attribute);
                    break;
                case "vis_invoicedate":
                    entity.InvoiceDate = this.getDateFromJObjectValue(attribute);
                    break;
                case "createdon":
                    entity.InvoiceReceivedDate = this.getDateFromJObjectValue(attribute);
                    break;
                case "vis_duedate":
                    entity.DueDate = this.getDateFromJObjectValue(attribute);
                    break;
                case "vis_vendoraccount":
                    entity.InvoiceAccount = this.getStrFromJObjectValue(attribute);
                    entity.VendorAccount = this.getStrFromJObjectValue(attribute);
                    break;
                case "vis_totaldue":
                    entity.ImportedAmount = this.getRealFromJObjectValue(attribute);
                    break;
                case "vis_totaltax":
                    entity.ImportedSalesTax = this.getRealFromJObjectValue(attribute);
                    break;
                case "vis_purchaseorder":
                    if (this.invoiceType == CapturedInvoiceType::HeaderOnly)
                    {
                        entity.PurchIdRange = this.getStrFromJObjectValue(attribute);
                    }
                    else if (this.invoiceType == CapturedInvoiceType::POInvoice)
                    {
                        entity.PurchaseOrderNumber = this.getStrFromJObjectValue(attribute);
                    }
                    break;
                case "vis_businessunit":
                    if (this.invoiceType == CapturedInvoiceType::CostInvoice)
                    {
                        this.insertToDimensionMap("BusinessUnit", this.getStrFromJObjectValue(attribute));
                    }
                    break;
                case "vis_costcenter":
                    if (this.invoiceType == CapturedInvoiceType::CostInvoice)
                    {
                        this.insertToDimensionMap("CostCenter", this.getStrFromJObjectValue(attribute));
                    }
                    break;
                case "vis_department":
                    if (this.invoiceType == CapturedInvoiceType::CostInvoice)
                    {
                        this.insertToDimensionMap("Department", this.getStrFromJObjectValue(attribute));
                    }
                    break;
                case "vis_paymentterms":
                    // For purchase order invoices, the payment term is determined by the purchase order
                    if (this.invoiceType == CapturedInvoiceType::CostInvoice)
                    {
                        entity.TermsOfPayment = this.getStrFromJObjectValue(attribute);
                    }
                    break;
            }
        }

        str dimensionValue = this.getDefaultDimensionValue();
        if (dimensionValue)
        {
            entity.DimensionDisplayValue = dimensionValue;
        }

        entity.insert();
        VendInvoiceCapInvDataUpdateHandler::updateInvoiceHeader(entity, entityAttributes, invoiceType);
        return entity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceLines</Name>
				<Source><![CDATA[
    private void createInvoiceLines(VendorInvoiceHeaderEntity header)
    {
        JArray lineArray = capturedDocument.SelectToken("$.VendorInvoiceLines");
        VendorInvoiceLineEntity entity;
        System.Collections.IEnumerator lineIterator = lineArray.GetEnumerator();
        while (lineIterator.MoveNext())
        {
            this.resetDimensionMap();
            entity.clear();
            entity.HeaderReference = this.referenceId;
            entity.InvoiceAccount = header.InvoiceAccount;
            entity.ReceiveNow = 1;
            entity.Currency = header.Currency;
            JArray entityAttributes = this.getEntityAttributes(lineIterator.Current);
            System.Collections.IEnumerator iterator = entityAttributes.GetEnumerator();
            while (iterator.MoveNext())
            {
                JObject attribute = iterator.Current;
                str propName = this.getPropertyNameFromJObject(attribute);
                switch (propName)
                {
                    case "vis_procurementtype":
                        entity.ProcurementCategoryName = this.getStrFromJObjectValue(attribute);
                        break;
                    case "vis_itemnumber":
                        entity.ItemNumber = this.getStrFromJObjectValue(attribute);
                        break;
                    case "vis_quantity":
                        entity.ReceiveNow = this.getRealFromJObjectValue(attribute);
                        break;
                    case "vis_linenumber":
                        entity.LineNumber = this.getIntFromJObjectValue(attribute);
                        break;
                    case "vis_unitprice":
                        entity.UnitPrice = this.getRealFromJObjectValue(attribute);
                        break;
                    case "vis_amount":
                        entity.NetAmount = this.getRealFromJObjectValue(attribute);
                        break;
                    case "vis_unit":
                        entity.Unit = this.getStrFromJObjectValue(attribute);
                        break;
                    case "vis_purchaseorder":
                        entity.PurchaseOrder = this.getStrFromJObjectValue(attribute);
                        break;
                    case "vis_purchlinenumber":
                        entity.PurchLineNumber = this.getIntFromJObjectValue(attribute);
                        break;
                    case "vis_linedescription":
                        entity.LineDescription = this.getStrFromJObjectValue(attribute);
                        break;
                    case "vis_businessunit":
                        if (this.invoiceType == CapturedInvoiceType::CostInvoice)
                        {
                            this.insertToDimensionMap("BusinessUnit", this.getStrFromJObjectValue(attribute));
                        }
                        break;
                    case "vis_costcenter":
                        if (this.invoiceType == CapturedInvoiceType::CostInvoice)
                        {
                            this.insertToDimensionMap("CostCenter", this.getStrFromJObjectValue(attribute));
                        }
                        break;
                    case "vis_department":
                        if (this.invoiceType == CapturedInvoiceType::CostInvoice)
                        {
                            this.insertToDimensionMap("Department", this.getStrFromJObjectValue(attribute));
                        }
                        break;
                }
            }

            str dimensionValue = this.getDefaultDimensionValue();
            if (dimensionValue)
            {
                entity.DimensionDisplayValue = dimensionValue;
            }

            entity.insert();
            VendInvoiceCapInvDataUpdateHandler::updateInvoiceLine(entity, entityAttributes, invoiceType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceAttachment</Name>
				<Source><![CDATA[
    private void createInvoiceAttachment()
    {
        JObject attachment = capturedDocument.SelectToken("$.VendorInvoiceDocumentAttachment");
        VendorInvoiceDocumentAttachmentEntity entity;
        
        entity.HeaderReference   = this.referenceId;
        entity.TypeId            = this.getDocuTypeId();
        entity.FileContents = this.capturedAttachment;
        entity.Name              = this.getStrFromJObject(attachment, "Name");
        entity.DefaultAttachment = this.getNoYesFromJObject(attachment, "DefaultAttachment");
        entity.FileType = this.getStrFromJObject(attachment, "FileType");
        entity.FileName = this.getStrFromJObject(attachment, "FileName");
        entity.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceHeaderCharges</Name>
				<Source><![CDATA[
    private void createInvoiceHeaderCharges(VendorInvoiceHeaderEntity _header)
    {
        JArray chargeArray = capturedDocument.SelectToken("$.VendorInvoiceHeaderCharges");

        if (chargeArray != null)
        {
            VendorInvoiceHeaderChargeEntity entity;
            System.Collections.IEnumerator chargeIterator = chargeArray.GetEnumerator();

            int chargeLineNumber = 1;
            while (chargeIterator.MoveNext())
            {
                entity.clear();

                entity.HeaderReference = this.referenceId;
                entity.ChargeCategory = MarkupCategory::Fixed;
                entity.VendInvoiceInfoTableDataAreaId = _header.DataAreaId;

                JObject jObject = chargeIterator.Current as JObject;
                entity.PurchaseChargeCode = this.getPropertyValueFromJsonObject(jObject, "vis_externalcode").ToString();
                entity.FixedChargeAmount = str2Num(this.getPropertyValueFromJsonObject(jObject, "vis_fieldvalue").ToString());
                entity.ChargeLineNumber = chargeLineNumber;
                chargeLineNumber += 1;

                entity.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryString</Name>
				<Source><![CDATA[
    private void updateQueryString(VendorInvoiceHeaderEntity header)
    {
        RequestQueryParameterCollection queryParameters = new RequestQueryParameterCollection();
        queryParameters.AddRequestQueryParameter(tableStr(VendInvoiceInfoTable), fieldStr(VendInvoiceInfoTable, TableRefId), header.HeaderReference);
        infoEntity.QueryString = VendInvoiceCapturedInvoiceInfoEntity::generateQueryString(menuItemDisplayStr(VendInvoiceInfoListPage), queryParameters);
        infoEntity.RefTableId = tableNum(VendInvoiceInfoTable);
        infoEntity.RefRecId = header.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>