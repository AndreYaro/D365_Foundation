<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscAdmDeleteTradeAgreements</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PriceDiscAdmDeleteTradeAgreements
{
    PriceDiscAdmTrans   parmPriceDiscAdmTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lockActiveAgreementsForDeletion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the active agreements or agreements that will be active in the future for deletion.
    /// </summary>
    protected void lockActiveAgreementsForDeletion()
    {
        PriceDiscAdmTrans   priceDiscAdmTrans;
        PriceDiscTable      priceDiscTable;

        priceDiscAdmTrans.skipDataMethods(true);

        // Any active agreements or agreements active in the future?
        update_recordset priceDiscAdmTrans
            setting MustBeDeleted = NoYes::Yes, Log = "@SYS138898"
            where priceDiscAdmTrans.JournalNum    == parmPriceDiscAdmTrans.JournalNum &&
                  priceDiscAdmTrans.MustBeDeleted == NoYes::No
            exists join priceDiscTable
                where priceDiscTable.RecId  == priceDiscAdmTrans.PriceDiscTableRef &&
                     (!priceDiscTable.ToDate                                       ||
                      priceDiscTable.ToDate >  DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockExpiredAgreementsForDeletion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the expired agreements for deletion.
    /// </summary>
    protected void lockExpiredAgreementsForDeletion()
    {
        PriceDiscAdmTrans   priceDiscAdmTrans;
        PriceDiscTable      priceDiscTable;

        priceDiscAdmTrans.skipDataMethods(true);
        priceDiscAdmTrans.skipEvents(true);

        update_recordset priceDiscAdmTrans
            setting MustBeDeleted = NoYes::Yes, Log = "@SCM:MarkedForDeletionOfExpiredAgreement"
            where priceDiscAdmTrans.JournalNum == parmPriceDiscAdmTrans.JournalNum
                && priceDiscAdmTrans.MustBeDeleted == NoYes::No
            exists join priceDiscTable
                where priceDiscTable.RecId == priceDiscAdmTrans.PriceDiscTableRef
                    && priceDiscTable.ToDate
                    && priceDiscTable.ToDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockChangedAgreementsForDeletion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the agreements that differ from their origins for deletion.
    /// </summary>
    protected void lockChangedAgreementsForDeletion()
    {
        PriceDiscAdmTransMarkForDeletion::newFromPriceDiscAdmTrans(parmPriceDiscAdmTrans).execute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Locks the journal for deletion.
    /// </summary>
    protected void lockJournal()
    {
        PriceDiscAdmTable   priceDiscAdmTable;

        priceDiscAdmTable = PriceDiscAdmTable::find(parmPriceDiscAdmTrans.JournalNum, true);
        priceDiscAdmTable.LockedForDeletion = NoYes::Yes;
        priceDiscAdmTable.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockNeverPostedAgreementsForDeletion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the agreements that have never been posted for deletion.
    /// </summary>
    protected void lockNeverPostedAgreementsForDeletion()
    {
        PriceDiscAdmTrans   priceDiscAdmTrans;

        priceDiscAdmTrans.skipDataMethods(true);

        // Any agreements which have never been posted?
        update_recordset priceDiscAdmTrans
            setting MustBeDeleted = NoYes::Yes, Log = "@SYS138897"
            where priceDiscAdmTrans.JournalNum    == parmPriceDiscAdmTrans.JournalNum &&
                  priceDiscAdmTrans.MustBeDeleted == NoYes::No                        &&
                  !priceDiscAdmTrans.PriceDiscTableRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDiscAdmTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>parmPriceDiscAdmTrans</c> variable.
    /// </summary>
    /// <param name="_priceDiscAdmTrans">
    ///    The value to which to set the <c>parmPriceDiscAdmTrans</c> variable; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>parmPriceDiscAdmTrans</c> variable.
    /// </returns>
    public PriceDiscAdmTrans parmPriceDiscAdmTrans(PriceDiscAdmTrans _priceDiscAdmTrans = parmPriceDiscAdmTrans)
    {
        parmPriceDiscAdmTrans = _priceDiscAdmTrans;

        return parmPriceDiscAdmTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the trade agreements that must be deleted.
    /// </summary>
    /// <remarks>
    ///    The user will be notified whether any trade agreements were marked for deletion.
    /// </remarks>
    public void run()
    {
        ttsbegin;
        // Run validation only if lines are currently released
        if (!PriceDiscAdmTable::find(parmPriceDiscAdmTrans.JournalNum).LockedForDeletion)
        {
            this.lockActiveAgreementsForDeletion();
            this.lockChangedAgreementsForDeletion();
            this.lockNeverPostedAgreementsForDeletion();
            this.lockExpiredAgreementsForDeletion();

            if (PriceDiscAdmTrans::existDeleteMarked(parmPriceDiscAdmTrans.JournalNum))
            {
                // If any lines fails validation - set the journal for deletion mode and inform the user.
                this.lockJournal();

                info("@SYS138896");
            }
        }
        else
        {
            // Release lines
            PriceDiscAdmTable::releaseMarked(parmPriceDiscAdmTrans.JournalNum);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>PriceDiscAdmDeleteTradeAgreements</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>PriceDiscAdmDeleteTradeAgreements</c> class.
    /// </returns>
    public static PriceDiscAdmDeleteTradeAgreements construct()
    {
        return new PriceDiscAdmDeleteTradeAgreements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS138894";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PriceDiscAdmTrans                   priceDiscAdmTrans;
        PriceDiscAdmDeleteTradeAgreements   priceDiscAdmDeleteTradeAgreements = PriceDiscAdmDeleteTradeAgreements::construct();

        if (!(_args.dataset() == tablenum(PriceDiscAdmTrans)))
        {
            throw error("@SYS18626");
        }

        priceDiscAdmTrans = _args.record();

        if (!priceDiscAdmTrans.JournalNum)
        {
            throw error("@SYS59008");
        }

        priceDiscAdmDeleteTradeAgreements.parmPriceDiscAdmTrans(priceDiscAdmTrans);
        priceDiscAdmDeleteTradeAgreements.run();

        if (formHasMethod(_args.caller(),identifierstr(SetDeletionSwitch)))
        {
            _args.caller().setDeletionSwitch();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>