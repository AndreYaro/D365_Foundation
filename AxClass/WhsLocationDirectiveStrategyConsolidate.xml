<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLocationDirectiveStrategyConsolidate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLocationDirectiveStrategyUnallocationLocation</c> class implements the Consolidate strategy.
/// </summary>
[WhsLocationDirectiveStrategyFactory(WhsLocDirStrategy::Consolidate)]
class WhsLocationDirectiveStrategyConsolidate extends WhsLocationDirectiveStrategy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isSupportedWorkTransType</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean isSupportedWorkTransType(WHSWorkTransType _workTransType)
    {
        return _workTransType == WHSWorkTransType::Purch ||
            _workTransType == WHSWorkTransType::TransferReceipt||
            _workTransType == WHSWorkTransType::ProdPut ||
            _workTransType == WHSWorkTransType::ProdProcessPut ||
            _workTransType == WHSWorkTransType::ReturnOrder ||
            _workTransType == WHSWorkTransType::KanbanPut ||
            _workTransType == WHSWorkTransType::Invent ||
            _workTransType == WHSWorkTransType::Replenishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(
        WHSLocDirTable  _locDirTable,
        WHSLocDirLine   _locDirLine,
        WHSLocDirAction _locDirAction)
    {
        boolean ret = true;

        if (!this.isSupportedWorkTransType(_locDirTable.WorkTransType))
        {
            ret = checkFailed(strFmt("@WAX5583", _locDirAction.LocDirStrategy, _locDirTable.WorkTransType));
        }

        if (_locDirTable.WorkType != WHSWorkType::Put)
        {
            ret = checkFailed(strFmt("@WAX4602", _locDirAction.LocDirStrategy, _locDirTable.WorkType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performStrategy</Name>
				<Source><![CDATA[
    public boolean performStrategy(
        WhsLocationDirective _locationDirective, 
        WhsLocationDirectiveStrategyParameters _parameters)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useVolumetricsOptimization</Name>
				<Source><![CDATA[
    public boolean useVolumetricsOptimization()
    {
        // the assumption is it will take more time
        // to exclude full locations from the query than to check them one by one
        // because only few locations will qualify for these strategies
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useMixedLocationOptimization</Name>
				<Source><![CDATA[
    public boolean useMixedLocationOptimization()
    {
        // the assumption is it will take more time
        // to exclude mixed locations from the query than to check them one by one
        // because only few locations will qualify for these strategies
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPutLocDirActionQuery</Name>
				<Source><![CDATA[
    public boolean modifyPutLocDirActionQuery(WhsLocationDirectiveActionQuery _actionQuery, Query _query)
    {
        QueryBuildDatasource qbdsInventSum;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            qbdsInventSum = _query.dataSourceTable(tableNum(WMSLocation)).addDataSource(tableNum(InventSum));
            qbdsInventSum.relations(false);
            qbdsInventSum.joinMode(JoinMode::ExistsJoin);

            qbdsInventSum.addLink(fieldNum(WMSLocation, InventLocationId), fieldNum(InventSum, InventLocationId));
            qbdsInventSum.addLink(fieldNum(WMSLocation, wMSLocationId), fieldNum(InventSum, wMSLocationId));

            InventDim inventDim = InventDim::find(_actionQuery.parmInventDimId());
            if (inventDim.anyProductDimensionSpecified())
            {                
                Enumerator enumerator = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();
                while (enumerator.moveNext())
                {
                    FieldId inventDimFieldId = enumerator.current();                    
                    if (inventDim.(inventDimFieldId))
                    {
                        FieldId inventSumFieldId = InventDim::getInventSumFieldIdFromInventDimFieldId(inventDimFieldId);
                        qbdsInventSum.addRange(inventSumFieldId).value(inventDim.(inventDimFieldId));
                    }
                }
            }
        }
        else
        {
            QueryBuildDatasource qbdsInventDim = _query.dataSourceTable(tableNum(WMSLocation)).addDataSource(tableNum(InventDim));
            qbdsInventDim.relations(true);
            qbdsInventDim.joinMode(JoinMode::ExistsJoin);

            InventDim inventDim = InventDim::find(_actionQuery.parmInventDimId());
            if (inventDim.anyProductDimensionSpecified())
            {
                Enumerator enumerator = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();
                while (enumerator.moveNext())
                {
                    FieldId inventDimFieldId = enumerator.current();
                    if (inventDim.(inventDimFieldId))
                    {
                        qbdsInventDim.addRange(inventDimFieldId).value(inventDim.(inventDimFieldId));
                    }
                }
            }

            qbdsInventSum = qbdsInventDim.addDataSource(tableNum(InventSum));
            qbdsInventSum.relations(true);
        }

        qbdsInventSum.addRange(fieldNum(InventSum, ItemId)).value(_actionQuery.parmItemId());
        qbdsInventSum.addRange(fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));
        
        if (PdsGlobal::pdsIsCWItem(_actionQuery.parmItemId()))
        {
            qbdsInventSum.addRange(fieldNum(InventSum, PdsCWPhysicalInvent)).value('>0');
        }
        else
        {
            qbdsInventSum.addRange(fieldNum(InventSum, PhysicalInvent)).value('>0');
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>