<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRFullTextSearchRefresh</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRFullTextSearchRefresh</c> class executes
///     search criteria refresh in batch.
/// </summary>
class MCRFullTextSearchRefresh extends RunBaseBatch implements BatchRetryable
{
    DialogField     dlgFullTextSearchType;

    MCRFullTextSearchType   mcrFullTextSearchType;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        mcrFullTextSearchType
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@SCM:UpdateSearchData";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogGroup                 dialogGrp;
        DialogGroup                 dialogGrpCriteria;
        DialogRunbase               dialog;

        //Setup the dialog
        dialog = new dialogrunbase("@SCM:UpdateSearchData", this);
        dialogGrp = dialog.addGroup('');
        dialogGrp.frameType(FormFrameType::None);
        dialogGrp.columns(1);
        dialogGrpCriteria = dialog.addGroup("@SYS13128", dialogGrp);
        dialogGrpCriteria.frameType(FormFrameType::Auto);

        dlgFullTextSearchType = dialog.addField(enumStr(MCRFullTextSearchType), "@SYS11258");
        dlgFullTextSearchType.value(mcrFullTextSearchType);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        mcrFullTextSearchType = dlgFullTextSearchType.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args _args = null)
    {
        super();

        if (_args)
        {
            // If search type is passed in set class variable
            if (_args.parmEnumType() == enumNum(MCRFullTextSearchType))
            {
                mcrFullTextSearchType = _args.parmEnum();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Common                searchView;
        DictTable             dictTable;
        TableId               sourceTableId;
        MCRInventTableIndex   itemIndex;
        InventDistinctProduct inventDistinctProduct;
  
        super();

        sourceTableId = tableName2Id(MCRFullTextIndexField::viewFromEnum(mcrFullTextSearchType));
        dictTable = new DictTable(sourceTableId);
        searchView = dictTable.makeRecord();

        // Checks whether the InventDistinctProduct table has been populated and if not - populate it
        InventParameters::find();
        Set fieldSet = MCRFullTextSearch::getFieldsSet(sourceTableId);

        if (mcrFullTextSearchType == MCRFullTextSearchType::Item && MCRFullTextParameters::isProductSearchLookupEnabled())
        {
            if (!MCRFullTextSearch::isSufficientToCoverMCRProductSearchView(searchView, fieldSet))
            {
                throw error("@SCM:UpdateSearchDataWithProductSearchLookupEnabledError");
            }
        }
        
        // Delete all search records for selected type
        MCRFullTextSearch::truncate(mcrFullTextSearchType);

        RecordInsertList insertList = this.initializeInsertList();
        this.populateInsertList(insertList, searchView, fieldSet);
        insertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInsertList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the record insert list for search records.
    /// </summary>
    /// <returns>
    ///    The <c>RecordInsertList</c> instance.
    /// </returns>
    protected RecordInsertList initializeInsertList()
    {
        RecordInsertList insertList = mcrFullTextSearchType == MCRFullTextSearchType::Item ?
                                            new RecordInsertList(tableNum(MCRInventTableIndex)):
                                            new RecordInsertList(tableNum(MCRCustTableIndex));
        return insertList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInsertList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the record insert list for search records.
    /// </summary>
    /// <param name = "_insertList">
    ///     The <c>RecordInsertList</c> instance.
    /// </param>
    /// <param name = "_searchView">
    ///     The MCRProductSearchView used to search records.
    /// </param>
    /// <param name = "_fieldSet">
    ///     Set of MCRProductSearchView field names used to search records.
    /// </param>
    private void populateInsertList(RecordInsertList _insertList, Common _searchView , Set _fieldSet)
    {
        while select _searchView
        {
            Common searchRecord = MCRFullTextSearch::getSearchRecordFromView(_searchView, _fieldSet);
            if (this.includeRecordInInsertList(searchRecord))
            {
                _insertList.add(searchRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeRecordInInsertList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the search record can be included in the record insert list.
    /// </summary>
    /// <param name = "_searchRecord">
    ///     The search record to be inserted to the index table.
    /// </param>
    /// <returns>
    ///     true if the search record can be included in the record insert list; otherwise, false.
    /// </returns>
    protected boolean includeRecordInInsertList(Common _searchRecord)
    {
        switch (_searchRecord.TableId)
        {
            case tableNum(MCRCustTableIndex):
            case tableNum(MCRInventTableIndex):
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = runbase::getVersion(packedClass);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the selected search type has a view setup.
    /// </summary>
    /// <param name="calledFrom">
    /// Calling object.
    /// </param>
    /// <returns>
    /// true if everything is correctly setup; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// A <c>MCRFullTextIndexField</c> must be setup for the selected search type.
    /// </exception>
    public boolean validate(Object calledFrom = null)
    {
        boolean                 ret;
        TableNameShort          viewName = MCRFullTextIndexField::viewFromEnum(mcrFullTextSearchType);
        MCRFullTextIndexField   mcrFullTextIndexField;

        ret = super(calledFrom);

        if (ret)
        {
            // Check setup, make sure atleast one field
            //  has been chosen for the selected type
            select firstOnly RecId from mcrFullTextIndexField
                where mcrFullTextIndexField.Source == viewName;

            if (!mcrFullTextIndexField)
            {
                throw error("@MCR35741");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        MCRFullTextSearchRefresh  mcrFullTextSearchRefresh;
        mcrFullTextSearchRefresh = new MCRFullTextSearchRefresh(_args);

        if (mcrFullTextSearchRefresh.prompt())
        {
            mcrFullTextSearchRefresh.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if saved last value is used.
    /// </summary>
    /// <returns>false.</returns>
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>