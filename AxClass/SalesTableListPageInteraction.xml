<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesTableListPageInteraction extends SysListPageInteractionBase
{
    private SalesInstrumentationLogger instrumentationLogger;

    SalesTableMenuItemFormView menuItemFormView;
    SalesTableInteractionHelper salesTableInteractionHelper;

    boolean     quotationJournalExists;
    boolean     confirmationJournalExists;
    boolean     pickingListJournalExists;
    boolean     packingSlipJournalExists;
    boolean     invoiceJournalExists;

    // <GEERU>
    boolean     invoice4PaymJournalExists;
    boolean     factureJournalExists;
    // </GEERU>

    boolean     canConfirmationBeUpdated;
    boolean     canPickingListBeUpdated;
    boolean     canPickingListBeRegistrated;
    boolean     canPackingSlipBeUpdated;
    boolean     canInvoiceBeUpdated;

    // <GBR>
    boolean     canDeliverySlipBeUpdated_BR;
    boolean     canFiscalDocTextBeRegistrated_BR;
    // </GBR>

    // <GEERU>
    boolean     canInvoice4PaymBeUpdated;
    boolean     canFactureBeUpdated;
    boolean     canCommFactureBeUpdated;
    // </GEERU>

    boolean     useQualityManagement;

    PurchTable  purchTable;
    RecId       salesTableRecid;

    // <GEERU>
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PurchTable</c> record related to the current sales order.
    /// </summary>
    /// <returns>The <c>PurchTable</c> record related to the current sales order.</returns>
    protected PurchTable currentPurchTable()
    {
        SalesTable  salesTable = this.currentSalesTable();

        if (salesTableRecid != salesTable.RecId)
        {
            purchTable = salesTable.referencePurchTable();
            salesTableRecid = salesTable.RecId;
        }
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentSalesTable</Name>
				<Source><![CDATA[
    protected SalesTable currentSalesTable()
    {
        return this.listPage().activeRecord(queryDataSourceStr(SalesTableListPage, SalesTable)) as SalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableAttributeButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the attribute button should be enabled.
    /// </summary>
    /// <returns>
    ///   true if the button should be enabled; Otherwise, false.
    /// </returns>
    public boolean enableAttributeButton()
    {
        // If retail config key is enabled, this method
        // should return true.
        return isConfigurationkeyEnabled(configurationKeyNum(Retail));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableTemplateButton</Name>
				<Source><![CDATA[
    boolean enableTemplateButton()
    {
        return (this.currentSalesTable().RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVisible</Name>
				<Source><![CDATA[
    private boolean isVisible(FormControlName formControl)
    {
        return this.listPage().actionPaneControlVisible(formControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectionCheckIfUpdateContract</Name>
				<Source><![CDATA[
    private SalesTableCheckIfUpdateContract getSelectionCheckIfUpdateContract()
    {
        SalesTableCheckIfUpdateContract checkIfContract = SalesTableCheckIfUpdateContract::construct();
        // <GEERU>
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        if (this.isVisible(formControlStr(SalesTableListPage, buttonUpdateConfirmation)) ||
            this.isVisible(formControlStr(SalesTableListPage, buttonProformaConfirmation)) ||
            this.isVisible(formControlStr(SalesTableListPage, buttonProcessEventKanbans)) ||
            this.isVisible(formControlStr(SalesTableListPage, Generate)))
        {
            checkIfContract.parmCheckConfirmation(true);
        }
        
        if (this.isVisible(formControlStr(SalesTableListPage, buttonUpdatePickingList)))
        {
            checkIfContract.parmCheckPickingList(true);
        }

        if (this.isVisible(formControlStr(SalesTableListPage, buttonUpdatePickingListRegistrate)))
        {
            checkIfContract.parmCheckPickingListRegistration(true);
        }

        if (this.isVisible(formControlStr(SalesTableListPage, buttonUpdatePackingSlip)) ||
            this.isVisible(formControlStr(SalesTableListPage, buttonProformaPackingSlip)))
        {
            checkIfContract.parmCheckPackingSlip(true);
        }

        if (this.isVisible(formControlStr(SalesTableListPage, buttonUpdateInvoice)) ||
            this.isVisible(formControlStr(SalesTableListPage, buttonProformaInvoice)) ||
            this.isVisible(formControlStr(SalesTableListPage, issueInvoice)))
        {
            checkIfContract.parmCheckInvoice(true);
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            checkIfContract.parmCheckInvoice4Paym_RU(true);
            checkIfContract.parmCheckFacture_RU(true);
            checkIfContract.parmCheckCommFacture_RU(true);
        }
        // </GEERU>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            checkIfContract.parmCheckDeliverySlip_BR(true);
            checkIfContract.parmCheckFiscalDocumentText_BR(true);
        }
        // </GBR>

        return checkIfContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCanBeUpdated</Name>
				<Source><![CDATA[
    private void initCanBeUpdated()
    {
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        SalesTableCheckIfUpdateContract checkIfContract = this.getSelectionCheckIfUpdateContract();

        SalesTable salesTable = this.currentSalesTable();
        container canBeUpdated = salesTable.checkIfUpdate(checkIfContract.pack());
        SalesTableCanBeUpdatedContract canBeUpdatedContract = SalesTableCanBeUpdatedContract::create(canBeUpdated);

        canConfirmationBeUpdated    = canBeUpdatedContract.parmCanConfirmationBeUpdated();
        canPickingListBeUpdated     = canBeUpdatedContract.parmCanPickingListBeUpdated();
        canPickingListBeRegistrated = canBeUpdatedContract.parmCanPickingListBeRegistrated();
        canPackingSlipBeUpdated     = canBeUpdatedContract.parmCanPackingSlipBeUpdated();
        canInvoiceBeUpdated         = canBeUpdatedContract.parmCanInvoiceBeUpdated();

        SalesTableFormJournalButtonState buttonState = SalesTableFormJournalButtonState::construct();
        FormDataSource salesTable_ds = FormDataUtil::getFormDataSource(salesTable);

        buttonState.parmFormRun(salesTable_ds.formRun());
        buttonState.parseCanBeUpdatedContract(canBeUpdatedContract);
        buttonState.applyState();

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            canDeliverySlipBeUpdated_BR = canBeUpdatedContract.parmCanDeliverySlipBeUpdated_BR();
            canPackingSlipBeUpdated = canPackingSlipBeUpdated && !canDeliverySlipBeUpdated_BR;
            canFiscalDocTextBeRegistrated_BR = canBeUpdatedContract.parmCanFiscalDocTextBeRegistrated_BR();
        }
        // </GBR>

        // <GEERU>
        if (countryRegion_RU)
        {
            canInvoice4PaymBeUpdated    = canBeUpdatedContract.parmCanInvoice4PaymBeUpdated_RU();
            canFactureBeUpdated         = canBeUpdatedContract.parmCanFactureBeUpdated_RU();
            canCommFactureBeUpdated     = canBeUpdatedContract.parmCanCommFactureBeUpdated_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    public void initializeQuery(Query _query)
    {
        if (this.listPage().listPageArgs() &&
            this.listPage().listPageArgs().externalRecord() &&
            this.listPage().listPageArgs().externalRecord().TableId == tableNum(ProjInvoiceTable))
        {
            var projInvoiceTable = this.listPage().listPageArgs().externalRecord() as ProjInvoiceTable;
            var qbds = _query.dataSourceTable(tableNum(SalesTable)).addDataSource(tableNum(ProjTable));
            qbds.relations(true);
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addRange(fieldNum(ProjTable,ProjInvoiceProjId)).value(queryValue(projInvoiceTable.ProjInvoiceProjId));
        }

        super(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the list page type and the modeledQueryName during the initialization of the list page.
    /// </summary>
    public void initializing()
    {
        useQualityManagement = InventParameters::find().UseQualityManagement;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalExists</Name>
				<Source><![CDATA[
    private void initJournalExists()
    {
        QuotationId         quotationId;
        TransDate           quotationDate;
        ConfirmId           confirmId;
        TransDate           confirmDate;
        WMSPickingRouteID   pickingListId;
        TransDate           pickingListDate;
        PackingSlipId       packingSlipId;
        TransDate           packingSlipDate;
        InvoiceId           invoiceId;
        TransDate           invoiceDate;

        // <GEERU>
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        FactureId_RU        factureId;
        FactureDate_RU      factureDate;
        Invoice4PaymId_RU   invoice4PaymId;
        Invoice4PaymDate_RU invoice4PaymDate;
        // </GEERU>

        if (this.currentSalesTable().DocumentStatus || this.currentSalesTable().QuotationId)
        {
            container lastJournals = this.currentSalesTable().lastJournals();

            [quotationId,   quotationDate]      = conPeek(lastJournals, SalesTableType::posQuotation());
            quotationJournalExists = quotationId ? true : false;
            [confirmId,     confirmDate]        = conPeek(lastJournals, SalesTableType::posConfirmation());
            confirmationJournalExists = confirmId ? true : false;
            [pickingListId, pickingListDate]    = conPeek(lastJournals, SalesTableType::posPickingList());
            pickingListJournalExists = pickingListId ? true : false;
            [packingSlipId, packingSlipDate]    = conPeek(lastJournals, SalesTableType::posPackingSlip());
            packingSlipJournalExists = packingSlipId ? true : false;
            [invoiceId,     invoiceDate]        = conPeek(lastJournals, SalesTableType::posInvoice());
            invoiceJournalExists        = invoiceId ? true : false;
            // <GEERU>
            if (countryRegion_RU)
            {
                [invoice4PaymId, invoice4PaymDate] = conPeek(lastJournals, SalesTableType::posInvoice4Paym_RU());
                invoice4PaymJournalExists          = invoice4PaymId ? true : false;
                [factureId, factureDate]           = conPeek(lastJournals, SalesTableType::posFacture_RU());
                factureJournalExists               = factureId ? true : false;
            }
            // </GEERU>
        }
        else
        {
            quotationJournalExists      = false;
            confirmationJournalExists   = false;
            pickingListJournalExists    = false;
            packingSlipJournalExists    = false;
            invoiceJournalExists        = false;

            // <GEERU>
            if (countryRegion_RU)
            {
                invoice4PaymJournalExists = false;
                factureJournalExists      = false;
            }
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrEnableButtons</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Enables or disables buttons for a sales table form.
    /// </summary>
    private void mcrEnableButtons()
    {
        SalesTable salesTable = this.currentSalesTable();

        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, MCROrderHolds), salesTableInteractionHelper.parmMCROrderHoldsEnabled());

        if (this.listPage().actionPaneControlVisible(formControlStr(SalesTableListPage, MCRCreateCustHeaderCredit)))
        {
            if (salesTableInteractionHelper.parmMCROrderPriceControlEnabled())
            {
                // Do not allow customer credit creation if the order is not at least
                // partially invoiced
                this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, MCRCreateCustHeaderCredit),
                                                            MCRCustomerCredits::canCreditHeader(salesTable));
            }
            else
            {
                this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, MCRCreateCustHeaderCredit), false);
            }
        }

        if (this.listPage().actionPaneControlVisible(formControlStr(SalesTableListPage, MCRCustPaymTableButton)))
        {
            if (salesTableInteractionHelper.parmMCROrderCompletionEnabled())
            {
                this.listPage().actionPaneControlEnabled(formControlStr(salesTableListPage, CreditCard), false);
                // Allow access will be set to false when the salesTableType is project.
                boolean allowAccess = salesTable.type().mcrAllowPaymentAccess();
                this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, MCRCustPaymTableButton), allowAccess);
                // Set recap if allowing edit.
                this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, MCRRecap), allowAccess);
            }
            else if (RetailCommercePaymentsFeatureHelper::commercePaymentsEnabledForOrder(this.currentSalesTable(), funcName()))
            {
                this.listPage().actionPaneControlEnabled(formControlStr(salesTableListPage, CreditCard), false);
                // Allow access will be set to false when the salesTableType is project.
                this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, MCRCustPaymTableButton), salesTable.type().mcrAllowPaymentAccess());
                
                RetailMCRChannelTable channelForCurrentUser = RetailMCRChannelTable::findForCurrentUser();
                boolean enableRecapButtonForCommerceOrders = channelForCurrentUser.ChannelType == RetailChannelType::MCRCallCenter && RetailPaymentsEnableSalesOrderRecapForCommerceOrdersFlight::instance().isEnabled();

                this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, MCRRecap), enableRecapButtonForCommerceOrders);
            }
            else
            {
                this.listPage().actionPaneControlEnabled(formControlStr(salesTableListPage, CreditCard), true);
                this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, MCRCustPaymTableButton), false);
                this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, MCRRecap), false);
            }
        }

        this.listPage().actionPaneControlEnabled(
            formControlStr(SalesTableListPage, RetailCouponUsage),
            salesTable.SalesType == SalesType::Sales && salesTableInteractionHelper.parmIsRetailOrder());
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>SysListPageInteractionBase.selectionChanged</c> method and enables the action pane
    /// buttons.
    /// </summary>
    public void selectionChanged()
    {
        using (var activityContext = instrumentationLogger.salesOrderInteractionActivities().selectionChange(classStr(SalesTableListPageInteraction)))
        {
            container origPackedExtensions = this.currentSalesTable().PackedExtensions;

            salesTableInteractionHelper = SalesTableInteractionHelper::newFromListPage(this.currentSalesTable());
            salesTableInteractionHelper.initHeaderActions(this.currentSalesTable());

            this.initJournalExists();
            this.initCanBeUpdated();

            super();

            SalesTable salesTable = this.currentSalesTable();
            salesTable.PackedExtensions = origPackedExtensions;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables menu items for bank document in the manage action pane tab.
    /// </summary>
    protected void setButtonBankDocument()
    {
        this.listPage().actionPaneControlEnabled(
            formControlStr(SalesTableListPage, buttonCreateBankLCExport),
            salesTableInteractionHelper.parmButtonCreateBankLCExport());
        this.listPage().actionPaneControlEnabled(
            formControlStr(SalesTableListPage, bankLGRequestForm),
            salesTableInteractionHelper.parmButtonBankLGRequestForm());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled property on the action pane buttons.
    /// </summary>
    /// <remarks>
    /// This method should be overridden when you must disable or enable a button in the action pane. The
    /// method is called every time that the selection of the record in the list page changes.
    /// </remarks>
    protected void setButtonEnabled()
    {
        SalesTable salesTable = this.currentSalesTable();
        this.setButtonSalesOrder();
        this.setButtonSellMutliSelection();
        this.setButtonPickAndPackMultiSelection();
        this.setButtonInvoiceMultiSelection();
        this.setButtonInterCompany();
        this.setButtonGeneral();
        this.setButtonBankDocument();
        this.setButtonWHS();
        this.setButtonTMS();
        this.mcrEnableButtons();
        this.setButtonEnabled_BR();
    
        FormDataSource salesTable_ds = FormDataUtil::getFormDataSource(this.currentSalesTable());
        int selectedRows = salesTable_ds.recordsMarked().lastIndex();
        // check if more than one SO is selected
        if ( selectedRows > 1)
        {
            this.enableUpdateJournalButtonsMultipleOrders(salesTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableUpdateJournalButtonsMultipleOrders</Name>
				<Source><![CDATA[
    protected void enableUpdateJournalButtonsMultipleOrders(SalesTable _salesTable)
    {
        SalesTableInteractionHelper::updateStateJournalButtonsMultipleOrders(_salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled property on the action pane buttons.
    /// </summary>
    protected void setButtonEnabled_BR()
    {
        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonUpdateDeliverySlip_BR),       canDeliverySlipBeUpdated_BR);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonHeaderFiscalDocumentText_BR), canFiscalDocTextBeRegistrated_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonGeneral</Name>
				<Source><![CDATA[
    protected void setButtonGeneral()
    {
        //relatedDocumentsGeneral
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, CostControlCommittedCost), this.currentSalesTable().ProjId ? true : false);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, PurchTableGeneral), this.currentPurchTable().RecId != 0);

        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonSalesAgreement), this.currentSalesTable().MatchingAgreement);

        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonReferences),
            salesTableInteractionHelper.parmReferencesEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, ContactPersonButton),
            salesTableInteractionHelper.parmContactPersonExists());

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, HeaderPackageParm), !this.currentSalesTable().ProjId);
        }
        // </GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonInterCompany</Name>
				<Source><![CDATA[
    protected void setButtonInterCompany()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, interCompanySalesTable), this.currentPurchTable().InterCompanySalesId ? true : false);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, interCompanyOriginalSalesTable), this.currentSalesTable().InterCompanyOriginalSalesId ? true : false);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, purchTable), this.currentPurchTable().InterCompanySalesId ? true : false);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, interCompanyPurchTable), this.currentSalesTable().InterCompanyPurchId  ? true : false);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, interCompanyPickinglist), this.canInterCompanyPickingListBeUpdated());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInterCompanyPickingListBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the intercompany picking list form control should be enabled.
    /// </summary>
    /// <returns>true if the intercompany picking list form control should be enabled; otherwise, false.</returns>
    protected boolean canInterCompanyPickingListBeUpdated()
    {
        SalesTable  interCompanySalesOrder = this.currentPurchTable().interCompanySalesTable();

        if (interCompanySalesOrder)
        {
            SalesTableCheckIfUpdateContract checkIfUpdateContract = SalesTableCheckIfUpdateContract::construct();
            checkIfUpdateContract.parmCheckPickingList(true);
            container interCompanyCanBeUpdated = interCompanySalesOrder.checkIfUpdate(checkIfUpdateContract.pack());
            SalesTableCanBeUpdatedContract canBeUpatedContract = SalesTableCanBeUpdatedContract::create(interCompanyCanBeUpdated);

            return canBeUpatedContract.parmCanPickingListBeUpdated();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonInvoice</Name>
				<Source><![CDATA[
    protected void setButtonInvoice()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonUpdateInvoice), canInvoiceBeUpdated);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonProformaInvoice), canInvoiceBeUpdated);
        this.setButtonInvoiceMultiSelection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonInvoiceMultiSelection</Name>
				<Source><![CDATA[
    private void setButtonInvoiceMultiSelection()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonJournalInvoice), (!this.currentSalesTable().ProjId) && invoiceJournalExists);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonPaymentSchedule), (!this.currentSalesTable().returnItem() && (this.currentSalesTable().PaymentSched ? true : false)));

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.listPage().actionPaneControlVisible(formControlStr(SalesTableListPage, buttonUpdateFacture_RU), canInvoiceBeUpdated);
            this.listPage().actionPaneControlVisible(formControlStr(SalesTableListPage, buttonProformaFacture_RU), canInvoiceBeUpdated);

            this.listPage().actionPaneControlVisible(formControlStr(SalesTableListPage, FactureEditLinesCust_RU), !canInvoiceBeUpdated);
            this.listPage().actionPaneControlVisible(formControlStr(SalesTableListPage, FactureEditLinesCust_Proforma_RU), !canInvoiceBeUpdated);

            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, FactureEditLinesCust_RU), canFactureBeUpdated && canCommFactureBeUpdated);
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, FactureEditLinesCust_Proforma_RU), canFactureBeUpdated && canCommFactureBeUpdated);
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonUpdateFacture_RU), canCommFactureBeUpdated);
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonProformaFacture_RU), canCommFactureBeUpdated);
  
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, issueInvoice), canInvoiceBeUpdated || canFactureBeUpdated);

            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonJournalFacture_RU), factureJournalExists);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonPickAndPack</Name>
				<Source><![CDATA[
    protected void setButtonPickAndPack()
    {
        this.setButtonPickAndPackMultiSelection();
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonUpdatePickingList), canPickingListBeUpdated);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonUpdatePickingListRegistrate), canPickingListBeRegistrated);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonUpdatePackingSlip), canPackingSlipBeUpdated);
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonProformaPackingSlip), canPackingSlipBeUpdated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonPickAndPackMultiSelection</Name>
				<Source><![CDATA[
    private void setButtonPickAndPackMultiSelection()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonJournalPickingList), (!this.currentSalesTable().returnItem() && pickingListJournalExists));
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonJournalPackingSlip), packingSlipJournalExists);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables Sales order action pane tab menu items.
    /// </summary>
    protected void setButtonSalesOrder()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, SalesCopyAllHeader), !salesTableInteractionHelper.parmReturnItem());
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, SalesCopyJournalHeader), !salesTableInteractionHelper.parmReturnItem());
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonCreatePurchOrder), salesTableInteractionHelper.parmCanCreatePurchOrder());
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonCreateDropShipment), salesTableInteractionHelper.parmCanCreateDropShipment());
        this.listPage().actionPaneControlEnabled(formControlStr(salesTableListPage, CancelOrderButton), salesTableInteractionHelper.parmCanCancel());

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, btngrpAttribute), this.enableAttributeButton());
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTable, AffiliationsButtonGroup), salesTableInteractionHelper.parmIsRetailOrder());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonSell</Name>
				<Source><![CDATA[
    protected void setButtonSell()
    {
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        
        if (countryRegion_RU)
        {
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonUpdateConfirmation), canConfirmationBeUpdated);
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonProformaConfirmation), canConfirmationBeUpdated);
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonUpdateConfirm), canConfirmationBeUpdated);
        }

        this.setButtonSellMutliSelection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonSellMutliSelection</Name>
				<Source><![CDATA[
    private void setButtonSellMutliSelection()
    {
        SalesTableType      salesTableType = this.currentSalesTable().type();
        boolean             allowDelete = salesTableType.checkDelete(false, true);
        boolean             allowUpdate = salesTableType.checkUpdate(false, false);

        // <GEERU>
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        if (countryRegion_RU)
        {
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonCalculateConfirmDates), canConfirmationBeUpdated);
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonProcessEventKanbans), canConfirmationBeUpdated);
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonUpdateInvoice4Paym_RU), canInvoice4PaymBeUpdated);
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonProformaInvoice4Paym_RU), canInvoice4PaymBeUpdated);
        }
        // </GEERU>

        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, Generate), canConfirmationBeUpdated || canInvoice4PaymBeUpdated);

        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonJournalConfirmation), confirmationJournalExists && !this.currentSalesTable().returnItem());
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, QuotationConfirmationJournal), quotationJournalExists);

        FormDataSource salesTable_ds = FormDataUtil::getFormDataSource(this.currentSalesTable());
        if (salesTable_ds)
        {
            salesTable_ds.allowDelete(allowDelete);
        }

        // Calculate group controls
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, MultiLnDisc), !salesTableInteractionHelper.parmInterCompanyPOInvoiceMatched());
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, EndDisc), !salesTableInteractionHelper.parmInterCompanyPOInvoiceMatched());
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, SuppItemCalc_SalesHeader), salesTableInteractionHelper.parmSuppItemCalcEnabledHeader());
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, SalesCreditNote), salesTableInteractionHelper.parmCanCreditNoteBeCreated());
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, TieredCharges), salesTableInteractionHelper.parmButtonTieredChargesEnabled());
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, AutoCharges), salesTableInteractionHelper.parmButtonAutoChargesEnabled());
        this.listPage().actionPaneControlVisible(formControlStr(SalesTableListPage, AutoCharges), salesTableInteractionHelper.parmButtonAutoChargesVisible());

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, buttonJournalInvoice4Paym_RU), invoice4PaymJournalExists);
        }
        // </GEERU>

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, MenuItemSalesPrepayment), this.currentSalesTable().SalesStatus != SalesStatus::Invoiced);

            // disable multiline and total discount buttons for Retail orders
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTable, MultiLnDisc), !salesTableInteractionHelper.parmIsRetailOrder());
            this.listPage().actionPaneControlEnabled(formControlStr(SalesTable, EndDisc), !salesTableInteractionHelper.parmIsRetailOrder());
        }

        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, CFMPaymentRequestView), salesTableInteractionHelper.parmCFMPaymentRequestViewEnabled());

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.listPage().actionPaneControlVisible(formControlStr(SalesTableListPage, TaxDocumentLauncher), true);
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonTMS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the menu items located on the header action pane tab page named transportation management.
    /// </summary>
    protected void setButtonTMS()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, TMSInvoiceJournal), salesTableInteractionHelper.parmTMSInvoiceJournalButtonEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility property on the buttons in the action pane.
    /// </summary>
    /// <remarks>
    /// This method should be overridden when they must hide a button in the action pane at runtime. This
    /// method is only called one time when the list page is opened.
    /// </remarks>
    [HookableAttribute(true)]
    protected void setButtonVisibility()
    {
        boolean enableLCFeature = BankLCExportFeatureChecker::construct().checkFeatureEnabled();
        boolean enableLGFeature = BankLGFeatureChecker::construct().checkFeatureEnabled();

        this.listPage().actionPaneControlVisible(formControlStr(SalesTableListPage, buttonCreateBankLCExport), enableLCFeature);
        this.listPage().actionPaneControlVisible(formControlStr(SalesTableListPage, bankLGRequestForm), enableLGFeature);

        menuItemFormView.setButtonVisibility();

        this.listPage().actionPaneControlVisible(formControlStr(SalesTableListPage, ManageQuality), useQualityManagement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonWHS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the menu items located on the header action pane tab page named warehouse management.
    /// </summary>
    protected void setButtonWHS()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(SalesTableListPage, btnLoadTable), salesTableInteractionHelper.parmWHSLoadDetailsButtonEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the caption on the list page.
    /// </summary>
    /// <remarks>
    /// This method should be overridden when they must change the form caption at runtime. The method is
    /// only called one time when the list page is opened.
    /// </remarks>
    protected void setCaption()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGridFieldVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility property on the grid fields.
    /// </summary>
    /// <remarks>
    /// This method should be overridden when they must hide a field in the grid at runtime. The method is
    /// only called one time when the list page is opened.
    /// </remarks>
    protected void setGridFieldVisibility()
    {
        super();

        menuItemFormView.setGridFieldVisibility();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListPageType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the context in which the list page is opened.
    /// </summary>
    /// <param name="_listPageArgs">
    /// A <c>ListPageArgs</c> object.
    /// </param>
    /// <remarks>
    /// This method can be overridden when the list page is used as a secondary list page to store the list
    /// page type a class variable.
    /// </remarks>
    protected void setListPageType(ListPageArgs _listPageArgs)
    {
        menuItemFormView = SysListPageMenuItemFormView::newFromListPageInteraction(this, classNum(SalesTableMenuItemFormView)) as SalesTableMenuItemFormView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(ListPage _listPage)
    {
        instrumentationLogger = SalesInstrumentationLogger::createLogger(classStr(SalesTableListPageInteraction));
        super(_listPage);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>