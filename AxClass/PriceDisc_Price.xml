<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDisc_Price</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PriceDisc_Price
{
    ModuleInventPurchSales  moduleType;
    ItemId                  itemId;
    InventDim               inventDim;
    UnitOfMeasureSymbol     unitID;
    TransDate               priceDate;
    Qty                     qty;
    Qty                     retailGroupQty;
    CustVendAC              accountNum;
    CurrencyCode            currencyCode;
    PriceGroupId            priceGroupId;
    Num                     orderNum;

    Days                    deliveryDays;
    CalendarDays            calendarDays;
    PriceUnit               priceUnit;
    PriceMarkup             priceMarkup;
    PriceCur                price;

    // <GEERU>
    AgreementHeaderExtRecId_RU agreementHeaderExtRecId;
    CustVendAC              agreementPartnerCode;
    NoYes                   ruAgreementExists;
    boolean                 countryRegion_RU;
    InventBaileeFreeDays_RU inventBaileeFreeDays;
    // </GEERU>

    boolean                 priceFound;
    boolean                 inventDimIsUpdated;
    boolean                 useRetailPricing;

    PDSCalculationId        pdsCalculationId;
    // <GIN>
    PriceCur                maxRetailPrice;
    boolean                 countryRegion_IN;
    #ISOCountryRegionCodes
    // </GIN>
    // <GIN><GEERU>
    #ISOCountryRegionCodes
    // </GEERU></GIN>
    NoYes                   priceAgreementExist;

    private SalesPurchLineInterface salesPurchLineInterface;

    // Stores all found priceDiscTable records
    RecordSortedList        recordSortedListPriceDiscTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementExists_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether an agreement exists for an item or account combination.
    /// </summary>
    /// <returns>
    ///    A <c>NoYes::Yes</c> enumeration value of Yes if a discount agreement exists; otherwise, a
    ///    <c>NoYes::No</c> enumeration value.
    /// </returns>
    public NoYes agreementExists_RU()
    {
        this.findPriceAgreement();

        return ruAgreementExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calendarDays</Name>
				<Source><![CDATA[
    public CalendarDays calendarDays()
    {
        this.findPriceAgreement();

        return calendarDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDays</Name>
				<Source><![CDATA[
    public Days deliveryDays()
    {
        this.findPriceAgreement();

        return deliveryDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the price agreements based on the parmeters set on the instance of the class.
    /// </summary>
    public void findPriceAgreement()
    {
        container           recordListContainer;
        SysRecordSortedList recordSortedList;

        if (priceFound)
        {
            return;
        }

        if (inventDimIsUpdated)
        {
            inventDim           = InventDim::findOrCreate(inventDim);
            inventDimIsUpdated  = false;
        }
        
        PriceDiscParameters parameters = this.createAndInitPriceDiscParameters();
        PriceDisc priceDisc = this.createPriceDiscInstance(parameters);
        TradeAgreementInstrumentationLogger tradeAgreementInstrumentationLogger = TradeAgreementInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = tradeAgreementInstrumentationLogger.tradeAgreementPriceDisc_PriceActivities().findPriceAgreement())
        {
            tradeAgreementInstrumentationLogger.logInformation(TradeAgreementInstrumentationPriceDisc_PriceActivities::serializeBasicRunParameters(parameters).toString());

            if (parameters.parmUseRetailPricing())
            {
                priceAgreementExist = this.findPriceAgreementForRetail(parameters, priceDisc);
            }
            else
            {
                priceAgreementExist = priceDisc.findPrice(this.parmPriceGroupId());
            }
        }
        this.retrieveAndSetPriceFields(priceDisc);

        priceFound = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPriceAgreementForRetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the price agreements based on the parmeters set on the instance of the class for retail sales order and quotation.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>PriceDiscParameters</c> class.</param>
    /// <param name = "_priceDisc">An instance of the <c>PriceDisc</c> class.</param>
    /// <returns>Yes if price agreement is found, otherwise return No.</returns>
    public NoYes findPriceAgreementForRetail(PriceDiscParameters _parameters, PriceDisc _priceDisc)
    {
        // Loop affiliation price group

        SalesTable salesTable;
        SalesQuotationTable salesQuotationTable ;
        RetailAffiliation affiliation;
        RetailSalesAffiliation salesAffiliation ;
        RetailSalesQuotationAffiliation salesQuotationAffiliation ;
        RetailAffiliationPriceGroup affiliationPriceGroup ;
        PriceDiscGroup priceDiscGroup ;

        if (_parameters.parmOrderNum() && this.parmSalesPurchLineInterface())
        {
            boolean notUseItemPrice = PriceNotUseItemPriceFindFlight::instance().isEnabled();

            if (this.parmSalesPurchLineInterface() is SalesLineSalesPurchLine)
            {
                while select salesAffiliation join affiliation join affiliationPriceGroup  join priceDiscGroup
                        where affiliationPriceGroup.RetailAffiliation == affiliation.RecId && affiliation.RecId == salesAffiliation.Affiliation && salesAffiliation.SalesId == _parameters.parmOrderNum()
                        && affiliationPriceGroup.PriceDiscGroup == priceDiscGroup.RecId
                {
                    priceAgreementExist = _priceDisc.findPrice(priceDiscGroup.GroupId, notUseItemPrice ? false : true);
                    if (priceAgreementExist == NoYes::Yes)
                    {
                        break;
                    }
                }
            }

            if (this.parmSalesPurchLineInterface() is SalesQuotationLineSalesPurchLine)
            {
                while select salesQuotationAffiliation join affiliation join affiliationPriceGroup  join priceDiscGroup
                        where affiliationPriceGroup.RetailAffiliation == affiliation.RecId && affiliation.RecId == salesQuotationAffiliation.Affiliation && salesQuotationAffiliation.QuotationId == _parameters.parmOrderNum()
                        && affiliationPriceGroup.PriceDiscGroup == priceDiscGroup.RecId
                {
                    priceAgreementExist = _priceDisc.findPrice(priceDiscGroup.GroupId, notUseItemPrice ? false : true);
                    if (priceAgreementExist == NoYes::Yes)
                    {
                        break;
                    }
                }
            }
        }

        // Affiliation price group trade agreement not found, use default.
        if (priceAgreementExist == NoYes::No)
        {
            priceAgreementExist = _priceDisc.findPrice(this.parmPriceGroupId());
        }

        return priceAgreementExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveAndSetPriceFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fields from PriceDisc.
    /// </summary>
    /// <param name = "_priceDisc">An instance of the <c>PriceDisc</c> class with prices and discounts calculated.</param>
    protected void retrieveAndSetPriceFields(PriceDisc _priceDisc)
    {
        price  = _priceDisc.price();
        priceMarkup = _priceDisc.markup();
        priceUnit = _priceDisc.priceUnit();
        deliveryDays = _priceDisc.deliveryDays();
        calendarDays = _priceDisc.calendarDays();
        pdsCalculationId =  _priceDisc.parmPDSCalculationId();
        this.parmMCRPriceDiscTableList(_priceDisc.parmMCRPriceDiscTableList());

        maxRetailPrice = _priceDisc.maxRetailPrice_IN();
        ruAgreementExists = _priceDisc.parmPriceDiscParameters().parmAgreementExists_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createPriceDiscParameters()
    {
        return PriceDiscParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createAndInitPriceDiscParameters()
    {
        PriceDiscParameters parameters = this.createPriceDiscParameters();

        parameters.parmModuleType(this.parmModuleType());
        parameters.parmItemId( this.parmItemId());
        parameters.parmInventDim(this.parmInventDim());
        parameters.parmUnitID(this.parmUnitID());
        parameters.parmPriceDiscDate(this.parmPriceDate());
        parameters.parmQty(this.parmQty());
        parameters.parmAccountNum(this.parmAccountNum());
        parameters.parmCurrencyCode(this.parmCurrencyCode());

        parameters.parmAgreementHeaderExt_RU(this.parmAgreementHeaderExt_RU());
        parameters.parmAgreementPartnerCode_RU(this.parmAgreementPartnerCode_RU());
        parameters.parmUseRetailPricing(this.parmUseRetailPricing());

        if (parameters.parmUseRetailPricing())
        {
            parameters.parmOrderNum(this.orderNum);
            parameters.parmRetailGroupQty(this.parmRetailGroupQty());
        }

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDisc</c> class.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>PriceDiscParameters</c> class.</param>
    /// <returns>An instance of the <c>PriceDisc</c> class.</returns>
    protected PriceDisc createPriceDiscInstance(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventBaileeFreeDays_RU</Name>
				<Source><![CDATA[
    public InventBaileeFreeDays_RU inventBaileeFreeDays_RU()
    {
        this.findPriceAgreement();

        return inventBaileeFreeDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEqual</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified instance of the <c>PriceDisc_Price</c> class is equal to this
    ///    instance.
    /// </summary>
    /// <param name="_priceDisc">
    ///    An instance of the <c>PriceDisc_Price</c> class to check for equality.
    /// </param>
    /// <returns>
    ///    true if the specified object is equal; otherwise, false.
    /// </returns>
    public boolean isEqual(PriceDisc_Price _priceDisc)
    {
        return (_priceDisc.parmModuleType()     == moduleType           &&
                _priceDisc.parmItemId()         == itemId               &&
                _priceDisc.parmUnitID()         == unitID               &&
                _priceDisc.parmPriceDate()      == priceDate            &&
                _priceDisc.parmQty()            == qty                  &&
                _priceDisc.parmAccountNum()     == accountNum           &&
                _priceDisc.parmCurrencyCode()   == currencyCode         &&
                InventDim::isInventDimEqual(_priceDisc.parmInventDim(), inventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxRetailPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets max retail price.
    /// </summary>
    /// <returns>
    /// The instance of the <c>PriceCur</c> class.
    /// </returns>
    public PriceCur maxRetailPrice_IN()
    {
        this.findPriceAgreement();

        return maxRetailPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
             AgreementHeaderExtRecId_RU _agreementHeaderExtRecId = 0,
             CustVendAC                 _agreementPartnerCode = ''
    )
    {
        currencyCode    = Ledger::accountingCurrency(CompanyInfo::current());
        priceDate       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        priceFound      = false;

        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        if (countryRegion_RU)
        {
            agreementHeaderExtRecId = _agreementHeaderExtRecId;
            agreementPartnerCode = _agreementPartnerCode;
        }
        // </GEERU>
        // <GIN>
        countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountNum</Name>
				<Source><![CDATA[
    public CustVendAC parmAccountNum(CustVendAC _accountNum = accountNum)
    {
        if (_accountNum != accountNum)
        {
            priceFound = false;
        }

        accountNum = _accountNum;
        return accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementHeaderExt_RU</Name>
				<Source><![CDATA[
    public AgreementHeaderExtRecId_RU parmAgreementHeaderExt_RU(AgreementHeaderExtRecId_RU _agreementHeaderExtRecId = agreementHeaderExtRecId)
    {
        if (_agreementHeaderExtRecId != agreementHeaderExtRecId)
        {
            priceFound = false;
        }
        agreementHeaderExtRecId = _agreementHeaderExtRecId;
        return agreementHeaderExtRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementPartnerCode_RU</Name>
				<Source><![CDATA[
    public CustVendAC parmAgreementPartnerCode_RU(CustVendAC _agreementPartnerCode = agreementPartnerCode)
    {
        if (_agreementPartnerCode != agreementPartnerCode)
        {
            priceFound = false;
        }
        agreementPartnerCode = _agreementPartnerCode;
        return agreementPartnerCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        if (_currencyCode != currencyCode)
        {
            priceFound = false;
        }

        currencyCode = _currencyCode;
        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventDim(InventDim _inventDim = inventDim.data())
    {
        if (!prmisDefault(_inventDim) && !InventDim::isInventDimEqual(_inventDim, inventDim))
        {
            priceFound          = false;
            inventDimIsUpdated  = true;
        }

        inventDim = _inventDim.data();
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        if (_itemId != itemId)
        {
            priceFound = false;
        }

        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRPriceDiscTableList</Name>
				<Source><![CDATA[
    public RecordSortedList parmMCRPriceDiscTableList(RecordSortedList _recordSortedList = recordSortedListPriceDiscTable)
    {
        recordSortedListPriceDiscTable = _recordSortedList;
        return recordSortedListPriceDiscTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    public ModuleInventPurchSales parmModuleType(ModuleInventPurchSales _moduleType = moduleType)
    {
        if (_moduleType != moduleType)
        {
            priceFound = false;
        }

        moduleType = _moduleType;
        return moduleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderNum</Name>
				<Source><![CDATA[
    public Num parmOrderNum(Num _orderNum = orderNum)
    {
        if (_orderNum != orderNum)
        {
            priceFound = false;
        }

        orderNum = _orderNum;
        return orderNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDate</Name>
				<Source><![CDATA[
    public TransDate parmPriceDate(TransDate _priceDate = priceDate)
    {
        if (_priceDate != priceDate)
        {
            priceFound = false;
        }

        priceDate = _priceDate;
        return priceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceGroupId</Name>
				<Source><![CDATA[
    public PriceGroupId parmPriceGroupId(PriceGroupId _priceGroupId = priceGroupId)
    {
        if (_priceGroupId != priceGroupId)
        {
            priceFound = false;
        }

        priceGroupId = _priceGroupId;
        return priceGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    public Qty parmQty(Qty _qty = qty)
    {
        if (_qty != qty)
        {
            priceFound = false;
        }

        qty = _qty;
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailGroupQty</Name>
				<Source><![CDATA[
    public Qty parmRetailGroupQty(Qty _qty = retailGroupQty)
    {
        if (_qty != retailGroupQty)
        {
            priceFound = false;
        }

        retailGroupQty = _qty;
        return retailGroupQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitID</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUnitID(UnitOfMeasureSymbol _unitId = unitId)
    {
        if (_unitId != unitId)
        {
            priceFound = false;
        }
        unitId = _unitId;
        return unitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseRetailPricing</Name>
				<Source><![CDATA[
    public boolean parmUseRetailPricing(boolean _useRetailPricing = useRetailPricing)
    {
        useRetailPricing = _useRetailPricing;
        return useRetailPricing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchLineInterface</Name>
				<Source><![CDATA[
    public SalesPurchLineInterface parmSalesPurchLineInterface(SalesPurchLineInterface _salesPurchLineInterface = salesPurchLineInterface)
    {
        salesPurchLineInterface = _salesPurchLineInterface;
        return salesPurchLineInterface;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCalculationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the advanced pricing calculation ID for this price agreement.
    /// </summary>
    /// <returns>
    /// The advanced pricing calculation ID.
    /// </returns>
    public PDSCalculationId pdsCalculationId()
    {
        this.findPriceAgreement();

        return pdsCalculationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>price</Name>
				<Source><![CDATA[
    public PriceCur price()
    {
        this.findPriceAgreement();

        return price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceAgreementExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a price agreement exists for an item or account combination.
    /// </summary>
    /// <returns>
    /// A <c>NoYes::Yes</c> enumeration value if a price agreement exists; otherwise, a <c>NoYes::No</c>
    /// enumeration value.
    /// </returns>
    public NoYes priceAgreementExist()
    {
        return priceAgreementExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceMarkup</Name>
				<Source><![CDATA[
    public PriceMarkup priceMarkup()
    {
        this.findPriceAgreement();

        return priceMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceUnit</Name>
				<Source><![CDATA[
    public PriceUnit priceUnit()
    {
        this.findPriceAgreement();

        return priceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>PriceDisc_Price</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>PriceDisc_Price</c> class.
    /// </returns>
    /// <remarks>
    ///  Use the following procedure to customize or extend the
    ///  <c>
    ///  PriceDisc_Price
    ///  </c>
    ///   class.
    ///  <list type="number">
    ///   <item>
    ///    <description>
    ///    Create a new class that derives from <c>PriceDisc_Price</c> .
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Overlayer the <c>construct</c> method on <c>PriceDisc_Price</c> so that it returns an instance of
    ///    the derived class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Override the methods from the <c>PriceDisc_Price</c> class that you want to customize or extend in
    ///    your derived class.
    ///    </description>
    ///   </item>
    ///  </list>
    ///   This procedure helps guarantee that your customizations are maintained if the base version of the
    ///  <c>
    ///  PriceDisc_Price
    ///  </c>
    ///   class is changed, minimizing code conflicts during an upgrade. For more information, see <see cref="Best Practices for Static Construct Methods" />
    ///   .
    /// </remarks>
    public static PriceDisc_Price construct()
    {
        return new PriceDisc_Price();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>