<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveLabelGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveLabelGenerator</c> class is a base class for the generaton of different types of labels.
/// </summary>
public abstract class WHSWaveLabelGenerator
{
    private WHSWorkBuildId	workBuildId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>printWorkListLabels</Name>
				<Source><![CDATA[
	/// <summary>
    /// Prints the list of labels for a list of work using a specific label layout.
    /// </summary>
    /// <param name = "_printLabels">
    /// A <c>WHSPrintLabels</c> object to use for printing the labels.
    /// </param>
    /// <param name = "_warelabelTemplateLine">
    /// A wave label template details record.
    /// </param>
    /// <param name = "_workList">
    /// A <c>List</c> of work IDs.
    /// </param>
    /// <param name = "_workLineList">
    /// A <c>List</c> of work IDs.
    /// </param>
    /// <param name = "_waveLabelBuildId">
    /// The wave label build id.
    /// </param>
    public abstract void printWorkListLabels(
        WHSPrintLabels              _printLabels, 
        WHSWaveLabelTemplateLine    _warelabelTemplateLine,
        List                        _workList, 
        List                        _workLineList,
        WHSWaveLabelBuildId         _waveLabelBuildId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWaveLabelGenerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an instance of <c>WHSWaveLabelGenerator</c> based on the generator.
    /// </summary>
    /// <param name="_labelGeneratorType">
    /// The generator being used.
    /// </param>
    /// <returns>
    /// An instance of <c>WHSWaveLabelGenerator</c>.
    /// </returns>
    [Hookable(false)]
    public static WHSWaveLabelGenerator newWaveLabelGenerator(WHSWaveLabelGeneratorType _labelGeneratorType)
    {
        WHSWaveLabelGeneratorAttribute generatorAttribute = new WHSWaveLabelGeneratorAttribute(_labelGeneratorType);
    
        WHSWaveLabelGenerator generator = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSWaveLabelGenerator),
                                                                          generatorAttribute);
    
        if (!generator)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        return generator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeLabelList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores a list of labels for a given work ID into label history.
    /// </summary>
    /// <param name = "_printLabels">
    /// A <c>WHSPrintLabels</c> object to use for storing the labels.
    /// </param>
    /// <param name = "_zplLabelList">
    /// A <c>List</c> object containing the labels.
    /// </param>
    /// <param name = "_warelabelTemplateLine">
    /// A wave label template details record.
    /// </param>
    /// <param name = "_workList">
    /// A <c>List</c> of work IDs.
    /// </param>
    /// <returns>A wave label history record.</returns>
    protected final WHSWaveLabelHistory storeLabelList(
        WHSPrintLabels              _printLabels, 
        List                        _zplLabelList,
        WHSWaveLabelTemplateLine    _warelabelTemplateLine, 
        List                        _workList)
    {
        return _printLabels.storeLabelList(_zplLabelList, _warelabelTemplateLine, _workList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWavelabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates print history of wave labels.
    /// </summary>
    /// <param name = "_printLabels">
    /// A <c>WHSPrintLabels</c> object to use for printing the labels.
    /// </param>
    /// <param name = "_wavelabelsIds">
    /// A container with wave label ids that are used in zpl label.
    /// </param>
    /// <param name = "_waveLabelHistory">
    /// A wave label history record.
    /// </param>
    protected final void updateWavelabels(WHSPrintLabels _printLabels, container _wavelabelsIds, WHSWaveLabelHistory _waveLabelHistory)
    {
        _printLabels.updateWaveLabelHistoryForWaveLabels(_wavelabelsIds, _waveLabelHistory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints a list of labels on a printer.
    /// </summary>
    /// <param name = "_printLabels">
    /// A <c>WHSPrintLabels</c> object to use for printing the labels.
    /// </param>
    /// <param name = "_zplLabelList">
    /// A <c>List</c> object containing the labels.
    /// </param>
    /// <param name = "_warelabelTemplateLine">
    /// A wave label template details record.
    /// </param>
    /// <param name = "_wavelabelsIds">
    /// A container with wave label ids that are used in zpl label.
    /// </param>
    protected final void printLabelList(
        WHSPrintLabels              _printLabels, 
        List                        _zplLabelList, 
        WHSWaveLabelTemplateLine    _warelabelTemplateLine, 
        container                   _wavelabelsIds)
    {
        _printLabels.printLabelList(_zplLabelList, _warelabelTemplateLine, _wavelabelsIds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkBuildId</Name>
				<Source><![CDATA[
    public WHSWorkBuildId parmWorkBuildId(WHSWorkBuildId _workBuildId = workBuildId)
    {
        workBuildId = _workBuildId;

        return workBuildId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>