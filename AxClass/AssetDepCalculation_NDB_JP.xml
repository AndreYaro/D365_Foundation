<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepCalculation_NDB_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is used to do depreciation calculation for a specified Japan depreciation method: New Declining Balance.
/// </summary>
public class AssetDepCalculation_NDB_JP extends AssetDepCalculation_JP
{
    AssetDepreciationMethod     method;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcBaseAmountToDepreciate</Name>
				<Source><![CDATA[
    protected AssetAmount calcBaseAmountToDepreciate()
    {
        AssetAmount ret;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFinalAmountToDepreciate</Name>
				<Source><![CDATA[
    protected AssetAmount calcFinalAmountToDepreciate()
    {
        AssetAmount         ret;
        AssetAmount         remainingBalanceOfCurYear;
        AssetTableInterval  assetTableInterval;
        boolean             isLessThanGuaranteedAmount;
        // reduction entry
        AssetAmount         adjustAmount;
        AssetTransDate      revisedAcquisitionCostStartDate;

        assetTableInterval          = calcArgs.parmAssetTableInterval();
        isLessThanGuaranteedAmount  = this.isLessThanGuaranteedAmount();
        adjustAmount = this.getReductionEntryAdjustment(calcArgs.parmPeriodEnd());

        if (this.isPutInUseYear())
        {
            ret = calcArgs.parmAmountToDepreciate() + adjustAmount;
        }
        else if (isLessThanGuaranteedAmount)
        {
            if ( !calcArgs.parmRevisedAcquisitionCost())
            {
                revisedAcquisitionCostStartDate = calcArgs.parmRevisedAcquisitionCostStartDate();
                if (revisedAcquisitionCostStartDate == dateNull())
                {
                    revisedAcquisitionCostStartDate = this.calcDepStartDateInCurYearBeyondChange();
                    calcArgs.parmRevisedAcquisitionCostStartDate(revisedAcquisitionCostStartDate);
                }

                remainingBalanceOfCurYear   = calcArgs.parmAmountToDepreciate()
                    - this.getBeginningBalanceOfAccumulatedDep(revisedAcquisitionCostStartDate)
                    - this.getBeginningBalanceOfAccumulatedExtDep(calcArgs.parmAssetTableInterval().findFirstDayOfYear(calcArgs.parmPeriodStart()))
                    - calcArgs.parmUnpostedAccumulatedExtraDepAmount();

                calcArgs.parmRevisedAcquisitionCost(remainingBalanceOfCurYear + adjustAmount);
            }

            ret = calcArgs.parmRevisedAcquisitionCost();
        }
        else
        {
            remainingBalanceOfCurYear   = calcArgs.parmAmountToDepreciate()
                - this.getBeginningBalanceOfAccumulatedDep(this.calcDepStartDateInCurYearBeyondChange())
                - this.getBeginningBalanceOfAccumulatedExtDep(calcArgs.parmAssetTableInterval().findFirstDayOfYear(calcArgs.parmPeriodStart()))
                - calcArgs.parmUnpostedAccumulatedExtraDepAmount();
            ret = remainingBalanceOfCurYear + adjustAmount;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcYearlyDepRate</Name>
				<Source><![CDATA[
    protected real calcYearlyDepRate()
    {
        AssetAmount         ret = 0;
        AssetDepRate_JP     assetDepRate;
        AssetTableInterval  assetTableInterval;
        boolean             isLessThanGuaranteedAmount;

        assetDepRate = AssetDepRate_JP::find(
            calcArgs.parmAssetDepRateSet(),
            this.getAssetDepreciationMethod(),
            calcArgs.parmAssetServiceLife());

        if (assetDepRate.RecId == 0)
        {
            throw error("@SYS4002748");
        }

        assetTableInterval          = calcArgs.parmAssetTableInterval();
        isLessThanGuaranteedAmount  = this.isLessThanGuaranteedAmount();
        if (!this.isPutInUseYear() && isLessThanGuaranteedAmount)
        {
            ret = assetDepRate.RevisedDepreciation;
        }
        else
        {
            ret = assetDepRate.DepreciationRate;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDepreciationMethod</Name>
				<Source><![CDATA[
    public AssetDepreciationMethod getAssetDepreciationMethod()
    {
        return method;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLessThanGuaranteedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Judge whether the beginning balance of current year * depreciation rate
    /// is smaller than the acquisition cost * guaranteed depreciation rate.
    /// </summary>
    /// <returns>
    /// If true, the the beginning balance of current year * depreciation rate
    /// is smaller than the revised acquisition cost * revised depreciation rate.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The depreciation rate does not exist.
    /// </exception>
    protected boolean isLessThanGuaranteedAmount()
    {
        boolean         ret;
        AssetDepRate_JP assetDepRate;
        AssetAmount     depRate;
        AssetAmount     guaranteedDepRate;
        AssetAmount     amountToDepreciate ;
        AssetAmount     remainingBalanceOfCurYear;

        assetDepRate = AssetDepRate_JP::find(
            calcArgs.parmAssetDepRateSet(),
            this.getAssetDepreciationMethod(),
            calcArgs.parmAssetServiceLife());

        if (assetDepRate.RecId == 0)
        {
            throw error("@SYS4002748");
        }

        depRate                 = assetDepRate.DepreciationRate;
        guaranteedDepRate       = assetDepRate.GuaranteedDepreciationRate;

        amountToDepreciate      = calcArgs.parmAmountToDepreciate();
        remainingBalanceOfCurYear = amountToDepreciate - this.getBeginningBalanceOfAccumulatedDep(this.calcDepStartDateInCurYearBeyondChange());
        if (calcArgs.parmIsReductionEntry()
            && calcArgs.parmReductionEntryMethod() == AssetReductionEntryMethod_JP::Reserve)
        {
            remainingBalanceOfCurYear += this.getReductionEntryAdjustment(calcArgs.parmPeriodEnd());
        }
        if (calcArgs.parmSpecialDepAccountingMethod() == AssetSpecialDepAccountingMethod_JP::DirectOff)
        {
            remainingBalanceOfCurYear -= this.getBeginningBalanceOfAccumulatedExtDep(calcArgs.parmAssetTableInterval().findFirstDayOfYear(calcArgs.parmPeriodStart()));
            remainingBalanceOfCurYear -= calcArgs.parmUnpostedAccumulatedExtraDepAmount();
        }

        if (abs(remainingBalanceOfCurYear) * depRate >= abs(amountToDepreciate) * guaranteedDepRate)
        {
            ret = false;
        }
        else
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(AssetDepCalculationArgs_JP _calcArgs, AssetDepreciationMethod _method)
    {
        super(_calcArgs);

        switch (_method)
        {
            case AssetDepreciationMethod::NewDecliningBalance250_JP:
            case AssetDepreciationMethod::NewDecliningBalance200_JP:
                method = _method;
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>