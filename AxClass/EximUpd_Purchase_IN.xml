<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximUpd_Purchase_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim update purchase class.
/// </summary>
class EximUpd_Purchase_IN extends EximUpdate_IN implements BatchRetryable
{
    EximValue_IN purchValue;
    EximTxt_IN   purchTxt;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPurchTxt</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public EximTxt_IN parmPurchTxt(EximTxt_IN _purchTxt = purchTxt)
    {
        purchTxt = _purchTxt;

        return purchTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchValue</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public EximValue_IN parmPurchValue(EximValue_IN _purchValue = purchValue)
    {
        purchValue = _purchValue;

        return purchValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        container schemeValues;
        ;

        if (schemeType == EximAuthorizationType_IN::AA || schemeType == EximAuthorizationType_IN::DFIA)
        {
            schemeValues = [schemeTableId,
                            schemeTableRecId,
                            licenseNum,
                            issueDate,
                            transferrable,
                            importAssessableValue,
                            importExpiryDate,
                            purchTxt,
                            taxAccountGroup,
                            iECNumber,
                            transDate,
                            purchValue];
        }
        else
        {
            schemeValues = [schemeTableId,
                            schemeTableRecId,
                            licenseNum,
                            issueDateTime,
                            importExpiryDateTime,
                            purchValue,
                            txt,
                            totalDutyEntitlement,
                            totalComponentAmount,
                            taxAccountGroup,
                            iECNumber,
                            transDate];
        }

        EximUpd_Purchase_IN::runOnServer(
            schemeType,
            schemeValues,
            tmpTaxDetails,
            tmpImportableItems,
            tmpEximEntitlementDetails);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates and posts.
    /// </summary>
    public void updateAndPost()
    {
        super();

        switch (schemeTableId)
        {
            case tablenum(EximAuthorizationSchemesTable_IN):

                if (authorizationSchemesLine)
                {
                    authorizationSchemesLine.PurchValue = purchValue;
                    authorizationSchemesLine.Text       = purchTxt;
                    authorizationSchemesLine.update();
                }
                break;
            case tablenum(EximDEPBSchemesTable_IN):

                if (depbSchemesLine)
                {
                    update_recordset eximEntitlementDetails
                        setting PurchaseValue = purchValue
                            where eximEntitlementDetails.SchemesLineRecId == depbSchemesLine.RecId;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAuthorizationScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates authorization scheme information.
    /// </summary>
    protected void updateAuthorizationScheme()
    {
        EximAuthorizationSchemesTable_IN authorizationSchemesTableLoc;

        switch (schemeTableId)
        {
            case tablenum(EximAuthorizationSchemesTable_IN):

                authorizationSchemesTableLoc = EximAuthorizationSchemesTable_IN::find(schemeTableRecId, true);

                if (authorizationSchemesTableLoc)
                {
                    authorizationSchemesTableLoc.LicenseNum   = licenseNum;
                    authorizationSchemesTableLoc.IssueDate    = issueDate;
                    authorizationSchemesTableLoc.Transferable = transferrable;
                    authorizationSchemesTableLoc.Status       = EximAuthorizationStatus_IN::Approved;
                    authorizationSchemesTableLoc.update();
                }

                this.insertAuthorizationSchemeLine();
                break;
            case tablenum(EximDEPBSchemesTable_IN):

                depbSchemesTable = EximDEPBSchemesTable_IN::findRecId(schemeTableRecId, true);

                if (depbSchemesTable)
                {
                    depbSchemesTable.LicenseNum    = licenseNum;
                    depbSchemesTable.IssueDateTime = DateTimeUtil::removeTimeZoneOffset(issueDateTime, DateTimeUtil::getUserPreferredTimeZone());
                    depbSchemesTable.Status        = EximAuthorizationStatus_IN::Approved;
                    depbSchemesTable.update();
                }

                this.updateDEPBSchemeLine();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIncentiveScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update incentive scheme.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateIncentiveScheme()
    {
        #OCCRetryCount
        ;

        try
        {
            ttsbegin;
            this.updateAuthorizationScheme();

            this.updateAndPost();

            if (schemeType == EximAuthorizationType_IN::AA || schemeType == EximAuthorizationType_IN::DFIA)
            {
                this.insertSummaryImportableItems();
                this.writeImportDetails();
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw (Exception::Error);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method run on the server side.
    /// </summary>
    /// <param name="_schemeType">
    /// The scheme type.
    /// </param>
    /// <param name="_schemeValues">
    /// The scheme values.
    /// </param>
    /// <param name="_tmpTaxDetails">
    /// The tmp tax details.
    /// </param>
    /// <param name="_tmpImportableItems">
    /// The tmp importable items.
    /// </param>
    /// <param name="_tmpEximEntitlementDetails">
    /// The tmp exim entitlement details.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void runOnServer(
        EximAuthorizationType_IN     _schemeType,
        container                    _schemeValues,
        TmpEximTaxDetails_IN         _tmpTaxDetails,
        TmpEximImportableItems_IN    _tmpImportableItems,
        TmpEximEntitlementDetails_IN _tmpEximEntitlementDetails)
    {
        EximUpd_Purchase_IN eximUpdPurchase = new EximUpd_Purchase_IN();
        ;

        eximUpdPurchase.parmSchemeType(_schemeType);
        eximUpdPurchase.parmTmpEximTaxDetails(_tmpTaxDetails);
        eximUpdPurchase.parmTmpEximImportableItems(_tmpImportableItems);
        eximUpdPurchase.parmTmpEximEntitlementDetails(_tmpEximEntitlementDetails);

        if (_schemeType == EximAuthorizationType_IN::AA || _schemeType == EximAuthorizationType_IN::DFIA)
        {
            eximUpdPurchase.parmSchemeTableId(conpeek(_schemeValues, 1));
            eximUpdPurchase.parmSchemeTableRecId(conpeek(_schemeValues, 2));
            eximUpdPurchase.parmLicenseNumber(conpeek(_schemeValues, 3));
            eximUpdPurchase.parmIssueDate(conpeek(_schemeValues, 4));
            eximUpdPurchase.parmTransferrable(conpeek(_schemeValues, 5));
            eximUpdPurchase.parmImportAssessableValue(conpeek(_schemeValues, 6));
            eximUpdPurchase.parmImportExpiryDate(conpeek(_schemeValues, 7));
            eximUpdPurchase.parmPurchTxt(conpeek(_schemeValues, 8));
            eximUpdPurchase.parmTaxAccountGroup(conpeek(_schemeValues, 9));
            eximUpdPurchase.parmIECNumber(conpeek(_schemeValues, 10));
            eximUpdPurchase.parmTransDate(conpeek(_schemeValues, 11));
            eximUpdPurchase.parmPurchValue(conpeek(_schemeValues, 12));
        }
        else
        {
            eximUpdPurchase.parmSchemeTableId(conpeek(_schemeValues, 1));
            eximUpdPurchase.parmSchemeTableRecId(conpeek(_schemeValues, 2));
            eximUpdPurchase.parmLicenseNumber(conpeek(_schemeValues, 3));
            eximUpdPurchase.parmIssueDateTime(conpeek(_schemeValues, 4));
            eximUpdPurchase.parmImportExpiryDateTime(conpeek(_schemeValues, 5));
            eximUpdPurchase.parmPurchValue(conpeek(_schemeValues, 6));
            eximUpdPurchase.parmTxt(conpeek(_schemeValues, 7));
            eximUpdPurchase.parmTotalDutyEntitlement(conpeek(_schemeValues, 8));
            eximUpdPurchase.parmTotalComponentAmount(conpeek(_schemeValues, 9));
            eximUpdPurchase.parmTaxAccountGroup(conpeek(_schemeValues, 10));
            eximUpdPurchase.parmIECNumber(conpeek(_schemeValues, 11));
            eximUpdPurchase.parmTransDate(conpeek(_schemeValues, 12));
        }

        eximUpdPurchase.updateIncentiveScheme();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if can run the inquiry in new session or not.
    /// </summary>
    /// <returns>
    /// True if can run the inquiry in new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>