<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesVendorInvoiceInfoCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Main responsibility of the class is a creation
/// of a pending vendor invoice.
/// </summary>
public final class SalesVendorInvoiceInfoCreator
{
    InvoiceId              invoiceId;
    VendInvoiceAccount     invoiceAccount;
    VendAccount            orderAccount;
    CurrencyCode           currencyCode;
    TransDate              transDate;
    VendCashDiscAmount     cashDiscAmount;
    InvoiceLineDescription invoiceLineDescription;
    PurchCategory          lineProcurementCategory;
    AmountCur              lineAmount;
    DocumentStatus         documentStatus;
    VendInvoiceInfoTable   vendInvoiceTable;
    boolean                skipVendInvoiceRelatedTables;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesVendorInvoiceInfoCreator construct()
    {
        return new SalesVendorInvoiceInfoCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
    public InvoiceId parmInvoiceId(InvoiceId _invoiceId)
    {
        invoiceId = _invoiceId;
        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceAccount</Name>
				<Source><![CDATA[
    public VendInvoiceAccount parmInvoiceAccount(VendInvoiceAccount _invoiceAccount)
    {
        invoiceAccount = _invoiceAccount;
        return _invoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderAccount</Name>
				<Source><![CDATA[
    public VendAccount parmOrderAccount(VendAccount _orderAccount)
    {
        orderAccount = _orderAccount;
        return _orderAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode)
    {
        currencyCode = _currencyCode;
        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCashDiscAmount</Name>
				<Source><![CDATA[
    public VendCashDiscAmount parmCashDiscAmount(VendCashDiscAmount _cashDiscAmount)
    {
        cashDiscAmount = _cashDiscAmount;
        return cashDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceLineDescription</Name>
				<Source><![CDATA[
    public InvoiceLineDescription parmInvoiceLineDescription(InvoiceLineDescription _invoiceLineDescription)
    {
        invoiceLineDescription = _invoiceLineDescription;
        return invoiceLineDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineProcurementCategory</Name>
				<Source><![CDATA[
    public PurchCategory parmLineProcurementCategory(PurchCategory _lineProcurementCategory)
    {
        lineProcurementCategory = _lineProcurementCategory;
        return _lineProcurementCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineAmount</Name>
				<Source><![CDATA[
    public AmountCur parmLineAmount(AmountCur _lineAmount)
    {
        lineAmount = _lineAmount;
        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus parmDocumentStatus(DocumentStatus _documentStatus)
    {
        documentStatus = _documentStatus;
        return _documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceTable</Name>
				<Source><![CDATA[
    public vendInvoiceInfoTable parmVendInvoiceTable(vendInvoiceInfoTable _vendInvoiceTable)
    {
        vendInvoiceTable = _vendInvoiceTable;
        return vendInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipVendInvoiceRelatedTables</Name>
				<Source><![CDATA[
    public boolean parmSkipVendInvoiceRelatedTables(boolean _skipVendInvoiceRelatedTables)
    {
        skipVendInvoiceRelatedTables = _skipVendInvoiceRelatedTables;
        return skipVendInvoiceRelatedTables;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendorInvoiceInfoWithOneLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates pending vendor invoice with one line.
    /// </summary>
    /// <returns>The header of the created pending vendor invoice.</returns>
    public VendInvoiceInfoTable createVendorInvoiceInfoWithOneLine()
    {
        if (!vendInvoiceTable.RecId)
        {
            vendInvoiceTable = this.createVendorInvoiceInfoHeader();
        }
        this.createVendInvoiceInfoLine(vendInvoiceTable);
        return vendInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendorInvoiceInfoHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a header of the pending vendor invoice.
    /// </summary>
    /// <returns>The header of the created pending vendor invoice.</returns>
    public VendInvoiceInfoTable createVendorInvoiceInfoHeader()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = this.createVendInvoiceInfoTable();

        this.createVendInvoiceInfoSubTable(vendInvoiceInfoTable);

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    private VendInvoiceInfoTable createVendInvoiceInfoTable()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        vendInvoiceInfoTable.Num = invoiceId;
        vendInvoiceInfoTable.InvoiceAccount = invoiceAccount;
        vendInvoiceInfoTable.OrderAccount = orderAccount;
        vendInvoiceInfoTable.CurrencyCode = currencyCode;
        vendInvoiceInfoTable.TransDate = transDate;
        vendInvoiceInfoTable.Ordering = DocumentStatus::Invoice;
        vendInvoiceInfoTable.ParmJobStatus = ParmJobStatus::Waiting;
        vendInvoiceInfoTable.VendInvoiceSaveStatus = VendInvoiceSaveStatus::Pending;
        vendInvoiceInfoTable.defaultRow();

        if (vendInvoiceInfoTable.InvoiceAccount && vendInvoiceInfoTable.CurrencyCode)
        {
            vendInvoiceInfoTable.insert(!skipVendInvoiceRelatedTables);
        }
        else
        {
            throw error("@SYS136548");
        }

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendInvoiceInfoSubTable</Name>
				<Source><![CDATA[
    private VendInvoiceInfoSubTable createVendInvoiceInfoSubTable(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return VendInvoiceInfoSubTable::createFromVendInvoiceInfoTable(_vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a line in pending vendor invoice.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTable">The vendor invoice for which to create the line.</param>
    /// <returns>Header of pending vendor invoice.</returns>
    public VendInvoiceInfoLine createVendInvoiceInfoLine(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        vendInvoiceInfoLine.initValue();
        vendInvoiceInfoLine.defaultRow();

        vendInvoiceInfoLine.ProcurementCategory = lineProcurementCategory;
        vendInvoiceInfoLine.LineAmount = lineAmount;

        vendInvoiceInfoLine.ReceiveNow = lineAmount > 0 ? 1 : -1;

        vendInvoiceInfoLine.Description = invoiceLineDescription;
        vendInvoiceInfoLine.ParmId = _vendInvoiceInfoTable.ParmId;
        vendInvoiceInfoLine.TableRefId = _vendInvoiceInfoTable.TableRefId;
        vendInvoiceInfoLine.currencyCode = _vendInvoiceInfoTable.CurrencyCode;
        vendInvoiceInfoLine.InvoiceAccount = _vendInvoiceInfoTable.InvoiceAccount;
        vendInvoiceInfoLine.OrderAccount = _vendInvoiceInfoTable.OrderAccount;

        vendInvoiceInfoLine.insert();

        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>