<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqUpdateWarehouseLevel</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqUpdateWarehouseLevel extends RunBaseBatch implements BatchRetryable
{
    Map                 mapInventLocation;
    Map                 mapLevel;
    Map                 mapBOM;

    InventLocation      inventLocation;

    NoYes               onlyCheck;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        onlyCheck
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean         ok = true;
        Set             setChild;

        while select forupdate inventLocation
            where inventLocation.InventLocationType != InventLocationType::Transit
        {
            setprefix(#prefixField(inventLocation,inventLocationId));

            if (inventLocation.InventLocationIdReqMain && ! inventLocation.checkInventLocationLevel())
                ok = false;
            else
            if (inventLocation.InventLocationIdReqMain && ! InventLocation::find(inventLocation.InventLocationIdReqMain).RecId)
                ok = checkFailed(strfmt("@SYS70042",inventLocation.InventLocationIdReqMain));
            else
            {
                mapInventLocation.insert(inventLocation.RecId,inventLocation);
                mapLevel.insert(inventLocation.InventLocationId,0);

                if (! mapBOM.exists(inventLocation.InventLocationIdReqMain))
                {
                    setChild = new Set(Types::String);
                    mapBOM.insert(inventLocation.InventLocationIdReqMain,setChild);
                }
                else
                    setChild = mapBOM.lookup(inventLocation.InventLocationIdReqMain);

                setChild.add(inventLocation.InventLocationId);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyCheck</Name>
				<Source><![CDATA[
    public NoYes parmOnlyCheck(NoYes _onlyCheck = onlyCheck)
    {
        onlyCheck = _onlyCheck;
        return onlyCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        boolean ok;

        try
        {
            ttsbegin;

            if (! this.validate())
                throw error("@SYS18447");

            inventLocation.disableCache(true);

            mapInventLocation   = new Map(typeName2Type(extendedTypeStr(recId)), Types::Record);
            mapLevel            = new Map(Types::String, Types::Integer);
            mapBOM              = new Map(Types::String, Types::Class);

            ok = this.check();

            if (! onlyCheck)
                this.update();

            inventLocation.disableCache(false);

            if (! ok && ! onlyCheck)
                info("@SYS70045");

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    ///    return false, if those tasks are to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version        = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    protected void update()
    {
        MapIterator         mi_inventLocation;
        MapIterator         mi_BOM;

        Set                 setChild;
        SetIterator         si_Child;

        boolean             change;
        InventLocationLevel levelParent;
        InventLocationLevel levelChild;

        InventLocation      inventLocationTransit;

        /*
            calculate levels
        */

        change = true;
        while (change)
        {
            change = false;
            mi_BOM = new MapIterator(mapBOM);
            mi_BOM.begin();
            while (mi_BOM.more())
            {
                if (mapLevel.exists(mi_BOM.key()))
                {
                    levelParent = mapLevel.lookup(mi_BOM.key());

                    setChild = mapBOM.lookup(mi_BOM.key());
                    si_Child = new SetIterator(setChild);
                    si_Child.begin();
                    while (si_Child.more())
                    {
                        levelChild = mapLevel.lookup(si_Child.value());
                        if (levelParent >= levelChild)
                        {
                            mapLevel.insert(si_Child.value(),levelParent+2);
                            change = true;
                        }
                        si_Child.next();
                    }
                }
                mi_BOM.next();
            }
        }

        /*
            update level
        */

        mi_inventLocation = new MapIterator(mapInventLocation);
        mi_inventLocation.begin();
        while (mi_inventLocation.more())
        {
            inventLocation = mapInventLocation.lookup(mi_inventLocation.key());

            if (inventLocation.InventLocationLevel != mapLevel.lookup(inventLocation.InventLocationId))
            {
                inventLocation.InventLocationLevel = mapLevel.lookup(inventLocation.InventLocationId);
                inventLocation.doUpdate();
            }

            mi_inventLocation.next();
        }

        /*
            update transit warehouse levels
        */

        while select forupdate inventLocationTransit
            where inventLocationTransit.InventLocationType == InventLocationType::Transit
        {
            select maxof(InventLocationLevel) from inventLocation
                where inventLocation.InventLocationIdTransit == inventLocationTransit.InventLocationId;

            inventLocationTransit.InventLocationLevel = inventLocation ? inventLocation.InventLocationLevel + 1 : 0;
            inventLocationTransit.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqUpdateWarehouseLevel construct()
    {
        return new ReqUpdateWarehouseLevel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS70043";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ReqUpdateWarehouseLevel reqUpdateWarehouseLevel = ReqUpdateWarehouseLevel::newForm(_args);
        FormDataSource          ds;
        InventLocation          inventLocation;

        if (! reqUpdateWarehouseLevel.prompt())
            return;

        reqUpdateWarehouseLevel.runOperation();

        if (_args.caller() && _args.caller().name() == formstr(InventLocation) && _args.dataset() == tablenum(InventLocation))
        {
            ds = FormDataUtil::getFormDataSource(_args.record());

            ds.reread();
            ds.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    public static ReqUpdateWarehouseLevel newForm(Args _args)
    {
        ReqUpdateWarehouseLevel reqUpdateWarehouseLevel = ReqUpdateWarehouseLevel::construct();

        reqUpdateWarehouseLevel.init();
        reqUpdateWarehouseLevel.parmOnlyCheck(false);

        return reqUpdateWarehouseLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newUpdate</Name>
				<Source><![CDATA[
    public static ReqUpdateWarehouseLevel newUpdate()
    {
        ReqUpdateWarehouseLevel reqUpdateWarehouseLevel = ReqUpdateWarehouseLevel::construct();

        reqUpdateWarehouseLevel.getLast();
        reqUpdateWarehouseLevel.parmOnlyCheck(false);

        reqUpdateWarehouseLevel.init();

        return reqUpdateWarehouseLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newUpdateForLocationId</Name>
				<Source><![CDATA[
    public static ReqUpdateWarehouseLevel newUpdateForLocationId(InventLocationId _inventLocationId)
    {
        ReqUpdateWarehouseLevelOnLocationUpdate reqUpdateWarehouseLevel = ReqUpdateWarehouseLevelOnLocationUpdate::construct();

        reqUpdateWarehouseLevel.getLast();
        reqUpdateWarehouseLevel.parmOnlyCheck(false);
        reqUpdateWarehouseLevel.parmUpdatedInventLocationId(_inventLocationId);

        reqUpdateWarehouseLevel.init();

        return reqUpdateWarehouseLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>