<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalStatic</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalStatic</c> class contains the static information describing a journal.
/// </summary>
/// <remarks>
///    This class must be inherited by every module implementation as it handles and controls so that the
///    correct inherited class is created in different module implementations.
/// </remarks>
abstract class JournalStatic
{
    JournalTableMap journalTable;

    JournalStaticDataModel dataModel;

    NumberSequenceReference numberSequenceRefJourIdCached;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findJournalName</Name>
				<Source><![CDATA[
    public final JournalNameMap findJournalName(
        JournalNameId   _journalNameId,
        boolean         _forupdate = false)
    {
        JournalNameMap     journalNameTmp = this.journalName();

        journalNameTmp.selectForUpdate(_forupdate);

        select forupdate journalNameTmp
             where journalNameTmp.JournalNameId == _journalNameId;

        return journalNameTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJournalTable</Name>
				<Source><![CDATA[
    public final JournalTableMap findJournalTable(
        JournalId   _journalId,
        boolean     _forupdate  = false)
    {
        JournalTableMap     journalTableTmp = this.journalTable();

        journalTableTmp.selectForUpdate(_forupdate);

        if (_journalId)
        {
            select firstonly journalTableTmp
                 where journalTableTmp.JournalId == _journalId;
        }

        return journalTableTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJournalTrans</Name>
				<Source><![CDATA[
    public JournalTransMap findJournalTrans(
        JournalId   _journalId,
        LineNum     _lineNum,
        boolean     _forupdate = false)
    {
        JournalTransMap journalTrans = this.journalTrans();

        journalTrans.selectForUpdate(_forupdate);

        if (_journalId && _lineNum)
        {
            select firstonly journalTrans
                where journalTrans.JournalId == _journalId &&
                      journalTrans.LineNum   == _lineNum;
        }

        return journalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDataModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the data model.
    /// </summary>
    protected void initializeDataModel()
    {
        if (!dataModel)
        {
            dataModel = JournalStaticDataModel::getInstance(
                this.journalName().TableId,
                this.journalTable().TableId,
                this.journalTrans().TableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalName</Name>
				<Source><![CDATA[
    // The method returns a JournalName buffer.
    abstract public JournalNameMap journalName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTable</Name>
				<Source><![CDATA[
    // The method returns a JournalTable buffer.
    abstract public JournalTableMap journalTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTrans</Name>
				<Source><![CDATA[
    // The method returns a JournalTrans buffer.
    abstract public JournalTransMap journalTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItemStrLines</Name>
				<Source><![CDATA[
    //The method returns the name of menuItemButton for the line form.

    abstract public str menuItemStrLines(Integer _journalType = journalTable.JournalType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>nameFieldIdBlockUserGroupId</Name>
				<Source><![CDATA[
    // Must be overridden if the method initFieldId can't find the fieldNum
    public FieldId nameFieldIdBlockUserGroupId()
    {
        this.initializeDataModel();

        return dataModel.NameFieldIdBlockUserGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nameFieldIdDescription</Name>
				<Source><![CDATA[
    // Must be overridden if the method initFieldId can't find the fieldNum
    public FieldId nameFieldIdDescription()
    {
        this.initializeDataModel();
        
        return dataModel.NameFieldIdDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nameFieldIdJournalNameId</Name>
				<Source><![CDATA[
    // Must be overridden if the method initFieldId can't find the fieldNum
    public FieldId nameFieldIdJournalNameId()
    {
        this.initializeDataModel();

        return dataModel.NameFieldIdjournalNameId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nameFieldIdJournalType</Name>
				<Source><![CDATA[
    // Must be overridden if the method initFieldId can't find the fieldNum
    public FieldId nameFieldIdJournalType()
    {
        this.initializeDataModel();

        return dataModel.NameFieldIdjournalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(JournalTableMap _journalTable)
    {
        journalTable = _journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalErrorTransList</Name>
				<Source><![CDATA[
    // This method is used to construct the class that contains the infolog per journal transaction.
    // It should normally not be overridden.
    public JournalErrorTransList newJournalErrorTransList(JournalTableData _journalTableData)
    {
        return new JournalErrorTransList(_journalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalErrorVoucherList</Name>
				<Source><![CDATA[
    // This method is used to construct the class that contains the infolog per journal voucher.
    // It should normally not be overridden.
    public JournalErrorVoucherList newJournalErrorVoucherList(JournalTableData _journalTableData)
    {
        return new JournalErrorVoucherList(_journalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalTransData</Name>
				<Source><![CDATA[
    // This method is used to construct the journalTrans class.
    // It should be overridden if the journal uses voucher numbers.
    public JournalTransData newJournalTransData(
        JournalTransMap     _journalTrans,
        JournalTableData    _journalTableData)
    {
        return new JournalTransData(_journalTrans,_journalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalTransList</Name>
				<Source><![CDATA[
    // This method is used to construct the class that contains a list of journalTrans.
    // It should normally not be overridden.
    public JournalTransList newJournalTransList(JournalTableData _journalTableData)
    {
        return new JournalTransList(_journalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalVoucherList</Name>
				<Source><![CDATA[
    // This method is used to construct the class that contains a list of vouchers.
    // It should normally not be overridden.
    public JournalVoucherList newJournalVoucherList(JournalTableData _journalTableData)
    {
        return new JournalVoucherList(_journalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalVoucherNum</Name>
				<Source><![CDATA[
    // This method is used to construct the class that contains methods to draw voucher numbers.
    // It should normally not be overridden.
    // If not using voucher numbers the method should be overridden with a method that returns NULL.
    public JournalVoucherNum newJournalVoucherNum(JournalTableData _journalTableData)
    {
        return new JournalVoucherNum(_journalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalVoucherObject</Name>
				<Source><![CDATA[
    // This method is used to construct the class that contains data per voucher.
    // It should be overridden if the a voucher has more total fields than NumOfLines.
    public JournalVoucherObject newJournalVoucherObject(JournalVoucherList _journalVoucherList)
    {
        return new JournalVoucherObject(_journalVoucherList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefJournalId</Name>
				<Source><![CDATA[
    // The function should return the numbersequence used for the journalId
    //
    // Example
    //
    // NumberSequenceReference numRefJournalId()
    // {
    //    return inventParameters::numRefInventJournalId();
    // }
    abstract public NumberSequenceReference numRefJournalId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardJournalNameId</Name>
				<Source><![CDATA[
    // Can be overridden if having standard journalnames based on the journalType.
    //
    // Example:
    //
    // JournalNameId standardJournalNameId(integer _journalTypeId)
    // {
    //    return InventJournalName::standardJournalName(_JournalTypeId);
    // }
    public JournalNameId standardJournalNameId(Integer _journalTypeId)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFieldIdBlockUserGroupId</Name>
				<Source><![CDATA[
    // Must be overridden if the method initFieldId can't find the fieldNum
    public FieldId tableFieldIdBlockUserGroupId()
    {
        this.initializeDataModel();

        return dataModel.TableFieldIdBlockUserGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFieldIdBlockUserId</Name>
				<Source><![CDATA[
    // Must be overridden if the method initFieldId can't find the fieldNum
    public FieldId tableFieldIdBlockUserId()
    {
        this.initializeDataModel();

        return dataModel.TableFieldIdBlockUserId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFieldIdJournalId</Name>
				<Source><![CDATA[
    // Must be overridden if the method initFieldId can't find the fieldNum
    public FieldId tableFieldIdJournalId()
    {
        this.initializeDataModel();

        return dataModel.TableFieldIdJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFieldIdJournalNameId</Name>
				<Source><![CDATA[
    // Must be overridden if the method initFieldId can't find the fieldNum
    public FieldId tableFieldIdJournalNameId()
    {
        this.initializeDataModel();

        return dataModel.TableFieldIdJournalNameId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFieldIdSystemBlocked</Name>
				<Source><![CDATA[
    // Must be overridden if the method initFieldId can't find the fieldNum
    public FieldId tableFieldIdSystemBlocked()
    {
        this.initializeDataModel();

        return dataModel.TableFieldIdSystemBlocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFieldIdJournalType</Name>
				<Source><![CDATA[
    // Must be overridden if the method initFieldId can't find the fieldNum
    public FieldId tableFieldIdJournalType()
    {
        this.initializeDataModel();

        return dataModel.TableFieldIdJournalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFieldIdPosted</Name>
				<Source><![CDATA[
    // Must be overridden if the method initFieldId can't find the fieldNum
    public FieldId tableFieldIdPosted()
    {
        this.initializeDataModel();

        return dataModel.TableFieldIdPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFieldIdSigned</Name>
				<Source><![CDATA[
    // Must be overridden if the method initFieldId can't find the fieldNum
    public FieldId tableFieldIdSigned()
    {
        this.initializeDataModel();

        return dataModel.TableFieldIdSigned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFormName</Name>
				<Source><![CDATA[
    public FormName tableFormName()
    {
        switch (journalTable.TableId)
        {
            case tableNum(InventJournalTable):      return formStr(InventJournalTable);
            case tableNum(ProdJournalTable):        return formStr(ProdJournalTable);
            case tableNum(ProjJournalTable):        return formStr(ProjJournalTable);
            case tableNum(WMSJournalTable):         return formStr(WMSJournalTable);
            // <RUP>
            case tablenum(RPayJournalTable):        return formstr(RPayJournalTable);
            case tableNum(RHRMOrderTable):          return formStr(RHRMOrderTable);
            // </RUP>
            case tableNum(CFMJournalTable):         return formStr(CFMJournalTable);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transFieldIdJournalId</Name>
				<Source><![CDATA[
    // Must be overridden if the method initFieldId can't find the fieldNum
    public FieldId transFieldIdJournalId()
    {
        this.initializeDataModel();

        return dataModel.TransFieldIdJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transFieldIdLineNum</Name>
				<Source><![CDATA[
    // Must be overridden if the method initFieldId can't find the fieldNum
    public FieldId transFieldIdLineNum()
    {
        this.initializeDataModel();

        return dataModel.TransFieldIdLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transFieldIdVoucher</Name>
				<Source><![CDATA[
    // Must be overridden if the method initFieldId can't find the fieldNum
    public FieldId transFieldIdVoucher()
    {
        this.initializeDataModel();

        return dataModel.TransFieldIdVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrongJournalTypeMessage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Used to build an error message that is based on the <c>journalTypeId</c> parameter that is being
    ///    passed in.
    /// </summary>
    /// <param name="_journalTypeId">
    ///    The ID of the journal type, which is considered the wrong journal type.
    /// </param>
    /// <returns>
    ///    A string that is built from the label @SYS22977 and the found journal type.
    /// </returns>
    public abstract str wrongJournalTypeMessage(int _journalTypeId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static JournalStatic construct(JournalTableMap _journalTable)
    {
        SysTableNameFactoryAttribute    attribute       = new SysTableNameFactoryAttribute(tableId2Name(_journalTable.TableId));
        JournalStaticInstantiation      instantiation   = JournalStaticInstantiation::construct(_journalTable);
        JournalStatic                   instance        = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(JournalStatic), attribute, instantiation) as JournalStatic;

        if (!instance)
        {
            throw error(strFmt("@SYS23455",funcName()));
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJournalTableFromTransDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for finding a <c>JournalTableMap</c> record based on <c>JournalTransMap</c>.
    /// </summary>
    /// <param name = "_journalTrans">The <c>JournalTransMap</c> used to determine the table to select from.</param>
    /// <param name = "_forUpdate">boolean value used to determine whether to select the record for update.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> object where The <c>JournalTableMap</c> record can be returned.</param>
    static delegate void findJournalTableFromTransDelegate(
        JournalTransMap     _journalTrans,
        boolean             _forUpdate,
        EventHandlerResult  _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJournalTableFromTrans</Name>
				<Source><![CDATA[
    public static JournalTableMap findJournalTableFromTrans(
        JournalTransMap _journalTrans,
        boolean         _forUpdate = false)
    {
        switch (_journalTrans.TableId)
        {
            case tableNum(InventJournalTrans):      return InventJournalTable::find(_journalTrans.JournalId,_forUpdate);
            case tableNum(ProdJournalBOM):          return ProdJournalTable::find(_journalTrans.JournalId,_forUpdate);
            case tableNum(ProdJournalRoute):        return ProdJournalTable::find(_journalTrans.JournalId,_forUpdate);
            case tableNum(ProdJournalProd):         return ProdJournalTable::find(_journalTrans.JournalId,_forUpdate);
            case tableNum(ProjJournalTrans):        return ProjJournalTable::find(_journalTrans.JournalId,_forUpdate);
            case tableNum(WMSJournalTrans):         return WMSJournalTable::find(_journalTrans.JournalId, _forUpdate);
            case tableNum(ReqItemJournalTrans):     return ReqItemJournalTable::find(_journalTrans.JournalId, _forUpdate);
            case tablenum(RPayJournalTrans):        return RPayJournalTable::find(_journalTrans.JournalId, _forUpdate);
            case tableNum(RHRMOrderTrans):          return RHRMOrderTable::findJournal(_journalTrans.JournalId, _forUpdate);
            case tableNum(CFMJournalTrans):         return CFMJournalTable::find(_journalTrans.JournalId, _forUpdate);
            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                JournalStatic::findJournalTableFromTransDelegate(_journalTrans, _forUpdate, result);
                if (result.hasResult())
                {
                    return result.result() as JournalTableMap;
                }
                throw error(strFmt("@SYS23455",funcName()));
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJournalTableIdDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for finding a <c>JournalTableMap</c> record based on a <c>TableId</c> and a <c>JournalId</c>.
    /// </summary>
    /// <param name = "_tableId">The <c>TableId</c> used to determine the table to select from.</param>
    /// <param name = "_journalId">The <c>JournalId</c> used to determine the record to select from the table.</param>
    /// <param name = "_forUpdate">boolean value used to determine whether to select the record for update.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> object where The <c>JournalTableMap</c> record can be returned.</param>
    static delegate void findJournalTableIdDelegate(
        TableId             _tableId,
        JournalId           _journalId,
        boolean             _forUpdate,
        EventHandlerResult  _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJournalTableId</Name>
				<Source><![CDATA[
    public static JournalTableMap findJournalTableId(
        TableId     _tableId,
        JournalId   _journalId,
        boolean     _forUpdate = false)
    {
        switch (_tableId)
        {
            case tableNum(InventJournalTable):      return InventJournalTable::find(_journalId,_forUpdate);
            case tableNum(ProdJournalTable):        return ProdJournalTable::find(_journalId,_forUpdate);
            case tableNum(ProjJournalTable):        return ProjJournalTable::find(_journalId,_forUpdate);
            case tableNum(WMSJournalTable):         return WMSJournalTable::find(_journalId, _forUpdate);
            case tableNum(ReqItemJournalTable):     return ReqItemJournalTable::find(_journalId, _forUpdate);
            case tableNum(ACOJournalTable_BR):
                if (BrazilParameters::isEnabled())
                {
                    return ACOJournalTable_BR::find(_journalId, _forUpdate);
                }
            case tablenum(RPayJournalTable):        return RPayJournalTable::find(_journalId, _forUpdate);
            case tableNum(RHRMOrderTable):          return RHRMOrderTable::findJournal(_journalId, _forUpdate);
            case tableNum(CFMJournalTable):         return CFMJournalTable::find(_journalId, _forUpdate);
            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                JournalStatic::findJournalTableIdDelegate(_tableId, _journalId, _forUpdate, result);
                if (result.hasResult())
                {
                    return result.result() as JournalTableMap;
                }
                throw error(strFmt("@SYS23455",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasUserAccessForGroupId</Name>
				<Source><![CDATA[
    public static boolean hasUserAccessForGroupId(UserGroupId _groupId)
    {
        if (!_groupId)
        {
            return true;
        }

        if (!UserInfoHelp::userInUserGroup(curUserId(), _groupId))
        {
            return checkFailed(strFmt("@SYS85715", curUserId(), _groupId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTable</Name>
				<Source><![CDATA[
    public static JournalStatic newTable(JournalTableMap _journalTable)
    {
        return JournalStatic::construct(_journalTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>