<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetPanel_PurchCostTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostSheetPanel_PurchCostTrans</c> class uses a <c>VendPackingSlipTrans</c> table record ID
///    or a <c>VendInvoiceTrans</c> table record ID to fetch <c>BOMCalcTrans</c> records that will be used
///    in costing sheet representation.
/// </summary>
class CostSheetPanel_PurchCostTrans extends CostSheetPanel
{
    RefRecId   vendPackingSlipTransId;
    RefRecId   vendInvoiceTransId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>CostPriceType</c> enumeration value that represents the branch of the costing sheet
    ///    displayed in the grid.
    /// </summary>
    /// <returns>
    ///    A value in the <c>CostPriceType</c> enumeration type.
    /// </returns>
    /// <remarks>
    ///    The <c>CostPriceType::Purchase</c> enumeration value.
    /// </remarks>
    protected CostPriceType costType()
    {
        return CostPriceType::Purchase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the dynamically built controls.
    /// </summary>
    /// <remarks>
    ///    This method should be executed before the <c>super</c> method call in the <c>init</c> method of the
    ///    caller form.
    /// </remarks>
    public void init()
    {
        super();

        per = CostSheetPanelPer::LotSize;
        perComboBox.selection(enum2int(per));

        qty = 1;
        qtyReal.realValue(qty);
        qtyReal.allowEdit(this.allowEditQty());

        view = CostSheetPanelView::CostSheet;
        viewComboBox.selection(enum2int(view));
        viewComboBox.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUnitIdAndLotSize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the unit ID and the lot size values.
    /// </summary>
    /// <remarks>
    ///    This method should be overridden in subclasses.
    /// </remarks>
    protected void initUnitIdAndLotSize()
    {
        if (vendPackingSlipTransId)
        {
            VendPackingSlipTrans vendPackingSlipTrans = VendPackingSlipTrans::findRecId(vendPackingSlipTransId);
            lotSize = vendPackingSlipTrans.Qty;
            unitID = vendPackingSlipTrans.PurchUnit;
        }
        else if (vendInvoiceTransId)
        {
            VendInvoiceTrans vendInvoiceTrans = VendInvoiceTrans::findRecId(vendInvoiceTransId);
            lotSize = vendInvoiceTrans.Qty;
            unitID = vendInvoiceTrans.PurchUnit;
        }
        if (!lotSize)
        {
            lotSize = 1.00;
        }

        if (per == CostSheetPanelPer::LotSize)
        {
            qtyReal.realValue(lotSize);
        }

        unitIdString.text(unitID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedRecordsList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates a packed <c>List</c> object with cost rollup records that will later be used as a source
    ///    for cost rollup or costing sheet grids.
    /// </summary>
    /// <returns>
    ///    A container object.
    /// </returns>
    /// <remarks>
    ///    This method should be overridden in subclasses.
    /// </remarks>
    protected container packedRecordsList()
    {
        if (vendPackingSlipTransId)
        {
            return CostSheetPanel_PurchCostTrans::packedServerVendPackingSlipTransId(vendPackingSlipTransId);
        }

        if (vendInvoiceTransId)
        {
            return CostSheetPanel_PurchCostTrans::packedServerVendInvoiceTransId(vendInvoiceTransId);
        }

        return new List(Types::Record).pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceTransId</Name>
				<Source><![CDATA[
        public RefRecId parmVendInvoiceTransId(RefRecId _vendInvoiceTransId = vendInvoiceTransId)
    {
        vendInvoiceTransId = _vendInvoiceTransId;

        // It's not a legal state if both vendPackingSlipTransId and vendInvoiceTransId are set
        Debug::assert( (vendPackingSlipTransId && vendInvoiceTransId) == false);

        return vendInvoiceTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendPackingSlipTransId</Name>
				<Source><![CDATA[
        public RefRecId parmVendPackingSlipTransId(RefRecId _vendPackingSlipTransId = vendPackingSlipTransId)
    {
        vendPackingSlipTransId = _vendPackingSlipTransId;

        // It's not a legal state if both vendPackingSlipTransId and vendInvoiceTransId are set
        Debug::assert( (vendPackingSlipTransId && vendInvoiceTransId) == false);

        return vendPackingSlipTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the class and adds the controls to the caller form at run time.
    /// </summary>
    /// <param name="_formRun">
    ///    The caller form.
    /// </param>
    /// <param name="_parentId">
    ///    The ID of the caller form tab page or group to which to add the complex control.
    /// </param>
    /// <returns>
    ///    The new instance of the class.
    /// </returns>
    /// <remarks>
    ///    This method should be called before the <c>super</c> method call in the <c>init</c> method of the
    ///    caller form.
    /// </remarks>
    public static CostSheetPanel_PurchCostTrans newForm(
        FormRun         _formRun,
        FormControlId   _parentId)
    {
        CostSheetPanel_PurchCostTrans costSheetPanel = new CostSheetPanel_PurchCostTrans();

        costSheetPanel.parmFormRun(_formRun);
        costSheetPanel.parmParentId(_parentId);
        costSheetPanel.build();

        return costSheetPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedServerVendInvoiceTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a <c>VendInvoiceTrans</c> record and the related <c>ProdIndirectTrans</c> records and fills in
    ///    the cost rollup table buffer.
    /// </summary>
    /// <param name="_vendInvoiceTransId">
    ///    The ID of the <c>VendInvoiceTrans</c> record.
    /// </param>
    /// <returns>
    ///    A packed list that contains the cost rollup records.
    /// </returns>
    private static container packedServerVendInvoiceTransId(
        RefRecId        _vendInvoiceTransId)
    {
        CostTmpCostRollup          costTmpCostRollup;
        ProdIndirectTrans          prodIndirectTrans;
        VendInvoiceTrans           vendInvoiceTrans = VendInvoiceTrans::findRecId(_vendInvoiceTransId);

        InventTrans inventTrans = InventTrans::findTransId(vendInvoiceTrans.InventTransId);

        costTmpCostRollup.clear();
        costTmpCostRollup.CostGroupId = inventTrans.inventTable().CostGroupId;
        costTmpCostRollup.Level = InventCostLevel::Single;
        costTmpCostRollup.Split = NoYes::No;
        costTmpCostRollup.CostAmount = vendInvoiceTrans.LineAmount;
        costTmpCostRollup.insert();

        CostAmount totalCostAmount = vendInvoiceTrans.LineAmount;

        while select CostGroupId, Amount
            from prodIndirectTrans
            where prodIndirectTrans.TransRefId == vendInvoiceTrans.InventTransId &&
                  prodIndirectTrans.TransRefType == ProdTransRefType::InventTransId
        {
            costTmpCostRollup.clear();
            costTmpCostRollup.CostGroupId = prodIndirectTrans.CostGroupId;
            costTmpCostRollup.Level       = InventCostLevel::Single;

            costTmpCostRollup.CostAmount = prodIndirectTrans.Amount;

            costTmpCostRollup.Split = NoYes::No;

            costTmpCostRollup.insert();
            totalCostAmount += prodIndirectTrans.Amount;
        }

        // Total is without cost group, sum of Level 1 records
        costTmpCostRollup.clear();
        costTmpCostRollup.Level = InventCostLevel::Total;
        costTmpCostRollup.Split = NoYes::Yes;
        costTmpCostRollup.CostAmount = totalCostAmount;
        costTmpCostRollup.insert();

        List list = new List(Types::Record);

        while select CostGroupId, Level, Split, sum(CostAmount) from costTmpCostRollup
            group by CostGroupId, Level, Split
        {
            list.addEnd(costTmpCostRollup);
        }

        return list.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedServerVendPackingSlipTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a <c>VendPackingSlipTrans</c> record and the related <c>ProdIndirectTrans</c> records and
    ///    fills in the cost rollup table buffer.
    /// </summary>
    /// <param name="_vendPackingSlipTransId">
    ///    The ID of the <c>VendPackingSlipTrans</c> record.
    /// </param>
    /// <returns>
    ///    A packed list that contains the cost rollup records.
    /// </returns>
    private static container packedServerVendPackingSlipTransId(
        RefRecId        _vendPackingSlipTransId)
    {
        CostTmpCostRollup           costTmpCostRollup;
        ProdIndirectTrans           prodIndirectTrans;
        VendPackingSlipTrans        vendPackingSlipTrans = VendPackingSlipTrans::findRecId(_vendPackingSlipTransId);

        InventTrans inventTrans = InventTrans::findTransId(vendPackingSlipTrans.InventTransId);

        costTmpCostRollup.clear();
        costTmpCostRollup.CostGroupId = inventTrans.inventTable().CostGroupId;
        costTmpCostRollup.Level = InventCostLevel::Single;
        costTmpCostRollup.Split = NoYes::No;
        costTmpCostRollup.CostAmount = vendPackingSlipTrans.ValueMST;
        costTmpCostRollup.insert();

        CostAmount totalCostAmount = vendPackingSlipTrans.ValueMST;

        while select CostGroupId, Amount
            from prodIndirectTrans
            where prodIndirectTrans.TransRefId == vendPackingSlipTrans.InventTransId &&
                  prodIndirectTrans.TransRefType == ProdTransRefType::InventTransId
        {
            costTmpCostRollup.clear();
            costTmpCostRollup.CostGroupId = prodIndirectTrans.CostGroupId;
            costTmpCostRollup.Level       = InventCostLevel::Single;

            costTmpCostRollup.CostAmount = prodIndirectTrans.Amount;

            costTmpCostRollup.Split = NoYes::No;

            costTmpCostRollup.insert();
            totalCostAmount += prodIndirectTrans.Amount;
        }

        // Total is without cost group, sum of Level 1 records
        costTmpCostRollup.clear();
        costTmpCostRollup.Level = InventCostLevel::Total;
        costTmpCostRollup.Split = NoYes::Yes;
        costTmpCostRollup.CostAmount = totalCostAmount;
        costTmpCostRollup.insert();

        List list = new List(Types::Record);

        while select CostGroupId, Level, Split, sum(CostAmount) from costTmpCostRollup
            group by CostGroupId, Level, Split
        {
            list.addEnd(costTmpCostRollup);
        }

        return list.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
