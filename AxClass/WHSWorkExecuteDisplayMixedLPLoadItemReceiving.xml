<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayMixedLPLoadItemReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Executes load item receiving flow for mixed license plate receiving.
/// </summary>
[WHSMixedLPReceivingMode(WHSMixedLPReceivingMode::LoadItemReceiving)]
public class WHSWorkExecuteDisplayMixedLPLoadItemReceiving extends WHSWorkExecuteDisplayMixedLPPOReceiving
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateExistingMixedLicensePlate</Name>
				<Source><![CDATA[
    protected void validateExistingMixedLicensePlate(WHSMixedLicensePlateReceipt _mixedLP)
    {
        if (!_mixedLP.LoadId)
        {
            throw error("@WAX:MixedLPLoadError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processControl</Name>
				<Source><![CDATA[
    public boolean processControl(WhsControl _control, str _value)
    {
        switch (true)
        {
            case _control.parmName() == #LoadId:
                return this.processLoadIdForLoadItemReceiving(_control);
        }

        return super(_control, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNextRegistration</Name>
				<Source><![CDATA[
    protected container buildNextRegistration(
        container   _con,
        str         _extraText = '')
    {
        WHSRFMenuItemTable  rfMenuItem = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));
        container           ret = _con;

        ret += this.buildLPContainerControls(rfMenuItem.DisplayContainerTypeCode);
        ret += [this.buildControl(#RFText, #LoadId, "@WAX403", 1, pass.lookupStr(#LoadId), extendedTypeNum(WHSLoadId), '', 0, !pass.hasValue(#LoadId))];

        if (pass.hasValue(#LoadId))
        {
            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, '', extendedTypeNum(InventInventItemSearchItem), '', 0)];
        }

        ret += this.buildNextRegistrationButtonList();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRegistering</Name>
				<Source><![CDATA[
    protected container buildRegistering(
        container   _con,
        str         _extraText = '',
        boolean     _enableContainerType = true)
    {
        WHSRFMenuItemTable      rfMenuItem = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));
        container               ret = _con;
        boolean                 additionalButtons;

        ret += [this.buildControl(#RFLabel, #MixedLPReceiving, pass.exists(#MenuItem) ? rfMenuItem.rfTitle : '', 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += this.buildLPContainerControls(rfMenuItem.DisplayContainerTypeCode, _enableContainerType);

        if (pass.hasValue(#LoadId))
        {
            ret += [this.buildControl(#RFText, #LoadId, "@WAX403", 1, pass.lookup(#LoadId), extendedTypeNum(WHSLoadId), '', 0, false)];

            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookupStr(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0, !pass.hasValue(#ItemId))];

            if (pass.hasValue(#ItemId))
            {
                ItemId      itemId       = pass.lookup(#ItemId);
                InventTable inventTable  = InventTable::find(itemId);
                WHSProdQty  defaultQty   = WHSInventTable::find(pass.lookup(#ItemId)).ProdQty;
                InventDim   inventDim;

                ret += this.buildItemDescription(pass.lookup(#ItemId));

                if (!this.checkProductDimensionsInPass(ItemId))
                {
                    ret = this.buildProductDimensionsFromInventDim(ret, inventTable.ItemId, inventDim);
                }
                else
                {
                    var orderProvider = this.receivingOrderProvider();

                    WHSReceiptOrderLine orderLine = this.getOrderLineForLoad(orderProvider);

                    ret = this.buildProductDimensionsFromInventDim(ret, itemId, orderLine.inventDim(), false);
                    
                    if (orderLine)
                    {
                        orderProvider.setOrderNum(pass, orderLine.OrderNumber);
                        orderProvider.setLineNum(pass, orderLine.LineNumber);

                        if (pass.lookupNum(#Qty) == 0
                        &&  defaultQty)
                        {
                            pass.insert(#Qty, defaultQty);
                        }
                    }
                    else if (orderProvider.hasOrderNum(pass))
                    {
                        pass.insert(#ItemId, '');
                        orderProvider.removeOrderNum(pass);
                        orderProvider.removeLineNum(pass);
                        pass.remove(#Qty);
                        this.clearPassProductDimensions(itemId);
                        step = 1;

                        // Only want the error in the container being passed in.
                        ret = this.buildRegistering(this.addErrorLabel(conNull(), "@WAX:NoQtyForItemOnPO", WHSRFColorText::Error));
                        return ret;
                    }

                    ret += [this.buildControl(#RFText, orderProvider.orderKey(), orderProvider.orderFieldLabel(), 1, orderProvider.orderNum(pass), orderProvider.orderTypeId(), '', 0, !orderLine)];

                    if (pass.lookupStr(#SelectedValueUOM) == '')
                    {
                        pass.insert(#SelectedValueUOM, WHSUOMSeqGroupTable::getDefaultPurchUOM(itemId));
                    }

                    if (orderProvider.lineNum(pass) != 0)
                    {
                        ret += [this.buildControl(#RFText, orderProvider.lineKey(), orderProvider.lineFieldLabel(), 1, orderProvider.lineNumStr(pass), extendedTypeNum(LineNum), '', 0, false)];

                        ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, pass.lookupStr(#Qty), extendedTypeNum(Qty), '', 0)];

                        ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));

                        boolean shouldCaptureAggregateWeight = WHSInventTable::shouldCaptureAggregateWeight(itemId);

                        if (PdsGlobal::pdsIsCWItem(itemId)
                            && (shouldCaptureAggregateWeight || (!shouldCaptureAggregateWeight && !this.captureTrackingDimensions(itemId))))
                        {
                            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, "@WAX:Weight", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight), extendedTypeNum(Weight), '', 0)];
                        }

                        ret = this.buildConversion(ret);
                    }
                }
            }
            else
            {
                additionalButtons = true;
            }
        }
        else
        {
            ret += [this.buildControl(#RFText, #LoadId, "@WAX403", 1, '', extendedTypeNum(WHSLoadId), '', 0)];
        }
        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        if (additionalButtons)
        {
            ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

            if (WHSMixedLicensePlateReceipt::hasOpenRecord(pass.lookup(#LicensePlateId)))
            {
                ret += [this.buildControl(#RFButton, #RFLPComplete, "@WAX:MixedLPComplete", 1, '', #WHSRFUndefinedDataType, '', 0)];
                ret += [this.buildControl(#RFButton, #RFList, "@WAX:MixedLPShowList", 1, '', #WHSRFUndefinedDataType, '', 0)];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLineForLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first matching WHSReceiptOrderLine that can receive additional qty.
    /// </summary>
    /// <returns>
    /// The first WHSReceiptOrderLine that can have additional qty received against it.
    /// </returns>
    private WHSReceiptOrderLine getOrderLineForLoad(WHSWorkExecuteDisplayReceivingOrderProvider _orderProvider)
    {
        InventDim               inventDimCriteria;
        InventDimParm           inventDimParm;

        inventDimParm.setAllProductDimensions();
        inventDimParm.InventLocationIdFlag = NoYes::Yes;
        pass.initInventDimFromPassParm(inventDimCriteria, inventDimParm);

        InventSite::setReceivingWarehouseCriteria(inventDimCriteria, inventDimParm);

        boolean menuItemBlocksOverreceipt = WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).blockLoadLineQuantityOverreceipt();
        Map checkLoadLineForGetOrderLineForLoadCache = new Map(Types::Int64, Types::Enum);

        // If pass has an order id, no need to check how many orders are on the load for this item.
        Num identifiedOrderId = _orderProvider.orderNum(pass);
              
        if (!identifiedOrderId)
        {
            identifiedOrderId = this.getUniqueOrderIdForLoad(inventDimCriteria, inventDimParm, menuItemBlocksOverreceipt, checkLoadLineForGetOrderLineForLoadCache);

            if (identifiedOrderId)
            {
                _orderProvider.setOrderNum(pass, identifiedOrderId);
            }
        }
        
        WHSReceiptOrderLine orderLine;
        
        if (identifiedOrderId)
        {
            boolean foundLine;
            boolean checkRegistered;
            
            // Loop the load lines once checking against ordered qty, then if no open lines, check if any can receive additional qty within overDeliveryPct.
            while (!foundLine)
            {
                WHSLoadLine             loadLine;
                InventDim               inventDim;

                while select loadLine
                    where loadLine.LoadId       == pass.lookup(#LoadId)
                    &&    loadLine.ItemId       == pass.lookup(#ItemId)
                    &&    (!_orderProvider.orderNum(pass)
                    ||     loadLine.OrderNum    == _orderProvider.orderNum(pass))
                    #InventDimExistsJoin(loadLine.InventDimId, inventDim, inventDimCriteria, inventDimParm)
                {
                    if (menuItemBlocksOverreceipt)
                    {
                        if (!this.checkLoadLineForGetOrderLineForLoad(loadLine, checkLoadLineForGetOrderLineForLoadCache))
                        {
                            continue;
                        }
                    }

                    // Checking ordered qty's first, if none is left, check if we can receive more within the overDeliveryPct.
                    if (this.checkPurchLine(loadLine.InventTransId, checkRegistered ? StatusReceipt::Registered : StatusReceipt::Ordered))
                    {
                        orderLine = _orderProvider.findInventTransId(loadLine.InventTransId);
                        pass.insert(#ShipmentId, loadLine.ShipmentId);
                        foundLine = true;
                        break;
                    }
                }

                // If registered has been checked, need to break from loop, no order line is available.
                if (checkRegistered)
                {
                    break;
                }

                checkRegistered = true;
            }
        }

        return orderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUniqueOrderIdForLoad</Name>
				<Source><![CDATA[
    private Num getUniqueOrderIdForLoad(InventDim _inventDimCriteria, InventDimParm _inventDimParm, boolean _menuItemBlocksOverreceipt, Map _checkLoadLineForGetOrderLineForLoadCache)
    {
        WHSLoadLine             loadLine;
        InventDim               inventDim;

        Num identifiedOrderId = '';

        if (_menuItemBlocksOverreceipt)
        {
            while select loadLine
                    where loadLine.LoadId == pass.lookup(#LoadId)
                    &&    loadLine.ItemId == pass.lookup(#ItemId)
                    #InventDimExistsJoin(loadLine.InventDimId, inventDim, _inventDimCriteria, _inventDimParm)
            {
                if (!this.checkLoadLineForGetOrderLineForLoad(loadLine, _checkLoadLineForGetOrderLineForLoadCache))
                {
                    continue;
                }

                if (identifiedOrderId && loadLine.OrderNum != identifiedOrderId)
                {
                    return '';
                }

                identifiedOrderId = loadLine.OrderNum;
            }
        }
        else
        {
            while select OrderNum from loadLine
                group by loadLine.OrderNum
                    where loadLine.LoadId == pass.lookup(#LoadId)
                    &&    loadLine.ItemId == pass.lookup(#ItemId)
                    #InventDimExistsJoin(loadLine.InventDimId, inventDim, _inventDimCriteria, _inventDimParm)
            {
                if (identifiedOrderId && loadLine.OrderNum != identifiedOrderId)
                {
                    return '';
                }

                identifiedOrderId = loadLine.OrderNum;
            }
        }

        return identifiedOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLoadLineForGetOrderLineForLoad</Name>
				<Source><![CDATA[
    private boolean checkLoadLineForGetOrderLineForLoad(WHSLoadLine _loadLine, Map _checkLoadLineForGetOrderLineForLoadCache)
    {
        if (_checkLoadLineForGetOrderLineForLoadCache.exists(_loadLine.RecId))
        {
            return _checkLoadLineForGetOrderLineForLoadCache.lookup(_loadLine.RecId);
        }

        var qtyToReceive = WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(_loadLine.InventTransId);
        var uomToReceive = WHSCatchWeightHelper::inventHandlingUnitId(pass.lookup(#ItemId));

        boolean canAcceptReceipt = !_loadLine.isFullyReceivedAfterAdditionalQty(qtyToReceive, uomToReceive);
        _checkLoadLineForGetOrderLineForLoadCache.insert(_loadLine.RecId, canAcceptReceipt);

        return canAcceptReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPassWithSavedValues</Name>
				<Source><![CDATA[
    protected WhsrfPassthrough resetPassWithSavedValues(container _con)
    {
        WHSLoadId saveLoadId = pass.lookup(#LoadId);

        pass = this.resetPassthrough(_con, false);

        pass.insert(#LoadId, saveLoadId);

        return pass;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>