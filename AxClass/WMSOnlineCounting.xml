<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WMSOnlineCounting</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSOnlineCounting</c> class is used to do counting and adjustment of inventory on hand.
/// </summary>
class WmsOnlineCounting extends RunBase
{
    WMSOnlineCountingServer wmsOnlineCountingServer;

    ItemId                  itemId;
    InventLocationId        inventLocationId;
    WMSLocationId           wmsLocationId;
    InventDimParm           inventDimParmGrid;
    InventSiteId            inventSiteId;

    InventJournalId         journalId;
    Voucher                 voucher;
    boolean                 transCreated;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        itemId,
        inventLocationId,
        wmsLocationId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        FormRun dialogForm;
        Args    args = new Args(formStr(WMSOnlineCounting));

        args.caller(this);

        dialogForm = classfactory.formRunClass(args);
        dialogForm.init();

        return dialogForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    protected void initFromArgs(Args args)
    {
        InventDim   inventDim;
        WMSLocation wmsLocation;
        InventSum   inventSum;
        InventTable inventTable;
        xArgs       callerArgs;
        TmpPmfPackItems packItems;

        inventDimParmGrid.setAllInventDim();
        if (!args || !args.dataset())
        {
            wmsOnlineCountingServer = WMSOnlineCountingServer::construct();
            return;
        }

        switch (args.dataset())
        {
            case tableNum(TmpPmfPackItems):
                packItems = args.record();
                inventDim = args.record().joinChild();
                inventLocationId    = inventDim.InventLocationId;
                wmsLocationId       = inventDim.wmsLocationId;
                inventSiteId        = inventDim.InventSiteId;
                inventDimParmGrid.InventSiteIdFlag      = NoYes::Yes;
                inventDimParmGrid.InventLocationIdFlag  = NoYes::Yes;
                inventDimParmGrid.wmsLocationIdFlag     = NoYes::No;
                wmsOnlineCountingServer = WMSOnlineCountingServer::constructItem(packItems.ItemId, inventLocationId,wmsLocationId);
                break;

            case tableNum(InventSum):
                inventSum = args.record();
                inventDim = getJoinChildFormDataSource(FormDataUtil::getFormDataSource(inventSum), tableNum(inventDim)).cursor();
                // Fields might not have been selected on the specified buffers, or might have been updated since selection
                inventDim.checkInvalidFieldAccess(false);

                itemId = inventSum.ItemId;
                if (!itemId)
                {
                    // No existing onhand -see if a callers caller can provide it
                    if (args.caller())
                    {
                        if (args.caller().name() == formStr(InventOnHandItem))
                        {
                            callerArgs = args.caller().args();
                            if (callerArgs && callerArgs.dataset() == tableNum(InventTable))
                            {
                                inventTable = callerArgs.record() as InventTable;
                                itemId = inventTable.ItemId;
                            }
                        }
                    }
                }

                inventLocationId    = inventDim.InventLocationId;
                wmsLocationId       = inventDim.wmsLocationId;
                inventSiteId        = inventDim.InventSiteId;
                inventDimParmGrid.InventSiteIdFlag      = NoYes::Yes;
                inventDimParmGrid.InventLocationIdFlag  = NoYes::Yes;
                inventDimParmGrid.wmsLocationIdFlag     = NoYes::No;
                wmsOnlineCountingServer = WMSOnlineCountingServer::constructItem(inventSum.ItemId, inventLocationId, wmsLocationId);
                break;

            case tableNum(InventDim):
                inventDim = args.record();
                // Fields might not have been selected on the specified buffers, or might have been updated since selection
                inventDim.checkInvalidFieldAccess(false);

                inventLocationId    = inventDim.InventLocationId;
                wmsLocationId       = inventDim.wmsLocationId;
                inventDimParmGrid.InventSiteIdFlag = NoYes::No;
                inventDimParmGrid.InventLocationIdFlag = NoYes::No;
                inventDimParmGrid.wmsLocationIdFlag = NoYes::No;
                wmsOnlineCountingServer = WMSOnlineCountingServer::constructLocation(inventLocationId, wmsLocationId);
                break;
            case tableNum(WMSLocation):
                wmsLocation = args.record();
                inventLocationId    = wmsLocation.InventLocationId;
                wmsLocationId       = wmsLocation.wmsLocationId;
                inventDimParmGrid.InventSiteIdFlag = NoYes::No;
                inventDimParmGrid.InventLocationIdFlag = NoYes::No;
                inventDimParmGrid.wmsLocationIdFlag = NoYes::No;
                wmsOnlineCountingServer = WMSOnlineCountingServer::constructLocation(inventLocationId, wmsLocationId);
                break;
            default:
                wmsOnlineCountingServer = WMSOnlineCountingServer::construct();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDim</Name>
				<Source><![CDATA[
    public void initInventDim(InventDim inventDim)
    {
        InventTable inventTable = InventTable::find(this.parmItemId());

        inventDim.InventLocationId  = inventLocationId;
        inventDim.wmsLocationId     = wmsLocationId;

        if (inventDimParmGrid.InventSiteIdFlag)
        {
            inventDim.InventSiteId  = inventSiteId;
        }
        else
        {
            inventDim.InventSiteId  = inventDim.inventLocation().InventSiteId;
        }

        if (InventDimGroupSetup::newDimensionGroups(0,inventTable.storageDimensionGroup(),0).isDimensionActive(fieldNum(InventDim, InventStatusId)))
        {
            inventDim.InventStatusId    = WHSInvent::getDefaultStatus(inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpWMSOnlineCounting</Name>
				<Source><![CDATA[
    public void initTmpWMSOnlineCounting(TmpWMSOnlineCounting _tmpWMSOnlineCounting)
    {
        if (itemId)
        {
            _tmpWMSOnlineCounting.ItemId = itemId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParmGrid</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParmGrid(InventDimParm _inventDimParm = inventDimParmGrid)
    {
        inventDimParmGrid = _inventDimParm;
        return inventDimParmGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        wmsOnlineCountingServer.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpWMSOnlineCounting</Name>
				<Source><![CDATA[
    public TmpWMSOnlineCounting tmpWMSOnlineCounting()
    {
        return wmsOnlineCountingServer.tmpWMSOnlineCounting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        return wmsOnlineCountingServer.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRun</Name>
				<Source><![CDATA[
    public boolean validateRun()
    {
        this.runOperation();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public WMSOnlineCounting construct()
    {
        return new WMSOnlineCounting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        WMSOnlineCounting   wmsOnlineCounting;

        wmsOnlineCounting = WMSOnlineCounting::construct();
        wmsOnlineCounting.getLast();

        wmsOnlineCounting.initFromArgs(args);

        if (!wmsOnlineCounting.prompt())
        {
            return;
        }

        if (args && args.record() && args.caller().name() == formStr(InventOnHandItem))
        {
            args.caller().doResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, wmsOnlineCountingServer.packTmpLines()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);
        container packedTmpLines;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedTmpLines] = _packedClass;
                wmsOnlineCountingServer = WMSOnlineCountingServer::construct();
                if (packedTmpLines)
                {
                    wmsOnlineCountingServer.unpackTmpLines(packedTmpLines);
                }
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>