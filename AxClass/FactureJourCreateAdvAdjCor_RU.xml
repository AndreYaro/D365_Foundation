<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureJourCreateAdvAdjCor_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FactureJourCreateAdvAdjCor_RU extends FactureJourCreate_RU
{
    CustVendTrans  custVendTrans;
    FactureJour_RU factureJourOriginal;
    RefRecId       transRecId, offsetRecId;
    boolean        isReversal;
    Voucher        reversedVoucher;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkMap</Name>
				<Source><![CDATA[
    protected boolean checkMap()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    protected boolean checkParameters()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureJour</Name>
				<Source><![CDATA[
    public FactureJour_RU getFactureJour()
    {
        return factureJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes <c>FactureJour_RU</c> record when processing advance adjustment.
    /// </summary>
    /// <remarks>
    ///   Advance adjustment facture is always revision.
    /// </remarks>
    protected void initJournal()
    {
        CustVendTransPostingLog_RU postingLog;

        correctionType = FactureCorrectionType_RU::Revision;

        factureJour.data(factureJourOriginal);

        factureJour.PrintInMST                 = NoYes::Yes;
        factureJour.FactureType                = FactureType_RU::AdvanceAdjustment;
        factureJour.CustVendTransRecId         = custVendTrans.RecId;
        factureJour.CustVendTransTableId       = custVendTrans.TableId;
        factureJour.Voucher                    = custVendTrans.Voucher;
        factureJour.FactureDate                = custVendTrans.TransDate;
        factureJour.FactureDate_External       = custVendTrans.TransDate;
        factureJour.CorrectedFactureExternalId = factureJourOriginal.FactureExternalId;
        factureJour.CorrectedFactureDate       = factureJourOriginal.FactureDate;
        factureJour.CorrectedPeriod            = factureJourOriginal.FactureDate;
        factureJour.CorrectionType             = FactureCorrectionType_RU::Revision;
        factureJour.RefRevisedFacture          = factureJourOriginal.RecId;
        factureJour.FactureExternalId          = factureExtId;
        factureJour.Revised                    = NoYes::No; //Original facture can be already revised
        factureJour.FactureReportDate          = custVendTrans.TransDate;

        if (isReversal)
        {
            select firstonly RecId from postingLog
            where  (postingLog.Reversed       == NoYes::Yes                        &&
                    postingLog.Voucher        == reversedVoucher)  &&
                  ((postingLog.TransRecId     == transRecId                        &&
                    postingLog.OffSetRecId    == offsetRecId)                      ||
                   (postingLog.TransRecId     == offsetRecId                       &&
                    postingLog.OffSetRecId    == transRecId))                      &&
                    postingLog.PostingLogType == CustVendTransPostingLogType_RU::AdvanceAdjustment;
        }
        else
        {
            select firstonly RecId from postingLog
            where  (postingLog.TransDate      == factureDate                       &&
                    postingLog.Reversed       == NoYes::No)                        &&
                  ((postingLog.TransRecId     == transRecId                        &&
                    postingLog.OffSetRecId    == offsetRecId)                      ||
                   (postingLog.TransRecId     == offsetRecId                       &&
                    postingLog.OffSetRecId    == transRecId))                      &&
                    postingLog.PostingLogType == CustVendTransPostingLogType_RU::AdvanceAdjustment;
        }

        factureJour.PostingLogRecId = postingLog.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    protected void initTotals()
    {
        factureJour.FactureAmount = 0;
        factureJour.FactureTax    = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJournal</Name>
				<Source><![CDATA[
    protected void insertJournal(boolean _checkBooks = true)
    {
        factureJour.insert(_checkBooks);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendTrans</Name>
				<Source><![CDATA[
    public void parmCustVendTrans(CustVendTrans _custVendTrans)
    {
        ;
        custVendTrans = _custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactureJourOriginal</Name>
				<Source><![CDATA[
    public FactureJour_RU parmFactureJourOriginal(FactureJour_RU _factureJour = factureJourOriginal)
    {
        factureJourOriginal = _factureJour;
        return factureJourOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetRecId</Name>
				<Source><![CDATA[
    public RefRecId parmOffsetRecId(RefRecId _offsetRecId = offsetRecId)
    {
        offsetRecId = _offsetRecId;
        return offsetRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransRecId</Name>
				<Source><![CDATA[
    public RefRecId parmTransRecId(RefRecId _transRecId = transRecId)
    {
        transRecId = _transRecId;
        return transRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFullyFacturedInvoices</Name>
				<Source><![CDATA[
    // all invoices already updated, no action is required
    protected void updateFullyFacturedInvoices()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FactureJourCreateAdvAdjCor_RU construct(CustVendTrans   _custVendTrans,
                                                          FactureTrans_RU _factureTrans,
                                                          RefRecId        _transRecId,
                                                          RefRecId        _offsetRecId)
    {
        FactureJourCreateAdvAdjCor_RU  ret;
        FactureJour_RU                 fJour = FactureJour_RU::find(_factureTrans.FactureId, _factureTrans.Module);

        switch (_custVendTrans.TableId)
        {
            case tablenum(CustTrans) :
                ret = new FactureJourCreateAdvAdjCorCust_RU();
                break;
            case tablenum(VendTrans) :
                ret = new FactureJourCreateAdvAdjCorVend_RU();
                break;
            default                     :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        ret.parmCustVendTrans(_custVendTrans);
        ret.parmFactureJourOriginal(fJour);
        ret.parmTransRecId(_transRecId);
        ret.parmOffsetRecId(_offsetRecId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReversal</Name>
				<Source><![CDATA[
    public boolean parmIsReversal(boolean _isReversal = isReversal)
    {
        isReversal = _isReversal;
        return isReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversedVoucher</Name>
				<Source><![CDATA[
    public Voucher parmReversedVoucher(Voucher _reversedVoucher = reversedVoucher)
    {
        reversedVoucher = _reversedVoucher;
        return reversedVoucher;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>