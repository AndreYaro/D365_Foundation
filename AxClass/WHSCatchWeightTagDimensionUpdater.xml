<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCatchWeightTagDimensionUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSCatchWeightTagDimensionUpdater</c> class updates the dimensions for one or more catch weight tags with full dimension tracking.
/// </summary>
public final class WHSCatchWeightTagDimensionUpdater
{
    private ItemId          itemId;
    private InventDim       fromInventDim;
    private InventDim       toInventDim;
    private WHSTransWeight  totalWeight;
    private PdsCWInventQty  totalCWQty;
    private container       scannedTags;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateCatchWeightTags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the dimensions on the matching catch weight tags.
    /// </summary>
    [Hookable(false)]
    internal void updateCatchWeightTags()
    {
        if (scannedTags)
        {
            for (int counter = 1; counter <= conLen(scannedTags); counter++)
            {
                WHSCatchWeightTag tag = WHSCatchWeightTag::findByRecId(conPeek(scannedTags, counter), true);

                tag.updateCatchWeightTagDimension(toInventDim);
            }
        }
        else
        {
            WHSTransWeight remainingWeight = totalWeight;
            PdsCWInventQty remainingCWQty = totalCWQty;

            WHSCatchWeightTag tag;
            InventDim inventDim;
            while select forupdate tag
                where tag.ItemId == itemId
                    && tag.IsDeleted == NoYes::No
                #WHSInventDimExistsJoin(tag.InventDimId, inventDim, fromInventDim)
            {
                if (remainingWeight < tag.CapturedWeight || remainingCWQty <= 0)
                {
                    throw error(strFmt("@WAX:ErrorCatchWeightTagsStatusUpdateDoNotMatchExpected", itemId));
                }

                tag.updateCatchWeightTagDimension(toInventDim);

                remainingWeight -= tag.CapturedWeight;
                remainingCWQty -= 1;
            }

            if (remainingWeight || remainingCWQty)
            {
                throw error(strFmt("@WAX:ErrorCatchWeightTagsStatusUpdateDoNotMatchExpected", itemId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventDim parmFromInventDim(InventDim _fromInventDim = fromInventDim)
    {
        fromInventDim = _fromInventDim;
        return fromInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventDim parmToInventDim(InventDim _toInventDim = toInventDim)
    {
        toInventDim = _toInventDim;
        return toInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalWeight</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSTransWeight parmTotalWeight(WHSTransWeight _totalWeight = totalWeight)
    {
        totalWeight = _totalWeight;
        return totalWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalCWQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public PdsCWInventQty parmTotalCWQty(PdsCWInventQty _totalCWQty = totalCWQty)
    {
        totalCWQty = _totalCWQty;
        return totalCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScannedTags</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container parmScannedTags(container _scannedTags = scannedTags)
    {
        scannedTags = _scannedTags;
        return scannedTags;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWorkQuarantine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSCatchWeightTagDimensionUpdater</c> class from a <c>WHSWorkQuarantine</c> table buffer.
    /// </summary>
    /// <param name = "_workQuarantine">The <c>WHSWorkQuarantine</c> table buffer.</param>
    /// <param name = "_totalCWQty">The catch weight quantity (number of tags) to update.</param>
    /// <returns>A new instance of the <c>WHSCatchWeightTagDimensionUpdater</c> to update the catch weight tags.</returns>
    [Hookable(false)]
    internal static WHSCatchWeightTagDimensionUpdater newWorkQuarantine(WHSWorkQuarantine _workQuarantine, PdsCWInventQty _totalCWQty)
    {
        WHSCatchWeightTagDimensionUpdater updater = new WHSCatchWeightTagDimensionUpdater();

        updater.parmItemId(_workQuarantine.ItemId);
        updater.parmTotalWeight(_workQuarantine.CapturedWeight);
        updater.parmTotalCWQty(_totalCWQty);
        updater.parmFromInventDim(InventDim::find(_workQuarantine.InventDimIdFrom));
        updater.parmToInventDim(InventDim::find(_workQuarantine.InventDimIdTo));
 
        return updater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPutWorkInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSCatchWeightTagDimensionUpdater</c> class from a <c>WHSWorkInventTrans</c> table buffer.
    /// </summary>
    /// <param name = "_workInventTrans">The <c>WHSWorkInventTrans</c> table buffer.</c></param>
    /// <param name = "_fromInventDim">The inventory dimensions to match the existing tags for the update.</param>
    /// <param name = "_toInventDim">The inventory dimensions that should be assigned to the tags.</param>
    /// <returns>A new instance of the <c>WHSCatchWeightTagDimensionUpdater</c> to update the catch weight tags.</returns>
    [Hookable(false)]
    internal static WHSCatchWeightTagDimensionUpdater newPutWorkInventTrans(WHSWorkInventTrans _workInventTrans, InventDim _fromInventDim, InventDim _toInventDim)
    {
        WHSCatchWeightTagDimensionUpdater updater = new WHSCatchWeightTagDimensionUpdater();

        updater.parmItemId(_workInventTrans.ItemId);
        updater.parmTotalWeight(_workInventTrans.TransactionWeight);
        updater.parmTotalCWQty(_workInventTrans.Qty);
        updater.parmFromInventDim(_fromInventDim);
        updater.parmToInventDim(_toInventDim);

        return updater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newScannedTags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSCatchWeightTagDimensionUpdater</c> class given specific list of catch weight tags.
    /// </summary>
    /// <param name = "_scannedTags">A container with record IDs for the scanned catch weight tags in the <c>WHSCatchWeightTag</c> table to update.</param>
    /// <param name = "_toInventDim">The inventory dimensions that should be assigned to the tags.</param>
    /// <returns>A new instance of the <c>WHSCatchWeightTagDimensionUpdater</c> to update the catch weight tags.</returns>
    internal static WHSCatchWeightTagDimensionUpdater newScannedTags(container _scannedTags, InventDim _toInventDim)
    {
        WHSCatchWeightTagDimensionUpdater updater = new WHSCatchWeightTagDimensionUpdater();

        updater.parmScannedTags(_scannedTags);
        updater.parmToInventDim(_toInventDim);

        return updater;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>