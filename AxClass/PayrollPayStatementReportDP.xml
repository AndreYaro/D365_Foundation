<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPayStatementReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PayrollPayStatementReportDP</c> class fetches records for the <c>PayrollPayStatementReport</c> report.
/// </summary>

[
    SRSReportQueryAttribute(queryStr(PayrollPayStatementReport)),
    SRSReportParameterAttribute(classStr(PayrollPayStatementReportContract))
]
public class PayrollPayStatementReportDP extends SRSReportDataProviderBase
{
    PayrollPayStatementReportTmp    payrollPayStatementReportTmp;
    HcmPersonnelNumberId            documentNumber;
    PayrollPaymDate                 paymentDate;
    HcmPersonnelNumberId            personnelNumber;
    HcmWorkerName                   workerName;
    LogisticsAddressing             workerAddress;
    Addressing                      companyAddress;
    PeriodStart                     periodStartDate;
    PeriodStart                     periodEndDate;
    AmountMST                       grossTotal;
    AmountMST                       grossTotalYTD;
    AmountMST                       netTotal;
    AmountMST                       netTotalYTD;
    BankChequeNum                   bankChequeNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPayrollPayStatementReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the actual data for the report from the temporary table.
    /// </summary>
    /// <returns>
    ///    The <c>PayrollPayStatementReportTmp</c> temporary table.
    /// </returns>

    [SRSReportDataSetAttribute(tableStr(PayrollPayStatementReportTmp))]
    public PayrollPayStatementReportTmp getPayrollPayStatementReportTmp()
    {
        select  payrollPayStatementReportTmp;
        return  payrollPayStatementReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderValues</Name>
				<Source><![CDATA[
    private void initHeaderValues(PayrollPayStatementRecId _payrollPayStatementRecId,
                                    HcmWorkerRecId _worker,
                                    HcmPersonnelNumberId _documentNumber,
                                    PayrollPaymDate _paymentDate,
                                    PayrollPayPeriodRecId _payrollPayPeriodRecId,
                                    AmountMST _grossTotal,
                                    AmountMST _netTotal)
    {
        PayrollPayStatement                     payrollPayStatementYTD;
        PayrollPayPeriod                        payrollPayPeriod;
        HcmWorker                               hcmWorker;
        LedgerJournalTrans                      ledgerJournalTrans;
        LedgerJournalTransPayrollDisbursement   ledgerJournalTransPayrollDisbursement;

        documentNumber      = _documentNumber;
        paymentDate         = _paymentDate;

        hcmWorker           = HcmWorker::find(_worker);
        personnelNumber     = hcmWorker.PersonnelNumber;
        workerName          = hcmWorker.name();
        workerAddress       = hcmWorker.primaryAddress();

        payrollPayPeriod    = PayrollPayPeriod::find(_payrollPayPeriodRecId);
        periodStartDate     = payrollPayPeriod.PeriodStartDate;
        periodEndDate       = payrollPayPeriod.PeriodEndDate;

        grossTotal          = _grossTotal;
        netTotal            = _netTotal;

        select Worker, sum(GrossAccountingCurrencyAmount), sum(NetAccountingCurrencyAmount)
            from payrollPayStatementYTD
            group by Worker
            where payrollPayStatementYTD.Worker == _worker
            && payrollPayStatementYTD.PaymentDate >= mkDate(01, 01, year(_paymentDate))
            && payrollPayStatementYTD.PaymentDate <= _paymentDate
            && payrollPayStatementYTD.PaymentStatus == PayrollPaymentStatus::PaymentIssued
            && payrollPayStatementYTD.IsReversed == NoYes::No;

        if (payrollPayStatementYTD)
        {
            grossTotalYTD   = payrollPayStatementYTD.GrossAccountingCurrencyAmount;
            netTotalYTD     = payrollPayStatementYTD.NetAccountingCurrencyAmount;
        }

        select firstonly RecId from ledgerJournalTransPayrollDisbursement
            where ledgerJournalTransPayrollDisbursement.PayStatement == _payrollPayStatementRecId
                && ledgerJournalTransPayrollDisbursement.IsNewPaymentIssued == NoYes::No
                && ledgerJournalTransPayrollDisbursement.WorkerBankAccount == 0
            join BankChequeNum from ledgerJournalTrans
                where ledgerJournalTrans.RecId == ledgerJournalTransPayrollDisbursement.RefRecId;

        if (ledgerJournalTrans)
        {
            bankChequeNum = ledgerJournalTrans.BankChequeNum;
        }
        else
        {
            bankChequeNum = "";
        }

        companyAddress = DirParty::getPostalAddressByType(CompanyInfo::current(), LogisticsLocationRoleType::Business);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAccruedBenefits</Name>
				<Source><![CDATA[
    private void insertAccruedBenefits(PayrollPayStatementRecId _payrollPayStatementRecId)
    {
        PayrollPayStatementAccrualBalance   payrollPayStatementAccrualBalance;
        PayrollAccrual                      payrollAccrual;

        // Populate the temporary table for benefits
        while select AccruedHours, UsedHours, TotalAvailableHours from payrollPayStatementAccrualBalance
            where payrollPayStatementAccrualBalance.PayStatement == _payrollPayStatementRecId
            join Description from  payrollAccrual where payrollAccrual.RecId == payrollPayStatementAccrualBalance.Accrual
        {
            this.setHeaderValues();

            payrollPayStatementReportTmp.Description = payrollAccrual.Description;
            payrollPayStatementReportTmp.AccruedHours = payrollPayStatementAccrualBalance.AccruedHours;
            payrollPayStatementReportTmp.UsedHours = payrollPayStatementAccrualBalance.UsedHours;
            payrollPayStatementReportTmp.Balance = payrollPayStatementAccrualBalance.TotalAvailableHours;

            payrollPayStatementReportTmp.ReportSection = PayrollPayStatementReportSection::Benefit;

            // Insert benefit line
            payrollPayStatementReportTmp.insert();
            payrollPayStatementReportTmp.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankInformation</Name>
				<Source><![CDATA[
    private void insertBankInformation(PayrollPayStatementRecId _payrollPayStatementRecId)
    {
        LedgerJournalTrans                      ledgerJournalTrans;
        HcmWorkerBankAccount                    hcmWorkerBankAccount;
        LedgerJournalTransPayrollDisbursement   ledgerJournalTransPayrollDisbursement;

        while select * from ledgerJournalTransPayrollDisbursement
            where ledgerJournalTransPayrollDisbursement.PayStatement == _payrollPayStatementRecId
                && ledgerJournalTransPayrollDisbursement.IsNewPaymentIssued == NoYes::No
            join AmountCurDebit from ledgerJournalTrans
                where ledgerJournalTrans.RecId == ledgerJournalTransPayrollDisbursement.RefRecId
            join Name, AccountNum from hcmWorkerBankAccount
                where hcmWorkerBankAccount.RecId == ledgerJournalTransPayrollDisbursement.WorkerBankAccount
        {
            this.setHeaderValues();

            payrollPayStatementReportTmp.BankName = hcmWorkerBankAccount.Name;
            payrollPayStatementReportTmp.AccountNum = 'xxxxxxxx' + subStr(hcmWorkerBankAccount.AccountNum, strLen(hcmWorkerBankAccount.AccountNum) - 3, 4);
            payrollPayStatementReportTmp.AmountCurDebit = ledgerJournalTrans.AmountCurDebit;

            payrollPayStatementReportTmp.ReportSection = PayrollPayStatementReportSection::Bank;

            // Insert bank line
            payrollPayStatementReportTmp.insert();
            payrollPayStatementReportTmp.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBenefits</Name>
				<Source><![CDATA[
    private void insertBenefits(PayrollPayStatementRecId _payrollPayStatementRecId,
                                HcmWorkerRecId _worker,
                                boolean _isDeduction)
    {
        PayrollStatementAccountingCurrencyAmount    total = 0;
        PayrollStatementAccountingCurrencyAmount    totalYTD = 0;
        HcmBenefit                                  hcmBenefit;
        HcmBenefitPlan                              hcmBenefitPlan;
        PayrollPayStatement                         payrollPayStatementYTD;
        PayrollPayStatementBenefitLine              payrollPayStatementBenefitLine;
        PayrollPayStatementBenefitLine              payrollPayStatementBenefitLineYTD;
        NoYesId                                     isEmployer;
        PayrollPayStatementReportSection            reportSection;
        PayrollPayStatementReportSection            totalsReportSection;

        if (_isDeduction)
        {
            isEmployer          = NoYes::No;
            reportSection       = PayrollPayStatementReportSection::Deduction;
            totalsReportSection = PayrollPayStatementReportSection::TotalDeductions;
        }
        else
        {
            isEmployer          = NoYes::Yes;
            reportSection       = PayrollPayStatementReportSection::Contribution;
            totalsReportSection = PayrollPayStatementReportSection::TotalContributions;
        }

        //
        // Populate the temporary table for deductions
        // The query fetches all the Benefits and their YTD amounts that have been deducted from the employee
        // through this pay period.
        //
        while select Benefit, sum(AccountingCurrencyAmount) from payrollPayStatementBenefitLineYTD
            where payrollPayStatementBenefitLineYTD.IsEmployer == isEmployer
                && payrollPayStatementBenefitLineYTD.IsMarkedForRemoval == NoYes::No
            join payrollPayStatementYTD where payrollPayStatementYTD.RecId == payrollPayStatementBenefitLineYTD.PayStatement
                && payrollPayStatementYTD.Worker == _worker
                && payrollPayStatementYTD.IsReversed == NoYes::No
                && payrollPayStatementYTD.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                && payrollPayStatementYTD.PaymentDate >= mkDate(01, 01, year(paymentDate))
                && payrollPayStatementYTD.PaymentDate <= paymentDate
            join  hcmBenefit
                where payrollPayStatementBenefitLineYTD.Benefit == hcmBenefit.RecId
            join Description from hcmBenefitPlan
                group by payrollPayStatementBenefitLineYTD.Benefit,
                    hcmBenefitPlan.Description
                order by hcmBenefitPlan.Description asc
                where hcmBenefitPlan.RecId == hcmBenefit.BenefitPlan
        {
            this.setHeaderValues();

            payrollPayStatementReportTmp.Description = hcmBenefitPlan.Description;

            // The query fetches the current amount for the benefits on the pay statement for the deductions.
            select sum(AccountingCurrencyAmount) from payrollPayStatementBenefitLine
                group by payrollPayStatementBenefitLine.PayStatement
                where payrollPayStatementBenefitLine.PayStatement == _payrollPayStatementRecId
                && payrollPayStatementBenefitLine.Benefit == payrollPayStatementBenefitLineYTD.Benefit
                && payrollPayStatementBenefitLine.IsMarkedForRemoval == NoYes::No
                && payrollPayStatementBenefitLine.IsEmployer == isEmployer;

            if (payrollPayStatementBenefitLine)
            {
                total += payrollPayStatementBenefitLine.AccountingCurrencyAmount;
                payrollPayStatementReportTmp.AccountingCurrencyAmount = payrollPayStatementBenefitLine.AccountingCurrencyAmount;
            }
            else
            {
                payrollPayStatementReportTmp.AccountingCurrencyAmount = 0;
            }

            payrollPayStatementReportTmp.AccountingCurrencyAmountYTD = payrollPayStatementBenefitLineYTD.AccountingCurrencyAmount;
            totalYTD += payrollPayStatementBenefitLineYTD.AccountingCurrencyAmount;

            payrollPayStatementReportTmp.ReportSection = reportSection;

            // Insert deduction line
            payrollPayStatementReportTmp.insert();
            payrollPayStatementReportTmp.clear();
        }

        // Insert deduction totals
        this.setHeaderValues();
        payrollPayStatementReportTmp.ReportSection = totalsReportSection;
        payrollPayStatementReportTmp.AccountingCurrencyAmount = total;
        payrollPayStatementReportTmp.AccountingCurrencyAmountYTD = totalYTD;

        payrollPayStatementReportTmp.insert();
        payrollPayStatementReportTmp.clear();
        total = 0;
        totalYTD = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    private void insertData(PayrollPayStatement _payrollPayStatement)
    {
        this.initHeaderValues(_payrollPayStatement.RecId, _payrollPayStatement.Worker, _payrollPayStatement.DocumentNumber,
            _payrollPayStatement.PaymentDate, _payrollPayStatement.PayPeriod,
            _payrollPayStatement.GrossAccountingCurrencyAmount, _payrollPayStatement.NetAccountingCurrencyAmount);

        this.insertEarnings(_payrollPayStatement.RecId, _payrollPayStatement.Worker);

        this.insertBenefits(_payrollPayStatement.RecId, _payrollPayStatement.Worker, true);

        this.insertTaxes(_payrollPayStatement.RecId, _payrollPayStatement.Worker);

        this.insertAccruedBenefits(_payrollPayStatement.RecId);

        // Populate this data only if the parameters are set to print pay slip contributions
        if (PayrollParameters::find().PaySlipContributions == NoYes::Yes)
        {
            this.insertBenefits(_payrollPayStatement.RecId, _payrollPayStatement.Worker, false);
        }

        this.insertBankInformation(_payrollPayStatement.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEarnings</Name>
				<Source><![CDATA[
    private void insertEarnings(PayrollPayStatementRecId _payrollPayStatementRecId,
                                HcmWorkerRecId _worker)
    {
        // Insert all earnings except for fringe benefit recovery earnings
        this.insertNormalEarnings(_payrollPayStatementRecId, _worker);

        // Insert all fringe benefit recovery earnings
        this.insertFringeBenefitRecoveryEarnings(_payrollPayStatementRecId, _worker);

        // Insert gross earning totals
        this.setHeaderValues();
        payrollPayStatementReportTmp.ReportSection = PayrollPayStatementReportSection::TotalGrossEarnings;
        payrollPayStatementReportTmp.AccountingCurrencyAmount = grossTotal;
        payrollPayStatementReportTmp.AccountingCurrencyAmountYTD = grossTotalYTD;

        payrollPayStatementReportTmp.insert();
        payrollPayStatementReportTmp.clear();

        // Insert net earning totals
        this.setHeaderValues();
        payrollPayStatementReportTmp.ReportSection = PayrollPayStatementReportSection::TotalNetEarnings;
        payrollPayStatementReportTmp.AccountingCurrencyAmount = netTotal;
        payrollPayStatementReportTmp.AccountingCurrencyAmountYTD = netTotalYTD;

        payrollPayStatementReportTmp.insert();
        payrollPayStatementReportTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNormalEarnings</Name>
				<Source><![CDATA[
    private void insertNormalEarnings(PayrollPayStatementRecId _payrollPayStatementRecId,
        HcmWorkerRecId  _worker)
    {
        PayrollEarningCode payrollEarningCode;
        PayrollPayStatement payrollPayStatementYTD;
        PayrollPayStatementEarningLine payrollPayStatementEarningLine;
        PayrollPayStatementEarningLine payrollPayStatementEarningLineYTD;
        PayrollPayStatementReportTmp payStatementReportTmpForEachUoM;
        PayrollPayStatementReportTmp payStatementReportTmpForSwap;

        // Populate the temporary table for earnings
        // The query fetches all earning lines grouped by their EarningCodes, EarningRates and summing their YTD amounts that have been earned
        // by the employee through this pay period.
        // FringeBenefitRecovery lines are excluded throughout to prevent zero-sum cancellation of amounts.
        //
        while select EarningCode, EarningRate, sum(AccountingCurrencyAmount) from payrollPayStatementEarningLineYTD
            where payrollPayStatementEarningLineYTD.IsMarkedForRemoval == NoYes::No
                && payrollPayStatementEarningLineYTD.Source != PayrollPayStatementLineSource::FringeBenefitRecover
            join payrollPayStatementYTD where payrollPayStatementYTD.RecId == payrollPayStatementEarningLineYTD.PayStatement
                && payrollPayStatementYTD.Worker == _worker
                && payrollPayStatementYTD.IsReversed == NoYes::No
                && payrollPayStatementYTD.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                && payrollPayStatementYTD.PaymentDate >= mkDate(01, 01, year(paymentDate))
                && payrollPayStatementYTD.PaymentDate <= paymentDate
            join Description, QuantityUnit from payrollEarningCode
                group by payrollPayStatementEarningLineYTD.EarningCode,
                    payrollPayStatementEarningLineYTD.EarningRate,
                    payrollEarningCode.Description,
                    payrollEarningCode.QuantityUnit
                order by payrollEarningCode.Description,
                    payrollPayStatementEarningLineYTD.EarningRate asc
                where payrollPayStatementEarningLineYTD.EarningCode == payrollEarningCode.RecId
        {
            this.setHeaderValues();

            payrollPayStatementReportTmp.Description = payrollEarningCode.Description;
            payrollPayStatementReportTmp.QuantityUnit = payrollEarningCode.QuantityUnit;

            //
            // The query fetches the current amount for the earnings on the pay statement
            // grouped by the EarningCode and EarningRate combination.
            //
            select sum(Quantity), sum(AccountingCurrencyAmount) from payrollPayStatementEarningLine
                group by payrollPayStatementEarningLine.PayStatement
                where payrollPayStatementEarningLine.PayStatement == _payrollPayStatementRecId
                && payrollPayStatementEarningLine.EarningCode == payrollPayStatementEarningLineYTD.EarningCode
                && payrollPayStatementEarningLine.EarningRate == payrollPayStatementEarningLineYTD.EarningRate
                && payrollPayStatementEarningLine.IsMarkedForRemoval == NoYes::No
                && payrollPayStatementEarningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover;

            if (payrollPayStatementEarningLine)
            {
                payrollPayStatementReportTmp.Quantity = payrollPayStatementEarningLine.Quantity;
                payrollPayStatementReportTmp.AccountingCurrencyAmount = payrollPayStatementEarningLine.AccountingCurrencyAmount;
            }
            else
            {
                payrollPayStatementReportTmp.Quantity = 0;
                payrollPayStatementReportTmp.AccountingCurrencyAmount = 0;
            }

            payrollPayStatementReportTmp.EarningRate = payrollPayStatementEarningLineYTD.EarningRate;
            payrollPayStatementReportTmp.AccountingCurrencyAmountYTD = payrollPayStatementEarningLineYTD.AccountingCurrencyAmount;

            payrollPayStatementReportTmp.ReportSection = PayrollPayStatementReportSection::Earning;

            if (payrollEarningCode.QuantityUnit != PayrollQuantityUnit::Each)
            {
                // Insert earning line
                payrollPayStatementReportTmp.insert();
            }
            else
            {
                // For UnitOfMeasure == Each, we need to collapse rows having the same earning code irrespective of the earning rate
                if (payrollPayStatementReportTmp.Description == payStatementReportTmpForEachUoM.Description
                   || payStatementReportTmpForEachUoM.PaymentNumber == "")
                {
                    //
                    // Accumulate current and YTD amounts for the earning code
                    // Note: Use of Description as the grouping is an intended feature for reporting purposes
                    //
                    payrollPayStatementReportTmp.AccountingCurrencyAmount += payStatementReportTmpForEachUoM.AccountingCurrencyAmount;
                    payrollPayStatementReportTmp.AccountingCurrencyAmountYTD += payStatementReportTmpForEachUoM.AccountingCurrencyAmountYTD;
                    buf2Buf(payrollPayStatementReportTmp, payStatementReportTmpForEachUoM);
                }
                else
                {
                    if (payStatementReportTmpForEachUoM.PaymentNumber != "")
                    {
                        // Reached end of current earning code run
                        // Store current iterator state
                        buf2Buf(payrollPayStatementReportTmp, payStatementReportTmpForSwap);

                        // Retrieve accumulator and perform insert for the accumulated amounts
                        buf2Buf(payStatementReportTmpForEachUoM, payrollPayStatementReportTmp);
                        payrollPayStatementReportTmp.insert();

                        // Restore iterator states
                        buf2Buf(payStatementReportTmpForSwap, payrollPayStatementReportTmp);
                        buf2Buf(payStatementReportTmpForSwap, payStatementReportTmpForEachUoM);
                        payStatementReportTmpForSwap.clear();
                    }
                }
            }

            payrollPayStatementReportTmp.clear();
        }

        if (payStatementReportTmpForEachUoM.PaymentNumber != "")
        {
            // Insert any remaining rows in the accumulator buffer
            this.setHeaderValues();
            buf2Buf(payStatementReportTmpForEachUoM, payrollPayStatementReportTmp);
            payrollPayStatementReportTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFringeBenefitRecoveryEarnings</Name>
				<Source><![CDATA[
    private void insertFringeBenefitRecoveryEarnings(PayrollPayStatementRecId _payrollPayStatementRecId,
        HcmWorkerRecId  _worker)
    {
        PayrollEarningCode payrollEarningCode;
        PayrollPayStatement payrollPayStatementYTD;
        PayrollPayStatementEarningLine payrollPayStatementEarningLine;
        PayrollPayStatementEarningLine payrollPayStatementEarningLineYTD;
        PayrollPayStatementReportTmp payStatementReportTmpForEachUoM;
        PayrollPayStatementReportTmp payStatementReportTmpForSwap;

        //
        // Populate the temporary table for fringe benefit recovery earnings
        // The query fetches all fringe benefit recovery earning lines grouped by their
        // EarningCode, EarningRates and summing their YTD amounts that have been earned
        // by the employee through this pay period.
        //
        while select EarningCode, EarningRate, sum(AccountingCurrencyAmount) from payrollPayStatementEarningLineYTD
            where payrollPayStatementEarningLineYTD.IsMarkedForRemoval == NoYes::No
                && payrollPayStatementEarningLineYTD.Source == PayrollPayStatementLineSource::FringeBenefitRecover
            join payrollPayStatementYTD where payrollPayStatementYTD.RecId == payrollPayStatementEarningLineYTD.PayStatement
                && payrollPayStatementYTD.Worker == _worker
                && payrollPayStatementYTD.IsReversed == NoYes::No
                && payrollPayStatementYTD.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                && payrollPayStatementYTD.PaymentDate >= mkDate(01, 01, year(paymentDate))
                && payrollPayStatementYTD.PaymentDate <= paymentDate
            join Description, QuantityUnit from payrollEarningCode
                group by payrollPayStatementEarningLineYTD.EarningCode,
                    payrollPayStatementEarningLineYTD.EarningRate,
                    payrollEarningCode.Description,
                    payrollEarningCode.QuantityUnit
                order by payrollEarningCode.Description,
                    payrollPayStatementEarningLineYTD.EarningRate asc
                where payrollPayStatementEarningLineYTD.EarningCode == payrollEarningCode.RecId
        {
            this.setHeaderValues();

            payrollPayStatementReportTmp.Description = payrollEarningCode.Description;
            payrollPayStatementReportTmp.QuantityUnit = payrollEarningCode.QuantityUnit;

            //
            // The query fetches the current amount for the earnings on the pay statement
            // grouped by the EarningCode and EarningRate combination.
            //
            select sum(Quantity), sum(AccountingCurrencyAmount) from payrollPayStatementEarningLine
                group by payrollPayStatementEarningLine.PayStatement
                where payrollPayStatementEarningLine.PayStatement == _payrollPayStatementRecId
                && payrollPayStatementEarningLine.EarningCode == payrollPayStatementEarningLineYTD.EarningCode
                && payrollPayStatementEarningLine.EarningRate == payrollPayStatementEarningLineYTD.EarningRate
                && payrollPayStatementEarningLine.IsMarkedForRemoval == NoYes::No
                && payrollPayStatementEarningLine.Source == PayrollPayStatementLineSource::FringeBenefitRecover;

            if (payrollPayStatementEarningLine)
            {
                payrollPayStatementReportTmp.Quantity = payrollPayStatementEarningLine.Quantity;
                payrollPayStatementReportTmp.AccountingCurrencyAmount = payrollPayStatementEarningLine.AccountingCurrencyAmount;
            }
            else
            {
                payrollPayStatementReportTmp.Quantity = 0;
                payrollPayStatementReportTmp.AccountingCurrencyAmount = 0;
            }

            payrollPayStatementReportTmp.EarningRate = payrollPayStatementEarningLineYTD.EarningRate;
            payrollPayStatementReportTmp.AccountingCurrencyAmountYTD = payrollPayStatementEarningLineYTD.AccountingCurrencyAmount;

            payrollPayStatementReportTmp.ReportSection = PayrollPayStatementReportSection::Earning;

            if (payrollEarningCode.QuantityUnit != PayrollQuantityUnit::Each)
            {
                // Insert earning line
                payrollPayStatementReportTmp.insert();
            }
            else
            {
                // For UnitOfMeasure == Each, we need to collapse rows having the same earning code irrespective of the earning rate
                if (payrollPayStatementReportTmp.Description == payStatementReportTmpForEachUoM.Description
                   || payStatementReportTmpForEachUoM.PaymentNumber == "")
                {
                    //
                    // Accumulate current and YTD amounts for the earning code
                    // Note: Use of Description as the grouping is an intended feature for reporting purposes
                    //
                    payrollPayStatementReportTmp.AccountingCurrencyAmount += payStatementReportTmpForEachUoM.AccountingCurrencyAmount;
                    payrollPayStatementReportTmp.AccountingCurrencyAmountYTD += payStatementReportTmpForEachUoM.AccountingCurrencyAmountYTD;
                    buf2Buf(payrollPayStatementReportTmp, payStatementReportTmpForEachUoM);
                }
                else
                {
                    if (payStatementReportTmpForEachUoM.PaymentNumber != "")
                    {
                        // Reached end of current earning code run
                        // Store current iterator state
                        buf2Buf(payrollPayStatementReportTmp, payStatementReportTmpForSwap);

                        // Retrieve accumulator and perform insert for the accumulated amounts
                        buf2Buf(payStatementReportTmpForEachUoM, payrollPayStatementReportTmp);
                        payrollPayStatementReportTmp.insert();

                        // Restore iterator states
                        buf2Buf(payStatementReportTmpForSwap, payrollPayStatementReportTmp);
                        buf2Buf(payStatementReportTmpForSwap, payStatementReportTmpForEachUoM);
                        payStatementReportTmpForSwap.clear();
                    }
                }
            }
        }

        if (payStatementReportTmpForEachUoM.PaymentNumber != "")
        {
            // Insert any remaining rows in the accumulator buffer
            this.setHeaderValues();
            buf2Buf(payStatementReportTmpForEachUoM, payrollPayStatementReportTmp);
            payrollPayStatementReportTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxes</Name>
				<Source><![CDATA[
    private void insertTaxes(PayrollPayStatementRecId _payrollPayStatementRecId,
                            HcmWorkerRecId _worker)
    {
        PayrollStatementAccountingCurrencyAmount    total = 0;
        PayrollStatementAccountingCurrencyAmount    totalYTD = 0;
        PayrollTaxCode                              payrollTaxCode;
        PayrollTaxCodeDetail                        payrollTaxCodeDetail;
        PayrollPayStatement                         payrollPayStatementYTD;
        PayrollPayStatementTaxLine                  payrollPayStatementTaxLine;
        PayrollPayStatementTaxLine                  payrollPayStatementTaxLineYTD;
        CompanyInfoRecId                            companyInfoRecId;

        //
        // Populate the temporary table for taxes
        // The query fetches all the taxes and their YTD amounts that have been deducted from the employee
        // through this pay period.
        //

        companyInfoRecId = CompanyInfo::current();

        while select TaxCode, sum(AccountingCurrencyAmount) from payrollPayStatementTaxLineYTD
            where payrollPayStatementTaxLineYTD.IsEmployer == NoYes::No
                && payrollPayStatementTaxLineYTD.IsMarkedForRemoval == NoYes::No
            join payrollPayStatementYTD where payrollPayStatementYTD.RecId == payrollPayStatementTaxLineYTD.PayStatement
                && payrollPayStatementYTD.Worker == _worker
                && payrollPayStatementYTD.IsReversed == NoYes::No
                && payrollPayStatementYTD.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                && payrollPayStatementYTD.PaymentDate >= mkDate(01, 01, year(paymentDate))
                && payrollPayStatementYTD.PaymentDate <= paymentDate
            join Description from payrollTaxCode
                where payrollPayStatementTaxLineYTD.TaxCode == payrollTaxCode.RecId
            outer join ReportDescription from payrollTaxCodeDetail
                group by payrollPayStatementTaxLineYTD.TaxCode,
                    payrollTaxCode.Description,
                    payrollTaxCodeDetail.ReportDescription
                order by payrollTaxCode.Description, payrollTaxCodeDetail.ReportDescription asc
                where payrollTaxCodeDetail.PayrollTaxCode == payrollTaxCode.RecId
                    && payrollTaxCodeDetail.LegalEntity == companyInfoRecId
        {
            this.setHeaderValues();

            if (payrollTaxCodeDetail.ReportDescription != "")
            {
                payrollPayStatementReportTmp.Description = payrollTaxCodeDetail.ReportDescription;
            }
            else
            {
                payrollPayStatementReportTmp.Description = payrollTaxCode.Description;
            }

            // The query fetches the current amounts of all the taxes for the pay statement.
            select sum(AccountingCurrencyAmount) from payrollPayStatementTaxLine
                group by payrollPayStatementTaxLine.PayStatement
                where payrollPayStatementTaxLine.PayStatement == _payrollPayStatementRecId
                && payrollPayStatementTaxLine.TaxCode == payrollPayStatementTaxLineYTD.TaxCode
                && payrollPayStatementTaxLine.IsMarkedForRemoval == NoYes::No
                && payrollPayStatementTaxLine.IsEmployer == NoYes::No;

            if (payrollPayStatementTaxLine)
            {
                payrollPayStatementReportTmp.AccountingCurrencyAmount = payrollPayStatementTaxLine.AccountingCurrencyAmount;
                total += payrollPayStatementTaxLine.AccountingCurrencyAmount;
            }
            else
            {
                payrollPayStatementReportTmp.AccountingCurrencyAmount = 0;
            }

            totalYTD += payrollPayStatementTaxLineYTD.AccountingCurrencyAmount;
            payrollPayStatementReportTmp.AccountingCurrencyAmountYTD = payrollPayStatementTaxLineYTD.AccountingCurrencyAmount;

            payrollPayStatementReportTmp.ReportSection = PayrollPayStatementReportSection::Deduction;

            // Insert tax line
            payrollPayStatementReportTmp.insert();
            payrollPayStatementReportTmp.clear();
        }

        // Insert tax totals
        this.setHeaderValues();
        payrollPayStatementReportTmp.ReportSection = PayrollPayStatementReportSection::TotalTaxes;
        payrollPayStatementReportTmp.AccountingCurrencyAmount = total;
        payrollPayStatementReportTmp.AccountingCurrencyAmountYTD = totalYTD;

        payrollPayStatementReportTmp.insert();
        payrollPayStatementReportTmp.clear();
        total = 0;
        totalYTD = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Retrieves records based on the parameters entered.
    /// </summary>

    public void processReport()
    {
        PayrollPayStatement                 payrollPayStatement;
        QueryRun                            queryRun;
        Query                               query;

        PayrollPayStatementReportContract   contract = this.parmDataContract() as PayrollPayStatementReportContract;

        // Called from EP
        if (contract && contract.parmPayStatement())
        {
            payrollPayStatement = PayrollPayStatement::find(contract.parmPayStatement());

            if (this.validateEPParameters(payrollPayStatement))
            {
                this.insertData(payrollPayStatement);
            }
        }
        // Called from Client
        else
        {
            query = this.parmQuery();

            //Filter out paystatements whose status is not PaymentIssued
            SrsReportHelper::addParameterValueRangeToQuery(query,
                                                       tableNum(PayrollPayStatement),
                                                       fieldNum(PayrollPayStatement, PaymentStatus),
                                                       SysQuery::value(PayrollPaymentStatus::PaymentIssued));

            //Filter out paystatements which is reversed
            SrsReportHelper::addParameterValueRangeToQuery(query,
                                                       tableNum(PayrollPayStatement),
                                                       fieldNum(PayrollPayStatement, IsReversed),
                                                       SysQuery::value(NoYes::No));
            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                payrollPayStatement = queryRun.get(tableNum(PayrollPayStatement));

                this.insertData(payrollPayStatement);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderValues</Name>
				<Source><![CDATA[
    private void setHeaderValues()
    {
        payrollPayStatementReportTmp.PaymentNumber      = documentNumber;
        payrollPayStatementReportTmp.PaymentDate        = paymentDate;
        payrollPayStatementReportTmp.PersonnelNumber    = personnelNumber;
        payrollPayStatementReportTmp.WorkerName         = workerName;
        payrollPayStatementReportTmp.WorkerAddress      = workerAddress;
        payrollPayStatementReportTmp.PeriodStartDate    = periodStartDate;
        payrollPayStatementReportTmp.PeriodEndDate      = periodEndDate;
        payrollPayStatementReportTmp.BankChequeNum      = bankChequeNum;
        payrollPayStatementReportTmp.CompanyAddress     = companyAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEPParameters</Name>
				<Source><![CDATA[
    private boolean validateEPParameters(PayrollPayStatement _payrollPayStatement)
    {
        boolean ret = true;

        // Report worker does not match current user
        if (HcmWorkerLookup::currentWorker() != _payrollPayStatement.Worker)
        {
            ret = false;
        }

        // Payment date is in the future
        if (ret && (_payrollPayStatement.PaymentDate > DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())))
        {
            ret = false;
        }

        // Payment has not yet been issued
        if (ret && (_payrollPayStatement.PaymentStatus != PayrollPaymentStatus::PaymentIssued))
        {
            ret = false;
        }

        // Statement has been reversed
        if (ret && (_payrollPayStatement.IsReversed == NoYes::Yes))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>