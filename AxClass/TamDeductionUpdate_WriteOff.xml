<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TamDeductionUpdate_WriteOff</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMDeductionUpdate_WriteOff</c> class manages the update of deductions for the
/// action of write off.
/// </summary>
class TamDeductionUpdate_WriteOff extends TAMDeductionUpdate
{
    TmpTAMDeductionParmWriteOff     tmpDeductionParmWriteOff;
    Map                             mapWriteOffReasonToAccount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(TmpTAMDeductionParmWriteOff _tmpDeductionParmWriteOff)
    {
        super(_tmpDeductionParmWriteOff);
        tmpDeductionParmWriteOff.setTmpData(_tmpDeductionParmWriteOff);

        mapWriteOffReasonToAccount = new Map(typeName2Type(extendedTypeStr(TAMDeductionWriteOffReason)),
                                             typeName2Type(extendedTypeStr(LedgerDimensionDefaultAccount)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    protected Common parmBuffer()
    {
        return tmpDeductionParmWriteOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormString</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the split update form string.
    /// </summary>
    /// <returns>
    /// The split update form string.
    /// </returns>
    protected str parmFormString()
    {
        return formStr(TAMDeductionParmWriteOff);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTAMDeductionUpdateType</Name>
				<Source><![CDATA[
    protected TAMDeductionUpdateType parmTAMDeductionUpdateType()
    {
        return TAMDeductionUpdateType::WriteOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    protected void update()
    {
        #OCCRetryCount
        TAMDeduction                        deduction;
        TAMDeductionWriteOffReasonTable     deductionWriteOffReasonTable;
        LedgerJournalTable                  ledgerJournalTable;
        LedgerJournalTrans                  ledgerJournalTrans;
        LedgerJournalCheckPost              ledgerJournalCheckPost;
        RecordSortedList                    listLedgerJournalTrans;
        TAMPromotionParameters              tamPromotionParameters;
        MainAccount                         mainAccount;
        DimensionDynamicAccount             acctNum;

        this.initLedgerJournalTable(ledgerJournalTable);

        // Store LedgerJournalTrans in a list.  Purpose is to initialize outside TTS
        // and insert all records at once inside TTS
        listLedgerJournalTrans = new RecordSortedList(tableNum(LedgerJournalTrans));
        listLedgerJournalTrans.sortOrder(fieldNum(LedgerJournalTrans, LineNum));

        // Remember account number for each write-off reason.  Allows TTS scope to be smaller because
        // initialization of LedgerJournalTrans and update of TAMDeduction records will use remembered
        // account.
        while select tmpDeductionParmWriteOff
        {
            deductionWriteOffReasonTable =
                TAMDeductionWriteOffReasonTable::find(tmpDeductionParmWriteOff.DeductionWriteOffReason);

            mapWriteOffReasonToAccount.insert(deductionWriteOffReasonTable.tamDeductionWriteOffReason,
                                              deductionWriteOffReasonTable.DeductWriteOffRsnLedgerDimension);

            deduction = TAMDeduction::find(tmpDeductionParmWriteOff.DeductionID);

            // Initialize LedgerJournalTrans and add to list
            // Always write off full remaining amount
            this.initLedgerJournalTrans(ledgerJournalTrans,
                                        deduction,
                                        deduction.RemainAmountCur);

            // Use account specified with write-off reason
            // Set the merged account in the ledger journal trans
            mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(mapWriteOffReasonToAccount.lookup(tmpDeductionParmWriteOff.DeductionWriteOffReason));

            acctNum = MCRAssistantLedgerDimension::mergeAccountAndDimension(mainAccount.RecId,
                                                                            tmpDeductionParmWriteOff.Dimension);

            ledgerJournalTrans.parmLedgerDimension(acctNum);

            // Add the financial dimensions
            ledgerJournalTrans.DefaultDimension = tmpDeductionParmWriteOff.Dimension;

            listLedgerJournalTrans.ins(ledgerJournalTrans);
        }

        try
        {
            ttsbegin;

            ledgerJournalTable = this.insertJournalAndLines(ledgerJournalTable, listLedgerJournalTrans);

            ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTable, NoYes::Yes);
            ledgerJournalCheckPost.parmBeQuiet(true);

            tamPromotionParameters = TAMPromotionParameters::find();

            LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);

            this.updateDeductionsAfterPost(ledgerJournalTable.JournalNum);
            this.insertDeductionUpdateHistory(listLedgerJournalTrans);

            ttscommit;
            this.parmUpdateOccurred(true);
        }

        catch (Exception::Error)
        {
            error("@SYS21628");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeductionsAfterPost</Name>
				<Source><![CDATA[
    protected void updateDeductionsAfterPost(LedgerJournalId _ledgerJournalId)
    {
        TAMDeduction                     deduction;
        // For each written off deduction
        while select tmpDeductionParmWriteOff
        {
            ttsbegin;
            deduction = TAMDeduction::find(tmpDeductionParmWriteOff.DeductionID, true);

            this.updateDeductionAfterPost(deduction, _ledgerJournalId);

            if (deduction.validateWrite())
            {
                deduction.update();
            }
            else
            {
                throw error("@SYS104318");
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeductionAfterPost</Name>
				<Source><![CDATA[
    protected void updateDeductionAfterPost(TAMDeduction _deduction, LedgerJournalId _ledgerJournalId)
    {
        _deduction.tamDeductionWriteOffReason = tmpDeductionParmWriteOff.DeductionWriteOffReason;

        // Use account of write-off reason found/stored earlier
        MainAccount mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(
                mapWriteOffReasonToAccount.lookup(tmpDeductionParmWriteOff.DeductionWriteOffReason));

        _deduction.DeductWriteOffLedgerDimension = MCRAssistantLedgerDimension::mergeAccountAndDimension(
            mainAccount.RecId,
            tmpDeductionParmWriteOff.Dimension);

        _deduction.WriteOffJournalID = _ledgerJournalId;
        _deduction.WriteOffAmountCur = _deduction.RemainAmountCur;
        _deduction.RemainAmountCur = 0;
        _deduction.tamDeductionStatus = TAMDeductionStatus::Closed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        TAMDeduction                        deduction;
        TAMDeductionWriteOffReasonTable     deductionWriteOffReasonTable;
        AmountMST                           remainAmountMST;
        boolean                             ret;
        ret = true;

        setPrefix("@MCR27632");

        while select tmpDeductionParmWriteOff
        {
            deduction = TAMDeduction::find(tmpDeductionParmWriteOff.DeductionID);

            // Deduction status must be open
            if (deduction.tamDeductionStatus != TAMDeductionStatus::Open)
            {
                    ret = checkFailed(strFmt("@MCR27629",
                                      deduction.tamDeductionID,
                                      deduction.tamDeductionStatus,
                                      TAMDeductionStatus::Open));
                    continue;
            }

            // Reason must be specified
            if (!tmpDeductionParmWriteOff.DeductionWriteOffReason)
            {
                ret = checkFailed(strFmt("@MCR27610", tmpDeductionParmWriteOff.DeductionID));
                continue;
            }

            // Reason must exist
            deductionWriteOffReasonTable =
                TAMDeductionWriteOffReasonTable::find(tmpDeductionParmWriteOff.DeductionWriteOffReason);

            if (!deductionWriteOffReasonTable)
            {
                ret = checkFailed("@MCR27630", tmpDeductionParmWriteOff.DeductionWriteOffReason);
                continue;
            }

            // If reason has max write off specified, then remaining amount of deduction must be less
            // than max amount.
            if (0 < deductionWriteOffReasonTable.tamDeductionWriteOffMaxAmountMST)
            {
                remainAmountMST = CurrencyExchangeHelper::amountCur2MST(deduction.RemainAmountCur, deduction.CurrencyCode);

                if (deductionWriteOffReasonTable.tamDeductionWriteOffMaxAmountMST < remainAmountMST)
                {
                    ret = checkFailed(strFmt("@MCR27631",
                                             deduction.tamDeductionID,
                                             deduction.RemainAmountCur,
                                             deductionWriteOffReasonTable.tamDeductionWriteOffMaxAmountMST));
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>TAMDeductionUpdate_WriteOff</c> class and
    /// builds a write off update object given temporary records that specify
    /// what to match.
    /// </summary>
    /// <param name="_tmpDeductionParmWriteOff">
    /// The temporary records used to build the match.
    /// </param>
    /// <returns>
    /// The initialized deduction update write off update.
    /// </returns>
    public static TAMDeductionUpdate_WriteOff construct(TmpTAMDeductionParmWriteOff _tmpDeductionParmWriteOff)
    {
        TAMDeductionUpdate_WriteOff tamDeductionUpdate_WriteOff;

        tamDeductionUpdate_WriteOff = new TAMDeductionUpdate_WriteOff(_tmpDeductionParmWriteOff);

        return tamDeductionUpdate_WriteOff;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>