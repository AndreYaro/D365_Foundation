<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableDeleteLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>SalesTableDeleteLines</c> is responsible for deleting sales order lines for the specified sales order.
/// </summary>
public class SalesTableDeleteLines
{
    SalesTable  salesTable;
    boolean     anySalesLinesDeleted;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>anySalesLinesDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if any sales line have been deleted.
    /// </summary>
    /// <returns>true, if at least 1 order line was removed; otherwise, false.</returns>
    public boolean anySalesLinesDeleted()
    {
        return anySalesLinesDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesLineWithDeliveryScheduleQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a new query to loop over all sales order lines with multiple deliveries.
    /// </summary>
    /// <returns>A new query.</returns>
    protected Query buildSalesLineWithDeliveryScheduleQuery()
    {
        Query query = this.buildSalesLinesQuery();
        QueryBuildDataSource qbdsSalesLine = query.dataSourceTable(tableNum(SalesLine));

        QueryBuildDataSource qbdsSalesDeliverySchedule = qbdsSalesLine.addDataSource(tableNum(SalesDeliverySchedule));
        qbdsSalesDeliverySchedule.relations(true);
        qbdsSalesDeliverySchedule.joinMode(JoinMode::ExistsJoin);
        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            qbdsSalesLine.addOrderByField(fieldNum(SalesLine, LineNum), SortOrder::Descending);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesLinesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a new query to loop over all sales order lines.
    /// </summary>
    /// <returns>A new query.</returns>
    protected Query buildSalesLinesQuery()
    {
        return salesTable.linesQuery(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the provided sales order line can be deleted.
    /// </summary>
    /// <param name = "_salesLine">Sales order line record to delete.</param>
    /// <returns>true, if the order line can and should be deleted; otherwise, false.</returns>
    protected boolean canDeleteSalesLine(SalesLine _salesLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the provided sales line, if applicable
    /// </summary>
    /// <param name = "_salesLine">Sales order line record to delete.</param>
    protected void deleteSalesLine(SalesLine _salesLine)
    {
        if (this.canDeleteSalesLine(_salesLine) && _salesLine.validateDelete(true))
        {
            _salesLine.delete();
            anySalesLinesDeleted = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>iterateOverAndDeleteSalesLines</Name>
				<Source><![CDATA[
    final protected void iterateOverAndDeleteSalesLines(Query _querySalesLines)
    {
        QueryRun salesLinesQueryRun = new QueryRun(_querySalesLines);

        boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());
        while (salesLinesQueryRun.next())
        {
            SalesLine salesLine = salesLinesQueryRun.get(tableNum(SalesLine));

            if (isKittingEnabled && !this.kittingCanDeleteLine(salesLine))
            {
                continue;
            }

            this.deleteSalesLine(salesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Actually loop through all order lines and delete them one by one.
    /// </summary>
    public void run()
    {
        this.iterateOverAndDeleteSalesLines(this.buildSalesLineWithDeliveryScheduleQuery());
        this.iterateOverAndDeleteSalesLines(this.buildSalesLinesQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>SalesTableDeleteLines</c> class, which can be used to delete order lines for the provided order.
    /// </summary>
    /// <param name = "_salesTable">Sales order to delete the lines on.</param>
    /// <returns>A new instance of <c>SalesTableDeleteLines</c> class.</returns>
    public static SalesTableDeleteLines newFromSalesTable(SalesTable _salesTable)
    {
        SalesTableDeleteLines deleteLines = new SalesTableDeleteLines();
        deleteLines.salesTable = _salesTable;

        return deleteLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingCanDeleteLine_delegate</Name>
				<Source><![CDATA[
    delegate void kittingCanDeleteLine_delegate(SalesLine _salesLine, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingCanDeleteLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method to invoke the kitting delegate kittingCanDeleteLine_delegate
    /// </summary>
    /// <param name = "_salesLine">SalesLine being checked for deletion</param>
    /// <returns>True if line can be deleted</returns>
    protected boolean kittingCanDeleteLine(SalesLine _salesLine)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingCanDeleteLine_delegate(_salesLine, resultValue);
        return !resultValue.hasResult() || resultValue.booleanResult();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>