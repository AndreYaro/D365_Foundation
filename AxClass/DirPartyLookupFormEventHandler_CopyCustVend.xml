<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirPartyLookupFormEventHandler_CopyCustVend</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a event handler class for party look up form, it focuses on copying customer/vendor record from one company to another company.
/// </summary>
public static class DirPartyLookupFormEventHandler_CopyCustVend
{
    static container copyCustFromCompanies;
    static container copyVendFromCompanies;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DirPartyLookup_Post_closeOkExtended</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is called after party look up form close OK. This handler is shared for both customer party loop up and vendor party look up.
    /// If user choose to copy record, then the selected customer/vendor record will be copied from source company. 
    /// Otherwise, no additional behaviors from this handler.
    /// </summary>
    /// <param name = "_args"> Argument send in with the call. </param>
    [PostHandlerFor(formStr(DirPartyLookup), formMethodStr(DirPartyLookup, closeOkExtended))]
    public static void DirPartyLookup_Post_closeOkExtended(XppPrePostArgs _args)
    {
        FormRun form = _args.getThis();
        FormRun parentForm = DirPartyLookupFormEventHandler_CopyCustVend::getParentFormRun(form);

        if (parentForm)
        {
            DirPartyTable dirPartyTable = _args.getArg('_dirPartyTable');
        
            if (DirPartyLookupFormEventHandler_CopyCustVend::isCustQuickCreate(parentForm))
            {
                FormCheckBoxControl isCopyData = form.design().controlName(formControlStr(DirPartyLookup, CopyCustData)) as FormCheckBoxControl;
                FormStringControl copyFrom = form.design().controlName(formControlStr(DirPartyLookup, CopyCustFrom)) as FormStringControl;
                str copyFromCompany = copyFrom ? copyFrom.valueStr() : '';
            
                if (isCopyData && isCopyData.value() == NoYes::Yes && copyFromCompany != '')
                {
                    CustTable customer;

                    select firstonly crosscompany customer where customer.Party == dirPartyTable.RecId && customer.DataAreaId == copyFromCompany;
                
                    if (customer)
                    {
                        FormRun custTableForm = DirPartyLookupFormEventHandler_CopyCustVend::getParentFormRun(parentForm);

                        if (custTableForm)
                        {
                            CustVendCopyDataUtil::copyCustForm(customer, custTableForm, true);

                            // Customer record is created from party quick create form, it only show limited controls on party and customer table.
                            // So after copy we need to skip party quick create form and bring user to the customer details page to see all the copied data and correct errors.
                            #SysSystemDefinedButtons
                            FormCommandButtonControl cancelButton = parentForm.design().controlName(formControlStr(DirPartyQuickCreateForm, cancelButton));
                            cancelButton.clicked();
                        }
                    }
                }
            }
            else if (DirPartyLookupFormEventHandler_CopyCustVend::isVendForm(parentForm))
            {
                FormDataSource vendTable_ds = parentForm.dataSource(formDataSourceStr(VendTable, VendTable)) as FormDataSource;
           
                // Use data source current data.recid == 0 to determin if the party lookup form is brought up by creating a new vendor record.
                if (vendTable_ds && vendTable_ds.cursor().RecId == 0)
                {
                    FormCheckBoxControl isCopyData = form.design().controlName(formControlStr(DirPartyLookup, CopyVendData)) as FormCheckBoxControl;

                    FormStringControl copyFrom = form.design().controlName(formControlStr(DirPartyLookup, CopyVendFrom)) as FormStringControl;
                    str copyFromCompany = copyFrom ? copyFrom.valueStr() : '';
            
                    if (isCopyData && isCopyData.value() == NoYes::Yes && copyFromCompany != '')
                    {
                        VendTable vendor;

                        select firstonly crosscompany vendor where vendor.Party == dirPartyTable.RecId && vendor.DataAreaId == copyFromCompany;

                        if (vendor)
                        {
                            CustVendCopyDataUtil::copyVendForm(vendor, parentForm, false);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyTable_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is the event handler for party record activated event.
    /// Show copy customer option group or copy vendor option group base on user selection, and fillup copy-from container.
    /// </summary>
    /// <param name="_sender" >Sending data sorce. </param>
    /// <param name="_e"> The arguments for selection changed event. </param>
    [FormDataSourceEventHandler(formDataSourceStr(DirPartyLookup, DirPartyTable), FormDataSourceEventType::Activated)]
    public static void DirPartyTable_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun sendingForm = _sender.formRun();
        FormRun parentForm = DirPartyLookupFormEventHandler_CopyCustVend::getParentFormRun(sendingForm);

        if (parentForm)
        {
            copyCustFromCompanies = conNull();
            copyVendFromCompanies = conNull();

            if (DirPartyLookupFormEventHandler_CopyCustVend::isCustQuickCreate(parentForm))
            {
                FormCheckBoxControl copyCustData = sendingForm.design().controlName(formControlStr(DirPartyLookup, copyCustData)) as FormCheckBoxControl;
                FormStringControl copyCustFrom = sendingForm.design().controlName(formControlStr(DirPartyLookup, copyCustFrom)) as FormStringControl;
                FormGroupControl copyCustOptionGroup = sendingForm.design().controlName(formControlStr(DirPartyLookup, copyCustOptionGroup)) as FormGroupControl;

                DirPartyTable party = _sender.cursor() as DirPartyTable;

                if (copyCustData && copyCustFrom && copyCustOptionGroup && party)
                {
                    if (CustVendCopyDataUtil::isCustAccountNumSequenceGlobal(curExt()) &&
                        DirPartyView::IsPartyRoleOnlyExistInOtherComapnay(party.RecId, DirPartyRoleType::Customer))
                    {
                        copyCustFromCompanies = CustVendCopyDataUtil::getCopyFromCompanyForCustomer(party, curExt());

                        if (conLen(copyCustFromCompanies) > 0)
                        {
                            copyCustOptionGroup.visible(true);
                            copyCustData.visible(true);
                            copyCustData.value(false);
                            copyCustFrom.visible(false);
                        }
                        else
                        {
                            copyCustOptionGroup.visible(false);
                            copyCustData.visible(false);
                            copyCustData.value(false);
                            copyCustFrom.text('');
                        }
                    }
                    else
                    {
                        copyCustOptionGroup.visible(false);
                        copyCustData.visible(false);
                        copyCustData.value(false);
                        copyCustFrom.text('');
                    }
                }
            }
            else if (parentForm.name() == formStr(VendTable))
            {
                FormDataSource vendTable_ds = parentForm.dataSource(formDataSourceStr(VendTable, VendTable)) as FormDataSource;
           
                if (vendTable_ds && vendTable_ds.cursor().RecId == 0)
                {
                    FormCheckBoxControl copyVendData = sendingForm.design().controlName(formControlStr(DirPartyLookup, copyVendData)) as FormCheckBoxControl;
                    FormStringControl copyVendFrom = sendingForm.design().controlName(formControlStr(DirPartyLookup, copyVendFrom)) as FormStringControl;
                    FormGroupControl copyVendOptionGroup = sendingForm.design().controlName(formControlStr(DirPartyLookup, copyVendOptionGroup)) as FormGroupControl;
            
                    DirPartyTable party = _sender.cursor() as DirPartyTable;

                    if (copyVendData && copyVendFrom && copyVendOptionGroup && party)
                    {
                        if (CustVendCopyDataUtil::isVendAccountNumSequenceGlobal(curExt()) &&
                            DirPartyView::IsPartyRoleOnlyExistInOtherComapnay(party.RecId, DirPartyRoleType::Vendor))
                        {
                            copyVendFromCompanies = CustVendCopyDataUtil::getCopyFromCompanyForVendor(party, curExt());

                            if (conLen(copyVendFromCompanies) > 0)
                            {
                                copyVendOptionGroup.visible(true);
                                copyVendData.visible(true);
                                copyVendData.value(false);
                                copyVendFrom.visible(false);
                            }
                            else
                            {
                                copyVendOptionGroup.visible(false);
                                copyVendData.visible(false);
                                copyVendData.value(false);
                                copyVendFrom.text('');
                            }
                        }
                        else
                        {
                            copyVendOptionGroup.visible(false);
                            copyVendData.visible(false);
                            copyVendData.value(false);
                            copyVendFrom.text('');
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CopyCustData_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable/disable copy-customer-from control base on user selection of copy customer checkbox.
    /// </summary>
    /// <param name = "_sender"> Sending form. </param>
    /// <param name = "_e"> Argument send with the event. </param>
    [FormControlEventHandler(formControlStr(DirPartyLookup, CopyCustData), FormControlEventType::Modified)]
    public static void CopyCustData_OnModified(FormControl _sender, FormControlEventArgs _e)
    {
        FormStringControl copyFrom = _sender.formRun().design().controlName(formControlStr(DirPartyLookup, copyCustFrom)) as FormStringControl;

        if (copyFrom)
        {
            FormCheckBoxControl copyData = _sender as FormCheckBoxControl;
            
            if (copyData && copyData.value() == NoYes::Yes)
            {
                copyFrom.visible(true);

                // If there is only one copy from company in the list, display it.
                if (conLen(copyCustFromCompanies) == 1)
                {
                    CopyFrom.text(con2Str(copyCustFromCompanies));
                }
            }
            else
            {
                copyFrom.visible(false);
                copyFrom.text('');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CopyCustFrom_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate values for copy-customer-from lookup.
    /// </summary>
    /// <param name = "_sender"> Sending form. </param>
    /// <param name = "_e"> Argument send with the event. </param>
    [FormControlEventHandler(formControlStr(DirPartyLookup, CopyCustFrom), FormControlEventType::Lookup)]
    public static void CopyCustFrom_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        FormStringControl copyFromControl = _sender as FormStringControl;

        if (copyFromControl)
        {
            FormRun lookupForm = classFactory.createSysLookupPicklist(copyFromControl);
            lookupForm.init();

            sysPickList pickList = new sysPickList(lookupForm);
            lookupForm.choices(copyCustFromCompanies);
            copyFromControl.performFormLookup(lookupForm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CopyVendData_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable/disable copy-vendor-from control base on user selection of copy vendor checkbox.
    /// </summary>
    /// <param name = "_sender"> Sending form. </param>
    /// <param name = "_e"> Argument send with the event. </param>
    [FormControlEventHandler(formControlStr(DirPartyLookup, CopyVendData), FormControlEventType::Modified)]
    public static void CopyVendData_OnModified(FormControl _sender, FormControlEventArgs _e)
    {
        FormStringControl copyFrom = _sender.formRun().design().controlName(formControlStr(DirPartyLookup, copyVendFrom)) as FormStringControl;
            
        if (copyFrom)
        {
            FormCheckBoxControl copyData = _sender as FormCheckBoxControl;

            if (copyData && copyData.value() == NoYes::Yes)
            {
                copyFrom.visible(true);

                if (conLen(copyVendFromCompanies) == 1)
                {
                    CopyFrom.text(con2Str(copyVendFromCompanies));
                }
            }
            else
            {
                copyFrom.visible(false);
                copyFrom.text('');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CopyVendFrom_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate values for copy-vendor-from lookup.
    /// </summary>
    /// <param name = "_sender"> Sending form. </param>
    /// <param name = "_e"> Argument send with the event. </param>
    [FormControlEventHandler(formControlStr(DirPartyLookup, CopyVendFrom), FormControlEventType::Lookup)]
    public static void CopyVendFrom_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        FormStringControl copyFromControl = _sender as FormStringControl;

        if (copyFromControl)
        {
            FormRun lookupForm = classFactory.createSysLookupPicklist(copyFromControl);
            lookupForm.init();

            sysPickList pickList = new sysPickList(lookupForm);
            lookupForm.choices(copyVendFromCompanies);
            copyFromControl.performFormLookup(lookupForm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parent <c>FormRun</c> instance for the specified <c>FormRun</c> instance.
    /// </summary>
    /// <param name = "_formRun">The <c>FormRun</c> instance.</param>
    /// <returns>
    /// The parent <c>FormRun</c> instance; otherwise, null.
    /// </returns>
    protected static FormRun getParentFormRun(FormRun _formRun)
    {
        return _formRun && _formRun.args() ? _formRun.args().caller() as FormRun : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustQuickCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines wether the specified <c>FormRun</c> is the customer quick create form.
    /// </summary>
    /// <param name = "_formRun">The <c>FormRun</c> instance.</param>
    /// <returns>
    /// true when the specified <c>FormRun</c> is the customer quick create form; otherwise, false.
    /// </returns>
    protected static boolean isCustQuickCreate(FormRun _formRun)
    {
        return _formRun && _formRun.args() ? _formRun.args().menuItemName() == menuitemDisplayStr(CustomerquickCreate) : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines wether the specified <c>FormRun</c> is the vendor form.
    /// </summary>
    /// <param name = "_formRun">The <c>FormRun</c> instance.</param>
    /// <returns>
    /// true when the specified <c>FormRun</c> is the vendor form; otherwise, false.
    /// </returns>
    protected static boolean isVendForm(FormRun _formRun)
    {
        return _formRun ? _formRun.name() == formStr(VendTable) : false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>