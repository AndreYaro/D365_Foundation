<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSalesTaxPayment_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxSalesTaxPayment_IN</c> class is used to generate tax sales and tax payment report for India.
/// </summary>
public class TaxSalesTaxPayment_IN extends TaxReport implements BatchRetryable
{
    TaxSalesTaxPaymentProfile_IN    profile;
    TaxSalesTaxPaymentFacade_IN     facade;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether allow save last record.
    /// </summary>
    /// <returns>
    /// Always return false.
    /// </returns>
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if this class can be executed in batch.
    /// </summary>
    /// <returns>
    ///    True if can run this class in batch; otherwise false.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunBase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether can update.
    /// </summary>
    /// <param name="_skipUpdateNow">
    /// This param is used to check whether skip checking.
    /// </param>
    /// <returns>
    /// Returns true if can update; otherwise, false.
    /// </returns>
    boolean checkForUpdate(boolean _skipUpdateNow = false)
    {
        taxRepVersion = profile.parmTaxRepVersion();

        if (updateNow || _skipUpdateNow)
        {
            if (taxRepVersion == TaxRepVersion::Total ||
                taxRepVersion == TaxRepVersion::Correct)
                return checkFailed("@SYS25890");

            if (taxRepVersion == TaxRepVersion::Original &&
                taxReportPeriodRegistrationNum.VersionNum > 0)
                return checkFailed("@GLS6235");

            if (taxRepVersion == TaxRepVersion::Latest &&
                taxReportPeriodRegistrationNum.VersionNum == 0)
                return checkFailed("@SYS62062");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPeriod</Name>
				<Source><![CDATA[
    private boolean checkPeriod(
        TaxPeriod   _taxPeriod,
        RefRecId    _taxRegistrationNumber,
        RefRecId    _taxRegistrationGroupName)
    {
        TaxTable                        taxTableLoc;
        TaxRegistrationNumbers_IN       taxRegistrationNumberTableLoc;
        TaxRegistrationGroupSetup_IN    taxRegistrationGroupSetupLoc;

        boolean ret = true;

        taxRegistrationGroupSetupLoc = TaxRegistrationGroupSetup_IN::findByTaxRegistrationGroupName_IN(_taxRegistrationGroupName, _taxRegistrationNumber);

        if (taxRegistrationGroupSetuploc)
        {
            if (taxRegistrationGroupSetuploc.TaxType != TaxTypeRegistrationGroup_IN::GST)
            {
                select firstonly taxTableLoc
                    where taxTableLoc.TaxPeriod == _taxPeriod
                    exists join taxRegistrationNumberTableloc
                        where taxRegistrationNumberTableloc.TaxType == taxTableLoc.TaxType_IN
                            && taxRegistrationNumberTableloc.RecId == taxRegistrationGroupSetuploc.TaxRegistrationNumberTable;

                if (!taxTableLoc)
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        taxRegistrationGroupName      = dialogTaxRegistrationGroupName.value();
        taxRegistrationNumber         = dialogTaxRegistrationNumber.value();

        if (TaxParameters::find().Excise_IN)
        {
            postToInterimPLA          = dialogPostToInterimPLA.value();
        }

        this.checkFields();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFields</Name>
				<Source><![CDATA[
    protected void checkFields()
    {
        if (!fromDate)
        {
            throw error("@SYS91557");
        }

        if (!taxRegistrationNumber)
        {
            throw error(strfmt("@SYS26332", "@SYS59571"));
        }

        if (!taxRegistrationGroupName)
        {
            throw error(strfmt("@SYS26332", "@GLS6221"));
        }

        if (!this.checkPeriod(taxPeriod, taxRegistrationNumber, taxRegistrationGroupName))
        {
            throw error("@GLS6322");
        }

        if(!TaxReportPeriod::find(taxPeriod, fromDate))
        {
            throw error("@SYS24993");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxSalesTaxPaymentFacade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the TaxSalesTaxPaymentFacade object based on the profile
    /// </summary>
    public void initTaxSalesTaxPaymentFacade()
    {
        TaxReportHierarchyVersion_IN        hierarchyVersion;
        TaxReportHrchyStructDesignType_IN   taxReportHrchyStructDesignType;

        if (taxPeriod && fromDate)
        {
            taxReportPeriod = TaxReportPeriod::find(taxPeriod, fromDate);
        }

        taxReportHrchyStructDesignType = TaxRegistrationNumbers_IN::find(this.taxRegistrationNumber_IN()).TaxType == TaxType_IN::GST
            || (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && TaxRegistrationNumbers_IN::find(this.taxRegistrationNumber_IN()).TaxType == TaxType_IN::VAT)
            ? TaxReportHrchyStructDesignType_IN::GTE
            : TaxReportHrchyStructDesignType_IN::Setoff;

        if (taxReportPeriod.RecId)
        {
            hierarchyVersion = TaxReportSetoffHrchySetupHelper_IN::findSetOffHierarchyVersion(taxReportPeriod.FromDate, taxReportHrchyStructDesignType);
        }
        else
        {
            hierarchyVersion = TaxReportSetoffHrchySetupHelper_IN::findSetOffHierarchyVersion(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), taxReportHrchyStructDesignType);
        }

        profile = TaxSalesTaxPaymentProfile_IN::construct(
            hierarchyVersion,
            TaxRegistrationNumbers_IN::find(taxRegistrationNumber),
            TaxRegistrationGroup_IN::find(taxRegistrationGroupName),
            taxPeriod,
            taxRepVersion,
            fromDate,
            transactionDate,
            postToInterimPLA);

        facade = TaxSalesTaxPaymentFacade_IN::construct(
            profile,
            TaxReportHrchyStructDesignFactory_IN::getStructureDesignById(
                TaxReportHierarchy_IN::find(hierarchyVersion.TaxReportHierarchy_IN).RefClassId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRegistrationGroupName</Name>
				<Source><![CDATA[
    public RefRecId parmTaxRegistrationGroupName()
    {
        return taxRegistrationGroupName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxReportPeriodRegistrationNum</Name>
				<Source><![CDATA[
    public TaxReportPeriod_IN parmTaxReportPeriodRegistrationNum(TaxReportPeriod_IN _taxReportPeriodRegistrationNum = taxReportPeriodRegistrationNum)
    {
        taxReportPeriodRegistrationNum = _taxReportPeriodRegistrationNum;
        return taxReportPeriodRegistrationNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxSalesTaxPaymentFacade</Name>
				<Source><![CDATA[
    public TaxSalesTaxPaymentFacade_IN parmTaxSalesTaxPaymentFacade()
    {
        return facade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report.
    /// </summary>
    void printout()
    {
        Args    args;

        args = new Args();
        args.parmObject(this);
        args.record(taxReportPeriod);

        TaxReportPrintOut::printout_IN(taxPeriod, args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFormFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// unSet tax registration group as InUse and validate the form fields
    /// </summary>
    public void processFormFields()
    {
        this.updateTaxRegistrationGroup_IN(taxRegistrationGroupName);
        if (taxRegistrationGroupName || taxRegistrationNumber)
        {
            this.validate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptUnpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpack packed prompt.
    /// </summary>
    /// <param name="packedClass">
    /// The packed data.
    /// </param>
    /// <param name="promptRet">
    /// The prompt status
    /// </param>
    /// <returns>
    /// true if unpack succeeds; otherwise, false.
    /// </returns>
    protected boolean promptUnpack(container packedClass, boolean promptRet = true)
    {
        boolean     ret;
        container   taxInfo;

        ret = super(packedClass, promptRet);
        taxInfo = conPeek(packedClass, 1);
        taxRegistrationGroupName = TaxRegistrationGroup_IN::find(conPeek(taxInfo, 17)).RecId;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        boolean  canUpdate;

        try
        {
            ttsBegin;

            this.processFormFields();
            this.initTaxSalesTaxPaymentFacade();

            taxReportPeriod  = TaxReportPeriod::find(taxPeriod, fromDate);
            if (taxReportPeriod)
            {
                fromDate            = profile.taxPeriodFromDate();
                toDate              = profile.taxPeriodToDate();
                transactionDate     = profile.parmTransactionDate();
                printout            = NoYes::Yes;
                taxReportPeriodRegistrationNum = TaxReportPeriod_IN::findByTaxPeriod(
                                                profile.parmTaxPeriod(),
                                                profile.parmTaxRegistrationNumber().RecId,
                                                profile.taxPeriodFromDate());
                canUpdate   = this.checkForUpdate();
                if (!canUpdate)
                {
                    printout = NoYes::No;
                }

                if (!updateNow &&
                    taxReportPeriodRegistrationNum.VersionNum > 0 &&
                    profile.parmTaxRepVersion() == TaxRepVersion::Original)
                {
                        warning("@SYS62092");
                }

                if (updateNow && canUpdate)
                {
                    facade.runSalesTaxPaymentProcess();
                    if (!facade.parmHasLedgerVoucherTrans())
                    {
                        warning("@SYS62090");
                        printout = NoYes::No;
                    }
                    voucher = facade.parmTaxSalesTaxPaymentDoc().parmTaxReportVoucher().Voucher;
                }
                else if (this.canDisplayReport())
                {
                    facade.initTaxSalesTaxPaymentHistoryDetails();
                }
            }
            else
            {
                throw error("@SYS24993");
            }

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch(Exception::Error)
        {
            this.updateTaxRegistrationGroup_IN(taxRegistrationGroupName);
            printout = false;
            throw Exception::Error;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Object ret;
    
        ret = super();
        
        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::IsCompanyEnabled() && dialogPostToInterimPLA)
        {
            dialogPostToInterimPLA.visible(false);
        }
        // </GTE>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>