<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLocationDirectiveActionQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLocationDirectiveActionQuery</c> class enables building and enumerating the query on the location directive line action.
/// </summary>
class WhsLocationDirectiveActionQuery
{
    WHSLocDirAction                     locDirAction;
    WHSWorkType                         workType;
    ItemId                              itemId;
    InventDimId                         inventDimId;
    List                                guidedLicensePlates;
    Qty                                 locateQty;
    UnitOfMeasureSymbol                 locateUOM;
    WHSAllowSplit                       allowSplit;
    boolean                             skipVolumetricsOptimizations;
    private boolean                     skipMixedLocationOptimizations;
    boolean                             isLocatingWholeLP;
    WHSLicensePlateLocDirInformation    lpInformation;

    private InventLocationId            warehouseId;
    
    private WHSInstrumentationLogger    instrumentationLogger;
    private boolean                     isWorkHistoryLogEnabled;
    private str                         excludedLocationsStr;
    private boolean                     volumetricsPutawayOptimizationApplied;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyPickLocDirActionQueryFiltersDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate raised before applying pick location directive action query filters.
    /// </summary>
    /// <param name = "_query">An action query.</param>
    /// <param name = "_applyFiltersResult">An event handler result.</param>
    /// <remarks>Set the result for the <paramref name="_applyFiltersResult"/> if you want to substitute the original query filters.</remarks>
    delegate void applyPickLocDirActionQueryFiltersDelegate(Query _query, EventHandlerResult _applyFiltersResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId()
    {
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGuidedLicensePlates</Name>
				<Source><![CDATA[
    public List parmGuidedLicensePlates()
    {
        return guidedLicensePlates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowSplit</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSAllowSplit parmAllowSplit()
    {
        return allowSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId()
    {
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipMixedLocationOptimizations</Name>
				<Source><![CDATA[
    public boolean parmSkipMixedLocationOptimizations(boolean _skipMixedLocationOptimizations = skipMixedLocationOptimizations)
    {
        skipMixedLocationOptimizations = _skipMixedLocationOptimizations;
        return skipMixedLocationOptimizations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsWorkHistoryLogEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmIsWorkHistoryLogEnabled(boolean _isWorkHistoryLogEnabled = isWorkHistoryLogEnabled)
    {
        isWorkHistoryLogEnabled = _isWorkHistoryLogEnabled;
        return isWorkHistoryLogEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWarehouseId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventLocationId parmWarehouseId(InventLocationId _warehouseId = warehouseId)
    {
        warehouseId = _warehouseId;
        return warehouseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVolumetricsPutawayOptimizationApplied</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmVolumetricsPutawayOptimizationApplied(boolean _volumetricsPutawayOptimizationApplied = volumetricsPutawayOptimizationApplied)
    {
        volumetricsPutawayOptimizationApplied = _volumetricsPutawayOptimizationApplied;
        return volumetricsPutawayOptimizationApplied;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enumerator.
    /// </summary>
    /// <returns>An instance of the enumerator</returns>
    public WhsLocationDirectiveActionQueryEnumerator getEnumerator()
    {
        var queryRun = this.buildQueryRun();
        var enumerator = WhsLocationDirectiveActionQueryEnumerator::newFromQueryRun(queryRun);
        return enumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>WhsLocationDirectiveActionQuery</c> class.
    /// </summary>
    /// <param name = "_locDirAction">The location action record with the query.</param>
    /// <param name = "_workType">The work type for the location directive.</param>
    /// <param name = "_itemId">The item id to be located.</param>
    /// <param name = "_inventDimId">The dimensions of the item to be located.</param>
    /// <param name = "_guidedLicensePlates">A list of license plates to use for locating.</param>
    /// <param name = "_locateQty">The quantity to locate.</param>
    /// <param name = "_locateUOM">The unit of measure of the quantity to locate.</param>
    /// <param name = "_allowSplit">Does the location directive allow split.</param>
    /// <param name = "_skipVolumetricsOptimizations">Should volumetric optimizations be skipped.</param>
    /// <param name = "_isLocatingWholeLP">Is the location directive locating an entire license plate.</param>
    /// <param name = "_lpInformation">Additional information about the license plate.</param>
    /// <returns>A new instance of the <c>WhsLocationDirectiveActionQuery</c> class.</returns>
    public static WhsLocationDirectiveActionQuery newFromParameters(
        WHSLocDirAction                     _locDirAction,
        WHSWorkType                         _workType,
        ItemId                              _itemId,
        InventDimId                         _inventDimId,
        List                                _guidedLicensePlates,
        Qty                                 _locateQty,
        UnitOfMeasureSymbol                 _locateUOM,
        WHSAllowSplit                       _allowSplit,
        boolean                             _skipVolumetricsOptimizations,
        boolean                             _isLocatingWholeLP,
        WHSLicensePlateLocDirInformation    _lpInformation
        )
    {
        WhsLocationDirectiveActionQuery actionQuery = WhsLocationDirectiveActionQuery::construct();

        actionQuery.locDirAction                    = _locDirAction;
        actionQuery.workType                        = _workType;
        actionQuery.itemId                          = _itemId;
        actionQuery.inventDimId                     = _inventDimId;
        actionQuery.guidedLicensePlates             = _guidedLicensePlates;
        actionQuery.locateQty                       = _locateQty;
        actionQuery.locateUOM                       = _locateUOM;
        actionQuery.allowSplit                      = _allowSplit;
        actionQuery.skipVolumetricsOptimizations    = _skipVolumetricsOptimizations;
        actionQuery.isLocatingWholeLP               = _isLocatingWholeLP;
        actionQuery.lpInformation                   = _lpinformation;

        return actionQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WhsLocationDirectiveActionQuery construct()
    {
        return new WhsLocationDirectiveActionQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryFromLocDirAction</Name>
				<Source><![CDATA[
    private Query getQueryFromLocDirAction()
    {
        QueryRun queryRun = new QueryRun(locDirAction.LocDirQuery);
        return queryRun.query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query run with the given conditions.
    /// </summary>
    /// <returns>An instance of query run.</returns>
    public QueryRun buildQueryRun()
    {
        using (var activityContext = this.instrumentationLogger().locationDirectiveActivities().buildLocationDirectiveActionQuery(locDirAction, workType))
        {
            this.instrumentationLogger().logRecordInformation(locDirAction);

            Query query = this.getQueryFromLocDirAction();

            switch (workType)
            {
                case WHSWorkType::Pick:
                    this.modifyPickLocDirActionQuery(query);
                    break;

                case WHSWorkType::Put:
                    this.modifyPutLocDirActionQuery(query);
                    this.excludeLocationsWithInsufficientCapacity(query);
                    this.excludeLocationsWithInvalidMixedLocation(query);
                    break;
            }

            if (warehouseId)
            {
                this.addWarehouseRange(query);
            }

            return new QueryRun(query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWarehouseRange</Name>
				<Source><![CDATA[
    private void addWarehouseRange(Query _query)
    {
        var qdbs = _query.dataSourceTable(tableNum(WMSLocation));
        if (qdbs)
        {
            SysQuery::findOrCreateRange(qdbs, fieldNum(WMSLocation, InventLocationId)).value(warehouseId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPickLocDirActionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies a pick location directive action query.
    /// </summary>
    /// <param name = "_query">An action query.</param>
    protected void modifyPickLocDirActionQuery(Query _query)
    {
        var applyPickLocDirActionQueryFiltersResults = EventHandlerResult::newSingleResponse();

        this.applyPickLocDirActionQueryFiltersDelegate(_query, applyPickLocDirActionQueryFiltersResults);

        if (!applyPickLocDirActionQueryFiltersResults.hasResult())
        {
            this.applyPickLocDirActionQueryFilters(_query);
        }

        if (PdsGlobal::pdsIsCWItem(itemId))
        {
            SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(InventSum)), fieldNum(InventSum, PdsCWPhysicalInvent)).value('>0');
        }
        
        var strategy = WhsLocationDirectiveStrategy::singletonFromStrategy(locDirAction.LocDirStrategy);
        if (strategy)
        {
            strategy.modifyPickLocDirActionQuery(this, _query);
        }

        this.addFixedInventLocationQueryRange(_query);
        
        this.applyPickLocDirActionQueryOptimizationFilters(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPickLocDirActionQueryOptimizationFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies "ClosedQty = No" range to pick location directive action query filters in order to optimize query execution speed.
    /// </summary>
    /// <param name = "_query">An action query.</param>
    private void applyPickLocDirActionQueryOptimizationFilters(Query _query)
    {
        QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(InventSum));

        if (!qbds)
        {
            return;
        }
        
        SysQuery::findOrCreateRange(qbds, fieldNum(InventSum, ClosedQty)).value(locDirAction.AllowNegative ? SysQuery::valueUnlimited() : SysQuery::value(NoYes::No));
        SysQuery::findOrCreateRange(qbds, fieldNum(InventSum, PhysicalInvent)).value(locDirAction.AllowNegative ? SysQuery::valueUnlimited() : SysQuery::value('>0'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPickLocDirActionQueryFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies pick location directive action query filters.
    /// </summary>
    /// <param name = "_query">An action query.</param>
    protected void applyPickLocDirActionQueryFilters(Query _query)
    {
        // Add range on the item
        SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(InventSum)), fieldNum(InventSum, ItemId)).value(SysQuery::value(itemId));

        // Add ranges on the item dims
        if (WHSLocDirAction::queryContainsInventDimDataSource(_query))
        {
            this.addInventoryDimensionsCriteriaRanges(_query.dataSourceTable(tableNum(InventDim)), InventDim::find(inventDimId), InventTable::find(itemId));
        }
        else
        {
            this.addInventoryDimensionsCriteriaRangesOnInventSum(_query.dataSourceTable(tableNum(InventSum)), InventDim::find(inventDimId), InventTable::find(itemId));
        }

        if (locDirAction.BatchEnabled)
        {
            SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(InventBatch)), fieldNum(InventBatch, ItemId)).value(SysQuery::value(itemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeLocationsWithInvalidMixedLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Excludes locations from the query that would
    /// fail due to mixing constraints.
    /// </summary>
    /// <param name = "_query">The query for locations.</param>
    protected void excludeLocationsWithInvalidMixedLocation(Query _query)
    {
        if (this.shouldUseMixedLocationOptimization())
        {
            var mixedLocationValidator = WHSMixedLocationPutawayQueryOptimizer::newFromItemId(itemId);

            mixedLocationValidator.excludeLocationsWithInvalidMixedLocation(_query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeLocationsWithInsufficientCapacity</Name>
				<Source><![CDATA[
    protected void excludeLocationsWithInsufficientCapacity(Query _query)
    {
        if (this.shouldUseVolumetricsOptimization())
        {
            var volumetricsValidator = WHSVolumetricsPutawayValidator::newPutaway(itemId, inventDimId, locateQty, locateUOM, allowSplit);

            if (isLocatingWholeLP)
            {
                volumetricsValidator.parmLPInformation(lpInformation);
            }

            this.createVolumetricsValidatorSkippedLocationsStr(volumetricsValidator, _query, locDirAction.LocDirQuery);

            volumetricsValidator.excludeLocationsWithInsufficientCapacity(_query, locDirAction.LocDirQuery);

            this.parmVolumetricsPutawayOptimizationApplied(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateVolumetricsValidatorSkippedLocationsStr</Name>
				<Source><![CDATA[
    private boolean shouldCreateVolumetricsValidatorSkippedLocationsStr()
    {
        return this.parmIsWorkHistoryLogEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVolumetricsValidatorSkippedLocationsStr</Name>
				<Source><![CDATA[
    private void createVolumetricsValidatorSkippedLocationsStr(WHSVolumetricsPutawayValidator _volumetricsValidator, Query _query, container _packedQuery = _query.pack())
    {
        if (this.shouldCreateVolumetricsValidatorSkippedLocationsStr())
        {
            WhsLocationDirectiveActionQueryEnumerator excludedLocationsEnumerator = _volumetricsValidator.getExcludedLocationsWithInsufficientCapacityEnumerator(_query, _packedQuery);

            excludedLocationsStr = "";
            boolean emptyExcludedLocationsStr = true;

            if (!excludedLocationsEnumerator)
            {
                return;
            }

            while (excludedLocationsEnumerator.moveNext())
            {
                WMSLocation excludedLocation = excludedLocationsEnumerator.currentWMSLocation();

                if (emptyExcludedLocationsStr)
                {
                    excludedLocationsStr += excludedLocation.wMSLocationId;
                    emptyExcludedLocationsStr = false;
                }
                else
                {
                    excludedLocationsStr += strFmt(" %1", excludedLocation.wMSLocationId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcludedLocationsStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string containing all the locations excluded by the excludeLocationsWithInsufficientCapacity method.
    /// </summary>
    /// <returns>A string containing all the locations excluded by the excludeLocationsWithInsufficientCapacity method.</returns>
    [Hookable(false)]
    internal str getExcludedLocationsStr()
    {
        return excludedLocationsStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUseVolumetricsOptimization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the volumetric optimization should be enabled.
    /// </summary>
    /// <returns>
    /// true, if volumetric optimization should be enabled; otherwise, false.
    /// </returns>
    protected boolean shouldUseVolumetricsOptimization()
    {
        var strategy = WhsLocationDirectiveStrategy::singletonFromStrategy(locDirAction.LocDirStrategy);
        if (strategy &&
            !strategy.useVolumetricsOptimization())
        {
            return false;
        }
      
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUseMixedLocationOptimization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the mixed location optimization should be enabled.
    /// </summary>
    /// <returns>
    /// true, if mixed location optimization should be enabled; otherwise, false.
    /// </returns>
    private boolean shouldUseMixedLocationOptimization()
    {
        if (skipMixedLocationOptimizations)
        {
            // when work history log is enabled we want to provide log messages for
            // every location that fails due to mixed constraints
            // so we don't want to pre-filter such locations in the query
            return false;
        }

        var strategy = WhsLocationDirectiveStrategy::singletonFromStrategy(locDirAction.LocDirStrategy);
        if (strategy &&
            !strategy.useMixedLocationOptimization())
        {
            return false;
        }
      
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPutLocDirActionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the query for Put WorkType <c>WHSLocDirAction</c> records based on configuration.
    /// </summary>
    /// <param name="_query">
    /// The current query for the <c>WHSLocDirAction</c>.
    /// </param>
    protected void modifyPutLocDirActionQuery(
        Query           _query)
    {
        // If locating whole license plate, need to look at license plate information.
        if (isLocatingWholeLP)
        {
            var qbdsLocationProfile = _query.dataSourceTable(tableNum(WMSLocation)).addDataSource(tableNum(WHSLocationProfile));
            qbdsLocationProfile.relations(true);
            qbdsLocationProfile.joinMode(JoinMode::ExistsJoin);

            if (lpInformation.parmMixedStatus())
            {
                qbdsLocationProfile.addRange(fieldNum(WHSLocationProfile, AllowMixedStatus)).value(SysQuery::value(NoYes::Yes));
            }

            if (lpInformation.parmMixedBatch())
            {
                qbdsLocationProfile.addRange(fieldNum(WHSLocationProfile, AllowMixedBatches)).value(SysQuery::value(NoYes::Yes));
            }

            if (lpInformation.parmMixedItem())
            {
                qbdsLocationProfile.addRange(fieldNum(WHSLocationProfile, AllowMixedItems)).value(SysQuery::value(NoYes::Yes));
            }
        }

        var strategy = WhsLocationDirectiveStrategy::singletonFromStrategy(locDirAction.LocDirStrategy);
        if (strategy)
        {
            strategy.modifyPutLocDirActionQuery(this, _query);
        }

        this.addFixedInventLocationQueryRange(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFixedInventLocationQueryRange</Name>
				<Source><![CDATA[
    private void addFixedInventLocationQueryRange(Query _query)
    {
        QueryBuildDataSource    qbdsFixedLocation;
        
        if (locDirAction.UseInventFixedLocation == WHSUseFixedLocations::ProductFixed)
        {
            qbdsFixedLocation = _query.dataSourceTable(tableNum(WMSLocation)).addDataSource(tableNum(WHSInventFixedLocation));
            qbdsFixedLocation.relations(true);
            qbdsFixedLocation.joinMode(JoinMode::ExistsJoin);
            qbdsFixedLocation.addRange(fieldNum(WHSInventFixedLocation, ItemId)).value(queryValue(itemId));
        }
        else if (locDirAction.UseInventFixedLocation == WHSUseFixedLocations::ProductVariantFixed)
        {
            qbdsFixedLocation = _query.dataSourceTable(tableNum(WMSLocation)).addDataSource(tableNum(WHSProductVariantFixedLocation));
            qbdsFixedLocation.relations(true);
            qbdsFixedLocation.joinMode(JoinMode::ExistsJoin);
            qbdsFixedLocation.addRange(fieldNum(WHSProductVariantFixedLocation, ItemId)).value(queryValue(itemId));

            if (inventDimId)
            {
                InventDim inventDim = InventDim::find(inventDimId);

                if (inventDim.anyProductDimensionSpecified())
                {
                    InventDim productDim;
                    productDim.initFromInventDim(inventDim, InventDim::dimProductDimensionEnabledFieldList());
                    productDim = InventDim::findOrCreate(productDim);
                    qbdsFixedLocation.addRange(fieldNum(WHSProductVariantFixedLocation, ProductVariantInventDimId)).value(productDim.InventDimId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventoryDimensionsCriteriaRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges on the InventDim datasource based on the inventory dimension criteria.
    /// </summary>
    /// <param name="_inventDimDS">
    /// The InventDim datasource.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventory dimension criteria that will be added as ranges to the datasource.
    /// </param>
    /// <param name="_inventTable">
    /// The InventTable used to determine the reservation hierarchy.
    /// </param>
    /// <remarks>
    /// Only dimensions above location in the reservation hierarchy are added as ranges to the datasource.
    /// Product dimensions are included.
    /// </remarks>
    protected void addInventoryDimensionsCriteriaRanges(
        QueryBuildDataSource    _inventDimDS,
        InventDim               _inventDimCriteria,
        InventTable             _inventTable)
    {
        this.addProductAndAboveLocationInventoryDimensionsCriteriaRanges(_inventDimDS, _inventDimCriteria, _inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventoryDimensionsCriteriaRangesOnInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges on the InventDim datasource based on the inventory dimension criteria.
    /// </summary>
    /// <param name="_inventSumDS">
    /// The InventSum datasource.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventory dimension criteria that will be added as ranges to the datasource.
    /// </param>
    /// <param name="_inventTable">
    /// The InventTable used to determine the reservation hierarchy.
    /// </param>
    /// <remarks>
    /// Only dimensions above location in the reservation hierarchy are added as ranges to the datasource.
    /// Product dimensions are included.
    /// </remarks>
    protected void addInventoryDimensionsCriteriaRangesOnInventSum(
        QueryBuildDataSource    _inventSumDS,
        InventDim               _inventDimCriteria,
        InventTable             _inventTable)
    {
        this.addProductAndAboveLocationInventoryDimensionsCriteriaRanges(_inventSumDS, _inventDimCriteria, _inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductAndAboveLocationInventoryDimensionsCriteriaRanges</Name>
				<Source><![CDATA[
    private void addProductAndAboveLocationInventoryDimensionsCriteriaRanges(
        QueryBuildDataSource    _dataSource,
        InventDim               _inventDimCriteria,
        InventTable             _inventTable)
    {
        boolean useInventoryDimensionsOnInventSum = _dataSource.table() == tableNum(InventSum);

        ListEnumerator                      enumerator;

        // Add ranges for product dimensions if they exist
        if (_inventDimCriteria.anyProductDimensionSpecified())
        {
            enumerator = InventDim::dimProductDimFieldList().getEnumerator();
            while (enumerator.moveNext())
            {
                FieldId dimFieldId = enumerator.current();
                if (_inventDimCriteria.(dimFieldId))
                {
                    if (useInventoryDimensionsOnInventSum)
                    {
                        SysQuery::findOrCreateRange(_dataSource, InventDim::getInventSumFieldIdFromInventDimFieldId(dimFieldId)).value(queryValue(_inventDimCriteria.(dimFieldId)));
                    }
                    else
                    {
                        SysQuery::findOrCreateRange(_dataSource, dimFieldId).value(queryValue(_inventDimCriteria.(dimFieldId)));
                    }
                }
            }
        }

        // Add ranges for hierarchy dimensions
        enumerator = WHSReservationHierarchyProvider::construct()
                        .getDimListAboveLocationFromInventTable(_inventTable, WHSReservationHierarchySortOrder::TopDown)
                        .getEnumerator();
        while (enumerator.moveNext())
        {
            WHSReservationHierarchyElementData  hierarchyElementData = enumerator.current();
            FieldId dimFieldId = hierarchyElementData.parmDimensionFieldId();
            if (_inventDimCriteria.(dimFieldId))
            {
                if (useInventoryDimensionsOnInventSum)
                {
                    SysQuery::findOrCreateRange(_dataSource, InventDim::getInventSumFieldIdFromInventDimFieldId(dimFieldId)).value(queryValue(_inventDimCriteria.(dimFieldId)));
                }
                else
                {
                    SysQuery::findOrCreateRange(_dataSource, dimFieldId).value(queryValue(_inventDimCriteria.(dimFieldId)));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>