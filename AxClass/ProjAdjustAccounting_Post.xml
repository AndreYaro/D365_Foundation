<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdjustAccounting_Post</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for handling acconting adjustments and posting.
/// </summary>
public class ProjAdjustAccounting_Post
{
    private Map ledgerVoucherMap;
    private ProjTransIdBase origTransID, revTransID, newTransID;
    private Set unAdjustedVoucherSet, adjustedVoucherSet;
    private Voucher newVoucher;
    protected ProjAdjustAccountingPostDataContract dataContract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newLedgerVoucherTransObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates a new <c>LedgerVoucherTransObject</c> object based on <c>LedgerVoucherObject</c> reference.
    /// </summary>
    /// <param name = "_ledgerVoucherObject">
    /// <c>LedgerVoucherObject</c> reference.
    /// </param>
    /// <param name = "_generalJournalAccountEntry">
    /// <c>GeneralJournalAccountEntry</c> table buffer.
    /// </param>
    /// <param name = "_ledgerDimesion">
    /// A <c>LedgerDimensionAccount</c> recId.
    /// </param>
    /// <param name = "_reverse">
    /// Indicates if the transaction created is a reversal or not.
    /// </param>
    /// <returns>
    /// Initialized <c>LedgerVoucherTransObject</c>.
    /// </returns>
    private LedgerVoucherTransObject newLedgerVoucherTransObject(LedgerVoucherObject _ledgerVoucherObject, GeneralJournalAccountEntry _generalJournalAccountEntry,
                                                                  ledgerdimensionAccount _ledgerDimesion, boolean _reverse)
    {
        AmountMSTDebCred accountingCurrencyAmount = _generalJournalAccountEntry.AccountingCurrencyAmount;
        AmountCur transactionCurrencyAmount = _generalJournalAccountEntry.TransactionCurrencyAmount;
        AmountMSTSecondary reportingCurrencyAmount = _generalJournalAccountEntry.ReportingCurrencyAmount;

        if(_reverse)
        {
            accountingCurrencyAmount = -accountingCurrencyAmount;
            transactionCurrencyAmount = -transactionCurrencyAmount;
            reportingCurrencyAmount = -reportingCurrencyAmount;
        }

        LedgerVoucherTransObject ledgerVoucherTransObject = ledgerVoucherTransObject::newBasicDefault(_ledgerVoucherObject, _generalJournalAccountEntry.PostingType,
            _ledgerDimesion, _generalJournalAccountEntry.TransactionCurrencyCode, transactionCurrencyAmount,
            accountingCurrencyAmount, reportingCurrencyAmount);
        ledgerVoucherTransObject.parmQuantity(_generalJournalAccountEntry.Quantity);
        ledgerVoucherTransObject.parmPostingType(_generalJournalAccountEntry.PostingType);
  
        return ledgerVoucherTransObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigTransId</Name>
				<Source><![CDATA[
    public ProjTransIdBase parmOrigTransId(ProjTransIdBase _transID = origTransID)
    {
        origTransID = _transID;
        return origTransID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRevTransId</Name>
				<Source><![CDATA[
	public ProjTransIdBase parmRevTransId(ProjTransIdBase _transID = revTransID)
    {
        revTransID = _transID;
        return revTransID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewTransId</Name>
				<Source><![CDATA[
	public ProjTransIdBase parmNewTransId(ProjTransIdBase _transiD = newTransID)
    {
        newTransID = _transID;
        return newTransID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmledgerVoucherMap</Name>
				<Source><![CDATA[
    public Map parmledgerVoucherMap(Map _ledgerVoucherMap = ledgerVoucherMap)
    {
        ledgerVoucherMap = _ledgerVoucherMap;
        return ledgerVoucherMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnAdjustedVoucherSet</Name>
				<Source><![CDATA[
    public Set parmUnAdjustedVoucherSet(Set _unAdjustedVoucherSet = unAdjustedVoucherSet)
    {
        unAdjustedVoucherSet = _unAdjustedVoucherSet;
        return unAdjustedVoucherSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewVoucher</Name>
				<Source><![CDATA[
    public Voucher parmNewVoucher(Voucher _voucher = newVoucher)
    {
        newVoucher = _voucher;
        return newVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustedVoucherSet</Name>
				<Source><![CDATA[
	public Set parmAdjustedVoucherSet(Set _adjustedVoucherSet = adjustedVoucherSet)
    {
        adjustedVoucherSet = _adjustedVoucherSet;
        return adjustedVoucherSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataContract</Name>
				<Source><![CDATA[
    public ProjAdjustAccountingPostDataContract parmDataContract(ProjAdjustAccountingPostDataContract _dataContract = dataContract)
    {
        dataContract = _dataContract;
        return dataContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjTrans</Name>
				<Source><![CDATA[
	/// <summary>
    /// Base method for updating original posted transaction. 
    /// </summary>
    /// <remarks>
    /// This method needs to be overridden by specific transaction class types such as
    /// hour (empl), expense (cost), item and fee (revenue) transactions.
	/// </remarks>
	public void updateProjTrans()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjInvoice</Name>
				<Source><![CDATA[
	/// <summary>
    /// Base method for updating all the related invoice tables associated with the posted transaction.
    /// </summary>
    /// <param name = "_postedTrans">
    /// Original posted project transaction that needs to be updated.
	/// </param>
    /// <param name = "_newAdjTransId">
    /// Newly generated transaction ID.
	/// </param>
    /// <param name = "_newAdjVoucher">
    /// Newly generated Adjustment voucher.
	/// </param>
    /// <remarks>
    /// This method needs to be overridden by specific transaction class types such as
    /// hour (empl), expense (cost), item and fee (revenue) transactions.
    /// </remarks>
    public void updateProjInvoice(Common _postedTrans, ProjTransIdBase _newAdjTransId, voucher _newAdjVoucher)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjTransPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>ProjTransPosting</c> records to point to new transID
    /// </summary>
    /// <param name = "_unAdjustedVoucherSet">
    /// Set containing vouchers that haven't undergone any adjustments.
    /// </param>
    /// <param name = "_newTransID">
    /// Newly generated trans ID.
    /// </param>
    public void updateProjTransPosting(Set _unAdjustedVoucherSet, ProjTransIdBase _newTransID)
    {
        if (origTransID)
        {
            ProjTransPosting projTransPosting;
            Voucher currentVoucher;
            SetEnumerator setEnumerator = _unAdjustedVoucherSet.getEnumerator();
            
			ttsbegin;
            while (setEnumerator.moveNext())
            {
                currentVoucher = setEnumerator.current();
                update_recordset projTransPosting
                setting
                    TransId = _newTransID
                where projTransPosting.Voucher == currentVoucher
                    && projtransPosting.TransId == origTransID;
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerVoucher</Name>
				<Source><![CDATA[
	private LedgerVoucher newLedgerVoucher(TransDate _transDate)
    {
        ProjAdjustmentUpdate projAdjustmentUpdate = new ProjAdjustmentUpdate_Post();
        projAdjustmentUpdate.ledgerVoucherTransCreate(_transDate);
        return projAdjustmentUpdate.getLedgerVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerTransactionsReverse</Name>
				<Source><![CDATA[
	private LedgerVoucher newLedgerTransactionsReverse(LedgerVoucher _ledgerVoucher,
		                                               GeneralJournalAccountEntry _generalJournalAccountEntry,
													   ProjTransPosting _projTransPosting,
													   TransDate _transDate)
    {
        LedgerVoucher ledgerVoucher;
     
        if (_ledgerVoucher)
        {
            ledgerVoucher = _ledgerVoucher;
        }
        else
        {
            ledgerVoucher = this.newLedgerVoucher(_transDate);
        }

        LedgerVoucherTransObject ledgerVoucherTransObjectRev = this.newLedgerVoucherTransObject(ledgerVoucher.findLedgerVoucherObject(), _generalJournalAccountEntry, _generalJournalAccountEntry.LedgerDimension, true);
		if (_projTransPosting)
		{
			ProjTransIdBase projRevTransID = this.parmRevTransId();
			if (!projRevTransID)
			{
				projRevTransID =  ProjParameters::newTransId();
                this.parmRevTransId(projRevTransID);
			}
			ProjLedger projLedger = ProjLedger::newProjLedgerFromProjTransPosting(_projTransPosting, projRevTransID);
			ledgerVoucherTransObjectRev.parmProjLedger(projLedger);
		}

        // Skip validating dimension for reversal.
        ledgerVoucherTransObjectRev.parmSkipDimensionValidation(true);
        ledgerVoucher.addTrans(ledgerVoucherTransObjectRev);
        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerTransactionsAdjusted</Name>
				<Source><![CDATA[
    private LedgerVoucher newLedgerTransactionsAdjusted(LedgerVoucher _ledgerVoucher,
													   LedgerDimensionAccount _ledgerDimension,
                                                       GeneralJournalAccountEntry _generalJournalAccountEntry,
                                                       ProjTransPosting _projTransPosting,
                                                       TransDate _transDate)
    {
        LedgerVoucher ledgerVoucher;
	    
		if (_ledgerVoucher)
        {
            ledgerVoucher = _ledgerVoucher;
        }
		else
        {
            ledgerVoucher = this.newLedgerVoucher(_transDate);
        }

        LedgerVoucherTransObject ledgerVoucherTransObject = this.newLedgerVoucherTransObject(ledgerVoucher.findLedgerVoucherObject(), _generalJournalAccountEntry, _ledgerDimension, false);

        if (_projTransPosting)
        {
            ProjTransIdBase projNewTransID = this.parmNewTransId();
            if (!projNewTransID)
            {
                projNewTransID =  ProjParameters::newTransId();
                this.parmNewTransId(projNewTransID);
            }
            ProjLedger projLedger = ProjLedger::newProjLedgerFromProjTransPosting(_projTransPosting, projNewTransID);
            ledgerVoucherTransObject.parmProjLedger(projLedger);
        }

        // Don't skip validating dimension for new ledger trans
        ledgerVoucherTransObject.parmSkipDimensionValidation(false);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);
        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucherLinks</Name>
				<Source><![CDATA[
    private static void createVoucherLinks(Voucher _parentVoucher, TransDate _parentTransDate, Voucher _relatedVoucher, TransDate _relatedTransDate)
    {
            RecId voucherGroupId = LedgerTransVoucherLink::findOrCreateParentVoucherLink(_parentVoucher, _parentTransDate, curExt()).RecId;
            RecId currentVoucherGroupId = LedgerTransVoucherLink::getCurrentVoucherGroupId(voucherGroupId, _relatedVoucher, _relatedTransDate);

            if (currentVoucherGroupId)
            {
                LedgerTransVoucherLink::updateVoucherLinkParentGroup(currentVoucherGroupId, voucherGroupId);
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerTransactions</Name>
				<Source><![CDATA[
    private void newLedgerTransactions(SetEnumerator _setEnumerator,  TransDate _transDate)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        ProjTmpAdjustVoucher projTmpAdjustVoucher;
        LedgerVoucher ledgerVoucherRev, ledgerVoucherAdjusted;
        LedgerVoucherObject ledgerVoucherObjectRev, ledgerVoucherObjectNew;
        ProjTransPosting projTransPosting;
        
		if (!ledgerVoucherMap)
        {
            ledgerVoucherMap = new Map(Types::String, Types::Class);
        }

		if (!unAdjustedVoucherSet)
        {
            unAdjustedVoucherSet = new Set(Types::String);
        }

		if (!adjustedVoucherSet)
        {
            adjustedVoucherSet = new Set(Types::String);
        }
		
		while (_setEnumerator.moveNext())
		{
			projTmpAdjustVoucher = _setEnumerator.current();
            if (projTmpAdjustVoucher.Adjusted == NoYes::Yes)
            {
				if (unAdjustedVoucherSet.in(projTmpAdjustVoucher.Voucher))
                {
                    unAdjustedVoucherSet.remove(projTmpAdjustVoucher.Voucher);
                }
                adjustedVoucherSet.add(projTmpAdjustVoucher.Voucher);
            }
            else if (!adjustedVoucherSet.in(projTmpAdjustVoucher.Voucher))
            {
                unAdjustedVoucherSet.add(projTmpAdjustVoucher.Voucher);
            }
        }
  		
        _setEnumerator.reset();

        while (_setEnumerator.moveNext())
        {
            projTmpAdjustVoucher = _setEnumerator.current();

			if (adjustedVoucherSet.in(projTmpAdjustVoucher.Voucher))
            {

				select firstonly generalJournalAccountEntry
					join AccountingDate, RecId from generalJournalEntry
					where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
					&& generalJournalAccountEntry.RecId == projTmpAdjustVoucher.RefRecId
					outer join projTransPosting
					where projTransPosting.PostingType == generalJournalAccountEntry.postingType
					&& projTransPosting.Voucher == projTmpAdjustVoucher.Voucher;
			
				if (ledgerVoucherMap.exists(projTmpAdjustVoucher.Voucher))
				{
					// one or all of the voucher entries in this voucher are adjusted. So we need to add
					ledgerVoucherRev = ledgerVoucherMap.lookup(projTmpAdjustVoucher.Voucher).value(1);
					ledgerVoucherAdjusted = ledgerVoucherMap.lookup(projTmpAdjustVoucher.Voucher).value(2);
					// Add ledger reversal entries.
					this.newLedgerTransactionsReverse(ledgerVoucherRev, generalJournalAccountEntry, projTransPosting, _transDate);
					// Add new ledger entries.
					this.newLedgerTransactionsAdjusted(ledgerVoucherAdjusted, projTmpAdjustVoucher.LedgerDimension, generalJournalAccountEntry,
																				projTransPosting, _transDate);
				}
				else
                {
                    // Since this voucher is adjusted and it doesn't exist in the ledgerVoucherMap, we need to add it.
                    // Create ledger reversal entries.
                    ledgerVoucherRev = this.newLedgerTransactionsReverse(null,generalJournalAccountEntry, projTransPosting, _transDate);
                    ledgerVoucherObjectRev = ledgerVoucherRev.findLedgerVoucherObject();
                    // create new ledger entries.
                    ledgerVoucherAdjusted = this.newLedgerTransactionsAdjusted(null, projTmpAdjustVoucher.LedgerDimension, generalJournalAccountEntry,
                                                                            projTransPosting, _transDate);
                    ledgerVoucherObjectNew = ledgerVoucherAdjusted.findLedgerVoucherObject();
                    // Make newly created voucher as the parent and link it with the reversed voucher.
                    ProjAdjustAccounting_post::createVoucherLinks(ledgerVoucherAdjusted.lastVoucher(), ledgerVoucherObjectNew.parmAccountingDate(), ledgerVoucherRev.lastVoucher(), ledgerVoucherObjectRev.parmAccountingDate());
                    // Make newly created voucher as the parent and link it with the original voucher.
                    ProjAdjustAccounting_post::createVoucherLinks(ledgerVoucherAdjusted.lastVoucher(), ledgerVoucherObjectNew.parmAccountingDate(), projTmpAdjustVoucher.Voucher, generalJournalEntry.accountingDate);
                    Array arr = new Array(Types::Class);
                    arr.value(1, ledgerVoucherRev);
                    arr.value(2, ledgerVoucherAdjusted);
                    ledgerVoucherMap.insert(projTmpAdjustVoucher.Voucher, arr);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOrigVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the voucher passed is associated with the original posted transaction.
    /// This method always returns false and needs to be overridden by child classes.
    /// </summary>
    /// <param name = "_voucher">A voucher.</param>
    /// <returns>
    ///  false.
    /// </returns>
	public boolean checkOrigVoucher(Voucher _voucher)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAdjustment</Name>
				<Source><![CDATA[
	/// <summary>
    ///  Runs the actual postings of the adjusted vouchers.
    /// </summary>
    /// <param name = "_ledgerMapEnumerator">
    /// Map containing the vouchers that need to be posted. 
	/// Key -> Original Voucher; 
	/// Value -> Array containing ledger voucher objects.
	/// </param>
	public void postAdjustment(MapEnumerator _ledgerMapEnumerator)
    {
        // Need to iterate over the map which has new vouchers created for each adjusted voucher.
        Voucher voucher;
        Array ledgerVoucherArr;
        LedgerVoucher ledgerVoucherRev, ledgerVoucherNew;
        LedgerVoucherObject ledgerVoucherObjectRev, ledgerVoucherObjectNew;
          
        while (_ledgerMapEnumerator.moveNext())
        {
            // Original voucher
            voucher = _ledgerMapEnumerator.currentKey();
            ledgerVoucherArr = _ledgerMapEnumerator.currentValue();			
            
			// post ledger voucher reversal.
            ledgerVoucherRev = ledgerVoucherArr.value(1);
            ledgerVoucherRev.end();
           
			//Post ledger voucher adjusted.
            ledgerVoucherNew = ledgerVoucherArr.value(2);
            ledgerVoucherNew.end();

			if (this.checkOrigVoucher(voucher))
            {
                this.parmNewVoucher(ledgerVoucherNew.lastVoucher());
            }            
        }           
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new voucher which would contain reversal of existing voucher entry and newly adjusted voucher entry.
    /// </summary>
    /// <param name = "_recordSet">
    /// Packed set containing <c>ProjTmpAdjustVoucher</c> table records that holds adjusted voucher entries.
    /// </param>
    /// <param name = "_transDate">
    /// Adjustment date.
    /// </param>
    public void post(Set _recordSet, TransDate _transDate)
    {
        if (!_recordSet)
        {
            throw Error('@SYS82602');
        }

        SetEnumerator setEnumerator = _recordSet.getEnumerator();

        this.newLedgerTransactions(setEnumerator, _transDate);

        Map ledgerMap = this.parmledgerVoucherMap();
		if (ledgerMap && ledgerMap.elements())
        {
            MapEnumerator ledgerMapEnumerator = ledgerMap.getEnumerator();
            this.postAdjustment(ledgerMapEnumerator);
            
			// Update old trans
            this.updateProjTrans();

            // we need to point un-adjusted vouchers from ProjTransPosting to the new TransID.
            if (unAdjustedVoucherSet.elements())
            {
                this.updateProjTransPosting(unAdjustedVoucherSet, newTransID);
            }   
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>