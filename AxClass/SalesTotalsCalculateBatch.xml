<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTotalsCalculateBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Batch job to calculate sales totals. Accepts an input parameter representing the cut-off date such that all documents
/// older than this date are ignored.
/// </summary>
public class SalesTotalsCalculateBatch extends RunBaseBatch implements BatchRetryable
{   
    private static const SalesTotalsCalcMaxDays MaximumAgeInDaysDefault = 30;

    private DialogField maximumAgeInDaysCtrl, calculateForOrders, calculateForQuotations;
    private DialogField numberOfThreadsCtrl;
    protected int maximumAgeInDays;
    protected NoYes calcSalesOrder, calcSalesQuotations;
    private const Version CurrentVersion = 2;
    private SalesTotalsCalculateNumThreads numberOfThreads;
    private SalesTotalsCalculateBundleId bundleId;
    private container bundleIds;
    private utcdatetime updateDateTime;
    private SalesTotalsCalculateInstrumentationLogger instrumentationLogger;

    #localmacro.CurrentList
        maximumAgeInDays,
        calcSalesOrder,
        calcSalesQuotations,
        numberOfThreads,
        bundleId,
        updateDateTime
    #endmacro

    #localmacro.CurrentListVersion1
        maximumAgeInDays,
        calcSalesOrder,
        calcSalesQuotations
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        Dialog ret = this.dialogInternal(dialog, forceOnClient);

        if (this.isInBatch())
        {
            maximumAgeInDaysCtrl    = ret.addFieldValue(extendedTypeStr(SalesTotalsCalcMaxDays), maximumAgeInDays, "@SCM:SalesTotalsMaxAge", "@SCM:SalesTotalsMaxAgeHelpText");
            calculateForOrders      = ret.addFieldValue(extendedTypeStr(NoYesId), calcSalesOrder, "@SCM:SalesTotalsCalculateForOrders", "@SCM:SalesTotalsCalculateForOrdersHelpText");
            calculateForQuotations  = ret.addFieldValue(extendedTypeStr(NoYesId), calcSalesQuotations, "@SCM:SalesTotalsCalculateForQuotations", "@SCM:SalesTotalsCalculateForQuotationsHelpText");
        }
        else
        {
            maximumAgeInDaysCtrl    = ret.addField(extendedTypeStr(SalesTotalsCalcMaxDays), "@SCM:SalesTotalsMaxAge", "@SCM:SalesTotalsMaxAgeHelpText");
            calculateForOrders      = ret.addField(extendedTypeStr(NoYesId), "@SCM:SalesTotalsCalculateForOrders", "@SCM:SalesTotalsCalculateForOrdersHelpText");
            calculateForQuotations  = ret.addField(extendedTypeStr(NoYesId), "@SCM:SalesTotalsCalculateForQuotations", "@SCM:SalesTotalsCalculateForQuotationsHelpText");
            if (maximumAgeInDaysCtrl.value() < MaximumAgeInDaysDefault)
            {
                maximumAgeInDaysCtrl.value(MaximumAgeInDaysDefault);
            }
        }

         numberOfThreadsCtrl = ret.addFieldValue(extendedTypeStr(SalesTotalsCalculateNumThreads), numberOfThreads, '@SYS109551', '@SCM:SalesTotalsCalculateNumberOfThreadsHelpText');

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        maximumAgeInDays    = maximumAgeInDaysCtrl.value();
        calcSalesOrder      = calculateForOrders.value();
        calcSalesQuotations = calculateForQuotations.value();
        numberOfThreads     = max(1, numberOfThreadsCtrl.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        utcdatetime cutOffDateTime = this.calculateCutOffDateTime();
        this.runMultithreaded(cutOffDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SalesTotalsCalculateInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = SalesTotalsCalculateInstrumentationLogger::createLogger(classStr(SalesTotalsCalculateBatch));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMultithreaded</Name>
				<Source><![CDATA[
    private void runMultithreaded(utcdatetime _cutOffDateTime)
    {
        if (!calcSalesOrder && !calcSalesQuotations)
        {
            return;
        }

        boolean isMainThread = this.isInBatch() && !bundleId;

        using (var activityContext = this.instrumentationLogger().salesTotalsCalculateActivities().runThread(isMainThread, numberOfThreads, this.parmCurrentBatch().BatchJobId))
        {
            if (isMainThread)
            {
                this.cleanupObsoleteBundles();
                this.setupThreads(_cutOffDateTime);
            }
            else
            {
                if (calcSalesOrder == NoYes::Yes)
                {
                    this.calculateSalesOrderTotals(_cutOffDateTime);
                }

                if (calcSalesQuotations == NoYes::Yes)
                {
                    this.calcualteSalesQuotationTotals(_cutOffDateTime);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSalesOrderTotals</Name>
				<Source><![CDATA[
    private void calculateSalesOrderTotals(utcdatetime _cutOffDateTime)
    {
        if (bundleId)
        {
            using (var activityContext = this.instrumentationLogger().salesTotalsCalculateActivities().calculateSalesOrderTotals(bundleId))
            {
                SalesOrderTotalsExecutionItem   salesOrderTotalsExecutionItem;

                while select SalesId from salesOrderTotalsExecutionItem
                where salesOrderTotalsExecutionItem.ProcessingBundleId == bundleId
                {
                    SalesOrderTotalsCalculate::calculateTotalsForOrder(salesOrderTotalsExecutionItem.SalesId, updateDateTime);
                }
            }
        }
        else
        {
            SalesOrderTotalsCalculate::calculateTotalsForAllOrders(_cutOffDateTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcualteSalesQuotationTotals</Name>
				<Source><![CDATA[
    private void calcualteSalesQuotationTotals(utcdatetime _cutOffDateTime)
    {
        if (bundleId)
        {
            using (var activityContext = this.instrumentationLogger().salesTotalsCalculateActivities().calcualteSalesQuotationTotals(bundleId))
            {
                SalesQuotationTotalsExecutionItem salesQuotationTotalsExecutionItem;

                while select QuotationId from salesQuotationTotalsExecutionItem
                where salesQuotationTotalsExecutionItem.ProcessingBundleId == bundleId
                {
                    SalesQuotationTotalsCalculate::calculateTotalsForQuotation(salesQuotationTotalsExecutionItem.QuotationId, updateDateTime);
                }
            }
        }
        else
        {
            SalesQuotationTotalsCalculate::calculateTotalsForAllQuotations(_cutOffDateTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupObsoleteBundles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the execution item records in case the SalesTotalsCalculateBatchCleanupService task is not run:
    ///  - Cancelled by an User
    ///  - Failed because of an Error
    /// </summary>
    private void cleanupObsoleteBundles()
    {
        SalesOrderTotalsExecutionItem salesOrderTotalsExecutionItem;
        SalesQuotationTotalsExecutionItem salesQuotationTotalsExecutionItem;
        BatchJob batchJob;

        using (var activityContext = this.instrumentationLogger().salesTotalsCalculateActivities().cleanupObsoleteBundles())
        {
            //In case there is some error and the Calculate sales totals is scheduled to run recurrently.

            ttsbegin;
            delete_from salesOrderTotalsExecutionItem
                where salesOrderTotalsExecutionItem.BatchJobId == this.parmCurrentBatch().BatchJobId;
            ttscommit;

            activityContext.addCustomProperty('salesOrderTotalsExecutionItem', int2Str(salesOrderTotalsExecutionItem.RowCount()));

            ttsbegin;
            delete_from salesQuotationTotalsExecutionItem
                where salesQuotationTotalsExecutionItem.BatchJobId == this.parmCurrentBatch().BatchJobId;
            ttscommit;

            activityContext.addCustomProperty('salesQuotationTotalsExecutionItem', int2Str(salesQuotationTotalsExecutionItem.RowCount()));

            //In case the task is cancelled by an User or failed because of an error.

            ttsbegin;
            delete_from salesOrderTotalsExecutionItem
            exists join batchJob
                where  batchJob.RecId == salesOrderTotalsExecutionItem.BatchJobId
                    && (batchJob.Status == BatchStatus::Canceled
                    ||  batchJob.Status == BatchStatus::Error);
            ttscommit;

            activityContext.addCustomProperty('salesOrderTotalsExecutionItem', int2Str(salesOrderTotalsExecutionItem.RowCount()));

            ttsbegin;

            delete_from salesQuotationTotalsExecutionItem
            exists join batchJob
                where  batchJob.RecId == salesQuotationTotalsExecutionItem.BatchJobId
                    && (batchJob.Status == BatchStatus::Canceled
                    ||  batchJob.Status == BatchStatus::Error);
            ttscommit;

            activityContext.addCustomProperty('salesQuotationTotalsExecutionItem', int2Str(salesQuotationTotalsExecutionItem.RowCount()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupThreads</Name>
				<Source><![CDATA[
    private void setupThreads(utcdatetime _cutOffDateTime)
    {
        this.setBundleIds(numberOfThreads);
        this.insertRecordsIntoExecutionList(_cutOffDateTime);
        this.registerThreads();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBundleIds</Name>
				<Source><![CDATA[
    private void setBundleIds(SalesTotalsCalculateNumThreads _numberOfThreads)
    {
        for (var i = 1; i <= _numberOfThreads; i++)
        {
            bundleIds = conIns(bundleIds, maxInt(), System.Guid::NewGuid());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordsIntoExecutionList</Name>
				<Source><![CDATA[
    private void insertRecordsIntoExecutionList(utcdatetime _cutOffDateTime)
    {
        if (calcSalesOrder == NoYes::Yes)
        {
            this.insertSalesOrderRecordsIntoExecutionList(_cutOffDateTime);
        }

        if (calcSalesQuotations == NoYes::Yes)
        {
            this.insertSalesQuotationRecordsIntoExecutionList(_cutOffDateTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesOrderRecordsIntoExecutionList</Name>
				<Source><![CDATA[
    private void insertSalesOrderRecordsIntoExecutionList(utcdatetime _cutOffDateTime)
    {
        int itemCount;
        SalesOrderLastChangeDateV2 lastChange;
        SalesOrderTotalsExecutionItem salesOrderTotalsExecutionItem;
        var recordInsertList = new RecordInsertList(tableNum(SalesOrderTotalsExecutionItem));

        QueryRun queryRun = new QueryRun(SalesOrderTotalsCalculate::createQuery(_cutOffDateTime));

        while(queryRun.next())
        {
            lastChange = queryRun.get(tableNum(SalesOrderLastChangeDateV2));

            salesOrderTotalsExecutionItem.clear();
            salesOrderTotalsExecutionItem.BatchJobId = this.parmCurrentBatch().BatchJobId;
            salesOrderTotalsExecutionItem.SalesId = lastChange.SalesId;
            salesOrderTotalsExecutionItem.ProcessingBundleId = conPeek(bundleIds, (itemCount mod numberOfThreads) + 1);
            
            recordInsertList.add(salesOrderTotalsExecutionItem);
            itemCount++;
        }

        ttsbegin;
        recordInsertList.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesQuotationRecordsIntoExecutionList</Name>
				<Source><![CDATA[
    private void insertSalesQuotationRecordsIntoExecutionList(utcdatetime _cutOffDateTime)
    {
        int itemCount;
        SalesQuotationLastChangeDate lastChange;
        SalesQuotationTotalsExecutionItem salesQuotationTotalsExecutionItem;
        var recordInsertList = new RecordInsertList(tableNum(SalesQuotationTotalsExecutionItem));

        QueryRun queryRun = new QueryRun(SalesQuotationTotalsCalculate::createQuery(_cutOffDateTime));

        while(queryRun.next())
        {
            lastChange = queryRun.get(tableNum(SalesQuotationLastChangeDate));

            salesQuotationTotalsExecutionItem.clear();
            salesQuotationTotalsExecutionItem.BatchJobId = this.parmCurrentBatch().BatchJobId;
            salesQuotationTotalsExecutionItem.QuotationId = lastChange.QuotationId;
            salesQuotationTotalsExecutionItem.ProcessingBundleId = conPeek(bundleIds, (itemCount mod numberOfThreads) + 1);
            
            recordInsertList.add(salesQuotationTotalsExecutionItem);
            itemCount++;
        }

        ttsbegin;
        recordInsertList.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerThreads</Name>
				<Source><![CDATA[
    private void registerThreads()
    {
        utcdatetime updateDateTimeRegister = DateTimeUtil::utcNow();
        BatchHeader batchHeader;

        if (this.parmCurrentBatch())
        {
            batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        }
        else
        {
            batchHeader = BatchHeader::getCurrentBatchHeader();
        }

        SysOperationServiceController cleanupServiceController = new SysOperationServiceController(classStr(SalesTotalsCalculateBatchCleanupService), methodStr(SalesTotalsCalculateBatchCleanupService, run));
        SalesTotalsCalculateBatchCleanupDataContract cleanupServiceContract = cleanupServiceController.getDataContractObject();

        cleanupServiceContract.parmBundleIds(bundleIds);

        batchHeader.addRuntimeTask(cleanupServiceController, this.parmCurrentBatch().RecId);

        for (int i = 1; i <= numberOfThreads; i++)
        {
            SalesTotalsCalculateBatch salesTotalsCalculateBatch = new SalesTotalsCalculateBatch();

            salesTotalsCalculateBatch.unpack(this.pack());
            salesTotalsCalculateBatch.parmBundleId(conPeek(bundleIds, i)); 
            salesTotalsCalculateBatch.parmUpdateDateTime(updateDateTimeRegister);
            salesTotalsCalculateBatch.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);

            batchHeader.addRuntimeTask(salesTotalsCalculateBatch, this.parmCurrentBatch().RecId);
            batchHeader.addDependency(cleanupServiceController, salesTotalsCalculateBatch, BatchDependencyStatus::FinishedOrError);
        }

        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBundleId</Name>
				<Source><![CDATA[
    internal SalesTotalsCalculateBundleId parmBundleId(SalesTotalsCalculateBundleId _bundleId = bundleId)
    {
        bundleId = _bundleId;

        return bundleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateDateTime</Name>
				<Source><![CDATA[
    internal utcdatetime parmUpdateDateTime(utcdatetime _updateDateTime = updateDateTime)
    {
        updateDateTime = _updateDateTime;

        return updateDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:CalculateSalesTotals";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SalesTotalsCalculateBatch totalsCalc = new SalesTotalsCalculateBatch();

        if (totalsCalc.prompt())
        {
            totalsCalc.runOperation();
        }
                
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
    
        switch (version)
        {
            case CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            
            case 1:
                [version, #CurrentListVersion1] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCutOffDateTime</Name>
				<Source><![CDATA[
    private utcdatetime calculateCutOffDateTime()
    {
        return DateTimeUtil::newDateTime(
                    DateTimeUtil::date(DateTimeUtil::addDays(DateTimeUtil::utcNow(), -maximumAgeInDays)),
                    0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>