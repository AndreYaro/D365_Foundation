<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayCalculate_BorrowingGain</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayCalculate_BorrowingGain extends RPayCalculate_StandardDeduction
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc_BorrowingPercentage</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Percent calc_BorrowingPercentage()
    {
        return payEmplStandardDeductionTable.BorrowingPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_NoOfPeriodDays</Name>
				<Source><![CDATA[
    protected int calc_NoOfPeriodDays()
    {
        RPayTrans     rPayTrans;
        StartDate     startDate;

        select firstonly rPayTrans order by PayPeriod desc
            where rPayTrans.SourceTableId == sourceTable.TableId      &&
                  rPayTrans.SourceRecId   == sourceTable.RecId        &&
                  rPayTrans.Scanning      == payCounterTable.Scanning &&
                  rPayTrans.Emplid        == emplTable.EmployeeId     &&
                  rPayTrans.PayPeriod     <  payPeriod;

        startDate = rPayTrans ? rPayTrans.PayPeriod : (payEmplStandardDeductionTable.DocumentDate - 1);

        return payPeriod - startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCommon</Name>
				<Source><![CDATA[
    public void calcCommon(RPaySequence _paySequence  = 0,
                           NoYes        _errorMessage = NoYes::No)
    {
        RPayEmplStandardDeductionTable rPayEmplStandardDeductionTable;

        if (needCheckModuleCalculate && ! this.canModuleCalculate())
        {
            throw info("@RUP387");
        }

        this.checkPostingProfiles(true);

        if (emplTable.checkEmplBeforeCalc(payPeriod, _errorMessage))
        {
            this.initTransDate(emplTable.EmployeeId);

            while select rPayEmplStandardDeductionTable
                order by DeductionOrder
                where rPayEmplStandardDeductionTable.EmplId       == emplTable.EmployeeId &&
                      rPayEmplStandardDeductionTable.DocumentDate <= payPeriod            &&
                      rPayEmplStandardDeductionTable.MustBeProfitCalculated
            {
                if (! this.needCommonCalculate(rPayEmplStandardDeductionTable.PeriodFrequency, rPayEmplStandardDeductionTable))
                    return;

                if (this.canCalcWithTaxReverse(rPayEmplStandardDeductionTable))
                {
                    while select paySeqTable
                        where paySeqTable.PayModuleCode == payModuleTable.PayModuleCode
                    {
                        this.setSourceTable(rPayEmplStandardDeductionTable);
                        this.calcSequence();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCalcWithTaxReverse</Name>
				<Source><![CDATA[
    private boolean canCalcWithTaxReverse(RPayEmplStandardDeductionTable _emplStandardDeduction)
    {
        RPayTaxEmplLoanLucreReverseCheck taxEmplLoanLucreCheck;
        boolean ret;

        taxEmplLoanLucreCheck = new RPayTaxEmplLoanLucreReverseCheck();
        taxEmplLoanLucreCheck.parmEmplId(_emplStandardDeduction.EmplId);
        taxEmplLoanLucreCheck.refLoanLucre(_emplStandardDeduction.RecId);
        ret = taxEmplLoanLucreCheck.run();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTrans</Name>
				<Source><![CDATA[
    protected void deleteTrans(RHRMEmplId _mainEmplId)
    {
        RHRMEmplTable emplTableLocal;

        if (payModuleTable.NeedDeleteBeforeCalc)
        {
            delete_from payTrans
                where payTrans.PayPeriod     == payPeriod                    &&
                      payTrans.PayModuleCode == payModuleTable.PayModuleCode &&
                      payTrans.SourceTableId                                 &&
                      payTrans.SourceRecId                                   &&
                      payTrans.PayPeriod     >= payTrans.CorrectedPeriod
            exists join emplTableLocal
                where emplTableLocal.EmployeeId    == payTrans.Emplid &&
                      emplTableLocal.PayMainEmplId == _mainEmplId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needCommonCalculate</Name>
				<Source><![CDATA[
    protected boolean needCommonCalculate(RPayPeriodFrequency _periodFrequency, RPayEmplStandardDeductionTable rPayEmplStandardDeductionTable = null)
    {
        boolean                 ret = super(_periodFrequency);
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        RPayTaxParameters       taxParameters;
        QueryRun                queryRunLocal;
        RPayTaxDeductionTable   rPayTaxDeductionTable;
        RPayCalculate           payCalculate;
        RPayAmount              deductionAmount;

        if (rPayEmplStandardDeductionTable.ReverseBorrowingGain)
        {
            taxParameters = RPayTaxParameters::find();
            if (taxParameters.AssessedDeduction)
            {
                query = new Query();
                queryBuildDataSource = query.addDataSource(tablenum(RPayTaxDeductionTable));
                queryBuildDataSource.addRange(fieldnum(RPayTaxDeductionTable, RPayTaxDeductionCode)).value(taxParameters.AssessedDeduction);
                queryBuildDataSource.addRange(fieldnum(RPayTaxDeductionTable, ReverseBorrowingGain)).value(queryValue(NoYes::Yes));

                queryRunLocal = new QueryRun(query);

                while (queryRunLocal.next())
                {
                    rPayTaxDeductionTable = queryRunLocal.get(tablenum(RPayTaxDeductionTable));

                    if (! rPayTaxDeductionTable.RpayRateCodeEmpl)
                    {
                        if (rPayTaxDeductionTable.RpaySequence)
                        {
                            payCalculate = new RPayCalculate(RPayModuleTable::find(#ModuleNameTax));
                            payCalculate.setSourceTable(emplTable);
                            payCalculate.setSeqTable(RPaySeqTable::find(rPayTaxDeductionTable.RpaySequence));
                            payCalculate.payPeriod(payPeriod);
                            payCalculate.setInitValue(0);
                            payCalculate.calcSequence();
                            deductionAmount = payCalculate.getCurrentValue();
                        }
                        else
                        {
                            deductionAmount = RPayRateTable::find(rPayTaxDeductionTable.RpayRateCodeValue).getValue(RPayRateCallContext::construct(payPeriod,rPayEmplStandardDeductionTable.EmplId,0));
                        }
                    }
                    else
                    {
                        if (rPayTaxDeductionTable.RpayTaxDeductionCode == RPayRateTable::find(rPayTaxDeductionTable.RpayRateCodeEmpl)
                                                                            .getValue(RPayRateCallContext::construct(payPeriod,rPayEmplStandardDeductionTable.EmplId,0)))
                        {
                            if (rPayTaxDeductionTable.RpaySequence)
                            {
                                payCalculate = new RPayCalculate(RPayModuleTable::find(#ModuleNameTax));
                                payCalculate.setSourceTable(emplTable);
                                payCalculate.setSeqTable(RPaySeqTable::find(rPayTaxDeductionTable.RpaySequence));
                                payCalculate.payPeriod(payPeriod);
                                payCalculate.setInitValue(0);
                                payCalculate.calcSequence();
                                deductionAmount = payCalculate.getCurrentValue();
                            }
                            else
                            {
                                deductionAmount = RPayRateTable::find(rPayTaxDeductionTable.RpayRateCodeValue).getValue(RPayRateCallContext::construct(payPeriod,rPayEmplStandardDeductionTable.EmplId,0));
                            }
                        }
                    }

                    if (deductionAmount)
                    {
                        return false;
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>