<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdAsBuiltBOMComponentLotAssociationOnhandController</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class ProdAsBuiltBOMComponentLotAssociationOnhandController
{
    private ProdAsBuiltBOMComponentLotAssociation componentLotAssociation;
    private InventMovement                        movement;
    private InventDim                             inventDimPick;
    private InventDimParm                         inventDimParmPick;
    private InventTransIdSum                      inventTransIdSum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setComponentLotAssociation</Name>
				<Source><![CDATA[
    private ProdAsBuiltBOMComponentLotAssociationOnhandController setComponentLotAssociation(ProdAsBuiltBOMComponentLotAssociation _componentLotAssociation)
    {
        componentLotAssociation = _componentLotAssociation;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventMovementPick</Name>
				<Source><![CDATA[
    private ProdAsBuiltBOMComponentLotAssociationOnhandController setInventMovementPick()
    {
        ProdJournalBOM pickingListLine;

        if (componentLotAssociation.InventTransChildRefId && componentLotAssociation.InventTransChildType == InventTransChildType::ProdJournalBOM)
        {
            pickingListLine = componentLotAssociation.findPickingListLine();
        }

        movement = InventMovement::construct(componentLotAssociation.findComponentLot(), InventMovSubType::None, pickingListLine.RecId ? pickingListLine : null);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimTrackingDimPick</Name>
				<Source><![CDATA[
    private ProdAsBuiltBOMComponentLotAssociationOnhandController setInventDimTrackingDimPick()
    {
        inventDimPick.initFromInventDim(movement.inventDim());
        inventDimPick.InventBatchId  = componentLotAssociation.BatchNumberId;
        inventDimPick.inventSerialId = componentLotAssociation.SerialNumberId;

        inventDimParm inventDimParm;
        inventDimParm.initFromInventDim(inventDimPick);

        InventSum onhand;

        select firstonly onhand
            where onhand.ItemId             == componentLotAssociation.ItemId
               && onhand.InventSiteId       == inventDimPick.InventSiteId
               && onhand.inventLocationId   == inventDimPick.InventLocationId
               && onhand.InventBatchId      == inventDimPick.InventBatchId
               && onhand.inventSerialId     == inventDimPick.inventSerialId
               && onhand.Closed             == NoYes::No;
        
        inventDimPick.wMSLocationId  = onhand.wMSLocationId;
        inventDimPick.InventStatusId = onhand.InventStatusId;
        inventDimPick.LicensePlateId = onhand.LicensePlateId;

        inventDimPick = InventDim::findOrCreate(inventDimPick);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimTrackingDimParmPick</Name>
				<Source><![CDATA[
    private ProdAsBuiltBOMComponentLotAssociationOnhandController setInventDimTrackingDimParmPick()
    {
        inventDimParmPick.initFromInventDim(inventDimPick);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransIdSumTrackingDim</Name>
				<Source><![CDATA[
    private ProdAsBuiltBOMComponentLotAssociationOnhandController setInventTransIdSumTrackingDim()
    {
        inventTransIdSum = InventTransIdSum::newTransOriginIdDimension(movement.inventTransOriginId(), inventDimPick, inventDimParmPick);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pick</Name>
				<Source><![CDATA[
    internal void pick()
    {
        if (!ProdAsBuiltBOMCreatePickingListSplitBatchFlight::instance().isEnabled())
        {
            if (componentLotAssociation.InventConsumptionQty && componentLotAssociation.InventConsumptionQty > this.picked())
            {
                InventUpd_Picked::newParameters(movement, inventDimPick, inventDimParmPick, inventDimPick, inventDimParmPick, -componentLotAssociation.InventConsumptionQty, '', -0).updateNow();
            }
        }
        else
        {
            var pickRemainder = min(componentLotAssociation.InventConsumptionQty, -movement.transQty() - this.picked() - this.deducted());
            if (pickRemainder <= 0)
            {
                return;
            }

            InventUpd_Picked::newParameters(movement, inventDimPick, inventDimParmPick, inventDimPick, inventDimParmPick, -pickRemainder, '', -0).updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpick</Name>
				<Source><![CDATA[
    internal void unpick()
    {
        InventQty pickedQty = this.picked();

        if (pickedQty)
        {
            InventUpd_Picked::newParameters(movement, inventDimPick, inventDimParmPick, inventDimPick, inventDimParmPick, pickedQty, '', -0).updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>picked</Name>
				<Source><![CDATA[
    internal InventQty picked()
    {
        return -inventTransIdSum.picked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserved</Name>
				<Source><![CDATA[
    internal InventQty reserved()
    {
        return -inventTransIdSum.reserved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onOrder</Name>
				<Source><![CDATA[
    internal InventQty onOrder()
    {
        return -inventTransIdSum.onOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deducted</Name>
				<Source><![CDATA[
    internal InventQty deducted()
    {
        return -inventTransIdSum.deducted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>availPhysical</Name>
				<Source><![CDATA[
    internal InventQty availPhysical()
    {
        InventQty inventQty = this.onOrder() + this.reserved() + this.picked();
        if (inventQty <= 0)
        {
            inventQty = InventOnHandQty::newPhysicalUpdate(movement, inventDimPick).availPhysical();
        }

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickComponents</Name>
				<Source><![CDATA[
    internal static boolean pickComponents(List _selectionList)
    {
        if (!_selectionList.elements())
        {
            error("@SCM:TrackedComponentsPickComponentSelection");
        }
        boolean result;
        try
        {
            ttsbegin;
            ListEnumerator enumerator = _selectionList.getEnumerator();
            ProdAsBuiltBOMComponentLotAssociation componentAssociation;

            while (enumerator.moveNext())
            {
                while select componentAssociation
                    where componentAssociation.MatchId == enumerator.current()
                      && !componentAssociation.IsCompleted
                {
                    componentAssociation.pickComponent();
                }
            }
            result = true;
            ttscommit;
        }
        catch (Exception::Error)
        {
        }
        finally
        {
            if (result)
            {
                info("@SCM:TrackedComponentsPickComponentSuccess");
            }
            else
            {
                error("@SCM:TrackedComponentsPickComponentError");
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMComponentLotAssociationOnhandController construct(ProdAsBuiltBOMComponentLotAssociation _componentLotAssociation)
    {
        var controller = new ProdAsBuiltBOMComponentLotAssociationOnhandController()
                            .setComponentLotAssociation(_componentLotAssociation)
                            .setInventMovementPick()
                            .setInventDimTrackingDimPick()
                            .setInventDimTrackingDimParmPick()
                            .setInventTransIdSumTrackingDim();

        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>