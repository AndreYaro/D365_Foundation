<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRRetailOENInfo_SalesOrderBill</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generate event notification for sales order bill.
/// </summary>
class MCRRetailOENInfo_SalesOrderBill extends RetailOENInfo
{
    #MCRRetailOENInfo

    MCRCustPaymTable        mcrCustPaymTable;
    MCRSalesOrderTotals     mcrSalesOrderTotals;
    MCRContinuityLineEval   mcrContinuityLineEval;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcSalesTotals</Name>
				<Source><![CDATA[
    private void calcSalesTotals()
    {
        SalesTable salesTable = this.parmSalesOrder();
        mcrSalesOrderTotals = new MCRSalesOrderTotals(salesTable);

        // Get the continuity line payment types for the order to be used
        // to format the totals.
        if (salesTable.mcrSalesTable().ContinuityOrder)
        {
            mcrContinuityLineEval = SalesTable::MCRContinuityLineEvalResult(
                        SalesTable::MCREvalContOrderLines(salesTable.SalesId));
        }
        else
        {
            mcrContinuityLineEval = MCRContinuityLineEval::Blank;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EventNotificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to return the event notification type.
    /// </summary>
    /// <returns>
    /// Event notification type.
    /// </returns>
    public RetailEventNotificationType EventNotificationType()
    {
        return RetailEventNotificationType::MCRSalesOrderBill;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymTotalAmount</Name>
				<Source><![CDATA[
    private AmountCur getPaymTotalAmount()
    {
        MCRCustPaymTotals_Sales mcrCustPaymTotals_Sales;
        AmountCur               retVal = 0;

        mcrCustPaymTotals_Sales = new MCRCustPaymTotals_Sales(this.parmSalesOrder().RecId);

        retVal = mcrCustPaymTotals_Sales.getTotalPaymAmount();
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTotalAmount</Name>
				<Source><![CDATA[
    private AmountCur getSalesTotalAmount()
    {
        Amount salesTotalAmount;

        this.calcSalesTotals();

        // The total on the document depends on if there are continuity items
        // on the order and their payment types.
        switch (mcrContinuityLineEval)
        {
            // If continuity order is pay all later, there is no total.
            case MCRContinuityLineEval::PayAllLater:
                salesTotalAmount = 0;
                break;
            case MCRContinuityLineEval::PayPartNowPartSched:
                salesTotalAmount = mcrSalesOrderTotals.getTotalOrder()
                             - mcrSalesOrderTotals.getContinuityPayLater()
                             - mcrSalesOrderTotals.getContinuityPayLaterTax();
                break;
            // Remainder are standard sales orders or continuity all due now.
            default:
                salesTotalAmount = mcrSalesOrderTotals.getTotalOrder();
                break;
        }
        return salesTotalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameterMap</Name>
				<Source><![CDATA[
    protected void initParameterMap()
    {
        CompanyInfo companyInfo = CompanyInfo::findDataArea(curext());
        AmountCur   paymTotalAmount = this.getPaymTotalAmount();
        super();
        parameterMap.insert(#TodaysDate, RetailENInfo::formatDatetimeData(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), languageId));
        parameterMap.insert(#AccountNum, salesOrder.CustAccount);
        parameterMap.insert(#CompanyName, companyInfo.name());
        parameterMap.insert(#CompanyPhone, companyInfo.phone());
        parameterMap.insert(#CreatedDate, RetailENInfo::formatDatetimeData(salesOrder.createDate(), languageId));
        parameterMap.insert(#URL, companyInfo.url());
        parameterMap.insert(#PaymTotalAmount, num2Str(paymTotalAmount, 0, 2, 1, 3));
        parameterMap.insert(#AmountOwed, num2Str((this.getSalesTotalAmount() - paymTotalAmount), 0, 2, 1, 3));
        parameterMap.insert(#DeliveryDate, RetailENInfo::formatDatetimeData(salesOrder.DeliveryDate, languageId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSetting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the settings.
    /// </summary>
    /// <param name = "_refRecId">The RecId for Sales Order.</param>
    public void initSetting(RefRecId _refRecId)
    {
        MCRChannelUser                  mcrChannelUser;
        RetailChannelTable              retailChannelTable;

        select firstOnly notificationSetting
            where notificationSetting.EventNotificationType == this.EventNotificationType()
            join notificationProfile
            where notificationProfile.RecId == notificationSetting.EventNotificationProfile
            exists join retailChannelTable
            where retailChannelTable.EventNotificationProfileId == notificationProfile.ProfileId
            exists join mcrChannelUser
            where mcrChannelUser.Channel == retailChannelTable.RecId
                && mcrChannelUser.User == curUserId();

        this.resolveSalesOrder(_refRecId);

        this.initParameterMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds sales order and sets value to <c>RetailOENInfo</c>.
    /// </summary>
    /// <param name="_refRecId">
    /// Sales order record id.
    /// </param>
    public void resolveSalesOrder(RefRecId _refRecId)
    {
        this.parmSalesOrder(SalesTable::findRecId(_refRecId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>