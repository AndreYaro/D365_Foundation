<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerFiscalClosePostZakatValue_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerFiscalClosePostZakatValue_SA</c> class is consumed by general ledger year-end close processing to
/// posts general ledger journal and updates Zakat value records prior to fiscal close processing.
/// </summary>
internal final class LedgerFiscalClosePostZakatValue_SA
{
    private LegalEntityDataAreaId legalEntityId;
    private FiscalCalendarYear fiscalCalendarYear;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newForFiscalClose</Name>
				<Source><![CDATA[
    public static LedgerFiscalClosePostZakatValue_SA newForFiscalClose(
        LegalEntityDataAreaId _legalEntityId,
        FiscalCalendarYear _fiscalCalendarYear)
    {
        LedgerFiscalClosePostZakatValue_SA ledgerFiscalClosePostZakatValue_SA = new LedgerFiscalClosePostZakatValue_SA(
            _legalEntityId,
            _fiscalCalendarYear);

        return ledgerFiscalClosePostZakatValue_SA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(
        LegalEntityDataAreaId _legalEntityId,
        FiscalCalendarYear _fiscalCalendarYear)
    {
        this.legalEntityId = _legalEntityId;
        this.fiscalCalendarYear = _fiscalCalendarYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postZakatValue_SA</Name>
				<Source><![CDATA[
    public void postZakatValue_SA()
    {
        changecompany(this.legalEntityId)
        {
            LedgerParameters ledgerParameters = LedgerParameters::find();

            if (ledgerParameters.IsZakatEnabled_SA)
            {
                ttsbegin;
                
                LedgerFiscalYearZakat_SA fiscalYear = year(this.fiscalCalendarYear.EndDate);
                LedgerValueZakat_SA ledgerValueZakatLoc = LedgerValueZakat_SA::findByFiscalYear(fiscalYear);

                GeneralJournalAccountEntryZakat_SA generalJournalAccountEntryZakat;
                delete_from generalJournalAccountEntryZakat
                    where generalJournalAccountEntryZakat.FiscalYr == (fiscalYear + 1)
                        && generalJournalAccountEntryZakat.PeriodCode == FiscalPeriodType::Opening;

                GeneralJournalAccountEntryZakat_SA::insertOpeningBalance(fiscalYear);

                if (ledgerValueZakatLoc.Value != ledgerValueZakatLoc.OldValue)
                {
                    LedgerJournalName ledgerJournalName;

                    select firstonly ledgerJournalName
                        where ledgerJournalName.JournalType == LedgerJournalType::Daily;

                    if (ledgerJournalName)
                    {
                        LedgerJournalTable ledgerJournalTable;
                        ledgerJournalTable.initFromLedgerJournalName(ledgerJournalName.JournalName);
                        ledgerJournalTable.CurrencyCode = Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId);
                        ledgerJournalTable.insert();

                        LedgerJournalEngine ledgerJournalEngine = new LedgerJournalEngine();
                        ledgerJournalEngine.ledgerJournalTable(ledgerJournalTable);
                        ledgerJournalTable.CurrencyCode = Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId);

                        LedgerJournalTrans ledgerJournalTrans;
                        ledgerJournalEngine.initValue(ledgerJournalTrans);
                        ledgerJournalTrans.initValue();

                        ledgerJournalTrans.AccountType = LedgerJournalACType::Ledger;
                        ledgerJournalTrans.TransDate = fiscalCalendarYear.EndDate;
                        ledgerJournalTrans.LedgerDimension = ledgerParameters.ExpenseAccount_SA;
                        ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
                        ledgerJournalTrans.OffsetLedgerDimension = ledgerParameters.ProvisionAccount_SA;
                        ledgerJournalTrans.AmountCurDebit = ledgerValueZakatLoc.DiffValue;
                        ledgerJournalTrans.insert();

                        LedgerValueZakat_SA ledgerValueZakat = LedgerValueZakat_SA::findByFiscalYear(fiscalYear, true);
                        ledgerValueZakat.Value = ledgerValueZakatLoc.Value;
                        ledgerValueZakat.update();

                        LedgerJournalCheckPost ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTable, NoYes::Yes);
                        LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);
                    }
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>