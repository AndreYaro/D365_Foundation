<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransEmplJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransEmplJournal extends ProjTransEmpl
{
    ProjJournalTrans    projJournalTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return projJournalTrans.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction can be invoiced.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that determines whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, the funding type is validated and
    /// the <c>ProjTrans.canTransStatusBeInvoiced</c> method is called to determine whether the transaction
    /// can be invoiced based on its status.
    /// </remarks>
    public boolean canBeInvoiced(boolean _chargeable = false)
    {
        boolean ret = true;

        if (!ProjLineProperty::find(this.linePropertyId()).ToBeInvoiced)
        {
            ret = false;
        }

        if (ret)
        {
            ret = ProjInvoiceTable::isBillingRuleInvoiceable(this.projId(), this.categoryId(), this.psaContractLineNum(), this.transType());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        return projJournalTrans.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price for a transaction.
    /// </summary>
    /// <returns>
    /// The cost price for this transaction.
    /// </returns>
    public CostPrice costPrice()
    {
        return projJournalTrans.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the sales amounts that are reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the sales amounts that are reported by the transaction.
    /// </returns>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projJournalTrans.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultdimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultdimension()
    {
        return projJournalTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSales</Name>
				<Source><![CDATA[
    public ExchRate exchRateSales(TransDate   _transDate  = this.transDate())
    {
        ProjJournalTrans projJournalTransOrig;

        if (ProjInvoiceCurrency::exist(ProjTable::find(this.projId()).ProjInvoiceProjId,this.currencyIdSales()))
        {
            return ProjInvoiceCurrency::find(ProjTable::find(this.projId()).ProjInvoiceProjId,this.currencyIdSales()).ExchRate;
        }

        // If the current journal line is not a reverse entry, see if the journal line came from a reversing entry and
        // use the original transaction for the exchange rate calculation
        if (!projJournalTrans.ReverseEntry)
        {
            projJournalTransOrig = ProjJournalTrans::findByReverse(projJournalTrans.RecId);

            if (projJournalTransOrig != null)
            {
                return ExchangeRateHelper::exchRate(this.currencyIdSales(), projJournalTransOrig.TransDate);
            }
        }

        return ExchangeRateHelper::exchRate(this.currencyIdSales(), _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondarySales</Name>
				<Source><![CDATA[
    public ExchRate exchRateSecondarySales(TransDate   _transDate  = this.transDate())
    {
        ProjJournalTrans projJournalTransOrig;

        if (ProjInvoiceCurrency::exist(ProjTable::find(this.projId()).ProjInvoiceProjId,this.currencyIdSales()))
        {
            return 0;
        }
        // If the current journal line is not a reverse entry, see if the journal line came from a reversing entry and
        // use the original transaction for the exchange rate calculation
        if (!projJournalTrans.ReverseEntry)
        {
            projJournalTransOrig = ProjJournalTrans::findByReverse(projJournalTrans.RecId);

            if (projJournalTransOrig != null)
            {
                return ExchangeRateHelper::exchRateSecond(this.currencyIdSales(), projJournalTransOrig.TransDate);
            }
        }

        return ExchangeRateHelper::exchRateSecond(this.currencyIdSales(), _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>indirectCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total indirect cost amount for the given transaction currency.
    /// </summary>
    /// <returns>
    ///    The indirect cost amount.
    /// </returns>
    public PSAIndirectCost indirectCostAmount()
    {
        PSAIndirectComponentTrans   psaIndirectComponentTrans;

        select sum(Amount) from psaIndirectComponentTrans
            where psaIndirectComponentTrans.IndirectComponentType == PSAIndirectComponentType::Cost
                    && psaIndirectComponentTrans.TransId == this.transId();

        return psaIndirectComponentTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether sales have been posted to the general ledger.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::No</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public NoYes ledgerSalesPosted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerStatusCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger status for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns <c>ProjLedgerStatus::None</c>.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjLedgerStatus ledgerStatusCost()
    {
        return ProjLedgerStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger date.
    /// </summary>
    /// <returns>
    /// The ledger date.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransDate ledgerTransDate()
    {
        TransDate ret;

        ret = projJournalTrans.TransDate;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return projJournalTrans.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether budgetary control is enabled.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean mustHandleBudget()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleCommittedCost</Name>
				<Source><![CDATA[
    public boolean mustHandleCommittedCost()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleForecast</Name>
				<Source><![CDATA[
    public boolean mustHandleForecast()
    {
        if (this.qty() != 0)
        {
            ProjForecastEmpl projForecastEmpl;

            select firstonly RecId from projForecastEmpl
                where projForecastEmpl.CategoryId == this.categoryId()
                   && projForecastEmpl.ProjId == this.projId();

            if (projForecastEmpl.RecId)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjJournalTrans _projJournalTrans)
    {
        projJournalTrans    = _projJournalTrans;

        super(_projJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    public ProjId projId()
    {
        return projJournalTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projJournalTrans</Name>
				<Source><![CDATA[
    public ProjJournalTrans projJournalTrans()
    {
        return projJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    public Qty qty()
    {
        return projJournalTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    public RecId recId()
    {
        return projJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>RecId</c> value for the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceRecId resource()
    {
        return projJournalTrans.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>RecId</c> value for the resource category that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceCategoryRecId resourceCategory()
    {
        return projJournalTrans.ResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    public SalesPrice salesPrice()
    {
        return projJournalTrans.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjJournalTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for the transaction.
    /// </summary>
    /// <returns>
    /// Tax Group id of the transaction
    /// </returns>
    /// <remarks>
    /// Used to retrieve tax group from hour journal line
    /// </remarks>
    public TaxGroup taxGroup()
    {
        return projJournalTrans.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public TransDate transDate()
    {
        return projJournalTrans.ProjTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// The transaction ID.
    /// </returns>
    public TransactionID transId()
    {
        return projJournalTrans.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text.
    /// </summary>
    /// <returns>
    /// The transaction text.
    /// </returns>
    public TransTxt txt()
    {
        return projJournalTrans.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the transaction.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public boolean validateWrite()
    {
        return projJournalTrans.validateWrite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether activity control is enabled.
    /// </summary>
    /// <returns>
    /// True if the activity control for hour transaction is marked on project; false otherwise.
    /// </returns>
    public boolean mustHandleActivity()
    {
        return ProjTable::checkRequireActivity(this.projId(), tableNum(ProjEmplTrans));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>