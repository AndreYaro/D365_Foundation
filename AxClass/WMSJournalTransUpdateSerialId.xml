<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsJournalTransUpdateSerialId</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WmsJournalTransUpdateSerialId extends JournalRunBaseBatch implements BatchRetryable
{
    // parameters
    JournalId                   journalId;
    LineNum                     lineNum;
    SerialNumberFormat          serialNumberMask;
    SerialNumberIntervalStart   serialNumberIntervalStart;
    SerialNumberIntervalEnd     serialNumberIntervalEnd;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        journalId,
        lineNum,
        serialNumberMask,
        serialNumberIntervalStart,
        serialNumberIntervalEnd
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns false.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>dialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@SYS18245";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Args args = this.initializeDialogArgs();

        if (!args)
        {
            return null;
        }

        FormRun formSpecifyValues = classfactory.formRunClass(args);
        formSpecifyValues.init();
        return formSpecifyValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDialogArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>Args</c> of the dialog.
    /// </summary>
    /// <returns>The initialized <c>Args</c>.</returns>
    protected Args initializeDialogArgs()
    {
        WMSJournalTrans wmsJournalTrans = WMSJournalTrans::find(journalId, lineNum);

        if (!wmsJournalTrans.canUpdateSerialId(true))
        {
            return null;
        }

        Args args = new Args();
        args.name(formStr(InventTransSerialNumberCreate));
        args.record(wmsJournalTrans);
        args.caller(this);

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNumberIncrement</Name>
				<Source><![CDATA[
    private real lineNumberIncrement(InventQty _qty)
    {
        WMSJournalTrans wmsJournalTrans;

        if (_qty == 0)
        {
            return 0;
        }

        select firstonly wmsJournalTrans
            order by LineNum
            where wmsJournalTrans.JournalId     == journalId    &&
                  wmsJournalTrans.LineNum        > lineNum;

        if (!wmsJournalTrans)
        {
            return 1;
        }

        return abs((wmsJournalTrans.LineNum - lineNum) / _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public JournalId parmJournalId(JournalId _journalId = journalId)
    {
        journalId = _journalId;
        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    public LineNum parmLineNum(LineNum _lineNum = lineNum)
    {
        lineNum = _lineNum;
        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSerialNumberFormat</Name>
				<Source><![CDATA[
    public SerialNumberFormat parmSerialNumberFormat(SerialNumberFormat _serialNumberMask = serialNumberMask)
    {
        serialNumberMask = _serialNumberMask;
        return serialNumberMask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSerialNumberIntervalEnd</Name>
				<Source><![CDATA[
    public SerialNumberIntervalEnd parmSerialNumberIntervalEnd(SerialNumberIntervalEnd _serialNumberIntervalEnd = serialNumberIntervalEnd)
    {
        serialNumberIntervalEnd = _serialNumberIntervalEnd;
        return serialNumberIntervalEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSerialNumberIntervalStart</Name>
				<Source><![CDATA[
    public SerialNumberIntervalStart parmSerialNumberIntervalStart(SerialNumberIntervalStart _serialNumberIntervalStart = serialNumberIntervalStart)
    {
        serialNumberIntervalStart = _serialNumberIntervalStart;
        return serialNumberIntervalStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        WMSJournalTrans wmsJournalTrans;
        WMSJournalTable wmsJournalTable;
        InventDim       inventDim;
        Counter         serialCount;
        real            lineInc;

        if (!this.validate(null))
        {
            error("@SYS18447");
            return;
        }

        ttsbegin;

        wmsJournalTrans = WMSJournalTrans::find(journalId, lineNum, true);
        inventDim = wmsJournalTrans.inventDim();
        wmsJournalTable = wmsJournalTrans.wmsJournalTable(true);

        inventDim.InventSerialId      = (serialNumberIntervalStart == 0 && serialNumberIntervalEnd == 0) ? serialNumberMask : NumberSeq::numInsertFormat(serialNumberIntervalStart,serialNumberMask);
        wmsJournalTrans.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;

        if (wmsJournalTrans.pdsSplitByCWQty())
        {
            lineInc = this.lineNumberIncrement(wmsJournalTrans.PdsCWQty);
            wmsJournalTrans.PdsCWQty = 1;

            wmsJournalTrans.Qty = wmsJournalTrans.Qty / (serialNumberIntervalEnd - serialNumberIntervalStart + 1);
        }
        else
        {
            lineInc = this.lineNumberIncrement(wmsJournalTrans.qty);
            wmsJournalTrans.Qty = 1;
        }

        wmsJournalTrans.update();

        for (serialCount = serialNumberIntervalStart + 1; serialCount <= serialNumberIntervalEnd; serialCount++)
        {
            inventDim.InventSerialId      = (serialNumberIntervalStart == 0 && serialNumberIntervalEnd == 0) ? serialNumberMask : NumberSeq::numInsertFormat(serialCount,serialNumberMask);
            wmsJournalTrans.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;
            wmsJournalTrans.LineNum += lineInc;
            wmsJournalTrans.insert();
            wmsJournalTable.NumOfLines++;
        }
        wmsJournalTable.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instructs the batch framework that this class can run impersonating the user who requested the task.
    /// </summary>
    /// <returns>
    ///    true always.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                return true;
            default :
                this.initParmDefault();
                return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;
        WMSJournalTrans             wmsJournalTrans = WMSJournalTrans::find(journalId, lineNum);

        ret = super(_calledFrom) && wmsJournalTrans.canUpdateSerialId(false);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of the <c>WMSJournalTransUpdateSerialId</c> class.
    /// </summary>
    /// <returns>
    ///    The new server bound instance of the <c>WMSJournalTransUpdateSerialId</c> class.
    /// </returns>
    public static WMSJournalTransUpdateSerialId construct()
    {
        return new WMSJournalTransUpdateSerialId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WMSJournalTransUpdateSerialId   wmsJournalTransUpdateSerialId;
        JournalForm                     journalForm;

        journalForm                     = JournalForm::fromArgs(_args);
        wmsJournalTransUpdateSerialId   = WMSJournalTransUpdateSerialId::newFromArgs(_args);

        journalForm.runbaseMainStart();

        if (!wmsJournalTransUpdateSerialId.prompt())
        {
            if (! wmsJournalTransUpdateSerialId.batchInfo().parmBatch().RecId)
            {
                journalForm.runbaseMainCancel(wmsJournalTransUpdateSerialId.parmJournalId());
            }
            return;
        }

        try
        {
            wmsJournalTransUpdateSerialId.runOperation();
            journalForm.runbaseMainEnd(wmsJournalTransUpdateSerialId,false);
        }
        catch (Exception::Error)
        {
            journalForm.runbaseMainEnd(wmsJournalTransUpdateSerialId,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    public static WMSJournalTransUpdateSerialId newFromArgs(
        Args     _args)
    {
        if (!_args.record() || _args.dataset() != tableNum(WMSJournalTrans))
        {
            throw error(Error::missingRecord(tablePName(WMSJournalTrans)));
        }

        WMSJournalTransUpdateSerialId wmsJournalTransUpdateSerialId = WMSJournalTransUpdateSerialId::construct();
        JournalTransMap               journalTrans = _args.record();

        wmsJournalTransUpdateSerialId.getLast();
        wmsJournalTransUpdateSerialId.parmJournalId(journalTrans.JournalId);
        wmsJournalTransUpdateSerialId.parmLineNum(journalTrans.LineNum);

        return wmsJournalTransUpdateSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>