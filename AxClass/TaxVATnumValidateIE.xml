<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxVATnumValidateIE</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxVATnumValidateIE extends TaxVATNumValidate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIE00001, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMod23</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the Modulo 23 algorithm for the VAT number.
    /// </summary>
    /// <param name="_vatNum">
    ///    The stripped VAT number to validate.
    /// </param>
    /// <returns>
    ///    true if the VAT number is a valid return value; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The description of the modulus 23 calculation is as follows:
    ///    A numeric value is assigned to the alphabetic character in position 9, with "A" = 1, "B" = 2, "C" = 3, etc.
    ///    Where a "W" or a blank already exists (in numbers assigned before 1 January 2013) the assigned numeric value will be zero.
    ///    Each digit is multiplied by a weight, with a weighting of 9 assigned to the numeric equivalent of the alphabetic character in position 9.
    ///    The first digit has a weight = 8, the second has a weight = 7 etc., and the seventh digit has a weight = 2.
    ///    The results are added together, and divided by 23. The remainder (modulus 23) indicate the check character position in the alphabet.
    /// </remarks>
    private boolean validateMod23(VATNum _vatNum)
    {
        const int CheckCharacterPos = 8;
        const str CharacterW = 'W';

        boolean ret = true;
        VATNum vatNum = strUpr(_vatNum);

        if (! match(':d:d:d:d:d:d:d', subStr(vatNum, 1, 7)))
        {
            ret = checkFailed(strFmt("@Tax:TaxRegistration_TaxId_ValidationMsg_FirstChr", 7, 9));
        }

        if (ret && ! match(':a:a', subStr(vatNum, 8, 2)))
        {
            ret = checkFailed(strFmt("@Tax:TaxRegistration_TaxId_ValidationMsg_LastChr", 2, 9));
        }

        if (ret)
        {
            int i, weight = 8, checkSum;

            for (i = 1; i <= 7; i++)
            {
                checkSum += str2int(subStr(vatNum, i, 1)) * weight;
                weight--;
            }

            checkSum += subStr(vatNum,9,1) == CharacterW ? 0 : (char2num(vatNum, 9) - 64) * 9;
            checkSum = checkSum mod 23;
            str checkCharacter = checkSum == 0 ? CharacterW : num2char(checkSum + 64);

            if (checkCharacter != subStr(_vatNum, CheckCharacterPos, 1))
            {
                ret = checkFailed(strFmt("@Tax:TaxRegistration_TaxId_ValidationMsg_CheckChr", CheckCharacterPos));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVATNum</Name>
				<Source><![CDATA[
    boolean validateVATNum(VATNum _vatNum, LogisticsAddressCountryRegionId _countryRegionId = '')
    {
        boolean ret = true;

        if (_vatNum)
        {
            ret = this.isValidChars(_vatNum);

            if (ret)
            {
                boolean isLength7 = this.isLengthOk(_vatNum,7,0,true);
                boolean isLength8 = this.isLengthOk(_vatNum,8,0,true);
                boolean isLength9 = this.isLengthOk(_vatNum,9,0,true);
                
                if (!isLength7 && !isLength8 && !isLength9)
                {
                    return checkFailed(strfmt("@SYS81617", strFmt("@SYS4009992", 7, "@SYS40286", 8,"@SYS40286", 9), int2str(strlen(_vatNum))));
                }
                
                if (isLength7)
                {
                    // Check that the seven-digit VAT Numbers are all Numbers
                    ret = this.isNumeric(_vatNum, 7);
                }

                if (isLength8)
                {
                    // if there is 6 numeric characters, then check if the second char is an alphabetic
                    if (strlen(strkeep(_vatNum, '1234567890')) == 6)
                    {
                        ret = this.isAlpha(substr(_vatNum, 2, 1));

                        // ... and then check if the last is an alphabetic
                        if (ret)
                        {
                            ret = this.isAlpha(substr(_vatNum, 8, 1));
                        }
                    }
                    else
                    {
                        ret = this.isNumeric(substr(_vatNum, 1, 7), 7);

                        //Check if the 8th char is an alphabetic
                        if (ret)
                        {
                            ret = this.isAlpha(substr(_vatNum, 8, 1));
                        }
                        else
                        {
                            ret = checkFailed("@SYS113333");
                        }
                    }
                }

                if (islength9)
                {
                    ret = this.validateMod23(_vatNum);
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>