<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class AssetTableMethod
{
    AssetBook                   assetBook;
    AssetDepreciationProfile    assetDepreciationProfile;
    AssetSumCalc_Trans          assetSumCalc_Trans;
    AssetTableInterval          deprInterval;

    AssetAcquisitionValue       assetAcquisitionValue;  // initial value of asset
    AssetTransDate              depreciationDate;       // date for transaction (date dep occured)
    AssetTransDate              baseDate;               // base date for depreciation

    AssetAmount                 amountToDepreciate;
    AssetInterval               currentInterval;        // the interval currently being depreciated

    AssetTransDate              parmRunDate;            // date used to depreciate to
    AssetAmount                 parmPrevDep;            // previously depreciated (used to 'add in' this run's deps)

    AssetTransDate              periodstart;
    AssetTransDate              periodEnd;
    AssetDepreciationTime       restPeriod;             // Used for returning depreciation period to user of class
    AssetAmount                 prevDepAmount;
    AssetAmount                 depreciationThisRun;
    AssetAmount                 prevDepAmountExternal;  // Used if an asset uses two depreciation-profiles.
    AssetBudgetModelId          assetBudgetModelId;

    AssetDepreciationTime       prevPeriods;            // Used if the depreciationStartDate is earlier
    boolean                     calculatePrevPeriods;   // then the first date of acquisition

    AssetTransDate              assetAcquisitionValueDate; // Date on which Acquisitionvalue is calculated.

    boolean                     dualDepreciation;           // Runs as two competing depr. profiles.
    boolean                     depreciationAltProfile;     // Calculate alternative depreciation profile.
    boolean                     depreciationExtProfile;     // Calculate extraordinary depreciation profile.
    boolean                     endPeriod;                  // check for LastPeriod of year.
    boolean                     isEndOfAccountingDepreciation;
    AssetAmount                 basisForLastPeriodDepreciation; // Value used for depreciation convention calculation.
    boolean                     isShortFiscalPeriod;            // check for ShortFiscalPeriod.
    TransDate                   lastDepreciationDate;
    boolean                     isCatchUpDepreciation;
    boolean                     isOriginalDepreciation;
    container                   depAmountPriorYears;
    boolean                     isOtherAdjustment;
    boolean                     isReportingCurrencyDepreciation;
    AssetDepreciationTime       remaningPeriods;

    // <GCN>
    #isoCountryRegionCodes
    // </GCN>
    // <GIN>
    NoYes                       shiftDepreciation;
    NoYes                       singleShift;
    NoYes                       doubleShift;
    NoYes                       tripleShift;
    NoYes                       noneShift = Noyes::Yes;
    NoYes                       days;
    NoYes                       shift;
    AssetSumCalc_Trans_IN       assetSumCalc_GroupTrans;
    boolean                     isDayBasedCalendarEnabled;
    boolean                     isIndiaDepreciationEnabled;
    boolean                     isDisposal;
    boolean                     isAssetFirstYearDepreciation;
    // </GIN>

    // <GEEPL>
    AssetAmount                 prevDepAmountNotCost_PL;
    AssetAmount                 initDepreciationAmount_PL;
    AssetAmount                 prevDepAmountCost_PL;
    boolean                     useFactor_PL;
    // </GEEPL>

    // <GEECZ>
    NoYes halfDepreciation;
    // </GEECZ>

    boolean                     isFirstYearPartialDepreciation;
    boolean                     isFirstPeriodPartialDepreciation;
    boolean                     isProratedDaysCalculation;

    int                         firstYearNumberOfDays;
    int                         firstYearTotalNumberOfDays;
    TransDate                   lastDayOfFirstPeriod;

    boolean                     isIsoJP, isIsoIN, isIsoPL;
    boolean                     assetDocumentEnabled;
    // The asset document that needs to do depreciation. If it is not empty, it means do normal depreciation.
    AssetDocumentEntry_JP       assetDocumentEntry_JP;
    // Accelerated Depreciation
    boolean                     isDepreciationAcceleratedProfile_JP;
    container                   acceleratedEntryContainer_JP;

    // For calculation of allocation for special reserve
    RefRecId                    specialDepReserveRecId;
    RefTableId                  specialDepReserveTableId;
    AssetAmount                 specialDepReserveAmount;
    AssetTransDate              specialDepReserveDate;

    // For over/under depreciation and pre-tax deduction.
    // The owner of allowable limit cache
    anytype                     allowableLimitCacheOwner;
    boolean                     isForPreTaxDeduction_JP;
    LogisticsAddressCountryRegionISOCode isoCountryCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPrevDepAmountCost_PL</Name>
				<Source><![CDATA[
    public void addPrevDepAmountCost_PL(AssetAmount _prevDepAmountCost)
    {
        prevDepAmountCost_PL += _prevDepAmountCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPrevDepAmountExternal</Name>
				<Source><![CDATA[
    public void addPrevDepAmountExternal(AssetAmount _prevDepAmountExternal)
    {
        prevDepAmountExternal += _prevDepAmountExternal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToDepreciate_PL</Name>
				<Source><![CDATA[
    public AssetAmount amountToDepreciate_PL()
    {
        return amountToDepreciate - this.getAmountInCurrency(assetBook.DeprPrevPeriods_PL);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToDepriciateAdjusted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the base amount for depreciation calculation for all available Acquisition Adjustments,
    /// Acquisitions, Capital Reserve Transfers, Revaluations, Write Down Adjustments, and Write Up
    /// Adjustments until a specified date.
    /// </summary>
    /// <param name="_assetTransDate">
    /// A date for which transactions are searched.
    /// </param>
    /// <returns>
    /// The base amount for depreciation calculation.
    /// </returns>
    protected AssetAmount amountToDepriciateAdjusted(AssetTransDate _assetTransDate = periodEnd)
    {
        AssetAmount acquistionAmount = AssetTrans::acquisitionAmount(assetBook.AssetId, dateMax(), assetBook.BookId);
        AssetAmount assetAmount = AssetTrans::amountMSTPerDateTransTypes(
                        assetBook.AssetId,
                        assetBook.BookId,
                        [AssetTransType::Revaluation, AssetTransType::WriteDownAdj, AssetTransType::WriteUpAdj],
                        dateNull(),
                        _assetTransDate);

        // For JP, ARO related amount is always excluded here. They will be added back later if they should be included.
        if (assetDocumentEnabled)
        {
            acquistionAmount -= AssetDepTransMap_JP::calcDocumentTypeAmountToDepreciate(
                AssetDocumentType_JP::AssetRetirementObligation,
                assetBook,
                dateMax(),
                deprInterval);
            // reduction entry direct off
            acquistionAmount += AssetReductionEntryManager_JP::calcReductionEntryAcqAmountByPeriod(assetBook, deprInterval.endPeriod(_assetTransDate)+1, dateMax());

            if (assetDocumentEntry_JP && !AssetDepreciationProfile::isDepMethod_JP(assetDepreciationProfile.Method))
            {
                // For sys standard depreciation methods, add the document amount that needs to be depreciated.
                // For JP depreciation methods, this amount will be added later based on logic.
                acquistionAmount += AssetDepTransMap_JP::calcAmountToDepreciate(
                    assetBook,
                    _assetTransDate,
                    deprInterval,
                    assetDocumentEntry_JP.RecId);
            }
        }

        return (acquistionAmount + assetAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToDepriciateAdjustedReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the base reporting currency amount for depreciation calculation for all available Acquisition Adjustments,
    /// Acquisitions, Capital Reserve Transfers, Revaluations, Write Down Adjustments, and Write Up
    /// Adjustments until a specified date.
    /// </summary>
    /// <param name="_assetTransDate">
    /// A date for which transactions are searched.
    /// </param>
    /// <returns>
    /// The base reporting currency amount for depreciation calculation.
    /// </returns>
    protected AssetAmountReportingCurrency amountToDepriciateAdjustedReportingCurrency(AssetTransDate _assetTransDate = periodEnd)
    {
        AssetAmount acquistionReportingCurrencyAmount = AssetTrans::acquisitionAmountReportingCurrency(assetBook.AssetId, dateMax(), assetBook.BookId);
        AssetAmountReportingCurrency assetAmount = AssetTrans::amountReportingCurrencyPerDateTransTypes(
                        assetBook.AssetId,
                        assetBook.BookId,
                        [AssetTransType::Revaluation, AssetTransType::WriteDownAdj, AssetTransType::WriteUpAdj],
                        dateNull(),
                        _assetTransDate);

        return (acquistionReportingCurrencyAmount + assetAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    // returns the amount to depreciate this interval
    public abstract AssetAmount calc()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the amount to depreciate this interval.
    /// </summary>
    /// <param name="_amountToDepreciate">
    /// The amount to depreciate.
    /// </param>
    /// <returns>
    /// Returns the amount to depreciate this interval.
    /// </returns>
    public  AssetAmount calc_IN(AssetAmount    _amountToDepreciate = 0)
    {
        AssetAmount assetAmount;
        ;

        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAmountForShiftDepreciation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Split the fiscal period which is included different fiscal years, and calculate the depereciation
    /// amount respectively by calling calcDepreciationAmountLoc, the sum of them is the totally depreciation
    /// amount
    /// </summary>
    /// <param name="_assetBook">
    /// An assetBook buffer.
    /// </param>
    /// <param name="_amount">
    /// Amount of the asset.
    /// </param>
    /// <param name="_startDate">
    /// The start date of the depreciation.
    /// </param>
    /// <param name="_endDate">
    /// The end date of the depreciation period.
    /// </param>
    /// <param name="_percentages">
    /// Percentage of depreciation.
    /// </param>
    /// <returns>
    /// Returns the amount that has been depreciated.
    /// </returns>
    protected AssetAmount calcAmountForShiftDepreciation_IN(AssetBook       _assetBook,
                                                            AssetAmount     _amount,
                                                            AssetTransDate  _startDate,
                                                            AssetTransDate  _endDate,
                                                            container       _percentages)
    {
        FiscalCalendarYear                  fiscalCalendarYear;
        FiscalCalendarPeriod                fiscalCalendarPeriod;
        AssetBookShiftDepreciation_IN       assetBookShiftDepreciation;
        AssetShiftDepreciationProfile_IN    assetShiftDepreciationProfile;
        AssetBookTable                      assetBookTable;
        AssetDepreciationPercentage         percentage;
        Days                                periodDays;
        Days                                depreciationDays;
        Days                                remainingDaysPerPeriod;
        AssetAmount                         depreciationAmount;
        AssetAmount                         totalDepreciationAmount;
        FiscalCalendarPeriod_IN             fiscalCalendarPeriod_IN;
        //type of shift
        boolean                             isSingleShift;
        boolean                             isDoubleShift;
        boolean                             isTripleShift;
        // for store last known record
        Days                                workingDays;
        AssetShiftDepreciationProfile_IN    prevAssetShiftDepreciationProfile;
        FiscalCalendarPeriod                prevFiscalCalendarPeriod;
        FiscalCalendarYear                  prevFiscalCalendarYear;

        void storeLastKnownRecord()
        {
            prevAssetShiftDepreciationProfile.data(assetShiftDepreciationProfile);
            prevFiscalCalendarPeriod.data(fiscalCalendarPeriod);
            prevFiscalCalendarYear.data(fiscalCalendarYear);
            workingDays = fiscalCalendarPeriod_IN.Days;
        }

        void calcSingleShiftForRemainingDays()
        {
            if (prevFiscalCalendarPeriod.StartDate != dateNull())
            {
                percentage = prevAssetShiftDepreciationProfile.SingleShiftPercentage;

                if (prevAssetShiftDepreciationProfile.ToDate < prevFiscalCalendarPeriod.EndDate
                    || percentage == 0)
                {
                    percentage = _assetBook.depreciationPercentage();
                }

                depreciationDays = min(_endDate, prevFiscalCalendarPeriod.EndDate)
                                    - max(_startDate, prevFiscalCalendarPeriod.StartDate)
                                    - workingDays
                                    + remainingDaysPerPeriod
                                    + 1 ;

                if (percentage > 0
                    && depreciationDays > 0)
                {
                    periodDays = prevFiscalCalendarYear.EndDate - prevFiscalCalendarYear.StartDate + 1;

                    depreciationAmount  = (_amount * (percentage / 100) * (depreciationDays / periodDays));

                    if (isSingleShift
                        && depreciationAmount > 0)
                    {
                        totalDepreciationAmount +=  depreciationAmount;
                    }
                }
            }
        }

        // depreciation year type in depreciation profile
        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal)
        {
            if (_percentages)
            {
                [isSingleShift, isDoubleShift, isTripleShift] = _percentages;
            }

            // calculation for each shifts for fiscal period/ fiscal yearly
            while select FromDate, ToDate, TypeOfShift, TypeOfIndustry from assetBookShiftDepreciation
                where assetBookShiftDepreciation.BookId            == _assetBook.BookId
                    && assetBookShiftDepreciation.AssetId          == _assetBook.AssetId
                join OverRideCalendarDays_IN, WorkingDays_IN from assetBookTable
                    where assetBookTable.BookId                    == _assetBook.BookId
                join StartDate, EndDate from fiscalCalendarYear
                    where fiscalCalendarYear.FiscalCalendar        == assetBookTable.FiscalCalendar
                        && fiscalCalendarYear.StartDate            <= _startDate
                        && fiscalCalendarYear.EndDate              >= _endDate
                join StartDate, EndDate from fiscalCalendarPeriod
                     where fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId
                        && fiscalCalendarPeriod.Type               == FiscalPeriodType::Operating
                        && !(fiscalCalendarPeriod.StartDate        > _endDate
                            || fiscalCalendarPeriod.EndDate        < _startDate)
                        && !(assetBookShiftDepreciation.FromDate   > fiscalCalendarPeriod.EndDate
                            || (assetBookShiftDepreciation.ToDate  != dateNull()
                                && assetBookShiftDepreciation.ToDate   < fiscalCalendarPeriod.StartDate))
                join Days from fiscalCalendarPeriod_IN
                    order by assetBookShiftDepreciation.FromDate, fiscalCalendarPeriod.StartDate
                    where fiscalCalendarPeriod_IN.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                outer join FromDate, ToDate, SingleShiftPercentage, DoubleShiftPercentage, TripleShiftPercentage from assetShiftDepreciationProfile
                where (!(assetShiftDepreciationProfile.FromDate    > _endDate
                        || assetShiftDepreciationProfile.ToDate    < _startDate)
                    && !(assetShiftDepreciationProfile.FromDate    > assetBookShiftDepreciation.ToDate
                        || assetShiftDepreciationProfile.ToDate    < assetBookShiftDepreciation.FromDate))
                    || (!assetShiftDepreciationProfile.FromDate    && !assetShiftDepreciationProfile.ToDate)
                    || (!assetBookShiftDepreciation.FromDate       && !assetBookShiftDepreciation.ToDate)
                    && assetShiftDepreciationProfile.Profile       == _assetBook.DepreciationProfile

            {
                // check if it is a new period then reset value
                if (fiscalCalendarPeriod.StartDate != prevFiscalCalendarPeriod.StartDate)
                {
                    if (assetDepreciationProfile.Accrual == AssetAccrual::Yearly)
                    {
                        calcSingleShiftForRemainingDays();
                    }

                    remainingDaysPerPeriod = fiscalCalendarPeriod_IN.Days;
                }
                // save into buffer for last known record.
                storeLastKnownRecord();

                if (assetBookShiftDepreciation.TypeOfShift == TypeOfShift_IN::None)
                {
                    // update the remaining days of a period.
                    remainingDaysPerPeriod -= this.getDaysForShiftDepreciation_IN(_startDate, _endDate, fiscalCalendarPeriod, assetBookShiftDepreciation, assetShiftDepreciationProfile);
                    remainingDaysPerPeriod = max(0, remainingDaysPerPeriod);

                    // do nothing and move to next record
                    continue;
                }

                percentage = this.getPercentageForShiftDepreciation_IN(assetBookShiftDepreciation, assetShiftDepreciationProfile, _percentages);
                // single shift
                if (isSingleShift
                    && percentage < 1
                    && assetBookShiftDepreciation.TypeOfShift == TypeOfShift_IN::SingleShift)
                {
                    percentage = _assetBook.depreciationPercentage();
                }

                depreciationDays = this.getDaysForShiftDepreciation_IN(_startDate, _endDate, fiscalCalendarPeriod, assetBookShiftDepreciation, assetShiftDepreciationProfile);

                // double shift/triple shift
                if (assetBookShiftDepreciation.TypeOfShift == TypeOfShift_IN::DoubleShift
                    || assetBookShiftDepreciation.TypeOfShift == TypeOfShift_IN::TripleShift)
                {
                    if (fiscalCalendarPeriod_IN.Days < depreciationDays)
                    {
                        depreciationDays = fiscalCalendarPeriod_IN.Days;
                    }
                }

                // update the actual number of days with remaining day.
                if (remainingDaysPerPeriod > 0
                    && remainingDaysPerPeriod < depreciationDays)
                {
                    depreciationDays = remainingDaysPerPeriod;
                }
                else if (remainingDaysPerPeriod <= 0)
                {
                    depreciationDays = 0;
                }

                if (percentage > 0
                    && depreciationDays > 0)
                {
                    periodDays = this.getPeriodDaysForShiftDepreciation_IN(
                                    assetBookTable,
                                    assetBookShiftDepreciation,
                                    fiscalCalendarYear);

                    depreciationAmount  = (_amount * (percentage / 100) * (depreciationDays / periodDays));

                    totalDepreciationAmount +=  depreciationAmount;
                }

                // update the remaining days of a period.
                remainingDaysPerPeriod -= depreciationDays;
                // maintain not to be negative value.
                remainingDaysPerPeriod = max(0, remainingDaysPerPeriod);
                // reset value
                depreciationDays = 0;
            }
            // Calculate single shift for remain days.
            calcSingleShiftForRemainingDays();
        }
        return totalDepreciationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQty</Name>
				<Source><![CDATA[
    // returns the quantity depreciate - only for consumption depreciation
    public AssetConsumptionQty calcQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    protected void calcRestPeriod(AssetTransDate _startOfPeriod)
    {
        int periodLength;

        if (isFirstYearPartialDepreciation
            && isProratedDaysCalculation
            && (assetDepreciationProfile.Method == AssetDepreciationMethod::StraightLineLifeRemaining
            || assetDepreciationProfile.Method == AssetDepreciationMethod::StraightLine
            || AssetDepreciationProfile::isReducingBalanceDepreciationMethod(assetDepreciationProfile.Method)))
        {
            this.calcRestPeriodProrated();
        }
        else
        {
            periodLength = periodEnd - _startOfPeriod + 1;

            // Check for division by zero.
            Debug::assert(periodLength != 0);

            if (periodEnd && periodstart && _startOfPeriod && periodLength != 0)
            {
                // <GIN>
                if (isIsoIN &&
                AssetParameters::checkAssetParameters_IN()&&
                (AssetBookTable::find(assetBook.BookId).CurrentOperationsTax == CurrentOperationsTax::Tax) &&
                assetBook.AssetGroupDepreciation_IN &&
                (AssetParameters::find().DepreciationThreshold_IN  > (periodEnd - periodstart +1)))
                {
                    restPeriod  = AssetParameters::find().ThresholdPercentage_IN / 100;
                }
                else
                {
                // </GIN>
                    restPeriod = ((periodEnd - periodstart + 1) / periodLength);

                // <GIN>
                }
                // </GIN>
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriodProrated</Name>
				<Source><![CDATA[
    private void calcRestPeriodProrated()
    {
        AssetTransDate endOfFirstPeriodDate;
        real firstYearPeriodsNumber;
        real firstPeriodDaysRatio;
        int numberOfPeriods;

        endOfFirstPeriodDate = deprInterval.endPeriod(assetBook.UsedFromDate);

        // Determine the total number of depreciation periods used in a given year.
        if (firstYearTotalNumberOfDays)
        {
            firstYearPeriodsNumber = (firstYearNumberOfDays / firstYearTotalNumberOfDays) * deprInterval.assetDepreciationTime(assetBook.UsedFromDate);
        }

        // If the first period has partial depreciation, subtract the partial amount from the first periods
        // and calculate the remaining depreciation amounts.
        if (isFirstPeriodPartialDepreciation)
        {
            firstPeriodDaysRatio = this.getParialPeriodDaysRatio(assetBook.UsedFromDate, endOfFirstPeriodDate);
            restPeriod = firstYearPeriodsNumber * firstPeriodDaysRatio;

            if (deprInterval.indexofPeriod(assetBook.UsedFromDate) != deprInterval.indexofPeriod(periodstart))
            {
                firstYearPeriodsNumber = firstYearPeriodsNumber - restPeriod;
                numberOfPeriods = deprInterval.numOfPeriodsLeftInYear(endOfFirstPeriodDate + 1);
                if (numberOfPeriods)
                {
                    restPeriod = firstYearPeriodsNumber / numberOfPeriods;
                }
            }
        }
        else
        {
            numberOfPeriods = deprInterval.numOfPeriodsLeftInYear(assetBook.UsedFromDate);
            if (numberOfPeriods)
            {
                restPeriod = firstYearPeriodsNumber / numberOfPeriods;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePartialYearPeriodAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the amount of annual depreciation if only a part of the year is used in the first depreciation year.
    /// </summary>
    /// <param name="_depreciationDate">
    /// The date of depreciation.
    /// </param>
    /// <param name="_annualAssetAmount">
    /// The total amount of the annual depreciation.
    /// </param>
    /// <returns>
    /// The adjusted depreciation amount.
    /// </returns>
    public AssetAmount calculatePartialYearPeriodAmount(
        TransDate _depreciationDate,
        AssetAmount _annualAssetAmount)
    {
        AssetAmount returnValue;

        if (isFirstPeriodPartialDepreciation
            && deprInterval.indexofPeriod(_depreciationDate) == deprInterval.indexofPeriod(assetBook.UsedFromDate))
        {
            returnValue = this.getFirstYearPartialPeriodAmount(_annualAssetAmount);
        }
        else
        {
            returnValue = this.getFirstYearRemainPeriodAmount(_annualAssetAmount);
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depDate</Name>
				<Source><![CDATA[
    public AssetTransDate depDate()
    {
        return depreciationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depPeriod</Name>
				<Source><![CDATA[
    public real depPeriod()
    {
        return restPeriod + prevPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTableInterval_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current in used instance of <C>AssetTableInterval</C> sub class.
    /// </summary>
    /// <returns>
    /// The current in used instance of <C>AssetTableInterval</C> sub class.
    /// </returns>
    public AssetTableInterval getAssetTableInterval_JP()
    {
        return deprInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDaysForShiftDepreciation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return number of days that an industry works for.
    /// </summary>
    /// <param name="_startDate">
    /// Start date of the period.
    /// </param>
    /// <param name="_endDate">
    /// End date of the period.
    /// </param>
    /// <param name="_fiscalCalendarPeriod">
    /// An <c>FiscalCalendarPeriod</c> table record.
    /// </param>
    /// <param name="_valueModel">
    /// The value model of the asset.
    /// </param>
    /// <param name="_assetShiftDepreciationProfile">
    /// An <c>AssetShiftDepreciationProfile_IN</c> table record.
    /// </param>
    /// <returns>
    /// Return number of days that an industry works for.
    /// </returns>
    protected Days getDaysForShiftDepreciation_IN(AssetTransDate                    _startDate,
                                                  AssetTransDate                    _endDate,
                                                  FiscalCalendarPeriod              _fiscalCalendarPeriod,
                                                  AssetBookShiftDepreciation_IN     _valueModel,
                                                  AssetShiftDepreciationProfile_IN  _assetShiftDepreciationProfile)
    {
        AssetTransDate  fromDate;
        AssetTransDate  toDate;

        if (_assetShiftDepreciationProfile.ToDate == dateNull())
        {
            if (_valueModel.ToDate == dateNull())
            {
                // valueModel.FromDate and valueModel.ToDate will be dataNull at the same time
                fromDate = max(_startDate, _fiscalCalendarPeriod.StartDate);
                toDate   = min(_endDate, _fiscalCalendarPeriod.EndDate);
            }
            else
            {
                fromDate = max(_startDate, _fiscalCalendarPeriod.StartDate, _valueModel.FromDate);
                toDate   = min(_endDate, _fiscalCalendarPeriod.EndDate, _valueModel.ToDate);
            }
        }
        else
        {
            if (_valueModel.ToDate == dateNull())
            {
                // valueModel.FromDate and valueModel.ToDate will be dataNull at the same time
                fromDate = max(_startDate, _fiscalCalendarPeriod.StartDate, _assetShiftDepreciationProfile.FromDate);
                toDate   = min(_endDate, _fiscalCalendarPeriod.EndDate, _assetShiftDepreciationProfile.ToDate);
            }
            else
            {
                fromDate = max(_startDate, _fiscalCalendarPeriod.StartDate, _valueModel.FromDate, _assetShiftDepreciationProfile.FromDate);
                toDate   = min(_endDate, _fiscalCalendarPeriod.EndDate, _valueModel.ToDate, _assetShiftDepreciationProfile.ToDate);
            }
        }

        return max(0, toDate - fromDate + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstPartialPeriodRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the ratio of days in the first period of the asset in first year of depreciation versus the total number of days
    /// if the period is only a portion of a full period.
    /// </summary>
    /// <returns>
    /// The ratio of days of the depreciation.
    /// </returns>
    protected real getFirstPartialPeriodRatio()
    {
        real returnValue;

        if (firstYearTotalNumberOfDays)
        {
            returnValue = (lastDayOfFirstPeriod - assetBook.UsedFromDate + 1)
                / firstYearTotalNumberOfDays;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstYearPartialPeriodAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount of the first depreciation period if the period is only a portion of a full period.
    /// </summary>
    /// <param name="_annualAssetAmount">
    /// The annual amount allocated for the given year.
    /// </param>
    /// <returns>
    /// The depreciation amount calculated for the period.
    /// </returns>
    private AssetAmount getFirstYearPartialPeriodAmount(AssetAmount _annualAssetAmount)
    {
        AssetAmount partialAmount;

        partialAmount = _annualAssetAmount
                * this.getFirstPartialPeriodRatio();

        return partialAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstYearRemainPeriodAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the depreciation amount for the periods following the first partial period.
    /// </summary>
    /// <param name="_annualAssetAmount">
    /// The annual amount allocated for the given year.
    /// </param>
    /// <returns>
    /// The depreciation amount for a given period.
    /// </returns>
    private AssetAmount getFirstYearRemainPeriodAmount(AssetAmount _annualAssetAmount)
    {
        AssetAmount returnValue;
        TransDate startDate;

        // Determine the total amount allowed from Place of Service date until the end of the year.
        if (firstYearTotalNumberOfDays)
        {
            returnValue = _annualAssetAmount * (firstYearNumberOfDays / firstYearTotalNumberOfDays);
        }

        // If the first month has partial depreciation, subtract the partial amount from the first periods
        // and calculate the remaining depreciation amounts.
        if (isFirstPeriodPartialDepreciation)
        {
            returnValue -= this.getFirstYearPartialPeriodAmount(_annualAssetAmount);
            startDate = deprInterval.endPeriod(assetBook.UsedFromDate) + 1;
        }
        else
        {
            startDate = assetBook.UsedFromDate;
        }

        var numOfPeriodsLeftInYear = deprInterval.numOfPeriodsLeftInYear(startDate);
        if (numOfPeriodsLeftInYear)
        {
            returnValue = returnValue / numOfPeriodsLeftInYear;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParialPeriodDaysRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the ratio of days in the first period of the asset in first year of depreciation versus
    /// only the days used in the given year, if the period is only a portion of a full period.
    /// </summary>
    /// <param name="_startPariodDate">
    /// The start date of the period.
    /// </param>
    /// <param name="_endPeriodDate">
    /// The end date of the period.
    /// </param>
    /// <returns>
    /// The ratio of days of the depreciation.
    /// </returns>
    protected real getParialPeriodDaysRatio(AssetTransDate _startPariodDate, AssetTransDate _endPeriodDate)
    {
        real returValue;

        if (firstYearNumberOfDays)
        {
            returValue = (_endPeriodDate - _startPariodDate + 1)
                / firstYearNumberOfDays;
        }

        return returValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPercentageForShiftDepreciation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the depreciation percentage for a value model.
    /// </summary>
    /// <param name="_valueModel">
    /// The value model to search for.
    /// </param>
    /// <param name="_depreciationProfile">
    /// The depreciation profile to search for.
    /// </param>
    /// <param name="_percentages">
    /// Container containing percentage for each shift.
    /// </param>
    /// <returns>
    /// Return the depreciation percentage for a value model.
    /// </returns>
    protected AssetDepreciationPercentage getPercentageForShiftDepreciation_IN(AssetBookShiftDepreciation_IN     _valueModel,
                                                                               AssetShiftDepreciationProfile_IN  _depreciationProfile,
                                                                               container                         _percentages)
    {
        AssetDepreciationPercentage     percentage;

        switch (_valueModel.TypeOfShift)
        {
            case TypeOfShift_IN::SingleShift:
                if (conPeek(_percentages,1) == NoYes::Yes)
                {
                    percentage = _depreciationProfile.SingleShiftPercentage;
                }
                else
                {
                    percentage = 0.00;
                    this.parmShift_IN(NoYes::No);
                }
                break;

            case TypeOfShift_IN::DoubleShift:
                if (conPeek(_percentages,2) == NoYes::Yes)
                {
                    percentage = _depreciationProfile.DoubleShiftPercentage;
                }
                else
                {
                    percentage = 0.00;
                    this.parmShift_IN(NoYes::No);
                }
                break;

            case TypeOfShift_IN::TripleShift:
                if (conPeek(_percentages,3) == NoYes::Yes)
                {
                    percentage = _depreciationProfile.TripleShiftPercentage;
                }
                else
                {
                    percentage = 0.00;
                    this.parmShift_IN(NoYes::No);
                }
                break;

            default:
                percentage = 0.00;
                this.parmShift_IN(NoYes::No);
                break;
        }
        return percentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodDaysForShiftDepreciation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return number of days that an industry works for.
    /// </summary>
    /// <param name="_assetBookTable">
    /// An <c>AssetBookTable</c> table record.
    /// </param>
    /// <param name="_valueModel">
    /// The value model of the asset.
    /// </param>
    /// <param name="_fiscalCalendarYear">
    /// An <c>FiscalCalendarYear</c> table record.
    /// </param>
    /// <returns>
    /// Return number of days that an industry works for.
    /// </returns>
    protected Days getPeriodDaysForShiftDepreciation_IN(AssetBookTable                 _assetBookTable,
                                                        AssetBookShiftDepreciation_IN  _valueModel,
                                                        FiscalCalendarYear             _fiscalCalendarYear)
    {
        Days                      periodDays;
        AssetParameters           assetParameters;

        if (_valueModel.TypeOfShift == TypeOfShift_IN::SingleShift)
        {
            periodDays = _fiscalCalendarYear.EndDate - _fiscalCalendarYear.StartDate + 1;
        }
        else
        {
            // double shift && triple shift
            if (_assetBookTable.OverRideCalendarDays_IN == NoYes::Yes)
            {
                periodDays = _assetBookTable.WorkingDays_IN;
            }
            else
            {
                periodDays = FiscalCalendarPeriod_IN::getTotalDaysInCalendarYear(_fiscalCalendarYear.recId);
            }

            assetParameters = AssetParameters::find();

            // Seasonal && non seasonal
            if (_valueModel.TypeOfIndustry == TypeOfIndustry_IN::NonSeasonal
                && periodDays < assetParameters.MinNonSeasonalWorkingDays_IN)
            {
                periodDays = assetParameters.MinNonSeasonalWorkingDays_IN;
            }
            else if (_valueModel.TypeOfIndustry == TypeOfIndustry_IN::Seasonal
                     && periodDays < assetParameters.MinSeasonalWorkingDays_IN)
            {
                periodDays = assetParameters.MinSeasonalWorkingDays_IN;
            }
        }

        return periodDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency code for the fixed asset amounts.
    /// </summary>
    /// <returns>
    /// A <c>CurrencyCode</c> value.
    /// </returns>
    protected CurrencyCode getCurrencyCode()
    {
        // Amounts in Fixed Assets are always in accounting currency or reporting currency.
        return isReportingCurrencyDepreciation ? Ledger::reportingCurrency() : Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineBaseDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the base date.
    /// </summary>
    protected void determineBaseDate()
    {
        if (depreciationExtProfile)
        {
            // <GJP>
            if (isIsoJP && assetDepreciationProfile.Method == AssetDepreciationMethod::AdditionalDepreciation_JP)
            {
                baseDate = assetBook.LastDepreciationDateExtraOrd ? assetBook.LastDepreciationDateExtraOrd :
                    (assetBook.SpecialDepStartDate_JP ? assetBook.SpecialDepStartDate_JP - 1 : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - 1);
            }
            else
            {
                // </GJP>
                baseDate = assetBook.LastDepreciationDateExtraOrd ? assetBook.LastDepreciationDateExtraOrd : (assetBook.DepreciationStartDate-1);
                // <GJP>
            }
            // </GJP>
        }
        // <GJP>
        else if (isDepreciationAcceleratedProfile_JP)
        {
            baseDate = assetBook.LastDepreciationDateAccelerated_JP ? assetBook.LastDepreciationDateAccelerated_JP : (assetBook.DepreciationStartDate-1);
        }
        // </GJP>
        else
        {
            baseDate = assetBook.LastDepreciationDate ? assetBook.LastDepreciationDate : (assetBook.DepreciationStartDate-1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize default values for the <c>AssetTableMethod</c> class.
    /// </summary>      
    public void initialize()
    {
        // <GIN>
        if (assetBook.AssetGroupDepreciation_IN
            && AssetParameters::isDepreciationIncomeTaxActEnable_IN())
        {
            assetSumCalc_GroupTrans = AssetSumCalc_Trans_IN::newAssetYear(assetBook.AssetGroup, assetBook.BookId);
        }
        else
        {
            // </GIN>
            if (isReportingCurrencyDepreciation)
            {
                assetSumCalc_Trans = AssetSumCalc_Trans::newAssetYearByCurrency(assetBook.AssetId,
                                                                            assetBook.BookId,
                                                                            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                            AssetYear::All,
                                                                            AssetSumCalcType::Reporting);
            }
            else
            {
                assetSumCalc_Trans = AssetSumCalc_Trans::newAssetYear(assetBook.AssetId, assetBook.BookId);
            }

            // <GIN>
        }
        // </GIN>

        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>AssetTableMethod</c> class.
    /// </summary>
    protected void init()
    {
        AssetBookTable              assetBookTable = AssetBookTable::find(assetBook.BookId);
        AssetDepreciationProfile    depreciationProfile;

        isProratedDaysCalculation =  AssetParameters::find().IsProratedDepreciation;

        isIsoIN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        isIsoPL = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);
        isIsoJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);

        if (isIsoJP)
        {
            assetDocumentEnabled = AssetDocumentUtility_JP::isAssetDocumentEnabled();
        }

        this.determineBaseDate();

        if (AssetParameters::isManuallyChangeDepProfileEnable_JP())
        {
            depreciationProfile = assetBook.AssetDepBookMap_JP::depreciationProfileOnDate(assetBook.LastDepreciationDate+1);
        }
        else
        {
            depreciationProfile = assetBook.depreciationProfile();
        }
        if (isIsoJP
            && !depreciationExtProfile
            && !isDepreciationAcceleratedProfile_JP
            && AssetDepreciationProfile::isDepMethodAllowChangeCalendar_JP(assetBook.depreciationProfile().Method))
        {
            deprInterval = AssetTableIntervalExt_JP::constructFromCalendarSchedule(
                depreciationProfile,
                assetBookTable.TableId,
                assetBookTable.RecId);
        }
	    else if (isDepreciationAcceleratedProfile_JP)
	    {
	        deprInterval = AssetTableIntervalExt_JP::constructFromCalendarSchedule(
	            assetBook.depreciationAcceleratedProfile_JP(),
	            assetBookTable.TableId,
	            assetBookTable.RecId);
        }
        else
        {
            deprInterval = depreciationExtProfile ? AssetTableInterval::construct(
                assetBook.depreciationExtProfile(), assetBookTable.FiscalCalendar):
                                                        AssetTableInterval::construct(
                depreciationProfile, assetBookTable.FiscalCalendar);
        }

        if (depreciationAltProfile)
        {
            assetDepreciationProfile = assetBook.depreciationAltProfile();
        }
        else if (depreciationExtProfile)
        {
            assetDepreciationProfile = assetBook.depreciationExtProfile();
        }
        else if (isDepreciationAcceleratedProfile_JP)
        {
            assetDepreciationProfile = assetBook.depreciationAcceleratedProfile_JP();
        }
        else
        {
            assetDepreciationProfile = depreciationProfile;
        }

        if (assetBook.AssetGroupDepreciation_IN
            && AssetParameters::isDepreciationIncomeTaxActEnable_IN())
        {
            assetAcquisitionValue   = assetSumCalc_GroupTrans.acquisitionValue();

            prevDepAmount           = -(assetSumCalc_GroupTrans.depreciationValue() +
                                        assetSumCalc_GroupTrans.depreciationAdjValue());

            amountToDepreciate      = (assetSumCalc_GroupTrans.netBookValue() - assetBook.ScrapValue);
        }
        else
        {
            assetAcquisitionValue   = assetSumCalc_Trans.acquisitionValue();

            prevDepAmount           = -(assetSumCalc_Trans.depreciationValue() +
                                    assetSumCalc_Trans.depreciationAdjValue() +
                                    (isIsoPL ? assetSumCalc_Trans.openingAccumulatedDepreciation_PL() + assetSumCalc_Trans.postOffAccDepreciation_PL() : 0));

            if (isReportingCurrencyDepreciation)
            {
                amountToDepreciate      = (assetSumCalc_Trans.netBookValue() - assetBook.ScrapValueReportingCurrency);                
            }
            else
            {
                amountToDepreciate      = (assetSumCalc_Trans.netBookValue() - assetBook.ScrapValue);
            }
        }
        if (depreciationExtProfile)
        {
	        if (isIsoJP && assetDepreciationProfile.Method == AssetDepreciationMethod::AdditionalDepreciation_JP)
	        {
	            if (assetbook.SpecialDepStartDate_JP || assetbook.LastDepreciationDateExtraOrd)
	            {
	                periodstart = max(assetbook.SpecialDepStartDate_JP, assetbook.LastDepreciationDateExtraOrd + 1);
	                periodEnd   = deprInterval.endPeriod(periodstart);
	            }
	            else
	            {
	                periodstart = assetbook.SpecialDepStartDate_JP ? assetbook.SpecialDepStartDate_JP : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
	                periodEnd   = deprInterval.endPeriod(periodstart);
	            }
	        }
	        else
	        {
            if (assetBook.LastDepreciationDateExtraOrd)
            {
                periodstart = assetBook.LastDepreciationDateExtraOrd + 1;
                periodEnd   = deprInterval.endPeriod(assetBook.LastDepreciationDateExtraOrd + 1);
            }
                else
                {
                    periodstart = assetBook.DepreciationStartDate;
                    periodEnd   = deprInterval.endPeriod(assetBook.DepreciationStartDate);
                }
            }
        }
        else if (isDepreciationAcceleratedProfile_JP)
        {
            if (assetBook.LastDepreciationDateAccelerated_JP)
            {
                periodstart = assetBook.LastDepreciationDateAccelerated_JP + 1;
                periodEnd   = deprInterval.endPeriod(assetBook.LastDepreciationDateAccelerated_JP + 1);
            }
            else
            {
                periodstart = assetBook.DepreciationStartDate;
                periodEnd   = deprInterval.endPeriod(assetBook.DepreciationStartDate);
            }
        }
        else
        {
            if (assetBook.LastDepreciationDate)
            {
                periodstart = assetBook.LastDepreciationDate + 1;
                periodEnd   = deprInterval.endPeriod(assetBook.LastDepreciationDate + 1);
            }
            else
            {
                periodstart = assetBook.DepreciationStartDate;

                // For the Half year (Start and Next year) conventions, the first period of depreciation
                // in which the amounts will be considered for calculation, can be after the Depreciation Start Date period,
                // even though, the calculation will use that date as the beginning of depreciation.
                if (assetBook.DepreciationConvention == AssetDepreciationConvention::HalfYearStart
                    || assetBook.DepreciationConvention == AssetDepreciationConvention::HalfYearNext)
                {
                    AssetTransDate checkTransDate = deprInterval.startOfPeriod(assetBook.UsedFromDate);
                    if (checkTransDate >= assetBook.DepreciationStartDate)
                    {
                        periodstart = checkTransDate;
                    }
                }

                periodEnd   = deprInterval.endPeriod(periodstart);
            }
        }

        if (assetBudgetModelId)
        {
            if (!assetAcquisitionValue)
            {
                assetAcquisitionValue   = AssetSumCalc_Budget::newAssetYear(assetBook.AssetId,assetBook.BookId, assetBudgetModelId,assetAcquisitionValueDate,AssetYear::All).acquisitionValue();
                amountToDepreciate      = assetAcquisitionValue - assetBook.ScrapValue;

                AssetBudget assetBudget;

                select firstonly assetBudget
                 where assetBudget.BudgetModel == assetBudgetModelId
                    && assetBudget.AssetId     == assetBook.AssetId
                    && assetBudget.BookId      == assetBook.BookId
                    && assetBudget.TransType   == AssetTransType::Acquisition;

                if (assetBudget)
                {
                    // If the book has not been acquired but budget acquisition transactions are posted for it,
                    // update the acquisition dates based on the budget acquisition transaction.
                    // The change is modified on the buffer, and it is not committed to the database.
                    if (assetBook.Status == AssetStatus::NoAcquisition
                        && assetBudget.TransDate > assetBook.AcquisitionDate)
                    {
                        assetBook.AcquisitionDate = assetBudget.TransDate;
                        assetBook.UsedFromDate = assetBudget.TransDate;
                        assetBook.calcDepreciationStartDate();
                    }

                    periodstart = this.getStartPeriodForAssetBudget(assetBudget);
                    periodEnd = this.getEndPeriodForAssetBudget(assetBudget);
                }
            }
        }
        else
        {
            if (!AssetStatusType::construct(assetBook.Status).isAcquired())
            {
                if (isReportingCurrencyDepreciation)
                {
                    assetAcquisitionValue   = assetBook.AcquisitionPriceReportingCurrency;
                    amountToDepreciate      = assetAcquisitionValue - assetBook.ScrapValueReportingCurrency;
                }
                else
                {
                    assetAcquisitionValue   = assetBook.AcquisitionPrice;
                    amountToDepreciate      = assetAcquisitionValue - assetBook.ScrapValue;
                }
                if (isIsoPL)
                {
                    prevDepAmount += this.getAmountInCurrency(assetBook.DeprPrevPeriods_PL);
                }
            }
        }

        if (assetBook.RevaluationGroupId)
        {
            AssetTrans assetTrans;

            select sum(AmountCur) from assetTrans
                where assetTrans.AssetId == assetBook.AssetId
                    && assetTrans.BookId == assetBook.BookId
                    && assetTrans.RevaluationTrans == NoYes::Yes;

            amountToDepreciate -= assetTrans.AmountCur;
            amountToDepreciate += assetSumCalc_Trans.depreciationRevaluationValue();

            prevDepAmount -= assetSumCalc_Trans.depreciationRevaluationValue();
        }

        if (isIsoPL)
        {
            initDepreciationAmount_PL = prevDepAmount;
        }
        calculatePrevPeriods = true;

        // No depreciation before last/first date
        if (parmRunDate < baseDate)
        {
            currentInterval = 1;
            return;
        }

        if (AssetParameters::checkAssetParameters_IN())
        {
            isIndiaDepreciationEnabled  = true;
            isDayBasedCalendarEnabled   = (FiscalCalendar_IN::findByFiscalCalendar(assetBookTable.getFiscalCalendar()).CalendarType == CalendarType_IN::DayBased)
                                                            ? true : false;

            shiftDepreciation = (depreciationProfile.isShiftDepreciationMethod_IN()
                                    && depreciationProfile.ShiftDepreciation_IN);

            if (isDayBasedCalendarEnabled
                && assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal)
            {
                isProratedDaysCalculation = false;
            }
        }

        if (assetBook.DepreciationConvention == AssetDepreciationConvention::None
            && deprInterval
            && (deprInterval is AssetTableInterval_Calendar
                || deprInterval is AssetTableInterval_Fiscal)
            && assetDepreciationProfile.Accrual != AssetAccrual::Daily
            && assetBook.ServiceLife >= 1
            && assetBook.UsedFromDate
            && (assetDepreciationProfile.Accrual != AssetAccrual::Yearly
            || !isProratedDaysCalculation))
        {
            var firstDayOfYear = deprInterval.findFirstDayOfYear(assetBook.UsedFromDate);
            isFirstYearPartialDepreciation = firstDayOfYear != assetBook.UsedFromDate;

            if (isFirstYearPartialDepreciation)
            {
                isFirstPeriodPartialDepreciation = deprInterval.startOfPeriod(assetBook.UsedFromDate) != assetBook.UsedFromDate;

                if (isProratedDaysCalculation)
                {
                    var lastDayOfYear = deprInterval.findLastDayOfYear(assetBook.UsedFromDate);
                    firstYearNumberOfDays = lastDayOfYear - assetBook.UsedFromDate + 1;
                    firstYearTotalNumberOfDays = lastDayOfYear - firstDayOfYear + 1;
                }

                lastDayOfFirstPeriod = deprInterval.endPeriod(assetBook.UsedFromDate);
            }
        }

        isoCountryCode = SysCountryRegionCode::partyCountryInfo(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartPeriodForAssetBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the starting period from <c>AssetBudget</c>.
    /// </summary>
    /// <param name="_assetBudget">
    /// The <c>AssetBudget</c> table.
    /// <returns>
    /// The start of period.
    /// </returns>
    [Wrappable(true)]
    protected final AssetTransDate getStartPeriodForAssetBudget(AssetBudget _assetBudget)
    {
        return deprInterval.startOfPeriod(_assetBudget.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndPeriodForAssetBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ending period from <c>AssetBudget</c>.
    /// </summary>
    /// <param name="_assetBudget">
    /// The <c>AssetBudget</c> table.
    /// <returns>
    /// The end of period.
    /// </returns>
    [Wrappable(true)]
    protected final AssetTransDate getEndPeriodForAssetBudget(AssetBudget _assetBudget)
    {
        return deprInterval.endPeriod(_assetBudget.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>AssetTableMethod</c> class.
    /// </summary>
    /// <param name="_assetBook">
    /// The asset book.
    /// </param>
    /// <param name="_assetTransDate">
    /// The date of the asset transaction.
    /// </param>
    /// <param name="_dualDepreciation">
    /// A Boolean value that indicates whether there is dual depreciation.
    /// </param>
    /// <param name="_depreciationAltProfile">
    /// A Boolean value that indicates whether there is another depreciation profile.
    /// </param>
    /// <param name="_depreciationExtProfile">
    /// A Boolean value that indicates whether there is an extended depreciation profile.
    /// </param>
    /// <param name="_assetBudgetModelId">
    /// The ID of the asset budget mode.
    /// </param>
    public void new(AssetBook           _assetBook,
                AssetTransDate      _assetTransDate,
                boolean             _dualDepreciation,
                boolean             _depreciationAltProfile,
                boolean             _depreciationExtProfile,
                AssetBudgetModelId  _assetBudgetModelId = '')

    {
        assetBook               = _assetBook;
        parmRunDate             = _assetTransDate;
        depreciationAltProfile  = _depreciationAltProfile;
        dualDepreciation        = _dualDepreciation;
        depreciationExtProfile  = _depreciationExtProfile;
        assetBudgetModelId      = _assetBudgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next()
    {
        if (parmRunDate <= baseDate)
            return false;

        currentInterval++;

        if (currentInterval > assetBook.LifeTimeRest)
        {
            return false;
        }

        this.setDepDate();

    //
    //  This prevents depreciations with invalid dates from
    //  being handled.
    //
        if (!depreciationDate ||
            depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>oneTimeDepreciation_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a value if the one time depreciation needs to be applied.
    /// </summary>
    /// <returns>
    /// True if One Time Depreciation needs to be applied, otherwise false.
    /// </returns>
    /// <remarks>
    /// As a default value, one time depreciation is not enabled.
    /// Only Polish Straight Line Percentage deprecation methos is allowed to have this functionality
    /// if all the conditions for this depreciation is satisfied.
    /// </remarks>
    public boolean oneTimeDepreciation_PL()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAcceleratedEntryContainer_JP</Name>
				<Source><![CDATA[
    public container parmAcceleratedEntryContainer_JP(container _acceleratedEntryContainer_JP = acceleratedEntryContainer_JP)
    {
        acceleratedEntryContainer_JP = _acceleratedEntryContainer_JP;
        return acceleratedEntryContainer_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowableLimitCacheOwner_JP</Name>
				<Source><![CDATA[
    public anytype parmAllowableLimitCacheOwner_JP(anytype _allowableLimitCacheOwner = allowableLimitCacheOwner)
    {
        allowableLimitCacheOwner = _allowableLimitCacheOwner;
        return allowableLimitCacheOwner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountToDepreciate</Name>
				<Source><![CDATA[
    public AssetAmount parmAmountToDepreciate(AssetAmount _amountToDepreciate = amountToDepreciate)
    {
        amountToDepreciate = _amountToDepreciate;

        return amountToDepreciate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDocumentEntry_JP</Name>
				<Source><![CDATA[
    public AssetDocumentEntry_JP parmAssetDocumentEntry_JP(AssetDocumentEntry_JP _assetDocumentEntry_JP = assetDocumentEntry_JP)
    {
        assetDocumentEntry_JP = _assetDocumentEntry_JP;
        return assetDocumentEntry_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDays_IN</Name>
				<Source><![CDATA[
    public NoYes parmDays_IN(NoYes    _days = days)
    {
        days = _days;
        return days;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDepAmountPriorYears</Name>
				<Source><![CDATA[
    public container parmDepAmountPriorYears(container _depAmountPriorYears = depAmountPriorYears)
    {
        depAmountPriorYears = _depAmountPriorYears;

        return depAmountPriorYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoubleShift_IN</Name>
				<Source><![CDATA[
    public NoYes parmDoubleShift_IN(NoYes    _doubleShift = doubleShift)
    {
        doubleShift = _doubleShift;
        return doubleShift;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHalfDepreciation_CZ</Name>
				<Source><![CDATA[
    public NoYes parmHalfDepreciation_CZ(NoYes _halfDepreciation = halfDepreciation)
    {
        halfDepreciation = _halfDepreciation;
        return halfDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCatchUpDepreciation</Name>
				<Source><![CDATA[
    public boolean parmIsCatchUpDepreciation(boolean _isCatchUpDepreciation = isCatchUpDepreciation)
    {
        isCatchUpDepreciation = _isCatchUpDepreciation;

        return isCatchUpDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDepreciationAcceleratedProfile_JP</Name>
				<Source><![CDATA[
    public boolean parmIsDepreciationAcceleratedProfile_JP(boolean _isDepreciationAcceleratedProfile_JP = isDepreciationAcceleratedProfile_JP)
    {
        isDepreciationAcceleratedProfile_JP = _isDepreciationAcceleratedProfile_JP;
        return isDepreciationAcceleratedProfile_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsForPreTaxDeduction_JP</Name>
				<Source><![CDATA[
    public boolean parmIsForPreTaxDeduction_JP(boolean _isForPreTaxDeduction_JP = isForPreTaxDeduction_JP)
    {
        isForPreTaxDeduction_JP = _isForPreTaxDeduction_JP;
        return isForPreTaxDeduction_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsEndPeriod</Name>
				<Source><![CDATA[
    public boolean parmIsEndPeriod(boolean _endPeriod = endPeriod)
    {
        endPeriod = _endPeriod;
        return endPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsOriginalDepreciation</Name>
				<Source><![CDATA[
    public boolean parmIsOriginalDepreciation(boolean _isOriginalDepreciation = isOriginalDepreciation)
    {
        isOriginalDepreciation = _isOriginalDepreciation;

        return isOriginalDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsOtherAdjustments</Name>
				<Source><![CDATA[
    public boolean parmIsOtherAdjustments(boolean _isOtherAdjustment = isOtherAdjustment)
    {
        isOtherAdjustment = _isOtherAdjustment;

        return isOtherAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodEnd</Name>
				<Source><![CDATA[
    public AssetTransDate parmPeriodEnd(AssetTransDate _periodEnd = periodEnd)
    {
        periodEnd = _periodEnd;

        return periodEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodstart</Name>
				<Source><![CDATA[
    public AssetTransDate parmPeriodstart(AssetTransDate _periodstart = periodstart)
    {
        periodstart = _periodstart;

        return periodstart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevDepAmount</Name>
				<Source><![CDATA[
    public AssetAmount parmPrevDepAmount(AssetAmount _prevDepAmount = prevDepAmount)
    {
        prevDepAmount = _prevDepAmount;

        return prevDepAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemaningPeriods</Name>
				<Source><![CDATA[
    public AssetDepreciationTime parmRemaningPeriods(AssetDepreciationTime _remaningPeriods = remaningPeriods)
    {
        remaningPeriods = _remaningPeriods;

        return remaningPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShift_IN</Name>
				<Source><![CDATA[
    public NoYes parmShift_IN(NoYes _shift = shift)
    {
        shift = _shift;
        return shift;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShiftDepreciation_IN</Name>
				<Source><![CDATA[
    public NoYes parmShiftDepreciation_IN(NoYes    _shiftDepreciation = shiftDepreciation)
    {
        shiftDepreciation = _shiftDepreciation;
        return shiftDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSingleShift_IN</Name>
				<Source><![CDATA[
    public NoYes parmSingleShift_IN(NoYes    _singleShift = singleShift)
    {
        singleShift = _singleShift;
        return singleShift;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTripleShift_IN</Name>
				<Source><![CDATA[
    public NoYes parmTripleShift_IN(NoYes    _tripleShift = tripleShift)
    {
        tripleShift = _tripleShift;
        return tripleShift;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNoneShift_IN</Name>
				<Source><![CDATA[
    public NoYes parmNoneShift_IN(NoYes        _noneShift = noneShift)
    {
        noneShift = _noneShift;
        return noneShift;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseFactor_PL</Name>
				<Source><![CDATA[
    boolean parmUseFactor_PL(boolean _useFactor_PL = useFactor_PL)
    {
        useFactor_PL = _useFactor_PL;
        return  useFactor_PL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsEndOfAccountingDepreciation</Name>
				<Source><![CDATA[
    public boolean parmIsEndOfAccountingDepreciation(boolean _isEndOfAccountingDepreciation = isEndOfAccountingDepreciation)
    {
        isEndOfAccountingDepreciation = _isEndOfAccountingDepreciation;
        return isEndOfAccountingDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>percentage</Name>
				<Source><![CDATA[
    protected AssetDepreciationPercentage percentage()
    {
        // <GEEPL>
        if (AssetParameters::find().AssetPercentageLevel_PL == PlAssetPercentageLevel::Book
            && assetBook.isPrimaryProfilePolishDepreciationMethod())
        {
            return this.percentage_PL();
        }
        else
        {
        // </GEEPL>
            return assetDepreciationProfile.Percentage;
        // <GEEPL>
        }
        // </GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>percentage_PL</Name>
				<Source><![CDATA[
    protected AssetDepreciationPercentage percentage_PL()
    {
        if (depreciationAltProfile)
        {
            return assetBook.PercentageAlt_PL;
        }
        else if (depreciationExtProfile)
        {
            return assetBook.PercentageExt_PL;
        }
        else
        {
            return assetBook.Percentage_PL;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodAmountCost_PL</Name>
				<Source><![CDATA[
    public AssetAmount periodAmountCost_PL()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodAmountNotCost_PL</Name>
				<Source><![CDATA[
    public AssetAmount periodAmountNotCost_PL()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revaluationAmount</Name>
				<Source><![CDATA[
    public AssetRevaluationAmount revaluationAmount()
    {
        return 0.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revaluationFactor</Name>
				<Source><![CDATA[
    protected AssetRevaluationFactor revaluationFactor()
    {
        return 1.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReductionEntryReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if document type is Reduction entry reserve.
    /// </summary>
    /// <returns>
    /// True if document type is Reduction entry reserve; otherwise false.
    /// </returns>
    protected boolean isReductionEntryReserve()
    {
        return (assetDocumentEntry_JP
            && AssetDocumentUtility_JP::isAssetDocumentEnabled()
            && assetDocumentEntry_JP.type() == AssetDocumentType_JP::AssetReductionEntry_Reserve);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountToDepreciate</Name>
				<Source><![CDATA[
    protected void setAmountToDepreciate(AssetTransDate _assetTransDate = periodEnd)
    {
        AssetTrans assetTrans;
        TransDate  acquisitionDate;
        // <GCN>
        AssetScrapValue     assetScrapValue;
        // </GCN>
        // <GJP>
        boolean      isReductionEntryReserve;
        // </GJP>

        // Modifed code to avoid recalaution of depreciation in case of other adjustment.
        if (isOtherAdjustment)
        {
            return;
        }

        isReductionEntryReserve = this.isReductionEntryReserve();

        if (assetBook.IsTrueUpDepreciation
            && !this.parmIsOriginalDepreciation()
            && AssetStatusType::construct(assetBook.Status).isAcquired())
        {
            // <GJP>
            if (isReductionEntryReserve
                && AssetDepreciationProfile::isDepMethod_JP(assetDepreciationProfile.Method))
            {
                assetAcquisitionValue = AssetDepTransMap_JP::calcAmountToReserveAllocation(assetBook, _assetTransDate, deprInterval);
            }
            else if (isReportingCurrencyDepreciation)
            {
                assetAcquisitionValue =  this.amountToDepriciateAdjustedReportingCurrency(_assetTransDate);
            }
            else
            {
            // </GJP>
                if (isReportingCurrencyDepreciation)
                {
                    assetAcquisitionValue =  this.amountToDepriciateAdjustedReportingCurrency(_assetTransDate);
                }
                else
                {
                    assetAcquisitionValue =  this.amountToDepriciateAdjusted(_assetTransDate);
                }
            // <GJP>
            }
            // </GJP>
        }
        else
        {
            // <GJP>
            if (isIsoJP)
            {
                if (!isReductionEntryReserve)
                {
                    if (isReportingCurrencyDepreciation)
                    {
                        assetAcquisitionValue = AssetDepTransMap_JP::calcAmountToDepreciateReporting(assetBook, _assetTransDate, deprInterval);
                    }
                    else
                    {
                        assetAcquisitionValue = AssetDepTransMap_JP::calcAmountToDepreciate(assetBook, _assetTransDate, deprInterval);
                    }
                }
                else
                {
                    assetAcquisitionValue = AssetDepTransMap_JP::calcAmountToReserveAllocation(assetBook, _assetTransDate, deprInterval);
                }

                if (assetDocumentEntry_JP)
                {
                    if (isReportingCurrencyDepreciation)
                    {
                        assetAcquisitionValue += AssetDepTransMap_JP::calcAmountToDepreciateReporting(
                            assetBook,
                            _assetTransDate,
                            deprInterval,
                            assetDocumentEntry_JP.RecId);
                    }
                    else
                    {
                        assetAcquisitionValue += AssetDepTransMap_JP::calcAmountToDepreciate(
                            assetBook,
                            _assetTransDate,
                            deprInterval,
                            assetDocumentEntry_JP.RecId);
                    }
                }
            }
            else if (isReportingCurrencyDepreciation)
            {
                assetAcquisitionValue   = AssetTrans::amountToDepriciateInReportingCurrency(assetBook.AssetId, _assetTransDate, assetBook.BookId);
            }
            else
            {
            // </GJP>
                assetAcquisitionValue   = AssetTrans::amountToDepriciate(assetBook.AssetId, _assetTransDate, assetBook.BookId);
            // <GJP>
            }
            // </GJP>
        }

        if (!assetAcquisitionValue &&
            ((assetBook.AcquisitionDate <= _assetTransDate && !AssetStatusType::construct(assetBook.Status).isAcquired())
            || assetBook.DepreciationConvention == AssetDepreciationConvention::HalfYearNext
            || assetBook.DepreciationConvention == AssetDepreciationConvention::HalfYearStart))
        {
            if (isReportingCurrencyDepreciation)
            {
                assetAcquisitionValue   = assetBook.AcquisitionPriceReportingCurrency;
            }
            else
            {
                assetAcquisitionValue   = assetBook.AcquisitionPrice;
            }
        }

        if (!assetAcquisitionValue)
        {
            assetTrans.TransDate = AssetTransTmp::getFirstTransactionDateByType(assetBook.AssetId, assetBook.BookId, AssetTransType::Acquisition);

            acquisitionDate = assetTrans.TransDate ? assetTrans.TransDate : assetBook.AcquisitionDate;

            if (((acquisitionDate >= assetBook.UsedFromDate) || (isIsoJP && acquisitionDate <= assetBook.UsedFromDate))
                 && !AssetAdditionalAcquisitions::applyAdditionalAcquistionsLogic(assetBook.depreciationProfile(), assetBook.DepreciationConvention))
            {
                if (isReportingCurrencyDepreciation)
                {
                    amountToDepreciate    = assetBook.AcquisitionPriceReportingCurrency;
                    assetAcquisitionValue = assetBook.AcquisitionPriceReportingCurrency;
                }
                else
                {
                    amountToDepreciate    = assetBook.AcquisitionPrice;
                    assetAcquisitionValue = assetBook.AcquisitionPrice;
                }
                
            }
        }

        if (!isIsoIN)
        {
            assetAcquisitionValue += AssetSumCalc_Trans.bonusDepreciationValue();
        }

        //
        // If the scrapValue puts the asset into a negative amountToDepreciate
        // do set the amountToDepreciate to zero. This prevents a negative
        // amountToDepreciate from being used to calculate depreciations.
        //

        // <GCN>
        // in this condition, the scrap value may change in different periods.
        // So need to call the assetBook.calcAssetScrapValueByDate_CN(date) function instead of using the field assetBook.scrapValue.
        if (AssetParameters::isDepreciationPolicyEnabled())
        {
            if (isReportingCurrencyDepreciation)
            {
                assetScrapValue = assetBook.calcAssetScrapValueReportingCurrencyByDate_CN(_assetTransDate);
            }
            else
            {
                assetScrapValue = assetBook.calcAssetScrapValueByDate_CN(_assetTransDate);
            }

            if (assetAcquisitionValue >= assetScrapValue)
            {
                amountToDepreciate = assetAcquisitionValue - assetScrapValue;
            }
            else
            {
                amountToDepreciate = 0;
            }

            if (assetBudgetModelId && !assetAcquisitionValue)
            {
                //
                //  The acquisistion total for a budget proposal will now allow for a date restrictive result
                //  by retrieving the data directly from the AssetBudget transaction table.
                //
                assetAcquisitionValue   = AssetBudget::amountToDepreciate(assetBook.AssetId, _assetTransDate, assetBook.BookId);
                amountToDepreciate      = assetAcquisitionValue - assetScrapValue;
            }
        }
        else
        {
        // </GCN>
            // <GJP>
            if (!isReductionEntryReserve)
            {
            // </GJP>
                if (isReportingCurrencyDepreciation)
                {
                    amountToDepreciate = this.setScrapBookValuePerCurrency(assetAcquisitionValue, assetBook.ScrapValueReportingCurrency);
                }
                else
                {
                    amountToDepreciate = this.setScrapBookValuePerCurrency(assetAcquisitionValue, assetBook.ScrapValue);
                }
            // <GJP>
            }
            else
            {
                amountToDepreciate = assetAcquisitionValue;
            }
            // </GJP>

            if (assetBudgetModelId)
            {
                if (!assetAcquisitionValue)
                {
                    //
                    //  The acquisistion total for a budget proposal will now allow for a date restrictive result
                    //  by retrieving the data directly from the AssetBudget transaction table.
                    //
                    assetAcquisitionValue   = AssetBudget::amountToDepreciate(assetBook.AssetId, _assetTransDate, assetBook.BookId);
                    amountToDepreciate      = assetAcquisitionValue - assetBook.ScrapValue;
                }
            }
        // <GCN>
        }
        // </GCN>
        // <GIN>
        if (assetBook.AssetGroupDepreciation_IN
            && AssetParameters::isDepreciationIncomeTaxActEnable_IN())
        {
            if (deprInterval.startOfPeriod(_assetTransDate) > assetBook.DepreciationStartDate)
            {
                amountToDepreciate = assetAcquisitionValue + AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId, assetBook.LastDepreciationDate, assetBook.BookId, AssetTransType::BonusDepreciation);
            }
            //If asset doesnt fall in the period, ignore for depreciation.
            else if (deprInterval.endPeriod(_assetTransDate) < assetBook.AcquisitionDate)
            {
                amountToDepreciate = 0;
            }
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setScrapBookValuePerCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the acquisition amount based on scrap value for reporting currency or accounting currency.
    /// </summary>
    /// <param name = "_assetAcquisitionValue">
    /// Acquisition amount of an asset.
    /// </param>    
    /// <param name = "_scrapValue">
    /// Scrap value of an asset.
    /// </param>    
    /// <returns>
    /// Returns the acquisition amount.
    /// </returns>
    protected AssetAmount setScrapBookValuePerCurrency(AssetAmount _assetAcquisitionValue, AssetAmount _scrapValue)
    {
        AssetAmount amountToDepreciateLoc;

        if (assetBook.getAcquisitionAmountSign() * _assetAcquisitionValue >= assetBook.getAcquisitionAmountSign() * _scrapValue)
        {
            if (isoCountryCode == #isoIN
                    && assetDepreciationProfile.Method == AssetDepreciationMethod::ReducingBalance)
            {
                amountToDepreciateLoc = _assetAcquisitionValue;
            }
            else
            {
                amountToDepreciateLoc = _assetAcquisitionValue - _scrapValue;
            }
        }
        else
        {
            amountToDepreciateLoc = 0;
        }

        return amountToDepreciateLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDepDate</Name>
				<Source><![CDATA[
    // the date the depreciation is for (ledger.Transactiondate)
    protected void setDepDate()
    {
        depreciationDate = periodEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTableMethodCreating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the new <c>AssetTableMethod</c> instance.
    /// Method initialize() will be called on the returned instance.
    /// </summary>
    /// <param name = "_assetDepreciationMethod">
    /// A <c>AssetDepreciationMethod</c> enumeration value.
    /// </param>
    /// <param name="_assetBook">
    /// The asset book.
    /// </param>
    /// <param name="_assetTransDate">
    /// The date of the asset transaction.
    /// </param>
    /// <param name="_assetBudgetModelId">
    /// The ID of the asset budget model.
    /// </param>
    /// <param name="_dualDepreciation">
    /// A Boolean value that indicates whether there is dual depreciation.
    /// </param>
    /// <param name="_depreciationAltProfile">
    /// A Boolean value that indicates whether there is another depreciation profile.
    /// </param>
    /// <param name="_depreciationExtProfile">
    /// A Boolean value that indicates whether there is an extended depreciation profile.
    /// </param>
    /// <param name="_depreciationAccleratedProfile_JP">
    /// A Boolean value that indicates whether to use Japan accelerated depreciation profile.
    /// </param>
    /// <param name = "_result">
    /// An <c>EventHandlerResult</c> instance, where subscribers can provide the new <c>AssetTableMethod</c> instance.
    /// </param>
    static delegate void assetTableMethodCreating(
        AssetDepreciationMethod _assetDepreciationMethod,
        AssetBook _assetBook,
        AssetTransDate     _assetTransDate,
        AssetBudgetModelId _assetBudgetModelId,
        boolean _dualDepreciation,
        boolean _depreciationAltProfile,
        boolean _depreciationExtProfile,
        boolean _depreciationAccleratedProfile_JP,
        EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// The constructor.
    /// </summary>
    /// <param name="_assetBook">
    /// The asset book.
    /// </param>
    /// <param name="_assetTransDate">
    /// The date of the asset transaction.
    /// </param>
    /// <param name="_assetBudgetModelId">
    /// The ID of the asset budget model.
    /// </param>
    /// <param name="_dualDepreciation">
    /// A Boolean value that indicates whether there is dual depreciation; optional.
    /// </param>
    /// <param name="_depreciationAltProfile">
    /// A Boolean value that indicates whether there is another depreciation profile; optional.
    /// </param>
    /// <param name="_depreciationExtProfile">
    /// A Boolean value that indicates whether there is an extended depreciation profile; optional.
    /// </param>
    /// <param name="_depreciationAccleratedProfile_JP">
    /// A Boolean value that indicates whether to use Japan accelerated depreciation profile; optional.
    /// </param>
    /// <returns>
    /// An <c>AssetTableMethod</c> instance.
    /// </returns>
    /// <remarks>
    /// The constructor to choose the right method.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Occurs when invalid depreciation method is called.
    /// </exception>
    public static AssetTableMethod construct(AssetBook          _assetBook,
                                             AssetTransDate     _assetTransDate,
                                             AssetBudgetModelId _assetBudgetModelId = '',
                                             boolean            _dualDepreciation = false,
                                             boolean            _depreciationAltProfile = false,
	                                         boolean            _depreciationExtProfile = false
	                                         ,boolean           _depreciationAccleratedProfile_JP = false
                                        )
    {
        AssetDepreciationMethod assetDepreciationMethod;
        AssetTableMethod        assetTableMethod;
        
        if (_depreciationAltProfile)
        {
            assetDepreciationMethod = _assetBook.depreciationAltProfile().Method;
            _depreciationExtProfile = false;
        }
        else if (_depreciationExtProfile)
        {
            assetDepreciationMethod = _assetBook.depreciationExtProfile().Method;
            _depreciationAltProfile = false;
        }
	    // <GJP>
	    else if (_depreciationAccleratedProfile_JP)
	    {
	        assetDepreciationMethod = _assetBook.depreciationAcceleratedProfile_JP().Method;
            _depreciationAltProfile = false;
	    }
	    // </GJP>
        else
        {
            assetDepreciationMethod = _assetBook.depreciationProfile().Method;
        }

        switch (assetDepreciationMethod)
        {
            case AssetDepreciationMethod::StraightLine             :
            case AssetDepreciationMethod::StraightLineLifeRemaining: assetTableMethod = new AssetTableMethod_SL(          _assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                                                                     _depreciationExtProfile, _assetBudgetModelId);
            break;
            case AssetDepreciationMethod::ReducingBalance       :
            case AssetDepreciationMethod::ReducingBalance125    :
            case AssetDepreciationMethod::ReducingBalance150    :
            case AssetDepreciationMethod::ReducingBalance175    :
            case AssetDepreciationMethod::ReducingBalance200    : assetTableMethod =  new AssetTableMethod_RB(          _assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                                                                        _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::Manual          : assetTableMethod =  new AssetTableMethod_Man(         _assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                                                                     _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::Factor          : assetTableMethod =  new AssetTableMethod_Fact(        _assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                                                                     _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::Consumption     : assetTableMethod =  new AssetTableMethod_Consumption( _assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                                                                     _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::RBSL            : assetTableMethod =  new AssetTableMethod_RBSL(        _assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                                                                     _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::LowValuePool    : assetTableMethod =  new AssetTableMethod_LVP(          _assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                                                                     _depreciationExtProfile, _assetBudgetModelId);
               // <GEECZ>
                break;
            case AssetDepreciationMethod::Regular_CZ      : assetTableMethod =  new AssetTableMethod_Reg_CZ(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                                                                     _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::Accelerated_CZ  : assetTableMethod =  new AssetTableMethod_Acc_CZ(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                                                                     _depreciationExtProfile, _assetBudgetModelId);
                break;
            // </GEECZ>
            // <GCN>                
            case AssetDepreciationMethod::DoubleReduceBalance_CN:
                if (AssetParameters::isDepreciationMethodsEnabled())
                {
                    assetTableMethod =  new AssetTableMethod_DRBM_CN( _assetBook, _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                        _depreciationExtProfile, _assetBudgetModelId);
                }
                break;
            case AssetDepreciationMethod::SumYearDigits_CN:
                if (AssetParameters::isDepreciationMethodsEnabled())
                {
                    assetTableMethod =  new AssetTableMethod_SYDM_CN( _assetBook, _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                        _depreciationExtProfile, _assetBudgetModelId);
                }
                break;
            // </GCN>
            // <GIN>
            case AssetDepreciationMethod::StraightLinePercentage_IN :
                if (AssetParameters::isDepreciationCompaniesActEnable_IN())
                {
                    assetTableMethod =  new AssetTableMethod_SLP_IN(_assetBook,
                                                    _assetTransDate,
                                                    _dualDepreciation,
                                                    _depreciationAltProfile,
                                                    _depreciationExtProfile,
                                                    _assetBudgetModelId);
                }

                if (assetTableMethod)
                {
                    break;
                }
            // </GIN>

            // <GEEPL>
            case AssetDepreciationMethod::StraightLine_PL          :
                assetTableMethod =  new AssetTableMethod_SL_Pl(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                  _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::StraightLinePercentage_PL:
                assetTableMethod =  new AssetTableMethod_SL_Percent_PL(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                          _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::ReducingBalance_PL :
                assetTableMethod =  new AssetTableMethod_RB_Pl(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                  _depreciationExtProfile, _assetBudgetModelId);
                break;
            // </GEEPL>
            // <GEEHU>
            case AssetDepreciationMethod::StraightLine_HU :
                assetTableMethod =  new AssetTableMethod_SL_HU(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                  _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::ReducingBalance_HU :
                assetTableMethod =  new AssetTableMethod_RB_HU(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                  _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::Factor_HU          :
                assetTableMethod =  new AssetTableMethod_Fact_HU(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                    _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::MultiplicationFactor_HU     :
                assetTableMethod =  new AssetTableMethod_MF_HU(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                    _depreciationExtProfile, _assetBudgetModelId);
                break;
            // </GEEHU>

            // <GJP>
            case AssetDepreciationMethod::OldStraightLine_JP:
            case AssetDepreciationMethod::NewStraightLine_JP:
            case AssetDepreciationMethod::OldDecliningBalance_JP:
            case AssetDepreciationMethod::NewDecliningBalance250_JP:
            case AssetDepreciationMethod::NewDecliningBalance200_JP:
            case AssetDepreciationMethod::EquallyDivided_JP:
            case AssetDepreciationMethod::Accelerated_JP:
            case AssetDepreciationMethod::SpecialDepreciation_JP:
            case AssetDepreciationMethod::AdditionalDepreciation_JP:
            case AssetDepreciationMethod::ElectronicDepreciation_JP:
                assetTableMethod =  new AssetTableMethod_JP(
                    _assetBook,
                    _assetTransDate,
                    _dualDepreciation,
                    _depreciationAltProfile,
                    _depreciationExtProfile,
                    _assetBudgetModelId,
                    _depreciationAccleratedProfile_JP);
                break;
            // </GJP>
        }

        if (assetTableMethod)
        {
            assetTableMethod.initialize();
            return assetTableMethod;
        }

        var eventHandlerResult = new EventHandlerResult();
        AssetTableMethod::assetTableMethodCreating(assetDepreciationMethod, 
            _assetBook, 
            _assetTransDate, 
            _assetBudgetModelId, 
            _dualDepreciation, 
            _depreciationAltProfile, 
            _depreciationExtProfile, 
            _depreciationAccleratedProfile_JP, 
            eventHandlerResult);

        if (eventHandlerResult.hasResult())
        {
            assetTableMethod = eventHandlerResult.result();

            assetTableMethod.initialize();
            return assetTableMethod;
        }
        else
        {
            throw error("@SYS67591");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// The constructor.
    /// </summary>
    /// <param name="_assetBook">
    /// The asset book.
    /// </param>
    /// <param name="_assetTransDate">
    /// The date of the asset transaction.
    /// </param>
    /// <param name="_assetBudgetModelId">
    /// The ID of the asset budget model.
    /// </param>
    /// <param name="_dualDepreciation">
    /// A Boolean value that indicates whether there is dual depreciation; optional.
    /// </param>
    /// <param name="_depreciationAltProfile">
    /// A Boolean value that indicates whether there is another depreciation profile; optional.
    /// </param>
    /// <param name="_depreciationExtProfile">
    /// A Boolean value that indicates whether there is an extended depreciation profile; optional.
    /// </param>  
    /// <param name="_depreciationAccleratedProfile_JP">
    /// A Boolean value that indicates whether to use Japan accelerated depreciation profile; optional.
    /// </param>
    /// <returns>
    /// An <c>AssetTableMethod</c> instance.
    /// </returns>
    /// <remarks>
    /// The constructor to choose the right method.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Occurs when invalid depreciation method is called.
    /// </exception>
    public static AssetTableMethod constructForReportingCurrency(AssetBook          _assetBook,
                                             AssetTransDate     _assetTransDate,
                                             AssetBudgetModelId _assetBudgetModelId = '',
                                             boolean            _dualDepreciation = false,
                                             boolean            _depreciationAltProfile = false,
                                             boolean            _depreciationExtProfile = false,
                                             boolean            _depreciationAccleratedProfile_JP = false)
                                        
    {
        AssetDepreciationMethod assetDepreciationMethod;
        AssetTableMethod        assetTableMethod;
        
        if (_depreciationAltProfile)
        {
            assetDepreciationMethod = _assetBook.depreciationAltProfile().Method;
            _depreciationExtProfile = false;
        }
        else if (_depreciationExtProfile)
        {
            assetDepreciationMethod = _assetBook.depreciationExtProfile().Method;
            _depreciationAltProfile = false;
        }       
        else
        {
            assetDepreciationMethod = _assetBook.depreciationProfile().Method;
        }

        switch (assetDepreciationMethod)
        {
            case AssetDepreciationMethod::StraightLine             :
            case AssetDepreciationMethod::StraightLineLifeRemaining: assetTableMethod = new AssetTableMethod_SL(          _assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::ReducingBalance       :
            case AssetDepreciationMethod::ReducingBalance125    :
            case AssetDepreciationMethod::ReducingBalance150    :
            case AssetDepreciationMethod::ReducingBalance175    :
            case AssetDepreciationMethod::ReducingBalance200    : assetTableMethod =  new AssetTableMethod_RB(          _assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::Manual          : assetTableMethod =  new AssetTableMethod_Man(         _assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::Factor          : assetTableMethod =  new AssetTableMethod_Fact(        _assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::Consumption     : assetTableMethod =  new AssetTableMethod_Consumption( _assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::RBSL            : assetTableMethod =  new AssetTableMethod_RBSL(        _assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::LowValuePool    : assetTableMethod =  new AssetTableMethod_LVP(          _assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                _depreciationExtProfile, _assetBudgetModelId);  
                break;   
                // <GEECZ>               
            case AssetDepreciationMethod::Regular_CZ      : assetTableMethod =  new AssetTableMethod_Reg_CZ(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::Accelerated_CZ  : assetTableMethod =  new AssetTableMethod_Acc_CZ(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                _depreciationExtProfile, _assetBudgetModelId);
                break;
            // </GEECZ>
            // <GCN>
            case AssetDepreciationMethod::DoubleReduceBalance_CN:
                if (AssetParameters::isDepreciationMethodsEnabled())
                {
                    assetTableMethod =  new AssetTableMethod_DRBM_CN( _assetBook, _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                        _depreciationExtProfile, _assetBudgetModelId);
                }
                break;
            case AssetDepreciationMethod::SumYearDigits_CN:
                if (AssetParameters::isDepreciationMethodsEnabled())
                {
                    assetTableMethod =  new AssetTableMethod_SYDM_CN( _assetBook, _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                        _depreciationExtProfile, _assetBudgetModelId);
                }
                break;
            // </GCN>
            // <GIN>
            case AssetDepreciationMethod::StraightLinePercentage_IN :
                if (AssetParameters::isDepreciationCompaniesActEnable_IN())
                {
                    assetTableMethod =  new AssetTableMethod_SLP_IN(_assetBook,
                                                    _assetTransDate,
                                                    _dualDepreciation,
                                                    _depreciationAltProfile,
                                                    _depreciationExtProfile,
                                                    _assetBudgetModelId);
                }

                if (assetTableMethod)
                {
                    break;
                }
            // </GIN>

            // <GEEPL>
            case AssetDepreciationMethod::StraightLine_PL          :
                assetTableMethod =  new AssetTableMethod_SL_Pl(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                  _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::StraightLinePercentage_PL:
                assetTableMethod =  new AssetTableMethod_SL_Percent_PL(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                          _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::ReducingBalance_PL :
                assetTableMethod =  new AssetTableMethod_RB_Pl(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                  _depreciationExtProfile, _assetBudgetModelId);
                break;
            // </GEEPL>
            // <GEEHU>
            case AssetDepreciationMethod::StraightLine_HU :
                assetTableMethod =  new AssetTableMethod_SL_HU(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                  _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::ReducingBalance_HU :
                assetTableMethod =  new AssetTableMethod_RB_HU(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                  _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::Factor_HU          :
                assetTableMethod =  new AssetTableMethod_Fact_HU(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                    _depreciationExtProfile, _assetBudgetModelId);
                break;
            case AssetDepreciationMethod::MultiplicationFactor_HU     :
                assetTableMethod =  new AssetTableMethod_MF_HU(_assetBook,  _assetTransDate, _dualDepreciation, _depreciationAltProfile,
                                                    _depreciationExtProfile, _assetBudgetModelId);
                break;
            // </GEEHU>

            // <GJP>
            case AssetDepreciationMethod::OldStraightLine_JP:
            case AssetDepreciationMethod::NewStraightLine_JP:
            case AssetDepreciationMethod::OldDecliningBalance_JP:
            case AssetDepreciationMethod::NewDecliningBalance250_JP:
            case AssetDepreciationMethod::NewDecliningBalance200_JP:
            case AssetDepreciationMethod::EquallyDivided_JP:
            case AssetDepreciationMethod::Accelerated_JP:
            case AssetDepreciationMethod::SpecialDepreciation_JP:
            case AssetDepreciationMethod::AdditionalDepreciation_JP:
            case AssetDepreciationMethod::ElectronicDepreciation_JP:
                assetTableMethod =  new AssetTableMethod_JP(
                    _assetBook,
                    _assetTransDate,
                    _dualDepreciation,
                    _depreciationAltProfile,
                    _depreciationExtProfile,
                    _assetBudgetModelId,
                    _depreciationAccleratedProfile_JP);
                break;
            // </GJP>
        }

        if (assetTableMethod)
        {
            assetTableMethod.parmIsReportingCurrencyDepreciation(true);
            assetTableMethod.initialize();
            return assetTableMethod;
        }

        var eventHandlerResult = new EventHandlerResult();
        AssetTableMethod::assetTableMethodCreating(assetDepreciationMethod,
            _assetBook,
            _assetTransDate,
            _assetBudgetModelId,
            _dualDepreciation,
            _depreciationAltProfile,
            _depreciationExtProfile,
            _depreciationAccleratedProfile_JP,
            eventHandlerResult);

        if (eventHandlerResult.hasResult())
        {
            assetTableMethod = eventHandlerResult.result();

            assetTableMethod.parmIsReportingCurrencyDepreciation(true);
            assetTableMethod.initialize();
            return assetTableMethod;
        }
        else
        {
            throw error("@SYS67591");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateMthFwd_HU</Name>
				<Source><![CDATA[
    #define.Months(12)
    public static date dateMthFwd_HU(date _transdate, int _qty)
    {
        int     day     = dayOfMth(_transDate);
        int     month   = mthOfYr( _transdate);
        int     yr      = year(    _transdate);
        int     absMth;
        // Shift the _transdate forward or backward qty months
        month = month + _qty;

        if (month > 0)
        {
            yr    += (month - 1) div #Months;
            month =  ((month - 1) mod #Months) + 1;
        }
        else
        {
            absMth = real2int(abs(month));
            yr    += -(absMth div #Months) - 1;
            month =  #Months - (absMth mod #Months);
        }

        // If the transdate is the end of the month, the result must also be the end of the month.
        return (mthOfYr(_transdate+1) > mthOfYr(_transdate)) ?
            dateEndMth(mkDate(day, month, yr)) :
            mkDate(day, month, yr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDisposal_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is set during the Sale of Asset.
    /// </summary>
    /// <param name="_isDisposal">
    /// boolean value, isDisposal
    /// </param>
    /// <returns>
    /// returns true If it is sale of asset, otherwise false.
    /// </returns>
    public NoYes parmIsDisposal_IN(NoYes _isDisposal = isDisposal)
    {
        isDisposal = _isDisposal;
        return isDisposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAssetFirstYearDepreciation_IN</Name>
				<Source><![CDATA[
    public boolean parmIsAssetFirstYearDepreciation_IN(boolean _isAssetFirstYearDepreciation = isAssetFirstYearDepreciation)
    {
        isAssetFirstYearDepreciation = _isAssetFirstYearDepreciation;
        return isAssetFirstYearDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReportingCurrencyDepreciation</Name>
				<Source><![CDATA[
    public boolean parmIsReportingCurrencyDepreciation(boolean _isReportingCurrencyDepreciation = isReportingCurrencyDepreciation)
    {
        isReportingCurrencyDepreciation = _isReportingCurrencyDepreciation;

        return isReportingCurrencyDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccumulatedDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets already posted depreciation amount.
    /// </summary>
    /// <returns>
    /// Returns the total amount depreciated.
    /// </returns>
    internal AssetAmount getAccumulatedDepreciation()
    {
        return this.parmPrevDepAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountInCurrency</Name>
				<Source><![CDATA[
    internal AssetAmount getAmountInCurrency(AssetAmount _amount)
    {
        AssetAmount ret = _amount;

        if (isReportingCurrencyDepreciation && Ledger::reportingCurrency())
        {
            TransDate transdate = assetBook.AcquisitionDate ? assetBook.AcquisitionDate : DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), assetBook.AcquisitionDate);
            ret = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(), ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetBook</Name>
				<Source><![CDATA[
    internal AssetBook getAssetBook()
    {
        return assetBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinimumDepreciation</Name>
				<Source><![CDATA[
    internal AssetAmount getMinimumDepreciation()
    {
        AssetAmount minimumDepreciation;
        if (isReportingCurrencyDepreciation)
        {
            minimumDepreciation = AssetParameters::find().DepreciationMinReportingCurrency;
        }
        else
        {
            minimumDepreciation = AssetParameters::find().DepreciationMin;
        }

        return minimumDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctForMinDepreciation</Name>
				<Source><![CDATA[
    internal AssetAmount correctForMinDepreciation(AssetAmount _assetAmount)
    {
        AssetAmount minimumDepreciation = this.getMinimumDepreciation();
        AssetAmount calculatedMinDepr = _assetAmount;

        if (!(_assetAmount == 0 && assetBook.LifeTimeRest == 0)
            && (assetBook.getAcquisitionAmountSign() * _assetAmount < minimumDepreciation))
        {
            calculatedMinDepr = assetBook.getAcquisitionAmountSign() * min(
                minimumDepreciation,
                assetBook.getAcquisitionAmountSign() * this.getRestToDepreciate());
        }

        return calculatedMinDepr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRestToDepreciate</Name>
				<Source><![CDATA[
    internal AssetAmount getRestToDepreciate()
    {
        AssetAmount restToDepreciate;

        if (isReportingCurrencyDepreciation)
        {
            restToDepreciate = (assetSumCalc_Trans.netBookValue() - assetBook.ScrapValueReportingCurrency);
        }
        else
        {
            restToDepreciate = (assetSumCalc_Trans.netBookValue() - assetBook.ScrapValue);
        }

        return restToDepreciate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>