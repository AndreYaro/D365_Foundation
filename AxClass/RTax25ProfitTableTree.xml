<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25ProfitTableTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25ProfitTableTree extends RTax25ProfitTree
{
    RTax25ProfitTable   profitTableCursor;
    TreeItemIdx         dragIdx;
    RTax25ProfitId      dragProfitId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beginDrag</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void beginDrag(int _x, int _y)
    {
        [dragIdx] = tree.hitTest(_x, _y);
        dragProfitId = tree.getItem(dragIdx).data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
        public void buildTree()
    {
        super();

        tree.select(this.lookupProfitId(profitTableCursor.ProfitId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDrop</Name>
				<Source><![CDATA[
        private boolean canDrop(FormTreeItem _item)
    {
        if (_item.idx() == dragIdx || this.isChildren(_item.idx()))
            return false;

        if (_item.children())
            return true;

        return (!RTax25ProfitTable::profitId2DimensionAttributeValue(_item.data(), false)
             && !(select firstonly RecId from rTax25ProfitLedgerSetup
                      where rTax25ProfitLedgerSetup.rTax25ProfitTable == RTax25ProfitTable::findByProfitId(_item.data()).RecId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dragOver</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public FormDrag dragOver(FormControl _dragSource, FormDrag _dragMode, int _x, int _y)
    {
        int             idx;
        FormTreeItem    item;

        if (! _dragSource.equal(tree))
            return FormDrag::None;

        [idx] = tree.hitTest(_x, _y);
        if (! idx)
            return FormDrag::Move;

        item = tree.getItem(idx);
        if (! this.canDrop(item))
            return FormDrag::None;

        return FormDrag::Move;
    }

]]></Source>
			</Method>
			<Method>
				<Name>drop</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void drop(FormControl _dragSource, FormDrag _dragMode, int _x, int _y)
    {
        TreeItemIdx         idx, oldParentIdx;
        FormTreeItem        item;

        if (! _dragSource.equal(tree))
            return;

        [idx] = tree.hitTest(_x, _y);

        if (idx)
        {
            item = tree.getItem(idx);
            if (! this.canDrop(item))
                return;
        }
        oldParentIdx = tree.getParent(dragIdx);
        if (! this.dropIt(item ? item.data() : nullValueFromType(Types::String)))
            return;

        tree.moveItem(dragIdx, idx);
        if (idx)
        {
            item = tree.getItem(idx);
            item.image(0);  // now it's a parent
            item.selectedImage(item.image());
            tree.setItem(item);
            tree.expand(idx, FormTreeExpand::Expand);
        }
        item = tree.getItem(oldParentIdx);
        if (item)
        {
            item.image(item.children() ? 0 : 1);
            item.selectedImage(item.image());
            tree.setItem(item);
        }
        this.rebuildTreeIdxMap();
        this.treeChanged(tree.getItem(tree.getFirstSelected()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dropIt</Name>
				<Source><![CDATA[
        private boolean dropIt(RTax25ProfitId _parentProfitId)
    {
        RTax25ProfitTable   profitTable;

        ttsbegin;
        profitTable = RTax25ProfitTable::findByProfitId(dragProfitId, true);

        profitTable.ParentProfitRecId = RTax25ProfitTable::findByProfitId(_parentProfitId).RecId;

        if (!profitTable.validateField(fieldnum(RTax25ProfitTable, ParentProfitRecId))
         || !profitTable.validateWrite())
        {
            ttsabort;
            return false;
        }

        profitTable.update();
        ttscommit;

        tableDS.research();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChildren</Name>
				<Source><![CDATA[
        private boolean isChildren(TreeItemIdx _idx)
    {
        TreeItemIdx parentIdx = tree.getParent(_idx);

        if (parentIdx == 0)
            return false;
        if (parentIdx == dragIdx)
            return true;
        return this.isChildren(parentIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDatasource</Name>
				<Source><![CDATA[
        protected void parmDatasource(FormDataSource _tableDS)
    {
        super(_tableDS);

        profitTableCursor = tableDS.cursor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeChanged</Name>
				<Source><![CDATA[
        public void treeChanged(FormTreeItem _newItem)
    {
        tableDS.positionToRecord(RTax25ProfitTable::findByProfitId(_newItem.data()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RTax25ProfitTableTree construct()
    {
        return new RTax25ProfitTableTree();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>