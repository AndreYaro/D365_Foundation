<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayCalculate_EmplPeriod</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Classs for payroll procedure calculation (employee for the period).
/// </summary>
final class rPayCalculate_EmplPeriod extends RPayCalculate
{
    RPayEmplPeriodTrans payEmplPeriodTrans;

    TransDate           startPeriodDate;
    TransDate           endPeriodDate;
    Map                 childrenEmplPeriodTransByPeriod;
    Map                 totalAmounts;
    Map                 fssAmounts;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc_Amount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    RPayAmount calc_Amount()
    {
        RPayEmplPeriodTrans payEmplPeriodTransLocal;
        int                 i, numFrom, numTo;
        RPayRateCallContext context = RPayRateCallContext::construct(endPeriodDate,emplTable.EmployeeId);
        int                 childrenNumAll = any2int(RPayRateTable::find(RHRMParameters::find().ChildrenMaternityLeaveRates[1]).getValue(context));
        int                 childrenNum1_5 = any2int(RPayRateTable::find(RHRMParameters::find().ChildrenMaternityLeaveRates[2]).getValue(context));
        RPayAmount          amount;

        if (payEmplPeriodTrans.AverageEarnEmplPeriodRecId && (payCounterCalcTable.NumFrom || payCounterCalcTable.NumTo))
        {
            numFrom = str2int(payCounterCalcTable.NumFrom) > 0 ? str2int(payCounterCalcTable.NumFrom) : 1;
            numTo   = str2int(payCounterCalcTable.NumTo)   > 0 ? str2int(payCounterCalcTable.NumTo) : maxInt();

            numFrom = max(numFrom, childrenNumAll - childrenNum1_5 + 1);
            numTo   = min(numTo, childrenNumAll);

            for (i = numFrom; i <= numTo; i++)
            {
                if (childrenEmplPeriodTransByPeriod.exists(i))
                {
                    select firstonly payEmplPeriodTransLocal
                        where payEmplPeriodTransLocal.RecId == childrenEmplPeriodTransByPeriod.lookup(i);

                    amount += payEmplPeriodTransLocal.Amount;
                }
            }
            return amount;
        }
        else
        {
            payEmplPeriodTransLocal = sourceTable;
            return payEmplPeriodTransLocal.Amount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_ChildAmountBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets amount for childs to be placed on budget.
    /// </summary>
    /// <returns>
    /// The amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAmount calc_ChildAmountBudget()
    {
        //if this person have not special sums - amount should be 0;
        if (!totalAmounts)
        {
            return 0;
        }

        return this.getSumFromAmount(totalAmounts, str2int(payCounterCalcTable.NumFrom)) - this.calc_ChildAmountFSS();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_ChildAmountFSS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets amount for childs to be placed on FSS.
    /// </summary>
    /// <returns>
    /// The amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    RPayAmount calc_ChildAmountFSS()
    {
        return this.getSumFromAmount(fssAmounts, str2int(payCounterCalcTable.NumFrom));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_DaysForPay</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Days calc_DaysForPay()
    {
        RPayEmplPeriodTrans payEmplPeriodTransLocal;
        ;
        if (payEmplPeriodTrans.AverageEarnEmplPeriodRecId)
        {
            return endPeriodDate - startPeriodDate + 1;
        }

        payEmplPeriodTransLocal = sourceTable;

        if (endmth(payEmplPeriodTransLocal.StartDate) == payPeriod && endmth(payEmplPeriodTransLocal.EndDate) > payPeriod)
        {
            return dayOfMth(payPeriod) - dayOfMth(payEmplPeriodTransLocal.StartDate) + 1;
        }

        if (endmth(payEmplPeriodTransLocal.StartDate) == payPeriod && endmth(payEmplPeriodTransLocal.EndDate) == payPeriod)
        {
            return dayOfMth(payEmplPeriodTransLocal.EndDate) - dayOfMth(payEmplPeriodTransLocal.StartDate) + 1;
        }

        if (endmth(payEmplPeriodTransLocal.EndDate) == payPeriod)
        {
            return dayOfMth(payEmplPeriodTransLocal.EndDate);
        }

        return dayOfMth(payPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_DaysInPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Days calc_DaysInPeriod()
    {
        ;
        return dayOfMth(payPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcChildAmounts</Name>
				<Source><![CDATA[
    #define.firstChild(1)
    private void calcChildAmounts()
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;

        RPayRateTable               childMinAllowanceRateTable;
        RPayRateTable               childAllowancePersentRateTable;
        RPayRateTable               ageLimitRateTable;
        RPaySickIllParameters       rPaySickIllParameters;
        RPayAmount                  minAmount;

        void balanceAmounts()
        {
            RPayAmount          childTotal;
            RPayAmount          delta = 0;
            MapEnumerator       fsse = fssAmounts.getEnumerator();

            while (fsse.moveNext())
            {
                if ( !totalAmounts.exists(fsse.currentKey()))
                {
                    continue;
                }

                childTotal = totalAmounts.lookup(fsse.currentKey());
                if (delta)
                {
                    totalAmounts.insert(fsse.currentKey(), childTotal - delta);
                    delta = 0;
                }

                if (childTotal < fsse.currentValue())
                {
                    delta += fsse.currentValue() - childTotal;
                    totalAmounts.insert(fsse.currentKey(), fsse.currentValue());
                }
            }
        }

        select firstonly RpayIllType, EmplId from rPayAverageEarnEmplPeriodTable
            where rPayAverageEarnEmplPeriodTable.RecId == payEmplPeriodTrans.AverageEarnEmplPeriodRecId;

        rPaySickIllParameters           = RPaySickIllParameters::find(rPayAverageEarnEmplPeriodTable.RpayIllType);

        //calc budget amounts
        childMinAllowanceRateTable      = RPayRateTable::find(rPaySickIllParameters.ChildMinPerNumber);
        childAllowancePersentRateTable  = RPayRateTable::find(rPaySickIllParameters.ChildAllowancePersent);
        ageLimitRateTable               = RPayRateTable::find(rPaySickIllParameters.AgeLimit);

        if (rPayAverageEarnEmplPeriodTable.RecId != 0)
        {
            //check if empl get bonuses from budget for child
            minAmount = childMinAllowanceRateTable.getValue(RPayRateCallContext::construct(payPeriod, rPayAverageEarnEmplPeriodTable.EmplId, #firstChild));
            if (minAmount)
            {
                totalAmounts = this.calcChildrenAmounts(childMinAllowanceRateTable, childAllowancePersentRateTable, ageLimitRateTable);
            }

            //calc fss amounts
            childMinAllowanceRateTable      = RPayRateTable::find(rPaySickIllParameters.ChildMinPerNumberFSS);
            childAllowancePersentRateTable  = RPayRateTable::find(rPaySickIllParameters.ChildAllowancePersentFSS);
            ageLimitRateTable               = RPayRateTable::find(rPaySickIllParameters.AgeLimitFSS);

            fssAmounts = this.calcChildrenAmounts(childMinAllowanceRateTable, childAllowancePersentRateTable, ageLimitRateTable);

            if (minAmount)
            {
                balanceAmounts();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcChildrenAmounts</Name>
				<Source><![CDATA[
    #define.decimalPrecision(0.01)
    private Map calcChildrenAmounts(RPayRateTable _childMinAllowanceRateTable, RPayRateTable _childAllowancePersentRateTable, RPayRateTable _childMaxMonthQty)
    {
        #TimeConstants
        Map                         childAmounts = new Map(Types::Int64, Types::Real);
        RHRMVirtualNetworkFamily    family;
        RHRMPersonTable             personTable;
        RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTable = RPayAverageEarnEmplPeriodTable::findRecId(payEmplPeriodTrans.AverageEarnEmplPeriodRecId);
        RPaySickIllParameters       rPaySickIllParameters = RPaySickIllParameters::find(averageEarnEmplPeriodTable.RpayIllType);
        RPayRateCallContext         context = RPayRateCallContext::construct(averageEarnEmplPeriodTable.PayPeriod, averageEarnEmplPeriodTable.EmplId);
        real    avDaysInMonth = RPayRateTable::find(rPaySickIllParameters.AverageMonthLength)
                                    .getValue(context);
        Amount  yearLawLimit = RPayRateTable::find(rPaySickIllParameters.SumYrRestriction)
                                    .getValue(context);

        Amount  aeToBeUsed;
        real    allowancePersent;
        Amount  mothlyPerOneChild;

        Amount  minForChildren;
        Amount  alForChildren;
        Amount  alForChild;
        Amount  totalMin;
        Amount  totalMax;
        Amount  minAllowancePerChild;
        MapEnumerator   childEnumerator;
        Counter i;

        RPayAmount  childSum;

        Amount getEmplPeriodAmount(RPayChildAmountCriteria _criteria = rPaySickIllParameters.ChildAECriteria)
        {
            RPayEmplPeriodTrans     localPeriodTrans;
            switch (_criteria)
            {
                case RPayChildAmountCriteria::Max :
                    select maxof(Amount) from localPeriodTrans
                        where localPeriodTrans.StartDate <= startPeriodDate
                           && localPeriodTrans.EndDate >= endPeriodDate
                           && localPeriodTrans.EmplId == payEmplPeriodTrans.EmplId
                           && localPeriodTrans.PayCtype == payEmplPeriodTrans.PayCtype
                           && localPeriodTrans.Sequence == payEmplPeriodTrans.Sequence;
                    break;
                case RPayChildAmountCriteria::Min :
                    select minof(Amount) from localPeriodTrans
                        where localPeriodTrans.StartDate <= startPeriodDate
                           && localPeriodTrans.EndDate >= endPeriodDate
                           && localPeriodTrans.EmplId == payEmplPeriodTrans.EmplId
                           && localPeriodTrans.PayCtype == payEmplPeriodTrans.PayCtype
                           && localPeriodTrans.Sequence == payEmplPeriodTrans.Sequence;
                    break;
                case RPayChildAmountCriteria::First :
                    select minof(StartDate), Amount from localPeriodTrans
                        where localPeriodTrans.StartDate <= startPeriodDate
                           && localPeriodTrans.EndDate >= endPeriodDate
                           && localPeriodTrans.EmplId == payEmplPeriodTrans.EmplId
                           && localPeriodTrans.PayCtype == payEmplPeriodTrans.PayCtype
                           && localPeriodTrans.Sequence == payEmplPeriodTrans.Sequence;
                    break;
                case RPayChildAmountCriteria::Last :
                    select maxof(StartDate), Amount from localPeriodTrans
                        where localPeriodTrans.StartDate <= startPeriodDate
                           && localPeriodTrans.EndDate >= endPeriodDate
                           && localPeriodTrans.EmplId == payEmplPeriodTrans.EmplId
                           && localPeriodTrans.PayCtype == payEmplPeriodTrans.PayCtype
                           && localPeriodTrans.Sequence == payEmplPeriodTrans.Sequence;
                    break;
            }

            return localPeriodTrans.Amount;
        }

        Amount minPerChild(RHRMVirtualNetworkFamily _child)
        {
            RPayRateCallContext localContext = RPayRateCallContext::construct(averageEarnEmplPeriodTable.PayPeriod, averageEarnEmplPeriodTable.EmplId);
            localContext.parmCriterion(_child.ChildNumber);
            return _childMinAllowanceRateTable.getValue(localContext);
        }

        int daysInPeriodByChild(RHRMVirtualNetworkFamily _child)
        {
            int days;
            TransDate endOfAllowanceDay = dateMthFwd(_child.BirthDate, real2int(_childMaxMonthQty.getValue(context)));
            TransDate endPeriod = min(min(endOfAllowanceDay, dateEndMth(payPeriod)), payEmplPeriodTrans.EndDate);
            TransDate startPeriod = max(max(_child.BirthDate, dateStartMth(payPeriod)), payEmplPeriodTrans.StartDate);
            days = endPeriod - startPeriod + 1;
            return min(days, this.calc_DaysForPay());
        }

        void updateForNonFullPeriod()
        {
            Amount total = 0;
            Amount totalCalc = 0;
            Amount childAmount;
            int     daysInPeriod = 0;

            if (daysInPeriod == dayOfMth(endmth(payPeriod)))
            {
                return;
            }

            childEnumerator = childAmounts.getEnumerator();
            while (childEnumerator.moveNext())
            {
                select firstonly family
                    where family.RecId == childEnumerator.currentKey();
                daysInPeriod = daysInPeriodByChild(family);

                total += childEnumerator.currentValue() * daysInPeriod / dayOfMth(endmth(payPeriod));
            }

            total = round(total, #decimalPrecision);

            childEnumerator = childAmounts.getEnumerator();
            for (i=0; i < childAmounts.elements() - 1; i++)
            {
                childEnumerator.moveNext();
                select firstonly family
                    where family.RecId == childEnumerator.currentKey();
                daysInPeriod = daysInPeriodByChild(family);
                childAmount = round(childEnumerator.currentValue() * daysInPeriod / dayOfMth(endmth(payPeriod)), #decimalPrecision) ;
                childAmounts.insert(childEnumerator.currentKey(), childAmount);
                totalCalc += childAmount;
            }
            //last child is special for rounding errors
            if (childEnumerator.moveNext())
            {
                childAmounts.insert(childEnumerator.currentKey(), total - totalCalc);
            }
        }

        aeToBeUsed          = round(min(getEmplPeriodAmount() * avDaysInMonth, yearLawLimit / #monthsPerYear), #decimalPrecision);
        allowancePersent    = _childAllowancePersentRateTable.getValue(context) / 100;
        mothlyPerOneChild   = round(aeToBeUsed * allowancePersent, #decimalPrecision);
        minForChildren      = 0;
        alForChildren       = 0;

        personTable = RHRMEmplTable::find(averageEarnEmplPeriodTable.EmplId).personTable();
        while select ChildNumber, BirthDate from family
            where family.PersonnelNumber == personTable.PersonnelNumber
        {
            if ( !this.isChildApplicable(family, real2int(_childMaxMonthQty.getValue(context))))
            {
                continue;
            }
            minAllowancePerChild = minPerChild(family);
            alForChild           = max(mothlyPerOneChild, minAllowancePerChild);
            minForChildren += minAllowancePerChild;
            alForChildren  += alForChild;
            childAmounts.insert(family.RecId, alForChild);
        }

        totalMin = min(alForChildren, aeToBeUsed);

        //update map, set average for all
        if (childAmounts.elements() && totalMin == aeToBeUsed)
        {
            alForChild = round(totalMin / childAmounts.elements(), #decimalPrecision);
            childEnumerator = childAmounts.getEnumerator();
            childSum = 0;
            for (i =0; i < childAmounts.elements() - 1; i++)
            {
                childEnumerator.moveNext();
                childAmounts.insert(childEnumerator.currentKey(), alForChild);
            }
            //last is always all minus sum without last;
            childEnumerator.moveNext();
            childAmounts.insert(childEnumerator.currentKey(), aeToBeUsed - (alForChild * (childAmounts.elements() - 1)));
        }

        totalMax = max(minForChildren, totalMin);
        //update map to set all to minimum
        if (totalMax == minForChildren)
        {
            childEnumerator = childAmounts.getEnumerator();
            while (childEnumerator.moveNext())
            {
                select firstonly ChildNumber from family
                        where family.RecId == childEnumerator.currentKey();
                alForChild = minPerChild(family);
                childAmounts.insert(childEnumerator.currentKey(), alForChild);
            }
        }

        updateForNonFullPeriod();

        return childAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCommon</Name>
				<Source><![CDATA[
    public void calcCommon(RPaySequence _paySequence  = 0,
                          NoYes        _errorMessage = NoYes::No)
    {
        this.calcCommonOrig(_paySequence, _errorMessage);
        this.calcCommonVirtual(_paySequence, _errorMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCommonOrig</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcCommonOrig(RPaySequence _p1, NoYes _p2)
    {
        TransDate     startDate;
        TransDate     endDate;
        Set           childVacationPeriodSet;
        SetIterator   it;
        ;
        if (needCheckModuleCalculate)
        {
            if (! this.canModuleCalculate())
            {
                throw info("@RUP387");
            }
        }

        this.checkPostingProfiles(true);

        this.initTransDate(emplTable.EmployeeId);

        while select payEmplPeriodTrans
            where payEmplPeriodTrans.EmplId                     == emplTable.EmployeeId &&
                  payEmplPeriodTrans.AverageEarnEmplPeriodRecId == 0
        {
            startDate = payEmplPeriodTrans.StartDate ? mkDate(1, mthOfYr(payEmplPeriodTrans.StartDate), year(payEmplPeriodTrans.StartDate)) :
                                                    mkDate(1, mthOfYr(payPeriod), year(payPeriod));
            endDate = payEmplPeriodTrans.EndDate ? endmth(payEmplPeriodTrans.EndDate) : endmth(payPeriod);

            if (startDate <= payPeriod && endDate >= payPeriod)
            {
                if (this.needCalculate())
                {
                    if (payEmplPeriodTrans.Sequence)
                    {
                        sourceTable = payEmplPeriodTrans.data();
                        paySeqTable = RPaySeqTable::find(payEmplPeriodTrans.Sequence);
                        this.calcSequence();
                    }
                    else
                    {
                        sourceTable = payEmplPeriodTrans.data();
                        sumCounter = payEmplPeriodTrans.Amount;
                        this.updatePayTrans();
                    }
                }
            }
        }

        childVacationPeriodSet = this.getLocalChildVacationPeriod();
        it = new SetIterator (childVacationPeriodSet);
        while (it.more())
        {
            startPeriodDate = it.value();
            it.next();
            if (it.more())
            {
                endPeriodDate = it.value() - 1;
            }
            else
            {
                endPeriodDate = endmth(payPeriod);
            }

            select firstonly payEmplPeriodTrans order by StartDate desc
                where payEmplPeriodTrans.EmplId                     == emplTable.EmployeeId &&
                      payEmplPeriodTrans.AverageEarnEmplPeriodRecId != 0                &&
                      payEmplPeriodTrans.StartDate                  <= endPeriodDate    &&
                      payEmplPeriodTrans.EndDate                    >= startPeriodDate  &&
                     !payEmplPeriodTrans.CalcPeriod;

            childrenEmplPeriodTransByPeriod = this.getChildrenEmplPeriodTrans();

            sourceTable = payEmplPeriodTrans.data();
            paySeqTable = RPaySeqTable::find(payEmplPeriodTrans.Sequence);
            this.calcSequence();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCommonVirtual</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcCommonVirtual(RPaySequence _p1, NoYes _p2)
    {
        Set             childVacationPeriodSet;
        SetIterator     it;
        RPayAverageEarnEmplPeriodTable  avgEmplPeriodTable;
        TransLink_RU                    transLink;
        RPayEmplPeriodTrans             payEmplPeriodTransCalc;

        payPeriodVirtual = this.payPeriod();

        while select payEmplPeriodTransCalc
            group by CalcPeriod
            where payEmplPeriodTransCalc.EmplId      == emplTable.EmployeeId &&
                  payEmplPeriodTransCalc.CalcPeriod
            exists join avgEmplPeriodTable
                where avgEmplPeriodTable.RecId       == payEmplPeriodTransCalc.AverageEarnEmplPeriodRecId &&
                      avgEmplPeriodTable.RpayIllType == RPayIllType::ChildVacation                        &&
                      avgEmplPeriodTable.Included
                #transLinkNotExistsReversed_RU(transLink, avgEmplPeriodTable)
        {
            this.payPeriod(payEmplPeriodTransCalc.CalcPeriod);
            childVacationPeriodSet = this.getLocalChildVacationPeriod();
            it = new SetIterator (childVacationPeriodSet);
            while (it.more())
            {
                startPeriodDate = it.value();
                it.next();
                if (it.more())
                {
                    endPeriodDate = it.value() - 1;
                }
                else
                {
                    endPeriodDate = endmth(payPeriod);
                }

                select firstonly payEmplPeriodTrans order by StartDate desc
                    where payEmplPeriodTrans.EmplId                     == emplTable.EmployeeId &&
                          payEmplPeriodTrans.AverageEarnEmplPeriodRecId !=0                 &&
                          payEmplPeriodTrans.StartDate                  <= endPeriodDate    &&
                          payEmplPeriodTrans.EndDate                    >= startPeriodDate  &&
                          payEmplPeriodTrans.CalcPeriod;

                childrenEmplPeriodTransByPeriod = this.getChildrenEmplPeriodTrans();

                sourceTable = payEmplPeriodTrans.data();
                paySeqTable = RPaySeqTable::find(payEmplPeriodTrans.Sequence);
                this.calcSequence();
            }
        }

        this.payPeriod(payPeriodVirtual);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmpl</Name>
				<Source><![CDATA[
    void calcEmpl(RHRMEmplId _emplId,RPaySequence _paySequence=0)
    {
        RPayEmplPeriodTrans  payEmplPeriodTr;

        needCheckModuleCalculate = false;
        setPrefix(payModuleTable.PayModuleName);

        this.payPeriod(RPayParameters::payPeriod(_emplId));
        payPeriodVirtual = this.payPeriod();

        if (payModuleTable.NeedDeleteBeforeCalc)
        {
            ttsbegin;

            delete_from payTrans
                where payTrans.PayPeriod     == payPeriod                    &&
                      payTrans.PayModuleCode == payModuleTable.PayModuleCode &&
                      payTrans.Emplid        == _emplId                      &&
                      payTrans.SourceTableId                                 &&
                      payTrans.SourceRecId                                   &&
                      payTrans.PayPeriod    ==  payTrans.CorrectedPeriod;

            ttscommit;
        }

        while (queryRun.next())
        {
            payEmplPeriodTr = queryRun.get(tableNum(RPayEmplPeriodTrans));
            if (payEmplPeriodTr.EmplId == _emplId)
            {
                this.setSourceTable(queryRun.get(payModuleControl.sourceTableId()));
                this.calcCommon(_paySequence, NoYes::No);
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sequence.
    /// </summary>
    public void calcSequence()
    {
        this.calcChildAmounts();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCounter</Name>
				<Source><![CDATA[
    protected RPayAmount calculateCounter(RPayCounterTable _payCounterTable, ReportPeriod_RU _rateDate=payPeriod)
    {
        RPayModuleTable          payModuleTbl;
        RPayCalculate_EmplPeriod payCalc;
        RPayQty                  amount;
        ;

        payModuleTbl = _payCounterTable.paySeqTable().payModuleTable();

        if (_payCounterTable.CounterType                    == RPayCounterType::Calculate &&
            payEmplPeriodTrans.AverageEarnEmplPeriodRecId   &&
            payModuleTbl.ConfigurationKeyId                 == configurationKeyNum(RPayEmplPeriod))
        {
            payCalc = new RPayCalculate_EmplPeriod(payModuleTbl);
            payCalc.setSourceTable(this.setSourceTable());
            payCalc.setSeqTable(_payCounterTable.paySeqTable());
            payCalc.setCounterTable(_payCounterTable);
            payCalc.needUpdatePayTrans(false);
            payCalc.payPeriod(_rateDate);
            payCalc.setPeriodInfo(startPeriodDate, endPeriodDate, childrenEmplPeriodTransByPeriod, payEmplPeriodTrans);
            payCalc.calcCounter();
            amount = payCalc.getCurrentValue();
            return amount;
        }

        return super(_payCounterTable, _rateDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildrenEmplPeriodTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map getChildrenEmplPeriodTrans()
    {
        RPayRateCallContext             context = RPayRateCallContext::construct(endPeriodDate,emplTable.EmployeeId);
        int                             childrenNumAll = any2int(RPayRateTable::find(RHRMParameters::find().ChildrenMaternityLeaveRates[1]).getValue(context));
        int                             childrenNum1_5 = any2int(RPayRateTable::find(RHRMParameters::find().ChildrenMaternityLeaveRates[2]).getValue(context));
        Map                             childTrans = new Map(Types::Integer, Types::Int64);
        Set                             recIdDateSet = new Set(Types::Container);
        container                       con;
        SetEnumerator                   setEnumerator;
        RPayEmplPeriodTrans             rPayEmplPeriodTransLocal;
        RPayAverageEarnEmplPeriodTable  rPayAverageEarnEmplPeriodTable;
        RHRMVirtualNetworkFamily        rhrmVirtualNetworkFamily;
        int                             i = childrenNumAll - childrenNum1_5 + 1;
        ;

        i = i < 0 ? 1 : i;

        while select StartDate, RecId from rPayEmplPeriodTransLocal
            where rPayEmplPeriodTransLocal.EmplId                     == emplTable.EmployeeId &&
                  rPayEmplPeriodTransLocal.AverageEarnEmplPeriodRecId != 0 &&
                  rPayEmplPeriodTransLocal.StartDate                  <= endPeriodDate &&
                  rPayEmplPeriodTransLocal.EndDate                    >= startPeriodDate
            join FamilyRecId from rPayAverageEarnEmplPeriodTable
                where rPayAverageEarnEmplPeriodTable.RecId == rPayEmplPeriodTransLocal.AverageEarnEmplPeriodRecId
        {
            rhrmVirtualNetworkFamily = RHRMVirtualNetworkFamily::findByRecId(rPayAverageEarnEmplPeriodTable.FamilyRecId);

            if (rhrmVirtualNetworkFamily)
            {
                con = [rhrmVirtualNetworkFamily.BirthDate, rPayEmplPeriodTransLocal.RecId];
            }
            else
            {
                con = [rPayEmplPeriodTransLocal.StartDate, rPayEmplPeriodTransLocal.RecId];
            }
            recIdDateSet.add(con);
        }

        setEnumerator = recIdDateSet.getEnumerator();
        while (setEnumerator.moveNext())
        {
            if (i <= childrenNumAll)
            {
                con = setEnumerator.current();
                childTrans.insert(i, conPeek(con,2));
                i++;
            }
            else
            {
                break;
            }
        }

        return childTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalChildVacationPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Set getLocalChildVacationPeriod()
    {
        Set                 set = new Set(Types::Date);
        RPayEmplPeriodTrans rPayEmplPeriodTransLocal;
        StartDate           startDate;

        while select StartDate, EndDate from rPayEmplPeriodTransLocal
            where rPayEmplPeriodTransLocal.EmplId                     == emplTable.EmployeeId &&
                  rPayEmplPeriodTransLocal.AverageEarnEmplPeriodRecId != 0 &&
                  rPayEmplPeriodTransLocal.StartDate                  <= endmth(payPeriod) &&
                  rPayEmplPeriodTransLocal.EndDate                    >= dateStartMth(payPeriod)
        {
            startDate = max(dateStartMth(payPeriod), rPayEmplPeriodTransLocal.StartDate);

            set.add(startDate);

            if (rPayEmplPeriodTransLocal.EndDate + 1 <= endmth(payPeriod))
            {
                set.add(rPayEmplPeriodTransLocal.EndDate + 1);
            }
        }

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumFromAmount</Name>
				<Source><![CDATA[
    private RPayAmount getSumFromAmount(Map _map, RPayChildNumbers _numbers)
    {
        RHRMVirtualNetworkFamily    child;
        RPayAmount                  total = 0;
        MapEnumerator               childEnumerator;
        if (_map == null)
        {
            return 0;
        }

        childEnumerator    = _map.getEnumerator();
        while (childEnumerator.moveNext())
        {
            select firstonly ChildNumber from child
                where child.RecId == childEnumerator.currentKey();

            if (_numbers == RPayChildNumbers::First && child.ChildNumber == 1)
            {
                total += childEnumerator.currentValue();
            }

            if (_numbers == RPayChildNumbers::SecondMore && child.ChildNumber > 1)
            {
                total += childEnumerator.currentValue();
            }
        }

        return total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayTransValue</Name>
				<Source><![CDATA[
    public void initPayTransValue()
    {
        payTrans.setLedgerDimension(payEmplPeriodTrans.AccountType,
                                    payEmplPeriodTrans.LedgerDimension,
                                    payEmplPeriodTrans.DefaultDimension,
                                    emplTable.EmployeeId);

        payTrans.setOffsetLedgerDimension(payEmplPeriodTrans.OffsetAccountType,
                                          payEmplPeriodTrans.OffsetLedgerDimension,
                                          payEmplPeriodTrans.OffsetDefaultDimension,
                                          emplTable.EmployeeId);

        payTrans.PayCtype               = payEmplPeriodTrans.PayCtype;
        payTrans.FamilyRecId            = payEmplPeriodTrans.FamilyRecId;

        super();

        if (! payEmplPeriodTrans.Sequence)
        {
            payTrans.Amount   = payEmplPeriodTrans.Amount;
        }

        if (payEmplPeriodTrans.PayCtype)
        {
            payTrans.PayCtype = payEmplPeriodTrans.PayCtype;
        }

        if (payEmplPeriodTrans.AverageEarnEmplPeriodRecId)
        {
            payTrans.QtyDay        = endPeriodDate - startPeriodDate + 1;
            payTrans.CalcTransDate = endPeriodDate;
        }
        else
        {
            payTrans.QtyHour  = payEmplPeriodTrans.QtyHour;
            payTrans.QtyDay   = payEmplPeriodTrans.QtyDay;
        }

        payTrans.PayModuleCode      = payModuleTable.PayModuleCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChildApplicable</Name>
				<Source><![CDATA[
    private boolean isChildApplicable(RHRMVirtualNetworkFamily _family, int mthQty)
    {
        boolean ret;
        RPayAverageEarnEmplPeriodTable  localAETable;

        TransDate maxDateApplicable = dateMthFwd(_family.BirthDate, mthQty);

        ret =  maxDateApplicable >= startPeriodDate
                && _family.BirthDate <= startPeriodDate;
        if (ret)
        {
            select firstonly RecId from localAETable
                where localAETable.FamilyRecId == _family.RecId
                   && localAETable.StartDate <= endPeriodDate
                   && localAETable.EndDate >= startPeriodDate;
            ret = localAETable.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needCalculate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean needCalculate()
    {
        int       i,j,tmpLag;
        boolean   ret;
        TransDate calculateDate;

        switch (payEmplPeriodTrans.PayPeriodFrequency)
        {
            case PeriodFrequency_RU::Month    :
                tmpLag = 1;
                break;
            case PeriodFrequency_RU::Quarter  :
                tmpLag = #monthsPerQuarter;
                break;
            case PeriodFrequency_RU::HalfYear :
                tmpLag = #monthsPerHalfYear;
                break;
            case PeriodFrequency_RU::Year     :
                tmpLag = #monthsPerYear;
                break;
            default:
                tmpLag = 0;
                break;
        }

        if (tmpLag)
        {
            calculateDate = payEmplPeriodTrans.StartDate;
            for (j = 1; j <= payEmplPeriodTrans.ByLag; j++)
            {
                if (endmth(calculateDate) == payPeriod)
                {
                    ret = true;
                    break;
                }
                else
                {
                    if (endmth(calculateDate)  > payPeriod) break;
                }
                for (i = 1; i <= tmpLag; i++)
                {
                    calculateDate = endmth(nextMth(calculateDate));
                }
            }
        }
        else
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RPayModuleTable _payModuleTable)
    {
        super(_payModuleTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmplTable</Name>
				<Source><![CDATA[
    protected void setEmplTable(Common _common)
    {
        RPayEmplPeriodTrans rPayEmplPeriodTransLocal;
        ;

        rPayEmplPeriodTransLocal = _common.data();
        emplTable = RHRMEmplTable::find(rPayEmplPeriodTransLocal.EmplId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodInfo</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setPeriodInfo(TransDate _startDate, TransDate _endDate, Map _childrenEmplPeriodTransByPeriod, RPayEmplPeriodTrans _payEmplPeriodTrans)
    {
        ;
        startPeriodDate                 = _startDate;
        endPeriodDate                   = _endDate;
        childrenEmplPeriodTransByPeriod = _childrenEmplPeriodTransByPeriod;
        payEmplPeriodTrans              = _payEmplPeriodTrans.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateStart</Name>
				<Source><![CDATA[
    TransDate transDateStart(TransDate _transDate = transDate)
    {
        RPayEmplPeriodTrans payEmplPeriodTransLocal;
        ;

        payEmplPeriodTransLocal = sourceTable;

        if (payEmplPeriodTrans.AverageEarnEmplPeriodRecId)
        {
            return endPeriodDate;
        }

        return min(payEmplPeriodTransLocal.EndDate ? payEmplPeriodTransLocal.EndDate : maxDate(), payPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePayTrans</Name>
				<Source><![CDATA[
    protected void updatePayTrans(TransDate _calcTransDate = dateNull())
    {
        if (prmisDefault(_calcTransDate) && payEmplPeriodTrans.AverageEarnEmplPeriodRecId)
        {
            _calcTransDate = endPeriodDate;
        }

        super(_calcTransDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>