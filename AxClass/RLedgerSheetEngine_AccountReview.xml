<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rLedgerSheetEngine_AccountReview</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rLedgerSheetEngine_AccountReview extends RLedgerSheetEngine implements BatchRetryable
{
    Map                     ledgerTransCredit, ledgerTransDebit;
    Map                     ledgerTransTotalCredit, ledgerTransTotalDebit;
    Amount                  turnoverCredit, turnoverDebit;
    Amount                  initialBalance;
    Set                     accountsSet;
    DialogField             dialogFinancialDimensionSet;
    Name                    financialDimensionName;
    DialogRunbase           dialog;
    DimensionDisplayValue   displayValue;
    Map                     displayValueLinesMap;
    Map                     displayValueAttributeMap;

    protected const str dialogFinancialDimensionSetConst = "dialogFinancialDimensionSet";
    protected const int value150 = 150;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDimensionDisplayValueRange</Name>
				<Source><![CDATA[
    protected void addDimensionDisplayValueRange(Query                 _query,
                                                 QueryBuildDataSource  _qBd,
                                                 DimensionDisplayValue _dimensionDisplayValue)
    {
        Container       dimensionAttributeCon;
        RefRecId        dimensionAttributeValue;
        DimensionValue  displayValueCur;
        int             i;

        if (!mainAccountsOnly && _dimensionDisplayValue)
        {
            dimensionAttributeCon = displayValueAttributeMap.lookup(_dimensionDisplayValue);
            for (i = 1; i <= conLen(dimensionAttributeCon); i++)
            {
                dimensionAttributeValue = conPeek(dimensionAttributeCon, i);
                i++;
                displayValueCur         = conPeek(dimensionAttributeCon, i);

                SysQuery::addDimensionAttributeRange(_query,
                                                     _qBd.name(),
                                                     fieldStr(GeneralJournalAccountEntry, LedgerDimension),
                                                     DimensionComponent::DimensionAttribute,
                                                     displayValueCur ? displayValueCur: SysQuery::valueEmptyString(),
                                                     DimensionAttribute::find(dimensionAttributeValue).Name,
                                                     true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalRow</Name>
				<Source><![CDATA[
    public void addTotalRow()
    {
        FormListItem formListItem;
        int          idx;
        Amount       amount;

        formListItem = new FormListItem("@GLS102426", value3);
        formListItem.idx(listControl.getCount() + 1);
        formListItem.idx(0);
        idx = listControl.addItem(formListItem);

        amount = initialBalance > 0 ? initialBalance : 0;
        this.addAmountItemToFormListControl(amount, value2, idx);

        amount = initialBalance < 0 ? - initialBalance : 0;
        this.addAmountItemToFormListControl(amount, value3, idx);

        formListItem = new FormListItem("@GLS104998", value2);
        formListItem.idx(listControl.getCount() + 1);
        idx = listControl.addItem(formListItem);

        this.addAmountItemToFormListControl(turnoverDebit, value2, idx);
        this.addAmountItemToFormListControl(turnoverCredit, value3, idx);

        formListItem = new FormListItem("@GLS102429", value3);
        formListItem.idx(listControl.getCount() + 1);
        idx = listControl.addItem(formListItem);

        amount = initialBalance + turnoverDebit - turnoverCredit;
        amount = amount > 0 ? amount : 0;
        this.addAmountItemToFormListControl(amount, value2, idx);

        amount = initialBalance + turnoverDebit - turnoverCredit;
        amount = amount < 0 ? - amount : 0;
        this.addAmountItemToFormListControl(amount, value3, idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSumAccount</Name>
				<Source><![CDATA[
    public void calcSumAccount()
    {
        MainAccount                                 heading, mainAccount;
        DimensionAttributeValue                     dimensionAttributeValue;
        DimensionAttributeValueTotallingCriteria    dimAttrValueTotCrit;
        DimensionDisplayValue                       displayValueCur;
        MainAccountNum                              mainAccountNumCur;
        MapEnumerator                               mapEnumerator;
        Amount                                      amountCredit, amountDebit;
        boolean                                     addCredit, addDebit;
        Map                                         amountDebitMap, amountCreditMap;

        if (!mainAccountsOnly)
        {
            amountDebitMap = new Map(Types::Container, typeOf(initialBalance));
            amountCreditMap = new Map(Types::Container, typeOf(initialBalance));
        }
        while select MainAccountId, RecId from heading
            where heading.Type == DimensionLedgerAccountType::Total
               && heading.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
        {
            addCredit = false;
            addDebit = false;
            amountDebit = 0;
            amountCredit = 0;

            while select TableId from dimensionAttributeValue
                 where dimensionAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                   && dimensionAttributeValue.EntityInstance == heading.RecId
                join InvertTotalSign, FromValue, ToValue from dimAttrValueTotCrit
                    where dimAttrValueTotCrit.DimensionAttributeValue == dimensionAttributeValue.RecId
            {
                SysDaSearchObject searchObject = RLedgerSheetCalcSumAccountQuery::createSearchObject(dimAttrValueTotCrit, Ledger::chartOfAccounts(), mainAccount);

                SysDaSearchStatement searchStatement = new SysDaSearchStatement();

                while (searchStatement.next(searchObject))
                {
                    if (mainAccountsOnly)
                    {
                        if (ledgerTransCredit.exists(mainAccount.MainAccountId))
                        {
                            addCredit = true;
                            amountCredit += ledgerTransCredit.lookup(mainAccount.MainAccountId);
                        }
                        if (ledgerTransDebit.exists(mainAccount.MainAccountId))
                        {
                            addDebit = true;
                            amountDebit += ledgerTransDebit.lookup(mainAccount.MainAccountId);
                        }
                    }
                    else
                    {
                        mapEnumerator = ledgerTransCredit.getEnumerator();
                        while (mapEnumerator.moveNext())
                        {
                            [displayValueCur, mainAccountNumCur] = mapEnumerator.currentKey();
                            if (mainAccount.MainAccountId == mainAccountNumCur)
                            {
                                amountCredit = mapEnumerator.currentValue();
                                if (amountCreditMap.exists([displayValueCur, heading.MainAccountId]))
                                {
                                    amountCredit += amountCreditMap.lookup([displayValueCur, heading.MainAccountId]);
                                }
                                amountCreditMap.insert([displayValueCur, heading.MainAccountId], amountCredit);
                            }
                        }
                        mapEnumerator = ledgerTransDebit.getEnumerator();
                        while (mapEnumerator.moveNext())
                        {
                            [displayValueCur, mainAccountNumCur] = mapEnumerator.currentKey();
                            if (mainAccount.MainAccountId == mainAccountNumCur)
                            {
                                amountDebit = mapEnumerator.currentValue();
                                if (amountDebitMap.exists([displayValueCur, heading.MainAccountId]))
                                {
                                    amountDebit += amountDebitMap.lookup([displayValueCur, heading.MainAccountId]);
                                }
                                amountDebitMap.insert([displayValueCur, heading.MainAccountId], amountDebit);
                            }
                        }
                    }
                }
            }
            if (mainAccountsOnly)
            {
                if (addCredit)
                {
                    ledgerTransCredit.insert(heading.MainAccountId, amountCredit);
                }
                if (addDebit)
                {
                    ledgerTransDebit.insert(heading.MainAccountId, amountDebit);
                }
            }
            else
            {
                if (!amountCreditMap.empty())
                {
                    mapEnumerator = amountCreditMap.getEnumerator();
                    while (mapEnumerator.moveNext())
                    {
                        ledgerTransCredit.insert(mapEnumerator.currentKey(), mapEnumerator.currentValue());
                    }
                }
                if (!amountDebitMap.empty())
                {
                    mapEnumerator = amountDebitMap.getEnumerator();
                    while (mapEnumerator.moveNext())
                    {
                        ledgerTransDebit.insert(mapEnumerator.currentKey(), mapEnumerator.currentValue());
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>contextMenu</Name>
				<Source><![CDATA[
    public void contextMenu(HWND _hwnd,int _idx,int _col)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExcelReport</Name>
				<Source><![CDATA[
    protected OXMLExcelReport_LedgerSheet_RU createExcelReport()
    {
        OXMLExcelReport_AccountReview_RU report = OXMLExcelReport_AccountReview_RU::construct();

        report.setParameters(listControl, this);

        return report;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRow</Name>
				<Source><![CDATA[
    public void deleteRow(int _idx)
    {
        listControl.delete(_idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTotalRow</Name>
				<Source><![CDATA[
    public boolean deleteTotalRow(int  _column = -1)
    {
        boolean ret = super(_column);
        if (ret)
        {
            listControl.delete(0);
            listControl.delete(listControl.getCount() - 1);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        dialogDeleteZero.visible(false);

        dialog.customFieldName_RU(dialogFinancialDimensionSetConst);
        dialogFinancialDimensionSet = dialog.addField(extendedTypeStr(DimensionSetName), "@SYS83218",   "@SYS83218");
        dialogFinancialDimensionSet.displayLength(15);
        dialogFinancialDimensionSet.lookupButton(FormLookupButton::Always);

        dialogFinancialDimensionSet.registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                           methodStr(rLedgerSheetEngine_AccountReview, dialogFinancialDimensionSet_lookup), this);
        dialogFinancialDimensionSet.registerOverrideMethod(methodStr(FormStringControl, validate),
                                                           methodStr(rLedgerSheetEngine_AccountReview, dialogFinancialDimensionSet_validate), this);
        dialogFinancialDimensionSet.registerOverrideMethod(methodStr(FormStringControl, jumpRef),
                                                           methodStr(rLedgerSheetEngine_AccountReview, dialogFinancialDimensionSet_jumpRef), this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogFinancialDimensionSet_jumpRef</Name>
				<Source><![CDATA[
    private void dialogFinancialDimensionSet_jumpRef(FormStringControl _value)
    {
        boolean ret = dialog.curFormControl_RU().validate();

        if (_value.text())
        {
            dialog.dialogOnClient_RU().updateServer();
            DimensionHierarchyHelper::jumpRefFocus(DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, _value.text()), this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogFinancialDimensionSet_lookup</Name>
				<Source><![CDATA[
    private void dialogFinancialDimensionSet_lookup(FormStringControl _formControl)
    {
        dialog.dialogOnClient_RU().updateServer();
        DimensionHierarchyHelper::lookupDimensionSet(_formControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogFinancialDimensionSet_validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method invoked on validate event in the dialog control.
    /// </summary>
    /// <param name="_value">
    /// The dialog control.
    /// </param>
    /// <returns>
    /// true if value entered in the dialog control is valid; otherwise, false.
    /// </returns>
    protected boolean dialogFinancialDimensionSet_validate(FormStringControl _value)
    {
        RecId                       MainAccountDimensionAttribute;
        DimensionHierarchyLevel     DimensionHierarchyLevel;
        boolean ret = dialog.curFormControl_RU().validate();
        if (_value.text())
        {
            dialog.dialogOnClient_RU().updateServer();
            MainAccountDimensionAttribute = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);
            DimensionHierarchyLevel = DimensionHierarchyLevel::findByDimensionHierarchyAndLevel(DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, _value.text()).RecId, 1);
            if (DimensionHierarchyLevel.DimensionAttribute != MainAccountDimensionAttribute)
            {
                _value.text("");
                ret = checkFailed("@SYS4082064");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogMainAccountsOnly_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method invoked on modified event in the dialog control.
    /// </summary>
    /// <param name="_value">
    /// The dialog control.
    /// </param>
    /// <returns>
    /// true if value in the dialog control is modified successfully; otherwise, false.
    /// </returns>
    protected boolean dialogMainAccountsOnly_modified(FormControl _value)
    {
        boolean ret = dialog.curFormControl_RU().modified();
        dialog.dialogOnClient_RU().updateServer();

        if (ret)
        {
            if (dialogMainAccountsOnly.value())
            {
                dialogFinancialDimensionSet.value("");
                dialogFinancialDimensionSet.enabled(false);
            }
            else
            {
                dialogFinancialDimensionSet.visible(true);
                dialogFinancialDimensionSet.enabled(true);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogUpdateDesign</Name>
				<Source><![CDATA[
    protected void dialogUpdateDesign(Dialog _dialog)
    {
        super(_dialog);

        dialogMainAccountsOnly.enabled(true);
        dialogMainAccountsOnly.visible(true);

        dialogFinancialDimensionSet.enabled(!dialogMainAccountsOnly.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandRowAccount</Name>
				<Source><![CDATA[
    protected void expandRowAccount(MainAccount _mainAccount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchNextRows</Name>
				<Source><![CDATA[
    public void fetchNextRows()
    {
        accountsSet = Set::union(ledgerTransCredit.keySet(),ledgerTransDebit.keySet());
        SetEnumerator setEnumerator = accountsSet.getEnumerator();
        while (setEnumerator.moveNext())
        {
            visibleRow += setEnumerator.current();
            int rowNumber = conLen(visibleRow);

            if (mainAccountsOnly)
            {
                this.insertRow(rowNumber);
            }
            else
            {
                this.insertRowOnFinDimension(rowNumber);
            }
        }

        if (!mainAccountsOnly)
        {
            this.insertTotalRowOnFinDimension(displayValue);
        }

        this.addTotalRow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterValues</Name>
				<Source><![CDATA[
    public container filterValues(container _con)
    {
        filteredColumnsMap.insert("@GLS100994", 2);
        filteredColumnsMap.insert("@SYS7084", 3);
        return ["@GLS100994", "@SYS7084"];
    }

]]></Source>
			</Method>
			<Method>
				<Name>formDesignCaption</Name>
				<Source><![CDATA[
    public str formDesignCaption(int _idx = -1)
    {
        if (fromDate)
        {
            return strFmt("@GLS104986", mainAccountNum, fromDate, toDate);
        }
        else
        {
            return strFmt("@GLS105033", mainAccountNum, toDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionDisplayValue</Name>
				<Source><![CDATA[
    private DimensionDisplayValue getDimensionDisplayValue(GeneralJournalAccountEntry _parentEntry)
    {
        DimensionDisplayValue            dimensionDisplayValue;
        Container                        dimensionAttributeCon;
        RecId                            finDimRecId = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus,
                                                                                             financialDimensionName).RecId;
        DimensionAttributeLevelValueView dimAttrLevelValueView;
        DimensionHierarchyLevel          dimHierarchyLevel;

        while select DimensionAttribute from dimHierarchyLevel
            order by Level
            where dimHierarchyLevel.DimensionHierarchy == finDimRecId
        {
            select firstOnly DimensionAttribute, DisplayValue from dimAttrLevelValueView
                where dimAttrLevelValueView.DimensionAttribute    == dimHierarchyLevel.DimensionAttribute &&
                      dimAttrLevelValueView.ValueCombinationRecId == _parentEntry.LedgerDimension;

            dimensionDisplayValue += strfmt("%1 - ", dimAttrLevelValueView.DisplayValue);
            dimensionAttributeCon += dimHierarchyLevel.DimensionAttribute;
            dimensionAttributeCon += dimAttrLevelValueView.DisplayValue;
        }

        dimensionDisplayValue = substr(dimensionDisplayValue, 0, strlen(dimensionDisplayValue)-3);
        displayValueAttributeMap.insert(dimensionDisplayValue, dimensionAttributeCon);
        return dimensionDisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHelpText</Name>
				<Source><![CDATA[
    public str getHelpText(int _idx, int _col)
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();
        if (! mainAccountNum)
        {
            return checkFailed("@SYS25151");
        }

        financialDimensionName = dialogFinancialDimensionSet.value();
        mainAccountsOnly       = dialogMainAccountsOnly.value();

        if (! mainAccountsOnly && !financialDimensionName)
        {
            return checkFailed("@SYS4082243");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAccounts</Name>
				<Source><![CDATA[
    protected void initAccounts()
    {
        super();

        if (mainAccountsOnly)
        {
            ledgerTransCredit = new Map(typeOf(mainAccountNum), typeOf(initialBalance));
            ledgerTransDebit  = new Map(typeOf(mainAccountNum), typeOf(initialBalance));
        }
        else
        {
            ledgerTransCredit = new Map(Types::Container, typeOf(initialBalance));
            ledgerTransDebit  = new Map(Types::Container, typeOf(initialBalance));

            ledgerTransTotalCredit   = new Map(typeOf(displayValue), typeOf(initialBalance));
            ledgerTransTotalDebit    = new Map(typeOf(displayValue), typeOf(initialBalance));
            displayValueLinesMap     = new Map(Types::Integer, Types::String);
            displayValueAttributeMap = new Map(Types::String, Types::Container);
        }

        turnoverCredit = 0;
        turnoverDebit  = 0;

        initialBalance = this.calcBalanceForMainAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListView</Name>
				<Source><![CDATA[
    public void initListView()
    {
        FormListColumn  listColumn;

        super();
        displayValue = "";
        listColumn = new FormListColumn("@SYS1996", 1, value150);
        listControl.addColumn(1, listColumn);

        listColumn = new FormListColumn("@SYS943", value2);
        listControl.addColumn(value2, listColumn);

        listColumn = new FormListColumn();
        listColumn.format(FormListFormat::Right);
        listColumn.text("@GLS100994");
        listControl.addColumn(value3, listColumn);

        listColumn = new FormListColumn();
        listColumn.format(FormListFormat::Right);
        listColumn.text("@SYS7084");
        listControl.addColumn(value4, listColumn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRunQuery</Name>
				<Source><![CDATA[
    protected Query initRunQuery()
    {
        Query                               query = new Query(queryRun.query());
        QueryBuildDataSource                qBd;

        qBd = query.dataSourceTable(tableNum(MainAccount), value2);
        qBd.addSortField(fieldNum(MainAccount, MainAccountId));
        qBd.orderMode(OrderMode::GroupBy);

        qBd = query.dataSourceTable(tableNum(MainAccount), 1);
        qBd.addSortField(fieldNum(MainAccount, MainAccountId));
        qBd.orderMode(OrderMode::GroupBy);

        qBd = query.dataSourceTable(tableNum(GeneralJournalAccountEntry), 1);
        qBd.clearRange(fieldNum(GeneralJournalAccountEntry, IsCredit));
        qBd.addSortField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));
        qBd.orderMode(OrderMode::GroupBy);

        qBd = query.dataSourceTable(tableNum(GeneralJournalAccountEntry), value2);
        qBd.clearRange(fieldNum(GeneralJournalAccountEntry, IsCredit));
        qBd.addSortField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));

        qBd.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);
        qBd.addSelectionField(fieldNum(GeneralJournalAccountEntry, ReportingCurrencyAmount),SelectionField::Sum);
        qBd.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount),SelectionField::Sum);

        qBd.orderMode(OrderMode::GroupBy);

        this.setDimensionRange(query);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeaderRowOnFinDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a header row on finantion dimension.
    /// </summary>
    /// <param name="_displayValueCur">
    /// The name of element.
    /// </param>
    protected void insertHeaderRowOnFinDimension(DimensionDisplayValue _displayValueCur)
    {
        FormListItem    formListItem;

        formListItem = new FormListItem(_displayValueCur, value2);
        formListItem.idx(listControl.getCount() + 1);
        listControl.addItem(formListItem);
        listControl.setItem(formListItem);

        displayValue = _displayValueCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRow</Name>
				<Source><![CDATA[
    protected void insertRow(int _row,int _idx = 0)
    {
        FormListItem            formListItem;
        int                     idx;
        Amount                  amount;
        MainAccountNum          rowAccount;
        anytype                 anyZero = 0;

        rowAccount = conPeek(visibleRow,_row);

        formListItem = new FormListItem(rowAccount);
        formListItem.idx(listControl.getCount() + 1);

        if (showSumAccount)
        {
            formListItem.image(MainAccount::findByMainAccountId(rowAccount).Type == DimensionLedgerAccountType::Total);
        }

        if (_idx)
        {
            formListItem.idx(_idx);
        }
        idx = listControl.addItem(formListItem);
        formListItem = new FormListItem(MainAccount::getLocalizedNameByMainAccountId(rowAccount));
        formListItem.subItem(1);
        formListItem.idx(idx);
        listControl.setItem(formListItem);

        amount = ledgerTransDebit.exists(rowAccount) ? ledgerTransDebit.lookup(rowAccount) : anyZero;
        this.addAmountItemToFormListControl(amount, value2, idx);

        amount = ledgerTransCredit.exists(rowAccount) ? ledgerTransCredit.lookup(rowAccount) : anyZero;
        this.addAmountItemToFormListControl(amount, value3, idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRowOnFinDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a row on finantion dimension.
    /// </summary>
    /// <param name="_row">
    /// The row number.
    /// </param>
    /// <param name="_idx">
    /// The index of element.
    /// </param>
    protected void insertRowOnFinDimension(int _row, int _idx = 0)
    {
        FormListItem            formListItem;
        int                     idx;
        Amount                  amount;
        DimensionDisplayValue   displayValueCur = conPeek(visibleRow, _row - 1);
        MainAccountNum          rowAccount      = conPeek(visibleRow, _row);
        anytype                 anyZero = 0;
        boolean                 totalAccount = false;;

        if (_idx == 0)
        {
            if (displayValue != displayValueCur)
            {
                if (displayValue)
                {
                    this.insertTotalRowOnFinDimension(displayValue);
                }
                this.insertHeaderRowOnFinDimension(displayValueCur);
            }
            else
            {
                visibleRow = conDel(visibleRow, _row - 1, 1);
            }
        }
        formListItem = new FormListItem(rowAccount);
        formListItem.idx(listControl.getCount() + 1);

        totalAccount = MainAccount::findByMainAccountId(rowAccount).Type == DimensionLedgerAccountType::Total;
        if (showSumAccount)
        {
            formListItem.image(totalAccount);
        }
        if (_idx)
        {
            formListItem.idx(_idx);
        }
        idx = listControl.addItem(formListItem);
        displayValueLinesMap.insert(idx + 1, displayValueCur);

        formListItem = new FormListItem(MainAccount::getLocalizedNameByMainAccountId(rowAccount));
        formListItem.subItem(1);
        formListItem.idx(idx);
        listControl.setItem(formListItem);

        amount = ledgerTransDebit.exists([displayValueCur, rowAccount]) ? ledgerTransDebit.lookup([displayValueCur, rowAccount]) : anyZero;
        this.addAmountItemToFormListControl(amount, value2, idx);

        if (!totalAccount)
        {
            if (ledgerTransTotalDebit.exists(displayValueCur))
            {
                amount += ledgerTransTotalDebit.lookup(displayValueCur);
            }
            ledgerTransTotalDebit.insert(displayValueCur, amount);
        }
        amount = ledgerTransCredit.exists([displayValueCur, rowAccount]) ? ledgerTransCredit.lookup([displayValueCur, rowAccount]) : anyZero;
        this.addAmountItemToFormListControl(amount, value3, idx);

        if (!totalAccount)
        {
            if (ledgerTransTotalCredit.exists(displayValueCur))
            {
                amount += ledgerTransTotalCredit.lookup(displayValueCur);
            }
            ledgerTransTotalCredit.insert(displayValueCur, amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTotalRowOnFinDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a total row on finantion dimension.
    /// </summary>
    /// <param name="_displayValue">
    /// The display value of element.
    /// </param>
    private void insertTotalRowOnFinDimension(DimensionDisplayValue _displayValue)
    {
        FormListItem formListItem;
        int          idx;
        Amount       amount;
        anytype      anyZero = 0;

        formListItem = new FormListItem("@SYS58659",value3);
        formListItem.idx(listControl.getCount() + 1);
        idx = listControl.addItem(formListItem);
        visibleRow += formListItem.text();

        amount = ledgerTransTotalDebit.exists(_displayValue) ? ledgerTransTotalDebit.lookup(_displayValue) : anyZero;
        this.addAmountItemToFormListControl(amount, value2, idx);

        amount = ledgerTransTotalCredit.exists(_displayValue) ? ledgerTransTotalCredit.lookup(_displayValue) : anyZero;
        this.addAmountItemToFormListControl(amount, value3, idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>proceedDisplayingVouchers</Name>
				<Source><![CDATA[
    public void proceedDisplayingVouchers(int _col)
    {
        int                     totals = listControl.getCount() - 1;
        MainAccountNum          account;
        DimensionDisplayValue   displayValueCur;
        anytype                 anyZero = 0;

        switch (row)
        {
            case 0,totals,totals - 1:
                break;
            default:
                if (! mainAccountsOnly && !displayValueLinesMap.exists(row))
                {
                    break;
                }
                if (listControl.getItem(row))
                {
                    account      = listControl.getItem(row).text();
                    if (!mainAccountsOnly)
                    {
                        displayValueCur = displayValueLinesMap.exists(row) ? displayValueLinesMap.lookup(row) : anyZero;
                    }
                    switch (_col)
                    {
                        case value2:
                            this.showOriginalDocuments(mainAccountNum, account, DebCredProposal::Debit, displayValueCur);
                            break;
                        case value3:
                            this.showOriginalDocuments(mainAccountNum, account, DebCredProposal::Credit, displayValueCur);
                            break;
                    }
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, mainAccountsOnly, financialDimensionName, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>putToDialog</Name>
				<Source><![CDATA[
    public void putToDialog()
    {
        super();

        if (!financialDimensionName)
        {
            dialogMainAccountsOnly.value(NoYes::Yes);
        }
        else
        {
            dialogMainAccountsOnly.value(mainAccountsOnly);
            dialogFinancialDimensionSet.value(financialDimensionName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00012, funcName());
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer   version = conPeek(packedClass,1);
        container con;

        switch (version)
        {
            case currentVersion:
                [version, mainAccountsOnly, financialDimensionName, con] = packedClass;
                super(con);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccounts</Name>
				<Source><![CDATA[
    public void updateAccounts(GeneralJournalAccountEntry _parentEntry,
                               GeneralJournalAccountEntry _childEntry)
    {
        Amount          transAmount;
        MainAccountNum  mainAccountNumLocal = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(_childEntry.LedgerDimension);
        Container       valueCon;

        transAmount = this.getTransAmount(_childEntry);
        if ( !mainAccountsOnly)
        {
            valueCon = [this.getDimensionDisplayValue(_parentEntry), mainAccountNumLocal];
        }

        if (_childEntry.IsCredit)
        {
            turnoverDebit += transAmount;
            if (mainAccountsOnly)
            {
                if (ledgerTransDebit.exists(mainAccountNumLocal))
                {
                    transAmount += ledgerTransDebit.lookup(mainAccountNumLocal);
                }
                ledgerTransDebit.insert(mainAccountNumLocal, transAmount);
            }
            else
            {
                if (ledgerTransDebit.exists(valueCon))
                {
                    transAmount += ledgerTransDebit.lookup(valueCon);
                }
                ledgerTransDebit.insert(valueCon, transAmount);
            }
        }
        else
        {
            turnoverCredit += transAmount;
            if (mainAccountsOnly)
            {
                if (ledgerTransCredit.exists(mainAccountNumLocal))
                {
                    transAmount += ledgerTransCredit.lookup(mainAccountNumLocal);
                }
                ledgerTransCredit.insert(mainAccountNumLocal, transAmount);
            }
            else
            {
                if (ledgerTransCredit.exists(valueCon))
                {
                    transAmount += ledgerTransCredit.lookup(valueCon);
                }
                ledgerTransCredit.insert(valueCon, transAmount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static str description()
    {
        return "@GLS104987";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>