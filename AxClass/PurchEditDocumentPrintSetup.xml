<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchEditDocumentPrintSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchEditDocumentPrintSetup</c> class lets the user set print options for the posting
///    document.
/// </summary>
public class PurchEditDocumentPrintSetup extends PurchEditSetup
{
    // <GEERU>
    #DEFINE.CurrentVersion(2)
    // </GEERU>

    #LOCALMACRO.CurrentList
        printOut,
        printFormletter,
        usePrintManagement,
        printSalesFormLetter,
        printEUVatInvoice,
        // <GEERU>
        printAcceptance,
        printInventBailee,
        printFacture
        // </GEERU>
    #ENDMACRO

    DialogField     dialogPrintOut;
    DialogField     dialogPrintFormletter;
    DialogField     dialogUsePrintManagement;
    DialogField     dialogPrintSalesFormLetter;
    DialogField     dialogPrintEUVatInvoice;

    // <GEERU>
    DialogField     dialogPrintAcceptance;
    DialogField     dialogPrintInventBailee;
    DialogField     dialogPrintFacture;
    // </GEERU>

    Printout        printout;
    NoYesId         printFormletter;
    NoYesId         usePrintManagement;
    NoYesId         printSalesFormLetter;
    NoYesId         printEUVatInvoice;

    // <GEERU>
    NoYesId         printAcceptance;
    NoYesId         printInventBailee;
    NoYesId         printFacture;
    boolean         countryRegion_RU;
    // </GEERU>
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds fields to the dialog box.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>DialogRunBase</c> class.
    /// </returns>
    Object dialog()
    {
        dialog = super();
        dialog.caption(PurchEditDocumentPrintSetup::description());
        dialog.addGroup("@SYS70732");

        dialogPrintOut = dialog.addFieldValue(enumStr(Printout), purchFormLetter.printout(), "@SYS128950", "@SYS128951");
        dialogPrintOut.enabled(!purchFormLetter.proforma());

        dialogPrintFormletter = dialog.addFieldValue(extendedTypeStr(NoYesId), printFormletter);
        dialogPrintFormletter.label(purchEditLinesForm.formLetterCaption());
        dialogPrintFormletter.helpText(purchEditLinesForm.formLetterCaptionHelpText());

        dialogUsePrintManagement = dialog.addFieldValue(extendedTypeStr(NoYesId), usePrintManagement, "@SYS93922", "@SYS128953");
        dialogUsePrintManagement.enabled(printFormletter != NoYes::No);

        // <GEERU>
        if (countryRegion_RU
            && purchEditLinesForm.showPrintFacture_RU())
        {
            dialogPrintFacture = dialog.addFieldValue(extendedTypeStr(NoYesId), printFacture, "@GLS105031");
        }
        // </GEERU>

        if (this.isDocumentInvoice(documentStatus) || this.isDocumentPackingSlip(documentStatus))
        {
            dialogPrintSalesFormLetter = dialog.addFieldValue(extendedTypeStr(NoYesId), printSalesFormLetter, "@SYS78469", "@SYS128954");
        }

        if (this.isDocumentHasEUVatInvoice())
        {
            dialogPrintEUVatInvoice = dialog.addFieldValue(extendedTypeStr(NoYesId), printEUVatInvoice, "@SYS55116", "@SYS128955");
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            if (purchEditLinesForm.showPrintAcceptanceReport_RU())
            {
                dialogPrintAcceptance   = dialog.addFieldValue(extendedTypeStr(NoYesId), printAcceptance, "@GLS107020");
            }

            if (purchEditLinesForm.showPrintInventBaileeReport_RU())
            {
                dialogPrintInventBailee = dialog.addFieldValue(extendedTypeStr(NoYesId), printInventBailee, "@GLS115579");
            }
        }
        // </GEERU>

        this.modifyButtonHelpTexts();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        // allow the dialog infrastructure to raise dialog field events
        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld1_1_validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the print out value.
    /// </summary>
    /// <returns>
    /// true if the selected value is allowed; otherwise, false.
    /// </returns>
    private boolean fld1_1_validate()
    {
        return purchFormLetter.checkPrintOut(dialogPrintOut.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld2_1_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the <c>UsePrintManagement</c> field that is based on the value of the
    /// <c>PrintFormletter</c> field.
    /// </summary>
    /// <returns>
    /// true if the value was modified; otherwise, false.
    /// </returns>
    private boolean fld2_1_modified()
    {
        Object control;
        boolean valueWasModified;
        boolean usePrintManagementEnabled;

        control = dialog.formRun().controlCallingMethod();
        valueWasModified = control.modified();

        if (dialogPrintFormletter.value() != NoYes::No
            // <GEERU>
            || (dialogPrintInventBailee && dialogPrintInventBailee.value() != NoYes::No)
            || (dialogPrintFacture      && dialogPrintFacture.value()      != NoYes::No)
            // </GEERU>
            )
        {
            usePrintManagementEnabled = true;
        }
        else
        {
            usePrintManagementEnabled = false;
        }

        dialogUsePrintManagement.enabled(usePrintManagementEnabled);

        // <GEERU>
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
         || !usePrintManagementEnabled)
        {
        // </GEERU>
            dialogUsePrintManagement.value(NoYes::No);
        // <GEERU>
        }
        // </GEERU>

        return valueWasModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld4_1_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the <c>UsePrintManagement</c> field that is based on the value of the
    /// <c>PrintFacture</c> field.
    /// </summary>
    /// <returns>
    /// true if the value was modified; otherwise, false.
    /// </returns>
    private boolean fld4_1_modified()
    {
        Object control;
        boolean valueWasModified;

        control = dialog.formRun().controlCallingMethod();
        valueWasModified = control.modified();

        if (dialogPrintFormletter.value()   != NoYes::No
         || dialogPrintInventBailee.value() != NoYes::No
         || dialogPrintFacture.value()      != NoYes::No)
        {
            dialogUsePrintManagement.enabled(true);
        }
        else
        {
            dialogUsePrintManagement.enabled(false);
            dialogUsePrintManagement.value(NoYes::No);
        }

        return valueWasModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld6_1_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the <c>UsePrintManagement</c> field that is based on the value of the
    /// <c>PrintInventBailee</c> field.
    /// </summary>
    /// <returns>
    /// true if the value was modified; otherwise, false.
    /// </returns>
    private boolean fld6_1_modified()
    {
        Object control;
        boolean valueWasModified;

        control = dialog.formRun().controlCallingMethod();
        valueWasModified = control.modified();

        if (dialogPrintFormletter.value()   != NoYes::No
         || (dialogPrintInventBailee && dialogPrintInventBailee.value() != NoYes::No)
         || (dialogPrintFacture && dialogPrintFacture.value()           != NoYes::No))
        {
            dialogUsePrintManagement.enabled(true);
        }
        else
        {
            dialogUsePrintManagement.enabled(false);
            dialogUsePrintManagement.value(NoYes::No);
        }

        return valueWasModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the fields from the dialog box.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>

    public boolean getFromDialog()
    {
        printout = dialogPrintOut.value();
        printFormletter = dialogPrintFormletter.value();
        usePrintManagement = dialogUsePrintManagement.value();

        if (this.isDocumentInvoice(documentStatus) || this.isDocumentPackingSlip(documentStatus))
        {
            printSalesFormLetter = dialogPrintSalesFormLetter.value();
        }

        if (dialogPrintEUVatInvoice)
        {
            printEUVatInvoice = dialogPrintEUVatInvoice.value();
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            if (dialogPrintAcceptance)
                printAcceptance = dialogPrintAcceptance.value();
            if (dialogPrintInventBailee)
                printInventBailee = dialogPrintInventBailee.value();
            if (dialogPrintFacture)
                printFacture    = dialogPrintFacture.value();
        }
        // </GEERU>

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets member variables of the <c>PurchFormLetter</c> class.
    /// </summary>

    public void run()
    {
        purchFormLetter.printout(printout);
        purchFormLetter.printFormLetter(printFormletter);

        if (this.isDocumentInvoice(documentStatus) || this.isDocumentPackingSlip(documentStatus))
        {
            purchFormLetter.printSalesFormLetter(printSalesFormLetter);
        }

        purchFormLetter.usePrintManagement(usePrintManagement);
        this.documentPrintEUVatInvoice(printEUVatInvoice);

        // <GEERU>
        if (countryRegion_RU)
        {
            if (this.isDocumentInvoice(documentStatus) ||
                this.isDocumentFacture_RU(documentStatus))
            {
                if (dialogPrintAcceptance)
                    purchFormLetter.printAcceptanceReport_RU(printAcceptance);

                if (dialogPrintInventBailee)
                    purchFormLetter.printInventBaileeReport_RU(printInventBailee);
            }

            if (dialogPrintFacture && this.isDocumentFacture_RU(documentStatus))
            {
                purchFormLetter.printFacture_RU(printFacture);
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentHasEUVatInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the printer settings should contain the Print Intra-community invoice option
    /// </summary>
    /// <returns>
    /// true if should; otherwise, false.
    /// </returns>
    private boolean isDocumentHasEUVatInvoice()
    {
        boolean ret;

        if (this.isDocumentInvoice(documentStatus))
        {
            var purchEditLinesFormInvoice = purchEditLinesForm as PurchEditLinesForm_Invoice;
            ret = (purchEditLinesFormInvoice && purchEditLinesFormInvoice.showPrintEUVatInvoice());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentPrintEUVatInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the document Print Intra-community invoice sign
    /// </summary>
    /// <param name = "_printEUVatInvoice">The Print Intra-community invoice sign</param>
    private void documentPrintEUVatInvoice(boolean _printEUVatInvoice)
    {
        if (dialogPrintEUVatInvoice)
        {
            var purchFormLetterInvoice = purchFormLetter as PurchFormLetter_Invoice;
            if (purchFormLetterInvoice)
            {
                purchFormLetterInvoice.printEUVatInvoice(_printEUVatInvoice);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchEditDocumentPrintSetup construct(PurchFormLetter _purchFormLetter)
    {
        PurchEditDocumentPrintSetup purchEditDocumentPrintSetup;

        purchEditDocumentPrintSetup = new PurchEditDocumentPrintSetup();
        purchEditDocumentPrintSetup.parmPurchFormLetter(_purchFormLetter);

        return purchEditDocumentPrintSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS70732";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        PurchEditDocumentPrintSetup purchEditDocumentPrintSetup;
        PurchFormLetter    purchFormLetterLocal;
        DocumentStatus     documentStatusLocal;
        Object             callerForm;
        str                callerFormName;

        if (!args)
            throw error("@SYS25407");

        callerForm = args.caller();

        if (callerForm)
            callerFormName    = args.caller().name();

        if (callerFormName == formStr(PurchEditLines) ||
            callerFormName == formStr(VendEditInvoice) ||
            callerFormName == formStr(VendInvoiceInfoListPage))
        {
            if (args.parmObject())
            {
                purchFormLetterLocal = args.parmObject();

                purchEditDocumentPrintSetup = PurchEditDocumentPrintSetup::construct(purchFormLetterLocal);

                documentStatusLocal = purchFormLetterLocal.documentStatus();

                purchEditDocumentPrintSetup.parmDocumentStatus(documentStatusLocal);

                purchEditDocumentPrintSetup.parmPurchEditLinesForm(PurchEditLinesForm::construct(documentStatusLocal));
            }
        }

        if (purchEditDocumentPrintSetup)
        {
            if (purchEditDocumentPrintSetup.prompt())
                purchEditDocumentPrintSetup.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>