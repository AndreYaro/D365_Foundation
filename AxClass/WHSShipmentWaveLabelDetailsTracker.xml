<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipmentWaveLabelDetailsTracker</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipmentWaveLabelDetailsTracker</c> class is responsible for keeping track
/// and inserting <c>WHSShipmentWaveLabelDetails</c> records.
/// </summary>
internal final class WHSShipmentWaveLabelDetailsTracker
{
    private static Map shipmentWaveLabelDetailsMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>trackShipmentWaveLabelDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tracks a request for a <c>WHSShipmentWaveLabelDetails</c> record to be inserted
    /// in the current transaction. If a buffer with the same shipment Id is allready tracked
    /// the existing values are overwritten so only one record will be inserted for a shipment Id.
    /// </summary>
    /// <param name = "_shipmentWaveLabelDetails">The <c>WHSShipmentWaveLabelDetails</c> record to be inserted.</param>
    [Hookable(false)]
    internal static void trackShipmentWaveLabelDetails(WHSShipmentWaveLabelDetails _shipmentWaveLabelDetails)
    {
        WHSShipmentWaveLabelDetailsTracker::registerEventHandler();

        if (!shipmentWaveLabelDetailsMap)
        {
            shipmentWaveLabelDetailsMap = new Map(Types::String, Types::Record);
        }

        WHSShipmentWaveLabelDetails localShipmentWaveLabelDetails;
        localShipmentWaveLabelDetails.data(_shipmentWaveLabelDetails);

        str key = strFmt('%1;%2', _shipmentWaveLabelDetails.ShipmentId, _shipmentWaveLabelDetails.DataAreaId);
        shipmentWaveLabelDetailsMap.insert(key, localShipmentWaveLabelDetails);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertShipmentWaveLabelDetailsRecords</Name>
				<Source><![CDATA[
    private static void insertShipmentWaveLabelDetailsRecords()
    {
        if (shipmentWaveLabelDetailsMap)
        {
            RecordInsertList shipmentWaveLabelDetailsList = new RecordInsertList(tableNum(WHSShipmentWaveLabelDetails));

            MapEnumerator enumerator = shipmentWaveLabelDetailsMap.getEnumerator();
            while (enumerator.moveNext())
            {
                shipmentWaveLabelDetailsList.add(enumerator.currentValue());
            }

            shipmentWaveLabelDetailsList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEventHandlerRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the event handlers, related to the <c>WHSShipmentWaveLabelDetailsTracker</c>
    /// class, have been registered.
    /// </summary>
    /// <returns>true if the event handlers are regeistered; false otherwise.</returns>
    [Hookable(false)]
    internal static boolean isEventHandlerRegistered()
    {
        return appl.globalCache().get(classStr(WHSShipmentWaveLabelDetailsTracker), 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandler</Name>
				<Source><![CDATA[
    private static void registerEventHandler()
    {
        if (!WHSShipmentWaveLabelDetailsTracker::isEventHandlerRegistered())
        {
            appl.onTtsNotifyPreCommit += eventhandler(WHSShipmentWaveLabelDetailsTracker::onTtsPreCommit);
            
            // We are registering an event on ttsAbort in order to remove the event handler on ttsPreCommit if ttsPreCommit is not hit.
            appl.onTtsNotifyAbort += eventhandler(WHSShipmentWaveLabelDetailsTracker::onTtsAbort);
            appl.globalCache().set(classStr(WHSShipmentWaveLabelDetailsTracker), 0, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTtsPreCommit</Name>
				<Source><![CDATA[
    private static void onTtsPreCommit()
    {
        WHSShipmentWaveLabelDetailsTracker::insertShipmentWaveLabelDetailsRecords();
        WHSShipmentWaveLabelDetailsTracker::unregisterEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTtsAbort</Name>
				<Source><![CDATA[
    private static void onTtsAbort()
    {
        WHSShipmentWaveLabelDetailsTracker::unregisterEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unregisterEventHandler</Name>
				<Source><![CDATA[
    private static void unregisterEventHandler()
    {
        if (WHSShipmentWaveLabelDetailsTracker::isEventHandlerRegistered())
        {
            appl.onTtsNotifyAbort -= eventhandler(WHSShipmentWaveLabelDetailsTracker::onTtsAbort);
            appl.onTtsNotifyPreCommit -= eventhandler(WHSShipmentWaveLabelDetailsTracker::onTtsPreCommit);
        }

        shipmentWaveLabelDetailsMap = null;
        appl.globalCache().clear(classStr(WHSShipmentWaveLabelDetailsTracker));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>