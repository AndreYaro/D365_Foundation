<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rDeferralsProposal extends RunBaseBatch implements BatchRetryable
{
    QueryRun             queryRun;
    FiscalCalendarPeriod fiscalCalendarPeriod;
    RDeferralsTransDate  runDate;
    DialogField          dialogRunDate;
    LedgerJournalId      journalNum;
    RDeferralsJournal    rDeferralsJournal;
    RDeferralsBook       deferralsBook;

    DialogField          dialogCorrect;
    DialogField          dialogCorrectedPeriod;
    DialogGroup          corrGroup;

    Correct_RU           correct;
    CorrectedPeriod_RU   correctedPeriod;

    LedgerDimensionDefaultAccount offsetDefaultAccount;

    #define.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        runDate,
        journalNum,
        correct,
        correctedPeriod
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmOffsetDefaultAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmOffsetDefaultAccount(LedgerDimensionDefaultAccount _offsetDefaultAccount = offsetDefaultAccount)
    {
        offsetDefaultAccount = _offsetDefaultAccount;
        return offsetDefaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCorrectionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds correction group to dialog form.
    /// </summary>
    /// <param name="_dialog">
    /// Dialog form.
    /// </param>
    protected void addCorrectionGroup(Dialog _dialog)
    {
        corrGroup = _dialog.addGroup("@GLS105434");
        dialogCorrect = _dialog.addField(extendedTypeStr(Correct_RU));

        dialogCorrectedPeriod = _dialog.addField(extendedTypeStr(CorrectedPeriod_RU));
        dialogCorrectedPeriod.enabled(false);

        dialogCorrect.control().registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(rDeferralsProposal, dialogCorrect_modified),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFirstDate</Name>
				<Source><![CDATA[
    protected RDeferralsTransDate checkFirstDate(RDeferralsTransDate _deferralsTransDate,
                                                 RDeferralsId        _deferralsId)
    {
        RDeferralsTransDate rDeferralsTransDate = _deferralsTransDate;

        this.initFiscalCalendarPeriod();

        if (rDeferralsTransDate < fiscalCalendarPeriod.StartDate)
        {
            info(strfmt("@GLS103763", _deferralsId, rDeferralsTransDate, fiscalCalendarPeriod.StartDate));
            rDeferralsTransDate = fiscalCalendarPeriod.StartDate;
        }

        return rDeferralsTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    public void createJournalLines()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deferralsTransType</Name>
				<Source><![CDATA[
    public RDeferralsTransType deferralsTransType()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase  dialog = super();

        dialog.caption("@GLS103764");

        dialogRunDate = dialog.addField(extendedtypestr(RDeferralsTransDate), "@SYS67");
        dialogRunDate.value(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogCorrect_modified</Name>
				<Source><![CDATA[
    private boolean dialogCorrect_modified(FormCheckBoxControl _ctrl)
    {
        boolean ret = _ctrl.modified();

        if (ret)
        {
            dialogCorrectedPeriod.enabled(dialogCorrect.value());

            if (dialogCorrect.value())
            {
                dialogCorrectedPeriod.value(dialogRunDate.value());
            }
            else
            {
                dialogCorrectedPeriod.value(dateNull());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            runDate = dialogRunDate.value();

            if (dialogCorrect)
            {
                correct = dialogCorrect.value();

                if (correct)
                {
                    correctedPeriod   = dialogCorrectedPeriod.value();
                }
            }

            if (runDate != this.checkFirstDate(runDate, ""))
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    private void initFiscalCalendarPeriod()
    {
        LedgerFiscalCalendarPeriod ledgerPeriod;

        select firstonly fiscalCalendarPeriod
            order by StartDate
            where fiscalCalendarPeriod.FiscalCalendar     == CompanyInfoHelper::fiscalCalendarRecId() &&
                  fiscalCalendarPeriod.Type               == FiscalPeriodType::Operating
        exists join ledgerPeriod
            where ledgerPeriod.Ledger               == Ledger::current() &&
                  ledgerPeriod.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId &&
                  ledgerPeriod.Status               == FiscalPeriodStatus::Open;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes correction operation.
    /// </summary>
    public void initJournalCorrection()
    {
        TransDate accountingDate;

        if (correctedPeriod)
        {
            accountingDate = runDate;

            this.initFiscalCalendarPeriod();

            if (accountingDate < fiscalCalendarPeriod.StartDate)
            {
                accountingDate = fiscalCalendarPeriod.StartDate;
            }

            rDeferralsJournal.parmCorrect(true);
            rDeferralsJournal.parmAccountingDate(accountingDate);

            runDate = correctedPeriod;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    public void initParameters(LedgerJournalId     _journalNum,
                               RDeferralsTransDate _runDate,
                               RDeferralsBook      _rDeferralsBook)
    {
        this.journalNum(_journalNum);
        rDeferralsJournal = new RDeferralsJournal(this.journalNum(), this.deferralsTransType());
        runDate           = _runDate;
        deferralsBook     = _rDeferralsBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalNum</Name>
				<Source><![CDATA[
    protected LedgerJournalId journalNum(LedgerJournalId _journalNum = journalNum)
    {
        journalNum = _journalNum;
        return journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>QueryRun</c> object.
    /// </summary>
    protected void initQueryRun()
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        query = new Query();
        queryBuildDataSource = query.addDataSource(tablenum(RDeferralsBook));

        queryBuildDataSource.addRange(fieldnum(RDeferralsBook, DeferralsId));
        queryBuildDataSource.addRange(fieldnum(RDeferralsBook, DeferralsBookId));
        queryBuildDataSource.addRange(fieldnum(RDeferralsBook, DeferralsGroupId));

        queryBuildRange = queryBuildDataSource.addRange(fieldnum(RDeferralsBook, Status));
        queryBuildRange.status(RangeStatus::Hidden);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrect</Name>
				<Source><![CDATA[
    public Correct_RU parmCorrect(Correct_RU _correct = correct)
    {
        correct = _correct;
        return correct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedPeriod</Name>
				<Source><![CDATA[
    public CorrectedPeriod_RU parmCorrectedPeriod(CorrectedPeriod_RU _correctedPeriod = correctedPeriod)
    {
        correctedPeriod = _correctedPeriod;
        return correctedPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>QueryRun</c> object that is used by a <c>QueryPrompt</c> object.
    /// </summary>
    /// <returns>
    /// The <c>QueryRun</c> object that is used by the <c>QueryPrompt</c> object .
    /// </returns>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(QueryRun _runProposal = queryRun)
    {
        RDeferralsTransDate currentRunDate = runDate;

        rDeferralsJournal = new RDeferralsJournal(this.journalNum(), this.deferralsTransType());

        ttsbegin;

        while (_runProposal.next())
        {
            deferralsBook = _runProposal.get(tablenum(RDeferralsBook));
            if (correct)
            {
                this.initJournalCorrection();
            }
            this.createJournalLines();
            runDate = currentRunDate;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job will be run with the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// true if the batch job is run on the AOS server by using the submitted user account; otherwise,
    /// false.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a select button is added to the dialog box.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version = conpeek(_packedClass, 1);
        container       packedQuery = conpeek(_packedClass, conlen(_packedClass));
        LedgerJournalId journalId = journalNum;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                journalNum = journalId ? journalId : journalNum;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun  = new SysQueryRun(packedQuery);
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret && correct)
        {
            if (!correctedPeriod)
            {
                ret = checkFailed(strfmt("@SYS110217", "@GLS111794"));
            }

            if (runDate && (runDate < correctedPeriod))
            {
                ret = checkFailed(strfmt("@SYS91558", "@SYS67", "@GLS111794"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    #define.storno("storno")
    public static RDeferralsProposal construct(RDeferralsTransType  _transType,
                                               ParmTxt              _parm = "")
    {
        RDeferralsProposalFactoryAttribute attr = new RDeferralsProposalFactoryAttribute(_transType, _parm);
        RDeferralsProposal rDeferralsProposal = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(RDeferralsProposal), attr) as RDeferralsProposal;

        if(!rDeferralsProposal)
        {
            throw error("@SYS67581");
        }

        if (!rDeferralsProposal.queryRun())
        {
            rDeferralsProposal.initQueryRun();
        }

        return rDeferralsProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@GLS103764";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RDeferralsProposal  rDeferralsProposal  = RDeferralsProposal::construct(_args.parmEnum(), _args.parm());
        LedgerJournalTable  ledgerJournalTable  = _args.caller().ledgerJournalTable();
        FormDataSource      formDataSource      = FormDataUtil::getFormDataSource(_args.record());

        rDeferralsProposal.journalNum(ledgerJournalTable.JournalNum);

        if (rDeferralsProposal.prompt())
        {
            rDeferralsProposal.runOperation();
        }

        formDataSource.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundAmount</Name>
				<Source><![CDATA[
    public static AmountCur roundAmount(RDeferralsBook      _rDeferralsBook,
                                        AmountCur           _amountCur)
    {
        return RDeferralsTableMethodIterator::roundAmount(RDeferralsProfile::find(_rDeferralsBook.DeferralsProfile),
                                                                                  _amountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>