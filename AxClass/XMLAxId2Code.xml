<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XmlAxId2Code</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>XMLAxId2Code</c> class is used to convert actual values (such as currency code) to an
/// internal value in the sending company, which will be converted back to an actual value in receiving
/// company.
/// </summary>
/// <remarks>
/// This class is used in the first conversion call of the <see cref="T:TradeInterCompanyConv" />.
/// </remarks>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class XmlAxId2Code
{
    str                 xmlCode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findXMLCode</Name>
				<Source><![CDATA[
    private void findXMLCode(XMLMapCode     _xmlMapCode,
                             tableId        _tableId,
                             anytype        _primaryKey,
                             ExtCodeId      _extCodeId,
                             anytype        _foreignKey)
    {
        anytype     primaryKey;

        switch (_xmlMapCode)
        {
            case XMLMapCode::NotSpecified:
                xmlCode = '';
                break;

            case XMLMapCode::Our:
                switch (_tableId)
                {
                    case tablenum(InventTable):
                        primaryKey = ExtCodeTable::findRelationPrimaryKey2PrimaryKey(_tableId, _primaryKey);
                        switch (typeof(primaryKey))
                        {
                            case Types::Container:
                                xmlCode = conpeek(primaryKey, 1);
                                break;

                            default:
                                xmlCode = primaryKey;
                        }
                        break;

                    case tablenum(MarkupTable):
                        xmlCode = conpeek(ExtCodeTable::findRelationPrimaryKey2PrimaryKey(_tableId, _primaryKey), 2);
                        break;

                    default:
                        xmlCode = ExtCodeTable::findRelationPrimaryKey2PrimaryKey(_tableId, _primaryKey);
                }
                break;

            case XMLMapCode::ExternalCode:
                xmlCode = ExtCodeTable::findRelationPrimaryKey2Value(_tableId, _primaryKey, _extCodeId);
                break;

            case XMLMapCode::Your:
                xmlCode = ExtCodeTable::findRelationPrimaryKey2YourKey(_tableId, _foreignKey);
                break;

            case XMLMapCode::ISOCode:
                xmlCode = ExtCodeTable::findRelationPrimaryKey2ISOCode(_tableId, _primaryKey);
                break;

            case XMLMapCode::ExternalItemId:
                xmlCode = ExtCodeTable::findRelationPrimaryKey2ExternalItemId(_tableId, _primaryKey, _foreignKey);
                break;

            case XMLMapCode::BarCode:
                xmlCode = ExtCodeTable::findRelationPrimaryKey2BarCode(_tableId, _primaryKey, _foreignKey);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(XMLMapCode _xmlMapCode, tableId _tableId, anytype _primaryKey, ExtCodeId _extCodeId, anytype _foreignKey)
    {
        this.findXMLCode    (_xmlMapCode, _tableId, _primaryKey, _extCodeId, _foreignKey);
        this.validateXMLCode(_xmlMapCode, _tableId, _primaryKey, _extCodeId, _foreignKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateXMLCode</Name>
				<Source><![CDATA[
    private void validateXMLCode(XMLMapCode     _xmlMapCode,
                                 tableId        _tableId,
                                 anytype        _primaryKey,
                                 ExtCodeId      _extCodeId,
                                 anytype        _foreignKey)
    {
        if (!xmlCode)
        {
            switch (_xmlMapCode)
            {
                case XMLMapCode::NotSpecified:
                    throw error(strfmt("@SYS75935", tableid2pname(_tableId)));

                case XMLMapCode::Our:
                    throw error(ExtCodeTable::primaryKey2PrimaryKeyNotExists(_tableId, _primaryKey));

                case XMLMapCode::ExternalCode:
                    throw error(ExtCodeTable::primaryKey2ValueAliasNotExists(_tableId, _primaryKey, _extCodeId));

                case XMLMapCode::Your:
                    throw error(ExtCodeTable::primaryKey2YourKeyNotExists(_tableId, _foreignKey));

                case XMLMapCode::ISOCode:
                    throw error(ExtCodeTable::primaryKey2ISOCodeNotExists(_tableId, _primaryKey));

                case XMLMapCode::ExternalItemId:
                    throw error(ExtCodeTable::primaryKey2ExternalItemIdNotExists(_tableId, _primaryKey, _foreignKey));

                case XMLMapCode::BarCode:
                    throw error(ExtCodeTable::primaryKey2BarCodeNotExists(_tableId, _primaryKey, _foreignKey));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>xmlCode</Name>
				<Source><![CDATA[
    str xmlCode()
    {
        return xmlCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newXMLMapCurrencyCode</Name>
				<Source><![CDATA[
    static XMLAxId2Code newXMLMapCurrencyCode(XMLMapCurrencyCode _xmlMapCurrencyCode, tableId _tableId, anytype _primaryKey, ExtCodeId _extCodeId, anytype _foreignKey)
    {
        return new XMLAxId2Code(XMLMap::xmlMapCurrencyCode2Code(_xmlMapCurrencyCode), _tableId, _primaryKey, _extCodeId, _foreignKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newXMLMapExternalCode</Name>
				<Source><![CDATA[
    static XMLAxId2Code newXMLMapExternalCode(XMLMapExternalCode _xmlMapExternalCode, tableId _tableId, anytype _primaryKey, ExtCodeId _extCodeId, anytype _foreignKey)
    {
        return new XMLAxId2Code(XMLMap::xmlMapExternalCode2Code(_xmlMapExternalCode), _tableId, _primaryKey, _extCodeId, _foreignKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newXMLMapItemId</Name>
				<Source><![CDATA[
    static XMLAxId2Code newXMLMapItemId(XMLMapItemId _xmlMapItemId, tableId _tableId, anytype _primaryKey, ExtCodeId _extCodeId, anytype _foreignKey)
    {
        return new XMLAxId2Code(XMLMap::xmlMapItemId2Code(_xmlMapItemId), _tableId, _primaryKey, _extCodeId, _foreignKey);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>