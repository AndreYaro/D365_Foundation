<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TradeFormHelper</c> class is a form helper class for the methods that are frequently used
/// across the forms.
/// </summary>
class TradeFormHelper
{    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCalledFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the caller is a specified form.
    /// </summary>
    /// <param name="_args">
    /// An argument object that is passed from the caller.
    /// </param>
    /// <param name="_formName">
    /// The name of the form for which to check; optional.
    /// </param>
    /// <returns>
    /// true if the caller is the specified form; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the value of the <paramref name="_formName" /> parameter is not specified, any form will be
    /// accepted.
    /// </remarks>
    public static boolean isCalledFromForm(Args _args, formName _formName='')
    {
        Object          caller;
        FormRun callerForm;

        if (_args)
        {
            caller = _args.caller();

            if (caller && caller is FormRun)
            {
                callerForm = caller;

                if (_formName == '' || callerForm.name() == _formName)
                {
                    return true;
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromListPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a form was called from a list page.
    /// </summary>
    /// <param name="_args">
    /// An argument object that is passed from the caller.
    /// </param>
    /// <returns>
    /// true if the form was called from a list page; otherwise, false.
    /// </returns>
    public static boolean isCalledFromListPage(Args _args)
    {
        Object          myCaller;
        FormRun callerForm;

        if (_args)
        {
            myCaller = _args.caller();
            if (myCaller && myCaller is FormRun)
            {
                callerForm = myCaller;
                if (callerForm.form().formTemplate() == 1) // ListPage
                {
                    return true;
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditableNotGridView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a form was opened in <c>Edit</c> mode and not in a <c>Grid</c> view.
    /// </summary>
    /// <param name="_args">
    /// Arguments passed to the form.
    /// </param>
    /// <returns>
    /// true if the form was opened in <c>Edit</c> mode and not in a <c>Grid</c> view; Otherwise, false.
    /// </returns>
    public static boolean isEditableNotGridView(Args _args)
    {
        return _args.formViewOption() != FormViewOption::Grid && _args.openMode() == OpenMode::Edit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOpenedForNew</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if form was opened for the intent of creating new record.
    /// </summary>
    /// <param name="_args">
    /// Arguments passed to the form.
    /// </param>
    /// <returns>
    /// true if the form was opened in <c>ForNew</c> mode; Otherwise, false.
    /// </returns>
    public static boolean isOpenedForNew(Args _args)
    {
        return _args.parmEnumType() == enumNum(FormOpenMode)
               && _args.parmEnum()  == FormOpenMode::ForNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOpenedForNewFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if form was opened for the intent of creating new record, and with the given caller form.
    /// </summary>
    /// <param name="_args">
    /// Arguments passed to the form.
    /// </param>
    /// <param name="formName">
    /// Caller form name; optional.
    /// </param>
    /// <returns>
    /// true if the form was opened in <c>ForNew</c> mode and from the specified form; Otherwise, false.
    /// </returns>
    public static boolean isOpenedForNewFromForm(Args _args, FormName formName='')
    {
        return TradeFormHelper::isOpenedForNew(_args)
               && TradeFormHelper::isCalledFromForm(_args, formName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>