<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustRecurrenceInvoiceWFCancelManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustRecurrenceInvoiceWFCancelManager</c> class is used to cancel a recurrence invoice
///    workflow.
/// </summary>
/// <remarks>
///    This class inherits from the <c>WorkflowCancelManager</c> class and handles the update of the
///    recurrence invoice record when the cancel button has been clicked. The recurrence invoice is set
///    into a pending cancellation status and this is presented to the user immediately. The default
///    dialog and cancel functionality from the <c>WorkflowCancelManager</c> class is reused.
/// </remarks>
public class CustRecurrenceInvoiceWFCancelManager extends WorkflowCancelManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the workflow status to pending cancellation on the recurrence invoice that is canceled.
    /// </summary>
    /// <param name="_args">
    /// An argument that references the record to be canceled.
    /// </param>
    /// <remarks>
    /// This method rereads the record from the data source because this is changed when submitting a
    /// workflow and these changes might not be refreshed in the client.The workflow state and workflow
    /// status is set to pending cancellation and the record is updated and refreshed in the client.
    /// </remarks>
    public void updateDocument(Args _args)
    {
        CustRecurrenceInvoiceGroup custRecurrenceInvoiceGroup;
        if (_args.record() is CustRecurrenceInvoiceGroup)
        {
            custRecurrenceInvoiceGroup = _args.record() as CustRecurrenceInvoiceGroup;
            custRecurrenceInvoiceGroup.reread();
        }
        else if (_args.record() is WorkflowTrackingStatusTable)
        {
            WorkflowTrackingStatusTable workflowTrackingStatusTable = _args.record() as WorkflowTrackingStatusTable;
            workflowTrackingStatusTable.reread();
            if (workflowTrackingStatusTable.ContextTableId == tableNum(CustRecurrenceInvoiceGroup))
            {
                custRecurrenceInvoiceGroup = CustRecurrenceInvoiceGroup::find(workflowTrackingStatusTable.ContextRecId);
            }
        }
        if (custRecurrenceInvoiceGroup)
        {
            //this function sets both status / state.
            CustRecurrenceInvoiceGroup::setWorkflowState(custRecurrenceInvoiceGroup.RecId, CustFreeInvoiceWFApprovalState::PendingCancellation);
 
            FormDataSource custRecurrenceInvoiceGroup_ds = FormDataUtil::getFormDataSource(custRecurrenceInvoiceGroup);
            if (custRecurrenceInvoiceGroup_ds)
            {
                custRecurrenceInvoiceGroup_ds.research(true);
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
 
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustRecurrenceInvoiceWFCancelManager construct()
    {
        return new CustRecurrenceInvoiceWFCancelManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustRecurrenceInvoiceWFCancelManager workflowCancelManager = CustRecurrenceInvoiceWFCancelManager::construct();

        workflowCancelManager.run(_args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>