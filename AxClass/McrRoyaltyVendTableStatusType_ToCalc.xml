<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrRoyaltyVendTableStatusType_ToCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRRoyaltyVendTableStatusType_ToCalc</c> class holds the royalty processes
/// specific to rebate with status 'ToCalculate'.
/// </summary>
public class McrRoyaltyVendTableStatusType_ToCalc extends MCRRoyaltyVendTableStatusType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>royaltyStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the royalty status as 'ToCalculate'.
    /// </summary>
    /// <returns>
    /// The rebate status.
    /// </returns>
    public MCRRoyaltyVendTableStatus royaltyStatus()
    {
        return MCRRoyaltyVendTableStatus::ToCalculate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCumulated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the royalty cumulation process.
    /// </summary>
    public void runCumulated()
    {
        #OCCRetryCount

        MCRRoyaltyVendTable     mcrRoyaltyVendTmpTable;
        MCRRoyaltyContract      mcrRoyaltyContract;
        real                    minValueSumQtyQuery;
        real                    minValueSumAmountQuery;

        MCRRoyaltyTable         mcrRoyaltyTable;

        // don't re-calculate if this royalty is not directly derived from a sales invoice
        if (!mcrRoyaltyVendTable.CustInvoiceTransRefRecId)
        {
            return;
        }

        mcrRoyaltyTable             = MCRRoyaltyTable::findByRecId(mcrRoyaltyVendTable.mcrRoyaltyTableRefRecId);
        mcrRoyaltyContract          = mcrRoyaltyTable.royaltyContract();

        mcrRoyaltyVendTmpTable      = mcrRoyaltyVendTable.royaltyTableSum();

        if (mcrRoyaltyContract.UnitType == MCRRoyaltyUnitType::CWUnit)
        {
            if (mcrRoyaltyVendTmpTable.cwSalesInvoicedQty   == 0
                && mcrRoyaltyVendTable.RoyaltyStatus        == MCRRoyaltyVendTableStatus::ToCalculate)
            {
                minValueSumQtyQuery = abs(mcrRoyaltyVendTable.cwSalesInvoicedQty);
            }
            else
            {
                minValueSumQtyQuery = abs(mcrRoyaltyVendTmpTable.cwSalesInvoicedQty);
            }
        }
        else
        {
            if (mcrRoyaltyVendTmpTable.SalesInvoicedQty     == 0
                && mcrRoyaltyVendTable.RoyaltyStatus        == MCRRoyaltyVendTableStatus::ToCalculate)
            {
                minValueSumQtyQuery = abs(mcrRoyaltyVendTable.SalesInvoicedQty);
            }
            else
            {
                minValueSumQtyQuery = abs(mcrRoyaltyVendTmpTable.SalesInvoicedQty);
            }
        }

        if (mcrRoyaltyVendTmpTable.SalesAmount              == 0
            && mcrRoyaltyVendTable.RoyaltyStatus            == MCRRoyaltyVendTableStatus::ToCalculate)
        {
            minValueSumAmountQuery  = abs(mcrRoyaltyVendTable.SalesAmount);
        }
        else
        {
            minValueSumAmountQuery  = abs(mcrRoyaltyVendTmpTable.SalesAmount);
        }

        try
        {
            ttsbegin;

            // any royalties that are still 0, do not update status from 'to calculate' to 'calculated'
            if (mcrRoyaltyVendTable.RoyaltyValue != 0)
            {
                this.updateRoyaltiesToCumulate();
            }

            mcrRoyaltyVendTable.cumulateGapRoyaltyTotal(minValueSumQtyQuery, minValueSumAmountQuery);

            ttscommit;
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the royalty status to 'Calculated'.
    /// </summary>
    public void setNextStatus()
    {
        mcrRoyaltyVendTable.RoyaltyStatus   = MCRRoyaltyVendTableStatus::Calculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRoyaltiesToCumulate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and sets the royalty amounts after cumulating.
    /// </summary>
    public void updateRoyaltiesToCumulate()
    {
        this.setNextStatus();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>MCRRoyaltyVendTableStatusType_ToCalc</c> class.
    /// </summary>
    /// <returns>
    /// A new class instance.
    /// </returns>
    public static MCRRoyaltyVendTableStatusType_ToCalc construct()
    {
        return new MCRRoyaltyVendTableStatusType_ToCalc();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>