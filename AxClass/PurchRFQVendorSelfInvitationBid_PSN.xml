<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQVendorSelfInvitationBid_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQVendorSelfInvitationBid_PSN</c> class opens the bid reply form and sets the bid in progress when a vendor bids on an
/// RFQ from <c>PurchRFQPublishOpenCase_PSN</c> form. It also creates a link between the vendor and the RFQ in <c>PurchRFQVendLink</c>,
/// <c>PurchRFQTable</c> and <c>PurchRFQReplyTable</c> tables.
/// </summary>
public class PurchRFQVendorSelfInvitationBid_PSN extends RunBase
{
    PurchRFQCaseTable currentRFQCaseTable;
    VendTable currentSelectedVendor;
    
    DialogRunbase   vendorSelectionDialog;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRFQVendorSelfInvitationBid_PSN construct()
    {
        return new PurchRFQVendorSelfInvitationBid_PSN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performSendAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the send action from the RFQ published open case.
    /// </summary>
    /// <param name = "_purchRFQCaseTable">RFQ case record</param>
    protected void performSendAction(PurchRFQCaseTable _purchRFQCaseTable)
    {
        if (_purchRFQCaseTable)
        {
            Args args = new Args();
            args.record(_purchRFQCaseTable);
            args.parmEnumType(enumNum(PurchRFQUpdateType));
            args.parmEnum(PurchRFQUpdateType::Sent);

            IdentifierName className  = classStr(FormletterService);
            IdentifierName methodName = methodStr(FormletterService, postRequestForQuoteSend);

            args.parm(strFmt('%1.%2', className, methodName));
            args.caller(this);

            new MenuFunction(menuItemActionStr(PurchRFQFormLetterSelfInvite_PSN), MenuItemType::Action).run(args);
        }
        else
        {
            throw error(strFmt("@SYS54195", methodStr(PurchRFQVendorSelfInvitationBid_PSN, performSendAction)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRFQCaseTable</Name>
				<Source><![CDATA[
    public PurchRFQCaseTable parmRFQCaseTable(PurchRFQCaseTable _rfqCaseTable = currentRFQCaseTable)
    {
        currentRFQCaseTable = _rfqCaseTable;

        return currentRFQCaseTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendTable</Name>
				<Source><![CDATA[
    public VendTable parmVendTable(VendTable _vendTable = currentSelectedVendor)
    {
        currentSelectedVendor = _vendTable;

        return currentSelectedVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args
            && _args.record()
            && _args.record().TableId == tableNum(PurchRFQCaseTable))
        {           
            if (!VendTable::getVendorCount())
            {
                throw error ("@SCM:VendorPortalInsufficientRights");
            }

            PurchRFQVendorSelfInvitationBid_PSN purchRFQPublishOpenCase = PurchRFQVendorSelfInvitationBid_PSN::construct();

            purchRFQPublishOpenCase.parmRFQCaseTable(_args.record());

            if (VendTable::getVendorCount() == 1)
            {
                purchRFQPublishOpenCase.parmVendTable(VendTable::getFirstOrNull());

                PurchRFQVendorSelfInvitationBid_PSN::startBidForVendorOnRFQCase(purchRFQPublishOpenCase);
            }
            else if (purchRFQPublishOpenCase.prompt())
            {
                purchRFQPublishOpenCase.getFromDialog();

                PurchRFQVendorSelfInvitationBid_PSN::startBidForVendorOnRFQCase(purchRFQPublishOpenCase);
            }
        }
        else
        {
            throw error(Error::missingParameter(_args));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startBidForVendorOnRFQCase</Name>
				<Source><![CDATA[
    private static void startBidForVendorOnRFQCase(PurchRFQVendorSelfInvitationBid_PSN _vendorSelfInvitaionBid)
    {
        if (_vendorSelfInvitaionBid.parmVendTable() && _vendorSelfInvitaionBid.allowBidForVendor())
        {
            // Call the process to start bid
            _vendorSelfInvitaionBid.processRfqCaseBid();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowBidForVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the current RFQ case allow the selected vendor to bid.
    /// </summary>
    /// <returns>true if the vendor can bid on the RFQ case; otherwise, false.</returns>
    private boolean allowBidForVendor()
    {
        if (currentRFQCaseTable.AllowBidByInvitationOnly
            && !PurchRFQVendLink::doVendorExistForRFQCase(currentRFQCaseTable.RFQCaseId, currentSelectedVendor.AccountNum))
        {
            return checkFailed("@PublicSector:PurchRFQCannotSelectNotInvitedVendorError");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRfqCaseBid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the bid in progress for a given RFQ record in <c>PurchRFQTable</c>.
    /// </summary>
    protected void processRfqCaseBid()
    {
        if (!currentSelectedVendor)
        {
            throw error(Error::missingRecord(tableStr(VendTable)));
        }

        PurchRFQTable purchRFQTable = PurchRFQTable::findRFQCaseId(currentRFQCaseTable.RFQCaseId, currentSelectedVendor.AccountNum);

        if (!purchRFQTable)
        {
            // Create record in PurchRFQVendLink table
            PurchRFQVendLink purchRFQVendLink = PurchRFQVendLink::findOrCreatePurchRFQVendLink(currentRFQCaseTable.RFQCaseId, currentSelectedVendor);
                    
            // Call PurchRFQFormLetter class to create record in PurchRFQTable and PurchRFQReplyTable
            this.performSendAction(currentRFQCaseTable);

            purchRFQTable = PurchRFQTable::findRFQCaseId(currentRFQCaseTable.RFQCaseId, purchRFQVendLink.VendAccount);
        }

        PurchRFQReplyEdit::openRFQReplyForEdit(purchRFQTable, PurchRFQReplyProgressStatus::VendorEditing, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        vendorSelectionDialog = Dialog::newFormnameRunbase(formstr(PurchRFQVendorSelectSelfInvitationBid_PSN), this);

        return vendorSelectionDialog;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the selected vendor.
    /// </summary>
    /// <returns>true after getting the vendor selection from the dialog.</returns>
    public boolean getFromDialog()
    {
        Object formRunObj = vendorSelectionDialog.formRun();

        this.parmVendTable(VendTable::find(formRunObj.getSelectedVendor()));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {   
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>