<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetWarehouseTransferQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class will allow creation of Latvian packing slip documents for the warehouse transfer for multiple assets.
/// </summary>
public class AssetWarehouseTransferQuery extends RunBase
{
    private OMDepartmentRecId departmentId;
    private HcmResponsibleRecId responsibleId;
    private AssetLocationId location;
    private QueryRun queryRun;
    private LtDocNumberingCode numberingCode;
    private PackingSlipId packingSlipNum;
    private PackingSlipAutoNumbering packingSlipAutoNumbering;
    private LedgerJournalNameId journalName;
    private AssetTransDate transDate;

    private const Version CurrentVersion = 1;

    #LOCALMACRO.CurrentList
        departmentId,
        responsibleId,
        location,
        packingSlipAutoNumbering,
        numberingCode,
        packingSlipNum
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(
        DialogRunbase _dialog        = null,
        boolean       _forceOnClient = false)
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formstr(AssetWarehouseTransfer), this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDialogControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the allow edit property of the controls specified in the parameters list.
    /// </summary>
    /// <param name="_autoNumbering">
    /// The <c>AutoNumbering</c> checkbox control used on the form.
    /// </param>
    /// <param name="_numbering">
    /// The numbering dropdown control on the referenced form.
    /// </param>
    /// <param name="_packingSlipNumber">
    /// The <c>PackingSlipNumber</c> control on the referenced form.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initDialogControls(
        FormCheckBoxControl _autoNumbering,
        FormStringControl _numbering,
        FormStringControl _packingSlipNumber)
    {
        // If the autonumbering is disabled, number sequence based control will be disabled.
        if (!LtInvoiceAutoNumberingGroups::autoNumberingForFixedAssetPackingSlip())
        {
            _autoNumbering.allowEdit(false);
            _numbering.allowEdit(false);
            _packingSlipNumber.allowEdit(true);
        }
        else
        {
            _autoNumbering.allowEdit(true);
            _numbering.allowEdit(packingSlipAutoNumbering);
            _packingSlipNumber.allowEdit(!packingSlipAutoNumbering);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls initialization of the query used during the transfer process.
    /// </summary>
    public void initParmDefault()
    {
        super();
        this.initQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query used during the transfer process.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initQuery()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbdsAssetTable;

        qbdsAssetTable = query.addDataSource(tablenum(AssetTable));
        qbdsAssetTable.addRange(fieldnum(AssetTable, AssetId));
        qbdsAssetTable.addRange(fieldnum(AssetTable, AssetGroup));
        qbdsAssetTable.addSortField(fieldnum(AssetTable, Department));
        qbdsAssetTable.addSortField(fieldnum(AssetTable, WorkerResponsible));
        qbdsAssetTable.addSortField(fieldnum(AssetTable, Location));
        qbdsAssetTable.addSortField(fieldnum(AssetTable, AssetGroup));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDepartmentId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public OMDepartmentRecId parmDepartmentId(OMDepartmentRecId _departmentId = departmentId)
    {
        departmentId = _departmentId;
        return departmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetLocationId parmLocation(AssetLocationId _location = location)
    {
        location = _location;
        return location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberingCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LtDocNumberingCode parmNumberingCode(LtDocNumberingCode _numberingCode = numberingCode)
    {
        numberingCode = _numberingCode;
        return numberingCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackingSlipAutoNumbering</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PackingSlipAutoNumbering parmPackingSlipAutoNumbering(PackingSlipAutoNumbering _packingSlipAutoNumbering = packingSlipAutoNumbering)
    {
        packingSlipAutoNumbering = _packingSlipAutoNumbering;
        return packingSlipAutoNumbering;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackingSlipNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PackingSlipId parmPackingSlipNum(PackingSlipId _packingSlipNum = packingSlipNum)
    {
        packingSlipNum = _packingSlipNum;
        return packingSlipNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResponsibleId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public HcmResponsibleRecId parmResponsibleId(HcmResponsibleRecId _responsibleId = responsibleId)
    {
        responsibleId = _responsibleId;
        return responsibleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>QueryRun</c> object.
    /// </summary>
    /// <returns>
    /// The <c>QueryRun</c> object.
    /// </returns>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the class to its default state.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>RunBaseSetDefault</c> class.
    /// </remarks>
    public void reset()
    {
        super();
        this.initQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the transfer process.
    /// </summary>
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLT00020, funcName());

        AssetWarehouseTransfer assetWarehouseTranfser;
        List                assetList = new List(Types::Int64);
        AssetTable          assetTable;
        LtAssetPackingSlip  ltAssetPackingSlip;

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(AssetTable)))
            {
                assetTable = queryRun.get(tablenum(AssetTable)) as AssetTable;
                assetList.addEnd(assetTable.RecId);
            }
        }

        if (!assetList.empty())
        {
            assetWarehouseTranfser = new AssetWarehouseTransfer(assetList);
            assetWarehouseTranfser.parmDepartmentId(departmentId);
            assetWarehouseTranfser.parmResponsibleId(responsibleId);
            assetWarehouseTranfser.parmLocation(location);
            assetWarehouseTranfser.parmPackingSlipNum(packingSlipNum);
            assetWarehouseTranfser.parmNumberingCode(numberingCode);

            assetWarehouseTranfser.run();

            ltAssetPackingSlip = assetWarehouseTranfser.getLtAssetPackingSlip();
            if (ltAssetPackingSlip.RecId)
            {
                info(strFmt("@GLS223035", ltAssetPackingSlip.PackingSlipNo));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a default button is to be added to the dialog.
    /// </summary>
    /// <returns>
    /// false by default.
    /// </returns>
    /// <remarks>
    /// If you click this button it will reset the parameters to the default that is specified in the
    /// <c>initParmDefault</c> method. If you change the return value to true, it will add the button.
    /// </remarks>
    public boolean showDefaultButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a select button is to be added to the dialog.
    /// </summary>
    /// <returns>
    /// false by default.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> value. If you change the return value to true, the button will be
    /// added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer        version = conpeek(_packedClass, 1);
        PackedQueryRun packedQuery;

        switch (version)
        {
            case CurrentVersion:
                [ version, #CurrentList, packedQuery ] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value entered by the user.
    /// </summary>
    /// <param name="calledFrom">
    /// The object that called this method; optional.
    /// </param>
    /// <returns>
    /// true is entered values are correct, otherwise false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;

        if (location && !AssetLocation::exist(location))
        {
            ret = checkFailed(strfmt("@GLS113510", location));
        }

        if (packingSlipNum && LtAssetPackingSlip::existPackingSlipId(packingSlipNum))
        {
            ret = checkFailed(strFmt("@GLS113506", packingSlipNum));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AssetWarehouseTransferQuery construct()
    {
        return new AssetWarehouseTransferQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@GLS113514";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        AssetWarehouseTransferQuery assetWarehouseTransferQuery = AssetWarehouseTransferQuery::construct();

        assetWarehouseTransferQuery.initQuery();

        if (assetWarehouseTransferQuery.prompt())
        {
            assetWarehouseTransferQuery.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>