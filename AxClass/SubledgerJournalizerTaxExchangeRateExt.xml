<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalizerTaxExchangeRateExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// An extension class for SublegerJournalizer to handle sales tax exchange rate difference amount.
/// </summary>
[
    SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_VendorInvoice), SourceDocument_VendorInvoice::VendorInvoice),
    SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_CustomerInvoice), SourceDocument_CustomerInvoice::CustomerFreeTextInvoice),
    SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_ProjAdvancedJournal), SourceDocument_ProjAdvancedJournal::ProjAdvancedJournal)
]
class SubledgerJournalizerTaxExchangeRateExt extends SubledgerJournalizerExtension
{
    RecordInsertList                taxDifferenceInsertList;
    Map                             salesTaxDifferenceAmountMap;
    Map                             taxDifferenceLedgerDimensionCache;
    AccountingDistributionTmpTax    taxDifferenceDistributionTmp;
    CurrencyCode                    accountingCurrencyCode;
    boolean                         differenceAmountExist;
    boolean                         isTaxBankExchangeRateDifferenceV2FlightEnabled;

    private boolean isTaxSpecificExchRateEnabledByTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addedStandardAccDistTmpEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>insertedDistributedTmp</c> event.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    ///  An instance of <c>SourceDocumentLineItem</c> class.
    /// </param>
    /// <param name="_accountingDistributionTmp">
    ///  An <c>AccountingDistributionTmp</c> record.
    /// </param>
    /// <param name="_allocationFactor">
    ///  An allocation factor.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void addedStandardAccDistTmpEventHandler(
        SourceDocumentLineItem _sourceDocumentLineItem,
        AccountingDistributionTmp _accountingDistributionTmp,
        AllocationFactor _allocationFactor)
    {
        if (_sourceDocumentLineItem is TaxSourceDocSublineItem
            && (_sourceDocumentLineItem.parmTransactionCurrencyCode() != accountingCurrencyCode
                || isTaxSpecificExchRateEnabledByTable))
        {
            this.loadTaxExchangeRateDifferenceAmount(
                _accountingDistributionTmp,
                _allocationFactor,
                this.getTaxExchangeRateDifferenceAmount(_sourceDocumentLineItem));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustTaxDifferenceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the actual allocated tax difference amount to meet to the total amount.
    /// </summary>
    private void adjustTaxDifferenceAmount()
    {
        MapEnumerator               mapEnumerator;
        TaxAmount                   taxAmountDifferenceTotal;
        TaxAmount                   taxAmountDifferenceTotalRep;
        TaxCode                     taxCode;
        TaxDirection                taxDirection;
        SourceDocumentLineRecId     sourceDocumentLineRecId;
        TaxAmount                   taxAmountNotAllocated;
        TaxAmount                   taxAmountNotAllocatedRep;

        mapEnumerator = salesTaxDifferenceAmountMap.getEnumerator();
        // Check the difference amount is fully distributed.
        while (mapEnumerator.moveNext())
        {
            sourceDocumentLineRecId = mapEnumerator.currentKey();
            if (isTaxBankExchangeRateDifferenceV2FlightEnabled)
            {
                [taxAmountDifferenceTotal, taxCode, taxDirection, taxAmountDifferenceTotalRep] = mapEnumerator.currentValue();
            }
            else
            {
                [taxAmountDifferenceTotal, taxCode, taxDirection] = mapEnumerator.currentValue();
            }

            if (taxAmountDifferenceTotal
                || (taxAmountDifferenceTotalRep != 0
                    && isTaxSpecificExchRateEnabledByTable))
            {
                select sum(SourceDocLineAccountingCurrencyAmount), sum(SourceDocLineReportingCurrencyAmount)
                    from taxDifferenceDistributionTmp
                    where taxDifferenceDistributionTmp.SourceDocumentLine == sourceDocumentLineRecId
                        && taxDifferenceDistributionTmp.TaxCode == taxCode
                        && taxDifferenceDistributionTmp.Offset == NoYes::No;

                taxAmountNotAllocated = taxAmountDifferenceTotal - taxDifferenceDistributionTmp.SourceDocLineAccountingCurrencyAmount;
                if (isTaxBankExchangeRateDifferenceV2FlightEnabled)
                {
                    taxAmountNotAllocatedRep = taxAmountDifferenceTotalRep - taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount;
                }

                if (taxAmountNotAllocated != 0)
                {
                    if (taxAmountDifferenceTotal < 0)
                    {
                        select forupdate firstonly SourceDocLineAccountingCurrencyAmount, SourceDocLineReportingCurrencyAmount
                            from taxDifferenceDistributionTmp
                            order by SourceDocLineAccountingCurrencyAmount asc
                            where taxDifferenceDistributionTmp.SourceDocumentLine == sourceDocumentLineRecId
                                && taxDifferenceDistributionTmp.TaxCode == taxCode
                                && taxDifferenceDistributionTmp.Offset == NoYes::No;

                        taxDifferenceDistributionTmp.SourceDocLineAccountingCurrencyAmount =
                            taxDifferenceDistributionTmp.SourceDocLineAccountingCurrencyAmount + taxAmountNotAllocated;
                        if (isTaxBankExchangeRateDifferenceV2FlightEnabled && !isTaxSpecificExchRateEnabledByTable)
                        {
                            taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount =
                                taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount + taxAmountNotAllocatedRep;
                        }

                        taxDifferenceDistributionTmp.doUpdate();

                        select forupdate firstonly SourceDocLineAccountingCurrencyAmount, SourceDocLineReportingCurrencyAmount
                            from taxDifferenceDistributionTmp
                            order by SourceDocLineAccountingCurrencyAmount desc
                            where taxDifferenceDistributionTmp.SourceDocumentLine == sourceDocumentLineRecId
                                && taxDifferenceDistributionTmp.TaxCode == taxCode
                                && taxDifferenceDistributionTmp.Offset == NoYes::Yes;

                        taxDifferenceDistributionTmp.SourceDocLineAccountingCurrencyAmount =
                            taxDifferenceDistributionTmp.SourceDocLineAccountingCurrencyAmount - taxAmountNotAllocated;
                        if (isTaxBankExchangeRateDifferenceV2FlightEnabled && !isTaxSpecificExchRateEnabledByTable)
                        {
                            taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount =
                                taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount - taxAmountNotAllocatedRep;
                        }

                        taxDifferenceDistributionTmp.doUpdate();
                    }
                    else
                    {
                        select forupdate firstonly SourceDocLineAccountingCurrencyAmount, SourceDocLineReportingCurrencyAmount
                            from taxDifferenceDistributionTmp
                            order by SourceDocLineAccountingCurrencyAmount desc
                            where taxDifferenceDistributionTmp.SourceDocumentLine == sourceDocumentLineRecId
                                && taxDifferenceDistributionTmp.TaxCode == taxCode
                                && taxDifferenceDistributionTmp.Offset == NoYes::No;

                        taxDifferenceDistributionTmp.SourceDocLineAccountingCurrencyAmount =
                            taxDifferenceDistributionTmp.SourceDocLineAccountingCurrencyAmount + taxAmountNotAllocated;
                        if (isTaxBankExchangeRateDifferenceV2FlightEnabled && !isTaxSpecificExchRateEnabledByTable)
                        {
                            taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount =
                                taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount + taxAmountNotAllocatedRep;
                        }

                        taxDifferenceDistributionTmp.doUpdate();

                        select forupdate firstonly SourceDocLineAccountingCurrencyAmount, SourceDocLineReportingCurrencyAmount
                            from taxDifferenceDistributionTmp
                            order by SourceDocLineAccountingCurrencyAmount asc
                            where taxDifferenceDistributionTmp.SourceDocumentLine == sourceDocumentLineRecId
                                && taxDifferenceDistributionTmp.TaxCode == taxCode
                                && taxDifferenceDistributionTmp.Offset == NoYes::Yes;

                        taxDifferenceDistributionTmp.SourceDocLineAccountingCurrencyAmount =
                            taxDifferenceDistributionTmp.SourceDocLineAccountingCurrencyAmount - taxAmountNotAllocated;
                        if (isTaxBankExchangeRateDifferenceV2FlightEnabled && !isTaxSpecificExchRateEnabledByTable)
                        {
                            taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount =
                                taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount - taxAmountNotAllocatedRep;
                        }

                        taxDifferenceDistributionTmp.doUpdate();
                    }
                }

                if (taxAmountNotAllocatedRep != 0
                    && isTaxBankExchangeRateDifferenceV2FlightEnabled
                    && isTaxSpecificExchRateEnabledByTable)
                {
                    if (taxAmountDifferenceTotalRep < 0)
                    {
                        select forupdate firstonly SourceDocLineReportingCurrencyAmount
                            from taxDifferenceDistributionTmp
                            order by SourceDocLineReportingCurrencyAmount asc
                            where taxDifferenceDistributionTmp.SourceDocumentLine == sourceDocumentLineRecId
                                && taxDifferenceDistributionTmp.TaxCode == taxCode
                                && taxDifferenceDistributionTmp.Offset == NoYes::No;

                        taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount =
                            taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount + taxAmountNotAllocatedRep;

                        taxDifferenceDistributionTmp.doUpdate();

                        select forupdate firstonly SourceDocLineReportingCurrencyAmount
                            from taxDifferenceDistributionTmp
                            order by SourceDocLineReportingCurrencyAmount desc
                            where taxDifferenceDistributionTmp.SourceDocumentLine == sourceDocumentLineRecId
                                && taxDifferenceDistributionTmp.TaxCode == taxCode
                                && taxDifferenceDistributionTmp.Offset == NoYes::Yes;

                        taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount =
                            taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount - taxAmountNotAllocatedRep;

                        taxDifferenceDistributionTmp.doUpdate();
                    }
                    else
                    {
                        select forupdate firstonly SourceDocLineReportingCurrencyAmount
                            from taxDifferenceDistributionTmp
                            order by SourceDocLineReportingCurrencyAmount desc
                            where taxDifferenceDistributionTmp.SourceDocumentLine == sourceDocumentLineRecId
                                && taxDifferenceDistributionTmp.TaxCode == taxCode
                                && taxDifferenceDistributionTmp.Offset == NoYes::No;

                        taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount =
                            taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount + taxAmountNotAllocatedRep;

                        taxDifferenceDistributionTmp.doUpdate();

                        select forupdate firstonly SourceDocLineReportingCurrencyAmount
                            from taxDifferenceDistributionTmp
                            order by SourceDocLineReportingCurrencyAmount asc
                            where taxDifferenceDistributionTmp.SourceDocumentLine == sourceDocumentLineRecId
                                && taxDifferenceDistributionTmp.TaxCode == taxCode
                                && taxDifferenceDistributionTmp.Offset == NoYes::Yes;

                        taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount =
                            taxDifferenceDistributionTmp.SourceDocLineReportingCurrencyAmount - taxAmountNotAllocatedRep;

                        taxDifferenceDistributionTmp.doUpdate();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDifferenceLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger dimension for sales tax difference amount.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code used to get the ledger posting group.
    /// </param>
    /// <param name="_taxDirection">
    /// The tax direction.
    /// </param>
    /// <param name="_originalLedgerDimension">
    /// The ledger dimension from the original tax.
    /// </param>
    /// <param name="_offset">
    /// The indicator to find the offset ledger dimension.
    /// </param>
    /// <returns>
    /// The ledger dimension for sales tax difference amount.
    /// </returns>
    private LedgerDimensionAccount getTaxDifferenceLedgerDimension(
        TaxCode                 _taxCode,
        TaxDirection            _taxDirection,
        LedgerDimensionAccount  _originalLedgerDimension,
        boolean                 _offset = false)
    {
        LedgerDimensionAccount          taxDifferenceLedgerDimension;
        TaxLedgerAccountGroup           taxLedgerAccountGroup;
        LedgerDimensionDefaultAccount   sourceLedgerDimension;

        if (taxDifferenceLedgerDimensionCache.exists(_taxCode))
        {
            taxLedgerAccountGroup = taxDifferenceLedgerDimensionCache.lookup(_taxCode);
        }
        else
        {
            taxLedgerAccountGroup = TaxLedgerAccountGroup::find(TaxTable::findAccountGroup(_taxCode));
            taxLedgerAccountGroup.validateAccountForTaxDirection(_taxDirection, false, true, false);
            taxDifferenceLedgerDimensionCache.insert(_taxCode, taxLedgerAccountGroup);
        }

        if (_taxDirection == TaxDirection::IncomingTax_W)
        {
            if (_offset)
            {
                sourceLedgerDimension = taxLedgerAccountGroup.TaxIncomingDiffOffsetLedgerDimension;
            }
            else
            {
                sourceLedgerDimension = taxLedgerAccountGroup.TaxIncomingDifferenceLedgerDimension;
            }
        }
        else if (_taxDirection == TaxDirection::OutgoingTax_W)
        {
            if (_offset)
            {
                sourceLedgerDimension = taxLedgerAccountGroup.TaxOutgoingDiffOffsetLedgerDimension;
            }
            else
            {
                sourceLedgerDimension = taxLedgerAccountGroup.TaxOutgoingDifferenceLedgerDimension;
            }
        }
        else if (_taxDirection == TaxDirection::UseTax)
        {
            if (_offset)
            {
                sourceLedgerDimension = taxLedgerAccountGroup.TaxOutgoingDifferenceLedgerDimension;
            }
            else
            {
                sourceLedgerDimension = taxLedgerAccountGroup.TaxIncomingDifferenceLedgerDimension;
            }
        }

        taxDifferenceLedgerDimension = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(sourceLedgerDimension,
                                                                                                        _originalLedgerDimension);

        return taxDifferenceLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxExchangeRateDifferenceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>addedAccountingDistTmpEventHandler</c> event.
    /// </summary>
    /// <param name="_taxSourceDocSublineItem">
    ///  An instance of <c>TaxSourceDocSublineItem</c> class.
    /// </param>
    /// <returns>
    /// The container of tax difference amount
    /// </returns>
    private container getTaxExchangeRateDifferenceAmount(TaxSourceDocSublineItem _taxSourceDocSublineItem)
    {
        container               salesTaxDifferenceAmount;
        SourceDocumentLineRecId sourceDocumentLineRecId;

        sourceDocumentLineRecId = _taxSourceDocSublineItem.parmSourceDocumentLine().RecId;

        if (salesTaxDifferenceAmountMap.exists(sourceDocumentLineRecId))
        {
            salesTaxDifferenceAmount = salesTaxDifferenceAmountMap.lookup(sourceDocumentLineRecId);
        }
        else
        {
            if (isTaxBankExchangeRateDifferenceV2FlightEnabled)
            {
                salesTaxDifferenceAmount = [
                    _taxSourceDocSublineItem.parmTaxDifferenceAmount(),
                    _taxSourceDocSublineItem.parmTaxCode(),
                    _taxSourceDocSublineItem.parmTaxDifferenceTaxDirection(),
                    _taxSourceDocSublineItem.parmTaxDifferenceReportingCurrencyAmount()];
            }
            else
            {
                salesTaxDifferenceAmount = [
                    _taxSourceDocSublineItem.parmTaxDifferenceAmount(),
                    _taxSourceDocSublineItem.parmTaxCode(),
                    _taxSourceDocSublineItem.parmTaxDifferenceTaxDirection()];
            }
            salesTaxDifferenceAmountMap.insert(sourceDocumentLineRecId, salesTaxDifferenceAmount);
        }

        return salesTaxDifferenceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    public void initialize()
    {
        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled())
        {
            SourceDocumentHeader sourceDocumentHeader = this.parmSubledgerJournalizer().parmSourceDocument().parmSourceDocumentHeader();
            TaxUncommitted taxUncommitted;
            SourceDocumentLine sourceDocumentLine;
            RefTableId sourceTableId;
            RefRecId sourceRecId;

            select firstonly HeadingTableId, HeadingRecId, RecId from taxUncommitted
                exists join sourceDocumentLine
                    where sourceDocumentLine.RecId == taxUncommitted.SourceDocumentLine
                        && sourceDocumentLine.SourceDocumentHeader == sourceDocumentHeader.RecId;

            sourceTableId = taxUncommitted.HeadingTableId;
            sourceRecId = taxUncommitted.HeadingRecId;

            if (taxUncommitted.RecId == 0)
            {
                TaxTrans taxTrans;
                select firstonly SourceTableId, SourceRecId, RecId from taxTrans
                    exists join sourceDocumentLine
                        where sourceDocumentLine.RecId == taxTrans.SourceDocumentLine
                            && sourceDocumentLine.SourceDocumentHeader == sourceDocumentHeader.RecId;

                if (taxTrans.SourceTableId == tableNum(MarkupTrans))
                {
                    MarkupTrans markupTrans = MarkupTrans::findRecId(taxTrans.SourceRecId);
                    sourceTableId = markupTrans.TransTableId;
                    sourceRecId = markupTrans.TransRecId;
                }
                else
                {
                    sourceTableId = taxTrans.SourceTableId;
                    sourceRecId = taxTrans.SourceRecId;
                }
            }

            isTaxSpecificExchRateEnabledByTable = TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByTable(sourceTableId, sourceRecId);
        }

        if (TaxParameters::isBankExchRateEnabled_W() || isTaxSpecificExchRateEnabledByTable)
        {
            super();

            salesTaxDifferenceAmountMap = new Map(Types::Int64, Types::Container);
            taxDifferenceInsertList = new RecordInsertList(tableNum(AccountingDistributionTmpTax), true, true, true, false, true, taxDifferenceDistributionTmp);
            taxDifferenceLedgerDimensionCache = new Map(Types::String, Types::Record);
            accountingCurrencyCode = Ledger::accountingCurrency();
            isTaxBankExchangeRateDifferenceV2FlightEnabled = TaxBankExchangeRateDifferenceV2Flight::instance().isEnabled();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadedAccountingDistTmpEventHanlder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>loadedAccountingDistributionTmp</c> event.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void loadedAccountingDistTmpEventHanlder()
    {
        if (differenceAmountExist)
        {
            taxDifferenceInsertList.insertDatabase();
            this.adjustTaxDifferenceAmount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadedSubledgerJourTmpDetailEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>loadedSubledgerJournalTmpDetail</c> event.
    /// </summary>
    /// <param name="_accountingEvent">
    /// An accounting event.
    /// </param>
    /// <param name="_subledgerJournalAccountEntryTmpDetail">
    /// A <c>SubledgerJournalAccountEntryTmpDetail</c> table which holds the temporary subledger records.
    /// </param>
    /// <param name="_sourceDocumentLineItemTmp">
    /// A <c>SourceDocumentLineItemTmp</c> table.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void loadedSubledgerJourTmpDetailEventHandler(
        AccountingEvent                         _accountingEvent,
        SubledgerJournalAccountEntryTmpDetail   _subledgerJournalAccountEntryTmpDetail,
        SourceDocumentLineItemTmp               _sourceDocumentLineItemTmp)
    {
        if (differenceAmountExist)
        {
            insert_recordset _subledgerJournalAccountEntryTmpDetail(
                    AccountingDistribution,
                    AccountingEvent,
                    AccountingDate,
                    ParentDistribution,
                    LedgerDimension,
                    PostingType,
                    TransferPolicy,
                    IsCorrection,
                    DebitCredit,
                    AccountingCurrencyAmount,
                    ReportingCurrencyAmount,
                    SubledgerJournalEntryType,
                    FiscalCalendarPeriod,
                    TransactionCurrencyCode,
                    LegalEntity,
                    Ledger,
                    PostingLayer,
                    LedgerName,
                    AccountingCurrency,
                    ReportingCurrency)
                select AccountingDistribution,
                    AccountingEvent,
                    AccountingDate,
                    ParentDistribution,
                    LedgerDimension,
                    PostingType,
                    TransferPolicy,
                    IsCorrection,
                    AmountSign,
                    SourceDocLineAccountingCurrencyAmount,
                    SourceDoclineReportingCurrencyAmount,
                    SubledgerJournalEntryType
                    from taxDifferenceDistributionTmp
                    where taxDifferenceDistributionTmp.AccountingEvent == _accountingEvent.RecId
                join FiscalCalendarPeriod,
                    CurrencyCode,
                    LegalEntity,
                    Ledger,
                    PostingLayer,
                    LedgerName,
                    AccountingCurrency,
                    ReportingCurrency
                from _sourceDocumentLineItemTmp
                where _sourceDocumentLineItemTmp.SourceDocumentLine == taxDifferenceDistributionTmp.SourceDocumentLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxExchangeRateDifferenceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the tax difference information to a record insert list.
    /// </summary>
    /// <param name="_accountingDistributionTmp">
    /// An <c>AccountingDistributionTmp</c> record being added.
    /// </param>
    /// <param name="_allocationFactor">
    /// An allocation factor.
    /// </param>
    /// <param name="_salesTaxDifferenceAmount">
    /// A container which holds tax difference amount and its related information.
    /// </param>
    private void loadTaxExchangeRateDifferenceAmount(
        AccountingDistributionTmp   _accountingDistributionTmp,
        AllocationFactor            _allocationFactor,
        container                   _salesTaxDifferenceAmount)
    {
        AccountingDistributionTmpTax  taxDifferenceTmp;
        AccountingDistributionTmpTax  taxDifferenceTmpOffset;
        TaxAmount       taxAmountDifferenceTotal;
        TaxAmount       taxAmountDifferenceTotalRep;
        TaxAmount       taxAmountDifferenceAllocated;
        TaxAmount       taxAmountDifferenceAllocatedRep;
        boolean         useSameAmountSign;
        TaxCode         taxCode;
        TaxDirection    taxDirection;

        if (isTaxBankExchangeRateDifferenceV2FlightEnabled)
        {
            [taxAmountDifferenceTotal, taxCode, taxDirection, taxAmountDifferenceTotalRep] = _salesTaxDifferenceAmount;
        }
        else
        {
            [taxAmountDifferenceTotal, taxCode, taxDirection] = _salesTaxDifferenceAmount;
        }

        if (taxAmountDifferenceTotal
            || (isTaxSpecificExchRateEnabledByTable
                && taxAmountDifferenceTotalRep))
        {
            taxDifferenceTmp.initFromAccountingDistributionTmp(_accountingDistributionTmp);
            taxDifferenceTmp.TaxCode = taxCode;

            taxAmountDifferenceAllocated = taxAmountDifferenceTotal * _allocationFactor;
            taxDifferenceTmp.SourceDocLineAccountingCurrencyAmount = CurrencyExchange::round(taxAmountDifferenceAllocated, _accountingDistributionTmp.AccountingCurrency);

            if (isTaxBankExchangeRateDifferenceV2FlightEnabled)
            {
                taxAmountDifferenceAllocatedRep = taxAmountDifferenceTotalRep * _allocationFactor;
                taxDifferenceTmp.SourceDocLineReportingCurrencyAmount = CurrencyExchange::round(taxAmountDifferenceAllocatedRep, _accountingDistributionTmp.ReportingCurrency);
            }

            taxDifferenceTmp.LedgerDimension = this.getTaxDifferenceLedgerDimension(
                taxCode, taxDirection, _accountingDistributionTmp.LedgerDimension);

            useSameAmountSign = taxAmountDifferenceTotal * _accountingDistributionTmp.SourceDocLineAccountingCurrencyAmount > 0 ? true : false;

            if (useSameAmountSign)
            {
                taxDifferenceTmp.AmountSign = _accountingDistributionTmp.AmountSign;
            }
            else
            {
                if (_accountingDistributionTmp.AmountSign == DebitCredit::Debit)
                {
                    taxDifferenceTmp.AmountSign = DebitCredit::Credit;
                }
                else
                {
                    taxDifferenceTmp.AmountSign = DebitCredit::Debit;
                }
            }
            this.applyFixedDimensions(taxDifferenceTmp);
            taxDifferenceInsertList.add(taxDifferenceTmp);

            // Offset data creation
            taxDifferenceTmpOffset.data(taxDifferenceTmp);

            taxDifferenceTmpOffset.Offset = NoYes::Yes;
            taxDifferenceTmpOffset.SourceDocLineAccountingCurrencyAmount = -taxDifferenceTmpOffset.SourceDocLineAccountingCurrencyAmount;
            if (isTaxBankExchangeRateDifferenceV2FlightEnabled)
            {
                taxDifferenceTmpOffset.SourceDocLineReportingCurrencyAmount = -taxDifferenceTmpOffset.SourceDocLineReportingCurrencyAmount;
            }
            taxDifferenceTmpOffset.LedgerDimension = this.getTaxDifferenceLedgerDimension(
                taxCode, taxDirection, _accountingDistributionTmp.LedgerDimension, true);

            if (taxDifferenceTmp.AmountSign == DebitCredit::Debit)
            {
                taxDifferenceTmpOffset.AmountSign = DebitCredit::Credit;
            }
            else
            {
                taxDifferenceTmpOffset.AmountSign = DebitCredit::Debit;
            }
            this.applyFixedDimensions(taxDifferenceTmpOffset);
            taxDifferenceInsertList.add(taxDifferenceTmpOffset);
            differenceAmountExist = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFixedDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the applicable fixed dimensions to the current record.
    /// </summary>
    /// <returns>
    /// true if the current record was modified; otherwise, false.
    /// </returns>
    private boolean applyFixedDimensions(AccountingDistributionTmpTax _accountingDistributionTmpTax)
    {
        LedgerDimensionAccount previous;
    
        previous = _accountingDistributionTmpTax.LedgerDimension;
    
        _accountingDistributionTmpTax.LedgerDimension =
            LedgerDimensionFacade::serviceApplyFixedDimensions(_accountingDistributionTmpTax.LedgerDimension);

        if (_accountingDistributionTmpTax.LedgerDimension != previous)
        {
            _accountingDistributionTmpTax.LedgerDimension =
                LedgerDimensionFacade::serviceCreateLedgerDimension(_accountingDistributionTmpTax.LedgerDimension);
        }
    
        return previous != _accountingDistributionTmpTax.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to subledger journalizer events.
    /// </summary>
    protected void subscribe()
    {
        if (!subledgerJournalizer.addedStandardAccountingDistributionTmp)
        {
            subledgerJournalizer.addedStandardAccountingDistributionTmp += eventhandler(this.addedStandardAccDistTmpEventHandler);
            subledgerJournalizer.loadedAccountingDistributionTmp += eventhandler(this.loadedAccountingDistTmpEventHanlder);
            subledgerJournalizer.loadedSubledgerJourTmpDetailForAddition += eventhandler(this.loadedSubledgerJourTmpDetailEventHandler);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>