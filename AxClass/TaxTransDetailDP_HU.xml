<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransDetailDP_HU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>TaxTransDetailDP_HU</c> class is the data provider for the <c>TaxTransDetail_HU</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(TaxTransDetail_HU)),
    SRSReportParameterAttribute(classStr(TaxTransDetailContract_HU))
]
public class TaxTransDetailDP_HU extends SrsReportDataProviderPreProcessTempDB
{
    TaxTransDetailTmp_HU                taxTransDetailTmp_HU;
    TaxTrans                            taxTrans;
    TaxTransRefundableVAT               taxTransRefundableVAT;

    CustTrans                           custTrans;
    VendTrans                           vendTrans;

    GeneralJournalAccountEntry          generalJournalAccountEntry;
    TaxTransGeneralJournalAccountEntry  taxTransGeneralJournalAccountEntry;

    LedgerJournalACType                 ledgerJournalACType;

    Reversed                            includeReversed;
    ReportModeDetails_W                 reportMode_W;

    ExchRate                            exchRate_W;
    ExchRate                            exchRate;
    CustInvoiceJour                     custInvoiceJour;
    VendInvoiceJour                     vendInvoiceJour;
    ProjInvoiceJour                     projInvoiceJour;

    private const int ExchangeRateMultiplier = 100;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches the value to appear in the "Description" column of the report. Depends on the source of the tax transaction.
    /// </summary>
    /// <returns>
    ///     Name of the customer, vendor, or Text field of the <c>GeneralJournalAccountEntry</c> table.
    /// </returns>
    private str description()
    {
        str ret;

        switch (taxTrans.Source)
        {
            case TaxModuleType::SalesInvoice,
                 TaxModuleType::FreeTxtInvoice,
                 TaxModuleType::CustCollectionLetter,
                 TaxModuleType::CustInterestNote,
                 TaxModuleType::ProjectInvoice :
                ret = CustTable::find(custTrans.AccountNum).name();
                break;
            case TaxModuleType::PurchInvoice,
                 TaxModuleType::Purch :
                ret = VendTable::find(vendTrans.AccountNum).name();
                break;
            case TaxModuleType::Voucher :
                if (vendTrans)
                {
                    ret = VendTable::find(vendTrans.AccountNum).name();
                }
                else
                {
                    if (custTrans)
                    {
                        ret = CustTable::find(custTrans.AccountNum).name();
                    }
                    else
                    {
                        ret = generalJournalAccountEntry.Text;
                    }
                }
                break;
            default :
                ret = generalJournalAccountEntry.Text;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRate_W</Name>
				<Source><![CDATA[
    private ExchRate getExchRate_W()
    {
        ExchRate    ret;

        switch (reportMode_W)
        {
            case ReportModeDetails_W::Accounting :
                ret = exchRate;
                break;

            case ReportModeDetails_W::Reporting :
                ret = exchRate_W;
                break;

            case ReportModeDetails_W::Original :
                ret = 0;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxExchangeRate</Name>
				<Source><![CDATA[
    private ExchRate getSalesTaxExchangeRate(
        RefTableId _refTableId,
        RefRecId _refRecId)
    {
        ExchRate ret;
        // At the present time only exchange rate between transaction currency and accounting currency is saved in the system.
        // For this particular case we need exchange rate between transaction currency and SALES TAX currency, and there is no place
        // in the system where this exchange rate would be stored, so we have to retrieve exchange rate from appropriate amounts.

        if (taxTrans.SourceBaseAmountCur)
        {
            ret = taxTrans.TaxBaseAmountCur / taxTrans.SourceBaseAmountCur * ExchangeRateMultiplier;
        }
        if (!ret && taxTrans.SourceRegulateAmountCur)
        {
            ret = taxTrans.TaxAmountCur / taxTrans.SourceRegulateAmountCur * ExchangeRateMultiplier;
        }
        

        return ret ? ret : ExchangeRateMultiplier;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextTrans</Name>
				<Source><![CDATA[
    private void getNextTrans()
    {
        LedgerJournalTrans  ledgerJournalTrans;

        custTrans.clear();
        vendTrans.clear();
        generalJournalAccountEntry.clear();

        switch (taxTrans.Source)
        {
            case TaxModuleType::SalesInvoice,
                 TaxModuleType::FreeTxtInvoice,
                 TaxModuleType::CustCollectionLetter,
                 TaxModuleType::CustInterestNote,
                 TaxModuleType::ProjectInvoice,
                 TaxModuleType::Sales :
                select firstonly RecId, AccountNum from custTrans
                    where custTrans.Voucher   == taxTrans.Voucher &&
                          custTrans.TransDate == taxTrans.TransDate;

                ledgerJournalACType = LedgerJournalACType::Cust;

                select firstonly ExchRate
                    from    custInvoiceJour
                    where   custInvoiceJour.LedgerVoucher   == taxTrans.Voucher &&
                            custInvoiceJour.InvoiceDate     == taxTrans.TransDate;

                exchRate    = custInvoiceJour.ExchRate;
                exchRate_W  = this.getSalesTaxExchangeRate(tableNum(CustInvoiceJour), custInvoiceJour.RecId);

                break;

            case TaxModuleType::Project :
                select firstonly ExchRate
                    from    projInvoiceJour
                    where   projInvoiceJour.LedgerVoucher   == taxTrans.Voucher &&
                            projInvoiceJour.InvoiceDate     == taxTrans.TransDate;

                exchRate    = projInvoiceJour.ExchRate;
                exchRate_W  = this.getSalesTaxExchangeRate(tableNum(ProjInvoiceJour), projInvoiceJour.RecId);

                break;

            case TaxModuleType::PurchInvoice,
                 TaxModuleType::Purch :
                select firstonly RecId, AccountNum from vendTrans
                    where vendTrans.Voucher   == taxTrans.Voucher &&
                          vendTrans.TransDate == taxTrans.TransDate;

                 ledgerJournalACType = LedgerJournalACType::Vend;

                 select firstonly ExchRate
                    from    vendInvoiceJour
                    where   vendInvoiceJour.LedgerVoucher   == taxTrans.Voucher &&
                            vendInvoiceJour.InvoiceDate     == taxTrans.TransDate;

                 exchRate   = vendInvoiceJour.ExchRate;
                 exchRate_W = this.getSalesTaxExchangeRate(tableNum(VendInvoiceJour), vendInvoiceJour.RecId);

                 break;

            case TaxModuleType::Voucher :
                select firstonly RecId, AccountNum from vendTrans
                    where vendTrans.Voucher   == taxTrans.Voucher &&
                          vendTrans.TransDate == taxTrans.TransDate;

                if (vendTrans)
                {
                    ledgerJournalACType = LedgerJournalACType::Vend;

                    select firstonly ExchRate
                        from    vendInvoiceJour
                        where   vendInvoiceJour.LedgerVoucher   == taxTrans.Voucher &&
                                vendInvoiceJour.InvoiceDate     == taxTrans.TransDate;

                    if (vendInvoiceJour)
                    {
                        exchRate   = vendInvoiceJour.ExchRate;
                        exchRate_W = this.getSalesTaxExchangeRate(tableNum(VendInvoiceJour), vendInvoiceJour.RecId);
                    }
                    else
                    {
                        select firstonly ExchRate
                            from    ledgerJournalTrans
                            where   ledgerJournalTrans.Voucher      == taxTrans.Voucher    &&
                                    ledgerJournalTrans.TransDate    == taxTrans.TransDate;

                        exchRate   = ledgerJournalTrans.ExchRate;
                        exchRate_W = this.getSalesTaxExchangeRate(tableNum(LedgerJournalTrans), ledgerJournalTrans.RecId);
                    }
                }
                else
                {
                    select firstonly RecId, AccountNum from custTrans
                        where custTrans.Voucher   == taxTrans.Voucher &&
                              custTrans.TransDate == taxTrans.TransDate;

                    if (custTrans)
                    {
                        ledgerJournalACType = LedgerJournalACType::Cust;

                        select firstonly ExchRate
                            from    custInvoiceJour
                            where   custInvoiceJour.LedgerVoucher   == taxTrans.Voucher &&
                                    custInvoiceJour.InvoiceDate     == taxTrans.TransDate;
                        if (custInvoiceJour)
                        {
                            exchRate   = custInvoiceJour.ExchRate;
                            exchRate_W = this.getSalesTaxExchangeRate(tableNum(CustInvoiceJour), custInvoiceJour.RecId);
                        }
                        else
                        {
                            select firstonly ExchRate
                                from    ledgerJournalTrans
                                where   ledgerJournalTrans.Voucher      == taxTrans.Voucher    &&
                                        ledgerJournalTrans.TransDate    == taxTrans.TransDate;

                            exchRate   = ledgerJournalTrans.ExchRate;
                            exchRate_W = this.getSalesTaxExchangeRate(tableNum(LedgerJournalTrans), ledgerJournalTrans.RecId);
                        }
                    }
                    else
                    {
                        select firstonly Text from generalJournalAccountEntry
                            exists join RecId from taxTransGeneralJournalAccountEntry
                                where taxTransGeneralJournalAccountEntry.TaxTrans == taxTrans.RecId
                                && taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId;

                        ledgerJournalACType = LedgerJournalACType::Ledger;

                        select firstonly ExchRate
                            from    ledgerJournalTrans
                            where   ledgerJournalTrans.Voucher      == taxTrans.Voucher    &&
                                    ledgerJournalTrans.TransDate    == taxTrans.TransDate;

                        exchRate   = ledgerJournalTrans.ExchRate;
                        exchRate_W = this.getSalesTaxExchangeRate(tableNum(LedgerJournalTrans), ledgerJournalTrans.RecId);
                    }
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmount_W</Name>
				<Source><![CDATA[
    private TaxBase getTaxAmount_W()
    {
        TaxBase    ret;

        switch (reportMode_W)
        {
            case ReportModeDetails_W::Accounting :
                ret = taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST;
                break;

            case ReportModeDetails_W::Reporting :
                ret = this.taxAmount_W() - taxTrans.TaxInCostPriceCur;
                break;

            case ReportModeDetails_W::Original :
                ret = taxTrans.SourceRegulateAmountCur - taxTrans.TaxInCostPriceRegulated;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxBaseAmount_W</Name>
				<Source><![CDATA[
    private TaxBase getTaxBaseAmount_W()
    {
        TaxBase    ret;

        switch (reportMode_W)
        {
            case ReportModeDetails_W::Accounting :
                if (taxTrans.TaxAmount)
                {
                    ret = CurrencyExchangeHelper::amount(taxTrans.TaxBaseAmount  - taxTrans.TaxBaseAmount * (taxTrans.TaxInCostPriceMST/taxTrans.TaxAmount));
                }
                else
                {
                    ret = taxTrans.TaxBaseAmount;
                }
                break;

            case ReportModeDetails_W::Reporting :
                if (taxTrans.TaxAmountCur)
                {
                    ret = CurrencyExchangeHelper::amount(this.taxBaseAmount_W() - this.taxBaseAmount_W() * (taxTrans.TaxInCostPriceCur/taxTrans.TaxAmountCur));
                }
                else
                {
                    ret = this.taxBaseAmount_W();
                }
                break;

            case ReportModeDetails_W::Original :
                // Corrections in this block have not been covered by <c>TaxTransDetailHURepExchRateFromTaxForRepCurModeFlight</c>
                // bacause they are not related to a business logic correction related to the flight. It is just a correction
                // of explicitly incorrect calculations (dividing amounts in different currencies to calculate in cost price tax share)
                if (taxTrans.SourceBaseAmountCurRegulated)
                {
                    if (taxTrans.SourceRegulateAmountCur)
                    {
                        ret = CurrencyExchangeHelper::amount(taxTrans.SourceBaseAmountCurRegulated - taxTrans.SourceBaseAmountCurRegulated * ((taxTrans.TaxInCostPriceRegulated/taxTrans.SourceRegulateAmountCur)), taxTrans.SourceCurrencyCode);
                    }
                    else
                    {
                        ret = taxTrans.SourceBaseAmountCurRegulated;
                    }
                }
                else
                {
                    if(taxTrans.SourceTaxAmountCur)
                    {
                        ret = CurrencyExchangeHelper::amount(taxTrans.SourceBaseAmountCur - taxTrans.SourceBaseAmountCur * ((taxTrans.TaxInCostPrice/taxTrans.SourceTaxAmountCur)), taxTrans.SourceCurrencyCode);
                    }
                    else
                    {
                        ret = taxTrans.SourceBaseAmountCur;
                    }
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransDetailTmp_HU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>TaxTransDetailTmp_HU</c> table.
    /// </summary>
    /// <returns>
    ///     The <c>TaxTransDetailTmp_HU</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxTransDetailTmp_HU))
    ]
    public TaxTransDetailTmp_HU getTaxTransDetailTmp_HU()
    {
        select * from taxTransDetailTmp_HU;
        return taxTransDetailTmp_HU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    private void insert()
    {
        DimensionAttributeValueCombination  davc;
        MainAccount                         mainAcc;

        select firstonly LedgerDimension from taxTransGeneralJournalAccountEntry
            where taxTransGeneralJournalAccountEntry.TaxTrans == taxTrans.RecId;

        select firstonly MainAccountId from mainAcc
            exists join davc
                where davc.RecId == taxTransGeneralJournalAccountEntry.LedgerDimension
                    && davc.MainAccount == mainAcc.RecId;

        taxTransDetailTmp_HU.clear();

        taxTransDetailTmp_HU.TaxDirection                           = taxTrans.TaxDirection;
        taxTransDetailTmp_HU.TaxCode                                = taxTrans.TaxCode;
        taxTransDetailTmp_HU.VatDueDate_W                           = taxTrans.taxTrans_W().VatDueDate_W;
        taxTransDetailTmp_HU.SettleDate                             = taxTransRefundableVAT.SettleDate;
        taxTransDetailTmp_HU.Text                                   = this.description();
        taxTransDetailTmp_HU.JournalACType                          = ledgerJournalACType;
        taxTransDetailTmp_HU.Voucher                                = taxTrans.Voucher;
        taxTransDetailTmp_HU.SourceInvoiceId                        = taxTrans.sourceInvoiceNo();
        taxTransDetailTmp_HU.OperationsLedgerDimension              = taxTransGeneralJournalAccountEntry.LedgerDimension;
        taxTransDetailTmp_HU.OperationsLedgerDimensionDisplayValue  = mainAcc.MainAccountId;
        taxTransDetailTmp_HU.CurrencyCode                           = taxTrans.SourceCurrencyCode;
        taxTransDetailTmp_HU.ExchRate_W                             = this.getExchRate_W() / ExchangeRateMultiplier;
        taxTransDetailTmp_HU.TaxBaseAmount                          = this.getTaxBaseAmount_W();
        taxTransDetailTmp_HU.TaxAmountNoCost                        = this.getTaxAmount_W();
        taxTransDetailTmp_HU.TaxAmountInclTax                       = taxTransDetailTmp_HU.TaxBaseAmount + taxTransDetailTmp_HU.TaxAmountNoCost;
        taxTransDetailTmp_HU.TraceNum                               = taxTrans.traceNum();
        taxTransDetailTmp_HU.Reversed                               = taxTrans.reversed();

        taxTransDetailTmp_HU.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///     Fetches and calculates data for each line in the result of the report query and inserts results into a temporary table.
    /// </remarks>
    public void processReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00007, funcName());

        TaxTransDetailContract_HU   contract = this.parmDataContract() as TaxTransDetailContract_HU;

        QueryRun    qr;
        Query       query    = this.parmQuery();

        includeReversed = contract.parmIncludeReversed();
        reportMode_W    = contract.parmReportMode_W();

        qr = new QueryRun(query);

        while (qr.next())
        {
            taxTrans                = qr.get(tableNum(TaxTrans)) as TaxTrans;
            taxTransRefundableVAT   = qr.get(tableNum(TaxTransRefundableVAT)) as TaxTransRefundableVAT;
            if (includeReversed || (!includeReversed && !taxTrans.reversed()))
            {
                this.getNextTrans();
                this.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount_W</Name>
				<Source><![CDATA[
    private TaxAmount taxAmount_W()
    {
        TaxTrans    taxTransLoc;
        Amount ret;

        
        select sum(TaxAmountCur) from taxTransLoc
                where taxTransLoc.Voucher       == taxTrans.Voucher
                    && taxTransLoc.TransDate     == taxTrans.TransDate
                    && taxTransLoc.TaxCode       == taxTrans.TaxCode
                    && taxTransLoc.SourceRecId   == taxTrans.SourceRecId;

        ret = taxTransLoc.TaxAmountCur;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmount_W</Name>
				<Source><![CDATA[
    private TaxAmount taxBaseAmount_W()
    {
        TaxTrans    taxTransLoc;
        select sum(TaxBaseAmountCur) from taxTransLoc
                where taxTransLoc.Voucher       == taxTrans.Voucher
                    && taxTransLoc.TransDate     == taxTrans.TransDate
                    && taxTransLoc.TaxCode       == taxTrans.TaxCode
                    && taxTransLoc.SourceRecId   == taxTrans.SourceRecId;

        return taxTransLoc.TaxBaseAmountCur;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>