<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendStatisticsUS</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendStatisticsUS
{
    Amount balanceAge[];
    Counter numOfAge;

    TransDate s_InvoiceDate;
    InvoiceId s_InvoiceId;
    Amount s_InvoiceTotal;

    TransDate s_PaymDate;
    DocumentNum s_PaymNum;
    Amount s_PaymTotal;

    Amount highestBalance;
    Amount invoiceAverage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcStatistics</Name>
				<Source><![CDATA[
    void calcStatistics(VendTable vendTable, NoYes invoiceCustomer = NoYes::Yes)
    {
        VendTrans vendTrans = vendTable.lastPayment();
        VendInvoiceJour vendInvoiceJour;
        vendInvoiceJour = vendTable.lastInvoice(vendInvoiceJour, invoiceCustomer);

        AmountMST balance = 0;
        Counter numOfInvoices = 0;

        s_InvoiceDate = dateNull();
        s_InvoiceId = '';
        s_InvoiceTotal = 0;

        s_PaymDate = dateNull();
        s_PaymNum = '';
        s_PaymTotal = 0;

        highestBalance = 0;
        invoiceAverage = 0;

        if (vendInvoiceJour)
        {
            s_InvoiceDate = vendInvoiceJour.InvoiceDate;
            s_InvoiceId = vendInvoiceJour.InvoiceId;
            s_InvoiceTotal = vendInvoiceJour.amountMST(vendInvoiceJour.InvoiceAmount);
        }

        if (vendTrans)
        {
            s_PaymDate = vendTrans.TransDate;
            s_PaymNum = vendTrans.DocumentNum;
            s_PaymTotal = vendTrans.AmountMST;
        }

        while select sum(AmountMST) from vendTrans
            group by TransDate
            where vendTrans.AccountNum == vendTable.AccountNum

        {
            balance -= vendTrans.AmountMST;
            highestBalance = max(highestBalance,balance);
        }

        while select vendInvoiceJour
            where (vendInvoiceJour.InvoiceAccount == vendTable.AccountNum && invoiceCustomer) ||
                  (vendInvoiceJour.OrderAccount == vendTable.AccountNum && !invoiceCustomer)
        {
            numOfInvoices++;
            invoiceAverage += vendInvoiceJour.amountMST(vendInvoiceJour.SalesBalance);
        }

        invoiceAverage = numOfInvoices ? (invoiceAverage / numOfInvoices) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>highestBalance</Name>
				<Source><![CDATA[
    Amount highestBalance()
    {
        return highestBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAverage</Name>
				<Source><![CDATA[
    Amount invoiceAverage()
    {
        return invoiceAverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoiceDate</Name>
				<Source><![CDATA[
    TransDate lastInvoiceDate()
    {
        return s_InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoiceId</Name>
				<Source><![CDATA[
    InvoiceId lastInvoiceId()
    {
        return s_InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoiceTotal</Name>
				<Source><![CDATA[
    Amount lastInvoiceTotal()
    {
        return s_InvoiceTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPaymentDate</Name>
				<Source><![CDATA[
    TransDate lastPaymentDate()
    {
        return s_PaymDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPaymentNum</Name>
				<Source><![CDATA[
    DocumentNum lastPaymentNum()
    {
        return s_PaymNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPaymentTotal</Name>
				<Source><![CDATA[
    Amount lastPaymentTotal()
    {
        return s_PaymTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotals</Name>
				<Source><![CDATA[
    static void calcTotals(VendTable vendTable, NoYes invoiceCustomer, TmpStatPer tmpStatPer)
    {
        VendTrans vendTrans;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        VendTrans vendOffsetTrans;
        VendSettlement vendSettlement;
        VendInvoiceJour vendInvoiceJour;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        CustVendTransDetails vendTransDetails = new CustVendTransDetails(vendTrans);
        CashDiscAmount utilizedCashDiscount;
        CashDiscAmount possibleCashDiscount;
        Counter numOfInvoices = 0;

        tmpStatPer.InvoiceQty = 0;
        tmpStatPer.InvoiceTotal = 0;
        tmpStatPer.PaymQty = 0;
        tmpStatPer.PaymTotal = 0;
        tmpStatPer.DiscAmountUsed = 0;
        tmpStatPer.DiscAmountNotUsed = 0;
        tmpStatPer.AveragePaymDays = 0;

        while select InvoiceAmount, CurrencyCode, InvoiceDate, Triangulation, ExchRate, ExchRateSecondary from vendInvoiceJour
            where ((vendInvoiceJour.InvoiceAccount == vendTable.AccountNum && invoiceCustomer) ||
                (vendInvoiceJour.OrderAccount == vendTable.AccountNum && !invoiceCustomer)) &&
                vendInvoiceJour.InvoiceDate >= tmpStatPer.StartDate &&
                vendInvoiceJour.InvoiceDate <= tmpStatPer.EndDate
        {
            tmpStatPer.InvoiceQty++;
            tmpStatPer.InvoiceTotal += CurrencyExchangeHelper::mstAmount(vendInvoiceJour.InvoiceAmount, vendInvoiceJour.CurrencyCode, vendInvoiceJour.InvoiceDate, Currency::noYes2UnknownNoYes(vendInvoiceJour.Triangulation), vendInvoiceJour.ExchRate, vendInvoiceJour.ExchRateSecondary);
        }

        while select AmountCur, AmountMST, TransDate, RecId from vendTrans
            where vendTrans.AccountNum == vendTable.AccountNum &&
                vendTrans.TransDate >= tmpStatPer.StartDate &&
                vendTrans.TransDate <= tmpStatPer.EndDate &&
                vendTrans.Invoice == ''
            exists join PaymentReference from generalJournalAccountEntry
                where (generalJournalAccountEntry.PostingType == LedgerPostingType::VendPayment ||
                    generalJournalAccountEntry.PostingType == LedgerPostingType::VendBalance)
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry &&
                    generalJournalEntry.Ledger == Ledger::current()
            exists join Voucher from subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId &&
                    subledgerVoucherGeneralJournalEntry.Voucher == vendTrans.Voucher &&
                    subledgerVoucherGeneralJournalEntry.AccountingDate == vendTrans.TransDate
        {
            if (vendTrans.AmountCur > 0)
            {
                tmpStatPer.PaymQty++;
            }
            else
            {
                tmpStatPer.PaymQty--;
            }

            tmpStatPer.PaymTotal += vendTrans.AmountMST;

            while select OffsetAccountNum, OffsetCompany, OffsetTransVoucher from vendSettlement
                where vendSettlement.TransRecId == vendTrans.RecId &&
                    vendSettlement.OffsetTransVoucher
            {
                while select crossCompany TransDate from vendOffsetTrans
                    where vendOffsetTrans.AccountNum == vendSettlement.OffsetAccountNum &&
                        vendOffsetTrans.Voucher == vendSettlement.OffsetTransVoucher &&
                        vendOffsetTrans.DataAreaId == vendSettlement.OffsetCompany &&
                        vendOffsetTrans.Invoice
                {
                    numOfInvoices++;
                    tmpStatPer.AveragePaymDays += (vendTrans.TransDate - vendOffsetTrans.TransDate);
                }
            }
        }

        if (numOfInvoices > 0)
        {
            tmpStatPer.AveragePaymDays = real2int(tmpStatPer.AveragePaymDays / numOfInvoices);
        }

        while select * from vendTrans
            where vendTrans.AccountNum == vendTable.AccountNum &&
                vendTrans.TransDate >= tmpStatPer.StartDate &&
                vendTrans.TransDate <= tmpStatPer.EndDate &&
                vendTrans.AmountCur < 0
        {
            vendTransDetails.setCustVendTrans(vendTrans);
            vendTransDetails.setTransDate(tmpStatPer.EndDate);

            possibleCashDiscount = vendTransDetails.possibleCashDisc();
            utilizedCashDiscount = vendTransDetails.utilizedCashDisc();

            if (!possibleCashDiscount && !utilizedCashDiscount)
            {
                tmpStatPer.DiscAmountNotUsed += VendInvoiceJour::findFromVendTrans(vendTrans.Invoice, vendTrans.TransDate, vendTrans.AccountNum).CashDisc;
            }
            else if (possibleCashDiscount && utilizedCashDiscount)
            {
                tmpStatPer.DiscAmountUsed += -(vendTrans.AmountMST * utilizedCashDiscount / vendTrans.AmountCur);
                tmpStatPer.DiscAmountNotUsed += -(vendTrans.AmountMST * (possibleCashDiscount - utilizedCashDiscount) / vendTrans.AmountCur);
            }
        }

        tmpStatPer.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStatistics</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs calculations for the <c>VendMetricsPerYear</c> form and returns a container of values to
    /// reduce RPC calls.
    /// </summary>
    /// <param name="linkedVendTable">
    /// The <c>VendTable</c> record that needs calculation.
    /// </param>
    /// <param name="tmpStat">
    /// A <c>TmpStatPer</c> record buffer that participates in calculation. If no parameter is passed, the
    /// default value is null, and no calculation is performed.
    /// </param>
    /// <returns>
    /// A container that contains all the calculation results.
    /// </returns>
    public static container calculateStatistics(VendTable linkedVendTable, TmpStatPer tmpStat = null)
    {
        container result;
        VendStatisticsUS vendStatistics = new VendStatisticsUS();

        // Do calculation
        vendStatistics.calcStatistics(linkedVendTable);

        // If parameter is not null, do calculation
        if (tmpStat != null && tmpStat.RecId != 0)
        {
            while select tmpStat
            {
                VendStatisticsUS::calcTotals(linkedVendTable, NoYes::Yes, tmpStat);
            }
        }

        result = [
                    vendStatistics.lastInvoiceDate(),
                    vendStatistics.lastInvoiceId(),
                    vendStatistics.lastInvoiceTotal(),
                    vendStatistics.lastPaymentDate(),
                    vendStatistics.lastPaymentNum(),
                    vendStatistics.lastPaymentTotal(),
                    vendStatistics.highestBalance(),
                    vendStatistics.invoiceAverage()
                 ];

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>