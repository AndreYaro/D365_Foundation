<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMAnalyticOrigDoc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class opens a form to show origin documents of Analytic form.
/// </summary>
/// <remarks>
/// The instance of this class initializes from line of aggregated data and show filtered by its values origin documents.
/// </remarks>
public abstract class CFMAnalyticOrigDoc
{
    CFMAnalyticTableTmp analyticalTable;
    Map fieldSourceTargetMap;
    Container sourceDataAreaIds;
    TransDate transDate;
    JournalId journalId;
    DimensionProvider dp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CFMAnalyticOrigDoc construct(CFMAnalyticTableTmp _analyticalTable,
        Map _fieldSourceTargetMap,
        TransDate _transDate,
        JournalId _journalId)
    {
        CFMJournalSourceAttribute attribute = new CFMJournalSourceAttribute(_analyticalTable.SourceType);
        CFMAnalyticOrigDoc origDocBuilder = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(CFMAnalyticOrigDoc), attribute);

        if (origDocBuilder)
        {
            origDocBuilder.parmAnalyticalTable(_analyticalTable);
            origDocBuilder.parmFieldSourceTargetMap(_fieldSourceTargetMap);
            origDocBuilder.parmTransDate(_transDate);
            origDocBuilder.parmJournalId(_journalId);
        }

        return origDocBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCompanyRangeToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds company range to query.
    /// </summary>
    /// <param name="_query">
    /// Query to which range adds.
    /// </param>
    protected void addCompanyRangeToQuery(Query _query)
    {
        this.getJournalCompanies();

        _query.allowCrossCompany(true);
        for (int i = 1; i <= conLen(sourceDataAreaIds); i++)
        {
            _query.addCompanyRange(queryValue(conPeek(sourceDataAreaIds, i)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimAttributeRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds dimension attribute range to a query to filter results by specific financial dimension.
    /// </summary>
    /// <param name="_query">
    /// The query to update.
    /// </param>
    /// <param name="_dataSourceName">
    /// The name of the data source that contains the dimension information.
    /// </param>
    /// <param name="_dimensionFieldName">
    /// The name of the field on the data source that contains the dimension information.
    /// </param>
    /// <param name="_fieldId">
    /// The field if of filed where get a dimension value from.
    /// </param>
    /// <param name="_dimensionAttributeName">
    /// The name of the dimension attribute for which to apply the value.
    /// </param>
    protected void addDimAttributeRange(Query _query,
        str _dataSourceName,
        str _dimensionFieldName,
        FieldId _fieldId,
        str _dimensionAttributeName)
    {
        if (!dp)
        {
            dp = new DimensionProvider();
        }

        dp.addAttributeRangeToQuery(_query, _dataSourceName, _dimensionFieldName, DimensionComponent::DimensionAttribute, analyticalTable.(_fieldId), _dimensionAttributeName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the appropriate joins and ranges to a query to filter results according values of aggregated line.
    /// </summary>
    /// <param name="_query">
    /// /// The query to update.
    /// </param>
    /// <param name="_qbds">
    /// The data source that refers to the target table.
    /// </param>
    abstract public void addFilterToQuery(Query _query, QueryBuildDataSource _qbds)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeFormQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows whether the form query should be changed after the form initilization.
    /// </summary>
    /// <returns>
    /// true if query should be cross company; otherwise false.
    /// </returns>
    protected boolean changeFormQuery()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the container of companies which can be presented in the journal.
    /// </summary>
    /// <returns>
    /// The set of companies which can be presented in the journal.
    /// </returns>
    protected container getJournalCompanies()
    {
        if (sourceDataAreaIds == conNull())
        {
            CFMJournalOrgUnitList orgUnitList;

            while select DataArea from orgUnitList
                where orgUnitList.SetupSourceType == CFMJournalSetupSourceType::JournalTable
                   && orgUnitList.SourceRecId == CFMJournalTable::find(journalId).RecId
            {
                sourceDataAreaIds += orgUnitList.DataArea;
            }
        }

        return sourceDataAreaIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the display menu item that control the open form.
    /// </summary>
    /// <returns>
    /// The name of the display menu item that control the open form.
    /// </returns>
    abstract public MenuItemName menuItemName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAnalyticalTable</Name>
				<Source><![CDATA[
    public CFMAnalyticTableTmp parmAnalyticalTable(CFMAnalyticTableTmp _analyticalTable = analyticalTable)
    {
        analyticalTable = _analyticalTable;

        return analyticalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldSourceTargetMap</Name>
				<Source><![CDATA[
    public Map parmFieldSourceTargetMap(Map _fieldSourceTargetMap = fieldSourceTargetMap)
    {
        fieldSourceTargetMap = _fieldSourceTargetMap;

        return fieldSourceTargetMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public JournalId parmJournalId(JournalId _journalId = journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the form of origin documents for the Analytical form.
    /// </summary>
    public void run()
    {
        MenuFunction menuFunction = new MenuFunction(this.menuItemName(), MenuItemType::Display);

        if (menuFunction.objectType() != UtilElementType::Form)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (hasMenuItemAccess(this.menuItemName(), MenuItemType::Display))
        {
            Args args = new Args(menuFunction.object());
            args.record(analyticalTable);
            args.caller(this);
            args.formViewOption(FormViewOption::Grid);

            FormRun formRun = classfactory.formRunClass(args);
            formRun.init();

            if (this.changeFormQuery())
            {
                FormDataSource fds = formRun.dataSource();
                this.addFilterToQuery(fds.query(), fds.query().dataSourceNo(1));
            }

            formRun.run();
            formRun.detach();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangeForCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets filter by companies.
    /// </summary>
    /// <param name="_qbds">
    /// Datasource to which the filter applies.
    /// </param>
    /// <param name="_fieldId">
    /// Field id of filed that refers to company in the datasource.
    /// </param>
    protected void setRangeForCompany(QueryBuildDataSource _qbds, FieldId _fieldId)
    {
        _qbds.clearRange(_fieldId);

        this.getJournalCompanies();

        str filterStr;

        for (int i = 1; i <= conLen(sourceDataAreaIds); i++)
        {
            filterStr += (filterStr ? ',' : '') + conPeek(sourceDataAreaIds, i);
        }

        findOrCreateRange_W(_qbds, _fieldId).value(filterStr);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>