<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSQualityItemSamplingWorkTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSQualityItemSamplingWorkTransactionType</c> class handles logic specific to the quality item sampling work transaction type.
/// </summary>
[WhsWorkTransTypeStrategyFactory(WHSWorkTransType::QualityItemSampling)]
public final class WHSQualityItemSamplingWorkTransactionType extends WhsWorkTransactionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isInbound</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isInbound()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        return WHSWorkExecuteMode::UserDirected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveQueryName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public QueryName locationDirectiveQueryName(WHSLocDirTable _whsLocDirTable)
    {
        return queryStr(WHSLocDirQualityItemSampling);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTemplateQueryName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public QueryName workTemplateQueryName(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        return queryStr(WHSWorkTemplateQualityItemSampling);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void buildLocationDirectiveQuery(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        if (_parameters.inventTestAssociationTableRecId)
        {
            SysQuery::findOrCreateRange(_parameters.query.dataSourceTable(tableNum(InventTestAssociationTable)), 
                fieldNum(InventTestAssociationTable, RecId)).value(queryValue(_parameters.inventTestAssociationTableRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void cancelWork(WHSWorkTable _workTable, boolean _cancellingProductReceipt)
    {
        if (!_cancellingProductReceipt
            && WHSParameters::find().UnregisterAtWorkCancel
            && _workTable.isPurchaseOrderQualityItemSamplingWork())
        {
            // Unregister the corresponding purchase line.
            WHSPurchLine::unRegisterPurchLines(_workTable);

            if (this.parmDecrementLoadLineWorkCreatedQty())
            {
                _workTable.decreaseLoadLineWorkCreatedQtyForPurchaseWork();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLocationDirectiveTableQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Query filterLocationDirectiveTableQuery(Query _query, WHSLocDirTable _locDirTable)
    {
        QueryBuildDataSource qbdsInventTestAssociationTable = _query.dataSourceTable(tableNum(InventTestAssociationTable));
        SysQuery::findOrCreateRange(qbdsInventTestAssociationTable, fieldNum(InventDim, InventSiteId)).value(queryValue(_locDirTable.InventSiteId));

        QueryBuildDataSource qbdsInventLocation = qbdsInventTestAssociationTable.addDataSource(tableNum(InventLocation));
        qbdsInventLocation.relations(true);
        qbdsInventLocation.joinMode(JoinMode::ExistsJoin);


        SysQuery::findOrCreateRange(qbdsInventLocation, fieldNum(InventLocation, InventLocationId)).value(queryValue(_locDirTable.InventLocationId));
        SysQuery::findOrCreateRange(qbdsInventLocation, fieldNum(InventLocation, EnableQualityManagement)).value(queryValue(NoYes::Yes));
        SysQuery::findOrCreateRange(qbdsInventLocation, fieldNum(InventLocation, WHSEnabled)).value(queryValue(NoYes::Yes));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSourceOrder</Name>
				<Source><![CDATA[
    public void openSourceOrder(WHSWorkTable _whsWorkTable)
    {
        super(_whsWorkTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceOrderMenuItemDisplayStr</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str sourceOrderMenuItemDisplayStr()
    {
        return menuitemDisplayStr(InventQualityOrderTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceOrderByWorkOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Common findSourceOrderByWorkOrder(WHSWorkOrderInterface _workOrder)
    {
        return InventQualityOrderTable::find(_workOrder.parmOrderNum());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>