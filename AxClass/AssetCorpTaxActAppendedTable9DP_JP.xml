<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCorpTaxActAppendedTable9DP_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetCorpTaxActAppendedTable9DP_JP</c> class is the data provider class for the <c>AssetCorpTaxActAppendedTable9_JP</c> SSRS report.
/// The report is about Lump Sum assets.
/// </summary>
[
    SRSReportParameterAttribute(classStr(AssetCorpTaxActAppendedTablesContract_JP)),
    SRSReportQueryAttribute(queryStr(AssetCorpTaxActAppendTables_JP))
]
class AssetCorpTaxActAppendedTable9DP_JP extends SrsReportDataProviderPreProcessTempDB
{    
    AssetCorpTaxActAppendedTable9Tmp_JP assetCorpTaxActAppendedTable9Tmp;
    AssetCorpTaxActAppendedHeaderTmp_JP assetCorpTaxActAppendedHeaderTmp;

    TransDate                   startDate;
    TransDate                   endDate;
    TransDate                   startDatePrevious;
    TransDate                   endDatePrevious;

    FiscalYearName              fiscalYearName;

    AssetSumCalc_Trans          assetSumCalc;
    AssetSumCalc_Trans          assetSumCalcPrevious;

    AssetTable                  assetTable;
    AssetBook                   assetBook;
    AssetBook                   refAssetBook;
    AssetMajorType              assetMajorType;
    AssetBookTable              assetBookTable;
    AssetPropertyGroup          assetPropertyGroup;
    AssetDepreciationProfile    assetDepreciationProfile;
    AssetDepreciationProfile    refAssetDepreciationProfileExt;
    AssetDepreciationProfile    assetDepreciationProfileExt;
    FiscalCalendarYear          printFiscalCalendarYear;
    FiscalCalendarYear          putInServiceFiscalYear;
    FiscalCalendarYear          putInServiceFiscalYearNextAsset;
    FiscalCalendarYear          fiscalCalendarYearPri;
    PrintDate                   printDate;
    AssetDepreciationStartDate  specialDepStartDate;
    AssetTableIntervalExt_JP    assetTableIntervalExt;

    AssetDepEntityInquiry_PreTaxDeduction_JP    assetDepEntityInquiry_PreTaxDeduction;

    int                         numOfYearsEquallyDivided;
    int                         rowCount;
    boolean                     isSpecial;
    CurrencyCode                accountingCurrency;
    LanguageId                  currentUserLanguage;
    CurrencyExchangeHelper      currencyExchangeHelper;
    AssetDepProfileChange_JP    depProfileChange;
    boolean                     isHalfYear;
    int                         monthsOfYear;
    int                         monthsOfQuarter;
    guid                        cacheOwnerGUID;

    #define.DefaultAmount(0.00)
    #define.GroupNum(5)
    #define.Division('/')

    #AssetDepCalculation_JP
    #TimeConstants
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountFromAccounttingToJPY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates all transaction currency amounts from the specified accounting currency amounts.
    /// </summary>
    public void amountFromAccounttingToJPY()
    {
        // Inserts field 16(9)-7
        assetCorpTaxActAppendedTable9Tmp.ReserveAmount                  = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.ReserveAmount);

        // Inserts field 16(9)-8
        assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount      = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount);

        // Inserts field 16(9)-9
        assetCorpTaxActAppendedTable9Tmp.DefictAmountFromPreviousTerm   = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.DefictAmountFromPreviousTerm);

        // Inserts field 16(9)-10
        assetCorpTaxActAppendedTable9Tmp.AllowableReserveAmount         = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.AllowableReserveAmount);

        // Inserts field 16(9)-11
        assetCorpTaxActAppendedTable9Tmp.OverDepreciationAmount         = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.OverDepreciationAmount);

        // Inserts field 16(9)-12
        assetCorpTaxActAppendedTable9Tmp.DefictAmountAdditional         = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.DefictAmountAdditional);

        // Inserts field 16(9)-13
        assetCorpTaxActAppendedTable9Tmp.DefictAmountSpecialAtFirstYear = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.DefictAmountSpecialAtFirstYear);

        // Inserts field 16(9)-14
        assetCorpTaxActAppendedTable9Tmp.DefictAmountToNextTerm         = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.DefictAmountToNextTerm);

        // Inserts field 16(9)-15
        assetCorpTaxActAppendedTable9Tmp.DefictAmountExcluded           = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.DefictAmountExcluded);

        // Inserts field 16(9)-16
        assetCorpTaxActAppendedTable9Tmp.NetDefictAmountToNextAmount    = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.NetDefictAmountToNextAmount);

        // Inserts field 16(9)-17
        assetCorpTaxActAppendedTable9Tmp.DefictAmountPrevious           = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.DefictAmountPrevious);

         // Inserts field 16(9)-18
        assetCorpTaxActAppendedTable9Tmp.DefictAmountCurrent            = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.DefictAmountCurrent);

        // Inserts field 16(9)-19
        assetCorpTaxActAppendedTable9Tmp.DefictAmountSum                = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.DefictAmountSum);

        // Inserts field 16(9)-20
        assetCorpTaxActAppendedTable9Tmp.ReserveDepAmountCalculated     = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.ReserveDepAmountCalculated);

        // Inserts field 16(9)-21
        assetCorpTaxActAppendedTable9Tmp.DefictAmountForSpecialDep      = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.DefictAmountForSpecialDep);

        // Inserts field 16(9)-23
        assetCorpTaxActAppendedTable9Tmp.OverDepAmountFromPreviousTerm  = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.OverDepAmountFromPreviousTerm);

        // Inserts field 16(9)-24
        assetCorpTaxActAppendedTable9Tmp.ReserveAmountAtBeginning       = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.ReserveAmountAtBeginning);

        // Inserts field 16(9)-25
        assetCorpTaxActAppendedTable9Tmp.ProfitEquallyDivided           = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.ProfitEquallyDivided);

        // Inserts field 16(9)-26
        assetCorpTaxActAppendedTable9Tmp.ProfitAdditional               = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.ProfitAdditional);

        // Inserts field 16(9)-27
        assetCorpTaxActAppendedTable9Tmp.ProfitSum                      = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.ProfitSum);

        // Inserts field 16(9)-28
        assetCorpTaxActAppendedTable9Tmp.ReserveAmountAtEnding          = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable9Tmp.ReserveAmountAtEnding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST2LocalCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the local currency amount from the specified accounting currency amount.
    /// </summary>
    /// <param name="_amountMST">
    /// The accounting currency amount used to calculate.
    /// </param>
    /// <returns>
    /// A Local currency amount that has been calculated from the accounting currency amount.
    /// </returns>
    public AmountCur amountMST2LocalCurrencyAmount(AmountMST _amountMST)
    {
        AmountCur amount;

        if (_amountMST != 0)
        {
            currencyExchangeHelper.parmRoundingRuleType(CurrencyRoundingRuleType::AssetDep_JP);

            amount = currencyExchangeHelper.calculateAccountingToTransaction(#CurrencyJPY, _amountMST, true);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNotFullAllocationReserveAmountsSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of reserve amounts, which is not full allocated.
    /// </summary>
    /// <returns>
    /// The sum of reserve amounts, which is not full allocated.
    /// </returns>
    public AmountCur calcNotFullAllocationReserveAmountsSum()
    {
        AmountCur   sumReserveAmounts;
        AmountCur   sumAllocatedAmounts;
        AssetTrans  assetTrans;
        int         allocPeriods;
        TableId     assetTransTableId = tablenum(AssetTrans);

        if (isSpecial)
        {
            sumReserveAmounts = AssetSpecialDepHelper_JP::calcAccumulatedReserveAmountMst(
                refAssetBook,
                dateNull(),
                startDate - 1);

            while select assetTrans
                order by assetTrans.TransDate
                where assetTrans.AssetId    == refAssetBook.AssetId
                   && assetTrans.BookId     == refAssetBook.BookId
                   && assetTrans.TransDate  <= startDate - 1
                   && assetTrans.TransType  == AssetTransType::SpecialDepReserve_JP
            {
                allocPeriods = this.calcPeriodsForAllocation(
                    refAssetBook,
                    assetTrans.TransDate,
                    startDate - 1);

                if (refAssetBook.SpecialDepAllocationPeriods_JP <= allocPeriods)
                {
                    // Note: AssetTrans.AmountMST is negative here.
                    sumReserveAmounts = sumReserveAmounts + assetTrans.AmountMST;
                }
                else
                {
                    break;
                }
            }
        }
        else
        {
            sumReserveAmounts = -AssetDepTransMap_JP::calcAccumulatedAmtMstPerDateTranstype(
                refAssetBook,
                dateNull(),
                startDate - 1,
                AssetTransType::AdditionalDepReserve_JP);

            boolean isDistributionExist;
            while select assetTrans
                order by assetTrans.TransDate
                where assetTrans.AssetId    == refAssetBook.AssetId
                   && assetTrans.BookId     == refAssetBook.BookId
                   && assetTrans.TransDate  <= startDate - 1
                   && assetTrans.TransType  == AssetTransType::AdditionalDepReserve_JP
            {
                sumAllocatedAmounts = AssetDepDistributionLine_JP::calcAccumulatedAllocationAmt(
                   assetTransTableId,
                   assetTrans.RecId,
                   startDate - 1);

                if (sumAllocatedAmounts)
                {
                    isDistributionExist = true;
                }

                if (sumAllocatedAmounts == assetTrans.AmountMST)
                {
                    sumReserveAmounts = sumReserveAmounts - sumAllocatedAmounts;
                }
                else
                {
                    break;
                }
            }

            if (isDistributionExist)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceJP00023, funcName());
            }
        }

        return sumReserveAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPeriodsForAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of allocation periods for the specified date range.
    /// </summary>
    /// <param name="_depBookMap">
    /// Instance of <C>AssetDepBookMap_JP</C>
    /// </param>
    /// <param name="_fromDate">
    /// From date to the date range
    /// </param>
    /// <param name="_toDate">
    /// To date to the date range
    /// </param>
    /// <returns>
    /// The number of allocation periods for the specified date range
    /// </returns>
    public int calcPeriodsForAllocation(
        AssetGroupDepBookMap_JP _depBookMap,
        AssetTransDate          _fromDate,
        AssetTransDate          _toDate)
    {
        int                 ret;
        AssetTransDate      fromPeriodStart;
        AssetTransDate      toPeriodStart;
        AssetTableInterval  assetTableInterval;

        assetTableInterval  = AssetSpecialDepHelper_JP::assetTableIntervalForAllocation(_depBookMap);
        fromPeriodStart     = assetTableInterval.endPeriod(_fromDate);
        toPeriodStart       = assetTableInterval.endPeriod(_toDate);
        while (fromPeriodStart < toPeriodStart)
        {
            ret++;
            fromPeriodStart = assetTableInterval.endPeriod(fromPeriodStart + 1);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetCorpTaxActAppendedHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data <c>AssetCorpTaxActAppendedHeaderTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>AssetCorpTaxActAppendedHeaderTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetCorpTaxActAppendedHeaderTmp_JP))
    ]
    public AssetCorpTaxActAppendedHeaderTmp_JP getAssetCorpTaxActAppendedHeaderTmp()
    {
        select  assetCorpTaxActAppendedHeaderTmp;
        return  assetCorpTaxActAppendedHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetCorpTaxActAppendedTable9Tmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data <c>AssetCorpTaxActAppendedTable9Tmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>AssetCorpTaxActAppendedTable9Tmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetCorpTaxActAppendedTable9Tmp_JP))
    ]
    public AssetCorpTaxActAppendedTable9Tmp_JP getAssetCorpTaxActAppendedTable9Tmp()
    {
        select  assetCorpTaxActAppendedTable9Tmp;
        return  assetCorpTaxActAppendedTable9Tmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the report parameters from a data contract to the member variables.
    /// </summary>
    public void getReportParameters()
    {
        int                     monthOfStartDate;
        int                     monthOfEndDate;
        FiscalCalendarQuarter   fiscalCalendarQuarter;

        AssetCorpTaxActAppendedTablesContract_JP contract = this.parmDataContract();

        if (contract)
        {
            fiscalYearName          = contract.parmFiscalYearName();
            printFiscalCalendarYear = FiscalCalendarYear::findByCalendarYearName(Ledger::fiscalCalendar(), fiscalYearName);
            startDate               = printFiscalCalendarYear.StartDate;
            endDate                 = printFiscalCalendarYear.EndDate;
            printDate               = contract.parmPrintDate();
            monthOfStartDate        = mthOfYr(startDate);
            monthOfEndDate          = mthOfYr(endDate);

            if (monthOfEndDate < monthOfStartDate)
            {
                monthOfEndDate = monthOfEndDate + #monthsPerYear;
            }

            monthsOfYear = monthOfEndDate - monthOfStartDate + 1;

            if (monthsOfYear == #monthsPerHalfYear)
            {
                isHalfYear = true;
                fiscalCalendarYearPri   = FiscalCalendars::findPrevYear(Ledger::fiscalCalendar(), startDate);
                startDatePrevious       = fiscalCalendarYearPri.StartDate;
                endDatePrevious         = fiscalCalendarYearPri.EndDate;
            }

            select firstonly StartDate, EndDate from fiscalCalendarQuarter
                where fiscalCalendarQuarter.FiscalCalendarYear == printFiscalCalendarYear.RecId;
            monthOfStartDate    = mthOfYr(fiscalCalendarQuarter.StartDate);
            monthOfEndDate      = mthOfYr(fiscalCalendarQuarter.EndDate);
            if (monthOfEndDate < monthOfStartDate)
            {
                monthOfEndDate = monthOfEndDate + #monthsPerQuarter;
            }
            monthsOfQuarter = monthOfEndDate - monthOfStartDate + 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnderDepreciationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the underdepreciation amount with specific date;
    /// </summary>
    /// <param name="_entityTypeList">
    /// The entity type list
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The underdepreciation amount.
    /// </returns>
    public AssetAmount getUnderDepreciationAmount(
        container       _entityTypeList,
        AssetTransDate  _transDate)
    {
        AssetAmount carryFormardAmount;
        carryFormardAmount = -assetDepEntityInquiry_PreTaxDeduction.calcOverUnderBalanceCarryForward(
            _entityTypeList,
            _transDate);

        return  max(carryFormardAmount, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeAssetInReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether print this asset in this report.
    /// </summary>
    /// <returns>
    /// True, print this asset in this reprot; False, don't print.
    /// </returns>
    public boolean includeAssetInReport()
    {
        boolean     ret = false;

        isSpecial = false;
        if (assetBook.DepreciationExtProfile && refAssetBook.DepreciationExtProfile)
        {
            refAssetDepreciationProfileExt  = AssetDepreciationProfile::find(refAssetBook.DepreciationExtProfile);
            assetDepreciationProfileExt     = AssetDepreciationProfile::find(assetBook.DepreciationExtProfile);
            assetTableIntervalExt           = assetBook.AssetGroupDepBookMap_JP::assetTableIntervalForDepProfile(assetDepreciationProfileExt, true);

            if (assetDepreciationProfileExt && refAssetDepreciationProfileExt)
            {
                ret = true;

                if (assetDepreciationProfileExt.Method == AssetDepreciationMethod::SpecialDepreciation_JP)
                {
                    isSpecial = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBlankData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the blank data.
    /// </summary>
    /// <param name="_blankColumnCount">
    /// Inserts the number of blank columns.
    /// </param>
    public void insertBlankData(int _blankColumnCount)
    {
        int blankColumn = 0;

        while (blankColumn < _blankColumnCount)
        {
            assetCorpTaxActAppendedTable9Tmp.clear();

            assetCorpTaxActAppendedTable9Tmp.RowGroupNum    = rowCount div #GroupNum;
            assetCorpTaxActAppendedTable9Tmp.ColunmGroupNum = rowCount mod #GroupNum;
            assetCorpTaxActAppendedTable9Tmp.SortingNumber  = rowCount;

            assetCorpTaxActAppendedTable9Tmp.insert();

            rowCount++;
            blankColumn++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDetailTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data to temp table.
    /// </summary>
    public void insertDetailTmpTable()
    {
        AssetAmount acquistionAmount;
        AssetAmount depAmount;
        AssetAmount sumReserveAmounts;
        AssetAmount sumAllocatedAmounts;
        AssetAmount priHalfAmounts;
        AssetAmount priBroughtForwardAmounts;
        AssetAmount acceleratedDepAmount;
        TransDate   reserveStarteDate;
        TransDate   reserveEndDate;
        int         allocatePeriod;
        AssetDepLimitCalculator_JP  assetDepLimitCalculator_Additional;

        assetCorpTaxActAppendedTable9Tmp.clear();

        // Inserts field 16(9)-2
        assetCorpTaxActAppendedTable9Tmp.MajorType     = assetMajorType.Description;

        // Inserts field 16(9)-3
        assetCorpTaxActAppendedTable9Tmp.PropertyGroup = assetPropertyGroup.Description;

        // Inserts field 16(9)-4
        assetCorpTaxActAppendedTable9Tmp.AssetName     = assetTable.Name ? assetTable.Name : assetTable.AssetId;

        // Inserts field 16(9)-5
        if (currentUserLanguage == #LanguageJA)
        {
            assetCorpTaxActAppendedTable9Tmp.PutInServiceDate = JapaneseDateTimeHelper::date2str(assetBook.UsedFromDate, #ParameterYearName);
        }
        else
        {
            assetCorpTaxActAppendedTable9Tmp.PutInServiceDate = int2str(mthOfYr(assetBook.UsedFromDate)) + enum2str(DateSeparator::Slash) + int2str(year(assetBook.UsedFromDate));
        }

        // Inserts field 16(9)-6
        depProfileChange = AssetDepProfileChange_JP::find(assetBook.TableId, assetBook.RecId, endDate);
        if (depProfileChange.RecId)
        {
            assetCorpTaxActAppendedTable9Tmp.UsefulLife = depProfileChange.ServiceLife;
        }
        else
        {
            assetCorpTaxActAppendedTable9Tmp.UsefulLife = assetBook.ServiceLife;
        }

        // Inserts field 16(9)-7
        if (isSpecial)
        {
            assetCorpTaxActAppendedTable9Tmp.ReserveAmount  = AssetSpecialDepHelper_JP::calcAccumulatedReserveAmountMst(
                refAssetBook,
                startDate,
                endDate);
        }
        else
        {
            assetCorpTaxActAppendedTable9Tmp.ReserveAmount  = -AssetDepTransMap_JP::calcAccumulatedAmtMstPerDateTranstype(
                refAssetBook,
                startDate,
                endDate,
                AssetTransType::AdditionalDepReserve_JP);
        }

        // Inserts field 16(9)-9
        assetCorpTaxActAppendedTable9Tmp.DefictAmountFromPreviousTerm = this.getUnderDepreciationAmount(
            [AssetDepEntityType_JP::AdditionalDepreciationWithReserve, AssetDepEntityType_JP::SpecialDepreciationWithReserve],
            startDate - 1);

        // Inserts field 16(9)-8
        // If the special depreciation start date in the first year of service life, it will be print
        // If the special reserve periods less than the special depreciation apply number of periods(from the special depreciation start date to the report print end date), it also will be print
        if ((specialDepStartDate >= startDate && specialDepStartDate <= endDate)
            || ((assetDepreciationProfileExt.Accrual == AssetAccrual::FiscalPeriod
                    || assetDepreciationProfileExt.Accrual == AssetAccrual::Quarterly)
                && assetTableIntervalExt.numOfPeriods(specialDepStartDate, startDate - 1) < assetDepreciationProfileExt.SpecialDepApplyNumOfPeriods_JP)
            || (assetDepreciationProfileExt.Accrual == AssetAccrual::Yearly
                && assetTableIntervalExt.numOfYearsBetweenDates(specialDepStartDate, startDate - 1) < assetDepreciationProfileExt.SpecialDepApplyNumOfPeriods_JP))
        {
            if (isSpecial)
            {
                acquistionAmount = assetSumCalc.acquisitionValue() + assetSumCalc.acquisitionAdjValue() - assetSumCalc.getRetirementObligationAcquisitionValue_JP();
                assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount = AssetDepCalculationHelper_JP::roundOffDepreciation(
                    acquistionAmount * assetDepreciationProfileExt.SpecialDepBaseRatio_JP * assetDepreciationProfileExt.SpecialDepRate_JP,
                    assetBookTable.roundOffDepreciation);
            }
            else
            {
                assetDepLimitCalculator_Additional = AssetDepLimitCalculator_JP::construct(assetBook, AssetDepLimitType_JP::ExtraordinaryDepreciation, startDate, cacheOwnerGUID);
                assetDepLimitCalculator_Additional.init();
                assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount = assetDepLimitCalculator_Additional.calcLimitForDateRange(startDate, endDate);
            }
        }

        // Inserts field 16(9)-10 (8 + 9)
        assetCorpTaxActAppendedTable9Tmp.AllowableReserveAmount = assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount + assetCorpTaxActAppendedTable9Tmp.DefictAmountFromPreviousTerm;

        if (assetCorpTaxActAppendedTable9Tmp.ReserveAmount - assetCorpTaxActAppendedTable9Tmp.AllowableReserveAmount >= 0)
        {
            // Inserts field 16(9)-11 (7 - 10)
            assetCorpTaxActAppendedTable9Tmp.OverDepreciationAmount = assetCorpTaxActAppendedTable9Tmp.ReserveAmount - assetCorpTaxActAppendedTable9Tmp.AllowableReserveAmount;
        }
        else
        {
            if (isSpecial)
            {
                // Inserts field 16(9)-13 (8 - (7 - 9)), if 7 - 9 <= 0, then 8
                if ((assetCorpTaxActAppendedTable9Tmp.ReserveAmount - assetCorpTaxActAppendedTable9Tmp.DefictAmountFromPreviousTerm) <= 0)
                {
                    assetCorpTaxActAppendedTable9Tmp.DefictAmountSpecialAtFirstYear = assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount;
                }
                else
                {
                    assetCorpTaxActAppendedTable9Tmp.DefictAmountSpecialAtFirstYear = max(0, assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount - (assetCorpTaxActAppendedTable9Tmp.ReserveAmount - assetCorpTaxActAppendedTable9Tmp.DefictAmountFromPreviousTerm));
                }

                // Inserts field 16(9)-18
                assetCorpTaxActAppendedTable9Tmp.DefictAmountCurrent = assetCorpTaxActAppendedTable9Tmp.DefictAmountSpecialAtFirstYear;
            }
            else
            {
                // Inserts field 16(9)-12 (8 - 7)
                if (assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount - assetCorpTaxActAppendedTable9Tmp.ReserveAmount > 0)
                {
                    assetCorpTaxActAppendedTable9Tmp.DefictAmountAdditional = assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount - assetCorpTaxActAppendedTable9Tmp.ReserveAmount;
                }

                // Inserts field 16(9)-18
                assetCorpTaxActAppendedTable9Tmp.DefictAmountCurrent = assetCorpTaxActAppendedTable9Tmp.DefictAmountAdditional;
            }

            // Inserts field 16(9)-14 (10 - 7)
            assetCorpTaxActAppendedTable9Tmp.DefictAmountToNextTerm      = max(0, assetCorpTaxActAppendedTable9Tmp.AllowableReserveAmount - assetCorpTaxActAppendedTable9Tmp.ReserveAmount);

            // Inserts field 16(9)-15
            assetCorpTaxActAppendedTable9Tmp.DefictAmountExcluded        = -assetDepEntityInquiry_PreTaxDeduction.calcSpecialUnderDepWillExpirInNextYear(endDate);
            // Inserts field 16(9)-16
            assetCorpTaxActAppendedTable9Tmp.NetDefictAmountToNextAmount = this.getUnderDepreciationAmount(
                [AssetDepEntityType_JP::SpecialDepreciationWithReserve, AssetDepEntityType_JP::AdditionalDepreciationWithReserve],
                endDate);

            // Inserts field 16(9)-17
            if (isHalfYear)
            {
                if (specialDepStartDate <= startDate)
                {
                    if (isSpecial)
                    {
                        acquistionAmount = assetSumCalcPrevious.acquisitionValue()
                            + assetSumCalcPrevious.acquisitionAdjValue()
                            - assetSumCalcPrevious.getRetirementObligationAcquisitionValue_JP();

                        assetCorpTaxActAppendedTable9Tmp.DefictAmountPrevious = AssetDepCalculationHelper_JP::roundOffDepreciation(
                            acquistionAmount * assetDepreciationProfileExt.SpecialDepBaseRatio_JP * assetDepreciationProfileExt.SpecialDepRate_JP,
                            assetBookTable.roundOffDepreciation);

                        priHalfAmounts = AssetSpecialDepHelper_JP::calcAccumulatedReserveAmountMst(
                            refAssetBook,
                            startDatePrevious,
                            endDatePrevious);

                        priBroughtForwardAmounts = this.getUnderDepreciationAmount(
                            [AssetDepEntityType_JP::AdditionalDepreciationWithReserve, AssetDepEntityType_JP::SpecialDepreciationWithReserve],
                            startDatePrevious - 1);

                        if (priHalfAmounts - priBroughtForwardAmounts > 0)
                        {
                            assetCorpTaxActAppendedTable9Tmp.DefictAmountPrevious = max(0, assetCorpTaxActAppendedTable9Tmp.DefictAmountPrevious - (priHalfAmounts - priBroughtForwardAmounts));
                        }
                    }
                    else
                    {
                        assetDepLimitCalculator_Additional = AssetDepLimitCalculator_JP::construct(assetBook, AssetDepLimitType_JP::ExtraordinaryDepreciation, startDatePrevious, cacheOwnerGUID);
                        assetDepLimitCalculator_Additional.init();
                        assetCorpTaxActAppendedTable9Tmp.DefictAmountPrevious = assetDepLimitCalculator_Additional.calcLimitForDateRange(startDatePrevious, endDatePrevious);

                        priHalfAmounts = -AssetDepTransMap_JP::calcAccumulatedAmtMstPerDateTranstype(
                            refAssetBook,
                            startDatePrevious,
                            endDatePrevious,
                            AssetTransType::AdditionalDepReserve_JP);

                        assetCorpTaxActAppendedTable9Tmp.DefictAmountPrevious = max(0, assetCorpTaxActAppendedTable9Tmp.DefictAmountPrevious - priHalfAmounts);
                    }
                }
            }

            // Inserts field 16(9)-19 (17 + 18)
            assetCorpTaxActAppendedTable9Tmp.DefictAmountSum             = assetCorpTaxActAppendedTable9Tmp.DefictAmountPrevious + assetCorpTaxActAppendedTable9Tmp.DefictAmountCurrent;

            // Inserts field 16(9)-21 (8 - 7)
            assetCorpTaxActAppendedTable9Tmp.DefictAmountForSpecialDep   = max(0, assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount - assetCorpTaxActAppendedTable9Tmp.ReserveAmount);
        }

        // Inserts field 16(9)-20 (min(7, 10))
        assetCorpTaxActAppendedTable9Tmp.ReserveDepAmountCalculated      = min(assetCorpTaxActAppendedTable9Tmp.ReserveAmount, assetCorpTaxActAppendedTable9Tmp.AllowableReserveAmount);

        reserveStarteDate = specialDepStartDate;
        reserveEndDate    = refAssetBook.LastDepreciationDateExtraOrd;

        if (reserveEndDate >= endDate)
        {
            reserveEndDate = endDate;
        }

        // Inserts field 16(9)-22
        if (currentUserLanguage == #LanguageJA)
        {
            str dateStr;
            if (str2Int(JapaneseDateTimeHelper::date2str(reserveStarteDate, 'yy')) == 1)
            {
                dateStr = strFmt("%1%2·%3·%4", JapaneseDateTimeHelper::getEraName(reserveStarteDate), JapaneseDateTimeHelper::getYearStr(reserveStarteDate), JapaneseDateTimeHelper::getMonthStr(reserveStarteDate), JapaneseDateTimeHelper::getDayStr(reserveStarteDate));
            }
            else
            {
                dateStr = JapaneseDateTimeHelper::date2str(reserveStarteDate, #JapanDateFormat);
            }

            assetCorpTaxActAppendedTable9Tmp.ReserveFiscalYearStartDate = strDel(dateStr, 2, 1);

            if (str2Int(JapaneseDateTimeHelper::date2str(reserveEndDate, 'yy')) == 1)
            {
                dateStr = strFmt("%1%2·%3·%4", JapaneseDateTimeHelper::getEraName(reserveEndDate), JapaneseDateTimeHelper::getYearStr(reserveEndDate), JapaneseDateTimeHelper::getMonthStr(reserveEndDate),JapaneseDateTimeHelper::getDayStr(reserveEndDate));
            }
            else
            {
                dateStr = JapaneseDateTimeHelper::date2str(reserveEndDate, #JapanDateFormat);
            }

            assetCorpTaxActAppendedTable9Tmp.ReserveFiscalYearEndDate = strDel(dateStr, 2, 1);
        }
        else
        {
            assetCorpTaxActAppendedTable9Tmp.ReserveFiscalYearStartDate  = date2StrUsr(reserveStarteDate, DateFlags::FormatAll);
            assetCorpTaxActAppendedTable9Tmp.ReserveFiscalYearEndDate    = date2StrUsr(reserveEndDate, DateFlags::FormatAll);
        }

        // Inserts field 16(9)-23
        assetCorpTaxActAppendedTable9Tmp.OverDepAmountFromPreviousTerm = this.calcNotFullAllocationReserveAmountsSum();

        if (isSpecial)
        {
            sumReserveAmounts   = AssetSpecialDepHelper_JP::calcAccumulatedReserveAmountMst(
                refAssetBook,
                dateNull(),
                startDate - 1);

            sumAllocatedAmounts = AssetSpecialDepHelper_JP::calcAccumulatedAllocationAmountMst(
                refAssetBook,
                dateNull(),
                startDate - 1);
        }
        else
        {
            sumReserveAmounts   = -AssetDepTransMap_JP::calcAccumulatedAmtMstPerDateTranstype(
                refAssetBook,
                dateNull(),
                startDate - 1,
                AssetTransType::AdditionalDepReserve_JP);

            sumAllocatedAmounts = AssetDepTransMap_JP::calcAccumulatedAmtMstPerDateTranstype(
                refAssetBook,
                dateNull(),
                startDate - 1,
                AssetTransType::AdditionalDepReserveAllocation_JP);
        }

        // Inserts field 16(9)-24
        assetCorpTaxActAppendedTable9Tmp.ReserveAmountAtBeginning   = sumReserveAmounts - sumAllocatedAmounts;

        // Inserts field 16(9)-25
        if (refAssetBook.SpecialDepAllocationUnit_JP == AssetAccrualFiscal::Yearly)
        {
            allocatePeriod = refAssetBook.SpecialDepAllocationPeriods_JP * monthsOfYear;
        }
        else if (refAssetBook.SpecialDepAllocationUnit_JP == AssetAccrualFiscal::Quarterly)
        {
            allocatePeriod = refAssetBook.SpecialDepAllocationPeriods_JP * monthsOfQuarter;
        }
        else
        {
            allocatePeriod = refAssetBook.SpecialDepAllocationPeriods_JP;
        }

        if (allocatePeriod)
        {
            assetCorpTaxActAppendedTable9Tmp.ProfitEquallyDivided = AssetDepCalculationHelper_JP::roundOffDepreciation(
                assetCorpTaxActAppendedTable9Tmp.OverDepAmountFromPreviousTerm * monthsOfYear / allocatePeriod,
                assetBookTable.roundOffDepreciation);
        }

        if (assetCorpTaxActAppendedTable9Tmp.ProfitEquallyDivided != 0)
        {
            assetCorpTaxActAppendedTable9Tmp.ProfitEquallyDividedNum = int2str(monthsOfYear) + #Division + int2str(allocatePeriod);
        }

        // Inserts field 16(9)-26
        assetCorpTaxActAppendedTable9Tmp.ProfitAdditional       = #DefaultAmount;

        // Inserts field 16(9)-27
        assetCorpTaxActAppendedTable9Tmp.ProfitSum              = assetCorpTaxActAppendedTable9Tmp.ProfitAdditional + assetCorpTaxActAppendedTable9Tmp.ProfitEquallyDivided;

        // Inserts field 16(9)-28
        assetCorpTaxActAppendedTable9Tmp.ReserveAmountAtEnding  = assetCorpTaxActAppendedTable9Tmp.ReserveAmountAtBeginning - assetCorpTaxActAppendedTable9Tmp.ProfitSum;

        assetCorpTaxActAppendedTable9Tmp.RowGroupNum    = rowCount div #GroupNum;
        assetCorpTaxActAppendedTable9Tmp.ColunmGroupNum = rowCount mod #GroupNum;
        assetCorpTaxActAppendedTable9Tmp.SortingNumber  = rowCount;

        if (assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount > 0
            || assetCorpTaxActAppendedTable9Tmp.ReserveAmount > 0
            || assetCorpTaxActAppendedTable9Tmp.ProfitEquallyDivided > 0)
        {
            if (accountingCurrency != #CurrencyJPY)
            {
                this.amountFromAccounttingToJPY();
            }

            assetCorpTaxActAppendedTable9Tmp.insert();

            rowCount ++;
        }

        if ((rowCount + 1) mod #GroupNum == 0)
        {
            this.insertSumData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDetailTmpTableForDirectOff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data to temp table for direct off method.
    /// </summary>
    public void insertDetailTmpTableForDirectOff()
    {
        AssetAmount acquistionAmount;
        AssetAmount depAmount;
        AssetAmount priHalfAmounts;
        AssetAmount priBroughtForwardAmounts;
        AssetAmount acceleratedDepAmount;
        AssetDepLimitCalculator_JP  assetDepLimitCalculator_Additional;

        assetCorpTaxActAppendedTable9Tmp.clear();

        // Inserts field 16(9)-2
        assetCorpTaxActAppendedTable9Tmp.MajorType     = assetMajorType.Description;

        // Inserts field 16(9)-3
        assetCorpTaxActAppendedTable9Tmp.PropertyGroup = assetPropertyGroup.Description;

        // Inserts field 16(9)-4
        assetCorpTaxActAppendedTable9Tmp.AssetName     = assetTable.Name ? assetTable.Name : assetTable.AssetId;

        // Inserts field 16(9)-5
        if (currentUserLanguage == #LanguageJA)
        {
            assetCorpTaxActAppendedTable9Tmp.PutInServiceDate = JapaneseDateTimeHelper::date2str(assetBook.UsedFromDate, #ParameterYearName);
        }
        else
        {
            assetCorpTaxActAppendedTable9Tmp.PutInServiceDate = int2str(mthOfYr(assetBook.UsedFromDate)) + enum2str(DateSeparator::Slash) + int2str(year(assetBook.UsedFromDate));
        }

        // Inserts field 16(9)-6
        depProfileChange = AssetDepProfileChange_JP::find(assetBook.TableId, assetBook.RecId, endDate);
        if (depProfileChange.RecId)
        {
            assetCorpTaxActAppendedTable9Tmp.UsefulLife = depProfileChange.ServiceLife;
        }
        else
        {
            assetCorpTaxActAppendedTable9Tmp.UsefulLife = assetBook.ServiceLife;
        }

        // Inserts field 16(9)-7
        assetCorpTaxActAppendedTable9Tmp.ReserveAmount  = -AssetDepTransMap_JP::calcAccumulatedAmtMstPerDateTranstype(
            refAssetBook,
            startDate,
            endDate,
            AssetTransType::ExtraordinaryDepreciation,
            0,
            true);

        // Inserts field 16(9)-9
        assetCorpTaxActAppendedTable9Tmp.DefictAmountFromPreviousTerm = this.getUnderDepreciationAmount(
            [AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff, AssetDepEntityType_JP::SpecialDepreciationWithDirectOff],
            startDate - 1);

        // Inserts field 16(9)-8
        // If the special depreciation start date in the first year of service life, it will be print
        // If the special reserve periods less than the special depreciation apply number of periods(from the special depreciation start date to the report print end date), it also will be print
        if ((specialDepStartDate >= startDate && specialDepStartDate <= endDate)
            || ((assetDepreciationProfileExt.Accrual == AssetAccrual::FiscalPeriod
                    ||assetDepreciationProfileExt.Accrual == AssetAccrual::Quarterly)
                && assetTableIntervalExt.numOfPeriods(specialDepStartDate, startDate - 1) < assetDepreciationProfileExt.SpecialDepApplyNumOfPeriods_JP)
            || (assetDepreciationProfileExt.Accrual == AssetAccrual::Yearly
                && assetTableIntervalExt.numOfYearsBetweenDates(specialDepStartDate, startDate - 1) < assetDepreciationProfileExt.SpecialDepApplyNumOfPeriods_JP))
        {
            if (isSpecial)
            {
                acquistionAmount = assetSumCalc.acquisitionValue() + assetSumCalc.acquisitionAdjValue() - assetSumCalc.getRetirementObligationAcquisitionValue_JP();
                assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount = AssetDepCalculationHelper_JP::roundOffDepreciation(
                    acquistionAmount * assetDepreciationProfileExt.SpecialDepBaseRatio_JP * assetDepreciationProfileExt.SpecialDepRate_JP,
                    assetBookTable.roundOffDepreciation);
            }
            else
            {
                assetDepLimitCalculator_Additional = AssetDepLimitCalculator_JP::construct(assetBook, AssetDepLimitType_JP::ExtraordinaryDepreciation, startDate, cacheOwnerGUID);
                assetDepLimitCalculator_Additional.init();
                assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount = assetDepLimitCalculator_Additional.calcLimitForDateRange(startDate, endDate);
            }
        }

        // Inserts field 16(9)-10 (8 + 9)
        assetCorpTaxActAppendedTable9Tmp.AllowableReserveAmount = assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount + assetCorpTaxActAppendedTable9Tmp.DefictAmountFromPreviousTerm;

        if (assetCorpTaxActAppendedTable9Tmp.ReserveAmount - assetCorpTaxActAppendedTable9Tmp.AllowableReserveAmount >= 0)
        {
            // Inserts field 16(9)-11 (7 - 10)
            assetCorpTaxActAppendedTable9Tmp.OverDepreciationAmount = assetCorpTaxActAppendedTable9Tmp.ReserveAmount - assetCorpTaxActAppendedTable9Tmp.AllowableReserveAmount;
        }
        else
        {
            if (isSpecial)
            {
                // Inserts field 16(9)-13 (8 - (7 - 9)), if 7 - 9 <= 0, then 8
                if ((assetCorpTaxActAppendedTable9Tmp.ReserveAmount - assetCorpTaxActAppendedTable9Tmp.DefictAmountFromPreviousTerm) <= 0)
                {
                    assetCorpTaxActAppendedTable9Tmp.DefictAmountSpecialAtFirstYear = assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount;
                }
                else
                {
                    assetCorpTaxActAppendedTable9Tmp.DefictAmountSpecialAtFirstYear = max(0, assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount - (assetCorpTaxActAppendedTable9Tmp.ReserveAmount - assetCorpTaxActAppendedTable9Tmp.DefictAmountFromPreviousTerm));
                }

                // Inserts field 16(9)-18
                assetCorpTaxActAppendedTable9Tmp.DefictAmountCurrent = assetCorpTaxActAppendedTable9Tmp.DefictAmountSpecialAtFirstYear;
            }
            else
            {
                // Inserts field 16(9)-12 (8 - 7)
                assetCorpTaxActAppendedTable9Tmp.DefictAmountAdditional = max(0, assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount - assetCorpTaxActAppendedTable9Tmp.ReserveAmount);

                // Inserts field 16(9)-18
                assetCorpTaxActAppendedTable9Tmp.DefictAmountCurrent = assetCorpTaxActAppendedTable9Tmp.DefictAmountAdditional;
            }

            // Inserts field 16(9)-14 (10 - 7)
            assetCorpTaxActAppendedTable9Tmp.DefictAmountToNextTerm      = max(0, assetCorpTaxActAppendedTable9Tmp.AllowableReserveAmount - assetCorpTaxActAppendedTable9Tmp.ReserveAmount);

            // Inserts field 16(9)-15
            assetCorpTaxActAppendedTable9Tmp.DefictAmountExcluded        = -assetDepEntityInquiry_PreTaxDeduction.calcSpecialUnderDepWillExpirInNextYear(endDate);

            // Inserts field 16(9)-16
            assetCorpTaxActAppendedTable9Tmp.NetDefictAmountToNextAmount = this.getUnderDepreciationAmount(
                [AssetDepEntityType_JP::SpecialDepreciationWithDirectOff, AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff],
                endDate);

            // Inserts field 16(9)-17
            if (isHalfYear)
            {
                if (specialDepStartDate <= startDate)
                {
                    if (isSpecial)
                    {
                        acquistionAmount = assetSumCalcPrevious.acquisitionValue()
                            + assetSumCalcPrevious.acquisitionAdjValue()
                            - assetSumCalcPrevious.getRetirementObligationAcquisitionValue_JP();

                        assetCorpTaxActAppendedTable9Tmp.DefictAmountPrevious = AssetDepCalculationHelper_JP::roundOffDepreciation(
                            acquistionAmount * assetDepreciationProfileExt.SpecialDepBaseRatio_JP * assetDepreciationProfileExt.SpecialDepRate_JP,
                            assetBookTable.roundOffDepreciation);

                        priHalfAmounts = -AssetDepTransMap_JP::calcAccumulatedAmtMstPerDateTranstype(
                            refAssetBook,
                            startDatePrevious,
                            endDatePrevious,
                            AssetTransType::ExtraordinaryDepreciation,
                            0,
                            true);

                        priBroughtForwardAmounts = this.getUnderDepreciationAmount(
                            [AssetDepEntityType_JP::AdditionalDepreciationWithDirectOff, AssetDepEntityType_JP::SpecialDepreciationWithDirectOff],
                            startDatePrevious - 1);

                        if (priHalfAmounts - priBroughtForwardAmounts > 0)
                        {
                            assetCorpTaxActAppendedTable9Tmp.DefictAmountPrevious = max(0, assetCorpTaxActAppendedTable9Tmp.DefictAmountPrevious - (priHalfAmounts - priBroughtForwardAmounts));
                        }
                    }
                    else
                    {
                        assetDepLimitCalculator_Additional = AssetDepLimitCalculator_JP::construct(assetBook, AssetDepLimitType_JP::ExtraordinaryDepreciation, startDatePrevious, cacheOwnerGUID);
                        assetDepLimitCalculator_Additional.init();
                        assetCorpTaxActAppendedTable9Tmp.DefictAmountPrevious = assetDepLimitCalculator_Additional.calcLimitForDateRange(startDatePrevious, endDatePrevious);

                        priHalfAmounts = -AssetDepTransMap_JP::calcAccumulatedAmtMstPerDateTranstype(
                            refAssetBook,
                            startDatePrevious,
                            endDatePrevious,
                            AssetTransType::ExtraordinaryDepreciation,
                            0,
                            true);

                        assetCorpTaxActAppendedTable9Tmp.DefictAmountPrevious = max(0, assetCorpTaxActAppendedTable9Tmp.DefictAmountPrevious - priHalfAmounts);
                    }
                }
            }

            // Inserts field 16(9)-19 (17 + 18)
            assetCorpTaxActAppendedTable9Tmp.DefictAmountSum             = assetCorpTaxActAppendedTable9Tmp.DefictAmountPrevious + assetCorpTaxActAppendedTable9Tmp.DefictAmountCurrent;

            // Inserts field 16(9)-21 (8 - 7)
            assetCorpTaxActAppendedTable9Tmp.DefictAmountForSpecialDep   = max(0, assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount - assetCorpTaxActAppendedTable9Tmp.ReserveAmount);
        }

        // Inserts field 16(9)-20 (min(7, 10))
        assetCorpTaxActAppendedTable9Tmp.ReserveDepAmountCalculated      = min(assetCorpTaxActAppendedTable9Tmp.ReserveAmount, assetCorpTaxActAppendedTable9Tmp.AllowableReserveAmount);

        assetCorpTaxActAppendedTable9Tmp.RowGroupNum    = rowCount div #GroupNum;
        assetCorpTaxActAppendedTable9Tmp.ColunmGroupNum = rowCount mod #GroupNum;
        assetCorpTaxActAppendedTable9Tmp.SortingNumber  = rowCount;

        if (assetCorpTaxActAppendedTable9Tmp.AllowableSpecialDepAmount > 0
            || assetCorpTaxActAppendedTable9Tmp.ReserveAmount > 0
            || assetCorpTaxActAppendedTable9Tmp.ProfitEquallyDivided > 0)
        {
            if (accountingCurrency != #CurrencyJPY)
            {
                this.amountFromAccounttingToJPY();
            }

            assetCorpTaxActAppendedTable9Tmp.insert();

            rowCount ++;
        }

        if ((rowCount + 1) mod #GroupNum == 0)
        {
            this.insertSumData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeaderDataToTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AssetCorpTaxActAppendedHeaderTmp_JP</c> table.
    /// </summary>
    public void insertHeaderDataToTmp()
    {
        CompanyInfo  companyInfo = CompanyInfo::find();

        if (currentUserLanguage == #LanguageJA)
        {
            str dateStr;
            if (startDate)
            {
                //insert the value for the fiscal year start date
                if (str2Int(JapaneseDateTimeHelper::date2str(startDate, 'yy')) == 1)
                {
                    dateStr = strFmt("%1%2·%3·%4", JapaneseDateTimeHelper::getEraName(startDate), JapaneseDateTimeHelper::getYearStr(startDate), JapaneseDateTimeHelper::getMonthStr(startDate), JapaneseDateTimeHelper::getDayStr(startDate));
                }
                else
                {
                    dateStr = JapaneseDateTimeHelper::date2str(startDate, #JapanDateFormat);
                }

                assetCorpTaxActAppendedHeaderTmp.FiscalYearStartDate = strDel(dateStr, 2, 1);
                
                //insert the value for the fiscal year start date by the capital date
                assetCorpTaxActAppendedHeaderTmp.YearOfStartDateAppended = JapaneseDateTimeHelper::getEraName(startDate)
                    + (str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterYear)) == 1 ? JapaneseDateTimeHelper::getYearStr(startDate) : Global_CN::numeralsToTxt(str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterYear)), true, false, #GroupNum))
                    + enum2str(DateSeparator::Dot) + Global_CN::numeralsToTxt(str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterMonth)), true, false, 1)
                    + enum2str(DateSeparator::Dot) + Global_CN::numeralsToTxt(str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterDay)), true, false, 1);
            }

            if (endDate)
            {
                //insert the value for the fiscal year end date
                if (str2Int(JapaneseDateTimeHelper::date2str(endDate, 'yy')) == 1)
                {
                    dateStr = strFmt("%1%2·%3·%4", JapaneseDateTimeHelper::getEraName(endDate), JapaneseDateTimeHelper::getYearStr(endDate), JapaneseDateTimeHelper::getMonthStr(endDate), JapaneseDateTimeHelper::getDayStr(endDate));
                }
                else
                {
                    dateStr = JapaneseDateTimeHelper::date2str(endDate, #JapanDateFormat);
                }
                assetCorpTaxActAppendedHeaderTmp.FiscalYearEndDate = strDel(dateStr, 2, 1);
            }

            if (startDatePrevious)
            {
                //insert the value for the previous fiscal year start date
                if (str2Int(JapaneseDateTimeHelper::date2str(startDatePrevious, 'yy')) == 1)
                {
                    dateStr = strFmt("%1%2·%3·%4", JapaneseDateTimeHelper::getEraName(startDatePrevious), JapaneseDateTimeHelper::getYearStr(startDatePrevious), JapaneseDateTimeHelper::getMonthStr(startDatePrevious),JapaneseDateTimeHelper::getDayStr(startDatePrevious));
                }
                else
                {
                    dateStr = JapaneseDateTimeHelper::date2str(startDatePrevious, #JapanDateFormat);
                }
                assetCorpTaxActAppendedHeaderTmp.PreviousFiscalYearStartDate = strDel(dateStr, 2, 1);
            }

            if (endDatePrevious)
            {
                //insert the value for the previous fiscal year end date
                if (str2Int(JapaneseDateTimeHelper::date2str(endDatePrevious, 'yy')) == 1)
                {
                    dateStr = strFmt("%1%2·%3·%4", JapaneseDateTimeHelper::getEraName(endDatePrevious), JapaneseDateTimeHelper::getYearStr(endDatePrevious), JapaneseDateTimeHelper::getMonthStr(endDatePrevious), JapaneseDateTimeHelper::getDayStr(endDatePrevious));
                }
                else
                {
                    dateStr = JapaneseDateTimeHelper::date2str(endDatePrevious, #JapanDateFormat);
                }
                assetCorpTaxActAppendedHeaderTmp.PreviousFiscalYearEndDate = strDel(dateStr, 2, 1);
            }
        }
        else
        {
            if (startDate)
            {
                //insert the value for the fiscal year start date
                assetCorpTaxActAppendedHeaderTmp.FiscalYearStartDate     = date2StrUsr(startDate, DateFlags::FormatAll);
                //insert the value for the fiscal year start date by the capital date
                assetCorpTaxActAppendedHeaderTmp.YearOfStartDateAppended = date2StrUsr(StartDate, DateFlags::FormatAll);
            }

            if (endDate)
            {
                //insert the value for the fiscal year end date
                assetCorpTaxActAppendedHeaderTmp.FiscalYearEndDate       = date2StrUsr(endDate, DateFlags::FormatAll);
            }

            if (startDatePrevious)
            {
                //insert the value for the previous fiscal year start date
                assetCorpTaxActAppendedHeaderTmp.PreviousFiscalYearStartDate  = date2StrUsr(startDatePrevious, DateFlags::FormatAll);
            }

            if (endDatePrevious)
            {
                //insert the value for the previous fiscal year end date
                assetCorpTaxActAppendedHeaderTmp.PreviousFiscalYearEndDate    = date2StrUsr(endDatePrevious, DateFlags::FormatAll);
            }
        }

        //insert the value of company's name
        assetCorpTaxActAppendedHeaderTmp.Name         = companyInfo.Name;

        //insert the value of company's Kana name
        assetCorpTaxActAppendedHeaderTmp.PhoneticName = companyInfo.PhoneticName;

        assetCorpTaxActAppendedHeaderTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSumData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the sum data for one page.
    /// </summary>
    public void insertSumData()
    {
        assetCorpTaxActAppendedTable9Tmp.clear();

        select sum(ReserveAmount), sum(AllowableSpecialDepAmount), sum(DefictAmountFromPreviousTerm),
               sum(AllowableReserveAmount), sum(OverDepreciationAmount), sum(DefictAmountAdditional),
               sum(DefictAmountSpecialAtFirstYear), sum(DefictAmountToNextTerm), sum(DefictAmountExcluded),
               sum(NetDefictAmountToNextAmount), sum(DefictAmountPrevious), sum(DefictAmountCurrent),
               sum(DefictAmountSum), sum(ReserveDepAmountCalculated), sum(DefictAmountForSpecialDep),
               sum(ReserveAmountAtBeginning), sum(ProfitEquallyDivided),
               sum(ProfitAdditional), sum(ProfitSum), sum(ReserveAmountAtEnding),
               sum(OverDepAmountFromPreviousTerm) from assetCorpTaxActAppendedTable9Tmp
            where assetCorpTaxActAppendedTable9Tmp.SortingNumber >= rowCount - 4
               && assetCorpTaxActAppendedTable9Tmp.SortingNumber <= rowCount - 1;

        assetCorpTaxActAppendedTable9Tmp.RowGroupNum            = rowCount div #GroupNum;
        assetCorpTaxActAppendedTable9Tmp.ColunmGroupNum         = rowCount mod #GroupNum;
        assetCorpTaxActAppendedTable9Tmp.SortingNumber          = rowCount;

        assetCorpTaxActAppendedTable9Tmp.insert();

        rowCount ++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records based on the specified values.
    /// </summary>
    public void processReport()
    {
        Query                       query;
        QueryRun                    queryRun;
        QueryBuildDataSource        assetBook_ds;
        AssetTableInterval          assetTableInterval;
        Set                         docTypes;
        AssetDocumentSumCalcUtil_JP docSumCalcUtil;

        this.getReportParameters();

        // Initialize global variables, those variables are added in order to improve the performance.
        accountingCurrency      = Ledger::accountingCurrency();
        currentUserLanguage     = currentUserLanguage();
        currencyExchangeHelper  = CurrencyExchangeHelper::newExchangeDate(
            Ledger::current(),
            printDate);

        docTypes = new Set(Types::Container);
        docTypes.add([AssetTransType::Acquisition, AssetDocumentType_JP::AssetRetirementObligation]);
        docTypes.add([AssetTransType::AcquisitionAdj, AssetDocumentType_JP::AssetRetirementObligation]);
        docTypes.add([AssetTransType::Depreciation, AssetDocumentType_JP::AssetRetirementObligation]);
        docTypes.add([AssetTransType::DepreciationAdj, AssetDocumentType_JP::AssetRetirementObligation]);

        cacheOwnerGUID = newGuid();

        rowCount = 0;
        query = this.parmQuery();

        AssetCorpTaxActAppendTablesHelper_JP::useAssetBookForAssetDepreciationProfileJoin(query);

        assetBook_ds = query.dataSourceTable(tableNum(AssetBook));
        SysQuery::findOrCreateRange(assetBook_ds, fieldNum(AssetBook, Status)).value(SysQuery::valueNot(enum2str(AssetStatus::NoAcquisition)));
        SysQuery::findOrCreateRange(assetBook_ds, fieldNum(AssetBook, UsedFromDate)).value(queryRange(dateNull(), endDate));
        assetBook_ds.addOrderByField(fieldNum(AssetBook, UsedFromDate));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(AssetTable)))
            {
                assetTable                  = queryRun.get(tableNum(AssetTable));
                assetBook                   = queryRun.get(tableNum(AssetBook));
                assetBookTable              = queryRun.get(tableNum(AssetBookTable));
                assetMajorType              = queryRun.get(tableNum(assetMajorType));
                assetPropertyGroup          = queryRun.get(tableNum(AssetPropertyGroup));
                assetDepreciationProfile    = queryRun.get(tableNum(AssetDepreciationProfile));

                refAssetBook = null;

                if (assetBookTable.LinkedCurrentLayerAssetBookTable_JP)
                {
                    refAssetBook = AssetBook::find(assetTable.AssetId, assetBookTable.LinkedCurrentLayerAssetBookTable_JP);
                }

                if (!refAssetBook)
                {
                    // If the referenced value model isn't setup, take the related value from current value model,
                    // So assign current value model to refAssetBook variable.
                    refAssetBook = assetBook;
                }

                if (refAssetBook && this.includeAssetInReport())
                {
                    assetTableInterval = assetBook.AssetDepBookMap_JP::assetTableInterval(startDate);
                    assetDepEntityInquiry_PreTaxDeduction = AssetDepEntityInquiry_PreTaxDeduction_JP::construct(
                        assetTable.AssetId,
                        assetBook.BookId,
                        assetTableInterval);

                    specialDepStartDate = isSpecial ? assetBook.DepreciationStartDate : assetBook.SpecialDepStartDate_JP;

                    assetSumCalc = AssetSumCalc_Trans::newAssetPeriod(assetTable.AssetId, assetBook.BookId, dateNull(), endDate);
                    docSumCalcUtil = AssetDocumentSumCalcUtil_JP::construct(docTypes);
                    assetSumCalc.parmDocSumCalcUtil_JP(docSumCalcUtil);

                    if (isHalfYear)
                    {
                        assetSumCalcPrevious    = AssetSumCalc_Trans::newAssetPeriod(assetTable.AssetId, assetBook.BookId, dateNull(), endDatePrevious);
                        docSumCalcUtil = AssetDocumentSumCalcUtil_JP::construct(docTypes);
                        assetSumCalcPrevious.parmDocSumCalcUtil_JP(docSumCalcUtil);
                    }

                    if (refAssetDepreciationProfileExt.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::Reserve)
                    {
                        this.insertDetailTmpTable();
                    }
                    else
                    {
                        this.insertDetailTmpTableForDirectOff();
                    }
                }
            }
        }

        this.insertHeaderDataToTmp();

        if (rowCount == 0
            || rowCount mod #GroupNum)
        {
            this.insertBlankData(#GroupNum - (rowCount mod #GroupNum) - 1);
        }

        if (rowCount mod #GroupNum != 0)
        {
            this.insertSumData();
        }

        AssetDepLimitCalculator_JP::clearCacheForOwner(cacheOwnerGUID);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>