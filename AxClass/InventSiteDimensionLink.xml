<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSiteDimensionLink</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class InventSiteDimensionLink
{
    Common      storageDimTable;
    FieldId     inventSiteIdFieldId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>axParmDefaultDimensionSet</Name>
				<Source><![CDATA[
    abstract public void axParmDefaultDimensionSet(AxInventSiteDimensionable _axInventSiteDimensionable, DimensionDefault _dimension)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>axSetDefaultDimension</Name>
				<Source><![CDATA[
    abstract public void axSetDefaultDimension(AxInventSiteDimensionable _axInventSiteDimensionable, boolean _forceDefaultDimensionChanges = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkDimension</Name>
				<Source><![CDATA[
    abstract public void linkDimension()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteIdFieldId</Name>
				<Source><![CDATA[
    protected FieldId parmInventSiteIdFieldId(FieldId _inventSiteIdFieldId = inventSiteIdFieldId)
    {
        inventSiteIdFieldId = _inventSiteIdFieldId;
        return inventSiteIdFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorageDimTable</Name>
				<Source><![CDATA[
    protected Common parmStorageDimTable(Common _storageDimTable = storageDimTable)
    {
        storageDimTable = _storageDimTable;
        return storageDimTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDimensionTables</Name>
				<Source><![CDATA[
    static public InventSiteDimensionLink newDimensionTables(Common _financialDimensionTable, Common _storageDimTable)
    {
        InventSiteDimensionLink inventSiteDimensionLink = null;
        FieldId                 dimensionFieldId    = 0;
        FieldId                 inventSiteIdFieldId = 0;

        boolean useSiteLink = InventSite::useSiteLink(_financialDimensionTable);

        inventSiteIdFieldId = fieldName2id(_storageDimTable.TableId, extendedTypeStr(InventSiteId));

        switch (_financialDimensionTable.TableId)
        {
            case tableNum(InventJournalTrans):
                if (useSiteLink)
                {
                    if (FormDataUtil::isFormDataSource(_storageDimTable))
                    {
                        FormDataSource formDataSource = FormDataUtil::getFormDataSource(_storageDimTable);
                        if (formDataSource.name() == identifierStr(InventDimReceipt))
                        {
                            useSiteLink = false;
                        }
                    }
                }
                break;

            default:
                break;
        }

        if (useSiteLink && SysDictTable::isTableMapped(tableNum(DimensionDefaultMap), _financialDimensionTable.TableId))
        {
            inventSiteDimensionLink = InventSiteDimensionLink_DimActive::newStandard(_financialDimensionTable);
        }
        else
        {
            inventSiteDimensionLink = InventSiteDimensionLink_Null::newStandard();
        }

        inventSiteDimensionLink.parmStorageDimTable(_storageDimTable);
        inventSiteDimensionLink.parmInventSiteIdFieldId(inventSiteIdFieldId);

        return inventSiteDimensionLink;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
