<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationMassCreateUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesQuotationMassCreateUIBuilder
    extends SysOperationAutomaticUIBuilder
{
    DialogField     quotationTypeDialog;
    DialogField     templateNameDialog;
    DialogField     templateGroupIdDialog;
    DialogField     accountTypeDialog;

    SysOperationDataContractInfo        dataContractInfo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountType_modified</Name>
				<Source><![CDATA[
    private boolean accountType_modified(FormComboBoxControl _accountTypeControl)
    {
        boolean     ret = _accountTypeControl.modified();

        if (ret)
        {
            this.updateControlsForAccountType();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDialogField</Name>
				<Source><![CDATA[
    protected DialogField addDialogField(identifierName _methodName, Object _dataContract = this.dataContractObject())
    {
        DialogField ret;

        if (classIdGet(_dataContract) == classNum(SalesQuotationMassCreateContract)
            && _methodName == methodStr(SalesQuotationMassCreateContract, parmCampaignId))
        {
            ret = null;
        }
        else
        {
            ret = super(_methodName, _dataContract);

            switch (_methodName)
            {
                case methodStr(SalesQuotationMassCreateContract, parmTemplateName):
                    templateNameDialog = ret;
                    break;
                case methodStr(SalesQuotationMassCreateContract, parmTemplateGroupId):
                    templateGroupIdDialog= ret;
                    break;
                case methodStr(SalesQuotationMassCreateContract, parmQuotationType):
                    quotationTypeDialog = ret;
                    FormBuildComboBoxControl comboBoxControl = ret.control();
                    comboBoxControl.enabled(false);
                    break;
                case methodStr(SalesQuotationMassCreateContract, parmAccountType):
                    accountTypeDialog = ret;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    public void build()
    {
        dataContractInfo = this.controller().getDataContractInfoObjects().lookup('_dataContract');

        super();

        FormBuildStringControl templateNameControl = templateNameDialog.control();
        templateNameControl.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(SalesQuotationMassCreateUIBuilder, templateName_lookup),
            this);

        FormBuildStringControl templateGroupIdControl = templateGroupIdDialog.control();
        templateGroupIdControl.registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(SalesQuotationMassCreateUIBuilder, templateGroupId_modified),
            this);

        FormBuildComboBoxControl accountTypeControl = accountTypeDialog.control();
        accountTypeControl.registerOverrideMethod(
            methodStr(FormComboBoxControl, modified),
            methodStr(SalesQuotationMassCreateUIBuilder, accountType_modified),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does actions after UI is built.
    /// </summary>
    /// <remarks>
    /// Methods updates UI controls.
    /// </remarks>
    public void postBuild()
    {
        super();

        // forcing control re-fresh as SysLastValue sets value into Account type before the modified logic is registered
        this.updateControlsForAccountType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateGroupId_modified</Name>
				<Source><![CDATA[
    private boolean templateGroupId_modified(FormStringControl _templateGroupIdControl)
    {
        boolean             ret = true;

        ret = _templateGroupIdControl.modified();

        if (!SalesQuotationTable::isTemplateActive(quotationTypeDialog.value(), _templateGroupIdControl.text()))
        {
             ret = checkFailed(strfmt("@SYS99925", templateGroupIdDialog.value()));
        }

        templateNameDialog.value('');

        FormStringControl templateNameControl = templateNameDialog.control();
        templateNameControl.text('');
        templateNameControl.update();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName_lookup</Name>
				<Source><![CDATA[
    private void templateName_lookup(FormStringControl _templateName)
    {
        SalesQuotationTable::lookupTemplateNameFiltered(_templateName, quotationTypeDialog.value(), templateGroupIdDialog.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControlsForAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates UI controlls based on query initialization.
    /// </summary>
    /// <remarks>
    /// Based on AccountType value, Customer or Prospect, Query is initialized differently.
    /// This method updates the Dialog UI based on the AccountType.
    /// </remarks>
    private void updateControlsForAccountType()
    {
        SalesQuotationMassCreateContract    dataContract = this.dataContractObject();

        // Populate controls data to data contract
        this.controller().getFromDialog();

        SysOperationQueryDataContractInfo queryInfo = dataContractInfo.getMemberObjects().lookup(methodStr(SalesQuotationMassCreateContract, parmQuery));
        // Init query will update the querystr property
        // this call will update the query object.

        Query query = SalesQuotationMassCreateController::initQuery(dataContract);
        queryInfo.parmQuery(query);

        this.controller().putToDialog();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
