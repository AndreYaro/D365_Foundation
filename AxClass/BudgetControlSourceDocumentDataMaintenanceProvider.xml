<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlSourceDocumentDataMaintenanceProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlSourceDocumentDataMaintenanceProvider</c> class is responsible for orchestrating 
/// the finding and processing of source document budget data.
/// </summary>
internal class BudgetControlSourceDocumentDataMaintenanceProvider extends BudgetControlDataMaintenanceProvider
    implements BudgetControlIDataMaintenanceOverrunSupported,
               BudgetControlIDataMaintenanceTrackingSelected,
               BudgetControlIDataMaintenanceOrderByUpdatable,
               BudgetControlILoggable
{
    private BudgetControlDataMaintenanceTrackingDetailCache trackingDetailCache;
    private str providerClassName;
    private BudgetControlDataMaintenanceRecId budgetControlDataMaintenanceRecId;
    private Set sourceDocumentsToProcess;
    private BudgetControlSourceDocumentDataMaintenanceRequest maintenanceRequest;
    private BudgetControlInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        providerClassName = classStr(BudgetControlSourceDocumentDataMaintenanceProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preFindDocuments</Name>
				<Source><![CDATA[
    public void preFindDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        super(_budgetControlDataMaintenanceRecId);

        if (maintenanceRequest && maintenanceRequest.RemoveFoundDocuments)
        {
            BudgetControlDataMaintenanceProvider::removeExistingFoundDocuments(_budgetControlDataMaintenanceRecId, providerClassName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectionChanged</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean onSelectionChanged(BudgetControlDataMaintenanceTracking _dataMaintenanceTracking)
    {
        boolean isAnyUpdated = false;
        BudgetControlDataMaintenanceTracking tracking;

        update_recordset tracking
            setting Selected = _dataMaintenanceTracking.Selected
            where tracking.BudgetControlDataMaintenance == _dataMaintenanceTracking.BudgetControlDataMaintenance
                && tracking.OriginatingTrackingNumber == _dataMaintenanceTracking.OriginatingTrackingNumber
                && tracking.Selected != _dataMaintenanceTracking.Selected
                && tracking.RecId != _dataMaintenanceTracking.RecId;

        if (tracking.RowCount() > 0)
        {
            isAnyUpdated = true;
            info(strFmt("@Budget:SourceDocumentProviderOriginatingNumberWarning", _dataMaintenanceTracking.OriginatingTrackingNumber));
        }

        return isAnyUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOverrunSupported</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isOverrunSupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderBy</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void updateOrderBy(BudgetControlIDataMaintenanceDesigner _designer)
    {
        if (_designer)
        {
            FormDataSource budgetControlDataMaintenanceTrackingDataSource = _designer.getBudgetControlDataMaintenanceTrackingDataSource();
            Query trackingQuery = budgetControlDataMaintenanceTrackingDataSource.query();
            int orderByCount = trackingQuery.orderByFieldCount();

            boolean orderByExists = false;
            for (int i = 1; i <= orderByCount; i++)
            {
                if (trackingQuery.orderByField(i).fieldID() == fieldNum(BudgetControlDataMaintenanceTracking, OriginatingTrackingNumber))
                {
                    orderByExists = true;
                    break;
                }
            }

            if (!orderByExists)
            {
                trackingQuery.dataSourceTable(tableNum(BudgetControlDataMaintenanceTracking)).addOrderByField(fieldNum(BudgetControlDataMaintenanceTracking, OriginatingTrackingNumber), SortOrder::Ascending);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds documents that require budget control data maintenance.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The <c>BudgetControlDataMaintenance</c> process group record Id.
    /// </param>
    public void findDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        budgetControlDataMaintenanceRecId = _budgetControlDataMaintenanceRecId;
        
        this.maintenanceRequest = BudgetControlSourceDocumentDataMaintenanceProvider::determineSourceDocumentRequest(budgetControlDataMaintenanceRecId, this);
        if (maintenanceRequest)
        {
            this.preFindDocuments(budgetControlDataMaintenanceRecId);

            SysOperationSandbox::callStaticMethod(classNum(BudgetControlSourceDocumentDataMaintenanceProvider),
                staticMethodStr(BudgetControlSourceDocumentDataMaintenanceProvider, findAndPopulateDocuments),
                maintenanceRequest.pack(),
                "@Budget:SourceDocumentDataMaintenanceProviderName");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSourceDocumentRequest</Name>
				<Source><![CDATA[
    internal static BudgetControlSourceDocumentDataMaintenanceRequest determineSourceDocumentRequest(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId, Object _caller)
    {
        BudgetControlSourceDocumentDataMaintenanceRequest maintenanceRequest;

        Args args = new Args();
        args.caller(_caller);

        FormRun sourceDocumentDataMaintenance = new MenuFunction(menuItemDisplayStr(BudgetcontrolSourceDocumentDataMaintenance), MenuItemType::Display).create(args);

        if (sourceDocumentDataMaintenance)
        {
            sourceDocumentDataMaintenance.run();
            sourceDocumentDataMaintenance.wait();
            if (sourceDocumentDataMaintenance.closedOk())
            {
                var requestable = sourceDocumentDataMaintenance as BudgetControlISourceDocumentDataMaintenanceRequestable;
                maintenanceRequest = requestable.getRequest();

                BudgetControlDataMaintenance budgetControlDataMaintenance = BudgetControlDataMaintenance::find(_budgetControlDataMaintenanceRecId);
                maintenanceRequest.FromDate = budgetControlDataMaintenance.DocumentFromDate;
                maintenanceRequest.ToDate = budgetControlDataMaintenance.DocumentToDate;
                maintenanceRequest.BudgetControlDataMaintenanceRecId = _budgetControlDataMaintenanceRecId;
            }
        }

        return maintenanceRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndPopulateDocuments</Name>
				<Source><![CDATA[
    internal static void findAndPopulateDocuments(container _inputParameters)
    {
        var request = BudgetControlSourceDocumentDataMaintenanceRequest::construct();
        request.unpack(_inputParameters);

        var finder = BudgetControlSourceDocumentDataMaintenanceFinder::construct(request);
        Set sourceDocumentsToProcess = finder.getSourceDocumentsToProcess();
        BudgetControlSourceDocumentDataMaintenanceProvider provider = new BudgetControlSourceDocumentDataMaintenanceProvider();
        provider.findRequestedDocuments(sourceDocumentsToProcess, request.BudgetControlDataMaintenanceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRequestedDocuments</Name>
				<Source><![CDATA[
    private void findRequestedDocuments(Set _sourceDocumentsToProcess, BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        if (_sourceDocumentsToProcess &&
            _sourceDocumentsToProcess.elements() > 0 &&
            _budgetControlDataMaintenanceRecId)
        {
            this.budgetControlDataMaintenanceRecId = _budgetControlDataMaintenanceRecId;
            this.sourceDocumentsToProcess = _sourceDocumentsToProcess;
            this.createDataMaintenanceTracking();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataMaintenanceTracking</Name>
				<Source><![CDATA[
    private void createDataMaintenanceTracking()
    {
        Description255 dataMaintenanceProviderName = this.getName();
        Description255 dataMaintenanceDescription = this.getDescription();
        utcdatetime dataMaintenanceDetectionDateTime = DateTimeUtil::utcNow();

        BudgetControlDataMaintenance budgetControlDataMaintenance = BudgetControlDataMaintenance::find(budgetControlDataMaintenanceRecId);

        ttsbegin;

        this.setupTrackingDetailCache();

        SetEnumerator setEnumerator = sourceDocumentsToProcess.getEnumerator();
        
        while (setEnumerator.moveNext())
        {
            SourceDocumentHeader header = SourceDocumentHeader::find(setEnumerator.current());

            var headerTrackingDetails = trackingDetailCache.getTrackingDetailsForSourceDocumentHeader(header.recId);

            if (header.RecId != 0 && !headerTrackingDetails.doTrackingDetailsExist())
            {
                // If the headerTrackingDetails haven't been added yet, then we haven't added the entire chain.
                // Conversely, if the headerTrackingDetails exist, then we have already processed the entire chain.
                // Example: A PR and PO from the same chain both need to be processed. We will add tracking for
                //          both the PR and PO when we add the PR's chain.
                //          We don't need to find the same chain when we get to the POs header.
                
                BudgetControlDataMaintenanceRelievingChain relievingChain = this.getRelievingChain(header.RecId);
                List trackingDetails = relievingChain.getDataMaintenanceTrackingDetailsForChain();
                ListEnumerator trackingDetailsEnumerator = trackingDetails.getEnumerator();

                while(trackingDetailsEnumerator.moveNext())
                {
                    BudgetControlDataMaintenanceTrackingDetails trackingDetailsCurrent = trackingDetailsEnumerator.current();

                    if (!trackingDetailsCurrent.doTrackingDetailsExist())
                    {
                        BudgetControlDataMaintenanceTracking dataMaintenanceTracking;
                        dataMaintenanceTracking.BudgetControlDataMaintenance = budgetControlDataMaintenanceRecId;
                        dataMaintenanceTracking.DataMaintenanceProvider = providerClassName;
                        dataMaintenanceTracking.DataMaintenanceProviderName = dataMaintenanceProviderName;
                        dataMaintenanceTracking.DataMaintenanceProviderDescription = dataMaintenanceDescription;
                        dataMaintenanceTracking.DataMaintenanceProviderDetectionDateTime = dataMaintenanceDetectionDateTime;
                        dataMaintenanceTracking.TrackingDocument = trackingDetailsCurrent.TrackingDocument;
                        dataMaintenanceTracking.TrackingNumber = trackingDetailsCurrent.TrackingNumber;
                        dataMaintenanceTracking.TrackingSourceIntegrator = trackingDetailsCurrent.SourceIntegrator;
                        dataMaintenanceTracking.OriginatingTrackingNumber = headerTrackingDetails.TrackingNumber;
                        dataMaintenanceTracking.OriginatingTrackingSourceIntegrator = headerTrackingDetails.SourceIntegrator;
                        dataMaintenanceTracking.Selected = NoYes::Yes;
                        dataMaintenanceTracking.ProcessStatus = BudgetControlDataMaintenanceStatus::NotStarted;

                        dataMaintenanceTracking.insert();
                    }
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelievingChain</Name>
				<Source><![CDATA[
    private BudgetControlDataMaintenanceRelievingChain getRelievingChain(SourceDocumentHeaderRecId _headerRecId)
    {
        BudgetControlRelievingChain relievingChainBase = BudgetControlRelievingChain::constructAndInitialize(_headerRecId);

        return BudgetControlDataMaintenanceRelievingChain::construct(relievingChainBase, trackingDetailCache);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupTrackingDetailCache</Name>
				<Source><![CDATA[
    private void setupTrackingDetailCache()
    {
        if (!this.trackingDetailCache)
        {
            this.trackingDetailCache = BudgetControlDataMaintenanceTrackingDetailCache::construct(budgetControlDataMaintenanceRecId, providerClassName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget control data maintenance scenario description.
    /// </summary>
    /// <returns>
    /// The description of the scenario.
    /// </returns>
    public Description255 getDescription()
    {
        return "@Budget:SourceDocumentDataMaintenanceProviderDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget control data maintenance scenario name.
    /// </summary>
    /// <returns>
    /// The name of the scenario.
    /// </returns>
    public Description255 getName()
    {
        return "@Budget:SourceDocumentDataMaintenanceProviderName";
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcessDocuments</Name>
				<Source><![CDATA[
    public void preProcessDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        this.budgetControlDataMaintenanceRecId = _budgetControlDataMaintenanceRecId;
        this.setupTrackingDetailCache();

        ttsbegin;

        BudgetControlDataMaintenance budgetControlDataMaintenance = BudgetControlDataMaintenance::find(budgetControlDataMaintenanceRecId);

        // For each chain, any existing BC data will be removed through the chain's processing.
        // However, there could be orphaned records that no chain will pick up due to missing BudgetSource references.
        // These need to be deleted to clear out all invalid budget funds.
        this.deleteMissingBudgetSourceRecords(budgetControlDataMaintenance.DocumentSourceTrackingStatus);

        ttscommit;

        // Rebuild so that the summary table accurately reflects the deletes that just took place.
        BudgetControlDataMaintenanceProvider::reprocessSummaryBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes data maintenance operations for a single document.
    /// </summary>
    /// <param name="_dataMaintenanceTrackingRecId">
    /// A <c>BudgetControlDataMaintenanceTracking</c> record Id.
    /// </param>
    /// <returns>
    /// The <c>BudgetCheckResult</c> value for the processed document.
    /// </returns>
    public BudgetCheckResult processDocument(RecId _dataMaintenanceTrackingRecId)
    {
        BudgetCheckResult result;
        BudgetControlDataMaintenanceTracking dataTracking;
        BudgetControlDataMaintenance budgetControlDataMaintenance;

        select firstonly * from dataTracking
            where dataTracking.RecId == _dataMaintenanceTrackingRecId
            join IsOverrunApproved from budgetControlDataMaintenance
                where dataTracking.BudgetControlDataMaintenance == budgetControlDataMaintenance.RecId;

        if (dataTracking.ProcessStatus != BudgetControlDataMaintenanceStatus::NotStarted)
        {
            return dataTracking.ProcessCheckResult;
        }

        this.setupTrackingDetailCache();
        SourceDocumentHeader header = SourceDocumentHeader::find(dataTracking.TrackingDocument);

        if (header)
        {
            BudgetControlDataMaintenanceRelievingChain relievingChain = this.getRelievingChain(header.RecId);

            try
            {
                PSNPurchCommitPurchOrderDataMainTmp purchOrderCommitmentYearOpenAcctDists;
                relievingChain.updateStatusAndResultForRelievingChain(BudgetControlDataMaintenanceStatus::Executing);

                using (var activityContext = this.getLogger().dataMaintenance().processSourceDocumentRelievingChain(relievingChain.getDocumentCount()))
                {
                    ttsbegin;

                    boolean isDocumentCfdPurchOrderRelievingCommitment = PSNPurchCommitmentCarryFwdPurchOrderDataMainFlight::instance().isEnabled() && this.isDocumentCfdPurchOrderRelievingCommitment(header);

                    if (isDocumentCfdPurchOrderRelievingCommitment)
                    {
                        purchOrderCommitmentYearOpenAcctDists = this.updateCfdPOWithCommitmentForBudgetUpdate(header.RecId);
                    }

                    relievingChain.processDocuments(budgetControlDataMaintenance.IsOverrunApproved);

                    if (isDocumentCfdPurchOrderRelievingCommitment)
                    {
                        this.reestablishPurchCommitmentReferencesOnPODists(purchOrderCommitmentYearOpenAcctDists);
                    }

                    ttscommit;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw Exception::Error;
                }
            }
            catch
            {
                relievingChain.updateStatusForError();
                throw;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCfdPOWithCommitmentForBudgetUpdate</Name>
				<Source><![CDATA[
    private PSNPurchCommitPurchOrderDataMainTmp updateCfdPOWithCommitmentForBudgetUpdate(SourceDocumentHeaderRecId _headerRecId)
    {
        PSNPurchCommitPurchOrderDataMainTmp purchOrderCommitmentYearOpenAcctDists = this.populatePurchOrderCommitmentYearOpenAcctDists(_headerRecId);
        this.dereferenceCommitmentDistsFromPODists(purchOrderCommitmentYearOpenAcctDists);

        return purchOrderCommitmentYearOpenAcctDists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dereferenceCommitmentDistsFromPODists</Name>
				<Source><![CDATA[
    private void dereferenceCommitmentDistsFromPODists(PSNPurchCommitPurchOrderDataMainTmp _purchOrderCommitmentYearOpenAcctDists)
    {
        ttsbegin;

        AccountingDistribution accountingDistributionPOOpening;

        while select forUpdate accountingDistributionPOOpening
            exists join _purchOrderCommitmentYearOpenAcctDists
                where _purchOrderCommitmentYearOpenAcctDists.PurchLineAccountingDist == accountingDistributionPOOpening.RecId
        {
            AccountingDistribution accountingDistributionPOClosing;
            AccountingEvent accountingEventPOClosing;

            select firstOnly RecId from accountingDistributionPOClosing
                order by accountingDistributionPOClosing.Number desc
                where accountingDistributionPOClosing.SourceDocumentLine == accountingDistributionPOOpening.SourceDocumentLine
                && accountingDistributionPOClosing.LedgerDimension == accountingDistributionPOOpening.LedgerDimension
                && accountingDistributionPOClosing.Number < accountingDistributionPOOpening.Number
            exists join accountingEventPOClosing
                where accountingEventPOClosing.RecId == accountingDistributionPOClosing.AccountingEvent
                && accountingEventPOClosing.Type == AccountingEventType::PeriodClose;

            accountingDistributionPOOpening.ReferenceRole = AccountingDistributionReferenceRole::Adjusting;
            accountingDistributionPOOpening.ReferenceDistribution = accountingDistributionPOClosing.RecId;
            accountingDistributionPOOpening.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reestablishPurchCommitmentReferencesOnPODists</Name>
				<Source><![CDATA[
    private void reestablishPurchCommitmentReferencesOnPODists(PSNPurchCommitPurchOrderDataMainTmp _purchOrderCommitmentYearOpenAcctDists)
    {
        AccountingDistribution accountingDistributionPOOpening;

        RecordInsertList budgetSourceTrackingRelievingInsertList = new RecordInsertList(tableNum(BudgetSourceTrackingRelievingDetail));

        while select SourceDocumentLine, AccountingDate, TransactionCurrencyAmount, LedgerDimension  from accountingDistributionPOOpening
            join PurchCommitmentLineAccountingDist from _purchOrderCommitmentYearOpenAcctDists
                where _purchOrderCommitmentYearOpenAcctDists.PurchLineAccountingDist == accountingDistributionPOOpening.RecId
        {
            BudgetSource budgetSourcePOOpening;
            BudgetSource budgetSourceCommitmentOpening;
            BudgetSourceTracking budgetSourceTrackingPOOpening;
            BudgetSourceTracking budgetSourceTrackingCommitmentOpening;
            BudgetSourceTrackingDetail budgetSourceTrackingDetailPOOpening;
            BudgetSourceTrackingDetail budgetSourceTrackingDetailCommitmentOpening;
            AccountingDistribution accountingDistributionCommitmentOpening;

            select firstOnly RecId from budgetSourcePOOpening
                order by budgetSourceTrackingCommitmentOpening.SequenceNum, budgetSourceTrackingPOOpening.SequenceNum
                where budgetSourcePOOpening.SourceDocumentLine == accountingDistributionPOOpening.SourceDocumentLine
            join RecId from budgetSourceTrackingPOOpening
                where budgetSourceTrackingPOOpening.BudgetSource == budgetSourcePOOpening.RecId
                && budgetSourceTrackingPOOpening.TrackingDate == accountingDistributionPOOpening.AccountingDate
            join RecId from accountingDistributionCommitmentOpening
                where accountingDistributionCommitmentOpening.RecId == _purchOrderCommitmentYearOpenAcctDists.PurchCommitmentLineAccountingDist
            join RecId from budgetSourceCommitmentOpening
                where budgetSourceCommitmentOpening.SourceDocumentLine == accountingDistributionCommitmentOpening.SourceDocumentLine
            join RecId from budgetSourceTrackingCommitmentOpening
                where budgetSourceTrackingCommitmentOpening.BudgetSource == budgetSourceCommitmentOpening.RecId
                && budgetSourceTrackingPOOpening.TrackingDate == accountingDistributionCommitmentOpening.AccountingDate
            join RecId from budgetSourceTrackingDetailCommitmentOpening
                where budgetSourceTrackingDetailCommitmentOpening.BudgetSourceTracking == budgetSourceTrackingCommitmentOpening.RecId
                && budgetSourceTrackingDetailCommitmentOpening.BudgetSourceLedgerDimension == accountingDistributionCommitmentOpening.LedgerDimension;

            if (budgetSourceTrackingDetailCommitmentOpening.RecId)
            {
                BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;
                budgetSourceTrackingRelievingDetail.AccountingCurrencyAmount = -1 * accountingDistributionPOOpening.TransactionCurrencyAmount;
                budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail = budgetSourceTrackingDetailCommitmentOpening.RecId;
                budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking = budgetSourceTrackingPOOpening.RecId;
                budgetSourceTrackingRelievingDetail.RelievingBudgetSourceLedgerDimension = accountingDistributionPOOpening.LedgerDimension;
                budgetSourceTrackingRelievingDetail.IsSummarized = NoYes::Yes;
                budgetSourceTrackingRelievingInsertList.add(budgetSourceTrackingRelievingDetail);
            }
        }

        ttsbegin;

        update_recordset accountingDistributionPOOpening
            setting ReferenceRole = AccountingDistributionReferenceRole::Matching,
            ReferenceDistribution = _purchOrderCommitmentYearOpenAcctDists.PurchCommitmentLineAccountingDist
            join PurchCommitmentLineAccountingDist from _purchOrderCommitmentYearOpenAcctDists
                where _purchOrderCommitmentYearOpenAcctDists.PurchLineAccountingDist == accountingDistributionPOOpening.RecId;
        
        budgetSourceTrackingRelievingInsertList.insertDatabase();

        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentCfdPurchOrderRelievingCommitment</Name>
				<Source><![CDATA[
    private boolean isDocumentCfdPurchOrderRelievingCommitment(SourceDocumentHeader _header)
    {
        boolean foundCommitmentOnPurchOrder = false;
        PurchTable purchTable;
        PurchLine purchLine;
        AccountingEvent accountingEventYearOpen;

        if (_header.SourceRelationType == tableNum(PurchTable))
        {
            AccountingDistribution accountingDistributionPO;

            select firstonly PurchCommitmentLine_PSN from purchLine
                where purchLine.PurchCommitmentLine_PSN != 0
                exists join accountingDistributionPO
                    where accountingDistributionPO.SourceDocumentLine == purchLine.SourceDocumentLine
                    && accountingDistributionPO.SourceDocumentHeader == _header.RecId
                exists join accountingEventYearOpen
                    where accountingEventYearOpen.RecId == accountingDistributionPO.AccountingEvent
                    && accountingEventYearOpen.Type == AccountingEventType::PeriodOpen;

            foundCommitmentOnPurchOrder = purchLine.PurchCommitmentLine_PSN != 0;
        }

        return foundCommitmentOnPurchOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePurchOrderCommitmentYearOpenAcctDists</Name>
				<Source><![CDATA[
    private PSNPurchCommitPurchOrderDataMainTmp populatePurchOrderCommitmentYearOpenAcctDists(SourceDocumentHeaderRecId _headerRecId)
    {
        AccountingDistribution accountingDistribution;
        AccountingDistribution accountingDistributionRelieved;
        SourceDocumentLine sourceDocumentLineCommitment;
        AccountingEvent accountingEventYearOpen;

        PSNPurchCommitPurchOrderDataMainTmp purchOrderCommitmentYearOpenAcctDists;

        insert_recordset purchOrderCommitmentYearOpenAcctDists(PurchLineAccountingDist, PurchCommitmentLineAccountingDist)
            select RecId, ReferenceDistribution from accountingDistribution
                where accountingDistribution.SourceDocumentHeader == _headerRecId
                && accountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching
            exists join accountingEventYearOpen
                where accountingEventYearOpen.RecId == accountingDistribution.AccountingEvent
                && accountingEventYearOpen.Type == AccountingEventType::PeriodOpen
            exists join accountingDistributionRelieved
                where accountingDistributionRelieved.RecId == accountingDistribution.ReferenceDistribution
            exists join sourceDocumentLineCommitment
                where sourceDocumentLineCommitment.SourceRelationType == tableNum(PurchCommitmentLine_PSN)
                && sourceDocumentLineCommitment.RecId == accountingDistributionRelieved.SourceDocumentLine;

        return purchOrderCommitmentYearOpenAcctDists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProcessStatus</Name>
				<Source><![CDATA[
    internal void setProcessStatus(
        RecId _budgetControlDataMaintenanceTrackingRecId,
        BudgetControlDataMaintenanceStatus _dataMaintenanceStatus)
    {
        // Override, but no-op since process status is set at the relieving chain level
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetCheckResult</Name>
				<Source><![CDATA[
    internal void setBudgetCheckResult(
        RecId _budgetControlDataMaintenanceTrackingRecId,
        BudgetCheckResult _budgetCheckResult)
    {
        // Override, but no-op since check result is set at the relieving chain level
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMissingBudgetSourceRecords</Name>
				<Source><![CDATA[
    private void deleteMissingBudgetSourceRecords(BudgetSourceTrackingStatus _budgetSourceTrackingStatus)
    {
        BudgetSource budgetSource;
        BudgetSourceTracking budgetSourceTracking;
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;

        ttsbegin;

        // Skip data methods and delete actions for all deletes
        budgetSourceTrackingRelievingDetail.skipDataMethods(true);
        budgetSourceTrackingRelievingDetail.skipDeleteActions(true);
        budgetSourceTrackingDetail.skipDataMethods(true);
        budgetSourceTrackingDetail.skipDeleteActions(true);
        budgetSourceTracking.skipDataMethods(true);
        budgetSourceTracking.skipDeleteActions(true);

        delete_from budgetSourceTrackingRelievingDetail
            exists join budgetSourceTrackingDetail
                where budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail == budgetSourceTrackingDetail.RecId
            exists join budgetSourceTracking
                where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking
            notexists join budgetSource
                where budgetSourceTracking.BudgetSource == BudgetSource.RecId;

        delete_from budgetSourceTrackingDetail
            exists join budgetSourceTracking
                where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking
            notexists join budgetSource
                where budgetSourceTracking.BudgetSource == BudgetSource.RecId;

        delete_from budgetSourceTracking
            notexists join budgetSource
                where budgetSourceTracking.BudgetSource == BudgetSource.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessDocuments</Name>
				<Source><![CDATA[
    public void postProcessDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        BudgetControlDataMaintenanceProvider::reprocessSummaryBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLogger</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void setLogger(BudgetControlInstrumentationLogger _logger)
    {
        this.logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogger</Name>
				<Source><![CDATA[
    private BudgetControlInstrumentationLogger getLogger()
    {
        if (!this.logger)
        {
            this.logger = BudgetControlInstrumentationLogger::createLogger(providerClassName);
        }

        return this.logger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>