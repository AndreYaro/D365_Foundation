<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxFiscalDocumentTotals_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for calculating the total amounts of the
/// tax fiscal document.
/// </summary>
class TaxFiscalDocumentTotals_BR extends TradeTotals
{
    TaxFiscalDocument_BR      taxFiscalDocument;
    TaxFiscalDocumentLine_BR  taxFiscalDocLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amount.
    /// </summary>
    public void calc()
    {
        TradeTotalsIQueryRun        lineQueryRun;
        TaxFiscalDocumentCalcTax_BR tradeCalcTax;
        UnitQty                     unitQty;
        AmountCur                   lineAmount;

        tradeCalcTax  = this.constructCalcTax();

        lineQueryRun = this.createLineQueryRun();

        totalAmount = 0;

        while (this.lineQueryRunNext(lineQueryRun))
        {
            orderLine = this.lineQueryRunGet(lineQueryRun);

            if (this.skipLine(orderLine))
                continue;

            recordSortedListLine.ins(orderLine);

            lineAmount = this.lineAmount(unitQty, tradeCalcTax.invoiceDate());
            totalAmount += lineAmount;
        }

        balance = totalAmount;

        taxTotal = tradeCalcTax.calcTax(this);
        this.tax(tradeCalcTax.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCalcTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>TaxFiscalDocumentCalcTax_BR</c>.
    /// </summary>
    /// <returns>
    /// A new instance of <c>TaxFiscalDocumentCalcTax_BR</c>.
    /// </returns>
    protected TradeCalcTax constructCalcTax()
    {
        return TaxFiscalDocumentCalcTax_BR::construct(taxFiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>TradeTotalsIQueryRun</c> for the lines query.
    /// </summary>
    /// <returns>
    /// A new <c>TradeTotalsIQueryRun</c> for the lines query.
    /// </returns>
    protected TradeTotalsIQueryRun createLineQueryRun()
    {
        return TradeTotalsQueryRun::newFromQueryRun(this.queryBuild());
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode currencyCode()
    {
        return taxFiscalDocument.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the exchange rate to be used for this document.
    /// </summary>
    /// <returns>
    /// The exchange rate to be used for this document.
    /// </returns>
    public ExchRate  exchRate()
    {
        return ExchangeRateHelper::exchRate(taxFiscalDocument.CurrencyCode, taxFiscalDocument.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the secondary exchange rate to be used for this document.
    /// </summary>
    /// <returns>
    /// The secondary exchange rate to be used for this document.
    /// </returns>
    public ExchrateSecondary  exchRateSecondary()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record sorted list with the document lines.
    /// </summary>
    protected void initRecordSortedListLine()
    {
        recordSortedListLine = new RecordSortedList(tablenum(TaxFiscalDocumentLine_BR));

        recordSortedListLine.sortOrder(fieldnum(TaxFiscalDocumentLine_BR, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemEndDisc</Name>
				<Source><![CDATA[
    protected boolean itemEndDisc()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item ID of the current line.
    /// </summary>
    /// <returns>
    /// The item ID of the current line.
    /// </returns>
    protected ItemId itemId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line amount of the current line.
    /// </summary>
    /// <param name="salesQty">
    /// Line quantity.
    /// </param>
    /// <param name="transDate">
    /// Transaction date.
    /// </param>
    /// <returns>
    /// The amount of the current line.
    /// </returns>
    protected LineAmount lineAmount(SalesQty salesQty, TransDate transDate)
    {
        return taxFiscalDocLine.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the discount amount of the current line.
    /// </summary>
    /// <param name="unitQty">
    /// Line quantity.
    /// </param>
    /// <param name="transDate">
    /// Transaction date.
    /// </param>
    /// <returns>
    /// The discount amount of the current line.
    /// </returns>
    /// <remarks>
    /// It's always zero for tax fiscal document.
    /// </remarks>

    protected DiscAmount lineDiscAmount(UnitQty unitQty, TransDate transDate)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunGet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a line from a given <c>TradeTotalsIQueryRun</c> implementation.
    /// </summary>
    /// <param name="_lineQueryRun">
    /// <c>TradeTotalsIQueryRun</c> to retrieve the line form.
    /// </param>
    /// <returns>
    /// Tax fiscal document line.
    /// </returns>
    protected Common lineQueryRunGet(TradeTotalsIQueryRun _lineQueryRun)
    {
        TradeTotalsQueryRun lineQueryRun = _lineQueryRun as TradeTotalsQueryRun;
        taxFiscalDocLine = lineQueryRun.parmQueryRun().get(tableNum(TaxFiscalDocumentLine_BR));
        return taxFiscalDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves to the next tax fiscal document line in a <c>TradeTotalsIQueryRun</c> implementation.
    /// </summary>
    /// <param name="_lineQueryRun">
    /// <c>TradeTotalsIQueryRun</c> implementation to move to the next line.
    /// </param>
    /// <returns>
    /// true if next line exists; false otherwise.
    /// </returns>
    protected boolean lineQueryRunNext(TradeTotalsIQueryRun _lineQueryRun)
    {
        TradeTotalsQueryRun lineQueryRun = _lineQueryRun as TradeTotalsQueryRun;
        return lineQueryRun.parmQueryRun().next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance from a given tax fiscal document.
    /// </summary>
    /// <param name="_orderTable">
    /// Tax fiscal document to create the object from.
    /// </param>
    void new(Common _orderTable)
    {
        taxFiscalDocument = _orderTable;
        super(taxFiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine_orderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the header of the current line.
    /// </summary>
    /// <returns>
    /// The header of the current line.
    /// </returns>
    protected Common orderLine_orderTable()
    {
        return taxfiscalDocLine.TaxFiscalDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory quantity of the current line.
    /// </summary>
    /// <returns>
    /// The inventory quantity of the current line.
    /// </returns>
    /// <remarks>
    /// Always zero for tax fiscal document.
    /// </remarks>
    protected InventQty qtyInvent()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the unity quantity of the current line.
    /// </summary>
    /// <returns>
    /// The unity quantity of the current line.
    /// </returns>
    /// <remarks>
    /// Always zero for tax fiscal document.
    /// </remarks>
    protected UnitQty qtyUnit()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>QueryRun</c> to traverse the lines of the tax fiscal document.
    /// </summary>
    /// <returns>
    /// A <c>QueryRun</c> to traverse the lines of the tax fiscal document.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    QueryRun  queryBuild()
    {
        Query query = SysQuery::queryFromTableRelation(taxFiscalDocument, tablenum(TaxFiscalDocumentLine_BR), false);

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundedOffTotalAmount</Name>
				<Source><![CDATA[
    protected AmountCur roundedOffTotalAmount(AmountCur _totalAmount)
    {
        return _totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether triangulation applies to this document.
    /// </summary>
    /// <returns>
    /// true if triangulation applies; false otherwise.
    /// </returns>
    /// <remarks>
    /// Always false for tax fiscal document.
    /// </remarks>

    public EUROTriangulation  triangulation()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new object of a given tax fiscal document.
    /// </summary>
    /// <param name="_orderTable">
    /// <c>TaxFiscalDocument_BR</c> to build the instance from.
    /// </param>
    /// <returns>
    /// New <c>TaxFiscalDocumentTotals_BR</c> for the given tax fiscal document.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static TaxFiscalDocumentTotals_BR construct(TaxFiscalDocument_BR _orderTable)
    {
        return new TaxFiscalDocumentTotals_BR(_orderTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the order line should be skipped during totals calculation.
    /// </summary>
    /// <param name="_orderLine">
    /// Order line record.
    /// </param>
    /// <returns>
    /// True if the order line should be skipped; otherwise, false.
    /// </returns>
    protected boolean skipLine(Common _orderLine)
    {
        boolean ret;

        if (taxFiscalDocument.TaxFiscalDocumentType == TaxFiscalDocumentType_BR::ICMSTaxTransfer)
        {
            LogisticsPostalAddress establishmentPostalAddress = FiscalEstablishment_BR::findById(taxFiscalDocument.FiscalEstablishmentId).postalAddress();
            ret = FBParametersPerState_BR::find(establishmentPostalAddress).EnableDocumentAdjustment;
        }
        else
        {
            ret = super(_orderLine);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>