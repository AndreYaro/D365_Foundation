<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransProdInvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransProdInvent extends ProjTransItem
{
    ProdTableProj       prodTableProj;
    ProdTable           prodTable;
    InventTransId       inventTransId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return prodTable.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction can be invoiced.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that determines whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, the funding type is validated and
    /// the <c>ProjTrans.canTransStatusBeInvoiced</c> method is called to determine whether the transaction
    /// can be invoiced based on its status.
    /// </remarks>
    public boolean canBeInvoiced(boolean _chargeable = false)
    {
        boolean ret = true;

        if (!ProjLineProperty::find(this.linePropertyId()).ToBeInvoiced)
        {
            ret = false;
        }

        if (ret)
        {
            ret = ProjInvoiceTable::isBillingRuleInvoiceable(this.projId(), this.categoryId(), this.psaContractLineNum(), this.transType());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        return prodTableProj.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the sales amounts that are reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the sales amounts that are reported by the transaction.
    /// </returns>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return prodTableProj.ProjSalesCurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return prodTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory dimension for this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the inventory dimension for this transaction.
    /// </returns>
    public InventDimId inventDimId()
    {
        return prodTable.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceable</Name>
				<Source><![CDATA[
    public boolean invoiceable()
    {
        return ProjLineProperty::find(this.linePropertyId()).ToBeInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory item that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the inventory item that is associated with this transaction.
    /// </returns>
    public ItemId itemId()
    {
        return prodTable.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction origin for this transaction.
    /// </summary>
    /// <returns>
    /// The <c>ProjOrigin::ProductionFinished</c> enumeration value.
    /// </returns>
    public ProjTransactionOrigin itemType()
    {
        return ProjOrigin::ProductionFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether sales have been posted to the general ledger.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public NoYes ledgerSalesPosted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerStatusCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger status for this transaction.
    /// </summary>
    /// <returns>
    /// A <c>ProjLedgerStatus::None</c> enumeration value.
    /// </returns>
    public ProjLedgerStatus ledgerStatusCost()
    {
        return ProjLedgerStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return prodTableProj.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProdTableProj _prodTableProj)
    {
        prodTableProj    = _prodTableProj;
        prodTable        = ProdTable::find(_prodTableProj.ProdId);

        super(_prodTableProj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    public InventTransId parmInventTransId(InventTransId _inventTransId = inventTransId)
    {
        inventTransId = _inventTransId;

        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    public ProjId projId()
    {
        return prodTable.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    public Qty qty()
    {
        InventQty   qty;

        switch (prodTableProj.Type)
        {
            case ProjItemTypeProdTable::ErrorQuantity:
                qty = prodTable.qtyError();
                break;
            case ProjItemTypeProdTable::Overdelivery:
                qty = prodTable.overDelivery();
                break;
            case ProjItemTypeProdTable::Underconsumed:
                qty = prodTableProj.Qty;
                break;
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    public RecId recId()
    {
        return prodTableProj.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    public SalesPrice salesPrice()
    {
        return prodTableProj.ProjSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales unit for this transaction.
    /// </summary>
    /// <returns>
    /// The sales unit for this transaction.
    /// </returns>
    public UnitOfMeasureSymbol salesUnit()
    {
        return prodTableProj.ProjSalesUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProdTableProj));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    public TaxGroup taxGroup()
    {
        return prodTable.ProjTaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public  Amount transCost()
    {
        InventTransOriginId inventTransOriginId = InventTransOrigin::findByInventTransId(this.parmInventTransId() ? this.parmInventTransId() : prodTable.InventTransId).RecId;

        return -InventTransPackingSlip::projCostAmount(inventTransOriginId, this.parmProjAdjustRefId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public TransDate transDate()
    {
        return prodTableProj.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        return PriceDisc::price2Amount(this.salesPrice(),
                                       InventTable::find(this.itemId()).salesPriceUnit(),
                                       0,
                                       this.qty(), // Deliver now
                                       0,
                                       0,
                                       0,
                                       this.currencyIdSales(),
                                       0,
                                       false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the voucher number that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The voucher number that is associated with this transaction.
    /// </returns>
    public Voucher voucherInvoice()
    {
        Voucher ret;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>