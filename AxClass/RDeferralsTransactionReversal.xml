<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsTransactionReversal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rDeferralsTransactionReversal extends RunBase
{
    TransDate           reversalDate;
    NoYes               reverseForAllModels;
    DialogField         dialogReversalDate;
    DialogField         dialogReverseForAll;

    RDeferralsTrans     deferralsTransSource, deferralsTrans;
    RDeferralsTable     deferralsTable;
    RDeferralsBook      deferralsBook;

    LedgerVoucher       ledgerVoucher;
    LedgerVoucherObject ledgerVoucherObject;

    TransLinkReversal_RU transLinkReversal;

    protected const Version CurrentVersion =2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowReversAllModel</Name>
				<Source><![CDATA[
    protected boolean allowReversAllModel()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean ret = true;

        ret = ret && this.checkLastOperationDate();
        ret = ret && this.checkBalance();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBalance</Name>
				<Source><![CDATA[
    protected boolean checkBalance()
    {
        RDeferralsSumCalc_Trans deferralsSumCalc;

        deferralsSumCalc = RDeferralsSumCalc_Trans::newDeferralsPeriod(deferralsTrans.DeferralsId,
                                                                       deferralsTrans.DeferralsBookId,
                                                                       reversalDate);

        if ((deferralsSumCalc.netBookValue() - deferralsTrans.Amount) < 0 )
        {
            return checkFailed(strFmt("@GLS115956", deferralsTrans.DeferralsId, deferralsTrans.DeferralsBookId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLastOperationDate</Name>
				<Source><![CDATA[
    protected boolean checkLastOperationDate()
    {
        if (RDeferralsTrans::transLastDate(deferralsTrans.DeferralsId, deferralsTrans.DeferralsBookId, false) > deferralsTrans.TransDate)
            return checkFailed("@GLS115957");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the AOT.
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@SYS78541");
        dialogReversalDate  = dialog.addFieldValue(extendedTypeStr(TransDate), reversalDate, "@GLS116514");

        if (this.allowReversAllModel())
        {
            dialogReverseForAll = dialog.addFieldValue(extendedTypeStr(NoYesId), NoYes::Yes, "@GLS116995", "@GLS116996");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        reversalDate        = dialogReversalDate.value();
        this.initTransLinkReversal();

        if (dialogReverseForAll)
        {
            reverseForAllModels = dialogReverseForAll.value();
        }
        else
            reverseForAllModels = NoYes::No;

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    protected LedgerVoucher initLedgerVoucher()
    {
        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                     SysModule::Ledger,
                                                     '');
        ledgerVoucher.parmReversal(true);
        ledgerVoucher.lastTransDate(transLinkReversal.getAccountingDate());
        ledgerVoucherObject = LedgerVoucherObject::newVoucher(deferralsTrans.Voucher, transLinkReversal.getAccountingDate());
        ledgerVoucherObject.parmVoucherCheck(false);
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(RDeferralsTrans _deferralsTrans)
    {
        deferralsTransSource = _deferralsTrans;
        deferralsTable       = RDeferralsTable::find(_deferralsTrans.DeferralsId);
        reversalDate         = _deferralsTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostLedger</Name>
				<Source><![CDATA[
    protected boolean isPostLedger()
    {
        boolean ret = true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, reversalDate, reverseForAllModels, deferralsTransSource];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversalDate</Name>
				<Source><![CDATA[
    public TransDate parmReversalDate(TransDate _reversalDate = reversalDate)
    {
        reversalDate = _reversalDate;
        return reversalDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseAllModels</Name>
				<Source><![CDATA[
    public NoYes parmReverseAllModels(NoYes _reverseForAllModels = reverseForAllModels)
    {
        reverseForAllModels = _reverseForAllModels;
        return reverseForAllModels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversalProcess</Name>
				<Source><![CDATA[
    protected void reversalProcess()
    {
        if (! this.check())
            throw error("@SYS25608");

        this.initLedgerVoucher();
        this.reverseLedgerVoucher();
        this.reverseDeferralsTrans();
        this.updateStatus();
        if (this.isPostLedger())
        {
            transLinkReversal.createSourceLedgerTransLink();
            ledgerVoucher.end();
            transLinkReversal.createStornoLedgerTransLink();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseDeferralsTrans</Name>
				<Source><![CDATA[
    protected void reverseDeferralsTrans()
    {
        RDeferralsTrans stornoTrans;

        stornoTrans.data(deferralsTrans);
        stornoTrans.TransDate            = reversalDate;
        stornoTrans.Amount               = -deferralsTrans.Amount;
        stornoTrans.Txt                  = "@GLS105217" + "@SYS35675" + deferralsTrans.Txt;
        stornoTrans.StornoRecId          = deferralsTrans.RecId;
        stornoTrans.DeferralsBookId      = deferralsBook.DeferralsBookId;
        stornoTrans.insert();
        deferralsTrans.StornoRecId       = stornoTrans.RecId;
        deferralsTrans.doUpdate();

        transLinkReversal.createTransLink(stornoTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseLedgerVoucher</Name>
				<Source><![CDATA[
    protected void reverseLedgerVoucher()
    {
        if (this.isPostLedger())
        {
            LedgerUtils_RU::createLedgerTransStorno_RU(ledgerVoucherObject, deferralsTrans.getAccountingDate(), deferralsTrans.Voucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        const int RetryNum = 5;

        try
        {
            ttsbegin;

            this.initTransLinkReversal();

            deferralsTrans = RDeferralsTrans::find(deferralsTransSource.RecId, true);
            deferralsBook  = RDeferralsBook::find(deferralsTrans.DeferralsId, deferralsTrans.DeferralsBookId, true);
            this.reversalProcess();

            if (this.parmReverseAllModels())
            {
                while select forupdate deferralsBook
                    where deferralsBook.DeferralsId       == deferralsTransSource.DeferralsId &&
                          deferralsBook.DeferralsBookId   != deferralsTransSource.DeferralsBookId
                join forupdate deferralsTrans
                    where deferralsTrans.DeferralsId      == deferralsBook.DeferralsId      &&
                          deferralsTrans.DeferralsBookId  == deferralsBook.DeferralsBookId  &&
                          deferralsTrans.TransDate        == deferralsTransSource.TransDate &&
                          deferralsTrans.TransType        == deferralsTransSource.TransType &&
                          ! deferralsTrans.StornoRecId
                {
                    this.initTransLinkReversal(deferralsTrans);
                    this.reversalProcess();
                }
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case CurrentVersion:
                [version, reversalDate, reverseForAllModels, deferralsTransSource] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    protected void updateStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (dialogReversalDate.value() < deferralsTransSource.TransDate)
            return checkFailed("@GLS115958");

        if (!transLinkReversal.validate())
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowReversTransType</Name>
				<Source><![CDATA[
    public static boolean allowReversTransType(RDeferralsTransType _transType)
    {
        if (_transType == RDeferralsTransType::Receipt)
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RDeferralsTransactionReversal construct(RDeferralsTrans _deferralsTrans)
    {
        RDeferralsTransactionReversal transactionReversal;

        switch (_deferralsTrans.TransType)
        {
            case RDeferralsTransType::Receipt:
                transactionReversal = new RDeferralsTransactionReversal_Receipt();
                break;

            default:
                transactionReversal = new RDeferralsTransactionReversal();
        }

        transactionReversal.getLast();
        transactionReversal.initValue(_deferralsTrans);

        return transactionReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RDeferralsTrans               rDeferralsTrans      = _args.record();
        RDeferralsTransactionReversal transactionReversal  = RDeferralsTransactionReversal::construct(rDeferralsTrans);

        transactionReversal.saveLast();

        if (transactionReversal.prompt())
        {
            transactionReversal.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransLinkReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes instance of the <c>TransLinkReversal_RU</c> class.
    /// </summary>
    /// <param name="_rDeferralsTrans">
    /// The <c>RDeferralsTrans</c> table record; optional.
    /// </param>
    protected void initTransLinkReversal(RDeferralsTrans _rDeferralsTrans = deferralsTransSource)
    {
        if (!transLinkReversal || transLinkReversal.parmSourceTrans() != _rDeferralsTrans)
        {
            transLinkReversal = TransLinkReversal_RU::construct(_rDeferralsTrans);
            transLinkReversal.setReversalDates(reversalDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>