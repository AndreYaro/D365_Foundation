<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDisposalDocumentControllerPL</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AssetDisposalDocumentControllerPL</c> class is the controller class for the <c>AssetDisposalDocumentPL</c> report.
/// </summary>
public class AssetDisposalDocumentControllerPL extends SrsReportRunController implements BatchRetryable
{
    private const str FeatureReference = 'PL-00040';

    AssetTrans disposalAssetTrans;

    #define.DocumentNumberParameter('DocumentNumber')
    #define.DocumentDateParameter('DocumentDate')
    #define.CompanyAddressParameter('CompanyAddress')
    #define.CompanyPhoneParameter('CompanyPhone')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUIBuilderForDataContractInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the UI builder instance to be used with the data contract.
    /// </summary>
    /// <param name="_contractInfo">
    ///     A <c>SysOperationDataContractInfo</c> instance.
    /// </param>
    /// <returns>
    ///     A <c>SysOperationUIBuilder</c> instance.
    /// </returns>
    /// <remarks>
    ///     Since the <c>AssetDisposalDocumentPL</c> report is not an RDP based report, this method
    ///     is overridden to allow hooking up the custom UI builder class with the report.
    /// </remarks>
    protected SysOperationUIBuilder getUIBuilderForDataContractInfo(SysOperationDataContractInfo _contractInfo)
    {
        SysOperationUIBuilder ret;

        if (_contractInfo is SrsReportRdlDataContractInfo)
        {
            ret = new AssetDisposalDocumentUIBuilderPL(dialog, this, _contractInfo.key());
        }
        else
        {
            ret = super(_contractInfo);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Modifies the contract before the dialog is shown to the user.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///     No <c>AssetTrans</c> record passed as an argument.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     Invalid asset ID in <c>AssetTrans</c> record.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     No <c>AssetBook</c> record found.
    /// </exception>
    protected void prePromptModifyContract()
    {
        AssetTrans                parmAssetTrans;
        AssetBook                 assetBook;
        CompanyInfo               companyInfo;
        Query                     query;
        QueryBuildDataSource      assetTransDataSource;
        QueryBuildDataSource      assetBookDataSource;
        SrsReportRdlDataContract  contract;
        DocumentDate              documentDate;
        DocumentNum               documentNumber;

        if (!this.parmArgs())
        {
            throw error(strFmt("@SYS19324", this.parmArgs().menuItemName()));
        }

        parmAssetTrans = this.parmArgs().record() as AssetTrans;
        if (parmAssetTrans)
        {
            if (!AssetTable::exist(parmAssetTrans.AssetId))
            {
                throw error(strfmt("@SYS19324", this.parmArgs().menuItemName()));
            }

            assetBook = AssetBook::find(parmAssetTrans.AssetId, parmAssetTrans.BookId);
            if (!assetBook)
            {
                throw error(strfmt("@SYS19324", this.parmArgs().menuItemName()));
            }

            query                = this.getFirstQuery();
            assetTransDataSource = query.dataSourceTable(tableNum(AssetTrans));
            assetBookDataSource  = query.dataSourceTable(tableNum(AssetBook));

            assetTransDataSource.clearRanges();
            assetBookDataSource.clearRanges();

            findOrCreateRange_W(assetTransDataSource, fieldnum(AssetTrans, TransType),
                queryValue(AssetTransType::DisposalSale) + ',' + queryValue(AssetTransType::DisposalScrap));
            findOrCreateRange_W(assetTransDataSource, fieldNum(AssetTrans, BookId), queryValue(assetBook.BookId));

            findOrCreateRange_W(assetBookDataSource, fieldNum(AssetBook, BookId), queryValue(assetBook.BookId));
            findOrCreateRange_W(assetBookDataSource, fieldNum(AssetBook, AssetId), queryValue(assetBook.AssetId));

            // In addition to Disposal-Sale and Disposal-Scrap, the report can be invoked for a Profit-Loss transaction type as well
            // so find the Disposal transaction in case it has been invoked for Profit-Loss since the report should display only
            // Disposal transactions
            select firstOnly disposalAssetTrans
                where disposalAssetTrans.AssetId == assetBook.AssetId
                &&  disposalAssetTrans.BookId == assetBook.BookId
                && (disposalAssetTrans.TransType == AssetTransType::DisposalSale
                    || disposalAssetTrans.TransType == AssetTransType::DisposalScrap);

            contract       = this.parmReportContract().parmRdlContract() as SrsReportRdlDataContract;
            documentDate   = disposalAssetTrans.DocumentDate_W ? disposalAssetTrans.DocumentDate_W : disposalAssetTrans.TransDate;
            documentNumber = disposalAssetTrans.DocumentNum_W ? disposalAssetTrans.DocumentNum_W : disposalAssetTrans.Voucher;

            // Visible parameters
            contract.setValue(#DocumentNumberParameter, documentNumber);
            contract.setValue(#DocumentDateParameter, DateTimeUtil::newDateTime(documentDate, 0));

            //Hidden parameters used for displaying one time values in the report header
            companyInfo = CompanyInfo::find();
            contract.setValue(#CompanyAddressParameter, companyInfo.postalAddress().Address);
            contract.setValue(#CompanyPhoneParameter, companyInfo.phone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        SrsReportRdlDataContract contract;

        super();

        if (disposalAssetTrans.RecId)
        {
            contract = this.parmReportContract().parmRdlContract() as SrsReportRdlDataContract;
            disposalAssetTrans.updateDocument_W(contract.getValue(#DocumentNumberParameter), contract.getValue(#DocumentDateParameter));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    public boolean showQuerySelectButton(str parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues(str parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        AssetDisposalDocumentControllerPL::newForArgs(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Instantiates the <c>AssetDisposalDocumentControllerPL</c> class and initializes it.
    /// </summary>
    /// <param name="_args">
    ///     An <c>Args</c> object containing values used to initialize the <c>AssetDisposalDocumentControllerPL</c> object.
    /// </param>
    /// <returns>
    ///     An <c>AssetDisposalDocumentControllerPL</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AssetDisposalDocumentControllerPL newForArgs(Args _args)
    {
        AssetDisposalDocumentControllerPL controller = new AssetDisposalDocumentControllerPL();
        controller.parmReportName(ssrsReportStr(AssetDisposalDocumentPL, Report));
        controller.parmArgs(_args);
        return controller;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>