<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepCalculation_Accelerated_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is used to do depreciation calculation for a specified Japan depreciation method: Old Straight Line.
/// </summary>
class AssetDepCalculation_Accelerated_JP extends AssetDepCalculation_JP
{
    real                                acceleratedDepRate;
    AssetDocumentAcceleratedDepTable_JP accDepDocTable;
    Map                                 ordinaryDepTransCalculationResult;  //Cache for ordinary depreciation trans
    AssetDepTableMethodInterface_JP     assetTableMethodOrdinary;
    AssetAmount                         ordinaryTransTotalAmount;
    AssetDepBookMap_JP                  assetDepBookMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(AssetDepCalculationArgs_JP _calcArgs)
    {
        #ISOCountryRegionCodes
        super(_calcArgs);
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00024] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllowableLimitFinalDepForPeriod</Name>
				<Source><![CDATA[
    protected AssetAmount calcAllowableLimitFinalDepForPeriod()
    {
        AssetAmount         ret;
        AssetAmount         depAmount;
        AssetAmount         allowableLimitForAccumulatedDep = this.calcAllowableLimitForAccumulatedDep();
        AssetAmount         beginningBalanceOfCurPeriod     = this.getBeginningBalanceOfAccumulatedDep(calcArgs.parmPeriodstart());
        Map                 beginningBalanceForOrdinary;
        AssetAmount         ordinaryBalanceAtPeriodEnd;
        AssetAmount         ordinaryBalanceOfPeriodStart;

        if (FeatureStateProvider::isFeatureEnabled(AssetDepCalculation_AcceleratedFeature_JP::instance()))
        {
            ret = this.calcOrdinaryDepreciationAmount(calcArgs.parmPeriodStart(), calcArgs.parmPeriodEnd(), true);
        }
        else
        {
            depAmount = this.calcOrdinaryDepreciationAmount(calcArgs.parmPeriodStart(), calcArgs.parmPeriodEnd());
            ret         = depAmount * this.calcCurYearDepRate();
        }
        
        if (ret > 0 && ret + beginningBalanceOfCurPeriod >= allowableLimitForAccumulatedDep)
        {
            ret = allowableLimitForAccumulatedDep - beginningBalanceOfCurPeriod;

             // All allowable limited is going to be depreciated, then the depreciation is going to be done.
            calcArgs.parmIsDepreciationDone(true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllowableLimitSumOfDepToPeriod</Name>
				<Source><![CDATA[
    protected AssetAmount calcAllowableLimitSumOfDepToPeriod(int _indexOfPeriod)
    {
        AssetAmount         ret;
        AssetAmount         depreciableAmountInCurYear;
        AssetAmount         commonDepreciation;

        Map                                 beginningBalanceForOrdinary;
        AssetTransDate                      firstDayOfCurrentYear;

        firstDayOfCurrentYear = this.calcDepStartDateInCurYear();

        if (FeatureStateProvider::isFeatureEnabled(AssetDepCalculation_AcceleratedFeature_JP::instance()))
        {
            depreciableAmountInCurYear = this.calcOrdinaryDepreciationAmount(firstDayOfCurrentYear, calcArgs.parmPeriodEnd(), true);
        }
        else
        {
            commonDepreciation = this.calcOrdinaryDepreciationAmount(firstDayOfCurrentYear, calcArgs.parmPeriodEnd());
            depreciableAmountInCurYear = commonDepreciation * this.calcCurYearDepRate();
        }

        ret = depreciableAmountInCurYear;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBeginningBalanceOfAccumulatedDep</Name>
				<Source><![CDATA[
    protected AssetAmount calcBeginningBalanceOfAccumulatedDep(AssetTransDate _date)
    {
        AssetAmount         ret;

        if (calcArgs.getAssetDocumentType() == AssetDocumentType_JP::AssetAcceleratedDepreciation)
        {
            ret = AssetDepTransMap_JP::calcAccumulatedAcceleratedDepAmountMst(
                assetDepBookMap,
                dateNull(),
                _date);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCurYearDepRateAsFraction</Name>
				<Source><![CDATA[
    protected container calcCurYearDepRateAsFraction()
    {
        return [acceleratedDepRate, 1];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDepStartDateInCurYear</Name>
				<Source><![CDATA[
    public AssetTransDate calcDepStartDateInCurYear()
    {
        AssetTransDate                      ret;

        ret = super();

        if (accDepDocTable.ValidFrom > ret)
        {
            ret = max(ret, calcArgs.parmAssetTableInterval().startOfPeriod(accDepDocTable.ValidFrom));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOrdinaryDepreciationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate ordinary depreciation
    /// </summary>
    /// <param name="_fromDate">
    /// From date
    /// </param>
    /// <param name="_toDate">
    /// To date
    /// </param>
    /// <param name="_includeCurYearDepRate">
    /// Include current year depreciation rate.
    /// </param>
    private AssetAmount calcOrdinaryDepreciationAmount(AssetTransDate _fromDate, AssetTransDate _toDate, boolean _includeCurYearDepRate = false)
    {
        Map                             beginningBalanceForOrdinary;
        AssetAmount                     ordinaryBalanceAtPeriodEnd;
        AssetAmount                     ordinaryBalanceAtPeriodStart;
        AssetDepLimitCalculator_JP      assetDepLimitCalculator;
        MapEnumerator                   mapEnumerator;
        TransDate                       currentDate;

        if (calcArgs.parmIsForPreTaxDeduction())
        {
            // For pre-tax deduction feature, the limit of additional should based on the limit of oridinary depreciation and accelerated depreciation,
            // but not based on the actual posted oridinary depreciation or posted accelerated depreciation.
            Debug::assert(assetDepBookMap.TableId == tableNum(AssetBook));

            assetDepLimitCalculator = AssetDepLimitCalculator_JP::construct(
                assetDepBookMap,
                AssetDepLimitType_JP::OrdinaryDepreciation,
                _fromDate,
                calcArgs.parmAllowableLimitCacheOwner_JP());
            assetDepLimitCalculator.parmAssetTableInterval(calcArgs.parmAssetTableInterval());
            assetDepLimitCalculator.init();

            ordinaryBalanceAtPeriodEnd = assetDepLimitCalculator.calcLimitForDateRange(_fromDate, _toDate);
        }
        else if (assetTableMethodOrdinary)
        {
            while (assetTableMethodOrdinary.parmPeriodEnd_JP() <= _toDate && assetTableMethodOrdinary.next())
            {
                assetTableMethodOrdinary.calc();
            }
            beginningBalanceForOrdinary = assetTableMethodOrdinary.getBeginBalanceCalculationResult();

            if (beginningBalanceForOrdinary.exists(_toDate + 1))
            {
                ordinaryBalanceAtPeriodEnd = beginningBalanceForOrdinary.lookup(_toDate + 1);
            }
            else if (beginningBalanceForOrdinary.exists(_fromDate))
            {
                mapEnumerator = beginningBalanceForOrdinary.getEnumerator();
                while (mapEnumerator.moveNext())
                {
                    currentDate = mapEnumerator.currentKey();
                    if (currentDate < _fromDate)
                    {
                        continue;
                    }
                    else if (currentDate > _toDate + 1)
                    {
                        break;
                    }
                    else
                    {
                        ordinaryBalanceAtPeriodEnd = mapEnumerator.currentValue();
                    }
                }
            }
            else if (ordinaryDepTransCalculationResult.exists(_toDate + 1))
            {
                ordinaryBalanceAtPeriodEnd = ordinaryDepTransCalculationResult.lookup(_toDate + 1);
            }
            else
            {
                ordinaryBalanceAtPeriodEnd = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetDepBookMap, dateNull(), _toDate);
                ordinaryDepTransCalculationResult.insert(_toDate + 1, ordinaryBalanceAtPeriodEnd);
            }

            if (beginningBalanceForOrdinary.exists(_fromDate))
            {
                ordinaryBalanceAtPeriodStart = beginningBalanceForOrdinary.lookup(_fromDate);
            }
            else if (ordinaryDepTransCalculationResult.exists(_fromDate))
            {
                ordinaryBalanceAtPeriodStart = ordinaryDepTransCalculationResult.lookup(_fromDate);
            }
            else
            {
                ordinaryBalanceAtPeriodStart = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetDepBookMap, dateNull(), _fromDate - 1);
                ordinaryDepTransCalculationResult.insert(_fromDate, ordinaryBalanceAtPeriodStart);
            }
        }
        else
        {
            if (ordinaryDepTransCalculationResult.exists(_toDate + 1))
            {
                ordinaryBalanceAtPeriodEnd = ordinaryDepTransCalculationResult.lookup(_toDate + 1);
            }
            else
            {
                ordinaryBalanceAtPeriodEnd = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetDepBookMap, dateNull(), _toDate);
                ordinaryDepTransCalculationResult.insert(_toDate + 1, ordinaryBalanceAtPeriodEnd);
            }
            if (ordinaryDepTransCalculationResult.exists(_fromDate))
            {
                ordinaryBalanceAtPeriodStart = ordinaryDepTransCalculationResult.lookup(_fromDate);
            }
            else
            {
                ordinaryBalanceAtPeriodStart = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetDepBookMap, dateNull(), _fromDate - 1);
                ordinaryDepTransCalculationResult.insert(_fromDate, ordinaryBalanceAtPeriodStart);
            }
        }

        AssetAmount ordinaryBalanceForDateRange;
        if (FeatureStateProvider::isFeatureEnabled(AssetDepCalculation_AcceleratedFeature_JP::instance()))
        {
            AssetAmount ordinaryBalance = ordinaryBalanceAtPeriodEnd - ordinaryBalanceAtPeriodStart;
            if (_includeCurYearDepRate)
            {
                ordinaryBalanceForDateRange = this.adjustOrdinaryBalance(ordinaryBalance, _fromDate, _toDate) * this.calcCurYearDepRate();
            }
            else
            {
                ordinaryBalanceForDateRange = this.adjustOrdinaryBalance(ordinaryBalance, _fromDate, _toDate);
            }

            List acceleratedDocumentEntries = calcArgs.parmAssetAcceleratedDocumentEntries();
            if (acceleratedDocumentEntries.elements() > 1)
            {
                ListEnumerator le = acceleratedDocumentEntries.getEnumerator();
                while (le.moveNext())
                {
                    AssetAcceleratedDocumentEntry_JP documentEntry = le.current();
                    if (documentEntry.parmIsInitialized() == NoYes::No)
                    {
                        AssetAcceleratedDepreciation_JPContext context = AssetAcceleratedDepreciation_JPContext::current();
                        if (context)
                        {
                            context.fromDate = documentEntry.parmValidFrom();
                            context.toDate = documentEntry.parmValidTo();
                        }

                        calcArgs.parmAssetDocumentEntry(documentEntry.parmAssetDocumentEntry_JP());
                        this.initializeAssetDocumentEntry();

                        if (_includeCurYearDepRate)
                        {
                            ordinaryBalanceForDateRange += this.adjustOrdinaryBalance(ordinaryBalance, _fromDate, _toDate) * this.calcCurYearDepRate();
                        }
                        else
                        {
                            ordinaryBalanceForDateRange += this.adjustOrdinaryBalance(ordinaryBalance, _fromDate, _toDate);
                        }
                    }
                }
            }
        }
        else
        {
            // For yearly depreciation scenario. Accelerated depreciation could be applied for the pert of the period/year.
            // If accelerated depreciation from/to date is in the middle of the current period
            // ordinaryBalanceAtPeriodStart/ordinaryBalanceAtPeriodEnd balance should be adjusted
            // as a part of the depreciation amount for the entire year.
            // For example, if accelerated depreciation start date date is March 1.
            // ordinaryBalanceAtPeriodStart should be 3/12 of the entire year balance.
            // If accelerated depreciation end date date is March 1.
            // ordinaryBalanceAtPeriodEnd should be 3/12 of the entire year balance.
            if (AssetAcceleratedDepreciation_JPContext::getAssetAccrual() == AssetAccrual::Yearly)
            {
                if (AssetAcceleratedDepreciation_JPContext::getFromDate() > _fromDate
                && AssetAcceleratedDepreciation_JPContext::getFromDate() < _toDate)
                {
                    ordinaryBalanceAtPeriodStart = this.adjustOrdinaryBalanceAtPeriodStartForYearly(ordinaryBalanceAtPeriodEnd, _toDate);
                }
            
                if (AssetAcceleratedDepreciation_JPContext::getToDate() > _fromDate
                && AssetAcceleratedDepreciation_JPContext::getToDate() < _toDate)
                {
                    ordinaryBalanceAtPeriodEnd = this.adjustOrdinaryBalanceAtPeriodEndForYearly(ordinaryBalanceAtPeriodEnd, _toDate);
                }
            }

            ordinaryBalanceForDateRange = ordinaryBalanceAtPeriodEnd - ordinaryBalanceAtPeriodStart;
        }

        return ordinaryBalanceForDateRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOrdinaryBalance</Name>
				<Source><![CDATA[
    private AssetAmount adjustOrdinaryBalance(AssetAmount _ordinaryBalanceForDateRange, AssetTransDate _fromDate, AssetTransDate _toDate)
    {
        boolean wasAdjusted;
        AssetAmount result = _ordinaryBalanceForDateRange;

        if (AssetAcceleratedDepreciation_JPContext::getAssetAccrual() == AssetAccrual::Yearly)
        {
            int numberOfPeriodsTotal = calcArgs.parmAssetDepreciationYear() == AssetDepreciationYear::Calendar
                ? intvNo(_toDate, _fromDate, intvScale::YearMonth) + 1
                : LedgerFiscalCalendar::numberOfPeriodsBetweenDates(calcArgs.parmFiscalCalendarRecId(), _fromDate, _toDate);

            TransDate maxFromDate = _fromDate;
            if (AssetAcceleratedDepreciation_JPContext::getFromDate() >= _fromDate
                && AssetAcceleratedDepreciation_JPContext::getFromDate() <= _toDate)
            {
                maxFromDate = AssetAcceleratedDepreciation_JPContext::getFromDate();
            }

            TransDate minToDate = _toDate;
            if (AssetAcceleratedDepreciation_JPContext::getToDate() <= _toDate
                && AssetAcceleratedDepreciation_JPContext::getToDate() >= _fromDate)
            {
                minToDate = AssetAcceleratedDepreciation_JPContext::getToDate();
            }

            int numberOfPeriods = calcArgs.parmAssetDepreciationYear() == AssetDepreciationYear::Calendar
                ? intvNo(minToDate, maxFromDate, intvScale::YearMonth) + 1
                : LedgerFiscalCalendar::numberOfPeriodsBetweenDates(calcArgs.parmFiscalCalendarRecId(), maxFromDate, minToDate);

            if (numberOfPeriodsTotal != 0)
            {
                result = _ordinaryBalanceForDateRange / numberOfPeriodsTotal * numberOfPeriods;
            }

        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOrdinaryBalanceAtPeriodStartForYearly</Name>
				<Source><![CDATA[
    internal AssetAmount adjustOrdinaryBalanceAtPeriodStartForYearly(
        AssetAmount _ordinaryBalanceAtPeriodEnd,
        TransDate _toDate)
    {
        // intvNo() doesn't count a last month 
        // because calcArgs.parmStartToDepreciateDate() is a beginning of the month and _toDate is an end of the month.
        // So 1 month should be added.
        // LedgerFiscalCalendar::numberOfPeriodsBetweenDates() calculates last period correctly.
        int numberOfPeriodsTotal = calcArgs.parmAssetDepreciationYear() == AssetDepreciationYear::Calendar
            ? intvNo(_toDate, calcArgs.parmStartToDepreciateDate(), intvScale::YearMonth) + 1
            : LedgerFiscalCalendar::numberOfPeriodsBetweenDates(calcArgs.parmFiscalCalendarRecId(), calcArgs.parmStartToDepreciateDate(), _toDate);
        
        // LedgerFiscalCalendar::numberOfPeriodsBetweenDates() counts a last month incorrectly
        // because calcArgs.parmStartToDepreciateDate() is a beginning of the month 
        // and AssetAcceleratedDepreciation_JPContext::getFromDate() is a beginning of the month
        // System calculates one day as an entire period.
        // So 1 month should be substructed.
        // intvNo() calculates last period correctly.
        int numberOfPeriodsToStartAccelerated = calcArgs.parmAssetDepreciationYear() == AssetDepreciationYear::Calendar
            ? intvNo(AssetAcceleratedDepreciation_JPContext::getFromDate(), calcArgs.parmStartToDepreciateDate(), intvScale::YearMonth)
            : LedgerFiscalCalendar::numberOfPeriodsBetweenDates(calcArgs.parmFiscalCalendarRecId(), calcArgs.parmStartToDepreciateDate(), AssetAcceleratedDepreciation_JPContext::getFromDate()) - 1;

        return _ordinaryBalanceAtPeriodEnd / numberOfPeriodsTotal * numberOfPeriodsToStartAccelerated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOrdinaryBalanceAtPeriodEndForYearly</Name>
				<Source><![CDATA[
    internal AssetAmount adjustOrdinaryBalanceAtPeriodEndForYearly(
        AssetAmount _ordinaryBalanceAtPeriodEnd,
        TransDate _toDate)
    {
        int numberOfPeriodsTotal = calcArgs.parmAssetDepreciationYear() == AssetDepreciationYear::Calendar
            ? intvNo(_toDate, calcArgs.parmStartToDepreciateDate(), intvScale::YearMonth) + 1
            : LedgerFiscalCalendar::numberOfPeriodsBetweenDates(calcArgs.parmFiscalCalendarRecId(), calcArgs.parmStartToDepreciateDate(), _toDate);
        
        int numberOfPeriodsToEndAccelerated = calcArgs.parmAssetDepreciationYear() == AssetDepreciationYear::Calendar
            ? intvNo(AssetAcceleratedDepreciation_JPContext::getToDate(), calcArgs.parmStartToDepreciateDate(), intvScale::YearMonth) + 1
            : LedgerFiscalCalendar::numberOfPeriodsBetweenDates(calcArgs.parmFiscalCalendarRecId(), calcArgs.parmStartToDepreciateDate(), AssetAcceleratedDepreciation_JPContext::getToDate());

        return _ordinaryBalanceAtPeriodEnd / numberOfPeriodsTotal * numberOfPeriodsToEndAccelerated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDepreciationMethod</Name>
				<Source><![CDATA[
    public AssetDepreciationMethod getAssetDepreciationMethod()
    {
        return AssetDepreciationMethod::Accelerated_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtraDepreciationAmount</Name>
				<Source><![CDATA[
    protected AssetAmount getExtraDepreciationAmount()
    {
        AssetAmount         ret;
        Map                 beginningBalanceForOrdinary;
        AssetAmount         commonDepreciation;
        AssetAmount         commonDepreciationTransBalanceCurPeriod;
        AssetAmount         commonDepreciationProfileBalanceCurPeriod;
        AssetTransDate      firstDayOfCurrentYear;

        if (calcArgs.parmIsForPreTaxDeduction())
        {
            firstDayOfCurrentYear = calcArgs.parmAssetTableInterval().findFirstDayOfYear(calcArgs.parmPeriodStart());
            commonDepreciation = this.calcOrdinaryDepreciationAmount(firstDayOfCurrentYear, calcArgs.parmPeriodEnd());
            if (!ordinaryDepTransCalculationResult.exists(firstDayOfCurrentYear))
            {
                commonDepreciationTransBalanceCurPeriod = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetDepBookMap, dateNull(), firstDayOfCurrentYear);
                ordinaryDepTransCalculationResult.insert(firstDayOfCurrentYear, commonDepreciationTransBalanceCurPeriod);
            }
            commonDepreciation += ordinaryDepTransCalculationResult.lookup(firstDayOfCurrentYear);
        }
        else
        {
            if (ordinaryDepTransCalculationResult.exists(calcArgs.parmPeriodEnd() + 1))
            {
                commonDepreciationTransBalanceCurPeriod = ordinaryDepTransCalculationResult.lookup(calcArgs.parmPeriodEnd() + 1);
            }
            else
            {
                commonDepreciationTransBalanceCurPeriod = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetDepBookMap, dateNull(), calcArgs.parmPeriodEnd());
                ordinaryDepTransCalculationResult.insert(calcArgs.parmPeriodEnd() + 1, commonDepreciationTransBalanceCurPeriod);
            }

            commonDepreciationProfileBalanceCurPeriod = commonDepreciationTransBalanceCurPeriod;
            if (assetTableMethodOrdinary)
            {
                while (assetTableMethodOrdinary.parmPeriodEnd_JP() <= calcArgs.parmPeriodEnd() && assetTableMethodOrdinary.next())
                {
                    assetTableMethodOrdinary.calc();
                }
                beginningBalanceForOrdinary = assetTableMethodOrdinary.getBeginBalanceCalculationResult();
                if (beginningBalanceForOrdinary.exists(calcArgs.parmPeriodEnd() + 1))
                {
                    commonDepreciationProfileBalanceCurPeriod = beginningBalanceForOrdinary.lookup(calcArgs.parmPeriodEnd() + 1);
                }
            }

            commonDepreciation = commonDepreciationProfileBalanceCurPeriod - commonDepreciationTransBalanceCurPeriod + ordinaryTransTotalAmount;
        }

        ret = commonDepreciation
            + AssetDepTransMap_JP::calcAccumulatedExtraDepAmtMst(
                assetDepbookMap,
                dateNull(),
                dateMax(),
                0,
                true)
            + calcArgs.parmUnpostedAccumulatedSpecialDepAmount();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        assetDepBookMap = AssetDepBookMap_JP::findByAssetIdBookId(calcArgs.parmAssetId(), calcArgs.parmAssetBookId());
        ordinaryDepTransCalculationResult = new Map(Types::Date, Types::Real);
        ordinaryTransTotalAmount = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetDepBookMap, dateNull(), dateMax());

        // Accelerated depreciation and additional depreciation are based on ordinary depreciatio,
        // so they can not be set as depreciation method of ordinary depreciation profile
        Debug::assert(assetDepBookMap.depreciationProfile().Method != AssetDepreciationMethod::Accelerated_JP
            && assetDepBookMap.depreciationProfile().Method != AssetDepreciationMethod::AdditionalDepreciation_JP);

        if (!calcArgs.parmIsForPreTaxDeduction())
        {
            assetTableMethodOrdinary = AssetTableMethod::construct(assetDepBookMap, dateMax()) as AssetDepTableMethodInterface_JP;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunCalc</Name>
				<Source><![CDATA[
    public void preRunCalc()
    {
        super();

        this.initializeAssetDocumentEntry();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAssetDocumentEntry</Name>
				<Source><![CDATA[
    private void initializeAssetDocumentEntry()
    {
        AssetDocumentTable_JP assetDocumentTable;

        assetDocumentTable  = AssetDocumentTable_JP::find(calcArgs.parmAssetDocumentEntry().AssetDocumentTable_JP);
        accDepDocTable      = AssetDocumentAcceleratedDepTable_JP::findByAssetDocumentTable(assetDocumentTable.RecId);
        acceleratedDepRate  = AssetAcceleratedDepCalcManager_JP::acceleratedDepRate(accDepDocTable);
        if (accDepDocTable.RateThreshold > acceleratedDepRate)
        {
            acceleratedDepRate = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public AssetAmount calc()
    {
        AssetAmount ret;

        if (!accDepDocTable)
        {
            ret = 0;
        }
        else
        {
            if (assetTableMethodOrdinary)
            {
                assetTableMethodOrdinary.parmUnpostedExtraDepAmount(calcArgs.parmUnpostedAccumulatedExtraDepAmount());
                assetTableMethodOrdinary.parmAssetIdlePeriods(calcArgs.parmAssetIdlePeriods());
            }
            ret = super();

            if (ret < 0)
            {
                ret = 0;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>