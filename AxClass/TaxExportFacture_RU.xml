<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxExportFacture_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxExportFacture_RU extends Tax
{
    SalesExportFactureCalcTax_RU       factureCalcTax;
    //CustInvoiceJour         custInvoiceJour;
    //CustInvoiceTrans        custInvoiceTrans;
    FactureTrans_RU                     factureTrans;

    MarkupTrans             markupTrans;

    NoYes                   markupAdminister;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    TaxAmount calc()
    {
        TaxAmount       taxAmount;
        boolean         moreLines;
        AmountCur       baseAmount;
        Percent         cashDisc;

        boolean         amountsInclTaxExist;
        AmountCur       baseAmountOriginal;
        AmountCur       baseAmountInclTax;
        TaxAmountCur    sourceTaxAmount;
        Map             amountInclTax   = new Map(extendedTypeId2Type(extendedTypeNum(RecId)), Types::Real);
        Map             amountExclTax   = new Map(extendedTypeId2Type(extendedTypeNum(RecId)), Types::Real);
        RecId           adjustRecId[];
        TableId         adjustTableId[];
        AmountCur       pennyDiff[];
        Counter         counter;
        Counter         counterMax;
        TableId         custInvoiceLineTableId;
        TaxCalculationAdjustment taxCalculationAdjustment;

        if (!headingRecId)
        {
            return 0;
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return 0;
        }

        factureCalcTax.initCursor();
        moreLines = true;

        while (moreLines)
        {
            factureTrans = factureCalcTax.nextLine();

            if (factureTrans)
            {
                taxDate = factureCalcTax.parmTaxCalculationDate();
                this.setExchRates(factureCalcTax.currencyCode(),
                                  factureCalcTax.exchRate(),
                                  factureCalcTax.exchRateSecondary(),
                                  Currency::noYes2UnknownNoYes(factureCalcTax.triangulation()),
                                  taxDate);
                taxModuleType = factureCalcTax.transModuleType();

                baseAmount          = -factureCalcTax.transAmount();
                baseAmountInclTax   = -factureCalcTax.transAmountInclTax();
                baseAmount          = CurrencyExchangeHelper::amount(baseAmount, this.currencyCode());
                baseAmountInclTax   = CurrencyExchangeHelper::amount(baseAmountInclTax, this.currencyCode());
                baseAmountOriginal  = baseAmount;

                if (baseAmountInclTax != baseAmountOriginal)
                {
                    amountInclTax.insert(factureTrans.RecId, baseAmountInclTax);
                    amountExclTax.insert(factureTrans.RecId, baseAmountOriginal);
                    amountsInclTaxExist = true;
                }

                this.insertLineInInternal(baseAmount,
                                          factureCalcTax.transQty() * -1,
                                          factureCalcTax.transUnitId(),
                                          factureTrans.ItemId,
                                          factureTrans.Price,
                                          0,
                                          this.getOperationLedgerDimension(0),
                                          this.operationPosting());

                if (taxCalculateLine)
                {
                    taxAmount = this.calcTax();

                    this.saveInProcessTransaction();
                    sourceTaxAmount = this.taxPrLine(this.sourceTableId(),this.sourceRecId());

                    if ((baseAmountInclTax != baseAmountOriginal) &&
                        sourceTaxAmount                           &&
                        (baseAmountOriginal + sourceTaxAmount != baseAmountInclTax))
                    {
                        this.adjustPennyDiff(baseAmountOriginal + sourceTaxAmount - baseAmountInclTax,
                                             factureTrans.TableId,
                                             factureTrans.RecId);
                        amountInclTax.insert(factureTrans.RecId, 0);
                    }

                    if (!taxCalculateTotal &&
                        (factureCalcTax.exchRate()      != ExchangeRateHelper::exchRate(sourceCurrencyCode, taxDate)      ||
                         factureCalcTax.triangulation() != Currency::triangulation(sourceCurrencyCode, taxDate))
                       )
                    {
                        this.adjustAmount(factureCalcTax.exchRate(),factureCalcTax.exchRateSecondary());
                    }
                }
            }
            else
            {
                moreLines   = false;
            }
        }

        if (taxCalculateTotal)
        {
            this.insertTotalInInternal(cashDisc);
            taxAmount = this.calcTax();
            this.saveTotalInProcessTransaction();

            if (amountsInclTaxExist)
            {
                while select sum(SourceTaxAmountCur)
                from taxWorkTrans
                group by SourceRecId
                where taxWorkTrans.SourceTableId   == custInvoiceLineTableId &&
                      taxWorkTrans.TaxDirection    != TaxDirection::UseTax   &&
                      taxWorkTrans.TaxOrigin       != TaxOrigin::TaxReversed
                {
                    if (amountInclTax.exists(taxWorkTrans.SourceRecId) &&
                        amountExclTax.exists(taxWorkTrans.SourceRecId))
                    {
                        amountInclTax.insert(taxWorkTrans.SourceRecId, CurrencyExchangeHelper::amount(amountInclTax.lookup(taxWorkTrans.SourceRecId), sourceCurrencyCode));
                        amountExclTax.insert(taxWorkTrans.SourceRecId, CurrencyExchangeHelper::amount(amountExclTax.lookup(taxWorkTrans.SourceRecId), sourceCurrencyCode));

                        if ((amountExclTax.lookup(taxWorkTrans.SourceRecId) + taxWorkTrans.SourceTaxAmountCur) != amountInclTax.lookup(taxWorkTrans.SourceRecId))
                        {
                            counterMax++;
                            adjustRecId[counterMax] = taxWorkTrans.SourceRecId;
                            adjustTableId[counterMax] = taxWorkTrans.SourceTableId;
                            pennyDiff[counterMax] = amountExclTax.lookup(taxWorkTrans.SourceRecId) +
                                                    taxWorkTrans.SourceTaxAmountCur -
                                                    amountInclTax.lookup(taxWorkTrans.SourceRecId);
                        }
                    }
                }
                if (counterMax)
                {
                    for (counter = 1; counter <= counterMax; counter++)
                        this.adjustPennyDiff(pennyDiff[counter], adjustTableId[counter], adjustRecId[counter]);
                }
            }

            if (factureCalcTax.exchRate()      != ExchangeRateHelper::exchRate(sourceCurrencyCode, taxDate)      ||
                factureCalcTax.triangulation() != Currency::triangulation(sourceCurrencyCode, taxDate))
            {
                this.adjustAmount(factureCalcTax.exchRate(),factureCalcTax.exchRateSecondary());
            }
        }
        this.roundTaxOnTaxGroup();

        // was: loadTaxRegulation
        taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);
        if (taxCalculationAdjustment)
        {
            taxCalculationAdjustment.loadTaxAdjustments();
        }

        taxAmount = this.totalTaxAmount();

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTaxAdjustments_W</Name>
				<Source><![CDATA[
    void clearTaxAdjustments_W()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault getDefaultDimension(RefRecId _sourceRecId)
    {
        return factureTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionAccount getOperationLedgerDimension(RefRecId _sourceRecId)
    {
        /*
        LedgerAccount       ledgerAccount;

        if (custInvoiceJour.RefNum == RefNum::SalesOrder)
        {
          ledgerAccount = InventPosting::accountItem(InventAccountType::SalesRevenue,
                                                     custInvoiceTrans.ItemId,
                                                     InventTable::find(custInvoiceTrans.itemId).ItemGroupId,
                                                     custInvoiceJour.InvoiceAccount,
                                                     CustTable::find(custInvoiceJour.InvoiceAccount).CustGroup,
                                                     custInvoiceTrans.TaxGroup);
        }

        return ledgerAccount;
         */
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        boolean                 moreLines;

        headingTableId     = factureCalcTax.tableId();
        headingRecId       = factureCalcTax.recId();

        factureCalcTax.initCursor();
        moreLines   = true;
        while (moreLines)
        {
            factureTrans = factureCalcTax.nextLine();
            if (factureTrans)
            {
                taxDate = factureCalcTax.parmTaxCalculationDate();
                this.setExchRates(factureCalcTax.currencyCode(),
                                  factureCalcTax.exchRate(),
                                  factureCalcTax.exchRateSecondary(),
                                  Currency::noYes2UnknownNoYes(factureCalcTax.triangulation()),
                                  taxDate);
                taxModuleType = factureCalcTax.transModuleType();

                this.insertIntersection(factureTrans.TaxGroup,
                                        factureTrans.TaxItemGroup,
                                        factureCalcTax.transTransId(),
                                        factureTrans.ItemName,
                                        taxDate
                                        );

                if (! this.checkTaxCodesByLine())
                {
                    throw error("@SYS22772");
                }
            }
            else
            {
                moreLines = false;
            }
        }

        if (! this.checkTaxCodesInTotal())
        {
            throw error("@SYS22772");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension_RU</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount ledgerDimension_RU(TmpTaxWorkTrans _tmpTaxWorkTrans, TaxLedgerAccountGroup _taxLedgerAccountGroup)
    {
        TaxType_W   taxType = TaxTable::find(_tmpTaxWorkTrans.TaxCode).TaxType_W;

        if ((taxType == TaxType_W::VAT                                           ||
             taxType == TaxType_W::VATReduced                                    ||
             taxType == TaxType_W::VATZero)                                      &&
            (CustParameters::taxation_RU(taxDate) == CustTaxation_RU::OnPayment ||
             factureCalcTax.parmFactureJour_RU().vatOnPayment)
           )
        {
            if (_tmpTaxWorkTrans.TaxDirection == TaxDirection::OutgoingTax)
            {
                return _taxLedgerAccountGroup.TaxDeferredLedgerDimension_RU;
            }
        }

        return super(_tmpTaxWorkTrans, _taxLedgerAccountGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SalesExportFactureCalcTax_RU   _factureCalcTax,
             NoYes                          _post = NoYes::No,
             Voucher                        _voucher = "")
    {
        post                = _post;
        voucher             = _voucher;
        factureCalcTax      = _factureCalcTax;
        super();

        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetLedgerDimension_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets offset account for posting of taxes on export VAT
    /// </summary>
    /// <param name="_taxLedgerAccountGroup">
    /// <c>TaxLedgerAccountGroup</c> record values should be taken from
    /// </param>
    /// <returns>
    /// Offset account for posting of taxes on export VAT
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If tax ledger dimension not specified in <c>TaxLedgerAccountGroup</c>
    /// </exception>
    LedgerDimensionDefaultAccount offsetLedgerDimension_RU(TaxLedgerAccountGroup _taxLedgerAccountGroup)
    {
        LedgerDimensionDefaultAccount ret;

        if (TaxParameters::find().TaxSpecPosting_RU == NoYes::Yes)
        {
            ret = _taxLedgerAccountGroup.TaxOutgoingOffsetLedgerDimension_RU;

            if (! ret)
            {
                throw error(strFmt("@GLS103651", _taxLedgerAccountGroup.TaxAccountGroup));
            }
        }
        else
        {
            ret = super(_taxLedgerAccountGroup);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccountMarkup</Name>
				<Source><![CDATA[
    protected LedgerAccount operationAccountMarkup()
    {
        LedgerAccount ledgerAccount;

        /*
        switch (markupTrans.markupTable().VendType)
        {
            case MarkupType::Item:
                if (custInvoiceLine)
                    ledgerAccount = custInvoiceLine.ledgerAccount();
                break;

            case MarkupType::LedgerAccount:
                ledgerAccount = markupTrans.markupTable().VendAccount;
                break;

            case MarkupType::CustVend:
                ledgerAccount = CustLedgerAccounts::sumAccount(custInvoiceTable.InvoiceAccount,custInvoiceTable.PostingProfile);
                break;
        }
        */
        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPosting</Name>
				<Source><![CDATA[
    protected LedgerPostingType operationPosting()
    {
        return LedgerPostingType::CustRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPostingMarkup</Name>
				<Source><![CDATA[
    protected LedgerPostingType operationPostingMarkup()
    {
        LedgerPostingType ledgerPostingType;
        /*
        switch (markupTrans.markupTable().VendType)
        {
            case MarkupType::Item:
                if (custInvoiceLine)
                    ledgerPostingType = this.operationPosting();
                break;

            case MarkupType::LedgerAccount:
                ledgerPostingType = markupTrans.markupTable().VendPosting;
                break;

            case MarkupType::CustVend:
                ledgerPostingType = LedgerPostingType::CustBalance;
                break;
        }
        */
        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    RecId sourceRecId()
    {
        if (markupAdminister)
            return markupTrans.RecId;
        else
            return factureTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    TableId sourceTableId()
    {
        if (markupAdminister)
            return markupTrans.TableId;
        else
            return factureTrans.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCode_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines tax code which must be used for a given tax code
    /// </summary>
    /// <param name="_originalCode">
    ///   Source tax code
    /// </param>
    /// <returns>
    ///   Tax code which should be used, it may differ from ori
    /// </returns>
    /// <remarks>
    /// Tax code may differ from original code if source tax code has type of VAT Zero
    /// </remarks>
    protected TaxCode taxCode_RU(TaxCode _originalCode)
    {
        TaxCode     taxCode;
        TaxTable    taxTable;
        ;

        taxCode = super(_originalCode);

        if (!markupAdminister && factureCalcTax.parmUseDomesticTaxCode())
        {
            taxTable = TaxTable::find(taxCode);
            taxCode  = (taxTable.TaxType_W == TaxType_W::VATZero && taxTable.DomesticMarketTaxCode_RU)? taxTable.DomesticMarketTaxCode_RU : taxCode;
        }

        return taxCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>