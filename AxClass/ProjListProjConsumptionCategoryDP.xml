<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjConsumptionCategoryDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjConsumptionCategoryDP</c> class provides data for the
///    <c>ProjListProjConsumptionCategory</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(ProjStatementCategory)),
    SRSReportParameterAttribute(classstr(ProjListProjConsumptionContract))
]
class ProjListProjConsumptionCategoryDP extends SRSReportDataProviderBase
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    ProjOptionTime          time;
    ProjOptionHours         hour;
    ProjOptionCost          expenses;
    ProjOptionItem          item;
    TransDate               projFromDate;
    TransDate               projToDate;
    TransDate               ledgerFromDate;
    TransDate               ledgerToDate;
    ProjListColumnData      actualVsBudget;
    ForecastModelId         forecastModelId;
    ProjListStateProjType   stateProjType;
    boolean                 skipZero;
    ProjShowAmount          showAmount;
    ProjAmountQty           amountQty;

    projStatement                   projStatement;
    ProjListProjTrans_Consumption   listProjTrans;
    ProjListProjTransLayout         listProjTransLayout;
    ProjListProjConsumptionTmp      projListProjConsumptionTmp;

    QueryRun                qrun;
    ProjCategoryId          categoryId;
    ProjCategoryName        categoryName;

    ProjQty                 tmpQtyHour;
    AmountMST               tmpSalary, tmpExpenses, tmpInventory;

    int                     reportType;
    int                     hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals;
    int                     showCostCost, showEmplCost, showItemCost, showQtyHour, showTotalCost;
    str                     headerLabel, periodLabel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the consumption amount for hour, expense, and item values.
    /// </summary>
    void calculate()
    {
        projStatement.parmCategoryId(categoryId);

        switch (amountQty)
        {
            case ProjAmountQty::Amount:
                tmpSalary      = projStatement.c105_Consumption_Hour();
                break;

            case ProjAmountQty::Qty:
                tmpQtyHour     = projStatement.c105_Consumption_Hour_qty();
                break;

            case ProjAmountQty::AmountQty:
                tmpSalary      = projStatement.c105_Consumption_Hour();
                tmpQtyHour     = projStatement.c105_Consumption_Hour_qty();
                break;
        }

        tmpExpenses    = projStatement.c125_Consumption_Cost();
        tmpInventory   = projStatement.c120_Consumption_Item();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjConsumptionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>projListProjConsumptionTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>projListProjConsumptionTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('ProjListProjConsumptionTmp')]
    public ProjListProjConsumptionTmp getProjListProjConsumptionTmp()
    {
        select * from projListProjConsumptionTmp;

        return projListProjConsumptionTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ProjListProjTrans</c> class by using the parameters.
    /// </summary>
    private void initProjListTrans()
    {
        listProjTrans = ProjListProjTrans::construct(ProjListStateType::Consumption, ProjListStateId::Category);
        listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans);

        listProjTrans.parmTimeMaterial(timeMaterial);
        listProjTrans.parmFixedPrice(fixedPrice);
        listProjTrans.parmInvestment(investment);
        listProjTrans.parmInternalCost(internalCost);
        listProjTrans.parmtime(time);

        listProjTrans.parmHour(hour);
        listProjTrans.parmExpenses(expenses);
        listProjTrans.parmItem(item);

        listProjTrans.parmProjFromDate(projFromDate);
        listProjTrans.parmProjToDate(projToDate);
        listProjTrans.parmLedgerFromDate(ledgerFromDate);
        listProjTrans.parmLedgerToDate(ledgerToDate);

        listProjTrans.parmColumnData(actualVsBudget);
        listProjTrans.parmForecastModelId(forecastModelId);

        listProjTransLayout.parmStateProjType(stateProjType);
        listProjTransLayout.parmSkipZero(skipZero);

        listProjTransLayout.parmShowAmount(showAmount);
        listProjTransLayout.parmAmountQty(amountQty);

        if (listProjTransLayout.parmStateProjType() != ProjListStateProjType::Project)
        {
            listProjTransLayout.parmLevel(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjConsumptionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    private void insertProjListProjConsumptionTmp()
    {
        projListProjConsumptionTmp.clear();

        projListProjConsumptionTmp.Id            = categoryId;
        projListProjConsumptionTmp.IdLabel       = "@SYS69410";
        projListProjConsumptionTmp.Name          = categoryName;

        projListProjConsumptionTmp.QtyHour       = tmpQtyHour;

        projListProjConsumptionTmp.EmplCost      = listProjTransLayout.showAmountReport(tmpSalary, showAmount);
        projListProjConsumptionTmp.CostCost      = listProjTransLayout.showAmountReport(tmpExpenses, showAmount);
        projListProjConsumptionTmp.ItemCost      = listProjTransLayout.showAmountReport(tmpInventory, showAmount);
        projListProjConsumptionTmp.TotalCost     = listProjTransLayout.showAmountReport((tmpSalary + tmpExpenses + tmpInventory), showAmount);

        // set labels
        projListProjConsumptionTmp.HeaderLabel   = headerLabel;
        projListProjConsumptionTmp.PeriodLabel   = periodLabel;

        // set decimal values
        projListProjConsumptionTmp.DecimalHourQty  = hourQtyDecimals;
        projListProjConsumptionTmp.DecimalAmount   = amountDecimals;

        // set field visibility
        projListProjConsumptionTmp.ShowCostCost    = showCostCost;
        projListProjConsumptionTmp.ShowEmplCost    = showEmplCost;
        projListProjConsumptionTmp.ShowItemCost    = showItemCost;
        projListProjConsumptionTmp.ShowQtyHour     = showQtyHour;
        projListProjConsumptionTmp.ShowTotalCost   = showTotalCost;

        projListProjConsumptionTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the consumption amounts for hour, expense, and item are equal to zero.
    /// </summary>
    /// <returns>
    ///    true if all the values are not zero; otherwise false.
    /// </returns>
    boolean lineValue()
    {
        return (tmpExpenses  != 0 || tmpSalary != 0 || tmpInventory != 0 || tmpQtyHour != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the query ranges.
    /// </summary>
    void modifyQuery()
    {
        QueryBuildDataSource    queryDataSource;
        QueryBuildRange         rangeHide, rangeEmptyString;

        queryDataSource     = qrun.query().dataSourceTable(tablenum(ProjCategory));

        queryDataSource.addSortField(fieldnum(ProjCategory,CategoryId));
        rangeHide           = queryDataSource.addRange(fieldnum(ProjCategory,CategoryType));
        rangeHide.status(RangeStatus::Hidden);

        if (hour)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Hour));
        }

        if (expenses)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Cost));
        }

        if (item)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Item));
        }

        if (! (hour || expenses || item))
        {
            rangeEmptyString  = queryDataSource.addRange(fieldnum(ProjCategory,CategoryType));
            rangeEmptyString.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the category record and calls the <c>calculate</c> method.
    /// </summary>
    void printCategory()
    {
        ProjCategory       projCategoryLocal;

        projCategoryLocal       = qrun.get(tablenum(ProjCategory));

        categoryId              = projCategoryLocal.CategoryId;
        categoryName            = projCategoryLocal.Name;

        this.calculate();

        if (! skipZero  || this.lineValue())
        {
            this.insertProjListProjConsumptionTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. This method will be called by
    ///    SQL Server Reporting Services (SSRS) at run time. The method should compute data and populate the
    ///    data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjListProjConsumptionContract contract = this.parmDataContract() as ProjListProjConsumptionContract;

        timeMaterial = contract.parmTimeMaterial();
        fixedPrice = contract.parmFixedPrice();
        investment = contract.parmInvestment();
        internalCost = contract.parmInternalCost();
        time = contract.parmTime();

        hour = contract.parmHour();
        expenses = contract.parmExpenses();
        item = contract.parmItem();

        projFromDate = contract.parmProjFromDate();
        projToDate = contract.parmProjToDate();
        ledgerFromDate = contract.parmLedgerFromDate();
        ledgerToDate = contract.parmLedgerToDate();

        actualVsBudget = contract.parmActualVsBudget();
        forecastModelId = contract.parmForecastModelIdV2();

        skipZero = contract.parmSkipZero();

        showAmount = contract.parmShowAmount();
        amountQty = contract.parmAmountQty();

        reportType = contract.parmReportType();

        this.initProjListTrans();

        headerLabel   = listProjTrans.formatSelection(showAmount);
        periodLabel   = listProjTrans.formatPeriodLabel('', DateFlags::None);

        [showQtyHour, showEmplCost, showCostCost,
         showItemCost, showTotalCost] = listProjTrans.setDisplayFlags(amountQty, hour, expenses, item);

        [hourQtyDecimals, amountDecimals,
        grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

        projStatement = projStatement::newListProjConsumption(listProjTrans,
                                                              projListProjTrans2Period::columnData2ActualBudget(actualVsBudget),
                                                              amountQty,
                                                              forecastModelId);

        qrun = new QueryRun(this.parmQuery());

        this.modifyQuery();

        while (qrun.next())
        {
            this.printCategory();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>