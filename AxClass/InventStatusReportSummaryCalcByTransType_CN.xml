<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStatusReportSummaryCalcByTransType_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class calculates the data for InventStatus_CN report - Transaction type
/// </summary>
public class InventStatusReportSummaryCalcByTransType_CN extends InventStatusReportSummaryCalc_CN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all transaction types from the <c>InventValueReportTmpLine</c>
    /// </summary>
    /// <returns>
    /// The all transaction types of list
    /// </returns>
    protected List getTransType(InventValueReportTmpLine _inventValueReportLine)
    {
        InventValueReportTmpLine inventValueReportLineByTransType;
        List list = new List(Types::Enum);

        inventValueReportLineByTransType.setConnection(userConnection);

        while select ReferenceCategory from inventValueReportLineByTransType
            where inventValueReportLineByTransType.CreatedTransactionId == transactionID
                && inventValueReportLineByTransType.LineType == InventValueReportLineType::Transaction
                && inventValueReportLineByTransType.ResourceGroupId == _inventValueReportLine.ResourceGroupId
                && inventValueReportLineByTransType.ResourceId == _inventValueReportLine.ResourceId
                && inventValueReportLineByTransType.configId == _inventValueReportLine.configId
                && inventValueReportLineByTransType.InventColorId == _inventValueReportLine.InventColorId
                && inventValueReportLineByTransType.InventStyleId == _inventValueReportLine.InventStyleId
                && inventValueReportLineByTransType.InventVersionId == _inventValueReportLine.InventVersionId
                && inventValueReportLineByTransType.InventStatusId == _inventValueReportLine.InventStatusId
                && inventValueReportLineByTransType.InventSizeId == _inventValueReportLine.InventSizeId
                && inventValueReportLineByTransType.InventSiteId == _inventValueReportLine.InventSiteId
                && inventValueReportLineByTransType.InventLocationId == _inventValueReportLine.InventLocationId
                && inventValueReportLineByTransType.WMSLocationId == _inventValueReportLine.WMSLocationId
                && inventValueReportLineByTransType.InventSerialId == _inventValueReportLine.InventSerialId
                && inventValueReportLineByTransType.InventBatchId == _inventValueReportLine.InventBatchId
        {
            list.addEnd(inventValueReportLineByTransType.ReferenceCategory);
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method inserts selected records in temporary table
    /// </summary>
    public void calcReportData()
    {
        InventValueReportTmpLine inventValueReportLine;
        InventStatusReportTmp_CN inventStatusReportTmp;
        InventTransType transType;
        ListEnumerator listEnumerator;

        void initReportData(boolean _isTransType = false)
        {
            InventQty beginingQty;
            CostAmount beginingAmount;
            InventQty transQty;
            CostAmount transAmount;
            InventQty endQty;
            CostAmount endAmount;
            str inventTransType;
            str reportGroupKey;

            if (_isTransType)
            {
                transType =  listEnumerator.current();
                inventTransType = enum2Str(transType);
            }
            else
            {
                inventTransType = '';
            }

            this.initInventDim(inventValueReportLine);
            reportGroupKey = inventValueReportLine.ResourceGroupId +inventValueReportLine.ResourceId + inventTransType + InventDim.inventDimId;

            if (!inventTransType && setItemDim.in(reportGroupKey))
            {
                return;
            }
            else
            {
                setItemDim.add(reportGroupKey);
            }

            this.initInventStatusReport(inventStatusReportTmp, inventValueReportLine);
            inventStatusReportTmp.InventTransType = inventTransType;

            // Init the begining qty and amount
            [beginingQty, beginingAmount] = this.calcBalanceQtyAmountByItemDim(InventValueReportLineType::BeginningBalance,
                inventValueReportLine.ResourceGroupId,
                inventValueReportLine.ResourceId,
                InventDim,
                InventDimParm);

            inventStatusReportTmp.BeginningQty = beginingQty;
            inventStatusReportTmp.BeginningAmount = beginingAmount;

            // Init the transaction qty and amount by transaction type
            if (inventTransType)
            {
                [transQty, transAmount] = this.calcBalanceQtyAmountByItemDim(InventValueReportLineType::Transaction,
                    inventValueReportLine.ResourceGroupId,
                    inventValueReportLine.ResourceId,
                    InventDim,
                    InventDimParm,
                    true,
                    transType);
            }

            inventStatusReportTmp.QtyByTransType = transQty;
            inventStatusReportTmp.AmountByTransType = transAmount;

            // Init the ending qty and amount by transaction type
            [endQty, endAmount] = this.calcBalanceQtyAmountByItemDim(InventValueReportLineType::Transaction,
                    inventValueReportLine.ResourceGroupId,
                    inventValueReportLine.ResourceId,
                    InventDim,
                    InventDimParm);

            inventStatusReportTmp.EndingQty = beginingQty + endQty;
            inventStatusReportTmp.EndingAmount = beginingAmount + endAmount;
            inventStatusReportTmp.insert();
            inventStatusReportTmp.clear();
        }

        super();

        inventValueReportLine.setConnection(userConnection);
        inventStatusReportTmp.setConnection(userConnection);

        while select inventValueReportLine
            #InventValueReportTmpLineGroupBy(inventValueReportLine)
            where inventValueReportLine.LineType == InventValueReportLineType::BeginningBalance
                && inventValueReportLine.CreatedTransactionId == transactionID
        {
            List listTransType = new List(Types::Enum);
            listTransType = this.getTransType(inventValueReportLine);

            if (listTransType.elements())
            {
                listEnumerator = listTransType.getEnumerator();
                while (listEnumerator.moveNext())
                {
                    initReportData(true);
                }
            }
            else
            {
                initReportData();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventStatusReportSummaryCalcByTransType_CN construct(
        UserConnection _userConnection,
        InventStatusContract_CN _contract,
        createdTransactionId _transactionId)
    {
        InventStatusReportSummaryCalcByTransType_CN inventStatusReportSummaryCalcByTransType = new InventStatusReportSummaryCalcByTransType_CN();
        inventStatusReportSummaryCalcByTransType.parmUserConnection(_userConnection);
        inventStatusReportSummaryCalcByTransType.parmContract(_contract);
        inventStatusReportSummaryCalcByTransType.parmTransactionID(_transactionId);
        inventStatusReportSummaryCalcByTransType.init();

        return inventStatusReportSummaryCalcByTransType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
