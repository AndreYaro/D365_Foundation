<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStatementBatchHeaderHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>RetailStatementBatchHeaderHelper</c> contains helpers for retail statement posting batch headers.
/// </summary>
public class RetailStatementBatchHeaderHelper
{
    private const int maxBatchRetryCount = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the specified batch header with a specific number of retries if any exceptions occur while saving.
    /// </summary>
    /// <param name = "_batchHeader">The batch header.</param>
    /// <param name = "_batchJobId">The batch job identifier.</param>
    /// <param name = "_retailStatementId">The retail statement identifier.</param>
    public static void save(BatchHeader _batchHeader, RefRecId _batchJobId, RetailStatementId _retailStatementId = '')
    {
        int retryCount;
        str batchJobIdLogString;
        str retailStatementIdLogString;

        try
        {
            ttsbegin;
            retryCount++;
            _batchHeader.save();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (retryCount > maxBatchRetryCount)
            {
                info("@SYS65063"); // Deadlock detected
                RetailStatementPostingLogger::Error(funcName(), #linenumber, strFmt('Batch job: %1; Statement: %1; DeadlockException is not recovered while saving/scheduling batch job; Maximum retries %3 reached; throw error.', _batchJobId, _retailStatementId, int2Str(maxBatchRetryCount)));
                throw error("@SYS65063");
            }
            else
            {
                info("@SYS65063"); // Deadlock detected
                RetailStatementPostingLogger::Error(funcName(), #linenumber, strFmt('Batch job: %1; Statement: %1; DeadlockException occurred while saving/scheduling batch job at retry count %3, with %4 retries remaining.', _batchJobId, _retailStatementId, int2Str(retryCount), int2str(maxBatchRetryCount - retryCount)));
                retry;
            }
        }
        catch(Exception::UpdateConflict)
        {
            if (retryCount > maxBatchRetryCount)
            {
                RetailStatementPostingLogger::Error(funcName(), #lineNumber, strFmt('Batch job: %1; Statement: %1; UpdateConflict exception is not recovered while saving/scheduling batch job; Maximum retries %3 reached; throw error.', _batchJobId, _retailStatementId, int2Str(maxBatchRetryCount)));
                throw error("@Retail:UpdateConflictNotRecovered");
            }
            else
            {
                info("@SYS107548"); // Update conflicts
                RetailStatementPostingLogger::Error(funcName(), #linenumber, strFmt('Batch job: %1; Statement: %1; UpdateConflict exception occurred while saving/scheduling batch job at retry count %3, with %4 retries remaining.', _batchJobId, _retailStatementId, int2Str(retryCount), int2str(maxBatchRetryCount - retryCount)));
                retry;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>