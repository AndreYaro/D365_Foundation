<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCOmlIdentifierLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements a lookup mechanism for OML identifiers in a given component.
/// </summary>
class PCOmlIdentifierLookup
{
    boolean                     isInitialized;
    PCOMLIdentifierLookupTmp    omlIdentifierLookupTmp;
    PCClassRecId                componentRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addOmlIdentifiersForComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the OML identifiers belonging to a given component, to the collection passed in as argument.
    /// </summary>
    /// <param name="_componentRecId">
    /// A component record ID.
    /// </param>
    /// <param name="_prefix">
    /// An OML prefix.
    /// </param>
    /// <param name="_level">
    /// The level depth in the model structure.
    /// </param>
    protected void addOmlIdentifiersForComponent(PCClassRecId _componentRecId, str _prefix, int _level)
    {
        EcoResCategoryAttribute componentAttribute;
        EcoResAttribute         attribute;
        EcoResAttributeType     attributeType;
        PCSolverVariable        solverVariable;
        PCSubComponent          subcomponent;

        str postfix = strRep("]", _level);

        while select Name from solverVariable
            join TableId from attribute
            where attribute.RecId == solverVariable.Attribute
                join TableId from attributeType
                where   attributeType.RecId     == attribute.AttributeType
                // avoid attributes of type text that are not enumerations
                &&      ((attributeType.DataType  == AttributeDataType::Text && attributeType.IsEnumeration)
                        || attributeType.DataType != AttributeDataType::Text)
                join TableId from componentAttribute
                where   componentAttribute.Attribute    == attribute.RecId
                &&      componentAttribute.Category     == _componentRecId
        {
            omlIdentifierLookupTmp.clear();
            omlIdentifierLookupTmp.OMLIdentifier = _prefix + solverVariable.Name + postfix;
            omlIdentifierLookupTmp.insert();
        }

         _level++;

        while select ChildComponentClass, SolverName from subcomponent
            where subcomponent.ParentComponentClass == _componentRecId
        {
            this.addOmlIdentifiersForComponent(subcomponent.ChildComponentClass, _prefix + subcomponent.SolverName + '[' , _level);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOmlLookupData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the datastructures for the lookup.
    /// </summary>
    public void buildOmlLookupData()
    {
        // Only build once.
        if (isInitialized)
        {
            return;
        }

        this.addOmlIdentifiersForComponent(componentRecId, '', 0);

        isInitialized = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComponentRecId</Name>
				<Source><![CDATA[
        public PCClassRecId parmComponentRecId(PCClassRecId _componentRecId = componentRecId)
    {
        componentRecId = _componentRecId;

        return componentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOmlIdentifierLookupTmp</Name>
				<Source><![CDATA[
        public PCOMLIdentifierLookupTmp parmOmlIdentifierLookupTmp(PCOMLIdentifierLookupTmp _omlIdentifierLookupTmp = omlIdentifierLookupTmp)
    {
        omlIdentifierLookupTmp = _omlIdentifierLookupTmp;

        return omlIdentifierLookupTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCalculationTargetAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a target attribute value.
    /// </summary>
    /// <param name="_targetAttribute">
    /// The target attribute.
    /// </param>
    /// <returns>
    /// true if the target attribute is valid; otherwise, false.
    /// </returns>
    public boolean validateCalculationTargetAttribute(PCTargetAttribute _targetAttribute)
    {
        PCOMLIdentifierLookupTmp localOmlIdentifierLookupTmp;

        this.buildOmlLookupData();

        localOmlIdentifierLookupTmp.setTmpData(omlIdentifierLookupTmp);

        select firstOnly RecId from localOmlIdentifierLookupTmp
            where localOmlIdentifierLookupTmp.OMLIdentifier == _targetAttribute;
        if (localOmlIdentifierLookupTmp.RecId)
        {
            return true;
        }

        return checkFailed("@SYS4004650");
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCOmlIdentifierLookup construct()
    {
        return new PCOmlIdentifierLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromComponentRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the class from a component record ID.
    /// </summary>
    /// <param name="_componentRecId">
    /// The component record ID.
    /// </param>
    /// <returns>
    /// A new instance of the class.
    /// </returns>
    public static PCOmlIdentifierLookup newFromComponentRecId(PCClassRecId _componentRecId)
    {
        PCOmlIdentifierLookup omlIdentifierLookup = PCOmlIdentifierLookup::construct();

        omlIdentifierLookup.parmComponentRecId(_componentRecId);

        return omlIdentifierLookup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>