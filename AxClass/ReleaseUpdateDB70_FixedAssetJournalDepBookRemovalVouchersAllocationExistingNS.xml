<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalVouchersAllocationExistingNS</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Allocate vouchers for depreciation books transactional data.
/// This class uses the existing number sequence and runs row-by-row allocation.
/// </summary>
public class ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalVouchersAllocationExistingNS
    extends ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalVouchersAllocation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateVouchers</Name>
				<Source><![CDATA[
    public void allocateVouchers()
    {
        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLCreateNumberSequenceAllocationTmp());

        // allocate vouchers to tmp table
        this.updateVouchersNonSetBased();

        // Update voucher numbers for historic transactions for which journal lines have been deleted.
        this.allocateVouchersNoJournal();

        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLUpdateVouchersOnAssetDepBookJournalTrans());

        // Copy vouchers to AssetDepbookTrans
        this.copyVouchersToAssetDepBookTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberSequenceTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NumberSequenceTable parmNumberSequenceTable(NumberSequenceTable _numberSequenceTable = numberSequenceTable)
    {
        numberSequenceTable = _numberSequenceTable;

        return numberSequenceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyNumberSequenceMatchesNumberOfTransactions</Name>
				<Source><![CDATA[
    protected boolean verifyNumberSequenceMatchesNumberOfTransactions(int64 _numberOfTransactions)
    {
        boolean res = true;

        if (_numberOfTransactions > numberSequenceTable.Highest + 1 - numberSequenceTable.NextRec)
        {
            warning(numberSequenceTable.NumberSequence);
            res = false;
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateNumberSequence</Name>
				<Source><![CDATA[
    protected NumberSequenceTable findOrCreateNumberSequence()
    {
        return numberSequenceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLCreateNumberSequenceAllocationTmp</Name>
				<Source><![CDATA[
    private str getSQLCreateNumberSequenceAllocationTmp()
    {
        str sqlStatement = @"
            IF OBJECT_ID ( 'dbo.ASSETNUMBERSEQALLOCATIONUPGRADETMP', 'U') IS NULL
                CREATE TABLE [dbo].[ASSETNUMBERSEQALLOCATIONUPGRADETMP](
                    [VOUCHER] [nvarchar](20) NULL,
                    [JOURNALNUM] [nvarchar](20) NOT NULL,
                    [LINENUM] [numeric](32, 16) NOT NULL,
                    [DATAAREAID] [nvarchar](4) NOT NULL,
                    [PARTITION] [bigint] NOT NULL,
                    [RECVERSION] [int] NOT NULL,
                    [RECID] [bigint] NOT NULL
                      CONSTRAINT [I_ASSETNUMBERSEQLINE] PRIMARY KEY CLUSTERED
                    (
                       [JOURNALNUM] ASC,
                       [LINENUM] ASC,
                       [DATAAREAID] ASC,
                       [PARTITION] ASC
                    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyVouchersToAssetDepBookTrans</Name>
				<Source><![CDATA[
    private void copyVouchersToAssetDepBookTrans()
    {
        // Update voucher numbers for transactions which have journal lines
        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLUpdateAssetDepBookTransWithJournalVoucher());
        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLUpdateAssetGroupDepBookTransUpgradeTmpWithJournalVoucherIN());

        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLDropAssetNumberSeqAllocationUpgradeTmp());
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateVouchersNoJournal</Name>
				<Source><![CDATA[
    private void allocateVouchersNoJournal()
    {
        ResultSet depBookTrans = ReleaseUpdateDB70_FixedAssets::executeSqlQueryWithResultsStatic(this.getSQLSelectAssetDepBookTransWithNoJournal());
        ResultSet groupDepBookTransIN = ReleaseUpdateDB70_FixedAssets::executeSqlQueryWithResultsStatic(this.getSQLSelectAssetGroupDepBookTransWithNoJournalIN());

        this.insertIntoAssetNumberSeqAllocationUpgradeTmp(depBookTrans);
        this.insertIntoAssetNumberSeqAllocationUpgradeTmp(groupDepBookTransIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoAssetNumberSeqAllocationUpgradeTmp</Name>
				<Source><![CDATA[
    private void insertIntoAssetNumberSeqAllocationUpgradeTmp(ResultSet _resultSet)
    {
        LedgerJournalId journalId;
        int64 lineNumber;
        AssetNumberSeqAllocationUpgradeTmp journalLineMap;
        RecordInsertList journalLineMapList = new RecordInsertList(tableNum(AssetNumberSeqAllocationUpgradeTmp), true, true, true, false, false, journalLineMap);
        ResultSetMetaData metaData = _resultSet.getMetaData();

        ttsbegin;

        while (_resultSet.next())
        {
            journalId = '';
            lineNumber = 0;

            for (int i = 1; i <= metaData.getColumnCount(); i++)
            {
                if (metaData.getColumnName(i) == 'JOURNALLINENUM')
                {
                    lineNumber = _resultSet.getInt64(i);
                }

                if (metaData.getColumnName(i) == 'JOURNALNUMBER')
                {
                    journalId = _resultSet.getString(i);
                }
            }

            NumberSeq voucherNumberSeq = NumberSeq::newGetNumFromId(numberSequenceTable.RecId, false);

            if (voucherNumberSeq)
            {
                journalLineMap.clear();
                journalLineMap.JournalNum = journalId;
                journalLineMap.LineNum = lineNumber;
                journalLineMap.Voucher = voucherNumberSeq.num();
                journalLineMapList.add(journalLineMap);
            }
        }

        journalLineMapList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLUpdateVouchersOnAssetDepBookJournalTrans</Name>
				<Source><![CDATA[
    private str getSQLUpdateVouchersOnAssetDepBookJournalTrans()
    {        
        str sqlStatement = @"
            UPDATE [dbo].[ASSETDEPBOOKJOURNALTRANS]
                SET [ASSETDEPBOOKJOURNALTRANS].[VOUCHER] = [ASSETNUMBERSEQALLOCATIONUPGRADETMP].[VOUCHER]
            FROM [ASSETDEPBOOKJOURNALTRANS]
            JOIN [ASSETNUMBERSEQALLOCATIONUPGRADETMP]
                 ON [ASSETDEPBOOKJOURNALTRANS].[JOURNALID] = [ASSETNUMBERSEQALLOCATIONUPGRADETMP].[JOURNALNUM]
                AND [ASSETDEPBOOKJOURNALTRANS].[LINENUM] = [ASSETNUMBERSEQALLOCATIONUPGRADETMP].[LINENUM]
                AND [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID] = [ASSETNUMBERSEQALLOCATIONUPGRADETMP].[DATAAREAID]
                AND [ASSETDEPBOOKJOURNALTRANS].[PARTITION] =  [ASSETNUMBERSEQALLOCATIONUPGRADETMP].[PARTITION]";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLSelectAssetGroupDepBookTransWithNoJournalIN</Name>
				<Source><![CDATA[
    private str getSQLSelectAssetGroupDepBookTransWithNoJournalIN()
    {
        str sqlStatement = strFmt(@"
            SELECT [JOURNALLINENUM], [JOURNALNUMBER]
            FROM [ASSETGROUPDEPBOOKTRANS_IN]
            WHERE [ASSETGROUPDEPBOOKTRANS_IN].[DATAAREAID] = '%1'
                AND [ASSETGROUPDEPBOOKTRANS_IN].[PARTITION] = %2
                AND [ASSETGROUPDEPBOOKTRANS_IN].[ORIGINATINGVOUCHER] = ''
                AND  NOT EXISTS
                (SELECT  RECID FROM [ASSETDEPBOOKJOURNALTRANS]
                 WHERE [ASSETGROUPDEPBOOKTRANS_IN].[JOURNALNUMBER] = [ASSETDEPBOOKJOURNALTRANS].[JOURNALID]
                    AND [ASSETGROUPDEPBOOKTRANS_IN].[JOURNALLINENUM] = [ASSETDEPBOOKJOURNALTRANS].[LINENUM]
                    AND [ASSETGROUPDEPBOOKTRANS_IN].[DATAAREAID] = [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID]
                    AND [ASSETGROUPDEPBOOKTRANS_IN].[PARTITION] = [ASSETDEPBOOKJOURNALTRANS].[PARTITION])",
            curExt(), getCurrentPartitionRecId());

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLSelectAssetDepBookTransWithNoJournal</Name>
				<Source><![CDATA[
    private str getSQLSelectAssetDepBookTransWithNoJournal()
    {
        str sqlStatement = strFmt(@"
            SELECT [JOURNALLINENUM], [JOURNALNUMBER]
            FROM [ASSETDEPBOOKTRANS]
            WHERE [ASSETDEPBOOKTRANS].[DATAAREAID] = '%1'
                AND [ASSETDEPBOOKTRANS].[PARTITION] = %2
                AND [ASSETDEPBOOKTRANS].[ORIGINATINGVOUCHER] = ''
                AND  NOT EXISTS
                (SELECT  RECID FROM [ASSETDEPBOOKJOURNALTRANS]
                 WHERE [ASSETDEPBOOKTRANS].[JOURNALNUMBER] = [ASSETDEPBOOKJOURNALTRANS].[JOURNALID]
                    AND [ASSETDEPBOOKTRANS].[JOURNALLINENUM] = [ASSETDEPBOOKJOURNALTRANS].[LINENUM]
                    AND [ASSETDEPBOOKTRANS].[DATAAREAID] = [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID]
                    AND [ASSETDEPBOOKTRANS].[PARTITION] = [ASSETDEPBOOKJOURNALTRANS].[PARTITION])",
            curExt(), getCurrentPartitionRecId());

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLUpdateAssetGroupDepBookTransUpgradeTmpWithJournalVoucherIN</Name>
				<Source><![CDATA[
    private str getSQLUpdateAssetGroupDepBookTransUpgradeTmpWithJournalVoucherIN()
    {
        str sqlStatement = @"
            UPDATE [dbo].[ASSETGROUPDEPBOOKTRANSINUPGRADETMP]
                SET [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[ORIGINATINGVOUCHER] = [ASSETDEPBOOKJOURNALTRANS].[VOUCHER]
            FROM [ASSETGROUPDEPBOOKTRANSINUPGRADETMP]
            JOIN [ASSETDEPBOOKJOURNALTRANS]
                 ON [ASSETDEPBOOKJOURNALTRANS].[JOURNALID] = [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[JOURNALNUMBER]
                AND [ASSETDEPBOOKJOURNALTRANS].[LINENUM] = [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[JOURNALLINENUM]
                AND [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID] = [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[DATAAREAID]
                AND [ASSETDEPBOOKJOURNALTRANS].[PARTITION] = [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[PARTITION]";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLUpdateAssetDepBookTransWithJournalVoucher</Name>
				<Source><![CDATA[
    private str getSQLUpdateAssetDepBookTransWithJournalVoucher()
    {
        str sqlStatement = @"
            UPDATE [dbo].[ASSETDEPBOOKTRANS]
                SET [ASSETDEPBOOKTRANS].[ORIGINATINGVOUCHER] = [ASSETNUMBERSEQALLOCATIONUPGRADETMP].[VOUCHER]
            FROM [ASSETDEPBOOKTRANS]
            JOIN [ASSETNUMBERSEQALLOCATIONUPGRADETMP]
                 ON [ASSETNUMBERSEQALLOCATIONUPGRADETMP].[JOURNALNUM] = [ASSETDEPBOOKTRANS].[JOURNALNUMBER]
                AND [ASSETNUMBERSEQALLOCATIONUPGRADETMP].[LINENUM] = [ASSETDEPBOOKTRANS].[JOURNALLINENUM]
                AND [ASSETNUMBERSEQALLOCATIONUPGRADETMP].[DATAAREAID] = [ASSETDEPBOOKTRANS].[DATAAREAID]
                AND [ASSETNUMBERSEQALLOCATIONUPGRADETMP].[PARTITION] = [ASSETDEPBOOKTRANS].[PARTITION]";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVouchersNonSetBased</Name>
				<Source><![CDATA[
    private void updateVouchersNonSetBased()
    {
        ResultSet journalTransResultSet = ReleaseUpdateDB70_FixedAssets::executeSqlQueryWithResultsStatic(this.getSQLSelectAssetDepBookJournalTrans());
        ResultSetMetaData metaData = journalTransResultSet.getMetaData();
        LedgerJournalId journalID;
        int64 lineNumber;

        AssetNumberSeqAllocationUpgradeTmp journalLineMap;
        RecordInsertList journalLineMapList = new RecordInsertList(tableNum(AssetNumberSeqAllocationUpgradeTmp), true, true, true, false, false, journalLineMap);

        ttsbegin;

        while (journalTransResultSet.next())
        {
            journalID = '';
            lineNumber = 0;

            for (int i = 1; i <= metaData.getColumnCount(); i++)
            {
                if (metaData.getColumnName(i) == 'LINENUM')
                {
                    lineNumber = journalTransResultSet.getInt64(i);
                }

                if (metaData.getColumnName(i) == 'JOURNALID')
                {
                    journalID = journalTransResultSet.getString(i);
                }
            }

            NumberSeq voucherNumberSeq = NumberSeq::newGetNumFromId(numberSequenceTable.RecId, false);

            if (voucherNumberSeq)
            {
                journalLineMap.clear();

                journalLineMap.JournalNum = journalID;
                journalLineMap.LineNum = lineNumber;
                journalLineMap.Voucher =  voucherNumberSeq.num();
                journalLineMapList.add(journalLineMap);
            }
        }

        journalLineMapList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLDropAssetNumberSeqAllocationUpgradeTmp</Name>
				<Source><![CDATA[
    private str getSQLDropAssetNumberSeqAllocationUpgradeTmp()
    {
        str sqlStatement = @"
            IF OBJECT_ID ( 'dbo.ASSETNUMBERSEQALLOCATIONUPGRADETMP', 'U') IS NOT NULL
                DROP TABLE ASSETNUMBERSEQALLOCATIONUPGRADETMP";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLSelectAssetDepBookJournalTrans</Name>
				<Source><![CDATA[
    private str getSQLSelectAssetDepBookJournalTrans()
    {
        str sqlStatement = strFmt(@"
            SELECT [ASSETDEPBOOKJOURNALTABLE].[JOURNALID], [ASSETDEPBOOKJOURNALTRANS].[LINENUM]
                FROM [ASSETDEPBOOKJOURNALTABLE]
            JOIN [ASSETDEPBOOKJOURNALTRANS] ON [ASSETDEPBOOKJOURNALTABLE].[JOURNALID] = [ASSETDEPBOOKJOURNALTRANS].[JOURNALID]
                WHERE [ASSETDEPBOOKJOURNALTABLE].[DATAAREAID] = '%1'
                  AND [ASSETDEPBOOKJOURNALTABLE].[PARTITION] = %2 
            ORDER BY [ASSETDEPBOOKJOURNALTRANS].[LINENUM] ASC",
            curExt(), getCurrentPartitionRecId());

        return sqlStatement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>