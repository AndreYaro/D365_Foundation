<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlGroupValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BudgetControlGroupValidation
{
    private BudgetControlConfigurationRecId controlConfigurationRecId;
    private Map groupMemberManagerMap;
    private Map budgetControlDimensionAttributes;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        controlConfigurationRecId = _controlConfigurationRecId;

        budgetControlDimensionAttributes = new Map(Types::Integer, Types::Int64);

        DimensionAttribute dimensionAttribute;
        BudgetControlDimensionAttribute controlDimensionAttribute;
        BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;

        while select Ordinal, RecId from controlDimensionAttribute
            order by Ordinal
            where controlDimensionAttribute.BudgetControlConfiguration == controlConfigurationRecId
            join RecId from budgetDimensionAttribute
                where budgetDimensionAttribute.RecId == controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute
            join RecId from dimensionAttribute
                where dimensionAttribute.RecId == budgetDimensionAttribute.DimensionAttribute
        {
            budgetControlDimensionAttributes.insert(controlDimensionAttribute.Ordinal, dimensionAttribute.RecId);
        }

        groupMemberManagerMap = new Map(Types::Int64, Types::Class);

        BudgetGroup budgetGroup;
        BudgetGroupMember groupMember;

        while select RecId from groupMember
            order by groupMember.RecId
            exists join budgetGroup
            where groupMember.BudgetGroup == budgetGroup.RecId
                && budgetGroup.BudgetControlConfiguration == controlConfigurationRecId
        {
            // Initialize group managers
            BudgetControlGroupManager groupManager = BudgetControlGroupManager::construct(groupMember.RecId);
            groupMemberManagerMap.insert(groupMember.RecId, groupManager);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private boolean validate()
    {
        // Validate that the configuration is editable.
        boolean isValid = BudgetControlConfigurationManager::validateConfigurationEditPermitted(controlConfigurationRecId);

        if (isValid)
        {
            var logger = BudgetControlInstrumentationLogger::createLogger(classStr(BudgetControlConfigurationManager));
            using (var activityContext = logger.activation().validateBudgetGroupMembers(controlConfigurationRecId, true))
            {
                // Validate that the names are unique.
                isValid = this.validateNames();
            
                // Validate the override responsible users.
                isValid = this.validateOverrideResponsibleUsers() && isValid;

                // Validate that any budget group member with no criteria exists with other budget group members with criteria.
                isValid = this.validateBudgetGroupMemberWithNoCriteriaExistsWithOtherCriteria() && isValid;

                if (isValid)
                {
                    logger.logBucketizedCount(activityContext, groupMemberManagerMap.elements());

                    var groupMemberManagerMapEnumerator = groupMemberManagerMap.getEnumerator();

                    while (groupMemberManagerMapEnumerator.moveNext())
                    {
                        var groupManager = groupMemberManagerMapEnumerator.currentValue() as BudgetControlGroupManager;

                        // Validate that the required fields are set.
                        isValid = this.validateRequiredFields(groupManager) && isValid;

                        // Validate the criteria.
                        isValid = this.validateCriteria(groupMemberManagerMapEnumerator.currentKey()) && isValid;
                    }
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNames</Name>
				<Source><![CDATA[
    private boolean validateNames()
    {
        boolean isValid = true;

        BudgetGroup existingBudgetGroup;
        BudgetGroup duplicateBudgetGroup;
        BudgetGroupMember existingBudgetGroupMember;
        BudgetGroupMember duplicateBudgetGroupMember;

        while select RecId, Name from existingBudgetGroupMember
            exists join existingBudgetGroup
                where existingBudgetGroup.RecId == existingBudgetGroupMember.BudgetGroup
                    && existingBudgetGroup.BudgetControlConfiguration == controlConfigurationRecId
            exists join duplicateBudgetGroupMember
                where duplicateBudgetGroupMember.RecId != existingBudgetGroupMember.RecId
                    && duplicateBudgetGroupMember.Name == existingBudgetGroupMember.Name
            exists join duplicateBudgetGroup
                where duplicateBudgetGroup.RecId == duplicateBudgetGroupMember.BudgetGroup
                    && duplicateBudgetGroup.BudgetControlConfiguration == controlConfigurationRecId
        {
            isValid = checkFailed(strfmt("@SYS321395", existingBudgetGroupMember.Name)) && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOverrideResponsibleUsers</Name>
				<Source><![CDATA[
    private boolean validateOverrideResponsibleUsers()
    {
        boolean isValid = true;

        BudgetGroup budgetGroup;

        while select OverrideResponsibleUser from budgetGroup
            group by budgetGroup.OverrideResponsibleUser
            where budgetGroup.BudgetControlConfiguration == controlConfigurationRecId
        {
            isValid = BudgetControlConfigurationManager::validateResponsibleUserReference(budgetGroup.OverrideResponsibleUser) && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetGroupMemberWithNoCriteriaExistsWithOtherCriteria</Name>
				<Source><![CDATA[
    private boolean validateBudgetGroupMemberWithNoCriteriaExistsWithOtherCriteria()
    {
        // This checks if there is any budget group member that does not have any criteria
        // when there are multiple budget group members existed in the given budget control configuration.
        // If any budget group member with no criteria exists with other bugdget group members with criteria,
        // it creates overlaps since a criteria for budget group member without criteria is created with wildcards.

        boolean isValid = true;
        BudgetGroup budgetGroup;
        BudgetGroupMember budgetGroupMember;
        BudgetGroupMemberCriteria budgetGroupMemberCriteria;

        // find any budget group member that have a criteria
        select firstonly RecId from budgetGroupMember
            exists join budgetGroup
            where budgetGroupMember.BudgetGroup == budgetGroup.RecId
                && budgetGroup.BudgetControlConfiguration == controlConfigurationRecId
            exists join budgetGroupMemberCriteria
                where budgetGroupMemberCriteria.BudgetGroupMember == budgetGroupMember.RecId;

        if (budgetGroupMember.RecId)
        {
            // In case there is any budget group members that do not have any criteria exist,
            // display a list of errors with names of those budget group members.
            while select Name from budgetGroupMember
                exists join budgetGroup
                where budgetGroupMember.BudgetGroup == budgetGroup.RecId
                    && budgetGroup.BudgetControlConfiguration == controlConfigurationRecId
                notexists join budgetGroupMemberCriteria
                    where budgetGroupMemberCriteria.BudgetGroupMember == budgetGroupMember.RecId
            {
                isValid = checkFailed(strFmt("@Budget:BudgetGroupMemberWithNoCriteriaOverlap", budgetGroupMember.Name));
            }
        }
        else
        {
            // In case there is no budget group member that has critieria,
            // only only budget group member without no criteria is allowed.
            select count(RecId) from budgetGroupMember
                exists join budgetGroup
                where budgetGroupMember.BudgetGroup == budgetGroup.RecId
                    && budgetGroup.BudgetControlConfiguration == controlConfigurationRecId
                notexists join budgetGroupMemberCriteria
                    where budgetGroupMemberCriteria.BudgetGroupMember == budgetGroupMember.RecId;

            if (budgetGroupMember.RecId > 1)
            {
                isValid = checkFailed(strFmt("@Budget:BudgetGroupMemberWithNoCriteriaExistMoreThanOne"));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRequiredFields</Name>
				<Source><![CDATA[
    private boolean validateRequiredFields(BudgetControlGroupManager _groupManager)
    {
        boolean isValid = true;

        // Validate that the required fields are set.
        if (_groupManager.parmBudgetInterval() == 0)
        {
            isValid = checkFailed("@SYS315199");
        }

        if (_groupManager.parmBudgetCycleTimeSpan() == 0)
        {
            isValid = checkFailed("@SYS315242");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCriteria</Name>
				<Source><![CDATA[
    private boolean validateCriteria(RefRecId _groupMemberId)
    {
        boolean isValid = true;
        boolean isCriteriaIntersecting;
        BudgetGroupMemberName budgetGroupMemberName;

        var givenGroupMemberManager = groupMemberManagerMap.lookup(_groupMemberId) as BudgetControlGroupManager;

        var groupMemberManagerMapEnumerator = groupMemberManagerMap.getEnumerator();

        while (groupMemberManagerMapEnumerator.moveNext())
        {
            // in order to avoid duplicate validations, find counter parties of which budget group member recid is higher than its own.
            if (groupMemberManagerMapEnumerator.currentKey() > _groupMemberId)
            {
                var existingGroupMemberManager = groupMemberManagerMapEnumerator.currentValue() as BudgetControlGroupManager;
                budgetGroupMemberName = existingGroupMemberManager.parmName();

                var budgetControlDimensionAttributesEnumerator = budgetControlDimensionAttributes.getEnumerator();

                while (budgetControlDimensionAttributesEnumerator.moveNext())
                {
                    // Get the criteria for the dimension attribute in the order that is defined by the configuration.
                    var dimensionAttributeRecId = budgetControlDimensionAttributesEnumerator.currentValue();
                    // If it is not defined it is treated as a wildcard.
                    var givenCriteria = givenGroupMemberManager.getDimensionExpressionCriteria(dimensionAttributeRecId);

                    // Get the existing group member criteria for the dimension attribute.
                    var existingCriteria = existingGroupMemberManager.getDimensionExpressionCriteria(dimensionAttributeRecId);

                    isCriteriaIntersecting = DimensionExpressionCriteriaCollection::isExpressionCriteriaIntersecting(existingCriteria, givenCriteria);

                    if (!isCriteriaIntersecting)
                    {
                        // If any dimension attribute does not intersect then the criteria does not intersect.
                        break;
                    }
                }
            }

            if (isCriteriaIntersecting)
            {
                // The set of group member criteria intersects with an existing set of group member criteria.
                break;
            }
        }

        if (isCriteriaIntersecting)
        {
            isValid = checkFailed(strfmt("@Budget:BudgetControlGroupMemberCriteriaOverlapBetween", givenGroupMemberManager.parmName(), budgetGroupMemberName));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BudgetControlGroupValidation construct(BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        var groupValidationManager = new BudgetControlGroupValidation();
        groupValidationManager.initialize(_controlConfigurationRecId);

        return groupValidationManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetGroupMembers</Name>
				<Source><![CDATA[
    internal static boolean validateBudgetGroupMembers(BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        var groupValidationManager = BudgetControlGroupValidation::construct(_controlConfigurationRecId);

        return groupValidationManager.validate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>