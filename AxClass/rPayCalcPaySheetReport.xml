<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayCalcPaySheetReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayCalcPaySheetReport extends XMLExcelReport_RU implements BatchRetryable
{
    DialogField             fieldCalcPeriod,
                            fieldDocumentNumber, fieldDocumentDate,
                            fieldStartDate, fieldEndDate, fieldOrganizationId;

    RPaySheetTable          m_paySheetTable;

    RpayHRMOrganizationId   m_DepartmentId;
    ReportPeriod_RU         m_CalcPeriod;
    str                     m_DocumentNumber;
    date                    m_DocumentDate;
    date                    m_StartDate, m_EndDate;
    RPayRateCode            m_salaryRateCode;
    RpayTimeGroupCode       m_timeWorkingDays, m_timeWeekends, m_timeHolidays;
    RPayShowTime            m_workingShowTime, m_weekendsShowTime, m_holidaysShowTime;

    RPayAmount              amounts[21], sheetSum;
    RPayParameters          m_PayParameters;
    RPayCounterUnit         m_funds[21];
    Name                    m_fundNames[21];

    int                     lineNumber, rowNumber, numOfLinesTotal, currentPage;
    RPayRateTable           salaryRate;
    RPayRateValue           salary;
    str                     workingStr, weekendStr, holidayStr;
    Map                     mapBodyLines;
    MapEnumerator           linesEnum;
    container               conLine;
    QueryRun                queryRun;
    RNumDateInWordConverter converter;

    #DEFINE.CurrentVersion(1)
    #DEFINE.numOfColumns(21)

    #LOCALMACRO.CurrentList
        m_DepartmentId,
        m_CalcPeriod,
        m_DocumentNumber,
        m_DocumentDate,
        m_StartDate,
        m_EndDate
    #ENDMACRO

    #LOCALMACRO.num2strDec
        (num2str(%1, 0, numOfDec(%1), 1, 3))
        #UNDEF.ARG
    #ENDMACRO

    #define.FileName('Calculation payment sheet')
    #define.PageNumber('PageNumber')
    #define.ReportHeader('REPORTHEADER')
    #define.Body('BODY')
    #define.ReportFooter('REPORTFOOTER')
    #define.PageHeader('PAGEHEADER')

    #define.maxRows(95)
    #define.maxRowsFirst(59)
    #define.addPageSize(256)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(12.75)

        switch (_bookmark)
        {
            case #PageHeader:
            case #PageNumber:
            case #ReportFooter:
                return conPeek(mapSections.lookup(_bookmark), #posSectionHeight);
        }

        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndPrepareParameters</Name>
				<Source><![CDATA[
    private void checkAndPrepareParameters()
    {
        RPayShowTime showTime = RPayShowTime::Hours;

        setPrefix("@RUP461");

        m_salaryRateCode   = RPayReportTuningTable::find(RPayReportName::RPayCalcPaySheet, 1).Parameter;

        m_timeWorkingDays  = RPayReportTuningTable::find(RPayReportName::RPayCalcPaySheet, 2).Parameter;
        m_workingShowTime  = str2enum(showTime, RPayReportTuningTable::find(RPayReportName::RPayCalcPaySheet, 3).Parameter);

        m_timeWeekends     = RPayReportTuningTable::find(RPayReportName::RPayCalcPaySheet, 4).Parameter;
        m_weekendsShowTime = str2enum(showTime, RPayReportTuningTable::find(RPayReportName::RPayCalcPaySheet, 5).Parameter);

        m_timeHolidays     = RPayReportTuningTable::find(RPayReportName::RPayCalcPaySheet, 6).Parameter;
        m_holidaysShowTime = str2enum(showTime, RPayReportTuningTable::find(RPayReportName::RPayCalcPaySheet, 7).Parameter);

        m_funds[8]  = RPayReportTuningTable::find(RPayReportName::RPayCalcPaySheet, 8).Parameter;
        m_funds[9]  = RPayReportTuningTable::find(RPayReportName::RPayCalcPaySheet, 9).Parameter;
        m_funds[10] = RPayReportTuningTable::find(RPayReportName::RPayCalcPaySheet, 10).Parameter;
        m_funds[11] = RPayReportTuningTable::find(RPayReportName::RPayCalcPaySheet, 11).Parameter;
        m_funds[12] = RPayReportTuningTable::find(RPayReportName::RPayCalcPaySheet, 12).Parameter;
        m_funds[13] = RPayReportTuningTable::find(RPayReportName::RPayCalcPaySheet, 13).Parameter;
        m_funds[16] = RPayReportTuningTable::find(RPayReportName::RPayCalcPaySheet, 14).Parameter;
        m_funds[17] = RPayReportTuningTable::find(RPayReportName::RPayCalcPaySheet, 15).Parameter;
        m_funds[18] = RPayReportTuningTable::find(RPayReportName::RPayCalcPaySheet, 16).Parameter;

        m_fundNames[0] = '';

        m_fundNames[8]  = RPayCounterTable::find(m_funds[8]).Name;
        m_fundNames[9]  = RPayCounterTable::find(m_funds[9]).Name;
        m_fundNames[10] = RPayCounterTable::find(m_funds[10]).Name;
        m_fundNames[11] = RPayCounterTable::find(m_funds[11]).Name;
        m_fundNames[12] = RPayCounterTable::find(m_funds[12]).Name;
        m_fundNames[13] = RPayCounterTable::find(m_funds[13]).Name;
        m_fundNames[16] = RPayCounterTable::find(m_funds[16]).Name;
        m_fundNames[17] = RPayCounterTable::find(m_funds[17]).Name;
        m_fundNames[18] = RPayCounterTable::find(m_funds[18]).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmplLine</Name>
				<Source><![CDATA[
    private void createEmplLine(RHRMEmplTable _employee)
    {
        RPayTrans               payTrans;
        RPayFundMember          fundMember;
        RPayTaxIncomeGroupTable taxIncomeGroupTable;
        RPayAmount              deductionSum, sumToPay;
        int                     i;
        container               con;

        amounts[0] = 0;

        salaryRate = RPayRateTable::find(m_salaryRateCode);
        if (salaryRate)
        {
            amounts[4] = salaryRate.getValue(RPayRateCallContext::construct(m_CalcPeriod, _employee.EmployeeId));
        }

        con+=_employee.EmployeeId;
        con+=_employee.titleId();
        con+= (amounts[4] == 0) ? '' : strFmt("%1",amounts[4]);
        con+= this.getTime(_employee, m_CalcPeriod, m_timeWorkingDays, m_workingShowTime);
        con+= this.getTime(_employee, m_CalcPeriod, m_timeWeekends, m_weekendsShowTime);
        con+= this.getTime(_employee, m_CalcPeriod, m_timeHolidays, m_holidaysShowTime);

        for (i = 1; i <= #numOfColumns; i++)
        {
            if (m_funds[i])
            {
                select sum(Amount) from payTrans
                    where payTrans.Emplid    == _employee.EmployeeId &&
                          payTrans.PayPeriod == m_CalcPeriod
                exists join fundMember
                    where fundMember.PayCostType == payTrans.PayCtype &&
                          fundMember.CounterUnit == m_funds[i];
                amounts[i] = payTrans.Amount;
            }
        }

        amounts[14] = amounts[8] + amounts[9] + amounts[10] + amounts[11] + amounts[12] + amounts[13];

        select sum(Amount) from payTrans
            where payTrans.Emplid    == _employee.EmployeeId &&
                  payTrans.PayPeriod == m_CalcPeriod
        exists join taxIncomeGroupTable
            where taxIncomeGroupTable.RpayCostType == payTrans.PayCtype;

        amounts[15] = payTrans.Amount;

        for (i = 15; i <= 18; i++)
        {
            amounts[i] = -amounts[i];
        }

        deductionSum = amounts[15] + amounts[16] + amounts[17] + amounts[18];
        sumToPay = amounts[14] - deductionSum;
        if (sumToPay < 0)
        {
            amounts[20] = -sumToPay;
            amounts[21] = 0;
        }
        else
        {
            amounts[19] = sumToPay - roundDown(sumToPay, m_PayParameters.PaySheetRound);
            amounts[21] = roundDown(sumToPay, m_PayParameters.PaySheetRound);
        }

        sheetSum += amounts[21];

        if (amounts[5] || amounts[6] || amounts[7] || amounts[8] || amounts[9] ||
            amounts[10] || amounts[11] || amounts[12] || amounts[13] || amounts[14] ||
            amounts[15] || amounts[16] || amounts[17] || amounts[18] || amounts[19] ||
            amounts[20] || amounts[21])
        {
            lineNumber++;
            for (i = 8; i <= 21; i++)
            {
                con+= (amounts[i] == 0) ? '' : strFmt("%1",amounts[i]);
            }

            con+=_employee.name();
            mapBodyLines.insert(lineNumber,con);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        converter = RNumDateInWordConverter::construct(infolog.language());
        this.initSectionMap();
        this.setCurrentWorksheetNum(1, #addPageSize);
        this.fillDocument();
        this.execute(#ReportFooter);
        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog      dialog = null;
        DialogGroup dlgGroup;

        if (m_paySheetTable)
        {
            m_DepartmentId   = m_paySheetTable.HrmOrganisationId;
            m_CalcPeriod     = m_paySheetTable.PayPeriod;
            m_DocumentNumber = m_paySheetTable.PaySheetNum;
            m_DocumentDate   = m_paySheetTable.TransDate;
            m_StartDate      = m_paySheetTable.PaySheetDateFrom;
            m_EndDate        = m_paySheetTable.PaySheetDateTo;

            this.updateQuery();

            return dialog;
        }

        dialog = super();

        fieldCalcPeriod     = dialog.addField(extendedTypeStr(ReportPeriod_RU), "@RUP1123");

        fieldOrganizationId = dialog.addField(extendedTypeStr(RpayHRMOrganizationId), "@GLS106477");
        dlgGroup            = dialog.addGroup("@SYS11131");
        fieldDocumentNumber = dialog.addField(extendedTypeStr(DocumentNum), "@SYS5732");
        fieldDocumentDate   = dialog.addField(extendedTypeStr(DocumentDate), "@GLS102130");
        dlgGroup.addFieldname(fieldDocumentNumber.fieldname());
        dlgGroup.addFieldname(fieldDocumentDate.fieldname());

        dlgGroup            = dialog.addGroup("@GLS106136");
        fieldStartDate      = dialog.addField(extendedTypeStr(TransDate), "@GLS106137");
        fieldEndDate        = dialog.addField(extendedTypeStr(TransDate), "@GLS102758");
        dlgGroup.addFieldname(fieldStartDate.fieldname());
        dlgGroup.addFieldname(fieldEndDate.fieldname());

        fieldCalcPeriod.value(m_CalcPeriod ? m_CalcPeriod : RPayParameters::payPeriod());
        fieldOrganizationId.value(m_DepartmentId);
        fieldDocumentNumber.value(m_DocumentNumber);
        fieldDocumentDate.value(m_DocumentDate);
        fieldStartDate.value(m_StartDate ? m_StartDate : RPayParameters::payPeriod());
        fieldEndDate.value(m_EndDate ? m_EndDate : RPayParameters::payPeriod());

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return #FileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + curUserId() + '_' + strRem(DateTimeUtil::toStr(DateTimeUtil::utcNow()), ':');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    #define.Amount('Amount')
    private void fillBody()
    {
        int i;

        this.insertValueToSection('RecNum', linesEnum.currentKey());
        this.insertValueToSection('EmplID', conPeek(conLine, 1));
        this.insertValueToSection('Title', conPeek(conLine, 2));
        this.insertValueToSection('Rate', conPeek(conLine, 3));
        this.insertValueToSection('WorkTime', conPeek(conLine, 4));
        this.insertValueToSection('WeekTime', conPeek(conLine, 5));
        this.insertValueToSection('HolTime', conPeek(conLine, 6));

        for (i = 8; i <= #numOfColumns; i++)
        {
            this.insertValueToSection(strFmt('%1%2', #Amount, i), conPeek(conLine, (i-1)));
        }
        this.insertValueToSection('FIO', conPeek(conLine, 21));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #ReportHeader:
                this.fillReportHeader();
                break;

            case #PageNumber:
                this.fillPageNumber();
                break;

            case #PageHeader:
                this.fillPageHeader();
                break;

            case #Body:
                this.fillBody();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    private void fillDocument()
    {
        Query                   query;
        RHRMEmplTable           employee;

        m_PayParameters = RPayParameters::find();
        mapBodyLines = new Map(Types::Integer, Types::Container);

        query = queryRun.query();
        if (m_paySheetTable)
        {
            query.interactive(false);
        }
        lineNumber = 0;
        sheetSum = 0;
        rowNumber = 26;
        currentPage = 2;

        while (queryRun.next())
        {
            employee = queryRun.get(tableNum(RHRMEmplTable));
            this.createEmplLine(employee);
        }
        this.execute(#ReportHeader);
        this.execute(#PageHeader);

        linesEnum = mapBodyLines.getEnumerator();

        while (linesEnum.moveNext())
        {
            conLine = linesEnum.currentValue();
            if (this.mustCreateNewPage())
            {
                document.insertPageBreak(currentRow, curWorksheetNum);
                currentHeight = 0;
                rowNumber = 10;
                currentPage ++;
                this.execute(#PageNumber);
                this.execute(#PageHeader);
            }
           this.execute(#Body);
           rowNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    #define.NameFund('NameFund')
    private void fillPageHeader()
    {
        int i;

        for (i = 1; i <= #numOfColumns; i++)
        {
            if (m_fundNames[i] && i != 13)
            {
                this.insertValueToSection(strFmt('%1%2', #NameFund, i), m_fundNames[i]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageNumber</Name>
				<Source><![CDATA[
    private void fillPageNumber()
    {
        currentPage++;
        this.insertValueToSection('NumberOfPage', strFmt("@GLS107823", currentPage div 2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    private void fillReportHeader()
    {
        converter = RNumDateInWordConverter::construct();

        this.insertValueToSection('CompanyName', CompanyInfo::find().Name);
        this.insertValueToSection('OKPO', CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), m_DocumentDate));
        if (m_DepartmentId)
        {
            this.insertValueToSection('Department', m_DepartmentId + ' ' + RPayHRMOrganization::find(m_DepartmentId).Description);
        }

        if (m_StartDate)
        {
            this.insertValueToSection('StartDay', dayOfMth(m_StartDate));
            this.insertValueToSection('StartMonth', converter.date2strMonth(m_StartDate));
            this.insertValueToSection('StartYear', this.shortYear(m_StartDate));
        }

        if (m_EndDate)
        {
            this.insertValueToSection('EndDay', dayOfMth(m_EndDate));
            this.insertValueToSection('EndMonth', converter.date2strMonth(m_EndDate));
            this.insertValueToSection('EndYear', this.shortYear(m_EndDate));
        }

        this.insertValueToSection('DirectorPosition', enum2str(OfficialsTable_RU::findDirector().Position));
        this.insertValueToSection('DirectorName', OfficialsTable_RU::nameDirector());
        this.insertValueToSection('AccountantName', OfficialsTable_RU::nameAccountant());

        this.insertValueToSection('DocumentDay', dayOfMth(m_DocumentDate));
        this.insertValueToSection('DocumentMonth', converter.date2strMonth(m_DocumentDate));
        this.insertValueToSection('DocumentYear', this.shortYear(m_DocumentDate));

        this.insertValueToSection('DocumentNumber', m_DocumentNumber);
        this.insertValueToSection('DocumentDate', date2StrUsr(m_DocumentDate, DateFlags::None));

        this.insertValueToSection('CalcPeriodStartDate', date2StrUsr(dateStartMth(m_CalcPeriod), DateFlags::None));
        this.insertValueToSection('CalcPeriodEndDate', date2StrUsr(m_CalcPeriod, DateFlags::None));

        this.fillSum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSum</Name>
				<Source><![CDATA[
    private void fillSum()
    {
        int sheetRubles, sheetCopecks;

        sheetRubles = any2int(trunc(sheetSum));
        sheetCopecks = (sheetSum - sheetRubles) * 100;
        this.insertValueToSection('SheetSumRublesW', converter.numeralsToTxt(sheetRubles));
        this.insertValueToSection('SheetSumCopecksW', sheetCopecks);
        this.insertValueToSection('SheetSumRubles', sheetRubles);
        this.insertValueToSection('SheetSumCopecks', sheetCopecks);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        m_DepartmentId    = fieldOrganizationId.value();
        m_CalcPeriod      = endmth(fieldCalcPeriod.value());
        m_DocumentNumber  = fieldDocumentNumber.value();
        m_DocumentDate    = fieldDocumentDate.value();
        m_StartDate       = fieldStartDate.value();
        m_EndDate         = fieldEndDate.value();

        if (! m_CalcPeriod)
        {
            return checkFailed("@GLS106138");
        }

        if (! m_DocumentNumber)
        {
            return checkFailed("@GLS106139");
        }

        if (! m_DocumentDate)
        {
            return checkFailed("@GLS106140");
        }

        this.updateQuery();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTime</Name>
				<Source><![CDATA[
    private str getTime(RHRMEmplTable _empl, ReportPeriod_RU _payPeriod, RpayTimeGroupCode _timeDays, RPayShowTime _showTime)
    {
        str     timeStr;
        int     days;
        real    hours;

        if (! _timeDays)
        {
                return "";
        }

        days  = conPeek(RPayEmplTblSum::dayHourGroupSum(_payPeriod,
                                                        _empl.EmployeeId,
                                                        RPayDayHourCalc::Day,
                                                        _timeDays),1);
        hours = conPeek(RPayEmplTblSum::dayHourGroupSum(_payPeriod,
                                                        _empl.EmployeeId,
                                                        RPayDayHourCalc::Hour,
                                                        _timeDays),1);
        switch (_showTime)
        {
            case RPayShowTime::Hours:
                if (hours)
                {
                    timeStr = #num2strDec(hours);
                }
                break;
            case RPayShowTime::Days:
                if (days)
                {
                    timeStr = int2str(days);
                }
                break;
            case RPayShowTime::Both:
                if (days || hours)
                {
                    timeStr = int2str(days) + "@SYS34952" + #num2strDec(hours) + "@SYS34953";
                }
                break;
        }
        return timeStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#ReportHeader);
        this.addSection(#PageNumber);
        this.addSection(#PageHeader);
        this.addSection(#Body);
        this.addSection(#ReportFooter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    private boolean mustCreateNewPage()
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(#Body);

        if (currentPage<3)
        {
            numOfLinesTotal = #maxRowsFirst;
        }
        else
        {
            numOfLinesTotal = #maxRows;
        }

        if (rowNumber >= numOfLinesTotal)
        {
            requiredHeight += conPeek(mapSections.lookup(#ReportHeader), #posSectionHeight);
            requiredHeight += conPeek(mapSections.lookup(#ReportFooter), #posSectionHeight);
        }

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        Query                   query = new Query("@RUP1124");
        QueryBuildDataSource    qbds, qbdsNew;
        QueryBuildRange         qbr;

        super();

        this.getLast();

        qbds = query.addDataSource(tableNum(RHRMEmplTable));

        qbds = qbds.addDataSource(tableNum(RPayHistory));
        qbds.name(tableId2name(tableNum(RPayHistory)));

        qbr = qbds.addRange(fieldNum(RPayHistory, StartDate));
        qbr.status(RangeStatus::Hidden);
        qbr.value(SysQuery::range(dateNull(), m_CalcPeriod));

        qbr = qbds.addRange(fieldNum(RPayHistory, OperationType));
        qbr.status(RangeStatus::Hidden);
        qbr.value(enum2str(RHRMJournalType::Receive));

        qbr = qbds.addRange(fieldNum(RPayHistory, OperationType));
        qbr.status(RangeStatus::Hidden);
        qbr.value(enum2str(RHRMJournalType::Transfer));

        qbr = qbds.addRange(fieldNum(RPayHistory, HrmOrganizationId));
        qbr.status(RangeStatus::Hidden);
        qbr.value(m_DepartmentId);

        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.relations(true);

        qbdsNew = qbds.addDataSource(tableNum(RPayHistory));

        qbr = qbdsNew.addRange(fieldNum(RPayHistory, StartDate));
        qbr.status(RangeStatus::Hidden);
        qbr.value('((' + fieldStr(RPayHistory, StartDate) + '<=' + date2StrXpp(m_CalcPeriod) + ')' +
                  ' && (' + fieldStr(RPayHistory, StartDate) + ' > ' +
                  qbdsNew.parentDataSource().name() + '.' + fieldStr(RPayHistory, StartDate) + '))');
        qbdsNew.joinMode(JoinMode::NoExistsJoin);
        qbdsNew.addLink(fieldNum(RPayHistory, Number), fieldNum(RPayHistory, Number));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>paySheetTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPaySheetTable paySheetTable(RPaySheetTable _paySheetTable)
    {
        if (_paySheetTable)
        {
            m_paySheetTable = _paySheetTable;
        }

        return m_paySheetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shortYear</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str shortYear(date _date)
    {
        return subStr(int2str(year(_date)), 3, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayCalcPaySheet_T49);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        return SysQuery::countTotal(this.queryRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    private void updateQuery()
    {
        QueryBuildRange         qbr;
        QueryBuildDataSource    qbds;

        qbr = queryRun.query().dataSourceNo(2).findRange(fieldNum(RPayHistory, StartDate));
        if (qbr)
        {
            qbr.value(SysQuery::range(dateNull(), m_CalcPeriod));
        }
        qbds = queryRun.query().dataSourceNo(2);
        qbr  = qbds.findRange(fieldNum(RPayHistory, HrmOrganizationId));

        if (qbr)
        {
            qbr.value(m_DepartmentId);
        }

        qbr = queryRun.query().dataSourceNo(3).findRange(fieldNum(RPayHistory, StartDate));
        if (qbr)
        {
            qbr.value('((' + fieldStr(RPayHistory, StartDate) + '<=' + date2StrXpp(m_CalcPeriod) + ')' +
                      ' && (' + fieldStr(RPayHistory, StartDate) + ' > ' +
                      qbds.name() + '.' + fieldStr(RPayHistory, StartDate) + '))');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP1124";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayCalcPaySheetReport calcPaySheetReport = new RPayCalcPaySheetReport();

        if (args)
        {
            calcPaySheetReport.paySheetTable(args.record());
        }

        calcPaySheetReport.checkAndPrepareParameters();
        if (calcPaySheetReport.prompt())
        {
            calcPaySheetReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>