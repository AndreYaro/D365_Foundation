<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerStatementDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerStatementDP</c> class is the data provider for the <c>LedgerStatement</c> SSRS report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(LedgerStatement)),
    SRSReportParameterAttribute(classStr(LedgerStatementContract))
]
class LedgerStatementDP extends SrsReportDataProviderPreProcessTempDB
{
    LedgerStatementTmp LedgerStatementTmp;

    // these are member variables so they can be accessed from 2 methods without being passed as parameters
    AmountMST currentAmount[];
    AmountMST previousAmount[];

    // the number of characters in the line number value is a report specific legal requirement
    #define.ProfitAndLossLineNumberSize(2)

    #define.RoundBase(0.499999999999999)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBalance</Name>
				<Source><![CDATA[
    private AmountMST getBalance(
        LedgerBalanceMainAccountRangeAmounts _mainAccountBalance,
        MainAccountNum _mainAccountId,
        LedgerReportAccountsGroup _mainAccountRange)
    {
        AmountMST balance;

        if (_mainAccountBalance == null || (_mainAccountId == '' && _mainAccountRange == ''))
        {
            return 0.0;
        }

        if (_mainAccountId != '' && (_mainAccountRange == '' || !Global::strStartsWith(_mainAccountId, _mainAccountRange)))
        {
            _mainAccountBalance.calculateBalance(_mainAccountId);
            balance += _mainAccountBalance.getAccountingCurrencyBalance();
        }

        if (_mainAccountRange != '')
        {
            _mainAccountBalance.calculateBalance(_mainAccountRange + '*');
            balance += _mainAccountBalance.getAccountingCurrencyBalance();
        }

        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerStatementTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the temporary table for the report data provider.
    /// </summary>
    /// <returns>
    ///     The temporary table for the report data provider.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(LedgerStatementTmp))]
    public LedgerStatementTmp getLedgerStatementTmp()
    {
        select ledgerStatementTmp;
        return ledgerStatementTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerStatementTmp</Name>
				<Source><![CDATA[
    private void insertLedgerStatementTmp(
        LedgerStatementHeader _header,
        AmountMST _currentPeriodAmount,
        AmountMST _lastPeriodAmount)
    {
        int i;

        ledgerStatementTmp.MarkValue = _header.Mark;
        ledgerStatementTmp.Text = _header.Text;
        ledgerStatementTmp.Line = _header.Line;

        ledgerStatementTmp.LineNumber = int2str(_header.Line);
        for (i = strLen(ledgerStatementTmp.LineNumber); i < #ProfitAndLossLineNumberSize; i++)
        {
            ledgerStatementTmp.LineNumber = '0' + ledgerStatementTmp.LineNumber;
        }

        ledgerStatementTmp.CurrentPeriodAmount = _currentPeriodAmount;
        ledgerStatementTmp.LastPeriodAmount = _lastPeriodAmount;

        ledgerStatementTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAmounts</Name>
				<Source><![CDATA[
    private void loadAmounts(
        LedgerBalanceMainAccountRangeAmounts _currentBalance,
        LedgerBalanceMainAccountRangeAmounts _previousBalance)
    {
        LedgerStatementHeader header;
        LedgerStatementDefinition definition;
        MainAccount mainAccount;
        Query query;
        QueryBuildDataSource ds;
        QueryBuildRange range;
        QueryRun run;
        AmountMST currentTemp;
        AmountMST previousTemp;

        query = this.parmQuery();

        // has no FK
        ds = query.dataSourceTable(tableNum(LedgerStatementDefinition));
        range = SysQuery::findOrCreateRange(ds, fieldNum(LedgerStatementDefinition, LineReference));
        range.value(SysQuery::valueEmptyString());

        run = new QueryRun(query);
        while (run.next())
        {
            header = run.get(tableNum(LedgerStatementHeader)) as LedgerStatementHeader;

            definition = run.get(tableNum(LedgerStatementDefinition)) as LedgerStatementDefinition;
            mainAccount = run.get(tableNum(MainAccount)) as MainAccount;

            currentTemp =
                this.getBalance(_currentBalance, mainAccount.MainAccountId, definition.AccountsGroup);

            previousTemp =
                this.getBalance(_previousBalance, mainAccount.MainAccountId, definition.AccountsGroup);

            if (definition.ReverseSign)
            {
                currentAmount[header.Line] -= currentTemp;
                previousAmount[header.Line] -= previousTemp;
            }
            else
            {
                currentAmount[header.Line] += currentTemp;
                previousAmount[header.Line] += previousTemp;
            }
        }

        // has FK
        range = SysQuery::findOrCreateRange(ds, fieldNum(LedgerStatementDefinition, LineReference));
        range.value(SysQuery::valueNotEmptyString());

        run = new QueryRun(query);
        while (run.next())
        {
            header = run.get(tableNum(LedgerStatementHeader)) as LedgerStatementHeader;
            definition = run.get(tableNum(LedgerStatementDefinition)) as LedgerStatementDefinition;

            if (definition.ReverseSign)
            {
                currentAmount[header.Line] -= currentAmount[definition.LineReference];
                previousAmount[header.Line] -= previousAmount[definition.LineReference];
            }
            else
            {
                currentAmount[header.Line] += currentAmount[definition.LineReference];
                previousAmount[header.Line] += previousAmount[definition.LineReference];
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Customizing this class may cause problems with future upgrades to the software.
    /// </remarks>
    public void processReport()
    {
        LedgerStatementHeader header;
        LedgerBalanceMainAccountRangeAmounts currentBalance;
        LedgerBalanceMainAccountRangeAmounts previousBalance;
        LedgerStatementContract contract;
        LedgerReportUnitOption unitOption;
        TransDate previousStartDate;
        TransDate previousEndDate;
        int decimalPlaces;
        real roundFactor;
        real unitFactor;

        contract = this.parmDataContract() as LedgerStatementContract;

        unitOption = contract.parmUnitOption();
        switch (unitOption)
        {
            case LedgerReportUnitOption::One:
                decimalPlaces = 0;
                unitFactor = 1.0;
                break;

            case LedgerReportUnitOption::Thousand:
                decimalPlaces = 0;
                unitFactor = 1000.0;
                break;

            default:
                // do nothing
                decimalPlaces = -1;
        }

        currentBalance = LedgerBalanceMainAccountRangeAmounts::construct();
        currentBalance.parmIncludeRegularPeriod(true);
        currentBalance.parmAccountingDateRange(contract.parmStartDate(), contract.parmEndDate());

        previousStartDate = prevYr(contract.parmStartDate());
        previousEndDate = endMth(prevYr(contract.parmEndDate()));
        if ((previousStartDate != dateNull() || previousEndDate != dateNull()) && previousStartDate <= previousEndDate)
        {
            // Only need to calculate the previous balance if the previous date range
            // is bounded and valid. A range that includes everything is not valid for
            // the previous balance because it would double up the current balance.
            previousBalance = LedgerBalanceMainAccountRangeAmounts::construct();
            previousBalance.parmIncludeRegularPeriod(true);
            previousBalance.parmAccountingDateRange(previousStartDate, previousEndDate);
        }

        this.loadAmounts(currentBalance, previousBalance);

        while select header
            order by header.Line asc
        {
            if (decimalPlaces != -1)
            {
                switch (header.RoundType)
                {
                    case RoundOffType::RoundDown:
                        roundFactor = -(#RoundBase * unitFactor);
                        break;

                    case RoundOffType::RoundUp:
                        roundFactor = #RoundBase * unitFactor;
                        break;

                    default:
                        roundFactor = 0.0;
                        break;
                }

                currentAmount[header.Line] = decRound((currentAmount[header.Line] + roundFactor) / unitFactor, decimalPlaces);
                previousAmount[header.Line] = decRound((previousAmount[header.Line] + roundFactor) / unitFactor, decimalPlaces);
            }

            this.insertLedgerStatementTmp(header, currentAmount[header.Line], previousAmount[header.Line]);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>