<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfProdCoByStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Abstract base class for the production co/by status hierarchy
/// </summary>
/// <remarks>
/// The hierarchy and intention is based on the <c>ProdStatusType</c>
/// hierarchy for the end item of the production order.
/// The status classes are as follows:
/// <list type="table">
///   <listHeader>
///     <description>Class</description>
///     <description>Description</description>
///   </listHeader>
///   <item>
///     <description>PmfProdCoByStatus_Created</description>
///     <description>
///         Co/By product lines for production orders in status
///         ProdStatus::Created
///     </description>
///   </item>
///   <item>
///     <description>PmfProdCoByStatus_CostEstimate</description>
///     <description>
///         Co/By product lines for production orders in status
///         ProdStatus::CostEstimated
///     </description>
///   </item>
///   <item>
///     <description>PmfProdCoByStatus_Scheduled</description>
///     <description>
///         Co/By product lines for production orders in status
///         ProdStatus::Scheduled
///     </description>
///   </item>
///   <item>
///     <description>PmfProdCoByStatus_Released</description>
///     <description>
///         Co/By product lines for production orders in status
///         ProdStatus::Released
///     </description>
///   </item>
///   <item>
///     <description>PmfProdCoByStatus_StartedUp</description>
///     <description>
///         Co/By product lines for production orders in status
///         ProdStatus::StartedUp
///     </description>
///   </item>
///   <item>
///     <description>PmfProdCoByStatus_Finished</description>
///     <description>
///         Co/By product lines for production orders in status
///         ProdStatus::ReportedFinished
///     </description>
///   </item>
///   <item>
///     <description>PmfProdCoByStatus_Completed</description>
///     <description>
///         Co/By product lines for production orders in status
///         ProdStatus::Completed
///     </description>
///   </item>
/// </list>
/// </remarks>
public abstract class PmfProdCoByStatus
{
    PmfProdCoBy prodCoBy;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a Co/By production batch line record is deleted.
    /// </summary>
    public void deleting()
    {
        prodCoBy.type().deleting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a Co/By production batch line record has been deleted.
    /// </summary>
    public void deleted()
    {
        prodCoBy.type().deleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a Co/By production batch line record is inserted.
    /// </summary>
    public void inserting()
    {
        prodCoBy.type().inserting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a Co/By production batch line record has been inserted.
    /// </summary>
    public void inserted()
    {
        prodCoBy.type().inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(PmfProdCoBy _pmfProdCoBy)
    {
        prodCoBy = _pmfProdCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseDerivedCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse the Co/By product line of a derived production order
    /// </summary>
    /// <param name="_prodParmStatusDecrease">
    /// The status decrease parameters
    /// </param>
    /// <returns>
    /// true, if the reversal was successful
    /// </returns>
    public boolean reverseDerivedCoBy(ProdParmStatusDecrease _prodParmStatusDecrease)
    {
        ProdTable               derivedProdTable;
        ProdParmStatusDecrease  derivedProdParmStatusDecrease;
        boolean                 ret = true;

        if (_prodParmStatusDecrease.DerivedProd
            && prodCoBy.InventRefType == InventRefType::Production)
        {
            derivedProdTable = ProdTable::find(prodCoBy.InventRefId);

            if (derivedProdTable
                && derivedProdTable.InventRefType == InventRefType::ProdLine
                && derivedProdTable.InventRefTransId == prodCoBy.InventTransId)
            {
                if (derivedProdTable.status().isAfter(_prodParmStatusDecrease.WantedStatus))
                {
                    if (! derivedProdTable.status().runStatusDecrease(null,true))
                    {
                        ret = checkFailed(strfmt("@SYS25687",derivedProdTable.ProdId));
                    }
                    else
                    {
                        derivedProdParmStatusDecrease.data(_prodParmStatusDecrease);
                        derivedProdParmStatusDecrease.ProdId
                            = derivedProdTable.ProdId;
                        derivedProdParmStatusDecrease.ParmId = '';
                        derivedProdParmStatusDecrease.RecId  = 0;
                        derivedProdTable.status()
                            .runStatusDecrease(
                                derivedProdParmStatusDecrease,
                                false,
                                null);
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusDecrease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse the effects of the transition to a higher status
    /// </summary>
    /// <param name="_prodParmStatusDecrease">
    /// The parameters for the status decrease operation
    /// </param>
    /// <returns>
    /// true, if the decrease of the status was successful
    /// </returns>
    /// <remarks>
    /// If the status decrease should be allowed for a Co/By production batch line,
    /// the derived status class must implement this method.
    /// This base class does not allow for the decrease and throws an error
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// an exception is thrown if this method has not been overriden by a
    /// derived class
    /// </exception>
    public boolean runStatusDecrease(
        ProdParmStatusDecrease _prodParmStatusDecrease)
    {
        throw error(strfmt("@SYS22094", prodCoBy.prodTable().ProdStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a Co/By production batch line record is updated.
    /// </summary>
    public void updating()
    {
        prodCoBy.type().updating();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a Co/By production batch line record has been updated.
    /// </summary>
    /// <param name="_prodCoByOrig">
    /// The original Co/By production batch line which is updated.
    /// </param>
    public void updated(PmfProdCoBy _prodCoByOrig)
    {
        prodCoBy.type().updated(_prodCoByOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate, if a Co/By production batch line can be deleted
    /// </summary>
    /// <returns>
    /// true, if the co/by production batch line can be deleted
    /// </returns>
    /// <remarks>
    /// This base class only checks for open quality orders
    /// </remarks>
    public boolean validateDelete()
    {
        boolean ret;

        ret = InventQualityOrderTable::checkNoOpenQualityOrders(prodCoBy);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate, if a Co/By production batch line can be updated
    /// </summary>
    /// <returns>
    /// true, if the co/by production batch line can be updated
    /// </returns>
    /// <remarks>
    /// Delegates the validation to the <c>PmfProdCoByType</c> class hierarchy
    /// </remarks>
    public boolean validateWrite()
    {
        return prodCoBy.type().validateWrite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate a new ProdCoBy status object based on the current status
    /// of the production co/by product line
    /// </summary>
    /// <param name="_pmfProdCoBy">
    /// The production order co/by product line
    /// </param>
    /// <returns>
    /// The new co/by status object
    /// </returns>
    /// <remarks>
    /// <see cref="ProdStatus"/>
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// throws an exception, if the production order is in an unknown status
    /// </exception>
    [Replaceable]
    public static PmfProdCoByStatus construct(PmfProdCoBy _pmfProdCoBy)
    {
        switch (_pmfProdCoBy.prodTable().ProdStatus)
        {
            case ProdStatus::Created:
                return PmfProdCoByStatus_Created::construct(_pmfProdCoBy);
            case ProdStatus::CostEstimated:
                return PmfProdCoByStatus_CostEstimate::construct(_pmfProdCoBy);
            case ProdStatus::Scheduled:
                return PmfProdCoByStatus_Scheduled::construct(_pmfProdCoBy);
            case ProdStatus::Released:
                return PmfProdCoByStatus_Released::construct(_pmfProdCoBy);
            case ProdStatus::StartedUp:
                return PmfProdCoByStatus_StartedUp::construct(_pmfProdCoBy);
            case ProdStatus::ReportedFinished:
                return PmfProdCoByStatus_Finished::construct(_pmfProdCoBy);
            case ProdStatus::Completed:
                return PmfProdCoByStatus_Completed::construct(_pmfProdCoBy);
        }

        throw error("@SYS23417");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>