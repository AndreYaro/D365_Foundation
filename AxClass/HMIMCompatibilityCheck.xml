<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMIMCompatibilityCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to run compatibility check for hazardous material included in a load or shipment
/// </summary>
public class HMIMCompatibilityCheck
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method runs compatibility check.
    /// </summary>
    /// <param name = "_args">An <c>Args</c> object containing the passed arguments.</param>
    public static void main(Args _args)
    {
        HMIMCompatibilityCheck::construct().checkCompatibilityForShipmentOrLoad(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static HMIMCompatibilityCheck construct()
    {
        return new HMIMCompatibilityCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCompatibilityForShipmentOrLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks compatibility for shipment or load.
    /// </summary>
    /// <param name = "_whsLoadTable">The load to check</param>
    private void checkCompatibilityForShipmentOrLoad(Args _args)
    {
        WHSLoadLine             loadLine;
        InventTable             inventTable;
        HMIMItemMaterial        hmimItemMaterial;
        HMIMCompatClass         hmimCompatClass;
        HMIMCompatibilityCode   currentCompatCode, maxCompatCode;

        WHSLoadId loadId = this.findLoadId(_args);

        if (!this.validate(loadId))
        {
            throw error("@SCM:CompatibilityCheckFailed");
        }

        Counter hazardousItemsCount = this.hazardousCount(loadId);
        Counter maxCompatCount = 0;
        Counter currentCompatCount = 0;

        boolean compatibilityCheckItemWithMultipleRegulationsFlightEnabled = HMIMCompatibilityCheckItemWithMultipleRegulationsFlight::instance().isEnabled();

        HMIMRegCode regulationCode;

        if (compatibilityCheckItemWithMultipleRegulationsFlightEnabled)
        {
            WHSLoadTable load = WHSLoadTable::find(loadId);
            regulationCode = load.HMIMGetRegCode();
        }

        // Identify whether any compatibility group has all the hazardous material's divisions set up
        while select loadLine
            where loadLine.LoadId == loadId
        join inventTable
            where inventTable.ItemId == loadLine.ItemId
                && inventTable.HMIMIndicator == NoYes::Yes
        outer join hmimItemMaterial
            where hmimItemMaterial.itemid == inventTable.ItemId
                && (!compatibilityCheckItemWithMultipleRegulationsFlightEnabled || hmimItemMaterial.RegCode == regulationCode)
        outer join hmimCompatClass
            order by hmimCompatClass.CompatibilityCode
                where hmimCompatClass.DivisionCode == hmimItemMaterial.DivisionCode
        {
            if (!hmimItemMaterial.DivisionCode)
            {
                throw error(strFmt("@SCM:DivisionSetupError", loadLine.ItemId));
            }
            else if (!hmimCompatClass.RecId)
            {
                throw error(strFmt("@SCM:CompatibilityGroupCheckError", hmimItemMaterial.DivisionCode, loadLine.ItemId));
            }
            else if (currentCompatCode == '' || currentCompatCode == hmimCompatClass.CompatibilityCode)
            {
                currentCompatCode = hmimCompatClass.CompatibilityCode;
                currentCompatCount++;
            }
            else
            {
                currentCompatCode = hmimCompatClass.CompatibilityCode;
                currentCompatCount = 1;
            }

            //keep track of compatibility group & its items
            if (currentCompatCount > maxCompatCount)
            {
                maxCompatCode = currentCompatCode;
                maxCompatCount = currentCompatCount;

                if (maxCompatCount == hazardousItemsCount)
                {
                    info(strFmt("@SCM:CompatibilityConfirmation", maxCompatCode));
                    return;
                }
            }
        }
  
        throw error("@SCM:NoCompatibilityConfirmation");
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate(WHSLoadId _loadId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method finds the loadid required for compatibility check
    /// </summary>
    /// <param name = "_args">An <c>Args</c> object containing the passed arguments.</param>
    private WHSLoadId findLoadId(Args _args)
    {
        switch (_args.record().TableID)
        {
            case tableNum(WHSShipmentTable):
                WHSShipmentTable shipmentTable  = _args.record();
                return shipmentTable.loadId;

            case tableNum(WHSLoadTable):
                WHSLoadTable whsLoadTable   = _args.record();
                return whsLoadTable.LoadId;

            default:
                return this.findDefaultLoadId(_args);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is replaceable. It throws error and is the default case for findLoadID method
    /// </summary>
    /// <param name = "_args">An <c>Args</c> object containing the passed arguments.</param>
    [Replaceable]
    protected WHSLoadId findDefaultLoadId(Args _args)
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hazardousCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method validates whether compatibility check is required for the Load
    /// </summary>
    /// <param name = "_loadId">Load to validate</param>
    private int hazardousCount(WHSLoadId _loadId)
    {
        WHSLoadLine loadLine;
        InventTable inventTable;

        select count(RecId) from loadLine
            join inventTable
                where loadLine.ItemId == inventTable.ItemId
                    && loadLine.LoadId == _loadId
                    && inventTable.HMIMIndicator == NoYes::Yes;

        if (!loadLine.RecId)
        {
            throw error("@SCM:CompatibilityCheckNoItemError");
        }

        else if (loadLine.RecId == 1)
        {
            throw error("@SCM:CompatibilityCheckOneItemError");
        }

        return any2Int(loadLine.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>