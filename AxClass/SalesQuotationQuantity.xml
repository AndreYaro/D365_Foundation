<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationQuantity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesQuotationQuantity
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcQtyInvent</Name>
				<Source><![CDATA[
    protected container calcQtyInvent(Common        _common,
                                      SalesUpdate   _specQty             = SalesUpdate::All,
                                      InventQty     _qty                 = naReal(),
                                      boolean       _creditRemaining     = false,
                                      boolean       _calcRemaining       = true)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtySales</Name>
				<Source><![CDATA[
    protected container calcQtySales(Common         _common,
                                     SalesUpdate    _specQty             = SalesUpdate::All,
                                     SalesQty       _qty                 = naReal(),
                                     boolean        _creditRemaining     = false,
                                     boolean        _calcRemaining       = true)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantities.
    /// </summary>
    /// <param name="_common">
    /// The transaction record.
    /// </param>
    /// <param name="_specQty">
    /// The quantity spec to process.
    /// </param>
    /// <param name="_qty">
    /// The catch weight quantity.
    /// </param>
    /// <param name="_creditRemaining">
    /// A Boolean value that indicates whether the remaining quantity is to be credited.
    /// </param>
    /// <param name="_calcRemaining">
    /// A Boolean value that indicates whether the remaining quantities should be calculated.
    /// </param>
    /// <returns>
    /// The container that contains catch weight quantities.
    /// </returns>
    protected container pdsCWCalcQty(
        Common      _common,
        SalesUpdate _specQty            = SalesUpdate::All,
        InventQty   _qty                = naReal(),
        boolean     _creditRemaining    = false,
        boolean     _calcRemaining      = true)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantities.
    /// </summary>
    /// <param name="_common">
    /// The transaction record.
    /// </param>
    /// <param name="_specQty">
    /// The quantity spec to process.
    /// </param>
    /// <param name="_qty">
    /// The catch weight quantity.
    /// </param>
    /// <param name="_creditRemaining">
    /// A Boolean value that indicates whether the remaining quantity is to be credited.
    /// </param>
    /// <returns>
    /// The container that contains the catch weight quantities.
    /// </returns>
    public container pdsCWQty(
        Common      _common,
        SalesUpdate _specQty            = SalesUpdate::All,
        InventQty   _qty                = naReal(),
        boolean     _creditRemaining    = false)
    {
        return this.pdsCWCalcQty(_common, _specQty, _qty, _creditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the remaining quantity in catch weight units.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The order line for which to calculate the remaining quantity.
    /// </param>
    /// <param name="_salesQuotationParmLine">
    /// The parameter order line for which to calculate the remaining quantity.
    /// </param>
    /// <returns>
    /// The remaining quantity in catch weight units.
    /// </returns>
    public PdsCWInventQty pdsCWQtyRemainPhysical(
        SalesQuotationLine      _salesQuotationLine,
        SalesQuotationParmLine  _salesQuotationParmLine)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    public container qtyInvent(Common         _common,
                               SalesUpdate    _specQty             = SalesUpdate::All,
                               InventQty      _qty                 = naReal(),
                               boolean        _creditRemaining     = false)
    {
        return this.calcQtyInvent(_common, _specQty, _qty, _creditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyRemainInventPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the remaining quantity in inventory units.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///    The order line for which to calculate the remaining quantity.
    /// </param>
    /// <param name="_salesQuotationParmLine">
    ///    The parm order line for which to calculate the remaining quantity.
    /// </param>
    /// <returns>
    ///    The remaining quantity in inventory units.
    /// </returns>
    public InventQty qtyRemainInventPhysical(SalesQuotationLine         _salesQuotationLine,
                                             SalesQuotationParmLine     _salesQuotationParmLine)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyRemainSalesPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the remaining quantity in sales units.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///    The order line for which to calculate the remaining quantity.
    /// </param>
    /// <param name="_salesQuotationParmLine">
    ///    The parm order line for which to calculate the remaining quantity.
    /// </param>
    /// <returns>
    ///    The remaining quantity in sales units.
    /// </returns>
    public SalesQty qtyRemainSalesPhysical(SalesQuotationLine         _salesQuotationLine,
                                           SalesQuotationParmLine     _salesQuotationParmLine)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtySales</Name>
				<Source><![CDATA[
    public container qtySales(Common          _common,
                              SalesUpdate     _specQty             = SalesUpdate::All,
                              SalesQty        _qty                 = naReal(),
                              boolean         _creditRemaining     = false)
    {
        return this.calcQtySales(_common, _specQty, _qty, _creditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesQuotationQuantity construct(DocumentStatus  _document)
    {
        switch (_document)
        {
            case DocumentStatus::Quotation          :   return new SalesQuotationQuantity_Quotation  ();
            case DocumentStatus::Confirmation       :   return new SalesQuotationQuantity_Confirm    ();

            default : throw error(strfmt("@SYS19306",funcname()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>