<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostCalculationCompareChartViewModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostCalculationCompareChartViewModel</c> class is a ViewModel for charts that show comparison of cost calculations.
/// </summary>
public class CostCalculationCompareChartViewModel extends CostCompareChartViewModel
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostCalculationCompareChartViewModel construct()
    {
        return new CostCalculationCompareChartViewModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCostCalculationCompareChartViewModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>CostCalculationCompareChartViewModel</c> class based on the data derived from another
    /// <c>CostCalculationCompareChartViewModel</c> class.
    /// </summary>
    /// <param name = "_CostCalculationCompareChartViewModel">The <c>CostCalculationCompareChartViewModel</c> class from which to extract the data for the new <c>CostCalculationCompareChartViewModel</c> instance.</param>
    /// <returns></returns>
    public static CostCalculationCompareChartViewModel newFromCostCalculationCompareChartViewModel(CostCalculationCompareChartViewModel _CostCalculationCompareChartViewModel)
    {
        var costCalculationCompareChartViewModel = new CostCalculationCompareChartViewModel();
        costCalculationCompareChartViewModel.chartData = _costCalculationCompareChartViewModel.parmChartData();
        return costCalculationCompareChartViewModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initChartData</Name>
				<Source><![CDATA[
    protected void initChartData(CostICompareArgs _costCompareArgs)
    {
        if (!chartData)
        {
            var costRollupCompareArgs = _costCompareArgs as CostRollupCompareArgs;

            if (!costRollupCompareArgs)
            {
                throw error(error::wrongUseOfFunction(funcName()));
            }

            CostCalculationCompareDataProvider model = CostCalculationCompareDataProvider::construct();
            model.init(costRollupCompareArgs);

            chartData = CostCalculationCompareChartModel::prepareChartData(model.loadData());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDrilldownBaseQuery</Name>
				<Source><![CDATA[
    protected Query getDrilldownBaseQuery(str _rangeValue)
    {
        return CostCalculationCompareChartModel::buildQueryForDrilldown(drillLevel, _rangeValue, isChartUnitCostBased);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChartData</Name>
				<Source><![CDATA[
    public CostCompareChartTmp parmChartData()
    {
        return chartData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>