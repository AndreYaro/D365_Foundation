<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPayAdjustment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgPayAdjustment</c> class is used to calculate pay adjustments during calculation of pay.
/// </summary>
class JmgPayAdjustment
{
    JmgSeconds  payAdjSeconds;
    JmgDate     payAdjLoopDate;
    JmgSeconds  payAdjNormTimeSum;
    JmgSeconds  payAdjPaidTimeSum;

    Map         paySecondsMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static JmgPayAdjustment construct()
    {
        return new JmgPayAdjustment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>countNormAndPayTimeInPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Counts the amount of normal time and pay time in the specified period.
    /// </summary>
    /// <param name="_projPeriodLine">
    ///    The period for which to count time.
    /// </param>
    /// <param name="_worker">
    ///    The ID of the worker for which to count time.
    /// </param>
    void countNormAndPayTimeInPeriod(ProjPeriodLine _projPeriodLine,JmgWorkerRecId _worker)
    {
        JmgStampJournalTable journalTable;
        while select ProfileSeconds, PaySeconds, PayOverTimeSeconds
            from  journalTable index hint EmplDayIdx
            where journalTable.Worker      == _worker
               && journalTable.ProfileDate >= _projPeriodLine.PeriodFrom
               && journalTable.ProfileDate <= _projPeriodLine.PeriodTo
        {
            payAdjNormTimeSum += journalTable.ProfileSeconds;
            payAdjPaidTimeSum += max(0,(journalTable.PaySeconds-journalTable.PayOverTimeSeconds));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>countPayQtyInPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the pay quantity in the specified period for the specified worker.
    /// </summary>
    /// <param name="_projPeriodLine">
    ///    The period for which to calculate pay quantity.
    /// </param>
    /// <param name="_payAdjSetup">
    ///    The pay adjustment setup to use when calculating pay quantity.
    /// </param>
    /// <param name="_worker">
    ///    The ID of the worker for which to count pay quantity.
    /// </param>
    /// <returns>
    ///    The number of calculated pay seconds.
    /// </returns>
    JmgSeconds countPayQtyInPeriod(ProjPeriodLine _projPeriodLine, JmgPayAdjustSetup _payAdjSetup, JmgWorkerRecId _worker)
    {
        // Sum pay quantity on adjustment paytype in period
        JmgSeconds cntSum;

        JmgPayEvents    payEvents;
        while select PaySeconds
            from  payEvents index hint EmplDateTypeIdx
            where payEvents.Worker      == _worker
               && payEvents.ProfileDate >= _projPeriodLine.PeriodFrom
               && payEvents.ProfileDate <= _projPeriodLine.PeriodTo
               && payEvents.PayCostType == _payAdjSetup.PayCostType
        {
            cntSum +=  payEvents.PaySeconds;
        }

        return cntSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPrevCorrections</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clear pay adjustments that were created by previous pay calculations in the period.
    /// </summary>
    /// <param name="_payAdjAgreement">
    ///    The pay agreement for which to cleare adjustments.
    /// </param>
    /// <param name="_payAdjDate">
    ///    The date for which to cleare adjustments.
    /// </param>
    /// <param name="_worker">
    ///    The ID of the worker for which to clear adjustments.
    /// </param>
    void clearPrevCorrections(JmgPayAgreement _payAdjAgreement, JmgDate _payAdjDate, JmgWorkerRecId _worker)
    {
        JmgPayEvents            payEvents;
        JmgPayAdjustSetup       payAdjSetup;
        ProjPeriodLine          projPeriodLine;

        ttsbegin;

        delete_from payEvents
        where payEvents.Worker              == _worker
           && payEvents.Correction          == NoYes::Yes
        exists join projPeriodLine
            where projPeriodLine.PeriodFrom <= payEvents.ProfileDate
               && projPeriodLine.PeriodTo   >= payEvents.ProfileDate
               && projPeriodLine.PeriodFrom <= _payAdjDate
               && projPeriodLine.PeriodTo   >= _payAdjDate
        exists join payAdjSetup
            where payAdjSetup.PayAgreement  == _payAdjAgreement
               && payAdjSetup.ProjPeriodId  == projPeriodLine.PeriodId
               && payAdjSetup.Adjust        == NoYes::Yes
               && payAdjSetup.RecId         == payEvents.PayAdjustSetupRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a pay adjustment to the database.
    /// </summary>
    /// <param name="_payAdjSetup">
    ///    The pay adjustment setup for which to create a pay adjustment.
    /// </param>
    /// <param name="_payAdjustCType">
    ///    The pay cost type to assign to the pay adjustment.
    /// </param>
    /// <param name="_payEvent">
    ///    The <c>JmgPayEvents</c> record to which to link the adjustment.
    /// </param>
    /// <param name="_payAdjustQty">
    ///    The amount to assign to the adjustment.
    /// </param>
    void insertAdjustment(
        JmgPayAdjustSetup       _payAdjSetup,
        JmgPayAdjustCostType    _payAdjustCType,
        JmgPayEvents            _payEvent,
        JmgSeconds              _payAdjustQty)
    {
        if (_payAdjustQty)
        {
            JmgPayEvents eventsParent = this.initializeParentPayEvents(_payAdjSetup, _payEvent, _payAdjustQty);
            eventsParent.insert();

            // create child for adjustment
            if (_payAdjustCType.SetoffPayCostType)
            {
                JmgPayEvents eventsChild = this.initializeChildPayEvents(_payAdjSetup, _payAdjustCType, _payEvent, _payAdjustQty, eventsParent);
                eventsChild.insert();
                // update child record reference on father
                eventsParent.SetOffChild    = eventsChild.RecId;
                eventsParent.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>payAdjust</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates pay adjustments for the specified worker at the specified date and pay agreement.
    /// </summary>
    /// <param name="_worker">
    ///    The ID of the worker for which to create adjustments.
    /// </param>
    /// <param name="_payAdjDate">
    ///    The date for which to create adjustments.
    /// </param>
    /// <param name="_payAdjAgreement">
    ///    The pay agreement for which to create adjustments.
    /// </param>
    void payAdjust(JmgWorkerRecId _worker, JmgDate _payAdjDate, JmgPayAgreement _payAdjAgreement)
    {
        JmgSeconds          payAdjCTypeSum;
        JmgSeconds          payAdjSecondsCount;
        JmgPayAdjustSetup   payAdjSetup;
        ProjPeriodLine      projPeriodLine;

        paySecondsMap = new Map(Types::Int64, Types::Integer);

        // clear previous corrections
        this.clearPrevCorrections(_payAdjAgreement, _payAdjDate, _worker);

        while select payAdjSetup
            order by LineNum asc
            where payAdjSetup.PayAgreement == _payAdjAgreement
               && payAdjSetup.Adjust == NoYes::Yes
            join firstonly projPeriodLine
                where projPeriodLine.PeriodId   == payAdjSetup.ProjPeriodId
                   && projPeriodLine.PeriodFrom <= _payAdjDate
                   && projPeriodLine.PeriodTo   >= _payAdjDate
        {
            if (payAdjSetup.AdjustType == JmgPayAdjustType::PayType && payAdjSetup.PayCostType)
            {
                payAdjCTypeSum = this.countPayQtyInPeriod(projPeriodLine, payAdjSetup, _worker);
            }

            // Count paid time and norm time in period
            if (payAdjSetup.AdjustType == JmgPayAdjustType::PayTime && payAdjSetup.AdjustCriteria >=JmgPayAdjustCriteria::OverNormTime)
            {
                this.countNormAndPayTimeInPeriod(projPeriodLine, _worker);
            }
            payAdjSecondsCount = (payAdjSetup.AdjustType == JmgPayAdjustType::PayType) ? payAdjCTypeSum : payAdjPaidTimeSum;

            // set adjustment seconds

            switch (payAdjSetup.AdjustCriteria)
            {
                case JmgPayAdjustCriteria::OverLimit:
                    payAdjSeconds = max(0, payAdjSecondsCount - (payAdjSetup.AdjustLimit * 3600) );
                    break;

                case JmgPayAdjustCriteria::UnderLimit:
                    payAdjSeconds = max(0,(payAdjSetup.AdjustLimit * 3600)- payAdjSecondsCount);
                    break;

                case JmgPayAdjustCriteria::OverNormTime:
                    payAdjSeconds = max(0,payAdjSecondsCount - payAdjNormTimeSum);
                    break;

                case JmgPayAdjustCriteria::UnderNormTime:
                    payAdjSeconds = max(0, payAdjNormTimeSum - payAdjSecondsCount);
                    break;
            }

            // Adjust for the full period
            if (payAdjSetup.AdjustPeriod == JmgPayAdjustPeriod::Period)
            {
                this.payAdjustLoop(payAdjSetup, projPeriodLine.PeriodFrom, projPeriodLine.PeriodTo, _worker);
            }
            // Adjust per day in the period
            else if (payAdjSetup.AdjustPeriod == JmgPayAdjustPeriod::Dag)
            {
                payAdjLoopDate = projPeriodLine.PeriodTo;
                while (payAdjLoopDate >= projPeriodLine.PeriodFrom)
                {
                    this.payAdjustLoop(payAdjSetup,payAdjLoopDate, payAdjLoopDate, _worker);
                    payAdjLoopDate --;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>payAdjustLoop</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates pay adjustments for the specified worker and time period.
    /// </summary>
    /// <param name="_payAdjSetup">
    ///    The pay adjustment setup to use when creating pay adjustment.
    /// </param>
    /// <param name="_periodStart">
    ///    The start of the period for which to create adjustments.
    /// </param>
    /// <param name="_periodEnd">
    ///    The end date of the period for which to create adjustments.
    /// </param>
    /// <param name="_worker">
    ///    The ID of the worker for which to create adjustments.
    /// </param>
    void payAdjustLoop(JmgPayAdjustSetup _payAdjSetup, JmgDate _periodStart, JmgDate _periodEnd, JmgWorkerRecId _worker)
    {
        JmgPayAdjustCostType    payAdjustCtype;
        JmgSeconds              paySecondsRemain;

        while select payAdjustCtype
            order by payAdjustCtype.LineNum
            where payAdjustCtype.AdjustId == _payAdjSetup.AdjustId
        {
            JmgPayEvents payEvents;
            SysDaQueryObject queryObject = this.buildPayEventsForPayAdjustmentQuery(payEvents, payAdjustCtype, _payAdjSetup, _periodStart, _periodEnd, _worker);
            SysDaSearchObject searchObject = new SysDaSearchObject(queryObject);
            SysDaSearchStatement searchStatement = new SysDaSearchStatement();

            while (searchStatement.nextRecord(searchObject))
            {
                if (!paySecondsMap.exists(payEvents.RecId))
                {
                    paySecondsRemain = payEvents.PaySeconds;
                    paySecondsMap.insert(payEvents.RecId, paySecondsRemain);
                }
                else
                {
                    paySecondsRemain = paySecondsMap.lookup(payEvents.RecId);
                }

                // check correction Qty
                if (payAdjSeconds >= paySecondsRemain)
                {
                    this.insertAdjustment(_payAdjSetup, payAdjustCtype, payEvents, paySecondsRemain);
                    paySecondsMap.insert(payEvents.RecId, 0);
                    if (_payAdjSetup.mustAdjustSeconds())
                    {
                        payAdjSeconds -= paySecondsRemain;
                    }
                }
                else
                {
                    this.insertAdjustment(_payAdjSetup, payAdjustCtype, payEvents, payAdjSeconds);
                    paySecondsMap.insert(payEvents.RecId, paySecondsRemain - payAdjSeconds);
                    if (_payAdjSetup.mustAdjustSeconds())
                    {
                        payAdjSeconds = 0;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPayEventsForPayAdjustmentQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for pay events.
    /// </summary>
    /// <param name = "_payEvents">The pay events object to build the query for.</param>
    /// <param name = "_payAdjustCtype">The pay adjust cost type.</param>
    /// <param name = "_payAdjSetup">The pay adjustment types.</param>
    /// <param name = "_periodStart">The period start date.</param>
    /// <param name = "_periodEnd">The period end date.</param>
    /// <param name = "_worker">A worker recId.</param>
    /// <returns>
    /// A query object.
    /// </returns>
    protected SysDaQueryObject buildPayEventsForPayAdjustmentQuery(JmgPayEvents _payEvents, JmgPayAdjustCostType _payAdjustCtype, JmgPayAdjustSetup _payAdjSetup, JmgDate _periodStart, JmgDate _periodEnd, JmgWorkerRecId _worker)
    {
        SysDaQueryObject query = new SysDaQueryObject(_payEvents);

        query.whereClause(
            new SysDaEqualsExpression(new SysDaFieldExpression(_payEvents, fieldStr(JmgPayEvents, Worker)), new SysDaValueExpression(_worker))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_payEvents, fieldStr(JmgPayEvents, PayCostType)), new SysDaValueExpression(_payAdjustCtype.PayCostType)))
            .and(new SysDaGreaterThanOrEqualsExpression(new SysDaFieldExpression(_payEvents, fieldStr(JmgPayEvents, ProfileDate)), new SysDaValueExpression(_periodStart)))
            .and(new SysDaLessThanOrEqualsExpression(new SysDaFieldExpression(_payEvents, fieldStr(JmgPayEvents, ProfileDate)), new SysDaValueExpression(_periodEnd)))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_payEvents, fieldStr(JmgPayEvents, Correction)), new SysDaValueExpression(NoYes::No)) 
                .or(new SysDaEqualsExpression(new SysDaValueExpression(_payAdjSetup.AdjustCriteria), new SysDaValueExpression(JmgPayAdjustCriteria::OverLimit))
                    .and(new SysDaGreaterThanOrEqualsExpression(new SysDaFieldExpression(_payEvents, fieldStr(JmgPayEvents, PaySeconds)), new SysDaValueExpression(0))))));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeParentPayEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the pay event parent record for adjustment.
    /// </summary>
    /// <param name = "_payAdjSetup">The pay adjustment setup for which to create a pay adjustment.</param>
    /// <param name = "_payEvent">The <c>JmgPayEvents</c> record to which to link the adjustment.</param>
    /// <param name = "_payAdjustQty">The amount to assign to the adjustment.</param>
    /// <returns>The <c>JmgPayEvents</c> table buffer.</returns>
    protected JmgPayEvents initializeParentPayEvents(JmgPayAdjustSetup _payAdjSetup,
                                                     JmgPayEvents      _payEvent,
                                                     JmgSeconds        _payAdjustQty)
    {
        JmgPayEvents    eventsParent;

        // create parent record for adjustment
        eventsParent.Worker         = _payEvent.Worker;
        eventsParent.ProfileDate    = _payEvent.ProfileDate;
        eventsParent.PaySpecType    = JmgPaySpecTypeEnum::Adjust;
        eventsParent.PaySeconds     = -_payAdjustQty;
        eventsParent.PayCostType    = _payEvent.PayCostType;
        eventsParent.Correction     = NoYes::Yes;
        eventsParent.PayAdjustSetupRecId = _payAdjSetup.RecId;
        // Find Rate for parent record
        eventsParent.Price          = JmgPayEmployee::getPayCostTypePrice(eventsParent.PayCostType, eventsParent.Worker, _payEvent.ProfileDate);
        eventsParent.DefaultDimension = _payEvent.copyDimension(_payEvent.DefaultDimension);

        return eventsParent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeChildPayEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the pay event child record for adjustment.
    /// </summary>
    /// <param name = "_payAdjSetup">The pay adjustment setup for which to create a pay adjustment.</param>
    /// <param name = "_payAdjustCType">The pay cost type to assign to the pay adjustment.</param>
    /// <param name = "_payEvent">The <c>JmgPayEvents</c> record to which to link the adjustment.</param>
    /// <param name = "_payAdjustQty">The amount to assign to the adjustment.</param>
    /// <param name = "_eventsParent">The event parent record.</param>
    /// <returns>The <c>JmgPayEvents</c> table buffer.</returns>
    protected JmgPayEvents initializeChildPayEvents(JmgPayAdjustSetup    _payAdjSetup,
                                                    JmgPayAdjustCostType _payAdjustCType,
                                                    JmgPayEvents         _payEvent,
                                                    JmgSeconds           _payAdjustQty,
                                                    JmgPayEvents         _eventsParent)
    {
        JmgPayEvents    eventsChild;

        eventsChild.Worker          = _payEvent.Worker;
        eventsChild.ProfileDate     = _payEvent.ProfileDate;
        eventsChild.PaySpecType     = JmgPaySpecTypeEnum::Adjust;
        eventsChild.PaySeconds      = _payAdjustQty;
        eventsChild.PayCostType     = _payAdjustCType.SetoffPayCostType;
        eventsChild.Correction      = NoYes::Yes;
        eventsChild.PayAdjustSetupRecId = _payAdjSetup.RecId;
        eventsChild.SetOffParentTableId = _eventsParent.TableId;
        eventsChild.SetOffParent    = _eventsParent.RecId;
        // Find Rate for child record
        eventsChild.Price           = JmgPayEmployee::getPayCostTypePrice(eventsChild.PayCostType,eventsChild.Worker, _payEvent.ProfileDate);
        eventsChild.DefaultDimension = _payEvent.copyDimension(_payEvent.DefaultDimension);
  
        return eventsChild;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>