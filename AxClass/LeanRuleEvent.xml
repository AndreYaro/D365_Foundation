<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanRuleEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanRuleEvent extends LeanRuleVariable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowManualKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the replenishment strategy allows manual kanbans to be created.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean allowManualKanbans()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromSalesLineEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets related fields by using the sales line event value.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void defaultFromSalesLineEvent()
    {
        if (leanRuleData.parmKanbanRuleEvent().SalesLineEvent == KanbanSalesLineEventType::AutomaticWithCTP)
        {
            KanbanRule kanbanRule = leanRuleData.parmKanbanRule();
            kanbanRule.TriggerLevel = 1;
            leanRuleData.parmKanbanRule(kanbanRule);

            KanbanRuleEvent kanbanRuleEvent = leanRuleData.parmKanbanRuleEvent();
            kanbanRuleEvent.SourceRequirementReservation = NoYes::Yes;
            kanbanRuleEvent.InventoryReservationPolicy = LeanInventoryReservationPolicy::Never;
            leanRuleData.parmKanbanRuleEvent(kanbanRuleEvent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the <c>Kanban</c>.
    /// </summary>
    /// <param name="_kanban">
    /// The <c>Kanban</c> to be duplicated.
    /// </param>
    /// <remarks>
    /// This method opens the <c>KanbanCreate</c> dialog box.
    /// </remarks>
    public void duplicateKanban(Kanban _kanban)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a rule of the required type in the entities hierarchy of the rule.
    /// </summary>
    /// <remarks>
    ///    This method is called by the <c>LeanRulesEngine::createRule</c> method.
    /// </remarks>
    public void insert()
    {
        KanbanRuleEvent kanbanRuleEvent = leanRuleData.parmKanbanRuleEvent();

        ttsbegin;

        // first insert the parent record
        super();

        // initialize link to parent
        kanbanRuleEvent.ParentRecId = leanRuleData.parmKanbanRuleVariable().RecId;

        // insert the corresponding record
        kanbanRuleEvent.doInsert();
        leanRuleData.parmKanbanRuleEvent(kanbanRuleEvent);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Occurs when the field value is changed.
    /// </summary>
    /// <param name="_tableId">
    ///    The ID of the table that contains the updated field.
    /// </param>
    /// <param name="_fieldId">
    ///    The ID of the field that has changed.
    /// </param>
    public void modifiedField(tableId _tableId, fieldId _fieldId)
    {
        super(_tableId, _fieldId);

        if (   _tableId == tableNum(KanbanRuleEvent)
            && _fieldId == fieldNum(KanbanRuleEvent, SalesLineEvent))
        {
            this.defaultFromSalesLineEvent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultSiteOrInventoryOrderSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the defaults for the minimum product quantity, depending on the inventory order settings.
    /// </summary>
    public void setDefaultSiteOrInventoryOrderSettings()
    {
        super();

        if (leanRuleData)
        {
            KanbanRuleVariable kanbanRuleVariable = leanRuleData.parmKanbanRuleVariable();
            kanbanRuleVariable.MinimumProductQuantity = 0;
            leanRuleData.parmKanbanRuleVariable(kanbanRuleVariable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the record in the database for the rule.
    /// </summary>
    public void update()
    {
        KanbanRuleEvent kanbanRuleEvent = leanRuleData.parmKanbanRuleEvent();

        ttsbegin;
        // update parent
        super();

        // update the corresponding record
        kanbanRuleEvent.selectForUpdate(true);
        kanbanRuleEvent.doUpdate();
        leanRuleData.parmKanbanRuleEvent(kanbanRuleEvent);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a particular type object is written.
    /// </summary>
    /// <param name="_showWarnings">
    /// A Boolean value that indicates whether optional warnings should be shown.
    /// </param>
    /// <returns>
    /// true if the validation was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Errors are thrown as part of this validation.
    /// </remarks>
    public boolean validateWrite(boolean _showWarnings = false)
    {
        LeanRuleData originalData = leanRuleData.orig();

        boolean ret = super();

        if (   ret
            && _showWarnings
            && (!originalData
            ||  originalData.parmKanbanRuleEvent().SalesLineEvent != leanRuleData.parmKanbanRuleEvent().SalesLineEvent)
            && (leanRuleData.parmKanbanRuleEvent().SalesLineEvent == KanbanSalesLineEventType::Automatic
            ||  leanRuleData.parmKanbanRuleEvent().SalesLineEvent == KanbanSalesLineEventType::AutomaticWithCTP))
        {
            warning(strFmtLB("@SYS328242"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static LeanRuleEvent construct()
    {
        return new LeanRuleEvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliverNowCoveredByOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the line quantity is already covered by inventory on hand.
    /// </summary>
    /// <param name="_salesParmLine">
    /// The <c>SalesParmLine</c> record veing verified.
    /// </param>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record being verified.
    /// </param>
    /// <returns>
    /// true if the line quantity is covered by on hand, otherwise false.
    /// </returns>
    private static boolean deliverNowCoveredByOnHand(
                                SalesParmLine _salesParmLine,
                                SalesLine _salesLine)
    {
        InventMovement      inventMovement  = InventMovement::construct(_salesLine);
        InventTransIdSum    inventSum       = inventMovement.transIdSum();
        InventQty           availableQty    = abs(inventSum.reservPhysical());
        InventQty           requiredQty     = _salesParmLine.InventNow;

        if (requiredQty <= 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return availableQty > 0
            && availableQty - requiredQty >= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSalesLineKanbanPegging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a sales line has any kanban pegging.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record buffer to validate.
    /// </param>
    /// <returns>
    /// true if the kanban has at least one kanban pegging; otherwise, false.
    /// </returns>
    public static boolean hasSalesLineKanbanPegging(SalesLine _salesLine)
    {
        boolean                         anyKanbanChildFound = false;

        ReqPeggingTreeNodeSalesLine reqPeggingTreeNodeSalesLine = ReqPeggingTreeNode::newStandard(_salesLine);
        List childrenNodes = reqPeggingTreeNodeSalesLine.listChildren();

        ListEnumerator le = childrenNodes.getEnumerator();
        while (!anyKanbanChildFound && le.moveNext())
        {
            Common common = le.current();
            if (common is Kanban)
            {
                anyKanbanChildFound = true;
            }
        }

        return anyKanbanChildFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateKanbanPeggingReceived</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to validate the pegging of the kanban.
    /// </summary>
    /// <param name="_kanban">
    ///    The pegged <c>Kanban</c> record buffer to validate.
    /// </param>
    /// <param name="_kanbanJob">
    ///    The parent kanban job that is changing status.
    /// </param>
    /// <param name="_targetStatus">
    ///    The target status.
    /// </param>
    /// <returns>
    ///    true if the pegging should be validated; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean mustValidateKanbanPeggingReceived(
        Kanban              _kanban,
        KanbanJob           _kanbanJob,
        LeanKanbanJobStatus _targetStatus)
    {
        boolean             validatePegging = false;

        KanbanRuleEvent kanbanRuleEvent = KanbanRuleEvent::findKanbanRule(_kanban.kanbanRule().RecId);

        if (kanbanRuleEvent)
        {
            switch (kanbanRuleEvent.DependentPeggedRequirementStatus)
            {
                case LeanDependentPeggedRequirementStatus::None:
                    validatePegging = false;
                    break;

                case LeanDependentPeggedRequirementStatus::Picking:
                    validatePegging =    _targetStatus     >= LeanKanbanJobStatus::Prepared
                                      && _kanbanJob.Status  < LeanKanbanJobStatus::Prepared;
                    break;

                case LeanDependentPeggedRequirementStatus::Start:
                    validatePegging =    _targetStatus     >= LeanKanbanJobStatus::InProgress
                                      && _kanbanJob.Status  < LeanKanbanJobStatus::InProgress;
                    break;

                case LeanDependentPeggedRequirementStatus::End:
                    validatePegging =    _targetStatus     == LeanKanbanJobStatus::Completed;
                    break;

                case LeanDependentPeggedRequirementStatus::Finish:
                    validatePegging =    _targetStatus     == LeanKanbanJobStatus::Completed
                                      && _kanbanJob.kanban().lastKanbanJob().RecId == _kanbanJob.RecId;
                    break;
            }
        }

        return validatePegging;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateSalesLinePeggingReceived</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to validate the pegging of the sales line.
    /// </summary>
    /// <param name="_kanban">
    ///    The pegged <c>Kanban</c> record buffer to validate.
    /// </param>
    /// <returns>
    ///    true if the pegging should be validated; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean mustValidateSalesLinePeggingReceived(Kanban _kanban)
    {
        boolean             validatePegging = false;

        KanbanRuleEvent kanbanRuleEvent = KanbanRuleEvent::findKanbanRule(_kanban.kanbanRule().RecId);

        if (kanbanRuleEvent)
        {
            switch (kanbanRuleEvent.DependentPeggedRequirementStatus)
            {
                case LeanDependentPeggedRequirementStatus::None:
                    validatePegging = false;
                    break;

                case LeanDependentPeggedRequirementStatus::Picking:
                case LeanDependentPeggedRequirementStatus::Start:
                case LeanDependentPeggedRequirementStatus::End:
                case LeanDependentPeggedRequirementStatus::Finish:
                    validatePegging = true;
                    break;
            }
        }

        return validatePegging;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <returns>
    /// A new instance of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanRuleEvent newStandard()
    {
        return LeanRuleEvent::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePeggingRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the kanban pegging requirements to the <c>LeanKanbanStatus::Emptied</c> status when it is
    ///    required by the kanban rule settings.
    /// </summary>
    /// <param name="_common">
    ///    The <c>SalesLine</c> or <c>Kanban</c> record buffer to update.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updatePeggingRequirements(Common _common)
    {
        LeanRuleUpdatePeggingRequirement::newStandard(_common,true).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKanbanJobPeggingReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a kanban job has all the kanban pegging received.
    /// </summary>
    /// <param name="_common">
    /// The <c>KanbanJobPickingList</c> or <c>KanbanJobIssue</c> record buffer to validate.
    /// </param>
    /// <param name="_kanbanJob">
    /// The parent kanban job that is changing its status.
    /// </param>
    /// <param name="_targetStatus">
    /// The target status.
    /// </param>
    /// <returns>
    /// true if all the kanban job pegging has been received; otherwise, false.
    /// </returns>
    private static boolean validateKanbanJobPeggingReceived(
        Common              _common,
        KanbanJob           _kanbanJob,
        LeanKanbanJobStatus _targetStatus)
    {
        boolean                         requiredPeggingReceived = true;

        if (   !(_common is KanbanJobPickingList)
            && !(_common is KanbanJobIssue))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ReqPeggingTreeNode reqPeggingTreeNode = ReqPeggingTreeNode::newStandard(_common);
        List childrenNodes = reqPeggingTreeNode.listChildren();

        ListEnumerator le = childrenNodes.getEnumerator();
        while (le.moveNext())
        {
            Common common = le.current();
            Kanban kanban = common as Kanban;
            if (kanban)
            {
                if (LeanRuleEvent::mustValidateKanbanPeggingReceived(kanban, _kanbanJob, _targetStatus))
                {
                    if (kanban.Status < LeanKanbanStatus::Received)
                    {
                        error(strFmt("@SYS324086",
                                        kanban.KanbanId,
                                        kanban.ItemId,
                                        kanban.DueDateTime,
                                        kanban.Status));
                        requiredPeggingReceived = false;
                    }
                }
            }
        }

        return requiredPeggingReceived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKanbanPeggingReceived</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a kanban has all the kanban pegging received, if there areany.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The parent <c>KanbanJob</c> record buffer to validate.
    /// </param>
    /// <param name="_targetStatus">
    ///    The target status.
    /// </param>
    /// <returns>
    ///    true if all the kanban pegging has been received; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean validateKanbanPeggingReceived(KanbanJob _kanbanJob, LeanKanbanJobStatus _targetStatus)
    {
        boolean             ok = true;

        // Explore the pegging tree child nodes (Kanban -> KanbanJobPickingList or KanbanJobIssue)
        ReqPeggingTreeNode treeNode = ReqPeggingTreeNode::newStandard(_kanbanJob.kanban());
        List children = treeNode.listChildren();
        ListEnumerator le = children.getEnumerator();
        while (le.moveNext())
        {
            ok =    ok
                 && LeanRuleEvent::validateKanbanJobPeggingReceived(le.current(), _kanbanJob, _targetStatus);
        }

        if (!ok)
        {
            checkFailed("@SYS324085");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesParmLinePeggingReceived</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a sales line has all the kanban pegging received.
    /// </summary>
    /// <param name="_salesParmLine">
    ///    The <c>SalesParmLine</c> record buffer to validate.
    /// </param>
    /// <returns>
    ///    true if all the kanban pegging has been received; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean validateSalesParmLinePeggingReceived(SalesParmLine _salesParmLine)
    {
        SalesLine                       salesLine = _salesParmLine.salesLine();
        boolean                         ok = true;
        boolean                         hasCalculatedCoveredByOnHand;
        boolean                         coveredByOnhand; 

        ReqPeggingTreeNode reqPeggingTreeNode = ReqPeggingTreeNode::newStandard(salesLine);
        List childrenNodes = reqPeggingTreeNode.listChildren();

        ListEnumerator le = childrenNodes.getEnumerator();
        while (le.moveNext())
        {
            Common common = le.current();
            Kanban kanban = common as Kanban;
            if (kanban)
            {
                if (LeanRuleEvent::mustValidateSalesLinePeggingReceived(kanban)
                    && kanban.Status < LeanKanbanStatus::Received)
                {
                    if (!hasCalculatedCoveredByOnHand)
                    {
                        hasCalculatedCoveredByOnHand = true;
                        coveredByOnhand = LeanRuleEvent::deliverNowCoveredByOnHand(_salesParmLine, salesLine);
                    }

                    // if the required qty is not covered by on hand already and the kanbans
                    // are not received, we should fail the posting
                    if (!coveredByOnhand)
                    {
                        error(strFmt("@SYS324086",
                                        kanban.KanbanId,
                                        kanban.ItemId,
                                        kanban.DueDateTime,
                                        kanban.Status));
                        ok = false;
                    }                    
                }
            }
        }

        if (!ok)
        {
            checkFailed("@SYS324085");
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>