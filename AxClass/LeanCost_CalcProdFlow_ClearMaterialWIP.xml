<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCost_CalcProdFlow_ClearMaterialWIP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LeanCost_CalcProdFlow_ClearMaterialWIP</c> class is the task responsible for the clearing material issues or receipts from the WIP during lean backflush costing for a
/// specific production flow and a specific item.
/// </summary>
public abstract class LeanCost_CalcProdFlow_ClearMaterialWIP extends LeanCost
{
    ItemId                                  itemId;
    ToDate                                  leanCostingDate;
    PlanName                                planReferenceName;
    DimensionDefault                        planDefaultDimensions;
    LeanProductionFlowCostingRefRecId       leanProductionFlowCostingRecId;

    CurrencyCode                            currencyCode;
    
    LedgerVoucherPostPersistable            ledgerVoucher;
    InventTable                             inventTable;

    LeanCostLogger                          logger;
    
    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        itemId,
        leanProductionFlowCostingRecId,
        leanCostingDate,
        planReferenceName,
        planDefaultDimensions,
        currencyCode
    ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret = super();

        this.initialize();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLogger</Name>
				<Source><![CDATA[
    protected void initLogger()
    {
        logger = LeanCostLogger::newFromLeanProductionFlowCostingRecId(leanProductionFlowCostingRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistLog</Name>
				<Source><![CDATA[
    protected void persistLog()
    {
        ProdParameters parameters = ProdParameters::find();

        if (this.isInBatch()
            && parameters.LeanCostSplitLedgerVoucherTransactions
            && parameters.LeanCostEnableFullBatchParallelization)
        {
            logger.persistLog();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize()
    {
        inventTable = InventTable::find(itemId);
        
        this.initLedgerVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>LedgerVoucher</c> class.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initLedgerVoucher()
    {
        ledgerVoucher = LedgerVoucherPostPersistable::newFromPersistedLedgerPostPersistable(LeanProductionFlowCosting::find(leanProductionFlowCostingRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemPriceOrThrowError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the item price if it exists.
    /// </summary>
    /// <param name = "_toDate">The date for which to find the price.</param>
    /// <param name = "_inventDim">The inventory dimensions associated with the price.</param>
    /// <returns>A <c>InventItemPrice</c> record.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected InventItemPrice findItemPriceOrThrowError(ToDate _toDate, InventDim _inventDim)
    {
        InventItemPrice itemPrice = InventItemPrice::stdCostFindDate(inventTable, _toDate, '', _inventDim);
        if (!itemPrice)
        {
            throw error(strFmt("@SYS120478", inventTable.ItemId, _inventDim.InventSiteId), "", SysInfoActionMissingItemPrice::construct(inventTable));
        }

        return itemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearMaterialWIPAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears a WIP account for direct material cost.
    /// </summary>
    /// <param name="_inventMovement">
    ///    The invent movement to use for clearing the WIP account.
    /// </param>
    /// <param name="_inventItemPrice">
    ///    The <c>inventItemPrice</c> to use to clear the WIP.
    /// </param>
    /// <param name="_qty">
    ///    The quantity to clear from the WIP.
    /// </param>
    /// <remarks>
    ///    This method offsets with a rounding account.The quantity parameter can be used to control the sign
    ///    of the postings. The <c>InventItemPrice</c> cannot be initialized in this method, as the date when the costing
    ///    of the production flow happens is not availiable in the <c>InventMovement</c> class.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void clearMaterialWIPAccount(
        InventMovement  _inventMovement,
        InventItemPrice _inventItemPrice,
        Qty             _qty = 0)
    {
        Qty                 costQuantity = _qty;

        if (costQuantity == 0)
        {
            // Try to get the quantity from the movement
            costQuantity = _inventMovement.transQty();
        }

        if (costQuantity == 0)
        {
            return;
        }

        CostAmount costAmount = CurrencyExchangeHelper::amount(costQuantity * _inventItemPrice.pcsPrice());

        this.addLedger(InventPosting::accountType2LedgerPostingType(InventAccountType::InventStdCostRoundingVariance),
                       LedgerDimensionFacade::serviceCreateLedgerDimension(InventPosting::costItemLedgerDimensionFromParameter(this.buildMaterialCostItemLedgerDimensionParameter(_inventMovement)), planDefaultDimensions),
                       costAmount,
                       false);

        this.addLedger(_inventMovement.postingOperations(),
                       LedgerDimensionFacade::serviceCreateLedgerDimension(_inventMovement.accountOperations(), _inventMovement.defaultDimension()),
                       -costAmount,
                       false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMaterialCostItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting direct material cost ledger dimension for an item.
    /// </summary>
    /// <param name="_inventMovement">The invent movement to use for creating the parameter.</param>
    /// <returns>The built parameter instance.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected InventPostingCostItemLedgerDimensionParameters buildMaterialCostItemLedgerDimensionParameter(
        InventMovement  _inventMovement)
    {
        return InventPostingCostItemLedgerDimensionParameters::newFromParameters(
            InventAccountType::InventStdCostRoundingVariance,
            '',
            _inventMovement.itemId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates new ledger postings.
    /// </summary>
    /// <param name="_ledgerPostingType">
    ///    The posting type that is used for posting.
    /// </param>
    /// <param name="_ledgerDimension">
    ///    The ledger dimension that is used for posting.
    /// </param>
    /// <param name="_costAmount">
    ///    The amount to post.
    /// </param>
    /// <param name="_skipValidation">
    ///    Skip dimension validation.
    /// </param>
    /// <remarks>
    ///    Merges the ledger dimension default account and the default dimension into a ledger dimension
    ///    account and uses the merged account for posting.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    An error when posting.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addLedger(
        LedgerPostingType             _ledgerPostingType,
        LedgerDimensionAccount        _ledgerDimension,
        CostAmount                    _costAmount,
        boolean                       _skipValidation
        )
    {
        LedgerVoucherObject      ledgerVoucherObject      = ledgerVoucher.findLedgerVoucherObject();
        CurrencyExchangeHelper   currencyExchHelper       = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::current()),
                                                                                                    ledgerVoucherObject.parmAccountingDate());
        LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                                                  ledgerVoucherObject,
                                                                  _ledgerPostingType,
                                                                  _ledgerDimension,
                                                                  currencyCode,
                                                                  _costAmount,
                                                                  currencyExchHelper);

        ledgerVoucherTransObject.parmSkipDimensionValidation(_skipValidation);

        if (!ledgerVoucher.addTrans(ledgerVoucherTransObject))
        {
            throw error("@SYS21533");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isParallelSessionCommitted</Name>
				<Source><![CDATA[
    private boolean isParallelSessionCommitted(LedgerVoucherObject _ledgerVoucherObject)
    {
        InventCostTrans inventCostTrans;

        select firstonly CreatedTransactionId from inventCostTrans
            where inventCostTrans.Voucher           == _ledgerVoucherObject.parmVoucher()
               && inventCostTrans.TransDate         == _ledgerVoucherObject.parmAccountingDate()
               && inventCostTrans.CostTransRefType  == InventCostTransRefType::ProductionFlow
               && inventCostTrans.CostTransState    == InventCostTransState::Financial
               && inventCostTrans.TransRefId        == planReferenceName;

        return inventCostTrans.CreatedTransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferConflictingRevaluationsFromParallelSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers conflicting revaluation created from a parallel session to the current session.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void transferConflictingRevaluationsFromParallelSession()
    {
        LedgerVoucherObject         ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

        boolean isParallelSessionCommitted = this.isParallelSessionCommitted(ledgerVoucherObject);

        if (!isParallelSessionCommitted)
        {
            return; // Data from the session running in parallel did not commit or persist any transactions.
        }

        InventCostTransList         inventCostTransList = InventCostTransList::construct();
        InventCostTransVarianceMap  inventCostTransVarianceMap = InventCostTransVarianceMap::construct();
        InventCostTransVarianceList inventCostTransVarianceList;
        InventCostTrans             inventCostTrans;
        InventCostTransVariance     inventCostTransVariance;
        RecId                       currentInventCostTransRecId;
        List                        inventCostTransRecIdList = new List(Types::Int64);
        InventCostUpdate            inventCostUpdate = InventCostUpdateGlobal::Instance().inventCostUpdate();
        boolean                     conflictingTransaction; 

        while select forupdate inventCostTrans
            where inventCostTrans.Voucher               == ledgerVoucherObject.parmVoucher()
               && inventCostTrans.TransDate              > ledgerVoucherObject.parmTransDate()
               && inventCostTrans.CostTransRefType      == InventCostTransRefType::WIPRevaluation
               && inventCostTrans.CostTransState        == InventCostTransState::Financial
               && inventCostTrans.TransRefId            == planReferenceName
               && inventCostTrans.InventTransId         == ''
            outer join inventCostTransVariance
                where inventCostTransVariance.InventCostTransRefRecId == inventCostTrans.RecId
        {
            if (inventCostTrans.RecId != currentInventCostTransRecId)
            {
                currentInventCostTransRecId = inventCostTrans.RecId;
                conflictingTransaction = inventCostUpdate.existsCostTrans(inventCostTrans);
                if (conflictingTransaction)
                {
                    inventCostTransVarianceList = InventCostTransVarianceList::construct();
                    inventCostTransVarianceMap.add(InventCostTransVarianceMap::buildKey(inventCostTrans), inventCostTransVarianceList);
                    inventCostTransList.add(inventCostTrans);
                    inventCostTransRecIdList.addEnd(currentInventCostTransRecId);
                }
                
            }
            if (conflictingTransaction && inventCostTransVariance.RecId)
            {
                if (inventCostTransVariance.VarianceType == InventCostVarianceType::Revaluation)
                {
                    inventCostTransVarianceList.add(inventCostTransVariance);
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
            }
        }

        inventCostUpdate.finalizeCostTransVariance(inventCostTransList, inventCostTransVarianceMap);

        ListEnumerator inventCostTransRecIdListEnumerator = inventCostTransRecIdList.getEnumerator();
        while (inventCostTransRecIdListEnumerator.moveNext())
        {
            delete_from inventCostTransVariance
                where inventCostTransVariance.InventCostTransRefRecId == inventCostTransRecIdListEnumerator.current();

            delete_from inventCostTrans
                where inventCostTrans.RecId == inventCostTransRecIdListEnumerator.current();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>