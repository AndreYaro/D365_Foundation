<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntercompanyPurchAgreementSyncNotesTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>IntercompanyPurchAgreementSyncNotesTask</c> class handles the transfer of documents when
///    they are called from the <c>PurchAgreementHeader</c> table.
/// </summary>
class IntercompanyPurchAgreementSyncNotesTask extends IntercompanySyncNotesTask
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>synchronizeCommon</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Synchronizes notes from the purchase agreement header to the sales agreement header.
    /// </summary>
    protected void synchronizeCommon()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().interCompanyActivities().synchronizeCommon(this.parmDocRefRecId(), this.parmRefCompanyId(), this.parmRefTableId(), this.parmRefRecId()))
        {
            ttsbegin;
            changecompany(refCompanyId)
            {
                setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                PurchAgreementHeader purchAgreementHeader = PurchAgreementHeader::find(refRecId);

                if (purchAgreementHeader.intercompanyLinkExist())
                {
                    // Delete all notes on associated agreement
                    SalesAgreementHeader salesAgreementHeader = purchAgreementHeader.salesAgreementHeader();

                    if (salesAgreementHeader.RecId
                        && salesAgreementHeader.RecId != fromRecId)
                    {
                        // No need to delete all notes in order to improve performance if new notes are created
                        if (!this.isCreatedDocu())
                        {
                            this.deleteDocuRef(salesAgreementHeader,purchAgreementHeader.RecId);
                        }
                    }

                    // Retrieve the base table reference for documents
                    TableId baseTableId = DocuRef::GetRootTableID(purchAgreementHeader.TableId);

                    DocuRef fromDocuRef;

                    // Create all notes on associated Agreement
                    while select fromDocuRef
                        where fromDocuRef.RefCompanyId == purchAgreementHeader.DataAreaId
                           && fromDocuRef.RefTableId   == baseTableId
                           && fromDocuRef.RefRecId     == purchAgreementHeader.RecId
                           // Only process new created notes if new notes are created
                           && (fromDocuRef.RecId       == this.parmDocRefRecId() || !this.isCreatedDocu())
                    {
                        if (this.validateDocuRefTypeGroup(fromDocuRef))
                        {
                            if (salesAgreementHeader.RecId
                                && salesAgreementHeader.RecId != fromRecId)
                            {
                                this.writeDocuRef(salesAgreementHeader,fromDocuRef,purchAgreementHeader.RecId);
                            }
                        }
                    }
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDocuRefTypeGroup</Name>
				<Source><![CDATA[
    protected boolean validateDocuRefTypeGroup(DocuRef _docuRef)
    {
        if (IntercompanySyncNotesTaskWriteDocuRefCheckFlight::instance().isEnabled())
        {
            return this.canWriteDocuRef(_docuRef);
        }
        else
        {
            return _docuRef.docuType().TypeGroup == DocuTypeGroup::Note;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static IntercompanyPurchAgreementSyncNotesTask construct()
    {
        return new IntercompanyPurchAgreementSyncNotesTask();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>