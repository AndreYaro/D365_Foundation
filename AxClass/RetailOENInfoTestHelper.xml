<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOENInfoTestHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailOENInfoTestHelper</c> contains constant fields and helper methods for RetailOENInfo related tests files.
/// </summary>
internal class RetailOENInfoTestHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createNotificationProfile</Name>
				<Source><![CDATA[
    public static RetailEventNotificationProfile createNotificationProfile(str _profileId, NoYes _isActive = NoYes::Yes)
    {
        ttsbegin;
        RetailEventNotificationProfile notificationProfile;
        notificationProfile.ProfileId = _profileId;
        notificationProfile.Active = _isActive;
        notificationProfile.insert();
        ttscommit;

        return notificationProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTextContentFromFile</Name>
				<Source><![CDATA[
    public static str getTextContentFromFile(str _fileName)
    {
        resourceNode testResourceNode = SysResource::getResourceNode(_fileName);
        container containerResult = testResourceNode.getResourceContent();
        return conPeek(containerResult, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNotificationSetting</Name>
				<Source><![CDATA[
    public static RetailEventNotificationSetting createNotificationSetting(int64 _profileRecId, RetailEventNotificationType _notificationType, str _emailId, str _emailTemplateText, NoYes _isActive = NoYes::Yes, str _languageId = 'en-US')
    {
        ttsbegin;
        RetailEventNotificationSetting notificationSetting = RetailEventNotificationSetting::find(_profileRecId, _notificationType, true);

        if (!notificationSetting)
        {
            notificationSetting.EventNotificationProfile = _profileRecId;
            notificationSetting.EventNotificationType = _notificationType;
            notificationSetting.EmailId = _emailId;
            notificationSetting.Active = _isActive;
            notificationSetting.insert();
        }
        else
        {
            notificationSetting.EmailId = _emailId;
            notificationSetting.Active = _isActive;
            notificationSetting.update();
        }

        SysEmailTable emailTable = SysEmailTable::find(_emailId);
        if (!emailTable)
        {
            emailTable.EmailId = _emailId;
            emailTable.insert();
        }

        SysEmailMessageTable emailMessageTable = SysEmailMessageTable::find(_emailId, _languageId, true);

        if (emailMessageTable)
        {
            emailMessageTable.Mail = _emailTemplateText;
            emailMessageTable.update();
        }
        else
        {
            emailMessageTable.EmailId = _emailId;
            emailMessageTable.LanguageId = _languageId;
            emailMessageTable.Mail = _emailTemplateText;
            emailMessageTable.insert();
        }

        ttscommit;

        return notificationSetting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkProfileToRetailParameters</Name>
				<Source><![CDATA[
    public static void linkProfileToRetailParameters(str _profileId)
    {
        ttsbegin;
        RetailParameters retailParameters = RetailParameters::find(true);
        retailParameters.EventNotificationProfileId = _profileId;
        retailParameters.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>