<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentServiceUpdaterPO</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentServiceUpdaterPO</c> class provides a processor implementation that can update
///    release purchase orders and lines.
/// </summary>
public class LeanDocumentServiceUpdaterPO extends LeanDocumentQuantityRecalculationTask
{
    PurchLine   purchLine;
    boolean     causesUpdate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canModifyPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a task can be executed, depending on the current line order status.
    /// </summary>
    /// <returns>
    /// true if the task can be executed; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canModifyPurchaseOrder()
    {
        boolean ret = true;

        if (purchLine.PurchStatus != PurchStatus::Backorder)
        {
            ret = false;
            warning("@SYS335576");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the two objects are equal.
    /// </summary>
    /// <param name="otherObject">
    ///    The other object.
    /// </param>
    /// <returns>
    ///    true if the two objects hold the same state; otherwise, false.
    /// </returns>
    public boolean equal(Object otherObject)
    {
        LeanDocumentServiceUpdaterPO otherTask = otherObject as LeanDocumentServiceUpdaterPO;

        return  otherObject == this
                || (otherTask != null
                    && super(otherTask));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance of the <c>LeanDocumentQuantityRecalculationTask</c> class.
    /// </summary>
    protected void init()
    {
        super();

        if (!lineDataValues.exists(tablenum(PurchLine)))
        {
            throw error("@SYS335178");
        }

        purchLine       = lineDataValues.lookup(tablenum(PurchLine));
        purchLine       = PurchLine::findRecId(purchLine.RecId, true);
        causesUpdate    = lineData.parmSourceRecords().elements() > 0;

        this.parmRequiredUnitOfMeasure(UnitOfMeasure::findBySymbol(purchLine.PurchUnit).RecId);
        this.parmServiceItemId(purchLine.ItemId);
        this.parmInventDimId(purchLine.InventDimId);
        this.parmServiceItemDataAreaId(purchLine.DataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the task.
    /// </summary>
    public void run()
    {
        super();

        if (!this.canProceedWithTask())
        {
            return;
        }

        warning(strfmt("@SYS335574", purchLine.PurchId, purchLine.PurchStatus, purchLine.VendAccount));

        if (!this.canModifyPurchaseOrder())
        {
            return;
        }

        if (causesUpdate)
        {
            // in case there're remaining jobs we need to update the purchase line
            purchLine.PurchQty = this.recalculatedQuantity();

            InventMovement::bufferSetRemainQty(purchLine);
            purchLine.update();
            warning(strfmt("@SYS335575", purchLine.PurchQty));
        }
        else
        {
            PurchId purchId = purchLine.PurchId;

            // in case there're no other jobs, we need to delete the line
            purchLine.delete();

            // in case we deleted the last line, we should delete the job too
            if (!PurchLine::exist(purchId))
            {
                PurchTable purchTable = PurchTable::find(purchId, true);
                purchTable.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>LeanDocumentServiceUpdaterPO</c> class by using the default values.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>LeanDocumentServiceUpdaterPO</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanDocumentServiceUpdaterPO newStandard()
    {
        return new LeanDocumentServiceUpdaterPO();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>