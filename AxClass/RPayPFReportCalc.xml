<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportCalc
{
    RHRMEmplId              emplId;
    RPayCounterUnit         fund;
    ReportPeriod_RU         corPeriodStart, corPeriodEnd;
    ReportPeriod_RU         reportTransLimitDate;

    RPayAmount  fundTotalAmount, baseAmount, fundAmount, deductionAmount;
    container   conDeductionAmount;
    container   conDeductionAmountPctBase;
    container   conDeductionCodes;
    container   conDeductionCodesPctBase;

    RPayFundEmplSum     fundEmplSum;
    RPayTaxParameters   taxParameters;

    QueryRun    qrCheckCorPeriod, qrSum, qrPlain, qrMaxCorrPeriod, qrMinCorrPeriod;

    boolean stornoState;

    #TimeConstants

    RPayQueue  queue;
    container  AM[]; //adjacency matrix
    container  periodTotal[];       //total amounts vector

    RPayPFReportStornoType  stornoType;
    int                     maxRows, maxColumns;  //signal values to stop iterations

    Set         crossPeriods;
    int         totalCorrectedPeriods;
    Yr          corPeriodYr;

    //A[i, j], physically means i - collumn, j - Line
    #localmacro.Idx
        (totalCorrectedPeriods * (%2 - 1) + %1)
    #endmacro

    #define.checkCorPeriodQuery(1)
    #define.sumQuery(2)
    #define.plainQuery(3)
    #define.maxCorrPeriod(4)
    #define.minCorrPeriod(5)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void calc()
    {
        crossPeriods = new Set(Types::Enum);

        if (stornoType != RPayPFReportStornoType::All)
        {
            stornoState = this.corPeriodsExist();

            if (stornoState)
            {
                this.fillAdjacencyMatrix();
                this.calcCorrectedPeriods();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCorrectedPeriods</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void calcCorrectedPeriods()
    {
        int i, j;

        void removeNegatives()
        {
            int k;

            for (i = maxRows; i >= 1; --i)
            {
                queue.clear();

                for (j = i+1; j <= maxColumns; ++j)
                {
                    if (stornoType == RPayPFReportStornoType::Inevitable && !this.isPeriodNegative(AM[#Idx(i, j)]))
                    {
                        queue.push([j]);
                    }

                    if (this.isPeriodNegative(periodTotal[j]) && this.isPeriodNegative(AM[#Idx(i, j)]))
                    {
                        this.moveData(i, j);

                        while (queue.qty() && this.isPeriodNegative(periodTotal[i]))
                        {
                            [k] = queue.pop();
                            this.moveData(i, k);
                        }
                    }
                }
            }
        }

        queue = new RPayQueue();

        //move positives first
        if (stornoType != RPayPFReportStornoType::Inevitable)
        {
            for (i = 1; i <= maxRows; ++i)
            {
                for (j = i + 1; j <= maxColumns; ++j)
                {
                    if (stornoType == RPayPFReportStornoType::All ||
                       (stornoType == RPayPFReportStornoType::IncreasingInevitable && !this.isPeriodNegative(AM[#Idx(i, j)])))
                    {
                        this.moveData(i, j);
                    }
                }
            }
        }

        if (stornoType != RPayPFReportStornoType::All)
        {
            removeNegatives();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDeductions</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void calcDeductions(Range _payPeriod, Range _corPeriod)
    {
        Range   deductionCode;

        int     i, len = conlen(conDeductionCodes);
        boolean percentRate;

        RPayAmount calcDeduction(boolean _emptyPercentRate)
        {
            Query                   query;
            QueryBuildDataSource    qbds, qbdsDeductionTable, qbdsEmplTable;
            QueryRun                queryRunLocal;
            RPayFundEmplDeduction   rpayFundEmplDeduction;

            query = new Query();
            qbds  = query.addDataSource(tablenum(RPayFundEmplDeduction));

            qbds.addRange(fieldnum(RPayFundEmplDeduction, RpayCounterUnit)).value(fund);
            qbds.addSelectionField(fieldnum(RPayFundEmplDeduction, DeductionAmount), SelectionField::Sum);
            qbds.addRange(fieldnum(RPayFundEmplDeduction, CorrectedPeriod)).value(_corPeriod);
            qbds.addRange(fieldnum(RPayFundEmplDeduction, PayPeriod)).value(_payPeriod);

            qbds.addRange(fieldnum(RPayFundEmplDeduction, RpayFundDeductionCode)).value(deductionCode);

            qbdsEmplTable = qbds.addDataSource(tablenum(RHRMEmplTable));
            qbdsEmplTable.addLink(fieldnum(RPayFundEmplDeduction, EmplId), fieldnum(RHRMEmplTable, EmployeeId));
            qbdsEmplTable.joinMode(JoinMode::ExistsJoin);
            qbdsEmplTable.addRange(fieldnum(RHRMEmplTable, PayMainEmplId)).value(emplId);

            if (_emptyPercentRate)
            {
                qbdsDeductionTable = qbds.addDataSource(tablenum(RPayFundDeductionTable));
                qbdsDeductionTable.addLink(fieldnum(RPayFundEmplDeduction, RPayFundDeductionCode), fieldnum(RPayFundDeductionTable, RPayFundDeductionCode));
                qbdsDeductionTable.addRange(fieldnum(RPayFundDeductionTable, RpayRateTaxValue)).value(SysQuery::valueEmptyString());
                qbdsDeductionTable.joinMode(JoinMode::ExistsJoin);
            }

            queryRunLocal = new QueryRun(query);
            queryRunLocal.next();

            rpayFundEmplDeduction = queryRunLocal.get(tablenum(RPayFundEmplDeduction));

            return rpayFundEmplDeduction.DeductionAmount;
        }

        conDeductionAmount = connull();

        for (i = 1; i <= len; ++i)
        {
            [deductionCode, percentRate] = conpeek(conDeductionCodes, i);
            conDeductionAmount += calcDeduction(percentRate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDeductionsPercentBase</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void calcDeductionsPercentBase(Range _payPeriod, Range _corPeriod)
    {
        Range   deductionCode;

        int     i, len = conlen(conDeductionCodesPctBase);
        boolean percentRate;
        Percent percentValue;

        RPayAmount calcDeduction(boolean _emptyPercentRate)
        {
            Query                   query;
            QueryBuildDataSource    qbds, qbdsDeductionTable, qbdsEmplTable, qbdsFundEmplSum;
            QueryRun                queryRunLocal;
            RPayFundEmplDeduction   rpayFundEmplDeduction;
            RPayfundEmplSum         rpayFundEmplSum;
            RPayamount              basePctAmount;

            query = new Query();
            qbdsFundEmplSum = query.addDataSource(tablenum(RPayfundEmplSum));
            qbdsFundEmplSum.firstOnly(true);

            qbdsFundEmplSum.addRange(fieldnum(RPayfundEmplSum, RpayCounterUnit)).value(fund);
            qbdsFundEmplSum.addRange(fieldnum(RPayfundEmplSum, CorrectedPeriod)).value(_corPeriod);
            qbdsFundEmplSum.addRange(fieldnum(RPayfundEmplSum, PayPeriod)).value(_payPeriod);

            qbdsEmplTable = qbdsFundEmplSum.addDataSource(tablenum(RHRMEmplTable));
            qbdsEmplTable.addLink(fieldnum(RPayfundEmplSum, EmplId), fieldnum(RHRMEmplTable, EmployeeId));
            qbdsEmplTable.joinMode(JoinMode::ExistsJoin);
            qbdsEmplTable.addRange(fieldnum(RHRMEmplTable, PayMainEmplId)).value(emplId);

            qbdsFundEmplSum.addSelectionField(fieldnum(RPayfundEmplSum, PercentValue));

            queryRunLocal = new QueryRun(query);
            queryRunLocal.next();

            rpayFundEmplSum = queryRunLocal.get(tablenum(RPayFundEmplSum));
            percentValue    = rpayFundEmplSum.PercentValue;

            if (percentValue)
            {
                query = new Query();

                qbds = query.addDataSource(tablenum(RPayFundEmplDeduction));
                qbds.addRange(fieldnum(RPayfundEmplSum, RpayCounterUnit)).value(fund);
                qbds.addRange(fieldnum(RPayfundEmplSum, CorrectedPeriod)).value(_corPeriod);
                qbds.addRange(fieldnum(RPayfundEmplSum, PayPeriod)).value(_payPeriod);

                qbds.addSelectionField(fieldnum(RPayFundEmplDeduction, DeductionAmount), SelectionField::Sum);
                qbds.addSelectionField(fieldnum(RPayFundEmplDeduction, TaxDeductionAmount), SelectionField::Sum);

                qbds.addRange(fieldnum(RPayFundEmplDeduction, RpayFundDeductionCode)).value(deductionCode);

                qbdsEmplTable = qbds.addDataSource(tablenum(RHRMEmplTable));
                qbdsEmplTable.addLink(fieldnum(RPayFundEmplDeduction, EmplId), fieldnum(RHRMEmplTable, EmployeeId));
                qbdsEmplTable.joinMode(JoinMode::ExistsJoin);
                qbdsEmplTable.addRange(fieldnum(RHRMEmplTable, PayMainEmplId)).value(emplId);

                if (_emptyPercentRate)
                {
                    qbdsDeductionTable = qbds.addDataSource(tablenum(RPayFundDeductionTable));
                    qbdsDeductionTable.addLink(fieldnum(RPayFundEmplDeduction, RPayFundDeductionCode), fieldnum(RPayFundDeductionTable, RPayFundDeductionCode));
                    qbdsDeductionTable.addRange(fieldnum(RPayFundDeductionTable, RpayRateTaxValue)).value(SysQuery::valueEmptyString());
                }

                queryRunLocal = new QueryRun(query);
                queryRunLocal.next();

                rpayFundEmplDeduction = queryRunLocal.get(tablenum(RPayFundEmplDeduction));

                basePctAmount += decround(rpayFundEmplDeduction.DeductionAmount * percentValue / 100, 2) - rpayFundEmplDeduction.TaxDeductionAmount;
            }

            return basePctAmount;
        }

        conDeductionAmountPctBase = connull();

        for (i = 1; i <= len; ++i)
        {
            [deductionCode, percentRate] = conpeek(conDeductionCodesPctBase, i);
            conDeductionAmountPctBase += calcDeduction(percentRate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPlainData</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container calcPlainData(ReportPeriod_RU _calcPeriod)
    {
        container   ret;
        Range       dateRange = SysQuery::range(datenull(), reportTransLimitDate);

        qrSum.reset();
        this.modifyQuery(qrSum.query(),
                         dateRange,
                         queryValue(_calcPeriod));
        qrSum.next();
        fundEmplSum = qrSum.get(tablenum(RPayFundEmplSum));

        fundTotalAmount = fundEmplSum.RpayFundTotalAmount;
        baseAmount      = fundEmplSum.BaseAmount;
        fundAmount      = fundEmplSum.FundAmount;

        this.calcDeductions(dateRange, queryValue(_calcPeriod));
        this.calcDeductionsPercentBase(dateRange, queryValue(_calcPeriod));

        ret = [[fundTotalAmount, baseAmount, fundAmount], conDeductionAmount, conDeductionAmountPctBase];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMovedPeriods</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean checkMovedPeriods(ReportPeriod_RU _periodMoveFrom, ReportPeriod_RU _periodMoveTo)
    {
        RPayPFReportIssuePeriod reportIssuePeriod;
        boolean ret = true;

        while select Period from reportIssuePeriod
            where reportIssuePeriod.IssueDate > _periodMoveTo &&
                  reportIssuePeriod.IssueDate < _periodMoveFrom
        {
            ret = false;
            crossPeriods.add(reportIssuePeriod.Period);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conAddition</Name>
				<Source><![CDATA[
        private container conAddition(container _con1, container _con2)
    {
        container ret;
        int len = max(conlen(_con1), conlen(_con2));
        int i;

        for (i = 1; i <= len; ++i)
        {
            ret += conpeek(_con1, i) + conpeek(_con2, i);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conSubstraction</Name>
				<Source><![CDATA[
        private container conSubstraction(container _con1, container _con2)
    {
        container ret;
        int len = max(conlen(_con1), conlen(_con2));
        int i;

        for (i = 1; i <= len; ++i)
        {
            ret += conpeek(_con1, i) - conpeek(_con2, i);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>corPeriodsExist</Name>
				<Source><![CDATA[
        //checks transactions for periods intersection i.e. quarter in year
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean corPeriodsExist()
    {
        boolean     ret;

        boolean checkCorrPeriod(TransDate _periodStart, TransDate _periodEnd)
        {
            qrCheckCorPeriod.reset();
            this.modifyQuery(qrCheckCorPeriod.query(),
                             SysQuery::range(_periodEnd + 1, reportTransLimitDate),
                             SysQuery::range(_periodStart, _periodEnd));
            qrCheckCorPeriod.next();
            fundEmplSum = qrCheckCorPeriod.get(tablenum(RPayFundEmplSum));

            return fundEmplSum.RecId != 0;
        }

        boolean checkPayPeriod(TransDate _periodStart, TransDate _periodEnd)
        {
            qrCheckCorPeriod = new QueryRun(this.fundEmplSumQuery(#checkCorPeriodQuery));
            this.modifyQuery(qrCheckCorPeriod.query(),
                             SysQuery::range(_periodStart, _periodEnd),
                             SysQuery::range(dateNull(), _periodStart - 1));
            qrCheckCorPeriod.next();
            fundEmplSum = qrCheckCorPeriod.get(tablenum(RPayFundEmplSum));

            return fundEmplSum.RecId != 0;
        }

        if (checkCorrPeriod(corPeriodStart, corPeriodEnd))
        {
            ret = true;
        }

        if (checkPayPeriod(corPeriodStart, corPeriodEnd))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>corReportPeriod</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void corReportPeriod(ReportPeriod_RU _corPeriodStart, ReportPeriod_RU _corPeriodEnd)
    {
        corPeriodStart = _corPeriodStart;
        corPeriodEnd   = _corPeriodEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>crossPeriods</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public container crossPeriods()
    {
        if (crossPeriods)
        {
            return crossPeriods.pack();
        }

        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAdjacencyMatrix</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void fillAdjacencyMatrix()
    {
        int             i,j;
        container       tmpCon1, tmpCon2;
        ReportPeriod_RU lastCorrPeriod, firstCorrPeriod;

        AM[0]          = connull();
        periodTotal[0] = connull();

        lastCorrPeriod = this.getLastCorrPeriod();
        firstCorrPeriod = this.getFirstCorrPeriod();
        corPeriodYr = year(firstCorrPeriod);
        totalCorrectedPeriods = this.idx(lastCorrPeriod);

        qrPlain.reset();
        this.modifyQuery(qrPlain.query(),
                         SysQuery::range(datenull(), reportTransLimitDate),
                         SysQuery::range(firstCorrPeriod, lastCorrPeriod));

        while (qrPlain.next())
        {
            fundEmplSum = qrPlain.get(tablenum(RPayFundEmplSum));

            if (fundEmplSum.PayPeriod >= fundEmplSum.CorrectedPeriod)
            {
                //check corrected periods to move to main diagonal
                if (year(fundEmplSum.PayPeriod)      != corPeriodYr ||
                    (year(fundEmplSum.PayPeriod)     == year(fundEmplSum.CorrectedPeriod) &&
                     date2Qtr(fundEmplSum.PayPeriod) != date2Qtr(fundEmplSum.CorrectedPeriod)))
                {
                    j = this.idx(fundEmplSum.PayPeriod);
                }
                else
                {
                    this.checkMovedPeriods(fundEmplSum.PayPeriod, fundEmplSum.CorrectedPeriod);
                    j = this.idx(fundEmplSum.CorrectedPeriod);
                }

                i = this.idx(fundEmplSum.CorrectedPeriod);

                fundTotalAmount = fundEmplSum.RpayFundTotalAmount;
                baseAmount      = fundEmplSum.BaseAmount;
                fundAmount      = fundEmplSum.FundAmount;
                tmpCon1         = [fundTotalAmount, baseAmount, fundAmount];

                this.calcDeductions(queryValue(fundEmplSum.PayPeriod), queryValue(fundEmplSum.CorrectedPeriod));

                [tmpCon1, tmpCon2] = AM[#Idx(i, j)] == conNull() ? [conNull(), conNull()] : AM[#Idx(i, j)];

                tmpCon1 = this.conAddition(tmpCon1, [fundTotalAmount, baseAmount, fundAmount]);
                tmpCon2 = this.conAddition(tmpCon2, conDeductionAmount);

                AM[#Idx(i, j)] = [tmpCon1, tmpCon2];

                [tmpCon1, tmpCon2] = periodTotal[j] == conNull() ? [conNull(), conNull()] : periodTotal[j];

                tmpCon1 = this.conAddition(tmpCon1, [fundTotalAmount, baseAmount, fundAmount]);
                tmpCon2 = this.conAddition(tmpCon2, conDeductionAmount);

                periodTotal[j] = [tmpCon1, tmpCon2];

                maxRows    = max(maxRows, i);
                maxColumns = max(maxColumns, j);
            }
            else
            {
                throw Error(strfmt("@RUP3353", emplId, fundEmplSum.PayPeriod));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundEmplSumQuery</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected Query fundEmplSumQuery(int _queryType)
    {
        Query fundQuery;
        QueryBuildDataSource    qbds, qbdsEmplTable;

        fundQuery = new Query();

        qbds = fundQuery.addDataSource(tablenum(RPayFundEmplSum));
        FindOrCreateRange_W(qbds, fieldnum(RPayFundEmplSum, RpayCounterUnit), queryValue(fund));
        FindOrCreateRange_W(qbds, fieldnum(RPayFundEmplSum, CorrectedPeriod));
        FindOrCreateRange_W(qbds, fieldnum(RPayFundEmplSum, PayPeriod));

        qbdsEmplTable = qbds.addDataSource(tablenum(RHRMEmplTable));
        qbdsEmplTable.addLink(fieldnum(RPayFundEmplSum, EmplId), fieldnum(RHRMEmplTable, EmployeeId));
        qbdsEmplTable.joinMode(JoinMode::ExistsJoin);
        FindOrCreateRange_W(qbdsEmplTable, fieldnum(RHRMEmplTable, PayMainEmplId), emplId);

        switch (_queryType)
        {
            case #checkCorPeriodQuery:
                qbds.firstOnly(true);
                qbds.addSelectionField(fieldnum(RPayFundEmplSum, recId));
                break;
            case #sumQuery:
                qbds.addSelectionField(fieldnum(RPayFundEmplSum, FundAmount),           SelectionField::Sum);
                qbds.addSelectionField(fieldnum(RPayFundEmplSum, RpayFundTotalAmount),  SelectionField::Sum);
                qbds.addSelectionField(fieldnum(RPayFundEmplSum, BaseAmount),           SelectionField::Sum);
                break;
            case #plainQuery:
                //do nothing
                break;
            case #maxCorrPeriod:
                qbds.orderMode(orderMode::GroupBy);
                qbds.addSelectionField(fieldnum(RPayFundEmplSum, PayPeriod),            SelectionField::Max);
                qbds.addSelectionField(fieldnum(RPayFundEmplSum, CorrectedPeriod),      SelectionField::Max);
                break;
            case #minCorrPeriod:
                qbds.orderMode(orderMode::GroupBy);
                qbds.addSelectionField(fieldnum(RPayFundEmplSum, PayPeriod),            SelectionField::Min);
                qbds.addSelectionField(fieldnum(RPayFundEmplSum, CorrectedPeriod),      SelectionField::Min);
                break;
        }

        return fundQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstCorrPeriod</Name>
				<Source><![CDATA[
        private ReportPeriod_RU getFirstCorrPeriod()
    {
        qrMinCorrPeriod  = new QueryRun(this.fundEmplSumQuery(#minCorrPeriod));
        this.modifyQuery(qrMinCorrPeriod.query(),
                         SysQuery::range(corPeriodStart, corPeriodEnd),
                         SysQuery::range(datenull(), corPeriodEnd));

        if (qrMinCorrPeriod.next())
        {
            fundEmplSum = qrMinCorrPeriod.get(tablenum(RPayFundEmplSum));
        }

        return min(fundEmplSum.CorrectedPeriod, fundEmplSum.PayPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastCorrPeriod</Name>
				<Source><![CDATA[
        private ReportPeriod_RU getLastCorrPeriod()
    {
        qrMaxCorrPeriod  = new QueryRun(this.fundEmplSumQuery(#maxCorrPeriod));
        this.modifyQuery(qrMaxCorrPeriod.query(),
                         SysQuery::range(datenull(), reportTransLimitDate),
                         SysQuery::range(corPeriodStart, corPeriodEnd));

        if (qrMaxCorrPeriod.next())
        {
            fundEmplSum = qrMaxCorrPeriod.get(tablenum(RPayFundEmplSum));
        }

        return max(fundEmplSum.CorrectedPeriod, fundEmplSum.PayPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>idx</Name>
				<Source><![CDATA[
        private int idx(ReportPeriod_RU _period)
    {
        return mthOfYr(_period) + #monthsPerYear * (year(_period) - corPeriodYr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void init()
    {
        qrCheckCorPeriod = new QueryRun(this.fundEmplSumQuery(#checkCorPeriodQuery));
        qrSum            = new QueryRun(this.fundEmplSumQuery(#sumQuery));
        qrPlain          = new QueryRun(this.fundEmplSumQuery(#plainQuery));
        qrMaxCorrPeriod  = new QueryRun(this.fundEmplSumQuery(#maxCorrPeriod));
        qrMinCorrPeriod  = new QueryRun(this.fundEmplSumQuery(#minCorrPeriod));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPeriodNegative</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean isPeriodNegative(container _con)
    {
        container tmpCon1, tmpCon2;
        int len;
        int i;
        boolean ret;

        [tmpCon1, tmpCon2] = _con == conNull() ? [conNull(), conNull()] : _con;

        //check fund amounts container
        len = conlen(tmpCon1);
        for (i = 1; i <= len; ++i)
        {
            if (conpeek(tmpCon1, i) < 0)
            {
                ret = true;
                break;
            }
        }

        //check deduction amounts container
        if (ret == false)
        {
            len = conlen(tmpCon2);
            for (i = 1; i <= len; ++i)
            {
                if (conpeek(tmpCon2, i) < 0)
                {
                    ret = true;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void modifyQuery(Query _query,
                               Range _payPeriodRange,
                               Range _corPeriodRange)
    {
        QueryBuildDatasource qbds, qbdsEmpl;

        qbds = _query.dataSourceTable(tablenum(RPayFundEmplSum));

        FindOrCreateRange_W(qbds, fieldnum(RPayFundEmplSum, CorrectedPeriod), _corPeriodRange);
        FindOrCreateRange_W(qbds, fieldnum(RPayFundEmplSum, PayPeriod), _payPeriodRange);
        FindOrCreateRange_W(qbds, fieldnum(RPayFundEmplSum, RPayCounterUnit), fund);

        qbdsEmpl = _query.dataSourceTable(tablenum(RHRMEmplTable));
        FindOrCreateRange_W(qbdsEmpl, fieldnum(RHRMEmplTable, PayMainEmplId), emplId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveData</Name>
				<Source><![CDATA[
        private void moveData(int _i, int _j)
    {
        container tmpCon1, tmpCon2, tmpCon11, tmpCon22;

        [tmpCon1,  tmpCon2 ] = AM[#Idx(_i, _i)] == conNull() ? [conNull(), conNull()] : AM[#Idx(_i, _i)];
        [tmpCon11, tmpCon22] = AM[#Idx(_i, _j)] == conNull() ? [conNull(), conNull()] : AM[#Idx(_i, _j)];

        tmpCon1 = this.conAddition(tmpCon1, tmpCon11);
        tmpCon2 = this.conAddition(tmpCon2, tmpCon22);

        AM[#Idx(_i, _i)] = [tmpCon1, tmpCon2];

        [tmpCon1,  tmpCon2 ] = periodTotal[_j] == conNull() ? [conNull(), conNull()] : periodTotal[_j];
        [tmpCon11, tmpCon22] = AM[#Idx(_i, _j)] == conNull() ? [conNull(), conNull()] : AM[#Idx(_i, _j)];

        tmpCon1 = this.conSubstraction(tmpCon1, tmpCon11);
        tmpCon2 = this.conSubstraction(tmpCon2, tmpCon22);
        periodTotal[_j] = [tmpCon1, tmpCon2];

        [tmpCon1,  tmpCon2 ] = periodTotal[_i] == conNull() ? [conNull(), conNull()] : periodTotal[_i];
        [tmpCon11, tmpCon22] = AM[#Idx(_i, _j)] == conNull() ? [conNull(), conNull()] : AM[#Idx(_i, _j)];

        tmpCon1 = this.conAddition(tmpCon1, tmpCon11);
        tmpCon2 = this.conAddition(tmpCon2, tmpCon22);

        periodTotal[_i] = [tmpCon1, tmpCon2];

        AM[#Idx(_i, _j)] = [connull(), connull()];

        this.checkMovedPeriods(endmth(mkdate(1, _j, year(corPeriodEnd))), endmth(mkdate(1, _i, year(corPeriodEnd))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        void new()
    {
        taxParameters        = RPayTaxParameters::find();
        stornoType           = taxParameters.PFReportStornoType;
        reportTransLimitDate = taxParameters.PFReportLimitTransDate ? endmth(taxParameters.PFReportLimitTransDate) : datemax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmplId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RHRMEmplId parmEmplId(RHRMEmplId _emplId = emplId)
    {
        emplId = _emplId;

        return emplId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFund</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RPayCounterUnit parmFund(RPayCounterUnit _fund = fund)
    {
        fund = _fund;

        return fund;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodAmount</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public container periodAmount(ReportPeriod_RU _calcPeriod)
    {
        container ret;
        int j;

        if (stornoState)
        {
            j   = this.idx(_calcPeriod);

            if (j > 0)
            {
                ret = periodTotal[j];
            }

            while (conLen(ret) != 3)
            {
                ret += [conNull()];
            }
        }
        else
        {
            ret = this.calcPlainData(_calcPeriod);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeductionCodes</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void setDeductionCodes(container _deductionCodes)
    {
        conDeductionCodes = _deductionCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeductionCodesPctBase</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void setDeductionCodesPctBase(container _deductionCodesPctBase)
    {
        conDeductionCodesPctBase = _deductionCodesPctBase;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>