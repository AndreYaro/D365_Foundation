<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCloseContinuityParentOrders</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRCloseContinuityParentOrders</c> sets parent lines
/// to invoiced if all children have been invoiced.
/// </summary>
class MCRCloseContinuityParentOrders extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds parent continuity sales lines where continuity is complete,
    ///     but the sales line status has not yet been moved to invoiced, and sets the status to invoiced.
    /// </summary>
    /// <remarks>
    /// Checks to see if all the lines on the
    ///     parent order have been invoiced or cancelled.  If they have, changes
    ///     the sales order record to a status of invoiced.
    /// </remarks>
    public void run()
    {
        MCRContinuityCustHeader      continuityCustHeader;
        MCRContinuityCustLine        continuityCustLine;
        CustPaymSched               custPaymSched;
        CustPaymSchedLine           custPaymSchedLine;
        SalesLine                   salesLine;
        SalesLine                   salesLineOfParentOrder;
        SalesTable                  salesTable;
        boolean                     continuityComplete = true;
        boolean                     orderComplete = true;
        MCRCustPaymTable             mcrCustPaymTable;
        // Find parent continuity sales lines where continuity is complete, but the sales line status has
        // not yet been moved to invoiced.
        while select InventTransId, TableId, RecId, SalesId from continuityCustHeader
            where continuityCustHeader.Complete == true
            // Bill up front parents can now be invoiced, no need to consider them here
            && !continuityCustHeader.BillUpFront
            join salesLine
                where salesLine.InventTransId == continuityCustHeader.InventTransId
                    && (salesLine.SalesStatus == SalesStatus::None
                        || salesLine.SalesStatus == SalesStatus::Backorder
                        || salesLine.SalesStatus == SalesStatus::Delivered)
        {
            continuityComplete = true;
            orderComplete = true;

            // Check the payment scheudle payment has been authorized (Credit card) or asked for (on account).
            // If it is not, mark the variable contintuity complete to false.
            select firstonly RecId from continuityCustLine
                where continuityCustLine.InventTransId == continuityCustHeader.InventTransId
                // Only care about credit card payments, if it's on account it'll never have a payment tied to it
                join RecId from mcrCustPaymTable
                where mcrCustPaymTable.RefTableId == continuityCustHeader.TableId
                    && mcrCustPaymTable.RefRecId == continuityCustHeader.RecId
                    && mcrCustPaymTable.CustPaymType == MCRCustPaymType::CreditCard
                join RecId from custPaymSched
                where (custPaymSched.ExtRecId == continuityCustLine.RecId
                    && custPaymSched.ExtTableId == tableNum(MCRContinuityCustLine))
                join MCRContinuityPaymRecID,RecId from custPaymSchedLine
                where custPaymSchedLine.ParentRecID == custPaymSched.RecId
                    && custPaymSchedLine.MCRContinuityPaymRecID == 0;
            if (custPaymSchedLine)
            {
                continuityComplete = false;
            }

            // Make sure that all sales orders created for the child are at a status of invoiced.
            select firstonly RecId from  continuityCustLine
                where(continuityCustLine.InventTransId == continuityCustHeader.InventTransId
                    && continuityCustLine.SalesId != "")
                join  salesTable
                where salesTable.SalesId == continuityCustLine.SalesId
                    && (salesTable.SalesStatus == SalesStatus::None
                        || salesTable.SalesStatus == SalesStatus::Backorder
                        || salesTable.SalesStatus == SalesStatus::Delivered);

            if (continuityCustLine)
            {
                continuityComplete = false;
            }

            // if nothing stopped continuity from completing, update the sales line status to invoiced.
            if (continuityComplete)
            {
                ttsBegin;
                salesLine = SalesLine::findInventTransId(continuityCustHeader.InventTransId, true);
                salesLine.SalesStatus = SalesStatus::Invoiced;
                salesLine.doUpdate();
                ttsCommit;
            }

            // Select all sales order lines that are not invoiced or delivered
            select firstonly SalesStatus, RecId from salesLineOfParentOrder
                where salesLineOfParentOrder.SalesId == continuityCustHeader.SalesId
                    && (salesLineOfParentOrder.SalesStatus == SalesStatus::None
                        || salesLineOfParentOrder.SalesStatus == SalesStatus::Backorder
                        || salesLineOfParentOrder.SalesStatus == SalesStatus::Delivered);

            if (salesLineOfParentOrder)
            {
                orderComplete = false;
            }

            // If all the sales line on the parent continuity order are invoiced, set the salesTable record to invoiced.
            if (orderComplete)
            {
                ttsBegin;
                salesTable = SalesTable::find(continuityCustHeader.SalesId, true);
                salesTable.SalesStatus = SalesStatus::Invoiced;
                salesTable.doUpdate();
                ttsCommit;
            }
        }
        info ("@MCR12869");
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static MCRCloseContinuityParentOrders construct()
    {
        return new MCRCloseContinuityParentOrders();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the description of the class.
    /// </summary>
    /// <returns>
    /// The description of the class.
    /// </returns>
    public static ClassDescription description()
    {
        return "@MCR12868";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        MCRCloseContinuityParentOrders closeContinuityParentOrders;
        closeContinuityParentOrders = MCRCloseContinuityParentOrders::construct();

        if (closeContinuityParentOrders.prompt())
            closeContinuityParentOrders.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>MCRCloseContinuityParentOrders</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>MCRCloseContinuityParentOrders</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>