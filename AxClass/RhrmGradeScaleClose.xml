<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmGradeScaleClose</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmGradeScaleClose extends RunBaseBatch implements BatchRetryable
{
    RHRMGradeScaleTable     rhrmGradeScaleTable;
    Map                     emplMap;
    RHRMOrderNum            orderNum;
    RHRMOrderDate           orderDate;
    NumberSeq               num;
    DialogField             dlgOrderNum;
    DialogField             dlgOrderDate;
    NumberSequenceCode      numberSequenceCode;
    RHRMOrderName           rhrmOrderName;
    RHRMGradeScaleId        gradeScaleId;
    StartDate               gradeScaleStartDate;

    #define.CurrentVersion(4)
    #localmacro.CurrentList
        gradeScaleId,
        gradeScaleStartDate,
        orderNum,
        orderDate
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeScaleStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void changeScaleStatus()
    {
        RHRMGradeScaleTable rhrmGradeScaleTableLocal;
        ;

        rhrmGradeScaleTableLocal = RHRMGradeScaleTable::findByRecId(
                                            rhrmGradeScaleTable.RecId,
                                            true );

        rhrmGradeScaleTableLocal.Active = NoYes::Yes;
        rhrmGradeScaleTableLocal.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean check()
    {
        boolean             ret;
        NumberSeq           numJournal;
        RHRMParameters      rhrmParameters = RHRMParameters::find();
        NumberSequenceCode  numberSequenceCodeJrn;
        #define.blank(' ')
        ;

        ret = this.checkExistScaleTable() && this.checkPreviousGradeScale();

        numberSequenceCodeJrn = RHRMParameters::numRefJournalId().numberSequenceTable().NumberSequence;

        if (numberSequenceCodeJrn)
        {
            numJournal = NumberSeq::newGetNumFromCode(numberSequenceCodeJrn, NumberSeqScopeFactory::createDefaultScope(), true);
        }

        if (! numJournal)
        {
            ret = ret && checkFailed("@SYS27388" + #blank + "@SYS311272" + "@GLS106746");
        }
        if (! num)
        {
            ret = ret && checkFailed("@SYS27388" + #blank + "@SYS311272" + "@GLS106506");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistScaleTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkExistScaleTable()
    {
        boolean     ret = true;
        ;

        if (RHRMGradeScaleTable::findActive(rhrmGradeScaleTable.GradeScaleId, maxDate()).StartDate > rhrmGradeScaleTable.StartDate)
        {
            ret = checkFailed(strFmt("@RUP2474", rhrmGradeScaleTable.GradeScaleId, rhrmGradeScaleTable.StartDate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPreviousGradeScale</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkPreviousGradeScale()
    {
        boolean                 ret = true;
        RHRMGradeScaleTable     rhrmGradeScaleTableActive;
        RHRMGradeScaleLine      rhrmGradeScaleLineActive;
        RHRMGradeScaleLine      rhrmGradeScaleLineLocal;

        rhrmGradeScaleTableActive = RHRMGradeScaleTable::findActive(rhrmGradeScaleTable.GradeScaleId,
                                                                    rhrmGradeScaleTable.StartDate);

        if (rhrmGradeScaleTableActive.RecId != 0)
        {
            select count(RecId) from rhrmGradeScaleLineActive
                where rhrmGradeScaleLineActive.GradeScaleId == rhrmGradeScaleTableActive.GradeScaleId &&
                      rhrmGradeScaleLineActive.StartDate    == rhrmGradeScaleTableActive.StartDate;

            select count(RecId) from rhrmGradeScaleLineLocal
                where rhrmGradeScaleLineLocal.GradeScaleId == rhrmGradeScaleTable.GradeScaleId &&
                      rhrmGradeScaleLineLocal.StartDate    == rhrmGradeScaleTable.StartDate;

            if (rhrmGradeScaleLineActive.RecId != rhrmGradeScaleLineLocal.RecId)
            {
                ret = ret && checkFailed("@RUP2475");
            }

            while select GradeId from rhrmGradeScaleLineActive
                where rhrmGradeScaleLineActive.GradeScaleId == rhrmGradeScaleTableActive.GradeScaleId &&
                      rhrmGradeScaleLineActive.StartDate    == rhrmGradeScaleTableActive.StartDate
            {
                if (! RHRMGradeScaleLine::exist(rhrmGradeScaleTable.GradeScaleId,
                                               rhrmGradeScaleTable.StartDate,
                                               rhrmGradeScaleLineActive.GradeId))
                {
                    ret = ret && checkFailed(strFmt("@RUP2476", rhrmGradeScaleLineActive.GradeId));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    protected void cleanupDialog()
    {
        super();

        if (numberSequenceCode)
        {
            NumberSeq::release(numberSequenceCode, orderNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrderHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RHRMOrderTable createOrderHeader()
    {
        RHRMOrderTable              rhrmOrderTable;
        RHRMParameters              rhrmParameters = RHRMParameters::find();

        rhrmOrderTable.initValue();
        rhrmOrderTable.initFromRHRMJournalName(rhrmOrderName);

        rhrmOrderTable.TransDate    = orderDate;
        rhrmOrderTable.JournalType  = RHRMJournalType::Transfer;
        rhrmOrderTable.Reason       = strFmt("@RUP2477", rhrmGradeScaleTable.GradeScaleId, rhrmGradeScaleTable.StartDate);

        rhrmOrderTable.JournalId = JournalTableData::newTable(rhrmOrderTable).nextJournalId();

        rhrmOrderTable.OrderNum  = orderNum;

        if (! rhrmOrderTable.validateWrite())
        {
            throw error("@RUP2020");
        }

        rhrmOrderTable.insert();

        return rhrmOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrderTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LineNum createOrderTrans(RHRMOrderTable _orderTable)
    {
        RHRMOrderTrans      rhrmOrderTrans;
        RHRMOrderTrans      rhrmOrderTransLastOperation;
        RPayHistory         rpayHistoryLast;
        RHRMGradeScaleLine  rhrmGradeScaleLine;
        LineNum             lineNum;
        MapEnumerator       emplEnumerator;

        emplEnumerator = this.emplMap().getEnumerator();

        while (emplEnumerator.moveNext())
        {
            lineNum++;

            rhrmOrderTrans.initValue();

            rpayHistoryLast = RPayHistory::findLastSignOnMove(emplEnumerator.currentKey(), rhrmGradeScaleTable.StartDate);

            rhrmOrderTransLastOperation = RHRMOrderTrans::find(rpayHistoryLast.OrderTransRecId);

            rhrmOrderTrans.data(rhrmOrderTransLastOperation);

            rhrmOrderTrans.RecId                      = 0;
            rhrmOrderTrans.JournalId                  = _orderTable.JournalId;
            rhrmOrderTrans.OrderTableRecId            = _orderTable.RecId;
            rhrmOrderTrans.StartDate                  = rhrmGradeScaleTable.StartDate;
            rhrmOrderTrans.TransferWithoutTermChanges = NoYes::Yes;

            rhrmGradeScaleLine = RHRMGradeScaleLine::find(rhrmGradeScaleTable.GradeScaleId,
                                                          rhrmGradeScaleTable.StartDate,
                                                          rpayHistoryLast.GradeId);

            rhrmOrderTrans.ValueSum = rhrmGradeScaleLine.wage();

            rhrmOrderTrans.LineNum  = lineNum;

            if (! rhrmOrderTrans.validateWrite())
            {
                throw error(strFmt("@RUP2478", emplEnumerator.currentKey(), emplEnumerator.currentValue()));
            }

            rhrmOrderTrans.insert();
        }

        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferOrder</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createTransferOrder()
    {
        RHRMOrderTable              rhrmOrderTable;
        LineNum                     lineNum;
        SysInfoAction_FormName_RU   action;
        RHRMParameters              rhrmParameters = RHRMParameters::find();

        if (! rhrmParameters.GradeScaleTransferOrderNameId)
        {
            action = new SysInfoAction_FormName_RU(rhrmParameters, formStr(RHRMParameters));
            throw error("@RUP2479", '', action);
        }

        rhrmOrderName = RHRMOrderName::find(rhrmParameters.GradeScaleTransferOrderNameId);

        if (this.emplMap().elements())
        {
            rhrmOrderTable = this.createOrderHeader();
            lineNum = this.createOrderTrans(rhrmOrderTable);
            this.updateOrderLineNum(rhrmOrderTable, lineNum);
            this.updateGradeScaleTable(rhrmOrderTable);

            action = new SysInfoAction_FormName_RU(rhrmOrderTable, formStr(RHRMOrderTable));

            info(strFmt("@RUP2480", rhrmOrderTable.OrderNum, rhrmOrderTable.TransDate), '', action);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@RUP2481");

        dialog.addGroup("@RUP2102");
        dlgOrderNum  = dialog.addFieldValue(extendedTypeStr(RHRMOrderNum), orderNum);
        dlgOrderNum.lookupButton(1);
        dlgOrderDate = dialog.addFieldValue(extendedTypeStr(RHRMOrderDate), orderDate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplMap</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map emplMap()
    {
        RHRMEmplTable   emplTable;
        RPayHistory     rPayHistory;
        RPayHistory     rPayHistoryJoin;

        if (!emplMap)
        {
            emplMap = new Map(Types::String, Types::String);

            while select EmployeeId from emplTable
                where emplTable.PayEmploymentDate <= rhrmGradeScaleTable.StartDate &&
                     (emplTable.PayResignedDate   == dateNull()                    ||
                      emplTable.PayResignedDate   >= rhrmGradeScaleTable.StartDate)
            exists join rPayHistoryJoin
                where rPayHistoryJoin.Number       == emplTable.EmployeeId &&
                      rPayHistoryJoin.GradeScaleId == rhrmGradeScaleTable.GradeScaleId
            {
                rPayHistory = RPayHistory::findLastSignOnMove(emplTable.EmployeeId, rhrmGradeScaleTable.StartDate);

                if (rPayHistory.GradeScaleId == rhrmGradeScaleTable.GradeScaleId)
                {
                    emplMap.insert(emplTable.EmployeeId, emplTable.name());
                }
            }
        }

        return emplMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (orderNum != dlgOrderNum.value())
        {
            if (numberSequenceCode)
            {
                NumberSeq::release(numberSequenceCode, orderNum);
            }
            orderNum = dlgOrderNum.value();
        }

        orderDate = dlgOrderDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initValue(RHRMGradeScaleTable _gradeScaleTable)
    {
        ;
        rhrmGradeScaleTable = _gradeScaleTable;
        rhrmGradeScaleTable.selectForUpdate(true);

        gradeScaleId        = rhrmGradeScaleTable.GradeScaleId;
        gradeScaleStartDate = rhrmGradeScaleTable.StartDate;

        numberSequenceCode = rhrmOrderName.OrderNumberSequence;
        numberSequenceCode = numberSequenceCode ?
                             numberSequenceCode :
                             RHRMParameters::numRefOrderNum(RHRMJournalType::Transfer).numberSequenceTable().NumberSequence;

        if (numberSequenceCode)
        {
            num = NumberSeq::newGetNumFromCode(numberSequenceCode, NumberSeqScopeFactory::createDefaultScope(), true);
            orderNum     = num.num();
        }
        orderDate = gradeScaleStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ;
        ttsbegin;

        this.changeScaleStatus();
        this.createTransferOrder();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version = conPeek(_packedClass,1);
        ;
        switch (version)
        {
            case #CurrentVersion :
                if (! rhrmGradeScaleTable)
                {
                    [version, #CurrentList] = _packedClass;
                    rhrmGradeScaleTable = RHRMGradeScaleTable::find(gradeScaleId, gradeScaleStartDate, true);
                }
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGradeScaleTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateGradeScaleTable(RHRMOrderTable _orderTable)
    {
        RHRMGradeScaleTable rhrmGradeScaleTableLocal;

        rhrmGradeScaleTableLocal = RHRMGradeScaleTable::findByRecId(rhrmGradeScaleTable.RecId, true);
        rhrmGradeScaleTableLocal.TransferJournalId = _orderTable.JournalId;
        rhrmGradeScaleTableLocal.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderLineNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateOrderLineNum(RHRMOrderTable _orderTable, LineNum _lineNum)
    {
        RHRMOrderTable rhrmOrderTableLocal;

        rhrmOrderTableLocal = RHRMOrderTable::find(_orderTable.RecId, true);

        rhrmOrderTableLocal.NumOfLines = any2int(_lineNum);
        rhrmOrderTableLocal.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@RUP2481";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RHRMGradeScaleClose     gradeScaleClose;
        ;

        if (! _args || _args.dataset() != tableNum(RHRMGradeScaleTable))
            throw error(strFmt("@SYS25516", RHRMGradeScaleClose::description()));

        gradeScaleClose = new RHRMGradeScaleClose();
        gradeScaleClose.initValue(_args.record());

        if (gradeScaleClose.check() && gradeScaleClose.prompt())
        {
            gradeScaleClose.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>