<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResCategoryNestedSetModelRebuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResCategoryNestedSetModelRebuilder</c> class finds and fixes inconsistencies in the nested set model of product category hierarchies.
/// </summary>
internal final class EcoResCategoryNestedSetModelRebuilder
{
    private boolean doUpdate = true;
    private boolean inconsistencyFound = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>EcoResCategoryNestedSetModelRebuilder</c> class.
    /// </summary>
    /// <returns>The newly created instance.</returns>
    public static EcoResCategoryNestedSetModelRebuilder construct()
    {
        return new EcoResCategoryNestedSetModelRebuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebuildNestedSetTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reconstructs the nested set model of the given hierarchy and fixes it if doUpdate is set to true.
    /// </summary>
    /// <param name = "_categoryHierarchyId">The id of the category hierarchy to check.</param>
    /// <returns>true if any inconsistencies were found in the model; otherwise false.</returns>
    public boolean rebuildNestedSetTree(EcoResCategoryHierarchyId _categoryHierarchyId)
    {
        this.inconsistencyFound = false;
        ttsbegin;
        EcoResCategory rootCategory;
        rootCategory.selectForUpdate(doUpdate);
        select firstonly pessimisticlock rootCategory
            where rootCategory.CategoryHierarchy == _categoryHierarchyId
               && rootCategory.ParentCategory    == 0;
        this.process(rootCategory, 1, _categoryHierarchyId);
        ttscommit;

        return this.inconsistencyFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    private EcoResCategoryNestedSetRight process(
        EcoResCategory _category,
        EcoResCategoryNestedSetLeft _nestedSetLeft,
        EcoResCategoryHierarchyId _categoryHierarchyId)
    {
        if (!this.shouldContinue())
        {
            // once an inconsistency has been found, stop traversing the tree for performance reasons
            return _nestedSetLeft;
        }

        EcoResCategoryNestedSetRight nestedSetRight = _nestedSetLeft;
        EcoResCategory childCategory = this.findCategoryChildren(_category, _categoryHierarchyId);

        while (childCategory && this.shouldContinue())
        {
            nestedSetRight++;
            nestedSetRight = this.process(childCategory, nestedSetRight, _categoryHierarchyId);
            next childCategory;
        }

        nestedSetRight++;
        
        if (_category.NestedSetLeft != _nestedSetLeft || _category.NestedSetRight != nestedSetRight)
        {
            this.inconsistencyFound = true;
            if (doUpdate)
            {
                _category.NestedSetLeft = _nestedSetLeft;
                _category.NestedSetRight = nestedSetRight;
                _category.update();
            }
        }

        return nestedSetRight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCategoryChildren</Name>
				<Source><![CDATA[
    private EcoResCategory findCategoryChildren(EcoResCategory _category, EcoResCategoryHierarchyId _categoryHierarchyId)
    {
        EcoResCategory childCategory;
        childCategory.selectForUpdate(doUpdate);
        select childCategory
         order by childCategory.RecId
            where childCategory.CategoryHierarchy == _categoryHierarchyId
               && childCategory.ParentCategory    == _category.RecId;
        return childCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldContinue</Name>
				<Source><![CDATA[
    private boolean shouldContinue()
    {
        return this.doUpdate || !this.inconsistencyFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoUpdate</Name>
				<Source><![CDATA[
    public boolean parmDoUpdate(boolean _doUpdate)
    {
        doUpdate = _doUpdate;
        return doUpdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>