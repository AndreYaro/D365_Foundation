<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostAdvancedJournalHourNeverLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjPostAdvancedJournalHourNeverLedger extends ProjPost
{
    private ProjAdvancedJournalLine projAdvancedJournalLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkQtyNegative</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the transaction should check for negative quantity values.
    /// </summary>
    /// <returns>
    /// Gets false.
    /// </returns>
    public boolean checkQtyNegative()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    public boolean checkTrans(boolean _throwerror = false)
    {
        boolean                         ok          = true;
        ListEnumerator                  enumerator;
        ProjFundingSourceRefId          fundingSourceId;
        LedgerDimensionAccount          mergedLedgerDimension;
        LedgerDimensionDefaultAccount   defaultLedgerDimension;

        ok  = super();

        ok = (ok &&  projTrans.validateWrite());

        if (!projTrans.linePropertyId())
        {
            // Line property is missing.
            ok = checkFailed("@SYS50154") && ok;
        }

        ProjLedgerStatus emplLedgerStatus = ProjLedgerStatus::Never;
        NoYes postWIPEmpl;
        ProjTable projTable = ProjTable::find(projTrans.projId());
        
        if (!projTable.ProjInvoiceProjId)
        {
            // Internal project, post cost to P/L accounts.
            postWIPEmpl = NoYes::No;
        }
        else
        {
            ProjRevenueProfile revProfile = ProjRevRecHelper::getRevProfileForTransactionType(projTable, ProjTransType::Hour);
            postWIPEmpl = revProfile.PostWIPEmpl;
        }
        
        if (projTrans.canBeInvoiced() && projTrans.transTurnover() && postWIPEmpl)
        {
            if (!enumerator)
            {
                enumerator = ProjFundingSource::getFundingSources( projTrans ).getEnumerator();
            }
            else
            {
                enumerator.reset();
            }

            while (enumerator.moveNext())
            {
                fundingSourceId = enumerator.current();
                defaultLedgerDimension=projTrans.salesOffsetAccountLedgerDimension(fundingSourceId);
                // need to merge the default account with the default dimensions and do the check on the fully instantiated account
                mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());
                ok = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(mergedLedgerDimension)) && ok;

                defaultLedgerDimension=projTrans.salesValueAccountLedgerDimension(fundingSourceId);
                // need to merge the default account with the default dimensions and do the check on the fully instantiated account
                mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, this.defaultDimension());
                ok = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(mergedLedgerDimension)) && ok;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateBudget</Name>
				<Source><![CDATA[
    public boolean checkUpdateBudget()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateForecast</Name>
				<Source><![CDATA[
    public boolean checkUpdateForecast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEnterCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting should have a credit amount for the cost account.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by the class that extends this class to provide the necessary
    /// functionality for the transaction that is being posted.
    /// </remarks>
    protected boolean costEnterCredit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension that posts the credit side of the transactions for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract that will be used by this
    /// transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension that posts the credit amounts for costs.
    /// </returns>
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension that is used to post the debit side of a transaction for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract that will be used by this
    /// transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension that is used to post the debit amounts of cost transactions.
    /// </returns>
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId )
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the<c>ProjPostCostJournal</c> class.
    /// </summary>
    /// <param name="_buffer">
    /// The table for the transaction type.
    /// </param>
    public void new(Common _buffer)
    {
        switch (_buffer.TableId)
        {
            case tableNum(ProjAdvancedJournalLine):
                projAdvancedJournalLine = _buffer;
                projTrans = ProjTrans::newProjTransAdvancedJournal(projAdvancedJournalLine);
                break;
        }

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type that is associated with posting project costs based on the current
    /// project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeCost()
    {
        return LedgerPostingType::ProjNeverLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type for project offset cost posting based on the current ledger status
    /// of the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeOffsetCost()
    {
        return LedgerPostingType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromAdvancedJournalLine</Name>
				<Source><![CDATA[
    protected ProjEmplTrans initTransFromAdvancedJournalLine(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        ProjEmplTrans  projEmplTrans;
       
        projEmplTrans.CategoryId = _projAdvancedJournalLine.ProjCategoryId;
        projEmplTrans.CurrencyId = _projAdvancedJournalLine.PriceCurrency;
        projEmplTrans.DefaultDimension = _projAdvancedJournalLine.DefaultDimension;
        projEmplTrans.ProjId = _projAdvancedJournalLine.ProjId;
        projEmplTrans.ActivityNumber = _projAdvancedJournalLine.ActivityNumber;
        projEmplTrans.Qty = _projAdvancedJournalLine.Quantity;
        projEmplTrans.LinePropertyId = _projAdvancedJournalLine.LinePropertyId;
        projEmplTrans.Txt = _projAdvancedJournalLine.Text;
        projEmplTrans.TransDate = _projAdvancedJournalLine.ProjTransDate;
        projEmplTrans.TaxGroupId = _projAdvancedJournalLine.TaxGroup;
        projEmplTrans.TaxItemGroupId = _projAdvancedJournalLine.TaxItemGroup;
        projEmplTrans.Resource = _projAdvancedJournalLine.ResourceId;
        projEmplTrans.TransId = ProjParameters::newTransId();
        projEmplTrans.TransIdRef = _projAdvancedJournalLine.ProjTransId;
        projEmplTrans.PSAContractLineNum = _projAdvancedJournalLine.ContractLineId;
        projEmplTrans.TransactionOrigin = ProjOrigin::ProjAdvancedJournal;
        projEmplTrans.VoucherJournal = _projAdvancedJournalLine.Voucher;
        projEmplTrans.SubcontractLine = _projAdvancedJournalLine.SubcontractLine;
        projEmplTrans.PSAIndirectComponentGroup = _projAdvancedJournalLine.PSAIndirectComponentGroup;
        projEmplTrans.Worker = _projAdvancedJournalLine.Worker;

        return projEmplTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjEmplTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the field of the <c>ProjEmplTransSale</c> record.
    /// </summary>
    /// <param name = "_projEmplTrans">
    /// The <c>ProjEmplTrans</c> record.
    /// </param>
    /// <param name = "_fundingSourceRecId">
    /// The funding source reference ID.
    /// </param>
    /// <returns>
    /// The <c>projEmplTransSale</c> record.>
    /// </returns>
    protected ProjEmplTransSale initializeProjEmplTransSale(ProjEmplTrans _projEmplTrans, ProjFundingSourceRefId _fundingSourceRecId)
    {
        ProjEmplTransSale projEmplTransSale;
        projEmplTransSale.TransId = _projEmplTrans.TransId;
        projEmplTransSale.FundingSource = _fundingSourceRecId;
        projEmplTransSale.SalesPrice = projTrans.salesPrice();
        projEmplTransSale.LineAmount = CurrencyExchangeHelper::amount(projEmplTransSale.SalesPrice * projTrans.qty(), projTrans.currencyIdSales());
        projEmplTransSale.LedgerTransdate = this.getLedgerJournalTransDate();
        projEmplTransSale.WIPPeriod = dateNull();
        projEmplTransSale.wipType = ProjWIPType::AccruedTurnover;
        projEmplTransSale.ControlId = '';
        projEmplTransSale.ControlVersion = 0;

        if (this.checkEnterSalesAccrued() && ProjFundingSource::isExternalFunding(_fundingSourceRecId))
        {
            projEmplTransSale.LedgerSalesPosted  = true;
            projEmplTransSale.LedgerSalesAmount = 0;
        }

        projEmplTransSale.TransStatus = ProjTransStatus::Posted;

        ProjFundingSource projFundingSource = ProjFundingSource::find(_fundingSourceRecId);
        projEmplTransSale.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(_projEmplTrans.DefaultDimension, projFundingSource.DefaultDimension);

        return projEmplTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjEmplTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the field of the <c>ProjCostTransSale</c> record.
    /// </summary>
    /// <param name = "_projEmplTrans">
    /// The <c>ProjEmplTrans</c> record.
    /// </param>
    /// <param name = "_fundingSourceRecId">
    /// The funding source reference ID.
    /// </param>
    /// <param name = "_lineAmount">
    /// The line amount value.
    /// </param>
    /// <returns>
    /// The <c>ProjEmplTransCost</c> record.>
    /// </returns>
    protected ProjEmplTransCost initializeProjEmplTransCost(ProjEmplTrans _projEmplTrans, ProjFundingSourceRefId _fundingSourceRecId, AmountCur _lineAmount)
    {
        ProjEmplTransCost projEmplTransCost;
        projEmplTransCost.TransId = _projEmplTrans.TransId;
        projEmplTransCost.FundingSource = _fundingSourceRecId;
        projEmplTransCost.LineAmount = _lineAmount;
        projEmplTransCost.CostPrice = projTrans.costPrice();
        projEmplTransCost.LedgerCostAmountMST = projEmplTransCost.CostPrice * projTrans.qty();
        projEmplTransCost.LedgerTransdate = this.getLedgerJournalTransDate();
        projEmplTransCost.LedgerStatusCost = ProjLedgerStatus::Never;
        projEmplTransCost.TransStatus = ProjTransStatus::Posted;
        ProjFundingSource projFundingSource = ProjFundingSource::find(_fundingSourceRecId);
        projEmplTransCost.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(_projEmplTrans.DefaultDimension, projFundingSource.DefaultDimension);

        return projEmplTransCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method returns true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjEmplTrans projEmplTrans = this.initTransFromAdvancedJournalLine(projAdvancedJournalLine);
        projEmplTrans.ResourceCategory = projTrans.resourceCategory();

        if (!projEmplTrans.validateWrite())
        {
            throw error("@SYS21628");
        }

        projEmplTrans.insert();

        // this creates the cost and sales distributions
        this.createCostSalesDistributions(projTrans.transCost(), projTrans.transTurnover());
        
        if (allocationError == NoYes::No)
        {
            MapEnumerator fundingAllocationEnumerator = costDistributions.getEnumerator();

            //Create projEmplTransCost record
            while (fundingAllocationEnumerator.moveNext())
            {
                ProjEmplTransCost projEmplTransCost = this.initializeprojEmplTransCost(projEmplTrans, fundingAllocationEnumerator.currentKey(), fundingAllocationEnumerator.currentValue());
                projEmplTransCost.insert();
            }

            // Create projEmplTransSale record
            fundingAllocationEnumerator = saleDistributions.getEnumerator();
            while (fundingAllocationEnumerator.moveNext())
            {
                ProjEmplTransSale projEmplTransSale = this.initializeprojEmplTransSale(projEmplTrans, fundingAllocationEnumerator.currentKey());
                projEmplTransSale.insert();
            }
        }

        this.parmTransIdCost(projEmplTrans.TransId);
        this.parmTransIdSales(projEmplTrans.TransId);

        transIdNew = projEmplTrans.TransId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>