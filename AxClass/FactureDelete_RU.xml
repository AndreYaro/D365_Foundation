<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureDelete_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FactureDelete_RU extends RunBase
{
    FactureJour_RU          jour;
    FactureTrans_RU         trans;

    SalesPurchBookTable_RU  bookTable;
    SalesPurchBookTrans_RU  bookTrans;

    CustVendInvoiceJour     invoiceJour;
    CustVendInvoiceTrans    invoiceTrans;

    Set                     joursProcessed;

    int                     errorCount;
    boolean                 dummy;

    protected const int currentVersion = 1;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addError</Name>
				<Source><![CDATA[
    final protected void addError(str _errorText)
    {
        error(_errorText);
        errorCount ++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected void check()
    {
        FactureJour_RU factureJour;

        if (jour.CorrectionType != FactureCorrectionType_RU::Revision)
        {
            factureJour = jour.getLastCorrFacture();

            if (factureJour.RecId != jour.RecId)
            {
                this.addError(strfmt("@GLS112743", factureJour.FactureExternalId, factureJour.FactureDate));
            }
        }

        select firstonly factureJour
            where factureJour.ExportProcessing == NoYes::No
               &&  ((jour.RefOriginalFacture
               &&   factureJour.RefOriginalFacture == jour.RefOriginalFacture)
               ||   factureJour.RefOriginalFacture == jour.RecId)
               &&  (factureJour.CreatedDateTime     > jour.CreatedDateTime
               ||  (factureJour.CreatedDateTime    == jour.CreatedDateTime
               &&   factureJour.SeqNumber           > jour.SeqNumber));

        if (! factureJour && jour.RefLastCorrFacture)
        {
            select firstonly factureJour
                where   factureJour.RefLastCorrFacture == jour.RefLastCorrFacture
                   &&  (factureJour.CreatedDateTime     > jour.CreatedDateTime
                   ||  (factureJour.CreatedDateTime    == jour.CreatedDateTime
                   &&   factureJour.SeqNumber           > jour.SeqNumber));
        }

        if (factureJour)
        {
            this.addError(strfmt("@GLS112743", factureJour.FactureExternalId, factureJour.FactureDate));
        }

        this.checkCommReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCommReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if facture reference exists in report for principal lines.
    /// </summary>
    protected void checkCommReport()
    {
        CommReportJour_RU            commReportJour;
        CommReportTransItem_RU       commReportTransItem;
        CommReportTransPrepayment_RU commReportTransPrepayment;

        select firstonly commReportJour
        exists join commReportTransItem
        where commReportTransItem.RefFactureJour == jour.RecId;

        if (! commReportJour)
        {
            select firstonly commReportJour
            exists join commReportTransPrepayment
            where commReportTransPrepayment.RefFactureJour == jour.RecId;
        }

        if (commReportJour)
        {
            this.addError(strfmt("@SalesPurchBook:FactureReferencedFromReportForPrincipal", commReportJour.ReportId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    protected void delete()
    {
        FactureJour_RU origFacture;

        if (jour.CorrectionType == FactureCorrectionType_RU::Revision)
        {
            this.updateRevisedFacture();
        }

        while select trans
            where trans.FactureId == jour.FactureId &&
                  trans.Module    == jour.Module
        {
            switch (trans.FactureLineType)
            {
                case FactureLineType_RU::InvoiceLine     :
                    this.updateInvoiceTrans(trans);
                    break;
                case FactureLineType_RU::Markup          :
                    this.updateMarkup(trans);
                    break;
                case FactureLineType_RU::AdvanceReport   :
                    this.updateAdvance(trans);
                    break;
                case FactureLineType_RU::TaxCorrection   :
                case FactureLineType_RU::AdvanceAdjustment:                    
                    break;
                case FactureLineType_RU::Prepayment      :
                case FactureLineType_RU::InvoiceRoundOff :
                case FactureLineType_RU::InvoiceEndDisc  :
                    this.updateExtra(trans);
                    break;
                case FactureLineType_RU::GTDLine              :
                    this.updateCustomJournalTable_RU();
                    break;
                case FactureLineType_RU::CustomCorrectionLine :
                    this.updateCustomCorrectionTable_RU();
                    break;
                default                                  :
                    throw error(Error::wrongUseOfFunction(funcname()));
            }
        }

        this.deleteBookTrans();

        if (jour.isTmp())
        {
            jour = FactureJour_RU::find(jour.FactureId, jour.Module, true);
        }

        if ((jour.CorrectedFactureExternalId                              ||
             jour.CorrectionType == FactureCorrectionType_RU::Correction) &&
             jour.CorrectionType != FactureCorrectionType_RU::Revision)
        {
            origFacture = jour.getCorrectedFacture(true);

            jour.delete();

            while (origFacture)
            {
                FactureJour_RU::updateFactureLinks(origFacture.RecId);
                next origFacture;
            }
        }
        else
        {
            jour.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBookTrans</Name>
				<Source><![CDATA[
    abstract protected void deleteBookTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;
        ;

        dialog = super();

        dialog.caption("@GLS104947");
        dialog.addText(strfmt("@GLS104948", jour.FactureExternalId));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorClosedBook</Name>
				<Source><![CDATA[
    abstract protected str errorClosedBook(SalesPurchBookId_RU _bookId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJour</Name>
				<Source><![CDATA[
    abstract protected CustVendInvoiceJour getInvoiceJour(CustVendInvoiceTrans _trans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceTrans</Name>
				<Source><![CDATA[
    abstract protected CustVendInvoiceTrans getInvoiceTrans(FactureTrans_RU   _trans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourTableId</Name>
				<Source><![CDATA[
    abstract protected tableId jourTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FactureJour_RU _jour)
    {
        super();

        jour           = _jour;
        joursProcessed = new Set(typeName2Type(extendedTypeStr(recId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, dummy];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    final public void run()
    {
        #OCCRetryCount
        ;

        try
        {
            ttsbegin;

            this.check();

            if (errorCount)
            {
                throw error("@GLS101992");
            }

            this.delete();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    abstract protected tableId transTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conpeek(_packedClass, 1);
        ;
        switch (version)
        {
            case currentVersion :
                [version, dummy] = _packedClass;
                break;
            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAdvance</Name>
				<Source><![CDATA[
    protected void updateAdvance(FactureTrans_RU   _trans)
    {
        if (invoiceTrans)
        {
            this.updateInvoiceJour(this.getInvoiceJour(invoiceTrans));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomCorrectionTable_RU</Name>
				<Source><![CDATA[
    void updateCustomCorrectionTable_RU()
    {
        CustomCorrectionTable_RU  customCorrectionTable;
        ;

        update_recordset customCorrectionTable
            setting FactureId = ''
            where customCorrectionTable.FactureId == jour.FactureId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomJournalTable_RU</Name>
				<Source><![CDATA[
    void updateCustomJournalTable_RU()
    {
        CustomJournalTable_RU  customJournalTable;
        ;

        update_recordset customJournalTable
            setting FactureId = ''
            where customJournalTable.FactureId == jour.FactureId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExtra</Name>
				<Source><![CDATA[
    protected void updateExtra(FactureTrans_RU   _trans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceJour</Name>
				<Source><![CDATA[
    protected void updateInvoiceJour(CustVendInvoiceJour _jour)
    {
        if (_jour && ! joursProcessed.in(_jour.RecId))
        {
            _jour.setFacturedFully_RU(NoYes::No);
            _jour.update();

            joursProcessed.add(_jour.RecId);

            this.updateSourceOrder(_jour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceTrans</Name>
				<Source><![CDATA[
    protected void updateInvoiceTrans(FactureTrans_RU _trans)
    {
        invoiceTrans    = this.getInvoiceTrans(_trans);
        if (invoiceTrans)
        {
            this.updateInvoiceJour(this.getInvoiceJour(invoiceTrans));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkup</Name>
				<Source><![CDATA[
    abstract protected void updateMarkup(FactureTrans_RU _trans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRevisedFacture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates revised field of corrected facture if revision facture deleted.
    /// </summary>
    protected void updateRevisedFacture()
    {
        FactureJour_RU   revisedFacture;

        select firstonly forupdate revisedFacture
            order by CreatedDateTime desc, SeqNumber desc
            where (revisedFacture.RecId             == jour.RefRevisedFacture
                || revisedFacture.RefRevisedFacture == jour.RefRevisedFacture)
                && revisedFacture.Revised           == NoYes::Yes;

        if (revisedFacture)
        {
            revisedFacture.Revised = NoYes::No;
            revisedFacture.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceOrder</Name>
				<Source><![CDATA[
    // overloaded in FactureDelete_Cust_RU, FactureDelete_Vend_Ru
    protected void updateSourceOrder(CustVendInvoiceJour _jour)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FactureDelete_RU construct(FactureJour_RU _jour)
    {
        FactureDelete_RU    ret;

        if (_jour.FactureType != FactureType_RU::Invoice       &&
            _jour.FactureType != FactureType_RU::AdvanceReport &&
            _jour.FactureType != FactureType_RU::TaxCorrection &&
            _jour.FactureType != FactureType_RU::Prepayment    &&
            _jour.FactureType != FactureType_RU::Facture       &&
            _jour.FactureType != FactureType_RU::GTD           &&
            _jour.FactureType != FactureType_RU::CustomCorrection &&
            _jour.FactureType != FactureType_RU::AdvanceAdjustment            
            )
            throw error("@GLS105021");

        switch (_jour.Module)
        {
            case FactureModule_RU::Cust                    :
                switch (_jour.FactureType)
                {
                    case FactureType_RU::Prepayment :
                        ret = new FactureDelete_CustPrepayment_RU(_jour);
                        break;
                    case FactureType_RU::Facture    :
                        ret = new FactureDelete_ExportFacture_RU(_jour);
                        break;
                    default :
                        if (_jour.FactureType == FactureType_RU::AdvanceAdjustment)
                        {
                            ret = new FactureDelete_AdvanceAdjustment_RU(_jour);
                        }
                        else
                        {
                            ret = new FactureDelete_Cust_RU(_jour);
                        }
                }
                break;
            case FactureModule_RU::Vend                    :
                if (_jour.FactureType == FactureType_RU::Prepayment)
                {
                    ret = new FactureDelete_VendPrepayment_RU(_jour);
                }
                else if (_jour.FactureType == FactureType_RU::GTD || _jour.FactureType == FactureType_RU::CustomCorrection)
                {
                    ret = new FactureDelete_VendGTD_RU(_jour);
                }
                else if (_jour.FactureType == FactureType_RU::AdvanceAdjustment)
                {
                    ret = new FactureDelete_AdvanceAdjustment_RU(_jour);
                }
                else
                {
                    ret = new FactureDelete_Vend_RU(_jour);
                }
                break;
            case FactureModule_RU::Empl                    :
                ret = new FactureDelete_Empl_RU(_jour);
                break;
            case FactureModule_RU::TaxCorrectionPurch      :
            case FactureModule_RU::TaxCorrectionPurch_Cust :
                ret = new FactureDelete_TaxCorrection_Purch_RU(_jour);
                break;
            case FactureModule_RU::TaxCorrectionSales      :
            case FactureModule_RU::TaxCorrectionSales_Vend :
                ret = new FactureDelete_TaxCorrection_Sales_RU(_jour);
                break;
            default                     :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static Description description()
    {
        return "@GLS104923";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FactureDelete_RU del;

        if (! _args          ||
            ! _args.record() ||
            _args.record().TableId != tablenum(FactureJour_RU))
        {
            throw error(strfmt("@GLS103487", strfmt("@SYS70938", classstr(FactureDelete_RU), FactureDelete_RU::description())));
        }

        del = FactureDelete_RU::construct(_args.record());

        if (del.prompt())
        {
            del.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>