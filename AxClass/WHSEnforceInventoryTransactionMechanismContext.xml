<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSEnforceInventoryTransactionMechanismContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSEnforceInventoryTransactionMechanismContext</c> class allows the caller code to enforce usage 
/// of the warehouse inventory transaction mechanism based on <c>InventTrans</c> or <c>WHSInventoryTransaction</c>.
/// </summary>
using Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation;
public final class WHSEnforceInventoryTransactionMechanismContext implements System.IDisposable
{
    private static WHSEnforceInventoryTransactionMechanismContext instance;
    private WHSInventoryTransactionMechanismEnum inventoryTransactionMechanismToEnforce;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmInventoryTransactionMechanismToEnforce</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSInventoryTransactionMechanismEnum parmInventoryTransactionMechanismToEnforce()
    {
        return inventoryTransactionMechanismToEnforce;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventoryTransactionMechanism</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSEnforceInventoryTransactionMechanismContext defaultInventoryTransactionMechanism(WHSInventoryTransactionMechanismEnum _inventoryTransactionMechanismToEnforce)
    {
        if (_inventoryTransactionMechanismToEnforce == WHSInventoryTransactionMechanismEnum::InventTrans)
        {
            SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

            serializer.setValue(classStr(WHSEnforceInventoryTransactionMechanismContext), funcName());
            serializer.setValue('InventoryTransactionMechanism', enum2Symbol(enumNum(WHSInventoryTransactionMechanismEnum), _inventoryTransactionMechanismToEnforce));
            serializer.setValue('CallStack', WHSInstrumentationLogger::currentStackTrace());
 
            XppRuntimeEventSource::EventWriteInfoLogMark(Exception::Info, serializer.toString());
        }
        instance = new WHSEnforceInventoryTransactionMechanismContext();

        instance.inventoryTransactionMechanismToEnforce = _inventoryTransactionMechanismToEnforce;

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSEnforceInventoryTransactionMechanismContext current()
    {
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void Dispose()
    {
        instance = null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>