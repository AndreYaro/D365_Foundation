<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmEmailGroupTypes</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmEmailGroupTypes extends smmFormTreeDatasource
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildSubTree</Name>
				<Source><![CDATA[
    public int buildSubTree(int _parentIdx, anytype _parentVaue, boolean _rebuild = false)
    {
        smmEmailMembers smmEmailMembers;
        FormTreeItem    formTreeItem;
        Common          childRecord;
        QueryRun        childQuery;
        int             children;
        int             idx;
        int             idxCurrentRecord;
        int             hdl;
        int             type;
        str             selectedDataStr;
        anytype         idValue;

        if (_rebuild || !doneNode.in([_parentIdx]))
        {
            // Delete existing subtree
            if (_rebuild)
            {
                hdl = tree.getChild(_parentIdx);
                while (hdl)
                {
                    tree.delete(hdl);
                    hdl = tree.getChild(_parentIdx);
                }
            }

            [SelectedData] = selectionStack.pop();

            children = 0;

            childQuery = this.subTreeQueryRun(_ParentVaue);
            while (childQuery.next())
            {
                childRecord = childQuery.get(formDataSource.table());
                this.getChildRecord(childRecord);

                idValue = childRecord.(id);

                formTreeItem = new FormTreeItem(this.itemText(childRecord.(id),
                                                childRecord.(txt)),
                                                this.getImageListIdx(childRecord.TableId,
                                                childRecord.RecId),
                                                this.subTreeQueryRun(childRecord.(id)).next(),
                                                idValue);

                formTreeItem = this.modifyFormTreeItem(formTreeItem);

                if (childRecord.TableId == tablenum(smmEmailMembers))
                {
                    smmEmailMembers = childRecord;
                    formTreeItem.text(smmEmailMembers.getIdentification());
                }

                idx = tree.addItem(_parentIdx, 0, formTreeItem);

                if (basicRecId == childRecord.RecId)
                {
                    idxCurrentRecord = idx;
                }

                children++;

                type = typeof(selectedData);

                if (type == Types::Integer)
                {
                    selectedDataStr = int2str(selectedData);
                }

                if (selectionStack.qty())
                {
                    if (idValue == SelectedData)
                    {
                        tree.expand(idx, FormTreeExpand::Expand);
                    }
                }
                else
                {
                    if (selectedDataStr)
                    {
                        if (idValue == selectedDataStr)
                        {
                            selectIdx = idx;
                        }
                    }
                    else
                    {
                        if (idValue == selectedData)
                        {
                            selectIdx = idx;
                        }
                    }
                }
            }

            formTreeItem = tree.getItem(_parentIdx);
            formTreeItem.children(children);
            tree.setItem(formTreeItem);
        }

        doneNode.add([_parentIdx]);

        return idxCurrentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImageListIdx</Name>
				<Source><![CDATA[
    public int getImageListIdx(tableId _tableId, recId _recId)
    {
        smmEmailMembers smmEmailMembers = null;

        if (smmEmailMembers.TableId == _tableId)
        {
            smmEmailMembers = smmEmailMembers::findRecId(_recId);

            if (smmEmailMembers.ParentId)
            {
                return 2;
            }

            return 1;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageList</Name>
				<Source><![CDATA[
    public Imagelist imageList()
    {
        #macrolib.resource

        Imagelist imagelist;

        imagelist = new Imagelist(Imagelist::smallIconWidth(), Imagelist::smallIconHeight());
        imagelist.add(new Image(#RES_FRM_BMP_SEND_MAIL));
        imagelist.add(new Image(#RES_NODE_USERS));
        imagelist.add(new Image(#RES_NODE_USER));

        return imagelist;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>