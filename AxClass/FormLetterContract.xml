<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormLetterContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FormLetterContract</c> class will be used as the data contract class for the <c>FormletterService</c> service.
/// </summary>
[DataContract]
abstract class FormLetterContract
implements SysOperationInitializable, SysPackable
{
    FormletterType  formletterType;
    NoYes           proforma;
    Printout        printout;
    LateSelection   lateSelection;
    str             lineIdSetPacked;
    ParmId          parmId;
    NoYes           allowEmptyTable;
    NoYes           printFormletter;
    str             printersettingsFormletter;
    str             printersettingsFormletterCopy;
    str             printManagementExtensionsSettings;
    NoYes           usePrintManagement;
    Common          parmUpdate;
    Common          journal;
    Common          sourceTable;

    //Packed query
    str             chooseLinesQueryPacked;
    str             formletterProformaPrintPacked;

    //List of records.
    str             lineListPacked;
    container       lineListContainerPacked;

    //List of records.
    str             historyListPacked;
    container       historyListContainerPacked;

    //Map - (RecId, TradeRecord) OR FormDataSource could be passed
    str             dataSourceRecordsPacked;
    container       dataSourceRecordMapPacked;

    //Batch
    RefRecId                batchJobId;
    BatchGroupId            batchGroupId;
    UserId                  batchCreatedBy;

    InterCompanyPosted      interCompanyPosted;
    NoYes                   intercompanySelectFromJournal;
    str                     intercompanyMapPacked;
    DataAreaId              intercompanyCompanyId;
    ParmId                  intercompanyParmId;

    NoYes                   createFromLines;
    NoYes                   initAllowEmptyTable;
    NoYes                   multiForm;
    NoYes                   createFromHistory;
    ParmId                  parmIdSynched;
    NoYes                   specQtyIsSet;
    NoYes                   showQueryForm;

    TransDate               transDate;
    boolean                 useUserDefinedDestinations;

    Num                     number;
    Voucher                 voucher;

    VersioningUpdateType    versioningUpdateType;
    Common                  callerTable;
    MenuItemNameAction      callerMenuItem;

    AccountingDate          accountingDate;
    VersioningTimeStamp     versionDateTime;

    // <GEERU>
    boolean                 printFacture;
    boolean                 printAcceptanceReport;
    boolean                 printInventBaileeReport;
    boolean                 printBillOfLading;
    boolean                 printTransportInvoice;
    // </GEERU>

    // <GIN>
    boolean                 printGoodsReceiptNote;
    NoYes                   printExciseFormLetter;
    ExciseInvoiceAddressType_IN exciseInvoiceAddress;
    // </GIN>

    // <GEEPL>
    InventLocationId        inventLocationId;
    // </GEEPL>

    boolean                 isPrintingInAfterOperation;

    //These values do not have an initialized value
    DocumentStatus          documentStatus;

    internal boolean isSimulatePosting;
    internal str infologPrefix;
    protected str kitting2ParametersMapPacked;
    protected str kittingPostUpdateInventTransListPacked;
    protected str kittingRef2ParmLinePartDlvMapPacked;

    //List of parameters common for FormLetter contract classes that needs to be packed
    //for the correct class transition between client and server.
    //If you need some additional parameters on the client, add them to this list.
    #define.CurrentVersion(8)
    #define.Version2(2)
    #define.Version3(3)
    #define.Version4(4)
    #define.Version5(5)
    #define.Version6(6)
    #define.Version7(7)
    //Common values to be the first two values when packed
    #LOCALMACRO.ParmListCommon
        documentStatus
    #ENDMACRO
    #define.DocumentStatusPosition(2)
    //Formletter values to be packed
    #LOCALMACRO.ParmListFormLetterV2
        proforma,
        printout,
        lateSelection,
        lineIdSetPacked,
        parmId,
        allowEmptyTable,
        printFormletter,
        printersettingsFormletter,
        printersettingsFormletterCopy,
        usePrintManagement,
        parmUpdate,
        journal,
        sourceTable,
        chooseLinesQueryPacked,
        formletterProformaPrintPacked,
        lineListPacked,
        historyListPacked,
        dataSourceRecordsPacked,
        batchJobId,
        batchGroupId,
        batchCreatedBy,
        interCompanyPosted,
        intercompanySelectFromJournal,
        intercompanyCompanyId,
        intercompanyParmId,
        createFromLines,
        initAllowEmptyTable,
        multiForm,
        createFromHistory,
        parmIdSynched,
        specQtyIsSet,
        showQueryForm,
        transDate,
        useUserDefinedDestinations,
        number,
        voucher,
        versioningUpdateType,
        callerTable,
        accountingDate,
        versionDateTime,
        isPrintingInAfterOperation
        // <GEERU>
        ,printFacture,
        printAcceptanceReport,
        printInventBaileeReport,
        printBillOfLading,
        printTransportInvoice
        // </GEERU>
        // <GIN>
        ,printGoodsReceiptNote
        ,printExciseFormLetter
        ,exciseInvoiceAddress
        // </GIN>
        // <GEEPL>
        ,inventLocationId
        // </GEEPL>
        ,intercompanyMapPacked
    #ENDMACRO

    #LOCALMACRO.ParmListFormLetterV3
        #ParmListFormLetterV2
        ,callerMenuItem
    #ENDMACRO

    #LOCALMACRO.ParmListFormLetterV4
        #ParmListFormLetterV3
        ,printManagementExtensionsSettings
    #ENDMACRO
    
    #LOCALMACRO.ParmListFormLetterV5
        #ParmListFormLetterV4
        ,dataSourceRecordMapPacked
    #ENDMACRO

    #LOCALMACRO.ParmListFormLetterV6
        #ParmListFormLetterV5
        ,isSimulatePosting
        ,infologPrefix
    #ENDMACRO

    #LOCALMACRO.ParmListFormLetterV7
        #ParmListFormLetterV6
        ,kitting2ParametersMapPacked
        ,kittingPostUpdateInventTransListPacked
        ,kittingRef2ParmLinePartDlvMapPacked
    #ENDMACRO

   #LOCALMACRO.ParmListFormLetter
        #ParmListFormLetterV7
        ,historyListContainerPacked
        ,lineListContainerPacked
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCanUseParallelism</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the selected records can be posted using batch parallelism.
    /// </summary>
    /// <returns>
    ///    true if the selected records can be posted using batch parallelism; otherwise, false.
    /// </returns>
    public boolean getCanUseParallelism()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCheckForHold</Name>
				<Source><![CDATA[
    public boolean getCheckForHold()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentStatus</Name>
				<Source><![CDATA[
    abstract public DocumentStatus getDocumentStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormLetterType</Name>
				<Source><![CDATA[
    abstract public FormletterType getFormLetterType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLateSelectionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the query that is used for late selection.
    /// </summary>
    /// <returns>
    /// A container that contains the late selection query.
    /// </returns>
    abstract public LateSelectionQuery getLateSelectionQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderBatchTaskSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of orders to have in each batch task when posting in batch.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    public FormletterBatchTaskSize getOrderBatchTaskSize()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderBatchTaskLineNumberSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of order lines to have in each batch task when posting in batch.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    internal FormletterBatchTaskSizeLines getOrderBatchTaskLineNumberSize()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    public void initialize()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrinting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether document should be printed after posting.
    /// </summary>
    /// <returns>
    /// True if document should be printed after posting; otherwise, false.
    /// </returns>
    public boolean isPrinting()
    {
        return this.parmPrintFormletter() == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (FormLetterContractPackingUseContainerFlight::instance().isEnabled())
        {
            return [#CurrentVersion,#ParmListFormLetter];
        }
        else
        {
            // Convert from new format to old format when flight is off.
            if (lineListContainerPacked && !lineListPacked)
            {
                lineListPacked = SysOperationHelper::base64Encode(lineListContainerPacked);
            }

            if (historyListContainerPacked && !historyListPacked)
            {
                historyListPacked = SysOperationHelper::base64Encode(historyListContainerPacked);
            }
            lineListContainerPacked = conNull();
            historyListContainerPacked = conNull();

            return [#Version7,#ParmListFormLetterV7];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    [DataMember]
    public AccountingDate parmAccountingDate(AccountingDate _accountingDate = accountingDate)
    {
        accountingDate = _accountingDate;
        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowEmptyTable</Name>
				<Source><![CDATA[
    [DataMember]
    public NoYes parmAllowEmptyTable(NoYes _allowEmptyTable = allowEmptyTable)
    {
        allowEmptyTable = _allowEmptyTable;
        return allowEmptyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchCreatedBy</Name>
				<Source><![CDATA[
    [DataMember]
    public UserId parmBatchCreatedBy(UserId _batchCreatedBy = batchCreatedBy)
    {
        batchCreatedBy = _batchCreatedBy;
        return batchCreatedBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchGroupId</Name>
				<Source><![CDATA[
    [DataMember]
    public BatchGroupId parmBatchGroupId(BatchGroupId _batchGroupId = batchGroupId)
    {
        batchGroupId = _batchGroupId;
        return batchGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchJobId</Name>
				<Source><![CDATA[
    [DataMember]
    public RefRecId parmBatchJobId(RefRecId _batchJobId = batchJobId)
    {
        batchJobId = _batchJobId;
        return batchJobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerTable</Name>
				<Source><![CDATA[
    [DataMember]
    public Common parmCallerTable(Common _callerTable = callerTable)
    {
        callerTable = _callerTable;
        return callerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerMenuItem</Name>
				<Source><![CDATA[
    [DataMember]
    public MenuItemNameAction parmCallerMenuItem(MenuItemNameAction _callerMenuItem = callerMenuItem)
    {
        callerMenuItem = _callerMenuItem;
        return callerMenuItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChooseLinesQueryPacked</Name>
				<Source><![CDATA[
    [DataMember]
    public str parmChooseLinesQueryPacked(str _chooseLinesQueryPacked = chooseLinesQueryPacked)
    {
        chooseLinesQueryPacked = _chooseLinesQueryPacked;
        return chooseLinesQueryPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateFromHistory</Name>
				<Source><![CDATA[
    [DataMember]
    public NoYes parmCreateFromHistory(NoYes _createFromHistory = createFromHistory)
    {
        createFromHistory = _createFromHistory;
        return createFromHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateFromLines</Name>
				<Source><![CDATA[
    [DataMember]
    public NoYes parmCreateFromLines(NoYes _createFromLines = createFromLines)
    {
        createFromLines = _createFromLines;
        return createFromLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataSourceRecordsPacked</Name>
				<Source><![CDATA[
    [DataMemberAttribute, SysObsolete("This method is obsolete, use the parmDataSourceRecordMapPacked method instead.", true, 05\01\2022)]
    public str parmDataSourceRecordsPacked(str _dataSourceRecordsPacked = '')
    {
        if (prmIsDefault(_dataSourceRecordsPacked))
        {
            return SysOperationHelper::base64Encode(this.parmDataSourceRecordMapPacked());
        }

        return SysOperationHelper::base64Encode(this.parmDataSourceRecordMapPacked(SysOperationHelper::base64Decode(_dataSourceRecordsPacked)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataSourceRecordMapPacked</Name>
				<Source><![CDATA[
    [HookableAttribute(false)]
    public container parmDataSourceRecordMapPacked(container _dataSourceRecordMapPacked = dataSourceRecordMapPacked)
    {
        dataSourceRecordMapPacked = _dataSourceRecordMapPacked;
        return dataSourceRecordMapPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormletterProformaPrintPacked</Name>
				<Source><![CDATA[
    [DataMember]
    public str parmFormletterProformaPrintPacked(str _formletterProformaPrintPacked = formletterProformaPrintPacked)
    {
        formletterProformaPrintPacked = _formletterProformaPrintPacked;
        return formletterProformaPrintPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHistoryListPacked</Name>
				<Source><![CDATA[
    [DataMemberAttribute, SysObsolete("This method is obsolete, use the parmHistoryListContainerPacked method instead.", false, 21\12\2022)]
    public str parmHistoryListPacked(str _historyListPacked = historyListPacked)
    {
        if (FormLetterContractPackingUseContainerFlight::instance().isEnabled())
        {
            if (prmIsDefault(_historyListPacked) || _historyListPacked == '')
            {
                return SysOperationHelper::base64Encode(this.parmHistoryListContainerPacked());
            }
            return SysOperationHelper::base64Encode(this.parmHistoryListContainerPacked(SysOperationHelper::base64Decode(_historyListPacked)));
        }
        else
        {
            historyListPacked = _historyListPacked;
            return historyListPacked;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHistoryListContainerPacked</Name>
				<Source><![CDATA[
    [DataMember]
    public container parmHistoryListContainerPacked(container _historyListContainerPacked = historyListContainerPacked)
    {
        historyListContainerPacked = _historyListContainerPacked;
        return historyListContainerPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInitAllowEmptyTable</Name>
				<Source><![CDATA[
    [DataMember]
    public NoYes parmInitAllowEmptyTable(NoYes _initAllowEmptyTable = initAllowEmptyTable)
    {
        initAllowEmptyTable = _initAllowEmptyTable;
        return initAllowEmptyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntercompanyCompanyId</Name>
				<Source><![CDATA[
    [DataMember]
    public DataAreaId parmIntercompanyCompanyId(DataAreaId _intercompanyCompanyId = intercompanyCompanyId)
    {
        intercompanyCompanyId = _intercompanyCompanyId;
        return intercompanyCompanyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntercompanyMapPacked</Name>
				<Source><![CDATA[
    [DataMember]
    public str parmIntercompanyMapPacked(str _intercompanyMapPacked = intercompanyMapPacked)
    {
        intercompanyMapPacked = _intercompanyMapPacked;
        return intercompanyMapPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntercompanyParmId</Name>
				<Source><![CDATA[
    [DataMember]
    public ParmId parmIntercompanyParmId(ParmId _intercompanyParmId = intercompanyParmId)
    {
        intercompanyParmId = _intercompanyParmId;
        return intercompanyParmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntercompanyPosted</Name>
				<Source><![CDATA[
    [DataMember]
    public InterCompanyPosted parmIntercompanyPosted(InterCompanyPosted _interCompanyPosted = interCompanyPosted)
    {
        interCompanyPosted = _interCompanyPosted;
        return interCompanyPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntercompanySelectFromJournal</Name>
				<Source><![CDATA[
    [DataMember]
    public NoYes parmIntercompanySelectFromJournal(NoYes _intercompanySelectFromJournal = intercompanySelectFromJournal)
    {
        intercompanySelectFromJournal = _intercompanySelectFromJournal;
        return intercompanySelectFromJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId_PL</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId_PL(
        InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPrintingInAfterOperation</Name>
				<Source><![CDATA[
    [DataMember]
    public boolean parmIsPrintingInAfterOperation(boolean _isPrintingInAfterOperation = isPrintingInAfterOperation)
    {
        isPrintingInAfterOperation = _isPrintingInAfterOperation;
        return isPrintingInAfterOperation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournal</Name>
				<Source><![CDATA[
    [DataMember]
    public Common parmJournal(Common _journal = journal)
    {
        journal = _journal;
        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLateSelection</Name>
				<Source><![CDATA[
    [DataMember]
    public LateSelection parmLateSelection(LateSelection _lateSelection = lateSelection)
    {
        lateSelection = _lateSelection;
        return lateSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineIdSetPacked</Name>
				<Source><![CDATA[
    [DataMember]
    public str parmLineIdSetPacked(str _lineIdSetPacked = lineIdSetPacked)
    {
        lineIdSetPacked = _lineIdSetPacked;
        return lineIdSetPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineListPacked</Name>
				<Source><![CDATA[
    [DataMemberAttribute, SysObsolete("This method is obsolete, use the parmLineListContainerPacked method instead.", false, 21\12\2022)]
    public str parmLineListPacked(str _lineListPacked = lineListPacked)
    {
        if (FormLetterContractPackingUseContainerFlight::instance().isEnabled())
        {
            if (prmIsDefault(_lineListPacked) || _lineListPacked == '')
            {
                return SysOperationHelper::base64Encode(this.parmLineListContainerPacked());
            }
            return SysOperationHelper::base64Encode(this.parmLineListContainerPacked(SysOperationHelper::base64Decode(_lineListPacked)));
        }
        else
        {
            lineListPacked = _lineListPacked;
            return lineListPacked;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineListContainerPacked</Name>
				<Source><![CDATA[
    [DataMember]
    public container parmLineListContainerPacked(container _lineListContainerPacked = lineListContainerPacked)
    {
        lineListContainerPacked = _lineListContainerPacked;
        return lineListContainerPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiForm</Name>
				<Source><![CDATA[
    [DataMember]
    public NoYes parmMultiForm(NoYes _multiForm = multiForm)
    {
        multiForm = _multiForm;
        return multiForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumber</Name>
				<Source><![CDATA[
    [DataMember]
    public Num parmNumber(Num _number = number)
    {
        number = _number;
        return number;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmId</Name>
				<Source><![CDATA[
    [DataMember]
    public ParmId parmParmId(ParmId _parmId = parmId)
    {
        parmId = _parmId;
        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmIdSynched</Name>
				<Source><![CDATA[
    [DataMember]
    public ParmId  parmParmIdSynched(ParmId _parmIdSynched = parmIdSynched)
    {
        parmIdSynched = _parmIdSynched;
        return parmIdSynched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    [DataMember]
    public Common parmParmUpdate(Common _parmUpdate = parmUpdate)
    {
        parmUpdate = _parmUpdate;
        return parmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintAcceptanceReport_RU</Name>
				<Source><![CDATA[
    [DataMember]
    public boolean parmPrintAcceptanceReport_RU(boolean _printAcceptanceReport = printAcceptanceReport)
    {
        printAcceptanceReport = _printAcceptanceReport;
        return printAcceptanceReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintBillOfLading_RU</Name>
				<Source><![CDATA[
    [DataMember]
    public NoYes parmPrintBillOfLading_RU(NoYes _printBillOfLading = printBillOfLading)
    {
        printBillOfLading = _printBillOfLading;
        return printBillOfLading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintersettingsFormletter</Name>
				<Source><![CDATA[
    [DataMember]
    public str parmPrintersettingsFormletter(str _printersettingsFormletter = printersettingsFormletter)
    {
        printersettingsFormletter = _printersettingsFormletter;
        return printersettingsFormletter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintManagementExtensionsSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets or sets base64-encoded packed settings for print management extensions.
    /// </summary>
    /// <param name = "_value">A new value.</param>
    /// <returns>An existing value.</returns>
    [DataMember]
    public str parmPrintManagementExtensionsSettings(str _value = printManagementExtensionsSettings)
    {
        printManagementExtensionsSettings = _value;
        return printManagementExtensionsSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintersettingsFormletterCopy</Name>
				<Source><![CDATA[
    [DataMember]
    public str parmPrintersettingsFormletterCopy(str _printersettingsFormletterCopy = printersettingsFormletterCopy)
    {
        printersettingsFormletterCopy = _printersettingsFormletterCopy;
        return printersettingsFormletterCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintFacture_RU</Name>
				<Source><![CDATA[
    [DataMember]
    public boolean parmPrintFacture_RU(boolean _printFacture = printFacture)
    {
        printFacture = _printFacture;
        return printFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintFormletter</Name>
				<Source><![CDATA[
    [DataMember]
    public NoYes parmPrintFormletter(NoYes _printFormletter = printFormletter)
    {
        printFormletter = _printFormletter;
        return printFormletter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintGRN_IN</Name>
				<Source><![CDATA[
    [DataMember]
    public boolean parmPrintGRN_IN(boolean _printGoodsReceiptNote = printGoodsReceiptNote)
    {
        printGoodsReceiptNote = _printGoodsReceiptNote;
        return printGoodsReceiptNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintInventBaileeReport_RU</Name>
				<Source><![CDATA[
    [DataMember]
    public boolean parmPrintInventBaileeReport_RU(boolean _printInventBaileeReport = printInventBaileeReport)
    {
        printInventBaileeReport = _printInventBaileeReport;
        return printInventBaileeReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintOut</Name>
				<Source><![CDATA[
    [DataMember]
    public Printout parmPrintOut(Printout _printout = printout)
    {
        printout = _printout;
        return printout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintTransportInvoice_RU</Name>
				<Source><![CDATA[
    public NoYes parmPrintTransportInvoice_RU(NoYes _printTransportInvoice = printTransportInvoice)
    {
        printTransportInvoice = _printTransportInvoice;
        return printTransportInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProforma</Name>
				<Source><![CDATA[
    [DataMember]
    public NoYes parmProforma(NoYes _proforma = proforma)
    {
        proforma = _proforma;
        return proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowQueryForm</Name>
				<Source><![CDATA[
    [DataMember]
    public NoYes parmShowQueryForm(NoYes _showQueryForm = showQueryForm)
    {
        showQueryForm = _showQueryForm;
        return showQueryForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    [DataMember]
    public Common parmSourceTable(Common _sourceTable = sourceTable)
    {
        sourceTable = _sourceTable;
        return sourceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecQtyIsSet</Name>
				<Source><![CDATA[
    [DataMember]
    public NoYes parmSpecQtyIsSet(NoYes _specQtyIsSet = specQtyIsSet)
    {
        specQtyIsSet = _specQtyIsSet;
        return specQtyIsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    [DataMember]
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsePrintManagement</Name>
				<Source><![CDATA[
    [DataMember]
    public NoYes parmUsePrintManagement(NoYes _usePrintManagement = usePrintManagement)
    {
        usePrintManagement = _usePrintManagement;
        return usePrintManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseUserDefinedDestinations</Name>
				<Source><![CDATA[
    public boolean parmUseUserDefinedDestinations(boolean _useUserDefinedDestinations = useUserDefinedDestinations)
    {
        useUserDefinedDestinations = _useUserDefinedDestinations;
        return useUserDefinedDestinations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersionDateTime</Name>
				<Source><![CDATA[
    [DataMember]
    public VersioningTimeStamp parmVersionDateTime(VersioningTimeStamp _versionDateTime = versionDateTime)
    {
        versionDateTime = _versionDateTime;
        return versionDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersioningUpdateType</Name>
				<Source><![CDATA[
    [DataMember]
    public VersioningUpdateType parmVersioningUpdateType(VersioningUpdateType _versioningUpdateType = versioningUpdateType)
    {
        versioningUpdateType = _versioningUpdateType;
        return versioningUpdateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    [DataMember]
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSimulatePosting</Name>
				<Source><![CDATA[
    [DataMember]
    internal boolean parmIsSimulatePosting(boolean _isSimulatePosting = isSimulatePosting)
    {
        isSimulatePosting = _isSimulatePosting;
        return isSimulatePosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInfologPrefix</Name>
				<Source><![CDATA[
    [DataMember]
    internal str parmInfologPrefix(str _infologPrefix = infologPrefix)
    {
        infologPrefix = _infologPrefix;
        return infologPrefix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmListFormLetter] = _packedClass;
                break;
            case #Version2:
                [version, #ParmListFormLetterV2] = _packedClass;
                break;
            case #Version3:
                [version, #ParmListFormLetterV3] = _packedClass;
                break;
            case #Version4:
                [version, #ParmListFormLetterV4] = _packedClass;
                break;
            case #Version5:
                [version, #ParmListFormLetterV5] = _packedClass;
                break;
            case #Version6:
                [version, #ParmListFormLetterV6] = _packedClass;
                break;
            case #Version7:
                [version, #ParmListFormLetterV7] = _packedClass;
                break;
            default:
                return false;
        }

        if (dataSourceRecordMapPacked)
        {
            // The new format wins
            dataSourceRecordsPacked = '';
        }
        else if (dataSourceRecordsPacked)
        {
            // Convert the old format
            dataSourceRecordMapPacked = SysOperationHelper::base64Decode(dataSourceRecordsPacked);
            dataSourceRecordsPacked = '';
        }

        if (FormLetterContractPackingUseContainerFlight::instance().isEnabled())
        {
            // Convert from old format when new format does not exist.
            if (!lineListContainerPacked && lineListPacked)
            {
                lineListContainerPacked = SysOperationHelper::base64Decode(lineListPacked);
            }

            if (!historyListContainerPacked && historyListPacked)
            {
                historyListContainerPacked = SysOperationHelper::base64Decode(historyListPacked);
            }

            lineListPacked = '';
            historyListPacked = '';
        } 
        else
        {
            // Convert from new format to the old format when flight is killSwitched.
            if (lineListContainerPacked && !lineListPacked)
            {
                lineListPacked = SysOperationHelper::base64Encode(lineListContainerPacked);
            }

            if (historyListContainerPacked && !historyListPacked)
            {
                historyListPacked = SysOperationHelper::base64Encode(historyListContainerPacked);
            }

            lineListContainerPacked = conNull();
            historyListContainerPacked = conNull();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPackedVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>FormLetterContract</c> object from the given container.
    /// </summary>
    /// <param name="_formLetterContractPacked">
    /// A container with a packed <c>FormLetterContract</c> object.
    /// </param>
    /// <param name="_formletterType">
    /// The <c>FormLetterType</c> enumeration value for which the contract is to be initialized.
    /// </param>
    /// <returns>
    /// An instance of the <c>FormLetterContract</c> class.
    /// </returns>
    public static FormLetterContract newFromPackedVersion(container _formLetterContractPacked, FormletterType _formletterType)
    {
        var formLetterType = FormletterTypeBase::singletonFromFormletterType(_formletterType);
        if (formLetterType)
        {
            FormLetterContract formLetterContract = formLetterType.formLetterContract(_formLetterContractPacked);
            if (formLetterContract)
            {
                return formLetterContract;
            }
        }
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExciseInvoiceAddress_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the ExciseInvoiceAddressType_IN parameter.
    /// </summary>
    /// <param name="_exciseInvoiceAddress">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the ExciseInvoiceAddressType_IN parameter.
    /// </returns>
    [DataMember]
    public ExciseInvoiceAddressType_IN parmExciseInvoiceAddress_IN(ExciseInvoiceAddressType_IN _exciseInvoiceAddress = exciseInvoiceAddress)
    {
        exciseInvoiceAddress = _exciseInvoiceAddress;
        return _exciseInvoiceAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintExciseFormletter_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the PrintExciseFormLetter_IN parameter.
    /// </summary>
    /// <param name="_printExciseFormLetter">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the PrintExciseFormLetter_IN parameter.
    /// </returns>
    [DataMember]
    public NoYes parmPrintExciseFormletter_IN(NoYes _printExciseFormLetter = printExciseFormLetter)
    {
        printExciseFormLetter = _printExciseFormLetter;
        return _printExciseFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isParallelismAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether document can post multithreaded in batch.
    /// </summary>
    /// <returns>True if document can post multithreaded in batch; otherwise, false.</returns>
    [Hookable(false)]
    public boolean isParallelismAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKittingParametersMapPacked</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmKittingParametersMapPacked(str _kitting2ParametersMapPacked = kitting2ParametersMapPacked)
    {
        kitting2ParametersMapPacked = _kitting2ParametersMapPacked;
        return kitting2ParametersMapPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKittingPostUpdInventTransListPacked</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmKittingPostUpdInventTransListPacked(str _postUpdateInventTransList = kittingPostUpdateInventTransListPacked)
    {
        kittingPostUpdateInventTransListPacked = _postUpdateInventTransList;
        return kittingPostUpdateInventTransListPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKittingRef2ParmLinePartDlvMapPacked</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmKittingRef2ParmLinePartDlvMapPacked(str _kittingRef2ParmLinePartDlvMapPacked = kittingRef2ParmLinePartDlvMapPacked)
    {
        kittingRef2ParmLinePartDlvMapPacked = _kittingRef2ParmLinePartDlvMapPacked;
        return kittingRef2ParmLinePartDlvMapPacked;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>