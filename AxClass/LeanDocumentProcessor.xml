<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentProcessor</c> class is a processor object that orchestrates the creation of lean
///    documents.
/// </summary>
public class LeanDocumentProcessor
{
    LeanDocumentDataProvider        provider;
    LeanDocumentAggregator          aggregator;
    LeanDocumentTask                task;
    LeanDocumentCreationType        operationType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>aggregator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the aggregator object that is used by this instance.
    /// </summary>
    /// <returns>
    ///    A <c>LeanDocumentAggregator</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanDocumentAggregator aggregator()
    {
        return aggregator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the two objects are equal.
    /// </summary>
    /// <param name="otherObject">
    ///    The other object.
    /// </param>
    /// <returns>
    ///    true if the two objects hold the same state; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean equal(Object otherObject)
    {
        LeanDocumentProcessor otherProcessor = otherObject as LeanDocumentProcessor;

        return  otherObject == this
                || (otherProcessor != null
                        && provider.equal(otherProcessor.provider())
                        && aggregator.equal(otherProcessor.aggregator())
                        && task.equal(otherProcessor.task())
                        && this.parmOperationType() == otherProcessor.parmOperationType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanDocumentPostProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the post-processing of subcontracting documents.
    /// </summary>
    /// <param name="_sender">
    ///    The sender of the event.
    /// </param>
    /// <param name="_processingData">
    ///    The object that holds all data that is needed for the processing of the subcontracting document.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    delegate void leanDocumentPostProcess(Object _sender, LeanDocumentProcessingData _processingData)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanDocumentPreProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the pre-processing of subcontracting documents.
    /// </summary>
    /// <param name="_sender">
    ///    The sender of the event.
    /// </param>
    /// <param name="_processingData">
    ///    The object that holds all data that is needed for the processing of the subcontracting document.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    delegate void leanDocumentPreProcess(Object _sender, LeanDocumentProcessingData _processingData)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>LeanDocumentProcessor</c> class.
    /// </summary>
    /// <param name="_provider">
    ///    The provider object.
    /// </param>
    /// <param name="_aggregator">
    ///    The aggregator object.
    /// </param>
    /// <param name="_task">
    ///    The document task object.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new(LeanDocumentDataProvider _provider, LeanDocumentAggregator _aggregator, LeanDocumentTask _task)
    {
        if (!_provider
            || !_aggregator
            || !_task)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        provider    = _provider;
        aggregator  = _aggregator;
        task        = _task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOperationType</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public LeanDocumentCreationType parmOperationType(LeanDocumentCreationType _operationType = operationType)
    {
        operationType = _operationType;

        return operationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSingleDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allows the derived class to override creating a single document.
    /// </summary>
    /// <param name="_documentData">
    ///    The data object that holds all necessary data for the processing of the subcontracting document.
    /// </param>
    /// <remarks>
    ///    Usually the derived classes does not override the whole run method, but only this one.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void processSingleDocument(LeanDocumentProcessingData _documentData)
    {
        task.parmProcessingData(_documentData);
        task.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>provider</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the data provider object that is used by this instance.
    /// </summary>
    /// <returns>
    ///    A <c>LeanDocumentDataProvider</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanDocumentDataProvider provider()
    {
        return provider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the processing of the subcontracting documents.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        #OCCRetryCount

        // aggregate all data
        while (provider.next())
        {
            try
            {
                aggregator.aggregateData(provider);
            }
            catch
            {
                // swallow the error and continue aggregating the remaining jobs
                KanbanJob kanbanJob = provider.getCurrentRecord(tableNum(KanbanJob));

                if (kanbanJob.RecId != 0)
                {
                    error(strFmt("@SYS340010", kanbanJob.RecId, kanbanJob.kanbanId()));
                }
            }
        }

        // get a list of processing data from the aggregated results
        List listProcessingData = aggregator.processingData();

        if (!listProcessingData)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ListEnumerator enumProcessingData = listProcessingData.getEnumerator();

        // perform an actual subcontracting document creation for all elements
        while (enumProcessingData.moveNext())
        {
            LeanDocumentProcessingData processingData = enumProcessingData.current();

            try
            {
                // the transaction scope is covering the processing of
                // a single subcontracting document only
                ttsbegin;
                this.leanDocumentPreProcess(this, processingData);
                this.processSingleDocument(processingData);
                this.leanDocumentPostProcess(this, processingData);
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch
            {
                // continue processing the remaining lines
                // no error logging necessary as the one raising the exception already did that
                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the document task object that is used by this instance.
    /// </summary>
    /// <returns>
    ///    A <c>LeanDocumentTask</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanDocumentTask task()
    {
        return task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Default factory method.
    /// </summary>
    /// <param name="_provider">
    /// The provider object.
    /// </param>
    /// <param name="_aggregator">
    /// The aggregator object.
    /// </param>
    /// <param name="_task">
    /// The document task object.
    /// </param>
    /// <param name="_operationType">
    /// The type of operation to be performed by the processor.
    /// </param>
    /// <returns>
    /// A new instance of <c>LeanDocumentProcessor</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanDocumentProcessor newStandard(
        LeanDocumentDataProvider _provider,
        LeanDocumentAggregator _aggregator,
        LeanDocumentTask _task,
        LeanDocumentCreationType _operationType)
    {
        LeanDocumentProcessor result = new LeanDocumentProcessor(_provider, _aggregator, _task);
        result.parmOperationType(_operationType);
        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
