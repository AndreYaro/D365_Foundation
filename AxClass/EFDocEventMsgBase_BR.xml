<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocEventMsgBase_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The base class that process all event messages.
/// </summary>
public abstract class EFDocEventMsgBase_BR implements IEFDocEventMsg_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReceiveFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the receive format of the event document message.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The <c>FiscalEstablishment_BR</c> record that defines NF-e parameters.
    /// </param>
    /// <returns>
    /// The receive format.
    /// </returns>
    public abstract IEFEventDocMsgFormat_BR getReceiveFormat(FiscalEstablishment_BR _fiscalEstablishment)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSendFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the send format of the event document message.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The <c>FiscalEstablishment_BR</c> record that defines NF-e parameters.
    /// </param>
    /// <returns>
    /// The receive format.
    /// </returns>
    public abstract IEFEventDocMsgFormat_BR getSendFormat(FiscalEstablishment_BR _fiscalEstablishment)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the URL of the event web service.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The <c>FiscalEstablishment_BR</c> record that defines NF-e parameters.
    /// </param>
    /// <returns>
    /// The web service URl.
    /// </returns>
    public abstract URL getURL(FiscalEstablishment_BR _fiscalEstablishment)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// It saves the XML Doc sent and accepted by the government requesting approval of Fiscal Doc (NF-e).
    /// </summary>
    /// <param name="_eFDocument">
    /// The fiscal document to be saved.
    /// </param>
    /// <param name="_sendStream">
    /// The send stream used to read message content.
    /// </param>
    /// <param name="_returnStream">
    /// The receive stream used to read message content.
    /// </param>
    /// <param name="_returnInfo">
    /// A code that indicates the XML Doc was accepted by the government
    /// </param>
    protected abstract void saveMsg(EFDocument_BR                 _eFDocument,
                                    IEFDocMsgStream_BR            _sendStream,
                                    IEFDocMsgStream_BR            _returnStream,
                                    EFiscalDocumentReturnInfo_BR  _returnInfo)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>send</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the event document message list to the government web service.
    /// </summary>
    /// <param name="_documentList">
    /// The event message list.
    /// </param>
    /// <param name="_EFDocMsgTransport">
    /// The government web service communicator.
    /// </param>
    public void send(EFEventDocumentList_BR _documentList, IEFDocMsgTransport _EFDocMsgTransport)
    {
        IEFDocMsgTransport              transport;
        EFEventDocumentList_BR          oneDocument;
        EFEventDocument_BR              document;
        EFDocEventHandler_BR            evtHandler;
        EFiscalDocumentReturnInfo_BR    returnInfo;

        IEFDocMsgStream_BR              sendStream;
        IEFDocMsgStream_BR              returnStream;

        transport = _EFDocMsgTransport;
        evtHandler = EFDocEventHandler_BR::construct();
        _documentList.reset();

        while (_documentList.moveNext())
        {
            oneDocument = EFEventDocumentList_BR::construct();
            document = _documentList.current();
            oneDocument.add(document);

            setprefix(strfmt("%1 %2 %3 %4", "@SYS57610",
                                            date2str(document.eFDocument().Date, 123, 2, 4, 2, 4, 4, DateFlags::None),
                                            "@SYS12128",
                                            document.fiscalDocumentNumber()));

            sendStream = transport.getSendStream();
            this.getSendFormat(document.fiscalEstablishment()).write(sendStream, oneDocument);
            returnInfo = EFiscalDocumentReturnInfo_BR::newFromAccessKey(document.accessKey());
            returnStream = transport.send(document.accessKey());
            this.getReceiveFormat(document.fiscalEstablishment()).read(returnStream, returnInfo);

            this.saveMsg(document.eFDocument(), sendStream, returnStream, returnInfo);

            if (document is EFEventDocument_CorrectionLetter_BR)
            {
                evtHandler.eventMessageSentForCorrectionLetter(document.eFDocument());
            }
            else
            {
                evtHandler.eventMessageSent(document.eFDocument());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromSchema</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a specific object that extends <c>EFDocEventMsgBase_BR</c> by schema type.
    /// </summary>
    /// <param name="_schemaType">
    /// The schema type.
    /// </param>
    /// <param name="_contingencyMode">
    /// The contingency mode to be used to build the message
    /// </param>
    /// <returns>
    /// The object of a specfic class of <c>EFDocEventMsgBase_BR</c>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The schema type is not supported.
    /// </exception>

    public static IEFDocEventMsg_BR constructFromSchema(EFDocSchemaType_BR _schemaType, EFDocContingMode_BR _contingencyMode = EFDocContingMode_BR::Off)
    {
        switch (_schemaType)
        {
            case EFDocSchemaType_BR::CorrectionLetter:
                return EFDocMsg_EventCorrectionLetter_BR::construct();

            case EFDocSchemaType_BR::CancelAsEvent:
                return EFDocMsg_EventCancel_BR::construct(_contingencyMode);

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEncorderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Encoder type of the event web service.
    /// </summary>
    /// <param name="_eventMessage">
    /// The <c>IEFDocEventMsg_BR</c> event message that includes event parameters.
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// The <c>FiscalEstablishment_BR</c> record that defines NF-e parameters.
    /// </param>
    /// <returns>
    /// The web service Encoder type.
    /// </returns>
    internal static EFDocEncoderType getEncorderType(IEFDocEventMsg_BR _eventMessage, FiscalEstablishment_BR _fiscalEstablishment)
    {
        EFDocEncoderType encoderType;

        if (_eventMessage is EFDocMsg_EventCorrectionLetter_BR)
        {
            EFDocMsg_EventCorrectionLetter_BR eventMessageTmp = _eventMessage;
            encoderType = eventMessageTmp.getEncoderType(_fiscalEstablishment);
        }
        else if (_eventMessage is EFDocMsg_EventCancel_BR)
        {
            EFDocMsg_EventCancel_BR eventMessageTmp = _eventMessage;
            encoderType = eventMessageTmp.getEncoderType(_fiscalEstablishment);
        }

        return encoderType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSoapVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the SOAP version of the event web service.
    /// </summary>
    /// <param name="_eventMessage">
    /// The <c>IEFDocEventMsg_BR</c> event message that includes event parameters.
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// The <c>FiscalEstablishment_BR</c> record that defines NF-e parameters.
    /// </param>
    /// <returns>
    /// The web service SOAP version.
    /// </returns>
    internal static EFDocSoapVersion getSoapVersion(IEFDocEventMsg_BR _eventMessage, FiscalEstablishment_BR _fiscalEstablishment)
    {
        EFDocSoapVersion soapVersion;

        if (_eventMessage is EFDocMsg_EventCorrectionLetter_BR)
        {
            EFDocMsg_EventCorrectionLetter_BR eventMessageTmp = _eventMessage;
            soapVersion = eventMessageTmp.getSoapVersion(_fiscalEstablishment);
        }
        else if (_eventMessage is EFDocMsg_EventCancel_BR)
        {
            EFDocMsg_EventCancel_BR eventMessageTmp = _eventMessage;
            soapVersion = eventMessageTmp.getSoapVersion(_fiscalEstablishment);
        }

        return soapVersion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>