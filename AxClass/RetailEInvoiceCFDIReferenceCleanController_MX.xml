<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEInvoiceCFDIReferenceCleanController_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailEInvoiceCFDIReferenceCleanController_MX</c> class handles return refernce clearing of the Retail EInvoice for CFDI.
/// </summary>
public class RetailEInvoiceCFDIReferenceCleanController_MX  extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailEInvoiceCFDIReferenceCleanController_MX::validateGeneralParameters();

        if (_args &&
            _args.dataset() == tableNum(EInvoiceJour_MX))
        {
            RetailEInvoiceCFDIReferenceCleanController_MX controller = new RetailEInvoiceCFDIReferenceCleanController_MX(
                classStr(RetailEInvoiceCFDIReferenceCleanService_MX),
                methodStr(RetailEInvoiceCFDIReferenceCleanService_MX, update),
                SysOperationExecutionMode::Synchronous);

            RetailEInvoiceCFDIReferenceCleanContract_MX contract = controller.getDataContractObject() as RetailEInvoiceCFDIReferenceCleanContract_MX;

            if (contract == null)
            {
                throw error(Error::missingParameter(null));
            }

            Set recIdSet = controller.createProcessingRecIdSet(_args);
            if (recIdSet.empty())
            {
                warning(strFmt("@SYS94694"));
            }
            else
            {
                contract.parmEInvoiceJourRecIdSet(controller.createProcessingRecIdSet(_args));
                controller.parmShowDialog(true);
                controller.parmDialogCaption("@RetailEInvoiceCFDI:MarkEInvoiceAsReady_Caption");
                controller.startOperation();
                controller.updateCallerForm(_args);
            }
        }
        else
        {
            error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGeneralParameters</Name>
				<Source><![CDATA[
    private static void validateGeneralParameters()
    {
        if (!EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
        {
            throw error("@SYS341184");
        }

        EInvoiceCFDIVersion_MX version = EInvoiceCFDIParameters_MX::find().CFDIVersion;
        if (version != EInvoiceCFDIVersion_MX::V3_3 && version != EInvoiceCFDIVersion_MX::V4)
        {
            throw error("@SYS4001806");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcessingRecIdSet</Name>
				<Source><![CDATA[
    private Set createProcessingRecIdSet(Args _args)
    {
        Set recIdSet = new Set(Types::Int64);

        if (_args.multiSelectionContext())
        {
            MultiSelectionContext multiSelectionContext = _args.multiSelectionContext();

            EInvoiceJour_MX jour = multiSelectionContext.getFirst();
            while (jour)
            {
                recIdSet.add(jour.RecId);
                jour = multiSelectionContext.getNext();
            }
        }

        if (recIdSet.empty() && _args.record())
        {
            recIdSet.add(_args.record().RecId);
        }
        return recIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallerForm</Name>
				<Source><![CDATA[
    private void updateCallerForm(Args _args)
    {
        if (_args.record().dataSource())
        {
            FormDataSource fds = _args.record().dataSource();
            FormDataSource parentFds = formGetParentDatasource(fds);
            if (parentFds)
            {
                parentFds.research(true);
            }
            else
            {
                fds.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>