<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCashReport_DocJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rCashReport_DocJournal extends RCashReport_Base implements BatchRetryable
{
    TitleId personTitle;
    Name personName;

    DialogField dialogPersonTitle;
    DialogField dialogPersonName;

    NoYes printProlog;
    NoYes printCorrections;
    NoYes printOnSepPage;
    NoYes printRCashName;

    DialogField dialogPrintProlog;
    DialogField dialogPrintCorrections;
    DialogField dialogOnSepPage;
    DialogField dialogPrintRCashName;

    protected const Version CurrentVersion_DocJournal = 3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient = false)
    {
        dialog = super(_dialog, _forceOnClient);

        dialog.addGroup("@SYS7764");
        dialogPrintCorrections = dialog.addField(enumStr(NoYes), "@GLS104489");
        dialogPrintCorrections.value(printCorrections);
        dialogOnSepPage = dialog.addField(enumStr(NoYes), "@GLS104795");
        dialogOnSepPage.value(printOnSepPage);
        dialogPrintRCashName = dialog.addFieldValue(extendedTypeStr(NoYesId), printRCashName, "@GLS116099", "@GLS116100");

        dialog.addGroup("@SYS16146");
        dialogPrintProlog = dialog.addField(enumStr(NoYes), "@GLS102012");
        dialogPrintProlog.value(printProlog);
        dialogPersonTitle = dialog.addField(extendedTypeStr(TitleId));
        dialogPersonTitle.value(personTitle);
        dialogPersonName = dialog.addField(extendedTypeStr(EmplNameRelation_RU), "@GLS101788");
        dialogPersonName.value(personName);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        printCorrections = dialogPrintCorrections.value();
        printProlog = dialogPrintProlog.value();
        personTitle = dialogPersonTitle.value();
        personName = dialogPersonName.value();
        printOnSepPage = dialogOnSepPage.value();
        printRCashName = dialogPrintRCashName.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion_DocJournal, fromDate, toDate, cashAccount, personTitle, personName, printProlog, printCorrections, printOnSepPage, printRCashName] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPersonName</Name>
				<Source><![CDATA[
    public EmplNameRelation_RU parmPersonName()
    {
        return personName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPersonTitle</Name>
				<Source><![CDATA[
    public EmployeeTitle_RU parmPersonTitle()
    {
        return personTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCorrections</Name>
				<Source><![CDATA[
    public NoYes parmPrintCorrections(NoYes _printCorrections = printCorrections)
    {
        if (_printCorrections)
            printCorrections = _printCorrections;

        return printCorrections;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintOnSeparatePage</Name>
				<Source><![CDATA[
    public NoYes parmPrintOnSeparatePage()
    {
        return printOnSepPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintProlog</Name>
				<Source><![CDATA[
    public NoYes parmPrintProlog()
    {
        return printProlog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintRCashName</Name>
				<Source><![CDATA[
    public NoYes parmPrintRCashName(boolean _printRCashName = printRCashName)
    {
        printRCashName = _printRCashName;
        return printRCashName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates XML Excel report and executes it with parameters specified
    /// </summary>
    public void run()
    {
        Args args = new Args();
        args.caller(this);

        XMLExcelReport_KO3_RU report = XMLExcelReport_KO3_RU::construct();
        report.parmArgs(args);

        if (report.init())
        {
            #isoCountryRegionCodes
            GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([ [#isoRU, GlobalizationConstants::FeatureReferenceRU00039] ], funcName());

            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret;
        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            case CurrentVersion_DocJournal:
                container base;
                [version, fromDate, toDate, cashAccount, personTitle, personName, printProlog, printCorrections, printOnSepPage, printRCashName, base] = _packedClass;
                ret = super(base);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a description of what the class is doing.
    /// </summary>
    /// <returns>
    ///    A <c>Description</c>.
    /// </returns>
    /// <remarks>
    ///    This method is used by the batch system to display which class is being used.
    /// </remarks>
    public static Description description()
    {
        return "@GLS102084";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RCashTable cashTable;

        if (args)
        {
            cashTable = args.record();
        }

        RCashReport_DocJournal report = new RCashReport_DocJournal();

        if (cashTable)
        {
            report.parmCashAccount(cashTable.AccountNum);
        }

        if (report.prompt())
        {
            report.runOperation();
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>