<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceLineSourceDocLineItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustInvoiceLineSourceDocumentLines</c> class provides the information to handle the
/// distributions and subledger journal account entries.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_CustomerInvoice), SourceDocumentLine_CustomerInvoice::CustomerFreeTextInvoiceLine)]
public class CustInvoiceLineSourceDocLineItem extends SourceDocumentLineItem
implements SourceDocumentLineItemIProductQuantity, SourceDocumentLineItemIFixedAsset, SourceDocumentLineItemIDescription, SourceDocumentLineItemIProject, SourceDocLineItemICustInvJournalizing,
    SourceDocumentIChargeSource,
    SourceDocumentIDataProvider,
    SourceDocumentLineItemIFixedAsset_RU,
    SourceDocumentLineItemIProjectRevenue,
    AccountingFinTagIDistributionTaggable
{
    CustInvoiceLine  custInvoiceLine;
    CustInvoiceTable custInvoiceTable;
    MarkupTrans      markupTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the default dimension for the line.
    /// </summary>
    /// <returns>
    /// The default dimension for the line.
    /// </returns>
    /// <remarks>
    /// This value is cached in the <see cref="M:SourceDocumentLineItem.parmDefaultDimension" />. All
    /// consumers should use that method to retrieve the default dimension, because it will call this
    /// method as necessary.
    /// </remarks>
    protected DimensionDefault calculateDefaultDimension()
    {
        return custInvoiceLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount map for the line.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>SourceDocumentAmountMap</c> class.
    /// </returns>
    /// <remarks>
    /// This map is cached in the <see cref="M:SourceDocumentLineItem.parmSourceDocumentAmountMap" />. All
    /// consumers should use that method to retrieve the map, because it will call this method as necessary.
    /// </remarks>
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        // <GEERU><GEEU>
        #ISOCountryRegionCodes
        // </GEERU></GEEU>
        SourceDocumentAmountMap sourceDocumentAmountMap;
        SourceDocumentAmount extendedPrice;
        boolean includesTax;

        // <GIN>
        Amount amountMinusInclTax;
        boolean isTaxIncludedFTI_IN = (TaxParameters::checkTaxParameters_IN()
            && FormulaDesigner_IN::isPriceInclTaxOnLineAmount(custInvoiceLine.TaxItemGroup));
        // </GIN>

        // <GTE>
        boolean isTaxIncludedFTIGTE = false;
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            isTaxIncludedFTIGTE = TaxModelDocLineFactory::newTaxModelDocLine(custInvoiceLine).isPriceInclTax();
        }
        // </GTE>

        // Create map
        sourceDocumentAmountMap = SourceDocumentAmountMap::construct();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            // Do amounts include tax fom India formula designer. India ignors standard price inlusive check box by design.
            // Also standard FTI has no price incusive feature.
            if (isTaxIncludedFTI_IN == true || isTaxIncludedFTIGTE == true)
            {
                includesTax = true;
            }
            extendedPrice = SourceDocumentAmount::newFromParameters(sourceDocumentLine, custInvoiceLine.AmountCur, MonetaryAmount::ExtendedPrice, includesTax);
            if (isTaxIncludedFTI_IN == true || isTaxIncludedFTIGTE == true)
            {
                // Below '+' will work correcly for both +ve and -ve FTI's.
                amountMinusInclTax = extendedPrice.parmAmount() + this.getInclTaxAmountForFTIPosting_IN();
                extendedPrice.parmAmount(amountMinusInclTax);
            }
        }
        // </GIN>
        else
        {
            extendedPrice = SourceDocumentAmount::newFromParameters(sourceDocumentLine, custInvoiceLine.lineAmount_RU(), MonetaryAmount::ExtendedPrice, includesTax);
        }
        sourceDocumentAmountMap.insert(extendedPrice);

        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicated if the Free Text invoice can create customer transactions.
    /// </summary>
    /// <returns>
    /// Returns False if the <c>SalesPurchOperationType_BR</c> set on <c>CustInvoiceTable</c>
    /// has the field createFinancialTrans = false.
    /// </returns>
    public boolean createCustTrans_BR()
    {
        return custInvoiceTable.createCustTrans_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>SourceDocumentLineItem</c> class documents a business event.
    /// </summary>
    /// <returns>
    ///    true if the <c>SourceDocumentLineItem</c> class documents a business event; otherwise, false.
    /// </returns>
    public BusinessEvent documentsBusinessEvent()
    {
        BusinessEvent businessEvent;

        if (custInvoiceLine.AmountCur > 0)
        {
            if (custInvoiceTable.isCashPayment())
            {
                businessEvent = new BusinessEvent(enumNum(BusinessEvent_CustomerInvoice), enum2int(BusinessEvent_CustomerInvoice::CashSaleOfProduct));
            }
            else
            {
                businessEvent = new BusinessEvent(enumNum(BusinessEvent_CustomerInvoice), enum2int(BusinessEvent_CustomerInvoice::CreditSaleOfProduct));
            }
        }
        else
        {
            if (custInvoiceTable.isCashPayment())
            {
                businessEvent = new BusinessEvent(enumNum(BusinessEvent_CustomerInvoice), enum2int(BusinessEvent_CustomerInvoice::CashSaleOfProduct));
            }
            else
            {
                businessEvent = new BusinessEvent(enumNum(BusinessEvent_CustomerInvoice), enum2int(BusinessEvent_CustomerInvoice::ReturnOfProduct));
            }
        }

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRAssets_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks is exists a russian asset for the current invoice line.
    /// </summary>
    /// <returns>
    /// true if the fixed asset is linked to the current invoice line; otherwise, false.
    /// </returns>
    public boolean existRAssets_RU()
    {
        return custInvoiceLine.AssetId_RU != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInclTaxAmountForFTIPosting_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates inclusive tax amount.
    /// </summary>
    /// <returns>
    /// The tax included in the amount origin of the FTI.
    /// </returns>

    private TaxAmountCur getInclTaxAmountForFTIPosting_IN()
    {
        TaxAmountCur inclTaxAmount;
        TaxUncommitted taxUncommittedIncl;
        TaxableBasis_IN taxBasis;
        TaxTable taxTableIN;
        TaxTrans taxTransIncl;
        CustInvoiceTrans custInvoiceTrans;
        FormulaDesigner_IN formulaDesigner;

        void getInclusiveAmount()
        {
            taxBasis = formulaDesigner.TaxableBasis;
            if (taxBasis == TaxableBasis_IN::ExclAmount)
            {
                taxBasis = Tax::getTaxableBasis_IN(formulaDesigner);
            }
            if (taxBasis == TaxableBasis_IN::LineAmount
            || taxBasis == TaxableBasis_IN::Assessable)
            {
                if (taxUncommittedIncl.RecId != 0)
                {
                    inclTaxAmount += taxUncommittedIncl.SourceRegulateAmountCur;
                }
                else if (taxTransIncl.RecId != 0)
                {
                    inclTaxAmount += taxTransIncl.SourceRegulateAmountCur;
                }
            }
        }
        if (custInvoiceLine.RecId != 0)
        {
            // Check atleast one record in taxUncommitted available.
            select firstonly taxUncommittedIncl
            where taxUncommittedIncl.SourceRecId == custInvoiceLine.RecId
                && taxUncommittedIncl.SourceTableId == custInvoiceLine.TableId;

            if (taxUncommittedIncl.RecId != 0)
            {
                while select * from taxUncommittedIncl
                where taxUncommittedIncl.SourceRecId == custInvoiceLine.RecId
                    && taxUncommittedIncl.SourceTableId == custInvoiceLine.TableId
                    && taxUncommittedIncl.TaxDirection != TaxDirection::UseTax
                    && taxUncommittedIncl.TaxOrigin != TaxOrigin::TaxReversed
                join * from formulaDesigner
                    where formulaDesigner.TaxItemGroup == taxUncommittedIncl.TaxItemGroup
                       && formulaDesigner.TaxCode == taxUncommittedIncl.TaxCode
                       && formulaDesigner.PriceInclTax == NoYes::Yes
                join * from taxTableIN
                    where taxTableIN.TaxCode == taxUncommittedIncl.TaxCode
                       && taxTableIN.TaxType_IN != TaxType_IN::None
                {
                    getInclusiveAmount();
                }
            }
            else
            {
                // During posting FTI standard deletes TaxUncommitted and TaxTrans records are used instead.
                // If inclTaxAmount = 0, then this call is during FTI Journalizing (ie, not SLJL/distribution time).
                // Here we shud use TaxTrans to get included tax instead of TaxUncommitted.
                select firstonly taxTransIncl
                join custInvoiceTrans
                where taxTransIncl.SourceRecId == custInvoiceTrans.RecId
                   && taxTransIncl.SourceTableId == custInvoiceTrans.TableId;
                if (taxTransIncl.RecId != 0)
                {
                    while select * from taxTransIncl
                    join custInvoiceTrans
                    where taxTransIncl.SourceRecId == custInvoiceTrans.RecId
                       && taxTransIncl.SourceTableId == custInvoiceTrans.TableId
                       && taxTransIncl.TaxDirection != TaxDirection::UseTax
                       && taxTransIncl.TaxOrigin != TaxOrigin::TaxReversed
                       && custInvoiceTrans.SourceDocumentLine == custInvoiceLine.SourceDocumentLine
                    join * from formulaDesigner
                        where formulaDesigner.TaxItemGroup == custInvoiceLine.TaxItemGroup
                           && formulaDesigner.TaxCode == taxTransIncl.TaxCode
                           && formulaDesigner.PriceInclTax == NoYes::Yes
                    join * from taxTableIN
                        where taxTableIN.TaxCode == taxTransIncl.TaxCode
                           && taxTableIN.TaxType_IN != TaxType_IN::None
                    {
                        getInclusiveAmount();
                    }
                }
            }
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            ITaxableDocument taxableDocument = TaxableDocumentObject::construct(TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(custInvoiceTable));
            ITaxDocument taxDocumentObject = TaxBusinessService::calculateTax(taxableDocument);
            if (taxDocumentObject)
            {
                ITaxDocumentLine taxDocumentLineObject = taxDocumentObject.findLineBySource(custInvoiceLine.TableId, custInvoiceLine.RecId);
                
                if (taxDocumentLineObject)
                {
                    inclTaxAmount = -taxDocumentLineObject.getInclTax().amountTransactionCurrency();
                }
            }
        }
        // </GTE>
        return CurrencyExchangeHelper::amount(inclTaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance variables.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    ///    A source document line implementation table.
    /// </param>
    /// <param name="_additionalInformation">
    /// A map to hold buffers of pre initiliazed objects need by the framework to the source document.
    /// </param>
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        custInvoiceLine = _sourceDocumentLineImplementation;

        if (_additionalInformation && _additionalInformation.exists(tableNum(CustInvoiceTable)))
        {
            custInvoiceTable = _additionalInformation.lookup(tableNum(CustInvoiceTable));
        }
        else
        {
            custInvoiceTable = custInvoiceLine.custInvoiceTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceDocumentLineMatchingList</Name>
				<Source><![CDATA[
    protected void initSourceDocumentLineMatchingList()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        return custInvoiceTable.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustingInvoiceDate</Name>
				<Source><![CDATA[
    public TransDate parmAdjustingInvoiceDate()
    {
        return custInvoiceTable.AdjustingInvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmAssetDataAreaId()
    {
        DataAreaId dataAreaId;

        if (custInvoiceLine.AssetId)
        {
            dataAreaId = custInvoiceLine.DataAreaId;
        }

        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetGroupDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmAssetGroupDataAreaId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetGroupId</Name>
				<Source><![CDATA[
    public AssetGroupId parmAssetGroupId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetId</Name>
				<Source><![CDATA[
    public AssetId parmAssetId()
    {
        AssetId assetId;

        assetId = custInvoiceLine.AssetId;

        return assetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTransactionType</Name>
				<Source><![CDATA[
    public AssetTransType parmAssetTransactionType()
    {
        AssetTransType assetTransType;

        assetTransType = AssetTransType::DisposalSale;

        return assetTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBusinessEventDate</Name>
				<Source><![CDATA[
    public DocumentDate parmBusinessEventDate()
    {
        DocumentDate documentDate;

        documentDate = super();

        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeInputAmount</Name>
				<Source><![CDATA[
    public Amount parmChargeInputAmount()
    {
        Amount chargeInputAmount;

        chargeInputAmount = custInvoiceLine.AmountCur;

        return chargeInputAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeQuantity</Name>
				<Source><![CDATA[
    public Qty parmChargeQuantity()
    {
        return this.parmQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeSource</Name>
				<Source><![CDATA[
    public Common parmChargeSource(Common _markupTrans = markupTrans)
    {
        markupTrans = _markupTrans;
        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedInvoiceLineId</Name>
				<Source><![CDATA[
    public CustInvoiceLineIdRefRecId parmCorrectedInvoiceLineId()
    {
        return custInvoiceLine.CorrectedCustInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustBillingClassification</Name>
				<Source><![CDATA[
    public RefRecId parmCustBillingClassification()
    {
        return custInvoiceTable.CustBillingClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustBillingCode</Name>
				<Source><![CDATA[
    public RefRecId parmCustBillingCode()
    {
        return custInvoiceLine.CustBillingCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public Description parmDescription()
    {
        return custInvoiceLine.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionTemplate</Name>
				<Source><![CDATA[
    public AccountingDistributionTemplate parmDistributionTemplate()
    {
        return AccountingDistributionTemplate::find(custInvoiceLine.AccountingDistributionTemplate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionTemplateRecId</Name>
				<Source><![CDATA[
    public AccountingDistributionTemplateRecId parmDistributionTemplateRecId()
    {
        return custInvoiceLine.AccountingDistributionTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRate1</Name>
				<Source><![CDATA[
    public ExchRate parmExchangeRate1()
    {
        ExchRate exchRate;

        exchRate = ProjInvoiceCurrency::find(ProjTable::find(custInvoiceLine.ProjId).ProjInvoiceProjId, custInvoiceTable.CurrencyCode).ExchRate;
        
        if (!exchRate)
        {
            exchRate = custInvoiceTable.getExchRate();
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRate2</Name>
				<Source><![CDATA[
    public ExchRate parmExchangeRate2()
    {
        return custInvoiceTable.getExchRateSecondary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingCurrencyExchangeRate1</Name>
				<Source><![CDATA[
    public ReportingCurrencyExchRate parmReportingCurrencyExchangeRate1()
    {
        return custInvoiceTable.getReportingCurrencyExchRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingCurrencyExchangeRate2</Name>
				<Source><![CDATA[
    public ReportingCurrencyExchRateSecondary parmReportingCurrencyExchangeRate2()
    {
        return custInvoiceTable.getReportingCurrencyExchRateSecondary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForInterestAdjustment</Name>
				<Source><![CDATA[
    public NoYes parmForInterestAdjustment()
    {
        return custInvoiceTable.ForInterestAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDocumentLineEditable</Name>
				<Source><![CDATA[
    public boolean parmIsDocumentLineEditable()
    {
        #ISOCountryRegionCodes
        #EECountryRegionCodes

        boolean isDocumentLineEditable = this.parmIsWorkflowEditable();
        // <GEEU>
        if (isDocumentLineEditable && SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU))
        {
            if (custInvoiceLine.CreditNoteInternalRef_PL != 0 && custInvoiceLine.RefReturnInvoiceTrans_W != 0)
            {
                isDocumentLineEditable = false;
            }
            else if (custInvoiceLine.CreditNoteInternalRef_PL == 0 && custInvoiceLine.RefReturnInvoiceTrans_W != 0
                && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                isDocumentLineEditable = false;
            }
        }
        // </GEEU>

        return isDocumentLineEditable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsProjIntercompany</Name>
				<Source><![CDATA[
    public boolean parmIsProjIntercompany()
    {
        return isConfigurationkeyEnabled(configurationKeyNum(Project)) &&
           custInvoiceTable.ProjIntercompany != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsTaxInChargeInputAmountIncluded</Name>
				<Source><![CDATA[
    public boolean parmIsTaxInChargeInputAmountIncluded()
    {
        return custInvoiceTable.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsWorkflowEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides if the source document line is editable for source document framework when workflow is enabled.
    /// </summary>
    /// <returns>
    /// true if the workflow is in an editable state; otherwise, false.
    /// </returns>
    public boolean parmIsWorkflowEditable()
    {
        return custInvoiceTable.isWorkflowEditable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerDimensionDefaultAccount(LegalEntityRecId _legalEntityRecId = this.parmLegalEntityRecId())
    {
        return custInvoiceLine.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    public LineNum parmLineNum()
    {
        return custInvoiceLine.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectActivityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber parmProjectActivityNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjectCategoryId()
    {
        return custInvoiceLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectFundingSourceRecId</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId parmProjectFundingSourceRecId()
    {
        return custInvoiceLine.ProjFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectId</Name>
				<Source><![CDATA[
    public ProjId parmProjectId()
    {
        return custInvoiceLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectItemSalesTaxGroup</Name>
				<Source><![CDATA[
    public ProjTaxItemGroup parmProjectItemSalesTaxGroup()
    {
        return custInvoiceLine.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectLineProperty</Name>
				<Source><![CDATA[
    public ProjLinePropertyId parmProjectLineProperty()
    {
        ProjLinePropertyId projLinePropertyId;

        changecompany (CompanyInfo::findRecId(this.parmLegalEntityRecId()).DataArea)
        {
            projLinePropertyId = ProjLinePropertySetup::findLinePropertyId(custInvoiceLine.ProjId, custInvoiceLine.ProjCategoryId);
        }

        return projLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceCategoryRecId</Name>
				<Source><![CDATA[
    public ResourceCategoryRecId parmProjectResourceCategoryRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceRecId</Name>
				<Source><![CDATA[
    public ResourceRecId parmProjectResourceRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesCurrencyCode</Name>
				<Source><![CDATA[
    public ProjSalesCurrencyCode parmProjectSalesCurrencyCode()
    {
        return custInvoiceTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesPrice</Name>
				<Source><![CDATA[
    public SalesPrice parmProjectSalesPrice()
    {
        AmountCur unitPrice = 0.0;

        if (custInvoiceLine.UnitPrice)
        {
            unitPrice = custInvoiceLine.UnitPrice;
        }
        else
        {
            if (custInvoiceLine.Quantity)
            {
                unitPrice = custInvoiceLine.AmountCur / custInvoiceLine.Quantity;
            }
        }

        return unitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesTaxGroup</Name>
				<Source><![CDATA[
    public ProjTaxGroup parmProjectSalesTaxGroup()
    {
        return custInvoiceLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesUnit</Name>
				<Source><![CDATA[
    public SalesUnit parmProjectSalesUnit()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectTransactionId</Name>
				<Source><![CDATA[
    public ProjTransIdBase parmProjectTransactionId()
    {
        return custInvoiceLine.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    public Qty parmQuantity()
    {
        return custInvoiceLine.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantityDecimalPlaces</Name>
				<Source><![CDATA[
    public Decimals parmQuantityDecimalPlaces()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode()
    {
        return custInvoiceTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValueModel</Name>
				<Source><![CDATA[
    public AssetBookId parmValueModel()
    {
        AssetBookId assetBookId;

        assetBookId = custInvoiceLine.AssetBookId;

        return assetBookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTagsToAllocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies financial tags to a list of allocations for the current source document line.
    /// </summary>
    /// <param name = "_allocations">The list of allocations.</param>
    /// <returns>The list of allocations with financial tags applied.</returns>
    public LedgerDimensionAllocationList applyTagsToAllocations(LedgerDimensionAllocationList _allocations)
    {

        LedgerDimensionAllocationListEnumerator ledgerDimensionAllocationListEnumerator = _allocations.getEnumerator();
        LedgerDimensionAllocationList returnList = LedgerDimensionAllocationList::construct();

        while (ledgerDimensionAllocationListEnumerator.moveNext())
        {
            LedgerDimensionAllocation currentItem = ledgerDimensionAllocationListEnumerator.current();
            currentItem.parmFinTag(custInvoiceLine.FinTag);
            returnList.addEnd(currentItem);
        }

        return returnList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>