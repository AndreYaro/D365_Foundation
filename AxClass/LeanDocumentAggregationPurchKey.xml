<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentAggregationPurchKey</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentAggregationPurchKey</c> class encapsulates the generation key that is required
///    for the <c>LeanDocumentPurchaseOrderAggregator</c> class to operate.
/// </summary>
public class LeanDocumentAggregationPurchKey
{
    PlanReferenceRefRecId   planReferenceRefRecId;
    ItemId                  itemId;
    DataAreaId              itemDataAreaId;
    DataAreaId              inventDimDataAreaId;
    str                     timePeriodKey;
    InventSiteId            inventSite;
    InventDim               serviceOutputDimensions;

    const int keyElementsCount = 7;

    #localmacro.CurrentList
        planReferenceRefRecId,
        inventSite,
        itemId,
        itemDataAreaId,
        inventDimDataAreaId,
        timePeriodKey
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromContainer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the state of the object by using a container.
    /// </summary>
    /// <param name="_key">
    ///    The container that contains the state.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initFromContainer(container _key)
    {
        if (!_key
            || _key == connull()
            || conlen(_key) != keyElementsCount)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        container productDims;
        [#CurrentList, productDims] = _key;

        int cnt;
        Enumerator enum = InventDim::dimProductDimFieldList().getEnumerator();
        while (enum.moveNext())
        {
            cnt++;
            serviceOutputDimensions.(enum.current()) = conPeek(productDims, cnt);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the key that is used for aggregation.
    /// </summary>
    /// <returns>
    ///    The key that is used for aggregation.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container key()
    {
        container productDims;

        enumerator enum = InventDim::dimProductDimFieldList().getEnumerator();
        while (enum.moveNext())
        {
            productDims += serviceOutputDimensions.(enum.current());
        }

        return [#CurrentList, productDims];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceOutputDimensions</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventDim parmServiceOutputDimensions(InventDim _serviceOutputDimensions = serviceOutputDimensions)
    {
        serviceOutputDimensions = _serviceOutputDimensions;
        return serviceOutputDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfigId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EcoResConfigurationName parmConfigId(EcoResConfigurationName _configId = serviceOutputDimensions.configId)
    {
        serviceOutputDimensions.configId = _configId;

        return serviceOutputDimensions.configId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventColorId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EcoResColorName parmInventColorId(EcoResColorName _inventColorId = serviceOutputDimensions.inventColorId)
    {
        serviceOutputDimensions.inventColorId = _inventColorId;

        return serviceOutputDimensions.inventColorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimDataAreaId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public dataAreaId parmInventDimDataAreaId(dataAreaId _inventDimDataAreaId = inventDimDataAreaId)
    {
        inventDimDataAreaId = _inventDimDataAreaId;

        return inventDimDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSite</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventSiteId parmInventSite(InventSiteId _inventSite = inventSite)
    {
        inventSite = _inventSite;

        return inventSite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSizeId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EcoResSizeName parmInventSizeId(EcoResSizeName _inventSizeId = serviceOutputDimensions.inventSizeId)
    {
        serviceOutputDimensions.inventSizeId = _inventSizeId;

        return serviceOutputDimensions.inventSizeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventStyleId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EcoResStyleName parmInventStyleId(EcoResStyleName _inventStyleId = serviceOutputDimensions.inventStyleId)
    {
        serviceOutputDimensions.inventStyleId = _inventStyleId;

        return serviceOutputDimensions.inventStyleId;
    }

]]></Source>
			</Method>
            <Method>
				<Name>parmInventVersionId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EcoResVersionName parmInventVersionId(EcoResVersionName _inventVersionId = serviceOutputDimensions.inventVersionId)
    {
        serviceOutputDimensions.inventVersionId = _inventVersionId;

        return serviceOutputDimensions.inventVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemDataAreaId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public dataAreaId parmItemDataAreaId(dataAreaId _itemDataAreaId = itemDataAreaId)
    {
        itemDataAreaId = _itemDataAreaId;

        return itemDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanReferenceRefRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanReferenceRefRecId parmPlanReferenceRefRecId(PlanReferenceRefRecId _planReferenceRefRecId = planReferenceRefRecId)
    {
        planReferenceRefRecId = _planReferenceRefRecId;

        return planReferenceRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimePeriodKey</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str parmTimePeriodKey(str _timePeriodKey = timePeriodKey)
    {
        timePeriodKey = _timePeriodKey;

        return timePeriodKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static LeanDocumentAggregationPurchKey construct()
    {
        return new LeanDocumentAggregationPurchKey();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LeanDocumentAggregationPurchKey</c> class.
    /// </summary>
    /// <param name="_key">
    ///    The container that contains the state of the object.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>LeanDocumentAggregationPurchKey</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanDocumentAggregationPurchKey newKey(container _key)
    {
        LeanDocumentAggregationPurchKey result = LeanDocumentAggregationPurchKey::construct();
        result.initFromContainer(_key);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LeanDocumentAggregationPurchKey</c> class.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> record.
    /// </param>
    /// <param name="_planActivity">
    ///    A <c>PlanActivity</c> record.
    /// </param>
    /// <param name="_planActivityService">
    ///    A <c>PlanActivityService</c> record.
    /// </param>
    /// <param name="_serviceOutputDimensions">
    ///    An <c>InventDim</c> record that holds the service dimensions.
    /// </param>
    /// <param name="_periodKey">
    ///    The time period key.
    /// </param>
    /// <returns>
    ///    A new instance of <c>LeanDocumentAggregationPurchKey</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanDocumentAggregationPurchKey newStandard(
        KanbanJob _kanbanJob,
        PlanActivity _planActivity,
        PlanActivityService _planActivityService,
        InventDim _serviceOutputDimensions,
        str _periodKey)
    {
        LeanDocumentAggregationPurchKey result = LeanDocumentAggregationPurchKey::construct();

        result.parmInventSite(_kanbanJob.inventDim().InventSiteId);
        result.parmPlanReferenceRefRecId(_planActivity.PlanReference);
        result.parmItemId(_planActivityService.ItemId);
        result.parmItemDataAreaId(_planActivityService.ItemDataAreaId);
        result.parmInventDimDataAreaId(_serviceOutputDimensions.DataAreaId);
        result.parmServiceOutputDimensions(_serviceOutputDimensions);
        result.parmTimePeriodKey(_periodKey);

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>