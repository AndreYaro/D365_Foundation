<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransEmplTransSale</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransEmplTransSale extends ProjTransEmplTrans
{
    ProjEmplTransSale   projEmplTransSale;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the transaction can be invoiced.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that indicates whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if the transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, the funding type is validated and
    /// the <c>ProjTrans.canTransStatusBeInvoiced</c> method is called to determine whether the transaction
    /// can be invoiced based on its status.
    /// </remarks>
    public boolean canBeInvoiced(boolean _chargeable = false)
    {
        ProjFundingSource   projFundingSource;
        boolean             ret;

        if (ProjMultipleContractLinesForProjectFeatureHelper::isTimeMaterialBillingMethod(this.projTable(), ProjTransType::Hour))
        {
            ret = super(_chargeable);
        }
        else
        {
            ret = false;
        }

        if (ret == true)
        {
            projFundingSource = ProjFundingSource::find(this.fundingSource());
            if ((projFundingSource.FundingType == ProjFundingType::Organization) ||
                (projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource))
            {
                ret = false;
            }
        }

        if (ret)
        {
            ret = ProjInvoiceTable::isBillingRuleInvoiceable(this.projId(), this.categoryId(), this.psaContractLineNum(), this.transType());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost template ID for the transaction.
    /// </summary>
    /// <returns>
    /// An empty String.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjControlId controlId()
    {
        return projEmplTransSale.ControlId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlPeriodTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the end date of the project period for the transaction.
    /// </summary>
    /// <returns>
    /// A null date.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjPeriodFrom controlPeriodTo()
    {
        return projEmplTransSale.wipPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the version number of the project period for the transaction.
    /// </summary>
    /// <returns>
    /// A <c>ProjControlVersion</c> value that indicates the version number.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjControlVersion controlVersion()
    {
        return projEmplTransSale.ControlVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return  projEmplTransSale.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return projEmplTransSale.FundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiced</Name>
				<Source><![CDATA[
/// <summary>
    /// Determines whether the transaction has been invoiced.
    /// </summary>
    /// <returns>
    /// true if the transaction has been invoiced; otherwise, false.
    /// </returns>
    public  boolean invoiced()
    {
        boolean ret;

        if (ProjEmplTrans.TransactionOrigin == ProjOrigin::BeginningBalance && projEmplTransSale.TransStatus == ProjTransStatus::Invoiced)
        {
            ret = true;
        }
        else
        {
            ret = ProjInvoiceEmplDetail::find(this.recId()).RecId ? true : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice ID of the invoice for the transaction.
    /// </summary>
    /// <returns>
    /// The invoice ID of the invoice for the transaction.
    /// </returns>
    public ProjInvoiceId invoiceId()
    {
        if (this.transStatus() == ProjTransStatus::CreditnoteProposal)
        {
            return '';
        }
        else
        {
            return ProjInvoiceEmplDetail::find(this.recId()).projInvoiceEmpl().ProjInvoiceId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales amount to post to the general ledger.
    /// </summary>
    /// <returns>
    /// The sales amount to post to the general ledger.
    /// </returns>
    public AmountMST ledgerSalesAmountMST()
    {
        return projEmplTransSale.LedgerSalesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether sales have been posted to the general ledger.
    /// </summary>
    /// <returns>
    /// Always returns <c>NoYes::No</c>.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public NoYes ledgerSalesPosted()
    {
        return projEmplTransSale.LedgerSalesPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjEmplTrans _projEmplTrans, ProjEmplTransSale _projEmplTransSale)
    {
        projEmplTransSale = _projEmplTransSale;

        super(_projEmplTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the transaction is from a project proposal.
    /// </summary>
    /// <returns>
    /// true if this transaction is from a project proposal; otherwise, false.
    /// </returns>
    public  boolean proposal()
    {
        return ProjProposalEmplDetail::findActiveProposalId(this.recId()) ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the project proposal that is associated with the transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project proposal that is associated with the transaction.
    /// </returns>
    public  ProjProposalId proposalId()
    {
        return ProjProposalEmplDetail::findActiveProposalId(this.recId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    public RecId recId()
    {
        return projEmplTransSale.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for the transaction.
    /// </summary>
    /// <returns>
    /// The sales price for the transaction.
    /// </returns>
    public SalesPrice salesPrice()
    {
        return projEmplTransSale.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the transaction.
    /// </summary>
    /// <returns>
    /// The table ID for the transaction.
    /// </returns>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjEmplTransSale));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total cost of the transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The total cost of the transaction.
    /// </returns>
    public  Amount transCost()
    {
        return 0.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transStatus</Name>
				<Source><![CDATA[
    public ProjTransStatus transStatus()
    {
        return projEmplTransSale.TransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the turnover amount
    /// </summary>
    /// <returns>
    /// The turnover amount
    /// </returns>
    public AmountCur transTurnover()
    {
        return projEmplTransSale.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    public Voucher voucherInvoice()
    {
        ProjInvoiceEmplDetail   projInvoiceEmplDetail;
        ProjInvoiceEmpl         projInvoiceEmpl;

        if (ProjInvoiceEmplDetail::exist(this.recId()))
        {
            projInvoiceEmplDetail = ProjInvoiceEmplDetail::find(this.recId());
            projInvoiceEmpl = projInvoiceEmplDetail.projInvoiceEmpl();
            return ProjInvoiceJour::find(projInvoiceEmpl.ProjInvoiceId, projInvoiceEmpl.InvoiceDate).LedgerVoucher;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditNoteOrigTransInvoiceDate</Name>
				<Source><![CDATA[
    internal TransDate getCreditNoteOrigTransInvoiceDate()
    {
        ProjEmplTransSale projEmplTransSaleLoc;
        ProjInvoiceEmpl projInvoiceEmplLoc;
        ProjInvoiceEmplDetail projInvoiceEmplDetailLoc;

        select firstonly InvoiceDate from projInvoiceEmplLoc
            order by projInvoiceEmplLoc.InvoiceDate desc
            where projInvoiceEmplLoc.TransId == this.transId()
                && projInvoiceEmplLoc.Qty == this.qty()
            exists join projInvoiceEmplDetailLoc
                where projInvoiceEmplDetailLoc.InvoiceRefRecId == projInvoiceEmplLoc.RecId
            exists join projEmplTransSaleLoc
                where projEmplTransSaleLoc.RecId == projInvoiceEmplDetailLoc.SaleRefRecId
                    && projEmplTransSaleLoc.TransStatus == ProjTransStatus::MarkedCreditNote
                    && projEmplTransSaleLoc.FundingSource == this.fundingSource();

        InvoiceDate origInvoiceDate = projInvoiceEmplLoc.InvoiceDate;
        
        return origInvoiceDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>