<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanCache</c> class caches budget plan information.
/// </summary>
public class BudgetPlanCache
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearAllScopes</Name>
				<Source><![CDATA[
    /// <summary> Clears the budget plan cache for all <c>BudgetPlanCacheScope</c> cache scopes. </summary>
    public static void clearAllScopes()
    {
        DictEnum dictEnum = new DictEnum(enumNum(BudgetPlanCacheScope));

        for (int i = 0; i <= dictEnum.values(); i++)
        {
            BudgetPlanCache::clearScope(dictEnum.index2Value(i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheScopeStr</Name>
				<Source><![CDATA[
    /// <summary> Gets the budget plan cache scope identifier for the specified cache scope. </summary>
    /// <param name="_scope"> The budget plan cache scope for which to get the identifier. </param>
    /// <returns> The identifier of the budget plan cache scope. </returns>
    public static GlobalObjectCacheScope getCacheScopeStr(BudgetPlanCacheScope _scope)
    {
        // Int2Str is used instead of Enum2Str to get the int
        // value like '2' instead of the string value for
        // the scope to ensure uniqueness. The _scope enum
        // is implicitly cast to an int by this call.
        return BudgetPlanningConstants::BudgetPlanCache + int2str(_scope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearScope</Name>
				<Source><![CDATA[
    /// <summary> Clears the cache for the specified budget plan cache scope. </summary>
    /// <param name="_scope"> The budget plan cache scope to clear. </param>
    public static void clearScope(BudgetPlanCacheScope _scope)
    {
        SysGlobalObjectCache objectCache = ClassFactory.globalObjectCache();
        objectCache.clear(BudgetPlanCache::getCacheScopeStr(_scope));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    /// <summary> Gets the budget plan cache value for the specified budget plan cache scope and value key. </summary>
    /// <param name="_scope"> The budget plan cache scope for which to obtain the cache value. </param>
    /// <param name="_key"> The value key for which to obtain the cache value. </param>
    /// <returns> The budget plan cache value. </returns>
    public static container getValue(BudgetPlanCacheScope _scope, container _key)
    {
        SysGlobalObjectCache objectCache = ClassFactory.globalObjectCache();

        return objectCache.find(BudgetPlanCache::getCacheScopeStr(_scope), _key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeValue</Name>
				<Source><![CDATA[
    /// <summary> Removes the budget plan cache value. </summary>
    /// <param name="_scope"> The budget plan cache scope to remove. </param>
    /// <param name="_key"> The value key to remove. </param>
    public static void removeValue(BudgetPlanCacheScope _scope, container _key)
    {
        SysGlobalObjectCache objectCache = ClassFactory.globalObjectCache();
        objectCache.remove(BudgetPlanCache::getCacheScopeStr(_scope), _key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValue</Name>
				<Source><![CDATA[
    /// <summary> Inserts the budget plan cache value. </summary>
    /// <param name="_scope"> The budget plan cache scope to insert. </param>
    /// <param name="_key"> The value key to insert. </param>
    /// <param name="_value"> The value to insert. </param>
    public static void insertValue(BudgetPlanCacheScope _scope, container _key, container _value)
    {
        SysGlobalObjectCache objectCache = ClassFactory.globalObjectCache();
        objectCache.insert(BudgetPlanCache::getCacheScopeStr(_scope), _key, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueExists</Name>
				<Source><![CDATA[
    /// <summary> Indicates whether the specified value key in the budget plan cache exists. </summary>
    /// <param name="_scope"> The budget plan cache scope of the budget cache to check for existence. </param>
    /// <param name="_key"> The value key of the budget plan cache to check for existence. </param>
    /// <returns> true if the specified value key exists; otherwise, false. </returns>
    public static boolean valueExists(BudgetPlanCacheScope _scope, container _key)
    {
        SysGlobalObjectCache objectCache = ClassFactory.globalObjectCache();

        return (objectCache.find(BudgetPlanCache::getCacheScopeStr(_scope), _key) != conNull());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>