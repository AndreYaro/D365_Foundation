<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_NotInfluenceIncomeMult</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25RegCalc_NotInfluenceIncomeMult extends RTax25RegCalc_LedgerMultiply implements BatchRetryable
{
    AmountMST totalAmountReceipt,totalAmountIssue,totalCTLAmount,totalCTAAmount;
    AmountMST profitAmountReceipt,profitAmountIssue,profitCTLAmount,profitCTAAmount;
    AmountMST taxCodeAmountReceipt,taxCodeAmountIssue,taxCodeCTLAmount,taxCodeCTAAmount;
    TaxCode   lastTaxCode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBody</Name>
				<Source><![CDATA[
    protected void createBody()
    {
        RTax25ProfitTable   rTax25ProfitTable = RTax25ProfitTable::find(stdDocuments.profitTableRecId());
        TaxCode             taxCode           = rTax25ProfitTable.taxCode();
        Tax                 tax = new Tax();
        TaxAmountCur        taxAmount;

        if (stdDocuments.amount())
        {
            taxAmount = tax.taxCalcWithoutSource_RU(taxCode,dateTo,CompanyInfoHelper::standardCurrency(),stdDocuments.amount(),TaxModuleType::Voucher);
            regQuery.addBodyRecord(stdDocuments.profitTableRecId(),
                                   [stdDocuments.transDate(),
                                    rTax25ProfitTable.Description,
                                    stdDocuments.itemName()   ? stdDocuments.itemName()  :
                                   (stdDocuments.assetId() ? stdDocuments.assetId() : stdDocuments.txt()),
                                    rTax25ProfitTable.ProfitType == RTax25ProfitType::Receipt ? stdDocuments.amount() : 0.0,
                                    rTax25ProfitTable.ProfitType == RTax25ProfitType::Receipt ? taxAmount : 0.0,
                                    rTax25ProfitTable.ProfitType == RTax25ProfitType::Issue   ? stdDocuments.amount() : 0.0,
                                    rTax25ProfitTable.ProfitType == RTax25ProfitType::Issue   ? taxAmount : 0.0],
                                    stdDocuments.tableId(),
                                    stdDocuments.recId(),
                                    RTax25RegisterProfit::find(registerId, stdDocuments.profitTableRecId()).PaymentCondition,
                                    -startCount,
                                    stdDocuments.amount());
            startCount++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFooter</Name>
				<Source><![CDATA[
    #define.FieldNum1(1)
    #define.FieldNum2(2)
    protected void createFooter(Counter       _i,
                                RTax25FieldId _blockFieldNum = 0)
    {
        TaxValue taxValue = TaxData::percent(lastTaxCode,dateTo,0);
        switch (_blockFieldNum)
        {
            case #FieldNum1:
                regQuery.addFooterRecord(0,
                                        [dateNull(),"","", taxCodeAmountReceipt,taxCodeCTAAmount,taxCodeAmountIssue,taxCodeCTLAmount],
                                         0,
                                         strfmt("@GLS107102", lastTaxCode,taxValue),
                                         _i);
                taxCodeAmountReceipt = 0;
                taxCodeAmountIssue   = 0;
                taxCodeCTAAmount     = 0;
                taxCodeCTLAmount     = 0;
                break;
            case #FieldNum2:
                regQuery.addFooterRecord(lastProfitTableRecId,
                                         [dateNull(),"","", profitAmountReceipt,profitCTAAmount,profitAmountIssue,profitCTLAmount],
                                         0,
                                         strfmt("@GLS103999", RTax25ProfitTable::find(lastProfitTableRecId).ProfitId),
                                         _i);
                profitAmountReceipt = 0;
                profitAmountIssue   = 0;
                profitCTAAmount     = 0;
                profitCTLAmount     = 0;
                profitQty           = 0;
                break;
            default:
                regQuery.addFooterRecord(0,
                                         [dateNull(),"","", totalAmountReceipt,totalCTAAmount,totalAmountIssue,totalCTLAmount],
                                         0,
                                         "@SYS37297",
                                         _i);
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    #define.FieldNum1(1)
    #define.FieldNum2(2)
    protected void createHeader(Counter       _i,
                                RTax25FieldId _blockFieldNum = 0)

    {
        switch (_blockFieldNum)
        {
            case #FieldNum1:
                regQuery.addHeaderRecord(0,
                                         conNull(),
                                         0,
                                         strfmt("@GLS107103",lastTaxCode, TaxData::percent(lastTaxCode,dateTo,0)),
                                         _i);
                break;
            case #FieldNum2:
                regQuery.addHeaderRecord(lastProfitTableRecId,
                                         conNull(),
                                         0,
                                         strfmt("@GLS104111", RTax25ProfitTable::find(lastProfitTableRecId).ProfitId),
                                         _i);
                break;
            default:
                 regQuery.addHeaderRecord(0,
                                          conNull(),
                                          0,
                                          "@SYS28004",
                                          _i);
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortRegisterTrans</Name>
				<Source><![CDATA[
    #define.FieldNum1(1)
    #define.FieldNum2(2)
    protected void sortRegisterTrans()
    {
        RTax25RegisterTrans_NotInfluenceIncome  trans;
        RecordSortedList                        registerTransList;
        MapEnumerator                           mapEnumerator;
        TaxCode                                 taxCode;
        int                                     i = 1;
        Map                                     registerLineMap = new Map (Types::String, Types::Class);
        ;

        while select forupdate trans
            where trans.JournalTransRefRecId == journalTransRecId
        {
            taxCode  = RTax25ProfitTable::find(trans.RTax25ProfitTable).taxCode();
            if (registerLineMap.exists(taxCode))
            {
                registerTransList = registerLineMap.lookup(taxCode);
            }
            else
            {
                registerTransList = new RecordSortedList(tablenum(RTax25RegisterTrans_NotInfluenceIncome));
                registerTransList.sortOrder(fieldnum(RTax25RegisterTrans_NotInfluenceIncome, RTax25ProfitTable),
                                            fieldnum(RTax25RegisterTrans_NotInfluenceIncome, TransactionDate),
                                            fieldnum(RTax25RegisterTrans_NotInfluenceIncome, RecId));
            }
            registerTransList.ins(trans);
            registerLineMap.insert(taxCode, registerTransList);
            startCount++;
        }

        if (! isInBatch)
            this.progressInit("@SYS4138", startCount);

        mapEnumerator   = registerLineMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            registerTransList = mapEnumerator.currentValue();
            if (i == 1)
            {
                this.createHeader(i);
            }
            i++;
            lastTaxCode = mapEnumerator.currentKey();
            this.createHeader(i,#FieldNum1);
            lastProfitTableRecId = 0;
            while (registerTransList.next(trans))
            {
                if (trans.RTax25ProfitTable != lastProfitTableRecId)
                {
                    if (lastProfitTableRecId)
                    {
                        i++;
                        this.createFooter(i,#FieldNum2);
                    }
                    i++;
                    lastProfitTableRecId = trans.RTax25ProfitTable;
                    this.createHeader(i,#FieldNum2);
                }
                i++;
                this.totals(trans);
                trans.LineNumber = i;
                trans.doUpdate();
                if (! isInBatch)
                    progress.incCount();
            }
            i++;
            this.createFooter(i,#FieldNum2);
            i++;
            this.createFooter(i,#FieldNum1);
        }
        if (i > 1 )
        {
           i++;
           this.createFooter(i);
        }
        regQuery.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    protected void totals(RTax25RegisterTransMap _trans)
    {
        RTax25RegisterTrans_NotInfluenceIncome trans = _trans;
        totalAmountReceipt   += trans.IncomeAmount;
        totalCTAAmount       += trans.CTAAmount;
        totalAmountIssue     += trans.IssueAmount;
        totalCTLAmount       += trans.CTLAmount;
        profitAmountReceipt  += trans.IncomeAmount;
        profitCTAAmount      += trans.CTAAmount;
        profitAmountIssue    += trans.IssueAmount;
        profitCTLAmount      += trans.CTLAmount;
        taxCodeAmountReceipt += trans.IncomeAmount;
        taxCodeCTAAmount     += trans.CTAAmount;
        taxCodeAmountIssue   += trans.IssueAmount;
        taxCodeCTLAmount     += trans.CTLAmount;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>