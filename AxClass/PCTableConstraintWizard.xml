<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcTableConstraintWizard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Controls the <c>PCTableConstraintWizard</c> form.
/// </summary>
class PcTableConstraintWizard extends SysWizard
{
    PCDatabaseRelationConstraintDefinition  tcTableSystem;
    PCGlobalTableConstraintDefinition       tcTableUserDefined;

    PCTableConstraintName                   tcName;

    PCTableConstraintType                   tcType;

    PCDescription                           description;

    // only used for system type
    [FormObservable]
    tableName                               tableName;

    NoYes                                   callSuper;

    FormDataSource                          ds_userColumn;
    FormDataSource                          ds_systemColumn;

    const int tabName           = 2;
    const int tabSystemColumns  = 3;
    const int tabUserColumns    = 4;
    const int tabFinish         = 5;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>back</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the active step in the wizard one position backward.
    /// </summary>
    void back()
    {
        if (callSuper == NoYes::Yes)
        {
            super();
        }

        switch (tabIdx)
        {
            case tabName :
                this.skipTab(tabSystemColumns, false);
                this.skipTab(tabUserColumns, false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cancels the creation of a table constraint definition.
    /// </summary>
    public void cancel()
    {
        this.deleteTableConstraint();

        if (callSuper == NoYes::Yes)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeTab</Name>
				<Source><![CDATA[
    protected void changeTab(int idx)
    {
        if (callSuper == NoYes::Yes)
        {
            tab.tab(idx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitChanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Commits changes that were made to the table constraint definition.
    /// </summary>
    public void commitChanges()
    {
        PCTableConstraintColumnDefinition column;

        ttsbegin;

        if (tcTableSystem.RecId != 0)
        {
            tcTableSystem                       = PCDatabaseRelationConstraintDefinition::find(tcTableSystem.RecId, true);
            tcTableSystem.Name                  = this.parmTCName();
            tcTableSystem.Description           = this.parmDescription();
            tcTableSystem.ReferencedTableId     = tablename2id(this.parmSystemTableName());

            // Remove columns if referenced table is changed.
            if (tcTableSystem.orig().ReferencedTableId != tcTableSystem.ReferencedTableId)
            {
                delete_from column
                    where column.TableConstraintDefinition == tcTableSystem.RecId;
            }

            tcTableSystem.update();
        }
        else if (tcTableUserDefined.RecId != 0)
        {
            tcTableUserDefined              = PCGlobalTableConstraintDefinition::find(tcTableUserDefined.RecId, true);
            tcTableUserDefined.Name         = this.parmTCName();
            tcTableUserDefined.Description  = this.parmDescription();
            tcTableUserDefined.update();
        }
        else
        {
            // insert record
            if (this.parmTCName() != '')
            {
                if (this.parmTCType() == PCTableConstraintType::UserDefined)
                {
                    this.insertUserDefinedTableConstraint();
                }
                else
                {
                    this.insertSystemTableConstraint();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTableConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes any table constraint definition that was created by the wizard.
    /// </summary>
    public void deleteTableConstraint()
    {
        ttsbegin;
        if (tcTableSystem.RecId != 0)
        {
            tcTableSystem.delete();
            tcTableSystem.clear();
        }
        if (tcTableUserDefined.RecId != 0)
        {
            tcTableUserDefined.delete();
            tcTableUserDefined.clear();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSystemTableName</Name>
				<Source><![CDATA[
    public tableName editSystemTableName(boolean _set, tableName _tableName)
    {
        if (_set)
        {
            this.parmSystemTableName(_tableName);
            this.commitChanges();
            this.validateStepNameAndType();
        }

        return this.parmSystemTableName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTCName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the table constraint name.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the table constraint name is set.
    /// </param>
    /// <param name="_name">
    /// A table constraint name.
    /// </param>
    /// <returns>
    /// A table constraint name.
    /// </returns>
    public PCTableConstraintName  editTCName(boolean _set, PCTableConstraintName _name)
    {
        if (_set)
        {
            if (!PCTableConstraintDefinition::nameExist(_name))
            {
                this.parmTCName(_name);
                this.commitChanges();
            }
            else
            {
                warning(strfmt("@SYS308833", _name));
            }

            this.validateStepNameAndType();
        }

        return this.parmTCName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the form.
    /// </summary>
    /// <returns>
    ///    A form name.
    /// </returns>
    formName formName()
    {
        return formstr(PCTableConstraintWizard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the table constraint definition.
    /// </summary>
    /// <returns>
    ///    A <c>PCTableConstraintDefinition</c> record buffer.
    /// </returns>
    public PCTableConstraintDefinition getTableConstraint()
    {
        if (tcTableSystem.RecId != 0)
        {
            return tcTableSystem;
        }
        else
        {
            return tcTableUserDefined;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSystemTableConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a system table constraint.
    /// </summary>
    public void insertSystemTableConstraint()
    {
        ttsbegin;
        tcTableSystem.ReferencedTableId     = tablename2id(this.parmSystemTableName());
        tcTableSystem.Name                  = this.parmTCName();
        tcTableSystem.Description           = this.parmDescription();
        tcTableSystem.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertUserDefinedTableConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a user-defined table constraint.
    /// </summary>
    public void insertUserDefinedTableConstraint()
    {
        ttsbegin;
        tcTableUserDefined.Name         = this.parmTCName();
        tcTableUserDefined.Description  = this.parmDescription();
        tcTableUserDefined.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        callSuper   = NoYes::Yes;
        tcType      = PCTableConstraintType::UserDefined;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the active step in the wizard one position forward.
    /// </summary>
    void next()
    {
        FormRun localFormRun = formRun;

        if (callSuper == NoYes::Yes)
        {
            super();
        }

        switch (tabIdx)
        {
            case tabName :
                if (!this.parmTCName())
                {
                    //don't let the user advance if no table constraint name has been inputted
                    this.nextEnabled(false);
                    localFormRun.design().controlName('editTableConstraintName').setFocus();
                }
                break;
            case tabSystemColumns :
                //commit the last changes to description/name
                this.commitChanges();
                if (this.parmTCType() == PCTableConstraintType::UserDefined)
                {
                    this.startUserDefinedMode();
                }
                else
                {
                    this.startSystemDefinedMode();
                }
                break;
            case tabFinish   :
                if (this.validateColumnsHaveBeenCreated() == NoYes::Yes)
                {
                    this.finishEnabled(true);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openQueryBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the query builder form.
    /// </summary>
    /// <param name="_prompt">
    ///    A <c>NoYes</c> value that indicates whether the user should be prompted.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The selected type is not system.
    /// </exception>
    public void openQueryBuilder(NoYes _prompt = NoYes::Yes)
    {
        Query                   query = new Query();
        QueryRun                queryRun;

        if (this.parmTCType() != PCTableConstraintType::System || tcTableSystem.RecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (tcTableSystem.Query != connull())
        {
            query = new Query(tcTableSystem.Query);
        }
        else
        {
            query.addDataSource(tcTableSystem.ReferencedTableId);
        }

        queryRun = new QueryRun(query);

        if (_prompt == NoYes::Yes)
        queryRun.prompt();

        ttsbegin;
        tcTableSystem = PCDatabaseRelationConstraintDefinition::find(tcTableSystem.RecId, true);
        tcTableSystem.Query = queryRun.query().pack();
        tcTableSystem.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openWarningDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the user will be presented with a warning dialog.
    /// </summary>
    /// <returns>
    ///    A <c>NoYes::Yes</c> enumeration value if the user will be warned; otherwise, the <c>NoYes::No</c>
    ///    enumeration value.
    /// </returns>
    public NoYes openWarningDialog()
    {
        NoYes   ret = NoYes::No;

        if (tcTableUserDefined.hasColumns() == NoYes::Yes || tcTableSystem.hasColumns() == NoYes::Yes)
        {
            ret = NoYes::Yes;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallSuper</Name>
				<Source><![CDATA[
    public NoYes parmCallSuper(NoYes _call = callSuper)
    {
        callSuper = _call;

        return callSuper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public PCDescription parmDescription(PCDescription _description = description)
    {
        description = _description;

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSystemColumnDS</Name>
				<Source><![CDATA[
    public FormDataSource parmSystemColumnDS(FormDataSource _dsSystemColumn = ds_systemColumn)
    {
        ds_systemColumn = _dsSystemColumn;

        return ds_systemColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSystemTableName</Name>
				<Source><![CDATA[
    public tableName parmSystemTableName(tableName _tableName = tableName)
    {
        tableName = _tableName;

        return tableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTabIdx</Name>
				<Source><![CDATA[
    public int parmTabIdx(int _tab = tabIdx)
    {
        tabIdx = _tab;

        return tabIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTCName</Name>
				<Source><![CDATA[
    public PCTableConstraintName parmTCName(PCTableConstraintName _name = tcName)
    {
        tcName = _name;

        return tcName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTCType</Name>
				<Source><![CDATA[
    public PCTableConstraintType parmTCType(PCTableConstraintType _type = tcType)
    {
        if (_type != tcType)
        {
            this.deleteTableConstraint();
            tcType = _type;
            this.parmSystemTableName('');
        }

        return tcType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserColumnDS</Name>
				<Source><![CDATA[
    public FormDataSource parmUserColumnDS(FormDataSource _dsUserColumn = ds_userColumn)
    {
        ds_userColumn = _dsUserColumn;

        return ds_userColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTCType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the table constraint type.
    /// </summary>
    /// <param name="_type">
    /// A table constraint type.
    /// </param>
    public void setTCType(PCTableConstraintType _type)
    {
        if (_type != tcType)
        {
            this.deleteTableConstraint();
            tcType = _type;
            this.parmSystemTableName('');
            // validate that user can proceed

            this.commitChanges();
            this.validateStepNameAndType();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startSystemDefinedMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the wizard to run in the system-defined mode.
    /// </summary>
    void startSystemDefinedMode()
    {
        // disable user defined tabs
        this.skipTab(tabUserColumns, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startUserDefinedMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the wizard to run in the user defined mode.
    /// </summary>
    void startUserDefinedMode()
    {
        // disable system tabs
        this.skipTab(tabSystemColumns, true);
        // move to next tab
        this.changeTab(tabUserColumns);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateColumnsHaveBeenCreated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that columns have been created for the table constraint definition.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> enumeration value if the validation was successful; otherwise, the
    ///    <c>NoYes::No</c> value.
    /// </returns>
    public NoYes validateColumnsHaveBeenCreated()
    {
        NoYes ret = NoYes::Yes;

        if (tcTableUserDefined.hasColumns() == NoYes::No && tcTableSystem.hasColumns() == NoYes::No)
        {
            warning("@SYS308832");
            ret = NoYes::No;

            if (this.parmTCType() == PCTableConstraintType::UserDefined)
            {
                this.changeTab(tabUserColumns);
            }
            else
            {
                this.changeTab(tabSystemColumns);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStepNameAndType</Name>
				<Source><![CDATA[
    protected void validateStepNameAndType()
    {
        boolean valid = false;

        if (tcTableSystem.RecId != 0 && tcTableSystem.Name != '')
        {
            if (tcTableSystem.ReferencedTableId != 0)
            {
                valid = true;
            }
        }
        else if (tcTableUserDefined.RecId != 0 && tcTableUserDefined.Name != '')
        {
            valid = true;
        }

        if (this.parmCallSuper() == NoYes::Yes)
        {
            this.nextEnabled(valid);
            ds_userColumn.executeQuery();
            ds_systemColumn.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCTableConstraintWizard construct()
    {
        return new PCTableConstraintWizard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        PCTableConstraintWizard wizard = PCTableConstraintWizard::construct();

        if (wizard.prompt())
        {
            wizard.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>