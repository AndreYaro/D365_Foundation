<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalPostLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalPostLedger</c> class handles the creation of the ledger postings for the bank - foreign currency revaluation process.
/// </summary>
public final class BankCurrencyRevalPostLedger
{
    private BankCurrencyRevalLedgerVoucher bankCurrencyRevalLedgerVoucher;
    private BankCurrencyRevalTmp bankCurrencyRevalTmpByDimension;

    #ISOCountryRegionCodes
    private boolean countryRegion_EE;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankCurrencyRevalTmpAndLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BankCurrencyRevalPostLedger</c> class given a <c>BankCurrencyRevalTmp</c> table buffer containing revaluation values
    /// distributed across ledger dimensions.
    /// </summary>
    /// <param name = "_bankCurrencyRevalTmpByDimension">
    /// A <c>BankCurrencyRevalTmp</c> table buffer containing revaluation values distributed across ledger dimensions.
    /// </param>
    /// <param name = "_bankCurrencyRevalLedgerVoucher">The current <c>BankCurrencyRevalLedgerVoucher</c> class instance containing ledger posting information.</param>
    /// <returns>A new instance of the <c>BankCurrencyRevalPostLedger</c> class.</returns>
    internal static BankCurrencyRevalPostLedger newFromBankCurrencyRevalTmpAndLedgerVoucher(
        BankCurrencyRevalTmp _bankCurrencyRevalTmpByDimension,
        BankCurrencyRevalLedgerVoucher _bankCurrencyRevalLedgerVoucher)
    {
        BankCurrencyRevalPostLedger postLedger = new BankCurrencyRevalPostLedger();
        postLedger.initialize(_bankCurrencyRevalTmpByDimension, _bankCurrencyRevalLedgerVoucher);

        return postLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(BankCurrencyRevalTmp _bankCurrencyRevalTmpByDimension, BankCurrencyRevalLedgerVoucher _bankCurrencyRevalLedgerVoucher)
    {
        bankCurrencyRevalTmpByDimension = _bankCurrencyRevalTmpByDimension;
        bankCurrencyRevalLedgerVoucher = _bankCurrencyRevalLedgerVoucher;

        countryRegion_EE = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoEE]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRevaluations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the foreign currency revaluation values to the general ledger.
    /// </summary>
    internal void postRevaluations()
    {
        // Create the accounting currency adjustment
        if (bankCurrencyRevalTmpByDimension.AccountingCurrencyAdjustmentAmount != 0)
        {
            this.postRevaluation(
                bankCurrencyRevalTmpByDimension.AccountingCurrencyAdjustmentAmount,
                bankCurrencyRevalTmpByDimension.BankCurrencyCode,
                true);
        }

        // Create the reporting currency adjustment
        if (bankCurrencyRevalTmpByDimension.ReportingCurrencyAdjustmentAmount != 0)
        {
            this.postRevaluation(
                bankCurrencyRevalTmpByDimension.ReportingCurrencyAdjustmentAmount,
                bankCurrencyRevalTmpByDimension.BankCurrencyCode,
                false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankLedgerDimensionAccount</Name>
				<Source><![CDATA[
    protected LedgerDimensionAccount getBankLedgerDimensionAccount(LedgerDimensionAccount _bankLedgerDimension, LedgerDimensionValueSet _defaultDimension)
    {
        return LedgerDimensionFacade::serviceCreateLedgerDimension(_bankLedgerDimension, _defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRevaluation</Name>
				<Source><![CDATA[
    private void postRevaluation(AmountMST _adjustmentAmount, CurrencyCode _gainLossCurrencyCode, boolean _isAccountingCurrencyAdjustment)
    {
        AmountMST accountingCurrencyAdjustment;
        AmountMSTSecondary reportingCurrencyAdjustment;

        if (_isAccountingCurrencyAdjustment)
        {
            accountingCurrencyAdjustment = _adjustmentAmount;
        }
        else
        {
            reportingCurrencyAdjustment = _adjustmentAmount;
        }

        LedgerVoucherObject ledgerVoucherObject = bankCurrencyRevalLedgerVoucher.getLedgerVoucherObject(bankCurrencyRevalTmpByDimension.TransDate);

        LedgerPostingType posting = this.getLedgerPostingType(_adjustmentAmount);

        LedgerDimensionAccount ledgerDimensionMerged = this.getBankLedgerDimensionAccount(bankCurrencyRevalTmpByDimension.BankLedgerDimension, bankCurrencyRevalTmpByDimension.DefaultDimension);

        // Post to the account being adjusted
        LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newAdjustmentDefault(
            ledgerVoucherObject,
            posting,
            ledgerDimensionMerged,
            bankCurrencyRevalTmpByDimension.BankCurrencyCode,
            accountingCurrencyAdjustment,
            reportingCurrencyAdjustment);

        bankCurrencyRevalLedgerVoucher.addLedgerVoucherTransObject(ledgerVoucherTransObject);

        ledgerDimensionMerged = this.getGainLossLedgerDimensionAccount(_adjustmentAmount, _gainLossCurrencyCode, bankCurrencyRevalTmpByDimension.BankAccountId);

        // Post to the gain/loss account
        ledgerVoucherTransObject = LedgerVoucherTransObject::newAdjustmentDefault(
            ledgerVoucherObject,
            posting,
            ledgerDimensionMerged,
            bankCurrencyRevalTmpByDimension.BankCurrencyCode,
            -accountingCurrencyAdjustment,
            -reportingCurrencyAdjustment);

        bankCurrencyRevalLedgerVoucher.addLedgerVoucherTransObject(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingType</Name>
				<Source><![CDATA[
    private LedgerPostingType getLedgerPostingType(AmountMST _adjustmentAmount)
    {
        return _adjustmentAmount > 0 ? LedgerPostingType::ExchRateGain : LedgerPostingType::ExchRateLoss;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyGainLossAccountType</Name>
				<Source><![CDATA[
    private CurrencyGainLossAccountType getCurrencyGainLossAccountType(AmountMST _adjustmentAmount)
    {
        CurrencyGainLossAccountType currencyAccountType;

        if (_adjustmentAmount > 0)
        {
            currencyAccountType = countryRegion_EE ? CurrencyGainLossAccountType::FinancialGain : CurrencyGainLossAccountType::UnrealizedGain;
        }
        else
        {
            currencyAccountType = countryRegion_EE ? CurrencyGainLossAccountType::FinancialLoss : CurrencyGainLossAccountType::UnrealizedLoss;
        }

        return currencyAccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGainLossAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger dimension used for posting the gain and loss account.
    /// </summary>
    /// <param name = "_gainLossCurrencyCode">The currency code for the exchange adjustment.</param>
    /// <param name = "_currencyAccountType">The account type.</param>
    /// <returns>The ledger dimension used for posting the gain and loss account.</returns>
    protected LedgerDimensionDefaultAccount getGainLossAccount(CurrencyCode _gainLossCurrencyCode, CurrencyGainLossAccountType _currencyAccountType)
    {
        LedgerDimensionDefaultAccount registerLedgerDimension = CurrencyLedgerGainLossAccount::ledgerDimension(
            Ledger::primaryLedger(CompanyInfo::current()),
            _gainLossCurrencyCode,
            _currencyAccountType);

        return registerLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGainLossLedgerDimensionAccount</Name>
				<Source><![CDATA[
    protected LedgerDimensionAccount getGainLossLedgerDimensionAccount(AmountMST _adjustmentAmount, CurrencyCode _gainLossCurrencyCode, CompanyBankAccountId _accountNum)
    {
        CurrencyGainLossAccountType currencyAccountType = this.getCurrencyGainLossAccountType(_adjustmentAmount);

        LedgerDimensionDefaultAccount gainLossLedgerDimension = LedgerExchAdjPosting::getLedgerDimensionFromParameters(
                LedgerExchAdjPostingSearchParameters::newFromParameters(
                    LedgerExchAdjPostingModule::Bank,
                    currencyAccountType,
                    _gainLossCurrencyCode,
                    _accountNum));

        if (gainLossLedgerDimension == 0)
        {
            gainLossLedgerDimension = this.getGainLossAccount(_gainLossCurrencyCode, currencyAccountType);
        }

        return LedgerDimensionFacade::serviceCreateLedgerDimension(gainLossLedgerDimension, bankCurrencyRevalTmpByDimension.DefaultDimension);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>