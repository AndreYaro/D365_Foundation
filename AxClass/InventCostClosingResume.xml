<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostClosingResume</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Resumes a calculation.
/// </summary>
class InventCostClosingResume extends RunBaseBatch implements BatchRetryable
{
    InventClosing   inventClosing;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        inventClosing
    #ENDMACRO

    private boolean isInventCostClosingResumeCreateCostListFlightEnabled = InventCostClosingResumeCreateCostListFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initBatchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BatchInfo</c> object with information to resume the calculation in batch or foreground.
    /// </summary>
    private void initBatchInfo()
    {
        if (inventClosing.HelpersCreated || (isInventCostClosingResumeCreateCostListFlightEnabled && this.inventCostListNotExists() && !inventClosing.HelpersCreated))
        {
            this.batchInfo().parmGroupId(InventParameters::find().CloseBatchGroupId);
            this.batchInfo().parmBatchExecute(NoYes::Yes);
        }
        else
        {
            this.batchInfo().parmBatchExecute(NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostTaskController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an <c>InventCostTaskController</c> object.
    /// </summary>
    /// <returns>
    /// An <c>InventCostTaskController</c> object.
    /// </returns>
    protected InventCostTaskController inventCostTaskController()
    {
        if (this.isInBatch())
        {
            return InventCostTaskController::newFromParameters( this.parmCurrentBatch().BatchJobId,
                                                                this.parmCurrentBatch().RecId,
                                                                inventClosing.Voucher,
                                                                inventClosing.TransDate,
                                                                inventClosing.RunNum);
        }

        return InventCostTaskControllerSingleThread::newController( inventClosing.Voucher,
                                                                    inventClosing.TransDate,
                                                                    inventClosing.RunNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventClosing</Name>
				<Source><![CDATA[
    public InventClosing parmInventClosing(InventClosing _inventClosing = inventClosing)
    {
        inventClosing = _inventClosing;

        return inventClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resumes a calculation.
    /// </summary>
    public void run()
    {
        boolean                     resumeClosing;
        Integer                     logPointBegin = infologLine();
        Integer                     logPointNow;
        
        if (isInventCostClosingResumeCreateCostListFlightEnabled)
        {
            inventClosing = InventClosing::find(inventClosing.Voucher, inventClosing.TransDate, false);
        }
        else
        {
            ttsbegin;
            inventClosing = InventClosing::find(inventClosing.Voucher, inventClosing.TransDate, true);
        }
        if (inventClosing.StopRunning == NoYes::Yes
            && this.validateBundlesAreNotStillProcessing()
            && this.validateClosingIsStillExecutingLedgerPostingPhase())
        {
            if (this.inventCostListNotExists() && isInventCostClosingResumeCreateCostListFlightEnabled)
            {
                InventCostClosing closing = new InventCostClosing();
                closing.parmInventClosing(inventClosing);

                if (inventClosing.CancelRecalculation)
                {
                    InventCostClosingCancel_Init inventCostClosingCancel_Init = InventCostClosingCancel_Init::newFromInventClosing(inventClosing);
                    inventCostClosingCancel_Init.runOperation();
                }

                ttsbegin;
                closing.runProdWIPCalculationFromResume_RU();

                closing.createInventCostListRecordSetFromResume();
                ttscommit;
            }

            this.updateClosingRecord();
            resumeClosing = true;
        }

        if (!isInventCostClosingResumeCreateCostListFlightEnabled)
        {
            ttscommit;
        }

        if (resumeClosing)
        {
            this.updateClosingRecord();
            CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(classStr(InventCostClosingResume));
            using (var resumeActivityContext = instrumentationLogger.inventoryClosingResumeActivities().run(inventClosing))
            {
                InventCostTaskController inventCostTaskController = this.inventCostTaskController();
                inventCostTaskController.resume();
            }
        }
        else
        {
            error("@SYS18447");
        }

        if (inventClosing)
        {
            logPointNow = infologLine();
            if (logPointBegin + 1 <= logPointNow)
            {
                inventClosing.writeLog(infolog.cut(logPointBegin + 1, logPointNow));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBundlesAreNotStillProcessing</Name>
				<Source><![CDATA[
    private boolean validateBundlesAreNotStillProcessing()
    {
        if (this.isInBatch())
        {
            InventCostBundleList inventCostBundleList;
            Batch batch;

            select firstonly RecId from inventCostBundleList
                where inventCostBundleList.InventClosing == inventClosing.RecId
                    && inventCostBundleList.ProcessingState == InventCostBundleState::Processing
                exists join batch
                    where batch.RecId == inventCostBundleList.Batch
                        && batch.Status == BatchStatus::Executing;

            if (inventCostBundleList)
            {
                error(strFmt("@SCM:ErrorMessage_InventoryClosingIsStillProcessingBundles", inventClosing.Voucher, inventClosing.TransDate));
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateClosingIsStillExecutingLedgerPostingPhase</Name>
				<Source><![CDATA[
    private boolean validateClosingIsStillExecutingLedgerPostingPhase()
    {
        if (this.isInBatch()
            && inventClosing.InventCostStatus == InventCostStatus::Ledgerposting)
        {
            Batch batch = Batch::findRecId(inventClosing.LedgerPostingBatch);

            if (batch.Status == BatchStatus::Executing)
            {
                error(strFmt("@SCM:ErrorMessage_InventoryClosingIsStillExecutingLedgerPostingPhase", inventClosing.Voucher, inventClosing.TransDate));
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostListNotExists</Name>
				<Source><![CDATA[
    private boolean inventCostListNotExists()
    {
        InventCostList inventCostList;

        select firstonly RecId from inventCostList
            where inventCostList.Voucher == inventClosing.Voucher;

        return inventCostList.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version      = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClosingRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>InventClosing</c> record with information that the calculations has been resumed.
    /// </summary>
    protected void updateClosingRecord()
    {
        ttsbegin;
        inventClosing = InventClosing::find(inventClosing.Voucher, inventClosing.TransDate, true);
        inventClosing.setStopRunning(NoYes::No);
        inventClosing.update();
        inventClosing.clearLog();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return this.batchInfo().parmBatchExecute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventCostClosingResume construct()
    {
        return new InventCostClosingResume();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    public static ClassDescription description()
    {
        return "@SYS78022";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        if (!InventCostClosing::checkAnotherInventClosingJobRunning())
        {
            throw error("@SYS78037");
        }

        if (args.dataset() == tableNum(InventClosing))
        {
            InventCostClosingResume inventCostClosingResume = InventCostClosingResume::construct();
            inventCostClosingResume.parmInventClosing(args.record());

            inventCostClosingResume.initBatchInfo();

            if (inventCostClosingResume.mustGoBatch())
            {
                inventCostClosingResume.doBatch();
            }
            else
            {
                inventCostClosingResume.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>