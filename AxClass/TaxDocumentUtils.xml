<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxDocumentUtils</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This util deals with any operation with tax document.
/// </summary>
class TaxDocumentUtils
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxDocumentBySource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get tax document by source information.
    /// </summary>
    /// <param name = "_sourceTableId">The taxable document source table ID.</param>
    /// <param name = "_sourceRecId">The taxable document source record ID.</param>
    /// <returns>The tax document.</returns>
    public static TaxDocument getTaxDocumentBySource(TableId _sourceTableId, RecId _sourceRecId)
    {
        return TaxDocument::findByGUID(TaxDocumentUtils::getTaxDocumentGUIDBySource(_sourceTableId, _sourceRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDocumentGUIDBySource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get GUID of tax document by source information.
    /// </summary>
    /// <param name = "_sourceTableId">The taxable document source table ID.</param>
    /// <param name = "_sourceRecId">The taxable document source record ID.</param>
    /// <returns>The GUID of tax document.</returns>
    public static guid getTaxDocumentGUIDBySource(TableId _sourceTableId, RecId _sourceRecId)
    {
        TaxDocumentTransitDocument  taxDocumentTransit;
        taxDocumentTransit = TaxDocumentTransitUtil::findTransitDocForDocumentByTransaction(_sourceTableId, _sourceRecId);

        return taxDocumentTransit.TaxDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxTotalReverseCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate tax total reverse charge.
    /// </summary>
    /// <param name = "_taxDocument">The tax document object</param>
    /// <returns>The total reverse charge amount in transaction currency.</returns>
    public static TaxAmountCur calculateTaxTotalReverseCharge(ITaxDocument _taxDocument)
    {
        TaxAmountCur taxTotalReverseCharge;
        if (_taxDocument)
        {
            ITaxDocumentComponentLineEnumerator componentLineEnumerator = _taxDocument.componentLines();
            while (componentLineEnumerator.moveNext())
            {
                ITaxDocumentComponentLine componentLine = componentLineEnumerator.current();
                ITaxDocumentMeasure measureObject = componentLine.getMeasure(TaxEngineModelLineMeasuresConstants::TaxReverseChargeAmount);
                if (measureObject && measureObject.value())
                {
                    taxTotalReverseCharge += measureObject.value().amountTransactionCurrency();
                }
            }
        }
        return taxTotalReverseCharge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTaxDocumentForJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the source for the jouranl has taxable document.
    /// </summary>
    /// <param name = "_tableId">The journal table id.</param>
    /// <param name = "_recId">The journal record id.</param>
    /// <returns>True if the source for the journal has taxable document; otherwise false.</returns>
    public static boolean existTaxDocumentForJournal(TableId _tableId, RecId _recId)
    {
        boolean res = false;

        switch(_tableId)
        {
            case tableNum(CustInvoiceTrans):
                CustInvoiceTrans custInvoiceTrans = CustInvoiceTrans::findRecId(_recId);
                res = TaxDocumentUtils::getTaxDocumentBySource(tableNum(CustInvoiceJour), custInvoiceTrans.custInvoiceJour().RecID).RecId != 0;
                break;

            case tableNum(CustInvoiceJour):
                res = TaxDocumentUtils::getTaxDocumentBySource(tableNum(CustInvoiceJour), _recId).RecId != 0;
                break;

            case tableNum(VendInvoiceTrans):
                VendInvoiceTrans vendInvoiceTransLocal = VendInvoiceTrans::findRecId(_recId);
                res = TaxDocumentUtils::getTaxDocumentBySource(tableNum(VendInvoiceJour), vendInvoiceTransLocal.vendInvoiceJour().RecId).RecId != 0;
                break;

            case tableNum(VendInvoiceJour):
                res = TaxDocumentUtils::getTaxDocumentBySource(tableNum(VendInvoiceJour), _recId).RecId != 0;
                break;

            case tableNum(ProjInvoiceJour):
                ProjInvoiceJour projInvoiceJourLocal = ProjInvoiceJour::findRecId(_recId);
                ProjProposalJour projProposalJour = ProjProposalJour::find(projInvoiceJourLocal.ProposalId);

                TaxEngineProjItemSOTransHeader taxEngineProjItem = TaxEngineProjItemSOTransHeader::findByProjProposalJour(projProposalJour);
                res = TaxDocumentUtils::getTaxDocumentBySource(tableNum(TaxEngineProjItemSOTransHeader), taxEngineProjItem.RecId).RecId != 0;
                break;
        }

        return res;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>