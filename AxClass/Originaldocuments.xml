<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Originaldocuments</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>Originaldocuments</c> class supports the Original Document feature.
/// </summary>
final class Originaldocuments implements SysPackable
{
    // packed
    Common commonArg;
    Integer numTrans;

    // not packed
    TmpLedgerBase tmpLedgerBase;

    // <GEERU>
    #isoCountryRegionCodes
    #EECountryRegionCodes
    // </GEERU>

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        // commonArg is packed separately
        numTrans
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custTrans_Caller_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>CustTrans</c> record argument.
    /// </summary>
    /// <param name="_custTrans">
    /// The <c>CustTrans</c> record
    /// </param>
    /// <returns>
    /// The <c>CustTrans</c> record argument.
    /// </returns>
    public CustTrans custTrans_Caller_RU(CustTrans _custTrans = commonArg)
    {
        commonArg = _custTrans;
        return commonArg as CustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllRelations</Name>
				<Source><![CDATA[
    private void findAllRelations()
    {
        this.findFromGeneralJournal();
        this.findFromCustTrans();
        this.findFromVendTrans();
        this.findFromBankAccountTrans();

        // <GEERU>
        if (FeatureStateProvider::isFeatureEnabled(PettyCashFeature::instance()) || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.findFromRCashTrans();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the <c>CustTrans</c> table.
    /// </summary>
    void findFromCustTrans()
    {
        CustTable custTable;
        CustTrans custTrans_Caller;
        CustInvoiceJour custInvoiceJour;
        SalesTable salesTable;
        BankChequeTable bankChequeTable;
        ProjInvoiceJour projInvoiceJour;
        CustBillOfExchangeJour custBillOfExchangeJour;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        RetailTransactionTable retailTransactionTable;
        CustName custName;
        // <GEERU>
        FactureJour_RU factureJour; //Processing invoices from prepayments
        GoodsInRouteJour_RU goodsInRouteJour;
        // </GEERU>

        if (commonArg.TableId == tableNum(CustTrans))
        {
            custTrans_Caller = commonArg as CustTrans;
        }

        if (custTrans_Caller == null)
        {
            return;
        }

        custTable = CustTable::find(custTrans_Caller.AccountNum);
        custName = custTable.name();

        this.insertCustomerTransactionDocument(custTrans_Caller, custName);

        // <GEERU>
        if (custTrans_Caller.Invoice == ''
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            while select InvoiceAccount, InvoiceAmount, InvoiceId, RecId from custInvoiceJour
                where custInvoiceJour.InvoiceAccount == custTrans_Caller.AccountNum
                    && custInvoiceJour.InvoiceDate == custTrans_Caller.TransDate
                    && custInvoiceJour.LedgerVoucher == custTrans_Caller.Voucher
            outer join CustAccount, SalesId, RecId from salesTable
                where salesTable.SalesId == custInvoiceJour.SalesId
            {
                // Sales order invoice
                this.insertDocument(OriginalDocument::SalesInvoice,
                    custInvoiceJour.TableId,
                    custInvoiceJour.RecId,
                    SysModule::Cust,
                    custInvoiceJour.InvoiceAmount,
                    custInvoiceJour.InvoiceId,
                    custInvoiceJour.InvoiceAccount,
                    custName);

                if (salesTable != null)
                {
                    this.insertDocument(OriginalDocument::Sales,
                        salesTable.TableId,
                        salesTable.RecId,
                        SysModule::Sales,
                        0,
                        salesTable.SalesId,
                        salesTable.CustAccount,
                        custName);
                }
            }
        }

        while select RecId from goodsInRouteJour
            where goodsInRouteJour.Voucher == custTrans_Caller.Voucher
        join InvoiceAccount, InvoiceAmount, InvoiceId, RecId from custInvoiceJour
            where custInvoiceJour.RecId == goodsInRouteJour.InvoiceRecId
                && custInvoiceJour.InvoiceAccount == custTrans_Caller.AccountNum
        outer join CustAccount, SalesId, RecId from salesTable
            where salesTable.SalesId == custInvoiceJour.SalesId
        {
            // Sales order invoice
            this.insertDocument(OriginalDocument::SalesInvoice,
                custInvoiceJour.TableId,
                custInvoiceJour.RecId,
                SysModule::Cust,
                custInvoiceJour.InvoiceAmount,
                custInvoiceJour.InvoiceId,
                custInvoiceJour.InvoiceAccount,
                custName);

            if (salesTable != null)
            {
                this.insertDocument(OriginalDocument::Sales,
                    salesTable.TableId,
                    salesTable.RecId,
                    SysModule::Sales,
                    0,
                    salesTable.SalesId,
                    salesTable.CustAccount,
                    custName);
            }
        }
        // </GEERU>

        while select InvoiceAccount, ProjInvoiceId, InvoiceAmount, RecId from projInvoiceJour
            where projInvoiceJour.InvoiceAccount == custTrans_Caller.AccountNum
                && projInvoiceJour.InvoiceDate == custTrans_Caller.TransDate
                && projInvoiceJour.ProjInvoiceId == custTrans_Caller.Invoice
                && projInvoiceJour.LedgerVoucher == custTrans_Caller.Voucher
        {
            this.insertDocument(OriginalDocument::ProjectInvoice,
                projInvoiceJour.TableId,
                projInvoiceJour.RecId,
                SysModule::Project,
                projInvoiceJour.InvoiceAmount,
                projInvoiceJour.ProjInvoiceId,
                projInvoiceJour.InvoiceAccount,
                custName);
        }

        this.insertDocumentByTransactionType(custTrans_Caller, custName);

        if (custTrans_Caller.CompanyBankAccountId != '' && custTrans_Caller.PaymReference != '')
        {
            while select RecId from bankChequeTable
                where bankChequeTable.AccountID == custTrans_Caller.CompanyBankAccountId
                    && bankChequeTable.ChequeNum == custTrans_Caller.PaymReference
            {
                this.insertDocument(OriginalDocument::Cheque,
                    bankChequeTable.TableId,
                    bankChequeTable.RecId,
                    SysModule::Bank,
                    custTrans_Caller.AmountMST,
                    custTrans_Caller.PaymReference,
                    custTrans_Caller.CompanyBankAccountId,
                    custTrans_Caller.Voucher);
            }
        }

        if (custTrans_Caller.BillOfExchangeID != '')
        {
            while select CustAccount, RecId from custBillOfExchangeJour
                where custBillOfExchangeJour.BillOfExchangeId == custTrans_Caller.BillOfExchangeID
            {
                this.insertDocument(OriginalDocument::CustBillOfExchange,
                    custBillOfExchangeJour.TableId,
                    custBillOfExchangeJour.RecId,
                    SysModule::Cust,
                    custTrans_Caller.AmountMST,
                    custTrans_Caller.BillOfExchangeID,
                    custBillOfExchangeJour.CustAccount,
                    custTrans_Caller.Voucher);
            }
        }

        select firstonly RecId from ledgerJournalTable
            exists join ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                    && ledgerJournalTrans.Voucher == custTrans_Caller.Voucher
                    && ledgerJournalTrans.TransDate == custTrans_Caller.TransDate;

        if (ledgerJournalTable != null)
        {
            this.insertDocument(
                this.getOriginalDocumentFromLedgerTransType(custTrans_Caller.TransType),
                ledgerJournalTable.TableId,
                ledgerJournalTable.RecId,
                SysModule::Ledger,
                custTrans_Caller.AmountMST,
                custTrans_Caller.Voucher,
                custTrans_Caller.Txt,
                '');
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
            && RetailParameters::isRetailInUse() // if retail functionality is used within the current LE
            )
        {
            select firstonly CustAccount, TransactionId, RecId from retailTransactionTable
                where retailTransactionTable.Store == custTrans_Caller.RetailStoreId
                    && retailTransactionTable.Terminal == custTrans_Caller.RetailTerminalId
                    && retailTransactionTable.TransactionId == custTrans_Caller.RetailTransactionId;

            if (retailTransactionTable)
            {
                this.insertDocument(OriginalDocument::RetailSale,
                    retailTransactionTable.TableId,
                    retailTransactionTable.RecId,
                    SysModule::Retail,
                    0,
                    retailTransactionTable.TransactionId,
                    retailTransactionTable.CustAccount,
                    custName);
            }
        }

        // <GEERU>
        // Invoice on pre-payment -->
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (custTrans_Caller.Invoice)
            {
                while select RecId, FactureAmount, FactureId, CustVendInvoiceAccount from factureJour
                    where factureJour.FactureId == custTrans_Caller.Invoice
                        && factureJour.Module == FactureModule_RU::Cust
                {
                    this.insertDocument(OriginalDocument::PrepaymentInvoice_RU,
                        factureJour.TableId,
                        factureJour.RecId,
                        SysModule::Cust,
                        factureJour.FactureAmount,
                        factureJour.FactureId,
                        factureJour.CustVendInvoiceAccount,
                        custName);
                }
            }
        }
        // Invoice on pre-payment <--
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromGeneralJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the general journal.
    /// </summary>
    void findFromGeneralJournal()
    {
        CustTable custTable;
        VendTable vendTable;
        SalesTable salesTable;
        VendInvoicePurchLink vendInvoicePurchLink;
        PurchTable purchTable;
        CustInvoiceJour custInvoiceJour;
        VendInvoiceJour vendInvoiceJour;
        CustTrans custTrans;
        VendTrans vendTrans;
        BankChequeTable bankChequeTable;
        BankDeposit bankDeposit;
        BankAccountTable bankAccountTable;
        CustPackingSlipJour custPackingSlipJour;
        CustPackingSlipTrans custPackingSlipTrans;
        VendPackingSlipJour vendPackingSlipJour;
        VendPackingSlipVersion vendPackingSlipVersion;
        VendPackingSlipTrans vendPackingSlipTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        TaxReportVoucher taxReportVoucher;
        ProjTransPosting projTransPosting;
        ProjEmplTrans projEmplTrans;
        ProjEmplTransCost projEmplTransCost;
        ProjCostTransCost projCostTransCost;
        ProjRevenueTrans projRevenueTrans;
        ProjRevenueTransSale projRevenueTransSale;
        ProjJournalTrans projJournalTransEmpl;
        ProjJournalTable projJournalTable;
        ProjInvoiceJour projInvoiceJour;
        TrvExpTrans trvExpTrans;
        AccountingDistribution accountingDistribution;
        SubledgerJournalAccountEntryDistribution subledgerJournalAccountEntryDistribution;
        VendPurchOrderJour vendPurchOrderJour;
        PurchTableAllVersions purchTableAllVersions;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry_Caller;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        LedgerEntry ledgerEntry;
        LedgerEntryJournal ledgerEntryJournal;
        GeneralJournalEntry generalJournalEntry;
        AccountingEvent accountingEvent;
        SubledgerJournalEntry subledgerJournalEntry;
        SubledgerJournalAccountEntry subledgerJournalAccountEntry;
        TSTimesheetTrans tsTimesheetTrans;
        VendInvoiceTrans vendInvoiceTrans;
        CustInvoiceTrans custInvoiceTrans;
        AdvancedLedgerEntryHeader advancedLedgerEntryHeader;
        AdvancedLedgerEntryLine advancedLedgerEntryLine;
        CustName custName;
        CustName invoiceCustName;
        VendName vendName;
        InventClosing inventClosing;

        // <GEERU>
        GoodsInRouteJour_RU goodsInRouteJour;
        CustInvoiceJour_RU custInvoiceJourRU;
        CustomJournalTable_RU customJournalTable;
        CustomCorrectionTable_RU customCorrectionTable;
        boolean isRU;
        // </GEERU>

        if (commonArg.TableId == tableNum(GeneralJournalAccountEntry))
        {
            generalJournalAccountEntry_Caller = commonArg as GeneralJournalAccountEntry;
        }

        if (generalJournalAccountEntry_Caller == null)
        {
            return;
        }

        // <GEERU>
        isRU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        [generalJournalAccountEntry, ledgerEntryJournal, generalJournalEntry, ledgerEntry] =
            GeneralLedgerExtension::findRelated(generalJournalAccountEntry_Caller.RecId);

        while select Voucher, VoucherDataAreaId, AccountingDate from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
        {
            while select AccountNum, TransDate, Invoice, TransType, Voucher, RetailStoreId, LastSettleVoucher from custTrans
                where custTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                    && custTrans.TransDate == subledgerVoucherGeneralJournalEntry.AccountingDate
            outer join * from custTable
                where custTable.AccountNum == custTrans.AccountNum
            {
                custName = custTable.name();

                this.insertCustomerTransactionDocument(custTrans, custName);

                while select InvoiceAccount, InvoiceId, InvoiceAmount, SalesId, RecId from custInvoiceJour
                    where custInvoiceJour.InvoiceAccount == custTrans.AccountNum
                        && custInvoiceJour.InvoiceDate == custTrans.TransDate
                        && custInvoiceJour.InvoiceId == custTrans.Invoice
                outer join CustAccount, SalesId, RecId from salesTable
                    where salesTable.SalesId == custInvoiceJour.SalesId
                {
                    if (custInvoiceJour.SalesId
                        || (isConfigurationkeyEnabled(configurationKeyNum(Retail))
                            && custTrans.RetailStoreId)
                    )
                    {
                        // Sales order invoice
                        this.insertDocument(OriginalDocument::SalesInvoice,
                            custInvoiceJour.TableId,
                            custInvoiceJour.RecId,
                            SysModule::Cust,
                            custInvoiceJour.InvoiceAmount,
                            custInvoiceJour.InvoiceId,
                            custInvoiceJour.InvoiceAccount,
                            custName);

                        if (salesTable != null)
                        {
                            select sum(LineAmountMST) from custInvoiceTrans
                                where custInvoiceTrans.SalesId == custInvoiceJour.SalesId;

                            this.insertDocument(OriginalDocument::Sales,
                                salesTable.TableId,
                                salesTable.RecId,
                                SysModule::Sales,
                                custInvoiceTrans.LineAmountMST,
                                salesTable.SalesId,
                                salesTable.CustAccount,
                                custName);
                        }
                    }
                    else
                    {
                        // Free text invoice
                        this.insertDocument(OriginalDocument::FreeTextInvoice,
                            custInvoiceJour.TableId,
                            custInvoiceJour.RecId,
                            SysModule::Cust,
                            custInvoiceJour.InvoiceAmount,
                            custInvoiceJour.InvoiceId,
                            custInvoiceJour.InvoiceAccount,
                            custName);
                    }
                }

                // <GEERU>
                if (isRU)
                {
                    while select RecId from goodsInRouteJour
                        where goodsInRouteJour.Voucher == custTrans.Voucher
                    join InvoiceAccount, InvoiceAmount, InvoiceId, RecId from custInvoiceJour
                        where custInvoiceJour.RecId == goodsInRouteJour.InvoiceRecId
                            && custInvoiceJour.InvoiceAccount == custTrans.AccountNum
                    outer join CustAccount, SalesId, RecId from salesTable
                        where salesTable.SalesId == custInvoiceJour.SalesId
                    {
                        // Sales order invoice
                        this.insertDocument(OriginalDocument::SalesInvoice,
                            custInvoiceJour.TableId,
                            custInvoiceJour.RecId,
                            SysModule::Cust,
                            custInvoiceJour.InvoiceAmount,
                            custInvoiceJour.InvoiceId,
                            custInvoiceJour.InvoiceAccount,
                            custName);

                        if (salesTable != null)
                        {
                            this.insertDocument(OriginalDocument::Sales,
                                salesTable.TableId,
                                salesTable.RecId,
                                SysModule::Sales,
                                0,
                                salesTable.SalesId,
                                salesTable.CustAccount,
                                custName);
                        }
                    }
                }
                // </GEERU>

                this.insertDocumentByTransactionType(custTrans, custName);

                while select InvoiceAccount, ProjInvoiceId, InvoiceAmount, RecId from projInvoiceJour
                    where projInvoiceJour.InvoiceAccount == custTrans.AccountNum
                        && projInvoiceJour.InvoiceDate == custTrans.TransDate
                        && projInvoiceJour.ProjInvoiceId == custTrans.Invoice
                {
                    this.insertDocument(OriginalDocument::ProjectInvoice,
                        projInvoiceJour.TableId,
                        projInvoiceJour.RecId,
                        SysModule::Project,
                        projInvoiceJour.InvoiceAmount,
                        projInvoiceJour.ProjInvoiceId,
                        projInvoiceJour.InvoiceAccount,
                        custName);
                }
            }

            // <GEERU>
            if (isRU)
            {
                while select * from custInvoiceJour
                    where custInvoiceJour.LedgerVoucher == subledgerVoucherGeneralJournalEntry.Voucher
                        && custInvoiceJour.InvoiceDate == subledgerVoucherGeneralJournalEntry.AccountingDate
                outer join CustAccount, SalesId, RecId from salesTable
                    where salesTable.SalesId == custInvoiceJour.SalesId
                exists join custInvoiceJourRU
                    where custInvoiceJourRU.CustInvoiceJour == custInvoiceJour.RecId
                        && (custInvoiceJourRU.InvoicePostingType_RU == SalesInvoicePostingType_RU::GoodsInRoute
                            || custInvoiceJourRU.InventProfileType_RU == InventProfileType_RU::CommissionPrincipalAgent
                            || custInvoiceJourRU.InventProfileType_RU == InventProfileType_RU::Bailee)
                {
                    invoiceCustName = custInvoiceJour.custTable_InvoiceAccount().name();

                    // Sales order invoice
                    this.insertDocument(OriginalDocument::SalesInvoice,
                        custInvoiceJour.TableId,
                        custInvoiceJour.RecId,
                        SysModule::Cust,
                        custInvoiceJour.InvoiceAmount,
                        custInvoiceJour.InvoiceId,
                        custInvoiceJour.InvoiceAccount,
                        invoiceCustName);

                    if (salesTable != null)
                    {
                        this.insertDocument(OriginalDocument::Sales,
                            salesTable.TableId,
                            salesTable.RecId,
                            SysModule::Sales,
                            0,
                            salesTable.SalesId,
                            salesTable.CustAccount,
                            invoiceCustName);
                    }
                }
            }
            // </GEERU>

            while select SalesId, InvoiceAccount, PackingSlipId, RecId from custPackingSlipJour
                where custPackingSlipJour.LedgerVoucher == subledgerVoucherGeneralJournalEntry.Voucher
                    && custPackingSlipJour.DeliveryDate == subledgerVoucherGeneralJournalEntry.AccountingDate
            join ValueMST from custPackingSlipTrans
                where custPackingSlipTrans.SalesId == custPackingSlipJour.SalesId
                    && custPackingSlipTrans.PackingSlipId == custPackingSlipJour.PackingSlipId
                    && custPackingSlipTrans.DeliveryDate == custPackingSlipJour.DeliveryDate
            {
                this.insertDocument(OriginalDocument::SalesPackingSlip,
                    custPackingSlipJour.TableId,
                    custPackingSlipJour.RecId,
                    SysModule::Cust,
                    custPackingSlipTrans.ValueMST,
                    custPackingSlipJour.PackingSlipId,
                    custPackingSlipJour.InvoiceAccount,
                    custPackingSlipJour.SalesId);
            }

            while select vendTrans
                where vendTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                    && vendTrans.TransDate == subledgerVoucherGeneralJournalEntry.AccountingDate
            outer join vendTable
                where vendTable.AccountNum == vendTrans.AccountNum
            {
                vendName = vendTable.name();

                this.insertVendorTransactionDocument(vendTrans, vendName);

                // <GEERU>
                if (isRU)
                {
                    while select RecId, CustomJournalId from customJournalTable
                        where customJournalTable.LedgerVoucher == vendTrans.Voucher
                            && (customJournalTable.VendAccountCustom == vendTable.AccountNum
                                || customJournalTable.VendAccountBroker == vendTable.AccountNum)
                            && customJournalTable.PlanArrivalDate == vendTrans.TransDate
                    {
                        this.insertDocument(OriginalDocument::CustomJournal_RU,
                            customJournalTable.TableId,
                            customJournalTable.RecId,
                            SysModule::Vend,
                            vendTrans.AmountMST,
                            customJournalTable.CustomJournalId,
                            vendTrans.AccountNum,
                            vendName);
                    }

                    while select RecId, CorrectionJournalId from customCorrectionTable
                        where customCorrectionTable.LedgerVoucher == vendTrans.Voucher
                            && customCorrectionTable.CorrectionDate == vendTrans.TransDate
                    exists join customJournalTable
                        where  customJournalTable.CustomJournalId == customCorrectionTable.JournalId
                            && (customJournalTable.VendAccountCustom == vendTable.AccountNum
                                || customJournalTable.VendAccountBroker == vendTable.AccountNum)
                    {
                        this.insertDocument(OriginalDocument::CustomCorrection_RU,
                            customCorrectionTable.TableId,
                            customCorrectionTable.RecId,
                            SysModule::Vend,
                            vendTrans.AmountMST,
                            customCorrectionTable.CorrectionJournalId,
                            vendTrans.AccountNum,
                            vendName);
                    }
                }
                //</GEERU>
            }

            while select * from vendInvoiceJour
                where vendInvoiceJour.CostLedgerVoucher == subledgerVoucherGeneralJournalEntry.Voucher
                   && vendInvoiceJour.InvoiceDate == subledgerVoucherGeneralJournalEntry.AccountingDate
            outer join RecId from vendInvoicePurchLink
                where vendInvoiceJour.InternalInvoiceId == vendInvoicePurchLink.internalInvoiceId
                   && vendInvoiceJour.PurchId == vendInvoicePurchLink.PurchId
                   && vendInvoiceJour.InvoiceId == vendInvoicePurchLink.InvoiceId 
                   && vendInvoiceJour.InvoiceDate == vendInvoicePurchLink.InvoiceDate
            outer join InvoiceAccount, PurchId, RecId from purchTable
                where purchTable.PurchId == vendInvoicePurchLink.origPurchId
            {
                this.insertDocument(OriginalDocument::PurchaseInvoice,
                    vendInvoiceJour.TableId,
                    vendInvoiceJour.RecId,
                    SysModule::Vend,
                    vendInvoiceJour.InvoiceAmount,
                    vendInvoiceJour.InvoiceId,
                    vendInvoiceJour.InvoiceAccount,
                    vendInvoiceJour.PurchId);

                if (purchTable != null)
                {
                    select sum(LineAmountMST) from vendInvoiceTrans
                        where (vendInvoiceTrans.OrigPurchId == purchTable.PurchId
                            && vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                            && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                            && vendInvoiceTrans.numberSequenceGroup == vendInvoiceJour.numberSequenceGroup
                            && vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId);

                    this.insertDocument(OriginalDocument::Purchase,
                        purchTable.TableId,
                        purchTable.RecId,
                        SysModule::Purch,
                        vendInvoiceTrans.LineAmountMST,
                        purchTable.PurchId,
                        purchTable.InvoiceAccount,
                        vendInvoiceJour.vendTable_InvoiceAccount().name());
                }
            }

            MarkupTrans markupTrans;
            while select markupTrans
                where markupTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                    && markupTrans.TransDate == subledgerVoucherGeneralJournalEntry.AccountingDate
                    && markupTrans.TransTableId == tableNum(VendInvoiceTrans)
            join vendInvoiceTrans
                where vendInvoiceTrans.RecId == markupTrans.TransRecId
            join vendInvoiceJour
                where vendInvoiceJour.PurchId == vendInvoiceTrans.PurchID
                    && vendInvoiceJour.InvoiceDate == vendInvoiceTrans.InvoiceDate
                    && vendInvoiceJour.InvoiceId == vendInvoiceTrans.InvoiceId
                    && vendInvoiceJour.numberSequenceGroup == vendInvoiceTrans.numberSequenceGroup
                    && vendInvoiceJour.InternalInvoiceId == vendInvoiceTrans.InternalInvoiceId
                    && vendInvoiceJour.LedgerVoucher != subledgerVoucherGeneralJournalEntry.Voucher
            outer join InvoiceAccount, PurchId, RecId from purchTable
                where purchTable.PurchId == vendInvoiceTrans.origPurchId
            {
                this.insertDocument(OriginalDocument::PurchaseInvoice,
                    vendInvoiceJour.TableId,
                    vendInvoiceJour.RecId,
                    SysModule::Vend,
                    vendInvoiceJour.InvoiceAmount,
                    vendInvoiceJour.InvoiceId,
                    vendInvoiceJour.InvoiceAccount,
                    vendInvoiceJour.PurchId);

                if (purchTable != null)
                {
                    select sum(LineAmountMST) from vendInvoiceTrans
                        where (vendInvoiceTrans.OrigPurchId == purchTable.PurchId
                            && vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                            && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                            && vendInvoiceTrans.numberSequenceGroup == vendInvoiceJour.numberSequenceGroup
                            && vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId);

                    this.insertDocument(OriginalDocument::Purchase,
                        purchTable.TableId,
                        purchTable.RecId,
                        SysModule::Purch,
                        vendInvoiceTrans.LineAmountMST,
                        purchTable.PurchId,
                        purchTable.InvoiceAccount,
                        vendInvoiceJour.vendTable_InvoiceAccount().name());
                }
            }

            // <GEERU>
            if (isRU)
            {
                while select * from vendInvoiceJour
                    where (vendInvoiceJour.InventProfileType_RU == InventProfileType_RU::CommissionPrincipalAgent
                       || vendInvoiceJour.InventProfileType_RU == InventProfileType_RU::Bailee 
                       || vendInvoiceJour.InventProfileType_RU == InventProfileType_RU::CommissionAgent) 
                       && vendInvoiceJour.LedgerVoucher == subledgerVoucherGeneralJournalEntry.Voucher
                       && vendInvoiceJour.InvoiceDate == subledgerVoucherGeneralJournalEntry.AccountingDate
                outer join RecId from vendInvoicePurchLink
                    where vendInvoiceJour.InternalInvoiceId == vendInvoicePurchLink.internalInvoiceId
                       && vendInvoiceJour.PurchId == vendInvoicePurchLink.PurchId
                       && vendInvoiceJour.InvoiceId == vendInvoicePurchLink.InvoiceId
                       && vendInvoiceJour.InvoiceDate == vendInvoicePurchLink.InvoiceDate
                outer join InvoiceAccount, PurchId, RecId from purchTable
                    where purchTable.PurchId == vendInvoicePurchLink.origPurchId
                {
                    this.insertDocument(OriginalDocument::PurchaseInvoice,
                        vendInvoiceJour.TableId,
                        vendInvoiceJour.RecId,
                        SysModule::Vend,
                        vendInvoiceJour.InvoiceAmount,
                        vendInvoiceJour.InvoiceId,
                        vendInvoiceJour.InvoiceAccount,
                        vendInvoiceJour.vendTable_InvoiceAccount().name());

                    if (purchTable != null)
                    {
                        this.insertDocument(OriginalDocument::Purchase,
                            purchTable.TableId,
                            purchTable.RecId,
                            SysModule::Purch,
                            0,
                            purchTable.PurchId,
                            purchTable.InvoiceAccount,
                            vendInvoiceJour.vendTable_InvoiceAccount().name());
                    }
                }
            }
            // </GEERU>

            while select RecId from vendPackingSlipVersion
                where vendPackingSlipVersion.CostLedgerVoucher == subledgerVoucherGeneralJournalEntry.Voucher
                    || vendPackingSlipVersion.LedgerVoucher == subledgerVoucherGeneralJournalEntry.Voucher
            join PurchId, InvoiceAccount, PackingSlipId from vendPackingSlipJour
                where vendPackingSlipVersion.VendPackingSlipJour == vendPackingSlipJour.RecId
                    && vendPackingSlipVersion.AccountingDate == subledgerVoucherGeneralJournalEntry.AccountingDate
            join RecId, ValueMST from vendPackingSlipTrans
                where vendPackingSlipTrans.VendPackingSlipJour == vendPackingSlipJour.RecId
            outer join InvoiceAccount, PurchId, RecId from purchTable
                where purchTable.PurchId == vendPackingSlipTrans.OrigPurchid
            {
                this.insertDocument(OriginalDocument::PurchasePackingSlip,
                    vendPackingSlipVersion.TableId,
                    vendPackingSlipVersion.RecId,
                    SysModule::Vend,
                    vendPackingSlipTrans.ValueMST,
                    vendPackingSlipJour.PackingSlipId,
                    vendPackingSlipJour.InvoiceAccount,
                    vendPackingSlipJour.PurchId,
                    vendPackingSlipTrans.RecId);

                if (purchTable != null)
                {
                    select sum(LineAmountMST) from vendInvoiceTrans
                        where vendInvoiceTrans.PurchID == vendPackingSlipJour.PurchId;

                    this.insertDocument(OriginalDocument::Purchase,
                        purchTable.TableId,
                        purchTable.RecId,
                        SysModule::Purch,
                        vendInvoiceTrans.LineAmountMST,
                        purchTable.PurchId,
                        purchTable.InvoiceAccount,
                        vendPackingSlipJour.PurchId);
                }
            }

            if (ledgerEntry.ThirdPartyBankAccount != '' && generalJournalAccountEntry.PaymentReference != '')
            {
                while select RecId from bankChequeTable
                    where bankChequeTable.AccountID == ledgerEntry.ThirdPartyBankAccount &&
                        bankChequeTable.ChequeNum == generalJournalAccountEntry.PaymentReference
                {
                    this.insertDocument(OriginalDocument::Cheque,
                        bankChequeTable.TableId,
                        bankChequeTable.RecId,
                        SysModule::Bank,
                        generalJournalAccountEntry.AccountingCurrencyAmount,
                        generalJournalAccountEntry.PaymentReference,
                        ledgerEntry.ThirdPartyBankAccount,
                        subledgerVoucherGeneralJournalEntry.Voucher);
                }
            }

            select firstonly AccountId, DepositNum, RecId from bankDeposit
                where bankDeposit.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                    && bankDeposit.TransDate == subledgerVoucherGeneralJournalEntry.AccountingDate
            outer join Name from bankAccountTable
                where bankAccountTable.AccountID == bankDeposit.AccountId;

            if (bankDeposit != null)
            {
                this.insertDocument(OriginalDocument::BankDeposit,
                    bankDeposit.TableId,
                    bankDeposit.RecId,
                    SysModule::Bank,
                    generalJournalAccountEntry_Caller.AccountingCurrencyAmount,
                    bankDeposit.DepositNum,
                    bankDeposit.AccountId,
                    bankAccountTable.Name);
            }

            if (ledgerEntryJournal.JournalNumber)
            {
                select firstonly RecId, JournalNum, TransactionType from ledgerJournalTrans
                    where ledgerJournalTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                        && ledgerJournalTrans.TransDate == subledgerVoucherGeneralJournalEntry.AccountingDate
                        && ledgerJournalTrans.JournalNum == ledgerEntryJournal.JournalNumber;
            }
            else
            {
                select firstonly RecId, JournalNum, TransactionType from ledgerJournalTrans
                    where ledgerJournalTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                        && ledgerJournalTrans.TransDate == subledgerVoucherGeneralJournalEntry.AccountingDate;
            }

            if (ledgerJournalTrans.RecId)
            {
                select firstonly RecId from ledgerJournalTable
                    where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum;

                if (ledgerJournalTable != null)
                {
                    this.insertDocument(
                        this.getOriginalDocumentFromLedgerTransType(ledgerJournalTrans.TransactionType),
                        ledgerJournalTable.TableId,
                        ledgerJournalTable.RecId,
                        SysModule::Ledger,
                        generalJournalAccountEntry.AccountingCurrencyAmount,
                        subledgerVoucherGeneralJournalEntry.Voucher,
                        generalJournalAccountEntry.Text,
                        '');
                }
            }

            select firstonly taxReportVoucher
                where taxReportVoucher.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                    && taxReportVoucher.TransDate == subledgerVoucherGeneralJournalEntry.AccountingDate;

            if (taxReportVoucher)
            {
                this.insertDocument(OriginalDocument::TaxReport,
                    taxReportVoucher.TableId,
                    taxReportVoucher.RecId,
                    SysModule::Tax,
                    generalJournalAccountEntry.AccountingCurrencyAmount,
                    subledgerVoucherGeneralJournalEntry.Voucher,
                    generalJournalAccountEntry.Text,
                    '');
            }

            while select TransId from projTransPosting
                group by TransId
                where projTransPosting.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                    && projTransPosting.LedgerTransDate == subledgerVoucherGeneralJournalEntry.AccountingDate
            {
                select firstonly projEmplTrans
                    where projEmplTrans.TransId == projTransPosting.TransId;

                if (projEmplTrans)
                {
                    while select LineAmount, RecId from projEmplTransCost
                        where projEmplTransCost.TransId == projTransPosting.TransId
                    {
                        this.insertDocument(OriginalDocument::ProjectTransaction,
                            projEmplTransCost.TableId,
                            projEmplTransCost.RecId,
                            SysModule::Project,
                            projEmplTransCost.LineAmount,
                            subledgerVoucherGeneralJournalEntry.Voucher,
                            generalJournalAccountEntry.Text,
                            '');
                    }
                }
                else
                {
                    select firstonly projRevenueTrans
                        where projRevenueTrans.TransId == projTransPosting.TransId;

                    if (projRevenueTrans)
                    {
                        while select LineAmount, RecId from projRevenueTransSale
                            where projRevenueTransSale.TransId == projTransPosting.TransId
                        {
                            this.insertDocument(OriginalDocument::ProjectTransaction,
                                projRevenueTransSale.TableId,
                                projRevenueTransSale.RecId,
                                SysModule::Project,
                                projRevenueTransSale.LineAmount,
                                subledgerVoucherGeneralJournalEntry.Voucher,
                                generalJournalAccountEntry.Text,
                                '');
                        }
                    }
                    else
                    {
                        while select LineAmount, RecId from projCostTransCost
                            where projCostTransCost.TransId == projTransPosting.TransId
                        {
                            this.insertDocument(OriginalDocument::ProjectTransaction,
                                projCostTransCost.TableId,
                                projCostTransCost.RecId,
                                SysModule::Project,
                                projCostTransCost.LineAmount,
                                subledgerVoucherGeneralJournalEntry.Voucher,
                                generalJournalAccountEntry.Text,
                                '');
                        }
                    }
                }
            }

            select firstonly RecId from tsTimesheetTrans
                where tsTimesheetTrans.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                    && tsTimesheetTrans.TransDate == subledgerVoucherGeneralJournalEntry.AccountingDate;

            if (tsTimesheetTrans.RecId != 0 && !projEmplTrans)
            {
                this.insertDocument(OriginalDocument::ProjectTransaction,
                    tsTimesheetTrans.TableId,
                    tsTimesheetTrans.RecId,
                    SysModule::Project,
                    generalJournalAccountEntry.AccountingCurrencyAmount,
                    subledgerVoucherGeneralJournalEntry.Voucher,
                    generalJournalAccountEntry.Text,
                    '');
            }

            select firstonly JournalId, RecId from projJournalTransEmpl
                where projJournalTransEmpl.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                    && projJournalTransEmpl.TransDate == subledgerVoucherGeneralJournalEntry.AccountingDate;

            if (projJournalTransEmpl.RecId)
            {
                select firstonly RecId from projJournalTable
                    where projJournalTable.JournalId == projJournalTransEmpl.JournalId;

                if (projJournalTable != null)
                {
                    this.insertDocument(OriginalDocument::Journal,
                        projJournalTable.TableId,
                        projJournalTable.RecId,
                        SysModule::Project,
                        generalJournalAccountEntry.AccountingCurrencyAmount,
                        subledgerVoucherGeneralJournalEntry.Voucher,
                        generalJournalAccountEntry.Text,
                        '');
                }
            }

            while select AmountMST, TrvExpTable, RecId from trvExpTrans
                exists join accountingDistribution
                    where accountingDistribution.SourceDocumentLine == trvExpTrans.SourceDocumentLine
                exists join subledgerJournalAccountEntryDistribution
                    where subledgerJournalAccountEntryDistribution.AccountingDistribution == accountingDistribution.RecId
                exists join subledgerJournalAccountEntry
                    where subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId
                        && subledgerJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry_Caller.RecId
            {
                if (TrvParameters::find().DisplayEntireExpenseOnDrillBack)
                {
                    this.insertDocument(OriginalDocument::Expense,
                        tableNum(TrvExpTable),
                        trvExpTrans.TrvExpTable,
                        SysModule::Expense,
                        trvExpTrans.AmountMST,
                        subledgerVoucherGeneralJournalEntry.Voucher,
                        generalJournalAccountEntry.Text,
                        '');
                }
                else
                {
                    this.insertDocument(OriginalDocument::Expense,
                        trvExpTrans.TableId,
                        trvExpTrans.RecId,
                        SysModule::Expense,
                        trvExpTrans.AmountMST,
                        subledgerVoucherGeneralJournalEntry.Voucher,
                        generalJournalAccountEntry.Text,
                        '');
                }
            }

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU))
            {
                this.findFromGeneralJournal_RU(generalJournalEntry, subledgerVoucherGeneralJournalEntry);
            } 
            // </GEERU>
            else
            {
                this.findFromInventJournal(generalJournalEntry, subledgerVoucherGeneralJournalEntry);
            }

            while select Amount, RecId from vendPurchOrderJour
                where vendPurchOrderJour.PurchaseOrderVoucher == subledgerVoucherGeneralJournalEntry.Voucher
            join InvoiceAccount, PurchId from purchTableAllVersions
                where purchTableAllVersions.PurchTableVersionRecId == vendPurchOrderJour.PurchTableVersion
                    && purchTableAllVersions.CurrencyCode == generalJournalAccountEntry.TransactionCurrencyCode
            join RecId from accountingEvent
                where accountingEvent.SourceDocumentHeader == purchTableAllVersions.SourceDocumentHeader
                    && accountingEvent.AccountingDate == subledgerVoucherGeneralJournalEntry.AccountingDate
            join RecId from subledgerJournalEntry
                where subledgerJournalEntry.AccountingEvent == accountingEvent.RecId
            join RecId from subledgerJournalAccountEntry
                where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
                    && subledgerJournalAccountEntry.LedgerDimension == generalJournalAccountEntry.LedgerDimension
            {
                this.insertDocument(OriginalDocument::Purchase,
                    vendPurchOrderJour.TableId,
                    vendPurchOrderJour.RecId,
                    SysModule::Purch,
                    vendPurchOrderJour.Amount,
                    purchTableAllVersions.PurchId,
                    purchTableAllVersions.InvoiceAccount,
                    generalJournalAccountEntry.Text);
            }

            while select RecId, TransactionNumber from advancedLedgerEntryHeader
                group by advancedLedgerEntryHeader.RecId, advancedLedgerEntryHeader.TransactionNumber
                where advancedLedgerEntryHeader.LedgerVoucher == subledgerVoucherGeneralJournalEntry.Voucher
                     && advancedLedgerEntryHeader.AccountingDate == subledgerVoucherGeneralJournalEntry.AccountingDate
                join sum(AmountCurCredit), sum(AmountCurDebit) from advancedLedgerEntryLine
                    where advancedLedgerEntryLine.AdvancedLedgerEntryHeader == advancedLedgerEntryHeader.RecId
            {
                // sum all lines per header
                this.insertDocument(OriginalDocument::AdvancedLedgerEntry,
                    advancedLedgerEntryHeader.TableId,
                    advancedLedgerEntryHeader.RecId,
                    SysModule::Ledger,
                    advancedLedgerEntryLine.AmountCurDebit - advancedLedgerEntryLine.AmountCurCredit,
                    advancedLedgerEntryHeader.TransactionNumber,
                    '',
                    '');
            }

            while select RecId from inventClosing
                where inventClosing.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                    && inventClosing.TransDate == subledgerVoucherGeneralJournalEntry.AccountingDate
            {
                this.insertDocument(OriginalDocument::InventClosingAdj,
                    inventClosing.TableId,
                    inventClosing.RecId,
                    SysModule::Costing,
                    generalJournalAccountEntry.AccountingCurrencyAmount,
                    subledgerVoucherGeneralJournalEntry.Voucher,
                    generalJournalAccountEntry.Text,
                    '');
            }
            
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                ProjAdvancedJournalLine projAdvancedJournalLine;
                while select RecId from projAdvancedJournalLine
                    where projAdvancedJournalLine.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                        && projAdvancedJournalLine.AccountingDate == subledgerVoucherGeneralJournalEntry.AccountingDate
                {
                    this.insertDocument(OriginalDocument::Journal,
                        projAdvancedJournalLine.TableId,
                        projAdvancedJournalLine.RecId,
                        SysModule::Project,
                        generalJournalAccountEntry.AccountingCurrencyAmount,
                        subledgerVoucherGeneralJournalEntry.Voucher,
                        generalJournalAccountEntry.Text,
                        '');
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromGeneralJournal_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find original document from general journal.
    /// </summary>
    /// <param name="_generalJournalEntry">
    /// The record of <c>GeneralJournalEntry</c> table.
    /// </param>
    /// <param name="_subledgerVoucherGeneralJournalEntry">
    /// The record of <c>SubledgerVoucherGeneralJournalEntry</c> table.
    /// </param>
    protected void findFromGeneralJournal_RU(GeneralJournalEntry _generalJournalEntry, SubledgerVoucherGeneralJournalEntry _subledgerVoucherGeneralJournalEntry)
    {
        InventJournalReportTable_RU inventJournalReportTable;
        InventJournalTrans inventJournalTrans;
        InventJournalTable inventJournalTable;
        RCashTrans cashTrans;
        EmplTrans_RU emplTrans;
        RAssetTrans rAssetTrans;
        RAssetTransUnionView rAssetTransUnionView;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            //Inventory Reports -->

            while select JournalId, JournalType, RecId from inventJournalTable
                exists join inventJournalTrans
                    where inventJournalTrans.Voucher == _subledgerVoucherGeneralJournalEntry.Voucher
                        && inventJournalTrans.TransDate == _generalJournalEntry.AccountingDate
                        && inventJournalTable.JournalId == inventJournalTrans.JournalId
            {
                this.insertDocument(OriginalDocument::InventoryJournal_RU,
                    inventJournalTable.TableId,
                    inventJournalTable.RecId,
                    SysModule::Invent,
                    0,
                    inventJournalTable.JournalId,
                    enum2str(inventJournalTable.JournalType),
                    '');
            }

            while select ReportId, ReportTypeInvent, TotalAmount, RecId from inventJournalReportTable
                exists join inventJournalTable
                    where inventJournalTable.JournalId == inventJournalReportTable.JournalId
                exists join inventJournalTrans
                    where inventJournalTrans.JournalId == inventJournalTable.JournalId
                        && inventJournalTrans.Voucher == _subledgerVoucherGeneralJournalEntry.Voucher
                        && inventJournalTrans.TransDate == _generalJournalEntry.AccountingDate
            {
                this.insertDocument(OriginalDocument::InventoryReport_RU,
                    inventJournalReportTable.TableId,
                    inventJournalReportTable.RecId,
                    SysModule::Invent,
                    inventJournalReportTable.TotalAmount,
                    inventJournalReportTable.ReportId,
                    enum2str(inventJournalReportTable.ReportTypeInvent),
                    '');
            }
            //Inventory Reports <--
        }

        while select AccountNum, AmountMST, DocId, DocType, RecId from cashTrans
            where cashTrans.Voucher == _subledgerVoucherGeneralJournalEntry.Voucher
                && cashTrans.TransDate == _generalJournalEntry.AccountingDate
        {
            this.insertDocument(OriginalDocument::RCashDoc,
                cashTrans.TableId,
                cashTrans.RecId,
                SysModule::RCash,
                cashTrans.AmountMST,
                cashTrans.DocId,
                RCashTable::find(cashTrans.AccountNum).Name,
                enum2str(cashTrans.DocType));
        }

        while select AdvanceId, EmplAccount, TransType, AmountCur, RecId from emplTrans
            where emplTrans.Voucher == _subledgerVoucherGeneralJournalEntry.Voucher
                && emplTrans.TransDate == _generalJournalEntry.AccountingDate
        {
            this.insertDocument(OriginalDocument::Employee_RU,
                emplTrans.TableId,
                emplTrans.RecId,
                SysModule::Employee_RU,
                emplTrans.AmountCur,
                emplTrans.AdvanceId,
                EmployeeTable_RU::findByEmployeeId(emplTrans.EmplAccount).worker().getFIO_RU(),
                enum2str(emplTrans.TransType));
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            while select AccountNum, Voucher, AmountMST, Txt, RecId from rAssetTrans
                exists join rAssetTransUnionView
                    where rAssetTransUnionView.RefRecId == rAssetTrans.RecId
                       && rAssetTransUnionView.Voucher == _subledgerVoucherGeneralJournalEntry.Voucher
                       && rAssetTransUnionView.TransDate == _generalJournalEntry.AccountingDate

            {
                this.insertDocument(OriginalDocument::RAssetTrans,
                    rAssetTrans.TableId,
                    rAssetTrans.RecId,
                    SysModule::FixedAssets_RU,
                    rAssetTrans.AmountMST,
                    rAssetTrans.Voucher,
                    RAssetTable::find(rAssetTrans.AccountNum).Name,
                    rAssetTrans.Txt);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromInventJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find original document from invent journal trans.
    /// </summary>
    /// <param name="_generalJournalEntry">
    /// The record of <c>GeneralJournalEntry</c> table.
    /// </param>
    /// <param name="_subledgerVoucherGeneralJournalEntry">
    /// The record of <c>SubledgerVoucherGeneralJournalEntry</c> table.
    /// </param>
    private void findFromInventJournal(GeneralJournalEntry _generalJournalEntry, SubledgerVoucherGeneralJournalEntry _subledgerVoucherGeneralJournalEntry)
    {
        InventJournalTrans inventJournalTrans;
        InventJournalTable inventJournalTable;

        select sum(CostAmount), JournalId from inventJournalTrans
            group by JournalId where inventJournalTrans.Voucher == _subledgerVoucherGeneralJournalEntry.Voucher
                && inventJournalTrans.TransDate == _generalJournalEntry.AccountingDate
                && inventJournalTrans.ProjId != '';

        select firstonly JournalId, JournalType, RecId from inventJournalTable
            where inventJournalTable.JournalId == inventJournalTrans.JournalId;

        if (inventJournalTable.RecId)
        {
            this.insertDocument(OriginalDocument::Journal,
                inventJournalTable.TableId,
                inventJournalTable.RecId,
                SysModule::Project,
                inventJournalTrans.CostAmount,
                inventJournalTable.JournalId,
                enum2str(inventJournalTable.JournalType),
                '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromRCashTrans</Name>
				<Source><![CDATA[
    private void findFromRCashTrans()
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_RCash ledgerJournalTrans_RCash;
        LedgerJournalTable ledgerJournalTable;
        RCashTrans cashTrans_Caller;

        if (commonArg.TableId == tableNum(RCashTrans))
        {
            cashTrans_Caller = commonArg as RCashTrans;
        }

        if (cashTrans_Caller == null)
        {
            return;
        }

        select firstonly ledgerJournalTrans
            where ledgerJournalTrans.Voucher == cashTrans_Caller.Voucher
                && ledgerJournalTrans.TransDate == cashTrans_Caller.TransDate
        join RecId from ledgerJournalTable
            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
        exists join ledgerJournalTrans_RCash
            where ledgerJournalTrans_RCash.RefRecId == ledgerJournalTrans.RecId
                && ledgerJournalTrans_RCash.DocType == cashTrans_Caller.DocType
                && ledgerJournalTrans_RCash.CashDocId == cashTrans_Caller.DocId;

        if (ledgerJournalTrans)
        {
            this.insertDocument(OriginalDocument::Journal,
                ledgerJournalTable.TableId,
                ledgerJournalTable.RecId,
                SysModule::Ledger,
                cashTrans_Caller.AmountMST,
                cashTrans_Caller.Voucher,
                cashTrans_Caller.Txt,
                '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the <c>VendTrans</c> table.
    /// </summary>
    void findFromVendTrans()
    {
        VendTable vendTable;
        VendTrans vendTrans_Caller;
        VendInvoiceJour vendInvoiceJour;
        PurchTable purchTable;
        BankChequeTable bankChequeTable;
        VendPromissoryNoteJour vendPromissoryNoteJour;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        VendName vendName;
        VendInvoicePurchLink vendInvoicePurchLink;

        // <GEEU>
        CustomJournalTable_RU customJournalTable;
        CustomCorrectionTable_RU customCorrectionTable;
        // </GEEU>

        if (commonArg.TableId == tableNum(VendTrans))
        {
            vendTrans_Caller = commonArg as VendTrans;
        }

        if (vendTrans_Caller == null)
        {
            return;
        }

        vendTable = VendTable::find(vendTrans_Caller.AccountNum);
        vendName = vendTable.name();

        this.insertVendorTransactionDocument(vendTrans_Caller, vendName);

        if (vendTrans_Caller.CompanyBankAccountId != '' && vendTrans_Caller.PaymReference != '')
        {
            while select RecId from bankChequeTable
                where bankChequeTable.AccountID == vendTrans_Caller.CompanyBankAccountId
                    && bankChequeTable.ChequeNum == vendTrans_Caller.PaymReference
            {
                this.insertDocument(OriginalDocument::Cheque,
                    bankChequeTable.TableId,
                    bankChequeTable.RecId,
                    SysModule::Bank,
                    vendTrans_Caller.AmountMST,
                    vendTrans_Caller.PaymReference,
                    vendTrans_Caller.CompanyBankAccountId,
                    vendTrans_Caller.Voucher);
            }
        }

        if (vendTrans_Caller.PromissoryNoteID != '')
        {
            while select VendAccount, RecId from vendPromissoryNoteJour
                where vendPromissoryNoteJour.PromissoryNoteId == vendTrans_Caller.PromissoryNoteID
            {
                this.insertDocument(OriginalDocument::VendPromissoryNote,
                    vendPromissoryNoteJour.TableId,
                    vendPromissoryNoteJour.RecId,
                    SysModule::Vend,
                    vendTrans_Caller.AmountMST,
                    vendTrans_Caller.PromissoryNoteID,
                    vendPromissoryNoteJour.VendAccount,
                    vendTrans_Caller.Voucher);
            }
        }

        // <GEERU>
        while select CustomJournalId, RecId from customJournalTable
            where customJournalTable.LedgerVoucher == vendTrans_Caller.Voucher
                && customJournalTable.PlanArrivalDate == vendTrans_Caller.TransDate
                && (customJournalTable.VendAccountCustom == vendTrans_Caller.AccountNum
                    || customJournalTable.VendAccountBroker == vendTrans_Caller.AccountNum)
        {
            this.insertDocument(OriginalDocument::CustomJournal_RU,
                customJournalTable.TableId,
                customJournalTable.RecId,
                SysModule::Vend,
                vendTrans_Caller.AmountMST,
                customJournalTable.CustomJournalId,
                vendTrans_Caller.AccountNum,
                vendTrans_Caller.Voucher);
        }

        while select CorrectionJournalId, RecId from customCorrectionTable
            where customCorrectionTable.LedgerVoucher == vendTrans_Caller.Voucher
        exists join customJournalTable
            where customCorrectionTable.JournalId == customJournalTable.CustomJournalId
                && customJournalTable.PlanArrivalDate == vendTrans_Caller.TransDate
                && (customJournalTable.VendAccountCustom == vendTrans_Caller.AccountNum
                    || customJournalTable.VendAccountBroker == vendTrans_Caller.AccountNum)
        {
            this.insertDocument(OriginalDocument::CustomCorrection_RU,
                customCorrectionTable.TableId,
                customCorrectionTable.RecId,
                SysModule::Vend,
                vendTrans_Caller.AmountMST,
                customCorrectionTable.CorrectionJournalId,
                vendTrans_Caller.AccountNum,
                vendTrans_Caller.Voucher);
        }
        // </GEERU>

        select firstonly RecId from ledgerJournalTable
            exists join ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                    && ledgerJournalTrans.Voucher == vendTrans_Caller.Voucher
                    && ledgerJournalTrans.TransDate == vendTrans_Caller.TransDate;

        if (ledgerJournalTable != null)
        {
            this.insertDocument(
                this.getOriginalDocumentFromLedgerTransType(vendTrans_Caller.TransType),
                ledgerJournalTable.TableId,
                ledgerJournalTable.RecId,
                SysModule::Ledger,
                vendTrans_Caller.AmountMST,
                vendTrans_Caller.Voucher,
                vendTrans_Caller.Txt,
                '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes all the relations for the current object.
    /// </summary>
    public void findRelations()
    {
        container packedClass;

        // <GEERU>
        RecId tmpLedgerBaseRecId;
        // </GEERU>

        packedClass = this.pack();

        tmpLedgerBase = Originaldocuments::runOnServer(packedClass);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            // set the numTrans for RU because it is not serialized and RU is the only way to access it
            tmpLedgerBaseRecId = tmpLedgerBase.RecId;

            select count(RecId) from tmpLedgerBase;

            numTrans = int642int(tmpLedgerBase.RecId);

            select * from tmpLedgerBase
                where tmpLedgerBase.RecId == tmpLedgerBaseRecId;
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a document into the temp table.
    /// </summary>
    /// <param name = "_originalDocument">
    /// A <c>OriginalDocument</c> enumeration value.
    /// </param>
    /// <param name = "_recordTableId">
    /// The table ID of the transaction.
    /// </param>
    /// <param name = "_recordRecId">
    /// The record ID of the transaction.
    /// </param>
    /// <param name = "_module">
    /// The <c>SysModule</c> enumeration value.
    /// </param>
    /// <param name = "_amount">
    /// The amount on the transaction.
    /// </param>
    /// <param name = "_id">
    /// The identifier for the transaction.
    /// </param>
    /// <param name = "_idName">
    /// The identifier name for the transaction.
    /// </param>
    /// <param name = "_transText">
    /// The text for the transaction.
    /// </param>
    /// <param name = "_transactionLineRecId">
    /// The record ID of the transaction line; optional.
    /// </param>
    void insertDocument(OriginalDocument _originalDocument,
        TableId _recordTableId,
        RecId _recordRecId,
        SysModule _module,
        Amount _amount,
        Num _id,
        TransactionTextLarge _idName,
        TransactionTextLarge _transText,
        RefRecId _transactionLineRecId = 0)
    {
        if (_recordTableId && _recordRecId)
        {
            // Look for an existing tmp record for the Table/RecId combination provided, with a check for a matching
            // Transaction line RecId if the document type allows multiple matches per RecId.
            select firstonly tmpLedgerBase
                where tmpLedgerBase.RecordTableId == _recordTableId
                    && tmpLedgerBase.RecordRecId == _recordRecId
                    && ((tmpLedgerBase.TransactionLineRecId == _transactionLineRecId) || (_transactionLineRecId == 0));

            if (!tmpLedgerBase)
            {
                tmpLedgerBase.clear();

                OriginalDocumentsPopulateTmpLedgerBaseParameters parameters = this.populateTmpLedgerBaseParameters(
                    _originalDocument,
                    _recordTableId,
                    _recordRecId,
                    _module,
                    _amount,
                    _id,
                    _idName,
                    _transText,
                    _transactionLineRecId);

                tmpLedgerBase = this.populateTmpLedgerBase(parameters);

                tmpLedgerBase.insert();
                numTrans++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpLedgerBaseParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>OriginalDocumentsPopulateTmpLedgerBaseParameters</c> instance which is used to populate <c>TmpLedgerBase</c> buffer.
    /// </summary>
    /// <param name = "_originalDocument">
    /// A <c>OriginalDocument</c> enumeration value.
    /// </param>
    /// <param name = "_recordTableId">
    /// The table ID of the transaction.
    /// </param>
    /// <param name = "_recordRecId">
    /// The record ID of the transaction.
    /// </param>
    /// <param name = "_module">
    /// The <c>SysModule</c> enumeration value.
    /// </param>
    /// <param name = "_amount">
    /// The amount on the transaction.
    /// </param>
    /// <param name = "_id">
    /// The identifier for the transaction.
    /// </param>
    /// <param name = "_idName">
    /// The identifier name for the transaction.
    /// </param>
    /// <param name = "_transText">
    /// The text for the transaction.
    /// </param>
    /// <param name = "_transactionLineRecId">
    /// The record ID of the transaction line.
    /// </param>
    /// <returns>
    /// An <c>OriginalDocumentsPopulateTmpLedgerBaseParameters</c> instance.
    /// </returns>
    private OriginalDocumentsPopulateTmpLedgerBaseParameters populateTmpLedgerBaseParameters(
        OriginalDocument _originalDocument,
        TableId _recordTableId,
        RecId _recordRecId,
        SysModule _module,
        Amount _amount,
        Description _id,
        TransactionTextLarge _idName,
        TransactionTextLarge _transText,
        RefRecId _transactionLineRecId)
    {
        OriginalDocumentsPopulateTmpLedgerBaseParameters parameters = OriginalDocumentsPopulateTmpLedgerBaseParameters::construct();

        parameters.originalDocument = _originalDocument;
        parameters.recordTableId = _recordTableId;
        parameters.recordRecId = _recordRecId;
        parameters.module = _module;
        parameters.amount = _amount;
        parameters.id = _id;
        parameters.idName = _idName;
        parameters.transText = _transText;
        parameters.transactionLineRecId = _transactionLineRecId;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpLedgerBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>TmpLedgerBase</c> buffer.
    /// </summary>
    /// <param name = "_parameters">
    /// An <c>OriginalDocumentsPopulateTmpLedgerBaseParameters</c> instance which contains the parameters used to populate the <c>TmpLedgerBase</c> buffer.
    /// </param>
    /// <returns>
    /// Populated <c>TmpLedgerBase</c> buffer.
    /// </returns>
    [Wrappable(true)]
    protected final TmpLedgerBase populateTmpLedgerBase(OriginalDocumentsPopulateTmpLedgerBaseParameters _parameters)
    {
        tmpLedgerBase.Counter = numTrans;
        tmpLedgerBase.OriginalDocument = _parameters.originalDocument;
        tmpLedgerBase.RecordTableId = _parameters.recordTableId;
        tmpLedgerBase.RecordRecId = _parameters.recordRecId;
        tmpLedgerBase.Module = _parameters.module;
        tmpLedgerBase.Amount = _parameters.amount;
        tmpLedgerBase.Id = _parameters.id;
        tmpLedgerBase.IdName = _parameters.idName;
        tmpLedgerBase.TransText = _parameters.transText;
        tmpLedgerBase.TransactionLineRecId = _parameters.transactionLineRecId;

        return tmpLedgerBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDocumentByTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// For the given customer transaction record and customer name, inserts the appropriate document(s)
    /// based on the customer transaction record's transaction type.
    /// </summary>
    /// <param name = "_custTrans">
    /// The customer transaction record.
    /// </param>
    /// <param name = "_custName">
    /// The customer name record.
    /// </param>
    protected void insertDocumentByTransactionType(CustTrans _custTrans, CustName _custName)
    {
        switch (_custTrans.TransType)
        {
            case LedgerTransType::Interest:
                var custInterestJour = CustInterestJour::findByVoucher(_custTrans.AccountNum, _custTrans.Voucher, _custTrans.TransDate);

                if (custInterestJour != null)
                {
                    this.insertDocument(OriginalDocument::CustInterestNote,
                        custInterestJour.TableId,
                        custInterestJour.RecId,
                        SysModule::Cust,
                        custInterestJour.sumInterestAmountFeeInclTax(),
                        custInterestJour.InterestNote,
                        _custTrans.AccountNum,
                        _custName);
                }
                break;

            case LedgerTransType::CollectionLetter:
                CustCollectionLetterJour custCollectionLetterJour;
                select firstonly CollectionLetterNum, Fee, TaxAmount, RecId from custCollectionLetterJour
                    where custCollectionLetterJour.AccountNum == _custTrans.AccountNum
                        && custCollectionLetterJour.Updated == _custTrans.TransDate
						&& custCollectionLetterJour.LedgerVoucher == _custTrans.Voucher;
                if (custCollectionLetterJour)
				{
                    this.insertDocument(OriginalDocument::CustCollectionLetter,
                        custCollectionLetterJour.TableId,
                        custCollectionLetterJour.RecId,
                        SysModule::Cust,
                        custCollectionLetterJour.Fee + custCollectionLetterJour.TaxAmount,
                        custCollectionLetterJour.CollectionLetterNum,
                        _custTrans.AccountNum,
                        _custName);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendorTransactionDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// For the given <c>VendTrans</c> record buffer, insert the appropriate document(s) to be displayed on the original documents form.
    /// </summary>
    private void insertVendorTransactionDocument(VendTrans _vendTrans, VendName _vendName)
    {
        VendInvoicePurchLink vendInvoicePurchLink;
        PurchTable purchTable;
        VendInvoiceJour vendInvoiceJour;
        VendInvoiceTrans vendInvoiceTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        boolean isVendorTransactionInserted;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;

        ledgerJournalVoucherChanged = LedgerJournalVoucherChanged::findFromVendTrans(_vendTrans);

        while select InvoiceAccount, InvoiceId, InvoiceAmount, PurchId, RecId from vendInvoiceJour
            where vendInvoiceJour.InvoiceAccount == _vendTrans.AccountNum
                && vendInvoiceJour.InvoiceDate == (ledgerJournalVoucherChanged.RecId ? ledgerJournalVoucherChanged.ToDate : _vendTrans.TransDate)
                && vendInvoiceJour.InvoiceId == _vendTrans.Invoice
                && vendInvoiceJour.LedgerVoucher == (ledgerJournalVoucherChanged.RecId ? ledgerJournalVoucherChanged.ToVoucher : _vendTrans.Voucher)
        outer join RecId from vendInvoicePurchLink
            where vendInvoicePurchLink.InvoiceId == vendInvoiceJour.InvoiceId
                && vendInvoicePurchLink.PurchId == vendInvoiceJour.PurchId
                && vendInvoicePurchLink.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId
                && vendInvoicePurchLink.InvoiceDate == vendInvoiceJour.InvoiceDate
        outer join InvoiceAccount, PurchId, RecId from purchTable
            where purchTable.PurchId == vendInvoicePurchLink.origPurchId
        {
            this.insertDocument(OriginalDocument::PurchaseInvoice,
                vendInvoiceJour.TableId,
                vendInvoiceJour.RecId,
                SysModule::Vend,
                vendInvoiceJour.InvoiceAmount,
                vendInvoiceJour.InvoiceId,
                vendInvoiceJour.InvoiceAccount,
                _vendName);

            if (purchTable != null)
            {
                select sum(LineAmount) from vendInvoiceTrans
                    where vendInvoiceTrans.OrigPurchId == purchTable.PurchId;

                this.insertDocument(OriginalDocument::Purchase,
                    purchTable.TableId,
                    purchTable.RecId,
                    SysModule::Purch,
                    vendInvoiceTrans.LineAmount,
                    purchTable.PurchId,
                    purchTable.InvoiceAccount,
                    _vendName);
            }

            isVendorTransactionInserted = true;
        }

        if (!isVendorTransactionInserted)
        {
            while select InvoiceAccount, InvoiceId, InvoiceAmount, PurchId, RecId from vendInvoiceJour
                where vendInvoiceJour.InvoiceAccount == _vendTrans.AccountNum
                    && vendInvoiceJour.InvoiceDate <= _vendTrans.TransDate
                    && vendInvoiceJour.LedgerVoucher == _vendTrans.LastSettleVoucher
            outer join RecId from vendInvoicePurchLink
                where vendInvoicePurchLink.InvoiceId == vendInvoiceJour.InvoiceId
                    && vendInvoicePurchLink.PurchId == vendInvoiceJour.PurchId
                    && vendInvoicePurchLink.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId
                    && vendInvoicePurchLink.InvoiceDate == vendInvoiceJour.InvoiceDate
            outer join InvoiceAccount, PurchId, RecId from purchTable
                where purchTable.PurchId == vendInvoicePurchLink.origPurchId
            {
                this.insertDocument(OriginalDocument::PurchaseInvoice,
                    vendInvoiceJour.TableId,
                    vendInvoiceJour.RecId,
                    SysModule::Vend,
                    vendInvoiceJour.InvoiceAmount,
                    vendInvoiceJour.InvoiceId,
                    vendInvoiceJour.InvoiceAccount,
                    _vendName);

                if (purchTable != null)
                {
                    select sum(LineAmount) from vendInvoiceTrans
                        where vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId;

                    this.insertDocument(OriginalDocument::Purchase,
                        purchTable.TableId,
                        purchTable.RecId,
                        SysModule::Purch,
                        vendInvoiceTrans.LineAmount,
                        purchTable.PurchId,
                        purchTable.InvoiceAccount,
                        _vendName);
                }
                isVendorTransactionInserted = true;
            }
        }

        if (!isVendorTransactionInserted)
        {
            while select InvoiceAccount, InvoiceId, InvoiceAmount, LedgerVoucher, PurchId, RecId from vendInvoiceJour
                where vendInvoiceJour.InvoiceAccount == _vendTrans.AccountNum
                    && vendInvoiceJour.InvoiceDate == _vendTrans.TransDate
                    && vendInvoiceJour.InvoiceId == _vendTrans.Invoice
            outer join RecId from vendInvoicePurchLink
                where vendInvoicePurchLink.InvoiceId == vendInvoiceJour.InvoiceId
                    && vendInvoicePurchLink.PurchId == vendInvoiceJour.PurchId
                    && vendInvoicePurchLink.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId
                    && vendInvoicePurchLink.InvoiceDate == vendInvoiceJour.InvoiceDate
            outer join InvoiceAccount, PurchId, RecId from purchTable
                where purchTable.PurchId == vendInvoicePurchLink.origPurchId
            {
                this.insertDocument(OriginalDocument::PurchaseInvoice,
                    vendInvoiceJour.TableId,
                    vendInvoiceJour.RecId,
                    SysModule::Vend,
                    vendInvoiceJour.InvoiceAmount,
                    vendInvoiceJour.InvoiceId,
                    vendInvoiceJour.InvoiceAccount,
                    _vendName);

                if (purchTable != null)
                {
                    select sum(LineAmount) from vendInvoiceTrans
                        where vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId;

                    this.insertDocument(OriginalDocument::Purchase,
                        purchTable.TableId,
                        purchTable.RecId,
                        SysModule::Purch,
                        vendInvoiceTrans.LineAmount,
                        purchTable.PurchId,
                        purchTable.InvoiceAccount,
                        _vendName);
                }

                select firstonly RecId from ledgerJournalTable
                    exists join ledgerJournalTrans
                        where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                            && ledgerJournalTrans.Voucher == vendInvoiceJour.LedgerVoucher
                            && ledgerJournalTrans.TransDate == _vendTrans.TransDate
                            && ledgerJournalTrans.Invoice == _vendTrans.Invoice;

                if (ledgerJournalTable != null)
                {
                    this.insertDocument(OriginalDocument::Journal,
                        ledgerJournalTable.TableId,
                        ledgerJournalTable.RecId,
                        SysModule::Ledger,
                        _vendTrans.AmountMST,
                        _vendTrans.Voucher,
                        _vendTrans.Txt,
                        '');
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRetailSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a retail sale document.
    /// </summary>
    /// <param name = "_rboTrans">
    /// The <c>RetailTransactionTable</c> record.
    /// </param>
    /// <param name = "_custTrans">
    /// The <c>CustTrans</c> record.
    /// </param>
    /// <param name = "_custTable">
    /// The <c>CustTable</c> record.
    /// </param>
    void insertRetailSale(RetailTransactionTable _rboTrans, CustTrans _custTrans, CustTable _custTable)
    {
        this.insertDocument(OriginalDocument::RetailSale,
            _rboTrans.TableId,
            _rboTrans.RecId,
            SysModule::Retail,
            _rboTrans.PaymentAmount,
            _rboTrans.TransactionId,
            _custTrans.AccountNum,
            _custTable.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>Originaldocuments</c> object.
    /// </summary>
    /// <param name="_common">The instance of <c>Common</c></param>
    /// <param name="_skipNullCheck">Indicates whether to skip the null check or not.</param>
    /// <returns>A new instance of the <c>Originaldocuments</c> object.</returns>
    public static Originaldocuments construct(Common _common, boolean _skipNullCheck = false)
    {
        return new Originaldocuments(_common, _skipNullCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _common, boolean _skipNullCheck = false)
    {
        commonArg = _common;

        if (!_skipNullCheck && _common == null)
        {
            throw error(Error::missingRecord(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numTrans_RU</Name>
				<Source><![CDATA[
    public Integer numTrans_RU()
    {
        return numTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, buf2Con(commonArg.data())];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printoutExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for running the report for the document.
    /// </summary>
    /// <param name = "_tmpLedgerBase">
    /// The <c>TmpLedgerBase</c> table buffer.
    /// </param>
    /// <param name = "_args">
    /// The <c>Args</c> instance used to run the report for the document.
    /// </param>
    /// <param name = "_result">
    /// An <c>EventHandlerResult</c> instance, where subscribers can provide a return value.
    /// </param>
    /// <remarks>
    /// Return a value via the <c>EventHandlerResult</c> instance to prevent the info message from being thrown.
    /// </remarks>
    delegate void printoutExtension(TmpLedgerBase _tmpLedgerBase, Args _args, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrintout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Raises the event for when the report is being run for the document.
    /// </summary>
    /// <param name = "_tmpLedgerBase">
    /// The <c>TmpLedgerBase</c> table buffer.
    /// </param>
    /// <param name = "_args">
    /// The <c>Args</c> instance used to run the report for the document.
    /// </param>
    /// <param name = "_result">
    /// An <c>EventHandlerResult</c> instance, where subscribers can provide a return value.
    /// </param>
    protected void onPrintout(TmpLedgerBase _tmpLedgerBase, Args _args, EventHandlerResult _result)
    {
        this.printoutExtension(_tmpLedgerBase, _args, _result);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the report.
    /// </summary>
    /// <param name = "_printoutOriginal">
    /// The <c>TmpLedgerBase</c> table buffer.
    /// </param>
    void printout(TmpLedgerBase _printoutOriginal)
    {
        BankChequeTable bankChequeTable;
        Common common;
        DictTable dictTable;
        Args args = new Args();
        BankChequeCopy bankChequeCopy;

        if (!_printoutOriginal)
        {
            throw error("@SYS27407");
        }

        args.caller(this);

        dictTable = new DictTable(_printoutOriginal.RecordTableId);
        common = dictTable.makeRecord();
        args.record(common);

        select firstonly common
            index hint recid
            where common.RecId == _printoutOriginal.RecordRecId;

        switch (_printoutOriginal.OriginalDocument)
        {
            case OriginalDocument::Cheque:
                bankChequeTable = common;

                bankChequeCopy = ChequeCopy::construct();
                bankChequeCopy.parmBankChequeTable(bankChequeTable);
                bankChequeCopy.run();
                break;

            case OriginalDocument::BankDeposit:
                new MenuFunction(menuitemOutputStr(BankDepositSlip), MenuItemType::Output).run(args);
                break;

            case OriginalDocument::SalesInvoice:
                new MenuFunction(menuitemOutputStr(SalesInvoiceOriginal), MenuItemType::Output).run(args);
                break;

            case OriginalDocument::Sales:
                new MenuFunction(menuitemOutputStr(SalesHeading), MenuItemType::Output).run(args);
                break;

            case OriginalDocument::Quotation:
                new MenuFunction(menuitemOutputStr(SalesQuotationOriginal), MenuItemType::Output).run(args);
                break;

            case OriginalDocument::SalesConfirmation:
                new MenuFunction(menuitemOutputStr(SalesConfirmationOriginal), MenuItemType::Output).run(args);
                break;

            case OriginalDocument::SalesPackingSlip:
                new MenuFunction(menuitemOutputStr(SalesPackingSlipOriginal), MenuItemType::Output).run(args);
                break;

            case OriginalDocument::PurchaseInvoice:
                args.name(ssrsReportStr(VendInvoiceDocument, Report));
                new MenuFunction(menuitemOutputStr(PurchInvoiceOriginal), MenuItemType::Output).run(args);
                break;

            case OriginalDocument::Purchase:
                new MenuFunction(menuitemOutputStr(PurchPurchaseOrderOriginal), MenuItemType::Output).run(args);
                break;

            case OriginalDocument::PurchasePackingSlip:
                new MenuFunction(menuitemOutputStr(PurchPackingSlipOriginal), MenuItemType::Output).run(args);
                break;

            case OriginalDocument::Journal:
                new MenuFunction(menuitemOutputStr(LedgerJournal), MenuItemType::Output).run(args);
                break;

            case OriginalDocument::TaxReport:
                new MenuFunction(menuitemOutputStr(TaxReporting), MenuItemType::Output).run(args);
                break;

            case OriginalDocument::ProjectInvoice:
                new MenuFunction(menuitemOutputStr(PSAProjInvoiceOriginal), MenuItemType::Output).run(args);
                break;

            case OriginalDocument::CustInterestNote:
                new MenuFunction(menuitemOutputStr(CustReport_InterestNote), MenuItemType::Output).run(args);
                break;

            case OriginalDocument::CustCollectionLetter:
                new MenuFunction(menuitemOutputStr(CustReport_CollectionLetter), MenuItemType::Output).run(args);
                break;

            case OriginalDocument::Expense:
                new MenuFunction(menuitemOutputStr(TrvExpense), MenuItemType::Output).run(args);
                break;

            case OriginalDocument::FreeTextInvoice:
                new MenuFunction(menuitemOutputStr(FreeTextInvoiceOriginal), MenuItemType::Output).run(args);
                break;

            // <GEERU>
            case OriginalDocument::InventoryReport_RU:
                InventJournalReport_RU::printReport(common);
                break;

            case OriginalDocument::PrepaymentInvoice_RU:
                new MenuFunction(menuitemOutputStr(FactureOriginal_RU), MenuItemType::Output).run(args);

            case OriginalDocument::RCashDoc:
                new MenuFunction(menuitemOutputStr(RCashOrderDispatcher), MenuItemType::Output).run(args);
                break;
            // </GEERU>

            // <RUPAY>
            case OriginalDocument::RPaySheet:
                new MenuFunction(menuitemoutputstr(RPaySheetReport), MenuItemType::Output).run(args);
                break;

            case OriginalDocument::RPayDeposit:
                new MenuFunction(menuitemoutputstr(RPaySheetListReport), MenuItemType::Output).run(args);
                break;
            // </RUPAY>

            case OriginalDocument::AdvancedLedgerEntry:
                new MenuFunction(menuitemOutputStr(AdvancedLedgerEntryPostedTrans), MenuItemType::Output).run(args);
                break;

            default :
                var eventHandlerResult = new EventHandlerResult();
                this.onPrintout(_printoutOriginal, args, eventHandlerResult);

                if (!eventHandlerResult.hasResult())
                {
                    throw info("@SYS26150");
                }
                
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TmpLedgerBase</c> table that contains the results.
    /// </summary>
    /// <returns>
    /// The <c>TmpLedgerBase</c> table that contains the results.
    /// </returns>
    TmpLedgerBase relations()
    {
        return tmpLedgerBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCreatingArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for creating the <c>Args</c> instance for the Show method.
    /// </summary>
    /// <param name = "_tmpLedgerBase">
    /// The <c>TmpLedgerBase</c> table buffer.
    /// </param>
    /// <param name = "_args">
    /// The <c>Args</c> instance used to open the form for the document.
    /// </param>
    /// <param name = "_result">
    /// An <c>EventHandlerResult</c> instance, where subscribers can provide a return value.
    /// </param>
    /// <remarks>
    /// Return a value via the <c>EventHandlerResult</c> instance to prevent the system from
    /// opening the form. This option should be used if the delegate handler needs to open the form itself.
    /// </remarks>
    delegate void showCreatingArgs(TmpLedgerBase _tmpLedgerBase, Args _args, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onShowCreatingArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Raises the event for creating the <c>Args</c> instance for the Show method.
    /// </summary>
    /// <param name = "_tmpLedgerBase">
    /// The <c>TmpLedgerBase</c> table buffer.
    /// </param>
    /// <param name = "_args">
    /// The <c>Args</c> instance used to open the form for the document.
    /// </param>
    /// <param name = "_result">
    /// An <c>EventHandlerResult</c> instance, where subscribers can provide a return value.
    /// </param>
    protected void onShowCreatingArgs(TmpLedgerBase _tmpLedgerBase, Args _args, EventHandlerResult _result)
    {
        this.showCreatingArgs(_tmpLedgerBase, _args, _result);
    }

]]></Source>
			</Method>
			<Method>
				<Name>show</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the transaction details using the proper form.
    /// </summary>
    /// <param name = "_tmpLedgerBase">
    /// The <c>TmpLedgerBase</c> table buffer.
    /// </param>
    void show(TmpLedgerBase _tmpLedgerBase)
    {
        Common common;
        DictTable dictTable;
        Args args = new Args();
        FormRun showOriginalForm;

        // <GEERU>
        InventJournalReportTable_RU inventJournalReportTable;
        // </GEERU>

        if (!_tmpLedgerBase)
        {
            throw error("@SYS29005");
        }

        dictTable = new DictTable(_tmpLedgerBase.RecordTableId);
        common = dictTable.makeRecord();
        args.record(common);
        args.caller(this);

        select firstonly common
            index hint recid
            where common.RecId== _tmpLedgerBase.RecordRecId;

        switch (_tmpLedgerBase.OriginalDocument)
        {
            case OriginalDocument::Cheque:
                args.name(formStr(BankChequeTable));
                break;

            case OriginalDocument::Sales:
                args.name(formStr(SalesTable));
                break;

            case OriginalDocument::RetailSale:
                if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                {
                    args.name(formStr(RetailTransactionTable));
                }
                break;

            case OriginalDocument::SalesInvoice, OriginalDocument::FreeTextInvoice:
                args.name(formStr(CustInvoiceJournal));
                break;

            case OriginalDocument::Quotation:
                args.name(formStr(CustQuotationJournal));
                break;

            case OriginalDocument::SalesConfirmation:
                args.name(formStr(CustConfirmJournal));
                break;

            case OriginalDocument::SalesPackingSlip:
                args.name(formStr(CustPackingSlipJournal));
                break;

            case OriginalDocument::PurchaseInvoice:
                args.name(formStr(VendInvoiceJournal));
                break;

            case OriginalDocument::Purchase:
                args.name(formStr(PurchTable));
                break;

            case OriginalDocument::PurchasePackingSlip:
                args.name(formStr(VendPackingSlipJournal));
                break;

            case OriginalDocument::BankDeposit:
                args.name(formStr(BankDeposit));
                break;

            case OriginalDocument::BankSummarization:
                args.name(formStr(BankTransSummarizationLine));
                break;

            case OriginalDocument::Journal:
                switch (_tmpLedgerBase.RecordTableId)
                {
                    case tableName2id(tableStr(ProjJournalTable)):
                        args.name(formStr(ProjJournalTable));
                        args.menuItemName(menuitemDisplayStr(ProjJournalTableEmpl));
                        args.menuItemType(MenuItemType::Display);
                        break;

                    case tableName2id(tableStr(LedgerJournalTable)):
                        args.name(formStr(LedgerJournalTable));
                        break;

                    case tableName2id(tableStr(InventJournalTable)):
                        if (_tmpLedgerBase.Module == SysModule::Project)
                        {
                            args.name(formStr(InventJournalTable));
                            args.menuItemName(menuitemDisplayStr(InventJournalTableProject));
                            args.menuItemType(MenuItemType::Display);
                        }
                        break;
                    case tableName2id(tableStr(ProjAdvancedJournalLine)):
                        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                        {
                            args.name(formStr(projAdvancedJournalLine));
                            args.menuItemName(menuitemDisplayStr(ProjAdvancedJournalLine));
                            args.menuItemType(MenuItemType::Display);
                        }   
                        break;
                    default :
                        break;
                }
                break;

            case OriginalDocument::TaxReport:
                args.name(formStr(TaxReportVoucher));
                break;

            case OriginalDocument::ProjectTransaction:
                TSTimesheetTrans tsTimesheetTrans;
                TSTimesheetTable tsTimesheetTable;
                TSTimesheetLine tsTimesheetLine;
                TSTimesheetLineWeek tsTimesheetLineWeek;
                ProjEmplTrans projEmplTrans;
                ProjEmplTransCost projEmplTransCost;

                switch (_tmpLedgerBase.RecordTableId)
                {
                    case tableName2id(tableStr(ProjEmplTrans)):
                    case tableName2id(tableStr(ProjEmplTransCost)):
                        args.name(formStr(ProjTransEmpl));
                        if (common.TableId == tableNum(ProjEmplTransCost))
                        {
                            projEmplTransCost = common;
                            projEmplTrans = ProjEmplTrans::find(projEmplTransCost.TransId);
                        }
                        else
                        {
                            projEmplTrans = common;
                        }
                        if (projEmplTrans.TransactionOrigin == ProjOrigin::Timesheet)
                        {
                            select firstonly crossCompany tsTimesheetTable
                                join RecId from tsTimesheetLine
                                    where tsTimesheetLine.TimesheetNbr == tsTimesheetTable.TimesheetNbr
                                join RecId from tsTimesheetLineWeek
                                    where tsTimesheetLineWeek.tsTimesheetLine == tsTimesheetLine.RecId
                                join RecId from tsTimesheetTrans
                                    where tsTimesheetTrans.tsTimesheetLineWeek == tsTimesheetLineWeek.RecId
                                        && tsTimesheetTrans.TransId == projEmplTrans.TransIdRef;

                            changecompany(tsTimesheetTable.company())
                            {
                                args.record(tsTimesheetTable);
                                args.name(formStr(TSTimesheetEntry));
                                showOriginalForm = classfactory.formRunClass(args);
                                showOriginalForm.init();
                                showOriginalForm.run();
                                showOriginalForm.wait();
                                return;
                            }
                        }
                        break;

                    case tableName2id(tableStr(ProjCostTrans)):
                    case tableName2id(tableStr(ProjCostTransCost)):
                        args.name(formStr(ProjTransCost));
                        break;

                    case tableName2id(tableStr(ProjRevenueTrans)):
                    case tableName2id(tableStr(ProjRevenueTransSale)):
                        args.name(formStr(ProjTransRevenue));
                        break;

                    case tableName2id(tableStr(ProjJournalTrans)):
                        args.name(formStr(ProjJournalTable));
                        args.menuItemName(menuitemDisplayStr(ProjJournalTableEmpl));
                        args.menuItemType(MenuItemType::Display);
                        break;

                    case tableName2id(tableStr(TSTimesheetTrans)):

                        select firstonly crossCompany tsTimesheetTable
                            join RecId from tsTimesheetLine
                                where tsTimesheetLine.TimesheetNbr == tsTimesheetTable.TimesheetNbr
                            join RecId from tsTimesheetLineWeek
                                where tsTimesheetLineWeek.tsTimesheetLine == tsTimesheetLine.RecId
                            join RecId from tsTimesheetTrans
                                where tsTimesheetTrans.tsTimesheetLineWeek == tsTimesheetLineWeek.RecId
                                    && tsTimesheetTrans.RecId == common.RecId;

                        changecompany(tsTimesheetTable.company())
                        {
                            args.record(tsTimesheetTable);
                            args.name(formStr(TSTimesheetEntry));
                            showOriginalForm = classfactory.formRunClass(args);
                            showOriginalForm.init();
                            showOriginalForm.run();
                            showOriginalForm.wait();
                        }

                        break;
                }
                break;

            case OriginalDocument::ProjectInvoice:
                if (ProjFeatureStateHelper::isInvoiceFormsHeaderLineViewFeatureEnabled())
                {
                    args.name(formStr(ProjInvoiceJournalV2));
                }
                else
                {
                    args.name(formStr(ProjInvoiceJournal));
                }
                break;

            case OriginalDocument::CustBillOfExchange:
                args.name(formStr(CustBillOfExchangeJour));
                break;

            case OriginalDocument::VendPromissoryNote:
                args.name(formStr(VendPromissoryNoteJour));
                break;

            case OriginalDocument::CustInterestNote:
                args.name(formStr(CustInterestJournal));
                break;

            case OriginalDocument::CustCollectionLetter:
                args.name(formStr(CustCollectionLetterJournal));
                break;

            case OriginalDocument::Expense:
                args.name(formStr(TrvExpenses));
                break;

            case OriginalDocument::AdvancedLedgerEntry:
                args.name(formStr(AdvancedLedgerEntry));
                break;

            // <GEERU>
            case OriginalDocument::InventoryJournal_RU:
                args.name(formStr(InventJournalTable));
                break;

            case OriginalDocument::InventoryReport_RU:
                inventJournalReportTable = common;
                if (inventJournalReportTable.ReportTypeInvent == InventJournalReportType_RU::Transfer)
                {
                     args.name(formStr(InventReportJournalTable_Transfer_RU));
                     args.parmEnumType(enumNum(InventJournalReportType_RU));
                     args.parmEnum(inventJournalReportTable.ReportTypeInvent);
                }
                else
                {
                     args.name(formStr(InventReportJournalTable_RU));
                     args.parmEnumType(enumNum(InventJournalReportType_RU));
                     args.parmEnum(inventJournalReportTable.ReportTypeInvent);
                }
                break;

            case OriginalDocument::PrepaymentInvoice_RU:
                args.name(formStr(FactureJournal_RU));
                break;

            case OriginalDocument::RCashDoc:
                args.name(formStr(RCashTrans));
                break;

            case OriginalDocument::Employee_RU:
                args.name(formStr(EmplTrans_RU));
                break;

            case OriginalDocument::RAssetTrans:
                args.name(formStr(RAssetTrans));
                break;

            case OriginalDocument::CustomJournal_RU:
                args.name(formStr(CustomJournalTable_RU));
                break;

            case OriginalDocument::CustomCorrection_RU:
                args.name(formStr(CustomCorrectionTable_RU));
                break;
            // </GEERU>

            // <RUPAY>
            case OriginalDocument::RPaySheet:
                args.name(formstr(RPayCashSheet));
                break;

            case OriginalDocument::RPayDeposit:
                args.name(formstr(RPayDepositJournal));
                break;
            // </RUPAY>

            // <GBR>
            case OriginalDocument::SalesComplementaryInvoice:
                args.name(formStr(CustInvoiceJournal));
                break;
            // </GBR>

            default:
                break;
        }

        var eventHandlerResult = new EventHandlerResult();
        this.onShowCreatingArgs(_tmpLedgerBase, args, eventHandlerResult);

        if (!eventHandlerResult.hasResult())
        {
            showOriginalForm = classfactory.formRunClass(args);
            showOriginalForm.init();
            showOriginalForm.run();
            showOriginalForm.wait();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean success = false;
        Version version = RunBase::getVersion(_packedClass);
        container commonArgPacked;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, commonArgPacked] = _packedClass;
                commonArg = con2Buf(commonArgPacked);

                success = true;
                break;
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTrans_Caller_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>VendTrans</c> record argument.
    /// </summary>
    /// <param name="_vendTrans">
    /// The <c>VendTrans</c> record
    /// </param>
    /// <returns>
    /// The <c>VendTrans</c> record argument.
    /// </returns>
    public VendTrans vendTrans_Caller_RU(VendTrans _vendTrans = commonArg)
    {
        commonArg = _vendTrans;
        return commonArg as VendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the <c>Originaldocuments</c> class.
    /// </summary>
    /// <param name="_packedClass">
    /// A container containing a serialized <c>Originaldocuments</c> class.
    /// </param>
    /// <returns>
    /// A new instance of the <c>Originaldocuments</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The <c>Originaldocuments</c> class could not be instantiated.
    /// </exception>
    public static Originaldocuments create(container _packedClass)
    {
        Originaldocuments originalDocuments = Originaldocuments::construct(null, true);

        if (!originalDocuments.unpack(_packedClass))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return originalDocuments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the significant processing of the <c>OriginalDocuments</c> class.
    /// </summary>
    /// <param name="_packedClass">
    /// A container containing the original <c>OriginalDocuments</c> instance.
    /// </param>
    /// <returns>
    /// The <c>TmpLedgerBase</c> table containing the results.
    /// </returns>
    /// <remarks>
    /// This method is used to minimize the RPC impact.
    /// </remarks>
    private static TmpLedgerBase runOnServer(container _packedClass)
    {
        OriginalDocuments originalDocuments = OriginalDocuments::create(_packedClass);
        originalDocuments.findAllRelations();

        return originalDocuments.relations();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustomerTransactionDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// For the given <c>CustTrans</c> record buffer, insert the appropriate document(s) to be displayed on the original documents form.
    /// </summary>
    private void insertCustomerTransactionDocument(CustTrans _custTrans, CustName _custName)
    {
        CustInvoiceJour custInvoiceJour;
        SalesTable salesTable;
        boolean isCustomerTransactionInserted;

        while select InvoiceAccount, InvoiceAmount, InvoiceId, SalesId, RecId
            // <GBR>
            , RefNum
            // </GBR>
            from custInvoiceJour
            where custInvoiceJour.InvoiceAccount == _custTrans.AccountNum
                && custInvoiceJour.InvoiceDate == _custTrans.TransDate
                && custInvoiceJour.InvoiceId == _custTrans.Invoice
                && custInvoiceJour.LedgerVoucher == _custTrans.Voucher
            outer join CustAccount, SalesId, RecId from salesTable
                where salesTable.SalesId == custInvoiceJour.SalesId
        {
            if (custInvoiceJour.SalesId)
            {
                // Sales order invoice
                this.insertDocument(OriginalDocument::SalesInvoice,
                    custInvoiceJour.TableId,
                    custInvoiceJour.RecId,
                    SysModule::Cust,
                    custInvoiceJour.InvoiceAmount,
                    custInvoiceJour.InvoiceId,
                    custInvoiceJour.InvoiceAccount,
                    _custName);
  
                if (salesTable != null)
                {
                    this.insertDocument(OriginalDocument::Sales,
                        salesTable.TableId,
                        salesTable.RecId,
                        SysModule::Sales,
                        0,
                        salesTable.SalesId,
                        salesTable.CustAccount,
                        _custName);
                }
            }
            else
            {
                if (BrazilParameters::isEnabled() && custInvoiceJour.RefNum == RefNum::ComplementaryInvoice)
                {
                    this.insertDocument(OriginalDocument::SalesComplementaryInvoice,
                        custInvoiceJour.TableId,
                        custInvoiceJour.RecId,
                        SysModule::Cust,
                        custInvoiceJour.InvoiceAmount,
                        custInvoiceJour.InvoiceId,
                        custInvoiceJour.InvoiceAccount,
                        _custName);
                }
                else
                {
                    // Free text invoice
                    this.insertDocument(OriginalDocument::FreeTextInvoice,
                        custInvoiceJour.TableId,
                        custInvoiceJour.RecId,
                        SysModule::Cust,
                        custInvoiceJour.InvoiceAmount,
                        custInvoiceJour.InvoiceId,
                        custInvoiceJour.InvoiceAccount,
                        _custName);  
                }
               
            }
            isCustomerTransactionInserted = true;
        }
                  
        if (!isCustomerTransactionInserted)
        {
            while select InvoiceAccount, InvoiceAmount, InvoiceId, SalesId, RecId
                from custInvoiceJour
                where custInvoiceJour.InvoiceAccount == _custTrans.AccountNum
                    && custInvoiceJour.InvoiceDate <= _custTrans.TransDate
                    && custInvoiceJour.InvoiceId == _custTrans.Invoice
                    && custInvoiceJour.LedgerVoucher == _custTrans.LastSettleVoucher
                outer join CustAccount, SalesId, RecId from salesTable
                    where salesTable.SalesId == custInvoiceJour.SalesId
            {
                this.insertDocument(OriginalDocument::SalesInvoice,
                    custInvoiceJour.TableId,
                    custInvoiceJour.RecId,
                    SysModule::Cust,
                    custInvoiceJour.InvoiceAmount,
                    custInvoiceJour.InvoiceId,
                    custInvoiceJour.InvoiceAccount,
                    _custName);

                if (salesTable != null)
                {
                    this.insertDocument(OriginalDocument::Sales,
                        salesTable.TableId,
                        salesTable.RecId,
                        SysModule::Sales,
                        0,
                        salesTable.SalesId,
                        salesTable.CustAccount,
                        _custName);
                }
                  
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromBankAccountTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the <c>BankAccountTrans</c> table.
    /// </summary>
    private void findFromBankAccountTrans()
    {        
        BankAccountTrans bankAccountTrans_Caller;

        if (commonArg.TableId == tableNum(BankAccountTrans))
        {
            bankAccountTrans_Caller = commonArg as BankAccountTrans;
        }

        if (!bankAccountTrans_Caller)
        {
            return;
        }

        if (bankAccountTrans_Caller.SourceTableId == tableNum(LedgerJournalTrans))
        {
            this.insertBankAccountTransSourceLedgerJournalTrans(bankAccountTrans_Caller);
        }

        if (bankAccountTrans_Caller.SourceTableId == tableNum(BankChequeTable))
        {
            this.insertBankAccountTransSourceBankChequeTable(bankAccountTrans_Caller);
        }

        if (bankAccountTrans_Caller.DepositNum > '')
        {
            this.insertBankAccountTransSourceBankDeposit(bankAccountTrans_Caller);
        }

        if (bankAccountTrans_Caller.SummarizationId > '')
        {
            this.insertBankAccountTransSourceSummarization(bankAccountTrans_Caller);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankAccountTransSourceLedgerJournalTrans</Name>
				<Source><![CDATA[
    private void insertBankAccountTransSourceLedgerJournalTrans(BankAccountTrans _bankAccountTrans)
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;

        select firstonly RecId from ledgerJournalTrans
            where ledgerJournalTrans.RecId == _bankAccountTrans.SourceRecId
            join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum;

        if (ledgerJournalTable != null)
        {
           this.insertDocument(OriginalDocument::Journal,
               ledgerJournalTable.TableId,
               ledgerJournalTable.RecId,
               SysModule::Ledger,
               _bankAccountTrans.AmountMST,
               _bankAccountTrans.Voucher,
               _bankAccountTrans.Txt,
               '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankAccountTransSourceBankChequeTable</Name>
				<Source><![CDATA[
    private void insertBankAccountTransSourceBankChequeTable(BankAccountTrans _bankAccountTrans)
    {
        BankChequeTable bankChequeTable;

        select firstonly RecId from bankChequeTable
            where bankChequeTable.RecId == _bankAccountTrans.SourceRecId;

        if (bankChequeTable)
        {
           this.insertDocument(OriginalDocument::Cheque,
               bankChequeTable.TableId,
               bankChequeTable.RecId,
               SysModule::Bank,
               _bankAccountTrans.AmountMST,
               _bankAccountTrans.ChequeNum,
               _bankAccountTrans.AccountId,
               _bankAccountTrans.Voucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankAccountTransSourceBankDeposit</Name>
				<Source><![CDATA[
    private void insertBankAccountTransSourceBankDeposit(BankAccountTrans _bankAccountTrans)
    {
        BankDeposit bankDeposit;
        BankAccountTable bankAccountTable;

        select firstonly AccountId, DepositNum, RecId from bankDeposit
            where bankDeposit.Voucher  == _bankAccountTrans.Voucher
                && bankDeposit.TransDate  == _bankAccountTrans.TransDate
                && bankDeposit.DepositNum == _bankAccountTrans.DepositNum
            outer join Name from bankAccountTable
                where bankAccountTable.AccountID == _bankAccountTrans.AccountId;
            {
                this.insertDocument(OriginalDocument::BankDeposit,
                    bankDeposit.TableId,
                    bankDeposit.RecId,
                    SysModule::Bank,
                    _bankAccountTrans.AmountMST,
                    bankDeposit.DepositNum,
                    bankDeposit.AccountId,
                    bankAccountTable.Name);
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankAccountTransSourceSummarization</Name>
				<Source><![CDATA[
    private void insertBankAccountTransSourceSummarization(BankAccountTrans _bankAccountTrans)
    {
        BankTransSummarizationLine bankTransSummarizationLine;
        BankAccountTable bankAccountTable;

        select firstonly AccountId, SummarizationId, RecId from bankTransSummarizationLine
            where bankTransSummarizationLine.SummarizationId == _bankAccountTrans.SummarizationId
                && bankTransSummarizationLine.TransDate == _bankAccountTrans.TransDate
            outer join Name from bankAccountTable
                where bankAccountTable.AccountID == _bankAccountTrans.AccountId;
        {
            this.insertDocument(OriginalDocument::BankSummarization,
                _bankAccountTrans.TableId,
                _bankAccountTrans.RecId,
                SysModule::Bank,
                _bankAccountTrans.AmountMST,
                bankTransSummarizationLine.SummarizationId,
                bankTransSummarizationLine.AccountId,
                bankAccountTable.Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalDocumentFromLedgerTransType</Name>
				<Source><![CDATA[
    private OriginalDocument getOriginalDocumentFromLedgerTransType(LedgerTransType _ledgerTransType)
    {
        return _ledgerTransType == LedgerTransType::CustVendNetting ? OriginalDocument::CustVendNetting : OriginalDocument::Journal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>