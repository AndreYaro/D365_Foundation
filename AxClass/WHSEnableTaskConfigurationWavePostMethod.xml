<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSEnableTaskConfigurationWavePostMethod</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSEnableTaskConfigurationWavePostMethod</c> handles the enablement of the task configuration for different Post Wave method.
/// </summary>
internal class WHSEnableTaskConfigurationWavePostMethod
{
    #OCCRetryCount

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableTaskConfigurationForWarehouseAndWaveMethodIfNotEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record of the <c>WHSWavePostMethodTaskConfiguration</c> table for the passed parameters, if the warehouse does not already have the configuration for the passed Post Wave method.
    /// </summary>
    /// <param name="_methodName">
    /// The name of the Post Wave method.
    /// </param>
    /// <param name="_warehouseId">
    /// The warehouse to be configured.
    /// </param>
    /// <param name="_maximumBatchTasks">
    /// The maximum number of batch task to be used for this post wave method and this warehouse.
    /// </param>
    [Hookable(false)]
    internal static void enableTaskConfigurationForWarehouseAndWaveMethodIfNotEnabled(
        WHSPostMethodName       _methodName,
        InventLocationId        _warehouseId,
        WHSMaximumBatchTasks    _maximumBatchTasks)
    {
        ttsbegin;

        if (!WHSWavePostMethodTaskConfiguration::exists(_methodName, _warehouseId))
        {
            WHSWavePostMethodTaskConfiguration postMethodTaskConfig;
            postMethodTaskConfig.PostMethodName =  _methodName;
            postMethodTaskConfig.InventLocationId = _warehouseId;
            postMethodTaskConfig.MaximumBatchTasks = _maximumBatchTasks;

            postMethodTaskConfig.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableBatchWaveExecutionAndConfigureWaveLockWait</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures the Warehouse Management parameters for the current legal entity to run wave in batch and sets the lock wait to the default value if it was not already set.
    /// </summary>
    [Hookable(false)]
    internal static void enableBatchWaveExecutionAndConfigureWaveLockWait()
    {
        try
        {
            ttsbegin;

            WHSParameters parameters = WHSParameters::find(true);

            parameters.enableExecuteWaveInBatch();
            parameters.configureWaveLockWaitToDefaultValue();        

            parameters.update();       
                   
            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableWavePostMethodTaskConfigurationForAllWHSEnabledWarehouses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record of the <c>WHSWavePostMethodTaskConfiguration</c> table for the passed method name and maximum number of task for all the WHS enabled warehouses in the current legal entity that do not already have this wave method configured.
    /// </summary>
    /// <param name="_postMethodName">
    /// The name of the Post Wave method.
    /// </param>
    /// <param name="_maximumBatchTasks">
    /// The maximum number of batch task to be used for this post wave method and this warehouse.
    /// </param>
    [Hookable(false)]
    internal static void enableWavePostMethodTaskConfigurationForAllWHSEnabledWarehouses(WHSPostMethodName _postMethodName, WHSMaximumBatchTasks _maximumBatchTasks)
    {
        InventLocation inventLocation;

        WHSWavePostMethodTaskConfiguration wavePostMethodConfiguration;
        WHSWavePostMethodTaskConfiguration existingWavePostMethodConfiguration;

        insert_recordset wavePostMethodConfiguration
            (InventLocationId, postMethodName, maximumBatchTasks)
        select inventLocationId, _postMethodName, _maximumBatchTasks from inventLocation
            where inventLocation.WHSEnabled == NoYes::Yes
        notexists join existingWavePostMethodConfiguration
            where existingWavePostMethodConfiguration.InventLocationId  == inventLocation.InventLocationId
               && existingWavePostMethodConfiguration.PostMethodName    == _postMethodName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>