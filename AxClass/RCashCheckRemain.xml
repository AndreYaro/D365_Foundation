<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCashCheckRemain</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rCashCheckRemain extends RunBaseBatch implements BatchRetryable
{
    RCashTable      cashTable;
    ToDate          toDate;

    DialogField     dialogToDate;

    str             errorTxt;
    QueryRun        queryRun;
    container       lastValue;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        toDate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        if (cashTable)
        {
            this.batchInfo().parmBatchExecute(NoYes::No);
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReaminLimit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether remaining amount lies within the limits specified by <c>RCashRemainLimit</c>
    /// </summary>
    /// <param name = "_remain">Remaining amount</param>
    /// <param name = "_rCashRemainLimit">Type of limit</param>
    /// <param name = "_accountNum">Number of account that corresponds to the remaining amount</param>
    /// <returns>true if remaining amount lies within the limit; otherwise false</returns>
    protected boolean checkReaminLimit(Amount _remain, RCashRemainLimit _rCashRemainLimit, RCashAccount _accountNum)
    {
        boolean ret;

        switch (_rCashRemainLimit.RemainLimitType)
        {
            case RCashRemainLimitType::Min :
                ret = _remain >= _rCashRemainLimit.RemainAmount;
                errorTxt = strfmt("@GLS110739", _remain, _rCashRemainLimit.CurrencyCode, _rCashRemainLimit.RemainAmount, _accountNum);
                break;
            case RCashRemainLimitType::Max :
                ret = _remain <= _rCashRemainLimit.RemainAmount;
                errorTxt = strfmt("@GLS104482", _remain, _rCashRemainLimit.CurrencyCode, _rCashRemainLimit.RemainAmount, _accountNum);
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check(RCashTable     _cashTable,
                         CurrencyCode   _currencyCode = "",
                         AmountMST      _deltaMst     = 0.0,
                         AmountCur      _deltaCur     = 0.0,
                         boolean        _interactive  = true,
                         boolean        _payTrans     = false)
    {
        RCashBalanceMST     balanceMst;
        RCashBalanceCur     balanceCur;
        Amount              remain, controlRemain, balanceAmount, payAmount, delta;
        boolean             ok, ret = true;
        Query               query;
        RCashRemainLimit    rCashRemainLimit;
        Days                payTransLag = RCashParameters::find().PayTransLag;
        ErrorTolerance      errorTolerance;
        container           oldCurrency = connull();
        ;

        errorTxt    = "";
        setprefix(strfmt("@GLS110738", toDate));
        setprefix(strfmt("@GLS104785", _cashTable.AccountNum));

        while select rCashRemainLimit
            order by CurrencyType, CurrencyCode
            where rCashRemainLimit.AccountNum == _cashTable.AccountNum
        {
            if (oldCurrency != [rCashRemainLimit.CurrencyType, rCashRemainLimit.CurrencyCode])
            {
                switch (rCashRemainLimit.CurrencyType)
                {
                    case CurrencyTypeBrief_RU::Standard :
                        balanceMst = new RCashBalanceMST(toDate);
                        balanceMst.calc(_cashTable.AccountNum);
                        delta = _deltaMst;
                        if (_payTrans && delta > 0 && payTransLag > 0)
                        {
                            delta = 0.0;
                        }
                        balanceAmount = balanceMst.amountMST();
                        payAmount     = balanceMst.payAmountMST();
                        remain = balanceAmount - payAmount + delta;
                        break;

                    case CurrencyTypeBrief_RU::Currency :
                        if (_currencyCode && _currencyCode != rCashRemainLimit.CurrencyCode)
                        {
                            continue;
                        }
                        balanceCur = new RCashBalanceCur(toDate);
                        balanceCur.calc(_cashTable.AccountNum, rCashRemainLimit.CurrencyCode);
                        delta = _deltaCur;
                        balanceAmount = balanceCur.amountCur();
                        remain = balanceCur.amountCur() + delta;
                        break;
                }
                oldCurrency = [rCashRemainLimit.CurrencyType, rCashRemainLimit.CurrencyCode];
            }

            controlRemain  = rCashRemainLimit.RemainAmount;
            errorTolerance = _interactive ? ErrorTolerance::Error : rCashRemainLimit.MandatoryRemainLimit;

            setprefix(strfmt("@SYS76525", rCashRemainLimit.CurrencyType, rCashRemainLimit.CurrencyCode, rCashRemainLimit.RemainLimitType));

            ok = this.checkReaminLimit(remain, rCashRemainLimit, _cashTable.AccountNum);

            if (_interactive)
            {
                info(strfmt("@GLS106678", _cashTable.AccountNum, balanceAmount + delta, rCashRemainLimit.CurrencyCode));
                if (RCashRemainLimit.CurrencyType == CurrencyTypeBrief_RU::Standard)
                {
                    info(strfmt("@GLS106679", payAmount, CompanyInfoHelper::standardCurrency()));
                }
            }

            if (! ok)
            {
                query = new Query();
                query.addDataSource(tablenum(RCashTable)).addRange(fieldnum(RCashTable, AccountNum)).value(_cashTable.AccountNum);

                switch (errorTolerance)
                {
                    case ErrorTolerance::Accept :
                        ret = ret && true;
                        break;

                    case ErrorTolerance::Warning :
                        warning(errorTxt, "", SysInfoAction_FormrunQuery::newFormnameQuery(formstr(RCashBalance), query));
                        ret = ret && true;
                        break;

                    case ErrorTolerance::Error :
                        error(errorTxt, "", SysInfoAction_FormrunQuery::newFormnameQuery(formstr(RCashBalance), query));
                        ret = false;
                        break;
                }
            }
            else if (_interactive)
            {
                info(strfmt("@GLS104483", remain, rCashRemainLimit.CurrencyCode, _cashTable.AccountNum));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        ;

        dialogToDate = dialog.addFieldValue(extendedtypestr(ToDate), toDate, "@GLS116844");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorTxt</Name>
				<Source><![CDATA[
    public str errorTxt()
    {
        return errorTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        ;

        ret = super();
        if (ret)
        {
            toDate = dialogToDate.value();
        }
        if (! toDate)
        {
            ret = checkFailed("@SYS24455");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        Query                query;
        QueryBuildDataSource qbds;
        ;

        query = new Query("@GLS104420");

        qbds  = query.addDataSource(tablenum(RCashTable));
        qbds.addRange(fieldnum(RCashTable, AccountNum)).value(cashTable.AccountNum);

        queryRun = new QueryRun(query);

        toDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return lastValue ? lastValue : [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCashTable</Name>
				<Source><![CDATA[
    public RCashTable parmCashTable(RCashTable _cashTable = cashTable)
    {
        cashTable = _cashTable;
        return cashTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        ;
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun(QueryRun _queryRun = queryRun)
    {
        ;

        queryRun = _queryRun;

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RCashTable cashTableLocal;
        ;

        while (queryRun.next())
        {
            cashTableLocal = queryRun.get(tablenum(RCashTable));
            this.check(cashTableLocal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return cashTable ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = conpeek(_packedClass, 1);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                if (cashTable)
                {
                    lastValue = _packedClass;
                    return false;
                }

                [version, #CurrentList, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super();

        if (! toDate)
        {
            ret = ret && checkFailed("@SYS24455");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS104420";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RCashCheckRemain checkRemain = new RCashCheckRemain();
        ;

        if (_args && _args.dataset() == tablenum(RCashTable))
        {
            checkRemain.parmCashTable(_args.record());
        }

        if (checkRemain.prompt())
        {
            checkRemain.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>