<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkTypeHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
#WhsRf
#WHSWorkExecuteDisplayCases

/// <summary>
/// The <c>WhsWorkTypeHandler</c> class is the base class for type specific handling of work.
/// </summary>
abstract class WhsWorkTypeHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findWorkCreateLocationQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the work create location quantity result.
    /// </summary>
    /// <param name = "_parameters">Parameters for finding the result.</param>
    /// <returns>The result.</returns>
    public WhsWorkCreateLocationQtyResult findWorkCreateLocationQty(WhsWorkCreateLocationQtyParameters _parameters)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the step from parameters.
    /// </summary>
    /// <param name="_context">
    /// Parameters for determining the step and returning the new form state.
    /// </param>
    abstract public void determineStep(WhsWorkStepContext _context)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a work line.
    /// </summary>
    /// <param name = "_workExecute">The class performing the actual execution.</param>
    /// <param name = "_workLine">The work line to execute.</param>
    /// <param name = "_userId">The user performing the execution.</param>
    /// <returns>The executed work line.</returns>
    abstract public WHSWorkLine executeWorkLine(WhsWorkExecute _workExecute, WHSWorkLine _workLine, WHSUserId _userId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidForWorkTemplateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates this work type is valid for a work template line.
    /// </summary>
    /// <param name = "_workTemplateLine">The work template line to validate.</param>
    /// <returns>true if valid; otherwise, false.</returns>
    public boolean isValidForWorkTemplateLine(WHSWorkTemplateLine _workTemplateLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>singletonFromType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a singleton instance of <c>WhsWorkTypeHandler</c> class from a work type.
    /// </summary>
    /// <param name = "_workType">The work type.</param>
    /// <returns>A singleton instance.</returns>
    static public WhsWorkTypeHandler singletonFromType(WHSWorkType _workType)
    {
        WhsWorkTypeFactoryAttribute attr = new WhsWorkTypeFactoryAttribute(_workType);
        WhsWorkTypeHandler handler = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WhsWorkTypeHandler), attr);

        return handler;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>