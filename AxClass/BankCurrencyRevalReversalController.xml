<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalReversalController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalReversalController</c> class is the controller class for the bank - foreign currency revaluation reversal process.
/// </summary>
internal final class BankCurrencyRevalReversalController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {   
        try
        {
            if (!args.record() && !(args.record() is BankCurrencyRevalHistory))
            {
                throw error(Error::wrongUseOfFunction(classStr(BankCurrencyRevalReversalController)));
            }

            BankCurrencyRevalHistory bankCurrencyRevalHistory = args.record() as BankCurrencyRevalHistory;

            IdentifierName className;
            IdentifierName methodName;
            SysOperationExecutionMode executionMode;

            [className, methodName, executionMode] = SysOperationServiceController::parseServiceInfo(args);
            BankCurrencyRevalReversalController controller = new BankCurrencyRevalReversalController(className, methodName, executionMode);

            BankCurrencyRevalReversalContract bankCurrencyRevalReversal =
                controller.getDataContractObject(classStr(BankCurrencyRevalReversalContract)) as BankCurrencyRevalReversalContract;

            bankCurrencyRevalReversal.parmBankCurrencyRevalHistoryRecId(bankCurrencyRevalHistory.RecId);

            if (controller.prompt())
            {
                controller.runOperation();
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    protected ClassDescription defaultCaption()
    {
        return "@CashManagement:BankCurrencyRevalReversal";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>