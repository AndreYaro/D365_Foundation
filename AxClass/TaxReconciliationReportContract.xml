<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReconciliationReportContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReconciliationReportContract</c> class is the Data Contract class for the
///    <c>TaxReconciliationReport</c> SSRS report.
/// </summary>
/// <remarks>
///    This is the Data Contract class for the <c>TaxReconciliationReport</c> SSRS Report.
/// </remarks>
[
    DataContract,
    SysOperationContractProcessing(classstr(TaxReconciliationReportUIBuilder), SysOperationDataContractProcessingMode::CreateSeparateUIBuilderForEachContract)
]
public class TaxReconciliationReportContract implements SysOperationValidatable
{
    LedgerAccount                       fromAccount;
    LedgerAccount                       toAccount;
    TaxPeriod                           taxPeriod;
    TaxPeriodDate                       fromDate;
    TaxPeriodDate                       toDate;
    boolean                             details;
    boolean                             splitTaxCode;
    boolean                             groupTaxCode;
    boolean                             printWithoutTax;
    boolean                             transVAT;
    TaxReconciliationReportCountry      reportForCountry;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Details.
    /// </summary>
    /// <param name="_details">
    /// The new value of the datacontract parameter Details; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Details
    /// </returns>
    [
        DataMember('Details')
    ]
    public boolean parmDetails(boolean _details = details)
    {
        details = _details;
        return details;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FromAccount.
    /// </summary>
    /// <param name="_fromAccount">
    /// The new value of the datacontract parameter FromAccount; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter FromAccount
    /// </returns>
    [
        DataMember('FromAccount')
    ]
    public LedgerAccount parmFromAccount(LedgerAccount _fromAccount = fromAccount)
    {
        fromAccount = _fromAccount;
        return fromAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter FromDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter FromDate
    /// </returns>
    [
        DataMember('FromDate')
    ]
    public TaxPeriodDate parmFromDate(TaxPeriodDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter GroupTaxCode.
    /// </summary>
    /// <param name="_groupTaxCode">
    /// The new value of the datacontract parameter GroupTaxCode; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter GroupTaxCode
    /// </returns>
    [
        DataMember('GroupTaxCode')
    ]
    public boolean parmGroupTaxCode(boolean _groupTaxCode = groupTaxCode)
    {
        groupTaxCode = _groupTaxCode;
        return groupTaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintWithoutTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter PrintWithoutTax.
    /// </summary>
    /// <param name="_printWithoutTax">
    /// The new value of the datacontract parameter PrintWithoutTax; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter PrintWithoutTax
    /// </returns>
    [
        DataMember('PrintWithoutTax')
    ]
    public boolean parmPrintWithoutTax(boolean _printWithoutTax = printWithoutTax)
    {
        printWithoutTax = _printWithoutTax;
        return printWithoutTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportForCountry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ReportForCountry.
    /// </summary>
    /// <param name="_reportForCountry">
    /// The new value of the datacontract parameter ReportForCountry; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ReportForCountry
    /// </returns>
    [DataMember('ReportForCountry')]
    public TaxReconciliationReportCountry parmReportForCountry(TaxReconciliationReportCountry _reportForCountry = reportForCountry)
    {
        reportForCountry = _reportForCountry;
        return reportForCountry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter SplitTaxCode.
    /// </summary>
    /// <param name="_splitTaxCode">
    /// The new value of the datacontract parameter SplitTaxCode; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter SplitTaxCode
    /// </returns>
    [
        DataMember('SplitTaxCode')
    ]
    public boolean parmSplitTaxCode(boolean _splitTaxCode = splitTaxCode)
    {
        splitTaxCode = _splitTaxCode;
        return splitTaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter TaxPeriod.
    /// </summary>
    /// <param name="_taxPeriod">
    /// The new value of the datacontract parameter TaxPeriod; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter TaxPeriod
    /// </returns>
    [
        DataMember('TaxPeriod')
    ]
    public TaxPeriod parmTaxPeriod(TaxPeriod _taxPeriod = taxPeriod)
    {
        taxPeriod = _taxPeriod;
        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ToAccount.
    /// </summary>
    /// <param name="_toAccount">
    /// The new value of the datacontract parameter ToAccount; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ToAccount
    /// </returns>
    [
        DataMember('ToAccount')
    ]
    public LedgerAccount parmToAccount(LedgerAccount _toAccount = toAccount)
    {
        toAccount = _toAccount;
        return toAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ToDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter ToDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ToDate
    /// </returns>
    [
        DataMember('ToDate')
    ]
    public TaxPeriodDate parmToDate(TaxPeriodDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter TransVAT.
    /// </summary>
    /// <param name="_transVAT">
    /// The new value of the datacontract parameter TransVAT; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter TransVAT
    /// </returns>
    [
        DataMember('TransVAT')
    ]
    public boolean parmTransVAT(boolean _transVAT = transVAT)
    {
        transVAT = _transVAT;
        return transVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the dialog values for errors. The dialog values are handled through the contract.
    /// </summary>
    /// <returns>
    ///    true if an error has occurred in the dialog values; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;

        if (!taxPeriod)
        {
            ret = checkFailed(strfmt("@SYS84753", "@SYS60050"));
        }
        else
        {
            if (TaxPeriodHead::exist(taxPeriod))
            {
                if (fromDate && !TaxReportPeriod::dateIsInPeriod(taxPeriod, fromDate))
                {
                    ret = checkFailed(strfmt("@SYS100505", date2StrUsr(fromDate, DateFlags::FormatAll), taxPeriod));
                }

                if (toDate && !TaxReportPeriod::dateIsInPeriod(taxPeriod, toDate))
                {
                    ret = checkFailed(strfmt("@SYS100505", date2StrUsr(toDate, DateFlags::FormatAll), taxPeriod));
                }
            }
            else
            {
                ret = checkFailed(strfmt("@SYS27783", taxPeriod));
            }
        }

        if (fromDate && toDate && fromDate > toDate)
        {
            ret = checkFailed("@SYS120590");
        }

        if (!fromDate)
        {
            ret = checkFailed(strfmt("@SYS84753", "@SYS24050"));
        }

        if (!toDate)
        {
            ret = checkFailed(strfmt("@SYS84753", "@SYS14656"));
        }

        if (!splitTaxCode && groupTaxCode)
        {
            ret = checkFailed("@Tax_ReconciliationReport_W:IncompatibleParametersCombination");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>