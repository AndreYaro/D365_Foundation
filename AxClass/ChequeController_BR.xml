<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ChequeController_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ChequeController_BR</c> class shows the Cheque_BR SSRS report.
/// </summary>
class ChequeController_BR extends SrsPrintMgmtFormLetterController implements BatchRetryable
{
    BankChequePrint             bankChequePrint;
    PrintCopyOriginal           printCopyOriginal;
    SrsCatalogItemName          chequeReport;
    TmpChequePrintout           tmpChequePrintout;

    #define.reportBR('Cheque_BR.Report')
    #define.InvalidCheque('Invalid cheque type.')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getChequeReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the initialize method and returns a cheque report type.
    /// </summary>
    /// <returns>
    ///    A cheque report type.
    /// </returns>
    public SrsCatalogItemName getChequeReport()
    {
        return chequeReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultSRSPrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default print settings for the cheque report.
    /// </summary>
    /// <returns>
    /// An instance of <c>SRSPrintDestinationSettings</c> class with the default settings.
    /// </returns>
    protected SRSPrintDestinationSettings getDefaultSRSPrintDestinationSettings()
    {
        SRSPrintDestinationSettings printSettings = new SRSPrintDestinationSettings();

        printSettings.fromPage(1);
        printSettings.toPage(99999999);
        printSettings.printMediumType(SRSPrintMediumType::Printer);
        printSettings.orientation(SRSReportPrintOrientation::Portrait);

        return printSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    protected void initFormLetterReport()
    {
        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::BankCheque);

        formLetterReport.parmUsePrintMgmtDestinations(bankChequePrint.parmUsePrintManagement_BR());
        formLetterReport.parmDefaultCopyPrintJobSettings(this.getDefaultSRSPrintDestinationSettings());
        formLetterReport.parmDefaultOriginalPrintJobSettings(this.getDefaultSRSPrintDestinationSettings());
        formLetterReport.parmPrintType(printCopyOriginal);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ChequeController_BR</c>.
    /// </summary>
    public void initialize()
    {
        BankChequeLayout        bankChequeLayout_BR;
        CustomChequeLayout_BR   customChequeLayout_BR;
        NoYes                   chequeCopy;
        Object                  caller;

        chequeCopy  = args.parmEnum();
        caller      = args.caller();

        printCopyOriginal = chequeCopy ? PrintCopyOriginal::Copy : PrintCopyOriginal::OriginalPrint;

        switch (classidget(caller))
        {
            case classNum(BankChequePrint) :
                bankChequePrint = caller;
                break;

            case classNum(BankPrintTestCheque) :
                bankChequePrint = args.object();

                printCopyOriginal = PrintCopyOriginal::Copy;
                break;
        }

        tmpChequePrintout = bankChequePrint.parmTmpChequePrintout();

        switch (tmpChequePrintout.ChequeFormType)
        {
            case ChequeFormType::BRStyle:
                bankChequeLayout_BR = BankChequeLayout::find(tmpChequePrintout.AccountId);
                chequeReport = #reportBR;

                if (bankChequeLayout_BR.CustomChequeLayout_BR)
                {
                    customChequeLayout_BR = CustomChequeLayout_BR::find(bankChequeLayout_BR.CustomChequeLayout_BR);

                    if (customChequeLayout_BR)
                    {
                        chequeReport = customChequeLayout_BR.ReportName;
                    }
                }
                break;
            default:
                throw error(#InvalidCheque);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        SrsTmpTblMarshallerContract contract = this.parmReportContract().parmRdpContract() as SrsTmpTblMarshallerContract;

        // get the Temp table, and marshall it across to SSRS
        new SRSReportRunPermission().assert();
        contract.parmTmpTableDataRecId(SRSTmpTblMarshaller::SendTmpTblToDataProvider(tmpChequePrintout));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method runs the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        PrintMgmtPrintSettingDetail     printSettingDetail;
        LanguageId                      languageId;

        if (conFind(LanguageTable::installedLanguages(), 'pt-br') > 0)
        {
            languageId  = 'pt-br';
        }
        else
        {
            languageId  = CompanyInfo::languageId();
        }

        formLetterReport.loadPrintSettings(
            BankChequeTable::find(tmpChequePrintout.AccountId, tmpChequePrintout.ChequeNum),
            BankAccountTable::find(tmpChequePrintout.AccountId),
            languageId);

        while (formLetterReport.moveNextPrintSetting())
        {
            printSettingDetail = formLetterReport.getCurrentPrintSetting();

            printSettingDetail.parmReportFormatName(chequeReport);

            formLetterReport.parmReportRun().loadSettingDetail(printSettingDetail);

            this.outputReports();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00063, funcName());

        ChequeController_BR controller = new ChequeController_BR();

        controller.parmArgs(_args);

        controller.initialize();

        controller.parmReportName(controller.getChequeReport());
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>