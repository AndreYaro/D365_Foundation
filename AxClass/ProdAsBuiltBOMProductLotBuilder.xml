<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdAsBuiltBOMProductLotBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class ProdAsBuiltBOMProductLotBuilder
{
    protected ProdAsBuiltBOMFormulaProducts productLot;
    protected ProdAsBuiltBOMProductContext  productContext;
    private InventQty                       associatedInventGoodErrorQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setProductContext</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotBuilder setProductContext(ItemId _itemId)
    {
        if (!productContext)
        {
            productContext = ProdAsBuiltBOMProductContext::construct(_itemId);
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductContext</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductContext getProductContext()
    {
        return productContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductLot</Name>
				<Source><![CDATA[
    protected ProdAsBuiltBOMProductLotBuilder setProductLot(ProdAsBuiltBOMFormulaProducts _productLot)
    {
        productLot = _productLot;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productLot</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMFormulaProducts productLot()
    {
        return productLot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumProductInventGoodErrorQty</Name>
				<Source><![CDATA[
    internal InventQty sumProductInventGoodErrorQty(boolean _rereadProductLotAssociations = false)
    {
        if (_rereadProductLotAssociations)
        {
            ProdAsBuiltBOMProductLotAssociation productAssociation;
            select sum(QtyGood), sum(QtyError)
                from productAssociation
                where productAssociation.ReferenceId   == productLot.ProdId
                   && productAssociation.InventTransId == productLot.InventTransId
                   && productAssociation.ItemId        == productLot.ItemId;

            associatedInventGoodErrorQty = productAssociation.QtyGood + productAssociation.QtyError;
        }

        return associatedInventGoodErrorQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMProductLotBuilder construct()
    {
        return new ProdAsBuiltBOMProductLotBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBuilder</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMProductLotBuilder createBuilder(ProdAsBuiltBOMFormulaProducts _productLot)
    {
        return ProdAsBuiltBOMProductLotBuilder::construct()
                        .setProductContext(_productLot.ItemId)
                        .setProductLot(_productLot);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>