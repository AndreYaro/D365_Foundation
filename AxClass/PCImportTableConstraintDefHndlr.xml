<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCImportTableConstraintDefHndlr</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class PCImportTableConstraintDefHndlr extends PCImportModelNodeHandler
{
    Map                                 deletedColumnsUsedInColumnCategoryAttribute;
    RefRecId                            deletedTableConstraintDefinitionRecId;
    Map                                 columnNameToRecId;
    List                                importedTableConstraintColumns;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>columnNameToRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the mapping of the column names to their IDs.
    /// </summary>
    /// <returns>
    /// A map from string to int64.
    /// </returns>
    public Map columnNameToRecId()
    {
        return columnNameToRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renames the old version with the same name, performs specific initialization and inserts the record.
    /// </summary>
    protected void importData()
    {
        deletedColumnsUsedInColumnCategoryAttribute = new Map(Types::String, Types::Int64);
        columnNameToRecId                           = new Map(Types::String, Types::Int64);
        importedTableConstraintColumns              = new List(Types::Container);

        this.copyField(fieldStr(PCTableConstraintDefinition, Name));
        this.copyField(fieldStr(PCTableConstraintDefinition, Description));

        this.prepareForTableConstraintDefImport();
        this.performCustomInitializtion();

        this.record().insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>importedTableConstraintColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list of all imported columns for the childrent to add.
    /// </summary>
    /// <returns>
    /// A list of two element containers.
    /// </returns>
    public List importedTableConstraintColumns()
    {
        return importedTableConstraintColumns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performCustomInitializtion</Name>
				<Source><![CDATA[
    protected void performCustomInitializtion() {}

]]></Source>
			</Method>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates references to the old version with the same name and then adds the new one to the root collections.
    /// </summary>
    protected void postProcess()
    {
        PCImportXmlDocumentHandler root = this.root();

        this.updateTableConstraintDefinitionRefs();

        root.importedTableConstraintDefinitions().insert(this.tableConstraintDefinition().Name, this.tableConstraintDefinition().RecId);
        root.importedTableConstraintColumns().insert(this.tableConstraintDefinition().RecId, columnNameToRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareForTableConstraintDefImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares data for import of a table constraint definition.
    /// </summary>
    private void prepareForTableConstraintDefImport()
    {
        PCTableConstraintDefinition                 tableConstraintDefinition;
        PCTableConstraintColumnDefinition           columnDefinition;
        PCTableConstraintColumnCategoryAttribute    constraintRelation;

        tableConstraintDefinition               = PCTableConstraintDefinition::findByName(this.tableConstraintDefinition().Name, true);
        deletedTableConstraintDefinitionRecId   = tableConstraintDefinition.RecId;

        while select columnDefinition
            where columnDefinition.TableConstraintDefinition == tableConstraintDefinition.RecId
            exists join constraintRelation
               where constraintRelation.TableConstraintColumnDefinition == columnDefinition.RecId
        {
            deletedColumnsUsedInColumnCategoryAttribute.insert(columnDefinition.Name, columnDefinition.RecId);
        }

        // Rename table constraint to allow import of new one. It will be deleted afterwards.
        tableConstraintDefinition.Name          = guid2str(newGuid());
        tableConstraintDefinition.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableConstraintDefinition</Name>
				<Source><![CDATA[
    private PCTableConstraintDefinition tableConstraintDefinition()
    {
        return this.record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTableConstraintDefinitionRefs</Name>
				<Source><![CDATA[
    private void updateTableConstraintDefinitionRefs()
    {
        MapEnumerator                               me;
        RefRecId                                    newColumnDefinitionRecId;
        PCTableConstraintColumnCategoryAttribute    constraintRelation;
        PCTableConstraint                           tableConstraint;
        PCTableConstraintDefinition                 tableConstraintDefinition;

        if (deletedTableConstraintDefinitionRecId != 0)
        {
            update_recordset tableConstraint
                setting TableConstraintDefintion = this.recordRecId()
                where tableConstraint.TableConstraintDefintion == deletedTableConstraintDefinitionRecId;

            me = deletedColumnsUsedInColumnCategoryAttribute.getEnumerator();
            while (me.moveNext())
            {
                // If a new column is imported then move reference. Otherwise old reference will be deleted afterwards.
                if (columnNameToRecId.exists(me.currentKey()))
                {
                    newColumnDefinitionRecId = columnNameToRecId.lookup(me.currentKey());

                    update_recordset constraintRelation
                        setting TableConstraintColumnDefinition = newColumnDefinitionRecId
                        where constraintRelation.TableConstraintColumnDefinition == me.currentValue();
                }
            }

            // Cascade delete column definitions, which cascade deletes constraint relations if they have not been changed above.
            delete_from tableConstraintDefinition
                where tableConstraintDefinition.RecId == deletedTableConstraintDefinitionRecId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>