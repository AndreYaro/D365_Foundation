<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLocationDirectiveStrategyGuidedLPLocate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLocationDirectiveStrategyGuidedLPLocate</c> class implements the License place guided strategy.
/// </summary>
[WhsLocationDirectiveStrategyFactory(WhsLocDirStrategy::GuidedLPLocate)]
class WhsLocationDirectiveStrategyGuidedLPLocate extends WhsLocationDirectiveStrategy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(
        WHSLocDirTable  _locDirTable,
        WHSLocDirLine   _locDirLine,
        WHSLocDirAction _locDirAction)
    {
        boolean ret = true;

        if (_locDirTable.WorkTransType != WHSWorkTransType::TransferIssue)
        {
            ret = checkFailed(strFmt("@WAX5583", _locDirAction.LocDirStrategy, _locDirTable.WorkTransType));
        }

        if (_locDirTable.WorkType != WHSWorkType::Pick)
        {
            ret = checkFailed(strFmt("@WAX4602", _locDirAction.LocDirStrategy, _locDirTable.WorkType));
        }

        if (!_locDirLine.AllowSplit)
        {
            ret = checkFailed(strFmt("@SYP4986028", _locDirAction.LocDirStrategy));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reliesOnDimensionsBelowLocation</Name>
				<Source><![CDATA[
    public boolean reliesOnDimensionsBelowLocation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckNonLPLocation</Name>
				<Source><![CDATA[
    public boolean mustCheckNonLPLocation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionsRequiredToChange</Name>
				<Source><![CDATA[
    public Set dimensionsRequiredToChange()
    {
        Set result = super();
        result.add(fieldStr(InventDim, LicensePlateId));
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPickLocDirActionQuery</Name>
				<Source><![CDATA[
    public boolean modifyPickLocDirActionQuery(WhsLocationDirectiveActionQuery _actionQuery, Query _query)
    {
        List guidedLicensePlates = _actionQuery.parmGuidedLicensePlates();
        if (!guidedLicensePlates)
        {
            return true;
        }

        if (WHSLocDirAction::useInventoryDimensionOfInventSum())
        {
            var inventDimDS = _query.dataSourceTable(tableNum(InventDim));
            var inventSumDS = _query.dataSourceTable(tableNum(InventSum));
            ListEnumerator enumerator = guidedLicensePlates.getEnumerator();
            while (enumerator.moveNext())
            {
                QueryBuildRange qbr;

                if (inventDimDS)
                {
                    qbr = inventDimDS.addRange(fieldNum(InventDim, LicensePlateId));
                }
                else if (inventSumDS)
                {
                    qbr = inventSumDS.addRange(fieldNum(InventSum, LicensePlateId));
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                qbr.value(queryValue(enumerator.current()));
            }
        }
        else
        {
            var inventDimDS = _query.dataSourceTable(tableNum(InventDim));
            ListEnumerator enumerator = guidedLicensePlates.getEnumerator();
            while (enumerator.moveNext())
            {
                QueryBuildRange qbr = inventDimDS.addRange(fieldNum(InventDim, LicensePlateId));
                qbr.value(queryValue(enumerator.current()));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performStrategy</Name>
				<Source><![CDATA[
    public boolean performStrategy(
        WhsLocationDirective _locationDirective, 
        WhsLocationDirectiveStrategyParameters _parameters)
    {
        boolean             strategyResult;

        if (_parameters.WorkType == WHSWorkType::Pick)
        {
            Qty lpQtyAvail = WhsLocationDirectiveStrategyLPLocate::getLPAvailableQtyNotInWork(
                _parameters.WorkType,
                _parameters.ItemId,
                _parameters.InventUOM,
                _parameters.Location,
                WhsLocationDirectiveStrategyLPLocate::getInventDimWithLP(_parameters.InventDim, _parameters.CurrentLPId),
                _parameters.InventDim,
                _parameters.CurrentLPId);

            strategyResult = true;
            _locationDirective.parmAvailQty(lpQtyAvail);

            // Set the located LP parameters so it can be set on the tmpWorkLine
            _locationDirective.parmLocatedLP(_parameters.CurrentLPId);
        }

        return strategyResult;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>