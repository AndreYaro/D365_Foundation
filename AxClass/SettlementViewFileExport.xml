<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementViewFileExport</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementViewFileExport</c> class manages the export of a settlement view to external file.
/// </summary>
public class SettlementViewFileExport extends SettlementViewFileExportBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>writeView</Name>
				<Source><![CDATA[
    public void writeView(System.IO.StreamWriter _streamWriter, Common _common)
    {
        SettlementView settlementView;

        if (_common is SettlementView)
        {
            settlementView.linkPhysicalTableInstance(_common);
        }

        this.writeHeader(_streamWriter);

        while select settlementView
        {
            this.writeLine(_streamWriter, settlementView);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeHeader</Name>
				<Source><![CDATA[
    private void writeHeader(System.IO.StreamWriter _streamWriter)
    {
        System.String headerLine = fieldPName(SettlementView, Voucher) + columnDelimiterString
            + fieldPName(SettlementView, DocumentAmount)               + columnDelimiterString
            + fieldPName(SettlementView, SettleDate)                   + columnDelimiterString
            + fieldPName(SettlementView, SettleAmountCur)              + columnDelimiterString
            + fieldPName(SettlementView, SettleAmountMST)              + columnDelimiterString
            + fieldPName(SettlementView, CurrencyCode)                 + columnDelimiterString
            + fieldPName(SettlementView, TransactionType)              + columnDelimiterString
            + fieldPName(SettlementView, PaymReference)                + columnDelimiterString
            + fieldPName(SettlementView, Invoice);

        _streamWriter.WriteLine(headerLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLine</Name>
				<Source><![CDATA[
    private void writeLine(System.IO.StreamWriter _streamWriter, SettlementView _settlementView)
    {
        System.String line;

        str settleDateStr = this.transDateToString(_settlementView.SettleDate);

        line += this.qualifyText(_settlementView.Voucher)                 + columnDelimiterString
            + this.amountCurToString(_settlementView.DocumentAmount)      + columnDelimiterString
            + this.qualifyText(settleDateStr)                             + columnDelimiterString
            + this.amountCurToString(_settlementView.SettleAmountCur)     + columnDelimiterString
            + this.amountCurToString(_settlementView.SettleAmountMST)     + columnDelimiterString
            + this.qualifyText(_settlementView.CurrencyCode)              + columnDelimiterString
            + this.qualifyText(enum2Str(_settlementView.TransactionType)) + columnDelimiterString
            + this.qualifyText(_settlementView.PaymReference)             + columnDelimiterString
            + this.qualifyText(_settlementView.Invoice);

        _streamWriter.WriteLine(line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports a file containing the settlement view data.
    /// </summary>
    /// <param name = "_args">The arguments for processing.</param>
    public static void main(Args _args)
    {
        SettlementView settlementView;

        if (_args.record())
        {
            settlementView = _args.record() as SettlementView;
        }

        if (settlementView)
        {
            SettlementViewFileExport viewFileExport = new SettlementViewFileExport();
            viewFileExport.exportSettlementViewToCSV(settlementView);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>