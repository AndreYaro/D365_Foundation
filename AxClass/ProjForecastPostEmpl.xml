<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastPostEmpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjForecastPostEmpl extends ProjForecastPost
{
    ProjForecastEmpl      projForecastEmpl;

    boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCreditCost</Name>
				<Source><![CDATA[
    protected boolean checkCreditCost()
    {
        if (projTable.Type == ProjType::Investment || enableProjMultipleContractLinesForProjectFeature)
        {
            if (this.forecastUpdateType() == ProjForecastUpdateType::Elimination)
            {
                if (this.ledgerStatusCost() == ProjLedgerStatus::BalanceSheet) // reverse
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDebitCost</Name>
				<Source><![CDATA[
    protected boolean checkDebitCost()
    {
        if (projTable.Type == ProjType::Investment || enableProjMultipleContractLinesForProjectFeature)
        {
            if (this.forecastUpdateType() == ProjForecastUpdateType::Elimination)
            {
                if (this.ledgerStatusCost() != ProjLedgerStatus::BalanceSheet) // not reverse
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterCost</Name>
				<Source><![CDATA[
    protected boolean checkEnterCost()
    {
        boolean ret = super();

        if (ret)
        {
            if (projTrans.qty() == 0)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterNeverLedger</Name>
				<Source><![CDATA[
    protected boolean checkEnterNeverLedger()
    {
        if (this.forecastUpdateType() == ProjForecastUpdateType::Journals)
        {
            if (this.ledgerStatusCost() == ProjLedgerStatus::Never)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType costPostingType()
    {
        LedgerPostingType ledgerPostingType;

        switch (this.forecastUpdateType())
        {
            case ProjForecastUpdateType::Journals:
                switch (this.ledgerStatusCost())
                {
                    case ProjLedgerStatus::BalanceSheet:
                    case ProjLedgerStatus::Operations:
                        ledgerPostingType = LedgerPostingType::ProjCost;
                        break;
                }
                break;
            case ProjForecastUpdateType::Invoice:
                switch (this.ledgerStatusCost())
                {
                    case ProjLedgerStatus::None:
                        ledgerPostingType = LedgerPostingType::ProjCost;
                        break;

                    case ProjLedgerStatus::BalanceSheet:
                        if (projTrans.projLineProperty().ToBeCapitalize)
                        {
                            ledgerPostingType = LedgerPostingType::ProjCost;
                        }
                        else
                        {
                            ledgerPostingType = LedgerPostingType::ProjWIPCostvalue;
                        }
                        break;

                    case ProjLedgerStatus::Operations:
                        ledgerPostingType = LedgerPostingType::ProjWIPCostvalue;
                        break;
                }
                break;
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPostingTypeOffset</Name>
				<Source><![CDATA[
    public LedgerPostingType costPostingTypeOffset()
    {
        LedgerPostingType ledgerPostingType;

        switch (this.forecastUpdateType())
        {
            case ProjForecastUpdateType::Journals:
                ledgerPostingType = LedgerPostingType::ProjPayrollAllocation;
                break;

            case ProjForecastUpdateType::Invoice:
                switch (this.ledgerStatusCost())
                {
                    case ProjLedgerStatus::None:
                        ledgerPostingType = LedgerPostingType::ProjPayrollAllocation;
                        break;

                    case ProjLedgerStatus::BalanceSheet:
                    case ProjLedgerStatus::Operations:
                        ledgerPostingType = LedgerPostingType::ProjCost;
                        break;
                }
                break;
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger account for posting the credit side of transactions for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///    The funding source that is associated with the project contract to be used by this transaction.
    /// </param>
    /// <param name="_categoryID">
    ///  The project category id value.
    /// </parm>
    /// <returns>
    ///    The ledger account for posting credit amounts for costs.
    /// </returns>
    public LedgerDimensionDefaultAccount creditAccountCost(ProjFundingSourceRefId _fundingSourceId, ProjCategoryId _categoryID = '')
    {
        LedgerDimensionDefaultAccount ledgerAccount;
        ProjCategoryId categoryId = _categoryID;

        if (!categoryId)
        {
            categoryId = projTrans.categoryId();
        }

        switch (this.forecastUpdateType())
        {
            case ProjForecastUpdateType::Journals:
                ledgerAccount = this.getAccountLedgerDimension(_fundingSourceId, categoryId, ProjAccountType::PayrollAllocation);
                break;

            case ProjForecastUpdateType::Invoice:
                switch (this.ledgerStatusCost())
                {
                    case ProjLedgerStatus::None:
                    case ProjLedgerStatus::BalanceSheet:
                    case ProjLedgerStatus::Operations:
                        ledgerAccount = this.getAccountLedgerDimension(_fundingSourceId, categoryId, ProjAccountType::CostAccount);
                        break;
                }
                break;
        }

        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForecastPostingIndirect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates project budget transactions for indirect cost components.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///    The funding source that is associated with the project contract that is used by this transaction.
    /// </param>
    /// <param name="_categoryId">
    ///    The indirect component category that is associated with the transaction type category.
    /// </param>
    /// <remarks>
    ///  Inserts records in project budget transaction table.
    /// </remarks>
    public void createForecastPostingIndirect(ProjFundingSourceRefId _fundingSourceId, ProjCategoryId _categoryId)
    {
        ProjTransBudget projTransBudget = this.initalizeProjTransBudget(_fundingSourceId, _categoryId);
        projTransBudget.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initalizeProjTransBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize values to <c>ProjTransBudget</c> table.
    /// </summary>
    /// <param name = "_fundingSourceId">
    ///  The funding source that is associated with the project contract that is used by this transaction.
    /// </param>
    /// <param name = "_categoryId">
    /// The indirect component category that is associated with the transaction type category.
    /// </param>
    /// <returns>
    /// Returns the buffer of project budget transaction table.
    /// </returns>
    protected ProjTransBudget initalizeProjTransBudget(ProjFundingSourceRefId _fundingSourceId, ProjCategoryId _categoryId)
    {
        ProjTransBudget projTransBudget = this.initTrans();
        ProjFundingSource projFundingSource = ProjFundingSource::find(_fundingSourceId);

        projTransBudget.ProjFundingSource = _fundingSourceId;
        projTransBudget.CategoryId = _categoryId;

        projTransBudget.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(this.ledgerDimension(), projFundingSource.DefaultDimension);

        if (projTransBudget.AmountMst < 0)
        {
            if (projTransBudget.Qty > 0)
            {
                projTransBudget.Qty = -projTransBudget.Qty;
            }
        }
        else if (projTransBudget.AmountMst > 0)
        {
            if (projTransBudget.Qty < 0)
            {
                projTransBudget.Qty = -projTransBudget.Qty;
            }
        }

        // Set to default
        projTransBudget.PaymentDate = dateNull();
        projTransBudget.PaymentStatus = ProjPaymentStatus::NoPayment;

        // Set the payment date and status over here
        if (projTransBudget.Elimination == NoYes::Yes)
        {
            // Set to default
            projTransBudget.PaymentDate = dateNull();
            projTransBudget.PaymentStatus = ProjPaymentStatus::NoPayment;
        }
        else
        {
            projTransBudget.PaymentDate = this.getPaymentDate(this.postingType());
            projTransBudget.PaymentStatus = this.getPaymentStatus(this.postingType());
        }

        return projTransBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger account that is used for the debit side of a posting transaction for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///    The funding source that is associated with the project contract that is used by this transaction.
    /// </param>
    /// <param name="_categoryID">
    /// The project category id value.
    /// </param>
    /// <returns>
    ///    The ledger account that is used for posting debit amounts of cost transactions.
    /// </returns>
    public LedgerDimensionDefaultAccount debitAccountCost(ProjFundingSourceRefId _fundingSourceId, ProjCategoryId _categoryID = '')
    {
        LedgerDimensionDefaultAccount   ledgerAccount;

        switch (this.forecastUpdateType())
        {
            case ProjForecastUpdateType::Journals:
                switch (this.ledgerStatusCost())
                {
                    case ProjLedgerStatus::BalanceSheet:
                    case ProjLedgerStatus::Operations:
                        ledgerAccount = this.getAccountLedgerDimension(_fundingSourceId, _categoryID, ProjAccountType::CostAccount);
                        break;
                }
                break;

            case ProjForecastUpdateType::Invoice:
                switch (this.ledgerStatusCost())
                {
                    case ProjLedgerStatus::None:
                        ledgerAccount = this.getAccountLedgerDimension(_fundingSourceId, _categoryID, ProjAccountType::PayrollAllocation);
                        break;

                    case ProjLedgerStatus::BalanceSheet:
                        if (projTrans.projLineProperty().ToBeCapitalize)
                        {
                            ledgerAccount = this.getAccountLedgerDimension(_fundingSourceId, _categoryID, ProjAccountType::CostAccount);
                        }
                        else
                        {
                            ledgerAccount = this.getAccountLedgerDimension(_fundingSourceId, _categoryID, ProjAccountType::StatusAccount);
                        }
                        break;

                    case ProjLedgerStatus::Operations:
                        ledgerAccount = this.getAccountLedgerDimension(_fundingSourceId, _categoryID, ProjAccountType::StatusAccount);
                        break;
                }
                break;
        }

        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension of the Indirect cost account.
    /// </summary>
    /// <param name="_fundingSourceID">
    /// The project funnding source id value.
    /// </param>
    /// <param name="_inDirectCategoryID">
    /// The indirect cost category value.
    /// </param>
    /// <param name="_projAccountType">
    /// The project account type.
    /// </param>
    /// <param name="throwerror">
    ///  A boolean value indicating whether error needs to be thrown to the user.
    /// </param>
    /// <returns>
    ///  Ledger Dimension of the indirect cost account.
    /// </returns>
    public LedgerDimensionDefaultAccount getAccountLedgerDimension(ProjFundingSourceRefId _fundingSourceID,
                                                                    ProjCategoryId _inDirectCategoryID,
                                                                    ProjAccountType _projAccountType,
                                                                    boolean throwerror = true)
    {
        LedgerDimensionDefaultAccount ledgerAccount;

        void getCostAccountLedgerDimension(ProjCategoryId _projcategoryID)
        {
            ledgerAccount = ProjPosting::getLedgerDimension(_projAccountType,
                                                            projForecastEmpl.ProjId,
                                                            _projcategoryID,
                                                            _fundingSourceID,
                                                            false,
                                                            throwerror);
        }

        if (projTrans.indirectCostAmount())
        {
            getCostAccountLedgerDimension(_inDirectCategoryID);
        }
        else
        {
            getCostAccountLedgerDimension(projForecastEmpl.CategoryId);
        }

        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentDate</Name>
				<Source><![CDATA[
    // Method to get the payment date as per the crieteria
    public TransDate getPaymentDate(LedgerPostingType _postingType)
    {
        TransDate paymentDate;

        // The payment date and status are set depending on the
        // posting type and transaction type
        switch (_postingType)
        {
            case LedgerPostingType::ProjNoLedger,
                 LedgerPostingType::ProjNeverLedger,
                 LedgerPostingType::ProjCost,
                 LedgerPostingType::ProjWIPCostvalue:
                paymentDate = projForecastEmpl.CostPaymDate;
                break;

            case LedgerPostingType::ProjTurnover:
                paymentDate = projForecastEmpl.SalesPaymDate;
                break;
        }

        return paymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentStatus</Name>
				<Source><![CDATA[
    // Method to get the payment status as per the crieteria
    public ProjPaymentStatus getPaymentStatus(LedgerPostingType _postingType)
    {
        ProjPaymentStatus paymentStatus;

        // The payment date and status are set depending on the
        // posting type and transaction type
        switch (_postingType)
        {
            case LedgerPostingType::ProjNoLedger,
                 LedgerPostingType::ProjNeverLedger,
                 LedgerPostingType::ProjCost,
                 LedgerPostingType::ProjWIPCostvalue,
                 LedgerPostingType::ProjTurnover:
                 paymentStatus = ProjPaymentStatus::Paid;
                break;

            case LedgerPostingType::ProjPayrollAllocation,
                 LedgerPostingType::ProjSalesvalue,
                 LedgerPostingType::ProjSalesvalueOffset:
                paymentStatus = ProjPaymentStatus::NoPayment;
                break;
        }

        return paymentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the default dimension for the forecast line with worker resoruce default dimension.
    /// </summary>
    /// <returns>The <c>DimensionDefault</c> value for the record.</returns>
    DimensionDefault ledgerDimension()
    {
        // With the ProjAdvancedJournalEmployeeDimensionFeature feature we want to use the dimensions from the resource as the primary dimension set to use.
        if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled() && FeatureStateProvider::isFeatureEnabled(ProjAdvancedJournalEmployeeDimensionFeature::instance()))
        {
            DimensionDefault resourceDims = ResourceFacade::getDefaultDimensionByDate(projTrans.resource(), DateTimeUtil::newDateTime(projTrans.transDate(), 0));
            DimensionDefault projDims = ProjTable::find(projTrans.projId()).DefaultDimension;

            if (this.postingType() == LedgerPostingType::ProjPayrollAllocation)
            {
                return LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(resourceDims, projDims);
            }
            else
            {
                return LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(projDims, resourceDims);
            }
        }
        else
        {
            DimensionDefault resourceDims = ResourceFacade::getDefaultDimension(projTrans.resource());

            if (this.postingType() == LedgerPostingType::ProjPayrollAllocation)
            {
                return resourceDims;
            }

            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerStatusCost</Name>
				<Source><![CDATA[
    ProjLedgerStatus ledgerStatusCost()
    {
        ProjLedgerStatus emplLS;

        if (isMultipleContractLineFeatureEnabled)
        {
            emplLS = this.isIncludedInProjectContractForMultipleContractLines(projTable, ProjTransType::Hour) ?
                projRevProfile.EmplLedgerStatus : ProjLedgerStatus::Operations;
        }
        else
        {
            emplLS = projGroup.EmplTransCost;
        }

        return emplLS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modelId</Name>
				<Source><![CDATA[
    ForecastModelId modelId()
    {
        return projTrans.forecastModelId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer)
    {
        projForecastEmpl = _buffer;
        this.parmContractLineItems(projForecastEmpl.getContractLineItems(projForecastEmpl));
        projTrans = ProjTrans::newProjForecastEmpl(projForecastEmpl);

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postIndirectCostAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calculates the costs based on the indirect cost components.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract to be used by this transaction.
    /// </param>
    public void postIndirectCostAmounts(ProjFundingSourceRefId _fundingSourceId)
    {   
        TransDate transDate = projForecastEmpl.SchedFromDate;
        PSAIndirectComponentGroupId groupId = projForecastEmpl.indirectComponentGroupID();
        PSAIndirectCompoundingSetup indirectCompoundingSetup;
        PSAIndirectComponent indirectComponent;

        if (projForecastEmpl.ProjForecastBudgetType == ProjForecastBudgetType::None)
        {
            Amount amountLoc;

            while select ComponentId, ComponentCategory from indirectComponent
                group by ComponentId, ComponentCategory
                exists join indirectCompoundingSetup
                    where indirectCompoundingSetup.ProjComponentGroupId == groupId
                        && indirectCompoundingSetup.DateFrom <= transDate
                        && indirectComponent.ComponentId == indirectCompoundingSetup.ComponentId
            {
                if (this.qty() > 0)
                {
                    this.accountNum(this.debitAccountCost(_fundingSourceId, indirectComponent.ComponentCategory));
                }
                else
                {
                    this.accountNum(this.creditAccountCost(_fundingSourceId, indirectComponent.ComponentCategory));
                }

                PSAIndirectCostCalculation indirectCostCalculation = new PSAIndirectCostCalculation();
                Amount amount = indirectCostCalculation.calculate(projForecastEmpl.CostPrice,
                                                                    groupId,
                                                                    PSAIndirectComponentType::Cost,
                                                                    indirectComponent.ComponentId,
                                                                    transDate,
                                                                    0,
                                                                    this.qty());
				this.amountMST(amount);

                if (!projParameters.PostIndirectAmountToParentProjectCategory)
                {
                    this.createForecastPostingIndirect(_fundingSourceId, indirectComponent.ComponentCategory);
                }

                amountLoc += amount;
            }

            if (projParameters.PostIndirectAmountToParentProjectCategory)
            {
                ProjTransBudget projTransBudget;

                select firstonly forupdate projTransBudget
                    where projTransBudget.TransId == projForecastEmpl.TransId
                        && projTransBudget.PostingType == postingType;

                if (projTransBudget)
                {
                    ttsbegin;
                    projTransBudget.AmountMst += amountLoc;
                    projTransBudget.update();
                    ttscommit;
                }
                else
                {
                    this.amountMST(amountLoc);
                    this.createForecastPostingIndirect(_fundingSourceId, projForecastEmpl.CategoryId);
                }

            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNeverLedger</Name>
				<Source><![CDATA[
    void postNeverLedger()
    {
        MapEnumerator fundingAllocationEnumerator;
        Map splitTransQty;

        this.accountNum(0);
        this.postingType(LedgerPostingType::ProjNeverLedger);

        this.costSales(ProjCostSales::Cost);
        this.ledgerTransDate(projTrans.transDate());

        if (projTrans.transCostMST() != 0)
        {
            fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.transCostMST(), projTrans.currencyIdCost()).getEnumerator();
            splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, projTrans.qty());
            while (fundingAllocationEnumerator.moveNext())
            {
                this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                this.amountMST(fundingAllocationEnumerator.currentValue());
                this.createForecastPosting(fundingAllocationEnumerator.currentKey());
            }

            if (projTrans.indirectCostAmount())
            {
                fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.indirectCostAmount(), projTrans.currencyIdCost()).getEnumerator();
                while (fundingAllocationEnumerator.moveNext())
                {
                    this.qty(0.0);
                    this.amountMST(fundingAllocationEnumerator.currentValue());
                    this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                }
            }
        }
        else
        {
            this.createForecastPosting(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    ProjQty qty(ProjQty _qty = qty)
    {
        qty = _qty;

        return qty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>