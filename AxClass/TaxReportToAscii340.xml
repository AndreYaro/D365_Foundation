<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportToAscii340</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The class <c>TaxReportToAscii340</c> generates the ascii file for the Tax report 340.
/// </summary>
public class TaxReportToAscii340 extends TaxReportToAscii
{
    TaxReportTable      taxReportTable;
    TaxReportPeriod     taxReportPeriod;
    CurrencyCodeISO     isoCurrency;
    CompanyInfo         companyInfo;

    Yr                  reportYear;
    str                 reportPeriod;

    str                 bufText;

    container           specialCharacters;
    container           specialCharactersSubstitutes;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        fileName
    #endmacro

    #Characters
    #TaxReport340

    #define.AllowedPeriod(2009)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amount2Str</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the formatted amount.
    /// </summary>
    /// <param name="_amount">
    ///     The amount.
    /// </param>
    /// <param name="_length">
    ///     The length of the integer part in the amount.
    /// </param>
    /// <returns>
    ///     The formatted amount.
    /// </returns>
    public str amount2Str(AmountCur _amount, int _length)
    {
        return TaxReportToAscii340LineProcessor_ES::amount2Str(_amount, _length);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVATNumbers</Name>
				<Source><![CDATA[
    private boolean checkVATNumbers(TaxReportTable _taxReportTable)
    {
        TaxReportLines              taxReportLines;
        TaxReportLinesTaxTrans_ES   taxReportLinesTaxTrans;
        TaxTrans                    taxTrans;
        CustTrans                   custTrans;
        VendTrans                   vendTrans;
        boolean                     ret = true;

        while select RecId from taxReportLines
            where taxReportLines.vatNum == ''
               && taxReportLines.RefRecId == _taxReportTable.RecId
               && taxReportLines.TaxBookType == TaxBookType_ES::IncomingTax
        join RecId from taxReportLinesTaxTrans
            where taxReportLinesTaxTrans.TaxReportLines == taxReportLines.RecId
        join RecId, TransDate, Voucher from taxTrans
            where taxReportLinesTaxTrans.TaxTrans == taxTrans.RecId
        join AccountNum from vendTrans
            where vendTrans.TransDate == taxTrans.TransDate
               && vendTrans.Voucher == taxTrans.Voucher
        {
            if (this.validateVATNumbers(VendTable::find(vendTrans.AccountNum).Party,CustVendACType::Vend))
            {
                ret = checkFailed(strFmt("@SYS332895", vendTrans.AccountNum));
            }
        }

        while select RecId from taxReportLines
            where taxReportLines.vatNum == ''
               && taxReportLines.RefRecId == _taxReportTable.RecId
               && taxReportLines.TaxBookType == TaxBookType_ES::OutgoingTax
        join RecId from taxReportLinesTaxTrans
            where taxReportLinesTaxTrans.TaxReportLines == taxReportLines.RecId
        join RecId, TransDate, Voucher from taxTrans
            where taxReportLinesTaxTrans.TaxTrans == taxTrans.RecId
        join AccountNum from custTrans
            where custTrans.TransDate == taxTrans.TransDate
               && custTrans.Voucher == taxTrans.Voucher
        {
            if (this.validateVATNumbers(CustTable::find(custTrans.AccountNum).Party,CustVendACType::Cust))
            {
                ret = checkFailed(strFmt("@SYS332894", custTrans.AccountNum));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Formats the given string value by substituting special characters with alternative characters.
    /// </summary>
    /// <param name="_value">
    ///     The string value.
    /// </param>
    /// <returns>
    ///     The formatted string.
    /// </returns>
    public str convert(str _value)
    {
        return TaxReportToAscii340LineProcessor_ES::convert(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase("@SYS55052", this);

        dialog.addText(strFmt("@SYS55133", int2str(reportYear), reportPeriod));
        dialogFileName = dialog.addFieldValue(extendedTypeStr(ERFileName), fileName);
        dialogFileName.lookupButton(1);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushTextBuffer</Name>
				<Source><![CDATA[
    private void flushTextBuffer()
    {
        asciiFile.write(bufText);
        bufText = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatDate</Name>
				<Source><![CDATA[
    private str formatDate(date _date)
    {
        return strLFix(date2str(_date, 321, 2, 0, 2, 0, 4, DateFlags::None), #DateLength);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        fileName = fileNameTrim(dialogFileName.value());

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPresentationTypeCode</Name>
				<Source><![CDATA[
    private str getPresentationTypeCode(TaxReportTable _taxReportTable)
    {
        switch (_taxReportTable.PresentationType)
        {
            case PresentationType_ES::Telematic:
                return #capitalT;

            case PresentationType_ES::CDR:
                return #capitalC;
        }

        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the report details needed to generate the ascii file.
    /// </summary>
    /// <param name="_reportTable">
    ///     The <c>taxReportTable</c> record.
    /// </param>
    public void initReport(Common _reportTable)
    {
        CurrencyCode currencyCode;

        taxReportTable  = _reportTable;
        reportYear      = year(taxReportTable.FromDate);

        switch (mthOfYr(taxReportTable.FromDate))
        {
            case 1,2,3:
                reportPeriod = "@SYS54924";
                break;

            case 4,5,6:
                reportPeriod = "@SYS54927";
                break;

            case 7,8,9:
                reportPeriod = "@SYS54928";
                break;

            case 10,11,12:
                reportPeriod = "@SYS54929";
                break;
        }

        companyInfo     = CompanyInfo::find();
        currencyCode    = Ledger::accountingCurrency(companyInfo.RecId);
        isoCurrency     = Currency::find(currencyCode).CurrencyCodeISO;
        taxReportPeriod = TaxReportPeriod::find(taxReportTable.TaxPeriod, taxReportTable.FromDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutoInvoice</Name>
				<Source><![CDATA[
    private boolean isAutoInvoice(TaxReportLines _taxReportLine)
    {
        TaxTrans taxTransWithPositiveTaxValue;
        TaxTrans taxTransWithNegativeTaxValue;

        select firstOnly RecId from taxTransWithPositiveTaxValue
            where  taxTransWithPositiveTaxValue.Voucher == _taxReportLine.Voucher
                && taxTransWithPositiveTaxValue.TransDate == _taxReportLine.TransDate
                && taxTransWithPositiveTaxValue.TaxValue > 0;

        select firstOnly RecId from taxTransWithNegativeTaxValue
            where  taxTransWithNegativeTaxValue.Voucher == _taxReportLine.Voucher
                && taxTransWithNegativeTaxValue.TransDate == _taxReportLine.TransDate
                && taxTransWithNegativeTaxValue.TaxValue < 0;

        // Whenever we have at least one pair of sales tax transactions (positive and negative) we have auto-invoice/creditnote
        // We act under assumption that we are not allowed to combine an autoinvoice and a normal invoice within a single purchase order.
        return taxTransWithPositiveTaxValue.RecId != 0 && taxTransWithNegativeTaxValue.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputRecord</Name>
				<Source><![CDATA[
    protected void outputRecord()
    {
        this.outputRecordType1();
        this.outputRecordType2();
        this.flushTextBuffer();
        File::SendFileToUser(asciiFile.getStream(), fileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputRecordType1</Name>
				<Source><![CDATA[
    private void outputRecordType1()
    {
        str 4   strReportYear;
        VATName companyVATName;

        //Record type
        #define.RecordType('1')

        strReportYear = num2Str0(year(taxReportTable.FromDate), #ReportYearLength);

        outputTxt =  #RecordType;
        outputTxt += #Model;
        outputTxt += strReportYear;
        outputTxt += strRFix(this.convert(companyInfo.CoRegNum), #CompanyVATNumberLength, #0);

        companyVATName = TaxVATNumTable::name(companyInfo.CoRegNum, companyInfo.postalAddress().CountryRegionId);
        companyVATName = companyVATName ? companyVATName : companyInfo.Name;
        outputTxt += strLFix(this.convert(companyVATName), #NameLength);

        switch (taxReportTable.PresentationType)
        {
            case PresentationType_ES::Telematic:
                outputTxt += #capitalT;
                break;

            case PresentationType_ES::CDR:
                outputTxt += #capitalC;
                break;
        }

        outputTxt += strLFix(taxReportTable.Telephone, #TelephoneLength);
        outputTxt += strLFix(this.convert(taxReportTable.ContactPerson), #NameLength);
        outputTxt += #Model + strReportYear + this.period(taxReportTable.FromDate, taxReportTable.ToDate, true)
                        + taxReportTable.DocumentNum;
        outputTxt += strLFix(#BlankText, #Compl);
        outputTxt += (taxReportTable.ReplacementDeclaration == NoYes::Yes) ? strLFix(#capitalS, #Rep)
                        : strLFix(#BlankText, #Rep);
        outputTxt += (taxReportTable.ReplacementDeclaration == NoYes::Yes)
                        ? strRFix(taxReportTable.PreviousDeclaration, #DecAnt) : strRFix(#BlankText, #DecAnt, #0);
        outputTxt += strLFix(this.period(taxReportTable.FromDate, taxReportTable.ToDate), #Period);
        outputTxt += num2Str0(taxReportTable.totalOperDelivery() + taxReportTable.totalOperAcquisition()
                        + taxReportTable.totalOperCashCollectables(), #NumberOfOperations);
        outputTxt += this.amount2Str(taxReportTable.totalBaseAmount(), #AmountLength);
        outputTxt += this.amount2Str(taxReportTable.totalVATAmount(), #AmountLength);
        outputTxt += this.amount2Str(taxReportTable.totalBaseAmount() + taxReportTable.totalVATAmount()
                        + taxReportTable.totalVATAmountEq(), #AmountLength);
        outputTxt += strLFix(#BlankText, #Space1Length);
        outputTxt += strLFix(this.convert(taxReportTable.ElectronicCode), #ElectronicCodeLength);

        outputTxt = strLFix(outputTxt, #RecordLength);

        this.writeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputRecordType2</Name>
				<Source><![CDATA[
    private void outputRecordType2()
    {
        TaxReportToAscii340LineProcessor_ES lineProcessor;
        TaxReportLines                      taxReportLines;

        //Record type
        #define.RecordType('2')
        #define.NewLine('\r\n')

        while select taxReportLines
            order by taxReportLines.TaxBookType, taxReportLines.ReportRecord
            where  taxReportLines.RefRecId == taxReportTable.RecId
                && taxReportLines.Excluded == NoYes::No
        {
            outputTxt =  #NewLine;
            outputTxt += #RecordType;
            outputTxt += #Model;
            outputTxt += num2Str0(year(taxReportTable.FromDate), #ReportYearLength);
            outputTxt += strRFix(this.convert(companyInfo.CoRegNum), #CompanyVATNumberLength, #0);

            lineProcessor = new TaxReportToAscii340LineProcessor_ES();
            lineProcessor.parmTaxReportLines(taxReportLines);
            lineProcessor.resetParameters();

            lineProcessor.initCurrentTransaction();

            if (lineProcessor.getTaxBookType() == TaxBookType_ES::OutgoingTax)
            {
                lineProcessor.initCustVendTransaction();

                outputTxt += lineProcessor.fieldCompanyVatNum();
                outputTxt += lineProcessor.fieldLegalRepresentativeVatNum();
                outputTxt += lineProcessor.fieldRelationName();
                outputTxt += lineProcessor.fieldCountryIsoCode();
                outputTxt += lineProcessor.fieldTypeOfIdInResidenceCountry();
                outputTxt += lineProcessor.fieldVatNumInResidenceCountry();
                outputTxt += lineProcessor.fieldTaxBookType(#capitalE);

                lineProcessor.initCountRegs();

                outputTxt += lineProcessor.fieldOperationType();
                outputTxt += lineProcessor.fieldInvoiceDate();
                outputTxt += lineProcessor.fieldOperationDate();
                outputTxt += lineProcessor.fieldTaxValue();
                outputTxt += lineProcessor.fieldTaxBase();
                outputTxt += lineProcessor.fieldTaxAmount();
                outputTxt += lineProcessor.fieldTotalInvoiceAmount(true);
                outputTxt += lineProcessor.fieldVatCost();
                outputTxt += lineProcessor.fieldInvoiceId();
                outputTxt += lineProcessor.fieldRegisterId();
                outputTxt += lineProcessor.fieldNumberOfInvoices(#InvoiceNumSent);
                outputTxt += lineProcessor.fieldRegisterNum();
                outputTxt += lineProcessor.fieldCorrelationNum();
                outputTxt += lineProcessor.fieldCorrectedInvoiceId();
                outputTxt += lineProcessor.fieldTaxValueEq();
                outputTxt += lineProcessor.fieldTaxAmountEq();
                outputTxt += lineProcessor.fieldSituationCode();
                outputTxt += lineProcessor.fieldPropertyTaxNumber();
                outputTxt += lineProcessor.fieldCashCollectable();
                outputTxt += lineProcessor.fieldCashInvoiceYear();
                outputTxt += lineProcessor.fieldAmountPropertyVat();
            }
            else
            {
                lineProcessor.initVendorTrans();
                outputTxt += lineProcessor.fieldCompanyVatNum();
                outputTxt += lineProcessor.fieldLegalRepresentativeVatNum();
                outputTxt += lineProcessor.fieldRelationName();
                outputTxt += lineProcessor.fieldCountryIsoCode();
                outputTxt += lineProcessor.fieldTypeOfIdInResidenceCountry();
                outputTxt += lineProcessor.fieldVatNumInResidenceCountry();
                outputTxt += lineProcessor.fieldTaxBookType(#capitalR);

                lineProcessor.initCountRegs();
                lineProcessor.initCorrectedCountVend();

                outputTxt += lineProcessor.fieldOperationType();
                outputTxt += lineProcessor.fieldInvoiceDate();
                outputTxt += lineProcessor.fieldOperationDate();
                outputTxt += lineProcessor.fieldTaxValue();
                outputTxt += lineProcessor.fieldTaxBase();
                outputTxt += lineProcessor.fieldTaxAmount();
                outputTxt += lineProcessor.fieldTotalInvoiceAmount(false);
                outputTxt += lineProcessor.fieldVatCost();
                outputTxt += lineProcessor.fieldInvoiceId();
                outputTxt += lineProcessor.fieldRegisterId();
                outputTxt += lineProcessor.fieldNumberOfInvoices(#InvoiceNumReceived);
                outputTxt += lineProcessor.fieldRegisterNum();
                outputTxt += lineProcessor.fieldCorrelationNum();
                outputTxt += lineProcessor.fieldTaxAmountDeductible();
            }
              // should always populate with 0 or data
            outputTxt += lineProcessor.cashRegimeCollectionDate();
            outputTxt += lineProcessor.cashRegimeCollectionAmount(lineProcessor.getTaxBookType() == TaxBookType_ES::OutgoingTax);
            if (lineProcessor.isCashRegime())
            {
                lineProcessor.initCollectionMethodData();
                outputTxt += lineProcessor.cashRegimeCollectionMethod();
                outputTxt += lineProcessor.cashRegimeCollectionMethodInfo();
            }

            outputTxt = strLFix(outputTxt, #RecordLength + 1);

            this.writeRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>period</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the period using the from date and to date.
    /// </summary>
    /// <param name="_fromDate">
    ///     The from date.
    /// </param>
    /// <param name="_toDate">
    ///     The to date.
    /// </param>
    /// <param name="_inDeclaration">
    ///     Indicates whether the period is in declaration; optional.
    /// </param>
    /// <returns>
    ///     The period.
    /// </returns>
    public str period(date _fromDate, date _toDate, boolean _inDeclaration = false)
    {
        str result;

        if (mthOfYr(_fromDate) == mthOfYr(_toDate))
        {
            result = strRFix(int2str(mthOfYr(_fromDate)), #Period, #0);
        }
        else
        {
            result = _inDeclaration ? strRFix(int2str(mthOfYr(_toDate)), #Period, #0) : (int2str(mthOfYr(_toDate) div 3) + #capitalT) ;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    public boolean preRunValidate()
    {
        TaxReportLines              taxReportLines;
        boolean                     ret = super();
        TaxVATNumTable              companyTaxVATnumTable;
        SysInfoAction_MenuFunction  sysInfoAction_MenuFunction;

        if (!taxReportTable.TaxPeriod)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2pname(tableNum(TaxReportTable), fieldNum(TaxReportTable, TaxPeriod))));
        }

        if (!taxReportTable.FromDate)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2pname(tableNum(TaxReportTable), fieldNum(TaxReportTable, FromDate))));
        }

        if (!taxReportTable.ContactPerson)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2pname(tableNum(TaxReportTable), fieldNum(TaxReportTable, ContactPerson))));
        }

        if (!taxReportTable.Telephone)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2pname(tableNum(TaxReportTable), fieldNum(TaxReportTable, Telephone))));
        }

        if (!taxReportTable.DocumentNum)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2pname(tableNum(TaxReportTable), fieldNum(TaxReportTable, DocumentNum))));
        }

        if (!taxReportTable.ElectronicCode)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2pname(tableNum(TaxReportTable), fieldNum(TaxReportTable, ElectronicCode))));
        }

        if (taxReportTable.ReplacementDeclaration == NoYes::Yes && !taxReportTable.PreviousDeclaration)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2pname(tableNum(TaxReportTable), fieldNum(TaxReportTable, PreviousDeclaration))));
        }

        if (taxReportTable.PresentationType == PresentationType_ES::Report)
        {
            ret = checkFailed(strFmt("@SYS324808", fieldId2pname(tableNum(TaxReportTable), fieldNum(TaxReportTable, PresentationType))));
        }

        companyTaxVATnumTable = TaxVATNumTable::find(companyInfo.CoRegNum, companyInfo.postalAddress().CountryRegionId);
        if (companyTaxVATnumTable && !companyTaxVATnumTable.Name)
        {
            sysInfoAction_MenuFunction = SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(TaxVATNumTable), MenuItemType::Display);
            sysInfoAction_MenuFunction.parmCallerBuffer(companyTaxVATnumTable);
            ret = checkFailed(strFmt("@SYS342567", companyInfo.CoRegNum), '', sysInfoAction_MenuFunction);
        }

        if (!companyInfo.CoRegNum)
        {
            ret = checkFailed(strFmt("@SYS330569", fieldId2pname(tableNum(CompanyInfo), fieldNum(CompanyInfo, CoRegNum)), companyInfo.DataArea));
        }

        if (!taxReportPeriod)
        {
            ret = checkFailed("@SYS24993");
        }
        else if (!this.validatePeriod(taxReportPeriod.FromDate, taxReportPeriod.ToDate))
        {
            ret = checkFailed("@SYS324797");
        }

        select firstonly RecId from taxReportLines
            where taxReportLines.RefRecId == taxReportTable.RecId;

        if (!taxReportLines.RecId)
        {
            ret = checkFailed("@SYS324795");
        }

        if (!this.checkVATNumbers(taxReportTable))
        {
            ret = checkFailed("@SYS330568");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriod</Name>
				<Source><![CDATA[
    public boolean validatePeriod(date _fromDate, date _toDate)
    {
        // Periods starting before year 2009 are not allowed
        if (year(_fromDate) < #AllowedPeriod)
        {
            return false;
        }

        // Full months are allowed
        if (_fromDate == dateStartMth(_fromDate) && _toDate == dateEndMth(_fromDate))
        {
            return true;
        }

        // Full quarters are allowed
        if (_fromDate == dateStartQtr(_fromDate) && _toDate == dateEndQtr(_fromDate))
        {
            return true;
        }

        // All other types of periods are not allowed
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVATNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates VATnumber required or not for customer/vendor.
    /// </summary>
    /// <param name="_partyRecId">
    /// The _partyRecId of customer or vendor.
    /// </param>
    /// <param name="_custVendACType">
    /// customer or vendor type.
    /// </param>
    /// <returns>
    /// If 'True', the validation is required.
    /// </returns>
    private boolean validateVATNumbers(DirPartyRecId _partyRecId,CustVendACType _custVendACType)
    {
        boolean                ret;
        MandatoryVATNum        mandatoryVATNum;
        AddressCountryRegionId countryRegionId;
        #isoCountryRegionCodes

        countryRegionId = DirParty::primaryPostalAddress(_partyRecId).CountryRegionId;

        if (_custVendACType == CustVendACType::Cust)
        {
            mandatoryVATNum = CustParameters::find().MandatoryVATNum;
        }
        else
        {
            mandatoryVATNum = VendParameters::find().MandatoryVATNum;
        }

        if (mandatoryVATNum  == TaxVATNumCountryRegionType::None ||
            (countryRegionId == #isoBE   &&
                SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE])))
        {
            return ret;
        }

        if (mandatoryVATNum == TaxVATNumCountryRegionType::EU)
        {
            if (IntrastatCountryRegionParameters::isCountryRegionStateInEU(DirParty::primaryPostalAddress(_partyRecId)))
                ret = true;
        }
        if (mandatoryVATNum == TaxVATNumCountryRegionType::DomesticEU)
        {
            if (IntrastatCountryRegionParameters::isCountryRegionStateInEU(DirParty::primaryPostalAddress(_partyRecId)) || IntrastatCountryRegionParameters::isDomestic(countryRegionId))
                ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecord</Name>
				<Source><![CDATA[
    protected void writeRecord()
    {
        #define.BufferSize(524288)
        #define.delimiterEnter('\n')

        int length = strLen(bufText);

        // Export data to file when string size > 1024*1024 bytes (512*1024 chars)
        if (length > #BufferSize)
        {
            asciiFile.write(bufText);
            bufText = outputTxt;
            if (strfind(bufText, #delimiterEnter, 1, 1))
            {
                bufText = strdel(bufText, 1, 1);
            }
        }
        else if (length > 0)
        {
            bufText += outputTxt;
        }
        else
        {
            bufText = outputTxt;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS324796";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxReportToAscii340 reportToAscii340;
        TaxReportTable      reportTable;

        if (_args && _args.record())
        {
            reportTable = _args.record();

            reportToAscii340 = new TaxReportToAscii340();

            reportToAscii340.initReport(reportTable);

            if (reportToAscii340.prompt())
            {
                reportToAscii340.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if Audit policy can run in a new session.
    /// </summary>
    /// <returns>
    /// False.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>