<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionFocusUpdateBalanceSim_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DimensionFocusUpdateBalanceSim_IT</c> class creates the simulation balances.
/// </summary>
public class DimensionFocusUpdateBalanceSim_IT extends DimensionFocusProcessBalanceSim_IT implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the caption of the batch.
    /// </summary>
    /// <returns>
    /// The caption of the batch.
    /// </returns>
    /// <remarks>
    /// The caption is also used as the title of the dialog box.
    /// </remarks>
    public ClassDescription caption()
    {
        return strFmt("@SYS320043", dimensionFocusName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current object is valid.
    /// </summary>
    /// <returns>
    /// true if the current object is valid; otherwise, false.
    /// </returns>
    protected boolean check()
    {
        boolean isValid = super();

        if (isValid && (dimensionFocusState == DimensionFocusBalanceInitializationState::NotInitialized
                        || dimensionFocusState == DimensionFocusBalanceInitializationState::InProcess))
        {
            if (suppressErrors)
            {
                isValid = false;
            }
            else
            {
                isValid = checkFailed(strFmt("@SYS4004019", dimensionFocusName));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the dimension focus balances.
    /// </summary>
    /// <remarks>
    /// The dimension focus balances are created or updated by using the temporary balances.
    /// </remarks>
    protected void createBalance()
    {
        super();

        DimensionFocusBalanceSim_IT balances;
        DimensionFocusBalanceSim_IT existingBalances;
        DimensionFocusBalanceSimTmp_IT balancesTemp = this.createBalanceTemp();

        while select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId, FocusLedgerDimension, FocusDimensionHierarchy, IsSystemGeneratedUltimo,
                sum(DebitAccountingCurrencyAmount), sum(CreditAccountingCurrencyAmount),
                sum(DebitReportingCurrencyAmount), sum(CreditReportingCurrencyAmount),
                sum(Quantity) from balancesTemp
            group by FocusDimensionHierarchy, FocusLedgerDimension, AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId, IsSystemGeneratedUltimo
            exists join existingBalances
                where existingBalances.AccountingDate == balancesTemp.AccountingDate
                    && existingBalances.Ledger == balancesTemp.Ledger
                    && existingBalances.PostingLayer == balancesTemp.PostingLayer
                    && existingBalances.FiscalCalendarPeriodType == balancesTemp.FiscalPeriodType
                    && existingBalances.SimulationJournalNameId == balancesTemp.SimulationJournalNameId
                    && existingBalances.FocusLedgerDimension == balancesTemp.FocusLedgerDimension
                    && existingBalances.FocusDimensionHierarchy == balancesTemp.FocusDimensionHierarchy
                    && existingBalances.IsSystemGeneratedUltimo == balancesTemp.IsSystemGeneratedUltimo
        {
            // update the permanent records from the temp records

            // update the debits and credits separately because update_recordset
            // includes only one joined record in a 1:N relationship and separate
            // DimensionFocusBalanceSimTmp records exist for debits and credits
            update_recordset balances
                setting DebitAccountingCurrencyAmount = balances.DebitAccountingCurrencyAmount + balancesTemp.DebitAccountingCurrencyAmount,
                        DebitReportingCurrencyAmount = balances.DebitReportingCurrencyAmount + balancesTemp.DebitReportingCurrencyAmount,
                        CreditAccountingCurrencyAmount = balances.CreditAccountingCurrencyAmount + balancesTemp.CreditAccountingCurrencyAmount,
                        CreditReportingCurrencyAmount = balances.CreditReportingCurrencyAmount + balancesTemp.CreditReportingCurrencyAmount,
                        Quantity = balances.Quantity + balancesTemp.Quantity
                where balancesTemp.FocusLedgerDimension != 0
                    && balancesTemp.AccountingDate == balances.AccountingDate
                    && balancesTemp.Ledger == balances.Ledger
                    && balancesTemp.PostingLayer == balances.PostingLayer
                    && balancesTemp.FiscalPeriodType == balances.FiscalCalendarPeriodType
                    && balancesTemp.SimulationJournalNameId == balances.SimulationJournalNameId
                    && balancesTemp.FocusLedgerDimension == balances.FocusLedgerDimension
                    && balancesTemp.FocusDimensionHierarchy == balances.FocusDimensionHierarchy
                    && balancesTemp.IsSystemGeneratedUltimo == balances.IsSystemGeneratedUltimo;
        }

        // create new permanent records from the temp records
        insert_recordset balances (AccountingDate, Ledger, PostingLayer, FiscalCalendarPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            IsSystemGeneratedUltimo,
            DebitAccountingCurrencyAmount, CreditAccountingCurrencyAmount,
            DebitReportingCurrencyAmount, CreditReportingCurrencyAmount,
            Quantity)
        select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId, FocusLedgerDimension, FocusDimensionHierarchy, IsSystemGeneratedUltimo,
            sum(DebitAccountingCurrencyAmount), sum(CreditAccountingCurrencyAmount),
            sum(DebitReportingCurrencyAmount), sum(CreditReportingCurrencyAmount),
            sum(Quantity) from balancesTemp
            group by FocusDimensionHierarchy, FocusLedgerDimension, AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId, IsSystemGeneratedUltimo
            where balancesTemp.FocusLedgerDimension != 0
                notexists join existingBalances
                    where existingBalances.AccountingDate == balancesTemp.AccountingDate
                        && existingBalances.Ledger == balancesTemp.Ledger
                        && existingBalances.PostingLayer == balancesTemp.PostingLayer
                        && existingBalances.FiscalCalendarPeriodType == balancesTemp.FiscalPeriodType
                        && existingBalances.SimulationJournalNameId == balancesTemp.SimulationJournalNameId
                        && existingBalances.FocusLedgerDimension == balancesTemp.FocusLedgerDimension
                        && existingBalances.FocusDimensionHierarchy == balancesTemp.FocusDimensionHierarchy
                        && existingBalances.IsSystemGeneratedUltimo == balancesTemp.IsSystemGeneratedUltimo;

    }

]]></Source>
			</Method>
			<Method>
				<Name>createBalanceTemp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the temporary dimension focus balances for balance updates.
    /// </summary>
    /// <returns>
    ///    The temporary dimension focus balances.
    /// </returns>
    /// <remarks>
    ///    The general journal account entries are summed.
    /// </remarks>
    protected DimensionFocusBalanceSimTmp_IT createBalanceTemp()
    {
        DimensionFocusBalanceCalculationSimView_IT balanceView;
        DimensionFocusBalanceSimTmp_IT balancesTemp;
        DimensionFocusBalanceSimTmp_IT balancesStagingTemp;
        DimensionFocusUnprocessedTransactionsSim_IT unprocessedTrans;

        insert_recordset balancesStagingTemp (AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            IsCredit, PostingType,
            DebitAccountingCurrencyAmount, DebitReportingCurrencyAmount, // Store all amounts in the debit column initially
            Quantity, GeneralJournalEntry)
        select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, dimensionFocusRecId,
            IsCredit, PostingType,
            sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount),
            sum(Quantity), GeneralJournalEntry from balanceView
            group by FocusLedgerDimension, AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId, IsCredit, PostingType, GeneralJournalEntry
            where balanceView.FocusDimensionHierarchy == dimensionFocusRecId
                && balanceView.FocusLedgerDimension != 0
            exists join unprocessedTrans
                where unprocessedTrans.GeneralJournalEntry == balanceView.GeneralJournalEntry
                    && unprocessedTrans.FocusDimensionHierarchy == balanceView.FocusDimensionHierarchy
                    && unprocessedTrans.State == DimensionFocusBalanceCalculationState::InProcess;

        // Debit + !SysGenUltimo
        NoYes isCreditAmount = NoYes::No;
        NoYes isSysGenUltimo = NoYes::No;

        insert_recordset balancesTemp (AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            IsSystemGeneratedUltimo, IsCredit, GeneralJournalEntry,
            DebitAccountingCurrencyAmount, DebitReportingCurrencyAmount,
            Quantity)
        select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            isSysGenUltimo, isCreditAmount, GeneralJournalEntry,
            sum(DebitAccountingCurrencyAmount), sum(DebitReportingCurrencyAmount),
            sum(Quantity) from balancesStagingTemp
            group by FocusLedgerDimension, FocusDimensionHierarchy,
                AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId, IsCredit, GeneralJournalEntry
            where balancesStagingTemp.IsCredit == NoYes::No
                && ( balancesStagingTemp.FiscalPeriodType != FiscalPeriodType::Closing
                    || balancesStagingTemp.PostingType != LedgerPostingType::TransferOpeningClosing);

        // Credit + !SysGenUltimo
        isCreditAmount = NoYes::Yes;
        isSysGenUltimo = NoYes::No;

        insert_recordset balancesTemp (AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            IsSystemGeneratedUltimo, IsCredit, GeneralJournalEntry,
            CreditAccountingCurrencyAmount, CreditReportingCurrencyAmount,
            Quantity)
        select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            isSysGenUltimo, isCreditAmount, GeneralJournalEntry,
            sum(DebitAccountingCurrencyAmount), sum(DebitReportingCurrencyAmount), // transfer debit column to credit since it was originally populated with the credit amount
            sum(Quantity) from balancesStagingTemp
            group by FocusLedgerDimension, FocusDimensionHierarchy,
                AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId, IsCredit, GeneralJournalEntry
            where balancesStagingTemp.IsCredit == NoYes::Yes
                && ( balancesStagingTemp.FiscalPeriodType != FiscalPeriodType::Closing
                    || balancesStagingTemp.PostingType != LedgerPostingType::TransferOpeningClosing);

        // Debit + SysGenUltimo
        isCreditAmount = NoYes::No;
        isSysGenUltimo = NoYes::Yes;

        insert_recordset balancesTemp (AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            IsSystemGeneratedUltimo, IsCredit, GeneralJournalEntry,
            DebitAccountingCurrencyAmount, DebitReportingCurrencyAmount,
            Quantity)
        select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            isSysGenUltimo, isCreditAmount, GeneralJournalEntry,
            sum(DebitAccountingCurrencyAmount), sum(DebitReportingCurrencyAmount),
            sum(Quantity) from balancesStagingTemp
            group by FocusLedgerDimension, FocusDimensionHierarchy,
                AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId, IsCredit, GeneralJournalEntry
            where balancesStagingTemp.IsCredit == NoYes::No
                && balancesStagingTemp.FiscalPeriodType == FiscalPeriodType::Closing
                && balancesStagingTemp.PostingType == LedgerPostingType::TransferOpeningClosing;

        // Credit + SysGenUltimo
        isCreditAmount = NoYes::Yes;
        isSysGenUltimo = NoYes::Yes;

        insert_recordset balancesTemp (AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            IsSystemGeneratedUltimo, IsCredit, GeneralJournalEntry,
            CreditAccountingCurrencyAmount, CreditReportingCurrencyAmount,
            Quantity)
        select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            isSysGenUltimo, isCreditAmount, GeneralJournalEntry,
            sum(DebitAccountingCurrencyAmount), sum(DebitReportingCurrencyAmount), // transfer debit column to credit since it was originally populated with the credit amount
            sum(Quantity) from balancesStagingTemp
            group by FocusLedgerDimension, FocusDimensionHierarchy,
                AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId, IsCredit, GeneralJournalEntry
            where balancesStagingTemp.IsCredit == NoYes::Yes
                && balancesStagingTemp.FiscalPeriodType == FiscalPeriodType::Closing
                && balancesStagingTemp.PostingType == LedgerPostingType::TransferOpeningClosing;

        return balancesTemp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    protected void postProcess()
    {
        super();

        boolean isUpdated = DimensionFocusUnprocessedTransactionsSim_IT::deleteWithState(dimensionFocusRecId, DimensionFocusBalanceCalculationState::InProcess);
        Debug::assert(isUpdated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcess</Name>
				<Source><![CDATA[
    protected boolean preProcess()
    {
        boolean isUpdated;

        isUpdated = super();

        if (isUpdated)
        {
            isUpdated = DimensionFocusUnprocessedTransactionsSim_IT::updateState(
                dimensionFocusRecId,
                DimensionFocusBalanceCalculationState::Pending,
                DimensionFocusBalanceCalculationState::InProcess);
        }

        return isUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        super();

        DimensionFocusUpdateBalanceSim_IT::runUpdate(this.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DimensionFocusUpdateBalanceSim_IT construct(DimensionHierarchy _dimensionHierarchy)
    {
        DimensionFocusUpdateBalanceSim_IT updateBalance = new DimensionFocusUpdateBalanceSim_IT();
        updateBalance.setDimensionHierarchy(_dimensionHierarchy);

        return updateBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUpdate</Name>
				<Source><![CDATA[
    private static void runUpdate(container _packedClass)
    {
        DimensionFocusUpdateBalanceSim_IT serverBalance = DimensionFocusUpdateBalanceSim_IT::construct(null);
        serverBalance.unpack(_packedClass);

        serverBalance.runServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUpdateTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the update.
    /// </summary>
    [SysObsolete('This method has been deprecated. Please use the runUpdate method.', false, 12\06\2024)]
    public void runUpdateTask()
    {
        boolean isUpdated = false;

        #OCCRetryCount

        if (dimensionFocusState == DimensionFocusBalanceInitializationState::InProcess
            || dimensionFocusState == DimensionFocusBalanceInitializationState::NotInitialized)
        {
            // do nothing if it is not initialized or pending
            if (suppressErrors)
            {
                return;
            }
            else
            {
                throw error("@SYS323928");
            }
        }

        // Attempt to update the initialization state until it succeeds or the maximum retry count
        // is reached. Do nothing if it fails since the result is that no processing will be done.
        try
        {
            ttsBegin;

            isUpdated = DimensionHierarchySupportProviderSim_IT::updateStateSim(
                dimensionFocusRecId,
                dimensionFocusState,
                DimensionFocusBalanceInitializationState::InProcess);

            if (!isUpdated)
            {
                // do nothing if the record was not updated
                if (suppressErrors)
                {
                    return;
                }
                else
                {
                    throw error("@SYS323928");
                }
            }

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        // Attempt to update the focus until it succeeds or the maximum retry count is reached.
        // Make sure the initialization state is updated for all paths.
        try
        {
            ttsBegin;

            this.progressInit(this.caption(), 0, #AviFindFile);

            isUpdated = DimensionFocusUnprocessedTransactionsSim_IT::updateState(
                dimensionFocusRecId,
                DimensionFocusBalanceCalculationState::Pending,
                DimensionFocusBalanceCalculationState::InProcess);

            if (isUpdated)
            {
                this.createLedgerDimensionReference();

                this.createBalance();

                isUpdated = DimensionFocusUnprocessedTransactionsSim_IT::deleteWithState(
                    dimensionFocusRecId,
                    DimensionFocusBalanceCalculationState::InProcess);
                    Debug::assert(isUpdated);
            }

            isUpdated = DimensionHierarchySupportProviderSim_IT::updateStateSim(
                dimensionFocusRecId,
                DimensionFocusBalanceInitializationState::InProcess,
                DimensionFocusBalanceInitializationState::Initialized);
            Debug::assert(isUpdated);

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    ttsBegin;

                    isUpdated = DimensionHierarchySupportProviderSim_IT::updateStateSim(
                            dimensionFocusRecId,
                            DimensionFocusBalanceInitializationState::InProcess,
                            dimensionFocusState);
                    Debug::assert(isUpdated);

                    ttsCommit;

                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the dimension set balances associated with the <c>DimensionHierarchy</c> record.
    /// </summary>
    /// <param name="_dimensionHierarchy">
    /// The <c>DimensionHierarchy</c> record.
    /// </param>
    /// <param name="_showErrors">
    /// true if errors should be displayed; otherwise, false.
    /// </param>
    /// <param name="_runInNewSession">
    /// true to run the process in a new session; otherwise, false.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The dimension hierarchy is null or the type is not dimension set.
    /// </exception>
    public static void updateBalance(
        DimensionHierarchy _dimensionHierarchy,
        boolean _showErrors = false,
        boolean _runInNewSession = true)
    {
        if (_dimensionHierarchy == null || _dimensionHierarchy.StructureType != DimensionHierarchyType::Focus)
        {
            throw error(Error::missingRecord(tableStr(DimensionHierarchy)));
        }

        DimensionFocusUpdateBalanceSim_IT updateBalance = DimensionFocusUpdateBalanceSim_IT::construct(_dimensionHierarchy);
        updateBalance.parmSuppressErrors(!_showErrors);
        updateBalance.canRunInNewSession(_runInNewSession);

        updateBalance.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAutomaticUpdates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the balances of the dimension sets that are marked for automatic
    /// updates.
    /// </summary>
    /// <remarks>
    /// The dimension set must be marked for automatic updates, have its balances
    /// initialized, and not be currently processing.
    /// </remarks>
    public static void processAutomaticUpdates()
    {
        DimensionHierarchy dimHierarchy;

        while select Description, FocusStateSim_IT, Name, RecId from dimHierarchy
            where dimHierarchy.StructureType == DimensionHierarchyType::Focus
                && dimHierarchy.FocusStateSim_IT == DimensionFocusBalanceInitializationState::Initialized
                && dimHierarchy.FocusIsAutomaticUpdateSim_IT == true
        {
            DimensionFocusUpdateBalanceSim_IT updateBalanceSim = DimensionFocusUpdateBalanceSim_IT::construct(dimHierarchy);
            updateBalanceSim.parmSuppressErrors(true);
            updateBalanceSim.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerDimensionReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the ledger dimension references for balance updates.
    /// </summary>
    /// <remarks>
    ///    The unprocessed general journal account entries that are ready to process are converted to focus
    ///    ledger dimensions.
    /// </remarks>
    protected void createLedgerDimensionReference()
    {
        super();

        DimensionFocusUnprocessedTransactionsSim_IT unprocessedTransSim;
        GeneralJournalAccountEntrySim_IT generalJournalAccountEntrySim;
        GeneralJournalEntrySim_IT generalJournalEntrySim;
        RecordInsertList newLedgerDimensionReferences = new RecordInsertList(tableNum(DimensionFocusLedgerDimensionRefSim_IT));

        while select LedgerDimension from generalJournalAccountEntrySim
            group by generalJournalAccountEntrySim.LedgerDimension
            exists join generalJournalEntrySim
                where generalJournalEntrySim.RecId == generalJournalAccountEntrySim.GeneralJournalEntry
            exists join unprocessedTransSim
                where unprocessedTransSim.GeneralJournalEntry == generalJournalEntrySim.RecId
                    && unprocessedTransSim.FocusDimensionHierarchy == dimensionFocusRecId
                    && unprocessedTransSim.State == DimensionFocusBalanceCalculationState::InProcess
        {
            this.processAccountEntryLedgerDimension(
                newLedgerDimensionReferences,
                generalJournalAccountEntrySim.LedgerDimension);
        }

        newLedgerDimensionReferences.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>