<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPaymentRequestCreatePaymJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class creates payments based on payment requests splitted by account type.
/// </summary>
abstract class CFMPaymentRequestCreatePaymJournal
{
    JournalTableData paymentJournalTableData;
    CFMJournalTable paymentRequestJournalTable;
    CFMAccountType accountType;
    Query paymentRequestQuery;
    container companies;
    NoYes separatePaymentCompanyVend, separatePaymentCompanyCust;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPaymentRequestToPayment</Name>
				<Source><![CDATA[
    abstract protected void addPaymentRequestToPayment(CFMPaymentRequestTable _paymentRequest)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearJournal</Name>
				<Source><![CDATA[
    protected void clearJournal()
    {
        LedgerJournalTrans  paymentJournalTrans;

        if (this.isPaymentJournalCreated())
        {
            select firstonly RecId from paymentJournalTrans
            where paymentJournalTrans.JournalNum == this.getPaymentJournalTable().JournalNum;

            if (paymentJournalTrans.RecId)
            {
                info(strFmt("@Cashflowmanagement:PaymentJournalCreated", this.getPaymentJournalTable().JournalNum));
            }
            else
            {
                this.getPaymentJournalTable().delete();
                paymentJournalTableData = null;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates ledger journal with payments.
    /// </summary>
    public void create()
    {
        ttsbegin;
        this.preProcessJournal();
        this.processQueryToPaymentRequestJournal();
        this.postProcessJournal();
        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTable</Name>
				<Source><![CDATA[
    private void createJournalTable()
    {
        LedgerJournalTable paymentJournal;

        paymentJournal.clear();

        paymentJournalTableData = JournalTableData::newTable(paymentJournal);
        paymentJournalTableData.initFromJournalName(paymentJournalTableData.journalStatic().findJournalName(this.getPaymentJournalName()));
        paymentJournal.JournalNum = paymentJournalTableData.nextJournalId();
        paymentJournal.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentJournalName</Name>
				<Source><![CDATA[
    abstract protected JournalNameId getPaymentJournalName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentJournalTable</Name>
				<Source><![CDATA[
    protected LedgerJournalTable getPaymentJournalTable()
    {
        if (!this.isPaymentJournalCreated())
        {
            this.createJournalTable();
        }

        return paymentJournalTableData.journalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init(CFMAccountType _accountType, RefRecId _paymentRequestJournalTableRecId, container _paymentRequestPackedQuery)
    {
        if (_paymentRequestPackedQuery == conNull())
        {
            throw error(Error::missingParameter(null));
        }
        paymentRequestQuery = new Query(_paymentRequestPackedQuery);
        accountType = _accountType;

        select firstonly crossCompany paymentRequestJournalTable
            where paymentRequestJournalTable.RecId == _paymentRequestJournalTableRecId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymentJournalCreated</Name>
				<Source><![CDATA[
    protected boolean isPaymentJournalCreated()
    {
        return paymentJournalTableData != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanies</Name>
				<Source><![CDATA[
    public container parmCompanies(container _companies = companies)
    {
        companies = _companies;

        return companies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSeparatePaymentCompanyCust</Name>
				<Source><![CDATA[
    public NoYes parmSeparatePaymentCompanyCust(NoYes _separatePaymentCompanyCust = separatePaymentCompanyCust)
    {
        separatePaymentCompanyCust = _separatePaymentCompanyCust;

        return separatePaymentCompanyCust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSeparatePaymentCompanyVend</Name>
				<Source><![CDATA[
    public NoYes parmSeparatePaymentCompanyVend(NoYes _separatePaymentCompanyVend = separatePaymentCompanyVend)
    {
        separatePaymentCompanyVend = _separatePaymentCompanyVend;

        return separatePaymentCompanyVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessJournal</Name>
				<Source><![CDATA[
    abstract protected void postProcessJournal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcessJournal</Name>
				<Source><![CDATA[
    abstract protected void preProcessJournal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQueryToPaymentRequestJournal</Name>
				<Source><![CDATA[
    protected void processQueryToPaymentRequestJournal()
    {
        QueryRun qr = new QueryRun(paymentRequestQuery);

        while (qr.next())
        {
            CFMPaymentRequestTable paymentRequestTable = qr.get(tableNum(CFMPaymentRequestTable));
            this.addPaymentRequestToPayment(paymentRequestTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static  CFMPaymentRequestCreatePaymJournal construct(CFMAccountType _accountType,
        RefRecId _paymentRequestJournalTableRecId,
        container _paymentRequestPackedQuery,
        container _companies)
    {
        CFMPaymentRequestCreatePaymJournal paymentRequestCreatePaymJournal;

        CFMAccountTypeAttribute extensionAttribute = new CFMAccountTypeAttribute(_accountType);
        paymentRequestCreatePaymJournal = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(CFMPaymentRequestCreatePaymJournal), extensionAttribute);

        if (paymentRequestCreatePaymJournal == null)
        {
            paymentRequestCreatePaymJournal = new CFMPaymReqCreatePaymJourNull();
        }

        paymentRequestCreatePaymJournal.init(_accountType, _paymentRequestJournalTableRecId, _paymentRequestPackedQuery);
        paymentRequestCreatePaymJournal.parmCompanies(_companies);

        return paymentRequestCreatePaymJournal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>