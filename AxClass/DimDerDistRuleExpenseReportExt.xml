<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimDerDistRuleExpenseReportExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DimDerDistRuleExpenseReportExt</c> class is the dimension derivation distribution rule
///    extension for expense reports.
/// </summary>
[SourceDocumentClassExtensionAttribute(classStr(AccDistRuleExpenseReport))]
public class DimDerDistRuleExpenseReportExt extends DimensionDerivationRuleExtension
{
    ProjectDimDerivationDistRule   projectDimDerivationDistRule;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an object of the <c>projectDimDerivationDistRule</c> class.
    /// </summary>
    public void initialize()
    {
        super();

        projectDimDerivationDistRule = ProjectDimDerivationDistRule::newFromDimensionDerivationRule(dimensionDerivationRule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimAllocList</Name>
				<Source><![CDATA[
    public void populateDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        LedgerDimensionAccount                   ledgerDimension;
        LedgerDimensionAllocation                ledgerDimensionAllocation;
        DebitCredit                              side;
        TrvExpTransSourceDocLineItem             trvExpTransSourceDocLineItem;
        SourceDocumentLineItem                   sourceDocumentLineItemLoc;
        TrvExpTrans                              trvExpTrans;

        if (projectDimDerivationDistRule.parmIsProject())//source document line item is for a project
        {
            //populate ledger dimension allocation list from project setup
            projectDimDerivationDistRule.populateDimAllocList(_ledgerDimensionAllocationList);
        }
        else
        {
            //populate ledger dimension allocation list from expense category setup if the expense line is intercompany.
            sourceDocumentLineItemLoc = dimensionDerivationRule.parmAccountingRule().parmSourceDocumentLineItem();

            if (SourceDocumentLineItemLoc is SourceDocumentLineItemIExpenseReport)
            {
                side = dimensionDerivationRule.parmAccountingRule().parmSide();

                trvExpTransSourceDocLineItem = sourceDocumentLineItemLoc as TrvExpTransSourceDocLineItem;
                trvExpTrans = trvExpTransSourceDocLineItem.parmExpenseLine();

                // Intercompany expenses that have a project ID are not posted in the borrowing LE
                if (trvExpTrans.isIntercompany() && trvExpTrans.ProjId == '')
                {
                    changeCompany(trvExpTrans.InterCompanyLE)
                    {
                        LedgerDimensionBase ledgerDimensionBase = trvExpTransSourceDocLineItem.parmLedgerDimensionDefaultAccount();
                        ledgerDimension  = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionBase, dimensionDerivationRule.parmAccountingRule().parmSourceDocumentLineItem().parmDefaultDimension(), CompanyInfoExtension::getMainAccountDefaultDimension(ledgerDimensionBase));
                    }
                    ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(ledgerDimension,
                                                                                            1,
                                                                                            side,
                                                                                            false);

                    _ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subscribes to events of the dimension derivation rule.
    /// </summary>
    protected void subscribe()
    {
        dimensionDerivationRule.populatingDimAllocListEventHandler += eventhandler(this.populateDimAllocList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>