<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTaxNDFLReportData</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayTaxNDFLReportData implements IRPayNDFLEmplAddress
{
    RPayTaxEmplSum          taxEmplSum;
    RPayTaxIncomeGroupTable taxIncomeGroupTable;
    RHRMEmplTable           emplTable;
    CompanyInfo             companyInfo;
    RHRMPersonTable         rhrmPersonTable;

    RHRMEmplId          emplId;
    ReportPeriod_RU     payPeriod;
    ReportPeriod_RU     reportPeriod;
    RPayRateCode        taxRateCode;
    RPayNDFLSelectEmpl  selectEmpl;
    RPayNDFLType        reportType;
    boolean             taxByBranch;

    QueryRun    queryRun;
    Set         branchesSet;

    LogisticsAddressZipCode         zipCode;
    LogisticsAddressCountryRegion   countryRegion;
    LogisticsAddressState           state;
    LogisticsAddressCounty          county;
    LogisticsAddressCity            city;
    LogisticsAddressDistrict        district;
    LogisticsAddressStreet_RU       street;
    LogisticsPostalAddress          address, adressForeign;
    boolean                         foreignAddress, ruAddress;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>building</Name>
				<Source><![CDATA[
    public LogisticsAddressBuilding_RU building()
    {
        return address.Building_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected Query buildQuery()
    {
        Query   query;
        QueryBuildDataSource qbdsSum;
        SetEnumerator se;

        query = new Query();

        qbdsSum = query.addDataSource(tableNum(RPayTaxEmplSum));
        findOrCreateRange_W(qbdsSum, fieldNum(RPayTaxEmplSum, EmplId), emplId);
        findOrCreateRange_W(qbdsSum, fieldNum(RPayTaxEmplSum, CorrectedPeriod)).value(
            strFmt('(((%1 = %2) && ((%3 >= %4) && (%3 <= %5))) || ((%1 != %2) && ((%1 >= %4) && (%1 <= %5))))',
            fieldStr(RPayTaxEmplSum, CorrectedPeriod),
            date2StrXpp(dateNull()),
            fieldStr(RPayTaxEmplSum, PayPeriod),
            date2StrXpp(dateStartYr(payPeriod)),
            date2StrXpp(payPeriod)));
        qbdsSum.addSortField(fieldNum(RPayTaxEmplSum, TaxRateCode));

        if (taxByBranch)
        {
            qbdsSum.addSortField(fieldNum(RPayTaxEmplSum, BranchId));

            se = branchesSet.getEnumerator();
            while (se.moveNext())
            {
                qbdsSum.addRange(fieldNum(RPayTaxEmplSum, BranchId)).value(queryValue(se.current()));
            }
        }

        qbdsSum.orderMode(OrderMode::GroupBy);
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countyName</Name>
				<Source><![CDATA[
    public Name countyName()
    {
        return county.FullName_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplTable</Name>
				<Source><![CDATA[
    public RHRMEmplTable emplTable()
    {
        return emplTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estate</Name>
				<Source><![CDATA[
    public LogisticsAddressBuildingCompliment estate()
    {
        return address.BuildingCompliment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>flat</Name>
				<Source><![CDATA[
    public LogisticsAddressApartment_RU flat()
    {
        return address.Apartment_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>foreignAddress</Name>
				<Source><![CDATA[
    public LogisticsAddressing foreignAddress()
    {
        return adressForeign.Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init (RHRMEmplId         _emplId,
                         ReportPeriod_RU    _payPeriod,
                         ReportPeriod_RU    _reportPeriod,
                         RPayNDFLSelectEmpl _selectEmpl,
                         RPayNDFLType       _reportType,
                         boolean            _taxByBranch = false,
                         container          _branchesPack = conNull())
    {
        emplId          = _emplId;
        payPeriod       = _payPeriod;
        reportPeriod    = _reportPeriod;
        selectEmpl      = _selectEmpl;
        reportType      = _reportType;
        emplTable       = RHRMEmplTable::find(emplId);
        companyInfo     = CompanyInfo::find();
        taxByBranch     = _taxByBranch;

        if (taxByBranch)
        {
            if (_branchesPack != conNull())
            {
                branchesSet     = Set::create(_branchesPack);
            }
            else
            {
                branchesSet     = new Set(Types::String);
            }
        }

        this.initAddress();

        queryRun = new QueryRun(this.buildQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAddress</Name>
				<Source><![CDATA[
    protected void initAddress()
    {
        LogisticsPostalAddress companyAddress = companyInfo.postalAddress();

        rhrmPersonTable = emplTable.personTable();
        address = DirParty::primaryPostalAddress(rhrmPersonTable.hcmWorker().Person);

        if (address)
        {
            if (address.CountryRegionId == companyAddress.CountryRegionId)
            {
                foreignAddress     = false;
                ruAddress          = true;
            }
            else
            {
                adressForeign   = address;
                foreignAddress  = true;
                ruAddress       = false;
            }
        }

        if ( !foreignAddress)
        {
            adressForeign = rhrmPersonTable.getPostalAddressByRole(
                LogisticsLocationRoleType::Home,
                DateTimeUtil::newDateTime(reportPeriod, 0));

            if (adressForeign && adressForeign.CountryRegionId != companyAddress.CountryRegionId)
            {
                foreignAddress = true;
            }
        }

        if ( !foreignAddress)
        {
            adressForeign = rhrmPersonTable.getPostalAddressByRole(
                LogisticsLocationRoleType::RealAddress_RU,
                DateTimeUtil::newDateTime(reportPeriod, 0));

            if (adressForeign.CountryRegionId != companyAddress.CountryRegionId)
            {
                foreignAddress = true;
            }
        }

        foreignAddress   = foreignAddress && adressForeign;
        ruAddress        = ruAddress && address;

        if (ruAddress)
        {
            countryRegion   = LogisticsAddressCountryRegion::find(address.CountryRegionId ? address.CountryRegionId : companyAddress.CountryRegionId);
            state           = LogisticsAddressState::find(countryRegion.CountryRegionId, address.state ? address.state : companyAddress.state);
            county          = LogisticsAddressCounty::find(countryRegion.CountryRegionId, state.stateId, address.county);
            city            = LogisticsAddressCity::findRecId(address.CityRecId);
            district        = LogisticsAddressDistrict::findRecId(address.District);
            street          = LogisticsAddressStreet_RU::findRecID(address.StreetId_RU);
            zipCode         = LogisticsAddressZipCode::findRecId(address.ZipCodeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPeriodData</Name>
				<Source><![CDATA[
    protected void initPeriodData(RPayRateCode _taxRateCode, BranchId_RU _branchId = '')
    {
        taxRateCode = _taxRateCode;

        select firstonly taxEmplSum
            where taxEmplSum.EmplId    == emplId                        &&
                ((taxEmplSum.CorrectedPeriod == dateNull()              &&
                  taxEmplSum.PayPeriod >= dateStartYr(payPeriod)        &&
                  taxEmplSum.PayPeriod <= payPeriod)                    ||
                 (taxEmplSum.CorrectedPeriod != dateNull()              &&
                  taxEmplSum.CorrectedPeriod >= dateStartYr(payPeriod)  &&
                  taxEmplSum.CorrectedPeriod <= payPeriod))             &&
                  (!taxByBranch || taxEmplSum.BranchId == _branchId)
        join taxIncomeGroupTable
            where taxIncomeGroupTable.RpayTaxIncomeGroupCode == taxEmplSum.RpayTaxIncomeGroupCode   &&
                 (taxIncomeGroupTable.RateCode               == taxRateCode ||
                  taxIncomeGroupTable.RateCodeGroup          == taxRateCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignAddress</Name>
				<Source><![CDATA[
    public boolean isForeignAddress(RPayEmplTaxStatus _taxStatus = this.taxEmplStatus())
    {
        return foreignAddress &&
              (rhrmPersonTable.citizenshipCountryRegionId(reportPeriod) != companyInfo.postalAddress().CountryRegionId ||
               _taxStatus != RPayEmplTaxStatus::Resident);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRuAddress</Name>
				<Source><![CDATA[
    public boolean isRuAddress()
    {
        return ruAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    public boolean moveNext()
    {
        RPayTaxEmplSum          taxEmplSumGroup;
        boolean ret;

        ret = queryRun.next();

        if (ret)
        {
            taxEmplSumGroup          = queryRun.get(tableNum(RPayTaxEmplSum));

            if (taxByBranch)
            {
                this.initPeriodData(taxEmplSumGroup.TaxRateCode, taxEmplSumGroup.BranchId);
            }
            else
            {
                this.initPeriodData(taxEmplSumGroup.TaxRateCode);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>oksmCode</Name>
				<Source><![CDATA[
    public CountryOKSMCode_RU oksmCode()
    {
        return LogisticsAddressCountryRegion::find(foreignAddress ? adressForeign.CountryRegionId : address.CountryRegionId).OKSMCode_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayPeriod</Name>
				<Source><![CDATA[
    public ReportPeriod_RU parmPayPeriod(ReportPeriod_RU    _payPeriod = payPeriod)
    {
        payPeriod = _payPeriod;

        return payPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportType2Value</Name>
				<Source><![CDATA[
    public container reportType2Value(RPayAmount _taxImposed, RPayAmount _taxDeduction)
    {
        RPayTaxRateIncludeType includeType;
        int                    ret;

        boolean isDebtExists()
        {
            if (_taxImposed > _taxDeduction && _taxImposed != 0)
            {
                return true;
            }

            return false;
        }

        switch (true)
        {
            case selectEmpl == RPayNDFLSelectEmpl::NoDebt && reportType == RPayNDFLType::TaxCode:
                if (isDebtExists())
                {
                    ret         = 2;
                    includeType = RPayTaxRateIncludeType::No;
                }
                else
                {
                    ret         = 1;
                    includeType = RPayTaxRateIncludeType::Include;
                }
                break;

            case selectEmpl == RPayNDFLSelectEmpl::Debt && reportType == RPayNDFLType::EmplDebt:
                if (isDebtExists())
                {
                    ret         = 2;
                    includeType = RPayTaxRateIncludeType::Include;
                }
                else
                {
                    ret         = 1;
                    includeType = RPayTaxRateIncludeType::IncludePotential;
                }
                break;

            case selectEmpl == RPayNDFLSelectEmpl::All && reportType == RPayNDFLType::TaxCode:
                ret         = 1;
                includeType = RPayTaxRateIncludeType::Include;
                break;

            case selectEmpl == RPayNDFLSelectEmpl::All && reportType == RPayNDFLType::All:
                if (isDebtExists())
                {
                    ret         = 2;
                    includeType = RPayTaxRateIncludeType::Include;
                }
                else
                {
                    ret         = 1;
                    includeType = RPayTaxRateIncludeType::Include;
                }
                break;

            default:
                throw  error(Error::missingParameter(null));
        }

        return [ret, includeType];
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetQuery</Name>
				<Source><![CDATA[
    public void resetQuery()
    {
        queryRun.reset();

        taxRateCode         = '';
        taxEmplSum          = null;
        taxIncomeGroupTable = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlementName</Name>
				<Source><![CDATA[
    public Name settlementName()
    {
        return district.fullName_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>state</Name>
				<Source><![CDATA[
    public LogisticsAddressStateId state()
    {
        return address.state;
    }

]]></Source>
			</Method>
			<Method>
				<Name>streetName</Name>
				<Source><![CDATA[
    public Name streetName()
    {
        return street.fullName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxEmplStatus</Name>
				<Source><![CDATA[
    public RPayEmplTaxStatus taxEmplStatus()
    {
        QueryRun    queryRunStatus;
        Query       query;
        QueryBuildDataSource qbdsRPayTaxEmplSum,
                             qbdsRPayTaxIncomeGroupTable;
        SetEnumerator se;

        RPayTaxEmplSum rPayTaxEmplSum;
        RPayTaxIncomeGroupTable rPayTaxIncomeGroupTable;

        query = new Query();
        qbdsRPayTaxEmplSum = query.addDataSource(tableNum(RPayTaxEmplSum));
        qbdsRPayTaxEmplSum.firstOnly(true);
        qbdsRPayTaxEmplSum.addSelectionField(fieldNum(RPayTaxEmplSum, RecId));

        qbdsRPayTaxEmplSum.addRange(fieldNum(RPayTaxEmplSum, EmplId)).value(queryValue(emplId));
        qbdsRPayTaxEmplSum.addRange(fieldNum(RPayTaxEmplSum, CorrectedPeriod)).value(
            SysQuery::range(dateStartYr(payPeriod), payPeriod));
        qbdsRPayTaxEmplSum.addRange(fieldNum(RPayTaxEmplSum, PayPeriod)).value(
            strFmt('..%1', endmth(reportPeriod)));

        if (taxByBranch)
        {
            se = branchesSet.getEnumerator();
            while (se.moveNext())
            {
                qbdsRPayTaxEmplSum.addRange(fieldNum(RPayTaxEmplSum, BranchId)).value(queryValue(se.current()));
            }
        }

        queryRunStatus = new QueryRun(query);
        queryRunStatus.next();
        rPayTaxEmplSum = queryRunStatus.get(tableNum(RPayTaxEmplSum));

        query = new Query();
        qbdsRPayTaxEmplSum = query.addDataSource(tableNum(RPayTaxEmplSum));
        qbdsRPayTaxEmplSum.orderMode(OrderMode::GroupBy);
        qbdsRPayTaxEmplSum.addSelectionField(fieldNum(RPayTaxEmplSum, IncomeAmount), SelectionField::Sum);

        qbdsRPayTaxEmplSum.addRange(fieldNum(RPayTaxEmplSum, EmplId)).value(queryValue(emplId));

        if (rPayTaxEmplSum.RecId != 0)
        {
            qbdsRPayTaxEmplSum.addSortField(fieldNum(RPayTaxEmplSum, CorrectedPeriod), SortOrder::Descending);

            qbdsRPayTaxEmplSum.addRange(fieldNum(RPayTaxEmplSum, CorrectedPeriod)).value(
                SysQuery::range(dateStartYr(payPeriod), payPeriod));
            qbdsRPayTaxEmplSum.addRange(fieldNum(RPayTaxEmplSum, PayPeriod)).value(
                strFmt('..%1', endmth(reportPeriod)));
        }
        else
        {
            qbdsRPayTaxEmplSum.addSortField(fieldNum(RPayTaxEmplSum, PayPeriod), SortOrder::Descending);

            qbdsRPayTaxEmplSum.addRange(fieldNum(RPayTaxEmplSum, CorrectedPeriod)).value(
                SysQuery::value(dateNull()));
            qbdsRPayTaxEmplSum.addRange(fieldNum(RPayTaxEmplSum, PayPeriod)).value(
                SysQuery::range(dateStartYr(payPeriod), payPeriod));
        }

        if (taxByBranch)
        {
            se = branchesSet.getEnumerator();
            while (se.moveNext())
            {
                qbdsRPayTaxEmplSum.addRange(fieldNum(RPayTaxEmplSum, BranchId)).value(queryValue(se.current()));
            }
        }

        qbdsRPayTaxIncomeGroupTable = qbdsRPayTaxEmplSum.addDataSource(tableNum(RPayTaxIncomeGroupTable));
        qbdsRPayTaxIncomeGroupTable.addLink(
            fieldNum(RPayTaxEmplSum, RpayTaxIncomeGroupCode),
            fieldNum(RPayTaxIncomeGroupTable, RpayTaxIncomeGroupCode));
        qbdsRPayTaxIncomeGroupTable.orderMode(OrderMode::GroupBy);
        qbdsRPayTaxIncomeGroupTable.addSortField(fieldNum(RPayTaxIncomeGroupTable, EmplTaxStatus));

        queryRunStatus = new QueryRun(query);
        while (queryRunStatus.next())
        {
            rPayTaxEmplSum = queryRunStatus.get(tableNum(RPayTaxEmplSum));
            rPayTaxIncomeGroupTable = queryRunStatus.get(tableNum(RPayTaxIncomeGroupTable));

            if (rPayTaxEmplSum.IncomeAmount != 0)
            {
                break;
            }
        }

        return rPayTaxIncomeGroupTable.EmplTaxStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxEmplSum</Name>
				<Source><![CDATA[
    public RPayTaxEmplSum taxEmplSum()
    {
        return taxEmplSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxIncomeGroupTable</Name>
				<Source><![CDATA[
    public RPayTaxIncomeGroupTable taxIncomeGroupTable()
    {
        return taxIncomeGroupTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>townName</Name>
				<Source><![CDATA[
    public Name townName()
    {
        return city.fullName_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>zipCode</Name>
				<Source><![CDATA[
    public LogisticsAddressZipCodeId zipCode()
    {
        return address.ZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static RPayTaxNDFLReportData construct(RHRMEmplId         _emplId,
                                                         ReportPeriod_RU    _payPeriod,
                                                         ReportPeriod_RU    _reportPeriod,
                                                         RPayNDFLSelectEmpl _selectEmpl,
                                                         RPayNDFLType       _reportType,
                                                         boolean            _taxByBranch = false,
                                                         container          _branchesPack = conNull())
    {
        RPayTaxNDFLReportData   taxReportData = new RPayTaxNDFLReportData();

        taxReportData.init(_emplId,
                           _payPeriod,
                           _reportPeriod,
                           _selectEmpl,
                           _reportType,
                           _taxByBranch,
                           _branchesPack);

        return taxReportData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>