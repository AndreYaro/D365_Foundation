<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDisposalDPCZLV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetDisposalDPCZLV</c> class is the data provider for the <c>AssetDisposalActCZLV</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(AssetDisposalCZLV)),
    SRSReportParameterAttribute(classstr(AssetDisposalContractCZLV))
]
public class AssetDisposalDPCZLV extends SrsReportDataProviderPreProcessTempDB
{
    AssetDisposalTmpCZLV assetDisposalTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetDisposalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the data in the <c>AssetDisposalTmpCZLV</c> table.
    /// </summary>
    /// <returns>
    ///     The <c>AssetDisposalTmpCZLV</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(AssetDisposalTmpCZLV))
    ]
    public AssetDisposalTmpCZLV getAssetDisposalTmp()
    {
        select assetDisposalTmp;
        return assetDisposalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        AssetTable                 assetTable;
        AssetTrans                 assetTrans;
        MainAccount                mainAccount;
        GeneralJournalAccountEntry generalJournalAE;
        AssetDisposalContractCZLV  contract;
        QueryRun                   queryRun;
        RNumDateInWordConverter  wordConverter;

        RecId                      assetDisposalTmpRecId;
        boolean                    firstRecord = false;
        AssetId                    assetId;
        AssetBookId                assetBookId;
        AssetAcquisitionDate       assetAcquisitionDate;
        DocumentDate               documentDate;

        contract     = this.parmDataContract() as AssetDisposalContractCZLV;
        documentDate = contract.parmDocumentDate();

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            assetTable       = queryRun.get(tableNum(AssetTable)) as AssetTable;
            assetTrans       = queryRun.get(tableNum(AssetTrans)) as AssetTrans;

            if (queryRun.changed(tableNum(AssetTrans)))
            {
                assetTrans.updateDocument_W(contract.parmDocumentNumber(), contract.parmDocumentDate());
                assetId              = assetTrans.AssetId;
                assetBookId          = assetTrans.BookId;
                assetAcquisitionDate = AssetBook::find(assetTrans.AssetId, assetTrans.BookId).AcquisitionDate;
            }

            mainAccount      = queryRun.get(tableNum(MainAccount)) as MainAccount;
            generalJournalAE = queryRun.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;

            if (generalJournalAE.AccountingCurrencyAmount == 0)
            {
                continue;
            }

            assetDisposalTmp.MainAccountId    = mainAccount.MainAccountId;
            assetDisposalTmp.initFromAssetTable(assetTable);
            assetDisposalTmp.initFromAssetTrans(assetTrans);
            assetDisposalTmp.initFromGeneralJournalAccountEntry(generalJournalAE);

            assetDisposalTmp.insert();

            if (!firstRecord)
            {
                assetDisposalTmpRecId = assetDisposalTmp.RecId;
                firstRecord           = true;
            }
        }

        if (firstRecord)
        {
            wordConverter = RNumDateInWordConverter::construct(currentUserLanguage());
            ttsBegin;
            select forUpdate assetDisposalTmp
                where assetDisposalTmp.RecId == assetDisposalTmpRecId;
            assetDisposalTmp.initFromCompanyInfo(CompanyInfo::find());
            // date2strExt() is returning a trailing space so use trim function to get rid of it
            assetDisposalTmp.LongDisposalDate = strLRTrim(wordConverter.date2strExt(documentDate));

            select count(RecId) from assetTrans
                where assetTrans.AssetId == assetId        &&
                assetTrans.BookId        == assetBookId    &&
                assetTrans.TransType     == AssetTransType::AcquisitionAdj;

            assetDisposalTmp.AcquisitionAdjCount  = any2int(assetTrans.RecId);
            assetDisposalTmp.AssetAcquisitionDate = assetAcquisitionDate;
            assetDisposalTmp.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>