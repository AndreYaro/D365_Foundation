<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCImportAttributeBindingHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class PCImportAttributeBindingHandler extends PCImportNodeHandlerWithAttributes
{
    TableId                         tableId;
    FieldId                         fieldId;
    PCTemplateFind                  templateFind;

    private boolean isPCTemplateAttributeFindOrCreateImportFlightEnabled = PCTemplateAttributeFindOrCreateImportFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>importData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the IDs of a table and a field in it from the XML, uses them to find the template attribute and
    /// sets a reference to it. Than performs any custom initialization of the buffer and inserts one record
    /// for each template component (i.e., for each of the selected legal entities).
    /// </summary>
    protected void importData()
    {
        PCImportTemplateComponentHandler    parent  = this.parent();
        ListEnumerator                      le      = parent.insertedTemplateComponents().getEnumerator();

        templateFind = PCTemplateFind::construct();

        tableId = tableName2id(this.getFieldByName(#Table));
        fieldId = fieldName2id(tableId, this.getFieldByName(#Field));

        PCTemplateAttribute fieldReference;
        
        if (isPCTemplateAttributeFindOrCreateImportFlightEnabled)
        {
            fieldReference = templateFind.findOrCreateTemplateAttributeByTableIdAndFieldId(tableId, fieldId);
        }
        else
        {
            fieldReference = templateFind.findTemplateAttributeByTableIdAndFieldId(tableId, fieldId);
        }

        this.record().setFieldValue(fieldStr(PCTemplateAttributeBinding, TemplateAttribute), fieldReference.RecId);

        this.performCustomInitialization();

        while (le.moveNext())
        {
            this.record().setFieldValue(fieldStr(PCTemplateAttributeBinding, TemplateComponent), le.current());
            this.record().insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performCustomInitialization</Name>
				<Source><![CDATA[
    abstract protected void performCustomInitialization()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>