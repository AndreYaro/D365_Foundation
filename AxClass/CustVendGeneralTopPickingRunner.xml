<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendGeneralTopPickingRunner</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendGeneralTopPickingRunner extends RunBaseBatch implements BatchRetryable
{
    private const int CurrentVersion = 1;
    private const int DefalutMaxItemToDispose = 1000;
    private CustVendGeneralTopPickingLogger custVendGeneralTopPickingLogger;
    private RecId parentId;
    private int processedItem;
    private int maxItemSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, parentId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packed)
    {
        int version = RunBase::getVersion(_packed);
        switch (version)
        {
            case CurrentVersion:
                [version, parentId] = _packed;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(RecId _parentId)
    {
        super();
        parentId = _parentId;
        this.configureMaxItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureMaxItem</Name>
				<Source><![CDATA[
    private void configureMaxItem()
    {
        maxItemSet = this.getMaxItemToProcess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        boolean stopOnDispose;
        #OCCRetryCount
        custVendGeneralTopPickingLogger = CustVendGeneralTopPickingLogger::createLogger();
        using (var runActivityContext = custVendGeneralTopPickingLogger.activityContextWithCustomProperties(CustVendGeneralTopPickingInstrumentationConstants::CustVendGeneralTopPickingRunningPhase))
        {
            runActivityContext.addCustomProperty(
                CustVendGeneralTopPickingInstrumentationConstants::IsTTSLevelZero,
                CustVendGeneralTopPickingLogger::bool2str(appl.ttsLevel() == 0));
            CustVendGeneralTopPickingItems custVendGeneralTopPickingItems;
            System.Exception exception;
            boolean hasError;
            
            custVendGeneralTopPickingItems.readPast(true);
            do
            {
                if (this.shouldDisposeAndSpawn())
                {
                    stopOnDispose = true;
                    break;
                }
                try
                {
                    hasError = false;
                    custVendGeneralTopPickingItems.clear();
                    ttsbegin;
                    select pessimisticlock firstonly custVendGeneralTopPickingItems
                        where custVendGeneralTopPickingItems.CustVendGeneralTopPickingHeader == parentId
                            && custVendGeneralTopPickingItems.ProcessingStatus == CustVendGeneralTopPickingProcessingStatus::Initial;

                    if (!custVendGeneralTopPickingItems.RecId)
                    {
                        custVendGeneralTopPickingLogger.logInformation(strFmt('No more available records for CustVendGeneralTopPickingHeader %1', int642Str(parentId)));
                        break;
                    }
                
                    // exec and update status accordingly
                    hasError = !CustVendGeneralTopPickingSandBoxRunner::asyncEntry(custVendGeneralTopPickingItems.ClassId, custVendGeneralTopPickingItems.WorkingPayload, custVendGeneralTopPickingItems.EntryPoint);
                }
                catch (Exception::Deadlock)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        custVendGeneralTopPickingLogger.logInformation(strFmt('Deadlock maximum retry count hit for CustVendGeneralTopPickingHeader %1', int642Str(parentId)));
                        hasError = true;
                    }
                    else
                    {
                        retry;
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            custVendGeneralTopPickingLogger.logInformation(strFmt('Update conflict maximum retry count hit for CustVendGeneralTopPickingHeader %1', int642Str(parentId)));
                            hasError = true;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        custVendGeneralTopPickingLogger.logInformation(strFmt('Update conflict occurred for CustVendGeneralTopPickingHeader %1', int642Str(parentId)));
                        hasError = true;
                    }
                }
                catch (exception)
                {
                    custVendGeneralTopPickingLogger.logInformation(strFmt('Exception %2 occurred for CustVendGeneralTopPickingHeader %1', int642Str(parentId), exception.Message));
                    hasError = true;
                }
                finally
                {
                    // update status accordingly here.
                    if (custVendGeneralTopPickingItems.RecId)
                    {
                        if (hasError)
                        {
                            custVendGeneralTopPickingLogger.logError(strFmt('Execution for CustVendGeneralTopPickingHeader %1 fails', int642Str(parentId)));

                            custVendGeneralTopPickingItems.ProcessingStatus = CustVendGeneralTopPickingProcessingStatus::FinishedWithError;
                        }
                        else
                        {
                            custVendGeneralTopPickingLogger.logInformation(strFmt('Execution for CustVendGeneralTopPickingHeader %1 succeeds', int642Str(parentId)));
                            custVendGeneralTopPickingItems.ProcessingStatus = CustVendGeneralTopPickingProcessingStatus::Finished;
                        }
                        custVendGeneralTopPickingItems.SessionId = SessionId();
                        custVendGeneralTopPickingItems.update();
                    }
                    ttscommit;
                    processedItem ++;
                }
            }
            while (custVendGeneralTopPickingItems.RecId != 0);
        }
        if (stopOnDispose)
        {
            custVendGeneralTopPickingLogger.logInformation(strFmt('New top picking task spawned, %1 items processed', processedItem));
            this.spawnNewTask();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxItemToProcess</Name>
				<Source><![CDATA[
    private int getMaxItemToProcess()
    {
        int maxItem = CustVendGeneralTopPickingDisposingTable::getMaxItemToProcess();
        if (this.validateMaxItem(maxItem))
        {
            return maxItem;
        }
        return DefalutMaxItemToDispose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMaxItem</Name>
				<Source><![CDATA[
    private boolean validateMaxItem(int _maxItem)
    {
        return _maxItem > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>spawnNewTask</Name>
				<Source><![CDATA[
    private void spawnNewTask()
    {
        BatchHeader header = BatchHeader::getCurrentBatchHeader();
        CustVendGeneralTopPickingRunner custVendGeneralTopPickingRunner = new CustVendGeneralTopPickingRunner(parentId);
        custVendGeneralTopPickingRunner.batchInfo().parmRetriesOnFailure(this.parmCurrentBatch().RetriesOnFailure);
        custVendGeneralTopPickingRunner.batchInfo().parmCaption(this.parmCurrentBatch().Caption);
        header.addTask(custVendGeneralTopPickingRunner);
        ttsbegin;
        header.save();
        this.copyConstraints(BatchHeader::getCurrentBatchTask().RecId, custVendGeneralTopPickingRunner.batchInfo().parmBatchId());
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyConstraints</Name>
				<Source><![CDATA[
    private void copyConstraints(RecId _originalTaskId, RecId _newTaskId)
    {
        BatchConstraints batchConstraints;
        select firstonly batchConstraints
            where batchConstraints.DependsOnBatchId == _originalTaskId;
        if (batchConstraints)
        {
            BatchConstraints batchConstraintsToAdd = batchConstraints.data(batchConstraints);
            batchConstraintsToAdd.DependsOnBatchId = _newTaskId;
            batchConstraintsToAdd.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDisposeAndSpawn</Name>
				<Source><![CDATA[
    private boolean shouldDisposeAndSpawn()
    {
        return CustVendGeneralTopPickingSelfDisposeFlight::instance().isEnabled() && processedItem >= maxItemSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@CashManagement:TopPickingRunner";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>