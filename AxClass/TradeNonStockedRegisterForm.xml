<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedRegisterForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class TradeNonStockedRegisterForm
{
    Set                                 selectedToRegisterNow;
    TradeNonStockedRegisterNowQty       totalRegisterNow;
    SalesPurchLine                      salesPurchLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an instance of the <c>InventMovement</c> class based on the order line.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>InventMovement</c> class.
    /// </returns>
    abstract protected InventMovement getInventMovement()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the ordered and registered quantities for the <c>PurchLine</c> table.
    /// </summary>
    /// <returns>
    ///    A container that has the ordered and registered quantities.
    /// </returns>
    abstract protected container getQuantities()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record in the <paramref name="_tradeNonStockedRegisterTmp" /> table that is based on the
    ///    given parameters.
    /// </summary>
    /// <param name="_tradeNonStockedRegisterTmp">
    ///    The <paramref name="_tradeNonStockedRegisterTmp" /> record to be inserted.
    /// </param>
    /// <param name="_statusReceipt">
    ///    The <c>StatusReceipt</c> enumeration value for which to set the <paramref
    ///    name="TradeNonStockedRegisterTmp" /> record.
    /// </param>
    /// <param name="_quantity">
    ///    The quantity in which to set the <c>TradeNonStockedRegisterTmp</c> record.
    /// </param>
    public void insertFromOrderLine(
        TradeNonStockedRegisterTmp      _tradeNonStockedRegisterTmp,
        StatusReceipt                   _statusReceipt,
        TradeNonStockedRegisterNowQty   _quantity)
    {
        SalesPurchLineInterface     salesPurchLineInterface = salesPurchLine.salesPurchLineInterface();
        TradeNonStockedRegisterTmp  tradeNonStockedRegisterTmpLocal;

        tradeNonStockedRegisterTmpLocal.clear();
        tradeNonStockedRegisterTmpLocal.setTmpData(_tradeNonStockedRegisterTmp);
        tradeNonStockedRegisterTmpLocal.SourceDocumentLine = salesPurchLineInterface.parmSourceDocumentLine();
        tradeNonStockedRegisterTmpLocal.InventDimId = salesPurchLineInterface.parmInventDimId();
        tradeNonStockedRegisterTmpLocal.StatusReceipt = _statusReceipt;
        tradeNonStockedRegisterTmpLocal.Quantity = _quantity;
        tradeNonStockedRegisterTmpLocal.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record into the <c>TradeNonStockedRegisterTmp</c> table, depending on the given
    ///    parameters.
    /// </summary>
    /// <param name="_tradeNonStockedRegisterTmp">
    ///    An instance of the <c>TradeNonStockedRegisterTmp</c> table into which to insert records.
    /// </param>
    /// <param name="_purchLine">
    ///    The <c>PurchLine</c> record from which to initialize and create the
    ///    <c>TradeNonStockedRegisterTmp</c> records.
    /// </param>
    /// <param name="_statusReceipt">
    ///    The <c>StatusReceipt</c> value to which to set the <c>TradeNonStockedRegisterTmp</c> record.
    /// </param>
    /// <param name="_quantity">
    ///    The quantity to which to set the <c>TradeNonStockedRegisterTmp</c> record.
    /// </param>
    public void insertFromPurchLine(
        TradeNonStockedRegisterTmp _tradeNonStockedRegisterTmp,
        PurchLine _purchLine,
        StatusReceipt _statusReceipt,
        TradeNonStockedRegisterNowQty _quantity)
    {
        TradeNonStockedRegisterTmp tradeNonStockedRegisterTmpLocal;

        tradeNonStockedRegisterTmpLocal.clear();
        tradeNonStockedRegisterTmpLocal.setTmpData(_tradeNonStockedRegisterTmp);
        tradeNonStockedRegisterTmpLocal.SourceDocumentLine = _purchLine.SourceDocumentLine;
        tradeNonStockedRegisterTmpLocal.InventDimId = _purchLine.InventDimId;
        tradeNonStockedRegisterTmpLocal.StatusReceipt = _statusReceipt;
        tradeNonStockedRegisterTmpLocal.Quantity = _quantity;
        tradeNonStockedRegisterTmpLocal.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromTradeNonStockedRegisterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record into the <c>TradeNonStockedRegisterTmp</c> table, depending on the given
    ///    parameters.
    /// </summary>
    /// <param name="_tradeNonStockedRegisterTmp">
    ///    An instance of the <c>TradeNonStockedRegisterTmp</c> table into which to insert records.
    /// </param>
    /// <param name="_sourceTradeNonStockedRegisterTmp">
    ///    The <c>TradeNonStockedRegisterTmp</c> record from which to initialize and create the
    ///    <c>TradeNonStockedRegisterTmp</c> records.
    /// </param>
    /// <param name="_quantity">
    ///    The quantity to which to set the <c>TradeNonStockedRegisterTmp</c> record.
    /// </param>
    /// <param name="_addToRegisterNow">
    ///    A Boolean value that specifies whether to add the quantity to the register now quantity.
    /// </param>
    public void insertFromTradeNonStockedRegisterTmp(
        TradeNonStockedRegisterTmp      _tradeNonStockedRegisterTmp,
        TradeNonStockedRegisterTmp      _sourceTradeNonStockedRegisterTmp,
        TradeNonStockedRegisterNowQty   _quantity,
        boolean                         _addToRegisterNow = false)
    {
        TradeNonStockedRegisterTmp tradeNonStockedRegisterTmpLocal;

        tradeNonStockedRegisterTmpLocal.clear();
        tradeNonStockedRegisterTmpLocal.setTmpData(_tradeNonStockedRegisterTmp);

        tradeNonStockedRegisterTmpLocal.data(_sourceTradeNonStockedRegisterTmp);
        tradeNonStockedRegisterTmpLocal.Quantity = _quantity;
        tradeNonStockedRegisterTmpLocal.insert();

        if (_addToRegisterNow)
        {
            selectedToRegisterNow.add(_sourceTradeNonStockedRegisterTmp.RecId);
            totalRegisterNow += _quantity;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchLine</Name>
				<Source><![CDATA[
        public SalesPurchLine parmSalesPurchLine(SalesPurchLine _salesPurchLine = salesPurchLine)
    {
        salesPurchLine = _salesPurchLine;
        return salesPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedToRegisterNow</Name>
				<Source><![CDATA[
        public Set parmSelectedToRegisterNow()
    {
        return selectedToRegisterNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalRegisterNow</Name>
				<Source><![CDATA[
        public TradeNonStockedRegisterNowQty parmTotalRegisterNow(TradeNonStockedRegisterNowQty _totalRegisterNow = totalRegisterNow)
    {
        totalRegisterNow = _totalRegisterNow;
        return totalRegisterNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePendingQuantityRows</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the <paramref name="_tradeNonStockedRegisterTmp" /> table with the ordered and registered
    ///    quantities for the purchase line.
    /// </summary>
    /// <param name="_tradeNonStockedRegisterTmp">
    ///    The <paramref name="_tradeNonStockedRegisterTmp" /> records in which to be inserted.
    /// </param>
    public void populatePendingQuantityRows(TradeNonStockedRegisterTmp _tradeNonStockedRegisterTmp)
    {
        UnitQty     registeredQuantity;
        UnitQty     orderedQuantity;

        delete_from _tradeNonStockedRegisterTmp;

        this.resetRegisterNow();

        [orderedQuantity, registeredQuantity] = this.getQuantities();

        if (orderedQuantity)
        {
            this.insertFromOrderLine(_tradeNonStockedRegisterTmp, StatusReceipt::Ordered, orderedQuantity);
        }

        if (registeredQuantity)
        {
            this.insertFromOrderLine(_tradeNonStockedRegisterTmp, StatusReceipt::Registered, registeredQuantity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>register</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Registers the total quantity that is based on the given <paramref
    ///    name="_tradeNonStockedRegisterTmp" /> record.
    /// </summary>
    /// <param name="_tradeNonStockedRegisterTmp">
    ///    The <paramref name="_tradeNonStockedRegisterTmp" /> record from which the total current register
    ///    quantity is derived.
    /// </param>
    public void register(TradeNonStockedRegisterTmp _tradeNonStockedRegisterTmp)
    {
        UnitQty quantityToRegister;

        select sum(Quantity) from _tradeNonStockedRegisterTmp;

        quantityToRegister = _tradeNonStockedRegisterTmp.Quantity;

        TradeNonStockedRegisterForm::registerServer(salesPurchLine, quantityToRegister);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRegisterNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the variables that hold the quantities to register now.
    /// </summary>
    public void resetRegisterNow()
    {
        totalRegisterNow = 0;
        selectedToRegisterNow = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDimFormsetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Registers the total quantity that is based on the given <c>TradeNonStockedRegisterTmp</c> record.
    /// </summary>
    /// <param name="_mode">
    ///    The <c>InventDimFormDesignUpdate</c> enumeration value that indicates if an instance is to be
    ///    created.
    /// </param>
    /// <param name="_formRun">
    ///    The form for which the active inventory dimensions are to be set.
    /// </param>
    public void updateInventDimFormsetup(
        InventDimFormDesignUpdate   _mode,
        FormRun                     _formRun)
    {
        boolean                         resize;
        InventMovement                  movement;
        InventDimCtrl_Frm_Mov_InventWMS inventDimFormSetupInventTrans;

        movement = this.getInventMovement();

        if (!movement)
        {
            return;
        }

        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init:
                inventDimFormSetupInventTrans  = InventDimCtrl_Frm_Mov_InventWMS::newFromFormMovement(_formRun, movement);
                resize = true;
                //fall through
            case InventDimFormDesignUpdate::Active:
                if (!inventDimFormSetupInventTrans)
                {
                    inventDimFormSetupInventTrans  = InventDimCtrl_Frm_Mov_InventWMS::newFromFormMovement(_formRun, movement);
                }
                inventDimFormSetupInventTrans.formActiveSetup(movement.inventDimGroupSetup(), movement);
                inventDimFormSetupInventTrans.formSetControls(true, resize);
                break;

            default:
                throw error(strfmt("@SYS54195",funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>TradeNonStockedRegisterForm</c> class that has the given
    ///    <c>SalesLine</c> or <c>PurchLine</c> table.
    /// </summary>
    /// <param name="_salesPurchLine">
    ///    A <paramref name="_salesPurchLine" /> object based on the <c>TradeNonStockedRegisterForm</c> class.
    /// </param>
    /// <returns>
    ///    A <c>TradeNonStockedRegisterForm</c> object.
    /// </returns>
    public static TradeNonStockedRegisterForm newFromSalesPurchLine(SalesPurchLine _salesPurchLine)
    {
        TradeNonStockedRegisterForm tradeNonStockedRegisterForm;

        if (!_salesPurchLine)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        switch (_salesPurchLine.TableId)
        {
            case tablenum(PurchLine):
                tradeNonStockedRegisterForm = PurchNonStockedRegisterForm::newFromPurchLine(_salesPurchLine);
                break;
            case tablenum(SalesLine):
                tradeNonStockedRegisterForm = SalesNonStockedRegisterForm::newFromSalesLine(_salesPurchLine);
                break;
        }
        tradeNonStockedRegisterForm.parmSalesPurchLine(_salesPurchLine);

        return tradeNonStockedRegisterForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Registers the total quantity that is based on the given <c>TradeNonStockedRegisterTmp</c> record.
    /// </summary>
    /// <param name="_salesPurchLine">
    ///    The order line for which the registration is being done.
    /// </param>
    /// <param name="_quantityToRegister">
    ///    The quantity to be registered.
    /// </param>
    public static void registerServer(SalesPurchLine _salesPurchLine, UnitQty _quantityToRegister)
    {
        TradeNonStockedRegistrationHelper   tradeNonStockedRegistrationHelper;
        WMSArrivalDetailTmp                 wmsArrivalDetailTmp;
        SalesLine                           localSalesLine;

        ttsbegin;
        if (_quantityToRegister)
        {
            if (_salesPurchLine.TableId == tablenum(SalesLine))
            {
                localSalesLine = _salesPurchLine;
                wmsArrivalDetailTmp.ReturnDispositionCodeId  = localSalesLine.ReturnDispositionCodeId;
            }

            wmsArrivalDetailTmp.InventQty = _quantityToRegister;
            wmsArrivalDetailTmp.insert();

            tradeNonStockedRegistrationHelper = TradeNonStockedRegistrationHelper::newFromSalesPurchLine(_salesPurchLine, wmsArrivalDetailTmp);
            tradeNonStockedRegistrationHelper.register(_quantityToRegister);
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>