<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoice4PaymJournalCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesInvoice4PaymJournalCreate_RU</c> class is used to create customer invoice for payment journal.
/// </summary>
[DocumentStatusFactoryAttribute(DocumentStatus::Invoice4Paym_RU)]
class SalesInvoice4PaymJournalCreate_RU extends FormletterJournalCreate
{
    CustInvoice4PaymJour_RU  invoice4PaymJour;
    CustInvoice4PaymTrans_RU invoice4PaymTrans;

    SalesTable               salesTable;
    SalesParmTable           salesParmTable;
    SalesParmUpdate          salesParmUpdate;

    SalesTotals              salesTotals;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    public NumberSeq allocateNumAndVoucher()
    {
        return NumberSeq::newGetNum(SalesParameters::numRefInvoice4PaymId_RU(),
                                    false,
                                    false,
                                    UnknownNoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean ret             = super();

        if (ret)
        {
            CustPaymModeTable custPaymMode = CustPaymModeTable::find(salesTable.PaymMode);
            CompanyBankAccountId bankAccountId = custPaymMode.AccountType == LedgerJournalACType::Bank ?
                                             custPaymMode.parmPaymAccount() : "";
            bankAccountId = bankAccountId ? bankAccountId : CompanyInfo::find().Bank;

            if (bankAccountId)
            {
                ret = BankAccountTable::checkIsActive(bankAccountId,
                                                      salesParmTable.FixedDueDate ?
                                                      salesParmTable.FixedDueDate : salesParmTable.Transdate);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    protected void createJournalHeader()
    {
        invoice4PaymJour.SumTax             = salesTotals.totalTaxAmount();
        invoice4PaymJour.SalesBalance       = salesTotals.totalBalance();
        invoice4PaymJour.EndDisc            = salesTotals.totalEndDisc();
        invoice4PaymJour.RoundOff           = salesTotals.totalRoundOff();
        invoice4PaymJour.RespiteDate        = salesParmUpdate.RespiteDate ? salesParmUpdate.RespiteDate : salesTable.Deadline;
        invoice4PaymJour.Invoice4PaymAmount = salesTotals.totalAmount();

        invoice4PaymJour.insert();

        Docu::copy(salesTable, invoice4PaymJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    protected void createJournalLine(Common _salesParmLine)
    {
        SalesParmLine salesParmLine = _salesParmLine as SalesParmLine;
        SalesLine     salesLine     = salesParmLine.salesLine();
        Label         label         = new Label(invoice4PaymJour.LanguageId);

        invoice4PaymTrans.clear();
        invoice4PaymTrans.initValue();

        invoice4PaymTrans.initFromSalesLine(salesLine);

        invoice4PaymTrans.setLinenum(lineNum);

        invoice4PaymTrans.SalesId          = invoice4PaymJour.SalesId;
        invoice4PaymTrans.Invoice4PaymId   = invoice4PaymJour.Invoice4PaymId;
        invoice4PaymTrans.Invoice4PaymDate = invoice4PaymJour.Invoice4PaymDate;

        invoice4PaymTrans.Qty              = salesParmLine.DeliverNow;
        invoice4PaymTrans.PdsCWQty         = salesParmLine.PdsCWDeliverNow;
        invoice4PaymTrans.LineAmount       = salesLine.calcLineAmountExclTax(invoice4PaymTrans.Qty, this.updateDate(), salesTotals.tax());
        invoice4PaymTrans.LineAmountTax    = salesLine.calcLineAmount(invoice4PaymTrans.Qty) - invoice4PaymTrans.LineAmount;

        invoice4PaymTrans.LineAmountMST    = invoice4PaymJour.amountMST(invoice4PaymTrans.LineAmount);
        invoice4PaymTrans.TaxAmountMST     = invoice4PaymJour.amountMST(invoice4PaymTrans.LineAmountTax);

        invoice4PaymTrans.LineHeader = label.extractString(literalStr("@SYS9694"))  + ' ' + salesLine.SalesId  + ' '
                                     + label.extractString(literalStr("@SYS24704")) + ' ' + salesLine.salesTable().CustAccount  + ' '
                                     + (salesLine.salesTable().PurchOrderFormNum ?
                                        (label.extractString(literalStr("@SYS9452"))  + ' ' + salesLine.salesTable().PurchOrderFormNum + ' ') :
                                        '')
                                     + invoice4PaymTrans.LineHeader;

        invoice4PaymTrans.insert();

        Docu::copy(salesLine, invoice4PaymTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    protected void createJournalLink(Common _salesParmLine)
    {
        SalesParmLine salesParmLine = _salesParmLine as SalesParmLine;
        CustInvoice4PaymSalesLink_RU invoice4PaymLink;

        invoice4PaymLink.clear();
        invoice4PaymLink.OrigSalesId = salesParmLine.OrigSalesId;
        invoice4PaymLink.initFromInvoice4PaymJour(invoice4PaymJour);
        this.insertJournalLink(invoice4PaymLink);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    protected FormletterType formletterType()
    {
        return FormletterType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    public Common getJournal()
    {
        return invoice4PaymJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    protected void initJournalHeader()
    {
        invoice4PaymJour.clear();
        invoice4PaymJour.initValue();

        invoice4PaymJour.Invoice4PaymId   = this.getJournalNumber();

        invoice4PaymJour.ParmId           = salesParmUpdate.ParmId;
        invoice4PaymJour.Invoice4PaymDate = this.updateDate();
        invoice4PaymJour.OffSessionId     = salesParmTable.OffSessionId_RU;
        invoice4PaymJour.FixedDueDate     = salesParmTable.FixedDueDate;
        invoice4PaymJour.PrintMST         = salesParmUpdate.PrintInMST_RU;

        invoice4PaymJour.initFromSalesTable(salesTable);

        invoice4PaymJour.setDocNum(salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceTable</Name>
				<Source><![CDATA[
    protected void initSourceTable()
    {
        salesTable = salesParmTable.salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    protected void initTotals()
    {
        salesTotals = SalesTotals::construct(salesParmTable,
                                             salesParmUpdate.SpecQty,
                                             salesParmUpdate.SumBy,
                                             salesParmUpdate.ParmId,
                                             salesParmUpdate.SumSalesId,
                                             documentStatus);
        salesTotals.fillRecordSortedListLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    protected tableId journalLineTableId()
    {
        return tableNum(CustInvoice4PaymTrans_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linksTableId</Name>
				<Source><![CDATA[
    protected tableId linksTableId()
    {
        return tableNum(CustInvoice4PaymSalesLink_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceNum</Name>
				<Source><![CDATA[
    protected NumberSequenceReference numberSequenceReferenceNum()
    {
        return SalesParameters::numRefInvoice4PaymId_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = salesParmTable)
    {
        salesParmTable = _parmTable as SalesParmTable;
        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _parmUpdate = salesParmUpdate)
    {
        salesParmUpdate = _parmUpdate as SalesParmUpdate;
        return salesParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proforma</Name>
				<Source><![CDATA[
    protected boolean proforma()
    {
        return salesParmUpdate.Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListParmLine</Name>
				<Source><![CDATA[
    protected RecordSortedList recordListParmLine()
    {
        return salesTotals.recordSortedListLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    protected Common sourceTable()
    {
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    protected Object totals()
    {
        return salesTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeParmLine</Name>
				<Source><![CDATA[
    protected Common typeParmLine()
    {
        SalesParmLine parmLine;
        return parmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the date of update.
    /// </summary>
    /// <returns>
    ///   The date of update.
    /// </returns>
    protected TransDate updateDate()
    {
        return salesParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            throw error(strFmt("@SYS19306", funcName()));
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesInvoice4PaymJournalCreate_RU construct()
    {
        return new SalesInvoice4PaymJournalCreate_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
