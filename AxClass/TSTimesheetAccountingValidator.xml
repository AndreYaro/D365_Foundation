<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSTimesheetAccountingValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
/// <summary>
/// Validates timesheet posting data.
/// </summary>
[ExportMetadataAttribute(enumStr(SourceDocument_ProjectTimesheets), SourceDocument_ProjectTimesheets::Timesheets)]
[ExportAttribute('Microsoft.Dynamics.AX.Application.SubledgerJournalizerDocumentValidationIProvider')]
internal final class TSTimesheetAccountingValidator implements SubledgerJournalizerDocumentValidationIProvider
{
    boolean errorsFound;
    TSTimesheetInstrumentationLogger postingLogger;
    boolean ledgerEntriesRequired;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDocument</Name>
				<Source><![CDATA[
    public void validateDocument(
        AccountingEvent _accountingEvent,
        Voucher _voucher,
        SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing,
        AccountingDistributionTmpForValidation _accountingDistributionTmpForValidation,
        SubledgerJournalAccountEntryTmpForValidation _subledgerJournalAccountEntryTmpForValidation)
    {
        if (FeatureStateProvider::isFeatureEnabled(TSTimesheetAccountingValidatorFeature::instance()))
        {
            postingLogger = TSTimesheetInstrumentationLogger::createLogger('TSTimesheetPostSourceDocumentValidation');
            TSTimesheetInstrumentationActivities postingActivities = TSTimesheetInstrumentationActivities::construct(postingLogger);

            using (var timesheetPostContext = postingActivities.postTimesheetDocument())
            {
                this.validateProjectTimesheetWeek(_sourceDocumentLineSubmittedForProcessing);
                this.validateSourceDocumentHeaderIsLinkedToTSTimesheetTable(_sourceDocumentLineSubmittedForProcessing);
                this.validateSourceDocumentLineIsLinkedToTSTimesheetTrans(_sourceDocumentLineSubmittedForProcessing);
                this.validateLedgerForTimesheet(_subledgerJournalAccountEntryTmpForValidation, _sourceDocumentLineSubmittedForProcessing, _accountingDistributionTmpForValidation);

                if (ledgerEntriesRequired)
                {
                    this.validateProjectTransactions(_sourceDocumentLineSubmittedForProcessing);
                }
            
                if (errorsFound)
                {
                    throw error('@Timesheet:TSSourceDocumentValidationFailed');
                }
            }
        }    
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceDocumentHeaderIsLinkedToTSTimesheetTable</Name>
				<Source><![CDATA[
    private void validateSourceDocumentHeaderIsLinkedToTSTimesheetTable(SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing)
    {
        if (FeatureStateProvider::isFeatureEnabled(TSTimesheetValidatorSourceDocumentHeaderLinkRuleFlight::instance()))
        {
            TSTimesheetTable tsTimesheetTable;
        
            select firstonly SourceDocumentLineRecId from _sourceDocumentLineSubmittedForProcessing
                where (_sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(TSTimesheetTrans) ||
                       _sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(TSTimesheetLine))
                notexists join tsTimesheetTable
                where tsTimesheetTable.SourceDocumentHeader == _sourceDocumentLineSubmittedForProcessing.SourceDocumentHeader;

            if (_sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId != 0)
            {
                errorsFound = true;
                postingLogger.logError('@Timesheet:TSSourceDocumentHeaderNotMapped');
                error('@Timesheet:TSSourceDocumentHeaderNotMapped');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceDocumentLineIsLinkedToTSTimesheetTrans</Name>
				<Source><![CDATA[
    private void validateSourceDocumentLineIsLinkedToTSTimesheetTrans(SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing)
    {
        if (FeatureStateProvider::isFeatureEnabled(TSTimesheetValidatorSourceDocumentLineLinkRuleFlight::instance()))
        {
            TSTimesheetTrans tsTimesheetTrans;
        
            select firstonly SourceDocumentLineRecId from _sourceDocumentLineSubmittedForProcessing
                where (_sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(TSTimesheetTrans) ||
                       _sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(TSTimesheetLine))
                notexists join  tsTimesheetTrans
                where tsTimesheetTrans.SourceDocumentLine == _sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId;

            if (_sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId != 0)
            {
                errorsFound = true;
                postingLogger.logError('@Timesheet:TSSourceDocumentLineNotMapped');
                error('@Timesheet:TSSourceDocumentLineNotMapped');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectTransactions</Name>
				<Source><![CDATA[
    private void validateProjectTransactions(SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing)
    {        
        if (FeatureStateProvider::isFeatureEnabled(TSTimesheetValidatorProjTransCreatedRuleFlight::instance()))
        {
            ProjEmplTrans projEmplTrans;
            TSTimesheetLine tsTimesheetLine;
            TSTimesheetTrans tsTimesheetTrans;
            TSTimesheetLineWeek tsTimesheetLineWeek;
            AccountingDistribution accountingDistribution;
            ProjectAccountingDistribution projectAccountingDistribution;
            ProjTable projTable;
            ProjGroup projGroup;
        
            select firstonly SourceDocumentLineRecId from _sourceDocumentLineSubmittedForProcessing
            where (_sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(TSTimesheetTrans)
                   || _sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(TSTimesheetLine))
                join  tsTimesheetTrans
                where tsTimesheetTrans.SourceDocumentLine == _sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId
                    join RecId from accountingDistribution
                    where accountingDistribution.SourceDocumentLine == tsTimesheetTrans.SourceDocumentLine
                        join RecId from projectAccountingDistribution
                        where projectAccountingDistribution.AccountingDistribution == accountingDistribution.RecId
                            join RecId from projTable
                            where projTable.RecId == projectAccountingDistribution.ProjTable
                                join projGroup
                                where projGroup.ProjGroupId == projTable.ProjGroupId
                                   && (projGroup.EmplTransCost != ProjLedgerStatus::Never
                                       && projGroup.EmplTransCost != ProjLedgerStatus::None)
                                    join tsTimesheetLineWeek
                                    where tsTimesheetLineWeek.RecId == tsTimesheetTrans.TSTimesheetLineWeek
                                        join tsTimesheetLine
                                        where tsTimesheetLine.RecId == tsTimesheetLineWeek.TSTimesheetLine
                                           && tsTimesheetLine.ProjectDataAreaId == tsTimesheetLine.dataAreaId
                                    notexists join projEmplTrans
                                    where projEmplTrans.TransId == tsTimesheetTrans.TransId;
        
            if (_sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId != 0)
            {
                errorsFound = true;
                postingLogger.logError('@Timesheet:TSSourceDocumentLineNotMapped');
                error('@Timesheet:TSSourceDocumentMissingProjectTransaction');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerForTimesheet</Name>
				<Source><![CDATA[
    private void validateLedgerForTimesheet(
        SubledgerJournalAccountEntryTmpForValidation _subledgerJournalAccountEntryTmpForValidation,
        SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing,
        AccountingDistributionTmpForValidation _accountingDistributionTmpForValidation)
    {
        if (FeatureStateProvider::isFeatureEnabled(TSTimesheetAccValidatorSubledgerExistsRuleFlight::instance()))
        {
            ProjectAccountingDistribution projectAccountingDistribution;
            AccountingDistribution accountingDistribution;
            ProjTable projTable;
            ProjGroup projGroup;
        
            select firstonly sum(TransactionCurrencyAmount) from _accountingDistributionTmpForValidation
            join RecId from accountingDistribution
            where accountingDistribution.SourceDocumentLine == _accountingDistributionTmpForValidation.SourceDocumentLine
                join RecId from projectAccountingDistribution
                where projectAccountingDistribution.AccountingDistribution == accountingDistribution.RecId
                    join RecId from projTable
                    where projTable.RecId == projectAccountingDistribution.ProjTable
                        join projGroup
                        where projGroup.ProjGroupId == projTable.ProjGroupId
                           && (projGroup.EmplTransCost != ProjLedgerStatus::Never
                               && projGroup.EmplTransCost != ProjLedgerStatus::None);

            ledgerEntriesRequired = _accountingDistributionTmpForValidation.TransactionCurrencyAmount != 0;
                    
            if (ledgerEntriesRequired)
            {
                select LedgerDimension from _subledgerJournalAccountEntryTmpForValidation;

                if (!_subledgerJournalAccountEntryTmpForValidation.LedgerDimension)
                {
                    errorsFound = true;
                    postingLogger.logError('@Timesheet:TSSourceDocumentMissingLedger');
                    error('@Timesheet:TSSourceDocumentMissingLedger');
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectTimesheetWeek</Name>
				<Source><![CDATA[
    private void validateProjectTimesheetWeek(SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing)
    {
        if (FeatureStateProvider::isFeatureEnabled(TSTimesheetValidatorProjTimesheetWeekExistsRuleFlight::instance()))
        {
            ProjEmplTrans projEmplTrans;
            TSTimesheetLine tsTimesheetLine;
            TSTimesheetTrans tsTimesheetTrans;
            TSTimesheetLineWeek tsTimesheetLineWeek;
            ProjPeriodTimesheetWeek timesheetWeek;
        
            TSTimesheetTable tsTimesheetTable;
        
            select firstonly SourceDocumentLineRecId from _sourceDocumentLineSubmittedForProcessing
                where (_sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(TSTimesheetTrans) ||
                       _sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(TSTimesheetLine))
                exists join tsTimesheetTable
                where tsTimesheetTable.SourceDocumentHeader == _sourceDocumentLineSubmittedForProcessing.SourceDocumentHeader
                    exists join tsTimesheetLine
                    where tsTimesheetLine.TimesheetNbr == tsTimesheetTable.TimesheetNbr
                        notexists join timesheetWeek
                        where timesheetWeek.RecId == tsTimesheetLine.ProjPeriodTimesheetWeek;
            
            if (_sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId)
            {
                errorsFound = true;
                postingLogger.logError('@Timesheet:TSSourceDocumentMissingTimesheetWeek');
                error('@Timesheet:TSSourceDocumentMissingTimesheetWeek');
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>