<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingQualityOrderSummaryFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>InventTrackingQualityOrderSummaryFilter</c> class provides tracing hierarchy filtering for
///     the <see cref="InventQualityOrderTable"/> form.
/// </summary>
public class InventTrackingQualityOrderSummaryFilter extends InventTrackingTraceSummaryFilter
{
    Set insertedQualityOrders;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addQualityOrderDataSource</Name>
				<Source><![CDATA[
    private QueryBuildDataSource addQualityOrderDataSource(
         Query   _query,
         ItemId  _itemId)
    {
        QueryBuildDataSource qbds = _query.addDataSource(tableNum(InventQualityOrderTable));
        QueryBuildRange qbr = qbds.addRange(fieldNum(InventQualityOrderTable, ItemId));
        qbr.value(queryValue(_itemId));

        QueryBuildFieldList qbfl = qbds.fields();
        qbfl.addField(fieldNum(InventQualityOrderTable, QualityOrderId));

        return qbds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQualityOrderQueryNoDims</Name>
				<Source><![CDATA[
    private Query buildQualityOrderQueryNoDims(
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm)
    {
        Query                   query = new Query();

        QueryBuildDataSource qbds = this.addQualityOrderDataSource(query, _itemId);
        QueryBuildRange qbr = qbds.addRange(fieldNum(InventQualityOrderTable, OrderStatus));
        qbr.value(queryValue(InventTestOrderStatus::Open));

        this.inventDimExistsJoin(qbds, _inventDimCriteria, _inventDimParm, true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQualityOrderQueryWithDims</Name>
				<Source><![CDATA[
    private Query buildQualityOrderQueryWithDims(
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm)
    {
        Query                   query = new Query();

        QueryBuildDataSource qbds = this.addQualityOrderDataSource(query, _itemId);

        this.inventDimExistsJoin(qbds, _inventDimCriteria, _inventDimParm, false);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterTableType</Name>
				<Source><![CDATA[
    protected TableId filterTableType()
    {
        return tableNum(InventQualityOrderTmpFilter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeInFilterDTO</Name>
				<Source><![CDATA[
    protected boolean includeInFilterDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        // all transactions / transaction origins should be considered when building a filter for quality orders
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        super();

        insertedQualityOrders = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertKeyDataDTO</Name>
				<Source><![CDATA[
    protected void insertKeyDataDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        InventQualityOrderTable inventQualityOrderTable;
        InventDim               inventDimCriteria;

        ItemId itemId = _inventTransOriginDTO.itemId();

        InventDimParm inventDimParm = InventTable::find(itemId).inventDimParmActiveDimensions();
        inventDimParm.clearProductDimensions();
        inventDimParm.clearStorageDimensions();

        inventDimCriteria.initFromInventDim(_inventTransDTO.inventDim());

        // quality orders for this inventory transaction
        while select QualityOrderId from inventQualityOrderTable
            where inventQualityOrderTable.InventRefTransId == _inventTransOriginDTO.inventTransId()
                    // destructive QO's have an invent trans which shows up in the tree
                    || inventQualityOrderTable.InventTransId   == _inventTransOriginDTO.inventTransId()
        {
            this.insertQualityOrder(inventQualityOrderTable.RecId, inventQualityOrderTable.QualityOrderId);
        }

        // quality orders with all tracking dimensions specified, independent of order status
        QueryRun queryRun = new QueryRun(this.buildQualityOrderQueryWithDims(itemId, inventDimCriteria, inventDimParm));
        while (queryRun.next())
        {
            inventQualityOrderTable = queryRun.get(tableNum(InventQualityOrderTable));
            this.insertQualityOrder(inventQualityOrderTable.RecId, inventQualityOrderTable.QualityOrderId);
        }

        // open quality orders, possibly with not all tracking dimensions specified
        queryRun = new QueryRun(this.buildQualityOrderQueryNoDims(itemId, inventDimCriteria, inventDimParm));
        while (queryRun.next())
        {
            inventQualityOrderTable = queryRun.get(tableNum(InventQualityOrderTable));
            inventQualityOrderTable = InventQualityOrderTable::find(inventQualityOrderTable.QualityOrderId);
            if (this.canCreateQualityOrder(inventQualityOrderTable, _inventTransOriginDTO, inventDimCriteria, inventDimParm))
            {
                this.insertQualityOrder(inventQualityOrderTable.RecId, inventQualityOrderTable.QualityOrderId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if quality order can be created
    /// </summary>
    /// <param name = "_inventQualityOrderTable">
    /// A quality order which to check.
    /// </param>
    /// <param name = "_inventTransOriginDTO">
    /// An inventory transaction origin.
    /// </param>
    /// <param name = "_inventDimCriteria">
    /// An inventory dimension criteria.
    /// </param>
    /// <param name = "_inventDimParm">
    /// An inventory dimension parameters.
    /// </param>
    /// <returns>
    ///  True if quality order can be created; otherwise false.
    ///  </returns>
    protected boolean canCreateQualityOrder(
        InventQualityOrderTable                         _inventQualityOrderTable,
        InventTrackingDimTracingInventTransOriginDTO    _inventTransOriginDTO,
        InventDim                                       _inventDimCriteria,
        InventDimParm                                   _inventDimParm)
    {
        return _inventQualityOrderTable.ReferenceType == InventTestReferenceType::Inventory
            || ((!insertedQualityOrders.in(_inventQualityOrderTable.RecId)
                 && _inventQualityOrderTable.InventRefTransId != _inventTransOriginDTO.inventTransId()
                 && this.canQualityOrderReferenceLotHaveTrackingDims(_inventQualityOrderTable, _inventDimCriteria, _inventDimParm)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canQualityOrderReferenceLotHaveTrackingDims</Name>
				<Source><![CDATA[
    private boolean canQualityOrderReferenceLotHaveTrackingDims(
        InventQualityOrderTable _inventQualityOrderTable,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParm)
    {
        boolean ret;
                
        if (_inventQualityOrderTable.InventRefTransId)
        {
            InventTrans inventTrans;
            InventTransOrigin inventTransOrigin;
            InventDim inventDim;

            select firstonly RecId from inventTransOrigin
                where inventTransOrigin.InventTransId == _inventQualityOrderTable.InventRefTransId
                exists join inventTrans
                    where inventTrans.inventTransOrigin == inventTransOrigin.RecId
                    #InventDimExistsJoinAllowBlank(inventTrans.InventDimId, inventDim, _inventDimCriteria, _inventDimParm, _inventDimParm);
            ret = inventTransOrigin.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertQualityOrder</Name>
				<Source><![CDATA[
    private void insertQualityOrder(
        RefRecId _recId,
        InventQualityOrderId _inventQualityOrderId)
    {
        InventQualityOrderTmpFilter     inventQualityOrderTmpFilter = filterTmp as InventQualityOrderTmpFilter;

        if (!insertedQualityOrders.in(_recId))
        {
            insertedQualityOrders.add(_recId);

            inventQualityOrderTmpFilter.InventQualityOrderId = _inventQualityOrderId;
            inventQualityOrderTmpFilter.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transKeyDTO</Name>
				<Source><![CDATA[
    protected str transKeyDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        return _inventTransOriginDTO.inventTransId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new instance of <c>InventTrackingQualityOrderSummaryFilter</c>
    /// </summary>
    /// <returns>
    ///     An initialized quality order filter.
    /// </returns>
    public static InventTrackingQualityOrderSummaryFilter construct()
    {
        return new InventTrackingQualityOrderSummaryFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of <c>InventTrackingQualityOrderSummaryFilter</c> from tracing hierarchy.
    /// </summary>
    /// <param name="_hierarchy">
    ///     Tracing hierarchy.
    /// </param>
    /// <returns>
    ///     Initialized quality order filter, with hierarchy set.
    /// </returns>
    public static InventTrackingQualityOrderSummaryFilter newHierarchy(InventTrackingDimTracingHierarchy _hierarchy)
    {
        InventTrackingQualityOrderSummaryFilter filter = InventTrackingQualityOrderSummaryFilter::construct();

        filter.parmTracingHierarchy(_hierarchy);

        return filter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
