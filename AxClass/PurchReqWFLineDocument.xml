<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqWFLineDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReqWFLineDocument</c> class is used for the purchase requisition line workflow.
/// </summary>
/// <remarks>
/// This class inherits from the <c>WorkflowDocument</c> class and handles and is used as the
/// underlying query for the purchase requisition line workflow.
/// </remarks>
[
WorkflowDocIsQueueEnabledAttribute(true,"@SYS319806"),
ExpressionCurrencyFieldMapAttribute('parmApprovalAmountTotal', 'CurrencyCode'),
ExpressionCurrencyFieldMapAttribute('parmApprovalAmountRequester', 'CurrencyCode'),
ExpressionCurrencyFieldMapAttribute('parmApprovalAmountExclTaxRequester', 'CurrencyCode'),
ExpressionCurrencyFieldMapAttribute('parmApprovalAmountExclTaxTotal', 'CurrencyCode'),
ExpressionCurrencyFieldMapAttribute('parmSpendingLimit', 'CurrencyCode'),
ExpressionHierarchyProviderAttribute(classStr(PurchReqExpressionProvider), tableStr(PurchReqLine), fieldStr(PurchReqLine,ProcurementCategory))
]
class PurchReqWFLineDocument extends WorkflowDocument implements SysErrorMessageHelpScopeIWorkflow
{
    /// <summary>
    /// Checks whether the context of the record is valid.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID of the record to validate.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record to validate.
    /// </param>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkContext</Name>
				<Source><![CDATA[
    protected void checkContext(TableId    _tableId,
                                RecId      _recId)
    {
        if (_tableId != tableNum(PurchReqLine))
        {
            // Workflow context table id reference: %1 is not valid
            throw error(strFmt("@SYS107963", _tableId));
        }

        if (_recId == 0)
        {
            // Workflow context record id is zero.
            throw error("@SYS107964");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the underlying query.
    /// </summary>
    /// <returns>
    /// The name of the underlying query.
    /// </returns>

    QueryName getQueryName()
    {
        return queryStr(PurchReqWFLineDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApprovalAmountExclTaxRequester</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the line amount total, excluding tax, of all lines for a requester.
    /// </summary>
    /// <param name="_companyId">
    /// The Company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The Table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The Record ID of the record.
    /// </param>
    /// <returns>
    /// The total line amount total, excluding tax, of all lines that have the same requester.
    /// </returns>

    public PurchReqAmountApprovalExclTaxRequester parmApprovalAmountExclTaxRequester(CompanyId _companyId,
                                                                                     TableId   _tableId,
                                                                                     RecId     _recId)
    {
        PurchReqAmountApproval  amount;
        PurchReqLine            purchReqLine;
        RecId                   requesterRecId;
        RecId                   purchReqTableRecId;
        CurrencyCode            baseCurrencyCode;

        this.checkContext(_tableId, _recId);

        requesterRecId     = PurchReqLine::find(_recId).Requisitioner;
        purchReqTableRecId = PurchReqLine::find(_recId).PurchReqTable;
        baseCurrencyCode   = PurchReqLine::find(_recId).CurrencyCode;

        while select purchReqLine where purchReqLine.PurchReqTable      == purchReqTableRecId &&
                                        purchReqLine.Requisitioner      == requesterRecId
        {
            changecompany(purchReqLine.buyingLegalEntity2DataArea())
            {
                amount = amount + CurrencyExchangeHelper::curAmount2CurAmount(purchReqLine.calcLineAmountExclTax(), purchReqLine.CurrencyCode, baseCurrencyCode);
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApprovalAmountExclTaxTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amount, excluding tax, for the purchase requisition.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The total amount, excluding tax, for the purchase requisition.
    /// </returns>

    public PurchReqAmountApprovalExclTax parmApprovalAmountExclTaxTotal(CompanyId _companyId,
                                                                        TableId   _tableId,
                                                                        RecId     _recId)
    {
        PurchReqLine    purchReqLine;

        this.checkContext(_tableId, _recId);

        purchReqLine = PurchReqLine::find(_recId);

        changecompany(purchReqLine.buyingLegalEntity2DataArea())
        {
            return PurchReqDocument::approvalAmountExclTaxStatic(purchReqLine.PurchReqTable, purchReqLine.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApprovalAmountRequester</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates line amount total of all lines for a requester.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The line amount total of all lines that have the same requester.
    /// </returns>

    public PurchReqAmountApprovalRequester parmApprovalAmountRequester(CompanyId _companyId,
                                                                       TableId   _tableId,
                                                                       RecId     _recId)
    {
        PurchReqAmountApproval  amount;
        PurchReqLine            purchReqLine;
        RecId                   purchReqTableRecId;
        RecId                   requesterRecId;
        CurrencyCode            baseCurrencyCode;

        this.checkContext(_tableId, _recId);

        requesterRecId     = PurchReqLine::find(_recId).Requisitioner;
        purchReqTableRecId = PurchReqLine::find(_recId).PurchReqTable;
        baseCurrencyCode   = PurchReqLine::find(_recId).CurrencyCode;

        while select purchReqLine where purchReqLine.PurchReqTable      == purchReqTableRecId &&
                                        purchReqLine.Requisitioner      == requesterRecId
        {
            changecompany(purchReqLine.buyingLegalEntity2DataArea())
            {
                amount = amount + CurrencyExchangeHelper::curAmount2CurAmount(purchReqLine.calcLineAmount(), purchReqLine.CurrencyCode, baseCurrencyCode);
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApprovalAmountTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amount for the purchase requisition.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// The total amount for the purchase requisition.
    /// </returns>

    public PurchReqAmountApproval parmApprovalAmountTotal(CompanyId _companyId,
                                                                 TableId   _tableId,
                                                                 RecId     _recId)
    {
        PurchReqLine    purchReqLine;

        this.checkContext(_tableId, _recId);

        purchReqLine = PurchReqLine::find(_recId);

        changecompany(purchReqLine.buyingLegalEntity2DataArea())
        {
            return PurchReqDocument::approvalAmountStatic(purchReqLine.PurchReqTable, purchReqLine.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetSourceCheckResult</c> value for the purchase requisition line workflow instance.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// The <c>BudgetSourceCheckResult</c> value.
    /// </returns>
    public BudgetSourceCheckResult parmBudgetCheckResult(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        BudgetSourceCheckResult budgetCheckResult;
        PurchReqLine            purchReqLine;

        this.checkContext(_tableId, _recId);

        purchReqLine        = PurchReqLine::find(_recId);

        changecompany(purchReqLine.buyingLegalEntity2DataArea())
        {
            budgetCheckResult   = purchReqLine.getBudgetCheckResult();
        }

        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreparer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the preparer of the purchase requisition.
    /// </summary>
    /// <param name="_companyId">
    /// The Company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The Table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The Record ID of the record.
    /// </param>
    /// <returns>
    /// The preparer of the purchase requisition.
    /// </returns>
    public PurchReqPreparerRefRecId parmPreparer(CompanyId _companyId,
                                                 TableId   _tableId,
                                                 RecId     _recId)
    {
        PurchReqLine    purchReqLine;

        this.checkContext(_tableId, _recId);

        select firstonly purchReqLine where purchReqLine.RecId == _recId;

        return purchReqLine.purchReqTable().Originator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpendingLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the spending limit for the requester.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID of the record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record.
    /// </param>
    /// <returns>
    /// Spending limit of the requester.
    /// </returns>

    public PurchReqSpendingLimitValueMST parmSpendingLimit(CompanyId _companyId,
                                                           TableId   _tableId,
                                                           RecId     _recId)
    {
        PurchReqLine    purchReqLine = PurchReqLine::find(_recId);

        this.checkContext(_tableId, _recId);

        purchReqLine = PurchReqLine::find(_recId);

        changecompany(purchReqLine.buyingLegalEntity2DataArea())
        {
            return PurchReqDocument::spendingLimitStatic(purchReqLine.Requisitioner, purchReqLine.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    creates an instance of the <c>PurchReqWFlineDocument</c> class.
    /// </summary>
    /// <returns>
    ///    an instance of the <c>PurchReqWFlineDocument</c> class.
    /// </returns>

    public static PurchReqWFLineDocument construct()
    {
        return new PurchReqWFLineDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoesPurchReqLineReferenceBudgetReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified purchase requisition line references a budget reservation.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the purchase requisition line table.
    /// </param>
    /// <param name="_purchReqLineTableId">
    /// The table ID that corresponds to the purchase requisition line table.
    /// </param>
    /// <param name="_purchReqLineRecId">
    /// The record ID that corresponds to the purchase requisition line table record.
    /// </param>
    /// <returns>
    /// Yes if the current document references a budget reservation; otherwise, no.
    /// </returns>
    public BudgetReservationReferenced_PSN parmDoesPurchReqLineReferenceBudgetReservation(CompanyId _companyId, TableId _purchReqLineTableId, PurchReqRefRecId _purchReqLineRecId)
    {
        BudgetReservationReferenced_PSN isBudgetReservationReferenced;

        if (_purchReqLineTableId != tableNum(PurchReqLine))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Debug::assert(_companyId != '');

        if (_companyId != '')
        {
            changecompany(_companyId)
            {
                if (PurchReqLine::find(_purchReqLineRecId).BudgetReservationLine_PSN && PublicSectorUtils::isBudgetReservationEnabled())
                {
                    isBudgetReservationReferenced = NoYes::Yes;
                }
                else
                {
                    isBudgetReservationReferenced = NoYes::No;
                }
            }
        }
        else
        {
            PurchReqLine purchReqLine = PurchReqLine::find(_purchReqLineRecId);

            changecompany(purchReqLine.buyingLegalEntity2DataArea())
            {
                if (purchReqLine.BudgetReservationLine_PSN && PublicSectorUtils::isBudgetReservationEnabled())
                {
                    isBudgetReservationReferenced = NoYes::Yes;
                }
                else
                {
                    isBudgetReservationReferenced = NoYes::No;
                }
            }
        }

        return isBudgetReservationReferenced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableErrorMessageHelpScopeAndShowLink</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean enableErrorMessageHelpScopeAndShowLink()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>