<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVoucherFreeInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVoucherFreeInvoice extends CustVoucher
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copySpecTrans</Name>
				<Source><![CDATA[
        protected boolean copySpecTrans()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransOpenLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates open transaction lines for the free text invoice.
    /// </summary>
    /// <param name="_custTransOpen">
    ///    The <c>CustTransOpen</c> table buffer.
    /// </param>

    protected void createTransOpenLine(CustVendTransOpen _custTransOpen)
    {
        CustInvoiceLineIdRef custInvoiceLineIdRef;
        CustTransOpenLine custTransOpenLine;
        CustTrans custTrans;
        MarkupTrans markupTrans;
        CustInvoiceJour custInvoiceJourLocal;
        CustInvoiceTrans custInvoiceTrans;
        boolean isMarkupTrans;
        TaxTrans taxTrans;
        // <GIN>
        CustTransOpenLineWHT_IN custTransOpenLineWHT;
        TaxWithholdTrans_IN taxWithholdTrans;
        TaxWithholdParameters_IN taxWithholdParameters = TaxWithholdParameters_IN::find();
        TaxWithholdTrans_IN taxWithholdTransUpdate;
        #ISOCountryRegionCodes
        // </GIN>
        ;

        custTrans = CustTrans::find(_custTransOpen.RefRecId);

        custInvoiceJourLocal = CustInvoiceJour::findFromCustTrans(custTrans.Invoice, custTrans.TransDate, custTrans.AccountNum);

        isMarkupTrans = MarkupTrans::exist(custInvoiceJourLocal.TableId, custInvoiceJourLocal.RecId);

        // Open Transaction line creates when customer parameter MarkOpenInvoiceLine is checked; transaction amount greater than zero
        // and invoice lines greater than 1 or invoice line have any miscellaneous charges.
        if (CustParameters::find().MarkOpenInvoiceLine == NoYes::Yes && custTrans.AmountCur > 0.0 &&
           (CustInvoiceTrans::numOfLines(custTrans.Invoice, custTrans.TransDate) > 1 || isMarkupTrans))
        {
            while select forupdate custInvoiceTrans
            where custInvoiceTrans.InvoiceId == custTrans.Invoice &&
            custInvoiceTrans.InvoiceDate == custTrans.TransDate
            {
                if (!SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                {
                    // Determine the tax amount for each free text invoice line.
                    select sum(SourceRegulateAmountCur) from taxTrans
                        where taxTrans.SourceTableId == custInvoiceTrans.TableId
                        && taxTrans.SourceRecId == custInvoiceTrans.RecId;
                }
                custInvoiceLineIdRef.clear();
                custInvoiceLineIdRef.EntityType = CustInvoiceLineType::Customer;
                custInvoiceLineIdRef.insert();

                custInvoiceTrans.CustInvoiceLineIdRef = custInvoiceLineIdRef.RecId;
                custInvoiceTrans.update();

                custTransOpenLine.CustTransOpen = _custTransOpen.RecId;
                custTransOpenLine.CustInvoiceLineIdRef = custInvoiceLineIdRef.RecId;

                if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                {
                    custTransOpenLine.AmountCur = CustOpenTransLineManager::calculateTotalAmountOfCustOpenTransLine(custInvoiceTrans);
                }
                else
                {
                    custTransOpenLine.AmountCur = custInvoiceTrans.LineAmount - taxTrans.SourceRegulateAmountCur;
                }

                custTransOpenLine.insert();
                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                    && taxWithholdParameters)
                {
                    taxWithholdTrans = TaxWithholdTrans_IN::findByCustInvoiceTransRecid(custInvoiceTrans.RecId);
                    if (taxWithholdTrans.RecId)
                    {
                        custTransOpenLineWHT.CustTransOpenLine = custTransOpenLine.RecId;
                        custTransOpenLineWHT.TaxWithholdTrans = taxWithholdTrans.RecId;
                        custTransOpenLineWHT.insert();
                    }
                }
                // </GIN>
            }
            // <GIN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                && taxWithholdParameters)
            {
                while select custTransOpenLineWHT
                    join forupdate custTransOpenLine
                        where custTransOpenLineWHT.CustTransOpenLine == custTransOpenLine.RecId
                    join taxWithholdTrans
                        where custTransOpenLineWHT.TaxWithholdTrans == taxWithholdTrans.RecId
                        && custTransOpenLineWHT.CustTransOpenLine == custTransOpenLine.RecId
                    join custInvoiceTrans
                        where custInvoiceTrans.InvoiceId == custTrans.Invoice
                            && custInvoiceTrans.InvoiceDate == custTrans.TransDate
                            && custInvoiceTrans.RecId == taxWithholdTrans.CustInvoiceTrans
                {
                    if (taxWithholdTrans.RecId)
                    {
                        select firstonly sum(TaxWithholdAmountCur), TaxType from taxWithholdTransUpdate
                            group by TaxType
                            where taxWithholdTransUpdate.CustInvoiceTrans == custInvoiceTrans.RecId;
                        if (taxWithholdTransUpdate.TaxType == TaxWithholdCodeType_IN::TCS)
                        {
                            custTransOpenLine.AmountCur = custTransOpenLine.AmountCur + abs(taxWithholdTransUpdate.TaxWithholdAmountCur);
                        }
                        else if (taxWithholdTransUpdate.TaxType == TaxWithholdCodeType_IN::TDS)
                        {
                            custTransOpenLine.AmountCur = custTransOpenLine.AmountCur - abs(taxWithholdTransUpdate.TaxWithholdAmountCur);
                        }
                        custTransOpenLine.update();
                    }
                }
            }
            // </GIN>

            if (isMarkupTrans)
            {
                while select forupdate markupTrans
                    where markupTrans.TransTableId == custInvoiceJourLocal.TableId &&
                          markupTrans.TransRecId == custInvoiceJourLocal.RecId &&
                         !markupTrans.IsDeleted
                {
                    custInvoiceLineIdRef.clear();
                    custInvoiceLineIdRef.EntityType = CustInvoiceLineType::MarkupTrans;
                    custInvoiceLineIdRef.insert();

                    markupTrans.CustInvoiceLineIdRef = custInvoiceLineIdRef.RecId;
                    markupTrans.update();

                    custTransOpenLine.CustTransOpen = _custTransOpen.RecId;
                    custTransOpenLine.CustInvoiceLineIdRef = custInvoiceLineIdRef.RecId;
                    if (TaxParameters::find().TaxSpecifyLine == NoYes::Yes)
                    {
                        custTransOpenLine.AmountCur = markupTrans.Value + markupTrans.TaxAmount;
                    }
                    else
                    {
                        // tax not specified on line, so markupTrans.TaxAmount is not set, get tax from taxTrans records
                        select sum(SourceRegulateAmountCur) from taxTrans
                            where taxTrans.SourceTableId == markupTrans.TableId
                            && taxTrans.SourceRecId == markupTrans.RecId;

                        custTransOpenLine.AmountCur = markupTrans.Value - taxTrans.SourceRegulateAmountCur;
                    }
                    custTransOpenLine.insert();
                    // <GIN>
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                        && taxWithholdParameters)
                    {
                        select firstonly RecId from custInvoiceTrans
                            where custInvoiceTrans.InvoiceId == custTrans.Invoice
                            && custInvoiceTrans.InvoiceDate == custTrans.TransDate
                            join RecId from taxWithholdTrans
                            where taxWithholdTrans.CustInvoiceTrans == custInvoiceTrans.RecId;

                        custTransOpenLineWHT.clear();
                        custTransOpenLineWHT.CustTransOpenLine = custTransOpenLine.RecId;
                        custTransOpenLineWHT.TaxWithholdTrans = taxWithholdTrans.RecId;
                        custTransOpenLineWHT.insert();
                    }
                    // </GIN>
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTrans</Name>
				<Source><![CDATA[
        void initCustVendTrans(
        CustVendTrans custVendTrans,
        LedgerVoucher _ledgerPostingJournal,
        boolean _useSubLedger = false)
    {
        #ISOCountryRegionCodes

        super(custVendTrans, _ledgerPostingJournal, _useSubLedger);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            custVendTrans.PaymId = custVendInvoiceJour.PaymId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceJournal</Name>
				<Source><![CDATA[
        protected void initInvoiceJournal(CustVendTrans _custTrans)
    {
        CustTrans custTrans = _custTrans;
        PaymTerm paymTerm;
        CustInvoiceJour localCustInvoiceJour = custVendInvoiceJour;

        if (custVendInvoiceJour)
        {
            paymTerm = PaymTerm::find(custVendInvoiceJour.Payment);

            custTrans.PaymMethod = paymTerm.PaymMethod;
            custTrans.CashPayment = paymTerm.Cash;
            custTrans.DeliveryMode = localCustInvoiceJour.DlvMode;
            custTrans.CashDiscCode = localCustInvoiceJour.CashDiscCode;
            custTrans.DocumentDate = localCustInvoiceJour.DocumentDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillingClassification</Name>
				<Source><![CDATA[
        public RefRecId parmBillingClassification(RefRecId _custBillingClassification = custBillingClassification)
    {
        custBillingClassification = _custBillingClassification;

        return custBillingClassification;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>