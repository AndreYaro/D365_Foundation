<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlFiscalDoc2InvoiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PlFiscalDoc2InvoiceController</c> class is the controller class for the
///    <c>PlFiscalDoc2Invoice</c> report.
/// </summary>
class PlFiscalDoc2InvoiceController extends SrsReportRunController implements BatchRetryable
{
    TransDate                   fromDate;
    TransDate                   toDate ;

    #define.parameterFromDate('FromDate')
    #define.parameterToDate('ToDate')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Override this method to change report contract before showing dialog.
    /// </summary>
    public void prePromptModifyContract()
    {
        Query                   query;
        QueryBuildRange         queryBuildRange;
        QueryBuildDatasource    queryBuildDatasource;

        query = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
        queryBuildDatasource = SysQuery::findOrCreateDataSource(query, tablenum(CustInvoiceJour_PL));
        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDatasource, fieldnum(CustInvoiceJour_PL, FiscalDocState_PL));
        queryBuildRange.value(enum2str(PlFiscalDocState::Changed2Invoice));
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Override this method to change report contract before running report.
    /// </summary>
    public void preRunModifyContract()
    {
        SrsReportRdlDataContract    contract = this.parmReportContract().parmRdlContract();

        fromDate   = contract.getParameter(#parameterFromDate).getValueTyped();
        toDate     = contract.getParameter(#parameterToDate).getValueTyped();

        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()), fromDate, toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the report query ranges.
    /// </summary>
    /// <param name="_query">
    ///     Gets or Sets the _query object.
    /// </param>
    /// <param name="_fromDate">
    ///     Gets or Sets the _fromDate object.
    /// </param>
    /// <param name="_toDate">
    ///     Gets or Sets the _toDate object.
    /// </param>
    public void setRanges(Query _query, TransDate _fromDate, TransDate _toDate)
    {
        if (_toDate == dateNull())
        {
            _toDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        if (_fromDate || _toDate)
        {
            SRSReportHelper::addFromAndToDateRangeToQuery( _query,
                                                       _fromDate,
                                                       _toDate,
                                                       tablenum(CustInvoiceJour),
                                                       fieldnum(CustInvoiceJour, InvoiceDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        const str FeatureReference = 'PL-00025';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        PlFiscalDoc2InvoiceController controller  = new PlFiscalDoc2InvoiceController();
        controller.parmReportName(ssrsReportStr(PlFiscalDoc2Invoice, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>