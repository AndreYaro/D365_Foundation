<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcCheckIndirectCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BOMCalcCheckIndirectCost</c> class is used when checking indirect cost lines during the BOM
///    calculation process.
/// </summary>
class BomCalcCheckIndirectCost extends BOMCalcCheckBase
{
    str         txtNoCostPrice;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNoCostPrice</Name>
				<Source><![CDATA[
        protected void addNoCostPrice(
        CostSheetNodeCode   _calculationNodeCode,
        str _strText =       txtNoCostPrice,
        Exception           _exceptionType = exceptionType)
    {
        BOMCalcCheckBase::infologMsgAdd(exceptionType, strfmt(_strText, _calculationNodeCode));

        this.incNumOfMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates a warning if no indirect cost factor is found.
    /// </summary>
    /// <param name="_itemId">
    ///    ID of the item for which we are calculating the indirect cost.
    /// </param>
    /// <param name="_calculationNodeCode">
    ///    Code of the indirect cost node.
    /// </param>
    /// <param name="_consumption">
    ///    The amount that is the base of the indirect cost.
    /// </param>
    /// <remarks>
    ///    Note that this method clears INFOLOG after each use, and the messages get accumulated in a class
    ///    member variable. This is due to the fact that a costing sheet is calculated first, and then the BOM
    ///    calculation runs through all of the indirect cost codes and generates the <c>BOMCalcTrans</c>
    ///    table. If the INFOLOG was not cleared in time, all of the errors are assigned to the
    ///    <c>BOMCalcTrans</c> table that corresponds to the first indirect cost code in the costing sheet.
    /// </remarks>
    void checkNoConsumption(
        str                 _itemId,
        CostSheetNodeCode   _calculationNodeCode,
        real                _consumption)
    {
        if (!checkNoConsump)
        {
            return;
        }

        if (_consumption == 0)
        {
            BOMCalcCheckBase::infologMsgAdd(exceptionType, strfmt("@SYS135309", _itemId, _calculationNodeCode));
            this.incNumOfMessages();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates a warning if no indirect cost factor is found.
    /// </summary>
    /// <param name="_calculationNodeCode">
    ///    Code of the indirect cost node.
    /// </param>
    /// <param name="_costPricePresent">
    ///    A Boolean value that indicates whether an indirect cost factor was found.
    /// </param>
    /// <param name="_strText">
    ///    The text to be displayed if the validation fails.
    /// </param>
    /// <param name="_exceptionType">
    ///    The exception to throw if the validation fails.
    /// </param>
    /// <remarks>
    ///    Note, that this method clears Infolog after each use, and the messages get accumulated in a class
    ///    member variable. This is due to the fact that a costing sheet is calculated first, and then the BOM
    ///    calculation runs through all of the indirect cost codes and generates a <c>BOMCalcTrans</c> table.
    ///    If the Infolog was not cleared in time, all errors would get assigned to the <c>BOMCalcTrans</c>
    ///    table that corresponds to the first indirect cost code in the costing sheet.
    /// </remarks>
    void checkNoCostPrice(
        CostSheetNodeCode   _calculationNodeCode,
        boolean             _costPricePresent,
        str                 _strText        = txtNoCostPrice,
        Exception           _exceptionType  = exceptionType)
    {
        if (!checkNoCostPrice)
        {
            return;
        }

        if (!_costPricePresent)
        {
            this.addNoCostPrice(_calculationNodeCode, _strText, _exceptionType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUseFallBack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates a warning if an indirect cost factor was supplied by a costing version that was specified
    ///    as a fallback version.
    /// </summary>
    /// <param name="_calculationNodeCode">
    ///    Code of the indirect cost node.
    /// </param>
    /// <param name="_fallbackVersionId">
    ///    ID of the fallback costing version.
    /// </param>
    /// <remarks>
    ///    Note, that this method clears Infolog after each use, and that messages get accumulated in a class
    ///    member variable. This is because a costing sheet is calculated first, and then the BOM calculation
    ///    runs through all of the indirect cost codes and generates a <c>BOMCalcTrans</c> table. If the
    ///    Infolog was not cleared in time, all of the errors would get assigned to the <c>BOMCalcTrans</c>
    ///    that corresponds to the first indirect cost code in the costing sheet.
    /// </remarks>
    public void checkUseFallBack(
        CostSheetNodeCode   _calculationNodeCode,
        CostingVersionId    _fallbackVersionId)
    {
        if (!checkUseFallBack)
        {
            return;
        }

        BOMCalcCheckBase::infologMsgAdd(exceptionType, strfmt("@SYS127875", _calculationNodeCode, _fallbackVersionId));

        this.incNumOfMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new()
    {
        super();

        txtNoCostPrice          = "@SYS310452";
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static BOMCalcCheckIndirectCost construct()
    {
        return new BOMCalcCheckIndirectCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMCalcBase</Name>
				<Source><![CDATA[
        public static BOMCalcCheckIndirectCost newBOMCalcBase(BOMCalcBase _parentBOMCalcBase)
    {
        BOMCalcCheckIndirectCost bomCalcCheckIndirectCost = BOMCalcCheckIndirectCost::construct();

        bomCalcCheckIndirectCost.initBOMCalcBase(_parentBOMCalcBase);

        return bomCalcCheckIndirectCost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>