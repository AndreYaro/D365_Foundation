<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessKanbanReplenishment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqEventProcessKanbanReplenishment</c> class processes kanban replenishment events.
/// </summary>
public class ReqEventProcessKanbanReplenishment extends ReqEventProcessKanban implements BatchRetryable
{
    LeanRuleData    leanRuleData;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table buffer that the class operates on.
    /// </summary>
    /// <returns>
    /// A <c>Common</c> table buffer.
    /// </returns>
    protected Common buffer()
    {
        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the quantity that is used to look up a kanban rule and the quantity to be supplied by event kanbans.
    /// </summary>
    /// <returns>
    ///    The quantity that is used to lookup up kanban rules and to be supplied by event kanbans.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected InventQty calculateQuantity()
    {
        ReqPlanId       reqPlanId;
        ReqSetupDim     reqSetupDim;
        TransDate       dueDate;
        TransDate       todaysDate;
        InventQty       qty;
        InventQty       minQty;
        InventDimParm   inventDimParm;
        InventOnHandQty inventOnHandQty;
        InventDim       inventDim;
        InventDim       inventDimProduct;
        InventDimParm   inventDimParmProduct;

        dueDate     = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.dueDateTime(),DateTimeUtil::getCompanyTimeZone()));
        reqPlanId   = ReqPlanSched::defaultDynamicId();
        todaysDate  = reqPlanId ? ReqPlanData::newReqPlanId(reqPlanId).todaysdate() : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        reqSetupDim = ReqSetupDim::newInventTable(inventTable,this.inventDimId());
        minQty      = reqSetupDim.minInventOnhandDate(dueDate,todaysDate);

        if (minQty > 0)
        {
            inventDim = reqSetupDim.inventDim();
            inventDimParm.initFromInventDim(inventDim);
            inventOnHandQty = InventOnHandQty::newItemDim(this.itemId(), inventDim, inventDimParm);

            qty = max(0,minQty - inventOnHandQty.physicalInvent());
            if (qty != 0)
            {
                if (leanRuleData.parmLeanCoverage().RuleCoverageType == LeanRuleCoverageType::ProductFamily)
                {
                    inventDimProduct = inventDim.data();
                    inventDimProduct.clearNotProductDim(InventDimGroupSetup::newItemId(itemId));
                    inventDimParmProduct.initFromInventDim(inventDimProduct);
                    qty = max(0, qty - Kanban::sumOrderedQuantities(kanbanRule.RecId, itemId, true, inventDimProduct, inventDimParmProduct));
                }
                else
                {
                    qty = max(0, qty - Kanban::sumOrderedQuantities(kanbanRule.RecId, itemId, true));
                }
            }
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether delete actions are allowed.
    /// </summary>
    /// <returns>
    ///    true if the delete action is allowed; otherwise, false.
    /// </returns>
    protected boolean canDelete()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether update actions are allowed.
    /// </summary>
    /// <returns>
    ///    true if the update action is allowed; otherwise, false
    /// </returns>
    protected boolean canUpdate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a description for the class.
    /// </summary>
    /// <returns>
    ///    A description of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Description description()
    {
        return "@SYS4000039";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dueDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the due date and the time of the event
    /// </summary>
    /// <returns>
    ///    A <c>TransDateTime</c> temporal value.
    /// </returns>
    protected TransDateTime dueDateTime()
    {
        return DateTimeUtil::getSystemDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the even origin exists.
    /// </summary>
    /// <returns>
    ///    true if the event origin exists; otherwise, false.
    /// </returns>
    protected boolean eventExists()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>id</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a string that identifies for the buffer.
    /// </summary>
    /// <returns>
    ///    A string value that identifies the buffer.
    /// </returns>
    protected str id()
    {
        return strFmt("@SYS319612",kanbanRule.RuleId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class variables.
    /// </summary>
    /// <returns>
    ///    true if the initialization was successful; otherwise, false.
    /// </returns>
    public boolean init()
    {
        boolean result;

        leanRuleData = kanbanRule.ruleData();
        result       =    leanRuleData
                       && super();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the event quantity to process.
    /// </summary>
    protected void initInventQty()
    {
        if (!initInventQty)
        {
            inventQty     = this.calculateQuantity();
            inventQty     = inventQty < kanbanRuleEvent.MinimumEventQuantity ? 0 : inventQty;
            initInventQty = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventQtyKanbanRuleLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the quantity that is used to look up a kanban rule.
    /// </summary>
    protected void initInventQtyKanbanRuleLookup()
    {
        if (!initInventQtyKanbanRuleLookup)
        {
            inventQtyKanbanRuleLookup     = this.calculateQuantity();
            initInventQtyKanbanRuleLookup = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceRequirementParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the source requirement parameters.
    /// </summary>
    /// <returns>
    ///    true if the initialization was successful; otherwise, false.
    /// </returns>
    protected boolean initSourceRequirementParm()
    {
        if (   !kanbanSourceRequirementParm
            && kanbanRule)
        {
            kanbanSourceRequirementParm = KanbanSourceRequirementParm::newStandard(
                                                                        kanbanRule,
                                                                        tableNum(KanbanRule),
                                                                        kanbanRule.RecId,
                                                                        tableNum(KanbanRule),
                                                                        kanbanRule.RecId);
        }

        return    kanbanSourceRequirementParm
               && kanbanSourceRequirementParm.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the inventory dimension for which the event is processed.
    /// </summary>
    /// <returns>
    /// A <c>InventDimId</c> string value.
    /// </returns>
    protected InventDimId inventDimId()
    {
        inventDimId = leanRuleData.parmLeanCoverage().InventDimId;

        if (leanRuleData.parmLeanCoverage().RuleCoverageType == LeanRuleCoverageType::ProductFamily
            &&  productFamilyInventDimId != InventDim::inventDimIdBlank())
        {
            inventDimId = this.mergeInventDimFromProductFamily();
        }

        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory transaction originator.
    /// </summary>
    /// <returns>
    ///    Always returns zero.
    /// </returns>
    protected InventTransOriginId inventTransOriginId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the item for which an event is processed.
    /// </summary>
    /// <returns>
    ///    A <c>ItemId</c> value
    /// </returns>
    protected ItemId itemId()
    {
        ForecastItemAllocationLine  forecastItemAllocationLine;
        LeanCoverage                leanCoverage = leanRuleData.parmLeanCoverage();

        if (leanCoverage.RuleCoverageType == LeanRuleCoverageType::ProductFamily)

        {
            return productFamilyItemId;
        }
        else
        {
            return leanCoverage.ItemId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanEventType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the kanban event type that is processed by the class.
    /// </summary>
    /// <returns>
    ///    A <c>KanbanEventType</c> enumeration value.
    /// </returns>
    protected KanbanEventType kanbanEventType()
    {
        return KanbanEventType::Replenishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines whether to handle the current event.
    /// </summary>
    /// <returns>
    ///    true if the event must be handled; otherwise, false.
    /// </returns>
    protected boolean mustHandleEvent()
    {
        boolean result = super();

        switch (actionMode)
        {
            case ReqEventProcessAction::Insert:
                result =    result
                         && kanbanRuleEvent.StockReplenishmentEvent != KanbanStockReplenishmentEventType::NotActive
                         && kanbanFlow.isLastActivityInventoryControlled();
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustProcessSynchronously</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines whether the event must be processed synchronously.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    protected boolean mustProcessSynchronously()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeletePeggingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determine if the pegging event can be deleted.
    /// </summary>
    /// <returns>
    ///    true if the pegging event can be deleted; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method is used where the <c>ReqEventProcessKanban</c> instance is not responsible
    ///    for deleting the event itself, but leaves it up to the caller to remove the pegging event.
    ///    This is the case when events are processed by the periodic 'pegging event processing'
    ///    <c>ReqEventProcessBatchKanbanTask</c> class.
    /// </remarks>
    public boolean canDeletePeggingEvent()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUsePeggingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines whether the event will use the <c>ReqPeggingEvent</c> table and the related tables.
    /// </summary>
    /// <returns>
    ///    true if the event uses the <c>ReqPeggingEvent</c> table; otherwise, false.
    /// </returns>
    protected boolean mustUsePeggingEvent()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRule parmKanbanRule(KanbanRule _kanbanRule = kanbanRule)
    {
        kanbanRule = _kanbanRule;
        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLineRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the source document line that is the cause of the event.
    /// </summary>
    /// <returns>
    ///    Always returns zero.
    /// </returns>
    protected SourceDocumentLineRefRecId sourceDocumentLineRefRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqEventProcessKanbanReplenishment construct()
    {
        return new ReqEventProcessKanbanReplenishment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of a <c>ReqEventProcessKanbanReplenishment</c> object.
    /// </summary>
    /// <param name="_kanbanRule">
    /// A <c>KanbanRule</c> table buffer used for the instantiation.
    /// </param>
    /// <returns>
    /// A <c>ReqEventProcessKanbanReplenishment</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqEventProcessKanbanReplenishment newStandard(KanbanRule _kanbanRule)
    {
        ReqEventProcessKanbanReplenishment  reqEventProcess = ReqEventProcessKanbanReplenishment::construct();

        reqEventProcess.parmKanbanRule(_kanbanRule);
        reqEventProcess.parmAcceptReceiveSemiFinishedKanbanRule(false);
        reqEventProcess.parmAcceptReceiveFinishedKanbanRule(true);

        return reqEventProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>