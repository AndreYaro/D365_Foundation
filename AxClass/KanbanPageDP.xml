<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanPageDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportParameterAttribute(classStr(KanbanPageContract))
]
public class KanbanPageDP extends SRSReportDataProviderBase
{
    // <GEERU>
    #ISOCountryRegionCodes
    // </GEERU>
    KanbanPageTmp                   kanbanPageTmp;

    Query                           query;
    QueryRun                        queryRun;

    Kanban                          kanban;
    KanbanCard                      kanbanCard;
    KanbanFlow                      kanbanFlow;
    KanbanRule                      kanbanRule;
    LeanCoverageKanbanRule          leanCoverageKanbanRule;
    LeanCoverage                    leanCoverage;
    KanbanRuleFixed                 kanbanRuleFixed;
    int                             firstFreeFullPage;
    int                             firstFreeHalfPage;
    List                            kanbanList;
    List                            cardList;
    str                             workCellParameter;
    KanbanCardPrintStatusTypeAll    printStatusParameter;
    str                             userName;
    str                             userLanguage;
    str                             companyLanguage;

    List                            inventDims;
    ListEnumerator                  inventDimsEnumerator;
    str                             shipInventBatchId;
    str                             shipInventSerialId;
    str                             shipWMSPalletId;
    // <GEERU>
    boolean                         countryRegion_RU;
    str                             inventProfileId;
    str                             inventOwnerId;
    str                             inventGTDId;
    Map                             inventProfileId_RUs;
    int                             numberInventProfileId_RUs;
    Map                             inventOwnerId_RUs;
    int                             numberInventOwnerId_RUs;
    Map                             inventGTDId_RUs;
    int                             numberInventGTDId_RUs;
    // </GEERU>
    Map                             inventBatchIds;
    int                             numberInventBatchIds;
    Map                             inventSerialIds;
    int                             numberInventSerialIds;
    Map                             wmsPalletIds;
    int                             numberWMSPalletIds;
    MapEnumerator                   mapEnumerator;

    QueryBuildDataSource            kanban_ds;
    QueryBuildDataSource            kanbanCard_ds;
    QueryBuildDataSource            kanbanAssignedCard_ds;
    QueryBuildDataSource            kanbanRule_ds;
    QueryBuildDataSource            kanbanFlow_ds;
    QueryBuildDataSource            inventDim_ds;
    QueryBuildDataSource            leanCoverageKanbanRule_ds;
    QueryBuildDataSource            leanCoverage_ds;
    QueryBuildDataSource            kanbanRuleFixed_ds;
    List                            strSplitList;
    ListEnumerator                  strSplitEnumerator;
    str                             strSplitId;

    int                             pageUsedForKanban;

    #define.jpg ("jpg")
    #define.jpeg("jpeg")
    #define.bmp ("bmp")
    #define.gif ("gif")
    #define.png ("png")
    #define.text ("txt")
    #define.image("image/")
    #define.maxNumberOfWorkCells(9)
    #define.embeddedText("embeddedText")
    #define.oneMB(1024 * 1024)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getKanbanPageTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a data table from a query to the <c>KanbanPageTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The required report data table.
    /// </returns>
    [
        SRSReportDataSetAttribute('KanbanPageTmp')
    ]
    public KanbanPageTmp getKanbanPageTmp()
    {
        select * from kanbanPageTmp;

        return kanbanPageTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPagePosition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the page number of a page on which to print a kanban or kanban card.
    /// </summary>
    /// <param name="withPickList">
    ///    Determines whether a kanban or kanban card contains a picking list.
    /// </param>
    /// <returns>
    ///    The page number of the first possible page on which to put a kanban card.
    /// </returns>
    private int getPagePosition(boolean withPickList)
    {
        int result;

        if (withPickList)
        {
            result = firstFreeFullPage;

            if (firstFreeHalfPage == firstFreeFullPage)
            {
                ++firstFreeHalfPage;
            }

            ++firstFreeFullPage;
        }
        else
        {
            result = firstFreeHalfPage;

            if (firstFreeHalfPage == firstFreeFullPage)
            {
                ++firstFreeFullPage;
            }
            else
            {
                firstFreeHalfPage = firstFreeFullPage;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCardData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes variables from the query.
    /// </summary>
    private void initCardData()
    {
        kanbanCard  = queryRun.get(tableNum(KanbanCard));
        kanban      = queryRun.get(tableNum(Kanban));
        kanbanFlow  = queryRun.get(tableNum(KanbanFlow));
        kanbanRule  = queryRun.get(tableNum(KanbanRule));

        // Querying circulating kanban cards
        if (!kanbanList)
        {
            leanCoverage            = queryRun.get(tableNum(LeanCoverage));
            leanCoverageKanbanRule  = queryRun.get(tableNum(LeanCoverageKanbanRule));
            kanbanRuleFixed         = queryRun.get(tableNum(KanbanRuleFixed));
        }

        numberInventBatchIds    = 0;
        numberInventSerialIds   = 0;
        numberWMSPalletIds      = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides data that will be shown on the report for a specified kanban or kanban card.
    /// </summary>
    private void insertCard()
    {
        ttsbegin;

        pageUsedForKanban = this.getPagePosition(kanbanRule.PrintCardWithPickingList);
        kanbanPageTmp.clear();

        if (kanbanRule.KanbanType == LeanKanbanType::Manufacturing)
        {
            this.setCommonCardInformation();
            kanbanPageTmp.insert();

            // bottom left data region
            this.insertWorkCellInformation();
        }
        else
        {
            this.setCommonCardInformation();

            // bottom left data region
            PlanActivityLocation firstPlanActivityLocation = kanbanFlow.firstPlanActivity().issueLocation();
            kanbanPageTmp.TransferActivity = kanbanFlow.firstActivityPlanName();
            kanbanPageTmp.FromInventLocationId = firstPlanActivityLocation.InventLocationId;
            kanbanPageTmp.FromWMSLocationId = firstPlanActivityLocation.wmsLocationId;

            kanbanPageTmp.insert();
        }

        // picking list
        if (kanbanRule.PrintCardWithPickingList == NoYes::Yes)
        {
            this.insertPickListInformation();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPickListInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts picking list information for a specified card.
    /// </summary>
    private void insertPickListInformation()
    {
        KanbanJob   kanbanJobLocal;

        kanbanPageTmp.clear();
        this.setBasicInformation();

        List jobList = new List(Types::Int64);

        while select RecId from kanbanJobLocal
            where kanbanJobLocal.Kanban == kanban.RecId
        {
            jobList.addEnd(kanbanJobLocal.RecId);
        }

        // do not filter picking list lines. always print all lines.
        kanbanPageTmp.insertPickingList(
                                        jobList,
                                        '',
                                        false
                                        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWithShippingInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the shipping information for the card to be printed and inserts it into the temporary table.
    /// </summary>
    private void insertWithShippingInformation()
    {
        KanbanJob           kanbanJobLocal;
        InventTrans         inventTransLocal;
        InventDim           inventDimLocal;

        // setting shipping information
        // <GEERU>
        if (countryRegion_RU)
        {
            InventProfileId_RUs     = new Map(Types::String, Types::Integer);
            InventOwnerId_RUs       = new Map(Types::String, Types::Integer);
            InventGTDId_RUs         = new Map(Types::String, Types::Integer);
        }
        // </GEERU>
        inventDims      = new List(Types::String);
        inventBatchIds  = new Map(Types::String, Types::Integer);
        inventSerialIds = new Map(Types::String, Types::Integer);
        wmsPalletIds    = new Map(Types::String, Types::Integer);

        select firstonly InventTransId, Sequence, Kanban from kanbanJobLocal
            order by Sequence
            where kanbanJobLocal.Kanban        == kanban.RecId
               && kanbanJobLocal.InventTransId != '';

        InventTransOrigin inventTransOriginLocal = InventTransOrigin::findByInventTransId(kanbanJobLocal.InventTransId);

        while select InventTransOrigin, InventDimId from inventTransLocal
            join InventDimId, InventBatchId, InventSerialId, wmsPalletId
            // <GEERU>
            , InventProfileId_RU, InventOwnerId_RU, InventGTDId_RU
            // </GEERU>
            from inventDimLocal
                where inventTransLocal.InventTransOrigin == inventTransOriginLocal.RecId
                   && inventTransLocal.InventDimId       == inventDimLocal.InventDimId
        {
            inventDims.addEnd(inventDimLocal.InventBatchId);
            inventDims.addEnd(inventDimLocal.InventSerialId);
            inventDims.addEnd(inventDimLocal.wmsPalletId);

            inventBatchIds.insert(inventDimLocal.InventBatchId, 0);
            inventSerialIds.insert(inventDimLocal.InventSerialId, 0);
            wmsPalletIds.insert(inventDimLocal.wmsPalletId, 0);
            // <GEERU>
            if (countryRegion_RU)
            {
                inventDims.addEnd(inventDimLocal.InventProfileId_RU);
                inventDims.addEnd(inventDimLocal.InventOwnerId_RU);
                inventDims.addEnd(inventDimLocal.InventGtdId_RU);

                InventProfileId_RUs.insert(inventDimLocal.InventProfileId_RU, 0);
                InventOwnerId_RUs.insert(inventDimLocal.InventOwnerId_RU, 0);
                InventGTDId_RUs.insert(inventDimLocal.InventGtdId_RU, 0);
            }
            // </GEERU>
        }

        mapEnumerator = inventBatchIds.getEnumerator();
        numberInventBatchIds = 0;
        while (mapEnumerator.moveNext())
        {
            ++numberInventBatchIds;
            inventBatchIds.insert(mapEnumerator.currentKey(), numberInventBatchIds);
        }

        mapEnumerator = inventSerialIds.getEnumerator();
        numberInventSerialIds = 0;
        while (mapEnumerator.moveNext())
        {
            ++numberInventSerialIds;
            inventSerialIds.insert(mapEnumerator.currentKey(), numberInventSerialIds);
        }

        mapEnumerator = wmsPalletIds.getEnumerator();
        numberWMSPalletIds = 0;
        while (mapEnumerator.moveNext())
        {
            ++numberWMSPalletIds;
            wmsPalletIds.insert(mapEnumerator.currentKey(), numberWMSPalletIds);
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            mapEnumerator = InventProfileId_RUs.getEnumerator();
            numberInventProfileId_RUs = 0;
            while (mapEnumerator.moveNext())
            {
                ++numberInventProfileId_RUs;
                InventProfileId_RUs.insert(mapEnumerator.currentKey(), numberInventProfileId_RUs);
            }

            mapEnumerator = InventOwnerId_RUs.getEnumerator();
            numberInventOwnerId_RUs = 0;
            while (mapEnumerator.moveNext())
            {
                ++numberInventOwnerId_RUs;
                InventOwnerId_RUs.insert(mapEnumerator.currentKey(), numberInventOwnerId_RUs);
            }

            mapEnumerator = InventGTDId_RUs.getEnumerator();
            numberInventGTDId_RUs = 0;
            while (mapEnumerator.moveNext())
            {
                ++numberInventGTDId_RUs;
                InventGTDId_RUs.insert(mapEnumerator.currentKey(), numberInventGTDId_RUs);
            }
        }
        // </GEERU>
        // Print at least a standalone card if there are no dimensions specified
        if (inventDims.elements() == 0)
        {
            inventBatchIds.insert('','');
            inventSerialIds.insert('','');
            wmsPalletIds.insert('','');
            shipInventBatchId  = '';
            shipInventSerialId = '';
            shipWMSPalletId    = '';
            // <GEERU>
            if (countryRegion_RU)
            {
                InventProfileId_RUs.insert('','');
                InventOwnerId_RUs.insert('','');
                InventGTDId_RUs.insert('','');
                inventProfileId = '';
                inventOwnerId   = '';
                inventGTDId     = '';
            }
            // </GEERU>
            this.insertCard();
        }
        else
        {
            // Print cards per dimension combinations
            inventDimsEnumerator = inventDims.getEnumerator();
            while (inventDimsEnumerator.moveNext())
            {
                shipInventBatchId   = inventDimsEnumerator.current();
                inventDimsEnumerator.moveNext();
                shipInventSerialId  = inventDimsEnumerator.current();
                inventDimsEnumerator.moveNext();
                shipWMSPalletId     = inventDimsEnumerator.current();
                // <GEERU>
                if (countryRegion_RU)
                {
                    inventDimsEnumerator.moveNext();
                    inventProfileId   = inventDimsEnumerator.current();
                    inventDimsEnumerator.moveNext();
                    inventOwnerId   = inventDimsEnumerator.current();
                    inventDimsEnumerator.moveNext();
                    inventGTDId   = inventDimsEnumerator.current();
                }
                // </GEERU>
                this.insertCard();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWorkCellInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts work cell information for a specified production card.
    /// </summary>
    private void insertWorkCellInformation()
    {
        PlanActivity planActivityLocal;

        if (kanbanFlow.isSingleActivityFlow())
        {
            kanbanPageTmp.clear();
            this.setBasicInformation();
            this.setShippingInstructions();  // We can print multiple times the same card by serial/batch

            planActivityLocal      = kanbanFlow.firstPlanActivity();
            kanbanPageTmp.Activity = planActivityLocal.Name;
            kanbanPageTmp.Sequence = 1;
            kanbanPageTmp.WorkCell = planActivityLocal.wrkCtrResourceGroup().WrkCtrId;
            kanbanPageTmp.insert();
        }
        else
        {
            PlanActivityRelationship         planActivityRelationshipLocal;
            LeanProdFlowPlanActivityRelation leanProdFlowPlanActivityRelationLocal;
            KanbanFlowActivityRelationship   kanbanFlowActivityRelationshipLocal;
            Set                              planActivitySet;
            int                              numberWorkCell;

            numberWorkCell  = 0;
            planActivitySet = new Set(Types::Int64);

            // Adding activities and work cells to be shown on the report
            while select Sequence, KanbanFlow, LeanProdFlowActivityRelation from kanbanFlowActivityRelationshipLocal
                order by Sequence
                join RecId, PlanActivityRelationship from leanProdFlowPlanActivityRelationLocal
                    where kanbanFlowActivityRelationshipLocal.KanbanFlow                   == kanbanFlow.RecId
                       && kanbanFlowActivityRelationshipLocal.LeanProdFlowActivityRelation == leanProdFlowPlanActivityRelationLocal.RecId
                join RecId, DependentPlanActivity, IndependentPlanActivity from planActivityRelationshipLocal
                    where leanProdFlowPlanActivityRelationLocal.PlanActivityRelationship == planActivityRelationshipLocal.RecId
                join RecId, Name, PlanActivityType from planActivityLocal
                    where planActivityLocal.RecId == planActivityRelationshipLocal.DependentPlanActivity
                       || planActivityLocal.RecId == planActivityRelationshipLocal.IndependentPlanActivity
            {
                kanbanPageTmp.clear();
                if (!planActivitySet.in(planActivityLocal.RecId))
                {
                    planActivitySet.add(planActivityLocal.RecId);

                    this.setBasicInformation();
                    this.setShippingInstructions();  // We can print multiple times the same card by serial/batch

                    kanbanPageTmp.Activity      = planActivityLocal.Name;
                    kanbanPageTmp.Sequence      = kanbanFlowActivityRelationshipLocal.Sequence;

                    if (planActivityLocal.PlanActivityType == PlanActivityType::Process)
                    {
                        kanbanPageTmp.WorkCell = planActivityLocal.wrkCtrResourceGroup().WrkCtrId;
                    }
                    else
                    {
                        kanbanPageTmp.WorkCell = '';
                    }

                    kanbanPageTmp.insert();

                    // cutting the number of work cells to be shown on the report
                    ++numberWorkCell;
                    if (numberWorkCell > #maxNumberOfWorkCells)
                    {
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchPrintStatusFilter</Name>
				<Source><![CDATA[
    private boolean matchPrintStatusFilter()
    {
        if (!kanbanCard || printStatusParameter == KanbanCardPrintStatusTypeAll::All)
        {
            return true;
        }

        switch (printStatusParameter)
        {
            case KanbanCardPrintStatusTypeAll::New:
                return kanbanCard.PrintStatus == KanbanCardPrintStatusType::New;
            case KanbanCardPrintStatusTypeAll::Printed:
                return kanbanCard.PrintStatus == KanbanCardPrintStatusType::Printed;
            case KanbanCardPrintStatusTypeAll::NeedsReprint:
                return kanbanCard.PrintStatus == KanbanCardPrintStatusType::NeedsReprint;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    private void prepareData()
    {
        companyLanguage   = CompanyInfo::languageId();
        UserInfo userInfo = xUserInfo::find();
        userName          = userInfo.Name ? userInfo.Name : curUserId();
        userLanguage      = userInfo.Language ? userInfo.Language : companyLanguage;
        firstFreeFullPage = 1;
        firstFreeHalfPage = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareKanbanCardQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares a query to process kanban cards from the specified parameters.
    /// </summary>
    private void prepareKanbanCardQuery()
    {
        kanbanCard_ds = query.addDataSource(tableNum(KanbanCard));
        kanbanCard_ds.fields().clearFieldList();
        kanbanCard_ds.fields().addField(fieldNum(KanbanCard, RecId));
        kanbanCard_ds.fields().addField(fieldNum(KanbanCard, KanbanRule));
        kanbanCard_ds.fields().addField(fieldNum(KanbanCard, CardId));
        kanbanCard_ds.fields().addField(fieldNum(KanbanCard, PrintStatus));

        kanbanRule_ds = kanbanCard_ds.addDataSource(tableNum(KanbanRule));
        kanbanRule_ds.addLink(fieldNum(KanbanCard, KanbanRule), fieldNum(KanbanRule, RecId));
        kanbanRule_ds.joinMode(JoinMode::InnerJoin);
        kanbanRule_ds.fetchMode(QueryFetchMode::One2One);
        kanbanRule_ds.fields().clearFieldList();
        kanbanRule_ds.fields().addField(fieldNum(KanbanRule, RecId));
        kanbanRule_ds.fields().addField(fieldNum(KanbanRule, PrintCardWithPickingList));
        kanbanRule_ds.fields().addField(fieldNum(KanbanRule, KanbanType));
        kanbanRule_ds.fields().addField(fieldNum(KanbanRule, PrintInstructionsOnCard));
        kanbanRule_ds.fields().addField(fieldNum(KanbanRule, Quantity));
        kanbanRule_ds.addRange(fieldNum(KanbanRule,LegalEntity)).value(queryValue(CompanyInfo::current()));

        kanbanFlow_ds = kanbanRule_ds.addDataSource(tableNum(KanbanFlow));
        kanbanFlow_ds.addLink(fieldNum(KanbanRule, KanbanFlow), fieldNum(KanbanFlow, RecId));
        kanbanFlow_ds.joinMode(JoinMode::InnerJoin);
        kanbanFlow_ds.fetchMode(QueryFetchMode::One2One);
        kanbanFlow_ds.fields().clearFieldList();
        kanbanFlow_ds.fields().addField(fieldNum(KanbanFlow, RecId));
        kanbanFlow_ds.fields().addField(fieldNum(KanbanFlow, LastPlanPlanActivity));
        kanbanFlow_ds.fields().addField(fieldNum(KanbanFlow, FirstPlanPlanActivity));

        kanbanRuleFixed_ds = kanbanRule_ds.addDataSource(tableNum(KanbanRuleFixed));
        kanbanRuleFixed_ds.addLink(fieldNum(KanbanRule, RecId), fieldNum(KanbanRuleFixed, ParentRecId));
        kanbanRuleFixed_ds.joinMode(JoinMode::OuterJoin);
        kanbanRuleFixed_ds.fetchMode(QueryFetchMode::One2One);
        kanbanRuleFixed_ds.fields().clearFieldList();
        kanbanRuleFixed_ds.fields().addField(fieldNum(KanbanRuleFixed, ParentRecId));

        leanCoverageKanbanRule_ds = kanbanRule_ds.addDataSource(tableNum(LeanCoverageKanbanRule));
        leanCoverageKanbanRule_ds.addLink(fieldNum(KanbanRule, RecId), fieldNum(LeanCoverageKanbanRule, KanbanRule));
        leanCoverageKanbanRule_ds.joinMode(JoinMode::InnerJoin);
        leanCoverageKanbanRule_ds.fetchMode(QueryFetchMode::One2One);
        leanCoverageKanbanRule_ds.fields().clearFieldList();
        leanCoverageKanbanRule_ds.fields().addField(fieldNum(LeanCoverageKanbanRule, KanbanRule));
        leanCoverageKanbanRule_ds.fields().addField(fieldNum(LeanCoverageKanbanRule, Coverage));

        leanCoverage_ds = leanCoverageKanbanRule_ds.addDataSource(tableNum(LeanCoverage));
        leanCoverage_ds.addLink(fieldNum(LeanCoverageKanbanRule, Coverage), fieldNum(LeanCoverage, RecId));
        leanCoverage_ds.joinMode(JoinMode::InnerJoin);
        leanCoverage_ds.fetchMode(QueryFetchMode::One2One);
        leanCoverage_ds.fields().clearFieldList();
        leanCoverage_ds.fields().addField(fieldNum(LeanCoverage, RecId));
        leanCoverage_ds.fields().addField(fieldNum(LeanCoverage, InventDimId));
        leanCoverage_ds.fields().addField(fieldNum(LeanCoverage, ItemId));
        leanCoverage_ds.fields().addField(fieldNum(LeanCoverage, AllocationId));
        leanCoverage_ds.fields().addField(fieldNum(LeanCoverage, RuleCoverageType));

        kanban_ds = kanbanCard_ds.addDataSource(tableNum(Kanban));
        kanban_ds.addLink(fieldNum(KanbanCard, Kanban), fieldNum(Kanban, RecId));
        kanban_ds.joinMode(JoinMode::OuterJoin);
        kanban_ds.fetchMode(QueryFetchMode::One2One);
        kanban_ds.fields().clearFieldList();
        kanban_ds.fields().addField(fieldNum(Kanban, RecId));
        kanban_ds.fields().addField(fieldNum(Kanban, KanbanRule));
        kanban_ds.fields().addField(fieldNum(Kanban, InventDimId));
        kanban_ds.fields().addField(fieldNum(Kanban, ItemId));
        kanban_ds.fields().addField(fieldNum(Kanban, KanbanId));
        kanban_ds.fields().addField(fieldNum(Kanban, Express));
        kanban_ds.fields().addField(fieldNum(Kanban, DueDateTime));
        kanban_ds.fields().addField(fieldNum(Kanban, bomId));
        kanban_ds.fields().addField(fieldNum(Kanban, Status));
        kanban_ds.fields().addField(fieldNum(Kanban, QuantityOrdered));
        kanban_ds.fields().addField(fieldNum(Kanban, QuantityReceived));

        if (cardList)
        {
            ListEnumerator le = cardList.getEnumerator();
            while (le.moveNext())
            {
                kanbanCard_ds.addRange(fieldNum(KanbanCard,CardId)).value(queryValue(le.current()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareKanbanQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares a query to process kanbans from the specified parameters.
    /// </summary>
    private void prepareKanbanQuery()
    {
        kanban_ds = query.addDataSource(tableNum(Kanban));
        kanban_ds.fields().clearFieldList();
        kanban_ds.fields().addField(fieldNum(Kanban, RecId));
        kanban_ds.fields().addField(fieldNum(Kanban, KanbanRule));
        kanban_ds.fields().addField(fieldNum(Kanban, InventDimId));
        kanban_ds.fields().addField(fieldNum(Kanban, ItemId));
        kanban_ds.fields().addField(fieldNum(Kanban, KanbanId));
        kanban_ds.fields().addField(fieldNum(Kanban, Express));
        kanban_ds.fields().addField(fieldNum(Kanban, DueDateTime));
        kanban_ds.fields().addField(fieldNum(Kanban, bomId));
        kanban_ds.fields().addField(fieldNum(Kanban, Status));
        kanban_ds.fields().addField(fieldNum(Kanban, QuantityOrdered));
        kanban_ds.fields().addField(fieldNum(Kanban, QuantityReceived));

        kanbanRule_ds = kanban_ds.addDataSource(tableNum(KanbanRule));
        kanbanRule_ds.addLink(fieldNum(Kanban, KanbanRule), fieldNum(KanbanRule, RecId));
        kanbanRule_ds.joinMode(JoinMode::InnerJoin);
        kanbanRule_ds.fetchMode(QueryFetchMode::One2One);
        kanbanRule_ds.fields().clearFieldList();
        kanbanRule_ds.fields().addField(fieldNum(KanbanRule, RecId));
        kanbanRule_ds.fields().addField(fieldNum(KanbanRule, KanbanFlow));
        kanbanRule_ds.fields().addField(fieldNum(KanbanRule, PrintCardWithPickingList));
        kanbanRule_ds.fields().addField(fieldNum(KanbanRule, KanbanType));
        kanbanRule_ds.fields().addField(fieldNum(KanbanRule, PrintInstructionsOnCard));
        kanbanRule_ds.fields().addField(fieldNum(KanbanRule, Quantity));
        kanbanRule_ds.addRange(fieldNum(KanbanRule,LegalEntity)).value(queryValue(CompanyInfo::current()));

        kanbanFlow_ds = kanbanRule_ds.addDataSource(tableNum(KanbanFlow));
        kanbanFlow_ds.addLink(fieldNum(KanbanRule, KanbanFlow), fieldNum(KanbanFlow, RecId));
        kanbanFlow_ds.joinMode(JoinMode::InnerJoin);
        kanbanFlow_ds.fetchMode(QueryFetchMode::One2One);
        kanbanFlow_ds.fields().clearFieldList();
        kanbanFlow_ds.fields().addField(fieldNum(KanbanFlow, RecId));
        kanbanFlow_ds.fields().addField(fieldNum(KanbanFlow, LastPlanPlanActivity));
        kanbanFlow_ds.fields().addField(fieldNum(KanbanFlow, FirstPlanPlanActivity));

        kanbanCard_ds = kanban_ds.addDataSource(tableNum(KanbanCard));
        kanbanCard_ds.addLink(fieldNum(Kanban, RecId), fieldNum(KanbanCard, Kanban));
        kanbanCard_ds.joinMode(JoinMode::OuterJoin);
        kanbanCard_ds.fetchMode(QueryFetchMode::One2One);
        kanbanCard_ds.fields().clearFieldList();
        kanbanCard_ds.fields().addField(fieldNum(KanbanCard, RecId));
        kanbanCard_ds.fields().addField(fieldNum(KanbanCard, CardId));
        kanbanCard_ds.fields().addField(fieldNum(KanbanCard, PrintStatus));

        if (kanbanList)
        {
            ListEnumerator le = kanbanList.getEnumerator();
            while (le.moveNext())
            {
                kanban_ds.addRange(fieldNum(Kanban,KanbanId)).value(queryValue(le.current()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares a query to process the kanbans or kanban cards from the specified parameters.
    /// </summary>
    private void prepareQuery()
    {
        query = new Query();

        // Depending on which parameter is set, a query is created
        if (kanbanList)
        {
            this.prepareKanbanQuery();
        }
        else
        {
            this.prepareKanbanCardQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic that is used by the <c>KanbanPage</c>
    ///    report.
    /// </remarks>
    public void processReport()
    {
        KanbanPageContract contract = this.parmDataContract() as KanbanPageContract;

        kanbanList           = contract.parmKanbanList();
        cardList             = contract.parmCardList();
        workCellParameter    = contract.parmWorkCell();
        printStatusParameter = contract.parmPrintStatus();

        delete_from kanbanPageTmp;

        this.prepareQuery();
        this.prepareData();
        queryRun = new QueryRun(query);

        ttsbegin;
        while (queryRun.next())
        {
            this.initCardData();

            if (this.matchPrintStatusFilter())
            {
                if (kanbanRule.PrintInstructionsOnCard == KanbanPrintInstructions::WorkInstructions)
                {
                    this.insertCard();
                }
                else
                {
                    this.insertWithShippingInformation();
                }

                kanbanCard.setPrintStatus(KanbanCardPrintStatusType::Printed,true);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBasicInformation</Name>
				<Source><![CDATA[
    protected void setBasicInformation()
    {
        kanbanPageTmp.CardId                    = kanbanCard.CardId;
        kanbanPageTmp.KanbanId                  = kanban.KanbanId;
        kanbanPageTmp.HasPickList               = kanbanRule.PrintCardWithPickingList;
        kanbanPageTmp.PageNumber                = pageUsedForKanban;
        kanbanPageTmp.KanbanType                = kanbanRule.KanbanType;
        kanbanPageTmp.UserName                  = userName;
        kanbanPageTmp.PrintInstructionsOnCard   = kanbanRule.PrintInstructionsOnCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommonCardInformation</Name>
				<Source><![CDATA[
    private void setCommonCardInformation()
    {
        KanbanFormHelper        kanbanFormHelper = KanbanFormHelper::newStandard();

        // basic information - fields used in the report for grouping and filtering
        this.setBasicInformation();

        // top left data region
        this.setProductInformation();
        kanbanPageTmp.Express           = kanban.Express;

        // top right data region
        this.setPrintStatus(kanbanCard.PrintStatus);
        PlanActivityLocation lastPlanActivityLocation = kanbanFlow.lastPlanActivity().receiptLocation();

        kanbanPageTmp.ProductionFlow    = kanbanFlow.lastActivityPlanName();
        kanbanPageTmp.DueDate           = kanban.DueDateTime;
        kanbanPageTmp.InventLocationId  = lastPlanActivityLocation.InventLocationId;
        kanbanPageTmp.wmsLocationId     = lastPlanActivityLocation.wmsLocationId;

        // Schedule/sales event based kanbans
        kanbanFormHelper.setDatasources(kanban,kanban.lastKanbanJob());
        kanbanPageTmp.ForKanban  = kanbanFormHelper.sourceKanbanId();
        kanbanPageTmp.SalesOrder = kanbanFormHelper.sourceSalesId();
        if (kanbanPageTmp.SalesOrder)
        {
            SalesLine salesLine          = kanbanFormHelper.sourceSalesLine();
            kanbanPageTmp.CustomerItemId = kanbanFormHelper.sourceSalesExternalItemId();
            kanbanPageTmp.CustomerName   = SalesTable::find(kanbanPageTmp.SalesOrder).customerName();
            kanbanPageTmp.ShipAddress    = salesLine.deliveryAddress().Address;
        }
        else
        {
            kanbanPageTmp.ShipAddress = kanban.lastKanbanJob().inventDim().inventLocation().address();
        }

        // bottom right data region
        this.setInstructionsInformation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInstructionsInformation</Name>
				<Source><![CDATA[
    private void setInstructionsInformation()
    {
        if (kanbanRule.PrintInstructionsOnCard == KanbanPrintInstructions::WorkInstructions)
        {
            this.setWorkInstructions();
        }
        else
        {
            this.setShippingInstructions();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the kanban card print status.
    /// </summary>
    /// <param name="_cardPrintStatus">
    /// The status to set.
    /// </param>
    /// <returns>
    /// A <c>kanbanPageTmp</c> temporary buffer.
    /// </returns>
    private KanbanPageTmp setPrintStatus(KanbanCardPrintStatusType _cardPrintStatus)
    {
        kanbanPageTmp.PrintStatus = _cardPrintStatus;

        switch (_cardPrintStatus)
        {
            case KanbanCardPrintStatusType::New:
            case KanbanCardPrintStatusType::Waiting:
                // no status for new or waiting cards
                kanbanPageTmp.CardPrintStatus = '';
                break;

            case KanbanCardPrintStatusType::Printed:
                // duplicate
                kanbanPageTmp.CardPrintStatus = "@SYS131948";
                break;

            case KanbanCardPrintStatusType::NeedsReprint:
                // replacement
                kanbanPageTmp.CardPrintStatus = "@SYS84714";
                break;
        }

        return kanbanPageTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductInformation</Name>
				<Source><![CDATA[
    private void setProductInformation()
    {
        if (   kanban
            || leanCoverage.RuleCoverageType == LeanRuleCoverageType::Product)
        {
            InventDim         inventDim         = InventDim::find(kanban? kanban.InventDimId : leanCoverage.InventDimId);
            ItemId            itemId            = kanban? kanban.ItemId : leanCoverage.ItemId;
            InventTable       inventTable       = InventTable::find(itemId);
            InventTableModule inventTableModule = InventTableModule::find(itemId, ModuleInventPurchSales::Invent);

            kanbanPageTmp.ItemId        = inventTable.ItemId;
            kanbanPageTmp.ItemName      = inventTable.productName(companyLanguage,inventDim.InventDimId);
            kanbanPageTmp.InventDimFieldsMap::initProductDimensionsFrom(inventDim);
            KanbanPageTmp.IsProductFamily = NoYes::No;
            if (kanban)
            {
                kanbanPageTmp.Quantity = kanban.Status >= LeanKanbanStatus::Received ? kanban.QuantityReceived : kanban.QuantityOrdered;
            }
            else
            {
                kanbanPageTmp.Quantity = kanbanRule.Quantity;
            }
            kanbanPageTmp.QuantityUnit  = inventTableModule.UnitId;

            if (kanbanPageTmp.Quantity)
            {
                kanbanPageTmp.QuantityStr = num2str(kanbanPageTmp.Quantity,
                                                    1,
                                                    UnitOfMeasure::findBySymbol(inventTableModule.UnitId).DecimalPrecision, 1, 0);
            }
        }
        else
        {
            if (leanCoverage.RuleCoverageType == LeanRuleCoverageType::ProductFamily)
            {
                kanbanPageTmp.ItemId = leanCoverage.AllocationId;
                KanbanPageTmp.IsProductFamily = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShippingInstructions</Name>
				<Source><![CDATA[
    private void setShippingInstructions()
    {
        if (   inventBatchIds
            && inventSerialIds
            && wmsPalletIds
            // <GEERU>
            && (!countryRegion_RU ||
                ( inventProfileId_RUs
                   && inventOwnerId_RUs
                   && inventGTDId_RUs
                ))
            // </GEERU>
            )
        {
            kanbanPageTmp.ShipInventBatchId         = shipInventBatchId;
            kanbanPageTmp.ShipIndexInventBatchId    = inventBatchIds.lookup(shipInventBatchId);
            kanbanPageTmp.ShipNumberInventBatchId   = inventBatchIds.elements();

            kanbanPageTmp.ShipInventSerialId        = shipInventSerialId;
            kanbanPageTmp.ShipIndexInventSerialId   = inventSerialIds.lookup(shipInventSerialId);
            kanbanPageTmp.ShipNumberInventSerialId  = inventSerialIds.elements();

            kanbanPageTmp.ShipWMSPalletId           = shipWMSPalletId;
            kanbanPageTmp.ShipIndexWMSPalletId      = wmsPalletIds.lookup(shipWMSPalletId);
            kanbanPageTmp.ShipNumberWMSPalletId     = wmsPalletIds.elements();
            // <GEERU>
            if (countryRegion_RU)
            {
                kanbanPageTmp.InventProfileId_RU            = inventProfileId;
                kanbanPageTmp.ShipIndexInventProfileId_RU   = inventProfileId_RUs.lookup(inventProfileId);
                kanbanPageTmp.ShipNumberInventProfileId_RU  = inventProfileId_RUs.elements();

                kanbanPageTmp.InventOwnerId_RU              = inventOwnerId;
                kanbanPageTmp.ShipIndexInventOwnerId_RU     = inventOwnerId_RUs.lookup(inventOwnerId);
                kanbanPageTmp.ShipNumberInventOwnerId_RU    = inventOwnerId_RUs.elements();

                kanbanPageTmp.InventGTDId_RU                = inventGTDId;
                kanbanPageTmp.ShipIndexInventGTDId_RU       = inventGTDId_RUs.lookup(inventGTDId);
                kanbanPageTmp.ShipNumberInventGTDId_RU      = inventGTDId_RUs.elements();
            }
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkInstructions</Name>
				<Source><![CDATA[
    private void setWorkInstructions()
    {
        #File
        DocuValue           docuValue;
        str                 mimeType;
        BinData             binData;
        Filename            filename;
        int                 fileSize;
        FileIOPermission    permission;
        boolean             imageOnCard;
        DocuRef             docuRef = kanban.productionInstructions();

        if (docuRef)
        {
            docuValue = docuRef.docuValue();
            if (docuValue)
            {
                str fileType = strLwr(docuValue.FileType);
                switch (fileType)
                {
                    case #jpg:
                        mimeType = #image + #jpeg;
                        break;
                    case #jpeg:
                    case #bmp:
                    case #gif:
                    case #png:
                        mimeType = #image + fileType;
                        break;
                    case #text:
                        mimeType = #text;
                        break;
                    default:
                        break;
                }

                if (mimeType)
                {
                    container prodInstructions = KanbanPageDP::getProductionInstructions(docuRef.RecId);

                    if (prodInstructions)
                    {
                        System.Byte[] prodInstructionsContent = conPeek(prodInstructions, 1);

                        // maximum supported size for embedded files is 1MB
                        if (prodInstructionsContent.Length <= #oneMB)
                        {
                            kanbanPageTmp.MimeType         = mimeType;
                            kanbanPageTmp.DocuRef          = docuRef.RecId;
                            kanbanPageTmp.ProdInstructions = prodInstructions;
                            imageOnCard                    = true;
                        }
                    }
                }
            }
        }

        if (!imageOnCard)
        {
            // if file is not supported, show error message on the report
            if (docuRef)
            {
                kanbanPageTmp.ErrorMsg = strFmt("@SYS329637", docuValue.fileNameValue());
            }

            InventTable inventTable = InventTable::find(kanban? kanban.ItemId : leanCoverage.ItemId);

            kanbanPageTmp.MimeType           = #embeddedText;
            kanbanPageTmp.ProductDescription = EcoResProductTranslation::getDescriptionOrDefaultDescription(inventTable.Product, userLanguage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductionInstructions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a container with production instructions for the specified ID.
    /// </summary>
    /// <param name="_docuRefRecId">
    ///    The record ID of a record in the <c>DocuRef</c> table.
    /// </param>
    /// <returns>
    ///    A container with production instructions.
    /// </returns>
    public static container getProductionInstructions(RefRecId _docuRefRecId)
    {
        container result;

        DocuRef docuRef = DocuRef::findRecId(_docuRefRecId);

        if (docuRef)
        {
            result = DocumentManagement::getAttachmentAsContainer(docuRef);
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>