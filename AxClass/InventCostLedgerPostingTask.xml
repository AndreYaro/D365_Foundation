<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostLedgerPostingTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Updates the last stage of the inventory closing.
/// </summary>
class InventCostLedgerPostingTask extends InventCostHelpTaskBase implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status of the inventory closing to <c>LedgerPosting</c> and starts the ledger posting.
    /// </summary>
    protected void doRun()
    {
        RefRecId batchRecId;

        if (this.isInBatch())
        {
            batchRecId = this.parmCurrentBatch().RecId;
        }

        ttsbegin;
        inventClosing = InventClosing::find(voucher, transDate, true);

        // prevent duplicate resume calculation
        if (inventClosing.InventCostStatus == InventCostStatus::Ended)
        {
            ttsabort;
            return;
        }
        inventClosing.InventCostStatus = InventCostStatus::Ledgerposting;
        inventClosing.LedgerPostingBatch = batchRecId;
        inventClosing.update();
        ttscommit;

        this.updateLedgerPosting();

        InventCostClosingInstrumentationTask::runAsync(InventClosing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    protected ClassDescription getTaskDescription()
    {
        return InventCostLedgerPostingTask::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventCostLedgerPostingTask construct()
    {
        return new InventCostLedgerPostingTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    public static ClassDescription description()
    {
        return "@SYS4001037";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventCostLedgerPostingTask</c> class.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher of the inventory closing.
    /// </param>
    /// <param name="_transDate">
    /// The date of the inventory closing.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventCostLedgerPostingTask</c> class.
    /// </returns>
    public static InventCostLedgerPostingTask newTask(
        Voucher             _voucher,
        TransDate           _transDate
    )
    {
        InventCostLedgerPostingTask inventCostLedgerPostingTask = InventCostLedgerPostingTask::construct();

        inventCostLedgerPostingTask.parmVoucher(_voucher);
        inventCostLedgerPostingTask.parmTransDate(_transDate);

        return inventCostLedgerPostingTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAdjustmentsWithoutValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes adjustments without a value.
    /// </summary>
    protected void deleteAdjustmentsWithoutValue()
    {
        ttsbegin;

        InventSettlement    inventSettlement;

        delete_from inventSettlement
            where inventSettlement.TransDate == inventClosing.TransDate
               && inventSettlement.Voucher == inventClosing.Voucher
               && (inventSettlement.SettleModel == InventSettleModel::Adjustment || inventSettlement.SettleModel == InventSettleModel::PhysicalValue)
               && inventSettlement.SettleType == InventSettleType::CompleteAdjustment
               && inventSettlement.CostAmountAdjustment == 0.0
               && inventSettlement.CostAmountSettled == 0.0
               && inventSettlement.QtySettled == 0.0
               && inventSettlement.PdsCWSettled == 0.0;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the last stage of the inventory closing.
    /// </summary>
    /// <remarks>
    ///  In this stage the following steps will be performed:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Calculate production variances for ended production orders</description>
    ///   </item>
    ///   <item>
    ///   <description>Calculate indirect cost for open production orders</description>
    ///   </item>
    ///   <item>
    ///   <description>Post to the ledger</description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Create the <c>InventCostTransSum</c> records
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Check against the <c>ProdTable</c> table
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    protected void updateLedgerPosting()
    {
        #ISOCountryRegionCodes

        InventAdjustPost inventAdjustPost;
        LedgerVoucher ledgerVoucher;

        progress.setText("@SYS78043");
        progress.update();

        this.deleteAdjustmentsWithoutValue();

        ttsbegin;
        inventClosing = InventClosing::find(inventClosing.Voucher,inventClosing.TransDate,true);

        CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(classStr(InventCostLedgerPostingTask));
        using (var updateLedgerPostingActivityContext = instrumentationLogger.inventoryClosingLedgerPostingActivities().updateLedgerPosting(inventClosing))
        {
            if (inventClosing.InventCostStatus == InventCostStatus::Ledgerposting)
            {
                progress.setText("@SYS26475");
                progress.update();

                if (inventClosing.Ledger)
                {
                    // <GEERU>
                    inventAdjustPost = InventAdjustPostClosing::newFromCurrency_RU(
                    // </GEERU>
                    inventClosing.Voucher,
                        inventClosing.TransDate,
                        inventClosing.AdjustmentSpec,
                        // <GEERU>
                    InventClosing::ledgerTransTxt(InventAdjustmentType::Closing, inventTransCurrency),
                        // </GEERU>
                    // <GEEU>
                    inventClosing.LedgerCorrection,
                        // </GEEU>
                    '',
                        false,
                        false,
                        // <GEERU>
                    SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE]) ?
                            NumberSeq::newGetNum(InventClosing::numberSequenceReference(inventClosing.AdjustmentType, inventTransCurrency)).parmNumberSequenceCode() :
                            NumberSeq::newGetNum(InventClosing::numberSequenceReference(InventAdjustmentType::Closing, inventTransCurrency)).parmNumberSequenceCode(),
                        inventTransCurrency);
                    // </GEERU>

                    ledgerVoucher = inventAdjustPost.initLedgerVoucherExt();

                    // I need to pass an eventually initialized ledgerVoucher object in there,
                    // so that the production variance postings can be added to this ledgerVoucher
                    if (inventClosing.ProdJournal == NoYes::Yes)
                    {
                        this.calcAndPostVarianceAdjustments(ledgerVoucher);
                    }
                }
                else
                {
                    if (InventAdjustPost::checkPostProject(inventClosing.Voucher,inventClosing.TransDate))
                    {
                        InventAdjustPost::updateProjectNoLedger(inventClosing.Voucher,inventClosing.TransDate);
                    }
                }

                // Check if I should update the productions
                if (inventClosing.ProdJournal == NoYes::Yes)
                {
                    this.updateOpenProdOrders();
                }

                // Post to ledger
                if (inventClosing.Ledger)
                {
                    this.postAdjustmentsToLedger(inventAdjustPost, ledgerVoucher);
                }

                inventClosing.createTransactionLog();

                inventClosing.InventCostStatus = InventCostStatus::Ended;
                inventClosing.End = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
                inventClosing.update();

                if (inventClosing.NumOfIteration == inventClosing.MaxIterations)
                {
                    info("@SYS79284");
                }
            }

            // Now build the inventCostTransSum records
            if (inventClosing.AdjustmentType == InventAdjustmentType::Closing)
            {
                this.calcInventCostTransSum(inventClosing);
            }

            // Just before the commit, check if the status of a prod order has changed
            if (inventClosing.ProdJournal)
            {
                this.checkProdStatus();
            }
            ttscommit;

            // This is run outside the transaction scope to reduce locking
            InventCostProdRecalcMultiJob::constructFromInventoryCloseAndDoBatch(inventClosing.RecId);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndPostVarianceAdjustments</Name>
				<Source><![CDATA[
    private void calcAndPostVarianceAdjustments(LedgerVoucher _ledgerVoucher)
    {
        InventCostListAssembly assembly;
        ProdTable prodTable;

        Map modelGroupIdMap = new Map(Types::String, Types::Class);
        InventModelType inventModelType;

        CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(classStr(InventCostLedgerPostingTask));
        using (var calcAndPostVarianceAdjustmentsActivityContext = instrumentationLogger.inventoryClosingLedgerPostingActivities().calcAndPostVarianceAdjustments(inventClosing))
        {
            QueryRun queryRun = new QueryRun(this.initVarianceCalculationQuery());
            while (queryRun.next())
            {
                if (queryRun.changed(tableNum(InventCostListAssembly)))
                {
                    assembly = queryRun.get(tableNum(InventCostListAssembly));
                }
                if (queryRun.changed(tableNum(ProdTable)))
                {
                    prodTable = queryRun.get(tableNum(ProdTable));
                }

                // Calculate production variances
                InventCostTransVarianceList inventCostTransVarianceList = this.calculateProductionVarianceAdjustments(assembly, prodTable);

                if (inventCostTransVarianceList && inventCostTransVarianceList.length() != 0)
                {
                    if (!modelGroupIdMap.exists(assembly.ModelGroupId))
                    {
                        inventModelType  = InventModelGroup::find(assembly.ModelGroupId).inventModelType();
                        modelGroupIdMap.insert(assembly.ModelGroupId, inventModelType);
                    }
                    else
                    {
                        inventModelType = modelGroupIdMap.lookup(assembly.ModelGroupId);
                    }

                    this.postVariances(inventModelType,
                                        _ledgerVoucher,
                                        assembly.InventTransOrigin,
                                        inventCostTransVarianceList);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAdjustmentsToLedger</Name>
				<Source><![CDATA[
    private void postAdjustmentsToLedger(
        InventAdjustPost _inventAdjustPost,
        LedgerVoucher    _ledgerVoucher)
    {
        CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(classStr(InventCostLedgerPostingTask));
        using (var postAdjustmentsToLedgerActivityContext = instrumentationLogger.inventoryClosingLedgerPostingActivities().postAdjustmentsToLedger(inventClosing))
        {
            _inventAdjustPost.updateNow(_ledgerVoucher, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInventCostTransSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the <c>InventCostTransSumCalc::calcFromInventClosing</c> method to create the
    ///    <c>InventCostTransSum</c> records.
    /// </summary>
    /// <param name="_inventClosing">
    ///    The <c>InventClosing</c> record, that is currently being processed and for which the
    ///    <c>InventCostTransSum</c> records are created.
    /// </param>
    /// <remarks>
    ///    This method is called from the <c>inventCostHelp.updateLedgerPosting</c> method. It runs in the
    ///    same transaction scope to make sure that the <c>InventCostTransSum</c> records are created when
    ///    inventory closing is finished.
    /// </remarks>
    private void calcInventCostTransSum(InventClosing  _inventClosing)
    {
        CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(classStr(InventCostLedgerPostingTask));
        using (var calcInventCostTransSumActivityContext = instrumentationLogger.inventoryClosingLedgerPostingActivities().calcInventCostTransSum(inventClosing))
        {
            // Call the creation of the inventCostTransSum records
            InventCostTransSumCalc::calcFromInventClosing(_inventClosing);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVarianceFromAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the production variances for a given production order based on the adjustments of the inventory.
    /// </summary>
    /// <param name="_inventTransOriginId">
    /// The inventory transaction originator id for which the variances should be calculated.
    /// </param>
    /// <param name="_costGroupId">
    /// The cost group id that should assigned to the variance.
    /// </param>
    /// <param name="_varianceType">
    /// The variance type, that should be assigned to the variance.
    /// </param>
    /// <param name="_dimension">
    /// The dimension that should assigned to the variance.
    /// </param>
    /// <returns>
    /// A inventCostTransVariance list holding the variances.
    /// </returns>
    /// <remarks>
    /// This method will select the inventory settlements to determine the overall
    /// adjustment amount. This amount will then be created as a variance, with only the total level,
    /// not broken down any further.
    /// </remarks>
    private InventCostTransVarianceList calcVarianceFromAdjustment(InventTransOriginId        _inventTransOriginId,
                                                                     CostGroupId                _costGroupId,
                                                                     InventCostVarianceType     _varianceType,
                                                                     DimensionDefault           _dimension)
    {
        InventCostTransVarianceList     inventCostTransVarianceList = InventCostTransVarianceList::construct();
        InventSettlement                inventSettlement;
        InventTrans                     inventTrans;
        InventSettlement                localInventSettlement;

        InventCostTransVariance         costTransVariance;

        // Get the total adjustment
        select sum(CostAmountAdjustment) from inventSettlement
            where inventSettlement.Voucher                    == inventClosing.Voucher
               && inventSettlement.TransDate                  == inventClosing.TransDate
               && inventSettlement.CostAmountAdjustment       != 0
               && inventSettlement.OperationsPosting          != LedgerPostingType::InventStdCostRoundingVariance
               // <GEERU>
        && inventSettlement.InventTransCurrency_RU     == inventTransCurrency
               // </GEERU>
        exists join inventTrans
                where inventTrans.RecId                       == inventSettlement.TransRecId
                   && inventTrans.InventTransOrigin           == _inventTransOriginId;

        if (inventSettlement.CostAmountAdjustment != 0)
        {
            // Get the total qauntity
            select sum(Qty) from inventTrans
                where inventTrans.InventTransOrigin    == _inventTransOriginId
                exists join localInventSettlement
                where localInventSettlement.TransRecId           == inventTrans.RecId
                   && localInventSettlement.Voucher              == inventClosing.Voucher
                   && localInventSettlement.TransDate            == inventClosing.TransDate
                   && localInventSettlement.CostAmountAdjustment != 0
                   && localInventSettlement.OperationsPosting    != LedgerPostingType::InventStdCostRoundingVariance;
        }

        // Initialize actual cost list = The adjustment
        InventCostTransCostList actCostList = InventCostTransCostList::construct();
        // <GEERU>
        costTransVariance.initInventCostTransVariance(_costGroupId,
                                                      _varianceType,
                                                      _dimension,
                                                      inventTransCurrency == InventTransCurrency_RU::PrimaryCur   ? inventSettlement.CostAmountAdjustment     / (inventTrans.Qty ? inventTrans.Qty : 1) : 0,
                                                      inventTransCurrency == InventTransCurrency_RU::SecondaryCur ? 0 : inventSettlement.CostAmountAdjustment / (inventTrans.Qty ? inventTrans.Qty : 1));
        // </GEERU>
        actCostList.insert(costTransVariance);

        // Init the estimated cost
        InventCostTransCostList estCostList = InventCostTransCostList::construct();

        // Initialize the list that holds the variance
        inventCostTransVarianceList = InventCostCreateVarianceList::createVarianceListFromCostListDelta(actCostList, estCostList);

        return inventCostTransVarianceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateProductionVarianceAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates production variance adjustments.
    /// </summary>
    /// <param name="_assembly">
    /// The <c>InventCostListAssembly</c> to calculate variances for.
    /// </param>
    /// <param name="_prodTable">
    /// The <c>ProdTable</c> to calculate variances for.
    /// </param>
    /// <returns>
    /// An <c>InventCostTransVarianceList</c> with the calculated variances.
    /// </returns>
    /// <remarks>
    /// In the case where the provided <c>ProdTable</c> is null, the production variance
    /// is calculated from inventory adjustments.
    /// </remarks>
    private InventCostTransVarianceList calculateProductionVarianceAdjustments(
        InventCostListAssembly    _assembly,
        ProdTable                 _prodTable
        )
    {
        InventCostTransVarianceList         inventCostTransVarianceList;

        // Calculate variances based on prodcalcTrans
        // only if production order still exists,
        // and it has not been converted
        if (_assembly.ReferenceCategory == InventTransType::Production)
        {
            // Check if the production order was ended before the conversion to std cost
            // <GEERU>
            if (_assembly.DateFinancial >= InventStdCostConvItem::itemConversionDate(_assembly.ItemId, inventTransCurrency))
            // </GEERU>
            {
                // Production order was ended when item has been converted to std cost already
                // The adjustment is now a CostChange
                if (_prodTable)
                {
                    inventCostTransVarianceList = this.calcVarianceFromProdCalcTrans(_prodTable);
                }
                else
                {
                    inventCostTransVarianceList = this.calcVarianceFromAdjustment(_assembly.InventTransOrigin,
                                                                                  _assembly.CostGroupId,
                                                                                  InventCostVarianceType::CostChange,
                                                                                  _assembly.DefaultDimension);
                }
            }
            else
            {
                // Production order was ended before the conversion.
                // All adjustments trigger a revaluation variance
                inventCostTransVarianceList = this.calcVarianceFromAdjustment(_assembly.InventTransOrigin,
                                                                              _assembly.CostGroupId,
                                                                              InventCostVarianceType::Revaluation,
                                                                              _assembly.DefaultDimension);
            }
        }
        else
        {
            // For all the other transactions, always generate a cost change variance
            // based on the adjustment
            inventCostTransVarianceList = this.calcVarianceFromAdjustment(_assembly.InventTransOrigin,
                                                                          _assembly.CostGroupId,
                                                                          InventCostVarianceType::CostChange,
                                                                          _assembly.DefaultDimension);
        }

        return inventCostTransVarianceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVarianceFromProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the production variance by calling the <c>prodStandardVarianceList</c> class.
    /// </summary>
    /// <param name="_prodTable">
    ///    The production order for which the variances should be created.
    /// </param>
    /// <returns>
    ///    A <c>InventCostTransVariance</c> list that holds the variances.
    /// </returns>
    private InventCostTransVarianceList calcVarianceFromProdCalcTrans(ProdTable       _prodTable)
    {
        InventItemPrice             inventItemPrice;
        InventCostTrans             inventCostTrans;

        // FInd the itemPrice that was used for the financial update
        select firstonly TableId from inventCostTrans
            where inventCostTrans.InventTransId     == _prodTable.InventTransId
               && inventCostTrans.CostTransType     == InventCostTransType::Receipt
               && inventCostTrans.CostTransState    == InventCostTransState::Financial
               && inventCostTrans.CostTransRefType  == InventCostTransRefType::Production
        join inventItemPrice
            where inventItemPrice.RecId == inventCostTrans.ItemPriceRefRecId;

        ProdStandardVarianceList prodStandardVarianceList = ProdStandardVarianceList::construct();
        prodStandardVarianceList.parmProdTable(_prodTable);
        prodStandardVarianceList.parmProdQty(ProdTableJour::historicalCostQtyGood(_prodTable.ProdId));
        prodStandardVarianceList.parmInventItemPrice(inventItemPrice);
        boolean prodVariancesAreCalculated = prodStandardVarianceList.run();

        if (prodVariancesAreCalculated)
        {
            return prodStandardVarianceList.inventCostTransVarianceList();
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postVariances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Distributes the production variances to the receipts.
    /// </summary>
    /// <param name="_inventModelType">
    /// An instance of the <c>inventModelType</c> class.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// The ledgerVoucher to which the postings should be added.
    /// </param>
    /// <param name="_inventTransOriginId">
    /// The inventory transaction originator id to which the variances belongs.
    /// </param>
    /// <param name="_inventCostTransVarianceList">
    /// The inventCostTransVariance list holding the variances.
    /// </param>
    private void postVariances(InventModelType                _inventModelType,
                                 LedgerVoucher                  _ledgerVoucher,
                                 InventTransOriginId            _inventTransOriginId,
                                 InventCostTransVarianceList    _inventCostTransVarianceList)
    {
        InventTrans                 receipt;

        // now distribute the variance over all the reciepts
        while select * from receipt
            where receipt.InventTransOrigin     == _inventTransOriginId
               && receipt.StatusReceipt         == StatusReceipt::Purchased
               && receipt.StatusIssue           == StatusIssue::None
               && receipt.PackingSlipReturned   == 0
        {
            _inventModelType.adjustCostTrans(receipt,
                                             _ledgerVoucher,
                                             inventClosing.Voucher,
                                             inventClosing.TransDate,
                                             0,
                                             _inventCostTransVarianceList,
                                             inventClosing.AdjustmentSpec);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProdStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the status of a production order has changed to <c>ended</c>.
    /// </summary>
    /// <remarks>
    ///    The set that is built during the <c>addToProductionDataMap</c> method will be compared to a set
    ///    based on the actual values.
    /// </remarks>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    A production order was ended when the closing was running.
    /// </exception>
    private void checkProdStatus()
    {
        InventSettlement        inventSettlement;
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        ProdTable               prodTable;
        Set                     prodIdCheckSet = new Set(Types::String);

        CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(classStr(InventCostLedgerPostingTask));
        using (var checkProdStatusActivityContext = instrumentationLogger.inventoryClosingLedgerPostingActivities().checkProdStatus(inventClosing))
        {
            while select ProdId from prodTable
                where prodTable.ProdStatus != ProdStatus::Completed
                exists join inventTransOrigin
                    where inventTransOrigin.ReferenceCategory == InventTransType::ProdLine
                       && inventTransOrigin.ReferenceId       == prodTable.ProdId
                    exists join inventTrans
                        where inventTrans.InventTransOrigin   == inventTransOrigin.RecId
                        exists join inventSettlement
                            where inventSettlement.TransRecId  == inventTrans.RecId
                               && inventSettlement.SettleModel == InventSettleModel::PhysicalValue
                               && inventSettlement.Voucher     == inventClosing.Voucher
                               && inventSettlement.TransDate   == inventClosing.TransDate
                               // <GEERU>
                               && inventSettlement.InventTransCurrency_RU == inventTransCurrency
                               // </GEERU>
            {
                // Now check if the status has changed
                prodIdCheckSet.add(prodTable.ProdId);
            }

            if (prodIdSet &&
                prodIdCheckSet &&
                Set::difference(prodIdSet, prodIdCheckSet).elements() != 0)
            {
                error("@SYS116077");
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVarianceCalculationQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the variance calculation query.
    /// </summary>
    /// <returns>
    /// An <c>Query</c> with the variance calculation query.
    /// </returns>
    private Query initVarianceCalculationQuery()
    {
        Query query = new Query();
        QueryBuildDataSource assemblyDS = query.addDataSource(tableNum(InventCostListAssembly));
        assemblyDS.addSelectionField(fieldNum(InventCostListAssembly, ItemId));
        assemblyDS.addSelectionField(fieldNum(InventCostListAssembly, ReferenceId));
        assemblyDS.addSelectionField(fieldNum(InventCostListAssembly, ItemId));
        assemblyDS.addSelectionField(fieldNum(InventCostListAssembly, ReferenceCategory));
        assemblyDS.addSelectionField(fieldNum(InventCostListAssembly, DateFinancial));
        assemblyDS.addSelectionField(fieldNum(InventCostListAssembly, ModelGroupId));
        assemblyDS.addSelectionField(fieldNum(InventCostListAssembly, CostGroupId));
        assemblyDS.addSelectionField(fieldNum(InventCostListAssembly, DefaultDimension));
        assemblyDS.addSelectionField(fieldNum(InventCostListAssembly, InventTransOrigin));
        assemblyDS.addRange(fieldNum(InventCostListAssembly, inventClosing)).value(queryValue(inventClosing.RecId));

        QueryBuildDataSource prodtableDS = assemblyDS.addDataSource(tableNum(ProdTable));
        prodtableDS.joinMode(JoinMode::OuterJoin);
        prodtableDS.addLink(fieldNum(InventCostListAssembly, DataAreaId), fieldNum(ProdTable, DataAreaId));
        prodtableDS.addLink(fieldNum(InventCostListAssembly, ReferenceId), fieldNum(ProdTable, ProdId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOpenProdOrders</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers the update of open production orders.
    /// </summary>
    /// <remarks>
    ///    All the settlements to an open production order will be added to the production data map. This
    ///    information will then be passed to the <c>inventCostProdAdjust</c> class.
    /// </remarks>
    protected void updateOpenProdOrders()
    {
        InventSettlement inventSettlement;
        InventTransOrigin inventTransOrigin;
        InventTrans inventTrans;
        ProdTable prodTable, lockProdTable;

        CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(classStr(InventCostLedgerPostingTask));
        using (var updateOpenProdOrdersActivityContext = instrumentationLogger.inventoryClosingLedgerPostingActivities().updateOpenProdOrders(inventClosing))
        {
            // <GEERU>
            if (inventTransCurrency != InventTransCurrency_RU::PrimaryCur)
            {
                return;
            }
            // </GEERU>
            InventTransAdjustDataMap inventTransAdjustDataMap = InventTransAdjustDataMap::construct();

            prodIdSet = new Set(Types::String);
            boolean SkipBlockingOfProdTable = !FeatureStateProvider::isFeatureEnabled(InventCostBlockProdTableWhenClosingToggle::instance());

            while select InventTransId, ProdId from prodTable
                order by ProdId
                where prodTable.ProdStatus != ProdStatus::Completed
                join CostAmountAdjustment, ItemId from inventSettlement
                    where inventSettlement.SettleModel == InventSettleModel::PhysicalValue
                       && inventSettlement.Voucher     == inventClosing.Voucher
                       && inventSettlement.TransDate   == inventClosing.TransDate
                       // <GEERU>
                       && inventSettlement.InventTransCurrency_RU == inventTransCurrency
                       // </GEERU>
                    exists join inventTrans
                        where inventSettlement.TransRecId == inventTrans.RecId
                        exists join inventTransOrigin
                            where inventTransOrigin.RecId             == inventTrans.InventTransOrigin
                               && inventTransOrigin.ReferenceId       == prodTable.ProdId
                               && inventTransOrigin.ReferenceCategory == InventTransType::ProdLine
            {
                if (!SkipBlockingOfProdTable)
                {
                    // Block users from ending a Production Order while IC is running
                    select repeatableRead InventTransId, ProdId from lockProdTable
                    where lockProdTable.ProdStatus != ProdStatus::Completed
                        && lockProdTable.ProdId == prodTable.ProdId;
                }

                if (SkipBlockingOfProdTable || lockProdTable)
                {
                    // No need to pass an inventItemPrice or a inventItemCostGroupRollupList, because this is NOT a std cost item
                    inventTransAdjustDataMap.add(prodTable.InventTransId,
                        inventSettlement.ItemId,
                        inventSettlement.CostAmountAdjustment);

                    prodIdSet.add(prodTable.ProdId);
                }
            }

            // Now update the production order
            InventCostProdAdjust::adjustFromInventClosing(inventTransAdjustDataMap, inventClosing, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>