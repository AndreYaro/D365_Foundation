<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailValidationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class RetailValidationHelper
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findDatabaseProfileRecIdsByStoreNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of RecIds of CDX database profile that contains given store.
    /// </summary>
    /// <param name="_channelId">
    /// Retail channel identifier.
    /// </param>
    /// <returns>
    /// A list of RecId of CDX database profile.
    /// </returns>
    private static RetailTmpRecId findDatabaseProfileRecIdsByStoreNumber(RecId _channelId)
    {
        RetailTmpRecId result;
        RetailConnDatabaseProfile databaseProfile;
        RetailCDXDataStoreChannel dataStoreChannel;

        insert_recordset result (ReferenceRecId)
        select RecId from databaseProfile
            join dataStoreChannel
            where dataStoreChannel.DatabaseProfile == databaseProfile.RecId && dataStoreChannel.Channel == _channelId;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastDownloadSessionDataStores</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override data source query, get the latest CDX scheduled job of each channel database that has given channel.
    /// </summary>
    /// <param name = "_channelId">
    /// The RecId of store. If the channell id is 0, will return the latest CDX scheduled job of all channel databases.
    /// </param>
    /// <param name = "_schedulerJobId">
    /// The list of target scheduler job id.
    /// </param>
    /// <returns>
    /// The list of RecId of CDX download session data store.
    /// </returns>
    internal static RetailTmpRecId getLastDownloadSessionDataStores(RecId _channelId, RetailConnSchedulerJobIdTmp _schedulerJobId)
    {
        RetailCDXDownloadSession cdxDownloadSession1;
        RetailCDXDownloadSession cdxDownloadSession2;
        RetailCDXDownloadSessionDataStore downloadSessionDataStore1;
        RetailCDXDownloadSessionDataStore downloadSessionDataStore2;
        
        RetailTmpRecId downloadSessionDataStoreRecId;

        if (_channelId == 0)
        {
            while select maxof(CreatedDateTime) from cdxDownloadSession1
                join downloadSessionDataStore1
                join _schedulerJobId
                group by cdxDownloadSession1.JobID, downloadSessionDataStore1.DataStore
                    where downloadSessionDataStore1.Session == cdxDownloadSession1.RecId
                        && cdxDownloadSession1.JobID == _schedulerJobId.jobId
            {
                insert_recordset downloadSessionDataStoreRecId (ReferenceRecId)
                select RecId from downloadSessionDataStore2
                    join cdxDownloadSession2
                        where downloadSessionDataStore2.Session == cdxDownloadSession2.RecId
                        && downloadSessionDataStore2.DataStore == downloadSessionDataStore1.DataStore
                        && cdxDownloadSession2.JobID == cdxDownloadSession1.JobID
                        && cdxDownloadSession2.CreatedDateTime == cdxDownloadSession1.CreatedDateTime;
            }
        }
        else
        {
            RetailTmpRecId databaseProfileRecId = RetailValidationHelper::findDatabaseProfileRecIdsByStoreNumber(_channelId);

            while select maxof(CreatedDateTime) from cdxDownloadSession1
                join downloadSessionDataStore1
                join _schedulerJobId
                join databaseProfileRecId
                group by cdxDownloadSession1.JobID, downloadSessionDataStore1.DataStore
                    where cdxDownloadSession1.JobID == _schedulerJobId.jobId
                    && downloadSessionDataStore1.Session == cdxDownloadSession1.RecId
                    && downloadSessionDataStore1.DataStore == databaseProfileRecId.ReferenceRecId
            {
                insert_recordset downloadSessionDataStoreRecId (ReferenceRecId)
                select RecId from downloadSessionDataStore2
                    join cdxDownloadSession2
                        where downloadSessionDataStore2.Session == cdxDownloadSession2.RecId
                        && downloadSessionDataStore2.DataStore == downloadSessionDataStore1.DataStore
                        && cdxDownloadSession2.JobID == cdxDownloadSession1.JobID
                        && cdxDownloadSession2.CreatedDateTime == cdxDownloadSession1.CreatedDateTime;
            }
        }

        return downloadSessionDataStoreRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>