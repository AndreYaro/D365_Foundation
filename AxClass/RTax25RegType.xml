<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegType</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25RegType
{
    container           fieldType;
    container           fieldLabel;
    container           fieldDescription;
    container           calcParameters;
    container           childRegisters;
    container           fieldBaseType;
    container           hiddenFields;
    container           fieldId;        // for detached tables
    container           headerFields;
    NumberOf            fieldCount;
    int                 balanceField;

    container           displayOrder;
    boolean             useDisplayOrder;

    RTax25RegisterType  registerType;
    RTax25RegisterId    registerId;

    RAssetAssessedTaxRegType assessedTaxRegisterType;

    TableId             detachedTableId;
    boolean             suspendRecIds;

    #define.FieldGroup('RegisterValues')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assessedRegisterType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RAssetAssessedTaxRegType assessedRegisterType()
    {
        return assessedTaxRegisterType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>badDebtModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns record ID reference to the debt model.
    /// </summary>
    /// <returns>
    /// The record ID reference to the debt model.
    /// </returns>
    public RefRecId badDebtModel()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isARStdType</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method indicates if this tax register type is related to Accounts Receivable debts and should use counters for calculation.
    /// </summary>
    /// <returns>
    /// A <c>Boolean</c> value indicating if this tax register type is related to Accounts Receivable debts and should use counters for calculation.
    /// </returns>
    public boolean isARStdType()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int balanceField()
    {
        return balanceField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcParameters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container calcParameters()
    {
        return calcParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>childRegisters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container childRegisters()
    {
        return childRegisters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NotesLine description()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>descriptionExt</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NotesLine descriptionExt()
    {
        return (this.supportLedger() ? "@GLS103975" : "@GLS103976");
    }

]]></Source>
			</Method>
			<Method>
				<Name>existFieldId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean existFieldId(RTax25FieldId _fieldId)
    {
        return _fieldId > 0 && _fieldId <= this.fieldCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldBaseType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container fieldBaseType()
    {
        int       i;

        if (conlen(fieldBaseType) != 0)
            return fieldBaseType;

        for (i = 1; i <= conlen(fieldType); i++)
        {
            fieldBaseType += new DictType(conpeek(fieldType, i)).baseType();
        }

        return this.changeDisplayOrder(fieldBaseType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldCount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NumberOf fieldCount()
    {
        return fieldCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldDescription</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container fieldDescription()
    {
        return this.changeDisplayOrder(fieldDescription);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLabel</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container fieldLabel()
    {
        return this.changeDisplayOrder(fieldLabel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container fieldType()
    {
        return this.changeDisplayOrder(fieldType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegisterTypeStr</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str getRegisterTypeStr()
    {
        return assessedTaxRegisterType ?
               enum2str(assessedTaxRegisterType) :
               enum2str(registerType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hiddenFields</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container hiddenFields()
    {
        return hiddenFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void init(boolean _useDetachedTable = true)
    {
        DictEnum  dictEnum  = new DictEnum(enumnum(RAssetAssessedTaxRegType));

        if (conlen(fieldType) != conlen(fieldLabel) ||
            conlen(fieldType) != conlen(fieldDescription))
            throw error("@GLS103884");

        if (assessedTaxRegisterType == RAssetAssessedTaxRegType::None)
        {
            registerId = RTax25RegisterTable::registerType2Id(registerType);
        }
        else
        {
            registerId = dictEnum.value2Symbol(assessedTaxRegisterType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(boolean _useDetachedTable = true)
    {
        hiddenFields    = connull();
        balanceField    = -1;
        this.init(_useDetachedTable);
        fieldCount = conlen(fieldType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25Query query()
    {
        return new RTax25Query(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterId registerId()
    {
        return registerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterType registerType()
    {
        return registerType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportLedger</Name>
				<Source><![CDATA[
    // A class supports profit ledger relations i.e. LedgerTrans-based
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean supportLedger()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkExistField(RTax25RegisterType _registerType, RTax25FieldId _fieldId)
    {
        RTax25RegType regType = RTax25RegType::construct(_registerType);

        regType.init();

        if (! regType.existFieldId(_fieldId))
            return checkFailed(strfmt(RTax25RegType::txtNotExistField(), _fieldId, regType.registerId()));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegType construct(RTax25RegisterType       _rTax25RegisterType,
                                          RAssetAssessedTaxRegType _assessedTaxRegisterType = RAssetAssessedTaxRegType::None,
                                          boolean                  _useDetachedTable        = true)
    {
        switch (_assessedTaxRegisterType)
        {
            case RAssetAssessedTaxRegType::AssessedTax          :
                return new RTax25RegType_AssessedTax(_useDetachedTable);
            case RAssetAssessedTaxRegType::DepreciatedCostCalc  :
                return new RTax25RegType_AssessedDepreciatedCost(_useDetachedTable);
            case RAssetAssessedTaxRegType::TotalDepreciatedCost :
                return new RTax25RegType_AssessedTotalDepreciated(_useDetachedTable);
            case RAssetAssessedTaxRegType::TransportTaxCalc :
                return new RTax25RegType_TransportTaxCalculation(_useDetachedTable);
            case RAssetAssessedTaxRegType::TransportTax :
                return new RTax25RegType_TransportTax(_useDetachedTable);
            case RAssetAssessedTaxRegType::LandTaxCalc :
                return new RTax25RegType_LandTaxCalculation(_useDetachedTable);
            case RAssetAssessedTaxRegType::LandTax :
                return new RTax25RegType_LandTax(_useDetachedTable);
        }

        switch (_rTax25RegisterType)
        {
            case RTax25RegisterType::PaymentReceipt     :
                return new RTax25RegType_PaymentsReceipt(_useDetachedTable);
            case RTax25RegisterType::PaymentConsumption :
                return new RTax25RegType_PaymentsConsumption(_useDetachedTable);
            case RTax25RegisterType::InventReceipt :
                return new RTax25RegType_InventReceipt(_useDetachedTable);
            case RTax25RegisterType::DebtDebitMovement :
                return new RTax25RegType_DebtDebitMovement(_useDetachedTable);
            case RTax25RegisterType::DebtDebitInventory :
                return new RTax25RegType_DebtDebitInventory(_useDetachedTable);
            case RTax25RegisterType::DebtDebitReservation :
                return new RTax25RegType_DebtDebitReservation(_useDetachedTable);
            case RTax25RegisterType::DebtDebitReservMovement :
                return new RTax25RegType_DebtDebitReservMovement(_useDetachedTable);
            case RTax25RegisterType::DebtCreditMovement :
                return new RTax25RegType_DebtCreditMovement(_useDetachedTable);
            case RTax25RegisterType::DebtCreditInventory :
                return new RTax25RegType_DebtCreditInventory(_useDetachedTable);
            case RTax25RegisterType::AssetsCost :
                return new RTax25RegType_AssetsCost(_useDetachedTable);
            case RTax25RegisterType::AssetsDisposal :
                return new RTax25RegType_AssetsDisposal(_useDetachedTable);
            case RTax25RegisterType::TangibleAssetInfo :
                return new RTax25RegType_TangibleAssetInfo(_useDetachedTable);
            case RTax25RegisterType::IntangibleAssetInfo :
                return new RTax25RegType_IntangibleAssetInfo(_useDetachedTable);
            case RTax25RegisterType::IntangibleDepreciation :
                return new RTax25RegType_IntangibleDepreciation(_useDetachedTable);
            case RTax25RegisterType::TangibleDepreciation :
                return new RTax25RegType_TangibleDepreciation(_useDetachedTable);
            case RTax25RegisterType::IntangibleGroupDepreciation :
                return new RTax25RegType_IntangibleGroupDepr(_useDetachedTable);
            case RTax25RegisterType::TangibleGroupDepreciation :
                return new RTax25RegType_TangibleGroupDepr(_useDetachedTable);
            case RTax25RegisterType::StdCurrentRate :
                return new RTax25RegType_StdCurrentRate(_useDetachedTable);
            case RTax25RegisterType::StdDeferralsRate :
                return new RTax25RegType_StdDeferralsRate(_useDetachedTable);
            case RTax25RegisterType::StdCurrentExpense :
                return new RTax25RegType_StdCurrentExpense(_useDetachedTable);
            case RTax25RegisterType::Deferrals :
                return new RTax25RegType_Deferrals(_useDetachedTable);
            case RTax25RegisterType::NonInventReceipt   :
                return new RTax25RegType_NonInvReceipt(_useDetachedTable);
            case RTax25RegisterType::Payroll :
                return new RTax25RegType_PayRoll(_useDetachedTable);
            case RTax25RegisterType::InventReceiptTotal :
                return new RTax25RegType_InventReceiptTotal(_useDetachedTable);
            case RTax25RegisterType::Income :
                return new RTax25RegType_Income(_useDetachedTable);
            case RTax25RegisterType::NonInventIssue :
                return new RTax25RegType_NonInvIssue(_useDetachedTable);
            case RTax25RegisterType::OutlayReal             :
                return new RTax25RegType_OutlayReal(_useDetachedTable);
            case RTax25RegisterType::OutlayRealTax          :
                return new RTax25RegType_OutlayRealTax(_useDetachedTable);
            case RTax25RegisterType::OutlayUnreal           :
                return new RTax25RegType_OutlayUnreal(_useDetachedTable);
            case RTax25RegisterType::OutlayUnrealOther      :
                return new RTax25RegType_OutlayUnrealOther(_useDetachedTable);
            case RTax25RegisterType::NotInfluenceIncome     :
                return new RTax25RegType_NotInfluenceIncome(_useDetachedTable);
            case RTax25RegisterType::ConstantDifferences    :
                return new RTax25RegType_ConstantDifferences(_useDetachedTable);
            case RTax25RegisterType::TemporaryDifferences   :
                return new RTax25RegType_TemporaryDifferences(_useDetachedTable);
            case RTax25RegisterType::AmountDifference :
                return new RTax25RegType_AmountDifference(_useDetachedTable);
            case RTax25RegisterType::ExchangeAdj :
                return new RTax25RegType_ExchangeAdj(_useDetachedTable);
            case RTax25RegisterType::TaxExchangeAdj :
                return new RTax25RegType_TaxExchangeAdj(_useDetachedTable);
            case RTax25RegisterType::AssetDeprBonusRecovery :
                return new RTax25RegType_AssetDeprBonusRecovery(_useDetachedTable);
            case RTax25RegisterType::TaxRemainGoods :
                return new RTax25RegType_TaxRemainGoods(_useDetachedTable);
            case RTax25RegisterType::ProfitAllocation :
                return new RTax25RegType_ProfitAllocation(_useDetachedTable);
            case RTax25RegisterType::DebtDebitInventoryRAP :
                return new RTax25RegType_DebtDebInventoryRAP(_useDetachedTable);
            case RTax25RegisterType::DebtDebitMovementRAP :
                return new RTax25RegType_DebtDebitMovementRAP(_useDetachedTable);
            case RTax25RegisterType::DebtDebitReservationRAP :
                return new RTax25RegType_DebtDebitReservationRAP(_useDetachedTable);
            case RTax25RegisterType::DebtDebitReservMovementRAP :
                return new RTax25RegType_DebtDebitReservMovementRAP(_useDetachedTable);
            case RTax25RegisterType::DebtDebitReservationDetail :
                return new RTax25RegType_DebtDebitReservationDetail(_useDetachedTable);
            case RTax25RegisterType::DebtDebitReservationDetailRAP :
                return new RTax25RegType_DebtDebitReserveDetailRAP(_useDetachedTable);
            case RTax25RegisterType::DebtDebitReservMovementDetail :
                return new RTax25RegType_DebtDebitReservMovDetail(_useDetachedTable);
            case RTax25RegisterType::DebtDebitReservMovementDetailRAP :
                return new RTax25RegType_DebtDebitResMovDetailRAP(_useDetachedTable);
            case RTax25RegisterType::TemporaryDifferencesByBalance :
                return new RTax25RegType_TemporaryDifferencesByBalance(_useDetachedTable);
            case RTax25RegisterType::ConstantDifferencesByBalance :
                return new RTax25RegType_ConstantDifferencesByBalance(_useDetachedTable);

            default :
                return RTax25RegType::constructDefault(_rTax25RegisterType, _assessedTaxRegisterType, _useDetachedTable);
        }
        return new RTax25RegType(_useDetachedTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method provides the extension point for adding a new RTax25 register into the part of RTax25 framework.
    /// </summary>
    /// <param name = "_rTax25RegisterType">A main register type.</param>
    /// <param name = "_assessedTaxRegisterType">A register type for a profit, land, transport tax.</param>
    /// <param name = "_useDetachedTable">A flag which tells if we use a detached table for a register.</param>
    /// <returns>An instance of a class <c>RTax25RegType</c>.</returns>
    protected static RTax25RegType constructDefault(
        RTax25RegisterType _rTax25RegisterType,
        RAssetAssessedTaxRegType _assessedTaxRegisterType = RAssetAssessedTaxRegType::None,
        boolean _useDetachedTable = true)
    {
        return new RTax25RegType(_useDetachedTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFieldLabel</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public void lookupFieldLabel(FormStringControl   _ctrl,
                                        RTax25RegisterId    _registerId,
                                        Types               _includeOnlyType = Types::void)
    {
        Object  formRun;
        Args    args;
        ;
        args = new Args(formstr(RTax25FieldIdLookup));
        if (_includeOnlyType != Types::void)
        {
            args.parmEnumType(enumnum(Types));
            args.parmEnum(_includeOnlyType);
        }
        args.parmObject(RTax25RegType::construct(RTax25RegisterTable::registerId2Type(_registerId)));

        formRun = classfactory.formRunClass(args);

        formRun.init();
        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExistField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TxtNotExist txtNotExistField()
    {
        return "@GLS104115";
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeDisplayOrder</Name>
				<Source><![CDATA[
    private container changeDisplayOrder(container _con)
    {
        int       i;
        container ret;

        if (useDisplayOrder &&
            conLen(displayOrder) == conLen(_con))
        {
            for (i = 1; i <= conLen(displayOrder); i++)
            {
                ret += conPeek(_con, conPeek(displayOrder, i));
            }
        }
        else
        {
            ret = _con;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>detachedTableId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TableId detachedTableId()
    {
        return detachedTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableCollapseFolders</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean disableCollapseFolders()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayField</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int displayField(int _field)
    {
        int field = _field;

        if (useDisplayOrder &&
            conLen(displayOrder))
        {
            field = conPeek(displayOrder, _field);
        }

        return field;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOrder</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container displayOrder()
    {
        return displayOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container fieldId()
    {
        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerFields</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container headerFields()
    {
        return headerFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDetachedTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initFromDetachedTable()
    {
        DictFieldGroup          dictFieldGroup;
        SysDictField            dictField;
        SysDictConfigurationKey dictKey;
        int                     i, edt;

        if (! detachedTableId)
            throw error("@SYP4860787");

        dictFieldGroup = new DictFieldGroup(detachedTableId, #FieldGroup);

        if (! dictFieldGroup || ! dictFieldGroup.numberOfFields())
            throw error("@SYP4860786");

        for (i = 1; i <= dictFieldGroup.numberOfFields(); i++)
        {
            dictField = new SysDictField(detachedTableId, dictFieldGroup.field(i));
            dictKey   = new SysDictConfigurationKey(dictField.configurationKeyId());

            if (dictField.baseType() != Types::Container &&
                dictField.visible() && dictField.saveContents() &&
                (!dictField.configurationKeyId() || dictKey.enabled()))
            {
                fieldId += dictField.id();
                edt      = dictField.typeId();
                if (! edt)
                    throw error(strFmt("@SYP4860785",
                                       dictField.name(),
                                       new DictTable(detachedTableId).name()));

                fieldType        += edt;
                fieldLabel       += dictField.label();
                fieldDescription += dictField.help();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseDisplayOrder</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmUseDisplayOrder(boolean _useDisplayOrder = useDisplayOrder)
    {
        useDisplayOrder = _useDisplayOrder;
        return useDisplayOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>suspendRecIds</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean suspendRecIds()
    {
        return suspendRecIds;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>