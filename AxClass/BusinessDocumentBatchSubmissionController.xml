<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentBatchSubmissionController</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;
using System.Text;
using MM = Microsoft.Dynamics365.LocalizationFramework.ModelMapping;

/// <summary>
/// The class implements integration logic for generating a batch of business documents and communication with the Business Document Submission Service.
/// </summary>
internal class BusinessDocumentBatchSubmissionController extends BusinessDocumentServiceController
{
    private BusinessDocumentBatchSubmissionId batchSubmissionId;
    private TableName documentTableName;
    private BusinessDocumentBatchSubmission batchSubmission;

    private const RefTableId BatchSubmissionEntityTableId = tableNum(BusinessDocumentBatchSubmissionItemEntity);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmBatchSubmissionId</Name>
				<Source><![CDATA[
    internal BusinessDocumentBatchSubmissionId parmBatchSubmissionId(BusinessDocumentBatchSubmissionId _batchSubmissionId = batchSubmissionId)
    {
        batchSubmissionId = _batchSubmissionId;

        return batchSubmissionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentTableName</Name>
				<Source><![CDATA[
    internal TableName parmDocumentTableName(TableName _documentTableName = documentTableName)
    {
        documentTableName = _documentTableName;

        return documentTableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBatchSubmission</Name>
				<Source><![CDATA[
    internal static BusinessDocumentBatchSubmissionController newBatchSubmission(BusinessDocumentBatchSubmissionId _batchSubmissionId, TableName _documentTableName)
    {
        BusinessDocumentBatchSubmissionController batchSubmissionController = new BusinessDocumentBatchSubmissionController();

        batchSubmissionController.batchSubmissionId = _batchSubmissionId;
        batchSubmissionController.documentTableName = _documentTableName;
        batchSubmissionController.initFromBatchSubmissionId(_batchSubmissionId);

        return batchSubmissionController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBatchSubmissionId</Name>
				<Source><![CDATA[
    protected void initFromBatchSubmissionId(BusinessDocumentBatchSubmissionId _batchSubmissionId)
    {
        batchSubmission = BusinessDocumentBatchSubmission::findById(_batchSubmissionId);
        this.init(batchSubmission.TableId, batchSubmission.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchSubmission</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>BusinessDocumentBatchSubmission</c> record.
    /// </summary>
    /// <returns>The <c>BusinessDocumentBatchSubmission</c> record.</returns>
    internal BusinessDocumentBatchSubmission getBatchSubmission()
    {
        return batchSubmission;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
    protected BusinessDocumentTypes getDocumentType()
    {
        return BusinessDocumentTypes::find(documentTableName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewSubmissionAction</Name>
				<Source><![CDATA[
    protected str getNewSubmissionAction()
    {
        return BusinessDocumentServiceActions::SubmitBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewSubmissionKey</Name>
				<Source><![CDATA[
    protected str getNewSubmissionKey()
    {
        return int642Str(batchSubmission.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocumentDataModel</Name>
				<Source><![CDATA[
    protected void processDocumentDataModel(System.String _compressedDocumentContent, JArray _flowVariables)
    {
        BusinessDocumentBatchSubmissionDataModelStaging::createRecord(batchSubmission.RecId, _compressedDocumentContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSubmission</Name>
				<Source><![CDATA[
    protected void postSubmission()
    {
        BusinessDocumentBatchSubmissionDataModelStaging::deleteRecord(batchSubmission.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDocumentDataModel</Name>
				<Source><![CDATA[
    protected JObject buildDocumentDataModel(
        MM.DataModelUsageSpecification _specification,
        ERModelMappingTable _erModelMappingTable)
    {
        Query sourceQuery = new Query();

        QueryBuildDataSource qbds = sourceQuery.addDataSource(BatchSubmissionEntityTableId);

        SysQuery::findOrCreateRange(qbds, fieldNum(BusinessDocumentBatchSubmissionItemEntity, SubmissionId)).value(batchSubmissionId);

        JObject jdocumentData = BusinessDocumentSubmissionFunctions::createModelMappingRunToJsonFromQueryContext(
            _erModelMappingTable,
            BatchSubmissionEntityTableId,
            sourceQuery,
            classStr(BusinessDocumentBatchSubmissionController),
            _specification);

        return jdocumentData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>