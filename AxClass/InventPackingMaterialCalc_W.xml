<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPackingMaterialCalc_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to create Packing material transactions journal.
/// </summary>
public class InventPackingMaterialCalc_W extends RunBaseBatch implements BatchRetryable
{
    private Description description;
    private FromDate    fromDate;
    private ToDate      toDate;
    private NoYes       keepDetails;

    private DialogField dlgDescription;
    private DialogField dlgFromDate;
    private DialogField dlgToDate;
    private DialogField dlgKeepDetails;

    RefRecId    headerRecId;
    private const int CurrentVersion = 1;
    #localmacro.CurrentList
        description,
        fromDate,
        toDate,
        keepDetails
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates detailed lines of the packing material calculation journal.
    /// </summary>
    /// <param name="_transMap">
    /// A table map referencing a Sales or Purchase packing material transaction.
    /// </param>
    /// <param name="_salesPurch">
    /// A enumeration value indicating source of the packing material transaction.
    /// </param>
    private void createDetails(InventPackagingMaterialTransMap_W _transMap, SalesPurch _salesPurch)
    {
        InventPackagingTransDetails_W   inventPackagingTransDetails;
        InventPackagingTariffCatQuote_W inventPackagingTariffCatQuote;
        EcoResCategoryId                categoryId = this.getProductCategory(_transMap.ItemId);

        InventPackagingTariffCatAlloc_W inventPackagingTariffCatAlloc = InventPackagingTariffCatAlloc_W::find(categoryId, _transMap.PackagingClassId, _transMap.PackMaterialCode);

        while select inventPackagingTariffCatQuote
            where inventPackagingTariffCatQuote.PackagingTariffCatAlloc == inventPackagingTariffCatAlloc.RecId
        {
            InventPackagingMaterialFee inventPackagingMaterialFee = InventPackagingMaterialFee::findForDate_W(_transMap.PackMaterialCode, inventPackagingTariffCatQuote.TariffCategoryId, _transMap.InvoiceDate);

            select firstonly forupdate inventPackagingTransDetails
                where inventPackagingTransDetails.InventPackagingJour_W == headerRecId
                   && inventPackagingTransDetails.Source                == _salesPurch
                   && inventPackagingTransDetails.InvoiceId             == _transMap.InvoiceId
                   && inventPackagingTransDetails.InvoiceDate           == _transMap.InvoiceDate
                   && inventPackagingTransDetails.PackingMaterialCode   == _transMap.PackMaterialCode
                   && inventPackagingTransDetails.Category              == categoryId
                   && inventPackagingTransDetails.PackagingClassId      == _transMap.PackagingClassId
                   && inventPackagingTransDetails.TariffCategoryId      == inventPackagingTariffCatQuote.TariffCategoryId;

            if (! inventPackagingTransDetails.RecId)
            {
                inventPackagingTransDetails.InventPackagingJour_W   = headerRecId;
                inventPackagingTransDetails.Source                  = _salesPurch;
                inventPackagingTransDetails.InvoiceId               = _transMap.InvoiceId;
                inventPackagingTransDetails.InvoiceDate             = _transMap.InvoiceDate;
                inventPackagingTransDetails.PackingMaterialCode     = _transMap.PackMaterialCode;
                inventPackagingTransDetails.Category                = categoryId;
                inventPackagingTransDetails.PackagingClassId        = _transMap.PackagingClassId;
                inventPackagingTransDetails.TariffCategoryId        = inventPackagingTariffCatQuote.TariffCategoryId;
                inventPackagingTransDetails.Quote                   = inventPackagingTariffCatQuote.Percent;
                inventPackagingTransDetails.PriceCur                = inventPackagingMaterialFee.PriceCur;
                inventPackagingTransDetails.CurrencyCode            = inventPackagingMaterialFee.CurrencyCode;
            }

            inventPackagingTransDetails.PackagingWeight += _transMap.PackagingWeight * (inventPackagingTariffCatQuote.Percent / 100.00);
            inventPackagingTransDetails.AmountCur       += inventPackagingMaterialFee.PriceCur * _transMap.PackagingWeight * (inventPackagingTariffCatQuote.Percent / 100.00);

            if (inventPackagingTransDetails.RecId)
            {
                inventPackagingTransDetails.update();
            }
            else
            {
                inventPackagingTransDetails.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates header of the packing material calculation journal.
    /// </summary>
    private void createHeader()
    {
        InventPackagingJour_W jour;

        jour.CalcDate       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        jour.Description    = description;
        jour.FromDate       = fromDate;
        jour.ToDate         = toDate;
        jour.KeepDetails    = keepDetails;
        jour.insert();

        headerRecId = jour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates consolidated lines of the packing material calculation journal.
    /// </summary>
    private void createTrans()
    {
        InventPackagingTransDetails_W   inventPackagingTransDetails;
        InventPackagingTrans_W          inventPackagingTrans;
        RecordInsertList                recordInsertList = new RecordInsertList(tableNum(InventPackagingTrans_W));

        while select sum(PackagingWeight), sum(AmountCur) from inventPackagingTransDetails
            group by TariffCategoryId, PackingMaterialCode, PriceCur, CurrencyCode
                where inventPackagingTransDetails.InventPackagingJour_W == headerRecId
        {
            inventPackagingTrans.InventPackagingJour_W    = headerRecId;
            inventPackagingTrans.TariffCategoryId         = inventPackagingTransDetails.TariffCategoryId;
            inventPackagingTrans.PackingMaterialCode      = inventPackagingTransDetails.PackingMaterialCode;
            inventPackagingTrans.PriceCur                 = inventPackagingTransDetails.PriceCur;
            inventPackagingTrans.CurrencyCode             = inventPackagingTransDetails.CurrencyCode;
            inventPackagingTrans.PackagingWeight          = inventPackagingTransDetails.PackagingWeight;
            inventPackagingTrans.AmountCur                = inventPackagingTransDetails.AmountCur;
            recordInsertList.add(inventPackagingTrans);
        }

        recordInsertList.insertDatabase();

        if (! keepDetails)
        {
            delete_from inventPackagingTransDetails
                where inventPackagingTransDetails.InventPackagingJour_W == headerRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dlgDescription  = dialog.addFieldValue(extendedTypeStr(Description), description);
        dlgFromDate     = dialog.addFieldValue(extendedTypeStr(FromDate), fromDate);
        dlgToDate       = dialog.addFieldValue(extendedTypeStr(ToDate), toDate);
        dlgKeepDetails  = dialog.addFieldValue(enumStr(NoYes), keepDetails, "@PackingMaterial:InventSaveDetails", "@PackingMaterial:InventSelectFee");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        description = dlgDescription.value();
        fromDate    = dlgFromDate.value();
        toDate      = dlgToDate.value();
        keepDetails = dlgKeepDetails.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an upper-level Product Category ID from the packing materials hierarchy for the inventory item.
    /// </summary>
    /// <param name="_itemId">
    /// The inventory item ID.
    /// </param>
    /// <returns>
    /// The upper-level Product Category ID from the packing materials hierarchy for the inventory item.
    /// </returns>
    private EcoResCategoryId getProductCategory(ItemId _itemId)
    {
        EcoResCategory          packingProductCategory;
        InventTable             inventTable = InventTable::find(_itemId);

        EcoResProductCategory productCategory = EcoResProductCategory::findByProductIdCategoryHierarchyRole(inventTable.Product, EcoResCategoryNamedHierarchyRole::PackingMaterials_W);
        EcoResCategory category = EcoResCategory::find(productCategory.Category);

        if (category.Level == 2)
        {
            packingProductCategory = category;
        }
        else
        {
            select firstonly packingProductCategory
                where packingProductCategory.CategoryHierarchy == category.CategoryHierarchy
                    && packingProductCategory.NestedSetLeft  < category.NestedSetLeft
                    && packingProductCategory.NestedSetRight > category.NestedSetRight
                    && packingProductCategory.Level == 2;
        }

        return packingProductCategory.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through packing material transactions and calls details generation logic for them.
    /// </summary>
    /// <param name="_salesPurch">
    /// A enumeration value indicating the source of packing material transactions.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The exception is thrown if incorrect source of packing material transactions is specified.
    /// </exception>
    private void loopTrans(SalesPurch _salesPurch)
    {
        InventPackagingMaterialTransMap_W transMap;

        switch (_salesPurch)
        {
            case SalesPurch::Sales :
                transMap = new SysDictTable(tableNum(InventPackagingMaterialTrans)).makeRecord();
                break;
            case SalesPurch::Purch :
                transMap = new SysDictTable(tableNum(InventPackagingMaterialTransPurch)).makeRecord();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        while select transMap
            where transMap.InvoiceDate >= fromDate
               && transMap.InvoiceDate <= toDate
               && transMap.FeesCalculated
        {
            this.createDetails(transMap, _salesPurch);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        #ISOCountryRegionCodes
        super();

        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoAT, GlobalizationConstants::FeatureReferenceAT00013] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            this.createHeader();
            this.loopTrans(SalesPurch::Sales);
            this.loopTrans(SalesPurch::Purch);
            this.createTrans();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (!description)
        {
            ret = checkFailed(strFmt("@SYS84378", "@SYS7576"));
        }

        if (!fromDate || !toDate)
        {
            ret = checkFailed("@SYS71110");
        }
        else if (fromDate > toDate)
        {
            ret = checkFailed("@SYS120590");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventPackingMaterialCalc_W construct()
    {
        return new InventPackingMaterialCalc_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@PackingMaterial:InventPackagingJour";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventPackingMaterialCalc_W packingMaterialCalc = InventPackingMaterialCalc_W::construct();

        if (packingMaterialCalc.prompt())
        {
            packingMaterialCalc.runOperation();
        }

        if (_args && _args.object() && _args.object() is FormDataSource)
        {
            FormDataSource formDS = _args.object();
            formDS.research();
            formDS.last();
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>