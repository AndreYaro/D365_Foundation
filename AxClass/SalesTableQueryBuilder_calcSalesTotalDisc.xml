<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableQueryBuilder_calcSalesTotalDisc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesTableQueryBuilder_calcSalesTotalDisc</c> class creates queries related to the <c>SalesLine</c> table.
/// </summary>
public final class SalesTableQueryBuilder_calcSalesTotalDisc extends SalesTableQueryBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes the <c>SalesTableQueryBuilder_calcSalesTotalDisc</c> class object.
    /// </summary>
    /// <param name = "_salesId">
    /// The Sales ID.
    /// </param>
    /// <param name = "_salesLine">
    /// The <c>SalesLine</c> table buffer.
    /// </param>
    /// <returns>
    /// Initialized <c>SalesTableQueryBuilder_calcSalesTotalDisc</c> class object.
    /// </returns>
    public static SalesTableQueryBuilder_calcSalesTotalDisc newFromParameters(SalesId      _salesId,
                                                                              SalesLine    _salesLine)
    {
        SalesTableQueryBuilder salesTableQueryBuilder_calcSalesTotalDisc = new SalesTableQueryBuilder_calcSalesTotalDisc();
        salesTableQueryBuilder_calcSalesTotalDisc._salesId               = _salesId;
        salesTableQueryBuilder_calcSalesTotalDisc.salesLine              = _salesLine;
        
        return salesTableQueryBuilder_calcSalesTotalDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query related to the <c>SalesLine</c> table.
    /// </summary>
    /// <returns>
    /// The query object.
    /// </returns>
    public SysDaQueryObject buildQueryObject()
    {
        queryObject = this.getSalesLineQuery();

        this.joinInventTableModule();

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>SalesLine</c> table query object with where clause.
    /// </summary>
    /// <returns>
    /// The <c>SalesLine</c> table query object.
    /// </returns>
    [Wrappable(true)]
    protected final SysDaQueryObject getSalesLineQuery()
    {
        queryObject = new SysDaQueryObject(salesLine);
        queryObject.projection().addSum(fieldStr(SalesLine, LineAmount));

        queryObject.groupByClause().add(fieldStr(SalesLine, ItemId));

        queryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(salesLine, fieldStr(SalesLine, SalesId)),
                new SysDaValueExpression(_salesId))
            .and((new SysDaEqualsExpression(
                new SysDaFieldExpression(salesLine, fieldStr(SalesLine, SalesStatus)),
                new SysDaValueExpression(SalesStatus::None))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(salesLine, fieldStr(SalesLine, SalesStatus)),
                    new SysDaValueExpression(SalesStatus::Backorder)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(salesLine, fieldStr(SalesLine, SalesStatus)),
                    new SysDaValueExpression(SalesStatus::Delivered)))
                .or(new SysDaEqualsExpression(
                    new SysDaFieldExpression(salesLine, fieldStr(SalesLine, SalesStatus)),
                    new SysDaValueExpression(SalesStatus::Invoiced)))))
            .and(new SysDaGreaterThanExpression(
            new SysDaFieldExpression(salesLine, fieldStr(SalesLine, ItemId)),
            new SysDaValueExpression(''))));
            
        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinInventTableModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Joins the query object to <c>InventTableModule</c> table.
    /// </summary>
    /// <returns>
    /// The query object.
    /// </returns>
    [Wrappable(true)]
    protected final SysDaQueryObject joinInventTableModule()
    {
        InventTableModule inventTableModule;
        SysDaQueryObject inventTableModuleQuery = new SysDaQueryObject(inventTableModule);
        inventTableModuleQuery = this.addWhereClauseToInventTableModule(inventTableModuleQuery, inventTableModule);
        queryObject.joinClause(SysDaJoinKind::InnerJoin, inventTableModuleQuery);
        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWhereClauseToInventTableModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds where clause to the <c>InventTableModule</c> table of query object.
    /// </summary>
    /// <param name = "_inventTableModuleQuery">
    /// The query object.
    /// </param>
    /// <param name = "_inventTableModule">
    /// The <c>InventTableModule</c> buffer.
    /// </param>
    /// <returns>
    /// The query object.
    /// </returns>
    [Wrappable(true)]
    protected final SysDaQueryObject addWhereClauseToInventTableModule(SysDaQueryObject _inventTableModuleQuery, InventTableModule _inventTableModule)
    {
        _inventTableModuleQuery.groupByClause().add(fieldStr(InventTableModule, EndDisc));
            
            _inventTableModuleQuery.whereClause(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventTableModule, fieldStr(InventTableModule, ItemId)),
                    new SysDaFieldExpression(SalesLine, fieldStr(SalesLine, ItemId)))
                .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventTableModule, fieldStr(InventTableModule, ModuleType)),
                    new SysDaValueExpression(ModuleInventPurchSales::Sales)))
                .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventTableModule, fieldStr(InventTableModule, EndDisc)),
            new SysDaValueExpression(NoYes::Yes))));

        return _inventTableModuleQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>