<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerInquiryDaily_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the ledger inquiry daily.
/// </summary>
final class LedgerInquiryDaily_CN extends RunBaseBatch implements BatchRetryable
{
    TmpDailyLedger_CN   tmpDaily_CN;
    Query               query;
    QueryRun            queryRun;
    QueryRun            queryRunDailyLedger;
    TransDate           lastPer;
    TempStr             accountYrSum;
    boolean             dailySummary;
    boolean             initFromOthForm;
    boolean             submitQuery;
    PeriodName          periodName;
    FiscalYearName      periodFiscalYear;
    AmountCur           balanceCur[];
    AmountMst           balanceMst[];
    container           keyStr;
    Map                 balanceCurMap = new Map(Types::Container, Types::Real);
    Map                 balanceMSTMap = new Map(Types::Container, Types::Real);
    Map                 balanceMSTMapByDate = new Map(Types::Container, Types::Real);
    Map                 summaryAccount2DimValueList = new Map(Types::String, Types::Container);
    TransDate           fromDate;
    TransDate           toDate;
    NoYes               isSingleAccount;
    Counter             transNum;
    TempStr             monthStr;
    CurrencyCode        companyCurrencyCode;

    DialogField     dialogFieldFromMainAccount;
    DialogField     dialogFieldToMainAccount;
    DialogField     dialogFieldFiscalYear;
    DialogField     dialogFieldFiscalPeriod;

    MainAccountNum          fromAccountNum;
    MainAccountNum          toAccountNum;
    LedgerDimensionAccount  ledgerDimensionFromOtherForm;

    LedgerDimensionExpressionBuilderHelper_CN expressionBuilderHelper;
    container               filterDimensions;

    const int TwoDays = 2;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        fromAccountNum,
        toAccountNum,
        periodFiscalYear,
        periodName
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query object according to GeneralJournalLine, LedgerEntryReference, DimensionAttributeValueCombination
    /// </summary>
    public void buildQuery()
    {
        const DataSourceName DSName = 'GeneralJournalEntry_DS';

        QueryBuildDataSource qbds;
        QueryBuildRange      range;

        query = new Query();
        qbds = query.addDataSource(tableNum(SubledgerVoucherGeneralJournalEntry));

        qbds = qbds.addDataSource(tablenum(GeneralJournalEntry), DSName);
        qbds.addLink(
            fieldNum(SubledgerVoucherGeneralJournalEntry, GeneralJournalEntry),
            fieldNum(GeneralJournalEntry, recId));

        qbds.addRange(fieldNum(GeneralJournalEntry, SubledgerVoucherDataAreaId)).value(queryValue(curext()));

        GeneralJournalEntry_W::addDataSource(qbds);

        qbds = qbds.addDataSource(tablenum(GeneralJournalAccountEntry));
        qbds.relations(true);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds = qbds.addDataSource(tableNum(DimensionAttributeValueCombination));
        qbds.addLink(
            fieldNum(GeneralJournalAccountEntry, LedgerDimension),
            fieldNum(DimensionAttributeValueCombination, RecId));

        qbds = qbds.addDataSource(tableNum(MainAccount));
        qbds.addLink(
            fieldNum(DimensionAttributeValueCombination, MainAccount),
            fieldNum(MainAccount, RecId));
        range = qbds.addRange(fieldnum(MainAccount, LedgerChartOfAccounts));
        range.value(queryValue(LedgerChartOfAccounts::current()));
        range.status(RangeStatus::Hidden);
        qbds.addRange(fieldnum(MainAccount, MainAccountId));

        qbds = query.dataSourceName(DSName);
        qbds = qbds.addDataSource(tablenum(FiscalCalendarPeriod));
        qbds.addLink(
            fieldNum(GeneralJournalEntry, FiscalCalendarPeriod),
            fieldNum(FiscalCalendarPeriod, RecId), DSName);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds.allowAdd(QueryAllowAdd::NoFields);
        range = qbds.addRange(fieldnum(FiscalCalendarPeriod, Type));
        range.value(SysQuery::value(FiscalPeriodType::Operating));
        range.status(RangeStatus::Locked);
        qbds.addRange(fieldnum(FiscalCalendarPeriod, Name));

        qbds = qbds.addDataSource(tablenum(FiscalCalendarYear));
        qbds.addLink(
            fieldNum(FiscalCalendarPeriod, FiscalCalendarYear),
            fieldNum(FiscalCalendarYear, RecId));
        qbds.addRange(fieldnum(FiscalCalendarYear, Name));
        qbds.addRange(fieldNum(FiscalCalendarYear, FiscalCalendar)).value(queryValue(CompanyInfoHelper::fiscalCalendarRecId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDailyLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Daily ledger.
    /// </summary>
    /// <param name="_generalJournalAccountEntry">
    /// General journal transaction.
    /// </param>
    public void createDailyLedger(
        GeneralJournalAccountEntry  _generalJournalAccountEntry)
    {
        LedgerAccount           mainAccount;
        LedgerEntryJournal      ledgerEntryJournal;
        GeneralJournalEntry     generalJournalEntry;
        GeneralJournalEntry_W   generalJournalEntryW;
        container               packedDimensionNameValueList;
        DimensionDisplayValue   summaryAccount;
        DimensionDisplayValue   summaryAccountName;

        ledgerEntryJournal      = LedgerEntryJournal::find(generalJournalEntry.LedgerEntryJournal);
        generalJournalEntry     = GeneralJournalEntry::findByGeneralJournalAccountEntry(_generalJournalAccountEntry.RecId);
        generalJournalEntryW    = GeneralJournalEntry_W::findByGeneralJournalEntry(_generalJournalAccountEntry.GeneralJournalEntry);

        tmpDaily_CN.clear();

        if (ledgerDimensionFromOtherForm)
        {
            DimensionAttributeValueCombination dimAttrValueCombination =  DimensionAttributeValueCombination::find(_generalJournalAccountEntry.LedgerDimension);
            packedDimensionNameValueList = LedgerDimensionFacade::getDimensionNameValueListFromLedgerDimensionForHierarchy(
                dimAttrValueCombination,
                dimAttrValueCombination.AccountStructure).pack();

            summaryAccount = _generalJournalAccountEntry.LedgerAccount;
            summaryAccountName = LedgerInquiryDialogHelper_CN::getDimensionValueByDimensionLayout(_generalJournalAccountEntry.LedgerDimension, DimensionDisplayLayout_CN::OnlyName, false);
        }
        else
        {
            container filterDimensionsWithAccount = filterDimensions + DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

            packedDimensionNameValueList = LedgerInquiryDialogHelper_CN::getDimensionNameValueListFromLedgerDimension(
                _generalJournalAccountEntry.LedgerDimension,
                filterDimensionsWithAccount).pack();
            [summaryAccount, summaryAccountName] = LedgerInquiryDialogHelper_CN::getSummaryAccountAndNameFromLedgerDimension(
                _generalJournalAccountEntry.LedgerDimension,
                filterDimensionsWithAccount);
        }

        summaryAccount2DimValueList.insert(summaryAccount, packedDimensionNameValueList);

        if (!balanceMSTMap.exists(packedDimensionNameValueList))
        {
            tmpDaily_CN.CurrencyCode        = companyCurrencyCode;
            tmpDaily_CN.SummaryAccount      = summaryAccount;
            tmpDaily_CN.SummaryAccountName  = summaryAccountName;
            tmpDaily_CN.LedgerAccount       = summaryAccount;
            tmpDaily_CN.AccountName         = summaryAccountName;
            tmpDaily_CN.TransDate           = fromDate;
            // Opening balance
            tmpDaily_CN.Explanation         = "@SYS22797";
            tmpDaily_CN.TransYear           = this.yearOfTransDate(fromDate);
            tmpDaily_CN.TransMonth          = this.monthOfTransDate(fromDate);
            tmpDaily_CN.TransDay            = this.dayOfTransDate(fromDate);
            tmpDaily_CN.Balance             = this.getBalanceMST(packedDimensionNameValueList);

            if (tmpDaily_CN.Balance > 0)
            {
                tmpDaily_CN.BalanceStatus   = LedgerBalanceStatus_CN::DR;
            }
            else if (tmpDaily_CN.Balance < 0)
            {
                tmpDaily_CN.BalanceStatus   = LedgerBalanceStatus_CN::CR;
            }
            else if (tmpDaily_CN.Balance == 0
                && tmpDaily_CN.BalanceCur == 0)
            {
                tmpDaily_CN.BalanceStatus   = LedgerBalanceStatus_CN::Balance;
            }

            tmpDaily_CN.Balance = abs(tmpDaily_CN.Balance);
            tmpDaily_CN.insert();
        }

        if (!balanceMSTMapByDate.exists([packedDimensionNameValueList, generalJournalEntry.AccountingDate]))
        {
            balanceMSTMapByDate.insert(
                [packedDimensionNameValueList, generalJournalEntry.AccountingDate],
                balanceMSTMap.lookup(packedDimensionNameValueList) + _generalJournalAccountEntry.AccountingCurrencyAmount);
        }
        else
        {
            balanceMSTMapByDate.insert(
                [packedDimensionNameValueList, generalJournalEntry.AccountingDate],
                balanceMSTMapByDate.lookup([packedDimensionNameValueList, generalJournalEntry.AccountingDate]) + _generalJournalAccountEntry.AccountingCurrencyAmount);
        }

        balanceMSTMap.insert(packedDimensionNameValueList, balanceMSTMap.lookup(packedDimensionNameValueList) + _generalJournalAccountEntry.AccountingCurrencyAmount);

        if (!balanceCurMap.exists([packedDimensionNameValueList, _generalJournalAccountEntry.TransactionCurrencyCode]))
        {
            this.getBalanceCur(packedDimensionNameValueList, _generalJournalAccountEntry.TransactionCurrencyCode);
        }

        balanceCurMap.insert(
            [packedDimensionNameValueList, _generalJournalAccountEntry.TransactionCurrencyCode],
            balanceCurMap.lookup([packedDimensionNameValueList, _generalJournalAccountEntry.TransactionCurrencyCode]) + _generalJournalAccountEntry.TransactionCurrencyAmount);

        tmpDaily_CN.Balance             = this.getBalanceMST(packedDimensionNameValueList);
        tmpDaily_CN.BalanceCur          = this.getBalanceCur(packedDimensionNameValueList, _generalJournalAccountEntry.TransactionCurrencyCode);

        tmpDaily_CN.CurrencyCode        = _generalJournalAccountEntry.TransactionCurrencyCode;
        tmpDaily_CN.LedgerAccount       = _generalJournalAccountEntry.LedgerAccount;
        tmpDaily_CN.LedgerDimension     = _generalJournalAccountEntry.LedgerDimension;
        tmpDaily_CN.AccountName         = LedgerInquiryDialogHelper_CN::getDimensionValueByDimensionLayout(_generalJournalAccountEntry.LedgerDimension, DimensionDisplayLayout_CN::OnlyName, false);
        tmpDaily_CN.SummaryAccount      = summaryAccount;
        tmpDaily_CN.SummaryAccountName  = summaryAccountName;
        tmpDaily_CN.TransDate           = generalJournalEntry.AccountingDate;
        tmpDaily_CN.Explanation         = _generalJournalAccountEntry.Text;
        tmpDaily_CN.TransYear           = this.yearOfTransDate(generalJournalEntry.AccountingDate);
        tmpDaily_CN.TransMonth          = this.monthOfTransDate(generalJournalEntry.AccountingDate);
        tmpDaily_CN.TransDay            = this.dayOfTransDate(generalJournalEntry.AccountingDate);
        tmpDaily_CN.Voucher             = SubledgerVoucherGeneralJournalEntry::findByGeneralJournalEntry(generalJournalEntry).Voucher;
        tmpDaily_CN.Voucher_CN          = generalJournalEntryW.Voucher_CN;
        tmpDaily_CN.JournalNum          = generalJournalEntry.JournalNumber;
        tmpDaily_CN.GeneralJournalAccountEntry = _generalJournalAccountEntry.RecId;

        if (_generalJournalAccountEntry.IsCredit == NoYes::No)
        {
            tmpDaily_CN.AmountCurDebit  = _generalJournalAccountEntry.TransactionCurrencyAmount;
        }
        else if (_generalJournalAccountEntry.IsCredit == NoYes::Yes)
        {
            tmpDaily_CN.AmountCurCredit = -_generalJournalAccountEntry.TransactionCurrencyAmount;
        }

        if (_generalJournalAccountEntry.IsCredit == NoYes::No)
        {
            tmpDaily_CN.AmountMSTDebit  = _generalJournalAccountEntry.AccountingCurrencyAmount;
        }
        else if (_generalJournalAccountEntry.IsCredit == NoYes::Yes)
        {
            tmpDaily_CN.AmountMSTCredit = -_generalJournalAccountEntry.AccountingCurrencyAmount;
        }

        if (tmpDaily_CN.Balance > 0)
        {
            tmpDaily_CN.BalanceStatus   = LedgerBalanceStatus_CN::DR;
        }
        else if (tmpDaily_CN.Balance < 0)
        {
            tmpDaily_CN.BalanceStatus   = LedgerBalanceStatus_CN::CR;
        }
        else if (tmpDaily_CN.Balance    == 0
            && tmpDaily_CN.BalanceCur == 0)
        {
            tmpDaily_CN.BalanceStatus   = LedgerBalanceStatus_CN::Balance;
        }
        tmpDaily_CN.Balance    = abs(tmpDaily_CN.Balance);
        tmpDaily_CN.BalanceCur = abs(tmpDaily_CN.BalanceCur);
        tmpDaily_CN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSumRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate balance and amountMST of credit or debit.
    /// </summary>
    public void createSumRecord()
    {
        Set summmaryAccountSet;

        summmaryAccountSet = new Set (Types::Container);

        while select sum(AmountMSTDebit), sum(AmountMSTCredit), sum(Balance) from tmpDaily_CN
            group by TransYear, TransMonth, SummaryAccount, SummaryAccountName
            where tmpDaily_CN.Voucher != ''
        {
            this.createTmpSumRecord(tmpDaily_CN);
            summmaryAccountSet.add([tmpDaily_CN.SummaryAccount, tmpDaily_CN.SummaryAccountName]);
        }

        SetEnumerator summmaryAccountSetEnumerator = summmaryAccountSet.getEnumerator();
        DimensionDisplayValue summmaryAccount;
        DimensionDisplayValue summmaryAccountName;

        while (summmaryAccountSetEnumerator.moveNext())
        {
            [summmaryAccount, summmaryAccountName] = summmaryAccountSetEnumerator.current();
            this.createYearSumRecord(tmpDaily_CN, summmaryAccount, summmaryAccountName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpSumRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create temp sum daily ledger.
    /// </summary>
    /// <param name="_tmpDaily_CN">
    /// TmpDailyLedger_CN's record.
    /// </param>
    private void createTmpSumRecord(TmpDailyLedger_CN _tmpDaily_CN)
    {
        #define.Dot('.')
        #define.FirstDay('1')
        TempStr     tmpDate;

        _tmpDaily_CN.Balance = this.getBalanceMST(summaryAccount2DimValueList.lookup(_tmpDaily_CN.SummaryAccount));

        if (_tmpDaily_CN.Balance > 0)
        {
            _tmpDaily_CN.BalanceStatus = LedgerBalanceStatus_CN::DR;
        }
        else if (_tmpDaily_CN.Balance < 0)
        {
            _tmpDaily_CN.BalanceStatus = LedgerBalanceStatus_CN::CR;
        }
        else
        {
            _tmpDaily_CN.BalanceStatus = LedgerBalanceStatus_CN::Balance;
        }
        _tmpDaily_CN.Balance = abs(_tmpDaily_CN.Balance);

        tmpDate = _tmpDaily_CN.TransYear + #Dot + _tmpDaily_CN.TransMonth + #Dot + #FirstDay;

        // Summary of the month
        _tmpDaily_CN.Explanation    = "@GLS54660";
        _tmpDaily_CN.TransDate      = endmth(str2date(tmpDate, 321)) + 1;
        _tmpDaily_CN.LedgerAccount  = _tmpDaily_CN.SummaryAccount;
        _tmpDaily_CN.AccountName    = _tmpDaily_CN.SummaryAccountName;
        _tmpDaily_CN.CurrencyCode   = companyCurrencyCode;

        _tmpDaily_CN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createYearSumRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create total MST of credit or debit in the priod.
    /// </summary>
    /// <param name="_tmpDaily">
    /// Daily Ledger temp table.
    /// </param>
    /// <param name="_summaryAccount">
    /// Summary account.
    /// </param>
    /// <param name="_summaryAccountName">
    /// Summary account name.
    /// </param>
    public void createYearSumRecord(
        TmpDailyLedger_CN       _tmpDaily,
        DimensionDisplayValue   _summaryAccount,
        DimensionDisplayValue   _summaryAccountName)
    {
        PeriodStart             periodStart;
        PeriodEnd               periodEnd;
        AmountMSTDebCred        amtDRMST;
        AmountMSTDebCred        amtCRMST;
        RecId                   mainAccountDimAttribute = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        GeneralJournalAccountEntry          generalJournalAccountEntry;
        container                           packedDimensionNameValueList = summaryAccount2DimValueList.lookup(_summaryAccount);

        periodStart  = LedgerFiscalCalendar::findOpeningStartDateByDate(
            CompanyInfoHelper::fiscalCalendarRecId(),
            lastPer);

        periodEnd    = this.periodEndValue(lastPer);
        amtDRMST     = 0;
        amtCRMST     = 0;

        Query yearSummaryQuery = new Query();

        QueryBuildDataSource qbdsGJAE = yearSummaryQuery.addDataSource(tableNum(GeneralJournalAccountEntry));
        qbdsGJAE.addGroupByField(fieldNum(GeneralJournalAccountEntry, IsCredit));
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, IsCredit));

        QueryBuildDataSource qbdsDimCombination = qbdsGJAE.addDataSource(tableNum(DimensionAttributeValueCombination));
        qbdsDimCombination.joinMode(JoinMode::ExistsJoin);
        qbdsDimCombination.addLink(fieldNum(GeneralJournalAccountEntry, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));

        QueryBuildDataSource qbdsGLE = qbdsGJAE.addDataSource(tableNum(GeneralJournalEntry));
        qbdsGLE.joinMode(JoinMode::ExistsJoin);
        qbdsGLE.addLink(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry), fieldNum(GeneralJournalEntry, RecId));
        qbdsGLE.addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(queryRange(periodStart, periodEnd));
        qbdsGLE.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));

        QueryBuildDataSource qbdsCalendarPeriod = qbdsGLE.addDataSource(tableNum(FiscalCalendarPeriod));
        qbdsCalendarPeriod.joinMode(JoinMode::ExistsJoin);
        qbdsCalendarPeriod.addLink(fieldNum(GeneralJournalEntry, FiscalCalendarPeriod), fieldNum(FiscalCalendarPeriod, RecId));
        qbdsCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(queryValue(FiscalPeriodType::Operating));

        DimensionNameValueListContract dimensionNameValueListContract = new DimensionNameValueListContract();
        dimensionNameValueListContract.unpack(packedDimensionNameValueList);

        ListEnumerator dimensionNameValueListEnumerator = dimensionNameValueListContract.parmValues().getEnumerator();

        while (dimensionNameValueListEnumerator.moveNext())
        {
            DimensionAttributeValueContract dimAttrValueContract = dimensionNameValueListEnumerator.current();

            FieldId dimensionValueFieldId = DimensionAttributeValueCombination::getDimensionValueFieldId(dimAttrValueContract.parmName());

            SysQuery::findOrCreateRange(qbdsDimCombination, dimensionValueFieldId).value(dimAttrValueContract.parmValue());
        }

        QueryRun yearSummaryQueryRun = new QueryRun(yearSummaryQuery);

        while (yearSummaryQueryRun.next())
        {
            generalJournalAccountEntry = yearSummaryQueryRun.get(tableNum(GeneralJournalAccountEntry));

            if (generalJournalAccountEntry.IsCredit)
            {
                amtCRMST += -generalJournalAccountEntry.AccountingCurrencyAmount;
            }
            else
            {
                amtDRMST += generalJournalAccountEntry.AccountingCurrencyAmount;
            }
        }

        _tmpDaily.Balance = this.getBalanceMST(summaryAccount2DimValueList.lookup(_summaryAccount));

        if (_tmpDaily.Balance > 0)
        {
            _tmpDaily.BalanceStatus = LedgerBalanceStatus_CN::DR;
        }
        else if (_tmpDaily.Balance < 0)
        {
            _tmpDaily.BalanceStatus = LedgerBalanceStatus_CN::CR;
        }
        else
        {
            _tmpDaily.BalanceStatus = LedgerBalanceStatus_CN::Balance;
        }
        _tmpDaily.Balance               = abs(_tmpDaily.Balance);
        _tmpDaily.AmountMSTCredit       = amtCRMST;
        _tmpDaily.AmountMSTDebit        = amtDRMST;
        _tmpDaily.TransYear             = this.yearOfTransDate(lastPer);
        _tmpDaily.TransMonth            = '';
        _tmpDaily.TransDay              = '';

        _tmpDaily.TransDate             = LedgerFiscalCalendar::findClosingPeriodStartDateByDate(CompanyInfoHelper::fiscalCalendarRecId(), lastPer) + TwoDays;

        // Summary of the year
        _tmpDaily.Explanation           = "@GLS54661";
        _tmpDaily.SummaryAccount        = _summaryAccount;
        _tmpDaily.SummaryAccountName    = _summaryAccountName;
        _tmpDaily.LedgerAccount         = _summaryAccount;
        _tmpDaily.AccountName           = _summaryAccountName;
        _tmpDaily.CurrencyCode          = companyCurrencyCode;
        _tmpDaily.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dayOfTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of the day in the month.
    /// </summary>
    /// <param name="_transDate">
    /// Transaction date.
    /// </param>
    /// <returns>
    /// The number of the day in the month.
    /// </returns>
    public DateDayName dayOfTransDate(TransDate _transDate)
    {
        return int2str(dayofmth(_transDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase                   dialog;
        LedgerInquiryDialogHelper_CN    ledgerInquiryDialogHelperCN = new LedgerInquiryDialogHelper_CN();

        dialog = super();

        if (dailySummary == true)
        {
            // Daily ledger
            dialog.caption("@GLS54604");
        }
        else
        {
            // Detail ledger
            dialog.caption("@GLS54605");
        }

        dialogFieldFromMainAccount = dialog.addFieldValue(extendedtypestr(MainAccountNum), fromAccountNum, "@SYS4081511");
        dialogFieldToMainAccount = dialog.addFieldValue(extendedtypestr(MainAccountNum), toAccountNum, "@SYS4081512");

        dialogFieldFiscalYear = dialog.addFieldValue(extendedTypeStr(FiscalYearName), periodFiscalYear, "@SYS127885");
        dialogFieldFiscalPeriod = dialog.addFieldValue(extendedTypeStr(PeriodName), periodName, "@SYS127887");

        LedgerDimensionExpressionBuilderHelper_CN::addDimensionExpressionBuilderToDialog(dialog);

        ledgerInquiryDialogHelperCN.parmDialogFieldFiscalPeriod(dialogFieldFiscalPeriod);
        ledgerInquiryDialogHelperCN.parmDialogFieldFiscalYear(dialogFieldFiscalYear);

        dialogFieldFiscalPeriod.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(LedgerInquiryDialogHelper_CN, fiscalCalendarPeriodLookUp),
            ledgerInquiryDialogHelperCN);

        dialogFieldFiscalYear.registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(LedgerInquiryDialogHelper_CN, yearNameModified),
            ledgerInquiryDialogHelperCN);

        dialogFieldFiscalPeriod.registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(LedgerInquiryDialogHelper_CN, periodNameModified),
            ledgerInquiryDialogHelperCN);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from dialog.
    /// </summary>
    /// <returns>
    /// Returns true if the operation is succeed.
    /// </returns>
    public boolean getFromDialog()
    {
        fromAccountNum      = dialogFieldFromMainAccount.value();
        toAccountNum        = dialogFieldToMainAccount.value();
        periodFiscalYear    = dialogFieldFiscalYear.value();
        periodName          = dialogFieldFiscalPeriod.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets main account parameters.
    /// </summary>
    /// <returns>
    /// The main account parameters.
    /// </returns>
    public container getMainAccountParameters()
    {
        return [fromAccountNum, toAccountNum];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalanceCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves or calculates total transaction amount by specified ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The ledger dimension for which retrieves or calculates the total transaction amount.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code for which retrieves or calculates the total transaction amount.
    /// </param>
    /// <returns>
    /// The retrieved or calculated total MST amount .
    /// </returns>
    public AmountCur getBalanceCur(
        container _packedDimensionNameValueList,
        CurrencyCode _currencyCode)
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;

        if (balanceCurMap.exists([_packedDimensionNameValueList, _currencyCode]))
        {
            return balanceCurMap.lookup([_packedDimensionNameValueList, _currencyCode]);
        }
        else
        {
            TransDate yearStartDate = LedgerFiscalCalendar::findOpeningStartDateByDate(CompanyInfoHelper::fiscalCalendarRecId(), fromDate);

            query balanceCurQuery = new query();

            QueryBuildDataSource qbdsGJAE = balanceCurQuery.addDataSource(tableNum(GeneralJournalAccountEntry));
            qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount), SelectionField::Sum);
            qbdsGJAE.addRange(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode)).value(_currencyCode);

            QueryBuildDataSource qbdsDimCombination = qbdsGJAE.addDataSource(tableNum(DimensionAttributeValueCombination));
            qbdsDimCombination.joinMode(JoinMode::ExistsJoin);
            qbdsDimCombination.addLink(fieldNum(GeneralJournalAccountEntry, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));

            QueryBuildDataSource qbdsGLE = qbdsGJAE.addDataSource(tableNum(GeneralJournalEntry));
            qbdsGLE.joinMode(JoinMode::ExistsJoin);
            qbdsGLE.addLink(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry), fieldNum(GeneralJournalEntry, RecId));
            qbdsGLE.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));

            QueryBuildDataSource qbdsCalendarPeriod = qbdsGLE.addDataSource(tableNum(FiscalCalendarPeriod));
            qbdsCalendarPeriod.joinMode(JoinMode::ExistsJoin);
            qbdsCalendarPeriod.addLink(fieldNum(GeneralJournalEntry, FiscalCalendarPeriod), fieldNum(FiscalCalendarPeriod, RecId));
            QueryBuildRange calendarPeriodTypeRange = qbdsCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, Type));

            if (fromDate == yearStartDate)
            {
                qbdsGLE.addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(queryValue(yearStartDate));
                calendarPeriodTypeRange.value(queryValue(FiscalPeriodType::Opening));
            }
            else
            {
                qbdsGLE.addRange(fieldNum(GeneralJournalEntry, RecId)).value(strFmt('((%1.%2 < %3) && (%1.%2 >= %4))',
                    qbdsGLE.name(),
                    fieldStr(GeneralJournalEntry, AccountingDate),
                    date2StrXpp(fromDate),
                    date2StrXpp(yearStartDate)));
                calendarPeriodTypeRange.value(queryRangeConcat(queryValue(FiscalPeriodType::Opening), queryValue(FiscalPeriodType::Operating)));
            }
            DimensionNameValueListContract dimensionNameValueListContract = new DimensionNameValueListContract();
            dimensionNameValueListContract.unpack(_packedDimensionNameValueList);

            ListEnumerator dimensionNameValueListEnumerator = dimensionNameValueListContract.parmValues().getEnumerator();

            while (dimensionNameValueListEnumerator.moveNext())
            {
                DimensionAttributeValueContract dimAttrValueContract = dimensionNameValueListEnumerator.current();

                FieldId dimensionValueFieldId = DimensionAttributeValueCombination::getDimensionValueFieldId(dimAttrValueContract.parmName());

                SysQuery::findOrCreateRange(qbdsDimCombination, dimensionValueFieldId).value(dimAttrValueContract.parmValue());
            }

            QueryRun balanceCurQueryRun = new QueryRun(balanceCurQuery);

            if (balanceCurQueryRun.next())
            {
                generalJournalAccountEntry = balanceCurQueryRun.get(tableNum(GeneralJournalAccountEntry));
            }

            balanceCurMap.insert([_packedDimensionNameValueList, _currencyCode], generalJournalAccountEntry.TransactionCurrencyAmount);

            return generalJournalAccountEntry.TransactionCurrencyAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalanceMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves or calculates total MST amount by specified ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The ledger dimension for which retrieves or calculates the total MST amount.
    /// </param>
    /// <summary>
    /// The retrieved or calculated total MST amount .
    /// </summary>
    public AmountMST getBalanceMST(container _packedDimensionNameValueList)
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;

        if (balanceMSTMap.exists(_packedDimensionNameValueList))
        {
            return balanceMSTMap.lookup(_packedDimensionNameValueList);
        }
        else
        {
            TransDate yearStartDate = LedgerFiscalCalendar::findOpeningStartDateByDate(CompanyInfoHelper::fiscalCalendarRecId(), fromDate);

            query balanceMSTQuery = new query();

            QueryBuildDataSource qbdsGJAE = balanceMSTQuery.addDataSource(tableNum(GeneralJournalAccountEntry));
            qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);

            QueryBuildDataSource qbdsDimCombination = qbdsGJAE.addDataSource(tableNum(DimensionAttributeValueCombination));
            qbdsDimCombination.joinMode(JoinMode::ExistsJoin);
            qbdsDimCombination.addLink(fieldNum(GeneralJournalAccountEntry, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));

            QueryBuildDataSource qbdsGLE = qbdsGJAE.addDataSource(tableNum(GeneralJournalEntry));
            qbdsGLE.joinMode(JoinMode::ExistsJoin);
            qbdsGLE.addLink(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry), fieldNum(GeneralJournalEntry, RecId));
            qbdsGLE.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));
            QueryBuildRange dateRange = qbdsGLE.addRange(fieldNum(GeneralJournalEntry, AccountingDate));

            QueryBuildDataSource qbdsCalendarPeriod = qbdsGLE.addDataSource(tableNum(FiscalCalendarPeriod));
            qbdsCalendarPeriod.joinMode(JoinMode::ExistsJoin);
            qbdsCalendarPeriod.addLink(fieldNum(GeneralJournalEntry, FiscalCalendarPeriod), fieldNum(FiscalCalendarPeriod, RecId));
            QueryBuildRange calendarPeriodTypeRange = qbdsCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, Type));

            if (fromDate == yearStartDate)
            {
                qbdsGLE.addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(queryValue(yearStartDate));
                calendarPeriodTypeRange.value(queryValue(FiscalPeriodType::Opening));
            }
            else
            {
                qbdsGLE.addRange(fieldNum(GeneralJournalEntry, RecId)).value(strFmt('((%1.%2 < %3) && (%1.%2 >= %4))',
                    qbdsGLE.name(),
                    fieldStr(GeneralJournalEntry, AccountingDate),
                    date2StrXpp(fromDate),
                    date2StrXpp(yearStartDate)));
                calendarPeriodTypeRange.value(queryRangeConcat(queryValue(FiscalPeriodType::Opening), queryValue(FiscalPeriodType::Operating)));
            }
            DimensionNameValueListContract dimensionNameValueListContract = new DimensionNameValueListContract();
            dimensionNameValueListContract.unpack(_packedDimensionNameValueList);

            ListEnumerator dimensionNameValueListEnumerator = dimensionNameValueListContract.parmValues().getEnumerator();

            while (dimensionNameValueListEnumerator.moveNext())
            {
                DimensionAttributeValueContract dimAttrValueContract = dimensionNameValueListEnumerator.current();

                FieldId dimensionValueFieldId = DimensionAttributeValueCombination::getDimensionValueFieldId(dimAttrValueContract.parmName());

                SysQuery::findOrCreateRange(qbdsDimCombination, dimensionValueFieldId).value(dimAttrValueContract.parmValue());
            }

            QueryRun balanceMSTQueryRun = new QueryRun(balanceMSTQuery);

            if (balanceMSTQueryRun.next())
            {
                generalJournalAccountEntry = balanceMSTQueryRun.get(tableNum(GeneralJournalAccountEntry));
            }

            balanceMSTMap.insert(_packedDimensionNameValueList, generalJournalAccountEntry.AccountingCurrencyAmount);

            return generalJournalAccountEntry.AccountingCurrencyAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpDailyLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial query form.
    /// </summary>
    public void initTmpDailyLedger()
    {
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        FiscalCalendarPeriod        fiscalCalendarPeriod;

        Query                   queryDaily;
        QueryBuildRange         rangeAccount;
        QueryBuildRange         rangePeriod;
        QueryBuildRange         rangeFiscalYear;
        QueryBuildDataSource    ds;

        this.buildQuery();

        queryDaily = query;

        if (initFromOthForm)
        {
            submitQuery  = true;
            if (!this.validate())
            {
                submitQuery  = false;
                return;
            }
        }
        else if (!initFromOthForm)
        {
            if (this.prompt())
            {
                submitQuery  = true;
            }
            else
            {
                submitQuery = false;
                return;
            }
        }

        fiscalCalendarPeriod = FiscalCalendarPeriod::findByCalendarYearPeriod(
            FiscalCalendarYear::findByCalendarYearName(Ledger::fiscalCalendar(), periodFiscalYear).RecId,
            periodName);

        fromDate = fiscalCalendarPeriod.StartDate;
        toDate = fiscalCalendarPeriod.EndDate;

        monthStr = date2str(fromDate, 32, 0, 2, 2, 0, 4, DateFlags::None)
            + "@SYS4004248" // " "
            + "@SYS77038" // "-"
            + "@SYS4004248" // " "
            + date2str(toDate, 32, 0, 2, 2, 0, 4, DateFlags::None);

        lastPer  = toDate;

        ds = queryDaily.dataSourceTable(tablenum(GeneralJournalEntry));
        SysQuery::findOrCreateRange(ds, fieldNum(GeneralJournalEntry, FiscalCalendarPeriod)).value(queryValue(fiscalCalendarPeriod.RecId));
        SysQuery::findOrCreateRange(ds, fieldNum(GeneralJournalEntry, SubledgerVoucherDataAreaId)).value(queryValue(curext()));

        ds = queryDaily.dataSourceTable(tablenum(MainAccount));
        rangeAccount = ds.findRange(fieldnum(MainAccount, MainAccountId));

        if (fromAccountNum == toAccountNum)
        {
            rangeAccount.value(fromAccountNum + DimensionCriteriaOperators::WildcardDisplay);
            isSingleAccount = NoYes::Yes;
        }
        else
        {
            rangeAccount.value(queryRange(fromAccountNum, toAccountNum));
            isSingleAccount = NoYes::No;
        }

        if (initFromOthForm && ledgerDimensionFromOtherForm)
        {
            ds = queryDaily.dataSourceTable(tablenum(GeneralJournalAccountEntry));
            SysQuery::findOrCreateRange(ds, fieldNum(GeneralJournalAccountEntry, LedgerDimension)).value(queryValue(ledgerDimensionFromOtherForm));
        }
        else
        {
            LedgerDimensionExpressionBuilderHelper_CN::addDimensionFilterToDimensionDataSource(
                queryDaily.dataSourceTable(tableNum(DimensionAttributeValueCombination)),
                expressionBuilderHelper.getExpressionList());
            filterDimensions = expressionBuilderHelper.getFilterDimensions();
        }

        ds = queryDaily.dataSourceTable(tablenum(GeneralJournalEntry));
        ds.addOrderByField(fieldnum(GeneralJournalEntry, AccountingDate));
        ds = queryDaily.dataSourceTable(tablenum(SubledgerVoucherGeneralJournalEntry));
        ds.addOrderByField(fieldnum(SubledgerVoucherGeneralJournalEntry, Voucher));
        ds = queryDaily.dataSourceTable(tablenum(GeneralJournalAccountEntry));
        ds.addOrderByField(fieldnum(GeneralJournalAccountEntry, LedgerAccount));

        queryRun = new QueryRun(queryDaily);

        transNum = 0;
        while (queryRun.next())
        {
            generalJournalAccountEntry = queryRun.get(tablenum(generalJournalAccountEntry));
            fiscalCalendarPeriod = queryRun.get(tableNum(FiscalCalendarPeriod));

            if (queryRun.changed(tableNum(generalJournalAccountEntry))
                && generalJournalAccountEntry.RecId
                && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating)
            {
                this.createDailyLedger(generalJournalAccountEntry);
                transNum++;
            }
        }

        if (transNum > 0)
        {
            this.insertSummaryRecord();
            this.createSumRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDailyLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert daily ledger record.
    /// </summary>
    public void insertDailyLedger()
    {
        tmpDaily_CN.TransDate   = fromDate;
        // Opening balance
        tmpDaily_CN.Explanation = "@SYS22797";
        tmpDaily_CN.TransYear   = this.yearOfTransDate(fromDate);
        tmpDaily_CN.TransMonth  = this.monthOfTransDate(fromDate);
        tmpDaily_CN.TransDay    = this.dayOfTransDate(fromDate);

        if (tmpDaily_CN.Balance > 0)
        {
            tmpDaily_CN.BalanceStatus = LedgerBalanceStatus_CN::DR;
        }
        else if (tmpDaily_CN.Balance < 0)
        {
            tmpDaily_CN.BalanceStatus = LedgerBalanceStatus_CN::CR;
        }
        else if (tmpDaily_CN.Balance == 0)
        {
            tmpDaily_CN.BalanceStatus = LedgerBalanceStatus_CN::Balance;
        }
        tmpDaily_CN.Balance = abs(tmpDaily_CN.Balance);
        transNum++;
        tmpDaily_CN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSummaryRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert total credit or debit amount.
    /// </summary>
    public void insertSummaryRecord()
    {
        if (dailySummary)
        {
            while select sum(AmountMSTDebit), sum(AmountMSTCredit), sum(Balance) from tmpDaily_CN
                group by TransDate, SummaryAccount, SummaryAccountName
                where tmpDaily_CN.Voucher != ''
            {
                this.insertTmpSummaryRecord(tmpDaily_CN);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpSummaryRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert temp daily ledger.
    /// </summary>
    /// <param name="_tmpDaily_CN">
    /// TmpDailyLedger_CN's record.
    /// </param>
    /// <param name="_ret">
    /// SingleAccount
    /// </param>
    private void insertTmpSummaryRecord(TmpDailyLedger_CN   _tmpDaily_CN)
    {
        TransDate        curTransDate;

        curTransDate             = _tmpDaily_CN.TransDate;
        _tmpDaily_CN.TransYear   = this.yearOfTransDate(curTransDate);
        _tmpDaily_CN.TransMonth  = this.monthOfTransDate(curTransDate);
        _tmpDaily_CN.TransDay    = this.dayOfTransDate(curTransDate);
        // Summary of the day
        _tmpDaily_CN.Explanation = "@GLS54659";

        _tmpDaily_CN.Balance     = balanceMSTMapByDate.lookup([summaryAccount2DimValueList.lookup(_tmpDaily_CN.SummaryAccount), _tmpDaily_CN.TransDate]);

        if (_tmpDaily_CN.Balance > 0)
        {
            _tmpDaily_CN.BalanceStatus = LedgerBalanceStatus_CN::DR;
        }
        else if (_tmpDaily_CN.Balance < 0)
        {
            _tmpDaily_CN.BalanceStatus = LedgerBalanceStatus_CN::CR;
        }
        else
        {
            _tmpDaily_CN.BalanceStatus = LedgerBalanceStatus_CN::Balance;
        }
        _tmpDaily_CN.Balance        = abs(_tmpDaily_CN.Balance);
        _tmpDaily_CN.TransDate      = curTransDate + 1;
        _tmpDaily_CN.LedgerAccount  = _tmpDaily_CN.SummaryAccount;
        _tmpDaily_CN.AccountName    = _tmpDaily_CN.SummaryAccountName;
        _tmpDaily_CN.CurrencyCode   = companyCurrencyCode;

        _tmpDaily_CN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>monthOfTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of the month in the year.
    /// </summary>
    /// <param name="_transDate">
    /// Transaction date.
    /// </param>
    /// <returns>
    /// the number of the month.
    /// </returns>
    MonthName monthOfTransDate(TransDate _transDate)
    {
        return int2str(mthofyr(_transDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(
        MainAccountNum  _fromAccValue       = '',
        MainAccountNum  _toAccValue         = '',
        PeriodName      _periodName         = '',
        FiscalYearName  _periodFiscalYear   = '',
        boolean         _initFromOthForm    = false,
        List            _dimExpressionList  = null)
    {
        super();

        fromAccountNum      = _fromAccValue;
        toAccountNum        = _toAccValue;
        periodName          = _periodName;
        periodFiscalYear    = _periodFiscalYear;
        initFromOthForm     = _initFromOthForm;
        companyCurrencyCode = Ledger::accountingCurrency();

        expressionBuilderHelper = LedgerDimensionExpressionBuilderHelper_CN::construct();

        if (_initFromOthForm && _dimExpressionList)
        {
            expressionBuilderHelper.setExpressionList(_dimExpressionList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds offset accounts of general account.
    /// </summary>
    /// <param name="_voucher">
    /// Voucher number.
    /// </param>
    /// <param name="_accountNum">
    /// General account account number.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date.
    /// </param>
    /// <returns>
    /// Set of general account.
    /// </returns>
    public Set offsetAccounts(
        Voucher         _voucher,
        MainAccountNum  _accountNum,
        TransDate       _transDate)
    {
        GeneralJournalEntry                     generalJournalEntry;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry     subLedgerVoucherGeneralJournalEntry;

        MainAccountNum      offsetAccountNum;
        Set                 conOffsetAccount;

        conOffsetAccount = new Set(Types::String);

        while select RecId, LedgerDimension from generalJournalAccountEntry
            exists join RecId from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
                    && generalJournalEntry.AccountingDate  == _transDate
            exists join Voucher from subLedgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.voucher == _voucher
                    && subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
        {
            offsetAccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(generalJournalAccountEntry.LedgerDimension);
            if (offsetAccountNum != _accountNum)
            {
                conOffsetAccount.add(offsetAccountNum);
            }
        }

        return conOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetLedgerAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds offset ledger accounts of general account.
    /// </summary>
    /// <param name="_voucher">
    /// Voucher number.
    /// </param>
    /// <param name="_ledgerAccount">
    /// General account.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date.
    /// </param>
    /// <returns>
    /// Set of offset ledger accounts.
    /// </returns>
    public Set offsetLedgerAccounts(
        Voucher                 _voucher,
        DimensionDisplayValue   _ledgerAccount,
        TransDate               _transDate)
    {
        GeneralJournalEntry                     generalJournalEntry;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry     subLedgerVoucherGeneralJournalEntry;

        Set conOffsetAccount = new Set(Types::String);

        while select LedgerDimension, LedgerAccount from generalJournalAccountEntry
            where generalJournalAccountEntry.LedgerAccount != _ledgerAccount
            exists join RecId from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
                    && generalJournalEntry.AccountingDate  == _transDate
            exists join Voucher from subLedgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.voucher == _voucher
                    && subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
        {
            conOffsetAccount.add(generalJournalAccountEntry.LedgerAccount);
        }

        return conOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, [#CurrentList, expressionBuilderHelper.pack()]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalPeriodNameAndYearName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets value of the fiscal period name and year name.
    /// </summary>
    /// <param name="_fiscalPeriodName">
    /// The new value of the fiscal period name.
    /// </param>
    /// <param name="_fiscalYearName">
    /// The new value of the fiscal year name.
    /// </param>
    /// <returns>
    /// Container includes fiscal period name and year name.
    /// </returns>
    public container parmFiscalPeriodNameAndYearName(
        PeriodName      _fiscalPeriodName = periodName,
        FiscalYearName  _fiscalYearName = periodFiscalYear)
    {
        periodName = _fiscalPeriodName;
        periodFiscalYear = _fiscalYearName;

        return [periodName, periodFiscalYear];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionFromOtherForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets value of the ledger dimenion from other inquiry form.
    /// </summary>
    /// <param name="_ledgerDimensionFromOtherForm">
    /// The new ledger dimenion from other inquiry form.
    /// </param>
    /// <returns>
    /// The ledger dimenion from other inquiry form.
    /// </returns>
    public LedgerDimensionAccount parmLedgerDimensionFromOtherForm(LedgerDimensionAccount _ledgerDimensionFromOtherForm = ledgerDimensionFromOtherForm)
    {
        ledgerDimensionFromOtherForm = _ledgerDimensionFromOtherForm;

        return ledgerDimensionFromOtherForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodEndValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the start date of the fiscal calendar period in which the specified date.
    /// </summary>
    /// <param name="_transDate">
    /// The date specified for the fiscal calendar period.
    /// </param>
    /// <returns>
    /// The start date of the fiscal calendar period.
    /// </returns>
    public PeriodEnd periodEndValue(TransDate _transDate)
    {
        return LedgerFiscalCalendar::findPeriodEndDateByDate(
            CompanyInfoHelper::fiscalCalendarRecId(),
            _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDailySummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets daily summary of the ledger inquiry daily.
    /// </summary>
    /// <param name="_dailySummary">
    /// The daily summary information.
    /// </param>
    public void setDailySummary(boolean _dailySummary)
    {
        dailySummary = _dailySummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submit query.
    /// </summary>
    /// <returns>
    /// The result of the submit operation.
    /// </returns>
    public boolean submitQuery()
    {
        return submitQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpDailyLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets temperory daily ledger.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TmpDailyLedger_CN</c> class.
    /// </returns>
    public TmpDailyLedger_CN tmpDailyLedger()
    {
        return tmpDaily_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version    = RunBase::getVersion(_packedClass);
        container   packedClassMembers;
        container   packedExpressionBuilderHelper;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedClassMembers] = _packedClass;

                [#CurrentList, packedExpressionBuilderHelper] = packedClassMembers;
                expressionBuilderHelper.unpack(packedExpressionBuilderHelper);
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the instance of the <c>LedgerInquiryDaily_CN</c> class.
    /// </summary>
    /// <param name="calledFrom">
    /// The called from information.
    /// </param>
    /// <returns>
    /// Returns true if the validate is succeed.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean     ret;

        ret = true;

        if (fromAccountNum == ''
            || toAccountNum == ''
            || periodFiscalYear == ''
            || periodName == '')
        {
            // Both account and date fields must be filled in.
            ret = checkFailed("@GLS54588");
            submitQuery  = false;
        }

        if (ret && fromAccountNum > toAccountNum)
        {
            // From account cannot be greater than To account
            ret = checkFailed(strFmt("@SYS344287", "@SYS4081511", "@SYS4081512"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>yearOfTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the year from a date value.
    /// </summary>
    /// <param name="_transDate">
    /// Transaction date.
    /// </param>
    /// <returns>
    /// The number of the day in the month.
    /// </returns>
    public DateDayName yearOfTransDate(TransDate _transDate)
    {
        return int2str(year(_transDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes dimension expression builder control and registers event handlers.
    /// </summary>
    /// <param name="_dialog">
    /// The <c>Runbase</c> dialog object.
    /// </param>
    public void dialogPostRun(DialogRunbase dialog)
    {
        super(dialog);

        DimensionExpressionBuilder builder = dialog.formRun().control(dialog.formRun().controlId(LedgerDimensionExpressionBuilderHelper_CN::DimensionFilterExpressionControlName));

        expressionBuilderHelper.parmExpressionBuilder(builder);
        expressionBuilderHelper.initExpressionBuilder();

        FormStringControl formControlMainAccountFrom = dialogFieldFromMainAccount.control();
        FormStringControl formControlMainAccountTo = dialogFieldToMainAccount.control();

        formControlMainAccountFrom.OnModified += eventhandler(this.mainAccountOnModified);
        formControlMainAccountTo.OnModified += eventhandler(this.mainAccountOnModified);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainAccountOnModified</Name>
				<Source><![CDATA[
    private void mainAccountOnModified(FormControl _sender, FormControlEventArgs _e)
    {
        expressionBuilderHelper.updateDimensionExpression(dialogFieldFromMainAccount.value(), dialogFieldToMainAccount.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedExpressionBuilderHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the packed dimension expression builder helper class.
    /// </summary>
    /// <returns>
    /// The container in which the dimension expression builder helper class is packed.
    /// </returns>
    public container parmPackedExpressionBuilderHelper(container _packedExpressionBuilderHelper = conNull())
    {
        if (!prmisdefault(_packedExpressionBuilderHelper))
        {
            expressionBuilderHelper.unpack(_packedExpressionBuilderHelper);
        }

        return expressionBuilderHelper.pack();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>