<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSyncOrdersSchedulerTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// This class is used to Synchronize pending Orders from Retail orders staging tables to AX Sales order tables.
/// </summary>
class RetailSyncOrdersSchedulerTask extends RunBaseBatch implements BatchRetryable
{
    RefRecId                   channelId;
    container                  packedTransactionRecIdList;

    private RetailParameters retailParameters;

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    #define.RetryNum(3)
    #define.CurrentVersion(2)

    #localmacro.CurrentList
        packedTransactionRecIdList
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildWorkTable</Name>
				<Source><![CDATA[
    private int buildWorkTable(RetailSyncOrdersWorkTable _workTable)
    {
        Array       transactionRecIdList;
        int         i, lastIndex;
        int         countWork;

        delete_from _workTable;
        transactionRecIdList = Array::create(this.parmPackedTransactionRecIdList());

        lastIndex = transactionRecIdList.lastIndex();

        for (i = 1; i <= lastIndex; i++)
        {
            _workTable.TransactionRefRecId = transactionRecIdList.value(i);
            _workTable.insert();

            countWork++;
        }

        return countWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedTransactionRecIdList</Name>
				<Source><![CDATA[
    public container parmPackedTransactionRecIdList(container _packedTransactionRecIdList = packedTransactionRecIdList)
    {
        packedTransactionRecIdList = _packedTransactionRecIdList;

        return packedTransactionRecIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (RetailEnhancedSyncOrdersSchedulerTaskFlight::instance().isEnabled())
        {
            this.runInternalNew();
        }
        else
        {
            this.runInternal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runInternalNew</Name>
				<Source><![CDATA[
    private void runInternalNew()
    {
        retailParameters = RetailParameters::find();

        // synchronizes the un-processed orders
        this.syncOrders();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runInternal</Name>
				<Source><![CDATA[
    private void runInternal()
    {
        try
        {
            retailParameters = RetailParameters::find();

            // synchronizes the un-processed orders
            this.syncOrders();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes pending Orders from Retail orders staging tables to AX Sales order tables.
    /// The status of Sales order created is recorded back into Retail order Status table.
    /// </summary>
    public void syncOrders()
    {
        System.Exception ex;
        boolean isSuccess = false;

        if (RetailEnhancedSyncOrdersSchedulerTaskFlight::instance().isEnabled())
        {
            try
            {
                isSuccess = this.syncOrdersInternalNew();
            }
            catch (ex)
            {
                eventSource.EventWriteSynchronizeOrdersTaskError(ex.ToString());
                throw error("@Retail:RetailSyncOrdersSchedulerTaskError");
            }

            if (!isSuccess)
            {
                throw error("@Retail:RetailSyncOrdersSchedulerTaskError");
            }
        }
        else
        {
            this.syncOrdersInternal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncOrdersInternalNew</Name>
				<Source><![CDATA[
    private boolean syncOrdersInternalNew()
    {
        RetailTransactionTable              retailTransactionTable;

        boolean                             isSuccess = true;
        int                                 countOrdersTried = 0;
        int                                 countOrdersSuccess = 0;

        RetailSyncOrdersWorkTable           workTable;

        using(var telemetry = RetailInstrumentationSegment::construct(classId2Name(ClassIdGet(this)), funcName()))
        {
            Array listOfTransactions = Array::create(this.parmPackedTransactionRecIdList());

            if (listOfTransactions.lastIndex() == 1)
            {
                countOrdersTried++;

                RecId transactionRecId = listOfTransactions.value(1);
                RetailTransactionTable transactionTable;

                select firstonly retailTransactionTable where retailTransactionTable.RecId == transactionRecId;

                isSuccess = this.syncIndividualTransactionNew(retailTransactionTable) && isSuccess;

                if (retailTransactionTable.salesOrderId != '')
                {
                    countOrdersSuccess++;
                }
            }
            else
            {
                this.buildWorkTable(workTable);

                while select *
                from retailTransactionTable
                exists join workTable
                where
                    workTable.TransactionRefRecId == retailTransactionTable.RecId
                {
                    countOrdersTried++;

                    isSuccess = this.syncIndividualTransactionNew(retailTransactionTable) && isSuccess;

                    if (retailTransactionTable.salesOrderId != '')
                    {
                        countOrdersSuccess++;
                    }
                }
            }

            eventSource.EventWriteOrdersSyncOrdersInfo(funcName(), countOrdersTried, countOrdersSuccess);
        }

        return isSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncIndividualTransactionNew</Name>
				<Source><![CDATA[
    private boolean syncIndividualTransactionNew(RetailTransactionTable _transactionTable)
    {
        int fromLine = Global::infologLine();
        str errorDetail = "";
        boolean isSuccess = false;
        RefRecId lastInventTrans = 0;
        SalesIdBase salesId = '';

        System.Exception ex;
        Microsoft.Dynamics.Ax.Xpp.DeadlockException deadLockEx;
        Microsoft.Dynamics.Ax.Xpp.DuplicateKeyException duplicateKeyEx;
        Microsoft.Dynamics.Ax.Xpp.UpdateConflictException updateConflictEx;

        System.Diagnostics.Stopwatch synchronizeTransactionStopwatch = new System.Diagnostics.Stopwatch();
        synchronizeTransactionStopwatch.Start();

        eventSource.EventWriteSynchronizeOrdersTaskSyncTransactionStart(_transactionTable.RecId, enum2Symbol(enumNum(RetailTransactionType), _transactionTable.type));

        try
        {
            ttsBegin;

            if (xSession::currentRetryCount() >= 1)
            {
                _transactionTable.reread();

                // Whenever we re-read, we should check if the record that was re-read is not already synchronized
                // This can happen if the Synchronize order job is being executed twice at the same time.
                // We consider the record is already synchronized when it is already posted or an order is already associated.
                if (_transactionTable.entryStatus == RetailEntryStatus::Posted || _transactionTable.salesOrderId != '')
                {
                    eventSource.EventWriteSynchronizeOrdersTaskSyncTransactionRereadUpdateConflict(_transactionTable.RecId, enum2Symbol(enumNum(RetailTransactionType), _transactionTable.type));

                    throw Exception::UpdateConflictNotRecovered;
                }
            }

            RetailTransactionOrderStatus orderStatus = RetailTransactionOrderStatus::find(_transactionTable.Channel, _transactionTable.store, _transactionTable.terminal, _transactionTable.transactionId);
            NoYes isManuallyModified = orderStatus.isManuallyModified();

            if (RetailPreventDuplicateAsyncOrderCreationFlight::instance().isEnabled())
            {
                this.preventDuplicateAsyncOrderCreation(orderStatus, _transactionTable);
            }

            if (isManuallyModified && retailParameters.AsyncOrdersEditHoldCode == '')
            {
                [isSuccess, errorDetail, salesId, lastInventTrans] = [false, strFmt("@RetailAudit:RetailAsyncOrdersEditHoldCodeNotConfigured", fieldPName(RetailParameters, AsyncOrdersEditHoldCode)), '', ''];
            }
            else
            {
                // Process order creation
                [isSuccess, errorDetail, salesId, lastInventTrans] = RetailOnlineorderSynchronizer::CreateOrder(_transactionTable);
            }

            // Update the status
            if (isSuccess)
            {
                this.insertOrderHoldIfNecessary(salesId, orderStatus, _transactionTable);
            }

            RetailTransactionOrderStatusType status = isSuccess ? RetailTransactionOrderStatusType::Succeeded : RetailTransactionOrderStatusType::Failed;

            // setOrderStatus() MUST be in the same transaction scope as CreateOrder() to ensure that if an order is successful,
            // we guarantee recording the status and avoid creating a duplicate order the next time the job is run.
            RetailTransactionOrderStatus::setOrderStatus(
                        _transactionTable.Channel,
                        _transactionTable.store,
                        _transactionTable.terminal,
                        _transactionTable.transactionId,
                        status,
                        errorDetail,
                        salesId,
                        lastInventTrans);

            ttsCommit;
        }
        catch (deadLockEx)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                isSuccess = false;
                this.setOrderStatusWithStatusFailedAndLogError(_transactionTable, deadLockEx);
            }
            else
            {
                retry;
            }
        }
        catch (updateConflictEx)
        {
            if (appl.ttsLevel() != 0)
            {
                isSuccess = false;
                this.setOrderStatusWithStatusFailedAndLogError(_transactionTable, updateConflictEx);
            }
            else if (xSession::currentRetryCount() >= #RetryNum)
            {
                isSuccess = false;
                this.setOrderStatusWithStatusFailedAndLogError(_transactionTable, updateConflictEx);
            }
            else
            {
                retry;
            }
        }
        catch (duplicateKeyEx)
        {
            if (appl.ttsLevel() != 0)
            {
                isSuccess = false;
                this.setOrderStatusWithStatusFailedAndLogError(_transactionTable, duplicateKeyEx);
            }
            else if (xSession::currentRetryCount() >= #RetryNum)
            {
                isSuccess = false;
                this.setOrderStatusWithStatusFailedAndLogError(_transactionTable, duplicateKeyEx);
            }
            else
            {
                retry;
            }
        }
        catch
        {
            errorDetail = RetailTransactionServiceUtilities::getInfologMessages(fromLine);

            isSuccess = false;
            this.setOrderStatusWithStatusFailedAndLogError(_transactionTable, CLRInterop::getLastException(), errorDetail);
        }
        finally
        {
            synchronizeTransactionStopwatch.Stop();
            eventSource.EventWriteSynchronizeOrdersTaskSyncTransactionStop(_transactionTable.RecId, enum2Symbol(enumNum(RetailTransactionType), _transactionTable.type), synchronizeTransactionStopwatch.ElapsedMilliseconds, !isSuccess);
        }

        return isSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderStatusWithStatusFailedAndLogError</Name>
				<Source><![CDATA[
    private void setOrderStatusWithStatusFailedAndLogError(RetailTransactionTable _transactionTable, System.Exception _exception, str _errorDetail = '')
    {
        str errorDetail;

        if (RetailSyncOrderSetOrderWithStatusFailedFlight::instance().isEnabled())
        {
            errorDetail = this.generateHumanReadableErrorDetail(_exception, _errorDetail);
        }
        else
        {
            errorDetail = _exception ? _exception.ToString() : '';
        }

        RetailTransactionOrderStatus::setOrderStatus(_transactionTable.Channel, _transactionTable.store, _transactionTable.terminal, _transactionTable.transactionId, RetailTransactionOrderStatusType::Failed, errorDetail, '', 0);
        eventSource.EventWriteSynchronizeOrdersTaskSyncTransactionError(_transactionTable.RecId, enum2Symbol(enumNum(RetailTransactionType), _transactionTable.type));
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncOrdersInternal</Name>
				<Source><![CDATA[
    public void syncOrdersInternal()
    {
        RetailTransactionTable              retailTransactionTable;

        int                                 countOrdersTried = 0;
        int                                 countOrdersSuccess = 0;

        RetailSyncOrdersWorkTable           workTable;

        using(var telemetry = RetailInstrumentationSegment::construct(classId2Name(ClassIdGet(this)), funcName()))
        {
            Array listOfTransactions = Array::create(this.parmPackedTransactionRecIdList());

            if (listOfTransactions.lastIndex() == 1 && RetailEnhancedAsyncOrderSyncIndividualOrdersToggle::instance().isEnabled())
            {
                eventSource.EventWriteSynchronizeOrdersTaskExecutionMode(false);

                countOrdersTried++;

                RecId transactionRecId = listOfTransactions.value(1);
                RetailTransactionTable transactionTable;

                select firstonly retailTransactionTable where retailTransactionTable.RecId == transactionRecId;

                this.syncIndividualTransaction(retailTransactionTable);

                if (retailTransactionTable.salesOrderId != '')
                {
                    countOrdersSuccess++;
                }
            }
            else
            {
                eventSource.EventWriteSynchronizeOrdersTaskExecutionMode(true);

                this.buildWorkTable(workTable);

                while select *
                from retailTransactionTable
                exists join workTable
                where
                    workTable.TransactionRefRecId == retailTransactionTable.RecId
                {
                    countOrdersTried++;

                    this.syncIndividualTransaction(retailTransactionTable);

                    if (retailTransactionTable.salesOrderId != '')
                    {
                        countOrdersSuccess++;
                    }
                }
            }

            eventSource.EventWriteOrdersSyncOrdersInfo(funcName(), countOrdersTried, countOrdersSuccess);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncIndividualTransaction</Name>
				<Source><![CDATA[
    private void syncIndividualTransaction(RetailTransactionTable _transactionTable)
    {
        int fromLine = Global::infologLine();
        str errorDetail = "";
        boolean isSuccess = false;
        RefRecId lastInventTrans = 0;
        SalesIdBase salesId = '';

        System.Diagnostics.Stopwatch synchronizeTransactionStopwatch = new System.Diagnostics.Stopwatch();
        synchronizeTransactionStopwatch.Start();

        eventSource.EventWriteSynchronizeOrdersTaskSyncTransactionStart(_transactionTable.RecId, enum2Symbol(enumNum(RetailTransactionType), _transactionTable.type));

        try
        {
            ttsBegin;

            if (xSession::currentRetryCount() >= 1)
            {
                _transactionTable.reread();

                // Whenever we re-read, we should check if the record that was re-read is not already synchronized
                // This can happen if the Synchronize order job is being executed twice at the same time.
                if (_transactionTable.entryStatus == RetailEntryStatus::Posted || _transactionTable.salesOrderId != '')
                {
                    eventSource.EventWriteSynchronizeOrdersTaskSyncTransactionRereadUpdateConflict(_transactionTable.RecId, enum2Symbol(enumNum(RetailTransactionType), _transactionTable.type));

                    throw Exception::UpdateConflictNotRecovered;
                }
            }

            RetailTransactionOrderStatus orderStatus = RetailTransactionOrderStatus::find(_transactionTable.Channel, _transactionTable.store, _transactionTable.terminal, _transactionTable.transactionId);
            NoYes isManuallyModified = orderStatus.isManuallyModified();

            if (RetailPreventDuplicateAsyncOrderCreationFlight::instance().isEnabled())
            {
                this.preventDuplicateAsyncOrderCreation(orderStatus, _transactionTable);
            }

            if (isManuallyModified && retailParameters.AsyncOrdersEditHoldCode == '')
            {
                [isSuccess, errorDetail, salesId, lastInventTrans] = [false, strFmt("@RetailAudit:RetailAsyncOrdersEditHoldCodeNotConfigured", fieldPName(RetailParameters, AsyncOrdersEditHoldCode)), '', ''];
            }
            else
            {
                // Process order creation
                [isSuccess, errorDetail, salesId, lastInventTrans] = RetailOnlineorderSynchronizer::CreateOrder(_transactionTable);
            }

            // Update the status
            if (isSuccess)
            {
                this.insertOrderHoldIfNecessary(salesId, orderStatus, _transactionTable);
            }

            RetailTransactionOrderStatusType status = isSuccess ? RetailTransactionOrderStatusType::Succeeded : RetailTransactionOrderStatusType::Failed;

            // setOrderStatus() MUST be in the same transaction scope as CreateOrder() to ensure that if an order is successful,
            // we guarantee recording the status and avoid creating a duplicate order the next time the job is run.
            RetailTransactionOrderStatus::setOrderStatus(
                        _transactionTable.Channel,
                        _transactionTable.store,
                        _transactionTable.terminal,
                        _transactionTable.transactionId,
                        status,
                        errorDetail,
                        salesId,
                        lastInventTrans);

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            // For Deadlock, try again from the top
            retry; // Retry just the failed order
        }
        catch (Exception::UpdateConflict)
        {
            // For UpdateConflict, try again from the top
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry; // Retry just the failed order
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            // For DuplicateKeyException, try again from the top
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry; // Retry just the failed order
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
        catch
        {
            #File
            System.Exception exception;

            // For everything else, (ie other exceptions from RetailOnlineorderSynchronizer::CreateOrder), just mark as Failed.
            // We are less concerned if a failure status can't be written because no order was created, and there is no danger of duplicates.
            errorDetail = RetailTransactionServiceUtilities::getInfologMessages(fromLine);
            exception = CLRInterop::getLastException();

            errorDetail = this.generateHumanReadableErrorDetail(exception, errorDetail);

            lastInventTrans = 0;
            salesId = '';

            RetailTransactionOrderStatus::setOrderStatus(
                    _transactionTable.Channel,
                    _transactionTable.store,
                    _transactionTable.terminal,
                    _transactionTable.transactionId,
                    RetailTransactionOrderStatusType::Failed,
                    errorDetail,
                    salesId,
                    lastInventTrans);

            eventSource.EventWriteSynchronizeOrdersTaskSyncTransactionException(_transactionTable.RecId, enum2Symbol(enumNum(RetailTransactionType), _transactionTable.type));

            isSuccess = false;
        }
        finally
        {
            synchronizeTransactionStopwatch.Stop();

            boolean threwException = !isSuccess;

            eventSource.EventWriteSynchronizeOrdersTaskSyncTransactionStop(_transactionTable.RecId, enum2Symbol(enumNum(RetailTransactionType), _transactionTable.type), synchronizeTransactionStopwatch.ElapsedMilliseconds, threwException);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateHumanReadableErrorDetail</Name>
				<Source><![CDATA[
    private str generateHumanReadableErrorDetail(System.Exception _exception, str _errorDetail = '')
    {
        str errorDetail, exceptionType, stackTrace, exceptionMessage;

        errorDetail = _errorDetail;
        // When the CLR error encounters it gets the inner exception message, call stack and stores in Database.
        if (_exception && _exception.InnerException)
        {
            if (_exception.InnerException.InnerException && _exception.InnerException.StackTrace)
            {
                // Use inner exception if it is available as it is often more descriptive.
                errorDetail = errorDetail ? errorDetail +
                            _exception.InnerException.InnerException.Message : _exception.InnerException.InnerException.Message +
                             _exception.InnerException.StackTrace.ToString();
            }
            else if (_exception.InnerException.StackTrace)
            {
                errorDetail = _exception.InnerException.Message +  _exception.InnerException.StackTrace.ToString();
            }
            else
            {
                // When the exeption not returns a call stack, we get the call stack from the <c>Xsession<c> object.
                errorDetail = _exception.InnerException.Message + con2str(xSession::xppCallStack());
            }
        }

        return errorDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@RET490006";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the caption of the Batch task.
    /// </summary>
    /// <returns>The caption of the batch task.</returns>
    public ClassDescription caption()
    {
        Array listOfTransactions = Array::create(this.parmPackedTransactionRecIdList());

        if (listOfTransactions.lastIndex() == 1)
        {
            RecId transactionRecId = listOfTransactions.value(1);

            RetailTransactionTable transactionTable;

            select firstonly ChannelReferenceId from transactionTable where transactionTable.RecId == transactionRecId;

            return strFmt("@Retail:SynchronizeIndividualOrderBatchTask", transactionTable.ChannelReferenceId);
        }
        else
        {
            return RetailSyncOrdersSchedulerTask::description();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailSyncOrdersSchedulerTask</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailSyncOrdersSchedulerTask</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrderHoldIfNecessary</Name>
				<Source><![CDATA[
    private void insertOrderHoldIfNecessary(SalesId _salesId, RetailTransactionOrderStatus _orderStatus, RetailTransactionTable _transactionTable)
    {
        // Add order hold if the transaction that had edit and audit modification
        if (_transactionTable.type != RetailTransactionType::AsyncCustomerQuote && RetailParameters.AsyncOrdersEditHoldCode && _orderStatus.isManuallyModified())
        {
            MCRHoldCodeTrans holdCodeTrans;

            holdCodeTrans.InventRefId = _salesId;
            holdCodeTrans.MCRHoldUser = _orderStatus.LastEditUser;
            holdCodeTrans.MCRHoldCode = retailParameters.AsyncOrdersEditHoldCode;
            holdCodeTrans.MCRHoldDateTime = DateTimeUtil::utcNow();
            holdCodeTrans.insert();

            SalesParameters salesParameters = SalesParameters::find();

            if (salesParameters.MCRHoldCodeNoteType)
            {
                DocumentManagement::attachNoteToCommon(holdCodeTrans, salesParameters.MCRHoldCodeNoteType, "@RetailAudit:OrderHoldNotesTitle", strFmt("@RetailAudit:OrderHoldNotesDescription", _orderStatus.LastEditUser));
            }
        }
        
        RetailCustomerOrderHoldParameters args = RetailCustomerOrderHoldParameters::construct();
        args.salesId = _salesId;
        args.orderStatus = _orderStatus;
        args.transactionType = _transactionTable.type;

        // Add another order hold through extension as needed.
        if (RetailAsyncCustomerOrderExtensions::shouldInsertOrderHold(args))
        {
            RetailAsyncCustomerOrderExtensions::createOrderHold(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preventDuplicateAsyncOrderCreation</Name>
				<Source><![CDATA[
    private void preventDuplicateAsyncOrderCreation(RetailTransactionOrderStatus orderStatus, RetailTransactionTable transaction)
    {
        SalesTable salesTable;

        select firstonly RecId from salesTable where salesTable.SalesId == orderStatus.SalesId;

        if (salesTable.RecId
             && (transaction.type == RetailTransactionType::AsyncCustomerOrder
             || transaction.type == RetailTransactionType::PendingSalesOrder)
             && orderStatus.SalesId != "" && transaction.salesOrderId == "")
        {
            eventSource.EventWriteSynchronizeOrdersSetSalesIdForTransaction(salesTable.RecId, transaction.RecId, enum2Symbol(enumNum(RetailTransactionType), transaction.type));
                
            transaction.selectForUpdate(true);
            transaction.salesOrderId = orderStatus.SalesId;
            transaction.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>