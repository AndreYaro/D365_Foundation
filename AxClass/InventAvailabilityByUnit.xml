<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAvailabilityByUnit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventAvailabilityByUnit</c> class contains information about the availability
/// quantities for different units of measures.
/// </summary>
public class InventAvailabilityByUnit implements SysPackable
{
    InventIAvailability         inventAvailability;         // Do not refer explicitly to this field. Use this.parmInventAvailability
    PdsCWInventIAvailability    pdsCWInventAvailability;    // Do not refer explicitly to this field. Use this.parmPdsCWInventAvailability
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>availPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the the quantity available for physical reservation.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory and catch weight units.
    /// </returns>
    public PmfQtyDataCarrier availPhysical()
    {
        PmfQtyDataCarrier result = new PmfQtyDataCarrier();

        result.parmCwQty(this.parmPdsCWInventAvailability().pdsCWAvailPhysical());
        result.parmInventQty(this.parmInventAvailability().availPhysical());

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity available for reservation.
    /// </summary>
    /// <param name="_allowReserveOrdered">
    /// A value indicating wither the result should include
    /// the ordered goods that are available for reservation; optional.
    /// </param>
    /// <returns>
    /// The quantity in the inventory and catch weight units.
    /// </returns>
    public PmfQtyDataCarrier availReservation(NoYes _allowReserveOrdered = NoYes::Yes)
    {
        PmfQtyDataCarrier result = new PmfQtyDataCarrier();

        result.parmCwQty(this.parmPdsCWInventAvailability().pdsCWAvailReservation(_allowReserveOrdered));
        result.parmInventQty(this.parmInventAvailability().availReservation(_allowReserveOrdered));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total available quantity.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory and catch weight units.
    /// </returns>
    /// <remarks>
    /// The total available quantity is the total quantity available for reservation
    /// minus the quantity that is on order but not reserved.
    /// </remarks>
    public PmfQtyDataCarrier availTotal()
    {
        PmfQtyDataCarrier result = new PmfQtyDataCarrier();

        result.parmCwQty(this.parmPdsCWInventAvailability().pdsCWAvailTotal());
        result.parmInventQty(this.parmInventAvailability().availTotal());

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of the current object.
    /// </summary>
    /// <returns>
    /// A new <c>InventAvailabilityByUnit</c> object.
    /// </returns>
    public InventAvailabilityByUnit clone()
    {
        return InventAvailabilityByUnit::newFromParms(
            InventAvailabilitySnapshot::newFromAvailability(this.parmInventAvailability()),
            PdsCWInventAvailabilitySnapshot::newFromAvailability(this.parmPdsCWInventAvailability()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ordered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ordered quantity.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory and catch weight units.
    /// </returns>
    public PmfQtyDataCarrier ordered()
    {
        PmfQtyDataCarrier result = new PmfQtyDataCarrier();

        result.parmCwQty(this.parmPdsCWInventAvailability().pdsCWOrdered());
        result.parmInventQty(this.parmInventAvailability().ordered());

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderedSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity that was ordered
    /// but is not physically available in the warehouse yet.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory and catch weight units.
    /// </returns>
    /// <remarks>
    /// Goods that are in the Arrived status are not physically available
    /// in the warehouse yet so the result of this method is the Ordered + Arrived quantity.
    /// </remarks>
    public PmfQtyDataCarrier orderedSum()
    {
        PmfQtyDataCarrier result = new PmfQtyDataCarrier();

        result.parmCwQty(this.parmPdsCWInventAvailability().pdsCWOrderedSum());
        result.parmInventQty(this.parmInventAvailability().orderedSum());

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        InventAvailabilitySnapshot availabilitySnapshot = InventAvailabilitySnapshot::newFromAvailability(this.parmInventAvailability());
        PdsCWInventAvailabilitySnapshot cwAvailabilitySnapshot = PdsCWInventAvailabilitySnapshot::newFromAvailability(this.parmPdsCWInventAvailability());

        return [availabilitySnapshot.pack(), cwAvailabilitySnapshot.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventAvailability</Name>
				<Source><![CDATA[
    public InventIAvailability parmInventAvailability(InventIAvailability _inventAvailability = inventAvailability)
    {
        inventAvailability = _inventAvailability;

        if (inventAvailability == null)
        {
            inventAvailability = InventAvailabilitySnapshot::zero();
        }

        return inventAvailability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWInventAvailability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>pdsCWInventAvailability</c> parameter.
    /// </summary>
    /// <param name="_pdsCWInventAvailability">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>pdsCWInventAvailability</c> parameter.
    /// </returns>
    /// <remarks>
    /// This method returns an empty <c>PdsCWInventAvailabilitySnapshot</c> in case the <c>pdsCWInventAvailability</c> parameter was not set.
    /// </remarks>
    public PdsCWInventIAvailability parmPdsCWInventAvailability(PdsCWInventIAvailability _pdsCWInventAvailability = pdsCWInventAvailability)
    {
        pdsCWInventAvailability = _pdsCWInventAvailability;

        if (pdsCWInventAvailability == null)
        {
            pdsCWInventAvailability = PdsCWInventAvailabilitySnapshot::zero();
        }

        return pdsCWInventAvailability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity reserved against ordered on hand.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory and catch weight units.
    /// </returns>
    public PmfQtyDataCarrier reservOrdered()
    {
        PmfQtyDataCarrier result = new PmfQtyDataCarrier();

        result.parmCwQty(this.parmPdsCWInventAvailability().pdsCWReservOrdered());
        result.parmInventQty(this.parmInventAvailability().reservOrdered());

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity reserved against on hand that is physically available.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory and catch weight unit.
    /// </returns>
    public PmfQtyDataCarrier reservPhysical()
    {
        PmfQtyDataCarrier result = new PmfQtyDataCarrier();

        result.parmCwQty(this.parmPdsCWInventAvailability().pdsCWReservPhysical());
        result.parmInventQty(this.parmInventAvailability().reservPhysical());

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container   packedAvailability;
        container   packedCWAvailability;

        if (conLen(_packedClass) != 2)
        {
            return false;
        }

        [packedAvailability, packedCWAvailability] = _packedClass;

        this.parmInventAvailability(InventAvailabilitySnapshot::create(packedAvailability));
        this.parmPdsCWInventAvailability(PdsCWInventAvailabilitySnapshot::create(packedCWAvailability));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventAvailabilityByUnit construct()
    {
        return new InventAvailabilityByUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventAvailabilityByUnit</c> class.
    /// </summary>
    /// <param name="_packed">
    /// A container which holds a serialized <c>InventAvailabilityByUnit</c> class object.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventAvailabilityByUnit</c> class.
    /// </returns>
    public static InventAvailabilityByUnit create(container _packed)
    {
        InventAvailabilityByUnit availabilityByUnit = InventAvailabilityByUnit::construct();

        if (!availabilityByUnit.unpack(_packed))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return availabilityByUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventAvailabilityByUnit</c> class based on the
    /// specified <c>InventIAvailability</c> and <c>PdsCWInventIAvailability</c> instances.
    /// </summary>
    /// <param name="_inventAvailability">
    /// A class exposing availability information using the unified <c>InventIAvailability</c> interface.
    /// </param>
    /// <param name="_pdsCWInventAvailability">
    /// A class exposing availability information for catch weight items using the unified
    /// <c>PdsCWInventIAvailability</c> interface; optional.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventAvailabilityByUnit</c> class.
    /// </returns>
    public static InventAvailabilityByUnit newFromParms(
        InventIAvailability         _inventAvailability,
        PdsCWInventIAvailability    _pdsCWInventAvailability = null)
    {
        InventAvailabilityByUnit availabilityByUnit = InventAvailabilityByUnit::construct();

        availabilityByUnit.parmInventAvailability(_inventAvailability);
        availabilityByUnit.parmPdsCWInventAvailability(_pdsCWInventAvailability);

        return availabilityByUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>zero</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>InventAvailabilityByUnit</c> object where all quantities are zero.
    /// </summary>
    /// <returns>
    /// An <c>InventAvailabilityByUnit</c> object.
    /// </returns>
    public static InventAvailabilityByUnit zero()
    {
        return InventAvailabilityByUnit::construct();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
