<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendSettlementInterface</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// Base class providing an interface to common functionality applicable for 
/// tables mapped to the <c>CustVendSettlement</c> table map.
/// </summary>
[ExportInterfaceAttribute()]
public abstract class CustVendSettlementInterface
{
    protected CustVendSettlement custVendSettlement;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a buffer for a related <c>CustVendTrans</c> table.
    /// </summary>
    /// <returns>
    /// A buffer for specific table.
    /// </returns>
    public abstract CustVendTrans transBuffer()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>settlementBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a buffer for a specific table.
    /// </summary>
    /// <returns>
    /// A specific table buffer.
    /// </returns>
    public abstract CustVendSettlement settlementBuffer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a transaction for this settlement.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean parameter specifying whether the transaction must be selected for update.
    /// </param>
    /// <returns>
    /// A transaction for this settlement.
    /// </returns>
    public CustVendTrans custVendTrans(boolean _forUpdate = false)
    {
        CustVendTrans custVendTrans = this.transBuffer();
        custVendTrans.selectForUpdate(_forUpdate);

        select firstonly custVendTrans
            where custVendTrans.RecId == custVendSettlement.TransRecId;

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransOffset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an offset transaction for this settlement.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean parameter specifying whether the transaction must be selected for update.
    /// </param>
    /// <returns>
    /// An offset transaction for this settlement.
    /// </returns>
    public CustVendTrans custVendTransOffset(boolean _forUpdate = false)
    {
        CustVendTrans custVendTrans = this.transBuffer();
        custVendTrans.selectForUpdate(_forUpdate);

        select firstonly custVendTrans
            where custVendTrans.RecId == custVendSettlement.OffsetRecId;

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markThisAndRelatedOffsets</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and creates pending settlement reversals relating to the current map instance and its related
    ///    offset records.
    /// </summary>
    /// <param name="_specTransManager">
    ///    The current <c>SpecTransManager</c> instance that contains the marked settlements for reversal.
    /// </param>
    /// <param name="_currencyCode">
    ///    The currency that is used to create marked settlements for reversal.
    /// </param>
    public void markThisAndRelatedOffsets(SpecTransManager _specTransManager, CurrencyCode _currencyCode)
    {
        CustVendSettlement offset = this.settlementBuffer();

        // <GTH>
        CustVendTrans custVendTrans;
        // </GTH>

        while select crossCompany offset order by RecId desc
            where ((custVendSettlement.OffsetCompany == offset.TransCompany && custVendSettlement.OffsetRecId == offset.TransRecId) &&
                   (custVendSettlement.TransCompany == offset.OffsetCompany && custVendSettlement.TransRecId == offset.OffsetRecId)) ||
                  ((custVendSettlement.TransCompany == offset.TransCompany && custVendSettlement.TransRecId == offset.TransRecId) &&
                   (custVendSettlement.OffsetCompany == offset.OffsetCompany && custVendSettlement.OffsetRecId == offset.OffsetRecId)) &&
                  (offset.CanBeReversed == true) &&
                  // <GEERU>
                  (offset.TransDate == custVendSettlement.TransDate || ! SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                  // </GEERU>
        {
            if (!_specTransManager.exist(offset.DataAreaId, offset.TableId, offset.RecId))
            {
                _specTransManager.insert(offset.DataAreaId, offset.TableId, offset.RecId, offset.SettleAmountCur, _currencyCode);

                custVendTrans = offset.custVendSettlementInterface().custVendTrans();
                offset.CustVendSettlement::markRelatedTaxWithholdVoucherByLine(
                    _specTransManager,
                    custVendTrans.Voucher,
                    custVendTrans.TransDate,
                    offset.OffsetTransVoucher);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markRelatedTaxWithholdVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks <C>CustVendSettlement</C> that relates to the specified withholding tax voucher.
    /// </summary>
    /// <param name="_specTransManager">
    /// The current <c>SpecTransManager</c> instance that contains the marked settlements for reversal.
    /// </param>
    /// <param name="_voucher">
    /// Withholding tax voucher number.
    /// </param>
    /// <param name="_voucherTransDate">
    /// Withholding tax voucher date.
    /// </param>
    [SysObsoleteAttribute("This method is not called, please call markRelatedTaxWithholdVoucherByLine method", true, 30\5\2022)]
    public void markRelatedTaxWithholdVoucher(SpecTransManager _specTransManager,
        Voucher _voucher,
        TransDate _voucherTransDate)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>markRelatedTaxWithholdVoucherByLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks <C>CustVendSettlement</C> that relates to the specified withholding tax voucher by invoice journal.
    /// </summary>
    /// <param name="_specTransManager">
    /// The current <c>SpecTransManager</c> instance that contains the marked settlements for reversal.
    /// </param>
    /// <param name="_voucher">
    /// Withholding tax voucher number.
    /// </param>
    /// <param name="_voucherTransDate">
    /// Withholding tax voucher date.
    /// </param>
    /// <param name="_offsetTransVoucher">
    /// Withholding tax OffSet Voucher number.
    /// </param>
    public void markRelatedTaxWithholdVoucherByLine(
        SpecTransManager _specTransManager,
        Voucher _voucher,
        TransDate _voucherTransDate,
        Voucher _offsetTransVoucher)
    {
        LedgerTransVoucherLink ledgerTransVoucherLink;

        CustVendSettlement custVendSettlementLocal = this.settlementBuffer();
        CustVendTrans custVendTrans = this.transBuffer();

        SubledgerVoucherGeneralJournalEntry voucherLink;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;

        RecId voucherGroupId = LedgerTransVoucherLink::findVoucherGroupId(_voucher, _voucherTransDate);

        if (voucherGroupId)
        {
            while select custVendSettlementLocal
                join CurrencyCode from custVendTrans
                    where custVendSettlementLocal.TransRecId == custVendTrans.RecId
                        && custVendSettlementLocal.AccountNum == custVendTrans.AccountNum
                        && (!_offsetTransVoucher || custVendSettlementLocal.OffsetTransVoucher == _offsetTransVoucher)
                join TableId from ledgerTransVoucherLink
                    where ledgerTransVoucherLink.VoucherGroupId == voucherGroupId
                        && custVendTrans.Voucher == ledgerTransVoucherLink.Voucher
                        && custVendTrans.TransDate == ledgerTransVoucherLink.TransDate
                join TableId from  voucherLink
                    where voucherLink.Voucher == ledgerTransVoucherLink.Voucher
                        && voucherLink.AccountingDate == ledgerTransVoucherLink.TransDate
                join TableId from generalJournalEntry
                    where generalJournalEntry.RecId == voucherLink.GeneralJournalEntry
                join TableId from generalJournalAccountEntry
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                        && generalJournalAccountEntry.PostingType == LedgerPostingType::TaxWithhold
            {
                custVendSettlementLocal.custVendSettlementInterface().markAllRelatedTaxWithholdOffsets(_specTransManager, custVendSettlementLocal, custVendTrans.CurrencyCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAllRelatedTaxWithholdOffsets</Name>
				<Source><![CDATA[
    private void markAllRelatedTaxWithholdOffsets(SpecTransManager _specTransManager, CustVendSettlement _custVendSettlement, CurrencyCode _currencyCode)
    {
        CustVendSettlement offset = this.settlementBuffer();

        select firstonly crossCompany RecId, DataAreaId, SettleAmountCur from offset
            where offset.TransCompany == _custVendSettlement.OffsetCompany
                && offset.TransRecId == _custVendSettlement.OffsetRecId
                && offset.OffsetCompany == _custVendSettlement.TransCompany
                && offset.OffsetRecId == _custVendSettlement.TransRecId
                && offset.CanBeReversed == true
                && (offset.TransDate == custVendSettlement.TransDate || !SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]));

        if (offset.RecId)
        {
            if (!_specTransManager.exist(_custVendSettlement.DataAreaId, _custVendSettlement.TableId, _custVendSettlement.RecId))
            {
                _specTransManager.insert(
                    _custVendSettlement.DataAreaId,
                    _custVendSettlement.TableId,
                    _custVendSettlement.RecId,
                    _custVendSettlement.SettleAmountCur,
                    _currencyCode);
            }

            if (!_specTransManager.exist(offset.DataAreaId, offset.TableId, offset.RecId))
            {
                _specTransManager.insert(
                    offset.DataAreaId,
                    offset.TableId,
                    offset.RecId,
                    offset.SettleAmountCur,
                    _currencyCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkThisAndRelatedOffsets</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and removes pending settlement reversals that relate to the current map instance and its
    ///    related offset records.
    /// </summary>
    /// <param name="_specTransManager">
    ///    The current <c>SpecTransManager</c> instance that contains marked settlements.
    /// </param>
    public void unmarkThisAndRelatedOffsets(SpecTransManager _specTransManager)
    {
        CustVendSettlement offset = this.settlementBuffer();

        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        // <GTH>
        CustVendTrans custVendTrans;
        // </GTH>

        while select crossCompany offset
            where ((custVendSettlement.OffsetCompany == offset.TransCompany && custVendSettlement.OffsetRecId == offset.TransRecId) &&
                   (custVendSettlement.TransCompany == offset.OffsetCompany && custVendSettlement.TransRecId == offset.OffsetRecId)) ||
                  ((custVendSettlement.TransCompany == offset.TransCompany && custVendSettlement.TransRecId == offset.TransRecId) &&
                   (custVendSettlement.OffsetCompany == offset.OffsetCompany && custVendSettlement.OffsetRecId == offset.OffsetRecId)) &&
                  (offset.CanBeReversed == true) &&
                  // <GEERU>
                  (offset.TransDate == custVendSettlement.TransDate || ! SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                  // </GEERU>
        {
            // Only ummark the relatedTaxWithholdVoucher when unmarking an marked trans to avoid dead loop.
            if (_specTransManager.exist(offset.DataAreaId, offset.TableId, offset.RecId) == true)
            {
                _specTransManager.delete(offset.DataAreaId, offset.TableId, offset.RecId);

                custVendTrans = offset.custVendSettlementInterface().custVendTrans();
                offset.custVendSettlementInterface().unmarkRelatedTaxWithholdVoucherByLine(
                    _specTransManager,
                    custVendTrans.Voucher,
                    custVendTrans.TransDate,
                    offset.OffsetTransVoucher);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkRelatedTaxWithholdVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unmarks <C>CustVendSettlement</C> that relates to the specified withholding tax voucher.
    /// </summary>
    /// <param name="_specTransManager">
    /// The current <c>SpecTransManager</c> instance that contains the marked settlements for reversal.
    /// </param>
    /// <param name="_voucher">
    /// Withholding tax voucher number.
    /// </param>
    /// <param name="_voucherTransDate">
    /// Withholding tax voucher date.
    /// </param>
    [SysObsoleteAttribute("This method is not called, please call unmarkRelatedTaxWithholdVoucherByLine method", true, 30\5\2022)]
    public void unmarkRelatedTaxWithholdVoucher(SpecTransManager _specTransManager,
        Voucher _voucher,
        TransDate _voucherTransDate)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkRelatedTaxWithholdVoucherByLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unmarks <C>CustVendSettlement</C> that relates to the specified withholding tax voucher by invoice journal.
    /// </summary>
    /// <param name="_specTransManager">
    /// The current <c>SpecTransManager</c> instance that contains the marked settlements for reversal.
    /// </param>
    /// <param name="_voucher">
    /// Withholding tax voucher number.
    /// </param>
    /// <param name="_voucherTransDate">
    /// Withholding tax voucher date.
    /// </param>
    /// <param name="_offsetTransVoucher">
    /// Withholding tax OffSet Voucher number.
    /// </param>
    public void unmarkRelatedTaxWithholdVoucherByLine(
        SpecTransManager _specTransManager,
        Voucher _voucher,
        TransDate _voucherTransDate,
        Voucher _offsetTransVoucher)
    {
        CustVendSettlement custVendSettlementLocal = this.settlementBuffer();
        CustVendTrans custVendTrans = this.transBuffer();

        LedgerTransVoucherLink ledgerTransVoucherLink;
        SubledgerVoucherGeneralJournalEntry voucherLink;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;

        RecId voucherGroupId = LedgerTransVoucherLink::findVoucherGroupId(_voucher, _voucherTransDate);

        if (voucherGroupId)
        {
            while select custVendSettlementLocal
                join TableId from custVendTrans
                    where custVendSettlementLocal.TransRecId == custVendTrans.RecId
                        && custVendSettlementLocal.AccountNum == custVendTrans.AccountNum
                        && (!_offsetTransVoucher || custVendSettlementLocal.OffsetTransVoucher == _offsetTransVoucher)
                join TableId from ledgerTransVoucherLink
                    where ledgerTransVoucherLink.VoucherGroupId == voucherGroupId
                        && custVendTrans.Voucher == ledgerTransVoucherLink.Voucher
                        && custVendTrans.TransDate == ledgerTransVoucherLink.TransDate
                join TableId from voucherLink
                    where voucherLink.Voucher == ledgerTransVoucherLink.Voucher
                        && voucherLink.AccountingDate == ledgerTransVoucherLink.TransDate
                join TableId from generalJournalEntry
                    where generalJournalEntry.RecId == voucherLink.GeneralJournalEntry
                join TableId from generalJournalAccountEntry
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                        && generalJournalAccountEntry.PostingType == LedgerPostingType::TaxWithhold
            {
                custVendSettlementLocal.custVendSettlementInterface().unmarkAllRelatedTaxWithholdOffsets(_specTransManager, custVendSettlementLocal);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkAllRelatedTaxWithholdOffsets</Name>
				<Source><![CDATA[
    private void unmarkAllRelatedTaxWithholdOffsets(SpecTransManager _specTransManager, CustVendSettlement _custVendSettlement)
    {
        CustVendSettlement offset = this.settlementBuffer();

        select firstonly crossCompany RecId, DataAreaId from offset
            where offset.TransCompany == _custVendSettlement.OffsetCompany
                && offset.TransRecId == _custVendSettlement.OffsetRecId
                && offset.OffsetCompany == _custVendSettlement.TransCompany
                && offset.OffsetRecId == _custVendSettlement.TransRecId
                && offset.CanBeReversed == true
                && (offset.TransDate == custVendSettlement.TransDate
                    || !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]));

        if (offset.RecId)
        {
            if (_specTransManager.exist(_custVendSettlement.DataAreaId, _custVendSettlement.TableId, _custVendSettlement.RecId))
            {
                _specTransManager.delete(
                    _custVendSettlement.DataAreaId,
                    _custVendSettlement.TableId,
                    _custVendSettlement.RecId);
            }

            if (_specTransManager.exist(offset.DataAreaId, offset.TableId, offset.RecId))
            {
                _specTransManager.delete(
                    offset.DataAreaId,
                    offset.TableId,
                    offset.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a reverse date.
    /// </summary>
    /// <returns>
    /// Reverse date.
    /// </returns>
    public TransDate reverseDate_RU()
    {
        TransDate reverseDate = custVendSettlement.TransDate;
        CustVendSettlement settlementMain = this.settlementBuffer();

        if (custVendSettlement.ReverseTrans_RU)
        {
            select firstonly TransDate from settlementMain
                where settlementMain.RecId == custVendSettlement.ReversedRecId_RU;

            reverseDate = settlementMain.TransDate;
        }

        return reverseDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes current buffer from the <c>CustVendTrans</c> record.
    /// </summary>
    /// <param name = "_custVendTrans">
    /// The <c>CustVendTrans</c> record.
    /// </param>
    public void initFromCustVendTrans(CustVendTrans _custVendTrans)
    {
        custVendSettlement.AccountNum = _custVendTrans.AccountNum;
        custVendSettlement.OffsetTransVoucher = _custVendTrans.LastSettleVoucher;
        custVendSettlement.TransDate = max(_custVendTrans.TransDate, _custVendTrans.LastSettleDate);
        custVendSettlement.DueDate = custVendSettlement.TransDate;
        custVendSettlement.TransRecId = _custVendTrans.RecId;
        custVendSettlement.TransCompany = _custVendTrans.DataAreaId;
        custVendSettlement.SettleAmountMST = _custVendTrans.SettleAmountMST;
        custVendSettlement.SettleAmountCur = _custVendTrans.SettleAmountCur;
        custVendSettlement.SettleAmountReporting = _custVendTrans.SettleAmountReporting;
        custVendSettlement.OffsetRecId = _custVendTrans.OffsetRecId;
        custVendSettlement.OffsetCompany = _custVendTrans.LastSettleCompany;
        custVendSettlement.OffsetAccountNum = _custVendTrans.LastSettleAccountNum;
        custVendSettlement.SettlementVoucher = _custVendTrans.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the retrieved table buffer from the query for the concrete table represented by the map.
    /// </summary>
    /// <param name="_queryRun">
    ///    The query that contains the concrete table.
    /// </param>
    /// <returns>
    ///    The retrieved table buffer from the query for the concrete table represented by the map.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The map has not been associated with one of the concrete tables represented by the map.
    /// </exception>
    public CustVendSettlement getFromQuery(QueryRun _queryRun)
    {
        if (!custVendSettlement.TableId)
        {
            throw error(Error::missingRecord(funcName()));
        }

        CustVendSettlement custVendSettlementLocal = _queryRun.get(custVendSettlement.TableId);

        return custVendSettlementLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChangedInQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the concrete table represented by the map has changed in the query.
    /// </summary>
    /// <param name="_queryRun">
    ///    The query that contains the concrete table.
    /// </param>
    /// <returns>
    ///    true if the concrete table represented by the map has changed in the query; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The map has not been associated with one of the concrete tables represented by the map.
    /// </exception>
    public boolean hasChangedInQuery(QueryRun _queryRun)
    {
        if (!custVendSettlement.TableId)
        {
            throw error(Error::missingRecord(funcName()));
        }

        boolean hasTransactionChanged = _queryRun.changed(custVendSettlement.TableId);

        return hasTransactionChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCustVendSettlement</Name>
				<Source><![CDATA[
    private void initializeCustVendSettlement(CustVendSettlement _custVendSettlement)
    {
        custVendSettlement = _custVendSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReversalSettlementDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the reversal settlement date is on or after the latest settlement date
    /// for the given spec table.
    /// </summary>
    /// <param name = "_specTable">The spec table.</param>
    /// <param name = "_reversalSettlementDate">The reversal setttlement date.</param>
    /// <returns>true if the reversal settlement date is on or after the latest settlement date; otherwise, false.</returns>
    internal boolean validateReversalSettlementDate(Common _specTable, TransDate _reversalSettlementDate)
    {
        boolean isValid = true;

        TransDate latestSettlementDate = this.findLatestReversalSettlementDate(_specTable);

        if (latestSettlementDate > _reversalSettlementDate)
        {
            isValid = checkFailed(strFmt("@SYS117111", date2StrUsr(_reversalSettlementDate, DateFlags::FormatAll), date2StrUsr(latestSettlementDate, DateFlags::FormatAll)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLatestReversalSettlementDate</Name>
				<Source><![CDATA[
    private TransDate findLatestReversalSettlementDate(Common _specTable)
    {
        SpecTrans specTrans;

        CustVendSettlement latestCustVendSettlement = this.settlementBuffer();

        select firstonly crosscompany TransDate from latestCustVendSettlement
            order by latestCustVendSettlement.TransDate desc
            exists join specTrans
                where (specTrans.RefRecId == latestCustVendSettlement.RecId
                    && specTrans.RefTableId == latestCustVendSettlement.TableId)
                    && (specTrans.SpecCompany == _specTable.company()
                    && specTrans.SpecRecId == _specTable.RecId
                    && specTrans.SpecTableId == _specTable.TableId);

        return latestCustVendSettlement.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>CustVendSettlementInterface</c> instance based on the provided table name.
    /// </summary>
    /// <param name = "_custVendSettlement">
    /// The <c>CustVendSettlement</c> record to create a <c>CustVendSettlementInterface</c> object for.
    /// </param>
    /// <returns>
    /// An instantiated <c>CustVendSettlementInterface</c> object. The object is not initialized.
    /// </returns>
    public static CustVendSettlementInterface createInstance(CustVendSettlement _custVendSettlement)
    {
        TableName tableName = tableId2Name(_custVendSettlement.tableId);

        SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();
        metadataCollection.SetManagedValue(classStr(CustVendSettlementInterface), tableName);
        CustVendSettlementInterface instance = SysPluginFactory::Instance(identifierStr(Dynamics.AX.Application), classStr(CustVendSettlementInterface), metadataCollection); 

        if (!instance)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        instance.initializeCustVendSettlement(_custVendSettlement);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmptyTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an empty table buffer for the concrete table represented by the map.
    /// </summary>
    /// <param name="_moduleCustVend">
    ///    The module consuming the map.
    /// </param>
    /// <returns>
    ///    An empty table buffer for the concrete table represented by the map.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The map has not been associated with one of the concrete tables represented by the map.
    /// </exception>
    public static CustVendSettlement getEmptyTableBuffer(ModuleCustVend _moduleCustVend)
    {
        CustVendSettlement custVendSettlement;

        if (_moduleCustVend == ModuleCustVend::Cust)
        {
            CustSettlement custSettlement;
            custVendSettlement = custSettlement;
        }
        else
        {
            VendSettlement vendSettlement;
            custVendSettlement = vendSettlement;
        }

        return custVendSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the <c>CustVendSettlement</c> with the given RecId.
    /// </summary>
    /// <param name = "_module">
    ///     The module the <c>CustVendSettlement</c> record is in.
    /// </param>
    /// <param name = "_recId">
    ///     The RecId to find.
    /// </param>
    /// <param name = "_forupdate">
    ///     If true, marks the returned <c>CustVendSettlement</c> for update (optional).
    /// </param>
    /// <returns>
    ///     The <c>CustVendSettlement</c> record with the given RecId.
    /// </returns>
    public static CustVendSettlement findByModule(ModuleCustVend _module, RecId _recId, boolean _forupdate = false)
    {
        CustVendSettlement custVendSettlement;

        switch (_module)
        {
            case ModuleCustVend::Cust:
                custVendSettlement = CustSettlement::find(_recId, _forupdate);
                break;

            case ModuleCustVend::Vend:
                custVendSettlement = VendSettlement::find(_recId, _forupdate);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return custVendSettlement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>