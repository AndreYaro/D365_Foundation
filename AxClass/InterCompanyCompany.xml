<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyCompany</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InterCompanyCompany</c> class creates a set of companies that are based on active
///    intercompany trading relations for the company from which it is called.
/// </summary>
/// <remarks>
///    The map is used by the intercompany master scheduling, to decide which companies to include in the
///    scheduling.
/// </remarks>
class InterCompanyCompany
{
    Set                     companySet;
    Set                     companySetToInvestigate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findRelatedCompanies</Name>
				<Source><![CDATA[
        private void findRelatedCompanies()
    {
        this.relatedVendorCompaniesComplete();
        this.relatedCustomerCompaniesComplete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        private void init()
    {
        companySet              = new Set(Types::String);
        companySetToInvestigate = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanySet</Name>
				<Source><![CDATA[
        protected Set parmCompanySet(Set _companySet = companySet)
    {
        companySet = _companySet;

        return companySet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedCustomerCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds companies that are related through customer records for the current company
    /// </summary>
    private void relatedCustomerCompanies()
    {
        InterCompanyTradingPartner  interCompanyTradingPartner;
        InterCompanyTradingPartner  interCompanyTradingPartnerRelation;
        InterCompanyTradingRelation interCompanyTradingRelation;

        if (companySetToInvestigate.in(curext()))
        {
            companySetToInvestigate.remove(curext());
        }

        while select RecId from interCompanyTradingPartner
            where interCompanyTradingPartner.CustomerDataAreaId == curext()
            join RecId from interCompanyTradingRelation
                where interCompanyTradingRelation.InterCompanyTradingCustomer == interCompanyTradingPartner.RecId
                &&    interCompanyTradingRelation.Active                      == true
                join RecId, VendorDataAreaId from interCompanyTradingPartnerRelation
                    where interCompanyTradingPartnerRelation.RecId            == interCompanyTradingRelation.InterCompanyTradingVendor
                    &&    interCompanyTradingPartnerRelation.VendorDataAreaId != curext()
        {
            if (!companySet.in(interCompanyTradingPartnerRelation.VendorDataAreaId))
            {
                companySetToInvestigate.add(interCompanyTradingPartnerRelation.VendorDataAreaId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedCustomerCompaniesComplete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find companies that are related through customer records for the originating company
    /// </summary>
    private void relatedCustomerCompaniesComplete()
    {
        SetIterator setIterator;
        CompanyId   companyId;

        companySetToInvestigate.add(curext());

        setIterator = new SetIterator(companySetToInvestigate);
        setIterator.begin();

        while (setIterator.more())
        {
            companyId   = setIterator.value();
            companySet.add(companyId);

            changecompany(companyId)
            {
                setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                this.relatedCustomerCompanies();
            }

            setIterator = new SetIterator(companySetToInvestigate);
            setIterator.begin();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedVendorCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find companies that are related through vendor records for the current company
    /// </summary>
    private void relatedVendorCompanies()
    {
        InterCompanyTradingPartner  interCompanyTradingPartner;
        InterCompanyTradingPartner  interCompanyTradingPartnerRelation;
        InterCompanyTradingRelation interCompanyTradingRelation;

        if (companySetToInvestigate.in(curext()))
        {
            companySetToInvestigate.remove(curext());
        }

        while select RecId from interCompanyTradingPartner
            where interCompanyTradingPartner.VendorDataAreaId == curext()
            join RecId from interCompanyTradingRelation
                where interCompanyTradingRelation.InterCompanyTradingVendor     == interCompanyTradingPartner.RecId
                &&    interCompanyTradingRelation.Active                        == true
                join RecId, CustomerDataAreaId from interCompanyTradingPartnerRelation
                    where interCompanyTradingPartnerRelation.RecId              == interCompanyTradingRelation.InterCompanyTradingCustomer
                    &&    interCompanyTradingPartnerRelation.CustomerDataAreaId != curext()
        {
            if (!companySet.in(interCompanyTradingPartnerRelation.CustomerDataAreaId))
            {
                companySetToInvestigate.add(interCompanyTradingPartnerRelation.CustomerDataAreaId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedVendorCompaniesComplete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find companies that are related through vendor records for the originating company
    /// </summary>
    private void relatedVendorCompaniesComplete()
    {
        SetIterator setIterator;
        CompanyId   companyId;

        companySetToInvestigate.add(curext());

        setIterator = new SetIterator(companySetToInvestigate);
        setIterator.begin();

        while (setIterator.more())
        {
            companyId   = setIterator.value();
            companySet.add(companyId);

            changecompany(companyId)
            {
                setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                this.relatedVendorCompanies();
            }

            setIterator = new SetIterator(companySetToInvestigate);
            setIterator.begin();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static InterCompanyCompany construct()
    {
        return new InterCompanyCompany();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyRelatedCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a set of companies that are based on active intercompany trading relations for the company
    ///    from which it is called.
    /// </summary>
    /// <returns>
    ///    A set of companies.
    /// </returns>
    static public Set interCompanyRelatedCompanies()
    {
        InterCompanyCompany     interCompanyCompany;

        interCompanyCompany = InterCompanyCompany::construct();
        interCompanyCompany.findRelatedCompanies();

        return interCompanyCompany.parmCompanySet();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>