<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MultipleTaxIdReportingHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper for reporting with enabled Multiple Tax Id feature.
/// </summary>
internal final class MultipleTaxIdReportingHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxRegistrationNumberFromTaxPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Tax Registration Number from Tax Period.
    /// </summary>
    /// <param name="_taxPeriod">
    /// The Tax Period.
    /// </param>
    /// <returns>
    /// Returns Tax Registration Number.
    /// </returns>
    public static str getTaxRegistrationNumberFromTaxPeriod(TaxPeriod _taxPeriod)
    {
        TaxPeriodHead taxPeriodHead;
        TaxRegistration taxRegistration;

        select firstonly RegistrationNumber from taxRegistration
        join RecId from taxPeriodHead
            where taxPeriodHead.TaxID == taxRegistration.RecId
                && taxPeriodHead.TaxPeriod == _taxPeriod;

        return taxRegistration.RegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationRecIdFromTaxPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Tax Registration RecId from Tax Period.
    /// </summary>
    /// <param name="_taxPeriod">
    /// The Tax Period.
    /// </param>
    /// <returns>
    /// Returns Tax Registration RecId.
    /// </returns>
    public static RecId getTaxRegistrationRecIdFromTaxPeriod(TaxPeriod _taxPeriod)
    {
        TaxPeriodHead taxPeriodHead;

        if (_taxPeriod)
        {
            select firstonly TaxID from taxPeriodHead
               where taxPeriodHead.TaxPeriod == _taxPeriod;
        }

        return taxPeriodHead.TaxID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationRecIdFromTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Tax Registration RecId from Tax Code.
    /// </summary>
    /// <param name="_taxCode">
    /// The Tax Code.
    /// </param>
    /// <returns>
    /// Tax Registration RecId.
    /// </returns>
    public static RecId getTaxRegistrationRecIdFromTaxCode(TaxCode _taxCode)
    {
        TaxPeriodHead taxPeriodHead;
        TaxTable taxTable;

        if (_taxCode)
        {
            select firstonly TaxID from taxPeriodHead
            exists join taxTable
                where taxTable.TaxPeriod == taxPeriodHead.TaxPeriod
                    && taxTable.TaxCode == _taxCode;
        }

        return taxPeriodHead.TaxID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryRegionIDFromTaxRegistrationRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Country Region ID from Tax Registration RecId.
    /// </summary>
    /// <param name="_taxRegistrationRecId">
    /// The Tax Registration RecId.
    /// </param>
    /// <returns>
    /// Returns Country Region ID.
    /// </returns>
    public static LogisticsAddressCountryRegionId getCountryRegionIDFromTaxRegistrationRecId(RecId _taxRegistrationRecId)
    {
        TaxRegistration taxRegistration;
        TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;

        select firstonly CountryRegionId from taxRegistrationTypeApplicabilityRule
        join RecId from taxRegistration
            where taxRegistrationTypeApplicabilityRule.RecId == taxRegistration.TaxRegistrationTypeApplicabilityRule
                && taxRegistration.RecId == _taxRegistrationRecId;

        return taxRegistrationTypeApplicabilityRule.CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryRegionIDFromTaxRegNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Country Region ID from Tax Registration Number.
    /// </summary>
    /// <param name="_taxRegistrationNumber">
    /// The Tax Registration Number.
    /// </param>
    /// <returns>
    /// Returns Country Region ID.
    /// </returns>
    public static LogisticsAddressCountryRegionId getCountryRegionIDFromTaxRegNumber(TaxRegistrationNumber _taxRegistrationNumber)
    {
        TaxRegistration taxRegistration;
        TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;

        select CountryRegionId from taxRegistrationTypeApplicabilityRule
        join RecId from taxRegistration
            where taxRegistrationTypeApplicabilityRule.RecId == taxRegistration.TaxRegistrationTypeApplicabilityRule
                && taxRegistration.RegistrationNumber == _taxRegistrationNumber;
  
        return taxRegistrationTypeApplicabilityRule.CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumberForTypeOnDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax registration number of given type for tax registration.
    /// </summary>
    /// <param name = "_taxRegistrationRecId">
    /// Record id of tax registration.
    /// </param>
    /// <param name = "_type">
    /// Tax registration number type to be searched for.
    /// </param>
    /// <returns>
    /// The tax registration number of given type that exist on date for tax registration address; if not exist it returns blank. 
    /// </returns>
    public static TaxRegistrationNumber getTaxRegistrationNumberForTypeOnDate(TaxRegistrationRecId _taxRegistrationRecId, TaxRegistrationTypesList _type)
    {
        TaxRegistration taxRegistration = TaxRegistration::find(_taxRegistrationRecId);
        DirPartyLocation partyLocation = DirPartyLocation::findRec(taxRegistration.DirPartyLocation);
        LogisticsPostalAddress logisticsPostalAddress = LogisticsPostalAddress::findByLocation(partyLocation.Location);
        TaxRegistrationLegislationTypes legislationTypesUID = TaxRegistrationLegislationTypes::getTaxRegistrationTypeApplicabilityRule(_type, DirPartyBaseType::Organization, logisticsPostalAddress.CountryRegionId);
        TaxRegistration taxRegistrationUID = TaxRegistration::findDirPartyLocationOnDate(partyLocation.RecId, legislationTypesUID.TaxRegistrationTypeApplicabilityRule);

        return taxRegistrationUID.RegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>LogisticsPostalAddress</c> by dirparty location of tax registration.
    /// </summary>
    /// <param name = "_taxRegistrationRecId">
    /// Tax registration number type to be searched for.
    /// </param>
    /// <returns>
    /// Logistics postal address for which the given tax registration number is specified.
    /// </returns>
    [Hookable(false)]
    public static LogisticsPostalAddress getTaxRegistrationPostalAddress(TaxRegistrationRecId _taxRegistrationRecId)
    {
        TaxRegistration taxRegistration = TaxRegistration::find(_taxRegistrationRecId);
        DirPartyLocation partyLocation = DirPartyLocation::findRec(taxRegistration.DirPartyLocation);
        return LogisticsPostalAddress::findByLocation(partyLocation.Location);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirPartyTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>DirPartyTable</c> by Tax Registration Number.
    /// </summary>
    /// <param name = "_taxRegistrationRecId">
    /// Tax registration number type to be searched for.
    /// </param>
    /// <returns>
    /// Global address book for which the given tax registration number is specified.
    /// </returns>
    [Hookable(false)]
    public static DirPartyTable getDirPartyTable(TaxRegistrationRecId _taxRegistrationRecId)
    {
        TaxRegistration taxRegistration = TaxRegistration::find(_taxRegistrationRecId);
        DirPartyLocation partyLocation = DirPartyLocation::findRec(taxRegistration.DirPartyLocation);
        return DirPartyTable::findRec(partyLocation.Party);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultipleTaxIdEnabledForScope</Name>
				<Source><![CDATA[
    internal static boolean isMultipleTaxIdEnabledForScope(MultipleTaxIdScope _multipleTaxIdScope)
    {
        return _multipleTaxIdScope == MultipleTaxIdScope::None
            || (_multipleTaxIdScope == MultipleTaxIdScope::VATDeclaration
                && TaxIntegrationUtils::isMultipleTaxIdEnabledForVATDeclarations())
            || (_multipleTaxIdScope == MultipleTaxIdScope::EUSalesList
                && TaxIntegrationUtils::isMultipleTaxIdEnabledForEUSalesList())
            || (_multipleTaxIdScope == MultipleTaxIdScope::Intrastat
                && TaxIntegrationUtils::isMultipleTaxIdEnabledForIntrastat());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAddressInCountryRegion</Name>
				<Source><![CDATA[
    internal static boolean existsAddressInCountryRegion(
        container _isoCountryCodes,
        MultipleTaxIdScope _multipleTaxIdScope = MultipleTaxIdScope::None)
    {
        boolean ret = false;

        if (MultipleTaxIdReportingHelper::isMultipleTaxIdEnabledForScope(_multipleTaxIdScope))
        {
            utcdatetime minDateTime = DateTimeUtil::minValue();
            utcdatetime maxDateTime = DateTimeUtil::maxValue();

            DirPartyPostalAddressView dirPartyPostalAddressView;
            while select validtimestate(minDateTime, maxDateTime) ISOCode from DirPartyPostalAddressView
                group by ISOCode
                where DirPartyPostalAddressView.Party == CompanyInfo::find().RecId
            {
                if (conFind(_isoCountryCodes, dirPartyPostalAddressView.ISOcode))
                {
                    ret = true;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLegalEntityOrAddressInCountryRegion</Name>
				<Source><![CDATA[
    internal static boolean isLegalEntityOrAddressInCountryRegion(
        container _isoCountryCodes,
        MultipleTaxIdScope _multipleTaxIdScope = MultipleTaxIdScope::None)
    {
        return (SysCountryRegionCode::isLegalEntityInCountryRegion(_isoCountryCodes)
            && !TaxIntegrationUtils::isMultipleTaxIdEnabled())
            || MultipleTaxIdReportingHelper::existsAddressInCountryRegion(_isoCountryCodes, _multipleTaxIdScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxRegistrationRecIdInCountryRegion</Name>
				<Source><![CDATA[
    internal static boolean isTaxRegistrationRecIdInCountryRegion(
        TaxRegistrationRecId _taxRegistrationRecId,
        container _isoCountryCodes,
        MultipleTaxIdScope _multipleTaxIdScope = MultipleTaxIdScope::None)
    {
        return _taxRegistrationRecId
            && MultipleTaxIdReportingHelper::isMultipleTaxIdEnabledForScope(_multipleTaxIdScope)
            && conFind(
                _isoCountryCodes,
                LogisticsAddressCountryRegion::find(
                    MultipleTaxIdReportingHelper::getCountryRegionIDFromTaxRegistrationRecId(
                        _taxRegistrationRecId)).ISOcode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLegalEntityOrTaxRegistrationRecIdInCountryRegion</Name>
				<Source><![CDATA[
    internal static boolean isLegalEntityOrTaxRegistrationRecIdInCountryRegion(
        TaxRegistrationRecId _taxRegistrationRecId,
        container _isoCountryCodes,
        MultipleTaxIdScope _multipleTaxIdScope = MultipleTaxIdScope::None)
    {
        return (SysCountryRegionCode::isLegalEntityInCountryRegion(_isoCountryCodes)
            && !TaxIntegrationUtils::isMultipleTaxIdEnabled())
            || MultipleTaxIdReportingHelper::isTaxRegistrationRecIdInCountryRegion(
                _taxRegistrationRecId,
                _isoCountryCodes,
                _multipleTaxIdScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxCodeInCountryRegion</Name>
				<Source><![CDATA[
    internal static boolean isTaxCodeInCountryRegion(
        TaxCode _taxCode,
        container _isoCountryCodes,
        MultipleTaxIdScope _multipleTaxIdScope = MultipleTaxIdScope::None)
    {
        return _taxCode
            ? MultipleTaxIdReportingHelper::isTaxRegistrationRecIdInCountryRegion(
                MultipleTaxIdReportingHelper::getTaxRegistrationRecIdFromTaxCode(_taxCode),
                _isoCountryCodes,
                _multipleTaxIdScope)
            : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLegalEntityOrTaxCodeInCountryRegion</Name>
				<Source><![CDATA[
    internal static boolean isLegalEntityOrTaxCodeInCountryRegion(
        TaxCode _taxCode,
        container _isoCountryCodes,
        MultipleTaxIdScope _multipleTaxIdScope = MultipleTaxIdScope::None)
    {
        return (SysCountryRegionCode::isLegalEntityInCountryRegion(_isoCountryCodes)
            && !TaxIntegrationUtils::isMultipleTaxIdEnabled())
            || MultipleTaxIdReportingHelper::isTaxCodeInCountryRegion(
                _taxCode,
                _isoCountryCodes,
                _multipleTaxIdScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxPeriodInCountryRegion</Name>
				<Source><![CDATA[
    internal static boolean isTaxPeriodInCountryRegion(
        TaxPeriod _taxPeriod,
        container _isoCountryCodes,
        MultipleTaxIdScope _multipleTaxIdScope = MultipleTaxIdScope::None)
    {
        return _taxPeriod
            ? MultipleTaxIdReportingHelper::isTaxRegistrationRecIdInCountryRegion(
                MultipleTaxIdReportingHelper::getTaxRegistrationRecIdFromTaxPeriod(_taxPeriod),
                _isoCountryCodes,
                _multipleTaxIdScope)
            : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLegalEntityOrTaxPeriodInCountryRegion</Name>
				<Source><![CDATA[
    internal static boolean isLegalEntityOrTaxPeriodInCountryRegion(
        TaxPeriod _taxPeriod,
        container _isoCountryCodes,
        MultipleTaxIdScope _multipleTaxIdScope = MultipleTaxIdScope::None)
    {
        return (SysCountryRegionCode::isLegalEntityInCountryRegion(_isoCountryCodes)
            && !TaxIntegrationUtils::isMultipleTaxIdEnabled())
            || MultipleTaxIdReportingHelper::isTaxPeriodInCountryRegion(
                _taxPeriod,
                _isoCountryCodes,
                _multipleTaxIdScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxInCountryRegion</Name>
				<Source><![CDATA[
    internal static boolean isTaxInCountryRegion(
        Tax _tax,
        container _isoCountryCodes,
        MultipleTaxIdScope _multipleTaxIdScope = MultipleTaxIdScope::None)
    {
        boolean ret = false;

        if (_tax)
        {
            TmpTaxWorkTrans tmpTaxWorkTrans = _tax.tmpTaxWorkTrans();
            select firstonly TaxCode from tmpTaxWorkTrans;

            ret = MultipleTaxIdReportingHelper::isTaxRegistrationRecIdInCountryRegion(
                MultipleTaxIdReportingHelper::getTaxRegistrationRecIdFromTaxCode(tmpTaxWorkTrans.TaxCode),
                _isoCountryCodes,
                _multipleTaxIdScope);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLegalEntityOrTaxInCountryRegion</Name>
				<Source><![CDATA[
    internal static boolean isLegalEntityOrTaxInCountryRegion(
        Tax _tax,
        container _isoCountryCodes,
        MultipleTaxIdScope _multipleTaxIdScope = MultipleTaxIdScope::None)
    {
        return (SysCountryRegionCode::isLegalEntityInCountryRegion(_isoCountryCodes)
            && !TaxIntegrationUtils::isMultipleTaxIdEnabled())
            || MultipleTaxIdReportingHelper::isTaxInCountryRegion(
                _tax,
                _isoCountryCodes,
                _multipleTaxIdScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTaxPeriodInCountryRegionAsOfDate</Name>
				<Source><![CDATA[
    internal static boolean existsTaxPeriodInCountryRegionAsOfDate(
        container _isoCountryCodes,
        MultipleTaxIdScope _multipleTaxIdScope = MultipleTaxIdScope::None,
        TransDate _asOfDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        boolean ret = false;

        if (MultipleTaxIdReportingHelper::isMultipleTaxIdEnabledForScope(_multipleTaxIdScope))
        {
            TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;
            TaxRegistration taxRegistration;
            TaxPeriodHead taxPeriodHead;

            while select validtimestate(_asOfDate) CountryRegionId from taxRegistrationTypeApplicabilityRule
                group by CountryRegionId
            exists join taxRegistration
                where taxRegistration.TaxRegistrationTypeApplicabilityRule == taxRegistrationTypeApplicabilityRule.RecId
            exists join taxPeriodHead
                where taxPeriodHead.TaxID == taxRegistration.RecId
            {
                if (conFind(
                    _isoCountryCodes,
                    LogisticsAddressCountryRegion::find(taxRegistrationTypeApplicabilityRule.CountryRegionId).ISOcode))
                {
                    ret = true;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>