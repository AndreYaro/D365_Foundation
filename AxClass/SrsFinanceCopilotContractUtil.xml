<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SrsFinanceCopilotContractUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.SSRSReportRuntime.Instrumentation;
using Newtonsoft.Json.Linq;

/// <summary>
/// This is OData action utility helper for finance copilot report executions.
/// </summary>
[Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public final class SrsFinanceCopilotContractUtil
{
    #SRSFramework

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRdpDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets RDP data contract from report parameter JSON.
    /// </summary>
    /// <param name = "_contractName">The report name.</param>
    /// <param name = "_parameterJson">The parameter JSON</param>
    /// <returns>The report RDP contract.</returns>
    public static Object getRdpDataContract(str _contractName, str _parameterJson)
    {
        int contractCid = className2Id(_contractName);
        if (!contractCid)
        {
            throw error(strFmt("The provided contract name %1 is invalid.", _contractName));
        }

        var contractObj = FormJsonSerializer::deserializeObject(contractCid, _parameterJson);
        return contractObj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRdpDataContractFromJson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets RDP data contract from report parameter JSON object.
    /// </summary>
    /// <param name = "_callerObj">The caller object.</param>
    /// <param name = "_rdpObj">The RDP data contract.</param>
    /// <returns>The report RDP contract with JSON value.</returns>
    public static Object setRdpDataContractFromJson(Object _callerObj, Object _rdpObj)
    {
        // Set report RDP data contract based on the Copliot settings.
        SrsCopilotReportContract paramContract = SrsFinanceCopilotContractUtil::getReportParamContract(_callerObj);
        if (paramContract)
        {
            if (paramContract.parmContractName() && paramContract.parmContractJson())
            {
                var rdpContractJson = SrsFinanceCopilotContractUtil::updateJsonContractForDeserilization(paramContract.parmContractName(), paramContract.parmContractJson());
                var rdpContract = SrsFinanceCopilotContractUtil::getRdpDataContract(paramContract.parmContractName(), rdpContractJson);
                if (rdpContract)
                {
                    JObject contractJson = JObject::Parse(paramContract.parmContractJson());
                    var enumerator = contractJson.GetEnumerator();
                    int classId = classIdGet(_rdpObj);
                    DictClass dictContract = new DictClass(classId);

                    while (enumerator.MoveNext())
                    {
                        var parameterJson = enumerator.get_Current();
                        str parameterName = parameterJson.get_Key();
                        var parameterValue = parameterJson.get_Value();

                        SSRSReportSharedEventSource::EventWriteSharedInformation(strFmt("Update data contract member %1.", parameterName));
                        var paramValue = dictContract.callObject(parameterName, rdpContract);
                        dictContract.callObject(parameterName, _rdpObj, paramValue);
                    }
                }
            }
        }

        return _rdpObj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJsonContractForDeserilization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates Json contract for deserilization by replacing with DataMemberAttribute members.
    /// </summary>
    /// <param name = "_contractName">The data contract name.</param>
    /// <param name = "_contractJson">The data contract Json object.</param>
    /// <returns></returns>
    public static str updateJsonContractForDeserilization(str _contractName, str _contractJson)
    {
        // Check args and validate contract
        if(!_contractName)
        {
            throw error(strfmt("@SYS318601", '_contractName'));
        }

        if(!_contractJson)
        {
            throw error(strfmt("@SYS318601", '_contractJson'));
        }

        System.Exception ex;
        JObject resultJson = new JObject();

        try
        {
            JObject contractJson = JObject::Parse(_contractJson);
            var enumerator = contractJson.GetEnumerator();
            int classId = className2Id(_contractName);
            DictClass dictContract = new DictClass(classId);

            while (enumerator.MoveNext())
            {
                // For current JToken object
                var parameterJson = enumerator.get_Current();
                str parameterName = parameterJson.get_Key();
                var parameterValue = parameterJson.get_Value();

                // Get current DataMemberAttribute
                DictMethod dictMethod = new DictMethod(UtilElementType::ClassInstanceMethod, classId, parameterName);
                if (dictMethod)
                {
                    var dataMemberAttr = dictMethod.getAttribute("DataMemberAttribute");
                    if (dataMemberAttr)
                    {
                        // Special handling for Date type JToken with MicrosoftDateFormat
                        if (parameterValue.get_Type() == Newtonsoft.Json.Linq.JTokenType::Date)
                        {
                            Newtonsoft.Json.JsonSerializerSettings formatSettings = new Newtonsoft.Json.JsonSerializerSettings();
                        
                            formatSettings.set_DateFormatHandling(Newtonsoft.Json.DateFormatHandling::MicrosoftDateFormat);
                            var dateValue = System.DateTime::Parse(parameterValue);
                       
                            var jsonDateTime = Newtonsoft.Json.JsonConvert::SerializeObject(dateValue, formatSettings);
                            var jsonDateTimeValue = subStr(jsonDateTime, 3, strLen(jsonDateTime) - 5);
                            resultJson.Add(dataMemberAttr.Name(), jsonDateTimeValue);
                        }
                        else
                        {
                            resultJson.Add(dataMemberAttr.Name(), parameterValue);
                        }
                    }
                }
            }
        }
        catch (ex)
        {
            SSRSReportSharedEventSource::EventWriteSharedException(ex.Message, ex.GetType().ToString(), ex.StackTrace);
            throw Error("The Copilot RDP contract JSON cannot be deserialized.");
        }

        return resultJson.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatelogItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>SRSCatalogItemName</c> from report name and design name.
    /// </summary>
    /// <param name = "_reportName">The report name value.</param>
    /// <param name = "_designName">The design name value.</param>
    /// <returns>The <c>SRSCatalogItemName</c> value.</returns>
    public static SRSCatalogItemName getCatelogItemName(str _reportName, str _designName)
    {
        return strFmt('%1.%2', _reportName, _designName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCopilotArgsFromJson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get and deserialize Copilot arguments contract from JSON
    /// </summary>
    /// <param name = "_argsContractJson">Contract JSON to set.</param>
    /// <returns>The <c>Args</c> object with JSON contract values.</returns>
    public static Args getCopilotArgsFromJson(str _argsContractJson)
    {
        System.Exception ex;
        SrsCopilotArgsContract argsContract;
        Args args = new Args();

        try
        {
            argsContract = FormJsonSerializer::deserializeObject(classNum(SrsCopilotArgsContract), _argsContractJson);
        }
        catch (ex)
        {
            SSRSReportSharedEventSource::EventWriteSharedException(ex.Message, ex.GetType().ToString(), ex.StackTrace);
            throw Error("The Copilot args contract JSON cannot be deserialized.");
        }

        // Set record common object based on the data table field value.
        if (argsContract.parmDataTableName() &&
            argsContract.parmDataTableFieldName() &&
            argsContract.parmDataTableFieldValue())
        {
            var recordValue = SrsFinanceCopilotContractUtil::getArgsCommonObject(argsContract.parmDataTableName(), argsContract.parmDataTableFieldName(), argsContract.parmDataTableFieldValue());
            args.record(recordValue);
        }
        
        if (argsContract.parmLookupTable())
        {
            args.lookupTable(argsContract.parmLookupTable());
        }

        if (argsContract.parmLookupField())
        {
            args.lookupField(argsContract.parmLookupField());
        }

        if (argsContract.parmLookupValue())
        {
            args.lookupValue(argsContract.parmLookupValue());
        }

        // Set look-up table common object based on the look-up table field value.
        if (argsContract.parmLookupTable() &&
            argsContract.parmLookupField() &&
            argsContract.parmLookupValue())
        {
            var lookupValue = SrsFinanceCopilotContractUtil::getArgsCommonObjectById(argsContract.parmLookupTable(), argsContract.parmLookupField(), argsContract.parmLookupValue());
            args.lookupRecord(lookupValue);
        }
        
        if (argsContract.parmMenuItemName())
        {
            args.menuItemName(argsContract.parmMenuItemName());
        }

        if (argsContract.parmMenuItemType())
        {
            args.menuItemType(argsContract.parmMenuItemType());
        }

        if (argsContract.parmName())
        {
            args.name(argsContract.parmName());
        }

        // Set print type based on PrintCopyOriginal enum.
        if (argsContract.parmPrintType())
        {
            DictEnum dictEnum = new DictEnum(enumNum(PrintCopyOriginal));

            if (argsContract.parmPrintType() == dictEnum.value2Symbol(PrintCopyOriginal::Original))
            {
                args.parmEnumType(enumNum(PrintCopyOriginal));
                args.parmEnum(PrintCopyOriginal::Original);
            }

            if (argsContract.parmPrintType() == dictEnum.value2Symbol(PrintCopyOriginal::Copy))
            {
                args.parmEnumType(enumNum(PrintCopyOriginal));
                args.parmEnum(PrintCopyOriginal::Copy);
            }

            if (argsContract.parmPrintType() == dictEnum.value2Symbol(PrintCopyOriginal::OriginalPrint))
            {
                args.parmEnumType(enumNum(PrintCopyOriginal));
                args.parmEnum(PrintCopyOriginal::OriginalPrint);
            }
        }

        if (argsContract.parmParm())
        {
            args.parm(argsContract.parmParm());
        }
 
        if (argsContract.parmParmEnumType())
        {
            args.parmEnumType(argsContract.parmParmEnumType());
        }

        if (argsContract.parmParmEnum())
        {
            DictEnum dictEnum = new DictEnum(argsContract.parmParmEnumType());
            args.parmEnum(dictEnum.name2Value(argsContract.parmParmEnum()));
        }

        // Set caller object based on class Name.
        if (argsContract.parmCallerName())
        {
            DictClass dictClass = new DictClass(className2Id(argsContract.parmCallerName()));
            args.caller(dictClass.makeObject());
        }

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCopilotExecution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates if current execution context is for Reporting Copilot
    /// </summary>
    /// <param name = "_callerInfo">The caller's info.</param>
    /// <returns><c>True</c> indicates it's for Reporting Copilot; othrewise, <c>False</c>.</returns>
    public static boolean isCopilotExecution(Object _callerInfo)
    {
        if (_callerInfo is SrsCopilotCallerContract)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportRunId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets report run id of the current execution.
    /// </summary>
    /// <param name = "_callerInfo">The caller's info.</param>
    /// <returns>The report run id.</returns>
    public static guid getReportRunId(Object _callerInfo)
    {
        guid runId;
        SrsCopilotCallerContract callerContract = _callerInfo as SrsCopilotCallerContract;

        if(callerContract)
        {
            runId = str2Guid(callerContract.parmRunId());
        }

        return runId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParamContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets report parameter contract from caller object.
    /// </summary>
    /// <param name = "_callerInfo">The caller's info.</param>
    /// <returns>The report report parameter contract.</returns>
    public static SrsCopilotReportContract getReportParamContract(Object _callerInfo)
    {
        SrsCopilotReportContract paramContract;
        SrsCopilotCallerContract callerContract = _callerInfo as SrsCopilotCallerContract;

        if(callerContract)
        {
            paramContract = callerContract.parmReportContract();
        }

        return paramContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useReportCopilotV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if V2 copilot should be used.
    /// </summary>
    /// <returns>If V2 copilot should be used</returns>
    public static boolean useReportCopilotV2()
    {
        const str NoReportCopilotV2 = "Reporting_NoReportCopilotV2";

        return !isFlightEnabled(NoReportCopilotV2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getArgsCommonObject</Name>
				<Source><![CDATA[
    private static Common getArgsCommonObject(str _tableName, str _tableField, str _tableFieldValue)
    {
        var dataTableId = tableName2Id(_tableName);
        var dataTableDict = new SysDictTable(dataTableId);
        var dataTable = dataTableDict.makeRecord();
        var fieldId = fieldName2Id(dataTableId, _tableField);
        select dataTable where dataTable.(fieldId) == _tableFieldValue;
        return dataTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getArgsCommonObjectById</Name>
				<Source><![CDATA[
    private static Common getArgsCommonObjectById(int _tableId, int _tableFieldId, str _tableFieldValue)
    {
        var dataTableDict = new SysDictTable(_tableId);
        var dataTable = dataTableDict.makeRecord();
        select dataTable where dataTable.(_tableFieldId) == _tableFieldValue;
        return dataTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>