<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJobType_Process</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdJobType_Process extends ProdJobType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRouteExecutedPct</Name>
				<Source><![CDATA[
    void addRouteExecutedPct(
        ProdRoute       _prodRoute,
        ProdExecutedPct _executedPct)
    {
        _prodRoute.ExecutedProcess += _executedPct;

        if (_prodRoute.ExecutedProcess < 0)
            _prodRoute.ExecutedProcess = 0;

        if (_prodRoute.ExecutedProcess > 100)
            _prodRoute.ExecutedProcess = 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAmount</Name>
				<Source><![CDATA[
    CostAmount calcAmount(ProdRouteTrans prodRouteTrans)
    {
        return prodRouteTrans.calcAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCalcHours</Name>
				<Source><![CDATA[
    Hours calcCalcHours(
        BOMCalcData             itemCalcData,
        RouteMap                primaryRoute,
        RouteOprMap             primaryOpr,
        RouteMap                route,
        RouteOprMap             opr,
        RouteAutoConsump        routeAutoConsump        = RouteAutoConsump::Always,
        NoYes                   includeConstantConsump  = NoYes::Yes
        )
    {
        if (routeAutoConsump    == RouteAutoConsump::Always ||
           (routeAutoConsump    == RouteAutoConsump::RouteDependent && opr.routeGroup().AutoProcessTime))
        {
            RouteCalcConsumption routeCalcConsumption = RouteCalcConsumption::construct(primaryOpr.Formula);

            return routeCalcConsumption.calcProcessTime(itemCalcData,primaryRoute,primaryOpr,route,opr);
        }
        else
            return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCalcQty</Name>
				<Source><![CDATA[
    Qty   calcCalcQty(
        BOMCalcData         itemCalcData,
        RouteMap            primaryRoute,
        RouteOprMap         primaryOpr,
        RouteMap            route,
        RouteOprMap         opr,
        RouteAutoConsump    routeAutoConsump= RouteAutoConsump::Always,
        boolean             inclSecondary   = false,
        NoYes               includeConstantConsump  = NoYes::Yes
        )
    {
        if (route.OprPriority && ! inclSecondary)
            return 0;

        if (routeAutoConsump    == RouteAutoConsump::Always ||
           (routeAutoConsump    == RouteAutoConsump::RouteDependent && opr.routeGroup().AutoQty))
        {
            RouteCalcConsumption routeCalcConsumption = RouteCalcConsumption::construct(primaryOpr.Formula);

            return routeCalcConsumption.calcOprQty(itemCalcData,primaryRoute,primaryOpr,route,opr);
        }
        else
            return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCalcQtyError</Name>
				<Source><![CDATA[
    Qty   calcCalcQtyError(
        BOMCalcData             itemCalcData,
        RouteMap                primaryRoute,
        RouteOprMap             primaryOpr,
        RouteMap                route,
        RouteOprMap             opr,
        RouteAutoConsump        routeAutoConsump= RouteAutoConsump::Always,
        NoYes                   includeConstantConsump  = NoYes::Yes
        )
    {
        if (route.OprPriority)
            return 0;

        if (routeAutoConsump    == RouteAutoConsump::Always ||
           (routeAutoConsump    == RouteAutoConsump::RouteDependent && opr.routeGroup().AutoQty))
        {
            RouteCalcConsumption routeCalcConsumption = RouteCalcConsumption::construct(primaryOpr.Formula);

            return routeCalcConsumption.calcOprQtyError(itemCalcData,primaryRoute,primaryOpr,route,opr);
        }
        else
            return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCalcQtyGood</Name>
				<Source><![CDATA[
    Qty   calcCalcQtyGood(
        BOMCalcData             itemCalcData,
        RouteMap                primaryRoute,
        RouteOprMap             primaryOpr,
        RouteMap                route,
        RouteOprMap             opr,
        RouteAutoConsump        routeAutoConsump= RouteAutoConsump::Always,
        NoYes                   includeConstantConsump = NoYes::Yes
        )
    {
        if (route.OprPriority)
            return 0;

        if (routeAutoConsump    == RouteAutoConsump::Always ||
           (routeAutoConsump    == RouteAutoConsump::RouteDependent && opr.routeGroup().AutoQty))
        {
            RouteCalcConsumption routeCalcConsumption = RouteCalcConsumption::construct(primaryOpr.Formula);

            return routeCalcConsumption.calcOprQtyGood(itemCalcData,primaryRoute,primaryOpr,route,opr);
        }
        else
            return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcJobSchedJobTime</Name>
				<Source><![CDATA[
    Hours calcJobSchedJobTime(
        ProdRouteJob    _prodRouteJob,
        ProdRoute       _prodRoute,
        Hours           _calcTime)
    {
        if (_prodRouteJob.JobStatus >= ProdJobStatus::Completed || _prodRoute.OprFinished)
            return 0;
        else
            return _calcTime * (100 - min(max(_prodRouteJob.ExecutedPct,_prodRoute.ExecutedProcess),100)) / 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRouteSchedJobTime</Name>
				<Source><![CDATA[
    Hours calcRouteSchedJobTime(
        ProdRoute   _prodRoute,
        Hours       _calcTime)
    {
        if (_prodRoute.OprFinished)
            return 0;
        else
            return _calcTime * (100 - min(_prodRoute.ExecutedProcess,100)) / 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWrkCtrHours</Name>
				<Source><![CDATA[
    public Hours calcWrkCtrHours(BOMCalcData    _itemCalcData,
                                 RouteMap       _primaryRoute,
                                 RouteOprMap    _primaryOpr,
                                 WrkCtrId       _wrkCtrId,
                                 RouteMap       _route,
                                 RouteOprMap    _opr,
                                 ItemId         _itemId         = '', // BOM itemId
                                 InventDimId    _inventDimId    = '') // BOM item's dimension
    {
        RouteCalcConsumption routeCalcConsumption = RouteCalcConsumption::construct(_primaryOpr.Formula);

        return routeCalcConsumption.calcWrkCtrProcessTime(_itemCalcData,
                                                          _primaryRoute,
                                                          _primaryOpr,
                                                          _wrkCtrId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalCategoryHours</Name>
				<Source><![CDATA[
    boolean checkJournalCategoryHours(ProdJournalRoute prodJournalRoute,NoYes mandatory= NoYes::No)
    {
        return super(prodJournalRoute,ProdTable::find(prodJournalRoute.ProdId).prodParametersDim().MandatoryCategoryHours);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalCategoryQty</Name>
				<Source><![CDATA[
    boolean checkJournalCategoryQty(ProdJournalRoute prodJournalRoute,NoYes mandatory= NoYes::No)
    {
        return super(prodJournalRoute,ProdTable::find(prodJournalRoute.ProdId).prodParametersDim().MandatoryCategoryQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalEmployee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the employee that is specified on the route journal is valid.
    /// </summary>
    /// <param name="prodJournalRoute">
    /// A record in the <c>ProdJournalRoute</c> table.
    /// </param>
    /// <param name="mandatory">
    /// A <c>NoYes</c> enumeration value.
    /// </param>
    /// <returns>
    /// true if the check is successful; otherwise, false.
    /// </returns>
    boolean checkJournalEmployee(ProdJournalRoute prodJournalRoute,NoYes mandatory= NoYes::No)
    {
        return super(prodJournalRoute,false);
    //    return super(MRPJournalRoute,appl.ProdParameters().TransferToPayroll);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalHours</Name>
				<Source><![CDATA[
    boolean  checkJournalHours(ProdJournalRoute prodJournalRoute,boolean ask = false)
    {
        if (ask)
        {
            return true;
        }

        if (prodJournalRoute.Hours < 0
            && prodJournalRoute.OprNum
            && decRound(ProdRouteTrans::hoursOpr(prodJournalRoute.ProdId,
                                        prodJournalRoute.OprNum,
                                        prodJournalRoute.OprPriority,
                                        RouteJobType::Process) + prodJournalRoute.Hours, 2) < 0)
        {
            return checkFailed("@SYS15757");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalNumOfError</Name>
				<Source><![CDATA[
    boolean checkJournalNumOfError(ProdJournalRoute prodJournalRoute,boolean ask = false)
    {
        if (ask)
            return true;

        if (!prodJournalRoute.QtyError)
            return true;

        if (prodJournalRoute.OprPriority != RouteOprPriority::Primary)
            return checkFailed("@SYS22232");

        if (prodJournalRoute.QtyError < 0 && prodJournalRoute.OprNum)
        if (ProdRouteTrans::qtyErrorOpr(prodJournalRoute.ProdId,
                                        prodJournalRoute.OprNum,
                                        prodJournalRoute.OprPriority) + prodJournalRoute.QtyError < 0)
            return checkFailed("@SYS2106");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalNumOfGood</Name>
				<Source><![CDATA[
    boolean checkJournalNumOfGood(ProdJournalRoute prodJournalRoute,boolean ask = false)
    {
        if (ask)
            return true;

        if (!prodJournalRoute.QtyGood)
            return true;

        if (prodJournalRoute.OprPriority != RouteOprPriority::Primary)
            return checkFailed("@SYS22232");

        if (prodJournalRoute.QtyError < 0 && prodJournalRoute.OprNum)
        if (ProdRouteTrans::qtyGoodOpr(prodJournalRoute.ProdId,
                                       prodJournalRoute.OprNum,
                                       prodJournalRoute.OprPriority) + prodJournalRoute.QtyGood < 0)
            return checkFailed("@SYS2106");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalPayrollCategoryHours</Name>
				<Source><![CDATA[
    boolean checkJournalPayrollCategoryHours(ProdJournalRoute prodJournalRoute, NoYes mandatory= NoYes::No)
    {
        return super(prodJournalRoute,false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalPayrollCategoryQty</Name>
				<Source><![CDATA[
    boolean checkJournalPayrollCategoryQty(ProdJournalRoute prodJournalRoute,NoYes mandatory= NoYes::No)
    {
        return super(prodJournalRoute,false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalWIPLedgerAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether work in the process ledger accounts can be determined for the specified
    ///    <c>ProdJournalRoute</c> record.
    /// </summary>
    /// <param name="_prodJournalRoute">
    ///    A <c>ProdJournalRoute</c> record that represents a route card journal line or a job card journal
    ///    line.
    /// </param>
    /// <returns>
    ///    true if the work in the process ledger accounts can be determined; otherwise, false.
    /// </returns>
    boolean checkJournalWIPLedgerAccounts(ProdJournalRoute  _prodJournalRoute)
    {
        ProdRouteTrans  prodRouteTrans;

        // check hours
        boolean ret = super(_prodJournalRoute);

        // check quantity (for the jobtype = process you might get an extra prodRouteTrans for the quantity)
        prodRouteTrans.initFromProdJournalRoute(_prodJournalRoute);
        prodRouteTrans.initFromProdJournalRouteQty(_prodJournalRoute);
        prodRouteTrans.CategoryId = _prodJournalRoute.CategoryQtyId;

        if (this.mustWIPBePosted(prodRouteTrans))
        {
            ret = this.checkProdRouteTransWIPAccounts(prodRouteTrans) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalWrkCtrId</Name>
				<Source><![CDATA[
    boolean  checkJournalWrkCtrId(ProdJournalRoute prodJournalRoute, NoYes mandatory= NoYes::No)
    {
        return super(prodJournalRoute,NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEstimateHours</Name>
				<Source><![CDATA[
    NoYes costEstimateHours(RouteGroup routeGroup)
    {
        return routeGroup.CalcProc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEstimateQty</Name>
				<Source><![CDATA[
    NoYes costEstimateQty(RouteGroup routeGroup)
    {
        return routeGroup.CalcQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdJournalRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProdJournalRoute</c> record from the given <c>ProdRoute</c> and
    /// <c>ProRouteJob</c> records.
    /// </summary>
    /// <param name="_prodRoute">
    /// The <c>ProdRoute</c> record to initialize from.
    /// </param>
    /// <param name="_prodJournalRoute">
    /// The <c>ProdJournalRoute</c> record to initialize; optional.
    /// </param>
    /// <param name="_prodRouteJob">
    /// The <c>ProdRouteJob</c> record to initialize from; optional.
    /// </param>
    /// <param name="_resetCategoryId">
    /// A boolean value to identify if the category IDs should be reset; optional.
    /// </param>
    /// <returns>
    /// The <c>ProdJournalRoute</c> record.
    /// </returns>
    ProdJournalRoute initProdJournalRoute(
        ProdRoute        _prodRoute,
        ProdJournalRoute _prodJournalRoute = null,
        ProdRouteJob     _prodRouteJob     = null,
        boolean          _resetCategoryId   = false)
    {
        WrkCtrTable wrkCtrTable;

        if (_resetCategoryId)
        {
            _prodJournalRoute.CategoryHoursId = '';
            _prodJournalRoute.CategoryQtyId = '';
        }
        super(_prodRoute, _prodJournalRoute, _prodRouteJob, _resetCategoryId);

        // if we have a job, fall back to work center categories when required
        if (   _prodRouteJob
            && !_prodJournalRoute.CategoryHoursId)
        {
            wrkCtrTable = WrkCtrTable::find(_prodRouteJob.WrkCtrId);

            if(ProdJournalRouteProcessCategoryFlight::instance().isEnabled() && _prodRoute.ProcessCategoryId)
            {
                _prodJournalRoute.setCategoryHours(_prodRoute.ProcessCategoryId);
            }
            else
            {
                _prodJournalRoute.setCategoryHours(wrkCtrTable.ProcessCategoryId);
            }
        }

        if (   _prodRouteJob
            && !_prodJournalRoute.CategoryQtyId)
        {
            if (!wrkCtrTable)
            {
                wrkCtrTable = WrkCtrTable::find(_prodRouteJob.WrkCtrId);
            }

            if (_prodRoute.QtyCategoryId)
            {
                _prodJournalRoute.setCategoryQty(_prodRoute.QtyCategoryId, _prodRoute.PhantomBOMFactor);
            }
            else
            {
                _prodJournalRoute.setCategoryQty(wrkCtrTable.QtyCategoryId, _prodRoute.PhantomBOMFactor);
            }
        }

        if ( !_prodJournalRoute.CategoryHoursId)
        {
            _prodJournalRoute.setCategoryHours(_prodRoute.ProcessCategoryId);
        }

        if ( !_prodJournalRoute.CategoryQtyId)
        {
            _prodJournalRoute.setCategoryQty(_prodRoute.QtyCategoryId,_prodRoute.PhantomBOMFactor);
        }

        return _prodJournalRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRouteJobSetup</Name>
				<Source><![CDATA[
    RouteJobSetup initRouteJobSetup(RouteJobSetup routeJobSetup = null)
    {
        routeJobSetup.Activation        = NoYes::Yes;
        routeJobSetup.SchedCapacity     = NoYes::Yes;
        routeJobSetup.SchedWorkTime     = NoYes::Yes;
        routeJobSetup.JobCtrlTime       = NoYes::Yes;

        return routeJobSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWrkCtrHoursResourceIndependent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the calculation of work center hours depends on the resource.
    /// </summary>
    /// <param name="_primaryOpr">
    ///    A <c>RouteOprMap</c> map for the primary operation.
    /// </param>
    /// <returns>
    ///    true if the calculation of work center hours is resource independent; otherwise, false.
    /// </returns>
    public boolean isWrkCtrHoursResourceIndependent(RouteOprMap _primaryOpr)
    {
        return RouteCalcConsumption::construct(_primaryOpr.Formula).isWrkCtrHoursResourceIndependent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCalcBePosted</Name>
				<Source><![CDATA[
    boolean  mustCalcBePosted(ProdRouteTrans prodRouteTrans)
    {
        if (prodRouteTrans.isProjMethodConsumed())
            return false;

        return prodRouteTrans.Amount ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustProjBePosted</Name>
				<Source><![CDATA[
    boolean  mustProjBePosted(ProdRouteTrans prodRouteTrans)
    {
        return prodRouteTrans.isProjMethodConsumed() ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustWIPBePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if work in process must be posted for the specified <c>ProdRouteTrans</c> record.
    /// </summary>
    /// <param name="_prodRouteTrans">
    /// A <c>ProdRouteTrans</c> record which represent a route transaction.
    /// </param>
    /// <returns>
    /// true if the work in process ledger accounts must be posted; otherwise, false.
    /// </returns>
    boolean  mustWIPBePosted(ProdRouteTrans      _prodRouteTrans)
    {
        // <GEERU>
        if (! _prodRouteTrans.mustWIPBePosted_RU() || _prodRouteTrans.isProjMethodConsumed())
        // </GEERU>
        {
            return false;
        }

        if (   _prodRouteTrans.TransType == ProdRouteTransType::Time
            && _prodRouteTrans.Hours
            && this.costEstimateHours(_prodRouteTrans.prodRoute().routeGroup()))
        {
            return true;
        }

        if (   _prodRouteTrans.TransType == ProdRouteTransType::Qty
            && (_prodRouteTrans.QtyGood || _prodRouteTrans.QtyError)
            && this.costEstimateQty(_prodRouteTrans.prodRoute().routeGroup()))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numType</Name>
				<Source><![CDATA[
    Integer numType()
    {
        return 30;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcCalcQtyError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight error quantity.
    /// </summary>
    /// <param name="_itemCalcData">
    /// The calculation settings.
    /// </param>
    /// <param name="_primaryRoute">
    /// The primary route.
    /// </param>
    /// <param name="_primaryOpr">
    /// The primary operation.
    /// </param>
    /// <param name="_route">
    /// The current route.
    /// </param>
    /// <param name="_opr">
    /// The current operation.
    /// </param>
    /// <param name="_routeAutoConsump">
    /// The auto consumption settings; optional.
    /// </param>
    /// <param name="_includeConstantConsump">
    /// A <c>boolean</c> value that determines if the constant consumption should be included; optional.
    /// </param>
    /// <returns>
    /// The calculated catch weight error quantity.
    /// </returns>
    public PdsCWInventQty pdsCWCalcCalcQtyError(
        BOMCalcData             _itemCalcData,
        RouteMap                _primaryRoute,
        RouteOprMap             _primaryOpr,
        RouteMap                _route,
        RouteOprMap             _opr,
        RouteAutoConsump        _routeAutoConsump= RouteAutoConsump::Always,
        NoYes                   _includeConstantConsump  = NoYes::Yes
        )
    {
        if (_route.OprPriority)
        {
            return 0;
        }

        if (_routeAutoConsump    == RouteAutoConsump::Always ||
           (_routeAutoConsump    == RouteAutoConsump::RouteDependent && _opr.routeGroup().AutoQty))
        {
            RouteCalcConsumption routeCalcConsumption = RouteCalcConsumption::construct(_primaryOpr.Formula);

            return routeCalcConsumption.pdsCWCalcOprQtyError(_itemCalcData,_primaryRoute);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcCalcQtyGood</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight good quantity.
    /// </summary>
    /// <param name="_itemCalcData">
    /// The calculation settings.
    /// </param>
    /// <param name="_primaryRoute">
    /// The primary route.
    /// </param>
    /// <param name="_primaryOpr">
    /// The primary operation.
    /// </param>
    /// <param name="_route">
    /// The current route.
    /// </param>
    /// <param name="_opr">
    /// The current operation.
    /// </param>
    /// <param name="_routeAutoConsump">
    /// The auto consumption settings; optional.
    /// </param>
    /// <param name="_includeConstantConsump">
    /// A <c>boolean</c> value that determines if the constant consumption should be included; optional.
    /// </param>
    /// <returns>
    /// The calculated catch weight good quantity.
    /// </returns>
    public PdsCWInventQty pdsCWCalcCalcQtyGood(
        BOMCalcData             _itemCalcData,
        RouteMap                _primaryRoute,
        RouteOprMap             _primaryOpr,
        RouteMap                _route,
        RouteOprMap             _opr,
        RouteAutoConsump        _routeAutoConsump= RouteAutoConsump::Always,
        NoYes                   _includeConstantConsump = NoYes::Yes
        )
    {
        if (_route.OprPriority)
        {
            return 0;
        }

        if (_routeAutoConsump    == RouteAutoConsump::Always ||
           (_routeAutoConsump    == RouteAutoConsump::RouteDependent && _opr.routeGroup().AutoQty))
        {
            RouteCalcConsumption routeCalcConsumption = RouteCalcConsumption::construct(_primaryOpr.Formula);

            return routeCalcConsumption.pdsCWCalcOprQtyGood(_itemCalcData,_primaryRoute);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertyId</Name>
				<Source><![CDATA[
    PropertyId propertyId(
        RouteMap      route,
        RouteOprMap   opr  )
    {
        if (! route.OprPriority)
            return opr.PropertyId;
        else
            return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeJobType</Name>
				<Source><![CDATA[
    RouteJobType routeJobType()
    {
        return RouteJobType::Process;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleAllJobs</Name>
				<Source><![CDATA[
    boolean scheduleAllJobs()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleSecondaryJobs</Name>
				<Source><![CDATA[
    boolean scheduleSecondaryJobs()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCalcConsumptionProdRoute</Name>
				<Source><![CDATA[
    void setCalcConsumptionProdRoute(ProdRoute  prodRoute,
                               BOMCalcData      itemCalcData
                              )
    {
        setPrefix(#PreFixField(ProdRoute,OprNum));

        prodRoute.CalcQty      = this.calcCalcQty(itemCalcData,prodRoute.primary(),prodRoute.primary(),prodRoute,prodRoute,RouteAutoConsump::Always,true);
        prodRoute.CalcProc     = this.calcCalcHours(itemCalcData,prodRoute.primary(),prodRoute.primary(),prodRoute,prodRoute);

        // re-estimate runtime processing percentage if labor is already posted in order to properly reschedule remaining capacity reservations
        if (prodRoute.ExecutedProcess && prodRoute.OprPriority == RouteOprPriority::Primary)
        {
            this.calcProcessingPercentage(prodRoute);
        }

        if (prodRoute.isProjMethodConsumed())
        {
            ProjJournalTransMapForm::construct(prodRoute.prodRouteProj(ItemCalcType::Qty), prodRoute).fieldModifiedQtyPost();
            ProjJournalTransMapForm::construct(prodRoute.prodRouteProj(ItemCalcType::Process), prodRoute).fieldModifiedQtyPost();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostCategoryHoursFromResource</Name>
				<Source><![CDATA[
    internal void setCostCategoryHoursFromResource(ProdJournalRoute  _prodJournalRoute,
                                                   WrkCtrTable       _wrkCtrTable)
    {
        _prodJournalRoute.setCategoryHours(_wrkCtrTable.ProcessCategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProcessingPercentage</Name>
				<Source><![CDATA[
    protected void calcProcessingPercentage(ProdRoute _prodRoute)
    {
        if (_prodRoute.CalcProc)
        {
            _prodRoute.ExecutedProcess = (ProdRouteTrans::hoursOpr(_prodRoute.ProdId, _prodRoute.OprNum, _prodRoute.OprPriority, RouteJobType::Process)
                                          / _prodRoute.CalcProc) * 100;
        }

        ProdRouteJob prodRouteJob = ProdRouteJob::findJobType(_prodRoute.ProdId, _prodRoute.OprNum, _prodRoute.OprPriority, RouteJobType::Process, true);

        if (prodRouteJob)
        {
            ttsBegin;
            prodRouteJob.ExecutedPct = _prodRoute.ExecutedProcess;
            prodRouteJob.doUpdate();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealConsumption</Name>
				<Source><![CDATA[
    void updateRealConsumption(ProdTable        _prodTable,
                               ProdRouteTrans   _prodRouteTrans,
                               boolean          _addValues = true,
                               Percent          _pmfAllocation = 100)
    {
        ItemCalcType    calcType;
        ProdCalcTrans   prodCalcTrans;
        ProdRoute       prodRoute = _prodRouteTrans.prodRoute();
        var             costGroupId = BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, _prodRouteTrans.routeCostCategory().CostGroupId);

        setprefix("@SYS28532");
        setprefix(#PreFixField(_ProdRouteTrans,OprNum));

        if ((prodRoute.routeGroup().CalcProc    ==  NoYes::Yes) &&
            (_prodRouteTrans.TransType  ==  ProdRouteTransType::Time)
           )
        {
            calcType = ItemCalcType::Process;

            prodCalcTrans = ProdCalcTrans::findIdRefCalcType(prodRoute.TableId,
                                                             prodRoute.RecId,
                                                             calcType,
                                                             true,
                                                             _prodRouteTrans.WrkCtrId,
                                                             _prodRouteTrans.OprId,
                                                             _prodRouteTrans.OprNum,
                                                             costGroupId);

            if (!prodCalcTrans)
            {
                prodCalcTrans.initFromProdTable(_prodTable, calcType);
                prodCalcTrans.initFromProdRoute(prodRoute);
                prodCalcTrans.Resource      = _prodRouteTrans.WrkCtrId;
                prodCalcTrans.OprId         = _prodRouteTrans.OprId;
                prodCalcTrans.OprNum        = _prodRouteTrans.OprNum;
                prodCalcTrans.TransDate = _prodRouteTrans.DateWIP;
                prodCalcTrans.Production    = NoYes::No;
                prodCalcTrans.CostGroupId   = costGroupId;
                prodCalcTrans.LineNum       = ProdCalcTrans::lastLineNum(_prodTable.ProdId, ProdTransRefType::Production) + 1;
            }

            if (_addValues)
            {
                prodCalcTrans.RealConsump      += _prodRouteTrans.Hours
                    * _pmfAllocation /100
                    ;

                prodCalcTrans.RealCostAmount   += _prodRouteTrans.Amount
                    * _pmfAllocation /100
                    ;
            }
            else
            {
                prodCalcTrans.RealConsump      = _prodRouteTrans.Hours
                    * _pmfAllocation /100
                    ;

                prodCalcTrans.RealCostAmount   = _prodRouteTrans.Amount
                * _pmfAllocation /100
                ;
            }

            prodCalcTrans.write();
        }
        else if ((prodRoute.routeGroup().CalcQty    ==  NoYes::Yes) &&
                 (_prodRouteTrans.TransType ==  ProdRouteTransType::Qty)
                )
        {
            calcType = ItemCalcType::Qty;
            prodCalcTrans = ProdCalcTrans::findIdRefCalcType(prodRoute.TableId,
                                                             prodRoute.RecId,
                                                             calcType,
                                                             true,
                                                             _prodRouteTrans.WrkCtrId,
                                                             _prodRouteTrans.OprId,
                                                             _prodRouteTrans.OprNum,
                                                             costGroupId);

            if (!prodCalcTrans)
            {
                prodCalcTrans.initFromProdTable(_prodTable, calcType);
                prodCalcTrans.initFromProdRoute(prodRoute);
                prodCalcTrans.Resource      = _prodRouteTrans.WrkCtrId;
                prodCalcTrans.OprId         = _prodRouteTrans.OprId;
                prodCalcTrans.OprNum        = _prodRouteTrans.OprNum;
                prodCalcTrans.Production    = NoYes::No;
                prodCalcTrans.CostGroupId   = costGroupId;
                prodCalcTrans.UnitId        = InventTableModule::find(_prodTable.ItemId, ModuleInventPurchSales::Invent).UnitId;
                prodCalcTrans.LineNum       = ProdCalcTrans::lastLineNum(_prodTable.ProdId, ProdTransRefType::Production) + 1;
            }

            if (_addValues)
            {
                prodCalcTrans.RealConsump       += (_prodRouteTrans.QtyGood + _prodRouteTrans.QtyError) * _pmfAllocation /100;

                prodCalcTrans.RealCostAmount    += _prodRouteTrans.Amount
                    * _pmfAllocation /100
                    ;
            }
            else
            {
                prodCalcTrans.RealConsump       = (_prodRouteTrans.QtyGood + _prodRouteTrans.QtyError) * _pmfAllocation /100;

                prodCalcTrans.RealCostAmount    =  _prodRouteTrans.Amount
                    * _pmfAllocation /100
                    ;
            }

            prodCalcTrans.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealConsumptionCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method updates the realized (actual) consumption for the co/by
    /// </summary>
    /// <param name="_prodTable">
    /// Production record
    /// </param>
    /// <param name="_prodRouteTrans">
    /// Production route transaction
    /// </param>
    /// <param name="_allocation">
    /// cost allocation percent
    /// </param>
    /// <param name="_cobyRecId">
    /// RecId of the co/by record
    /// </param>
    public void updateRealConsumptionCoBy(
        ProdTable       _prodTable,
        ProdRouteTrans  _prodRouteTrans,
        Percent         _allocation,
        RecId           _cobyRecId)
    {
        ItemCalcType            calcType;
        PmfCoByProdCalcTrans    pmfCoByProdCalcTrans;
        ProdRoute               prodRoute = _prodRouteTrans.prodRoute();

        setprefix("@SYS28532");
        setprefix(#PreFixField(_prodRouteTrans,OprNum));

        if (prodRoute.routeGroup().CalcProc == NoYes::Yes
            && _prodTable.prodParametersDim().SpecifyCalc == NoYes::Yes
            && _prodRouteTrans.TransType == ProdRouteTransType::Time)
        {
            calcType = ItemCalcType::Process;

            UnitOfMeasureSymbol unitId = PmfCoByProdCalcTrans::calcHourUnit();

            pmfCoByProdCalcTrans = this.initPmfCoByProdCalcTrans(_prodRouteTrans, _prodTable, _cobyRecId, calcType, prodRoute, unitId);

            pmfCoByProdCalcTrans.RealConsump    +=
                _prodRouteTrans.Hours * _allocation/100;
            pmfCoByProdCalcTrans.RealCostAmount +=
                _prodRouteTrans.Amount * _allocation/100;

            pmfCoByProdCalcTrans.write();
        }
        else if (prodRoute.routeGroup().CalcQty == NoYes::Yes
                && _prodTable.prodParametersDim().SpecifyCalc == NoYes::Yes
                && _prodRouteTrans.TransType == ProdRouteTransType::Qty)
        {
            calcType = ItemCalcType::Qty;

            UnitOfMeasureSymbol unitId= InventTableModule::find(_prodTable.ItemId, ModuleInventPurchSales::Invent).UnitId;

            pmfCoByProdCalcTrans = this.initPmfCoByProdCalcTrans(_prodRouteTrans, _prodTable, _cobyRecId, calcType, prodRoute, unitId);

            pmfCoByProdCalcTrans.RealConsump       +=
                (_prodRouteTrans.QtyGood + _prodRouteTrans.QtyError)
                * _allocation/100;
            pmfCoByProdCalcTrans.RealCostAmount    +=
                _prodRouteTrans.Amount * _allocation/100;

            pmfCoByProdCalcTrans.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPmfCoByProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PmfCoByProdCalcTrans</c> record.
    /// </summary>
    /// <param name = "_prodRouteTrans">
    /// Production route transaction.
    /// </param>
    /// <param name = "_prodTable">
    /// Production record.
    /// </param>
    /// <param name = "_cobyRecId">
    /// Reference record id of the co/by record.
    /// </param>
    /// <param name = "_calcType">
    /// An enumeration value that represents the calculation type.
    /// </param>
    /// /// <param name = "_prodRoute">
    /// The record of <c>ProdRote</c> table.
    /// </param>
    /// <param name = "_unitId">
    /// A <c>UnitOfMeasureSymbol</c> value.
    /// </param>
    /// <returns>
    /// The initialized record of <c>PmfCoByProdCalcTrans</c> table.
    /// </returns>
    private PmfCoByProdCalcTrans initPmfCoByProdCalcTrans(ProdRouteTrans _prodRouteTrans, ProdTable _prodTable, RefRecId _cobyRecId, ItemCalcType _calcType, ProdRoute _prodRoute, UnitOfMeasureSymbol _unitId)
    {
        var costGroupId = BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, _prodRouteTrans.routeCostCategory().CostGroupId);

        PmfCoByProdCalcTrans pmfCoByProdCalcTrans;

        pmfCoByProdCalcTrans = PmfCoByProdCalcTrans::findIdRefCalcType(
                                                        _prodRoute.TableId,
                                                        _prodRoute.RecId,
                                                        _cobyRecId,
                                                        _calcType,
                                                        true,
                                                        _prodRouteTrans.WrkCtrId,
                                                        _prodRoute.OprId,
                                                        _prodRoute.OprNum,
                                                        costGroupId);

        if (!pmfCoByProdCalcTrans)
        {
            pmfCoByProdCalcTrans.initFromProdTable(_prodTable, _calcType);
            pmfCoByProdCalcTrans.initFromProdRoute(_prodRoute);

            pmfCoByProdCalcTrans.Resource          = _prodRouteTrans.WrkCtrId;
            pmfCoByProdCalcTrans.CostGroupId       = costGroupId;
            pmfCoByProdCalcTrans.Production        = NoYes::No;
            pmfCoByProdCalcTrans.CalcType          = _calcType;
            pmfCoByProdCalcTrans.PmfIdRefCoByRecId = _coByRecId;
            pmfCoByProdCalcTrans.UnitId            = _unitId;
        }

        return pmfCoByProdCalcTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>