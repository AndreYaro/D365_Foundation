<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTblReducer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class removed duplicated and overlapping times from list
/// </summary>
class RPayTblReducer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCrossedList</Name>
				<Source><![CDATA[
    private RPayTblTimeList getCrossedList(RPayTblTimeList _list, TransDate _start, TransDate _end)
    {
        RPayTblTimeList ret = new RPayTblTimeList();
        ListEnumerator le = _list.periods().getEnumerator();
        RPayTblTime time;
        while (le.moveNext())
        {
            time = le.current();
            if (time.parmStartDate() <= _start
            && time.parmEndDate() >= _end)
            {
                ret.addEnd(time.clone());
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainTime</Name>
				<Source><![CDATA[
private RPayTblTime getMainTime(RPayTblTime _a, RPayTblTime _b)
    {
        RPayTblTime ret = _a.clone();

        if ((this.isSpecTime(_b) && !this.isSpecTime(_a)) ||
            (!this.isFromCalendar(_b) &&  this.isFromCalendar(_a)))
        {
            ret = _b.clone();
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getSortedDatesList</Name>
				<Source><![CDATA[
    private List getSortedDatesList(Set _s)
    {
        SetEnumerator se = _s.getEnumerator();
        List ret = new List(Types::Date);

        while (se.moveNext())
        {
            ret.addEnd(se.current());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSpecTime</Name>
				<Source><![CDATA[
    private boolean isSpecTime(RPayTblTime _time)
    {
        return conPeek(_time.parmSrcDocumentAttr(), 1) != 0 &&
               RpayTblSpecTimeTable::findTimeCode(_time.dimension().parmTimeCode()).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduce</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reduces the number of times.
    /// </summary>
    /// <param name="_list">
    /// The time list.
    /// </param>
    /// <param name="_context">
    /// The time context.
    /// </param>
    /// <returns>
    /// The time list.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTblTimeList reduce(RPayTblTimeList _list, RPayTblContext _context)
    {
        RPayTblTimeList newList = new RPayTblTimeList();
        RPayTblTimeList rangeList;
        Set dates = new Set(Types::Date);
        List sortedDates;
        ListIterator de;
        RPayTblTime time;
        TransDate start, end;

        RPayTblTimeList listWOStorno = this.removeStorno(_list);
        ListEnumerator le = listWOStorno.periods().getEnumerator();

        while (le.moveNext())
        {
            time = le.current();
            dates.add(time.parmStartDate());
            dates.add(time.parmEndDate() + 1);
        }
        sortedDates = this.getSortedDatesList(dates);

        if (sortedDates.elements() >= 2)
        {
            de = new ListIterator(sortedDates);
            start = de.value();
            de.next();
            while (de.more())
            {
                end = de.value() - 1;
                rangeList = this.getCrossedList(listWOStorno, start, end);
                newList.append(this.reducePeriod(rangeList, start, end));
                start = de.value();
                de.next();
            }
        }
        return newList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reducePeriod</Name>
				<Source><![CDATA[
/// <summary>
    /// Reduce time list
    /// </summary>
    /// <param name="_list">
    /// <c>RPayTblTimeList</c> for reduce
    /// </param>
    /// <param name="_start">
    /// start time
    /// </param>
    /// <param name="_end">
    /// end time
    /// </param>
    /// <returns>
    /// reduced <c>RPayTblTimeList</c> list.
    /// </returns>
    private RPayTblTimeList reducePeriod(RPayTblTimeList _list, TransDate _start, TransDate _end)
    {
        RPayTblTimeList ret = new RPayTblTimeList();
        ListEnumerator le;
        RPayTblTime    time, mainTime;

        le = _list.periods().getEnumerator();

        while (le.moveNext())
        {
            if (!mainTime)
            {
                mainTime = le.current();
                continue;
            }

            mainTime = this.getMainTime(mainTime, le.current());
        }

        if (!mainTime)
        {
            return ret;
        }

        if (this.isSpecTime(mainTime))
        {
            time = mainTime.clone();
            time.parmStartDate(_start);
            time.parmEndDate(_end);
            ret.addEnd(time);
        }
        else
        {
            le.reset();
            while (le.moveNext())
            {
                time = le.current();

                if (this.isFromCalendar(mainTime) || !this.isFromCalendar(time))
                {
                time = time.clone();
                time.parmStartDate(_start);
                time.parmEndDate(_end);
                ret.addEnd(time);
            }
            }
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>removeStorno</Name>
				<Source><![CDATA[
    private RPayTblTimeList removeStorno(RPayTblTimeList _list)
    {
        RPayTblTimeList ret = _list.clone();
        ListIterator li1 = new ListIterator(ret.periods());
        ListIterator li2 = new ListIterator(ret.periods());

        RPayTblTime timea, timeb;
        boolean found;

        li1.begin();
        while (li1.more())
        {
            timea = li1.value().clone();
            li2.begin();
            found = false;
            while (li2.more())
            {
                timeb = li2.value().clone();
                timeb.reverse();

                if (li1.value() != li2.value()
                && timea.equalExceptDocument(timeb)
                && timea.parmHours() != 0)
                {
                    li2.delete();
                    found = true;
                    break;
                }

                li2.next();
            }
            //Reset iterator every time because it is broken after deleting. (core issue)
            if (found)
            {
                li1.delete();
                li1.begin();
            }
            else
            {
                li1.next();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFromCalendar</Name>
				<Source><![CDATA[
    private boolean isFromCalendar(RPayTblTime _time)
    {
        return conPeek(_time.parmSrcDocumentAttr(), 1) == tablenum(RPayCalendarTable);
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>