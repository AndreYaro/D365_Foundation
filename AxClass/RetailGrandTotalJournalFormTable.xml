<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGrandTotalJournalFormTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contains methods to work with <c>RetailGrandTotalJournalTable</c> form.
/// </summary>
public class RetailGrandTotalJournalFormTable
{
    private FormRun formRun;
    private NumberSeqFormHandler numberSeqFormHandler;
    private RetailGrandTotalJournalTable journalTable;
    private FormDataSource journalTable_ds;

    private FormFunctionButtonControl ctrlButtonCalculate;
    private FormFunctionButtonControl ctrlButtonClear;
    private FormFunctionButtonControl ctrlButtonClose;
    private FormFunctionButtonControl ctrlButtonCancel;
    private FormFunctionButtonControl ctrlButtonArchive;

    private FormComboBoxControl ctrlAllNewCalculatedClosedCancelled;
    private QueryBuildRange queryAllNewCalculatedClosedCancelled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>datasourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data source.
    /// </summary>
    public void datasourceActivePost()
    {
        this.initDatasourceAllow();
        this.enableButtons();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and validates number sequence before creating actual data source.
    /// </summary>
    /// <returns>
    /// True, if validation was succesful; otherwise, false.
    /// </returns>
    public boolean datasourceCreatePre()
    {
        boolean allowCreate = this.allowCreate();

        try
        {
            if (allowCreate && numberSeqFormHandler)
            {
                numberSeqFormHandler.formMethodDataSourceCreatePre();
            }
        }
        catch(Exception::Error)
        {
            allowCreate = false;
        }

        return allowCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceDeletePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes related number sequence and rereads data source if necessary
    /// after data source record was deleted.
    /// </summary>
    public void datasourceDeletePost()
    {
        if (numberSeqFormHandler)
        {
            numberSeqFormHandler.formMethodDataSourceDelete();
        }

        journalTable_ds.reread(); // in case last record is deleted
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data source and table.
    /// </summary>
    /// <param name="_journalTable">
    /// Table to get data source from.
    /// </param>
    public void datasourceInitPost(RetailGrandTotalJournalTable _journalTable)
    {
        journalTable = _journalTable;
        journalTable_ds = _journalTable.dataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds number sequence to value after it was posted.
    /// </summary>
    public void datasourceInitValuePost()
    {
        if (numberSeqFormHandler)
        {
            numberSeqFormHandler.formMethodDataSourceCreate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceLeavePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that last number sequence number was saved before leaving data source.
    /// </summary>
    /// <returns>
    /// True, if number was saved; otherwise, false.
    /// </returns>
    public boolean datasourceLeavePre()
    {
        if (numberSeqFormHandler && numberSeqFormHandler.lastUncommitedNumber())
        {
            error(strFmt("@SYS85169", numberSeqFormHandler.lastUncommitedNumber()));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceLinkActivePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Links active number sequence before linking actual data source.
    /// </summary>
    public void datasourceLinkActivePre()
    {
        if (numberSeqFormHandler)
        {
            numberSeqFormHandler.formMethodDataSourceLinkActive();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes number sequence on current data source.
    /// </summary>
    public void datasourceWritePost()
    {
        if (numberSeqFormHandler)
        {
            numberSeqFormHandler.formMethodDataSourceWrite();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterRows</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters rows in data source in accordance with selection in
    /// ctrlAllNewCalculatedClosedCancelled ComboBox.
    /// </summary>
    public void filterRows()
    {
        switch (ctrlAllNewCalculatedClosedCancelled.selection())
        {
            case AllNewCalculatedClosedCanceled::All:
                queryAllNewCalculatedClosedCancelled.value(SysQuery::valueUnlimited());
                break;

            case AllNewCalculatedClosedCanceled::New:
                queryAllNewCalculatedClosedCancelled.value(enum2Value(RetailGrandTotalJournalStatus::New));
                break;

            case AllNewCalculatedClosedCanceled::Calculated:
                queryAllNewCalculatedClosedCancelled.value(enum2Value(RetailGrandTotalJournalStatus::Calculated));
                break;

            case AllNewCalculatedClosedCanceled::Closed:
                queryAllNewCalculatedClosedCancelled.value(enum2Value(RetailGrandTotalJournalStatus::Closed));
                break;

            case AllNewCalculatedClosedCanceled::Canceled:
                queryAllNewCalculatedClosedCancelled.value(enum2Value(RetailGrandTotalJournalStatus::Canceled));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does form post init initialization.
    /// </summary>
    public void formInitPost()
    {
        numberSeqFormHandler = NumberSeqFormHandler::newForm(RetailParameters::numRefGrandTotalJournalId().NumberSequenceId,
                                                         formRun,
                                                         journalTable_ds,
                                                         fieldNum(RetailGrandTotalJournalTable, JournalNum));
        this.queryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Object constructor.
    /// </summary>
    /// <param name="_formRun">
    /// Form to be linked.
    /// </param>
    public void new(FormRun _formRun)
    {
        formRun = _formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlAllNewCalculatedClosedCancelled</Name>
				<Source><![CDATA[
    public FormComboBoxControl parmCtrlAllNewCalculatedClosedCancelled(
        FormComboBoxControl _ctrlAllNewCalculatedClosedCancelled = ctrlAllNewCalculatedClosedCancelled)
    {
        ctrlAllNewCalculatedClosedCancelled = _ctrlAllNewCalculatedClosedCancelled;
        return ctrlAllNewCalculatedClosedCancelled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlButtonCalculate</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlButtonCalculate(
        FormFunctionButtonControl _ctrlButtonCalculate = ctrlButtonCalculate)
    {
        ctrlButtonCalculate = _ctrlButtonCalculate;
        return ctrlButtonCalculate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlButtonCancel</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlButtonCancel(
        FormFunctionButtonControl _ctrlButtonCancel = ctrlButtonCancel)
    {
        ctrlButtonCancel = _ctrlButtonCancel;
        return ctrlButtonCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlButtonClear</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlButtonClear(
        FormFunctionButtonControl _ctrlButtonClear = ctrlButtonClear)
    {
        ctrlButtonClear = _ctrlButtonClear;
        return ctrlButtonClear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlButtonClose</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlButtonClose(
        FormFunctionButtonControl _ctrlButtonClose = ctrlButtonClose)
    {
        ctrlButtonClose = _ctrlButtonClose;
        return ctrlButtonClose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlButtonArchive</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlButtonArchive(
        FormFunctionButtonControl _ctrlButtonArchive = ctrlButtonArchive)
    {
        ctrlButtonArchive = _ctrlButtonArchive;
        return ctrlButtonArchive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmDataSource(FormDataSource _journalTable_ds = journalTable_ds)
    {
        journalTable_ds = _journalTable_ds;
        return journalTable_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGrandTotalJournalTable</Name>
				<Source><![CDATA[
    public RetailGrandTotalJournalTable parmGrandTotalJournalTable(RetailGrandTotalJournalTable _journalRecord = journalTable)
    {
        journalTable = _journalRecord;
        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes queries on data source.
    /// </summary>
    public void queryRun()
    {
        queryAllNewCalculatedClosedCancelled = journalTable_DS.query()
            .dataSourceNo(1)
            .addRange(fieldNum(RetailGrandTotalJournalTable, Status));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables action buttons.
    /// </summary>
    public void enableButtons()
    {
        switch (journalTable.Status)
        {
            case RetailGrandTotalJournalStatus::New:
                ctrlButtonCalculate.enabled(true);
                ctrlButtonClear.enabled(false);
                ctrlButtonClose.enabled(false);
                ctrlButtonCancel.enabled(false);
                ctrlButtonArchive.enabled(false);
                break;

            case RetailGrandTotalJournalStatus::Calculated:
                ctrlButtonCalculate.enabled(false);
                ctrlButtonClear.enabled(true);
                ctrlButtonClose.enabled(true);
                ctrlButtonCancel.enabled(false);
                ctrlButtonArchive.enabled(false);
                break;

            case RetailGrandTotalJournalStatus::Closed:
                ctrlButtonCalculate.enabled(false);
                ctrlButtonClear.enabled(false);
                ctrlButtonClose.enabled(false);
                ctrlButtonCancel.enabled(!journalTable.isNotCancelledJournalExistInNextPeriod() 
                    && !journalTable.isNotCancelledAnnualJournalExistInCurrentPeriod());
                ctrlButtonArchive.enabled(true);
                break;

            case RetailGrandTotalJournalStatus::Canceled:
                ctrlButtonCalculate.enabled(false);
                ctrlButtonClear.enabled(false);
                ctrlButtonClose.enabled(false);
                ctrlButtonCancel.enabled(false);
                ctrlButtonArchive.enabled(false);
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initDatasourceAllow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows datasource operations.
    /// </summary>
    public void initDatasourceAllow()
    {
        if (!journalTable_ds)
        {
            return;
        }

        journalTable_ds.allowDelete(journalTable.Status == RetailGrandTotalJournalStatus::New);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if row creation is enabled.
    /// </summary>
    /// <returns>True if row can be created; otherwise false.</returns>
    public boolean allowCreate()
    {
        int selection = ctrlAllNewCalculatedClosedCancelled.selection();
        return selection == AllNewCalculatedClosedCanceled::All || selection == AllNewCalculatedClosedCanceled::New;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>