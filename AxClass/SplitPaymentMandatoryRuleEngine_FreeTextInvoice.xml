<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SplitPaymentMandatoryRuleEngine_FreeTextInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SplitPaymentMandatoryRuleEngine_FreeTextInvoice</c> class is extended class for updating paymMode
/// in Free text invoice.
/// </summary>
public class SplitPaymentMandatoryRuleEngine_FreeTextInvoice extends SplitPaymentMandatoryRuleEngine
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findRuleForOrder</Name>
				<Source><![CDATA[
    protected SplitPaymentMandatoryRule_PL findRuleForOrder(Amount _totalAmount)
    {
        SplitPaymentMandatoryItemGroupId_PL itemGroupId = SplitPaymentMandatoryItemGroup_PL::findGroupByItem(this.getDocumentType());
        CustInvoiceTable custInvoiceTable = this.getCustInvoiceTable();
        SplitPaymentMandatoryRule_PL ruleTaxItemGroup;
        SplitPaymentMandatoryRule_PL voluntaryRuleTaxItemGroup;
        IntrastatCountryRegionParameters intrastatCountryRegionParameters = IntrastatCountryRegionParameters::find(custInvoiceTable.custTable_InvoiceAccount().postalAddress().CountryRegionId);
        boolean isDomesticPartner = intrastatCountryRegionParameters && intrastatCountryRegionParameters.CountryRegionType == CountryRegionType::Domestic;

        CustInvoiceLine custInvoiceLine;

        while select custInvoiceLine
            group by TaxItemGroup
            where custInvoiceLine.ParentRecId == custInvoiceTable.RecId
        {
            ruleTaxItemGroup = null;

            if (isDomesticPartner)
            {
                ruleTaxItemGroup = SplitPaymentMandatoryRule_PL::findByContract(SplitPaymentMandatoryRuleContract::construct()
                    .withDocumentType(this.getDocumentType())
                    .withAmount(_totalAmount)
                    .withItemGroupId(itemGroupId)
                    .withTaxItemGroup(custInvoiceLine.TaxItemGroup)
                    .withCountryType(SplitPaymentMandatoryCountryRegionType_PL::Domestic)
                    .withCurrencyCode(custInvoiceTable.CurrencyCode)
                    .withSearchByTaxItemGroup(true));
            }

            if (!ruleTaxItemGroup)
            {
                ruleTaxItemGroup = SplitPaymentMandatoryRule_PL::findByContract(SplitPaymentMandatoryRuleContract::construct()
                    .withDocumentType(this.getDocumentType())
                    .withAmount(_totalAmount)
                    .withItemGroupId(itemGroupId)
                    .withCountryType(SplitPaymentMandatoryCountryRegionType_PL::All)
                    .withCurrencyCode(custInvoiceTable.CurrencyCode)
                    .withTaxItemGroup(custInvoiceLine.TaxItemGroup)
                    .withSearchByTaxItemGroup(true));
            }

            if (!voluntaryRuleTaxItemGroup && ruleTaxItemGroup && ruleTaxItemGroup.VoluntarySplitPayment == NoYes::Yes)
            {
                voluntaryRuleTaxItemGroup = ruleTaxItemGroup;
            }

            if (ruleTaxItemGroup && ruleTaxItemGroup.VoluntarySplitPayment == NoYes::No)
            {
                break;
            }
        }

        SplitPaymentMandatoryRule_PL rule;

        if (!ruleTaxItemGroup || ruleTaxItemGroup.VoluntarySplitPayment == NoYes::Yes)
        {
            if (isDomesticPartner)
            {
                rule = SplitPaymentMandatoryRule_PL::findByContract(SplitPaymentMandatoryRuleContract::construct()
                    .withDocumentType(this.getDocumentType())
                    .withAmount(_totalAmount)
                    .withItemGroupId(itemGroupId)
                    .withCountryType(SplitPaymentMandatoryCountryRegionType_PL::Domestic)
                    .withCurrencyCode(custInvoiceTable.CurrencyCode)
                    .withSearchByTaxItemGroup(false));
            }

            if (!rule)
            {
                rule = SplitPaymentMandatoryRule_PL::findByContract(SplitPaymentMandatoryRuleContract::construct()
                    .withDocumentType(this.getDocumentType())
                    .withAmount(_totalAmount)
                    .withItemGroupId(itemGroupId)
                    .withCountryType(SplitPaymentMandatoryCountryRegionType_PL::All)
                    .withCurrencyCode(custInvoiceTable.CurrencyCode)
                    .withSearchByTaxItemGroup(false));
            }

            if ((!rule || rule.VoluntarySplitPayment == NoYes::Yes) && voluntaryRuleTaxItemGroup)
            {
                rule = voluntaryRuleTaxItemGroup;
            }
        }
        else
        {
            rule = ruleTaxItemGroup;
        }

        return rule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceTable</Name>
				<Source><![CDATA[
    private CustInvoiceTable getCustInvoiceTable()
    {
        return this.parmCommonTable() as CustInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmount</Name>
				<Source><![CDATA[
    protected Amount getAmount()
    {
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(this.getCustInvoiceTable());
        custFreeInvoiceCalcTotals.calc();

        return custFreeInvoiceCalcTotals.custFreeInvoiceInvoiceAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommonTable</Name>
				<Source><![CDATA[
    protected void updateCommonTable(PaymMode _paymMode, PaymSpec _paymSpec)
    {
        CustInvoiceTable custInvoiceTableUpd;

        ttsbegin;
        custInvoiceTableUpd = CustInvoiceTable::findRecId(this.getCustInvoiceTable().RecId, true);
        
        if (custInvoiceTableUpd)
        {
            custInvoiceTableUpd.PaymMode = _paymMode;
            custInvoiceTableUpd.PaymSpec = _paymSpec;

            if (custInvoiceTableUpd.validateWrite())
            {
                custInvoiceTableUpd.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPaymMode</Name>
				<Source><![CDATA[
    protected PaymMode getCurrentPaymMode()
    {
        return this.getCustInvoiceTable().PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
    protected SplitPaymentDocumentType_PL getDocumentType()
    {
        return SplitPaymentDocumentType_PL::Customer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSplitPayment</Name>
				<Source><![CDATA[
    protected boolean isSplitPayment()
    {
        return this.getCurrentSplitPayment() == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SplitPaymentMandatoryRuleEngine_FreeTextInvoice construct()
    {
        return new SplitPaymentMandatoryRuleEngine_FreeTextInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPaymModeSpec</Name>
				<Source><![CDATA[
    protected PaymSpec getCurrentPaymModeSpec()
    {
        return this.getCustInvoiceTable().PaymSpec;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>