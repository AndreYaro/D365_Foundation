<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetCache</c> class contains methods to manage caching for Fixed Assets.
/// </summary>
internal class AssetCache
{
    private const str CacheOwner = identifierStr(AssetCacheScope);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearAllScopes</Name>
				<Source><![CDATA[
    internal static void clearAllScopes()
    {
        DictEnum dictEnum = new DictEnum(enumnum(AssetCacheScope));

        for (int i = dictEnum.values() - 1; i >= 0; i--)
        {
            AssetCache::clearScope(dictEnum.index2Value(i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearScope</Name>
				<Source><![CDATA[
    internal static void clearScope(AssetCacheScope _scope)
    {
        AssetCache::getGlobalCache().clear(AssetCache::getCacheScopeStr(_scope));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheScopeStr</Name>
				<Source><![CDATA[
    private static str getCacheScopeStr(AssetCacheScope _scope)
    {
        // Int2Str is used instead of Enum2Str to get the int
        // value like '2' instead of the string value for
        // the scope to ensure uniqueness. The _scope enum
        // is implicitly cast to an int by this call. This
        // avoids calling strfmt() which causes a kernel
        // callback running under IL and is therefore significantly
        // slower.
        return CacheOwner + int2str(_scope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    internal static container getValue(AssetCacheScope _scope, str _key)
    {
        return AssetCache::getGlobalCache().find(AssetCache::getCacheScopeStr(_scope), [_key]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValue</Name>
				<Source><![CDATA[
    internal static void insertValue(AssetCacheScope _scope, str _key, anytype _value)
    {
        AssetCache::getGlobalCache().insert(AssetCache::getCacheScopeStr(_scope), [_key], AssetCache::any2Container(_value));
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeValue</Name>
				<Source><![CDATA[
    internal static void removeValue(AssetCacheScope _scope, str _key)
    {
        AssetCache::getGlobalCache().remove(AssetCache::getCacheScopeStr(_scope), [_key]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueExists</Name>
				<Source><![CDATA[
    internal static boolean valueExists(AssetCacheScope _scope, str _key)
    {
        return AssetCache::getGlobalCache().find(AssetCache::getCacheScopeStr(_scope), [_key]) != conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGlobalCache</Name>
				<Source><![CDATA[
    private static SysGlobalObjectCache getGlobalCache()
    {
        return classfactory ? classfactory.globalObjectCache() : new SysGlobalObjectCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>any2Container</Name>
				<Source><![CDATA[
    private static container any2Container(anytype _anytype)
    {
        container ret;
        if (typeof(_anytype) == Types::Container)
        {
            ret = _anytype;
        }
        else if (typeof(_anytype) == Types::Class)
        {
            var packableClass = _anytype as SysPackable;
            if (!packableClass)
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }
            ret = packableClass.pack();
        }
        else
        {
            ret = [_anytype];
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>