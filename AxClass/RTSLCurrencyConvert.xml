<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rtslCurrencyConvert</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rtslCurrencyConvert extends RTSLLedgerConvert
{
    CurrencyCode        mstCurrency;
    CurrencyCode        mstSecCurrency;
    CurrencyCode        toMSTCurrency;
    CurrencyCode        toMSTSecCurrency;
    CurrencyCode        foreignMSTCurrency;

    RTSLToCompanyId     toCompanyId;
    RTSLRuleGroupId     ruleGroupId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCur2foreignMST</Name>
				<Source><![CDATA[
    private AmountCur amountCur2foreignMST(AmountCur    _amountCur,
                                           CurrencyCode _currencyCode,
                                           TransDate    _transDate)
    {
        AmountCur ret;

        ret = CurrencyExchangeHelper::mstAmount(_amountCur, _currencyCode, _transDate, UnknownNoYes::Unknown, 0, 0, false);
        ret = CurrencyExchangeHelper::curAmount(ret, foreignMSTCurrency, _transDate, UnknownNoYes::Unknown, 0, 0, false);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCur2MSTEx</Name>
				<Source><![CDATA[
    private AmountMST amountCur2MSTEx(AmountCur    _amountCur,
                                      CurrencyCode _currencyCode,
                                      TransDate    _transDate)
    {
        AmountMST ret;

        if (_currencyCode == toMSTCurrency)
        {
            return _amountCur;
        }

        changecompany(toCompanyId)
        {
            ret = CurrencyExchangeHelper::mstAmount(_amountCur, _currencyCode, _transDate, UnknownNoYes::Unknown, 0, 0, false);          // No rounding
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCur2MSTSecondEx</Name>
				<Source><![CDATA[
    private AmountMST amountCur2MSTSecondEx(AmountCur    _amountCur,
                                            CurrencyCode _currencyCode,
                                            TransDate    _transDate)
    {
        AmountMSTSecondary ret;

        if (! toMSTSecCurrency || _currencyCode == toMSTSecCurrency)
        {
            return _amountCur;
        }

        changecompany(toCompanyId)
        {
            ret = CurrencyExchangeHelper::mstAmount(_amountCur, _currencyCode, _transDate, UnknownNoYes::No, 0, 0, false);

            ret = CurrencyExchangeHelper::curAmount(ret, toMSTSecCurrency, _transDate, UnknownNoYes::Unknown, 0, 0, false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCompanySetup</Name>
				<Source><![CDATA[
    public boolean checkCompanySetup(boolean _ok,
                                     RTSLConsistencyCheck _consistencyCheck)
    {
        boolean                 ok = _ok;

        setPrefix("@GLS103448");

        if (! foreignMSTCurrency)
        {
            checkFailed(strFmt("@GLS103450", toMSTCurrency));
        }

        return super(ok, _consistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRange</Name>
				<Source><![CDATA[
    public boolean checkRange(TmpRTSLTrans  _tmpTrans,
                              Common        _rule)
    {
        TmpRTSLLedgerTrans    tmpTrans = _tmpTrans;
        RTSLLedgerTransRule   rule     = _rule as RTSLLedgerTransRule;
        if (! RTSLCurrencyRule::exist(rule.RuleGroupId,
                                      rule.CurrencyRuleGroupId,
                                      tmpTrans.CurrencyCode))
        {
            return false;
        }

        return super(_tmpTrans, _rule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>childIds</Name>
				<Source><![CDATA[
    protected container childIds()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertByIndex</Name>
				<Source><![CDATA[
    private void convertByIndex(TmpRTSLLedgerTrans      _tmpTrans,
                                RTSLCurrencyRule        _currencyRule)
    {
        _tmpTrans.AmountCur = _tmpTrans.AmountCur * RTSLCurrencyIndexTrans::findRate(_currencyRule.RuleGroupId,
                                                                                     _currencyRule.CurrencyIndexId,
                                                                                     _tmpTrans.TransDate);

        _tmpTrans.AmountMST = _currencyRule.mstIndexId ?
                                _tmpTrans.AmountMST * RTSLCurrencyIndexTrans::findRate(_currencyRule.RuleGroupId,
                                                                                       _currencyRule.mstIndexId,
                                                                                       _tmpTrans.TransDate) :
                                this.amountCur2MSTEx(_tmpTrans.AmountCur,
                                                     _tmpTrans.CurrencyCode,
                                                     _tmpTrans.TransDate);

        _tmpTrans.AmountMSTSecond = _currencyRule.SecondaryIndexId ?
                                     _tmpTrans.AmountMSTSecond * RTSLCurrencyIndexTrans::findRate(_currencyRule.RuleGroupId,
                                                                                                  _currencyRule.SecondaryIndexId,
                                                                                                  _tmpTrans.TransDate) :
                                     this.amountCur2MSTSecondEx(_tmpTrans.AmountCur,
                                                                _tmpTrans.CurrencyCode,
                                                                _tmpTrans.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertByRate</Name>
				<Source><![CDATA[
    private void convertByRate(TmpRTSLLedgerTrans    _tmpTrans,
                               RTSLCurrencyRule      _currencyRule)
    {
        RTSLToCurrencyCode  toCurrencyCode;
        AmountCur           toAmountCur;
        AmountMST           toAmountMST;
        AmountMSTSecondary  toAmountMSTSec;

        toCurrencyCode = _tmpTrans.CurrencyCode;

        switch (_currencyRule.CurrencyAction)
        {
            case RTSLCurrencyAction::Zero :
                toAmountCur = 0;
                break;

            case RTSLCurrencyAction::One :
                toAmountCur = 1;
                break;

            case RTSLCurrencyAction::AmountCur, RTSLCurrencyAction::None:
                toAmountCur = tmpLedgerTrans.AmountCur;
                break;

            case RTSLCurrencyAction::AmountMST :
                toAmountCur = tmpLedgerTrans.AmountMST;
                toCurrencyCode = mstCurrency;
                break;

            case RTSLCurrencyAction::AmountMSTSecond :
                toAmountCur = tmpLedgerTrans.AmountMSTSecond;
                toCurrencyCode = mstSecCurrency;
                break;

            default :
                throw error(strFmt("@SYS18917", _currencyRule.CurrencyAction));
        }

        switch (_currencyRule.mstAction)
        {
            case RTSLCurrencyAction::Zero :
                toAmountMST = 0;
                break;

            case RTSLCurrencyAction::One :
                toAmountMST = 1;
                break;

            case RTSLCurrencyAction::None :
                toAmountMST = this.amountCur2MSTEx(toAmountCur, toCurrencyCode, _tmpTrans.TransDate);
                break;

            case RTSLCurrencyAction::AmountCur :
                toAmountMST = this.amountCur2foreignMST(_tmpTrans.AmountCur, _tmpTrans.CurrencyCode, _tmpTrans.TransDate);
                break;

            case RTSLCurrencyAction::AmountMST :
                toAmountMST = this.amountCur2foreignMST(_tmpTrans.AmountMST, mstCurrency, _tmpTrans.TransDate);
                break;

            case RTSLCurrencyAction::AmountMSTSecond :
                toAmountMST = this.amountCur2foreignMST(_tmpTrans.AmountMSTSecond, mstSecCurrency, _tmpTrans.TransDate);
                break;

            default :
                throw error(strFmt("@SYS18917", _currencyRule.mstAction));
        }

        switch (_currencyRule.SecondaryAction)
        {
            case RTSLCurrencyAction::Zero :
                toAmountMSTSec = 0;
                break;

            case RTSLCurrencyAction::One :
                toAmountMSTSec = 1;
                break;

            case RTSLCurrencyAction::None :
                toAmountMSTSec = this.amountCur2MSTSecondEx(toAmountCur, toCurrencyCode, _tmpTrans.TransDate);
                break;

            case RTSLCurrencyAction::AmountCur :
                toAmountMSTSec = this.amountCur2foreignMST(_tmpTrans.AmountCur, _tmpTrans.CurrencyCode, _tmpTrans.TransDate);
                toAmountMSTSec = this.amountCur2MSTSecondEx(toAmountMSTSec, toMSTCurrency, _tmpTrans.TransDate);
                break;

            case RTSLCurrencyAction::AmountMST :
                toAmountMSTSec = this.amountCur2foreignMST(_tmpTrans.AmountMST, mstCurrency, _tmpTrans.TransDate);
                toAmountMSTSec = this.amountCur2MSTSecondEx(toAmountMSTSec, toMSTCurrency, _tmpTrans.TransDate);
                break;

            case RTSLCurrencyAction::AmountMSTSecond :
                toAmountMSTSec = this.amountCur2foreignMST(_tmpTrans.AmountMSTSecond, mstSecCurrency, _tmpTrans.TransDate);
                toAmountMSTSec = this.amountCur2MSTSecondEx(toAmountMSTSec, toMSTCurrency, _tmpTrans.TransDate);
                break;

            default :
                throw error(strFmt("@SYS18917", _currencyRule.SecondaryAction));
        }

        _tmpTrans.CurrencyCode    = toCurrencyCode;
        _tmpTrans.AmountCur       = toAmountCur;
        _tmpTrans.AmountMST       = toAmountMST;
        _tmpTrans.AmountMSTSecond = toAmountMSTSec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertSimple</Name>
				<Source><![CDATA[
    private void convertSimple(TmpRTSLLedgerTrans      _tmpTrans)
    {
        _tmpTrans.AmountCur = _tmpTrans.AmountCur;
        _tmpTrans.AmountMST = this.amountCur2MSTEx(_tmpTrans.AmountCur,
                                                   _tmpTrans.CurrencyCode,
                                                   _tmpTrans.TransDate);
        _tmpTrans.AmountMSTSecond
                            = this.amountCur2MSTSecondEx(_tmpTrans.AmountCur,
                                                         _tmpTrans.CurrencyCode,
                                                         _tmpTrans.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertTrans</Name>
				<Source><![CDATA[
    public TmpRTSLTrans convertTrans(TmpRTSLTrans   _tmpTrans,
                                     Common         _rule)
    {
        RTSLLedgerTransRule   rule     = _rule as RTSLLedgerTransRule;
        RTSLCurrencyRule      currencyRule;
        ;
        tmpLedgerTrans = _tmpTrans;

        currencyRule = RTSLCurrencyRule::find(rule.RuleGroupId,
                                              rule.CurrencyRuleGroupId,
                                              tmpLedgerTrans.CurrencyCode);

        switch (currencyRule.UseRates)
        {
            case RTSLCurrencyRate::NoChange  :
                this.convertSimple(tmpLedgerTrans);
                break;

            case RTSLCurrencyRate::Indexes   :
                this.convertByIndex(tmpLedgerTrans, currencyRule);
                break;

            case RTSLCurrencyRate::ExchRates :
                this.convertByRate(tmpLedgerTrans, currencyRule);
                break;

            default :
                throw error(strFmt("@SYS18917", currencyRule.UseRates));
        }

        this.roundOffAmounts(tmpLedgerTrans);

        tmpLedgerTrans = super(tmpLedgerTrans, rule);

        return tmpLedgerTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        toCompanyId         = translation.toCompanyId();
        ruleGroupId         = translation.parmRuleGroup().RuleGroupId;

        mstCurrency         = CompanyInfoHelper::standardCurrency();

        mstSecCurrency      = CompanyInfoHelper::secondaryCurrency_RU();

        toMSTCurrency       = translation.parmRuleGroup().foreignCurrencyCode();
        toMSTSecCurrency    = translation.parmRuleGroup().foreignSecondaryCurrencyCode();

        foreignMSTCurrency  = toMSTCurrency;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffAmounts</Name>
				<Source><![CDATA[
    private void roundOffAmounts(TmpRTSLLedgerTrans    _tmpTrans)
    {
        changecompany(toCompanyId)
        {
            _tmpTrans.AmountCur = CurrencyExchangeHelper::amount(_tmpTrans.AmountCur, _tmpTrans.CurrencyCode);
            _tmpTrans.AmountMST = CurrencyExchangeHelper::amount(_tmpTrans.AmountMST);
            _tmpTrans.AmountMSTSecond = CurrencyExchangeHelper::amount(_tmpTrans.AmountMSTSecond, toMSTSecCurrency);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTrans</Name>
				<Source><![CDATA[
    public boolean validateTrans(TmpRTSLTrans  _tmpTrans)
    {
        TmpRTSLLedgerTrans    tmpTrans = _tmpTrans;
        boolean     ok = true;

        changecompany(translation.toCompanyId())
        {
            if (! Currency::exist(tmpTrans.CurrencyCode))
            {
                ok = checkFailed(Currency::txtNotExist(), tmpTrans.CurrencyCode);
            }

            ok = ok && MainAccount::checkCurrency(LedgerDimensionFacade::getMainAccountFromLedgerDimension(tmpTrans.NewLedgerDimensionDefaultAccount).RecId,
                                                  tmpTrans.CurrencyCode,
                                                  tmpTrans.Posting == LedgerPostingType::ExchRateGain ||
                                                  tmpTrans.Posting == LedgerPostingType::ExchRateLoss);
        }

        tmpTrans.ErrorStatus = ! ok || tmpTrans.ErrorStatus;

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
