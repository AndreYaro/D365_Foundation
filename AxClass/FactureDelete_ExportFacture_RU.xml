<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureDelete_ExportFacture_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FactureDelete_ExportFacture_RU extends FactureDelete_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        protected void check()
    {
        SalesBookVATProcessLogTransOper_RU  processLogTransOper;
        SalesBookVATProcessLogTrans_RU      processLogTrans;
        SalesBookVATProcessLogTable_RU      processLogTable;

        FactureJour_RU   correctiveJour;

        select firstonly bookTable
            where bookTable.ClosingDate
        join bookTrans
            where bookTrans.SalesPurchBookTable_RU == bookTable.RecId &&
                  bookTrans.FactureId              == jour.FactureId  &&
                  bookTrans.TransType              == SalesPurchBookTransType_RU::Facture;

        if (bookTable)
        {
            this.addError(this.errorClosedBook(bookTable.BookId));
        }

        select firstonly RecId  from processLogTransOper
            where processLogTransOper.Blocked          == NoYes::No  &&
                  processLogTransOper.BlockedAuto      == NoYes::No  &&
                  processLogTransOper.CanceledRefRecId == 0
            join TableId from processLogTrans
                where processLogTrans.RecId           == processLogTransOper.RefRecId &&
                      processLogTrans.FactureId       == jour.FactureId
            join TableId from processLogTable
                where processLogTable.RecId == processLogTransOper.LogTableRefRecId;

        if (processLogTransOper.RecId)
        {
            this.addError(strFmt("@GLS112989", jour.FactureId));
        }

        select firstonly RecId from correctiveJour
            where correctiveJour.SourceExportFactureId      == jour.SourceExportFactureId &&
                  correctiveJour.CorrectedFactureExternalId == jour.FactureExternalId &&
                  correctiveJour.CorrectedFactureDate       == jour.FactureDate;

        if (correctiveJour.RecId)
        {
            this.addError("@GLS112990");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        protected void delete()
    {
        this.deleteBookTrans();

        if (jour.isTmp())
        {
            jour = FactureJour_RU::find(jour.FactureId, jour.Module, true);
        }

        jour.delete();

        NumberSeq::releaseNumber(CustParameters::numRefExportFactureExternalId_RU().NumberSequenceId, jour.FactureExternalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBookTrans</Name>
				<Source><![CDATA[
        protected void deleteBookTrans()
    {
        delete_from bookTrans
            where bookTrans.FactureId  == jour.FactureId                         &&
                  bookTrans.TransType  == SalesPurchBookTransType_RU::Facture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorClosedBook</Name>
				<Source><![CDATA[
        protected str errorClosedBook(SalesPurchBookId_RU _bookId)
    {
        return strFmt("@GLS112043", _bookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJour</Name>
				<Source><![CDATA[
        protected CustVendInvoiceJour getInvoiceJour(CustVendInvoiceTrans _trans)
    {
        container dummy()
        {
            return [ _trans ];
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceTrans</Name>
				<Source><![CDATA[
        protected CustVendInvoiceTrans getInvoiceTrans(FactureTrans_RU _trans)
    {
        container dummy()
        {
            return [ _trans ];
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourTableId</Name>
				<Source><![CDATA[
        protected TableId jourTableId()
    {
        TableId ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(FactureJour_RU _jour)
    {
        super(_jour);

        bookTable = new DictTable(tableNum(SalesBookTable_RU)).makeRecord();
        bookTrans = new DictTable(tableNum(SalesBookTrans_RU)).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
        protected TableId transTableId()
    {
        TableId ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkup</Name>
				<Source><![CDATA[
        protected void updateMarkup(FactureTrans_RU _trans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>