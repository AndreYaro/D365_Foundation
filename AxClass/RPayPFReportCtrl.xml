<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportCtrl</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class RPayPFReportCtrl
{
    RHRMEmplTable       emplTable;
    RpayTaxParameters   payTaxParameters;
    CompanyInfo         companyInfo;

    ReportPeriod_RU     reportStartDate, reportEndDate; //reporting period
    ReportPeriod_RU     reportCalcStartDate;
    ReportPeriod_RU     corPeriodStart, corPeriodEnd;   //period where amounts calculated always on corr period
    ReportPeriod_RU     reportCorPeriodStart,
                        reportCorPeriodEnd;

    RPayRateTable       disabilityRateTable;

    RpayPensionFundExportKindOfCorrection reportType;

    boolean             reportDateDefine;
    container           contractInfo;
    container           fundAmounts,
                        deductAmounts,
                        deductBasePctAmount;

    QueryRun            queryRun;

    Yr                              reportYear, corrReportYear;

    RPayReportSocialTaxPeriod       taxPeriod, corrTaxPeriod;

    RPayCounterUnit                 keyFund;
    RPayGroup                       keyGroup;
    RHRMEmplId                      keyEmplId;
    str                             keyCategory; //НР == 0, ОЗОИ == 1
    ReportPeriod_RU                 keyPeriod;
    boolean                         keyStudent, keyForeign;
    int                             fundIdx;

    container                       funds;

    RPayCounterUnit                 pensionInsuranceFund, pensionStorageFund;
    boolean                         fundTransExist;

    RPayAmount                      fundTotalAmount, fundAmount, fundBaseAmount;
    IRPayPFReportData               reportData;

    RPayPFReportCalc                reportCalc;

    Set                             keyChangedSet;
    Set                             crossPeriods;
    Map                             periodCategory;
    RPayPFReportParmContract        parmContract;

    #RPayPFReport
    #TimeConstants
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCrossPeriods</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void addCrossPeriods(container _setContainer)
    {
        Set st;
        SetEnumerator se;
        RPayReportSocialTaxPeriod value;

        if (conlen(_setContainer) == 0)
        {
            return;
        }

        st = Set::create(_setContainer);
        se = st.getEnumerator();

        while (se.moveNext())
        {
            value = se.current();
            crossPeriods.add([value, keyEmplId]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmplPeriod</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void calcEmplPeriod()
    {
        reportCalc.parmEmplId(keyEmplId);
        reportCalc.parmFund(keyFund);
        reportCalc.setDeductionCodes(this.deductionCodes());
        reportCalc.setDeductionCodesPctBase(this.deductionPctBaseCodes());
        reportCalc.calc();

        for (keyPeriod = endmth(reportCalcStartDate); keyPeriod <= reportEndDate; keyPeriod = endmth(nextmth(keyPeriod)))
        {
            [fundAmounts, deductAmounts, deductBasePctAmount] = reportCalc.periodAmount(keyPeriod);
            [fundTotalAmount, fundBaseAmount, fundAmount] = fundAmounts;

            this.initEmplPeriodData();

            if (this.dataValid())
            {
                if (this.checkKeyChanged())
                {
                    this.keyChanged();
                }

                this.initReportCommand();
                this.runCommand();

                fundAmount      = 0;
                fundTotalAmount = 0;
                fundBaseAmount  = 0;
            }
        }

        this.addCrossPeriods(reportCalc.crossPeriods());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkKeyChanged</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean checkKeyChanged()
    {
        boolean ret;

        if (conlen(this.parmKeyToCheck()) > 0)
        {
            if (keyChangedSet.in(this.parmKeyToCheck()))
            {
                ret = false;
            }
            else
            {
                keyChangedSet.add(this.parmKeyToCheck());
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contractMthInfo</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected container contractMthInfo(RHRMEmplTable _emplTableMain, TransDate _periodMth)
    {
        RPayHistory             payHistoryReceive, payHistoryDismiss, payHistoryCheck;
        RPayCivilContract       civilContract;
        RHRMEmplTable                   emplTableCheck, emplTableLocal, emplTableExist;
        RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTable;
        RPaySickIllParameters           sickIllParameters;
        RPayCivilContractType   contractTypes;
        RHRMSortOfWork          sortOfWork = RHRMSortOfWork::CivilContract;
        Set                     status = new Set(Types::Container);
        SetEnumerator           se;

        boolean                 employed = false;

        while select EmployeeId, SortOfWork, PayMainEmplId from emplTableLocal
            where emplTableLocal.PayMainEmplId == _emplTableMain.PayMainEmplId
        {
            select firstonly payHistoryReceive
                order by StartDate desc
                where payHistoryReceive.OperationType == RHRMJournalType::Receive   &&
                      payHistoryReceive.StartDate     <= endMth(_periodMth)         &&
                      payHistoryReceive.Number        == emplTableLocal.EmployeeId;

            select firstonly StartDate from payHistoryDismiss
                order by StartDate desc
                where payHistoryDismiss.OperationType == RHRMJournalType::Dismiss   &&
                      payHistoryDismiss.StartDate     <= endMth(_periodMth)         &&
                      payHistoryDismiss.Number        == emplTableLocal.EmployeeId;

            sortOfWork = emplTableLocal.SortOfWork == RHRMSortOfWork::Direct ? emplTableLocal.SortOfWork : RHRMSortOfWork::CivilContract;

            if ((endmth(payHistoryDismiss.StartDate) != endMth(_periodMth)) && (payHistoryDismiss.StartDate > payHistoryReceive.StartDate || !payHistoryReceive))
            {
                select firstonly RecId from averageEarnEmplPeriodTable
                    where averageEarnEmplPeriodTable.StartDate  <= endMth(_periodMth)
                       && averageEarnEmplPeriodTable.EndDate    >= dateStartMth(_periodMth)
                       && ! averageEarnEmplPeriodTable.CorrectedSickListId
                join tableId from sickIllParameters
                    where sickIllParameters.PayIllType          == averageEarnEmplPeriodTable.RpayIllType
                       && sickIllParameters.InsuranceSeniorityTypeId
                       && sickIllParameters.AverageEarnCode     == averageEarnEmplPeriodTable.RPayAverageEarnCode
                exists join emplTableExist
                    where emplTableExist.EmployeeId       == averageEarnEmplPeriodTable.EmplId
                       && emplTableExist.PayMainEmplId    == emplTableLocal.PayMainEmplId;

                if (averageEarnEmplPeriodTable.RecId)
                {
                    status.add([false, sortOfWork]);
                }
                else
                {
                status.add([true, sortOfWork]); //inverse first value to place on bottom of heap;
            }
            }
            else  //employed
            {
                //check for the same period and other status

                select firstonly payHistoryCheck
                    order by StartDate desc
                    where payHistoryCheck.OperationType == RHRMJournalType::Receive    &&
                          payHistoryCheck.StartDate     <  payHistoryReceive.StartDate &&
                          payHistoryCheck.StartDate     >= dateStartMth(_periodMth)
                join SortOfWork from emplTableCheck
                    where emplTableCheck.EmployeeId         == payHistoryCheck.Number     &&
                          emplTableCheck.EmployeeId         != emplTableLocal.EmployeeId  &&
                          emplTableCheck.PayMainEmplId      == emplTableLocal.PayMainEmplId;

                if (payHistoryCheck)
                {
                    sortOfWork = emplTableCheck.SortOfWork == RHRMSortOfWork::Direct ? emplTableCheck.SortOfWork : RHRMSortOfWork::CivilContract;
                }

                status.add([false, sortOfWork]); //inverse first value to place on top of heap;
            }

            select firstonly civilContract
                where civilContract.EmplId            == emplTableLocal.EmployeeId  &&
                      civilContract.StartDate         <= _periodMth                 &&
                      (! civilContract.EndDate                                      ||
                      civilContract.EndDate           >= dateStartMth(_periodMth))
            join TableId from contractTypes
                where contractTypes.CivilContractTypeCode  == civilContract.CivilContractTypeCode;

            if (civilContract)
            {
                status.add([false, RHRMSortOfWork::CivilContract]);
            }
        }

        if (status.empty())
        {
            return [RHRMSortOfWork::Direct, false];
        }
        else
        {
            se = status.getEnumerator();
            se.moveNext();

            [employed, sortOfWork] = se.current();
            return [sortOfWork, !employed];
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>dataValid</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean dataValid()
    {
        return fundTotalAmount != 0 ||
               fundAmount      != 0 ||
               fundBaseAmount  != 0 ||
               fundTransExist       ||
               conpeek(this.contractMthInfo(emplTable, keyPeriod), 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductionCodes</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container deductionCodes()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductionPctBaseCodes</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container deductionPctBaseCodes()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplFundInvalidDedAmountMth</Name>
				<Source><![CDATA[
        //deduction amount of invalid deduction
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container emplFundInvalidDedAmountMth(RHRMEmplId _mainEmplId, ReportPeriod_RU _curPeriod, RPayCounterUnit _fundCode)
    {
        RPayFundEmplDeduction   fundEmplDed;
        RPayFundDeductionTable  fundDedTable;

        RHRMEmplTable   emplTableExist;

        select sum(DeductionAmount), count(RecID) from fundEmplDed
            where fundEmplDed.RpayFundDeductionCode == payTaxParameters.PensionFundinvalidDeduction
               && fundEmplDed.RpayCounterUnit       == _fundCode
               && fundEmplDed.CorrectedPeriod       == _curPeriod
               exists join emplTableExist
                    where emplTableExist.EmployeeId     == fundEmplDed.EmplId
                       && emplTableExist.PayMainEmplId  == _mainEmplId
            exists join fundDedTable
                where   fundDedTable.RpayFundDeductionCode == fundEmplDed.RpayFundDeductionCode;

        return [fundEmplDed.DeductionAmount, fundEmplDed.RecId != 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void end()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void init()
    {
        RPayRateCode disabilityRateCode;

        payTaxParameters = RPayTaxParameters::find();
        companyInfo      = CompanyInfo::find();

        if (payTaxParameters.PensionFundinvalidDeduction)
        {
            disabilityRateCode      = RPayFundDeductionTable::find(payTaxParameters.PensionFundinvalidDeduction).RPayRateCodeEmpl;
            disabilityRateTable     = RPayRateTable::find(disabilityRateCode);
        }
        else
        {
            disabilityRateCode      = '';
            disabilityRateTable     = null;
        }

        pensionInsuranceFund = payTaxParameters.PensionFundInsurance;
        pensionStorageFund   = payTaxParameters.PensionFundStorage;

        keyChangedSet = new Set(Types::Container);
        crossPeriods  = new Set(Types::Container);
        parmContract  = new RPayPFReportParmContract();

        this.initData();
        this.initEmplQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCitizenshipStatus</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initCitizenshipStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        abstract protected void initData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplCategory</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initEmplCategory()
    {
        Amount              dedAmountDis;
        boolean             fundTransExistLocal;
        RPayRateCallContext callContext;

        if (!periodCategory.exists(keyPeriod))
        {
            [dedAmountDis, fundTransExistLocal] = this.emplFundInvalidDedAmountMth(keyEmplId, keyPeriod, pensionInsuranceFund);

            if (dedAmountDis == 0)
            {
                keyCategory = #InsuredPersonCatEmployee;

                if (disabilityRateTable)
                {
                    callContext = RPayRateCallContext::construct(keyPeriod, keyEmplId);

                    if (disabilityRateTable.getValue(callContext) > 0)
                    {
                        keyCategory = this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear);
                    }
                }
            }
            else
            {
                keyCategory = this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear);
            }

            periodCategory.insert(keyPeriod, keyCategory);
        }
        else
        {
            keyCategory = periodCategory.lookup(keyPeriod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmployeeData</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initEmployeeData()
    {
        for (fundIdx = 1; fundIdx <= conlen(funds); ++fundIdx)
        {
            keyFund = conpeek(funds, fundIdx);
            this.calcEmplPeriod();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplPeriodData</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initEmplPeriodData()
    {
         this.initCitizenshipStatus();
         this.initEmplCategory();
         this.initStudentStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplQuery</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initEmplQuery()
    {
        Query query;

        query = new Query();
        query.addDataSource(tablenum(RHRMEmplTable));
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportCommand</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        abstract protected void initReportCommand()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStudentStatus</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initStudentStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insPersonCatDisabled</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected str insPersonCatDisabled( Yr  _yrReport)
    {
        str category;

        if (_yrReport >= #ReportYear2011)
        {
            category = #InsuredPersonCatDisabled1;
        }
        else
        {
            category = #InsuredPersonCatDisabled;
        }

        return category;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyChanged</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void keyChanged()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKey</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container parmKey()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeyToCheck</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container parmKeyToCheck()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValue</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container parmValue()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void prepareData()
    {
        reportCalc = new  RPayPFReportCalc();
        reportCalc.corReportPeriod(reportCalcStartDate, reportEndDate);
        reportCalc.init();

        this.initEmplQuery();

        while (queryRun.next())
        {
            emplTable = queryRun.get(tablenum(RHRMEmplTable));
            if (emplTable.EmployeeId == empltable.PayMainEmplId)
            {
                keyEmplId      = emplTable.EmployeeId;
                periodCategory = new Map (Types::Date, Types::String);

                this.initEmployeeData();
            }
        }

        this.showCrossPeriods();
        this.end();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportData</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public IRPayPFReportData reportData()
    {
        return reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCommand</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        abstract protected void runCommand()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCrossPeriods</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void showCrossPeriods()
    {
        SetEnumerator se = crossPeriods.getEnumerator();
        RPayReportSocialTaxPeriod value;
        str msg;

        while (se.moveNext())
        {
            [value, keyEmplId] = se.current();
            msg = strfmt("@RUP3354", keyEmplId) + ' ' +
                  strfmt("@RUP3355", value);
            info(msg);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackData</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        abstract protected void unpackData(container _callParameters)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        //it is a fabric method to create concrete instance of descendant of RPayPFReportCtrl
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayPFReportCtrl construct(IRPayReportRunClass _reportRunClass)
    {
        RPayPFReportCtrl    reportData;

        if (_reportRunClass == NULL)
            throw Error(Error::wrongUseOfFunction(funcname()));

        reportData = _reportRunClass.reportData();

        reportData.init();
        reportData.unpackData(_reportRunClass.parmContract());

        return reportData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>