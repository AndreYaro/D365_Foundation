<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCreatePaymJournal_Cust</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendCreatePaymJournal_Cust extends CustVendCreatePaymJournal implements BatchRetryable
{
    FormBuildStringControl          dialogfbsBillingClassificationNames, dialogfbsBillingClassificationIds;
    FormStringControl               dialogBillingClassificationNames, dialogBillingClassificationIds;

    DialogField                     dialogInclTransWithNoBillingClassification;
    str                             custBillingClassificationNames;
    str                             custBillingClassificationIds;
    boolean                         isBillingClassificationEnabled;

    NoYes                           inclTransWithNoBillingClassification;
    DialogGroup                     dialogGrp;

    container                       parentPackedValues;

    SysLookupMultiSelectCtrl        custBillingClassificationCtrl;
    container                       custBillingClassificationIdsContainer;

    #define.custBillingClassificationIds('billingClassificationIds')
    #define.comma(",")
    #define.zero("0")

    #ISOCountryRegionCodes

    #DEFINE.CurrentVersion(28)
    #LOCALMACRO.CurrentList
        custBillingClassificationIds,
        inclTransWithNoBillingClassification,
        parentPackedValues,
        custBillingClassificationIdsContainer,
        isBillingClassificationEnabled
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Constructs a new instance of the <c>CustVendCreatePaymJournal_Cust</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>CustVendCreatePaymJournal_Cust</c> class.
    /// </returns>
    public static CustVendCreatePaymJournal_Cust construct()
    {
        return new CustVendCreatePaymJournal_Cust();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        this.showBatchTab(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    protected boolean calc(CustVendTransOpen _custTransOpen)
    {
        boolean ret;

        ret = super(_custTransOpen);

        if (ret)
        {
            paymProposal.parmPaymProposalCalcPaym().calc(_custTransOpen);
            ret = paymProposal.parmPaymProposalCalcPaym().paymDate() != dateNull();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consIdLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// looks up cons id.
    /// </summary>
    /// <param name="_formControl">
    /// The form control.
    /// </param>
    public void consIdLookup(FormControl _formControl)
    {
        CustConsInvoice_JP::lookupConsIdforSettle(_formControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustVendSpecificLabels</Name>
				<Source><![CDATA[
    protected void updateCustVendSpecificLabels()
    {
        dialogIncludeInvoicesFromOtherCompanies.label("@SYS115156");
        dialogProposeSeparatePaymentPerCompany.label("@SYS115158");
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddBillingClassificationFields_Cust</Name>
				<Source><![CDATA[
    protected void dialogAddBillingClassificationFields_Cust()
    {
        isBillingClassificationEnabled = CustParameters::isBillingClassificationEnabled();

        if (isBillingClassificationEnabled)
        {
            dialogGrp = dialog.addGroup("@SPS690");

            FormBuildControl setupGroupControl = dialog.formBuildDesign().control(dialogGrp.formBuildGroup().id());

            // Control with the MULTI-SELECT
            dialogfbsBillingClassificationIds = setupGroupControl.addControl(FormControlType::String, #custBillingClassificationIds);
            dialogfbsBillingClassificationIds.label("@SPS690");

            dialog.allowUpdateOnSelectCtrl(true);

            this.dialogSelectCtrl();

            // Add CheckBox control 'Include Transactions without Billing Classification' into Group
            dialogInclTransWithNoBillingClassification = dialog.addFieldValue(enumStr(NoYes), inclTransWithNoBillingClassification, "@SPS691");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddBalanceCheckField</Name>
				<Source><![CDATA[
    protected void dialogAddBalanceCheckField()
    {
        dialogBalanceCheck = dialog.addFieldValue(enumStr(NoYes), balanceCheck, "@CashManagement:CheckCustomerBalance");

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            dialogBalanceCheck.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddMinimumPaymentDateField</Name>
				<Source><![CDATA[
    protected void dialogAddMinimumPaymentDateField()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            if (!earlyPaymDate)
            {
                earlyPaymDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }

            dialogEarlyPaymDate = dialog.addFieldValue(extendedTypeStr(DueDate), earlyPaymDate, "@CashManagement:MinPaymDate");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddPostingDateOptionFields_IT</Name>
				<Source><![CDATA[
    protected void dialogAddPostingDateOptionFields_IT()
    {
        postingDateOption_IT = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]);
        if (postingDateOption_IT)
        {

            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00008, funcName());

            dialogGroupDateOfPayment = dialog.addGroup("@SYS80293");
            dialogPostingDate        = dialog.addFieldValue(extendedTypeStr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS14475");
            dialogUseFutureDueDate   = dialog.addFieldValue(extendedTypeStr(NoYesId), useFutureDueDate, "@SYS95966");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddConsolidationInvoiceFields_JP</Name>
				<Source><![CDATA[
    protected void dialogAddConsolidationInvoiceFields_JP()
    {
        #define.columnNum(2)

        if (CustConsInvoiceType_JP::isCustConsInvoiceEnabled())
        {
            // Invoice date
            dialogGroupConsDate = dialog.addGroup("@SYS57610");
            dialogGroupConsDate.columns(#columnNum);
            dialogConsFrom      = dialog.addFieldValue(extendedTypeStr(TransDate), consFromDate);
            dialogConsTo        = dialog.addFieldValue(extendedTypeStr(TransDate), consToDate);

            // Monthly consolidation
            dialogGroupConsId   = dialog.addGroup("@AccountsReceivable:MonthlyConsolidation");
            dialogConsId        = dialog.addFieldValue(extendedTypeStr(CustConsId_JP), consId);
            dialogConsId.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(CustVendCreatePaymJournal_Cust, consIdLookup), this);
            dialogConsDay       = dialog.addFieldValue(extendedTypeStr(CustConsDay_JP), consDay);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called after the <c>CustVentCreatePaymJournal_Cust.dialog</c> method is called to
    /// add controls after the main <c>CustVentCreatePaymJournal_Cust.dialog</c> method
    /// </summary>
    /// <param name="_dialog">
    /// An instance of the <c>DialogRunbase</c> class for the <c>Dialog</c> form.
    /// </param>
    /// <remarks>
    /// This method can be used to add a Mutli-Select lookup for billing classification.
    /// </remarks>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        FormRun formRun;

        super(dialog);

        if (isBillingClassificationEnabled)
        {
            formRun = _dialog.dialogForm().formRun();

            if (formRun)
            {
                dialogBillingClassificationIds = formRun.design().control(dialogfbsBillingClassificationIds.id());
                custBillingClassificationCtrl = SysLookupMultiSelectCtrl::construct(formRun, dialogBillingClassificationIds, queryStr(CustBillingClassification));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transfers values from dialog box fields to the class member values that represent the user input.
    /// </summary>
    /// <returns>
    ///    The return value of a call to the <c>super</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is invoked by the <c>RunBase</c> framework when the OK button of the dialog box is
    ///    pressed.
    /// </remarks>
    public boolean getFromDialog()
    {
        #Characters
        if (isBillingClassificationEnabled)
        {
            // Return Ids from the 1st mutli-select control
            if (custBillingClassificationCtrl)
            {
                custBillingClassificationIdsContainer = custBillingClassificationCtrl.get();
            }

            inclTransWithNoBillingClassification = dialogInclTransWithNoBillingClassification.value();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            earlyPaymDate = dialogEarlyPaymDate.value();
        }

        deleteCredit = dialogDeleteCredit.value();

        // Italian only feature so only retrieve then
        if (postingDateOption_IT)
        {
            postingDate         = dialogPostingDate.value();
            useFutureDueDate    = dialogUseFutureDueDate.value();
        }

        // <GJP>
        if (CustConsInvoiceType_JP::isCustConsInvoiceEnabled())
        {
            consFromDate    = dialogConsFrom.value();
            consToDate      = dialogConsTo.value();
            consId          = dialogConsId.value();
            consDay         = dialogConsDay.value();
        }
        // </GJP>

        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
        {
            defaultOffsetAccountType = dialogDynamicAccountType.value();
            defaultOffsetLedgerDimension = dialogDynamicAccount.value();
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        Query   query;

        // <GCN>
        QueryBuildDataSource qbdsCustTrans;
        QueryBuildDataSource qbdsTaxIntgrExportDocument;
        // <GCN>

        super();

        if (PaymProposalQueryImproveFlight::instance().isEnabled())
        {
            query = new Query(queryStr(CustPaymProposalPerf));
            query.forceSelectOrder(true);
        }
        else
        {
            query = new Query(queryStr(CustPaymProposal));
        }

        query.recordLevelSecurity(true);

        queryCreatePayment = new QueryRun(query);

        // <GCN>
        // Add the range of external invoice id to cust payment proposal query for golden tax integration.
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN]) && CustParameters::find().TaxIntegrationSystem_CN)
        {
            qbdsCustTrans = queryCreatePayment.query().dataSourceTable(tableNum(CustTrans));

            if (qbdsCustTrans)
            {
                qbdsTaxIntgrExportDocument = qbdsCustTrans.addDataSource(tableNum(TaxIntgrExportDocumentOperationView_CN));
                qbdsTaxIntgrExportDocument.joinMode(JoinMode::InnerJoin);
                qbdsTaxIntgrExportDocument.addLink(fieldNum(CustTrans, Invoice), fieldNum(TaxIntgrExportDocumentOperationView_CN, InvoiceId));
                qbdsTaxIntgrExportDocument.fetchMode(QueryFetchMode::One2One);
                qbdsTaxIntgrExportDocument.addRange(fieldNum(TaxIntgrExportDocumentOperationView_CN, ExternalInvoiceId));
            }
        }
        // </GCN>

        if (CustParameters::isBillingClassificationEnabled())
        {
            inclTransWithNoBillingClassification = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            parentPackedValues = super();
            return [#CurrentVersion, #CurrentList, queryCreatePayment.pack()];
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchTransactions</Name>
				<Source><![CDATA[
    protected void searchTransactions()
    {
        CustTable                       custTable;
        CustTrans                       custTrans;
        CustTransOpen                   custTransOpen;
        AmountCur                       paymentAmount;
        AmountMST                       mstBalance;
        CustVendPaymProposalCalcPaym    paymProposalCalcPaym = paymProposal.parmPaymProposalCalcPaym();
        boolean                         includeTransaction;
        CompanyId                       lastCustTableCompany = '';
        CustAccount                     lastCustNumber;
        LedgerDimensionDefaultAccount   defaultOffsetLedgerAccount;
        RecId                           ledgerDimension;
        CompanyId                       lastProposalCompany = '';
        boolean                         contextChanged;
        boolean                         isSetupDimensions;
        DimensionDefault                headerDefaultDimension;
        Query                           query;
        QueryBuildDataSource            custBillingClassificationDatasource;
        QueryBuildRange                 custBillingClassificationDataSourceRange;

        // Init isSetupDimensions
        defaultOffsetLedgerAccount = this.parmDefaultOffsetLedgerDimension();
        isSetupDimensions = (defaultOffsetLedgerAccount != 0) && (paymProposal.parmDefaultOffsetAccountType() == LedgerJournalACType::Ledger);

        if (isBillingClassificationEnabled)
        {
            /**************************************************************************************/
            // Filter the customer payment proposal data according to the Billing Classification field
            custBillingClassificationIds = con2StrUnlimited(custBillingClassificationIdsContainer,#comma);

            query = queryCreatePayment.query();
            custBillingClassificationDatasource = query.dataSourceTable(tableNum(CustTrans));

            custBillingClassificationDataSourceRange = custBillingClassificationDatasource.findRange(fieldNum(CustTrans, CustBillingClassification));

            if (custBillingClassificationDataSourceRange != null)
            {
                custBillingClassificationDatasource.clearRange(fieldNum(CustTrans, CustBillingClassification));
            }
            custBillingClassificationDataSourceRange = custBillingClassificationDatasource.addRange(fieldNum(CustTrans, CustBillingClassification));

            if (custBillingClassificationIds)
            {
                if (inclTransWithNoBillingClassification == NoYes::Yes)
                {
                    custBillingClassificationIds = custBillingClassificationIds + #comma + #zero;
                }
                custBillingClassificationDataSourceRange.value(custBillingClassificationIds);
            }
            else
            {
                if (inclTransWithNoBillingClassification == NoYes::No)
                {
                    return;
                }
                else
                {
                    custBillingClassificationDataSourceRange.value(SysQuery::value(queryValue(0)));
                }
            }
            /**************************************************************************************/
        }

        queryCreatePayment.reset();

        Counter numberOfTransactions = QueryRun::getQueryRowCount(queryCreatePayment.query(), intMax());
        Counter transactionsSearched;

        SysInstrumentationProgressLogger progressLogger = this.createProgressLogger();
        SysInstrumentationProgressStage progressStage = progressLogger.createStage(CustVendInstrumentationConstants::PaymentProposalSearchTransactions, numberOfTransactions);

        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextWithProgressMonitor(progressStage))
        {
            while (queryCreatePayment.next())
            {
                transactionsSearched++;
                progressLogger.trackProgress(transactionsSearched);

                if (balanceCheck)
                {
                    // Determine if the CustTable record from the query is referencing a different logical customer
                    // than the previous transaction. This is needed because Query.changed(CustTable) will not
                    // return true if the customer differs only by company in the shared table scenario. See also kernel bug 47368.
                    custTable = queryCreatePayment.get(tableNum(CustTable));
                    if (queryCreatePayment.changed(tableNum(CustTable)) ||
                        custTable.company() != lastCustTableCompany)
                    {
                        lastCustTableCompany = custTable.company();
                        mstBalance = this.getCachedMstBalance(custTable);
                    }
                    if (mstBalance < 0)
                    {
                        continue;
                    }
                }

                if (queryCreatePayment.changed(tableNum(CustTransOpen)))
                {
                    custTransOpen = queryCreatePayment.get(tableNum(CustTransOpen));

                    if (isPaymentRequestsEnabled)
                    {
                        paymentRequestTable = queryCreatePayment.get(tableNum(CFMPaymentRequestTable));
                    }

                    // The invocation of calc() determines the appropriate payment date which is stored on the paymProposalCalcPaym object.
                    includeTransaction = this.calc(custTransOpen);

                    if (includeTransaction)
                    {
                        // Setup dimensions for current customer
                        if (isSetupDimensions)
                        {
                            // Check if customer changed
                            if (lastCustNumber != custTransOpen.AccountNum)
                            {
                                lastCustNumber = custTransOpen.AccountNum;
                                contextChanged = true;
                            }

                            // Check if company changed
                            if (lastProposalCompany != custTransOpen.DataAreaId)
                            {
                                lastProposalCompany = custTransOpen.DataAreaId;
                                contextChanged = true;
                            }

                            if (contextChanged)
                            {
                                contextChanged = false;

                                headerDefaultDimension = this.getJournalHeaderDefaultDimension(custTransOpen.DataAreaId);
                                custTable = queryCreatePayment.get(tableNum(CustTable));
                                ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultOffsetLedgerAccount, headerDefaultDimension, custTable.DefaultDimension, this.parmMainAccountDefaultDimension());

                                paymProposal.parmDefaultOffsetLedgerDimension(ledgerDimension);
                            }
                        }

                        custTrans = queryCreatePayment.get(tableNum(CustTrans));
                        paymentAmount = paymProposalCalcPaym.paymAmountInvoiceCur();

                        if (paymentAmount == 0.0)
                        {
                            continue;
                        }

                        // <GBR>
                        if (BrazilParameters::isEnabled())
                        {
                            CustVendPaymProposalEditForm::calculateAndUpdateFineAmount_BR(custTransOpen.company(),
                                                                                          paymProposal.parmLedgerJournalTableCompany(),
                                                                                          custTransOpen,
                                                                                          paymProposalCalcPaym.paymDate(),
                                                                                          this.paymCurrency(custTrans.CurrencyCode));

                            CustVendPaymProposalEditForm::calculateAndUpdateInterestAmount_BR(custTransOpen.company(),
                                                                                          paymProposal.parmLedgerJournalTableCompany(),
                                                                                          custTransOpen,
                                                                                          paymProposalCalcPaym.paymDate(),
                                                                                          this.paymCurrency(custTrans.CurrencyCode));

                            paymentAmount = paymProposalCalcPaym.paymAmountInvoiceCur();
                        }
                        // </GBR>

                        paymProposal.addCustVendTransOpen(custTransOpen,
                                                          paymProposalCalcPaym.paymDate(),
                                                          this.paymCurrency(isPaymentRequestsEnabled && paymentRequestTable.PaymentCurrency ? paymentRequestTable.PaymentCurrency: custTrans.CurrencyCode),
                                                          paymentAmount);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret;

        Version     version;
        container   packedQuery;

        #LOCALMACRO.CurrentList_PS_v27
            custBillingClassificationIds,
            inclTransWithNoBillingClassification,
            parentPackedValues,
            custBillingClassificationIdsContainer
        #ENDMACRO

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            version = RunBase::getVersion(_packedClass);
            switch (version)
            {
                case #CurrentVersion :
                    [version, #CurrentList, packedQuery] = _packedClass;

                    if (packedQuery)
                    {
                        queryCreatePayment = new QueryRun(packedQuery);
                        super(parentPackedValues);
                    }

                    break;

                case 27 :
                    [version, #CurrentList_PS_v27, packedQuery] = _packedClass;

                    if (packedQuery)
                    {
                        queryCreatePayment = new QueryRun(packedQuery);
                        super(parentPackedValues);
                    }

                default :
                    return false;
            }

            return true;
        }
        else
        {
            ret = super(_packedClass);

            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    protected void updateQuery()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryWithQueryRun</Name>
				<Source><![CDATA[
    protected void updateQueryWithQueryRun(QueryRun _queryRun)
    {
        QueryBuildDataSource    qbdsCustTable;
        QueryBuildDataSource    qbdsCustTransOpen;

        // <GCN>
        QueryBuildDataSource    qbdsTaxIntgrExportDocument;
        // </GCN>

        qbdsCustTable = _queryRun.query().dataSourceTable(tableNum(CustTable));

        SysQuery::findOrCreateRange(qbdsCustTable, fieldNum(CustTable, Blocked)).value(SysQuery::valueNot(CustVendorBlocked::All));

        if (paymProposalType == CustVendCreatePaymProposalType::DueDate &&
            LedgerJournalTable::find(ledgerJournalId).JournalType == LedgerJournalType::CustPayment)
        {
            qbdsCustTransOpen = _queryRun.query().dataSourceTable(tableNum(CustTransOpen));

            SysQuery::findOrCreateRange(qbdsCustTransOpen, fieldNum(CustTransOpen, DueDate)).value(SysQuery::range(fromDate, toDate));
        }

        // <GCN>
        // If the range of external invoice id not set then update the table InnerJoin to Outer join.
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN]) && CustParameters::find().TaxIntegrationSystem_CN)
        {
            qbdsTaxIntgrExportDocument = _queryRun.query().dataSourceTable(tableNum(TaxIntgrExportDocumentOperationView_CN));

            if (qbdsTaxIntgrExportDocument && !SysQuery::findOrCreateRange(qbdsTaxIntgrExportDocument, fieldNum(TaxIntgrExportDocumentOperationView_CN, ExternalInvoiceId)).value())
            {
                qbdsTaxIntgrExportDocument.joinMode(JoinMode::OuterJoin);
                qbdsTaxIntgrExportDocument.fetchMode(QueryFetchMode::One2Many);
            }
        }
        // </GCN>

        // <GJP>
        if ((consFromDate
             || consToDate
             || consId
             || consDay)
            && CustConsInvoiceType_JP::isCustConsInvoiceEnabled())
        {
            _queryRun.query(CustVendConsInvoiceSettleQuery_JP::updateQuery(
                _queryRun.query(),
                tableNum(CustTrans),
                tableNum(CustInvoiceJour),
                tableNum(CustTable),
                tableNum(CustConsInvoice_JP),
                fromDate,
                toDate,
                consId,
                consDay));
        }
        // </GJP>

        // <GTH>
        if (taxBranchCode && isTaxBranchEnabled)
        {
            taxBranchRecId = TaxBranch::findByCode(taxBranchCode).RecId;
            this.updateQueryWithQueryRun_TH(tableNum(CustTrans),_queryRun);
        }
        // </GTH>

        if (isPaymentRequestsEnabled)
        {
            this.updateQueryCashFlowWithQueryRun(tableNum(CustTransOpen), _queryRun);
        }

        super(_queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS75712";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustVendCreatePaymJournal_Cust::runPaymentProposal(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPaymentProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the payment proposal processing logic.
    /// </summary>
    /// <param name = "_args">A set of arguments for running payment proposal.</param>
    /// <returns>A <c>CustVendCreatePaymJournal_Cust</c> object containing the results of the payment proposal.</returns>
    protected static CustVendCreatePaymJournal_Cust runPaymentProposal(Args _args)
    {
        CustVendCreatePaymJournal_Cust createPaymJournal = CustVendCreatePaymJournal_Cust::construct();
        LedgerJournalTable ledgerJournalTable  = createPaymJournal.userInteraction(_args).getLedgerJournalTable();

        boolean canProceed;

        if (ledgerJournalTable)
        {
            if (!createPaymJournal.isInBatch())
            {
                CustVendPaymProposalLine::deleteByJournalId(ledgerJournalTable.JournalNum);
            }  
            createPaymJournal.getLast();
            createPaymJournal.parmLedgerJournalId(ledgerJournalTable.JournalNum);
        }

        canProceed = createPaymJournal.userInteraction(_args).doPromptForCreatingPaymentProposal();

        if (canProceed)
        {
            createPaymJournal.runOperation();
        }
        else
        {
            BatchInfo batchInfo = createPaymJournal.batchInfo();
            if (batchInfo 
                && batchInfo.parmBatchExecute() == true 
                && batchInfo.parmBatch() 
                && batchInfo.parmBatch().RecId > 0)
            {

                CustVendPaymProposalBatchProcessState targetState;
                if (createPaymJournal.parmSkipProposalEditForm())
                {
                    targetState = CustVendPaymProposalBatchProcessState::CreatedPaymentLines;
                }
                else
                {
                    targetState = CustVendPaymProposalBatchProcessState::CreatedProposalLines;
                }

                ttsbegin;
                CustVendPaymProposalBatchProcess::start(
                    createPaymJournal.parmLedgerJournalId(),
                    targetState,
                    batchInfo.parmBatch().BatchJobId);
                ttscommit;

                LedgerIJournalFormRefreshable callingForm;
                if (_args.caller())
                {
                    callingForm = _args.caller() as LedgerIJournalFormRefreshable;
                }

                CustVendPaymProposalBatchProgressController controller;
                controller = CustVendPaymProposalBatchProgressController::construct(
                    createPaymJournal.parmLedgerJournalId(),
                    callingForm);
                controller.initForm();
            }
        }

        return createPaymJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryNonUserInteractive</Name>
				<Source><![CDATA[
    protected void initQueryNonUserInteractive(CustVendCreatePaymJournalDialogValues _dialogValues)
    {
        QueryBuildDataSource qbdsCustTable, qbdsCustTrans;

        super(_dialogValues);

        if (_dialogValues.parmAccountNum())
        {
            qbdsCustTable = this.queryRun().query().dataSourceTable(tableNum(CustTable));
            SysQuery::findOrCreateRange(qbdsCustTable, fieldNum(CustTable, AccountNum)).value(_dialogValues.parmAccountNum());
        }

        if (_dialogValues.parmPaymMode())
        {
            qbdsCustTrans = this.queryRun().query().dataSourceTable(tableNum(CustTrans));
            SysQuery::findOrCreateRange(qbdsCustTrans, fieldNum(CustTrans, PaymMode)).value(_dialogValues.parmPaymMode());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseSpecTransSetBasedInsert</Name>
				<Source><![CDATA[
    protected boolean canUseSpecTransSetBasedInsert()
    {
        boolean canUseSpecTransSetBasedInsert = true;

        if (CustParameters::find().MarkOpenInvoiceLine)
        {
            canUseSpecTransSetBasedInsert = false;
        }

        return canUseSpecTransSetBasedInsert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return this.isInBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpenAccountNumFieldId</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTransOpenAccountNumFieldId()
    {
        return fieldNum(CustTransOpen, AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpenRecIdFieldId</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTransOpenRecIdFieldId()
    {
        return fieldNum(CustTransOpen, RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpenTableId</Name>
				<Source><![CDATA[
    protected TableId getCustVendTransOpenTableId()
    {
        return tableNum(CustTransOpen);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTableId</Name>
				<Source><![CDATA[
    protected TableId getCustVendTableId()
    {
        return tableNum(CustTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTableRecIdFieldId</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTableRecIdFieldId()
    {
        return fieldNum(CustTable, RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTableAccountNumFieldId</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTableAccountNumFieldId()
    {
        return fieldNum(CustTable, AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseCustVendPaymProposalLineSetBasedInsert</Name>
				<Source><![CDATA[
    protected boolean canUseCustVendPaymProposalLineSetBasedInsert()
    {
        //SpecTrans must be set based before CustVendPaymProposalLine can be set based.
        boolean canUseCustVendPaymProposalLineSetBasedInsert = this.canUseSpecTransSetBasedInsert();

        return canUseCustVendPaymProposalLineSetBasedInsert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPost</Name>
				<Source><![CDATA[
    protected void dialogPost(Object _dialog)
    {
        super(_dialog);

        DialogRunbase dialogRunbase = _dialog as dialogRunbase;

        if (dialogRunbase != null)
        {
            dialogRunbase.disableRecurrenceButton();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>