<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvBudgetCheckHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class to deal with budget check logic.
/// </summary>
public static class TrvBudgetCheckHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isBudgetControlEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether budget control is enabled for the given budget control source integrator.
    /// </summary>
    /// <param name="_budgetControlSourceIntegrator">
    /// The budget control source integrator.
    /// </param>
    /// <returns>
    /// true if budget control is enabled; otherwise, false.
    /// </returns>
    public static boolean isBudgetControlEnabled(BudgetControlSourceIntegrator _budgetControlSourceIntegrator)
    {
        LedgerRecId ledgerRecId = Ledger::current();

        if (Ledger::isLedgerBudgetControlEnabled(ledgerRecId))
        {
            if (BudgetControlConfiguration::isSourceIntegratorEnabled(ledgerRecId, _budgetControlSourceIntegrator))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetControlCheckOnEntryEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether budget control check on entry is enabled for the given budget control source integrator.
    /// </summary>
    /// <param name="_budgetControlSourceIntegrator">
    /// The budget control source integrator.
    /// </param>
    /// <returns>
    /// true if budget control check on entry is enabled; otherwise, false.
    /// </returns>
    public static boolean isBudgetControlCheckOnEntryEnabled(BudgetControlSourceIntegrator _budgetControlSourceIntegrator)
    {
        LedgerRecId ledgerRecId = Ledger::current();

        if (Ledger::isLedgerBudgetControlEnabled(ledgerRecId))
        {
            if (BudgetControlConfiguration::doBudgetCheckOnEntryForSourceIntegrator(ledgerRecId, _budgetControlSourceIntegrator))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectBudgetControlEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether budget control for a project is enabled for the specified expense report or
    /// travel requisition.
    /// </summary>
    /// <param name="_sourceDocumentHeaderRecId">
    /// The record ID of the source document header of the expense report or travel requisition.
    /// </param>
    /// <returns>
    /// true if budget control for a project is enabled; otherwise, false.
    /// </returns>
    public static boolean isProjectBudgetControlEnabled(RecId _sourceDocumentHeaderRecId)
    {
        AccountingDistribution          accountingDistribution;
        ProjectAccountingDistribution   projectAccountingDistribution;
        ProjTable                       projTable;

        if (_sourceDocumentHeaderRecId)
        {
            select firstonly RecId from accountingDistribution where accountingDistribution.SourceDocumentHeader == _sourceDocumentHeaderRecId
                exists join projectAccountingDistribution where projectAccountingDistribution.AccountingDistribution == accountingDistribution.RecId
                exists join projTable where projTable.RecId == projectAccountingDistribution.ProjTable && projTable.UseBudgeting == true;
        }

        return (accountingDistribution.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverBudgetAction</Name>
				<Source><![CDATA[
    public static BudgetCheckOverbudgetOption getOverBudgetAction()
    {
        SysGlobalObjectCache            sgoc;
        BudgetCheckOverbudgetOption     budgetCheckOverbudgetOption = BudgetCheckOverbudgetOption::PreventProcessing;
        BudgetOverrideUserGroupOption   budgetOverrideUserGroupOption;
        UserGroupList                   userGroupList;
        container                       result;
        const str                       ExpensegetOverBudgetAction = 'ExpensegetOverBudgetAction';

        //Try put pull from cache first
        if (classfactory)
        {
            sgoc = classfactory.globalObjectCache();
        }
        else
        {
            sgoc =  new SysGlobalObjectCache();
        }

        result = sgoc.find(ExpensegetOverBudgetAction, ['TRVOBA_'+strUpr(curext())+'_'+strUpr(curUserId())]);
        if (result != conNull())
        {
            [budgetCheckOverbudgetOption] = result;
        }
        else
        {
            select firstonly UserId from userGroupList
                where userGroupList.UserId == curUserId()
                join DefaultOverBudgetOption from budgetOverrideUserGroupOption
                    where budgetOverrideUserGroupOption.UserGroupInfo              == userGroupList.GroupId
                          && budgetOverrideUserGroupOption.DefaultOverBudgetOption == BudgetCheckOverbudgetOption::AllowProcessing;

            if (userGroupList.RecId != 0)
            {
                budgetCheckOverbudgetOption = BudgetCheckOverbudgetOption::AllowProcessing;
            }

            sgoc.insert(ExpensegetOverBudgetAction, ['TRVOBA_'+strUpr(curext())+'_'+strUpr(curUserId())], [budgetCheckOverbudgetOption]);
        }

        return budgetCheckOverbudgetOption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetForAllLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the expense lines do not cause budget overrun.
    /// </summary>
    /// <param name = "_trvExpTable"></param>
    public static void checkBudgetForAllLines(TrvExpTable _trvExpTable)
    {
        TrvExpTrans trvExpTrans;

        // this check is not required, optimizing the calls for perf
        if (TrvBudgetCheckHelper::isBudgetControlEnabled(BudgetControlSourceIntegrator::ExpenseReport)
            || TrvBudgetCheckHelper::isProjectBudgetControlEnabled(_trvExpTable.SourceDocumentHeader))
        {
            //
            // During post-approval, project commitments for the expense lines are updated.
            // Along with that, the remaining balance of the project budget is also updated.
            // The check for the budget is done against the remaining balance. So, for example,
            // if the original budget was $100 and the expense amount is $70, after approval
            // the committed cost is $70 and remaining budget balance is $30. In this case,
            // another check against remaining balance is incorrect. To avoid this problem,
            // let's verify that the project cost is already committed for all the expense 
            // lines. If they are, the we don't need to call source document framework again.
            //
            boolean expenseCostCommitted = true;

            while select trvExpTrans where trvExpTrans.TrvExpTable == _trvExpTable.RecId
            {
                if (!trvExpTrans.isProjectCostCommitted())
                {
                    expenseCostCommitted = false;
                    break;
                }
            }
            
            if (!expenseCostCommitted)
            {
                SourceDocumentProcessorFacade::submitOnDemandSourceDocumentImpl(_trvExpTable);
            }
        }
        // if mileage line exists for the expense report and budget control is not enabled, call the source document framework.
        else if (_trvExpTable.hasMileageLine())
        {
            SourceDocumentProcessorFacade::submitOnDemandSourceDocumentImpl(_trvExpTable);

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePostForBudgetCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates an expense report before it can be posted for budget errors.
    /// </summary>
    /// <param name = "_trvExpTable">The <c>TrvExpTable</c> table buffer</param>
    /// <returns>
    /// true if the validation is successful; otherwise, false
    /// </returns>
    public static boolean validatePostForBudgetCheck(TrvExpTable _trvExpTable)
    {
        boolean retval = true;

        TrvBudgetCheckHelper::checkBudgetForAllLines(_trvExpTable);

        if (TrvBudgetCheckHelper::isBudgetFailed(_trvExpTable.RecId) && TrvBudgetCheckHelper::getOverBudgetAction() != BudgetCheckOverbudgetOption::AllowProcessing)
        {
            error(strFmt("@SYS304366", _trvExpTable.ExpNumber));
            retval = false;
        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProjectBudgetViolationMsgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the project budget violation messages.
    /// </summary>
    /// <param name = "_trvExpTableRecId">RecId for table <c>TrvExpTable</c></param>
    public static void displayProjectBudgetViolationMsgs(RefRecId _trvExpTableRecId)
    {
        Map messages = TrvBudgetCheckHelper::getProjectBudgetViolationMsgs(_trvExpTableRecId);

        MapEnumerator enumerator = messages.getEnumerator();

        while (enumerator.moveNext())
        {
            switch (enumerator.currentValue())
            {
                case MessageSeverity::Error:
                    error(enumerator.currentKey());
                    break;

                case MessageSeverity::Warning:
                    warning(enumerator.currentKey());
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpenseBudgetViolationMsgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build expense budget violation message.
    /// </summary>
    /// <param name = "_trvExpTransRecId"></param>
    /// <returns>
    /// Map that contains all the budget related messages.
    /// </returns>
    public static Map getExpenseBudgetViolationMsgs(RefRecId _trvExpTransRecId)
    {
        TrvExpTable                             trvExpTable;
        TrvExpTrans                             trvExpTrans;
        BudgetSource                            budgetSource;
        Map                                     messages                = new Map(Types::String, Types::Enum);
        TrvParameters                           trvParameters           = TrvParameters::find();
        boolean                                 allowSubmit             = trvParameters.IsAllowSubmitExpenseOnBudgetFail;
        boolean                                 allowApprove            = trvParameters.IsAllowApproveExpenseOnBudgetFail;

        while select trvExpTrans
            where trvExpTrans.RecId == _trvExpTransRecId
        join ExpNumber, ApprovalStatus from trvExpTable
            where trvExpTable.RecId == trvExpTrans.TrvExpTable
        join RecId, CheckResult, CheckResultErrorWarning from budgetSource
            where budgetSource.SourceDocumentLine == trvExpTrans.SourceDocumentLine
        {
            if (budgetSource.CheckResult == BudgetCheckResult::PassedWithWarnings)
            {
                messages.insert(strFmt("@Expense:BudgetCheckResultPassedWithWarning", enum2Str(budgetSource.CheckResultErrorWarning)), MessageSeverity::Warning);
            }
            else if (budgetSource.CheckResult == BudgetCheckResult::Failed)
            {
                switch (trvExpTrans.ApprovalStatus)
                {
                    case TrvAppStatus::Create:
                        if (allowSubmit)
                        {
                            messages.insert(strFmt("@Expense:BudgetCheckResultMessage", enum2Str(budgetSource.CheckResultErrorWarning)), MessageSeverity::Warning);
                        }
                        else
                        {
                            messages.insert(strFmt("@Expense:ExpenseOrRequisitionSubmitCheckForBudget", "@SYS330421", trvExpTrans.ExpNumber, enum2Str(budgetSource.CheckResultErrorWarning)), MessageSeverity::Error);
                        }
                        break;

                    case TrvAppStatus::Pending:
                        if (allowApprove)
                        {
                            messages.insert(strFmt("@Expense:BudgetCheckResultMessage", enum2Str(budgetSource.CheckResultErrorWarning)), MessageSeverity::Warning);
                        }
                        else
                        {
                            messages.insert(strFmt("@Expense:ExpenseOrRequisitionApproveCheckForBudget", "@SYS330421", trvExpTrans.ExpNumber, enum2Str(budgetSource.CheckResultErrorWarning)), TrvPolicyViolationLevel::Error);
                        }
                        break;

                    case TrvAppStatus::Approved:
                        if (TrvBudgetCheckHelper::getOverBudgetAction() == BudgetCheckOverbudgetOption::AllowProcessing)
                        {
                            messages.insert(strFmt("@Expense:BudgetCheckResultMessage", enum2Str(budgetSource.CheckResultErrorWarning)), MessageSeverity::Warning);
                        }
                        else
                        {
                            messages.insert(strFmt("@Expense:ExpenseReportPostCheckForBudget", trvExpTrans.ExpNumber, enum2Str(budgetSource.CheckResultErrorWarning)), TrvPolicyViolationLevel::Error);
                        }
                        break;

                    default:
                        messages.insert(strFmt("@Expense:BudgetCheckResultMessage", enum2Str(budgetSource.CheckResultErrorWarning)), MessageSeverity::Warning);
                        break;
                }
            }
        }

        return messages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectBudgetViolationMsgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the travel requisition project budget violation messages.
    /// </summary>
    /// <param name = "_trvExpTableRecId">RecId for table <c>TrvExpTable</c></param>
    /// <returns>Map of the violation messages.</returns>
    public static Map getProjectBudgetViolationMsgs(RefRecId _trvExpTableRecId)
    {
        TrvExpTrans trvExpTrans;
        ProjBudgetStatus projBudgetStatus;
        ProjBudgetStatusDetail projBudgetStatusDetail;
        Map messages = new Map(Types::String, Types::Enum);

        while select projBudgetStatusDetail
            join projBudgetStatus
                where projBudgetStatus.RecId == projBudgetStatusDetail.ProjBudgetStatus
                    && (projBudgetStatus.BudgetCheckResult == ProjBudgetCheckResult::Failed
                        || projBudgetStatus.BudgetCheckResult == ProjBudgetCheckResult::PassedWithWarnings)
            join trvExpTrans
                where trvExpTrans.SourceDocumentLine == projBudgetStatus.SourceDocumentLine
                    && trvExpTrans.TrvExpTable == _trvExpTableRecId
        {
            if (projBudgetStatusDetail.Message != '')
            {
                if (projBudgetStatus.BudgetCheckResult == ProjBudgetCheckResult::Failed)
                {
                    messages.insert(projBudgetStatusDetail.Message, MessageSeverity::Error);
                }
                else
                {
                    messages.insert(projBudgetStatusDetail.Message, MessageSeverity::Warning);
                }
            }
        }

        return messages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpenseProjectBudgetViolationMsgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the expense line project budget violation messages.
    /// </summary>
    /// <param name = "_trvExpTableRecId">RecId for table <c>TrvExpTrans</c></param>
    /// <returns>Map of the violation messages.</returns>
    public static Map getExpenseProjectBudgetViolationMsgs(RefRecId _trvExpTransRecId)
    {
        TrvExpTrans trvExpTrans;
        ProjBudgetStatus projBudgetStatus;
        ProjBudgetStatusDetail projBudgetStatusDetail;
        Map messages = new Map(Types::String, Types::Enum);

        while select projBudgetStatusDetail
            join projBudgetStatus
                where projBudgetStatus.RecId == projBudgetStatusDetail.ProjBudgetStatus
                    && (projBudgetStatus.BudgetCheckResult == ProjBudgetCheckResult::Failed
                        || projBudgetStatus.BudgetCheckResult == ProjBudgetCheckResult::PassedWithWarnings)
            join trvExpTrans
                where trvExpTrans.SourceDocumentLine == projBudgetStatus.SourceDocumentLine
                    && trvExpTrans.RecId == _trvExpTransRecId
        {
            if (projBudgetStatusDetail.Message != '')
            {
                if (projBudgetStatus.BudgetCheckResult == ProjBudgetCheckResult::Failed)
                {
                    messages.insert(projBudgetStatusDetail.Message, MessageSeverity::Error);
                }
                else
                {
                    messages.insert(projBudgetStatusDetail.Message, MessageSeverity::Warning);
                }
            }
        }

        return messages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRequisitionProjectBudgetViolationMsgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the project budget violation messages.
    /// </summary>
    /// <param name = "_trvReqTableRecId">RecId for table <c>TrvRequisitionTable</c></param>
    public static void displayRequisitionProjectBudgetViolationMsgs(RefRecId _trvReqTableRecId)
    {
        Map messages = TrvBudgetCheckHelper::getRequisitionProjectBudgetViolationMsgs(_trvReqTableRecId);

        MapEnumerator enumerator = messages.getEnumerator();

        while (enumerator.moveNext())
        {
            switch (enumerator.currentValue())
            {
                case MessageSeverity::Error:
                    error(enumerator.currentKey());
                    break;

                case MessageSeverity::Warning:
                    warning(enumerator.currentKey());
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequisitionProjectBudgetViolationMsgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the travel requisition project budget violation messages.
    /// </summary>
    /// <param name = "_trvReqTableRecId">RecId for table <c>TrvRequisitionTable</c></param>
    /// <returns>Map of the violation messages.</returns>
    public static Map getRequisitionProjectBudgetViolationMsgs(RefRecId _trvReqTableRecId)
    {
        TrvRequisitionLine      trvReqLine;
        ProjBudgetStatus        projBudgetStatus;
        ProjBudgetStatusDetail  projBudgetStatusDetail;
        Map messages            = new Map(Types::String, Types::Enum);

        while select projBudgetStatusDetail
            join projBudgetStatus
                where projBudgetStatus.RecId == projBudgetStatusDetail.ProjBudgetStatus
                    && (projBudgetStatus.BudgetCheckResult == ProjBudgetCheckResult::Failed
                        || projBudgetStatus.BudgetCheckResult == ProjBudgetCheckResult::PassedWithWarnings)
            join trvReqLine
                where trvReqLine.SourceDocumentLine == projBudgetStatus.SourceDocumentLine
                    && trvReqLine.TrvRequisitionTable == _trvReqTableRecId
        {
            if (projBudgetStatusDetail.Message != '')
            {
                if (projBudgetStatus.BudgetCheckResult == ProjBudgetCheckResult::Failed)
                {
                    messages.insert(projBudgetStatusDetail.Message, MessageSeverity::Error);
                }
                else
                {
                    messages.insert(projBudgetStatusDetail.Message, MessageSeverity::Warning);
                }
            }
        }

        return messages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequisitionLineProjectBudgetViolationMsgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the requisition line project budget violation messages.
    /// </summary>
    /// <param name = "_trvReqLineRecId">RecId for table <c>TrvRequisitionLine</c></param>
    /// <returns>Map of the violation messages.</returns>
    public static Map getRequisitionLineProjectBudgetViolationMsgs(RefRecId _trvReqLineRecId)
    {
        TrvRequisitionLine      trvReqLine;
        ProjBudgetStatus        projBudgetStatus;
        ProjBudgetStatusDetail  projBudgetStatusDetail;
        Map messages            = new Map(Types::String, Types::Enum);

        while select projBudgetStatusDetail
            join projBudgetStatus
                where projBudgetStatus.RecId == projBudgetStatusDetail.ProjBudgetStatus
                    && (projBudgetStatus.BudgetCheckResult == ProjBudgetCheckResult::Failed
                        || projBudgetStatus.BudgetCheckResult == ProjBudgetCheckResult::PassedWithWarnings)
            join trvReqLine
                where trvReqLine.SourceDocumentLine == projBudgetStatus.SourceDocumentLine
                    && trvReqLine.RecId == _trvReqLineRecId
        {
            if (projBudgetStatusDetail.Message != '')
            {
                if (projBudgetStatus.BudgetCheckResult == ProjBudgetCheckResult::Failed)
                {
                    messages.insert(projBudgetStatusDetail.Message, MessageSeverity::Error);
                }
                else
                {
                    messages.insert(projBudgetStatusDetail.Message, MessageSeverity::Warning);
                }
            }
        }

        return messages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequisitionBudgetViolationMsgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build travel requisition budget violation message.
    /// </summary>
    /// <param name = "_trvRequisitionLineRecId"></param>
    /// <returns>
    /// Map that contains all the budget related messages.
    /// </returns>
    public static Map getRequisitionBudgetViolationMsgs(RefRecId _trvRequisitionLineRecId)
    {
        TrvRequisitionTable                     trvRequisitionTable;
        TrvRequisitionLine                      trvRequisitionLine;
        BudgetSource                            budgetSource;
        Map                                     messages                = new Map(Types::String, Types::Enum);
        TrvParameters                           trvParameters           = TrvParameters::find();
        boolean                                 allowSubmit             = trvParameters.IsAllowSubmitRequisitionOnBudgetFail;

        while select trvRequisitionLine
            where trvRequisitionLine.RecId == _trvRequisitionLineRecId
        join RequisitionNumber, ApprovalStatus from trvRequisitionTable
            where trvRequisitionTable.RecId == trvRequisitionLine.TrvRequisitionTable
        join RecId, CheckResult, CheckResultErrorWarning from budgetSource
            where budgetSource.SourceDocumentLine == trvRequisitionLine.SourceDocumentLine
        {
            if (budgetSource.CheckResult == BudgetCheckResult::PassedWithWarnings)
            {
                messages.insert(strFmt("@Expense:BudgetCheckResultPassedWithWarning", enum2Str(budgetSource.CheckResultErrorWarning)), MessageSeverity::Warning);
            }
            else if (budgetSource.CheckResult == BudgetCheckResult::Failed)
            {
                if (trvRequisitiontable.ApprovalStatus == TrvRequisitionApprovalStatus::Create && !allowSubmit)
                {
                    messages.insert(strFmt("@Expense:ExpenseOrRequisitionSubmitCheckForBudget", "@SYS153179", trvRequisitionTable.RequisitionNumber, enum2Str(budgetSource.CheckResultErrorWarning)), MessageSeverity::Error);
                }
                else
                {
                    messages.insert(strFmt("@Expense:BudgetCheckResultMessage", enum2Str(budgetSource.CheckResultErrorWarning)), MessageSeverity::Error);
                }
            }
        }

        return messages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjBudgetFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether any expense line has a project budget status of failed.
    /// </summary>
    /// <param name = "_trvExpTableRecId">RecId for table <c>TrvExpTable</c></param>
    /// <returns>
    /// True if a project budget check failed on any expense line; otherwise, false.
    /// </returns>
    public static boolean isProjBudgetFailed(RefRecId _trvExpTableRecId)
    {
        ProjBudgetStatus    projBudgetStatus;
        TrvExpTrans         trvExpTrans;

        select firstonly RecId from trvExpTrans
                        where trvExpTrans.TrvExpTable == _trvExpTableRecId
                     exists join RecId from projBudgetStatus
                        where projBudgetStatus.SourceDocumentLine == trvExpTrans.SourceDocumentLine
                            && projBudgetStatus.BudgetCheckResult == ProjBudgetCheckResult::Failed;

        return (trvExpTrans.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRequisitionProjBudgetFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether any requisition expense line has a project budget status of failed.
    /// </summary>
    /// <param name = "_trvReqTableRecId">RecId for table <c>TrvRequisitionTable</c></param>
    /// <returns>
    /// True if a project budget check failed on any requisition expense line; otherwise, false.
    /// </returns>
    public static boolean isRequisitionProjBudgetFailed(RefRecId _trvReqTableRecId)
    {
        ProjBudgetStatus        projBudgetStatus;
        TrvRequisitionLine      trvReqLine;

        select firstonly RecId from trvReqLine
            where trvReqLine.TrvRequisitionTable == _trvReqTableRecId
            exists join RecId from projBudgetStatus
                where projBudgetStatus.SourceDocumentLine == trvReqLine.SourceDocumentLine
                    && projBudgetStatus.BudgetCheckResult == ProjBudgetCheckResult::Failed;

        return (trvReqLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any expense line has budget status of failed.
    /// </summary>
    /// <param name = "_trvExpTableRecId">RecId for table <c>TrvExpTable</c></param>
    /// <returns>
    /// true if budget check failed on any expense line, false otherwise.
    /// </returns>
    public static boolean isBudgetFailed(RefRecId _trvExpTableRecId)
    {
        BudgetSource budgetSource;
        TrvExpTrans trvExpTrans;

        select firstonly RecId from trvExpTrans
                        where trvExpTrans.TrvExpTable == _trvExpTableRecId
                     join CheckResult from budgetSource
                        where budgetSource.SourceDocumentLine == trvExpTrans.SourceDocumentLine
                            && budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine
                           && budgetSource.CheckResult == BudgetCheckResult::Failed;

        return (trvExpTrans.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRequisitionBudgetFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any requisition expense line has budget status of failed.
    /// </summary>
    /// <param name = "_trvReqTableRecId">RecId for table <c>TrvRequisitionTable</c></param>
    /// <returns>
    /// True if budget check failed on any requisition expense line, false otherwise.
    /// </returns>
    public static boolean isRequisitionBudgetFailed(RefRecId _trvReqTableRecId)
    {
        BudgetSource        budgetSource;
        TrvRequisitionLine  trvReqLine;

        select firstonly RecId from trvReqLine
            where trvReqLine.TrvRequisitionTable == _trvReqTableRecId
            join CheckResult from budgetSource
                where budgetSource.SourceDocumentLine == trvReqLine.SourceDocumentLine
                    && budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine
                    && budgetSource.CheckResult == BudgetCheckResult::Failed;

        return (trvReqLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorIndicatorLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the adjusted final violation level for the expense after itemization, policy and budget checks.
    /// </summary>
    /// <param name = "_trvExpTrans">The expense to get the error indicator level for.</param>
    /// <param name = "_suppressJustificationError">
    /// True if justification related policy errors can be suppressed to warnings; otherwise false by default.
    /// This is used when the caller knows that justification record exists and policy re-evaluation might not have been done.
    /// </param>
    /// <returns>Error, Warning or None based on the expense's violation level.</returns>
    public static TrvPolicyViolationLevel errorIndicatorLevel(TrvExpTrans _trvExpTrans, boolean _suppressJustificationError = false)
    {
        return TrvBudgetCheckHelper::errorIndicatorLevelWithChildOption(_trvExpTrans, _suppressJustificationError, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorIndicatorLevelWithChildOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the adjusted final violation level for the expense after itemization, policy and budget checks.
    /// </summary>
    /// <param name = "_trvExpTrans">The expense to get the error indicator level for.</param>
    /// <param name = "_suppressJustificationError">
    /// True if justification related policy errors can be suppressed to warnings; otherwise false by default.
    /// This is used when the caller knows that justification record exists and policy re-evaluation might not have been done.
    /// </param>
    /// <param name = "_evaluateChildLines">
    /// The option indicating whether the produced result should include evaluation of the child lines for split and itemized headers.
    /// If this is set to true, then parents of children which evaluate into an error will themselves be considered in error.
    /// If this is set to false, the parents' result will be independent of its children and based only on evaluating the parent itself.
    /// </param>
    /// <returns>Error, Warning or None based on the expense's violation level.</returns>
    public static TrvPolicyViolationLevel errorIndicatorLevelWithChildOption(TrvExpTrans _trvExpTrans, boolean _suppressJustificationError = false, boolean _evaluateChildLines = true)
    {
        TrvPolicyViolationLevel level = TrvPolicyViolationLevel::None;
        TrvParameters           trvParameters;

        if (!_trvExpTrans)
        {
            return TrvPolicyViolationLevel::None;
        }

        if (!_trvExpTrans.isItemizationComplete())
        {
            return TrvPolicyViolationLevel::Error;
        }
        else
        {
            ProjBudgetControlErrorWarning projectBudgetLevel = _trvExpTrans.projectBudgetViolationLevel();
            BudgetCheckResult budgetLevel = _trvExpTrans.budgetViolationLevel();

            if (projectBudgetLevel == ProjBudgetControlErrorWarning::OverBudgetError
                    || budgetLevel == BudgetCheckResult::Failed)
            {
                trvParameters = TrvParameters::find();

                // In following cases we'll downgrade violation level from error to warning:
                // 1. Expense is in create status, have budget overrun, but allow submission for GL and project budget overrun.
                // 2. Expense is in pending status, have budget overrun, but allow approval for GL budget overrun.
                // 3. Expense is in approved status, have budget overrun, but allow processing for GL budget overrun.
                if ((_trvExpTrans.ApprovalStatus == TrvAppStatus::Create
                    && trvParameters.IsAllowSubmitRequisitionOnBudgetFail)
                    ||
                    (_trvExpTrans.ApprovalStatus == TrvAppStatus::Pending
                     && budgetLevel == BudgetCheckResult::Failed && trvParameters.IsAllowSubmitRequisitionOnBudgetFail)
                    ||
                    (_trvExpTrans.ApprovalStatus == TrvAppStatus::Approved
                     && budgetLevel == BudgetCheckResult::Failed && TrvBudgetCheckHelper::getOverBudgetAction() == BudgetCheckOverbudgetOption::AllowProcessing))
                {
                    level = TrvPolicyViolationLevel::Warning;
                }
                else
                {
                    return TrvPolicyViolationLevel::Error;
                }
            }
            else if (projectBudgetLevel == ProjBudgetControlErrorWarning::OverBudgetWarning
                    || budgetLevel == BudgetCheckResult::PassedWithWarnings)
            {
                level = TrvPolicyViolationLevel::Warning;
            }

            TrvPolicyViolationLevel policyLevel = _trvExpTrans.adjustedPolicyViolationLevel(_suppressJustificationError);
            if (policyLevel > level)
            {
                level = policyLevel;
            }

            // Policy check for itemized and split lines.
            if (_evaluateChildLines)
            {
                TrvExpTrans childExpenseLine;
                while select childExpenseLine
                where (childExpenseLine.LineType == TrvExpLineType::ItemizedLine
                      || childExpenseLine.SplitLineType == TrvExpSplitLineType::SplitLine)
                      && childExpenseLine.ParentRecId == _trvExpTrans.RecId
                {
                    TrvPolicyViolationLevel itemizedPolicyLevel = childExpenseLine.adjustedPolicyViolationLevel(_suppressJustificationError);
                    if (itemizedPolicyLevel > level)
                    {
                        level = itemizedPolicyLevel;
                    }

                    if (level == TrvPolicyViolationLevel::Error)
                    {
                        break;
                    }
                }
            }
        }

        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorIndicatorLevelRequisition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the adjusted final violation level for the travel requisition expense lines after policy and budget checks.
    /// </summary>
    /// <param name = "_trvReqLine">The travel requisition expense line to get the error indicator level for.</param>
    /// <param name = "_suppressJustificationError">
    /// True if justification related policy errors can be suppressed to warnings; otherwise false by default.
    /// This is used when the caller knows that justification record exists and policy re-evaluation might not have been done.
    /// </param>
    /// <returns>Error, Warning or None based on the requisition expense's violation level.</returns>
    public static TrvPolicyViolationLevel errorIndicatorLevelRequisition(TrvRequisitionLine _trvReqLine, boolean _suppressJustificationError = false)
    {
        TrvPolicyViolationLevel level   = TrvPolicyViolationLevel::None;
        TrvParameters                   trvParameters;

        if (!_trvReqLine)
        {
            return TrvPolicyViolationLevel::None;
        }
        else
        {
            ProjBudgetControlErrorWarning projectBudgetLevel = _trvReqLine.projectBudgetViolationLevel();
            BudgetCheckResult budgetLevel = _trvReqLine.budgetViolationLevel();

            if (projectBudgetLevel == ProjBudgetControlErrorWarning::OverBudgetError
                    || budgetLevel == BudgetCheckResult::Failed)
            {
                trvParameters = TrvParameters::find();

                // In following cases we'll downgrade violation level from error to warning:
                // 1. Travel requisition is in create status, have budget overrun, but allow submission for GL and project budget overrun.
                // 2. Travel requisition is in pending status, have budget overrun, but allow approval for GL budget overrun.
                // 3. Travel requisition is in approved status, have budget overrun, but allow processing for GL budget overrun.
                TrvRequisitionTable tvrReqTable;
                tvrReqTable = TrvRequisitionTable::find(_trvReqLine.TrvRequisitionTable);
                if ((tvrReqTable.ApprovalStatus == TrvRequisitionApprovalStatus::Create
                        && trvParameters.IsAllowSubmitRequisitionOnBudgetFail)
                    || (tvrReqTable.ApprovalStatus == TrvRequisitionApprovalStatus::Pending
                        && budgetLevel == BudgetCheckResult::Failed 
                        && trvParameters.IsAllowSubmitRequisitionOnBudgetFail)
                    || (tvrReqTable.ApprovalStatus == TrvRequisitionApprovalStatus::Approved
                        && budgetLevel == BudgetCheckResult::Failed 
                        && TrvBudgetCheckHelper::getOverBudgetAction() == BudgetCheckOverbudgetOption::AllowProcessing))
                {
                    level = TrvPolicyViolationLevel::Warning;
                }
                else
                {
                    return TrvPolicyViolationLevel::Error;
                }
            }
            else if (projectBudgetLevel == ProjBudgetControlErrorWarning::OverBudgetWarning
                    || budgetLevel == BudgetCheckResult::PassedWithWarnings)
            {
                level = TrvPolicyViolationLevel::Warning;
            }

            TrvPolicyViolationLevel policyLevel = _trvReqLine.adjustedPolicyViolationLevel(_suppressJustificationError);
            if (policyLevel > level)
            {
                level = policyLevel;
            }
        }

        return level;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>