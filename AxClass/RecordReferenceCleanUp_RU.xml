<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RecordReferenceCleanUp_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RecordReferenceCleanUp_RU extends RunBaseBatch implements BatchRetryable
{
    TransDate                   cleanupDate;
    DialogField                 dialogCleanupDate;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        cleanupDate
    #Endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteRecordReference</Name>
				<Source><![CDATA[
    private void deleteRecordReference(utcdatetime _cleanUpDateTime)
    {
        RecordReference_RU      recordReference;

        recordReference.skipDataMethods(true);
        recordReference.skipDeleteActions(true);

        delete_from recordReference
            where recordReference.CreatedDateTime <= _cleanUpDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        DialogRunbase   dialog = super();
        dialogCleanupDate = dialog.addFieldValue(extendedtypestr(TransDate),cleanupDate,"@SYS75241","@SYS75242");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        cleanupDate = dialogCleanupDate.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        #OCCRetryCount
        utcdatetime cleanUpDateTime = datetoendUtcDateTime(cleanupDate, DateTimeUtil::getUserPreferredTimeZone());

        setprefix(this.caption());
        try
        {
            ttsbegin;
            this.deleteRecordReference(cleanUpDateTime);
            ttscommit;

            info("@SYS27481");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer version     = conpeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion :
                [ version, #CurrentList ] = _packedClass;
                return true;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (!cleanupDate)
        {
            ret = checkFailed("@SYS24455");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static RecordReferenceCleanUp_RU construct()
    {
        return new RecordReferenceCleanUp_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS114020";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RecordReferenceCleanUp_RU recordRefrerenceCleanUp = RecordReferenceCleanUp_RU::construct();

        if (recordRefrerenceCleanUp.prompt())
        {
            recordRefrerenceCleanUp.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>