<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProjectsListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjProjectsListPageInteraction extends SysListPageInteractionBase
{
    ProjTable       projTable;
    ProjStatusType  projStatusType;
    
    #DEFINE.ProjectsListPage (ProjProjectsListPage)

    boolean hasBeginningBalanceRule;
    boolean supportsBudgeting;
    boolean hasProject3;
    boolean hasBillingRules;
    boolean hasAccessToActivity;
    boolean isRecordExternallyManaged;
    SecurityRights securityRights;

    #localmacro.ServerSettings
         hasBeginningBalanceRule
        ,supportsBudgeting
        ,hasProject3
        ,hasBillingRules
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkProjectStatus</Name>
				<Source><![CDATA[
    private boolean checkProjectStatus(ProjStatus _status)
    {
        ProjType projType       = projTable.Type;
        boolean  retval         = false;

        changecompany(projTable.company())
        {
            retval  = ProjStatusTypeRule::checkStatus(projType, _status);
        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Controls the enable or disable of action pane button.
    /// </summary>
    /// <param name = "_controlName">
    ///     Instance of <c>controlName</c>.
    /// </param>
    /// <param name = "_enabled">
    ///     A boolean value that indicates whether to make the action pane button enable or disable; optional.
    /// </param>
    protected void enableButton(str _controlName, boolean _enabled = true)
    {
        this.listPage().actionPaneControlEnabled(_controlName, _enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    public void initialized()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    public void initializeQuery(Query _query)
    {
        ProjLegalEntityLookupListPageHelper leLookupHelper = new ProjLegalEntityLookupListPageHelper(formStr(ProjProjectsListPage));

        _query = leLookupHelper.setCrossCompanyQuery(_query);

        // Add the range to show top level projects by default.
        _query.dataSourceTable(tableNum(ProjTable)).addRange(fieldNum(ProjTable, ParentId)).value(SysQuery::valueEmptyString());

        super(_query);

        _query.dataSourceTable(tableNum(CustTable)).addSelectionField(fieldNum(CustTable, Party));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAccess</Name>
				<Source><![CDATA[
    void setButtonAccess()
    {
        str beginningBalance                = formControlStr(#ProjectsListPage, beginningBalance);
        str subProjectNew                   = formControlStr(#ProjectsListPage, subProjectNew);
        str serviceAgreement                = formControlStr(#ProjectsListPage, serviceAggreement);
        str projBudgetBalances              = formControlStr(#ProjectsListPage, projBudgetBalances);
        str projBudget                      = formControlStr(#ProjectsListPage, projBudget);
        str projYearEndProcess              = formControlStr(#ProjectsListPage, projYearEndProcess);
        str serviceSubscriptions            = formControlStr(#ProjectsListPage, serviceSubscriptions);
        str periodicBatchSubscriptionFee    = formControlStr(#ProjectsListPage, periodicBatchSubscriptionFee);
        str indexSubscription               = formControlStr(#ProjectsListPage, indexSubscription);
        str accrueSubscriptionRevenue       = formControlStr(#ProjectsListPage, accrueSubscriptionRevenue);

        str resourceUtilizationGroup        = formControlStr(#ProjectsListPage, resourceUtilizationGroup);
        str createEstimate                  = formControlStr(#ProjectsListPage, CreateEstimate);
        str createEstimateV2                = formControlStr(#ProjectsListPage, CreateEstimateV2);
        str accrueRevenue                   = formControlStr(#ProjectsListPage, AccrueRevenue);
        str createInvoice                   = formControlStr(#ProjectsListPage, CreateInvoice);
        str createOnAccount                 = formControlStr(#ProjectsListPage, CreateOnAccount);
        str ctrlProjPeriodicPostingSales    = formControlStr(#ProjectsListPage, TimeAndMaterial);
        str ctrlSMAAccrueSubscription       = formControlStr(#ProjectsListPage, AccrueSubscriptionRevenue);

        isRecordExternallyManaged                   = Project::isProjectExternallyManaged(ProjTable.ProjId);
        boolean lockFieldsForCreateSubprojects      = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::CreateSubprojects) && isRecordExternallyManaged;
        boolean lockFieldsForCollaborationWorkspace = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::CollaborationWorkspace) && isRecordExternallyManaged;
        boolean lockFieldsForForecasts              = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::Forecasts) && isRecordExternallyManaged;
        boolean lockFieldsForProjectBudget          = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::ProjectBudget) && isRecordExternallyManaged;
        boolean lockFieldsForAdjustments            = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::Adjustments) && isRecordExternallyManaged;

        if (!lockFieldsForAdjustments
            && projTable.Status == ProjStatus::Completed)
        {
            lockFieldsForAdjustments = true;
        }

        boolean lockFieldsForProjectQuotations      = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::ProjectQuotations) && isRecordExternallyManaged;

        this.enableButton(beginningBalance, hasBeginningBalanceRule);
        this.enableButton(subProjectNew, projTable.Format ? true : false);
        this.enableButton(serviceAgreement, projStatusType.ctrlServiceAgreement());
        this.enableButton(serviceSubscriptions, projStatusType.ctrlSMASubscription());
        this.enableButton(periodicBatchSubscriptionFee, projStatusType.ctrlSMACreateSubscription());
        this.enableButton(indexSubscription, projStatusType.ctrlSMAIndexSubscription());
        this.enableButton(accrueSubscriptionRevenue, projStatusType.ctrlSMAAccrueSubscription());

        this.listPage().actionPaneControlEnabled(projBudgetBalances, supportsBudgeting);
        this.listPage().actionPaneControlEnabled(projBudget, projTable.UseBudgeting && !lockFieldsForProjectBudget);
        this.listPage().actionPaneControlEnabled(projYearEndProcess, projTable.UseBudgeting);

        if (hasProject3)
        {
            this.setControlVisibility(resourceUtilizationGroup, true);
            this.enableButton(subProjectNew, (projTable.Format ? true : false) && (projTable.psaSchedCalendarId != ""));
        }

        if (FeatureStateProvider::isFeatureEnabled(ProjEstimatesToRevRecRenameFeature::instance()))
        {
            this.enableButton(createEstimateV2, projTable.allowEstimateCreation());
        }
        else
        {
            this.enableButton(createEstimate, projTable.allowEstimateCreation());
        }

        this.enableButton(ctrlProjPeriodicPostingSales, projStatusType.ctrlProjPeriodicPostingSales());
        this.enableButton(ctrlSMAAccrueSubscription, projStatusType.ctrlSMAAccrueSubscription());
        this.enableButton(accrueRevenue, (projStatusType.ctrlProjPeriodicPostingSales() || projStatusType.ctrlSMAAccrueSubscription()));

        this.enableButton(createInvoice, projStatusType.ctrlInvoices());
        this.enableButton(createOnAccount, projStatusType.ctrlOnAcc());

        this.setButtonActivity();

		if (hasBillingRules)
		{
			this.setControlVisibility(formControlStr(#ProjectsListPage, PSAProjProposalSelection), false);
			this.setControlVisibility(formControlStr(#ProjectsListPage, PSAProjProposalSelectionCLIN), true);
		}
		else
		{
			this.setControlVisibility(formControlStr(#ProjectsListPage, PSAProjProposalSelection), true);
			this.setControlVisibility(formControlStr(#ProjectsListPage, PSAProjProposalSelectionCLIN), false);
		}

        this.setProjectStageAction();

        FormDataSource projTable_ds = projTable.dataSource();

        boolean collabSiteExist = CollabSiteLink::existCollabSiteProject(projTable.ProjId);
        this.enableButton(formControlStr(#ProjectsListPage, CreateSite), !collabSiteExist && !lockFieldsForCollaborationWorkspace);
        this.enableButton(formControlStr(#ProjectsListPage, LinkSite), !collabSiteExist && !lockFieldsForCollaborationWorkspace);
        this.enableButton(formControlStr(#ProjectsListPage, DeleteSite), collabSiteExist && !lockFieldsForCollaborationWorkspace);
        this.enableButton(formControlStr(#ProjectsListPage, UnlinkSite), collabSiteExist && !lockFieldsForCollaborationWorkspace);
        if (!CollabSiteParameters::exist(CollabSiteEntityType::Project))
        {
            this.enableButton(formControlStr(#ProjectsListPage, CreateSite), false);
            this.enableButton(formControlStr(#ProjectsListPage, DeleteSite), false);
        }

        this.enableButton(SubProjectNew, !lockFieldsForCreateSubprojects);
        this.enableButton(formControlStr(#ProjectsListPage, CopyBudget), !lockFieldsForForecasts);
        this.enableButton(formControlStr(#ProjectsListPage, DeleteBudget), !lockFieldsForForecasts);
        this.enableButton(formControlStr(#ProjectsListPage, TransferQuotationLines), (!lockFieldsForForecasts && !lockFieldsForProjectQuotations));
        this.enableButton(formControlStr(#ProjectsListPage, ProjForecastTransferFromWbs), !lockFieldsForForecasts);
        this.enableButton(formControlStr(#ProjectsListPage, ProjectQuotation), (!lockFieldsForProjectQuotations));
        this.enableButton(formControlStr(#ProjectsListPage, CreateAdjustment), !lockFieldsForAdjustments);
        this.enableButton(formControlStr(#ProjectsListPage, ProjForecastTransferFromQuotationItemReq), !lockFieldsForProjectQuotations);
  
        if (!ProjInvoiceTable::hasExternalFundingSources(projTable.ProjInvoiceProjId))
        {
            this.enableButton(formControlStr(#ProjectsListPage, CtrlSalesOrders), false);
            this.enableButton(formControlStr(#ProjectsListPage, SalesOrderEntry), false);
        }
        else
        {
            this.enableButton(formControlStr(#ProjectsListPage, CtrlSalesOrders), true);
            this.enableButton(formControlStr(#ProjectsListPage, SalesOrderEntry), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonActivity</Name>
				<Source><![CDATA[
    public void setButtonActivity(boolean _enabled = true)
    {
        str activities                  = formControlStr(ProjProjectsListPage, activities);

        // Verify if securityRights object is not null, otherwise reinitialize
        if (securityRights == null)
        {
            securityRights = SecurityRights::construct();
        }

        if (hasProject3)
        {
            hasAccessToActivity = securityRights.hasMenuItemAccess(SecurableType::MenuItemDisplay, menuitemDisplayStr(ProjActivity));
        }
        else
        {
            hasAccessToActivity = securityRights.hasMenuItemAccess(SecurableType::MenuItemDisplay, menuitemDisplayStr(ProjActivityOriginal));
        }

        boolean lockFieldsForWbs = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::WorkBreakdownStructure) && isRecordExternallyManaged;

        if (projTable.Header)
        {
            this.enableButton(activities, false);
        }
        else
        {
            this.enableButton(activities, hasAccessToActivity && projStatusType.ctrlActivity() && !lockFieldsForWbs);
        }

        str openInProject                  = formControlStr(ProjProjectsListPage, projectWbsOpenInMSProject);
        this.enableButton(openInProject, (ProjPlanVersionDetail::findProjectDraftVersion(projTable.ProjId).RecId != 0) && !lockFieldsForWbs);

        str unlinkProject                  = formControlStr(ProjProjectsListPage, btnUnlinkProject);
        this.enableButton(unlinkProject, ProjectWbsLockBox::isSynchedInMSProject(projTable.ProjId) && !lockFieldsForWbs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonBasedOnBillingRule</Name>
				<Source><![CDATA[
    private void setButtonBasedOnBillingRule()
    {
        str psaProjProposalSelection = formControlStr(#ProjectsListPage, PSAProjProposalSelection);
        str psaProjProposalSelectionCLIN = formControlStr(#ProjectsListPage, PSAProjProposalSelectionCLIN);

        if (hasBillingRules)
        {
            this.showButton(psaProjProposalSelection,false);
            this.showButton(psaProjProposalSelectionCLIN,true);
        }
        else
        {
            this.showButton(psaProjProposalSelection,true);
            this.showButton(psaProjProposalSelectionCLIN,false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled property on the action pane buttons.
    /// </summary>
    /// <remarks>
    /// This method is called every time that the selection of the record in the list page changes.
    /// </remarks>
    protected void setButtonEnabled()
    {
        boolean canInvProposalCreated;
        boolean         hasPublished    = ProjPlanVersionDetail::checkProjectHasPublishedHierarchy(projTable.ProjId);
        // pre-fetch this data
        projTable           = this.listPage().activeRecord(identifierStr(ProjTable));
        projStatusType      = projTable.status();

        [ #ServerSettings ] = ProjProjectsListPageInteraction::loadServer(projTable);

        this.enableButton(formControlStr(#ProjectsListPage, PSAProjProposalSelection), true);
        this.enableButton(formControlStr(#ProjectsListPage, PSAProjProposalSelectionCLIN), true);
        this.enableButton(formControlStr(#ProjectsListPage, ProjWBSTrackingViewButton), hasPublished);
        this.setButtonAccess();

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.setButtonBasedOnBillingRule();
        }

        changecompany(projTable.company())
        {
            boolean enableInvoiceProposal = ProjInvoiceTable::canCreateInvoiceProposal(projTable.ProjInvoiceProjId);
            canInvProposalCreated = enableInvoiceProposal && ProjStatusTypeRule::exist(projTable.Status, projTable.Type, ProjStatusRule::CreateInvoiceProposal);
        }

        this.enableButton(formControlStr(#ProjectsListPage, PSAProjProposalSelection), canInvProposalCreated);
        this.enableButton(formControlStr(#ProjectsListPage, PSAProjProposalSelectionCLIN), canInvProposalCreated);

        if (projTable.Status == ProjStatus::Created)
        {
            this.enableButton(formControlStr(#ProjectsListPage, ProjInvoiceProposalListPage), false);
        }
        else
        {
            this.enableButton(formControlStr(#ProjectsListPage, ProjInvoiceProposalListPage), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlVisibility</Name>
				<Source><![CDATA[
    private void setControlVisibility(str _controlName, boolean _visible = true)
    {
        this.listPage().actionPaneControlVisible(_controlName, _visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjectStageAction</Name>
				<Source><![CDATA[
    void setProjectStageAction(boolean _enabled = true)
    {
        ProjType projType       = projTable.Type;

        str customerAdvanceAmount               =  formControlStr(#ProjectsListPage, CustomerAdvanceAmount);
        str customerAdvancePercent              =  formControlStr(#ProjectsListPage, CustomerAdvancePercent);
        str psaRetentionRelease                 =  formControlStr(#ProjectsListPage, PSARetentionRelease);
        str psaCustomerPaymentRetentionInquiry  =  formControlStr(#ProjectsListPage, PSACustomerPaymentRetentionInquiry);

        str ctrlCreated   = formControlStr(#ProjectsListPage, ctrlCreated);
        str ctrlEstimated = formControlStr(#ProjectsListPage, ctrlEstimated);
        str ctrlScheduled = formControlStr(#ProjectsListPage, ctrlScheduled);
        str ctrlStartUp   = formControlStr(#ProjectsListPage, ctrlStartUp);
        str ctrlUser1     = formControlStr(#ProjectsListPage, ctrlUser1);
        str ctrlUser2     = formControlStr(#ProjectsListPage, ctrlUser2);
        str ctrlUser3     = formControlStr(#ProjectsListPage, ctrlUser3);
        str ctrlReportedFinish = formControlStr(#ProjectsListPage, ctrlReportedFinish);

        if (this.checkProjectStatus(ProjStatus::Created))
        {
            this.showButton(ctrlCreated, true);
            this.enableButton(ctrlCreated, projTable.Status != ProjStatus::Created);
        }
        else
        {
            this.showButton(ctrlCreated, false);
        }

        if (this.checkProjectStatus(ProjStatus::Estimated))
        {
            this.showButton(ctrlEstimated, true);
            this.enableButton(ctrlEstimated, projTable.Status != ProjStatus::Estimated);
        }
        else
        {
            this.showButton(ctrlEstimated, false);
        }

        if (this.checkProjectStatus(ProjStatus::Scheduled))
        {
            this.showButton(ctrlScheduled, true);
            this.enableButton(ctrlScheduled, projTable.Status != ProjStatus::Scheduled);
        }
        else
        {
            this.showButton(ctrlScheduled, false);
        }

        if (this.checkProjectStatus(ProjStatus::InProcess))
        {
            this.showButton(ctrlStartUp, true);
            this.enableButton(ctrlStartUp, projTable.Status != ProjStatus::InProcess);
        }
        else
        {
            this.showButton(ctrlStartUp, false);
        }

        if (this.checkProjectStatus(ProjStatus::User1))
        {
            this.showButton(ctrlUser1, true);
            this.enableButton(ctrlUser1, projTable.Status != ProjStatus::User1);
        }
        else
        {
            this.showButton(ctrlUser1, false);
        }

        if (this.checkProjectStatus(ProjStatus::User2))
        {
            this.showButton(ctrlUser2, true);
            this.enableButton(ctrlUser2, projTable.Status != ProjStatus::User2);
        }
        else
        {
            this.showButton(ctrlUser2, false);
        }

        if (this.checkProjectStatus(ProjStatus::User3))
        {
            this.showButton(ctrlUser3, true);
            this.enableButton(ctrlUser3, projTable.Status != ProjStatus::User3);
        }
        else
        {
            this.showButton(ctrlUser3, false);
        }

        if (this.checkProjectStatus(ProjStatus::Completed))
        {
            this.showButton(ctrlReportedFinish, true);
            this.enableButton(ctrlReportedFinish, projTable.Status != ProjStatus::Completed);
        }
        else
        {
            this.showButton(ctrlReportedFinish, false);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            boolean canCustomerAdvanceBeCreated = ProjStatusTypeRule::exist(projTable.Status, projTable.Type, ProjStatusRule::CreateInvoiceProposal);

            this.enableButton(customerAdvanceAmount, canCustomerAdvanceBeCreated);
            this.enableButton(customerAdvancePercent, canCustomerAdvanceBeCreated && projTable.UseBudgeting);

            boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

            this.showButton(psaRetentionRelease, ((projTable.Type == ProjType::TimeMaterial
                                                  || projTable.Type == ProjType::FixedPrice) || (enableProjMultipleContractLinesForProjectFeature && projTable.ProjInvoiceProjId)));
            this.showButton(psaCustomerPaymentRetentionInquiry, ((projTable.Type == ProjType::TimeMaterial
                                                  || projTable.Type == ProjType::FixedPrice) || (enableProjMultipleContractLinesForProjectFeature && projTable.ProjInvoiceProjId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Controls the visibility of action pane button.
    /// </summary>
    /// <param name = "_controlName">
    ///     Instance of <c>controlName</c>.
    /// </param>
    /// <param name = "_visible">
    ///     A boolean value that indicates whether to make the action pane button visible; optional.
    /// </param>
    protected void showButton(str _controlName, boolean _visible = true)
    {
        this.listPage().actionPaneControlVisible(_controlName, _visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadServer</Name>
				<Source><![CDATA[
    private static container loadServer(ProjTable projTable)
    {
        boolean         hasBeginningBalanceRule;
        boolean         supportsBudgeting;
        boolean         hasProject3;
        boolean         hasBillingRules;

        changecompany(projTable.company())
        {
            hasBeginningBalanceRule = ProjTable::isBegBalRuleDefined(projTable.ProjId);
            supportsBudgeting       = projTable.supportsBudgeting();
            hasProject3             = isConfigurationkeyEnabled(configurationKeyNum(Project));

            if (FeatureStateProvider::isFeatureEnabled(ProjCreationOfInvoiceProposalBasedOnBillingRuleAvailabilityFeature::instance()))
            {
                hasBillingRules = ProjInvoiceTable::hasBillingRulesForSelectedProject(projTable.ProjInvoiceProjId, projTable.ProjId);
            }
            else
            {
                hasBillingRules = PSAContractLineItems::hasBillingRules(projTable.ProjInvoiceProjId);
            }
        }

        return [ #ServerSettings ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>openProjectWBS</Name>
				<Source><![CDATA[
    [SysObsoleteAttribute('This method is replaced by openProjectWBSV2 to support form object as caller as form run argument.', false, 14\02\2018)]
    public static void openProjectWBS(ProjTable projTable, ProjViewType _projViewType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>openProjectWBSV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the project WBS form with specificed view type.
    /// </summary>
    /// <param name="projTable">
    /// A <c>ProjTable</c> table buffer that contains a project record.
    /// </param>
    /// <param name="_projViewType">
    /// A <c>ProjectViewType</c> value that indicates view type of WBS form when opened.
    /// </param>
    /// <param name="_callerObject">
    /// Caller form object.
    /// </param>
    public static void openProjectWBSV2(ProjTable projTable, ProjViewType _projViewType, Object _callerObject)
    {
        Args                args;
        FormRun             formWBS;
        HierarchyLinkTable  hierarchyLinkTable;
        Hierarchy           hierarchy;
        HierarchyIdBase     hierarchyId;

        if (ProjTable.PSASchedCalendarId == null)
        {
            error("@Proj:ProjectScheduleError");
            return;
        }

        hierarchyLinkTable = HierarchyLinkTable::findRefTableRecId(tableNum(ProjTable), projTable.RecId, true);
        if (hierarchyLinkTable == null)
        {
            // Hierarchy does not exist yet; create it and the draft WBS version.
            HierarchyCreate hierarchyCreate = HierarchyCreate::construct(HierarchyType::Project);
            hierarchyCreate.parmSourceCommon(projTable);
            hierarchyCreate.run();
            hierarchy = hierarchyCreate.parmHierarchy();
            hierarchyId = hierarchy.HierarchyId;
        }
        else
        {
            hierarchyId = hierarchyLinkTable.HierarchyId;
            hierarchy = Hierarchy::find(hierarchyId);
        }

        if (!(ProjPlanVersionDetail::existsProject(projTable.ProjId)))
        {
            ProjPlanVersionsManager::createDraft(hierarchyId, projTable.ProjId, projTable.PSASchedStartDate, projTable.PSASchedEndDate, projTable.ProjId);
        }
        
        if (hierarchy)
        {
            args = new Args();

            if (_projViewType == ProjViewType::PlanningView)
            {
                args.menuitemname(menuItemDisplayStr(ProjActivity));
                args.name(formStr(ProjWorkBreakdownStructureV2));
                args.record(projTable);
            }
            else
            {
                args.menuItemName(menuItemDisplayStr(ProjTrackingViews));
                args.name(formstr(ProjTrackingViews));
                args.openMode(OpenMode::View);
            }

            args.caller(_callerObject);
            args.parm(hierarchyId);
            formWBS = classfactory.formRunClass(args);
            formWBS.init();
            formWBS.run();
            formWBS.wait();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>