<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAccountNumRenameDataMaintenanceService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustAccountNumRenameDataMaintenanceService</c> class manages customer data maintenance operations.
/// </summary>
internal final class CustAccountNumRenameDataMaintenanceService
{
    private static CustInstrumentationLogger custInstrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>detectOutOfSyncCustAccountNumObjectReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detect the out of sync references of <c>CustTable</c> accountNum field.
    /// </summary>
    /// <param name = "_oldCustAccount">
    /// Renamed customer account which need to be changed or is out of sync with the changed customer account.
    /// </param>
    /// <param name = "_custAccountNumRenameDataMaintenanceRecId">
    /// The <c>CustAccountNumRenameDataMaintenance</c> record id to be processed.
    /// </param>
    public static void detectOutOfSyncCustAccountNumObjectReferences(CustAccount _oldCustAccount, CustAccountNumRenameDataMaintenanceRecId _custAccountNumRenameDataMaintenanceRecId)
    {
        CustAccountNumObjectReferences custAccountNumObjectReferences;
        CustAccountNumRenameDataMaintenanceTracking custAccountNumRenameDataMaintenanceTracking;

        delete_from custAccountNumRenameDataMaintenanceTracking
            where custAccountNumRenameDataMaintenanceTracking.CustAccountNumRenameDataMaintenance == _custAccountNumRenameDataMaintenanceRecId
                && (custAccountNumRenameDataMaintenanceTracking.ProcessStatus == CustAccountNumRenameDataMaintenanceStatus::NotStarted
                    || custAccountNumRenameDataMaintenanceTracking.ProcessStatus == CustAccountNumRenameDataMaintenanceStatus::Error);

        RecordInsertList recordList = new RecordInsertList(tableNum(CustAccountNumRenameDataMaintenanceTracking));

        while select custAccountNumObjectReferences order by custAccountNumObjectReferences.ReferenceTableName
        {
            DictTable dictTable = new DictTable(custAccountNumObjectReferences.ReferenceTableNum);
            Common common = dictTable.makeRecord();
            common.skipAosValidation(true);
            common.skipDatabaseLog(true);
            common.skipBusinessEvents(true);
            common.skipDataMethods(true);
            common.skipEvents(true);

            // Create the query object
            SysDaQueryObject query = new SysDaQueryObject(common);

            // Add the count(RecId) selection. Query: select count(RecId) from TableName
            query.projection().addCount(fieldStr(common, RecId));

            // Where clause for the query. Query: select count(RecId) from TableName where TableName.AcountNumFiledName = _oldCustAccount;
            SysDaQueryExpression whereClause = new SysDaEqualsExpression(
                                                        new SysDaFieldExpression(common, custAccountNumObjectReferences.ReferenceFieldName),
                                                        new SysDaValueExpression(_oldCustAccount)
                                                    );

            query.whereClause(whereClause);

            SysDaSearchObject searchQuery = new SysDaSearchObject(query);

            SysDaSearchStatement searchStatement = new SysDaSearchStatement();

            if (searchStatement.findNext(searchQuery))
            {
                if (common.RecId > 0)
                {
                    custAccountNumRenameDataMaintenanceTracking.clear();

                    custAccountNumRenameDataMaintenanceTracking.CustAccountNumRenameDataMaintenance = _custAccountNumRenameDataMaintenanceRecId;
                    custAccountNumRenameDataMaintenanceTracking.ReferenceTableName = custAccountNumObjectReferences.ReferenceTableName;
                    custAccountNumRenameDataMaintenanceTracking.ReferenceFieldName = custAccountNumObjectReferences.ReferenceFieldName;
                    custAccountNumRenameDataMaintenanceTracking.ReferenceTableNum = custAccountNumObjectReferences.ReferenceTableNum;
                    custAccountNumRenameDataMaintenanceTracking.ReferenceFieldNum = custAccountNumObjectReferences.ReferenceFieldNum;
                    custAccountNumRenameDataMaintenanceTracking.OutOfSyncRecordCount = common.RecId;
                    custAccountNumRenameDataMaintenanceTracking.Selected = NoYes::Yes;

                    recordList.add(custAccountNumRenameDataMaintenanceTracking);
                }
            }
        }

        recordList.insertDatabase();

        custAccountNumRenameDataMaintenanceTracking.clear();

        select count(RecId) from custAccountNumRenameDataMaintenanceTracking
            where custAccountNumRenameDataMaintenanceTracking.CustAccountNumRenameDataMaintenance == _custAccountNumRenameDataMaintenanceRecId
                && custAccountNumRenameDataMaintenanceTracking.ProcessStatus != CustAccountNumRenameDataMaintenanceStatus::Completed;

        // If no record is found for processing then update the status of data maintenance to completed.
        if (custAccountNumRenameDataMaintenanceTracking.RecId == 0)
        {
            CustAccountNumRenameDataMaintenance custAccountNumRenameDataMaintenance;

            ttsbegin;

            select firstonly forupdate custAccountNumRenameDataMaintenance
                where custAccountNumRenameDataMaintenance.RecId == _custAccountNumRenameDataMaintenanceRecId;

            if (custAccountNumRenameDataMaintenance.RecId)
            {
                custAccountNumRenameDataMaintenance.ProcessStartDateTime = DateTimeUtil::getSystemDateTime();
                custAccountNumRenameDataMaintenance.ProcessEndDateTime = custAccountNumRenameDataMaintenance.ProcessStartDateTime;
                custAccountNumRenameDataMaintenance.ProcessStatus = CustAccountNumRenameDataMaintenanceStatus::Completed;

                custAccountNumRenameDataMaintenance.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDataMaintenanceRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the customer account rename data maintenance request.
    /// </summary>
    /// <param name = "_custAccountNumRenameDataMaintenanceRequestContract">
    /// Object of <c>CustAccountNumRenameDataMaintenanceRequestContract</c> class.
    /// </param>
    public static void processDataMaintenanceRequest(CustAccountNumRenameDataMaintenanceRequestContract _custAccountNumRenameDataMaintenanceRequestContract)
    {
        CustAccountNumRenameDataMaintenanceTracking custAccountNumRenameDataMaintenanceTracking;
        CustAccountNumRenameDataMaintenanceRecId custAccountNumRenameDataMaintenanceRecId = _custAccountNumRenameDataMaintenanceRequestContract.parmCustAccountNumRenameDataMaintenanceRecId();

        CustAccountNumRenameDataMaintenance::setProcessGroupStatus(custAccountNumRenameDataMaintenanceRecId, CustAccountNumRenameDataMaintenanceStatus::Executing);

        while select forupdate custAccountNumRenameDataMaintenanceTracking
            where custAccountNumRenameDataMaintenanceTracking.CustAccountNumRenameDataMaintenance == custAccountNumRenameDataMaintenanceRecId
                && custAccountNumRenameDataMaintenanceTracking.Selected == NoYes::Yes
                && (custAccountNumRenameDataMaintenanceTracking.ProcessStatus == CustAccountNumRenameDataMaintenanceStatus::NotStarted
                    || custAccountNumRenameDataMaintenanceTracking.ProcessStatus == CustAccountNumRenameDataMaintenanceStatus::Error)
        {
            DictTable dictTable = new DictTable(custAccountNumRenameDataMaintenanceTracking.ReferenceTableNum);
            Common common = dictTable.makeRecord();

            // Create the update query object
            SysDaUpdateObject updateObject = new SysDaUpdateObject(common);

            // Add the setting clause. Query : update tableName set custAccountNumRenameDataMaintenanceTracking.ReferenceFieldName = newCustAccount;
            updateObject.settingClause().add(
                    custAccountNumRenameDataMaintenanceTracking.referenceFieldName,
                    new SysDaValueExpression(_custAccountNumRenameDataMaintenanceRequestContract.parmNewCustAccount())
                );

            // Add where clause. 
            // Query: update tableName set custAccountNumRenameDataMaintenanceTracking.ReferenceFieldName = targetCustAccount where custAccountNumRenameDataMaintenanceTracking.ReferenceFieldName = oldCustAccount;
            updateObject.whereClause(
                    new SysDaEqualsExpression(
                        new SysDaFieldExpression(common, custAccountNumRenameDataMaintenanceTracking.ReferenceFieldName),
                        new SysDaValueExpression(_custAccountNumRenameDataMaintenanceRequestContract.parmOldCustAccount()))
                );

            SysDaUpdateStatement updateStatement = new SysDaUpdateStatement();

            CustAccountNumRenameDataMaintenanceTracking::setProcessGroupStatus(custAccountNumRenameDataMaintenanceTracking.RecId, CustAccountNumRenameDataMaintenanceStatus::Executing);

            System.Exception exception;

            using(SysInstrumentationActivityContext activityContext = CustAccountNumRenameDataMaintenanceService::getActivityContextForRun(CustAccountNumRenameInstrumentationConstants::CustAccountNumRenameProcessRecords))
            {
                try
                {
                    ttsbegin;
                    updateStatement.execute(updateObject);
                    ttscommit;

                    CustAccountNumRenameDataMaintenanceTracking::setProcessGroupStatus(custAccountNumRenameDataMaintenanceTracking.RecId, CustAccountNumRenameDataMaintenanceStatus::Completed);
                }
                catch (exception)
                {
                    activityContext.addCustomProperty(CustAccountNumRenameInstrumentationConstants::TableName, custAccountNumRenameDataMaintenanceTracking.ReferenceTableName);
                    activityContext.addCustomProperty(CustAccountNumRenameInstrumentationConstants::TableError, exception.Message);

                    CustAccountNumRenameDataMaintenanceTracking::setProcessGroupStatus(custAccountNumRenameDataMaintenanceTracking.RecId, CustAccountNumRenameDataMaintenanceStatus::Error);
                }
            }
        }

        CustAccountNumRenameDataMaintenanceService::changeDataMaintenanceStatus(custAccountNumRenameDataMaintenanceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectedForExecution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Select or unselect the <c>CustAccountNumRenameDataMaintenanceTracking</c> records for particular customer account rename data maintenance.
    /// </summary>
    /// <param name = "_custAccountNumRenameDataMaintenanceRecId">
    /// The <c>CustAccountNumRenameDataMaintenance</c> record id to be processed.
    /// </param>
    /// <param name = "_selected">
    /// Weather to select the record or unselect it.
    /// </param>
    public static void setSelectedForExecution(CustAccountNumRenameDataMaintenanceRecId _custAccountNumRenameDataMaintenanceRecId, NoYes _selected)
    {
        CustAccountNumRenameDataMaintenanceTracking custAccountNumRenameDataMaintenanceTracking;

        update_recordset custAccountNumRenameDataMaintenanceTracking
            setting Selected = _selected
            where custAccountNumRenameDataMaintenanceTracking.CustAccountNumRenameDataMaintenance == _custAccountNumRenameDataMaintenanceRecId
                && (custAccountNumRenameDataMaintenanceTracking.ProcessStatus == CustAccountNumRenameDataMaintenanceStatus::NotStarted
                    || custAccountNumRenameDataMaintenanceTracking.ProcessStatus == CustAccountNumRenameDataMaintenanceStatus::Error);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeDataMaintenanceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change the status of customer account data maintenance once the processing of tables are done.
    /// </summary>
    /// <param name = "_custAccountNumRenameDataMaintenanceRecId">
    /// The <c>CustAccountNumRenameDataMaintenance</c> record id to be processed.
    /// </param>
    public static void changeDataMaintenanceStatus(CustAccountNumRenameDataMaintenanceRecId _custAccountNumRenameDataMaintenanceRecId)
    {
        int64 selectedTableCount = CustAccountNumRenameDataMaintenanceTracking::getSelectedTableCount(_custAccountNumRenameDataMaintenanceRecId);
        int64 notStartedTableCount = CustAccountNumRenameDataMaintenanceTracking::getTableCountBasedOnStatus(_custAccountNumRenameDataMaintenanceRecId, CustAccountNumRenameDataMaintenanceStatus::NotStarted);
        int64 errorTableCount = CustAccountNumRenameDataMaintenanceTracking::getTableCountBasedOnStatus(_custAccountNumRenameDataMaintenanceRecId, CustAccountNumRenameDataMaintenanceStatus::Error);

        if (errorTableCount && selectedTableCount == errorTableCount)
        {
            CustAccountNumRenameDataMaintenance::setProcessGroupStatus(_custAccountNumRenameDataMaintenanceRecId, CustAccountNumRenameDataMaintenanceStatus::Error);
        }
        else if (notStartedTableCount || errorTableCount)
        {
            CustAccountNumRenameDataMaintenance::setProcessGroupStatus(_custAccountNumRenameDataMaintenanceRecId, CustAccountNumRenameDataMaintenanceStatus::PartiallyCompleted);
        }
        else
        {
            CustAccountNumRenameDataMaintenance::setProcessGroupStatus(_custAccountNumRenameDataMaintenanceRecId, CustAccountNumRenameDataMaintenanceStatus::Completed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCustAccountNumRenameDataMaintenance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the customer account rename data maintenance and process it in batch
    /// </summary>
    /// <param name = "_oldCustAccount">
    /// Old customer account.
    /// </param>
    /// <param name = "_newCustAccount">
    /// New customer account.
    /// </param>
    /// <param name = "_renamedDateTime">
    /// Date and time when the rename was triggered.
    /// </param>
    /// <
    public static void generateCustAccountNumRenameDataMaintenance(CustAccount _oldCustAccount, CustAccount _newCustAccount, UtcDateTime _renamedDateTime)
    {
        // Create the controller object
        CustAccountNumRenameDataMaintenanceController custAccountNumRenameDataMaintenanceController = new CustAccountNumRenameDataMaintenanceController(
                classStr(CustAccountNumRenameDataMaintenanceController),
                methodStr(CustAccountNumRenameDataMaintenanceController, detectAndProcessDataMaintenanceRequest),
                SysOperationExecutionMode::ScheduledBatch);

        // Create customer account rename data maintenance entry
        CustAccountNumRenameDataMaintenanceRecId  custAccountNumRenameDataMaintenanceRecId = CustAccountNumRenameDataMaintenanceService::createCustAccountNumRenameDataMaintenanceEntry(_oldCustAccount, _newCustAccount, _renamedDateTime);

        // Set the parameter
        custAccountNumRenameDataMaintenanceController.setDataMaintenanceRequest(_oldCustAccount, _newCustAccount, custAccountNumRenameDataMaintenanceRecId);
        custAccountNumRenameDataMaintenanceController.parmShowDialog(false);
        custAccountNumRenameDataMaintenanceController.parmDialogCaption('@CreditCollections:CustAccountNumRenameDataMaintenance');

        CustAccountNumRenameDataMaintenance::setProcessGroupStatus(custAccountNumRenameDataMaintenanceRecId, CustAccountNumRenameDataMaintenanceStatus::Waiting);

        // Add the job to batch queue
        custAccountNumRenameDataMaintenanceController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustAccountNumRenameDataMaintenanceEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create customer rename data maintenance record
    /// </summary>
    /// <param name = "_oldCustAccount">
    /// Old customer account.
    /// </param>
    /// <param name = "_newCustAccount">
    /// New customer account.
    /// </param>
    /// <param name = "_renamedDateTime">
    /// Date and time when the rename was triggered.
    /// </param>
    /// <returns>
    /// Recid of the customer rename data maintenance record which is created.
    /// </returns>
    public static CustAccountNumRenameDataMaintenanceRecId createCustAccountNumRenameDataMaintenanceEntry(CustAccount _oldCustAccount, CustAccount _newCustAccount, UtcDateTime _renamedDateTime)
    {
        const str DiscriptionPrefix = "CustomerAccountRename_";
        CustAccountNumRenameDataMaintenance custAccountNumRenameDataMaintenance;

        custAccountNumRenameDataMaintenance.initValue();
        custAccountNumRenameDataMaintenance.Description = DiscriptionPrefix + int2Str(custAccountNumRenameDataMaintenance.ID);
        custAccountNumRenameDataMaintenance.OldAccountNum = _oldCustAccount;
        custAccountNumRenameDataMaintenance.NewAccountNum = _newCustAccount;
        custAccountNumRenameDataMaintenance.RenamedDateTime = _renamedDateTime;
        custAccountNumRenameDataMaintenance.insert();

        return custAccountNumRenameDataMaintenance.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForRun</Name>
				<Source><![CDATA[
    private static SysInstrumentationActivityContext getActivityContextForRun(str _activityName)
    {
        if (!custInstrumentationLogger)
        {
            custInstrumentationLogger = CustInstrumentationLogger::newFromInstrumentationNameSpace(CustAccountNumRenameInstrumentationConstants::CustAccountNumRenameInstrumentationNamespace);
        }
        
        return custInstrumentationLogger.activityContext(custInstrumentationLogger.activity(_activityName, CustAccountNumRenameInstrumentationConstants::CustAccountNumRenameInstrumentationNamespace));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>