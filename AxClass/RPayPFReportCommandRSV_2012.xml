<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportCommandRSV_2012</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportCommandRSV_2012 extends RPayPFReportCommandRSV
{
    RPayRateCode            foreignerRate;
    RPayRateCode            studentRate;
    RpayFundDeductionCode   deductionCode212A8p7, deductionCodeExceedMaxOMI;
    Range                   codesToExcludeOMI;

    #RPayPFReportRSV_Excel_2012
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initTemplateParameters</Name>
				<Source><![CDATA[
        protected void initTemplateParameters()
    {
        RPayTaxParameters   taxParameters = RPayTaxParameters::find();

        sPP                         = taxParameters.PensionFundInsurance;
        ePP                         = taxParameters.PensionFundStorage;
        fF                          = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2012, 1, '', '', false);
        deductionCodeExceedMaxOMI   = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2012, 2, '', '', false);
        deductionCode212A8p7        = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2012, 3, '', '', false);
        deductionCode212            = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2012, 4, '', '', false);
        gr66                        = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2012, 5, '', '', false);
        gr67                        = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2012, 6, '', '', false);
        studentRate                 = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2012, 7, '', '', false);

        deductionCodeExceedMax = taxParameters.PFDeductionCodePctBase;

        codesToExclude  = taxParameters.PensionFundinvalidDeduction;
        foreignerRate   = taxParameters.InsuredForeignCitizens;

        codesToExclude += deductionCodeExceedMax ? ((codesToExclude ? ',' : '') + deductionCodeExceedMax) : '';
        codesToExclude += deductionCode212       ? ((codesToExclude ? ',' : '') + deductionCode212)       : '';
        codesToExclude += deductionCode212A8p7   ? ((codesToExclude ? ',' : '') + deductionCode212A8p7)   : '';
        codesToExclude = '!' + strreplace(codesToExclude, ',', ',!');

        codesToExcludeOMI += deductionCodeExceedMaxOMI ? ((codesToExcludeOMI ? ',' : '') + deductionCodeExceedMaxOMI) : '';
        codesToExcludeOMI += deductionCode212          ? ((codesToExcludeOMI ? ',' : '') + deductionCode212)       : '';
        codesToExcludeOMI += deductionCode212A8p7      ? ((codesToExcludeOMI ? ',' : '') + deductionCode212A8p7)   : '';
        codesToExcludeOMI = '!' + strreplace(codesToExcludeOMI, ',', ',!');
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert()
    {
        container cells; //cells to update
        container key = conpeek(commandValue, 1);

        switch (conpeek(conInstanceParm, 1))
        {
            case #TotalAmountDS:
                keyContract.unpack(key);
                cells = this.section2() +
                        this.section203();

                dataProvider.insert([#TotalAmountDS, cells, conpeek(commandValue, 2)]);

                break;

            case #InvalidDS:
                dataProvider.insert([#InvalidDS, key, conpeek(commandValue, 2)]);
                break;

            case #StudentDS:
                dataProvider.insert([#StudentDS, key, conpeek(commandValue, 2)]);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>iterator</Name>
				<Source><![CDATA[
        public IRPayPFReportDataIterator iterator()
    {
        container con;

        con += conpeek(conInstanceParm, 1);
        con += this.parmValue();

        return dataProvider.iterator(con);
    }

]]></Source>
			</Method>
			<Method>
				<Name>section2</Name>
				<Source><![CDATA[
        protected container section2()
    {
        container cells; //cells to update

        void updatePeriodCells(str _totalCell)
        {
            str cellName = substr(_totalCell, 1, strlen(_totalCell) - 2);

            switch (keyContract.parmPayPeriod())
            {
                case datenull() + 1:
                    cellName += 'C4';
                    break;
                case datenull() + 2:
                    cellName += 'C5';
                    break;
                case datenull() + 3:
                    cellName += 'C6';
                    break;

                default:
                    cellName = '';
            }

            cells += cellName;
        }

        if (keyContract.parmCategory() != #InsuredPersonCatEmployee)
        {
            return connull();
        }

        if (keyContract.parmDeduction() && keyContract.parmFund() != ff)
        {
            switch (keyContract.parmDeduction())
            {
                case codesToExclude,
                     deductionCode212:
                    if (keyContract.parmForeigner())
                    {
                        cells += #S2R213C3;
                        updatePeriodCells(#S2R213C3);
                    }
                    else
                    {
                        if (gr66 && keyContract.parmGroupId() == gr66)
                        {
                            cells += #S2R211C3;
                            updatePeriodCells(#S2R211C3);
                        }
                        else if (gr67 && keyContract.parmGroupId() == gr67)
                        {
                            cells += #S2R212C3;
                            updatePeriodCells(#S2R212C3);
                        }
                    }
                    break;

                case deductionCodeExceedMax:
                    if (keyContract.parmForeigner())
                    {
                        cells += #S2R233C3;
                        updatePeriodCells(#S2R233C3);
                    }
                    else
                    {
                        if (gr66 && keyContract.parmGroupId() == gr66)
                        {
                            cells += #S2R231C3;
                            updatePeriodCells(#S2R231C3);
                        }
                        else if (gr67 && keyContract.parmGroupId() == gr67)
                        {
                            cells += #S2R232C3;
                            updatePeriodCells(#S2R232C3);
                        }
                    }
                    if (keyContract.parmFund() == sPP)
                    {
                        cells += #S2R260C3;
                        updatePeriodCells(#S2R260C3);
                    }

                    break;

                case deductionCode212A8p7:
                    if (keyContract.parmForeigner())
                    {
                        cells += #S2R223C3;
                        updatePeriodCells(#S2R223C3);
                    }
                    else if (gr66 && keyContract.parmGroupId() == gr66)
                    {
                        cells += #S2R221C3;
                        updatePeriodCells(#S2R221C3);
                    }
                    else if (gr67 && keyContract.parmGroupId() == gr67)
                    {
                        cells += #S2R222C3;
                        updatePeriodCells(#S2R222C3);
                    }

                    break;
            }
        }

        if (sPP && keyContract.parmFund() == sPP)
        {
            if (deductionCodeExceedMax && keyContract.parmDeduction() == deductionCodeExceedMax)
            {
                cells += #S2R252C3;
                updatePeriodCells(#S2R252C3);
            }

            if (keyContract.parmForeigner())
            {
                cells += #S2R203C3;
                updatePeriodCells(#S2R203C3);
            }
            else
            {
                if (gr66 && keyContract.parmGroupId() == gr66)
                {
                    cells += #S2R201C3;
                    updatePeriodCells(#S2R201C3);
                }
                else if (gr67 && keyContract.parmGroupId() == gr67)
                {
                    cells += #S2R202C3;
                    updatePeriodCells(#S2R202C3);
                }
            }

            cells += #S2R250C3;
            updatePeriodCells(#S2R250C3);
        }

        if (ePP && keyContract.parmFund() == ePP)
        {
            cells += #S2R251C3;
            updatePeriodCells(#S2R251C3);
        }

        if (fF && keyContract.parmFund() == fF)
        {
            cells += #S2R271C3;
            updatePeriodCells(#S2R271C3);

            cells += #S2R276C3;
            updatePeriodCells(#S2R276C3);

            if (keyContract.parmDeduction())
            {
                switch (keyContract.parmDeduction())
                {
                    case codesToExcludeOMI:
                        cells += #S2R272C3;
                        updatePeriodCells(#S2R272C3);
                        break;

                    case deductionCodeExceedMaxOMI:
                        cells += #S2R274C3;
                        updatePeriodCells(#S2R274C3);
                        break;

                    case deductionCode212A8p7:
                        cells += #S2R273C3;
                        updatePeriodCells(#S2R273C3);
                        break;
                }
            }
        }

        return cells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>section203</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected container section203()
    {
        container cells; //cells to update

        void updatePeriodCells(str _totalCell)
        {
            str cellName = substr(_totalCell, 1, strlen(_totalCell) - 2);

            switch (keyContract.parmPayPeriod())
            {
                case datenull() + 1:
                    cellName += 'C4';
                    break;
                case datenull() + 2:
                    cellName += 'C5';
                    break;
                case datenull() + 3:
                    cellName += 'C6';
                    break;

                default:
                    cellName = '';
            }

            cells += cellName;
        }

        if (keyContract.parmCategory() == #InsuredPersonCatEmployee)
        {
            return connull();
        }

        if (keyContract.parmDeduction() && keyContract.parmFund() != ff)
        {
            switch (keyContract.parmDeduction())
            {
                case codesToExclude,
                     deductionCode212:
                    if (keyContract.parmForeigner())
                    {
                        cells += #iS2R213C3;
                        updatePeriodCells(#iS2R213C3);
                    }
                    else
                    {
                        if (gr66 && keyContract.parmGroupId() == gr66)
                        {
                            cells += #iS2R211C3;
                            updatePeriodCells(#iS2R211C3);
                        }
                        else if (gr67 && keyContract.parmGroupId() == gr67)
                        {
                            cells += #iS2R212C3;
                            updatePeriodCells(#iS2R212C3);
                        }
                    }
                    break;

                case deductionCodeExceedMax:
                    if (keyContract.parmForeigner())
                    {
                        cells += #iS2R233C3;
                        updatePeriodCells(#iS2R233C3);
                    }
                    else
                    {
                        if (gr66 && keyContract.parmGroupId() == gr66)
                        {
                            cells += #iS2R231C3;
                            updatePeriodCells(#iS2R231C3);
                        }
                        else if (gr67 && keyContract.parmGroupId() == gr67)
                        {
                            cells += #iS2R232C3;
                            updatePeriodCells(#iS2R232C3);
                        }
                    }

                    if (keyContract.parmFund() == sPP)
                    {
                        cells += #iS2R260C3;
                        updatePeriodCells(#iS2R260C3);
                    }

                    break;

                case deductionCode212A8p7:
                    if (keyContract.parmForeigner())
                    {
                        cells += #iS2R223C3;
                        updatePeriodCells(#iS2R223C3);
                    }
                    else if (gr66 && keyContract.parmGroupId() == gr66)
                    {
                        cells += #iS2R221C3;
                        updatePeriodCells(#iS2R221C3);
                    }
                    else if (gr67 && keyContract.parmGroupId() == gr67)
                    {
                        cells += #iS2R222C3;
                        updatePeriodCells(#iS2R222C3);
                    }

                    break;
            }
        }

        if (sPP && keyContract.parmFund() == sPP)
        {
            if (deductionCodeExceedMax && keyContract.parmDeduction() == deductionCodeExceedMax)
            {
                cells += #iS2R252C3;
                updatePeriodCells(#iS2R252C3);
            }

            if (keyContract.parmForeigner())
            {
                cells += #iS2R203C3;
                updatePeriodCells(#iS2R203C3);
            }
            else
            {
                if (gr66 && keyContract.parmGroupId() == gr66)
                {
                    cells += #iS2R201C3;
                    updatePeriodCells(#iS2R201C3);
                }
                else if (gr67 && keyContract.parmGroupId() == gr67)
                {
                    cells += #iS2R202C3;
                    updatePeriodCells(#iS2R202C3);
                }
            }

            cells += #iS2R250C3;
            updatePeriodCells(#iS2R250C3);
        }

        if (ePP && keyContract.parmFund() == ePP)
        {
            cells += #iS2R251C3;
            updatePeriodCells(#iS2R251C3);
        }

        if (fF && keyContract.parmFund() == fF)
        {
            cells += #iS2R271C3;
            updatePeriodCells(#iS2R271C3);

            cells += #iS2R276C3;
            updatePeriodCells(#iS2R276C3);
            if (keyContract.parmDeduction())
            {
                switch (keyContract.parmDeduction())
                {
                    case codesToExcludeOMI:
                        cells += #iS2R272C3;
                        updatePeriodCells(#iS2R272C3);
                        break;

                    case deductionCodeExceedMaxOMI:
                        cells += #iS2R274C3;
                        updatePeriodCells(#iS2R274C3);
                        break;

                    case deductionCode212A8p7:
                        cells += #iS2R273C3;
                        updatePeriodCells(#iS2R273C3);
                        break;
                }
            }
        }

        return cells;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>