<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayRecalcStandardDeduction</Name>
	<SourceCode>
		<Declaration><![CDATA[
#RPayModuleName
class rPayRecalcStandardDeduction extends RunBase
{
    RPayEmplStandardDeductionTable  payEmplStandardDeductionTable;
    FormDataSource                  formDS;
    ReportPeriod_RU                 payPeriod;
    ReportPeriod_RU                 emplPayPeriod;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAlimonyPostFee</Name>
				<Source><![CDATA[
    private void calcAlimonyPostFee(RPayCalculate_StandardDeduction _payCalculate, RPayAmount _deductionAmount)
    {
        RPayReverse                     payReverse;
        Args                            args;
        RPayTrans                       payTrans;
        RPayAmount                      postTransAmount;
        RPayCounterTable                payCounterTable;

        select sum(Amount) from payTrans
            where payTrans.SourceTableId == payEmplStandardDeductionTable.TableId               &&
                    payTrans.SourceRecId   == payEmplStandardDeductionTable.RecId               &&
                    payTrans.Scanning      == payEmplStandardDeductionTable.AlimonyPostSequence &&
                    payTrans.SourceDate    == payPeriod;

        _payCalculate.setInitValue(abs(_deductionAmount));

        while select payCounterTable
            order by Scanning, CounterUnit
            where payCounterTable.Scanning == payEmplStandardDeductionTable.AlimonyPostSequence
        {
            _payCalculate.setCounterTable(payCounterTable);
            _payCalculate.calcCounter();
            _payCalculate.payPeriod(payPeriod);
            _payCalculate.needUpdatePayTrans(false);

            postTransAmount = _payCalculate.getCurrentValue();

            if (!payTrans.Amount && payCounterTable.Output)
            {
                payTrans = this.createPayTrans(payCounterTable,  postTransAmount * (-1));
            }
        }

        if (abs(payTrans.Amount) != abs(postTransAmount))
        {
            args = new Args();
            args.record(payTrans);
            args.parmEnumType(enumNum(RPayReverseType));
            args.parmEnum(RPayReverseType::Correct);

            payReverse = RPayReverse::newFromTable(args);

            select firstonly payTrans
                where payTrans.SourceTableId == payEmplStandardDeductionTable.TableId &&
                        payTrans.SourceRecId   == payEmplStandardDeductionTable.RecId   &&
                        payTrans.Scanning      == payEmplStandardDeductionTable.AlimonyPostSequence &&
                        payTrans.SourceDate    == payPeriod;

            payReverse.createReversePayTrans(payTrans, null, abs(payTrans.Amount) - abs(postTransAmount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPayTrans</Name>
				<Source><![CDATA[
    private RPayTrans createPayTrans(RPayCounterTable _payCounterTable, Amount _amount)
    {
        RPayTrans payTrans;

        payTrans.clear();
        payTrans.initFromEmplTable(RHRMEmplTable::find(payEmplStandardDeductionTable.EmplId));

        payTrans.setLedgerDimension(payEmplStandardDeductionTable.AccountType,
                                    payEmplStandardDeductionTable.LedgerDimension,
                                    payEmplStandardDeductionTable.DefaultDimension,
                                    payEmplStandardDeductionTable.EmplId);
        payTrans.SourceDate      = payPeriod;
        payTrans.PayPeriod       = emplPayPeriod;
        payTrans.CorrectedPeriod = payPeriod;
        payTrans.TransDate       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        payTrans.PayCtype        = _payCounterTable.Output;
        payTrans.Amount          = _amount;
        payTrans.PayModuleCode   = #ModuleNameStandardDeduction;
        payTrans.Scanning        = payEmplStandardDeductionTable.PaySequence;
        payTrans.CounterUnit     = _payCounterTable.CounterUnit;
        payTrans.SourceTableId   = payEmplStandardDeductionTable.TableId;
        payTrans.SourceRecId     = payEmplStandardDeductionTable.RecId;

        RPayPostingProfileCheck::checkCurrentProfiles(payTrans.PayCtype, '', payTrans.Emplid, '');
        payTrans.updatePosting();
        payTrans.insert();

        return payTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.caption("@RUP2956");
        dialog.addText("@RUP2971");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args _args)
    {
        super();

        if (_args && _args.record())
        {
            payEmplStandardDeductionTable = _args.record();
            formDS                        = FormDataUtil::getFormDataSource(_args.record());
            emplPayPeriod                 = RPayParameters::payPeriod(payEmplStandardDeductionTable.EmplId);
        }
        else
        {
            throw error(strFmt("@SYS23264", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RPayCalculate_StandardDeduction payCalculate;
        RPayReverse                     payReverse;
        Args                            args;
        RPayTrans                       payTrans;
        Amount                          deductionAmount;
        RPayCounterTable                payCounterTable;

        ttsbegin;
        payPeriod = endmth(payEmplStandardDeductionTable.StartDate);

         delete_from payTrans
                where payTrans.Scanning          == payEmplStandardDeductionTable.PaySequence &&
                      payTrans.SourceDate        == payPeriod                                 &&
                      payTrans.SourceTableId     == payEmplStandardDeductionTable.TableId     &&
                      payTrans.SourceRecId       == payEmplStandardDeductionTable.RecId       &&
                      payTrans.PayPeriod         == emplPayPeriod;

        if (payEmplStandardDeductionTable.AlimonyPostSequence)
        {
            delete_from payTrans
                    where payTrans.Scanning          == payEmplStandardDeductionTable.AlimonyPostSequence &&
                          payTrans.SourceDate        == payPeriod                                 &&
                          payTrans.SourceTableId     == payEmplStandardDeductionTable.TableId     &&
                          payTrans.SourceRecId       == payEmplStandardDeductionTable.RecId       &&
                          payTrans.PayPeriod         == emplPayPeriod;
        }

        while (payPeriod <= endmth(prevMth(emplPayPeriod)))
        {
            select sum(Amount) from payTrans
                where payTrans.SourceTableId == payEmplStandardDeductionTable.TableId     &&
                      payTrans.SourceRecId   == payEmplStandardDeductionTable.RecId       &&
                      payTrans.Scanning      == payEmplStandardDeductionTable.PaySequence &&
                      payTrans.SourceDate    == payPeriod;

            payCalculate = new RPayCalculate_StandardDeduction(RPayModuleTable::find(#ModuleNameStandardDeduction));
            payCalculate.setSourceTable(payEmplStandardDeductionTable);
            payCalculate.setSeqTable(RPaySeqTable::find(payEmplStandardDeductionTable.PaySequence));
            payCalculate.payPeriod(payPeriod);
            payCalculate.needUpdatePayTrans(false);

            while select payCounterTable
                order by Scanning, CounterUnit
                where payCounterTable.Scanning == payEmplStandardDeductionTable.PaySequence
            {
                payCalculate.setCounterTable(payCounterTable);
                payCalculate.calcCounter();
                deductionAmount = payCalculate.getCurrentValue();

                if (!payTrans.Amount && payCounterTable.Output)
                {
                    payTrans = this.createPayTrans(payCounterTable,  deductionAmount * (-1));
                }
            }

            if (deductionAmount < 0)
            {
                info(strFmt("@RUP6178", payPeriod));
            }

            if (abs(payTrans.Amount) != abs(deductionAmount))
            {
                args = new Args();
                args.record(payTrans);
                args.parmEnumType(enumNum(RPayReverseType));
                args.parmEnum(RPayReverseType::Correct);

                payReverse = RPayReverse::newFromTable(args);

                select firstonly payTrans
                    where payTrans.SourceTableId == payEmplStandardDeductionTable.TableId &&
                          payTrans.SourceRecId   == payEmplStandardDeductionTable.RecId   &&
                          payTrans.Scanning      == payEmplStandardDeductionTable.PaySequence &&
                          payTrans.SourceDate    == payPeriod;

                payReverse.createReversePayTrans(payTrans, null, abs(payTrans.Amount) - abs(deductionAmount));
            }

            if (payEmplStandardDeductionTable.AlimonyPostSequence)
            {
                this.calcAlimonyPostFee(payCalculate, deductionAmount);
            }

            payPeriod = endmth(nextMth(payPeriod));
        }
        ttscommit;

        if (formDS)
        {
            formDS.refresh();
            formDS.active();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayRecalcStandardDeduction    rPayRecalcStandardDeduction = new RPayRecalcStandardDeduction(_args);
        ;

        if (rPayRecalcStandardDeduction.prompt())
        {
            rPayRecalcStandardDeduction.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>