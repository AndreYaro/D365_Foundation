<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanHCMReportUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanHCMReportUIBuilder</c> class is responsible for user interface behaviors for the report parameter form.
/// </summary>
public class BudgetPlanHCMReportUIBuilder extends SrsReportDataContractUIBuilder
{
    DialogField budgetPlanQuantityScenario;
    DialogField budgetPlanMonetaryScenario;
    FormComboBoxControl firstGroupOptionControl;
    FormComboBoxControl secondGroupOptionControl;
    const str           emptyString = '';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>firstGroupOptionModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles actions on change of the first group option selection combo box.
    /// </summary>
    /// <param name="_firstGroupOptionControl">
    /// The first group option form control.
    /// </param>
    /// <returns>
    /// true if the value was modified; otherwise, false.
    /// </returns>
    public boolean firstGroupOptionModified(FormComboBoxControl _firstGroupOptionControl)
    {
        boolean isModified;

        isModified = _firstGroupOptionControl.modified();

        if (isModified)
        {
            if (!_firstGroupOptionControl.valueStr())
            {
                // The second group option cannot be set unless the first group option is specified - clear the second group option and disable it.
                secondGroupOptionControl.selection(BudgetPlanHCMReportGroupOption::NoSelection);
                secondGroupOptionControl.allowEdit(false);
            }
            else
            {
                secondGroupOptionControl.allowEdit(true);
            }
        }

        return isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the budget planning process control.
    /// </summary>
    /// <param name="_budgetPlanningProcessControl">
    /// The budget planning process control.
    /// </param>
    public void lookupBudgetPlanningProcess(FormStringControl _budgetPlanningProcessControl)
    {
        BudgetPlan::lookupBudgetPlanningProcess(_budgetPlanningProcessControl, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    public void postRun()
    {
        DialogField firstGroupOption;
        DialogField secondGroupOption;
        DialogField budgetPlanningProcess;

        super();

        // This method should be called in order to handle events on dialogs.
        this.dialog().dialogForm().formRun().controlMethodOverload(false);

        // Bind the controls.
        firstGroupOption      = this.bindInfo().getDialogField(this.dataContractObject(),
                                    methodstr(BudgetPlanHCMReportContract, parmFirstGroupOption));

        secondGroupOption     = this.bindInfo().getDialogField(this.dataContractObject(),
                                    methodstr(BudgetPlanHCMReportContract, parmSecondGroupOption));

        budgetPlanningProcess = this.bindInfo().getDialogField(this.dataContractObject(),
                                    methodstr(BudgetPlanHCMReportContract, parmBudgetPlanningProcess));

        budgetPlanQuantityScenario = this.bindInfo().getDialogField(this.dataContractObject(),
                                        methodstr(BudgetPlanHCMReportContract, parmBudgetPlanQuantityScenario));

        budgetPlanMonetaryScenario = this.bindInfo().getDialogField(this.dataContractObject(),
                                        methodstr(BudgetPlanHCMReportContract, parmBudgetPlanMonetaryScenario));

        firstGroupOptionControl = firstGroupOption.fieldControl() as FormComboBoxControl;
        secondGroupOptionControl = secondGroupOption.fieldControl() as FormComboBoxControl;

        // Register override methods.
        firstGroupOption.registerOverrideMethod(methodstr(FormComboBoxControl, modified),
            methodstr(BudgetPlanHCMReportUIBuilder, firstGroupOptionModified), this);

        firstGroupOption.registerOverrideMethod(methodstr(FormComboBoxControl, validate),
            methodStr(BudgetPlanHCMReportUIBuilder, validateGroupOptions), this);

        secondGroupOption.registerOverrideMethod(methodstr(FormComboBoxControl, validate),
            methodStr(BudgetPlanHCMReportUIBuilder, validateGroupOptions), this);

        budgetPlanQuantityScenario.registerOverrideMethod(methodstr(FormComboBoxControl, validate),
            methodStr(BudgetPlanHCMReportUIBuilder, validateBudgetPlanScenario), this);

        budgetPlanMonetaryScenario.registerOverrideMethod(methodstr(FormComboBoxControl, validate),
            methodStr(BudgetPlanHCMReportUIBuilder, validateBudgetPlanScenario), this);

        if (firstGroupOption.value() == BudgetPlanHCMReportGroupOption::NoSelection)
        {
            // Initially disable editing of the second group option field.
            secondGroupOption.allowEdit(false);
        }

        budgetPlanningProcess.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(BudgetPlanHCMReportUIBuilder, lookupBudgetPlanningProcess), this);

        budgetPlanningProcess.registerOverrideMethod(
            methodStr(FormStringControl, validate),
            methodStr(BudgetPlanHCMReportUIBuilder, validateBudgetPlanningProcess), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the budget planning process control.
    /// </summary>
    /// <param name="_budgetPlanningProcessControl">
    /// The budget planning process control.
    /// </param>
    /// <returns>
    /// true when the value is valid; otherwise, false.
    /// </returns>
    protected boolean validateBudgetPlanningProcess(FormStringControl _budgetPlanningProcessControl)
    {
        BudgetPlanningProcess budgetPlanningProcess;
        boolean               isValid = true;

        if (_budgetPlanningProcessControl.text() != emptyString)
        {
            budgetPlanningProcess = BudgetPlanningProcess::findByLocalizedName(_budgetPlanningProcessControl.text());
        }

        // Validate the values entered by user.
        if (!budgetPlanningProcess)
        {
            isValid = checkFailed(strfmt("@SYS316757", tablepname(BudgetPlanningProcess)));
        }
        else if (budgetPlanningProcess.Ledger != Ledger::current())
        {
            isValid = checkFailed(strFmt("@SYS4020049", budgetPlanningProcess.Name));
        }
        else if (budgetPlanningProcess.ApprovalProcessState != BudgetPlanningApprovalProcessState::InProcess)
        {
            isValid = checkFailed("@GLS70654");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the budget plan scenario control.
    /// </summary>
    /// <param name="_budgetPlanScenarioControl">
    /// The budget plan scenario control.
    /// </param>
    /// <returns>
    /// true when the value is valid; otherwise, false.
    /// </returns>
    protected boolean validateBudgetPlanScenario(FormComboBoxControl _budgetPlanScenarioControl)
    {
        boolean                 isValid = true;

        if (budgetPlanMonetaryScenario.value() == emptyString)
        {
            isValid = checkFailed(strfmt("@SYS39376", "@GLS70135"));
        }
        else if (budgetPlanQuantityScenario.value() == emptyString)
        {
            isValid = checkFailed(strFmt("@SYS39376", "@GLS150360"));
        }
        else
        {
            BudgetPlanScenarioName  budgetPlanScenarioControlText = _budgetPlanScenarioControl.getEditText();

            if (budgetPlanScenarioControlText)
            {
                if (!BudgetPlanScenario::findByLocalizedName(budgetPlanScenarioControlText))
                {
                    isValid = checkFailed(strfmt("@SYS316757", tablepname(BudgetPlanScenario)));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGroupOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validations for the group options values selected by the user.
    /// </summary>
    /// <param name="_groupOptionControl">
    /// The form control that has been modified.
    /// </param>
    /// <returns>
    /// true if the value selected is valid; otherwise, false.
    /// </returns>
    protected boolean validateGroupOptions(FormComboBoxControl _groupOptionControl)
    {
        boolean isValid = true;

        isValid = _groupOptionControl.validate();

        if (isValid
            && firstGroupOptionControl.selection() != BudgetPlanHCMReportGroupOption::NoSelection
            && secondGroupOptionControl.selection() != BudgetPlanHCMReportGroupOption::NoSelection
            && firstGroupOptionControl.selection() == secondGroupOptionControl.selection())
        {
            // The same option can't be selected more than once.
            error("@GLS150372");
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>