<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFiscalDocumentLine_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EFiscalDocumentLine_BR
{
    FiscalDocument_BR     fiscalDocument;
    FiscalDocumentLine_BR fiscalDocumentLine;

    // The following attributes are used for additional (i.e. non-fiscal) information only,
    // e.g. customer's purchase order and item numbers.
    // All fiscal-related information should come from fiscal document tables.
    SalesLine               salesLine;
    CustInvoiceTable        custInvoiceTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>benefitCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Benefit code
    /// </summary>
    /// <returns>
    /// The Benefit code
    /// </returns>
    public FBFiscalDocumentTaxAdjustmentCode_BR benefitCode()
    {
        return fiscalDocumentLine.BenefitCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GTINCodeForCWOrTaxableUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves GTIN code for catch-weight taxable unit.
    /// </summary>
    /// <returns>GTIN code value if any.</returns>
    public str GTINCodeForCWOrTaxableUnit()
    {
        UnitOfMeasureSymbol unit = PdsCatchWeightItem::find(fiscalDocumentLine.ItemId).PdsCWUnitId;
        if(!unit)
        {
            unit = fiscalDocumentLine.Unit;
        }
        return inventItemGTIN::find(fiscalDocumentLine.itemId, InventDim::inventDimIdBlank(), unit).GlobalTradeItemNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CNPJ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the CNPJ/CPF code
    /// </summary>
    /// <returns>
    /// The CNPJ/CPF code
    /// </returns>
    public CNPJMan_BR CNPJ()
    {
        return fiscalDocumentLine.CNPJ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cityWhereServicePerformed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns IBGE code of the city that collect the service tax.
    /// </summary>
    /// <returns>
    /// IBGE Code.
    /// </returns>
    /// <remarks>
    /// Used in ISSQN element of Electronic Fiscal Document XML.
    /// </remarks>
    public CityIBGECode_BR cityWhereServicePerformed()
    {
        return LogisticsAddressCity::findRecId(fiscalDocument.CityWhereServicePerformed).IBGECode_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Line Number specified in the sales line
    /// </summary>
    /// <returns>
    /// Item Line Number for this line specified in the sales line; zero if it doesn't exist.
    /// </returns>
    public CustLineNum custLineNumber()
    {
        if (salesLine)
        {
            return salesLine.CustomerLineNum;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the customer's purchase order ID that originated this fiscal document line.
    /// </summary>
    /// <returns>
    /// Customer's purchase order ID that originated this fiscal document line; empty string if none was found.
    /// </returns>
    public CustPurchaseOrder custPurchaseOrder()
    {
        if (salesLine)
        {
            return salesLine.salesTable().PurchOrderFormNum;
        }
        else if (custInvoiceTable)
        {
            return custInvoicetable.PurchOrderFormNum;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>FiscalDocumentLine_BR</c> table buffer used by the class.
    /// </summary>
    /// <returns>
    /// The <c>FiscalDocumentLine_BR</c> table buffer.
    /// </returns>
    public FiscalDocumentLine_BR fiscalDocumentLine()
    {
        return fiscalDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdditionalInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the additional information texts associated with the fiscal document line.
    /// </summary>
    /// <returns>
    ///     A string with the contatenation of all additional information texts associated with this fiscal document line.
    /// </returns>
    public EFDocInfAdProd_BR getAdditionalInformation()
    {
        EFDocInfAdProd_BR infAdProd;

        // This attribution is needed. In case this statement is used in the return line, the EDT length cropping won't happen
        infAdProd = fiscalDocumentLine.getAdditionalInformationAsString();

        return infAdProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApproximateTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the approximate amount of taxes that comprises the price of the current line
    /// </summary>
    /// <returns>
    /// Returns the approximate amount of taxes that comprises the price of the current line
    /// </returns>
    public TaxAmount getApproximateTaxAmount()
    {
        return fiscalDocumentLine.ApproximateTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupAmount</Name>
				<Source><![CDATA[
    protected MarkupAmountMST getMarkupAmount(MarkupClassification_BR _markupClassification)
    {
        FiscalDocumentMiscCharge_BR fiscalDocumentMiscCharge;

        select sum(Amount) from fiscalDocumentMiscCharge
            where fiscalDocumentMiscCharge.FiscalDocumentLine == fiscalDocumentLine.recId
               && fiscalDocumentMiscCharge.Type == _markupClassification;

        return abs(fiscalDocumentMiscCharge.Amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLine</Name>
				<Source><![CDATA[
    public EFiscalDocumentLineTax_BR getTaxLine(TaxType_BR _taxType, str _taxationCodeList)
    {
        return EFiscalDocumentLineTax_BR::construct(fiscalDocumentLine, _taxType, _taxationCodeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>grossLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the gross line amount.
    /// </summary>
    /// <returns>
    /// The gross line amount.
    /// </returns>
    final LineAmount grossLineAmount()
    {
        return abs(fiscalDocumentLine.LineAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GTINCode</Name>
				<Source><![CDATA[
    public str GTINCode()
    {
        #define.AllBlankDim('AllBlank')

        return inventItemGTIN::find(fiscalDocumentLine.itemId, #AllBlankDim, fiscalDocumentLine.Unit).GlobalTradeItemNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId itemId()
    {
        if (!fiscalDocumentLine.ItemId)
        {
            return 'CFOP' + strkeep(fiscalDocumentLine.CFOP, '0123456789');
        }

        return fiscalDocumentLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FiscalDocument_BR _fiscalDocument, FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        CustInvoiceTrans custInvoiceTrans;

        fiscalDocumentLine.data(_fiscalDocumentLine);
        fiscalDocument = _fiscalDocument;

        if (fiscalDocumentLine.RefTableId == tableNum(CustInvoiceTrans))
        {
            custInvoiceTrans = CustInvoiceTrans::findRecId(fiscalDocumentLine.RefRecId);

            salesLine = custInvoiceTrans.salesLine();
            if (!salesLine)
            {
                custInvoiceTable = custInvoiceTrans.custInvoiceJour().custInvoiceTable();
            }
        }
        else if (fiscalDocumentLine.RefTableId == tableNum(ProjInvoiceItem))
        {
            ProjInvoiceItem projInvoiceItem = projInvoiceItem::findRecId(fiscalDocumentLine.RefRecId);

            salesLine = projInvoiceItem.salesLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchAddition</Name>
				<Source><![CDATA[
    public PurchDIAddition_BR purchAddition()
    {
        return fiscalDocumentLine.DIAddition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalFreightMarkupAmount</Name>
				<Source><![CDATA[
    public MarkupAmount totalFreightMarkupAmount()
    {
        return this.getMarkupAmount(MarkupClassification_BR::Freight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalInsuranceMarkupAmount</Name>
				<Source><![CDATA[
    public MarkupAmount totalInsuranceMarkupAmount()
    {
        return this.getMarkupAmount(MarkupClassification_BR::Insurance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalOthersMarkupAmount</Name>
				<Source><![CDATA[
    public MarkupAmount totalOthersMarkupAmount()
    {
        return this.getMarkupAmount(MarkupClassification_BR::Others) + this.getMarkupAmount(MarkupClassification_BR::SISCOMEX);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalSISCOMEXMarkupAmount</Name>
				<Source><![CDATA[
    public MarkupAmount totalSISCOMEXMarkupAmount()
    {
        return this.getMarkupAmount(MarkupClassification_BR::SISCOMEX);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EFiscalDocumentLine_BR construct(FiscalDocument_BR _fiscalDocument, FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        return new EFiscalDocumentLine_BR(_fiscalDocument, _fiscalDocumentLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line discount
    /// </summary>
    /// <returns>
    /// The line discount
    /// </returns>
    public DiscAmount lineDiscount()
    {
        return fiscalDocumentLine.LineDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scaleIndicator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Scale indicator
    /// </summary>
    /// <returns>
    /// The Scale indicator
    /// </returns>
    public ScaleIndicator_BR scaleIndicator()
    {
        return fiscalDocumentLine.ScaleIndicator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>suframaDiscountICMS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the SUFRAMA discount due to ICMS exemption
    /// </summary>
    /// <returns>
    /// The SUFRAMA discount due to ICMS exemption
    /// </returns>
    public DiscAmount suframaDiscountICMS()
    {
        return fiscalDocumentLine.SuframaDiscountICMS;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>