<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCategoryPriceProductQueryHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCategoryPriceProductQueryHelper</c> class provides helper APIs related to category price product query.
/// </summary>
class RetailCategoryPriceProductQueryHelper
{
    RetailCategoryPriceScheduler priceScheduler;
    Query   traverseQuery;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configureQuery</Name>
				<Source><![CDATA[
	/// <summary>
    /// Configure the query.
    /// </summary>
    protected void configureQuery()
    {
        QueryBuildDataSource   qbdsApprovedVend, qbdsCategoryContainmentLookup;

        qbdsCategoryContainmentLookup = traverseQuery.dataSourceTable(tableNum(RetailCategoryContainmentLookup));
        findOrCreateRange_W(qbdsCategoryContainmentLookup, fieldNum(RetailCategoryContainmentLookup, Category), queryValue(priceScheduler.parmCategoryPriceRule().Category));


        // <GEERU>
        if (priceScheduler.parmCategoryPriceRule().Scope == RetailPriceCategoryRuleScope::ExcludeSubCategories)
        {
            qbdsCategoryContainmentLookup = traverseQuery.dataSourceTable(tableNum(RetailCategoryContainmentLookup));
            findOrCreateRange_W(qbdsCategoryContainmentLookup, fieldNum(RetailCategoryContainmentLookup, ContainedCategory), queryValue(priceScheduler.parmCategoryPriceRule().Category));
        }
        // </GEERU>

        if (priceScheduler.parmCategoryPriceRule().VendAccount)
        {
            traverseQuery.validTimeStateAsOfDate(priceScheduler.parmPriceBasisDate());

            qbdsApprovedVend = traverseQuery.dataSourceTable(tableNum(InventTable)).addDataSource(tableNum(PdsApprovedVendorList));
            findOrCreateRange_W(qbdsApprovedVend, fieldNum(PdsApprovedVendorList, PdsApprovedVendor), queryValue(priceScheduler.parmCategoryPriceRule().VendAccount));
            qbdsApprovedVend.joinMode(JoinMode::ExistsJoin);
            qbdsApprovedVend.addLink(fieldNum(InventTable, ItemId), fieldNum(PdsApprovedVendorList, ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>countTotal</Name>
				<Source><![CDATA[
	/// <summary>
    /// Determine the count total.
    /// </summary>
    /// <returns>The count total.</returns>
    public Counter countTotal()
    {
        Query query = new Query(traverseQuery);
        QueryBuildDataSource qbdsInventTable;
        QueryRun qr;

        qbdsInventTable = query.dataSourceTable(tableNum(InventTable));
        qbdsInventTable.addSelectionField(fieldNum(InventTable, recId), SelectionField::Count);

        qr = new QueryRun(query);
        qr.next();

        return any2int(qr.get(tableNum(InventTable)).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    public Query getQuery()
    {
        return traverseQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
	/// <summary>
    /// Initialize the class with the specific price scheduler.
    /// </summary>
    /// <param name = "_priceScheduler">The price scheduler</param>
    protected void init(RetailCategoryPriceScheduler _priceScheduler)
    {
        priceScheduler  = _priceScheduler;

        this.initQuery();
        this.configureQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
	/// <summary>
    /// Initialize the query.
    /// </summary>
    protected void initQuery()
    {
        traverseQuery = new Query(queryStr(RetailCategoryPriceProduct));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static  RetailCategoryPriceProductQueryHelper construct(RetailCategoryPriceScheduler _priceScheduler)
    {
        RetailCategoryPriceProductQueryHelper helper = new RetailCategoryPriceProductQueryHelper();

        helper.init(_priceScheduler);

        return helper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>