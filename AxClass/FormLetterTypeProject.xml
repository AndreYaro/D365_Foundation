<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormLetterTypeProject</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FormLetterTypeConsignment</c> class contains the logic specific to the <c>FormLetterType</c> project.
/// </summary>
[FormLetterTypeFactoryAttribute(FormLetterType::Project)]
class FormLetterTypeProject extends FormletterTypeBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formletterProvider</Name>
				<Source><![CDATA[
    public FormletterProvider formletterProvider()
    {
        return ProjFormletterProvider::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterJournalCreate</Name>
				<Source><![CDATA[
    public FormletterJournalCreate formletterJournalCreate(FormletterService _formletterService,Common _parmTable)
    {
        return FormletterJournalCreate::newProjJournalCreate(_formletterService.getFormLetter(), _parmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterJournalPost</Name>
				<Source><![CDATA[
    public FormletterJournalPost formletterJournalPost(FormletterService _formletterService, Common _parmTable)
    {
        FormletterJournalPost formletterJournalPost = FormletterJournalPost::newPostProj(_formletterService.getFormLetter(), _formletterService.parmJournal(), 
                                                                                            _parmTable, _formletterService.parmProforma());
        formletterJournalPost.parmTotals(_formletterService.parmTotals());
        return formletterJournalPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterParmData</Name>
				<Source><![CDATA[
    public formletterParmData formletterParmData(FormletterService _formletterService)
    {
        return ProjFormLetterParmData::newChooseLines(_formletterService.parmPackedFormletter());
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterParmUpdate</Name>
				<Source><![CDATA[
    public FormletterParmUpdate formletterParmUpdate(FormletterService _formletterService)
    {
        ProjFormLetter projFormLetter = ProjFormLetter::construct(DocumentStatus::ProjectInvoice);
        projFormLetter.unpack(_formletterService.parmPackedFormletter());
        _formletterService.parmFormLetter(projFormLetter);
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterParmMaps</Name>
				<Source><![CDATA[
    public FormletterParmTable initFormletterParmMaps(FormletterService _formletterService)
    {
        ProjInvoiceParmTable emptyProjInvoiceParmTable;
        DictField dictField = new DictField(tableNum(ProjInvoiceParmTable), fieldNum(ProjInvoiceParmTable, ProjInvoiceProjId));
        _formletterService.parmLabelOrderId(dictField.label());
        return emptyProjInvoiceParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infologPrefixParmTable</Name>
				<Source><![CDATA[
    public str infologPrefixParmTable(FormletterParmTable _parmTable)
    {
        ProjInvoiceParmTable projInvoiceParmTable = _parmTable;
        return fieldLabelValue(_parmTable.TableId, fieldNum(ProjInvoiceParmTable, ProjInvoiceProjId), projInvoiceParmTable.ProjInvoiceProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterParmTable</Name>
				<Source><![CDATA[
    public FormletterParmTable initFormletterParmTable(DocumentStatus _documentStatus)
    {
        ProjInvoiceParmTable emptyProjInvoiceParmTable;
        return emptyProjInvoiceParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterJournal</Name>
				<Source><![CDATA[
    public FormletterJournal initFormletterJournal(DocumentStatus _documentStatus)
    {
        ProjInvoiceJour emptyProjInvoiceJour;
        return emptyProjInvoiceJour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>