<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfCoByProdCalcTransDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportQueryAttribute (querystr(PmfCoByProdCalcTrans))
]

public class PmfCoByProdCalcTransDP extends SrsReportDataProviderPreProcessTempDB
{
    PmfCoByProdCalcTransTmp pmfCoByProdCalcTransTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPmfCoByProdCalcTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns data from the <c>PmfCoByProdCalcTransTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>PmfCoByProdCalcTransTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PmfCoByProdCalcTransTmp))
    ]
    public PmfCoByProdCalcTransTmp getPmfCoByProdCalcTransTmp()
    {
        select pmfCoByProdCalcTransTmp;
        return pmfCoByProdCalcTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        Query                   query;
        QueryRun                queryRun;
        ProdTable               queryProdTable;
        ProdCalcTrans           queryProdCalcTrans;
        PmfProdCoBy             queryPmfProdCoBy;
        PmfCoByProdCalcTrans    queryPmfCoByProdCalcTransProduction;
        PmfCoByProdCalcTrans    queryPmfCoByProdCalcTransDetails;

        // Get the query from the runtime using a dynamic query.
        // This base class method reads the query specified in the SRSReportQueryAttribute attribute.
        query = this.parmQuery();

        // To avoid changing the <c>PmfCoByProdCalcTrans</c> AOT query,
        // fields are added to ensure the query processing correctly
        //      required as this field is a join relation field
        query.dataSourceTable(tableNum(ProdTable)).addSelectionField(fieldNum(ProdTable, CollectRefProdId));
        //      required as these fields are required for table methods calculation
        query.dataSourceTable(tableNum(ProdTable)).addSelectionField(fieldNum(ProdTable, InventDimId));
        query.dataSourceTable(tableNum(ProdCalcTrans)).addSelectionField(fieldNum(ProdCalcTrans, ConsumpVariable));
        query.dataSourceTable(tableNum(ProdCalcTrans)).addSelectionField(fieldNum(ProdCalcTrans, ConsumpConstant));
        query.dataSourceTable(tableNum(ProdCalcTrans)).addSelectionField(fieldNum(ProdCalcTrans, CostAmount));
        query.dataSourceTable(tableNum(ProdCalcTrans)).addSelectionField(fieldNum(ProdCalcTrans, CostMarkup));
        query.dataSourceTable(tableNum(ProdCalcTrans)).addSelectionField(fieldNum(ProdCalcTrans, Qty));
        query.dataSourceTable(tableNum(ProdCalcTrans)).addSelectionField(fieldNum(ProdCalcTrans, RealCostAmount));
        query.dataSourceTable(tableNum(ProdCalcTrans)).addSelectionField(fieldNum(ProdCalcTrans, RealCostAdjustment));
        query.dataSourceTable(tableNum(ProdCalcTrans)).addSelectionField(fieldNum(ProdCalcTrans, TransRefType));

        // Run the query.
        queryRun = new QueryRun(query);

        pmfCoByProdCalcTransTmp.setConnection(this.parmUserConnection());
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(PmfCoByProdCalcTransTmp), true, true, true, false, true, pmfCoByProdCalcTransTmp);

        while (queryRun.next())
        {
            pmfCoByProdCalcTransTmp.clear();

            queryProdTable = queryRun.get(tableNum(ProdTable));
            queryProdCalcTrans = queryRun.get(tableNum(ProdCalcTrans));
            queryPmfProdCoBy = queryRun.get(tableNum(PmfProdCoBy));
            queryPmfCoByProdCalcTransDetails = queryRun.get(tableNum(PmfCoByProdCalcTrans), 2);

            pmfCoByProdCalcTransTmp.ProdId = queryProdTable.ProdId;
            pmfCoByProdCalcTransTmp.Name = queryProdTable.Name;
            pmfCoByProdCalcTransTmp.ItemId = queryProdTable.ItemId;
            pmfCoByProdCalcTransTmp.ProdStatus = queryProdTable.ProdStatus;
            pmfCoByProdCalcTransTmp.SchedStart = queryProdTable.SchedStart;
            pmfCoByProdCalcTransTmp.SchedEnd = queryProdTable.SchedEnd;
            pmfCoByProdCalcTransTmp.ProdTableCreatedDateTime = queryProdTable.createdDateTime;
            pmfCoByProdCalcTransTmp.DlvDate = queryProdTable.DlvDate;
            pmfCoByProdCalcTransTmp.CalcDate = queryProdTable.CalcDate;
            pmfCoByProdCalcTransTmp.QtyCalc = queryProdTable.QtyCalc;
            pmfCoByProdCalcTransTmp.SchedDate = queryProdTable.SchedDate;
            pmfCoByProdCalcTransTmp.StUpDate = queryProdTable.StUpDate;
            pmfCoByProdCalcTransTmp.QtyStUp = queryProdTable.QtyStUp;
            pmfCoByProdCalcTransTmp.FinishedDate = queryProdTable.FinishedDate;
            pmfCoByProdCalcTransTmp.ReportedFinishedGood = queryProdTable.reportedFinishedGood();
            pmfCoByProdCalcTransTmp.RealDate = queryProdTable.RealDate;
            pmfCoByProdCalcTransTmp.HistoricalCostQtyGood = queryProdTable.historicalCostQtyGood();
            pmfCoByProdCalcTransTmp.ReportedFinishedError = queryProdTable.reportedFinishedError();

            pmfCoByProdCalcTransTmp.CostGroupId = queryProdCalcTrans.CostGroupId;
            pmfCoByProdCalcTransTmp.CalcType1 = queryProdCalcTrans.CalcType;
            pmfCoByProdCalcTransTmp.CollectRefLevel = queryProdCalcTrans.CollectRefLevel;
            pmfCoByProdCalcTransTmp.Resource = queryProdCalcTrans.Resource;
            pmfCoByProdCalcTransTmp.ItemResourceName = queryProdCalcTrans.itemResourceName();
            pmfCoByProdCalcTransTmp.DisplayUnitId = queryProdCalcTrans.displayUnitId();
            pmfCoByProdCalcTransTmp.ConsumptionSum = queryProdCalcTrans.consumptionSum();
            pmfCoByProdCalcTransTmp.CostPriceSum = queryProdCalcTrans.costPriceSum();
            pmfCoByProdCalcTransTmp.CostPricePcs = queryProdCalcTrans.costPricePcs();
            pmfCoByProdCalcTransTmp.RealConsump = queryProdCalcTrans.RealConsump;
            pmfCoByProdCalcTransTmp.RealCostAmountTotal = queryProdCalcTrans.realCostAmountTotal();
            pmfCoByProdCalcTransTmp.RealCostPricePcs = queryProdCalcTrans.realCostPricePcs();
            pmfCoByProdCalcTransTmp.ProdCalcTransRecId = queryProdCalcTrans.RecId;

            pmfCoByProdCalcTransTmp.QtyCoByCalc = queryPmfProdCoBy.QtyCoByCalc;
            pmfCoByProdCalcTransTmp.ItemId1 = queryPmfProdCoBy.ItemId;
            pmfCoByProdCalcTransTmp.PmfProdCoByRecId1 = queryPmfProdCoBy.RecId;
            
            pmfCoByProdCalcTransTmp.CostGroupId2 = queryPmfCoByProdCalcTransDetails.CostGroupId;
            pmfCoByProdCalcTransTmp.CalcType5 = queryPmfCoByProdCalcTransDetails.CalcType;
            pmfCoByProdCalcTransTmp.CollectRefLevel2 = queryPmfCoByProdCalcTransDetails.CollectRefLevel;
            pmfCoByProdCalcTransTmp.Resource2 = queryPmfCoByProdCalcTransDetails.Resource;
            pmfCoByProdCalcTransTmp.ItemResourceName2 = queryPmfCoByProdCalcTransDetails.itemResourceName();
            pmfCoByProdCalcTransTmp.UnitId1 = queryPmfCoByProdCalcTransDetails.UnitId;
            pmfCoByProdCalcTransTmp.ConsumptionSum2 = queryPmfCoByProdCalcTransDetails.consumptionSum();
            pmfCoByProdCalcTransTmp.CostPriceSum2 = queryPmfCoByProdCalcTransDetails.costPriceSum();
            pmfCoByProdCalcTransTmp.CostPricePcs2 = queryPmfCoByProdCalcTransDetails.costPricePcs();
            pmfCoByProdCalcTransTmp.RealConsump2 = queryPmfCoByProdCalcTransDetails.RealConsump;
            pmfCoByProdCalcTransTmp.RealCostAmountTotal2 = queryPmfCoByProdCalcTransDetails.realCostAmountTotal();
            pmfCoByProdCalcTransTmp.RealCostPricePcs2 = queryPmfCoByProdCalcTransDetails.realCostPricePcs();
            pmfCoByProdCalcTransTmp.PmfCoByProdCalcTransDetailsRecId3 = queryPmfCoByProdCalcTransDetails.RecId;

            recordInsertList.add(pmfCoByProdCalcTransTmp);
        }

        ttsbegin;
        recordInsertList.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>