<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceDiagnosticsBatchJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class InventInventoryDataServiceDiagnosticsBatchJob extends RunBaseBatch implements BatchRetryable
{
    const int maxRetryCount = 8;
    const int ivbatchDurationSeconds = 60;
    
    NoYes onlyCheckPreviousMismatchedData;
    NoYes onlyCheckWHSItems;
    NoYes fixData;
    QueryRun queryRun;
    UserConnection  userConnection;
    InventInstrumentationLogger logger;

    // Dialog
    DialogField                 diaglogOnlyCheckPreviousMismatchedData;
    DialogField                 dialogOnlyCheckWHSItems;
    DialogField                 dialogCheckDetails;
    DialogField                 dialogFixData;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        onlyCheckPreviousMismatchedData,
        onlyCheckWHSItems,
        fixData
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        diaglogOnlyCheckPreviousMismatchedData = dialog.addField(enumStr(NoYes), "@SCM:InventoryServiceOnHandDiagnosticOnlyCheckPreviousMismatchedDataLabel", "");
        diaglogOnlyCheckPreviousMismatchedData.value(onlyCheckPreviousMismatchedData);

        dialogOnlyCheckWHSItems = dialog.addField(enumStr(NoYes), "@SCM:InventoryServiceOnHandDiagnosticOnlyCheckWHSItemLabel", "");
        dialogOnlyCheckWHSItems.value(onlyCheckWHSItems);

        dialogFixData = dialog.addField(enumStr(NoYes), "@SCM:InventoryServiceOnHandDiagnosticFixDiscrepancyLabel", "");
        dialogFixData.value(fixData);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        onlyCheckPreviousMismatchedData = diaglogOnlyCheckPreviousMismatchedData.value();
        onlyCheckWHSItems = dialogOnlyCheckWHSItems.value();
        fixData = dialogFixData.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        onlyCheckPreviousMismatchedData = NoYes::No;
        onlyCheckWHSItems = NoYes::No;
        fixData = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        queryRun = new QueryRun(queryStr(InventSumLocationSummarize));
        logger = InventInstrumentationLogger::CreateLogger(classStr(InventInventoryDataServiceDiagnosticsBatchJob));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyCheckPreviousMismatchedData</Name>
				<Source><![CDATA[
    public NoYes parmOnlyCheckPreviousMismatchedData(NoYes _onlyCheckPreviousMismatchedData = onlyCheckPreviousMismatchedData)
    {
        onlyCheckPreviousMismatchedData = _onlyCheckPreviousMismatchedData;
        return onlyCheckPreviousMismatchedData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyCheckWHSFeature</Name>
				<Source><![CDATA[
    public NoYes parmOnlyCheckWHSFeature(NoYes _onlyCheckWHSItems = onlyCheckWHSItems)
    {
        onlyCheckWHSItems = _onlyCheckWHSItems;
        return onlyCheckWHSItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixData</Name>
				<Source><![CDATA[
    public NoYes parmFixData(NoYes _fixData = fixData)
    {
        fixData = _fixData;
        return fixData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchJobExists</Name>
				<Source><![CDATA[
    public static boolean batchJobExists()
    {
        Batch batch;
        BatchJob batchJob;
        boolean batchJobExists = false;

        select firstonly batchJob
            where (batchJob.Status == BatchStatus::Ready
                    || batchJob.Status == BatchStatus::Waiting
                    || batchJob.Status == BatchStatus::Scheduled
                    || batchJob.Status == BatchStatus::Executing)
            exists join batch
                where batch.ClassNumber == classNum(InventInventoryDataServiceDiagnosticsBatchJob)
                    && batch.DataPartition == batchJob.DataPartition
                    && batch.BatchJobId == batchJob.RecId;

        if (batchJob)
        {
            batchJobExists = true;
        }

        return batchJobExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        var inventoryServiceClient = new InventoryServiceClient();
        var partitionVersion = str2Int(inventoryServiceClient.getPartitionSchemaVersion());
        var isPartitionByProductIdForDiagTool = (partitionVersion == 3);

        setPrefix(InventInventoryDataServiceDiagnosticsBatchJob::description());
        var instrumentationActivity = logger.getInventoryDataServiceActivity();

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        using (var activityContext = instrumentationActivity.getActivityContext_RunOnHandDiagnostic(onlyCheckPreviousMismatchedData, onlyCheckWHSItems, fixData))
        {
            if (onlyCheckPreviousMismatchedData)
            {
                this.resetCheckTableQuantities();
            }
            else
            {
                InventoryServiceOnHandCheckTable::truncate();
                this.generateCheckTable(isPartitionByProductIdForDiagTool);
            }

            for (int i = 0; i < maxRetryCount; i++)
            {
                using (var activityContextPerBatch = instrumentationActivity.getActivityContext_RunOnHandDiagnosticPerBatch())
                {
                    var startTime = DateTimeUtil::utcNow();
                    var beforeCount = this.getCheckTableCount();

                    this.checkInventSum(isPartitionByProductIdForDiagTool);
            
                    var afterCount = this.getCheckTableCount();
                    var endTime = DateTimeUtil::utcNow();
                    
                    instrumentationActivity.logOnHandDiagnosticPerBatchInfo(activityContextPerBatch, i, startTime, endTime, beforeCount, afterCount);

                    if (afterCount == 0 || beforeCount == afterCount)
                    {
                        logger.logInformation(strFmt("@SCM:InventoryServiceOnHandDiagnosticBatchJobFinishInfo"));
                        break;
                    }

                    var timeDifferenceSeconds = DateTimeUtil::getDifference(endTime, startTime);

                    if (timeDifferenceSeconds < ivbatchDurationSeconds)
                    {
                        sleep((ivbatchDurationSeconds-timeDifferenceSeconds)*1000);
                    }
                }
            }
                
            if (fixData)
            {
                this.fixSummaryData();
                logger.logInformation("@SCM:InventoryServiceOnHandDiagnosticBatchJobDataFixInfo");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCheckTableCount</Name>
				<Source><![CDATA[
    private int getCheckTableCount()
    {
        return (select count(RecId) from InventoryServiceOnHandCheckTable).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCheckTable</Name>
				<Source><![CDATA[
    internal void generateCheckTable(boolean _isPartitionByProductIdForDiagTool)
    {
        while (queryRun.next())
        {
            ttsbegin;
            InventoryServiceOnHandCheckTable onHandCheckTable;
            InventSum inventSum = queryRun.get(tableNum(InventSum));

            onHandCheckTable.itemId = inventSum.ItemId;
            onHandCheckTable.InventSiteId = inventSum.InventSiteId;
            onHandCheckTable.InventLocationId = inventSum.InventLocationId;
            onHandCheckTable.Type = InventInventoryDataServiceDiagnosticsLogType::Aggregation;
            onHandCheckTable.insert();
            ttscommit;
        }

        if (InventInventoryDataServiceWHSFeature::isFeatureEnabled())
        {
            this.updateWHSItemsType(_isPartitionByProductIdForDiagTool);
        }

        if (onlyCheckWHSItems)
        {
            this.cleanNotWHSItems();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCheckTableQuantities</Name>
				<Source><![CDATA[
    private void resetCheckTableQuantities()
    {
        ttsbegin;
        InventoryServiceOnHandCheckTable onHandCheckTable;
        update_recordset onHandCheckTable setting Arrived_Fno = 0, Arrived_IV = 0, AvailOrdered_Fno = 0, AvailOrdered_IV = 0, AvailPhysical_Fno = 0, AvailPhysical_IV = 0, Deducted_Fno = 0, Deducted_IV = 0, OnOrder_Fno = 0, OnOrder_IV = 0, Ordered_Fno = 0, Ordered_IV = 0, PhysicalInvent_Fno = 0, PhysicalInvent_IV = 0, Picked_Fno = 0, Picked_IV = 0, PostedQty_Fno = 0, PostedQty_IV = 0, QuotationIssue_Fno = 0, QuotationIssue_IV = 0, QuotationReceipt_Fno = 0, QuotationReceipt_IV = 0, Received_Fno = 0, Received_IV = 0, ReservOrdered_Fno = 0, ReservOrdered_IV = 0, ReservPhysical_Fno = 0, ReservPhysical_IV = 0, Registered_Fno = 0, Registered_IV = 0;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanNotWHSItems</Name>
				<Source><![CDATA[
    private void cleanNotWHSItems()
    {
        ttsbegin;
        InventoryServiceOnHandCheckTable onHandCheckTable;
        delete_from onHandCheckTable where onHandCheckTable.Type == InventInventoryDataServiceDiagnosticsLogType::Aggregation;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWHSItemsType</Name>
				<Source><![CDATA[
    private void updateWHSItemsType(boolean _isPartitionByProductIdForDiagTool)
    {
        WHSInventReserve whsInventReserveRecord;
        InventoryServiceOnHandCheckTable onHandCheckTable; 

        var ivClient = new InventoryServiceClient();
        var partitionVersion = str2Int(ivClient.getPartitionSchemaVersion());

        ttsbegin;

        // If user executes this logic, syncing WMS data would fix the descrepancy if customer missing data with hierarchyLevel 1 and 2. 
        if (_isPartitionByProductIdForDiagTool)
        {
            update_recordset onHandCheckTable setting Type = InventInventoryDataServiceDiagnosticsLogType::WHS
                exists join whsInventReserveRecord
                    where whsInventReserveRecord.HierarchyLevel <= 2
                && onHandCheckTable.InventSiteId == whsInventReserveRecord.InventSiteId
                && onHandCheckTable.InventLocationId == whsInventReserveRecord.InventLocationId
                && onHandCheckTable.ItemId == whsInventReserveRecord.ItemId
                && onHandCheckTable.DataAreaId == whsInventReserveRecord.DataAreaId;
        }
        else
        {
            update_recordset onHandCheckTable setting Type = InventInventoryDataServiceDiagnosticsLogType::WHS
                exists join whsInventReserveRecord
                    where whsInventReserveRecord.HierarchyLevel == 2
                && onHandCheckTable.InventSiteId == whsInventReserveRecord.InventSiteId
                && onHandCheckTable.InventLocationId == whsInventReserveRecord.InventLocationId
                && onHandCheckTable.ItemId == whsInventReserveRecord.ItemId
                && onHandCheckTable.DataAreaId == whsInventReserveRecord.DataAreaId;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventSum</Name>
				<Source><![CDATA[
    private void checkInventSum(boolean _isPartitionByProductIdForDiagTool)
    {
        System.Threading.Tasks.Task[] threadTasklist = InventInventoryDataServiceBatchJobHelper::allocateTasks(InventInventoryDataServiceJobTaskType::OnHandDiagnose, true, _isPartitionByProductIdForDiagTool);

        this.waitForAsyncTasks(threadTasklist);
        InventoryServiceOnHandCheckTable::updateOnlyFnoData(_isPartitionByProductIdForDiagTool);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixSummaryData</Name>
				<Source><![CDATA[
    private void fixSummaryData()
    {
        InventoryServiceOnHandCheckTable onHandCheckTable;
        InventSum inventSum;
        // fix no whs item 
        var parameter = InventInventoryDataServiceParameters::find();
        ttsbegin;
        if (parameter.IsProcessingQueueBackup)
        {
            InventInventoryDataServiceInventSumQueue inventSumQueue;

            insert_recordset inventSumQueue (ItemId, Company, InventDimId)
                select ItemId, DataAreaId
                    from onHandCheckTable
                    where onHandCheckTable.Arrived_Fno != onHandCheckTable.Arrived_IV
                    || onHandCheckTable.Deducted_Fno != onHandCheckTable.Deducted_IV
                    || onHandCheckTable.OnOrder_Fno != onHandCheckTable.OnOrder_IV
                    || onHandCheckTable.Ordered_Fno != onHandCheckTable.Ordered_IV
                    || onHandCheckTable.PhysicalInvent_Fno != onHandCheckTable.PhysicalInvent_IV
                    || onHandCheckTable.Picked_Fno != onHandCheckTable.Picked_IV
                    || onHandCheckTable.PostedQty_Fno != onHandCheckTable.PostedQty_IV
                    || onHandCheckTable.QuotationIssue_Fno != onHandCheckTable.QuotationIssue_IV
                    || onHandCheckTable.QuotationReceipt_Fno != onHandCheckTable.QuotationReceipt_IV
                    || onHandCheckTable.Received_Fno != onHandCheckTable.Received_IV
                    || onHandCheckTable.Registered_Fno != onHandCheckTable.Registered_IV
                    || (onHandCheckTable.Type == InventInventoryDataServiceDiagnosticsLogType::Aggregation
                        && (onHandCheckTable.AvailOrdered_Fno != onHandCheckTable.AvailOrdered_IV
                            || onHandCheckTable.AvailPhysical_Fno != onHandCheckTable.AvailPhysical_IV
                            || onHandCheckTable.ReservOrdered_Fno != onHandCheckTable.ReservOrdered_IV
                            || onHandCheckTable.ReservPhysical_Fno != onHandCheckTable.ReservPhysical_IV))
                join inventDimId from inventSum
                    where inventSum.ItemId == onHandCheckTable.ItemId
                    && inventSum.inventSiteId == onHandCheckTable.InventSiteId
                    && inventSum.InventLocationId == onHandCheckTable.InventLocationId
                    && inventSum.DataAreaId == onHandCheckTable.DataAreaId;
        }
        else
        {
            InventInventoryDataServiceInventSumQueueBackup inventSumQueueBackup;

            insert_recordset inventSumQueueBackup (ItemId, Company, InventDimId)
                select ItemId, DataAreaId
                    from onHandCheckTable
                    where onHandCheckTable.Arrived_Fno != onHandCheckTable.Arrived_IV
                    || onHandCheckTable.Deducted_Fno != onHandCheckTable.Deducted_IV
                    || onHandCheckTable.OnOrder_Fno != onHandCheckTable.OnOrder_IV
                    || onHandCheckTable.Ordered_Fno != onHandCheckTable.Ordered_IV
                    || onHandCheckTable.PhysicalInvent_Fno != onHandCheckTable.PhysicalInvent_IV
                    || onHandCheckTable.Picked_Fno != onHandCheckTable.Picked_IV
                    || onHandCheckTable.PostedQty_Fno != onHandCheckTable.PostedQty_IV
                    || onHandCheckTable.QuotationIssue_Fno != onHandCheckTable.QuotationIssue_IV
                    || onHandCheckTable.QuotationReceipt_Fno != onHandCheckTable.QuotationReceipt_IV
                    || onHandCheckTable.Received_Fno != onHandCheckTable.Received_IV
                    || onHandCheckTable.Registered_Fno != onHandCheckTable.Registered_IV
                    || (onHandCheckTable.Type == InventInventoryDataServiceDiagnosticsLogType::Aggregation
                        && (onHandCheckTable.AvailOrdered_Fno != onHandCheckTable.AvailOrdered_IV
                            || onHandCheckTable.AvailPhysical_Fno != onHandCheckTable.AvailPhysical_IV
                            || onHandCheckTable.ReservOrdered_Fno != onHandCheckTable.ReservOrdered_IV
                            || onHandCheckTable.ReservPhysical_Fno != onHandCheckTable.ReservPhysical_IV))
                join inventDimId from inventSum
                    where inventSum.ItemId == onHandCheckTable.ItemId
                    && inventSum.inventSiteId == onHandCheckTable.InventSiteId
                    && inventSum.InventLocationId == onHandCheckTable.InventLocationId
                    && inventSum.DataAreaId == onHandCheckTable.DataAreaId;
        }

        if (InventInventoryDataServiceWHSFeature::isFeatureEnabled())
        {
            WHSInventReserve whsInventReserve;
            
            if (parameter.IsProcessingQueueBackup)
            {
                InventInventoryDataServiceWHSQueue whsQueue;
                insert_recordset whsQueue (ITEMID, INVENTDIMID, Company)
                    select ItemId
                        from onHandCheckTable
                        where onHandCheckTable.Type == InventInventoryDataServiceDiagnosticsLogType::WHS
                        && (onHandCheckTable.AvailOrdered_Fno != onHandCheckTable.AvailOrdered_IV
                            || onHandCheckTable.AvailPhysical_Fno != onHandCheckTable.AvailPhysical_IV
                            || onHandCheckTable.ReservOrdered_Fno != onHandCheckTable.ReservOrdered_IV
                            || onHandCheckTable.ReservPhysical_Fno != onHandCheckTable.ReservPhysical_IV)
                    join inventDimID, DataAreaId from whsInventReserve
                        where whsInventReserve.ItemId == onHandCheckTable.ItemId
                            && whsInventReserve.inventsiteid == onHandCheckTable.inventsiteid
                            && whsInventReserve.inventlocationid == onHandCheckTable.inventlocationid
                            && whsInventReserve.HierarchyLevel <= 3
                            && whsInventReserve.DataAreaId == onHandCheckTable.DataAreaId;
            }
            else
            {
                InventInventoryDataServiceWHSQueueBackup whsQueueBackup;
                insert_recordset whsQueueBackup (ITEMID, INVENTDIMID, Company)
                    select ItemId
                        from onHandCheckTable
                        where onHandCheckTable.Type == InventInventoryDataServiceDiagnosticsLogType::WHS
                        && (onHandCheckTable.AvailOrdered_Fno != onHandCheckTable.AvailOrdered_IV
                            || onHandCheckTable.AvailPhysical_Fno != onHandCheckTable.AvailPhysical_IV
                            || onHandCheckTable.ReservOrdered_Fno != onHandCheckTable.ReservOrdered_IV
                            || onHandCheckTable.ReservPhysical_Fno != onHandCheckTable.ReservPhysical_IV)
                    join inventDimID, DataAreaId from whsInventReserve
                        where whsInventReserve.ItemId == onHandCheckTable.ItemId
                            && whsInventReserve.inventsiteid == onHandCheckTable.inventsiteid
                            && whsInventReserve.inventlocationid == onHandCheckTable.inventlocationid
                            && whsInventReserve.HierarchyLevel <= 3
                            && whsInventReserve.DataAreaId == onHandCheckTable.DataAreaId;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend this class must override the <c>runsImpersonated</c> method and return
    ///    false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid instance of the <c>QueryRun</c> class.If you change the return value to false, the
    ///    button will no longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Integer         version     = conPeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = packedClass;
                if (packedQuery && conLen(packedQuery) == 1)
                {
                    queryRun = new QueryRun(packedQuery);
                }

                logger = InventInstrumentationLogger::CreateLogger(classStr(InventInventoryDataServiceDiagnosticsBatchJob));
                ret = true;
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventInventoryDataServiceDiagnosticsBatchJob construct()
    {
        return new InventInventoryDataServiceDiagnosticsBatchJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SCM:InventoryServiceOnHandDiagnosticBatchJobDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        InventInventoryDataServiceDiagnosticsBatchJob InventInventoryDataServiceDiagnosticsBatchJob = InventInventoryDataServiceDiagnosticsBatchJob::newParameters();

        if (InventInventoryDataServiceDiagnosticsBatchJob.prompt())
        {
            InventInventoryDataServiceDiagnosticsBatchJob.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    static InventInventoryDataServiceDiagnosticsBatchJob newParameters()
    {
        InventInventoryDataServiceDiagnosticsBatchJob diagnostics = InventInventoryDataServiceDiagnosticsBatchJob::construct();

        diagnostics.getLast();
        diagnostics.parmFixData(NoYes::No);

        diagnostics.init();

        return diagnostics;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
    internal UserConnection parmUserConnection(UserConnection _userConnection = userConnection)
    {
        userConnection = _userConnection;
        return userConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>waitForAsyncTasks</Name>
				<Source><![CDATA[
    private void waitForAsyncTasks(System.Threading.Tasks.Task[] _threadTasklist)
    {
        int connectionKeepAlivePingIntervalInMilliSec = 5*60*1000;
        
        while (!System.Threading.Tasks.Task::WaitAll(_threadTasklist, connectionKeepAlivePingIntervalInMilliSec))
        {
            if (this.parmUserConnection())
            {
                var statement = this.parmUserConnection().createStatement();
                var sqlKeepAlive = 'select SYSDATETIME();';
        
                ResultSet resultset = statement.executeQuery(sqlKeepAlive);
                resultset.next();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>