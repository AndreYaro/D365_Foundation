<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableCheckIfUpdateContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchTableCheckIfUpdateContract</c> class will be used as the data contract class for the <c>PurchTable.checkIfUpdate</c> method.
/// </summary>
class PurchTableCheckIfUpdateContract
implements SysPackable
{
    boolean checkConfirmationRequest;
    boolean checkBindingConfirmationRequest;
    boolean checkPurchaseOrder;
    boolean checkReceiptsList;
    boolean checkPackingSlip;
    boolean checkInvoice;
    boolean excludePendingInvoice;

    // <GEERU>
    boolean checkInvoice4Paym;
    boolean checkFacture;
    boolean checkCommFacture;    
    // </GEERU>

    // <GBR>
    boolean checkFiscalDocumentText_BR;
    // </GBR>

    // <GBR>
    #localmacro.List1
        checkPurchaseOrder,
        checkReceiptsList,
        checkPackingSlip,
        checkInvoice,
        excludePendingInvoice
    #endmacro
    // </GBR>

    // <GBR>
    #localmacro.List2
        checkPurchaseOrder,
        checkReceiptsList,
        checkPackingSlip,
        checkInvoice,
        excludePendingInvoice
        ,checkInvoice4Paym
        ,checkFacture
    #endmacro
    // </GBR>

    #localmacro.List3
        checkPurchaseOrder,
        checkReceiptsList,
        checkPackingSlip,
        checkInvoice,
        excludePendingInvoice,
        checkInvoice4Paym,
        checkFacture,
        checkFiscalDocumentText_BR
    #endmacro

    #localmacro.List4
        checkPurchaseOrder,
        checkReceiptsList,
        checkPackingSlip,
        checkInvoice,
        excludePendingInvoice
        // <GEERU>
        ,checkInvoice4Paym
        ,checkFacture
        // </GEERU>
        // <GBR>
        ,checkFiscalDocumentText_BR
        // </GBR>
        ,checkConfirmationRequest
    #endmacro

    #localmacro.List5
        checkPurchaseOrder,
        checkReceiptsList,
        checkPackingSlip,
        checkInvoice,
        excludePendingInvoice
        // <GEERU>
        ,checkInvoice4Paym
        ,checkFacture
        // </GEERU>
        // <GBR>
        ,checkFiscalDocumentText_BR
        // </GBR>
        ,checkConfirmationRequest
        ,checkBindingConfirmationRequest
    #endmacro

    #define.CurrentVersion(6)

    #localmacro.CurrentList
        checkPurchaseOrder,
        checkReceiptsList,
        checkPackingSlip,
        checkInvoice,
        excludePendingInvoice
        // <GEERU>
        ,checkInvoice4Paym
        ,checkFacture
        // </GEERU>
        // <GBR>
        ,checkFiscalDocumentText_BR
        // </GBR>
        ,checkConfirmationRequest
        ,checkBindingConfirmationRequest
        ,checkCommFacture
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckCommFacture_RU</Name>
				<Source><![CDATA[
    public boolean parmCheckCommFacture_RU(boolean _checkCommFacture = checkCommFacture)
    {
        checkCommFacture = _checkCommFacture;
        return checkCommFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckConfirmationRequest</Name>
				<Source><![CDATA[
    public  boolean parmCheckConfirmationRequest(boolean _checkConfirmationRequest = checkConfirmationRequest)
    {
        checkConfirmationRequest = _checkConfirmationRequest;
        return _checkConfirmationRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckBindingConfirmationRequest</Name>
				<Source><![CDATA[
    public  boolean parmCheckBindingConfirmationRequest(boolean _checkBindingConfirmationRequest = checkBindingConfirmationRequest)
    {
        checkBindingConfirmationRequest = _checkBindingConfirmationRequest;
        return checkBindingConfirmationRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckFacture_RU</Name>
				<Source><![CDATA[
        public boolean parmCheckFacture_RU(boolean _checkFacture = checkFacture)
    {
        checkFacture = _checkFacture;
        return checkFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckInvoice</Name>
				<Source><![CDATA[
        public boolean parmCheckInvoice(boolean _checkInvoice = checkInvoice)
    {
        checkInvoice = _checkInvoice;
        return checkInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckInvoice4Paym_RU</Name>
				<Source><![CDATA[
        public boolean parmCheckInvoice4Paym_RU(boolean _checkInvoice4Paym = checkInvoice4Paym)
    {
        checkInvoice4Paym = _checkInvoice4Paym;
        return checkInvoice4Paym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckPackingSlip</Name>
				<Source><![CDATA[
        public  boolean parmCheckPackingSlip(boolean _checkPackingSlip = checkPackingSlip)
    {
        checkPackingSlip = _checkPackingSlip;
        return checkPackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckPurchaseOrder</Name>
				<Source><![CDATA[
        public  boolean parmCheckPurchaseOrder(boolean _checkPurchaseOrder = checkPurchaseOrder)
    {
        checkPurchaseOrder = _checkPurchaseOrder;
        return checkPurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckReceiptsList</Name>
				<Source><![CDATA[
        public  boolean parmCheckReceiptsList(boolean _checkReceiptsList = checkReceiptsList)
    {
        checkReceiptsList = _checkReceiptsList;
        return checkReceiptsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludePendingInvoice</Name>
				<Source><![CDATA[
        public boolean parmExcludePendingInvoice(boolean _excludePendingInvoice = excludePendingInvoice)
    {
        excludePendingInvoice = _excludePendingInvoice;
        return excludePendingInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);

        switch (version)
        {
            // <GBR>
            case 1:
                [version,#List1] = _packedClass;
                return true;
            case 2:
                [version,#List2] = _packedClass;
                return true;
            // </GBR>
            case 3:
                [version,#List3] = _packedClass;
                return true;
            case 4:
                [version,#List4] = _packedClass;
                return true;
            case 5:
                [version,#List5] = _packedClass;
                return true;
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                return true;
            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static public PurchTableCheckIfUpdateContract construct()
    {
        return new PurchTableCheckIfUpdateContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PurchTableCheckIfUpdateContract</c> class based on a container from a
    /// prior call to <c>PurchTableCheckIfUpdateContract.pack</c> method.
    /// </summary>
    /// <param name="_packedClass">
    /// A <c>Container</c> that contains the packed class.
    /// </param>
    /// <returns>
    /// An instance of the <c>PurchTableCheckIfUpdateContract</c> class identical to the one that was
    /// packed into the <c>container</c> .
    /// </returns>
    static public PurchTableCheckIfUpdateContract create(container _packedClass)
    {
        PurchTableCheckIfUpdateContract purchTableCheckIfUpdateContract = PurchTableCheckIfUpdateContract::construct();
        purchTableCheckIfUpdateContract.unpack(_packedClass);
        return purchTableCheckIfUpdateContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCheckAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PurchTableCheckIfUpdateContract</c> class and sets all check parameters to true.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PurchTableCheckIfUpdateContract</c> class.
    /// </returns>
    static public PurchTableCheckIfUpdateContract newCheckAll()
    {
        // <GEERU>
        #isoCountryRegionCodes
        // </GEERU>

        PurchTableCheckIfUpdateContract purchTableCheckIfUpdateContract = PurchTableCheckIfUpdateContract::construct();
        purchTableCheckIfUpdateContract.parmCheckConfirmationRequest(true);
        purchTableCheckIfUpdateContract.parmCheckBindingConfirmationRequest(true);
        purchTableCheckIfUpdateContract.parmCheckPurchaseOrder(true);
        purchTableCheckIfUpdateContract.parmCheckInvoice(true);
        purchTableCheckIfUpdateContract.parmCheckPackingSlip(true);
        purchTableCheckIfUpdateContract.parmCheckReceiptsList(true);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            purchTableCheckIfUpdateContract.parmCheckInvoice4Paym_RU(true);
            purchTableCheckIfUpdateContract.parmCheckFacture_RU(true);
            purchTableCheckIfUpdateContract.parmCheckCommFacture_RU(true);
        }
        // </GEERU>

        return purchTableCheckIfUpdateContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>