<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfCoBySearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Searches for matching Formula Co/By records.
/// </summary>
public class PmfCoBySearch extends PmfCoBySearchBase
{
    BOMId                   bomId;
    RecId                   bomVersionRecId;
    ItemId                  parentItemId;
    boolean                 dontCheckApprove;
    boolean                 forcedSkipHierarchyCheck;
    boolean                 doSearch;                   // Disables call to super in search()

    PmfFormulaCoBy          formulaCoBy;

    RecordSortedList        coByList;
    boolean                 first;
    boolean                 useRecordLevelSecurity;     // show only BOMline transactions which are legal regarding to the record level security setup.
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the BOM id for this search.
    /// </summary>
    /// <returns>Current BOM id value.</returns>
    public BOMId bomId()
    {
        return bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>coBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the current PmfCoByMap record found by this search object.
    /// </summary>
    /// <returns>Current PmfCoByMap retrieved by this search object. Empty record if nothing has been found or no more
    /// matching records left.</returns>
    public PmfCoByMap coBy()
    {
        return formulaCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the search.
    /// </summary>
    /// <remarks>
    /// After calling this method, a call to next() will advance to the first matching
    /// record if there is any.
    /// </remarks>
    public void init()
    {
        BOMTable    bomTable;

        bomTable = BOMTable::find(bomId);

        if (bomTable)
        {
            if (!dontCheckApprove)
            {
                if (!bomTable.isApproved())
                {
                    if (#PmfEnabled
                        && bomTable.PmfBOMFormula == PmfBOMFormula::Formula)
                    {
                        throw error(strfmt("@PRO1909",bomId));
                    }
                    else
                    {
                        throw error(strfmt("@SYS29115",bomId));
                    }
                }
            }

            if (bomTable.CheckBOM && !forcedSkipHierarchyCheck)
            {
                if (!BOMHierarchyCheck::checkBOM(bomId,true))
                {
                    throw error("@SYS24847");
                }
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPmfFormulaCoByList</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method intializes the record sort list
    /// </summary>
    public void initPmfFormulaCoByList()
    {
        coByList     = new RecordSortedList(tablenum(PmfFormulaCoBy));
        coByList.sortOrder(
            fieldnum(PmfFormulaCoBy,bomId),
            fieldnum(PmfFormulaCoBy,LineNum),
            fieldnum(PmfFormulaCoBy,bomVersionRefRecId),
            fieldnum(PmfFormulaCoBy,RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the item id for the formula item that the matching Co/By records are a part of.
    /// </summary>
    /// <returns>Parent item id.</returns>
    public ItemId itemId()
    {
        return parentItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>list</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the internal record list that holds the matching records.
    /// </summary>
    /// <returns>Record list holding all the matching Co/By records.</returns>
    /// <remarks>
    /// This class actually retrieves all the records into a sorted list when the
    /// search is initialized. This is an internal implementation and other classes
    /// should be careful about using this method.
    /// </remarks>
    public RecordSortedList list()
    {
        return coByList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called when the object is created
    /// </summary>
    /// <param name="_bomId">BOMId to use</param>
    /// <param name="_recId">RecId of the BOMVersion</param>
    /// <param name="_itemId">ItemId to use</param>
    /// <param name="_dontCheckApprove">flag to check approved or not</param>
    /// <param name="_forUpdate">flag to update record or not</param>
    /// <param name="_recordLevelSecurity">flag to check record level security or not</param>
    protected void new(
        BOMId                   _bomId,
        PmfBOMVersionRefRecId   _recId,
        ItemId                  _itemId                     = '',
        boolean                 _dontCheckApprove           = false,
        boolean                 _forUpdate                  = false,
        boolean                 _recordLevelSecurity        = false)
    {
        doSearch                = true;

        bomId                   = _bomId;
        bomVersionRecId         = _recId;
        parentItemId            = _itemId;
        dontCheckApprove        = _dontCheckApprove;
        useRecordLevelSecurity  = _recordLevelSecurity;

        coByList     = new RecordSortedList(tablenum(PmfFormulaCoBy));
        coByList.sortOrder(
            fieldnum(PmfFormulaCoBy,bomId),
            fieldnum(PmfFormulaCoBy,LineNum),
            fieldnum(PmfFormulaCoBy,bomVersionRefRecId),
            fieldnum(PmfFormulaCoBy,RecId));

        super(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Advance to the next record.
    /// </summary>
    /// <returns>True if the next record is valid; false if there are no more records.</returns>
    public boolean next()
    {
        if (first)
        {
            if (! coByList.first(formulaCoBy))
            {
                formulaCoBy.clear();
            }

            first = false;
        }
        else
        {
            if (! coByList.next(formulaCoBy))
            {
                formulaCoBy.clear();
            }
        }

        if (formulaCoBy)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pack the state of this class to transition between client and server.
    /// </summary>
    /// <param name="_restorePosition">Optional. True if the current Co/By record position should be kept in the current
    /// search. Default is false.</param>
    /// <returns>Container holding the state of this search.</returns>
    /// <remarks>
    /// This method creates the state container by scanning through the matching records
    /// list. This will normal advance the current record pointer to the end of the list
    /// for this state object instance. If it is necessary to ensure that the current
    /// position is retained then you must set _restorePosition to true.
    /// </remarks>
    public container pack(boolean _restorePosition = false)
    {
        container con = connull();
        recId     positionRecId
            = _restorePosition ? formulaCoBy.RecId : 0;

        if (!coByList)
        {
            return con;
        }

        formulaCoBy.clear();

        if (coByList.first(formulaCoBy))
        {
            do
            {
                this.setData();
                con += [formulaCoBy];
            }
            while (coByList.next(formulaCoBy));
        }

        formulaCoBy.clear();

        if (positionRecId && coByList.first(formulaCoBy))
        {
            while (formulaCoBy.RecId && formulaCoBy.RecId != positionRecId)
            {
                coByList.next(formulaCoBy);
            }
        }

        if (formulaCoBy.RecId)
        {
            this.setData();
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMId</Name>
				<Source><![CDATA[
    public BOMId parmBOMId(BOMId _bomId = bomId)
    {
        bomId = _bomId;

        return bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMVersionRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets or sets the BOMVersion recId for the co/by
    /// </summary>
    /// <param name="_bomVersionRecId">The recId of BOMVersion</param>
    /// <returns>returns recId of the BOMVersion</returns>
    public RecId parmBOMVersionRecId(RecId _bomVersionRecId = bomVersionRecId)
    {
        bomVersionRecId = _bomVersionRecId;

        return bomVersionRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCoBylist</Name>
				<Source><![CDATA[
    public RecordSortedList parmCoBylist(RecordSortedList _coByList = null)
    {
        if (_coByList)
        {
            first = true;
            coByList = _coByList;
        }

        return coByList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoSearch</Name>
				<Source><![CDATA[
    public boolean parmDoSearch(boolean _doSearch = doSearch)
    {
        doSearch = _doSearch;

        return doSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForcedSkipHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the forcedSkipHIerarchy parameter.
    /// </summary>
    /// <param name="_forcedSkipHierarchy">Optional. True to skip the hierarchy check; false to do it.</param>
    /// <returns>The current value of this property.</returns>
    /// <remarks>
    /// During initialization, the BOM hierarchy is validated if this parameter is
    /// set to false (the default). To improve search performance and if the hierarchy is
    /// known to be valid then this parameter should be set to true.
    /// </remarks>
    public boolean parmForcedSkipHierarchy(
        boolean _forcedSkipHierarchy = forcedSkipHierarchyCheck)
    {
        forcedSkipHierarchyCheck = _forcedSkipHierarchy;

        return forcedSkipHierarchyCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentItemId</Name>
				<Source><![CDATA[
    public ItemId parmParentItemId(ItemId _parentItemId = parentItemId)
    {
        parentItemId = _parentItemId;

        return parentItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseRecordLevelSecurity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Property specifying if record level security should be enabled on the retrieved records.
    /// </summary>
    /// <param name="_useRecordLevelSecurity">Optional. True to enable record level security, false otherwise.</param>
    /// <returns>The current value of this property. True if record level security will be enabled; false
    /// otherwise.</returns>
    /// <remarks>
    /// The internal property is not initialized so defaults to false.
    /// </remarks>
    public boolean parmUseRecordLevelSecurity(
        boolean _useRecordLevelSecurity = useRecordLevelSecurity)
    {
        useRecordLevelSecurity = _useRecordLevelSecurity;

        return useRecordLevelSecurity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>search</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the matching Formula Co/By records from the database and stores them in an internal sorted list.
    /// </summary>
    protected void search()
    {
        if (!doSearch)
        {
            return;
        }

        if (!bomId)
        {
            select nofetch formulaCoBy where formulaCoBy.RecId == 0;
            return;
        }

        this.initPmfFormulaCoByList();

        formulaCoBy.selectForUpdate(update);
        formulaCoBy.recordLevelSecurity(useRecordLevelSecurity);

        while select formulaCoBy
            where formulaCoBy.bomId == bomId
                && formulaCoBy.bomVersionRefRecId == bomVersionRecId
        {
            coByList.ins(formulaCoBy);
        }

        first = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the current Co/By record changes.
    /// </summary>
    /// <remarks>
    /// The base implementation does nothing. Sub-classes may use this to change
    /// other state variables when the Co/By record changes.
    /// </remarks>
    public void setData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restore the state of this object from the given packed container.
    /// </summary>
    /// <param name="_con">Container created by the pack method.</param>
    public void unpack(container _con)
    {
        int x;

        this.initPmfFormulaCoByList();

        formulaCoBy.clear();

        for (x = 1; x <= conlen(_con); x++)
        {
            formulaCoBy = conpeek(_con,x);
            coByList.ins(formulaCoBy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>coByTreePackLevelConfig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convenience method to do search and get the pack states from that result.
    /// </summary>
    /// <param name="_bomId">BOMId to use</param>
    /// <param name="_recId">RecId of the BOMVersion</param>
    /// <param name="_itemId">ItemId to use</param>
    /// <param name="_skipCheck">flag to skip hierarchy check</param>
    /// <param name="_useRecordLevelSecurity">flag to use record level security or not</param>
    /// <returns>The packed state for the resulting search</returns>
    public static container coByTreePackLevelConfig(
        BOMId                   _bomId,
        PmfBOMVersionRefRecId   _recId,
        ItemId                  _itemId,
        boolean                 _skipCheck,
        boolean                 _useRecordLevelSecurity)
    {
        PmfCoBySearch coBySearch =
            PmfCoBySearch::construct(_bomId,_recId,_itemId,true,false);

        coBySearch.parmForcedSkipHierarchy(_skipCheck);
        coBySearch.parmUseRecordLevelSecurity(_useRecordLevelSecurity);
        coBySearch.init();
        return coBySearch.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method returns a instance of the class
    /// </summary>
    /// <param name="_bomId">BOMId to use</param>
    /// <param name="_recId">RecId of the BOMVersion</param>
    /// <param name="_itemId">ItemId to use</param>
    /// <param name="_dontCheckApprove">flag to check approved or not</param>
    /// <param name="_forUpdate">flag to update record or not</param>
    /// <param name="_recordLevelSecurity">flag to check record level security or not</param>
    /// <returns>returns an instance of the class</returns>
    public static PmfCoBySearch construct(
        BOMId                   _bomId,
        PmfBOMVersionRefRecId   _recId,
        ItemId                  _itemId                     = '',
        boolean                 _dontCheckApprove           = false,
        boolean                 _forUpdate                  = false,
        boolean                 _recordLevelSecurity        = false)
    {
        return new PmfCoBySearch(
            _bomId,
            _recId,
            _itemId,
            _dontCheckApprove,
            _forUpdate,
            _recordLevelSecurity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReqCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a instance of the Formula Co/By search class
    /// </summary>
    /// <param name="_reqPO">ReqPO to use</param>
    /// <param name="_reqSetup">ReqSetup to use</param>
    /// <returns>returns an instance of the class</returns>
    /// <remarks>
    /// The new search object will be initialized automatically.
    /// </remarks>
    public static PmfCoBySearch newReqCalculation(
        ReqPO    _reqPO,
        ReqSetup _reqSetup)
    {
        PmfCoBySearch           pmfCoBySearch;
        TransDate               bomDate = ReqTransPoMarkFirmUseDlvDateForBOMVersionFlight::instance().isEnabled() ? _reqPO.getBOMDate() : _reqPO.ReqDate;

        BOMVersion              bomVersion = BOMVersion::findApproved(
                                                _reqPO.ItemId,
                                                _reqPO.ItemBomId,
                                                true,
                                                bomDate,
                                                bomDate,
                                                _reqPO.Qty);
        pmfCoBySearch = new PmfCoBySearch(
                                bomVersion.bomId,
                                bomVersion.RecId,
                                _reqPO.ItemId,
                                true,
                                false,
                                false);

        pmfCoBySearch.init();
        pmfCoBySearch.search();

        return pmfCoBySearch;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>