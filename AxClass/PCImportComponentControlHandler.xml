<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCImportComponentControlHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PCImportComponentControlHandler extends PCImportNodeHandlerWithCfgControl
{
    PCComponentControl componentControl;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>importData</Name>
				<Source><![CDATA[
    /// <summary>
    /// After inserting a record assigns a reference to it to a parent record.
    /// </summary>
    protected void importData()
    {
        PCImportNodeHandlerWithControl parent = this.parent() as PCImportNodeHandlerWithControl;

        componentControl.ConfigurationControl = this.configurationControlId();

        this.copyIntField(fieldStr(PCComponentControl, UIOrder));

        componentControl.insert();

        parent.assignControl(componentControl.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupChild</Name>
				<Source><![CDATA[
    /// <summary>
    /// The handlers tree needs to build itself because of the indirect recursive definition of
    /// <c>PCComponentControl</c> and <c>PCComponentControlSubComponent</c> referencing each other.
    /// <c>PCComponentControlHandler</c> then gets instantiated multiple times and has no children initialized,
    /// so new child handlers need to be created before searching for them.
    /// </summary>
    /// <param name="_nodeType">
    /// The type of the node to create a new handler for.
    /// </param>
    /// <returns>
    /// The return value of the call to the superclass implementation, that should return the newly created handler.
    /// </returns>
    protected PCImportModelNodeHandler lookupChild(str _nodeType)
    {
        if (_nodeType == tableStr(PCComponentControlSubComponent))
        {
            this.addChild(_nodeType, PCImportCtrlSubComponentHandler::construct());
        }

        if (_nodeType == tableStr(PCComponentAttributeGroup))
        {
            this.addChild(_nodeType, PCImportAttributeGroupHandler::construct());
        }

        return super(_nodeType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>record</Name>
				<Source><![CDATA[
    public Common record(boolean _suppressValidation = false)
    {
        return componentControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public PCImportComponentControlHandler construct()
    {
        return new PCImportComponentControlHandler();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>