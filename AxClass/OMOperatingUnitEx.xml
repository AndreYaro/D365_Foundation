<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OMOperatingUnitEx</Name>
	<SourceCode>
		<Declaration><![CDATA[
class OMOperatingUnitEx
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDepartmentChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a list of the <c>OMDepartment</c> record <c>RefRecId</c> values that are child departments
    /// of the specified department.
    /// </summary>
    /// <param name="_departmentRecId">
    /// A record ID value that represents the <c>OMDepartment</c> record for which to retrieve child
    /// departments.
    /// </param>
    /// <param name="_list">
    /// A list of record IDs of all children of the specified <c>OMDepartment</c> record that may have been
    /// determined by prior processing.
    /// </param>
    /// <param name="_perDate">
    /// An as-of <c>date</c> to base date range selections upon.
    /// </param>
    /// <returns>
    /// A list of record IDs of all children of the specified <c>OMDepartment</c> record.
    /// </returns>
    /// <remarks>
    /// This method is used recursively.
    /// </remarks>
    static List getDepartmentChildren(
        RefRecId        _departmentRecId = 0,
        List            _list = null,
        date _perDate = DateTimeUtil::date(DateTimeUtil::getSystemDateTime()))
    {
        List                    list;
        OMOperatingUnit         operatingUnit;
        OMHierarchyRelationship hierarchyRelationship;
        date                    perDate = _perdate;
        DirPartyTable           dirPartyTable;
        RefRecId                hierarchyTypeRecId;

        // Create new list if one wasn't supplied
        if (!_list)
        {
            list = new List(Types::Int64);
        }
        else
        {
            list = _list;
        }

        hierarchyTypeRecId = HcmDepartmentHierarchy::getDepartmentHierarchyType();

        if (hierarchyTypeRecId)
        {
            // For a given department recid, retrieve all department recids for its immediate child records.
            // Joining with OMDepartment to ensure that the supplied recid is for an actual department.
            while select ValidTimeState(perDate) RecId from operatingUnit order by dirPartyTable.Name
                 where operatingUnit.RecId == _departmentRecId
                     join ParentOrganization, HierarchyType, ChildOrganization from hierarchyRelationship
                         where hierarchyRelationship.ParentOrganization == operatingUnit.RecId
                            && hierarchyRelationship.HierarchyType == hierarchyTypeRecId
                              join Name from dirPartyTable
                                where dirPartyTable.RecId == hierarchyRelationship.ChildOrganization
            {
                list.addEnd(hierarchyRelationship.ChildOrganization);

                // Recursive call to continue adding to list child departments of this child current child dept.
                list = OMOperatingUnitEx::getDepartmentChildren(hierarchyRelationship.ChildOrganization, list, perDate);

            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfVacantPositions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total number of positions that do not have workers assigned to them.
    /// </summary>
    /// <param name="_countChildren">
    /// A Boolean value that specifies whether to include child departments in the vacancy total; optional.
    /// </param>
    /// <param name="_departmentRecId">
    /// A record ID value that represents the <c>OMOperatingUnit</c> table for which to calculate the
    /// vacant positions.
    /// </param>
    /// <param name="_perDate">
    /// An as-of <c>utcdatetime</c> value to base date range selections upon.
    /// </param>
    /// <returns>
    /// The count of the total number of positions that do not have workers assigned to them.
    /// </returns>
    /// <remarks>
    /// An unspecified <paramref name="_perDate" /> parameter will use the current system
    /// <c>utcdatetime</c> value.
    /// </remarks>
    static HRMNumberOfVacantPositions numberOfVacantPositions(
        boolean                 _countChildren      = false,
        OMDepartmentRecId       _departmentRecId    = 0,
        utcdatetime             _perDate            = DateTimeUtil::getSystemDateTime())

    {
        HcmPositionDetail               positionDetail;
        HcmPositionDuration             positionDuration;
        HcmPositionWorkerAssignment     positionWorkerAssignment;
        HRMNumberOfVacantPositions      hrmNumberOfVacantPositions;
        ListIterator                    listIterator;
        List                            list;
        OMDepartmentRecId               departmentRecId;
        utcdatetime                     perDate = _perDate;

        list = new List(Types::Int64);

        if (_departmentRecId)
        {
            list.addEnd(_departmentRecId);
        }

        if (_countChildren)
        {
            list = OMOperatingUnitEx::getDepartmentChildren(_departmentRecId, list, DateTimeUtil::date(perDate));
        }

        listIterator = new ListIterator(list);
        listIterator.begin();

        // For each department in the list, calculate the number of positions that are unfilled.
        while (listIterator.more())
        {
            departmentRecId = listIterator.value();

            select ValidTimeState(_perDate) count(RecId) from
                positionDetail
            where
                positionDetail.Department == departmentRecId
                exists join positionDuration
                    where positionDuration.Position==positionDetail.Position
    //            perDate >= positionDetail.ActivationDate &&
    //            perDate <= positionDetail.RetirementDate
                notexists join positionWorkerAssignment
                    where
                        positionWorkerAssignment.Position == positionDetail.Position;

            // Accumulate the unfilled positions count.
            hrmNumberOfVacantPositions += int642int(positionDetail.RecId);
            listIterator.next();
        }

        return hrmNumberOfVacantPositions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfWorkers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of unique workers for a specified department and its children, if it is
    /// specified.
    /// </summary>
    /// <param name="_countChildren">
    /// A Boolean value that specifies whether to include child departments in the worker total; optional.
    /// </param>
    /// <param name="_includeContractors">
    /// A Boolean value that specifies whether to include contract workers in the worker total; optional.
    /// </param>
    /// <param name="_departmentRecId">
    /// A record ID value that represents the <c>OMOperatingUnit</c> table for which to calculate the
    /// worker total.
    /// </param>
    /// <param name="_perDate">
    /// An as-of <c>utcdatetime</c> to base date range selections upon.
    /// </param>
    /// <returns>
    /// The count of the total number of workers for a department or department and its children; see
    /// remarks.
    /// </returns>
    /// <remarks>
    /// Workers can be affiliated to multiple positions across multiple departments, but the intent of this
    /// method is to provide the unique number of employees, regardless.
    /// </remarks>
    static HRMNumberOfEmployees numberOfWorkers(
        boolean                 _countChildren      = false,
        boolean                 _includeContractors = false,
        OMDepartmentRecId       _departmentRecId = 0,
        utcdatetime             _perDate            = DateTimeUtil::getSystemDateTime())

    {
        HcmPositionDetail               positionDetail;
        HcmPositionDuration             positionDuration;
        HcmPositionWorkerAssignment     positionWorkerAssignment;
        HcmEmployment                   workerEmployment;
        ListIterator                    listIterator;
        List                            list;
        Set                             workers = new Set(Types::Int64);
        OMDepartmentRecId               departmentRecId;
        utcdatetime                     perDate = _perDate;

        list = new List(Types::Int64);

        if (_departmentRecId)
        {
            list.addEnd(_departmentRecId);
        }

        if (_countChildren)
        {
            list = OMOperatingUnitEx::getDepartmentChildren(_departmentRecId, list, DateTimeUtil::date(perDate));
        }

        listIterator = new ListIterator(list);
        listIterator.begin();

        if (_includeContractors)
        {
            // Iterate through the list of departments to count.
            while (listIterator.more())
            {
                departmentRecId = listIterator.value();

                // Query against the HcmWorkerAffiliation table polymorphically since it comprises records from both
                // the employee and contractor affiliation tables.
                while select ValidTimeState(_perDate) Position, Department from positionDetail
                    exists join positionDuration
                    where
                        positionDuration.Position == positionDetail.Position &&
                        positionDetail.Department == departmentRecId
                {
                    while select ValidTimeState(_perDate) Position, Worker from positionWorkerAssignment
                        where
                            positionWorkerAssignment.Position == positionDetail.Position
                    {
                        while select ValidTimeState(_perDate) RecId, Worker from workerEmployment
                            where
                                workerEmployment.Worker == positionWorkerAssignment.Worker
                        {
                            // Although a worker may have multiple affiliations across multiple departments, using
                            // a Set class will ensure that the employee will only be added (and thus counted) once.
                            workers.add(workerEmployment.Worker);
                        }
                    }
                }
                listIterator.next();
            }
        }
        else
        {
            // Iterate through the list of departments to count.
            while (listIterator.more())
            {
                departmentRecId = listIterator.value();

                // Query against the employee affiliation table since excluding contractors.
                while select ValidTimeState(_perDate) Position, Department from positionDetail
                    exists join positionDuration
                    where
                        positionDuration.Position == positionDuration.Position &&
                        positionDetail.Department == departmentRecId
                {
                    while select ValidTimeState(_perDate) Position, Worker from positionWorkerAssignment
                        where
                            positionWorkerAssignment.Position == positionDetail.Position
                    {
                        while select ValidTimeState(_perDate) RecId, Worker from workerEmployment
                            where
                                workerEmployment.Worker == positionWorkerAssignment.Worker &&
                                workerEmployment.EmploymentType == HcmEmploymentType::Employee
                        {
                            // Although a worker may have multiple affiliations across multiple departments, using
                            // a Set class will ensure that the employee will only be added (and thus counted) once.
                            workers.add(workerEmployment.Worker);
                        }
                    }
                }
                listIterator.next();
            }
        }

        // Return the number of unique workers assigned
        return workers.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>operatingUnitLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a custom lookup of the <c>OMOperatingUnit</c> records that are of the specified
    /// <c>OMOperatingUnitType</c> type.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The <c>FormReferenceControl</c> value for which the lookup being created by this method is
    /// servicing.
    /// </param>
    /// <param name="_type">
    /// An <c>OMOperatingUnitType</c> value that indicates what type discriminator to use by which the
    /// <c>OMOperatingUnit</c> table is filtered.
    /// </param>
    /// <param name="_name">
    /// A string that specifies a user-entered name that is ambiguous and must be resolved by the lookup;
    /// optional.
    /// </param>
    /// <returns>
    /// An <c>OMOperatingUnit</c> record that was selected by the user.
    /// </returns>
    /// <remarks>
    /// This lookup helper method also assists in resolving duplicate names when surrogate key replacement
    /// cannot do so automatically.
    /// </remarks>
    public static OMOperatingUnit operatingUnitLookup(
            FormReferenceControl _formReferenceControl,
            OMOperatingUnitType _type,
            DirPartyName _name = '')
    {
        Common                      commonRecord;
        OMOperatingUnit             selectedRecord;
        SysReferenceTableLookup     sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(OMOperatingUnit), _formReferenceControl, true);
        Query                       lookupQuery;
        QueryBuildDataSource        ouQbds;
        boolean                     unfiltered = (_type == 0);

        sysTableLookup.addLookupfield(fieldNum(OMOperatingUnit, Name));
        sysTableLookup.addLookupfield(fieldNum(OMOperatingUnit, NameAlias));
        sysTableLookup.addLookupfield(fieldNum(OMOperatingUnit, omOperatingUnitNumber));
        sysTableLookup.addLookupfield(fieldNum(OMOperatingUnit, HcmWorker));
        if (unfiltered)
        {
            sysTableLookup.addLookupfield(fieldNum(OMOperatingUnit, omOperatingUnitType));
        }

        // Create a custom Query that filters to show only a specific OMOperatingUnitType
        lookupQuery = new Query();
        ouQbds = lookupQuery.addDataSource(tableNum(OMOperatingUnit));
        ouQbds.fields().addField(fieldNum(OMOperatingUnit, Name));
        ouQbds.fields().addField(fieldNum(OMOperatingUnit, NameAlias));
        ouQbds.fields().addField(fieldNum(OMOperatingUnit, omOperatingUnitNumber));
        ouQbds.fields().addField(fieldNum(OMOperatingUnit, HcmWorker));
        if (unfiltered)
        {
            ouQbds.fields().addField(fieldNum(OMOperatingUnit, omOperatingUnitType));
        }

        if (!unfiltered)
        {
            // Filter the lookup by the specified type
            ouQbds.addRange(fieldNum(OMOperatingUnit, omOperatingUnitType)).value(enum2str(_type));
        }

        // If a name is specified then it is being called in a duplicate resolution scenario, so filter
        // on the name as well
        if (_name)
        {
            // Filter to the specified name to help resolve duplicates
            ouQbds.addRange(fieldNum(OMOperatingUnit, Name)).value(_name);
        }

        sysTableLookup.parmQuery(lookupQuery);
        commonRecord = sysTableLookup.performFormLookup();
        if (commonRecord.RecId)
            selectedRecord = commonRecord;

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operatingUnitLookupUnfiltered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a custom lookup of all of the <c>OMOperatingUnit</c> records.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The <c>FormReferenceControl</c> value for which the lookup being created by this method is
    /// servicing.
    /// </param>
    /// <param name="_name">
    /// A string that specifies a user-entered name that is ambiguous and must be resolved by the lookup;
    /// optional.
    /// </param>
    /// <returns>
    /// An <c>OMOperatingUnit</c> record that was selected by the user.
    /// </returns>
    /// <remarks>
    /// This lookup helper method also assists in resolving duplicate names when surrogate key replacement
    /// cannot do so automatically.
    /// </remarks>
    public static OMOperatingUnit operatingUnitLookupUnfiltered(
            FormReferenceControl _formReferenceControl,
            str 100 _name = '')
    {
        // Call operatingUnitLookup specifying a null type
        return OMOperatingUnitEx::operatingUnitLookup(_formReferenceControl, 0, _name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>operatingUnitResolve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides custom resolve reference logic for foreign keys to the <c>OMOperatingUnit</c> table by
    /// filtering to a specified <c>OMOperatingUnitType</c> type.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The <c>FormReferenceControl</c> value for which the user typed in a value to resolve.
    /// </param>
    /// <param name="_type">
    /// An <c>OMOperatingUnitType</c> value that indicates what type discriminator to use by which the
    /// <c>OMOperatingUnit</c> table is filtered.
    /// </param>
    /// <returns>
    /// An <c>OMOperatingUnit</c> record that was selected by the user.
    /// </returns>
    /// <remarks>
    /// This resolve helper method also assists in resolving duplicate names when surrogate key replacement
    /// cannot do so automatically.
    /// </remarks>
    public static OMOperatingUnit operatingUnitResolve(
            FormReferenceControl _formReferenceControl,
            OMOperatingUnitType _type)
    {
        OMOperatingUnit     operatingUnit;
        DirPartyName        operatingUnitName = '';
        boolean             unfiltered = (_type == 0);

        // Get the text that the user entered into the control to see if there is a match to display
        operatingUnitName = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(OMOperatingUnit, Name), tableStr(OMOperatingUnit))).value();

        // Determine if there are duplicate names to resolve.
        if (unfiltered)
        {
            // No filtering necessary
            select count(RecId) from operatingUnit
            where
                operatingUnit.Name == operatingUnitName;
        }
        else
        {
            // A type is specified, so filter by it
            select count(RecId) from operatingUnit
            where
                operatingUnit.Name == operatingUnitName &&
                operatingUnit.omOperatingUnitType == _type;
        }

        // If there are more than one workers of the same name then use a lookup to resolve
        if (operatingUnit.RecId > 1)
        {
            operatingUnit = OMOperatingUnitEx::operatingUnitLookup(_formReferenceControl, _type, operatingUnitName);
        }
        else
        {
            // Retrieve the unique operating unit
            if (unfiltered)
            {
                // No filtering necessary
                select
                    operatingUnit
                where
                    operatingUnit.Name == operatingUnitName;
            }
            else
            {
                select
                    operatingUnit
                where
                    operatingUnit.Name == operatingUnitName &&
                    operatingUnit.omOperatingUnitType == _type;
            }
        }

        return operatingUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operatingUnitResolveUnfiltered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides custom resolve reference logic for foreign keys to the <c>OMOperatingUnit</c> table where
    /// filtering to a specified <c>OMOperatingUnitType</c> type is not required.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The <c>FormReferenceControl</c> value for which the user typed in a value to resolve.
    /// </param>
    /// <returns>
    /// An <c>OMOperatingUnit</c> record that was selected by the user.
    /// </returns>
    /// <remarks>
    /// This resolve helper method also assists in resolving duplicate names when surrogate key replacement
    /// cannot do so automatically.
    /// </remarks>
    public static OMOperatingUnit operatingUnitResolveUnfiltered(FormReferenceControl _formReferenceControl)
    {
        // Call operatingUnitResolve specifying a null type
        return OMOperatingUnitEx::operatingUnitResolve(_formReferenceControl, 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>