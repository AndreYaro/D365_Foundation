<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementPair_Cust</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents a single debit-credit relationship during settlement. Debit is usually an invoice while credit is usually a payment.
/// Relationship between debits and credits is many-to-many, therefore single invoice or single payment can be partially present in multiple SettlementPair relationships.
/// </summary>
/// <remarks>
/// This class should be instantiated and used only from inside <c>CustVendSettle</c> class.
/// Additional functionality currently present on <c>CustVendSettle</c> class will be moved to <c>SettlementPair</c> class in further releases.
/// Get and set methods on this class exposing individual table buffers are going to be removed in subsequent releases in favor of more coarse operations.
/// </remarks>
public class SettlementPair_Cust extends SettlementPair
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    protected SysModule getModule()
    {
        return SysModule::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        CustTrans       custTrans;
        CustTransOpen   custTransOpen;

        settlementVoucher = new SettlementVoucher(SysModule::Cust);
        settlementVoucher.voucherAdded += eventhandler(this.voucherAddedEventHandler);

        this.setCustVendTransDebit(custTrans.data());
        this.setCustVendTransCredit(custTrans.data());
        this.setCustVendTransOpenDebit(custTransOpen.data());
        this.setCustVendTransOpenCredit(custTransOpen.data());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchInvoice</Name>
				<Source><![CDATA[
    public boolean fetchInvoice(dataAreaId _company, tableId _tableId, RecId _recId)
    {
        boolean recordFound;

        if (!specTransDebit)
        {
            select forupdate crossCompany specTransDebit
                where specTransDebit.SpecCompany == _company
                   && specTransDebit.SpecTableId == _tableId
                   && specTransDebit.SpecRecId   == _recId
            join forupdate custVendTransOpenDebit
                order by CashDiscDate, DueDate, RecId desc // Using 'Recid desc' to make sure can select correct invoice amount, if have change back amount, it will created before invoice amount.
                where custVendTransOpenDebit.DataAreaId == specTransDebit.RefCompany
                   && custVendTransOpenDebit.TableId    == specTransDebit.RefTableId
                   && custVendTransOpenDebit.RecId      == specTransDebit.RefRecId
                   && custVendTransOpenDebit.AmountCur   > 0;
        }
        else
        {
            next specTransDebit;
        }

        CashDiscDateSettlementCache::restoreCustVendTransOpenCashDiscDate(custVendTransOpenDebit);

        // This can't be part of join because it causes problems if several CustVendTransOpen records
        // have a RefRecId to the same CustVendTrans (this happens if there is a payment schedule and
        // are settling two or more transactions on the payment schedule).  The problems will be an
        // update conflict error message and the CustVendTrans not having the updated fields.
        changecompany(custVendTransOpenDebit.company())
        {
            // Check if both CustVendTransOpenDebit and CustVendTransOpenCredit records point to the
            // same CustVendTrans record
            if (custVendTransOpenDebit.RefRecId == custVendTransOpenCredit.RefRecId)
            {
                custVendTransDebit = custVendTransCredit;
            }
            else
            {
                custVendTransDebit = CustTrans::find(custVendTransOpenDebit.RefRecId, true);
            }
        }

        if (specTransDebit.RecId != 0)
        {
            recordFound = true;
            this.initDebitCompanyCurrency();
            SettlementUtility::roundTransactionAmounts(custVendTransDebit, specTransDebit, debitCompanyCurrency);
        }

        this.forceExchRateCalculation();

        return recordFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchPayment</Name>
				<Source><![CDATA[
    public boolean fetchPayment(dataAreaId _company, tableId _tableId, RecId _recId)
    {
        boolean recordFound;

        if (!specTransCredit)
        {
            select forupdate crossCompany specTransCredit
                where specTransCredit.SpecCompany == _company
                   && specTransCredit.SpecTableId == _tableId
                   && specTransCredit.SpecRecId   == _recId
            join forupdate custVendTransOpenCredit
                order by TransDate, RecId
                where custVendTransOpenCredit.DataAreaId == specTransCredit.RefCompany
                   && custVendTransOpenCredit.TableId   == specTransCredit.RefTableId
                   && custVendTransOpenCredit.RecId     == specTransCredit.RefRecId
                   && custVendTransOpenCredit.AmountCur <= 0;
        }
        else
        {
            next specTransCredit;
        }

        // This can't be part of join because it causes problems if several CustVendTransOpen records
        // have a RefRecId to the same CustVendTrans (this happens if there is a payment schedule and
        // are settling two or more transactions on the payment schedule).  The problems will be an
        // update conflict error message and the CustVendTrans not having the updated fields.
        changecompany(custVendTransOpenCredit.company())
        {
            // Check if both custVendTransOpenCredit and custVendTransOpenDebit records point to the
            // same CustVendTrans record
            if (custVendTransOpenCredit.RefRecId == custVendTransOpenDebit.RefRecId)
            {
                custVendTransCredit = custVendTransDebit;
            }
            else
            {
                custVendTransCredit = CustTrans::find(custVendTransOpenCredit.RefRecId, true);
            }
        }

        if (specTransCredit.RecId != 0)
        {
            recordFound = true;
            this.initCreditCompanyCurrency();
            SettlementUtility::roundTransactionAmounts(custVendTransCredit, specTransCredit, creditCompanyCurrency);
        }

        this.forceExchRateCalculation();

        return recordFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendSettlementBuffer</Name>
				<Source><![CDATA[
    protected CustVendSettlement initCustVendSettlementBuffer()
    {
        CustSettlement  custSettlementBuffer;

        return custSettlementBuffer.data();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>