<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPeggingTreeTraverser</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqPeggingTreeTraverser</c> class implements an extensible traversing strategy of an
///    <c>ReqPeggingTree</c> object.
/// </summary>
class ReqPeggingTreeTraverser
{
    ReqPeggingTree      peggingTree;
    ReqPeggingTreeNode  startingNode;

    System.Collections.Queue unvisitedNodes;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fetchChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the next children to be traversed.
    /// </summary>
    /// <param name="_currentNode">
    /// The current tree node.
    /// </param>
    /// <param name="_unvisitedNodes">
    /// The list of unvisited nodes.
    /// </param>
    /// <remarks>
    /// By implementing this method, one can control the traversal strategy
    /// to be depth-first, breath-first or anything else.
    ///
    /// By default this method implements breadth-first.
    /// </remarks>
    protected void fetchChildren(ReqPeggingTreeNode _currentNode, System.Collections.Queue _unvisitedNodes)
    {
        ReqPeggingTree      peggingTreeLocal = this.parmPeggingTree();
        List                listChildrenNodes = peggingTreeLocal.getChildren(_currentNode);
        ListEnumerator      listEnumerator;

        if (!listChildrenNodes)
        {
            // try to expand node
            peggingTreeLocal.expandNode(_currentNode.parmNodeId());
            listChildrenNodes = peggingTreeLocal.getChildren(_currentNode);
        }

        // if there're still no children, time to exit
        if (!listChildrenNodes)
        {
            return;
        }

        listEnumerator = listChildrenNodes.getEnumerator();

        while (listEnumerator.moveNext())
        {
            _unvisitedNodes.Enqueue(listEnumerator.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the traversal.
    /// </summary>
    protected void init()
    {
        if (!peggingTree ||
            !startingNode)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        // we always start with the starting node
        unvisitedNodes = new System.Collections.Queue();
        unvisitedNodes.Enqueue(startingNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>NodeVisited</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines an event that is raised when visiting tree node.
    /// </summary>
    /// <param name="sender">
    /// The sender object of the event.
    /// </param>
    /// <param name="_args">
    /// The event arguments.
    /// </param>
    /// <remarks>
    /// Using the event arguments, the traversal could be stopped.
    /// </remarks>
    delegate void NodeVisited(ReqPeggingTreeTraverser sender, ReqPeggingTreeEventArgs _args)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeggingTree</Name>
				<Source><![CDATA[
    public ReqPeggingTree parmPeggingTree(ReqPeggingTree _peggingTree = peggingTree)
    {
        peggingTree = _peggingTree;

        return peggingTree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartingNode</Name>
				<Source><![CDATA[
    public ReqPeggingTreeNode parmStartingNode(ReqPeggingTreeNode _startingNode = startingNode)
    {
        startingNode = _startingNode;

        return startingNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a traversal of the pegging tree.
    /// </summary>
    public void run()
    {
        ListEnumerator              listEnumerator;
        ReqPeggingTreeNode          currentNode;
        ReqPeggingTreeEventArgs     eventArgs;
        boolean                     stopTraversal = false;
        this.init();

        while (unvisitedNodes.Count > 0)
        {
            currentNode = unvisitedNodes.Dequeue();
            eventArgs = ReqPeggingTreeEventArgs::newStandard(currentNode);

            this.NodeVisited(this, eventArgs);
            stopTraversal = eventArgs.parmStopTraversing();

            if (!stopTraversal)
            {
                this.fetchChildren(currentNode, unvisitedNodes);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static ReqPeggingTreeTraverser construct()
    {
        return new ReqPeggingTreeTraverser();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Default constructor for the <c>ReqPeggingTreeTraverser</c> class.
    /// </summary>
    /// <param name="_peggingTree">
    /// The tree to be traversed;
    /// </param>
    /// <param name="_startingNode">
    /// The starting node.
    /// </param>
    /// <returns>
    /// An instance of <c>ReqPeggingTreeTraverser</c>.
    /// </returns>
    public static ReqPeggingTreeTraverser newStandard(ReqPeggingTree _peggingTree, ReqPeggingTreeNode _startingNode)
    {
        ReqPeggingTreeTraverser result = ReqPeggingTreeTraverser::construct();

        result.parmPeggingTree(_peggingTree);
        result.parmStartingNode(_startingNode);

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>