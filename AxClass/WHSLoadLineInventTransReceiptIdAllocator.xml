<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadLineInventTransReceiptIdAllocator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSLoadLineInventTransReceiptIdAllocator
{
    private Map loadLineReceiptIdMap; // int64 -> str: maps load lines to receipt IDs.
    private RecordInsertList newLoadLineInventoryReceiptInsertList; // Used for new receipt ID allocations.
    private boolean allocationStarted;

    private WHSDispositionCode dispositionCode;

    private WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classStr(WHSLoadLineInventTransReceiptIdAllocator));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        this.initForNewAllocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForNewAllocation</Name>
				<Source><![CDATA[
    private void initForNewAllocation()
    {
        loadLineReceiptIdMap = new Map(Types::Int64, Types::String);
        allocationStarted = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDispositionCode</Name>
				<Source><![CDATA[
    internal static WHSLoadLineInventTransReceiptIdAllocator newFromDispositionCode(WHSDispositionCode _dispositionCode)
    {
        WHSLoadLineInventTransReceiptIdAllocator receiptIdAllocator = new WHSLoadLineInventTransReceiptIdAllocator();
        receiptIdAllocator.dispositionCode = _dispositionCode;

        return receiptIdAllocator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateReceiptId</Name>
				<Source><![CDATA[
    internal WhsLoadLineInventoryReceiptId allocateReceiptId(WHSLoadLineRefRecId _loadLineRecId)
    {
        if (!allocationStarted)
        {
            appl.transactionScope().ttsCommitting += eventhandler(this.onTtsCommitting);
            allocationStarted = true;
        }

        using (var allocateReceiptIdActivity = this.allocateReceiptIdActivity())
        {
            return this.determineReceiptIdForLoadLine(_loadLineRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTtsCommitting</Name>
				<Source><![CDATA[
    private void onTtsCommitting()
    {
        this.allocationAborted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocationAborted</Name>
				<Source><![CDATA[
    private void allocationAborted()
    {
        if (allocationStarted)
        {
            throw error("@WAX:UnableToAbortReceiptIdAllocationAfterStart");
        }

        this.initForNewAllocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineReceiptIdForLoadLine</Name>
				<Source><![CDATA[
    private WhsLoadLineInventoryReceiptId determineReceiptIdForLoadLine(WHSLoadLineRefRecId _loadLineRecId)
    {
        if (!loadLineReceiptIdMap.exists(_loadLineRecId))
        {
            loadLineReceiptIdMap.add(_loadLineRecId, this.findOrCreateReceiptIdForLoadLineRecId(_loadLineRecId));
        }

        return loadLineReceiptIdMap.lookup(_loadLineRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateReceiptIdForLoadLineRecId</Name>
				<Source><![CDATA[
    private WhsLoadLineInventoryReceiptId findOrCreateReceiptIdForLoadLineRecId(WHSLoadLineRefRecId _loadLineRecId, boolean _useRecordInsertList = true)
    {
        WhsLoadLineInventoryReceiptId existingLoadLineInventoryReceiptId = WhsLoadLineInventoryReceipt::findReceiptIdForLoadLineRecIdAndDispositionCode(_loadLineRecId, dispositionCode);

        if (existingLoadLineInventoryReceiptId)
        {
            return existingLoadLineInventoryReceiptId;
        }

        return this.createReceiptIdForLoadLineRecId(_loadLineRecId, _useRecordInsertList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReceiptIdForLoadLineRecId</Name>
				<Source><![CDATA[
    private WhsLoadLineInventoryReceiptId createReceiptIdForLoadLineRecId(WHSLoadLineRefRecId _loadLineRecId, boolean _useRecordInsertList)
    {
        WhsLoadLineInventoryReceiptId newReceiptId = NumberSeq::newGetNum(WHSParameters::numRefWhsLoadLineInventoryReceiptId()).num();

        WhsLoadLineInventoryReceipt newLoadLineInventoryReceipt;
        newLoadLineInventoryReceipt.LoadLine = _loadLineRecId;
        newLoadLineInventoryReceipt.ReceiptId = newReceiptId;
        newLoadLineInventoryReceipt.DispositionCode = dispositionCode;

        if (!newLoadLineInventoryReceipt.validateWrite())
        {
            throw error(strFmt("@WAX:WhsLoadLineInventoryReceipt_ValidateWrite_Error", newLoadLineInventoryReceipt.LoadLine, newLoadLineInventoryReceipt.ReceiptId, newLoadLineInventoryReceipt.DispositionCode));
        }

        if (_useRecordInsertList)
        {
            this.newLoadLineInventoryReceiptInsertList().add(newLoadLineInventoryReceipt);
        }
        else
        {
            newLoadLineInventoryReceipt.insert();
        }

        return newReceiptId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLoadLineInventoryReceiptInsertList</Name>
				<Source><![CDATA[
    private RecordInsertList newLoadLineInventoryReceiptInsertList()
    {
        if (!newLoadLineInventoryReceiptInsertList)
        {
            newLoadLineInventoryReceiptInsertList = new RecordInsertList(tableNum(WhsLoadLineInventoryReceipt));
        }
                
        return newLoadLineInventoryReceiptInsertList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocationComplete</Name>
				<Source><![CDATA[
    internal void allocationComplete()
    {
        if (!allocationStarted)
        {
            return;
        }

        if (newLoadLineInventoryReceiptInsertList)
        {
            newLoadLineInventoryReceiptInsertList.insertDatabase();
            newLoadLineInventoryReceiptInsertList = null;
        }

        appl.transactionScope().ttsCommitting -= eventhandler(this.onTtsCommitting);

        this.initForNewAllocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateReceiptIdActivity</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext allocateReceiptIdActivity()
    {
        return instrumentationLogger.activityContext(instrumentationLogger.activity('WHSLoadLineInventTransReceiptIdAllocator.allocateReceiptId'));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>