<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerVoucherTransferToGeneralLedgerManualRecovery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerVoucherTransferToGeneralLedgerManualRecovery</c> class recovers vouchers stuck during transfer to GL
/// when the corresponding menu action <c>SubledgerVoucherTransferToGeneralLedgerManualRecovery</c> item is clicked.
/// </summary>
internal class SubledgerVoucherTransferToGeneralLedgerManualRecovery
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SubledgerVoucherTransferToGeneralLedgerManualRecovery::recoverStuckTransferVouchers(args.record());
    }

]]></Source>
			</Method>
			<Method>
				<Name>recoverStuckTransferVouchers</Name>
				<Source><![CDATA[
    public static void recoverStuckTransferVouchers(SubledgerJournalEntryPendingTransfer _subledgerJournalEntryPendingTransfer)
    {
        SubledgerJournalEntry subledgerJournalEntry;

        try
        {
            ttsbegin;

            if (SubledgerJournalTransferOperation::numberOfBatchTransferInstancesExecuting() == 0)
            {
                subledgerJournalEntry = SubledgerJournalEntry::find(_subledgerJournalEntryPendingTransfer.RecId, true);

                subledgerJournalEntry.Status = SubledgerJournalEntryStatus::NotTransferred;
                subledgerJournalEntry.TransferId = 0;
                subledgerJournalEntry.update();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            throw Exception::Deadlock;
        }
        catch (Exception::UpdateConflict)
        {
            throw Exception::UpdateConflict;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>