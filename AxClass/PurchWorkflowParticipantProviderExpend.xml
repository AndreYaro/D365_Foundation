<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchWorkflowParticipantProviderExpend</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchWorkflowParticipantProviderExpend
extends WorkflowParticipantProvider_Expend
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentType</Name>
				<Source><![CDATA[
    public WorkflowParticipantExpenDocumentType documentType()
    {
        return WorkflowParticipantExpenDocumentType::PurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the <c>PurchLine</c> record dimensions to a list of users.
    /// </summary>
    /// <param name="_context">
    /// An instance of the <c>WorkflowContext</c> class.
    /// </param>
    /// <param name="_participantTokenName">
    /// The participant token that was selected for role-based assignment.
    /// </param>
    /// <returns>
    /// An instance of a <c>WorkflowUserList</c> that contains all enabled users from the token.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// Participant token does not exist.
    /// </exception>
    public WorkflowUserList resolve(WorkflowContext          _context,
                                    WorkflowParticipantToken _participantTokenName)
    {
        PurchTable                                  purchTable;
        PurchLine                                   purchLine;
        WorkflowParticipantExpenToken               workflowParticipantExpenToken;
        WorkflowParticipantExpenTokenLine           workflowParticipantExpenTokenLine;
        WorkflowUserList                            userList = WorkflowUserList::construct();
        RefRecId                                    dimensionAttributeSetRecId;
        MarkupTrans                                 markupTrans;
        CompanyInfo                                 legalEntity;

        if (!_participantTokenName)
        {
            throw error("@SYS105453");
        }

        workflowParticipantExpenToken = WorkflowParticipantExpenToken::findName(
            this.documentType(),
            _participantTokenName);

        if (!workflowParticipantExpenToken)
        {
            throw error(strFmt("@SYS313865", _participantTokenName));
        }

        if (_context.parmTableId() == tableNum(PurchTable))
        {
            purchTable   = PurchTable::findRecId(_context.parmRecId());
        }
        else
        {
            purchTable   = PurchLine::findRecId(_context.parmRecId()).purchTable();
        }
        
        purchTable.distributeUnprocessedLines();        

        legalEntity = purchTable.companyInfo();

        while select ProjId, SourceDocumentLine, RecId from purchLine
            where purchLine.PurchId == purchTable.PurchId
                && (_context.parmTableId() == tableNum(PurchTable)
                || (_context.parmTableId() == tableNum(PurchLine) && purchLine.RecId == _context.parmRecId()))
        {
            workflowParticipantExpenTokenLine = WorkflowParticipantExpenTokenLine::findTokenLine(
                workflowParticipantExpenToken.RecId,
                legalEntity.RecId);

            this.initializeUserList(workflowParticipantExpenTokenLine, purchLine, userList);
        }

        if (userList.getCount() == 0)
        {
            throw error(strFmt("@SCM:ParticipantTokenNotResolveUserCorrectAaccountingDistributionTryAgain", _participantTokenName));
        }

        return userList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeUserList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the dimensions of the <c>PurchLine</c> table to a list of users
    /// depending if the <c>WorkflowParticipantExpenTokenLine</c> record exists.
    /// </summary>
    /// <param name = "_workflowParticipantExpenTokenLine">The <c>WorkflowParticipantExpenTokenLine</c> record.</param>
    /// <param name = "_purchLine">The <c>PurchLine</c> record.</param>
    /// <param name = "_userList">An instance of the <c>WorkflowUserList</c> class.</param>
    protected void initializeUserList(WorkflowParticipantExpenTokenLine _workflowParticipantExpenTokenLine,
                                      PurchLine                         _purchLine,
                                      WorkflowUserList                  _userList)
    {
        RefRecId    dimensionAttributeSetRecId;
        MarkupTrans MarkupTrans;

        if (!_workflowParticipantExpenTokenLine)
        {
            return;
        }
        
        if (_purchLine.ProjId)
        {
            this.resolveProject(_purchLine.ProjId, _workflowParticipantExpenTokenLine, _userList);

            dimensionAttributeSetRecId = _workflowParticipantExpenTokenLine.ProjectDimensionAttributeSet;
        }
        else
        {
            dimensionAttributeSetRecId = _workflowParticipantExpenTokenLine.OrganizationDimensionAttributeSet;
        }

        if (dimensionAttributeSetRecId)
        {
            this.resolveDimensions(_userList, _purchLine.SourceDocumentLine, dimensionAttributeSetRecId);

            while select SourceDocumentLine from MarkupTrans 
            where MarkupTrans.TransTableId == _purchLine.TableId 
               && MarkupTrans.TransRecId   == _purchLine.RecId
            {
                this.resolveDimensions(_userList, MarkupTrans.SourceDocumentLine, dimensionAttributeSetRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchWorkflowParticipantProviderExpend construct()
    {
        return new PurchWorkflowParticipantProviderExpend();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>