<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UnitOfMeasureCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>UnitOfMeasureCalculator</c> class provides the methods that are required to control the
///    <c>UnitOfMeasureCalculator</c> form behavior and handle form events.
/// </summary>
class UnitOfMeasureCalculator
{
    FormRun                     formRun;

    FormReferenceGroupControl   productControl;
    FormRealControl             fromValueControl;
    FormReferenceGroupControl   fromUnitOfMeasureControl;
    FormRealControl             toValueControl;
    FormReferenceGroupControl   toUnitOfMeasureControl;

    UnitOfMeasureConverter      unitOfMeasureConverterForward;
    UnitOfMeasureConverter      unitOfMeasureConverterInverse;

    UnitOfMeasureFromRecId      fromUnitOfMeasure;
    UnitOfMeasureToRecId        toUnitOfMeasure;
    EcoResProductRecId          product;

    real                        fromValue;
    real                        toValue;

    boolean                     isToValueModifiedLast;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editFromValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets a value from which to convert.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies if the value should be set.
    /// </param>
    /// <param name="_fromValue">
    ///    A value from which to convert.
    /// </param>
    /// <returns>
    ///    A value from which to convert.
    /// </returns>
    public real editFromValue(boolean _set, real _fromValue)
    {
        if (_set)
        {
            fromValue               = _fromValue;
            isToValueModifiedLast   = false;
            this.updateToValue();
        }

        return fromValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editToValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets a value to which to convert.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value specifies if the value should be set.
    /// </param>
    /// <param name="_toValue">
    ///    A value to convert to.
    /// </param>
    /// <returns>
    ///    A value to which to convert.
    /// </returns>
    public real editToValue(boolean _set, real _toValue)
    {
        if (_set)
        {
            toValue                 = _toValue;
            isToValueModifiedLast   = true;
            this.updateFromValue();
        }

        return toValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPostSuper</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles a form postinitialization event.
    /// </summary>
    public void formInitPostSuper()
    {
        this.unitOfMeasureReferenceGroupChildControl(fromUnitOfMeasureControl).showLabel(false);
        this.unitOfMeasureReferenceGroupChildControl(toUnitOfMeasureControl).showLabel(false);

        this.setValueControlsEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPreSuper</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles a form preinitialization event.
    /// </summary>
    public void formInitPreSuper()
    {
        fromValue   = 1.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateConverters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates classes to convert values in forward and inverse directions.
    /// </summary>
    protected void instantiateConverters()
    {
        if (fromUnitOfMeasure != 0 && toUnitOfMeasure != 0)
        {
            unitOfMeasureConverterForward   = UnitOfMeasureConverter::newFromConversionParameters(fromUnitOfMeasure, toUnitOfMeasure, NoYes::No, product);
            unitOfMeasureConverterInverse   = UnitOfMeasureConverter::newFromConversionParameters(toUnitOfMeasure, fromUnitOfMeasure, NoYes::No, product);
        }
        else
        {
            unitOfMeasureConverterForward   = null;
            unitOfMeasureConverterInverse   = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceFromUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles a lookup event for unit of measure to convert from reference form control.
    /// </summary>
    /// <param name="_formReferenceControl">
    ///    A unit of measure to convert from reference form control.
    /// </param>
    /// <returns>
    ///    A record selected by the user.
    /// </returns>
    public Common lookupReferenceFromUnitOfMeasure(FormReferenceControl _formReferenceControl)
    {
        return this.lookupReferenceUnitOfMeasure(_formReferenceControl, toUnitOfMeasure);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles a lookup event for product reference form control.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// A product reference form control.
    /// </param>
    /// <returns>
    /// A record selected by the user.
    /// </returns>
    public Common lookupReferenceProduct(FormReferenceControl _formReferenceControl)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceToUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles a lookup event for unit of measure to convert to reference form control.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// A unit of measure to convert to reference form control.
    /// </param>
    /// <returns>
    /// A record selected by user.
    /// </returns>
    public Common lookupReferenceToUnitOfMeasure(FormReferenceControl _formReferenceControl)
    {
        return this.lookupReferenceUnitOfMeasure(_formReferenceControl, fromUnitOfMeasure);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceUnitOfMeasure</Name>
				<Source><![CDATA[
    protected Common lookupReferenceUnitOfMeasure(FormReferenceControl _formReferenceControl, UnitOfMeasureRecId _relatedUnitOfMeasureRecId)
    {
        Common  ret;

        if (_relatedUnitOfMeasureRecId != 0)
        {
            ret = UnitOfMeasureLookup::lookupReference(_formReferenceControl, true, _relatedUnitOfMeasureRecId, product);
        }
        else
        {
            ret = UnitOfMeasureLookup::lookupReference(_formReferenceControl);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFromUnitOfMeasureControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles unit of measure to convert from form control modified event.
    /// </summary>
    /// <param name="_fromUnitOfMeasure">
    /// A value entered into the unit of measure to convert from form control.
    /// </param>
    public void modifiedFromUnitOfMeasureControl(UnitOfMeasureFromRecId _fromUnitOfMeasure)
    {
        fromUnitOfMeasure   =_fromUnitOfMeasure;
        this.instantiateConverters();
        this.updateValue();
        this.setValueControlsEnabled();
        this.setFromValueControlDecimalPrecision();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedProductControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles product form control modified event.
    /// </summary>
    /// <param name="_product">
    /// A value entered into the product form control.
    /// </param>
    public void modifiedProductControl(EcoResProductRecId _product)
    {
        product = _product;
        this.instantiateConverters();
        this.updateValue();
        this.setValueControlsEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedToUnitOfMeasureControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles unit of measure to convert to form control modified event.
    /// </summary>
    /// <param name="_toUnitOfMeasure">
    /// A value entered into the unit of measure to convert to form control.
    /// </param>
    public void modifiedToUnitOfMeasureControl(UnitOfMeasureToRecId _toUnitOfMeasure)
    {
        toUnitOfMeasure = _toUnitOfMeasure;
        this.instantiateConverters();
        this.updateValue();
        this.setValueControlsEnabled();
        this.setToValueControlDecimalPrecision();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    public FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromUnitOfMeasureControl</Name>
				<Source><![CDATA[
    public FormReferenceGroupControl parmFromUnitOfMeasureControl(FormReferenceGroupControl _fromUnitOfMeasureControl = fromUnitOfMeasureControl)
    {
        fromUnitOfMeasureControl = _fromUnitOfMeasureControl;

        return fromUnitOfMeasureControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromValueControl</Name>
				<Source><![CDATA[
    public FormRealControl parmFromValueControl(FormRealControl _fromValueControl = fromValueControl)
    {
        fromValueControl = _fromValueControl;

        return fromValueControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductControl</Name>
				<Source><![CDATA[
    public FormReferenceGroupControl parmProductControl(FormReferenceGroupControl _productControl = productControl)
    {
        productControl = _productControl;

        return productControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToUnitOfMeasureControl</Name>
				<Source><![CDATA[
    public FormReferenceGroupControl parmToUnitOfMeasureControl(FormReferenceGroupControl _toUnitOfMeasureControl = toUnitOfMeasureControl)
    {
        toUnitOfMeasureControl = _toUnitOfMeasureControl;

        return toUnitOfMeasureControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToValueControl</Name>
				<Source><![CDATA[
    public FormRealControl parmToValueControl(FormRealControl _toValueControl = toValueControl)
    {
        toValueControl = _toValueControl;

        return toValueControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles a lookup event for a product reference form control.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// A product reference form control.
    /// </param>
    /// <returns>
    /// The record that is selected by the user; otherwise, null.
    /// </returns>
    public Common resolveReferenceProduct(FormReferenceControl _formReferenceControl)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromValueControlDecimalPrecision</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets unit of measure to convert from form control decimal precision property.
    /// </summary>
    protected void setFromValueControlDecimalPrecision()
    {
        fromValueControl.noOfDecimalsValue(UnitOfMeasure::find(fromUnitOfMeasure).DecimalPrecision);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToValueControlDecimalPrecision</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets unit of measure to convert to form control decimal precision property.
    /// </summary>
    protected void setToValueControlDecimalPrecision()
    {
        toValueControl.noOfDecimalsValue(UnitOfMeasure::find(toUnitOfMeasure).DecimalPrecision);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueControlsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets enabled state of the value to convert from and value to convert to form controls.
    /// </summary>
    protected void setValueControlsEnabled()
    {
        boolean enabled = (unitOfMeasureConverterForward != null && unitOfMeasureConverterForward.canValueBeConverted());

        fromValueControl.enabled(enabled);
        toValueControl.enabled(enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitOfMeasureReferenceGroupChildControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>FormStringControl</c> form control bound to the <c>Symbol</c> field of the
    ///    <c>UnitOfMeasure</c> table from a unit of measure reference group.
    /// </summary>
    /// <param name="_formReferenceGroupControl">
    ///    A unit of measure reference group.
    /// </param>
    /// <returns>
    ///    The <c>FormStringControl</c> form control bound to the <c>Symbol</c> field of the
    ///    <c>UnitOfMeasure</c> table from a unit of measure reference group.
    /// </returns>
    protected FormStringControl unitOfMeasureReferenceGroupChildControl(FormReferenceGroupControl _formReferenceGroupControl)
    {
        Debug::assert(_formReferenceGroupControl.controlCount() == 1);
        Debug::assert(_formReferenceGroupControl.controlNum(1) is FormStringControl);

        return _formReferenceGroupControl.controlNum(1) as FormStringControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the value from which to convert.
    /// </summary>
    protected void updateFromValue()
    {
        if (unitOfMeasureConverterInverse != null && unitOfMeasureConverterInverse.canValueBeConverted())
        {
            fromValue   = unitOfMeasureConverterInverse.convertValue(toValue);
        }
        else
        {
            fromValue   = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateToValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the value to which to convert.
    /// </summary>
    protected void updateToValue()
    {
        if (unitOfMeasureConverterForward != null && unitOfMeasureConverterForward.canValueBeConverted())
        {
            toValue = unitOfMeasureConverterForward.convertValue(fromValue);
        }
        else
        {
            toValue = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates either the value to convert from or the value to convert to depending on the last user input.
    /// </summary>
    protected void updateValue()
    {
        if (isToValueModifiedLast)
        {
            this.updateFromValue();
        }
        else
        {
            this.updateToValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static UnitOfMeasureCalculator construct()
    {
        return UnitOfMeasureHelper::getSingleton().constructUnitOfMeasureCalculator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>UnitOfMeasureCalculator</c> class.
    /// </summary>
    /// <param name="_formRun">
    ///    A <c>FormRun</c> object.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>UnitOfMeasureCalculator</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    A <c>FormRun</c> object was not passed to the method.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    An invalid caller.
    /// </exception>
    public static UnitOfMeasureCalculator newFromFormRun(FormRun _formRun)
    {
        if (!_formRun)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return UnitOfMeasureHelper::getSingleton().newUnitOfMeasureCalculatorFromFormRun(_formRun);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>