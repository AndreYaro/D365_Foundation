<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CBDDestinationsController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>CBDDestinationsController</c> contains the logic of adding Electronic Reporting destinations on a runtime dialog.
/// </summary>
public final class CBDDestinationsController
{
    private ERFormatsDestinations erFormatDestinations = new ERFormatsDestinations();
    private PrintMgmtHierarchyType hierarchyType;
    private PrintMgmtNodeType startingNodeType;
    private PrintMgmtDocumentType docType;
    private boolean hideSSRSDestinationTab;
    private boolean useAllAvailablePrintSettingDetails;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryCreateInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CBDDestinationsController</c> class.
    /// </summary>
    /// <returns>A new instance for the <c>CBDDestinationsController</c> class.</returns>
    /// <remarks>A new instanse will not be created if the feature <c>CBDAllowERDestinationsAdjustmentRuntimeFeature</c> disabled
    /// or user doesn't have an access to the <c>ERFormatDestinationSettings</c> menu item.</remarks>
    [Hookable(false)]
    public static CBDDestinationsController tryCreateInstance()
    {
        CBDDestinationsController cbdDestinationsController;

        if (FeatureStateProvider::isFeatureEnabled(CBDAllowERDestinationsAdjustmentRuntimeFeature::instance())
            && CBDDestinationsController::isRuntimeEditAllowed())
        {
            cbdDestinationsController = new CBDDestinationsController();
        }

        return cbdDestinationsController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHierarchyType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void setHierarchyType(PrintMgmtHierarchyType _hierarchyType)
    {
        hierarchyType = _hierarchyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNodeType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void setNodeType(PrintMgmtNodeType _startingNodeType)
    {
        startingNodeType = _startingNodeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void setDocumentType(PrintMgmtDocumentType _docType)
    {
        docType = _docType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUseAllAvailablePrintSettingDetails</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void setUseAllAvailablePrintSettingDetails(boolean _useAllAvailablePrintSettingDetails)
    {
        useAllAvailablePrintSettingDetails = _useAllAvailablePrintSettingDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHideSSRSDestinationTab</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean getHideSSRSDestinationTab()
    {
        return hideSSRSDestinationTab;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initERFormatDestinations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <paramref name="_dataContractInfoObjects"/> map by Electronic reporting destinations.
    /// </summary>
    /// <param name = "_query">The report query.</param>
    /// <param name = "_dataContractInfoObjects">The map of contact info objects.</param>
    [Hookable(false)]
    public void initERFormatDestinations(Query _query, Map _dataContractInfoObjects)
    {
        Set details;

        if (useAllAvailablePrintSettingDetails)
        {
            details = this.getAllAvailableDetails();
        }
        else
        {
            details = CBDDestinationsController::getDetailsFromPrintContexts(this.createPrintContextsByQueryRun(new QueryRun(_query)));
        }

        Set formatNames = new Set(Types::Container);
        hideSSRSDestinationTab = true;

        SetEnumerator se = details.getEnumerator();

        while (se.moveNext())
        {
            PrintMgmtPrintSettingDetail current = se.current();

            if (current.parmSSRS() == PrintMgmtSSRS::NonSSRS)
            {
                var formatMappingGuid = ERPrintMgmtReportFormatSubscriber::getFormatMappingGuidByFormatStrGUID(current.parmReportFormatName());

                if (!erFormatDestinations.getDestinationByFormatMappingGuid(formatMappingGuid))
                {
                    ERDestinationAction destinationAction = isFlightEnabled(LocalizationFlights::ForcePrintJobSettings)
                        ? ERDestinationAction::View
                        : ERDestinationAction::Print;

                    ERFormatDestinationTable erFormatDestinationTable = ERFormatDestinationTable::findByFormatMappingGuid(formatMappingGuid);
                    ERIFormatDestination formatDestination = erFormatDestinationTable.initFormatDestination(current.parmNamedDestination(), destinationAction);

                    if (formatDestination)
                    {
                        SysDictClass dataContractClass = new SysDictClass(classIdGet(formatDestination));
                        str contractInfoName = strFmt('@SYS309930', dataContractClass.name(), formatMappingGuid);
                        var contractInfo = ERObjectsFactory::createDataContractInfoForSettingProperties(
                                contractInfoName,
                                formatDestination);

                        _dataContractInfoObjects.insert(
                                contractInfoName,
                                contractInfo);

                        erFormatDestinations.addDestinationByFormatMappingGuid(formatMappingGuid, formatDestination);
                    }
                }
            }
            else
            {
                hideSSRSDestinationTab = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setERDestinationsInPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets electronic reporting destinations into print settings.
    /// </summary>
    /// <param name = "_printMgmtReportRun">The instance of the <c>PrintMgmtReportRun</c> class.</param>
    [Hookable(false)]
    public void setERDestinationsInPrintSettings(PrintMgmtReportRun _printMgmtReportRun)
    {
        CBDDestinationsController::updateERDestinationsInPrintSettings(_printMgmtReportRun, erFormatDestinations);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateERDestinationsInPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the electronic reporting destinations into print settings.
    /// </summary>
    /// <param name = "_printMgmtReportRun">The instance of the <c>PrintMgmtReportRun</c> class.</param>
    /// <param name = "_erFormatDestinations">The instance of the <c>ERFormatsDestinations</c> class.</param>
    [Hookable(false)]
    public static void updateERDestinationsInPrintSettings(PrintMgmtReportRun _printMgmtReportRun, ERFormatsDestinations _erFormatDestinations)
    {
        while (_printMgmtReportRun.next())
        {
            PrintMgmtPrintSettingDetail printSettingDetail = _printMgmtReportRun.settingDetail();

            if (printSettingDetail.parmSSRS() == PrintMgmtSSRS::NonSSRS)
            {
                printSettingDetail.parmFormatDestinations(_erFormatDestinations);
            }
        }

        _printMgmtReportRun.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrintContextsByQueryRun</Name>
				<Source><![CDATA[
    private List createPrintContextsByQueryRun(QueryRun _queryRun)
    {
        List ret = new List(Types::Class);
        Common record;

        while (_queryRun.next())
        {
            record = _queryRun.getNo(1);
            ret.addEnd(this.createPrintContext(record));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrintContext</Name>
				<Source><![CDATA[
    private PrintMgmtPrintContext createPrintContext(Common _record = null)
    {
        PrintMgmtPrintContext printContext = new PrintMgmtPrintContext();

        printContext.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings());
        printContext.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings());

        if (_record)
        {
            printContext.parmQueryTableBuffer(_record.data());
        }

        printContext.setHierarchyContext(
            hierarchyType,
            startingNodeType,
            docType,
            _record ? _record.data() : null);
        return printContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetailsFromPrintContexts</Name>
				<Source><![CDATA[
    private static Set getDetailsFromPrintContexts(List _printContexts)
    {
        Set ret = new Set(Types::Class);
        ListEnumerator le = _printContexts.getEnumerator();

        while (le.moveNext())
        {
            ret = Set::union(ret, CBDDestinationsController::getDetailsFromPrintContext(le.current()));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetailsFromPrintContext</Name>
				<Source><![CDATA[
    private static Set getDetailsFromPrintContext(PrintMgmtPrintContext _context)
    {
        Set ret = new Set(Types::Class);
        PrintMgmtPrintSetting printSetting = PrintMgmt::getSettings(_context);

        for (int i = 1; i <= printSetting.numDetails(); i++)
        {
            ret.add(printSetting.getDetailByPos(i));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRuntimeEditAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns whether runtime editing of print destination is allowed
    /// </summary>
    /// <returns>True, if allowed, otherwise false.</returns>
    private static boolean isRuntimeEditAllowed()
    {
        return SecurityRights::construct()
            .hasMenuItemAccess(
                SecurableType::MenuItemDisplay,
                menuItemDisplayStr(ERFormatDestinationSettings));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllAvailableDetails</Name>
				<Source><![CDATA[
    private Set getAllAvailableDetails()
    {
        Set ret = new Set(Types::Class);
        PrintMgmtPrintContext context = this.createPrintContext();
        PrintMgmtPrintSetting printSetting = CBDDestinationsController::getSettings(context);

        for (int i = 1; i <= printSetting.numDetails(); i++)
        {
            ret.add(printSetting.getDetailByPos(i));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets print management setting with all available settings for the document type specified in the <paramref name="_printContext"/>.
    /// </summary>
    /// <param name = "_printContext">An instance of the <c>PrintMgmtPrintContext</c> class.</param>
    /// <returns>All available settings for the document type.</returns>
    [Hookable(false)]
    public static PrintMgmtPrintSetting getSettings(PrintMgmtPrintContext _printContext)
    {
        PrintMgmtDocumentType printMgmtDocumentType;

        ListEnumerator le = _printContext.getHierarchyContext().getDocumentTypeFilterList().getEnumerator();
        if (le.moveNext())
        {
            printMgmtDocumentType = le.current();
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        PrintMgmtNodeInstance currentInstance = new PrintMgmtNodeInstance();
        currentInstance.parmNodeDefinition(PrintMgmtNode::construct(_printContext.getHierarchyContext().parmStartingNodeType()));

        PrintMgmtSetupDoc printMgmtSetupDoc = PrintMgmtSetupDoc::construct(currentInstance, printMgmtDocumentType, _printContext.parmLanguageId());
        List setupDocInstanceList = new List(Types::Class);
        PrintMgmtDocInstance printMgmtDocInstance;

        while select RecId from printMgmtDocInstance
            order by PriorityId
            where printMgmtDocInstance.DocumentType == printMgmtDocumentType
        {
            setupDocInstanceList.addEnd(PrintMgmtSetupDocInstance::constructFromRec(
                printMgmtSetupDoc,
                printMgmtDocInstance.RecId,
                _printContext.parmLanguageId()));
        }

        PrintMgmtPrintSetting printSetting = new PrintMgmtPrintSetting();
        ListEnumerator setupDocInstanceEnumerator = setupDocInstanceList.getEnumerator();

        while (setupDocInstanceEnumerator.moveNext())
        {
            PrintMgmtSetupDocInstance instance = setupDocInstanceEnumerator.current();

            if (instance.parmSuppress() == NoYes::No)
            {
                for (int x = 1; x <= instance.numConditionalSettings(); x++)
                {
                    PrintMgmtSetupSettingsConditional conditionalSetting = instance.getConditionalSettingByPos(x);
                    if (conditionalSetting.parmSuppress() == NoYes::No)
                    {
                        PrintMgmtPrintSettingDetail settingDetail = CBDDestinationsController::makeSettingDetail(
                            conditionalSetting,
                            instance,
                            _printContext,
                            true);

                        printSetting.addPrintDetail(settingDetail);
                    }
                }

                PrintMgmtSetupSettingsDefault defaultSetting = instance.parmDefaultSetting();
                if (defaultSetting.parmSuppress() == NoYes::No)
                {
                    PrintMgmtPrintSettingDetail settingDetail = CBDDestinationsController::makeSettingDetail(
                        defaultSetting,
                        instance,
                        _printContext,
                        true);

                    printSetting.addPrintDetail(settingDetail);
                }
            }
        }

        return printSetting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeSettingDetail</Name>
				<Source><![CDATA[
    private static PrintMgmtPrintSettingDetail makeSettingDetail(
        PrintMgmtSetupSettings _setupSettings,
        PrintMgmtSetupDocInstance _instance,
        PrintMgmtPrintContext _printContext,
        boolean _isNamedDestinationFeatureEnabled)
    {
        PrintMgmtPrintSettingDetail newSettingDetail = new PrintMgmtPrintSettingDetail();
        PartyIProvider partyProvider = PartyProviderFactory::getPartyProvider();
        #isoCountryRegionCodes

        if (partyProvider && partyProvider.isLegalEntityInCountryRegion([#isoRU]))
        {
            PrintMgmtReportFormat printMgmtReportFormat = PrintMgmtReportFormat::findWithSystem(
                _setupSettings.parmReportFormat(),
                _instance.parmParent().parmDocumentType());

            newSettingDetail.parmReportFormatName(printMgmtReportFormat.Name);
            newSettingDetail.parmSSRS(printMgmtReportFormat.SSRS);
        }
        else
        {
            newSettingDetail.parmReportFormatName(PrintMgmtReportFormat::findWithSystem(
                _setupSettings.parmReportFormat(),
                _instance.parmParent().parmDocumentType()).Name);

            if (ERPrintMgmtReportFormatSubscriber::isERFormat(newSettingDetail.parmReportFormatName()))
            {
                newSettingDetail.parmSSRS(PrintMgmtSSRS::NonSSRS);
            }
        }

        newSettingDetail.parmIdentificationText(_setupSettings.parmIdTextForUser());
        newSettingDetail.parmNumberOfCopies(_setupSettings.parmCopies());

        if (_setupSettings.parmDestination() == null || _printContext.parmForcePrintJobSettings())
        {
            if (_instance.parmType() == PrintMgmtDocInstanceType::Copy)
            {
                newSettingDetail.parmPrintJobSettings(_printContext.parmDefaultCopyPrintJobSettings());
                newSettingDetail.parmInstanceName(enum2str(PrintMgmtDocInstanceType::Copy));
            }
            else
            {
                newSettingDetail.parmPrintJobSettings(_printContext.parmDefaultOriginalPrintJobSettings());
                newSettingDetail.parmInstanceName(enum2str(PrintMgmtDocInstanceType::Original));
            }
        }
        else
        {
            newSettingDetail.parmPrintJobSettings(_setupSettings.parmDestination());
            newSettingDetail.parmInstanceName(_instance.parmName());
        }

        if (_isNamedDestinationFeatureEnabled)
        {
            newSettingDetail.parmNamedDestination(_setupSettings.parmNamedDestination());
        }

        return newSettingDetail;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>