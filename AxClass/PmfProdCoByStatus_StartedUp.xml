<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfProdCoByStatus_StartedUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class in the <c>PmfProdCoByStatus</c> hierarchy for Co/By lines
/// for production orders in status ProdStatus::StartedUp
/// </summary>
class PmfProdCoByStatus_StartedUp extends PmfProdCoByStatus
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    public void deleting()
    {
        throw error(strfmt("@SYS22042",prodCoBy.prodTable().ProdStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    public void inserting()
    {
        super();

        ProdTable           prodTable   = prodCoBy.prodTable();
        InventQty           prodQty     = prodTable.QtyStUp;
        PdsCWInventQty      cwProdQty   = prodTable.PdsCWBatchStup;

        prodCoBy.type().setCoByEstimation();
        prodCoBy.type().setCoByStartUp(prodQty, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), cwProdQty);
        prodCoBy.type().setBackStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusDecrease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse the effects of the transition to a higher status
    /// </summary>
    /// <param name="_prodParmStatusDecrease">
    /// The parameters for the status decrease operation
    /// </param>
    /// <returns>
    /// true, if the decrease of the status was successful
    /// </returns>
    /// <remarks>
    /// Reverses the transition from status <c>ProdStatus::Released</c> to status
    /// <c>ProdStatus::StartedUp</c>
    /// </remarks>
    public boolean runStatusDecrease(ProdParmStatusDecrease _prodParmStatusDecrease)
    {
        prodCoBy.QtyCoByStUp        = 0;
        prodCoBy.PdsCWInventStup    = 0;

        prodCoBy.RemainCoByPhysical     = prodCoBy.QtyCoByCalc;
        prodCoBy.PdsCWRemainPhysical    = prodCoBy.PdsCWInventCalc;

        prodCoBy.StUpDate = dateNull();

        prodCoBy.update();

        return this.reverseDerivedCoBy(_prodParmStatusDecrease);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    public void updating()
    {
        super();

        if (prodCoBy.CoByQty != prodCoBy.orig().CoByQty)
        {
            prodCoBy.type().setCoByEstimation();

            InventQty       qty;
            PdsCWInventQty  cwQty;
            
            [qty, cwQty] = prodCoBy.calcRelativeProdQtyChange();

            prodCoBy.type().setCoByStartUp(
                qty,
                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                cwQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate a new PmfProdCoByStatus_StartedUp object for the
    /// production co/by product line
    /// </summary>
    /// <param name="_pmfProdCoBy">
    /// The production order co/by product line
    /// </param>
    /// <returns>
    /// The new co/by status object
    /// </returns>
    public static PmfProdCoByStatus_StartedUp construct(PmfProdCoBy _pmfProdCoBy)
    {
        return new PmfProdCoByStatus_StartedUp(_pmfProdCoBy);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>