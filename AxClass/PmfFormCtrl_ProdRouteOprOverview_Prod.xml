<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdRouteOprOverview_Prod</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>ProdTable</c> datasource of
/// the <c>ProdRouteOprOverview</c> form
/// </summary>
class PmfFormCtrl_ProdRouteOprOverview_Prod
    extends PmfFormCtrl
{
    ProdTable prodTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a <c>ProdType</c> range to the <c>ProdTable</c> form data source.
    /// </summary>
    /// <param name="_buffer">
    /// The record buffer associated with the datasource
    /// </param>
    public void dataSourceInitPost(Common _buffer)
    {
        Query                   q;
        QueryBuildDataSource    qB;

        super(_buffer);

        if (#PmfEnabled && this.isBatchEnabled() )
        {
            q = this.parmFormDataSource().query();
            qB = q.dataSourceTable(tablenum(ProdTable));
            qB.addRange(fieldnum(ProdTable, ProdType)).value(queryValue(ProdType::Process));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check, if the form is opened from batch operations list menu item.
    /// </summary>
    /// <returns>
    /// true, if the form is opened from batch operations list menu item.
    /// </returns>
    /// <remarks>
    /// This method is used to filter batch order operations if the current operations
    /// form is opened from batch operations menu item.
    /// </remarks>
    public boolean isBatchEnabled()
    {
        return this.menuItemName() == menuitemdisplaystr(PmfProdBatchRouteOprOverview);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1 = buffer,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(ProdTable))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PmfFormCtrl_ProdRouteOprOverview_Prod construct()
    {
        return new PmfFormCtrl_ProdRouteOprOverview_Prod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_ProdRouteOprOverview_Prod newFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_ProdRouteOprOverview_Prod::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>