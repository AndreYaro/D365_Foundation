<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmsUsmcaCertificateOfOriginDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the data provider class for the Certificate of Origin Report
/// </summary>
[
    SRSReportParameterAttribute(classstr(TmsUsmcaCertificateOfOriginContract)),
    SRSReportQueryAttribute(queryStr(TmsUsmcaCertificateOfOrigin))
]
internal class TmsUsmcaCertificateOfOriginDP extends SRSReportDataProviderBase
{
    private TmsUsmcaCertificateOfOriginTmp tmsUsmcaCertificateOfOriginTmp;
    private WHSShipmentTable          whsShipmentTable;
    private str certifierType;
    private str hasVariousProducers;
    private str blanketPeriod;
    private Set invoiceNumberSet;
    private str invoiceNumberStr;
    private Set skuNumbers;
    private date blanketPeriodFrom;
    private date blanketPeriodTo;
    private str isSingleShipment;
    private boolean hasVariousInvoiceAccounts;

    #define.CertifierType('CertifierType')
    #define.HasVariousProducers('HasVariousProducers')
    #define.BlanketPeriod('BlanketPeriod')
    #define.BlanketPeriodFrom('BlanketPeriodFrom')
    #define.BlanketPeriodTo('BlanketPeriodTo')
    #define.IsSingleShipment('IsSingleShipment')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmsUsmcaCertificateOfOriginTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the temp table for the Certificate of Origin Report
    /// </summary>
    /// <returns>
    /// The temp table for the Certificate of Origin Report
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TmsUsmcaCertificateOfOriginTmp))]
    public TmsUsmcaCertificateOfOriginTmp getTmsUsmcaCertificateOfOriginTmp()
    {
        select tmsUsmcaCertificateOfOriginTmp;

        return tmsUsmcaCertificateOfOriginTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        hasVariousInvoiceAccounts = false;
        invoiceNumberSet = new Set(Types::String);
        invoiceNumberStr = '';
        skuNumbers = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmsUsmcaCertificateOfOrigin</Name>
				<Source><![CDATA[
    private void insertTmsUsmcaCertificateOfOrigin(WHSShipmentTable  _shipmentTable,
                                      WHSLoadLine       _loadLine,
                                      InventTable       _inventTable,
                                      WHSInventTable    _whsInventTable,
                                      Date _fromDate,
                                      Date _toDate)
    {
        CompanyInfo     companyInfo;

        ttsbegin;

        companyInfo = CompanyInfo::find();

        this.assignCertifierRoles();
        this.assignProducerDetails();
        this.initCertifierFields(_shipmentTable);
        this.initExporterFields(companyInfo);
        this.initImporterFields(_loadLine, companyInfo);
        this.initProducerFields(companyInfo);

        tmsUsmcaCertificateOfOriginTmp.ItemId = _loadLine.ItemId;
        tmsUsmcaCertificateOfOriginTmp.HarmonizedCode = _whsInventTable.displayHarmonizedCode();
        tmsUsmcaCertificateOfOriginTmp.ItemDescription = this.getItemTranslatedDescriptionOrName(_inventTable, _loadLine.displayItemName());
        

        LogisticsPostalAddress destCountryAddress = LogisticsPostalAddress::findRecId(_shipmentTable.DeliveryPostalAddress);
        
        tmsUsmcaCertificateOfOriginTmp.CountryOfOrigin = this.getCountryOfOriginISOCode(destCountryAddress.CountryRegionId, _loadLine.ItemId);
        tmsUsmcaCertificateOfOriginTmp.InvoiceNumbers = invoiceNumberStr;

        tmsUsmcaCertificateOfOriginTmp.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElectronicAddressByPostalAddress</Name>
				<Source><![CDATA[
    protected str getElectronicAddressByPostalAddress(LogisticsPostalAddress _postalAddress, LogisticsElectronicAddressMethodType _type)
    {
        LogisticsLocation logisticsLocation;
        select firstonly logisticsLocation 
            where logisticsLocation.ParentLocation == _postalAddress.Location;
        LogisticsElectronicAddress electronicAddress = LogisticsElectronicAddress::findByLocationAndType(logisticsLocation.RecId, _type);
        str locatorStr = electronicAddress.Locator;
        if (_type == LogisticsElectronicAddressMethodType::Phone && electronicAddress.LocatorExtension)
        {
            locatorStr += ' ext. ' + electronicAddress.LocatorExtension;
        }

        return locatorStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryOfOriginISOCode</Name>
				<Source><![CDATA[
    protected AddressCountryRegionISOCode getCountryOfOriginISOCode(AddressCountryRegionId _destCountryRegionId, ItemId _itemId)
    {
        AddressCountryRegionId origCountryRegionId = COORule::originCountryRegionId(_itemId, _destCountryRegionId);
        AddressCountryRegionISOCode countryOfOriginIsoCode = LogisticsAddressCountryRegion::find(origCountryRegionId).isOcode;
        if (countryOfOriginIsoCode == '')
        {
            countryOfOriginIsoCode = LogisticsAddressCountryRegion::find(InventTable::find(_itemId).OrigCountryRegionId).isoCode;
        }

        return countryOfOriginIsoCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemTranslatedDescriptionOrName</Name>
				<Source><![CDATA[
    protected str getItemTranslatedDescriptionOrName(InventTable _inventTable, str _defaultName)
    {
        EcoResProductTranslation translation = EcoResProductTranslation::findByProductLanguage(_inventTable.Product, infolog.language(), false);
        str descriptionOrName;
        if (translation.Description != '')
        {
            descriptionOrName = translation.Description;    
        }
        else if (translation.Name != '')
        {
            descriptionOrName = translation.Name;
        }
        else
        {
            descriptionOrName = _defaultName;
        }

        return descriptionOrName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignCertifierRoles</Name>
				<Source><![CDATA[
    private void assignCertifierRoles()
    {
        switch (certifierType)
        {
            case "Importer":
                tmsUsmcaCertificateOfOriginTmp.CertifierIsImporter = NoYes::Yes;
                tmsUsmcaCertificateOfOriginTmp.CertifierIsExporter = NoYes::No;
                tmsUsmcaCertificateOfOriginTmp.CertifierIsProducer = NoYes::No;
                break;
            case "Exporter":
                tmsUsmcaCertificateOfOriginTmp.CertifierIsImporter = NoYes::No;
                tmsUsmcaCertificateOfOriginTmp.CertifierIsExporter = NoYes::Yes;
                tmsUsmcaCertificateOfOriginTmp.CertifierIsProducer = NoYes::No;
                break;
            case "Exporter And Producer":
                tmsUsmcaCertificateOfOriginTmp.CertifierIsImporter = NoYes::No;
                tmsUsmcaCertificateOfOriginTmp.CertifierIsExporter = NoYes::Yes;
                tmsUsmcaCertificateOfOriginTmp.CertifierIsProducer = NoYes::Yes;
                break;
            case "Producer":
                tmsUsmcaCertificateOfOriginTmp.CertifierIsImporter = NoYes::No;
                tmsUsmcaCertificateOfOriginTmp.CertifierIsExporter = NoYes::No;
                tmsUsmcaCertificateOfOriginTmp.CertifierIsProducer = NoYes::Yes;
                break;
            default:
                tmsUsmcaCertificateOfOriginTmp.CertifierIsImporter = NoYes::No;
                tmsUsmcaCertificateOfOriginTmp.CertifierIsExporter = NoYes::No;
                tmsUsmcaCertificateOfOriginTmp.CertifierIsProducer = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignProducerDetails</Name>
				<Source><![CDATA[
    private void assignProducerDetails()
    {
        if (certifierType == "Producer" || certifierType == "Exporter And Producer") 
        {
            tmsUsmcaCertificateOfOriginTmp.ProducerDetail = "";
        }
        else 
        {
            switch (hasVariousProducers)
            {
                case "Various producers":
                    tmsUsmcaCertificateOfOriginTmp.ProducerDetail = "Various";
                    break;
                case "Available upon request":
                    tmsUsmcaCertificateOfOriginTmp.ProducerDetail = "Available upon request by the importing authorities";
                    break;
                default:
                    tmsUsmcaCertificateOfOriginTmp.ProducerDetail = "";
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCertifierFields</Name>
				<Source><![CDATA[
    private void initCertifierFields(WHSShipmentTable _ShipmentTable)
    {
        InventLocation inventLocation;
        select firstonly inventLocation where inventLocation.InventLocationId == _ShipmentTable.InventLocationId;
        LogisticsPostalAddress warehousePostalAddress = inventLocation.logisticsPostalAddress();

        tmsUsmcaCertificateOfOriginTmp.CertifierName =  LogisticsLocation::find(warehousePostalAddress.Location).Description;
        tmsUsmcaCertificateOfOriginTmp.CertifierAddress = warehousePostalAddress.Address;
        tmsUsmcaCertificateOfOriginTmp.CertifierPhone = this.getElectronicAddressByPostalAddress(warehousePostalAddress, LogisticsElectronicAddressMethodType::Phone);
        tmsUsmcaCertificateOfOriginTmp.CertifierEmail = this.getElectronicAddressByPostalAddress(warehousePostalAddress, LogisticsElectronicAddressMethodType::Email);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExporterFields</Name>
				<Source><![CDATA[
    private void initExporterFields(CompanyInfo _companyInfo)
    {
        if (certifierType == "None" || certifierType == "Importer" || certifierType == "Producer")
        {
            tmsUsmcaCertificateOfOriginTmp.ExporterName = "";
            tmsUsmcaCertificateOfOriginTmp.ExporterAddress = "";
            tmsUsmcaCertificateOfOriginTmp.ExporterEmail = "";
            tmsUsmcaCertificateOfOriginTmp.ExporterPhone = "";
        }
        else if (certifierType == "Exporter" || certifierType == "Exporter And Producer")
        {
            tmsUsmcaCertificateOfOriginTmp.ExporterName = _companyInfo.Name;
            tmsUsmcaCertificateOfOriginTmp.ExporterAddress = _companyInfo.postalAddress().Address;
            tmsUsmcaCertificateOfOriginTmp.ExporterEmail = this.getElectronicAddressByPostalAddress(_companyInfo.postalAddress(), LogisticsElectronicAddressMethodType::Email);
            tmsUsmcaCertificateOfOriginTmp.ExporterPhone = this.getElectronicAddressByPostalAddress(_companyInfo.postalAddress(), LogisticsElectronicAddressMethodType::Phone);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initImporterFields</Name>
				<Source><![CDATA[
    private void initImporterFields(WHSLoadLine _LoadLine, CompanyInfo _companyInfo)
    {
        if (certifierType == "Importer")
        {
            tmsUsmcaCertificateOfOriginTmp.ImporterName = _companyInfo.Name;
            tmsUsmcaCertificateOfOriginTmp.ImporterAddress = _companyInfo.postalAddress().Address;
            tmsUsmcaCertificateOfOriginTmp.ImporterEmail = this.getElectronicAddressByPostalAddress(_companyInfo.postalAddress(), LogisticsElectronicAddressMethodType::Email);
            tmsUsmcaCertificateOfOriginTmp.ImporterPhone = this.getElectronicAddressByPostalAddress(_companyInfo.postalAddress(), LogisticsElectronicAddressMethodType::Phone);
        }
        else
        {
            if (!hasVariousInvoiceAccounts)
            {
                if (certifierType == "None" || certifierType == "Producer")
                {
                    tmsUsmcaCertificateOfOriginTmp.ImporterName = "";
                    tmsUsmcaCertificateOfOriginTmp.ImporterAddress = "";
                    tmsUsmcaCertificateOfOriginTmp.ImporterEmail = "";
                    tmsUsmcaCertificateOfOriginTmp.ImporterPhone = "";
                }
                else if (certifierType == "Exporter" ||  certifierType == "Exporter And Producer")
                {
                    CustTable custTable = CustTable::find(SalesTable::find(_loadLine.OrderNum).InvoiceAccount);
                    LogisticsPostalAddress invoiceAddress = custTable.invoiceAddress();
                    tmsUsmcaCertificateOfOriginTmp.ImporterName = LogisticsLocation::find(invoiceAddress.Location).Description;
                    tmsUsmcaCertificateOfOriginTmp.ImporterAddress = invoiceAddress.Address;
                    tmsUsmcaCertificateOfOriginTmp.ImporterEmail = this.getElectronicAddressByPostalAddress(invoiceAddress, LogisticsElectronicAddressMethodType::Email);
                    tmsUsmcaCertificateOfOriginTmp.ImporterPhone = this.getElectronicAddressByPostalAddress(invoiceAddress, LogisticsElectronicAddressMethodType::Phone);
                }
            }
            else
            {
                tmsUsmcaCertificateOfOriginTmp.HasVariousInvoice = "@TRX:USMCAHasVariousInvoiceAccounts";
                tmsUsmcaCertificateOfOriginTmp.ImporterName = "";
                tmsUsmcaCertificateOfOriginTmp.ImporterAddress = "";
                tmsUsmcaCertificateOfOriginTmp.ImporterEmail = "";
                tmsUsmcaCertificateOfOriginTmp.ImporterPhone = "";
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProducerFields</Name>
				<Source><![CDATA[
    private void initProducerFields(CompanyInfo _companyInfo)
    {
        if (certifierType == "None" || certifierType == "Exporter" || certifierType == "Importer")
        {
            tmsUsmcaCertificateOfOriginTmp.ProducerName = "";
            tmsUsmcaCertificateOfOriginTmp.ProducerAddress = "";
            tmsUsmcaCertificateOfOriginTmp.ProducerEmail = "";
            TMSUsmcaCertificateOfOriginTmp.ProducerPhone = "";
        }
        else if (certifierType == "Producer" || certifierType == "Exporter And Producer")
        {
            tmsUsmcaCertificateOfOriginTmp.ProducerName = _companyInfo.Name;
            tmsUsmcaCertificateOfOriginTmp.ProducerAddress = _companyInfo.postalAddress().Address;
            tmsUsmcaCertificateOfOriginTmp.ProducerEmail = this.getElectronicAddressByPostalAddress(_companyInfo.postalAddress(), LogisticsElectronicAddressMethodType::Email);
            tmsUsmcaCertificateOfOriginTmp.ProducerPhone = this.getElectronicAddressByPostalAddress(_companyInfo.postalAddress(), LogisticsElectronicAddressMethodType::Phone);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSkuNumber</Name>
				<Source><![CDATA[
    protected boolean insertSkuNumber(ItemId _skuNumber)
    {
        if (_skuNumber)
        {
            if (skuNumbers.in(_skuNumber))
            {
                return false;
            }
            else
            {
                return skuNumbers.add(_skuNumber);
            }
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        TMSRouteSegment     tmsRouteSegment;
        TMSRouteSegment     tmsRouteSegment2;
        TMSRouteSegmentLoad tmsRouteSegmentLoad;
        TMSRouteSegmentLoad tmsRouteSegmentLoad2;
        
        const int fromToDateOffset = 5;

        TmsUsmcaCertificateOfOriginContract contract = this.parmDataContract() as TMSUsmcaCertificateOfOriginContract;
        if (contract)
        {
            hasVariousProducers = enum2Str(contract.parmHasVariousProducers());
            certifierType = enum2Str(contract.parmCertifierType());
            blanketPeriod = enum2Str(contract.parmBlanketPeriod());
            blanketPeriodFrom = contract.parmBlanketPeriodFrom();
            blanketPeriodTo = contract.parmBlanketPeriodTo();
            isSingleShipment = enum2Str(contract.parmIsSingleShipment());
        }
        Query query = this.parmQuery();

        QueryRun queryRunInvoice = new QueryRun(query);
        queryRunInvoice.setRecord(whsShipmentTable);
        CustInvoiceAccount tmpCustInvoiceAccount, curCustInvoiceAccount;
        while (QueryRunInvoice.next())
        {
            WHSShipmentTable _shipmentTable = QueryRunInvoice.get(tableNum(WHSShipmentTable));
            WHSLoadLine _loadLine = QueryRunInvoice.get(tableNum(WHSLoadLine));

            if (_shipmentTable.workTransType == WHSWorkTransType::Sales)
            {
                if (CustInvoiceJour::findFromSalesId(_loadLine.OrderNum).InvoiceId != '')
                {
                    if (invoiceNumberSet.add(CustInvoiceJour::findFromSalesId(_loadLine.OrderNum).InvoiceId))
                    {
                        invoiceNumberStr += CustInvoiceJour::findFromSalesId(_loadLine.OrderNum).InvoiceId;
                        invoiceNumberStr += '; ';
                    }
                }

                curCustInvoiceAccount = SalesTable::find(_loadLine.OrderNum).InvoiceAccount;
                //curCustInvoiceAccount = CustInvoiceJour::findFromSalesId(_loadLine.OrderNum).InvoiceAccount;
                if (curCustInvoiceAccount && !hasVariousInvoiceAccounts)
                {
                    if (!tmpCustInvoiceAccount)
                    {
                        tmpCustInvoiceAccount = curCustInvoiceAccount;
                    }
                    else if (tmpCustInvoiceAccount != curCustInvoiceAccount)
                    {
                        hasVariousInvoiceAccounts = true;
                    }
                }
            }
        }
        

        QueryRun queryRun = new QueryRun(query);

        queryRun.setRecord(whsShipmentTable);

        ttsbegin;

        while (queryRun.next())
        {
            tmsUsmcaCertificateOfOriginTmp.clear();

            WHSShipmentTable queryWHSShipmentTable = queryRun.get(tableNum(WHSShipmentTable));
            WHSLoadLine queryWHSLoadLine = queryRun.get(tableNum(WHSLoadLine));
            InventTable queryInventTable = queryRun.get(tableNum(InventTable));
            WHSInventTable queryWHSInventTable = queryRun.get(tableNum(WHSInventTable)); 

            select firstonly ScheduledShipUTCDateTime
                from tmsRouteSegment
                exists join RouteCode, Sequence, Id from tmsRouteSegmentLoad
                    where tmsRouteSegment.RouteCode == tmsRouteSegmentLoad.RouteCode &&
                          tmsRouteSegment.Sequence  == tmsRouteSegmentLoad.Sequence  &&
                          tmsRouteSegmentLoad.Id    == queryWHSLoadLine.LoadId;

            select reverse firstonly ScheduledArrivalUTCDateTime
                from tmsRouteSegment2
                order by ScheduledArrivalUTCDateTime
                exists join RouteCode, Sequence, Id from tmsRouteSegmentLoad2
                    where tmsRouteSegment2.RouteCode == tmsRouteSegmentLoad2.RouteCode &&
                          tmsRouteSegment2.Sequence  == tmsRouteSegmentLoad2.Sequence  &&
                          tmsRouteSegmentLoad2.Id    == queryWHSLoadLine.LoadId;

            if (this.insertSkuNumber(queryWHSLoadLine.ItemId))
            {
                this.insertTmsUsmcaCertificateOfOrigin(queryWHSShipmentTable,
                                              queryWHSLoadLine,
                                              queryInventTable,
                                              queryWHSInventTable,
                                              DateTimeUtil::date(tmsRouteSegment.ScheduledShipUTCDateTime) - fromToDateOffset,
                                              DateTimeUtil::date(tmsRouteSegment2.ScheduledShipUTCDateTime) + fromToDateOffset);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TmsUsmcaCertificateOfOriginDP construct()
    {
        return new TmsUsmcaCertificateOfOriginDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>