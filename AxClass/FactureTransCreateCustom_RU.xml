<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureTransCreateCustom_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FactureTransCreateCustom_RU extends FactureTransCreate_RU
{
    CustomJournalTrans_RU    customJournalTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmounts</Name>
				<Source><![CDATA[
    protected boolean calcAmounts(Qty _qty)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTrans</Name>
				<Source><![CDATA[
    protected void initTrans()
    {
        CustomJournalTable_RU   customJournalTable = customJournalTrans.customJournalTable();
        TaxTable                taxTable;

        taxTable = TaxTable::find(FEACCCustomRateTable_RU::findOnDate(customJournalTrans.feaccId, TaxType_W::VAT, CustomJournalCalc_RU::customAllImportExport(customJournalTable.CustomJournalType), customJournalTrans.CountryRegionId, customJournalTable.gtdDate));

        super();

        factureTrans.Qty                = customJournalTrans.Qty;
        factureTrans.LineAmount         = customJournalTrans.estimativeAmount(CustomTotalType_RU::Cost) +
                                          customJournalTrans.estimativeAmount(CustomTotalType_RU::Duty) +
                                          customJournalTrans.estimativeAmount(CustomTotalType_RU::Excise);
        factureTrans.Unit               = customJournalTrans.UnitId;
        factureTrans.TaxAmount          = customJournalTrans.estimativeAmount(CustomTotalType_RU::VAT);
        factureTrans.Excise             = customJournalTrans.estimativeAmount(CustomTotalType_RU::Excise);
        factureTrans.InventTransId      = customJournalTrans.SalesPurchInventTransId;
        factureTrans.DefaultDimension   = customJournalTrans.DefaultDimension;
        factureTrans.InventGTDId        = customJournalTable.InventGTDId;
        factureTrans.CountryRegionName  = LogisticsAddressCountryRegionTranslation::find(customJournalTable.CountryRegionId).ShortName;
        factureTrans.FactureLineType    = FactureLineType_RU::GTDLine;
        factureTrans.InvoiceLineNum     = customJournalTrans.LineNum;
        factureTrans.ExchRate           = ExchangeRateHelper::exchRate(factureJour.CurrencyCode, factureJour.FactureDate);
        factureTrans.ExciseValue        = TaxData::percent(FEACCCustomRateTable_RU::findOnDate(customJournalTrans.feaccId, TaxType_W::VAT, CustomJournalCalc_RU::customAllImportExport(customJournalTable.CustomJournalType), customJournalTrans.CountryRegionId, customJournalTable.gtdDate),
                                                           customJournalTable.gtdDate,
                                                           customJournalTrans.estimativeAmount(CustomTotalType_RU::Cost));
        factureTrans.vatValue           = TaxData::percent(taxTable.TaxCode,
                                                           customJournalTable.gtdDate,
                                                           customJournalTrans.estimativeAmount(CustomTotalType_RU::Cost) +
                                                           customJournalTrans.estimativeAmount(CustomTotalType_RU::Duty) +
                                                           customJournalTrans.estimativeAmount(CustomTotalType_RU::Excise));
        factureTrans.Price              = 0;
        factureTrans.ItemId             = customJournalTrans.ItemId;
        factureTrans.ItemName           = customJournalTrans.itemName();
        factureTrans.vat                = factureTrans.TaxAmount;

        factureTrans.LineAmountMST      = factureTrans.LineAmount;
        factureTrans.TaxAmountMST       = factureTrans.TaxAmount;
        factureTrans.ExciseAmountMST    = factureTrans.Excise;
        factureTrans.vatAmountMST       = factureTrans.vat;

        switch (taxTable.TaxType_W)
        {
            case TaxType_W::VAT:
                factureTrans.vatType = VATType_RU::Full;
                break;
            case TaxType_W::VATReduced:
                factureTrans.vatType = VATType_RU::Reduced;
                break;
            case TaxType_W::VATZero:
                factureTrans.vatType = VATType_RU::Zero;
                break;
            default:
                factureTrans.vatType = VATType_RU::NonLiable;
                factureTrans.vat     = 0;
        }

        factureTrans.TaxCode = (factureTrans.vatType == VATType_RU::NonLiable) ? "" : taxTable.TaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FactureJourCreate_RU    _facture,
                    RecId                   _recId,
                    Qty                     _qty,
                    NoYes                   _recalcTaxes)
    {
        super(_facture, _recId, _qty, _recalcTaxes);

        customJournalTrans = CustomJournalTrans_RU::findRecId(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    public void setParameters(RecId _recId, Qty _qty, NoYes _recalcTaxes)
    {
        super(_recId, _qty, _recalcTaxes);
        customJournalTrans = CustomJournalTrans_RU::findRecId(_recId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>