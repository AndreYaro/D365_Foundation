<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineInventTransImpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>InventTransferLine</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(InventTransferLine))]
public class TaxModelDocLineInventTransImpl extends TaxModelDocLineBaseImpl
{
    InventTransferLine      inventTransferLine;
    InventTransferTable     inventTransferTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <param name="_type">
    /// The type. 
    /// </param>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    public LogisticsPostalAddress getTaxLogisticsPostalAddress(TransTaxInformationType_IN _type = TransTaxInformationType_IN::InventTransferFrom)
    {
        LogisticsPostalAddress logisticsPostalAddressLocal;
        InventTransferLine inventTransferLineLocal = documentLineMap;
        InventTransferTable inventTransferTableLocal = inventTransferTable ? inventTransferTable : inventTransferLineLocal.inventTransferTable();

        if (_type == TransTaxInformationType_IN::InventTransferFrom)
        {
            logisticsPostalAddressLocal = LogisticsPostalAddress::findRecId(inventTransferTableLocal.FromPostalAddress);
        }
        else if (_type == TransTaxInformationType_IN::InventTransferTo)
        {
            logisticsPostalAddressLocal = LogisticsPostalAddress::findRecId(inventTransferTableLocal.ToPostalAddress);
        }

        return logisticsPostalAddressLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction tax information can be modified or not.
    /// </summary>
    /// <returns>
    /// True if the tax information of document line can be modified; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        return inventTransferTable.TransferStatus != InventTransferStatus::Received;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        return inventTransferLine.QtyTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        return TaxDirection::OutgoingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        return DateTimeUtil::date(inventTransferTable.createdDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        super(_documentLineMap);
        inventTransferLine = _documentLineMap;
        inventTransferTable = inventTransferLine.inventTransferTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    public NoYes shouldPostTaxTrans()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is scrap or not.
    /// </summary>
    /// <returns>
    /// True if the document line is scrap;otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes isScrap()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type
    /// </summary>
    /// <returns>
    /// The transaction tax module type
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        return TaxModuleType::Inventory_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTransTaxInformationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default transaction tax information type;
    /// </summary>
    /// <returns>The default transaction tax information type.</returns>
    protected TransTaxInformationType_IN getDefaultTransTaxInformationType()
    {
        return TransTaxInformationType_IN::InventTransferFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption address.
    /// </summary>
    /// <returns>
    /// The comsumption address.
    /// </returns>
    public LogisticsPostalAddress getConsumptionAddress()
    {
        if (!isConsumptionAddressCached)
        {
            consumptionAddress = LogisticsPostalAddress::findRecId(inventTransferTable.ToPostalAddress);
            isConsumptionAddressCached = true;
        }
        return consumptionAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin address.
    /// </summary>
    /// <returns>
    /// The origin address.
    /// </returns>
    public LogisticsPostalAddress getOriginAddress()
    {
        if (!isOriginAddressCached)
        {
            originAddress = LogisticsPostalAddress::findRecId(inventTransferTable.FromPostalAddress);
            isOriginAddressCached = true;
        }
        return originAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction delivery date
    /// </summary>
    /// <returns>
    /// The transaction delivery date
    /// </returns>
    public date getDeliveryDate()
    {
        return DateTimeUtil::date(inventTransferTable.createdDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount of the document line.
    /// </summary>
    /// <returns>
    /// The line amount.
    /// </returns>
    public LineAmount getLineAmount()
    {
        return inventTransferLine.NetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    public LogisticsPostalAddress getPartyLogisticsPostalAddress()
    {
        return LogisticsPostalAddress::findByLocation(inventTransferTable.toLocation());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line transaction currency.
    /// </summary>
    /// <returns>The document line transaction currency.</returns>
    public CurrencyCode getTransactionCurrency()
    {
        return Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return DateTimeUtil::date(inventTransferTable.CreatedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return DateTimeUtil::date(inventTransferTable.CreatedDateTime);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>