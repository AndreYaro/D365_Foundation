<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOrderOperationChangeTroubleshootingStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

internal class RetailOrderOperationChangeTroubleshootingStatus extends RunBase
{
    DialogRunbase   dialog;
    DialogField     fieldTroubleshootingStatus;

    List recIdsToProcess;
    RetailOrderOperationTroubleshootingStatus choice;

    #define.RetryNum(3)

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        fieldTroubleshootingStatus = dialog.addField(enumstr(RetailOrderOperationTroubleshootingStatus));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        choice = fieldTroubleshootingStatus.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ListIterator listIt = new ListIterator(recIdsToProcess);
        while (listIt.more()) {
            this.processRetailOrderOperationStatus(listIt.value());
            listIt.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        recIdsToProcess = new List(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RetailOrderOperationChangeTroubleshootingStatus changeStatus = new RetailOrderOperationChangeTroubleshootingStatus();

        if (_args)
        {
            switch (_args.dataset())
            {
                case tablenum(RetailOrderOperationStatus):
                    changeStatus.initRecIdsToProcessFromArgs(_args);
                    break;
                default:
                    throw error("@RetailAsyncOrderOperations:InvalidDatasetForOperationChangeTroubleshootingStatus");
            }
        }

        if (changeStatus.prompt())
        {
            changeStatus.runOperation();
            _args.caller().dataSource().research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecIdsToProcessFromArgs</Name>
				<Source><![CDATA[
    private void initRecIdsToProcessFromArgs(Args _args)
    {
        if (_args.multiSelectionContext())
        {
            MultiSelectionContext multiSelectionContext = _args.multiSelectionContext();

            RetailOrderOperationStatus operationStatus = multiSelectionContext.getFirst();
            while (operationStatus)
            {
                recIdsToProcess.addEnd(operationStatus.RecId);
                operationStatus = multiSelectionContext.getNext();
            }
        }

        if (recIdsToProcess.empty() && _args.record())
        {
            recIdsToProcess.addEnd(_args.record().RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRetailOrderOperationStatus</Name>
				<Source><![CDATA[
    private void processRetailOrderOperationStatus(RecId _recId)
    {
        System.Exception ex;
        Microsoft.Dynamics.Ax.Xpp.DeadlockException deadLockEx;
        Microsoft.Dynamics.Ax.Xpp.UpdateConflictException updateConflictEx;
        RetailOrderOperationStatus retailOrderOperationStatus;

        try
        {
            ttsbegin;
            select forupdate retailOrderOperationStatus
                    where retailOrderOperationStatus.RecId == _recId;
            retailOrderOperationStatus.TroubleshootingStatus = choice;
            retailOrderOperationStatus.update();
            ttscommit;
        }
        catch (deadLockEx)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                this.logError(_recId, deadLockEx);
                throw deadLockEx;
            }
            else
            {
                retry;
            }
        }
        catch (updateConflictEx)
        {
            if (appl.ttsLevel() != 0)
            {
                this.logError(_recId, updateConflictEx);
                throw updateConflictEx;
            }
            else if (xSession::currentRetryCount() >= #RetryNum)
            {
                this.logError(_recId, updateConflictEx);
                throw Exception::UpdateConflictNotRecovered;
            }
            else
            {
                retry;
            }
        }
        catch (ex)
        {
            this.logError(_recId, ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logError</Name>
				<Source><![CDATA[
    private void logError(RecId _recId, System.Exception _exception)
    {
        eventSource.EventWriteOrdersOperationChangeTroubleshootingStatusError(_recId, _exception.GetType().ToString(), _exception.ToString());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>