<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineDeliveryDateControlRecalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Recalculates delivery dates and updates a sales line when needed.
/// </summary>
class SalesLineDeliveryDateControlRecalculate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToPromptDeliveryDateUpdateInLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to dialog to obtain information relevant to delivery date update.
    /// </summary>
    /// <param name="_dialogGroup">
    /// The <c>DialogGroup</c> where to bind the delivery date update controls.
    /// </param>
    /// <param name="_dialog">
    /// The <c>Dialog</c> where to bind the delivery date update controls.
    /// </param>
    /// <returns>
    /// A <c>DialogField</c> containing the delivery date update controls.
    /// </returns>
    public static DialogField addToPromptDeliveryDateUpdateInLines(
        DialogGroup               _dialogGroup,
        Dialog                    _dialog)
    {
        DeliveryDateUpdateInLines deliveryDateUpdateInLines;

        _dialogGroup = _dialog.addGroup("@SYS4004370", _dialogGroup);
        _dialog.customFieldName_RU("@SYS4004370");
        DialogField recalculateDeliveryDatesField = _dialog.addField(enumStr(DeliveryDateUpdateInLines));
        recalculateDeliveryDatesField.value(deliveryDateUpdateInLines);
        _dialog.addText("@SYS4004373");
        return recalculateDeliveryDatesField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDeliveryDateControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies selected delivery date configuration to a Sales order line and recalculates the dates if necessary.
    /// </summary>
    /// <param name="_salesLine">
    /// The Sales order line to which to apply the delivery date configuration.
    /// </param>
    /// <param name="_deliveryDateUpdateInLines">
    /// The selected delivery date configuration.
    /// </param>
    public static void applyDeliveryDateControl(SalesLine                 _salesLine,
                                                DeliveryDateUpdateInLines _deliveryDateUpdateInLines)
    {
        if (_salesLine.SalesType == SalesType::ReturnItem)
        {
            return;
        }

        if (_salesLine.isDeliveryDateControlTypeClassicCTP()
            && !(SalesLineCTPDeliveryDateControlRecalculateFeature::instance().isEnabled()
            && SalesParameters::find().DeliveryDateCTPRecalculateOnUpdate))
        {
            _salesLine.DeliveryDateControlType = SalesDeliveryDateControlType::None;
            return;
        }

        SalesLineDeliveryDateControlRecalculate::applyDeliveryDateControlBasedOnDeliveryDateUpdateInLines(_salesLine, _deliveryDateUpdateInLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDeliveryDateControlBasedOnDeliveryDateUpdateInLines</Name>
				<Source><![CDATA[
    protected static void applyDeliveryDateControlBasedOnDeliveryDateUpdateInLines(SalesLine                 _salesLine,
                                                                                   DeliveryDateUpdateInLines _deliveryDateUpdateInLines)
    {
        switch (_deliveryDateUpdateInLines)
        {
            case DeliveryDateUpdateInLines::RecalculateDeliveryDates:
                if (_salesLine.isDeliveryDateControlTypeClassicCTP()
                    && SalesLineCTPDeliveryDateControlRecalculateFeature::instance().isEnabled()
                    && SalesParameters::find().DeliveryDateCTPRecalculateOnUpdate)
                {
                    ReqTrans reqTrans = _salesLine.reqTrans(ReqPlanVersion::findActiveReqPlanIdDynamic().RecId, true);
                    if (reqTrans)
                    {
                        reqTrans.deleteExplosionCoverage(null);
                        reqTrans.delete(null);
                    }
                }
                SalesCalcAvailableDlvDates salesCalcAvailableDlvDatesSalesLine =
                    SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(_salesLine);
                salesCalcAvailableDlvDatesSalesLine.modifiedFieldBeforeInsert(_salesLine,true);
                break;
            case DeliveryDateUpdateInLines::RevertDeliveryDateControl:
                _salesLine.DeliveryDateControlType = SalesDeliveryDateControlType::None;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFieldForDeliveryDateUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if any updates relevant to delivery dates are needed to order lines depending on which fields
    /// are modified on a header.
    /// </summary>
    /// <param name="_tableId">
    /// The Table ID to check for fields requiring delivery date updates.
    /// </param>
    /// <param name="_fieldId">
    /// The Field ID to check for fields requiring delivery date updates.
    /// </param>
    /// <returns>
    /// true if updates will be needed to order lines; false otherwise.
    /// </returns>
    public static boolean checkFieldForDeliveryDateUpdate(TableId _tableId, FieldId _fieldId)
    {
        boolean salesLineDeliveryDateUpdateNeeded;

        // Case statement
        switch (_tableId)
        {
            case tableNum(SalesTable):
                switch (_fieldId)
                {
                    case fieldNum(SalesTable, DlvMode):
                        salesLineDeliveryDateUpdateNeeded = true;
                        break;
                    case fieldNum(SalesTable, DeliveryDate):
                        salesLineDeliveryDateUpdateNeeded = true;
                        break;
                    case fieldNum(SalesTable, CustAccount):
                        salesLineDeliveryDateUpdateNeeded = true;
                        break;
                    case fieldNum(SalesTable, DeliveryPostalAddress):
                        salesLineDeliveryDateUpdateNeeded = true;
                        break;
                    case fieldNum(SalesTable, InventSiteId):
                        salesLineDeliveryDateUpdateNeeded = true;
                        break;
                    case fieldNum(SalesTable, InventLocationId):
                        salesLineDeliveryDateUpdateNeeded = true;
                        break;
                }
                break;
        }

        return salesLineDeliveryDateUpdateNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateInLinesUpdateNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if delivery date update propagation of changes from order header to order lines should prompt.
    /// </summary>
    /// <param name="_salesTable2LineUpdateFields">
    /// The <c>List</c> of fields that were updated.
    /// </param>
    /// <param name="_tradeTable2LineUpdate">
    /// Whether the fields triggering the update are configured to prompt, silently update, or not to update.
    /// </param>
    /// <returns>
    /// true if prompt is required; false otherwise.
    /// </returns>
    public static boolean deliveryDateInLinesUpdateNeeded(List                  _salesTable2LineUpdateFields,
                                                          TradeTable2LineUpdate _tradeTable2LineUpdate)
    {
        ListEnumerator salesTable2LineUpdateFieldsEnumerator = _salesTable2LineUpdateFields.getEnumerator();

        while (salesTable2LineUpdateFieldsEnumerator.moveNext())
        {
            SalesTable2LineField salesTable2LineField = salesTable2LineUpdateFieldsEnumerator.current();
            if (salesTable2LineField.table2LineUpdate() == _tradeTable2LineUpdate &&
                SalesLineDeliveryDateControlRecalculate::checkFieldForDeliveryDateUpdate(salesTable2LineField.tableId(),
                                                                                         salesTable2LineField.fieldId()))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>