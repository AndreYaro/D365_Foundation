<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EGAISReturnOrderCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EGAISReturnOrderCreate_RU</c> class is used to create a return order for the ougtoing EGAIS waybill,
///    when the waybill was either rejected by the customer or the real quantity of the product reveived by the customer differs
///    from the quantity that was sent by us.
/// </summary>
public class EGAISReturnOrderCreate_RU extends RunBase
{
    RefRecId                   waybillJourRecId;
    SalesTable              salesTable;
    CustInvoiceJour         custInvoiceJour;
    EGAISWaybillJour_RU     waybillJour;
    ReturnDispositionCodeId returnDispositionCodeId;

    DialogField             fieldReturnDispositionCodeId;

    protected const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSaveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if the last user choices can be saved and restored.
    /// </summary>
    /// <returns>
    /// true, if the last user choices can be saved and restored; false, otherwise
    /// </returns>
    protected boolean canSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLines</Name>
				<Source><![CDATA[
    private void createSalesLines()
    {
        SalesOrderCopyingContract contract = this.createSalesOrderCopyingContract();

        SalesCopying::copyServer(contract.pack(), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesOrderCopyingContract</Name>
				<Source><![CDATA[
    private SalesOrderCopyingContract createSalesOrderCopyingContract()
    {
        TmpFrmVirtual               tmpFrmVirtualHeader, tmpFrmVirtualLines;
        EGAISWaybillLine_RU         waybillLine;
        CustInvoiceTrans            custInvoiceTrans;
        SalesOrderCopyingContract   contract;
        EGAISWaybillSettlement_RU   settlement;
        Qty                         returnQty;

        tmpFrmVirtualHeader.TableNum    = custInvoiceJour.TableId;
        tmpFrmVirtualHeader.RecordNo    = custInvoiceJour.RecId;
        tmpFrmVirtualHeader.Id          = custInvoiceJour.InvoiceId;
        tmpFrmVirtualHeader.insert();

        while select waybillLine
            where waybillLine.WaybillJour == waybillJour.RecId
               && waybillLine.Qty != waybillLine.RealQty
        join InventTransId from settlement
            where settlement.WaybillLine == waybillLine.RecId
        {
            select firstOnly SalesUnit, ItemId, InvoiceId, LineNum, InvoiceDate from custInvoiceTrans
                where custInvoiceTrans.SalesId              == custInvoiceJour.SalesId
                   && custInvoiceTrans.InvoiceId            == custInvoiceJour.InvoiceId
                   && custInvoiceTrans.InvoiceDate          == custInvoiceJour.InvoiceDate
                   && custInvoiceTrans.numberSequenceGroup  == custInvoiceJour.numberSequenceGroup
                   && custInvoiceTrans.InventTransId        == settlement.InventTransId;
            
            select firstOnly tmpFrmVirtualLines
                where tmpFrmVirtualLines.TableNum == custInvoiceTrans.TableId
                   && tmpFrmVirtualLines.RecordNo == custInvoiceTrans.RecId;

            // we should convert qty from EGAIS unit to the unit of custInvoiceTrans
            returnQty = EcoResProductUnitConverter::convertForReleasedProduct(custInvoiceTrans.ItemId,
                            '',
                            waybillLine.Qty - waybillLine.RealQty,
                            UnitOfMeasure::unitOfMeasureIdBySymbol(waybillLine.alcoholProduction().Unit),
                            UnitOfMeasure::unitOfMeasureIdBySymbol(custInvoiceTrans.SalesUnit));

            if (tmpFrmVirtualLines)
            {
                tmpFrmVirtualLines.Qty += returnQty;
                tmpFrmVirtualLines.update();
            }
            else
            {
                tmpFrmVirtualLines.clear();
                tmpFrmVirtualLines.TableNum     = custInvoiceTrans.TableId;
                tmpFrmVirtualLines.RecordNo     = custInvoiceTrans.RecId;
                tmpFrmVirtualLines.Id           = custInvoiceTrans.InvoiceId;
                tmpFrmVirtualLines.LineNum      = custInvoiceTrans.LineNum;
                tmpFrmVirtualLines.TransDate    = custInvoiceTrans.InvoiceDate;
                tmpFrmVirtualLines.Qty          = returnQty;
                tmpFrmVirtualLines.insert();
            }
        }

        contract = SalesOrderCopyingContract::newIsCreditNote(true);

        contract.parmSalesPurchCopy(SalesPurchCopy::CreditNoteHeader);
        contract.parmCallingTableSalesId(salesTable.SalesId);
        contract.parmTmpFrmVirtualLines(tmpFrmVirtualLines);
        contract.parmTmpFrmVirtualHeader(tmpFrmVirtualHeader);
        contract.parmQtyFactor(1);
        contract.parmReverseSign(NoYes::Yes);
        contract.parmCopyPrecisely(NoYes::Yes);
        contract.parmDeleteLines(NoYes::Yes);
        contract.parmCopyExchangeRate(NoYes::Yes);
        contract.parmCustInvoiceJournal(custInvoiceJour);

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesTable</Name>
				<Source><![CDATA[
    private void createSalesTable()
    {
        NumberSeq           num;
        SalesId             tmpSalesId;
        SalesReturnItemNum  tmpSalesReturnItemNum;

        custInvoiceJour = CustInvoiceJour::findRecId(waybillJour.SourceCustInvoiceJour);

        salesTable.clear();
        salesTable.initValue(SalesType::ReturnItem);

        num = NumberSeq::newGetNum(SalesParameters::numRefSalesId());
        tmpSalesId = num.num();

        if (SalesTable::exist(tmpSalesId))
        {
            num.abort();
            checkFailed("@SYS55111");
            checkFailed(strfmt("@SYS55112", tmpSalesId));
            throw error("@SYS23020");
        }

        salesTable.SalesId = tmpSalesId;
        num.used();

        num = NumberSeq::newGetNum(SalesParameters::numRefReturnItemNum());
        tmpSalesReturnItemNum = num.num();

        if (SalesTable::findReturnItemNum(tmpSalesReturnItemNum))
        {
            num.abort();
            checkFailed("@SYS55111");
            checkFailed(strfmt("@SYS55112", tmpSalesReturnItemNum));
            throw error("@SYS23020");
        }

        salesTable.ReturnItemNum = tmpSalesReturnItemNum;
        num.used();

        salesTable.ReturnStatus = ReturnStatusHeader::Created;
        salesTable.CustAccount  = custInvoiceJour.OrderAccount;
        salesTable.initFromCustTable();

        salesTable.InvoiceAccount = custInvoiceJour.InvoiceAccount;
        salesTable.initInvoiceAccount();
        salesTable.LanguageId = custInvoiceJour.LanguageId;

        salesTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase       dialog = super();
        FormStringControl   formStringControlDispositionCodeId;

        dialog.caption("@SYS332907");
        dialog.addText("@SYS332908");
        dialog.addText("@SYS332909");

        fieldReturnDispositionCodeId       = dialog.addField(extendedtypestr(ReturnDispositionCodeId));
        formStringControlDispositionCodeId = fieldReturnDispositionCodeId.control();
        formStringControlDispositionCodeId.registerOverrideMethod(methodstr(FormStringControl, lookup), methodstr(SalesReturnOrderLineRegister, lookupReturnDispositionCode), this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        returnDispositionCodeId = fieldReturnDispositionCodeId.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <c>unpack</c> method returns false, <c>initParmDefault</c> method
    ///    will be called. Normally, this method should not be overridden.
    /// </remarks>
    public void getLast()
    {
        if (this.canSaveLast())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    private void initParameters()
    {
        waybillJour = EGAISWaybillJour_RU::findRecId(waybillJourRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReturnDispositionCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a customized return disposition code drop down list to the dialog.
    /// </summary>
    /// <param name="_ctrl">
    ///     A <c>FormStringControl</c> object.
    /// </param>
    protected void lookupReturnDispositionCode(FormStringControl _ctrl)
    {
        SalesTable::lookupDispositionCodeId('', _ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, waybillJourRecId, returnDispositionCodeId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaybillJourRecId</Name>
				<Source><![CDATA[
    public RefRecId parmWaybillJourRecId(RefRecId _waybillJourRecId = waybillJourRecId)
    {
        waybillJourRecId = _waybillJourRecId;

        return waybillJourRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerSalesLines</Name>
				<Source><![CDATA[
    private void registerSalesLines()
    {
        EGAISSalesReturnOrderLineRegister_RU    lineRegister;
        SalesLine                               salesLine;
        Args                                    args = new Args();
        EGAISWaybillLine_RU                     waybillLine;
        EGAISWaybillSettlement_RU               settlement;
        CustInvoiceTrans                        custInvoiceTrans;

        while select waybillLine
            where waybillLine.WaybillJour == waybillJour.RecId
               && waybillLine.Qty != waybillLine.RealQty
        join InventTransId from settlement
            where settlement.WaybillLine == waybillLine.RecId
        {
            select firstOnly salesLine
                where salesLine.SalesId == salesTable.SalesId
                   && salesLine.ReturnStatus == ReturnStatusLine::Awaiting
                   && salesLine.ExpectedRetQty < 0
            exists join custInvoiceTrans
                where custInvoiceTrans.RecId == salesLine.RefReturnInvoiceTrans_W
                   && custInvoiceTrans.InventTransId == settlement.InventTransId;

            args.record(salesLine);
            lineRegister = EGAISSalesReturnOrderLineRegister_RU::construct();
            lineRegister.parmArgs(args);
            lineRegister.parmReturnDispositionCodeId(returnDispositionCodeId);
            lineRegister.parmWaybillLine(waybillLine);
            lineRegister.init();
            lineRegister.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        SysInfoAction_MenuFunction  sysInfoAction;

        setPrefix(EGAISReturnOrderCreate_RU::description());

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsBegin;

            this.initParameters();
            this.createSalesTable();
            this.createSalesLines();
            this.registerSalesLines();
            this.updateWaybill();

            ttsCommit;

            sysInfoAction = SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(ReturnTableDetails), MenuItemType::Display);
            sysInfoAction.parmCallerBuffer(salesTable);

            info(strFmt("@EGAIS:ReturnOrderHasBeenCreated", salesTable.ReturnItemNum), '', sysInfoAction);

        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the last choice by using the <c>pack</c> method.
    /// </summary>
    /// <remarks>
    ///    This method should not normally be overridden.
    /// </remarks>
    public void saveLast()
    {
        if (this.canSaveLast())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass, 1);

        switch (version)
        {
            case CurrentVersion:
                [version, waybillJourRecId, returnDispositionCodeId] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWaybill</Name>
				<Source><![CDATA[
    private void updateWaybill()
    {
        EGAISWaybillJour_RU waybillJourUpd;

        waybillJourUpd = EGAISWaybillJour_RU::findRecId(waybillJour.RecId, true);
        waybillJourUpd.ReturnOrderSalesId = salesTable.SalesId;
        waybillJourUpd.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (!returnDispositionCodeId)
        {
            ret = checkFailed(strFmt("@GLS103654", "@SYS104049"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static EGAISReturnOrderCreate_RU construct()
    {
        return new EGAISReturnOrderCreate_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the description of the class.
    /// </summary>
    /// <returns>
    ///    The description of the class.
    /// </returns>
    static public ClassDescription description()
    {
        return "@EGAIS:CreateReturnOrderForTheEgaisBol";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EGAISReturnOrderCreate_RU       runClass;
        FormDataSource                  formDataSource;

        if (!_args || _args.dataset() != tableNum(EGAISWaybillJour_RU))
        {
            throw error(strFmt("@SYS25516", EGAISReturnOrderCreate_RU::description()));
        }

        runClass = EGAISReturnOrderCreate_RU::newFromWaybillJour(_args.record());

        if (runClass.prompt())
        {
            runClass.runOperation();

            if (_args && _args.record() && _args.record().isFormDataSource())
            {
                formDataSource = _args.record().dataSource();

                if (formDataSource)
                {
                    formDataSource.research(false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWaybillJour</Name>
				<Source><![CDATA[
    public static EGAISReturnOrderCreate_RU newFromWaybillJour(EGAISWaybillJour_RU  _waybillJour)
    {
        EGAISReturnOrderCreate_RU  runClass = EGAISReturnOrderCreate_RU::construct();

        runClass.parmWaybillJourRecId(_waybillJour.RecId);

        return runClass;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>