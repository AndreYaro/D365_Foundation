<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetAcquisitionDocumentControllerPL</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AssetAcqisitionDocumentControllerPL</c> class is the controller
///     class for the <c>AssetAcquisitionDocumentPL</c> report.
/// </summary>
public class AssetAcquisitionDocumentControllerPL extends SrsReportRunController implements BatchRetryable
{
    AssetTrans assetTransDocument;

    #define.DocumentNumberParameter('DocumentNumber')
    #define.DocumentDateParameter('DocumentDate')
    #define.CompanyAddressParameter('HiddenCompanyAddress')
    #define.CompanyNameParameter('HiddenCompanyName')
    #define.CompanyPhoneParameter('HiddenCompanyPhone')
    #define.SysVersion('SysVersion')
    #define.UserName('UserName')
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00039, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUIBuilderForDataContractInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the UI builder instance to be used with the data contract.
    /// </summary>
    /// <param name="_contractInfo">
    /// A <c>SysOperationDataContractInfo</c> instance.
    /// </param>
    /// <returns>
    /// A <c>SysOperationUIBuilder</c> instance.
    /// </returns>
    /// <remarks>
    /// Since the <c>AssetAcquisitionDocumentPL</c> report is a query based report, this method
    /// is overridden to allow hooking up the custom UI builder class with the report.
    /// </remarks>
    protected SysOperationUIBuilder getUIBuilderForDataContractInfo(SysOperationDataContractInfo _contractInfo)
    {
        SysOperationUIBuilder ret;

        if (_contractInfo is SrsReportRdlDataContractInfo)
        {
            ret = new AssetAcquisitionDocumentUIBuilderPL(dialog, this, _contractInfo.key());
        }
        else
        {
            ret = super(_contractInfo);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        AssetTrans assetTrans;
        Query query;
        QueryBuildDataSource ds;
        QueryBuildRange range;
        SrsReportRdlDataContract contract;
        DocumentDate documentDate;
        DocumentNum documentNumber;

        if (this.parmArgs() == null)
        {
            throw error(Error::missingRecord(tableStr(AssetTrans)));
        }

        assetTrans = this.parmArgs().record() as AssetTrans;
        if (assetTrans == null)
        {
            throw error(Error::missingRecord(tableStr(AssetTrans)));
        }

        if (!AssetTable::exist(assetTrans.AssetId))
        {
            throw error(Error::missingRecord(tableStr(AssetTable)));
        }

        query = this.getFirstQuery();

        ds = query.dataSourceTable(tableNum(AssetTable));
        ds.clearRanges();
        // the AssetId range is duplicated to ensure the best perf
        range = SysQuery::findOrCreateRange(ds, fieldNum(AssetTable, AssetId));
        range.value(SysQuery::value(assetTrans.AssetId));

        ds = query.dataSourceTable(tableNum(AssetBook));
        ds.clearRanges();
        // the AssetId range is duplicated to ensure the best perf
        range = SysQuery::findOrCreateRange(ds, fieldNum(AssetBook, AssetId));
        range.value(SysQuery::value(assetTrans.AssetId));
        range = SysQuery::findOrCreateRange(ds, fieldNum(AssetBook, BookId));
        range.value(SysQuery::value(assetTrans.BookId));

        ds = query.dataSourceTable(tableNum(AssetTrans));
        ds.clearRanges();
        // the AssetId and BookId ranges are duplicated to ensure the best perf
        range = SysQuery::findOrCreateRange(ds, fieldNum(AssetTrans, AssetId));
        range.value(SysQuery::value(assetTrans.AssetId));
        range = SysQuery::findOrCreateRange(ds, fieldNum(AssetTrans, BookId));
        range.value(SysQuery::value(assetTrans.BookId));
        range = SysQuery::findOrCreateRange(ds, fieldNum(AssetTrans, TransType));
        range.value(SysQuery::value(AssetTransType::Acquisition) + ',' + SysQuery::value(AssetTransType::AcquisitionAdj));

        assetTransDocument = AssetTrans::findLastType_W(assetTrans.AssetId, assetTrans.BookId, AssetTransType::Acquisition, maxDate(), true);
        documentDate = assetTransDocument.DocumentDate_W;
        documentNumber = assetTransDocument.DocumentNum_W;

        contract = this.parmReportContract().parmRdlContract() as SrsReportRdlDataContract;
        contract.setValue(#DocumentNumberParameter, documentNumber);
        contract.setValue(#DocumentDateParameter, DateTimeUtil::newDateTime(documentDate, 0));
        contract.setValue(#SysVersion, SysReportRun::sysVersion());
        contract.setValue(#UserName, SysReportRun::userName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        CompanyInfo companyInfo;
        SrsReportRdlDataContract contract;
        DocumentDate documentDate;
        DocumentNum documentNumber;

        super();

        companyInfo = CompanyInfo::find();

        contract = this.parmReportContract().parmRdlContract() as SrsReportRdlDataContract;

        contract.setValue(#CompanyNameParameter, companyInfo.Name);
        contract.setValue(#CompanyAddressParameter, companyInfo.postalAddress().Address);
        contract.setValue(#CompanyPhoneParameter, companyInfo.phone());

        if (assetTransDocument != null)
        {
            documentDate = contract.getValue(#DocumentDateParameter);
            documentNumber = contract.getValue(#DocumentNumberParameter);

            assetTransDocument.updateDocument_W(
                documentNumber,
                documentDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    public boolean showQuerySelectButton(str parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues(str parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        AssetAcquisitionDocumentControllerPL::newForArgs(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a new instance of the <c>AssetAcquisitionDocumentControllerPL</c>
    ///     class with the <c>Args</c> class.
    /// </summary>
    /// <param name="_args">
    ///     The <c>Args</c> class.
    /// </param>
    /// <returns>
    ///     A new instance of the <c>AssetAcquisitionDocumentControllerPL</c> class.
    /// </returns>
    public static AssetAcquisitionDocumentControllerPL newForArgs(Args _args)
    {
        AssetAcquisitionDocumentControllerPL controller = new AssetAcquisitionDocumentControllerPL();
        controller.parmReportName(ssrsReportStr(AssetAcquisitionDocumentPL, Report));
        controller.parmArgs(_args);
        controller.parmDialogCaption("@GLS109579");
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>