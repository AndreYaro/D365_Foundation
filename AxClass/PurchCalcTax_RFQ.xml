<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCalcTax_RFQ</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       PurchCalcTax_RFQ
extends     PurchCalcTax
{
    PurchRFQTotals      purchRFQTotals;
    PurchRFQLineMap     purchRFQLineMap;
    PurchRFQTableMap    purchRFQTableMap;
    PurchRFQUpdate      specQtyRFQ;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets assessable value by including tax into line amount based on the PurchQty, or including Misc Charges based on line amount.
    /// </summary>
    /// <returns>
    ///    The assessable value.
    /// </returns>
    public AmountCur assessableValue_IN()
    {
        AmountCur lineAmount;

        lineAmount = this.transLineAmountInclTax();

        if (lineAmount)
        {
            return purchRFQLineMap.getMiscChargesAmount_IN(lineAmount);
        }
        else
        {
            return lineAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    [Replaceable]
    TaxAmountCur calcTax(TradeTotalsBase _purchRFQTotals)
    {
        TaxCalculation  taxCalculation;
        AmountCur       amountCur;

        purchRFQTotals  = _purchRFQTotals as PurchRFQTotals;
        taxCalculation  = TaxCalculation::newForSourceType(TaxSourceType::PurchaseOrder, this);
        taxCalculation.parmSkipLineMarkup(skipLineMarkup);
        amountCur       = taxCalculation.calculateTax();

        this.tax(taxCalculation);

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return purchRFQTableMap.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    DlvDate deliveryDate()
    {
        return purchRFQLineMap.DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    public DocumentDate documentDate()
    {
        return purchRFQTotals.documentDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    DiscAmount endDisc()
    {
        return purchRFQTableMap.DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    VendExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return ExchangeRateHelper::exchRate(this.currencyCode(), _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return ExchangeRateHelper::exchRateSecond(this.currencyCode(), _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate reportingCurrencyExchangeRate(date _date = dateNull())
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    void  initCursor()
    {
        select nofetch forupdate purchRFQLineMap
            where purchRFQLineMap.rfqId   == purchRFQTableMap.rfqId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether tax is included in the item price for the purchase RFQ document.
    /// </summary>
    /// <returns>
    ///    true if tax is included in item price; otherwise, false.
    /// </returns>
    public boolean isTaxIncluded()
    {
        return purchRFQTableMap.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineEndDisc</Name>
				<Source><![CDATA[
    public boolean lineEndDisc()
    {
        return purchRFQLineMap.endDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    MarkupAmount  markupAmount()
    {
        AmountCur value;

        if (purchRFQLineMap)
        {
            value = this.transLineAmount();
        }
        else
        {
            value = this.orderBalance(this.markupTotalRecId());
        }

        return markupTrans.signedValue(Markup::calcTrans(markupTrans, this.transQty(), value, value, this.invoiceDate()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineEndDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the end discount amount for a line.
    /// </summary>
    /// <param name="_baseAmount">
    /// The base amount for the discount calculation.
    /// </param>
    /// <returns>
    /// The end discount amount.
    /// </returns>
    public DiscAmount lineEndDiscAmount(TaxBaseCur _baseAmount)
    {
        DiscAmount lineEndDisc;

        if (_baseAmount && !lineEndDisc && this.endDisc())
        {
            lineEndDisc = _baseAmount * this.endDisc() / 100;
        }

        return lineEndDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    DimensionDefault markupDefaultDimension()
    {
        if (purchRFQLineMap)
            return purchRFQLineMap.DefaultDimension;
        else
            return purchRFQTableMap.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(Common _purchRFQTable)
    {
        super(_purchRFQTable);

        update = false;
        if (SysDictTable::isTableMapped(tableNum(PurchRFQTableMap), _purchRFQTable.TableId))
            purchRFQTableMap = _purchRFQTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        next purchRFQLineMap;

        this.initCursorMarkupLine(purchRFQLineMap.TableId, purchRFQLineMap.RecId);

        return purchRFQLineMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccount</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount operationAccount()
    {
        LedgerDimensionDefaultAccount   ledgerAccount;
        InventMovement  inventMovement = InventMovement::construct(purchRFQLineMap);

        if (inventMovement.mustBeBookedFinancially())
        {
            if (inventMovement.mustBeBookedBalanceSheet())
                ledgerAccount = inventMovement.accountBalanceSheet();
            else
                if (inventMovement.mustBeBookedOperations())
                    ledgerAccount = inventMovement.accountOperations();
        }

        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccountMarkup</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount operationAccountMarkup()
    {
        LedgerDimensionDefaultAccount ledgerAccount;

        switch (markupTrans.markupTable().CustType)
        {
            case MarkupType::Item           :   if (purchRFQLineMap)
                                                    ledgerAccount = this.operationAccount();
                                                break;
            case MarkupType::LedgerAccount  :   ledgerAccount = markupTrans.markupTable().parmCustomerLedgerDimension(); break;
            case MarkupType::CustVend       :   ledgerAccount = VendLedgerAccounts::summaryLedgerDimension(purchRFQTableMap.VendAccount);
                                                break;
        }
        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPosting</Name>
				<Source><![CDATA[
    LedgerPostingType operationPosting()
    {
        LedgerPostingType   ledgerPostingType;
        InventMovement      inventMovement = InventMovement::construct(purchRFQLineMap);

        if (inventMovement.mustBeBookedFinancially())
        {
            if (inventMovement.mustBeBookedBalanceSheet())
                ledgerPostingType = inventMovement.postingBalanceSheet();
            else
                if (inventMovement.mustBeBookedOperations())
                    ledgerPostingType = inventMovement.postingOperations();
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPostingMarkup</Name>
				<Source><![CDATA[
    LedgerPostingType operationPostingMarkup()
    {
        LedgerPostingType   ledgerPostingType;
        switch (markupTrans.markupTable().CustType)
        {
            case MarkupType::Item           :   if (purchRFQLineMap)
                                                    ledgerPostingType = this.operationPosting();
                                                break;

            case MarkupType::LedgerAccount  :   ledgerPostingType = markupTrans.markupTable().CustPosting;
                                                break;

            case MarkupType::CustVend       :   ledgerPostingType = LedgerPostingType::VendBalance;
                                                break;
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origHeadingRecID</Name>
				<Source><![CDATA[
    RecId origHeadingRecID()
    {
        return purchRFQTableMap.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origHeadingTableID</Name>
				<Source><![CDATA[
    TableId origHeadingTableID()
    {
        return purchRFQTableMap.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchMarkupRecId</Name>
				<Source><![CDATA[
    RecId  purchMarkupRecId()
    {
        return markupTrans.OrigRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchMarkupTableId</Name>
				<Source><![CDATA[
    TableId  purchMarkupTableId()
    {
        return markupTrans.OrigTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSpecQtyRFQ</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void setSpecQtyRFQ(PurchRFQUpdate _specQty)
    {
        specQtyRFQ = _specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCashDiscPercent</Name>
				<Source><![CDATA[
    DiscPct taxCashDiscPercent()
    {
        return purchRFQTotals.taxCashDiscPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault transDefaultDimension()
    {
        return purchRFQLineMap.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transItemId</Name>
				<Source><![CDATA[
    public ItemId transItemId()
    {
        return purchRFQLineMap.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur  transLineAmount()
    {
        return purchRFQLineMap.calcLineAmount(this.transQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur  transLineAmountInclTax()
    {
        return purchRFQLineMap.calcLineAmount(this.transQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPcsPrice</Name>
				<Source><![CDATA[
    PriceCur transPcsPrice()
    {
        return purchRFQLineMap.taxPcsPrice(this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPurchUnit</Name>
				<Source><![CDATA[
    PurchUnit transPurchUnit()
    {
        return purchRFQLineMap.PurchUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    PurchQty transQty()
    {
        return purchRFQLineMap.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRecId</Name>
				<Source><![CDATA[
    RecId transRecId()
    {
        return purchRFQLineMap.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    TableId transTableId()
    {
        return purchRFQLineMap.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    TaxGroup transTaxGroup()
    {
        return purchRFQLineMap.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    TaxItemGroup transTaxItemGroup()
    {
        return purchRFQLineMap.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    InventTransId transTransId()
    {
        return purchRFQLineMap.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return Currency::triangulation(this.currencyCode(), _date);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>