<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBInventJournalCheckPostEventHandler_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FBInventJournalCheckPostEventHandler_BR
{
    public Map mapFinishedGoodLineNum = new Map(Types::String, Types::Real);
    public Map mapBomParmReportFinished = new Map(Types::String, Types::Record);
    public Map mapFBProductionHeaderByPerioRecId = new Map(Types::String, Types::Int64);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFBProductionBOMLineFromBOMJournal</Name>
				<Source><![CDATA[
    private void createFBProductionBOMLineFromBOMJournal(InventJournalTrans _inventJournalTrans, Qty _inventJournalQtyTotal)
    {
        BOMParmReportFinish currentBomParmReportFinish;
        Line finishedGoodLineNum;

        if (mapBomParmReportFinished.exists(_inventJournalTrans.InventTransIdFather))
        {
            currentBomParmReportFinish = mapBomParmReportFinished.lookup(_inventJournalTrans.InventTransIdFather);
        }

        if (mapFinishedGoodLineNum.exists(_inventJournalTrans.InventTransIdFather))
        {
            finishedGoodLineNum = mapFinishedGoodLineNum.lookup(_inventJournalTrans.InventTransIdFather);
        }

        BOM bomLines;
        Qty bomParmFactorQty = 1;
        ScrapConst totalScrapConst;
        Qty totalScrapVarQty;
        Qty totalBOMQty;

        while select bomLines
            where bomLines.BOMId == currentBomParmReportFinish.BOMId &&
                bomLines.ItemId == _inventJournalTrans.ItemId
        {
            totalBOMQty += bomLines.bomQtyFormula(bomParmFactorQty, _inventJournalTrans.ItemId);

            totalScrapConst += bomLines.ScrapConst;
            totalScrapVarQty += (bomLines.ScrapVar / 100) * bomLines.bomQtyFormula(bomParmFactorQty, _inventJournalTrans.ItemId);
        }

        totalBOMQty = totalBOMQty ? totalBOMQty : _inventJournalQtyTotal;

        if (totalBOMQty)
        {
            FBInventJournalCheckPostEventHandler_BR::createFBProductionBOMLine(
                _inventJournalTrans.InventTransIdFather,
                _inventJournalTrans.ItemId,
                _inventJournalTrans.LineNum - finishedGoodLineNum,
                round(100 * totalScrapVarQty / totalBOMQty, 0.00001),
                totalScrapConst,
                round(abs(totalBOMQty) / bomParmFactorQty, 0.0000001));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFBProductionHeaderFromBOMJournal</Name>
				<Source><![CDATA[
    private FBProductionHeader_BR createFBProductionHeaderFromBOMJournal(InventJournalTrans _inventJournalTrans, FiscalEstablishmentId_BR _fiscalEstablishmentId)
    {
        BOMParmReportFinish currentBOMParmReportFinish;

        if (mapBomParmReportFinished.exists(_inventJournalTrans.InventTransId))
        {
            currentBOMParmReportFinish = mapBomParmReportFinished.lookup(_inventJournalTrans.InventTransId);
        }

        return FBInventJournalCheckPostEventHandler_BR::createFBProductionHeader(
            _inventJournalTrans.InventTransId,
            _inventJournalTrans.TransDate,
            _inventJournalTrans.Qty,
            _inventJournalTrans.TransDate,
            _inventJournalTrans.TransDate,
            _fiscalEstablishmentId,
            _inventJournalTrans.ItemId,
            currentBOMParmReportFinish.BOMId,
            currentBOMParmReportFinish.dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFBProductionLineFromBOMJournal</Name>
				<Source><![CDATA[
    private void createFBProductionLineFromBOMJournal(InventJournalTrans _inventJournalTrans, Qty _inventJournalQtyTotal)
    {
        Num productionId = _inventJournalTrans.BOMLine ?
                           _inventJournalTrans.InventTransIdFather :
                           _inventJournalTrans.InventTransId;

        if (mapFBProductionHeaderByPeriorecid.exists(productionId))
        {
            RefRecId currentFBProductionHeaderRecId = mapFBProductionHeaderByPeriorecid.lookup(productionId);

            FBInventJournalCheckPostEventHandler_BR::createFBProductionLine(
            currentFBProductionHeaderRecId,
            _inventJournalTrans.TransDate,
            _inventJournalTrans.ItemId,
            _inventJournalQtyTotal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFBProductionTables</Name>
				<Source><![CDATA[
    private Qty createFBProductionTables(
        InventJournalTrans _inventJournalTrans,
        InventJournalTrans _lastInventJournalTrans,
        FiscalEstablishmentId_BR _lastFiscalEstablishmentId,
        RefRecId _currentFBProductionHeaderRecId,
        Qty _productionLineQtyTotal)
    {
        Qty ret;

        if (!_lastInventJournalTrans
            || (_lastInventJournalTrans.ItemId == _inventJournalTrans.ItemId
                && _lastInventJournalTrans.InventTransId == _inventJournalTrans.InventTransId)
            || (_lastInventJournalTrans.ItemId == _inventJournalTrans.ItemId
                && _lastInventJournalTrans.BOMLine))
        {
            ret = _productionLineQtyTotal;
        }
        else
        {
            if (!_lastInventJournalTrans.BOMLine)
            {
                _currentFBProductionHeaderRecId = this.createFBProductionHeaderFromBOMJournal(_lastInventJournalTrans, _lastFiscalEstablishmentId).RecId;

                mapFBProductionHeaderByPerioRecId.insert(_lastInventJournalTrans.InventTransId, _currentFBProductionHeaderRecId);
            }
            else
            {
                this.createFBProductionBOMLineFromBOMJournal(_lastInventJournalTrans, _productionLineQtyTotal);

                this.createFBProductionLineFromBOMJournal(_lastInventJournalTrans, _productionLineQtyTotal);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromJournalId</Name>
				<Source><![CDATA[
    private void createFromJournalId(JournalId _journalId)
    {
        InventJournalTrans inventJournalTrans;
        InventJournalTrans lastInventJournalTrans;
        FiscalEstablishmentId_BR lastFiscalEstablishmentId;
        RefRecId currentFBProductionHeaderRecId;
        Qty productionLineQtyTotal;
        InventJournalTable inventJournalTable;
        InventDim inventDim;
        FiscalEstablishmentInventSite_BR fiscalEstablishmentInventSite;
        FiscalEstablishment_BR fiscalEstablishment;

        ttsBegin;

        while select TransDate, ItemId, Qty, InventTransId, InventTransIdFather, LineNum, BOMLine, RecId
            from inventJournalTrans
            order by BOMLine, ItemId, TransDate
            where inventJournalTrans.JournalId == _journalId
            outer join RecId from inventDim
                where inventDim.InventDimId == inventJournalTrans.InventDimId
            outer join RecId from fiscalEstablishmentInventSite
                where fiscalEstablishmentInventSite.InventSite == inventDim.InventSiteId
            outer join FiscalEstablishmentId from fiscalEstablishment
                where fiscalEstablishment.RecId == fiscalEstablishmentInventSite.FiscalEstablishment_BR
            exists join inventJournalTable
                where inventJournalTable.JournalId == inventJournalTrans.JournalId &&
                        inventJournalTable.JournalId == _journalId &&
                        inventJournalTable.Posted == NoYes::Yes &&
                        inventJournalTable.JournalType == InventJournalType::BOM
        {
            if (lastInventJournalTrans && !lastFiscalEstablishmentId)
            {
                break;
            }

            productionLineQtyTotal = this.createFBProductionTables(
                inventJournalTrans,
                lastInventJournalTrans,
                lastFiscalEstablishmentId,
                currentFBProductionHeaderRecId,
                productionLineQtyTotal);

            productionLineQtyTotal += abs(inventJournalTrans.Qty);
            lastInventJournalTrans.data(inventJournalTrans.data());

            if (inventJournalTrans.Qty > 0 && !inventJournalTrans.BOMLine)
            {
                BomParmReportFinish bomParmReportFinish;

                select firstonly bomParmReportFinish
                    where bomParmReportFinish.JournalId == _journalId
                        && bomParmReportFinish.ItemId == inventJournalTrans.ItemId
                        && bomParmReportFinish.Qty == inventJournalTrans.Qty;

                mapBomParmReportFinished.insert(inventJournalTrans.InventTransId, bomParmReportFinish);
            }

            if (!inventJournalTrans.BOMLine)
            {
                mapFinishedGoodLineNum.insert(inventJournalTrans.InventTransId, inventJournalTrans.LineNum);
            }

            if (fiscalEstablishment.FiscalEstablishmentId)
            {
                lastFiscalEstablishmentId = fiscalEstablishment.FiscalEstablishmentId;
            }
        }

        if (lastInventJournalTrans && lastFiscalEstablishmentId)
        {
            productionLineQtyTotal = this.createFBProductionTables(
                inventJournalTrans,
                lastInventJournalTrans,
                lastFiscalEstablishmentId,
                currentFBProductionHeaderRecId,
                productionLineQtyTotal);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFBProductionBOMLine</Name>
				<Source><![CDATA[
    private static void createFBProductionBOMLine(Num _productionId, ItemId _itemId, LineNum _lineNum, ScrapVar _scrapVar, ScrapConst _scrapConst, Qty _qty)
    {
        FBProductionBOMLine_BR productionBOMLine;

        ttsBegin;
        productionBOMLine.ProductionId = _productionId;
        productionBOMLine.ItemId = _itemId;
        productionBOMLine.LineNum = _lineNum;
        productionBOMLine.VariableScrap = _scrapVar;
        productionBOMLine.ConstantScrap = _scrapConst;
        productionBOMLine.Qty = _qty;
        
        productionBOMLine.insert();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFBProductionHeader</Name>
				<Source><![CDATA[
    private static FBProductionHeader_BR createFBProductionHeader(Num _productionId, TransDate _transDate, Qty _qty, TransDate _startDate, TransDate _endDate, FiscalEstablishmentId_BR _fiscalEstablishmentId, ItemId _itemId, BomId _bomId, DataAreaId _bomDataArea)
    {
        FBProductionHeader_BR productionHeader;

        ttsBegin;
        productionHeader.ProductionId = _productionId;
        productionHeader.TransDate = _transDate;
        productionHeader.Qty = _qty;
        productionHeader.EndDate = _endDate;
        productionHeader.StartDate = _startDate;
        productionHeader.FiscalEstablishmentId = _fiscalEstablishmentId;
        productionHeader.ItemId = _itemId;
        productionHeader.BOMId = _bomId;
        productionHeader.BOMDataArea = _bomDataArea;
        
        productionHeader.insert();
        ttsCommit;

        return productionHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFBProductionLine</Name>
				<Source><![CDATA[
    private static void createFBProductionLine(RefRecId _fbProductionHeaderRecId, TransDate _transDate, ItemId _itemId, Qty _qty)
    {
        FBProductionLine_BR productionLine;

        ttsBegin;
        productionLine.FBProductionHeader_BR = _fbProductionHeaderRecId;
        productionLine.TransDate = _transDate;
        productionLine.ItemId = _itemId;
        productionLine.Qty = abs(_qty);
       
        productionLine.insert();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFBProductionFromBOMJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Insert and create a fiscal books production based on a BOM jounal.
    /// </summary>
    /// <param name="_journalId">
    ///     A BOM journal indentificaon. It will be used to select the <c>InventJournalTable</c> table record.
    /// </param>
    public static void insertFBProductionFromBOMJournal(JournalId _journalId)
    {
        FBInventJournalCheckPostEventHandler_BR inventJournalCheckPostEventHandler = new FBInventJournalCheckPostEventHandler_BR();
        inventJournalCheckPostEventHandler.createFromJournalId(_journalId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>