<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxArchiveAutomationCriteriaFormInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles form level interaction with process automation framework for tax archiving.
/// </summary>
internal final class TaxArchiveAutomationCriteriaFormInteraction
{
    private TaxArchiveAutomationCriteriaIForm form;
    private TaxArchiveAutomationCriteriaFormState formState;
    private TaxArchiveAutomationCriteria automationCriteria;
    private TaxArchiveAutomationCriteria automationCriteriaExistingSeriesCached;
    private boolean isInitialized;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static TaxArchiveAutomationCriteriaFormInteraction construct(TaxArchiveAutomationCriteriaIForm _form)
    {
        TaxArchiveAutomationCriteriaFormInteraction formInteraction = new TaxArchiveAutomationCriteriaFormInteraction();
        formInteraction.form = _form;
        formInteraction.formState = _form.getFormState();
        return formInteraction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refresh</Name>
				<Source><![CDATA[
    internal void refresh()
    {
        TaxArchiveTransHelper::createOrUpdateData();
        FormDataSource dataSource = form.getTaxArchiveTransDataSource();
        dataSource.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    internal boolean validate()
    {
        boolean isValid = true;
        TaxArchiveTrans selectedTaxArchiveTran = this.getCurrentTaxArchiveTransRecord();
        ProcessScheduleSchedulingContract formStateContract = formState.getProcessScheduleSchedulingContract();

        if (selectedTaxArchiveTran.Status == LedgerArchiveStatus::NotReady ||
            selectedTaxArchiveTran.Status == LedgerArchiveStatus::Archiving ||
            selectedTaxArchiveTran.Status == LedgerArchiveStatus::Complete ||
            selectedTaxArchiveTran.Status == LedgerArchiveStatus::Error)
        {
            // Shows warning if trying to validate an archive transaction with state of NotReady, Archiving, Completed and error.
            isValid = checkFailed("@Tax:TaxArchiveTransNotReadyToBeArchivedError");
        }

        if (isValid && formStateContract.parmIsCreation())
        {
            isValid = isValid && this.validateSeriesDoesNotExistForTaxArchiveTrans(selectedTaxArchiveTran);

            if (isValid)
            {
                automationCriteria.TaxArchiveTrans = selectedTaxArchiveTran.RecId;
            }
        }
        
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    internal void initialize()
    {
        this.validateCriteriaRecordExists();
        this.setUpTaxArchiveTransDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScheduleSeries</Name>
				<Source><![CDATA[
    internal void createScheduleSeries(ProcessScheduleSchedulingContract _schedulingContract)
    {
        this.setScheduleSeries(_schedulingContract.getProcessScheduleSeriesData().getSeriesRecId());
        this.setArchiveTransState();
        this.writeToDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduleSeries</Name>
				<Source><![CDATA[
    internal void updateScheduleSeries()
    {
        this.writeToDataSource(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScheduledOccurrence</Name>
				<Source><![CDATA[
    internal void createScheduledOccurrence(ProcessScheduleSchedulingContract _schedulingContract)
    {
        this.setScheduleOccurrence(_schedulingContract.getProcessScheduleOccurrenceData().getOccurrenceRecId());
        this.writeToDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduledOccurrence</Name>
				<Source><![CDATA[
    internal void updateScheduledOccurrence()
    {
        this.writeToDataSource(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeToDataSource</Name>
				<Source><![CDATA[
    private void writeToDataSource(boolean _forUpdate = false)
    {
        ttsbegin;
        if (_forUpdate)
        {
            automationCriteria.selectForUpdate(true);
        }
        automationCriteria.write();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setScheduleSeries</Name>
				<Source><![CDATA[
    private void setScheduleSeries(RecId _processScheduleSeries)
    {
        automationCriteria.ProcessScheduleSeries = _processScheduleSeries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setScheduleOccurrence</Name>
				<Source><![CDATA[
    private void setScheduleOccurrence(RecId _processScheduleOccurrence)
    {
        automationCriteria.ProcessScheduleOccurrence = _processScheduleOccurrence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpTaxArchiveTransDataSource</Name>
				<Source><![CDATA[
    private void setUpTaxArchiveTransDataSource()
    {
        if (!isInitialized)
        {
            FormDataSource dataSource = form.getTaxArchiveTransDataSource();
            Query query = dataSource.query();
            QueryBuildDataSource ds = query.dataSourceTable(tableNum(TaxArchiveTrans));
            ds.clearRanges();
            ProcessScheduleSchedulingContract formStateContract = formState.getProcessScheduleSchedulingContract();
            if (formStateContract.parmIsCreation() 
                && formStateContract.getProcessScheduleSeriesData().getSeriesRecId() == 0)
            {
                // Shows tax archive transactions with 'Ready' state 
                QueryBuildRange qbr = ds.addRange(fieldNum(TaxArchiveTrans, Status));
                qbr.value(queryValue(LedgerArchiveStatus::Ready));
                qbr.status(RangeStatus::Hidden);
            }
            
            this.registerAutomationCriteriaDataSourceOverrides();
        }
        isInitialized = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerAutomationCriteriaDataSourceOverrides</Name>
				<Source><![CDATA[
    private void registerAutomationCriteriaDataSourceOverrides()
    {
        FormDataSource automationCriteria_ds = form.getTaxArchiveTransDataSource();
        automationCriteria_ds.registerOverrideMethod(
            methodStr(FormDataSource, executeQuery),
            methodStr(TaxArchiveAutomationCriteriaFormInteraction, automationCriteriaDataSourceExecuteQuery),
            this);

        automationCriteria_ds.registerOverrideMethod(
            methodStr(FormDataSource, leaveRecord),
            methodStr(TaxArchiveAutomationCriteriaFormInteraction, automationCriteriaDataSourceLeaveRecord),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>automationCriteriaDataSourceExecuteQuery</Name>
				<Source><![CDATA[
    private void automationCriteriaDataSourceExecuteQuery(FormDataSource _formDataSource)
    {
        ProcessScheduleSchedulingContract formStateContract = formState.getProcessScheduleSchedulingContract();
        TaxArchiveTrans taxArchiveTrans;
        
        // If we are a new record and not modifying an existing record, then create a new record.
        if (formStateContract.parmIsCreation())
        {
            // If we are creating an occurrence record, and it's coming from an already created Series,
            // then we need to hydrate the form controls with values from the series.
            if (formStateContract.getProcessScheduleSeriesOccurrence() == ProcessScheduleSeriesOccurrence::Occurrence
                    && formStateContract.getProcessScheduleSeriesData().getSeriesRecId() != 0)
            {
                this.defaultOccurrenceFromSeries();
                taxArchiveTrans = TaxArchiveTrans::findByRecId(automationCriteria.TaxArchiveTrans);
                this.executeTaxArchiveTransQuery(_formDataSource, taxArchiveTrans);
            }
            else
            {
                _formDataSource.executeQuery();
            }
        }
        else
        {
            if (formStateContract.getProcessScheduleSeriesOccurrence() == ProcessScheduleSeriesOccurrence::Series)
            {
                TaxArchiveAutomationCriteria criteria = this.findAutomationCriteriaRecordForSeries(formStateContract.getProcessScheduleSeriesData());
                taxArchiveTrans = TaxArchiveTrans::findByRecId(criteria.TaxArchiveTrans);
            }
            else
            {
                TaxArchiveAutomationCriteria criteria = this.findAutomationCriteriaRecordForOccurrence(formStateContract.getProcessScheduleOccurrenceData());
                taxArchiveTrans = TaxArchiveTrans::findByRecId(criteria.TaxArchiveTrans);
            }
            this.executeTaxArchiveTransQuery(_formDataSource, taxArchiveTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeTaxArchiveTransQuery</Name>
				<Source><![CDATA[
    private void executeTaxArchiveTransQuery(FormDataSource _formDataSource, TaxArchiveTrans _taxArchiveTrans)
    {
        Query query = _formDataSource.query();
        QueryBuildDataSource ds = query.dataSourceTable(tableNum(TaxArchiveTrans));
        ds.clearRanges();
        QueryBuildRange qbr = ds.addRange(fieldNum(TaxArchiveTrans, RecId));
        qbr.value(int642Str(_taxArchiveTrans.RecId));
        qbr.status(RangeStatus::Hidden);
        _formDataSource.executeQuery();
        _formDataSource.positionToRecord(_taxArchiveTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentTaxArchiveTransRecord</Name>
				<Source><![CDATA[
    private TaxArchiveTrans getCurrentTaxArchiveTransRecord()
    {
        FormDataSource dataSource = form.getTaxArchiveTransDataSource();
        TaxArchiveTrans taxArchiveTrans = dataSource.cursor() as TaxArchiveTrans;
        return taxArchiveTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOccurrenceFromSeries</Name>
				<Source><![CDATA[
    private void defaultOccurrenceFromSeries()
    {
        TaxArchiveAutomationCriteria automationCriteriaExistingSeries = this.findExistingCriteriaFromSeries();

        if (automationCriteriaExistingSeries.RecId != 0)
        {
            automationCriteria.TaxArchiveTrans = automationCriteriaExistingSeries.TaxArchiveTrans;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>automationCriteriaDataSourceLeaveRecord</Name>
				<Source><![CDATA[
    private boolean automationCriteriaDataSourceLeaveRecord(FormDataSource _formDataSource)
    {
        // Return true and do not call super(), so leaving the data source forces a save event to occur.
        // This is deferred to later in order to properly support transactional integrity with the process automation framework.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCriteriaRecordExists</Name>
				<Source><![CDATA[
    private void validateCriteriaRecordExists()
    {
        ProcessScheduleSchedulingContract formStateContract = formState.getProcessScheduleSchedulingContract();
        if (!formStateContract.parmIsCreation())
        {
            if (formStateContract.getProcessScheduleSeriesOccurrence() == ProcessScheduleSeriesOccurrence::Series)
            {
                if (this.findAutomationCriteriaRecordForSeries(formStateContract.getProcessScheduleSeriesData()).RecId == 0)
                {
                    throw error("@Tax:TaxArchiveAutomationCriteriaForSeriesNotFoundError");
                }
            }
            else
            {
                if (this.findAutomationCriteriaRecordForOccurrence(formStateContract.getProcessScheduleOccurrenceData()).RecId == 0)
                {
                    throw error("@Tax:TaxArchiveAutomationCriteriaForOccurrenceNotFoundError");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAutomationCriteriaRecordForSeries</Name>
				<Source><![CDATA[
    private TaxArchiveAutomationCriteria findAutomationCriteriaRecordForSeries(ProcessScheduleSeriesData _processScheduleSeries)
    {
        if (automationCriteria.RecId == 0)
        {
            automationCriteria = TaxArchiveAutomationCriteria::findByScheduleSeries(_processScheduleSeries.getSeriesRecId());
        }

        return automationCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAutomationCriteriaRecordForOccurrence</Name>
				<Source><![CDATA[
    private TaxArchiveAutomationCriteria findAutomationCriteriaRecordForOccurrence(ProcessScheduleOccurrenceData _processScheduleOccurrence)
    {
        if (automationCriteria.RecId == 0)
        {
            automationCriteria = TaxArchiveAutomationCriteria::findByScheduleOccurrence(_processScheduleOccurrence.getOccurrenceRecId());
        }

        return automationCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExistingCriteriaFromSeries</Name>
				<Source><![CDATA[
    private TaxArchiveAutomationCriteria findExistingCriteriaFromSeries()
    {
        ProcessScheduleSchedulingContract initialSchedulingContract = this.formState.getProcessScheduleSchedulingContract();
        if (automationCriteriaExistingSeriesCached.RecId == 0)
        {
            automationCriteriaExistingSeriesCached = TaxArchiveAutomationCriteria::findByScheduleSeries(initialSchedulingContract.getProcessScheduleSeriesData().getSeriesRecId());
        }

        return automationCriteriaExistingSeriesCached;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSeriesDoesNotExistForTaxArchiveTrans</Name>
				<Source><![CDATA[
    private boolean validateSeriesDoesNotExistForTaxArchiveTrans(TaxArchiveTrans _selectedTaxArchiveTrans)
    {
        boolean isValid = true;
        TaxArchiveAutomationCriteria taxArchiveAutomationCriteria;
        ProcessScheduleSeries processScheduleSeries;

        select firstonly TaxArchiveTrans from taxArchiveAutomationCriteria
            where taxArchiveAutomationCriteria.ProcessScheduleSeries != 0
                && taxArchiveAutomationCriteria.TaxArchiveTrans == _selectedTaxArchiveTrans.RecId
             exists join processScheduleSeries
                where processScheduleSeries.RecId == taxArchiveAutomationCriteria.ProcessScheduleSeries
                    && processScheduleSeries.IsEnabled == NoYes::Yes;

        if (taxArchiveAutomationCriteria.TaxArchiveTrans)
        {
            isValid = checkFailed("@Tax:TaxArchiveTransSeriesAlreadyExists");
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setArchiveTransState</Name>
				<Source><![CDATA[
    private void setArchiveTransState()
    {
        TaxArchiveTrans::updateStatusByRecId(this.getCurrentTaxArchiveTransRecord().RecId, LedgerArchiveStatus::Scheduled);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>