<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsGlobal</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class PdsGlobal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pdsIsCWFullVisItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the item is a full visibility catch weight enabled item.
    /// </summary>
    /// <param name="_itemId">
    /// the item to check
    /// </param>
    /// <returns>
    /// true, if the item is catch weight enabled, that the serial dimension is active and the serial dimension has the serial control active;
    /// false otherwise
    /// </returns>
    public static boolean pdsIsCWFullVisItem(ItemId _itemId)
    {
        if (!PdsGlobal::pdsIsCWItem(_itemId))
        {
            return false;
        }

        InventDimGroupFieldSetup             inventDimGroupFieldSetup;
        EcoResTrackingDimensionGroupFldSetup dimSetup;

        dimSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(
                        InventTable::find(_itemId).trackingDimensionGroup(),
                        fieldNum(InventDim, InventSerialId));
        inventDimGroupFieldSetup = InventDimGroupFieldSetup::newEcoResTrackingDimensionGroupFldSetup(dimSetup);

        return inventDimGroupFieldSetup.isActive()
            && inventDimGroupFieldSetup.isPhysicalInventoryEnabled()
            && (inventDimGroupFieldSetup.isSerialNumberControlEnabled() == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsIsCWItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the item is a catch weight enabled item
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item to check.
    /// </param>
    /// <returns>
    /// true, if the item is catch weight enabled; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The function always returns false, if the configuration key for the
    /// catch weight functionality is turned off, or no item ID is provided.
    /// </remarks>
    public static boolean pdsIsCWItem(ItemId _itemId)
    {
        if (_itemId)
        {
            return PdsCatchWeightItemCache::isCatchWeightItem(_itemId);
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsIsPositive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if a numeric value is greater than 0
    /// </summary>
    /// <param name="_value">
    /// The value to check
    /// </param>
    /// <returns>
    /// true if the value is positive (greater than 0)
    /// false otherwise
    /// </returns>
    public static boolean pdsIsPositive(real _value)
    {
        return _value > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsShowCustomHelp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show custom HTML help for Process enhanced forms when there is application documentation.
    /// </summary>
    /// <param name="_form">Running form or dialog.</param>
    /// <param name="_taskId">Task id value passed to task method</param>
    /// <returns>true if this method displayed custom help; false otherwise.</returns>
    /// <remarks>
    /// This method should be used in cases where the standard form ignores the form
    /// help properties because there is an Application Documentation node for the
    /// class, menu item, or report. Note that help for reports always exist in an
    /// Application Documentation node.
    ///
    /// To provide the custom help file and topic, this method will look for
    /// a special method in the caller: pdsHtmlHelp.
    ///
    /// public container pdsHtmlHelp()
    /// {
    ///     #define.PmfHelpFile('PMFHelp')
    ///     #define.MyFormHelpTopc('PMF.chm://html/myhelptopic.html')
    ///     ;
    ///
    ///     return [#PmfHelpFile, #MyFormHelpTopic];
    /// }
    ///
    /// The pdsHtmlHelp method must return a container with two element. Element
    /// 1 is the help file, element 2 is the help topic. This method may return
    /// a container with a differing number of elements, such as connull(), to
    /// signify that there is no applicable custom help.
    ///
    /// For reports, you may add the method to the report object. For dialog started
    /// from a class (standard dialog forms based on Dialog), add the method to the class.
    /// For other forms, in addition to adding the pdsHtmlForm method to the form, you
    /// will need to override the task method and call pdsShowCustomHelp(this, _taskId).
    /// In this case, do not call super() if pdsShowCustomHelp returns true otherwise
    /// two different help pages will be shown.
    /// </remarks>
    public static boolean pdsShowCustomHelp(FormRun _form, int _taskId)
    {
        #define.PdsFormHelpOverride('pdsHtmlHelp')

        #define.RequiredContainerElements (2)

        #define.ClassMethodPath('\\Classes\\%1\\%2')

        #Task

        Object              caller;
        boolean             isDialog;
        DictClass           dictClass;
        RunbaseReportStd    reportRunStd;
        str                 reportName;
        str                 path;

        boolean showHelp(Object _obj)
        {
            container           helpInfo;
            str                 helpFile;
            str                 helpTopic;

            helpInfo = _obj.pdsHtmlHelp();
            if (conLen(helpInfo) == #RequiredContainerElements)
            {
                [helpFile, helpTopic] = helpInfo;
                HelpDocumentManager::showHelpTopic(helpTopic);
                return true;
            }

            return false;
        }

        if (_taskId == #taskF1)
        {
            if (formHasMethod(_form, #PdsFormHelpOverride) && showHelp(_form))
            {
                return true;
            }

            if (_form.args())
            {
                caller = _form.args().caller();
            }

            if (caller && typeOf(caller) == Types::Class)
            {
                if (Dialog::isDialogClass(caller))
                {
                    caller   = caller.caller();
                    isDialog = true;
                }

                if (isDialog && classIdGet(caller) == classNum(RunbaseReportStd))
                {
                    reportRunStd = caller;
                    reportName   = reportRunStd.lastValueElementName();
                    if (SysReportRun::hasMethod(reportName, #PdsFormHelpOverride))
                    {
                        return showHelp(reportRunStd.reportRun());
                    }
                }

                // check for help override method on the caller and search
                // the inheritance hierarchy
                dictClass = new DictClass(classIdGet(caller));
                do
                {
                    path = strFmt(#ClassMethodPath, dictClass.name(),
                        #PdsFormHelpOverride);
                    if (TreeNode::findNode(path))
                    {
                        return showHelp(caller);
                    }

                    // Keep looking up the class hierarchy
                    dictClass = new DictClass(dictClass.extend());
                }
                while (dictClass);
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>