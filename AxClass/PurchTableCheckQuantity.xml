<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableCheckQuantity</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchTableCheckQuantity</c> class checks whether purchase order lines exist, which enable
/// that a specified document can be posted.
/// </summary>
class PurchTableCheckQuantity
{
    boolean         allowCaching;
    PurchTable      purchTable;
    PurchLine       purchLineQuery;

    List            purchLineList;
    ListEnumerator  purchLineListEnumerator;
    boolean         isEnumeratingPurchLineCache;
    boolean         isPurchLineQueryFinished;
    private Set     fastCheckQuantityResultSet;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a specified quantity for a purchase order line.
    /// </summary>
    /// <param name="_purchQuantity">
    /// The <c>PurchQuantity</c> object that is used to calculate the quantity.
    /// </param>
    /// <param name="_purchLine">
    /// The <c>PurchLine</c> buffer for which the quantity is calculated.
    /// </param>
    /// <param name="_specQty">
    /// The quantity to be calculated.
    /// </param>
    /// <returns>
    /// A calculated quantity.
    /// </returns>
    protected PurchQty calculateQuantity(PurchQuantity _purchQuantity, PurchLine _purchLine, PurchUpdate _specQty)
    {
        return _purchQuantity.calcPurchQty(_purchLine, _specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified document can be posted by iterating the purchase order lines for the
    /// specified purchase order.
    /// </summary>
    /// <param name="_documentStatus">
    /// A <c>DocumentStatus</c> enumeration value that specifies the status of the document to be posted.
    /// </param>
    /// <param name="_excludePending">
    /// An Boolean value that indicates whether pending documents are to be excluded from the check.
    /// </param>
    /// <returns>
    /// true if the document can be posted; otherwise, false.
    /// </returns>
    public boolean  checkQuantity(DocumentStatus  _documentStatus, boolean _excludePending)
    {
        boolean         ok = false;
        PurchQuantity   purchQuantity;
        PurchLine       purchLine;
        // <GEERU>
        #ISOCountryRegionCodes
        boolean         isRussiaEnabled = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        purchQuantity = this.constructPurchQuantity(_documentStatus, _excludePending);

        // Check if we have any received now qty firstly if the purchase order is in packingslip status
        if (this.canUseFastCheckQuantity(_documentStatus)             
            && purchQuantity.canRunFastCheckQuantity())           
        {
            if (!fastCheckQuantityResultSet)
            {
                fastCheckQuantityResultSet = new Set(Types::Integer);
            }

            if (fastCheckQuantityResultSet.empty())
            {
                ok = this.checkReceivedNowQuantity();
                fastCheckQuantityResultSet.add(ok);
                return ok;
            }

            SetEnumerator se = fastCheckQuantityResultSet.getEnumerator();
            while (se.moveNext())
            {
                return se.current();
            }           
        }     

        this.resetPurchLineEnumeration();

        while (this.moveNextPurchLine())
        {
            purchLine = this.currentPurchLine();

            if (this.calculateQuantity(purchQuantity, purchLine, PurchUpdate::All))
            {
                ok = true;
                break;
            }

            if (this.calculateQuantity(purchQuantity, purchLine, PurchUpdate::ReceiveNow))
            {
                ok = true;
                break;
            }

            // <GEERU>
            // for DocumentStatus::PackingSlip only
            if (isRussiaEnabled && purchQuantity.deviationQty_RU(purchLine))
            {
                ok = true;
                break;
            }
            // </GEERU>
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPurchQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the <c>PurchQuantity</c> class based on the specified document.
    /// </summary>
    /// <param name="_documentStatus">
    /// The document for which the <c>PurchQuantity</c> object should be instantiated.
    /// </param>
    /// <param name="_excludePending">
    /// An Boolean value that specifies whether pending documents are to be excluded from the check.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PurchQuantity</c> class.
    /// </returns>
    protected PurchQuantity constructPurchQuantity(DocumentStatus _documentStatus, boolean _excludePending)
    {
        return PurchQuantity::construct(_documentStatus, _excludePending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentFromCache</Name>
				<Source><![CDATA[
    private PurchLine currentFromCache()
    {
        return purchLineListEnumerator.current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentFromTable</Name>
				<Source><![CDATA[
    private PurchLine currentFromTable()
    {
        return purchLineQuery.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentPurchLine</Name>
				<Source><![CDATA[
    private PurchLine currentPurchLine()
    {
        if (isEnumeratingPurchLineCache)
        {
            return this.currentFromCache();
        }

        return this.currentFromTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateCaching</Name>
				<Source><![CDATA[
    private void initiateCaching()
    {
        if (this.parmAllowCaching())
        {
            purchLineList = new List(Types::Record);
        }
        isEnumeratingPurchLineCache = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateSelectFromCache</Name>
				<Source><![CDATA[
    private void initiateSelectFromCache()
    {
        purchLineListEnumerator = purchLineList.getEnumerator();
        isEnumeratingPurchLineCache = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateSelectFromTable</Name>
				<Source><![CDATA[
    private void initiateSelectFromTable()
    {
        this.selectPurchLineNoFetch();

        isPurchLineQueryFinished = false;

        this.initiateCaching();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNextFromCache</Name>
				<Source><![CDATA[
     private boolean moveNextFromCache()
    {
        boolean moveNext;
        moveNext = purchLineListEnumerator.moveNext();
        if (!moveNext)
        {
            isEnumeratingPurchLineCache = false;
        }
        return moveNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNextFromTable</Name>
				<Source><![CDATA[
     private boolean moveNextFromTable()
    {
        boolean moveNext;

        next purchLineQuery;
        moveNext = purchLineQuery.RecId != 0;
        if (moveNext)
        {
            if (this.parmAllowCaching())
            {
                purchLineList.addEnd(purchLineQuery);
            }
        }
        else
        {
            isPurchLineQueryFinished = true;
        }
        return moveNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNextPurchLine</Name>
				<Source><![CDATA[
    private boolean moveNextPurchLine()
    {
        boolean foundNext = false;

        if (isEnumeratingPurchLineCache)
        {
            foundNext = this.moveNextFromCache();
        }
        if (!foundNext && !isPurchLineQueryFinished)
        {
            foundNext = this.moveNextFromTable();
        }

        return foundNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSelectFromTable</Name>
				<Source><![CDATA[
    private boolean mustSelectFromTable()
    {
        return !purchLineList || !this.parmAllowCaching();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowCaching</Name>
				<Source><![CDATA[
    public boolean parmAllowCaching(boolean _allowCaching = allowCaching)
    {
        allowCaching = _allowCaching;

        return allowCaching;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTable</Name>
				<Source><![CDATA[
    protected PurchTable parmPurchTable(PurchTable _purchTable = purchTable)
    {
        purchTable = _purchTable;

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPurchLineEnumeration</Name>
				<Source><![CDATA[
    private void resetPurchLineEnumeration()
    {
        if (this.mustSelectFromTable())
        {
            this.initiateSelectFromTable();
        }
        else
        {
            this.initiateSelectFromCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPurchLineNoFetch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the selection of the purchase order lines.
    /// </summary>
    /// <remarks>
    /// The purchase order lines are a selection with the nofetch keyword. Therefore, the lines will not be
    /// retrieved in this method.
    /// </remarks>
    protected void selectPurchLineNoFetch()
    {
        select nofetch purchLineQuery
            where purchLineQuery.PurchId     == purchTable.PurchId
                && !purchLineQuery.IsDeleted
                && ((purchLineQuery.PurchStatus != PurchStatus::Invoiced && purchLineQuery.PurchStatus != PurchStatus::Canceled)
                    || (purchLineQuery.PurchReceivedNow != 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static PurchTableCheckQuantity construct()
    {
        return new PurchTableCheckQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>PurchTableCheckQuantity</c> class.
    /// </summary>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> buffer for which the instance is created.
    /// </param>
    /// <returns>
    /// An instance of the <c>PurchTableCheckQuantity</c> class.
    /// </returns>
    public static PurchTableCheckQuantity newFromPurchTable(PurchTable _purchTable)
    {
        PurchTableCheckQuantity     purchTableCheckQuantity;
        purchTableCheckQuantity = PurchTableCheckQuantity::construct();
        purchTableCheckQuantity.parmPurchTable(_purchTable);

        return purchTableCheckQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReceivedNowQuantity</Name>
				<Source><![CDATA[
    private boolean checkReceivedNowQuantity()
    {
        PurchLine purchLine;
        select firstonly RecId from purchLine
            where purchLine.PurchId == purchTable.PurchId
               && !purchLine.IsDeleted
               && purchLine.PurchReceivedNow != 0;

        return purchLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseFastCheckQuantity</Name>
				<Source><![CDATA[
    private boolean canUseFastCheckQuantity(DocumentStatus _documentStatus)
    {
        if (_documentStatus == DocumentStatus::PackingSlip &&
            purchTable.PurchStatus == PurchStatus::Received)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>