<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesConfirmDatesUIStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesConfirmDatesUIStrategy</c> class implements logic to set confirmed dates for a <c>SalesDeliveryDateControlMap</c> map.
/// </summary>
/// <remarks>
/// This class can open a dialog in order to let the user pick specific confirmed dates.
/// </remarks>
class SalesConfirmDatesUIStrategy extends SalesConfirmDatesStrategy
{
    UnknownNoYes    foundKanbanRuleWithCTP;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSetConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether confirmed dates can be set.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates might
    /// be set.
    /// </param>
    /// <returns>
    /// true if confirmed dates can be set; otherwise, false.
    /// </returns>
    protected boolean canSetConfirmedDates(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        return   earliestShippingDate <= _salesDeliveryDateControlMapCaller.ShippingDateRequested
              && earliestReceiptDate  <= _salesDeliveryDateControlMapCaller.ReceiptDateRequested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleConflict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements logic to handle a conflict regarding the confirmed dates.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates could
    /// not be set or the confirmed dates conflict with other dates.
    /// </param>
    protected void handleConflict(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        if (FormDataUtil::isFormDataSource(_salesDeliveryDateControlMapCaller))
        {
            salesCalcAvailableDlvDates.parmShowTransferToConfirmedButton(true);
            salesCalcAvailableDlvDates.parmShowTransferToRequestedButton(true);
            salesCalcAvailableDlvDates.parmShowDialog(true);
            salesCalcAvailableDlvDates.parmEnableShowDialog(true);
            salesCalcAvailableDlvDates.parmShowDisableDlvDateControlButton(MpsDeliveryDateControlTypeCTPHelper::isDeliveryDateControlTypeClassicCTP(_salesDeliveryDateControlMapCaller.DeliveryDateControlType));

            // set the earliest dates as the best guess -> cursor will be placed at this date.
            salesCalcAvailableDlvDates.parmReceiptDateBestGuess(earliestReceiptDate);
            salesCalcAvailableDlvDates.parmShippingDateBestGuess(earliestShippingDate);

            salesCalcAvailableDlvDates.errorTextHandling(strFmt("@SCM:RequestedShipDateNotPossible",_salesDeliveryDateControlMapCaller.ShippingDateRequested),Exception::Warning);
            salesCalcAvailableDlvDates.validateWritePrompt(_salesDeliveryDateControlMapCaller,true,true,true,false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanRuleWithCTPApplies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a kanban rule applies for the specified <c>SalesDeliveryDateControlMap</c> map.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates must be
    /// set.
    /// </param>
    /// <returns>
    /// true if a event kanban rule applies; otherwise, false.
    /// </returns>
    protected boolean kanbanRuleWithCTPApplies(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        if (this.init(_salesDeliveryDateControlMapCaller))
        {
            if (   isConfigurationkeyEnabled(configurationKeyNum(LeanManufacturing))
                && foundKanbanRuleWithCTP == UnknownNoYes::Unknown
                && inventMovement
                && inventMovement.transType() == InventTransType::Sales)
            {
                // look for sales event kanban rules with KanbanSalesLineEventType::AutomaticWithCTP
                KanbanFindRulesEvent kanbanFindRulesEvent = KanbanFindRulesEvent::newStandard(inventMovement.itemId(),
                                                                                              inventMovement.transQty()* inventMovement.transSign(),
                                                                                              KanbanEventType::SalesLine,
                                                                                              false,
                                                                                              false,
                                                                                              true,
                                                                                              DateTimeUtil::getSystemDateTime(),
                                                                                              inventMovement.inventDimId());
                KanbanRule kanbanRule = kanbanFindRulesEvent.first();

                while (kanbanRule.RecId)
                {
                    KanbanRuleEvent kanbanRuleEvent = KanbanRuleEvent::findKanbanRule(kanbanRule.RecId);
                    if (   kanbanRuleEvent.RecId
                        && kanbanRuleEvent.SalesLineEvent == KanbanSalesLineEventType::AutomaticWithCTP)
                    {
                        foundKanbanRuleWithCTP = UnknownNoYes::Yes;
                        break;
                    }
                    kanbanRule = kanbanFindRulesEvent.next();
                }

                // confirmed dates must be set according to marking if a event kanban rule with CTP exists
                salesCalcAvailableDlvDates.parmForceCalcToUseMarking(foundKanbanRuleWithCTP == UnknownNoYes::Yes);

                if (foundKanbanRuleWithCTP == UnknownNoYes::Unknown)
                {
                    foundKanbanRuleWithCTP = UnknownNoYes::No;
                }
            }
        }

        return foundKanbanRuleWithCTP == UnknownNoYes::Yes ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the confirmed dates must be set.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates must be
    /// set.
    /// </param>
    /// <returns>
    /// true if the confirmed dates must be set; otherwise, false.
    /// </returns>
    public boolean mustSetConfirmedDates(SalesDeliveryDateControlMap  _salesDeliveryDateControlMapCaller)
    {
        return    MpsDeliveryDateControlTypeCTPHelper::isDeliveryDateControlTypeClassicCTP(_salesDeliveryDateControlMapCaller.DeliveryDateControlType)
               || (   _salesDeliveryDateControlMapCaller.DeliveryDateControlType != SalesDeliveryDateControlType::None
                   && this.kanbanRuleWithCTPApplies(_salesDeliveryDateControlMapCaller));
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCachedVariables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets cached variables.
    /// </summary>
    protected void resetCachedVariables()
    {
        super();

        foundKanbanRuleWithCTP = UnknownNoYes::Unknown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SalesConfirmDatesUIStrategy</c> class.
    /// </summary>
    /// <returns>
    /// A <c>SalesConfirmDatesUIStrategy</c> object.
    /// </returns>
    public static SalesConfirmDatesUIStrategy construct()
    {
        return new SalesConfirmDatesUIStrategy();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>