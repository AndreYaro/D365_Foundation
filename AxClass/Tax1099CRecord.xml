<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099CRecord</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Also known as the End Of Payer record, contains total counts of payees and amounts for each payer. Is associated with exactly one A-Record
/// </summary>
public class Tax1099CRecord extends Tax1099ElectronicBodyRecord
{
    private const Tax1099ERecordType recordType_C = 'C'; /* End of Payer */

    int numberOfBRecordsForType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new C-Record with the necessary pieces of information
    /// </summary>
    /// <param name = "_numberOfBRecords">The number of B-Records that belong to this payer</param>
    /// <param name = "_currentType">The type of 1099 being produced (EX: 1099-MISC)</param>
    /// <returns>A new C-Record</returns>
    public static Tax1099CRecord construct(int _numberOfBRecords, Tax1099Type _currentType)
    {
        return new Tax1099CRecord(_numberOfBRecords, _currentType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(int _numberOfBRecords, Tax1099Type _currentType)
    {
        super(_currentType);

        this.parmStartIndexForAmounts(16);
        this.parmLengthOfAmounts(18);

        numberOfBRecordsForType = _numberOfBRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the 750 character long C-Record for use in electronic 1099 file
    /// </summary>
    /// <param name = "_realSequenceNumber">The line in which this record will appear in the file</param>
    /// <param name = "_calendarYear">The calendar year to which this file will belong</param>
    /// <param name = "_isCombinedFiling">Whether combined State/Federal filing is to be used for this file</param>
    /// <param name = "_localIRSPayerRec">Table buffer containing transaction information (Optional argument)</param>
    /// <returns>A Tax1099ERecord embodying a formatted, 750 character string</returns>
    public Tax1099ERecord generateRecord(real _realSequenceNumber, Tax1099CalendarYear _calendarYear, boolean _isCombinedFiling, Tax1099IRSPayerRec _localIRSPayerRec = null)
    {
        // End of Payer "C" Record
        // The "C" record consists of the total number of payees and the totals of the payment amount
        // fields for each payer and/or particular type of return
        this.fillOutputRecord();

        // Record Type: Required. Enter C. Field Position: 1
        this.strInsert(recordType_C, 1);

        // Number of Payees. Field Position: 2-9
        this.strInsert(num2Str0(numberOfBRecordsForType, 8, 0, 0, 0), 2);

        // Blank. Field Position: 10-15

        select sum(Amount1), sum(Amount2), sum(Amount3), sum(Amount4), sum(Amount5), sum(Amount6),
               sum(Amount7), sum(Amount8), sum(Amount9), sum(AmountA), sum(AmountB), sum(AmountC),
               sum(AmountD), sum(AmountE), sum(AmountF), sum(AmountG),
               sum(Section897OrdinaryDividends), sum(Section897CapitalGain)
        from _localIRSPayerRec
            where _localIRSPayerRec.Tax1099Type == currentTax1099Type;

        if (_localIRSPayerRec)
        {
            Tax1099AmountCollection amounts = Tax1099AmountCollection::construct(_localIRSPayerRec);
            container gatheredAmounts = amounts.getAmounts();

            int startIndex;
            for (int i = 1; i <= conLen(gatheredAmounts); i++)
            {
                startIndex = startIndexForAmounts + (lengthOfAmounts * (i - 1));
                this.strInsert(this.formatIRSAmount(conPeek(gatheredAmounts, i), lengthOfAmounts), startIndex);
            }
        }

        // Blank. Field Position: 340-499

        // Record Sequence Number. Field Position: 500-507
        this.strInsert(num2Str0(_realSequenceNumber, 8, 0, 0, 0), 500);

        return output;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>