<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormLetterInstrumentationLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FormLetterInstrumentationLogger</c> class provides activity contexts for form letter instrumentation logging.
/// </summary>
internal abstract class FormLetterInstrumentationLogger
{
    private SysInstrumentationLogger instrumentationLogger;
    private FormLetterParmDataInstrumentationActivities formLetterParmDataActivities;
    private SalesFormLetterParmDataInstrumentationActivities salesFormLetterParmDataActivities;
    private PurchFormLetterParmDataInstrumentationActivities purchFormLetterParmDataActivities;
    private FormLetterParmDataBatchInstrumentationActivities formLetterParmDataBatchActivities;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(str _name)
    {
        instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(_name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityContext</Name>
				<Source><![CDATA[
    final internal SysInstrumentationActivityContext activityContext(str _activityName)
    {
        return instrumentationLogger.activityContext(_activityName, this.instrumentationNamespace());
    }

]]></Source>
			</Method>
			<Method>
				<Name>activity</Name>
				<Source><![CDATA[
    final internal SysInstrumentationActivity activity(str _activityName)
    {
        return SysInstrumentationActivity::construct(_activityName, this.instrumentationNamespace());
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityContextWithCustomProperties</Name>
				<Source><![CDATA[
    final internal SysInstrumentationActivityContext activityContextWithCustomProperties(SysInstrumentationActivity _activity)
    {
        return instrumentationLogger.activityContextWithCustomProperties(_activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInformation</Name>
				<Source><![CDATA[
    internal void logInformation(str _message)
    {
        instrumentationLogger.logInformation(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationNamespace</Name>
				<Source><![CDATA[
    protected abstract str instrumentationNamespace()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLoggerByType</Name>
				<Source><![CDATA[
    internal static FormLetterInstrumentationLogger createLoggerByType(FormletterType _formLetterType, ClassName _className)
    {
        switch (_formLetterType)
        {
            case FormletterType::Sales:
                return SalesFormLetterInstrumentationLogger::createLogger(_className);

            case FormletterType::Purchase:
                return PurchFormLetterInstrumentationLogger::createLogger(_className);

            case FormletterType::Consignment:
                return ConsignmentReplenishmentOrderFormLetterInstrumentationLogger::createLogger(_className);

            case FormletterType::Project:
                return ProjFormLetterInstrumentationLogger::createLogger(_className);

            case FormletterType::PurchRFQ:
                return PurchRFQFormLetterInstrumentationLogger::createLogger(_className);

            default:
                return FormLetterCustomInstrumentationLogger::createLogger(_className);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterParmDataActivities</Name>
				<Source><![CDATA[
    internal FormLetterParmDataInstrumentationActivities formLetterParmDataActivities()
    {
        if (!formLetterParmDataActivities)
        {
            formLetterParmDataActivities = FormLetterParmDataInstrumentationActivities::newFromLogger(this);
        }

        return formLetterParmDataActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterParmDataBatchActivities</Name>
				<Source><![CDATA[
    internal FormLetterParmDataBatchInstrumentationActivities formLetterParmDataBatchActivities()
    {
        if (!formLetterParmDataBatchActivities)
        {
            formLetterParmDataBatchActivities = FormLetterParmDataBatchInstrumentationActivities::newFromLogger(this);
        }

        return formLetterParmDataBatchActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesFormLetterParmDataActivities</Name>
				<Source><![CDATA[
    internal SalesFormLetterParmDataInstrumentationActivities salesFormLetterParmDataActivities()
    {
        if (!salesFormLetterParmDataActivities)
        {
            salesFormLetterParmDataActivities = SalesFormLetterParmDataInstrumentationActivities::newFromLogger(this);
        }

        return salesFormLetterParmDataActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchFormLetterParmDataActivities</Name>
				<Source><![CDATA[
    internal PurchFormLetterParmDataInstrumentationActivities purchFormLetterParmDataActivities()
    {
        if (!purchFormLetterParmDataActivities)
        {
            purchFormLetterParmDataActivities = PurchFormLetterParmDataInstrumentationActivities::newFromLogger(this);
        }

        return purchFormLetterParmDataActivities;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>