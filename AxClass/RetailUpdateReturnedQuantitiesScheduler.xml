<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailUpdateReturnedQuantitiesScheduler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.String;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

internal class RetailUpdateReturnedQuantitiesScheduler extends RunBaseBatch implements BatchRetryable
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@RetailReturn:UpdateReturnQuantitiesBatchCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RecId batchJobId = this.parmCurrentBatch().BatchJobId;
        int countTransactionsTried = -1;
        int countTransactionsSuccess = -1;

        try
        {
            eventSource.EventWriteRetailUpdateReturnedQuantitiesBatchJobStart(batchJobId);

            [countTransactionsTried, countTransactionsSuccess] = this.updateReturnedQuantities();
        }
        finally
        {
            eventSource.EventWriteRetailUpdateReturnedQuantitiesBatchJobEnd(batchJobId, countTransactionsTried, countTransactionsSuccess);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReturnedQuantities</Name>
				<Source><![CDATA[
    private container updateReturnedQuantities()
    {
        System.Exception ex;
        RecId batchJobId = this.parmCurrentBatch().BatchJobId;
        int countTransactionsTried = -1;
        int countTransactionsSuccess = -1;

        RetailTransactionSalesTrans retailTransactionSalesTrans;

        while select forupdate returnTransactionId, returnLineNum, returnStore, returnTerminalId, transDate, transTime, qty, Channel, ReturnTrackingStatus
            from retailTransactionSalesTrans
            where retailTransactionSalesTrans.ReturnTrackingStatus == RetailReturnTrackingStatusType::PendingProcessing
        {
            try
            {
                ttsbegin;

                countTransactionsTried++;

                RetailStoreTable returnStoreTable = RetailStoreTable::find(retailTransactionSalesTrans.returnStore);
                RetailChannelTableExt returnChannelTableExt = RetailChannelTableExt::find(returnStoreTable.RecId);
                RetailChannelTableExt transactionChannelTableExt = RetailChannelTableExt::find(retailTransactionSalesTrans.Channel);

                boolean isReturnInOriginalChannelDB =
                    returnChannelTableExt.LiveChannelDatabase == transactionChannelTableExt.LiveChannelDatabase;

                utcdatetime returnTime = DateTimeUtil::newDateTime(
                        retailTransactionSalesTrans.transDate,
                        retailTransactionSalesTrans.transTime,
                        RetailChannelTable::findByRecId(retailTransactionSalesTrans.Channel).ChannelTimeZone);

                RetailReturnedQuantities retailReturnedQuantities = RetailReturnedQuantities::find(
                    retailTransactionSalesTrans.returnTransactionId,
                    retailTransactionSalesTrans.returnLineNum,
                    retailTransactionSalesTrans.returnStore,
                    retailTransactionSalesTrans.returnTerminalId,
                    returnStoreTable.RecId,
                    true);

                if (!retailReturnedQuantities.RecId)
                {
                    retailReturnedQuantities.initFrom(retailTransactionSalesTrans);

                    if (isReturnInOriginalChannelDB)
                    {
                        retailReturnedQuantities.LastReturnProcessedTime = returnTime;
                    }
                    else
                    {
                        retailReturnedQuantities.LastReturnProcessedTime = DateTimeUtil::minValue();
                    }
                    
                    retailReturnedQuantities.insert();
                }
                else
                {
                    retailReturnedQuantities.ReturnedQty =
                        retailReturnedQuantities.ReturnedQty + retailTransactionSalesTrans.qty;

                    if (isReturnInOriginalChannelDB && returnTime > retailReturnedQuantities.LastReturnProcessedTime)
                    {
                        retailReturnedQuantities.LastReturnProcessedTime = returnTime;
                    }

                    retailReturnedQuantities.update();
                }

                retailTransactionSalesTrans.ReturnTrackingStatus = RetailReturnTrackingStatusType::Processed;
                retailTransactionSalesTrans.update();

                countTransactionsSuccess++;

                ttscommit;
            }
            catch (ex)
            {
                eventSource.EventWriteRetailUpdateReturnedQuantitiesError(
                    retailTransactionSalesTrans.RecId,
                    batchJobId,
                    ex.ToString(),
                    ex.StackTrace);
            }
        }
        return [countTransactionsTried, countTransactionsSuccess];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailUpdateReturnedQuantitiesScheduler controller = new RetailUpdateReturnedQuantitiesScheduler();

        if (controller.prompt())
        {
            controller.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether batch task should retry in case of transient errors.
    /// </summary>
    /// <returns>true if task should be retried; otherwise, false.</returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>