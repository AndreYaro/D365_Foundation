<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAutoCreate_InventJournalOwnershipChange</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchAutoCreate_InventJournalOwnershipChange</c> class is used when creating purchase orders as part of an inventory ownership change journal posting.
/// </summary>
public class PurchAutoCreate_InventJournalOwnershipChange extends PurchAutoCreate
{
    PurchCreateFromInventJournalOwnershipChange purchCreateFromInventJournalOwnershipChange;
    VendAccount vendorAccountNumber;
    InventJournalOwnershipChangePurchaseOrderLineCollection lineCollection;
    InventJournalOwnershipChangePurchaseOrderLine currentLine;
    List createdPurchaseOrderNumbers;
    InventJournalTable ownershipChangeJournalHeader;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates purchase order header and lines.
    /// </summary>
    public void create()
    {
        InventJournalOwnershipChangePurchaseOrderCollection purchaseOrderCollection = purchCreateFromInventJournalOwnershipChange.getPurchaseOrders();

        ownershipChangeJournalHeader = purchCreateFromInventJournalOwnershipChange.getJournalHeader();

        purchaseOrderCollection.initializeEnumerator();

        while (purchaseOrderCollection.moveNext())
        {
            InventJournalOwnershipChangePurchaseOrder purchaseOrder = purchaseOrderCollection.currentPurchaseOrder();

            vendorAccountNumber = purchaseOrder.parmVendorAccountNumber();
            accountingDate = purchaseOrder.parmAccountingDate();
            lineCollection = purchaseOrder.getOwnershipChangeLines();

            super();
        }

        this.completePurchaseOrderCreation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates purchase order lines.
    /// </summary>
    protected void createLines()
    {
        lineCollection.initializeEnumerator();
        while (lineCollection.moveNext())
        {
            currentLine = lineCollection.currentOwnershipChangeLine();
            using (var activityContext = this.instrumentationLogger().purchOrderLineCreationActivities().createPurchLineFromOwnershipChange())
            {
                this.setPurchLine();

                this.createPurchLine();

                this.createInventoryTransactionLink();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a purchase order line.
    /// </summary>
    public void createPurchLine()
    {
        if (!currentLine)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        this.initPurchLine();

        purchLine.createLine(NoYes::Yes,
                                NoYes::No,
                                NoYes::No,
                                NoYes::No,
                                NoYes::Yes,
                                NoYes::No
                            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchLine</Name>
				<Source><![CDATA[
    public void initPurchLine()
    {
        purchLine.clear();

        purchLine.initFromPurchTable(purchTable);

        purchLine.PurchaseOrderLineCreationMethod = PurchPurchaseOrderCreationMethod::Consignment;
        purchLine.ItemId = currentLine.parmItemId();

        purchLine.initFromInventTable(purchLine.inventTable());
        purchLine.OverDeliveryPct = 0;
        purchLine.UnderDeliveryPct = 0;
        purchLine.setInventDimId(currentLine.parmInventDimId());
        purchLine.QtyOrdered = currentLine.parmInventoryQuantity();
        purchLine.PurchQty = purchLine.unitConvertInvent2Purch(purchLine.QtyOrdered);
        purchLine.DeliveryDate = currentLine.parmJournalDate();
        purchLine.Requester = currentLine.parmWorkerReference();
        purchLine.DefaultDimension = purchLine.mergeDimension(currentLine.parmDefaultLedgerDimension());
        purchLine.initFromVendExternalItemDescription();
        purchLine.initBarcode();
        
        if (purchLine.ItemId)
        {
            setprefix(#PreFixField(PurchLine,ItemId));
        }

        var purchaseLineInventoryQuatity = purchLine.unitConvertPurch2Invent(purchLine.PurchQty);

        if (purchaseLineInventoryQuatity != currentLine.parmInventoryQuantity())
        {
            checkFailed("@Consignment:MessageNotification_PurchaseOrderCannotBeCreated");

            throw error(strfmt("@Consignment:MessageValidation_InventoryOwnershipChangeQuantityMismatch", purchLine.ItemId, purchLine.PurchUnit, currentLine.parmInventoryQuantity(), purchaseLineInventoryQuatity));
        }

        var inventDim = purchLine.inventDim();
        purchLine.setAddressFromInventDim(inventDim);
        purchLine.setPriceAgreement(inventDim, true);
        purchLine.LineAmount = purchLine.calcLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a purchase order header.
    /// </summary>
    public void createPurchTable()
    {
        super();

        createdPurchaseOrderNumbers.addEnd(purchTable.PurchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirms a purchase order.
    /// </summary>
    /// <param name = "_purchTable">The purchase order being confirmed.</param>
    private void confirmPurchaseOrder(PurchTable _purchTable)
    {
        Map                        purchOrderMap    = new Map(Types::Int64, Types::Record);
        PurchFormLetter_PurchOrder purchFormLetter  = PurchFormLetter_PurchOrder::newPurchOrder();

        purchOrderMap.insert(_purchTable.RecId, _purchTable);

        purchFormLetter.purchTable(_purchTable);
        purchFormLetter.parmDataSourceRecordsPacked(purchOrderMap.pack());
        purchFormLetter.chooseLines();

        purchFormLetter.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProductReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a product receipt.
    /// </summary>
    /// <param name = "_purchTable">The purchase order for which to post a product receipt.</param>
    /// <returns>Product receipt number.</returns>
    private PurchInternalPackingSlipId postProductReceipt(PurchTable _purchTable)
    {
        PurchFormLetter_PackingSlip purchFormLetter = PurchFormLetter_PackingSlip::newPackingSlip();
        PurchInternalPackingSlipId  productRecieptNumber = NumberSeq::newGetNum(PurchParameters::numRefInventOwnershipChangeJournalProductReceipt()).num();

        purchFormLetter = this.initPurchFormLetterParams(purchFormLetter, _purchTable, productRecieptNumber);
        purchFormLetter.runOperation();

        return productRecieptNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchFormLetterParams</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes parameters for instance of <c>PurchFormLetter_PackingSlip</c> class.
    /// </summary>
    /// <param name = "_purchFormLetter">The instance of <c>PurchFormLetter_PackingSlip</c> class.</param>
    /// <param name = "_purchTable"The purchase order for which to post a product receipt.></param>
    /// <param name = "_productRecieptNumber">Product receipt number.</param>
    /// <returns>Updated <c>PurchFormLetter_PackingSlip</c> class instance.</returns>
    protected PurchFormLetter_PackingSlip initPurchFormLetterParams(PurchFormLetter_PackingSlip _purchFormLetter, PurchTable _purchTable, PurchInternalPackingSlipId _productRecieptNumber)
    {   
        Map purchOrderMap = new Map(Types::Int64, Types::Record);
        purchOrderMap.insert(_purchTable.RecId, _purchTable);

        _purchFormLetter.purchTable(_purchTable);
        _purchFormLetter.parmDataSourceRecordsPacked(purchOrderMap.pack());
        _purchFormLetter.parmId('');
        _purchFormLetter.purchParmUpdate(null);
        _purchFormLetter.chooseLines();
        _purchFormLetter.updatePurchParmTableNum(_productRecieptNumber);

        return _purchFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventoryTransactionLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates link between inventory transaction for the inventory ownership change journal, purchase order and product receipt.
    /// </summary>
    private void createInventoryTransactionLink()
    {
        if (currentLine)
        {
            SetEnumerator ownershipChangeJournalLines = lineCollection.getOwnershipChangeJournalLines(currentLine);

            while (ownershipChangeJournalLines.moveNext())
            {
                InventTransOriginOwnershipChangeJournalTransPurchLineLink inventTransOriginOwnershipChangeJournalTransPurchLineLink;

                inventTransOriginOwnershipChangeJournalTransPurchLineLink.OwnershipChangeJournalLine = InventTransOriginJournalTrans::findInventTransOriginId(ownershipChangeJournalHeader.DataAreaId, ownershipChangeJournalHeader.JournalId, ownershipChangeJournalLines.current());
                inventTransOriginOwnershipChangeJournalTransPurchLineLink.PurchaseOrderLine = InventTransOriginPurchLine::findInventTransOriginId(purchLine.DataAreaId, purchLine.InventTransId);
                inventTransOriginOwnershipChangeJournalTransPurchLineLink.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>completePurchaseOrderCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Completes the purchase order creation.
    /// </summary>
    /// <remarks>The purchase order will be confirmed and product receipt posted.</remarks>
    private void completePurchaseOrderCreation()
    {
        ListEnumerator createdPurchaseOrderNumbersEnumerator = createdPurchaseOrderNumbers.getEnumerator();

        while (createdPurchaseOrderNumbersEnumerator.moveNext())
        {
            PurchTable createdPurchaseOrder = PurchTable::find(createdPurchaseOrderNumbersEnumerator.current());

            if (createdPurchaseOrder)
            {
                this.confirmPurchaseOrder(createdPurchaseOrder);

                createdPurchaseOrder.reread();

                this.postProductReceipt(createdPurchaseOrder);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor account used for invoicing.
    /// </summary>
    /// <returns>The vendor account used for invoicing.</returns>
    public VendInvoiceAccount invoiceAccount()
    {
        return vendTable.InvoiceAccount  ? vendTable.InvoiceAccount
                                         : vendTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        TmpPurchLinePrice                              _tmpPurchLinePrice,
        PurchCreateFromInventJournalOwnershipChange    _purchCreateFromInventJournalOwnershipChange = null)
    {
        super(_tmpPurchLinePrice, _purchCreateFromInventJournalOwnershipChange);
        purchCreateFromInventJournalOwnershipChange = _purchCreateFromInventJournalOwnershipChange;
        createdPurchaseOrderNumbers = new List(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of purchase order.
    /// </summary>
    /// <returns>The type of purchase order.</returns>
    public PurchaseType purchType()
    {
        return PurchaseType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and validates the purchase order header.
    /// </summary>
    public void setPurchTable()
    {
        super();

        purchTable.ChangeRequestRequired = NoYes::No;
        purchTable.PurchaseOrderHeaderCreationMethod = PurchPurchaseOrderCreationMethod::Consignment;
        purchTable.AccountingDate = accountingDate;
        purchTable.DeliveryDate = accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the vendor.
    /// </summary>
    public void setVend()
    {
        if (vendorAccountNumber)
        {
            vendTable = VendTable::find(vendorAccountNumber);
        }

        if (!vendTable)
        {
            checkFailed(strFmt("@SYS17184", vendorAccountNumber));
            throw error("@SYS23020");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>PurchAutoCreate_InventJournalOwnershipChange</c> class.
    /// </summary>
    /// <param name = "_journal">An instance of the <c>PurchCreateFromInventJournalOwnershipChange</c> class.</param>
    /// <returns>An instance of the <c>PurchAutoCreate_InventJournalOwnershipChange</c> class.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PurchAutoCreate_InventJournalOwnershipChange newFromJournal(PurchCreateFromInventJournalOwnershipChange _journal)
    {
        return new PurchAutoCreate_InventJournalOwnershipChange(null, _journal);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>