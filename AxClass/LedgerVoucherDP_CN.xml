<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVoucherDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerVoucherDP_CN</c> class is the Report Data Provider class for the<c>LedgerVoucherReport_CN</c> Overview Report.
/// </summary>
/// <remarks>
/// This is the RDP class for the <c>LedgerVoucherReport_CN</c> SRS Report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(LedgerVoucherContract_CN))
]
class LedgerVoucherDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    LedgerVoucherTmp_CN      ledgerVoucherReportTmp;
    LedgerVoucherContract_CN contract;

    boolean                     isPrintFromJournalLine;
    Range                       voucherNum;
    FromDate                    fromDate;
    ToDate                      toDate;
    LedgerJournalId             journalNum;
    MaximumLength               maxLines;
    PrePrintLevel               prePrintLevel;
    LedgerVoucherTypeId_CN      voucherType;
    CurrentOperationsTax        postingLayer;

    private static LabelType labelPostBy = SysLabel::labelId2String2(literalStr("@ChineseLedgerVoucher:Postedby"));
    private static LabelType labelAttachments = SysLabel::labelId2String2(literalStr("@SYS73813"));
    private static LabelType labelPage = SysLabel::labelId2String2(literalStr("@SYS7426"));
    private static LabelType labelDash = SysLabel::labelId2String2(literalStr("@SYS77038"));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerVoucherReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>LedgerAccountAnalysisByDimension</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>LedgerAccountAnalysisByDimension</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(LedgerVoucherTmp_CN))]
    public LedgerVoucherTmp_CN getLedgerVoucherReportTmp()
    {
        return ledgerVoucherReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParametersFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes parameters from contract
    /// </summary>
    protected void initParametersFromContract()
    {
        //Initializes contract class
        contract = this.parmDataContract();
        isPrintFromJournalLine      = contract.parmIsPrintFromJournalLine();
        voucherNum                  = contract.parmVoucherNumber();
        fromDate                    = contract.parmFromDate();
        toDate                      = contract.parmToDate();
        journalNum                  = contract.parmJournalNumber();
        maxLines                    = contract.parmMaxLines();
        prePrintLevel               = contract.parmPrePrintLevel();
        voucherType                 = contract.parmVoucherType();
        postingLayer                = contract.parmPostingLayer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the tmp table from base on report caller.
    /// </summary>
    protected void initTmpTable()
    {
        if (isPrintFromJournalLine)
        {
            this.initTmpTableFromLedgerJournalTrans(journalNum, voucherNum);
        }
        else
        {
            this.initTmpTableFromVoucherTrans(voucherNum, fromDate, toDate);
        }

        select firstonly RecId from ledgerVoucherReportTmp;
        if (ledgerVoucherReportTmp)
        {
            this.processPageBreak();
        }
        else
        {
            ledgerVoucherReportTmp.VoucherTypeName  = LedgerVoucherType_CN::findByNaturalKey(voucherType).Description;
            //Posted by:
            ledgerVoucherReportTmp.PostedBy         = labelPostBy;
            ledgerVoucherReportTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpTableFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the tmp table from ledger journal trans
    /// </summary>
    /// <param name="_journalNum">
    /// Journal number
    /// </param>
    /// <param name="_voucherNum">
    /// Chinese Voucher number
    /// </param>
    protected void initTmpTableFromLedgerJournalTrans(LedgerJournalId _journalNum, Range _voucherNum)
    {
        LedgerJournalTrans      ledgerJournalTrans;
        LedgerJournalTable      ledgerJournalTable;

        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    qbds;

        Map     existRecord = new Map(Types::String, Types::Class);
        Set     dateSet = new Set(Types::Date);

        query = new Query(queryStr(LedgerVoucherLedgerJournalTrans_CN));
        qbds = query.dataSourceTable(tableNum(LedgerJournalTrans));
        qbds.addGroupByField(fieldNum(LedgerJournalTrans, Voucher_CN));
        qbds.addGroupByField(fieldNum(LedgerJournalTrans, TransDate));
        SysQuery::findOrCreateRange(qbds, fieldNum(LedgerJournalTrans, LedgerVoucherType_CN)).value(queryValue(LedgerVoucherType_CN::findByNaturalKey(voucherType).RecId));
        SysQuery::findOrCreateRange(qbds, fieldNum(LedgerJournalTrans, JournalNum)).value(_journalNum);
        SysQuery::findOrCreateRange(qbds, fieldNum(LedgerJournalTrans, Voucher_CN)).value(_voucherNum);
        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            ledgerVoucherReportTmp.clear();
            ledgerJournalTrans  = queryRun.get(tableNum(LedgerJournalTrans));
            ledgerJournalTable  = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);
            if (ledgerJournalTable.Posted)
            {
                this.initTmpTableFromVoucherTrans(ledgerJournalTrans.Voucher_CN, ledgerJournalTrans.TransDate, ledgerJournalTrans.TransDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpTableFromVoucherTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the tmp table from ledger journal trans
    /// </summary>
    /// <param name="_voucherNum">
    /// Chinese voucher number
    /// </param>
    /// <param name="_fromDate">
    /// From date
    /// </param>
    /// <param name="_toDate">
    /// To date
    /// </param>
    protected void initTmpTableFromVoucherTrans(Range _voucherNum, FromDate _fromDate, ToDate _toDate)
    {
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        GeneralJournalEntry         generalJournalEntry;
        GeneralJournalEntry_W       generalJournalEntryW;
        LedgerEntryJournal          ledgerEntryJournal;

        LedgerAccountUtility_CN     ledgerAccountUtility = new LedgerAccountUtility_CN();

        Query                       query;
        QueryRun                    queryRun;
        QueryBuildDataSource        qbds;

        query = new Query(queryStr(LedgerVoucherGeneralJournalEntry_CN));
        qbds = query.dataSourceTable(tableNum(GeneralJournalEntry));
        SysQuery::findOrCreateRange(qbds, fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));
        SysQuery::findOrCreateRange(qbds, fieldNum(GeneralJournalEntry, AccountingDate)).value(queryRange(_fromDate, _toDate));
        SysQuery::findOrCreateRange(qbds, fieldNum(GeneralJournalEntry, PostingLayer)).value(queryValue(postingLayer));
        qbds = query.dataSourceTable(tableNum(GeneralJournalEntry_W));
        SysQuery::findOrCreateRange(qbds, fieldNum(GeneralJournalEntry_W, LedgerVoucherType_CN)).value(queryValue(LedgerVoucherType_CN::findByNaturalKey(voucherType).RecId));
        SysQuery::findOrCreateRange(qbds, fieldNum(GeneralJournalEntry_W, Voucher_CN)).value(_voucherNum);

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            ledgerVoucherReportTmp.clear();
            generalJournalAccountEntry  = queryRun.get(tableNum(GeneralJournalAccountEntry));
            generalJournalEntry         = queryRun.get(tableNum(GeneralJournalEntry));
            generalJournalEntryW        = queryRun.get(tableNum(GeneralJournalEntry_W)) as GeneralJournalEntry_W;

            ledgerEntryJournal = LedgerEntryJournal::find(generalJournalEntry.LedgerEntryJournal);

            LedgerVoucherDP_CN::insertDataToTmpTable(
                ledgerEntryJournal.JournalNumber,
                generalJournalEntry, generalJournalEntryW,
                generalJournalAccountEntry, ledgerVoucherReportTmp,
                contract.parmIsPrintLedgerDimension(),
                contract.parmDimensionDisplayLayout());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPageBreak</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the page break base on the maxlines and update the page number for tmp table.
    /// </summary>
    protected void processPageBreak()
    {
        #define.DecimalNum(2)
        #define.DefaultMaxLines(5)
        int         voucherPageNum = 1;
        int         voucherLineNum = 1;
        int         voucherAddNum;
        int         voucherAddLineNum = 1;
        int         middleRecordNum;
        boolean     firstLine = true;

        Voucher_CN              voucherNumLast;
        TransDate               transDateLast;
        Counter                 attachmentLast;
        AmountMST               voucherAmountSum;
        LedgerVoucherTmp_CN     ledgerVoucherReportTmpLocal;

        if (prePrintLevel == PrePrintLevel::PrePrinted)
        {
            maxLines = #DefaultMaxLines;
        }
        middleRecordNum = maxLines div 2;

        this.takeOwnershipOfTempTable(ledgerVoucherReportTmpLocal);
        ledgerVoucherReportTmpLocal.linkPhysicalTableInstance(ledgerVoucherReportTmp);
        ledgerVoucherReportTmpLocal.skipTTSCheck(true);

        while select forUpdate ledgerVoucherReportTmpLocal
            order by VoucherNum, TransDate, ParentAccountName
        {
            if ((ledgerVoucherReportTmpLocal.VoucherNum == voucherNumLast && ledgerVoucherReportTmpLocal.TransDate == transDateLast) || firstLine)
            {
                if (voucherLineNum > maxLines)
                {
                    voucherPageNum++;
                    voucherLineNum = 1;
                }
            }
            else
            {
                voucherAddNum = maxLines - voucherLineNum + 1;
                ledgerVoucherReportTmp.clear();
                while (voucherAddLineNum <= voucherAddNum)
                {
                    ledgerVoucherReportTmp.VoucherNum       = voucherNumLast;
                    ledgerVoucherReportTmp.TransDate        = transDateLast;
                    ledgerVoucherReportTmp.PageNo           = voucherPageNum;
                    ledgerVoucherReportTmp.LineNumber       = voucherLineNum;
                    ledgerVoucherReportTmp.insert();
                    voucherAddLineNum ++;
                    voucherLineNum++;
                }
                voucherAddLineNum = 1;
                update_recordset ledgerVoucherReportTmp
                    setting AmountMSTTotal  = voucherAmountSum,
                            TotalPageNo     = voucherPageNum,
                            TotalAmountStr  = Global_CN::numeralsToTxt(voucherAmountSum, NoYes::No, NoYes::Yes, (strLen(num2str(voucherAmountSum, 1, 0, 1, 0)) + 1 + #DecimalNum))
                        where ledgerVoucherReportTmp.VoucherNum == voucherNumLast
                            && ledgerVoucherReportTmp.TransDate == transDateLast;
                if (prePrintLevel == PrePrintLevel::BlankPaper)
                {
                    update_recordset ledgerVoucherReportTmp
                        // Attachments
                        setting Attachments = labelAttachments
                            where ledgerVoucherReportTmp.LineNumber == middleRecordNum
                                && ledgerVoucherReportTmp.VoucherNum == voucherNumLast;
                    update_recordset ledgerVoucherReportTmp
                        // n Page
                        setting Attachments = int2str(attachmentLast) + ' ' + labelPage
                            where ledgerVoucherReportTmp.LineNumber == middleRecordNum + 1
                                && ledgerVoucherReportTmp.VoucherNum == voucherNumLast;
                }
                else
                {
                    update_recordset ledgerVoucherReportTmp
                        setting Attachments = int2str(attachmentLast)
                            where ledgerVoucherReportTmp.LineNumber == middleRecordNum + 1
                                && ledgerVoucherReportTmp.VoucherNum == voucherNumLast;
                }

                voucherAmountSum    = 0;
                voucherPageNum      = 1;
                voucherLineNum      = 1;
            }

            ledgerVoucherReportTmpLocal.PageNo          = voucherPageNum;
            ledgerVoucherReportTmpLocal.LineNumber      = voucherLineNum;
            ledgerVoucherReportTmpLocal.update();

            voucherLineNum++;
            firstLine = false;
            voucherNumLast      = ledgerVoucherReportTmpLocal.VoucherNum;
            transDateLast       = ledgerVoucherReportTmpLocal.TransDate;
            attachmentLast      = ledgerVoucherReportTmpLocal.AttachmentsNum;
            voucherAmountSum    += ledgerVoucherReportTmpLocal.AmountMSTDebit;
        }
        voucherAddNum = maxLines - voucherLineNum + 1;
        while (voucherAddLineNum <= voucherAddNum)
        {
            ledgerVoucherReportTmpLocal.VoucherNum      = voucherNumLast;
            ledgerVoucherReportTmpLocal.TransDate       = transDateLast;
            ledgerVoucherReportTmpLocal.PageNo          = voucherPageNum;
            ledgerVoucherReportTmpLocal.LineNumber      = voucherLineNum;
            ledgerVoucherReportTmpLocal.insert();
            voucherAddLineNum ++;
            voucherLineNum++;
        }
        update_recordset ledgerVoucherReportTmp
            setting AmountMSTTotal  = voucherAmountSum,
                    TotalPageNo     = voucherPageNum,
                    TotalAmountStr  = Global_CN::numeralsToTxt(voucherAmountSum, NoYes::No, NoYes::Yes, (strLen(num2str(voucherAmountSum, 1, 0, 1, 0)) + 1 + #DecimalNum))
                where ledgerVoucherReportTmp.VoucherNum == voucherNumLast
                    && ledgerVoucherReportTmp.TransDate == transDateLast;
        if (prePrintLevel == PrePrintLevel::BlankPaper)
        {
            update_recordset ledgerVoucherReportTmp
                // Attachments
                setting Attachments = labelAttachments
                    where ledgerVoucherReportTmp.LineNumber == middleRecordNum
                        && ledgerVoucherReportTmp.VoucherNum == voucherNumLast;
            update_recordset ledgerVoucherReportTmp
                // n Page
                setting Attachments = int2str(attachmentLast) + ' ' + labelPage
                    where ledgerVoucherReportTmp.LineNumber == middleRecordNum + 1
                        && ledgerVoucherReportTmp.VoucherNum == voucherNumLast;
        }
        else
        {
            update_recordset ledgerVoucherReportTmp
                setting Attachments = int2str(attachmentLast)
                    where ledgerVoucherReportTmp.LineNumber == middleRecordNum + 1
                        && ledgerVoucherReportTmp.VoucherNum == voucherNumLast;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        SRSReportRunPermission  runReport;
        this.initParametersFromContract();
        if (contract.parmLedgerVoucherReportTmpPhysicalTableName())
        {
            LedgerVoucherTmp_CN ledgerVoucherReportTmpLocal;
            ledgerVoucherReportTmpLocal.useExistingTempDBTable(contract.parmLedgerVoucherReportTmpPhysicalTableName());
            while select ledgerVoucherReportTmpLocal
            {
                ledgerVoucherReportTmp.clear();
                ledgerVoucherReportTmp.data(ledgerVoucherReportTmpLocal);
                ledgerVoucherReportTmp.insert();
            }
            delete_from ledgerVoucherReportTmpLocal;
        }
        contract.parmLedgerVoucherReportTmpPhysicalTableName('');
        this.initTmpTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataToTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>LedgerVoucherTmp_CN</c> table.
    /// </summary>
    /// <param name="_journalNum">
    /// The journal batch number.
    /// </param>
    /// <param name="_generalJournalEntry">
    /// The <c>GeneralJournalEntry</c> table.
    /// </param>
    /// <param name="_generalJournalEntryW">
    /// The <c>GeneralJournalEntry_W</c> table.
    /// </param>
    /// <param name="_generalJournalAccountEntry">
    /// The <c>GeneralJournalAccountEntry</c> table.
    /// </param>
    /// <param name="_ledgerVoucherTmp">
    /// The <c>LedgerVoucherTmp_CN</c> table.
    /// </param>
    public static void insertDataToTmpTable(
        LedgerJournalId             _journalNum,
        GeneralJournalEntry         _generalJournalEntry,
        GeneralJournalEntry_W       _generalJournalEntryW,
        GeneralJournalAccountEntry  _generalJournalAccountEntry,
        LedgerVoucherTmp_CN         _ledgerVoucherTmp,
        boolean                     _printLedgerDimension = false,
        DimensionDisplayLayout_CN   _dimensionDisplayLayout = DimensionDisplayLayout_CN::ValueAndName)
    {
        List                        parentAccountList;
        ListIterator                lstIterator;
        RecId                       chartOfAccounts;
        MainAccount                 mainAccount;
        RecId                       parentAccountRecId;
        MainAccount                 parentAccount;
        LedgerAccountUtility_CN     ledgerAccountUtility;
        LedgerJournalTable          ledgerJournalTable;

        parentAccountList       = new List(Types::String);
        ledgerAccountUtility    = new LedgerAccountUtility_CN();

        chartOfAccounts  = LedgerChartOfAccounts::current();

        mainAccount = MainAccount::findByLedgerDimension(_generalJournalAccountEntry.LedgerDimension);
        parentAccountList = ledgerAccountUtility.getAllParentRecIds(mainAccount.MainAccountId, chartOfAccounts);

        lstIterator = new ListIterator(parentAccountList);
        if (lstIterator.more())
        {
            parentAccountRecId = lstIterator.value();
            parentAccount = MainAccount::find(parentAccountRecId);
        }
        else
        {
            parentAccount = mainAccount;
        }

        _ledgerVoucherTmp.TransactionTxt     = _generalJournalAccountEntry.Text;
        // Parent account num - Parent account name
        _ledgerVoucherTmp.ParentAccountName  = parentAccount.MainAccountId + labelDash + parentAccount.localizedName();
        // Parent account num - Parent account name
        _ledgerVoucherTmp.SubAccountName     = mainAccount.MainAccountId + labelDash + mainAccount.localizedName();

        if (_printLedgerDimension)
        {
            _ledgerVoucherTmp.SubAccountName += LedgerVoucherDP_CN::getDimensionValueByDimensionLayout(
                _generalJournalAccountEntry.LedgerDimension,
                _dimensionDisplayLayout);
        }

        _ledgerVoucherTmp.AmountCur          = _generalJournalAccountEntry.TransactionCurrencyAmount;
        _ledgerVoucherTmp.CurrencyCode       = _generalJournalAccountEntry.TransactionCurrencyCode;

        if (_generalJournalAccountEntry.TransactionCurrencyAmount != 0 && _generalJournalAccountEntry.AccountingCurrencyAmount != 0)
        {
            _ledgerVoucherTmp.ExchRate       = (_generalJournalAccountEntry.AccountingCurrencyAmount / _generalJournalAccountEntry.TransactionCurrencyAmount) * 100;
        }
        else if (_generalJournalAccountEntry.TransactionCurrencyCode)
        {
            _ledgerVoucherTmp.ExchRate       = ExchangeRateHelper::exchRate(_generalJournalAccountEntry.TransactionCurrencyCode, _generalJournalEntry.AccountingDate);
        }
        else
        {
            _ledgerVoucherTmp.ExchRate = 0;
        }

        if (_generalJournalAccountEntry.IsCredit)
        {
            _ledgerVoucherTmp.AmountMSTCredit = _generalJournalAccountEntry.AccountingCurrencyAmount;
        }
        else
        {
            _ledgerVoucherTmp.AmountMSTDebit = _generalJournalAccountEntry.AccountingCurrencyAmount;
        }

        ledgerJournalTable = LedgerJournalTable::find(_journalNum);
        _ledgerVoucherTmp.CheckedBy          = DirPerson::find(HcmWorker::find(ledgerJournalTable.Approver).Person).Name;
        _ledgerVoucherTmp.PreparedBy         = DirPerson::find(DirPersonUser::find(ledgerJournalTable.ReportedAsReadyBy).PersonParty).Name;
        // Posted by:
        _ledgerVoucherTmp.PostedBy           = labelPostBy + ' ' + DirPerson::find(DirPersonUser::find(_generalJournalEntry.CreatedBy).PersonParty).Name;
        _ledgerVoucherTmp.TransDate          = _generalJournalEntry.AccountingDate;
        _ledgerVoucherTmp.VoucherTypeName    = LedgerVoucherType_CN::find(_generalJournalEntryW.LedgerVoucherType_CN).Description;
        _ledgerVoucherTmp.VoucherNum         = _generalJournalEntryW.Voucher_CN;
        _ledgerVoucherTmp.AttachmentsNum     = LedgerJournalTrans::find(
            ledgerJournalTable.JournalNum,
            SubledgerVoucherGeneralJournalEntry::findByGeneralJournalEntry(_generalJournalEntry).Voucher,
            false).Attachments_CN;
        _ledgerVoucherTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValueByDimensionLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets dimension based on the specified the ledger dimension and dimension display layout.
    /// </summary>
    /// <param name = "_ledgerDimension">The ledger dimension that used in the voucher transaction</param>
    /// <param name = "_dimensionDisplayLayout">The dimension display layout based which the dimensions will be printed</param>
    /// <returns>The dimension after formated.</returns>
    private static DimensionDisplayValue getDimensionValueByDimensionLayout(
        LedgerDimensionAccount      _ledgerDimension,
        DimensionDisplayLayout_CN   _dimensionDisplayLayout)
    {
        DimensionDisplayValue dimensionDisplayValueByLayout;

        DimensionAttributeValueCombination dimensionCombination = DimensionAttributeValueCombination::find(_ledgerDimension);
        DimensionHierarchyLevelCollection dimensionHierarchyLevelCollection = DimensionHierarchyLevelCollection::newForHierarchy(dimensionCombination.AccountStructure);

        str delimiter = DimensionParameters::getDimensionSegmentDelimiter();

        dimensionHierarchyLevelCollection.initializeEnumerator();

        while (dimensionHierarchyLevelCollection.moveNext())
        {
            DimensionAttributeRecId currentDimensionAttributeRecId = dimensionHierarchyLevelCollection.currentDimensionAttributeId();

            if (currentDimensionAttributeRecId == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount))
            {
                continue;
            }

            DimensionAttribute dimensionAttribute = DimensionAttribute::find(currentDimensionAttributeRecId);
            RecId dimensionKey = dimensionCombination.(DimensionAttributeValueCombination::getDimensionKeyFieldId(dimensionAttribute.Name));
            DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(dimensionAttribute.RecId, dimensionKey);

            switch (_dimensionDisplayLayout)
            {
                case DimensionDisplayLayout_CN::OnlyValue:
                    dimensionDisplayValueByLayout += delimiter + dimensionAttributeValue.getValue();
                    break;
                case DimensionDisplayLayout_CN::OnlyName:
                    dimensionDisplayValueByLayout += delimiter + dimensionAttributeValue.getName();
                    break;
                case DimensionDisplayLayout_CN::ValueAndName:
                    dimensionDisplayValueByLayout += delimiter + dimensionAttributeValue.getValue();
                    dimensionDisplayValueByLayout += delimiter + dimensionAttributeValue.getName();
                    break;
            }
        }

        return dimensionDisplayValueByLayout;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>