<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSXMLApportionment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSXMLApportionment</c> is used to run apportionment using transportation managed code.
/// </summary>
abstract class TMSXMLApportionment
{
    XMLDocument                 requestDoc;
    XMLDocument                 responseDoc;
    XMLNode                     newXMLNode;
    Filename                    filename;
    TMSCommunicationType        communicationType;
    Set                         appSet;
    Amount                      amount;

    #TMSXML
	}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createXML</Name>
				<Source><![CDATA[
    /// <summary>
	/// Creates request xml document for apportionment of freight charges.
	/// </summary>
	/// <returns>
	/// XML document for apportionment of freight charges.
	/// </returns>
    XML createXML()
    {
        this.writeXML();
        return requestDoc.xml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
	/// Sends a request to transportation managed system for apportionment of freight charges and processes the response.
	/// </summary>
    void execute()
    {
        TMSCommProxy        commProxy  = new TMSCommProxy();
        container           con;
        XML                 xml;
        boolean             sendXML = false;
        TMSTransaction      transaction;

        con = this.sendTransaction();

        transaction = TMSTransaction::find(conPeek(con, 1), true);

        xml = commProxy.sendRequest(conPeek(con, 2));

        transaction.ResponseData = xml;
        transaction.update();

        this.readXML(xml);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmount</Name>
				<Source><![CDATA[
    Amount parmAmount(Amount _amount = amount)
    {
        if (_amount)
        {
            amount = _amount;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAppSet</Name>
				<Source><![CDATA[
    Set parmAppSet(Set _appSet = appSet)
    {
        if (_appSet)
        {
            appSet = _appSet;
        }

        return appSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommunicationType</Name>
				<Source><![CDATA[
    TMSCommunicationType parmCommunicationType(TMSCommunicationType _communicationType)
    {
        if (_communicationType)
        {
            communicationType = _communicationType;
        }

        return communicationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readAppEntity</Name>
				<Source><![CDATA[
    /// <summary>
	/// Processes apportionment entity node from response xml.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node containing apportionment entity.
	/// </param>
    void readAppEntity(XMLNode _xmlNode)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>readXML</Name>
				<Source><![CDATA[
    /// <summary>
	/// Processes request xml containing apportionment of freight charges.
	/// </summary>
	/// <param name="_xml">
	/// XML document containing apportionment information.
	/// </param>
	/// <exception cref="Exception::Error">
	/// There is an error while parsing xml.
	/// </exception>
    void readXML(XML _xml)
    {
        XmlParseError       xmlError;
        XMLNode             transactionNode;
        XMLNodeList         rateList;
        XMLNode             requestNode;
        XMLNode             apportionNode;
        XMLNodeList         apportionList;

        responseDoc = XMLDocument::newXml(_xml);
        xmlError    = responseDoc.parseError();

        try
        {
            ttsbegin;

            if (xmlError && xmlError.errorCode() != 0)
            {
                xmlError.reason();
            }

            transactionNode   = responseDoc.documentElement();
            communicationType = symbol2Enum(enumNum(TMSCommunicationType), this.returnNamedNode(transactionNode, #communicationType));

            rateList        = transactionNode.selectNodes(#request);
            requestNode     = rateList.nextNode();

            apportionList   = requestNode.selectNodes(#apportionment);
            apportionNode   = apportionList.nextNode();

            while (apportionNode)
            {
                this.readAppEntity(apportionNode);
                apportionNode = apportionList.nextNode();
            }

            ttscommit;
        }
        catch
        {
            throw error("@TRX:ErrorInProcessingRequest");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnNamedNode</Name>
				<Source><![CDATA[
    /// <summary>
	/// Returns text of a given node in xml node.
	/// </summary>
	/// <param name="_node">
	/// XML node to be searched in.
	/// </param>
	/// <param name="_id">
	/// Id of the given node.
	/// </param>
	/// <returns>
	/// Text of the given node.
	/// </returns>
    str returnNamedNode(XmlNode _node, str _id)
    {
        XmlNode         xmlNode;
        XmlNodeList     xmlList;
        str             item;

        xmlList     = _node.selectNodes(_id);
        xmlNode     = xmlList.nextNode();

        if (xmlNode)
        {
            item = xmlNode.text();
        }

        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTransaction</Name>
				<Source><![CDATA[
    /// <summary>
	/// Creates a <c>TMSTransaction</c> record containing request data.
	/// </summary>
	/// <returns>
	/// Container containing transaction data.
	/// </returns>
    container sendTransaction()
    {
        TMSTransaction  transaction;
        XML             xml;

        xml =  this.createXML();

        transaction.TransactionTypeCode  = Global::enum2Symbol(enumNum(TMSCommunicationType), communicationType);
        transaction.RequestData          = xml;
        transaction.Id                   = '';
        transaction.OrderNum             = '';
        transaction.insert();

        return [transaction.RecId, xml];
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAppDetails</Name>
				<Source><![CDATA[
    /// <summary>
	/// Writes apportionment of freight charges details to request xml node.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be written.
	/// </param>
	/// <param name="_source">
	/// Source containing apportionment details.
	/// </param>
    void writeAppDetails(XMLNode _xmlNode, Common _source = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeApportionment</Name>
				<Source><![CDATA[
    /// <summary>
	/// Writes apportionment nodes to request xml node.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be written.
	/// </param>
    void writeApportionment(XMLNode _xmlNode)
    {
        XMLNode                     appNode;
        TMSFreightBillDetail        fbDetail;
        SetEnumerator               se = new SetEnumerator();

        se = this.parmAppSet().getEnumerator();

        while (se.moveNext())
        {
            fbDetail = TMSFreightBillDetail::find(se.current());

            appNode = this.writeXMLNode(_xmlNode, #apportionment);

            this.writeXMLElement(appNode, #amount, TMSXMLApportionment::num2XmlStr(this.parmAmount()));

            this.writeAppDetails(appNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRequest</Name>
				<Source><![CDATA[
    /// <summary>
	/// Writes request node to xml node.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be written.
	/// </param>
    void writeRequest(XMLNode _xmlNode)
    {
        XMLNode         requestNode;

        requestNode = this.writeXMLNode(_xmlNode, #request);

        this.writeApportionment(requestNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeXML</Name>
				<Source><![CDATA[
    /// <summary>
	/// Creates a request xml document.
	/// </summary>
    void writeXML()
    {
        XMLNode transNode;

        requestDoc = XMLDocument::newBlank();
        transNode  = requestDoc.createElement(#transaction);
        requestDoc.appendChild(transNode);

        this.writeXMLElement(transNode, #communicationType, Global::enum2Symbol(enumNum(TMSCommunicationType), communicationType));
        this.writeRequest(transNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeXMLElement</Name>
				<Source><![CDATA[
    /// <summary>
	/// Writes xml element into an xml node.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be written.
	/// </param>
	/// <param name="_element">
	/// Element tag.
	/// </param>
	/// <param name="_text">
	/// Text of the element.
	/// </param>
    void writeXMLElement(XMLNode _xmlNode, str _element, str _text)
    {
        XMLNode     node;
        boolean     noWeightClass;

        if (global::str2NumOk(_text) && _element == #class)
        {
            noWeightClass = str2num(_text) == 0;
        }

        if (!noWeightClass)
        {
            node = requestDoc.createElement(_element);
            node.text(_text);
            _xmlNode.appendChild(node);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeXMLNode</Name>
				<Source><![CDATA[
    /// <summary>
	/// Writes an xml node in another xml node.
	/// </summary>
	/// <param name="_xmlNode">
	/// Parent xml node.
	/// </param>
	/// <param name="_element">
	/// Element to be written in the child node.
	/// </param>
	/// <returns>
	/// Child xml node.
	/// </returns>
    XMLNode writeXMLNode(XMLNode _xmlNode, str _element)
    {
        XMLNode     node;

        node = requestDoc.createElement(_element);
        _xmlNode.appendChild(node);

        return node;
    }

]]></Source>
			</Method>
			<Method>
				<Name>num2XmlStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Format amounts for transportation service.
    /// </summary>
    /// <param name="_amount">
    ///     The amount to be formatted.
    /// </param>
    /// <returns>
    ///     A formatted string of the amount.
    /// </returns>
    public static str num2XmlStr(real _amount)
    {
        int numOfDec;

        numOfDec = numOfDec(_amount) < 2 ? 2 : numOfDec(_amount);

        return TmsProcessXML_Base::real2str(_amount, numOfDec);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>