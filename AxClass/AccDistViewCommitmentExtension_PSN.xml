<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistViewCommitmentExtension_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AccDistViewCommitmentExtension_PSN</c> class handles the Accounting Distribution view events for Commitments.
/// </summary>
[SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProductOrder), SourceDocument_ProductOrder::PurchaseOrder, classStr(AccountingDistributionFormView)),
SourceDocumentEnumClassExtAttribute(enumStr(SourceDocumentLine_ProductOrder), SourceDocumentLine_ProductOrder::PurchaseOrderLine, classStr(AccountingDistributionFormView))]
public class AccDistViewCommitmentExtension_PSN extends AccDistViewExtension
{
    AccountingDistributionFormView  accountingDistributionFormView;
    boolean                         isPurchaseOrder;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>disableFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables all form controls on the distribution form.
    /// </summary>
    /// <remarks>
    /// This method should only be called when the source document is a purchase order and the French regulatory requirements feature is enabled.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void disableFields()
    {
        accountingDistributionFormView.parmAllocationMethodControl().enabled(false);
        accountingDistributionFormView.parmAccountingEventTypeControl().enabled(false);

        accountingDistributionFormView.parmDistributionQuantityControl().enabled(false);
        accountingDistributionFormView.parmDistributionAmountControl().enabled(false);
        accountingDistributionFormView.parmDistributionPercentControl().enabled(false);
        accountingDistributionFormView.parmQuantityDistributedControl().enabled(false);
        accountingDistributionFormView.parmAmountDistributedControl().enabled(false);
        accountingDistributionFormView.parmPercentDistributedControl().enabled(false);

        accountingDistributionFormView.parmDistributionLegalEntityControl().enabled(false);

        accountingDistributionFormView.parmReferencedSourceDocumentControl().enabled(false);
        accountingDistributionFormView.parmReferencedSourceDocumentLineControl().enabled(false);
        accountingDistributionFormView.parmReferencedAccDistNumberControl().enabled(false);
        accountingDistributionFormView.parmParentAccountingDistributionControl().enabled(false);
        accountingDistributionFormView.parmParentSourceDocumentLineControl().enabled(false);
        accountingDistributionFormView.parmParentSourceDocLineAmountTypeControl().enabled(false);

        accountingDistributionFormView.parmSplitDistributionControl().enabled(false);
        accountingDistributionFormView.parmDeleteDistributionControl().enabled(false);

        accountingDistributionFormView.parmResetDistributionControl().enabled(false);
        accountingDistributionFormView.parmCorrectDistributionControl().enabled(false);
        accountingDistributionFormView.parmDistributeEquallyControl().enabled(false);

        accountingDistributionFormView.parmReferenceAccDistributionsControl().enabled(false);
        accountingDistributionFormView.parmSplitterXControl().enabled(false);
        accountingDistributionFormView.parmParentAccDistributionsGroupControl().enabled(false);

        accountingDistributionFormView.parmCorrectButtonGroupControl().enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDataSourceEditEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disallows creates and deletes of the <c>accountingDistributionDataSource</c> if the commitments feature is enabled.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void enableDataSourceEditEventHandler(boolean _enable)
    {
        accountingDistributionFormView.parmAccountingDistributionDatasource().allowCreate(false);
        accountingDistributionFormView.parmAccountingDistributionDatasource().allowDelete(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the extension of the accounting distribution view.
    /// </summary>
    public void initialize()
    {
        accountingDistributionFormView = accountingDistributionView;

        super();

        isPurchaseOrder = this.isCallerPurchaseOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeControlsEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form view controls.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initializeControlsEventHandler()
    {
        if (isPurchaseOrder)
        {
            // disable all of the controls.
            this.disableFields();

            // disable adding and deleting of lines on the grid
            this.enableDataSourceEditEventHandler(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeViewForDistContEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the form state when an accounting distribution is selected.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initializeViewForDistContEventHandler()
    {
        if (accountingDistributionFormView.parmAccountingDistributionViewModel().parmCanEditActiveAccDistribution())
        {
            // We don't want the controls to be enabled if commitments are enabled and the caller is a purchase order.
            if (isPurchaseOrder)
            {
                accountingDistributionFormView.parmSplitDistributionControl().enabled(false);
                accountingDistributionFormView.parmDeleteDistributionControl().enabled(false);
                this.enableDataSourceEditEventHandler(false);
                accountingDistributionFormView.parmAccountingDistributionDatasource().insertAtEnd(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCallerPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the distributions form was opened from a purchase order or purchase order line.
    /// </summary>
    /// <returns>
    /// true if the distributions form was opened from a purchase order or purchase order line; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isCallerPurchaseOrder()
    {
        return accountingDistributionFormView.parmCallerSourceDocumentLine().SourceRelationType == tableNum(PurchLine) ||
            accountingDistributionFormView.parmCallerSourceDocumentHeader().SourceRelationType == tableNum(PurchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountingDistributionChangedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event after the active accounting distribution was changed.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void accountingDistributionChangedEventHandler()
    {
        if (isPurchaseOrder)
        {
            this.lockLedgerAccountControlForCommit();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockLedgerAccountControlForCommit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables all ledger dimension account segments.
    /// </summary>
    /// <remarks>
    /// This method should only be called when the source document is a purchase order and the French regulatory requirements feature is enabled.
    /// </remarks>
    private void lockLedgerAccountControlForCommit()
    {
        SegmentedEntryControl ledgerDimensionControl = accountingDistributionFormView.parmLedgerDimensionControl();

        ledgerDimensionControl.allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the events of the accounting distribution view extension.
    /// </summary>
    protected void subscribe()
    {
        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            accountingDistributionView.initializedControls += eventhandler(this.initializeControlsEventHandler);
            accountingDistributionFormView.initializedViewForDistributionControls += eventhandler(this.initializeViewForDistContEventHandler);
            accountingDistributionFormView.changedAccDistributionEventHandler += eventhandler(this.accountingDistributionChangedEventHandler);
            accountingDistributionFormView.enabledDataSourceEdit += eventhandler(this.enableDataSourceEditEventHandler);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AccDistViewCommitmentExtension_PSN construct()
    {
        return new AccDistViewCommitmentExtension_PSN();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>