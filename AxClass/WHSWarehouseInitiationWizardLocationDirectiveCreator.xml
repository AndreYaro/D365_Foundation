<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWarehouseInitiationWizardLocationDirectiveCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSWarehouseInitiationWizardLocationDirectiveCreator extends WHSWarehouseInitiationWizardEntityCreatorBase
{
    private WHSLocDirName locationDirectiveName;
    private WHSWorkType workType;
    private WHSWorkTransType workOrderType;
    private WHSLocType locationType;
    private WHSLocDirHintCode directiveCode;
    private InventSiteId siteId;
    private InventLocationId warehouseId;
    private WhsLocationDirectiveScope locationDirectiveScope;
    private WhsWarehouseGroupAll warehouseSelection;
    private WhsWarehouseGroupId warehouseGroupId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>entityName</Name>
				<Source><![CDATA[
    public str entityName()
    {
        return tablePName(WHSLocDirTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFrom</Name>
				<Source><![CDATA[
    public static WHSWarehouseInitiationWizardLocationDirectiveCreator newFrom(
        WHSWarehouseInitiationWizardEntitiesCreatorMode _mode,
        WHSWarehouseInitiationWizardEntitiesCreationSummaryBuilder _summaryBuilder,
        WHSLocDirName _locationDirectiveName,
        WHSWorkType _workType,
        WHSWorkTransType _workOrderType,
        WHSLocType _locationType,
        WHSLocDirHintCode _directiveCode,
        InventSiteId _siteId,
        InventLocationId _warehouseId,
        WhsLocationDirectiveScope _locationDirectiveScope,
        WhsWarehouseGroupAll _warehouseSelection,
        WhsWarehouseGroupId _warehouseGroupId)
    {
        WHSWarehouseInitiationWizardLocationDirectiveCreator creator = new WHSWarehouseInitiationWizardLocationDirectiveCreator(_mode, _summaryBuilder);
        creator.locationDirectiveName = strFmt('%1 %2', _warehouseId, _locationDirectiveName);
        creator.workType = _workType;
        creator.workOrderType = _workOrderType;
        creator.locationType = _locationType;
        creator.directiveCode = _directiveCode;
        creator.siteId = _siteId;
        creator.warehouseId = _warehouseId;
        creator.locationDirectiveScope = _locationDirectiveScope;
        creator.warehouseSelection = _warehouseSelection;
        creator.warehouseGroupId = _warehouseGroupId;

        return creator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreate</Name>
				<Source><![CDATA[
    protected boolean canCreate()
    {
        return locationDirectiveName != ''
            && workType != WHSWorkType::None
            && workOrderType != WHSWorkTransType::None
            && siteId != ''
            && warehouseId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    protected boolean exist()
    {
        return WHSLocDirTable::exist(locationDirectiveName, workType, workOrderType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    protected void insert()
    {
        WHSLocDirTable locationDirective;
        locationDirective.WorkType = workType;
        locationDirective.WorkTransType = workOrderType;
        locationDirective.LocDirName = locationDirectiveName;
        locationDirective.LocDirHintCode = directiveCode;
        locationDirective.LocSeqNum = WHSLocDirTable::getMaxLocSeqNum(workOrderType) + 1;
        
        locationDirective.WarehouseGroupAll = warehouseSelection;

        if (warehouseSelection == WhsWarehouseGroupAll::Group)
        {
            locationDirective.WarehouseGroupId = warehouseGroupId;
        }
        else if (warehouseSelection == WhsWarehouseGroupAll::Warehouse)
        {
            locationDirective.InventLocationId = warehouseId;
            locationDirective.InventSiteId = siteId;
        }

        locationDirective.locationDirectiveScope(true, locationDirectiveScope);
        locationDirective.initQueryFromWorkTransType(workOrderType, locationDirective.locationDirectiveScope() == WhsLocationDirectiveScope::MultiItem);
        locationDirective.insert();

        RecId locationDirectiveLineRecId = this.createLocationDirectiveLine(locationDirective.RecId);

        WHSBatchEnabled isBatchEnabled = NoYes::No;
        this.createLocationDirectiveAction(locationDirectiveName, locationDirective.RecId, locationDirectiveLineRecId, locationType, 1, isBatchEnabled);

        if (workType == WHSWorkType::Pick)
        {
            isBatchEnabled = NoYes::Yes;
            this.createLocationDirectiveAction(locationDirectiveName, locationDirective.RecId, locationDirectiveLineRecId, locationType, 2, isBatchEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLocationDirectiveLine</Name>
				<Source><![CDATA[
    private RecId createLocationDirectiveLine(RefRecId _locationDirectiveRecId)
    {
        WHSLocDirLine locationDirectiveLine;
        locationDirectiveLine.LocSeqNum = 1;
        locationDirectiveLine.FromQty = 0;
        locationDirectiveLine.ToQty = 99999;

        locationDirectiveLine.RefRecId = _locationDirectiveRecId;

        locationDirectiveLine.insert();

        return locationDirectiveLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLocationDirectiveAction</Name>
				<Source><![CDATA[
    private void createLocationDirectiveAction(
        WHSLocDirName _locationDirectiveName,
        RecId _locationDirectiveRecId,
        RecId _locationDirectiveLineRecId,
        WHSLocType _locationType,
        WHSLocSeqNum _sequenceNumber,
        WHSBatchEnabled _isBatchEnabled)
    {
        WHSLocDirAction locationDirectiveAction;
        locationDirectiveAction.LocSeqNum = _sequenceNumber;
        locationDirectiveAction.LocDirName = _isBatchEnabled ? this.appendBatchEnabledSuffix(_locationDirectiveName) : _locationDirectiveName ;
        locationDirectiveAction.BatchEnabled = _isBatchEnabled;

        locationDirectiveAction.initLocationQuery(_locationDirectiveRecId);
        
        if (_locationType)
        {
            WHSLocationProfile locationProfile = WHSLocationProfile::findFirstByLocationType(locationType);
            if (!locationProfile)
            {
                throw new System.InvalidOperationException("@WAX:WHSWarehouseInitiationWizard_LocationProfileNotSetWhenCreatingLocationDirectiveError");
            }

            QueryRun queryRun = new QueryRun(locationDirectiveAction.LocDirQuery);
            queryRun.query().dataSourceTable(tableNum(WMSLocation)).addRange(fieldNum(WMSLocation, LocProfileId)).value(queryValue(locationProfile.LocProfileId));
            locationDirectiveAction.LocDirQuery = queryRun.pack();
        }

        locationDirectiveAction.RefRecId = _locationDirectiveLineRecId;

        locationDirectiveAction.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendBatchEnabledSuffix</Name>
				<Source><![CDATA[
    private WHSLocDirName appendBatchEnabledSuffix(WHSLocDirName name)
    {
        return strFmt('%1 %2', name, "@WAX1808");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>