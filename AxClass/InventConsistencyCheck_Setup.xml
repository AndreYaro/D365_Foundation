<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventConsistencyCheck_Setup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventConsistencyCheck_Setup extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
        ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
        Integer executionOrder()
    {
        return 3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        EcoResProductDimensionGroup             ecoResProductDimensionGroup;
        EcoResStorageDimensionGroup             ecoResStorageDimensionGroup;
        EcoResTrackingDimensionGroup            ecoResTrackingDimensionGroup;

        // inventLocation
        this.kernelCheckTable(tableNum(InventLocation));

        // InventItemGroup
        this.kernelCheckTable(tableNum(InventItemGroup));

        // InventBuyerGroup
        this.kernelCheckTable(tableNum(InventBuyerGroup));

        // InventNumGroup
        this.kernelCheckTable(tableNum(InventNumGroup));

        // InventCountGroup
        this.kernelCheckTable(tableNum(InventCountGroup));

        // InventPosting
        this.kernelCheckTable(tableNum(InventPosting));

        // InventModulGroup
        this.kernelCheckTable(tableNum(InventModelGroup));

        // EcoResProductDimensionGroup
        this.kernelCheckTable(tableNum(EcoResProductDimensionGroup));

        // InventParameters
        this.kernelCheckTable(tableNum(InventParameters));

        //EcoResProductDimensionGroup
        while select ecoResProductDimensionGroup
        {
            setPrefix(strFmt("@SYS69933", ecoResProductDimensionGroup.Name));

            ecoResProductDimensionGroup.checkFixReference();
        }

        //EcoResStorageDimensionGroup
        while select ecoResStorageDimensionGroup
        {
            setPrefix(strFmt("@SYS69933", ecoResStorageDimensionGroup.Name));

            ecoResStorageDimensionGroup.checkFixReference();
        }

        //EcoResTrackingDimensionGroup
        while select ecoResTrackingDimensionGroup
        {
            setPrefix(strFmt("@SYS69933", ecoResTrackingDimensionGroup.Name));

            ecoResTrackingDimensionGroup.checkFixReference();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
        ClassId treeParentClassId()
    {
        return classNum(InventConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        static ClassDescription description()
    {
        return "@SYS2186";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
        static HelpTxt helpText()
    {
        return "@SYS58149";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>