<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgWorkPlannerForm_ProfileGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgWorkPlannerForm_ProfileGroup</c> class handles the profile group level on the work planner form.
/// </summary>
class JmgWorkPlannerForm_ProfileGroup extends JmgWorkPlannerForm
{
    boolean overlay;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCellContent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves cell content, which is used to display the value at the specified column and row.
    /// </summary>
    /// <param name="_column">
    ///    The column for which to retrieve the control.
    /// </param>
    /// <param name="_row">
    ///    The row for which to retrieve the control.
    /// </param>
    /// <returns>
    ///    The <c>JmgWorkPlannerCellContent</c> object, which is used to display the value at the specified column and
    ///    row.
    /// </returns>
    public JmgWorkPlannerCellContent getCellContent(int _column, int _row)
    {
        JmgProfileDate profileDate = this.columnToDate(_column);

        if (_column     >  this.numberOfColumns() ||
            _row        >  this.numberOfRows()    ||
            profileDate == dateNull())
        {
            return JmgWorkPlannerCellContent::constructFromControl(defaultFormStringControl);
        }

        JmgWorkPlannerCellContent workPlannerCellContent = super(_column, _row);

        if (overlay && (workPlannerCellContent.getControl() == defaultFormStringControl ||
                        workPlannerCellContent.getControl() == weekendFormStringControl))
        {
            JmgProfileId profileId = allLevel.getProfileAt(_column, 1);
            if (profileId && editControls.exists(profileId))
            {
                workPlannerCellContent = JmgWorkPlannerCellContent::constructFromValues(editControls.lookup(profileId), profileId);
            }
        }

        return workPlannerCellContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRowLabels</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the row labels to display on the work plan.
    /// </summary>
    protected void initRowLabels()
    {
        JmgProfileGroup jmgProfileGroup;
        int rowNumber;
        rowLabels = new Map(Types::Integer, Types::String);
        labelToRow  = new Map(Types::String, Types::Integer);
        rowNumber = 1;
        while select ProfileGroupId
            from  jmgProfileGroup
            order by ProfileGroupId asc
        {
            rowLabels.insert(rowNumber, jmgProfileGroup.ProfileGroupId);
            labelToRow.insert(jmgProfileGroup.ProfileGroupId, rowNumber);
            rowNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgWorkPlannerForm_ProfileGroup</c> class.
    /// </summary>
    /// <param name="_formTableControl">
    ///    The <c>FormTableControl</c> object that is used to display the work plan.
    /// </param>
    /// <param name="_fromDate">
    ///    The start date of the initial date interval that is shown.
    /// </param>
    /// <param name="_toDate">
    ///    The end date of the initial date interval that is shown.
    /// </param>
    /// <param name="_profileTimes">
    ///    A map of calculated profile times.
    /// </param>
    /// <param name="_allLevel">
    ///    A reference to the <c>JmgWorkPlannerForm</c> object, which handles the All level.
    /// </param>
    /// <param name="_overlay">
    ///    A Boolean value that specifies whether entries from the profile group and all level is displayed on
    ///    the worker level.
    /// </param>
    /// <param name="_showWeekend">
    ///    A Boolean value that specifies whether the weekend is highlighted in the work planner.
    /// </param>
    void new(FormTableControl _formTableControl, JmgDate _fromDate, JmgDate _toDate, Map _profileTimes, JmgWorkPlannerForm _allLevel, boolean _overlay, boolean _showWeekend)
    {
        showWeekend = _showWeekend;
        overlay     = _overlay;
        super(_formTableControl, _fromDate, _toDate, _profileTimes, _allLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overlayColumnUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates time sums when an overlayed column is updated.
    /// </summary>
    /// <param name="_column">
    ///    The column that is updated.
    /// </param>
    /// <param name="_oldProfile">
    ///    The old profile ID.
    /// </param>
    /// <param name="_e">
    ///    A reference to the <c>JmgWorkPlannerForm</c> object, which handles the worker level.
    /// </param>
    public void overlayColumnUpdated(int _column, JmgProfileId _oldProfile, JmgWorkPlannerForm_Employee _e)
    {
        JmgTmpWorkPlanner   t;
        int                 i;
        if (overlay)
        {
            for (i = 1; i <= this.numberOfRows(); i++)
            {
                t = JmgTmpWorkPlanner::find(jmgTmpWorkPlanner, this.columnToDate(_column), this.getRowLabel(i));
                if (!t || !t.ProfileId)
                {
                    this.updateTimeSums(_oldProfile, allLevel.getProfileAt(_column, 1), this.columnToDate(_column), i, _oldProfile ? false : true);
                    _e.overlayColumnUpdated(_column, _oldProfile, this.getRowLabel(i));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverlay</Name>
				<Source><![CDATA[
    public boolean parmOverlay(boolean _overlay = overlay)
    {
        overlay = _overlay;
        this.recalculateSums();
        return overlay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the profile calendar type that is associated to the <c>JmgWorkPlannerForm</c> object.
    /// </summary>
    /// <returns>
    ///    The profile calendar type that is associated to the <c>JmgWorkPlannerForm</c> object.
    /// </returns>
    protected JmgProfileCalendarType type()
    {
        JmgProfileCalendarType ret;

        ret = JmgProfileCalendarType::ProfileGroup;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimeSums</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the time sums when a profile is changed.
    /// </summary>
    /// <param name="_oldProfileId">
    ///    The old profile ID.
    /// </param>
    /// <param name="_newProfileId">
    ///    The new profile ID.
    /// </param>
    /// <param name="_profileDate">
    ///    The profile date where the profile is changed.
    /// </param>
    /// <param name="_row">
    ///    The row where the profile is changed.
    /// </param>
    /// <param name="_recalculation">
    ///    A Boolean value that specifies whether the time sums is updated as part of a recalculation.
    /// </param>
    protected void updateTimeSums(JmgProfileId _oldProfileId, JmgProfileId _newProfileId, JmgProfileDate _profileDate, int _row, boolean _recalculation = false)
    {
        JmgProfileId    oldProfileId;
        JmgProfileId    newProfileId;
        oldProfileId = _oldProfileId;
        newProfileId = _newProfileId;

        if (!oldProfileId && overlay)
        {
            oldProfileId = allLevel.getProfileAt(this.dateToColumn(_profileDate), 1);
        }

        if (!newProfileId && overlay)
        {
            newProfileId = allLevel.getProfileAt(this.dateToColumn(_profileDate), 1);
        }
        super(oldProfileId, newProfileId, _profileDate, _row, _recalculation);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>