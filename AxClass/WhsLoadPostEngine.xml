<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLoadPostEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLoadPostEngine</c> class is used to handle load posting and load posting errors.
/// </summary>
abstract class WhsLoadPostEngine
{
    boolean             validate;
    WHSLoadTable        loadTable;
    RecordSortedList    postErrors;
    CustCreditMaxCheck  creditMaxCheck;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a load posting error.
    /// </summary>
    /// <param name="_loadId">
    /// Load id of the posting error.
    /// </param>
    /// <param name="_labelId">
    /// Label of the error
    /// </param>
    /// <param name="_errorParm1">
    /// First parameter of the error.
    /// </param>
    /// <param name="_errorParm2">
    /// Second parameter of the error.
    /// </param>
    /// <param name="_errorParm3">
    /// Third parameter of the error.
    /// </param>
    /// <param name="_errorParm4">
    /// Fourth parameter of the error.
    /// </param>
    /// <param name="_errorHardStop">
    /// Determines whether the error is a hard stop error.
    /// </param>
    /// <returns>
    /// True if an error is inserted to error list.
    /// </returns>
    public boolean createError(WHSLoadId           _loadId,
                               LabelId             _labelId,
                               WHSErrorParm        _errorParm1,
                               WHSErrorParm        _errorParm2,
                               WHSErrorParm        _errorParm3,
                               WHSErrorParm        _errorParm4,
                               WHSErrorHardStop    _errorHardStop)
    {
        WHSPostError        postError;
        boolean             ret;

        postError = WHSPostError::find(_loadId, _labelId, _errorParm1, _errorParm2, _errorParm3, _errorParm4);

        if (postError)
        {
            ret = !postError.ErrorOverride;
        }
        else
        {
            postError.Id             = _loadId;
            postError.LabelId        = _labelId;
            postError.ErrorParm1     = _errorParm1;
            postError.ErrorParm2     = _errorParm2;
            postError.ErrorParm3     = _errorParm3;
            postError.ErrorParm4     = _errorParm4;
            postError.ErrorHardStop  = _errorHardStop;
            postErrors.ins(postError);

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        postErrors = new RecordSortedList(tableNum(WHSPostError));
        postErrors.sortOrder(fieldNum(WHSPostError, LabelId),
                             fieldNum(WHSPostError, ErrorParm1),
                             fieldNum(WHSPostError, ErrorParm2),
                             fieldNum(WHSPostError, ErrorParm3),
                             fieldNum(WHSPostError, ErrorParm4),
                             fieldNum(WHSPostError, Id));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadTable</Name>
				<Source><![CDATA[
    public WHSLoadTable parmLoadTable(WHSLoadTable _loadTable = loadTable)
    {
        loadTable = _loadTable;

        return loadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidate</Name>
				<Source><![CDATA[
    public boolean parmValidate(boolean _validate = validate)
    {
        validate = _validate;

        return validate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes previous stopping errors and inserts the current errors into database.
    /// </summary>
    void processErrors()
    {
        UserConnection conn = new UserConnection();

        try
        {
            if (postErrors.len() > 0)
            {
                postErrors.insertDatabase(conn);
            }
        }
        finally
        {
            conn.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPreviousHardStopErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete any errors that exist for the load and are a hard stop
    /// This needs to be called once per posting, prior to the adding of new errors
    /// </summary>
    internal void clearPreviousHardStopErrors()
    {
        WHSPostError postError;

        ttsbegin;

        delete_from postError
            where postError.ErrorHardStop == true
            &&    postError.Id            == loadTable.LoadId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a load posting engine instance.
    /// </summary>
    /// <param name="_base">
    /// Determines whether the base engine is created or custom engine is created.
    /// </param>
    /// <returns>
    /// The newly created posting engine instance.
    /// </returns>
    static WHSLoadPostEngine construct(boolean _base = true)
    {
        if (_base)
        {
            return new WHSLoadPostEngineBase();
        }
        else
        {
            return new WHSLoadPostEngineCustom();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Release a load to warehouse. Validates the load first by load posting methods defined for the load.
    /// </summary>
    /// <param name="_loadTable">
    /// Load to be posted.
    /// </param>
    /// <param name="_validate">
    /// Determines whether the load should be validated only or posted.
    /// </param>
    /// <param name="_creditMaxCheck">
    /// A flag determining if a credit check needs to be initiated.
    /// </param>
    /// <returns>
    /// True if the load is valid.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Exception is thrown when the load is not valid.
    /// </exception>
    static boolean post(
        WHSLoadTable        _loadTable,
        boolean             _validate       = false,
        CustCreditMaxCheck  _creditMaxCheck = CustParameters::find().CreditMaxCheck)
    {
        #AviFiles
        WHSLoadTable                loadTable = _loadTable;
        WHSPostError                postError;
        WHSLoadPostMethod           postMethod;
        str                         firstMethod;
        WHSLoadPostEngineBase       baseEngine              = new WHSLoadPostEngineBase();
        SysDictClass                baseClass               = new SysDictClass(classNum(WHSLoadPostEngineBase));
        List                        customMethods           = new List(Types::Class);
        boolean                     valid                   = true;
        boolean                     errorsPosted;
        int                         i;

        baseEngine.parmLoadTable(_loadTable);
        baseEngine.parmValidate(_validate);
        baseEngine.parmCreditMaxCheck(_creditMaxCheck);

        delete_from postError
            where postError.ErrorHardStop    == true    &&
                  postError.Id               == loadTable.LoadId;

        try
        {
            ttsbegin;

            select count(PostMethodPos) from postMethod;
            int totalMethods = postMethod.PostMethodPos;
            SysOperationProgress prog = SysOperationProgress::newGeneral(#AviUpdate, "@WAX2253", totalMethods);

            while select postMethod
                order by postMethod.PostMethodPos
            {
                ++i;
                prog.incCount();
                prog.setText(strFmt("@WAX2254", i));

                using (var perfTask = WHSInstrumentationReleaseToWarehousePerformanceTask::newFromLoadId(loadTable.LoadId, postMethod.PostMethodName))
                using (var appInsightsActivity = WHSLoadPostingApplicationInsightsActivity::newFromParameters(loadTable.LoadId, postMethod.PostMethodName, loadTable.OrderNum))
                {
                    if (firstMethod != postMethod.PostMethodName)
                    {
                        if (postMethod.isBaseMethod(postMethod.PostMethodName))
                        {
                            if (baseClass.hasObjectMethod(postMethod.PostMethodName))
                            {
                                valid = baseClass.callObject(postMethod.PostMethodName, baseEngine, _validate) && valid;
                            }
                        }
                        else
                        {
                            SysDictClass dictClass = SysDictClass::newName(postMethod.PostMethodName);
                            if (dictClass)
                            {
                                WHSLoadPostCustomMethod customMethod = dictClass.makeObject();
                                if (customMethod)
                                {
                                    customMethod.parmLoadTable(_loadTable);
                                    customMethod.parmValidate(_validate);

                                    valid = customMethod.execute() && valid;
                                    customMethods.addEnd(customMethod);
                                }
                            }
                        }
                    }
                    else
                    {
                        break;
                    }
                }

                if (!firstMethod)
                {
                    firstMethod = postMethod.PostMethodName;
                }
            }

            if (!valid)
            {
                ttsabort;
                
                // Clear previous hard stop errors, then add new errors. First from base posting methods, then loop through all custom methods and add their errors
                baseEngine.clearPreviousHardStopErrors();
                baseEngine.processErrors();
                WhsLoadPostEngine::processErrorsInCustomMethods(customMethods);
                
                errorsPosted = true;
                throw error(strFmt("@WAX1865", _loadTable.LoadId));
            }

            if (!_validate)
            {
                if (loadTable.mustUpdateStatusWhenPosting())
                {
                    loadTable.LoadStatus = WHSLoadStatus::Posted;
                    loadTable.LastUpdateUTCDateTime = DateTimeUtil::utcNow();
                    loadTable.update();
                }

                ttscommit;
                info(strFmt("@WAX1864", _loadTable.LoadId));
            }
            else
            {
                ttsabort;
                info(strFmt("@WAX1868", _loadTable.LoadId));
            }
        }
        catch
        {
            if (!errorsPosted)
            {
                // Clear previous hard stop errors, then add new errors. First from base posting methods, then loop through all custom methods and add their errors
                baseEngine.clearPreviousHardStopErrors();
                baseEngine.processErrors();
                WhsLoadPostEngine::processErrorsInCustomMethods(customMethods);
            }

           
            valid = false;

            if (!errorsPosted)
            {
                WhsLoadPostEngine::displayErrorMessage(_validate, _loadTable);
            }
                        
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayErrorMessage</Name>
				<Source><![CDATA[
    private static void displayErrorMessage(boolean _validate, WHSLoadTable _loadTable)
    {
        if (_validate)
        {
            error(strFmt("@WAX:WHSLoadValidationErrorThrown", _loadTable.LoadId));
        }
        else
        {
            error(strFmt("@WAX:WHSLoadCouldNotBeReleasedError", _loadTable.LoadId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processErrorsInCustomMethods</Name>
				<Source><![CDATA[
    static private void processErrorsInCustomMethods(List _customMethods)
    {
        Enumerator enum = _customMethods.getEnumerator();
        while (enum.moveNext())
        {
            WHSLoadPostCustomMethod customMethod = enum.current();
            customMethod.processErrors();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditLimit</Name>
				<Source><![CDATA[
    protected boolean checkCreditLimit(SalesId _salesId)
    {
        boolean ret = true;

        // Check if credit limit is exceeded for the sales order.
        if (!WHSWarehouseRelease::creditLimitCheck(SalesTable::find(_salesId), true, creditMaxCheck))
        {
            error(strFmt("@WAX:CreditLimitExceededForSalesOrder", _salesId));

            ret = (!this.createError(loadTable.LoadId,
                                literalStr("@WAX:CreditLimitExceededForSalesOrder"),
                                _salesId,
                                '',
                                '',
                                '',
                                NoYes::Yes));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomerIsNotOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the customer is blocked when releasing a sales order to warehouse.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales order to validate.
    /// </param>
    /// <returns>
    /// true if the customer is not on hold; otherwise, false.
    /// </returns>
    protected boolean checkCustomerIsNotOnHold(SalesTable _salesTable)
    {
        boolean ret = true;

        if (!_salesTable.canCustomerBeUpdated(DocumentStatus::PickingList))
        {
            ret = (!this.createError(loadTable.LoadId,
                                    literalStr("@WAX:CustomerOnholdOrderCannotBeReleased"),
                                    enum2Str(CustTable::blocked(_salesTable.CustAccount)),
                                    _salesTable.SalesId,
                                    '',
                                    '',
                                    NoYes::Yes));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditMaxCheck</Name>
				<Source><![CDATA[
    public CustCreditMaxCheck parmCreditMaxCheck(CustCreditMaxCheck _creditMaxCheck = creditMaxCheck)
    {
        creditMaxCheck = _creditMaxCheck;

        return creditMaxCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildConsolidationShipmentQueryForSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to find a shipment with matching consolidation criteria.
    /// </summary>
    /// <param name = "_salesLine">A sales order line.</param>
    /// <param name = "_inventDim">An inventory dimensions instance.</param>
    /// <param name = "_address">A postal address.</param>
    /// <param name = "_loadLine">A load line.</param>
    /// <returns>A shipment query.</returns>
    protected Query buildConsolidationShipmentQueryForSales(
        SalesLine _salesLine,
        InventDim _inventDim,
        LogisticsPostalAddress _address,
        WHSLoadLine _loadLine)
    {
        boolean mustConsolidateShipment = InventLocation::find(_inventDim.InventLocationId).ConsolidateShipAtRTW;

        Query query = new Query();
        QueryBuildDataSource qbdsShipment = query.addDataSource(tableNum(WHSShipmentTable));
        qbdsShipment.update(true);
        qbdsShipment.firstOnly(true);
        qbdsShipment.addRange(fieldNum(WHSShipmentTable, AccountNum)).value(queryValue(_salesLine.CustAccount));
        qbdsShipment.addRange(fieldNum(WHSShipmentTable, DeliveryName)).value(queryValue(_salesLine.DeliveryName));
        qbdsShipment.addRange(fieldNum(WHSShipmentTable, DeliveryPostalAddress)).value(queryValue(_address.RecId));
        qbdsShipment.addRange(fieldNum(WHSShipmentTable, InventLocationId)).value(queryValue(_inventDim.InventLocationId));
        qbdsShipment.addRange(fieldNum(WHSShipmentTable, LoadId)).value(queryValue(_loadLine.LoadId));
        qbdsShipment.addRange(fieldNum(WHSShipmentTable, ShipmentStatus)).value(queryRange(null, queryValue(WHSShipmentStatus::Loaded)));

        if (!mustConsolidateShipment)
        {
            qbdsShipment.addRange(fieldNum(WHSShipmentTable, OrderNum)).value(queryValue(_salesLine.SalesId));
        }

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>