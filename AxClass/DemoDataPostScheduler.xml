<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DemoDataPostScheduler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Manages the creation and monitoring of automatic posting batch jobs.
/// </summary>
class DemoDataPostScheduler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>monitorDemoDataPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Scans the <c>DemoDataPostRun</c> table for waiting run projects and begins processing.
    /// </summary>
    /// <remarks>
    /// This method will fetch any runs ready for processing and send them all to batch.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void monitorDemoDataPost()
    {
        DemoDataPostRun demoDataPostRun;

        while select forupdate demoDataPostRun
            where demoDataPostRun.RunStatus == DemoDataPostRunStatus::Ready
        {
            if (this.runReadyForProcessing(demoDataPostRun, false))
            {
                this.createRunBatchJob(demoDataPostRun);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSingleRunBatchJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process a single run for batch from either the open or waiting status.
    /// </summary>
    /// <param name = "_runId">The run id to process.</param>
    /// <remarks>
    /// This method generates additional messaging meant to guide
    /// user interaction.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createSingleRunBatchJob(DemoDataPostRunId _runId)
    {
        DemoDataPostRun demoDataPostRun = DemoDataPostRun::find(_runId, true);

        if (demoDataPostRun && this.runReadyForProcessing(demoDataPostRun))
        {
            this.createRunBatchJob(demoDataPostRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReadyForProcessing</Name>
				<Source><![CDATA[
    private boolean runReadyForProcessing(DemoDataPostRun _run, boolean _shouldSurfaceError = true)
    {
        boolean isReadyForProcessing = true;

        if (!_run.RunId)
        {
            isReadyForProcessing = false;

            if (_shouldSurfaceError)
            {
                throw error("@DemoDataPost:PostNoRunIdError");
            }
        }

        if (_run.ExecutionId)
        {
            DMFExecutionSummaryStatus status = DMFExecutionStatusHelper::GetExecutionSummaryStatus(_run.ExecutionId);

            if (status == DMFExecutionSummaryStatus::Canceled || status == DMFExecutionSummaryStatus::Executing ||
                status == DMFExecutionSummaryStatus::Failed || status == DMFExecutionSummaryStatus::Unknown)
            {
                isReadyForProcessing = false;
                if (_shouldSurfaceError)
                {
                    throw error(strFmt("@DemoDataPost:ProcessDocumentWaitOnExecutionJobError", _run.ExecutionId, _run.RunId));
                }
            }
        }

        if (!DemoDataPostRun::canEdit(_run))
        {
            isReadyForProcessing = false;
            if (_shouldSurfaceError)
            {
                throw error(strFmt("@DemoDataPost:ProcessNowAlreadyScheduled", _run.RunId));
            }
        }

        return isReadyForProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRunBatchJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the run batch job with each document bundled as a task.
    /// </summary>
    /// <param name = "_run">The run record.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createRunBatchJob(DemoDataPostRun _run)
    {
        if (_run.RunId)
        {
            BatchHeader batchHeader = BatchHeader::construct();
            batchHeader.parmCaption(_run.RunId);

            boolean tasksAdded = this.addTasksForWaitingDocuments(batchHeader, _run.RunId);

            if (tasksAdded)
            {
                batchHeader.save();

                _run = DemoDataPostRun::setRunStatus(_run.RunId, DemoDataPostRunStatus::Scheduled, batchHeader.parmBatchHeaderId());
            }
            else
            {
                info(strfmt("@DemoDataPost:ScheduleRunNoDocumentsToProcessError", _run.runId));
            }
        }
        else
        {
            _run = DemoDataPostRun::setRunStatus(_run.RunId, DemoDataPostRunStatus::Error);

            throw error("@DemoDataPost:PostNoRunIdError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTasksForWaitingDocuments</Name>
				<Source><![CDATA[
    private boolean addTasksForWaitingDocuments(BatchHeader _batchHeader, DemoDataPostRunId _runId)
    {
        DemoDataPostRunDocument demoDataPostRunDocument;
        DemoDataPostBatchTask lastSequenceDocument;
        int taskCount;

        while select Document, LineNum, DocumentTarget from demoDataPostRunDocument
            order by LineNum asc
            where demoDataPostRunDocument.RunId == _runId
                && demoDataPostRunDocument.RunStatus == DemoDataPostRunStatus::Ready
        {
            DemoDataPostBatchTask demoDataPostBatchTask = DemoDataPostBatchTask::construct(_runId, demoDataPostRunDocument.LineNum, demoDataPostRunDocument.Document);

            demoDataPostBatchTask.batchInfo().parmCaption(
                strfmt("@DemoDataPost:ProcessDocumentsDefaultTaskCaption",
                    demoDataPostRunDocument.Document,
                    enum2Str(demoDataPostRunDocument.DocumentTarget)));

            _batchHeader.addTask(demoDataPostBatchTask);

            if (lastSequenceDocument)
            {
                _batchHeader.addDependency(demoDataPostBatchTask, lastSequenceDocument, BatchDependencyStatus::FinishedOrError);
            }

            taskCount++;
            lastSequenceDocument = demoDataPostBatchTask;
        }

        return taskCount != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a single batch job for a given demo data post run.
    /// </summary>
    /// <param name = "_args">Arguments with record.</param>
    /// <remarks>
    /// This method will fetch a specific run for batch.
    /// </remarks>
    public static void main(Args _args)
    {
        DemoDataPostRun run;

        if (_args.record())
        {
            run = _args.record() as DemoDataPostRun;
        }

        if (run)
        {
            DemoDataPostScheduler demoDataPostScheduler = new DemoDataPostScheduler();
            demoDataPostScheduler.createSingleRunBatchJob(run.RunId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>