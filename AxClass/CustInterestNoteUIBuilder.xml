<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInterestNoteUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustInterestNoteUIBuilder</c> class builds the UI for the <c>CustInterestNote</c> SSRS report parameters.
/// </summary>
public class CustInterestNoteUIBuilder extends SrsReportDataContractUIBuilder
{
    DialogField billingClassificationField;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>billingClassificationLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a multi-select Billing Classification lookup.
    /// </summary>
    public void billingClassificationLookup()
    {
        Query query = new Query(queryStr(CustBillingClassificationLookup));
        TableId multiSelectTableNum = tableNum(CustBillingClassification);
        container selectedFields = [multiSelectTableNum, fieldName2id(multiSelectTableNum, fieldStr(CustBillingClassification, BillingClassification))];

        SysLookupMultiSelectCtrl::constructWithQuery(this.dialog().dialogForm().formRun(), billingClassificationField.control(), query, false, selectedFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility and value of public sector dialog controls, depending on configuration key.
    /// </summary>
    public void postBuild()
    {
        boolean isBillingClassEnabled;
        DialogField inclTransWithNoBillingClassField;
        CustInterestNoteContract custInterestNoteContract;

        // initializing data contract object
        custInterestNoteContract = this.dataContractObject() as CustInterestNoteContract;

        // Get the parameter controls from dialog
        billingClassificationField = this.bindInfo().getDialogField(custInterestNoteContract, methodStr(CustInterestNoteContract, parmBillingClassification));
        inclTransWithNoBillingClassField = this.bindInfo().getDialogField(custInterestNoteContract, methodStr(CustInterestNoteContract, parmInclTransWithNoBillingClass));

        // controlling visibility
        if (billingClassificationField && inclTransWithNoBillingClassField)
        {
            isBillingClassEnabled = CustParameters::isBillingClassificationEnabled();
            billingClassificationField.visible(isBillingClassEnabled);
            inclTransWithNoBillingClassField.visible(isBillingClassEnabled);
            billingClassificationField.lookupButton(FormLookupButton::Always);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the functionality that is supposed to execute after run.
    /// </summary>
    public void postRun()
    {
        if (CustParameters::isBillingClassificationEnabled())
        {
            this.billingClassificationLookup();
        }
        else
        {
            super();

            CustInterestNoteContract contract = this.dataContractObject();

            if (contract.parmHideSSRSDestination())
            {
                this.doHideSSRSDestinationTab();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doHideSSRSDestinationTab</Name>
				<Source><![CDATA[
    private void doHideSSRSDestinationTab()
    {
        const str destinationControlName = formControlStr(SysOperationTemplateForm, Destination);

        FormControl destinationControl = dialog.formRun().control(dialog.formRun().controlId(destinationControlName));

        if (destinationControl)
        {
            destinationControl.visible(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>