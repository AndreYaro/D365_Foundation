<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMDistributionDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class incapsulates information and operational logic for different sources with distributed amounts grouped by multiple headers.
/// </summary>
abstract class CFMDistributionDocument
{
    Query headerQuery;
    Query lineQuery;

    QueryRun headerQueryRun;
    QueryRun lineQueryRun;

    QueryBuildRange lineAmountRange;
    QueryBuildRange lineLedgerDimensionRange;
    QueryBuildRange lineTaxGroupRange;
    QueryBuildRange lineTaxItemGroupRange;

    CFMDistributionLineSelectionType lineSelectionType;

    CurrencyCode currencyCode;

    boolean headerSelected;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newForDistTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>CFMDistributionDocument</c> based on data from refernce distributions.
    /// </summary>
    /// <param name="_distributionsHeader">
    /// Headers of the document.
    /// </param>
    /// <param name="_distributionLines">
    /// Lines of the document.
    /// </param>
    /// <param name="_currency">
    /// Document currency code.
    /// </param>
    /// <returns>
    /// Instance of <c>CFMDistributionDocument</c>.
    /// </returns>
    public static CFMDistributionDocument newForDistTmp(CFMReferenceDistributionHeaderTmp _distributionsHeader, CFMReferenceDistributionLinesTmp _distributionLines, CurrencyCode _currency)
    {
        CFMDistributionDocument_DistTmp distributionDocument = CFMDistributionDocument_DistTmp::construct(_distributionsHeader, _distributionLines, _currency);

        return distributionDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForPlannedPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>CFMDistributionDocument</c> based on planned payments source record.
    /// </summary>
    /// <param name="_sourceRecId">
    /// Planned payment source.
    /// </param>
    /// <param name="_sourceDataAreaId">
    /// Data area of planned payment source.
    /// </param>
    /// <param name="_sourceType">
    /// The type of planned payment source.
    /// </param>
    /// <param name="_currency">
    /// Document currency code.
    /// </param>
    /// <returns>
    /// Instance of <c>CFMDistributionDocument</c>.
    /// </returns>
    public static CFMDistributionDocument newForPlannedPayment(RefRecId _sourceRecId, DataAreaId _sourceDataAreaId, CFMPlannedPaymentSourceType _sourceType, CurrencyCode _currency)
    {
        CFMDistributionDocument_PP distributionDocument = CFMDistributionDocument_PP::construct(_sourceRecId, _sourceDataAreaId, _sourceType, _currency);

        return distributionDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForPrepayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>CFMDistributionDocument</c> based on prepayments for purchase order.
    /// </summary>
    /// <param name="_purchTable">
    /// Source purchase order.
    /// </param>
    /// <returns>
    /// Instance of <c>CFMDistributionDocument</c>.
    /// </returns>
    public static CFMDistributionDocument newForPrepayment(PurchTable _purchTable)
    {
        return CFMDistributionDocument::newForPrepaymentCalc(_purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForPrepaymentCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>CFMDistributionDocument</c> based on prepayments for purchase invoices or purch orders.
    /// </summary>
    /// <param name="_purchTable">
    /// Source purchase order.
    /// </param>
    /// <param name="_calcOnlyInvoice">
    /// Is calc prepayment only purchase invoices.
    /// </param>
    /// <returns>
    /// Instance of <c>CFMDistributionDocument</c>.
    /// </returns>
    public static CFMDistributionDocument newForPrepaymentCalc(PurchTable _purchTable, boolean _calcOnlyInvoice = false)
    {
        CFMReferenceDistributionLinesTmp prepaymentDistributionLines;
        CFMReferenceDistributionHeaderTmp prepaymentDistributionsHeader;
        CFMDistributionCalcPrepayment_PO prepaymentDistributionCalc = CFMDistributionCalcPrepayment_PO::construct(_purchTable);

        prepaymentDistributionCalc.parmIsCalcOnlyPreInvoice(_calcOnlyInvoice);

        prepaymentDistributionCalc.calc(prepaymentDistributionsHeader, prepaymentDistributionLines);

        return CFMDistributionDocument_DistTmp::construct(prepaymentDistributionsHeader,
            prepaymentDistributionLines,
            _purchTable.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collapseAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// For each header in the document leaves the lines with the dominate sign, the lines of the opposite sign are redistributed proportionally.
    /// </summary>
    public void collapseAmounts()
    {
        this.resetHeaderEnumerator();

        while (this.nextHeader())
        {
            this.collapseAmountsForHeader();

            if (this.totalAmountForHeader() == 0)
            {
                this.deleteHeader();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collapseAmountsForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// For currently selected header leaves the lines with the dominate sign, the lines of the opposite sign are redistributed proportionally.
    /// </summary>
    protected void collapseAmountsForHeader()
    {
        AmountCur amountTotal;
        AmountCur amountOppositeTotal;

        if (this.totalAmountForHeader() == 0)
        {
            this.setLineSelection(CFMDistributionLineSelectionType::All);
        }
        else if (this.totalAmountForHeader() > 0)
        {
            amountTotal = this.totalPositiveAmountForHeader();
            amountOppositeTotal = this.totalAmountForHeader() - amountTotal;

            this.setLineSelection(CFMDistributionLineSelectionType::Negative);
        }
        else
        {
            amountOppositeTotal = this.totalPositiveAmountForHeader();
            amountTotal = this.totalAmountForHeader() - amountOppositeTotal;

            this.setLineSelection(CFMDistributionLineSelectionType::Positive);
        }

        this.deleteSelectedLinesForHeader();
        this.setLineSelection(CFMDistributionLineSelectionType::All);

        Percent percentCumulative;
        AmountCur amountCumulative;
        AmountCur amountOppositeCumulative;

        while (this.nextLine())
        {
            AmountCur amountInitial = this.lineAmount();
            Percent percentInitial = (amountCumulative + amountInitial) * 100 / amountTotal - percentCumulative;

            AmountCur amountOppositeToAdd = CurrencyExchangeHelper::amount((percentCumulative + percentInitial) * amountOppositeTotal / 100 - amountOppositeCumulative, this.currencyCode());

            this.setLineAmount(this.lineAmount() + amountOppositeToAdd);

            percentCumulative += percentInitial;
            amountCumulative += amountInitial;
            amountOppositeCumulative += amountOppositeToAdd;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns document currency code.
    /// </summary>
    /// <returns>
    /// Currency code for the distribution document.
    /// </returns>
    public abstract CurrencyCode currencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the header that is currently selected.
    /// </summary>
    public abstract void deleteHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLinesForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all lines linked to the currently selected header.
    /// </summary>
    protected abstract void deleteLinesForHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSelectedLinesForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the lines linked to the currently selected header according to defined selection range.
    /// </summary>
    protected abstract void deleteSelectedLinesForHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether some header is selected.
    /// </summary>
    /// <returns>
    /// true if some header is selected; otherwise, false.
    /// </returns>
    public boolean existsHeader()
    {
        return headerSelected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the line for the currently selected header according the specified analitycs.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// <c>CFMLedgerDimension</c> value of required line
    /// </param>
    /// <param name="_taxGroup">
    /// Tax group of the required line
    /// </param>
    /// <param name="_taxItemGroup">
    /// Tax item group of the required line
    /// </param>
    /// <returns>
    /// true if the line exists and selected; otherwise, false.
    /// </returns>
    public boolean findLine(CFMLedgerDimension _ledgerDimension, Taxgroup _taxGroup, TaxItemGroup _taxItemGroup)
    {
        lineLedgerDimensionRange.value(queryValue(_ledgerDimension));
        lineTaxGroupRange.value(queryValue(_taxGroup));
        lineTaxItemGroupRange.value(queryValue(_taxItemGroup));

        this.lineQueryRunCreate();

        return this.nextLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the amount for currently selected line.
    /// </summary>
    /// <returns>
    /// Amount of current line.
    /// </returns>
    public abstract AmountCur lineAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the dimension value for currently selected line.
    /// </summary>
    /// <returns>
    /// <c>CFMLedgerDimension</c> value of current line.
    /// </returns>
    public abstract CFMLedgerDimension lineLedgerDimension()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recreates distribution line enumerator.
    /// </summary>
    protected abstract void lineQueryRunCreate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax group for currently selected line.
    /// </summary>
    /// <returns>
    /// Tax group of current line.
    /// </returns>
    public abstract TaxGroup lineTaxGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax item group for currently selected line.
    /// </summary>
    /// <returns>
    /// Tax item group of current line.
    /// </returns>
    public abstract TaxItemGroup lineTaxItemGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the next header in the document.
    /// </summary>
    /// <returns>
    /// true if the header exists and selected; otherwise, false.
    /// </returns>
    public boolean nextHeader()
    {
        headerSelected = headerQueryRun.next();

        this.resetLineEnumerator();

        return headerSelected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the next line in the document.
    /// </summary>
    /// <returns>
    /// true if the line exists and selected; otherwise, false.
    /// </returns>
    public boolean nextLine()
    {
        return lineQueryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>redistributeRemainingAmountsForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subtracts the line amounts of selected header of given distribution document proportionally from each line of the current header of current document.
    /// </summary>
    /// <param name="_distributionDocument">
    /// The instance of <c>CFMDistributionDocument</c>
    /// </param>
    protected void redistributeRemainingAmountsForHeader(CFMDistributionDocument _distributionDocument)
    {
        _distributionDocument.setLineSelection(CFMDistributionLineSelectionType::All);
        this.setLineSelection(CFMDistributionLineSelectionType::Positive);

        //redistribute remaining _distributionDocument amounts accross positive distribution lines
        while (_distributionDocument.nextLine())
        {
            if (this.totalPositiveAmountForHeader() > _distributionDocument.lineAmount())
            {
                AmountCur currentAmountCumulative = 0;
                AmountCur oppositeAmountCumulative = 0;
                AmountCur oppositeAmountTotal = _distributionDocument.lineAmount();
                AmountCur currentAmountTotal = this.totalPositiveAmountForHeader();

                this.resetLineEnumerator();

                //redistribute opposite distribution line amount proportionally across positive line amounts
                while (this.nextLine())
                {
                    currentAmountCumulative += this.lineAmount();
                    AmountCur oppositeAmountCur = CurrencyExchangeHelper::amount(oppositeAmountTotal * currentAmountCumulative / currentAmountTotal - oppositeAmountCumulative, this.currencyCode());
                    oppositeAmountCumulative += oppositeAmountCur;

                    this.setLineAmount(this.lineAmount() - oppositeAmountCur);
                }

                //delete opposite distribution line
                _distributionDocument.setLineAmount(0);
            }
            else
            {
                //decrease opposite distribution line with remaining positive amount for header
                _distributionDocument.setLineAmount(_distributionDocument.lineAmount() - this.totalPositiveAmountForHeader());

                //delete remaining positive lines for header
                this.deleteSelectedLinesForHeader();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetHeaderEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets distribution header enumerator.
    /// </summary>
    public void resetHeaderEnumerator()
    {
        headerQueryRun.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLineEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets distribution line enumerator.
    /// </summary>
    public void resetLineEnumerator()
    {
        this.resetLineRanges();

        this.lineQueryRunCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLineRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ranges on the document lines.
    /// </summary>
    protected void resetLineRanges()
    {
        str amountRangeValue;

        switch (lineSelectionType)
        {
            case CFMDistributionLineSelectionType::All:
                amountRangeValue = SysQuery::valueUnlimited();
                break;

            case CFMDistributionLineSelectionType::Positive:
                amountRangeValue = '>0';
                break;

            case CFMDistributionLineSelectionType::Negative:
                amountRangeValue = '<0';
                break;

            case CFMDistributionLineSelectionType::Zero:
                amountRangeValue = queryValue(0);
                break;
        }

        lineAmountRange.value(amountRangeValue);
        lineLedgerDimensionRange.value(SysQuery::valueUnlimited());
        lineTaxGroupRange.value(SysQuery::valueUnlimited());
        lineTaxItemGroupRange.value(SysQuery::valueUnlimited());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the amount for currently selected line.
    /// </summary>
    /// <param name="_amount">
    /// Amount for current line
    /// </param>
    public abstract void setLineAmount(AmountCur _amount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the set of lines to be selected.
    /// </summary>
    /// <param name="_selectionType">
    /// Line selection type
    /// </param>
    public void setLineSelection(CFMDistributionLineSelectionType _selectionType)
    {
        lineSelectionType = _selectionType;

        this.resetLineEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleWithDistributionDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subtracts the distribution lines of the given distribution document from the current document.
    /// </summary>
    /// <param name="_distributionDocument">
    /// The instance of <c>CFMDistributionDocument</c>
    /// </param>
    public void settleWithDistributionDocument(CFMDistributionDocument _distributionDocument)
    {
        this.resetHeaderEnumerator();

        _distributionDocument.resetHeaderEnumerator();

        if (_distributionDocument.nextHeader())
        {
            //Settling document header by header according predefined order
            while (this.nextHeader())
            {
                while (_distributionDocument.existsHeader() && this.totalPositiveAmountForHeader() != 0)
                {
                    //If total amount of current header is less then opposite document header, then collapse distribution lines
                    if (this.totalAmountForHeader() <= _distributionDocument.totalAmountForHeader())
                    {
                        this.collapseAmountsForHeader();
                    }

                    this.settleWithMatchingLinesForHeader(_distributionDocument);

                    this.setLineSelection(CFMDistributionLineSelectionType::Zero);
                    this.deleteSelectedLinesForHeader();

                    _distributionDocument.setLineSelection(CFMDistributionLineSelectionType::Zero);
                    _distributionDocument.deleteSelectedLinesForHeader();

                    this.redistributeRemainingAmountsForHeader(_distributionDocument);

                    //Check if current distribution header is fully settled
                    if (_distributionDocument.totalAmountForHeader() <= 0)
                    {
                        //get next header to settle
                        _distributionDocument.nextHeader();
                    }
                }
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleWithMatchingLinesForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subtracts the line amounts of selected header of given distribution document from the lines of the current header of current document that have similar analitycs.
    /// </summary>
    /// <param name="_distributionDocument">
    /// The instance of <c>CFMDistributionDocument</c>
    /// </param>
    protected void settleWithMatchingLinesForHeader(CFMDistributionDocument _distributionDocument)
    {
        _distributionDocument.setLineSelection(CFMDistributionLineSelectionType::All);
        this.setLineSelection(CFMDistributionLineSelectionType::All);

        //for each line of opposite distribution header try to settle with matching distribution line of current document header
        while (_distributionDocument.nextLine())
        {
            if (this.findLine(_distributionDocument.lineLedgerDimension(), _distributionDocument.lineTaxGroup(), _distributionDocument.lineTaxItemGroup()))
            {
                //if found line is negative or its amount is greater than the opposite line,
                //then all the amount of opposite line should be used and opposite line deleted
                if (this.lineAmount() < 0 || this.lineAmount() > _distributionDocument.lineAmount())
                {
                    this.setLineAmount(this.lineAmount() - _distributionDocument.lineAmount());
                    _distributionDocument.setLineAmount(0);
                }
                //else if the amount of opposite line is greater, then the found line should be deleted, the opposite line should be decreased
                else
                {
                    _distributionDocument.setLineAmount(_distributionDocument.lineAmount() - this.lineAmount());
                    this.setLineAmount(0);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmountForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amount for currently selected header.
    /// </summary>
    /// <returns>
    /// Total amount of current header.
    /// </returns>
    public abstract AmountCur totalAmountForHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalPositiveAmountForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amount of positive lines for currently selected header.
    /// </summary>
    /// <returns>
    /// Total amount of positive lines for current header.
    /// </returns>
    public abstract AmountCur totalPositiveAmountForHeader()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>