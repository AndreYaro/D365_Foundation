<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaym_CNAB_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendOutPaym_CNAB_BR extends VendOutPaym
{
    Counter                 numAmount;
    Counter                 numTextRec;
    Counter                 numRecords;
    AmountCur               sumAmount;

    CustVendCNAB_BR         vendCNAB;
    VendPaymModeTable       paymModeTable;

    str                     record;
    str                     range;
    ConfLayoutGroupId_BR    confLayoutGroupId;
    DialogField             dialogFiletype;

    ConfGroupId_BR          parmGroupId;
    ConfLayoutGroupId_BR    parmLayoutId;

    #ConfMacros_BR

    BankAccountTable        bankAccountTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendText</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void appendText(str _field)
    {
        record += _field;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return bank account id to be used to generate payment files. If bridge posting is used, return the bank account related to
    /// payment method, else return the bank account selected.
    /// </summary>
    /// <returns>
    /// Bank AccountId
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AccountNum bankAccountId()
    {
        if (this.getCustVendPaymModeTableBuffer().FurtherPosting == NoYes::No)
        {
            bankAccountTable = BankAccountTable::find(accountId);
        }
        else
        {
            bankAccountTable = BankAccountTable::find(this.getCustVendPaymModeTableBuffer().parmPaymAccount());
        }

        return bankAccountTable.AccountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    void close()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCompanyDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void createCompanyDocument(LedgerJournalId   _ledgerJournalId,
                                PaymMode          _paymMode)
    {
        LedgerJournalTrans           ledgerJournalTransloc;
        LedgerJournalTransPayment_BR ledgerJournalTransPayment_BR;
        BankRemittanceFileId         bankRemittanceFileId = '';

        ttsbegin;
        while select forupdate ledgerJournalTransloc
            where ledgerJournalTransloc.JournalNum            == _ledgerJournalId
                && ledgerJournalTransloc.PaymMode             == _paymMode
                && ledgerJournalTransloc.AccountType          == LedgerJournalACType::Vend
                && (ledgerJournalTransloc.PaymentStatus       == CustVendPaymStatus::None
                || ledgerJournalTransloc.PaymentStatus        == CustVendPaymStatus::Rejected
                || (ledgerJournalTransloc.PaymentStatus       == CustVendPaymStatus::Sent
                && ledgerJournalTransloc.BankRemittanceFileId == bankRemittanceFileId))
        {
            if (ledgerJournalTransloc.PaymentStatus != CustVendPaymStatus::Sent )
            {
                ledgerJournalTransPayment_BR = LedgerJournalTransPayment_BR::find(ledgerJournalTransloc.RecId, true);
                ledgerJournalTransPayment_BR.epCompanyDocument_BR   = ledgerJournalTransPayment_BR.setCompanyDocument_BR(ledgerJournalTransloc);
                ledgerJournalTransPayment_BR.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendEPRemitInfo</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void createVendEPRemitInfo(LedgerJournalId   _ledgerJournalId)
    {
        LedgerJournalTrans      ledgerJournalTransLoc;
        VendEPRemitInfo_BR      vendEPRemitInfoLoc;
        CustVendPaymJournalFee  custVendPaymJournalFee;

        while select RecId from ledgerJournalTransLoc
            where ledgerJournalTransLoc.JournalNum == _ledgerJournalId
        {
            if (!VendEPRemitInfo_BR::find(ledgerJournalTransLoc.RecId))
            {
                select custVendPaymJournalFee
                    where custVendPaymJournalFee.FeeTransRecId == ledgerJournalTransLoc.RecId;

                if (!custVendPaymJournalFee)
                {
                    vendEPRemitInfoLoc.LedgerJournalTrans = ledgerJournalTransLoc.RecId;
                    vendEPRemitInfoLoc.insert();
                    vendEPRemitInfoLoc.reread();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendOutPaymRecordRootClassId</Name>
				<Source><![CDATA[
    ClassId custVendOutPaymRecordRootClassId()
    {
        return classNum(VendOutPaymRecord_CNAB_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteVendEPRemitInfo</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void deleteVendEPRemitInfo(LedgerJournalId   _ledgerJournalId)
    {
        LedgerJournalTrans  ledgerJournalTransLoc;
        VendEPRemitInfo_BR  vendEPRemitInfoLoc;

        while select RecId from ledgerJournalTransLoc
            where ledgerJournalTransLoc.JournalNum == _ledgerJournalId
        {
            vendEPRemitInfoLoc = VendEPRemitInfo_BR::find(ledgerJournalTransLoc.RecId);
            if (vendEPRemitInfoLoc &&
                vendEPRemitInfoLoc.BankFolder == '' &&
                vendEPRemitInfoLoc.DocumentType == '' &&
                vendEPRemitInfoLoc.Instruction_1 == '' &&
                vendEPRemitInfoLoc.Instruction_2 == '' &&
                vendEPRemitInfoLoc.TypedLine     == NoYes::No &&
                vendEPRemitInfoLoc.BarCodeInfo   == '')
            {
                delete_from vendEPRemitInfoLoc
                    where vendEPRemitInfoLoc.LedgerJournalTrans == ledgerJournalTransLoc.RecId;
                vendEPRemitInfoLoc.reread();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
    public void generatePaymentLines()
    {
        #OCCRetryCount
        LedgerJournalTrans      ledgerJournalTrans;
        VendOutPaymRecord       vendOutPaymRecord;
        boolean                 ok = true;
        boolean                 hasData = false;
        VendTransEPRemit_BR     vendTransEPRemitLoc;
        VendEPRemitInfo_BR      vendEPRemitInfoLoc;
        SpecTrans               specTransLoc;
        ElectronicPaymentRemitExport_BR epRemitExport_BR = ElectronicPaymentRemitExport_BR::construct();

        try
        {
            ttsbegin;

            setPrefix("@SYS17561");

            queryRun.reset();

            if (queryRun.next())
            {
                ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));
                if (ledgerJournalTrans)
                {
                    this.createCompanyDocument(ledgerJournalTrans.JournalNum, ledgerJournalTrans.PaymMode);
                }
                queryRun.reset();
            }

            epRemitExport_BR.parmCodePage(System.Text.Encoding::ASCII.WindowsCodePage);

            while (queryRun.next())
            {
                ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));

                if (!this.isOffsetAccountValid(ledgerJournalTrans))
                {
                    continue;
                }

                if (!this.isVendorAccountActiveForDate(ledgerJournalTrans))
                {
                    warning(strFmt("@SYS115093", ledgerJournalTrans.Voucher));
                    continue;
                }

                epRemitExport_BR.epRemitParms(this.parmLedgerJournalId(), ledgerJournalTrans.PaymMode, filename, queryRun.query(), ledgerJournalTrans.OffsetLedgerDimension);

                vendOutPaymRecord = CustVendOutPaymRecord::construct(ledgerJournalTrans.PaymMode,
                                                                        ledgerJournalTrans.PaymSpec,
                                                                        this,
                                                                        this.vendPaym(ledgerJournalTrans));
                vendOutPaymRecord.parmFile(file);

                setPrefix(strFmt("@SYS66088",
                                    ledgerJournalTrans.TransDate,
                                    ledgerJournalTrans.Voucher,
                                    ledgerJournalTrans.parmAccount()));

                if (vendOutPaymRecord.checkValues(ledgerJournalTrans, this.parmProgress()))
                {
                    hasData = true;
                    vendOutPaymRecord.output();
                    outPaymRecordList.addEnd(vendOutPaymRecord);
                    select specTransLoc
                        where   specTransLoc.SpecRecId == ledgerJournalTrans.RecId &&
                                specTransLoc.SpecTableId == tableName2id(tableStr(LedgerJournalTrans));

                    changecompany(specTransLoc.RefCompany)
                    {
                        vendTransEPRemitLoc.clear();

                        select vendTransEPRemitLoc
                            where vendTransEPRemitLoc.VendTransOpenRefRecId == specTransLoc.RefRecId;

                        vendEPRemitInfoLoc = VendEPRemitInfo_BR::find(ledgerJournalTrans.RecId);
                        if (specTransLoc && vendTransEPRemitLoc)
                        {
                            select forupdate vendTransEPRemitLoc
                                where vendTransEPRemitLoc.VendTransOpenRefRecId == specTransLoc.RefRecId;

                            vendTransEPRemitLoc.RemitDate         = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                            vendTransEPRemitLoc.AccountNum        = ledgerJournalTrans.parmAccount();
                            vendTransEPRemitLoc.BankAccountId     = bankAccountTable.AccountID;
                            vendTransEPRemitLoc.JournalNum        = ledgerJournalTrans.JournalNum;
                            vendTransEPRemitLoc.DueDate           = VendTransOpen::find(specTransLoc.RefRecId).DueDate;
                            vendTransEPRemitLoc.LayoutGroupId     = VendPaymModeTable::find(ledgerJournalTrans.PaymMode).ExportLayoutGroupId_BR;
                            vendTransEPRemitLoc.update();
                            vendTransEPRemitLoc.reread();
                        }
                        else if (specTransLoc && !vendTransEPRemitLoc)
                        {
                            vendTransEPRemitLoc.VendTransOpenRefRecId = specTransLoc.RefRecId;
                            vendTransEPRemitLoc.AccountNum            = ledgerJournalTrans.parmAccount();
                            vendTransEPRemitLoc.RemitDate             = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                            vendTransEPRemitLoc.BankAccountId         = bankAccountTable.AccountID;
                            vendTransEPRemitLoc.JournalNum            = ledgerJournalTrans.JournalNum;
                            vendTransEPRemitLoc.DueDate               = VendTransOpen::find(specTransLoc.RefRecId).DueDate;
                            vendTransEPRemitLoc.LayoutGroupId         = VendPaymModeTable::find(ledgerJournalTrans.PaymMode).ExportLayoutGroupId_BR;
                            vendTransEPRemitLoc.insert();
                            vendTransEPRemitLoc.reread();
                        }
                    }
                    this.updateLedgerJournalTrans(ledgerJournalTrans, vendOutPaymRecord, true);
                    this.trackSequenceOnPaymMode(CustVendPaymModeTable::findCommon(ledgerJournalTrans, true));
                }
                else
                {
                    ok = false;
                }
            }

            if (!hasData)
            {
                info("@SYS62195");
            }

            if (!ok)
            {
                file = null;
                throw error("@SYS18447");
            }
            else
            {
                info(strFmt("@GLS969", filename));
            }

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initRecord()
    {
        record = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    public PaymInterfaceName interfaceName()
    {
        return "@GLS423";
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    void open()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    LedgerJournalTrans parmLedgerJournalTrans()
    {
        return LedgerJournalTrans::find(this.parmLedgerJournalId(), this.parmLedgerJournalTrans().Voucher, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendCNAB</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustVendCNAB_BR parmVendCNAB(CustVendCNAB_BR _vendCNAB = vendCNAB)
    {
        vendCNAB = _vendCNAB;

        return vendCNAB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>total</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void total(AmountMST _amountMST)
    {
        sumAmount += _amountMST;

        numAmount++;
        numRecords++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        boolean ok = true;

        if (!filename)
        {
            ok = checkFailed("@GLS221430");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write2File</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void write2File()
    {
        file.write(record);
        this.initRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDialogDBcallsOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method batches the database calls previously used in the dialog to be run on server.
    /// </summary>
    /// <param name="_ledgerJournalId">
    /// Passed from dialog
    /// </param>
    /// <returns>
    /// Container with values necessary for the dialog.
    /// </returns>
    /// <remarks>
    /// This method is called from dialog to run on the server and reduce the number of client/server calls
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static container runDialogDBcallsOnServer(LedgerJournalId _ledgerJournalId)
    {
        LedgerJournalTrans      ledgerJournalTransTemp;
        ConfGroupId_BR          groupId;
        ConfLayoutGroupId_BR    layoutId;
        BankAccountTable        bankAccountTable;
        VendPaymModeTable       vendPaymModeTable;
        container values;

        select firstonly ledgerJournalTransTemp where ledgerJournalTransTemp.JournalNum == _ledgerJournalId;
        vendPaymModeTable = VendPaymModeTable::find(ledgerJournalTransTemp.PaymMode);

        // If the payment method does not use bridge posting, use the
        // bank account specified on the ledgerJournalTrans record.
        // Otherwise, use the payment account on the payment method.
        if (vendPaymModeTable.FurtherPosting == NoYes::No)
        {
            bankAccountTable = BankAccountTable::find(ledgerJournalTransTemp.parmOffsetAccount());
        }
        else
        {
            bankAccountTable = BankAccountTable::find(vendPaymModeTable.parmPaymAccount());
        }

        layoutId = vendPaymModeTable.ExportLayoutGroupId_BR;

        groupId  = ConfLayoutGroups_BR::find(layoutId).ConfGroupId;

        values = values + bankAccountTable.AccountID;
        values = values + bankAccountTable.AccountNum;
        values = values + layoutId;
        values = values + groupId;

        return values;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userInteraction</Name>
				<Source><![CDATA[
    public CustVendOutPaymUserInteraction userInteraction(Args _args = null)
    {
        if (_args)
        {
            _args.parmEnum(UserInteractive::No);
        }

        var ret = super(_args);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>