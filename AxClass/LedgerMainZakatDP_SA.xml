<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerMainZakatDP_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerMainZakatDP_SA</c> class is the Report Data Provider class that supports the
///    <c>LedgerMainReportZakat_SA</c> report.
/// </summary>
/// <remarks>
///    This class provides the methods that are used by the <c>LedgerMainReportZakat_SA</c> report.
/// </remarks>
[
    SRSReportParameterAttribute(classstr(LedgerZakatReportContract_SA))
]
public class LedgerMainZakatDP_SA extends SrsReportDataProviderPreProcessTempDB
{
    // source of report data

    // temporary data store
    LedgerMainZakatTmp_SA                   ledgerMainZakatTmp;

    // Report parameters
    LedgerFiscalYearZakat_SA                fiscalYear;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcBaseItemByZakatType</Name>
				<Source><![CDATA[
        private AmountCur calcBaseItemByZakatType(LedgerItemTypeZakat_SA _zakatType, boolean incOpeningBal = false)
    {
        AmountCur amountCur = GeneralJournalAccountEntryZakat_SA::getTotalAmount(_zakatType, fiscalYear);
        if (incOpeningBal == true)
        {
            amountCur += GeneralJournalAccountEntryZakat_SA::getOpeningBalance(_zakatType, fiscalYear);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>capital</Name>
				<Source><![CDATA[
        private AmountCur capital()
    {
        return ledgerMainZakatTmp.BaseItem20601;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciation</Name>
				<Source><![CDATA[
        private AmountCur depreciation()
    {
        AssetDepreciationZakat_SA assetDepZakat;

        select DepreciationDifference
            from assetDepZakat
                where assetDepZakat.Year == fiscalYear;

        return assetDepZakat.DepreciationDifference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerMainZakatTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method is used to query the <c>LedgerMainZakatTmp_SA</c> table and returns the data table.
    /// </summary>
    /// <returns>
    ///    The required report data table.
    /// </returns>
    [SRSReportDataSetAttribute('LedgerMainZakatTmp')]
    public LedgerMainZakatTmp_SA getLedgerMainZakatTmp()
    {
        select * from ledgerMainZakatTmp;
        return ledgerMainZakatTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netBase</Name>
				<Source><![CDATA[
        private AmountCur netBase()
    {
        return this.totalBase() - this.totaldeductions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>netProfit</Name>
				<Source><![CDATA[
        private AmountCur netProfit()
    {
        return this.totalRevenue() - this.totalExpenses();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic that is used by the
    ///    <c>LedgerMainReportZakat_SA</c> report.
    /// </remarks>
    public void processReport()
    {
        // access the Report Data Contract information
        LedgerZakatReportContract_SA contract = this.parmDataContract() as LedgerZakatReportContract_SA;

        // retrieve the contract control parameters
        fiscalYear = contract.parmFiscalYear();

        // write the relevant field data to the temporary data store
        ledgerMainZakatTmp.BaseItem20101                = this.calcBaseItemByZakatType(LedgerItemTypeZakat_SA::ActivityRevenue);
        ledgerMainZakatTmp.BaseItem20102                = this.calcBaseItemByZakatType(LedgerItemTypeZakat_SA::OtherRevenue);
        ledgerMainZakatTmp.BaseItem20103                = GeneralJournalAccountEntryZakat_SA::getClosingBalance(fiscalYear);
        ledgerMainZakatTmp.BaseItem20201                = GeneralJournalAccountEntryZakat_SA::getOpeningBalance(LedgerItemTypeZakat_SA::InventoryOpening, fiscalYear);
        ledgerMainZakatTmp.BaseItem20202                = this.calcBaseItemByZakatType(LedgerItemTypeZakat_SA::ForeignPurchase);
        ledgerMainZakatTmp.BaseItem20203                = this.calcBaseItemByZakatType(LedgerItemTypeZakat_SA::LocalPurchase);
        ledgerMainZakatTmp.BaseItem20204                = this.calcBaseItemByZakatType(LedgerItemTypeZakat_SA::DirectExpenses);
        ledgerMainZakatTmp.BaseItem20205                = this.calcBaseItemByZakatType(LedgerItemTypeZakat_SA::SalariesAndWages);
        ledgerMainZakatTmp.BaseItem20206                = this.calcBaseItemByZakatType(LedgerItemTypeZakat_SA::SubContractor);
        ledgerMainZakatTmp.BaseItem20207                = this.calcBaseItemByZakatType(LedgerItemTypeZakat_SA::Depreciation);
        ledgerMainZakatTmp.BaseItem20208                = this.calcBaseItemByZakatType(LedgerItemTypeZakat_SA::ConsultationFees);
        ledgerMainZakatTmp.BaseItem20209                = this.calcBaseItemByZakatType(LedgerItemTypeZakat_SA::ReservationsAndProvisions, true);
        ledgerMainZakatTmp.BaseItem20299                = this.calcBaseItemByZakatType(LedgerItemTypeZakat_SA::MiscExpenses);
        ledgerMainZakatTmp.BaseItem20401                = this.depreciation();
        ledgerMainZakatTmp.BaseItem20402                = this.calcBaseItemByZakatType(LedgerItemTypeZakat_SA::ReservationsAndProvisions, true);
        ledgerMainZakatTmp.BaseItem20499                = this.calcBaseItemByZakatType(LedgerItemTypeZakat_SA::NetProfitOtherAmendments);
        ledgerMainZakatTmp.BaseItem20601                = GeneralJournalAccountEntryZakat_SA::getOpeningBalance(LedgerItemTypeZakat_SA::Capital, fiscalYear);
        ledgerMainZakatTmp.BaseItem20602                = GeneralJournalAccountEntryZakat_SA::getCreditDebitAmount(LedgerItemTypeZakat_SA::CarriedOverProfits, fiscalYear);
        ledgerMainZakatTmp.BaseItem20603                = GeneralJournalAccountEntryZakat_SA::getCreditDebitAmount(LedgerItemTypeZakat_SA::Reservations, fiscalYear);
        ledgerMainZakatTmp.BaseItem20604                = GeneralJournalAccountEntryZakat_SA::getCreditDebitAmount(LedgerItemTypeZakat_SA::Provisions, fiscalYear);
        ledgerMainZakatTmp.BaseItem20605                = GeneralJournalAccountEntryZakat_SA::getCreditDebitAmount(LedgerItemTypeZakat_SA::Loans, fiscalYear);
        ledgerMainZakatTmp.BaseItem20606                = GeneralJournalAccountEntryZakat_SA::getCreditDebitAmount(LedgerItemTypeZakat_SA::OwnersPartnersAccount, fiscalYear);
        ledgerMainZakatTmp.BaseItem20699                = GeneralJournalAccountEntryZakat_SA::getCreditDebitAmount(LedgerItemTypeZakat_SA::OtherAddedItems, fiscalYear);
        ledgerMainZakatTmp.NetProfit20600               = this.netProfit();
        ledgerMainZakatTmp.BaseItem20701                = GeneralJournalAccountEntryZakat_SA::getCreditDebitAmount(LedgerItemTypeZakat_SA::FixedAssetsNetValue, fiscalYear);
        ledgerMainZakatTmp.BaseItem20702                = GeneralJournalAccountEntryZakat_SA::getCreditDebitAmount(LedgerItemTypeZakat_SA::Investments, fiscalYear);
        ledgerMainZakatTmp.BaseItem20703                = GeneralJournalAccountEntryZakat_SA::getCreditDebitAmount(LedgerItemTypeZakat_SA::CarriedOverLosses, fiscalYear);
        ledgerMainZakatTmp.BaseItem20704                = GeneralJournalAccountEntryZakat_SA::getCreditDebitAmount(LedgerItemTypeZakat_SA::PresettingExpenses, fiscalYear);
        ledgerMainZakatTmp.BaseItem20799                = GeneralJournalAccountEntryZakat_SA::getCreditDebitAmount(LedgerItemTypeZakat_SA::OtherChargedItems, fiscalYear);
        ledgerMainZakatTmp.NetBase20800                 = this.netBase();
        ledgerMainZakatTmp.ZakatValue20900              = ledgerMainZakatTmp.NetBase20800 * 0.025;
        ledgerMainZakatTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAdjustment</Name>
				<Source><![CDATA[
        private AmountCur totalAdjustment()
    {
        return ledgerMainZakatTmp.BaseItem20209 + this.depreciation() + ledgerMainZakatTmp.BaseItem20499;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalBase</Name>
				<Source><![CDATA[
        private AmountCur totalBase()
    {
        return ledgerMainZakatTmp.BaseItem20601
                    + ledgerMainZakatTmp.BaseItem20602
                    + ledgerMainZakatTmp.BaseItem20603
                    + ledgerMainZakatTmp.BaseItem20604
                    + ledgerMainZakatTmp.BaseItem20605
                    + (ledgerMainZakatTmp.BaseItem20606 < 0 ? 0 : ledgerMainZakatTmp.BaseItem20606)
                    + ledgerMainZakatTmp.BaseItem20699
                    + this.netProfit() + this.totalAdjustment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totaldeductions</Name>
				<Source><![CDATA[
        private AmountCur totaldeductions()
    {
        return ledgerMainZakatTmp.BaseItem20702
                    + ledgerMainZakatTmp.BaseItem20703
                    + ledgerMainZakatTmp.BaseItem20704
                    + ledgerMainZakatTmp.BaseItem20799
                    + ledgerMainZakatTmp.BaseItem20701;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalExpenses</Name>
				<Source><![CDATA[
        private AmountCur totalExpenses()
    {
        return ledgerMainZakatTmp.BaseItem20101 + ledgerMainZakatTmp.BaseItem20102 + ledgerMainZakatTmp.BaseItem20103 + ledgerMainZakatTmp.BaseItem20204
                    + ledgerMainZakatTmp.BaseItem20205 + ledgerMainZakatTmp.BaseItem20206 + ledgerMainZakatTmp.BaseItem20207 + ledgerMainZakatTmp.BaseItem20208
                    + ledgerMainZakatTmp.BaseItem20209 + ledgerMainZakatTmp.BaseItem20299;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalRevenue</Name>
				<Source><![CDATA[
        private AmountCur totalRevenue()
    {
        return ledgerMainZakatTmp.BaseItem20101 + ledgerMainZakatTmp.BaseItem20102 + ledgerMainZakatTmp.BaseItem20103;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>