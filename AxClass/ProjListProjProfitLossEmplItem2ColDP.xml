<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjProfitLossEmplItem2ColDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjProfitLossEmplItem2ColDP</c> class is the report data provider class for the
///    associated <c>ProjListProjProfitLossEmplItem2Column</c> reports.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjStatementEmplItem)),
    SRSReportParameterAttribute(classStr(ProjListProjProfitLossProjContract))
]

class ProjListProjProfitLossEmplItem2ColDP extends SrsReportDataProviderPreProcessTempDB
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    ProjOptionTime          time;
    ProjOptionHours         hour;
    ProjOptionCost          expenses;
    ProjOptionItem          item;
    ProjOptionRevenue       revenue;
    ProjOptionOnAcc         onAcc;
    TransDate               projFromDate;
    TransDate               projBreakDate;
    TransDate               projToDate;
    TransDate               ledgerFromDate;
    TransDate               ledgerBreakDate;
    TransDate               ledgerToDate;
    projActualVsBudget      actualVsBudget2Col;
    ForecastModelId         forecastModelId;
    boolean                 skipBlankId;
    boolean                 skipZero;
    ProjShowAmount          showAmount;

    ProjListProjTrans_ProfitLoss    listProjTrans;
    ProjListProjTransLayout         listProjTransLayout;
    ProjListProjProfitLossTmp       projListProjProfitLossTmp;
    projStatement                   actualProjStatement;
    projStatement                   budgetProjStatement;

    QueryRun                qrun;

    ResourceRecId           resource;
    ProjEmplItemId          id;
    Name                    name;

    ProjListIDType          projListIDType;

    AmountMST               actualTotalCost;
    AmountMST               budgetTotalCost;
    AmountMST               actualRevenue;
    AmountMST               budgetRevenue;
    AmountMST               actualMargin;
    AmountMST               budgetMargin;

    int                     showTotalCost;
    int                     showMargin;
    int                     hourQtyDecimals;
    int                     amountDecimals;
    int                     grossMarginDecimals;
    int                     valueAddedDecimals;
    str                     totalCostLabel;
    str                     revenueLabel;
    str                     marginLabel;
    str                     headerLabel;
    str                     devianceLabel;
    str                     idLabel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
/// <summary>
///    Calculates the amounts required for the report.
/// </summary>
void calculate()
{
    if (projListIDType  == ProjListIDType::Employee)
    {
        actualProjStatement.parmResource(resource);
        actualProjStatement.parmEmplItemId(SysQuery::valueEmptyString());

        budgetProjStatement.parmResource(resource);
        budgetProjStatement.parmEmplItemId(SysQuery::valueEmptyString());
    }
    else
    {
        actualProjStatement.parmEmplItemId(id);
        actualProjStatement.parmResource(0);

        budgetProjStatement.parmEmplItemId(id);
        budgetProjStatement.parmResource(0);
    }

    actualTotalCost   = actualProjStatement.a300_Total_Cost(false,ProjListStateType::ProfitLoss);
    actualRevenue     = actualProjStatement.a100_Total_Revenue();
    actualMargin      = actualProjStatement.a500_Gross_Margin();

    budgetTotalCost   = budgetProjStatement.a300_Total_Cost(false,ProjListStateType::ProfitLoss);
    budgetRevenue     = budgetProjStatement.a100_Total_Revenue();
    budgetMargin      = budgetProjStatement.a500_Gross_Margin();
}

]]></Source>
			</Method>
			<Method>
				<Name>calculateNoId</Name>
				<Source><![CDATA[
/// <summary>
///    Calculates the amounts for blank IDs.
/// </summary>
void calculateNoId()
{
    actualProjStatement.parmEmplItemId(SysQuery::valueEmptyString());
    actualProjStatement.parmResource(0);

    budgetProjStatement.parmEmplItemId(SysQuery::valueEmptyString());
    budgetProjStatement.parmResource(0);

    actualTotalCost   = actualProjStatement.a300_Total_Cost(false,ProjListStateType::ProfitLoss);
    actualRevenue     = actualProjStatement.a100_Total_Revenue();
    actualMargin      = actualProjStatement.a500_Gross_Margin();

    budgetTotalCost   = budgetProjStatement.a300_Total_Cost(false,ProjListStateType::ProfitLoss);
    budgetRevenue     = budgetProjStatement.a100_Total_Revenue();
    budgetMargin      = budgetProjStatement.a500_Gross_Margin();
}

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjProfitLossTmp</Name>
				<Source><![CDATA[
/// <summary>
///    Gets the data from the <c>ProjListProjProfitLossTmp</c> table.
/// </summary>
/// <returns>
///    The date from the <c>ProjListProjProfitLossTmp</c> table.
/// </returns>
[SRSReportDataSetAttribute('ProjListProjProfitLossTmp')]
public ProjListProjProfitLossTmp getProjListProjProfitLossTmp()
{
    select * from projListProjProfitLossTmp;
    return projListProjProfitLossTmp;
}

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
/// <summary>
///    Initializes an instance of the <c>ProjListProjTrans</c> class.
/// </summary>
private void initProjListTrans()
{
    listProjTrans = ProjListProjTrans::construct(ProjListStateType::ProfitLoss, ProjListStateId::EmplItem);
    listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans);

    listProjTrans.parmTimeMaterial(timeMaterial);
    listProjTrans.parmFixedPrice(fixedPrice);
    listProjTrans.parmInvestment(investment);
    listProjTrans.parmInternalCost(internalCost);
    listProjTrans.parmTime(time);

    listProjTrans.parmHour(hour);
    listProjTrans.parmExpenses(expenses);
    listProjTrans.parmItem(item);
    listProjTrans.parmRevenue(revenue);
    listProjTrans.parmOnAcc(onAcc);

    listProjTrans.parmProjFromDate(projFromDate);
    listProjTrans.parmProjBreakDate(projBreakDate);
    listProjTrans.parmProjToDate(projToDate);
    listProjTrans.parmLedgerFromDate(ledgerFromDate);
    listProjTrans.parmLedgerBreakDate(ledgerBreakDate);
    listProjTrans.parmLedgerToDate(ledgerToDate);

    listProjTrans.parmActualVsBudget(actualVsBudget2Col);
    listProjTrans.parmForecastModelId(forecastModelId);

    listProjTransLayout.parmSkipBlank(skipBlankId);
    listProjTransLayout.parmSkipZero(skipZero);

    listProjTransLayout.parmShowAmount(showAmount);

    listProjTransLayout.parmLevel(2);
}

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjProfitLossTmp</Name>
				<Source><![CDATA[
/// <summary>
///    Gets the required data and inserts it into the temporary table.
/// </summary>
private void insertProjListProjProfitLossTmp()
{
    projListProjProfitLossTmp.clear();

    projListProjProfitLossTmp.Id            = id;
    projListProjProfitLossTmp.IdLabel       = idLabel;
    projListProjProfitLossTmp.Name          = name;
    projListProjProfitLossTmp.ProjListIdType = projListIDType;

    projListProjProfitLossTmp.TotalCost     = listProjTransLayout.showAmountReport(actualTotalCost, showAmount);
    projListProjProfitLossTmp.TotalCost1    = listProjTransLayout.showAmountReport(budgetTotalCost, showAmount);
    projListProjProfitLossTmp.TotalCost2    = ProjListProjHelpClass::calcActualVsBudget(projListProjProfitLossTmp.TotalCost,
                                                projListProjProfitLossTmp.TotalCost1, actualVsBudget2Col, true);

    projListProjProfitLossTmp.Revenue       = listProjTransLayout.showAmountReport(actualRevenue, showAmount);
    projListProjProfitLossTmp.Revenue1      = listProjTransLayout.showAmountReport(budgetRevenue, showAmount);
    projListProjProfitLossTmp.Revenue2      = ProjListProjHelpClass::calcActualVsBudget(projListProjProfitLossTmp.Revenue,
                                                projListProjProfitLossTmp.Revenue1, actualVsBudget2Col, false);

    projListProjProfitLossTmp.GrossMargin   = listProjTransLayout.showAmountReport(actualMargin, showAmount);
    projListProjProfitLossTmp.GrossMargin1  = listProjTransLayout.showAmountReport(budgetMargin, showAmount);
    projListProjProfitLossTmp.GrossMargin2  = ProjListProjHelpClass::calcActualVsBudget(projListProjProfitLossTmp.GrossMargin,
                                                projListProjProfitLossTmp.GrossMargin1, actualVsBudget2Col, false);

    // set labels
    projListProjProfitLossTmp.HeaderLabel     = headerLabel;
    projListProjProfitLossTmp.TotalCostLabel  = totalCostLabel;
    projListProjProfitLossTmp.RevenueLabel    = revenueLabel;
    projListProjProfitLossTmp.GrossMarginLabel= marginLabel;
    projListProjProfitLossTmp.DevianceLabel   = devianceLabel;

    // set decimal values
    projListProjProfitLossTmp.DecimalHourQty     = hourQtyDecimals;
    projListProjProfitLossTmp.DecimalValueAdded  = valueAddedDecimals;
    projListProjProfitLossTmp.DecimalGrossMargin = grossMarginDecimals;
    projListProjProfitLossTmp.DecimalAmount      = amountDecimals;

    // set field visibility
    projListProjProfitLossTmp.ShowGrossMargin        = showMargin;
    projListProjProfitLossTmp.ShowTotalCost          = showTotalCost;

    projListProjProfitLossTmp.insert();
}

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
/// <summary>
///    Indicates whether the amounts are equal to zero.
/// </summary>
/// <returns>
///    true if the values are not zero; otherwise, false.
/// </returns>
boolean lineValue()
{
    return ((actualRevenue      != 0) ||
            (budgetRevenue      != 0) ||
            (actualTotalCost    != 0) ||
            (budgetTotalCost    != 0) ||
            (actualMargin       != 0) ||
            (budgetMargin       != 0));
}

]]></Source>
			</Method>
			<Method>
				<Name>printEmplItem</Name>
				<Source><![CDATA[
/// <summary>
///    Gets the employee and item records and calls the <c>calculate</c> method.
/// </summary>
void printEmplItem()
{
    ResourceView            resourceLocal;
    InventTable             itemTableLocal;
    SMASubscriptionTable    smaTableLocal;

    if (SysReportRun::changed(qrun,tableNum(ResourceView)))
    {
        resourceLocal   = qrun.get(tableNum(ResourceView));

        resource        = resourceLocal.RecId;
        id              = ResourceFacade::getID(resource);
        name            = ResourceFacade::getName(resource);
        projListIDType  = ProjListIDType::Employee;
    }

    if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)) && SysReportRun::changed(qrun,tableNum(InventTable)))
    {
        itemTableLocal  = qrun.get(tableNum(InventTable));

        id              = itemTableLocal.ItemId;
        name            = itemTableLocal.defaultProductName();
        projListIDType  = ProjListIDType::Item;
    }

    if (isConfigurationkeyEnabled(configurationKeyNum(SMASubscription)) && SysReportRun::changed(qrun,tableNum(SMASubscriptionTable)))
    {
        smaTableLocal   = qrun.get(tableNum(SMASubscriptionTable));

        id              = smaTableLocal.SubscriptionId;
        name            = smaTableLocal.Name;
        projListIDType  = ProjListIDType::Subscription;
    }

    this.calculate();

    if (! skipZero || (this.lineValue()))
    {
        this.insertProjListProjProfitLossTmp();
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
/// <summary>
///    Processes the report business logic.
/// </summary>
/// <remarks>
///    This method provides the ability to write the report business logic. It will be called by SSRS at
///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
/// </remarks>
public void processReport()
{
    ProjListProjProfitLossProjContract contract = this.parmDataContract() as ProjListProjProfitLossProjContract;

    timeMaterial = contract.parmTimeMaterial();
    fixedPrice = contract.parmFixedPrice();
    investment = contract.parmInvestment();
    internalCost = contract.parmInternalCost();
    time = contract.parmTime();

    hour = contract.parmHour();
    expenses = contract.parmExpenses();
    item = contract.parmItem();
    revenue = contract.parmRevenue();
    onAcc = contract.parmOnAcc();

    projFromDate = contract.parmProjFromDate();
    projToDate = contract.parmProjToDate();
    projBreakDate = contract.parmProjBreakDate();
    ledgerFromDate = contract.parmLedgerFromDate();
    ledgerToDate = contract.parmLedgerToDate();
    ledgerBreakDate = contract.parmLedgerBreakDate();

    actualVsBudget2Col = contract.parmActualVsBudget2Col();
    forecastModelId = contract.parmForecastModelIdV2();

    skipBlankId = contract.parmSkipBlankId();
    skipZero = contract.parmSkipZero();

    showAmount = contract.parmShowAmount();

    this.initProjListTrans();
    this.setIdLabel();

    [showTotalCost, showMargin] = listProjTrans.setDisplayFlags2Column(hour, expenses, item);
    [hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

    headerLabel = listProjTrans.formatSelection(listProjTransLayout.parmShowAmount(),false);

    [totalCostLabel, revenueLabel, marginLabel, devianceLabel] = listProjTrans.setDisplayLabel2Column(hour, expenses, item);

    actualProjStatement = projStatement::newProjListProfitLoss(listProjTrans,ProjListStateProjType::Project,ProjActualBudget::Actual, listProjTransLayout.parmAmountQty());
    budgetProjStatement = projStatement::newProjListProfitLoss(listProjTrans,ProjListStateProjType::Project,ProjActualBudget::Budget, listProjTransLayout.parmAmountQty(),forecastModelId);

    qrun = new QueryRun(this.parmQuery());

    //  print lines with no Id eg. cost and revenue with no Employee
    if (! skipBlankId)
    {
        this.calculateNoId();
        if (this.lineValue())
        {
            this.insertProjListProjProfitLossTmp();
        }
    }
    while (qrun.next())
    {
        this.printEmplItem();
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>setIdLabel</Name>
				<Source><![CDATA[
/// <summary>
/// Sets the label for the Id.
/// </summary>
void setIdLabel()
{
    if ((hour || revenue || expenses) && !(item || onAcc))
    {
        idLabel = "@SYS89158";
    }
    else if ((item || onAcc) && !(expenses || hour || revenue))
    {
        idLabel = "@SYS14428";
    }
    else
    {
        idLabel = "@Res:ResourceItem";
    }
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>