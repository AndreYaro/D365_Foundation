<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcFailureRecovery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class performs the cleanup for master planning runs that failed due to infrastructure issues and performs the logging that was missed.
/// </summary>
final class ReqCalcFailureRecovery extends RunBaseBatch implements BatchRetryable
{
    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        reqPlanId,
        processId
    #ENDMACRO

    ReqProcessId            processId;
    ReqPlanId               reqPlanId;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(ReqProcessId _processId)
    {
        super();
        this.processId = _processId;
        this.reqPlanId = ReqProcessList::findWithoutParameters(_processId, false).ReqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqCalcFailureRecovery construct(ReqProcessId _processId)
    {
        return new ReqCalcFailureRecovery(_processId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ttsbegin;

        ReqPlanData reqPlanData = ReqPlanData::newReqPlanId(reqPlanId);
        reqPlanData.parmProcessId(processId);

        reqPlanData.initReqLog(ReqCalcUpdate::Regeneration, processId, false);
        reqPlanData.initReqLogCoverage(processId);

        reqPlanData.insertReqLog(true,
                                 true,
                                 true,
                                 0,
                                 processId,
                                 null);

        using (ReqCalcTaskController reqCalcTaskController = ReqCalcTaskController::newController(reqPlanId, processId, processId))
        {
            reqCalcTaskController.deleteAllBundlesAndTasks();
        }

        ttscommit;
        
        ReqTransCache reqTransCache = ReqTransCache_Periodic::newProcessId(reqPlanId, processId);
        reqTransCache.endProcess();

        ReqCalcTelemetry::invokeCompletedEvent(reqPlanId, processId, reqPlanData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version        = conPeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessId</Name>
				<Source><![CDATA[
    public ReqProcessId parmProcessId()
    {
        return processId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleCleanupTask</Name>
				<Source><![CDATA[
    internal static void scheduleCleanupTask(container _args)
    {
        RefRecId batchJobRecId;
        ReqProcessId processId;
        RefRecId mainThreadBatchRecId;

        [batchJobRecId, processId, mainThreadBatchRecId] = _args;

        BatchHeader header = BatchHeader::construct(batchJobRecId);
        ReqCalcFailureRecovery recoveryTask = ReqCalcFailureRecovery::construct(processId);
        header.addRuntimeTask(recoveryTask, mainThreadBatchRecId);
        header.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    public boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>