<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingRegisterTransForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base controller class for the <c>InventTrackingRegisterTrans</c> form.
/// </summary>
public abstract class InventTrackingRegisterTransForm
{
    InventTransOrigin   inventTransOrigin;
    QueryBuildRange     originIdRange;
    boolean             isReadOnly;
    InventDim           blankInventDim;
    boolean             canAddRemove;
    InventQty           registerQty;
    str                 statusMessage;
    boolean             showStatus;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canInsertSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if specified serial can be inserted.
    /// </summary>
    /// <param name="_inventSerialId">
    /// Serial id value.
    /// </param>
    /// <returns>
    /// true if the serial id can be inserted exists; otherwise, false.
    /// </returns>
    public boolean canInsertSerialId(InventSerialId _inventSerialId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUnknownRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates tracking record with unknown serial id.
    /// </summary>
    /// <returns>
    /// The <c>InventTrackingRegisterTrans</c> buffer.
    /// </returns>
    public InventTrackingRegisterTrans createUnknownRecord()
    {
        InventTrackingRegisterTrans inventTrackingRegisterTrans;

        inventTrackingRegisterTrans.InventDimId = blankInventDim.InventDimId;
        this.initInventTrackingRegisterTrans(inventTrackingRegisterTrans);

        this.setOkStatus();

        return inventTrackingRegisterTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalLinesCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total quantity of registred serial numbers.
    /// </summary>
    /// <returns>
    /// The quantity of serial numbers.
    /// </returns>
    public abstract InventQty getTotalLinesCount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits the form datasource.
    /// </summary>
    /// <param name="_dataSource">
    /// The instance of <c>FormDataSource</c> class.
    /// </param>
    public void initFormDatasource(FormDataSource _dataSource)
    {
        QueryBuildDataSource queryBuildDS = _dataSource.queryBuildDataSource();
        originIdRange = queryBuildDS.addRange(fieldNum(InventTrackingRegisterTrans, InventTransOrigin));
        queryBuildDS.addSortField(fieldNum(InventTrackingRegisterTrans, RecId), SortOrder::Descending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the controller from a <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_salesLine">
    /// The record to initialize from.
    /// </param>
    internal void initFromSalesLine(SalesLine _salesLine)
    {
        this.parmRegisterQty(_salesLine.RemainInventPhysical);
        this.parmInventTransOrigin(InventTransOrigin::findByInventTransId(_salesLine.InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the controller from a <c>SalesParmLine</c> record.
    /// </summary>
    /// <param name="_salesParmLine">
    /// The record to initialize from.
    /// </param>
    internal void initFromSalesParmLine(SalesParmLine _salesParmLine)
    {
        this.parmRegisterQty(_salesParmLine.InventNow);
        this.parmInventTransOrigin(InventTransOrigin::findByInventTransId(_salesParmLine.InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTrackingRegisterTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the <c>InventTrackingRegisterTrans</c> buffer.
    /// </summary>
    /// <param name="_inventTrackingRegisterTrans">
    /// The <c>InventTrackingRegisterTrans</c> buffer.
    /// </param>
    public void initInventTrackingRegisterTrans(InventTrackingRegisterTrans _inventTrackingRegisterTrans)
    {
        _inventTrackingRegisterTrans.InventTransOrigin = inventTransOrigin.RecId;
        _inventTrackingRegisterTrans.Qty = -1 * this.qtySign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSerialNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert tracking reccord with specified serial id.
    /// </summary>
    /// <param name="_inventSerialId">
    /// Serial id value.
    /// </param>
    public void insertSerialNumber(InventSerialId _inventSerialId)
    {
        InventTrackingRegisterTrans inventTrackingRegisterTrans;

        if (this.remainingQty() > 0)
        {
            if (this.canInsertSerialId(_inventSerialId))
            {
                inventTrackingRegisterTrans.initFromSerialId(_inventSerialId);
                this.initInventTrackingRegisterTrans(inventTrackingRegisterTrans);

                inventTrackingRegisterTrans.insert();
                this.setOkStatus();
            }
            else
            {
                this.setDuplicateSerialStatus();
            }
        }
        else
        {
            this.setAllSerialRegisteredStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReadonly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if form should be opened in read only mode.
    /// </summary>
    /// <returns>
    /// true if should be read only; otherwise, false.
    /// </returns>
    public boolean isReadonly()
    {
        return isReadOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCountLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label for displaying the line count.
    /// </summary>
    /// <returns>
    /// A label for displaying the line count.
    /// </returns>
    public abstract str lineCountLabel()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>InventTrackingRegisterTransForm</c> class.
    /// </summary>
    public void new()
    {
        isReadOnly = false;
        blankInventDim = InventDim::findOrCreateBlank();
        canAddRemove = true;
        statusMessage = '';
        showStatus = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onExecutingQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes controller logic to update query ranges before query is executed.
    /// </summary>
    public void onExecutingQuery()
    {
        originIdRange.value(queryValue(inventTransOrigin.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanAddRemove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets value indicating wheter serial number can be added or removed on the form.
    /// </summary>
    /// <param name="_canAddRemove">
    /// A Boolean value that indicates whether to allow insertion and deletion of serial numbers on the form; optional.
    /// </param>
    /// <returns>
    /// true if serial numbes can be inserted and deleted; otherwise, false.
    /// </returns>
    public boolean parmCanAddRemove(boolean _canAddRemove = canAddRemove)
    {
        canAddRemove = _canAddRemove;

        return canAddRemove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransOrigin</Name>
				<Source><![CDATA[
    public InventTransOrigin parmInventTransOrigin(InventTransOrigin _inventTransOrigin = inventTransOrigin)
    {
        inventTransOrigin = _inventTransOrigin;

        return inventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReadOnly</Name>
				<Source><![CDATA[
    public boolean parmReadOnly(boolean _readOnly = isReadOnly)
    {
        isReadOnly = _readOnly;
        return isReadOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegisterQty</Name>
				<Source><![CDATA[
    public InventQty parmRegisterQty(InventQty _registerQty = registerQty)
    {
        registerQty = _registerQty;

        return registerQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowStatus</Name>
				<Source><![CDATA[
    public boolean parmShowStatus(boolean _showStatus = showStatus)
    {
        showStatus = _showStatus;
        return showStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatusMessage</Name>
				<Source><![CDATA[
    public str parmStatusMessage(str _statusMessage = statusMessage)
    {
        statusMessage = _statusMessage;

        return statusMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusMessageIsError</Name>
				<Source><![CDATA[
    public boolean statusMessageIsError()
    {
        return this.parmStatusMessage() && this.parmStatusMessage() != "@SYS5469";
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRegisterModeChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should be invoked the registration mode has been changed.
    /// </summary>
    public void postRegisterModeChange()
    {
        this.setBlankStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtySign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sign of the update quantity.
    /// </summary>
    /// <returns>
    /// The sign of the update quantity.
    /// </returns>
    protected real qtySign()
    {
        return sign(registerQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns remaining quantity on the form.
    /// </summary>
    /// <returns>
    /// Remaining quantity of serial numbers.
    /// </returns>
    public Qty remainingQty()
    {
        return this.requiredQty() - this.getTotalLinesCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all serial numbers from the form.
    /// </summary>
    public void removeAll()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace serial id on the record.
    /// </summary>
    /// <param name="_record">
    /// The <c>InventTrackingRegisterTrans</c> buffer.
    /// </param>
    /// <param name="_serialId">
    /// The <c>InventSerialId</c> value.
    /// </param>
    public void replaceSerialId(InventTrackingRegisterTrans _record, InventSerialId _serialId)
    {
        if (!this.canInsertSerialId(_serialId))
        {
            this.setDuplicateSerialStatus();
            return;
        }

        if (!this.checkPostedSerial(_record))
        {
            return;
        }

        InventTrackingRegisterTransForm::replaceSerialIdServer(_record, _serialId);

        this.setOkStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>requiredQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns quantity required to be registred on the form.
    /// </summary>
    /// <returns>
    /// Quantity of serial numbers.
    /// </returns>
    public Qty requiredQty()
    {
        return abs(registerQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllSerialRegisteredStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status to indicate all serial numbers are registered.
    /// </summary>
    protected void setAllSerialRegisteredStatus()
    {
        this.parmStatusMessage("@SYS4160055");
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBlankStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status to blank.
    /// </summary>
    protected void setBlankStatus()
    {
        this.parmStatusMessage('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDuplicateSerialStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status to indicate a duplicate serial number.
    /// </summary>
    protected void setDuplicateSerialStatus()
    {
        this.parmStatusMessage("@SYS4030033");
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOkStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status to OK.
    /// </summary>
    protected void setOkStatus()
    {
        this.parmStatusMessage("@SYS5469");// OK
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUnknownSerialStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status to indicate that the serial number is unknown.
    /// </summary>
    protected void setUnknownSerialStatus()
    {
        this.parmStatusMessage("@SYS4030010");
    }

]]></Source>
			</Method>
			<Method>
				<Name>unregisterSerialNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unregister serial number.
    /// </summary>
    /// <param name="_inventSerialId">
    /// The serial number to unregister.
    /// </param>
    public void unregisterSerialNumber(InventSerialId _inventSerialId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of the <c>InventTrackingRegisterTransForm</c> based on the form arguments.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> instance.
    /// </param>
    /// <returns>
    /// Instance of the <c>InventTrackingRegisterTransForm</c> class.
    /// </returns>
    public static InventTrackingRegisterTransForm construct(Args _args)
    {
        InventTrackingRegisterTransForm formClass;

        if (_args && _args.record())
        {
            Common record = _args.record();

            formClass = InventTrackingRegisterTransForm::constructFromCallerRecord(record);
        }

        if (!formClass)
        {
            throw error("@SYS22539");
        }

        formClass.parmReadOnly(_args.openMode() == OpenMode::View);

        return formClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromCallerRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>InventTrackingRegisterTransForm</c> based on the specified record.
    /// </summary>
    /// <param name = "_record">The record used to create the instance.</param>
    /// <returns>An instance of <c>InventTrackingRegisterTransForm</c>.</returns>
    protected static InventTrackingRegisterTransForm constructFromCallerRecord(Common _record)
    {
        InventTrackingRegisterTransForm formClass;

        switch (_record.TableId)
        {
            case tableNum(SalesParmLine):
                SalesParmLine salesParmLine = _record;
                DocumentStatus documentStatus = salesParmLine.salesParmUpdate().DocumentStatus;

                boolean isCorrection = (salesParmLine.salesLine().QtyOrdered * salesParmLine.DeliverNow < 0);

                if (documentStatus == DocumentStatus::PackingSlip)
                {
                    if (!isCorrection)
                    {
                        formClass = InventTrackingRegisterTransForm::newForPackingSlip(salesParmLine);
                    }
                    else
                    {
                        formClass = InventTrackingRegisterTransForm::newForReturnOrder(salesParmLine);
                    }
                }
                else if (documentStatus == DocumentStatus::Invoice)
                {
                    if (!isCorrection)
                    {
                        formClass = InventTrackingRegisterTransForm::newForInvoice(salesParmLine);
                    }
                    else
                    {
                        formClass = InventTrackingRegisterTransForm::newForCreditNote(salesParmLine);
                    }
                }
                break;

            case tableNum(CustPackingSlipTrans):
                formClass = InventTrackingRegisterTransForm::newForPackingSlipTrans(_record);
                break;

            case tableNum(CustInvoiceTrans):
                formClass = InventTrackingRegisterTransForm::newForInvoiceTrans(_record);
                break;

            case tableNum(SalesLine):
                formClass = InventTrackingRegisterTransForm::newForSalesLine(_record);
                break;

            case tableNum(WHSLoadLine):
                WHSLoadLine loadLine = _record as WHSLoadLine;

                if (loadLine.InventTransType == InventTransType::Sales)
                {
                    formClass = InventTrackingRegisterTransForm::newForLoadLine(_record);
                }
                break;

            case tableNum(WHSContainerLine):
                WHSContainerLine containerLine = _record as WHSContainerLine;

                if (WHSLoadLine::findbyRecId(containerLine.LoadLine).InventTransType == InventTransType::Sales)
                {
                    formClass = InventTrackingRegisterTransForm::newForContainerLine(_record);
                }
                break;

            case tableNum(WMSOrderTrans):
                WMSOrderTrans orderTrans = _record as WMSOrderTrans;

                if (orderTrans.inventTransType == InventTransType::Sales)
                {
                    formClass = InventTrackingRegisterTransForm::newForOrderTrans(_record);
                }
                break;

            case tableNum(ProdJournalBOM):
                ProdJournalBOM prodJournalBOM = _record as ProdJournalBOM;

                formClass = InventTrackingRegisterTransForm::newForProdJournalLines(prodJournalBOM);
                break;
        }

        return formClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForCreditNote</Name>
				<Source><![CDATA[
    private static InventTrackingRegisterTransForm newForCreditNote(SalesParmLine _salesParmLine)
    {
        InventTrackRegTrans_FinancialReceipt formClass = new InventTrackRegTrans_FinancialReceipt();
        formClass.initFromSalesParmLine(_salesParmLine);
        formClass.parmCanAddRemove(_salesParmLine.salesLine().SalesQty < 0);

        return formClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForInvoice</Name>
				<Source><![CDATA[
    private static InventTrackingRegisterTransForm newForInvoice(SalesParmLine _salesParmLine)
    {
        InventTrackRegTrans_FinancialIssue formClass = new InventTrackRegTrans_FinancialIssue();
        formClass.initFromSalesParmLine(_salesParmLine);

        return formClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForInvoiceTrans</Name>
				<Source><![CDATA[
    private static InventTrackingRegisterTransForm newForInvoiceTrans(CustInvoiceTrans _invoiceTrans)
    {
        InventTrackRegTrans_FinancialIssue formClass = new InventTrackRegTrans_FinancialIssue();
        formClass.parmInventTransOrigin(InventTransOrigin::findByInventTransId(_invoiceTrans.InventTransId));

        return formClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForPackingSlip</Name>
				<Source><![CDATA[
    private static InventTrackingRegisterTransForm newForPackingSlip(SalesParmLine _salesParmLine)
    {
        InventTrackRegTrans_PhysicalIssue formClass = new InventTrackRegTrans_PhysicalIssue();
        formClass.initFromSalesParmLine(_salesParmLine);
        formClass.parmShowStatus(false);

        return formClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForPackingSlipTrans</Name>
				<Source><![CDATA[
    private static InventTrackingRegisterTransForm newForPackingSlipTrans(CustPackingSlipTrans _packingSlipTrans)
    {
        InventTrackRegTrans_PhysicalIssue formClass = new InventTrackRegTrans_PhysicalIssue();
        formClass.parmInventTransOrigin(InventTransOrigin::findByInventTransId(_packingSlipTrans.InventTransId));

        return formClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForReturnOrder</Name>
				<Source><![CDATA[
    private static InventTrackingRegisterTransForm newForReturnOrder(SalesParmLine _salesParmLine)
    {
        InventTrackRegTrans_PhysicalReceipt formClass = new InventTrackRegTrans_PhysicalReceipt();
        formClass.initFromSalesParmLine(_salesParmLine);

        return formClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForSalesLine</Name>
				<Source><![CDATA[
    private static InventTrackingRegisterTransForm newForSalesLine(SalesLine _salesLine)
    {
        InventTrackRegTrans_PhysicalIssue formClass = new InventTrackRegTrans_PhysicalIssue();
        formClass.initFromSalesLine(_salesLine);
        formClass.parmShowStatus(false);

        return formClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForContainerLine</Name>
				<Source><![CDATA[
    private static InventTrackingRegisterTransForm newForContainerLine(WHSContainerLine _containerLine)
    {
        InventTrackRegTrans_PhysicalIssue formClass = new InventTrackRegTrans_PhysicalIssue();
        formClass.parmInventTransOrigin(InventTransOrigin::findByInventTransId(WHSLoadLine::findbyRecId(_containerLine.LoadLine).InventTransId));
        
        if (WHSContainerLineGetAllPackedQtyPartialPackFlight::instance().isEnabled())
        {
            formClass.parmRegisterQty(WHSContainerLine::getRegisterQty(_containerLine.LoadLine));
        }
        else
        {
            formClass.parmRegisterQty(WHSContainerLine::getAllPackedQty(_containerLine.LoadLine));
        }

        return formClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForLoadLine</Name>
				<Source><![CDATA[
    private static InventTrackingRegisterTransForm newForLoadLine(WHSLoadLine _loadLine)
    {
        InventTrackRegTrans_PhysicalIssue formClass = new InventTrackRegTrans_PhysicalIssue();
        formClass.initFromSalesLine(_loadLine.salesLine());

        return formClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForOrderTrans</Name>
				<Source><![CDATA[
    private static InventTrackingRegisterTransForm newForOrderTrans(WMSOrderTrans _orderTrans)
    {
        InventTrackRegTrans_PhysicalIssue formClass = new InventTrackRegTrans_PhysicalIssue();
        formClass.initFromSalesLine(SalesLine::findInventTransId(_orderTrans.inventTransId));

        return formClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForProdJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>InventTrackRegTrans_PhysicalIssue</c>.
    /// </summary>
    /// <param name="_prodJournalBOM">
    /// The production journal line with serial items to register.
    /// </param>
    /// <returns>
    /// Returns an instance of <c>InventTrackRegTrans_PhysicalIssue</c>.
    /// </returns>
    private static InventTrackingRegisterTransForm newForProdJournalLines(ProdJournalBOM _prodJournalBOM)
    {
        InventTransOriginId                 inventTransOrigin = InventTransOrigin::findByInventTransId(_prodJournalBOM.InventTransId).RecId;
        InventTrans                         inventTrans;

        select sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin == inventTransOrigin;

        InventTrackRegTrans_PhysicalIssue formClass = new InventTrackRegTrans_PhysicalIssue();
        formClass.parmInventTransOrigin(InventTransOrigin::findByInventTransId(_prodJournalBOM.InventTransId));
        formClass.parmRegisterQty(max(-inventTrans.Qty, _prodJournalBOM.BOMConsump));

        return formClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceSerialIdServer</Name>
				<Source><![CDATA[
    private static void replaceSerialIdServer(InventTrackingRegisterTrans _record, InventSerialId _serialId)
    {
        InventTrackingRegisterTrans newRecord;
        ItemId itemId;
        InventSerial inventSerial;

        ttsbegin;

        newRecord.data(_record);
        newRecord.initFromSerialId(_serialId);
        _record.delete();
        newRecord.insert();

        if (_record.PhysicalRefRecId)
        {
            if (_record.PhysicalRefTableId == tableNum(CustInvoiceTrans))
            {
                itemId = CustInvoiceTrans::findRecId(_record.PhysicalRefRecId).ItemId;
            }
            else
            {
                itemId = CustPackingSlipTrans::findRecId(_record.PhysicalRefRecId).ItemId;
            }

            if (!InventSerial::exist(_serialId, itemId))
            {
                inventSerial.ItemId = itemId;
                inventSerial.InventSerialId = _serialId;
                inventSerial.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostedSerial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status to indicate serial being updated has already been posted.
    /// </summary>
    /// <param name="_inventTrackingRegisterTrans">
    /// The <c>InventTrackingRegisterTrans</c> buffer.
    /// </param>
    /// <param name="_checkMultiple">
    ///  Boolean value that indicates whether to check multiple <c>InventTrans</c> records, optional.
    /// </param>
    /// <returns>
    /// True if the serial can be modified; false if the serial has been consumed already.
    /// </returns>
    public boolean checkPostedSerial(InventTrackingRegisterTrans _inventTrackingRegisterTrans, boolean _checkMultiple = false)
    {
        boolean                 ret = true;

        Query inventTransQuery = new Query();
        QueryBuildDataSource inventTransQueryBuildDataSource = inventTransQuery.addDataSource(tableNum(InventTrans));

        // Selection criteria
        inventTransQueryBuildDataSource.addRange(fieldNum(InventTrans, InventTransOrigin)).value(queryValue(_inventTrackingRegisterTrans.InventTransOrigin));

        if (!_checkMultiple)
        {
            inventTransQueryBuildDataSource.addRange(fieldNum(InventTrans, InventDimId)).value(queryValue(_inventTrackingRegisterTrans.InventDimId));
        }

        // Pass/Fail criteria
        // Posted serials are defined as having a physical voucher but not a financial voucher, and a status less than or equal to deducted
        inventTransQueryBuildDataSource.addRange(fieldNum(InventTrans, StatusIssue)).value(strFmt('< %1', enum2str(StatusIssue::Picked)));

        inventTransQueryBuildDataSource.addRange(fieldNum(InventTrans, VoucherPhysical)).value(SysQuery::valueNotEmptyString());

        inventTransQueryBuildDataSource.addRange(fieldNum(InventTrans, Voucher)).value(SysQuery::valueEmptyString());

        QueryRun inventTransQueryRun = new QueryRun(inventTransQuery);

        // If the query has results, then a match was made on failing criteria
        if (inventTransQueryRun.next())
        {
            this.parmStatusMessage("@SCM:CannotModifyPostedSerialsMessage");
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>