<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVoucherPostApprove</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerVoucherPostApprove</c> accommodates approval journal requirements.
/// </summary>
/// <remarks>
/// Requirements include the following: No check for duplicate voucher, and removal of transactions
/// from the invoice register pool.
/// </remarks>
class LedgerVoucherPostApprove extends LedgerVoucherPost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addVoucher</Name>
				<Source><![CDATA[
    public void addVoucher(LedgerVoucherObject _ledgerVoucherObject)
    {
        _ledgerVoucherObject.parmVoucherCheck(false);

        super(_ledgerVoucherObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromPool</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records from the ledger transaction pool for the specified journal batch number and voucher.
    /// </summary>
    /// <param name="_journalBatchNumber">
    /// The journal batch number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher that will be used.
    /// </param>
    public void deleteFromPool(LedgerJournalId _journalBatchNumber, Voucher _voucher)
    {
        LedgerJournalTrans  ledgerJournalTransPool;
        LedgerJournalId journalBatchIdPool;
        InvoiceId invoice;

        journalBatchIdPool = LedgerJournalTable::findVendorInvoicePool().JournalNum;
        invoice = LedgerJournalTrans::find(_journalBatchNumber, _voucher, false).Invoice;

        delete_from ledgerJournalTransPool
            where ledgerJournalTransPool.JournalNum == journalBatchIdPool
                && ledgerJournalTransPool.Voucher == _voucher
                && (invoice == '' || ledgerJournalTransPool.Invoice == invoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post approval voucher.
    /// </summary>
    /// <returns>True if posted successfully; Otherwise, false.</returns>
    protected boolean post()
    {
        LedgerTransVoucherLink ledgerTransVoucherLink;

        boolean ok = super();

        if (ok)
        {
            ttsbegin;

            boolean haveRecords = ledgerVoucherList.first();

            while (haveRecords)
            {
                LedgerVoucherObject ledgerVoucherObject = ledgerVoucherList.item();
                Voucher currentVoucher = ledgerVoucherObject.parmSubledgerVoucher();
                LedgerJournalVoucherChanged ledgerJournalVoucherChanged = LedgerJournalVoucherChanged::find(this.parmJournalNumber(), currentVoucher, true);

                // If the Voucher or Date were changed a LedgerTransVoucherLink record is needed to maintain the relationship between vouchers
                if (ledgerJournalVoucherChanged.FromVoucher != ledgerJournalVoucherChanged.ToVoucher
                    || ledgerJournalVoucherChanged.FromDate != ledgerJournalVoucherChanged.ToDate)
                {
                    Voucher originalVoucher = ledgerJournalVoucherChanged.FromVoucher;
                    TransDate originalTransDate = ledgerJournalVoucherChanged.FromDate;
                    TransDate currentTransDate = ledgerVoucherObject.parmTransDate();

                    this.updateChangedVoucherToDate(ledgerJournalVoucherChanged, currentTransDate, ledgerVoucherObject.parmSysModule());

                    RecId voucherGroupId = LedgerTransVoucherLink::findVoucherGroupId(currentVoucher, currentTransDate);

                    if (voucherGroupId == 0)
                    {
                        ledgerTransVoucherLink.clear();
                        ledgerTransVoucherLink.Voucher = currentVoucher;
                        ledgerTransVoucherLink.TransDate = currentTransDate;
                        ledgerTransVoucherLink.insert();

                        // The record ID of the first link record is used as the voucher group ID
                        voucherGroupId = ledgerTransVoucherLink.RecId;

                        // Setting the voucher group ID requires an update after the insert
                        ledgerTransVoucherLink.selectForUpdate(true);
                        ledgerTransVoucherLink.VoucherGroupId = voucherGroupId;
                        ledgerTransVoucherLink.update();
                    }

                    ledgerTransVoucherLink.clear();
                    ledgerTransVoucherLink.VoucherGroupId = voucherGroupId;
                    ledgerTransVoucherLink.Voucher = originalVoucher;
                    ledgerTransVoucherLink.TransDate = originalTransDate;
                    ledgerTransVoucherLink.insert();
                }

                haveRecords = ledgerVoucherList.next();
            }

            ttscommit;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        skipBlockedForManualEntryCheck = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerVoucherPostApprove construct()
    {
        return new LedgerVoucherPostApprove();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChangedVoucherToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates date status and set date with current posting date if it is not available.
    /// </summary>
    /// <param name = "_ledgerJournalVoucherChanged">The <c>LedgerJournalVoucherChanged</c> table buffer.</param>
    /// <param name = "_currentTransDate">The posting date.</param>
    /// <param name = "_sysModule">The current <c>SysModule</c>.</param>
    private void updateChangedVoucherToDate(LedgerJournalVoucherChanged _ledgerJournalVoucherChanged, TransDate _currentTransDate, SysModule _sysModule)
    {
        boolean checkStatusPeriod = LedgerFiscalCalendar::checkLedgerPeriodDateModule(CompanyInfoHelper::fiscalCalendarRecId(), _ledgerJournalVoucherChanged.ToDate, _sysModule, false);
       
        if (!checkStatusPeriod && _ledgerJournalVoucherChanged.ToDate != _currentTransDate)
        {
            _ledgerJournalVoucherChanged.ToDate = _currentTransDate;
            _ledgerJournalVoucherChanged.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>