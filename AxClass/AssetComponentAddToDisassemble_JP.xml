<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetComponentAddToDisassemble_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Adds item to disassembling.
/// </summary>
class AssetComponentAddToDisassemble_JP
{
    RefRecId            assetComponentRecId;
    RefRecId            assetComponentDisassembleRecId;
    Qty                 disassembleQty;
    boolean             isThrowError;

    AssetComponent_JP   assetComponent;
    AssetComponent_JP   assetComponentDisassemble;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delivers error message.
    /// </summary>
    /// <param name="_txt">
    /// The error message.
    /// </param>
    /// <returns>
    /// True if no error; otherwise, false.
    /// </returns>
    protected boolean checkError(SysInfoLogStr _txt)
    {
        if (isThrowError)
        {
            throw error(_txt);
        }
        else
        {
            return checkFailed(_txt);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform initialization.
    /// </summary>
    protected void initialize()
    {
        assetComponent = AssetComponent_JP::find(assetComponentRecId);
        assetComponentDisassemble = AssetComponent_JP::find(assetComponentDisassembleRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetComponentDisassembleRecId</Name>
				<Source><![CDATA[
        public RefRecId parmAssetComponentDisassembleRecId(RefRecId _assetComponentDisassembleRecId = assetComponentDisassembleRecId)
    {
        assetComponentDisassembleRecId = _assetComponentDisassembleRecId;

        return assetComponentDisassembleRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetComponentRecId</Name>
				<Source><![CDATA[
        public RefRecId parmAssetComponentRecId(RefRecId _assetComponentRecId = assetComponentRecId)
    {
        assetComponentRecId = _assetComponentRecId;

        return assetComponentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisassembleQty</Name>
				<Source><![CDATA[
        public Qty parmDisassembleQty(Qty _disassembleQty = disassembleQty)
    {
        disassembleQty = _disassembleQty;

        return disassembleQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsThrowError</Name>
				<Source><![CDATA[
        public boolean parmIsThrowError(boolean _isThrowError = isThrowError)
    {
        isThrowError = _isThrowError;

        return isThrowError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the disassembing entry.
    /// </summary>
    public void update()
    {
        if (this.validate())
        {
            ttsBegin;
            assetComponent.selectForUpdate(true);
            assetComponent.DisassembledQtyUnposted = disassembleQty;
            assetComponent.update(true);

            if (disassembleQty != assetComponentDisassemble.Qty)
            {
                assetComponentDisassemble.selectForUpdate(true);
                assetComponentDisassemble.ComponentRefRecId = assetComponent.RecId;
                assetComponentDisassemble.Qty = disassembleQty;
                assetComponentDisassemble.update();
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validation.
    /// </summary>
    /// <returns>
    /// True if no error; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        boolean result = true;

        if (!assetComponent)
        {
            result = false;
        }

        if (result)
        {
            if (assetComponent.availableScrapQty(false) < disassembleQty)
            {
                result = this.checkError("@SYS4110656");
            }

            if (assetComponent.availableScrapQty(false)  == 0)
            {
                result = false;
            }

            //under disassembling
            if (assetComponent.DisassembledQtyUnposted > 0
                && assetComponentDisassemble.ComponentRefRecId != assetComponent.RecId)
            {
                result = false;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDisassemble</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds entry to disassembling.
    /// </summary>
    /// <param name="_assetComponentRecId">
    /// Record id of assembling entry.
    /// </param>
    /// <param name="_assetComponentDisassembleRecId">
    /// Record id of disassembling entry.
    /// </param>
    /// <param name="_disassembleQty">
    /// The quantity to disassemble.
    /// </param>
    /// <param name="_isThrowError">
    /// True to throw error.
    /// </param>
    public static void addDisassemble(
        RefRecId            _assetComponentRecId,
        RefRecId            _assetComponentDisassembleRecId,
        Qty                 _disassembleQty,
        boolean             _isThrowError = false)
    {
        AssetComponentAddToDisassemble_JP   disassemble;
        AssetComponent_JP                   assetComponentDis;

        ttsBegin;

        if (!_assetComponentDisassembleRecId)
        {
            assetComponentDis.initFromAssetComponent(AssetComponent_JP::find(_assetComponentRecId));
            assetComponentDis.insert();
        }
        disassemble = AssetComponentAddToDisassemble_JP::construct(
            _assetComponentRecId,
            _assetComponentDisassembleRecId ? _assetComponentDisassembleRecId : assetComponentDis.RecId,
            _disassembleQty);
        disassemble.parmIsThrowError(_isThrowError);
        disassemble.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an insatnce of <c>AssetComponentAddToDisassemble_JP</c>.
    /// </summary>
    /// <param name="_assetComponentRecId">
    /// The asset component recid.
    /// </param>
    /// <param name="_assetComponentDisassembleRecId">
    /// The asset component disassemble recid.
    /// </param>
    /// <param name="_disassembleQty">
    /// The quantity.
    /// </param>
    /// <returns>
    /// An insatnce of <c>AssetComponentAddToDisassemble_JP</c>.
    /// </returns>
    public static AssetComponentAddToDisassemble_JP construct(
        RefRecId            _assetComponentRecId,
        RefRecId            _assetComponentDisassembleRecId,
        Qty                 _disassembleQty)
    {
        AssetComponentAddToDisassemble_JP disassemble = new AssetComponentAddToDisassemble_JP();
        disassemble.parmAssetComponentRecId(_assetComponentRecId);
        disassemble.parmAssetComponentDisassembleRecId(_assetComponentDisassembleRecId);
        disassemble.parmDisassembleQty(_disassembleQty);

        disassemble.initialize();
        return disassemble;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>