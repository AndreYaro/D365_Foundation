<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesBookPrepayment_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesBookPrepayment_RU extends RunBase
{
    TransDate                   transDate;
    DialogField                 dlgTransDate;
    CustFactureAutoCreate_RU    factureAutoCreate;
    DialogField                 dlgFactureAutoCreate;
    Map                         custTransMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase ret = super();

        dlgTransDate            = ret.addFieldValue(extendedtypestr(TransDate), transDate);
        dlgFactureAutoCreate    = ret.addFieldValue(extendedtypestr(CustFactureAutoCreate_RU), factureAutoCreate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();
        transDate           = dlgTransDate.value();
        factureAutoCreate   = dlgFactureAutoCreate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();
        custTransMap = new Map(typeName2Type(extendedTypeStr(recId)), Types::Date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactureAutocreate</Name>
				<Source><![CDATA[
    CustFactureAutoCreate_RU parmFactureAutocreate(CustFactureAutoCreate_RU _factureAutoCreate = factureAutoCreate)
    {
        factureAutoCreate = _factureAutoCreate;
        return factureAutoCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransMap</Name>
				<Source><![CDATA[
    void parmTransMap(container _conTransMap)
    {
        custTransMap = Map::create(_conTransMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        TransDate transDateMap;
        UseOriginalDocumentAsFacture_RU useOriginalDocumentAsFacture_RU;
        MapEnumerator mapEnumerator = custTransMap.getEnumerator();
        setprefix("@GLS108368");

        while (mapEnumerator.moveNext())
        {
            [transDateMap, useOriginalDocumentAsFacture_RU] = mapEnumerator.currentValue();
            LedgerJournalEngine ledgerJournalEngine = new LedgerJournalEngine(null);
            ledgerJournalEngine.newJournalActive(CustVendPrepaymentHandling_W::ledgerJournalTable());

            ttsbegin;
            CustTrans custTrans = CustTrans::find(mapEnumerator.currentKey(), true);
            setprefix(strfmt("@GLS112786", custTrans.Voucher, custTrans.TransDate, custTrans.AccountNum));
            CustVendPrepaymentHandling_W prepaymentHandling = CustVendPrepaymentHandling_W::newFromCustVendTrans(custTrans);
            prepaymentHandling.init();
            prepaymentHandling.parmFactureAutocreate(this.parmFactureAutocreate());
            prepaymentHandling.parmUseOriginalDocumentAsFacture_RU(useOriginalDocumentAsFacture_RU);

            if (prepaymentHandling.checkTransDate(transDateMap ? transDateMap : this.parmTransDate()))
            {
                prepaymentHandling.parmTransDate(transDateMap ? transDateMap : this.parmTransDate());
                prepaymentHandling.parmLedgerJournalEngine(ledgerJournalEngine);
                prepaymentHandling.tmpLedgerJournalTrans();

                if (prepaymentHandling.check())
                {
                    prepaymentHandling.run();
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);
        if (transDate == dateNull())
        {
            ret = checkFailed("@GLS112792");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesBookPrepayment_RU construct(container  _conCustTransSet)
    {
        SalesBookPrepayment_RU ret = new SalesBookPrepayment_RU();
        ret.parmTransMap(_conCustTransSet);
        ret.parmFactureAutocreate(CustParameters::find().PrepaymentFactureAutoCreate_RU);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS108368";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>