<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormletterJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>FormletterJournalCreate</c> class is the base class used to create journals when updating
///    sales orders, purchase orders, and requests for quotes.
/// </summary>
/// <remarks>
///    The <c>FormletterJournalCreate</c> class implements the template pattern, and defines how to create a
///    journal with a header and some lines.There will be one child class for each type of journal that
///    can be posted as each journal type has its own set of tables.
/// </remarks>
abstract class FormletterJournalCreate
{
    ParmId                  parmId;
    InterCompanyPosted      interCompanyPosted;
    AmountCur               lineValue;
    AmountCur               lineValueInclTax;
    InventQty               updateNowInvent;
    UnitQty                 updateNow;
    Tax                     tax;
    AmountCur               cashDiscAmount;
    Common                  parmTable;
    Common                  parmUpdate;
    DocumentStatus          documentStatus;
    TmpTaxWorkTrans         journalTmpTaxWorkTrans;
    Num                     journalNumber;
    Num                     voucher;
    LineNum                 lineNum;
    RecordInsertList        recordInsertListHeader;
    RecordSortedList        recordSortedListHeader;
    RecordInsertList        recordListLine;
    List                    listLine;
    RecordInsertList        recordListLinks;
    NumberSeq               numberSeq;
    boolean                 proforma;
    WMSShipmentId           shipmentId;
    boolean                 inBatch;
    userId                  batchCreatedBy;
    Object                  totals;

    RecordSortedList        recordListParmLine;
    Set                     origOrderIdSet;

    FormletterProvider      formletterProvider;
    FormLetterContract      interCompanyFormletterContract;

    Common                  relatedJournal;
   
    systemSequence          systemSequence;

    // <GEERU><GEEPL>
    #isoCountryRegionCodes
    // </GEERU></GEEPL>

    // <GEEW>
    //MSFT Commented out: LtDocNumberingCode      ltDocNumberingCode;
    // </GEEW>
    // <GIN>
    boolean                     printGoodsReceiptNote;
    TaxWithholdCalculation_IN   taxWithholdCalculation;
    // </GIN>
    // <GEEPL>
    PlFiscalDocType         fiscalDocType;
    InventLocationId        inventLocationId;
    // </GEEPL>
    // <GEELV>
    //MSFT Commented out: NoYes                   useStateInvoice;
    // </GEELV>
    // <GEEU>
    LtDocNumberingCode      ltDocNumberingCode;
    // </GEEU>
    // <GEERU>
    RecordInsertList        recordListCorrLinks;
    // </GEERU>
    // The pick wave reference is required by the picking workbench.
    MCRPickingWave          mcrPickWaveReference;

    internal boolean isSimulatePosting;

    private container packedLineIdSet;
    private WHSLoadId whsLoadId;
    internal Common callerTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPackedLineIdSet</Name>
				<Source><![CDATA[
    public container parmPackedLineIdSet(container _packedLineIdSet = packedLineIdSet)
    {
        packedLineIdSet = _packedLineIdSet;

        return _packedLineIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSLoadId</Name>
				<Source><![CDATA[
    public WHSLoadId parmWHSLoadId(WHSLoadId _whsLoadId = whsLoadId)
    {
        whsLoadId = _whsLoadId;

        return whsLoadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerTable</Name>
				<Source><![CDATA[
    public Common parmCallerTable(Common _callerTable = callerTable)
    {
        callerTable = _callerTable;

        return callerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>didCheckNoThrowAllowJournalToBeCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that the <c>checkNoThrow</c> method did not stop the creation of a journal.
    /// </summary>
    /// <returns>true if the <c>checkNoThrow</c> method did not stop the creation of a journal; otherwise, false</returns>
    public boolean didCheckNoThrowAllowJournalToBeCreated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Allocates a journal and voucher number from the corresponding number sequences.
    /// </summary>
    /// <returns>
    ///   A <c>NumberSeq</c> object.
    /// </returns>
    protected NumberSeq allocateNumAndVoucher()
    {
        NumberSeq               localNumberSeq;
        NumberSequenceReference localNumberSequenceReferenceVoucher = this.numberSequenceReferenceVoucher();
        NumberSequenceReference localNumberSequenceReferenceNum     = this.numberSequenceReferenceNum();

        if (localNumberSequenceReferenceVoucher && localNumberSequenceReferenceNum)
        {
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
            {
                localNumberSeq = NumberSeq::newGetNumAndVoucher(localNumberSequenceReferenceNum,
                                                                localNumberSequenceReferenceVoucher,
                                                                false,
                                                                false,
                                                                UnknownNoYes::No);
            }
            else
            {
                localNumberSeq = NumberSeq::newGetNumAndVoucher(localNumberSequenceReferenceNum,
                                                                localNumberSequenceReferenceVoucher);
            }
            // </GEERU>
        }
        else if (localNumberSequenceReferenceNum)
        {
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
            {
                localNumberSeq = NumberSeq::newGetNum(localNumberSequenceReferenceNum,
                                                      false,
                                                      false,
                                                      UnknownNoYes::No);
            }
            else
            {
                localNumberSeq = NumberSeq::newGetNum(localNumberSequenceReferenceNum);
            }
            // </GEERU>
        }

        return localNumberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the journal can be created.
    /// </summary>
    /// <returns>
    ///   true if the journal can be created; otherwise, false.
    /// </returns>
    protected boolean check()
    {
        return formletterProvider.checkJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether a journal line can be created.
    /// </summary>
    /// <param name="_parmLine">
    ///   The record to base the journal line upon.
    /// </param>
    /// <returns>
    ///   true if a journal line can be created; otherwise, false.
    /// </returns>
    protected boolean checkDiscardLine(Common _parmLine)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicateNum_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used to check if a duplicate invoice number exists. This is just a dummy method and has been over-written in the child classes.
    /// </summary>
    /// <param name="_num">
    ///     InvoiceId of the unposted transaction that needs to be checked for duplicity.
    /// </param>
    /// <param name="_salesId">
    ///     SalesId of the unposted transaction.
    /// </param>
    /// <param name="_transDate">
    ///     InvoiceDate or DeliveryDate of the unposted transaction.
    /// </param>
    /// <returns>
    ///     True, if a a posted transcation exists with the same InvoiceId.
    /// </returns>
    protected boolean checkDuplicateNum_W(Num _num, SalesIdBase _salesId, TransDate _transDate)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a journal should be created.
    /// </summary>
    /// <returns>
    /// true if a journal can be created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If a journal is not created, no exception is thrown.A journal is not created if it contains no
    /// lines.
    /// </remarks>
    protected boolean checkNoThrow()
    {
        // Only create the journal if parm lines exists, but don't throw if no lines exists.
        return this.linesExists();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVATTaxAgentChargeType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if VAT tax agent charge source is correct.
    /// </summary>
    /// <returns>
    ///    true if VAT tax agent charge source is correct; otherwise false.
    /// </returns>
    protected boolean checkVATTaxAgentChargeType_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAgreementLinks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the links between the journal lines and the agreement lines.
    /// </summary>
    protected void createAgreementLinks()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDiscardedJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Handles discarded journal line.
    /// </summary>
    /// <param name="_common">
    ///   The record to base the journal line upon.
    /// </param>
    protected void createDiscardedJournalLine(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFailed</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Called when the journal creation failed.
    /// </summary>
    /// <param name="_logText">
    ///   A <c>String</c> with an error message.
    /// </param>
    protected void createFailed(LogText _logText = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    private void createJournal()
    {
        LogText     logText;
        Counter     origInfologNum = infologLine();

        ttsbegin;
        this.init();
        this.initSourceTable();
        this.initTotals();
        this.initFormletterProvider();

        if (this.checkNoThrow()) // skip journal without throwing an exception.
        {
            this.initRecordList();
            if (this.check())
            {
                this.initJournalHeader();
                this.createJournalHeader();
                this.createJournalLines();
                if (this.isJournalCreated())
                {
                    this.insertRecordList();
                    this.createAgreementLinks();
                    this.endCreate();

                    // <GEERU>
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                     && !this.checkVATTaxAgentChargeType_RU())
                    {
                        throw error("@SYS21533");
                    }
                    // </GEERU>
                }
                else
                {//No journal lines were created so roll back creation of journal header.
                    this.noLinesForPosting(true);
                }
            }
            else
            {
                ttsabort;

                logText = Info::infoCon2Str(infolog.copy(origInfologNum + 1, infologLine()));
                this.createFailed(logText);

                if (!this.parmIsSimulatePosting())
                {
                    throw error(strFmt("@SYS26498", this.parmParmTable().(this.fieldIdParmTable_OrderId())));
                }
                else
                {
                    throw error(strFmt("@SYS21533"));
                }
            }
        }
        else
        {
            this.noLinesForPosting();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the journal header when updating the sales order, the purchase order, or the request for
    ///    quote.
    /// </summary>
    abstract protected void createJournalHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates a journal line.
    /// </summary>
    /// <param name="_common">
    ///   The record to base the journal line upon.
    /// </param>
    abstract protected void createJournalLine(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOrderInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the information of order.
    /// </summary>
    /// <param name = "_parmLine">The record of parmLine.
    /// </param>
    protected void checkOrderInformation(Common _parmLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal lines when updating the sales order, the purchase order, or the request for
    /// quote.
    /// </summary>
    protected void createJournalLines()
    {
        Common  parmLine;
        Num     origOrderId;
        // <GEEU>
        #ISOCountryRegionCodes
        // </GEEU>
        origOrderIdSet = new Set(Types::String);
        this.initLoopLines();
        parmLine  = this.typeParmLine();

        ttsbegin;
        recordListParmLine = this.recordListParmLine();
        recordListParmLine.first(parmLine);
        while (parmLine)
        {
            this.checkOrderInformation(parmLine);

            if (!this.checkDiscardLine(parmLine))
            {
                lineNum ++;
                this.createJournalLine(parmLine);
                origOrderId = parmLine.(this.fieldIdParmLine_OrigOrderId());
                if (!origOrderIdSet.in(origOrderId))
                {
                    //Only create a link record for each order.
                    this.createJournalLink(parmLine);
                    origOrderIdSet.add(origOrderId);
                }
            }
            // <GEEU>
            else
            {
                this.createDiscardedJournalLine(parmLine);
            }
            // </GEEU>

            if (!recordListParmLine.next(parmLine))
            {
                break;
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a journal link.
    /// </summary>
    /// <param name="_common">
    /// The record on which to base the journal link.
    /// </param>
    abstract protected void createJournalLink(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>endCreate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes when the journal creation is completed.
    /// </summary>
    protected void endCreate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmLine_OrigOrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field ID for the field that contains the original order ID in the posting parameter line
    /// table.
    /// </summary>
    /// <returns>
    /// A field ID.
    /// </returns>
    protected FieldId fieldIdParmLine_OrigOrderId()
    {
        return formletterProvider.fieldIdParmLine_OrigOrderId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmTable_OrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field ID for the field that contains the order ID in the posting parameter header table.
    /// </summary>
    /// <returns>
    /// A field ID.
    /// </returns>
    protected FieldId fieldIdParmTable_OrderId()
    {
        return formletterProvider.fieldIdParmTable_OrderId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the form letter type.
    /// </summary>
    /// <returns>
    /// A <c>FormletterType</c> enumeration value.
    /// </returns>
    protected FormletterType formletterType()
    {
        return FormletterType::Null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the current journal header.
    /// </summary>
    /// <returns>
    ///   A journal header record.
    /// </returns>
    abstract public Common getJournal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list that contains every created journal line.
    /// </summary>
    /// <returns>
    /// A list.
    /// </returns>
    public List getJournalLines()
    {
        return listLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the number of the journal.
    /// </summary>
    /// <returns>
    ///   A journal number.
    /// </returns>
    protected Num getJournalNumber()
    {
        return conPeek(this.getNumAndVoucher(),1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the current journal line number.
    /// </summary>
    /// <returns>
    ///   A line number.
    /// </returns>
    protected LineNum getLineNum()
    {
        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumAndVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a journal and a voucher number.
    /// </summary>
    /// <returns>
    /// A container that contains a journal and voucher number.
    /// </returns>
    protected container getNumAndVoucher()
    {
        if (!this.proforma() && journalNumber == '')
        {
            numberSeq     = this.allocateNumAndVoucher();
            if (numberSeq)
            {
                if (this.numberSequenceReferenceVoucher())
                {
                    [journalNumber, voucher] = numberSeq.numAndVoucher();
                }
                else
                {
                    journalNumber = numberSeq.num();
                    voucher       = '';
                }
            }
        }

        return [journalNumber, voucher];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets a <c>NumberSeq</c> object.
    /// </summary>
    /// <returns>
    ///   A <c>NumberSeq</c> object.
    /// </returns>
    public NumberSeq getNumberSeq()
    {
        return numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigOrderIdSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets a packed version of a <c>Set</c> object with all original order IDs for the journal.
    /// </summary>
    /// <returns>
    ///   A packed version of a <c>Set</c> object.
    /// </returns>
    public container getOrigOrderIdSet()
    {
        return origOrderIdSet.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets or Sets the total object.
    /// </summary>
    /// <returns>
    ///   A total object.
    /// </returns>
    public Object parmTotals(Object _totals = null)
    {
        if (_totals)
        {
            totals = _totals;
        }
        else
        {
            totals = this.totals();
        }
        return totals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets a voucher number.
    /// </summary>
    /// <returns>
    ///   A voucher number.
    /// </returns>
    protected Num getVoucher()
    {
        return conPeek(this.getNumAndVoucher(),2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes the class.
    /// </summary>
    protected void init()
    {
        systemSequence = new systemSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterProvider</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes the <c>FormletterProvider</c> object.
    /// </summary>
    protected void initFormletterProvider()
    {
        formletterProvider = FormletterProvider::newFormletterType(this.formletterType(), this.sourceTable());
        formletterProvider.parmParmUpdate(this.parmParmUpdate());
        formletterProvider.parmTotals(this.totals());
        formletterProvider.parmParmTable(this.parmParmTable());
        formletterProvider.parmDocumentStatus(this.parmDocumentStatus());
        formletterProvider.parmBatchCreatedBy(this.parmBatchCreatedBy());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes the journal header record.
    /// </summary>
    protected void initJournalHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLoopLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the iteration over journal lines.
    /// </summary>
    protected void initLoopLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordList</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes the record lists.
    /// </summary>
    protected void initRecordList()
    {
        // suspend RecId allocation for any tables which will have their RecId's allocated early.
        // RecId's for certain tables get allocated early so that linked tables can use the RecId
        // as a foreign key.
        this.suspendRecIds();

        if (this.linksTableId())
        {
            recordListLinks = new RecordInsertList(this.linksTableId());
        }

        //Sales picking list does not create line list
        if (this.journalLineTableId())
        {
            recordListLine = new RecordInsertList(this.journalLineTableId());
            listLine  = new List(Types::Record);
        }
        // <GEERU>
        //Relations between corrected and correcting invoices for Russia
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && this.journalLineCorrLinksTableId_RU())
        {
            recordListCorrLinks = new RecordInsertList(this.journalLineCorrLinksTableId_RU());
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes the source table record.
    /// </summary>
    protected void initSourceTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes the total calculation.
    /// </summary>
    abstract protected void initTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Inserts a record in the journal line table.
    /// </summary>
    /// <param name="_journalLine">
    ///   The record to insert.
    /// </param>
    protected void insertJournalLine(Common _journalLine)
    {
        if (recordListLine)
        {
            recordListLine.add(_journalLine);
            listLine.addEnd(_journalLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJournalLink</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Inserts a record in the journal link table.
    /// </summary>
    /// <param name="_journalLink">
    ///   The record to insert.
    /// </param>
    protected void insertJournalLink(Common _journalLink)
    {
        if (recordListLinks)
        {
            recordListLinks.add(_journalLink);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records in the record lists into the database.
    /// </summary>
    protected void insertRecordList()
    {
        ttsbegin;
        if (recordListLine)
        {
            recordListLine.insertDatabase();
        }

        if (recordListLinks)
        {
            recordListLinks.insertDatabase();
        }

        // <GEERU>
        if (recordListCorrLinks)
        {
            recordListCorrLinks.insertDatabase();
        }
        // </GEERU>

        this.removeRecIdSuspension();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalCreated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the journal was created.
    /// </summary>
    /// <returns>
    ///    true if the journal was created; otherwise, false.
    /// </returns>
    protected boolean isJournalCreated()
    {
        return lineNum > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineCorrLinksTableId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the table ID for the journal line table correction links.
    /// </summary>
    /// <returns>
    ///   The table ID for the journal line table correction links.
    /// </returns>
    /// <remarks>
    ///   Overriden for customer and vendor invoices for Russia.
    /// </remarks>
    protected TableId journalLineCorrLinksTableId_RU()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the table ID for the journal line table.
    /// </summary>
    /// <returns>
    ///   The table ID for the journal line table.
    /// </returns>
    abstract protected TableId journalLineTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether lines occur in the order line parameter table.
    /// </summary>
    /// <returns>
    /// true if lines exists; otherwise, false.
    /// </returns>
    protected boolean linesExists()
    {
        boolean             ok          = true;
        Common              parmLine    = this.typeParmLine();
        RecordSortedList    list        = this.recordListParmLine();

        if (list)
        {
            list.first(parmLine);
            if (!parmLine.RecId)
            {//false if no lines exists.
                ok = false;
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linksTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the table ID for the journal link table.
    /// </summary>
    /// <returns>
    ///   The table ID for the journal link table.
    /// </returns>
    abstract protected TableId linksTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>noLinesForPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions when there are no lines selected for posting.
    /// </summary>
    /// <param name="_throwError">
    /// A Boolean value that indicates whether the error message should be thrown as an exception.
    /// </param>
    /// <remarks>
    /// Informs the user that there are no lines selected for posting.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// Posting has been canceled.
    /// </exception>
    protected void noLinesForPosting(boolean _throwError = false)
    {
        // Failed for missing lines or quantity of zero
        checkFailed("@SYS26185");
        // Announce posting failed
        this.showPostingCanceledError(_throwError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the <c>NumberSequenceReference</c> object for the journal number.
    /// </summary>
    /// <returns>
    ///   A <c>NumberSequenceReference</c> object.
    /// </returns>
    abstract protected NumberSequenceReference numberSequenceReferenceNum()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the <c>NumberSequenceReference</c> object for the voucher number.
    /// </summary>
    /// <returns>
    ///   A <c>NumberSequenceReference</c> object.
    /// </returns>
    protected NumberSequenceReference numberSequenceReferenceVoucher()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchCreatedBy</Name>
				<Source><![CDATA[
    public UserId parmBatchCreatedBy(UserId _batchCreatedBy = batchCreatedBy)
    {
        batchCreatedBy = _batchCreatedBy;
        return batchCreatedBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoicePrintoutType_RU</Name>
				<Source><![CDATA[
    public CustInvoicePrintoutType_RU parmCustInvoicePrintoutType_RU(CustInvoicePrintoutType_RU _printout = CustInvoicePrintoutType_RU::TORG_12)
    {
        container dummy()
        {
            return [ _printout ];
        }

        return CustInvoicePrintoutType_RU::TORG_12;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus parmDocumentStatus(DocumentStatus _documentStatus = documentStatus)
    {
        documentStatus = _documentStatus;

        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExtraPrintoutLineExists_RU</Name>
				<Source><![CDATA[
    public boolean parmExtraPrintoutLineExists_RU(boolean _extraPrintoutLineExists = false)
    {
        container dummy()
        {
            return [ _extraPrintoutLineExists ];
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocType_PL</Name>
				<Source><![CDATA[
    public PlFiscalDocType parmFiscalDocType_PL(PlFiscalDocType _fiscalDocType = fiscalDocType)
    {
        fiscalDocType = _fiscalDocType;
        return fiscalDocType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInBatch</Name>
				<Source><![CDATA[
    public boolean parmInBatch(boolean _inBatch = inBatch)
    {
        inBatch = _inBatch;
        return inBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyFormletterContract</Name>
				<Source><![CDATA[
    public FormLetterContract parmInterCompanyFormletterContract(FormLetterContract _interCompanyFormletterContract = interCompanyFormletterContract)
    {
        interCompanyFormletterContract = _interCompanyFormletterContract;
        return interCompanyFormletterContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyPosted</Name>
				<Source><![CDATA[
    public InterCompanyPosted parmInterCompanyPosted(InterCompanyPosted _interCompanyPosted = interCompanyPosted)
    {
        interCompanyPosted = _interCompanyPosted;

        return interCompanyPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId_PL</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId_PL(
        InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLtDocNumberingCode</Name>
				<Source><![CDATA[
    public LtDocNumberingCode parmLtDocNumberingCode(LtDocNumberingCode _ltDocNumberingCode = ltDocNumberingCode)
    {
        ltDocNumberingCode = _ltDocNumberingCode;
        return ltDocNumberingCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupOfTypeCustVendExists_RU</Name>
				<Source><![CDATA[
    public boolean parmMarkupOfTypeCustVendExists_RU(boolean _markupOfTypeCustVendExists = false)
    {
        container dummy()
        {
            return [ _markupOfTypeCustVendExists ];
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRPickWaveReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the pick wave reference.
    /// </summary>
    /// <param name="_mcrPickWaveReference">
    /// A pick wave reference; optional.
    /// </param>
    /// <returns>
    /// The pick wave reference.
    /// </returns>
    /// <remarks>
    /// The pick wave reference is used by the picking workbench.  It is used to control
    /// behaviors such as:
    ///     <list type="bullet">
    ///         <item>
    ///             <description>The process flow for orders that are picked using the workbench.</description>
    ///         </item>
    ///         <item>
    ///             <description>Whether the progress bar is displayed during posting.</description>
    ///         </item>
    ///         <item>
    ///             <description>Whether only lines needed for the pick wave should be selected.</description>
    ///         </item>
    ///         <item>
    ///             <description>Updating the correct quantity to pick.</description>
    ///         </item>
    ///    </list>
    /// </remarks>
    public MCRPickingWave parmMCRPickWaveReference(MCRPickingWave _mcrPickWaveReference = mcrPickWaveReference)
    {
        mcrPickWaveReference = _mcrPickWaveReference;

        return mcrPickWaveReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = parmTable)
    {
        parmTable = _parmTable;

        return parmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _parmUpdate = parmUpdate)
    {
        parmUpdate = _parmUpdate;

        return parmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProforma</Name>
				<Source><![CDATA[
    public boolean parmProforma(boolean _proforma = proforma)
    {
        proforma = _proforma;

        return proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRelatedJournal</Name>
				<Source><![CDATA[
    public Common parmRelatedJournal(Common _relatedJournal = relatedJournal)
    {
        relatedJournal = _relatedJournal;
        return relatedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipmentId</Name>
				<Source><![CDATA[
    public WMSShipmentId parmShipmentId(WMSShipmentId _shipmentId = shipmentId)
    {
        shipmentId = _shipmentId;

        return shipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTax</Name>
				<Source><![CDATA[
    protected Tax parmTax(Tax _tax = tax)
    {
        tax = _tax;
        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(parmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdCalculation_IN</Name>
				<Source><![CDATA[
    public TaxWithholdCalculation_IN parmTaxWithholdCalculation_IN(TaxWithholdCalculation_IN _taxWithholdCalculation = taxWithholdCalculation)
    {
        taxWithholdCalculation = _taxWithholdCalculation;
        return taxWithholdCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSimulatePosting</Name>
				<Source><![CDATA[
    internal boolean parmIsSimulatePosting(boolean _isSimulatePosting = isSimulatePosting)
    {
        isSimulatePosting = _isSimulatePosting;
        return isSimulatePosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proforma</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the journal is a proforma journal.
    /// </summary>
    /// <returns>
    ///   true if the journal is a proforma journal; otherwise, false
    /// </returns>
    protected boolean proforma()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recIdSuspensionTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of tables that should have suspended record ID generation.
    /// </summary>
    /// <returns>
    /// A list of table IDs that should have suspended record ID generation.
    /// </returns>
    protected List recIdSuspensionTables()
    {
        return new List(Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>RecordSortedList</c> object with every posting parameter line record.
    /// </summary>
    /// <returns>
    /// A <c>RecordSortedList</c> object.
    /// </returns>
    abstract protected RecordSortedList recordListParmLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRecIdSuspension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes record ID suspension.
    /// </summary>
    protected void removeRecIdSuspension()
    {
        List            list    = this.recIdSuspensionTables();
        ListEnumerator  le      = list.getEnumerator();
        TableId         tableId;

        if (!list.empty())
        {
            while (le.moveNext())
            {
                tableId = le.current();
                appl.sysRecIdSequence().removeRecIdSuspension(tableId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates a journal.
    /// </summary>
    public void run()
    {
        this.createJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPostingCanceledError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions when posting is canceled.
    /// </summary>
    /// <param name="_throwError">
    /// A Boolean value that indicates whether the error message should be thrown as an exception.
    /// </param>
    /// <remarks>
    /// Informs the user that posting was not completed.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// Posting has been canceled.
    /// </exception>
    protected void showPostingCanceledError(boolean _throwError = false)
    {
        if (_throwError)
        {
            throw error("@SYS21533");
        }
        else
        {
            error("@SYS21533");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the source table for the journal.
    /// </summary>
    /// <returns>
    ///   A record.
    /// </returns>
    abstract protected Common sourceTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>suspendRecIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suspends record ID generation.
    /// </summary>
    protected void suspendRecIds()
    {
        List            list    = this.recIdSuspensionTables();
        ListEnumerator  le      = list.getEnumerator();
        TableId         tableId;

        while (le.moveNext())
        {
            tableId = le.current();
            appl.sysRecIdSequence().suspendRecIds(tableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the total object.
    /// </summary>
    /// <returns>
    ///   A total object.
    /// </returns>
    abstract protected Object totals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the type of the posting parameter line table.
    /// </summary>
    /// <returns>
    ///   A record.
    /// </returns>
    abstract protected Common typeParmLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjJournalCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>FormletterJournalCreate</c> class by using the <paramref
    /// name="_formletter" /> parameter that is used to create journal and journal lines for sales orders.
    /// </summary>
    /// <param name="_formLetter">
    /// The <c>ProjFormletter</c> object that relates to the journal and journal lines.
    /// </param>
    /// <param name="_projInvoiceParmTable">
    /// The <c>ProjInvoiceParmTable</c> record that relates to the journal and journal lines.
    /// </param>
    /// <returns>
    /// An instance of the <c>FormletterJournalCreate</c> class.
    /// </returns>
    public static FormletterJournalCreate newProjJournalCreate(ProjFormLetter       _formLetter,
                                                               ProjInvoiceParmTable _projInvoiceParmTable)
    {
        FormletterJournalCreate     formletterJournalCreate;

        switch (_formLetter.documentStatus())
        {
            case DocumentStatus::Invoice:
                formletterJournalCreate = ProjInvoiceJournalCreate::construct();
                break;

            default : throw error(strFmt("@SYS19306",funcName()));
        }

        formletterJournalCreate.parmParmTable(_projInvoiceParmTable);
        formletterJournalCreate.parmDocumentStatus(_formLetter.documentStatus());
        formletterJournalCreate.parmProforma(_formLetter.proforma());
        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV]))
        {
            formletterJournalCreate.parmLtDocNumberingCode(_formLetter.parmLtDocNumberingCode());
        }
        // </GEEU>
        return formletterJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newConsignmentJournalCreate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>FormletterJournalCreate</c> class by using the specified form
    ///    letter to create journal and journal lines for consignment replenishment orders.
    /// </summary>
    /// <param name="_formletterContract">
    ///    The <c>formletterContract</c> object for which to create journal and journal lines.
    /// </param>
    /// <param name="_parmTable">
    ///    The header record that relates to creating journal and journal lines.
    /// </param>
    /// <returns>
    ///    An instance of the <c>FormletterJournalCreate</c> class.
    /// </returns>
    public static FormletterJournalCreate newConsignmentJournalCreate(ConsignmentReplenishmentOrderFormletterContract _formletterContract,
                                                                    ConsignmentDraftReplenishmentOrderJournalHeader    _parmTable)
    {
        FormletterJournalCreate         formletterJournalCreate;

        switch (_formletterContract.getDocumentStatus())
        {
            case DocumentStatus::PackingSlip:

                ConsignmentReplenishmentOrderFormLetterJournalCreate consignmentReplenishmentOrderFormLetterJournalCreate = ConsignmentReplenishmentOrderFormLetterJournalCreate::construct();
                formletterJournalCreate = consignmentReplenishmentOrderFormLetterJournalCreate;
                break;
        }

        formletterJournalCreate.parmParmTable(_parmTable);
        formletterJournalCreate.parmDocumentStatus(_formletterContract.getDocumentStatus());

        return formletterJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchJournalCreate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>FormletterJournalCreate</c> class by using the specified form
    ///    letter to create journal and journal lines for purchase orders.
    /// </summary>
    /// <param name="_formletterContract">
    ///    The <c>formletterContract</c> object for which to create journal and journal lines.
    /// </param>
    /// <param name="_parmTable">
    ///    The header record that relates to creating journal and journal lines.
    /// </param>
    /// <returns>
    ///    An instance of the <c>FormletterJournalCreate</c> class.
    /// </returns>
    public static FormletterJournalCreate newPurchJournalCreate(PurchFormLetterContract _formletterContract,
                                                                VendDocumentTableMap    _parmTable)
    {
        Debug::assert(_parmTable.TableId != tableNum(VendDocumentTableMap));

        FormletterJournalCreate formletterJournalCreate = FormletterJournalCreate::constructFromFormLetterContract(_formletterContract);
        if (!formletterJournalCreate)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        formletterJournalCreate.parmParmUpdate(_formletterContract.parmParmUpdate() as PurchParmUpdate);
        formletterJournalCreate.parmParmTable(_parmTable);
        formletterJournalCreate.parmDocumentStatus(_formletterContract.getDocumentStatus());
        formletterJournalCreate.parmInterCompanyPosted(_formletterContract.parmIntercompanyPosted());
        formletterJournalCreate.parmInterCompanyFormletterContract(_formletterContract);
        formletterJournalCreate.parmBatchCreatedBy(_formletterContract.parmBatchCreatedBy());
        formletterJournalCreate.parmIsSimulatePosting(_formletterContract.parmIsSimulatePosting());

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV]))
        {
            formletterJournalCreate.parmLtDocNumberingCode(_formletterContract.parmLtDocNumberingCode());
        }
        // </GEEU>

        return formletterJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromFormLetterContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>FormletterJournalCreate</c> instance from the document status of a provided <c>PurchFormLetterContract</c>.
    /// </summary>
    /// <param name = "_formletterContract">A <c>PurchFormLetterContract</c>.</param>
    /// <returns>A <c>FormletterJournalCreate</c>.</returns>
    protected static FormletterJournalCreate constructFromFormLetterContract(PurchFormLetterContract _formletterContract)
    {
        FormletterJournalCreate formletterJournalCreate;
        #ISOCountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        switch (_formletterContract.getDocumentStatus())
        {
            case DocumentStatus::ConfirmationRequest:
                formletterJournalCreate = PurchConfirmationRequestJournalCreate::construct();
                break;

            case DocumentStatus::PurchaseOrder:
                PurchConfirmationJournalCreate purchConfirmationJournalCreate = PurchConfirmationJournalCreate::construct();
                formletterJournalCreate = purchConfirmationJournalCreate;
                break;

            case DocumentStatus::ReceiptsList:
                formletterJournalCreate = PurchReceiptsListJournalCreate::construct();
                break;

            case DocumentStatus::PackingSlip:
                PurchPackingSlipJournalCreate purchPackingSlipJournalCreate = PurchPackingSlipJournalCreate::newFormLetter(_formletterContract);
                purchPackingSlipJournalCreate.parmInterCompanyVoucher(_formletterContract.parmIntercompanyVoucher());
                formletterJournalCreate = purchPackingSlipJournalCreate;

                // <GEERU>
                if (countryRegion_RU)
                {
                    purchPackingSlipJournalCreate.parmProforma(_formletterContract.parmProforma());
                    purchPackingSlipJournalCreate.parmPreserveReceiptStatement(_formletterContract.parmPreserveReceiptStatement());
                    purchPackingSlipJournalCreate.parmReceiptListDeviationType_RU(_formletterContract.parmReceiptListDeviationType_RU());
                }
                // </GEERU>

                // <GIN>
                if (TaxParameters::checkTaxParameters_IN())
                {
                    purchPackingSlipJournalCreate.printGRN_IN(_formletterContract.parmPrintGRN_IN());
                }
                // </GIN>

                // <GEEPL>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    purchPackingSlipJournalCreate.parmInventLocationId_PL(_formletterContract.parmInventLocationId_PL());
                }
                // </GEEPL>

                break;
            // <GEEPL>
            case DocumentStatus::PlSAD:
                PurchSADJournalCreate sadJournalCreate = PurchSADJournalCreate::construct();
                PurchFormLetterSADContract sadContract = _formletterContract as PurchFormLetterSADContract;
                sadJournalCreate.parmSADExchRate_PL  (sadContract.parmSADExchRate_PL());
                sadJournalCreate.parmSADNumberCode_PL(sadContract.parmSADNumberCode_PL());
                sadJournalCreate.parmSADContract     (sadContract);
                PurchInvoiceJournalCreate purchInvoiceJournalCreateSAD = sadJournalCreate;
            // no break; fall through to invoice
            // </GEEPL>
            case DocumentStatus::Invoice:
            // <GEERU>
            case DocumentStatus::Facture_RU:
                // </GEERU>
                // <GEEPL>
                PurchInvoiceJournalCreate purchInvoiceJournalCreate = purchInvoiceJournalCreateSAD ?
                                                                            purchInvoiceJournalCreateSAD :
                                                                            // </GEEPL>
                                                                            PurchInvoiceJournalCreate::construct();
                // <GEERU>
                if (countryRegion_RU)
                {
                    purchInvoiceJournalCreate.parmPrintAcceptanceReport_RU      (_formletterContract.parmPrintAcceptanceReport_RU());
                    purchInvoiceJournalCreate.parmPrintFacture_RU               (_formletterContract.parmPrintFacture_RU());
                    purchInvoiceJournalCreate.parmPrintInventBaileeReport_RU    (_formletterContract.parmPrintInventBaileeReport_RU());
                }
                // </GEERU>

                PurchFormLetterInvoiceContract purchFormLetterInvoiceContract = _formletterContract as PurchFormLetterInvoiceContract;
                purchInvoiceJournalCreate.parmInterCompanyParmId(purchFormLetterInvoiceContract.parmIntercompanyParmId());
                purchInvoiceJournalCreate.parmPrintFormletter(purchFormLetterInvoiceContract.parmPrintFormletter());
                purchInvoiceJournalCreate.parmInterCompanyVoucher(purchFormLetterInvoiceContract.parmIntercompanyVoucher());
                purchInvoiceJournalCreate.parmExecutingPaymentAuthorizationTask(purchFormLetterInvoiceContract.parmExecutingPaymentAuthorizationTask());
                purchInvoiceJournalCreate.parmIsSimulatePosting(purchFormLetterInvoiceContract.parmIsSimulatePosting());

                // <GIN>
                if (TaxParameters::isExciseEnable_IN())
                {
                    purchInvoiceJournalCreate.parmExciseInovoiceAddress_IN(purchFormLetterInvoiceContract.parmExciseInvoiceAddress_IN());
                }
                // </GIN>
                formletterJournalCreate = purchInvoiceJournalCreate;
                break;
            case DocumentStatus::ApproveJournal:
                PurchApproveJournalCreate purchApproveJournalCreate = PurchApproveJournalCreate::construct();
                PurchFormLetterApprovalContract purchFormLetterApprovalContract = _formletterContract as PurchFormLetterApprovalContract;
                purchApproveJournalCreate.parmLedgerJournalTrans(purchFormLetterApprovalContract.parmLedgerJournalTrans());
                purchApproveJournalCreate.parmOrigTransDate(purchFormLetterApprovalContract.parmOrigTransDate());
                purchApproveJournalCreate.parmOrigVoucher(purchFormLetterApprovalContract.parmOrigVoucher());
                purchApproveJournalCreate.parmTransDate(purchFormLetterApprovalContract.parmDefaultTransDate());
                purchApproveJournalCreate.parmExecutingPaymentAuthorizationTask(purchFormLetterApprovalContract.parmExecutingPaymentAuthorizationTask());
                formletterJournalCreate = purchApproveJournalCreate;
                break;
            // <GEERU>
            case DocumentStatus::Invoice4Paym_RU:
                if (countryRegion_RU)
                {
                    formletterJournalCreate = PurchInvoice4PaymJournalCreate_RU::construct();
                }
                break;
            // </GEERU>
            // <GIN>
            case DocumentStatus::BillOfEntry_IN:
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    formletterJournalCreate = PurchBOEJournalCreate_IN::construct();
                }
                break;
            // </GIN>
        }

        return formletterJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchRFQJournalCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>FormletterJournalCreate</c> class by using the <paramref
    /// name="_FormletterContract" /> parameter that is used to create journal and journal lines for
    /// request for quotes.
    /// </summary>
    /// <param name="_formletterContract">
    /// The <c>PurchRFQFormLetterContract</c> object that relates to the journal and journal lines.
    /// </param>
    /// <param name="_purchRFQParmTable">
    /// The <c>PurchRFQParmTable</c> record that relates to the journal and journal lines.
    /// </param>
    /// <returns>
    /// An instance of the <c>FormletterJournalCreate</c> class.
    /// </returns>
    public static FormletterJournalCreate newPurchRFQJournalCreate(PurchRFQFormLetterContract  _formletterContract,
                                                                   Common              _purchRFQParmTable)
    {
        FormletterJournalCreate     formletterJournalCreate;
        PurchRFQSendJournalCreate   purchRFQSendJournalCreate;

        switch (_formletterContract.getDocumentStatus())
        {
            case DocumentStatus::RFQ     :
                purchRFQSendJournalCreate = PurchRFQSendJournalCreate::construct();
                purchRFQSendJournalCreate.parmPrintPriceAmount(_formletterContract.parmPrintPriceAmount());
                purchRFQSendJournalCreate.parmPrintReplySheet(_formletterContract.parmPrintReplySheet());
                formletterJournalCreate = purchRFQSendJournalCreate;
                break;
            case DocumentStatus::RFQAccept :   formletterJournalCreate = PurchRFQAcceptJournalCreate::construct();break;
            case DocumentStatus::RFQReject :   formletterJournalCreate = PurchRFQRejectJournalCreate::construct();break;
            case DocumentStatus::RFQReSend :   formletterJournalCreate = PurchRFQReSendJournalCreate::construct(); break;
            default : throw error(strFmt("@SYS19306",funcName()));
        }

        formletterJournalCreate.parmParmUpdate(_formletterContract.parmParmUpdate() as PurchRFQParmUpdate);
        formletterJournalCreate.parmParmTable(_purchRFQParmTable);
        return formletterJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesJournalCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>FormletterJournalCreate</c> class by using the <c>formletter</c> parameter that is
    /// used to create journal and journal lines for sales orders.
    /// </summary>
    /// <param name="_formletterContract">
    /// The <c>SalesFormletterContract</c> object that relates to the journal and journal lines.
    /// </param>
    /// <param name="_salesParmTable">
    /// The <c>SalesParmTable</c> record that relates to the journal and journal lines.
    /// </param>
    /// <returns>
    /// An instance of the <c>FormletterJournalCreate</c> class.
    /// </returns>
    public static FormletterJournalCreate newSalesJournalCreate(SalesFormLetterContract _formletterContract,
                                                                SalesParmTable          _salesParmTable)
    {
        DocumentStatusFactoryAttribute  attribute               = new DocumentStatusFactoryAttribute(_formletterContract.getDocumentStatus());
        FormletterJournalCreate         formletterJournalCreate = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(FormletterJournalCreate), attribute) as FormletterJournalCreate;

        if (!formletterJournalCreate)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        if (formletterJournalCreate is FormLetterVersionableJournalCreate)
        {
            FormLetterVersionableJournalCreate formLetterVersionableJournalCreate = formletterJournalCreate as FormLetterVersionableJournalCreate;
            formLetterVersionableJournalCreate.parmFormLetterJournalCreateVersioning(
                FormLetterJournalCreateVersioning::newFormLetter(_formLetterContract, formLetterVersionableJournalCreate));
        }

        formletterJournalCreate.parmParmUpdate(_formletterContract.parmParmUpdate() as SalesParmUpdate);
        formletterJournalCreate.parmParmTable(_salesParmTable);
        formletterJournalCreate.parmDocumentStatus(_formletterContract.getDocumentStatus());
        formletterJournalCreate.parmInterCompanyPosted(_formletterContract.parmIntercompanyPosted());
        formletterJournalCreate.parmInterCompanyFormletterContract(_formletterContract);
        formletterJournalCreate.parmShipmentId(_formletterContract.parmShipmentId());
        formletterJournalCreate.parmInBatch(_formletterContract.parmBatchJobId() != 0);
        formletterJournalCreate.parmRelatedJournal(_formletterContract.parmRelatedJournal());

        #ISOCountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        if (countryRegion_RU)
        {
            formletterJournalCreate.parmCustInvoicePrintoutType_RU(_formletterContract.parmCustInvoicePrintoutType_RU());
            formletterJournalCreate.parmExtraPrintoutLineExists_RU(_formletterContract.parmExtraPrintoutLineExists_RU());
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            formletterJournalCreate.parmFiscalDocType_PL   (_formletterContract.parmFiscalDocType_PL());
            formletterJournalCreate.parmInventLocationId_PL(_formletterContract.parmInventLocationId_PL());
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV]))
        {
            formletterJournalCreate.parmLtDocNumberingCode(_formletterContract.parmLtDocNumberingCode());
        }

        formletterJournalCreate.parmMCRPickWaveReference(_formletterContract.parmMCRPickWaveReference());
        formletterJournalCreate.parmWHSLoadId(_formletterContract.parmWHSLoadId());

        if (_formletterContract.parmLineIdSetPacked())
        {
            container   lineIdSetPacked = SysOperationHelper::base64Decode(_formletterContract.parmLineIdSetPacked());
            Set         lineIdSet       = Set::create(lineIdSetPacked);
            if (lineIdSet.elements())
            {
                formletterJournalCreate.parmPackedLineIdSet(lineIdSetPacked);
            }
        }

        return formletterJournalCreate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>