<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovDrillback</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerCovDrillback</c> class is the central entry point for the cash flow drill back to the originating document functionality.
/// </summary>
internal final class LedgerCovDrillback
{
    private LedgerCovDrillbackContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>showOriginalDocument</Name>
				<Source><![CDATA[
    internal static void showOriginalDocument(LedgerCovDrillbackContract _ledgerCovDrillbackContract)
    {
        changecompany (_ledgerCovDrillbackContract.ledgerCov.DataAreaId)
        {
            LedgerCovDrillback drillback = new LedgerCovDrillback();
            drillback.contract = _ledgerCovDrillbackContract;

            LedgerCovDocumentType documentType = drillback.determineLedgerCovDocumentType();

            SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();
            metadataCollection.SetManagedValue(enumStr(LedgerCovDocumentType), documentType);

            LedgerCovIDrillback ledgerCovIDrillback =
                SysPluginFactory::Instance('Dynamics.AX.Application', classStr(LedgerCovIDrillback), metadataCollection) as LedgerCovIDrillback;

            if (ledgerCovIDrillback == null)
            {
                drillback.throwUnsupportedTypeErrorMessage(documentType);
            }

            if (ledgerCovIDrillback.userHasSecurityAccess(drillback.contract))
            {
                ledgerCovIDrillback.showOriginalDocument(drillback.contract);
            }
            else
            {
                drillback.throwSecurityAccessErrorMessage();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSupportedForDrillback</Name>
				<Source><![CDATA[
    internal static boolean isSupportedForDrillback(LedgerCovDrillbackContract _ledgerCovDrillbackContract)
    {
        boolean isSupported;

        if (_ledgerCovDrillbackContract.ledgerCovDocument.TransRecId != 0 && LedgerCovDrillback::isValidDocumentType(_ledgerCovDrillbackContract))
        {
            isSupported = true;
        }

        return isSupported;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidDocumentType</Name>
				<Source><![CDATA[
    private static boolean isValidDocumentType(LedgerCovDrillbackContract _ledgerCovDrillbackContract)
    {
        return _ledgerCovDrillbackContract.ledgerCovDocument.Type != LedgerCovDocumentType::ExternalSourceEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwSecurityAccessErrorMessage</Name>
				<Source><![CDATA[
    private void throwSecurityAccessErrorMessage()
    {
        throw error("@CashManagement:CashflowDrillbackSecurityErrorMessage");
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwUnsupportedTypeErrorMessage</Name>
				<Source><![CDATA[
    private void throwUnsupportedTypeErrorMessage(LedgerCovDocumentType _documentType)
    {
        throw error(strFmt("@CashManagement:CashFlowDrillbackUnsupportedTypeErrorMessage", _documentType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwOriginatingDocumentNotFoundErrorMessage</Name>
				<Source><![CDATA[
    internal static void throwOriginatingDocumentNotFoundErrorMessage()
    {
        throw error("@CashManagement:CashflowDrillbackOriginatingDocumentNotFoundErrorMessage");
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineLedgerCovDocumentType</Name>
				<Source><![CDATA[
    private LedgerCovDocumentType determineLedgerCovDocumentType()
    {
        LedgerCovDocumentType documentType = LedgerCovDocumentType::None;

        if (contract.ledgerCovDocument)
        {
            documentType = contract.ledgerCovDocument.Type;
        }
        else
        {
            LedgerCovDocument ledgerCovDocumentLocal =
                LedgerCovDocument::findByTransTableIdAndTransRecId(contract.ledgerCov.TransTableId, contract.ledgerCov.TransRecId);

            if (ledgerCovDocumentLocal)
            {
                documentType = ledgerCovDocumentLocal.Type;
            }
            else
            {
                documentType = this.determineLedgerCovDocumentTypeForNone();

                if (documentType == LedgerCovDocumentType::None)
                {
                    this.throwUnsupportedTypeErrorMessage(documentType);
                }
            }
        }

        return documentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineLedgerCovDocumentTypeForNone</Name>
				<Source><![CDATA[
    private LedgerCovDocumentType determineLedgerCovDocumentTypeForNone()
    {
        LedgerCovDocumentType documentType;

        switch (contract.ledgerCov.TransTableId)
        {
            case tableNum(BudgetTransactionLine) :
                documentType = LedgerCovDocumentType::BudgetTransactionLine;
                break;
            case tableNum(CashFlowExternalSource) :
                documentType = LedgerCovDocumentType::ExternalSourceEntry;
                break;
            case tableNum(CustInvoiceTable) :
                documentType = LedgerCovDocumentType::CustInvoiceTable;
                break;
            case tableNum(CustTransOpen) :
                documentType = LedgerCovDocumentType::CustTransOpen;
                break;
            case tableNum(ForecastPurch) :
                documentType = LedgerCovDocumentType::ForecastPurch;
                break;
            case tableNum(ForecastSales) :
                documentType = LedgerCovDocumentType::ForecastSales;
                break;
            case tableNum(GeneralJournalAccountEntry) :
                documentType = LedgerCovDocumentType::GeneralJournalAccountEntry;
                break;
            case tableNum(PurchTable) :
                documentType = LedgerCovDocumentType::PurchTable;
                break;
            case tableNum(SalesTable) :
                documentType = LedgerCovDocumentType::SalesTable;
                break;
            case tableNum(TaxTrans) :
                documentType = LedgerCovDocumentType::TaxTrans;
                break;
            case tableNum(VendTransOpen) :
                documentType = LedgerCovDocumentType::VendTransOpen;
                break;
            default :
                documentType = LedgerCovDocumentType::None;
                break;
        }

        return documentType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>