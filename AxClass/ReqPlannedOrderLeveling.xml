<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPlannedOrderLeveling</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqPlannedOrderLeveling</c> class balances non-approved planned orders in a specified
///    period, which is based on each product for every interval.
/// </summary>
class ReqPlannedOrderLeveling extends RunBase
{
    DialogField     dialogEPEInterval;
    DialogField     dialogPlannedOrderDay;
    DialogField     dialogFromDate;
    DialogField     dialogToDate;
    DialogField     dialogItemId;
    DialogField     dialogApproveOrders;

    LeanCycleTime   epeInterval;
    Days            plannedOrderDays;
    TransDate       levelPeriodStartDate;
    TransDate       levelPeriodEndDate;
    ItemId          plannedOrderItem;
    NoYes           approveOrders;

    InventQty       minimumOrderQty;
    InventQty       standardOrderQy;
    InventQty       maximumOrderQty;

    ReqPlanVersion  planVersion;
    InventDim       plannedOrderInventDim;
    ReqRefType      plannedOrderRefType;
    Days            openDaysInCalendar;
    Qty             existingPlannedOrderQuantity;
    Qty             plannedOrderQty;
    int             numberOfPlannedOrdersToCreate;
    container       datesForPlannedOrders;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
            epeInterval,
            plannedOrderDays,
            approveOrders
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the dialog window.
    /// </summary>
    /// <returns>
    /// A <c>Dialog</c> dialog object.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.addGroup("@SYS25246");

        dialogEPEInterval = dialog.addFieldValue(extendedTypeStr(LeanCycleTime), 1, "@SYS324573", "@SYS324574");
        dialogPlannedOrderDay = dialog.addFieldValue(extendedTypeStr(Days), 1, "@SYS324575", "@SYS324576");

        dialog.addGroup("@SYS14428");

        dialogItemId = dialog.addFieldValue(extendedTypeStr(ItemId), plannedOrderItem, "@SYS12836");

        dialog.addGroup("@SYS40858");
        dialogFromDate = dialog.addFieldValue(extendedTypeStr(TransDate), levelPeriodStartDate, "@SYS24050");
        dialogToDate = dialog.addFieldValue(extendedTypeStr(TransDate), levelPeriodEndDate, "@SYS14656");

        dialog.addGroup("@SYS38598");
        dialogApproveOrders = dialog.addFieldValue(extendedTypeStr(NoYesId), NoYes::Yes, "@SYS324577");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenDaysInCalendar</Name>
				<Source><![CDATA[
    private Days findOpenDaysInCalendar()
    {
        CalendarId      calendarUsedForLevelling;
        Days            openDays;
        TransDate       traverseDates;
        ReqSetupDim     reqSetupDim;
        Day             dayPosition;

        // Find calendar

        reqSetupDim = ReqSetupDim::newInventTable(InventTable::find(plannedOrderItem), plannedOrderInventDim.InventDimId);

        calendarUsedForLevelling = reqSetupDim.reqCalendarId();

        // Find new dates for order creation

        if (calendarUsedForLevelling && epeInterval)
        {
            for (traverseDates = levelPeriodStartDate; traverseDates <= levelPeriodEndDate; traverseDates++)
            {
                if (WorkCalendarDate::isDateOpen(calendarUsedForLevelling, traverseDates))
                {
                    dayPosition++;
                    if (dayPosition == plannedOrderDays)
                    {
                        datesForPlannedOrders = datesForPlannedOrders + [traverseDates];
                    }
                    openDays++;

                    if (openDays mod epeInterval == 0)
                    {
                        dayPosition = 0;
                    }
                }
            }
        }
        else
        {
            // No calendar found
            warning("@SYS324578");
        }

        return openDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlannedOrderQty</Name>
				<Source><![CDATA[
    private Qty findPlannedOrderQty(Qty _existingPlannedOrderQuantity)
    {
        Qty     qty;
        Qty     averageOrderQty;

        if (standardOrderQy)
        {
            qty = standardOrderQy;
        }
        else
        {
            if (conLen(datesForPlannedOrders) > 0)
            {
                averageOrderQty = abs(_existingPlannedOrderQuantity / conLen(datesForPlannedOrders));
            }
            else
            {
                averageOrderQty = _existingPlannedOrderQuantity;
            }

            if (minimumOrderQty != 0 && averageOrderQty < minimumOrderQty)
            {
                qty = minimumOrderQty;
            }
            else
            if (maximumOrderQty != 0 && averageOrderQty > maximumOrderQty)
            {
                qty = maximumOrderQty;
            }
            else
            {
                qty = averageOrderQty;
            }
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets values from the dialog
    /// </summary>
    /// <returns>
    /// true if the dialog is executed; false otherwise
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        epeInterval = dialogEPEInterval.value();
        plannedOrderDays = dialogPlannedOrderDay.value();

        levelPeriodStartDate = dialogFromDate.value();
        levelPeriodEndDate = dialogToDate.value();

        plannedOrderItem = dialogItemId.value();

        approveOrders = dialogApproveOrders.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container pack = conNull();

        return [#CurrentVersion, #CurrentList] + [pack];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEPEInterval</Name>
				<Source><![CDATA[
    public LeanCycleTime parmEPEInterval(LeanCycleTime _epeInterval = epeInterval)
    {
        epeInterval = _epeInterval;

        return epeInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLevelPeriodEndDate</Name>
				<Source><![CDATA[
    public TransDate parmLevelPeriodEndDate(TransDate _levelPeriodEndDate = levelPeriodEndDate)
    {
        levelPeriodEndDate = _levelPeriodEndDate;

        return levelPeriodEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLevelPeriodStartDate</Name>
				<Source><![CDATA[
    public TransDate parmLevelPeriodStartDate(TransDate _levelPeriodStartDate = levelPeriodStartDate)
    {
        levelPeriodStartDate = _levelPeriodStartDate;

        return levelPeriodStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedOrderDays</Name>
				<Source><![CDATA[
    public Days parmPlannedOrderDays(Days _plannedOrderDays = plannedOrderDays)
    {
        plannedOrderDays = _plannedOrderDays;

        return plannedOrderDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedOrderInventDim</Name>
				<Source><![CDATA[
    public InventDim parmPlannedOrderInventDim(InventDim _plannedOrderInventDim = plannedOrderInventDim)
    {
        plannedOrderInventDim = _plannedOrderInventDim;

        return plannedOrderInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedOrderItem</Name>
				<Source><![CDATA[
    public ItemId parmPlannedOrderItem(ItemId _plannedOrderItem = plannedOrderItem)
    {
        plannedOrderItem = _plannedOrderItem;

        return plannedOrderItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedOrderRefType</Name>
				<Source><![CDATA[
    public ReqRefType parmPlannedOrderRefType(ReqRefType _plannedOrderRefType = plannedOrderRefType)
    {
        plannedOrderRefType = _plannedOrderRefType;

        return plannedOrderRefType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanVersion</Name>
				<Source><![CDATA[
    public ReqPlanVersion parmPlanVersion(ReqPlanVersion _planVersion = planVersion)
    {
        planVersion = _planVersion;

        return planVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the planned order leveling
    /// </summary>
    [SuppressBpWarning("BPErrorMethodDeleteFromNotUsed", "The select loop contains custom logic before deletion is made.")]
    public void run()
    {
        ReqCalcScheduleItemExplodePO    reqCalcScheduleItemExplodePO;
        Counter             orders;
        Counter             orderDate;
        TransDate           orderCreationDate;
        ReqPO               reqPO;
        InventLocationId    fromInventLocationId;
        InventLocationId    toInventLocationId;
        InventDim           inventDim;
        container           ordersByInventDim;
        InventDimId         lastInventDimId;
        InventDimId         newOrderInventDimId;
        Qty                 lastQty;
        int                 traverseDimension;

        // Find open days in calendar to determine on what days the new orders should be created
        openDaysInCalendar = this.findOpenDaysInCalendar();

        if (openDaysInCalendar > 0)
        {
            ordersByInventDim = conNull();

            ttsbegin;

            InventDimParm inventDimParm = plannedOrderInventDim.toDimParm();

            // Delete existing non approved planned orders
            while select forupdate reqPO
                order by CovInventDimId
                where reqPO.ReqDate >= levelPeriodStartDate 
                    && reqPO.ReqDate <= levelPeriodEndDate
                    && (reqPO.ReqPOStatus == ReqPOStatus::Administered || reqPO.ReqPOStatus == ReqPOStatus::Unadministered)
                    && reqPO.RefType == plannedOrderRefType
                    && reqPO.ItemId == plannedOrderItem
                    && reqPO.PlanVersion == planVersion.RecId
                #InventDimExistsJoinAllowBlank(reqPO.CovInventDimId, inventDim, plannedOrderInventDim, inventDimParm, inventDimParm)
            {
                if (lastInventDimId != '' && lastInventDimId != reqPO.CovInventDimId)
                {
                    ordersByInventDim += [[lastInventDimId, lastQty]];
                    lastQty = 0;
                }

                lastQty += reqPO.Qty;
                lastInventDimId = reqPO.CovInventDimId;

                // Delete the old plan order
                reqPO.delete();

                existingPlannedOrderQuantity += reqPO.Qty;
            }

            if (lastInventDimId != '' && lastInventDimId != reqPO.CovInventDimId)
            {
                ordersByInventDim += [[lastInventDimId, lastQty]];
            }

            if (conLen(ordersByInventDim) > 0)
            {
                // Traverse quantities by invent dim id
                for (traverseDimension = 1; traverseDimension <= conLen(ordersByInventDim); traverseDimension++)
                {
                    // Get next invent dim id
                    newOrderInventDimId = conPeek(conPeek(ordersByInventDim, traverseDimension), 1);

                    // Get next existing planned order quantity
                    existingPlannedOrderQuantity = conPeek(conPeek(ordersByInventDim, traverseDimension), 2);

                    // Find minimum, maximum and standard order quantity for the item
                    this.setOrderQuantities(newOrderInventDimId);

                    // Find the calculated new planned order quantity for each order
                    plannedOrderQty = this.findPlannedOrderQty(existingPlannedOrderQuantity);

                    // Find number of planned orders to create
                    if (plannedOrderQty > 0)
                    {
                        numberOfPlannedOrdersToCreate = any2int(existingPlannedOrderQuantity / plannedOrderQty) + 1;
                    }
                    else
                    {
                        numberOfPlannedOrdersToCreate = 0;
                    }

                    for (orders = 1; orders < numberOfPlannedOrdersToCreate; orders++)
                    {
                        if (orderDate + 1 > conLen(datesForPlannedOrders))
                        {
                            orderDate = 1;
                        }
                        else
                        {
                            orderDate++;
                        }

                        orderCreationDate = conPeek(datesForPlannedOrders, orderDate);

                        // Create planned order

                        reqPO.clear();

                        reqPO.RefType       = plannedOrderRefType;
                        reqPO.PlanVersion   = planVersion.RecId;

                        reqPO.initFromItemId(plannedOrderItem);

                        reqPO.ReqDate           = orderCreationDate;
                        reqPO.ReqDateOrder      = orderCreationDate;
                        reqPO.Qty               = plannedOrderQty;
                        reqPO.ReqDateDlv        = orderCreationDate;
                        reqPO.CovInventDimId    = newOrderInventDimId;

                        if (approveOrders)
                        {
                            reqPO.ReqPOStatus = ReqPOStatus::Approved;
                        }

                        ReqPlannedOrder::construct().insertFromForm(reqPO, InventDim::find(newOrderInventDimId), fromInventLocationId, toInventLocationId, false);
                    }
                }

                // Run explosion for planned orders
                reqCalcScheduleItemExplodePO = ReqCalcScheduleItemExplodePO::newItemId(plannedOrderItem, ReqPlanVersion::find(planVersion.RecId).ReqPlanId);
                reqCalcScheduleItemExplodePO.runOperation();
            }
            else
            {
                // No existing planned orders found
                warning("@SYS324554");
            }

            ttscommit;
        }
        else
        {
            // There are no open days defined in the calendar for the specified period
            error("@SYS324555");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderQuantities</Name>
				<Source><![CDATA[
    private void setOrderQuantities(InventDimId _inventDimId)
    {
        ReqSetupDim             reqSetupDim;

        reqSetupDim = ReqSetupDim::newInventTable(InventTable::find(plannedOrderItem), _inventDimId);

        minimumOrderQty = reqSetupDim.inventItemInventSetupCache().LowestQty;
        standardOrderQy = reqSetupDim.inventItemInventSetupCache().ExplicitStandardQty;
        maximumOrderQty = reqSetupDim.inventItemInventSetupCache().HighestQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        int         version     = RunBase::getVersion(_packedClass);
        container   packedQuery = conNull();

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates values from the dialog
    /// </summary>
    /// <param name="_calledFrom">
    /// Caller of the planned order leveling
    /// </param>
    /// <returns>
    /// true if the dialog values are correct; false otherwise
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (plannedOrderDays > epeInterval)
        {
            // Planned order day must not be larger than the EPE interval
            ret = ret && checkFailed("@SYS324553");
        }

        if (plannedOrderDays < 1)
        {
            // Planned order day must be positive
            ret = ret && checkFailed("@SYS324564");
        }

        if (epeInterval < 1)
        {
            ret = ret && checkFailed("@SYS324572");
        }

        if (!plannedOrderItem)
        {
            // Item id must be specified
            ret = ret && checkFailed("@SYS319719");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqPlannedOrderLeveling construct()
    {
        return new ReqPlannedOrderLeveling();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ReqPlannedOrderLeveling   reqPlannedOrderLeveling = ReqPlannedOrderLeveling::construct();

        if (_args.caller())
        {
            if (formHasMethod(_args.caller(), identifierStr(parmItemId)))
            {
                reqPlannedOrderLeveling.parmPlannedOrderItem(_args.caller().parmItemId());
            }
            if (formHasMethod(_args.caller(), identifierStr(getFromDate)))
            {
                reqPlannedOrderLeveling.parmLevelPeriodStartDate(_args.caller().getFromDate());
            }
            if (formHasMethod(_args.caller(), identifierStr(getToDate)))
            {
                reqPlannedOrderLeveling.parmLevelPeriodEndDate(_args.caller().getToDate());
            }
            if (formHasMethod(_args.caller(), identifierStr(currentReqRefType)))
            {
                reqPlannedOrderLeveling.parmPlannedOrderRefType(_args.caller().currentReqRefType());
            }
            if (formHasMethod(_args.caller(), identifierStr(parmInventDim)))
            {
                reqPlannedOrderLeveling.parmPlannedOrderInventDim(_args.caller().parmInventDim());
            }
            if (formHasMethod(_args.caller(), identifierStr(parmReqPlanId)))
            {
                reqPlannedOrderLeveling.parmPlanVersion(
                                                        ReqPlan::findReqPlanId(_args.caller().parmReqPlanId()).findActiveVersion()
                                                        );
            }
        }

        if (reqPlannedOrderLeveling.prompt())
        {
            reqPlannedOrderLeveling.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>