<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinitionManagerPayroll</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JournalizingDefinitionManagerPayroll</c> class provides the journalizing definition
/// implementation specific to the payroll module.
/// </summary>
class JournalizingDefinitionManagerPayroll extends JournalizingDefinitionManager
{
    HcmBenefitPlanRecId                 benefitPlanRecId;
    PayrollTaxCodeRecId                 taxCodeRecId;
    PayrollEarningCodeRecId             earningCodeRecId;
    NoYes                               isEmployerLine;
    JournalizingDefinitionPayrollTrans  journalizingDefinitionPayrollTrans;
    #define.LedgerPostingType('LedgerPostingType')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultJournalizingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the journalizing definition ID by the parameter values.
    /// </summary>
    /// <returns>
    ///    The journalizing definition ID based on the class parameter.
    /// </returns>
    /// <remarks>
    ///    This method is a payroll specific implementation of the <c>getDefaultJournalizingDefinition</c>
    ///    method of the <c>JournalizingDefinitionManager</c> class.
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///    The journalizing definition ID cannot be found for the specified parameter values.
    /// </exception>
    public JournalizingDefinitionId getDefaultJournalizingDefinition()
    {
        JournalizingDefinitionId            journalizingDefinitionId;
        PayrollPayStatementLineType         lineType;
        PayrollSpecificCodeRecId            specificCodeRecId;
        PayrollSpecificCodeRecId            specificGroupRecId;
        SysDateEffectiveDataManager         sysDateEffectiveDataManager;

        if (ledgerPostingType == LedgerPostingType::Payroll ||
            ledgerPostingType == LedgerPostingType::ProjPayrollAllocation)
        {
            specificCodeRecId = this.getSpecificCode();
            specificGroupRecId = this.getSpecificGroup();
            lineType = this.getLineType();

            select firstonly JournalizingDefinition from journalizingDefinitionPayrollTrans
                order by Code asc
                where
                  (
                    (journalizingDefinitionPayrollTrans.Code == TableGroupAll::Table
                    && journalizingDefinitionPayrollTrans.SpecificCode == specificCodeRecId) ||
                    (journalizingDefinitionPayrollTrans.Code == TableGroupAll::GroupId
                    && journalizingDefinitionPayrollTrans.SpecificGroup == specificGroupRecId) ||
                    journalizingDefinitionPayrollTrans.Code == TableGroupAll::All
                  ) && journalizingDefinitionPayrollTrans.LineType == lineType
                  && journalizingDefinitionPayrollTrans.PayrollTransactionType == PayrollTransactionType::PayStatement;

            journalizingDefinitionId = journalizingDefinitionPayrollTrans.JournalizingDefinition;

            if (!journalizingDefinitionId)
            {
                // A posting definition is only required for benefit contribution and tax contribution lines
                if (lineType == PayrollPayStatementLineType::BenefitContribution)
                {
                    throw error(strFmt("@Payroll:APostingDefinitionWasNotFoundForTheFollowingContribution1Ass", HcmBenefitPlan::find(specificCodeRecId).BenefitPlanID));
                }
                else if (lineType == PayrollPayStatementLineType::TaxContribution)
                {
                    throw error(strFmt("@Payroll:APostingDefinitionWasNotFoundForTheFollowingContribution1Ass", PayrollTaxCode::find(specificCodeRecId).Code));
                }
            }
            else
            {
                // The line does not require a posting definition
                if (lineType != PayrollPayStatementLineType::BenefitContribution
                    && lineType !=  PayrollPayStatementLineType::TaxContribution)
                {
                    //
                    // Since these types of lines don't require a posting definition, we don't want to
                    // throw an error about a posting definition that isn't currently active.
                    //
                    sysDateEffectiveDataManager = SysDateEffectiveDataManager::construct(SysDateEffectiveSetupType::JournalizingDefinition);
                    if (!sysDateEffectiveDataManager.findVersionByParentIdAndDate(journalizingDefinitionId, transDate).RecId)
                    {
                        // Clear the journalizing definition value since it isn't currently active
                        journalizingDefinitionId = 0;
                    }
                }
            }
        }
        else
        {
            throw error(strfmt("@SYS134109", enum2str(ledgerPostingType), #LedgerPostingType));
        }

        return journalizingDefinitionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the line type of the pay statement line.
    /// </summary>
    /// <returns>
    ///     The line type of the pay statement line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PayrollPayStatementLineType getLineType()
    {
        PayrollPayStatementLineType lineType;

        if (earningCodeRecId != 0)
        {
            lineType = PayrollPayStatementLineType::Earning;
        }
        else if (benefitPlanRecId != 0)
        {
            if (isEmployerLine == NoYes::Yes)
            {
                lineType = PayrollPayStatementLineType::BenefitContribution;
            }
            else
            {
                lineType = PayrollPayStatementLineType::BenefitDeduction;
            }
        }
        else if (taxCodeRecId != 0)
        {
            if (isEmployerLine == NoYes::Yes)
            {
                lineType = PayrollPayStatementLineType::TaxContribution;
            }
            else
            {
                lineType = PayrollPayStatementLineType::TaxDeduction;
            }
        }

        return lineType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecificCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the specific payroll code of the pay statement line.
    /// </summary>
    /// <returns>
    ///     The record ID of the specific payroll code.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PayrollSpecificCodeRecId getSpecificCode()
    {
        PayrollSpecificCodeRecId specificCodeRecId;

        switch (this.getLineType())
        {
            case PayrollPayStatementLineType::Earning:
                specificCodeRecId = this.parmEarningCode();
                break;
            case PayrollPayStatementLineType::BenefitContribution:
            case PayrollPayStatementLineType::BenefitDeduction:
                specificCodeRecId = this.parmBenefitPlan();
                break;
            case PayrollPayStatementLineType::TaxContribution:
            case PayrollPayStatementLineType::TaxDeduction:
                specificCodeRecId = this.parmTaxCode();
                break;
        }

        return specificCodeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecificGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the specific payroll group of the pay statement line.
    /// </summary>
    /// <returns>
    ///     The record ID of the specific payroll group.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PayrollSpecificCodeRecId getSpecificGroup()
    {
        PayrollSpecificCodeRecId specificGroupRecId;

        switch (this.getLineType())
        {
            case PayrollPayStatementLineType::Earning:
            case PayrollPayStatementLineType::BenefitContribution:
            case PayrollPayStatementLineType::BenefitDeduction:
                specificGroupRecId = 0;
                break;
            case PayrollPayStatementLineType::TaxContribution:
                if (PayrollTaxCode::find(this.parmTaxCode()).IsEmployerTax)
                {
                    specificGroupRecId = this.parmTaxGroup();
                }
                else
                {
                    specificGroupRecId = 0;
                }
                break;
            case PayrollPayStatementLineType::TaxDeduction:
                if (!PayrollTaxCode::find(this.parmTaxCode()).IsEmployerTax)
                {
                    specificGroupRecId = this.parmTaxGroup();
                }
                else
                {
                    specificGroupRecId = 0;
                }
                break;
        }

        return specificGroupRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBenefitPlan</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public HcmBenefitPlanRecId parmBenefitPlan(HcmBenefitPlanRecId _benefitPlanRecId = benefitPlanRecId)
    {
        benefitPlanRecId = _benefitPlanRecId;
        return benefitPlanRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEarningCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PayrollEarningCodeRecId parmEarningCode(PayrollEarningCodeRecId _earningCodeRecId = earningCodeRecId)
    {
        earningCodeRecId = _earningCodeRecId;
        return earningCodeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsEmployerLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes parmIsEmployerLine(NoYes _isEmployerLine = isEmployerLine)
    {
        isEmployerLine = _isEmployerLine;
        return isEmployerLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PayrollTaxCodeRecId parmTaxCode(PayrollTaxCodeRecId _taxCodeRecId = taxCodeRecId)
    {
        taxCodeRecId = _taxCodeRecId;
        return taxCodeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PayrollTaxGroupRecId parmTaxGroup()
    {
        return PayrollTaxGroup::findPostingDefEnabledTaxGroupByTaxCode(this.parmTaxCode()).RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>