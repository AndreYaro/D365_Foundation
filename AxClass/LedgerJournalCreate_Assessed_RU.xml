<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCreate_Assessed_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerJournalCreate_Assessed_RU extends LedgerJournalCreate_Tax25_RU
{
#define.SalesTaxCode(3)
    #define.Section(4)
    #define.TaxAmount(14)
    #define.PriorAdvPaymentAmount(15)
    #define.TaxReductionAmount(17)
    #define.OutsideAmount(18)
    #AviFiles
    #define.Section2Type4("@GLS117053")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    protected void createTrans(JournalId  _journalNum)
    {
        SysOperationProgress        operationProgress;
        str                         key;
        RTax25RegisterJournalTable  journalTable;
        RTax25RegisterJournalTrans  journalTrans;
        TaxCode                     taxCode;
        RTax25Query                 query;
        RAssetAssessedRoll          postingRoll = RAssetParameters::find().AssessedRoll;
        Map                         map       = new Map(Types::String, Types::Real);
        RecId                       calendarId = CompanyInfoHelper::fiscalCalendarRecId();

        void putToMap()
        {
            RAssetAmount            pay;
            ;

            pay = round(query.getField(#TaxAmount), 1) -
                  round(query.getField(#PriorAdvPaymentAmount), 1) -
                  round(query.getField(#TaxReductionAmount), 1);

            if (query.getField(#Section) == #Section2Type4)
            {
                pay = -1 * min(pay, round(query.getField(#OutsideAmount), 1));
            }

            if (map.exists(key))
            {
                map.insert(key, map.lookup(key) + pay);
            }
            else
            {
                map.insert(key, pay);
            }
        }

        void createLines()
        {
            MapIterator                 mLoop = new MapIterator(map);
            LineNum                     lineNum;
            RTax25LedgerAccountGroup    ledgerAccountGroup;
            LedgerJournalTrans          ledgerJournalTrans;
            ;

            mLoop.begin();
            while (mLoop.more())
            {
                if (mLoop.value() != 0)
                {
                    ledgerJournalTrans.clear();
                    ledgerJournalTrans.LineNum           = lineNum;
                    ledgerJournalTrans.JournalNum        = _journalNum;
                    ledgerJournalTrans.Voucher           = voucher;
                    ledgerJournalTrans.CurrencyCode      = CompanyInfoHelper::standardCurrency();
                    ledgerJournalTrans.TransDate         = LedgerFiscalCalendar::findFirstOpenStartDateInYear(calendarId, registerJournalTable.EndDate);
                    ledgerJournalTrans.ExchRate          = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
                    ledgerJournalTrans.AccountType       = LedgerJournalACType::Ledger;
                    ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;

                    if (postingRoll == RAssetAssessedRoll::Tax)
                    {
                        ledgerJournalTrans.TaxCode       = mLoop.key();
                        ledgerAccountGroup               = RTax25LedgerAccountGroup::find(TaxTable::find(ledgerJournalTrans.TaxCode).TaxAccountGroup);

                        ledgerJournalTrans.parmOffsetLedgerDimension(
                             this.mergeLedgerDimensionAndDefaultDimension(ledgerAccountGroup.AssessedTaxLedgerDimension, 0));

                        ledgerJournalTrans.parmLedgerDimension(
                             this.mergeLedgerDimensionAndDefaultDimension(TaxLedgerAccountGroup::find(ledgerAccountGroup.TaxAccountGroup).TaxOutgoingLedgerDimension, 0));

                        ledgerJournalTrans.Txt           = strfmt("@GLS116800", ledgerJournalTrans.TaxCode);
                    }
                    else
                    {
                        ledgerJournalTrans.parmOffsetLedgerDimension(
                             this.mergeLedgerDimensionAndDefaultDimension(RTax25LedgerAccountGroup::find(mLoop.key()).AssessedTaxLedgerDimension, 0));

                        ledgerJournalTrans.parmLedgerDimension(
                             this.mergeLedgerDimensionAndDefaultDimension(TaxLedgerAccountGroup::find(mLoop.key()).TaxOutgoingLedgerDimension, 0));

                        ledgerJournalTrans.Txt           = "@GLS116799";
                    }

                    ledgerJournalTrans.AmountCurCredit   = mLoop.value();

                    ledgerJournalTrans.insert();
                    lineNum ++;
                }
                mLoop.next();
            }
        }
        ;

        this.createVoucher(_journalNum);

        operationProgress = new SysOperationProgress();
        operationProgress.setCaption(strfmt("@SYS26868", "@GLS116798", registerJournalTable.EndDate));
        operationProgress.setAnimation(#AviUpdate);

        select firstonly JournalNum, FiscalYear, PeriodType, PeriodNum from journalTable
            order by Version desc
            where journalTable.EndDate == registerJournalTable.EndDate;

        while select journalTrans
            where journalTrans.JournalNum              == journalTable.JournalNum &&
                  journalTrans.FiscalYear              == journalTable.FiscalYear               &&
                  journalTrans.PeriodType              == journalTable.PeriodType               &&
                  journalTrans.PeriodNum               == journalTable.PeriodNum                &&
                  ! journalTrans.Cancelled                                        &&
                  journalTrans.AssessedTaxRegisterType == RAssetAssessedTaxRegType::AssessedTax
        {
            query = RTax25Query::newParameters(RTax25RegisterType::AmountDifference,
                                               journalTrans,
                                               ! RTax25RegisterTrans::existAny(journalTrans.JournalNum,
                                                                               journalTrans.RegisterId,
                                                                               journalTrans.PeriodType,
                                                                               journalTrans.PeriodNum,
                                                                               journalTrans.FiscalYear));
            if (query.first())
            {
                do
        {
                    if (query.getField(#SalesTaxCode))
            {
                        taxCode = RTax25RegCalc_AssessedTax::taxCode(query.getField(#SalesTaxCode));
            }

            switch (postingRoll)
            {
                case RAssetAssessedRoll::Tax:
                    key = taxCode;
                    break;

                case RAssetAssessedRoll::Total:
                    key = TaxTable::find(taxCode).TaxAccountGroup;
                    break;
            }

            putToMap();
        }
                while (query.next());
            }
        }
        ttsbegin;

        createLines();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stornoTxt</Name>
				<Source><![CDATA[
    protected str stornoTxt()
    {
        return "@GLS116801";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>