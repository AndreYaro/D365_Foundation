<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransPoMarkChangeStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqTransPoMarkChangeStatus extends ReqTransPoMark implements BatchRetryable
{
    ReqPOStatus     reqPOStatus;
    DialogField     dialogReqPoStatus;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        reqPoStatus
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        this.dialogAddDefaultFields(dialog,false,true);
        dialogReqPoStatus = dialog.addFieldValue(enumStr(ReqPOStatus), reqPOStatus,"@SYS70010");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        reqPOStatus = dialogReqPoStatus.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelDialogMarkedElements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a label to be used in the dialog for showing how many marked records were marked.
    /// </summary>
    /// <param name="_countMarkedElements">
    ///    The number of marked records.
    /// </param>
    /// <returns>
    ///    A label.
    /// </returns>
    protected str labelDialogMarkedElements(int _countMarkedElements)
    {
        str text;

        switch (_countMarkedElements)
        {
            case 0:
                text = "@SYS345110";
                break;
            case 1:
                text = "@SYS70008";
                break;
            default:
                text = strFmt("@SYS70009",_countMarkedElements);
                break;
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,super(),#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        setPrefix(ReqTransPoMarkChangeStatus::description());

        super();

        try
        {
            ttsBegin;

            if (! this.validate())
            {
                throw error("@SYS18447");
            }
            this.updateStatus();

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = conPeek(_packedClass,1);
        container   base;

        switch (version)
        {
            case #CurrentVersion:
                [version,base,#CurrentList] = _packedClass;
                super(base);
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    protected void updateStatus()
    {
        MapEnumerator       me;
        ReqTrans            reqTransMark;
        ReqPO               reqPO;

        this.mapReqTransMark();

        if (   mapReqTransMark
            && mapReqTransMark.elements())
        {
            me = mapReqTransMark.getEnumerator();

            while (me.moveNext())
            {
                reqTransMark = me.currentValue();

                reqPO = reqTransMark.reqPo(true);

                setPrefix(#prefixField(reqPo,refId));

                if (!reqPO.RecId)
                {
                    throw error(strFmt("@SYS24774",reqTransMark.RefId));
                }

                if (!ReqTrans::refTypeIsPlannedOrder(reqPO.RefType))
                {
                    throw error("@SYS69936");
                }

                if (reqPO.ReqPOStatus != reqPOStatus)
                {
                    reqPO.ReqPOStatus = reqPOStatus;
                    reqPO.update();

                    mapReqPoUpdated.insert(reqPO.RecId,reqPO);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqTransPoMarkChangeStatus construct()
    {
        return new ReqTransPoMarkChangeStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS70007";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ReqTransPoMarkChangeStatus  reqTransPoMarkChangeStatus;

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            reqTransPoMarkChangeStatus = ReqTransPoMarkChangeStatus::newForm(_args);
            reqTransPoMarkChangeStatus.executeAction();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    public static ReqTransPoMarkChangeStatus newForm(Args _args)
    {
        ReqTransPoMarkChangeStatus  reqTransPoMarkChangeStatus  = ReqTransPoMarkChangeStatus::construct();

        reqTransPoMarkChangeStatus.getLast();
        reqTransPoMarkChangeStatus.initFromArgs(_args);

        return reqTransPoMarkChangeStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>