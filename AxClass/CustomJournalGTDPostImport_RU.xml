<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalGTDPostImport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustomJournalGTDPostImport_RU extends CustomJournalPost_RU
{
    boolean skipFacturePost;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFactureJour</Name>
				<Source><![CDATA[
    public void createFactureJour()
    {
        CustomJournalGTDFactureCreate_RU    customJournalGTDFactureCreate;

        customJournalGTDFactureCreate = CustomJournalGTDFactureCreate_RU::construct(this.customDocument());
        customJournalGTDFactureCreate.parmJournalTable(customJournalTable);
        customJournalGTDFactureCreate.parmLedgerVoucher(ledgerVoucher.lastVoucher());
        customJournalGTDFactureCreate.saveLast();

        if (! skipFacturePost && customJournalGTDFactureCreate.prompt())
        {
            customJournalGTDFactureCreate.runOperation();
        }

        factureId = customJournalGTDFactureCreate.factureId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOpenOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether only open <c>InventTrans</c> can be adjusted.
    /// </summary>
    /// <returns>Yes if only open <c>InventTrans</c> can be adjusted; otherwise No</returns>
    protected NoYes updateOpenOnly()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransAdjustUpdate</Name>
				<Source><![CDATA[
    internal void inventTransAdjustUpdate(
        InventTransAdjust      _inventTransAdjust,
        InventTrans            _inventTrans, 
        AmountMST              _adjustNow,
        LedgerDimensionAccount _operationsAccount)
    {
        _inventTransAdjust.updateNow(
            _inventTrans,
            this.updateOpenOnly(),
            NoYes::Yes,
            _adjustNow,
            true,
            0,
            _operationsAccount,
            true,
            _inventTrans.postingBalanceSheet(),
            _inventTrans.accountBalanceSheetLedgerDimension(),
            true,
            null,
            InventAdjustmentSpec::Total);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventAdjust</Name>
				<Source><![CDATA[
    protected void createInventAdjust(CustomJournalTrans_RU _customJournalTrans,
                                      AmountMST             _adjustNow,
                                      MarkupCode            _markupCode)
    {
        InventTrans                 inventTrans;
        InventDim                   inventDim;
        InventTransOriginId         originId = InventTransOrigin::findByInventTransId(_customJournalTrans.SalesPurchInventTransId).RecId;

        InventTransAdjust           inventTransAdjust;
        InventAdjustPost            inventAdjustPost;

        InventAdjustPostSecCur_RU   inventAdjustPostSecCur;
        InventTransAdjustSecCur_RU  inventTransAdjustSecCur;

        AmountMST                       remainAdjustNow = _adjustNow;
        AmountMST                       adjustNow;
        LedgerDimensionDefaultAccount   ledgerDefaultAccount;
        LedgerDimensionAccount          ledgerDimension;
        Qty                             updateQty;

        VendTable                   vendTable = customJournalTable.customVendTable();

        ledgerDefaultAccount = vendTable.summaryLedgerDimension(customJournalTable.customVendPostingProfile());

        if (! ledgerDefaultAccount)
        {
            throw error(strFmt("@GLS115411", vendTable.name()));
        }

        inventAdjustPost = new InventAdjustPost(ledgerVoucher.lastVoucher(),
                                            this.transDate(),
                                            InventAdjustmentSpec::ItemNum,
                                            InventClosing::ledgerTransTxt(InventAdjustmentType::InventOnHand),
                                            storno);

        inventTransAdjust = InventTransAdjust::construct(this.transDate(), ledgerVoucher.lastVoucher());
        inventTransAdjust.parmMarkupCode_RU(_markupCode);

        inventAdjustPostSecCur = InventAdjustPost::newFromCurrency_RU(ledgerVoucherObject.parmVoucher(),
                                                                        ledgerVoucherObject.parmTransDate(),
                                                                        InventAdjustmentSpec::ItemNum,
                                                                        LedgerTransTxt::InventClosingAdjustment,
                                                                        InventTransCurrency_RU::SecondaryCur);

        inventTransAdjustSecCur = InventTransAdjust::construct(ledgerVoucherObject.parmTransDate(),
                                                                ledgerVoucherObject.parmVoucher(),
                                                                false,
                                                                InventTransCurrency_RU::SecondaryCur);
        inventTransAdjustSecCur.parmMarkupCode_RU(_markupCode);

        select sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin                                     == originId                         &&
                  (!_customJournalTrans.InvoiceId   || inventTrans.InvoiceId        == _customJournalTrans.InvoiceId)   &&
                  (!_customJournalTrans.InvoiceDate || inventTrans.DateFinancial    == _customJournalTrans.InvoiceDate) &&
                  inventTrans.StatusReceipt != StatusReceipt::Ordered &&
                  inventTrans.StatusReceipt != StatusReceipt::Registered
            exists join inventDim
                where inventDim.InventDimId    == inventTrans.InventDimId                       &&
                      inventDim.InventGtdId_RU == customJournalTable.InventGTDId;

        updateQty = min(inventTrans.Qty, _customJournalTrans.Qty);

        while select forupdate inventTrans
            where inventTrans.InventTransOrigin                                     == originId                         &&
                  (!_customJournalTrans.InvoiceId   || inventTrans.InvoiceId        == _customJournalTrans.InvoiceId)   &&
                  (!_customJournalTrans.InvoiceDate || inventTrans.DateFinancial    == _customJournalTrans.InvoiceDate) &&
                  inventTrans.StatusReceipt != StatusReceipt::Ordered &&
                  inventTrans.StatusReceipt != StatusReceipt::Registered
            join inventDim
                where inventDim.InventDimId    == inventTrans.InventDimId                       &&
                      inventDim.InventGtdId_RU == customJournalTable.InventGTDId
        {
            if (! inventTrans)
            {
                return;
            }
            adjustNow = updateQty != 0 ? CurrencyExchangeHelper::amount(_adjustNow / updateQty * inventTrans.Qty, customCurrencyCode) : 0;
            remainAdjustNow -= adjustNow;
            if (remainAdjustNow <= Currency::find(customCurrencyCode).RoundingPrecision)
            {
                adjustNow += remainAdjustNow;
                remainAdjustNow = 0;
            }
            ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDefaultAccount, _customJournalTrans.DefaultDimension);

            this.inventTransAdjustUpdate(
                inventTransAdjust,
                inventTrans,
                adjustNow,
                ledgerDimension);

            if (inventTransAdjustSecCur && inventTrans.inventTable().modelGroup().PostOnhandFinancialSecCur_RU)
            {
                inventTransAdjustSecCur.updateNow(inventTrans,
                                                  NoYes::Yes,
                                                  NoYes::Yes,
                                                  CurrencyExchangeHelper::amountCur2MSTSecond_RU(adjustNow, customCurrencyCode, 0, ledgerVoucherObject.parmTransDate(), 0),
                                                  true,
                                                  0,
                                                  ledgerDimension,
                                                  true,
                                                  inventTrans.postingBalanceSheet(),
                                                  inventTrans.accountBalanceSheetLedgerDimension(),
                                                  true,
                                                  null,
                                                  InventAdjustmentSpec::Total);
            }
        }

        inventAdjustPost.updateNow(ledgerVoucher);

        if (inventAdjustPostSecCur)
        {
            inventAdjustPostSecCur.updateNow(ledgerVoucher);
        }

        if (remainAdjustNow != 0)
        {
            throw error(strFmt("@GLS115412", _markupCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkup</Name>
				<Source><![CDATA[
    protected void createMarkup(Common                  _sourceTable,
                                MarkupTable             _markupTable,
                                MarkupValue             _markupValue)
    {
        MarkupTrans                 markupTrans;
        SalesPurchLine              sourceSalesPurchLine;
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        LedgerDimensionAccount      ledgerDimension;
        LedgerPostingType           ledgerPostingType;
        CustomJournalTrans_RU       customJournalTransLocal = _sourceTable;
        CurrencyExchangeHelper      exchangeRateHelper;

        sourceSalesPurchLine = this.sourceSalesPurchLine(customJournalTransLocal);

        markupTrans.clear();
        markupTrans.initFromMarkupTable(_markupTable);
        markupTrans.initFromCaller(this.sourceTableId(), this.sourceSalesPurchLine(customJournalTransLocal));

        markupTrans.CurrencyCode   = customCurrencyCode;
        markupTrans.TransTableId   = sourceSalesPurchLine.TableId;
        markupTrans.TransRecId     = sourceSalesPurchLine.RecId;
        markupTrans.LineNum        = MarkupTrans::lastLineNum(sourceSalesPurchLine.TableId, sourceSalesPurchLine.RecId) + 1;
        markupTrans.Value          = _markupValue;
        markupTrans.MarkupCategory = MarkupCategory::Fixed;
        markupTrans.Txt            = _markupTable.Txt;

        markupTrans.insert();

        if (_markupTable.VendType != MarkupType::LedgerAccount)
        {
            throw error(strFmt("@GLS115423", _markupTable.MarkupCode, MarkupType::LedgerAccount));
        }

        if (! _markupTable.VendPosting || !_markupTable.VendorLedgerDimension)
        {
            throw error(strFmt("@GLS115424", _markupTable.MarkupCode));
        }

        ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_markupTable.VendorLedgerDimension, customJournalTransLocal.DefaultDimension);
        ledgerPostingType   = _markupTable.VendPosting;

        exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                        ledgerVoucherObject.parmAccountingDate());

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucherObject,
                                                                                         ledgerPostingType,
                                                                                         ledgerDimension,
                                                                                         customCurrencyCode,
                                                                                         _markupValue,
                                                                                         exchangeRateHelper);
        ledgerVoucherTransObject.parmTaxParentReferenceTableId(customJournalTable.TableId);
        ledgerVoucherTransObject.parmTaxParentReferenceRecId(customJournalTable.RecId);
        ledgerVoucherTransObject.parmTransTxt(strFmt("@GLS115425", this.txt(), _markupTable.MarkupCode));
        ledgerVoucher.addTrans(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkupable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isMarkupable(CustomJournalTrans_RU    _customJournalTrans,
                                   InventGTDId_RU           _inventGTDId)
    {
        InventTrans         inventTrans;
        InventDim           inventDim;
        InventTransOrigin   inventOrigin;

        select firstonly RecId from inventOrigin
            where inventOrigin.InventTransId == _customJournalTrans.SalesPurchInventTransId
            exists join inventTrans
                where inventTrans.InventTransOrigin == inventOrigin.RecId &&
                      inventTrans.StatusReceipt     == StatusReceipt::Purchased
                exists join inventDim
                    where inventDim.InventDimId    == inventTrans.InventDimId &&
                          inventDim.InventGtdId_RU == _inventGTDId;

        return inventOrigin.RecId != 0 ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingTypeCharge</Name>
				<Source><![CDATA[
    LedgerPostingType ledgerPostingTypeCharge()
    {
        return LedgerPostingType::PurchFee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingTypeDuty</Name>
				<Source><![CDATA[
    LedgerPostingType ledgerPostingTypeDuty()
    {
        return LedgerPostingType::PurchFee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDutyCharge</Name>
				<Source><![CDATA[
    protected void postDutyCharge()
    {
        CustomJournalTrans_RU           customJournalTrans;
        CustomAmount_RU                 dutyAmount;
        CustomJournalTotalAmounts_RU    customJournalTotalAmounts;
        Map                             chargeAdminAllocateMap;
        Map                             chargeEscortAllocateMap;
        Map                             chargeStorageAllocateMap;

        MarkupTable                     markupTableDuty;
        MarkupTable                     markupTableChargeAdmin;
        MarkupTable                     markupTableChargeEscort;
        MarkupTable                     markupTableChargeStorage;

        LedgerVoucherTransObject        ledgerVoucherTransObject;
        LedgerDimensionDefaultAccount   ledgerDefaultAccount;
        LedgerDimensionAccount          ledgerDimension;
        CurrencyExchangeHelper          exchangeRateHelper;

        markupTableDuty = MarkupTable::findByCustomPaymType_RU(CustomPaymType_RU::Duty);

        if (! markupTableDuty)
        {
            this.checkExistMarkup(null, markupTableDuty, CustomPaymType_RU::Duty);
        }

        markupTableChargeAdmin      = MarkupTable::findByCustomPaymType_RU(CustomPaymType_RU::ChargeAdmin);
        markupTableChargeEscort     = MarkupTable::findByCustomPaymType_RU(CustomPaymType_RU::ChargeEscort);
        markupTableChargeStorage    = MarkupTable::findByCustomPaymType_RU(CustomPaymType_RU::ChargeStorage);

        customJournalTotalAmounts   = CustomJournalTotalAmounts_RU::createFromJournal(customJournalTable);

        if (customJournalTable.IncludeIntoCostPrice)
        {
            chargeAdminAllocateMap      = this.prepareChargeAllocMap(customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::ChargeAdmin));
            chargeEscortAllocateMap     = this.prepareChargeAllocMap(customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::ChargeEscort));
            //chargeStorageAllocateMap    = this.prepareChargeAllocMap(customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::ChargeStorage));
            chargeStorageAllocateMap    = this.prepareChargeAllocMapStorage();

            this.checkExistMarkup(chargeAdminAllocateMap, markupTableChargeAdmin, CustomPaymType_RU::ChargeAdmin);
            this.checkExistMarkup(chargeEscortAllocateMap, markupTableChargeEscort, CustomPaymType_RU::ChargeEscort);
            this.checkExistMarkup(chargeStorageAllocateMap, markupTableChargeStorage, CustomPaymType_RU::ChargeStorage);

            while select customJournalTrans
                where customJournalTrans.CustomJournalId == customJournalTable.CustomJournalId
            {
                dutyAmount = 0;
                switch (customJournalTrans.CalculationMethod)
                {
                    case CustomCalculationMethod_RU::Invoice:
                        dutyAmount = customJournalTrans.InvoiceDuty;
                        break;

                    case CustomCalculationMethod_RU::Indicative:
                        dutyAmount = customJournalTrans.IndicativeDuty;
                        break;
                }

                if (this.isMarkupable(customJournalTrans, customJournalTable.InventGTDId))
                {
                    if (dutyAmount)
                    {
                        this.createMarkup(customJournalTrans, markupTableDuty, dutyAmount);
                        postedAmount += CurrencyExchangeHelper::mstAmount(dutyAmount, customCurrencyCode, this.transDate());
                    }
                    this.createChargeMarkupTrans(chargeAdminAllocateMap, markupTableChargeAdmin,      customJournalTrans);
                    this.createChargeMarkupTrans(chargeEscortAllocateMap, markupTableChargeEscort,    customJournalTrans);
                    this.createChargeMarkupTrans(chargeStorageAllocateMap, markupTableChargeStorage,  customJournalTrans);
                }
                else
                {
                    if (dutyAmount)
                    {
                        this.createInventAdjust(customJournalTrans, dutyAmount, markupTableDuty.MarkupCode);
                        postedAmount += CurrencyExchangeHelper::mstAmount(dutyAmount, customCurrencyCode, this.transDate());
                    }

                    this.createChargeInventAdjustTrans(chargeAdminAllocateMap, markupTableChargeAdmin,        customJournalTrans);
                    this.createChargeInventAdjustTrans(chargeEscortAllocateMap, markupTableChargeEscort,      customJournalTrans);
                    this.createChargeInventAdjustTrans(chargeStorageAllocateMap, markupTableChargeStorage,    customJournalTrans);
                }
            }
        }
        else
        {
            while select CalculationMethod, InvoiceDuty, IndicativeDuty, feaccId, DefaultDimension from customJournalTrans
                where customJournalTrans.CustomJournalId == customJournalTable.CustomJournalId
            {
                dutyAmount = 0;
                switch (customJournalTrans.CalculationMethod)
                {
                    case CustomCalculationMethod_RU::Invoice:
                        dutyAmount = customJournalTrans.InvoiceDuty;
                        break;

                    case CustomCalculationMethod_RU::Indicative:
                        dutyAmount = customJournalTrans.IndicativeDuty;
                        break;
                }

                if (dutyAmount)
                {
                    ledgerDefaultAccount = TaxLedgerAccountGroup::accountLedgerDimension(FEACCCustomRateTable_RU::findOnDate(customJournalTrans.feaccId,
                                                                                                                             TaxType_W::CustomDuty_RU,
                                                                                                                             CustomJournalCalc_RU::customAllImportExport(customJournalTable.CustomJournalType),
                                                                                                                             customJournalTrans.CountryRegionId,
                                                                                                                             this.transDate()),
                                                                                         this.taxDirection());

                    ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDefaultAccount, customJournalTrans.DefaultDimension);

                    exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                 ledgerVoucherObject.parmAccountingDate());

                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucherObject,
                                                                                                     this.ledgerPostingTypeDuty(),
                                                                                                     ledgerDimension,
                                                                                                     customCurrencyCode,
                                                                                                     dutyAmount,
                                                                                                     exchangeRateHelper);
                    ledgerVoucherTransObject.parmTaxParentReferenceTableId(customJournalTable.TableId);
                    ledgerVoucherTransObject.parmTaxParentReferenceRecId(customJournalTable.RecId);
                    ledgerVoucherTransObject.parmTransTxt();
                    ledgerVoucher.addTrans(ledgerVoucherTransObject);

                    postedAmount += CurrencyExchangeHelper::mstAmount(dutyAmount, customCurrencyCode, this.transDate());
                }
            }

            //this.createChargeLedgerTrans(CustomChargeType_RU::Administration, customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::ChargeAdmin));
            this.createChargeLedgerTrans(CustomChargeType_RU::AdministrationImport, customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::ChargeAdmin));
            this.createChargeLedgerTrans(CustomChargeType_RU::Escort, customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::ChargeEscort));
            this.createChargeLedgerTrans(CustomChargeType_RU::Storage, customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::ChargeStorage));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTax</Name>
				<Source><![CDATA[
    protected AmountMST postTax(Voucher     _voucher,
                                TransDate   _transDate)
    {
        TaxCustomJournal_RU taxCustomJournal;

        taxCustomJournal = TaxCustomJournal_RU::construct(this.customDocument(),
                                                          _voucher,
                                                          _transDate,
                                                          this.parmJournalTable().TableId,
                                                          this.parmJournalTable().RecId,
                                                          customCurrencyCode,
                                                          ExchangeRateHelper::exchRate(customCurrencyCode, _transDate),
                                                          this.parmJournalTable());

        return taxCustomJournal.calcAndPost(LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceSalesPurchLine</Name>
				<Source><![CDATA[
    SalesPurchLine sourceSalesPurchLine(CustomJournalTrans_RU _customJournalTrans)
    {
        return PurchLine::findInventTransId(_customJournalTrans.SalesPurchInventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    TableId sourceTableId()
    {
        return tableNum(PurchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipFacturePost</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmSkipFacturePost(boolean _skipFacturePost = skipFacturePost)
    {
        skipFacturePost = _skipFacturePost;
        return skipFacturePost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>