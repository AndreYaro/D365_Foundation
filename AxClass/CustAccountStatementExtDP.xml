<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAccountStatementExtDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportQueryAttribute(queryStr(CustAccountStatementExtBaseData)),
    SRSReportParameterAttribute(classStr(CustAccountStatementExtContract))
]
public class CustAccountStatementExtDP extends SrsReportDataProviderPreProcessTempDB
{
    //
    // Instrumentation
    //
    private CustAccountStatementMonitor monitor;

    CustAccountStatementExtTmp custAccountStatementExtTmpNew;
    SysDocuBrandDetailsTmp docuBrandDetails;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustAccountStatementExtTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>CustAccountStatementExtTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>CustAccountStatementExtTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(CustAccountStatementExtTmp))
    ]
    public CustAccountStatementExtTmp getCustAccountStatementExtTmp()
    {
        select custAccountStatementExtTmpNew;
        return custAccountStatementExtTmpNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDocuBrandDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SysDocuBrandDetailsTmp</c> table.
    /// </summary>
    /// <returns>
    /// The <c>SysDocuBrandDetailsTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(SysDocuBrandDetailsTmp))
    ]
    public SysDocuBrandDetailsTmp getSysDocuBrandDetailsTmp()
    {
        select docuBrandDetails;
        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>SysDocuBrandDetailsTmp</c> table with header details.
    /// </summary>
    protected void setSysDocuBrandDetails()
    {
        SysDocuBrandDetailsTmp bufferTable = SysDocuBrandDetails::getDocuBrandDetailsTmp(this);
        docuBrandDetails.clear();
        docuBrandDetails.data(bufferTable.data());
        docuBrandDetails.CurrencySymbol = Currency::find(custAccountStatementExtTmpNew.Currency).Symbol;
        docuBrandDetails.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies data from _custAccountStatementExtTmp to a new new instance of the temp table.
    /// </summary>
    /// <param name = "_custAccountStatementExtTmp">The instance of <c>CustAccountStatementExtTmp</c> to coppy data from. </param>
    /// <param name = "_statementRecId">The statement to filter the copying of data.</param>
    protected void insertNewRecords(CustAccountStatementExtTmp _custAccountStatementExtTmp, RecId _statementRecId)
    {
        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(CustAccountStatementExtDP));
        monitor = CustAccountStatementMonitor::construct(logger);

        using (SysInstrumentationActivityContext activityContext = monitor.enterProcessRecords_External())
        {
            int lineCount = 0;

            // insert_recordlist won't work when not run directly from runnable class (see bug #447462),
            // so for b2b where it can this report can be requested from the business partner operation processor,
            // which means that this alternative implementation is needed.
            if (FeatureStateProvider::isFeatureEnabled(RetailB2BEcommerceFeature::instance()))
            {
                while select _custAccountStatementExtTmp
                    order by _custAccountStatementExtTmp.CustTrans_DataAreaId, _custAccountStatementExtTmp.CustTrans_TransDate, _custAccountStatementExtTmp.CustTrans_Voucher
                    where _custAccountStatementExtTmp.CreatedTransactionId == _statementRecId
                {
                    buf2Buf(_custAccountStatementExtTmp, custAccountStatementExtTmpNew);
                    custAccountStatementExtTmpNew.insert();
                    lineCount++;
                }
            }
            else
            {
                Query q = new Query();
                QueryBuildDataSource qbds = q.addDataSource(tableNum(CustAccountStatementExtTmp));
                qbds.addRange(fieldNum(CustAccountStatementExtTmp, CreatedTransactionId)).value(queryValue(_statementRecId));
                qbds.cursor(_custAccountStatementExtTmp);
                qbds.fields().clearFieldList();
                
                qbds.addOrderByField(fieldNum(CustAccountStatementExtTmp, CustTrans_DataAreaId));
                qbds.addOrderByField(fieldNum(CustAccountStatementExtTmp, CustTrans_TransDate));
                qbds.addOrderByField(fieldNum(CustAccountStatementExtTmp, CustTrans_Voucher));

                CustAccountStatementExtDPTmpTableCopyMapBuilder mapBuilder = CustAccountStatementExtDPTmpTableCopyMapBuilder::contruct(qbds);

                this.mapCustAccountStatementExtTmpToNewTempTableInstance(mapBuilder);
                lineCount = QueryRun::getQueryRowCount(q, maxInt());

                Query::insert_recordset(custAccountStatementExtTmpNew, mapBuilder.getFieldMapping(), q);
            }

            monitor.exitProcessRecords_External(activityContext, lineCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapCustAccountStatementExtTmpToNewTempTableInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the map of fields to copy between the source tmp table intance to the destination tmp table instance.
    /// </summary>
    /// <param name = "_copyMapBuilder">The instance of <c>CustAccountStatementExtDPTmpTableCopyMapBuilder</c> used to build the field map.</param>
    protected void mapCustAccountStatementExtTmpToNewTempTableInstance(CustAccountStatementExtDPTmpTableCopyMapBuilder _copyMapBuilder)
    {
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, AccountNo1_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, AccountNo2_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, AccountNum));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, AmountCheckId));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, AmountDecimals_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, AmountNoDecimals_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Balance01));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Balance02));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Balance03));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Balance04));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Balance05));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Balance06));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Balance07));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, BalanceCurrencyCode));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, BankAccountTable_AccountNum_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, BankAccountTable_Clearing_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, BankGroupIdName_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, BankZipCode_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, ClosingBalance));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, ClosingCurrency));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CompanyAddress));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CompanyCoRegNum));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CompanyEnterpriseNumber));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CompanyGiro));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CompanyLogo));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CompanyName));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CompanyPhone));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CompanyTeleFax));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CompanyVATNum));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Contactperson));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CreditAvailable));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CreditLimit));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Currency));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, currencyCodeISO_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustAddress_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustName_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTable_AccountNum));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTable_Address));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTable_Currency));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTable_Name));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTrans_Balance));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTrans_Credit));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTrans_CurrencyCode));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTrans_Debit));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTrans_DueDate));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTrans_Invoice));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTrans_Voucher));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTrans_DataAreaId));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTrans_markForPaymentSchedule));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTrans_TransDate));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTrans_Txt));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTransOpen_AmountCur));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTransOpen_DueDate));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, DateOfCreation));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Description_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, DueDateTxt));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, DueToDate));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Enterpriseregister_NO));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, FICreditorId));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Flag));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, FlagMainData));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, FormLetterRemarks_Txt));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, FromDate));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, GiroType));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Header_Balance));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Header_Credit));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Header_CurrencyCode));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Header_Debit));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Header_Duedate));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Header_Invoice));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Header_MarkForPayment));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Header_TransDate));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Header_Txt));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading01));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading011));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading012));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading02));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading021));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading022));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading03));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading031));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading032));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading04));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading041));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading042));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading05));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading051));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading052));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading06));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading061));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading062));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading07));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading071));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Heading072));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, HeadingCurrencyCode));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, InvoiceAmount));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, InvoiceAmountDecimals));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, InvoiceAmountNODecimals));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, IsInvoiceAmount));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, LayoutCode_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, MultiCompanyCustCreditAvailable));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, MultiCompanyCustCreditLimit));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, MultiCompanyCustName));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, MultiCompanyCustPaymTermDesc));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, OCRField));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, OcrLine_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, OpeningBalance));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, PaymentId));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, PaymentId2_PaymentId3_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, PaymentRef1_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, PaymentRef2_CH));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, PaymentScheduleText));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, PaymentTxt));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, PaymReference));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, PrintLogo));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, RDPCopy));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, ShowBalance));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Tmp_Amount));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Tmp_Currency));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Tmp_DueDate));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Tmp_Invoice));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, Tmp_TransDate));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, ToDate));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, TaxExternalInvoiceId_CN));
        _copyMapBuilder.addFieldToMap(fieldNum(CustAccountStatementExtTmp, CustTrans_MultiInvoiceId_CN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method calls submethods depending on the parameters.
    /// </remarks>
    public void processReport()
    {
        CustAccountStatementExtTmp custAccountStatementExtTmp;
        CustAccountStatementExtContract contract = this.parmDataContract() as CustAccountStatementExtContract;

        //Set the correct tmpDB table instance to use
        custAccountStatementExtTmp.useExistingTempDBTable(contract.parmCustAccountStatementExtTmp());
        this.insertNewRecords(custAccountStatementExtTmp, contract.parmRecordId());

        select firstOnly custAccountStatementExtTmp
            where custAccountStatementExtTmp.CreatedTransactionId == contract.parmRecordId()
                 && custAccountStatementExtTmp.GiroType != PaymentStub::None;

        // GIRO: Remove this block of code when GIRO no longer prints as a separate report
        if (GiroReportController::needGiroReport(custAccountStatementExtTmp.GiroType))
        {
            GiroReportTmp::populate(this.parmUserConnection(), custAccountStatementExtTmp);
        }

        // set Document Branding Header;
        this.setSysDocuBrandDetails();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>