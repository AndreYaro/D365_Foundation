<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormLetterServiceInstrumentationLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FormLetterServiceInstrumentationLogger</c> class provides activity contexts for form letter instrumentation logging.
/// </summary>
internal final class FormLetterServiceInstrumentationLogger extends FormLetterInstrumentationLogger
{
    private const str InstrumentationNamespaceConsignment = 'Consignment';
    private const str InstrumentationNamespaceSales = 'Sales';
    private const str InstrumentationNamespacePurch = 'Purchase';
    private const str InstrumentationNamespaceProject = 'Project';
    private const str InstrumentationNamespacePurchRFQ = 'PurchaseRFQ';
    private const str InstrumentationNamespaceCustom = 'FormLetter';

    private FormletterType formLetterType;
    private FormLetterServiceInstrumentationActivities formLetterServiceActivities;
    private FormLetterServiceTaskInstrumentationActivities formLetterServiceTaskActivities;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLoggerByType</Name>
				<Source><![CDATA[
    internal static FormLetterInstrumentationLogger createLoggerByType(FormletterType _formLetterType, ClassName _className)
    {
        FormLetterServiceInstrumentationLogger instrumentationLogger = new FormLetterServiceInstrumentationLogger(_className);

        instrumentationLogger.formLetterType = _formLetterType;

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationNamespace</Name>
				<Source><![CDATA[
    protected str instrumentationNamespace()
    {
        switch (formLetterType)
        {
            case FormletterType::Sales:
                return InstrumentationNamespaceSales;

            case FormletterType::Purchase:
                return InstrumentationNamespacePurch;

            case FormletterType::Consignment:
                return InstrumentationNamespaceConsignment;

            case FormletterType::Project:
                return InstrumentationNamespaceProject;

            case FormletterType::PurchRFQ:
                return InstrumentationNamespacePurchRFQ;

            default:
                return InstrumentationNamespaceCustom;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterServiceActivities</Name>
				<Source><![CDATA[
    internal FormLetterServiceInstrumentationActivities formLetterServiceActivities()
    {
        if (!formLetterServiceActivities)
        {
            formLetterServiceActivities = FormLetterServiceInstrumentationActivities::newFromLogger(this);
        }

        return formLetterServiceActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterServiceTaskActivities</Name>
				<Source><![CDATA[
    internal FormLetterServiceTaskInstrumentationActivities formLetterServiceTaskActivities()
    {
        if (!formLetterServiceTaskActivities)
        {
            formLetterServiceTaskActivities = FormLetterServiceTaskInstrumentationActivities::newFromLogger(this);
        }

        return formLetterServiceTaskActivities;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>