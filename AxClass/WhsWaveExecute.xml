<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveExecute</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWaveExecute</c> class is used to run batch job to process waves.
/// </summary>
public class WhsWaveExecute extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    WHSWaveTable            waveTable;
    QueryRun                queryRun;
    WHSWaveStepRefRecId     lastRunWaveStepRefRecId;
    WHSWaveExecutionID      waveExecutionId;
    WHSReleaseToWarehouseId releaseToWarehouseId;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        waveTable,
        waveExecutionId,
        lastRunWaveStepRefRecId,
        releaseToWarehouseId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private Query buildQuery()
    {
        return new Query(queryStr(WHSWaveTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        queryRun = new QueryRun(this.buildQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack(), #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLastRunWaveStepRefRecId</Name>
				<Source><![CDATA[
    public WHSWaveStepRefRecId parmLastRunWaveStepRefRecId(WHSWaveStepRefRecId _lastRunWaveStepRefRecId = lastRunWaveStepRefRecId)
    {
        lastRunWaveStepRefRecId = _lastRunWaveStepRefRecId;

        return lastRunWaveStepRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseToWarehouseId</Name>
				<Source><![CDATA[
    public WHSReleaseToWarehouseId parmReleaseToWarehouseId(WHSReleaseToWarehouseId _releaseToWarehouseId = releaseToWarehouseId)
    {
        releaseToWarehouseId = _releaseToWarehouseId;

        return releaseToWarehouseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveExecutionId</Name>
				<Source><![CDATA[
    public WHSWaveExecutionId parmWaveExecutionId(WHSWaveExecutionId _waveExecutionId = waveExecutionId)
    {
        waveExecutionId = _waveExecutionId;

        return waveExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveTable</Name>
				<Source><![CDATA[
    WHSWaveTable parmWaveTable(WHSWaveTable _waveTable = waveTable)
    {
        waveTable = _waveTable;

        return waveTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupQueryRanges</Name>
				<Source><![CDATA[
    private void setupQueryRanges(Query _query)
    {
        QueryBuildDataSource waveTableDS = _query.dataSourceTable(tableNum(WHSWaveTable));
        if (waveTableDS)
        {
            if (! this.queryFilterExists(_query, tableNum(WHSWaveTable), fieldNum(WHSWaveTable, WaveStatus)))
            {
                waveTableDS.addRange(fieldNum(WHSWaveTable, WaveStatus)).value(SysQuery::value(WHSWaveStatus::Created));
            }

            if (! this.queryFilterExists(_query, tableNum(WHSWaveTable), fieldNum(WHSWaveTable, InventLocationId)))
            {
                waveTableDS.addRange(fieldNum(WHSWaveTable, InventLocationId)).value(SysQuery::valueNotEmptyString());
            }

            QueryBuildDataSource waveTableBatchDS = this.addDataSource(waveTableDS, JoinMode::NoExistsJoin, tableNum(WHSWaveTableBatch));

            QueryBuildDataSource batchDS = this.addDataSource(waveTableBatchDS, JoinMode::ExistsJoin, tableNum(Batchjob));

            str batchjobStatusRange = strFmt('%1,%2,%3,%4,%5,%6', BatchStatus::Executing, BatchStatus::Waiting, BatchStatus::Hold, BatchStatus::Ready, BatchStatus::Scheduled, BatchStatus::Cancelling);

            SysQuery::findOrCreateRange(batchDS, fieldNum(Batchjob, Status)).value(batchjobStatusRange);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryFilterExists</Name>
				<Source><![CDATA[
    private boolean queryFilterExists(Query _query, TableId _tableId, FieldId _fieldId)
    {
        for (Counter idx = 1; idx <= _query.queryFilterCount(); ++idx)
        {
            if (_query.queryFilter(idx).dataSource().table() == _tableId)
            {
                if (_query.queryFilter(idx).field() == fieldId2Name(_tableId, _fieldId))
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataSource</Name>
				<Source><![CDATA[
    private QueryBuildDataSource addDataSource(QueryBuildDataSource _waveTableDS, JoinMode _joinMode, TableId _tableId)
    {
        QueryBuildDataSource queryBuildDataSource;
        for (Counter idx = 1; idx <= _waveTableDS.childDataSourceCount(); ++idx)
        {
            if (_waveTableDS.childDataSourceNo(idx).table() == _tableId)
            {
                queryBuildDataSource = _waveTableDS.childDataSourceNo(idx);
            }
        }

        if (! queryBuildDataSource)
        {
            queryBuildDataSource = _waveTableDS.addDataSource(_tableId);
        }

        queryBuildDataSource.relations(true);
        queryBuildDataSource.joinMode(_joinMode);

        return queryBuildDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canExecuteWave</Name>
				<Source><![CDATA[
    protected boolean canExecuteWave(WHSWaveTable _waveTable)
    {
        boolean canExecute = _waveTable.displayTotalLines() > 0;

        if (_waveTable.waveTemplate().WaveTemplateType == WHSWaveTemplateType::Shipping)
        {
            canExecute = canExecute && _waveTable.numberOfLoadLinesToAllocate() > 0;
        }

        return canExecute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        WHSWaveTable    toPostFromQueryWaveTable;
        WHSWaveId       lastPostedFromQueryWaveId;
        #OCCRetryCount
        
        void handleException(str _failureType)
        {
            WHSWaveId erroredWaveId = waveTable.WaveId ? waveTable.WaveId : toPostFromQueryWaveTable.WaveId;
            if (erroredWaveId)
            {
                var waveProcessingDataCleanup = WHSWaveProcessingDataCleanup::newForWaveExecution(erroredWaveId, waveExecutionId);
                waveProcessingDataCleanup.parmWaveCleanupType('WaveExecuteRun' + _failureType + 'Cleanup');
                waveProcessingDataCleanup.cleanupErroredWave();

                var erroredWaveTable = waveTable.WaveId ? waveTable : toPostFromQueryWaveTable;                
                WhsWaveNotificationManager::instance().handleNotificationsOnWaveExecuted(erroredWaveTable, waveExecutionId, 0, infolog.text());
            }
        }

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            this.setupQueryRanges(queryRun.query());
            
            try
            {
                // If we have a WHSWaveTable record then don't use the query (eg. post in batch single wave from the list page).
                if (waveTable.WaveId)
                {
                    using (var perfTask = WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskWithoutWaveStep(waveTable, waveExecutionId, funcName()+'Single'))
                    {
                        // If we are starting in the middle of a wave we should have the lastRunWaveStepRefRecId.
                        if (lastRunWaveStepRefRecId)
                        {
                            //We may be in a situation where the wave was updated on a different AOS and since we are not requireing to be in tts here the cache may be stale.
                            //Hence we need to ensure we read the wave from the database
                            waveTable = WHSWaveTable::findEnsureRecordIsReadInsideTTS(waveTable.WaveId);

                            if (!WHSWaveErroredIndicator::exists(waveTable.WaveId, waveExecutionId))
                            {
                                WHSPostEngine::executeWaveStepsStatic(waveTable.waveId, waveExecutionId, releaseToWarehouseId, WHSWaveTemplateLine::getWaveStepByRecId(lastRunWaveStepRefRecId));
                            }
                            else
                            {
                                error(strFmt("@WAX:WaveProcessingPreviousStepGenericError", WHSWaveTemplateLine::findByRecId(lastRunWaveStepRefRecId).PostMethodName));
                                perfTask.logInformation(strFmt('Wave errored indicator exist for wave with status %1', waveTable.waveStatus));
                                // If a wave errored indicator exists then we know we need to call into cleanup instead of proceeding with the wave process.
                                handleException('WaveIndicatorError');
                            }
                        }
                        else if (this.canExecuteWave(waveTable))
                        {
                            WHSPostEngine::post(waveTable);
                        }
                    }
                }
                else
                {
                    /*
                        In case of retry, the last wave that was not successfully posted needs to be posted again before
                        we continue with the remaining wave tables of the queryRun.
                    */
                    if (toPostFromQueryWaveTable && toPostFromQueryWaveTable.WaveId != lastPostedFromQueryWaveId)
                    {
                        using (var perfTask = WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskWithoutWaveStep(toPostFromQueryWaveTable, waveExecutionId, funcName()+'Query'))
                        {
                            if (this.canExecuteWave(toPostFromQueryWaveTable))
                            {
                                WHSPostEngine::post(toPostFromQueryWaveTable);
                                lastPostedFromQueryWaveId = toPostFromQueryWaveTable.WaveId;
                            }
                            else
                            {
                                perfTask.logInformation('Wave could not be executed from query processing part during retry.');
                            }
                        }
                    }

                    while (queryRun.next())
                    {
                        toPostFromQueryWaveTable = queryRun.get(tableNum(WHSWaveTable));

                        using (var perfTask = WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskWithoutWaveStep(toPostFromQueryWaveTable, waveExecutionId, funcName()+'Query'))
                        {
                            if (this.canExecuteWave(toPostFromQueryWaveTable))
                            {
                                WHSPostEngine::post(toPostFromQueryWaveTable);
                                lastPostedFromQueryWaveId = toPostFromQueryWaveTable.WaveId;
                            }
                        }
                    }
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    handleException('Deadlock');

                    throw;
                }
                
                retry;
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError(#RetryNum))
                {
                    retry;
                }
                else
                {
                    if (ReqTransientSqlConnectionErrorHandlingHelper::isReqTransientSqlConnectionErrorHandlingToggleEnabled())
                    {
                        handleException('TransientSqlConnectionError');
                    }
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() != 0)
                {
                    throw;
                }

                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    handleException('UpdateConflict');

                    throw Exception::UpdateConflictNotRecovered;
                }
            
                retry;
            }
            catch (Exception::CLRError)
            {
                ApplicationUnhandledExceptionLogger::processUnhandledCLRException();

                handleException('CatchCLRError');

                throw error(strFmt("@WAX3168", waveTable.WaveId));
            }            
            catch
            {
                WHSAugmentErrorMessage::augmentErrorMessage();

                handleException('CatchAll');

                throw error(strFmt("@WAX3168", waveTable.WaveId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    public boolean showQuerySelectButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        container   packedQuery;
        boolean     ret;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedQuery, #CurrentList] = _packedClass;

                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                    ret = true;
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static WHSWaveExecute construct()
    {
        return new WHSWaveExecute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@WAX2604";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        WHSWaveExecute  waveExecute = WHSWaveExecute::construct();

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchController(waveExecute))
        {
            if (waveExecute.isInBatch() || waveExecute.prompt())
            {
                waveExecute.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInstance</Name>
				<Source><![CDATA[
    /// <summary>
	/// Creates a new instance with a wave.
	/// </summary>
	/// <param name="_waveTable">
	/// Wave record.
	/// </param>
	/// <returns>
	/// The created instance.
	/// </returns>
    public static WHSWaveExecute newInstance(WHSWaveTable _waveTable)
    {
        WHSWaveExecute waveExecute = WHSWaveExecute::construct();
        waveExecute.parmWaveTable(_waveTable);

        var batchInfo = waveExecute.batchInfo();

        batchInfo.parmGroupId(WHSParameters::find().WaveBatchGroup);
        batchInfo.parmCaption(strFmt("@WAX3167", _waveTable.WaveId));
        batchInfo.parmRetriesOnFailure(0);
        batchInfo.parmRetryable(false);

        return waveExecute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchInfo</Name>
				<Source><![CDATA[
    public BatchInfo batchInfo()
    {
        BatchInfo ret = super();

        ret.parmRetryable(false);
        ret.parmRetriesOnFailure(0);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classStr(WhsWaveExecute));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSWaveExecute);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>