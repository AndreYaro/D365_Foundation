<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostManagementInstrumentationInventoryClosingLedgerPostingActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostManagementInstrumentationInventoryClosingLedgerPostingActivities</c> class provides inventory closing ledger posting activities for cost management instrumentation logging.
/// </summary>
internal final class CostManagementInstrumentationInventoryClosingLedgerPostingActivities
{
    private const str ActivityNamePrefix = 'InventoryClosing.LedgerPosting.';
    private const str InventAdjustmentTypeProperty = 'InventoryAdjustmentType';
    private const str CalculateAndPostVarianceAdjustmentsProperty = 'CalculateAndPostVarianceAdjustments';
    private const str CalcInventCostTransSumProperty = 'CalculateInventCostTransSum';
    private const str CheckProdStatusProperty = 'CheckProdStatus';
    private const str PostAdjustmentsToLedgerProperty = 'PostAdjustmentsToLedger';
    private const str UpdateLedgerPostingProperty = 'UpdateLedgerPosting';
    private const str UpdateOpenProductionOrdersProperty = 'UpdateOpenProductionOrders';
    private CostManagementInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(CostManagementInstrumentationLogger _instrumentationLogger)
    {
        instrumentationLogger = _instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    internal static CostManagementInstrumentationInventoryClosingLedgerPostingActivities newFromLogger(CostManagementInstrumentationLogger _instrumentationLogger)
    {
        return new CostManagementInstrumentationInventoryClosingLedgerPostingActivities(_instrumentationLogger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndPostVarianceAdjustments</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext calcAndPostVarianceAdjustments(InventClosing _inventClosing)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + CalculateAndPostVarianceAdjustmentsProperty);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);

        activityContext.addCustomProperty(ActivityNamePrefix + InventAdjustmentTypeProperty, enum2Symbol(enumNum(InventAdjustmentType), _inventClosing.AdjustmentType));
        activityContext.addCustomProperty(ActivityNamePrefix + tableStr(InventClosing), int642Str(_inventClosing.RecId));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInventCostTransSum</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext calcInventCostTransSum(InventClosing _inventClosing)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + CalcInventCostTransSumProperty);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);

        activityContext.addCustomProperty(ActivityNamePrefix + InventAdjustmentTypeProperty, enum2Symbol(enumNum(InventAdjustmentType), _inventClosing.AdjustmentType));
        activityContext.addCustomProperty(ActivityNamePrefix + tableStr(InventClosing), int642Str(_inventClosing.RecId));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProdStatus</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext checkProdStatus(InventClosing _inventClosing)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + CheckProdStatusProperty);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);

        activityContext.addCustomProperty(ActivityNamePrefix + InventAdjustmentTypeProperty, enum2Symbol(enumNum(InventAdjustmentType), _inventClosing.AdjustmentType));
        activityContext.addCustomProperty(ActivityNamePrefix + tableStr(InventClosing), int642Str(_inventClosing.RecId));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAdjustmentsToLedger</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext postAdjustmentsToLedger(InventClosing _inventClosing)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + PostAdjustmentsToLedgerProperty);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);

        activityContext.addCustomProperty(ActivityNamePrefix +InventAdjustmentTypeProperty, enum2Symbol(enumNum(InventAdjustmentType), _inventClosing.AdjustmentType));
        activityContext.addCustomProperty(ActivityNamePrefix + tableStr(InventClosing), int642Str(_inventClosing.RecId));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerPosting</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateLedgerPosting(InventClosing _inventClosing)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + UpdateLedgerPostingProperty);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);

        activityContext.addCustomProperty(ActivityNamePrefix + InventAdjustmentTypeProperty, enum2Symbol(enumNum(InventAdjustmentType), _inventClosing.AdjustmentType));
        activityContext.addCustomProperty(ActivityNamePrefix + tableStr(InventClosing), int642Str(_inventClosing.RecId));

        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOpenProdOrders</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateOpenProdOrders(InventClosing _inventClosing)
    {
        SysInstrumentationActivity activity = instrumentationLogger.activity(ActivityNamePrefix + UpdateOpenProductionOrdersProperty);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(activity);

        activityContext.addCustomProperty(ActivityNamePrefix +InventAdjustmentTypeProperty, enum2Symbol(enumNum(InventAdjustmentType), _inventClosing.AdjustmentType));
        activityContext.addCustomProperty(ActivityNamePrefix + tableStr(InventClosing), int642Str(_inventClosing.RecId));

        return activityContext;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>