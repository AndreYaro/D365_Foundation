<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerInquiryGeneral_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the general ledger inquiry.
/// </summary>
final class LedgerInquiryGeneral_CN extends RunBaseBatch implements BatchRetryable
{
    #MacroLib.File
    TmpGeneralLedger_CN     tmpGeneralLedger_CN;

    LedgerAccount           accountStart;
    LedgerAccount           accountEnd;
    FiscalYearStart         fiscalYearStartDate;
    FiscalYearStart         firstFiscalYearStartDate;
    FiscalCalendarYear      fiscalCalendarYear;
    RecId                   companyFiscalCalendarRecId;
    PeriodEnd               periodEnd;
    AmountMST               periodToDate;
    QueryRun                queryRun;
    Query                   queryGLWithDimension;
    Counter                 numOfLines;
    container               currencyCode;
    CurrencyCode            companyCurrencyCode;
    boolean                 submitQuery;
    Description             openingExplanation;
    Description             openingExplanationForCurrency;
    Map                     currencyBeginBalance;
    Map                     beginBalance;
    boolean                 excludeUnusedAccounts;

    DialogField     dialogFieldFromMainAccount;
    DialogField     dialogFieldToMainAccount;
    DialogField     dialogFieldFiscalYear;
    DialogField     dialogFieldFiscalPeriod;

    MainAccountNum          fromAccountNum;
    MainAccountNum          toAccountNum;
    FiscalYearName          fiscalYearName;
    PeriodName              fiscalPeriodName;
    LedgerDimensionAccount  ledgerDimensionFromOtherForm;
    container               filterDimensions;

    LedgerDimensionExpressionBuilderHelper_CN expressionBuilderHelper = LedgerDimensionExpressionBuilderHelper_CN::construct();

    // Those two consts are used to sorting purpose in inquiry form and report.
    const Integer BeginningRecord = 1;
    const Integer SummaryRecord = 2;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        fromAccountNum,
        toAccountNum,
        fiscalYearName,
        fiscalPeriodName
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convetMonthToStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert month to string.
    /// </summary>
    /// <param name="_transDate">
    /// Transaction date.
    /// </param>
    /// <returns>
    /// Period month.
    /// </returns>
    public MonthName convetMonthToStr(TransDate _transDate)
    {
        MonthName periodMonth;

        periodMonth = int2str(mthofyr(_transDate));

        return periodMonth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convetYearToStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert year to string.
    /// </summary>
    /// <param name="_transDate">
    /// Transaction date.
    /// </param>
    /// <returns>
    /// Period year.
    /// </returns>
    public DateDayName convetYearToStr(TransDate _transDate)
    {
        DateDayName periodYear;

        periodYear = int2str(year(_transDate));

        return periodYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodBalancesForDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create general ledger period balances for dimension.
    /// </summary>
    /// <param name = "_mainAccountId">The main account id.</param>
    /// <param name = "_fromMenu">Indicates if the class is called from menu items.</param>
    public void createPeriodBalancesForDimension(MainAccountNum _mainAccountId, boolean _fromMenu)
    {
        QueryBuildDataSource qbds;

        SysQuery::findOrCreateRange(queryGLWithDimension.dataSourceTable(tableNum(DimensionAttributeValueCombination)),
            fieldNum(DimensionAttributeValueCombination, MainAccountValue)).value(queryValue(_mainAccountId));

        GeneralJournalAccountEntry  generalJournalAccountEntryOpening;
        GeneralJournalAccountEntry  generalJournalAccountEntryDetails;
        FiscalCalendarPeriod        fiscalCalendarPeriod;
        FiscalCalendarPeriod        lastPeriod;

        PeriodStart             lastPeriodStartDate;
        AmountMST               totalMST;
        AmountMST               totalMSTDRYear;
        AmountMST               totalMSTCRYear;
        AmountMST               totalMSTDRMonth;
        AmountMST               totalMSTCRMonth;
        Amount                  beginningAmount;
        Description             monthExplanation;
        Description             yearExplanation;
        boolean                 hasTransInCurrentYear;
        DimensionDisplayValue   summaryAccount;
        DimensionDisplayValue   summaryAccountName;
        container               summaryAccountCon;

        DimensionNameValueListContract dimensionNameValueList;

        QueryRun queryRunGLWithDimension = new QueryRun(queryGLWithDimension);

        while (queryRunGLWithDimension.next())
        {
            if (queryRunGLWithDimension.changed(tableNum(DimensionAttributeValueCombination)))
            {
                DimensionAttributeValueCombination ledgerDimension = queryRunGLWithDimension.get(tablenum(DimensionAttributeValueCombination));

                if (ledgerDimensionFromOtherForm)
                {
                    dimensionNameValueList = LedgerDimensionFacade::getDimensionNameValueListFromLedgerDimensionForHierarchy(
                        ledgerDimension,
                        ledgerDimension.AccountStructure);

                    summaryAccount = LedgerDimensionFacade::getDisplayValueForLedgerDimension(ledgerDimension.RecId);;
                    summaryAccountName = LedgerInquiryDialogHelper_CN::getDimensionValueByDimensionLayout(ledgerDimension.RecID, DimensionDisplayLayout_CN::OnlyName, false);
                }
                else
                {
                    container filterDimensionsWithAccount = filterDimensions + DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

                    dimensionNameValueList = LedgerInquiryDialogHelper_CN::getDimensionNameValueListFromLedgerDimension(
                        ledgerDimension.RecId,
                        filterDimensionsWithAccount);
                    [summaryAccount, summaryAccountName] = LedgerInquiryDialogHelper_CN::getSummaryAccountAndNameFromLedgerDimension(
                        ledgerDimension.RecId,
                        filterDimensionsWithAccount);
                }

                if (!conFind(summaryAccountCon, summaryAccount))
                {
                    summaryAccountCon += summaryAccount;

                    GeneralJournalAccountEntry transactionsInCurrentYear;
                    GeneralJournalEntry journalEntry;

                    select firstonly RecId from transactionsInCurrentYear
                        where transactionsInCurrentYear.LedgerDimension == ledgerDimension.RecId
                        exists join journalEntry
                            where journalEntry.RecId == transactionsInCurrentYear.GeneralJournalEntry
                                && journalEntry.Ledger == Ledger::current()
                                && journalEntry.AccountingDate >= fiscalYearStartDate
                                && journalEntry.AccountingDate <= periodEnd;

                    hasTransInCurrentYear = transactionsInCurrentYear.RecId != 0;

                    // Gets the sum of AccountingCurrencyAmount of previous years.
                    Query queryForBeginningAmount = this.buildTransactionQuery();

                    QueryBuildDataSource qbdsGJAEForBeginning = queryForBeginningAmount.dataSourceTable(tableNum(GeneralJournalAccountEntry));
                    qbdsGJAEForBeginning.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);

                    SysQuery::findOrCreateRange(
                            queryForBeginningAmount.dataSourceTable(tableNum(GeneralJournalEntry)),
                            fieldNum(GeneralJournalEntry, AccountingDate)).value(queryRange(firstFiscalYearStartDate, fiscalYearStartDate));
                    SysQuery::findOrCreateRange(
                            queryForBeginningAmount.dataSourceTable(tableNum(FiscalCalendarPeriod)),
                            fieldNum(FiscalCalendarPeriod, Type)).value(queryValue(FiscalPeriodType::Opening));

                    this.applyDimensionFilterWithDimNameValueList(
                        queryForBeginningAmount.dataSourceTable(tableNum(DimensionAttributeValueCombination)),
                        dimensionNameValueList);

                    QueryRun queryRunForBeginningAmount = new QueryRun(queryForBeginningAmount);

                    if (queryRunForBeginningAmount.next())
                    {
                        generalJournalAccountEntryOpening = queryRunForBeginningAmount.get(tableNum(GeneralJournalAccountEntry));
                    }

                    // Inserts opening balance record of accounting currency.
                    if (!excludeUnusedAccounts
                        || hasTransInCurrentYear
                        || generalJournalAccountEntryOpening.AccountingCurrencyAmount)
                    {
                        this.insertDataToTmpTable(
                            BeginningRecord,
                            fiscalYearStartDate,
                            summaryAccount,
                            summaryAccountName,
                            companyCurrencyCode,
                            openingExplanation,
                            0, 0, generalJournalAccountEntryOpening.AccountingCurrencyAmount);
                    }

                    totalMSTDRYear = 0;
                    totalMSTCRYear = 0;
                    totalMST = generalJournalAccountEntryOpening.AccountingCurrencyAmount;

                    boolean isFirst = true;
                    boolean insertData;

                    // Gets transaction details of by period.
                    Query queryForTransactionByPeriod = new Query();

                    QueryBuildDataSource qbdsFiscalCalendarPeriod = queryForTransactionByPeriod.addDataSource(tableNum(FiscalCalendarPeriod));
                    qbdsFiscalCalendarPeriod.addSelectionField(fieldNum(FiscalCalendarPeriod, StartDate));
                    qbdsFiscalCalendarPeriod.addGroupByField(fieldNum(FiscalCalendarPeriod, StartDate));
                    qbdsFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, FiscalCalendar)).value(queryValue(companyFiscalCalendarRecId));
                    qbdsFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, StartDate)).value(queryRange(fiscalYearStartDate, dateMax()));
                    qbdsFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, EndDate)).value(queryRange(dateNull(), periodEnd));
                    qbdsFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(queryValue(FiscalPeriodType::Operating));

                    QueryBuildDataSource qbdsGJE = qbdsFiscalCalendarPeriod.addDataSource(tableNum(GeneraljournalEntry));
                    qbdsGJE.addLink(fieldNum(FiscalCalendarPeriod, RecId), fieldNum(GeneraljournalEntry, FiscalCalendarPeriod));
                    qbdsGJE.joinMode(JoinMode::OuterJoin);
                    qbdsGJE.addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(queryRange(fiscalCalendarPeriod.StartDate, fiscalCalendarPeriod.EndDate));
                    qbdsGJE.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));

                    QueryBuildDataSource qbdsGJAE = qbdsGJE.addDataSource(tableNum(GeneralJournalAccountEntry));
                    qbdsGJAE.addLink(fieldNum(GeneralJournalEntry, RecId), fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry));
                    qbdsGJAE.joinMode(JoinMode::OuterJoin);
                    qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, IsCredit));
                    qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);
                    qbdsGJAE.addGroupByField(fieldNum(GeneralJournalAccountEntry, IsCredit));

                    QueryBuildDataSource qbdsDimCombination = qbdsGJAE.addDataSource(tableNum(DimensionAttributeValueCombination));
                    qbdsDimCombination.addLink(fieldNum(GeneralJournalAccountEntry, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));
                    qbdsDimCombination.joinMode(JoinMode::ExistsJoin);

                    this.applyDimensionFilterWithDimNameValueList(qbdsDimCombination, dimensionNameValueList);

                    QueryRun queryRunForTransactionByPeriod = new QueryRun(queryForTransactionByPeriod);

                    while (queryRunForTransactionByPeriod.next())
                    {
                        fiscalCalendarPeriod = queryRunForTransactionByPeriod.get(tableNum(FiscalCalendarPeriod));
                        generalJournalAccountEntryDetails = queryRunForTransactionByPeriod.get(tableNum(GeneralJournalAccountEntry));

                        if (isFirst)
                        {
                            lastPeriodStartDate = fiscalCalendarPeriod.StartDate;
                            isFirst = false;
                        }

                        if (insertData && lastPeriodStartDate != fiscalCalendarPeriod.StartDate)
                        {
                            lastPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(
                                companyFiscalCalendarRecId,
                                lastPeriodStartDate);

                            [monthExplanation, yearExplanation] = this.getPeriodExplanation(lastPeriod.currentLedgerPeriodStatus());

                            // Inserts the summary of the current period.
                            this.insertDataToTmpTable(
                                SummaryRecord,
                                lastPeriodStartDate,
                                summaryAccount,
                                summaryAccountName,
                                companyCurrencyCode,
                                monthExplanation,
                                totalMSTDRMonth, totalMSTCRMonth, totalMSTDRMonth - totalMSTCRMonth,
                                totalMSTDRMonth, totalMSTCRMonth, totalMSTDRMonth - totalMSTCRMonth);

                            // Inserts the summary of the year up to current period.
                            this.insertDataToTmpTable(
                                SummaryRecord,
                                lastPeriodStartDate,
                                summaryAccount,
                                summaryAccountName,
                                companyCurrencyCode,
                                yearExplanation,
                                totalMSTDRYear, totalMSTCRYear, totalMST,
                                totalMSTDRYear, totalMSTCRYear, totalMST);

                            totalMSTDRMonth = 0;
                            totalMSTCRMonth = 0;
                        }

                        totalMST        += generalJournalAccountEntryDetails.AccountingCurrencyAmount;
                        totalMSTDRYear  += generalJournalAccountEntryDetails.IsCredit ? 0 : generalJournalAccountEntryDetails.AccountingCurrencyAmount;
                        totalMSTCRYear  += generalJournalAccountEntryDetails.IsCredit ? -generalJournalAccountEntryDetails.AccountingCurrencyAmount : 0;
                        totalMSTDRMonth += generalJournalAccountEntryDetails.IsCredit ? 0 : generalJournalAccountEntryDetails.AccountingCurrencyAmount;
                        totalMSTCRMonth += generalJournalAccountEntryDetails.IsCredit ? -generalJournalAccountEntryDetails.AccountingCurrencyAmount : 0;

                        lastPeriodStartDate = fiscalCalendarPeriod.StartDate;
                        insertData = generalJournalAccountEntryDetails || !excludeUnusedAccounts;
                    }

                    if (insertData)
                    {
                        lastPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(
                                    companyFiscalCalendarRecId,
                                    lastPeriodStartDate);

                        [monthExplanation, yearExplanation] = this.getPeriodExplanation(lastPeriod.currentLedgerPeriodStatus());

                        // Inserts the summary of the month for the last period.
                        this.insertDataToTmpTable(
                            SummaryRecord,
                            lastPeriodStartDate,
                            summaryAccount,
                            summaryAccountName,
                            companyCurrencyCode,
                            monthExplanation,
                            totalMSTDRMonth, totalMSTCRMonth, totalMSTDRMonth - totalMSTCRMonth,
                            totalMSTDRMonth, totalMSTCRMonth, totalMSTDRMonth - totalMSTCRMonth);

                        // Inserts the summary of the year for the last period.
                        this.insertDataToTmpTable(
                            SummaryRecord,
                            lastPeriodStartDate,
                            summaryAccount,
                            summaryAccountName,
                            companyCurrencyCode,
                            yearExplanation,
                            totalMSTDRYear, totalMSTCRYear, totalMST,
                            totalMSTDRYear, totalMSTCRYear, totalMST);
                    }

                    this.insertGeneralLedgerForDimensionByCurrency(dimensionNameValueList, summaryAccount, summaryAccountName, hasTransInCurrentYear);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGeneralLedgerForDimensionByCurrency</Name>
				<Source><![CDATA[
    private void insertGeneralLedgerForDimensionByCurrency(
        DimensionNameValueListContract  _dimensionNameValueListContract,
        DimensionDisplayValue           _summaryAccount,
        DimensionDisplayValue           _summaryAccountName,
        boolean                         _hasTransInCurrentYear)
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        FiscalCalendarPeriod                fiscalCalendarPeriod;

        Map openingBalanceCurMapForDimension = new Map(Types::String, Types::Container);

        Query queryForBeginningAmountCur = this.buildTransactionQuery();

        QueryBuildDataSource qbdsGJAEForBeginning = queryForBeginningAmountCur.dataSourceTable(tableNum(GeneralJournalAccountEntry));
        qbdsGJAEForBeginning.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);
        qbdsGJAEForBeginning.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount), SelectionField::Sum);
        qbdsGJAEForBeginning.addGroupByField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));

        SysQuery::findOrCreateRange(
            queryForBeginningAmountCur.dataSourceTable(tableNum(GeneralJournalEntry)),
            fieldNum(GeneralJournalEntry, AccountingDate))
                .value(
                    queryRange(LedgerFiscalCalendar::findOpeningStartDateByDate(companyFiscalCalendarRecId, fiscalYearStartDate),
                    fiscalYearStartDate));
        SysQuery::findOrCreateRange(
            queryForBeginningAmountCur.dataSourceTable(tableNum(FiscalCalendarPeriod)),
            fieldNum(FiscalCalendarPeriod, Type)).value(queryValue(FiscalPeriodType::Opening));

        this.applyDimensionFilterWithDimNameValueList(
            queryForBeginningAmountCur.dataSourceTable(tableNum(DimensionAttributeValueCombination)),
            _dimensionNameValueListContract);

        QueryRun queryRunForBeginningAmountCur = new QueryRun(queryForBeginningAmountCur);

        while (queryRunForBeginningAmountCur.next())
        {
            generalJournalAccountEntry = queryRunForBeginningAmountCur.get(tableNum(GeneralJournalAccountEntry));

            if (!excludeUnusedAccounts
                || _hasTransInCurrentYear
                || generalJournalAccountEntry.AccountingCurrencyAmount)
            {
                this.insertDataToTmpTable(
                    BeginningRecord,
                    fiscalYearStartDate,
                    _summaryAccount,
                    _summaryAccountName,
                    generalJournalAccountEntry.TransactionCurrencyCode,
                    strFmt(openingExplanationForCurrency, generalJournalAccountEntry.TransactionCurrencyCode),
                    0, 0, generalJournalAccountEntry.AccountingCurrencyAmount,
                    0, 0, generalJournalAccountEntry.TransactionCurrencyAmount,
                    false);

                openingBalanceCurMapForDimension.insert(
                    generalJournalAccountEntry.TransactionCurrencyCode,
                    [generalJournalAccountEntry.AccountingCurrencyAmount, generalJournalAccountEntry.TransactionCurrencyAmount]);
            }
        }

        Map totalAmountMap = Map::create(openingBalanceCurMapForDimension.pack());
        Map totalAmountYearMap = new Map(Types::String, Types::Container);

        AmountMST   totalMST;
        AmountCur   totalCur;
        AmountMST   totalMSTDRYear;
        AmountMST   totalMSTCRYear;
        AmountCur   totalCurDRYear;
        AmountCur   totalCurCRYear;
        AmountMST   totalMSTDRMonth;
        AmountMST   totalMSTCRMonth;
        AmountCur   totalCurDRMonth;
        AmountCur   totalCurCRMonth;
        Description monthExplanation;
        Description yearExplanation;

        FiscalCalendarPeriod    lastPeriod;
        PeriodStart             lastPeriodStartDate;
        currencyCode            lastCurrency;
        boolean                 isFirst = true;
        boolean                 insertData;

        // Gets transaction details of by period.
        Query queryForTransactionByPeriod = new Query();

        QueryBuildDataSource qbdsFiscalCalendarPeriod = queryForTransactionByPeriod.addDataSource(tableNum(FiscalCalendarPeriod));
        qbdsFiscalCalendarPeriod.addSelectionField(fieldNum(FiscalCalendarPeriod, StartDate));
        qbdsFiscalCalendarPeriod.addGroupByField(fieldNum(FiscalCalendarPeriod, StartDate));
        qbdsFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, FiscalCalendar)).value(queryValue(companyFiscalCalendarRecId));
        qbdsFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, StartDate)).value(queryRange(fiscalYearStartDate, dateMax()));
        qbdsFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, EndDate)).value(queryRange(dateNull(), periodEnd));
        qbdsFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(queryValue(FiscalPeriodType::Operating));

        QueryBuildDataSource qbdsGJE = qbdsFiscalCalendarPeriod.addDataSource(tableNum(GeneraljournalEntry));
        qbdsGJE.addLink(fieldNum(FiscalCalendarPeriod, RecId), fieldNum(GeneraljournalEntry, FiscalCalendarPeriod));
        qbdsGJE.joinMode(JoinMode::OuterJoin);
        qbdsGJE.addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(queryRange(fiscalCalendarPeriod.StartDate, fiscalCalendarPeriod.EndDate));
        qbdsGJE.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));

        QueryBuildDataSource qbdsGJAE = qbdsGJE.addDataSource(tableNum(GeneralJournalAccountEntry));
        qbdsGJAE.addLink(fieldNum(GeneralJournalEntry, RecId), fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry));
        qbdsGJAE.joinMode(JoinMode::OuterJoin);
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, IsCredit));
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount), SelectionField::Sum);
        qbdsGJAE.addGroupByField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));
        qbdsGJAE.addGroupByField(fieldNum(GeneralJournalAccountEntry, IsCredit));

        QueryBuildDataSource qbdsDimCombination = qbdsGJAE.addDataSource(tableNum(DimensionAttributeValueCombination));
        qbdsDimCombination.addLink(fieldNum(GeneralJournalAccountEntry, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));
        qbdsDimCombination.joinMode(JoinMode::ExistsJoin);

        this.applyDimensionFilterWithDimNameValueList(qbdsDimCombination, _dimensionNameValueListContract);

        QueryRun queryRunForTransactionByPeriod = new QueryRun(queryForTransactionByPeriod);

        while (queryRunForTransactionByPeriod.next())
        {
            fiscalCalendarPeriod = queryRunForTransactionByPeriod.get(tableNum(FiscalCalendarPeriod));
            generalJournalAccountEntry = queryRunForTransactionByPeriod.get(tableNum(GeneralJournalAccountEntry));

            if (isFirst)
            {
                lastPeriodStartDate = fiscalCalendarPeriod.StartDate;
                lastCurrency = generalJournalAccountEntry.TransactionCurrencyCode;
                isFirst = false;
            }

            if (insertData
                && lastCurrency
                && (lastPeriodStartDate != fiscalCalendarPeriod.StartDate
                    || lastCurrency != generalJournalAccountEntry.TransactionCurrencyCode))
            {
                lastPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(
                    companyFiscalCalendarRecId,
                    lastPeriodStartDate);

                [monthExplanation, yearExplanation] = this.getPeriodExplanation(lastPeriod.currentLedgerPeriodStatus(), true, lastCurrency);

                // Inserts the summary of the current period.
                this.insertDataToTmpTable(
                    SummaryRecord,
                    lastPeriodStartDate,
                    _summaryAccount,
                    _summaryAccountName,
                    lastCurrency,
                    monthExplanation,
                    totalMSTDRMonth, totalMSTCRMonth, totalMSTDRMonth - totalMSTCRMonth,
                    totalCurDRMonth, totalCurCRMonth, totalCurDRMonth - totalCurCRMonth,
                    false);

                // Inserts the summary of the year up to current period.
                this.insertDataToTmpTable(
                    SummaryRecord,
                    lastPeriodStartDate,
                    _summaryAccount,
                    _summaryAccountName,
                    lastCurrency,
                    yearExplanation,
                    totalMSTDRYear, totalMSTCRYear, totalMST,
                    totalCurDRYear, totalCurCRYear, totalCur,
                    false);

                totalMSTDRMonth = 0;
                totalMSTCRMonth = 0;
                totalCurDRMonth = 0;
                totalCurCRMonth = 0;
            }

            // Process the total amount by currency
            if (totalAmountMap.exists(generalJournalAccountEntry.TransactionCurrencyCode))
            {
                [totalMST, totalCur] = totalAmountMap.lookup(generalJournalAccountEntry.TransactionCurrencyCode);
            }

            totalMST += generalJournalAccountEntry.AccountingCurrencyAmount;
            totalCur += generalJournalAccountEntry.TransactionCurrencyAmount;

            totalAmountMap.insert(generalJournalAccountEntry.TransactionCurrencyCode, [totalMST, totalCur]);

            // Process the total year amount by currency
            if (totalAmountYearMap.exists(generalJournalAccountEntry.TransactionCurrencyCode))
            {
                [totalMSTDRYear, totalMSTCRYear, totalCurDRYear, totalCurCRYear] = totalAmountYearMap.lookup(generalJournalAccountEntry.TransactionCurrencyCode);
            }

            totalMSTDRYear  += generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.AccountingCurrencyAmount;
            totalMSTCRYear  += generalJournalAccountEntry.IsCredit ? -generalJournalAccountEntry.AccountingCurrencyAmount : 0;
            totalCurDRYear  += generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.TransactionCurrencyAmount;
            totalCurCRYear  += generalJournalAccountEntry.IsCredit ? -generalJournalAccountEntry.TransactionCurrencyAmount : 0;

            totalAmountYearMap.insert(generalJournalAccountEntry.TransactionCurrencyCode, [totalMSTDRYear, totalMSTCRYear, totalCurDRYear, totalCurCRYear]);

            totalMSTDRMonth += generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.AccountingCurrencyAmount;
            totalMSTCRMonth += generalJournalAccountEntry.IsCredit ? -generalJournalAccountEntry.AccountingCurrencyAmount : 0;
            totalCurDRMonth += generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.TransactionCurrencyAmount;
            totalCurCRMonth += generalJournalAccountEntry.IsCredit ? -generalJournalAccountEntry.TransactionCurrencyAmount : 0;

            lastPeriodStartDate = fiscalCalendarPeriod.StartDate;
            lastCurrency = generalJournalAccountEntry.TransactionCurrencyCode;
            insertData = generalJournalAccountEntry || !excludeUnusedAccounts;
        }

        if (insertData && lastCurrency)
        {
            lastPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(
                        companyFiscalCalendarRecId,
                        lastPeriodStartDate);

            [monthExplanation, yearExplanation] = this.getPeriodExplanation(lastPeriod.currentLedgerPeriodStatus(), true, lastCurrency);

            // Inserts the summary of the month for the last period or currency.
            this.insertDataToTmpTable(
                SummaryRecord,
                lastPeriodStartDate,
                _summaryAccount,
                _summaryAccountName,
                lastCurrency,
                monthExplanation,
                totalMSTDRMonth, totalMSTCRMonth, totalMSTDRMonth - totalMSTCRMonth,
                totalCurDRMonth, totalCurCRMonth, totalCurDRMonth - totalCurCRMonth,
                false);

            // Inserts the summary of the year for the last period or currency.
            this.insertDataToTmpTable(
                SummaryRecord,
                lastPeriodStartDate,
                _summaryAccount,
                _summaryAccountName,
                lastCurrency,
                yearExplanation,
                totalMSTDRYear, totalMSTCRYear, totalMST,
                totalMSTDRYear, totalMSTCRYear, totalCur,
                false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodExplanation</Name>
				<Source><![CDATA[
    private container getPeriodExplanation(FiscalPeriodStatus _periodStatus, boolean _forTransaciontCurrency = false, CurrencyCode _currencyCode = '')
    {
        Description monthExplanation;
        Description yearExplanation;

        switch (_periodStatus)
        {
            case FiscalPeriodStatus::Closed:
                // Month summary of currency %1 / Month summary
                monthExplanation = _forTransaciontCurrency ? strFmt(SysLabel::labelId2String2(literalstr("@GLS222522")), _currencyCode) : SysLabel::labelId2String2(literalstr("@GLS54617"));
                // Year summary of currency %1 / Year summary
                yearExplanation = _forTransaciontCurrency ? strFmt(SysLabel::labelId2String2(literalstr("@GLS222524")), _currencyCode) : SysLabel::labelId2String2(literalstr("@GLS54672"));
                break;

            case FiscalPeriodStatus::OnHold:
            case FiscalPeriodStatus::Open:
                // Summary of current month of currency %1 / Summary of current month
                monthExplanation = _forTransaciontCurrency ? strFmt(SysLabel::labelId2String2(literalstr("@GLS222523")), _currencyCode) : SysLabel::labelId2String2(literalstr("@GLS54652"));
                // Summary of current year of currency %1 / Summary of current year
                yearExplanation= _forTransaciontCurrency ? strFmt(SysLabel::labelId2String2(literalstr("@GLS222525")), _currencyCode) : SysLabel::labelId2String2(literalstr("@GLS54653"));
                break;
            default:
                break;
        }

        return [monthExplanation, yearExplanation];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataToTmpTable</Name>
				<Source><![CDATA[
    private void insertDataToTmpTable(
        Integer                 _recordType,
        TransDate               _transDate,
        DimensionDisplayValue   _summaryAccount,
        DimensionDisplayValue   _summaryAccountName,
        CurrencyCode            _currencyCode,
        Description             _explanation,
        AmountMST               _debitMST,
        AmountMST               _creditMST,
        AmountMST               _balanceMST,
        AmountCur               _debitCur = 0,
        AmountCur               _creditCur = 0,
        AmountCur               _balanceCur = 0,
        boolean                 _isPrimary = true)
    {
        MainAccountNum accountNum;
        Name accountName;

        tmpGeneralLedger_CN.clear();
        tmpGeneralLedger_CN.RecordType      = _recordType;
        tmpGeneralLedger_CN.TransDate       = _transDate;
        tmpGeneralLedger_CN.TransYear       = this.convetYearToStr(_transDate);
        tmpGeneralLedger_CN.TransMonth      = this.convetMonthToStr(_transDate);
        tmpGeneralLedger_CN.AccountNum      = accountNum;
        tmpGeneralLedger_CN.LedgerAccount   = _summaryAccount;
        tmpGeneralLedger_CN.AccountName     = _summaryAccountName;
        tmpGeneralLedger_CN.CurrencyCode    = _currencyCode;
        tmpGeneralLedger_CN.IsPrimary       = _isPrimary;
        tmpGeneralLedger_CN.Explanation     = _explanation;
        tmpGeneralLedger_CN.AmountMSTDebit  = _debitMST;
        tmpGeneralLedger_CN.AmountMSTCredit = _creditMST;
        tmpGeneralLedger_CN.Balance         = abs(_balanceMST);
        tmpGeneralLedger_CN.BalanceStatus   = this.getStatusByBalanceAmount(_balanceMST);
        tmpGeneralLedger_CN.AmountCurDebit  = _debitCur;
        tmpGeneralLedger_CN.AmountCurCredit = _creditCur;
        tmpGeneralLedger_CN.BalanceCur      = abs(_balanceCur);
        tmpGeneralLedger_CN.insert();

        numOfLines++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionFromOtherForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets value of the ledger dimenion from other inquiry form.
    /// </summary>
    /// <param name="_ledgerDimensionFromOtherForm">
    /// The new ledger dimenion from other inquiry form.
    /// </param>
    /// <returns>
    /// The ledger dimenion from other inquiry form.
    /// </returns>
    public LedgerDimensionAccount parmLedgerDimensionFromOtherForm(LedgerDimensionAccount _ledgerDimensionFromOtherForm = ledgerDimensionFromOtherForm)
    {
        ledgerDimensionFromOtherForm = _ledgerDimensionFromOtherForm;

        return ledgerDimensionFromOtherForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForDimension</Name>
				<Source><![CDATA[
    private Query buildQueryForDimension()
    {
        Query query = new Query();

        QueryBuildRange range;

        QueryBuildDataSource qbdsDimensionCombination = query.addDataSource(tableNum(DimensionAttributeValueCombination));
        qbdsDimensionCombination.addRange(
            fieldNum(DimensionAttributeValueCombination, LedgerDimensionType)).value(queryValue(LedgerDimensionType::Account));

        this.applyDimensionFilter(qbdsDimensionCombination);

        QueryBuildDataSource qbdsLedgerStructure = qbdsDimensionCombination.addDataSource(tableNum(LedgerStructure));
        qbdsLedgerStructure.joinMode(JoinMode::ExistsJoin);
        qbdsLedgerStructure.addLink(
            fieldNum(DimensionAttributeValueCombination, AccountStructure),
            fieldNum(LedgerStructure, DimensionHierarchy));
        qbdsLedgerStructure.addRange(fieldNum(LedgerStructure, Ledger)).value(queryValue(Ledger::current()));
        qbdsLedgerStructure.fetchMode(QueryFetchMode::One2One);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates general ledger period balances.
    /// </summary>
    /// <param name="_fromMenu">
    /// Indicates if the class is called from menu items.
    /// </param>
    public void createPeriodBalances(boolean _fromMenu = false)
    {
        AmountMST               totalMST;
        AmountMST               totalMSTDRYear;
        AmountMST               totalMSTCRYear;
        AmountMST               totalMSTDRMonth;
        AmountMST               totalMSTCRMonth;
        Amount                  beginningAmount;
        NoYes                   yearClosed;
        FiscalCalendarPeriod    fiscalCalendarPeriod;
        FiscalCalendarPeriod    localfiscalCalendarPeriod;

        MainAccount                     mainAccount;
        GeneralJournalEntry             generaljournalEntry;
        GeneralJournalAccountEntry      generaljournalAccountEntry;

        NoYes                   hasBeginning;
        NoYes                   hasTransacions;
        NoYes                   newAccount;
        RefRecId                oldRecId;

        this.initVariables(_fromMenu);
        if (!submitQuery)
        {
            return;
        }

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(MainAccount)))
            {
                mainAccount = queryRun.get(tablenum(MainAccount));

                if (mainAccount.RecId
                    && (oldRecId != mainAccount.RecId))
                {
                    oldRecId        = mainAccount.RecId;
                    totalMST        = 0;
                    totalMSTDRYear  = 0;
                    totalMSTCRYear  = 0;
                    beginningAmount = 0;
                    hasBeginning    = NoYes::No;
                    // If mainAccount changes, the newAccount is set to NoYes::Yes.
                    newAccount      = NoYes::Yes;

                    currencyBeginBalance    = new Map(Types::String, Types::Real);
                    beginBalance            = new Map(Types::String, Types::Real);

                    // Gets the sum of AccountingCurrencyAmount of previous years.
                    Query queryForBeginningAmount = this.buildTransactionQuery();

                    QueryBuildDataSource qbdsGJAEForBeginning = queryForBeginningAmount.dataSourceTable(tableNum(GeneralJournalAccountEntry));
                    qbdsGJAEForBeginning.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);

                    SysQuery::findOrCreateRange(
                        queryForBeginningAmount.dataSourceTable(tableNum(GeneralJournalEntry)),
                        fieldNum(GeneralJournalEntry, AccountingDate)).value(queryRange(firstFiscalYearStartDate, fiscalYearStartDate));
                    SysQuery::findOrCreateRange(
                        queryForBeginningAmount.dataSourceTable(tableNum(FiscalCalendarPeriod)),
                        fieldNum(FiscalCalendarPeriod, Type)).value(queryValue(FiscalPeriodType::Opening));

                    this.applyDimensionFilter(
                        queryForBeginningAmount.dataSourceTable(tableNum(DimensionAttributeValueCombination)),
                        mainAccount.MainAccountId);

                    QueryRun queryRunForBeginningAmount = new QueryRun(queryForBeginningAmount);

                    if (queryRunForBeginningAmount.next())
                    {
                        generaljournalAccountEntry = queryRunForBeginningAmount.get(tableNum(GeneralJournalAccountEntry));

                        beginningAmount = generaljournalAccountEntry.AccountingCurrencyAmount;
                    }

                    // Traverses all fiscalCalendarPeriod records of operating type within the selected fiscal year.
                    while select fiscalCalendarPeriod
                        where fiscalCalendarPeriod.StartDate >= fiscalYearStartDate
                            && fiscalCalendarPeriod.EndDate <= periodEnd
                            && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
                            && fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId
                    {
                        // Resets Monthly total DR and CR amounts before processing the new period.
                        totalMSTDRMonth = 0;
                        totalMSTCRMonth = 0;
                        currencyCode    = connull();
                        hasTransacions  = NoYes::No;

                        // Gets all transaction currency codes within the select period.
                        Query queryForTransactionCurrency = this.buildTransactionQuery();

                        QueryBuildDataSource qbdsGJAEForTransactionCurrency = queryForTransactionCurrency.dataSourceTable(tableNum(GeneralJournalAccountEntry));
                        qbdsGJAEForTransactionCurrency.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));
                        qbdsGJAEForTransactionCurrency.addGroupByField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));

                        SysQuery::findOrCreateRange(
                            queryForTransactionCurrency.dataSourceTable(tableNum(GeneralJournalEntry)),
                            fieldNum(GeneralJournalEntry, AccountingDate)).value(queryRange(fiscalCalendarPeriod.StartDate, fiscalCalendarPeriod.EndDate));
                        SysQuery::findOrCreateRange(
                            queryForTransactionCurrency.dataSourceTable(tableNum(FiscalCalendarPeriod)),
                            fieldNum(FiscalCalendarPeriod, Type)).value(queryValue(FiscalPeriodType::Operating));

                        this.applyDimensionFilter(
                            queryForTransactionCurrency.dataSourceTable(tableNum(DimensionAttributeValueCombination)),
                            mainAccount.MainAccountId);

                        QueryRun queryRunForTransactionCurrency = new QueryRun(queryForTransactionCurrency);

                        while (queryRunForTransactionCurrency.next())
                        {
                            generaljournalAccountEntry = queryRunForTransactionCurrency.get(tableNum(GeneralJournalAccountEntry));

                            if (confind(currencyCode, generaljournalAccountEntry.TransactionCurrencyCode) == 0)
                            {
                                // Puts all currency codes into a global container for further use.
                                currencyCode += generaljournalAccountEntry.TransactionCurrencyCode;
                            }
                        }

                        // Inserts opening balance record of accounting currency.
                        tmpGeneralLedger_CN.clear();
                        tmpGeneralLedger_CN.RecordType      = BeginningRecord;
                        tmpGeneralLedger_CN.TransDate       = fiscalCalendarPeriod.StartDate;
                        tmpGeneralLedger_CN.TransYear       = this.convetYearToStr(fiscalCalendarPeriod.StartDate);
                        tmpGeneralLedger_CN.TransMonth      = this.convetMonthToStr(fiscalCalendarPeriod.StartDate);
                        tmpGeneralLedger_CN.AccountNum      = mainAccount.MainAccountId;
                        tmpGeneralLedger_CN.LedgerAccount   = mainAccount.MainAccountId;
                        tmpGeneralLedger_CN.AccountName     = mainAccount.localizedName();
                        tmpGeneralLedger_CN.CurrencyCode    = companyCurrencyCode;
                        tmpGeneralLedger_CN.Explanation     = openingExplanation;
                        tmpGeneralLedger_CN.IsPrimary       = NoYes::Yes;
                        if (newAccount == NoYes::Yes)
                        {
                            // When newAccount is yes, Balance is set with beginningAmount.
                            tmpGeneralLedger_CN.Balance         = abs(beginningAmount);
                            tmpGeneralLedger_CN.BalanceCur      = abs(beginningAmount);
                            totalMST                            = beginningAmount;
                            tmpGeneralLedger_CN.BalanceStatus   = this.getStatusByBalanceAmount(beginningAmount);

                            if (tmpGeneralLedger_CN.Balance != 0)
                            {
                                hasBeginning = NoYes::Yes;
                            }
                        }

                        // Gets transaction details of the current period and make sum of them.
                        // If while loop is not used, it means that no transactions happened in current period.
                        Query queryForTransactionDetails = this.buildTransactionQuery();

                        QueryBuildDataSource qbdsGJAE = queryForTransactionDetails.dataSourceTable(tableNum(GeneralJournalAccountEntry));
                        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount));
                        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, IsCredit));
                        qbdsGJAE.addOrderByField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));

                        SysQuery::findOrCreateRange(
                            queryForTransactionDetails.dataSourceTable(tableNum(GeneralJournalEntry)),
                            fieldNum(GeneralJournalEntry, AccountingDate)).value(queryRange(fiscalCalendarPeriod.StartDate, fiscalCalendarPeriod.EndDate));
                        SysQuery::findOrCreateRange(
                            queryForTransactionDetails.dataSourceTable(tableNum(FiscalCalendarPeriod)),
                            fieldNum(FiscalCalendarPeriod, Type)).value(queryValue(FiscalPeriodType::Operating));

                        this.applyDimensionFilter(
                            queryForTransactionDetails.dataSourceTable(tableNum(DimensionAttributeValueCombination)),
                            mainAccount.MainAccountId);

                        QueryRun queryRunForTransactionDetail = new QueryRun(queryForTransactionDetails);

                        while (queryRunForTransactionDetail.next())
                        {
                            generaljournalAccountEntry = queryRunForTransactionDetail.get(tableNum(GeneralJournalAccountEntry));

                            // If it's a newAccount, inserts the record into the tmpTable. Set newAccount to No, call insertBeginGeneralLedger method.
                            if (newAccount == NoYes::Yes)
                            {
                                tmpGeneralLedger_CN.insert();
                                numOfLines += 1;
                                // Gets opening balances by currency code.
                                this.insertBeginGeneralLedger(
                                    mainAccount.MainAccountId,
                                    fiscalCalendarPeriod.StartDate);
                                newAccount = NoYes::No;
                            }
                            // AmountMST are used to hold the AccountingCurrency amounts.
                            // These codes are to get summary information of the period.
                            totalMSTDRYear                      += generaljournalAccountEntry.IsCredit ? 0 : generaljournalAccountEntry.AccountingCurrencyAmount;
                            totalMSTCRYear                      += generaljournalAccountEntry.IsCredit ? -generaljournalAccountEntry.AccountingCurrencyAmount : 0;
                            totalMST                            += generaljournalAccountEntry.AccountingCurrencyAmount;
                            totalMSTDRMonth                     += generaljournalAccountEntry.IsCredit ? 0 : generaljournalAccountEntry.AccountingCurrencyAmount;
                            totalMSTCRMonth                     += generaljournalAccountEntry.IsCredit ? -generaljournalAccountEntry.AccountingCurrencyAmount : 0;
                            hasTransacions                      = NoYes::Yes;
                        }

                        // If user chose to include non-transaction periods without considering if current period has transactions,
                        // or exists beginning balance, or exists transactions, then inserts beginning balance records into the tmp table.
                        if (newAccount == NoYes::Yes
                            && (!excludeUnusedAccounts || hasTransacions || hasBeginning))
                        {
                            tmpGeneralLedger_CN.insert();
                            numOfLines += 1;
                            this.insertBeginGeneralLedger(
                                mainAccount.MainAccountId,
                                fiscalCalendarPeriod.StartDate);
                            newAccount = NoYes::No;
                        }
                        else
                        {
                            if (excludeUnusedAccounts && !hasTransacions)
                            {
                                continue;
                            }
                        }

                        tmpGeneralLedger_CN.clear();
                        tmpGeneralLedger_CN.RecordType      = SummaryRecord;
                        tmpGeneralLedger_CN.TransDate       = fiscalCalendarPeriod.StartDate;
                        tmpGeneralLedger_CN.TransYear       = this.convetYearToStr(fiscalCalendarPeriod.StartDate);
                        tmpGeneralLedger_CN.TransMonth      = this.convetMonthToStr(fiscalCalendarPeriod.StartDate);
                        tmpGeneralLedger_CN.AccountNum      = mainAccount.MainAccountId;
                        tmpGeneralLedger_CN.LedgerAccount   = mainAccount.MainAccountId;
                        tmpGeneralLedger_CN.AccountName     = mainAccount.localizedName();
                        // Resets the CurrencyCode to accounting currency code for summary information.
                        tmpGeneralLedger_CN.CurrencyCode    = companyCurrencyCode;
                        tmpGeneralLedger_CN.IsPrimary       = NoYes::Yes;
                        tmpGeneralLedger_CN.AmountMSTDebit  = totalMSTDRMonth;
                        tmpGeneralLedger_CN.AmountMSTCredit = totalMSTCRMonth;
                        switch (fiscalCalendarPeriod.currentLedgerPeriodStatus())
                        {
                            case FiscalPeriodStatus::Closed:
                                // Month summary
                                tmpGeneralLedger_CN.Explanation = SysLabel::labelId2String2(literalstr("@GLS54617"));
                                break;
                            case FiscalPeriodStatus::OnHold:
                            case FiscalPeriodStatus::Open:
                                // Summary of current month
                                tmpGeneralLedger_CN.Explanation = SysLabel::labelId2String2(literalstr("@GLS54652"));
                                break;
                            default:
                                break;
                        }
                        tmpGeneralLedger_CN.Balance         = abs(totalMSTDRMonth - totalMSTCRMonth);
                        tmpGeneralLedger_CN.BalanceStatus   = this.getStatusByBalanceAmount(totalMSTDRMonth - totalMSTCRMonth);
                        tmpGeneralLedger_CN.AmountCurDebit  = tmpGeneralLedger_CN.AmountMSTDebit;
                        tmpGeneralLedger_CN.AmountCurCredit = tmpGeneralLedger_CN.AmountMSTCredit;
                        tmpGeneralLedger_CN.BalanceCur      = tmpGeneralLedger_CN.Balance;
                        tmpGeneralLedger_CN.insert();
                        numOfLines += 1;

                        tmpGeneralLedger_CN.clear();
                        tmpGeneralLedger_CN.RecordType      = SummaryRecord;
                        tmpGeneralLedger_CN.TransDate       = fiscalCalendarPeriod.StartDate;
                        tmpGeneralLedger_CN.TransYear       = this.convetYearToStr(fiscalCalendarPeriod.StartDate);
                        tmpGeneralLedger_CN.TransMonth      = this.convetMonthToStr(fiscalCalendarPeriod.StartDate);
                        tmpGeneralLedger_CN.AccountNum      = mainAccount.MainAccountId;
                        tmpGeneralLedger_CN.LedgerAccount   = mainAccount.MainAccountId;
                        tmpGeneralLedger_CN.AccountName     = mainAccount.localizedName();
                        tmpGeneralLedger_CN.CurrencyCode    = companyCurrencyCode;
                        tmpGeneralLedger_CN.IsPrimary       = NoYes::Yes;
                        switch (fiscalCalendarPeriod.currentLedgerPeriodStatus())
                        {
                            case FiscalPeriodStatus::Closed:
                                // Year summary
                                tmpGeneralLedger_CN.Explanation = SysLabel::labelId2String2(literalstr("@GLS54672"));
                                break;
                            case FiscalPeriodStatus::OnHold:
                            case FiscalPeriodStatus::Open:
                                // Summary of current year
                                tmpGeneralLedger_CN.Explanation = SysLabel::labelId2String2(literalstr("@GLS54653"));
                                break;
                            default:
                                break;
                        }
                        tmpGeneralLedger_CN.AmountMSTDebit  = totalMSTDRYear;
                        tmpGeneralLedger_CN.AmountMSTCredit = totalMSTCRYear;
                        tmpGeneralLedger_CN.Balance = abs(totalMST);
                        tmpGeneralLedger_CN.BalanceStatus   = this.getStatusByBalanceAmount(totalMST);
                        tmpGeneralLedger_CN.AmountCurDebit  = tmpGeneralLedger_CN.AmountMSTDebit;
                        tmpGeneralLedger_CN.AmountCurCredit = tmpGeneralLedger_CN.AmountMSTCredit;
                        tmpGeneralLedger_CN.BalanceCur      = tmpGeneralLedger_CN.Balance;
                        tmpGeneralLedger_CN.insert();
                        numOfLines                          += 1;
                        // Inserts General Ledger information of each month into tmp table.
                        this.insertGeneralLedger(
                            mainAccount.MainAccountId,
                            fiscalCalendarPeriod.StartDate,
                            fiscalCalendarPeriod.EndDate,
                            fiscalCalendarPeriod.currentLedgerPeriodStatus());
                    }

                    if (filterDimensions || ledgerDimensionFromOtherForm)
                    {
                        this.createPeriodBalancesForDimension(mainAccount.MainAccountId, _fromMenu);
                    }
                }
            }
        }

        periodToDate   = tmpGeneralLedger_CN.Balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase               dialog;
        LedgerInquiryDialogHelper_CN    ledgerInquiryDialogHelperCN = new LedgerInquiryDialogHelper_CN();

        dialog = super();

        // General ledger
        dialog.caption("@SYS24097");

        dialogFieldFromMainAccount = dialog.addFieldValue(extendedtypestr(MainAccountNum), fromAccountNum, "@SYS4081511");
        dialogFieldToMainAccount = dialog.addFieldValue(extendedtypestr(MainAccountNum), toAccountNum, "@SYS4081512");

        dialogFieldFiscalYear = dialog.addFieldValue(extendedTypeStr(FiscalYearName), fiscalYearName, "@SYS127885");
        dialogFieldFiscalPeriod = dialog.addFieldValue(extendedTypeStr(PeriodName), fiscalPeriodName, "@SYS127887");

        ledgerInquiryDialogHelperCN.parmDialogFieldFiscalPeriod(dialogFieldFiscalPeriod);
        ledgerInquiryDialogHelperCN.parmDialogFieldFiscalYear(dialogFieldFiscalYear);

        LedgerDimensionExpressionBuilderHelper_CN::addDimensionExpressionBuilderToDialog(dialog);

        dialogFieldFiscalPeriod.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(LedgerInquiryDialogHelper_CN, fiscalCalendarPeriodLookUp),
            ledgerInquiryDialogHelperCN);

        dialogFieldFiscalYear.registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(LedgerInquiryDialogHelper_CN, yearNameModified),
            ledgerInquiryDialogHelperCN);

        dialogFieldFiscalPeriod.registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(LedgerInquiryDialogHelper_CN, periodNameModified),
            ledgerInquiryDialogHelperCN);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from dialog.
    /// </summary>
    /// <returns>
    /// Returns true if the operation succeed.
    /// </returns>
    public boolean getFromDialog()
    {
        // Gets the user's input parameters.
        fromAccountNum                  = dialogFieldFromMainAccount.value();
        toAccountNum                    = dialogFieldToMainAccount.value();
        fiscalYearName                  = dialogFieldFiscalYear.value();
        fiscalPeriodName                = dialogFieldFiscalPeriod.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets main account parameters.
    /// </summary>
    /// <returns>
    /// The main account parameters.
    /// </returns>
    public container getMainAccountParameters()
    {
        return [fromAccountNum, toAccountNum];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatusByBalanceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the balance status according to a balance amount.
    /// </summary>
    /// <param name="_amount">
    /// The balance amount.
    /// </param>
    /// <returns>
    /// The balance status.
    /// </returns>
    private LedgerBalanceStatus_CN getStatusByBalanceAmount(AmountMST _amount)
    {
        LedgerBalanceStatus_CN status;

        if (_amount == 0)
        {
            status = LedgerBalanceStatus_CN::Balance;
        }
        else if (_amount < 0)
        {
            status = LedgerBalanceStatus_CN::CR;
        }
        else
        {
            status = LedgerBalanceStatus_CN::DR;
        }

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVariables</Name>
				<Source><![CDATA[
    private void initVariables(boolean _fromMenu = false)
    {
        FiscalCalendarPeriod    fiscalCalendarPeriod;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        NoYes                   firstPeriod;

        firstPeriod = NoYes::Yes;

        // If the called from menu item, prompt dialog for user to input parameters.
        if (_fromMenu)
        {
            if (this.prompt())
            {
                query = queryRun.query();
                // Sets MainAccountId parameter.
                queryBuildDataSource    = query.dataSourceTable(tableNum(MainAccount));
                queryBuildRange         = queryBuildDataSource.rangeField(fieldNum(MainAccount, MainAccountId));
                queryBuildRange.value(queryRange(fromAccountNum, toAccountNum));

                queryRun = new QueryRun(query);
            }
            else
            {
                submitQuery = false;
            }
        }
        else
        {
            query = queryRun.query();

            queryBuildDataSource    = query.dataSourceTable(tableNum(MainAccount));
            queryBuildRange         = queryBuildDataSource.rangeField(fieldNum(MainAccount, MainAccountId));
            if (queryBuildRange)
            {
                fromAccountNum  = queryBuildRange.value();
                toAccountNum    = fromAccountNum;
            }
        }
        fiscalCalendarYear = FiscalCalendarYear::findByCalendarYearName(Ledger::fiscalCalendar(), fiscalYearName);

        fiscalCalendarPeriod = FiscalCalendarPeriod::findByCalendarYearPeriod(
            fiscalCalendarYear.RecId,
            fiscalPeriodName);

        periodEnd = fiscalCalendarPeriod.EndDate;

        companyFiscalCalendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        // Gets the openning date of the fiscal calendar year.
        fiscalYearStartDate = LedgerFiscalCalendar::findOpeningStartDateByDate(
            companyFiscalCalendarRecId,
            periodEnd);

        // Gets the StartDate of the first year of the company.
        firstFiscalYearStartDate = FiscalCalendarYear::findFiscalYearOpening_CN(companyFiscalCalendarRecId).StartDate;

        // Inits the opening explanation
        // If the fiscal year is the opening fiscal year of the company, set Explanation to 'Opening balance', otherwise, set to 'Continued from the previous year'.
        if (fiscalYearStartDate == firstFiscalYearStartDate)
        {
            // Opening balance
            openingExplanation = SysLabel::labelId2String2(literalstr("@SYS22797"));
            // Opening balance of currency %1
            openingExplanationForCurrency = SysLabel::labelId2String2(literalstr("@GLS222526"));
        }
        else
        {
            // Continued from the previous year
            openingExplanation = SysLabel::labelId2String2(literalstr("@GLS54674"));
            // Continued from the previous year of currency %1
            openingExplanationForCurrency = SysLabel::labelId2String2(literalstr("@GLS222527"));
        }

        excludeUnusedAccounts = LedgerParameters::find().ExcludeUnusedAccounts_CN;
        queryGLWithDimension = this.buildQueryForDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBeginGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the begin general ledger.
    /// </summary>
    /// <param name="_accountNum">
    /// General account number.
    /// </param>
    /// <param name="_fiscalPeriodStartDate">
    /// Fiscal calendar period start date
    /// </param>
    private void insertBeginGeneralLedger(
        MainAccountNum      _accountNum,
        FiscalPeriodStart   _fiscalPeriodStartDate)
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;

        Query queryForBeginningAmountCur = this.buildTransactionQuery();

        QueryBuildDataSource qbdsGJAE = queryForBeginningAmountCur.dataSourceTable(tableNum(GeneralJournalAccountEntry));
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount), SelectionField::Sum);
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);
        qbdsGJAE.addGroupByField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));

        SysQuery::findOrCreateRange(
            queryForBeginningAmountCur.dataSourceTable(tableNum(GeneralJournalEntry)),
            fieldNum(GeneralJournalEntry, AccountingDate))
                .value(
                    queryRange(LedgerFiscalCalendar::findOpeningStartDateByDate(companyFiscalCalendarRecId, fiscalYearStartDate),
                    fiscalYearStartDate));
        SysQuery::findOrCreateRange(
            queryForBeginningAmountCur.dataSourceTable(tableNum(FiscalCalendarPeriod)),
            fieldNum(FiscalCalendarPeriod, Type)).value(queryValue(FiscalPeriodType::Opening));

        this.applyDimensionFilter(queryForBeginningAmountCur.dataSourceTable(tableNum(DimensionAttributeValueCombination)), _accountNum);

        QueryRun queryRunForBeginningAmountCur = new QueryRun(queryForBeginningAmountCur);

        while (queryRunForBeginningAmountCur.next())
        {
            generalJournalAccountEntry = queryRunForBeginningAmountCur.get(tableNum(GeneralJournalAccountEntry));

            tmpGeneralLedger_CN.clear();
            tmpGeneralLedger_CN.RecordType      = BeginningRecord;
            tmpGeneralLedger_CN.TransDate       = _fiscalPeriodStartDate;
            tmpGeneralLedger_CN.TransYear       = this.convetYearToStr(_fiscalPeriodStartDate);
            tmpGeneralLedger_CN.TransMonth      = this.convetMonthToStr(_fiscalPeriodStartDate);
            tmpGeneralLedger_CN.AccountNum      = _accountNum;
            tmpGeneralLedger_CN.LedgerAccount   = _accountNum;
            tmpGeneralLedger_CN.AccountName     = MainAccount::getLocalizedNameByMainAccountId(_accountNum);
            tmpGeneralLedger_CN.CurrencyCode    = generalJournalAccountEntry.TransactionCurrencyCode;
            tmpGeneralLedger_CN.Explanation     = strFmt(openingExplanationForCurrency, tmpGeneralLedger_CN.CurrencyCode);
            tmpGeneralLedger_CN.IsPrimary       = NoYes::No;
            tmpGeneralLedger_CN.BalanceCur      = abs(generalJournalAccountEntry.TransactionCurrencyAmount);
            tmpGeneralLedger_CN.Balance         = abs(generalJournalAccountEntry.AccountingCurrencyAmount);
            tmpGeneralLedger_CN.BalanceStatus   = this.getStatusByBalanceAmount(generalJournalAccountEntry.AccountingCurrencyAmount);
            tmpGeneralLedger_CN.insert();
            numOfLines += 1;

            currencyBeginBalance.insert(tmpGeneralLedger_CN.CurrencyCode, generalJournalAccountEntry.TransactionCurrencyAmount);
            beginBalance.insert(tmpGeneralLedger_CN.CurrencyCode, generalJournalAccountEntry.AccountingCurrencyAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the general ledger.
    /// </summary>
    /// <param name="_accountNum">
    /// Ledger journal account number.
    /// </param>
    /// <param name="_periodStart">
    /// Fiscal Calendar Period start date.
    /// </param>
    /// <param name="_periodEnd">
    /// Fiscal Calendar Period end date.
    /// </param>
    /// <param name="_periodStatus">
    /// Fiscal Calendar Period status.
    /// </param>
    private void insertGeneralLedger(
        MainAccountNum      _accountNum,
        PeriodStart         _periodStart,
        PeriodEnd           _periodEnd,
        FiscalPeriodStatus  _periodStatus)
    {
        GeneralJournalAccountEntry          generalJournalAccountEntryDetail;
        FiscalCalendarPeriod                fiscalCalendarPeriod;

        Counter                 i;

        if (conlen(currencyCode) >= 1)
        {
            for (i = 1; i <= conlen(currencyCode); i++)
            {
                tmpGeneralLedger_CN.clear();
                tmpGeneralLedger_CN.RecordType      = SummaryRecord;
                tmpGeneralLedger_CN.TransDate       = _periodStart;
                tmpGeneralLedger_CN.TransYear       = this.convetYearToStr(_periodStart);
                tmpGeneralLedger_CN.TransMonth      = this.convetMonthToStr(_periodStart);
                tmpGeneralLedger_CN.AccountNum      = _accountNum;
                tmpGeneralLedger_CN.LedgerAccount   = _accountNum;
                tmpGeneralLedger_CN.AccountName     = MainAccount::getLocalizedNameByMainAccountId(_accountNum);
                tmpGeneralLedger_CN.CurrencyCode    = conpeek(currencyCode, i);
                tmpGeneralLedger_CN.IsPrimary       = NoYes::No;

                Query queryForTransactionCur = this.buildTransactionQuery();

                QueryBuildDataSource qbdsGJAE = queryForTransactionCur.dataSourceTable(tableNum(GeneralJournalAccountEntry));
                qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount));
                qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount));
                qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, IsCredit));

                SysQuery::findOrCreateRange(
                    qbdsGJAE,
                    fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode)).value(queryValue(tmpGeneralLedger_CN.CurrencyCode));
                SysQuery::findOrCreateRange(
                    queryForTransactionCur.dataSourceTable(tableNum(FiscalCalendarPeriod)),
                    fieldNum(FiscalCalendarPeriod, Type)).value(queryValue(FiscalPeriodType::Operating));
                QueryBuildRange transDateRange = SysQuery::findOrCreateRange(
                    queryForTransactionCur.dataSourceTable(tableNum(GeneralJournalEntry)),
                    fieldNum(GeneralJournalEntry, AccountingDate));
                transDateRange.value(queryRange(_periodStart, _periodEnd));

                this.applyDimensionFilter(queryForTransactionCur.dataSourceTable(tableNum(DimensionAttributeValueCombination)), _accountNum);

                QueryRun queryRunForMonthSummary = new QueryRun(queryForTransactionCur);

                while (queryRunForMonthSummary.next())
                {
                    generalJournalAccountEntryDetail = queryRunForMonthSummary.get(tableNum(GeneralJournalAccountEntry));

                    tmpGeneralLedger_CN.AmountCurDebit  += generalJournalAccountEntryDetail.IsCredit ? 0 : generalJournalAccountEntryDetail.TransactionCurrencyAmount;
                    tmpGeneralLedger_CN.AmountCurCredit += generalJournalAccountEntryDetail.IsCredit ? -generalJournalAccountEntryDetail.TransactionCurrencyAmount : 0;
                    tmpGeneralLedger_CN.AmountMSTDebit  += generalJournalAccountEntryDetail.IsCredit ? 0 : generalJournalAccountEntryDetail.AccountingCurrencyAmount;
                    tmpGeneralLedger_CN.AmountMSTCredit += generalJournalAccountEntryDetail.IsCredit ? -generalJournalAccountEntryDetail.AccountingCurrencyAmount : 0;
                }

                switch (_periodStatus)
                {
                    case FiscalPeriodStatus::Closed:
                        // Month summary of currency %1
                        tmpGeneralLedger_CN.Explanation = strFmt(SysLabel::labelId2String2(literalstr("@GLS222522")), tmpGeneralLedger_CN.CurrencyCode);
                        break;

                    case FiscalPeriodStatus::OnHold:
                    case FiscalPeriodStatus::Open:
                        // Summary of current month of currency %1
                        tmpGeneralLedger_CN.Explanation = strFmt(SysLabel::labelId2String2(literalstr("@GLS222523")), tmpGeneralLedger_CN.CurrencyCode);
                        break;
                    default:
                        break;
                }
                tmpGeneralLedger_CN.BalanceStatus   = this.getStatusByBalanceAmount(tmpGeneralLedger_CN.AmountMSTDebit - tmpGeneralLedger_CN.AmountMSTCredit);
                tmpGeneralLedger_CN.Balance         = abs(tmpGeneralLedger_CN.AmountMSTDebit - tmpGeneralLedger_CN.AmountMSTCredit);
                tmpGeneralLedger_CN.BalanceCur      = abs(tmpGeneralLedger_CN.AmountCurDebit - tmpGeneralLedger_CN.AmountCurCredit);
                tmpGeneralLedger_CN.insert();
                numOfLines += 1;

                tmpGeneralLedger_CN.clear();
                tmpGeneralLedger_CN.RecordType      = SummaryRecord;
                tmpGeneralLedger_CN.TransDate       = _periodStart;
                tmpGeneralLedger_CN.TransYear       = this.convetYearToStr(_periodStart);
                tmpGeneralLedger_CN.TransMonth      = this.convetMonthToStr(_periodStart);
                tmpGeneralLedger_CN.AccountNum      = _accountNum;
                tmpGeneralLedger_CN.LedgerAccount   = _accountNum;
                tmpGeneralLedger_CN.AccountName     = MainAccount::getLocalizedNameByMainAccountId(_accountNum);
                tmpGeneralLedger_CN.CurrencyCode    = conpeek(currencyCode, i);
                tmpGeneralLedger_CN.IsPrimary       = NoYes::No;

                transDateRange.value(queryRange(
                    LedgerFiscalCalendar::findOpeningStartDateByDate(companyFiscalCalendarRecId, _periodEnd),
                    _periodEnd));

                QueryRun queryRunForYearSummaryCur = new QueryRun(queryForTransactionCur);

                while (queryRunForYearSummaryCur.next())
                {
                    generalJournalAccountEntryDetail = queryRunForYearSummaryCur.get(tableNum(GeneralJournalAccountEntry));

                    tmpGeneralLedger_CN.AmountCurDebit  += generalJournalAccountEntryDetail.IsCredit ? 0 : generalJournalAccountEntryDetail.TransactionCurrencyAmount;
                    tmpGeneralLedger_CN.AmountCurCredit += generalJournalAccountEntryDetail.IsCredit ? -generalJournalAccountEntryDetail.TransactionCurrencyAmount : 0;
                    tmpGeneralLedger_CN.AmountMSTDebit  += generalJournalAccountEntryDetail.IsCredit ? 0 : generalJournalAccountEntryDetail.AccountingCurrencyAmount;
                    tmpGeneralLedger_CN.AmountMSTCredit += generalJournalAccountEntryDetail.IsCredit ? -generalJournalAccountEntryDetail.AccountingCurrencyAmount : 0;
                }

                switch (_periodStatus)
                {
                    case FiscalPeriodStatus::Closed:
                        // Year summary of currency %1
                        tmpGeneralLedger_CN.Explanation = strFmt(SysLabel::labelId2String2(literalstr("@GLS222524")), tmpGeneralLedger_CN.CurrencyCode);
                        break;

                    case FiscalPeriodStatus::OnHold:
                    case FiscalPeriodStatus::Open:
                        // Summary of current year of currency %1
                        tmpGeneralLedger_CN.Explanation = strFmt(SysLabel::labelId2String2(literalstr("@GLS222525")), tmpGeneralLedger_CN.CurrencyCode);
                    break;
                    default:
                        break;
                }
                if (currencyBeginBalance.exists(tmpGeneralLedger_CN.CurrencyCode))
                {
                    tmpGeneralLedger_CN.BalanceCur  = tmpGeneralLedger_CN.AmountCurDebit - tmpGeneralLedger_CN.AmountCurCredit + currencyBeginBalance.lookup(tmpGeneralLedger_CN.CurrencyCode);
                    tmpGeneralLedger_CN.Balance     = tmpGeneralLedger_CN.AmountMSTDebit - tmpGeneralLedger_CN.AmountMSTCredit + beginBalance.lookup(tmpGeneralLedger_CN.CurrencyCode);
                }
                else
                {
                    tmpGeneralLedger_CN.BalanceCur  = tmpGeneralLedger_CN.AmountCurDebit - tmpGeneralLedger_CN.AmountCurCredit;
                    tmpGeneralLedger_CN.Balance     = tmpGeneralLedger_CN.AmountMSTDebit - tmpGeneralLedger_CN.AmountMSTCredit;
                }
                tmpGeneralLedger_CN.BalanceStatus   = this.getStatusByBalanceAmount(tmpGeneralLedger_CN.Balance);
                tmpGeneralLedger_CN.BalanceCur  = abs(tmpGeneralLedger_CN.BalanceCur);
                tmpGeneralLedger_CN.Balance     = abs(tmpGeneralLedger_CN.Balance);
                tmpGeneralLedger_CN.insert();
                numOfLines += 1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(QueryRun _queryRun, List _dimExpressionList  = null)
    {
        super();

        queryRun    = _queryRun;
        submitQuery = true;

        companyCurrencyCode = Ledger::accountingCurrency(CompanyInfo::current());

        if (_dimExpressionList)
        {
            expressionBuilderHelper.setExpressionList(_dimExpressionList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number of lines.
    /// </summary>
    /// <returns>
    /// The number of lines.
    /// </returns>
    public Counter numOfLines()
    {
        return numOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, [#CurrentList, expressionBuilderHelper.pack()]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalPeriodNameAndYearName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets value of the fiscal period name and year name.
    /// </summary>
    /// <param name="_fiscalPeriodName">
    /// The new value of the fiscal period name.
    /// </param>
    /// <param name="_fiscalYearName">
    /// The new value of the fiscal year name.
    /// </param>
    /// <returns>
    /// Container includes fiscal period name and year name.
    /// </returns>
    public container parmFiscalPeriodNameAndYearName(
        PeriodName      _fiscalPeriodName = fiscalPeriodName,
        FiscalYearName  _fiscalYearName = fiscalYearName)
    {
        fiscalPeriodName = _fiscalPeriodName;
        fiscalYearName = _fiscalYearName;

        return [fiscalPeriodName, fiscalYearName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the period balances.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TmpGeneralLedger_CN</c> class.
    /// </returns>
    public TmpGeneralLedger_CN periodBalances()
    {
        return tmpGeneralLedger_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the to date period.
    /// </summary>
    /// <returns>
    /// The instance of the <c>AmountMST</c> class.
    /// </returns>
    public AmountMST periodToDate()
    {
        return periodToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submit query information.
    /// </summary>
    /// <returns>
    /// Return true if the submit succeed.
    /// </returns>
    public boolean submitQuery()
    {
        return submitQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version    = RunBase::getVersion(_packedClass);
        container   packedClassMembers;
        container   packedExpressionBuilderHelper;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedClassMembers] = _packedClass;

                [#CurrentList, packedExpressionBuilderHelper] = packedClassMembers;
                expressionBuilderHelper.unpack(packedExpressionBuilderHelper);
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the instance of the <c>LedgerInquiryGeneral_CN</c> class.
    /// </summary>
    /// <param name="calledFrom">
    /// The called from information.
    /// </param>
    /// <returns>
    /// The validation result.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean     ret = true;
        if (fiscalPeriodName == '')
        {
            // Period name
            ret = checkFailed(strFmt("@SYS39376", "@SYS127887"));
        }
        if (ret && fiscalYearName == '')
        {
            // Fiscal year
            ret = checkFailed(strFmt("@SYS39376", "@SYS127885"));
        }
        if (ret && fromAccountNum == '')
        {
            // From account must be entered
            ret = checkFailed(strFmt("@SYS39376", "@SYS4081511"));
        }

        if (ret && toAccountNum == '')
        {
            // To account must be entered
            ret = checkFailed(strFmt("@SYS39376", "@SYS4081512"));
        }

        if (ret && fromAccountNum > toAccountNum)
        {
            // From account cannot be greater than To account
            ret = checkFailed(strFmt("@SYS344287", "@SYS4081511", "@SYS4081512"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes dimension expression builder control and registers event handlers.
    /// </summary>
    /// <param name="_dialog">
    /// The <c>Runbase</c> dialog object.
    /// </param>
    public void dialogPostRun(DialogRunbase dialog)
    {
        super(dialog);

        DimensionExpressionBuilder builder = dialog.formRun().control(dialog.formRun().controlId(LedgerDimensionExpressionBuilderHelper_CN::DimensionFilterExpressionControlName));

        expressionBuilderHelper.parmExpressionBuilder(builder);
        expressionBuilderHelper.initExpressionBuilder();

        FormStringControl formControlMainAccountFrom = dialogFieldFromMainAccount.control();
        FormStringControl formControlMainAccountTo = dialogFieldToMainAccount.control();

        formControlMainAccountFrom.OnModified += eventhandler(this.mainAccountOnModified);
        formControlMainAccountTo.OnModified += eventhandler(this.mainAccountOnModified);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainAccountOnModified</Name>
				<Source><![CDATA[
    private void mainAccountOnModified(FormControl _sender, FormControlEventArgs _e)
    {
        expressionBuilderHelper.updateDimensionExpression(dialogFieldFromMainAccount.value(), dialogFieldToMainAccount.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedExpressionBuilderHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the packed dimension expression builder helper class.
    /// </summary>
    /// <returns>
    /// The container in which the dimension expression builder helper class is packed.
    /// </returns>
    public container parmPackedExpressionBuilderHelper(container _packedExpressionBuilderHelper = conNull())
    {
        if (!prmisdefault(_packedExpressionBuilderHelper))
        {
            expressionBuilderHelper.unpack(_packedExpressionBuilderHelper);
        }

        return expressionBuilderHelper.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTransactionQuery</Name>
				<Source><![CDATA[
    private Query buildTransactionQuery()
    {
        query transactionQuery = new query();

        QueryBuildDataSource qbdsGJAE = transactionQuery.addDataSource(tableNum(GeneralJournalAccountEntry));

        QueryBuildDataSource qbdsDimCombination = qbdsGJAE.addDataSource(tableNum(DimensionAttributeValueCombination));
        qbdsDimCombination.joinMode(JoinMode::ExistsJoin);
        qbdsDimCombination.addLink(fieldNum(GeneralJournalAccountEntry, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));

        QueryBuildDataSource qbdsGLE = qbdsGJAE.addDataSource(tableNum(GeneralJournalEntry));
        qbdsGLE.joinMode(JoinMode::ExistsJoin);
        qbdsGLE.addLink(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry), fieldNum(GeneralJournalEntry, RecId));
        qbdsGLE.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));

        QueryBuildDataSource qbdsCalendarPeriod = qbdsGLE.addDataSource(tableNum(FiscalCalendarPeriod));
        qbdsCalendarPeriod.joinMode(JoinMode::ExistsJoin);
        qbdsCalendarPeriod.addLink(fieldNum(GeneralJournalEntry, FiscalCalendarPeriod), fieldNum(FiscalCalendarPeriod, RecId));

        return transactionQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDimensionFilter</Name>
				<Source><![CDATA[
    private void applyDimensionFilter(QueryBuildDataSource _qbdsDimCombination, MainAccountNum _mainAccountId = '')
    {
        if (ledgerDimensionFromOtherForm)
        {
            QueryBuildRange ledgerdimensionRange = SysQuery::findOrCreateRange(
                _qbdsDimCombination,
                fieldNum(DimensionAttributeValueCombination, RecId));
            ledgerdimensionRange.value(queryValue(ledgerDimensionFromOtherForm));
        }
        else
        {
            LedgerDimensionExpressionBuilderHelper_CN::addDimensionFilterToDimensionDataSource(
                _qbdsDimCombination,
                expressionBuilderHelper.getExpressionList());

            filterDimensions = expressionBuilderHelper.getFilterDimensions();

            if (_mainAccountId)
            {
                DimensionAttribute dimensionAttribute = DimensionAttribute::find(
                    DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));

                QueryBuildRange mainAccountRange = SysQuery::findOrCreateRange(
                    _qbdsDimCombination,
                    DimensionAttributeValueCombination::getDimensionValueFieldId(dimensionAttribute.Name));
                mainAccountRange.value(_mainAccountId + DimensionCriteriaOperators::WildcardDisplay);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDimensionFilterWithDimNameValueList</Name>
				<Source><![CDATA[
    private void applyDimensionFilterWithDimNameValueList(QueryBuildDataSource _qbdsDimCombination, DimensionNameValueListContract _dimensionNameValueList)
    {
        ListEnumerator dimensionNameValueListEnumerator = _dimensionNameValueList.parmValues().getEnumerator();

        while (dimensionNameValueListEnumerator.moveNext())
        {
            DimensionAttributeValueContract dimAttrValueContract = dimensionNameValueListEnumerator.current();

            FieldId dimensionValueFieldId = DimensionAttributeValueCombination::getDimensionValueFieldId(dimAttrValueContract.parmName());

            SysQuery::findOrCreateRange(_qbdsDimCombination, dimensionValueFieldId).value(dimAttrValueContract.parmValue());
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>