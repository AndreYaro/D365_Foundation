<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanRuleStatusNew</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Represents a newly created and yet unsaved rule.
/// </summary>
class LeanRuleStatusNew extends LeanRuleStatusBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActiveRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the record ID of the currently active rule.
    /// </summary>
    /// <returns>
    ///    The record ID of the currently active rule.
    /// </returns>
    public RefRecId getActiveRule()
    {
        /// The base implementation returns the current rule's RecId
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCardsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a query which can be used to get the cards that belong to a rule.
    /// </summary>
    /// <param name="_returnFreeCards">
    ///    This flag determines whether the free or active cards are returned.
    /// </param>
    /// <param name="_onlyForCurrentRule">
    ///    This flag determines whether the free or active cards are returned only for the current rule buffer
    ///    or for the whole replacement chain to which the rule belongs.
    /// </param>
    /// <returns>
    ///    A <c>Query</c> object to get the cards that belongs to a rule.
    /// </returns>
    /// <remarks>
    ///    A new rule cannot have any cards
    /// </remarks>
    public Query getCardsQuery(
        boolean _returnFreeCards,
        boolean _onlyForCurrentRule = false)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasActiveKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the rule has any active kanbans.
    /// </summary>
    /// <returns>
    ///    true if the rule has an active kanban; otherwise, false.
    /// </returns>
    public boolean hasActiveKanbans()
    {
        // a new rule can never have kanbans
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the fields default data.
    /// </summary>
    public void initFields()
    {
        protectedElement.initFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the change in a field's value.
    /// </summary>
    /// <param name="_tableId">
    /// The id of the table which contains the updated field.
    /// </param>
    /// <param name="_fieldId">
    /// The id of the field which value has changed.
    /// </param>
    /// <remarks>
    /// If a particular status doesn't allow the change, an error will be thrown.
    /// </remarks>
    public void modifiedField(tableId _tableId, fieldId _fieldId)
    {
        // in this status we don't restrict the fields that can be modified
        protectedElement.modifiedField(_tableId, _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onKanbanFlowChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method handles a change in the kanban flow.
    /// </summary>
    /// <remarks>
    /// The method is implemented only for new rules.
    /// </remarks>
    public void onKanbanFlowChanged()
    {
        LeanCoverageKanbanRule  leanCoverageKanbanRule = leanRuleData.parmLeanCoverageKanbanRule();
        KanbanFlow              kanbanFlow = leanRuleData.kanbanFlow();

        // handle the cached coverage dimensions
        super();

        // initialize some rule-type specific fields (lead time, etc.)
        if (leanRuleData.parmKanbanFlowWrapper().isFlowDefined())
        {
            protectedElement.refreshLeadTime(true);
        }

        // in case the rule doesn't have the ValidTo set and we have a valid
        // activity already selected, then we can preset it from the activity's
        // plan validity dates
        if (leanCoverageKanbanRule.ValidTo          == utcDateTimeNull()
            && (kanbanFlow.FirstPlanPlanActivity    != 0
                || kanbanFlow.LastPlanPlanActivity  != 0))
        {
            Plan planFirst = kanbanFlow.firstPlan();
            Plan planLast = kanbanFlow.lastPlan();

            leanCoverageKanbanRule.ValidTo = planFirst.ValidTo != utcDateTimeNull() ?
                                                planFirst.ValidTo :
                                                planLast.ValidTo;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the writing of a particular type object.
    /// </summary>
    /// <param name="_showWarnings">
    /// A Boolean value that indicates whether optional warnings should be displayed.
    /// </param>
    /// <returns>
    /// true if the validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Errors are thrown as part of this validation.
    /// </remarks>
    public boolean validateWrite(boolean _showWarnings = false)
    {
        boolean     resetFK    = false;
        KanbanRule  kanbanRule = leanRuleData.parmKanbanRule();

        if (!kanbanRule.KanbanFlow)
        {
            kanbanRule.KanbanFlow  = -1;
            kanbanRule.LegalEntity = -1;
            resetFK                = true;
        }

        // the base class implementation only forwards the call
        boolean result = protectedElement.validateWrite(_showWarnings);

        if (resetFK)
        {
            kanbanRule.initFromKanbanFlow(null);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Persists a rule.
    /// </summary>
    /// <param name="_leanRuleData">
    ///    Contains all the necessary buffers for performing the persistence operations.
    /// </param>
    /// <returns>
    ///    true if the persistence was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method might raise exceptions if such occur during the database operations.
    /// </remarks>
    public boolean write(LeanRuleData _leanRuleData)
    {
        boolean result = true;
        /// the write operation on a new rule should be considered as as a creation.
        result = result && LeanRulesEngine::createRule(_leanRuleData);

        // if the insertion failed, then we need to reset the RecId of the records
        // so that the operation can be retried
        if (!result)
        {
            _leanRuleData.resetRecId();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static LeanRuleStatusNew construct()
    {
        return new LeanRuleStatusNew();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <returns>
    /// A new instance of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanRuleStatusNew newStandard()
    {
        return LeanRuleStatusNew::construct();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
