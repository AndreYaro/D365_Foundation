<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetSumCalc_Trans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetSumCalc_Trans extends AssetSumCalc
{
    AssetDocumentSumCalcUtil_JP docSumCalcUtil;
    private boolean isDisableAssetTransTmpCacheFlightEnabled = isFlightEnabled(FixedAssetsConstants::DisableAssetTransTmpCacheFlight);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acquisitionAdjValue</Name>
				<Source><![CDATA[
    public AmountMST acquisitionAdjValue()
    {
        AmountMST ret = super();
        if (isDocumentAmountSeparate_JP)
        {
            ret -= this.getAssetDocTypeVarValue_JP(AssetTransType::AcquisitionAdj, AssetDocumentType_JP::AssetRetirementObligation);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionPrice</Name>
				<Source><![CDATA[
    public AmountMST acquisitionPrice()
    {
        AmountMST ret = super();
        if (isDocumentAmountSeparate_JP)
        {
            ret -= this.getAssetDocTypeVarValue_JP(AssetTransType::Acquisition, AssetDocumentType_JP::AssetReductionEntry_DirectOff);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionValue</Name>
				<Source><![CDATA[
    public AmountMST acquisitionValue()
    {
        AmountMST ret;

        ret = super();
        if (isDocumentAmountSeparate_JP)
        {
            ret -= this.getAssetDocTypeVarValue_JP(AssetTransType::Acquisition, AssetDocumentType_JP::AssetReductionEntry_DirectOff);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected Query buildQuery()
    {
        Query query = new Query();

        if (isDisableAssetTransTmpCacheFlightEnabled)
        {
            QueryBuildDataSource queryBuildDataSource = query.addDataSource(tablenum(AssetTrans));

            queryBuildDataSource = this.buildQueryAddAmountSelection(queryBuildDataSource);

            queryBuildDataSource.addSelectionField(fieldnum(AssetTrans, RevaluationAmount), SelectionField::Sum);

            if (countryContext == #isoDE || countryContext == #isoAT)
            {
                queryBuildDataSource.addSelectionField(fieldnum(AssetTrans, InterestAmount), SelectionField::Sum);
            }

            // Group by these two fields, so that the sums are performed correctly.
            queryBuildDataSource.addGroupByField(fieldnum(AssetTrans, Reclassification));
            queryBuildDataSource.addGroupByField(fieldnum(AssetTrans, TransType));

            // If Australia is registered, then also group by this field
            if (countryContext == #isoAU)
            {
                queryBuildDataSource.addGroupByField(fieldnum(AssetTrans, LowValuePoolType_AU));
            }

            queryBuildDataSource.addRange(fieldnum(AssetTrans, AssetId)).value(SysQuery::value(rangeAssetId));
            queryBuildDataSource.addRange(fieldnum(AssetTrans, BookId)).value(SysQuery::value(rangeBookId));

            if (countryContext == #isoJP && AssetDocumentUtility_JP::isAssetDocumentEnabled())
            {
                queryBuildDataSource.addSelectionField(fieldnum(AssetTrans, TransDate), SelectionField::Max);

                QueryBuildDataSource assetDocTransDS = queryBuildDataSource.addDataSource(tableNum(AssetDocumentTrans_JP));
                assetDocTransDS.joinMode(JoinMode::OuterJoin);
                assetDocTransDS.fetchMode(QueryFetchMode::One2Many);
                assetDocTransDS.addLink(fieldNum(AssetTrans, RecId), fieldNum(AssetDocumentTrans_JP, RefRecId));
                assetDocTransDS.addRange(fieldNum(AssetDocumentTrans_JP, RefTableId)).value(SysQuery::value(tableNum(AssetTrans)));

                QueryBuildDataSource assetDocEntryTableDS = assetDocTransDS.addDataSource(tableNum(AssetDocumentEntry_JP));
                assetDocEntryTableDS.joinMode(JoinMode::OuterJoin);
                assetDocEntryTableDS.fetchMode(QueryFetchMode::One2Many);
                assetDocEntryTableDS.addLink(fieldNum(AssetDocumentTrans_JP, AssetDocumentEntry_JP), fieldNum(AssetDocumentEntry_JP, RecId));

                QueryBuildDataSource assetDocTableDS = assetDocEntryTableDS.addDataSource(tableNum(AssetDocumentTable_JP));
                assetDocTableDS.joinMode(JoinMode::OuterJoin);
                assetDocTableDS.fetchMode(QueryFetchMode::One2Many);
                assetDocTableDS.addLink(fieldNum(AssetDocumentEntry_JP, AssetDocumentTable_JP), fieldNum(AssetDocumentTable_JP, RecId));

                assetDocTableDS.addSelectionField(fieldnum(AssetDocumentTable_JP, Type));
                assetDocTableDS.addGroupByField(fieldnum(AssetDocumentTable_JP, Type));
            }

            if (isPriorYear || isCurrentYear)
            {
                NoYesId priorValue = isPriorYear ? NoYes::Yes : NoYes::No;
                queryBuildDataSource.addRange(fieldnum(AssetTrans, isPriorYear)).value(SysQuery::value(priorValue));

                if (maintainCurrentYearDateRange)
                {
                    queryBuildDataSource.addRange(fieldnum(AssetTransTmp, TransDate)).value(queryRange(dateFrom, dateTo));
                }
            }
            else
            {
                queryBuildDataSource.addRange(fieldnum(AssetTrans,TransDate)).value(queryRange(dateFrom,dateTo));
            }
        }
        else
        {
            QueryBuildDataSource queryBuildDataSource = query.addDataSource(tablenum(AssetTransTmp));

            queryBuildDataSource = this.buildQueryAddAmountSelection(queryBuildDataSource);

            queryBuildDataSource.addSelectionField(fieldnum(AssetTransTmp, RevaluationAmount), SelectionField::Sum);

            if (countryContext == #isoDE || countryContext == #isoAT)
            {
                queryBuildDataSource.addSelectionField(fieldnum(AssetTransTmp, InterestAmount), SelectionField::Sum);
            }

            // Group by these two fields, so that the sums are performed correctly.
            queryBuildDataSource.addGroupByField(fieldnum(AssetTransTmp, Reclassification));
            queryBuildDataSource.addGroupByField(fieldnum(AssetTransTmp, TransType));

            // If Australia is registered, then also group by this field
            if (countryContext == #isoAU)
            {
                queryBuildDataSource.addGroupByField(fieldnum(AssetTransTmp, LowValuePoolType_AU));
            }

            queryBuildDataSource.addRange(fieldnum(AssetTransTmp, AssetId)).value(SysQuery::value(rangeAssetId));
            queryBuildDataSource.addRange(fieldnum(AssetTransTmp, BookId)).value(SysQuery::value(rangeBookId));

            if (countryContext == #isoJP && AssetDocumentUtility_JP::isAssetDocumentEnabled())
            {
                queryBuildDataSource.addSelectionField(fieldnum(AssetTransTmp, TransDate), SelectionField::Max);
                queryBuildDataSource.addGroupByField(fieldnum(AssetTransTmp, Type_JP));
            }

            if (isPriorYear || isCurrentYear)
            {
                NoYesId priorValue = isPriorYear ? NoYes::Yes : NoYes::No;
                queryBuildDataSource.addRange(fieldnum(AssetTransTmp, isPriorYear)).value(SysQuery::value(priorValue));
                
                if (maintainCurrentYearDateRange)
                {
                    queryBuildDataSource.addRange(fieldnum(AssetTransTmp, TransDate)).value(queryRange(dateFrom, dateTo));
                }
            }
            else
            {
                queryBuildDataSource.addRange(fieldnum(AssetTransTmp,TransDate)).value(queryRange(dateFrom,dateTo));
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryAddAmountSelection</Name>
				<Source><![CDATA[
    /// <summary>
    ///  An appropriate amount column is added to the query based on the given currency amount type.
    ///  Add amount field for selection based on currency amount type value to Sum.
    /// </summary>
    /// <param name = "_queryBuildDataSource">Query build data source.</param>
    /// <returns>
    /// returns the query build data source.
    /// </returns>
    protected QueryBuildDataSource buildQueryAddAmountSelection(QueryBuildDataSource _queryBuildDataSource)
    {
        QueryBuildDataSource queryBuildDataSource = _queryBuildDataSource;

        if (isDisableAssetTransTmpCacheFlightEnabled)
        {
            if (sumType == AssetSumCalcType::Cur)
            {
                queryBuildDataSource.addSelectionField(fieldnum(AssetTrans, AmountCur), SelectionField::Sum);
            }
            else if(sumType == AssetSumCalcType::Reporting)
            {
                queryBuildDataSource.addSelectionField(fieldnum(AssetTrans, ReportingCurrencyAmount), SelectionField::Sum);
            }
            else
            {
                queryBuildDataSource.addSelectionField(fieldnum(AssetTrans, AmountMST), SelectionField::Sum);
            }
        }
        else
        {
            if (sumType == AssetSumCalcType::Cur)
            {
                queryBuildDataSource.addSelectionField(fieldnum(AssetTransTmp, AmountCur), SelectionField::Sum);
            }
            else if(sumType == AssetSumCalcType::Reporting)
            {
                queryBuildDataSource.addSelectionField(fieldnum(AssetTransTmp, ReportingCurrencyAmount), SelectionField::Sum);
            }
            else
            {
                queryBuildDataSource.addSelectionField(fieldnum(AssetTransTmp, AmountMST), SelectionField::Sum);
            }
        }

        return queryBuildDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        if (calculated)
        {
            return;
        }

        if (onThinClient)
        {
            [#Server2Client] = AssetSumCalc_Trans::calcServer(this.packClient());
            if (countryContext == #isoJP && AssetDocumentUtility_JP::isAssetDocumentEnabled() && docSumCalcUtil != null)
            {
                docSumCalcUtil.unpackServer(docTypeValues);
            }
        }
        else
        {
            this.initYear();

            QueryRun queryRun = new QueryRun(this.buildQuery());

            if (!isDisableAssetTransTmpCacheFlightEnabled)
            {
                AssetCacheManager::removeCacheAssetTrans(rangeAssetId, rangeBookId);
                queryRun.setRecord(AssetCacheManager::getCacheAssetTrans(rangeAssetId, rangeBookId));
            }

            while (queryRun.next())
            {
                AssetTransMap assetTrans;
                AssetAmount transAmount;

                if (isDisableAssetTransTmpCacheFlightEnabled)
                {
                    assetTrans = queryRun.get(tablenum(AssetTrans));
                    transAmount = this.getTransAmountBySumCalcType(assetTrans);
                }
                else
                {
                    assetTrans =  queryRun.get(tablenum(AssetTransTmp));
                    transAmount = this.getTransAmountBySumType(assetTrans);
                }

                // If Australia is registered, then we also need low value pool type
                if (countryContext == #isoAU)
                {
                    this.updateSum(assetTrans.TransType, transAmount, assetTrans.Reclassification, assetTrans.RevaluationAmount, assetTrans.LowValuePoolType_AU);
                }
                else if (countryContext == #isoJP && AssetDocumentUtility_JP::isAssetDocumentEnabled())
                {
                    AssetDocumentType_JP type_JP;

                    if (isDisableAssetTransTmpCacheFlightEnabled)
                    {
                        AssetDocumentTable_JP assetDocTable = queryRun.get(tableNum(AssetDocumentTable_JP));
                        type_JP = assetDocTable.Type;
                    }
                    else
                    {
                        type_JP = assetTrans.Type_JP;
                    }

                    this.parmIsReductionEntryDirectOff_JP(type_JP == AssetDocumentType_JP::AssetReductionEntry_DirectOff);
                    this.updateSum(assetTrans.TransType, transAmount, assetTrans.Reclassification, assetTrans.RevaluationAmount);

                    if (lastTransDate_JP < assetTrans.TransDate)
                    {
                        lastTransDate_JP = assetTrans.TransDate;
                    }

                    if (docSumCalcUtil != null && type_JP != AssetDocumentType_JP::None)
                    {
                        docSumCalcUtil.updateDocTypeSum(assetTrans.TransType, type_JP, transAmount);
                    }
                }
                else if (countryContext == #isoDE || countryContext == #isoAT)
                {
                    this.updateSum(assetTrans.TransType, transAmount, assetTrans.Reclassification, assetTrans.RevaluationAmount, 0, assetTrans.InterestAmount);
                }
                else
                {
                    this.updateSum(assetTrans.TransType, transAmount, assetTrans.Reclassification, assetTrans.RevaluationAmount, 0);
                }
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransAmountBySumCalcType</Name>
				<Source><![CDATA[
    protected AssetAmount getTransAmountBySumCalcType(AssetTrans _assetTrans)
    {       
        switch (sumType)
        {
            case AssetSumCalcType::Cur:
                return _assetTrans.AmountCur;
            case AssetSumCalcType::Reporting:
                return _assetTrans.ReportingCurrencyAmount;
            default:
                return _assetTrans.AmountMST;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransAmountBySumType</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves a transaction amount of the given <c>_assetTransTmp</c> record depending on the internal class <c>AssetSumCalcType</c> variable <c>sumType</c>.
    /// </summary>
    /// <param name="_assetTransTmp">An <c>AssetTransTmp</c> table record.</param>
    /// <returns>The transaction amount.</returns>
    /// <remarks>
    /// Depending on the <c>sumType</c> the returned amount can be AmountCur, AmountMST or ReportingCurrencyAmount.
    /// </remarks>
    protected AssetAmount getTransAmountBySumType(AssetTransTmp _assetTransTmp)
    {
        switch (sumType)
        {
            case AssetSumCalcType::Cur:
                return _assetTransTmp.AmountCur;
            case AssetSumCalcType::Reporting:
                return _assetTransTmp.ReportingCurrencyAmount;
            default:
                return _assetTransTmp.AmountMST;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDocTypeVarValue_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the sum amount of transactions of a specific <c>AssetDocType_JP</c> type.
    /// </summary>
    /// <param name="_transType">
    /// A <c>AssetTransType</c> enum.
    /// </param>
    /// <param name="_docType">
    /// A <c>AssetDocumentType_JP</c> enum.
    /// </param>
    /// <returns>
    /// The total amount.
    /// </returns>
    /// <remarks>
    /// Get the sum amount of transactions of a specific AssetDocType_JP type.
    /// </remarks>
    public AmountMST getAssetDocTypeVarValue_JP(AssetTransType _transType, AssetDocumentType_JP _docType)
    {
        this.calc();

        if (docSumCalcUtil == null)
        {
            return 0;
        }
        else
        {
            return docSumCalcUtil.getAssetDocTypeVarValue(_transType, _docType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetirementObligationAcquisitionValue_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the acquisition value of asset retirement obligation
    /// </summary>
    /// <returns>
    /// Acquisition value of asset retirement obligation
    /// </returns>
    public AmountMST getRetirementObligationAcquisitionValue_JP()
    {
        this.calc();

        return docSumCalcUtil.getAssetDocTypeVarValue(AssetTransType::Acquisition, AssetDocumentType_JP::AssetRetirementObligation)
            + docSumCalcUtil.getAssetDocTypeVarValue(AssetTransType::AcquisitionAdj, AssetDocumentType_JP::AssetRetirementObligation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetirementObligationDepreciationValue_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the depreciation value of asset retirement obligation
    /// </summary>
    /// <returns>
    /// Depreciation value of asset retirement obligation
    /// </returns>
    public AmountMST getRetirementObligationDepreciationValue_JP()
    {
        this.calc();

        return docSumCalcUtil.getAssetDocTypeVarValue(AssetTransType::Depreciation, AssetDocumentType_JP::AssetRetirementObligation)
            + docSumCalcUtil.getAssetDocTypeVarValue(AssetTransType::DepreciationAdj, AssetDocumentType_JP::AssetRetirementObligation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetirementObligationNBV_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the net book value of asset retirement obligation
    /// </summary>
    /// <returns>
    /// Net book value value of asset retirement obligation
    /// </returns>
    public AmountMST getRetirementObligationNBV_JP()
    {
        this.calc();

        return this.getRetirementObligationAcquisitionValue_JP() + this.getRetirementObligationDepreciationValue_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pack in client side.
    /// </summary>
    /// <returns>
    /// A container from asset document type set.
    /// </returns>
    protected container packClient()
    {
        container ret;

        if (countryContext == #isoJP && AssetDocumentUtility_JP::isAssetDocumentEnabled() && docSumCalcUtil != null)
        {
            docTypes = docSumCalcUtil.packClient();
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pack on server side.
    /// </summary>
    /// <returns>
    /// A container from the map which contains asset document types and values.
    /// </returns>
    public container packServer()
    {
        container ret;

        if (countryContext == #isoJP && AssetDocumentUtility_JP::isAssetDocumentEnabled() && docSumCalcUtil != null)
        {
            docTypeValues = docSumCalcUtil.packServer();
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocSumCalcUtil_JP</Name>
				<Source><![CDATA[
    public AssetDocumentSumCalcUtil_JP parmDocSumCalcUtil_JP(AssetDocumentSumCalcUtil_JP _util = docSumCalcUtil)
    {
        docSumCalcUtil = _util;
        return docSumCalcUtil;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLastTransDate_JP</Name>
				<Source><![CDATA[
    public AssetTransDate parmLastTransDate_JP()
    {
        return lastTransDate_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpack package from client on server.
    /// </summary>
    /// <param name="packedClient">
    /// The packed container.
    /// </param>
    public void unpackClient(container packedClient)
    {
        super(packedClient);

        if (countryContext == #isoJP && AssetDocumentUtility_JP::isAssetDocumentEnabled() && docTypes != conNull())
        {
            docSumCalcUtil = AssetDocumentSumCalcUtil_JP::construct(Set::create(docTypes));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeDownAdjValue</Name>
				<Source><![CDATA[
    public AmountMST writeDownAdjValue()
    {
        AmountMST ret = super();
        if (isDocumentAmountSeparate_JP)
        {
            ret -= this.getAssetDocTypeVarValue_JP(AssetTransType::WriteDownAdj, AssetDocumentType_JP::AssetImpairment);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcServer</Name>
				<Source><![CDATA[
    protected static container calcServer(container packedClient)
    {
        AssetSumCalc assetSumCalcTrans = new AssetSumCalc_Trans();

        assetSumCalcTrans.unpackClient(packedClient);
        assetSumCalcTrans.calc();

        return assetSumCalcTrans.packServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactionAffectingAcquisitionCosts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified transaction type will affect acquisition costs.
    /// </summary>
    /// <param name = "_assetJournalTransType">
    /// The transaction type to check.
    /// </param>
    /// <returns>
    /// true if the transaction will affect the acquisition costs; otherwise, false.
    ///</returns>
    /// <remarks>
    /// Add a post-method handler for returning the right value when extending the <c>AssetTransTypeJournal</c> enumeration.
    /// </remarks>
    public static boolean isTransactionAffectingAcquisitionCosts(AssetTransTypeJournal _assetJournalTransType)
    {
        switch (_assetJournalTransType)
        {
            case AssetTransTypeJournal::Acquisition,
                 AssetTransTypeJournal::AcquisitionAdj,
                 AssetTransTypeJournal::CapitalReserveTransfer:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>AssetSumCalc_Trans</c> class for the given asset values.
    /// </summary>
    /// <param name="_assetId">
    /// The ID of the asset.
    /// </param>
    /// <param name="_assetBookId">
    /// The book ID to which the asset belongs.
    /// </param>
    /// <param name="_dateFrom">
    /// The start of the date range.
    /// </param>
    /// <param name="_dateTo">
    /// The end of the date range.
    /// </param>
    /// <returns>
    /// An instance of the <c>AssetSumCalc_Trans</c> class
    /// </returns>
    public static AssetSumCalc_Trans newAssetId(AssetId     _assetId,
                                                AssetBookId _assetBookId,
                                                TransDate   _dateFrom,
                                                TransDate   _dateTo)
    {
        AssetSumCalc_Trans assetSumCalc_Trans = new AssetSumCalc_Trans();
        if (_assetBookId)
        {
            assetSumCalc_Trans.parmRangeBookId(queryValue(_assetBookId));
        }
        else
        {
            assetSumCalc_Trans.parmRangeBookId(queryValue(AssetTable::find(_assetId).assetBookCurrent().BookId));
        }
        assetSumCalc_Trans.parmRangeAssetId(queryValue(_assetId));
        assetSumCalc_Trans.parmDateFrom(_dateFrom);
        assetSumCalc_Trans.parmDateTo(_dateTo);
        return assetSumCalc_Trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetIdByCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>AssetSumCalc_Trans</c> class for the given asset values by currency.
    /// </summary>
    /// <param name="_assetId">
    /// The ID of the asset.
    /// </param>
    /// <param name="_assetBookId">
    /// The book ID to which the asset belongs.
    /// </param>
    /// <param name="_dateFrom">
    /// The start of the date range.
    /// </param>
    /// <param name="_dateTo">
    /// The end of the date range.
    /// </param>
    /// <param name="_assetSumCalcType">
    /// The currency amount type.
    /// </param>
    /// <returns>
    /// An instance of the <c>AssetSumCalc_Trans</c> class
    /// </returns>
    public static AssetSumCalc_Trans newAssetIdByCurrency(AssetId     _assetId,
                                                AssetBookId _assetBookId,
                                                TransDate   _dateFrom,
                                                TransDate   _dateTo,
                                                AssetSumCalcType _assetSumCalcType)
    {
        AssetSumCalc_Trans assetSumCalc_Trans  = AssetSumCalc_Trans::newAssetId(_assetId, _assetBookId, _dateFrom, _dateTo);
        assetSumCalc_Trans.parmSumType(_assetSumCalcType);

        return assetSumCalc_Trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetPeriod</Name>
				<Source><![CDATA[
    public static AssetSumCalc_Trans newAssetPeriod(
             Range      _rangeAssetId,
             Range      _rangeBookId,
             TransDate  _dateFrom,
             TransDate  _dateTo
            )
    {
        AssetSumCalc_Trans assetSumCalc_Trans = new AssetSumCalc_Trans();
        assetSumCalc_Trans.parmRangeAssetId(_rangeAssetId);
        assetSumCalc_Trans.parmRangeBookId(_rangeBookId);
        assetSumCalc_Trans.parmDateFrom(_dateFrom);
        assetSumCalc_Trans.parmDateTo(_dateTo);

        return assetSumCalc_Trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetPeriodByCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>AssetSumCalc_Trans</c> class for the given asset values by currency.
    /// </summary>
    /// <param name="_rangeAssetId">
    /// The ID of the asset.
    /// </param>
    /// <param name="_rangeBookId">
    /// The rage of book ID to which the asset belongs.
    /// </param>
    /// <param name="_dateFrom">
    /// The start of the date range.
    /// </param>
    /// <param name="_dateTo">
    /// The end of the date range.
    /// </param>
    /// <param name="_assetSumCalcType">
    /// The currency amount type.
    /// </param>
    /// <returns>
    /// An instance of the <c>AssetSumCalc_Trans</c> class
    /// </returns>
    public static AssetSumCalc_Trans newAssetPeriodByCurrency(
             Range      _rangeAssetId,
             Range      _rangeBookId,
             TransDate  _dateFrom,
             TransDate  _dateTo,
             AssetSumCalcType _assetSumCalcType
            )
    {
        AssetSumCalc_Trans assetSumCalc_Trans  = AssetSumCalc_Trans::newAssetPeriod(_rangeAssetId, _rangeBookId, _dateFrom, _dateTo);
        assetSumCalc_Trans.parmSumType(_assetSumCalcType);

        return assetSumCalc_Trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetYear</Name>
				<Source><![CDATA[
    public static AssetSumCalc_Trans newAssetYear(
             Range      _rangeAssetId,
             Range      _rangeBookId,
             TransDate  _assetDate          = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
             AssetYear  _assetYear          = AssetYear::All
            )
    {
        AssetSumCalc_Trans assetSumCalc_Trans = new AssetSumCalc_Trans();
        assetSumCalc_Trans.parmRangeAssetId(_rangeAssetId);
        assetSumCalc_Trans.parmRangeBookId(_rangeBookId);
        assetSumCalc_Trans.parmDateTo(_assetDate);
        assetSumCalc_Trans.parmAssetYear(_assetYear);

        return assetSumCalc_Trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetYearByCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>AssetSumCalc_Trans</c> class for the given asset values by currency.
    /// </summary>
    /// <param name="_rangeAssetId">
    /// The ID of the asset.
    /// </param>
    /// <param name="_rangeBookId">
    /// The rage of book ID to which the asset belongs.
    /// </param>
    /// <param name="_assetDate">
    /// The transaction date of asset.
    /// </param>
    /// <param name="_assetYear">
    /// The asset year value.
    /// </param>
    /// <param name="_assetSumCalcType">
    /// The currency amount type.
    /// </param>
    /// <returns>
    /// An instance of the <c>AssetSumCalc_Trans</c> class
    /// </returns>
    public static AssetSumCalc_Trans newAssetYearByCurrency(
             Range      _rangeAssetId,
             Range      _rangeBookId,
             TransDate  _assetDate          = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
             AssetYear  _assetYear          = AssetYear::All,
             AssetSumCalcType _assetSumCalcType = AssetSumCalcType::MST
            )
    {
        AssetSumCalc_Trans assetSumCalc_Trans  = AssetSumCalc_Trans::newAssetYear(_rangeAssetId, _rangeBookId, _assetDate, _assetYear);
        assetSumCalc_Trans.parmSumType(_assetSumCalcType);

        return assetSumCalc_Trans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>