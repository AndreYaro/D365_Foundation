<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcProcessController</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.BusinessPlatform.SharedTypes;

/// <summary>
/// The class ReqCalcProcessController provides method to manage the
/// status of a planning process represented by a ReqProcessList record.
/// </summary>
[InternalUseOnly]
internal class ReqCalcProcessController
{
    private readonly ReqProcessId processId;
    private readonly ClassId classId;
    private readonly ReqProcessNumThreads maxChildThreads;
    private readonly ReqPlanId planId;
    private readonly ReqCalcUpdate planningMethod;
    private boolean wasReqProcessListCreated;

    private readonly SysInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqCalcProcessController construct(
        ReqProcessId _processId, 
        ClassId _classId, 
        ReqProcessNumThreads _maxChildThreads, 
        ReqPlanId _planId, 
        ReqCalcUpdate _planningMethod)
    {
        return new ReqCalcProcessController(_processId, _classId, _maxChildThreads, _planId, _planningMethod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(
        ReqProcessId _processId, 
        ClassId _classId, 
        ReqProcessNumThreads _maxChildThreads, 
        ReqPlanId _planId, 
        ReqCalcUpdate _planningMethod)
    {
        processId = _processId;
        classId = _classId;
        maxChildThreads = _maxChildThreads;
        planId = _planId;
        planningMethod = _planningMethod;

        logger = SysInstrumentationLoggerFactory::createLogger(classStr(ReqCalcProcessController));
    }

]]></Source>
			</Method>
			<Method>
				<Name>beginProcess</Name>
				<Source><![CDATA[
    public void beginProcess(ParametersX _parameters, TodaysDate _todaysDate)
    {
        ReqProcessList::beginProcess(
            processId,
            _parameters, 
            maxChildThreads, 
            classId, 
            planId, 
            _todaysDate,
            planningMethod);
        wasReqProcessListCreated = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProcessStatus</Name>
				<Source><![CDATA[
    public void setProcessStatus(ReqProcessStatus _status)
    {
        ReqProcessList::setStatus(processId, _status);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasProcessCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the process was cancelled, or if the backing record in ReqProcessList was
    /// deleted.
    /// </summary>
    /// <returns>
    /// A container with two boolean values. The first boolean is true if the process was cancelled
    /// or if it was deleted; the second is true if the cancellation is due to an infrastructure
    /// failure.
    /// </returns>
    public container wasProcessCancelled()
    {
        ReqProcessList processList = ReqProcessList::findWithCacheDisabledWithoutParameters(processId, false);
        boolean shouldCancel = this.checkIfProcessIsCancelledOrRecordDeleted(processList);
        boolean infrastructureFailure = (processList.RecId == 0) ? false 
                                                                 : processList.InfrastructureFailure;
        return [shouldCancel, infrastructureFailure];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfProcessIsCancelledOrRecordDeleted</Name>
				<Source><![CDATA[
    private boolean checkIfProcessIsCancelledOrRecordDeleted(ReqProcessList _reqProcessList)
    {
        boolean wasReqProcessListFound = (_reqProcessList.RecId != 0);
        boolean wasReqProcessListCreatedAndDeleted = wasReqProcessListCreated && !wasReqProcessListFound;
        boolean wasProcessCancelledInReqProcessList = _reqProcessList.Cancelled;
        boolean shouldCancel = wasReqProcessListCreatedAndDeleted || wasProcessCancelledInReqProcessList;

        if (shouldCancel)
        {
            this.sendTelemetryForPositiveCancellationCheck(
                wasReqProcessListCreated, 
                !wasReqProcessListFound,
                wasProcessCancelledInReqProcessList);
        }

        return shouldCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTelemetryForPositiveCancellationCheck</Name>
				<Source><![CDATA[
    private void sendTelemetryForPositiveCancellationCheck(
        boolean _recordCreated,
        boolean _recordDeleted,
        boolean _processCancelled)
    {
        str message = strFmt(
                'Cancellation check. Record created: %1. Record deleted: %2. Process cancelled: %3.',
                _recordCreated,
                _recordDeleted,
                _processCancelled);
        logger.logInformation(message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProcessStatusAndLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status and level of the process to those of the supplied bundle
    /// </summary>
    /// <param name = "_bundle">The bundle setting status and level of the process</param>
    public void updateProcessStatusAndLevel(ReqCalcTasksBundle _bundle)
    {
        try
        {
            ttsbegin;

            ReqProcessList reqProcessList = ReqProcessList::findWithoutParameters(processId, false);

            if (reqProcessList && !this.processStateEqualsBundleState(reqProcessList, _bundle))
            {
                reqProcessList = ReqProcessList::findWithoutParameters(processId, true);

                if (!this.processStateEqualsBundleState(reqProcessList, _bundle))
                {
                    BOMLevel bundleLevel = real2int(abs(_bundle.Level));

                    reqProcessList.Status = _bundle.Status;
                    reqProcessList.Level  = bundleLevel;
                    reqProcessList.update();
                }
            }

            ttscommit;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResumedChildThreadsCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified number of resumed child threads count.
    /// </summary>
    /// <param name = "_resumedChildThreadsCount">Number of resumed child threads.</param>
    internal void addResumedChildThreadsCount(ReqRetryCount _resumedChildThreadsCount)
    {       
        try
        {
            ttsbegin;

            ReqProcessList reqProcessList = ReqProcessList::findWithoutParameters(processId, true);

            if (reqProcessList)
            {                
                reqProcessList.ResumedChildThreadsCount += _resumedChildThreadsCount;
                reqProcessList.update();
            }

            ttscommit;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processStateEqualsBundleState</Name>
				<Source><![CDATA[
    private boolean processStateEqualsBundleState(ReqProcessList _process, ReqCalcTasksBundle _bundle)
    {
        BOMLevel bundleLevel = real2int(abs(_bundle.Level));
        return    (_process.Status == _bundle.Status)
               && (_process.Level  == bundleLevel);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>