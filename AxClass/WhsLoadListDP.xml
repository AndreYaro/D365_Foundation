<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLoadListDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WHSLoadListDP</c> class declares the variables and tables required for the
///    <c>WHSLoadList</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(WHSLoadList))
]
public class  WhsLoadListDP extends SrsReportDataProviderPreProcessTempDB
{
    Notes               loadNotes;
    Notes               salesNotes;
    WHSParameters       whsParameters;
    int                 shipFreightPieces;
    WHSLoadTable        whsLoadTable;
    WHSShipmentTable    whsShipmentTable;
    WHSLoadListTmp      whsLoadListTmp;
    WMSLocationId       finalWMSLocationId;
    private Map         putWorkLineToPrintForWorkId = new Map(Types::String, Types::Record);
    private WMSLocationId changedLocIdFromPickWorkLine;

    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 30\06\2020)]
    int                 loadFreightPieces;
    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 30\06\2020)]
    int                 lineCounter;
    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 30\06\2020)]
    WHSWorkLine         sendWorkLine;
    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 30\06\2020)]
    WHSLicensePlateId   licensePlateId;
    [SysObsolete('This class member is deprecated because it is not used in this class anymore.', false, 30\06\2020)]
    container           sortedShipLocationList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWHSLoadListTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the <c>WHSLoadListTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(WHSLoadListTmp))
    ]
    public WHSLoadListTmp getWHSLoadListTmp()
    {
        select  whsLoadListTmp;

        return  whsLoadListTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWHSLoadListTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a temporary record to database for a load line.
    /// </summary>
    /// <param name="_workLine">
    /// The work line that represents the load line.
    /// </param>
    public void insertWHSLoadListTmp(WHSWorkLine   _workLine)
    {
        whsLoadListTmp.LoadId                   =   whsLoadTable.LoadId;
        whsLoadListTmp.InventLocationId         =   whsLoadTable.InventLocationId;
        whsLoadListTmp.InventSiteId             =   whsLoadTable.InventSiteId;
        whsLoadListTmp.LoadSchedShipUTCDateTime =   whsLoadTable.LoadSchedShipUTCDateTime;
        whsLoadListTmp.wmsLocationIdLoad        =   finalWMSLocationId;
        whsLoadListTmp.LoadWeight               =   whsLoadTable.effectiveGrossWeight();
        whsLoadListTmp.LoadVolume               =   whsLoadTable.effectiveTotalVolumeInLoad();
        whsLoadListTmp.CarrierCode              =   whsLoadTable.CarrierCode;
        whsLoadListTmp.RouteCode                =   whsLoadTable.RouteCode;
        whsLoadListTmp.LoadFloorStack           =   whsLoadTable.LoadFloorStack;
        whsLoadListTmp.LoadNotes                =   loadNotes;

        whsLoadListTmp.ShipmentStop             =   whsShipmentTable.StopNum;
        whsLoadListTmp.ShipmentId               =   whsShipmentTable.ShipmentId;
        whsLoadListTmp.ShipTotalWeight          =   whsShipmentTable.displayTotalWeight();
        whsLoadListTmp.ShipTotalVolume          =   whsShipmentTable.displayTotalVolume();
        whsLoadListTmp.DeliveryName             =   whsShipmentTable.DeliveryName;
        whsLoadListTmp.Address                  =   whsShipmentTable.Address;
        whsLoadListTmp.ShipFreightPieces        =   shipFreightPieces;
        whsLoadListTmp.SalesNotes               =   salesNotes;

        whsLoadListTmp.WorkId                   =   _workLine.WorkId;
        whsLoadListTmp.LineNum                  =   _workLine.LineNum;

        if (changedLocIdFromPickWorkLine)
        {
            whsLoadListTmp.wmsLocationIdLine = changedLocIdFromPickWorkLine;
        }
        else
        {
            whsLoadListTmp.wmsLocationIdLine = _workLine.wmsLocationId ? _workLine.wmsLocationId : "@WAX402";
        }

        whsLoadListTmp.ItemId                   =   _workLine.ItemId ? _workLine.ItemId : "@WAX402";
        whsLoadListTmp.Name                     =   _workLine.displayItemName() ? _workLine.displayItemName() : "@WAX402";
        whsLoadListTmp.QtyWork                  =   _workLine.QtyWork;
        whsLoadListTmp.UnitId                   =   _workLine.UnitId ? _workLine.UnitId : "@WAX402";
        whsLoadListTmp.TargetLicensePlateId     =   WHSWorkTable::find(_workLine.WorkId).TargetLicensePlateId;

        WHSWorkLine finalConsolidatedWorkLine = WHSConsolidatedWorkLine::findLastConsolidatedWorkLineByOriginWorkLine(_workLine);
        WHSWorkTable finalConsolidatedWorkTable = WHSWorkTable::find(finalConsolidatedWorkLine.WorkId);
        if (finalConsolidatedWorkTable.TargetLicensePlateId)
        {
            whsLoadListTmp.TargetLicensePlateId = finalConsolidatedWorkTable.TargetLicensePlateId;
        }

        whsLoadListTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the required data for the <c>WHSLoadList</c> report.
    /// </summary>
    public void processReport()
    {
        WHSLoadId           prevLoadId;
        WHSWorkId           prevWorkId;
        DocuRef             docuRef;
        WHSWorkLine         workLine;
        WHSWorkTable        workTable;
        Map                 mapLoadIdLPCount = new Map(extendedTypeId2Type(extendedTypeNum(WHSLoadId)), Types::Int64);

        QueryRun queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            whsLoadTable = queryRun.get(tableNum(WHSLoadTable));
            whsShipmentTable = queryRun.get(tableNum(WHSShipmentTable));

            if (prevLoadId != whsLoadTable.LoadId)
            {
                loadNotes = "";

                while select docuRef
                    where docuRef.RefRecId      == whsLoadTable.RecId &&
                          docuRef.RefTableId    == whsLoadTable.TableId &&
                          docuRef.RefCompanyId  == whsLoadTable.DataAreaId
                {
                    loadNotes += docuRef.Notes + '\n';
                }

                finalWMSLocationId = WHSLoadTable.getFinalLoc();
                prevLoadId = whsLoadTable.LoadId;
            }
   
            shipFreightPieces = 0;

            while select workLine
                join workTable
                group by workLine.WorkId
                    where workLine.ShipmentId    == whsShipmentTable.ShipmentId &&
                          workTable.WorkId       == workLine.WorkId             &&
                          workTable.WorkStatus   != WHSWorkStatus::Combined		&&
                          workTable.WorkStatus   != WHSWorkStatus::Cancelled
            {
                if (!prevWorkId || prevWorkId != workLine.WorkId)
                {
                    shipFreightPieces++;
                    prevWorkId = workLine.WorkId;
                }
            }

            salesNotes = '';

            while select docuRef
                where docuRef.RefRecId      == whsShipmentTable.RecId &&
                      docuRef.RefTableId    == whsShipmentTable.TableId &&
                      docuRef.RefCompanyId  == whsShipmentTable.DataAreaId
            {
                salesNotes += docuRef.Notes + '\n';
            }

            this.shipmentLocationList();
        }

        while select LoadId, count(RecId) from whsLoadListTmp
            group by LoadId
        {
            mapLoadIdLPCount.insert(whsLoadListTmp.LoadId, whsLoadListTmp.RecId);
        }
        MapEnumerator meLoadIdLPCount = mapLoadIdLPCount.getEnumerator();
        while (meLoadIdLPCount.moveNext())
        {
            update_recordset whsLoadListTmp
                setting LoadFreightPieces = any2int(meLoadIdLPCount.currentValue())
                where whsLoadListTmp.LoadId == any2str(meLoadIdLPCount.currentKey());
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>workIdsForShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks for work lines which are not cancelled, not combined and not skipped and associated to a given shipment id.
    /// The elements of the returned list are the work ids and each list element is unique.
    /// </summary>
    /// <param name="_shipmentId">
    /// The shipment id for which the associated work ids should be searched for.
    /// </param>
    /// <returns>
    /// A list with unique elements holding the work ids.
    /// </returns>
    private List workIdsForShipmentId(WHSShipmentId _shipmentId)
    {
        WHSWorkLine workLine;
        List workIds = new List(Types::String);

        while select WorkId from workLine
            group by workline.WorkId
            where workLine.WorkStatus   != WHSWorkStatus::Cancelled
                && workLine.WorkStatus  != WHSWorkStatus::Combined
                && workLine.WorkStatus  != WHSWorkStatus::Skipped
                && workLine.ShipmentId  == _shipmentId
        {
            workIds.addEnd(workLine.WorkId);
        }

        return workIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipmentLocationList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a shipment location list, sorts and sends it to process.
    /// </summary>
    public void shipmentLocationList()
    {
        List workIds = this.workIdsForShipmentId(whsShipmentTable.ShipmentId);

        // Iterate through all work ids associated to this shipment
        ListEnumerator workIdsEnumerator = workIds.getEnumerator();
        while (workIdsEnumerator.moveNext())
        {
            str workId = workIdsEnumerator.current();

            if (putWorkLineToPrintForWorkId.exists(workId))
            {
                // This work id was already processed and we have found a closed or in process put work line, so we can also use it for this shipment
                this.insertWHSLoadListTmp(putWorkLineToPrintForWorkId.lookup(workId));
                continue;
            }

            WHSWorkLine workLine;
            WHSWorkLine lastPutWorkLineChecked;
            WHSWorkLine initialPickWorkLine;

            // Iterate through the work lines of that work id
            while select workLine
                order by workLine.LineNum desc
                where workLine.WorkId        == workId
                    && (workLine.WorkType    == WHSWorkType::Pick
                        || workLine.WorkType == WHSWorkType::Put)
            {
                if (workLine.WorkType == WHSWorkType::Put)
                {
                    // All pick work lines processed before are no initial pick work lines, so we reset it
                    initialPickWorkLine = null;
                    lastPutWorkLineChecked = workLine.data();
                    if (workLine.WorkStatus == WHSWorkStatus::Closed || workLine.WorkStatus == WHSWorkStatus::InProcess)
                    {
                        // This is the put work line we want to print so break out the while loop
                        break;
                    }
                }
                else
                {
                    // Just pick work lines with a shipment id can be initial pick lines
                    if (workLine.ShipmentId == whsShipmentTable.ShipmentId)
                    {
                        if (workLine.WorkStatus == WHSWorkStatus::InProcess)
                        {
                            // Print the corresponding put work line
                            initialPickWorkLine = null;
                            break;
                        }
                        if (initialPickWorkLine)
                        {
                            // Merge information of initial pick work lines
                            if (initialPickWorkLine.ItemId != workLine.ItemId)
                            {
                                initialPickWorkLine.ItemId = '';
                            }
                            if (initialPickWorkLine.WMSLocationId != workLine.WMSLocationId)
                            {
                                initialPickWorkLine.WMSLocationId = '';
                            }

                            EcoResReleasedProductUnitConverter unitConverter = EcoResReleasedProductUnitConverter::construct();

                            if (initialPickWorkLine.UnitId == workLine.UnitId)
                            {
                                initialPickWorkLine.QtyWork += workLine.QtyWork;
                            }
                            else if (unitConverter.canBeConvertedGivenUnitSymbols(workLine.UnitId, initialPickWorkLine.UnitId, workLine.ItemId, workLine.InventDimId))
                            {
                                initialPickWorkLine.QtyWork += unitConverter.convertGivenUnitSymbols(workLine.QtyWork, workLine.UnitId, initialPickWorkLine.UnitId, NoYes::No, workLine.ItemId, workLine.InventDimId, NoYes::No);
                            }
                            else
                            {
                                initialPickWorkLine.UnitId = '';
                                initialPickWorkLine.QtyWork += workLine.QtyWork;
                            }
                        }
                        else
                        {
                            initialPickWorkLine = workLine.data();
                        }
                    }

                    changedLocIdFromPickWorkLine =  workLine.WMSLocationId;
                }
            }

            if (initialPickWorkLine)
            {
                this.insertWHSLoadListTmp(initialPickWorkLine);
            }
            else
            {
                this.insertWHSLoadListTmp(lastPutWorkLineChecked);
                putWorkLineToPrintForWorkId.insert(workId, lastPutWorkLineChecked);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortShipLocationList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sorts shipment locations by staging locations as first, defined locations as second and none defined locations at the end.
    /// </summary>
    [SysObsolete('This method is deprecated because it is not used in this class anymore.', false, 24\5\2022)]
    public void sortShipLocationList()
    {
        WMSLocation             wmsLocation;
        WHSLocationProfile      locProfile;
        WHSWorkTable            tmpWorkTable;

        // First insert only staging locations in order
        while select whsLoadListTmp
            join WorkId, InventLocationId from tmpWorkTable
            where tmpWorkTable.WorkId == whsLoadListTmp.WorkId
                join wmsLocationId, InventLocationId, LocProfileId from wmsLocation
                where wmsLocation.wmsLocationId     == whsLoadListTmp.wmsLocationIdLine &&
                      wmsLocation.InventLocationId  == tmpWorkTable.InventLocationId
                    join LocProfileId, LocType from locProfile
                    where locProfile.LocProfileId == wmsLocation.LocProfileId &&
                          locProfile.LocType      == whsParameters.StageLocType
        {
            sortedShipLocationList += [whsLoadListTmp];
        }

        // Then insert all other defined location
        while select whsLoadListTmp
            join WorkId, InventLocationId from tmpWorkTable
            where tmpWorkTable.WorkId == whsLoadListTmp.WorkId
                join wmsLocationId, InventLocationId, LocProfileId from wmsLocation
                where wmsLocation.wmsLocationId     == whsLoadListTmp.wmsLocationIdLine &&
                      wmsLocation.InventLocationId  == tmpWorkTable.InventLocationId
                    join LocProfileId, LocType from locProfile
                    where locProfile.LocProfileId == wmsLocation.LocProfileId &&
                          locProfile.LocType      != whsParameters.StageLocType
        {
            sortedShipLocationList += [whsLoadListTmp];
        }

        // Final insert all none defined location
        while select whsLoadListTmp
            where whsLoadListTmp.wmsLocationIdLine == "@WAX402"
        {
            sortedShipLocationList += [whsLoadListTmp];
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>