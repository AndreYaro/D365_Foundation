<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatCXMLShoppingBasketHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
/// <summary>
///    The <c>CatCXMLShoppingBasketHandler</c> class handles process and consumption of the received shopping basket for the cXML punchout protocol.
/// </summary>
[ExportMetadataAttribute(enumstr(CatPunchoutEntityType), enumLiteralStr(CatPunchoutEntityType, cXML)),
    ExportAttribute(identifierstr(Dynamics.AX.Application.CatShoppingBasketHandler))]
public class CatCXMLShoppingBasketHandler extends CatShoppingBasketHandler
{
    private CatCXMLPunchOutLog punchOutLog;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canProcessShoppingBasket</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines whether the shopping basket can be processed for the specific <c>CatPunchoutRequest</c> request.
    /// </summary>
    /// <param name = "_punchoutRequest">
    ///  The <c>CatPunchoutRequest</c> table record.
    /// </param>
    /// <returns>
    ///  true if the the shopping basket can be processed; otherwise, false.
    /// </returns>
    public boolean canProcessShoppingBasket(CatPunchoutRequest _punchoutRequest)
    {
        boolean canProcess = false;

        if(_punchoutRequest.RecId)
        {
            CatCXMLPunchoutRequestÂ cXmlPunchoutRequest = _punchoutRequest as CatCXMLPunchoutRequest;

            if(cXmlPunchoutRequest.RecId && cXmlPunchoutRequest.RequestStatus == CatPunchoutRequestStatus::ExpectsBasket)
            {
                canProcess = cXmlPunchoutRequest.cXMLPunchoutSession().ExpectsXML == NoYes::No;
            }
        }

        return canProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processShoppingBasket</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Processes the shopping basket.
    /// </summary>
    /// <param name = "_punchoutRequest">
    ///  The <c>CatPunchoutRequest</c> table record.
    /// </param>
    public void processShoppingBasket(CatPunchoutRequest _punchoutRequest)
    {
        if (this.canProcessShoppingBasket(_punchoutRequest))
        {
            System.Exception exception;
            try
            {
                XmlDocument orderMessageCXmlDocument = this.loadPunchOutOrderMessage(_punchoutRequest);

                XmlParseError xmlParseError = orderMessageCXmlDocument.parseError();

                if (xmlParseError.errorCode())
                {
                    _punchoutRequest.setExpired();
                    _punchoutRequest.discardPunchoutRequest();
                    error(strFmt("@SCM:ProcessingShoppingBasketFailed", isSystemAdministrator() ? xmlParseError.toString() : xmlParseError.reason()));
                    return;
                }                

                if(orderMessageCXmlDocument && orderMessageCXmlDocument.childNodes().length() > 0)
                {
                    this.validateBuyerCookieOnPunchOutOrderMessage(_punchoutRequest, orderMessageCXmlDocument);

                    CatShoppingBasket shoppingBasket = this.parsePunchOutOrderMessage(orderMessageCXmlDocument);

                    if (shoppingBasket && !shoppingBasket.getBasketLines().empty())
                    {
                        this.consumeShoppingBasket(_punchoutRequest, shoppingBasket);
                    }
                }
        
            }
            catch (exception)
            {
                throw error(strFmt("@SCM:ProcessingShoppingBasketFailed", exception.Message));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPunchOutOrderMessage</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Loads the received punch out order message for the specific <c>CatPunchoutRequest</c>.
    /// </summary>
    /// <param name = "_punchoutRequest">
    ///  The <c>CatPunchoutRequest</c> table record.
    /// </param>
    /// <returns>
    ///  The received punchout order message as <c>XmlDocument</c> object.
    /// </returns>
    protected XmlDocument loadPunchOutOrderMessage(CatCXMLPunchoutRequest _punchoutRequest)
    {
        CatCXMLPunchoutSession punchoutSession = _punchoutRequest.cXMLPunchoutSession();

        XML punchoutSessionXml;

        if (punchoutSession.RecId)
        {
            unchecked(Uncheck::TableSecurityPermission)
            {
                punchoutSessionXml = punchoutSession.XML;
            }
        }
                
        if (punchoutSessionXml == '' || punchoutSession.ExpectsXML == NoYes::Yes)
        {
            throw error(Error::missingRecord(tableStr(CatCXMLPunchoutSession)));
        }

        XmlDocument orderMessageCXmlDocument;
        System.Exception exception;

        try
        {
            // Pass null to ensure any external DTD references encountered by the reader are not resolved.
            orderMessageCXmlDocument = new XmlDocument();
            orderMessageCXmlDocument.xmlResolver(null);
            orderMessageCXmlDocument.loadXml(punchoutSessionXml);
        }
        catch (exception)
        {
            throw error(strFmt("@SCM:FailedToOpenCXMLEntity", "@SYS98555"));
        }
        
        return orderMessageCXmlDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBuyerCookieOnPunchOutOrderMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the received punch out order message for integrity.
    /// </summary>
    /// <param name = "_punchoutRequest">
    ///  The <c>CatPunchoutRequest</c> table record.
    /// </param>
    /// <param name = "_orderMessageCXmlDocument">
    ///  The <c>XmlDocument</c> object of the received punch out order message to be validated.
    /// </param>
    protected void validateBuyerCookieOnPunchOutOrderMessage(CatCXMLPunchoutRequest _punchoutRequest, XmlDocument _orderMessageCXmlDocument)
    {
        str buyerCookie = '';
        System.Exception exception;

        try
        {
            buyerCookie = _orderMessageCXmlDocument.selectSingleNode('descendant::PunchOutOrderMessage/BuyerCookie').InnerText();
        }
        catch
        {
            throw error(strFmt("@SCM:CXMLParseError", exception.Message));
        }

        unchecked(Uncheck::TableSecurityPermission)
        {
            if (buyerCookie == '' || buyerCookie != guid2Str(_punchoutRequest.cXMLPunchoutSession().PunchoutId))
            {
                throw error("@SCM:BuyerCookieMismatch");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parsePunchOutOrderMessage</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Parse the received punch out order message into <c>CatShoppingBasket</c> data type.
    /// </summary>
    /// <param name = "_orderMessageCXmlDocument">
    ///  The <c>XmlDocument</c> object of the received punch out order message to be parsed.
    /// </param>
    /// <returns>
    ///  The <c>CatShoppingBasket</c> data type.
    /// </returns>
    protected CatShoppingBasket parsePunchOutOrderMessage(XmlDocument _orderMessageCXmlDocument)
    {
        CatShoppingBasket shoppingBasket;
        str buyerCookie = '';


        System.Exception exception;
        try
        {
            
            buyerCookie = _orderMessageCXmlDocument.selectSingleNode('descendant::PunchOutOrderMessage/BuyerCookie').InnerText();

            punchOutLog = CatCXMLPunchOutLog::construct(str2Guid(buyerCookie));
            punchOutLog.parmPunchOutOrder(_orderMessageCXmlDocument.xml());
            punchOutLog.updateLogBasket();

            XmlNodeList punchOutOrderMessageNodeChildNodes = _orderMessageCXmlDocument.selectSingleNode('descendant::PunchOutOrderMessage').childNodes();

            shoppingBasket = CatShoppingBasket::construct('@CXM:CXMLShoppingBasketName');
        
            int  punchOutOrderMessageNodeChildNodesElements =  punchOutOrderMessageNodeChildNodes.length();

            for (int i = 0; i < punchOutOrderMessageNodeChildNodesElements; i++)
            {
                XmlNode childNode= punchOutOrderMessageNodeChildNodes.item(i);
            
                if (childNode.name() == 'ItemIn')
                {
                    ItemId                      prodId;
                    EcoResProductName           prodName;
                    Name                        classDomain, classText;
                    ItemFreeTxt                 prodDesc;
                    Price                       prodPrice;
                    Qty                         prodQty = 0;
                    UnitOfMeasureSymbol         prodUom;
                    CurrencyCode                prodCurrency;
                    PurchSupplierAuxId          supplierPartAuxiliaryId;

                    XmlNamedNodeMap childNodeAttributes = childNode.attributes();
                    prodQty = str2Int(childNodeAttributes.getNamedItem('quantity').text());

                    XmlNodeList itemInNodeChildNodes = childNode.childNodes();
                    int itemInNodeChildNodesItem = itemInNodeChildNodes.length();

                    for (int j = 0; j < itemInNodeChildNodesItem; j++)
                    {
                        XmlNode innerChildNode = itemInNodeChildNodes.item(j);
              
                        if (innerChildNode.name() == 'ItemID')
                        {
                            //The product name and product ID will be the same. For the category
                            //based purchase the Id is not used so will be ignored in the req.
                            prodId = innerChildNode.selectSingleNode('descendant::SupplierPartID').innerText();

                            //Process the Aux as a separate method. Some vendors might not include this field and hence the xml won't find it and fail
                            //so want to continue if this vendor doesn't include.
                            supplierPartAuxiliaryId = this.processAuxID(innerChildNode);

                        }

                        if (innerChildNode.name() == 'ItemDetail')
                        {
                            XmlElement moneyNode;
                            if (CatCXMLShoppingBasketParsePunchOutNamedElementFlight::instance().isEnabled())
                            {
                                var unitPriceNode = innerChildNode.getNamedElement('UnitPrice');
                                moneyNode = unitPriceNode.getNamedElement('Money');
                            }
                            else
                            {
                                moneyNode = innerChildNode.selectSingleNode('descendant::UnitPrice/Money');
                            }
                            
                            XmlNamedNodeMap moneyNodeAttributes = moneyNode.attributes();

                            prodCurrency = moneyNodeAttributes.getNamedItem('currency').text();
                            prodPrice = str2num(moneyNode.innerText());

                            XmlElement descriptionNode;
                            if (CatCXMLShoppingBasketParsePunchOutNamedElementFlight::instance().isEnabled())
                            {
                                descriptionNode = innerChildNode.getNamedElement('Description');
                            }
                            else
                            {
                                descriptionNode = innerChildNode.selectSingleNode('descendant::Description');
                            }
                            
                            XmlNamedNodeMap descriptionNodeAttributes = descriptionNode.attributes();
                            
                            var description = descriptionNode.innerText();

                            try
                            {
                                prodName = descriptionNodeAttributes.getNamedItem('ShortName').text();
                            }
                            catch(exception)
                            {
                                if (prodName == '')
                                {
                                    prodName =  description;
                                }
                            }

                            XmlElement classificationNode;
                            if (CatCXMLShoppingBasketParsePunchOutNamedElementFlight::instance().isEnabled())
                            {
                                classificationNode = innerChildNode.getNamedElement('Classification');
                            }
                            else
                            {
                                classificationNode = innerChildNode.selectSingleNode('descendant::Classification');
                            }
                            
                            XmlNamedNodeMap classificationeNodeAttributes = classificationNode.attributes();

                            classDomain = classificationeNodeAttributes.getNamedItem('domain').text();
                            classText = classificationNode.innerText();

                            if (CatCXMLShoppingBasketParsePunchOutNamedElementFlight::instance().isEnabled())
                            {
                                prodUom = innerChildNode.getNamedElement('UnitOfMeasure').innerText();
                            }
                            else
                            {
                                prodUom = innerChildNode.selectSingleNode('descendant::UnitOfMeasure').innerText();
                            }
                            
                            prodDesc = strFmt('%1 %2 %3', description, classDomain, classText);
                        }
                    }

                    shoppingBasket.parmPurchSupplierAuxId(supplierPartAuxiliaryId);
                    boolean success = shoppingBasket.NewItem(prodId, prodName, prodDesc, prodPrice, prodQty, prodUom, prodCurrency);
                
                    if(!success)
                    {
                        warning(strFmt("@SCM:CanNotCreateBasketLine", prodName));
                    }
                }
            }
        }
        catch(exception)
        {
            throw error(strFmt("@SCM:CXMLParseError", exception.Message));
        }
        return shoppingBasket;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAuxID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the Supplier Auxiliary ID
    /// </summary>
    /// <param name = "innerChildNode">
    /// The <c>XmlNode</c> Data Type
    /// </param>
    /// <returns>
    /// The Supplier Auxiliary ID
    /// </returns>
    private PurchSupplierAuxId processAuxID(XmlNode innerChildNode)
    {
        PurchSupplierAuxId supplierPartAuxiliaryId;

        System.Exception exception;
        try
        {
            supplierPartAuxiliaryId = innerChildNode.selectSingleNode('descendant::SupplierPartAuxiliaryID').innerText();
        }
        catch(exception)
        {
            supplierPartAuxiliaryId = '';
        }

        return supplierPartAuxiliaryId;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>