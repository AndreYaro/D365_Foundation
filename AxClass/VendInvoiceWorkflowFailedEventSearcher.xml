<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceWorkflowFailedEventSearcher</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final static class VendInvoiceWorkflowFailedEventSearcher
{
    private static TableId vendInvoiceInfoTableTableId = tableNum(VendInvoiceInfoTable);
    private static RefRecId vendInvoiceAutomationSubmitToWorkflowDocumentEvent = DocumentEvent::findByEventType(enumNum(VendInvoiceAutomationSubmitToWorkflow)).RecId;
    private static RefRecId vendInvoiceManualSubmissionToWorkflowDocumentEvent= DocumentEvent::findByEventType(enumNum(VendInvoiceManualSubmissionToWorkflow)).RecId;
    private static RefRecId vendInvoiceWorkflowStatusEventDocumentEvent = DocumentEvent::findByEventType(enumNum(VendInvoiceWorkflowStatusEvent)).RecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all the automated invoices that failed in a workflow and do not have a corresponding document event.
    /// </summary>
    /// <returns>A temporary table containing the list of invoice identfiers.</returns>
    internal static DocumentEventRequestDocumentsTmp findAll()
    {
        DocumentEventLog documentEventLog;
        DocumentEventLog documentEventLogSelfJoin;
        WorkflowTrackingStatusTable workflowTrackingStatusTable;
        DocumentEventRequestDocumentsTmp documentEventRequestDocumentsTmp;

        // Note: The conditions in the 'where' clause are exactly the same as in the findOne() method below
        // If any condition is changed here, then make sure to update in the other method too.
        // The duplication cannot be avoided since
        //  1. These methods are called from classes that do not allow data sharing.
        //  2. Using a Query object or macros is not a good choice in this case.
        insert_recordset documentEventRequestDocumentsTmp
            (SourceRecId)
            select SourceRecId from documentEventLog
            group by documentEventLog.SourceRecId
            where documentEventLog.SourceTableId == vendInvoiceInfoTableTableId
                && ((documentEventLog.DocumentEvent == vendInvoiceAutomationSubmitToWorkflowDocumentEvent
                        && documentEventLog.EventEnumValue == enum2int(VendInvoiceAutomationSubmitToWorkflow::Succeeded))
                    || (documentEventLog.DocumentEvent == vendInvoiceManualSubmissionToWorkflowDocumentEvent
                        && documentEventLog.EventEnumValue == enum2int(VendInvoiceManualSubmissionToWorkflow::NotSpecified)))
            join workflowTrackingStatusTable
            where workflowTrackingStatusTable.ContextTableId == vendInvoiceInfoTableTableId
                && workflowTrackingStatusTable.ContextRecId == documentEventLog.SourceRecId
                && (workflowTrackingStatusTable.TrackingStatus == enum2int(WorkflowTrackingStatus::Cancelled)
                    || workflowTrackingStatusTable.TrackingStatus == enum2int(WorkflowTrackingStatus::Faulted)
                    || workflowTrackingStatusTable.TrackingStatus == enum2int(WorkflowTrackingStatus::Unrecoverable))
            notexists join documentEventLogSelfJoin
            where documentEventLogSelfJoin.SourceTableId == vendInvoiceInfoTableTableId
                && documentEventLogSelfJoin.SourceRecId == documentEventLog.SourceRecId
                && documentEventLogSelfJoin.DocumentEvent == vendInvoiceWorkflowStatusEventDocumentEvent;

        return documentEventRequestDocumentsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOne</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there exists an automated invoice that failed in a workflow and does not have a corresponding document event.
    /// </summary>
    /// <returns>true if the document event is missing; otherwise, false.</returns>
    internal static boolean findOne()
    {
        DocumentEventLog documentEventLog;
        DocumentEventLog documentEventLogSelfJoin;
        WorkflowTrackingStatusTable workflowTrackingStatusTable;

        // Note: The conditions in the 'where' clause are exactly the same as in the findAll() method above.
        // If any condition is changed here, then make sure to update in the other method too.
        select firstonly RecId from documentEventLog
            where documentEventLog.SourceTableId == vendInvoiceInfoTableTableId
                && ((documentEventLog.DocumentEvent == vendInvoiceAutomationSubmitToWorkflowDocumentEvent
                        && documentEventLog.EventEnumValue == enum2int(VendInvoiceAutomationSubmitToWorkflow::Succeeded))
                    || (documentEventLog.DocumentEvent == vendInvoiceManualSubmissionToWorkflowDocumentEvent
                        && documentEventLog.EventEnumValue == enum2int(VendInvoiceManualSubmissionToWorkflow::NotSpecified)))
            join workflowTrackingStatusTable
            where workflowTrackingStatusTable.ContextTableId == vendInvoiceInfoTableTableId
                && workflowTrackingStatusTable.ContextRecId == documentEventLog.SourceRecId
                && (workflowTrackingStatusTable.TrackingStatus == enum2int(WorkflowTrackingStatus::Cancelled)
                    || workflowTrackingStatusTable.TrackingStatus == enum2int(WorkflowTrackingStatus::Faulted)
                    || workflowTrackingStatusTable.TrackingStatus == enum2int(WorkflowTrackingStatus::Unrecoverable))
            notexists join documentEventLogSelfJoin
            where documentEventLogSelfJoin.SourceTableId == vendInvoiceInfoTableTableId
                && documentEventLogSelfJoin.SourceRecId == documentEventLog.SourceRecId
                && documentEventLogSelfJoin.DocumentEvent == vendInvoiceWorkflowStatusEventDocumentEvent;

        return documentEventLog.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>