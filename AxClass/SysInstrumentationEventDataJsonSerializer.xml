<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysInstrumentationEventDataJsonSerializer</Name>
	<SourceCode>
		<Declaration><![CDATA[
using StringBuilder = System.Text.StringBuilder;
using StringWriter = System.IO.StringWriter;
using JsonTextWriter = Newtonsoft.Json.JsonTextWriter;

/// <summary>
/// Serializes a collection of values into a single JSON object string.
/// </summary>
public final class SysInstrumentationEventDataJsonSerializer
{
    private Map values = new Map(Types::String, Types::String);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setValue</Name>
				<Source><![CDATA[
	/// <summary>
    /// Adds a value to the collection. If the value with same name exists, then it will be overwritten.
    /// </summary>
    /// <param name = "_name">Name of the value.</param>
    /// <param name = "_value">Value to add.</param>
    /// <returns>This inscence.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
	internal SysInstrumentationEventDataJsonSerializer setValue(str _name, str _value)
    {
        values.insert(_name, _value);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNameAndValue</Name>
				<Source><![CDATA[
    internal SysInstrumentationEventDataJsonSerializer setNameAndValue(SysInstrumentationLoggerAppSuiteProperty _property)
    {
        return this.setValue(_property.name, _property.value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
	/// <summary>
    /// Serializes a collection of values into a single JSON object string.
    /// </summary>
    /// <returns>A string containing serialized values.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    internal str toString()
    {
        var stringBuilder = new StringBuilder();

        using (var stringWriter = new StringWriter(stringBuilder))
        using (var writer = new JsonTextWriter(stringWriter))
        {
            writer.WriteStartObject();
            this.serializeValues(writer);
            writer.WriteEndObject();
        }

        return stringBuilder.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>serializeValues</Name>
				<Source><![CDATA[
	private void serializeValues(JsonTextWriter _writer)
    {
        var valuesEnumerator = values.getEnumerator();
		while (valuesEnumerator.moveNext())
        {
            _writer.WritePropertyName(valuesEnumerator.currentKey());
            _writer.WriteValue(valuesEnumerator.currentValue());
        }
	}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>