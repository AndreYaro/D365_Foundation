<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSLoadBuildVolumeStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSLoadBuildVolumeStrategy</c> implements a simple load build strategy,
/// which groups order lines by volume until specified utilization treshold.
/// </summary>
[TMSLoadBuildStrategyEnableAttribute]
class TMSLoadBuildVolumeStrategy implements TMSILoadBuildStrategy
{
    #TMSLoadBuild
    Percent loadMaxVolumeCapacityPct;
    Percent loadMaxWeightCapacityPct;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    public TMSLoadBuildStrategyClassDescription getDescription()
    {
        return "@SYP4861036";
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(TMSLoadBuildParamValueMap _parameters)
    {
        if (!_parameters.empty())
        {
            loadMaxVolumeCapacityPct        = _parameters.findValueDecimal(#VolumeStrategyMaxVolume).parmValueDecimal();
            loadMaxWeightCapacityPct        = _parameters.findValueDecimal(#VolumeStrategyMaxWeight).parmValueDecimal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxTemplateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates maximum allowed load weight and volume according to the strategy parameters.
    /// </summary>
    /// <param name="_loadTemplate">
    /// The <c>WHSLoadTemplate</c> record.
    /// </param>
    /// <returns>
    /// Container with two elements: maximum load weight, maximun load volume
    /// </returns>
    protected container maxTemplateParameters(WHSLoadTemplate _loadTemplate)
    {
        Weight                        loadMaxWeight;
        Volume                        loadMaxVolume;

        loadMaxWeight        = _loadTemplate.LoadMaxWeight * loadMaxWeightCapacityPct / 100;
        loadMaxVolume        = _loadTemplate.LoadMaxVolume * loadMaxVolumeCapacityPct / 100;

        return [loadMaxWeight, loadMaxVolume];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateParameterCollection</Name>
				<Source><![CDATA[
    public void populateParameterCollection(TMSLoadBuildStrategyParamMap _tmsLoadBuildStrategyParamMap)
    {
        _tmsLoadBuildStrategyParamMap.addParameter(TMSLoadBuildStrategyParamDecimal::newParameters(#VolumeStrategyMaxVolume));
        _tmsLoadBuildStrategyParamMap.addParameter(TMSLoadBuildStrategyParamDecimal::newParameters(#VolumeStrategyMaxWeight));
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposeLoads</Name>
				<Source><![CDATA[
    public boolean proposeLoads(
        TMSLoadBuildStrategyInputId         _loadBuildStrategyInputId,
        TMSLoadBuildLoadTemplateList        _loadTemplates,
        TMSProposedLoadInitDataContract     _proposedLoadInitDataContract = null)
    {
        TMSProposedLoadContent        proposedLoadContent;
        TMSProposedLoad               proposedLoad;
        WHSLoadTemplate               loadTemplate;
        TMSLoadBuildStrategyInputSet  loadBuildStrategyInputSet;
        Weight                        loadMaxWeight;
        Volume                        loadMaxVolume;
        TMSTmpProposedLoad            tmpProposedLoad;
        boolean                       maxNumberOfLoadsCreated = false;
        int                           loadCounter = 0;
        int                           maxNumberOfLoads = _proposedLoadInitDataContract != null ? _proposedLoadInitDataContract.parmMaxNumberOfLoads() : 0;

        if (!this.validate() || !this.validateProposedLoadsInput(_loadBuildStrategyInputId, _loadTemplates))
        {
            return false;
        }

        loadBuildStrategyInputSet = TMSLoadBuildStrategyInputSet::find(_loadBuildStrategyInputId);

        if (!loadBuildStrategyInputSet)
        {
            return checkFailed(strFmt("@SYS112535", methodStr(TMSLoadBuildVolumeStrategy, proposeLoads), varStr(_loadBuildStrategyInputId)));
        }

        ListEnumerator le = _loadTemplates.getEnumerator();
       
        boolean isLoadTemplatesEmpty = true;

        while (le && le.moveNext())
        {
            isLoadTemplatesEmpty = false;
            loadTemplate = WHSLoadTemplate::find(le.current());

            if (!loadTemplate)
            {
                return checkFailed(strFmt("@SYS112535", methodStr(TMSLoadBuildVolumeStrategy, proposeLoads), varStr(_loadTemplates)));
            }

            [loadMaxWeight, loadMaxVolume] = this.maxTemplateParameters(loadTemplate);

            ttsBegin;

            // The classical algorithm for "Multiple Knapsack problem" was used.
            // First we sort all lines by volume in descending order. Then we maintain list of loads that is also sorted by volume in descending order.
            // On every iteration we take new line and put it into the heaviest load that it can fit.

            while select forUpdate proposedLoadContent
            order by proposedLoadContent.TotalVolume desc, proposedLoadContent.TotalWeight desc
                where proposedLoadContent.LoadBuildStrategyInputSet == _loadBuildStrategyInputId
                && proposedLoadContent.ProposedLoad == 0
                && (!loadMaxVolume || proposedLoadContent.TotalVolume <= loadMaxVolume)
                && (!loadMaxWeight || proposedLoadContent.TotalWeight <= loadMaxWeight)
            {
                select forUpdate firstonly tmpProposedLoad
                order by tmpProposedLoad.TotalVolume desc, tmpProposedLoad.TotalWeight desc
                    where (!loadMaxVolume || (tmpProposedLoad.TotalVolume + proposedLoadContent.TotalVolume <= loadMaxVolume))
                       && (!loadMaxWeight || (tmpProposedLoad.TotalWeight + proposedLoadContent.TotalWeight <= loadMaxWeight));
                // Add line to load
                if (tmpProposedLoad)
                {
                    tmpProposedLoad.TotalVolume  += proposedLoadContent.TotalVolume;
                    tmpProposedLoad.TotalWeight  += proposedLoadContent.TotalWeight;
                    tmpProposedLoad.update();
                }
                // Maximum number of loads has been reached, do not propose another load, these lines will end up in 'Not included'
                else if (maxNumberOfLoadsCreated)
                {
                    continue;
                }
                // First load to be generated
                else
                {
                    // Because of code upgrade considerations, _proposedLoadInitDataContract is an optional parameter, therefore null is a valid value
                    if (_proposedLoadInitDataContract)
                    {
                        proposedLoad.initFromInitDataWithSessionAndTemplateId(_proposedLoadInitDataContract, loadBuildStrategyInputSet.LoadBuildSession, loadTemplate.LoadTemplateId);
                    }
                    else
                    {
                        proposedLoad.init(loadBuildStrategyInputSet.LoadBuildSession, loadTemplate.LoadTemplateId);
                    }
                    
                    proposedLoad.insert();

                    loadCounter++;

                    // If maximum number of loads is the default, there is no limit to the number of loads created.
                    //  Otherwise, continue to create loads until the max is reached

                    maxNumberOfLoadsCreated = maxNumberOfLoads > 0 && loadCounter >= maxNumberOfLoads;

                    tmpProposedLoad.TotalVolume  = proposedLoadContent.TotalVolume;
                    tmpProposedLoad.TotalWeight  = proposedLoadContent.TotalWeight;
                    tmpProposedLoad.ProposedLoad = proposedLoad.RecId;
                    tmpProposedLoad.insert();
                }

                proposedLoadContent.ProposedLoad = tmpProposedLoad.ProposedLoad;
                proposedLoadContent.update();
            }

            delete_from tmpProposedLoad;

            ttsCommit;
        }

        if (isLoadTemplatesEmpty)
        {
            throw error("@SYP4861031");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates strategy parameters for load proposing.
    /// </summary>
    /// <returns>
    /// true if the startegy is initialized correctly; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        if (loadMaxVolumeCapacityPct < 0)
        {
            return checkFailed("@SYP4861027");
        }

        if (loadMaxWeightCapacityPct < 0)
        {
            return checkFailed("@SYP4861028");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProposedLoadsInput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates input for load proposing.
    /// </summary>
    /// <param name="_loadBuildStrategyInputId">
    /// The record ID of the <c>TMSLoadBuildStrategyInputSet</c> table.
    /// </param>
    /// <param name="_loadTemplates">
    /// The list of <c>WHSLoadTemplate</c> records.
    /// </param>
    /// <returns>
    /// true if the input is correct; otherwise, false.
    /// </returns>
    public boolean validateProposedLoadsInput(
        TMSLoadBuildStrategyInputId  _loadBuildStrategyInputId,
        TMSLoadBuildLoadTemplateList _loadTemplates)
    {
        if (!_loadBuildStrategyInputId)
        {
            return checkFailed(strFmt("@SYS112535", methodStr(TMSLoadBuildVolumeStrategy, proposeLoads), varStr(_loadBuildStrategyInputId)));
        }

        if (!_loadTemplates)
        {
            return checkFailed(strFmt("@SYS112535", methodStr(TMSLoadBuildVolumeStrategy, proposeLoads), varStr(_loadTemplates)));
        }

        if (!_loadTemplates.validate())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSLoadBuildVolumeStrategy construct()
    {
        return new TMSLoadBuildVolumeStrategy();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>