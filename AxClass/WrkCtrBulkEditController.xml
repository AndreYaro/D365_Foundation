<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrBulkEditController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WrkCtrBulkEditController</c> class is a utility class that is used to control the
///    <c>WrkCtrBulkEdit</c> form and performs bulk updates of multiple selected records.
/// </summary>
public class WrkCtrBulkEditController
{
    FormRun             formObject;
    Map                 fieldsMap;
    WrkCtrBulkEditField selectedField;

    boolean             fieldValid;
    boolean             valueValid;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doBulkUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs a bulk update of the records that are selected on the calling form.
    /// </summary>
    /// <param name="_FieldValue">
    ///     A value to use to update the records.
    /// </param>
    /// <remarks>
    ///     This method is used by the <c>WrkCtrBulkEditForm</c> and should not be called directly as it
    ///     depends on the internal state of the class.
    /// </remarks>
    public void doBulkUpdate( anytype _FieldValue )
    {
        FormRun         callerForm = formObject.args().caller();
        FormDataSource  fds;
        fieldId         fieldId;
        Common          common;
        Common          commonForUpdate;
        SysDictTable    dictTable;

        // Pre-reqs check - there has to be a calling form and a field for update has to be selected.
        if (callerForm && selectedField)
        {
            fds     = selectedField.parmFormDataSource();
            fieldId = selectedField.parmDictField().id();

            ttsbegin;

            setprefix("@SYS101230");

            for (common = fds.getFirst(1) ? fds.getFirst(1) : fds.cursor(); common; common = fds.getNext())
            {
                dictTable = SysDictTable::newTableId(common.TableId);
                commonForUpdate = dictTable.makeRecord();

                select firstOnly forupdate commonForUpdate
                    where commonForUpdate.RecId == common.RecId;

                setprefix(strfmt("@SYS191501", fieldid2pname(common.TableId, dictTable.titleField1()), common.(dictTable.titleField1())));

                commonForUpdate.(fieldId) = _FieldValue;

                if ( commonForUpdate.validateField( fieldId ) && commonForUpdate.validateWrite() )
                {
                    commonForUpdate.modifiedField(selectedField.parmDictField().id());
                    commonForUpdate.update();
                }
            }

            ttscommit;

            // update the main datasource on the form, so the other are updated as well
            callerForm.dataSource().research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formRenderControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs safe invocation of the <c>renderControls</c> method of the <c>WrkCtrBulkEdit</c> form.
    /// </summary>
    private void formRenderControls()
    {
        Object form = formObject;

        if ( formHasMethod(formObject,identifierstr(renderControls)) )
        {
            form.renderControls(fieldValid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formSetCurrentValueControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a safe invocation of the <c>setCurrentValueControl</c> method of the <c>WrkCtrBulkEdit</c>
    ///    form.
    /// </summary>
    private void formSetCurrentValueControl()
    {
        Object form = formObject;

        if ( formHasMethod(formObject,identifierstr(setCurrentValueControl)) )
        {
            form.setCurrentValueControl(selectedField);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldsEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the enumerator that contains the bulk editable fields of the calling form.
    /// </summary>
    /// <returns>
    ///    The bulk editable fields collection enumerator. If the collection is empty, no bulk editable fields
    ///    have been found.
    /// </returns>
    public MapEnumerator getFieldsEnumerator()
    {
        return fieldsMap.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the starting state of the <c>WrkCtrController</c> class.
    /// </summary>
    /// <remarks>
    ///    The method populates an internal collection of the calling <c>DictField</c> form instances which
    ///    can be bulk edited according to the set of rules.
    /// </remarks>
    protected void init()
    {
        FormRun             callerForm;
        FormDataSource      callerFormDataSource;
        FormDataSource      baseFormDataSource;
        DictTable           dictTable;
        fieldId             currentFieldId;
        WrkCtrBulkEditField wrkCtrBulkEditField;
        int                 dataSourceCount;
        int                 dataSourceIndex;
        int                 fieldMapKey = 0;

        if ( formObject && formObject.args() )
        {
            callerForm = formObject.args().caller();
        }

        if ( callerForm )
        {
            baseFormDataSource = callerForm.dataSource();

            dataSourceCount = callerForm.dataSourceCount();

            for (dataSourceIndex = 1; dataSourceIndex <= dataSourceCount; ++dataSourceIndex)
            {
                callerFormDataSource = callerForm.dataSource(dataSourceIndex);

                if (!this.isInnerJoined(baseFormDataSource, callerFormDataSource))
                {
                    continue; // only process inner-joined datasources
                }

                dictTable = new DictTable( callerFormDataSource.table() );

                if (dictTable && hasTableAccess(dictTable.id()))
                {
                    for ( currentFieldId = dictTable.fieldNext(0); currentFieldId; currentFieldId = dictTable.fieldNext(currentFieldId) )
                    {
                        wrkCtrBulkEditField = WrkCtrBulkEditField::newFromDatasourceField(callerFormDataSource, dictTable.fieldObject(currentFieldId) );

                        if ( wrkCtrBulkEditField.isEditable() )
                        {
                            fieldsMap.insert( fieldMapKey, wrkCtrBulkEditField );
                            fieldMapKey++;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInnerJoined</Name>
				<Source><![CDATA[
    private boolean isInnerJoined(
        FormDataSource    _baseDataSource,
        FormDataSource    _dataSource)
    {
        if (!_dataSource || !_baseDataSource)
        {
            // if one of datasources does not exists it means thay are not inner-joined
            return false;
        }

        if (_dataSource.name() == _baseDataSource.name())
        {
            // we got to the base datasource either via parent datasource relations (transitive inner-join)
            // or we are checking the base datasource itself
            // in both cases we need to process the datasource
            return true;
        }

        if (_dataSource.linkType() != DataSourceLinkTypePropertyValues::Inner)
        {
            return false; // we only interested in inner-joined datasources
        }

        // check if the parenty is inner-joined to the base datasource (transitive inner-join)
        return this.isInnerJoined(_baseDataSource, Global::formGetParentDatasource(_dataSource));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        fieldsMap = new Map(Types::Integer, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onFieldsModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes a <c>WrkCtrBulkEdit</c> form event when a field chosen for bulk edit is modified.
    /// </summary>
    /// <param name="_fieldId">
    ///    The index of the chosen field in the fields list combo box control on the <c>WrkCtrBulkEdit</c>
    ///    form.
    /// </param>
    /// <param name="_isValid">
    ///    A Boolean value that indicates if the new value is valid.
    /// </param>
    /// <param name="_fieldName">
    ///    The name of the chosen field in the fields list combo box control on the <c>WrkCtrBulkEdit</c> form.
    /// </param>
    /// <remarks>
    ///    This method is not supposed to be executed directly as it depends on the internal state of the
    ///    <c>WrkCtrBulkEditFormController</c> class. The reason that the method is public is that it is
    ///    invoked by the <c>WrkCtrBulkEditForm</c> form.
    /// </remarks>
    public void onFieldsModified(   int     _fieldId,
                                    boolean _isValid,
                                    str     _fieldName )
    {
        fieldValid = _isValid && fieldsMap.exists(_fieldId);

        this.formRenderControls();

        if ( !fieldValid )
        {
            throw error(strfmt("@SYS137753",_fieldName));
        }
        else
        {
            selectedField = fieldsMap.lookup(_fieldId);

            this.formSetCurrentValueControl();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onValueModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes a <c>WrkCtrBulkEdit</c> form event when a value of the field chosen for bulk edit is
    ///    modified.
    /// </summary>
    /// <param name="_isValid">
    ///    A Boolean value that indicates if the new value is valid.
    /// </param>
    /// <remarks>
    ///    This method is not supposed to be executed directly as it depends on the internal state of the
    ///    <c>WrkCtrBulkEditFormController</c> class. The reason that the method is public is that it is
    ///    invoked by the <c>WrkCtrBulkEditForm</c> form.
    /// </remarks>
    public void onValueModified(boolean _isValid)
    {
        valueValid = _isValid;

        this.formRenderControls();

        if ( !valueValid )
        {
            throw error(strfmt("@SYS137754",selectedField.label()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormObject</Name>
				<Source><![CDATA[
    public FormRun parmFormObject(FormRun _formObject = formObject )
    {
        formObject = _formObject;
        return formObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WrkCtrBulkEditController construct()
    {
        return new WrkCtrBulkEditController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the <c>WrkCtrBulkEditController</c> class, depending on a form.
    /// </summary>
    /// <param name="_formRun">
    /// The form to use to create the instance.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WrkCtrBulkEditController</c> class.
    /// </returns>
    public static WrkCtrBulkEditController newFromForm( FormRun _formRun )
    {
        WrkCtrBulkEditController controller = WrkCtrBulkEditController::construct();

        controller.parmFormObject(_formRun);
        controller.init();

        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>