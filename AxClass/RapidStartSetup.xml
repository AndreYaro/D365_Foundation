<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RapidStartSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RapidStartSetup
{
    #DEFINE.YES("Yes")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setUpMXCompanyAttributes</Name>
				<Source><![CDATA[
    private void setUpMXCompanyAttributes(CompanyType_MX        companyTypeMX,
                                            Rfc_MX              rfc_MX,
                                            Curp_MX             curp_MX,
                                            StateInscription_MX stateInscription_MX)
    {
        CompanyInfo     companyInfo;
        ttsbegin;
            select forupdate RecId, CompanyType_MX, Rfc_MX, Curp_MX, StateInscription_MX from companyInfo where companyInfo.DataArea == curext();
            if (companyInfo.RecId)
            {
                companyInfo.CompanyType_MX = companyTypeMX;
                companyInfo.Rfc_MX = rfc_MX;
                companyInfo.Curp_MX = curp_MX;
                companyInfo.StateInscription_MX = stateInscription_MX;
                companyInfo.update();
            }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpSACompanyAttributes</Name>
				<Source><![CDATA[
    private void setUpSACompanyAttributes(CompanyBusinessActivityZakat_SA       businessActivity_SA,
                                            CompanyBusinessActivityDescZakat_SA businessActivityDesc_SA,
                                            CompanyFileNumZakat_SA              fileNumber_SA)
    {
        CompanyInfo     companyInfo;
        ttsbegin;
            select forupdate RecId, BusinessActivity_SA, BusinessActivityDesc_SA, FileNumber_SA from companyInfo where companyInfo.DataArea == curext();
            if (companyInfo.RecId)
            {
                companyInfo.BusinessActivity_SA = businessActivity_SA;
                companyInfo.BusinessActivityDesc_SA = businessActivityDesc_SA;
                companyInfo.FileNumber_SA = fileNumber_SA;
                companyInfo.update();
            }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPrevYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the information about periods from the most recent fiscal calendar year to the new fiscal
    /// calendar year at the time a fiscal year is created.
    /// </summary>
    /// <param name="_calendarRecId">
    /// The record ID of a <c>FiscalCalendar</c> record in which the new fiscal calendar year is to be
    /// created.
    /// </param>
    /// <param name="_fiscalYearName">
    /// The name of the fiscal year to be created.
    /// </param>
    /// <param name="_validate">
    /// A Boolean value that indicates whether to validate the parameters for fiscal calendar year;
    /// optional.
    /// </param>
    /// <remarks>
    /// This method is executed if the copy period from most recent fiscal year check box is checked on the
    /// create new fiscal year dialog box.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void copyPrevYear(FiscalCalendarRecId _calendarRecId, FiscalYearName _fiscalYearName, boolean _validate = true)
    {
        FiscalCalendarPeriod        fiscalPeriod,prevFiscalPeriod;
        FiscalCalendarYear          fiscalYear, fiscalCalendarYear, prevFiscalYear;
        LedgerPeriodModuleAccessControl currentLPMAccessControl,prevLPMAccessControl;
        LedgerFiscalCalendarPeriod      currentLFCP, prevLFCP;
        LedgerFiscalCalendarYear        currentLFCY, prevLFCY;

        int                         numberOfDaysInPrevYear;
        int                         numberOfDaysInPrevPeriod;
        boolean                     firstPeriod = true;
        boolean                     openingPeriod = false;
        date                        startDatePeriod, endDatePeriod;
        int                         countYear=0 ;
        Ledger                      ledger;

        if (_validate && !FiscalCalendars::validateCopyPrevYear(_calendarRecId, _fiscalYearName))
            return;

        select firstonly RecId, StartDate, EndDate from prevFiscalYear order by StartDate desc
                where prevFiscalYear.FiscalCalendar == _calendarRecId ;

        numberOfDaysInPrevYear  = (prevFiscalYear.EndDate - prevFiscalYear.StartDate) + 1;

        ttsbegin;

        select firstonly forupdate fiscalYear;
        fiscalYear.FiscalCalendar       = _calendarRecId;
        fiscalYear.StartDate            = prevFiscalYear.EndDate+1;
        fiscalYear.EndDate              = prevFiscalYear.EndDate + numberOfDaysInPrevYear + 1;
        fiscalYear.Name                 = _fiscalYearName;
        fiscalYear.insert();

        if (Ledger::fiscalCalendar(CompanyInfo::current()) == _calendarRecId)
        {
            prevLFCY = LedgerFiscalCalendar::findLedgerYear(prevFiscalYear.RecId, Ledger::current());

            currentLFCY.FiscalCalendarYear = fiscalYear.RecId;
            currentLFCY.Ledger = prevLFCY.Ledger;
            currentLFCY.Status = prevLFCY.Status;
            currentLFCY.insert();
        }

        fiscalCalendarYear = FiscalCalendarYear::findByCalendarYearName(_calendarRecId, _fiscalYearName);

        while select * from prevFiscalPeriod order by StartDate asc
                where prevFiscalPeriod.FiscalCalendarYear == prevFiscalYear.RecId
        {
            fiscalPeriod.FiscalCalendarYear  = fiscalCalendarYear.RecId;
            if (firstPeriod && prevFiscalPeriod.Type       == FiscalPeriodType::Opening)
            {
                fiscalPeriod.StartDate  = fiscalCalendarYear.StartDate;
                fiscalPeriod.EndDate    = fiscalCalendarYear.StartDate;
                startDatePeriod         = fiscalPeriod.StartDate;
                endDatePeriod           = fiscalPeriod.EndDate;
                openingPeriod           = true;
                firstPeriod             = false;
            }
            // TODO : Bug opened by kewilli #3366642
            else if (!enum2int(prevFiscalPeriod.Type)       == enum2int(FiscalPeriodType::Opening) && firstPeriod)
            {
                numberOfDaysInPrevPeriod     = prevFiscalPeriod.EndDate - prevFiscalPeriod.StartDate;
                fiscalPeriod.StartDate       = fiscalCalendarYear.StartDate;
                fiscalPeriod.EndDate         = fiscalCalendarYear.StartDate + numberOfDaysInPrevPeriod;
                startDatePeriod              = fiscalPeriod.StartDate;
                endDatePeriod                = fiscalPeriod.EndDate;
                firstPeriod                  = false;
            }
            else if (openingPeriod && prevFiscalPeriod.Type       != FiscalPeriodType::Opening)
            {
                numberOfDaysInPrevPeriod     = prevFiscalPeriod.EndDate - prevFiscalPeriod.StartDate;
                fiscalPeriod.StartDate       = fiscalCalendarYear.StartDate;
                fiscalPeriod.EndDate         = fiscalCalendarYear.StartDate + numberOfDaysInPrevPeriod;
                startDatePeriod              = fiscalPeriod.StartDate;
                endDatePeriod                = fiscalPeriod.EndDate;
                openingPeriod                = false;
            }
            else if (prevFiscalPeriod.Type       == FiscalPeriodType::Closing)
            {
                fiscalPeriod.StartDate       = endDatePeriod;
                fiscalPeriod.EndDate         = endDatePeriod;
            }
            else
            {
                numberOfDaysInPrevPeriod     = prevFiscalPeriod.EndDate - prevFiscalPeriod.StartDate;
                fiscalPeriod.StartDate       = endDatePeriod + 1;
                fiscalPeriod.EndDate         = fiscalPeriod.StartDate + numberOfDaysInPrevPeriod;
                startDatePeriod              = fiscalPeriod.StartDate;
                endDatePeriod                = fiscalPeriod.EndDate;
            }

            fiscalPeriod.Type               = prevFiscalPeriod.Type;
            fiscalPeriod.Month              = prevFiscalPeriod.Month;
            fiscalPeriod.Quarter            = prevFiscalPeriod.Quarter;
            fiscalPeriod.Name               = prevFiscalPeriod.Name;
            fiscalPeriod.Description        = prevFiscalPeriod.Description;
            fiscalPeriod.ShortName          = prevFiscalPeriod.ShortName;
            fiscalPeriod.FiscalCalendar     = prevFiscalPeriod.FiscalCalendar;
            fiscalPeriod.insert();

            while select RecId, FiscalCalendar from ledger
            where ledger.FiscalCalendar == _calendarRecId
            {
                prevLFCP = LedgerFiscalCalendar::findLedgerPeriod(prevFiscalPeriod.RecId, ledger.RecId);

                currentLFCP.FiscalCalendarPeriod = fiscalPeriod.RecId;
                currentLFCP.Ledger = prevLFCP.Ledger;
                currentLFCP.Status = prevLFCP.Status;
                currentLFCP.insert();

                LedgerFiscalCalendar::createLedgerPeriodPermissions(currentLFCP.RecId);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDocumentTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setup a new document type for a company.
    /// </summary>
    /// <param name="code">
    /// The company code.
    /// </param>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public static void createDocumentTypes(str 250 code)
    {
        DocuType docuType;
        #DEFINE.Document("Document")
        #DEFINE.File("File")
        #DEFINE.Note("Note")
        #DEFINE.URL("URL")

        changeCompany(code)
        {
            if (!DocuType::find(#Document))
            {
                ttsBegin;
                docuType.TypeId = #Document;
                docuType.Name = "";
                //docuType.ActionClassId = 2127;
                docuType.TypeGroup = DocuTypeGroup::Document;
                docuType.FilePlace = DocuFilePlace::Archive;
                docuType.ArchivePath = "";
                docuType.DocuStructureType = DocuStructureType::None;
                docuType.RemoveOption = DocuRemoveOption::DocumentOnly;
                docuType.FileRemovalConfirmation = NoYes::No;
                docuType.insert();
                ttsCommit;
            }

            if (!DocuType::find(#File))
            {
                ttsBegin;
                docuType.TypeId = #File;
                docuType.Name = "";
                //docuType.ActionClassId = 118;
                docuType.TypeGroup = DocuTypeGroup::File;
                docuType.FilePlace = DocuFilePlace::Archive;
                docuType.ArchivePath = "";
                docuType.DocuStructureType = DocuStructureType::None;
                docuType.RemoveOption = DocuRemoveOption::DocumentOnly;
                docuType.FileRemovalConfirmation = NoYes::No;
                docuType.insert();
                ttsCommit;
            }

            if (!DocuType::find(#Note))
            {
                ttsBegin;
                docuType.TypeId = #Note;
                docuType.Name = "";
                //docuType.ActionClassId = 119;
                docuType.TypeGroup = DocuTypeGroup::Note;
                docuType.FilePlace = DocuFilePlace::Database;
                docuType.ArchivePath = "";
                docuType.DocuStructureType = DocuStructureType::None;
                docuType.RemoveOption = DocuRemoveOption::DocumentOnly;
                docuType.FileRemovalConfirmation = NoYes::No;
                docuType.insert();
                ttsCommit;
            }

            if (!DocuType::find(#URL))
            {
                ttsBegin;
                docuType.TypeId = #URL;
                docuType.Name = "";
                //docuType.ActionClassId = 1012886;
                docuType.TypeGroup = DocuTypeGroup::URL;
                docuType.FilePlace = DocuFilePlace::Database;
                docuType.ArchivePath = "";
                docuType.DocuStructureType = DocuStructureType::None;
                docuType.RemoveOption = DocuRemoveOption::DocumentOnly;
                docuType.FileRemovalConfirmation = NoYes::No;
                docuType.insert();
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFiscalCalendar</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static FiscalCalendar createFiscalCalendar(utcDateTime                     start,
                                                      utcdatetime                     end,
                                                      PeriodUnit                      periodUnit,
                                                      int                             periodQuantity,
                                                      int                             numberOfFiscalYears,
                                                      str 250                         fiscalcalendarname)
    {
        FiscalCalendar              fiscalCalendar;
        date                        startdate = DateTimeUtil::date(start);
        date                        enddate = DateTimeUtil::date(end);
        int                         currentNumberOfYears;
        str 250                     nextFiscalYearName;

        fiscalCalendar = FiscalCalendar::findByCalendarId(fiscalcalendarname, true);
        if (fiscalCalendar.RecId > 0)
        {
            FiscalCalendars::deleteYear(fiscalCalendar.RecId, fiscalcalendarname);
        }
        else
        {
            fiscalCalendar.clear();
            ttsBegin;
                fiscalCalendar.CalendarId = fiscalcalendarname;
                fiscalCalendar.Description = fiscalcalendarname;
                fiscalCalendar.insert();
            ttsCommit;
            fiscalCalendar = FiscalCalendar::findByCalendarId(fiscalcalendarname, true);
        }

        FiscalCalendars::createYear(fiscalCalendar.RecId, startdate, enddate, periodQuantity, periodUnit, fiscalcalendarname);

        currentNumberOfYears = 1;
        if (numberOfFiscalYears > 1)
        {
            while (currentNumberOfYears<numberOfFiscalYears)
            {
                nextFiscalYearName = fiscalcalendarname +"_"+ int2str(currentNumberOfYears);
                RapidStartSetup::copyPrevYear(fiscalCalendar.RecId,nextFiscalYearName);
                currentNumberOfYears++;
            }
        }

        return fiscalCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventoryJournalName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void createInventoryJournalName(str 250                              ledgerJournalNameId,
                                                    str 250                             ledgerJournalDescription,
                                                    int64                               numberSequenceScopeRecid,
                                                    InventJournalType                   journalType,
                                                    DetailSummary                       detailSummary,
                                                    JournalVoucherDraw                  journalVoucherDraw,
                                                    InventJournalVoucherChange          inventJournalVoucherChange,
                                                    ItemReservation                     itemReservation)
    {
        NumberSequenceTable         numberSequenceTable;
        InventJournalName           inventJournalName;

        numberSequenceTable = numberSequenceTable::findByNaturalKey(ledgerJournalNameId, numberSequenceScopeRecid);
        inventJournalName = inventJournalName::find(ledgerJournalNameId);
        if (numberSequenceTable.RecId == 0 && inventJournalName.RecId == 0)
        {
            ttsBegin;

                numberSequenceTable.NumberSequence = ledgerJournalNameId;
                numberSequenceTable.Txt = ledgerJournalNameId;
                numberSequenceTable.LatestCleanDateTime = 2000-01-01T00:00:00;
                numberSequenceTable.Lowest = 1;
                numberSequenceTable.Highest = 99999999;
                numberSequenceTable.NextRec = 2;
                numberSequenceTable.Blocked = NoYes::No;
                numberSequenceTable.Format = "########";
                numberSequenceTable.Continuous = NoYes::Yes;
                numberSequenceTable.Cyclic = NoYes::No;
                numberSequenceTable.AnnotatedFormat = "-2    ########";
                numberSequenceTable.CleanAtAccess = NoYes::Yes;
                numberSequenceTable.InUse = NoYes::Yes;
                numberSequenceTable.NoIncrement = NoYes::No;
                numberSequenceTable.NumberSequenceScope = numberSequenceScopeRecid;
                numberSequenceTable.CleanInterval = 24.00;
                numberSequenceTable.AllowChangeUp = NoYes::No;
                numberSequenceTable.AllowChangeDown = NoYes::No;
                numberSequenceTable.Manual = NoYes::No;
                numberSequenceTable.FetchAheadQty = 0;
                numberSequenceTable.FetchAhead = NoYes::No;
                numberSequenceTable.SkipReferenceCheckOnDelete = NoYes::No;
                numberSequenceTable.insert();

                inventJournalName.JournalNameId = ledgerJournalNameId;
                inventJournalName.Description = ledgerJournalDescription;
                inventJournalName.JournalType = journalType;
                inventJournalName.VoucherDraw = journalVoucherDraw;
                inventJournalName.VoucherChange = inventJournalVoucherChange;
                inventJournalName.DetailSummary = detailSummary;
                inventJournalName.DeletePostedLines = NoYes::No;
                inventJournalName.VoucherNumberSequenceTable = numberSequenceTable.RecId;
                inventJournalName.Reservation = itemReservation;
                inventJournalName.insert();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventSite</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void createInventSite(str 250 code, str 250 name)
    {
        InventSite                                      inventSite;
        ReqSitePolicy                                   reqSitePolicy;
        #DEFINE.Internal("Internal")

        changeCompany(code)
        {
            //InventSite
            inventSite.clear();
            ttsBegin;
                inventSite.SiteId = code;
                inventSite.Name = name;
                inventSite.DefaultDimension = 0;
                inventSite.Timezone = Timezone::GMTMINUS0800PACIFICTIME;
                inventSite.OrderEntryDeadlineGroupId = #Internal;
                inventSite.insert();
            ttsCommit;

            reqSitePolicy.clear();
            ttsBegin;
                reqSitePolicy.InventSiteId = code;
                reqSitePolicy.UseTransferJournals = NoYes::No;
                reqSitePolicy.insert();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void createJournalName(str 250                   ledgerJournalNameId,
                                          str 250                   ledgerJournalDescription,
                                          int64                     numberSequenceScopeRecid,
                                          NewVoucher                newVoucher,
                                          LedgerJournalType            journalType,
                                          LedgerJournalACType       ledgerJournalACType,
                                          DetailSummary                detailSummary,
                                          CurrentOperationsTax        postingLayer,
                                          LedgerJournalFeePosting    ledgerJournalFeePosting,
                                          TaxBookTypeJournal        taxBookTypeJournal)
    {
        NumberSequenceTable         numberSequenceTable;
        LedgerJournalName           ledgerJournalName;

        numberSequenceTable = numberSequenceTable::findByNaturalKey(ledgerJournalNameId, numberSequenceScopeRecid);
        ledgerJournalName = LedgerJournalName::find(ledgerJournalNameId);
        if (numberSequenceTable.RecId == 0 && ledgerJournalName.RecId == 0)
        {
            ttsBegin;

                numberSequenceTable.NumberSequence = ledgerJournalNameId;
                numberSequenceTable.Txt = ledgerJournalNameId;
                numberSequenceTable.LatestCleanDateTime = 2000-01-01T00:00:00;
                numberSequenceTable.Lowest = 1;
                numberSequenceTable.Highest = 99999999;
                numberSequenceTable.NextRec = 2;
                numberSequenceTable.Blocked = NoYes::No;
                numberSequenceTable.Format = "########";
                numberSequenceTable.Continuous = NoYes::Yes;
                numberSequenceTable.Cyclic = NoYes::No;
                numberSequenceTable.AnnotatedFormat = "-2    ########";
                numberSequenceTable.CleanAtAccess = NoYes::Yes;
                numberSequenceTable.InUse = NoYes::Yes;
                numberSequenceTable.NoIncrement = NoYes::No;
                numberSequenceTable.NumberSequenceScope = numberSequenceScopeRecid;
                numberSequenceTable.CleanInterval = 24.00;
                numberSequenceTable.AllowChangeUp = NoYes::No;
                numberSequenceTable.AllowChangeDown = NoYes::No;
                numberSequenceTable.Manual = NoYes::No;
                numberSequenceTable.FetchAheadQty = 0;
                numberSequenceTable.FetchAhead = NoYes::No;
                numberSequenceTable.SkipReferenceCheckOnDelete = NoYes::No;
                numberSequenceTable.insert();

                ledgerJournalName.JournalName = ledgerJournalNameId;
                ledgerJournalName.Name = ledgerJournalDescription;
                ledgerJournalName.OffsetLedgerDimension = 0;
                ledgerJournalName.DefaultDimension = 0;
                ledgerJournalName.ApproveActive = NoYes::No;
                ledgerJournalName.NewVoucher = newVoucher;
                ledgerJournalName.JournalType = journalType;
                ledgerJournalName.ApproveGroupId = "";
                ledgerJournalName.OffsetAccountType = ledgerJournalACType;
                ledgerJournalName.FixedExchRate = NoYes::No;
                ledgerJournalName.DetailSummary = detailSummary;
                ledgerJournalName.FixedOffsetAccount = NoYes::No;
                ledgerJournalName.CurrentOperationsTax = postingLayer;
                ledgerJournalName.LedgerJournalInclTax = NoYes::Yes;
                ledgerJournalName.LedgerJournalFeePosting = ledgerJournalFeePosting;
                ledgerJournalName.EndBalanceControl = NoYes::No;
                ledgerJournalName.TaxBookTypeJournal = taxBookTypeJournal;
                ledgerJournalName.GeneratePayments_IT = NoYes::No;
                ledgerJournalName.VoucherAllocatedAtPosting = NoYes::No;
                ledgerJournalName.BlockUserGroupId = "";
                ledgerJournalName.LinesLimitBeforeDistribution = 0;
                ledgerJournalName.WorkflowApproval = NoYes::No;
                ledgerJournalName.Configuration = "";
                ledgerJournalName.NumberSequenceTable = numberSequenceTable.RecId;
                ledgerJournalName.TaxHideAmountFields = NoYes::No;
                ledgerJournalName.insert();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalNames</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void createJournalNames(str 250 code)
    {
        #DEFINE.1("GenJrn")
        #DEFINE.2("General Journal")
        #DEFINE.3("Alloc")
        #DEFINE.4("Allocations")
        #DEFINE.5("FAAcq")
        #DEFINE.6("FA Acquisition Journal")
        #DEFINE.7("FAAcqAdj")
        #DEFINE.8("FA Acquisition Adjustment Journal")
        #DEFINE.9("FABudget")
        #DEFINE.10("FA Budget")
        #DEFINE.11("FADep")
        #DEFINE.12("FA Depreciation")
        #DEFINE.13("FADepAdj")
        #DEFINE.14("FA Depreciation Adjustment")
        #DEFINE.15("FADepBook")
        #DEFINE.16("FA Depreciation Book")
        #DEFINE.17("FADepTax")
        #DEFINE.18("FA Depreciation Tax Journal")
        #DEFINE.19("FAExtDep")
        #DEFINE.20("FA Extraordinary Depreciation")
        #DEFINE.21("FADisScrap")
        #DEFINE.22("FA Disposal Scrap Journal")
        #DEFINE.23("FADIsSale")
        #DEFINE.24("FA Disposal Sale Journal")
        #DEFINE.25("FAReval")
        #DEFINE.26("FA Revaluation Journal")
        #DEFINE.27("FATrans")
        #DEFINE.28("FA Transfer Journal")
        #DEFINE.29("FAWD")
        #DEFINE.30("FA Write Down Journal")
        #DEFINE.31("FAWU")
        #DEFINE.32("FA Write Up Journal")
        #DEFINE.33("APInvoice")
        #DEFINE.34("AP Invoice")
        #DEFINE.35("APInvApp")
        #DEFINE.36("AP Invoice Approval")
        #DEFINE.37("APInvReg")
        #DEFINE.38("AP Invoice Register")
        #DEFINE.39("VendPay")
        #DEFINE.40("Vendor payment")
        #DEFINE.41("CustPay")
        #DEFINE.42("Customer payment")
        #DEFINE.43("Chk_Rev")
        #DEFINE.44("Check reversal")
        #DEFINE.45("Dep_Rev")
        #DEFINE.46("Deposit reversal")
        #DEFINE.47("Write-Off")
        #DEFINE.48("Write-off customer debt")
        #DEFINE.49("IBOM")
        #DEFINE.50("Inventory BOM Journal")
        #DEFINE.51("ICnt")
        #DEFINE.52("Inventory Counting Journal")
        #DEFINE.53("IFA")
        #DEFINE.54("Inventory Fixed Assets Journal")
        #DEFINE.55("IMov")
        #DEFINE.56("Inventory Movement Journal")
        #DEFINE.57("IPL")
        #DEFINE.58("Inventory Profit & Loss Journal")
        #DEFINE.59("ITag")
        #DEFINE.60("Inventory Tag Counting Journal")
        #DEFINE.61("ITrf")
        #DEFINE.62("Inventory Transfer Journal")

        #DEFINE.63("Finish")
        #DEFINE.64("Report as finished journal")

        #DEFINE.65("Job")
        #DEFINE.66("Job Card Journal")

        #DEFINE.67("Pick")
        #DEFINE.68("Pick List Journal")

        #DEFINE.69("Route")
        #DEFINE.70("Route Card Journal")

        #DEFINE.71("ProjItem")
        #DEFINE.72("Project Item Journal")

        #DEFINE.73("Hours")
        #DEFINE.74("Hours No Approval Journal")

        #DEFINE.75("BegBal")
        #DEFINE.76("Beginning Balances Journal")

        #DEFINE.77("Fee")
        #DEFINE.78("Fee Journal")

        #DEFINE.79("PrjJrn")
        #DEFINE.80("Project Journal")

        #DEFINE.81("ProjServ")
        #DEFINE.82("Project Service Item Journal")

        NumberSequenceScope         numberSequenceScope;

        numberSequenceScope = RapidStartSetup::createNumberSequenceScopeForCompany(code);
        changeCompany(code)
        {
            RapidStartSetup::createJournalName(#1, #2,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Daily, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#3, #4,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Allocation, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#5, #6,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Assets, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#7, #8,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Assets, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#9, #10,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::AssetBudgets, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#11, #12,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Assets, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#13, #14,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Assets, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#15, #16,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Assets, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#17, #18,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Assets, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#19, #20,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Assets, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#21, #22,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Assets, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#23, #24,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Assets, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#25, #26,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Assets, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#27, #28,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Assets, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#29, #30,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Assets, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#31, #32,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Assets, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#33, #34,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::VendInvoiceRegister, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#35, #36,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Approval, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#37, #38,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::VendInvoiceRegister, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#39, #40,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Payment, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#41, #42,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::CustPayment, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#43, #44,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::BankChequeReversal, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#45, #46,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::BankDepositPaymCancel, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#47, #48,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Daily, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);
            RapidStartSetup::createJournalName(#79, #80,numberSequenceScope.RecId,NewVoucher::BalanceSheet, LedgerJournalType::Cost, LedgerJournalACType::Ledger, DetailSummary::Detail, CurrentOperationsTax::Current, LedgerJournalFeePosting::Keep, TaxBookTypeJournal::Empty);

            RapidStartSetup::createInventoryJournalName(#49, #50, numberSequenceScope.RecId, InventJournalType::BOM, DetailSummary::Summary, JournalVoucherDraw::Post, InventJournalVoucherChange::DateChange, ItemReservation::None);
            RapidStartSetup::createInventoryJournalName(#51, #52, numberSequenceScope.RecId, InventJournalType::Count, DetailSummary::Summary, JournalVoucherDraw::Post, InventJournalVoucherChange::DateChange, ItemReservation::None);
            RapidStartSetup::createInventoryJournalName(#53, #54, numberSequenceScope.RecId, InventJournalType::Asset, DetailSummary::Summary, JournalVoucherDraw::Post, InventJournalVoucherChange::DateChange, ItemReservation::None);
            RapidStartSetup::createInventoryJournalName(#55, #56, numberSequenceScope.RecId, InventJournalType::Movement, DetailSummary::Summary, JournalVoucherDraw::Post, InventJournalVoucherChange::DateChange, ItemReservation::None);
            RapidStartSetup::createInventoryJournalName(#57, #58, numberSequenceScope.RecId, InventJournalType::LossProfit, DetailSummary::Summary, JournalVoucherDraw::Post, InventJournalVoucherChange::DateChange, ItemReservation::None);
            RapidStartSetup::createInventoryJournalName(#59, #60, numberSequenceScope.RecId, InventJournalType::TagCounting, DetailSummary::Summary, JournalVoucherDraw::Post, InventJournalVoucherChange::DateChange, ItemReservation::None);
            RapidStartSetup::createInventoryJournalName(#61, #62, numberSequenceScope.RecId, InventJournalType::Transfer, DetailSummary::Summary, JournalVoucherDraw::Post, InventJournalVoucherChange::DateChange, ItemReservation::None);
            RapidStartSetup::createInventoryJournalName(#71, #72, numberSequenceScope.RecId, InventJournalType::project, DetailSummary::Detail, JournalVoucherDraw::Post, InventJournalVoucherChange::DateChange, ItemReservation::None);
            RapidStartSetup::createInventoryJournalName(#81, #82, numberSequenceScope.RecId, InventJournalType::project, DetailSummary::Detail, JournalVoucherDraw::Post, InventJournalVoucherChange::DateChange, ItemReservation::None);

            RapidStartSetup::createProductionJournalName(#63, #64, numberSequenceScope.RecId, ProdJournalType::ReportFinished, DetailSummary::Summary, JournalVoucherDraw::Post, ProdJournalVoucherChange::DateProdChange);
            RapidStartSetup::createProductionJournalName(#65, #66, numberSequenceScope.RecId, ProdJournalType::JobCard, DetailSummary::Summary, JournalVoucherDraw::Post, ProdJournalVoucherChange::DateProdChange);
            RapidStartSetup::createProductionJournalName(#67, #68, numberSequenceScope.RecId, ProdJournalType::Picklist, DetailSummary::Summary, JournalVoucherDraw::Post, ProdJournalVoucherChange::DateProdChange);
            RapidStartSetup::createProductionJournalName(#69, #70, numberSequenceScope.RecId, ProdJournalType::RouteCard, DetailSummary::Summary, JournalVoucherDraw::Post, ProdJournalVoucherChange::DateProdChange);

            RapidStartSetup::createProjectJournalName(#73, #74, numberSequenceScope.RecId, ProjJournalType::Hour, DetailSummary::Detail, JournalVoucherDraw::Entering, ProjJournalVoucherChange::DateEmplChange, ProjJournalVoucherDateChange::ProjTransDate);
            RapidStartSetup::createProjectJournalName(#75, #76, numberSequenceScope.RecId, ProjJournalType::BegBalance, DetailSummary::Detail, JournalVoucherDraw::Entering, ProjJournalVoucherChange::DateChange, ProjJournalVoucherDateChange::ProjPeriodEnd);
            RapidStartSetup::createProjectJournalName(#77, #78, numberSequenceScope.RecId, ProjJournalType::Revenue, DetailSummary::Detail, JournalVoucherDraw::Entering, ProjJournalVoucherChange::DateChange, ProjJournalVoucherDateChange::ProjTransDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNumberSequenceScopeForCompany</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static NumberSequenceScope createNumberSequenceScopeForCompany(str 250    code)
    {
        NumberSequenceScope             numberSequenceScope;

        select firstOnly RecId from numberSequenceScope where numberSequenceScope.DataArea == code;
        if (numberSequenceScope.RecId == 0)
        {
            ttsBegin;
                numberSequenceScope.DataArea = code;
                numberSequenceScope.insert();
            ttsCommit;
        }

        return numberSequenceScope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductionJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Production and the required number sequences.
    /// </summary>
    /// <param name="ledgerJournalNameId">
    /// Name of the LedgerJournal.
    /// </param>
    /// <param name="ledgerJournalDescription">
    /// The Ledger Journal Description.
    /// </param>
    /// <param name="numberSequenceScopeRecid">
    /// The Number Sequences scope.
    /// </param>
    /// <param name="journalType">
    /// The type of Journal.
    /// </param>
    /// <param name="detailSummary">
    /// The summary for the journal.
    /// </param>
    /// <param name="journalVoucherDraw">
    /// The JournalVoucherDraw enumeration that controls when a new voucher number will be automatically picked.
    /// </param>
    /// <param name="prodJournalVoucherChange">
    /// The ProdJournalVoucherChange enumeration that controls when a new voucher will be allocated.
    /// </param>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public static void createProductionJournalName(str 250                              ledgerJournalNameId,
                                                    str 250                             ledgerJournalDescription,
                                                    int64                               numberSequenceScopeRecid,
                                                    ProdJournalType                     journalType,
                                                    DetailSummary                       detailSummary,
                                                    JournalVoucherDraw                  journalVoucherDraw,
                                                    ProdJournalVoucherChange            prodJournalVoucherChange)
    {
        NumberSequenceTable         numberSequenceTable;
        ProdJournalName             prodJournalName;

        numberSequenceTable = numberSequenceTable::findByNaturalKey(ledgerJournalNameId, numberSequenceScopeRecid);
        prodJournalName = ProdJournalName::find(ledgerJournalNameId);
        if (numberSequenceTable.RecId == 0 && prodJournalName.RecId == 0)
        {
            ttsBegin;

                numberSequenceTable.NumberSequence = ledgerJournalNameId;
                numberSequenceTable.Txt = ledgerJournalNameId;
                numberSequenceTable.LatestCleanDateTime = 2000-01-01T00:00:00;
                numberSequenceTable.Lowest = 1;
                numberSequenceTable.Highest = 99999999;
                numberSequenceTable.NextRec = 2;
                numberSequenceTable.Blocked = NoYes::No;
                numberSequenceTable.Format = "########";
                numberSequenceTable.Continuous = NoYes::Yes;
                numberSequenceTable.Cyclic = NoYes::No;
                numberSequenceTable.AnnotatedFormat = "-2    ########";
                numberSequenceTable.CleanAtAccess = NoYes::Yes;
                numberSequenceTable.InUse = NoYes::Yes;
                numberSequenceTable.NoIncrement = NoYes::No;
                numberSequenceTable.NumberSequenceScope = numberSequenceScopeRecid;
                numberSequenceTable.CleanInterval = 24.00;
                numberSequenceTable.AllowChangeUp = NoYes::No;
                numberSequenceTable.AllowChangeDown = NoYes::No;
                numberSequenceTable.Manual = NoYes::No;
                numberSequenceTable.FetchAheadQty = 0;
                numberSequenceTable.FetchAhead = NoYes::No;
                numberSequenceTable.SkipReferenceCheckOnDelete = NoYes::No;
                numberSequenceTable.insert();

                prodJournalName.JournalNameId = ledgerJournalNameId;
                prodJournalName.Description = ledgerJournalDescription;
                prodJournalName.JournalType = journalType;
                prodJournalName.VoucherDraw = journalVoucherDraw;
                prodJournalName.VoucherChange = prodJournalVoucherChange;
                prodJournalName.DetailSummary = detailSummary;
                prodJournalName.DeletePostedLines = NoYes::No;
                prodJournalName.VoucherSeqRecId = numberSequenceTable.RecId;
                prodJournalName.insert();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjectJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the ProjectJournal and the required number sequences.
    /// </summary>
    /// <param name="ledgerJournalNameId">
    /// Name of the LedgerJournal.
    /// </param>
    /// <param name="ledgerJournalDescription">
    /// The Ledger Journal Description.
    /// </param>
    /// <param name="numberSequenceScopeRecid">
    /// The Number Sequences scope.
    /// </param>
    /// <param name="journalType">
    /// The type of journal.
    /// </param>
    /// <param name="detailSummary">
    /// The summary for the journal.
    /// </param>
    /// <param name="journalVoucherDraw">
    /// The JournalVoucherDraw enumeration that controls when a new voucher number will be automatically picked.
    /// </param>
    /// <param name="projJournalVoucherChange">
    /// The ProjJournalVoucherChange enumeration that controls when a new voucher will be allocated.
    /// </param>
    /// <param name="projJournalVoucherDateChange">
    /// The ProjJournalVoucherDateChange enumeration that controls how the voucher date is set.
    /// </param>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public static void createProjectJournalName(str 250                                 ledgerJournalNameId,
                                                    str 250                             ledgerJournalDescription,
                                                    int64                               numberSequenceScopeRecid,
                                                    ProjJournalType                     journalType,
                                                    DetailSummary                       detailSummary,
                                                    JournalVoucherDraw                  journalVoucherDraw,
                                                    ProjJournalVoucherChange            projJournalVoucherChange,
                                                    ProjJournalVoucherDateChange        projJournalVoucherDateChange)
    {
        NumberSequenceTable         numberSequenceTable;
        ProjJournalName             projJournalName;

        numberSequenceTable = numberSequenceTable::findByNaturalKey(ledgerJournalNameId, numberSequenceScopeRecid);
        projJournalName = ProjJournalName::find(ledgerJournalNameId);
        if (numberSequenceTable.RecId == 0 && projJournalName.RecId == 0)
        {
            ttsBegin;

                numberSequenceTable.NumberSequence = ledgerJournalNameId;
                numberSequenceTable.Txt = ledgerJournalNameId;
                numberSequenceTable.LatestCleanDateTime = 2000-01-01T00:00:00;
                numberSequenceTable.Lowest = 1;
                numberSequenceTable.Highest = 99999999;
                numberSequenceTable.NextRec = 2;
                numberSequenceTable.Blocked = NoYes::No;
                numberSequenceTable.Format = "########";
                numberSequenceTable.Continuous = NoYes::Yes;
                numberSequenceTable.Cyclic = NoYes::No;
                numberSequenceTable.AnnotatedFormat = "-2    ########";
                numberSequenceTable.CleanAtAccess = NoYes::Yes;
                numberSequenceTable.InUse = NoYes::Yes;
                numberSequenceTable.NoIncrement = NoYes::No;
                numberSequenceTable.NumberSequenceScope = numberSequenceScopeRecid;
                numberSequenceTable.CleanInterval = 24.00;
                numberSequenceTable.AllowChangeUp = NoYes::No;
                numberSequenceTable.AllowChangeDown = NoYes::No;
                numberSequenceTable.Manual = NoYes::No;
                numberSequenceTable.FetchAheadQty = 0;
                numberSequenceTable.FetchAhead = NoYes::No;
                numberSequenceTable.SkipReferenceCheckOnDelete = NoYes::No;
                numberSequenceTable.insert();

                projJournalName.JournalNameId = ledgerJournalNameId;
                projJournalName.Description = ledgerJournalDescription;
                projJournalName.JournalType = journalType;
                projJournalName.VoucherDraw = journalVoucherDraw;
                projJournalName.VoucherChange = projJournalVoucherChange;
                projJournalName.DetailSummary = detailSummary;
                projJournalName.VoucherNumberSequenceTable = numberSequenceTable.RecId;
                projJournalName.VoucherDateChange = projJournalVoucherDateChange;
                projJournalName.TaxBookTypeJournal = TaxBookTypeJournal::Empty;
                projJournalName.insert();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkCalendars</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create work calendars for a given company.
    /// </summary>
    /// <param name="code">
    /// Company code for the company.
    /// </param>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public static void createWorkCalendars(str 250 code)
    {
        WorkCalendarTable workCalendarTable;
        #DEFINE.BaseCtrl("BaseCtrl")
        #DEFINE.BaseCtrlDesc("Base Control Calendar")
        #DEFINE.Standard("Standard")
        #DEFINE.StandardDesc("Standard Calendar")

        changeCompany(code)
        {
            if (!WorkCalendarTable::find(#BaseCtrl))
            {
                ttsBegin;
                workCalendarTable.Name = #BaseCtrlDesc;
                workCalendarTable.BasicCalendarId = "";
                workCalendarTable.CalendarId = #BaseCtrl;
                workCalendarTable.StandardWorkDayHours = 0.00;
                workCalendarTable.insert();
                ttsCommit;
            }
            if (!WorkCalendarTable::find(#Standard))
            {
                ttsBegin;
                workCalendarTable.Name = #StandardDesc;
                workCalendarTable.BasicCalendarId = #BaseCtrl;
                workCalendarTable.CalendarId = #Standard;
                workCalendarTable.StandardWorkDayHours = 8.00;
                workCalendarTable.insert();
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateNumberSequences</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void generateNumberSequences(str 250 code,
                                               str 10 _generateSequences = #YES)
    {
        changeCompany(code)
        if (_generateSequences == #YES)
        {
            NumberSequenceTable::autoCreate(352);
            NumberSequenceTable::autoCreate(673);
            NumberSequenceTable::autoCreate(5378);
            NumberSequenceTable::autoCreate(5125);
            NumberSequenceTable::autoCreate(8216);
            NumberSequenceTable::autoCreate(6370);
            NumberSequenceTable::autoCreate(12306);
            NumberSequenceTable::autoCreate(11346);
            //NumberSequenceTable::autoCreate(100409);
            NumberSequenceTable::autoCreate(7771);
            NumberSequenceTable::autoCreate(3817);
            NumberSequenceTable::autoCreate(14738);
            NumberSequenceTable::autoCreate(13734);
            NumberSequenceTable::autoCreate(13779);
            NumberSequenceTable::autoCreate(13992);
            NumberSequenceTable::autoCreate(13601);
            NumberSequenceTable::autoCreate(13604);
            NumberSequenceTable::autoCreate(267, null, '', NoYes::No, "########");
            NumberSequenceTable::autoCreate(58);
            NumberSequenceTable::autoCreate(1633);
            NumberSequenceTable::autoCreate(287);
            NumberSequenceTable::autoCreate(4030);
            NumberSequenceTable::autoCreate(4084);
            NumberSequenceTable::autoCreate(4185);
            NumberSequenceTable::autoCreate(5347);
            NumberSequenceTable::autoCreate(5923);
            NumberSequenceTable::autoCreate(6348);
            NumberSequenceTable::autoCreate(2655);
            NumberSequenceTable::autoCreate(13509);
            NumberSequenceTable::autoCreate(1167);
            NumberSequenceTable::autoCreate(1637);
            NumberSequenceTable::autoCreate(5103);
            NumberSequenceTable::autoCreate(293);
            NumberSequenceTable::autoCreate(1630);
            NumberSequenceTable::autoCreate(4217);
            NumberSequenceTable::autoCreate(9851);
            NumberSequenceTable::autoCreate(9850);
            NumberSequenceTable::autoCreate(6701);
            NumberSequenceTable::autoCreate(5175);
            NumberSequenceTable::autoCreate(4943);
            NumberSequenceTable::autoCreate(13995);
            NumberSequenceTable::autoCreate(99);
            NumberSequenceTable::autoCreate(1625);
            NumberSequenceTable::autoCreate(1299);
            NumberSequenceTable::autoCreate(1631);
            NumberSequenceTable::autoCreate(61);
            NumberSequenceTable::autoCreate(211);
            NumberSequenceTable::autoCreate(1184);
            NumberSequenceTable::autoCreate(1636);
            NumberSequenceTable::autoCreate(3471);
            NumberSequenceTable::autoCreate(1629);
            NumberSequenceTable::autoCreate(1632);
            NumberSequenceTable::autoCreate(1634);
            NumberSequenceTable::autoCreate(1635);
            NumberSequenceTable::autoCreate(1638);
            NumberSequenceTable::autoCreate(1646);
            NumberSequenceTable::autoCreate(1647);
            NumberSequenceTable::autoCreate(2094);
            NumberSequenceTable::autoCreate(3661);
            NumberSequenceTable::autoCreate(1785);
            NumberSequenceTable::autoCreate(1787);
            NumberSequenceTable::autoCreate(1786);
            NumberSequenceTable::autoCreate(1620);
            NumberSequenceTable::autoCreate(1621);
            NumberSequenceTable::autoCreate(7522);
            NumberSequenceTable::autoCreate(1622);
            NumberSequenceTable::autoCreate(4348);
            NumberSequenceTable::autoCreate(13907);
            NumberSequenceTable::autoCreate(13908);
            NumberSequenceTable::autoCreate(9860);
            NumberSequenceTable::autoCreate(602);
            NumberSequenceTable::autoCreate(1639);
            NumberSequenceTable::autoCreate(548);
            NumberSequenceTable::autoCreate(3472);
            NumberSequenceTable::autoCreate(1641);
            NumberSequenceTable::autoCreate(1642);
            NumberSequenceTable::autoCreate(1643);
            NumberSequenceTable::autoCreate(3660);
            NumberSequenceTable::autoCreate(14762);
            NumberSequenceTable::autoCreate(473);
            NumberSequenceTable::autoCreate(464);
            NumberSequenceTable::autoCreate(2599);
            NumberSequenceTable::autoCreate(460);
            NumberSequenceTable::autoCreate(316);
            NumberSequenceTable::autoCreate(80);
            NumberSequenceTable::autoCreate(1413);
            NumberSequenceTable::autoCreate(348);
            NumberSequenceTable::autoCreate(256);
            NumberSequenceTable::autoCreate(1619);
            NumberSequenceTable::autoCreate(1614);
            NumberSequenceTable::autoCreate(1612);
            NumberSequenceTable::autoCreate(1618);
            NumberSequenceTable::autoCreate(2215);
            NumberSequenceTable::autoCreate(1500);
            NumberSequenceTable::autoCreate(11450);
            NumberSequenceTable::autoCreate(5573);
            NumberSequenceTable::autoCreate(5271);
            NumberSequenceTable::autoCreate(5443);
            NumberSequenceTable::autoCreate(5110);
            NumberSequenceTable::autoCreate(7000);
            NumberSequenceTable::autoCreate(11449);
            NumberSequenceTable::autoCreate(12413);
            NumberSequenceTable::autoCreate(450);
            NumberSequenceTable::autoCreate(448);
            NumberSequenceTable::autoCreate(1450);
            NumberSequenceTable::autoCreate(12011);
            NumberSequenceTable::autoCreate(13425);
            NumberSequenceTable::autoCreate(13426);
            NumberSequenceTable::autoCreate(13427);
            NumberSequenceTable::autoCreate(260);
            NumberSequenceTable::autoCreate(582);
            NumberSequenceTable::autoCreate(1564);
            NumberSequenceTable::autoCreate(236);
            NumberSequenceTable::autoCreate(3668);
            NumberSequenceTable::autoCreate(1603);
            NumberSequenceTable::autoCreate(1604);
            NumberSequenceTable::autoCreate(1605);
            NumberSequenceTable::autoCreate(5900);
            NumberSequenceTable::autoCreate(255);
            NumberSequenceTable::autoCreate(488);
            NumberSequenceTable::autoCreate(2132);
            NumberSequenceTable::autoCreate(3999);
            NumberSequenceTable::autoCreate(4065);
            NumberSequenceTable::autoCreate(4851);
            NumberSequenceTable::autoCreate(4852);
            NumberSequenceTable::autoCreate(4861);
            NumberSequenceTable::autoCreate(39);
            NumberSequenceTable::autoCreate(7620);
            NumberSequenceTable::autoCreate(415);
            NumberSequenceTable::autoCreate(467);
            //NumberSequenceTable::autoCreate(100227);
            NumberSequenceTable::autoCreate(432);
            NumberSequenceTable::autoCreate(430);
            NumberSequenceTable::autoCreate(1589);
            NumberSequenceTable::autoCreate(428);
            NumberSequenceTable::autoCreate(1590);
            NumberSequenceTable::autoCreate(6762);
            NumberSequenceTable::autoCreate(7001);
            NumberSequenceTable::autoCreate(7010);
            NumberSequenceTable::autoCreate(11091);
            NumberSequenceTable::autoCreate(252);
            NumberSequenceTable::autoCreate(250);
            NumberSequenceTable::autoCreate(1627);
            NumberSequenceTable::autoCreate(1628);
            NumberSequenceTable::autoCreate(3759);
            NumberSequenceTable::autoCreate(13784);
            NumberSequenceTable::autoCreate(13820);
            NumberSequenceTable::autoCreate(1357);
            NumberSequenceTable::autoCreate(440);
            NumberSequenceTable::autoCreate(11640);
            NumberSequenceTable::autoCreate(1613);
            NumberSequenceTable::autoCreate(1371);
            NumberSequenceTable::autoCreate(1608);
            NumberSequenceTable::autoCreate(1616);
            NumberSequenceTable::autoCreate(1610);
            NumberSequenceTable::autoCreate(1623);
            NumberSequenceTable::autoCreate(1615);
            NumberSequenceTable::autoCreate(1609);
            NumberSequenceTable::autoCreate(1617);
            NumberSequenceTable::autoCreate(1611);
            NumberSequenceTable::autoCreate(1359);
            NumberSequenceTable::autoCreate(1382);
            NumberSequenceTable::autoCreate(1870);
            NumberSequenceTable::autoCreate(11523);
            NumberSequenceTable::autoCreate(1518);
            NumberSequenceTable::autoCreate(1547);
            NumberSequenceTable::autoCreate(1533);
            NumberSequenceTable::autoCreate(1694);
            NumberSequenceTable::autoCreate(1539);
            NumberSequenceTable::autoCreate(1523);
            NumberSequenceTable::autoCreate(1626);
            NumberSequenceTable::autoCreate(13777);
            NumberSequenceTable::autoCreate(6418);
            NumberSequenceTable::autoCreate(2462);
            NumberSequenceTable::autoCreate(5176);
            NumberSequenceTable::autoCreate(228);
            NumberSequenceTable::autoCreate(301);
            NumberSequenceTable::autoCreate(2165);
            NumberSequenceTable::autoCreate(2256);
            NumberSequenceTable::autoCreate(3749);
            NumberSequenceTable::autoCreate(4092);
            NumberSequenceTable::autoCreate(4124);
            NumberSequenceTable::autoCreate(1540);
            NumberSequenceTable::autoCreate(2069);
            NumberSequenceTable::autoCreate(2556);
            NumberSequenceTable::autoCreate(4109);
            NumberSequenceTable::autoCreate(5193);
            NumberSequenceTable::autoCreate(4244);
            NumberSequenceTable::autoCreate(4271);
            NumberSequenceTable::autoCreate(4245);
            NumberSequenceTable::autoCreate(2330);
            NumberSequenceTable::autoCreate(5273);
            NumberSequenceTable::autoCreate(2331);
            NumberSequenceTable::autoCreate(8018);
            NumberSequenceTable::autoCreate(8712);
            NumberSequenceTable::autoCreate(8030);
            NumberSequenceTable::autoCreate(8889);
            NumberSequenceTable::autoCreate(6485);
            NumberSequenceTable::autoCreate(407);
            NumberSequenceTable::autoCreate(11354);
            NumberSequenceTable::autoCreate(13347);
            NumberSequenceTable::autoCreate(11538);
            NumberSequenceTable::autoCreate(8207);
            NumberSequenceTable::autoCreate(8188);
            NumberSequenceTable::autoCreate(8239);
            NumberSequenceTable::autoCreate(8285);
            NumberSequenceTable::autoCreate(8564);
            NumberSequenceTable::autoCreate(8617);
            NumberSequenceTable::autoCreate(8608);
            NumberSequenceTable::autoCreate(8789);
            NumberSequenceTable::autoCreate(8845);
            NumberSequenceTable::autoCreate(8857);
            NumberSequenceTable::autoCreate(9255);
            NumberSequenceTable::autoCreate(8640);
            NumberSequenceTable::autoCreate(5250);
            NumberSequenceTable::autoCreate(5505);
            NumberSequenceTable::autoCreate(9133);
            NumberSequenceTable::autoCreate(9068);
            NumberSequenceTable::autoCreate(9150);
            NumberSequenceTable::autoCreate(9137);
            NumberSequenceTable::autoCreate(9143);
            NumberSequenceTable::autoCreate(9371);
            NumberSequenceTable::autoCreate(9374);
            NumberSequenceTable::autoCreate(13187);
            NumberSequenceTable::autoCreate(8374);
            NumberSequenceTable::autoCreate(8352);
            NumberSequenceTable::autoCreate(8319);
            NumberSequenceTable::autoCreate(9338);
            NumberSequenceTable::autoCreate(7317);
            NumberSequenceTable::autoCreate(4675);
            NumberSequenceTable::autoCreate(4683);
            NumberSequenceTable::autoCreate(4688);
            /*NumberSequenceTable::autoCreate(100383);
            NumberSequenceTable::autoCreate(4617);
            NumberSequenceTable::autoCreate(10761);
            NumberSequenceTable::autoCreate(5123);
            NumberSequenceTable::autoCreate(850);
            NumberSequenceTable::autoCreate(7041);
            NumberSequenceTable::autoCreate(6975);
            NumberSequenceTable::autoCreate(4873);
            NumberSequenceTable::autoCreate(6586);
            NumberSequenceTable::autoCreate(5393);
            NumberSequenceTable::autoCreate(5397);
            NumberSequenceTable::autoCreate(306);
            NumberSequenceTable::autoCreate(6742);
            NumberSequenceTable::autoCreate(6462);
            NumberSequenceTable::autoCreate(6947);
            NumberSequenceTable::autoCreate(6939);
            NumberSequenceTable::autoCreate(6944);
            NumberSequenceTable::autoCreate(6943);
            NumberSequenceTable::autoCreate(11846);
            NumberSequenceTable::autoCreate(12447);
            NumberSequenceTable::autoCreate(6746);
            NumberSequenceTable::autoCreate(494);
            NumberSequenceTable::autoCreate(13866);*/
            NumberSequenceTable::autoCreate(548);
            NumberSequenceTable::autoCreate(9860);
            NumberSequenceTable::autoCreate(10076);
            NumberSequenceTable::autoCreate(13246);
            NumberSequenceTable::autoCreate(16853);
            NumberSequenceTable::autoCreate(19524);
            NumberSequenceTable::autoCreate(101300);
            NumberSequenceTable::autoCreate(6996);
            NumberSequenceTable::autoCreate(15960);
            NumberSequenceTable::autoCreate(15960);
            NumberSequenceTable::autoCreate(15923);
            NumberSequenceTable::autoCreate(15923);
            NumberSequenceTable::autoCreate(15923);
            NumberSequenceTable::autoCreate(15960);
            NumberSequenceTable::autoCreate(15960);
            NumberSequenceTable::autoCreate(15923);

            if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)))
            {
                NumberSequenceTable::autoCreate(1620);
                NumberSequenceTable::autoCreate(1621);
                NumberSequenceTable::autoCreate(1622);
                NumberSequenceTable::autoCreate(1785);
                NumberSequenceTable::autoCreate(1786);
                NumberSequenceTable::autoCreate(1787);
                NumberSequenceTable::autoCreate(4348);
                NumberSequenceTable::autoCreate(9707);
                NumberSequenceTable::autoCreate(9708);
                NumberSequenceTable::autoCreate(13907);
                NumberSequenceTable::autoCreate(13908);
                NumberSequenceTable::autoCreate(14890);
                NumberSequenceTable::autoCreate(16662);
                NumberSequenceTable::autoCreate(16673);
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(LedgerBasic)))
            {
                NumberSequenceTable::autoCreate(602);
                NumberSequenceTable::autoCreate(1639);
                NumberSequenceTable::autoCreate(1641);
                NumberSequenceTable::autoCreate(1642);
                NumberSequenceTable::autoCreate(1643);
                NumberSequenceTable::autoCreate(7522);
                NumberSequenceTable::autoCreate(13066);
                NumberSequenceTable::autoCreate(13251);
                NumberSequenceTable::autoCreate(16515);
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(LedgerBasicSalesTax)))
            {
                NumberSequenceTable::autoCreate(16252);
                NumberSequenceTable::autoCreate(16256);
                NumberSequenceTable::autoCreate(16263);
                NumberSequenceTable::autoCreate(16621);
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(Bank)))
            {
                NumberSequenceTable::autoCreate(16288);
                NumberSequenceTable::autoCreate(16290);
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(VendPromissoryNote)))
            {
                NumberSequenceTable::autoCreate(3472);
                NumberSequenceTable::autoCreate(3660);
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(CzCustVendAdvanceInvoices)))
            {
                NumberSequenceTable::autoCreate(16762);
            }

            /*if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                NumberSequenceTable::autoCreate(102026);
                NumberSequenceTable::autoCreate(102044);
            }*/

            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                NumberSequenceTable::autoCreate(17018);
                NumberSequenceTable::autoCreate(17141);
                NumberSequenceTable::autoCreate(17148);
                NumberSequenceTable::autoCreate(17388);
                NumberSequenceTable::autoCreate(17107);
                NumberSequenceTable::autoCreate(17108);
                NumberSequenceTable::autoCreate(101643);
                NumberSequenceTable::autoCreate(101675);
                NumberSequenceTable::autoCreate(18879);
                NumberSequenceTable::autoCreate(17141);
                NumberSequenceTable::autoCreate(17148);
                NumberSequenceTable::autoCreate(17388);
                NumberSequenceTable::autoCreate(17107);
                NumberSequenceTable::autoCreate(17108);
                NumberSequenceTable::autoCreate(101643);
                NumberSequenceTable::autoCreate(101675);
                NumberSequenceTable::autoCreate(18879);
                NumberSequenceTable::autoCreate(17367);
                NumberSequenceTable::autoCreate(17435);
                NumberSequenceTable::autoCreate(17018);
                NumberSequenceTable::autoCreate(17018);
                NumberSequenceTable::autoCreate(17018);
                NumberSequenceTable::autoCreate(17367);
                NumberSequenceTable::autoCreate(17435);
                NumberSequenceTable::autoCreate(17141);
                NumberSequenceTable::autoCreate(17148);
                NumberSequenceTable::autoCreate(17388);
                NumberSequenceTable::autoCreate(17107);
                NumberSequenceTable::autoCreate(17108);
                NumberSequenceTable::autoCreate(101643);
                NumberSequenceTable::autoCreate(101675);
                NumberSequenceTable::autoCreate(18879);
                NumberSequenceTable::autoCreate(17367);
                NumberSequenceTable::autoCreate(17435);
                NumberSequenceTable::autoCreate(17141);
                NumberSequenceTable::autoCreate(17148);
                NumberSequenceTable::autoCreate(17388);
                NumberSequenceTable::autoCreate(17107);
                NumberSequenceTable::autoCreate(17108);
                NumberSequenceTable::autoCreate(101643);
                NumberSequenceTable::autoCreate(101675);
                NumberSequenceTable::autoCreate(18879);
                NumberSequenceTable::autoCreate(17367);
                NumberSequenceTable::autoCreate(17435);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCompanySpecificBaseData</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void loadCompanySpecificBaseData(str 250 code)
    {
        changeCompany(code)
        {
            LedgerParameters::find();
            TaxParameters::find();
            CustParameters::find();
            VendParameters::find();
            InventDim::findOrCreateBlank();
            InventDimSetupGrid::loadSetup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpCompany</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void setUpCompany(str 250                         name,
                                    str 250                         code,
                                    str 250                         address,
                                    str 250                         zipcode,
                                    str 250                         city,
                                    str 250                         state,
                                    str 250                         country,
                                    str 250                         addrformat,
                                    str 250                         registration,
                                    str 250                         language,
                                    utcDateTime                     start,
                                    utcdatetime                     end,
                                    PeriodUnit                      periodUnit,
                                    int                             periodQuantity,
                                    int                             numberOfFiscalYears,
                                    str 250                         currency)
    {
        #DEFINE.BudgetRateType("Budget")
        #DEFINE.DefaultRateType("Default")
        #DEFINE.LocationDescription("%1 corporate address")
        #DEFINE.UnitedStates("US")

        CompanyInfo                                     companyInfo;
        DirPartyLocation                                dirPartyLocation;
        DirPartyLocationRole                            dirPartyLocationRole;
        LogisticsAddressState                           logisticsAddressState;
        LogisticsAddressCity                            logisticsAddressCity;
        LogisticsAddressZipCode                         logisticsAddressZipCode;
        LogisticsLocation                               logisticsLocation;
        LogisticsPostalAddress                          logisticsPostalAddress;
        LogisticsLocationRole                           logisticsLocationRole;
        NumberSeq                                       numberSeq;
        str 250                                         locationDescription;

        FiscalCalendar                                  fiscalCalendar;
        LedgerChartOfAccounts                           ledgerChartOfAccounts;
        DimensionHierarchy                              dimensionHierarchy;
        Ledger                                          ledger;

        DirSetup                                        dirSetup = new DirSetup();
        DirAddressBook                                  dirAddressBook;

        dirSetup.loadData();

        //create an address book
        ttsBegin;
            dirAddressBook.clear();
            dirAddressBook.Name = code;
            dirAddressBook.Description = name;
            dirAddressBook.IsSystem = NoYes::No;
            if (dirAddressBook.validateWrite())
               dirAddressBook.insert();
        ttsCommit;

        //Get or create the primary address location role
        logisticsLocationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Business);
        if (logisticsLocationRole.RecId == 0)
        {
            ttsBegin;
            logisticsLocationRole.clear();
            logisticsLocationRole.Name = "@SYS328206";
            logisticsLocationRole.Type = LogisticsLocationRoleType::Business;
            logisticsLocationRole.IsPostalAddress = NoYes::Yes;
            logisticsLocationRole.IsContactInfo = NoYes::Yes;
            logisticsLocationRole.insert();
            ttsCommit;

            logisticsLocationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Business);
        }

        //Get or create logistics location (Location.RecId)
        //Assign location roles
        //locationDescription = name + " corporate address";
        //locationDescription = strFmt(#LocationDescription,name);
          locationDescription = strFmt('%1 corporate address',name);

        select firstOnly recId from logisticsLocation where logisticsLocation.Description == locationDescription;
        if (logisticsLocation.RecId == 0)
        {
            //logisticsLocation = logisticsLocation::create(strFmt(#LocationDescription,name), NoYes::Yes);
              logisticsLocation = LogisticsLocation::create(strFmt('%1 corporate address',name), NoYes::Yes);
        }

        //Get the State
        //select firstOnly * from logisticsAddressState where logisticsAddressState.Name == state && logisticsAddressState.CountryRegionId == country;

        logisticsAddressState = LogisticsAddressState::find(country,state);

        if (logisticsAddressState.RecId == 0)
        {
            logisticsAddressState.clear();
            ttsBegin;
                logisticsAddressState.Name = state;
                logisticsAddressState.StateId = state;
                logisticsAddressState.CountryRegionId = country;
                logisticsAddressState.insert();
            ttsCommit;

            select firstOnly recId from logisticsAddressState where logisticsAddressState.Name == state && logisticsAddressState.CountryRegionId ==country;
        }

        //Get city RecId
        select firstOnly recId from logisticsAddressCity where logisticsAddressCity.Name == city && logisticsAddressCity.CountryRegionId == country && logisticsAddressCity.StateId == state;

        if (logisticsAddressCity.RecId == 0)
        {
            logisticsAddressCity.clear();
            ttsBegin;
            logisticsAddressCity.Name = city;
            logisticsAddressCity.CountryRegionId = country;
            logisticsAddressCity.StateId = state;
            LogisticsAddressCity.insert();
            ttsCommit;

            select firstOnly recId from logisticsAddressCity where logisticsAddressCity.Name == city && logisticsAddressCity.CountryRegionId == country && logisticsAddressCity.StateId == state;
        }

        //Get zip code RecId
        select firstOnly recId from logisticsAddressZipCode where logisticsAddressZipCode.ZipCode == zipcode &&
        logisticsAddressZipCode.city == city &&
        logisticsAddressZipCode.CountryRegionId == country &&
        logisticsAddressZipCode.state == state;

        if (logisticsAddressZipCode.RecId == 0)
        {
            logisticsAddressZipCode.clear();
            ttsBegin;
            logisticsAddressZipCode.ZipCode = zipcode;
            logisticsAddressZipCode.City = city;
            logisticsAddressZipCode.CountryRegionId = country;
            logisticsAddressZipCode.State = state;
            logisticsAddressZipCode.insert();
            ttsCommit;

            select firstOnly recId from logisticsAddressZipCode where logisticsAddressZipCode.ZipCode == zipcode &&
            logisticsAddressZipCode.city == city &&
            logisticsAddressZipCode.CountryRegionId == country &&
            logisticsAddressZipCode.state == state;
        }

        if (logisticsAddressCity.RecId > 0 && logisticsAddressZipCode.RecId > 0)
        {
            //Get or create logistics postal address
            //Assign city and zip code RecIds

            logisticsPostalAddress = logisticsPostalAddress::findByLocation(logisticsLocation.RecId, true);

            if (logisticsPostalAddress.RecId == 0)
            {
                logisticsPostalAddress.clear();
                ttsBegin;
                logisticsPostalAddress.Address = address;
                logisticsPostalAddress.CountryRegionId = country;
                logisticsPostalAddress.ZipCode = zipcode;
                logisticsPostalAddress.City = city;
                logisticsPostalAddress.State = state;
                logisticsPostalAddress.Street = address;
                logisticsPostalAddress.CityRecId = logisticsAddressCity.RecId;
                logisticsPostalAddress.ZipCodeRecId = logisticsAddressZipCode.RecId;
                logisticsPostalAddress.Location = logisticsLocation.RecId;
                logisticsPostalAddress.insert();
                ttsCommit;
            }
            else
            {
                ttsBegin;
                logisticsPostalAddress.Address = address;
                logisticsPostalAddress.CountryRegionId = country;
                logisticsPostalAddress.ZipCode = zipcode;
                logisticsPostalAddress.City = city;
                logisticsPostalAddress.State = state;
                logisticsPostalAddress.Street = address;
                logisticsPostalAddress.CityRecId = logisticsAddressCity.RecId;
                logisticsPostalAddress.ZipCodeRecId = logisticsAddressZipCode.RecId;
                logisticsPostalAddress.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                logisticsPostalAddress.update();
                ttsCommit;
            }
        }

        companyInfo = CompanyInfo::findDataArea(code, 0);

        if (companyInfo.RecId == 0)
        {
            //Check if number sequence has been set up prior to creating company Party
            //If number sequence created, use standard insert(), otherwise, use create() and generate GUID
            numberSeq = NumberSeq::newGetNum(DirParameters::numRefDirPartyNumber(), false, true);
            companyInfo.Name = name;
            companyInfo.AddrFormat = addrformat;
            companyInfo.DataArea = code;
            companyInfo.RegNum = registration;
            if (country == #UnitedStates)
            {
                companyInfo.Tax1099RegNum = registration;
            }
            companyInfo.CoRegNum = registration;
            companyInfo.LanguageId = language;
            if (numberSeq)
            {
                ttsBegin;
                companyInfo.insert();
                ttsCommit;
            }
            else
            {
                ttsBegin;
                companyInfo.create(true);
                ttsCommit;
            }

            //Create CompanyInfo, get Party RecId
            companyInfo.clear();
            select firstOnly RecId, PartyNumber from companyInfo where companyInfo.Name == name && companyInfo.DataArea == code;

            if (companyInfo.RecId > 0)
            {
                //Create dir party location for party and location

                dirPartyLocation = dirPartyLocation::findByPartyLocation(companyInfo.RecId, logisticsLocation.RecId);

                if (dirPartyLocation.RecId == 0)
                {
                    dirPartyLocation.clear();
                    ttsBegin;
                    dirPartyLocation.Party = companyInfo.RecId;
                    dirPartyLocation.Location = logisticsLocation.RecId;
                    dirPartyLocation.IsPostalAddress = NoYes::Yes;
                    dirPartyLocation.IsPrimary = NoYes::Yes;
                    //dirPartyLocation.ValidTo = DateTimeUtil::maxValue();
                    dirPartyLocation.insert();
                    ttsCommit;

                    dirPartyLocation = dirPartyLocation::findByPartyLocation(companyInfo.RecId, logisticsLocation.RecId);
                }

                select recId from dirPartyLocationRole where dirPartyLocationRole.PartyLocation == dirPartyLocation.RecId &&
                dirPartyLocationRole.LocationRole == logisticsLocationRole.RecId;

                if (dirPartyLocationRole.RecId == 0)
                {
                    dirPartyLocationRole.clear();
                    ttsBegin;
                    dirPartyLocationRole.PartyLocation = dirPartyLocation.RecId;
                    dirPartyLocationRole.LocationRole = logisticsLocationRole.RecId;
                    dirPartyLocationRole.insert();
                    ttsCommit;
                }
            }
        }

        //create fiscal calendar and year.
        ttsBegin;
            fiscalCalendar = RapidStartSetup::createFiscalCalendar(start,
                                                                   end,
                                                                   periodUnit,
                                                                   periodQuantity,
                                                                   numberOfFiscalYears,
                                                                   code);
        ttsCommit;
        ledgerChartOfAccounts = LedgerChartOfAccounts::findByName(code);
        if (ledgerChartOfAccounts.RecId == 0)
        {
            //create default COA.
            ttsBegin;
                ledgerChartOfAccounts.Name = code;
                ledgerChartOfAccounts.Description = name;
                ledgerChartOfAccounts.insert();
            ttsCommit;
        }

        ledgerChartOfAccounts = LedgerChartOfAccounts::findByName(code);

        //Create a default Account Structure with main account if one does not exist already
        dimensionHierarchy = LedgerDimensionHierarchyHelper::getAccountStructureWithMainAccountOnly(true);

        //create Ledger
        if (!Ledger::findByLegalEntity(companyInfo.RecId))
        {
            ttsBegin;
                ledger.ChartOfAccounts = ledgerChartOfAccounts.RecId;
                ledger.Name = code;
                ledger.Description = name;
                ledger.PrimaryForLegalEntity = companyInfo.RecId;
                ledger.FiscalCalendar = fiscalCalendar.RecId;
                ledger.DefaultExchangeRateType = ExchangeRateType::findByName(#DefaultRateType).RecId;
                ledger.BudgetExchangeRateType = ExchangeRateType::findByName(#BudgetRateType).RecId;
                ledger.AccountingCurrency = currency;
                ledger.ReportingCurrency = currency;
                ledger.IsBudgetControlEnabled = NoYes::No;
                ledger.doInsert();

                ledger = ledger::findByLegalEntity(companyInfo.RecId);

                LedgerFiscalCalendar::insertAllLedgerYears(ledger.FiscalCalendar, ledger.RecId);
                LedgerFiscalCalendar::insertAllLedgerPeriods(ledger.FiscalCalendar, ledger.RecId);

            ttsCommit;
        }

        if (!(LedgerStructure::findByLedgerStructure(ledger.RecId, dimensionHierarchy.RecId)))
        {
            ttsBegin;
            LedgerStructure::createLedgerStructure(dimensionHierarchy.RecId, ledger.RecId);
            ttsCommit;
        }

        RapidStartSetup::generateNumberSequences(code);
        RapidStartSetup::createJournalNames(code);
        RapidStartSetup::createInventSite(code, name);
        RapidStartSetup::loadCompanySpecificBaseData(code);
        RapidStartSetup::createDocumentTypes(code);
        RapidStartSetup::createWorkCalendars(code);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpDefaultCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up a company for demo purposes.
    /// </summary>
    /// <param name="name">
    /// Name of the Company.
    /// </param>
    /// <param name="code">
    /// Code for the company.
    /// </param>
    /// <param name="address">
    /// Address of the company.
    /// </param>
    /// <param name="zipcode">
    /// Zipcode for the company.
    /// </param>
    /// <param name="city">
    /// City for the company.
    /// </param>
    /// <param name="state">
    /// State for the company.
    /// </param>
    /// <param name="country">
    /// Country for the company.
    /// </param>
    /// <param name="registration">
    /// Registration code for the company.
    /// </param>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public static void setUpDefaultCompany(str 250                         name,
                                           str 250                         code,
                                        str 250                         address,
                                        str 250                         zipcode,
                                        str 250                         city,
                                        str 250                         state,
                                        str 250                         country,
                                        str 250                         registration)
    {
        #DEFINE.AddressFormat("US")
        #DEFINE.Language("en-us")
        #DEFINE.Currency("USD")
        timeOfDay t = (3600 * 0) + (60 * 0) + 00;
        utcDateTime                 startDate = DateTimeUtil::newDateTime(dateStartYr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),t);
        utcDateTime                 endDate = DateTimeUtil::newDateTime(dateEndYr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),t);
        str 250                     addressFormat = #AddressFormat;
        str 250                     language = #Language;
        PeriodUnit                  periodUnit = PeriodUnit::Month;
        int                         periodQuantity = 1;
        int                         numberOfFiscalYears = 2;
        str 250                     currency = #Currency;

        RapidStartSetup::setUpCompany(name,
                                      code,
                                      address,
                                      zipcode,
                                      city,
                                      state,
                                      country,
                                      addressFormat,
                                      registration,
                                      language,
                                      startDate,
                                      endDate,
                                      periodUnit,
                                      periodQuantity,
                                      numberOfFiscalYears,
                                      currency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpDemoCompany</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void setUpDemoCompany(str 250                         name,
                                        str 250                         address,
                                        str 250                         zipcode,
                                        str 250                         city,
                                        str 250                         state,
                                        str 250                         country,
                                        str 250                         registration)
    {
        #DEFINE.AddressFormat("US")
        #DEFINE.Language("en-us")
        #DEFINE.Currency("USD")
        #DEFINE.Code("DEMO")
        timeOfDay t = (3600 * 0) + (60 * 0) + 00;
        utcDateTime                 startDate = DateTimeUtil::newDateTime(dateStartYr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),t);
        utcDateTime                 endDate = DateTimeUtil::newDateTime(dateEndYr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),t);
        str 250                     addressFormat = #AddressFormat;
        str 250                     language = #Language;
        PeriodUnit                  periodUnit = PeriodUnit::Month;
        int                         periodQuantity = 1;
        int                         numberOfFiscalYears = 2;
        str 250                     currency = #Currency;
        str 250                     code = #Code;

        RapidStartSetup::setUpCompany(name,
                                      code,
                                      address,
                                      zipcode,
                                      city,
                                      state,
                                      country,
                                      addressFormat,
                                      registration,
                                      language,
                                      startDate,
                                      endDate,
                                      periodUnit,
                                      periodQuantity,
                                      numberOfFiscalYears,
                                      currency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpMXAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setup Mexico specific attributes when creating a new legal entity.
    /// </summary>
    /// <param name="companyTypeMX">
    /// Classification of the legal entity.
    /// </param>
    /// <param name="rfc_MX">
    /// RFC information.
    /// </param>
    /// <param name="curp_MX">
    /// Curp information.
    /// </param>
    /// <param name="stateInscription_MX">
    /// State inspection information.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void setUpMXAttributes(CompanyType_MX         companyTypeMX,
                                         str 13                 rfc_MX,
                                         str 18                 curp_MX,
                                         str 30                 stateInscription_MX)
    {
        CompanyInfo     companyInfo;
        ttsbegin;
            select forupdate RecId, CompanyType_MX, Rfc_MX, Curp_MX, StateInscription_MX from companyInfo where companyInfo.DataArea == curext();
            if (companyInfo.RecId)
            {
                companyInfo.CompanyType_MX = companyTypeMX;
                companyInfo.Rfc_MX = rfc_MX;
                companyInfo.Curp_MX = curp_MX;
                companyInfo.StateInscription_MX = stateInscription_MX;
                companyInfo.update();
            }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpSAAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setup Saudi Arabia specific attributes while defining a new legal entity.
    /// </summary>
    /// <param name="businessActivity_SA">
    /// Business activity.
    /// </param>
    /// <param name="businessActivityDesc_SA">
    /// Business activity description.
    /// </param>
    /// <param name="fileNumber_SA">
    /// Zakat file number.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void setUpSAAttributes(str 10         businessActivity_SA,
                                         str 60         businessActivityDesc_SA,
                                         str 15         fileNumber_SA)
    {
        CompanyInfo     companyInfo;
        ttsbegin;
            select forupdate RecId, BusinessActivity_SA, BusinessActivityDesc_SA, FileNumber_SA from companyInfo where companyInfo.DataArea == curext();
            if (companyInfo.RecId)
            {
                companyInfo.BusinessActivity_SA = businessActivity_SA;
                companyInfo.BusinessActivityDesc_SA = businessActivityDesc_SA;
                companyInfo.FileNumber_SA = fileNumber_SA;
                companyInfo.update();
            }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>