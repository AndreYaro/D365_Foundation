<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSARetenetionRelease</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PSARetenetionRelease extends ProjInvoiceChoose implements BatchRetryable
{
    PSATmpRetentionReleaseTable psaTmpRetentionReleaseTable;
    PSATmpRetentionReleaseLine  psaTmpRetentionReleaseLine;
    QueryBuildDataSource        retainDataSource;
    ProjInvoiceRevenue          projInvoiceRevenue;
    ProjInvoiceRevenueDetail    projInvoiceRevenueDetail;
    ProjInvoiceJour             projInvoiceJour;
    ProjRevenueTrans            projRevenueTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax group and tax item group from the transaction.
    /// </summary>
    /// <param name="transactionId">
    /// Transaction identifier.
    /// </param>
    /// <returns>
    /// Tax group and tax item group of the the transaction.
    /// </returns>
    private container getTaxGroups(ProjRevenueTransId _transactionId)
    {
        container ret;

        select TaxGroupId, TaxItemGroupId from projRevenueTrans
            where projRevenueTrans.TransId == _transactionId && projRevenueTrans.IsRetained == NoYes::Yes;

        ret = [projRevenueTrans.TaxGroupId, projRevenueTrans.TaxItemGroupId];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignTables</Name>
				<Source><![CDATA[
    protected void assignTables()
    {
        this.parmProjInvoiceTable(queryRun.get(tablenum(ProjInvoiceTable)));
        this.parmProjTable(queryRun.get(tablenum(ProjTable)));

        if (queryRevenue && queryRun.changed(tablenum(ProjRevenueTrans)))
        {
            pProjRevenueTrans = queryRun.get(tablenum(ProjRevenueTrans));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    public void initQuery()
    {
        revenueDataSource = queryRun.query().dataSourceTable(tablenum(ProjRevenueTrans));

        if (queryRevenue)
        {
            revenueDataSource.enabled(true);
            revenueDataSource.addRange(fieldNum(ProjRevenueTrans, TransId)).value(queryValue(projRevenueTrans.TransId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLineRecords</Name>
				<Source><![CDATA[
    protected void insertLineRecords(ProjTaxGroup _taxGroup = '', ProjTaxItemGroup _taxItemGroup = '')
    {
        this.initializeLineRecords(_taxGroup, _taxItemGroup);
        psaTmpRetentionReleaseLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLineRecords</Name>
				<Source><![CDATA[
    protected void initializeLineRecords(ProjTaxGroup _taxGroup, ProjTaxItemGroup _taxItemGroup)
    {
        psaTmpRetentionReleaseLine.initValue();
        psaTmpRetentionReleaseLine.Selected        = NoYes::Yes;
        psaTmpRetentionReleaseLine.InvoiceNumber   = projInvoiceRevenue.ProjInvoiceId;
        psaTmpRetentionReleaseLine.TransDate       = projInvoiceRevenue.InvoiceDate;
        psaTmpRetentionReleaseLine.RetainedAmount  = projInvoiceRevenueDetail.LineAmount < 0  ? abs(projInvoiceRevenueDetail.LineAmount) : projInvoiceRevenueDetail.LineAmount *  -1;
        psaTmpRetentionReleaseLine.CurrencyId      = projInvoiceJour.CurrencyId;
        psaTmpRetentionReleaseLine.Reference       = projInvoiceRevenueDetail.SaleRefRecId;
        psaTmpRetentionReleaseLine.RefRecId        = psaTmpRetentionReleaseTable.RecId;
        psaTmpRetentionReleaseLine.TaxGroupId      = _taxGroup;
        psaTmpRetentionReleaseLine.TaxItemGroupId  = _taxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecords</Name>
				<Source><![CDATA[
    public void insertRecords(ProjId _projId = '', ProjInvoiceProjId _contractId = '')
    {
        ProjRevenueTransSale        projRevenueTransSale;
        ProjRevenueTransSale        projRevenueTransSaleLoc;
        ProjInvoiceRevenueDetail    projInvoiceRevenueDetailLoc;
        RefRecId                    fundingsourceLoc;
        PSAContractLineNum          contractLineNumLoc;
        ProjId                      projIdLoc;
        boolean                     check = false;
        ProjTaxGroup                projTaxGroup;
        ProjTaxItemGroup            projTaxItemGroup;

        if (_projId && !_contractId)
        {
            while select projInvoiceRevenueDetail
                join RecId, FundingSource, TransId from projRevenueTransSale
                order by FundingSource
                    where projRevenueTransSale.RecId == projInvoiceRevenueDetail.SaleRefRecId
                        && (projRevenueTransSale.TransStatus == ProjTransStatus::Invoiced
                        || projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                join projInvoiceRevenue
                    join projInvoiceJour
                        where projInvoiceJour.InvoiceDate == projInvoiceRevenue.InvoiceDate
                            && projInvoiceJour.ProjInvoiceId == projInvoiceRevenue.ProjInvoiceId
                            && projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                            && projInvoiceRevenue.ProjId like _projId + '*'
                            && (projInvoiceRevenue.IsRetained == NoYes::Yes)
            {
                select projRevenueTransSaleLoc
                    where projRevenueTransSaleLoc.PSARefRecId == projRevenueTransSale.RecId;

                if (!projRevenueTransSaleLoc)
                {
                    select projInvoiceRevenueDetailLoc
                        where projInvoiceRevenueDetailLoc.RefRecId == projInvoiceRevenueDetail.RecId;

                    [projTaxGroup, projTaxItemGroup] = this.getTaxGroups(projRevenueTransSale.TransId);

                    if (!projInvoiceRevenueDetailLoc)
                    {
                        psaTmpRetentionReleaseTable.Selected         = NoYes::Yes;
                        psaTmpRetentionReleaseTable.ProjId           = projInvoiceRevenue.ProjId;
                        psaTmpRetentionReleaseTable.FundingSourceId  = projFundingSource::find(projRevenueTransSale.FundingSource).FundingSourceId;
                        psaTmpRetentionReleaseTable.CurrencyId       = projInvoiceJour.CurrencyId;
                        if (projRevenueTransSale.FundingSource != fundingsourceLoc
                            || projInvoiceRevenue.ProjId != projIdLoc)
                        {
                            psaTmpRetentionReleaseTable.RetainedAmount   = projInvoiceRevenueDetail.LineAmount < 0  ? abs(projInvoiceRevenueDetail.LineAmount) : projInvoiceRevenueDetail.LineAmount * -1;
                            psaTmpRetentionReleaseTable.insert();
                            fundingsourceLoc = projRevenueTransSale.FundingSource;
                            projIdLoc = projInvoiceRevenue.ProjId;
                        }
                        else
                        {
                            psaTmpRetentionReleaseTable.RetainedAmount   += projInvoiceRevenueDetail.LineAmount < 0  ? abs(projInvoiceRevenueDetail.LineAmount) : projInvoiceRevenueDetail.LineAmount * -1;
                            psaTmpRetentionReleaseTable.update();
                        }

                        this.insertLineRecords(projTaxGroup, projTaxItemGroup);
                    }
                }
            }
        }
        if (_contractId)
        {
            if (ProjInvoiceTable::find(_contractId).PSAContractLines)
            {
                while select projInvoiceRevenueDetail
                    join RecId, FundingSource, TransId from projRevenueTransSale
                        order by FundingSource
                        where projRevenueTransSale.RecId == projInvoiceRevenueDetail.SaleRefRecId
                           && (projRevenueTransSale.TransStatus == ProjTransStatus::Invoiced ||
                               projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                        join projInvoiceRevenue
                            where projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                            join projInvoiceJour
                                where projInvoiceRevenue.InvoiceDate == projInvoiceJour.InvoiceDate
                                   && projInvoiceRevenue.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                                   && projInvoiceRevenue.IsRetained == NoYes::Yes
                                   && projInvoiceJour.ProjInvoiceProjId == _contractId
                {
                    if ((_projId && projInvoiceRevenue.ProjId == _projId) || !_projId)
                    {
                        select projRevenueTransSaleLoc
                            where projRevenueTransSaleLoc.PSARefRecId == projRevenueTransSale.RecId;

                        if (!projRevenueTransSaleLoc)
                        {
                            select projInvoiceRevenueDetailLoc
                                where projInvoiceRevenueDetailLoc.RefRecId == projInvoiceRevenueDetail.RecId;

                            [projTaxGroup, projTaxItemGroup] = this.getTaxGroups(projRevenueTransSale.TransId);

                            if (!projInvoiceRevenueDetailLoc)
                            {
                                psaTmpRetentionReleaseTable.Selected         = NoYes::Yes;
                                psaTmpRetentionReleaseTable.ProjId           = projInvoiceRevenue.ProjId;
                                psaTmpRetentionReleaseTable.ContractLineNum  = projInvoiceRevenue.PSAContractLineNum;
                                psaTmpRetentionReleaseTable.FundingSourceId  = projFundingSource::find(projRevenueTransSale.FundingSource).FundingSourceId;
                                psaTmpRetentionReleaseTable.CurrencyId       = projInvoiceJour.CurrencyId;
                                if (projRevenueTransSale.FundingSource != fundingsourceLoc
                                    || projInvoiceRevenue.PSAContractLineNum != contractLineNumLoc
                                    || ProjInvoiceRevenue.ProjId != projIdLoc)
                                {
                                    psaTmpRetentionReleaseTable.RetainedAmount   = projInvoiceRevenueDetail.LineAmount < 0  ? abs(projInvoiceRevenueDetail.LineAmount) : projInvoiceRevenueDetail.LineAmount * -1;
                                    psaTmpRetentionReleaseTable.insert();
                                    fundingsourceLoc = projRevenueTransSale.FundingSource;
                                    contractLineNumLoc = projInvoiceRevenue.PSAContractLineNum;
                                    projIdLoc = projInvoiceRevenue.ProjId;
                                }
                                else
                                {
                                    psaTmpRetentionReleaseTable.RetainedAmount += projInvoiceRevenueDetail.LineAmount < 0  ? abs(projInvoiceRevenueDetail.LineAmount) : projInvoiceRevenueDetail.LineAmount * -1;
                                    psaTmpRetentionReleaseTable.update();
                                }

                                this.insertLineRecords(projTaxGroup, projTaxItemGroup);
                            }
                        }
                    }
                }
            }
            else
            {
                while select projInvoiceRevenueDetail
                    join recId, fundingsource, transId from projRevenueTransSale
                        order by FundingSource
                        where projRevenueTransSale.RecId == projInvoiceRevenueDetail.SaleRefRecId
                           && (projRevenueTransSale.TransStatus == ProjTransStatus::Invoiced ||
                              projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                        join projInvoiceRevenue
                            where projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                            join projInvoiceJour
                                where projInvoiceRevenue.InvoiceDate == projInvoiceJour.InvoiceDate
                                   && projInvoiceRevenue.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                                   && projInvoiceRevenue.IsRetained == NoYes::Yes
                                   && projInvoiceJour.ProjInvoiceProjId == _contractId
                {
                    select projRevenueTransSaleLoc
                        where projRevenueTransSaleLoc.PSARefRecId == projRevenueTransSale.RecId;

                    [projTaxGroup, projTaxItemGroup] = this.getTaxGroups(projRevenueTransSale.TransId);

                    if (!projRevenueTransSaleLoc)
                    {
                        select projInvoiceRevenueDetailLoc
                            where projInvoiceRevenueDetailLoc.RefRecId == projInvoiceRevenueDetail.RecId;

                        if (!projInvoiceRevenueDetailLoc)
                        {
                            psaTmpRetentionReleaseTable.Selected         = NoYes::Yes;
                            psaTmpRetentionReleaseTable.ProjId           = projInvoiceRevenue.ProjId;
                            psaTmpRetentionReleaseTable.FundingSourceId  = projFundingSource::find(projRevenueTransSale.FundingSource).FundingSourceId;
                            psaTmpRetentionReleaseTable.CurrencyId       = projInvoiceJour.CurrencyId;

                            if (projRevenueTransSale.FundingSource != fundingsourceLoc
                                || projInvoiceRevenue.ProjId != projIdLoc)
                            {
                                psaTmpRetentionReleaseTable.RetainedAmount   = projInvoiceRevenueDetail.LineAmount < 0  ? abs(projInvoiceRevenueDetail.LineAmount) : projInvoiceRevenueDetail.LineAmount * -1;
                                psaTmpRetentionReleaseTable.insert();
                                fundingsourceLoc = projRevenueTransSale.FundingSource;
                                projIdLoc = projInvoiceRevenue.ProjId;
                            }
                            else
                            {
                                psaTmpRetentionReleaseTable.RetainedAmount += projInvoiceRevenueDetail.LineAmount < 0  ? abs(projInvoiceRevenueDetail.LineAmount) : projInvoiceRevenueDetail.LineAmount * -1;
                                psaTmpRetentionReleaseTable.update();
                            }

                            this.insertLineRecords(projTaxGroup, projTaxItemGroup);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(projId _projId = projId)
    {
        projId = _projId;
        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceProjId</Name>
				<Source><![CDATA[
    public ProjInvoiceProjId parmProjInvoiceProjId(ProjInvoiceProjId _projInvoiceProjId = projInvoiceProjId)
    {
        projInvoiceProjId = _projInvoiceProjId;
        return projInvoiceProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpRetentionReleaseLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used to return PSATmpRetentionReleaseTable table buffer.
    /// </summary>
    /// <param name="_psaTmpRetentionReleaseLine">
    ///     The PSATmpRetentionReleaseLine table.
    /// </param>
    /// <returns>
    ///     PSATmpRetentionReleaseTable table buffer.
    /// </returns>
    PSATmpRetentionReleaseLine parmTmpRetentionReleaseLine(PSATmpRetentionReleaseLine _psaTmpRetentionReleaseLine = psaTmpRetentionReleaseLine)
    {
        psaTmpRetentionReleaseLine = _psaTmpRetentionReleaseLine;

        return psaTmpRetentionReleaseLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpRetentionReleaseTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used to return PSATmpRetentionReleaseTable table buffer.
    /// </summary>
    /// <param name="_psaTmpRetentionReleaseTable">
    ///     The PSATmpRetentionReleaseTable table.
    /// </param>
    /// <returns>
    ///     PSATmpRetentionReleaseTable table buffer.
    /// </returns>
    PSATmpRetentionReleaseTable parmTmpRetentionReleaseTable(PSATmpRetentionReleaseTable _psaTmpRetentionReleaseTable = psaTmpRetentionReleaseTable)
    {
        psaTmpRetentionReleaseTable = _psaTmpRetentionReleaseTable;

        return psaTmpRetentionReleaseTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PSACreateRetainage</Name>
				<Source><![CDATA[
    protected void PSACreateRetainage()
    {
        ProjProposalRevenue         projProposalRevenue;
        ProjProposalRevenueDetail   projProposalRevenueDetail;
        PSAProjProposalProj         projProposalProjLoc;
        ProjRevenueTrans            projRevenueTransLoc;

        while select tmpProjProposalJour
            order by ProjInvoiceProjId
            join pProjProposalJour
                where pProjProposalJour.RecId == tmpProjProposalJour.RefProjProposalJour
        {
            while select forUpdate ProjId,ProjProposalId, ContractLineNum from projProposalProjLoc
                where projProposalProjLoc.ProjProposalId == pProjProposalJour.ProposalId
            {
                select sum(AmountCur) from projProposalRevenueDetail
                    exists join projProposalRevenue
                        where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                           && projProposalRevenue.ProposalId == projProposalProjLoc.ProjProposalId
                           && projProposalRevenue.PSAContractLineNum == projProposalProjLoc.ContractLineNum
                           && projProposalRevenue.IsReleased == NoYes::Yes
                    exists join projRevenueTransLoc
                        where projRevenueTransLoc.TransId == projProposalRevenue.TransId
                           && projRevenueTransLoc.ProjId == projProposalProjLoc.ProjId;

                if (projProposalRevenueDetail)
                {
                    projProposalProjLoc.ReleasedAmount   = projProposalRevenueDetail.AmountCur;
                    projProposalProjLoc.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    QueryRun queryBuild()
    {
        queryRun = new QueryRun(querystr(ProjInvoiceNormal));

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ProjFundingSource           projFundingSource;
        ProjRevenueTransSale        projRevenueTransSale;
        PSATmpRetentionReleaseLine  psaTmpRetentionReleaseLineLoc;
        MenuFunction                menuFunction;
        Args                        args = new Args();
        #OCCRetryCount
        // Build a new query based on the selection the user made....
        try
        {
            ttsbegin;

            this.progressInit("@SYS54552", progressTotal, #AviFormLetter);
            progress.setText("@SYS26577");

            this.setQueryRange();

            psaTmpRetentionReleaseLineLoc.setTmpData(psaTmpRetentionReleaseLine);
            while select psaTmpRetentionReleaseLineLoc
                join psaTmpRetentionReleaseTable
                    where psaTmpRetentionReleaseTable.RecId == psaTmpRetentionReleaseLineLoc.RefRecId
                       && psaTmpRetentionReleaseLineLoc.Selected
            {
                projFundingSource = ProjFundingSource::findContractFundingSource(ProjTable::find(psaTmpRetentionReleaseTable.ProjId).ProjInvoiceProjId, psaTmpRetentionReleaseTable.FundingSourceId);
                projRevenueTrans = this.createFeeJournal(psaTmpRetentionReleaseTable.ProjId,
                                                            psaTmpRetentionReleaseLineLoc.RetainedAmount,
                                                            projFundingSource.RecId,
                                                            psaTmpRetentionReleaseTable.ContractLineNum,
                                                            false,
                                                            '',
                                                            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                            '',
                                                            psaTmpRetentionReleaseLineLoc.TaxGroupId,
                                                            psaTmpRetentionReleaseLineLoc.TaxItemGroupId,
                                                            true,
                                                            projRevenueTrans);

                update_recordSet projRevenueTransSale
                    setting PSARefRecId = psaTmpRetentionReleaseLineLoc.Reference
                        where projRevenueTransSale.TransId == projRevenueTrans.TransId;

                this.initQuery();
            }

            while (queryRun.next())
            {
                this.assignTables();

                this.doRevenue();
            }
            this.updateInvoiceTotal();
            this.PSACreateRetainage();

            ttscommit;

            Query detailsFormQuery = this.buildDetailsFormQuery();

            menuFunction = new MenuFunction(menuitemdisplaystr(ProjInvoiceProposal), MenuItemType::Display);
            args.caller(this);
            args.copyCallerQuery(CopyCallerQuery::No);
            args.initialQuery(InitialQueryParameter::createByQuery(detailsFormQuery));
            menuFunction.run(args);
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        catch (Exception::Error)
        {
            // Update has been canceled.
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDetailsFormQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to be used with the invoice proposal form.
    /// </summary>
    /// <returns>
    /// A <c>Query</c> instance.
    /// </returns>
    protected Query buildDetailsFormQuery()
    {
        Query detailsFormQuery = new Query();
        QueryBuildDataSource projProposalDataSource = detailsFormQuery.addDataSource(tableNum(ProjProposalJour));
        ListEnumerator proposalIdEnumerator = proposalIdList.getEnumerator();

        while (proposalIdEnumerator.moveNext())
        {
            ProjProposalId proposalId = proposalIdEnumerator.current();
            this.processProjProposalId(projProposalDataSource, proposalId);
        }

        return detailsFormQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processProjProposalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a range value on the specified <c>QueryBuildDataSource</c> instance for the invoice proposal Id.
    /// </summary>
    /// <param name = "_queryBuildDataSource">
    /// A <c>QueryBuildDataSource</c> instance for the <c>ProjProposalJour</c> table.
    /// </param>
    /// <param name = "_projProposalId">
    /// The invoice proposal Id.
    /// </param>
    protected void processProjProposalId(QueryBuildDataSource _queryBuildDataSource, ProjProposalId _projProposalId)
    {
        QueryBuildRange proposalIdRange = _queryBuildDataSource.addRange(fieldNum(ProjProposalJour, ProposalId));
        proposalIdRange.value(queryValue(_projProposalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>