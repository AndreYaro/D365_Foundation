<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCouponUsageValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailCouponUsageValidator</c> is the helper class for retail coupon usage validation.
/// </summary>
public class RetailCouponUsageValidator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateCouponLimits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if any of the given coupon code IDs has reached its maximum usage limit.
    /// </summary>
    /// <param name = "_couponCodeIds">The coupon code IDs.</param>
    /// <param name = "_retailChannelId">The retail channel ID of the transaction.</param>
    /// <param name = "_custAccount">The customer account number.</param>
    /// <param name = "_salesId"> The sales order ID.</param>
    /// <param name = "_transactionId"> The transaction ID.</param>
    /// <returns>The coupon codes associated to the invalid coupon code IDs./</returns>
    public static str validateCouponLimits(
        System.Collections.IEnumerable _couponCodeIds,
        RetailChannelId _retailChannelId,
        CustAccount _custAccount,
        SalesIdBase _salesId,
        TransactionID _transactionId)
    {
        str invalidCouponCodes = null;
        boolean hasCompanySpecificUsageLimit = false;
        boolean hasChannelSpecificUsageLimit = false;
        boolean hasCustomerSpecificUsageLimit = false;
        Map couponCodeIdUsageRemainderMap = new Map(Types::String, Types::Int64);

        System.Collections.IEnumerator couponCodeIdEnumerator = _couponCodeIds.GetEnumerator();
        RetailCouponCodeUsageLimitTmp retailCouponCodeUsageLimitTmp;
        RecordInsertList retailCouponCodeUsaeLimitTmpList = new RecordInsertList(
            tableNum(RetailCouponCodeUsageLimitTmp),
            true, // skip insert
            true, // skip database log
            true, // skip events
            true, // skip aos validation
            true, // skip RLS validation
            retailCouponCodeUsageLimitTmp); // buffer where records will be inserted
        while (couponCodeIdEnumerator.moveNext())
        {
            RetailCouponCodeId couponCodeId = couponCodeIdEnumerator.Current;
            RetailCouponCodeTable couponCode = RetailCouponCodeTable::findbyCouponCodeId(couponCodeId);
            RetailCoupon coupon = RetailCoupon::find(couponCode.CouponNumber);

            if (coupon.UsageLimit > 0)
            {
                couponCodeIdUsageRemainderMap.insert(couponCodeId, coupon.UsageLimit);

                switch (coupon.UsageLimitType)
                {
                    case RetailCouponUsageLimitType::CompanySpecific:
                        hasCompanySpecificUsageLimit = true;
                        break;
                    case RetailCouponUsageLimitType::ChannelSpecific:
                        hasChannelSpecificUsageLimit = true;
                        break;
                    case RetailCouponUsageLimitType::CustomerSpecific:
                        hasCustomerSpecificUsageLimit = true;
                        break;
                    default:
                        throw error(strFmt("@Retail:CouponLimitTypeNotSupportedException", coupon.UsageLimitType));
                }

                retailCouponCodeUsageLimitTmp.clear();
                retailCouponCodeUsageLimitTmp.CouponCodeId = couponCodeId;
                retailCouponCodeUsageLimitTmp.UsageLimitType = coupon.UsageLimitType;
                retailCouponCodeUsaeLimitTmpList.add(retailCouponCodeUsageLimitTmp);
            }
        }
        retailCouponCodeUsaeLimitTmpList.insertDatabase();

        if (hasCompanySpecificUsageLimit)
        {
            RetailCouponUsageValidator::validateCompanySpecificLimits(couponCodeIdUsageRemainderMap, retailCouponCodeUsageLimitTmp, _salesId, _transactionId);
        }

        if (hasChannelSpecificUsageLimit)
        {
            RetailCouponUsageValidator::validateChannelSpecificLimits(couponCodeIdUsageRemainderMap, retailCouponCodeUsageLimitTmp, _retailChannelId, _salesId, _transactionId);
        }

        if (hasCustomerSpecificUsageLimit)
        {
            RetailCouponUsageValidator::validateCustomerSpecificLimits(couponCodeIdUsageRemainderMap, retailCouponCodeUsageLimitTmp, _custAccount, _salesId, _transactionId);
        }

        MapEnumerator mapEnumerator = couponCodeIdUsageRemainderMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            RetailCouponCodeId couponCodeId = mapEnumerator.currentKey();
            var usageRemainder = mapEnumerator.currentValue();

            if (usageRemainder <= 0)
            {
                RetailCouponCodeTable couponCode = RetailCouponCodeTable::findbyCouponCodeId(couponCodeId);
                invalidCouponCodes = invalidCouponCodes + ',' + couponCode.CouponCode;
            }
        }

        return invalidCouponCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompanySpecificLimits</Name>
				<Source><![CDATA[
    private static void validateCompanySpecificLimits(
        Map _couponCodeIdUsageRemainderMap,
        RetailCouponCodeUsageLimitTmp retailCouponCodeUsageLimitTmp,
        SalesIdBase _salesId,
        TransactionID _transactionId)
    {
        RetailCouponUsage retailCouponUsage, retailCouponUsageRepeated;

        while select CouponCodeId
            from retailCouponCodeUsageLimitTmp
                where retailCouponCodeUsageLimitTmp.UsageLimitType == RetailCouponUsageLimitType::CompanySpecific
            join count(RecId), Status
            from retailCouponUsage
            group by retailCouponUsage.CouponCodeId, retailCouponUsage.Status
                where retailCouponUsage.CouponCodeId == retailCouponCodeUsageLimitTmp.CouponCodeId
            notexists join retailCouponUsageRepeated // Skip validation for the same sales transaction to avoid double count.
                where retailCouponUsageRepeated.CouponCodeId == retailCouponCodeUsageLimitTmp.CouponCodeId
                    && retailCouponUsageRepeated.Status == RetailCouponUsageStatus::Completed
                    && ((_salesId && retailCouponUsageRepeated.SalesId == _salesId) || (_transactionId && retailCouponUsageRepeated.TransactionId == _transactionId))
        {
            RetailCouponUsageValidator::updateCouponUsageRemainder(
                _couponCodeIdUsageRemainderMap,
                retailCouponUsage.CouponCodeId,
                retailCouponUsage.Status,
                retailCouponUsage.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateChannelSpecificLimits</Name>
				<Source><![CDATA[
    private static void validateChannelSpecificLimits(
        Map _couponCodeIdUsageRemainderMap,
        RetailCouponCodeUsageLimitTmp retailCouponCodeUsageLimitTmp,
        RetailChannelId _retailChannelId,
        SalesIdBase _salesId,
        TransactionID _transactionId)
    {
        RetailCouponUsage retailCouponUsage, retailCouponUsageRepeated;

        while select CouponCodeId
            from retailCouponCodeUsageLimitTmp
                where retailCouponCodeUsageLimitTmp.UsageLimitType == RetailCouponUsageLimitType::ChannelSpecific
            join count(RecId), Status
            from retailCouponUsage
            group by retailCouponUsage.CouponCodeId, retailCouponUsage.Status
                where retailCouponUsage.CouponCodeId == retailCouponCodeUsageLimitTmp.CouponCodeId
                    && retailCouponUsage.RetailChannelId == _retailChannelId
            notexists join retailCouponUsageRepeated // Skip validation for the same sales transaction to avoid double count.
                where retailCouponUsageRepeated.CouponCodeId == retailCouponCodeUsageLimitTmp.CouponCodeId
                    && retailCouponUsageRepeated.Status == RetailCouponUsageStatus::Completed
                    && ((_salesId && retailCouponUsageRepeated.SalesId == _salesId) || (_transactionId && retailCouponUsageRepeated.TransactionId == _transactionId))
        {
            RetailCouponUsageValidator::updateCouponUsageRemainder(
                _couponCodeIdUsageRemainderMap,
                retailCouponUsage.CouponCodeId,
                retailCouponUsage.Status,
                retailCouponUsage.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustomerSpecificLimits</Name>
				<Source><![CDATA[
    private static void validateCustomerSpecificLimits(
        Map _couponCodeIdUsageRemainderMap,
        RetailCouponCodeUsageLimitTmp retailCouponCodeUsageLimitTmp,
        CustAccount _custAccount,
        SalesIdBase _salesId,
        TransactionID _transactionId)
    {
        RetailCouponUsage retailCouponUsage, retailCouponUsageRepeated;

        while select CouponCodeId
            from retailCouponCodeUsageLimitTmp
                where retailCouponCodeUsageLimitTmp.UsageLimitType == RetailCouponUsageLimitType::CustomerSpecific
            join count(RecId), Status
            from retailCouponUsage
            group by retailCouponUsage.CouponCodeId, retailCouponUsage.Status
                where retailCouponUsage.CouponCodeId == retailCouponCodeUsageLimitTmp.CouponCodeId
                    && retailCouponUsage.CustomerAccount == _custAccount
            notexists join retailCouponUsageRepeated // Skip validation for the same sales transaction to avoid double count.
                where retailCouponUsageRepeated.CouponCodeId == retailCouponCodeUsageLimitTmp.CouponCodeId
                    && retailCouponUsageRepeated.Status == RetailCouponUsageStatus::Completed
                    && ((_salesId && retailCouponUsageRepeated.SalesId == _salesId) || (_transactionId && retailCouponUsageRepeated.TransactionId == _transactionId))
        {
            RetailCouponUsageValidator::updateCouponUsageRemainder(
                _couponCodeIdUsageRemainderMap,
                retailCouponUsage.CouponCodeId,
                retailCouponUsage.Status,
                retailCouponUsage.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCouponUsageRemainder</Name>
				<Source><![CDATA[
    private static void updateCouponUsageRemainder(Map _couponCodeIdUsageRemainderMap, RetailCouponCodeId _couponCodeId, RetailCouponUsageStatus _status, Int64 _count)
    {
        Int64 usageRemainder = _couponCodeIdUsageRemainderMap.lookup(_couponCodeId);

        if (_status == RetailCouponUsageStatus::Completed)
        {
            usageRemainder -= _count;
        }
        else if (_status == RetailCouponUsageStatus::Returned || _status == RetailCouponUsageStatus::Canceled)
        {
            usageRemainder += _count;
        }

        _couponCodeIdUsageRemainderMap.insert(_couponCodeId, usageRemainder);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>