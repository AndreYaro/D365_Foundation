<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAVendorRetentionDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PSAVendorRetentionDP</c> report provides data for the <c>PSACustomerRetention</c>
/// SQL Server Reporting Services (SSRS) report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(PSAVendorRetentionV2)),
    SRSReportParameterAttribute(classStr(PSAVendorRetentionContract))
]
class PSAVendorRetentionDP extends SRSReportDataProviderBase
{
    PSAVendorRetentionTmp       tmpPSAVendorRetention;
    VendInvoiceTrans            vendInvoiceTrans;
    PurchTable                  purchTable;
    PurchLine                   purchLine;
    ProjTable                   projTable;
    VendInvoiceJour             vendInvoiceJour;
    VendTable                   vendTable;
    str                         vendor;
    str                         project;
    boolean                     timeMaterial;
    boolean                     fixedPrice;
    boolean                     investment;
    boolean                     costProject;
    boolean                     internalProject;
    boolean                     timeMaterialBillingMethod;
    boolean                     fixedPriceBillingMethod;
    Transdate                   fromDate, toDate;
    PSAVendorRetentionContract  contract;

    PurchId                     purchIdOld;
    TransDate                   invoiceDateOld;
    VendInvoiceId               invoiceNumberOld;
    ProjId                      projIdOld;

    Query                       query;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// builds query
    /// </summary>
    private void buildQuery()
    {
        QueryBuildDatasource qbdsPurchTable = query.dataSourceTable(tableNum(PurchTable));
        QueryBuildDatasource qbdsProjTable = query.dataSourceTable(tableNum(ProjTable));
        QueryBuildDatasource qbdsVendInvoiceJour = query.dataSourceTable(tableNum(VendInvoiceJour));

        if (vendor)
        {
            SysQuery::findOrCreateRange(qbdsPurchTable, fieldNum(PurchTable, OrderAccount)).value(vendor);
        }

        if (project)
        {
            SysQuery::findOrCreateRange(qbdsProjTable, fieldNum(ProjTable, ProjId)).value(project);
        }

        if (!fromDate)
        {
            fromDate = dateNull();
        }

        if (!toDate)
        {
            toDate = dateMax();
        }

        SysQuery::findOrCreateRange(qbdsVendInvoiceJour, fieldNum(VendInvoiceJour, InvoiceDate)).value(SysQuery::range(fromDate, toDate));

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            QueryBuildDataSource qbdsPSAContractLineItems = query.dataSourceTable(tableNum(PSAContractLineItems));
            qbdsPSAContractLineItems.enabled(true);
            PSAContractLineItemRangesHelper::addBillingMethodRangesToDS(
                qbdsPSAContractLineItems,
                timeMaterialBillingMethod,
                fixedPriceBillingMethod);
        }
        else
        {
            if (timeMaterial == NoYes::Yes)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::TimeMaterial));
            }

            if (fixedPrice)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::FixedPrice));
            }

            if (investment)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::Investment));
            }

            if (internalProject)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::Internal));
            }

            if (costProject)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::Cost));
            }

            if (!(timeMaterial || fixedPrice || investment || internalProject || costProject))
            {
                QueryBuildRange rangeEmptyString = qbdsProjTable.addRange(fieldnum(ProjTable, Type));
                rangeEmptyString.value(queryValue(SysQuery::valueEmptyString()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Currency conversion.
    /// </summary>
    /// <param name="_invoiceDate">
    /// Invoice Date.
    /// </param>
    /// <param name="_invoiceAmount">
    /// Invoice Amount.
    /// </param>
    /// <param name = "_currencyCode">
    /// Currency Code.
    /// </param>
    /// <returns>
    /// Conversion Amount.
    /// </returns>
    private Amount currencyConversion(TransDate _invoiceDate, AmountCur _invoiceAmount, CurrencyCode _currencyCode)
    {
        CurrencyExchangeHelper helper;
        Amount amount;

        if (!_currencyCode)
        {
            amount = _invoiceAmount;
        }
        else
        {
            helper = CurrencyExchangeHelper::newExchangeDate(
                                            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                            _invoiceDate);

            amount = helper.calculateTransactionToAccounting(_currencyCode, _invoiceAmount, true);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAVendorRetentionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>PSACustomerRetentionTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PSACustomerRetentionTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PSAVendorRetentionTmp))
    ]
    public PSAVendorRetentionTmp getPSAVendorRetentionTmp()
    {
        return tmpPSAVendorRetention;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpPSAVendorRetention</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the specified record and inserts it in the temporary table.
    /// </summary>
    /// <param name="_lineamt">
    /// Line Amount.
    /// </param>
    /// <param name="_retainageamt">
    /// Retainage Amount.
    /// </param>
    /// <param name="_releaseamt">
    /// Release Amount.
    /// </param>
    /// <param name="_currCode">
    /// Currency Code
    /// </param>
    /// <param name="_invoiceDate">
    /// Invoice Date.
    /// </param>
    public void insertTmpPSAVendorRetention(AmountCur _lineamt, AmountCur _retainageamt, AmountCur _releaseamt, VendCurrencyCode _currCode, TransDate _invoiceDate )
    {
        if (this.validateRecord(vendInvoiceJour.PurchID, vendInvoiceJour.InvoiceDate, vendInvoiceJour.InvoiceId, projTable.ProjId))
        {
            tmpPSAVendorRetention.VendorInvoiceId                     = vendInvoiceJour.InvoiceId;
            tmpPSAVendorRetention.InvoicedDate                        = vendInvoiceJour.InvoiceDate;
            tmpPSAVendorRetention.VendorInvoiceAmount                 = this.currencyConversion(_invoiceDate, _lineamt, _currCode);
            tmpPSAVendorRetention.POno                                = vendInvoiceJour.PurchID;
            tmpPSAVendorRetention.VendorPaymentRetentionAmount        = this.currencyConversion(_invoiceDate, _retainageamt, _currCode);
            tmpPSAVendorRetention.VendorPaymentRetentionAmountRelease = this.currencyConversion(_invoiceDate, _releaseamt, _currCode);
            tmpPSAVendorRetention.ProjectID                           = projTable.ProjId;
            tmpPSAVendorRetention.VendorName                          = vendTable.name();
            tmpPSAVendorRetention.ProjectName                         = projTable.Name;
            tmpPSAVendorRetention.ProjectType                         = projTable.Type;
            tmpPSAVendorRetention.VendorID                            = vendTable.AccountNum;
            tmpPSAVendorRetention.CurrencyCode                        = Ledger::accountingCurrency(CompanyInfo::current());
            tmpPSAVendorRetention.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SQL Server Reporting Services (SSRS) report.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. It will be called by SSRS at
    /// run time. The method should compute data and populate the data tables that will be returned to
    /// SSRS.
    /// </remarks>
    public void processReport()
    {
        AmountCur        lineamt = 0;
        AmountCur        retainageamt = 0;
        AmountCur        releaseamt = 0;
        VendCurrencyCode currCode;
        TransDate        invoiceDate;
        QueryRun         queryRun;

        contract        = this.parmDataContract() as PSAVendorRetentionContract;

        timeMaterial    = contract.parmTimeMaterial();
        fixedPrice      = contract.parmFixedPrice();
        investment      = contract.parmInvestment();
        costProject     = contract.parmCostProject();
        internalProject = contract.parmInternal();
        vendor          = contract.parmVendAccount();
        project         = contract.parmProjId();
        fromDate        = contract.parmFromDate();
        toDate          = contract.parmToDate();

        timeMaterialBillingMethod = contract.parmTimeMaterialBillingMethod();
        fixedPriceBillingMethod = contract.parmFixedPriceBillingMethod();

        query = this.parmQuery();
        this.buildQuery();
        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            vendInvoiceJour  = queryRun.get(tableNum(VendInvoiceJour));
            purchTable       = queryRun.get(tableNum(PurchTable));
            purchLine        = queryRun.get(tableNum(PurchLine));
            projTable        = queryRun.get(tableNum(ProjTable));

            if (vendInvoiceJour)
            {
                while select CurrencyCode, LineAmount, PSARetainageAmount, PSAReleaseAmount, InvoiceDate from vendInvoiceTrans
                   where vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                       && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                       && vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId
                       && vendInvoiceTrans.numberSequenceGroup == vendInvoiceJour.numberSequenceGroup
                       && vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId
                {
                    lineamt += vendInvoiceTrans.LineAmount;
                    retainageamt += vendInvoiceTrans.PSARetainageAmount;
                    releaseamt += vendInvoiceTrans.PSAReleaseAmount;
                    currCode = vendInvoiceTrans.CurrencyCode;
                    invoiceDate = vendInvoiceTrans.InvoiceDate;
                }

                vendTable = vendInvoiceJour.vendTable_OrderAccount();
                this.insertTmpPSAVendorRetention(lineamt, retainageamt, releaseamt, currCode, invoiceDate);
                lineamt = 0;
                retainageamt = 0;
                releaseamt = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecord</Name>
				<Source><![CDATA[
    private boolean validateRecord(PurchId _purchId, TransDate _invoiceDate, VendInvoiceId _invoiceNumber, ProjId _projId)
    {
        boolean ret = false;

        if (purchIdOld != _purchId || invoiceDateOld != _invoiceDate || invoiceNumberOld != _invoiceNumber || projIdOld != _projId)
        {
            ret =  true;
        }

        purchIdOld = _purchId;
        invoiceDateOld = _invoiceDate;
        invoiceNumberOld = _invoiceNumber;
        projIdOld = _projId;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>