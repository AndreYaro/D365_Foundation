<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionArchiver</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventoryTransactionArchiver</c> archives warehouse inventory transactions.
/// </summary>
internal final class WHSInventoryTransactionArchiver extends SysBatchTask
{
    private const int MaxReferencesToDeletePerIteration = 100;
    private const int MaxItemSetsToDeletePerIteration = 100;

    private WhsInstrumentationLogger instrumentationLogger;

    private int64 numberOfArchivedReferenceCategories;
    private int64 numberOfRowsInsertedInWHSInventoryTransactionArchive;
    private int64 numberOfRowsDeletedFromWHSInventoryItemSetElement;
    private int64 numberOfRowsDeletedFromWHSInventoryTransaction;
    private int64 numberOfRowsUpdatedInWHSWorkInventTrans;
    private int64 numberOfDeletedUnreferencedItemSetElements;

    private int64 numberOfArchivedReferenceCategoriesPerBundle;
    private int64 numberOfRowsInsertedInWHSInventoryTransactionArchivePerBundle;
    private int64 numberOfRowsDeletedFromWHSInventoryItemSetElementPerBundle;
    private int64 numberOfRowsDeletedFromWHSInventoryTransactionPerBundle;
    private int64 numberOfRowsUpdatedInWHSWorkInventTransPerBundle;

    private utcdatetime earliestTransactionDateTimeInArchivalQueue;
    private utcdatetime latestTransactionDateTimeInArchivalQueue;
    private utcdatetime earliestTransactionDateTimeInArchivalBundle;
    private utcdatetime latestTransactionDateTimeInArchivalBundle;

    private boolean isInventoryTransactionOnlyDeleteUnreferencedItemSetElementsFlightEnabled = WHSInventoryTransactionOnlyDeleteUnreferencedItemSetElementsFlight::instance().isEnabled();
    private boolean isWarehouseTransactionsArchiverTransDateTimeFlight = WHSWarehouseTransactionsArchiverTransDateTimeFlight::instance().isEnabled();


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Archive warehouse inventory transactions.
    /// </summary>
    [Hookable(false)]
    public void run()
    {
        #OCCRetryCount
        int infologLine = infologLine();

        try
        {
            int64 deleteCount;

            using (var activityContext = this.instrumentationLogger().inventoryTransactionArchivalActivities().executeArchival())
            {
                this.resetTelemetryMetadataForTransactionsArchival();

                var archivalWatch = System.Diagnostics.Stopwatch::StartNew();

                do
                {
                    deleteCount = 0;

                    ttsbegin;

                    MapEnumerator companyEnumerator = this.getNextReferencesByCompanyToArchive().getEnumerator();

                    deleteCount += this.archiveTransactionsBundle(companyEnumerator);

                    ttscommit;

                    this.updateTelemetryMetadataForTransactionArchival();
                } 
                while (deleteCount == MaxReferencesToDeletePerIteration);

                numberOfDeletedUnreferencedItemSetElements = this.deleteUnreferencedItemSetElements();

                var totalElapsedArchivalTimeInMilliseconds = archivalWatch.get_ElapsedMilliseconds();

                instrumentationLogger.inventoryTransactionArchivalActivities().logArchivalMetadata(
                    activityContext, 
                    numberOfArchivedReferenceCategories,
                    numberOfRowsInsertedInWHSInventoryTransactionArchive,
                    numberOfRowsDeletedFromWHSInventoryItemSetElement,
                    numberOfRowsDeletedFromWHSInventoryTransaction,
                    numberOfRowsUpdatedInWHSWorkInventTrans,
                    numberOfDeletedUnreferencedItemSetElements,
                    earliestTransactionDateTimeInArchivalQueue,
                    latestTransactionDateTimeInArchivalQueue,
                    totalElapsedArchivalTimeInMilliseconds);
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::Error)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::isExceptionErrorCausedBySQLError(infologLine)
                && ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>archiveTransactionsBundle</Name>
				<Source><![CDATA[
    private int64 archiveTransactionsBundle(MapEnumerator _companyEnumerator)
    {
        int64 transactionsBundleDeleteCount = 0;

        using (var activityContext = this.instrumentationLogger().inventoryTransactionArchivalActivities().archiveTransactionsBundle())
        {
            var archivalWatch = System.Diagnostics.Stopwatch::StartNew();

            while (_companyEnumerator.moveNext())
            {
                changecompany(_companyEnumerator.currentKey())
                {
                    transactionsBundleDeleteCount += this.archiveReferences(_companyEnumerator.currentValue());
                    this.cleanupWorkReferences(_companyEnumerator.currentValue());
                }
            }

            var bundleElapsedArchivalTimeInMilliseconds = archivalWatch.get_ElapsedMilliseconds();

            instrumentationLogger.inventoryTransactionArchivalActivities().logArchivalMetadataForTransactionBundle(
                activityContext,
                numberOfArchivedReferenceCategoriesPerBundle,
                numberOfRowsInsertedInWHSInventoryTransactionArchivePerBundle,
                numberOfRowsDeletedFromWHSInventoryItemSetElementPerBundle,
                numberOfRowsDeletedFromWHSInventoryTransactionPerBundle,
                numberOfRowsUpdatedInWHSWorkInventTransPerBundle,
                earliestTransactionDateTimeInArchivalBundle,
                latestTransactionDateTimeInArchivalBundle,
                bundleElapsedArchivalTimeInMilliseconds);
        }

        return transactionsBundleDeleteCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextReferencesByCompanyToArchive</Name>
				<Source><![CDATA[
    private Map getNextReferencesByCompanyToArchive()
    {
        WHSInventoryTransactionArchiveQueueEntry queueEntry;
        Map referencesByCompanyMap = new Map(Types::String, Types::Class);

        this.resetTelemetryMetadataForTransactionsBundleArchival();

        queueEntry.readCommittedLock(true);
        queueEntry.readPast(true);

        while select firstonly100 pessimisticlock crosscompany queueEntry
            order by RecId asc
        {
            Map referenceIdsByReferenceCategoryMap;
            List referenceIds;

            if (referencesByCompanyMap.exists(queueEntry.DataAreaId))
            {
                referenceIdsByReferenceCategoryMap = referencesByCompanyMap.lookup(queueEntry.DataAreaId);
            }
            else
            {
                referenceIdsByReferenceCategoryMap = new Map(Types::Enum, Types::Class);
                referencesByCompanyMap.insert(queueEntry.DataAreaId, referenceIdsByReferenceCategoryMap);
            }

            if (referenceIdsByReferenceCategoryMap.exists(queueEntry.ReferenceCategory))
            {
                referenceIds = referenceIdsByReferenceCategoryMap.lookup(queueEntry.ReferenceCategory);
            }
            else
            {
                referenceIds = new List(Types::String);
                referenceIdsByReferenceCategoryMap.insert(queueEntry.ReferenceCategory, referenceIds);
            }
            referenceIds.addEnd(queueEntry.ReferenceId);

            this.updateEarliestAndLatestTransactionMetadataForArchivalBundle(queueEntry.CreatedDateTime);
        }

        return referencesByCompanyMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>archiveReferences</Name>
				<Source><![CDATA[
    private int64 archiveReferences(Map _referenceIdsByReferenceCategoryMap)
    {
        if (!_referenceIdsByReferenceCategoryMap.elements())
        {
            return 0;
        }

        int64 deleteCount;
        MapEnumerator referenceCategoryEnumerator = _referenceIdsByReferenceCategoryMap.getEnumerator();
        while (referenceCategoryEnumerator.moveNext())
        {
            WHSInventoryTransactionReferenceCategory referenceCategory = referenceCategoryEnumerator.currentKey();
            List referenceIds = referenceCategoryEnumerator.currentValue();
                    
            Query insertQuery = this.buildInventoryTransactionQuery();
            QueryBuildDataSource qbdsInsertQuery = insertQuery.dataSourceTable(tableNum(WHSInventoryTransactionExpandedView));
            qbdsInsertQuery.addRange(fieldNum(WHSInventoryTransactionExpandedView, ReferenceCategory)).value(queryValue(referenceCategory));

            if (isInventoryTransactionOnlyDeleteUnreferencedItemSetElementsFlightEnabled)
            {
                Query deleteInventoryTransactionQuery = new Query();
                QueryBuildDataSource qbdsDeleteInventoryTransaction = deleteInventoryTransactionQuery.addDataSource(tableNum(WHSInventoryTransaction));
                qbdsDeleteInventoryTransaction.addRange(fieldNum(WHSInventoryTransaction, ReferenceCategory)).value(queryValue(referenceCategory));

                Query deleteInventoryTransactionArchiveQueueQuery = new Query();
                QueryBuildDataSource qbdsDeleteQueue = deleteInventoryTransactionArchiveQueueQuery.addDataSource(tableNum(WHSInventoryTransactionArchiveQueueEntry));
                qbdsDeleteQueue.addRange(fieldNum(WHSInventoryTransactionArchiveQueueEntry, ReferenceCategory)).value(queryValue(referenceCategory));

                ListEnumerator referenceIdEnumerator = referenceIds.getEnumerator();
                while (referenceIdEnumerator.moveNext())
                {
                    InventTransRefId referenceId = referenceIdEnumerator.current();

                    qbdsDeleteInventoryTransaction.addRange(fieldNum(WHSInventoryTransaction, ReferenceId)).value(queryValue(referenceId));
                    qbdsInsertQuery.addRange(fieldNum(WHSInventoryTransactionExpandedView, ReferenceId)).value(queryValue(referenceId));
                    qbdsDeleteQueue.addRange(fieldNum(WHSInventoryTransactionArchiveQueueEntry, ReferenceId)).value(queryValue(referenceId));
                }

                WHSInventoryTransactionArchive archive;
                Query::insert_recordset(archive, this.buildInventoryTransactionInsertTargetToSourceMap(insertQuery), insertQuery);
                numberOfRowsInsertedInWHSInventoryTransactionArchivePerBundle += archive.RowCount();

                numberOfRowsDeletedFromWHSInventoryTransactionPerBundle += Query::delete_from(deleteInventoryTransactionQuery, true, true, true);
                deleteCount += Query::delete_from(deleteInventoryTransactionArchiveQueueQuery, true, true, true);
            }
            else
            {
                Query deleteItemSetElementQuery = new Query();
                QueryBuildDataSource qbdsDeleteItemSetElement = deleteItemSetElementQuery.addDataSource(tableNum(WHSInventoryItemSetElement));
                QueryBuildDataSource qbdsItemSetElementToDelete = qbdsDeleteItemSetElement.addDataSource(tableNum(WHSInventoryTransaction));
                qbdsItemSetElementToDelete.joinMode(JoinMode::ExistsJoin);
                qbdsItemSetElementToDelete.addLink(fieldNum(WHSInventoryItemSetElement, ItemSetId), fieldNum(WHSInventoryTransaction, ItemSetId));
                qbdsItemSetElementToDelete.addRange(fieldNum(WHSInventoryTransaction, ReferenceCategory)).value(queryValue(referenceCategory));

                Query deleteInventoryTransactionQuery = new Query();
                QueryBuildDataSource qbdsDeleteInventoryTransaction = deleteInventoryTransactionQuery.addDataSource(tableNum(WHSInventoryTransaction));
                qbdsDeleteInventoryTransaction.addRange(fieldNum(WHSInventoryTransaction, ReferenceCategory)).value(queryValue(referenceCategory));

                Query deleteInventoryTransactionArchiveQueueQuery = new Query();
                QueryBuildDataSource qbdsDeleteQueue = deleteInventoryTransactionArchiveQueueQuery.addDataSource(tableNum(WHSInventoryTransactionArchiveQueueEntry));
                qbdsDeleteQueue.addRange(fieldNum(WHSInventoryTransactionArchiveQueueEntry, ReferenceCategory)).value(queryValue(referenceCategory));

                ListEnumerator referenceIdEnumerator = referenceIds.getEnumerator();
                while (referenceIdEnumerator.moveNext())
                {
                    InventTransRefId referenceId = referenceIdEnumerator.current();

                    qbdsItemSetElementToDelete.addRange(fieldNum(WHSInventoryTransaction, ReferenceId)).value(queryValue(referenceId));
                    qbdsDeleteInventoryTransaction.addRange(fieldNum(WHSInventoryTransaction, ReferenceId)).value(queryValue(referenceId));
                    qbdsInsertQuery.addRange(fieldNum(WHSInventoryTransactionExpandedView, ReferenceId)).value(queryValue(referenceId));
                    qbdsDeleteQueue.addRange(fieldNum(WHSInventoryTransactionArchiveQueueEntry, ReferenceId)).value(queryValue(referenceId));
                }

                WHSInventoryTransactionArchive archive;
                Query::insert_recordset(archive, this.buildInventoryTransactionInsertTargetToSourceMap(insertQuery), insertQuery);
                numberOfRowsInsertedInWHSInventoryTransactionArchivePerBundle += archive.RowCount();

                numberOfRowsDeletedFromWHSInventoryItemSetElementPerBundle += Query::delete_from(deleteItemSetElementQuery, true, true, true);
                numberOfRowsDeletedFromWHSInventoryTransactionPerBundle += Query::delete_from(deleteInventoryTransactionQuery, true, true, true);
                deleteCount += Query::delete_from(deleteInventoryTransactionArchiveQueueQuery, true, true, true);
            }

            numberOfArchivedReferenceCategoriesPerBundle++;
        }
        
        return deleteCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupWorkReferences</Name>
				<Source><![CDATA[
    private void cleanupWorkReferences(Map _referenceIdsByReferenceCategoryMap)
    {
        if (_referenceIdsByReferenceCategoryMap.exists(WHSInventoryTransactionReferenceCategoryEnum::Work))
        {
            WHSWorkInventTrans workInventTrans;
            List referenceIds = _referenceIdsByReferenceCategoryMap.lookup(WHSInventoryTransactionReferenceCategoryEnum::Work);
            ListEnumerator referenceIdEnumerator = referenceIds.getEnumerator();

            if (!isInventoryTransactionOnlyDeleteUnreferencedItemSetElementsFlightEnabled)
            {
                Query deleteItemSetElementQuery = new Query();
                QueryBuildDataSource qbdsDeleteItemSetElement = deleteItemSetElementQuery.addDataSource(tableNum(WHSInventoryItemSetElement));
                QueryBuildDataSource qbdsItemSetElementToDelete = qbdsDeleteItemSetElement.addDataSource(tableNum(WHSWorkInventTrans));
                qbdsItemSetElementToDelete.joinMode(JoinMode::ExistsJoin);
                qbdsItemSetElementToDelete.addLink(fieldNum(WHSInventoryItemSetElement, ItemSetId), fieldNum(WHSWorkInventTrans, ItemSetId));

                while (referenceIdEnumerator.moveNext())
                {
                    InventTransRefId referenceId = referenceIdEnumerator.current();

                    qbdsItemSetElementToDelete.addRange(fieldNum(WHSWorkInventTrans, WorkId)).value(queryValue(referenceId));

                    numberOfRowsUpdatedInWHSWorkInventTransPerBundle += workInventTrans.RowCount();
                }

                numberOfRowsDeletedFromWHSInventoryItemSetElementPerBundle += Query::delete_from(deleteItemSetElementQuery, true, true, true);

                referenceIdEnumerator.reset();
            }

            while (referenceIdEnumerator.moveNext())
            {
                InventTransRefId referenceId = referenceIdEnumerator.current();

                workInventTrans.skipEvents(true);
                workInventTrans.skipDataMethods(true);

                update_recordset workInventTrans
                    setting ItemSetId = emptyGuid()
                    where workInventTrans.WorkId == referenceId;

                numberOfRowsUpdatedInWHSWorkInventTransPerBundle += workInventTrans.RowCount();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnreferencedItemSetElements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the elements in WHSInventoryItemSetElement which are not used by the system.
    /// </summary>
    /// <returns>
    /// The number of deleted elements.
    /// </returns>
    private int64 deleteUnreferencedItemSetElements()
    {
        if (!WHSInventoryTransactionDeleteUnreferencedItemSetElementsFlight::instance().isEnabled() && !isInventoryTransactionOnlyDeleteUnreferencedItemSetElementsFlightEnabled)
        {
            return 0;
        }

        int64 deletedItemSetElements = 0;

        using (var activityContext = this.instrumentationLogger().inventoryTransactionArchivalActivities().deleteUnreferencedItemSets())
        {
            if (WHSInventTransSplitArchiverDeleteTransactionForUnreferencedItemSetElementsFlight::instance().isEnabled())
            {
                Query deleteItemSetElementQuery;
                QueryBuildDataSource qbdsDeleteItemSetElement;
                WHSInventoryItemSetElement inventoryItemSetElement;
                WHSInventoryItemSetElementReferencesView inventoryItemSetElementReferencesView;
                int itemSetsToDelete;

                ttsbegin;

                while select ItemSetId from inventoryItemSetElement group by ItemSetId
                    notexists join inventoryItemSetElementReferencesView
                    where inventoryItemSetElementReferencesView.ItemSetId == inventoryItemSetElement.ItemSetId
                {

                    if (!deleteItemSetElementQuery)
                    {
                        deleteItemSetElementQuery = new Query();
                        qbdsDeleteItemSetElement = deleteItemSetElementQuery.addDataSource(tableNum(WHSInventoryItemSetElement));
                        itemSetsToDelete = 0;
                    }
                    qbdsDeleteItemSetElement.addRange(fieldNum(WHSInventoryItemSetElement, ItemSetId)).value(queryValue(inventoryItemSetElement.ItemSetId));

                    itemSetsToDelete++;

                    if (itemSetsToDelete >= MaxItemSetsToDeletePerIteration)
                    {
                        deletedItemSetElements += Query::delete_from(deleteItemSetElementQuery, true, true, true);
                        deleteItemSetElementQuery = null;

                        ttscommit;
                        ttsbegin;
                    }
                }

                if (deleteItemSetElementQuery)
                {
                    deletedItemSetElements += Query::delete_from(deleteItemSetElementQuery, true, true, true);
                }

                ttscommit;

                return deletedItemSetElements;
            }
            else
            {
                Query deleteItemSetElementQuery = new Query();
                QueryBuildDataSource qbdsDeleteItemSetElement = deleteItemSetElementQuery.addDataSource(tableNum(WHSInventoryItemSetElement));
                QueryBuildDataSource qbdsItemSetElementToDelete = qbdsDeleteItemSetElement.addDataSource(tableNum(WHSInventoryItemSetElementReferencesView));
                qbdsItemSetElementToDelete.joinMode(JoinMode::NoExistsJoin);
                qbdsItemSetElementToDelete.addLink(fieldNum(WHSInventoryItemSetElement, ItemSetId), fieldNum(WHSInventoryItemSetElementReferencesView, ItemSetId));

                return Query::delete_from(deleteItemSetElementQuery, true, true, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the description for the batch job.
    /// </summary>
    /// <returns>
    /// The description for the batch job.
    /// </returns>
    [Hookable(false)]
    public static ClassDescription description()
    {
        return "@WHSInventory:WHSInventoryTransactionArchiver_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecurrence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates recurrence.
    /// </summary>
    /// <param name = "_batchJobId">Batch job RecId.</param>
    /// <param name = "_recurrence">Recurrence data that needs to be valided.</param>
    /// <returns>true if _recurrence is valid; otherwise, false.</returns>
    [Hookable(false)]
    public boolean validateRecurrence(RecId _batchJobId, SysRecurrenceData _recurrence)
    {
        return WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleForBatchExecution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules a job to run using given recurrence data.
    /// </summary>
    /// <param name="_recurrenceData">
    /// A container holding the recurrence data. Defaults to every 10 minutes.
    /// </param>
    [SysObsolete('The job is scheduled by process automation', true, 05\12\2022),
     Hookable(false)]
    public void scheduleForBatchExecution(SysRecurrenceData _recurrenceData = SysBatchTask::getEveryXMinutesRecurrenceData(10))
    {
        // Don't schedule for batch execution. The archival will be executed from process automation. 
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventoryTransactionQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected Query buildInventoryTransactionQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(WHSInventoryTransactionExpandedView));
        query.clearAllFields();
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventoryTransactionOriginId));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, Type));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, ReferenceCategory));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventoryReferenceCategory));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, ReferenceId));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, TransDateTime));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventSiteId));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventLocationId));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, WMSLocationId));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, LicensePlateId));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, ItemId));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, HandlingQty));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, HandlingWeight));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, configId));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventColorId));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventStyleId));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventSizeId));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventVersionId));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventGtdId_RU));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventOwnerId_RU));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventProfileId_RU));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventBatchId));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventSerialId));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventStatusId));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventDimension1));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventDimension2));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventDimension3));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventDimension4));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventDimension5));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventDimension6));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventDimension7));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventDimension8));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventDimension9));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventDimension10));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventDimension11));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionExpandedView, InventDimension12));

        if (isWarehouseTransactionsArchiverTransDateTimeFlight)
        {
            // Transactions are sorted by TransDateTime and RecId in the UI. The order must be the same after archiving.
            qbds.addSortField(fieldNum(WHSInventoryTransactionExpandedView, TransDateTime), SortOrder::Ascending);
            qbds.addSortField(fieldNum(WHSInventoryTransactionExpandedView, RecId), SortOrder::Ascending);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventoryTransactionInsertTargetToSourceMap</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected Map buildInventoryTransactionInsertTargetToSourceMap(Query _query)
    {
        Map map = new Map(Types::String, Types::Container);

        int uniqueId = _query.dataSourceTable(tableNum(WHSInventoryTransactionExpandedView)).uniqueId();

        map.insert(fieldStr(WHSInventoryTransactionArchive, InventoryTransactionOriginId), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventoryTransactionOriginId)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, Type), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, Type)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, ReferenceCategory), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, ReferenceCategory)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventoryReferenceCategory), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventoryReferenceCategory)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, ReferenceId), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, ReferenceId)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, TransDateTime), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, TransDateTime)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventSiteId), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventSiteId)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventLocationId), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventLocationId)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, WMSLocationId), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, WMSLocationId)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, LicensePlateId), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, LicensePlateId)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, ItemId), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, ItemId)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, HandlingQty), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, HandlingQty)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, HandlingWeight), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, HandlingWeight)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, configId), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, configId)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventColorId), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventColorId)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventStyleId), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventStyleId)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventSizeId), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventSizeId)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventVersionId), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventVersionId)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventGtdId_RU), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventGtdId_RU)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventOwnerId_RU), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventOwnerId_RU)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventProfileId_RU), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventProfileId_RU)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventBatchId), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventBatchId)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventSerialId), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventSerialId)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventStatusId), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventStatusId)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventDimension1), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventDimension1)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventDimension2), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventDimension2)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventDimension3), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventDimension3)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventDimension4), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventDimension4)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventDimension5), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventDimension5)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventDimension6), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventDimension6)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventDimension7), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventDimension7)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventDimension8), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventDimension8)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventDimension9), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventDimension9)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventDimension10), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventDimension10)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventDimension11), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventDimension11)]);
        map.insert(fieldStr(WHSInventoryTransactionArchive, InventDimension12), [uniqueId, fieldStr(WHSInventoryTransactionExpandedView, InventDimension12)]);

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTelemetryMetadataForTransactionArchival</Name>
				<Source><![CDATA[
    private void updateTelemetryMetadataForTransactionArchival()
    {
        numberOfArchivedReferenceCategories += numberOfArchivedReferenceCategoriesPerBundle;
        numberOfRowsInsertedInWHSInventoryTransactionArchive += numberOfRowsInsertedInWHSInventoryTransactionArchivePerBundle;
        numberOfRowsDeletedFromWHSInventoryItemSetElement += numberOfRowsDeletedFromWHSInventoryItemSetElementPerBundle;
        numberOfRowsDeletedFromWHSInventoryTransaction += numberOfRowsDeletedFromWHSInventoryTransactionPerBundle;
        numberOfRowsUpdatedInWHSWorkInventTrans += numberOfRowsUpdatedInWHSWorkInventTransPerBundle;

        if (earliestTransactionDateTimeInArchivalBundle < earliestTransactionDateTimeInArchivalQueue)
        {
            earliestTransactionDateTimeInArchivalQueue = earliestTransactionDateTimeInArchivalBundle;
            return;
        }

        if (latestTransactionDateTimeInArchivalQueue > latestTransactionDateTimeInArchivalBundle)
        {
            latestTransactionDateTimeInArchivalQueue = latestTransactionDateTimeInArchivalBundle;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEarliestAndLatestTransactionMetadataForArchivalBundle</Name>
				<Source><![CDATA[
    private void updateEarliestAndLatestTransactionMetadataForArchivalBundle(utcdatetime transactionCreatedDateTime)
    {
        if (earliestTransactionDateTimeInArchivalBundle < transactionCreatedDateTime)
        {
            earliestTransactionDateTimeInArchivalBundle = transactionCreatedDateTime;
            return;
        }

        if (transactionCreatedDateTime > latestTransactionDateTimeInArchivalBundle)
        {
            latestTransactionDateTimeInArchivalBundle = transactionCreatedDateTime;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTelemetryMetadataForTransactionsArchival</Name>
				<Source><![CDATA[
    private void resetTelemetryMetadataForTransactionsArchival()
    {
        numberOfArchivedReferenceCategories = 0;
        numberOfRowsInsertedInWHSInventoryTransactionArchive = 0;
        numberOfRowsDeletedFromWHSInventoryItemSetElement = 0;
        numberOfRowsDeletedFromWHSInventoryTransaction = 0;
        numberOfRowsUpdatedInWHSWorkInventTrans = 0;

        earliestTransactionDateTimeInArchivalQueue = DateTimeUtil::minValue();
        latestTransactionDateTimeInArchivalQueue = DateTimeUtil::maxValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTelemetryMetadataForTransactionsBundleArchival</Name>
				<Source><![CDATA[
    private void resetTelemetryMetadataForTransactionsBundleArchival()
    {
        numberOfArchivedReferenceCategoriesPerBundle = 0;
        numberOfRowsInsertedInWHSInventoryTransactionArchivePerBundle = 0;
        numberOfRowsDeletedFromWHSInventoryItemSetElementPerBundle = 0;
        numberOfRowsDeletedFromWHSInventoryTransactionPerBundle = 0;
        numberOfRowsUpdatedInWHSWorkInventTransPerBundle = 0;

        earliestTransactionDateTimeInArchivalQueue = DateTimeUtil::minValue();
        latestTransactionDateTimeInArchivalBundle = DateTimeUtil::maxValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    internal final WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>