<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdPickListController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdPickListController</c> class is the controller class for <c>ProdPickList</c> SSRS report.
/// </summary>
public class ProdPickListController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPackedParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the packed parameters in the <c>SetupPrintPickList</c> table field.
    /// </summary>
    /// <param name="_setupPrintPickList">
    /// The <c>SetupPrintPickList</c> table field.
    /// </param>
    protected void getPackedParameters(container _setupPrintPickList)
    {
        #define.parmShowTransactionsPosition(1)
        #define.parmUseDeliveryLayoutPosition(2)
        #define.parmUseQuantityPosition(3)
        #define.parmViewConfigIdPosition(4)
        #define.parmViewInventBatchIdPosition(5)
        #define.parmViewInventColorIdPosition(6)
        #define.parmViewInventLocationIdPosition(7)
        #define.parmViewInventSerialIdPosition(8)
        #define.parmViewInventSiteIdPosition(9)
        #define.parmViewInventSizeIdPosition(10)
        #define.parmViewWMSLocationIdPosition(11)
        #define.parmViewWMSPalletIdPosition(12)
        #define.parmPrinterSettingsPosition(13)
        #define.parmViewInventStyleIdPosition(14)
        #define.parmShowQtyOnHandPosition(15)
        #define.parmViewInventVersionIdPosition(16)
        #define.parmViewInventStatus(17)
        #define.parmViewLicensePlateId(18)
        #define.parmViewInventOwnerId(19)

        ProdPicklistContract contract = this.parmReportContract().parmRdpContract() as ProdPicklistContract;

        contract.parmShowTransactions(conPeek(_setupPrintPickList,#parmShowTransactionsPosition));
        contract.parmUseDeliveryLayout(conPeek(_setupPrintPickList,#parmUseDeliveryLayoutPosition));
        contract.parmUseQuantity(conPeek(_setupPrintPickList,#parmUseQuantityPosition));
        contract.parmInventDimViewContract().parmViewConfigId(conPeek(_setupPrintPickList,#parmViewConfigIdPosition));
        contract.parmInventDimViewContract().parmViewInventBatchId(conPeek(_setupPrintPickList,#parmViewInventBatchIdPosition));
        contract.parmInventDimViewContract().parmViewInventColorId(conPeek(_setupPrintPickList,#parmViewInventColorIdPosition));
        contract.parmInventDimViewContract().parmViewInventStyleId(conPeek(_setupPrintPickList,#parmViewInventStyleIdPosition));
        contract.parmInventDimViewContract().parmViewInventLocationId(conPeek(_setupPrintPickList,#parmViewInventLocationIdPosition));
        contract.parmInventDimViewContract().parmViewInventSerialId(conPeek(_setupPrintPickList,#parmViewInventSerialIdPosition));
        contract.parmInventDimViewContract().parmViewInventSiteId(conPeek(_setupPrintPickList,#parmViewInventSiteIdPosition));
        contract.parmInventDimViewContract().parmViewInventSizeId(conPeek(_setupPrintPickList,#parmViewInventSizeIdPosition));
        contract.parmInventDimViewContract().parmViewWMSLocationId(conPeek(_setupPrintPickList,#parmViewWMSLocationIdPosition));
        contract.parmInventDimViewContract().parmViewWMSPalletId(conPeek(_setupPrintPickList,#parmViewWMSPalletIdPosition));
        contract.parmInventDimViewContract().parmViewInventStatus(conPeek(_setupPrintPickList,#parmViewInventStatus));
        contract.parmInventDimViewContract().parmViewLicensePlateId(conPeek(_setupPrintPickList,#parmViewLicensePlateId));
        contract.parmInventDimViewContract().parmViewInventOwnerId_RU(conPeek(_setupPrintPickList,#parmViewInventOwnerId));
        contract.parmInventDimViewContract().parmViewInventVersionId(conPeek(_setupPrintPickList,#parmViewInventVersionIdPosition));
        contract.parmShowQtyOnHand(conPeek(_setupPrintPickList,#parmShowQtyOnHandPosition));

        SRSPrintDestinationSettings printSettings = this.getDataContractObject(classStr(SRSPrintDestinationSettings));
        if (!printSettings)
        {
            printSettings = new SRSPrintDestinationSettings();
            this.parmReportContract().parmPrintSettings(printSettings);
        }
        printSettings.unpack(conPeek(_setupPrintPickList,#parmPrinterSettingsPosition));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBasedOnParmStartUp</Name>
				<Source><![CDATA[
    private void initializeBasedOnParmStartUp(ProdParmStartUp _prodParmStartUp)
    {
        if ((_prodParmStartUp || this.parmArgs().name() == formStr(ProdSetupStartUp))
             && _prodParmStartUp.SetupPrintPickList)
        {
            this.getPackedParameters(_prodParmStartUp.SetupPrintPickList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets query ranges based on the caller.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// The method is called from an invalid path.
    /// </exception>
    protected void prePromptModifyContract()
    {
        if (this.parmArgs())
        {
            this.parmShowDialog(!args.parmEnum());

            if (this.parmArgs().dataset())
            {
                if (!this.initFromArgs())
                {
                    throw error(strFmt("@SYS24571",funcName()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query ranges and the picking list properties before the report prompts.
    /// </summary>
    /// <returns>
    /// true, if initialization was successful; otherwise, false.
    /// </returns>
    protected boolean initFromArgs()
    {
        ProdParmStartUp prodParmStartUp;

        Query query = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());

        QueryBuildDataSource queryBuildDataSource   = SysQuery::findOrCreateDataSource(query, tableNum(ProdJournalBOM));
        QueryBuildRange      queryBuildRangeProd    = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(ProdJournalBOM,ProdId));
        QueryBuildRange      queryBuildRangeJournal = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(ProdJournalBOM,JournalId));

        if (this.parmArgs().dataset() ==  tableNum(ProdJournalBOM))
        {
            ProdJournalBOM prodJournalBOM = this.parmArgs().record();
            queryBuildRangeProd.value(prodJournalBOM.ProdId);
            queryBuildRangeJournal.value(prodJournalBOM.JournalId);
            return true;
        }
        if (this.parmArgs().caller() is ProdUpdStartUp)
        {
            ProdUpdStartUp prodUpdStartUp = this.parmArgs().caller();
            prodParmStartUp = prodUpdStartUp.parmParmBuffer() as ProdParmStartUp;

            this.initializeBasedOnParmStartUp(prodParmStartUp);

            queryBuildRangeProd.value(prodParmStartUp.ProdId);
            queryBuildRangeJournal.value(prodUpdStartUp.parmPrintJournalId());
            this.parmShowDialog(!this.parmArgs().parmEnum());
            return true;
        }
        if (this.parmArgs().dataset() ==  tableNum(ProdParmStartUp))
        {
            prodParmStartUp = this.parmArgs().record() as ProdParmStartUp;

            this.initializeBasedOnParmStartUp(prodParmStartUp);

            if (this.parmArgs().menuItemName() == menuitemOutputStr(ProdPicklist))
            {
                this.parmShowDialog(false);
            }
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs and saves the contract and user values into the <c>SetupPrintPickList</c> table field.
    /// </summary>
    protected void preRunModifyContract()
    {
        container savedParms;

        ProdPicklistContract contract = this.parmReportContract().parmRdpContract() as ProdPicklistContract;
        if (contract)
        {
            contract.parmIsPdsCatchWeightEnabled(#PdsCatchWeightEnabled);
        }

        if (this.parmArgs() && this.parmArgs().dataset() && this.parmArgs().dataset() ==  tableNum(ProdParmStartUp))
        {
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmShowTransactions());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmUseDeliveryLayout());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmUseQuantity());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewConfigId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventBatchId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventColorId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventLocationId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventSerialId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventSiteId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventSizeId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewWMSLocationId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewWMSPalletId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, this.parmReportContract().parmPrintSettings().pack());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventStyleId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmShowQtyOnHand());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventVersionId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventStatus());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewLicensePlateId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventOwnerId_RU());

            ProdParmStartUp prodParmStartUpDataset = this.parmArgs().record();
            prodParmStartUpDataset.SetupPrintPickList = savedParms;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    protected container preRunValidate()
    {
        // This report is only containing dynamic filters and via testing it's been determined
        // that on warm box it performs under 10 seconds with a 500 records and under 10 minutes
        // with 50000 records. The rest of the contract parameters just define layout and UI, so
        // no additional filtering on those needs to be done in this method.
        // The granularity of the query is determined by the join of ProdJournalBOM and ProdBOM tables.
        #define.ErrorLimit(50000)
        #define.WarningLimit(500)

        container               validateResult;
        Query                   firstQuery = this.getFirstQuery();
        int                     rowCount = QueryRun::getQueryRowCount(firstQuery, #ErrorLimit + 1);

        if (rowCount > #ErrorLimit)
        {
            validateResult = [SrsReportPreRunState::Error];
        }
        else if (rowCount > #WarningLimit)
        {
            validateResult = [SrsReportPreRunState::Warning];
        }
        else
        {
            validateResult = super();
        }

        return validateResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.parmArgs().menuItemName() == menuitemOutputStr(ProdPicklistShowDialog))
        {
            this.preRunModifyContract(); // call preRun to save parameters - don't call super() since we only want to show a report parameters dialog
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailzes the <c>SRSReportRun</c>, assign parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        SrsReportRunController    controller = new ProdPickListController();
        controller.parmReportName(ssrsReportStr(ProdPickList, Report));
        controller.parmArgs(_args);
        controller.parmLoadFromSysLastValue(_args.menuItemName() != menuitemOutputStr(ProdPicklistShowDialog));
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>