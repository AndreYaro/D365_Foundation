<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLabelChangeDataFetcher_PriceJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Label change journal data fetcher for the Price agreement.
/// </summary>
class RetailLabelChangeDataFetcher_PriceJour extends RetailLabelChangeDataFetcherFromSource
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcQty</Name>
				<Source><![CDATA[
    protected Qty calcQty()
    {
        InventSumDateDim inventSumDateDim;
        InventLocation inventLocation;
        InventDimParm inventDimParm;
        InventDim inventDimLocal;
        InventQty availQty;

        inventLocation = InventLocation::find(storeTable.inventLocation);
        inventDimLocal.data(inventDim);
        inventDimLocal.InventLocationId = inventLocation.InventLocationId;
        inventDimLocal.initFromInventLocation(inventLocation);
        inventDimLocal = InventDim::findOrCreate(inventDimLocal);
        inventDimParm.initFromInventDim(inventDimLocal);
        inventSumDateDim = InventSumDateDim::newParameters(priceDate, line.(this.lineItemIdFieldId()), inventDimLocal, inventDimParm);
        availQty = inventSumDateDim.postedQty() + inventSumDateDim.receivedQty() - inventSumDateDim.deductedQty();

        return availQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchNextStore</Name>
				<Source><![CDATA[
    protected boolean fetchNextStore()
    {
        boolean ret = false;

        if (storeTable)
        {
            next storeTable;
            ret = storeTable ? true : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchStore</Name>
				<Source><![CDATA[
    protected boolean fetchStore()
    {
        PriceDiscAdmTrans priceDiscAdmTrans = line;
        PriceDiscGroup priceDiscGroup;
        RetailChannelPriceGroup channelPriceGroup;
        boolean result = false;
        
        switch (priceDiscAdmTrans.AccountCode)
        {
            case PriceDiscPartyCodeType::Table:
                break;
            case PriceDiscPartyCodeType::GroupId:
                select StoreNumber, generatesItemLabels, generatesShelfLabels, createLabelsForZeroPrice, OMOperatingUnitID, InventLocation, InventLocationDataAreaId from storeTable
                    exists join channelPriceGroup
                        where channelPriceGroup.RetailChannel == storeTable.RecId
                    exists join priceDiscGroup
                        where priceDiscGroup.RecId == channelPriceGroup.PriceGroup
                           && priceDiscGroup.GroupId == priceDiscAdmTrans.AccountRelation;
                result = storeTable ? true : false;
                break;
            case PriceDiscPartyCodeType::All:
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected Query initQuery()
    {
        Query ret;
        QueryBuildDataSource qbds_line;
        QueryBuildRange qbr;

        ret = super();
        qbds_line = ret.dataSourceTable(this.lineTableId());
        qbds_line.addSelectionField(fieldNum(PriceDiscAdmTrans, AccountRelation), SelectionField::Database);
        qbds_line.addSelectionField(fieldNum(PriceDiscAdmTrans, AccountCode), SelectionField::Database);
        qbr = qbds_line.addRange(fieldNum(PriceDiscAdmTrans, AccountCode));
        // Add range to filter only Group account code entries.
        qbr.value(queryValue(PriceDiscPartyCodeType::GroupId));
        qbr = qbds_line.addRange(fieldNum(PriceDiscAdmTrans, Relation));
        // Add range to filter only Price (sales) entries.
        qbr.value(queryValue(PriceType::PriceSales));
        qbr = qbds_line.addRange(fieldNum(PriceDiscAdmTrans, ItemCode));
        // Add range to filter only entries having direct item reference.
        qbr.value(queryValue(PriceDiscProductCodeType::Table));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDeliveryDateFieldId</Name>
				<Source><![CDATA[
    protected FieldId lineDeliveryDateFieldId()
    {
        return fieldNum(PriceDiscAdmTrans, FromDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineItemIdFieldId</Name>
				<Source><![CDATA[
    protected FieldId lineItemIdFieldId()
    {
        return fieldNum(PriceDiscAdmTrans, ItemRelation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineJournalNumFieldId</Name>
				<Source><![CDATA[
    protected FieldId lineJournalNumFieldId()
    {
        return fieldNum(PriceDiscAdmTrans, JournalNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQtyFieldId</Name>
				<Source><![CDATA[
    protected FieldId lineQtyFieldId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineTableId</Name>
				<Source><![CDATA[
    protected TableId lineTableId()
    {
        return tableNum(PriceDiscAdmTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineUnitIdFieldId</Name>
				<Source><![CDATA[
    protected FieldId lineUnitIdFieldId()
    {
        return fieldNum(PriceDiscAdmTrans, UnitId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineVariantIdFieldId</Name>
				<Source><![CDATA[
    protected FieldId lineVariantIdFieldId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeMissingMessage</Name>
				<Source><![CDATA[
    protected str storeMissingMessage()
    {
        PriceDiscAdmTrans priceDiscAdmTrans = line;

        return
            strFmt("@SYP4880990",
                priceDiscAdmTrans.itemRelation, priceDiscAdmTrans.AccountRelation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLine</Name>
				<Source><![CDATA[
    protected boolean validateLine()
    {
        PriceDiscAdmTrans priceDiscAdmTrans;
        RetailChannelAssortedProductView assortedProductView;
        InventTable inventTable;
        boolean ret;

        ret = super();

        if (ret)
        {
            // Validate item belong to an assortment associated with a store
            select firstOnly ProductID from assortedProductView
                where assortedProductView.OMOperatingUnitId == storeTable.OMOperatingUnitID
                   && assortedProductView.ValidFrom >= dateNull()
                   && assortedProductView.ValidFrom <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                   && assortedProductView.ValidTo >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                   && assortedProductView.ValidTo <= maxDate()
                exists join inventTable
                    where inventTable.Product == assortedProductView.ProductID
                       && inventTable.ItemId == line.(this.lineItemIdFieldId());

            if (!assortedProductView)
            {
                priceDiscAdmTrans = line;
                ret = checkFailed(
                    strFmt("@SYP4880991",
                        priceDiscAdmTrans.ItemRelation, priceDiscAdmTrans.AccountRelation, storeTable.StoreNumber));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>