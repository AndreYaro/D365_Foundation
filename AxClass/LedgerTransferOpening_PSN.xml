<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransferOpening_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransferOpening_PSN</c> class creates closing and opening transactions for general ledger year end processing for public sector.
/// </summary>
/// <remarks>
/// Closing transactions are created to bring the balance of nominal accounts to 0.  Opening transactions are created for real accounts to transfer
/// their balance to the opening period of the next fiscal year.
/// </remarks>
class LedgerTransferOpening_PSN extends LedgerTransferOpening implements BatchRetryable
{
    private static const Integer currentVersion_PS = 5;
    
    #LOCALMACRO.CurrentList_PS
        closingFiscalYearName,
        balanceFromPeriod,
        balanceToPeriod,
        closeDateFromPeriod,
        balanceOpenFromPeriod,
        openDateFromPeriod,
        selectFund,
        fromFund,
        toFund,
        runPreview,
        profitLossDefaultDimensions,
        profitLossCloseDimensionEnumeration,
        fiscalCalendarYearNameRecId,
        isPublicSectorYearEndProcessingEnabled
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerTransferOpening_PSN</c> object.
    /// </summary>
    /// <returns>A new instance of the <c>LedgerTransferOpening</c> object.</returns>
    public static LedgerTransferOpening_PSN construct()
    {
        return new LedgerTransferOpening_PSN(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(boolean _isPublicSectorEnabled)
    {
        super(_isPublicSectorEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPublicSectorYearEndClosingPreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the preview form before the closing and opening transactions are committed to the database for public sector.
    /// year end closing.
    /// </summary>
    /// <exception cref="M:Exception::Deadlock">
    /// A transaction deadlock condition exists in the database.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    /// A conflict with another transaction occurred in the database and the transaction was not successful.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    /// A conflict with another transaction occurred in the database.
    /// </exception>
    public void runPublicSectorYearEndClosingPreview()
    {
        Counter                                 progressTotal;
        QueryRun                                queryRun;
        LedgerPostingGeneralJournalController   generalJournalController;

        if (processState == LedgerTransferOpeningProcessState::PostToGL)
        {
            if (!ledgerParameters.DeleteOpening)
            {
                this.adjustUltimoTrans(null);
                this.adjustPrimoTrans();
            }

            generalJournalController = LedgerPostingGeneralJournalController::construct();

            if (this.runPreview())
            {
                this.createClosingOpeningTransactions(generalJournalController);
            }

            // Flush the cached value of the last opening balances transfer.
            if (LedgerFiscalCloseLastYearEndCloseDateCacheFlight::instance().isEnabled())
            {
                LedgerCache::removeValue(LedgerCacheScope::LastClosingDateByLedger, [Ledger::current()]);
            }
            else
            {
                LedgerCache::clearScope(LedgerCacheScope::LastClosingDateByLedger);
            }

            generalJournalController.transfer();

            if (!silent)
            {
                info(strFmt("@SYS67161", periodStart, periodEnd));
            }
        }
        else
        {
            try
            {
                if (!silent)
                {
                    this.progressInit("@SYS28702", progressTotal, #AviFormLetter);
                    progress.setText("@SYS26577");
                }

                // TASK: LedgerTransferOpeningProcessState::Delete
                this.cleanupTemporaryProcessingTables(SysOperationExecutionMode::Synchronous);

                // <GSA>
                if (ledgerParameters.IsZakatEnabled_SA)
                {
                    this.postZakatValue_SA();
                }
                // </GSA>

                if (ledgerParameters.DeleteOpening)
                {
                    // Delete existing opening and system created ultimo records.
                    this.deleteExistingRecords();

                    if (methodOperations == OpeningMethod::Reset    &&
                        methodStatus == OpeningMethod::Reset)
                    {
                        // Dialog specified that only existing opening balances should be deleted.
                        return;
                    }
                }

                this.checkParameters();

                startRecId = int64Min();
                endRecId = int64Max();

                // TASK: LedgerTransferOpeningProcessState::PublicSectorNominal
                if (ledgerParameters.PeriodClosingPosting)
                {
                    // Nominal accounts processed for closing.
                    ledgerTransferOpeningType = LedgerTransferOpeningType::PublicSectorNominal;

                    this.createLedgerDimensionsForPublicSector(ledgerTransferOpeningType, AccountCloseType::Nominal);
                    this.createHashLinksForPublicSector(ledgerTransferOpeningType, AccountCloseType::Nominal);
                    this.createDimensionLinks(ledgerTransferOpeningType);

                    queryRun = new QueryRun(this.initQueryForPublicSector(AccountCloseType::Nominal, ledgerTransferOpeningType));
                    this.processQueryForPublicSector(queryRun, LedgerOpenCloseTransType::Close);
                }

                // TASK: LedgerTransferOpeningProcessState::PublicSectorReal
                if (ledgerParameters.DeleteOpening)
                {
                    ledgerTransferOpeningType = LedgerTransferOpeningType::PublicSectorRealDeleteOpening;
                }
                else
                {
                    ledgerTransferOpeningType = LedgerTransferOpeningType::PublicSectorRealOther;
                }

                this.createLedgerDimensionsForPublicSector(ledgerTransferOpeningType, AccountCloseType::Real);
                this.createHashLinksForPublicSector(ledgerTransferOpeningType, AccountCloseType::Real);
                this.createDimensionLinks(ledgerTransferOpeningType);

                queryRun = new QueryRun(this.initQueryForPublicSector(AccountCloseType::Real, ledgerTransferOpeningType));
                this.processQueryForPublicSector(queryRun, LedgerOpenCloseTransType::Open);

                // TASK: LedgerTransferOpeningProcessState::PostToGL
                this.processNewClosingRecordsForOpening();

                if (!ledgerParameters.DeleteOpening)
                {
                    this.adjustUltimoTrans(null);
                    this.adjustPrimoTrans();
                }

                this.progressHide();

                generalJournalController = LedgerPostingGeneralJournalController::construct();

                if (this.runPreview())
                {
                    this.createClosingOpeningTransactions(generalJournalController);
                }

                generalJournalController.transfer();

                // TASK: rebuild
                this.rebuildBalances();

                // TASK: LedgerTransferOpeningProcessState::CleanUp
                this.cleanupTemporaryProcessingTables(SysOperationExecutionMode::Synchronous);

                // Flush the cached value of the last opening balances transfer.
                if (LedgerFiscalCloseLastYearEndCloseDateCacheFlight::instance().isEnabled())
                {
                    LedgerCache::removeValue(LedgerCacheScope::LastClosingDateByLedger, [Ledger::current()]);
                }
                else
                {
                    LedgerCache::clearScope(LedgerCacheScope::LastClosingDateByLedger);
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    retry;
                }
            }

            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
        if (!silent)
        {
            if (createdTransactions)
            {
                info(strFmt("@SYS67161", periodStart, periodEnd));
            }
            else
            {
                info("@SYS28652");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the operations to create closing and opening transactions for public sector when no preview form is shown.
    /// </summary>
    public void run()
    {
        QueryRun                                queryRun;
        DimensionAttributeSetItem               dimAttrSetItem;
        BatchHeader                             batchHeader;
        LedgerTransferOpening                   primaryTask;
        LedgerTransferOpening                   deleteTask;
        LedgerTransferOpening                   nominalTask;
        LedgerTransferOpening                   realTask;
        LedgerTransferOpening                   linkCreationTask;
        LedgerTransferOpening                   postingTask;
        LedgerTransferOpening                   cleanupTask;
        LedgerTransferOpening                   rebuildTask;
        AccountCloseType                        accountCloseType;
        LedgerOpenCloseTransType                ledgerOpenCloseTransType;
        LedgerPostingGeneralJournalController   generalJournalController;

        periodStart = LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(calendarRecId, periodEnd);

        switch (processState)
        {
            case LedgerTransferOpeningProcessState::TransferOpening:
                batchHeader = BatchHeader::getCurrentBatchHeader();
                if (batchHeader == null)
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                // TASK: delete
                deleteTask = this.createTask(LedgerTransferOpeningProcessState::Delete);

                batchHeader.addRuntimeTask(deleteTask, this.parmCurrentBatch().RecId);

                if (ledgerParameters.DeleteOpening
                    && methodOperations == OpeningMethod::Reset
                    && methodStatus == OpeningMethod::Reset)
                {
                    // stop because only the existing opening balances should be deleted
                    batchHeader.save();

                    return;
                }

                if (ledgerParameters.PeriodClosingPosting)
                {
                    // TASK: public sector nominal
                    nominalTask = this.createTask(LedgerTransferOpeningProcessState::PublicSectorNominal, LedgerTransferOpeningType::PublicSectorNominal);

                    batchHeader.addRuntimeTask(nominalTask, this.parmCurrentBatch().RecId);

                    // the PS nominal task is dependent on the delete task
                    batchHeader.addDependency(nominalTask, deleteTask, BatchDependencyStatus::Finished);
                }

                // TASK: public sector real
                if (ledgerParameters.DeleteOpening)
                {
                    realTask = this.createTask(LedgerTransferOpeningProcessState::PublicSectorReal, LedgerTransferOpeningType::PublicSectorRealDeleteOpening);
                }
                else
                {
                    realTask = this.createTask(LedgerTransferOpeningProcessState::PublicSectorReal, LedgerTransferOpeningType::PublicSectorRealOther);
                }

                batchHeader.addRuntimeTask(realTask, this.parmCurrentBatch().RecId);

                // the PS real task is dependent on the delete task
                batchHeader.addDependency(realTask, deleteTask, BatchDependencyStatus::Finished);

                // TASK: post to GL
                postingTask = this.createTask(LedgerTransferOpeningProcessState::PostToGL);

                batchHeader.addRuntimeTask(postingTask, this.parmCurrentBatch().RecId);

                // the post to GL task is dependent on the PS nominal and real tasks
                if (nominalTask)
                {
                    // PS nominal task is only initialized when ledgerParameters.PeriodClosingPosting is enabled
                    batchHeader.addDependency(postingTask, nominalTask, BatchDependencyStatus::Finished);
                }

                batchHeader.addDependency(postingTask, realTask, BatchDependencyStatus::Finished);

                // TASK: rebuild
                rebuildTask = this.createTask(LedgerTransferOpeningProcessState::RebuildBalances);

                batchHeader.addRuntimeTask(rebuildTask, this.parmCurrentBatch().RecId);

                // Rebuilding balances task is dependent on the post to GL task
                batchHeader.addDependency(rebuildTask, postingTask, BatchDependencyStatus::Finished);

                // TASK: cleanup
                cleanupTask = this.createTask(LedgerTransferOpeningProcessState::Cleanup);

                batchHeader.addRuntimeTask(cleanupTask, this.parmCurrentBatch().RecId);

                // the cleanup task is dependent on the posting task, whether it finishes or fails
                batchHeader.addDependency(cleanupTask, postingTask, BatchDependencyStatus::FinishedOrError);

                batchHeader.save();

                return;

            case LedgerTransferOpeningProcessState::Delete:
                silent = true;

                this.cleanupTemporaryProcessingTables(SysOperationExecutionMode::Synchronous);

                // <GSA>
                if (ledgerParameters.IsZakatEnabled_SA)
                {
                    this.postZakatValue_SA();
                }
                // </GSA>

                if (ledgerParameters.DeleteOpening)
                {
                    this.deleteExistingRecords();
                }

                return;

            case LedgerTransferOpeningProcessState::BalanceSheet:
                batchHeader = BatchHeader::getCurrentBatchHeader();
                if (batchHeader == null)
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                if (this.parmTransferDimensions())
                {
                    balanceSheetDimensionAttributeSet = allDimAttributes;
                }

                this.createLedgerDimensions(ledgerTransferOpeningType);

                linkCreationTask = this.createTask(LedgerTransferOpeningProcessState::LinkCreation, ledgerTransferOpeningType);

                batchHeader.addRuntimeTask(linkCreationTask, this.parmCurrentBatch().RecId);

                this.createHashLinkBundles(batchHeader, linkCreationTask);

                batchHeader.save();

                return;

            case LedgerTransferOpeningProcessState::ProfitLoss:
                batchHeader = BatchHeader::getCurrentBatchHeader();
                if (batchHeader == null)
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                // Get dimension filtering for profit/loss
                profitLossCloseAllDimensionAttributeSet = profitLossCloseDimensionEnumeration;
                if (profitLossCloseAllDimensionAttributeSet)
                {
                    // Check if no dimensions are selected
                    select firstonly RecId from dimAttrSetItem
                        where dimAttrSetItem.DimensionAttributeSet == profitLossCloseAllDimensionAttributeSet &&
                            dimAttrSetItem.EnumerationValue == enum2int(LedgerCloseSingleAll::CloseAll);

                    if (dimAttrSetItem.RecId == 0)
                    {
                        // Clear because there are no dimensions to filter
                        profitLossCloseAllDimensionAttributeSet = 0;
                    }
                }

                this.createLedgerDimensions(ledgerTransferOpeningType);

                linkCreationTask = this.createTask(LedgerTransferOpeningProcessState::LinkCreation, ledgerTransferOpeningType);

                batchHeader.addRuntimeTask(linkCreationTask, this.parmCurrentBatch().RecId);

                this.createHashLinkBundles(batchHeader, linkCreationTask);

                batchHeader.save();

                return;

            case LedgerTransferOpeningProcessState::PublicSectorNominal:
                batchHeader = BatchHeader::getCurrentBatchHeader();
                if (batchHeader == null)
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                this.createLedgerDimensionsForPublicSector(ledgerTransferOpeningType, AccountCloseType::Nominal);

                linkCreationTask = this.createTask(LedgerTransferOpeningProcessState::LinkCreation, ledgerTransferOpeningType);

                batchHeader.addRuntimeTask(linkCreationTask, this.parmCurrentBatch().RecId);

                this.createHashLinkBundles(batchHeader, linkCreationTask);

                batchHeader.save();

                return;

            case LedgerTransferOpeningProcessState::PublicSectorReal:
                batchHeader = BatchHeader::getCurrentBatchHeader();
                if (batchHeader == null)
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                this.createLedgerDimensionsForPublicSector(ledgerTransferOpeningType, AccountCloseType::Real);

                linkCreationTask = this.createTask(LedgerTransferOpeningProcessState::LinkCreation, ledgerTransferOpeningType);

                batchHeader.addRuntimeTask(linkCreationTask, this.parmCurrentBatch().RecId);

                this.createHashLinkBundles(batchHeader, linkCreationTask);

                batchHeader.save();

                return;

            case LedgerTransferOpeningProcessState::BalanceCreation:

                if (ledgerTransferOpeningType == LedgerTransferOpeningType::PublicSectorNominal)
                {
                    accountCloseType = AccountCloseType::Nominal;
                    ledgerOpenCloseTransType = LedgerOpenCloseTransType::Close;
                }
                else if (ledgerTransferOpeningType == LedgerTransferOpeningType::PublicSectorRealDeleteOpening
                    || ledgerTransferOpeningType == LedgerTransferOpeningType::PublicSectorRealOther)
                {
                    accountCloseType = AccountCloseType::Real;
                    ledgerOpenCloseTransType = LedgerOpenCloseTransType::Open;
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                queryRun = new QueryRun(this.initQueryForPublicSector(accountCloseType, ledgerTransferOpeningType));
                this.processQueryForPublicSector(queryRun, ledgerOpenCloseTransType);

                return;

            case LedgerTransferOpeningProcessState::LinkCreation:
                batchHeader = BatchHeader::getCurrentBatchHeader();
                if (batchHeader == null)
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                this.createDimensionLinks(ledgerTransferOpeningType);

                this.createBalanceCreationBundles(batchHeader, ledgerTransferOpeningType);

                batchHeader.save();

                return;

            case LedgerTransferOpeningProcessState::PostToGL:
                this.processNewClosingRecordsForOpening();

                if (!ledgerParameters.DeleteOpening)
                {
                    this.adjustUltimoTrans(null);
                    this.adjustPrimoTrans();
                }

                generalJournalController = LedgerPostingGeneralJournalController::construct();
                this.createClosingOpeningTransactions(generalJournalController);

                generalJournalController.transfer();

                return;

            case LedgerTransferOpeningProcessState::Cleanup:
                this.cleanupTemporaryProcessingTables(SysOperationExecutionMode::ScheduledBatch);

                // Flush the cached value of the last opening balances transfer.
                if (LedgerFiscalCloseLastYearEndCloseDateCacheFlight::instance().isEnabled())
                {
                    LedgerCache::removeValue(LedgerCacheScope::LastClosingDateByLedger, [Ledger::current()]);
                }
                else
                {
                    LedgerCache::clearScope(LedgerCacheScope::LastClosingDateByLedger);
                }

                return;

            case LedgerTransferOpeningProcessState::HashCreation:
                if (ledgerTransferOpeningType == LedgerTransferOpeningType::PublicSectorNominal)
                {
                    accountCloseType = AccountCloseType::Nominal;
                }
                else if (ledgerTransferOpeningType == LedgerTransferOpeningType::PublicSectorRealDeleteOpening
                    || ledgerTransferOpeningType == LedgerTransferOpeningType::PublicSectorRealOther)
                {
                    accountCloseType = AccountCloseType::Real;
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                this.createHashLinksForPublicSector(ledgerTransferOpeningType, accountCloseType);

                return;

            case LedgerTransferOpeningProcessState::RebuildBalances:

                this.rebuildBalances();
                return;
        }

        // capture the values used to support concurrency right here because they
        // have to be the same for each instance in the batch processing and this is
        // the start of the code that is only run for non-batch and to set up a batch
        processSession = sessionId();
        processTimestamp = DateTimeUtil::utcNow();

        batchHeader = BatchHeader::getCurrentBatchHeader();
        if (batchHeader != null)
        {
            primaryTask = this.createTask(LedgerTransferOpeningProcessState::TransferOpening);
            batchHeader.addTask(primaryTask);
            batchHeader.save();

            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        return [LedgerTransferOpening_PSN::currentVersion_PS, #CurrentList_PS, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container packedClass)
    {
        boolean ret = false;
        container conBase;
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case LedgerTransferOpening_PSN::currentVersion_PS:
                [version, #CurrentList_PS, conBase] = packedClass;

                ret = super(conBase);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the preview form before the closing and opening transactions are committed to the database.
    /// </summary>
    /// <returns>
    /// true if the preview form is not displayed or is displayed and the user chooses to commit the
    /// transactions; otherwise, false .
    /// </returns>
    protected boolean runPreview()
    {
        Args args = new Args();
        FormRun formRun;
        boolean ret = true;

        if (!this.insertedTransactions())
        {
            ret = false;  // no transactions were created
        }
        else if (runPreview && !silent && !this.parmInBatch())
        {
            args.name(formStr(LedgerYearEndPreview));
            args.parmObject(this);

            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait(true);
            ret = formRun.closedOk();

            if (!ret)
            {
                processCancelled = true;  // cancelled preview, we will want to re-prompt the user
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether there were any transactions created by the process.
    /// </summary>
    /// <returns>
    /// true if transactions were created; otherwise, false;
    /// </returns>
    private boolean insertedTransactions()
    {
        LedgerTransferOpeningSumTmp ledgerTransferOpeningSumTmp;

        select firstOnly RecId from ledgerTransferOpeningSumTmp
            where ledgerTransferOpeningSumTmp.SessionId == processSession
                && ledgerTransferOpeningSumTmp.UTCTimestamp == processTimestamp;

        return ledgerTransferOpeningSumTmp != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteZeroBalanceTempTrans_PSN</Name>
				<Source><![CDATA[
    protected void deleteZeroBalanceTempTrans_PSN()
    {
        LedgerTransferOpeningSumTmp openingClosingTransactions;

        delete_from openingClosingTransactions
            where openingClosingTransactions.AccountingCurrencyAmount == 0
                && openingClosingTransactions.TransactionCurrencyAmount == 0
                && openingClosingTransactions.ReportingCurrencyAmount == 0
                && openingClosingTransactions.Quantity == 0
                && openingClosingTransactions.SessionId == processSession
                && openingClosingTransactions.UTCTimestamp == processTimestamp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertClosingTransForPublicSector</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the closing transactions based on the work table.
    /// </summary>
    /// <param name="_postToFiscalCalendarPeriodId">
    /// The record ID of the posting fiscal calendar period.
    /// </param>
    /// <param name="_generalJournalController">
    /// The controller class object that is used for posting to the ledger.
    /// </param>
    protected void insertClosingTransForPublicSector(
        RecId _postToFiscalCalendarPeriodId,
        LedgerPostingGeneralJournalController _generalJournalController)
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerEntry ledgerEntry;

        while select accountSumUltimo
                    where accountSumUltimo.SessionId    == processSession                           &&
                          accountSumUltimo.UTCTimestamp == processTimestamp                         &&
                          (accountSumUltimo.ClosingType == LedgerAccountType::AccountStatus         ||
                          accountSumUltimo.ClosingType  == LedgerAccountType::AccountOperations)    &&
                          accountSumUltimo.Posting      == LedgerPostingType::Closing
        {
            if (accountSumUltimo.TransactionCurrencyAmount != 0 ||
                accountSumUltimo.AccountingCurrencyAmount != 0 ||
                accountSumUltimo.Quantity != 0)
            {
                generalJournalEntry = null;
                generalJournalEntry.PostingLayer = accountSumUltimo.OperationsTax;
                generalJournalEntry.SubledgerVoucher = voucher;
                generalJournalEntry.SubledgerVoucherDataAreaId = curext();
                generalJournalEntry.AccountingDate = periodEnd;
                generalJournalEntry.Ledger = Ledger::current();
                generalJournalEntry.FiscalCalendarPeriod = closingFiscalCalendarPeriodRecId;
                generalJournalEntry.FiscalCalendarYear = closingFiscalCalendarYearRecId;
                generalJournalEntry.RecId = _generalJournalController.getNextTemporaryRecId();

                if (acknowledgementDate == dateNull())
                {
                    generalJournalEntry.AcknowledgementDate = generalJournalEntry.AccountingDate;
                }
                else
                {
                    generalJournalEntry.AcknowledgementDate = acknowledgementDate;
                }

                generalJournalAccountEntry.PostingType = LedgerPostingType::TransferOpeningClosing;

                generalJournalAccountEntry.LedgerDimension = accountSumUltimo.LedgerDimension;
                generalJournalAccountEntry.TransactionCurrencyCode = accountSumUltimo.CurrencyCode;
                generalJournalAccountEntry.Text = accountSumUltimo.TransTxt;

                generalJournalAccountEntry.initAmountsForLedgerTransferOpeningSumTmp(accountSumUltimo);

                _generalJournalController.addForUtility(
                                    generalJournalEntry,
                                    generalJournalAccountEntry,
                                    ledgerEntry);

                generalJournalAccountEntry.LedgerDimension = accountSumUltimo.OffsetLedgerDimension;

                generalJournalAccountEntry.initAmountsForLedgerTransferOpeningSumTmp(accountSumUltimo, true);

                _generalJournalController.addForUtility(
                                    generalJournalEntry,
                                    generalJournalAccountEntry,
                                    ledgerEntry);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createClosingOpeningTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the transactions for the General Ledger year end process in Public Sector.
    /// </summary>
    /// <param name="_generalJournalController">
    /// The object used to post the transactions.
    /// </param>
    public void createClosingOpeningTransactions(LedgerPostingGeneralJournalController _generalJournalController)
    {
        this.deleteZeroBalanceTempTrans_PSN();
        // Insert the closing transactions.
        this.insertClosingTransForPublicSector(
                FiscalCalendarPeriod::findByCalendarYearPeriod(fiscalCalendarYearNameRecId, balanceToPeriod).RecId,
                _generalJournalController);

        //Insert opening transactions.
        this.insertOpeningTrans(_generalJournalController);

        // Update period status if necessary
        if (ledgerParameters.YearClosed)
        {
            LedgerFiscalCalendar::updateYearCloseByCalendarLedgerDate(calendarRecId, Ledger::current(), periodEnd);
        }

        if (ledgerParameters.PeriodClosingPosting)
        {
            //Insert ultimo and primo posterings on a system account to keep the overview.
            this.insertOnSystemAccount(_generalJournalController);
        }

        this.clearSummaryTables();
        createdTransactions = true;

        if (!silent)
        {
            progress = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebuildBalances</Name>
				<Source><![CDATA[
    private void rebuildBalances()
    {
        if (!delayDimensionSetRebuild)
        {            
            DimensionFocusBalanceRebuildDateContract contract = new DimensionFocusBalanceRebuildDateContract();
            contract.parmLedgerRecId(Ledger::current());
            this.setDatesInRebuildDateContract(contract);

            if (Dynamics.AX.Application.FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
            {
                GeneralLedgerBalanceWork::scheduleRebuildBalancesForLedger(
                    Ledger::current(),
                    contract.parmFromDate(),
                    contract.parmToDate(),
                    LedgerTransferOpening::description());
            }
            else
            {
                BatchHeader batchHeader = BatchHeader::getCurrentBatchHeader();

                if (batchHeader == null)
                {
                    DimensionFocusInitializeBalance::processFullRebuildWithDateContract(contract);
                }
                else
                {
                    DimensionFocusInitializeBalance::saveBatchDetails(
                    this.parmCurrentBatch().BatchJobId, strFmt("@GeneralLedger:RebuildBalancesFor", curExt()));

                    contract.parmParentBatchHeader(batchHeader);
                    contract.parmParentBatchTaskId(this.parmCurrentBatch().RecId);

                    DimensionFocusInitializeBalance::processFullRebuildWithDateContract(contract);

                    batchHeader.save();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>