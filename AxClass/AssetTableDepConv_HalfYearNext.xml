<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableDepConv_HalfYearNext</Name>
	<SourceCode>
		<Declaration><![CDATA[
//
//  The primary functionality of this class type is to calculate the
//  asset depreciation amounts for fixed assets employing a depreciation
//  convention of 'Half-Year (next year)'. For this purpose this class
//  type must always be used in conjuction with the AssetTableMethod_SL and
//  AssetTableMethod_RB asset depreciation amount calculation classes.
//
//  This secondary functionality of this class type is to calculate the
//  asset depreciation start date for fixed assets employing a depreciation
//  convention.
//
[AssetTableDepConvAttribute(AssetDepreciationConvention::HalfYearNext)]
public class AssetTableDepConv_HalfYearNext extends AssetTableDepConv
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc_RB</Name>
				<Source><![CDATA[
    public AssetAmount calc_RB(AssetAmount _basisForDepreciation,
                               AssetAmount _prevDepAmountThisYear,
                               TransDate _depreciationDate,
                               AssetDepreciationTime _periods)
    {
        AssetAmount                 retValue;
        try
        {
            this.setAssetPeriodDate(_depreciationDate, _periods, true);

            if (isFirstYear
                && depreciationInterval.findLastDayOfYear(_depreciationDate)
                    == depreciationInterval.findLastDayOfYear(assetBook.UsedFromDate))
            {
                retValue = this.calculateFirstYearDepreciation(
                    _depreciationDate,
                    _basisForDepreciation,
                    _prevDepAmountThisYear);
            }
            else
            {
                retValue = this.calc_ReducingBalance(_basisForDepreciation, _depreciationDate);
            }
        }
        catch
        {
            //
            //  An error has occurred within this calculation process.
            //  Report which AssetId and BookId the error occurred on.
            //  The actual error caught may provide more detailed information in the infolog
            //
            throw error(strFmt("@FixedAssets:FA_MessageError_DepreciationAmountCannotBeCalculated", assetBook.AssetId, assetBook.BookId));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SL</Name>
				<Source><![CDATA[
    //
    //  This method calculates the "Straight Line" type period depreciation amount
    //  for the asset's current transaction.
    //
    public AssetAmount calc_SL(AssetAmount  _basisForDepreciation,
                               AssetAmount  _prevDepAmountThisYear,
                               AssetAmount  _prevDepAmountExternal,
                               AssetAmount  _prevDepAmountPriorYears,
                               TransDate    _depreciationDate,
                               AssetDepreciationTime _periods)
    {
        AssetAmount                 retValue;

        try
        {
            this.setAssetPeriodDate(_depreciationDate, _periods);

            if (isFirstYear
                && depreciationInterval.findLastDayOfYear(_depreciationDate)
                    == depreciationInterval.findLastDayOfYear(assetBook.UsedFromDate))
            {
                startingServiceLife = assetBook.ServiceLife;
                retValue = this.calculateFirstYearDepreciation(
                    _depreciationDate,
                    _basisForDepreciation * this.depreciationPercentage_SL(),
                    _prevDepAmountThisYear);
            }
            else
            {
                retValue = this.calc_StraightLine(_basisForDepreciation, _prevDepAmountThisYear, _prevDepAmountExternal, _periods);
            }
        }
        catch
        {
            //
            //  An error has occurred within this calculation process.
            //  Report which AssetId and BookId the error occurred on.
            //  The actual error caught may provide more detailed information in the infolog
            //
            throw error(strFmt("@FixedAssets:FA_MessageError_DepreciationAmountCannotBeCalculated", assetBook.AssetId, assetBook.BookId));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SLP_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calculates the "Straight Line Percentage" type period depreciation amount
    ///  for the asset's current transaction.
    /// </summary>
    /// <param name="_basisForDepreciation">
    /// Amount to be taken as the base amount to calculate depreciation.
    /// </param>
    /// <param name="_prevDepAmountThisYear">
    /// Depreciation amount for prev year.
    /// </param>
    /// <param name="_depreciationDate">
    /// The depreciation start date.
    /// </param>
    /// <param name="_periods">
    /// The period for which to calculate depreciation amount.
    /// </param>
    /// <returns>
    /// Returns the amount calculated as SLP type period depreciation.
    /// </returns>
    public AssetAmount calc_SLP_IN(AssetAmount              _basisForDepreciation,
                                   AssetAmount              _prevDepAmountThisYear,
                                   TransDate                _depreciationDate,
                                   AssetDepreciationTime    _periods)
    {
        AssetAmount                 estimatedYearlyDepreciation;
        AssetAmount                 netAmountToDepreciate;
        AssetAmount                 retValue;
        AssetDepreciationTime       numberOfPeriodsLeftInYear;
        AssetDepreciationTime       numberOfPeriodsInInterval;

        //  Straight Line Percentage cannot have a last year because it is percentage not period based.
        try
        {
            this.setAssetPeriodDate(_depreciationDate, _periods, true);
            if (isFirstYear)
            {
                if ((depreciationProfile.DepreciationYear   == AssetDepreciationYear::Fiscal    &&
                     assetBook.DepreciationStartDate        == depreciationInterval.openingPeriodDate(assetBook.DepreciationStartDate)) ||
                    (depreciationProfile.DepreciationYear   == AssetDepreciationYear::Calendar  &&
                     assetBook.DepreciationStartDate        == DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), assetBook.DepreciationStartDate)))
                {
                    //  If the "Depreciation run date" is the begining of the year then use the standard calculation.
                    retValue = this.calc_StraightLinePercentage_IN(_basisForDepreciation, _depreciationDate);
                }
                else
                {
                    //  If the "Depreciation run date" is the not the begining of the year then
                    //  amount to depreciate for the first year must be divided up evenly in the
                    //  remaining periods in the first year.
                    numberOfPeriodsLeftInYear   = this.setNumberOfPeriodsLeftInYear(_depreciationDate);
                    numberOfPeriodsInInterval   = this.setNumberOfPeriodsInInterval(_depreciationDate);
                    estimatedYearlyDepreciation = _basisForDepreciation;
                    netAmountToDepreciate       = estimatedYearlyDepreciation - _prevDepAmountThisYear;

                    retValue = this.getPeriodAmount(
                        netAmountToDepreciate,
                        numberOfPeriodsInInterval,
                        numberOfPeriodsLeftInYear);
                }
            }
            else
            {
                retValue = this.calc_StraightLinePercentage_IN(_basisForDepreciation, _depreciationDate);
            }
        }
        catch
        {
            //  An error has occurred within this calculation process.
            //  Report which AssetId and BookId the error occurred on.
            //  The actual error caught may provide more detailed information in the infolog
            throw error(strFmt("@FixedAssets:FA_MessageError_DepreciationAmountCannotBeCalculated", assetBook.AssetId, assetBook.BookId));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calculates the asset's period depreciation amount into the correct currency.
    /// </summary>
    /// <param name="_amount">
    /// The depreciation amount.
    /// </param>
    /// <param name="_periods">
    /// Periods value for which depreciation value is calculated.
    /// </param>
    /// <returns>
    /// Depreciation amount for the given period.
    /// </returns>
    /// <remarks>
    /// The periods value is not used as the depreciation amount already has the final value and
    /// we don't need to multiply the amount the _periods value either.
    /// </remarks>
    public AssetAmount calcCurrencyAmount(AssetAmount _amount, AssetDepreciationTime _periods)
    {
        AssetAmount amount;

        if (assetBook.RecId)
        {
            amount = assetBook.roundDepreciationAmount(
                _amount,
                isReportingCurrencyDepreciation);
        }
        else
        {
            amount = CurrencyExchangeHelper::amount(_amount, this.getCurrencyCode());
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDisposalNumberDepreciationPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of depreciation periods used in the final year of the disposal.
    /// </summary>
    /// <param name="_disposalTransDate">
    /// The disposal transaction date.
    /// </param>
    /// <param name="_projectedLastDayOfDepreciation">
    /// The expected last date of depreciation.
    /// </param>
    /// <param name="_isDisposalSameYear">
    /// Indicates whether asset acquisition and disposal are in same year.
    /// </param>
    /// <returns>
    /// The number of periods that is based on mid-quarter convention rule.
    /// </returns>
    /// <remarks>
    /// The following rules are in play for disposal when the Half year (next year) convention is in play:
    /// Placed in service date 1st half of fiscal year, disposed date 1st half of fiscal year,
    /// No depreciation
    /// Placed in service date 1st half of fiscal year, disposed date 2nd half of fiscal year,
    /// 50% of full year depreciation (spread evenly until disposal period)
    /// Placed in service date 2nd half of fiscal year, disposed date 1st half of fiscal year,
    /// 50% of full year depreciation (spread evenly until disposal period)
    /// Placed in service date 2nd half of fiscal year, disposed date 2nd half of fiscal year,
    /// Full year of depreciation (unless acquisition and disposal are in the first year, then 0.00)
    /// </remarks>
    public AssetDepreciationTime calcDisposalNumberDepreciationPeriods(
        TransDate       _disposalTransDate,
        AssetTransDate  _projectedLastDayOfDepreciation,
        boolean         _isDisposalSameYear)
    {
        AssetDepreciationTime       numberOfMonths;
        TransDate                   usedFromDateMiddleOfYearDate;
        TransDate                   disposalDateMiddleOfYearDate;

        if (_isDisposalSameYear)
        {
            numberOfMonths = 0;
        }
        else
        {
            usedFromDateMiddleOfYearDate = depreciationInterval.findMiddleOfYear(assetBook.UsedFromDate);
            disposalDateMiddleOfYearDate = depreciationInterval.findMiddleOfYear(_disposalTransDate);

            // Place in service is in the first half of the year.
            if (assetBook.UsedFromDate < usedFromDateMiddleOfYearDate)
            {
                if (_disposalTransDate >= disposalDateMiddleOfYearDate)
                {
                    numberOfMonths = depreciationInterval.periodOfYear(disposalDateMiddleOfYearDate -1);
                }
            }
            else
            {
                if (_disposalTransDate < disposalDateMiddleOfYearDate)
                {
                    numberOfMonths = depreciationInterval.periodOfYear(disposalDateMiddleOfYearDate -1);
                }
                else if (depreciationInterval.findLastDayOfYear(_disposalTransDate) != depreciationInterval.findLastDayOfYear(assetBook.UsedFromDate))
                {
                    numberOfMonths = depreciationInterval.periodOfYear(depreciationInterval.findLastDayOfYear(_disposalTransDate));
                }
            }
        }

        return numberOfMonths;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    //
    //  This method returns the adjustment to asset's remaining life.
    //
    //  This method assumes that an instance of this class type exists
    //  and that calc_RB() or calc_SL() methods have already been run.
    //
    public AssetDepreciationTime calcRestPeriod(AssetDepreciationTime   _restPeriod,
                                                AssetTransDate          _periodstart,
                                                AssetDepreciationTime   _periods)
    {
        AssetDepreciationTime   restPeriod;
        AssetDepreciationTime   numberOfPeriodsLeftInYear;
        AssetDepreciationTime   totalNumberOfPeriodsInYear;

        restPeriod = _restPeriod;

        if (AssetDepreciationProfile::isReducingBalanceDepreciationMethod(depreciationProfile.Method)||
             depreciationProfile.Method == AssetDepreciationMethod::StraightLine ||
             depreciationProfile.Method == AssetDepreciationMethod::StraightLineLifeRemaining)
        {
            this.setAssetPeriodDate(_periodstart, _periods, depreciationProfile.AssetEndDependOnServiceLife ? false : true);

            if (isFirstYear)
            {
                if (assetBook.DepreciationStartDate <= assetBook.UsedFromDate)
                {
                    numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(assetBook.UsedFromDate);
                    totalNumberOfPeriodsInYear = this.setNumberOfPeriodsLeftInYear(assetBook.DepreciationStartDate);

                    if (numberOfPeriodsLeftInYear)
                    {
                        // Round to 16 decimal places as that is the default scale for RealBase EDT
                        restPeriod = decround(totalNumberOfPeriodsInYear / numberOfPeriodsLeftInYear, 16);
                    }

                    // Make sure that for the final period takes the final amount of period remaining at this
                    // point the value model should depreciate the full year of depreciation.
                    if (depreciationInterval.indexofPeriod(_periodstart) ==
                        depreciationInterval.indexofPeriod(depreciationInterval.findLastDayOfYear(_periodstart)))
                    {
                        if (frac(_periods) > 0)
                        {
                            AssetDepreciationTime totalPeriodsAfterFirstYear =
                                assetBook.LifeTime - depreciationInterval.numOfPeriodsPerYear();

                            if (totalPeriodsAfterFirstYear > 0)
                            {
                                restPeriod = _periods - totalPeriodsAfterFirstYear;
                            }
                        }
                    }
                }
            }
        }

        return restPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStartDate</Name>
				<Source><![CDATA[
    //
    //  This method calculates the asset's starting depreciation date.
    //
    //  The "Half Year Next Year" depreciation convention will set the "depreciation run date"
    //  to the 1st day of month if the asset was placed in service in the first half of the year.
    //  If the asset was placed in service in the second half of the year then the "depreciation run date"
    //  will be set to the 1st day of the first month of the next year the asset was placed in service.
    //
    //  The AssetBook.usedFromDate is considered to be the "placed in service date".
    //
    protected AssetDepreciationStartDate calcStartDate(AssetUsedFromDate _usedFromDate)
    {
        #DEFINE.mthOfYrJune(6)
        AssetDepreciationStartDate  startDate;

        switch (depreciationProfile.DepreciationYear)
        {
            case  AssetDepreciationYear::Fiscal:
                //  Is the "In service date" occurring in the first half of the year
                if (_usedFromDate < depreciationInterval.findMiddleOfYear(_usedFromDate))
                {
                    startDate = this.calculateStartDate(true, _usedFromDate);
                }
                else
                {
                    startDate = this.calculateStartDate(false, _usedFromDate);
                }
                break;

            case AssetDepreciationYear::Calendar:
                if (mthOfYr(_usedFromDate) <= #mthOfYrJune)
                {
                    startDate = this.calculateStartDate(true, _usedFromDate);
                }
                else
                {
                    startDate = this.calculateStartDate(false, _usedFromDate);
                }
                break;

            default:
                //  The enumeration is unknown, throw an error;
                throw error(strFmt("@SYS99083", depreciationProfile.Profile));
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFirstYearDepreciation</Name>
				<Source><![CDATA[
    private AssetAmount calculateFirstYearDepreciation(
        TransDate      _depreciationDate,
        AssetAmount    _basisForDepreciation,
        AssetAmount    _prevDepAmountThisYear)
    {
        AssetDepreciationTime       numberOfPeriodsLeftInYear;
        AssetDepreciationTime       numberOfPeriodsInInterval;
        AssetAmount                 netAmountToDepreciate;
        AssetAmount                 returnValue;

        numberOfPeriodsLeftInYear = this.setNumberOfPeriodsLeftInYear(_depreciationDate);
        numberOfPeriodsInInterval = this.setNumberOfPeriodsInInterval(_depreciationDate);

        netAmountToDepreciate = _basisForDepreciation - _prevDepAmountThisYear;

        if (numberOfPeriodsLeftInYear)
        {
            returnValue = this.getPeriodAmount(
                netAmountToDepreciate,
                numberOfPeriodsInInterval,
                numberOfPeriodsLeftInYear);
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStartDate</Name>
				<Source><![CDATA[
    private AssetDepreciationStartDate calculateStartDate(boolean _isFirstPartYear, AssetDepreciationStartDate _usedFromDate)
    {
        AssetDepreciationStartDate  returnValue;

        if (_usedFromDate)
        {
            if (_isFirstPartYear)
            {
                returnValue = depreciationInterval.findFirstDayOfYear(_usedFromDate);
            }
            else
            {
                returnValue = depreciationInterval.findLastDayOfYear(_usedFromDate) + 1;
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssetPeriodDate</Name>
				<Source><![CDATA[
    //
    //  This method sets the various date properties required for this class.
    //
    protected void setAssetPeriodDate(TransDate _depreciationDate,
                                      AssetDepreciationTime _periods,
                                      boolean   _isRB_Calc = false)
    {
        #DEFINE.mthOfYrJune(6)

        ;

        this.checkIsFirstYear(_depreciationDate);
        if (isFirstYear)
        {
            switch (depreciationProfile.DepreciationYear)
            {
                case AssetDepreciationYear::Fiscal:
                    //  Is the "In service date" occurring in the first half of the year
                    if (assetBook.DepreciationStartDate < depreciationInterval.findMiddleOfYear(assetBook.DepreciationStartDate))
                    {
                         assetPeriodDate = depreciationInterval.openingPeriodDate(assetBook.DepreciationStartDate);
                    }
                    else
                    {
                        assetPeriodDate = assetBook.DepreciationStartDate;
                    }
                    break;

                case AssetDepreciationYear::Calendar:
                    //  Is the "In service date" occurring in the first half of the year
                    if (mthOfYr(assetBook.DepreciationStartDate) <= #mthOfYrJune)
                    {
                        assetPeriodDate = mkDate(1, 1, year(assetBook.DepreciationStartDate));
                    }
                    else
                    {
                        assetPeriodDate = assetBook.DepreciationStartDate;
                    }
                    break;

                default:
                    //  The enumeration is unknown, throw an error;
                    throw error(strFmt("@SYS99083", depreciationProfile.Profile));
            }
            startingServiceLife = assetBook.ServiceLife;
        }
        else
        {
            this.checkIsLastYear(_depreciationDate, _periods, _isRB_Calc);
            if (islastYear)
            {
                assetPeriodDate = lastDepreciationDate;
                startingServiceLife = 1;
            }
            else
            {
                assetPeriodDate = _depreciationDate;
                switch (depreciationProfile.DepreciationYear)
                {
                    case AssetDepreciationYear::Fiscal:
                        startingServiceLife = assetBook.ServiceLife -
                            (year(depreciationInterval.openingPeriodDate(_depreciationDate)) -
                             year(depreciationInterval.openingPeriodDate(assetBook.DepreciationStartDate)));
                        break;

                    case AssetDepreciationYear::Calendar:
                        startingServiceLife = assetBook.ServiceLife -
                            (year(_depreciationDate) - year(assetBook.DepreciationStartDate));
                        break;

                    default:
                        //  The enumeration is unknown, throw an error;
                        throw error(strFmt("@SYS99083", depreciationProfile.Profile));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumberOfPeriodsInInterval</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method sets the correct number of periods to take within the context of
    ///  the total number of periods for the asset's current transaction.
    /// </summary>
    /// <param name="_depreciationDate">
    /// Asset's current transaction date
    /// </param>
    /// <returns>
    /// Returns number of periods in the interval.
    /// </returns>
    protected AssetDepreciationTime setNumberOfPeriodsInInterval(TransDate _depreciationDate)
    {
        AssetDepreciationTime retValue;

        if (isFirstYear
            && (depreciationProfile.Accrual == AssetAccrual::HalfYearly
            || depreciationProfile.Accrual == AssetAccrual::Quarterly))
        {
            if (depreciationInterval.indexofPeriod(assetBook.UsedFromDate) ==
                depreciationInterval.indexofPeriod(_depreciationDate))
            {
                retValue = depreciationInterval.periodOfYear(depreciationInterval.endPeriod(_depreciationDate)) -
                        depreciationInterval.periodOfYear(depreciationInterval.findFirstDayOfPeriod(assetBook.UsedFromDate)) + 1;
            }
            else
            {
                retValue = super(_depreciationDate);
            }
        }
        else
        {
            retValue = super(_depreciationDate);
        }

        if (retValue &&
            retValue > 0)
        {
            return retValue;
        }
        else
        {
            //
            //  A proper asset depreciation time value cannot be calculated, throw an error.
            //  This value must be greater than 1.
            //
            throw error(strFmt("@SYS99073", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumberOfPeriodsLeftInYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets the correct number of total periods from the asset's current transaction
    /// until the end of the year.
    /// </summary>
    /// <param name="_depreciationDate">
    /// Asset's current transaction date
    /// </param>
    /// <returns>
    /// Returns number of periods.
    /// </returns>
    protected AssetDepreciationTime setNumberOfPeriodsLeftInYear(TransDate _depreciationDate)
    {
        AssetDepreciationTime   retValue;

        if (isFirstYear
            && (depreciationProfile.Accrual == AssetAccrual::HalfYearly
            || depreciationProfile.Accrual == AssetAccrual::Quarterly))
        {
            if (depreciationInterval.indexofPeriod(assetBook.UsedFromDate) ==
                depreciationInterval.indexofPeriod(_depreciationDate))
            {
                retValue = depreciationInterval.periodOfYear(depreciationInterval.findLastDayOfYear(_depreciationDate)) -
                        depreciationInterval.periodOfYear(assetBook.UsedFromDate) + 1;
            }
            else
            {
                retValue = super(_depreciationDate);
            }
        }
        else
        {
            retValue = super(_depreciationDate);
        }

        if (retValue &&
            retValue > 0)
        {
            return retValue;
        }
        else
        {
            //
            //  A proper asset depreciation time value cannot be calculated, throw an error;
            //  This value must be greater than 1.
            //
            throw error(strFmt("@SYS99073", funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>