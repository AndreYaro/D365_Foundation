<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The Data Provider for the <c>CustVendPaymProposal</c> report.
/// </summary>
[
    SrsReportQueryAttribute(queryStr(CustVendPaymProposal)),
    SRSReportParameterAttribute(classStr(CustVendPaymProposalContract))
]
public class CustVendPaymProposalDP extends SrsReportDataProviderPreProcessTempDB
{
    private CustVendPaymProposalTmp custVendPaymProposalTmp;
    private JournalId journalId;
    private LedgerJournalType journalType;
    private CustVendPaymProposalContract contract;
    private boolean paymInvoicesBankAccountRange;
    private PaymProposalReport paymProposalReport;
    private LedgerJournalTable ledgerJournalTable;
    private Query queryProposal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getcustVendPaymProposalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>CustVendPaymProposalTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>CustVendPaymProposalTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(CustVendPaymProposalTmp))]
    public CustVendPaymProposalTmp getcustVendPaymProposalTmp()
    {
        select custVendPaymProposalTmp;
        return custVendPaymProposalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Processes the business logic which is used by the <c>CustVendPaymProposal</c> report.The parameters
    ///    for this method are set in the <c>main</c> method.
    /// </remarks>
    public void processReport()
    {
        contract = this.parmDataContract() as CustVendPaymProposalContract;
        journalId = contract.parmJournalId();
        journalType = contract.parmJournalType();
        boolean proposal = contract.parmProposal();

        paymProposalReport = PaymProposalReport::construct(journalId, proposal);
        paymProposalReport.parmPrintPaymLines(contract.parmPrintPaymLines());
        paymProposalReport.parmPrintInvoiceLines(contract.parmPrintInvoiceLines());
        paymProposalReport.parmPaymProposalReportedBy(contract.parmGroupingBy());
        paymProposalReport.parmPaymProposalReportSubTotal(contract.parmSubtotal());
        paymProposalReport.setCustVendACRange(
            contract.parmRangeAccountNumStart(),
            contract.parmRangeAccountNumEnd());
        paymProposalReport.setCompanyBankAccountIdRange(
            contract.parmRangeCompanyBankAccountIdStart(),
            contract.parmRangeCompanyBankAccountIdEnd());
        paymProposalReport.parmLedgerJournalTable(LedgerJournalTable::find(journalId));
        paymProposalReport.createTmpTable(custVendPaymProposalTmp);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>