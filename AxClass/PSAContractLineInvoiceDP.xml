<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>psaContractLineInvoiceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PSAContractLineInvoiceDP</c> report provides data for the <c>PSAContractLineInvoice</c>
/// SQL Server Reporting Services (SSRS) report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(PSAContractLineInvoice)),
    SRSReportParameterAttribute(classStr(PSAProjInvoiceContract))
]
class psaContractLineInvoiceDP extends SrsReportDataProviderPreProcess
{
    PSAContractLineInvoiceTmp       tmpPSAContractLineInvoice;
    ProjInvoiceJour                 projInvoiceJour;
    PSAContractLineItems            contractLineItems;
    PSAProjInvoiceTaxTmp            tmpPSAProjInvoiceTax;
    ProjProposalJour                projProposalJour;
    CompanyInfo                     companyInfo;
    private CustTable               custTableProjInvoiceJour;
    FormletterProformaPrint         formletterProformaPrint;
    PSAProjProposalProj             psaProjProposalProj;

    AmountMST                       totalRetainage;
    PrePrintLevel                   prePrintLevel;
    InventTrans                     inventTrans;
    ProjInvoiceItem                 projInvoiceItem;
    DocuRefSearch                   docuRefHeader;
    DocuRefSearch                   docuRef;
    boolean                         printDocuHeader;
    boolean                         printDocuLine;

    boolean                         showSepaNotification;
    CustDirectDebitMandate          custDirectDebitMandate;
    CustBankAccount                 custDirectDebitMandateBankAccount;
    ProjInvoiceOnAcc                projInvoiceOnAcc_AE;

    // <GEEU>
    ProjInvoiceLocalizationTmp projInvoiceLocalizationTmp;

    #ISOCountryRegionCodes
    // </GEEU>

    // <GTH>
    ProjInvoiceJourAdjustment_TH    projInvoiceJourAdjustment;
    PSAProjInvoiceHeaderTmp         tmpPSAProjInvoiceHeader;
    // </GTH>

    // <GMY>
    boolean         isMYGSTInvoice;

    ProjInvoiceJour projInvoiceJourMY;

    ProjProposalOnAcc projProposalOnAcc;

    #define.Blank('')
    // </GMY>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTotalRetainage</Name>
				<Source><![CDATA[
    private void calculateTotalRetainage(ProjInvoiceJour _jour)
    {
        PSAContractLineItems lineItems;
        PSAProjProposalProj psaProj;
        ProjInvoiceProjId contractId = _jour.ProjInvoiceProjId;
        ProjProposalId proposalId = _jour.ProposalId;

        while select ContractLineNum,ProjInvoiceProjId from lineItems
            where lineItems.ProjInvoiceProjId == contractId
        {
            select psaProj
                where psaProj.ProjProposalId == proposalId &&
                    psaProj.ContractLineNum == lineItems.ContractLineNum;
            if (psaProj)
            {
                totalRetainage += psaProj.RetainedNow;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatPackingSlipInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the Packing slip information.
    /// </summary>
    /// <param name="_qty">
    /// Quantity in the packing slip.
    /// </param>
    /// <param name="_packingSlipId">
    /// ID of the packing slip.
    /// </param>
    /// <param name="_shippingDate">
    /// Date of the Packing slip.
    /// </param>
    /// <returns>
    /// String which contains Packing slip information.
    /// </returns>
    private str formatPackingSlipInfo(InventQty _qty, PackingSlipId _packingSlipId, date _shippingDate)
    {
        str infoStr = "@SYS14578" + strFmt(' : %1  ', _qty);

        if (_packingSlipId)
        {
            infoStr += "@SYS23437" + ': ' + _packingSlipId + '  ';
        }

        infoStr += "@SYS16056" + ': ' + date2str(_shippingDate,-1,-1,-1,-1,-1,-1, DateFlags::FormatAll);

        if (_qty || _shippingDate)
        {
            return infoStr;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>ProjInvoiceLocalizationTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ProjInvoiceLocalizationTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(ProjInvoiceLocalizationTmp))
    ]
    public ProjInvoiceLocalizationTmp getProjInvoiceLocalizationTmp()
    {
        select projInvoiceLocalizationTmp;
        return projInvoiceLocalizationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAContractLineInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>PSAContractLineInvoiceTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PSAContractLineInvoiceTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PSAContractLineInvoiceTmp))
    ]
    public PSAContractLineInvoiceTmp getPSAContractLineInvoiceTmp()
    {
        return tmpPSAContractLineInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAProjInvoiceHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>PSAProjInvoiceHeaderTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PSAProjInvoiceHeaderTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PSAProjInvoiceHeaderTmp))
    ]
    public PSAProjInvoiceHeaderTmp getPSAProjInvoiceHeader()
    {
        return tmpPSAProjInvoiceHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAProjProposalProj</Name>
				<Source><![CDATA[
    private void getPSAProjProposalProj(ProjProposalId _proposalId, PSAContractLineNum _lineNum )
    {
        select psaProjProposalProj
            where psaProjProposalProj.ProjProposalId == _proposalId &&
            psaProjProposalProj.ContractLineNum == _lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GiroReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a GiroReport object with the data from this datasource
    /// </summary>
    /// <returns>GiroReport object for Swiss QR Bill Code</returns>
    public GiroReportTmp GiroReport()
    {
        GiroReportTmp giro;
        PaymMoneyTransferSlip moneyTransferSlip;
      
        giro.CompanyGiro = companyInfo.Giro;
        giro.GiroType = projInvoiceJour.GiroType;
        
        LogisticsPostalAddress invoiceAddress = LogisticsPostalAddress::findRecId(projInvoiceJour.DeliveryPostalAddress);

        LogisticsAddressCountryRegionISOCode isoCountryCode = SysCountryRegionCode::countryInfo();

        switch (isoCountryCode)
        {
            case #isoCH:
                PaymMoneyTransferSlip_CH moneyTransferSlipCH = new PaymMoneyTransferSlip_CH();
                moneyTransferSlipCH.initOCRLineProjInvoice_CH(projInvoiceJour);
            
                giro.CustAddress_CH = invoiceAddress.Address;
                giro.CustName_CH = projInvoiceJour.DeliveryName;

                giro.Description_CH = "@SYS12128"; // Same used in FreeTextInvoiceDP
                giro.PaymentRef1_CH = moneyTransferSlipCH.ocr_paymentRef1();
                giro.PaymentRef2_CH = moneyTransferSlipCH.ocr_paymentRef2();

                giro.AccountNo1_CH = moneyTransferSlipCH.ocr_AccountNo1();
                giro.PaymentId2_PaymentId3_CH = strFmt('%1 %2', moneyTransferSlipCH.ocr_PaymentId2(), moneyTransferSlipCH.ocr_PaymentId3());
        
                giro.LayoutCode_CH = moneyTransferSlipCH.layoutCode();
                giro.AccountNo2_CH = moneyTransferSlipCH.ocr_AccountNo2();
                giro.CurrencyCodeISO_CH = Currency::currencyCodeISO(projInvoiceJour.CurrencyId);
                giro.OcrLine_CH = moneyTransferSlipCH.ocrLine();
                giro.OcrField = projInvoiceJour.PaymId;

                giro.BillInformation = CustQRBillQRCodeCreator_CH::getBillInformation(projInvoiceJour, this.tmpTaxWorkTrans());

                moneyTransferSlip = moneyTransferSlipCH;
                break;
        
            case #isoDK:
                moneyTransferSlip = PaymMoneyTransferSlip::construct(giro.GiroType);
                moneyTransferSlip.init(giro.GiroType);

                giro.fiCreditorID_DK = companyInfo.fiCreditorID_DK;
                giro.InvoiceAddress = invoiceAddress.Address;

                AmountCur amountCur = projInvoiceJour.remainAmountToBePaid();

                // Shown on the Giro/FIK report as "33    00" for $33.00
                // Amount Decimals is the number of cents
                // Amount No Decimals is the number of dollars
                giro.InvoiceAmountDecimals = this.invoiceAmountDecimals(amountCur);
                giro.InvoiceAmountNoDecimals = this.invoiceAmountNoDecimals(amountCur);

                // Zero used here for invoiceIdMaxLength because we follow the FIK standard inside the method
                giro.OcrField = moneyTransferSlip.ocrField(projInvoiceJour.InvoiceAccount, projInvoiceJour.ProjInvoiceProjId, 0);
                break;
            
            default:
                moneyTransferSlip = PaymMoneyTransferSlip::construct(giro.GiroType);
                moneyTransferSlip.init(giro.GiroType);
                break;
        }

        giro.CompanyName = companyInfo.Name;
        giro.AccountNum = projInvoiceJour.InvoiceAccount;
        giro.CompanyAddress = companyInfo.postalAddress().Address;
        giro.CompanyPhone = companyInfo.phone();

        giro.InvoiceName = projInvoiceJour.DeliveryName;
        giro.InvoiceAmount = projInvoiceJour.InvoiceAmount;
        
        giro.InvoiceAccount = projInvoiceJour.InvoiceAccount;
        giro.DueDate = projInvoiceJour.DueDate;
        
        giro.InvoiceAddressLine1 = strRemoveCr(invoiceAddress.Street);
        giro.InvoiceAddressLine2 = strFmt('%1 %2', invoiceAddress.ZipCode, invoiceAddress.City);
        giro.InvoiceCountryRegionId = invoiceAddress.CountryRegionId;
        giro.LanguageId = projInvoiceJour.LanguageId;

        // Bank & Account Information
        giro.AmountCheckId = moneyTransferSlip.amountCheckId(projInvoiceJour.remainAmountToBePaid());
        str qrIBAN = moneyTransferSlip.bankAccountTable().QRIBAN_CH;
        giro.IBAN = qrIBAN ? qrIBAN : moneyTransferSlip.bankAccountTable().IBAN;

        return giro;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPSAContractLineInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the <c>PSAContractLineInvoiceTmp</c> table.
    /// </summary>
    protected void initPSAContractLineInvoiceTmp()
    {
        ProjInvoiceRevenue projInvoiceRevenue;

        tmpPSAContractLineInvoice.CompanyPhone = companyInfo.phone();
        tmpPSAContractLineInvoice.CompanyTelefax = companyInfo.teleFax();
        tmpPSAContractLineInvoice.CompanyGiro = companyInfo.Giro;
        tmpPSAContractLineInvoice.CompanyCoRegNum = companyInfo.CoRegNum;
        tmpPSAContractLineInvoice.DeliveryName = companyInfo.Name;
        tmpPSAContractLineInvoice.DeliveryAddress = companyInfo.postalAddress().Address;
        tmpPSAContractLineInvoice.CustCompanyName = projInvoiceJour.DeliveryName;
        tmpPSAContractLineInvoice.CustCompanyAddress = LOGISTICSPOSTALADDRESS::findRecId(projInvoiceJour.DeliveryPostalAddress).Address;
        tmpPSAContractLineInvoice.CustCompanyPhone = custTableProjInvoiceJour.phone();
        tmpPSAContractLineInvoice.CustCompanyTelefax = custTableProjInvoiceJour.telefax();
        tmpPSAContractLineInvoice.ContractId = projInvoiceJour.ProjInvoiceProjId;
        tmpPSAContractLineInvoice.PaymTermId = projInvoiceJour.Payment;
        tmpPSAContractLineInvoice.InvoiceNum = projProposalJour.ProjInvoiceId;
        tmpPSAContractLineInvoice.CustAccountExt = projProposalJour.InvoiceAccount;
        tmpPSAContractLineInvoice.OurAccountNum = projInvoiceJour.ourAccountNum();
        tmpPSAContractLineInvoice.InvoiceDate = projProposalJour.InvoiceDate;
        tmpPSAContractLineInvoice.DueDate = projInvoiceJour.DueDate;
        tmpPSAContractLineInvoice.CurrencyCode = projInvoiceJour.CurrencyId;
        tmpPSAContractLineInvoice.ContractLineNum = contractLineItems.ContractLineNum;
        tmpPSAContractLineInvoice.LineType = contractLineItems.LineType;
        tmpPSAContractLineInvoice.LineDesc = contractLineItems.LineDesc;
        tmpPSAContractLineInvoice.LineValue = contractLineItems.LineValue;
        tmpPSAContractLineInvoice.smaSpecIndexCalc = NoYes::No;
        tmpPSAContractLineInvoice.CompanyLogo = FormLetter::companyLogo();
        tmpPSAContractLineInvoice.PackingSlipInfoVisibility = NoYes::No;

        select smaBasePrice, smaIndex, InvoiceDate, ProjInvoiceId 
            from projInvoiceRevenue 
            where projInvoiceRevenue.InvoiceDate == projInvoiceJour.InvoiceDate
            && projInvoiceRevenue.ProjInvoiceId == projInvoicejour.ProjInvoiceId;

        if (projInvoiceJour.SMASpecIndexCalc &&
            projInvoiceRevenue.SMAIndex != 0 &&
            ProjFormletterParameters::find().SMASpecIndexCalc)
        {
            // Subscription Index calculation shown on Invoice
            tmpPSAContractLineInvoice.smaSpecIndexCalc = NoYes::Yes;
            tmpPSAContractLineInvoice.smaBasePrice = projInvoiceRevenue.smaBasePrice;
            tmpPSAContractLineInvoice.smaIndex = projInvoiceRevenue.smaIndex;
        }

        tmpPSAContractLineInvoice.CompanyVATNum = TaxTransactionTaxIDHelper::getTaxID(
            projInvoiceJour.TableId,
            projInvoiceJour.RecId,
            projInvoiceJour.InvoiceDate).getLegalEntityTaxID();

        // Tax Exempt Number shown on Invoice
        if (ProjFormletterParameters::find().PrintInvoiceVATNum)
        {
            tmpPSAContractLineInvoice.InvoiceVATNumVisibility = NoYes::Yes;
        }

        tmpPSAContractLineInvoice.InvoiceAccountVATNum = TaxTransactionTaxIDHelper::getTaxID(
            projInvoiceJour.TableId,
            projInvoiceJour.RecId,
            projInvoiceJour.InvoiceDate).getCounterPartyTaxID();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpPSAContractLineInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the specified record and inserts it in the temporary table.
    /// </summary>
    public void insertTmpPSAContractLineInvoice()
    {
        Amount indirectCost;

        this.initPSAContractLineInvoiceTmp();

        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            tmpPSAContractLineInvoice.InvoiceType_MY    = projInvoiceJour.InvoiceType_MY;

            if (projInvoiceJour.InvoiceType_MY == InvoiceType_MY::GST)
            {
                tmpPSAContractLineInvoice.CompanyCoRegNum    = TaxGSTHelper_MY::getGSTRegistrationNumber(projInvoiceJour.InvoiceDate);

                if (projInvoiceJour.NoteType_MY != NoteType_MY::Blank)
                {
                    tmpPSAContractLineInvoice.GSTReasonCode_MY   = ReasonTableRef::find(projInvoiceJour.ReasonTableRef).Reason;

                    select RefInvoiceId_MY, RefInvoiceDate_MY from projProposalOnAcc
                        where projProposalOnAcc.ProposalId          == projInvoiceJour.ProposalId &&
                            projProposalOnAcc.PSAContractLineNum  == contractLineItems.ContractLineNum;

                    tmpPSAContractLineInvoice.RefInvoiceID_MY       = projProposalOnAcc.RefInvoiceId_MY;
                    tmpPSAContractLineInvoice.RefInvoiceDate_MY     = projProposalOnAcc.RefInvoiceDate_MY;
                }
            }
        }
        // </GMY>

        if (psaProjProposalProj)
        {
            indirectCost          = psaProjProposalProj.calcTotalIndirectComponentInvoice(psaProjProposalProj);
        }

        tmpPSAContractLineInvoice.RetainageAmount    = psaProjProposalProj.RetainedNow;
        tmpPSAContractLineInvoice.TaxableBalance     = projInvoiceJour.taxableBalanceMST(this.tmpTaxWorkTrans());
        tmpPSAContractLineInvoice.InvoiceRoundOff    = projInvoiceJour.InvoiceRoundOff;
        tmpPSAContractLineInvoice.TotalDisc          = projInvoiceJour.EndDisc;

        if (!projInvoiceJour.isProforma()) // Add retainage in case of posting because posting functioanlity doesnot do it.
        {
            tmpPSAContractLineInvoice.TaxFreeBalance     = projInvoiceJour.taxFreeBalance(this.tmpTaxWorkTrans()) + totalRetainage;
            tmpPSAContractLineInvoice.SalesBalance       = projInvoiceJour.SalesOrderbalance + totalRetainage;
            tmpPSAContractLineInvoice.NetAmount          = projInvoiceJour.netAmount() + indirectCost + totalRetainage;
            tmpPSAContractLineInvoice.Total              = projInvoiceJour.netAmount() + projInvoiceJour.SumTax + indirectCost + totalRetainage;
        }
        else
        {
            tmpPSAContractLineInvoice.TaxFreeBalance     = projInvoiceJour.taxFreeBalance(this.tmpTaxWorkTrans());
            tmpPSAContractLineInvoice.SalesBalance       = projInvoiceJour.SalesOrderbalance;
            tmpPSAContractLineInvoice.NetAmount          = projInvoiceJour.netAmount() + indirectCost;
            tmpPSAContractLineInvoice.Total              = projInvoiceJour.netAmount() + projInvoiceJour.SumTax + indirectCost;
        }

        tmpPSAContractLineInvoice.InvoicedToDate            = psaProjProposalProj.Invoiced;
        tmpPSAContractLineInvoice.InvoiceAmount             = psaProjProposalProj.InvoicedNow;
        tmpPSAContractLineInvoice.SumTax                    = projInvoiceJour.SumTax;

        tmpPSAContractLineInvoice.SumMarkup                 = projInvoiceJour.SumMarkup + indirectCost;

        tmpPSAContractLineInvoice.CompanyDebitDirectId = BankAccountTable::findByCompany(companyInfo.DataArea, companyInfo.Bank).DebitDirectId;

        tmpPSAContractLineInvoice.ShowSepaNotification = showSepaNotification;
        tmpPSAContractLineInvoice.MandateReference   = custDirectDebitMandate.MandateReference;
        tmpPSAContractLineInvoice.MandateSWIFTNo     = custDirectDebitMandateBankAccount.SWIFTNo;

        unchecked (Uncheck::TableSecurityPermission)
        {
            tmpPSAContractLineInvoice.MandateBankIBAN = custDirectDebitMandateBankAccount.BankIBAN;
        }

        // PrePrintLevelShow used to print Invoice according to selected paper format
        tmpPSAContractLineInvoice.PrePrintLevelShow         = prePrintLevel;

        // Packing slip information to print on Invoice
        this.printInventTrans();
        if (inventTrans.RecId != 0 && ProjFormletterParameters::find().PckSlpInfoOnInvoice)
        {
            tmpPSAContractLineInvoice.PackingSlipInfoVisibility = NoYes::Yes;
            tmpPSAContractLineInvoice.PackingSlipInfo           = this.printPackingSlipInfo();
        }

        // Document attachments shown on Invoice
        if (printDocuHeader && docuRefHeader != null)
        {
            tmpPSAContractLineInvoice.DocuRefHeaderVisibility   = NoYes::Yes;
            tmpPSAContractLineInvoice.DocumentHeader            = Docu::concatDocuRefNotes(docuRefHeader);
            // Have to rewind docuRefSearch for use by next line
            docuRefHeader.init();
        }

        if (printDocuLine && docuRef != null)
        {
            tmpPSAContractLineInvoice.DocuRefLineVisibility     = NoYes::Yes;
            tmpPSAContractLineInvoice.DocumentLine              = Docu::concatDocuRefNotes(docuRef);
            // Have to rewind docuRefSearch for use by next line
            docuRef.init();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAE]))
        {
            tmpPSAContractLineInvoice.TaxRegistrationNumber_AE = custTableProjInvoiceJour.getRegistrationNumber_AE();
            tmpPSAContractLineInvoice.ExchRate_AE = projInvoiceJour.ExchRate;
            tmpPSAContractLineInvoice.CurrencyCode_AE = Ledger::accountingCurrency();

            if (projInvoiceOnAcc_AE.Amount < 0)
            {
                TransactionID projInvoiceTransId_AE = projInvoiceOnAcc_AE.TransId;
                ProjInvoiceOnAcc projInvoiceOnAcc;

                while select ProjInvoiceId from projInvoiceOnAcc
                    where projInvoiceOnAcc.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                        && projInvoiceOnAcc.TransId != projInvoiceTransId_AE
                {
                    tmpPSAContractLineInvoice.OriginalInvoice_AE = projInvoiceOnAcc.ProjInvoiceId + " ,";
                }
            }

            TaxTrans taxTrans_AE;

            select firstonly TaxValue, sourceRegulateAmountCur, TaxCode, taxbaseamountCur, taxAmountCur, currencyCode, PrintCode from taxtrans_AE
                where taxTrans_AE.SourceRecId == projInvoiceOnAcc_AE.RecId
                    && taxTrans_AE.SourceTableId == projInvoiceOnAcc_AE.TableId
                    && taxTrans_AE.source == TaxModuleType::Project;

            // Assigning value to <C>PSAContractLineInvoiceTmp</C> table related to VAT information
            if (taxTrans_AE)
            {
                tmpPSAContractLineInvoice.VATAmount_AE = -(taxTrans_AE.SourceRegulateAmountCur);
                tmpPSAContractLineInvoice.VATPercent_AE = taxTrans_AE.taxValue;
                tmpPSAContractLineInvoice.TaxCode_AE = taxTrans_AE.TaxCode;
                tmpPSAContractLineInvoice.TaxWriteCode_AE = taxTrans_AE.PrintCode;
                tmpPSAContractLineInvoice.TaxAmount_AE = -(taxTrans_AE.TaxAmountCur);
                tmpPSAContractLineInvoice.TaxBaseAmount_AE = -(taxTrans_AE.TaxBaseAmountCur);
                tmpPSAContractLineInvoice.TotalInvoiceAmount_AE = projInvoiceJour.amountMST(tmpPSAContractLineInvoice.Total);
                tmpPSAContractLineInvoice.SalesBalance_AE = projInvoiceJour.amountMST(projInvoiceJour.SalesOrderbalance);
                tmpPSAContractLineInvoice.SumMarkup_AE = projInvoiceJour.amountMST(projInvoiceJour.SumMarkup);
                tmpPSAContractLineInvoice.SumTax_AE = projInvoiceJour.amountMST(projInvoiceJour.SumTax);
                tmpPSAContractLineInvoice.InvoiceRoundOff_AE = projInvoiceJour.amountMST(projInvoiceJour.InvoiceRoundOff);
                tmpPSAContractLineInvoice.TotalDisc_AE = projInvoiceJour.amountMST(projInvoiceJour.EndDisc);

                // If transactional currency is different from reporting currency
                if (tmpPSAContractLineInvoice.CurrencyCode != taxTrans_AE.CurrencyCode)
                {                   
                    tmpPSAContractLineInvoice.ShowReportingCurTotals_AE = NoYes::Yes;
                }
            }
        }

        tmpPSAContractLineInvoice.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDateText</Name>
				<Source><![CDATA[
    private FreeTxt invoiceDateText()
    {
        FreeText text = RNumDateInWordConverter::construct(projInvoiceJour.LanguageId).date2strMonth(projInvoiceJour.InvoiceDate);

        text = strFmt("@SYS53179", year(projInvoiceJour.InvoiceDate), text, dayOfMth(projInvoiceJour.InvoiceDate));

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    private Query modifyQuery(Query _query, ProjInvoiceJour _projInvoiceJour)
    {
        QueryBuildDataSource qbds;
        QueryBuildRange      qbr;

        qbds = _query.dataSourceTable(tableNum(ProjInvoiceJour));
        qbr = SysQuery::findOrCreateRange(qbds, fieldNum(ProjInvoiceJour, RecId));

        if (qbr)
        {
            qbr.value(queryValue(_projInvoiceJour.RecId));
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DocuRefSearch instance to print the Document Header on the invoice.
    /// </summary>
    private void printDocumentHeader()
    {
        printDocuHeader = false;

        if ((ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::Head) ||
            (ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::All))

        {
            docuRefHeader = DocuRefSearch::newTypeIdAndRestriction(ProjProposalJour::find(projInvoiceJour.ProposalId),
                                                                    ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                    DocuRestriction::External);
            printDocuHeader = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DocuRefSearch instance to print the Document Header on the invoice.
    /// </summary>
    /// <param name="_contractLineItems">
    /// PSAContractLineItems reference.
    /// </param>
    private void printDocumentLine(PSAContractLineItems _contractLineItems)
    {
        printDocuLine = false;

        if ((ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::Line) ||
            (ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::All))
        {
            docuRef     = DocuRefSearch::newTypeIdAndRestriction(_contractLineItems,
                                                                ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                DocuRestriction::External);
            printDocuLine = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventTrans object to use in packing slip information.
    /// </summary>
    private void printInventTrans()
    {
        InventTransOriginId inventTransOriginId;
        ProjItemTrans       localProjItemTrans;

        inventTransOriginId = InventTransOrigin::findByInventTransId(projInvoiceItem.InventTransId).RecId;

        if (projInvoiceItem.ProjTransId)
        {
            localProjItemTrans = ProjItemTrans::find(projInvoiceItem.ProjTransId);
        }

        if (localProjItemTrans)
        {
            select inventTrans
                  where inventTrans.InventTransOrigin == inventTransOriginId &&
                    inventTrans.ProjAdjustRefId == localProjItemTrans.ProjAdjustRefId &&
                    inventTrans.PackingSlipId;
        }
        else
        {
            select inventTrans
                  where inventTrans.InventTransOrigin == inventTransOriginId &&
                    !inventTrans.ProjAdjustRefId &&
                    inventTrans.PackingSlipId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPackingSlipInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Packing slip information.
    /// </summary>
    /// <returns>
    /// Formatted string containing packing slip information.
    /// </returns>
    private str printPackingSlipInfo()
    {
        SalesShippingDate shippingDate;
        InventTransOrigin inventTransOrigin = inventTrans.inventTransOrigin();

        InventQty salesQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTransOrigin.ItemId,
																								   inventTrans.inventDimId,
																								   inventTrans.Qty,
																								   inventTransOrigin.inventTable().inventUnitId(),
																								   projInvoiceItem.SalesUnit,
																								   NoYes::Yes);

        if (inventTrans.PackingSlipId)
        {
            shippingDate = (select custPackingSlipTrans
                    where inventTrans.PackingSlipId == custPackingSlipTrans.PackingSlipId).DeliveryDate;
        }
        else
        {
            shippingDate = projInvoiceItem.DlvDate;
        }

        return this.formatPackingSlipInfo(salesQty * -1, inventTrans.PackingSlipId, shippingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SQL Server Reporting Services (SSRS) report.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. It will be called by SSRS at
    /// run time. The method should compute data and populate the data tables that will be returned to
    /// SSRS.
    /// </remarks>
    public void processReport()
    {
        PSAProjInvoiceContract contract    = this.parmDataContract() as PSAProjInvoiceContract;
        Query                  query       = new Query(this.parmQuery());
        QueryRun               queryRun;

        tmpPSAContractLineInvoice.setConnection(this.parmUserConnection());

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU, #isoCZ, #isoPL]))
        {
            projInvoiceLocalizationTmp.setConnection(this.parmUserConnection());
        }
        // </GEEU>

        prePrintLevel = ProjFormletterParameters::find().PrePrintLevelInvoice;
        
        if (contract.parmProjInvoiceJourRecId())
        {
            projInvoiceJour = ProjInvoiceJour::findRecId(contract.parmProjInvoiceJourRecId());
        }

        if (projInvoiceJour)
        {
            query = this.modifyQuery(query, projInvoiceJour);
        }

        companyInfo = CompanyInfo::find();

        custTableProjInvoiceJour = CustTable::find(projInvoiceJour.InvoiceAccount);

        showSepaNotification = this.showSepaNotification();

        this.calculateTotalRetainage(projInvoiceJour);

        if (contract.parmFormLetterRecordId())
        {
            this.unpackFormLetter(contract.parmFormLetterRecordId());
        }

        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isCountryRegionTH())
        {
            if (TaxThaiGovCertificationFeatureChecker::isProjInvoicesSubstitutionAdjustmentEnabled())
            {
                projInvoiceJourAdjustment = ProjInvoiceJourAdjustment_TH::findRecId(contract.parmAdjustmentRecId_TH());
            }
            this.insertPSAProjInvoiceHeaderTmp();
        }
        // </GTH>

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU, #isoCZ, #isoPL]))
        {
            PSAProjInvoiceRPTHelperEE::createProjInvoiceLocalizationTmp(projInvoiceLocalizationTmp, projInvoiceJour);
        }
        // </GEEU>

        tmpPSAProjInvoiceTax = PSAProjInvoiceTaxTmp::insertPSAProjInvoiceTmpForTax(projInvoiceJour,
                                                                                   PSAProjInvoiceTaxTmp::getTaxSpec(projInvoiceJour, formletterProformaPrint));

        // <GMY>
        projInvoiceJourMY = projInvoiceJour;
        // </GMY>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAE]))
        {
            QueryBuildDataSource qbdsProjInvoiceOnAcc_AE = query.dataSourceTable(tableNum(PSAContractLineItems)).addDataSource(tableNum(ProjInvoiceOnAcc));

            qbdsProjInvoiceOnAcc_AE.clearLinks();
            qbdsProjInvoiceOnAcc_AE.relations(true);
            qbdsProjInvoiceOnAcc_AE.joinMode(JoinMode::OuterJoin);
            qbdsProjInvoiceOnAcc_AE.addRange(fieldNum(ProjInvoiceOnAcc, InvoiceDate)).value(queryValue(projInvoiceJour.InvoiceDate));
            qbdsProjInvoiceOnAcc_AE.addRange(fieldNum(ProjInvoiceOnAcc, ProjInvoiceId)).value(projInvoiceJour.ProjInvoiceId);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA]))
        {
            if(FeatureStateProvider::isFeatureEnabled(IntegrationTaxAuthoritiesSAFeature::instance()))
            {
                this.insertPSAProjInvoiceHeaderTmp();
            }
        }

        if (projInvoiceJour.QRCode_W && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMY]) && BusinessDocumentPrintQRCodeFlight_MY::instance().isEnabled())
        {
            this.insertPSAProjInvoiceHeaderTmp();
        }

        // Swiss QR Bill (CH)
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCH]) 
            && ProjInvoiceQRBillFlight_CH::instance().isEnabled())
        {
            GiroReportTmp::populateFromGiroReportData(this.parmUserConnection(), this.GiroReport());
        }
        
        // Denmark FIK (OCR) String (DK)
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoDK])
            && ProjInvoiceFIKStringUpdateFlight_DK::instance().isEnabled())
        {
            GiroReportTmp::populateFromGiroReportData(this.parmUserConnection(), this.GiroReport());
        }

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            projInvoiceJour             = queryRun.get(tableNum(ProjInvoiceJour));
            contractLineItems           = queryRun.get(tableNum(PSAContractLineItems));

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAE]))
            {
                projInvoiceOnAcc_AE = queryRun.get(tableNum(ProjInvoiceOnAcc));
            }

            projProposalJour            = ProjProposalJour::find(projInvoiceJour.ProposalId);
            select projInvoiceItem
                where projInvoiceItem.ProjInvoiceId      == projInvoiceJour.ProjInvoiceId  &&
                      projInvoiceItem.InvoiceDate       == projInvoiceJour.InvoiceDate;

            if (projInvoiceItem.ItemType == ProjItemType::SalesOrder)
            {
                this.printInventTrans();
            }

            this.getPSAProjProposalProj(projInvoiceJour.ProposalId, contractLineItems.ContractLineNum );

            if (psaProjProposalProj)
            {
                // Get the Document attachment to display in header
                this.printDocumentHeader();

                // Get the Document attachment to display for each line
                this.printDocumentLine(contractLineItems);

                this.insertTmpPSAContractLineInvoice();
            }
        }

        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY()
            && projInvoiceJourMY.InvoiceType_MY == InvoiceType_MY::GST)
        {
            // Clear tmp table after inserting data tax related to avoid the affects to normal data.
            tmpPSAContractLineInvoice.clear();

            this.insertTaxes_MY(projInvoiceJourMY);
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSepaNotification</Name>
				<Source><![CDATA[
    private boolean showSepaNotification()
    {
        if (projInvoiceJour.DirectDebitMandate)
        {
            select firstOnly custDirectDebitMandate
                    where custDirectDebitMandate.RecId == projInvoiceJour.DirectDebitMandate
                join custDirectDebitMandateBankAccount
                    where custDirectDebitMandateBankAccount.AccountID == custDirectDebitMandate.BankAccount &&
                            custDirectDebitMandateBankAccount.CustAccount == custDirectDebitMandate.CustAccount;

            if (custDirectDebitMandate && custDirectDebitMandateBankAccount)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    private TmpTaxWorkTrans tmpTaxWorkTrans()
    {
        if (projInvoiceJour.isProforma() && formletterProformaPrint)
        {
            return formletterProformaPrint.tmpTaxWorkTrans(projInvoiceJour.RecId);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the formletter packed class.
    /// </summary>
    /// <param name="_formLetterRecId">
    /// The recid of tempstroe where formletter is stored.
    /// </param>
    private void unpackFormLetter(RecId _formLetterRecId)
    {
        SRSTmpDataStore srsTmpDataStore;
        container       formLetterPackedValue;

        if (_formLetterRecId)
        {
            ttsbegin;
            select forupdate firstonly Value from srsTmpDataStore
            where srsTmpDataStore.RecId == _formLetterRecId;

            if (srsTmpDataStore.RecId)
            {
                // get and delete first.
                formLetterPackedValue = srsTmpDataStore.Value;
                srsTmpDataStore.delete();

                // then create form letter
                if (projInvoiceJour.isProforma())
                {
                    formletterProformaPrint = FormletterProformaPrint::newUnpack(formLetterPackedValue);
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAProjInvoiceTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to select all records from table <c>PSAProjInvoiceTaxTmp</c>.
    /// </summary>
    /// <returns>
    /// Returns the table object with all the data.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PSAProjInvoiceTaxTmp))
    ]
    public PSAProjInvoiceTaxTmp getPSAProjInvoiceTax()
    {
        return tmpPSAProjInvoiceTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxes_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the project taxes information.
    /// </summary>
    /// <param name = "_projInvoiceJour">
    /// ProjInvoiceJour reference.
    /// </param>
    /// <remarks>
    /// This method is used for Malaysian.
    /// </remarks>
    public void insertTaxes_MY(ProjInvoiceJour _projInvoiceJour)
    {
        TaxSpec         taxSpec;
        Amount          amount;
        CashDiscAmount  cashDiscAmountTax;

        if (_projInvoiceJour.isProforma())
        {
            taxSpec = TaxSpec::construct(#Blank, naDate(), _projInvoiceJour.RecId);
            taxSpec.setTmpTaxWorkTrans(formletterProformaPrint.tmpTaxWorkTrans(_projInvoiceJour.RecId));
        }
        else
        {
            taxSpec = TaxSpec::construct(_projInvoiceJour.LedgerVoucher, _projInvoiceJour.InvoiceDate, _projInvoiceJour.RecId);
        }

        taxSpec.parmLanguageId(_projInvoiceJour.LanguageId);
        taxSpec.parmIsGSTInvoice_MY(isMYGSTInvoice);

        while (taxSpec.parmTaxSpec(false))
        {
            if (TaxParameters::find().CashDiscOnInvoice)
            {
                if (_projInvoiceJour.CashDiscPercent == 100)
                {
                    amount            = 0;
                    cashDiscAmountTax = 0;
                }
                else
                {
                    amount            = taxSpec.taxBaseAmount() / ((100 - _projInvoiceJour.CashDiscPercent) / 100);
                    cashDiscAmountTax = amount * (_projInvoiceJour.CashDiscPercent / 100);
                }
            }

            tmpPSAContractLineInvoice.clear();
            tmpPSAContractLineInvoice.InvoiceType_MY    = _projInvoiceJour.InvoiceType_MY;
            tmpPSAContractLineInvoice.IsGSTSummary_MY   = NoYes::Yes;
            tmpPSAContractLineInvoice.GSTSummaryText_MY = taxSpec.getGSTSummaryText_MY(_projInvoiceJour);
            tmpPSAContractLineInvoice.Amount_MY         = -amount;
            tmpPSAContractLineInvoice.CashDiscAmount_MY = -cashDiscAmountTax;
            tmpPSAContractLineInvoice.TaxBaseQty_MY     = -taxSpec.taxBaseQty();
            tmpPSAContractLineInvoice.TaxAmount_MY      = -taxSpec.taxAmount();
            tmpPSAContractLineInvoice.TaxBaseAmount_MY  = -taxSpec.taxBaseAmount();
            tmpPSAContractLineInvoice.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPSAProjInvoiceHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>tmpPSAProjInvoiceHeader</c> table from corresponding regular tables.
    /// </summary>
    private void insertPSAProjInvoiceHeaderTmp()
    {
        this.populatePSAProjInvoiceHeaderTmp();

        tmpPSAProjInvoiceHeader.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePSAProjInvoiceHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set fields on the <c>tmpPSAProjInvoiceHeader</c> record from corresponding regular tables.
    /// </summary>
    protected void populatePSAProjInvoiceHeaderTmp()
    {
        CustTable custTable = this.getCustTable(projInvoiceJour.ProposalId);

        FormLetterRemarks formLetterRemarks = FormLetterRemarks::find(projInvoiceJour.LanguageId, FormTextType::ProjectInvoice);

        tmpPSAProjInvoiceHeader.Name                  = companyInfo.Name;
        tmpPSAProjInvoiceHeader.Address               = companyInfo.postalAddress().Address;

        tmpPSAProjInvoiceHeader.CompanyLogo           = FormLetter::companyLogo();
        
        tmpPSAProjInvoiceHeader.Telephone             = companyInfo.phone();
        tmpPSAProjInvoiceHeader.Fax                   = companyInfo.teleFax();
        tmpPSAProjInvoiceHeader.giro                  = companyInfo.Giro;
        tmpPSAProjInvoiceHeader.RegistrationNumber    = companyInfo.CoRegNum;

        CustTable custTableInvoice = CustTable::find(projInvoiceJour.InvoiceAccount);
        if (custTableInvoice.name())
        {
            tmpPSAProjInvoiceHeader.CustName = custTableInvoice.name();
        }
        else
        {
            tmpPSAProjInvoiceHeader.CustName = custTable.name();
        }

        tmpPSAProjInvoiceHeader.CustAddress           = LogisticsPostalAddress::findRecId(projInvoiceJour.DeliveryPostalAddress).Address;
        tmpPSAProjInvoiceHeader.CustPhone             = custTable.phone();
        tmpPSAProjInvoiceHeader.CustFax               = custTable.telefax();

        tmpPSAProjInvoiceHeader.InvoiceNum            = projInvoiceJour.ProjInvoiceId;
        tmpPSAProjInvoiceHeader.ProjectContract       = projInvoiceJour.ProjInvoiceProjId;
        tmpPSAProjInvoiceHeader.CustAccountNum        = projInvoiceJour.InvoiceAccount;
        tmpPSAProjInvoiceHeader.OurAccntNum           = projInvoiceJour.ourAccountNum();
        tmpPSAProjInvoiceHeader.Payment               = projInvoiceJour.Payment;
        tmpPSAProjInvoiceHeader.InvoiceDate           = projInvoiceJour.InvoiceDate;
        tmpPSAProjInvoiceHeader.InvoiceCurrency       = projInvoiceJour.CurrencyId;

        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isProjInvoicesSubstitutionAdjustmentEnabled())
        {
            LogisticsPostalAddress  logisticsPostalAddress = LogisticsPostalAddress::findRecId(projInvoiceJour.DeliveryPostalAddress);
            DirPartyLocation        dirPartyLocation = DirPartyLocation::findByPartyLocation(
                custTableProjInvoiceJour.Party,
                logisticsPostalAddress.Location);
            TaxInformation_TH       taxInformation_TH = TaxInformation_TH::find(dirPartyLocation.Location);

            tmpPSAProjInvoiceHeader.RefInvoiceId_TH = projInvoiceJour.projInvoiceJourExtension_TH().RefInvoiceId;

            if (projInvoiceJourAdjustment)
            {
                tmpPSAProjInvoiceHeader.initFromProjInvoiceJourAdjustment_TH(projInvoiceJourAdjustment);
                tmpPSAProjInvoiceHeader.InvoiceNum = projInvoiceJourAdjustment.TaxInvoiceId;
                tmpPSAProjInvoiceHeader.RemarkTxt_TH = projInvoiceJourAdjustment.remarkTxt(projInvoiceJour.LanguageId);
                tmpPSAProjInvoiceHeader.AdjustmentDetailsTxt_TH = projInvoiceJourAdjustment.adjustmentDetailsTxt(projInvoiceJour.LanguageId);
            }
            else
            {
                tmpPSAProjInvoiceHeader.InvoiceBranch_TH = taxInformation_TH.BranchNumber;
                tmpPSAProjInvoiceHeader.InvoiceBranchName_TH = LogisticsLocation::find(taxInformation_TH.LogisticsLocation).Description;
                tmpPSAProjInvoiceHeader.InvoiceTaxRegNumber_TH = TaxRegistration::getTaxRegistrationFromInvoiceJour_TH(projInvoiceJour).RegistrationNumber;
                tmpPSAProjInvoiceHeader.CustPhone = custTable.phone();
                tmpPSAProjInvoiceHeader.CustFax = custTable.telefax();
            }
        }
        // <GTH>

        if (projInvoiceJour.QRCode_W && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMY]) && BusinessDocumentPrintQRCodeFlight_MY::instance().isEnabled())   
        {
            str decodeBase64String = CustGenerateQRCode_W::decodeBase64String(projInvoiceJour.QRCode_W);
            tmpPSAProjInvoiceHeader.QRCode_W = CustGenerateQRCode_W::generateQRCodeFromBase64(decodeBase64String);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    private CustTable getCustTable(ProjProposalId _proposalId)
    {
        ProjFundingSource   projFundingSource;
        CustTable custTable;

        projFundingSource = ProjFundingSource::find(ProjProposalJour::find(_proposalId).FundingSource);

        if (projFundingSource.FundingType == ProjFundingType::Customer)
        {
            custTable = CustTable::findByPartyRecId(projFundingSource.Party);
        }
        else if (projFundingSource.FundingType == ProjFundingType::Grant)
        {
            custTable = CustTable::find(ProjGrant::find(projFundingSource.ProjGrant).CustAccount);
        }

        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountDecimals</Name>
				<Source><![CDATA[
    // Denmark FIK string formatting used by GiroReport
    private str invoiceAmountDecimals(AmountCur _amount)
    {
        return strReplace(num2str(frac(_amount) * 100, 2, 0, 0, 0), ' ', '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountNoDecimals</Name>
				<Source><![CDATA[
    // Denmark FIK string formatting used by GiroReport
    private str invoiceAmountNoDecimals(AmountCur _amount)
    {
        return num2str(trunc(_amount), 1, 0, 0, 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>