<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductMaintainWorkspaceFilterStructureStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResProductMaintainWorkspaceFilterStructureStrategy</c> class applies a <c>SysIFilterStructureItem</c> class to a <c>SysIQueryable</c> class.
/// Category and datetime filters are applied to the queries in the product create and maintain workspace.
/// </summary>
[
    SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::Integer, queryStr(EcoResProductOpenCases)),
    SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::Integer, queryStr(EcoResProductReleasedNoTransactions)),
    SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::Integer, queryStr(EcoResProductReleasedRecentlyCreated)),
    SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::Integer, queryStr(EcoResProductReleasedStoppedInvent)),
    SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::Integer, queryStr(EcoResProductReleasedStoppedPurch)),
    SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::Integer, queryStr(EcoResProductReleasedStoppedSales)),

    SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::DateTime, queryStr(EcoResProductReleasedNoTransactions)),
    SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::DateTime, queryStr(EcoResProductReleasedRecentlyCreated)),
    SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::DateTime, queryStr(EcoResProductReleasedStoppedInvent)),
    SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::DateTime, queryStr(EcoResProductReleasedStoppedPurch)),
    SysFilterExtension(SysQueryableTypeEnum::Query, SysFilterValueTypeEnum::DateTime, queryStr(EcoResProductReleasedStoppedSales))
]
public class EcoResProductMaintainWorkspaceFilterStructureStrategy extends SysFilterStructureStrategyQuery implements SysIFilterStructureStrategy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    protected boolean resolve(SysIFilterValueType _filterValueType)
    {
        boolean result = false;

        if (_filterValueType.parmType() == SysFilterValueTypeEnum::Integer)
        {
            // if EcoResCategoryHierarchy filter has Equal operator set then we enable the EcoResProductCategory datasource; otherwise we disable it and show all records without categories
            if (_filterValueType.parmTypeIdentifier() == extendedTypeNum(EcoResCategoryHierarchyId))
            {
                QueryBuildDataSource ecoResProductCategoryQdbs = EcoResProductWorkspaceConfigurationHelper::getQueryBuildDataSource(query, tableNum(EcoResProductCategory));
                if (filterStructureItem.parmOperator() == SysFilterOperator::Equal)
                {
                    ecoResProductCategoryQdbs.enabled(true);
                    this.addLinkFromTableToFilter(ecoResProductCategoryQdbs, fieldNum(EcoResProductCategory, CategoryHierarchy), filterStructureItem.parmOperator());
                }
                else
                {
                    ecoResProductCategoryQdbs.enabled(false);
                }
                result = true;
            }
            else if (_filterValueType.parmTypeIdentifier() == extendedTypeNum(EcoResCategoryNestedSetLeft))
            {
                QueryBuildDataSource ecoResCategoryQdbs = EcoResProductWorkspaceConfigurationHelper::getQueryBuildDataSource(query, tableNum(EcoResCategory));
                this.addLinkFromTableToFilter(ecoResCategoryQdbs, fieldNum(EcoResCategory, NestedSetLeft), filterStructureItem.parmOperator());
                result = true;
            }
            else if (_filterValueType.parmTypeIdentifier() == extendedTypeNum(EcoResCategoryNestedSetRight))
            {
                QueryBuildDataSource ecoResCategoryQdbs = EcoResProductWorkspaceConfigurationHelper::getQueryBuildDataSource(query, tableNum(EcoResCategory));
                this.addLinkFromTableToFilter(ecoResCategoryQdbs, fieldNum(EcoResCategory, NestedSetRight), filterStructureItem.parmOperator());
                result = true;
            }
        }

        // Filter only EDT EcoResProductReleasedStopped
        if (_filterValueType.parmType() == SysFilterValueTypeEnum::DateTime
            && _filterValueType.parmTypeIdentifier() == extendedTypenum(EcoResProductReleasedStopped)
            && ((query.name() == queryStr(EcoResProductReleasedStoppedPurch))
                || (query.name() == queryStr(EcoResProductReleasedStoppedSales))
                || (query.name() == queryStr(EcoResProductReleasedStoppedInvent))))
        {
            QueryBuildDataSource inventTableQdbs = EcoResProductWorkspaceConfigurationHelper::getQueryBuildDataSource(query, tableNum(InventTable));
            this.addLinkFromTableToFilter(inventTableQdbs, fieldNum(InventTable, CreatedDateTime), filterStructureItem.parmOperator());
            result = true;
        }

        // Filter only EDT EcoResProductReleasedRecently
        if (_filterValueType.parmType() == SysFilterValueTypeEnum::DateTime
            && _filterValueType.parmTypeIdentifier() == extendedTypenum(EcoResProductReleasedRecently))
        {
            QueryBuildDataSource inventTableQdbs = EcoResProductWorkspaceConfigurationHelper::getQueryBuildDataSource(query, tableNum(InventTable));
            if (query.name() == queryStr(EcoResProductReleasedNoTransactions))
            {
                this.addLinkFromTableToFilter(inventTableQdbs, fieldNum(InventTable, CreatedDateTime), SysFilterOperator::LessEqual);
                result = true;
            }
            else if (query.name() == queryStr(EcoResProductReleasedRecentlyCreated))
            {
                this.addLinkFromTableToFilter(inventTableQdbs, fieldNum(InventTable, CreatedDateTime), SysFilterOperator::GreaterEqual);
                result = true;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLinkFromTableToFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a link to the <c>SysFilterTable</c> table.
    /// </summary>
    /// <param name="_relatedTableDataSource">
    /// The <c>QueryBuildDataSource</c> class to which the link should be added.
    /// </param>
    /// <param name="_fieldId">
    /// The <c>FieldId</c> class for which the link should be added.
    /// </param>
    /// <param name="_filterOperator">
    /// The <c>SysFilterOperator</c> used in the range.
    /// </param>
    public void addLinkFromTableToFilter(
        QueryBuildDataSource _relatedTableDataSource,
        FieldId _fieldId,
        SysFilterOperator _filterOperator = SysFilterOperator::Equal)
    {
        QueryBuildRange qbr = SysQueryBase::findOrCreateRange(_relatedTableDataSource, _fieldId);
        qbr.status(RangeStatus::Hidden);
        // ((targetTable.TargetField <operator> sysFilterTable.ValueField) OR (sysFilterTable.ValueResolutionMethod != SysFilterValueResolutionMethod::None))
        qbr.value(strfmt('(((%1.%2 %3 %4.%5) || (%4.%6 != %7)))',
            _relatedTableDataSource.name(),
            fieldId2Name(_relatedTableDataSource.table(), _fieldId),
            SysFilterOperatorHelper::operator2SqlStr(_filterOperator),
            filterDatasource.name(),
            fieldId2Name(filterMetadata.parmTypeId(), filterMetadata.parmValue(filterStructureItem.parmValueType().parmType()), filterStructureItem.parmId()),
            fieldId2Name(filterMetadata.parmTypeId(), filterMetadata.parmValueResolutionMethod(), filterStructureItem.parmId()),
            int2Str(SysFilterValueResolutionMethod::None)));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>