<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorRulesCatalog</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCommerceValidatorCatalogRules</c> class validates all catalog rules.
/// </summary>
public class RetailCommerceValidatorRulesCatalog
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEntityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate entity type list.
    /// </summary>
    /// <returns>The map containing all entity types and their descriptions.</returns>
    public static Map getEntityType()
    {
        Map entityList = new Map(Types::String,Types::Container);

        entityList.insert("@Retail:RetailCommerceValidatorCatalogValidationEntityTypeIdLabel", [RetailCommerceValidatorEntityFunction::Functional, tableNum(Catalog), classStr(RetailCommerceValidatorRulesCatalog)]);

        return entityList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRulesList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate rule list.
    /// </summary>
    /// <returns>The map containing all rules and rule related properties.</returns>
    public static Map getRulesList()
    {
        Map rulesList = new Map(Types::String,Types::Container);

        // Validates if Catalog target is B2B and customer type is not B2B.
        rulesList.insert("@Retail:RetailCommerceValidatorCataRu001", [
            "@Retail:RetailCommerceValidatorCatalogValidationEntityTypeIdLabel",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorCataRu001Description",
            'validateCatalogTargetAndCustTyeIsB2B',
            formStr(RetailCatalogDetails),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        // Validates if Catalog target is B2C and customer type is not B2C.
        rulesList.insert("@Retail:RetailCommerceValidatorCataRu002", [
            "@Retail:RetailCommerceValidatorCatalogValidationEntityTypeIdLabel",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorCataRu002Description",
            'validateCatalogTargetAndCustTyeIsB2C',
            formStr(RetailCatalogDetails),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        // Validates if a published catalog targeting the channel is expired.
        rulesList.insert("@Retail:RetailCommerceValidatorCataRu003", [
            "@Retail:RetailCommerceValidatorCatalogValidationEntityTypeIdLabel",
            0,
            RetailCommerceValidatorResultStatus::Passed,
            "@Retail:RetailCommerceValidatorCataRu003Description",
            'validateCatalogValidity',
            formStr(RetailCatalogDetails),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        // Validates catalog translation.
        rulesList.insert("@Retail:RetailCommerceValidatorCataRu004", [
            "@Retail:RetailCommerceValidatorCatalogValidationEntityTypeIdLabel",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorCataRu004Description",
            'validateCatalogTranslation',
            formStr(RetailCatalogDetails),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Validates if catalog products are assorted.
        rulesList.insert("@Retail:RetailCommerceValidatorCataRu005", [
            "@Retail:RetailCommerceValidatorCatalogValidationEntityTypeIdLabel",
            0,
            RetailCommerceValidatorResultStatus::Warning,
            "@Retail:RetailCommerceValidatorCataRu005Description",
            'validateIfCatalogProductAssorted',
            formStr(RetailCatalogDetails),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Validates if catalog product is not released.
        rulesList.insert("@Retail:RetailCommerceValidatorCataRu006", [
            "@Retail:RetailCommerceValidatorCatalogValidationEntityTypeIdLabel",
            0,
            RetailCommerceValidatorResultStatus::Warning,
            "@Retail:RetailCommerceValidatorCataRu006Description",
            'validateIfCatalogProductNotReleased',
            formStr(EcoResProductDetails),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::Yes // AutomatedRunApplicable
        ]);

        // Validates if the translation is missing for overridden attribute value of a catalog product
        rulesList.insert("@Retail:RetailCommerceValidatorCataRu007", [
            "@Retail:RetailCommerceValidatorCatalogValidationEntityTypeIdLabel",
            0,
            RetailCommerceValidatorResultStatus::Error,
            "@Retail:RetailCommerceValidatorCataRu007Description",
            'validateCatalogProductAttributeValueTranslation',
            formStr(RetailCatalogDetails),
            NoYes::Yes, // EntityPartitionRequired
            NoYes::No // AutomatedRunApplicable
        ]);

        return rulesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get number of entities of the Entity type for a given validation
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <returns>The number of entities in scope for the validation.</returns>
    public static int64 getEntityCount(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidatorWorkChannelCatalogs catalogs;
        select count(RecId) from catalogs where catalogs.ValidationId == _validationId;

        return catalogs.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatalogTargetAndCustTyeIsB2B</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Cata-Ru-001': Catalog target is B2B and customer type is B2C, both should be same.
    /// Validates if catalog target is B2B and Customer type is not B2B, logs an error if yes.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateCatalogTargetAndCustTyeIsB2B(RetailCommerceValidatorTests _validatorTest)
    {
        RetailCommerceValidatorWorkChannelCatalogs channelCatalogs;
        int resultsCounter = 0;

        while select CatalogRefRecId from channelCatalogs
            order by channelCatalogs.CatalogRefRecId asc
            where channelCatalogs.CatalogTarget == RetailCatalogTarget::B2B
                && channelCatalogs.CustomerType != OnlineStoreCustomerType::B2B
                && channelCatalogs.CatalogRefRecId != 0
                && channelCatalogs.ValidationId == _validatorTest.ValidationId
                && channelCatalogs.CatalogRefRecId >= _validatorTest.RangeStartRecId
                && channelCatalogs.CatalogRefRecId <= _validatorTest.RangeEndRecId
        {
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextCatalog(_validatorTest.ValidationId,channelCatalogs.CatalogRefRecId);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                logContext,
                "@Retail:ValidationRuleCounterMetricId",
                "@Retail:RetailCommerceValidatorCataRu001Description",
                _validatorTest.TestId,
                "@Retail:RetailCommerceValidatorCataRu001"
                );

            // Increase the counter of issues
            resultsCounter++;
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatalogTargetAndCustTyeIsB2C</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Cata-Ru-002': Catalog target is B2B and customer type is B2C, both should be same.
    /// Validates if catalog target is B2C and Customer type is not B2C, logs an error if yes.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateCatalogTargetAndCustTyeIsB2C(RetailCommerceValidatorTests _validatorTest)
    {
        RetailCommerceValidatorWorkChannelCatalogs channelCatalogs;
        int resultsCounter = 0;

        while select CatalogRefRecId from channelCatalogs
            order by channelCatalogs.CatalogRefRecId asc
            where channelCatalogs.CatalogTarget == RetailCatalogTarget::B2C
                && channelCatalogs.CustomerType != OnlineStoreCustomerType::B2C
                && channelCatalogs.CatalogRefRecId != 0
                && channelCatalogs.ValidationId == _validatorTest.ValidationId
                && channelCatalogs.CatalogRefRecId >= _validatorTest.RangeStartRecId
                && channelCatalogs.CatalogRefRecId <= _validatorTest.RangeEndRecId
        {
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextCatalog(_validatorTest.ValidationId,channelCatalogs.CatalogRefRecId);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                logContext,
                "@Retail:ValidationRuleCounterMetricId",
                "@Retail:RetailCommerceValidatorCataRu002Description",
                _validatorTest.TestId,
                "@Retail:RetailCommerceValidatorCataRu002"
                );

            // Increase the counter of issues
            resultsCounter++;
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatalogValidity</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Cata-Ru-003': Catalog is expired.
    /// Validates if the catalog is expired, logs an error if expired.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateCatalogValidity(RetailCommerceValidatorTests _validatorTest)
    {
        Catalog catalog;
        RetailCommerceValidatorWorkChannelCatalogs channelCatalogs;
        int resultsCounter = 0;
        date dateToday = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        while select CatalogRefRecId from channelCatalogs
            order by channelCatalogs.CatalogRefRecId asc
            where channelCatalogs.ValidationId == _validatorTest.ValidationId
                && channelCatalogs.CatalogRefRecId >= _validatorTest.RangeStartRecId
                && channelCatalogs.CatalogRefRecId <= _validatorTest.RangeEndRecId
            exists join catalog
                where catalog.RecId == channelCatalogs.CatalogRefRecId
                    && catalog.PublishedValidFrom < dateToday
                    && catalog.PublishedValidTo < dateToday
        {
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextCatalog(_validatorTest.ValidationId,channelCatalogs.CatalogRefRecId);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                logContext,
                "@Retail:ValidationRuleCounterMetricId",
                "@Retail:RetailCommerceValidatorCataRu003Description",
                _validatorTest.TestId,
                "@Retail:RetailCommerceValidatorCataRu003"
                );

            // Increase the counter of issues
            resultsCounter++;
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatalogTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Cata-Ru-004': Catalog translation is missing.
    /// Validates if the catalog translation is missing, logs an error if yes.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateCatalogTranslation(RetailCommerceValidatorTests _validatorTest)
    {
        Catalog catalog;
        CatalogTranslation catalogTranslation;
        RetailCommerceValidatorWorkChannelLanguages channelLanguages;
        RetailCommerceValidatorWorkChannelCatalogs channelCatalogs;
        int resultsCounter = 0;

        while select LanguageId from channelLanguages
            where channelLanguages.ValidationId == _validatorTest.ValidationId
        {
            while select CatalogRefRecId from channelCatalogs
                order by channelCatalogs.CatalogRefRecId asc
                where channelCatalogs.ValidationId == _validatorTest.ValidationId
                    && channelCatalogs.CatalogRefRecId >= _validatorTest.RangeStartRecId
                    && channelCatalogs.CatalogRefRecId <= _validatorTest.RangeEndRecId
                    && channelCatalogs.CatalogRefRecId != 0
                notexists join catalogTranslation
                    where catalogTranslation.Catalog == channelCatalogs.CatalogRefRecId
                        && catalogTranslation.FriendlyName != ''
                        && catalogTranslation.Language == channelLanguages.LanguageId
            {
                str description = strFmt("@Retail:RetailCommerceValidatorCatalogTranslationMissing", channelLanguages.LanguageId);

                // Find or create context of records
                RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextCatalog(_validatorTest.ValidationId,channelCatalogs.CatalogRefRecId);

                // Log the issue
                RetailCommerceValidatorLog::addLog(
                    logContext,
                    "@Retail:ValidationRuleCounterMetricId",
                    description,
                    _validatorTest.TestId,
                    "@Retail:RetailCommerceValidatorCataRu004"
                    );

                // Increase the counter of issues
                resultsCounter++;
            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIfCatalogProductAssorted</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Cata-Ru-005': Catalog product is not assorted.
    /// Validates if the catalog product is assorted or not, logs an error if not assorted.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateIfCatalogProductAssorted(RetailCommerceValidatorTests _validatorTest)
    {
        CatalogProduct catalogProduct;
        RetailCommerceValidatorWorkChannelProducts channelProducts;
        RetailCommerceValidatorWorkChannelCatalogs channelCatalogs;
        int resultsCounter = 0;

        while select Product, Catalog from catalogProduct
            exists join channelCatalogs
            order by channelCatalogs.CatalogRefRecId asc
                where channelCatalogs.CatalogRefRecId == catalogProduct.Catalog
                    && channelCatalogs.ValidationId == _validatorTest.ValidationId
                    && channelCatalogs.CatalogRefRecId >= _validatorTest.RangeStartRecId
                    && channelCatalogs.CatalogRefRecId <= _validatorTest.RangeEndRecId
                    && channelCatalogs.CatalogRefRecId != 0
            notexists join channelProducts
                where channelProducts.ProductRefRecId == catalogProduct.Product
                    && channelProducts.ValidationId == _validatorTest.ValidationId
                    && channelProducts.ChannelExcluded == NoYes::No
        {
            // Find or create context of records
            RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextCatalogProduct(
                _validatorTest.ValidationId,
                catalogProduct.Catalog,
                catalogProduct.Product);

            // Log the issue
            RetailCommerceValidatorLog::addLog(
                logContext,
                "@Retail:ValidationRuleCounterMetricId",
                "@Retail:RetailCommerceValidatorCataRu005Description",
                _validatorTest.TestId,
                "@Retail:RetailCommerceValidatorCataRu005"
                );

            // Increase the counter of issues
            resultsCounter++;

        }

        return [resultsCounter];

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIfCatalogProductNotReleased</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Cata-Ru-006': Catalog product is not released.
    /// Validates if the catalog product is assorted and not released to a company, logs an error if not released.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of log status and count of errors.</returns>
    internal static container validateIfCatalogProductNotReleased(RetailCommerceValidatorTests _validatorTest)
    {
        InventTable inventTable;
        InventDimCombination inventDimCombination;
        CatalogProduct catalogProduct;
        RetailCommerceValidatorWorkChannelCatalogs channelCatalogs;
        RetailCommerceValidatorWorkChannelProducts channelProducts;
        RetailCommerceValidatorWorkChannelAssortedProducts channelAssortedProducts;
        int resultsCounter = 0;
        DataAreaId channelLegalEntity = RetailCommerceValidatorRulesCatalog::getChannelLegalEntity(_validatorTest.ValidationId);

        if (channelLegalEntity)
        {
            changeCompany(channelLegalEntity)
            {
                // Validate master, standalone products and Kits
                while select Product, Catalog from catalogProduct
                    exists join channelCatalogs
                    order by channelCatalogs.CatalogRefRecId asc
                        where channelCatalogs.CatalogRefRecId == catalogProduct.Catalog
                            && channelCatalogs.CatalogRefRecId >= _validatorTest.RangeStartRecId
                            && channelCatalogs.CatalogRefRecId <= _validatorTest.RangeEndRecId
                            && channelCatalogs.CatalogRefRecId != 0
                            && channelCatalogs.ValidationId == _validatorTest.ValidationId
                    exists join channelProducts
                        where channelProducts.ProductRefRecId == catalogProduct.Product
                            && channelProducts.ValidationId == _validatorTest.ValidationId
                            && channelProducts.ChannelExcluded == NoYes::No
                    exists join channelAssortedProducts
                        where channelAssortedProducts.ProductRefRecId == channelProducts.ProductRefRecId
                            && channelAssortedProducts.ValidationId == _validatorTest.ValidationId
                            && channelAssortedProducts.VariantRefRecId == 0
                    notexists join inventTable
                        where inventTable.Product == channelProducts.ProductRefRecId
                {
                    // Find or create context of records
                    RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextCatalogProduct(
                        _validatorTest.ValidationId,
                        catalogProduct.Catalog,
                        catalogProduct.Product);

                    // Log the issue
                    RetailCommerceValidatorLog::addLog(
                        logContext,
                        "@Retail:ValidationRuleCounterMetricId",
                        "@Retail:RetailCommerceValidatorCataRu006Description",
                        _validatorTest.TestId,
                        "@Retail:RetailCommerceValidatorCataRu006"
                        );

                    // Increase the counter of issues
                    resultsCounter++;
                }

                // Validate variants
                while select Product, Catalog from catalogProduct
                    exists join channelCatalogs
                    order by channelCatalogs.CatalogRefRecId asc
                        where channelCatalogs.CatalogRefRecId == catalogProduct.Catalog
                            && channelCatalogs.CatalogRefRecId >= _validatorTest.RangeStartRecId
                            && channelCatalogs.CatalogRefRecId <= _validatorTest.RangeEndRecId
                            && channelCatalogs.CatalogRefRecId != 0
                            && channelCatalogs.ValidationId == _validatorTest.ValidationId
                    exists join channelProducts
                        where channelProducts.ProductRefRecId == catalogProduct.Product
                            && channelProducts.ValidationId == _validatorTest.ValidationId
                            && channelProducts.ChannelExcluded == NoYes::No
                    exists join channelAssortedProducts
                        where channelAssortedProducts.ProductRefRecId == channelProducts.ProductRefRecId
                            && channelAssortedProducts.ValidationId == _validatorTest.ValidationId
                            && channelAssortedProducts.VariantRefRecId != 0
                    notexists join inventDimCombination
                        where inventDimCombination.DistinctProductVariant == channelProducts.ProductRefRecId
                {
                    // Find or create context of records
                    RetailCommerceValidatorLogContext logContext = RetailCommerceValidatorLogContext::findOrCreateContextCatalogProduct(
                        _validatorTest.ValidationId,
                        catalogProduct.Catalog,
                        catalogProduct.Product);

                    // Log the issue
                    RetailCommerceValidatorLog::addLog(
                        logContext,
                        "@Retail:ValidationRuleCounterMetricId",
                        "@Retail:RetailCommerceValidatorCataRu006Description",
                        _validatorTest.TestId,
                        "@Retail:RetailCommerceValidatorCataRu006"
                        );

                    // Increase the counter of issues
                    resultsCounter++;

                }
            }
        }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatalogProductAttributeValueTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// RuleId--> 'Cata-Ru-007': Catalog product attribute value translation is missing.
    /// Validates if the translation is missing for overridden attribute value of a catalog product (Shared product attribute values and channel product attribute value),
    /// logs an error if missing.
    /// </summary>
    /// <param name = "_validatorTest"> The <c> RetailCommerceValidatorTests </c> table buffer.</param>
    /// <returns>A container consists of count of errors.</returns>
    internal static container validateCatalogProductAttributeValueTranslation(RetailCommerceValidatorTests _validatorTest)
    {
        RetailCommerceValidatorWorkChannelCatalogs channelCatalogs;
        RetailCommerceValidatorWorkChannelLanguages  channelLanguages;
        RetailCatalogProdIntOrgAttributeValue  retailCatalogProdIntOrgAttributeValue;
        CatalogProductInstanceValue catalogProductInstanceValue;
        EcoResTextValueTranslation  ecoResTextValueTranslation;
        RetailInternalOrganization retailInternalOrg;
        EcoResAttributeValue ecoResAttributeValue;
        EcoResAttributeType attributeType;
        EcoResTextValue ecoResTextValue;
        EcoResAttribute attribute;
        CatalogProduct catalogProduct;
        int resultsCounter = 0;

        RefRecId OMOperatingUnitId = RetailCommerceValidator::find(_validatorTest.ValidationId).OMOperatingUnitId;

        while select LanguageId from channelLanguages
            where channelLanguages.ValidationId == _validatorTest.ValidationId
        {
            // 1. Validates shared product attribute value translations.
            while select catalogProduct
                join RecId from channelCatalogs
                order by channelCatalogs.CatalogRefRecId asc
                    where channelCatalogs.CatalogRefRecId == catalogProduct.Catalog
                        && channelCatalogs.ValidationId == _validatorTest.ValidationId
                        && channelCatalogs.CatalogRefRecId >= _validatorTest.RangeStartRecId
                        && channelCatalogs.CatalogRefRecId <= _validatorTest.RangeEndRecId
                        && channelCatalogs.CatalogRefRecId != 0
                join RecId from catalogProductInstanceValue
                    where catalogProductInstanceValue.CatalogProduct == catalogProduct.RecId
                join RecId from ecoResAttributeValue
                    where ecoResAttributeValue.InstanceValue == catalogProductInstanceValue.RecId
                join RecId from attribute
                    where attribute.RecId == ecoResAttributeValue.Attribute
                join RecId from attributeType
                    where attributeType.RecId == attribute.AttributeType
                        && attributeType.IsEnumeration == NoYes::No
                join RecId from ecoResTextValue
                    where ecoResTextValue.RecId == ecoResAttributeValue.Value
                notexists join ecoResTextValueTranslation
                    where ecoResTextValueTranslation.TextValueTable == ecoResTextValue.RecId
                        && ecoResTextValueTranslation.TextValue != ''
                        && ecoResTextValueTranslation.Language == channelLanguages.LanguageId
                {
                    if (!RetailCommerceValidatorRulesAttribute::isSkippableAttribute(ecoResTextValue.RecId))
                    {
                        // Set description: 'Overriden Product attribute value translation on catalog for language -%1 is missing'
                        str description = strFmt("@Retail:RetailCommercevalidatorCatalogProdTransMissingDescription", channelLanguages.LanguageId);

                        // Find or create context of records
                        RetailCommerceValidatorLogContext logContext;

                        logContext = RetailCommerceValidatorLogContext::findOrCreateContextCatalogProductAttribute(
                        _validatorTest.ValidationId,
                        catalogProduct.Catalog,
                        catalogProduct.Product,
                        attribute.RecId);

                        // Log the issue
                        RetailCommerceValidatorLog::addLog(
                            logContext,
                            "@Retail:ValidationRuleCounterMetricId",
                            description,
                            _validatorTest.TestId,
                            "@Retail:RetailCommerceValidatorCataRu007"
                            );

                        // Increase the counter of issues
                        resultsCounter++;
                    }
                }

            // 2. Validates catalog's channel product attribute value translations.
            while select Catalog, Product from catalogProduct
                join RecId from channelCatalogs
                order by channelCatalogs.CatalogRefRecId asc
                    where channelCatalogs.CatalogRefRecId == catalogProduct.Catalog
                        && channelCatalogs.ValidationId == _validatorTest.ValidationId
                        && channelCatalogs.CatalogRefRecId >= _validatorTest.RangeStartRecId
                        && channelCatalogs.CatalogRefRecId <= _validatorTest.RangeEndRecId
                        && channelCatalogs.CatalogRefRecId != 0
                join Attribute, Value from retailCatalogProdIntOrgAttributeValue
                    where retailCatalogProdIntOrgAttributeValue.CatalogProd == catalogProduct.RecId
                join RecId from retailInternalOrg
                    where retailInternalOrg.RecId == retailCatalogProdIntOrgAttributeValue.InternalOrganization
                        && retailInternalOrg.InternalOrganization == OMOperatingUnitId
                join RecId from attribute
                    where Attribute.RecId == retailCatalogProdIntOrgAttributeValue.Attribute
                join RecId from ecoResTextValue
                    where ecoResTextValue.RecId == retailCatalogProdIntOrgAttributeValue.Value
                join RecId from attributeType
                    where attributeType.RecId == attribute.AttributeType
                        && attributeType.IsEnumeration == NoYes::No
                notexists join ecoResTextValueTranslation
                    where ecoResTextValueTranslation.TextValueTable == ecoResTextValue.RecId
                        && ecoResTextValueTranslation.TextValue != ''
                        && ecoResTextValueTranslation.Language == channelLanguages.LanguageId
                {
                    if (!RetailCommerceValidatorRulesAttribute::isSkippableAttribute(ecoResTextValue.RecId))
                    {
                        // Set description: 'Overriden Product attribute value translation on catalog for language -%1 is missing'
                        str description = strFmt("@Retail:RetailCommercevalidatorCatalogChannelProdTransMissingDescription", channelLanguages.LanguageId);

                        // Find or create context of records
                        RetailCommerceValidatorLogContext logContext;

                        logContext = RetailCommerceValidatorLogContext::findOrCreateContextCatalogProductAttribute(
                        _validatorTest.ValidationId,
                        catalogProduct.Catalog,
                        catalogProduct.Product,
                        retailCatalogProdIntOrgAttributeValue.Attribute);

                        // Log the issue
                        RetailCommerceValidatorLog::addLog(
                            logContext,
                            "@Retail:ValidationRuleCounterMetricId",
                            description,
                            _validatorTest.TestId,
                            "@Retail:RetailCommerceValidatorCataRu007"
                            );

                        resultsCounter++;
                    }
                }
            }

        return [resultsCounter];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChannelLegalEntity</Name>
				<Source><![CDATA[
    private static DataAreaId getChannelLegalEntity(RetailCommerceValidatorId _validationId)
    {
        RetailStoreTable retailStoreTable;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(_validationId);
        DataAreaId legalEntity;

        select firstonly InventLocationDataAreaId from retailStoreTable
            where retailStoreTable.OMOperatingUnitID == retailCommerceValidator.OMOperatingUnitId
                && retailStoreTable.ChannelType == RetailChannelType::RetailStore;

        legalEntity = retailStoreTable.inventLocationDataAreaId;

        if (!legalEntity)
        {
            RetailOnlineChannelTable onlineChannelTable;

            select firstonly InventLocationDataAreaId from onlineChannelTable
                where onlineChannelTable.OMOperatingUnitID == retailCommerceValidator.OMOperatingUnitId
                    && onlineChannelTable.ChannelType == RetailChannelType::OnlineStore;

            legalEntity = onlineChannelTable.inventLocationDataAreaId;
        }

        return legalEntity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>