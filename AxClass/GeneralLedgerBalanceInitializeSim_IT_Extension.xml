<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralLedgerBalanceInitializeSim_IT_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GeneralLedgerBalanceInitializeSim_IT_Extension</c> class creates or updates the general ledger balances.
/// </summary>
[ExtensionOf(classStr(GeneralLedgerBalanceInitialize))]
internal final class GeneralLedgerBalanceInitializeSim_IT_Extension
{
    private GeneralLedgerBalanceInstrumentationLogger simITLogger;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        simITLogger = GeneralLedgerBalanceInstrumentationLogger::createLogger(classStr(GeneralLedgerBalanceUpdateSim_IT_Extension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBalanceRebuild</Name>
				<Source><![CDATA[
    protected void processBalanceRebuild()
    {
        next processBalanceRebuild();

        SelectableDataArea dataArea = CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(contract.parmLedgerRecId()));

        changecompany(dataArea)
        {
            if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
            {
                this.removeExistingBalanceRecordsSimIT();
                this.createUnprocessedTransactionsSimIT();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExistingBalanceRecordsSimIT</Name>
				<Source><![CDATA[
    private void removeExistingBalanceRecordsSimIT()
    {
        GeneralLedgerBalanceSim_IT balance;

        delete_from balance
            where (balance.Ledger == contract.parmLedgerRecId())
                && (contract.parmFromDate() == dateNull() || balance.AccountingDate >= contract.parmFromDate())
                && (contract.parmToDate() == dateNull() || balance.AccountingDate <= contract.parmToDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUnprocessedTransactionsSimIT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>GeneralLedgerBalanceUnprocessedTransactionsSim_IT</c> records in chunks from the original <c>GeneralJournalEntrySim_IT</c> records
    /// references used later in processing to create the balances.
    /// </summary>
    private void createUnprocessedTransactionsSimIT()
    {
        GeneralLedgerBalanceSqlStatementContract sqlStatementContract = GeneralLedgerBalanceSqlStatementContract::newForProcessContract(contract);

        GeneralLedgerBalanceSqlStatementProviderSim_IT statementProvider = GeneralLedgerBalanceSqlStatementProviderSim_IT::newForContract(sqlStatementContract);
        GeneralLedgerBalanceSqlStatement statement = statementProvider.buildInitializeUnprocessedTransactionsSimITSqlStatement();

        System.Exception ex;

        using (var activityContext = simITLogger.processActivities().getActivityContextForBalanceProcess(contract, methodStr(GeneralLedgerBalanceInitializeSim_IT_Extension, createUnprocessedTransactionsSimIT)))
        {
            int64 recordCount = 1;

            while (recordCount > 0)
            {
                ttsbegin;

                recordCount = statementProvider.executeNonQuery(statement);

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>