<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepProfileChangeOperator_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is a class to apply or validate depreciation profile change on single value model or depreciation book
/// </summary>
class AssetDepProfileChangeOperator_JP
{
    private const str FeatureReference = 'JP-00029';

    AssetDepMethodChangeSettings_JP     changeSettings;
    AssetDepProfileChangeArgs_JP        changeArgs;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>apply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the depreciation profile change to single value model or depreciation book
    /// </summary>
    public void apply()
    {
        AssetDepProfileChange_JP            curDepProfileChange;
        AssetDepProfileChange_JP            prevDepProfileChange;
        AssetDepBookMap_JP                  assetDepBookMap;
        TableId                             sourceTableId;
        RecId                               sourceRecId;

        sourceTableId   = changeArgs.parmSourceTableId();
        sourceRecId     = changeArgs.parmSourceRecId();

        ttsBegin;

        if (AssetDepProfileChange_JP::exist(sourceTableId, sourceRecId))
        {
            this.update();
        }
        else
        {
            this.create();
        }

        // Calc and update new service life after the change if equally divided formula is not used
        if (!changeArgs.parmIsUseEquallyDividedFormula()
            && sourceTableId == tableNum(AssetBook))
        {
            assetDepBookMap = AssetDepBookMap_JP::findByRecId(sourceTableId, sourceRecId);

            prevDepProfileChange = AssetDepProfileChange_JP::findByDepProfileId(sourceTableId, sourceRecId, changeArgs.parmFromDepProfileId());
            curDepProfileChange = AssetDepProfileChange_JP::findByDepProfileId(sourceTableId, sourceRecId, changeArgs.parmToDepProfileId(), true);

            if (AssetDepProfileChangeHelper_JP::updateServiceLife(assetDepBookMap, changeSettings, prevDepProfileChange, curDepProfileChange, changeArgs.parmIsUpdateServiceLife()))
            {
                curDepProfileChange.calcLifeTime();
                curDepProfileChange.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                curDepProfileChange.update();
            }
            else
            {
                ttsAbort;

                return;
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates depreciation profile change records
    /// </summary>
    protected void create()
    {
        ttsBegin;

        this.createDefault();
        this.createLatest();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates default depreciation profile change record
    /// </summary>
    public void createDefault()
    {
        AssetDepProfileChange_JP    depProfileChange;
        AssetGroupDepBookMap_JP     assetGroupDepBookMap;
        TableId                     sourceTableId = changeArgs.parmSourceTableId();
        RefRecId                    sourceRecId = changeArgs.parmSourceRecId();

        assetGroupDepBookMap = AssetGroupDepBookMap_JP::find(sourceTableId, sourceRecId);

        depProfileChange.clear();
        depProfileChange.SourceTableId = sourceTableId;
        depProfileChange.SourceRecId = sourceRecId;
        depProfileChange.ValidFrom = dateNull();
        if (changeArgs.parmPrevEndDate() != dateNull())
        {
            depProfileChange.ValidTo = changeArgs.parmPrevEndDate();
        }
        else if (changeArgs.parmStartDate() != dateNull())
        {
            depProfileChange.ValidTo = changeArgs.parmStartDate() - 1;
        }
        else
        {
            depProfileChange.ValidTo = dateMax();
        }
        depProfileChange.ServiceLife = assetGroupDepBookMap.ServiceLife;
        depProfileChange.LifeTime = assetGroupDepBookMap.LifeTime;
        depProfileChange.DepreciationProfile = assetGroupDepBookMap.depreciationProfile().Profile;
        depProfileChange.IsUseEquallyDividedFormula = NoYes::No;
        depProfileChange.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLatest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the last new depreciation profile change record
    /// </summary>
    protected void createLatest()
    {
        AssetDepProfileChange_JP    depProfileChange;

        // Insert a record for the depreciation profile changed to
        depProfileChange.clear();
        depProfileChange.SourceTableId = changeArgs.parmSourceTableId();
        depProfileChange.SourceRecId = changeArgs.parmSourceRecId();
        depProfileChange.ValidFrom = changeArgs.parmStartDate();
        depProfileChange.ValidTo = maxDate();
        depProfileChange.DepreciationProfile = changeArgs.parmToDepProfileId();
        depProfileChange.ServiceLife = changeArgs.parmAssetServiceLife();
        depProfileChange.LifeTime = changeArgs.parmAssetLifeTime();
        depProfileChange.IsUseEquallyDividedFormula = changeArgs.parmIsUseEquallyDividedFormula();
        depProfileChange.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>AssetDepProfileChangeManager_JP</c>
    /// </summary>
    /// <param name="_changeSettings">
    /// Asset depreciation method change settings
    /// </param>
    public void new(AssetDepMethodChangeSettings_JP _changeSettings)
    {
        changeSettings = _changeSettings;
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeArgs</Name>
				<Source><![CDATA[
    public AssetDepProfileChangeArgs_JP parmChangeArgs(AssetDepProfileChangeArgs_JP _changeArgs = changeArgs)
    {
        changeArgs = _changeArgs;
        return changeArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeSettings</Name>
				<Source><![CDATA[
    public AssetDepMethodChangeSettings_JP parmChangeSettings(AssetDepMethodChangeSettings_JP _changeSettings = changeSettings)
    {
        changeSettings = _changeSettings;
        return changeSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates depreciation profile change records
    /// </summary>
    protected void update()
    {
        AssetDepProfileChange_JP    depProfileChange, depProfileChangeOld;

        TableId     sourceTableId = changeArgs.parmSourceTableId();
        RecId       sourceRecId   = changeArgs.parmSourceRecId();

        depProfileChange = AssetDepProfileChange_JP::findByDepProfileId(sourceTableId, sourceRecId, changeArgs.parmFromDepProfileId(), true);
        if (!depProfileChange)
        {
            return;
        }

        ttsBegin;

        // Delete the later records
        if (depProfileChange.ValidTo != dateMax())
        {
            delete_from depProfileChangeOld
                where depProfileChangeOld.SourceTableId == sourceTableId
                    && depProfileChangeOld.SourceRecId == sourceRecId
                    && depProfileChangeOld.ValidFrom >= depProfileChange.ValidTo+1;
        }

        // Update previous record
        depProfileChange.ValidTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
        if (changeArgs.parmPrevEndDate() != dateNull())
        {
            depProfileChange.ValidTo = changeArgs.parmPrevEndDate();
        }
        else
        {
            depProfileChange.ValidTo = changeArgs.parmStartDate() - 1;
        }
        depProfileChange.update();

        // Insert a record for the depreciation profile changed to
        this.createLatest();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the depreciation profile change is valid
    /// </summary>
    /// <param name="_showWarning">
    /// Shows warning message when validation fails if set to true
    /// </param>
    /// <returns>
    /// true if valid
    /// </returns>
    /// <remarks>
    /// During the depreciation profile change is applied from group level to asset
    /// level, warning message should not be shown when validation fails
    /// </remarks>
    public boolean validate(boolean _showWarning = true)
    {
        boolean ret;

        ret = changeArgs
            && this.validateDepProfile(_showWarning)
            && this.validateNoChangeLoop(_showWarning)
            && this.validateDate(_showWarning)
            && this.validateNumOfYearsEquallyDivided(_showWarning)
            && this.validateCanUpdateServiceLife(_showWarning);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanUpdateServiceLife</Name>
				<Source><![CDATA[
    private boolean validateCanUpdateServiceLife(boolean _showWarning = true)
    {
        AssetDepBookMap_JP assetDepBookMap;
        AssetDepProfileChange_JP prevDepProfileChange;
        AssetDepProfileChange_JP curDepProfileChange;
        boolean ret = true;

        if (AssetDepProfileChangeOperator_JPCanUpdateServiceLifeFlight::instance().isEnabled())
        {
            assetDepBookMap = AssetDepBookMap_JP::findByRecId(changeArgs.parmSourceTableId(), changeArgs.parmSourceRecId());
            prevDepProfileChange = AssetDepProfileChange_JP::findByDepProfileId(changeArgs.parmSourceTableId(), changeArgs.parmSourceRecId(), changeArgs.parmFromDepProfileId());
            curDepProfileChange = AssetDepProfileChange_JP::findByDepProfileId(changeArgs.parmSourceTableId(), changeArgs.parmSourceRecId(), changeArgs.parmToDepProfileId(), true);

            if (!AssetDepProfileChangeHelper_JP::canUpdateServiceLife(
                assetDepBookMap,
                changeSettings,
                prevDepProfileChange,
                curDepProfileChange,
                changeArgs.parmIsUpdateServiceLife(),
                _showWarning))
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDate</Name>
				<Source><![CDATA[
    private boolean validateDate(boolean _showWarning = true)
    {
        boolean                     ret;
        AssetDepreciationProfileId  fromDepProfileId = changeArgs.parmFromDepProfileId();
        AssetDepreciationProfileId  toDepProfileId = changeArgs.parmToDepProfileId();
        AssetTransDate              startDate = changeArgs.parmStartDate();
        AssetTransDate              prevEndDate = changeArgs.parmPrevEndDate();
        TableId                     sourceTableId = changeArgs.parmSourceTableId();
        RecId                       sourceRecId = changeArgs.parmSourceRecId();

        AssetTableInterval          assetTableInterval, assetTableIntervalPrev;
        AssetDepBookTableMap_JP     assetDepBookTableMap;
        AssetDepProfileChange_JP    assetDepProfileChangePrev;
        RecId                       fiscalCalender, fiscalCalenderPrev;

        assetDepBookTableMap = AssetDepBookTableMap_JP::find(changeArgs.parmAssetBookType(), changeArgs.parmAssetBookId());
        assetDepProfileChangePrev = AssetDepProfileChange_JP::findByDepProfileId(sourceTableId, sourceRecId, fromDepProfileId);
        fiscalCalender = assetDepBookTableMap.AssetDepBookTableMap_JP::getFiscalCalendar_JP(startDate);
        fiscalCalenderPrev = assetDepBookTableMap.AssetDepBookTableMap_JP::getFiscalCalendar_JP(prevEndDate);
        assetTableInterval = AssetTableIntervalExt_JP::constructFromCalendarSchedule(
            changeArgs.parmToDepProfile(),
            assetDepBookTableMap.TableId,
            assetDepBookTableMap.RecId);
        assetTableIntervalPrev = AssetTableIntervalExt_JP::constructFromCalendarSchedule(
            changeArgs.parmFromDepProfile(),
            assetDepBookTableMap.TableId,
            assetDepBookTableMap.RecId);

        if (prevEndDate != dateMax() && startDate <= prevEndDate)
        {
            ret = _showWarning && checkFailed(strFmt("@SYS4003071", toDepProfileId, fromDepProfileId));
        }
        else if (startDate <= assetDepProfileChangePrev.ValidFrom)
        {
            ret = _showWarning && checkFailed(strFmt("@SYS4003072", toDepProfileId, fromDepProfileId));
        }
        else if (assetTableInterval.startOfPeriod(startDate) != startDate)
        {
            ret = _showWarning && checkFailed(strFmt("@SYS4003073", FiscalCalendar::find(fiscalCalender).CalendarId));
        }
        else if (prevEndDate != dateMax() && assetTableIntervalPrev.endPeriod(prevEndDate) != prevEndDate)
        {
            ret = _showWarning && checkFailed(strFmt("@SYS4003074", FiscalCalendar::find(fiscalCalenderPrev).CalendarId));
        }
        else
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDepProfile</Name>
				<Source><![CDATA[
    private boolean validateDepProfile(boolean _showWarning = true)
    {
        boolean     ret = true;
        AssetDepreciationMethod     fromMethod = changeArgs.parmFromDepProfile().Method;
        AssetDepreciationMethod     toMethod   = changeArgs.parmToDepProfile().Method;

        if (!changeSettings.validate([fromMethod, toMethod]))
        {
            ret = _showWarning && checkFailed(strFmt("@SYS4003070", fromMethod, toMethod));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoChangeLoop</Name>
				<Source><![CDATA[
    private boolean validateNoChangeLoop(boolean _showWarning = true)
    {
        boolean     ret = true;
        TableId     sourceTableId = changeArgs.parmSourceTableId();
        RecId       sourceRecId   = changeArgs.parmSourceRecId();

        AssetDepProfileChange_JP    depProfileChange, prevDepProfileChange;
        AssetDepreciationProfile    depProfile;
        AssetDepreciationMethod     toMethod = changeArgs.parmToDepProfile().Method;
        AssetTransDate              fromDate = dateNull();
        AssetTransDate              toDate;

        prevDepProfileChange = AssetDepProfileChange_JP::findByDepProfileId(sourceTableId, sourceRecId, changeArgs.parmFromDepProfileId());
        toDate = prevDepProfileChange.ValidFrom-1;
        while select validTimeState(fromDate, toDate) RecId from depProfileChange
            order by depProfileChange.ValidFrom desc
            where depProfileChange.SourceTableId == sourceTableId
                && depProfileChange.SourceRecId == sourceRecId
            exists join Method from depProfile
                where depProfile.Profile == depProfileChange.DepreciationProfile
                    && depProfile.Method == toMethod
        {
            // You cannot change depreciation method %1 to %2 because it has already been changed from depreciation method %2.
            ret = _showWarning && checkFailed(strFmt("@SYS4003069", changeArgs.parmFromDepProfile().Method, changeArgs.parmToDepProfile().Method));
            break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumOfYearsEquallyDivided</Name>
				<Source><![CDATA[
    private boolean validateNumOfYearsEquallyDivided(boolean _showWarning = true)
    {
        boolean ret = true;

        if (changeArgs.parmToDepProfile().NumOfYearsEquallyDivided_JP < changeArgs.parmFromDepProfile().NumOfYearsEquallyDivided_JP)
        {
            // If number of years to equally divide depreciation amounts set up for %2 is less than
            // the one for %1, the depreciation method changeover from %1 to %2 is not allowed.
            ret = _showWarning && checkFailed(strFmt("@SYS4003076", changeArgs.parmFromDepProfileId(), changeArgs.parmToDepProfileId()));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>