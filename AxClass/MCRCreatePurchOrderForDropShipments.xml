<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCreatePurchOrderForDropShipments</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRCreatePurchOrderForDropShipments</c> class allows a user to select sales orders and create drop ship purchase orders.
/// </summary>
class MCRCreatePurchOrderForDropShipments extends RunBaseBatch implements BatchRetryable
{
    DialogRunbase       dialog;
    QueryRun            queryRun;
    // Dialog fields
    DialogField     dlgMCRDropShipment;
    DialogField     dlgMCRDropShipStatus;
    DialogField     dlgMCROrderStopped;
    DialogField     dlgSalesOrderStatus;

    #define.CurrentVersion(1)

    private MCRDropShipInstrumentationLogger instrumentationLogger;

    private boolean shouldConsolidateOrders;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// The dialog of create purchase order for drop shipments.
    /// </summary>
    /// <returns>The dialog object.</returns>
    public Object dialog()
    {
        dialog = super();

        // Show the required parameters
        dlgMCRDropShipment = dialog.addFieldValue(extendedTypeStr(MCRDropShipment), enum2str(NoYes::Yes));
        dlgMCRDropShipment.allowEdit(false);
        dlgMCRDropShipment.value(true);

        dlgMCRDropShipStatus = dialog.addFieldValue(enumStr(MCRDropShipStatus), enum2str(MCRDropShipStatus::ToBeDropShipped));
        dlgMCRDropShipStatus.allowEdit(false);
        dlgMCRDropShipStatus.value(MCRDropShipStatus::ToBeDropShipped);

        dlgSalesOrderStatus = dialog.addFieldValue(enumStr(SalesStatus), enum2str(SalesStatus::Backorder));
        dlgSalesOrderStatus.allowEdit(false);
        dlgSalesOrderStatus.value(SalesStatus::Backorder);

        dlgMCROrderStopped = dialog.addFieldValue(extendedTypeStr(MCROrderStopped ), enum2str(NoYes::No));
        dlgMCROrderStopped.allowEdit(false);
        dlgMCROrderStopped.value(NoYes::No);

        dialog.allowUpdateOnSelectCtrl(true);
        this.dialogSelectCtrl();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the dialog posting logic.
    /// </summary>
    /// <param name="_dialog">
    /// The <c>DialogRunbase</c> object to be run.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogQueryButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a query dialog menu item button to the dialog.
    /// </summary>
    public void dialogQueryButton()
    {
        dialog.addMenuItemButton(MenuItemType::Display, menuitemDisplayStr(RunbaseQueryDialog), DialogMenuItemGroup::BottomGrp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values for the <c>MCRCreatePurchOrderForDropShipments</c> class.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        queryRun = new QueryRun(queryStr(MCRDropShipments));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the drop ship PO.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///     A DeadlockException if the creation runs into a deadlocked database.
    /// </exception>
    public void run()
    {
        if (!this.validate())
        {
            throw error("Validation failed");
        }

        shouldConsolidateOrders = PurchDropShipConsolidateFeature::instance().isEnabled()
            && PurchParameters::find().MCRDropShipConsolidate;

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().createPurchaseOrderActivities().createPurchOrderForDropShip(shouldConsolidateOrders))
        {
            if (!shouldConsolidateOrders 
                && PurchDropShipCreateHandleErrorsFlight::instance().isEnabled())
            {
                this.createPurchaseOrders();
            }
            else
            {
                this.createPurchaseOrdersForConsolidation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseOrdersForConsolidation</Name>
				<Source><![CDATA[
    private void createPurchaseOrdersForConsolidation()
    {
        SalesTable  salesTableCurrent;
        SalesTable  salesTablePrevious;
        SalesLine   salesLineLocal;
        Set         salesLineRecIdSet;

        try
        {
            PurchCreateFromSalesOrder purchCreate = PurchCreateFromSalesOrder::construct();

            ttsBegin;

            while (queryRun.next())
            {
                salesLineLocal = QueryRun.get(tableNum(SalesLine));
                salesTableCurrent.data(QueryRun.get(tableNum(SalesTable)));

                // If current sales line is from a new SO
                if (queryRun.changed(tableNum(SalesTable)))
                {
                    if (salesTablePrevious) // If SO changed and this is not the very first iteration then generate for the previous SO
                    {
                        this.initCreateDirectDeliveryPurchaseOrder(purchCreate, salesTablePrevious, salesLineRecIdSet);

                        if (!shouldConsolidateOrders)
                        {
                            purchCreate.runOperation();
                        }
                    }

                    salesLineRecIdSet = new Set(Types::Int64);
                    salesTablePrevious.data(salesTableCurrent);
                }

                // As long as the lines retrieved are from the same sales order, add lines to the list
                salesLineRecIdSet.add(salesLineLocal.recId);
            }

            if (salesTableCurrent)
            {
                this.initCreateDirectDeliveryPurchaseOrder(purchCreate, salesTableCurrent, salesLineRecIdSet);
            }

            purchCreate.runOperation();

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseOrders</Name>
				<Source><![CDATA[
    private void createPurchaseOrders()
    {
        SalesTable salesTableCurrent;
        SalesTable salesTablePrevious;
        Set salesLineRecIdSet;
        PurchCreateFromSalesOrder purchCreate = PurchCreateFromSalesOrder::construct();

        while (queryRun.next())
        {
            SalesLine salesLineLocal = queryRun.get(tableNum(SalesLine));
            salesTableCurrent.data(queryRun.get(tableNum(SalesTable)));

            if (queryRun.changed(tableNum(SalesTable)))
            {
                if (salesTablePrevious)
                {
                    this.createPurchaseOrder(purchCreate, salesTablePrevious, salesLineRecIdSet);
                }

                salesLineRecIdSet = new Set(Types::Int64);
                salesTablePrevious.data(salesTableCurrent);
            }

            salesLineRecIdSet.add(salesLineLocal.recId);
        }

        if (salesTableCurrent)
        {
            this.createPurchaseOrder(purchCreate, salesTableCurrent, salesLineRecIdSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseOrder</Name>
				<Source><![CDATA[
    private void createPurchaseOrder(PurchCreateFromSalesOrder _purchCreate, SalesTable _salesTable, Set _salesLineRecIdSet)
    {
        #OCCRetryCount
        setPrefix(strFmt("@SYS76767", _salesTable.SalesId));

        try
        {
            ttsbegin;
            this.initCreateDirectDeliveryPurchaseOrder(_purchCreate, _salesTable, _salesLineRecIdSet);
            _purchCreate.runOperation();
            ttscommit;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
        
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
        
            retry;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }

            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch
        {
            error("@SYS25904");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDirectDeliveryPurchaseOrder</Name>
				<Source><![CDATA[
    internal final static void createDirectDeliveryPurchaseOrder(PurchCreateFromSalesOrder _purchCreate, 
        SalesTable _salesTable, 
        Set _salesLineRecIdSet)
    {
        MCRCreatePurchOrderForDropShipments::construct().createPurchaseOrder(_purchCreate, _salesTable, _salesLineRecIdSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new queryRun(packedQuery);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static MCRCreatePurchOrderForDropShipments construct()
    {
        return new MCRCreatePurchOrderForDropShipments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@MCR10629";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        MCRCreatePurchOrderForDropShipments    mcrCreatePurchOrderForDropShipments;
        mcrCreatePurchOrderForDropShipments = MCRCreatePurchOrderForDropShipments::construct();

        if (mcrCreatePurchOrderForDropShipments.prompt())
        {
            mcrCreatePurchOrderForDropShipments.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCreateDirectDeliveryPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>TmpPurchLinePrice</c> records for creating direct delivery purchase orders.
    /// </summary>
    /// <param name="_purchCreate">
    /// The <c>PurchCreateFromSalesOrder</c> object.
    /// </param>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record for which the direct delivery purchase order is created.
    /// </param>
    /// <param name="_salesLineRecIdSet">
    /// The list of record IDs for the sales lines to create direct delivery purchase order(s) for.
    /// </param>
    /// <remarks>
    /// Lines from the given sales order will be grouped into the same purchase order if the items
    /// have the same default vendor.
    /// </remarks>
    private void initCreateDirectDeliveryPurchaseOrder(PurchCreateFromSalesOrder _purchCreate, SalesTable _salesTable, Set _salesLineRecIdSet)
    {
        _purchCreate.parmTransferAddress(true);
        _purchCreate.tradeLineDlvType(TradeLineDlvType::DropShip);
        _purchCreate.mcrDropShipment(NoYes::Yes);
        _purchCreate.parmSalesTable(_salesTable);
        _purchCreate.parmSalesLineRecIdSet(_salesLineRecIdSet);
        _purchCreate.parmCallerRecord(_salesTable);

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().createPurchaseOrderActivities().consolidateOrders(_salesTable, shouldConsolidateOrders))
        {
            if (!shouldConsolidateOrders)
            {
                _purchCreate.mcrDropShipCreateTmpFrmVirtual();
            }
            else
            {
                _purchCreate.mcrDropShipCreateTmpFrmVirtualKeepTmpPurchLinePrice();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal MCRDropShipInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = MCRDropShipInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>