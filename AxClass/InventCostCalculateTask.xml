<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostCalculateTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates bundle of items on a single level.
/// </summary>
/// <remarks>
/// This class will continually search for bundle of items to be cost calculated.
/// </remarks>
class InventCostCalculateTask extends InventCostHelpTaskBase implements BatchRetryable
{
    BOMLevel            bomLevel;
    BOMLevel            totalBomLevel;
    Counter             bundleNum;
    Counter             totalBundles;
    UserConnection      connection;

    // Statistics
    InventCostUpdateReturnAdjustmentsTime   updateReturnAdjustmentsTime;
    InventCostUpdateLevelAdjustmentTime     updateLevelAdjustmentTime;
    InventCostUpdateReceiptAdjustmentTime   updateReceiptAdjustmentTime;
    InventCostLoadTransferOrderTime         loadTransferOrderTime;
    InventCostPreCloseTransferOrderTime     preCloseTransferOrderTime;
    InventCostUpdateMarkingTime             updateMarkingTime;
    InventCostLoadTime                      loadTime;
    InventCostPreCloseNonFinancialTime      preCloseNonFinancialTime;
    InventCostUpdateModelTime               updateModelTime;

    InventCostUpdateReturnAdjustmentsCount  updateReturnAdjustmentsCount;
    InventCostUpdateLevelAdjustmentCount    updateLevelAdjustmentCount;
    InventCostUpdateReceiptAdjustmentCount  updateReceiptAdjustmentCount;
    InventCostLoadTransferOrderCount        loadTransferOrderCount;
    InventCostPreCloseTransferOrderCount    preCloseTransferOrderCount;
    InventCostUpdateMarkingCount            updateMarkingCount;
    InventCostLoadCount                     loadCount;
    InventCostPreCloseNonFinancialCount     preCloseNonFinancialCount;
    InventCostUpdateModelCount              updateModelCount;
    InventCostInventTransCount              openInventTransCount;
    InventCostInventTransCount              closedInventTransCount;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        bomLevel,
        totalBomLevel
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates bundle of items.
    /// </summary>
    protected void doRun()
    {
        connection = new UserConnection();

        try
        {
            this.processBundles();
        }
        finally
        {
            connection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    protected ClassDescription getTaskDescription()
    {
        return strFmt("@SYS4001028", InventCostClosing::prefixText(inventClosing.AdjustmentType), bomLevel, totalBundles);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextBundle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next bundle that will be processed.
    /// </summary>
    /// <returns>
    /// A <c>InventCostBundleList</c> record that will be processed next.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If a <c>UserConnection</c> object is not instantiated.
    /// </exception>
    private InventCostBundleList getNextBundle()
    {
        InventCostBundleList    inventCostBundleList;

        if (!connection)
        {
            throw error(strFmt("@SYS118114", funcName()));
        }

        inventCostBundleList.setConnection(connection);

        inventCostBundleList.readPast(true);

        select firstonly pessimisticlock inventCostBundleList
            order by RecId asc
            where inventCostBundleList.InventClosing == inventClosing.RecId
               && inventCostBundleList.Level == bomLevel
               && inventCostBundleList.ProcessingState == InventCostBundleState::Waiting;

        return inventCostBundleList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostItemDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an <c>InventCostItemDim</c> object.
    /// </summary>
    /// <returns>
    /// An <c>InventCostItemDim</c> object.
    /// </returns>
    protected InventCostItemDim inventCostItemDim()
    {
        return InventCostItemDim::newInventClosing(this, inventClosing, inventClosing.InventTransCurrency_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMLevel</Name>
				<Source><![CDATA[
    public BOMLevel parmBOMLevel(BOMLevel _bomLevel = bomLevel)
    {
        bomLevel = _bomLevel;

        return bomLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalBomLevel</Name>
				<Source><![CDATA[
    public BOMLevel parmTotalBomLevel(BOMLevel _totalBomLevel = totalBomLevel)
    {
        totalBomLevel = _totalBomLevel;

        return totalBomLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBundles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the next waiting bundle.
    /// </summary>
    protected void processBundles()
    {
        #OCCRetryCount
        InventCostBundleList    inventCostBundleList;
        InventCostList          inventCostList;
        boolean                 processContinue;
        Integer                 logPointBegin = infologLine();
        LogId                   logId = guid2str(newGuid());
        RefRecId                batchRecId;

        if (this.isInBatch())
        {
            batchRecId = this.parmCurrentBatch().RecId;
        }

        do
        {
            try
            {
                inventClosing = InventClosing::find(inventClosing.Voucher, inventClosing.TransDate, false);

                processContinue =   inventClosing &&
                                    inventClosing.StopRunning == NoYes::No &&
                                    inventClosing.Active;

                if (processContinue)
                {
                    connection.ttsbegin();

                    inventCostBundleList = this.getNextBundle();
                    if (inventCostBundleList)
                    {
                        inventCostBundleList.ProcessingState = InventCostBundleState::Processing;
                        inventCostBundleList.StartTime = DateTimeUtil::utcNow();
                        inventCostBundleList.Batch = batchRecId;

                        select count(RecId) from inventCostList
                            where inventCostList.Voucher == voucher
                                && inventCostList.Bundle  == inventCostBundleList.RecId;
                            
                        inventCostBundleList.InventCostBundleTotalItemsCount = inventCostList.RecId;

                        inventCostBundleList.update();
                    }

                    connection.ttscommit();

                    if (inventCostBundleList)
                    {
                        bundleNum++;

                        progress.update();

                        boolean noFailedTasks = true;
                        // process selected tasks
                        while select inventCostList
                            where inventCostList.Voucher == voucher
                                && inventCostList.Bundle == inventCostBundleList.RecId
                        {
                            
                            inventCostList.setStatus(InventCostListItemStatus::Started);
                            noFailedTasks = this.processTask(inventCostList) && noFailedTasks;
                            inventCostList.setStatus(InventCostListItemStatus::Finished);
                        }

                        // set bundle as ended
                        connection.ttsbegin();

                        inventCostBundleList.reread();

                        if (!inventCostBundleList.selectForUpdate())
                        {
                            inventCostBundleList.selectForUpdate(true);
                        }

                        if (noFailedTasks)
                        {
                            inventCostBundleList.ProcessingState = InventCostBundleState::Ended;
                            inventCostBundleList.EndTime = DateTimeUtil::utcNow();
                        }
                        inventCostBundleList.UpdateReturnAdjustmentsTime    += updateReturnAdjustmentsTime;
                        inventCostBundleList.UpdateLevelAdjustmentTime      += updateLevelAdjustmentTime;
                        inventCostBundleList.UpdateReceiptAdjustmentTime    += updateReceiptAdjustmentTime;
                        inventCostBundleList.LoadTransferOrderTime          += loadTransferOrderTime;
                        inventCostBundleList.PreCloseTransferOrderTime      += preCloseTransferOrderTime;
                        inventCostBundleList.UpdateMarkingTime              += updateMarkingTime;
                        inventCostBundleList.LoadTime                       += loadTime;
                        inventCostBundleList.PreCloseNonFinancialTime       += preCloseNonFinancialTime;
                        inventCostBundleList.UpdateModelTime                += updateModelTime;

                        inventCostBundleList.UpdateReturnAdjustmentsCount   += updateReturnAdjustmentsCount;
                        inventCostBundleList.UpdateLevelAdjustmentCount     += updateLevelAdjustmentCount;
                        inventCostBundleList.UpdateReceiptAdjustmentCount   += updateReceiptAdjustmentCount;
                        inventCostBundleList.LoadTransferOrderCount         += loadTransferOrderCount;
                        inventCostBundleList.PreCloseTransferOrderCount     += preCloseTransferOrderCount;
                        inventCostBundleList.UpdateMarkingCount             += updateMarkingCount;
                        inventCostBundleList.LoadCount                      += loadCount;
                        inventCostBundleList.PreCloseNonFinancialCount      += preCloseNonFinancialCount;
                        inventCostBundleList.UpdateModelCount               += updateModelCount;
                        inventCostBundleList.OpenInventTransCount           += openInventTransCount;
                        inventCostBundleList.ClosedInventTransCount         += closedInventTransCount;

                        inventCostBundleList.update();

                        connection.ttscommit();
                        this.resetStatistics();
                    }
                }
            }
            catch (Exception::UpdateConflict)
            {
                retry;
            }
            catch (Exception::UpdateConflictNotRecovered)
            {
                // Skip the bundle to avoid deadlocks between update conflicts from multiple threads.
                // The level/iteration completion task will reset bundles in processing state and create new tasks to process the bundle.
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    inventCostTaskController.handleError();
                    throw Exception::TransientSqlConnectionError;
                }
            }
            finally
            {
                if (inventClosing)
                {
                    Integer logPointNow = infologLine();
                    if (logPointBegin +1 <= logPointNow)
                    {
                        inventClosing.writeLog(infolog.cut(logPointBegin+1,logPointNow), LogType::Misc, logId);
                    }
                }
            }
        } while (inventCostBundleList && processContinue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatistics</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates statistics.
    /// </summary>
    /// <param name = "_inventCostItemDim">An instance of the <c>InventCostItemDim</c> class.</param>
    /// <param name = "_instrumentationLogger">The logger for instrumentation purposes.</param>
    private void updateStatistics(InventCostItemDim _inventCostItemDim, CostManagementInstrumentationLogger _instrumentationLogger)
    {
        this.logProcessTaskEndMeasures(_inventCostItemDim, _instrumentationLogger);

        updateReturnAdjustmentsTime     += _inventCostItemDim.parmUpdateReturnAdjustmentsTime();
        updateLevelAdjustmentTime       += _inventCostItemDim.parmUpdateLevelAdjustmentTime();
        updateReceiptAdjustmentTime     += _inventCostItemDim.parmUpdateReceiptAdjustmentTime();
        loadTransferOrderTime           += _inventCostItemDim.parmLoadTransferOrderTime();
        preCloseTransferOrderTime       += _inventCostItemDim.parmPreCloseTransferOrderTime();
        updateMarkingTime               += _inventCostItemDim.parmUpdateMarkingTime();
        loadTime                        += _inventCostItemDim.parmLoadTime();
        preCloseNonFinancialTime        += _inventCostItemDim.parmPreCloseNonFinancialTime();
        updateModelTime                 += _inventCostItemDim.parmUpdateModelTime();

        updateReturnAdjustmentsCount    += _inventCostItemDim.parmUpdateReturnAdjustmentsCount();
        updateLevelAdjustmentCount      += _inventCostItemDim.parmUpdateLevelAdjustmentCount();
        updateReceiptAdjustmentCount    += _inventCostItemDim.parmUpdateReceiptAdjustmentCount();
        loadTransferOrderCount          += _inventCostItemDim.parmLoadTransferOrderCount();
        preCloseTransferOrderCount      += _inventCostItemDim.parmPreCloseTransferOrderCount();
        updateMarkingCount              += _inventCostItemDim.parmUpdateMarkingCount();
        loadCount                       += _inventCostItemDim.parmLoadCount();
        preCloseNonFinancialCount       += _inventCostItemDim.parmPreCloseNonFinancialCount();
        updateModelCount                += _inventCostItemDim.parmUpdateModelCount();
        openInventTransCount            += _inventCostItemDim.parmOpenInventTransCount();
        closedInventTransCount          += _inventCostItemDim.parmClosedInventTransCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessTaskEndMeasures</Name>
				<Source><![CDATA[
    private void logProcessTaskEndMeasures(InventCostItemDim _inventCostItemDim, CostManagementInstrumentationLogger _instrumentationLogger)
    {
        Set instrumentationPropertyCollection = new Set(Types::Class);
        var loggerProperties = _instrumentationLogger.properties();

        instrumentationPropertyCollection.add(loggerProperties.addCount(staticMethodStr(xSession, currentRetryCount), xSession::currentRetryCount()));

        instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, OpenInventTransCount), _inventCostItemDim.parmOpenInventTransCount()));
        instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, ClosedInventTransCount), _inventCostItemDim.parmClosedInventTransCount()));

        instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, LoadCount), _inventCostItemDim.parmLoadCount()));
        instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, LoadTime), _inventCostItemDim.parmLoadTime()));

        instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, LoadTransferOrderCount), _inventCostItemDim.parmLoadTransferOrderCount()));
        instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, LoadTransferOrderTime), _inventCostItemDim.parmLoadTransferOrderTime()));

        instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, PreCloseNonFinancialCount), _inventCostItemDim.parmPreCloseNonFinancialCount()));
        instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, PreCloseNonFinancialTime), _inventCostItemDim.parmPreCloseNonFinancialTime()));

        instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, PreCloseTransferOrderCount), _inventCostItemDim.parmPreCloseTransferOrderCount()));
        instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, PreCloseTransferOrderTime), _inventCostItemDim.parmPreCloseTransferOrderTime()));

        instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, UpdateLevelAdjustmentCount), _inventCostItemDim.parmUpdateLevelAdjustmentCount()));
        instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, UpdateLevelAdjustmentTime), _inventCostItemDim.parmUpdateLevelAdjustmentTime()));

        instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, UpdateMarkingCount), _inventCostItemDim.parmUpdateMarkingCount()));
        instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, UpdateMarkingTime), _inventCostItemDim.parmUpdateMarkingTime()));

        instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, UpdateModelCount), _inventCostItemDim.parmUpdateModelCount()));
        instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, UpdateModelTime), _inventCostItemDim.parmUpdateModelTime()));

        instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, UpdateReceiptAdjustmentCount), _inventCostItemDim.parmUpdateReceiptAdjustmentCount()));
        instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, UpdateReceiptAdjustmentTime), _inventCostItemDim.parmUpdateReceiptAdjustmentTime()));

        instrumentationPropertyCollection.add(loggerProperties.addCount(fieldStr(InventCostBundleList, UpdateReturnAdjustmentsCount), _inventCostItemDim.parmUpdateReturnAdjustmentsCount()));
        instrumentationPropertyCollection.add(loggerProperties.addSubDuration(fieldStr(InventCostBundleList, UpdateReturnAdjustmentsTime), _inventCostItemDim.parmUpdateReturnAdjustmentsTime()));

        _instrumentationLogger.logPropertyCollection(instrumentationPropertyCollection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the next item from a bundle.
    /// </summary>
    /// <param name="_inventCostList">
    /// The <c>InventCostList</c> record to be processed.
    /// </param>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    /// An update conflict occurred, and kept occurring when it was retried.
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    /// An update conflict occurred.
    /// </exception>
    /// <returns>true if the processing of the task completed; otherwise false.</returns>
    private boolean processTask(InventCostList _inventCostList)
    {
        #OCCRetryCount
        InventCostItemDim inventCostItemDim;
        boolean completed = false;

        CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(classStr(InventCostCalculateTask));
        using (var processTaskActivityContext = instrumentationLogger.inventoryClosingCalculateActivities().processTask(_inventCostList, currentBatch))
        {
            try
            {
                inventCostItemDim = this.inventCostItemDim();
                inventCostItemDim.parmInventCostList(_inventCostList);
                inventCostItemDim.run();

                this.updateStatistics(inventCostItemDim, instrumentationLogger);

                completed = true;
            }
            catch (Exception::UpdateConflict)
            {
                this.updateStatistics(inventCostItemDim, instrumentationLogger);

                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Deadlock)
            {
                this.updateStatistics(inventCostItemDim, instrumentationLogger);
                retry;
            }
            catch (Exception::CLRError)
            {
                ApplicationUnhandledExceptionLogger::processUnhandledCLRException();

                this.updateStatistics(inventCostItemDim, instrumentationLogger);
                inventCostTaskController.handleError();
                throw Exception::Error;
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    this.updateStatistics(inventCostItemDim, instrumentationLogger);
                    inventCostTaskController.handleError();
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch
            {
                this.updateStatistics(inventCostItemDim, instrumentationLogger);
                inventCostTaskController.handleError();
                throw;
            }
        }
        return completed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the progress bar with information about the item currently being calculated.
    /// </summary>
    /// <param name="_inventCostList">
    /// The <c>InventCostList</c> record to be processed.
    /// </param>
    public void progressCalculation(InventCostList _inventCostList)
    {
        if (!this.isInBatch())
        {
            progress.setTotal(totalBundles);
            progress.setCount(bundleNum);
            progress.setText(strFmt("@SYS4001033",bomLevel,_inventCostList.ItemId));
            progress.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates bundle of items.
    /// </summary>
    /// <param name="_batchJobId">
    /// The batch job ID under which additional helpers will be created if this object is the master helper; optional.
    /// </param>
    public void run(RefRecId _batchJobId = this.parmCurrentBatch().BatchJobId)
    {
        totalBundles = this.totalBundles();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalBundles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total number bundles with status waiting.
    /// </summary>
    /// <returns>
    /// The total number of bundles with status waiting.
    /// </returns>
    private Counter totalBundles()
    {
        InventCostBundleList    inventCostBundleList;

        inventCostBundleList.readPast(true);

        select count(RecId) from inventCostBundleList
            where inventCostBundleList.InventClosing == inventClosing.RecId
               && inventCostBundleList.ProcessingState == InventCostBundleState::Waiting;

        return int642int(inventCostBundleList.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer  version = conPeek(_packedClass,1);
        container packedBase;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedBase] = _packedClass;
                return super(packedBase);
        }

        return super(_packedClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventCostCalculateTask construct()
    {
        return new InventCostCalculateTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    public static ClassDescription description()
    {
        return "@SYS4001017";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventCostCalculateTask</c> class.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher of the inventory closing.
    /// </param>
    /// <param name="_transDate">
    /// The date of the inventory closing.
    /// </param>
    /// <param name="_bomLevel">
    /// The level for which the inventory closing should be performed.
    /// </param>
    /// <param name="_totalBomLevel">
    /// The total levels for which the inventory closing should be performed.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventCostCalculateTask</c> class.
    /// </returns>
    public static InventCostCalculateTask newTask(
        Voucher             _voucher,
        TransDate           _transDate,
        BOMLevel            _bomLevel,
        BOMLevel            _totalBomLevel
        )
    {
        InventCostCalculateTask inventCostCalculateTask = InventCostCalculateTask::construct();

        inventCostCalculateTask.parmVoucher(_voucher);
        inventCostCalculateTask.parmTransDate(_transDate);
        inventCostCalculateTask.parmBOMLevel(_bomLevel);
        inventCostCalculateTask.parmTotalBomLevel(_totalBomLevel);

        return inventCostCalculateTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetStatistics</Name>
				<Source><![CDATA[
    private void resetStatistics()
    {
            updateReturnAdjustmentsTime     = 0;
            updateLevelAdjustmentTime       = 0;
            updateReceiptAdjustmentTime     = 0;
            loadTransferOrderTime           = 0;
            preCloseTransferOrderTime       = 0;
            updateMarkingTime               = 0;
            loadTime                        = 0;
            preCloseNonFinancialTime        = 0;
            updateModelTime                 = 0;

            updateReturnAdjustmentsCount    = 0;
            updateLevelAdjustmentCount      = 0;
            updateReceiptAdjustmentCount    = 0;
            loadTransferOrderCount          = 0;
            preCloseTransferOrderCount      = 0;
            updateMarkingCount              = 0;
            loadCount                       = 0;
            preCloseNonFinancialCount       = 0;
            updateModelCount                = 0;
            openInventTransCount            = 0;
            closedInventTransCount          = 0;

    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>