<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailShippingDeliveryMode</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class to get and validate delivery options for Sales orders and Sales lines.
/// </summary>
/// <remarks>
/// Contains methods to get valid delivery modes and validate delivery modes on sales orders and sales lines.
/// </remarks>
class RetailShippingDeliveryMode
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getHeaderDeliveryOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a set of the valid Delivery Mode options for given sales order.
    /// </summary>
    /// <param name="_salesTable">
    /// The sale order to get delivery options for.
    /// </param>
    /// <returns>
    /// A Set(Type::String) containing the valid Delivery Mode Codes
    /// </returns>
    /// <remarks>
    /// Gets a set of the valid Delivery Mode options for given sales order.  If there are no valid Delivery Mode options, an empty Set is returned.
    /// </remarks>
    public static Set getHeaderDeliveryOptions(SalesTable _salesTable)
    {
        Set deliveryModes = new Set(Types::String);
        DlvMode dlvMode;
        QueryRun r = new QueryRun(RetailShippingDeliveryMode::getValidDlvModeQueryBySalesTable(_salesTable));

        while (r.next())
        {
            dlvMode = r.get(tableNum(DlvMode));
            deliveryModes.add(DlvMode.Code);
        }
        return deliveryModes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineDeliveryOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a set of the valid Delivery Mode options for given sales line details.
    /// </summary>
    /// <param name="_salesLine">
    /// The sale line to get delivery options for.
    /// </param>
    /// <returns>
    /// A Set(Type::String) containing the valid Delivery Mode Codes
    /// </returns>
    /// <remarks>
    /// Gets a set of the valid Delivery Mode options for given sales line details.  If there are no valid Delivery Mode options, an empty Set is returned.
    /// </remarks>
    public static Set getLineDeliveryOptions(SalesLine _salesLine)
    {
        Set deliveryModes = new Set(Types::String);
        DlvMode dlvMode;
        QueryRun r = new QueryRun(RetailShippingDeliveryMode::getValidDlvModeQueryBySalesLine(_salesLine));

        while (r.next())
        {
            dlvMode = r.get(tableNum(DlvMode));
            deliveryModes.add(DlvMode.Code);
        }
        return deliveryModes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidDlvModeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns a query object that contains a list of the valid delivery methods for an order based on the parameters passed.
    /// </summary>
    /// <param name="_originId">
    /// Retail Channel RecId of the channel of origin for this sale.
    /// </param>
    /// <param name="_itemId">
    /// Item Id of the sale line product.
    /// </param>
    /// <param name="_inventDimId">
    /// InventDim Id of the sale line product.
    /// </param>
    /// <param name="_countryRegionId">
    /// Country Region Id of the sale line delivery address.
    /// </param>
    /// <param name="_state">
    /// State of the sale line delivery address.
    /// </param>
    /// <returns>
    /// The newly created valid delivery mode query.
    /// </returns>
    /// <remarks>
    /// Returns a Query object that can be used to retrieve valid Delivery Methods for the given sales line details.
    /// </remarks>
    public static Query getValidDlvModeQuery(
        RetailOriginId _originId,
        ItemId _itemId,
        InventDimId _inventDimId,
        LogisticsAddressCountryRegionId _countryRegionId,
        LogisticsAddressStateId _state)
    {
        Set channelRecIdSet = new Set(Types::Int64);

        channelRecIdSet.add(_originId);

        return RetailShippingDeliveryMode::getValidDlvModeQueryForMultipleChannel(
                    channelRecIdSet,
                    _itemId,
                    _inventDimId,
                    _countryRegionId,
                    _state);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidDlvModeQueryForMultipleChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns a query object that contains a list of the valid delivery methods for an order based on the parameters passed.
    /// </summary>
    /// <param name="_channel">
    /// Set which has RecId of Retail channels.
    /// </param>
    /// <param name="_itemId">
    /// Item Id of the sale line product.
    /// </param>
    /// <param name="_inventDimId">
    /// InventDim Id of the sale line product.
    /// </param>
    /// <param name="_countryRegionId">
    /// Country Region Id of the sale line delivery address.
    /// </param>
    /// <param name="_state">
    /// State of the sale line delivery address.
    /// </param>
    /// <returns>
    /// The newly created valid delivery mode query.
    /// </returns>
    /// <remarks>
    /// Returns a Query object that can be used to retrieve valid Delivery Methods for the given sales line details.
    /// </remarks>
    public static Query getValidDlvModeQueryForMultipleChannel(
        set _channel,
        ItemId _itemId,
        InventDimId _inventDimId,
        LogisticsAddressCountryRegionId _countryRegionId,
        LogisticsAddressStateId _state)
    {
        Query query = new Query();
        QueryBuildDataSource qbds;
        QueryBuildDataSource dsDlvProduct, dsDlvAddress, dsDlvChannel, dsPubChannel;
        SetEnumerator setEnumerator;

        //Root: Delivery Modes
        qbds = query.addDataSource(tablenum(DlvMode));
        qbds.relations(false);

        //Inner Join: Delivery modes by Channel
        dsDlvChannel = qbds.addDataSource(tablenum(RetailDlvModeChannelExploded));
        dsDlvChannel.joinMode(JoinMode::InnerJoin);
        dsDlvChannel.fetchMode(QueryFetchMode::One2One);
        dsDlvChannel.addLink(fieldNum(DlvMode, RecId), fieldNum(RetailDlvModeChannelExploded, DlvMode));
        //dsDlvChannel.addRange(fieldNum(RetailDlvModeChannelExploded, OMOperatingUnit)).value(queryValue(pubChannel.OMOperatingUnitID));

        //sub inner join: Filter for current Channel
        dsPubChannel = dsDlvChannel.addDataSource(tablenum(RetailChannelTable));
        dsPubChannel.joinMode(JoinMode::InnerJoin);
        dsPubChannel.fetchMode(QueryFetchMode::One2One);
        dsPubChannel.addLink(fieldNum(RetailDlvModeChannelExploded, OMOperatingUnit), fieldNum(RetailChannelTable, OMOperatingUnitID));

        setEnumerator = _channel.getEnumerator();
        while (setEnumerator.moveNext())
        {
            dsPubChannel.addRange(fieldNum(RetailChannelTable, RecId)).value(queryValue(setEnumerator.current()));
        }

        // Join: Delivery modes by product
        if (_itemId)
        {
            //Inner Join: Delivery modes by product
            dsDlvProduct = qbds.addDataSource(tablenum(RetailDlvModeProductExploded));
            dsDlvProduct.joinMode(JoinMode::InnerJoin);
            dsDlvProduct.fetchMode(QueryFetchMode::One2One);

            dsDlvProduct.addLink(fieldNum(DlvMode, RecId), fieldNum(RetailDlvModeProductExploded, DlvMode));
            dsDlvProduct.addRange(fieldNum(RetailDlvModeProductExploded, ItemId)).value(queryValue(_ItemId));

            if (_InventDimId)
            {
                // If InventDim is non-empty, then return only DeliveryModes that either match exactly, or don't have InventDim specified.
                dsDlvProduct.addRange(fieldNum(RetailDlvModeProductExploded, InventDim)).value(queryValue(''));
                dsDlvProduct.addRange(fieldNum(RetailDlvModeProductExploded, InventDim)).value(queryValue(_InventDimId));
            }
            //Otherwise, if InventDim is empty, then return all DeliveryModes for the item.
        }

        //Inner Join: Delivery modes by Address
        dsDlvAddress = qbds.addDataSource(tablenum(RetailDlvModeAddressExploded));
        dsDlvAddress.joinMode(JoinMode::InnerJoin);
        dsDlvAddress.fetchMode(QueryFetchMode::One2One);
        dsDlvAddress.addLink(fieldNum(DlvMode, RecId), fieldNum(RetailDlvModeAddressExploded, DlvMode));
        dsDlvAddress.addRange(fieldNum(RetailDlvModeAddressExploded, CountryRegion)).value(queryValue(_countryRegionId));
        dsDlvAddress.addRange(fieldNum(RetailDlvModeAddressExploded, State)).value(queryValue(_state));

        //Return the query.
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidDlvModeQueryBySalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns a query object that contains a list of the valid delivery methods for an order based on the parameters passed.
    /// </summary>
    /// <param name="_salesLine">
    /// Sales Line entry for which to generate the delivery mode query.
    /// </param>
    /// <returns>
    /// The newly created valid delivery mode query.
    /// </returns>
    /// <remarks>
    /// Returns a Query object that can be used to retrieve valid Delivery Methods for the given sales line details.
    /// </remarks>
    public static Query getValidDlvModeQueryBySalesLine(SalesLine _salesLine)
    {
        ItemId itemId = _salesline.ItemId;

        // SalesLine.InventDimId may point to an InventDim record that contains storage/product/tracking dimensions,
        // but RetailShippingDeliveryMode::GetValidDlvModeQuery requires only products dimensions to be passed as arguments,
        // so we're going to look it up in InventDimCombination (Variants table) to find the InventDim record that only contains product dimensions.
        InventDimId inventDimId = InventDimCombination::findVariantId(_salesline.RetailVariantId).InventDimId;

        LogisticsAddressCountryRegionId countryRegionId = _salesline.deliveryAddress().CountryRegionId;
        LogisticsAddressStateId state = _salesline.deliveryAddress().State;

        if (RetailSalesLineDeliveryModeForMultipleChannelFlight::instance().isEnabled())
        {
            Set channelRecIdSet = new Set(Types::Int64);
            InventLocationId inventLocationId = _salesLine.inventDim().InventLocationId;

            if (inventLocationId)
            {
                RetailChannelTable retailChannelTable;

                while select RecId from retailChannelTable
                    where retailChannelTable.inventLocation == inventLocationId
                        && retailChannelTable.inventLocationDataAreaId == _salesLine.DataAreaId
                {
                    channelRecIdSet.add(retailChannelTable.RecId);
                }
            }
            else
            {
                channelRecIdSet.add(_salesLine.salesTable(false).retailSalesTable().RetailChannel);
            }

            return RetailShippingDeliveryMode::getValidDlvModeQueryForMultipleChannel(
                channelRecIdSet,
                itemId,
                inventDimId,
                countryRegionId,
                state);
        }
        else
        {
            RetailOriginId originId = _salesLine.salesTable(false).retailSalesTable().RetailChannel;

            return RetailShippingDeliveryMode::GetValidDlvModeQuery(
                originId,
                itemId,
                inventDimId,
                countryRegionId,
                state);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidDlvModeQueryBySalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns a query object that contains a list of the valid delivery methods for an order based on the parameters passed.
    /// </summary>
    /// <param name="_salesTable">
    /// Sales order for which to generate the delivery mode query.
    /// </param>
    /// <returns>
    /// The newly created valid delivery mode query.
    /// </returns>
    /// <remarks>
    /// Returns a Query object that can be used to retrieve valid Delivery Methods for the given sales order.
    /// </remarks>
    public static Query getValidDlvModeQueryBySalesTable(SalesTable _salesTable)
    {
        RetailOriginId originId = _salesTable.retailSalesTable().RetailChannel;
        LogisticsAddressCountryRegionId countryRegionId = _salesTable.deliveryAddress().CountryRegionId;
        LogisticsAddressStateId state = _salesTable.deliveryAddress().State;

        return RetailShippingDeliveryMode::GetValidDlvModeQuery(
        originId,
        '',
        '',
        countryRegionId,
        state);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupValidHeaderRetailDeliveryModes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup delivery modes that are valid for a Retail.
    /// </summary>
    /// <param name="_callingControl">
    /// UI control.
    /// </param>
    /// <param name="_salesTable">
    /// Sales Line to perform lookup for.
    /// </param>
    /// <remarks>
    /// Launch filtered list of delivery modes for Retail orders.
    /// </remarks>
    public static void lookupValidHeaderRetailDeliveryModes(
    FormControl _callingControl,
    SalesTable _salesTable)
    {
        SysTableLookup sysTableLookup;
        Query query = RetailShippingDeliveryMode::getValidDlvModeQueryBySalesTable(_salesTable);

        sysTableLookup = SysTableLookup::newParameters(tableNum(DlvMode), _callingControl);
        sysTableLookup.addLookupfield(fieldNum(DlvMode, Code));
        sysTableLookup.addLookupfield(fieldNum(DlvMode, Txt));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupValidRetailDeliveryModes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup delivery modes that are valid for a Retail.
    /// </summary>
    /// <param name="_callingControl">
    /// UI control.
    /// </param>
    /// <param name="_salesLine">
    /// Sales Line to perform lookup for.
    /// </param>
    /// <remarks>
    /// Launch filtered list of delivery modes for Retail orders.
    /// </remarks>
    public static void lookupValidRetailDeliveryModes(
        FormControl _callingControl,
        SalesLine _salesLine)
    {
        SysTableLookup sysTableLookup;
        Query query = RetailShippingDeliveryMode::getValidDlvModeQueryBySalesLine(_salesLine);

        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(DlvMode));
        qbds.addGroupByAndSelectionField(fieldNum(DlvMode, Code));
        qbds.addGroupByAndSelectionField(fieldNum(DlvMode, Txt));
        qbds.orderMode(OrderMode::GroupBy);

        sysTableLookup = SysTableLookup::newParameters(tableNum(DlvMode), _callingControl);
        sysTableLookup.addLookupfield(fieldNum(DlvMode, Code));
        sysTableLookup.addLookupfield(fieldNum(DlvMode, Txt));

        if (RetailSalesLineDeliveryModeFixedLookupBehaviorFlight::instance().isEnabled())
        {
            // If we modify input content we need to use lookup value. If we just click on dropdown we don't need to use it.
            if (!_callingControl.hasChanged())
            {
                sysTableLookup.parmUseLookupValue(false);
            }
        }
        else
        {
            sysTableLookup.parmUseLookupValue(false);
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeliveryOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the current Sales Line delivery mode belongs to the set of valid delivery mode options.
    /// </summary>
    /// <param name="_salesLine">
    /// Sales line instance to validate
    /// </param>
    /// <param name="_showWarning">
    /// Whether or not to show infolog warning when delivery options are not valid.
    /// </param>
    /// <returns>
    /// TRUE if the Sales Line delivery mode is valid, FALSE otherwise.
    /// </returns>
    public static boolean validateDeliveryOptions(SalesLine _salesLine, boolean _showWarning = true)
    {
        boolean isValid;

        //Get set of all valid dlv modes for this line
        Set validModes = RetailShippingDeliveryMode::GetLineDeliveryOptions(_salesLine);

        //Return TRUE if the current Dlv mode intersects the set of all valid modes.
        isValid = validModes.in(_salesLine.DlvMode);

        if (!isValid && _showWarning)
        {
            RetailShippingDeliveryMode::showItemDlvModeIsInvalidWarning(_salesLine.ItemId);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOrderLinesDelivery</Name>
				<Source><![CDATA[
    // <summary>
    /// Validate that all lines of the order have a delivery mode belonging to the valid delivery mode options.
    /// </summary>
    /// <param name="_salesTable">
    /// Sales order instance to validate
    /// </param>
    /// <param name="_showWarning">
    /// Whether or not to show infolog warning when delivery options are not valid.
    /// </param>
    /// <returns>
    /// TRUE if the sales order delivery mode is valid, FALSE otherwise.
    /// </returns>
    internal static boolean validateOrderLinesDelivery(SalesTable _salesTable, boolean _showWarning = true)
    {
        boolean isValid = true;

        // First query for lines with items
        Query queryWithItems = RetailShippingDeliveryMode::createQueryForInvalidOrderLines(_salesTable, true);
        QueryRun queryRunWithItems = new QueryRun(queryWithItems);

        while (queryRunWithItems.next())
        {
            isValid = false;

            if (_showWarning)
            {
                SalesLine badLine = queryRunWithItems.get(tableNum(SalesLine));
                RetailShippingDeliveryMode::showItemDlvModeIsInvalidWarning(badLine.ItemId);
            }
        }

        // And again for lines without items since the query structure of the two queries is different
        Query queryWithoutItems = RetailShippingDeliveryMode::createQueryForInvalidOrderLines(_salesTable, false);
        QueryRun queryRunWithoutItems = new QueryRun(queryWithoutItems);

        while (queryRunWithoutItems.next())
        {
            isValid = false;

            if (_showWarning)
            {
                EcoResCategory category = queryRunWithoutItems.get(tableNum(EcoResCategory));
                SysDictField dlvModeLabel = new SysDictField(tableNum(SalesLine), fieldNum(SalesLine, DlvMode));
                SysDictField salesCategoryLabel = new SysDictField(tableNum(SalesLine), fieldNum(SalesLine, SalesCategory));
                warning(strFmt("@REX4161293", dlvModeLabel.label(), salesCategoryLabel.label(), category.Name));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showItemDlvModeIsInvalidWarning</Name>
				<Source><![CDATA[
    private static void showItemDlvModeIsInvalidWarning(str _itemId)
    {
        SysDictField dlvModeLabel = new SysDictField(tableNum(SalesLine), fieldNum(SalesLine, DlvMode));
        SysDictField itemIdLabel = new SysDictField(tableNum(SalesLine), fieldNum(SalesLine, ItemId));

        //Mode of delivery is not valid for Item number 'xxxx'
        warning(strFmt("@REX4161293", dlvModeLabel.label(), itemIdLabel.label(), _itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryForInvalidOrderLines</Name>
				<Source><![CDATA[
    private static Query createQueryForInvalidOrderLines(SalesTable _salesTable, boolean _linesWithItems)
    {
        // Find the retail channel for use in the query
        RetailChannelTable retailChannel = RetailChannelTable::findByRecId(_salesTable.retailSalesTable().RetailChannel);

        // Find invalid lines
        Query query = new Query();
        QueryBuildDataSource salesLineDS = query.addDataSource(tableNum(SalesLine));
        salesLineDS.relations(false);
        salesLineDS.addRange(fieldNum(SalesLine, SalesId)).value(_salesTable.SalesId);
        salesLineDS.addRange(fieldNum(SalesLine, ItemId)).value(_linesWithItems ? SysQuery::valueNot('') : SysQuery::value(''));

        if (_linesWithItems)
        {
            salesLineDS.addSelectionField(fieldNum(SalesLine, ItemId));
        }
        else
        {
            salesLineDS.addSelectionField(fieldNum(SalesLine, RecId));

            QueryBuildDataSource categoryDS = salesLineDS.addDataSource(tableNum(EcoResCategory));
            categoryDS.joinMode(JoinMode::OuterJoin);
            categoryDS.fetchMode(QueryFetchMode::One2One);
            categoryDS.addLink(fieldNum(SalesLine, SalesCategory), fieldNum(EcoResCategory, RecId));
            categoryDS.addSelectionField(fieldNum(EcoResCategory, Name));
        }

        // Inner join delivery address
        QueryBuildDataSource deliveryAddressDS = salesLineDS.addDataSource(tableNum(LogisticsPostalAddress));
        deliveryAddressDS.joinMode(JoinMode::InnerJoin);
        deliveryAddressDS.fetchMode(QueryFetchMode::One2One);
        deliveryAddressDS.addLink(fieldNum(SalesLine, DeliveryPostalAddress), fieldNum(LogisticsPostalAddress, RecId));
        deliveryAddressDS.addSelectionField(fieldNum(LogisticsPostalAddress, RecId));

        // Left join variants
        QueryBuildDataSource retailVariantDS = salesLineDS.addDataSource(tableNum(InventDimCombination));
        retailVariantDS.joinMode(JoinMode::OuterJoin);
        retailVariantDS.fetchMode(QueryFetchMode::One2One);
        retailVariantDS.addLink(fieldNum(SalesLine, RetailVariantId), fieldNum(InventDimCombination, RetailVariantId));
        retailVariantDS.addSelectionField(fieldNum(InventDimCombination, RecId));

        // Not exists matching delivery mode (SalesLine.DlvMode = DlvMode.Code)
        QueryBuildDataSource dlvModeDS = salesLineDS.addDataSource(tableNum(DlvMode));
        dlvModeDS.joinMode(JoinMode::NoExistsJoin);
        dlvModeDS.fetchMode(QueryFetchMode::One2One);
        dlvModeDS.addLink(fieldNum(DlvMode, Code), fieldNum(SalesLine, DlvMode));
        
        // DlvMode exists join RetailDlvModeChannelExploded (DlvMode.RecId = RetailDlvModeChannelExploded.DlvMode && RetailDlvModeChannelExploded.OMOperatingUnit = RetailChannel.OMOperatingUnit)
        QueryBuildDataSource retailDlvModeChannelDS = dlvModeDS.addDataSource(tableNum(RetailDlvModeChannelExploded));
        retailDlvModeChannelDS.joinMode(JoinMode::ExistsJoin);
        retailDlvModeChannelDS.fetchMode(QueryFetchMode::One2One);
        retailDlvModeChannelDS.addLink(fieldNum(DlvMode, RecId), fieldNum(RetailDlvModeChannelExploded, DlvMode));
        retailDlvModeChannelDS.addRange(fieldNum(RetailDlvModeChannelExploded, OMOperatingUnit)).value(queryValue(retailChannel.OMOperatingUnitID));
        
        if (_linesWithItems)
        {
            // DlvMode inner join RetailDlvModeProductExploded
            // (DlvMode.RecId = RetailDlvModeProductExploded.DlvMode && SalesLine.ItemId = RetailDlvModeProductExploded.ItemId &&
            // (Variant.InventDimId = RetailDlvModeProductExploded.InventDim OR RetailDlvModeProductExploded.InventDim = ''))
            QueryBuildDataSource retailDlvModeProductDS = dlvModeDS.addDataSource(tableNum(RetailDlvModeProductExploded));
            if (RetailFixDeliveryModeValidationFlight::instance().isEnabled())
            {
                retailDlvModeProductDS.joinMode(JoinMode::InnerJoin);
            }
            else
            {
                retailDlvModeProductDS.joinMode(JoinMode::ExistsJoin);
            }
            retailDlvModeProductDS.fetchMode(QueryFetchMode::One2One);
            retailDlvModeProductDS.addLink(fieldNum(DlvMode, RecId), fieldNum(RetailDlvModeProductExploded, DlvMode));

            retailDlvModeProductDS.addRange(fieldNum(RetailDlvModeProductExploded, ItemId)).value(
                strFmt('(%1.%2 == %3.%4)',
                    retailDlvModeProductDS.name(),
                    fieldStr(RetailDlvModeProductExploded, ItemId),
                    salesLineDS.name(),
                    fieldStr(SalesLine, ItemId)
                    ));

            retailDlvModeProductDS.addRange(fieldNum(RetailDlvModeProductExploded, InventDim)).value(
                strFmt('((%1.%2 == "") || (%1.%2 == %3.%4))',
                    retailDlvModeProductDS.name(), 
                    fieldStr(RetailDlvModeProductExploded, InventDim),
                    retailVariantDS.name(),
                    fieldStr(InventDimCombination, InventDimId)
                    ));
        }

        // DlvMode exists join RetailDlvModeAddressExploded (CountryRegion && State)
        QueryBuildDataSource retailDlvModeAddressDS = dlvModeDS.addDataSource(tableNum(RetailDlvModeAddressExploded));
        retailDlvModeAddressDS.joinMode(JoinMode::ExistsJoin);
        retailDlvModeAddressDS.fetchMode(QueryFetchMode::One2One);
        retailDlvModeAddressDS.addLink(fieldNum(DlvMode, RecId), fieldNum(RetailDlvModeAddressExploded, DlvMode));
        retailDlvModeAddressDS.addRange(fieldNum(RetailDlvModeAddressExploded, CountryRegion)).value(
            strFmt('(%1.%2 == %3.%4)', 
                retailDlvModeAddressDS.name(),
                fieldStr(RetailDlvModeAddressExploded, CountryRegion),
                deliveryAddressDS.name(), 
                fieldStr(LogisticsPostalAddress, CountryRegionId)
            ));
        retailDlvModeAddressDS.addRange(fieldNum(RetailDlvModeAddressExploded, State)).value(
            strFmt('(%1.%2 == %3.%4)', 
                deliveryAddressDS.name(), 
                fieldStr(LogisticsPostalAddress, State), 
                retailDlvModeAddressDS.name(), 
                fieldStr(RetailDlvModeAddressExploded, State)
            ));
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHeaderDeliveryOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the current Sales Order delivery mode belongs to the set of valid delivery mode options.
    /// </summary>
    /// <param name="_salesTable">
    /// Sales Order instance to validate
    /// </param>
    /// <param name="_showWarning">
    /// Whether or not to show infolog warning when delivery options are not valid.
    /// </param>
    /// <returns>
    /// TRUE if the Sales Table delivery mode is valid, FALSE otherwise.
    /// </returns>
    public static boolean validateHeaderDeliveryOptions(SalesTable _salesTable, boolean _showWarning = true)
    {
        boolean isValid;
        SysDictField dlvModeLabel;

        //Get set of all valid dlv modes for this line
        Set validModes = RetailShippingDeliveryMode::getHeaderDeliveryOptions(_salesTable);

        //Return TRUE if the current Dlv mode intersects the set of all valid modes.
        isValid = validModes.in(_salesTable.DlvMode);

        if(!isValid && _showWarning)
        {
            dlvModeLabel = new SysDictField(tableNum(SalesTable),fieldNum(SalesTable,DlvMode));

            //Mode of delivery is not valid
            warning(strFmt("@SYS94968", _salesTable.DlvMode, dlvModeLabel.label()));
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderValidDlvModeQueryByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns a query object that contains a list of the valid delivery methods for an order based on the parameters passed.
    /// </summary>
    /// <param name="_salesTable">
    /// Sales order for which to generate the delivery mode query.
    /// </param>
    /// <param name="_ItemId">
    /// ItemId to validate delivery option
    /// </param>
    /// <param name="_inventDimId">
    /// InventDimId to validate delivery option
    /// </param>
    /// <returns>
    /// The newly created valid delivery mode query.
    /// </returns>
    /// <remarks>
    /// Returns a Query object that can be used to retrieve valid Delivery Methods for the given sales order.
    /// </remarks>
    public static Query getSalesOrderValidDlvModeQueryByProduct(SalesTable _salesTable, ItemId _ItemId, InventDimId _inventDimId)
    {
        RetailOriginId originId = _salesTable.retailSalesTable().RetailChannel;
        LogisticsAddressCountryRegionId countryRegionId = _salesTable.deliveryAddress().CountryRegionId;
        LogisticsAddressStateId state = _salesTable.deliveryAddress().State;

        return RetailShippingDeliveryMode::GetValidDlvModeQuery(originId,
                                                                _ItemId,
                                                                _inventDimId,
                                                                countryRegionId,
                                                                state);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderDeliveryOptionsByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a set of the valid Delivery Mode options for given sales order by item number.
    /// </summary>
    /// <param name="_salesTable">
    /// The sale order to get delivery options.
    /// </param>
    /// <param name="_ItemId">
    /// ItemId to validate delivery option
    /// </param>
    /// <param name="_inventDimId">
    /// InventDimId to validate delivery option
    /// </param>
    /// <returns>
    /// A Set(Type::String) containing the valid Delivery Mode Codes
    /// </returns>
    /// <remarks>
    /// Gets a set of the valid Delivery Mode options for given sales order by item number. If there are no valid Delivery Mode options, an empty Set is returned.
    /// </remarks>
    public static Set getSalesOrderDeliveryOptionsByProduct(SalesTable _salesTable, ItemId _ItemId, InventDimId _inventDimId)
    {
        Set deliveryModes = new Set(Types::String);
        DlvMode dlvMode;
        QueryRun r = new QueryRun(RetailShippingDeliveryMode::getSalesOrderValidDlvModeQueryByProduct(_salesTable, _ItemId, _inventDimId));

        while (r.next())
        {
            dlvMode = r.get(tableNum(DlvMode));
            deliveryModes.add(DlvMode.Code);
        }
        return deliveryModes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeliveryOptionForProductToAdd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the current Sales Order delivery mode belongs to the set of valid delivery mode options for the given item.
    /// </summary>
    /// <param name="_salesTable">
    /// Sales Order instance to validate
    /// </param>
    /// <param name="_ItemId">
    /// ItemId to validate delivery option
    /// </param>
    /// <param name="_inventDimId">
    /// InventDimId to validate delivery option
    /// </param>
    /// <param name="_showError">
    /// Whether or not to show infolog error when delivery options are not valid.
    /// </param>
    /// <returns>
    /// TRUE if the Sales Table delivery mode is valid, FALSE otherwise.
    /// </returns>
    public static boolean validateDeliveryOptionForProductToAdd(SalesTable _salesTable, ItemId _ItemId, InventDimId _inventDimId, boolean _showError = true)
    {
        boolean isValid;
        SysDictField dlvModeLabel, itemIdLabel;
        InventDimCombination inventDimCombination = InventDimCombination::findByInventDim(_ItemId, InventDim::find(_inventDimId));

        //Get set of all valid dlv modes for this line
        Set validModes = RetailShippingDeliveryMode::getSalesOrderDeliveryOptionsByProduct(_salesTable, _ItemId, inventDimCombination.InventDimId);

        //Return TRUE if the current Dlv mode intersects the set of all valid modes.
        isValid = validModes.in(_salesTable.DlvMode);

        if(!isValid && _showError)
        {
            dlvModeLabel = new SysDictField(tableNum(SalesTable),fieldNum(SalesTable,DlvMode));
            itemIdLabel = new SysDictField(tableNum(SalesLine),fieldNum(SalesLine,ItemId));

            //Mode of delivery is not valid
            if (inventDimCombination.RetailVariantId)
            {
                error(strFmt("@REX:InvalidDlvMode", _ItemId, inventDimCombination.RetailVariantId));
            }
            else
            {
                error(strFmt("@REX4161293", dlvModeLabel.label(), itemIdLabel.label(), _ItemId));
            }
        }
        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>