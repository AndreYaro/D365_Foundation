<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPaymentRequestCreate_PurchTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
[CFMPaymentRequestSourceAttribute(tableStr(PurchTable))]
public class CFMPaymentRequestCreate_PurchTable extends CFMPaymentRequestCreate
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateFromPlannedPayments</Name>
				<Source><![CDATA[
    protected boolean canCreateFromPlannedPayments(Common _sourceRecord)
    {
        PurchTable purchTable = _sourceRecord;
        VendParameters vendParameters = VendParameters::find();

        boolean existPrepaymentInvoice()
        {
            VendInvoiceJour vendInvoiceJour;
            VendInvoicetrans vendInvoiceTrans;
            VendInvoicePurchLink vendInvoicePurchLink;

            select firstOnly RecId from vendInvoiceJour
				where vendInvoiceJour.InvoiceType == PurchInvoiceType::VendorAdvance
                exists join vendInvoicePurchLink
                    where vendInvoiceJour.PurchId == vendInvoicePurchLink.PurchId &&
                          vendInvoiceJour.InvoiceId == vendInvoicePurchLink.InvoiceId &&
                          vendInvoiceJour.InternalInvoiceId == vendInvoicePurchLink.InternalInvoiceId &&
                          vendInvoiceJour.InvoiceDate == vendInvoicePurchLink.InvoiceDate &&
                          vendInvoicePurchLink.origPurchId == purchTable.purchId;

            return vendInvoiceJour.RecId;
        }

        return !vendParameters.UseVendAdvanceInvoice_RU && purchTable.PurchaseType == PurchaseType::Purch && !existPrepaymentInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionSourceQuery</Name>
				<Source><![CDATA[
    protected Query getDistributionSourceQuery(Common _sourceRecord)
    {
        PurchTable sourcePurchTable = _sourceRecord;

        Query invoiceQuery = new Query();

        QueryBuildDataSource invoiceDataSource = invoiceQuery.addDataSource(tableNum(VendInvoiceJour));

        QueryBuildDataSource invoicePurchLinkDataSource = invoiceDataSource.addDataSource(tableNum(VendInvoicePurchLink));

        invoicePurchLinkDataSource.addLink(fieldNum(VendInvoiceJour, PurchId), fieldNum(VendInvoicePurchLink, PurchId));
        invoicePurchLinkDataSource.addLink(fieldNum(VendInvoiceJour, InvoiceId), fieldNum(VendInvoicePurchLink, InvoiceId));
        invoicePurchLinkDataSource.addLink(fieldNum(VendInvoiceJour, InternalInvoiceId), fieldNum(VendInvoicePurchLink, InternalInvoiceId));
        invoicePurchLinkDataSource.addLink(fieldNum(VendInvoiceJour, InvoiceDate), fieldNum(VendInvoicePurchLink, InvoiceDate));
        invoicePurchLinkDataSource.joinMode(JoinMode::ExistsJoin);

        QueryBuildRange invoiceRange = invoicePurchLinkDataSource.addRange(fieldNum(VendInvoicePurchLink, OrigPurchId));
        invoiceRange.value(queryValue(sourcePurchTable.PurchId));

        return invoiceQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionSourceTableId</Name>
				<Source><![CDATA[
    protected TableId getDistributionSourceTableId()
    {
        return tableNum(VendInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentRequestSourceQuery</Name>
				<Source><![CDATA[
    protected Query getPaymentRequestSourceQuery(Common _sourceRecord)
    {
        Query                   query;
        QueryBuildDataSource    qbdsTransOpen;
        QueryBuildDataSource    qbdsVendTrans;
        QueryBuildDataSource    qbdsPaymentRequest;
        QueryBuildRange         qbr;

        VendInvoiceJour sourceInvoiceJour = _sourceRecord;

        query = new Query();

        qbdsVendTrans = query.addDataSource(tableNum(VendTrans));

        qbr = qbdsVendTrans.addRange(fieldNum(VendTrans, Invoice));
        qbr.value(queryValue(sourceInvoiceJour.InvoiceId));

        qbr = qbdsVendTrans.addRange(fieldNum(VendTrans, Voucher));
        qbr.value(queryValue(sourceInvoiceJour.LedgerVoucher));

        qbr = qbdsVendTrans.addRange(fieldNum(VendTrans, TransDate));
        qbr.value(queryValue(sourceInvoiceJour.InvoiceDate));

        qbr = qbdsVendTrans.addRange(fieldNum(VendTrans, AccountNum));
        qbr.value(queryValue(sourceInvoiceJour.InvoiceAccount));

        qbdsTransOpen = qbdsVendTrans.addDataSource(tableNum(VendTransOpen));

        qbr = qbdsTransOpen.addRange(fieldNum(VendTransOpen, AmountCur));
        qbr.value(#negative);

        qbdsTransOpen.addLink(fieldNum(VendTrans, RecId), fieldNum(VendTransOpen, RefRecId));
        qbdsTransOpen.addLink(fieldNum(VendTrans, AccountNum), fieldNum(VendTransOpen, AccountNum));
        qbdsTransOpen.joinMode(JoinMode::InnerJoin);

        qbdsPaymentRequest = qbdsTransOpen.addDataSource(tableNum(CFMPaymentRequestTable));

        qbr = qbdsPaymentRequest.addRange(fieldNum(CFMPaymentRequestTable, SourceType));
        qbr.value(queryValue(CFMPaymentRequestSourceType::VendInvoice));

        qbdsPaymentRequest.addLink(fieldNum(VendTransOpen, RecId), fieldNum(CFMPaymentRequestTable, SourceRefRecId));
        qbdsPaymentRequest.joinMode(JoinMode::NoExistsJoin);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentRequestSourceTableId</Name>
				<Source><![CDATA[
    protected TableId getPaymentRequestSourceTableId()
    {
        return tableNum(VendTransOpen);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlannedPaymentSourceQuery</Name>
				<Source><![CDATA[
    protected Query getPlannedPaymentSourceQuery(Common _sourceRecord)
    {
        Query                   plannedPaymentQuery;
        QueryBuildDataSource    plannedPaymentDataSource;
        QueryBuildDataSource    purchTableDataSource;
        QueryBuildRange         plannedPaymentRange;

        PurchTable  purchTable = _sourceRecord;

        plannedPaymentQuery = new Query();

        plannedPaymentDataSource = plannedPaymentQuery.addDataSource(tableNum(CFMPlannedPaymentTable));

        plannedPaymentRange = plannedPaymentDataSource.addRange(fieldNum(CFMPlannedPaymentTable, Prepayment));
        plannedPaymentRange.value(queryValue(NoYes::Yes));

        plannedPaymentRange = plannedPaymentDataSource.addRange(fieldNum(CFMPlannedPaymentTable, SourceType));
        plannedPaymentRange.value(queryValue(CFMPlannedPaymentSourceType::PurchTable));

        plannedPaymentRange = plannedPaymentDataSource.addRange(fieldNum(CFMPlannedPaymentTable, SourceDataAreaId));
        plannedPaymentRange.value(queryValue(purchTable.dataAreaId));

        plannedPaymentRange = plannedPaymentDataSource.addRange(fieldNum(CFMPlannedPaymentTable, SourceRecId));
        plannedPaymentRange.value(queryValue(purchTable.RecId));

        purchTableDataSource = plannedPaymentDataSource.addDataSource(tableNum(PurchTable));
        purchTableDataSource.relations(true);

        return plannedPaymentQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>