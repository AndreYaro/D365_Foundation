<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymAdvicePaymentQueryGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankPaymAdvicePaymentQueryGenerator</c> class translates a set of parameters from the
/// <c>BankPaymAdviceContract</c> into the payment line query for payment advice reporting.
/// </summary>
public final class BankPaymAdvicePaymentQueryGenerator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPaymentLineQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for bank payment advice lines from the given contract.
    /// </summary>
    /// <param name = "_bankPaymAdviceContract">The bank payment advice contract.</param>
    /// <returns>The query for payment lines with parameters applied.</returns>
    public QueryRun getPaymentLineQueryRun(BankPaymAdviceContract _bankPaymAdviceContract)
    {
        Query query = new Query(QueryStr(BankPaymAdvicePaymentLineQuery));
        this.applyRangesToQuery(query, _bankPaymAdviceContract);

        QueryRun queryRun = new QueryRun(query);
        queryRun.setRecord(this.generatePaymentLineAccountNames(_bankPaymAdviceContract.parmLedgerJournalId()));

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRangesToQuery</Name>
				<Source><![CDATA[
    private void applyRangesToQuery(Query _query, BankPaymAdviceContract _bankPaymAdviceContract)
    {
        QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(LedgerJournalTrans));

        SysQuery::findOrCreateRange(qbds, fieldNum(LedgerJournalTrans, JournalNum)).value(queryValue(_bankPaymAdviceContract.parmLedgerJournalId()));

        if (_bankPaymAdviceContract.parmAccountNum() != '')
        {
            SysQuery::addDimensionAttributeRange(_query, qbds.name(), fieldStr(LedgerJournalTrans, LedgerDimension), DimensionComponent::LedgerDimensionDisplayValue, _bankPaymAdviceContract.parmAccountNum());
        }

        if (_bankPaymAdviceContract.parmPaymMode() != '')
        {
            SysQuery::findOrCreateRange(qbds, fieldNum(LedgerJournalTrans, PaymMode)).value(queryValue(_bankPaymAdviceContract.parmPaymMode()));
        }

        if (_bankPaymAdviceContract.parmCompanyBankAccountId())
        {
            SysQuery::addDimensionAttributeRange(_query, qbds.name(), fieldStr(LedgerJournalTrans, OffsetLedgerDimension), DimensionComponent::LedgerDimensionDisplayValue, _bankPaymAdviceContract.parmCompanyBankAccountId());
        }

        SysQuery::findOrCreateRange(qbds, fieldNum(LedgerJournalTrans, PaymentStatus)).value(queryValue(_bankPaymAdviceContract.parmPaymentStatus()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLineAccountNames</Name>
				<Source><![CDATA[
    private DimensionCombinationValueNameTmp generatePaymentLineAccountNames(LedgerJournalId _ledgerJournalId)
    {
        return CustVendPaymDialogUtility::generatePaymentLineAccountNames(_ledgerJournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankPaymAdvicePaymentQueryGenerator construct()
    {
        return new BankPaymAdvicePaymentQueryGenerator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>