<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementGenerateReleaseOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AgreementGenerateReleaseOrder</c> class helps create the release orders from sales or
///    purchase agreements.
/// </summary>
/// <remarks>
///    This class extends the <c>RunBase</c> class.
/// </remarks>
abstract class AgreementGenerateReleaseOrder extends RunBase
{
    Map editableInventDimFieldsPerLine;
    Map releaseLineToBaselineStorageDimensionsDefaulting;
	
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateEditableInventDimFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates editable dimension fields by using a provided set of active dimensions and the currently
    /// set dimension fields for agreement lines.
    /// </summary>
    /// <param name="_inventDimParmActive">
    /// The active dimension fields.
    /// </param>
    /// <param name="_inventDimSet">
    /// The currently set dimensions.
    /// </param>
    /// <returns>
    /// The fields that are editable during release from agreement dimensions.
    /// </returns>
    /// <remarks>
    /// This method only analyses the <c>Configuration</c> , <c>Size</c> , <c>Color</c> , <c>Style</c> ,
    /// <c>Site</c> , and <c>Warehouse</c> fields.
    /// </remarks>
    protected InventDimParm calculateEditableInventDimFields(InventDimParm _inventDimParmActive, InventDim _inventDimSet)
    {
        List                    productDimFields = InventDim::dimProductDimFieldList();
        ListEnumerator          enumerator = (productDimFields) ? productDimFields.getEnumerator() : null;
        FieldId                 dimFieldId;
        FieldId                 dimParmFieldId;
        InventDimParm resultInventDimParm;

        // Copy data from the input...
        resultInventDimParm.initFromInventDimParm(_inventDimParmActive);
        if (enumerator)
        {
            while (enumerator.moveNext())
            {
                dimFieldId = enumerator.current();
                dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
                if (resultInventDimParm.(dimParmFieldId) == NoYes::Yes && _inventDimSet.(dimFieldId))
                {
                    resultInventDimParm.(dimParmFieldId) = NoYes::No;
                }
            }
        }

        if (resultInventDimParm.InventSiteIdFlag && _inventDimSet.InventSiteId)
        {
            resultInventDimParm.InventSiteIdFlag = NoYes::No;
        }

        if (resultInventDimParm.InventLocationIdFlag && _inventDimSet.InventLocationId)
        {
            resultInventDimParm.InventLocationIdFlag = NoYes::No;
        }

        return resultInventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSwapBetweenCS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Controls whether an instance of the <c>calledFrom</c> class on the server has the prompt executed
    ///    on client.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean canSwapBetweenCS()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEditableAgreementLineDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the information about the fields that can be edited during a release process of a
    ///    <c>AgreementLineQuantityCommitment</c> record.
    /// </summary>
    /// <param name="_agreementLineQuantityCommitment">
    ///    A <c>AgreementLineQuantityCommitment</c> record.
    /// </param>
    /// <remarks>
    ///    This method registers all wild card <c>InvetDim</c> fields as editable.
    /// </remarks>
    public void registerEditableAgreementLineDimensions(AgreementLineQuantityCommitment _agreementLineQuantityCommitment)
    {
        InventDimParm       curInventDimParm;
        InventDim           curAgreementInventDim;

        // Internal cached repository hasn't been created yet...
        // so, we creatre it here...
        if (!editableInventDimFieldsPerLine)
        {
            editableInventDimFieldsPerLine = new Map(typeName2Type(extendedtypestr(recId)), Types::Record);
        }
        else
        {
            // Check if current agreement line has allready been registered in the cache.
            // In this case do nothing...
            if (editableInventDimFieldsPerLine.exists(_agreementLineQuantityCommitment.RecId))
            {
                return;
            }
        }

        // Register editable InventDimFields for supplied agreement line now...
        // All active InventDim fields....
        InventDimGroupSetup::newItemId(_agreementLineQuantityCommitment.ItemId).inventDimParmActive(curInventDimParm);

        // All invent dim fields for current Agreement Line....
        curAgreementInventDim = _agreementLineQuantityCommitment.inventDim(false);

        // Calculate editable fields...
        curInventDimParm = this.calculateEditableInventDimFields(curInventDimParm, curAgreementInventDim);

        // Register harvested information...
        editableInventDimFieldsPerLine.insert(_agreementLineQuantityCommitment.RecId, curInventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the provided quantity can be released from the specified
    ///    <c>AgreementLineQuantityCommitment</c> record.
    /// </summary>
    /// <param name="_quantityToValidate">
    ///    The release line quantity to validate.
    /// </param>
    /// <param name="_agreementLineQuantityCommitment">
    ///    The record ID of the <c>AgreementLineQuantityCommitment</c> record from which to release.
    /// </param>
    /// <returns>
    ///    true if the requested quantity can be released; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Quantities that are less or equal to 0 are considered as valid for release.
    /// </remarks>
    public static boolean validateQty(UnitQty _quantityToValidate,
                                      AgreementLineQuantityCommitment _agreementLineQuantityCommitment)
    {
        boolean ret = false;

        // Only if we have agreement line to validate quantity against....
        if (_agreementLineQuantityCommitment)
        {
            if (!_agreementLineQuantityCommitment.IsMaxEnforced ||  _quantityToValidate <= 0)
            {
                // No quantity validation is required...
                ret = true;
            }
            else
            {
                // Quantity should be validated agains remaining quantity...
                if (_quantityToValidate <= _agreementLineQuantityCommitment.quantityRemainingRelease())
                {
                    ret = true;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventoryDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes inventory dimensions for the release line.
    /// </summary>
    /// <param name = "_agreementLineQuantityCommitment">Related <c>AgreementLineQuantityCommitment</c> record.</param>
    /// <returns>Updated <c>InventDim</c> record.</returns>
    public InventDim initInventoryDimensions(AgreementLineQuantityCommitment _agreementLineQuantityCommitment)
    {
        // All active InventDim fields for released ItemId
        InventDimParm activeInventDimParm;
        InventDimGroupSetup::newItemId(_agreementLineQuantityCommitment.ItemId).inventDimParmActive(activeInventDimParm);

        // Initialize dimension from the line
        InventDim releaseLineInventDimInventoryDefaulted;
        releaseLineInventDimInventoryDefaulted.initFromInventDim(_agreementLineQuantityCommitment.inventDim(false));

        // When storage dimensions (Site, Warehouse) are active but not specified for release line we should try to default them:
        if (!releaseLineInventDimInventoryDefaulted.InventSiteId && activeInventDimParm.InventSiteIdFlag)
        {
            // Site is not specified on the agreement line so look at the header
            this.setStorageDimensionsFromHeader(releaseLineInventDimInventoryDefaulted);
        }
        // Save the baseline storage dimensions
        releaseLineToBaselineStorageDimensionsDefaulting.insert(_agreementLineQuantityCommitment.RecId, [releaseLineInventDimInventoryDefaulted.InventSiteId, releaseLineInventDimInventoryDefaulted.InventLocationId]);

        releaseLineInventDimInventoryDefaulted = this.initDimensionsSpecificDefaulting(_agreementLineQuantityCommitment.ItemId, releaseLineInventDimInventoryDefaulted, true);

        return releaseLineInventDimInventoryDefaulted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default order settings, if product is fully specified.
    /// </summary>
    /// <param name = "_itemId">An item ID.</param>
    /// <param name = "_inventDimId">An inventory dimension record.</param>
    /// <param name = "_executeOnlyIfProductIsFullySpecified">A boolean value indicating if logic should be executed only if the product is fully specified.</param>
    /// <returns>A potentially updated <c>InventDim</c> record buffer.</returns>
    public InventDim initDimensionsSpecificDefaulting(ItemId _itemId, InventDim _inventDim, boolean _executeOnlyIfProductIsFullySpecified)
    {
        InventTable inventTable = InventTable::find(_itemId);

        InventDim inventDim = inventTable.getDefaultProductDimensions(_inventDim);

        if (_executeOnlyIfProductIsFullySpecified && !InventDistinctProductValidator::construct().isDistinctProductFullySpecified(_itemId, inventDim))
        {
            return inventDim;
        }

        inventDim.initFromInventTable(inventTable, this.getInventItemOrderSetupType(), inventDim);

        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetStorageDimensionsToBaseline</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes storage dimensions as they were originally specified on the header.
    /// </summary>
    /// <param name = "_agreementLineQuantityCommitmentRecId">An agreement release order line's reference to the original agreement line.</param>
    /// <param name = "_inventDim">An <c>InventDim</c> record buffer.</param>
    /// <returns>A potentially updated <c>InventDim</c> record buffer.</returns>
    public InventDim resetStorageDimensionsToBaseline(RecId _agreementLineQuantityCommitmentRecId, InventDim _inventDim)
    {
        if (releaseLineToBaselineStorageDimensionsDefaulting.exists(_agreementLineQuantityCommitmentRecId))
        {
            container defaultStorageDimensionsFromBaseline = releaseLineToBaselineStorageDimensionsDefaulting.lookup(_agreementLineQuantityCommitmentRecId);

            _inventDim.InventSiteId     = conPeek(defaultStorageDimensionsFromBaseline, 1);
            _inventDim.InventLocationId = conPeek(defaultStorageDimensionsFromBaseline, 2);
        }
        else // clear site and warehouse
        {
            _inventDim.InventSiteId     = '';
            _inventDim.InventLocationId = '';
        }

        return _inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventItemOrderSetupType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the type of item order setup.
    /// </summary>
    /// <returns>Type of item order setup.</returns>
    public abstract InventItemOrderSetupType getInventItemOrderSetupType()
    {
        // The method should be overidden by subclasses.
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStorageDimensionsFromHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets storage dimensions i.e. site and warehouse based on the vendor.
    /// </summary>
    /// <param name = "_releaseLineInventDimInventory"><c>InventDim</c> record to update.</param>
    /// <returns>Updated <c>InventDim</c> record.</returns>
    public abstract InventDim setStorageDimensionsFromHeader(InventDim _releaseLineInventDimInventory)
    {
        // The method should be overidden by subclasses.
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>