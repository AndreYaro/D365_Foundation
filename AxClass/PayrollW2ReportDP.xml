<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollW2ReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PayrollW2ReportDP</c> class is the Report Data Provider class for the <c>PayrollW2Report</c> SSRS
///    report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(PayrollW2Report)),
    SRSReportParameterAttribute(classStr(PayrollW2ReportContract))
]
public class PayrollW2ReportDP extends SRSReportDataProviderPreProcessTempDB
{
    #PayrollConstants

    #define.StateIDContainerPosition(1)
    #define.StateEmployerIDContainerPosition(2)
    #define.StateTaxesContainerPosition(3)
    #define.StateWagesContainerPosition(4)

    #define.LocalWageContainerPosition(1)
    #define.LocalTaxContainerPosition(2)
    #define.LocalityNameContainerPosition(3)
    #define.LocalTypeContainerPosition(4)

    PayrollW2ReportTmp              payrollW2ReportTmp;
    PayrollPayStatementTotals       payStatementTotals;
    PayrollTaxTransactionHistoryUnion   prlUSTaxTransactionHistory;
    CompanyInfo                     companyInfo;
    LogisticsPostalAddress          postalAddressCompany;
    LogisticsPostalAddress          postalAddressWorker;
    Yr                              taxYear;
    HcmWorker                       hcmWorker;
    TransDate                       todate;
    TransDate                       fromDate;
    int                             stateLinesCounter;
    container                       stateIdContainer;
    container                       stateEmployerIdContainer;
    container                       stateTaxContainer;
    container                       stateWagesContainer;
    LegalEntityRecId                legalEntity;
    utcdatetime                     pointInTime;
    boolean                         isReadyForInsert;
    boolean                         wasInsertCalled;
    int                             countOf12Boxes;
    int                             last12BoxCalculated;
    int                             countOf14Boxes;
    int                             last14BoxCalculated;
    Map                             box12W2LabelMap;
    Map                             box14W2LabelMap;
    RecordInsertList                w2ReportList;
    int64                           lineNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>box13Indicator</Name>
				<Source><![CDATA[
    /// <summary>
    ///     verifyies if the worker and TaxCodeParameter name is valid for the given date.
    /// </summary>
    /// <param name="_workerRecId">
    ///     Worker RecId
    /// </param>
    /// <param name="_parameterName">
    ///     TaxCodeParameter name
    /// </param>
    /// <param name="_asOfDate">
    ///     The date for ValidTimeState.
    /// </param>
    /// <returns>
    ///     A boolean value representing the validity of the worker aginst the TaxCodeParameter name for the given date.
    /// </returns>
    public boolean box13Indicator(HcmWorkerRecId _workerRecId, Str60 _parameterName, TransDate _asOfDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
    {
        PayrollWorkerTaxCode                    workerTaxCode;
        PayrollTaxCodeParameter                 taxCodeParameter;
        PayrollWorkerTaxCodeParameterValue      workerTaxCodeParameterValue;
        PayrollTaxEngineTaxCode                 taxEngineTaxCode;
        PayrollTaxCode                          taxCode;
        #PayrollConstants

        select firstonly validTimeState(_asOfDate) RecId from taxCode
            where taxCode.Type  == PayrollTaxCodeType::FIT
        join RecId from taxEngineTaxCode
            where taxEngineTaxCode.PayrollTaxCode == taxCode.RecId
        join RecId from taxCodeParameter
            where taxCodeParameter.Name == _parameterName
                && taxCodeParameter.TaxEngineTaxCode == taxEngineTaxCode.RecId
        join RecId from workerTaxCode
            where workerTaxCode.Worker == _workerRecId
                && workerTaxCode.PayrollTaxCode == taxCode.RecId
        join Value from workerTaxCodeParameterValue
            where workerTaxCodeParameterValue.WorkerTaxCode == workerTaxCode.RecId
                && workerTaxCodeParameterValue.TaxCodeParameter == taxCodeParameter.RecId
                && workerTaxCodeParameterValue.LegalEntity == CompanyInfo::current();

        return (workerTaxCodeParameterValue.Value == #TRUE);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBox12AndBox14Values</Name>
				<Source><![CDATA[
    private void calcBox12AndBox14Values()
    {
        PayrollPayStatementTotals payrollPayStatementTotals;

        payrollPayStatementTotals = new PayrollPayStatementTotals();
        box12W2LabelMap = payrollPayStatementTotals.calcExtReportingTotalsByW2BoxNum(hcmWorker.RecId,
                                                                            fromDate,
                                                                            todate,
                                                                            PayrollW2BoxNumber::OneTwo);

        box14W2LabelMap = payrollPayStatementTotals.calcExtReportingTotalsByW2BoxNum(hcmWorker.RecId,
                                                                            fromDate,
                                                                            todate,
                                                                            PayrollW2BoxNumber::OneFour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxFederal</Name>
				<Source><![CDATA[
    private void calcTaxFederal()
    {
        PayrollPayStatement payStatement;
        PayrollPayStatementTaxLine payStatementTaxLine;
        PayrollW2ReportTotalTmp payrollW2ReportTotalTmp;
        PayrollTaxCode taxCode;

        PayrollW2ReportTmp payrollW2ReportLocalTmp;
        this.takeOwnershipOfTempTable(payrollW2ReportLocalTmp);
        payrollW2ReportLocalTmp.linkPhysicalTableInstance(payrollW2ReportTmp);

        this.takeOwnershipOfTempTable(payrollW2ReportTotalTmp);

        // Leverage a new instance of the PayrollW2ReportTmp to calculate each worker's Federal tax for the year
        insert_recordSet payrollW2ReportTotalTmp (Worker, TotalAmount)
            select Worker
            from payStatement
            group by payStatement.Worker
                where payStatement.PaymentDate >= fromDate
                && payStatement.PaymentDate <= todate
                && payStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                && payStatement.IsReversed == false
                join sum(AccountingCurrencyAmount) from payStatementTaxLine
                    where payStatementTaxLine.IsMarkedForRemoval == NoYes::No
                    && payStatementTaxLine.PayStatement == payStatement.RecId
            exists join payrollW2ReportLocalTmp
                where payStatement.Worker == payrollW2ReportLocalTmp.Worker
            exists join taxCode
                where payStatementTaxLine.TaxCode == taxCode.RecId
                && taxCode.Type == PayrollTaxCodeType::FIT;

        // Mass update the report's temp table instance with the data from the "local" temp table
        update_recordSet payrollW2ReportLocalTmp
            setting FederalTax = payrollW2ReportTotalTmp.TotalAmount
            join payrollW2ReportTotalTmp
            where payrollW2ReportLocalTmp.Worker == payrollW2ReportTotalTmp.Worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxMedicare</Name>
				<Source><![CDATA[
    private void calcTaxMedicare()
    {
        PayrollPayStatement payStatement;
        PayrollPayStatementTaxLine payStatementTaxLine;
        PayrollW2ReportTotalTmp payrollW2ReportTotalTmp;
        PayrollTaxCode taxCode;

        PayrollW2ReportTmp payrollW2ReportLocalTmp;
        this.takeOwnershipOfTempTable(payrollW2ReportLocalTmp);
        payrollW2ReportLocalTmp.linkPhysicalTableInstance(payrollW2ReportTmp);

        this.takeOwnershipOfTempTable(payrollW2ReportTotalTmp);

        // Leverage a new instance of the PayrollW2ReportTmp to calculate each worker's Medicare tax for the year
        insert_recordSet payrollW2ReportTotalTmp (Worker, TotalAmount)
            select Worker
            from payStatement
            group by payStatement.Worker
                where payStatement.PaymentDate >= fromDate
                && payStatement.PaymentDate <= todate
                && payStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                && payStatement.IsReversed == false
                join sum(AccountingCurrencyAmount) from payStatementTaxLine
                    where payStatementTaxLine.IsMarkedForRemoval == NoYes::No
                    && payStatementTaxLine.PayStatement == payStatement.RecId
            exists join payrollW2ReportLocalTmp
                where payStatement.Worker == payrollW2ReportLocalTmp.Worker
            exists join taxCode
                where payStatementTaxLine.TaxCode == taxCode.RecId
                && (taxCode.Type == PayrollTaxCodeType::MEDI
                || taxcode.Type == PayrollTaxCodeType::MEDI2);

        // Mass update the report's temp table instance with the data from the "local" temp table
        update_recordSet payrollW2ReportLocalTmp
            setting MedicareTax = payrollW2ReportTotalTmp.TotalAmount
            join payrollW2ReportTotalTmp
            where payrollW2ReportLocalTmp.Worker == payrollW2ReportTotalTmp.Worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxSocialSecurity</Name>
				<Source><![CDATA[
    private void calcTaxSocialSecurity()
    {
        PayrollPayStatement payStatement;
        PayrollPayStatementTaxLine payStatementTaxLine;
        PayrollW2ReportTotalTmp payrollW2ReportTotalTmp;
        PayrollTaxCode taxCode;

        PayrollW2ReportTmp payrollW2ReportLocalTmp;
        this.takeOwnershipOfTempTable(payrollW2ReportLocalTmp);
        payrollW2ReportLocalTmp.linkPhysicalTableInstance(payrollW2ReportTmp);

        this.takeOwnershipOfTempTable(payrollW2ReportTotalTmp);

        // Leverage a new instance of the PayrollW2ReportTmp to calculate each worker's Social Security tax for the year
        insert_recordSet payrollW2ReportTotalTmp (Worker, TotalAmount)
            select Worker
            from payStatement
            group by payStatement.Worker
                where payStatement.PaymentDate >= fromDate
                && payStatement.PaymentDate <= todate
                && payStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                && payStatement.IsReversed == false
                join sum(AccountingCurrencyAmount) from payStatementTaxLine
                    where payStatementTaxLine.IsMarkedForRemoval == NoYes::No
                    && payStatementTaxLine.PayStatement == payStatement.RecId
            exists join payrollW2ReportLocalTmp
                where payStatement.Worker == payrollW2ReportLocalTmp.Worker
            exists join taxCode
                where payStatementTaxLine.TaxCode == taxCode.RecId
                && taxCode.Type == PayrollTaxCodeType::FICA;

        // Mass update the report's temp table instance with the data from the "local" temp table
        update_recordSet payrollW2ReportLocalTmp
            setting SocialSecurityTax = payrollW2ReportTotalTmp.TotalAmount
            join payrollW2ReportTotalTmp
            where payrollW2ReportLocalTmp.Worker == payrollW2ReportTotalTmp.Worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStateWages</Name>
				<Source><![CDATA[
    private Amount calcStateWages(PayrollTaxCodeType _payrollTaxCodeType)
    {
        PayrollTaxTransactionHistoryUnion   usTaxTransactionHistory;
        PayrollTaxCode                  taxCode;

        select sum(SubjectWages) from usTaxTransactionHistory
            where usTaxTransactionHistory.TransDate <= todate
               && usTaxTransactionHistory.TransDate >= fromDate
               && usTaxTransactionHistory.Worker    == prlUSTaxTransactionHistory.Worker
               && usTaxTransactionHistory.TaxationState    == prlUSTaxTransactionHistory.TaxationState
            exists join taxCode
                where taxCode.RecId == usTaxTransactionHistory.TaxCode
                   && taxCode.Type  == _payrollTaxCodeType;

        return usTaxTransactionHistory.SubjectWages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    private Amount calcTax(PayrollTaxCodeRecId _taxCodeRecId)
    {
        // Set this to 0 so no pay statements are excluded from the calculation
        PayrollPayStatementRecId payStatementToExclude = 0;

        if (_taxCodeRecId != 0)
        {
            return payStatementTotals.calcTaxCodeTotalForDateRangeStatus(payStatementToExclude,
                                                               _taxCodeRecId,
                                                               hcmWorker.RecId,
                                                               fromDate,
                                                               todate,
                                                               PayrollPaymentStatus::PaymentIssued,
                                                               false);
        }
        else
        {
            return 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWages</Name>
				<Source><![CDATA[
    private Amount calcWages(PayrollTaxCodeType _payrollTaxCodeType)
    {
        PayrollTaxTransactionHistoryUnion   usTaxTransactionHistory;
        PayrollTaxCode                  taxCode;

        select sum(SubjectWages) from usTaxTransactionHistory
            where usTaxTransactionHistory.TransDate <= todate
               && usTaxTransactionHistory.TransDate >= fromDate
               && usTaxTransactionHistory.Worker    == prlUSTaxTransactionHistory.Worker
            exists join taxCode
                where taxCode.RecId == usTaxTransactionHistory.TaxCode
                   && taxCode.Type  == _payrollTaxCodeType;

        return usTaxTransactionHistory.SubjectWages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearForAdditionalW2Page</Name>
				<Source><![CDATA[
    private void clearForAdditionalW2Page()
    {
        payrollW2ReportTmp.Wages                  = 0;
        payrollW2ReportTmp.SocialSecurityWages    = 0;
        payrollW2ReportTmp.MedicareWages          = 0;
        payrollW2ReportTmp.FederalTax             = 0;
        payrollW2ReportTmp.SocialSecurityTax      = 0;
        payrollW2ReportTmp.MedicareTax            = 0;
        payrollW2ReportTmp.DependentBenefits      = 0;
        payrollW2ReportTmp.NonqualifiedPlans      = 0;
        payrollW2ReportTmp.OtherAmount            = 0;
        payrollW2ReportTmp.IsStatutoryEmployee    = 0;
        payrollW2ReportTmp.IsRetirementPlan       = 0;
        payrollW2ReportTmp.IsThirdPartySickPay    = 0;
        payrollW2ReportTmp.Code12a                = "";
        payrollW2ReportTmp.Code12b                = "";
        payrollW2ReportTmp.Code12c                = "";
        payrollW2ReportTmp.Code12d                = "";
        payrollW2ReportTmp.Amount12a              = 0;
        payrollW2ReportTmp.Amount12b              = 0;
        payrollW2ReportTmp.Amount12c              = 0;
        payrollW2ReportTmp.Amount12d              = 0;
        payrollW2ReportTmp.Code14a                = "";
        payrollW2ReportTmp.Code14b                = "";
        payrollW2ReportTmp.Code14c                = "";
        payrollW2ReportTmp.Amount14a              = 0;
        payrollW2ReportTmp.Amount14b              = 0;
        payrollW2ReportTmp.Amount14c              = 0;
        payrollW2ReportTmp.StateId1               = "";
        payrollW2ReportTmp.StateId2               = "";
        payrollW2ReportTmp.StateEmployerID1       = "";
        payrollW2ReportTmp.StateEmployerID2       = "";
        payrollW2ReportTmp.StateWages1            = 0;
        payrollW2ReportTmp.StateWages2            = 0;
        payrollW2ReportTmp.StateTax1              = 0;
        payrollW2ReportTmp.StateTax2              = 0;
        payrollW2ReportTmp.LocalWages1            = 0;
        payrollW2ReportTmp.LocalWages2            = 0;
        payrollW2ReportTmp.LocalTaxes1            = 0;
        payrollW2ReportTmp.LocalTaxes2            = 0;
        payrollW2ReportTmp.LocalityName1          = "";
        payrollW2ReportTmp.LocalityName2          = "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructEmployeeNameAndAddress</Name>
				<Source><![CDATA[
    private PayrollEmployeeNameAndAddress constructEmployeeNameAndAddress()
    {
        PayrollEmployeeNameAndAddress   nameAndAddress;
        DirPartyName                    personName;
        Addressing                      workerAddress;
        DirPerson                       dirPerson;
        DirPersonName                   dirPersonName;

        dirPerson = DirPerson::find(hcmWorker.Person);
        dirPersonName = HcmWorker::getDirPersonNameByTimeState(hcmWorker.Person, pointInTime);

        if (dirPersonName.MiddleName)
        {
            personName = dirPersonName.FirstName + " " + subStr(dirPersonName.MiddleName, 1, 1) + " " + dirPersonName.LastName;
        }
        else
        {
            personName = dirPersonName.FirstName + " " + dirPersonName.LastName;
        }

        if (dirPerson.PersonalSuffix)
        {
            DirNameAffix nameAffix;

            select Affix from nameAffix
                where nameAffix.RecId == dirPerson.PersonalSuffix;

            if (nameAffix.Affix)
            {
                personName = personName + " " + nameAffix.Affix;
            }
        }

        // get the address active as of the starting of the last of December in the tax year
        workerAddress       = DirParty::getAddress(hcmWorker.Person, HcmDateTimeUtil::startOfDay(DateTimeUtil::newDateTime(todate, 0)));
        nameAndAddress = personName + "\n" + workerAddress;

        return nameAndAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructEmployerNameAndAddress</Name>
				<Source><![CDATA[
    private PayrollEmployerNameAndAddress constructEmployerNameAndAddress()
    {
        PayrollEmployerNameAndAddress   nameAndAddress;
        DirPartyName                    companyName;
        Addressing                      companyAddress;

        companyName = PayrollW2ReportDP::getCompanyNameByTimeState(companyInfo.RecId, pointInTime);
        // get the address active as of the starting of the day 12/31 in the tax year
        companyAddress       = DirParty::getAddress(companyInfo.RecId, pointInTime);
        nameAndAddress = companyName + "\n" + companyAddress;

        return nameAndAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countStateLinesForWorker</Name>
				<Source><![CDATA[
    private int countStateLinesForWorker()
    {
        PayrollTaxTransactionHistoryUnion      usTaxTransactionHistory;
        PayrollTaxCode                  taxCode;
        int                             linesCount = 0;

        while select sum(TaxationState) from usTaxTransactionHistory
            where usTaxTransactionHistory.TransDate <= todate
               && usTaxTransactionHistory.TransDate >= fromDate
               && usTaxTransactionHistory.Worker    == hcmWorker.RecId
            join taxCode
                group by usTaxTransactionHistory.TaxationState
                where taxCode.RecId == usTaxTransactionHistory.TaxCode
                   && taxCode.Type  == PayrollTaxCodeType::SIT
                   && (usTaxTransactionHistory.TaxationState != PayrollUSState::AS &&
                       usTaxTransactionHistory.TaxationState != PayrollUSState::GU &&
                       usTaxTransactionHistory.TaxationState != PayrollUSState::MP &&
                       usTaxTransactionHistory.TaxationState != PayrollUSState::PR &&
                       usTaxTransactionHistory.TaxationState != PayrollUSState::VI)
        {
            linesCount++;
        }

        return linesCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayrollW2ReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from PayrollW2ReportTmp Temp Table.
    /// </summary>
    /// <returns>
    /// Data from table PayrollW2ReportTmp.
    /// </returns>
    [
        SRSReportDataSetAttribute('PayrollW2ReportTmp')
    ]
    public PayrollW2ReportTmp getPayrollW2ReportTmp()
    {
        select payrollW2ReportTmp;
        return payrollW2ReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    // Init class variables
    private void init(Yr _taxYear, NoYes _latestName)
    {
        payStatementTotals = new PayrollPayStatementTotals();
        companyInfo =  CompanyInfo::find();
        taxYear  = _taxYear;
        todate   = mkDate(31, 12, _taxYear);
        fromDate = mkDate(01, 01,_taxYear);
        legalEntity = CompanyInfo::current();

        if (_latestName == NoYes::Yes)
        {
            pointInTime = DateTimeUtil::utcNow();
        }
        else
        {
            pointInTime = Global::datetoendUtcDateTime(todate, DateTimeUtil::getCompanyTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBox12Values</Name>
				<Source><![CDATA[
    private void insertBox12Values()
    {
        MapEnumerator en;
        SetEnumerator   se;
        Set elementsToBeDeleted = new Set(Types::String);

        countOf12Boxes = 1;
        en = new MapEnumerator(box12W2LabelMap);

        while (en.moveNext() && isReadyForInsert)
        {
            switch (countOf12Boxes mod 4)
            {
                case 0:
                    payrollW2ReportTmp.Code12d = subStr(en.currentKey(), 0, 2);
                    payrollW2ReportTmp.Amount12d = en.currentValue();
                    break;

                case 1:
                    payrollW2ReportTmp.Code12a = subStr(en.currentKey(), 0, 2);
                    payrollW2ReportTmp.Amount12a = en.currentValue();
                    break;

                case 2:
                    payrollW2ReportTmp.Code12b = subStr(en.currentKey(), 0, 2);
                    payrollW2ReportTmp.Amount12b = en.currentValue();
                    break;

                case 3:
                    payrollW2ReportTmp.Code12c = subStr(en.currentKey(), 0, 2);
                    payrollW2ReportTmp.Amount12c = en.currentValue();
                    break;

                default :
                    break;
            }

            if (countOf12Boxes mod 4 == 0)
            {
                this.insertBox14Values();
            }

            elementsToBeDeleted.add(en.currentKey());
            countOf12Boxes++;
        }

        if (!en.moveNext() && isReadyForInsert)
        {
            this.insertBox14Values();
        }

        se = elementsToBeDeleted.getEnumerator();

        while (se.moveNext())
        {
            box12W2LabelMap.remove(se.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBox14Values</Name>
				<Source><![CDATA[
    private void insertBox14Values()
    {
        MapEnumerator en;
        SetEnumerator   se;
        Set elementsToBeDeleted = new Set(Types::String);

        countOf14Boxes = 1;
        en = new MapEnumerator(box14W2LabelMap);

        while (en.moveNext() && isReadyForInsert)
        {
            switch (countOf14Boxes mod 3)
            {
                case 0:
                    payrollW2ReportTmp.Code14c = subStr(en.currentKey(), 0, 5);
                    payrollW2ReportTmp.Amount14c = en.currentValue();
                    break;

                case 1:
                    payrollW2ReportTmp.Code14a = subStr(en.currentKey(), 0, 5);
                    payrollW2ReportTmp.Amount14a = en.currentValue();
                    break;

                case 2:
                    payrollW2ReportTmp.Code14b = subStr(en.currentKey(), 0, 5);
                    payrollW2ReportTmp.Amount14b = en.currentValue();
                    break;

                default :
                    break;
            }

            if (countOf14Boxes mod 3 == 0)
            {
                this.insertTmpTable();
            }

            elementsToBeDeleted.add(en.currentKey());
            countOf14Boxes++;
        }

        if (!en.moveNext() && isReadyForInsert)
        {
            this.insertTmpTable();
        }

        se = elementsToBeDeleted.getEnumerator();

        while (se.moveNext())
        {
            box14W2LabelMap.remove(se.current());
        }

        if (isReadyForInsert == true && wasInsertCalled == false)
        {
            this.insertTmpTable();
            wasInsertCalled = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    private void insertTmpTable()
    {
        ++lineNumber;
        payrollW2ReportTmp.LineNumber = lineNumber;
        w2ReportList.add(payrollW2ReportTmp);
        isReadyForInsert = false;
        wasInsertCalled = !isReadyForInsert;
        this.clearForAdditionalW2Page();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        Query                               query;
        QueryRun                            qr;
        Query                               prlw2Query;
        QueryRun                            prlw2Qr;
        QueryBuildDataSource                qbds;
        PayrollW2ReportContract             contract;
        PayrollTaxCode                      payrollTaxCode;
        PayrollTaxExternalReporting         taxExternalReporting;
        PayrollTaxTransactionHistoryUnion   taxTransactionHistory;
        HcmPersonIdentificationNumber       hcmPersonIdentificationNumber;
        HcmIdentificationTypeRecId          socialSecurityIdentificationType;
        PayrollEmployerNameAndAddress       payrollEmployerNameAndAddress;
        List                                stateLinesList;
        List                                localLinesList;
        AmountCur                           localTaxAmount;
        boolean                             issuedPayStatementFound;

        this.takeOwnershipOfTempTable(payrollW2ReportTmp);

        w2ReportList = new RecordInsertList(tableNum(payrollW2ReportTmp), true, true, true, false, false, payrollW2ReportTmp);

        socialSecurityIdentificationType = HcmSharedParameters::find().ssnIdentificationType;
        contract = this.parmDataContract() as PayrollW2ReportContract;
        this.init(contract.parmTaxYear(), contract.parmLatestName());
        payrollEmployerNameAndAddress = this.constructEmployerNameAndAddress();
        query = this.parmQuery();
        qbds = query.dataSourceTable(tableNum(PayrollTaxTransactionHistoryUnion));
        qbds.addRange(fieldNum(PayrollTaxTransactionHistoryUnion, TransDate)).value(queryRange(mkDate(01,01,taxYear),mkDate(31,12,taxYear)));
        qr = new QueryRun(query);
        prlw2Query = new Query(queryStr(PRLW2));
        prlw2Query.dataSourceTable(tableNum(PayrollTaxTransactionHistoryUnion)).addRange(fieldNum(PayrollTaxTransactionHistoryUnion, TransDate)).value(queryRange(mkDate(01,01,taxYear),mkDate(31,12,taxYear)));

        qr.literals(true);
        while (qr.next())
        {
            countOf12Boxes = 0;
            last12BoxCalculated = 0;
            last14BoxCalculated = 0;
            stateLinesList = new List(Types::Container);
            localLinesList = new List(Types::Container);
            hcmWorker   = qr.get(tableNum(HcmWorker));

            prlw2Query.dataSourceTable(tableNum(PayrollTaxTransactionHistoryUnion)).findRange(fieldNum(PayrollTaxTransactionHistoryUnion, Worker)).value(queryValue(hcmWorker.RecId));
            prlw2Qr = new QueryRun(prlw2Query);
            prlw2Qr.literals(true);

            hcmPersonIdentificationNumber = HcmPersonIdentificationNumber::findByPersonAndType(hcmWorker.Person, socialSecurityIdentificationType);

            payrollW2ReportTmp.clear();
            payrollW2ReportTmp.EmployeeSSN            = hcmPersonIdentificationNumber.IdentificationNumber;
            payrollW2ReportTmp.PersonnelNumber        = hcmWorker.PersonnelNumber;
            payrollW2ReportTmp.Worker                 = hcmWorker.RecId;
            payrollW2ReportTmp.EmployerIDNumber       = companyInfo.Tax1099RegNum;
            payrollW2ReportTmp.EmployerNameAndAddress = payrollEmployerNameAndAddress;
            payrollW2ReportTmp.EmployeeNameAndAddress = this.constructEmployeeNameAndAddress();

            payrollW2ReportTmp.DependentBenefits      = PayrollPayStatementTotals::calcExternalReportingTotals(
                                                    hcmWorker.RecId,
                                                    fromDate,
                                                    todate,
                                                    PayrollW2BoxNumber::OneZero);

            payrollW2ReportTmp.NonqualifiedPlans      = PayrollPayStatementTotals::calcExternalReportingTotals(
                                                    hcmWorker.RecId,
                                                    fromDate,
                                                    todate,
                                                    PayrollW2BoxNumber::OneOne);

            this.calcBox12AndBox14Values();
            payrollW2ReportTmp.IsStatutoryEmployee    = this.box13Indicator(hcmWorker.RecId, #STATUTORYEMPLOYEE, todate);
            payrollW2ReportTmp.IsRetirementPlan       = this.box13Indicator(hcmWorker.RecId, #RETIREMENTPLAN, todate);
            payrollW2ReportTmp.IsThirdPartySickPay    = this.box13Indicator(hcmWorker.RecId, #THIRDPARTYSICKPAY, todate);

            issuedPayStatementFound = false;

            while (prlw2Qr.next())
            {
                taxTransactionHistory = prlw2Qr.get(tableNum(PayrollTaxTransactionHistoryUnion));
                payrollTaxCode = prlw2Qr.get(tableNum(PayrollTaxCode));

                // Special filing is required for AS, GU, MP, PR and VI.
                if (taxTransactionHistory.TaxationState == PayrollUSState::AS ||
                taxTransactionHistory.TaxationState == PayrollUSState::GU ||
                taxTransactionHistory.TaxationState == PayrollUSState::MP ||
                taxTransactionHistory.TaxationState == PayrollUSState::PR ||
                taxTransactionHistory.TaxationState == PayrollUSState::VI )
                {
                    continue;
                }

                issuedPayStatementFound = true;

                // A W-2 record can be inserted as there exists at least one tax line
                isReadyForInsert = true;
                wasInsertCalled  = !isReadyForInsert;

                switch (payrollTaxCode.Type)
                {
                    case PayrollTaxCodeType::FIT :
                        payrollW2ReportTmp.Wages                  += taxTransactionHistory.SubjectWages;
                        break;

                    case PayrollTaxCodeType::FICA :
                        payrollW2ReportTmp.SocialSecurityWages    += taxTransactionHistory.SubjectWages;
                        break;

                    case PayrollTaxCodeType::MEDI :
                        payrollW2ReportTmp.MedicareWages          += taxTransactionHistory.SubjectWages;
                        // MEDI2 subject wages are included in MEDI subject wages, so they don't need to be added in here
                        break;

                    case PayrollTaxCodeType::SIT :
                        stateLinesList.addEnd([enum2str(taxTransactionHistory.TaxationState),
                                                    PayrollTaxCodeDetail::findByPayrollTaxCodeLegalEntity(taxTransactionHistory.TaxCode, legalEntity).AccountNumber,
                                                    this.calcTax(taxTransactionHistory.TaxCode),
                                                    taxTransactionHistory.SubjectWages]);
                        break;

                    case PayrollTaxCodeType::LST :
                        break;

                    default :
                        select firstonly validTimeState(fromDate, todate) W2Box20Label from taxExternalReporting
                            where taxExternalReporting.PayrollTaxCode == taxTransactionHistory.TaxCode;

                        if (taxExternalReporting.W2Box20Label != PayrollW2Box20Label::None
                        && taxExternalReporting.W2Box20Label != PayrollW2Box20Label::NotSelected)
                        {
                            localTaxAmount = this.calcTax(taxTransactionHistory.TaxCode);

                            if (localTaxAmount != 0)
                            {
                                this.addLocalLine(localLinesList, taxTransactionHistory.SubjectWages, localTaxAmount, this.getLocalityName(taxTransactionHistory), taxExternalReporting.W2Box20Label);
                            }
                        }
                        break;
                }
            }

            if (issuedPayStatementFound)
            {
                this.insertOverflowableLines(stateLinesList, localLinesList);
            }
        }
        w2ReportList.insertDatabase();

        // Now update the tax totals for FIT, FICA, MEDI, and MEDI2
        this.calcTaxFederal();
        this.calcTaxSocialSecurity();
        this.calcTaxMedicare();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyNameByTimeState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the company name as of a supplied <c>utcDateTime</c> value.
    /// </summary>
    /// <param name="_organization">
    /// The record Id of a company.
    /// </param>
    /// <param name="pointInTime">
    /// A <c>utcDateTime</c> value which is used to find a record in the table.
    /// </param>
    /// <returns>
    /// A string value which indicates the name of the company active as of the supplied date time value.
    /// </returns>
    public static DirPartyName getCompanyNameByTimeState(RecId _organization, utcdatetime pointInTime = DateTimeUtil::utcNow())
    {
        DirOrganizationName organizationName = null;

        if (_organization)
        {
            select firstonly validTimeState(pointInTime) organizationName
                where organizationName.Organization == _organization;
        }

        return organizationName.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLocalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the given information to the list of local lines.
    /// If the local line is a political sub-division (PSD) line, the list is searched
    /// to see if any existing local lines share the same first two digits.
    /// If none exist, or if the line is not a PSD line, the
    /// local line is added to the list normally.
    /// </summary>
    /// <param name="_localLines">
    /// List of containers of local line values.
    /// </param>
    /// <param name="_localWages">
    /// Wages for the given local tax
    /// </param>
    /// <param name="_localTaxes">
    /// Taxes for the given local tax
    /// </param>
    /// <param name="_localityName">
    /// Locality name to display on the W2
    /// </param>
    /// <param name="_w2Box20LabelType">
    /// Type of W2 box label to determine if existing lines are PSD lines.
    /// </param>
    private void addLocalLine(List _localLines, AmountCur _localWages, AmountCur _localTaxes, str _localityName, PayrollW2Box20Label _w2Box20LabelType)
    {
        ListIterator    iterator;
        container       values;

        if (_w2Box20LabelType == PayrollW2Box20Label::PAPoliticalSubDivision)
        {
            iterator = new ListIterator(_localLines);

            while (iterator.more())
            {
                values = iterator.value();
                if (conPeek(values, #LocalTypeContainerPosition) == PayrollW2Box20Label::PAPoliticalSubDivision)
                {
                    if (conPeek(values, #LocalityNameContainerPosition) == _localityName)
                    {
                        iterator.delete();
                        conPoke(values, #LocalWageContainerPosition, conPeek(values, #LocalWageContainerPosition) + _localWages);
                        conPoke(values, #LocalTaxContainerPosition, conPeek(values, #LocalTaxContainerPosition) + _localTaxes);
                        iterator.insert(values);
                        return;
                    }
                }
                iterator.next();
            }
        }

        _localLines.addEnd([_localWages, _localTaxes, _localityName, _w2Box20LabelType]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalityName</Name>
				<Source><![CDATA[
    private str getLocalityName(PayrollTaxTransactionHistoryUnion _taxTransactionHistory)
    {
        str localityName;
        PayrollTaxExternalReporting taxExternalReporting;
        PayrollTaxCode taxCode;

        select firstonly validTimeState(todate) W2Box20Label, W2Box20Other from taxExternalReporting
        where taxExternalReporting.PayrollTaxCode == _taxTransactionHistory.TaxCode;

        switch (taxExternalReporting.W2Box20Label)
        {
            case PayrollW2Box20Label::Other :
                localityName = taxExternalReporting.W2Box20Other;
                break;

            case PayrollW2Box20Label::PAPoliticalSubDivision :
                localityName = subStr(_taxTransactionHistory.PoliticalSubDivisionId, 1, 2);
                break;

            case PayrollW2Box20Label::TaxCodeDescription :
                select firstonly Description from taxCode
                    where taxCode.RecId == _taxTransactionHistory.TaxCode;
                localityName = taxCode.Description;
                break;

            default :
                break;
        }

        return localityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOverflowableLines</Name>
				<Source><![CDATA[
    private void insertOverflowableLines(List _stateLines, List _localLines)
    {
        ListIterator    stateIterator,
                        localIterator;
        int             stateCounter,
                        localCounter;
        container       values;

        stateIterator = new ListIterator(_stateLines);
        localIterator = new ListIterator(_localLines);

        //This will keep looping through the line lists while at least one of them still has values left
        while (stateIterator.more() || localIterator.more())
        {
            isReadyForInsert = true;

            if (stateIterator.more())
            {
                values = stateIterator.value();

                if (stateCounter mod 2 == 0)
                {
                    payrollW2ReportTmp.StateId1         = conPeek(values, #StateIDContainerPosition);
                    payrollW2ReportTmp.StateEmployerID1 = conPeek(values, #StateEmployerIDContainerPosition);
                    payrollW2ReportTmp.StateTax1        = conPeek(values, #StateTaxesContainerPosition);
                    payrollW2ReportTmp.StateWages1      = conPeek(values, #StateWagesContainerPosition);
                }
                else
                {
                    payrollW2ReportTmp.StateId2         = conPeek(values, #StateIDContainerPosition);
                    payrollW2ReportTmp.StateEmployerID2 = conPeek(values, #StateEmployerIDContainerPosition);
                    payrollW2ReportTmp.StateTax2        = conPeek(values, #StateTaxesContainerPosition);
                    payrollW2ReportTmp.StateWages2      = conPeek(values, #StateWagesContainerPosition);
                }

                stateIterator.next();
                stateCounter++;
            }

            if (localIterator.more())
            {
                values = localIterator.value();

                if (localCounter mod 2 == 0)
                {
                    payrollW2ReportTmp.Localwages1      = conPeek(values, #LocalWageContainerPosition);
                    payrollW2ReportTmp.LocalTaxes1      = conPeek(values, #LocalTaxContainerPosition);
                    payrollW2ReportTmp.LocalityName1    = conPeek(values, #LocalityNameContainerPosition);
                }
                else
                {
                    payrollW2ReportTmp.Localwages2      = conPeek(values, #LocalWageContainerPosition);
                    payrollW2ReportTmp.LocalTaxes2      = conPeek(values, #LocalTaxContainerPosition);
                    payrollW2ReportTmp.LocalityName2    = conPeek(values, #LocalityNameContainerPosition);
                }

                localIterator.next();
                localCounter++;
            }

            //
            //If two lines of at least one of the line types have been added since the last insert
            //and there are still more to add of that type, insert values into the table before looping through more lines.
            //
            if ((stateCounter mod 2 == 0 && stateIterator.more()) || (localCounter mod 2 == 0 && localIterator.more()))
            {
                //
                // Get all box 12 items and insert this tmp table record as both states have been fetched or there are no more state lines.
                // Any new state data should go on a new tmp table record
                //

                this.insertBox12Values();
                this.insertBox14Values();

                if (isReadyForInsert)
                {
                    this.insertTmpTable();
                }
            }
        }

        // Insert all the remaining box 12 values
        while (!box12W2LabelMap.empty())
        {
            isReadyForInsert = true;
            wasInsertCalled = !isReadyForInsert;
            this.insertBox12Values();
        }

        // Insert all the remaining box 14 values
        while (!box14W2LabelMap.empty())
        {
            isReadyForInsert = true;
            wasInsertCalled = !isReadyForInsert;
            this.insertBox14Values();
        }

        if (isReadyForInsert)
        {
            this.insertTmpTable();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>