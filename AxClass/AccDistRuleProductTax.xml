<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistRuleProductTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ExpenseReport), BusinessEvent_ExpenseReport::PurchaseOfExpensedProducts, MonetaryAmount::Tax),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ExpenseReport), BusinessEvent_ExpenseReport::PurchaseOfExpensedProducts, MonetaryAmount::TaxNonRecoverable),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductRequisition), BusinessEvent_ProductRequisition::CommitBudgetFundsForExpensedProducts, MonetaryAmount::Tax),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductOrder), BusinessEvent_ProductOrder::ObligateBudgetFundsForExpensedProducts, MonetaryAmount::Tax),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductOrder), BusinessEvent_ProductOrder::ObligateBudgetFundsForExpensedProducts, MonetaryAmount::TaxVariance),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_BankStatement), BusinessEvent_BankStatement::Reconciliation, MonetaryAmount::Tax),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_BankStatement), BusinessEvent_BankStatement::Reconciliation, MonetaryAmount::TaxNonRecoverable),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductOrder), BusinessEvent_ProductOrder::ObligateBudgetFundsForExpensedProducts, MonetaryAmount::TaxDeferred_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductOrder), BusinessEvent_ProductOrder::ObligateBudgetFundsForExpensedProducts, MonetaryAmount::TaxDeferredVariance_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductRequisition), BusinessEvent_ProductRequisition::CommitBudgetFundsForExpensedProducts, MonetaryAmount::TaxDeferred_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductOrder), BusinessEvent_ProductOrder::ObligateBudgetFundsForExpensedProducts, MonetaryAmount::Incentiveschemetax_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductRequisition), BusinessEvent_ProductRequisition::CommitBudgetFundsForExpensedProducts, MonetaryAmount::Incentiveschemetax_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductOrder), BusinessEvent_ProductOrder::ObligateBudgetFundsForExpensedProducts, MonetaryAmount::ServiceTaxInterimAmount_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductRequisition), BusinessEvent_ProductRequisition::CommitBudgetFundsForExpensedProducts, MonetaryAmount::ServiceTaxInterimAmount_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ExpenseReport), BusinessEvent_ExpenseReport::PurchaseOfExpensedProducts, MonetaryAmount::ServiceTaxInterimAmount_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductOrder), BusinessEvent_ProductOrder::ObligateBudgetFundsForExpensedProducts, MonetaryAmount::ServiceTaxNonRecoverable_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductRequisition), BusinessEvent_ProductRequisition::CommitBudgetFundsForExpensedProducts, MonetaryAmount::ServiceTaxNonRecoverable_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ExpenseReport), BusinessEvent_ExpenseReport::PurchaseOfExpensedProducts, MonetaryAmount::ServiceTaxNonRecoverable_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductOrder), BusinessEvent_ProductOrder::ObligateBudgetFundsForExpensedProducts, MonetaryAmount::ServiceTaxExpense_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductRequisition), BusinessEvent_ProductRequisition::CommitBudgetFundsForExpensedProducts, MonetaryAmount::ServiceTaxExpense_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ExpenseReport), BusinessEvent_ExpenseReport::PurchaseOfExpensedProducts, MonetaryAmount::ServiceTaxExpense_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductOrder), BusinessEvent_ProductOrder::ObligateBudgetFundsForExpensedProducts, MonetaryAmount::ServiceTaxInterimExpense_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductRequisition), BusinessEvent_ProductRequisition::CommitBudgetFundsForExpensedProducts, MonetaryAmount::ServiceTaxInterimExpense_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ExpenseReport), BusinessEvent_ExpenseReport::PurchaseOfExpensedProducts, MonetaryAmount::ServiceTaxInterimExpense_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProjAdvancedJournal), BusinessEvent_ProjAdvancedJournal::RecordProjectActivity, MonetaryAmount::Tax),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProjAdvancedJournal), BusinessEvent_ProjAdvancedJournal::RecordProjectActivity, MonetaryAmount::TaxNonRecoverable)
]
public class AccDistRuleProductTax extends AccountingDistributionRule
{
    TaxDirection        taxDirection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPostingType_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ledger posting type due to india tax type
    /// </summary>
    /// <param name="_taxType">
    /// India tax type
    /// </param>
    /// <returns>
    /// Ledger posting type
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerPostingType getPostingType_IN(TaxType_IN _taxType)
    {
        LedgerPostingType   taxPostingType;
        switch (_taxType)
        {
            case TaxType_IN::VAT:
                taxPostingType = LedgerPostingType::VAT_IN;
                break;

            case TaxType_IN::SalesTax:
                taxPostingType = LedgerPostingType::SalesTax_IN;
                break;

            case TaxType_IN::ServiceTax:
                taxPostingType = LedgerPostingType::ServiceTax_IN;
                break;

            case TaxType_IN::Excise:
                taxPostingType = LedgerPostingType::Excise_IN;
                break;

            case TaxType_IN::Customs:
                taxPostingType = LedgerPostingType::Customs_IN;
                break;
            default :
                taxPostingType = LedgerPostingType::Tax;
        }
        return taxPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the accounting distribution rule
    /// </summary>
    protected void initialize()
    {
        Object                          object = sourceDocumentLineItem;
        SourceDocumentLineItemITax      iTax;

        if (object is SourceDocumentLineItemITax)
        {
            iTax = object as SourceDocumentLineItemITax;
            taxDirection = iTax.parmTaxDirection();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        LedgerPostingType   ledgerPostingType;
        TaxUncommitted      taxUncommitted;
        TaxTrans            taxTrans;
        TaxData             taxData;
        SourceDocumentLine  sourceDocumentLine;
        // <GIN>
        TaxType_IN  taxType;
        TaxSourceDocSublineItem taxDocumentLineItem;
        // </GIN>

        ledgerPostingType = LedgerPostingType::Tax;

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN()
            && this.parmSourceDocumentLineItem() is TaxSourceDocSublineItem)
        {
            taxDocumentLineItem = this.parmSourceDocumentLineItem() as TaxSourceDocSublineItem;
            taxType = TaxTable::find(taxDocumentLineItem.parmTaxCode()).TaxType_IN;

            if (taxType != TaxType_IN::None)
            {
                ledgerPostingType = this.getPostingType_IN(taxType);
            }
        }
        else
        {
        // </GIN>
            sourceDocumentLine = sourceDocumentLineItem.parmSourceDocumentLine();

            // when it is called, tax may have been posted to taxtrans
            if (sourceDocumentLine.SourceRelationType == tableNum(TaxUncommitted)
                || sourceDocumentLine.SourceRelationType == tableNum(TaxTrans))
            {
                taxData = SysTransactionScopeCache::get(tableStr(TaxData), sourceDocumentLine.RecId, taxData);

                if (!taxData)
                {
                    if (sourceDocumentLine.SourceRelationType == tableNum(TaxUncommitted))
                    {
                        taxUncommitted = sourceDocumentLineItem.parmSourceDocumentLineImplementation();
                        taxData = TaxData::find(taxUncommitted.TaxCode, taxUncommitted.TransDate, taxUncommitted.TaxBaseAmount);
                    }
                    else
                    {
                        taxTrans = sourceDocumentLineItem.parmSourceDocumentLineImplementation();
                        taxData = TaxData::find(taxTrans.TaxCode, taxTrans.TransDate, taxTrans.TaxBaseAmount);
                    }
                    SysTransactionScopeCache::set(tableStr(TaxData), sourceDocumentLine.RecId, taxData);
                }

                if (taxData.vatExemptPct &&
                    taxDirection == TaxDirection::UseTax &&
                    monetaryAmount == MonetaryAmount::TaxNonRecoverable)
                {
                    ledgerPostingType = LedgerPostingType::PurchConsump;
                }
                // <GBR>
                if (BrazilParameters::isEnabled())
                {
                    TaxFiscalValue_BR fiscalValue;
                    if (sourceDocumentLine.SourceRelationType == tableNum(TaxUncommitted))
                    {
                        taxUncommitted = sourceDocumentLineItem.parmSourceDocumentLineImplementation();
                        fiscalValue= taxUncommitted.FiscalValue_BR;
                    }
                    else
                    {
                        taxTrans = sourceDocumentLineItem.parmSourceDocumentLineImplementation();
                        TaxTrans_BR taxTrans_BR = TaxTrans_BR::findByTaxTrans(taxTrans.RecId);
                        fiscalvalue = taxTrans_BR.FiscalValue_BR;
                    }
                    if (fiscalValue == TaxFiscalValue_BR::WithoutCreditDebitOther &&
                        taxDirection == TaxDirection::UseTax &&
                        monetaryAmount == MonetaryAmount::TaxNonRecoverable)
                    {
                        ledgerPostingType = LedgerPostingType::PurchConsump;
                    }
                }
                // </GBR>
            }
        // <GIN>
        }
        // </GIN>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            ledgerPostingType = this.postParmLedgerPostingType_BR(ledgerPostingType);
        }
        // </GBR>

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        DebitCredit side = DebitCredit::Credit;

        switch (taxDirection)
        {
            case TaxDirection::IncomingTax:
            case TaxDirection::UseTax:
                if (this.parmAmount() >= 0.0)
                {
                    side = DebitCredit::Debit;
                }
                else
                {
                    side = DebitCredit::Credit;
                }
                break;

            case TaxDirection::OutgoingTax:
                if (this.parmAccountingdistribution().TransactionCurrencyAmount >= 0.0)
                {
                    side = DebitCredit::Debit;
                }
                break;
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            side = this.postParmSide_BR(side);
        }
        // </GBR>

        return side;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postParmLedgerPostingType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the posting type for MonetaryAmount == MonetaryAmount::TaxNonRecoverable.
    /// </summary>
    /// <param name="_returnValue">
    ///     The return value of sys <c>parmLedgerPostingType</c>.
    /// </param>
    /// <returns>
    ///     LedgerPostingType::CustRevenue when parent source document line is <c>CustInvoiceLineSourceDocLineItem</c>
    ///     and monetary amount is MonetaryAmount::TaxNonRecoverable.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerPostingType postParmLedgerPostingType_BR(LedgerPostingType _returnValue)
    {
        if (this.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem() is CustInvoiceLineSourceDocLineItem)
        {
            if (this.parmSourceDocumentLineItem() is TaxSourceDocSublineItem
                && this.parmMonetaryAmount() == MonetaryAmount::TaxNonRecoverable)
            {
                return LedgerPostingType::CustRevenue;
            }
        }
        else if (this.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem() is SalesComplementaryInvSourceDocLine)
        {
            if (this.parmSourceDocumentLineItem() is TaxSourceDocSublineItem
                && this.parmMonetaryAmount() == MonetaryAmount::TaxNonRecoverable)
            {
                return LedgerPostingType::SalesRevenue;
            }
        }

        return _returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postParmSide_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the accounting side when taxDirection equals to TaxDirection::OutgoingTax for <c>CustInvoiceLineSourceDocLineItem</c>.
    /// </summary>
    /// <param name="_returnValue">
    ///     The return value of sys <c>parmSide</c>.
    /// </param>
    /// <returns>
    ///     parmSide return value when MonetaryAmount is MonetaryAmount::TaxNonRecoverable and the distribution is negative.
    ///     DebitCredit::Debit when distribution amount is grater than 0.
    ///     DebitCredit::Credit when distribution amount is less than 0.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DebitCredit postParmSide_BR(DebitCredit _returnValue)
    {
        DebitCredit             side = _returnValue;
        AccountingDistribution  localAccountingDistribution;

        localAccountingDistribution = this.parmAccountingdistribution();

        if ((this.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem() is CustInvoiceLineSourceDocLineItem
             || this.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem() is SalesComplementaryInvSourceDocLine)
            && taxDirection == TaxDirection::OutgoingTax)
        {
            if (localAccountingDistribution.MonetaryAmount == MonetaryAmount::Tax)
            {
                if (localAccountingDistribution.TransactionCurrencyAmount > 0)
                {
                    side = DebitCredit::Debit;
                }
                else
                {
                    side = DebitCredit::Credit;
                }
            }

            if (localAccountingDistribution.TransactionCurrencyAmount > 0 &&
                localAccountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable)
            {
                side = DebitCredit::Debit;
            }
        }

        return side;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>