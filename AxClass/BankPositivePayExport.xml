<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPositivePayExport</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The <c>BankPositivePayExport</c> class manages the Bank Positive Pay file export related parameters and methods.
/// </summary>
public class BankPositivePayExport extends RunBase
{
    private BankAccountID bankAccountId;
    private BankAccountTable bankAccountTable;
    private AllSelected companySelection;
    private AllSelected bankSelection;
    private DataAreaId dataAreaId;
    private TransDate cutOffDate;
    private BankPositivePayFormatName payFormat;
    private DialogField dialogPayFormat;
    private DialogField dialogBank;
    private DialogField dialogCompany;
    private DialogField dialogcutOffDate;
    private DialogField dialogSelectedBank;
    private DialogField dialogSelectedCompany;
    protected SysQueryRun queryRun;
    private DialogRunbase dialog;
    private MenuItemNameAction callerMenuItemName;
    private BankPositivePayTable bankPositivePayTable;
    protected SharedServiceUnitFileID fileId;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        bankAccountId,
        dataAreaId,
        cutOffDate,
        companySelection,
        bankSelection,
        payFormat
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankAccountLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a custom lookup for the <c>CompanyBankAccountId</c> field.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object that needs the lookup.
    /// </param>
    private void bankAccountLookup(FormControl _formControl)
    {
        BankAccountTable::lookupBankAccount(_formControl, dialogSelectedCompany.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the bank account every time that it is modified.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object that is modified.
    /// </param>
    /// <returns>
    /// true if the bank account in the <c>CompanyBankAccountId</c> field is active; otherwise, false.
    /// </returns>
    private boolean bankAccountModified(FormStringControl _formControl)
    {
        boolean isBankAccountActive;
        boolean valueWasModified;
        CompanyId company = dialogSelectedCompany.value();

        valueWasModified = _formControl.modified();

        if (valueWasModified)
        {
            if (dialogBank.value())
            {
                if (!company)
                {
                    company = curext();
                }
                isBankAccountActive = BankAccountTable::checkIsActive(dialogSelectedBank.value(), DateTimeUtil::date(DateTimeUtil::utcNow()), company);

                if (!isBankAccountActive)
                {
                    dialogBank.value('');
                }
            }
        }

        return isBankAccountActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>positivePayFormatLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a custom lookup for the <c>BankPositivePayFormatName</c> field.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormStringControl</c> object that needs the lookup.
    /// </param>
    private void positivePayFormatLookup(FormStringControl _formControl)
    {
        BankPositivePayFormat::lookupPositivePayFormat(_formControl, (this.parmCallerMenuItem() == menuItemActionStr(PayrollPositivePayGenerate))? NoYes::Yes : NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>positivePayFormatValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the typed in positive pay format value
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormStringControl</c> object that is modified.
    /// </param>
    /// <returns>
    /// true if the positive pay format is valid; otherwise, false.
    /// </returns>
    private boolean positivePayFormatValidate(FormStringControl _formControl)
    {
        boolean isFormatValid = _formControl.validate();
        boolean isPayroll = (this.parmCallerMenuItem() == menuItemActionStr(PayrollPositivePayGenerate)) ? NoYes::Yes : NoYes::No;

        if (isFormatValid && dialogPayFormat.value())
        {
            BankPositivePayFormat bankPositivePayFormat;

            select bankPositivePayFormat
                where bankPositivePayFormat.FormatName == dialogPayFormat.value()
                    && bankPositivePayFormat.IsPayroll == isPayroll;

            if (bankPositivePayFormat.RecId == 0)
            {
                dialogPayFormat.value('');
            }
        }

        return isFormatValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        if (bankAccountTable)
        {
            dataAreaId = bankAccountTable.DataAreaId;
            bankAccountId = bankAccountTable.AccountID;
        }

        dialog.addGroup("@SYS4004473");

        dialogPayFormat = dialog.addFieldValue(extendedTypeStr(BankPositivePayFormatName), payFormat);
        dialogPayFormat.control().mandatory(true);
        dialogPayFormat.control().registerOverrideMethod(methodStr(FormStringControl, lookup),
            methodStr(BankPositivePayExport, positivePayFormatLookup),
            this);
        dialogPayFormat.control().registerOverrideMethod(methodStr(FormStringControl, validate),
            methodStr(BankPositivePayExport, positivePayFormatValidate),
            this);

        dialog.addGroup("@SYS13342");

        dialogCompany = dialog.addField(enumStr(AllSelected));
        dialogCompany.frameType(FormFrameType::None);

        dialogSelectedCompany = dialog.addField(extendedTypeStr(DataAreaId), "@SYS13342");
        dialogSelectedCompany.allowEdit(false);

        dialog.addGroup("@SYS1517");

        dialogBank = dialog.addField(enumStr(AllSelected));
        dialogBank.frameType(FormFrameType::None);
        dialogBank.enabled(false);

        dialogSelectedBank = new DialogField(dialog, extendedTypeStr(CompanyBankAccountId));
        dialog.addCtrlDialogField(dialogSelectedBank.name());
        dialogSelectedBank.init(dialog);
        dialogSelectedBank.allowEdit(false);

        dialogSelectedBank.control().registerOverrideMethod(methodStr(FormStringControl, lookup),
            methodStr(BankPositivePayExport, bankAccountLookup),
            this);

        dialogSelectedBank.control().registerOverrideMethod(methodStr(FormStringControl, modified),
            methodStr(BankPositivePayExport, bankAccountModified),
            this);

        if (bankAccountTable.RecId)
        {
            dialogSelectedCompany.value(dataAreaId);
            dialogSelectedBank.value(bankAccountId);
            dialogPayFormat.value(bankAccountTable.BankPositivePayFormatName);
            dialogPayFormat.allowEdit(false);
            dialogCompany.value(AllSelected::Selected);
            dialogCompany.enabled(false);
            dialogBank.value(AllSelected::Selected);
            dialogBank.enabled(false);
        }

        if (this.parmCallerMenuItem() == menuItemActionStr(PayrollPositivePayGenerate))
        {
            dialog.caption("@SYS4006263");
        }

        dialog.addGroup("@SYS4004482");
        dialogcutOffDate = dialog.addFieldValue(extendedTypeStr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS4004482");
        dialogcutOffDate.control().mandatory(true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called after dialog() is called, making it possible to override methods on the dialog.
    /// </summary>
    /// <param name="_dialog">
    /// The <c>Dialog</c> containing the fields to override methods on.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        dialogCompany.registerOverrideMethod('modified', methodStr(BankPositivePayExport, dialogCompanyModified), this);
        dialogBank.registerOverrideMethod('modified', methodStr(BankPositivePayExport, dialogBankModified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBankModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the bank control has been modified and modifies the editing state of the bank field if it has.
    /// </summary>
    /// <param name="_formRadioControl">
    /// The form control to determine if it has been modified.
    /// </param>
    /// <returns>
    /// true if the form control is modified; otherwise, false.
    /// </returns>
    public boolean dialogBankModified(FormRadioControl _formRadioControl)
    {
        boolean isBankFieldModified;

        isBankFieldModified = _formRadioControl.modified();

        if (isBankFieldModified)
        {
            dialogSelectedBank.allowEdit(dialogBank.value() == AllSelected::Selected);
            dialogSelectedBank.value('');
        }

        return isBankFieldModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogCompanyModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the company control has been modified and modifies the editing state of the company field if it has.
    /// </summary>
    /// <param name="_formRadioControl">
    /// The form control to determine if it has been modified.
    /// </param>
    /// <returns>
    /// true if the form control is modified; otherwise, false.
    /// </returns>
    public boolean dialogCompanyModified(FormRadioControl _formRadioControl)
    {
        boolean isCompanyCodeModified;

        isCompanyCodeModified = _formRadioControl.modified();

        if (isCompanyCodeModified)
        {
            dialogSelectedCompany.allowEdit(dialogCompany.value() == AllSelected::Selected);
            dialogBank.enabled(dialogCompany.value() == AllSelected::Selected);
            dialogSelectedCompany.value('');
        }

        return isCompanyCodeModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        payFormat = dialogPayFormat.value();
        bankAccountId = dialogSelectedBank.value();
        dataAreaId = dialogSelectedCompany.value();
        cutOffDate = dialogcutOffDate.value();
        companySelection = dialogCompany.value();
        bankSelection = dialogBank.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankAccountTable</Name>
				<Source><![CDATA[
    public BankAccountTable parmBankAccountTable(BankAccountTable _bankAccountTable = null)
    {
        if (!bankAccountTable)
        {
            bankAccountTable = _bankAccountTable;
        }

        return _bankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerMenuItem</Name>
				<Source><![CDATA[
    public MenuItemNameAction parmCallerMenuItem(MenuItemNameAction _callerMenuItemName = callerMenuItemName)
    {
        callerMenuItemName = _callerMenuItemName;

        return callerMenuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ttsbegin;

        this.initPositivePayQuery();
        this.updateBankPositivePay();

        ttscommit;

        if (bankPositivePayTable)
        {
            this.generatePositivePayFile();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChequeProcessedByPositivePay</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the <c>BankChequeTable</c> table buffer for positive pay file export.
    /// </summary>
    /// <param name = "_bankChequeTableRecId">
    ///     The bank cheque table record id.
    /// </param>
    [Wrappable(true)]
    protected final void setChequeProcessedByPositivePay(RecId _bankChequeTableRecId)
    {
        ttsbegin;

        // Reinitializing the table buffer otherwise the table record gets locked for update
        BankChequeTable bankChequeTable = BankChequeTable::findByRecId(_bankChequeTableRecId, true);
        bankChequeTable.ProcessedByPositivePay = NoYes::Yes;
        bankChequeTable.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBankPositivePayTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates values into the <c>BankPositivePayTable</c> table buffer.
    /// </summary>
    /// <param name = "_bankPositivePayTable">
    ///     A <c>BankPositivePayTable</c> table buffer.
    /// </param>
    /// <param name = "_totalQty">
    ///     The number of voided checks.
    /// </param>
    /// <param name = "_totalQty">
    ///     The number of checks.
    /// </param>
    protected void populateBankPositivePayTable(BankPositivePayTable _bankPositivePayTable, int _voidQty, int _totalQty)
    {
        _bankPositivePayTable.CutoffDate = cutOffDate;
        _bankPositivePayTable.VoidQty = _voidQty;
        _bankPositivePayTable.NumberOfCheques = _totalQty;
        _bankPositivePayTable.PayFormat = payFormat;
        _bankPositivePayTable.Filestatus = BankPositivePayFileStatus::Created;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankPositivePay</Name>
				<Source><![CDATA[
    private void updateBankPositivePay()
    {
        int totalQty = 0;
        int voidQty = 0;
        BankChequeTable bankChequeTable;
        BankPositivePayTrans bankPositivePayTransOld;
        BankPositivePayTrans bankPositivePayTrans;
        NumberSeq idSequence;

        queryRun.reset();

        if (this.validateNumberSequenceNotManual(BankParameters::numRefBankPositivePayNum()))
        {
            idSequence = NumberSeq::newGetNum(BankParameters::numRefBankPositivePayNum(), true);
            bankPositivePayTable.PositivePayNum = idSequence.num();
        }

        while (queryRun.next())
        {
            bankChequeTable = queryRun.get(tableNum(BankChequeTable));

            if (bankChequeTable)
            {
                bankPositivePayTransOld = BankPositivePayTrans::findByBankChequeRefRecId(bankChequeTable.RecId, bankChequeTable.DataAreaId, bankPositivePayTable.PositivePayNum);

                if (!bankPositivePayTransOld)
                {
                    bankPositivePayTrans.BankChequeTableRefRecId = bankChequeTable.RecId;
                    bankPositivePayTrans.PositivePayNumber = bankPositivePayTable.PositivePayNum;
                    bankPositivePayTrans.CompanyRef = bankChequeTable.dataAreaId;
                    bankPositivePayTrans.insert();

                    changeCompany(bankChequeTable.dataAreaId)
                    {
                        this.setChequeProcessedByPositivePay(bankChequeTable.RecId);

                        if (bankChequeTable.ChequeStatus == ChequeStatus::Void
                            || bankChequeTable.ChequeStatus == ChequeStatus::Cancelled
                            || bankChequeTable.ChequeStatus == ChequeStatus::Rejected)
                        {
                            voidQty += 1;
                        }

                        totalQty += 1;
                    }
                }
            }
        }

        if (totalQty)
        {
            this.populateBankPositivePayTable(bankPositivePayTable, voidQty, totalQty);
            bankPositivePayTable.insert();
            idSequence.used();
        }
        else
        {
            info("@CashManagement:PositivePayNoChecksFound");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that required class variables are set.
    /// </summary>
    /// <param name="_calledFrom">
    /// The calling object; optional.
    /// </param>
    /// <returns>
    /// true if the values are set; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (!payFormat)
        {
            ret = checkFailed("@SYS4004490");
        }

        if (!cutOffDate)
        {
            ret = checkFailed("@SYS4004487");
        }

        if (this.parmCallerMenuItem() == menuItemActionStr(PayrollPositivePayGenerate)
            && !DMFEntity::findFirstByTableId(tableNum(PayrollPositivePayExportEntity)))
        {
            ret = checkFailed("@Payroll:PayrollPositivePayEntityDoesNotExist");
        }
        else if (!DMFEntity::findFirstByTableId(tableNum(BankPositivePayExportEntity)))
        {
            ret = checkFailed("@CashManagement:PositivePayEntityDoesNotExist");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumberSequenceNotManual</Name>
				<Source><![CDATA[
    private boolean validateNumberSequenceNotManual(NumberSequenceReference _numberSequenceReference)
    {
        NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(_numberSequenceReference.NumberSequenceId);

        if (!numberSequenceTable)
        {
            return checkFailed(strFmt("@SYS53911", _numberSequenceReference.referenceLabel(), _numberSequenceReference.referenceModuleLabel()));
        }

        if (numberSequenceTable.Manual)
        {
            return checkFailed(strFmt("@SYS131762", _numberSequenceReference.referenceLabel()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePayrollPositivePayBankAccount</Name>
				<Source><![CDATA[
    private BankAccountTable retrievePayrollPositivePayBankAccount()
    {
        PayrollParameters payrollParameters;
        VendPaymModeTable vendPaymModeTable;
        DimensionAttributeValueCombination dimAttribututeValueCombination;
        BankAccountTable bankAccountTableLocal, bankAccountPayrollPositivePay;

        select firstonly PaymMode from payrollParameters;

        if (!payrollParameters.PaymMode)
        {
            checkFailed("@SYS4006064");
        }
        else
        {
            select BankPositivePayFormatName, AccountID from bankAccountTableLocal
                exists join dimAttribututeValueCombination
                    where bankAccountTableLocal.AccountID == dimAttribututeValueCombination.DisplayValue
                exists join vendPaymModeTable
                    where dimAttribututeValueCombination.RecId == vendPaymModeTable.PaymentLedgerDimension
                exists join payrollParameters
                    where vendPaymModeTable.PaymMode == payrollParameters.PaymMode;

            if (!bankAccountTableLocal.BankPositivePayFormatName)
            {
                checkFailed("@SYS4006065");
            }
            else
            {
                bankAccountPayrollPositivePay = bankAccountTableLocal;
            }
        }

        return bankAccountPayrollPositivePay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS4004527";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BankPositivePayExport bankPositivePayExport = new BankPositivePayExport();
        BankAccountTable bankAccountTable;
        
        boolean isPayroll = false;
		if (_args && _args.menuItemName() == menuitemActionStr(PayrollPositivePayGenerate))
        {
            isPayroll = true;
            bankAccountTable = bankPositivePayExport.retrievePayrollPositivePayBankAccount();
            bankPositivePayExport.parmCallerMenuItem(menuitemActionStr(PayrollPositivePayGenerate));
        }

		if (_args && _args.caller())
        {
            bankAccountTable = _args.record();             
        }

        if (!isPayroll || (isPayroll && bankAccountTable))
        {
            bankPositivePayExport.parmBankAccountTable(bankAccountTable);
			if (bankPositivePayExport.prompt())
			{           
				bankPositivePayExport.runOperation();
			}
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryForCallerMenuItem</Name>
				<Source><![CDATA[
    private Query initQueryForCallerMenuItem()
    {
        Query query;
        QueryBuildDataSource bankAccountTableQbds;

        if (this.parmCallerMenuItem() == menuItemActionStr(PayrollPositivePayGenerate))
        {
            queryRun = new SysQueryRun(queryStr(PayrollPositivePay));
            query = queryRun.query();

            bankAccountTableQbds = query.dataSourceTable(tableNum(BankAccountTable));
            bankAccountTableQbds.addRange(fieldnum(BankAccountTable, BankPositivePayFormatName)).value(
                queryValue(payFormat));
            bankAccountTableQbds.addRange(fieldnum(BankAccountTable, AccountID)).value(bankAccountId);
        }
        else
        {
            queryRun = new SysQueryRun(queryStr(BankPositivePay));
            query = queryRun.query();

            bankAccountTableQbds = query.dataSourceTable(tableNum(BankAccountTable));
            bankAccountTableQbds.addRange(fieldnum(BankAccountTable, BankPositivePayFormatName)).value(
                queryValue(payFormat));

            // Adding bank account range and company range only if single company is selected
            if (companySelection == AllSelected::Selected && dataAreaId)
            {
                QueryBuildDataSource companyInfoQbds = query.dataSourceTable(tableNum(CompanyInfo));
                companyInfoQbds.addRange(fieldnum(CompanyInfo, DataArea)).value(dataAreaId);

                if (bankSelection == AllSelected::Selected && bankAccountId)
                {
                    bankAccountTableQbds.addRange(fieldnum(BankAccountTable, AccountID)).value(bankAccountId);
                }
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPositivePayQuery</Name>
				<Source><![CDATA[
    protected void initPositivePayQuery()
    {
        Query query = this.initQueryForCallerMenuItem();
        QueryBuildDataSource bankCheckTableQbds = query.dataSourceTable(tableNum(BankChequeTable));

        QueryBuildRange chequeStatusRange = bankCheckTableQbds.addRange(fieldnum(BankChequeTable, ChequeStatus));
        chequeStatusRange.value(queryValue(ChequeStatus::Payment) + ',' +
            queryValue(ChequeStatus::Cancelled) + ',' +
            queryValue(ChequeStatus::Void) + ',' +
            queryValue(ChequeStatus::Rejected));

        QueryBuildDataSource bankAccountTableQbds = query.dataSourceTable(tableNum(BankAccountTable));
        QueryBuildRange transDateRange = bankCheckTableQbds.addRange(fieldnum(BankChequeTable, TransDate));
        transDateRange.value(strFmt('(%1.%2<=%3.%4) && (%3.%4<=%5)',
            bankAccountTableQbds.name(),
            fieldStr(BankAccountTable, BankPositivePayStartDate),
            bankCheckTableQbds.name(),
            fieldStr(BankChequeTable, TransDate),
            date2StrXpp(cutOffDate)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTransformationFile</Name>
				<Source><![CDATA[
    // Refactor: This code needs to move to the framework, but for now we are making a copy of the transformation file
    // so that the framework doesn't delete the file on BankPositivePayFormat when it has finished
    private SharedServiceUnitFileID copyTransformationFile(BankPositivePayFormat _positivePayFormat)
    {
        SharedServiceUnitFileID copiedFileId;

        DMFXSLTUploadResult originalFileUpload = DMFXSLTUploadResult::constructFromFileId(_positivePayFormat.FileId);

        DMFXSLTUploadStrategy copyUploadStrategy = new DMFXSLTUploadStrategy();
        DMFXSLTUploadResult copyUploadResult = copyUploadStrategy.uploadFile(originalFileUpload.openResult(), _positivePayFormat.FileName);

        if (copyUploadResult && copyUploadResult.getUploadStatus())
        {
            copiedFileId = copyUploadResult.getFileId();
        }

        return copiedFileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePositivePayFile</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates bank positive pay file export.
    /// </summary>
    /// <returns>
    ///     true if the bank positive pay file export was generated; otherwise, false.
    /// </returns>
    protected boolean generatePositivePayFile()
    {
        #DMF
        Query query;
        DMFEntityName entityName;
        boolean isGenerated = false;

        BankPositivePayFormat positivePayFormat = BankPositivePayFormat::findByFormatName(bankPositivePayTable.PayFormat);

        if (this.parmCallerMenuItem() == menuItemActionStr(PayrollPositivePayGenerate))
        {
            entityName = DMFEntity::findFirstByTableId(tableNum(PayrollPositivePayExportEntity)).EntityName;

            // Update query
            query = new Query(DMFUtil::getDefaultQueryForEntityV3(entityName));
            QueryBuildDataSource qbds = query.dataSourceTable(tableNum(PayrollPositivePayExportEntity));
            SysQuery::findOrCreateRange(qbds, fieldNum(PayrollPositivePayExportEntity, PositivePayNumber)).value(queryValue(bankPositivePayTable.PositivePayNum));

            if (positivePayFormat.UseGERConfiguration)
            {
                str outputFileName = this.generatePayrollPositivePayFileViaGER(positivePayFormat.ERFormatMappingID, query);
       
                if (outputFileName)
                {
                    isGenerated = true;
                }
            }
        }
        else
        {
            entityName = DMFEntity::findFirstByTableId(tableNum(BankPositivePayExportEntity)).EntityName;

            // Update query
            query = new Query(DMFUtil::getDefaultQueryForEntityV3(entityName));
            QueryBuildDataSource qbds = query.dataSourceTable(tableNum(BankPositivePayExportEntity));
            SysQuery::findOrCreateRange(qbds, fieldNum(BankPositivePayExportEntity, PositivePayNumber)).value(queryValue(bankPositivePayTable.PositivePayNum));

            if (positivePayFormat.UseGERConfiguration)
            {
                str outputFileName = this.generatePositivePayFileViaGER(positivePayFormat.ERFormatMappingID, query);
			    
                if (outputFileName)
                {
                    isGenerated = true;
                }
            }
        }

        if (!positivePayFormat.UseGERConfiguration)
        {
            // Export file
            DMFDefinitionGroupName definitionGroupName = strFmt('%1-%2', classStr(BankPositivePayExport), bankPositivePayTable.PositivePayNum);

            try
            {
                List xsltFileList = new List(Types::String);

                if (positivePayFormat.FileId != '')
                {
                    xsltFileList.addEnd(this.copyTransformationFile(positivePayFormat));
                }

                DMFEntityExporter exporter = new DMFEntityExporter();
                fileId = exporter.exportToFile(
                entityName,
                definitionGroupName,
                '',
                positivePayFormat.DMFSourceName,
                #FieldGroupName_AllFields,
                query.pack(),
                curExt(),
                xsltFileList,
                true,
                false);

                if (fileId != '')
                {
                    this.sendFileToDestination();
                    DMFDefinitionGroup::find(definitionGroupName, true).delete();

                    isGenerated = true;
                }
                else
                {
                    // DMF execution failed and details were written to the execution log
                    throw error("@CashManagement:DMFExportCallFailedToExecutionLog");
                }
            }
            catch
            {
                this.recallFailedPositivePayFile();
            }
        }


        return isGenerated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePositivePayFileViaGER</Name>
				<Source><![CDATA[
    [Replaceable]
    protected str generatePositivePayFileViaGER(ERFormatMappingId _eRFormatMappingId, Query _query)
    {
        ERIModelDefinitionParamsUIAction parameters = new ERModelDefinitionDatabaseContext().addQuery(tablenum(BankPositivePayExportEntity), _query);
       
        Filename filename = strFmt('%1-%2', bankPositivePayTable.PayFormat, bankPositivePayTable.PositivePayNum);
       
        str outputFileName = ERObjectsFactory::createFormatMappingRunByFormatMappingId(_eRFormatMappingId, filename)
                .withParameter(parameters)
                .run();

        return outputFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePayrollPositivePayFileViaGER</Name>
				<Source><![CDATA[
    [Replaceable]
    protected str generatePayrollPositivePayFileViaGER(ERFormatMappingId _eRFormatMappingId, Query _query)
    {
        ERIModelDefinitionParamsUIAction parameters = new ERModelDefinitionDatabaseContext().addQuery(tablenum(PayrollPositivePayExportEntity), _query);
       
        Filename filename = strFmt('%1-%2', bankPositivePayTable.PayFormat, bankPositivePayTable.PositivePayNum);
       
        str outputFileName = ERObjectsFactory::createFormatMappingRunByFormatMappingId(_eRFormatMappingId, filename)
                .withParameter(parameters)
                .run();

        return outputFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendFileToDestination</Name>
				<Source><![CDATA[
	/// <summary>
    ///		Send file to destination. 
    /// </summary>
    [Replaceable]
    protected void sendFileToDestination()
    {
        str downloadUrl = DMFDataPopulation::getAzureBlobReadUrl(str2Guid(fileId));
        Filename filename = strFmt('%1-%2%3', bankPositivePayTable.PayFormat, bankPositivePayTable.PositivePayNum, this.getFileExtensionFromURL(downloadUrl));
        System.IO.Stream stream = File::UseFileFromURL(downloadUrl);
        File::SendFileToUser(stream, filename);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileExtensionFromURL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the file extension from URL.
    /// </summary>
    /// <param name = "_sourcefile">
    ///     Source file URL.
    /// </param>
    /// <returns>
    ///     File extension from the URL.
    /// </returns>
    protected str getFileExtensionFromURL(SharedServiceUnitURL _sourcefile)
    {
        System.Uri uri = new System.Uri(_sourcefile);

        str fileExt;

        if (uri != null)
        {
            fileExt = System.IO.Path::GetExtension(uri.LocalPath);
        }

        return fileExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recallFailedPositivePayFile</Name>
				<Source><![CDATA[
    private void recallFailedPositivePayFile()
    {
        Args recallArgs = new Args();
        recallArgs.record(bankPositivePayTable);

        BankPositivePayFileRecall::main(recallArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankPositivePayExport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>BankPositivePayTable</c> table buffer.
    /// </summary>
    /// <returns>
    ///     The <c>BankPositivePayTable</c> table buffer.
    /// </returns>
    protected BankPositivePayTable getBankPositivePayExport()
    {
        return bankPositivePayTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>