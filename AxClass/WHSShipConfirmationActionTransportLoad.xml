<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConfirmationActionTransportLoad</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipConfirmationActionTransportLoad</c> class is used for shipment confirmation of transport load.
/// </summary>
[SysTableNameFactory(tableStr(WHSTransportLoad))]
public class WHSShipConfirmationActionTransportLoad extends WHSShipConfirmationAction
{
    protected WHSTransportLoad transportLoad;

    private WHSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>WHSTransportLoad</c> table.
    /// </summary>
    /// <param name = "_common">
    /// <c>Common</c> buffer used for this instance of the <c>WHSTransportLoad</c> table.
    /// </param>
    public void initFromBuffer(Common _common)
    {
        transportLoad = _common as WHSTransportLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableShipConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if ship confirm button should be enabled.
    /// </summary>
    /// <returns>
    /// true if ship confirm button should be enabled; otherwise, false
    /// </returns>
    public boolean canEnableShipConfirm()
    {
        return transportLoad.TransportLoadId
            && transportLoad.TransportLoadStatus != WHSTransportLoadStatus::Shipped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShipConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a transport load can be ship confirmed.
    /// </summary>
    /// <returns>
    /// true if a transport load can be ship confirmed; otherwise, false
    /// </returns>
    public boolean canShipConfirm()
    {
        if (!this.validateCustomerIsNotOnHold())
        {
            return false;
        }

        if (this.isTransportLoadShipped())
        {
            return checkFailed(strFmt("@WAX:ShipmentCouldNotBeConfirmedIfTransportLoadIsInShippedStatus", transportLoad.TransportLoadId));
        }

        if (!this.isWorkComplete())
        {
            return checkFailed(strFmt("@WAX:ShipmentCouldNotBeConfirmedIfAllWorkAreNotCompletedForTransportLoad", transportLoad.TransportLoadId));
        }

        if (!WHSShipConfirmationBatchValidator::newFromBuffer(transportLoad).isAnyBatchDispositionCodeBlockingShipping())
        {
            return checkFailed(strFmt("@WAX:ShipmentCouldNotBeConfirmedIfTransportLoadHasABatchBlockedForShipping", transportLoad.TransportLoadId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomerIsNotOnHoldUsingShipment</Name>
				<Source><![CDATA[
    public boolean checkCustomerIsNotOnHoldUsingShipment()
    {
        WHSTransportLoadLoadedWork transportLoadLoadedWork;
        WHSWorkLine workLine;

        boolean ret = true;
        Set salesIds = new Set(Types::String);
        WHSLoadLine loadLine;

        while select OrderNum, ShipmentId from workLine
            group by OrderNum, ShipmentId
        exists join transportLoadLoadedWork
            where transportLoadLoadedWork.WorkId == workLine.WorkId
               && transportLoadLoadedWork.TransportLoad == transportLoad.RecId
        exists join loadLine
            where loadLine.RecId == workLine.LoadLineRefRecId
               && loadLine.InventTransType == InventTransType::Sales
               && loadLine.TransportRequest == NoYes::No
        {
            if (workLine.OrderNum && !salesIds.in(workLine.OrderNum))
            {
                salesIds.add(workLine.OrderNum);

                SalesTable salesTable = SalesTable::find(workLine.OrderNum);

                if (!salesTable.canCustomerBeUpdated(DocumentStatus::PickingList))
                {
                    ret = checkFailed(strFmt("@WAX:CustomerOnHoldShipmentCannotBeConfirmed", workLine.ShipmentId, CustTable::blocked(salesTable.CustAccount)));
                }
            }
        }
         
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustomerIsNotOnHold</Name>
				<Source><![CDATA[
    private boolean validateCustomerIsNotOnHold()
    {
        boolean ret = true;

        if (!this.checkCustomerIsNotOnHoldUsingShipment())
        {
            ret = false;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransportLoadShipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the transport load is already shipped.
    /// </summary>
    /// <returns>
    /// true if the transport load is already shipped; otherwise, false
    /// </returns>
    private boolean isTransportLoadShipped()
    {
        return transportLoad.TransportLoadId
            && transportLoad.TransportLoadStatus == WHSTransportLoadStatus::Shipped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all work for the transport load is complete.
    /// </summary>
    /// <returns>
    /// true if all work for the transport load is complete; otherwise, false
    /// </returns>
    protected boolean isWorkComplete()
    {
        WHSWorkTable                workTable;
        WHSTransportLoadLoadedWork  transportLoadLoadedWork;
        boolean                     ret;

        if (transportLoad)
        {
            select firstonly RecId from workTable
                where workTable.WorkStatus < WHSWorkStatus::Closed
                exists join transportLoadLoadedWork
                    where transportLoadLoadedWork.WorkId            == workTable.WorkId
                        && transportLoadLoadedWork.TransportLoad    == transportLoad.RecId;

            ret = workTable.RecId == 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTransferShip</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the required <c>InventTransferParmTable</c> records related to the shipment of the Transfer Order,
    ///     the required <c>WHSASNItem</c> and <c>WHSUOMStructure</c> records.
    /// </summary>
    /// <param name="_shipDateConfirmed">
    ///     The confirmed ship date.
    /// </param>
    /// <param name="_overrideSplitTrans">
    ///     true if the parameter to split transfer ship should be ignored; otherwise, false
    /// </param>
    public void runTransferShip(
        TMSApptUTCDateTime _shipDateConfirmed   = DateTimeUtil::getSystemDateTime(),
        boolean            _overrideSplitTrans  = false)
    {
        // Only update transfer order if process is not split.
        if (this.canShipUpdateTransferOrder(_overrideSplitTrans))
        {
            ttsbegin;

            WHSTransportLoadLoadedWork  transportLoadLoadedWork;
            Set                         loadOrderNumber = new Set(Types::String);

            while select WorkId from transportLoadLoadedWork
                where transportLoadLoadedWork.TransportLoad == transportLoad.RecId
            {
                WHSWorkLineLoadLineDetailsEnumerator enumerator = WHSWorkTable::find(transportLoadLoadedWork.WorkId).getEnumerator();

                while (enumerator.moveNext())
                {
                    WHSLoadLine loadLine = enumerator.currentLoadLine();
                    
                    if (loadLine.InventTransType == InventTransType::TransferOrderShip && loadLine.TransportRequest == NoYes::No && enumerator.currentInventQtyWork() > 0)
                    {
                        loadOrderNumber.add(loadLine.OrderNum);                        
                    }
                }
            }

            this.instrumentationLogger().shipConfirmActivities().numberOfLoadLines(loadOrderNumber.elements(), funcName());

            SetEnumerator se = loadOrderNumber.getEnumerator();

            while (se.moveNext())
            {
                var orderNumber = se.current(); 

                InventTransferMultiShip inventTransferMultiShip = this.createInventTransferMultiShip();
                InventTransferParmTable inventTransferParmTable = this.createTransferOrderShipmentParmTable(orderNumber, inventTransferMultiShip, _shipDateConfirmed);
                this.createInventTransferParmLine(inventTransferParmTable);
                this.runInventTransferMultiShip(inventTransferMultiShip);
            }

            WHSUOMStructureCreator::newFromBuffer(transportLoad).createUOMStructure();

            if (WHSParameters::canUsePackFunctionality())
            {
                // Build the UOM Structure from containers that were packed for the load.
                this.createContainerUOM(WHSModule::Transfer);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipConfirmInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional transport load, load lines, load and shipments fields during ship confirm process.
    /// </summary>
    /// <param name="_loadShipDate">
    /// The shipping date for the load.
    /// </param>
    public void setShipConfirmInfo(WHSShipConfirmUTCDateTime _loadShipDate = DateTimeUtil::getSystemDateTime())
    {
        this.setTransportLoadShipConfirmInfo(_loadShipDate);
        this.setLoadShipConfirmInfo(_loadShipDate);
        this.registerCatchWeightTagShippedStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCatchWeightTagShippedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the shipment status for the catch weight tags.
    /// </summary>
    private void registerCatchWeightTagShippedStatus()
    {
        if (WHSCatchWeightTagCache::construct().isCatchWeightTagFeatureUsed())
        {
            RecordSortedList list = WHSTransportLoad::getAllRelatedLoads(transportLoad);
            WHSLoadTable loadTable;

            boolean hasRecord = list.first(loadTable);
            
            while (hasRecord)
            {
                WHSLoadLine locLoadLine;

                // Since we have the partial load shipping option, select only the load lines which has been picked completely.
                while select locLoadLine
                    where  locLoadLine.LoadId == loadTable.LoadId
                        && locLoadLine.PickedQty >= locLoadLine.InventQty
                {
                    WHSCatchWeightTagLastRegistration::registerShippedStatus(locLoadLine);
                }

                hasRecord = list.next(loadTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipmentsShipConfirmInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the shipment fields during the ship confirm process.
    /// </summary>
    /// <param name="_loadId">
    /// The load ID.
    /// </param>
    /// <param name="_shipConfirmUTCDateTime">
    /// Date and time for ship confirming the load.
    /// </param>
    private void setShipmentsShipConfirmInfo(WHSLoadId _loadId, WHSShipConfirmUTCDateTime _shipConfirmUTCDateTime)
    {
        WHSShipmentTable    shipmentTable;
        WHSLoadLine         loadLine;

        while select forupdate shipmentTable
            where shipmentTable.LoadId == _loadId
            exists join loadLine
                where loadLine.ShipmentId == shipmentTable.ShipmentId
        {
            this.updateShipment(shipmentTable, _shipConfirmUTCDateTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the shipment fields during the ship confirm process.
    /// </summary>
    /// <param name = "_shipmentTable">
    /// <c>WHSShipmentTable</c> record to be updated.
    /// </param>
    /// <param name = "_shipConfirmUTCDateTime">
    /// Date and time for ship confirming the load.
    /// </param>
    private void updateShipment(WHSShipmentTable _shipmentTable, WHSShipConfirmUTCDateTime _shipConfirmUTCDateTime)
    {
        _shipmentTable.ShipmentStatus            = WHSShipmentStatus::Shipped;
        _shipmentTable.ShipConfirmUTCDateTime    = _shipConfirmUTCDateTime;
        _shipmentTable.DropOffUTCDateTime        = DateTimeUtil::newDateTime(_shipmentTable.displayDropOffDate(),
                                                                            DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),
                                                                             _shipmentTable.timeZoneSite());
        _shipmentTable.scac                      = TMSCarrier::find(_shipmentTable.CarrierCode).scac;
        _shipmentTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLoadShipConfirmInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional load fields during the ship confirm process.
    /// </summary>
    /// <param name="_loadShipConfirmUTCDateTime">
    /// Date and time for ship confirming the load.
    /// </param>
    private void setLoadShipConfirmInfo(WHSLoadShipConfirmUTCDateTime _loadShipConfirmUTCDateTime)
    {
        WHSLoadTable        loadTable;
        RecordSortedList    list = WHSTransportLoad::getAllRelatedLoads(transportLoad);

        boolean hasRecord = list.first(loadTable);

        while (hasRecord)
        {
            ttsbegin;

            WHSLoadTable loadTableLoc;

            // The load can be updated by multiple transport loads so we need to synchronize.
            loadTableLoc = this.findLoadWithPessimisticLock(loadTable.LoadId);

            boolean canUpdateLoadStatusToShipped = this.areAllLoadLinesShipped(loadTableLoc.LoadId);

            if (canUpdateLoadStatusToShipped)
            {
                loadTableLoc.LoadStatus                    = WHSLoadStatus::Shipped;
                loadTableLoc.LoadShipConfirmUTCDateTime    = _loadShipConfirmUTCDateTime;
                loadTableLoc.update();

                this.setLoadLinesShipConfirmInfo(loadTableLoc.LoadId, _loadShipConfirmUTCDateTime);
                this.setShipmentsShipConfirmInfo(loadTableLoc.LoadId, _loadShipConfirmUTCDateTime);
            }
            else if (loadTableLoc.LoadStatus != WHSLoadStatus::PartiallyShipped)
            {
                loadTableLoc.LoadStatus = WHSLoadStatus::PartiallyShipped;
                loadTableLoc.update();
            }

            ttscommit;

            hasRecord = list.next(loadTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLoadWithPessimisticLock</Name>
				<Source><![CDATA[
    private WHSLoadTable findLoadWithPessimisticLock(WHSLoadId _loadId)
    {
        WHSLoadTable loadTable;

        select firstOnly pessimisticLock loadTable
            where loadTable.loadId == _loadId;

        return loadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areAllLoadLinesShipped</Name>
				<Source><![CDATA[
    private boolean areAllLoadLinesShipped(WHSLoadId _loadId)
    {
        WHSTransportLoadLoadedWork  transportLoadLoadedWork;
        WHSTransportLoad            transportLoadLoc;
        WHSWorkTable                workTable;

       select firstOnly RecId from workTable
            where workTable.LoadId == _loadId
            exists join transportLoadLoadedWork
                where transportLoadLoadedWork.WorkId == workTable.WorkId
                join RecId from transportLoadLoc
                    where transportLoadLoc.RecId                == transportLoadLoadedWork.TransportLoad
                        && transportLoadLoc.TransportLoadStatus != WHSTransportLoadStatus::Shipped;

       if (!workTable.RecId)
       {
           WHSLoadLine loadLine;

           select sum(InventQty), sum(PickedQty) from loadLine
               where loadLine.LoadId == _loadId;

           // To ensure the load line quantity is fully picked.
           return loadLine.PickedQty >= loadLine.InventQty;
       }

       return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransportLoadShipConfirmInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional load fields during ship confirm process.
    /// </summary>
    /// <param name="_loadShipConfirmUTCDateTime">
    /// Date and time for ship confirming the load
    /// </param>
    private void setTransportLoadShipConfirmInfo(WHSLoadShipConfirmUTCDateTime _loadShipConfirmUTCDateTime)
    {
        ttsbegin;

        transportLoad.selectForUpdate(true);
        transportLoad.TransportLoadStatus					= WHSTransportLoadStatus::Shipped;
        transportLoad.TransportLoadShipConfirmUTCDateTime   = _loadShipConfirmUTCDateTime;
        transportLoad.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLoadLinesShipConfirmInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional load lines fields during the ship confirm process.
    /// </summary>
    /// <param name="_loadClosedUTCDateTime">
    /// Date and time for closing the load.
    /// </param>
    private void setLoadLinesShipConfirmInfo(
        WHSLoadId                   _loadId, 
        WHSLoadClosedUTCDateTime    _loadClosedUTCDateTime)
    {
        WHSLoadLine loadLine;

        update_recordset loadLine 
            setting LoadClosedUTCDateTime = _loadClosedUTCDateTime  
            where loadLine.LoadId == _loadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the ship confirm process for a transport load.
    /// </summary>
    /// <param name="_shipDateTime">
    /// Actual ship date time of the transport load.
    /// </param>
    public void shipConfirm(WHSLoadShipConfirmUTCDateTime _shipDateTime = DateTimeUtil::getSystemDateTime())
    {
        using (var activityContext = this.instrumentationLogger().shipConfirmActivities().transportLoadShipConfirm())
        {
            ttsbegin;

            if (this.canShipConfirm())
            {
                this.runTransferShip(_shipDateTime);
                this.setShipConfirmInfo(_shipDateTime);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransferParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to create <c>InventTransferParmLine</c> records.
    /// </summary>
    /// <param name = "_inventTransferParmTable">
    /// A buffer of <c>InventTransferParmTable</c> used for creating <c>InventTransferParmLine</c> records.
    /// </param>
    protected void createInventTransferParmLine(InventTransferParmTable _inventTransferParmTable)
    {
        // If the transfer order is by a load where there is a one-one between load lines and transfer lines then 
        // we can use a simpler approach to create the parm lines since everything on the transfer will be shipped.
        // This will lead to a better performance when the update is done.
        if (this.isTransferOrderShippedBySimpleLoad(_inventTransferParmTable.TransferId))
        {
            this.createParmLinesFromTransferLinesShippedBySimpleLoad(_inventTransferParmTable);
        }
        else
        {
            WHSLoadLine                 loadLine;
            WHSWorkLine                 workLine;
            WHSWorkLine                 putWorkLine;
            WHSWorkTable                workTable;
            InventTransferLine          inventTransferLine;
            LineNum                     lineNum;
            WMSLocation                 wmslocation;
            WHSLocationProfile          locationProfile;
            WHSTransportLoadLoadedWork  transportLoadLoadedWork;
            WHSLocType                  finalShiplocType = WHSParameters::find().ShipFinalLocType;

            // Find the initial pick lines that were on work for a transport load.
            while select workLine
                where workLine.WorkStatus       != WHSWorkStatus::Cancelled
                    && workLine.WorkStatus      != WHSWorkStatus::Combined
                    && workLine.InventQtyWork   >  0
                join RecId from loadLine
                    where loadLine.OrderNum             == _inventTransferParmTable.TransferId
                        && loadLine.InventTransType     == InventTransType::TransferOrderShip
                        && loadLine.TransportRequest    == NoYes::No
                        && loadLine.RecId               == workLine.LoadLineRefRecId
                    join inventTransferLine
                        where inventTransferLine.InventTransId == workLine.InventTransId
                        join workTable
                            where workTable.WorkId          == workLine.WorkId
                                && workTable.WorkStatus     != WHSWorkStatus::Combined
                                && workTable.WorkStatus     != WHSWorkStatus::Cancelled
                            join TableId from transportLoadLoadedWork
                                where transportLoadLoadedWork.WorkId            == workTable.WorkId
                                    && transportLoadLoadedWork.TransportLoad    == transportLoad.RecId
                                join WorkId, LineNum, WorkType, wmsLocationId from putWorkLine
                                order by putWorkLine.LineNum desc
                                    where putWorkLine.WorkId        == workTable.WorkId
                                        && putWorkLine.WorkType     == WHSWorkType::Put
                                        && putWorkLine.WorkStatus   !=  WHSWorkStatus::Cancelled
                                        && putWorkLine.WorkStatus   !=  WHSWorkStatus::Combined
                                    join WMSLocationId from wmslocation
                                        where wmslocation.wMSLocationId     == putWorkLine.WMSLocationId
                                            && wmslocation.inventLocationId == workTable.InventLocationId
                                        join LocType from locationProfile
                                            where locationProfile.LocProfileId == wmslocation.locProfileId
            {
                // If there is a pick after this put (staging) then skip.
                if (WHSWorkLine::getNextOppositeWorkLine(putWorkLine.WorkId, putWorkLine.LineNum, putWorkLine.WorkType))
                {
                    continue;
                }

                WHSLicensePlateId   targetLicensePlateId;
                WMSlocationId       putWMSLocationId;
                boolean             shipWorkLine;

                if (locationProfile.LocType == finalShiplocType)
                {
                    shipWorkLine            = true;
                    targetLicensePlateId    = workTable.TargetLicensePlateId;
                    putWMSLocationId        = putWorkLine.WMSLocationId;
                }
                // A work that was consolidated is completed on a different location than the final shipping location so it needs to be included.
                else if (workTable.isOriginForConsolidatedWork())
                {
                    WHSWorkLine     lastConsolidatedLine    = WHSConsolidatedWorkLine::findLastConsolidatedWorkLineByOriginWorkLine(
                                                                WHSConsolidatedWorkLine::findOriginWorkLineWithinWork(workLine));
                    WHSWorkTable    consolidatedWork        = WHSWorkTable::find(lastConsolidatedLine.WorkId);
                    WHSWorkLine     lastClosedPutLine       = WHSWorkTable::getLastClosedPutWorkLine(consolidatedWork.WorkId);
                    WMSLocation     putLocation             = WMSLocation::find(lastClosedPutLine.WMSLocationId, consolidatedWork.InventLocationId);

                    if (WHSLocationProfile::find(putLocation.LocProfileId).LocType == finalShiplocType)
                    {
                        shipWorkLine            = true;
                        targetLicensePlateId    = consolidatedWork.TargetLicensePlateId;
                        putWMSLocationId        = putLocation.WMSLocationId;
                    }
                }

                if (shipWorkLine)
                {
                    ++lineNum;
                    this.createInventTransParmLine(_inventTransferParmTable, inventTransferLine, workLine, targetLicensePlateId, putWMSLocationId, lineNum);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContainerUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates UOM Structures for outbound shipments from containers.
    /// </summary>
    /// <param name="_module">
    /// The <c>WHSModule</c> module used for building the UOM.
    /// </param>
    protected void createContainerUOM(WHSModule _module)
    {
        WHSWorkLine                         workLine;
        WHSContainerLine                    containerLine;
        WHSContainerTable                   containerTable;
        WHSContainerId                      prevContainer;
        WHSTransportLoadLoadedWork          transportLoadLoadedWork;
        EcoResReleasedProductUnitConverter  releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        // Build the UOM Structure from containers that were packed for the load.
        while select RecId from workLine
            where workLine.LoadLineRefRecId != 0
            join TableId from transportLoadLoadedWork
                where transportLoadLoadedWork.WorkId            == workLine.WorkId
                    && transportLoadLoadedWork.TransportLoad    == transportLoad.RecId
                join ItemId, Qty, UnitId, ShipmentId, InventDimId from containerLine
                    where containerLine.LoadLine == workLine.LoadLineRefRecId
                    join ContainerId from containerTable
                    order by containerTable.ContainerId
                        where containerTable.ContainerId        == containerLine.ContainerId
                            && containerTable.ContainerBuildId  == ''
        {
            WHSUOMStructure     structure   = WHSUOMStructure::find(containerTable.ContainerId, _module, containerLine.ShipmentId, true);
            UnitOfMeasureSymbol unitId      = WHSCatchWeightHelper::inventHandlingUnitId(containerLine.ItemId);
            ProductQuantity     productQty  = releasedProductUnitConverter.convertGivenUnitSymbols(containerLine.Qty,
                                                                                                   containerLine.UnitId,
                                                                                                   unitId,
                                                                                                   NoYes::Yes,
                                                                                                   containerLine.ItemId,
                                                                                                   containerLine.InventDimId,
                                                                                                   NoYes::Yes);

            if (!structure)
            {
                structure.LicensePlateId    = containerTable.ContainerId;
                structure.ItemId            = containerLine.ItemId;
                structure.Qty               = productQty;
                structure.UOMItem           = unitId;
                structure.Module            = _module;
                structure.ShipmentId        = containerLine.ShipmentId;
                structure.insert();
            }
            else
            {
                if (structure.ItemId != containerLine.ItemId)
                {
                    structure.ItemId    = '';
                    structure.uomItem   = '';
                }

                structure.Qty += productQty;
                structure.write();
            }

            // Only create ASNs once per container ID.
            if (prevContainer != containerTable.ContainerId)
            {
                prevContainer = containerTable.ContainerId;
                this.createContainerASN(containerTable.ContainerId, _module);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>