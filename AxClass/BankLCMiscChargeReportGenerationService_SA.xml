<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCMiscChargeReportGenerationService_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The controller of <c>BankLCMiscChargeReport_SA</c> report
/// </summary>
class BankLCMiscChargeReportGenerationService_SA extends SysOperationServiceBase
{
    static str bankLCMiscChargeReportFileName    = 'BankLCMiscChargeReport_SA';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates query for report.
    /// </summary>
    /// <param name = "_bankLCNumber">the bankCLNumber</param>
    /// <param name = "_bankAccount">the BankAccount</param>
    /// <returns>returns query for generate report</returns>
    protected Query generateQuery(BankLCNumber _bankLCNumber, CompanyBankAccountId _bankAccount)
    {
        Query                    query;
        QueryBuildDataSource     dsLCImport, dsDocumentView;
        QueryBuildRange          queryBuildRange;
        BankLCImport             bankLCImport;
        BankDocumentFacilityView bankDocumentFacilityView;

        query          = new Query();
        dsLCImport     = query.addDataSource(tableNum(BankLCImport));
        dsDocumentView = dsLCImport.addDataSource(tableNum(BankDocumentFacilityView));
        if (_bankLCNumber)
        {
            queryBuildRange = dsLCImport.addRange(fieldNum(BankLCImport, BankLCNumber));
            queryBuildRange.value(_bankLCNumber);
        }
        if (_bankAccount)
        {
            queryBuildRange = dsDocumentView.addRange(fieldNum(BankDocumentFacilityView, BankAccountTable));
            queryBuildRange.value(_bankAccount);
        }
        dsLCImport.joinMode(JoinMode::ExistsJoin);
        dsDocumentView.addLink(fieldNum(BankLCImport,BankDocumentFacilityAgreementLine),
            fieldNum(BankDocumentFacilityView,BankDocumentFacilityAgreementLine));
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBankLCReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs full process of <c>BankLCMiscCharge_SA</c> report
    /// </summary>
    /// <param name = "_contract">
    /// The contract Instance
    /// </param>
    public void generateBankLCReport(BankLCMiscChargeReportContract_SA _contract)
    {
        CompanyBankAccountId bankAccount  = _contract.parmCompanyBankAccountId();
        BankLCNumber         bankLCNumber = _contract.parmBankLCNumber();
        Query                query        = this.generateQuery(bankLCNumber,bankAccount);
        str ext=curExt();

        ERIModelDefinitionParamsAction parameters = new ERModelDefinitionParamsUIActionComposite()
            .add(
                new ERModelDefinitionDatabaseContext()
                    .addQuery(tableNum(BankLCImport),query))
            .add(
                new ERModelDefinitionDatabaseContext()
                    .addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curext()));

        ERObjectsFactory::createFormatMappingRunByFormatMappingId(_contract.parmFormatMapping(), bankLCMiscChargeReportFileName)
            .withParameter(parameters)
            .withFileDestination(_contract.getFileDestination())
            .run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>