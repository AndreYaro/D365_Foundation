<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostIntegrationJournalBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjPostIntegrationJournalBatch</c> class post all draft(default) or selected ProjOps integration journals, triggered from <c>ProjPostIntegrationJournalBatch</c> periodic job.
/// </summary>
[SysOperationJournaledParameters(true)]
public class ProjPostIntegrationJournalBatch extends RunBaseBatch
{
    private container projAdvancedJournalList;
    protected QueryRun queryRun;
    ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(classStr(ProjPostIntegrationJournalBatch));
    private boolean enableAdvancedJournalLineMultipleBatchTaskFeature = FeatureStateProvider::isFeatureEnabled(ProjEnableAdvancedJournalMultipleBatchTaskFeature::instance());
    private boolean isEnhancedPostingEnabled = FeatureStateProvider::isFeatureEnabled(ProjAdvancedJournalPostingEnhancementFeature::instance());

    private Integer version;

    #define.CurrentVersion(2)
    #define.Version1(1)
    #LOCALMACRO.CurrentList
        projAdvancedJournalList
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (queryRun == null)
        {
            this.initQuery();
        }

        container ret = [#CurrentVersion, #CurrentList, queryRun.pack()];

        switch (version)
        {
            case #CurrentVersion:
                ret = [#CurrentVersion, #CurrentList, queryRun.pack()];
                break;
            case #Version1:
                // Need to upgrade to new version to use queryRun
                ret = [#CurrentVersion, #CurrentList, queryRun.pack()];
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        version = RunBase::getVersion(_packedClass);
        container packedQueryRun;
        boolean ret = false;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQueryRun] = _packedClass;
                queryRun = new QueryRun(packedQueryRun);

                ret = true;
                break;
            case #Version1 :
                [version, #CurrentList] = _packedClass;

                // Need to upgrade to new version to use queryRun
                this.initQuery();

                ret = true;
                break;
            default :
                break;
        }

        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
 
        this.initQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected void initQuery()
    {
        Query query = new Query(queryStr(ProjAdvancedJournalDraftJournals));

        queryrun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        if (FeatureStateProvider::isFeatureEnabled(ProAdvancedJournalPostingFilterFeature::instance()))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suppresses the retrieving of the last values.
    /// </summary>
    /// <remarks>
    /// This class must always run with the currently passed values. Therefore, no last values are
    /// retrieved from the <see cref="T:SysLastValue" /> table.
    /// </remarks>
    public void getLast()
    {
        // This is a RunBaseBatch derivative class. Manually restore the user's settings on the batch tab since
        // super() is not being called.
        xSysLastValue::getLast(this.batchInfo());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAdvancedJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post project integration journal.
    /// </summary>
    /// <param name = "_journal"><c>ProjAdvancedJournal</c> object.</param>
    private void postAdvancedJournal(ProjAdvancedJournal _journal)
    {
        if (_journal)
        {
            try
            {
                ProjAdvancedJournalPost projAdvancedJournalPost = ProjAdvancedJournalPost::construct(_journal);
                if (this.isInBatch() && this.enableAdvancedJournalLineMultipleBatchTaskFeature)
                {
                    projAdvancedJournalPost.postAdvancedJournalInBatch(_journal);
                }
                else
                {
                    projAdvancedJournalPost.runOperation();
                }
            }
            catch (Exception::Error)
            {
                logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), _journal.ProjAdvancedJournalId, _journal.numOfLines(), Exception::Error, 0));
                Global::exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {   
        int journalListLength = conLen(projAdvancedJournalList);

        if (journalListLength > 0)
        {
            this.postingProcessForSelectedJournals();
        }
        else
        {
            this.postAllJournals();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProcessForSelectedJournals</Name>
				<Source><![CDATA[
    private void postingProcessForSelectedJournals()
    {
        ProjAdvancedJournal journal; 
        int journalListLength = conLen(projAdvancedJournalList);

        using (SysInstrumentationActivityContext activityContext = logger.integrationJournalActivity().postMarkedContext())
        {
            if (isEnhancedPostingEnabled)
            {
                activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::JournalListLength, int2Str(journalListLength));

                if (this.enableAdvancedJournalLineMultipleBatchTaskFeature && this.isInBatch())
                {
                    activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, ProjOpsIntegrationJournalInstrumentationActivites::PostingUsingMultipleBatchTasks);

                    ProjAdvancedJournalPostingMultiTaskHelper::postAdvancedJournalsUsingMultiTask(projAdvancedJournalList);
                }
                else
                {
                    activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, ProjOpsIntegrationJournalInstrumentationActivites::PostingWithoutMultipleBatchTasks);

                    for (int recordIndex = 1; recordIndex <= journalListLength; recordIndex++)
                    {
                        ProjAdvancedJournalRecId projAdvancedJournalRecId = conPeek(projAdvancedJournalList, recordIndex);
                        journal = ProjAdvancedJournal::find(projAdvancedJournalRecId);
                        ProjAdvancedJournalPost projAdvancedJournalPost = ProjAdvancedJournalPost::construct(journal);

                        try
                        {
                            projAdvancedJournalPost.runOperation();
                        }
                        catch (Exception::Error)
                        {
                            logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), journal.RecId, journal.numOfLines(), Exception::Error, xSession::currentRetryCount()));
                        }
                    }
                }
            }
            else
            {
                if (this.isInBatch() && this.enableAdvancedJournalLineMultipleBatchTaskFeature)
                {
                    activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, ProjOpsIntegrationJournalInstrumentationActivites::PostingUsingMultipleBatchTasks);
                }
                else
                {
                    activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, ProjOpsIntegrationJournalInstrumentationActivites::PostingWithoutMultipleBatchTasks);
                }

                for (int recordIndex = 1; recordIndex <= journalListLength; recordIndex++)
                {
                    ProjAdvancedJournalRecId projAdvancedJournalRecId = conPeek(projAdvancedJournalList, recordIndex);
                    journal = ProjAdvancedJournal::find(projAdvancedJournalRecId);
                    
                    logger.logInformation(strFmt(ProjOpsIntegrationJournalInstrumentationActivites::PostAdvancedJournalInfoMessage, journal.RecId));
                    
                    this.postAdvancedJournal(journal);
                }
                activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::JournalListLength, int2Str(journalListLength));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAllJournals</Name>
				<Source><![CDATA[
    private void postAllJournals()
    {
        ProjAdvancedJournal journal;
        int journalListLength;

        using (var activityContext = logger.integrationJournalActivity().postAllDraftContext())
        {
            if (isEnhancedPostingEnabled)
            {
                if (this.enableAdvancedJournalLineMultipleBatchTaskFeature && this.isInBatch())
                {
                    activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, ProjOpsIntegrationJournalInstrumentationActivites::PostingUsingMultipleBatchTasks);
                    while (queryRun.next())
                    {
                        journal = queryRun.get(tableNum(ProjAdvancedJournal));
                        journalListLength++;
                        projAdvancedJournalList += journal.RecId;
                        logger.logInformation(strFmt(ProjOpsIntegrationJournalInstrumentationActivites::PostAdvancedJournalInfoMessage, journal.RecId));
                    }

                    activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::JournalListLength, int2Str(journalListLength));
                    ProjAdvancedJournalPostingMultiTaskHelper::postAdvancedJournalsUsingMultiTask(projAdvancedJournalList);
                }
                else
                {
                    activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, ProjOpsIntegrationJournalInstrumentationActivites::PostingWithoutMultipleBatchTasks);
                    while (queryRun.next())
                    {
                        journal = queryRun.get(tableNum(ProjAdvancedJournal));

                        journalListLength++;
                        logger.logInformation(strFmt(ProjOpsIntegrationJournalInstrumentationActivites::PostAdvancedJournalInfoMessage, journal.RecId));
                            
                        ProjAdvancedJournalPost projAdvancedJournalPost = ProjAdvancedJournalPost::construct(journal);
                        try
                        {
                            projAdvancedJournalPost.runOperation();
                        }
                        catch (Exception::Error)
                        {
                            logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), journal.RecId, journal.numOfLines(), Exception::Error, xSession::currentRetryCount()));
                        }
                    }

                    activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::JournalListLength, int2Str(journalListLength));
                }
            }
            else
            {
                if (this.isInBatch() && this.enableAdvancedJournalLineMultipleBatchTaskFeature)
                {
                    activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, ProjOpsIntegrationJournalInstrumentationActivites::PostingUsingMultipleBatchTasks);
                }
                else
                {
                    activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, ProjOpsIntegrationJournalInstrumentationActivites::PostingWithoutMultipleBatchTasks);
                }

                while (queryRun.next())
                {
                    journal = queryRun.get(tableNum(ProjAdvancedJournal));

                    journalListLength++;

                    logger.logInformation(strFmt(ProjOpsIntegrationJournalInstrumentationActivites::PostAdvancedJournalInfoMessage, journal.ProjAdvancedJournalId));

                    this.postAdvancedJournal(journal);
                }
                activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::JournalListLength, int2Str(journalListLength));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjAdvancedJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies which journals will be posted.
    /// </summary>
    /// <param name = "_journalList">The container of ProjOps integration journal list.</param>
    /// <returns>Returns the ProjOps integration journal list.</returns>
    public container parmProjAdvancedJournalList(container _journalList = projAdvancedJournalList)
    {
        projAdvancedJournalList = _journalList;
        return projAdvancedJournalList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs new <c>ProjPostIntegrationJournalBatch</c> object.
    /// </summary>
    /// <param name = "_journalList">The container of ProjOps integration journal list.</param>
    /// <returns>The <c>ProjPostIntegrationJournalBatch</c> instance.</returns>
    public static ProjPostIntegrationJournalBatch construct(container _journalList = conNull())
    {
        ProjPostIntegrationJournalBatch batch = new ProjPostIntegrationJournalBatch();
        batch.parmProjAdvancedJournalList(_journalList);

        return batch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Batch job description.
    /// </summary>
    /// <returns>The class description.</returns>
    public static ClassDescription description()
    {
        return "@Proj:PostAllDraftIntegrationJournals";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Microsoft internal use only.
    /// </summary>
    /// <returns>
    /// A <c>ClassDescription</c> value.
    /// </returns>
    public ClassDescription caption()
    {
        return ProjPostIntegrationJournalBatch::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// The actual implementation of the class.
    /// </summary>
    /// <param name = "_args">The arguments required by the class.</param>
    public static void main(xArgs _args)
    {
        boolean projOpsIntegrationEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();
        if (!projOpsIntegrationEnabled)
        {
            throw error(strFmt("@Proj:MessageValidation_ProjIntegrationJournalProcessing",
                                "@Proj:EnableProjectOperationsIntegration",
                                "@ProjectOperations:MessageFeatureDisabled"));
        }

        container journalList = conNull();
        if (_args && _args.record())
        {
            FormRun formRun = _args.caller();
            FormDataSource projAdvancedJournal_DS = formRun.dataSource(formDataSourceStr(ProjAdvancedJournal, ProjAdvancedJournal));
            Array projAdvancedJournalMarked = projAdvancedJournal_DS.recordsMarked();

            int recordArrayLength = projAdvancedJournalMarked.lastIndex();

            for (int recordIndex = 1; recordIndex <= recordArrayLength; recordIndex++)
            {
                ProjAdvancedJournal journal = projAdvancedJournal_DS.cursor(projAdvancedJournalMarked.value(recordIndex));
                if (journal.Status == ProjAdvancedJournalStatus::Draft)
                {
                    journalList += journal.RecId;
                }
            }
        }

        ProjPostIntegrationJournalBatch task = ProjPostIntegrationJournalBatch::construct(journalList);

        if (task.prompt())
        {
            task.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// True if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>