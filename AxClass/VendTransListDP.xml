<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTransListDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendTransListDP</c> class that supports the <c>VendTransList</c> SSRS report.
/// </summary>
/// <remarks>
///    Declare variables, tables, enumeration types, and so on that can be used for the
///    <c>VendTransList</c> SSRS report.
/// </remarks>
[
    SRSReportQuery(querystr(VendTransList)),
    SRSReportParameterAttribute(classstr(VendTransListContract))
]
public class VendTransListDP extends SrsReportDataProviderPreProcessTempDB
{
    TransactionViewMode includeTransaction;
    boolean settlementDetails;
    RecId prevRecId;
    VendTransListTmp vendTransListTmp;
    VendTable vendTable;
    VendTrans vendTrans;
    VendSettlement vendSettlement;
    TransactionReversalTrans transactionReversalTrans;
    SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

    NoYes remainAmount;
    NoYes includeReversed;
    ExchAdjustment exch;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>creditBalanceMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the credit balance amount.
    /// </summary>
    /// <returns>
    ///    The value of the <c>AmountMST</c> data type.
    /// </returns>
    public AmountMST creditBalanceMST()
    {
        AmountMST creditBalanceMST;

        if (includeTransaction == TransactionViewMode::Closed)
        {
            creditBalanceMST = vendTrans.SettleAmountMST;
        }
        else
        {
            creditBalanceMST = ((exch == ExchAdjustment::AdjustmentDate ? vendTrans.amountExchAdj() : vendTrans.AmountMST) -
                            (remainAmount ? vendTrans.SettleAmountMST : 0));
        }

        if (vendTrans.Correct)
        {
            return max(creditBalanceMST, 0);
        }
        else
        {
            return min(creditBalanceMST, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditBalanceReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the reporting currency credit balance amount.
    /// </summary>
    /// <returns>
    ///    The value of the <c>AmountMSTSecondary</c> data type.
    /// </returns>
    public AmountMSTSecondary creditBalanceReportingCurrency()
    {
        AmountMSTSecondary creditBalanceMSTSecond;

        if (includeTransaction == TransactionViewMode::Closed)
        {
            creditBalanceMSTSecond = vendTrans.SettleAmountReporting;
        }
        else
        {
            creditBalanceMSTSecond = ((exch == ExchAdjustment::AdjustmentDate ? vendTrans.amountExchAdjReportingCurrency() : vendTrans.ReportingCurrencyAmount) -
                            (remainAmount ? vendTrans.SettleAmountReporting : 0));
        }

        if (vendTrans.Correct)
        {
            return max(creditBalanceMSTSecond, 0);
        }
        else
        {
            return min(creditBalanceMSTSecond, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitBalanceMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the debit balance amount.
    /// </summary>
    /// <returns>
    ///    The value of the <c>AmountMST</c> data type.
    /// </returns>
    public AmountMST debitBalanceMST()
    {
        AmountMST debitBalanceMST;

        if (includeTransaction == TransactionViewMode::Closed)
        {
            debitBalanceMST = vendTrans.SettleAmountMST;
        }
        else
        {
            debitBalanceMST = ((exch == ExchAdjustment::AdjustmentDate ? vendTrans.amountExchAdj() : vendTrans.AmountMST) -
                            (remainAmount ? vendTrans.SettleAmountMST : 0));
        }

        if (vendTrans.Correct)
        {
            return min(debitBalanceMST, 0);
        }
        else
        {
            return max(debitBalanceMST, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitBalanceReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the reporting currency debit balance amount.
    /// </summary>
    /// <returns>
    ///    The value of the <c>AmountMSTSecondary</c> data type.
    /// </returns>
    public AmountMSTSecondary debitBalanceReportingCurrency()
    {
        AmountMSTSecondary debitBalanceMSTSecond;

        if (includeTransaction == TransactionViewMode::Closed)
        {
            debitBalanceMSTSecond = vendTrans.SettleAmountReporting;
        }
        else
        {
            debitBalanceMSTSecond = ((exch == ExchAdjustment::AdjustmentDate ? vendTrans.amountExchAdjReportingCurrency() : vendTrans.ReportingCurrencyAmount) -
                            (remainAmount ? vendTrans.SettleAmountReporting : 0));
        }

        if (vendTrans.Correct)
        {
            return min(debitBalanceMSTSecond, 0);
        }
        else
        {
            return max(debitBalanceMSTSecond, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTransListTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the <c>VendTransListTmp</c> table and Retrieves the data table.
    /// </summary>
    /// <returns>
    ///    The required report data table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(VendTransListTmp))
    ]
    public VendTransListTmp getVendTransListTmp()
    {
        select vendTransListTmp;
        return vendTransListTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendTransListTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into the <c>VendTransListTmp</c> temporary table.
    /// </summary>
    private void insertVendTransListTmp()
    {
        this.populateVendTransListTmp();

        vendTransListTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateVendTransListTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>VendTransListTmp</c> temporary table buffer.
    /// </summary>
    [Wrappable(true)]
    protected final void populateVendTransListTmp()
    {
        vendTransListTmp.clear();
        vendTransListTmp.AccountNum = vendTable.AccountNum;
        vendTransListTmp.Voucher = vendTrans.Voucher;
        vendTransListTmp.TransDate = vendTrans.TransDate;
        vendTransListTmp.Txt = vendTrans.Txt ? vendTrans.Txt : VendInvoiceJour::findFromVendTransVoucher(vendTrans.Invoice, vendTrans.Voucher, vendTrans.TransDate, vendTrans.AccountNum).Description;
        vendTransListTmp.Debit = this.debitBalanceMST();
        vendTransListTmp.Credit = -(this.creditBalanceMST());
        vendTransListTmp.ReportingCurrencyDebit = this.debitBalanceReportingCurrency();
        vendTransListTmp.ReportingCurrencyCredit = -(this.creditBalanceReportingCurrency());
        vendTransListTmp.CurrencyCode = vendTrans.CurrencyCode;
        vendTransListTmp.TraceNum = transactionReversalTrans.TraceNum;
        vendTransListTmp.Reversed = this.reversed();
        vendTransListTmp.Name = vendTable.name();

        if (vendTransListTmp.Debit)
        {
            if (includeTransaction == TransactionViewMode::Closed)
            {
                vendTransListTmp.AmountCurrencyDebit = vendTrans.SettleAmountCur;
            }
            else
            {
                vendTransListTmp.AmountCurrencyDebit = vendTrans.AmountCur - (remainAmount ? vendTrans.SettleAmountCur : 0);
            }
        }
        else
        {
            if (includeTransaction == TransactionViewMode::Closed)
            {
                vendTransListTmp.AmountCurrencyCredit = -vendTrans.SettleAmountCur;
            }
            else
            {
                vendTransListTmp.AmountCurrencyCredit = -(vendTrans.AmountCur - (remainAmount ? vendTrans.SettleAmountCur : 0));
            }
        }

        if ((vendTrans.TransType == LedgerTransType::Vend
                || vendTrans.TransType == LedgerTransType::GeneralJournal
                || vendTrans.TransType == LedgerTransType::Payment
                || vendTrans.TransType == LedgerTransType::Purch)
            && settlementDetails == NoYes::Yes)
        {
            vendTransListTmp.SettledVoucher = vendTrans.LastSettleVoucher;
            vendTransListTmp.SettledDate = vendTrans.LastSettleDate;

            if (prevRecId && (prevRecId == vendSettlement.TransRecId))
            {
                vendTransListTmp.Debit = 0;
                vendTransListTmp.Credit = 0;
                vendTransListTmp.ReportingCurrencyDebit = 0;
                vendTransListTmp.ReportingCurrencyCredit = 0;
                vendTransListTmp.AmountCurrencyDebit = 0;
                vendTransListTmp.AmountCurrencyCredit = 0;
            }
        }
        select firstonly GeneralJournalEntry from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.Voucher == vendTrans.Voucher
                && subledgerVoucherGeneralJournalEntry.AccountingDate == vendTrans.TransDate
                && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == vendTrans.DataAreaId;

        vendTransListTmp.GeneralJournalEntry = subledgerVoucherGeneralJournalEntry.GeneralJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method gets the default query for the <c>VendTransList</c> report.
    /// </summary>
    /// <returns>
    ///     A query object used for report.
    /// </returns>
    protected Query getReportQuery()
    {
        return this.parmQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic, which is used by the <c>VendTransList</c>
    ///    report.
    /// </remarks>
    public void processReport()
    {
        QueryBuildDataSource qbdsVendTrans;
        QueryBuildDataSource qbdsVendTable;
        QueryBuildRange qbrIncludeTransaction;
        Query q = this.getReportQuery();
        QueryRun qr;
        VendTransListContract contract = this.parmDataContract() as VendTransListContract;
        includeTransaction = contract.parmIncludeTransactions();
        settlementDetails = contract.parmSettlementDetails();

        this.parmUserConnection();

        if (contract.parmIncludeReversed())
        {
            includeReversed = NoYes::Yes;
        }

        exch = contract.parmExchangeRates();

        // Modify query to only include Open or Closed transactions if needed
        // Using 'Expressions in query ranges' syntax for SQL conditional. CurrencyCode range field does not matter.
        switch (includeTransaction)
        {
            case TransactionViewMode::Open:
                qbdsVendTable = q.dataSourceTable(vendTable.TableId);
                qbdsVendTrans = qbdsVendTable.childDataSourceNo(1);
                qbrIncludeTransaction = qbdsVendTrans.addRange(fieldNum(vendTrans,CurrencyCode));
                qbrIncludeTransaction.value('(VendTrans.AMOUNTCUR != VendTrans.SETTLEAMOUNTCUR)');
                break;
            case TransactionViewMode::Closed:
                qbdsVendTable = q.dataSourceTable(vendTable.TableId);
                qbdsVendTrans = qbdsVendTable.childDataSourceNo(1);
                qbrIncludeTransaction = qbdsVendTrans.addRange(fieldNum(vendTrans,CurrencyCode));
                qbrIncludeTransaction.value('(VendTrans.SETTLEAMOUNTCUR != 0)');
                break;
        }

        // <c>SubledgerVoucherGeneralJournalEntry</c> is enabled in query <c>VendTransList</c> by default
        QueryBuildDataSource qbdsSubledgerVoucherGeneralJournalEntry = q.dataSourceTable(tableNum(SubledgerVoucherGeneralJournalEntry));
        qbdsSubledgerVoucherGeneralJournalEntry.enabled(false);

        qr = new QueryRun(q);

        while (qr.next())
        {
            vendTrans = qr.get(tableNum(VendTrans));
            vendTable = qr.get(tableNum(VendTable));
            vendSettlement = qr.get(tableNum(VendSettlement));
            transactionReversalTrans = qr.get(tableNum(TransactionReversalTrans));

            // Used in calculation of open transaction amounts for TransactionViewMode::Open
            // For TransactionViewMode::All, display all transactions in the original amount
            if (includeTransaction == TransactionViewMode::Open)
            {
                remainAmount = NoYes::Yes;
            }
            else
            {
                remainAmount = NoYes::No;
            }

            if (vendSettlement.RecId == 0 || (prevRecId != vendSettlement.TransRecId || settlementDetails == NoYes::Yes))
            {
                if ((vendTrans.TransType != LedgerTransType::ExchAdjustment) ||
                    (vendTrans.TransType == LedgerTransType::ExchAdjustment && (this.debitBalanceMST() != 0 || this.creditBalanceMST() != 0)))
                {
                    if (includeReversed || (vendTrans.RecId && prevRecId != vendTrans.RecId && !transactionReversalTrans.Reversed))
                    {
                        this.insertVendTransListTmp();
                        prevRecId = vendTrans.RecId;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows the reversed transaction.
    /// </summary>
    /// <returns>
    ///    The R string value.
    /// </returns>
    public str reversed()
    {
        if (transactionReversalTrans.Reversed)
        {
            return 'R';
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>