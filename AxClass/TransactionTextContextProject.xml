<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransactionTextContextProject</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TransactionTextContextProject</c> class enables additional parameter value functionality for
/// documents of the <c>Project</c> type.
/// </summary>
[SourceDocumentEnumLiteralExtension(enumStr(LedgerTransTxt), enumLiteralStr(LedgerTransTxt, ProjectInvoiceLedger)),
 SourceDocumentEnumLiteralExtension(enumStr(LedgerTransTxt), enumLiteralStr(LedgerTransTxt, ProjectInvoiceCust)),
 SourceDocumentEnumLiteralExtension(enumStr(LedgerTransTxt), enumLiteralStr(LedgerTransTxt, ProjectCreditNoteLedger)),
 SourceDocumentEnumLiteralExtension(enumStr(LedgerTransTxt), enumLiteralStr(LedgerTransTxt, ProjectCreditNoteCust))]
    
public class TransactionTextContextProject extends TransactionTextContext
{
    private ProjProposalJour projProposalJour;
    private ProjInvoiceJour  projInvoiceJour;
    private ProjInvoiceTable projInvoiceTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSupportedTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a list of tables that are supported for use with a specified transaction type.
    /// </summary>
    /// <returns>
    /// A container that contains a collection of <c>TableId</c> values of tables that are supported by the
    /// specified transaction type.
    /// </returns>
    public container getSupportedTables()
    {
        container   tableList;

        tableList += tableNum(projProposalJour);
        tableList += tableNum(ProjInvoiceJour);
        tableList += tableNum(ProjInvoiceTable);
         
        return tableList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the parameter variable of an object to contain the records that are used with a specified
    /// transaction type.
    /// </summary>
    /// <remarks>
    /// This method must be called before the table fields and values are mapped for the transaction text
    /// setup parameters.
    /// </remarks>
    public void setParameters()
    {
        parameters = [projProposalJour, projInvoiceJour, projInvoiceTable];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a table buffer for a specified transaction type.
    /// </summary>
    /// <param name="_common">
    /// The <c>Common</c> record that is set based on the <c>TableId</c> value of the buffer.
    /// </param>
    /// <returns>
    /// true if the table is supported and the buffer is saved; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The <c>Common</c> record is cast to the appropriate table through switch logic. This method can be
    /// called repeatedly to assign multiple buffers.
    /// </remarks>    
    public boolean setTableBuffer(Common _common)
    {
        boolean tableBufferSet;

        switch (_common.TableId)
        {
            case tableNum(ProjProposalJour):
                projProposalJour = _common as ProjProposalJour;
                tableBufferSet = true;
                break;
            case tableNum(projInvoiceJour):
                projInvoiceJour = _common as projInvoiceJour;
                tableBufferSet = true;
                break;
            case tableNum(ProjInvoiceTable):
                projInvoiceTable = _common as ProjInvoiceTable;
                tableBufferSet = true;
                break;
        }

        return tableBufferSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>