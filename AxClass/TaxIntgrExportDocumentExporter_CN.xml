<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocumentExporter_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The <c>TaxIntgrExportDocumentExporter_CN</c> is export document exporter.
/// </summary>
class TaxIntgrExportDocumentExporter_CN
{
    TaxCode     taxCode;
    Query       exportQuery;
    RefRecId    historyRecId;
    boolean     ignoreZeroLine;
    Map         commodityCodeMap = new Map(Types::String, Types::String);

    TaxProfileTable_CN  taxProfile;

    static TaxIntgrExportContract_CN contract;

    const str GoldenTaxFilename = 'GoldenTaxExportFile';
    const int CommodityCodeLen = 19;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyDefaultRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default range.
    /// </summary>
    protected void applyDefaultRange()
    {
        QueryBuildDataSource dataSource;

        dataSource = exportQuery.dataSourceTable(tableNum(TaxIntgrExportDocument_CN));
        SysQuery::findOrCreateRange(dataSource, fieldNum(TaxIntgrExportDocument_CN, TaxCode)).value(SysQuery::value(taxCode));
        TaxIntgrExportDocumentExporter_CN::applyMandatoryRange(exportQuery);

        dataSource.addGroupByField(fieldNum(TaxIntgrExportDocument_CN, Id));
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanExportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans the export data.
    /// </summary>
    protected void cleanExportData()
    {
        TaxIntgrExportDocDataHeaderTmp_CN           headerTmp;
        TaxIntgrExportDocDataLineTmp_CN             lineTmp;

        delete_from lineTmp
        exists join headerTmp
            where lineTmp.Id == headerTmp.Id
                && headerTmp.HistoryRecId == historyRecId;

        delete_from headerTmp
            where headerTmp.HistoryRecId == historyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs export.
    /// </summary>
    /// <returns>
    /// True if the export is successful; otherwise, false.
    /// </returns>
    protected boolean doExport()
    {
        boolean isSuccess;

        ttsBegin;

        this.applyDefaultRange();

        this.populateData();

        this.exportByGER();

        this.cleanExportData();

        isSuccess = true;

        ttsCommit;

        return isSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPopulateExportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the populating of the export data.
    /// </summary>
    /// <param name="_historyRecId">
    /// The operation history record id.
    /// </param>
    protected void doPopulateExportData(RefRecId _historyRecId)
    {
        TaxIntgrExportDocumentView_CN               documentView;
        TaxIntgrExportDocumentLineView_CN           lineView;
        TaxIntgrExportDocOperationHistoryLine_CN    historyLine;
        TaxIntgrExportDocument_CN                   exportDocument;
        TaxIntgrExportDocumentLineCountView_CN      lineCountView;

        TaxIntgrExportDocDataHeaderTmp_CN           headerTmp;
        TaxIntgrExportDocDataLineTmp_CN             lineTmp;
        RecordInsertList                            headerInsertList;
        RecordInsertList                            lineInsertList;

        ttsBegin;

        headerInsertList = new RecordInsertList(headerTmp.TableId);
        while select documentView
            join LineCount from lineCountView
                where lineCountView.TaxIntgrExportDocument_CN == documentView.RecId
            join Position from historyLine
                where historyLine.ExportDocumentId == documentView.Id
                    && historyLine.TaxIntgrExportDocOperationHistory_CN == _historyRecId
        {
            headerTmp.clear();
            headerTmp.Id = documentView.Id;
            headerTmp.LineCount = int642int(lineCountView.LineCount);
            headerTmp.HistoryRecId = _historyRecId;
            headerTmp.CustName = documentView.CustName;
            headerTmp.RegistrationNumber = documentView.RegistrationNumber;
            headerTmp.CustAddress = documentView.CustAddress;
            headerTmp.CustPhone = documentView.CustPhone;
            headerTmp.CustBankName = documentView.CustBankName;
            headerTmp.CustBankAccountNum = documentView.CustBankAccountNum;
            headerTmp.CreditNodeMemo = this.getCreditNodeMemo(documentView);
            headerTmp.InvoiceAuditorName = documentView.InvoiceAuditorName;
            headerTmp.PaymentCollectorName = documentView.PaymentCollectorName;
            headerTmp.MaxInvoiceLines = documentView.MaxInvoiceLines;
            headerTmp.DocumentDate = documentView.DocumentDate;
            headerTmp.CompanyBankName = documentView.CompanyBankName;
            headerTmp.CompanyBankAccountNum = documentView.CompanyBankAccountNum;
            headerTmp.Address = documentView.Address;
            headerTmp.Phone = documentView.Phone;
            headerTmp.TaxIncludedMark = taxProfile.IncludeTax;
            headerTmp.IsExport = documentView.CustCountryRegionId != documentView.CompanyCountryRegionId;
            headerTmp.BatchPosition = historyLine.Position;
            headerTmp.ReversedBookNum = documentView.ReversedBookNum;
            headerTmp.ReversedInvoiceNum = documentView.ReversedInvoiceNum;

            headerInsertList.add(headerTmp);
        }
        headerInsertList.insertDatabase();

        lineInsertList = new RecordInsertList(lineTmp.TableId);
        int totalNumberOfLines;

        while select lineView
            join Id from exportDocument
                where lineView.TaxIntgrExportDocument_CN == exportDocument.RecId
            exists join historyLine
                where historyLine.ExportDocumentId == exportDocument.Id
                    && historyLine.TaxIntgrExportDocOperationHistory_CN == _historyRecId
        {
            if (!(ignoreZeroLine
                 && lineView.TransactionCurrencyNetAmount == 0))
            {
                totalNumberOfLines++;
                lineTmp.clear();
                lineTmp.Id = exportDocument.Id;
                lineTmp.Description = lineView.Description;
                lineTmp.SalesUnit = lineView.SalesUnit;
                lineTmp.Qty = lineView.Qty;

                if (taxProfile.IsAddMiscCharges)
                {
                    lineTmp.TransactionCurrencyNetAmount = lineView.TransactionCurrencyNetAmount
                        + lineView.TransactionCurrencyMiscChargesNetAmount;
                }
                else
                {
                    lineTmp.TransactionCurrencyNetAmount = lineView.TransactionCurrencyNetAmount;
                }

                lineTmp.TaxValue = lineView.TaxValue;
                lineTmp.ExemptTax = lineView.ExemptTax;
                lineTmp.Intracode = lineView.Intracode;
                lineTmp.CommodityCode = this.getCommodityCode(lineView.itemId);
                lineTmp.ItemId = lineView.ItemId;

                if (taxProfile.IsAddMiscCharges)
                {
                    lineTmp.TransactionCurrencyTaxAmount = lineView.TransactionCurrencyTaxAmount
                        + lineView.TransactionCurrencyMiscChargesTaxAmount;
                }
                else
                {
                    lineTmp.TransactionCurrencyTaxAmount = lineView.TransactionCurrencyTaxAmount;
                }

                lineTmp.IsIncludeTax = lineView.IsIncludeTax;
                lineInsertList.add(lineTmp);

                TaxIntgrTaxProfileDefaultValue_CN taxIntgrTaxProfileDefaultValue;

                if (taxProfile.IsAddMiscCharges == NoYes::No
                    && lineView.TransactionCurrencyMiscChargesNetAmount
                    && lineView.TransactionCurrencyMiscChargesTaxAmount)
                {
                    taxIntgrTaxProfileDefaultValue = TaxIntgrTaxProfileDefaultValue_CN::findByLineSourceType(taxProfile.RecId, TaxIntgrExportDocumentLineSourceType_CN::MiscCharge);
    
                    lineTmp.clear();
                    lineTmp.Id = exportDocument.Id;
                    lineTmp.Description = (lineView.MiscChargesLineNum == 1 && lineView.DescriptionCharges) ? lineView.DescriptionCharges : taxIntgrTaxProfileDefaultValue.Description;
                    lineTmp.SalesUnit = taxIntgrTaxProfileDefaultValue.SalesUnit;
                    lineTmp.Qty = lineView.TransactionCurrencyMiscChargesNetAmount > 0 ? 1 : -1;
                    lineTmp.TransactionCurrencyNetAmount = lineView.TransactionCurrencyMiscChargesNetAmount;
                    lineTmp.TaxValue = lineView.TaxValue;
                    lineTmp.ExemptTax = lineView.ExemptTax;
                    lineTmp.Intracode = lineView.Intracode;
                    lineTmp.CommodityCode = this.getCommodityCode(lineView.itemId);
                    lineTmp.ItemId = lineView.ItemId;
                    lineTmp.TransactionCurrencyTaxAmount = lineView.TransactionCurrencyMiscChargesTaxAmount;
                    lineTmp.IsIncludeTax = lineView.IsIncludeTax;
    
                    lineInsertList.add(lineTmp);
    
                }

                NoYesId isIncludeTax = lineView.IsIncludeTax;
                EcoResCategoryCommodityCode intracode = lineView.Intracode;
                
                if(totalNumberOfLines == TaxIntgrExportDocumentLine_CN::getNumOfLinesByDocRecId(lineView.TaxIntgrExportDocument_CN))
                {
                    select documentView
                        where documentView.RecId == lineView.TaxIntgrExportDocument_CN
                    exists join historyLine
                        where historyLine.ExportDocumentId == documentView.Id
                            && historyLine.TaxIntgrExportDocOperationHistory_CN == _historyRecId;
    
                    if (documentView.MiscChargesNetAmount && documentView.MiscChargesTaxAmount)
                    {
                        taxIntgrTaxProfileDefaultValue = TaxIntgrTaxProfileDefaultValue_CN::findByLineSourceType(taxProfile.RecId, TaxIntgrExportDocumentLineSourceType_CN::MiscCharge);
                        totalNumberOfLines = 0;
                        lineTmp.clear();
                        lineTmp.Id = exportDocument.Id;
                        lineTmp.Description =  (documentView.MiscChargesLineNum == 1 && documentView.DescriptionCharges) ? documentView.DescriptionCharges : taxIntgrTaxProfileDefaultValue.Description;
                        lineTmp.SalesUnit = taxIntgrTaxProfileDefaultValue.SalesUnit;
                        lineTmp.Qty = documentView.MiscChargesNetAmount > 0 ? 1 : -1;
                        lineTmp.TransactionCurrencyNetAmount = documentView.MiscChargesNetAmount;
                        lineTmp.ItemId = lineView.ItemId;
                        lineTmp.TaxValue = documentView.MiscChargesTaxValue;
                        lineTmp.ExemptTax = documentView.MiscChargesExemptTax;
                        lineTmp.Intracode = intracode;
                        lineTmp.CommodityCode = this.getCommodityCode(lineView.itemId);
                        lineTmp.TransactionCurrencyTaxAmount = documentView.MiscChargesTaxAmount;
                        lineTmp.IsIncludeTax = isIncludeTax;
    
                        lineInsertList.add(lineTmp);
                    }
                }
            }
        }
        lineInsertList.insertDatabase();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCommodityCode</Name>
				<Source><![CDATA[
    private TaxIntgrCommodityCode getCommodityCode(ItemId _itemId)
    {
        TaxIntgrCommodityCode commodityCode;

        if (commodityCodeMap.exists(_itemId))
        {
            commodityCode = commodityCodeMap.lookup(_itemId);
        }
        else
        {
            EcoResProductCategory productCategory;
            EcoResCategory category;
            InventTable inventTable;
        
            while select Code from category
                order by Level desc, NestedSetLeft
                where category.CategoryHierarchy == taxProfile.CommodityHierachy
                    && category.Code
            exists join productCategory
                where productCategory.CategoryHierarchy == taxProfile.CommodityHierachy
                && productCategory.Category == category.RecId
            exists join inventTable
                where inventTable.ItemId == _itemId
                && productCategory.Product == InventTable.Product
            {
                if (strLen(strLRTrim(category.Code)) == CommodityCodeLen)
                {
                    commodityCode = category.Code;
                    break;
                }
            }

            if (!commodityCode)
            {
                commodityCode = taxProfile.CommodityCode;
            }

            commodityCodeMap.insert(_itemId, commodityCode);
        }

        return commodityCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance.
    /// </summary>
    protected void initialize()
    {
        taxProfile = TaxProfileTable_CN::findByTaxCode(taxCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportQuery</Name>
				<Source><![CDATA[
    public Query parmExportQuery(Query _exportQuery = exportQuery)
    {
        exportQuery = _exportQuery;

        return exportQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIgnoreZeroLine</Name>
				<Source><![CDATA[
    public boolean parmIgnoreZeroLine(boolean _ignoreZeroLine = ignoreZeroLine)
    {
        ignoreZeroLine = _ignoreZeroLine;

        return ignoreZeroLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxCode</Name>
				<Source><![CDATA[
    public TaxCode parmTaxCode(TaxCode _taxCode = taxCode)
    {
        taxCode = _taxCode;

        return taxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the export data.
    /// </summary>
    protected void populateData()
    {
        QueryRun                    exportQueryRun;
        TaxIntgrExportDocument_CN   exportDocument;
        Set                         setOfDocumentId;

        setOfDocumentId = new Set(Types::String);
        exportQueryRun = new QueryRun(exportQuery);
        while (exportQueryRun.next())
        {
            exportDocument = exportQueryRun.get(exportDocument.TableId);
            setOfDocumentId.add(exportDocument.Id);
        }

        historyRecId = TaxIntgrExportDocumentManager_CN::populateExportDocumentHistory(
            setOfDocumentId,
            TaxIntgrExportDocumentOperationType_CN::Export);

        this.updateExportDocument(historyRecId);
        this.doPopulateExportData(historyRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExportDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the export document.
    /// </summary>
    /// <param name="_historyRecId">
    /// The operation history record id.
    /// </param>
    protected void updateExportDocument(RefRecId _historyRecId)
    {
        TaxIntgrExportDocument_CN       exportDocument;
        boolean     exportedLocal = true;
        TaxIntgrExportDocOperationHistoryLine_CN historyLine;

        ttsbegin;
        while select forupdate exportDocument
        join historyLine
            where historyLine.TaxIntgrExportDocOperationHistory_CN == _historyRecId
            && historyLine.ExportDocumentId == exportDocument.Id
        {
            exportDocument.IsExported = exportedLocal;
            exportDocument.ExportedDateTime = str2Datetime(strReplace(strDel(historyLine.BatchName, 1, strLen("@SYS14204")), 'T', ' '), 321);
            exportDocument.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyMandatoryRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the mandatory range.
    /// </summary>
    /// <param name="_query">
    /// The query.
    /// </param>
    public static void applyMandatoryRange(Query _query)
    {
        QueryBuildDataSource    dataSource;
        QueryBuildRange         range;

        dataSource = _query.dataSourceTable(tableNum(TaxIntgrExportDocument_CN));
        if (dataSource)
        {
            range = SysQuery::findOrCreateRange(dataSource, fieldNum(TaxIntgrExportDocument_CN, IsExported));
            range.status(RangeStatus::Hidden);
            range.value(SysQuery::value(NoYes::No));

            range = SysQuery::findOrCreateRange(dataSource, fieldNum(TaxIntgrExportDocument_CN, IsOverAmountLimit));
            range.status(RangeStatus::Hidden);
            range.value(SysQuery::value(NoYes::No));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>TaxIntgrExportDocumentExporter_CN</c>.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_query">
    /// The query.
    /// </param>
    /// <returns>
    /// A new instance of <c>TaxIntgrExportDocumentExporter_CN</c>.
    /// </returns>
    private static TaxIntgrExportDocumentExporter_CN construct(TaxCode _taxCode, Query _query)
    {
        TaxIntgrExportDocumentExporter_CN exporter;

        exporter = new TaxIntgrExportDocumentExporter_CN();
        exporter.parmExportQuery(_query);
        exporter.parmTaxCode(_taxCode);
        exporter.initialize();

        return exporter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>export</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the export document of the tax code.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_queryCon">
    /// The query container.
    /// </param>
    /// <param name="_ignoreZero">
    /// Ignore zero.
    /// </param>
    /// <returns>
    /// True if the export is successful; otherwise, false.
    /// </returns>
    public static boolean export(TaxCode _taxCode, Query _query, TaxIntgrExportContract_CN _contract = new TaxIntgrExportContract_CN())
    {
        TaxIntgrExportDocumentExporter_CN exporter;

        contract = _contract;
        exporter = TaxIntgrExportDocumentExporter_CN::construct(_taxCode, _query);
        exporter.parmIgnoreZeroLine(_contract.parmIgnoreZero());
        return exporter.doExport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditNodeMemo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the credit note memo based on the profile setup
    /// </summary>
    /// <param name="_documentView">
    /// The TaxIntgrExportDocumentView_CN object.
    /// </param>
    /// <returns>
    /// The formatted credit node memo.
    /// </returns>
    private str getCreditNodeMemo(TaxIntgrExportDocumentView_CN _documentView)
    {
        str             creditNoteMemo;
        SysDictEnum     creditNoteMemoEnum = new SysDictEnum(enumNum(CreditNoteMemo_CN));

        if (taxProfile && _documentView.ReversedBookNum && _documentView.ReversedInvoiceNum)
        {
            switch (taxProfile.CreditNoteMemo)
            {
                case CreditNoteMemo_CN::ReversedVATInvoice:
                    creditNoteMemo = strFmt(creditNoteMemoEnum.index2Label(taxProfile.CreditNoteMemo),
                                            _documentView.ReversedBookNum,
                                            _documentView.ReversedInvoiceNum);
                    break;
                case CreditNoteMemo_CN::SpecialVATInvoice:
                    creditNoteMemo = strFmt(creditNoteMemoEnum.index2Label(taxProfile.CreditNoteMemo),
                                            _documentView.ReversedInvoiceNum);
                    break;
                default:
                    break;
            }
        }

        return creditNoteMemo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportByGER</Name>
				<Source><![CDATA[
    /// <summary>
    /// Export data by GER
    /// </summary>
    private void exportByGER()
    {
        ERIModelDefinitionParamsAction parameters = new ERModelDefinitionParamsUIActionComposite()
            .add(
                new ERModelDefinitionDatabaseContext()
                    .addValue(tableNum(TaxIntgrExportDocDataHeaderTmp_CN), fieldNum(TaxIntgrExportDocDataHeaderTmp_CN, HistoryRecId), queryValue(historyRecId)));

        // Call ER to generate the GAF.
        ERObjectsFactory::createFormatMappingRunByFormatMappingId(TaxProfileTable_CN::find(taxProfile.RecId).ExportFormatMapping)
            .withParameter(parameters)
            .withFileDestination(contract.getFileDestination())
            .run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>