<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPhysicalOnHandChangeArgs</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventPhysicalOnHandChangeArgs
{
    InventTable            inventTable;
    InventDim              inventDim;
    InventQty              deltaQuantity;
    private PdsCWInventQty deltaCWQuantity;
    WMSLocation            wmsLocation;
    WHSLocationProfile     whsLocationProfile;
    InventUnitId           inventUnitId;
    InventTrans            inventTrans;
    InventTrans            origInventTrans;
    WMSPickingRouteID      wmsPickingRouteID;
    private WHSDispositionCode  dispositionCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object based on the item, inventory dimensions and delta quantity.
    /// </summary>
    /// <param name="_inventTable">
    /// The item for which physical on hand is changing.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimension values for which physical on hand is changing.
    /// </param>
    /// <param name="_deltaQty">
    /// The difference between the previous and the new physical on hand quantity.
    /// </param>
    protected void init(
		InventTable _inventTable,
		InventDim   _inventDim,
		InventQty   _deltaQty)
    {
        inventTable = _inventTable;
        inventDim = _inventDim;
        deltaQuantity = _deltaQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExtended</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object based on the item, inventory dimensions and delta quantities.
    /// </summary>
    /// <param name="_inventTable">
    /// The item for which physical on hand is changing.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimension values for which physical on hand is changing.
    /// </param>
    /// <param name="_deltaQty">
    /// The difference between the previous and the new physical on hand quantity.
    /// </param>
    /// <param name="_deltaCWQty">
    /// The difference between the previous and the new physical on hand catch weight quantity.
    /// </param>
    [Hookable(false)]
    internal void initExtended(
        InventTable     _inventTable,
        InventDim       _inventDim,
        InventQty       _deltaQty,
        PdsCWInventQty  _deltaCWQty)
    {
        deltaCWQuantity = _deltaCWQty;
        this.init(_inventTable, _inventDim, _deltaQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTrans</Name>
				<Source><![CDATA[
    public InventTrans parmInventTrans(InventTrans _inventTrans = inventTrans)
    {
        inventTrans = _inventTrans;

        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigInventTrans</Name>
				<Source><![CDATA[
    public InventTrans parmOrigInventTrans(InventTrans _origInventTrans = origInventTrans)
    {
        origInventTrans = _origInventTrans;

        return origInventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeltaQuantity</Name>
				<Source><![CDATA[
    public InventQty parmDeltaQuantity(InventQty _deltaQuantity = deltaQuantity)
    {
        deltaQuantity = _deltaQuantity;

        return deltaQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeltaCWQuantity</Name>
				<Source><![CDATA[
    public InventQty parmDeltaCWQuantity(PdsCWInventQty _deltaCWQuantity = deltaCWQuantity)
    {
        deltaCWQuantity = _deltaCWQuantity;

        return deltaCWQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventDim(InventDim _inventDim = inventDim)
    {
        inventDim = _inventDim;

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId()
    {
        if (!inventDim.inventDimId)
        {
            inventDim = InventDim::findOrCreate(inventDim);
        }

        return inventDim.inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        inventTable = _inventTable;

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventUnitId</Name>
				<Source><![CDATA[
    public InventUnitId parmInventUnitId()
    {
        if (!inventUnitid)
        {
            inventUnitId = this.parmInventTable().inventUnitId();
        }

        return inventUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId()
    {
        return inventTable.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSLocationProfile</Name>
				<Source><![CDATA[
    public WHSLocationProfile parmWHSLocationProfile()
    {
        if (!whsLocationProfile && inventDim.wMSLocationId)
        {
            wmsLocation = inventDim.wmsLocation();

            if (wmsLocation.LocProfileId)
            {
                whsLocationProfile = wmsLocation.whsLocationProfile();
            }
        }

        return whsLocationProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSLocation</Name>
				<Source><![CDATA[
    public WMSLocation parmWMSLocation()
    {
        if (!wmsLocation && inventDim.wMSLocationId)
        {
            wmsLocation = inventDim.wmsLocation();
        }

        return wmsLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDispositionCode</Name>
				<Source><![CDATA[
    internal  WHSDispositionCode parmDispositionCode(WHSDispositionCode _dispositionCode = dispositionCode)
    {
        dispositionCode = _dispositionCode;

        return dispositionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocationAndProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows to set the location and profile right away thus avoiding recalculating them from the inventDim.
    /// </summary>
    /// <param name = "_wmsLocation">The location to set.</param>
    /// <param name = "_locationProfile">The location profile to set.</param>
    [Hookable(false)]
    internal void setLocationAndProfile(WMSLocation _wmsLocation, WHSLocationProfile _locationProfile)
    {
        wmsLocation = _wmsLocation;
        whsLocationProfile = _locationProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSPickingRouteID</Name>
				<Source><![CDATA[
    public WMSPickingRouteID parmWMSPickingRouteID(WMSPickingRouteID _wmsPickingRouteID = wmsPickingRouteID)
    {
        wmsPickingRouteID = _wmsPickingRouteID;
    
        return wmsPickingRouteID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandardDeltaQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>InventPhysicalOnHandChangeArgs</c>
    /// based on the item, inventory dimensions and delta quantities.
    /// </summary>
    /// <param name="_inventTable">
    /// The item for which physical on hand is changing.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimension values for which physical on hand is changing.
    /// </param>
    /// <param name="_deltaQty">
    /// The difference between the previous and the new physical on hand quantity.
    /// </param>
    /// <param name="_deltaCWQty">
    /// The difference between the previous and the new physical on hand catch weight quantity.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventPhysicalOnHandChangeArgs</c> class.
    /// </returns>
    [Hookable(false)]
    internal static InventPhysicalOnHandChangeArgs newStandardDeltaQuantities(
        InventTable     _inventTable,
        InventDim       _inventDim,
        InventQty       _deltaQty,
        PdsCWInventQty  _deltaCWQty)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightQuantityLogic(funcName(), _inventTable.ItemId, _deltaCWQty))
        {
            return InventPhysicalOnHandChangeArgs::newStandardDeltaQty(_inventTable,
                                                                  _inventDim,
                                                                  _deltaQty,
                                                                  _deltaCWQty);
        }

        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _inventTable.ItemId);

        return InventPhysicalOnHandChangeArgs::newStandardDeltaQty(_inventTable, _inventDim, _deltaQty, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandardDeltaQty</Name>
				<Source><![CDATA[
    private static InventPhysicalOnHandChangeArgs newStandardDeltaQty(
        InventTable     _inventTable,
        InventDim       _inventDim,
        InventQty       _deltaQty,
        PdsCWInventQty  _deltaCWQty)
    {
        InventPhysicalOnHandChangeArgs args = new InventPhysicalOnHandChangeArgs();
        args.initExtended(_inventTable, _inventDim, _deltaQty, _deltaCWQty);

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandardWithInventTransDeltaQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>InventPhysicalOnHandChangeArgs</c>
    /// based on the item, inventory dimensions, delta quantities, new inventory transaction and orignal inventory transaction.
    /// </summary>
    /// <param name="_inventTable">
    /// The item for which physical on hand is changing.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimension values for which physical on hand is changing.
    /// </param>
    /// <param name="_deltaQty">
    /// The difference between the previous and the new physical on hand quantity.
    /// </param>
    /// <param name = "_inventTrans">
    /// The new inventory transaction for which the physical on hand is changing.
    /// </param>
    /// <param name = "_origInventTrans">
    /// The original inventory transaction.
    /// </param>
    /// <param name="_deltaCWQty">
    /// The difference between the previous and the new physical on hand catch weight quantity.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventPhysicalOnHandChangeArgs</c> class.
    /// </returns>
    [Hookable(false)]
    internal static InventPhysicalOnHandChangeArgs newStandardWithInventTransDeltaQuantities(
        InventTable     _inventTable,
        InventDim       _inventDim,
        InventQty       _deltaQty,
        PdsCWInventQty  _deltaCWQty,
        InventTrans     _inventTrans,
        InventTrans     _origInventTrans)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightQuantityLogic(funcName(), _inventTable.ItemId, _deltaCWQty))
        {
            return InventPhysicalOnHandChangeArgs::newStandardWithInventTransDeltaQty(_inventTable,
                                                                          _inventDim,
                                                                          _deltaQty,
                                                                          _deltaCWQty,
                                                                          _inventTrans,
                                                                          _origInventTrans);
        }

        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _inventTable.ItemId);

        return InventPhysicalOnHandChangeArgs::newStandardWithInventTransDeltaQty(_inventTable,
                                                                                  _inventDim,
                                                                                  _deltaQty,
                                                                                  0,
                                                                                  _inventTrans,
                                                                                  _origInventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandardWithInventTransDeltaQty</Name>
				<Source><![CDATA[
    private static InventPhysicalOnHandChangeArgs newStandardWithInventTransDeltaQty(
        InventTable     _inventTable,
        InventDim       _inventDim,
        InventQty       _deltaQty,
        PdsCWInventQty  _deltaCWQty,
        InventTrans     _inventTrans,
        InventTrans     _origInventTrans)
    {
        InventPhysicalOnHandChangeArgs args = InventPhysicalOnHandChangeArgs::newStandardDeltaQuantities(_inventTable, _inventDim, _deltaQty, _deltaCWQty);

        args.parmInventTrans(_inventTrans);
        args.parmOrigInventTrans(_origInventTrans);
        return args;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>