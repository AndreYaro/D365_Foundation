<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_BatchBalancing</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventDimCtrl_Frm_BatchBalancing</c> class is used for controlling onhand dimension display for
/// batch balancing functionality
/// </summary>
internal class InventDimCtrl_Frm_BatchBalancing extends InventDimCtrl_Frm_OnHand
{
    private static boolean isPDSBalanceProdBOMProductDimFlightEnabled = PDSBalanceProdBOMProductDimFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifyQueryBasedOnDatasourceName</Name>
				<Source><![CDATA[
    public void modifyQueryBasedOnDatasourceName(Query _inventSum_DS_Query, str _inventSum_DS_Name, FormDataSource _inventDim_DS)
    {
        #Query
        if (!callingElement || !callingElement.args())
        {
            return;
        }

        Query query = _inventSum_DS_Query;
        QueryBuildDataSource qbdsSum = query.dataSourceName(_inventSum_DS_Name);
        ProdBOM prodBOM = callingElement.args().record();

        query.clearGroupBy();
        qbdsSum.addGroupByField(fieldNum(InventSum, ItemId));

        // consider both reserved physical and physical inventory
        var rangeStr = strFmt('((%1 > 0) || (%2 > 0))', fieldStr(InventSum, AvailPhysical), fieldStr(InventSum, ReservPhysical));
        SysQuery::findOrCreateRange(qbdsSum, fieldNum(InventSum, AvailPhysical)).value(rangeStr);
        SysQuery::findOrCreateRange(qbdsSum, fieldNum(InventSum, Closed)).value(queryValue(NoYes::No));
        SysQuery::findOrCreateRange(qbdsSum, fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));

        QueryBuildDataSource qbdsDim = query.dataSourceName(_inventDim_DS.name());
        InventDimParm inventDimParmGroupBy = InventDimParm::orParmsAll(dimParmLockedRightClick, dimParmVisibleGrid);
        if (isPDSBalanceProdBOMProductDimFlightEnabled)
        {
            inventDimParmGroupBy.setActiveProductDim(EcoResProductDimGroupSetup::newInventTable(prodBOM.inventTable()));
        }
        inventDimParmGroupBy.queryAddGroupByField(qbdsDim);

        // consider expired batches
        QueryBuildDataSource qbdsBatch = query.dataSourceTable(tableNum(InventBatch));
        if (!qbdsBatch)
        {
            qbdsBatch = qbdsSum.addDataSource(tableNum(InventBatch));
            qbdsBatch.addLink(fieldNum(InventSum, ItemId), fieldNum(InventBatch, ItemId), qbdsSum.name());
            qbdsBatch.addLink(fieldNum(InventDim, InventBatchId), fieldNum(InventBatch, InventBatchId), qbdsDim.name());
        }
        
        PdsPickCriteria pick = PdsPickCriteria::ExpiryDate;
        date thresholdDate = InventMovement::construct(prodBOM).getExpiryCheckDate();
        if (prodBOM.inventTable().modelGroup().PdsCheck)
        {
            pick = prodBOM.inventTable().modelGroup().PdsPickCriteria;
        }

        switch (pick)
        {
            case PdsPickCriteria::ExpiryDate:
                var rangeExpiryDate = strfmt('((%1 <= %2) || (%2 == %3))', date2StrXpp(thresholdDate), fieldStr(InventBatch, ExpDate), date2StrXpp(datenull()));
                SysQuery::findOrCreateRange(qbdsBatch, fieldNum(InventBatch, ExpDate)).value(rangeExpiryDate);
                break;

            case PdsPickCriteria::BestBeforeDate:
                var rangeBestBeforeDate = strfmt('((%1 <= %2) || (%2 == %3))', date2StrXpp(thresholdDate), fieldStr(InventBatch, PdsBestBeforeDate), date2StrXpp(datenull()));
                SysQuery::findOrCreateRange(qbdsBatch, fieldNum(InventBatch, PdsBestBeforeDate)).value(rangeBestBeforeDate);
                break;
        }

        if (PDSBalanceProdBOMEnhancedDispositionCodeFlight::instance().isEnabled())
        {
            var qbdsDispositionCode = qbdsSum.addDataSource(tableNum(PdsDispositionMaster));
            qbdsDispositionCode.addLink(fieldNum(InventBatch, PdsDispositionCode), fieldNum(PdsDispositionMaster, DispositionCode), qbdsBatch.name());
            qbdsDispositionCode.joinMode(JoinMode::NoExistsJoin);

            /* add batch disposition code constraint to pre-filter unavailable batches with onhand.
                AND NOT EXISTS (SELECT 'x' FROM PDSDISPOSITIONMASTER T4
                    WHERE (T4.PDSPRODBLOCKPICK=1) OR (T4.PDSPRODBLOCKRESERVE=1)) OR (T4.PDSPRODBLOCKPRODUCTIONPICKINGJOURNAL=1))
                        AND (T3.PDSDISPOSITIONCODE=T4.DISPOSITIONCODE))))
            */
            var rangeDispositionCode = strfmt('((%1 == 1) || (%2 == 1) || (%3 == 1))', fieldStr(PdsDispositionMaster, PdsProdBlockPick),
                                                                                       fieldStr(PdsDispositionMaster, PdsProdBlockReserve),
                                                                                       fieldStr(PdsDispositionMaster, PdsProdBlockProductionPickingJournal));
            SysQuery::findOrCreateRange(qbdsDispositionCode, fieldNum(PdsDispositionMaster, PdsProdBlockPick)).value(rangeDispositionCode);
        }

        if (isPDSBalanceProdBOMProductDimFlightEnabled)
        {
            InventDim   prodBOMInventDim = prodBOM.inventDim();

            // Check all enabled product dimensions applying only actual for the current ProdBOM
            ListEnumerator enumerator =  InventDim::dimProductDimensionEnabledFieldList().getEnumerator();
            
            while (enumerator.moveNext())
            {
                FieldId         dimFieldId = enumerator.current();
                QueryBuildRange criteriaInventDim;

                if (prodBOMInventDim.(dimFieldId))
                {
                    criteriaInventDim = SysQuery::findOrCreateRange(qbdsDim, dimFieldId);

                    criteriaInventDim.value(queryValue(prodBOMInventDim.(dimFieldId)));
                }
                else
                {
                    criteriaInventDim = qbdsDim.findRange(dimFieldId);

                    if (criteriaInventDim)
                    {
                        criteriaInventDim.value('');
                    }
                }
            }
        }

        // If InventDim ranges being sorted by are no longer visible, then remove the sorting
        this.clearOrderByInventDimParmInvisible(query, inventDimParmGroupBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearOrderByInventDimParmInvisible</Name>
				<Source><![CDATA[
    internal void clearOrderByInventDimParmInvisible(Query query, InventDimParm inventDimParmGroupBy)
    {
        List    dimOrderByFields = new List(Types::Container);
        Counter orderByFieldCount = query.orderByFieldCount();
        FieldId orderByFieldId;
        str     orderByDataSourceName;
        boolean anyOrderByFieldToRemove;

        for (Counter orderByFieldIdx = 1; orderByFieldIdx <= orderByFieldCount; orderByFieldIdx++)
        {
            QueryOrderByField orderByField = query.orderByField(orderByFieldIdx);
            orderByDataSourceName = orderByField.dataSource().name();
            orderByFieldId = orderByField.fieldID();
            if (orderByField.dataSource().table() == tableNum(InventDim))
            {
                FieldId dimParmFieldId  = InventDim::dim2dimParm(orderByFieldId);
                if (inventDimParmGroupBy.(dimParmFieldId))
                {
                    dimOrderByFields.addEnd([orderByDataSourceName, orderByFieldId]);
                }
                else
                {
                    anyOrderByFieldToRemove = true;
                }
            }
            else
            {
                dimOrderByFields.addEnd([orderByDataSourceName, orderByFieldId]);
            }
        }

        if (anyOrderByFieldToRemove)
        {
            query.clearOrderBy();
            ListEnumerator enumerator = dimOrderByFields.getEnumerator();
            while (enumerator.moveNext())
            {
                [orderByDataSourceName, orderByFieldId] = enumerator.current();
                query.dataSourceName(orderByDataSourceName).addOrderByField(orderByFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static InventDimCtrl_Frm_BatchBalancing construct()
    {
        return new InventDimCtrl_Frm_BatchBalancing();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of <c>InventDimCtrl_Frm_BatchBalancing</c> class that will be used in forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained.
    /// </param>
    /// <returns>
    ///    An instance of <c>InventDimCtrl_Frm_BatchBalancing</c> class that will be used in a form.
    /// </returns>
    internal static InventDimCtrl_Frm_BatchBalancing newFromForm(FormRun _formRun)
    {
        InventDimCtrl_Frm_BatchBalancing inventDimCtrl = InventDimCtrl_Frm_BatchBalancing::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>