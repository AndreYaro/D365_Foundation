<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlBudgetSourceRemover</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>BudgetControlBudgetSourceRemover</c> is responsible for removing existing budget data.
/// </summary>
internal final class BudgetControlBudgetSourceRemover
{
    private BudgetSourceTmp budgetSourcesToDelete;
    private BudgetControlInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static BudgetControlBudgetSourceRemover construct(
        BudgetControlIBudgetSourcePopulator _budgetSourcePopulator,
        BudgetControlInstrumentationLogger _logger = null)
    {
        BudgetControlBudgetSourceRemover remover = new BudgetControlBudgetSourceRemover();
        if (_logger)
        {
            remover.logger = _logger;
        }

        if (_budgetSourcePopulator)
        {
            remover.budgetSourcesToDelete = _budgetSourcePopulator.populateBudgetSources();
        }
        return remover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeBudgetSourceData</Name>
				<Source><![CDATA[
    internal static void removeBudgetSourceData(BudgetControlIBudgetSourcePopulator _budgetSourcePopulator)
    {
        BudgetControlBudgetSourceRemover remover = BudgetControlBudgetSourceRemover::construct(_budgetSourcePopulator);
        remover.removeBudgetSourceDataWithPopulator();
        remover.clearExistingBudgetSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAllBudgetSourceData</Name>
				<Source><![CDATA[
    internal static void removeAllBudgetSourceData(BudgetControlIBudgetSourcePopulator _budgetSourcePopulator, BudgetControlInstrumentationLogger _logger = null)
    {
        BudgetControlBudgetSourceRemover remover = BudgetControlBudgetSourceRemover::construct(_budgetSourcePopulator, _logger);

        using (var activityContext = remover.getLogger().dataMaintenance().removeAllBudgetSourceData())
        {
            remover.removeBudgetSourceDataWithPopulator(activityContext);
            remover.removeExistingBudgetSource(activityContext);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logRowCountAffected</Name>
				<Source><![CDATA[
    private void logRowCountAffected(SysInstrumentationActivityContext _activityContext, int _count, str _tableName)
    {
        if (logger && _activityContext)
        {
            logger.logBucketizedCountWithTableName(_activityContext, _count, _tableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogger</Name>
				<Source><![CDATA[
    private BudgetControlInstrumentationLogger getLogger()
    {
        if (!this.logger)
        {
            this.logger = BudgetControlInstrumentationLogger::createLogger(classStr(BudgetControlBudgetSourceRemover));
        }

        return this.logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeBudgetSourceDataWithPopulator</Name>
				<Source><![CDATA[
    private void removeBudgetSourceDataWithPopulator(SysInstrumentationActivityContext _activityContext = null)
    {
        this.removeData(_activityContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeData</Name>
				<Source><![CDATA[
    private void removeData(SysInstrumentationActivityContext _activityContext = null)
    {
        // Find out which details we are about to remove so we can be specific about which records to rebuild the summary table for
        BudgetSourceTrackingSummaryRebuildTmp trackingSummaryDetailsToRebuild = this.populateTrackingSummaryDetailsToRebuild();

        // Before processing, remove all budget data for documents to be processed so we can have budget funds available.
        this.removeExistingBudgetSourceData(_activityContext);

        // In order to have the correct amount of budget funds available, the summary table must accurately reflect the
        // deletions that just occured.
        BudgetSourceTrackingSummaryUpdate::rebuildSummaryBalances(trackingSummaryDetailsToRebuild);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTrackingSummaryDetailsToRebuild</Name>
				<Source><![CDATA[
    private BudgetSourceTrackingSummaryRebuildTmp populateTrackingSummaryDetailsToRebuild()
    {
        // Find budget source data that needs to be rebuilt.
        BudgetSourceTrackingSummaryRebuildTmp trackingSummaryTmp;
        BudgetSourceTracking budgetSourceTracking;
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;

        insert_recordset trackingSummaryTmp (
            BudgetControlLedgerDimension,
            PrimaryLedger,
            TrackingDate,
            Category,
            BudgetModelId,
            BudgetModelSubModelId,
            BudgetModelType,
            BudgetModelDataAreaId)
        select BudgetControlLedgerDimension, PrimaryLedger from budgetSourceTrackingDetail
            group by BudgetControlLedgerDimension, PrimaryLedger
                where budgetSourceTrackingDetail.PrimaryLedger == Ledger::current()
            join TrackingDate, Category, BudgetModelId, BudgetModelSubModelId, BudgetModelType, BudgetModelDataAreaId
                from budgetSourceTracking
                group by TrackingDate, Category, BudgetModelId, BudgetModelSubModelId, BudgetModelType, BudgetModelDataAreaId
                    where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking
            exists join budgetSourcesToDelete
                where budgetSourcesToDelete.BudgetSourceRecId == budgetSourceTracking.BudgetSource;

        // Also populate relieving amounts since they may have a different alternate key
        // This is due to BudgetSourceDetailSummaryView using a combination of relieved and relieving tracking fields.
        BudgetSourceTrackingRelievingDetail relievingDetail;
        BudgetSourceTracking trackingRelieving;
        BudgetSourceTrackingSummaryRebuildTmp trackingSummaryExisting;
        trackingSummaryExisting.linkPhysicalTableInstance(trackingSummaryTmp);

        insert_recordset trackingSummaryTmp (
            BudgetControlLedgerDimension,
            PrimaryLedger,
            TrackingDate,
            Category,
            BudgetModelId,
            BudgetModelSubModelId,
            BudgetModelType,
            BudgetModelDataAreaId)
        select BudgetControlLedgerDimension, PrimaryLedger from budgetSourceTrackingDetail
            group by BudgetControlLedgerDimension, PrimaryLedger
                where budgetSourceTrackingDetail.PrimaryLedger == Ledger::current()
            join relievingDetail
                where relievingDetail.RelievedBudgetSourceTrackingDetail == budgetSourceTrackingDetail.RecId
            join TrackingDate from trackingRelieving
                group by TrackingDate
                    where relievingDetail.RelievingBudgetSourceTracking == trackingRelieving.RecId
            join Category, BudgetModelId, BudgetModelSubModelId, BudgetModelType, BudgetModelDataAreaId
                from budgetSourceTracking
                group by Category, BudgetModelId, BudgetModelSubModelId, BudgetModelType, BudgetModelDataAreaId
                    where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking
            exists join budgetSourcesToDelete
                where budgetSourcesToDelete.BudgetSourceRecId == budgetSourceTracking.BudgetSource
            notexists join trackingSummaryExisting
                where trackingSummaryExisting.BudgetControlLedgerDimension == budgetSourceTrackingDetail.BudgetControlLedgerDimension
                    && trackingSummaryExisting.PrimaryLedger == budgetSourceTrackingDetail.PrimaryLedger
                    && trackingSummaryExisting.TrackingDate == trackingRelieving.TrackingDate
                    && trackingSummaryExisting.Category == budgetSourceTracking.Category
                    && trackingSummaryExisting.BudgetModelId == budgetSourceTracking.BudgetModelId
                    && trackingSummaryExisting.BudgetModelSubModelId == budgetSourceTracking.BudgetModelSubModelId
                    && trackingSummaryExisting.BudgetModelType == budgetSourceTracking.BudgetModelType
                    && trackingSummaryExisting.BudgetModelDataAreaId == budgetSourceTracking.BudgetModelDataAreaId;

        return trackingSummaryTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExistingBudgetSourceData</Name>
				<Source><![CDATA[
    private void removeExistingBudgetSourceData(SysInstrumentationActivityContext _activityContext = null)
    {
        BudgetSourceTracking budgetSourceTracking;
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;
        BudgetCheckResultErrorWarningDetail budgetCheckResultErrorWarningDetail;

        ttsbegin;

        // Skip data methods and delete actions for all deletes
        budgetSourceTrackingRelievingDetail.skipDataMethods(true);
        budgetSourceTrackingRelievingDetail.skipDeleteActions(true);
        budgetSourceTrackingDetail.skipDataMethods(true);
        budgetSourceTrackingDetail.skipDeleteActions(true);
        budgetSourceTracking.skipDataMethods(true);
        budgetSourceTracking.skipDeleteActions(true);
        budgetCheckResultErrorWarningDetail.skipDataMethods(true);
        budgetCheckResultErrorWarningDetail.skipDeleteActions(true);

        delete_from budgetSourceTrackingRelievingDetail
            exists join budgetSourceTracking
                where budgetSourceTracking.RecId == budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking
            exists join budgetSourcesToDelete
                where budgetSourcesToDelete.budgetSourceRecId == budgetSourceTracking.BudgetSource;
        this.logRowCountAffected(_activityContext, budgetSourceTrackingRelievingDetail.RowCount(), TableStr(budgetSourceTrackingRelievingDetail));

        delete_from budgetSourceTrackingRelievingDetail
            exists join budgetSourceTrackingDetail
                where budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail == budgetSourceTrackingDetail.RecId
            exists join budgetSourceTracking
                where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking
            exists join budgetSourcesToDelete
                where budgetSourcesToDelete.budgetSourceRecId == budgetSourceTracking.BudgetSource;
        this.logRowCountAffected(_activityContext, budgetSourceTrackingRelievingDetail.RowCount(), TableStr(budgetSourceTrackingRelievingDetail));

        delete_from budgetSourceTrackingDetail
            exists join budgetSourceTracking
                where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking
            exists join budgetSourcesToDelete
                where budgetSourcesToDelete.budgetSourceRecId == budgetSourceTracking.BudgetSource;
        this.logRowCountAffected(_activityContext, budgetSourceTrackingDetail.RowCount(), TableStr(budgetSourceTrackingDetail));

        delete_from budgetSourceTracking
            exists join budgetSourcesToDelete
                where budgetSourcesToDelete.budgetSourceRecId == budgetSourceTracking.BudgetSource;
        this.logRowCountAffected(_activityContext, budgetSourceTracking.RowCount(), TableStr(budgetSourceTracking));

        delete_from budgetCheckResultErrorWarningDetail
            exists join budgetSourcesToDelete
                where budgetSourcesToDelete.budgetSourceRecId == budgetCheckResultErrorWarningDetail.BudgetSource;
        this.logRowCountAffected(_activityContext, budgetCheckResultErrorWarningDetail.RowCount(), TableStr(budgetCheckResultErrorWarningDetail));

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearExistingBudgetSource</Name>
				<Source><![CDATA[
    private void clearExistingBudgetSource()
    {
        BudgetSource budgetSource;

        budgetSource.skipDataMethods(true);
        budgetSource.skipDeleteActions(true);

        update_recordset budgetSource
            setting CheckResult = 0, CheckResultErrorWarning = 0, CheckResultErrorWarningType = 0
            exists join budgetSourcesToDelete
                where budgetSourcesToDelete.budgetSourceRecId == budgetSource.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExistingBudgetSource</Name>
				<Source><![CDATA[
    private void removeExistingBudgetSource(SysInstrumentationActivityContext _activityContext = null)
    {
        BudgetSource budgetSource;

        budgetSource.skipDataMethods(true);
        budgetSource.skipDeleteActions(true);

        delete_from budgetSource
            exists join budgetSourcesToDelete
                where budgetSourcesToDelete.budgetSourceRecId == budgetSource.RecId;

        this.logRowCountAffected(_activityContext, budgetSource.RowCount(), TableStr(budgetSource));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>