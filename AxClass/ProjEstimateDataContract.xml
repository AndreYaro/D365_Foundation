<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjEstimateDataContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Project estimate data contract.
/// </summary>
[DataContractAttribute]
class ProjEstimateDataContract extends ProjEstimateBaseDataContract
{
    //Data contract fields;
    QuotationProjTransType  projTransType;
    str                     description;
    QuotationProjCategory   projCategoryId;
    ResourceCategoryRecId   resourceCategoryRecId;
    ResourceRecId           resourceRecId;
    str                     resourceName;
    EcoResCategoryName      salesCategory;
    ItemId                  itemId;
    NonNegativeQuantity     quantity;
    NonNegativeCostPrice    unitCostPrice;
    NonNegativeSalesPrice   unitSalesPrice;
    NonNegativeTotal        totalCostPrice;
    NonNegativeTotal        totalSalesPrice;
    ProjLinePropertyId      ProjLinePropertyId;
    RecId                   recId;
    int                     estimateNumber;
    //Private Fields
    ProjTable               projTable;
    SalesQuotationTable     salesQuotation;
    TransDate               taskStartDate;
    PSAActivityEstimates    curEstimate;
    boolean                 isQuotation = false;
    str                     projTransactionType;
    int                     taskHasAnyResourceAssigned;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmProjTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the project transaction type value.
    /// </summary>
    /// <param name = "_projTransType">Project transaction type value.</param>
    /// <returns>Project transaction type value.</returns>
    public QuotationProjTransType parmProjTransType(QuotationProjTransType _projTransType = projTransType)
    {
        if (!prmIsDefault(_projTransType))
        {
            projTransType = _projTransType;
            projTransactionType = enum2Str(projTransType);
        }

        return _projTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the project transaction type string value.
    /// </summary>
    /// <param name = "_projTransactionType">Project transaction type string value.</param>
    /// <returns>Project transaction type string value.</returns>
    [DataMemberAttribute('projTransType')]
    protected str parmProjTransactionType(str _projTransactionType = projTransactionType)
    {
        if (!prmIsDefault(_projTransactionType))
        {
            projTransactionType = _projTransactionType;
        }

        return _projTransactionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the description value.
    /// </summary>
    /// <param name = "_description">Description value.</param>
    /// <returns>Description value.</returns>
    [DataMemberAttribute('description')]
    public str parmDescription(str _description = description)
    {
        if (!prmIsDefault(_description))
        {
            description = _description;
        }

        return _description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the project category id value.
    /// </summary>
    /// <param name = "_projCategoryId">Project category id value.</param>
    /// <returns>Project category id value</returns>
    [DataMemberAttribute('projCategoryId')]
    public str parmProjCategoryId(str _projCategoryId = projCategoryId)
    {
        if (!prmIsDefault(_projCategoryId))
        {
            projCategoryId = _projCategoryId;
        }

        return _projCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResourceCategoryRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the resource category record id value.
    /// </summary>
    /// <param name = "_resourceCategoryRecId">Resource category record id value.</param>
    /// <returns>Resource category record id value.</returns>
    [DataMemberAttribute('resourceCategoryRecId')]
    public int64 parmResourceCategoryRecId(ResourceCategoryRecId _resourceCategoryRecId = resourceCategoryRecId)
    {
        if (!prmIsDefault(_resourceCategoryRecId))
        {
            resourceCategoryRecId = _resourceCategoryRecId;
        }

        return _resourceCategoryRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the resource record id value.
    /// </summary>
    /// <param name = "_resourceRecId">Resource record id value.</param>
    /// <returns>Resource record id value.</returns>
    [DataMemberAttribute('resource')]
    public ResourceRecId parmResourceRecId(ResourceRecId _resourceRecId = resourceRecId)
    {
        if (!prmIsDefault(_resourceRecId))
        {
            resourceRecId = _resourceRecId;
        }

        return _resourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResourceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the resource name value.
    /// </summary>
    /// <param name = "_resourceName">Resource name value.</param>
    /// <returns>Resource name value.</returns>
    [DataMemberAttribute('resourceName')]
    public str parmResourceName(str _resourceName = resourceName)
    {
        if (!prmIsDefault(_resourceName))
        {
            resourceName = _resourceName;
        }

        return _resourceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the sales category value.
    /// </summary>
    /// <param name = "_salesCategory">Sales category value.</param>
    /// <returns>Sales category value.</returns>
    [DataMemberAttribute('salesCategory')]
    public EcoResCategoryName parmSalesCategory(EcoResCategoryName _salesCategory = salesCategory)
    {
        if (!prmIsDefault(_salesCategory))
        {
            salesCategory = _salesCategory;
        }

        return _salesCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the item id value.
    /// </summary>
    /// <param name = "_itemId">Item id value.</param>
    /// <returns>Item id value.</returns>
    [DataMemberAttribute('itemId')]
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        if (!prmIsDefault(_itemId))
        {
            itemId = _itemId;
        }

        return _itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmprojLinePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the project line property id value.
    /// </summary>
    /// <param name = "_projLinePropertyId">Project line property id value.</param>
    /// <returns>Project line property id value.</returns>
    [DataMemberAttribute('projLinePropertyId')]
    public ProjLinePropertyId parmprojLinePropertyId(ProjLinePropertyId _projLinePropertyId = projLinePropertyId)
    {
        if (!prmIsDefault(_projLinePropertyId))
        {
            projLinePropertyId = _projLinePropertyId;
        }

        return _projLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the quantity value.
    /// </summary>
    /// <param name = "_quantity">Quantity value.</param>
    /// <returns>Quantity value.</returns>
    [DataMemberAttribute('quantity')]
    public NonNegativeQuantity parmQuantity(NonNegativeQuantity _quantity = quantity)
    {
        if (!prmIsDefault(_quantity))
        {
            quantity = _quantity;
        }

        return _quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the cost price value.
    /// </summary>
    /// <param name = "_unitCostPrice">Cost price value.</param>
    /// <returns>Cost price value.</returns>
    [DataMemberAttribute('unitCostPrice')]
    public NonNegativeCostPrice parmUnitCostPrice(NonNegativeCostPrice _unitCostPrice = unitCostPrice)
    {
        if (!prmIsDefault(_unitCostPrice))
        {
            unitCostPrice = _unitCostPrice;
        }

        return _unitCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the unit sales price value.
    /// </summary>
    /// <param name = "_unitSalesPrice">Unit sales price value.</param>
    /// <returns>Unit sales price value.</returns>
    [DataMemberAttribute('unitSalesPrice')]
    public NonNegativeSalesPrice parmUnitSalesPrice(NonNegativeSalesPrice _unitSalesPrice = unitSalesPrice)
    {
        if (!prmIsDefault(_unitSalesPrice))
        {
            unitSalesPrice = _unitSalesPrice;
        }

        return _unitSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the total cost price value.
    /// </summary>
    /// <param name = "_totalCostPrice">Total cost price value.</param>
    /// <returns>Total cost price value.</returns>
    [DataMemberAttribute('totalCostPrice')]
    public NonNegativeTotal parmTotalCostPrice(NonNegativeTotal _totalCostPrice = totalCostPrice)
    {
        if (!prmIsDefault(_totalCostPrice))
        {
            totalCostPrice = _totalCostPrice;
        }

        return _totalCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the total sales price value.
    /// </summary>
    /// <param name = "_totalSalesPrice">Total sales price value.</param>
    /// <returns>Total sales price value.</returns>
    [DataMemberAttribute('totalSalesPrice')]
    public NonNegativeTotal parmTotalSalesPrice(NonNegativeTotal _totalSalesPrice = totalSalesPrice)
    {
        if (!prmIsDefault(_totalSalesPrice))
        {
            totalSalesPrice = _totalSalesPrice;
        }

        return _totalSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>PSAActivityEstimates</c> record id value.
    /// </summary>
    /// <param name = "_recId"><c>PSAActivityEstimates</c> record id value.</param>
    /// <returns><c>PSAActivityEstimates</c> record id value.</returns>
    [DataMemberAttribute('recId')]
    public RecId parmRecId(RecId _recId = recId)
    {
        if (!prmIsDefault(_recId))
        {
            recId = _recId;
        }

        return _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEstimateNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the estimate number value.
    /// </summary>
    /// <param name = "_estimateNumber">Estimate number value.</param>
    /// <returns>Estimate number value.</returns>
    [DataMemberAttribute('estimateNumber')]
    public int parmEstimateNumber(int _estimateNumber = estimateNumber)
    {
        if (!prmIsDefault(_estimateNumber))
        {
            estimateNumber = _estimateNumber;
        }

        return _estimateNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaskHasAnyResourceAssigned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the boolean value indiacating resource assignment for a given task.
    /// </summary>
    /// <param name = "_hasAnyResourceAssigned">Has any resource assigned value. </param>
    /// <returns>True if the task is assigned with a reource; otherwise False.</returns>
    [DataMemberAttribute('taskHasAnyResourceAssigned')]
    public int parmTaskHasAnyResourceAssigned(int _taskHasAnyResourceAssigned = taskHasAnyResourceAssigned)
    {
        if (!prmIsDefault(_taskHasAnyResourceAssigned))
        {
            taskHasAnyResourceAssigned = _taskHasAnyResourceAssigned;
        }

        return _taskHasAnyResourceAssigned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>ProjEstimateDataContract</c> class construct.
    /// </summary>
    /// <returns><c>ProjEstimateDataContract</c> class construct.</returns>
    public static ProjEstimateDataContract construct()
    {
        ProjEstimateDataContract estimates = new ProjEstimateDataContract();
        return estimates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer account.
    /// </summary>
    /// <returns>
    /// The project quotation's <c>CustAccount</c> if <c>isQuotation</c> is True.
    /// If False, the project's <c>CustAccount</c> is returned.
    ///  </returns>
    private CustAccount getCustAccount()
    {
        CustAccount custAccount = projTable.CustAccount;
        if (isQuotation)
        {
            custAccount = salesQuotation.CustAccount;
        }
        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the unit cost price based on the project transaction type.
    /// </summary>
    protected void setCostSalesPrice()
    {
        ProjPriceParameters priceParams;

        switch (this.ProjTransType)
        {
            case QuotationProjTransType::Hour:
                priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(projTable.ProjId, this.resourceRecId, this.ProjCategoryId, this.ProjLinePropertyId, taskStartDate, projTable.ProjInvoiceProjId, this.getCustAccount(), salesQuotation.PriceGroupId, this.resourceCategoryRecId);
                this.unitCostPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams, false);
				this.setSalesPriceFromCostPrice(projTable.ProjId);
                break;
            case QuotationProjTransType::Expense:
                priceParams = ProjCostPriceExpense::constructPriceParametersForFindCostPrice(projTable.ProjId, this.resourceRecId, this.ProjCategoryId, taskStartDate, projTable.ProjInvoiceProjId, this.getCustAccount());
                priceParams.parmProjPriceGroupID(this.priceGroup());
                this.unitCostPrice = ProjCostPriceExpense::findCostPriceByPriceParameters(priceParams);
				this.setSalesPriceFromCostPrice(projTable.ProjId);
                break;
            case QuotationProjTransType::Fee:
                this.setRevenueSalesPrice(projTable.ProjId);
                break;
            case QuotationProjTransType::Item:
                if (strLTrim(this.ItemId) == '')
                {
                    break;
                }
                InventTable inventTable = InventTable::find(this.ItemId);
                InventDim inventDim = InventDim::findInLegalEntity(curEstimate.InventDimId, curExt());
                InventDimParm       inventDimParmFinancial, inventDimParmActive;
                InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(this.ItemId);

                if (!curEstimate.InventDimId && !inventDim)
                {
                    inventDim.initFromInventTable(inventTable, InventItemOrderSetupType::Sales, inventDim);
                    inventDim = InventDim::findOrCreate(inventDim);
                    curEstimate.InventDimId = inventDim.inventDimId;
                }

                //set the Cost Price
                inventDimGroupSetup.inventDimParmActiveFinancialInventory(inventDimParmFinancial);
                inventDimGroupSetup.inventDimParmActive(inventDimParmActive);

                InventOnhand inventOnhand = InventOnhand::newParametersActive(this.ItemId, inventDim, inventDimParmFinancial, inventDimParmActive);

                this.unitCostPrice  = inventOnhand.costPricePcs();
                
                if (!this.unitCostPrice)
                {
                    this.unitCostPrice  = inventTable.costPcsPrice(curEstimate.InventDimId);
                }

                this.unitSalesPrice = this.retrieveUnitSalesPrice();

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveUnitSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales unit price.
    /// </summary>
    /// <returns>A <c>PriceCur</c> value.</returns>
    protected PriceCur retrieveUnitSalesPrice()
    {
        PriceDiscParameters parameters = this.createAndInitPriceDiscParameters();
        PriceDisc priceDisc = this.createPriceDiscInstance(parameters);

        priceDisc.findPrice(this.priceGroup());

        return priceDisc.price();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the price group id for finding price.
    /// </summary>
    /// <returns>A <c>PriceGroupId</c> value.</returns>
    protected PriceGroupId priceGroup()
    {
        return isQuotation? salesQuotation.PriceGroupId: projTable.ProjPriceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createPriceDiscParameters()
    {
        return PriceDiscParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createAndInitPriceDiscParameters()
    {
        PriceDiscParameters parameters = this.createPriceDiscParameters();
        InventDim inventDim = InventDim::findInLegalEntity(curEstimate.InventDimId, curExt());

        parameters.parmModuleType(ModuleInventPurchSales::Sales);
        parameters.parmItemId(this.itemId);
        parameters.parmInventDim(inventDim);
        parameters.parmUnitID(InventTableModule::find(this.itemId, ModuleInventPurchSales::Sales).UnitId);
        parameters.parmPriceDiscDate(taskStartDate);
        parameters.parmQty(this.quantity);
        parameters.parmAccountNum(this.getCustAccount());
        parameters.parmCurrencyCode((isQuotation? salesQuotation.CurrencyCode: projTable.accountingCurrency()));

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDisc</c> class.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>PriceDiscParameters</c> class.</param>
    /// <returns>An instance of the <c>PriceDisc</c> class.</returns>
    protected PriceDisc createPriceDiscInstance(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesPriceFromCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets unit sales price based on the project and project transaction type.
    /// </summary>
    /// <param name = "_projId">Project id.</param>
    protected void setSalesPriceFromCostPrice(str _projId = '')
    {
        ProjId projid = _projId;
        PSAActivityEstimates psaActivityEstimates;
        CurrencyCode currencyCode = CompanyInfoHelper::standardCurrency();

        if (!projid)
        {
            projid = projTable.ProjId;

            if (isQuotation)
            {
                if (salesQuotation.ProjIdRef)
                {
                    projid = salesQuotation.ProjIdRef;
                }
                currencyCode = salesQuotation.CurrencyCode;
            }
        }
        else
        {
            currencyCode = psaActivityEstimates.currencyCode(projid);
        }

        //update the worker, standard currency and cust account apt
        ProjPriceParameters priceParams;
        switch (this.ProjTransType)
        {
            case QuotationProjTransType::Hour:
                priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
					projid, 
					this.resourceRecId, 
					this.projCategoryId, 
					this.projLinePropertyId, 
					this.unitCostPrice,
                    currencyCode, 
					taskStartDate, 
					salesQuotation.PriceGroupId, 
					projTable.ProjInvoiceProjId, 
					this.getCustAccount(), 
					this.resourceCategoryRecId);
                [this.unitSalesPrice] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams, salesQuotation.PriceGroupId ? true : false);
                break;

            case QuotationProjTransType::Expense :
                priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
					projid, 
					this.resourceRecId, 
					this.projCategoryId, 
					this.unitCostPrice,
                    CompanyInfoHelper::standardCurrency(), 
					currencyCode, 
					taskStartDate, 
					salesQuotation.PriceGroupId, 
					projTable.ProjInvoiceProjId, 
					this.getCustAccount());
                [this.unitSalesPrice] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams, salesQuotation.PriceGroupId ? true : false, true);
				break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRevenueSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the unit sales price for fee transaction type.
    /// </summary>
    /// <param name = "_projId">Project id.</param>
    protected void setRevenueSalesPrice(ProjId _projId)
    {
        PSAActivityEstimates psaActivityEstimates;
        CurrencyCode curCode = psaActivityEstimates.currencyCode(_projId);

        if (isQuotation)
        {
            curCode = salesQuotation.CurrencyCode;
        }

        if (salesQuotation.PriceGroupId)
        {
            [this.unitSalesPrice] = ProjRevenueSalesPrice::findProjRevenueSalesPrice(_projId,
                                                                                 0,
                                                                                 this.projCategoryId,
                                                                                 curCode,
                                                                                 taskStartDate,
                                                                                 salesQuotation.PriceGroupId,
                                                                                 salesQuotation.PriceGroupId ? true : false,
                                                                                 this.resourceCategoryRecId,
                                                                                 projTable.ProjInvoiceProjId,
                                                                                 this.getCustAccount());
        }
        else
        {
            this.unitSalesPrice = ProjRevenueSalesPrice::psaFindCustSalesPrice(_projId,
                                                                           this.getCustAccount(),
                                                                           0,
                                                                           this.projCategoryId,
                                                                           curCode,
                                                                           taskStartDate,
                                                                           this.resourceCategoryRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTotalCostSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the total cost and sales price value.
    /// </summary>
    private void setTotalCostSalesPrice()
    {
        ProjLineProperty    lineProperty;

        NonNegativeTotal applyMarkup(NonNegativeTotal _total, Percent _Markup)
        {
            if (_Markup > 0)
            {
                NonNegativeTotal markedUpTotal = _total;
                markedUpTotal += markedUpTotal * _Markup / 100;
                return markedUpTotal;
            }
            return _total;
        }

        select firstOnly lineProperty
            where lineProperty.LinePropertyId == this.ProjLinePropertyId;

        if (this.projTransType == QuotationProjTransType::Hour)
        {
            this.totalCostPrice     = applyMarkup((this.quantity * this.unitCostPrice), lineProperty.CostMarkup) + this.calcIndirectAmount(PSAIndirectComponentType::Cost);
            this.totalSalesPrice    = this.quantity * this.unitSalesPrice + this.calcIndirectAmount(PSAIndirectComponentType::Revenue);
        }
        else
        {
            this.totalCostPrice     = applyMarkup((this.quantity * this.unitCostPrice), lineProperty.CostMarkup);
            this.totalSalesPrice    = this.quantity * this.unitSalesPrice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIndirectAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the indirect cost for hour transactions.
    /// </summary>
    /// <param name = "_compType">
    /// The PSAIndirectComponent type.
    /// </param>
    /// <returns>
    /// Returns the indirect amount for hour transactions.
    /// </returns>
    private Amount calcIndirectAmount(PSAIndirectComponentType _compType)
    {
        Amount indirectCost = 0;

        Amount base = _compType == PSAIndirectComponentType::Cost ? this.unitCostPrice : this.unitSalesPrice;
        PSAIndirectCostCalculation  indirectCostCalculation = new PSAIndirectCostCalculation();
        PSAIndirectComponentGroupId componentGroupId = PSAComponentGroupAssignment::findAssignment(projTable.ProjId,
                                                                        this.resourceRecId,
                                                                        this.projCategoryId,
                                                                        taskStartDate).IndirectComponentGroup;
        PSAIndirectComponent        indirectComponent;
        PSAIndirectCompoundingSetup indirectCompoundingSetup;

        while select ComponentId from indirectCompoundingSetup
            group by ComponentId
            exists join indirectComponent
                where indirectCompoundingSetup.ProjComponentGroupId == componentGroupId
                    && indirectCompoundingSetup.DateFrom <= taskStartDate
                    && indirectComponent.ComponentId == indirectCompoundingSetup.ComponentId
        {
            indirectCost +=  indirectCostCalculation.calculate(base,
                                                                componentGroupId,
                                                                _compType,
                                                                indirectCompoundingSetup.ComponentId,
                                                                taskStartDate,
                                                                0,
                                                                this.quantity);
        }

        return indirectCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the project line property id value.
    /// </summary>
    private void setLineProperty()
    {
        this.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(projTable.ProjId, this.projCategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the description value.
    /// </summary>
    private void setDescription()
    {
        if (this.Description == '')
        {
            if (this.projTransType != QuotationProjTransType::Item)
            {
                this.description = ProjCategory::find(this.ProjCategoryId).Name;
            }
            else
            {
                if (strLTrim(this.ItemId) == '')
                {
                    return;
                }

                CustAccount custAccount;
                LanguageId languageId;

                if (isQuotation)
                {
                    custAccount = SalesQuotation.CustAccount;
                    languageId = SalesQuotation.LanguageId;
                }
                else
                {
                    custAccount = projTable.CustAccount;
                    languageId = DirPartyTable::findRec(CustTable::find(custAccount).Party).LanguageId;
                }

                InventTable inventTable = InventTable::find(this.ItemId);

                // recond may not be saved. Create a temp InventDimId
                if (!curEstimate.InventDimId)
                {
                    InventDim inventDim;
                    inventDim.initFromInventTable(inventTable, InventItemOrderSetupType::Sales, inventDim);
                    inventDim = InventDim::findOrCreate(inventDim);

                    curEstimate.InventDimId = inventDim.inventDimId;
                }

                this.Description = inventTable.productName(languageId, curEstimate.InventDimId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesCategoryFromItemNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the item sales category based on the item number.
    /// </summary>
    private void setSalesCategoryFromItemNumber()
    {
        this.salesCategory = EcoResCategory::find(EcoResProductCategory::findByItemIdCategoryHierarchyRole(
                                                    this.itemId,
                                                    EcoResCategoryNamedHierarchyRole::Sales).Category).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjCategoryFromItemNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the project category based on the item number.
    /// </summary>
    private void setProjCategoryFromItemNumber()
    {
        InventTable inventTable;

        select ProjCategoryId from inventTable
            where inventTable.ItemId == this.itemId;

        if (inventTable.projCategoryId)
        {
            this.projCategoryId = inventTable.projCategoryId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjCategoryRelatedFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the project category fields.
    /// </summary>
    private void updateProjCategoryRelatedFields()
    {
        this.setDescription();
        this.setCostSalesPrice();
        this.setTotalCostSalesPrice();
        this.setLineProperty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItemNumberRelatedFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the item number related fields.
    /// </summary>
    private void updateItemNumberRelatedFields()
    {
        this.setDescription();
        this.setCostSalesPrice();
        this.setTotalCostSalesPrice();
        this.setSalesCategoryFromItemNumber();
        this.setProjCategoryFromItemNumber();
        this.setLineProperty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjTransTypeRelatedFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates project transaction type related fields.
    /// </summary>
    protected void updateProjTransTypeRelatedFields()
    {
        switch (this.projTransType)
        {
            case QuotationProjTransType::Hour:
                this.itemId = '';
                break;

            case QuotationProjTransType::Item:
                break;

            case QuotationProjTransType::Expense:
                this.itemId = '';
                break;

            case QuotationProjTransType::Fee:
                this.unitCostPrice = 0;
                this.quantity = 1;
                this.itemId = '';
                break;

            case QuotationProjTransType::None:
                error("@SYS84629");
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the default category id based on the project transaction type.
    /// </summary>
    protected void findDefaultCategoryId()
    {
        Common                          hierarchyLinkedTable = HierarchyLinkTable_Extension::findLinkedTableByHierarchyId(this.hierarchyId);
        ProjParameters                  projParams = ProjParameters::find();
        ProjTable                       quotationProject;
        boolean                         validateCategories = false;

        if (isQuotation){
            if (salesQuotation.ProjIdRef)
            {
                quotationProject = projTable::find(salesQuotation.ProjIdRef);
                validateCategories = quotationProject.ValidateProjCategory;
            }
            else
            {
                validateCategories = false;
            }
        }
        else
        {
            validateCategories = projTable.ValidateProjCategory;
        }

        if (!validateCategories)
        {
            switch (this.projTransType)
            {
                case QuotationProjTransType::Hour:
                    this.projCategoryId = ProjParameters::find().EmplCategory;
                    break;

                case QuotationProjTransType::Item:
                    this.projCategoryId = ProjParameters::find().ItemCategory;
                    break;

                case QuotationProjTransType::Expense:
                    this.projCategoryId = ProjParameters::find().CostCategory;
                    break;

                case QuotationProjTransType::Fee:
                    this.projCategoryId = ProjParameters::find().RevenueCategory;
                    break;

                case QuotationProjTransType::None:
                    error("@SYS84629");
                    break;
            }
        }
        else
        {
            ProjProjectCategoryAssoc    validationView;
            ProjCategory                projCategory;
            boolean                     foundCategory = false;

            while select CategoryId from validationView
                Group By validationView.CategoryId
                where validationView.ProjId == projTable.ProjId
            {
                projCategory = ProjCategory::find(validationView.CategoryId);
                if (enum2Value(projCategory.CategoryType) == enum2Value(this.projTransType))
                {
                    this.projCategoryId = projCategory.CategoryId;
                    foundCategory = true;
                    break;
                }
            }
            if (!foundCategory)
            {
                this.projCategoryId = '';
                this.description = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRoleRelatedFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates role related fields.
    /// </summary>
    private void updateRoleRelatedFields()
    {
        this.setDescription();
        this.setCostSalesPrice();
        this.setTotalCostSalesPrice();
        this.setLineProperty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ProjEstimateDataContract</c> class fields upon change in the control fields.
    /// </summary>
    /// <param name = "_fieldChanged">The field name which is changed.</param>
    public void fieldChanged(
        str _fieldChanged)
    {
        switch (_fieldChanged)
        {
            case 'projTransType':
                this.updateProjTransTypeRelatedFields();
                this.findDefaultCategoryId();
                this.updateProjCategoryRelatedFields();
                break;
            case 'projCategoryId':
                this.updateProjCategoryRelatedFields();
                break;
            case 'resourceCategoryStr':
                this.updateRoleRelatedFields();
                break;
            case 'itemId':
                this.updateItemNumberRelatedFields();
                break;
            case 'unitCostPrice':
                this.setSalesPriceFromCostPrice(projTable.ProjId);
                this.setTotalCostSalesPrice();
                break;
            case 'quantity':
                this.setCostSalesPrice();
                this.setTotalCostSalesPrice();
                break;
            case 'unitSalesPrice':
                this.setTotalCostSalesPrice();
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEstimates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ProjEstimateDataContract</c> class fields upon change in the control fields.
    /// </summary>
    /// <param name = "_fieldChanged">The field name which is changed.</param>
    /// <param name = "_hierarchyId">Hierarchy Id.</param>
    /// <param name = "_hierarchyTaskId">Task number.</param>
    /// <param name = "_taskStartDate">Start date.</param>
    /// <param name = "_estimateNumber">Estimate number.</param>
    /// <param name = "_transactionType">Project transaction type.</param>
    /// <param name = "_projCategoryId">Project category id.</param>
    /// <param name = "_resourceRole">Resource role.</param>
    /// <param name = "_resource">Resource.</param>
    /// <param name = "_itemId">Item id.</param>
    /// <param name = "_description">Description.</param>
    /// <param name = "_projLinePropertyId">Projlineproperty ID.</param>
    /// <param name = "_quantity">Quantity.</param>
    /// <param name = "_unitCostPrice">Unit cost price.</param>
    /// <param name = "_unitSalesPrice">Unit sales price.</param>
    /// <param name = "_salesCategory">Sales category.</param>
    public void updateEstimates(str                     _fieldChanged,
                                HierarchyIdBase         _hierarchyId,
                                ProjHierarchyTaskId     _hierarchyTaskId,
                                TransDate               _taskStartDate,
				                int                     _estimateNumber,
                                QuotationProjTransType  _transactionType,
                                QuotationProjCategory   _projCategoryId,
                                ResourceCategoryRecId   _resourceRole,
                                ResourceRecId           _resource,
                                ItemId                  _itemId,
                                Description             _description,
                                ProjLinePropertyId      _projLinePropertyId,                                
                                NonNegativeQuantity     _quantity = 1,
                                NonNegativeCostPrice	_unitCostPrice = 0,
                                NonNegativeCostPrice	_unitSalesPrice = 0,
                                EcoResCategoryName      _salesCategory = '')
    {
        this.hierarchyId = _hierarchyId;
        this.hierarchyTaskId = _hierarchyTaskId;
        this.projTransType = _transactionType;
        this.projCategoryId = _projCategoryId;
        this.resourceCategoryRecId = _resourceRole;
        this.resourceRecId = _resource;
        this.resourceName = PSAProjSchedRole::findByRecId(_resource).Name;
        this.itemId = _itemId;
        this.quantity = _quantity;
        this.unitCostPrice = _unitCostPrice;
        this.estimateNumber = _estimateNumber;
        this.projTransactionType = enum2Str(_transactionType);
        this.description = strLRTrim(_description);
        this.ProjLinePropertyId = _projLinePropertyId;
        this.unitSalesPrice = _unitSalesPrice;
        this.salesCategory = _salesCategory;

        taskStartDate = _taskStartDate;

        projTable = this.getProjTableForUpdateEstimates();
        salesQuotation = SalesQuotationTable::find(Hierarchy::find(this.hierarchyId).Name);

        if (!projTable && salesQuotation)
        {
            isQuotation = true;
        }

        this.fieldChanged(_fieldChanged);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjTableForUpdateEstimates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the appropriate <c>ProjTable</c> buffer for updating estimates.
    /// </summary>
    /// <returns>A <c>ProjTable</c> buffer for updating estimates.</returns>
    protected ProjTable getProjTableForUpdateEstimates()
    {
        return ProjPlanVersionDetail::getProjTableByHierarchyId(this.hierarchyId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>