<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastCompGridView</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>HcmPositionForecastCompGridView</c> class is the view model class
///    for the <c>HcmPositionForecastCompensationGrid</c> form.
/// </summary>
class HcmPositionForecastCompGridView
{
    // Temporary table
    HcmTmpPositionForecastCompensationGrid          tmpCompensationGrid;
    HcmPositionForecastCompGroupRefPoint            compGroupRefPoint;

    HcmPositionForecastCompensationRateRecId        compensationRateRecId;
    HRCCompRefPointSetup                            hrcCompRefPointSetup;
    #define.Overview('Overview_')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearTmpGrid</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Clears <c>HcmPositionForecastSalaryGroupComTmpGrid</c> table.
    /// </summary>
    public void clearTmpGrid()
    {
        delete_from tmpcompensationGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompensationLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Deletes record from <c>HcmPositionForecastCompensationGrid </c> table based on <c>HcmCompensationLevel</c> and <c>HcmPositionForecastCompGroupRefPoint</c> table ID.
    /// </summary>
    /// <param name="_deleteCompensationLevelRecId">
    /// The <c>HcmCompensationLevel</c> record id value.
    /// </param>
    public void deleteCompensationLevel(HcmCompensationLevelRecId _deleteCompensationLevelRecId)
    {
        HcmPositionForecastCompensationGrid compensationGrid;

        if (!compGroupRefPoint.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_deleteCompensationLevelRecId)
        {
            delete_from compensationGrid
                where compensationGrid.CompensationGroupRefPointId  == compGroupRefPoint.RecId
                &&    compensationGrid.CompensationLevel == _deleteCompensationLevelRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record buffer for <c>HcmPositionForecastCompensationGrid</c> table.
    /// </summary>
    /// <param name="_compensationGrid">
    /// The <c>HcmPositionForecastCompensationGrid</c> record buffer that represents compensation for the step and level.
    /// </param>
    /// <param name="_refPointSetupLine">
    /// The <c>HRCCompRefPointSetupLine</c> record buffer that represents step.
    /// </param>
    /// <param name="_tmpCompensationGrid">
    /// The <c>HcmTmpPositionForecastCompensationGrid</c> record buffer that represents the amount associated with the step and level.
    /// </param>
    /// <param name="_refPointCounter">
    /// <c>Counter</c> represents the position of the step in the grid.
    /// </param>
    protected void initCompRecord(HcmPositionForecastCompensationGrid                   _compensationGrid,
                                  HRCCompRefPointSetupLine                              _refPointSetupLine,
                                  HcmTmpPositionForecastCompensationGrid                _tmpCompensationGrid,
                                  Counter                                               _refPointCounter)
    {
        _compensationGrid.CompensationGroupRefPointId         = compGroupRefPoint.RecId;
        _compensationGrid.RefPointSetupId               = _refPointSetupLine.RefPointSetupId;
        _compensationGrid.RefPointId                    = _refPointSetupLine.RefPointId;
        _compensationGrid.CompensationLevel             = _tmpCompensationGrid.CompensationLevel;
        _compensationGrid.Amount                        = _tmpCompensationGrid.getFieldValue(fieldstr(HcmTmpPositionForecastCompensationGrid, Amount),
                                                                                                                    _refPointCounter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMembers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>HcmPositionForecastCompGroupRefPoint</c> record buffer.
    /// </summary>
    protected void initMembers()
    {
        compGroupRefPoint = HcmPositionForecastCompGroupRefPoint::findByCompRate(compensationRateRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpGrid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>HcmPositionForecastCompGroupRefPoint</c>, <c>HcmCompensationLevel</c> and <c>LineNum</c>
    /// for the <c>HcmTmpPositionForecastCompensationGrid</c> buffer.
    /// </summary>
    /// <param name="_compensationLevelRecId">
    /// The <c>HcmCompensationLevelRecId</c> record Id value of the <c>HcmCompensationLevel</c> table.
    /// </param>
    protected void initTmpGrid(HcmCompensationLevelRecId _compensationLevelRecId)
    {
        tmpcompensationGrid.CompensationGroupRefPoint = compGroupRefPoint.RecId;
        tmpcompensationGrid.CompensationLevel = _compensationLevelRecId;
        tmpcompensationGrid.initFromHcmCompensationLevel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>HcmPositionForecastCompGridView</c> class instance.
    /// </summary>
    /// <param name="_compensationRateRecId">
    /// The <c>HcmPositionForecastCompRateRecId</c> value used to constrain the class instance's view model.
    /// <c>HcmPositionForecastCompGridView</c> class instance.
    /// </param>
    public void new(HcmPositionForecastCompensationRateRecId _compensationRateRecId)
    {
        compensationRateRecId = _compensationRateRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompGroupRefPoint</Name>
				<Source><![CDATA[
    public HcmPositionForecastCompGroupRefPoint parmCompGroupRefPoint()
    {
        return compGroupRefPoint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpGrid</Name>
				<Source><![CDATA[
    public HcmTmpPositionForecastCompensationGrid parmTmpGrid(HcmTmpPositionForecastCompensationGrid _tmpcompensationGrid = tmpcompensationGrid)
    {
        tmpcompensationGrid = _tmpcompensationGrid;

        return tmpcompensationGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setColumnLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the grid column label for the compensation grid.
    /// </summary>
    /// <param name="_refPointSetupLine">
    /// The <c>HRCCompRefPointSetupLine</c> record buffer that represents step.
    /// </param>
    /// <returns>
    /// The <c>LabelType</c> value of the column.
    /// </returns>
    protected LabelType setColumnLabel(HRCCompRefPointSetupLine _refPointSetupLine)
    {
        return _refPointSetupLine.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the columns on gird of the <c>HcmPositionForecastCompensationGrid</c> form.
    /// </summary>
    /// <param name="_compGrid_ds">
    ///  <c>FormDataSource</c> of the <c>HcmPositionForecastCompensationGrid</c> form.
    /// </param>
    /// <param name="_design">
    /// The <c>FormDesign</c> that contains the form design.
    /// </param>
    public void setControls(FormDataSource _compGrid_ds, FormDesign _design)
    {
        Counter                                     refPoints, i;
        HRCCompRefPointSetupLine                    refPointSetupLine;
        SysDictField                                dictField = new SysDictField(tablenum(HcmTmpPositionForecastCompensationGrid), fieldnum(HcmTmpPositionForecastCompensationGrid, Amount));
        FormRealControl                             formControl;
        HcmTmpPositionForecastCompensationGrid      compGrid;

        refPointSetupLine.recordLevelSecurity(true);

        while select Description from refPointSetupLine
            order by RefPointSetupId, LineNum
            where refPointSetupLine.RefPointSetupId == compGroupRefPoint.RefPointSetupId
        {
            refPoints++;

            //Show fields
            _compGrid_ds.object(fieldId2Ext(fieldnum(HcmTmpPositionForecastCompensationGrid, Amount), refPoints)).visible(true);

            //Set grid column label
            formControl = _design.controlName(strfmt('%1%2[%3]',#Overview, dictField.name(), int2str(refPoints)));
            formControl.label(this.setColumnLabel(refPointSetupLine));
        }

        for (i= refPoints+1; i <= dimof(compGrid.Amount); i++)
        {
            //Hide not used fields
            _compGrid_ds.object(fieldId2Ext(fieldnum(HcmTmpPositionForecastCompensationGrid, Amount), i)).visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpGridData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills <c>HcmTmpPositionForecastCompensationGrid</c> by iterating through <c>HcmPositionForecastCompensationGrid</c> table.
    /// </summary>
    public void setTmpGridData()
    {
        HRCCompRefPointSetupLine                   refPointSetupLine;
        HcmPositionForecastCompensationGrid        compGroupedByLevels;
        Counter                                    refPointCounter;
        HcmPositionForecastCompensationGrid        compensationGrid;

        this.clearTmpGrid();
        this.initMembers();

        while select CompensationLevel from compGroupedByLevels
            group by CompensationGroupRefPointId, CompensationLevel
                where compGroupedByLevels.CompensationGroupRefPointId == compGroupRefPoint.RecId
        {
            tmpcompensationGrid.clear();
            tmpcompensationGrid.initValue();
            this.initTmpGrid(compGroupedByLevels.CompensationLevel);

            refPointCounter = 0;

            while select RefPointId, RefPointSetupId, LineNum from refPointSetupLine
                order by RefPointSetupId, LineNum
                where refPointSetupLine.RefPointSetupId == compGroupRefPoint.RefPointSetupId
            {
                refPointCounter++;
                // Ensure that RLS is used
                compensationGrid = HcmPositionForecastCompensationGrid::findByCompensationGrid(compGroupRefPoint.RecId,
                                                                                               refPointSetupLine.RefPointSetupId,
                                                                                               refPointSetupLine.RefPointId,
                                                                                               compGroupedByLevels.CompensationLevel,
                                                                                               false);
                //Comp values not found due to RLS is not inserted in temporary table.
                if (compensationGrid)
                {
                    tmpcompensationGrid.setFieldValue(fieldstr(HcmPositionForecastCompensationGrid, Amount), compensationGrid.Amount, refPointCounter);
                }
            }
            tmpcompensationGrid.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePositionForecastCompGrid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or Updates <c>HcmPositionForecastCompensationGrid</c> record by copying the from <c>HcmTmpPositionForecastCompensationGrid</c> table.
    /// </summary>
    /// <param name="_hcmTmpPositionForecastCompensationGrid">
    ///  Current selection of  <c>HcmTmpPositionForecastCompensationGrid</c> record on <c>HcmPositionForecastCompensationGrid</c> form.
    /// </param>
    public void updatePositionForecastCompGrid(HcmTmpPositionForecastCompensationGrid _hcmTmpPositionForecastCompensationGrid)
    {
        Counter                                 refPointCounter;
        HRCCompRefPointSetupLine                refPointSetupLine;
        HcmPositionForecastCompensationGrid     positionForecastCompensationGrid;

        ttsbegin;
        while select RefPointSetupId, RefPointId from  refPointSetupLine
            order by LineNum
            where refPointSetupLine.RefPointSetupId == compGroupRefPoint.RefPointSetupId
        {
            refPointCounter++;
            positionForecastCompensationGrid = HcmPositionForecastCompensationGrid::findByCompensationGrid(compGroupRefPoint.RecId,
                                                                                                              refPointSetupLine.RefPointSetupId,
                                                                                                              refPointSetupLine.RefPointId,
                                                                                                              _hcmTmpPositionForecastCompensationGrid.CompensationLevel,
                                                                                                              true);
            if (positionForecastCompensationGrid)
            {
                //Records not found due to RLS can not be updated.
                this.initCompRecord(positionForecastCompensationGrid, refPointSetupLine, _hcmTmpPositionForecastCompensationGrid, refPointCounter);
                this.writeCompRecord(positionForecastCompensationGrid);
            }
            else
            {
                positionForecastCompensationGrid.clear();
                positionForecastCompensationGrid.initValue();
                this.initCompRecord(positionForecastCompensationGrid, refPointSetupLine, _hcmTmpPositionForecastCompensationGrid, refPointCounter);
                this.writeCompRecord(positionForecastCompensationGrid);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeCompRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and writes data into <c>HcmPositionForecastCompensationGrid</c> table.
    /// </summary>
    /// <param name="_hcmPositionForecastCompensationGrid">
    /// The <c>HcmPositionForecastCompensationGrid</c> record.
    /// </param>
    protected void writeCompRecord(HcmPositionForecastCompensationGrid _hcmPositionForecastCompensationGrid)
    {
        if (_hcmPositionForecastCompensationGrid.validateWrite())
        {
            _hcmPositionForecastCompensationGrid.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCompGroupRefPointByCompRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the association between a compensation group and a compensation grid.
    /// </summary>
    /// <param name="_compRateRecId">
    /// The compensation rate record Id value of the compensation rate for which to associate to the compensation grid.
    /// </param>
    /// <param name="_refPointSetupId">
    /// The <c>HRCCompRefPointSetupId</c> value of the grid for which to associate to the compensation group.
    /// </param>
    /// <returns>
    /// The <c>HcmPositionForecastCompGroupRefPoint</c> record created by the method.
    /// </returns>
    public static HcmPositionForecastCompGroupRefPoint createCompGroupRefPointByCompRate(HcmPositionForecastCompensationRateRecId _compRateRecId,
                                                 HRCCompRefPointSetupId _refPointSetupId)
    {
        HcmPositionForecastCompGroupRefPoint  compGroupRefPoint;

        compGroupRefPoint.RefPointSetupId = _refPointSetupId;
        compGroupRefPoint.CompensationRate = _compRateRecId;
        compGroupRefPoint.insert();

        return compGroupRefPoint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openMenuItemForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open a form referenced by the menu item
    /// </summary>
    /// <param name="menuItemStr">
    /// The menu item string
    /// </param>
    /// <param name="_record">
    /// The record passed as args
    /// </param>
    /// <param name="_caller">
    /// The caller object
    /// </param>
    /// <param name="_openMode">
    /// The mode to open the form in
    /// </param>
    /// <returns>
    /// true if the form closed from the OK button; otherwise, false.
    /// </returns>
    /// <param name="_modal">
    /// Whether to open the form modally.
    /// </param>
    /// <exception cref="Exception::Error">
    /// No access rights.
    /// </exception>
    static boolean openMenuItemForm(str menuItemStr, Common _record, Object _caller,
                                    OpenMode _openMode = OpenMode::Auto, boolean _modal = false)
    {
        MenuFunction    menuFunction;
        Args            args;
        FormRun         formRun;

        menuFunction = new MenuFunction(menuItemStr,MenuItemType::Display);
        menuFunction.openMode(_openMode);

        // Check access rights
        if (!menuFunction || !menuFunction.checkAccessRights())
        {
            // Access rights are not sufficient to use this function.
            throw error("@SYS81158");
        }

        args         = new Args();
        args.record(_record);
        args.caller(_caller);

        formRun = menuFunction.create(args);

        if (formRun)
        {
            formRun.run();
            formRun.wait(_modal);
        }

        return formRun.closedOk();
    }

]]></Source>
			</Method>
			<Method>
				<Name>Construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>HcmPositionForecastCompGridView</c> class instance.
    /// </summary>
    /// <param name="_compensationRateRecId">
    /// The <c>HcmPositionForecastCompensationRateRecId</c> value used to constrain the class instance's view model.
    /// <c>HcmPositionForecastCompGridView</c> class instance.
    /// </param>
    public static HcmPositionForecastCompGridView Construct(HcmPositionForecastCompensationRateRecId _compensationRateRecId)
    {
        return new HcmPositionForecastCompGridView(_compensationRateRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>massUpdateCompensationGrid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs mass update on compensation grid records based on the <c>HcmPositionForecastCompAdjustmentType</c> enum value and <c>AdjustmentValue</c> field value.
    /// </summary>
    /// <param name="_hcmTmpPositionForecastCompensationGrid">
    /// The table buffer for <c>HcmTmpPositionForecastCompensationGrid</c> table.
    /// </param>
    /// <param name="_compGridView">
    /// The <c>HcmPositionForecastCompGridView</c> class instance.
    /// </param>
    /// <param name="_adjustmentType">
    /// The <c>HcmPositionForecastCompAdjustmentType</c> enum value; optional.
    /// </param>
    /// <param name="_adjustmentValue">
    /// The adjustment value for mass update; optional.
    /// </param>
    /// <returns>
    /// true if mass update is performed; otherwise, false.
    /// </returns>
    public static boolean massUpdateCompensationGrid(
        HcmTmpPositionForecastCompensationGrid _hcmTmpPositionForecastCompensationGrid,
        HcmPositionForecastCompGridView        _compGridView,
        HcmPositionForecastCompAdjustmentType  _adjustmentType = HcmPositionForecastCompAdjustmentType::FlatAmount,
        HcmPositionForecastAmountCur           _adjustmentValue = 0)
    {
        HRCCompRefPointSetupLine             refPointSetupLine;
        HcmPositionForecastCompensationGrid  compensationGrid;
        HcmPositionForecastCompGroupRefPoint hcmPositionForecastCompGroupRefPoint;
        boolean                              isUpdated;

        if (_adjustmentType != HcmPositionForecastCompAdjustmentType::Percentage || _adjustmentValue >= -100)
        {
            select count(RecId) from refPointSetupLine
                exists join compensationGrid
                    where refPointSetupLine.RefPointSetupId == compensationGrid.RefPointSetupId
                        && refPointSetupLine.RefPointId == compensationGrid.RefPointId
                        && compensationGrid.CompensationLevel == _hcmTmpPositionForecastCompensationGrid.CompensationLevel
                    exists join hcmPositionForecastCompGroupRefPoint
                        where hcmPositionForecastCompGroupRefPoint.RecId  == compensationGrid.CompensationGroupRefPointId
                            && hcmPositionForecastCompGroupRefPoint.RecId == _hcmTmpPositionForecastCompensationGrid.CompensationGroupRefPoint;

            if (refPointSetupLine.RecId)
            {
                // Iterate through all the rows in the grid
                Counter                              refPoints = 0;
                Percent                              percentage;
                HcmPositionForecastAmountCur         newAmount, originalAmount;
                while select forupdate _hcmTmpPositionForecastCompensationGrid
                {
                    for (refPoints = 1; refPoints <= refPointSetupLine.RecId; refPoints++)
                    {
                        originalAmount = _hcmTmpPositionForecastCompensationGrid.Amount[refPoints];

                        if (_adjustmentType == HcmPositionForecastCompAdjustmentType::Percentage)
                        {
                            // Percentage is selected
                            percentage = _adjustmentValue / 100.0;
                            newAmount  = originalAmount + (originalAmount * percentage);
                        }
                        else
                        {
                            // Flat amount is selected
                            newAmount = originalAmount + _adjustmentValue;
                        }

                        // Only positive values are valid
                        newAmount = newAmount < 0 ? 0: newAmount;
                        _hcmTmpPositionForecastCompensationGrid.Amount[refPoints] = decround(newAmount, 2);
                    }

                    if (_hcmTmpPositionForecastCompensationGrid.validateWrite())
                    {
                        _hcmTmpPositionForecastCompensationGrid.update();
                        //Update HcmPositionForecastCompensationGrid table with temp table record
                        _compGridView.updatePositionForecastCompGrid(_hcmTmpPositionForecastCompensationGrid);
                        isUpdated = true;
                    }
                }
            }
        }

        return isUpdated;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>