<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemIdLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventItemIdLookup</c> class builds <c>InventTableExpanded</c> queries for lookup of ItemId in InventTable.
/// </summary>
public class InventItemIdLookup
{
    Query                   query;
    QueryBuildDataSource    inventTableExpandedQBDS;
    boolean                 isItemTypeFiltered = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs new instance of the object.
    /// </summary>
    /// <param name="_ctrl">The control for which a lookup will be opened.</param>
    protected void new()
    {
        query = new Query();
        inventTableExpandedQBDS = query.addDataSource(tableNum(InventTableExpanded));
        inventTableExpandedQBDS.addSortField(fieldNum(InventTableExpanded, ItemId));
        inventTableExpandedQBDS.firstFast(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs new instance of the object.
    /// </summary>
    /// <param name="_ctrl">The control for which a lookup will be opened.</param>
    public static InventItemIdLookup construct()
    {
        return new InventItemIdLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns query for the lookup.
    /// </summary>
    /// <param name="_query">The query.</param>
    /// <returns>Query object.</returns>
    public Query parmQuery(Query _query = query)
    {
        if (!prmisdefault(_query))
        {
            query = _query;
            inventTableExpandedQBDS = query.dataSourceTable(tableNum(InventTableExpanded));
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableExpandedQBDS</Name>
				<Source><![CDATA[
    private QueryBuildDataSource inventTableExpandedQBDS()
    {
        return inventTableExpandedQBDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStandardFields</Name>
				<Source><![CDATA[
    [SysObsolete('Use InventItemIdLookupSimple instead', true, 31\01\2016)]
    public void addStandardFields()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters grid by Item Type.
    /// </summary>
    /// <param name="_itemType">Item Type to filter to.</param>
    public void filterItemType(ItemType _itemType)
    {
        inventTableExpandedQBDS.addRange(fieldNum(InventTableExpanded, ItemType)).value(queryValue(_itemType));
        isItemTypeFiltered = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterCanBeProduced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters lookup grid to items that can be produced.
    /// </summary>
    public void filterCanBeProduced()
    {
        inventTableExpandedQBDS.addRange(fieldNum(InventTableExpanded,ItemType)).value(InventItemType::valueCanBeProduced());
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterOnlyInventoried</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters lookup grid to items that can be stocked.
    /// </summary>
    public void filterOnlyInventoried()
    {
        InventInventoriedPolicy::addInventoriedRangeToInventTable(inventTableExpandedQBDS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterOnlyNonStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters lookup grid to items that are not stocked.
    /// </summary>
    public void filterOnlyNonStocked()
    {
        InventInventoriedPolicy::addNonStockedRangeToInventTable(inventTableExpandedQBDS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterItemModelGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters lookup grid to items with specified Item Model Group.
    /// </summary>
    /// <param name = "_itemModelGroup">Type of the Item Model Group</param>
    public void filterItemModelGroup(InventModel _itemModelGroup)
    {
        QueryBuildDataSource qbdsInventModelGroupItem = this.inventTableExpandedQBDS().addDataSource(tableNum(InventModelGroupItem));
        qbdsInventModelGroupItem.joinMode(JoinMode::ExistsJoin);
        qbdsInventModelGroupItem.relations(true);

        QueryBuildDataSource qbdsInventModelGroup = qbdsInventModelGroupItem.addDataSource(tableNum(InventModelGroup));
        qbdsInventModelGroup.joinMode(JoinMode::ExistsJoin);
        qbdsInventModelGroup.relations(true);
        qbdsInventModelGroup.addRange(fieldNum(InventModelGroup, InventModel)).value(queryValue(_itemModelGroup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterItemIdPrefix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters lookup grid to items with this wildcard.
    /// </summary>
    /// <param name="_itemIdPrefix">ItemId wildcard.</param>
    public void filterItemIdPrefix(str _itemIdPrefix)
    {
        inventTableExpandedQBDS.addRange(fieldNum(InventTableExpanded,ItemId)).value(SysQuery::valueLikeAfter(_itemIdPrefix));
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterItemGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters lookup grid to items with an ItemGroupId.
    /// </summary>
    /// <param name = "_itemGroupId">Value of the ItemGroupId.</param>
    public void filterItemGroupId(ItemGroupId _itemGroupId)
    {
        inventTableExpandedQBDS.addRange(fieldNum(InventTableExpanded, ItemGroupId)).value(queryValue(_itemGroupId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup operation.
    /// </summary>
    [SysObsolete('Use InventItemIdLookupSimple instead', true, 31\01\2016)]
    public void displayLookup(FormStringControl _ctrl)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBOMItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>InventTable</c> table containing only BOM items.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    public static void lookupBOMItemId(FormStringControl _ctrl)
    {
        InventItemIdLookupSimple::lookupBOMItemId(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBulkPackItemForSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>InventTable</c> table containing only items compatible with the containerized packaging.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    public static void lookupBulkPackItemForSetup(FormStringControl   _ctrl)
    {
        InventItemIdLookupSimple::lookupBulkPackItemForSetup(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFormulaItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>InventTable</c> table containing only Formula items.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_includeCoProducts">
    /// If set to true, items of type co product are included in lookup.
    /// </param>
    /// <param name="_itemId">
    /// <c>ItemId</c> used in filtering the lookup.
    /// </param>
    /// <remarks>
    /// Performs a lookup of items with item type of formula.  If the item with _itemId is a co-product,
    /// only items that have formulas with the _itemId as a co-product are included in the lookup.
    /// </remarks>
    public static void lookupFormulaItemId(
        FormStringControl   _ctrl,
        boolean             _includeCoProducts = false,
        ItemId              _itemId = '')
    {
        InventItemIdLookupSimple::lookupFormulaItemId(_ctrl, _includeCoProducts, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>InventTable</c> table, optional show only WHS enabled items
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_showOnlyWHSEnabled">
    /// A Boolean value that indicates whether to show only WHS enabled items; optional.
    /// </param>
    public static void lookupItem(FormStringControl _ctrl, boolean _showOnlyWHSEnabled = false)
    {
        InventItemIdLookupSimple::lookupItem(_ctrl, _showOnlyWHSEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemByTrackingDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and displays a lookup from which the user can select for items tracked by a specific dimension only.
    /// </summary>
    /// <param name="_control">
    ///    The calling form control.
    /// </param>
    /// <param name="_inventDimTrackingFieldId">
    ///    The inventory dimension tracking field ID that must be an active dimension for the items shown in the lookup; optional.
    /// </param>
    /// <remarks>
    ///    If <paramref name="_inventDimTrackingFieldId"/> is not specified then it defaults to the inventory batch dimension field.
    /// </remarks>
    public static void lookupItemByTrackingDimension(FormStringControl _control, FieldId _inventDimTrackingFieldId = fieldNum(InventDim, InventBatchId))
    {
        InventItemIdLookupSimple::lookupItemByTrackingDimension(_control, _inventDimTrackingFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdAsset_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find asset items.
    /// </summary>
    /// <param name="_ctrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    /// <param name="_showAsset">
    ///    true if the asset group ID should be displayed; otherwise, false.
    /// </param>
    public static void lookupItemIdAsset_RU(FormStringControl _ctrl, boolean _showAsset = true)
    {
        InventItemIdLookupSimple::lookupItemIdAsset_RU(_ctrl, _showAsset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdCanBeProduced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and displays a lookup for ItemId with only producible items.
    /// </summary>
    /// <param name = "_ctrl">The FormStringControl object where the lookup values should be displayed.</param>
    public static void lookupItemIdCanBeProduced(FormStringControl _ctrl)
    {
        InventItemIdLookupSimple::lookupItemIdCanBeProduced(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdCanBeTracked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and displays a lookup from which the user can select for trackable items only
    /// </summary>
    /// <param name="_ctrl">
    ///    The calling form control
    /// </param>
    public static void lookupItemIdCanBeTracked(FormStringControl  _ctrl)
    {
        Args                args = new Args();

        args.name(formStr(InventTrackingItemIdLookup));
        args.caller(_ctrl);

        FormRun formRun = classfactory.formRunClass(args);
        formRun.init();

        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdCanBeTransferred</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds items that can be transferred.
    /// </summary>
    /// <param name="_lookupctrl">
    ///    The <c>FormStringControl</c> object where the lookup values should be displayed.
    /// </param>
    /// <remarks>
    ///    Whether an item can be transferred depends on its item type, and is determined by the return value of the <c>InventItemType.canBeTransferred</c> method.
    /// </remarks>
    public static void lookupItemIdCanBeTransferred(FormStringControl _lookupctrl)
    {
        InventItemIdLookupSimple::lookupItemIdCanBeTransferred(_lookupCtrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdCanHaveBOMFormula</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find BOM and formula items.
    /// </summary>
    /// <param name="_ctrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    public static void lookupItemIdCanHaveBOMFormula(FormStringControl _ctrl)
    {
        InventItemIdLookupSimple::lookupItemIdCanHaveBOMFormula(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdCanHaveCoProdBOMFormula</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find BOM items, formula items and co-products.
    /// </summary>
    /// <param name="_ctrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    public static void lookupItemIdCanHaveCoProdBOMFormula(
        FormStringControl _ctrl)
    {
        InventItemIdLookupSimple::lookupItemIdCanHaveCoProdBOMFormula(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdDefaultOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a lookup for selecting items with the specified default order type.
    /// </summary>
    /// <param name="_ctrl">
    ///     The string control calling the lookup.
    /// </param>
    /// <param name="_poType">
    ///     The default order type to search for.
    /// </param>
    /// <param name="_stockedProduct">
    ///     A <c>NoYes</c> value that specifies the stocking policy for the item.
    /// </param>
    public static void lookupItemIdDefaultOrderType(FormStringControl _ctrl, ReqPOType _poType, NoYes _stockedProduct)
    {
        InventItemIdLookupSimple::lookupItemIdDefaultOrderType(_ctrl, _poType, _stockedProduct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens lookup filtered on item group id.
    /// </summary>
    /// <param name = "_ctrl">Control for which a lookup is opened.</param>
    /// <param name = "_itemGroupId">Value for item group id.</param>
    /// <param name = "_showBOM">Determines if BOM should be shown.</param>
    /// <param name = "_showRoute">Determines if Route should be shown.</param>
    /// <param name = "_showFormula">Determines if Formula should be shown.</param>
    public static void lookupItemIdGroup(
        FormStringControl   _ctrl,
        ItemGroupId         _itemGroupId,
        boolean             _showBOM     = false,
        boolean             _showRoute   = false,
        boolean             _showFormula = false
        )
    {
        InventLookupItemIdGroup inventLookup;

        if (!_showFormula || !#PmfEnabled)
        {
            inventLookup = new InventLookupItemIdGroup(_ctrl, _itemGroupId, _showBOM, _showRoute);
        }
        else if (_showFormula)
        {
            inventLookup = new InventLookupItemIdGroup(
                                    _ctrl,
                                    _itemGroupId,
                                    _showBOM,
                                    _showRoute,
                                    _showFormula);
        }

        inventLookup.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup based on item wildcard and item types
    /// </summary>
    /// <param name = "_ctrl">The control for which to open a lookup.</param>
    /// <param name = "_filterStr">ItemId wildcard.</param>
    /// <param name = "_itemTypes">Item types lookup is filtered to.</param>
    public static void lookupItemIdType(
        FormStringControl   _ctrl,
        str                 _filterStr,
        Set                 _itemTypes)
    {
        InventItemIdLookupSimple::lookupItemIdType(_ctrl, _filterStr, _itemTypes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdTypePricingTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find items that can be used for a commodity pricing template.
    /// </summary>
    /// <param name="_ctrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    /// <param name="_filterStr">
    ///    A filter expression for the item ID.
    /// </param>
    /// <param name="_itemTypes">
    ///    A list of product types to filter the result list.
    /// </param>
    public static void lookupItemIdTypePricingTemplate(
        FormStringControl   _ctrl,
        str                 _filterStr,
        Set                 _itemTypes)
    {
        InventItemIdLookupSimple::lookupItemIdTypePricingTemplate(_ctrl, _filterStr, _itemTypes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemsForQuotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the items which belongs to a catalog for a specified <c>MCRSourceID</c> source code.
    /// </summary>
    /// <param name="_callingControl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_sourceID">
    /// A specified <c>MCRSourceID</c> source code.
    /// </param>
    public static void lookupItemsForQuotes(FormControl _callingControl, MCRSourceID _sourceID)
    {
        InventItemIdLookupSimple::lookupItemsForQuotes(_callingControl, _sourceID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemTypeCoByProducts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find co-products and by-products.
    /// </summary>
    /// <param name="_ctrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    public static void lookupItemTypeCoByProducts(FormStringControl   _ctrl)
    {
        InventItemIdLookupSimple::lookupItemTypeCoByProducts(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPmfBulkItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds bulk items for the specified BOMId.
    /// </summary>
    /// <param name="_lookupCtrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    /// <param name="_bomId">
    ///    The ID of the BOM.
    /// </param>
    /// <param name="_packedItemId">
    ///     The ID of the packed item.
    /// </param>
    public static void lookupPmfBulkItem(
        FormStringControl   _lookupCtrl,
        BOMId               _bomId,
        ItemId              _packedItemId
        )
    {
        InventItemIdLookupSimple::lookupPmfBulkItem(_lookupCtrl, _bomId, _packedItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPmfPlanningItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a lookup form for formula or planning items that can be used for planning a given co-product item.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control that initiated this lookup.
    /// </param>
    /// <param name="_coProductId">
    /// The co-product item id for which this lookup is for.
    /// </param>
    /// <remarks>
    /// The lookup that this creates will show only formula or planning items that can
    /// be used as a planning item for <paramref name="_coProductId"/>. If
    /// the planning item is defined for the co-product then just that
    /// formula item will be shown. Otherwise, this will show all the formula
    /// items that have the co-product on any of its BOM versions, ignoring the
    /// active status of those BOM versions.
    /// </remarks>
    public static void lookupPmfPlanningItem(
        FormStringControl   _ctrl,
        ItemId              _coProductId)
    {
        InventItemIdLookupSimple::lookupPmfPlanningItem(_ctrl, _coProductId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
