<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTable_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(SalesTable))]
public final class SalesTable_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFreeSales_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>SalesTable</c> values related to goods delivered for free.
    /// </summary>
    /// <param name = "_salesTable">The <c>SalesTable</c> record to initialize.</param>
    public static void initFreeSales_IT(SalesTable _salesTable)
    {
        DlvReason dlvReason = DlvReason::find(_salesTable.DlvReason);

        if (dlvReason.Free_IT && dlvReason.InvoiceAccount_IT)
        {
            _salesTable.InvoiceAccount = dlvReason.InvoiceAccount_IT;
            _salesTable.transferInvoiceAccount();
            CustTable custTable = _salesTable.custTable_InvoiceAccount();
            _salesTable.vatNum = custTable.vatNum;
            _salesTable.setTaxGroup(TaxSales::custTaxGroup(custTable.DlvTerm, custTable.TaxGroup));

            if (dlvReason.PaymTermId_IT)
            {
                _salesTable.Payment = dlvReason.PaymTermId_IT;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceForFree_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if <c>SalesTable</c> record is related to goods delivered for free.
    /// </summary>
    /// <param name = "_salesTable">The <c>SalesTable</c> record to check.</param>
    /// <returns>true if the record is related, otherwise false.</returns>
    public static boolean invoiceForFree_IT(SalesTable _salesTable)
    {
        return DlvReason::find(_salesTable.DlvReason).Free_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    public void initFromCustTable()
    {
        next initFromCustTable();

        if (this.custTable_CustAccount().UsualExporter_IT && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            SalesTable::initUsualExporter_IT(this);
        }

        if (FeatureStateProvider::isFeatureEnabled(CompanyTaxRegistrationFeature::instance()))
        {
            this.TaxId = TaxRegistration::getPrimaryAddressRestrictedTaxRegistrationNumber(CompanyInfo::find(), TaxRegistrationTypesList::TAXID).RecId;
        }

        if (FeatureStateProvider::isFeatureEnabled(DynamicQRCodeFeature_IN::instance()))
        {
            this.PrintDynamicQRCode_IN = this.custTable_CustAccount().PrintDynamicQRCode_IN;
        }

        if (FeatureStateProvider::isFeatureEnabled(SimplifiedInvoiceSAFeature::instance()))
        {
            this.InvoiceType_W = this.custTable_CustAccount().InvoiceType_W;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceAccount</Name>
				<Source><![CDATA[
    public void initInvoiceAccount()
    {
        next initInvoiceAccount();

        if (this.custTable_InvoiceAccount().UsualExporter_IT && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            SalesTable::initUsualExporter_IT(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUsualExporter_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets intent letter fields on given sales order header record
    /// if an active intent letter exists for such customer and date.
    /// </summary>
    /// <param name = "_salesTable">The sales order header record.</param>
    public static void initUsualExporter_IT(SalesTable _salesTable)
    {
        CustIntentLetter_IT custIntentLetter;
        TransDate refDate = _salesTable.DeliveryDate ? _salesTable.DeliveryDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (CustParameters::find().AutomaticIntentLetterAssignment_IT)
        {
            custIntentLetter = CustIntentLetter_IT::findActiveIntentLetterByType(
                _salesTable.invoiceAccount,
                IntentLetterType_IT::Amount,
                refDate);
        }
        _salesTable.IntentLetterId_IT = '';

        if (custIntentLetter)
        {
            TaxGroup usExpExemptionTaxGroup = CustParameters::find().UsualExporterExemptionTaxGroup_IT;
            if (usExpExemptionTaxGroup)
            {
                _salesTable.IntentLetterId_IT = custIntentLetter.InternalLetterId;
                _salesTable.setTaxGroup(usExpExemptionTaxGroup);
                info("@ExtendedItallianLocalization:UsExpTaxGroupUsed");
            }
        }
        else
        {
            select firstonly RecId from custIntentLetter
                where custIntentLetter.AccountNum == _salesTable.invoiceAccount
                    && custIntentLetter.IntentLetterType != IntentLetterType_IT::Period
                    && custIntentLetter.Status == IntentLetterStatus_IT::Open
                    && custIntentLetter.FromDate <= refDate 
                    && custIntentLetter.ToDate >= refDate;

            if (custIntentLetter)
            {
                info("@ExtendedItallianLocalization:IntentLettersArePresent");
            }
        }

        if (!custIntentLetter)
        {
            TaxGroup usExpTaxGroup = CustParameters::find().UsualExporterExemptionTaxGroup_IT;

            if (usExpTaxGroup && _salesTable.TaxGroup == usExpTaxGroup)
            {
                warning("@ExtendedItallianLocalization:UsExpTaxGroupUsedButNoActiveLetters");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByIntentLetterId_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>SalesTable</c> record by Intent letter Id.
    /// </summary>
    /// <param name = "_IntentLetterInternalId">The intent letter Id to look for.</param>
    /// <returns>The <c>SalesTable</c> record.</returns>
    public static SalesTable findByIntentLetterId_IT(IntentLetterInternalId_IT _IntentLetterInternalId)
    {
        SalesTable salesTable;
        if (_IntentLetterInternalId)
        {
            select salesTable
                where salesTable.IntentLetterId_IT == _IntentLetterInternalId;
        }
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationTable</Name>
				<Source><![CDATA[
    public void initFromSalesQuotationTable(SalesQuotationTable _salesQuotationTable)
    {
        next initFromSalesQuotationTable(_salesQuotationTable);
        CustTable custTable = this.custTable_InvoiceAccount();

        if (custTable.UsualExporter_IT)
        {
            SalesTable::initUsualExporter_IT(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipCustTransWhenCalculatingSettleExchRate</Name>
				<Source><![CDATA[
    internal static boolean skipCustTransWhenCalculatingSettleExchRate(CustTrans _custTrans)
    {
        boolean ret = false;

        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoHU, #isoPL]))
        {
            CzCustAdvanceInvoiceLink czCustAdvanceInvoiceLink;
            select firstonly RecId from czCustAdvanceInvoiceLink
                where czCustAdvanceInvoiceLink.Voucher == _custTrans.Voucher
                    && czCustAdvanceInvoiceLink.TransDate == _custTrans.TransDate
                    && czCustAdvanceInvoiceLink.PaymentCompany == _custTrans.DataAreaId;

            if (czCustAdvanceInvoiceLink.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicePostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record Id of the primary postal address for the invoice account of the
    /// current <c>SalesTable</c> record.
    /// </summary>
    /// <returns>
    /// The record Id of the primary postal address for the invoice account of the
    /// current <c>SalesTable</c> record.
    /// </returns>
    public LogisticsPostalAddressRecId invoicePostalAddressRecId()
    {
        return this.custTable_InvoiceAccount().postalAddressRecId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>