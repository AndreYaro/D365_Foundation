<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesEditLinesForm_PackingSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesEditLinesFormFactoryAttribute(DocumentStatus::PackingSlip, false, VersioningUpdateType::Initial)]
class       SalesEditLinesForm_PackingSlip
extends     SalesEditLinesForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankLCExportLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the letter of credit line field will be visible.
    /// </summary>
    /// <returns>
    ///    true if the letter of credit line field will be visible; otherwise, false.
    /// </returns>
    public boolean bankLCExportLine()
    {
        return BankLCExportFeatureChecker::checkBankLCExportEnabled()
            && !salesParmUpdate.Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>billOfLading</Name>
				<Source><![CDATA[
    public boolean billOfLading()
    {
        return SalesParameters::find().useBillOfLadingOnPackingSlip();
    }

]]></Source>
			</Method>
			<Method>
				<Name>classType</Name>
				<Source><![CDATA[
    str  classType()
    {
        return "@SYS11549";
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctEnabled_RU</Name>
				<Source><![CDATA[
    boolean correctEnabled_RU()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return false;
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctPhysical_RU</Name>
				<Source><![CDATA[
    boolean correctPhysical_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editBankLCExportLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the letter of credit line field can be edited.
    /// </summary>
    /// <returns>
    ///    true if the letter of credit line field can be edited; otherwise, false.
    /// </returns>
    public boolean editBankLCExportLine()
    {
        return salesTable && salesTable.isMarkedForBankLC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDeliverNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the deliver now quantity fields are editable in the edit lines form.
    /// </summary>
    /// <returns>
    /// true if the deliver now quantity fields will be editable in the edit lines form; otherwise, false.
    /// </returns>
    public boolean editDeliverNow()
    {
        if (salesTable.returnItem()
            && !this.parmIsCorrectionOrCancel())
        {
            return false;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editingCaption</Name>
				<Source><![CDATA[
    public str editingCaption(Common _callerTable = null)
    {
        return "@SYS75616";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterButtonCaption</Name>
				<Source><![CDATA[
    str  formLetterButtonCaption()
    {
        return "@SYS11549";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterButtonCaptionCopy</Name>
				<Source><![CDATA[
    str  formLetterButtonCaptionCopy()
    {
        return "@SYS93916";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterCaption</Name>
				<Source><![CDATA[
    str  formLetterCaption()
    {
        return "@SYS10200";
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTrackingRegistrationEnabled</Name>
				<Source><![CDATA[
    public boolean inventTrackingRegistrationEnabled()
    {
        // Do not allow Serial Numbers to be registered if this form has been
        //  opened for correction
        return !this.parmIsCorrectionOrCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numCaption_W</Name>
				<Source><![CDATA[
    public str numCaption_W()
    {
        return "@SYS11549";
    }

]]></Source>
			</Method>
			<Method>
				<Name>printShippingLabel</Name>
				<Source><![CDATA[
    boolean printShippingLabel()
    {
        return SalesParameters::find().useShippingStatOnPackingSlip();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyToPickInSalesUnit</Name>
				<Source><![CDATA[
    boolean qtyToPickInSalesUnit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceOnHand</Name>
				<Source><![CDATA[
    boolean reduceOnHand()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserve</Name>
				<Source><![CDATA[
    boolean  reserve()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if the <c>Sales totals</c> button should be shown in the <c>SalesEditLines</c> form.
    /// </summary>
    /// <returns>Always false</returns>
    boolean salesTotals()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupBankLCExportLineController</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets up the <c>BankLCExportLineNumController</c> object that is used for the
    ///    <c>BankLCExportLine</c> field.
    /// </summary>
    public void setupBankLCExportLineController()
    {
        super();
        if (bankLCExportLineNumController)
        {
            bankLCExportLineNumController.parmAllowOpened(true);
            bankLCExportLineNumController.parmAllowUpdatedPackingSlip(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showEntryCertificateRequired_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows if the <c>Entry certificate required</c> field should be shown in the <c>SalesEditLines</c> form.
    /// </summary>
    /// <returns>
    ///    Always false.
    /// </returns>
    public boolean showEntryCertificateRequired_W()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInventLocationId_PL</Name>
				<Source><![CDATA[
    public boolean showInventLocationId_PL()
    {
        return SalesParameters::find().PackingSlipByInvent_PL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInventProfileType_RU</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    public boolean showInventProfileType_RU()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showIssueOwnEntryCertificate_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows if the <c>Issue own certificate</c> field should be shown in the <c>SalesEditLines</c> form.
    /// </summary>
    /// <returns>
    ///    true if the issuing functionality is enabled, false otherwise.
    /// </returns>
    public boolean showIssueOwnEntryCertificate_W()
    {
        return    CustParameters::find().EntryCertificateIssuingEnabled_W
               && !salesParmUpdate.Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showNum_W</Name>
				<Source><![CDATA[
    public boolean showNum_W()
    {
        return CustParameters::find().InvoiceIdEditing_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOfficials_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method defines whether officials section could be shown on form or not for packing slip.
    /// </summary>
    /// <returns>
    /// Returns value of <c>boolean</c> type.
    /// </returns>

    public boolean showOfficials_RU()
    {
        return this.billOfLading();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPostingProfile_RU</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    public boolean showPostingProfile_RU()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintBlankDate_LT</Name>
				<Source><![CDATA[
    public boolean showPrintBlankDate_LT()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonEntryCertificate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>ButtonEntryCertificate_W</c> button can be enabled in <c>SalesEditLines</c> form.
    /// </summary>
    /// <param name = "_isChecked">Is checkbox "Issue entry certificate" checked or not. Optional.</param>
    /// <returns>true if the <c>ButtonEntryCertificate_W</c> button is available; false otherwise.</returns>
    public boolean enableButtonEntryCertificate_W(boolean _isChecked = false)
    {
        return this.isCustomerOwnEntryCertificate_W(_isChecked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCFDIReference_MX</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the CDFI reference button should be shown.
    /// </summary>
    /// <returns>
    ///     True if the CDFI reference button should be shown; otherwise, false.
    /// </returns>
    public boolean showCFDIReference_MX()
    {
        return EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled()
        && EInvoiceCFDIParameters_MX::find().cfdiVersion >= EInvoiceCFDIVersion_MX::V3_3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintEntryCertificate_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows if the <c>Print entry certificate</c> checkbox should be shown in the <c>SalesEditLines</c> form.
    /// </summary>
    /// <returns>
    ///    true if the issuing functionality is enabled, false otherwise.
    /// </returns>
    public boolean showPrintEntryCertificate_W()
    {
        return     CustParameters::find().EntryCertificateIssuingEnabled_W
                && !salesParmUpdate.Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specQtyItems</Name>
				<Source><![CDATA[
    int specQtyItems()
    {
        return 3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateCaption</Name>
				<Source><![CDATA[
    str  transDateCaption()
    {
        return "@SYS16994";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeliverNow</Name>
				<Source><![CDATA[
    public boolean validateDeliverNow()
    {
        boolean ret = super();

        if (salesTable.returnItem()
            && this.parmIsCorrectionOrCancel()
            && salesParmLine.DeliverNow != 0
            && salesParmLine.DeliverNow != salesParmLine.PreviousDeliverNow)
        {
            ret = checkFailed("@SYS4004582");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLoadAllowIncreaseQuantities_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the quantities can be increased based on the fact that the sales parm table has been created using a WHSLoadTable or not.
    ///     The user should not be allowed to add new sales parm tables, new sales parm lines, neither changing
    ///     the quantities of the existing lines (invent now, delivery now, spec quantity).
    /// </summary>
    /// <param name="_loadId">
    ///     Load id of the WHSLoadTable used to created the sales parm table. Blank if the sales parm table has not been created from a load.
    /// </param>
    /// <returns>
    ///     True if the parm has not been created from a WHSLoadTable; otherwise; false
    /// </returns>
    /// <remarks>
    /// This validation should just happen for delivery slips.
    /// </remarks>
    public boolean whsLoadAllowIncreaseQuantities_BR(WHSLoadId _loadId)
    {
        if (_loadId && salesParmUpdate.DocumentStatus == DocumentStatus::DeliverySlip_BR)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLoadAllowReArrange</Name>
				<Source><![CDATA[
    public boolean whsLoadAllowReArrange(boolean _isLoad)
    {
        if (_isLoad && salesParmUpdate.DocumentStatus == DocumentStatus::PackingSlip)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCFDIEnabled_MX</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the CDFI Enabled button should be shown.
    /// </summary>
    /// <returns>
    ///     True if the CDFI Enabled button should be shown; otherwise, false.
    /// </returns>
    public boolean showCFDIEnabled_MX()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX])
            && EInvoiceCFDIParameters_MX::find().EnabledCFDI
            && EInvoiceCFDIParameters_MX::find().CFDIVersion >= EInvoiceCFDIVersion_MX::V3_3;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>