<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransLinkReversal_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates link between original operation and storno.
/// </summary>
class TransLinkReversal_RU
{
    Common                  sourceTrans, stornoTrans;
    TransDate               sourceTransDate;
    TransDate               reversalDate;
    TransDate               accountingDate, sourceAccountingDate;
    RecId                   stornoRecId;
    FiscalCalendarPeriod    fiscalCalendarPeriod;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkReversalDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks reversal date.
    /// </summary>
    /// <returns>
    /// Always false.
    /// </returns>
    protected boolean checkReversalDate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSourceLedgerTransLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates ledger transactions link for source operation.
    /// </summary>
    public void createSourceLedgerTransLink()
    {
        TransLink_RU::postLedgerReverse(null, sourceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStornoLedgerTransLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates ledger transactions link for storno operation.
    /// </summary>
    public void createStornoLedgerTransLink()
    {
        TransLink_RU::postLedgerReverse(stornoTrans, sourceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates link between original operation and storno.
    /// </summary>
    /// <param name="_stornoTrans">
    /// The storno operation.
    /// </param>
    public void createTransLink(Common _stornoTrans)
    {
        stornoTrans = _stornoTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves accounting date.
    /// </summary>
    /// <returns>
    /// The accounting date.
    /// </returns>
    public TransDate getAccountingDate()
    {
        return accountingDate ? accountingDate : reversalDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    private void initFiscalCalendarPeriod()
    {
        LedgerFiscalCalendarPeriod ledgerPeriod;

        if (!fiscalCalendarPeriod)
        {
            select firstonly fiscalCalendarPeriod
                order by StartDate
                where fiscalCalendarPeriod.FiscalCalendar == CompanyInfoHelper::fiscalCalendarRecId() &&
                      fiscalCalendarPeriod.Type           == FiscalPeriodType::Operating
            exists join ledgerPeriod
                where ledgerPeriod.Ledger                 == Ledger::current() &&
                      ledgerPeriod.FiscalCalendarPeriod   == fiscalCalendarPeriod.RecId &&
                      ledgerPeriod.Status                 == FiscalPeriodStatus::Open;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes storno operation.
    /// </summary>
    /// <param name="_sourceTrans">
    /// The original transaction.
    /// </param>
    protected void initValue(Common _sourceTrans)
    {
        sourceTrans = _sourceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTrans</Name>
				<Source><![CDATA[
    public Common parmSourceTrans(Common _sourceTrans = sourceTrans)
    {
        sourceTrans = _sourceTrans;
        return sourceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReversalDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets reversal dates.
    /// </summary>
    /// <param name="_reversalDate">
    /// The reversal date.
    /// </param>
    public void setReversalDates(TransDate _reversalDate)
    {
        ;

        reversalDate = _reversalDate;

        if (sourceAccountingDate != sourceTransDate)
        {
            accountingDate = max(sourceAccountingDate, reversalDate);
        }
        else
        {
            accountingDate = reversalDate;
        }

        this.initFiscalCalendarPeriod();

        if (accountingDate < fiscalCalendarPeriod.StartDate)
        {
            accountingDate = fiscalCalendarPeriod.StartDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransLinkAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates accounting date in transaction links.
    /// </summary>
    protected void updateTransLinkAccountingDate()
    {
        TransLink_RU transLink;

        transLink = TransLink_RU::findSec(sourceTrans.TableId, sourceTrans.RecId, true);
        if (transLink)
        {
            if (!transLink.AccountingDate)
            {
                transLink.AccountingDate = sourceAccountingDate;
                transLink.update();
            }
        }
        else
        {
            throw error(error::missingRecord(funcname()));
        }

        transLink = TransLink_RU::findSec(stornoTrans.TableId, stornoTrans.RecId, true);
        if (transLink)
        {
            transLink.AccountingDate = this.getAccountingDate();
            transLink.update();
        }
        else
        {
            throw error(error::missingRecord(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates reversal operation.
    /// </summary>
    /// <returns>
    /// Always true if operation is valid; false, otherwise.
    /// </returns>
    public boolean validate()
    {
        return this.checkReversalDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs instance of the <c>TransLinkReversal_RU</c> class.
    /// </summary>
    /// <param name="_sourceTrans">
    /// The original transaction.
    /// </param>
    /// <returns>
    /// The instance of the <c>TransLinkReversal_RU</c> class.
    /// </returns>
    public static TransLinkReversal_RU construct(Common _sourceTrans)
    {
        TransLinkReversal_RU transLinkReversal;

        switch (_sourceTrans.TableId)
        {
            case tablenum (RAssetTrans):
                transLinkReversal = new TransLinkReversalAsset_RU();
                break;

            case tablenum(RDeferralsTrans):
                transLinkReversal = new TransLinkReversalDeferrals_RU();
                break;

            default:
                throw error(error::wrongUseOfFunction(funcname()));
        }

        transLinkReversal.initValue(_sourceTrans);

        return transLinkReversal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>