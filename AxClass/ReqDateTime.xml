<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDateTime</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqDateTime</c> class simplifies working with a pair of date and time values.
/// </summary>
public class ReqDateTime
{
    private ReqDate dateValue;
    private ReqTime timeValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>ReqDateTime</c>.
    /// </summary>
    /// <param name = "_dateValue">The date.</param>
    /// <param name = "_timeValue">The time.</param>
    public void new(ReqDate _dateValue, ReqTime _timeValue)
    {
        dateValue = _dateValue;
        timeValue = _timeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>minValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the minimum date and time.
    /// </summary>
    /// <returns>The minimal date and time.</returns>
    public static ReqDateTime minValue()
    {
        return new ReqDateTime(dateNull(), 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the maximum date and time.
    /// </summary>
    /// <returns>The maximum date and time.</returns>
    public static ReqDateTime maxValue()
    {
        return new ReqDateTime(dateMax(), timeMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDate</Name>
				<Source><![CDATA[
    public ReqDate parmDate()
    {
        return dateValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTime</Name>
				<Source><![CDATA[
    public ReqTime parmTime()
    {
        return timeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGreaterThan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current date and time is greater than the specified date and time.
    /// </summary>
    /// <param name = "_reqDateTime">The date and time to compare against.</param>
    /// <returns>true, if the current date and time is greater than the specified date and time; otherwise, false.</returns>
    public boolean isGreaterThan(ReqDateTime _reqDateTime)
    {
        return this.dateValue > _reqDateTime.dateValue
            || (this.dateValue == _reqDateTime.dateValue && this.timeValue > _reqDateTime.timeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGreaterOrEqualThan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current date and time is greater or equal than the specified date and time.
    /// </summary>
    /// <param name = "_reqDateTime">The date and time to compare against.</param>
    /// <returns>true, if the current date and time is greater or equal than the specified date and time; otherwise, false.</returns>
    public boolean isGreaterOrEqualThan(ReqDateTime _reqDateTime)
    {
        return this.dateValue > _reqDateTime.dateValue
            || (this.dateValue == _reqDateTime.dateValue && this.timeValue >= _reqDateTime.timeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLessThan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current date and time is less than the specified date and time.
    /// </summary>
    /// <param name = "_reqDateTime">The date and time to compare against.</param>
    /// <returns>true, if the current date and time is less than the specified date and time; otherwise, false.</returns>
    public boolean isLessThan(ReqDateTime _reqDateTime)
    {
        return this.dateValue < _reqDateTime.dateValue
            || (this.dateValue == _reqDateTime.dateValue && this.timeValue < _reqDateTime.timeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLessOrEqualThan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current date and time is less or equal than the specified date and time.
    /// </summary>
    /// <param name = "_reqDateTime">The date and time to compare against.</param>
    /// <returns>true, if the current date and time is less or equal than the specified date and time; otherwise, false.</returns>
    public boolean isLessOrEqualThan(ReqDateTime _reqDateTime)
    {
        return this.dateValue < _reqDateTime.dateValue
            || (this.dateValue == _reqDateTime.dateValue && this.timeValue <= _reqDateTime.timeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>max</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the maximum of two date and time values.
    /// </summary>
    /// <param name = "_dateTime1">Date 1.</param>
    /// <param name = "_dateTime2">Date 2.</param>
    /// <returns>The maximum of two date and time values.</returns>
    public static ReqDateTime max(ReqDateTime _dateTime1, ReqDateTime _dateTime2)
    {
        return _dateTime1.isGreaterThan(_dateTime2) ? _dateTime1 : _dateTime2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>min</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the minimum of two date and time values.
    /// </summary>
    /// <param name = "_dateTime1">Date 1.</param>
    /// <param name = "_dateTime2">Date 2.</param>
    /// <returns>The maximum of two date and time values.</returns>
    public static ReqDateTime min(ReqDateTime _dateTime1, ReqDateTime _dateTime2)
    {
        return _dateTime1.isLessThan(_dateTime2) ? _dateTime1 : _dateTime2;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>