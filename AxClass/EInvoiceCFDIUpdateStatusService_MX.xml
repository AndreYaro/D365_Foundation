<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceCFDIUpdateStatusService_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceCFDIUpdateStatusService_MX</c> class is the service class for the updating CFDI electronic invoices process.
/// </summary>
internal final class EInvoiceCFDIUpdateStatusService_MX extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(EInvoiceCFDIUpdateStatusDataContract_MX _dataContract)
    {
        #OCCRetryCount

        try
        {
            EInvoiceCFDIStatus_MX cfdiStatusTo = _dataContract.parmCFDIStatusTo();
            EInvoiceCFDIMessageStatus_MX cfdiMessageStatusTo = _dataContract.parmCFDIMessageStatusTo();
            Query eInvoicesQuery = _dataContract.parmEInvoicesQuery();
            int updatedQty;

            ttsbegin;

            QueryRun queryRun = new QueryRun(eInvoicesQuery);

            while (queryRun.next())
            {
                EInvoiceJour_MX eInvoiceJour = queryRun.get(tableNum(EInvoiceJour_MX));
                eInvoiceJour.selectForUpdate(true);
                eInvoiceJour.CFDIStatus = cfdiStatusTo;
                eInvoiceJour.CFDIMessageStatus = cfdiMessageStatusTo;
                eInvoiceJour.update();
                updatedQty++;
            }

            ttscommit;

            info(strFmt("@MexicoCFDI:StatusHasBeenUpdatedForElectronicInvoices", updatedQty));
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>