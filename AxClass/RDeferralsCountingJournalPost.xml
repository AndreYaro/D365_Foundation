<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsCountingJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rDeferralsCountingJournalPost extends RunBaseBatch implements BatchRetryable
{
    RecId       journalRecId;

    DialogField dialogEndDate;
    EndDate     endDate;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        endDate
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a false value.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialogEndDate = dialog.addFieldValue(extendedtypestr(RAssetTransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@GLS113089");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ;
        endDate = dialogEndDate.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    public void initFromArgs(Args _args)
    {
        ;
        if (! _args || ! _args.record() || _args.dataset() != tablenum(RDeferralsCountingJournal))
            throw error(Error::missingRecord(funcname()));

        journalRecId = _args.record().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ #CurrentVersion, #CurrentList ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    public EndDate parmEndDate(EndDate _endDate = endDate)
    {
        endDate = _endDate;
        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalRecId</Name>
				<Source><![CDATA[
    public RecId parmJournalRecId(RecId _journalRecId = journalRecId)
    {
        journalRecId = _journalRecId;
        return journalRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the dialog box from the <c>Dialog</c> class and waits for user input.
    /// </summary>
    /// <returns>
    /// true if the user clicks OK in the dialog box; otherwise, false.
    /// </returns>
    public boolean prompt()
    {
        ;
        if (! RDeferralsCountingJournalLine::exist(journalRecId))
            return checkFailed("@SYS59010");

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        RDeferralsCountingJournal deferralsCountingJournal;
        ;
        ttsbegin;

        deferralsCountingJournal = RDeferralsCountingJournal::find(journalRecId, true);

        deferralsCountingJournal.CloseDeferrals = NoYes::Yes;
        deferralsCountingJournal.EndDate = endDate;
        deferralsCountingJournal.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        RDeferralsCountingJournal countingJournal;

        if (! RDeferralsCountingJournalLine::exist(journalRecId))
            return checkFailed("@SYS59010");

        countingJournal = RDeferralsCountingJournal::find(journalRecId);

        if (endDate < countingJournal.StartDate)
            return checkFailed("@SYS30562");

        if (countingJournal.EndDate)
            return checkFailed("@GLS113113");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RDeferralsCountingJournalPost construct()
    {
        return new RDeferralsCountingJournalPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static Name description()
    {
        return "@GLS113114";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        RDeferralsCountingJournalPost deferralsCountingJournalPost = RDeferralsCountingJournalPost::construct();
        ;

        deferralsCountingJournalPost.initFromArgs(_args);

        if (deferralsCountingJournalPost.prompt())
        {
            deferralsCountingJournalPost.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>