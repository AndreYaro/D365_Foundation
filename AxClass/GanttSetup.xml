<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>GanttSetup</c> class sets up a Gantt chart, such as what to show and whether calendars
///    should be read.
/// </summary>
abstract class GanttSetup extends RunBase
{
    GanttClient ganttClient;

    NoYes       loadCalendar;
    NoYes       setupChanged;
    NoYes       throttleCalendarPerf;

    GanttTimescale timescaleUnit;
    GanttTimeStep timescaleStep;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        loadCalendar,
        throttleCalendarPerf
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyChangedValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the values changed in the setup class.
    /// </summary>
    /// <returns>
    ///    true if the change was successful; otherwise false.
    /// </returns>
    /// <remarks>
    ///    If the load calendar option was changed, a reload of the Gantt chart is performed.
    /// </remarks>
    protected boolean applyChangedValues()
    {
        if (setupChanged)
        {
            return ganttClient.reload();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyChanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the Gantt setup class changes to the Gantt visualization class and saves the new options to
    ///    the system last values.
    /// </summary>
    /// <param name="_refreshVisualization">
    ///    A Boolean value that determines whether the visualization is refreshed after saving the options;
    ///    optional.
    /// </param>
    /// <returns>
    ///    true if the changes were applied and changed; otherwise false.
    /// </returns>
    public boolean applyChanges(boolean _refreshVisualization = true)
    {
        if (!this.validateChanges())
        {
            return checkFailed("@SYS108453");
        }

        if (this.applyChangedValues())
        {
            this.resetChangedValues();

            this.save();

            if (_refreshVisualization)
            {
                ganttClient.refreshVisualization();
            }

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ganttVisualization</Name>
				<Source><![CDATA[
    public GanttVisualization ganttVisualization()
    {
        return this.parmGanttClient().parmGanttVisualization();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    // If you need to do any feature related changes to this method,
    // then copy/paste it to the derived class without calling super()
    public boolean init()
    {
        if (!super() || !this.validate())
        {
            throw Exception::Error;
        }

        this.getLast();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        loadCalendar = NoYes::Yes;
        throttleCalendarPerf = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        this.resetChangedValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttClient</Name>
				<Source><![CDATA[
    public GanttClient parmGanttClient(GanttClient _ganttClient = ganttClient)
    {
        ganttClient = _ganttClient;

        return ganttClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadCalendar</Name>
				<Source><![CDATA[
    public NoYes parmLoadCalendar(NoYes _loadCalendar = loadCalendar)
    {
        if (loadCalendar != _loadCalendar)
        {
            setupChanged = NoYes::Yes;
            loadCalendar = _loadCalendar;
        }

        return loadCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThrottleCalendarPerf</Name>
				<Source><![CDATA[
    public NoYes parmThrottleCalendarPerf(NoYes _throttleCalendarPerf = throttleCalendarPerf)
    {
        if (throttleCalendarPerf != _throttleCalendarPerf)
        {
            setupChanged = NoYes::Yes;
            throttleCalendarPerf = _throttleCalendarPerf;
        }

        return throttleCalendarPerf;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimescaleUnit</Name>
				<Source><![CDATA[
    public GanttTimescale parmTimescaleUnit(GanttTimescale _timescaleUnit = timescaleUnit)
    {
        if (timescaleUnit != _timescaleUnit)
        {
            timescaleUnit = _timescaleUnit;
        }

        return timescaleUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimescaleStep</Name>
				<Source><![CDATA[
    public GanttTimeStep parmTimescaleStep(GanttTimeStep _timescaleStep = timescaleStep)
    {
        if (timescaleStep != _timescaleStep)
        {
            timescaleStep = _timescaleStep;
        }

        return timescaleStep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetChangedValues</Name>
				<Source><![CDATA[
    protected void resetChangedValues()
    {
        setupChanged = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        if (!this.applyChanges())
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    // If you need to do any feature related changes to this method,
    // then copy/paste it to the derived class without calling super()
    public boolean save(boolean _validateChanges = true)
    {
        if (_validateChanges && !this.validateChanges())
        {
            return false;
        }

        this.saveLast();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean  ret;
        Integer  version = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (!this.parmGanttClient())
        {
            return checkFailed(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateChanges</Name>
				<Source><![CDATA[
    public boolean validateChanges()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>