<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdStatusType_Created</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdStatusType_Created</c> class encapsulates behavior of a created production order.
/// </summary>
/// <remarks>
///    A production order is said to be created if the class implements the
///    <c>ProdStatusType.currentProdStatus</c> method by returning the <c>ProdStatusAll::Created</c> value.
/// </remarks>
public class ProdStatusType_Created extends ProdStatusType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentProdStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the specific status of a production order.
    /// </summary>
    /// <returns>
    ///    Always returns the <c>ProdStatusAll::Created</c> value.
    /// </returns>
    public ProdStatusAll currentProdStatus()
    {
        return ProdStatusAll::Created;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEstimateReferences</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the production order references must be estimated.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean mustEstimateReferences()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(ProdTable _prodTable)
    {
        super(_prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousProdStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines previous production order status for a created production order.
    /// </summary>
    /// <returns>
    ///    The <c>ProdStatus</c> value of the underlying <c>ProdTable</c> buffer.
    /// </returns>
    /// <remarks>
    ///    The <c>previousProdStatus</c> method does not throw an exception even though there is no previous
    ///    status for a created product order. Instead, an exception is thrown in the
    ///    <c>ProdStatusType_Created.setPreviousProdStatus</c> method.
    /// </remarks>
    public ProdStatus previousProdStatus()
    {
        //Returns the same status.
        return prodTable.ProdStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodCheckCopying</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a production order status allows copying.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean prodCheckCopying()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBOMCalc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the price calculation of a created production order.
    /// </summary>
    /// <param name="_prodParmBOMCalc">
    ///    The production bill of materials calculation parameter. This parameter is disregarded by the method.
    /// </param>
    /// <param name="_ask">
    ///    A Boolean value that indicates whether the method is only asked if price calculation is allowed;
    ///    optional.
    /// </param>
    /// <param name="_multi">
    ///    A <c>RunbaseRecsMapable</c> parameter. This parameter is disregarded by the method; optional.
    /// </param>
    /// <returns>
    ///    If <paramref name="_ask" /> parameter is true, then method returns false; otherwise, throws an
    ///    exception.
    /// </returns>
    /// <remarks>
    ///    When price calculation is being performed for created production order, this method always throws
    ///    an exception, because the production order has to be estimated before running price calculation.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    A created production order does not allow price calculation.
    /// </exception>
    public boolean runBOMCalc(
        ProdParmBOMCalc     _prodParmBOMCalc,
        boolean             _ask                = false,
        RunbaseRecsMapable  _multi              = null
        )
    {
        if (!_ask)
        {
            throw error(strFmt(
                "@SYS22234",
                prodTable.ProdStatus));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCopy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether created production order allows copying.
    /// </summary>
    /// <param name="_ask">
    ///    A Boolean data container. This parameter is disregarded by the method; optional.
    /// </param>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean runCopy(boolean _ask = false)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCostEstimation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a cost estimation of a created production order.
    /// </summary>
    /// <param name="_prodParmCostEstimation">
    ///    The production cost estimation parameter.
    /// </param>
    /// <param name="_ask">
    ///    A value of TRUE indicates that method will only check whether cost estimation is allowed. A value of FALSE
    ///    indicates that the method will also perform the cost estimation.; optional
    /// </param>
    /// <param name="_prodPurch">
    ///    The <c>ProdPurch</c> table buffer used to perform cost estimation; optional.
    /// </param>
    /// <param name="_multi">
    ///    A parameter that is used to perform cost estimations of multiple production orders at once;
    ///    optional.
    /// </param>
    /// <param name="_runningPreviousJob">
    ///     Indicates if this method has been triggered by a change to a higher status: optional.
    /// </param>
    /// <returns>
    ///    true if production order status allows performing cost estimation; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The <c>runCostEstimation</c> method sets necessary values for <paramref
    ///    name="_prodParmCostEstimation" /> parameter and calls super to update the production order.
    /// </remarks>
    public boolean runCostEstimation(
        ProdParmCostEstimation      _prodParmCostEstimation,
        boolean                     _ask                        = false,
        ProdPurch                   _prodPurch                  = null,
        RunbaseRecsMapable          _multi                      = null,
        boolean                     _runningPreviousJob         = false
        )
    {
        if (!_ask)
        {
            _prodParmCostEstimation.skipTTSCheck(true);
            _prodParmCostEstimation.References = NoYes::Yes;
            _prodParmCostEstimation.update();
        }

        return super(
            _prodParmCostEstimation,
            _ask,
            _prodPurch,
            _multi,
            _runningPreviousJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runJobScheduling</Name>
				<Source><![CDATA[
    public boolean runJobScheduling(
        ProdParmScheduling      _prodParmScheduling,
        boolean                 _ask                = false,
        ProdPurch               _prodPurch          = null,
        RunbaseRecsMapable      _multi              = null,
        WrkCtrScheduler_Prod    _wrkCtrScheduler    = null,
        boolean                 _runningPreviousJob = false
        )
    {
        return this.isStatusUpdateAllowed(ProdStatusAll::JobScheduled)
            && this.pmfCheckRework()
            && super(_prodParmScheduling,_ask,_prodPurch,_multi,_wrkCtrScheduler,_runningPreviousJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runJobUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether job update is allowed for a created production order.
    /// </summary>
    /// <param name="_ask">
    ///    A value of TRUE indicates that method will only check whether job update is allowed. A value of FALSE
    ///    indicates that the method will also perform the job update.; optional
    /// </param>
    /// <returns>
    ///    true if the <paramref name="_ask" /> parameter is false; otherwise, false.
    /// </returns>
    public boolean runJobUpdate(boolean _ask = false)
    {
        if (_ask)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationScheduling</Name>
				<Source><![CDATA[
    public boolean runOperationScheduling(
        ProdParmScheduling      _prodParmScheduling,
        boolean                 _ask                = false,
        ProdPurch               _prodPurch          = null,
        RunbaseRecsMapable      _multi              = null,
        WrkCtrScheduler_Prod    _wrkCtrScheduler    = null,
        boolean                 _runningPreviousJob = false
        )
    {
        return this.isStatusUpdateAllowed(ProdStatusAll::OperationScheduled)
            && this.pmfCheckRework()
            && super(_prodParmScheduling,_ask,_prodPurch,_multi,_wrkCtrScheduler,_runningPreviousJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSplit</Name>
				<Source><![CDATA[
    public boolean runSplit(
        ProdParmSplit       _prodParmSplit,
        boolean             _ask            = false,
        RunbaseRecsMapable  _multi          = null
        )
    {
        if (_ask && prodTable.CollectRefLevel == 0)
        {
            return this.prodTableType().pmfCanSplit();
        }

        return super(_prodParmSplit, _ask, _multi);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusDecrease</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Decreases the status for a created production order.
    /// </summary>
    /// <param name="_prodParmStatusDecrease">
    ///    The production status decrease parameter. This parameter is disregarded by the method.
    /// </param>
    /// <param name="_ask">
    ///    A value of TRUE indicates that method will only check whether decreasing of status is allowed. A value of FALSE
    ///    indicates that the method will also perform the status decrease.; optional
    /// </param>
    /// <param name="_multi">
    ///    A <c>RunbaseRecsMapable</c> parameter. This parameter is disregarded by the method; optional.
    /// </param>
    /// <returns>
    ///    false if the <paramref name="_ask" /> parameter is true; otherwise, throws an exception.
    /// </returns>
    /// <remarks>
    ///    When status is being decreased for created production order, this method always throws an
    ///    exception, because there is no previous status for production order with the status of the
    ///    <c>ProdStatusAll::Created</c> value.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    Status of created production order cannot be decreased.
    /// </exception>
    public boolean runStatusDecrease(
        ProdParmStatusDecrease  _prodParmStatusDecrease,
        boolean                 _ask = false,
        RunbaseRecsMapable      _multi = null
        )
    {
        if (!_ask)
        {
            throw error(strFmt(
                "@SYS22216",
                prodTable.ProdStatus));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBackStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the backorder status <c>ProdBackStatus::None</c> on the underlying <c>ProdTable</c> buffer.
    /// </summary>
    public void setBackStatus()
    {
        prodTable.BackorderStatus = ProdBackStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPreviousProdStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the setting of previous status for a created production order.
    /// </summary>
    /// <remarks>
    ///    This method always throws an exception because there is no previous status for a created production
    ///    order.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    Created production order does not allow setting previous status.
    /// </exception>
    public void setPreviousProdStatus()
    {
        throw error(strFmt(
            "@SYS22225",
            prodTable.ProdStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOMRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>BOMId</c> and <c>RouteId</c> fields in the <c>ProdTable</c> record.
    /// </summary>
    public void updateBOMRoute()
    {
        if (   prodTable.RecId
            && prodTable.ProdId
            && FormDataUtil::isFormDataSource(prodTable)
            && (   prodTable.orig().InventDimId != prodTable.InventDimId
                || prodTable.orig().QtySched    != prodTable.QtySched
                || prodTable.orig().DlvDate     != prodTable.DlvDate)
                )
        {
            ProdTable prodTableTest = prodTable.data();
            prodTableTest.bomId = '';
            prodTableTest.RouteId = '';

            prodTableTest.initBOMVersion();
            prodTableTest.initRouteVersion();

            if (   prodTableTest.bomId      != prodTable.bomId
                || prodTableTest.RouteId    != prodTable.RouteId)
            {
                if (Box::yesNo("@SYS67181",DialogButton::Yes,"@SYS67183","") == DialogButton::Yes)
                {
                    prodTable.bomId     = prodTableTest.bomId;
                    prodTable.RouteId   = prodTableTest.RouteId;

                    if (prodTableTest.inventTable().isFormulaAllowed())
                    {
                        prodTable.PmfTotalCostAllocation = prodTableTest.PmfTotalCostAllocation;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWarnings</Name>
				<Source><![CDATA[
    public void updateWarnings()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether production bills of materials can be updated.
    /// </summary>
    /// <param name="_prodBOM">
    ///    The production bills of materials parameter which will be validated.
    /// </param>
    /// <returns>
    ///    true if production bills of materials can be updated; otherwise, false.
    /// </returns>
    public boolean validateWriteProdBOM(ProdBOM _prodBOM)
    {
        return _prodBOM.validateWrite(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteProdRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a production route can be updated.
    /// </summary>
    /// <param name="_prodRoute">
    ///    A production route which will be validated.
    /// </param>
    /// <returns>
    ///    true if a production route can be updated; otherwise, false.
    /// </returns>
    public boolean validateWriteProdRoute(ProdRoute _prodRoute)
    {
        return _prodRoute.validateWrite(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProdStatusType_Created construct(ProdTable _prodTable)
    {
        return new ProdStatusType_Created(_prodTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
