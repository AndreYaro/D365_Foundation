<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFinalizeService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchFinalizeService</c> class finishes purchase orders and lines.
/// </summary>
/// <remarks>
/// This class acts as service for a <c>PurchFinalizeServiceController</c> controller class.
/// </remarks>
class PurchFinalizeService extends SysOperationServiceBase
{
    PurchFinalizeContract   dataContract;
    BatchHeader             batchHeader;
    Query                   queryFirstRun;
    Query                   querySecondRun;

    private PurchInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query object that is based on parameters from a data contract.
    /// </summary>
    protected void buildQueries()
    {
        // Decode the container from the string until query is supported as a data contract
        container   queryContainer = SysOperationHelper::base64Decode(dataContract.parmQuery());
        SysDictEnum sysDictEnum = new SysDictEnum(enumnum(PurchStatus));
        PurchStatus currentType;

        if (!queryContainer)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        queryFirstRun = new Query(queryContainer);

        // First run - only select purchase orders that is invoiced or canceled
        queryFirstRun.dataSourceTable(tablenum(PurchTable)).addRange(fieldnum(PurchTable, PurchStatus)).value(queryValue(PurchStatus::Invoiced));
        queryFirstRun.dataSourceTable(tablenum(PurchTable)).addRange(fieldnum(PurchTable, PurchStatus)).value(queryValue(PurchStatus::Canceled));

        queryFirstRun.dataSourceTable(tablenum(PurchTable)).addRange(fieldnum(PurchTable, DocumentState)).value(queryValue(VersioningDocumentState::Confirmed));

        // Do not include purchase orders and lines that are already finalized
        queryFirstRun.dataSourceTable(tablenum(PurchLine)).addRange(fieldnum(PurchLine, IsFinalized)).value(queryValue(NoYes::No));

        if (!dataContract.parmOnlyEntireOrder())
        {
            querySecondRun = new Query(queryContainer);

            // Second run - only select purchase order that are not invoiced or canceled
            currentType = any2enum(sysDictEnum.firstValue());
            do
            {
                if (isConfigurationkeyEnabled(sysDictEnum.value2ConfigurationKey(enum2int(currentType)))
                    && (currentType != PurchStatus::Invoiced && currentType != PurchStatus::Canceled))
                {
                    querySecondRun.dataSourceTable(tablenum(PurchTable)).addRange(fieldnum(PurchTable, PurchStatus)).value(queryValue(currentType));
                }
                currentType = any2enum(sysDictEnum.nextValue(currentType));
            } 
            while (currentType != any2enum(sysDictEnum.firstValue()));

            querySecondRun.dataSourceTable(tablenum(PurchTable)).addRange(fieldnum(PurchTable, DocumentState)).value(queryValue(VersioningDocumentState::Confirmed));

            querySecondRun.dataSourceTable(tablenum(PurchLine)).addRange(fieldnum(PurchLine, PurchStatus)).value(queryValue(PurchStatus::Invoiced));
            querySecondRun.dataSourceTable(tablenum(PurchLine)).addRange(fieldnum(PurchLine, PurchStatus)).value(queryValue(PurchStatus::Canceled));

            // Do not include purchase orders and lines that are already finalized
            querySecondRun.dataSourceTable(tablenum(PurchLine)).addRange(fieldnum(PurchLine, IsFinalized)).value(queryValue(NoYes::No));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>PurchFinalizeServiceTask</c> class and adds it to the batch header.
    /// </summary>
    /// <param name="_orders">
    /// A set of the <c>PurchFinalizeServiceTaskPurchaseOrder</c> classes.
    /// </param>
    /// <returns>
    /// An instance of the <c>PurchFinalizeServiceTask</c> class.
    /// </returns>
    protected PurchFinalizeServiceTask createTask(Set _orders)
    {
        return PurchFinalizeServiceTask::newTask(dataContract, _orders.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizePurchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finalizes purchase orders and lines.
    /// </summary>
    /// <param name="_dataContract">
    /// The data contract that is used when finalizing purchase orders and lines.
    /// </param>
    public void finalizePurchOrder(PurchFinalizeContract _dataContract)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().purchFinalize().serviceRun(_dataContract))
        {
            this.parmDataContract(_dataContract);
            this.buildQueries();

            if (this.isExecutingInBatch())
            {
                // add parallel processing runtime tasks to batch header
                batchHeader = this.getCurrentBatchHeader();
            }

            this.run(queryFirstRun);
            this.run(querySecondRun);

            if (batchHeader)
            {
                batchHeader.save();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataContract</Name>
				<Source><![CDATA[
    public PurchFinalizeContract parmDataContract(PurchFinalizeContract _dataContract = dataContract)
    {
        dataContract = _dataContract;

        return dataContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>PurchFinalizeServiceTask</c> class and adds it to the batch header.
    /// </summary>
    /// <param name="_orders">
    /// A set of the <c>PurchFinalizeServiceTaskPurchaseOrder</c> classes.
    /// </param>
    /// <remarks>
    /// If running in a batch, the <c>PurchFinalizeServiceTask</c> class is added to the batch header;
    /// otherwise, it is executed immediately.
    /// </remarks>
    protected void processTask(Set _orders)
    {
        PurchFinalizeServiceTask task = this.createTask(_orders);

        if (batchHeader)
        {
            batchHeader.addRuntimeTask(task, this.getCurrentBatchTask().RecId);
        }
        else
        {
            task.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds purchase orders and lines that can be finalized.
    /// </summary>
    /// <param name="_query">
    /// A query that is used to find purchase orders and lines.
    /// </param>
    protected void run(Query _query)
    {
        Set         purchLines;
        PurchTable  purchTable;
        PurchLine   purchLine;
        Set         finalizeOrders;
        QueryRun    queryRun;
        Counter     orderNo;

        if (_query)
        {
            queryRun = new QueryRun(_query);

            finalizeOrders = new Set(Types::Class);
            boolean flightPurchFinalizeEnabled = PurchFinalizeLineRecIdFlight::instance().isEnabled();
            
            if (flightPurchFinalizeEnabled)
            {
                purchLines = new Set(Types::Int64);
            }
            else
            {
                purchLines = new Set(Types::Record);
            }

            while (queryRun.next())
            {
                if (queryRun.changed(tablenum(PurchTable)))
                {
                    orderNo++;
                    if (purchTable)
                    {
                        if (flightPurchFinalizeEnabled)
                        {
                            finalizeOrders.add(PurchFinalizeServiceTaskPurchaseOrder::newPurchaseOrderPurchLineRecordIds(purchTable, purchLines));
                        }
                        else
                        {
                            finalizeOrders.add(PurchFinalizeServiceTaskPurchaseOrder::newPurchaseOrder(purchTable, purchLines));
                        }

                        if (finalizeOrders.elements() == this.taskSize())
                        {
                            this.processTask(finalizeOrders);

                            finalizeOrders = new Set(Types::Class);
                        }

                        if (flightPurchFinalizeEnabled)
                        {
                            purchLines = new Set(Types::Int64);
                        }
                        else
                        {
                            purchLines = new Set(Types::Record);
                        }

                    }

                    purchTable = queryRun.get(tablenum(PurchTable)).orig();
                }

                if (queryRun.changed(tablenum(PurchLine)))
                {
                    if (flightPurchFinalizeEnabled)
                    {
                        purchLine = queryRun.get(tablenum(PurchLine));
                    }
                    else
                    {
                        purchLine = queryRun.get(tablenum(PurchLine)).orig();
                    }

                    if (purchLine)
                    {                     
                        if (flightPurchFinalizeEnabled)
                        {
                            purchLines.add(purchLine.RecId);
                        }
                        else
                        {
                            purchLines.add(purchLine);
                        }
                    }
                }
            }

            if (purchTable)
            {
                if (flightPurchFinalizeEnabled)
                {
                    finalizeOrders.add(PurchFinalizeServiceTaskPurchaseOrder::newPurchaseOrderPurchLineRecordIds(purchTable, purchLines));
                }
                else
                {
                    finalizeOrders.add(PurchFinalizeServiceTaskPurchaseOrder::newPurchaseOrder(purchTable, purchLines));
                }

                this.processTask(finalizeOrders);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taskSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number of purchase orders that are included in a batch task.
    /// </summary>
    /// <returns>
    /// The number of purchase orders that are included in a batch task.
    /// </returns>
    protected int taskSize()
    {
        return 5;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private PurchInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of the <c>PurchFinalizeService</c> class.
    /// </summary>
    /// <returns>
    ///     An instance of the <c>PurchFinalizeService</c> class.
    /// </returns>
    public static PurchFinalizeService construct()
    {
        return new PurchFinalizeService();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>