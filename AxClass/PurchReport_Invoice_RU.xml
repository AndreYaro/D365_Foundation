<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReport_Invoice_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class PurchReport_Invoice_RU extends SalesPurchReport_Invoice_RU implements BatchRetryable
{
    Map vatCodeCache;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
        protected ModuleInventPurchSales getModule()
    {
        return ModuleInventPurchSales::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
        protected tableId getTableId()
    {
        return tableNum(VendTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineCategoryWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the weight of the category based item.
    /// </summary>
    /// <returns>
    ///     The gross weight of the item.
    /// </returns>
    protected ItemGrossWeight initLineCategoryWeight()
    {
        ItemGrossWeight ret;
        VendInvoiceTrans tmpInvoiceTrans = invoiceTrans;

        if (dynamicData.Category)
        {
            ret = tmpInvoiceTrans.Weight/(tmpInvoiceTrans.Qty ? tmpInvoiceTrans.Qty : 1);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineWeight</Name>
				<Source><![CDATA[
/// <summary>
    ///     Initializes weights.
    /// </summary>
    /// <param name="_inventQty">
    ///     A quantity of the item in inventory unit.
    /// </param>
    /// <param name="_inventTable">
    ///     The inventory item record from which to initialize.
    /// </param>
    protected void initLineWeight(InventQty _inventQty, InventTable _inventTable)
    {
        VendInvoiceTrans vendInvoiceTransLocal = invoiceTrans;

        if (!_inventTable)
        {
            dynamicData.ItemGrossWeight = this.initLineCategoryWeight();
            dynamicData.ItemNetWeight   = dynamicData.ItemGrossWeight;

            dynamicData.GrossWeight     = abs(vendInvoiceTransLocal.Weight);
        }
        else
        {
            super(_inventQty, _inventTable);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
        protected LanguageId languageId()
    {
        return company.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupIncludedInLine</Name>
				<Source><![CDATA[
        protected container markupIncludedInLine()
    {
        TaxCode tmpCode = this.vatCode(invoiceTrans.TaxGroup_RU, invoiceTrans.TaxItemGroup_RU);

        Amount  item, vat, excise;

        while select ItemPosted_RU,
                     TaxAmountVAT_RU,
                     TaxAmountExcise_RU,
                     TaxAmountVATMST_RU,
                     TaxAmountExciseMST_RU,
                     CalculatedAmountMST_W,
                     TaxGroup,
                     TaxItemGroup
        from markupTrans
        where markupTrans.TransTableId == invoiceTrans.TableId &&
              markupTrans.TransRecId   == invoiceTrans.RecId   &&
              markupTrans.CustVendPosted_RU                    &&
              markupTrans.ItemPosted_RU
        {
            if (this.vatCode(markupTrans.TaxGroup, markupTrans.TaxItemGroup) == tmpCode)
            {
                if (printInMST)
                {
                    item   += markupTrans.ItemPosted_RU ? markupTrans.CalculatedAmountMST_W : 0;
                    vat    += markupTrans.TaxAmountVATMST_RU;
                    excise += markupTrans.TaxAmountExciseMST_RU;
                }
                else
                {
                    item   += markupTrans.ItemPosted_RU;
                    vat    += markupTrans.TaxAmountVAT_RU;
                    excise += markupTrans.TaxAmountExcise_RU;
                }
            }
        }

        return [ item,
                 vat,
                 excise ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupInLine</Name>
				<Source><![CDATA[
        protected void markupInLine()
    {
        TaxCode tmpCode = this.vatCode(invoiceTrans.TaxGroup_RU, invoiceTrans.TaxItemGroup_RU);

        while select markupTrans
            where markupTrans.TransTableId  == invoiceTrans.TableId &&
                  markupTrans.TransRecId    == invoiceTrans.RecId   &&
                  markupTrans.CustVendPosted_RU
        {
            if (! markupTrans.ItemPosted_RU ||
                this.vatCode(markupTrans.TaxGroup, markupTrans.TaxItemGroup) != tmpCode)
            {
                this.prepareMarkupLine(markupTrans);
                this.writeDynamicLine();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        super();

        vatCodeCache = new Map(Types::Container, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offReportType</Name>
				<Source><![CDATA[
        protected OffReportType_RU offReportType()
    {
        return reverseInvoice == 1 ?
                OffReportType_RU::PurchInvoice :
                OffReportType_RU::PurchInvoiceCreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderDescription</Name>
				<Source><![CDATA[
        protected Description orderDescription()
    {
        return this.lookupLabel(literalStr("@SYS9452"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportHeader</Name>
				<Source><![CDATA[
        protected void prepareReportHeader()
    {
        SalesPurchReportCounteragentData_RU counteragentData;
        PurchAgreementHeader purchAgreementHeader;
        PurchAgreementHeaderExt_RU purchAgreementHeaderExt;

        header.AttorneyId          = invoiceJour.CustVendInvoiceJour::getAttorneyId_RU();
        header.AttorneyDate        = invoiceJour.CustVendInvoiceJour::getAttorneyDate_RU();
        header.AttorneyIssuedName  = invoiceJour.CustVendInvoiceJour::getAttorneyIssuedName_RU();

        counteragentData = this.initContragentData(vendor, vendorBankAccount, invoiceJour.InvoiceAccount);
        header.VendBankAddress = counteragentData.fullInvoiceInfo(true, true);
        header.VendOKPO        = counteragentData.parmOKPO();

        counteragentData = this.initContragentData(customer, customerBankAccount, ""); // customer is us
        header.CustBankAddress = counteragentData.fullInvoiceInfo(true, true);
        header.CustOKPO        = counteragentData.parmOKPO();

        purchAgreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(invoiceJour.DefaultDimension) as PurchAgreementHeaderExt_RU;
        purchAgreementHeader = PurchAgreementHeader::find(purchAgreementHeaderExt.AgreementHeader);

        header.AgreementDocumentTitle = purchAgreementHeader.DocumentTitle;
        header.AgreementDate = purchAgreementHeaderExt.AgreementDate;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTxtData</Name>
				<Source><![CDATA[
        protected FreeTxt prepareTxtData()
    {
        FreeTxt ret;
        switch (printCopyOriginal)
        {
            case PrintCopyOriginal::Copy :
                ret = this.lookupLabel(literalStr("@GLS104939"));
                break;
            default:
                ret = this.lookupLabel(literalStr("@GLS100934"));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCreditNote</Name>
				<Source><![CDATA[
        protected boolean reverseCreditNote()
    {
        return VendFormletterParameters::find().CreditNotePrintType_RU == CreditNotePrintType_RU::ReverseVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
        public void setParameters(
        PrintCopyOriginal   _printCopyOriginal = PrintCopyOriginal::Copy,
        CustVendInvoiceJour _invoiceJour       = null,
        RecordSortedList    _journalList       = null)
    {
        CustVendInvoiceJour invoiceJourTmp;

        if (_invoiceJour)
        {
            invoiceJourTmp = _invoiceJour;
        }
        else
        {
            invoiceJourTmp = new DictTable(tableNum(VendInvoiceJour)).makeRecord();
        }
        super(_printCopyOriginal, invoiceJourTmp, _journalList);

        invoiceTrans = new DictTable(tableNum(VendInvoiceTrans)).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
        protected tableId transTableId()
    {
        return tableNum(VendInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatCode</Name>
				<Source><![CDATA[
        private TaxCode vatCode(TaxGroup     _taxGroup,
                            TaxItemGroup _taxItemGroup)
    {
        TaxCode   ret;
        container key = [ _taxGroup, _taxItemGroup ];

        if (vatCodeCache.exists(key))
        {
            ret = vatCodeCache.lookup(key);
        }
        else
        {
            ret = TaxTable::vatCode_RU(_taxGroup, _taxItemGroup);

            vatCodeCache.insert(key, ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>