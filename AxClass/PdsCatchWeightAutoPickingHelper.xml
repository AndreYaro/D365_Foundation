<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCatchWeightAutoPickingHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsCatchWeightAutoPickingHelper</c> class helps to pick additional inventory quantity for catch weight items.
/// </summary>
class PdsCatchWeightAutoPickingHelper
{
    InventUpdate    inventUpdate;
    InventMovement  inventMovement;
    InventDim       inventDimCriteria;
    InventDimParm   inventDimParm;
    PdsCWInventQty  requestedCatchWeightUpdateQuantity;
    boolean         includeDeducted;
    boolean         isFullVisibilityCatchWeightItem;
    ItemId          cachedItemId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBePicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if automatic picking can be performed for an inventory transaction.
    /// </summary>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> table record.
    /// </param>
    /// <param name="_cwQtyNotPicked">
    /// A quantity that is not yet picked in inveotory unit.
    /// </param>
    /// <returns>
    /// true if automatic picking can be performed for an inventory transaction; otherwise, false.
    /// </returns>
    protected boolean canBePicked(InventTrans _inventTrans, PdsCWInventQty _cwQtyNotPicked)
    {
        PdsCWInventQty              cwQtyToPick;
        InventTransIdSum_MarkingRef inventTransIdSum_Issue;
        InventTransIdSum_MarkingRef inventTransIdSum_Receipt;
        boolean                     canBePicked = false;

        // Check if the transaction can be physically updated
        if (inventMovement.canInventTransBePhysicalUpdated(_inventTrans))
        {
            // Transactions for full visibility catch weight items carry the actual weight and thus can be automatically picked
            if (this.isFullVisibilityCatchWeightItem())
            {
                canBePicked = true;
            }

            // Check if the transaction is marked against registered receipt
            if (!canBePicked && _inventTrans.MarkingRefInventTransOrigin != 0)
            {
                // Calculate the cath weight quantity that is supposed to be picked on this step
                cwQtyToPick = min(_cwQtyNotPicked, -_inventTrans.PdsCWQty);

                inventTransIdSum_Issue = InventTransIdSum_MarkingRef::newMarkingRef(
                    _inventTrans.InventTransOrigin,
                    _inventTrans.MarkingRefInventTransOrigin,
                    true,
                    inventMovement.transChildType(),
                    inventMovement.transChildRefId());

                inventTransIdSum_Receipt = InventTransIdSum_MarkingRef::newMarkingRef(
                    _inventTrans.MarkingRefInventTransOrigin,
                    _inventTrans.InventTransOrigin);

                // Picking can be performed if there are enought physically updated receipts
                if (inventTransIdSum_Receipt.pdsCWRegistered() + inventTransIdSum_Receipt.pdsCWReceived() + inventTransIdSum_Receipt.pdsCWPurchased()
                    >= cwQtyToPick - inventTransIdSum_Issue.pdsCWPicked() - inventTransIdSum_Issue.pdsCWDeducted() - inventTransIdSum_Issue.pdsCWSold())
                {
                    canBePicked = true;
                }
            }
        }

        return canBePicked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFullVisibilityCatchWeightItem</Name>
				<Source><![CDATA[
    private boolean isFullVisibilityCatchWeightItem()
    {
        if (cachedItemId != inventMovement.itemId())
        {
            isFullVisibilityCatchWeightItem = PdsGlobal::pdsIsCWFullVisItem(inventMovement.itemId());
            cachedItemId = inventMovement.itemId();
        }

        return isFullVisibilityCatchWeightItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeDeducted</Name>
				<Source><![CDATA[
    public boolean parmIncludeDeducted(boolean _includeDeducted = includeDeducted)
    {
        includeDeducted = _includeDeducted;

        return includeDeducted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimCriteria</Name>
				<Source><![CDATA[
    public InventDim parmInventDimCriteria(InventDim _inventDimCriteria = inventDimCriteria)
    {
        inventDimCriteria = _inventDimCriteria;

        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm = _inventDimParm;

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventMovement</Name>
				<Source><![CDATA[
    public InventMovement parmInventMovement(InventMovement _inventMovement = inventMovement)
    {
        inventMovement = _inventMovement;

        return inventMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventUpdate</Name>
				<Source><![CDATA[
    public InventUpdate parmInventUpdate(InventUpdate _inventUpdate = inventUpdate)
    {
        inventUpdate = _inventUpdate;

        return inventUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequestedCatchWeightUpdateQuantity</Name>
				<Source><![CDATA[
    public PdsCWInventQty parmRequestedCatchWeightUpdateQuantity(PdsCWInventQty _requestedCatchWeightUpdateQuantity = requestedCatchWeightUpdateQuantity)
    {
        requestedCatchWeightUpdateQuantity = _requestedCatchWeightUpdateQuantity;

        return requestedCatchWeightUpdateQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that sufficient transactions are marked as picked for catch weight items.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// Insufficient inventory transactions with the picked status.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// Cannot change the reservation.
    /// </exception>
    public void pick()
    {
        InventTrans                 inventTrans;
        InventDim                   inventDim;
        InventDimParm               inventDimParmAll;
        InventQty                   cwQtyNotReserved;
        InventQty                   cwQtyNotPicked;
        InventQty                   cwQtyPicked;
        InventQty                   splitWeight;
        InventTransIdSum            inventTransIdSum;

        inventTransIdSum = InventTransIdSum::newTransIdChildType(inventMovement.inventTransOriginId(), inventMovement.transChildType(), inventMovement.transChildRefId());
        cwQtyNotPicked = requestedCatchWeightUpdateQuantity + inventTransIdSum.pdsCWPicked() +
            (includeDeducted ? inventTransIdSum.pdsCWDeducted() : 0); // pdsCWPicked and pdsCWDeducted return a negative number
        if (cwQtyNotPicked <= 0)
        { // Everything has been picked already
            return;
        }

        if (inventMovement.mustBePicked())
        { // Picking requirement, so don't attempt to do picking automatically
            warning("@SCM:InventMovementMustBePicked");
            Info("@SCM:InventOrderPickingGeneralGuide");
            throw error(strFmt("@SYS54028",StatusIssue::Picked));
        }

        // Physically reserved transactions have weight and can be picked.
        cwQtyNotReserved = cwQtyNotPicked + inventTransIdSum.pdsCWReservPhysical(); // pdsCWReservePhysical returns a negative number
        if (cwQtyNotReserved > 0)
        { // Not enough transactions with weight assigned
            if (!this.isFullVisibilityCatchWeightItem())
            { // Not a full visibility item - reservation will not record the right weight automatically. Explicit picking must be done.
                warning("@SCM:InventItemNotFullVisibilityMustBePicked");
                Info("@SCM:InventOrderPickingGeneralGuide");
                throw error(strFmt("@SYS54028",StatusIssue::Picked));
            }

            if (-inventTransIdSum.pdsCWPicked() - inventTransIdSum.pdsCWReservPhysical()
                - inventTransIdSum.pdsCWReserveOrdered() - inventTransIdSum.pdsCWOnOrder() < requestedCatchWeightUpdateQuantity)
            { // Over delivery - must be picked to specify weight through transaction dimensions.
                warning("@SCM:InventItemOverDeliveryMustBePickedToSpecifyWeight");
                Info("@SCM:InventOrderPickingGeneralGuide");
                throw error(strFmt("@SYS54028",StatusIssue::Picked));
            }

            // Try to reserve on dimensions already on transactions
            cwQtyNotReserved = this.reserve(cwQtyNotReserved);
            if (cwQtyNotReserved > 0)
            {
                warning("@SCM:InventItemMustBePickedToSpecifyDimensionsAndWeight");
                Info("@SCM:InventOrderPickingGeneralGuide");
                throw error(strFmt("@SYS54028",StatusIssue::Picked)); // We need the user to do picking in order to specify dimensions and weight
            }
        }

        // Now pick the remaining needed reserved parts
        inventTransIdSum = InventTransIdSum::newTransIdChildType(inventMovement.inventTransOriginId(), inventMovement.transChildType(), inventMovement.transChildRefId());
        if (-inventTransIdSum.pdsCWReservPhysical() < cwQtyNotPicked)
        {
            throw error("@SYS53948");
        }

        inventUpdate.initInventTransToIssueList(StatusIssue::ReservPhysical, StatusIssue::ReservPhysical,
                '', inventDimCriteria, inventDimParm,
                inventMovement.transChildType(), inventMovement.transChildRefId());

        inventDimParmAll.setAllInventDim(); // Pick on exact matching dimensions

        while (cwQtyNotPicked > 0 && inventUpdate.getNextInventTransToIssue(inventTrans))
        {
            if (this.canBePicked(inventTrans, cwQtyNotPicked))
            {
                inventDim = inventTrans.inventDim();
                // Do the pick.
                if (cwQtyNotPicked >= -inventTrans.PdsCWQty)
                { // Pick entire transaction
                    cwQtyPicked = -inventTrans.PdsCWQty;
                    splitWeight = -inventTrans.Qty;
                }
                else
                { // Split weight
                    if (inventTrans.PdsCWQty != 0)
                    {
                        splitWeight = decRound(inventTrans.Qty * cwQtyNotPicked / inventTrans.PdsCWQty, InventTable::inventDecimals(inventTrans.ItemId));
                        cwQtyPicked = cwQtyNotPicked;
                    }
                    else
                    {
                        cwQtyPicked = 0;
                        splitWeight = inventTrans.Qty;
                    }
                }
                InventUpd_Picked::newParameters(inventMovement, inventDim, inventDimParmAll, inventDim, inventDimParmAll, -splitWeight, '', -cwQtyPicked).updateNow();
                cwQtyNotPicked -= cwQtyPicked;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to convert existing <c>OnOrder</c> transactions to physical reservations for full visibility
    /// catch weight items.
    /// </summary>
    /// <param name="_cwQtyToReserve">
    /// The quantity needed to be reserved.
    /// </param>
    /// <returns>
    /// The quantity still not reserved.
    /// </returns>
    protected PdsCWInventQty reserve(PdsCWInventQty _cwQtyToReserve)
    {
        #Define.SerialControlledQty(1.00)
        InventTrans                 inventTrans;
        InventDim                   inventDim;
        InventDimParm               inventDimParmAll;
        InventSum                   inventSum;
        InventQty                   cwQtyNotReserved = _cwQtyToReserve;
        InventUpd_Reservation       inventUpd_Reservation;
        InventQty                   extraQty;
        InventTrans                 extraInventTrans;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            // Try to reserve on existing dimensions - only makes sense if serial number is specified on transaction.
            while select RecId from inventTrans
                order by StatusIssue, InventDimId
                where inventTrans.InventTransOrigin == inventMovement.inventTransOriginId()
                    &&  inventTrans.StatusIssue     == StatusIssue::OnOrder
                    &&  inventTrans.StatusReceipt   == StatusReceipt::None
                join AvailPhysical, #InventDimGroupAllFields, InventDimId from inventSum
                    where inventSum.ItemId                  == inventTrans.ItemId
                        &&  inventSum.InventDimId           == inventTrans.InventDimId
                        &&  inventSum.PdsCWAvailPhysical    == #SerialControlledQty
                        &&  inventSum.InventSerialId        != ''
            {
                inventDim.clear();
                inventDim.initFromInventSum(inventSum);
                inventDim.inventDimId = inventSum.InventDimId;

                // we need to increase the remainder on the movement,
                // if we want to reserve more than the original weight
                if (inventSum.AvailPhysical > -inventMovement.transIdSum().onOrder())
                {
                    extraQty = inventSum.AvailPhysical + inventMovement.transIdSum().onOrder();
                    inventMovement.pdsAdjustInventoryQuantity(-extraQty);
                    inventMovement.pdsUpdateBufferWithAdjustedQuantity();
                    select firstonly forupdate extraInventTrans
                    order by Qty
                    where extraInventTrans.InventTransOrigin    == inventMovement.inventTransOriginId()
                      &&  extraInventTrans.StatusIssue          == StatusIssue::OnOrder
                      &&  extraInventTrans.StatusReceipt        == StatusReceipt::None
                      &&  extraInventTrans.InventDimId          == inventMovement.inventDimId()
                      &&  extraInventTrans.Qty                  <= -extraQty;
                    if (!extraInventTrans.RecId)
                    {
                        warning("@SCM:InventCannotFindNewlyCreatedTransaction");
                        throw error(strFmt("@SYS54028",StatusIssue::Picked));   // Cannot find the newly created transaction
                    }
                    // Ensure newly created transaction has same dimensions
                    extraInventTrans.InventDimId = inventDim.InventDimId;
                    extraInventTrans.update();
                    extraInventTrans.updateSumUp();
                }
                inventDimParmAll.setAllInventDim();

                inventUpd_Reservation = InventUpd_Reservation::newParameters(inventMovement, inventDim, inventDimParmAll, 0, -inventSum.AvailPhysical, false, true, -#SerialControlledQty, true);
                inventUpd_Reservation.updateNow();
                cwQtyNotReserved -= #SerialControlledQty;
                if (cwQtyNotReserved <= 0)
                {
                    break;
                }
            }
        }
        else
        {
            // Try to reserve on existing dimensions - only makes sense if serial number is specified on transaction.
            while select RecId from inventTrans
                order by StatusIssue, InventDimId
                where inventTrans.InventTransOrigin == inventMovement.inventTransOriginId()
                    &&  inventTrans.StatusIssue       == StatusIssue::OnOrder
                    &&  inventTrans.StatusReceipt     == StatusReceipt::None
                join inventDim
                    where inventDim.InventDimId     == inventTrans.InventDimId
                        &&  inventDim.InventSerialId  != ''
                join AvailPhysical from inventSum
                    where inventSum.ItemId              == inventTrans.ItemId
                        &&   inventSum.InventDimId         == inventTrans.InventDimId
                        &&   inventSum.PdsCWAvailPhysical  == #SerialControlledQty
            {
                // we need to increase the remainder on the movement,
                // if we want to reserve more than the original weight
                if (inventSum.AvailPhysical > -inventMovement.transIdSum().onOrder())
                {
                    extraQty = inventSum.AvailPhysical + inventMovement.transIdSum().onOrder();
                    inventMovement.pdsAdjustInventoryQuantity(-extraQty);
                    inventMovement.pdsUpdateBufferWithAdjustedQuantity();
                    select firstonly forupdate extraInventTrans
                        order by Qty
                        where extraInventTrans.InventTransOrigin    == inventMovement.inventTransOriginId()
                          &&  extraInventTrans.StatusIssue          == StatusIssue::OnOrder
                          &&  extraInventTrans.StatusReceipt        == StatusReceipt::None
                          &&  extraInventTrans.InventDimId          == inventMovement.inventDimId()
                          &&  extraInventTrans.Qty                  <= -extraQty;
                    if (!extraInventTrans.RecId)
                    {
                        warning("@SCM:InventCannotFindNewlyCreatedTransaction");
                        throw error(strFmt("@SYS54028",StatusIssue::Picked));   // Cannot find the newly created transaction
                    }
                    // Ensure newly created transaction has same dimensions
                    extraInventTrans.InventDimId = inventDim.InventDimId;
                    extraInventTrans.update();
                    extraInventTrans.updateSumUp();
                }
                inventDimParmAll.setAllInventDim();

                inventUpd_Reservation = InventUpd_Reservation::newParameters(inventMovement, inventDim, inventDimParmAll, 0, -inventSum.AvailPhysical, false, true, -#SerialControlledQty, true);
                inventUpd_Reservation.updateNow();
                cwQtyNotReserved -= #SerialControlledQty;
                if (cwQtyNotReserved <= 0)
                {
                    break;
                }
            }
        }

        return cwQtyNotReserved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PdsCatchWeightAutoPickingHelper construct()
    {
        return new PdsCatchWeightAutoPickingHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>PdsCatchWeightAutoPickingHelper</c> class
    /// to be used during sales invoice update.
    /// </summary>
    /// <param name="_salesParmLine">
    /// A <c>SalesParmLine</c> table buffer.
    /// </param>
    /// <param name="_inventMovement">
    /// An instance of the <c>InventMovement</c> class.
    /// </param>
    /// <param name="_salesParmSubLine">
    /// A <c>SalesParmSubLine</c> table buffer.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PdsCatchWeightAutoPickingHelper</c> class.
    /// </returns>
    public static PdsCatchWeightAutoPickingHelper newSalesInvoice(
        SalesParmLine               _salesParmLine,
        InventMov_Sales             _inventMovement,
        SalesParmSubLine            _salesParmSubLine = null)
    {
        InventUpd_Physical              inventUpd_Physical;
        PdsCatchWeightAutoPickingHelper pdsCatchWeightAutoPickingHelper = PdsCatchWeightAutoPickingHelper::construct();

        inventUpd_Physical = InventUpd_Financial::newSalesInvoiceProforma(
            _inventMovement,
            LedgerVoucher::newLedgerPost(
                DetailSummary::Summary,
                SysModule::Purch,
                NumberSequenceTable::find(SalesParameters::numRefSalesInvoiceVoucher().NumberSequenceId).NumberSequence),
            _salesParmLine,
            _salesParmSubLine).createInventUpd_Physical();

        pdsCatchWeightAutoPickingHelper.parmInventUpdate(inventUpd_Physical);
        pdsCatchWeightAutoPickingHelper.parmInventMovement(_inventMovement);
        pdsCatchWeightAutoPickingHelper.parmInventDimCriteria(inventUpd_Physical.parmInventDim());
        pdsCatchWeightAutoPickingHelper.parmInventDimParm(inventUpd_Physical.parmInventDimParm());
        pdsCatchWeightAutoPickingHelper.parmRequestedCatchWeightUpdateQuantity(_salesParmLine.PdsCWDeliverNow);
        pdsCatchWeightAutoPickingHelper.parmIncludeDeducted(true);

        return pdsCatchWeightAutoPickingHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>PdsCatchWeightAutoPickingHelper</c> class
    /// to be used during sales packing slip update.
    /// </summary>
    /// <param name="_salesParmLine">
    /// A <c>SalesParmLine</c> table buffer.
    /// </param>
    /// <param name="_inventMovement">
    /// An instance of the <c>InventMovement</c> class.
    /// </param>
    /// <param name="_custPackingSlipTrans">
    /// A <c>CustPackingSlipTrans</c> table buffer.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PdsCatchWeightAutoPickingHelper</c> class.
    /// </returns>
    public static PdsCatchWeightAutoPickingHelper newSalesPackingSlip(
        SalesParmLine               _salesParmLine,
        InventMov_Sales             _inventMovement,
        CustPackingSlipTrans        _custPackingSlipTrans)
    {
        InventUpd_Physical              inventUpd_Physical;
        PdsCatchWeightAutoPickingHelper pdsCatchWeightAutoPickingHelper = PdsCatchWeightAutoPickingHelper::construct();

        inventUpd_Physical = InventUpd_Physical::newSalesPackingSlip(
            _inventMovement,
            _custPackingSlipTrans,
            _custPackingSlipTrans.custPackingslipJour().PackingSlipId);

        pdsCatchWeightAutoPickingHelper.parmInventUpdate(inventUpd_Physical);
        pdsCatchWeightAutoPickingHelper.parmInventMovement(_inventMovement);
        pdsCatchWeightAutoPickingHelper.parmInventDimCriteria(inventUpd_Physical.parmInventDim());
        pdsCatchWeightAutoPickingHelper.parmInventDimParm(inventUpd_Physical.parmInventDimParm());
        pdsCatchWeightAutoPickingHelper.parmRequestedCatchWeightUpdateQuantity(_salesParmLine.PdsCWDeliverNow);

        return pdsCatchWeightAutoPickingHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransferShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>PdsCatchWeightAutoPickingHelper</c> class
    /// to be used during transfer order shipment update.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    /// An <c>InventTransferParmLine</c> table buffer.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// An instance of the <c>LedgerVoucher</c> class.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PdsCatchWeightAutoPickingHelper</c> class.
    /// </returns>
    public static PdsCatchWeightAutoPickingHelper newTransferShipment(
        InventTransferParmLine  _inventTransferParmLine,
        LedgerVoucher           _ledgerVoucher)
    {
        InventUpd_Physical              inventUpd_Physical;
        InventTransferLine              inventTransferLine;
        InventMovement                  inventMovement;
        InventDim                       inventDimTransferParmLine;
        inventDimParm                   inventDimParmTransferParmLine;
        PdsCatchWeightAutoPickingHelper pdsCatchWeightAutoPickingHelper = PdsCatchWeightAutoPickingHelper::construct();

        inventTransferLine = InventTransferLine::findTransIdShip(_inventTransferParmLine.InventTransId, true);
        inventMovement = InventMov_TransferFrom::newFromInventTransferLine(inventTransferLine);

        inventDimTransferParmLine  = InventDim::find(_inventTransferParmLine.InventDimId);
        inventDimParmTransferParmLine.initFromInventDim(inventDimTransferParmLine);

        inventUpd_Physical = InventUpd_Financial::newInventTransferLineShip(
            inventMovement,
            _ledgerVoucher,
            _inventTransferParmLine,
            0,
            _inventTransferParmLine.QtyShipNow,
            inventDimTransferParmLine,
            inventDimParmTransferParmLine,
            _inventTransferParmLine.PdsCWQtyShipNow).createInventUpd_Physical();

        pdsCatchWeightAutoPickingHelper.parmInventUpdate(inventUpd_Physical);
        pdsCatchWeightAutoPickingHelper.parmInventMovement(inventMovement);
        pdsCatchWeightAutoPickingHelper.parmInventDimCriteria(inventUpd_Physical.parmInventDim());
        pdsCatchWeightAutoPickingHelper.parmInventDimParm(inventUpd_Physical.parmInventDimParm());
        pdsCatchWeightAutoPickingHelper.parmRequestedCatchWeightUpdateQuantity(_inventTransferParmLine.PdsCWQtyShipNow);

        return pdsCatchWeightAutoPickingHelper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>