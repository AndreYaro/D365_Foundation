<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLabelChangeTAJPriceGroupFetcher</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Fetches source data based on the price trade agreement journals that define a sales price for customer group.
/// </summary>
class RetailLabelChangeTAJPriceGroupFetcher extends RetailLabelChangeDataFetcherBase
{
    FromDate activatedFromDate;
    FromDate modifiedFromDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSourceSpecificQuery</Name>
				<Source><![CDATA[
    protected Query createSourceSpecificQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbds;
        QueryBuildFieldList qbfl;

        // PriceDiscTable
        qbds = query.addDataSource(tableNum(PriceDiscTable));
        qbfl = qbds.fields();
        qbfl.clearFieldList();
        qbfl.addField(fieldNum(PriceDiscTable, ItemRelation), SelectionField::Database);
        qbfl.addField(fieldNum(PriceDiscTable, InventDimId), SelectionField::Database); // Is used for VariantId retrieval
        qbds.addRange(fieldNum(PriceDiscTable, relation)).value(queryValue(PriceType::PriceSales));
        qbds.addRange(fieldNum(PriceDiscTable, ItemCode)).value(queryValue(PriceDiscProductCodeType::Table));
        qbds.addRange(fieldNum(PriceDiscTable, AccountCode)).value(queryValue(PriceDiscPartyCodeType::GroupId));
        if (activatedFromDate && modifiedFromdate)
        {
            // Extended query syntax
            qbds.addRange(fieldNum(PriceDiscTable, RecId)).value(
                strFmt(
                    '(((%1 >= %4) && (%1 <= %5)) || ((%2 >= %6) && (%2 <= %7)) || ((%3 >= %8) && ((%1 == %9) || (%1 <= %5)) && ((%2 == %9) || (%2 >= %5))))',
                    fieldStr(PriceDiscTable, FromDate),
                    fieldStr(PriceDiscTable, ToDate),
                    fieldStr(PriceDiscTable, modifiedDateTime),
                    date2StrXpp(activatedFromDate),
                    date2StrXpp(priceDate),
                    date2StrXpp(activatedFromDate - 1),
                    date2StrXpp(priceDate - 1),
                    DateTimeUtil::toStr(DateTimeUtil::newDateTime(modifiedFromDate, 0)),
                    date2StrXpp(dateNull())));
        }
        // PriceDiscGroup
        qbds = qbds.addDataSource(tableNum(PriceDiscGroup));
        qbds.addLink(fieldNum(PriceDiscAdmTrans, AccountRelation), fieldNum(PriceDiscGroup, GroupId));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addRange(fieldNum(PriceDiscGroup, Type)).value(queryValue(PriceGroupType::PriceGroup));
        qbds.addRange(fieldNum(PriceDiscGroup, Module)).value(queryValue(ModuleInventCustVend::Cust));
        qbfl = qbds.fields();
        qbfl.clearFieldList();
        qbfl.addField(fieldNum(PriceDiscGroup, TableId), SelectionField::Database);
        // RetailChannelPriceGroup
        qbds = qbds.addDataSource(tableNum(RetailChannelPriceGroup));
        qbds.relations(true);
        qbds.joinMode(JoinMode::InnerJoin);
        qbfl = qbds.fields();
        qbfl.clearFieldList();
        qbfl.addField(fieldNum(RetailChannelPriceGroup, TableId), SelectionField::Database);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemVariantId</Name>
				<Source><![CDATA[
    protected container getItemVariantId()
    {
        PriceDiscTable priceDiscTable;
        InventDimCombination inventDimCombination;

        priceDiscTable = qr.get(tableNum(PriceDiscTable));
        inventDimCombination = InventDimCombination::findByInventDim(priceDiscTable.ItemRelation, priceDiscTable.inventDim());

        return [priceDiscTable.ItemRelation, inventDimCombination.RetailVariantId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemFieldId</Name>
				<Source><![CDATA[
    protected FieldId itemFieldId()
    {
        return fieldNum(PriceDiscTable, ItemRelation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemTableId</Name>
				<Source><![CDATA[
    protected TableId itemTableId()
    {
        return tableNum(PriceDiscTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        FromDate _activatedFromDate,
        FromDate _modifiedFromDate,
        PriceDate _priceDate,
        RefRecid _hierarchyRecId,
        OMOperatingUnitRefRecId _operatingUnitId,
        EcoResCategoryId _categoryId,
        RetailItemQtyFilter _itemQtyFilter,
        NoYes _initWithQtyOnHand)
    {
        activatedFromDate = _activatedFromDate;
        modifiedFromDate = _modifiedFromDate;
        super(_priceDate, _hierarchyRecId, _operatingUnitId, _categoryId, _itemQtyFilter, _initWithQtyOnHand);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productFieldId</Name>
				<Source><![CDATA[
    protected FieldId productFieldId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productTableId</Name>
				<Source><![CDATA[
    protected TableId productTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>