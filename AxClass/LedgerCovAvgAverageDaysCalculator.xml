<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovAvgAverageDaysCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerCovAvgAverageDaysCalculator</c> class provides the shared logic for calculating average number of days
/// it takes to pay or deliver for customers or vendors.
/// </summary>
internal final class LedgerCovAvgAverageDaysCalculator
{
    private readonly TransDate DateFilter = LedgerCovAvgPopulatorHelper::offsetCompanyDateInPast(LedgerCovAvgConstants::NumberOfMonthsToCaulculate);
    private LedgerCovAvgIExecutionContext context;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDateByAverage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal date adjustDateByAverage(CustVendAC _account, date _dateToAdjust)
    {
        TransDate adjustedDate;

        if (this.hasTransactionsAvailableForAverage(_account))
        {
            adjustedDate = _dateToAdjust + this.averageNumberOfDays(_account);
        }

        return adjustedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>averageNumberOfDays</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal LedgerCovAvgNumberOfDays averageNumberOfDays(CustVendAC _account)
    {
        LedgerCovAvgNumberOfDays averageDaysResult;

        LedgerCovAvgAverageDaysMap averageDays = context.getTableBuffer();

        select sum(TransactionCount), sum(NumberOfDays) from averageDays
            where averageDays.Account == _account
                && averageDays.StartOfMonth >= DateFilter;

        if (averageDays.TransactionCount != 0)
        {
            averageDaysResult = real2int(averageDays.NumberOfDays / averageDays.TransactionCount);
        }

        return averageDaysResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransactionsAvailableForAverage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean hasTransactionsAvailableForAverage(CustVendAC _account)
    {
        LedgerCovAvgAverageDaysMap averageDays = context.getTableBuffer();

        select firstonly RecId from averageDays
            where averageDays.Account == _account
                && averageDays.StartOfMonth >= DateFilter;

        return averageDays.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static LedgerCovAvgAverageDaysCalculator newFromContext(LedgerCovAvgIExecutionContext _context)
    {
        LedgerCovAvgAverageDaysCalculator calculator = new LedgerCovAvgAverageDaysCalculator();
        calculator.context = _context;

        return calculator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>