<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportingCharReplaceHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>TaxReportingCharReplaceHelper</c> class serves as a helper class to replace accent characters with their latin equivalent
///     and providing options for which special characters to retain and which to remove.
/// </summary>
/// <remarks>
///     The sets of special characters are chosen based on the ISO/IEC 8859-1 standard.
/// </remarks>
public class TaxReportingCharReplaceHelper
{
    str defaultReplacementChar; // Default replacement for unknown characters.

    boolean keepAccentCharacters; // Keep accent letters defined in the ISO/IEC 8859-1 set.
    boolean keepEndOfLineCharacters; // Keep Carriage Return and Line Feed.
    boolean keepWhitespaceCharacters; // Keep Space and Tab.
    boolean keepDigits; // Keep arabic digits 0-9.
    boolean keepLatinAlphabetLetters; // Keep letters a-z and A-Z
    boolean keepSpecialCharacters; // Keep ISO/IEC 8859-1 printable characters.
    boolean replaceAccentCharacters; // All accent letters defined in the extended ASCII set (codes 128 to 255) are replaced with their latin equivalent.

    set charKeepers;
    map charReplacements;
    map charCustomReplacements;

    #CharacterCodes_Iso8859_1

    #define.ActionKeep(0) // Keep the character as it is
    #define.ActionReplaceWithCode(1) // Replace character by another unique char or group of chars, specified in the charsReplacements container
    #define.ActionReplaceWithCustomCode(2) // Replace character by another unique char or group of chars, specified in the charsReplacements container
    #define.ActionReplaceWithDefault(3) // Replace character by a default char, specified in defaultReplacementChar
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCharReplacements</Name>
				<Source><![CDATA[
    private void addCharReplacements(container _charsToReplace, container _replacements, map _destinationMap)
    {
        int iter;
        str currentChar;
        str currentReplacement;

        // _charsToReplace and _replacements should have the same length
        if (conLen(_charsToReplace) != conLen(_replacements))
        {
            throw error(Error::wronguseoffunction(funcname()));
        }

        // Populate map of replacements. It contains pairs of (key, value) = (asciiCodeOfCharToReplace, replacement).
        // Using ascii codes for keys, in order to keep the comparisons case sensitive.
        for (iter = 1; iter <= conLen(_charsToReplace); iter ++)
        {
            currentChar = conPeek(_charsToReplace, iter);
            currentReplacement = conPeek(_replacements, iter);
            _destinationMap.insert(char2Num(currentChar, 1), currentReplacement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomCharKeepers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows setting of additional characters to keep in the text transformation.
    /// </summary>
    /// <param name="_charsToKeepAsIs">
    /// List of characters which will be retained in the text.
    /// </param>
    /// <remarks>
    /// Can be the 0-9 digits or any other (comma, whitespace, dash etc).
    /// </remarks>
    public void addCustomCharKeepers(container _charsToKeepAsIs)
    {
        int iter;
        str currentChar;

        // Populate set of keepers, with the ASCII codes of the characters to keep.
        for (iter = 1; iter <= conLen(_charsToKeepAsIs); iter ++)
        {
            currentChar = conPeek(_charsToKeepAsIs, iter);
            charKeepers.add(char2Num(currentChar, 1));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomCharReplacements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows specification of characters to replace and their replacements. These will be used as addition to the other characters which might be enabled though the parm methods.
    /// </summary>
    /// <param name="_charsToReplace">
    /// List of characters from initial text which will be replaced.
    /// </param>
    /// <param name="_replacements">
    /// List of replacements.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Wrong use of function, if the number of replacements is not equal to the number of chars to replace.
    /// </exception>
    /// <remarks>
    /// For each i, _charsToReplace[i] will be replaced with _replacements[i]. Can be characters or groups of characters, for example it is possible replace 'æ' with 'ae'.
    /// </remarks>
    public void addCustomCharReplacements(container _charsToReplace, container _replacements)
    {
        this.addCharReplacements(_charsToReplace, _replacements, charCustomReplacements);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedAction</Name>
				<Source><![CDATA[
    private int getRelatedAction(int _characterCode)
    {
        // Keep this character?
        if ((keepLatinAlphabetLetters && this.isLatinAlphabetCharacter(_characterCode)) ||
            (keepDigits && this.isDigit(_characterCode)) ||
            (keepSpecialCharacters && this.isSpecialCharacter(_characterCode)) ||
            (keepAccentCharacters && this.isAccentCharacter(_characterCode)) ||
            (keepWhitespaceCharacters && this.isWhitespaceCharacter(_characterCode)) ||
            (keepEndOfLineCharacters && this.isEndOfLineCharacter(_characterCode)))
        {
            return #ActionKeep;
        }

        // Keep this character as part of the non-default keepers set?
        if (charKeepers.in(_characterCode))
        {
            return #ActionKeep;
        }

        // Replace this character as part of the default replacements for accent chars?
        if (replaceAccentCharacters && this.isAccentCharacter(_characterCode))
        {
            return #ActionReplaceWithCode;
        }

        // Replace this character as part of the custom user-set replacements?
        if (charCustomReplacements.exists(_characterCode))
        {
            return #ActionReplaceWithCustomCode;
        }

        return #ActionReplaceWithDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccentCharacter</Name>
				<Source><![CDATA[
    private boolean isAccentCharacter(int _characterCode)
    {
        return  (#AccentCharsRange1Min <= _characterCode && #AccentCharsRange1Max >= _characterCode) ||
                (#AccentCharsRange2Min <= _characterCode && #AccentCharsRange2Max >= _characterCode) ||
                (#AccentCharsRange3Min <= _characterCode && #AccentCharsRange3Max >= _characterCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDigit</Name>
				<Source><![CDATA[
    private boolean isDigit(int _characterCode)
    {
        return  #DigitsMin <= _characterCode && #DigitsMax >= _characterCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEndOfLineCharacter</Name>
				<Source><![CDATA[
    private boolean isEndOfLineCharacter(int _characterCode)
    {
        return  (_characterCode == #LineFeed) ||
                (_characterCode == #CarriageReturn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLatinAlphabetCharacter</Name>
				<Source><![CDATA[
    private boolean isLatinAlphabetCharacter(int _characterCode)
    {
        return  (#LatinUpperCaseMin <= _characterCode && #LatinUpperCaseMax >= _characterCode) ||
                (#LatinLowerCaseMin <= _characterCode && #LatinLowerCaseMax >= _characterCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSpecialCharacter</Name>
				<Source><![CDATA[
    private boolean isSpecialCharacter(int _characterCode)
    {
        return  (#SpecialCharsRange1Min <= _characterCode && #SpecialCharsRange1Max >= _characterCode) ||
                (#SpecialCharsRange2Min <= _characterCode && #SpecialCharsRange2Max >= _characterCode) ||
                (#SpecialCharsRange3Min <= _characterCode && #SpecialCharsRange3Max >= _characterCode) ||
                (#SpecialCharsRange4Min <= _characterCode && #SpecialCharsRange4Max >= _characterCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWhitespaceCharacter</Name>
				<Source><![CDATA[
    private boolean isWhitespaceCharacter(int _characterCode)
    {
        return  (_characterCode == #Tab) ||
                (_characterCode == #Space);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        keepLatinAlphabetLetters = true; // Based on expected usage, latin letters are kept by default.
        charKeepers = new set(Types::Integer);
        charReplacements = new map(Types::Integer, Types::String);
        charCustomReplacements = new map(Types::Integer, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultReplacementChar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default replacement character is set.
    /// </summary>
    /// <param name="_defaultReplacementChar">
    /// Character(s) to use for replacement of unknown chars. Default value is the empty string.
    /// </param>
    /// <returns>
    /// Character(s) used for replacement of unknown chars.
    /// </returns>
    public Str parmDefaultReplacementChar(Str _defaultReplacementChar = defaultReplacementChar)
    {
        defaultReplacementChar = _defaultReplacementChar;
        return defaultReplacementChar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeepAccentCharacters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if ISO/IEC 8859-1 accent letters should be kept.
    /// </summary>
    /// <param name="_keepAccentCharacters">
    /// Whether to keep ISO/IEC 8859-1 accent letters or not.
    /// </param>
    /// <returns>
    /// A value which determines whether to keep ISO/IEC 8859-1 accent letters.
    /// </returns>
    public Boolean parmKeepAccentCharacters(Boolean _keepAccentCharacters = keepAccentCharacters)
    {
        keepAccentCharacters = _keepAccentCharacters;
        return keepAccentCharacters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeepDigits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the digits from 0 to 9 should be retained. If not set, by default digits are removed.
    /// </summary>
    /// <param name="_keepDigits">
    /// Whether to keep the digits found in the initial string.
    /// </param>
    /// <returns>
    ///True if the digits found in the initial string are to be retained; false, otherwise.
    /// </returns>
    public Boolean parmKeepDigits(Boolean _keepDigits = keepDigits)
    {
        keepDigits = _keepDigits;
        return keepDigits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeepEndOfLineCharacters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to keep carriage return, line feed characters.
    /// </summary>
    /// <param name="_keepEndOfLineCharacters">
    /// Whether to keep carriage return, line feed characters.
    /// </param>
    /// <returns>
    /// True if the carriage return, line feed characters are to kept; false, otherwise.
    /// </returns>
    public boolean parmKeepEndOfLineCharacters(Boolean _keepEndOfLineCharacters = keepEndOfLineCharacters)
    {
        keepEndOfLineCharacters = _keepEndOfLineCharacters;
        return keepEndOfLineCharacters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeepLatinAlphabetLetters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether to keep all latin alphabet letters.
    /// </summary>
    /// <param name="_keepLatinAlphabetLetters">
    /// Determine whether to keep the latin alphabet letters.
    /// </param>
    /// <returns>
    /// True if the latin alphabet letters are to be kept; false, otherwise.
    /// </returns>
    public Boolean parmKeepLatinAlphabetLetters(Boolean _keepLatinAlphabetLetters = keepLatinAlphabetLetters)
    {
        keepLatinAlphabetLetters = _keepLatinAlphabetLetters;
        return keepLatinAlphabetLetters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeepSpecialCharacters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether to keep ISO/IEC 8859-1 printable punctuation characters (codes up to 126).
    /// </summary>
    /// <param name="_keepSpecialCharacters">
    /// Whether to keep the printable punctuation characters within the ISO/IEC 8859-1 codes up to 126.
    /// </param>
    /// <returns>
    /// True if the printable punctuation characters within the ISO/IEC 8859-1 codes up to 126 are to be kept; false, otherwise.
    /// </returns>
    public Boolean parmKeepSpecialCharacters(Boolean _keepSpecialCharacters = keepSpecialCharacters)
    {
        keepSpecialCharacters = _keepSpecialCharacters;
        return keepSpecialCharacters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeepWhitespaceCharacters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether to keep tab and Space characters.
    /// </summary>
    /// <param name="_keepWhitespaceCharacters">
    /// Whether to keep Space and Tab characters.
    /// </param>
    /// <returns>
    /// True if space and tab characters are to be retained; false, otherwise.
    /// </returns>
    public Boolean parmKeepWhitespaceCharacters(Boolean _keepWhitespaceCharacters = keepWhitespaceCharacters)
    {
        keepWhitespaceCharacters = _keepWhitespaceCharacters;
        return keepWhitespaceCharacters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplaceAccentCharacters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether to replace all accent letters defined in the ISO/IEC 8859-1 set with their latin equivalent.
    /// </summary>
    /// <param name="_replaceAccentCharacters">
    /// Whether to replace the accent chars in the ISO/IEC 8859-1 set.
    /// </param>
    /// <returns>
    /// True if the accent chars in the ISO/IEC 8859-1 set are to replaced; false, otherwise.
    /// </returns>
    public boolean parmReplaceAccentCharacters(boolean _replaceAccentCharacters = replaceAccentCharacters)
    {
        container accentLetters;
        container accentLettersReplacements;

        replaceAccentCharacters = _replaceAccentCharacters;

        // Lazy initialization of char map
        if (replaceAccentCharacters && charReplacements.empty())
        {
            // Upper case accent characters, ISO 8859-1 codes 192-214, 216-223
            accentLetters = ['À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'Þ', 'ß'];
            // Lower case accent characters, ISO 8859-1 codes 224-246, 248-255
            accentLetters += ['à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'þ', 'ÿ'];

            // Default replacements, upper case
            accentLettersReplacements = ['A', 'A', 'A', 'A', 'A', 'AA', 'AE', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'D', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 'P', 'B'];
            // Default replacements, lower case
            accentLettersReplacements += ['a', 'a', 'a', 'a', 'a', 'aa', 'ae', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'd', 'n', 'o', 'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u', 'y', 'p', 'y'];

            this.addCharReplacements(accentLetters, accentLettersReplacements, charReplacements);
        }

        return replaceAccentCharacters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transform</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transforms the input text by replacing the specified chars.
    /// </summary>
    /// <param name="_initialText"> Input text to be transformed. </param>
    /// <returns> The text which has been obtained from _initialText by applying the transformations described. </returns>
    /// <remarks>
    /// Case sensitive. Retains the latin alphabet chars and optionally other chars explicitly specified.
    /// </remarks>
    public str transform (str _initialText)
    {
        str currentChar;
        int currentCharAscii;
        int iter;
        str result;
        int action;

        // Validate input
        if (strLen(_initialText) == 0) // Nothing to transform
        {
            return '';
        }

        // Start processing the initialText
        for (iter = 1; iter <= strlen(_initialText); iter++)
        {
            currentChar = substr(_initialText, iter, 1);
            currentCharAscii = char2Num(currentChar, 1);

            action = this.getRelatedAction(currentCharAscii);

            switch (action)
            {
                case #ActionKeep:
                    result += currentChar;
                    break;

                case #ActionReplaceWithCode:
                    result += any2str(charReplacements.lookup(currentCharAscii));
                    break;

                case #ActionReplaceWithCustomCode:
                    result += any2str(charCustomReplacements.lookup(currentCharAscii));
                    break;

                case #ActionReplaceWithDefault:
                    result += defaultReplacementChar; // Empty by default, unless set by user
                    break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>