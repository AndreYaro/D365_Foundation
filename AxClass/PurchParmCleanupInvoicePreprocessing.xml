<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchParmCleanupInvoicePreprocessing</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Executes pre-processing operations for <c>PurchParmCleanUp</c> functionality, processing lines
/// through efficient set-based operations where possible, before remaining lines are addressed by
/// regular logic inside <c>PurchParmCleanup</c>.
/// </summary>
internal class PurchParmCleanupInvoicePreprocessing
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static PurchParmCleanupInvoicePreprocessing construct()
    {
        return new PurchParmCleanupInvoicePreprocessing();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInvoiceTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pre-processes invoice related tables.
    /// </summary>
    /// <param name = "_cleanUpDateTime">The cutoff for determining which invoices to process.</param>
    /// <param name = "_parmJobStatus">The state for filtering which invoices to process.</param>
    /// <param name = "_applicabilityBypass">Should parts of the applicability check be bypassed.</param>
    internal void deleteInvoiceTables(utcdatetime _cleanUpDateTime, ParmJobStatus _parmJobStatus, boolean _applicabilityBypass = false)
    {
        if (!this.isApplicable(_parmJobStatus, _applicabilityBypass))
        {
            return;
        }

        VendInvoiceInfoTable invoiceHeader;
        VendInvoiceInfoTableRecIdsTmp invoiceHeadersToProcess;
        VendInvoiceInfoTableRecIdsTmp invoiceHeadersBeingProcessed;
        PurchPrepayTable purchPrepayTable;

        insert_recordset invoiceHeadersToProcess (VendInvoiceInfoTable, ParmId, TableRefId, TransportationDocument)
        select RecId, ParmId, TableRefId, TransportationDocument from invoiceHeader
            where invoiceHeader.CreatedDateTime <= _cleanUpDateTime &&
                invoiceHeader.ParmJobStatus == _parmJobStatus
            notexists join purchPrepayTable
            where  invoiceHeader.PurchId == purchPrepayTable.PurchTable &&
                purchPrepayTable.PrepayApplicationRemaining > 0;

        select count(RecId) from invoiceHeadersToProcess;

        int headerCountToProcess = int642int(invoiceHeadersToProcess.RecId);

        if (headerCountToProcess == 0)
        {
            return;
        }

        int iterations = 1 + real2int(headerCountToProcess / 1000);

        for (int i = 0; i < iterations; i++)
        {
            delete_from invoiceHeadersBeingProcessed;

            insert_recordset invoiceHeadersBeingProcessed (VendInvoiceInfoTable, ParmId, TableRefId, TransportationDocument)
                select firstonly1000 VendInvoiceInfoTable, ParmId, TableRefId, TransportationDocument from invoiceHeadersToProcess;

            this.processChunk(invoiceHeadersBeingProcessed);

            delete_from invoiceHeadersToProcess exists join invoiceHeadersBeingProcessed 
                where invoiceHeadersToProcess.VendInvoiceInfoTable == invoiceHeadersBeingProcessed.VendInvoiceInfoTable;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>processChunk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes a set of invoices limited in size within one transaction scope, removing
    /// the invoices and their associated tables via a series of set operations.
    /// </summary>
    /// <param name = "_headersToProcess">The set of invoices to process and related information to facility efficient joins.</param>
    protected void processChunk(VendInvoiceInfoTableRecIdsTmp _headersToProcess)
    {
        ttsbegin;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        MarkupTrans markupTrans;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

        // Process :
        VendInvoiceInfoTable invoiceHeaders;

        // Remove records that the header refers to, before removing the header
        TransportationDocument transportationDocument;
        PurchParmCleanUp::skipDeleteLogic(transportationDocument);
        delete_from transportationDocument
            exists join _headersToProcess where _headersToProcess.TransportationDocument == transportationDocument.RecId;

        FiscalReferenceParm_BR fiscalReferenceParm_BR;
        PurchParmCleanUp::skipDeleteLogic(fiscalReferenceParm_BR);
        delete_from fiscalReferenceParm_BR
            where fiscalReferenceParm_BR.SourceTableId == tableNum(VendInvoiceInfoTable)
            exists join _headersToProcess where fiscalReferenceParm_BR.SourceRecId == _headersToProcess.VendInvoiceInfoTable;


        // Source document data removal is a no-op.
        // Source document data for posted(executed) invoices has been transferred to the corresponding journal,
        // so there are now other records using the same source document entries and they need not be deleted.

        // Remove headers
        PurchParmCleanUp::skipDeleteLogic(invoiceHeaders);
        delete_from invoiceHeaders exists join _headersToProcess
            where _headersToProcess.VendInvoiceInfoTable == invoiceHeaders.RecId;

        // Belgian trade reporting
        // <GEBL>
        if (TradeBLWIParameters::isBLWIFeatureEnabled())
        {
            TradeBLWIJournalPurposeCodes journalPurposeCodes;
            PurchParmCleanUp::skipDeleteLogic(journalPurposeCodes);
            delete_from journalPurposeCodes exists join _headersToProcess
                where journalPurposeCodes.TypeOfForm == TradeBLWITypeOfForm::VendInvoice
                    && journalPurposeCodes.RefRecId == _headersToProcess.VendInvoiceInfoTable;
        }
        // </GEBL>

        // Remove all related subtables
        TaxWorkRegulation taxWorkRegulation;
        PurchParmCleanUp::skipDeleteLogic(taxWorkRegulation);
        delete_from taxWorkRegulation
            where taxWorkRegulation.HeadingTableId == invoiceHeaders.TableId
            exists join _headersToProcess
                where taxWorkRegulation.HeadingRecId == _headersToProcess.VendInvoiceInfoTable;

        VendInvoiceInfoSubMarkupMatchingTrans vendInvoiceInfoSubMarkupMatchingTrans;
        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoSubMarkupMatchingTrans);
        delete_from vendInvoiceInfoSubMarkupMatchingTrans
            exists join _headersToProcess
                where vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableParmId == _headersToProcess.ParmId
                    && vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableTableRefId == _headersToProcess.TableRefId;

        PurchParmCleanUp::skipDeleteLogic(markupTrans);
        delete_from markupTrans
            exists join vendInvoiceInfoSubTable
                where markupTrans.TransTableId == vendInvoiceInfoSubTable.TableId
                   && markupTrans.TransRecId == vendInvoiceInfoSubTable.RecId
            exists join _headersToProcess
                where vendInvoiceInfoSubTable.ParmId == _headersToProcess.ParmId
                    && vendInvoiceInfoSubTable.TableRefId == _headersToProcess.TableRefId;

        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoSubTable);
        delete_from vendInvoiceInfoSubTable
            exists join _headersToProcess
                where vendInvoiceInfoSubTable.ParmId == _headersToProcess.ParmId
                    && vendInvoiceInfoSubTable.TableRefId == _headersToProcess.TableRefId;

        VendInvoiceLineForeignTradeCategory vendInvoiceLineForeignTradeCategory;
        PurchParmCleanUp::skipDeleteLogic(vendInvoiceLineForeignTradeCategory);
        delete_from vendInvoiceLineForeignTradeCategory
            exists join vendInvoiceInfoLine
            where vendInvoiceLineForeignTradeCategory.VendInvoiceInfoLine == vendInvoiceInfoLine.RecId
            exists join _headersToProcess
                where vendInvoiceInfoLine.ParmId == _headersToProcess.ParmId
                    && vendInvoiceInfoLine.TableRefId == _headersToProcess.TableRefId;

        VendInvoiceInfoLine_W vendInvoiceInfoLine_W;
        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoLine_W);
        delete_from vendInvoiceInfoLine_W
            exists join vendInvoiceInfoLine
            where vendInvoiceInfoLine_W.VendInvoiceInfoLine == vendInvoiceInfoLine.RecId
            exists join _headersToProcess
                where vendInvoiceInfoLine.ParmId == _headersToProcess.ParmId
                    && vendInvoiceInfoLine.TableRefId == _headersToProcess.TableRefId;

        VendInvoiceInfoLineCorrLink_RU vendInvoiceInfoLineCorrLink_RU;
        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoLineCorrLink_RU);
        delete_from vendInvoiceInfoLineCorrLink_RU
            exists join vendInvoiceInfoLine
            where vendInvoiceInfoLineCorrLink_RU.VendInvoiceInfoLineRecId == vendInvoiceInfoLine.RecId
            exists join _headersToProcess
                where vendInvoiceInfoLine.ParmId == _headersToProcess.ParmId
                    && vendInvoiceInfoLine.TableRefId == _headersToProcess.TableRefId;

        RAssetPurchTrans rAssetPurchTrans;
        PurchParmCleanUp::skipDeleteLogic(rAssetPurchTrans);
        delete_from rAssetPurchTrans
            exists join vendInvoiceInfoLine
            where rAssetPurchTrans.TableTableId == tableNum(VendInvoiceInfoLine)
                && rAssetPurchTrans.TableRecId == vendInvoiceInfoLine.RecId
            exists join _headersToProcess
                where vendInvoiceInfoLine.ParmId == _headersToProcess.ParmId
                    && vendInvoiceInfoLine.TableRefId == _headersToProcess.TableRefId;

        VendInvoiceMatchingLine vendInvoiceMatchingLine;
        PurchParmCleanUp::skipDeleteLogic(vendInvoiceMatchingLine);
        delete_from vendInvoiceMatchingLine
            exists join vendInvoiceInfoLine
            where vendInvoiceMatchingLine.RefTableId == tableNum(VendInvoiceInfoLine)
                && vendInvoiceMatchingLine.RefRecId == vendInvoiceInfoLine.RecId
            exists join _headersToProcess
                where vendInvoiceInfoLine.ParmId == _headersToProcess.ParmId
                    && vendInvoiceInfoLine.TableRefId == _headersToProcess.TableRefId;

        VendInvoiceInfoLine_Asset vendInvoiceInfoLine_Asset;
        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoLine_Asset);
        delete_from vendInvoiceInfoLine_Asset
            exists join vendInvoiceInfoLine
            where vendInvoiceInfoLine_Asset.VendInvoiceInfoLineRecId == vendInvoiceInfoLine.RecId
            exists join _headersToProcess
                where vendInvoiceInfoLine.ParmId == _headersToProcess.ParmId
                    && vendInvoiceInfoLine.TableRefId == _headersToProcess.TableRefId;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            VendInvoiceInfoLine_Project vendInvoiceInfoLine_Project;
            PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoLine_Project);
            delete_from vendInvoiceInfoLine_Project
                exists join vendInvoiceInfoLine
                where vendInvoiceInfoLine_Project.VendInvoiceInfoLineRefRecId == vendInvoiceInfoLine.RecId
                exists join _headersToProcess
                    where vendInvoiceInfoLine.ParmId == _headersToProcess.ParmId
                        && vendInvoiceInfoLine.TableRefId == _headersToProcess.TableRefId;
        }

        VendInvoiceInfoLineMarkupMatchingTrans vendInvoiceInfoLineMarkupMatchingTrans;
        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoLineMarkupMatchingTrans);
        delete_from vendInvoiceInfoLineMarkupMatchingTrans
            exists join _headersToProcess
                where vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineParmId == _headersToProcess.ParmId
                    && vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineTableRefId == _headersToProcess.TableRefId;

        PurchParmCleanUp::skipDeleteLogic(markupTrans);
        delete_from markupTrans
            exists join vendInvoiceInfoLine
            where markupTrans.TransTableId == tableNum(VendInvoiceInfoLine)
                && markupTrans.TransRecId == vendInvoiceInfoLine.RecId
            exists join _headersToProcess
                where vendInvoiceInfoLine.ParmId == _headersToProcess.ParmId
                    && vendInvoiceInfoLine.TableRefId == _headersToProcess.TableRefId;

        VendAdvanceApplicationTrans vendAdvanceApplicationTrans;
        PurchParmCleanUp::skipDeleteLogic(vendAdvanceApplicationTrans);
        delete_from vendAdvanceApplicationTrans
            exists join vendInvoiceInfoLine
            where vendAdvanceApplicationTrans.AdvanceApplicationId == vendInvoiceInfoLine.RecId
            exists join _headersToProcess
                where vendInvoiceInfoLine.ParmId == _headersToProcess.ParmId
                    && vendInvoiceInfoLine.TableRefId == _headersToProcess.TableRefId;

        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;
        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoSubLine);
        delete_from vendInvoiceInfoSubLine
            exists join vendInvoiceInfoLine
            where vendInvoiceInfoSubLine.LineRefRecId == vendInvoiceInfoLine.RecId
            exists join _headersToProcess
                where vendInvoiceInfoLine.ParmId == _headersToProcess.ParmId
                    && vendInvoiceInfoLine.TableRefId == _headersToProcess.TableRefId;

        // Once everything related has been removed, remove the invoice lines
        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoLine);
        delete_from vendInvoiceInfoLine
            exists join _headersToProcess
                where vendInvoiceInfoLine.ParmId == _headersToProcess.ParmId
                    && vendInvoiceInfoLine.TableRefId == _headersToProcess.TableRefId;

        VendInvoiceInfoTableExtensionTH vendInvoiceInfoTableExtensionTH;
        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoTableExtensionTH);
        delete_from vendInvoiceInfoTableExtensionTH 
            exists join _headersToProcess
                where vendInvoiceInfoTableExtensionTH.VendInvoiceInfoTable == _headersToProcess.VendInvoiceInfoTable;


        PurchParmCleanUp::cleanupAfterDeleteForInvoiceTables();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicable</Name>
				<Source><![CDATA[
    private boolean isApplicable(ParmJobStatus _parmJobStatus, boolean _applicabilityBypass)
    {
        if (_parmJobStatus != ParmJobStatus::Executed)
        {
            return false;
        }

        if (TaxIntegrationUtils::isTransitDocumentEnabled() && !_applicabilityBypass)
        {
            return false;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            ProjTable projects;
            select firstonly crosscompany RecId from projects;

            if (projects.RecId == 0)
            {
                // Although the project config key is enabled, there are no projects, 
                // which means project functionality is unused, so it should be safe to skip project code
                // and process cleanup in set-based operations.
            }
            else
            {
                // Configuration key is enabled and at least one project is present,
                // which means project functionality is used, so we must degrade to line-by-line processing
                if (!_applicabilityBypass)
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>