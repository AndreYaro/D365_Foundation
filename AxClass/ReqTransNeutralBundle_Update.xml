<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransNeutralBundle_Update</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqTransNeutralBundle_Update extends ReqTransNeutralBundle
{
    private Map reqTransMap;
    private Set deletedReqTransReqIds;
    private int lastMapCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        reqTransMap = new Map(Types::Int64, Types::Record);
        deletedReqTransReqIds = new Set(Types::Int64);
        lastMapCount = 0;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReqTrans</Name>
				<Source><![CDATA[
    internal int addReqTrans(ReqTrans _reqTrans)
    {
        reqTransMap.insert(_reqTrans.RecId, _reqTrans);

        int changeInRecordCount =  reqTransMap.elements() - lastMapCount;
        lastMapCount += changeInRecordCount;
        return changeInRecordCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tracks a <c>ReqTrans</c> record that has been deleted.
    /// </summary>
    /// <param name = "_reqTrans">The record that have been deleted.</param>
    internal void deleteReqTrans(ReqTrans _reqTrans)
    {
        deletedReqTransReqIds.add(_reqTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteNeutralRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the records in the bundle, and deletes neutralizable transactions.
    /// </summary>
    /// <param name = "_reqSetup">The <c>ReqSetup</c> for the tracker.</param>
    /// <returns>An integer indicating the number of transactions that were neutralized.</returns>
    internal int deleteNeutralRecords(ReqSetup _reqSetup)
    {
        Set neutralRecords = new Set(Types::Record);

        int neutralizedRecords = 0;

        Qty totalQty;

        MapEnumerator trackedRecordsEnumerator = reqTransMap.getEnumerator();

        while (trackedRecordsEnumerator.moveNext())
        {
            ReqTrans trans = trackedRecordsEnumerator.currentValue();

            if (ReqTransNeutralTracker::canBeNeutralized(trans, _reqSetup) && !deletedReqTransReqIds.in(trans.RecId))
            {
                totalQty += trans.Qty;
                neutralRecords.add(trans);

                if (totalQty == 0)
                {
                    neutralizedRecords += neutralRecords != null ? neutralRecords.elements() : 0;
                    this.deleteRecordsInSet(neutralRecords);
                    neutralRecords = new Set(Types::Record);
                }
            }
        }

        return neutralizedRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecordsInSet</Name>
				<Source><![CDATA[
    private void deleteRecordsInSet(Set _recordSet)
    {
        if (_recordSet != null)
        {
            SetEnumerator deletionEnumerator = _recordSet.getEnumerator();
            
            while (deletionEnumerator.moveNext())
            {
                ReqTrans trans = deletionEnumerator.current();
                trans.delete();

                this.deleteReqTrans(trans);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>