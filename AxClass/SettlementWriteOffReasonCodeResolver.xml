<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementWriteOffReasonCodeResolver</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// The <c>SettlementWriteOffReasonCodeResolver</c> provides dimension functionality for settle remainder operations.
/// </summary>
[ExportInterfaceAttribute()]
internal abstract class SettlementWriteOffReasonCodeResolver
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyDimensionsToMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merge the given dimensions with the given main account.
    /// </summary>
    /// <param name = "_accountWithDimensions">The ledger dimension dimensions to merge. May be zero.</param>
    /// <param name = "_targetMainAccount">The ledger dimension for the main account.</param>
    /// <returns>The main account with applied dimensions.</returns>
    internal LedgerDimensionAccount applyDimensionsToMainAccount(LedgerDimensionAccount _accountWithDimensions, LedgerDimensionAccount _targetMainAccount)
    {
        DimensionDefault originalDimensions = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_accountWithDimensions);

        return LedgerDimensionFacade::serviceCreateLedgerDimension(_targetMainAccount, originalDimensions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSettlementWriteOffReasonCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the customer or vendor reason write off codes form.
    /// </summary>
    /// <param name = "_reasonCode">The reason code context.</param>
    /// <param name = "_dataAreaId">The legal entity context.</param>
    internal abstract void openSettlementWriteOffReasonCodes(ReasonCode _reasonCode, DataAreaId _dataAreaId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default ledger dimension.
    /// </summary>
    /// <returns>The default account dimension for write off.</returns>
    internal abstract LedgerDimensionAccount getDefaultAccount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default reason code.
    /// </summary>
    /// <returns>The reason code.</returns>
    internal abstract ReasonCode getDefaultReasonCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReasonCodeDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reason code description.
    /// </summary>
    /// <param name = "_reasonCode">The reason code to get the description from.</param>
    /// <returns>The description of the reason code.</returns>
    internal abstract Description getReasonCodeDescription(ReasonCode _reasonCode)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReasonCodeMainAccountDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account ledger dimension associated with the given reason code for this module.
    /// </summary>
    /// <param name = "_reasonCode">The reason code.</param>
    /// <returns>The main account ledger dimension for the reason code.</returns>
    internal abstract LedgerDimensionAccount getReasonCodeMainAccountDimension(ReasonCode _reasonCode)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the given account is valid.
    /// </summary>
    /// <param name = "_ledgerDimensionAccount">The account to validate.</param>
    /// <returns>True if the account is valid; otherwise, false.</returns>
    internal protected boolean isAccountValid(LedgerDimensionAccount _ledgerDimensionAccount)
    {
        return (LedgerDimensionValidationHelper::validateByTree(_ledgerDimensionAccount) == DimensionValidationStatus::Valid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// This lookup filters the write-off reason codes.
    /// </summary>
    /// <param name = "_formControl">The control on which to perform the lookup</param>
    /// <param name = "_filterStr">Filter string value</param>
    internal abstract void lookupReasonCode(FormControl _formControl, str _filterStr)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimensionsWithReasonCodeMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the new ledger dimension for the updated reason code merged with the old dimensions.
    /// </summary>
    /// <param name = "_reasonCode">The reason code to get the ledger dimension from.</param>
    /// <param name = "_originalLedgerDimension">The old ledger dimension.</param>
    /// <returns>The new ledger dimension from the reason code and the old dimensions.</returns>
    internal LedgerDimensionAccount mergeDimensionsWithReasonCodeMainAccount(ReasonCode _reasonCode, LedgerDimensionAccount _originalLedgerDimension)
    {
        LedgerDimensionAccount newAccount = _originalLedgerDimension;

        LedgerDimensionAccount mergedAccount = this.applyDimensionsToMainAccount(
            _originalLedgerDimension,
            this.getReasonCodeMainAccountDimension(_reasonCode));

        if (this.isAccountValid(mergedAccount))
        {
            newAccount = mergedAccount;
        }
        else
        {
            MainAccount account = LedgerDimensionFacade::getMainAccountFromLedgerDimension(mergedAccount);
            warning(strFmt("@CashManagement:SettlementWriteOffReasonAccountMergeNotValid", account.localizedName()));
        }

        return newAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettlementWriteOffDefaultAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the settlement write off default ledger dimension with the new main account provided by the updated reason code.
    /// </summary>
    /// <param name = "_reasonCode">The updated reason code.</param>
    /// <param name = "_reasonCodeNewMainAccount">The new account to use for the ledger dimension.</param>
    /// <param name = "_companyId">The company to update the default dimension for.</param>
    internal abstract void updateSettlementWriteOffDefaultAccount(ReasonCode _reasonCode, LedgerDimensionAccount _reasonCodeNewMainAccount, CompanyId _companyId = curExt())
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>