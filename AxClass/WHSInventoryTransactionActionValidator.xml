<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionActionValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventoryTransactionActionValidator</c> class is responsible for doing the necessary checks in the warehouse inventory transaction stack.
/// </summary>
public final class WHSInventoryTransactionActionValidator
{
    private WHSInventoryTransactionTypeEnum transactionType;
    private WHSWorkInventoryTransactionDescriptor transactionDescriptor;
    private WHSInventoryStorageDimensions storageDimensions;
    private WHSInventoryTransactionActionValidationParameters validationParameters;

    private WHSInventoryTransactionActionValidatorExecutionCache executionCache = WHSInventoryTransactionActionValidatorExecutionCache::construct();

    // Product dimensions are always above location level. It means during warehouse inventory stack execution they must always be present if applicable.
    // It in turn means that we should always see them in the ItemSetElement table for the given item.
    private Set itemIdsWithProductDimsCheckedOnItemSetLevelSet = new Set(Types::String);

    // This is used during the item set element checks as a data structure which keeps what inventory statuses are present in a set for each
    // ItemId + Product/Tracking Dimensions combination.
    private Map inventStatusesOfItemsMap = new Map(Types::Container, Types::String);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validatePreCreateTransaction</Name>
				<Source><![CDATA[
    public void validatePreCreateTransaction()
    {
        boolean ret = true;

        Set itemIdSet = new Set(Types::String);

        // Item set element checks (depends on product and tracking dimensions).
        WHSWorkInventoryTransactionDescriptorEnumerator enumerator = transactionDescriptor.getEnumerator();
        while (enumerator.moveNext())
        {
            WHSWorkInventoryTransactionDescriptorElement descriptorElement = enumerator.current();

            ret = ret && this.performItemSetElementLevelChecks(descriptorElement);

            itemIdSet.add(descriptorElement.parmItemId());
        }

        // Item checks.
        SetEnumerator itemIdSetEnumerator = itemIdSet.getEnumerator();
        while (itemIdSetEnumerator.moveNext())
        {
            ItemId itemId = itemIdSetEnumerator.current();

            ret = ret && this.performItemLevelChecks(itemId);
        }

        // Storage dimensions checks.
        ret = ret && this.performStorageDimensionsLevelChecks();

        if (!ret)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performItemSetElementLevelChecks</Name>
				<Source><![CDATA[
    // Those are checks which require any of the item dimensions - including tracking and product.
    protected boolean performItemSetElementLevelChecks(WHSWorkInventoryTransactionDescriptorElement _descriptorElement)
    {
        boolean ret = true;

        ItemId itemId = _descriptorElement.parmItemId();
        InventDim fullInventDim = _descriptorElement.parmInventoryDimensionsDescriptor().convertToInventDim(true);

        // The validation makes sense only on LP-controlled locations.
        if (   validationParameters.parmCheckMultiStatusLP()
            && executionCache.getLocationProfile(storageDimensions).LPControlled)
        {
            ret = ret && this.checkMultiStatusLP(itemId, fullInventDim);
        }

        if (validationParameters.parmCheckDimHierarchy())
        {
            ret = ret && WhsInvent::checkDimHierarchyFromInventDim(fullInventDim, executionCache.getReservationHierarchyDimList(itemId));
        }

        if (validationParameters.parmCheckLocationMixingConstraint())
        {
            var locationMixingValidator = WHSLocationMixingConstraintValidator::newFromReceiptItemDim(itemId, fullInventDim);
            locationMixingValidator.parmCheckWork(false);
            locationMixingValidator.parmLocationMixingConstraintCheckSkip(validationParameters.parmLocationMixingConstraintCheckSkip());

            ret = ret && locationMixingValidator.validatePhysicalReceipt();
        }

        if (validationParameters.parmCheckInventOwnerId())
        {
            ret = ret && this.checkInventOwnerId(itemId, fullInventDim);
        }

        // if no product dimensions, than faster to do this check on item-level.
        if (   validationParameters.parmCheckStoppedForInventory()
            && executionCache.anyProductDimensionSpecified(itemId, fullInventDim))
        {
            ret = ret && this.inventItemOrderCheckNotStopped(itemId, fullInventDim);
            itemIdsWithProductDimsCheckedOnItemSetLevelSet.add(itemId);
        }

        // if no product dimensions, than faster to do this check on item-level.
        if (   validationParameters.parmCheckCountingLocks()
            && executionCache.anyProductDimensionSpecified(itemId, fullInventDim))
        {
            ret = ret && this.checkCountingLocks(itemId, fullInventDim);
            itemIdsWithProductDimsCheckedOnItemSetLevelSet.add(itemId);
        }

        if (validationParameters.parmCheckOnHand())
        {
            ret = ret & this.checkOnHand(itemId, fullInventDim, _descriptorElement.parmHandlingQty());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performItemLevelChecks</Name>
				<Source><![CDATA[
    // Those are checks which do not require any of the item dimensions.
    private boolean performItemLevelChecks(ItemId _itemId)
    {
        boolean ret = true;

        if (validationParameters.parmCheckInventUpdateBlockedItem())
        {
            ret = ret && this.checkInventUpdateBlockedItem(_itemId);
        }

        if (validationParameters.parmCheckStoppedForInventory()
            && !itemIdsWithProductDimsCheckedOnItemSetLevelSet.in(_itemId))
        {
            if (WHSInventoryTransactionInventItemOrderCheckNotStoppedFlight::instance().isEnabled())
            {
                ret = ret && this.inventItemOrderCheckNotStopped(_itemId, storageDimensions.convertToInventDim(true));
            }
            else
            {
                ret = ret && this.inventItemOrderCheckNotStopped(_itemId, storageDimensions.convertToInventDim());
            }
        }

        if (validationParameters.parmCheckCountingLocks()
            && !itemIdsWithProductDimsCheckedOnItemSetLevelSet.in(_itemId))
        {
            ret = ret && this.checkCountingLocks(_itemId, storageDimensions.convertToInventDim());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performStorageDimensionsLevelChecks</Name>
				<Source><![CDATA[
    // Those are checks which require only storage dimensions.
    private boolean performStorageDimensionsLevelChecks()
    {
        boolean ret = true;

        if (validationParameters.parmCheckWMSLocation())
        {
            ret = ret && this.checkWMSLocation(executionCache.getWmsLocation(storageDimensions));
        }

        if (validationParameters.parmCheckWMSLocationInputBlocking())
        {
            ret = ret && this.checkWMSLocationInputBlocking(executionCache.getWmsLocation(storageDimensions));
        }

        if (validationParameters.parmCheckWMSLocationOutputBlocking())
        {
            ret = ret && this.checkWMSLocationOutputBlocking(executionCache.getWmsLocation(storageDimensions));
        }

        if (validationParameters.parmCheckLicensePlateOnLPControlledLocation())
        {
            ret = ret && this.checkLicensePlateOnLPControlledLocation(
                executionCache.getWmsLocation(storageDimensions),
                executionCache.getLocationProfile(storageDimensions));
        }

        if (validationParameters.parmCheckLicensePlateInOneLocation())
        {
            ret = ret && this.checkLicensePlateInOneLocation();
        }

        if (validationParameters.parmCheckContainerTypeOnLocation())
        {
            ret = ret && this.checkContainerTypeOnLocation(
                executionCache.getWmsLocation(storageDimensions),
                executionCache.getLocationProfile(storageDimensions),
                storageDimensions.parmLicensePlateId());
        }

        if (validationParameters.parmCheckLocationMixingConstraint())
        {
            // We have performed validation agains on-hand during item set element level checks.
            // Here we want to check that the item set as a whole does not violate mixing rules.
            var locationMixingValidator = WHSLocationMixingConstraintValidator::newFromReceiptItemSet(transactionDescriptor, storageDimensions.convertToInventDim());
            locationMixingValidator.parmLocationMixingConstraintCheckSkip(validationParameters.parmLocationMixingConstraintCheckSkip());

            ret = ret && locationMixingValidator.validateItemSetPhysicalReceipt();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePostCreateTransaction</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void validatePostCreateTransaction()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventOwnerId</Name>
				<Source><![CDATA[
    private boolean checkInventOwnerId(ItemId _itemId, InventDim _inventDim)
    {
        if (_inventDim.InventOwnerId_RU
            && (!WHSInventoryTransactionWithOwnerEnabledConfigurationFlight::instance().isEnabled()
                || !InventTable::find(_itemId).whsItemInventoryOwnershipEnabled())
            && _inventDim.InventOwnerId_RU != executionCache.getMandatoryOwnerId())
        {
            return checkFailed(strFmt("@SCM:SpecifiedInventoryOwnerIsNotAllowedInThisProcess",
                _inventDim.InventOwnerId_RU,
                executionCache.getMandatoryOwnerId()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultiStatusLPSupported</Name>
				<Source><![CDATA[
    protected boolean isMultiStatusLPSupported(ItemId _itemId, InventDim _fullInventDim)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMultiStatusLP</Name>
				<Source><![CDATA[
    private boolean checkMultiStatusLP(ItemId _itemId, InventDim _fullInventDim)
    {
        if (this.isMultiStatusLPSupported(_itemId, _fullInventDim))
        {
            return true;
        }

        boolean ret = WhsInvent::checkMultiStatusLPForItemInventDim(_itemId, _fullInventDim);

        if (ret)
        {
            // Here we take all product and tracking dimensions WITHOUT the inventory status.
            // We want to build a map where the key is agnostic of the item's inventory status.
            WHSInventoryProductTrackingDimensions productTrackingDims = WHSInventoryProductTrackingDimensions::newFromInventDim(_fullInventDim)
                .setInventStatusId('');

            container itemAndProductTrackindDimsKey = [_itemId, productTrackingDims.getKey()];
            if (inventStatusesOfItemsMap.exists(itemAndProductTrackindDimsKey))
            {
                WHSInventStatusId existingInventoryStatusId = inventStatusesOfItemsMap.lookup(itemAndProductTrackindDimsKey);

                if (existingInventoryStatusId != _fullInventDim.InventStatusId)
                {
                    ret = checkFailed(strFmt("@WHSInventory:WHSInventoryTransactionActionValidationMultiStatusLP_ErrorMessage",
                        storageDimensions.parmLicensePlateId(),
                        existingInventoryStatusId,
                        _fullInventDim.InventStatusId));
                }
            }
            else
            {
                inventStatusesOfItemsMap.add(itemAndProductTrackindDimsKey, _fullInventDim.InventStatusId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventUpdateBlockedItem</Name>
				<Source><![CDATA[
    private boolean checkInventUpdateBlockedItem(ItemId _itemId)
    {        
        if (InventUpdateBlockedItem::isItemBlocked(_itemId))
        {
            return checkFailed("@SCM:MessageWarning_InventUpdateBlockedItem");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemOrderCheckNotStopped</Name>
				<Source><![CDATA[
    private boolean inventItemOrderCheckNotStopped(ItemId _itemId, InventDim _inventDim)
    {
        return InventItemInventSetup::find(_itemId, _inventDim.InventDimId).checkNotStopped();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCountingLocks</Name>
				<Source><![CDATA[
    private boolean checkCountingLocks(ItemId _itemId, InventDim _inventDim)
    {
        if (!InventParameters::find().LockCounting)
        {
            return true;
        }

        if (InventItemLocation::isCountingStarted(_itemId, _inventDim))
        {
            return checkFailed(strFmt("@SYS59534", _itemId, _inventDim.InventLocationId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOnHand</Name>
				<Source><![CDATA[
    private boolean checkOnHand(ItemId _itemId, InventDim _inventDim, WHSInventoryTransactionHandlingQty _handlingQty)
    {
        // Don't check the on hand if negative inventory is allowed
        if (executionCache.getItemModelGroup(_itemId).NegativePhysical)
        {
            return true;
        }

        var ttsId = appl.curTransactionId(true);
        InventQty maxAvailable;

        maxAvailable = WHSInventOnHand::getPhysicalAvailHandlingQty(_itemId, _inventDim, /*_mustIncludeDelta = */ true, /*_isWork = */ true);

        if (_handlingQty <= maxAvailable)
        {
            return true;
        }

        WHSWorkCreateReservationContext context = WHSWorkCreateReservationContext::current();
        if (validationParameters.parmFailCheckOnHand())
        {
            return checkFailed(strFmt("@WAX3104", _itemId, _handlingQty, maxAvailable));
        }
        else if (context)
        {
            context.ReservationFailed = true;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLicensePlateOnLPControlledLocation</Name>
				<Source><![CDATA[
    private boolean checkLicensePlateOnLPControlledLocation(WMSLocation _wmsLocation, WHSLocationProfile _locationProfile)
    {
        boolean ret = true;

        // Check that license plate is set or is not set based on location setting
        if (storageDimensions.parmLicensePlateId())
        {
            if (!_locationProfile.LPControlled)
            {
                ret = _wmsLocation.warnIfLicensePlateIsUsedOnNonLPControlledLocation();
            }
        }
        else if (_locationProfile.LPControlled)
        {
            ret = checkFailed(strFmt("@SCM:LicensePlateMustBeSpecified", _wmsLocation.wMSLocationId, _wmsLocation.inventLocationId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLicensePlateInOneLocation</Name>
				<Source><![CDATA[
    private boolean checkLicensePlateInOneLocation()
    {
        boolean ret = true;

        if (storageDimensions.parmLicensePlateId())
        {
            boolean excludeUserLocations = true;                // we don't check warehouse works and containers.
            InventLocationId inventLocationIdToIgnore = '';     // relevant for transfer receipt transactions.

            WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckHandlerAccessor::instanceForCurrentCompany().addCheck(
                storageDimensions.parmLicensePlateId(),
                storageDimensions.parmWMSLocationId(),
                storageDimensions.parmInventLocationId(),
                excludeUserLocations,
                inventLocationIdToIgnore);

            if (WHSParameters::find().TransitWarehouseLicensePlatePolicy == WHSTransitWarehouseLicensePlatePolicy::PreventReuse)
            {
                ret = WHSLicensePlateIsNotInTransitToOtherWarehouseCheck::validateLicensePlate(
                    storageDimensions.parmLicensePlateId(),
                    storageDimensions.parmInventLocationId());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWMSLocation</Name>
				<Source><![CDATA[
    private boolean checkWMSLocation(WMSLocation _wmsLocation)
    {
        boolean ret = true;

        if (!_wmsLocation)
        {
            ret = checkFailed(strFmt("@WHSInventory:Error_NoLocationSpecified", enum2Str(transactionType)));
        }
        else if (_wmsLocation.LocationType == WMSLocationType::KanbanSupermarket)
        {
            ret = checkFailed(strFmt("@SYS135900", enum2Str(transactionType), _wmsLocation.wmsLocationId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWMSLocationInputBlocking</Name>
				<Source><![CDATA[
    private boolean checkWMSLocationInputBlocking(WMSLocation _wmsLocation)
    {
        boolean ret = true;

        if (!_wmsLocation)
        {
            return ret;
        }

        if (this.isBlockingCausePolicyActive(_wmsLocation.InputBlockingCauseId))
        {
            ret = checkFailed(strFmt("@SYS72264", _wmsLocation.wmsLocationId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWMSLocationOutputBlocking</Name>
				<Source><![CDATA[
    private boolean checkWMSLocationOutputBlocking(WMSLocation _wmsLocation)
    {
        boolean ret = true;

        if (!_wmsLocation)
        {
            return ret;
        }

        if (this.isBlockingCausePolicyActive(_wmsLocation.OutputBlockingCauseId))
        {
            ret = checkFailed(strFmt("@SYS72265", _wmsLocation.wmsLocationId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBlockingCausePolicyActive</Name>
				<Source><![CDATA[
    private boolean isBlockingCausePolicyActive(WMSBlockingCauseId _blockingCauseId)
    {
        if (WHSInventoryTransactionsCheckBlockingCausePolicyFlight::instance().isEnabled())
        {
            return WMSBlockingCause::find(_blockingCauseId).BlockingCausePolicy == WHSBlockingCausePolicy::AlsoUseForWarehouseWork;
        }
        else
        {
            return _blockingCauseId != '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkContainerTypeOnLocation</Name>
				<Source><![CDATA[
    private boolean checkContainerTypeOnLocation(WMSLocation _wmsLocation, WHSLocationProfile _locationProfile, WHSLicensePlateId _licensePlateId)
    {
        boolean ret = true;

        if (_wmsLocation && _locationProfile.AllowedContainerTypeGroup != 0)
        {
            WHSLicensePlate licensePlate = executionCache.getLicensePlate(_licensePlateId);

            if (licensePlate.RecId && !WHSAllowedContainerType::validateContainerTypeOnLocationProfile(_locationProfile, licensePlate.ContainerTypeCode))
            {
                ret = checkFailed(strFmt("@WAX:ErrorContainerTypeLPOnLocationProfile", licensePlate.LicensePlateId, _wmsLocation.wMSLocationId, licensePlate.ContainerTypeCode));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromValues</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSInventoryTransactionActionValidator newFromValues(
        WHSInventoryTransactionTypeEnum _transactionType,
        WHSWorkInventoryTransactionDescriptor _transactionDescriptor,
        WHSInventoryStorageDimensions _storageDimensions,
        WHSInventoryTransactionActionValidationParameters _validationParameters)
    {
        WHSInventoryTransactionActionValidator validator = new WHSInventoryTransactionActionValidator();
        
        validator.transactionType = _transactionType;
        validator.transactionDescriptor = _transactionDescriptor;
        validator.storageDimensions = _storageDimensions;
        validator.validationParameters = _validationParameters;

        return validator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>