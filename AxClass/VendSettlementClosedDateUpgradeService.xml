<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendSettlementClosedDateUpgradeService</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class VendSettlementClosedDateUpgradeService implements CustVendSettlementIClosedUpgradeService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static VendSettlementClosedDateUpgradeService construct()
    {
        return new VendSettlementClosedDateUpgradeService();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ModuleCustVend getModule()
    {
        return ModuleCustVend::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendTransFilterTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void populateCustVendTransFilterTable(TmpDataAreaRecIdFilter _custVendTransFilter, date _minDate)
    {
        DataAreaId currentCompany = curExt();
        TableId vendTransTableId = tableNum(VendTrans);
        VendTrans vendTrans;

        insert_recordset _custVendTransFilter (RefDataAreaId, RefTableId, RefRecId)
            select currentCompany, vendTransTableId, RecId
                from vendTrans
                    where vendTrans.Closed >= _minDate
                        && vendTrans.AmountMST < 0.00
                        && (vendTrans.TransType == LedgerTransType::Vend
                            || vendTrans.TransType == LedgerTransType::Purch
                            || vendTrans.TransType == LedgerTransType::Payment
                            || vendTrans.TransType == LedgerTransType::Payment
                            || vendTrans.TransType == LedgerTransType::GeneralJournal
                            || vendTrans.TransType == LedgerTransType::Project);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendSettlementFilterTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void populateCustVendSettlementFilterTable(TmpDataAreaRecIdFilter _settlementFilter,
        date _minDate,
        RefRecId _minCustVendTransRecId,
        RefRecId _maxCustVendTransRecid)
    {
        DataAreaId currentCompany = curExt();

        TableId vendTransTableId = tableNum(VendTrans);
        VendTrans vendTrans;

        TmpDataAreaRecIdFilter vendTransFilter;
        insert_recordset vendTransFilter (RefDataAreaId, RefTableId, RefRecId)
            select currentCompany, vendTransTableId, RecId
                from vendTrans
                    where vendTrans.Closed >= _minDate
                        && vendTrans.AmountMST < 0.00
                        && vendTrans.RecId >= _minCustVendTransRecId
                        && vendTrans.RecId <= _maxCustVendTransRecid
                        && (vendTrans.TransType == LedgerTransType::Vend
                            || vendTrans.TransType == LedgerTransType::Purch
                            || vendTrans.TransType == LedgerTransType::Payment
                            || vendTrans.TransType == LedgerTransType::Payment
                            || vendTrans.TransType == LedgerTransType::GeneralJournal
                            || vendTrans.TransType == LedgerTransType::Project);

        TableId vendSettlementTableId = tableNum(VendSettlement);
        VendSettlement vendSettlement;
        insert_recordset _settlementFilter(RefDataAreaId, RefTableId, RefRecId)
            select currentCompany, vendSettlementTableId, maxof(Recid)
                from vendSettlement
                    group by vendSettlement.TransRecId
                exists join vendTransFilter
                    where vendTransFilter.RefRecId == vendSettlement.TransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettlementClosedDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void updateSettlementClosedDate(TmpDataAreaRecIdFilter _settlementFilter)
    {
        VendTrans vendTrans;
        VendSettlement vendSettlement;

        vendSettlement.skipAosValidation(true);
        vendSettlement.skipBusinessEvents(true);
        vendSettlement.skipDatabaseLog(true);
        vendSettlement.skipDataMethods(true);
        vendSettlement.skipEvents(true);

        // TransOpen needs a RecId value, but at this point the VendTransOpen record has already been deleted.
        // We use the VendSettlement.RecId as a unique identifier for the upgraded settlement data.
        // We could use a single value (e.g. 1) for TransOpen, but that would cause over-counting of amounts for invoices that had been
        // settled more than once (e.g. partially settled for amounts less than the total amount).
        update_recordset vendSettlement
            setting ClosedDate = vendTrans.Closed,
                TransType = vendTrans.TransType,
                TransOpen = vendSettlement.RecId
            join _settlementFilter
                where _settlementFilter.RefRecId == vendSettlement.RecId
                    && vendSettlement.ClosedDate == dateNull()
            join vendTrans
                where vendTrans.RecId == vendSettlement.TransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUpgrade</Name>
				<Source><![CDATA[
    public NoYes allowUpgrade()
    {
        return CashflowInsightsActivation::isActive();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>