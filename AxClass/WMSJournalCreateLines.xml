<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsJournalCreateLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WmsJournalCreateLines extends JournalRunBaseBatch implements BatchRetryable
{
    NoYes           setQty;
    WMSJournalId    wmsJournalId;
    WMSJournalId    existingJournalId;

    DialogField     setQtyField;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
         setQty,
         wMSJournalId,
         existingJournalId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates lines in the item arrival journal.
    /// </summary>
    /// <remarks>
    /// The journal lines are created based on data in the journal table form.
    /// </remarks>
    private void createLines()
    {
        InventTransOrigin   inventTransOrigin, returnInventTransOrigin;
        InventTrans         inventTrans;
        LineNum             lineNum = 1;
        LineNum             lineNumStart;
        boolean             createdAny = false;
        boolean             anyExisting = false;
        InventTransferLine  inventTransferLine;
        PurchLine           purchLine;
        SalesLine           salesLine;
        SalesLine           returnLine;
        WMSJournalTable     wmsJournalTable     = WMSJournalTable::find(wmsJournalId, true);
        WMSJournalTrans     journalTrans;
        JournalTableData    journalTableData    = JournalTableData::newTable(wmsJournalTable);
        JournalTransData    journalTransData    = journalTableData.journalStatic().newJournalTransData(journalTrans,journalTableData);
        InventQty           shippedTransferQty;
        PdsCWInventQty      shippedTransferCWQty;
        WMSJournalTrans     existingJournalTrans;
        InventTransId       existingInventTransId;

        #localmacro.InventTransOriginGroupByFields
            ItemId, InventTransId, ReferenceCategory, ReferenceId, RecId
        #endmacro

        #localmacro.InventTransGroupByFields
            InventDimId
        #endmacro

        WMSJournalTrans existingJournalLine()
        {
            WMSJournalTrans wmsJournalTransNull;

            if (!anyExisting)
            {
                return wmsJournalTransNull; // No lines at all before we started so no lines for this InventTrans.
            }

            if (existingInventTransId && existingInventTransId == inventTransOrigin.InventTransId)
            {
                return existingJournalTrans; // Attempt to find line has already been made.
            }
            existingInventTransId = inventTransOrigin.InventTransId;

            select firstonly InventTransId, InventDimId, RecId from existingJournalTrans
                where existingJournalTrans.JournalId        == wmsJournalTable.JournalId
                   && existingJournalTrans.InventTransId    == existingInventTransId
                   && existingJournalTrans.LineNum          <= lineNumStart;

            return existingJournalTrans;
        }

        void createLine(boolean _isCWItem, InventQty _possibleQty = 0, PdsCWInventQty  _possibleCWQty = 0)
        {
            InventQty           qty = inventTrans.Qty;
            PdsCWInventQty      cwQty = _isCWItem ? inventTrans.PdsCWQty : 0;

            journalTrans.clear();
            journalTrans.initValue();
            journalTrans.initFromWMSJournalTable(wmsJournalTable, false);
            journalTrans.initFromInventTrans(inventTrans, journalTrans.inventDim(), inventTransOrigin);
            journalTrans.updateWarehouseForQuarantine();

            if (existingJournalLine().RecId)
            {   // Lines already initialized for this InventTransId
                // This will return also even if lines have only been created for parts of the quantity
                return;
            }

            if (setQty)
            {
                if (_isCWItem ? _possibleCWQty : _possibleQty)
                {
                    if (_isCWItem)
                    {
                        journalTrans.pdsCWSetQty(journalTrans.inventTable(), _possibleQty, _possibleCWQty);
                    }
                    else
                    {
                        journalTrans.setQty(journalTrans.inventTable(),_possibleQty);
                    }
                    cwQty   = _isCWItem ? _possibleCWQty : 0;
                    qty     = _possibleQty;
                }

                // When journal lines are created from the form WMSArrivalOverview, code performing line splitting in acc. with the
                // pallet qty setup is executed in \Classes\WMSArrivalCreateJournal\createWMSJournalTrans.
                while (_isCWItem ? cwQty : qty)
                {
                    journalTrans.LineNum = lineNum;
                    lineNum++;
                    if (journalTrans.InventTransType == InventTransType::Sales && journalTrans.IsReturnOrder && (_isCWItem ? cwQty > journalTrans.PdsCWQty : qty > journalTrans.Qty))
                    {
                        journalTrans.InventTransId = SalesLine::splitReturnLine(inventTransOrigin.InventTransId, journalTrans.Qty *-1, _isCWItem ? journalTrans.PdsCWQty *-1 : 0);
                        SalesLine::changeReturnOrderType(journalTrans.InventTransId);
                    }
                    journalTransData.insert();
                    cwQty   -= _isCWItem ? journalTrans.PdsCWQty : 0;
                    qty     -= journalTrans.Qty;
                    if (_isCWItem ? cwQty <= journalTrans.PdsCWQty : qty <= journalTrans.Qty)
                    {
                        journalTrans.PdsCWQty = _isCWItem ? cwQty : 0;
                        journalTrans.Qty = qty;
                        journalTrans.InventTransId = inventTransOrigin.InventTransId;
                    }
                }
            }
            else
            {
                journalTrans.LineNum = lineNum;
                lineNum++;
                journalTrans.Qty        = 0;
                journalTrans.PdsCWQty   = 0;
                journalTransData.insert();
            }
            createdAny = true;
        }

        if (wmsJournalTable.NumOfLines > 0)
        {   // Initialize the lineNum counter if lines already exist
            lineNumStart    = WMSJournalTrans::lastLineNum(wmsJournalTable.JournalId);
            lineNum         = lineNumStart + 1;
            anyExisting     = true;
        }

        //adjust qty based on what has been shipped
        if (wmsJournalTable.InventTransType == InventTransType::TransferOrderReceive && wmsJournalTable.InventTransRefId)
        {
            while select TableId from inventTransferLine
                where inventTransferLine.TransferId == wmsJournalTable.InventTransRefId
                join inventTransOrigin
                    group by #InventTransOriginGroupByFields
                    where inventTransOrigin.InventTransId == inventTransferLine.InventTransIdReceive
                    join sum(Qty)
                    , sum(PdsCWQty), ItemId
                     from inventTrans
                        group by #InventTransGroupByFields
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                           && inventTrans.StatusReceipt     == StatusReceipt::Ordered
                           && inventTrans.StatusIssue       == StatusIssue::None
            {
                boolean isCWItem = PdsGlobal::pdsIsCWItem(inventTransOrigin.ItemId);
                shippedTransferQty = InventTransferLine::inventTransSumDimShipped(inventTransOrigin.InventTransId,inventTrans.inventDim());

                if (isCWItem)
                {
                    shippedTransferCWQty = InventTransferLine::pdsCWInventTransSumDimShipped(
                        inventTransOrigin.InventTransId,
                        inventTrans.inventDim());
                }

                InventQty receivedTransferQty = InventTransferLine::inventTransSumDimReceived(inventTransOrigin.InventTransId, inventTrans.inventDim());
                shippedTransferQty += receivedTransferQty;

                if (isCWItem)
                {
                    InventQty receivedTransferCWQty = InventTransferLine::pdsCWinventTransSumDimReceived(inventTransOrigin.InventTransId, inventTrans.inventDim());
                    shippedTransferCWQty += receivedTransferCWQty;
                }
                
                if (isCWItem ? shippedTransferCWQty : shippedTransferQty)
                {
                    createLine(isCWItem, min(abs(shippedTransferQty),    inventTrans.Qty), isCWItem ? min(abs(shippedTransferCWQty),  inventTrans.PdsCWQty) : 0);
                }
            }
        }
        else if (wmsJournalTable.InventTransType == InventTransType::Purch && wmsJournalTable.InventTransRefId)
        {
            while select purchLine
                where purchLine.PurchId         == wmsJournalTable.InventTransRefId
                   && !purchLine.IsDeleted
                join inventTransOrigin
                    group by #InventTransOriginGroupByFields
                    where inventTransOrigin.InventTransId == purchLine.InventTransId
                    join sum(Qty)
                    , sum(PdsCWQty)
                     from inventTrans
                        group by #InventTransGroupByFields
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                           && inventTrans.StatusReceipt     == StatusReceipt::Ordered
                           && inventTrans.StatusIssue       == StatusIssue::None
            {
                createLine(PdsGlobal::pdsIsCWItem(inventTransOrigin.ItemId));
            }
        }
        else if (wmsJournalTable.InventTransType == InventTransType::Sales && wmsJournalTable.InventTransRefId)
        {
            if (wmsJournalTable.ReturnItemNum)
            {
                while select InventTransId from returnLine
                    where returnLine.SalesId         == wmsJournalTable.InventTransRefId
                       && returnLine.ExpectedRetQty  <= 0 &&
                          returnLine.ReturnStatus    >= ReturnStatusLine::Awaiting
                    notexists join returnInventTransOrigin
                        where returnInventTransOrigin.InventTransId == returnLine.InventTransId
                {
                    SalesLine::changeReturnOrderType(returnLine.InventTransId);
                }

                // Find return salesLine which has been packingslip returned
                while select InventTransId from returnLine
                    where returnLine.SalesId         == wmsJournalTable.InventTransRefId
                       && returnLine.ExpectedRetQty  <= 0
                       && returnLine.ReturnStatus    >= ReturnStatusLine::Awaiting
                    exists join returnInventTransOrigin
                        where returnInventTransOrigin.InventTransId == returnLine.InventTransId
                        notexists join inventTrans
                            where inventTrans.InventTransOrigin   == returnInventTransOrigin.RecId
                               && inventTrans.PackingSlipReturned == NoYes::No
                {
                    SalesLine::changeReturnOrderType(returnLine.InventTransId);
                }
            }

            while select salesLine
                where salesLine.SalesId         == wmsJournalTable.InventTransRefId
                join inventTransOrigin
                    group by #InventTransOriginGroupByFields
                    where inventTransOrigin.InventTransId == salesLine.InventTransId
                    join sum(Qty)
                    , sum(PdsCWQty)
                     from inventTrans
                        group by #InventTransGroupByFields
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                           && inventTrans.StatusReceipt     == StatusReceipt::Ordered
                           && inventTrans.StatusIssue       == StatusIssue::None
            {
                createLine(PdsGlobal::pdsIsCWItem(inventTransOrigin.ItemId));            
            }
        }
        else if (wmsJournalTable.InventTransRefId)
        {
            while select inventTransOrigin
                group by #InventTransOriginGroupByFields
                where inventTransOrigin.ReferenceCategory == wmsJournalTable.InventTransType
                   && inventTransOrigin.ReferenceId       == wmsJournalTable.InventTransRefId
                    join sum(Qty)
                    , sum(PdsCWQty)
                     from inventTrans
                    group by #InventTransGroupByFields
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId &&
                          inventTrans.StatusReceipt == StatusReceipt::Ordered &&
                          inventTrans.StatusIssue   == StatusIssue::None
            {
                createLine(PdsGlobal::pdsIsCWItem(inventTransOrigin.ItemId));
            }
        }
        else if (wmsJournalTable.InventTransType == InventTransType::Purch && wmsJournalTable.VendAccount)
        {
            while select inventTransOrigin
                group by #InventTransOriginGroupByFields
                    join sum(Qty)
                    , sum(PdsCWQty)
                     from inventTrans
                    group by #InventTransGroupByFields
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                       && inventTrans.StatusReceipt     == StatusReceipt::Ordered
                       && inventTrans.StatusIssue       == StatusIssue::None
                    join purchLine
                        where purchLine.InventTransId   == inventTransOrigin.InventTransId
                           && !purchLine.IsDeleted
                           && purchLine.VendAccount     == wmsJournalTable.VendAccount
            {
                createLine(PdsGlobal::pdsIsCWItem(inventTransOrigin.ItemId));
            }
        }
        else
        {
            throw(error("@SYS24743"));
        }

        if (!createdAny)
        {
            if (wmsJournalTable.InventTransType == InventTransType::TransferOrderReceive)
            {
                throw(error(strFmt("@SYS90521", StatusReceipt::Ordered, StatusIssue::Sold, wmsJournalTable.JournalId)));
            }

            throw(error(strFmt("@SYS55436", StatusReceipt::Ordered, wmsJournalTable.JournalId)));
        }

        wmsJournalTable.write();

        if (this.isInBatch())
        {
            journalTableData.updateBlock(JournalBlockLevel::System,JournalBlockLevel::None,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase       dialog = super();

        if (existingJournalId)
        {
            dialog.addText(strFmt("@SYS76960", existingJournalId));
        }

        setQtyField = dialog.addField(enumStr(NoYes), "@SYS55419", "@SYS55420");
        setQtyField.value(setQty);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        setQty = setQtyField.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExistingJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>WMSJournalId</c> value.
    /// </summary>
    /// <param name="_existingJournalId">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The <c>ExistingJournalId</c> class member.
    /// </returns>
    public WMSJournalId parmExistingJournalId(WMSJournalId _existingJournalId = existingJournalId)
    {
        existingJournalId = _existingJournalId;
        return existingJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetQty</Name>
				<Source><![CDATA[
    public NoYes parmSetQty(NoYes _setQty = setQty)
    {
        setQty = _setQty;
        return setQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSJournalId</Name>
				<Source><![CDATA[
    public WMSJournalId parmWMSJournalId(WMSJournalId _wmsJournalId = wmsJournalId)
    {
        wmsJournalId = _wmsJournalId;
        return wmsJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        if (! this.validate())
        {
            throw(error("@SYS18447"));
        }

        try
        {
            ttsbegin;
            this.createLines();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instructs the batch framework that this class can run impersonating the user who requested the task.
    /// </summary>
    /// <returns>
    ///    true always.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs in instance of the <c>WMSJournalCreateLines</c> class.
    /// </summary>
    /// <returns>
    ///    The new server bound instance of <c>WMSJournalCreateLines</c> class.
    /// </returns>
    public static WMSJournalCreateLines construct()
    {
        return new WMSJournalCreateLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS55421";
    }

]]></Source>
			</Method>
			<Method>
				<Name>existingJournal</Name>
				<Source><![CDATA[
    public static WMSJournalId existingJournal(WMSJournalId _wmsJournalId)
    {
        WMSJournalTable     wmsJournalTable = WMSJournalTable::find(_wmsJournalId);
        WMSJournalTable     wmsJournalTableExisting;
        WMSJournalTrans     wmsJournalTransExisting;

        select firstonly JournalId from wmsJournalTableExisting
            where wmsJournalTableExisting.Posted == NoYes::No
        exists join wmsJournalTransExisting
            where wmsJournalTransExisting.JournalId     == wmsJournalTableExisting.JournalId    &&
            wmsJournalTransExisting.InventTransType     == wmsJournalTable.InventTransType      &&
            wmsJournalTransExisting.InventTransRefId    == wmsJournalTable.InventTransRefId;

        if (wmsJournalTableExisting)
        {
            return wmsJournalTableExisting.JournalId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WMSJournalCreateLines   wmsJournalCreateLines = WMSJournalCreateLines::newStandard(_args);
        WMSJournalTable         wmsJournalTable;
        JournalFormTable        journalForm = JournalForm::fromArgs(_args);
        WMSJournalId            wmsJournalId;

        if (!_args || !_args.dataset() || _args.dataset() != tableNum(WMSJournalTable))
        {
            throw(error(strFmt("@SYS19306", funcName())));
        }

        wmsJournalTable = _args.record() as WMSJournalTable;
        if (!wmsJournalTable.JournalId)
        {
            return;
        }

        if (!wmsJournalTable.InventTransRefId && !(wmsJournalTable.InventTransType == InventTransType::Purch && wmsJournalTable.VendAccount))
        {
            throw(error("@SYS24743"));
        }

        wmsJournalId = wmsJournalCreateLines.parmWMSJournalId(wmsJournalTable.JournalId);

        wmsJournalCreateLines.parmExistingJournalId(WMSJournalCreateLines::existingJournal(wmsJournalId));

        journalForm.runbaseMainStart();

        if (!wmsJournalCreateLines.prompt())
        {
            if (! wmsJournalCreateLines.batchInfo().parmBatch().RecId)
            {
                journalForm.runbaseMainCancel(wmsJournalId);
            }
            return;
        }

        try
        {
            wmsJournalCreateLines.runOperation();
            journalForm.runbaseMainEnd(wmsJournalCreateLines,false);
            if (journalForm)
            {
                if (journalForm.journalTableData().journalTable().JournalId == wmsJournalCreateLines.parmWMSJournalId())
                {
                    journalForm.openLinesForm();
                }
            }
        }
        catch
        {
            journalForm.runbaseMainEnd(wmsJournalCreateLines,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>WMSJournalCreateLines</c> class.
    /// </summary>
    /// <param name="_args">
    ///    The arguments that are used to initiate default values.
    /// </param>
    /// <returns>
    ///    The new server bound instance of the <c>WMSJournalCreateLines</c> class.
    /// </returns>
    public static WMSJournalCreateLines newStandard(Args _args)
    {
        WMSJournalCreateLines   wmsJournalCreateLines;

        wmsJournalCreateLines = WMSJournalCreateLines::construct();
        wmsJournalCreateLines.getLast();

        return wmsJournalCreateLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>