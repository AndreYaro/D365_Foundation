<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumOpenTransact</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventSumOpenTransact extends InventSumTrans
{
    CostAmount      transValue[];
    InventQty       transQty[];
    CostAmount      transAdjustNow[];
    InventTransCurrency_RU  inventTransCurrency;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    void add(InventTrans _inventTrans)
    {
        // <GEERU>
        _inventTrans.setTransValueDate(perDate,inventTransCurrency);
        // </GEERU>

        if (_inventTrans.Qty || _inventTrans.CostAmountPosted)
        {
            transMax+= 1;
            transRecId[transMax]    = _inventTrans.RecId;
            // <GEERU>
            transValue[transMax]    = inventTransCurrency == InventTransCurrency_RU::PrimaryCur ? _inventTrans.CostAmountPosted : _inventTrans.CostAmountSecCurPosted_RU;
            // </GEERU>
            transQty[transMax]      = _inventTrans.Qty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransCurrency_RU</Name>
				<Source><![CDATA[
    public InventTransCurrency_RU parmInventTransCurrency_RU(InventTransCurrency_RU _inventTransCurrency = inventTransCurrency)
    {
        inventTransCurrency = _inventTransCurrency;
        return inventTransCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Distributes an adjustment over the receipts among the stored open transactions.
    /// </summary>
    /// <param name="_adjustTotal">
    ///    The adjustment to be distributed over the receipts.
    /// </param>

    void setAdjustment(CostAmount _adjustTotal)
    {
        Integer         x;

        InventQty       qty;
        CostAmount      adjust = CurrencyExchangeHelper::amount(_adjustTotal);
        CostAmount      adjustNow;
        CostAmount      unitPrice;

        // We use a map to sort the receipts in order of ascending unit price.
        // This way, we can handle the receipts that could go negative first,
        // so that the receipts that will have to take the 'missing part' are still to come.
        Map             map = new Map(Types::Real, Types::Class);
        Set             set;
        MapEnumerator   me;
        SetEnumerator   se;

        for (x = 1; x <= this.transMax(); x++)
        {
            this.setTransAdjustNow(x, 0.0);

            if (this.transQty(x) > 0.0)
            {
                qty += this.transQty(x);

                unitPrice = this.transValue(x) / this.transQty(x);
                if (!map.exists(unitPrice))
                {
                    set = new Set(Types::Integer);
                    map.insert(unitPrice, set);
                }
                else
                {
                    set = map.lookup(unitPrice);
                }
                set.add(x);
            }
        }

        if (adjust == 0.0)
        {
            return;
        }

        if (qty <= 0.0)
        {
            throw error("@SYS24506");
        }

        me = map.getEnumerator();
        while (me.moveNext())
        {
            set = me.currentValue();

            se = set.getEnumerator();
            while (se.moveNext())
            {
                x = se.current();

                adjustNow = CurrencyExchangeHelper::amount(this.transQty(x) * adjust / qty);

                if (this.transValue(x) + adjustNow < 0.0)
                {
                    adjustNow = - CurrencyExchangeHelper::amount(this.transValue(x));
                }

                qty    -= this.transQty(x);
                adjust -= adjustNow;

                this.setTransAdjustNow(x, adjustNow);
            }
        }

        if (adjust != 0.0)
        {
            throw error("@SYS13078");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransAdjustNow</Name>
				<Source><![CDATA[
    void setTransAdjustNow(Integer x, CostAmount amount)
    {
        if (x > 0 && x <= transMax)
        {
            transAdjustNow[x] = amount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueQty</Name>
				<Source><![CDATA[
    protected void setValueQty()
    {
        InventTrans     inventTrans;
        InventDim       inventDim;
        // <GEERU>

        #ISOCountryRegionCodes
        // </GEERU>

        if (isCalc)
        {
            return;
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            Query query = new Query();
            QueryBuildDataSource qbdsInventTrans = query.addDataSource(tablenum(InventTrans));
            qbdsInventTrans.addRange(fieldnum(InventTrans, ItemId)).value(itemId);
            QueryBuildRange qbrValueOpen = qbdsInventTrans.addRange(fieldnum(InventTrans, ValueOpen));
            qbrValueOpen.value(queryValue(InventTransOpen::Yes));
            qbdsInventTrans.addRange(fieldnum(InventTrans, StatusReceipt)).value(queryRange(StatusReceipt::None, StatusReceipt::Purchased));
            qbdsInventTrans.addRange(fieldnum(InventTrans, StatusIssue)).value(queryRange(StatusIssue::None, StatusIssue::Sold));
            qbdsInventTrans.addRange(fieldnum(InventTrans, DateFinancial)).value(queryRange(null, perDate));
            QueryBuildDataSource qbdsInventDim = qbdsInventTrans.addDataSource(tablenum(InventDim));
            qbdsInventDim.relations(true);
            qbdsInventDim.joinMode(JoinMode::ExistsJoin);
            if (inventDimParm.InventProfileIdFlag_RU == NoYes::No)
            {
                InventDim::queryDatasourceAddRangeSortFromParms(qbdsInventDim, false, inventDimCriteria, inventDimParm, null);
            }
            qbdsInventDim.addRange(fieldnum(InventDim, InventProfileId_RU)).value(InventProfile_RU::rangeInventProfileCostAdjAllowed());
            QueryRun queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                inventTrans = queryRun.get(tablenum(InventTrans));
                this.add(inventTrans);
            }

            if (perDate < InventClosing::closingDate())
            {
                qbrValueOpen.value(queryValue(InventTransOpen::No));
                qbdsInventTrans.addRange(fieldnum(InventTrans, DateClosed)).value(queryRange(perDate+1, null));
                queryRun = new QueryRun(query);
                while (queryRun.next())
                {
                    inventTrans = queryRun.get(tablenum(InventTrans));
                    this.add(inventTrans);
                }
            }

            isCalc     = NoYes::Yes;
            return;
        }
        // </GEERU>

        while select forceplaceholders inventTrans
            where inventTrans.ItemId            == itemId                       &&
                  inventTrans.ValueOpen         == InventTransOpen::Yes         &&
                  inventTrans.StatusReceipt     >= StatusReceipt::None          &&
                  inventTrans.StatusReceipt     <= StatusReceipt::Purchased     &&
                  inventTrans.StatusIssue       >= StatusIssue::None            &&
                  inventTrans.StatusIssue       <= StatusIssue::Sold            &&
                  inventTrans.DateFinancial     <= perDate
        #inventDimExistsJoin(inventTrans.inventDimId,inventDim,inventDimCriteria,inventDimParm)
        {
            this.add(inventTrans);
        }

        if (perDate < InventClosing::closingDate())
        {
            while select forceplaceholders inventTrans
                where inventTrans.ItemId            == itemId                       &&
                      inventTrans.ValueOpen         == InventTransOpen::No          &&
                      inventTrans.StatusReceipt     >= StatusReceipt::None          &&
                      inventTrans.StatusReceipt     <= StatusReceipt::Purchased     &&
                      inventTrans.StatusIssue       >= StatusIssue::None            &&
                      inventTrans.StatusIssue       <= StatusIssue::Sold            &&
                      inventTrans.DateFinancial     <= perDate                      &&
                      inventTrans.DateClosed        >  perDate
            #inventDimExistsJoin(inventTrans.inventDimId,inventDim,inventDimCriteria,inventDimParm)
            {
                this.add(inventTrans);
            }
        }

        isCalc     = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueQtySecCur_RU</Name>
				<Source><![CDATA[
    protected void setValueQtySecCur_RU()
    {
        InventTrans             inventTrans;
        if (isCalc)
            return;

        Query query = new Query();
        QueryBuildDataSource qbdsInventTrans = query.addDataSource(tablenum(InventTrans));
        qbdsInventTrans.addSortIndex(indexnum(InventTrans, OpenSecCurItemIdx_RU));
        qbdsInventTrans.indexIsHint(true);
        qbdsInventTrans.addRange(fieldnum(InventTrans, ItemId)).value(itemId);
        QueryBuildRange qbrValueOpenSecCur = qbdsInventTrans.addRange(fieldnum(InventTrans, ValueOpenSecCur_RU));
        qbrValueOpenSecCur.value(queryValue(InventTransOpen::Yes));
        qbdsInventTrans.addRange(fieldnum(InventTrans, StatusReceipt)).value(queryRange(StatusReceipt::None, StatusReceipt::Purchased));
        qbdsInventTrans.addRange(fieldnum(InventTrans, StatusIssue)).value(queryRange(StatusIssue::None, StatusIssue::Sold));
        qbdsInventTrans.addRange(fieldnum(InventTrans, DateFinancial)).value(queryRange(null, perDate));
        QueryBuildDataSource qbdsInventDim = qbdsInventTrans.addDataSource(tablenum(InventDim));
        qbdsInventDim.relations(true);
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);
        if (inventDimParm.InventProfileIdFlag_RU == NoYes::No)
        {
            InventDim::queryDatasourceAddRangeSortFromParms(qbdsInventDim, false, inventDimCriteria, inventDimParm, null);
        }
        qbdsInventDim.addRange(fieldnum(InventDim, InventProfileId_RU)).value(InventProfile_RU::rangeInventProfileCostAdjAllowed());
        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            inventTrans = queryRun.get(tablenum(InventTrans));
            this.add(inventTrans);
        }

        if (perDate < InventClosing::closingDate(false,InventTransCurrency_RU::SecondaryCur))
        {
            qbrValueOpenSecCur.value(queryValue(InventTransOpen::No));
            qbdsInventTrans.addRange(fieldnum(InventTrans, DateClosedSecCur_RU)).value(queryRange(perDate+1, null));
            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                inventTrans = queryRun.get(tablenum(InventTrans));
                this.add(inventTrans);
            }
        }

        isCalc     = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTransQty</Name>
				<Source><![CDATA[
    InventQty  sumTransQty()
    {
        Integer          x;
        InventQty       sumQty;

        while (x < this.transMax())
        {
            x += 1;
            sumQty   += this.transQty(x);
        }

        return sumQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTransValue</Name>
				<Source><![CDATA[
    CostAmount sumTransValue()
    {
        Integer          x;
        CostAmount      sumAmount;

        while (x < this.transMax())
        {
            x += 1;
            sumAmount+= this.transValue(x);
        }

        return sumAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transAdjustNow</Name>
				<Source><![CDATA[
    CostAmount transAdjustNow(Integer x)
    {
        if (x > 0 && x <= transMax)
        {
            return transAdjustNow[x];
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    InventQty   transQty(Integer x)
    {
        // <GEERU>
        if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
        {
        // </GEERU>
            this.setValueQty();
        // <GEERU>
        }
        else
        {
            this.setValueQtySecCur_RU();
        }
        // </GEERU>

        if (x > 0 && x <= transMax)
        {
            return transQty[x];
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transValue</Name>
				<Source><![CDATA[
    CostAmount transValue(Integer x)
    {
        // <GEERU>
        if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
        {
        // </GEERU>
            this.setValueQty();
        // <GEERU>
        }
        else
        {
            this.setValueQtySecCur_RU();
        }
        // </GEERU>

        if (x > 0 && x <= transMax)
        {
            return transValue[x];
        }

        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
