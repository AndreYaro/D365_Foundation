<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementPreviousTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementPreviousTotals</c> class accumulates the unposted settlement and cash discount amounts
/// for transactions in the settlement process.
/// </summary>
/// <remarks>
/// Keeps track of the unposted settlement and cash discount amounts and adds this amount
/// to the settlement and cash discount amounts from previously posted settlements.
/// </remarks>
public class SettlementPreviousTotals
{
    // Map used for accumulating current cash discount amount taken and settlement amount
    // Key: CompanyId
    // Value: Inner Map used for cache
    //      Key: RecId
    //      Value: Container with the following values
    //          Settled amount in transaction currency
    //          Cash discount amount taken in transaction currency
    private Map custVendTransOpenAmountsMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        custVendTransOpenAmountsMap = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SettlementPreviousTotals construct()
    {
        SettlementPreviousTotals instance = new SettlementPreviousTotals();

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accumulatePrevSettledAmountAndPrevCashDiscTaken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates accumulated settlement and cash discount information.
    /// </summary>
    /// <param name = "_custVendTransOpenRecId">The <c>RecId</c> of the <c>CustVendTransOpen</c> map record.</param>
    /// <param name = "_company">The company in which the transaction exists.</param>
    /// <param name = "_settleAmountCur">The settlement amount to add.</param>
    /// <param name = "_utilizedCashDisc">The cash discount amount to add.</param>
    public void accumulatePrevSettledAmountAndPrevCashDiscTaken(
        RecId _custVendTransOpenRecId,
        CompanyId _company,
        AmountCur _settleAmountCur,
        DiscAmount _utilizedCashDisc)
    {
        if (custVendTransOpenAmountsMap.exists(_company))
        {
            Map innerMap = custVendTransOpenAmountsMap.lookup(_company);

            if (innerMap.exists(_custVendTransOpenRecId))
            {
                AmountCur prevSettleAmount;
                DiscAmount prevCashDiscTaken;

                [prevSettleAmount, prevCashDiscTaken] = innerMap.lookup(_custVendTransOpenRecId);

                innerMap.insert(_custVendTransOpenRecId, [prevSettleAmount + _settleAmountCur, prevCashDiscTaken + _utilizedCashDisc]);
            }
            else
            {
                innerMap.insert(_custVendTransOpenRecId, [_settleAmountCur, _utilizedCashDisc]);
            }
        }
        else
        {
            Map innerMap = new Map(Types::Int64, Types::Container);

            innerMap.insert(_custVendTransOpenRecId, [_settleAmountCur, _utilizedCashDisc]);

            custVendTransOpenAmountsMap.insert(_company, innerMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrevCashDiscTaken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount of cash discount already taken for the open transaction.
    /// </summary>
    /// <param name="_postedPrevCashDiscTaken">
    /// The sum of the previously posted discount amount for the open transaction.
    /// </param>
    /// <param name="_openTransCompany">
    /// The company of the open transaction.
    /// </param>
    /// <param name="_postedPrevSettledAmount">
    /// The record ID of the open transaction.
    /// </param>
    /// <returns>
    /// The cash discount amount.
    /// </returns>
    public AmountCur getPrevCashDiscTaken(
        AmountCur _postedPrevCashDiscTaken,
        DataAreaId _openTransCompany,
        RecId _openTransRecId)
    {
        AmountCur unpostedPrevSettledAmount;
        DiscAmount unpostedPrevCashDiscTaken;

        [unpostedPrevSettledAmount, unpostedPrevCashDiscTaken] = this.retrievePreviousValues(_openTransCompany, _openTransRecId);

        return unpostedPrevCashDiscTaken + _postedPrevCashDiscTaken;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrevSettledAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount already settled for the open transaction.
    /// </summary>
    /// <param name="_postedPrevSettledAmount">
    /// The sum of the previously posted settlement amount for the open transaction.
    /// </param>
    /// <param name="_openTransCompany">
    /// The company of the open transaction.
    /// </param>
    /// <param name="_postedPrevSettledAmount">
    /// The record ID of the open transaction.
    /// </param>
    /// <returns>
    /// The amount already settled.
    /// </returns>
    public AmountCur getPrevSettledAmount(
        AmountCur _postedPrevSettledAmount,
        DataAreaId _openTransCompany,
        RecId _openTransRecId)
    {
        AmountCur unpostedPrevSettledAmount;
        DiscAmount unpostedPrevCashDiscTaken;

        [unpostedPrevSettledAmount, unpostedPrevCashDiscTaken] = this.retrievePreviousValues(_openTransCompany, _openTransRecId);

        return _postedPrevSettledAmount + unpostedPrevSettledAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePreviousValues</Name>
				<Source><![CDATA[
    private container retrievePreviousValues(DataAreaId _company, RecId _recId)
    {
        container previousValues;

        if (custVendTransOpenAmountsMap.exists(_company))
        {
            Map innerMap = custVendTransOpenAmountsMap.lookup(_company);

            if (innerMap.exists(_recId))
            {
                previousValues = innerMap.lookup(_recId);
            }
        }

        return previousValues;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>