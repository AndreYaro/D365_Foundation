<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalWFApprEventHandlerWF</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalWFApprEventHandlerWF</c> class is the event handler for ledger journal workflow
///    approval workflow events.
/// </summary>
class LedgerJournalWFApprEventHandlerWF  extends    LedgerJournalWFApprovalEventHandler
                                         implements WorkflowCanceledEventHandler, WorkflowCompletedEventHandler,
                                                    WorkflowStartedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
            /// <summary>
    ///    Updates the <c>WorkflowApprovalStatus</c> field of the <c>LedgerJournalTable</c> table from its
    ///    current status to <c>LedgerJournalWFApprovalStatus::NotSubmitted</c>.
    /// </summary>
    /// <param name="_workflowEventArgs">
    ///    A <c>WorkflowEventArgs</c> instance.
    /// </param>
    public void canceled(WorkflowEventArgs _workflowEventArgs)
    {
        ;

        this.initProperties(_workflowEventArgs.parmWorkflowContext());

        if (this.validateWorkflowContext())
        {
            LedgerJournalWFApprovalStatusManager::cancelFromEvent(contextRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>WorkflowApprovalStatus</c> field in the <c>LedgerJournalTable</c> table from its
    ///    current status to the <c>LedgerJournalWFApprovalStatus::Approved</c> enumeration value.
    /// </summary>
    /// <param name="_workflowEventArgs">
    ///    An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    public void completed(WorkflowEventArgs _workflowEventArgs)
    {
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans ledgerJournalTrans, ledgerJournalTransUpdate;
        FiscalPeriodStart newTransDate;
        SysModule sysModule;

        this.initProperties(_workflowEventArgs.parmWorkflowContext());

        if (this.validateWorkflowContext())
        {
            LedgerJournalWFApprovalStatusManager::completeFromWorkflowEvent(contextRecId);
        }

        ledgerJournalTable = LedgerJournalTable::findByRecId(contextRecId);

        if (ledgerJournalTable.JournalType == LedgerJournalType::Approval
            || ledgerJournalTable.JournalType == LedgerJournalType::VendInvoiceRegister
            || ledgerJournalTable.JournalType == LedgerJournalType::PurchaseLedger)
        {
            ledgerJournalTransUpdate.skipDataMethods(true);
            ledgerJournalTransUpdate.skipEvents(true);
            ledgerJournalTransUpdate.skipDatabaseLog(true);

            sysModule = ledgerJournalTable.ledgerJournalName().getSysModuleForJournal();

            // For each date, adjust the trans date based on the auto adjustment setting.
            while select TransDate, Voucher from ledgerJournalTrans
                group by ledgerJournalTrans.TransDate, ledgerJournalTrans.Voucher
                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
            {
                WorkflowUser workflowUser = this.getWorkflowOriginator(ledgerJournalTable.RecId);
                newTransDate = dateNull();

                if (WFAutoAdjustPostingDateFlight::instance().isEnabled())
                {
                    VendParameters vendParameters = VendParameters::find();
                    switch (vendParameters.VendInvoicePostingDateAutoAdjustment)
                    {
                        case VendInvoicePostingDateAutoAdjustment::NoChange:
                            break;

                        case VendInvoicePostingDateAutoAdjustment::AlwaysChangeToSystemDate:
                            newTransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                            break;

                        case VendInvoicePostingDateAutoAdjustment::ChangeToSystemDateWhenPeriodIsOnHoldOrClosed:
                            if (!LedgerFiscalCalendar::checkLedgerPeriodDateModule(CompanyInfoHelper::fiscalCalendarRecId(), ledgerJournalTrans.TransDate, sysModule, false))
                            {
                                if (!LedgerFiscalCalendar::checkLedgerPeriodDateModuleByUser(CompanyInfoHelper::fiscalCalendarRecId(), ledgerJournalTrans.TransDate, sysModule, false, workflowUser))
                                {
                                    newTransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                                }
                            }
                            break;

                        case VendInvoicePostingDateAutoAdjustment::ChangeToFirstDayOfNewPeriodWhenPeriodIsOnHoldOrClosed:
                            if (!LedgerFiscalCalendar::checkLedgerPeriodDateModule(CompanyInfoHelper::fiscalCalendarRecId(), ledgerJournalTrans.TransDate, sysModule, false))
                            {
                                if (!LedgerFiscalCalendar::checkLedgerPeriodDateModuleByUser(CompanyInfoHelper::fiscalCalendarRecId(), ledgerJournalTrans.TransDate, sysModule, false, workflowUser))
                                {
                                    newTransDate = LedgerFiscalCalendar::findFirstOpenStartDateModule(CompanyInfoHelper::fiscalCalendarRecId(), ledgerJournalTrans.TransDate, sysModule);
                                }
                            }
                            break;
                    }
                }
                else
                {
                    if (!LedgerFiscalCalendar::checkLedgerPeriodDateModule(CompanyInfoHelper::fiscalCalendarRecId(), ledgerJournalTrans.TransDate, sysModule, false))
                    {
                        if (!LedgerFiscalCalendar::checkLedgerPeriodDateModuleByUser(CompanyInfoHelper::fiscalCalendarRecId(), ledgerJournalTrans.TransDate, sysModule, false, workflowUser))
                        {
                            newTransDate = LedgerFiscalCalendar::findFirstOpenStartDateModule(CompanyInfoHelper::fiscalCalendarRecId(), ledgerJournalTrans.TransDate, sysModule);
                        }
                    }
                }
                

                if ((newTransDate != dateNull()) && (newTransDate != ledgerJournalTrans.TransDate))
                {
                    Voucher newVoucher = ledgerJournalTrans.Voucher;

                    if (ledgerJournalTable.JournalType == LedgerJournalType::Approval)
                    {
                        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;

                        //Voucher should be updated only if the voucher hasn't been updated yet.
                        select firstOnly RecId from ledgerJournalVoucherChanged
                            where ledgerJournalVoucherChanged.ToDate == ledgerJournalTrans.TransDate
                               && ledgerJournalVoucherChanged.ToVoucher == ledgerJournalTrans.Voucher
                               && ledgerJournalVoucherChanged.FromVoucher == ledgerJournalTrans.Voucher;

                        if (ledgerJournalVoucherChanged)
                        {
                            newVoucher = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(false);
                        }

                        LedgerJournalVoucherChanged::modifyChangedVoucherDate(ledgerJournalTable.JournalNum,
                                                                              ledgerJournalTrans.Voucher,
                                                                              ledgerJournalTrans.TransDate,
                                                                              newVoucher,
                                                                              newTransDate);

                        update_recordSet ledgerJournalTransUpdate
                            setting TransDate = newTransDate,
                                    Voucher = newVoucher
                            where ledgerJournalTransUpdate.JournalNum == ledgerJournalTable.JournalNum
                                && ledgerJournalTransUpdate.TransDate == ledgerJournalTrans.TransDate
                                && ledgerJournalTransUpdate.Voucher == ledgerJournalTrans.Voucher;
                    }
                    else
                    {
                        update_recordSet ledgerJournalTransUpdate
                            setting TransDate = newTransDate
                            where ledgerJournalTransUpdate.JournalNum == ledgerJournalTable.JournalNum
                                && ledgerJournalTransUpdate.TransDate == ledgerJournalTrans.TransDate;
                    }

                    if (ledgerJournalTrans.TransDate != newTransDate)
                    {
                        TaxUncommitted taxUncommitted;

                        taxUncommitted.skipDataMethods(true);
                        taxUncommitted.skipEvents(true);
                        taxUncommitted.skipDatabaseLog(true);

                        update_recordset taxUncommitted
                            setting TransDate = newTransDate,
                                    Voucher = newVoucher
                            where taxUncommitted.HeadingTableId == ledgerJournalTable.TableId
                                && taxUncommitted.HeadingRecId == ledgerJournalTable.RecId
                                && taxUncommitted.TransDate == ledgerJournalTrans.TransDate
                                && taxUncommitted.Voucher == ledgerJournalTrans.Voucher;
                    }
                }
            }
            LedgerJournalTransAccrualTrans ledgerJournalTransAccrualTrans, ledgerJournalTransAccrualTransUpdate;

            ledgerJournalTransAccrualTransUpdate.skipDataMethods(true);
            ledgerJournalTransAccrualTransUpdate.skipEvents(true);
            ledgerJournalTransAccrualTransUpdate.skipDatabaseLog(true);

            while select TransDate from ledgerJournalTransAccrualTrans
                group by ledgerJournalTransAccrualTrans.TransDate
                exists join ledgerJournalTrans
                    where ledgerJournalTrans.TableId == ledgerJournalTransAccrualTrans.RefTableId
                        && ledgerJournalTrans.RecId == ledgerJournalTransAccrualTrans.RefRecId
                        && ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
            {
                if (!LedgerFiscalCalendar::checkLedgerPeriodDateModule(CompanyInfoHelper::fiscalCalendarRecId(), ledgerJournalTransAccrualTrans.TransDate, sysModule, false))
                {
                    newTransDate = LedgerFiscalCalendar::findFirstOpenStartDateModule(CompanyInfoHelper::fiscalCalendarRecId(), ledgerJournalTransAccrualTrans.TransDate, sysModule);

                    if (newTransDate != dateNull())
                    {
                        update_recordSet ledgerJournalTransAccrualTransUpdate
                            setting TransDate = newTransDate
                            where ledgerJournalTransAccrualTransUpdate.TransDate == ledgerJournalTransAccrualTrans.TransDate
                                join ledgerJournalTransUpdate
                                where ledgerJournalTransUpdate.TableId == ledgerJournalTransAccrualTransUpdate.RefTableId
                                    && ledgerJournalTransUpdate.RecId == ledgerJournalTransAccrualTransUpdate.RefRecId
                                    && ledgerJournalTransUpdate.JournalNum == ledgerJournalTable.JournalNum;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>WorkflowApprovalStatus</c> field in the <c>LedgerJournalTable</c> table from its
    ///    current status to the <c>LedgerJournalWFApprovalStatus::Submitted</c> enumeration value.
    /// </summary>
    /// <param name="_workflowEventArgs">
    ///    An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    public void started(WorkflowEventArgs _workflowEventArgs)
    {
        ;

        this.initProperties(_workflowEventArgs.parmWorkflowContext());

        if (this.validateWorkflowContext())
        {
            LedgerJournalWFApprovalStatusManager::startFromWorkflowEvent(contextRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowOriginator</Name>
				<Source><![CDATA[
    private WorkflowUser getWorkflowOriginator(RecId _recId)
    {
        WorkflowTrackingStatusTable workflowTrackingStatusTable;
        
        select firstonly Originator from workflowTrackingStatusTable
            where workflowTrackingStatusTable.ContextTableId == tableNum(LedgerJournalTable)
                && workflowTrackingStatusTable.ContextRecId == _recId;

        return workflowTrackingStatusTable.Originator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>