<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCoveragePayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerCoveragePayment</c> class performs payment allocations based on prediction results.
/// </summary>
internal final class LedgerCoveragePayment
{
    private const int Bucket1 = 1;
    private const int Bucket2 = 2;
    private const int Bucket3 = 3;
    private const int Late2EndDateFactor = 3;

    private int allocationMethod = 0;
    private percent threshold = 0.5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static LedgerCoveragePayment construct()
    {
        return new LedgerCoveragePayment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates cash flow forecasting payment calculations based on prediction results.
    /// </summary>
    /// <param name = "_ledgerCoverage">Updates cash flow forecasting.</param>
    /// <param name = "_predictionResult">The prediction results for this transaction.</param>
    /// <param name = "_bucketLate1BoundaryDays">The late one boundary days.</parm>
    /// <param name = "_invoiceDueDate">The invoice due date.</param>
    /// <param name = "_postingType">The posting type of the payment.</param>
    /// <param name = "_mainAccount">The main account of the payment.</param>
    /// <param name = "_dimensionDefault">The default dimension of the payment.</param>
    /// <param name = "_currencyCode">The transaction currency code of the payment.</param>
    /// <param name = "_amountCur">The amount of the payment in the payment currency.</param>
    internal void updateSum(
        LedgerCoverage _ledgerCoverage,
        PayPredPredictionResult _predictionResult,
        PositiveDays _bucketLate1BoundaryDays,
        TransDate _invoiceDueDate,
        LedgerPostingType _postingType,
        RefRecId _mainAccount,
        DimensionDefault _dimensionDefault,
        CurrencyCode _currencyCode,
        AmountCur _amountCur)
    {
        switch (allocationMethod)
        {
            case 0:
                this.allocateSingleProjectedPayment(
                    _ledgerCoverage,
                    _predictionResult,
                    _bucketLate1BoundaryDays,
                    _invoiceDueDate,
                    _postingType,
                    _mainAccount,
                    _dimensionDefault,
                    _currencyCode,
                    _amountCur);
                break;

            default:
                break;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateSingleProjectedPayment</Name>
				<Source><![CDATA[
    private void allocateSingleProjectedPayment(
        LedgerCoverage _ledgerCoverage,
        PayPredPredictionResult _predictionResult,
        PositiveDays _bucketLate1BoundaryDays,
        TransDate _invoiceDueDate,
        LedgerPostingType _postingType,
        RefRecId _mainAccount,
        DimensionDefault _dimensionDefault,
        CurrencyCode _currencyCode,
        AmountCur _amountCur)
    {
        TransDate projectedPaymentTransDate = this.determineSingleProjectedPaymentTransDate(
            _invoiceDueDate,
            _bucketLate1BoundaryDays,
            _predictionResult.BucketOnTimeScore,
            _predictionResult.BucketLate1Score,
            _predictionResult.BucketLate2Score);

        _ledgerCoverage.updateSum(
            projectedPaymentTransDate,
            _postingType,
            _mainAccount,
            _dimensionDefault,
            _currencyCode,
            _amountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSingleProjectedPaymentTransDate</Name>
				<Source><![CDATA[
    private TransDate determineSingleProjectedPaymentTransDate(
        TransDate _invoiceDueDate,
        PositiveDays _bucketLate1BoundaryDays,
        percent _bucketOnTimeScore,
        percent _bucketLate1Score,
        percent _bucketLate2Score)
    {
        int thresholdBucket = this.determineBucketThatContainsThresholdProbability(_bucketOnTimeScore, _bucketLate1Score, _bucketLate2Score);

        TransDate fromDate;
        TransDate toDate;
        Percent fromProbability;
        Percent toProbability;

        switch (thresholdBucket)
        {
            case Bucket1:
                fromDate = _invoiceDueDate;
                toDate = _invoiceDueDate;
                fromProbability = 0.0;
                toProbability = _bucketOnTimeScore;
                break;
            case Bucket2:
                fromDate = _invoiceDueDate + 1;
                toDate = _invoiceDueDate + _bucketLate1BoundaryDays;
                fromProbability = _bucketOnTimeScore;
                toProbability = _bucketOnTimeScore + _bucketLate1Score;
                break;
            case Bucket3:
                fromDate = _invoiceDueDate + _bucketLate1BoundaryDays + 1;
                toDate = _invoiceDueDate + (Late2EndDateFactor * _bucketLate1BoundaryDays);
                fromProbability = _bucketOnTimeScore + _bucketLate1Score;
                toProbability = 1.0;
                break;
        }

        //----------------------------------- threshold bucket ----------------------------------------------//
        // fromDate                                ?                                        toDate           //
        //                  thresholdPercent                                                                 //
        // fromProbability                                   threshold                      toProbability    //
        //---------------------------------------------------------------------------------------------------//

        // Find the thresholdPercent as the ratio at which we reach the threshold between the fromProbability and the toProbability.
        Percent thresholdPercent = (threshold - fromProbability) / (toProbability - fromProbability);

        // Now find the projected payment date by adding the number of days to reach the threshold by using the thesholdPercent
        // with the number of days in the threshold bucket plus the number of days from the start of the bucket.
        TransDate projectedPaymentTransDate = fromDate + ((toDate - fromDate) * thresholdPercent);

        return projectedPaymentTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineBucketThatContainsThresholdProbability</Name>
				<Source><![CDATA[
    private int determineBucketThatContainsThresholdProbability(
        percent _bucketOnTimeScore,
        percent _bucketLate1Score,
        percent _bucketLate2Score)
    {
        int thresholdBucket;

        if (_bucketOnTimeScore >= threshold)
        {
            thresholdBucket = Bucket1;
        }
        else if (_bucketOnTimeScore + _bucketLate1Score >= threshold)
        {
            thresholdBucket = Bucket2;
        }
        else
        {
            thresholdBucket = Bucket3;
        }

        return thresholdBucket;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>