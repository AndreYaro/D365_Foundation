<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocumentDescriptorProjAdvancedJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class represents the tax document bundler for normal project advanced jornal.
/// </summary>
[TaxableDocumentDescriptorAttribute('Project operations integration journal', 'ProjAdvancedJournal')]
public class TaxableDocumentDescriptorProjAdvancedJournal extends TaxableDocumentDescriptorBase
    implements TaxableDocumentTypeDefinitionProjAdvancedJournal
{
    protected TaxEngineProjAdvancedJournalLineHeader projAdvancedJournaLineHeader;
    protected ProjAdvancedJournalLine projAdvancedJournalLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDataProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data provider.
    /// </summary>
    /// <returns>
    /// The data provider instance.
    /// </returns>
    public ITaxableDocumentDataProvider getDataProvider()
    {
        return new TaxableDocProjAdvancedJournalDataProvider(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionSide</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default distribution side for the transaction.
    /// </summary>
    /// <returns>The default distribution side for the transaction.</returns>
    public TaxAccountingPostingProfileDistributionSide getDistributionSide()
    {
        TaxAccountingPostingProfileDistributionSide ret = TaxAccountingPostingProfileDistributionSide::Auto;

        // It only calculates tax when offset account type is cust/vend or ledger with purchase cash posting type.
        switch (projAdvancedJournalLine.OffsetAccountType)
        {
            case LedgerJournalACType::Cust:
                ret = TaxAccountingPostingProfileDistributionSide::Credit;
                break;
            case LedgerJournalACType::Vend:
            case LedgerJournalACType::Ledger:
                ret = TaxAccountingPostingProfileDistributionSide::Debit;
                break;
            default:
                throw error(strFmt("@TaxProj:AccountTypeIsNotSupported", projAdvancedJournalLine.OffsetAccountType));
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxableDocumentRootRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the root record
    /// </summary>
    /// <param name = "_rootRecord">The root record</param>
    protected void setTaxableDocumentRootRecord(Common _rootRecord)
    {
        switch (_rootRecord.TableId)
        {
            case tableNum(TaxEngineProjAdvancedJournalLineHeader):
                rootTable = _rootRecord;
                projAdvancedJournaLineHeader = rootTable as TaxEngineProjAdvancedJournalLineHeader;
                projAdvancedJournalLine = projAdvancedJournaLineHeader.getProjAdvancedJournalLine();
                break;
            case tableNum(ProjAdvancedJournalLine):
                projAdvancedJournalLine = _rootRecord as ProjAdvancedJournalLine;
                projAdvancedJournaLineHeader = projAdvancedJournalLine.salesPurchJournalTable();
                rootTable = projAdvancedJournaLineHeader;
                break;
            default:
                throw error(error::wrongUseOfFunction(funcName()));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTaxableDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source taxable document type of project advanced journal.
    /// </summary>
    /// <returns>The source taxable document type.</returns>
    public ClassName getSourceTaxableDocumentType()
    {
        return classStr(TaxableDocumentTypeDefinitionProjAdvancedJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxAdjustable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is tax adjustable for this transaction
    /// </summary>
    /// <returns>
    /// true if tax is adjustable; otherwise, false.
    /// </returns>
    public boolean isTaxAdjustable()
    {
        if (projAdvancedJournalLine.ProvidedTaxAmount)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxRecalculable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is tax recalculable for this transaction.
    /// </summary>
    /// <returns>true if tax is recalculable; otherwise, false.</returns>
    internal boolean isTaxRecalculable()
    {
        if (projAdvancedJournalLine.ProvidedTaxAmount)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPersistTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if tax document should be persisted in database.
    /// </summary>
    /// <returns>true if the tax document should be persisted; otherwise, false.</returns>
    public boolean shouldPersistTaxDocument()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSkipTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes skipTaxDocument attribute.
    /// </summary>
    protected void initSkipTaxDocument()
    {
        super();

        if (!skipTaxDocument)
        {
            if (!projAdvancedJournalLine.canCalculateGST())
            {
                skipTaxDocument = true;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>