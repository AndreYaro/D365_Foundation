<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationProcessorReceivePurchaseOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using System.Xml.Linq;
using Microsoft.Dynamics.Commerce.Runtime.TransactionService;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using CommerceRunTimeDataModel = Microsoft.Dynamics.Commerce.Runtime.DataModel;

/// <summary>
/// The <c>RetailDocumentOperationProcessorReceivePurchaseOrder</c> class is the processor for ReceivePurchaseOrder operation.
/// </summary>
internal class RetailDocumentOperationProcessorReceivePurchaseOrder extends RetailDocumentOperationProcessorInventoryDocumentBase
{
    private const int defaultNumberOfCharacters = 5;
    private const int defaultNumberOfDecimals = 3;
    private const str WmsLocationIdAttribute = 'wmsLocationId';
    private const str InventoryStatusIdAttribute = 'InventoryStatusId';
    private const str InventoryDocumentLineOriginTypeAttribute = 'InventoryDocumentLineOriginType';
    private str inventLocationId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of a class of the <c>RetailDocumentOperationProcessorReceivePurchaseOrder</c> class.
    /// </summary>
    /// <param name="_parameters">
    /// The <c>RetailDocumentOperationProcessorParameters</c> instance.
    /// </param>
    /// <returns>
    /// The new instance of an <c>RetailDocumentOperationProcessorReceivePurchaseOrder</c> subclass.
    /// </returns>
    public static RetailDocumentOperationProcessorReceivePurchaseOrder construct(RetailDocumentOperationProcessorParameters _parameters)
    {
        var processor = new RetailDocumentOperationProcessorReceivePurchaseOrder(_parameters);
        processor.isRetriable = false;
        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the document of ReceivePurchaseOrder operation.
    /// </summary>
    /// <returns>A container object to indicate the result document.</returns>
    protected container processInternal()
    {
        container ret = conNull();
        str inventoryDocumentJsonStr = conPeek(this.requestContainer, 1);

        CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument inventoryCommitDocument = RetailTransactionServiceJsonHelper::DeserializeInventoryInboundOutboundCommitDocumentFromJSON(inventoryDocumentJsonStr);
        this.validateInventoryInboundOutboundCommitDocument(inventoryCommitDocument);
        
        this.inventLocationId = inventoryCommitDocument.get_Document().get_SourceDocument().get_Receiver();
        str purchXmlStr = this.convertInventoryInboundOutboundCommitDocumentToXml(inventoryCommitDocument);
        container result = RetailTransactionServiceInventory::updatePurchaseOrder(purchXmlStr);
        boolean isSuccess = conPeek(result, RetailDocumentOperationProcessorInventoryDocumentBase::IsSuccessIndex);
        if (!isSuccess)
        {
            this.throwsException(this.isRetriable, conPeek(result, RetailDocumentOperationProcessorInventoryDocumentBase::ErrorMessageIndex), RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
        }

        str documentXmlStr = conPeek(result, RetailDocumentOperationProcessorInventoryDocumentBase::ResponseDocumentIndex);
        this.updateCommitDocument(documentXmlStr, inventoryCommitDocument);
        this.attachNoteForInventoryCommitDocument(inventoryCommitDocument);

        ret = [documentXmlStr];
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get <c>PurchTable</c> table object from <c>InventoryInboundOutboundDocument</c>.
    /// </summary>
    /// <param name = "_inventoryInboundOutboundDocument">The inventory document.</param>
    /// <returns>
    /// An <c>PurchTable</c> table object with <c>Common</c> type.
    /// </returns>
    protected Common getDocument(Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundDocument _inventoryInboundOutboundDocument)
    {
        Common ret;

        PurchId purchaseOrderId = _inventoryInboundOutboundDocument.get_SourceDocument().get_DocumentId();
        ret = PurchTable::find(purchaseOrderId);

        if (!ret)
        {
            throw error(strFmt("@Retail:NotValidPurchaseOrderIdError", purchaseOrderId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get <c>PurchLine</c> table object from <c>InventoryInboundOutboundDocumentLine</c>.
    /// </summary>
    /// <param name = "_inventoryInboundOutboundDocument">The inventory document line.</param>
    /// <returns>
    /// An <c>PurchLine</c> table object with <c>Common</c> type.
    /// </returns>
    protected Common getDocumentLine(Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundDocumentLine _inventoryInboundOutboundDocumentLine)
    {
        Common ret;

        RecId purchaseOrderLineRecId = _inventoryInboundOutboundDocumentLine.get_SourceDocumentLine().get_RecordId();
        PurchId purchaseOrderId = _inventoryInboundOutboundDocumentLine.get_SourceDocumentLine().get_DocumentId();
        ret = PurchLine::findRecId(purchaseOrderLineRecId);

        if (!ret)
        {
            throw error (strFmt("@Retail:CannotFindPurchaseOrderLineError", purchaseOrderLineRecId, purchaseOrderId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertInventoryInboundOutboundCommitDocumentToXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert <c>InventoryInboundOutboundCommitDocument</c> to XML string which represents purchase order details.
    /// </summary>
    /// <param name="_inventoryCommitDocument">
    /// The inventory commit document.
    /// </param>
    /// <returns>
    /// An XML string for purchase order details.
    /// </returns>
    private str convertInventoryInboundOutboundCommitDocumentToXml(CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument inventoryCommitDocument)
    {
        CommerceRunTimeDataModel.InventoryInboundOutboundDocument inventoryDocument = inventoryCommitDocument.Document;
        IEnumerable lineList = inventoryCommitDocument.DocumentLines as IEnumerable;

        XmlDocument doc = new XmlDocument();
        XmlElement purchTableElement = doc.CreateElement(tableStr(PurchTable));
        doc.AppendChild(purchTableElement);
        purchTableElement.setAttribute(fieldStr(PurchTable, PurchId), inventoryDocument.get_SourceDocument().get_DocumentId() ? inventoryDocument.get_SourceDocument().get_DocumentId() : '');
        purchTableElement.setAttribute(fieldStr(PurchTable, RecId), int642Str(inventoryDocument.get_SourceDocument().get_RecordId()));
        purchTableElement.setAttribute(fieldStr(VendPackingSlipJour, PackingSlipId), inventoryDocument.ReceiptId ? inventoryDocument.ReceiptId : '');
        if (inventoryDocument.TransactionDate)
        {
            System.Nullable<System.DateTimeOffset> transacationDate = inventoryDocument.TransactionDate;
            System.DateTimeOffset datetime = transacationDate.get_Value();
            System.String strDateTime = datetime.ToString(RetailDocumentOperationProcessorTransferOrderBase::DateFormat);
            purchTableElement.setAttribute(RetailTransactionServiceInventory::TransactionDateAttributeName, strDateTime);
        }

        IEnumerator enumerator = lineList.GetEnumerator();
        while (enumerator.MoveNext())
        {
            CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine line = enumerator.Current as CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine;
            this.validateInventoryInboundOutboundDocumentLine(line);
            XmlElement purchLineElement = this.createInventoryInboundOutboundDocumentLineElement(doc, line);

            purchTableElement.appendChild(purchLineElement);
        }

        return doc.innerXml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventoryInboundOutboundDocumentLineElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert <c>InventoryInboundOutboundDocumentLine</c> to XML element which represents purchase order line details.
    /// </summary>
    /// <param name="_doc">
    /// The XML document used to create the XML element.
    /// </param>
    /// <param name="_inventoryDocumentLine">
    /// The inventory document line.
    /// </param>
    /// <returns>
    /// An XML element for purchase order line details.
    /// </returns>
    private XmlElement createInventoryInboundOutboundDocumentLineElement(XmlDocument doc, CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine inventoryDocumentLine)
    {
        int numberOfDecimals = defaultNumberOfDecimals;
        UnitOfMeasure unitOfMeasure;
        PurchLine purchLine;
        InventDim inventDim;

        purchLine = PurchLine::findRecId(inventoryDocumentLine.get_SourceDocumentLine().get_RecordId());
        if (purchLine)
        {
            unitOfMeasure = UnitOfMeasure::findBySymbol(purchLine.PurchUnit);
            if (unitOfMeasure)
            {
                numberOfDecimals = unitOfMeasure.DecimalPrecision;
            }
        }

        XmlElement purchLineElement = doc.CreateElement(tableStr(PurchLine));
        purchLineElement.setAttribute(fieldStr(PurchLine, RecId), int642Str(inventoryDocumentLine.get_SourceDocumentLine().get_RecordId()));
        purchLineElement.setAttribute(fieldStr(PurchLine, PurchReceivedNow), num2Str(inventoryDocumentLine.QuantityToUpdate, defaultNumberOfCharacters, numberOfDecimals, DecimalSeparator::Dot, ThousandSeparator::None));
        purchLineElement.setAttribute(WmsLocationIdAttribute, inventoryDocumentLine.LocationId ? inventoryDocumentLine.LocationId : '');
        purchLineElement.setAttribute(fieldStr(InventDim, InventLocationId), this.inventLocationId ? this.inventLocationId : '');
        purchLineElement.setAttribute(fieldStr(PurchParmLine, closed), inventoryDocumentLine.IsCloseLine ? 'true': 'false');

        if (inventoryDocumentLine.OriginType == CommerceRunTimeDataModel.InventoryDocumentLineOriginType::Channel)
        {
            purchLineElement.setAttribute(fieldStr(InventTable, Product), int642Str(inventoryDocumentLine.ProductId.get_Value()));
            PurchLineElement.setAttribute(InventoryDocumentLineOriginTypeAttribute, enum2str(CommerceRunTimeDataModel.InventoryDocumentLineOriginType::Channel));
        }

        if (purchLine)
        {
            inventDim = InventDim::find(purchLine.InventDimId);
            if (inventDim)
            {
                purchLineElement.setAttribute(InventoryStatusIdAttribute, inventDim.InventStatusId);
            }
        }

        // Append serial number lines
        IEnumerable serialNumberLineList = inventoryDocumentLine.SerialNumberLines as IEnumerable;
        IEnumerator enumerator = serialNumberLineList.GetEnumerator();
        while (enumerator.MoveNext())
        {
            CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine line = enumerator.Current as CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine;
            // We only deal with registering serial number line.
            if (line.Status == CommerceRunTimeDataModel.InventorySerialNumberLineStatus::Registering)
            {
                XmlElement serialNumberLineElement = this.createInventoryInboundOutboundDocumentSerialNumberLineElement(doc, line);

                purchLineElement.appendChild(serialNumberLineElement);
            }
        }

        return purchLineElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventoryInboundOutboundDocumentSerialNumberLineElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert <c>InventoryDocumentSerialNumberLine</c> to XML element which represents purchase order serial number line details.
    /// </summary>
    /// <param name="_doc">
    /// The XML document used to create the XML element.
    /// </param>
    /// <param name="_inventoryDocumentSerialNumberLine">
    /// The inventory document serial number line.
    /// </param>
    /// <returns>
    /// An XML element for purchase order serial number line details.
    /// </returns>
    private XmlElement createInventoryInboundOutboundDocumentSerialNumberLineElement(XmlDocument _doc, CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine _inventoryDocumentSerialNumberLine)
    {
        XmlElement serialNumberLineElement = _doc.CreateElement(RetailRTSSerialNumberLine::SerialNumberLineName);
        serialNumberLineElement.setAttribute(RetailRTSSerialNumberLine::LineIdAttribute, _inventoryDocumentSerialNumberLine.LineId);
        // For purchase order overreceive scenario, there may be no source invent trans / line related in HQ.
        serialNumberLineElement.setAttribute(RetailRTSSerialNumberLine::SourceInventTransRecIdAttribute, _inventoryDocumentSerialNumberLine.SourceLine == null ? '' : int642Str(_inventoryDocumentSerialNumberLine.SourceLine.InventTransRecordId));
        serialNumberLineElement.setAttribute(RetailRTSSerialNumberLine::InventSerialIdAttribute, _inventoryDocumentSerialNumberLine.SerialNumber);
        serialNumberLineElement.setAttribute(RetailRTSSerialNumberLine::QtyAttribute, num2Str(_inventoryDocumentSerialNumberLine.Quantity, defaultNumberOfCharacters, defaultNumberOfCharacters, DecimalSeparator::Dot, ThousandSeparator::None));

        return serialNumberLineElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the newly added line information to commit document.
    /// </summary>
    /// <param name = "_newDocXML">The xml string of updated purchase order.</param>
    /// <param name = "_updateDoc">The commit document.</param>
    private void updateCommitDocument(str _newDocXML, CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument _updateDoc)
    {
        try
        {
            XmlDocument poXml   = new XmlDocument();
            Map productDistinctIdLineIdMap = new Map(Types::Int64, Types::Int64);
            poXml.loadXml(_newDocXML);
            XmlElement xmlRoot = poXml.getNamedElement(tableStr(PurchTable));
            XmlNodeList xmlRecordList = xmlRoot.selectNodes('//PurchLine');
            XmlElement xmlRecord = xmlRecordList.nextNode();
            while (xmlRecord)
            {
                int64 lineRecId = str2int64(xmlRecord.getAttribute(fieldStr(PurchLine, RecId)));
                int64 productRecId = str2Int64(xmlRecord.getAttribute(fieldStr(InventTable, Product)));
                str lineOriginTypeStringValue = xmlRecord.getAttribute(InventoryDocumentLineOriginTypeAttribute);
                Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryDocumentLineOriginType lineOriginType;
                xmlRecord = xmlRecordList.nextNode();
                if ('' == lineOriginTypeStringValue || str2Enum(lineOriginType, lineOriginTypeStringValue) != Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryDocumentLineOriginType::Channel)
                {
                    // Only channel origin type requires line record id assignment.
                    continue;
                }
                productDistinctIdLineIdMap.insert(productRecId, lineRecId);
            }
            IEnumerable documentLines = _updateDoc.get_DocumentLines() as IEnumerable;
            IEnumerator documentLinesEnumerator = documentLines.GetEnumerator();
            while (documentLinesEnumerator.MoveNext())
            {
                CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine documentLine = documentLinesEnumerator.Current as CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine;
                int64 productId = documentLine.ProductId.GetValueOrDefault();
                if (productDistinctIdLineIdMap.exists(productId))
                {
                    CommerceRunTimeDataModel.InventoryInboundOutboundSourceDocumentLine sourceDocumentLine = documentLine.SourceDocumentLine;
                    sourceDocumentLine.RecordId = productDistinctIdLineIdMap.lookup(productId);
                }
            }
        }
        catch
        {
            CommerceHQEventSource logEventSource = this.GetEventSource();
            logEventSource.EventWriteInventoryDocumentFailToUpdateCommitDocument(this.getOperationName(), this.getRequestId(), _updateDoc.get_Document().get_SourceDocumentRecordId());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>