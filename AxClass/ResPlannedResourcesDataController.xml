<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResPlannedResourcesDataController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Planned resources availability view data controller.
/// </summary>
public class ResPlannedResourcesDataController extends ResourceAvailabilityDataController implements IAvailabilityViewDataController
{
    AvailabilityView        avControl;
    ActivityResourceRecId   plannedActivityResource;
    ResourceRecId           staffedResource;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAvControl</Name>
				<Source><![CDATA[
    public AvailabilityView parmAvControl(AvailabilityView _avControl = avControl)
    {
        avControl = _avControl;
        return avControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedActivityResource</Name>
				<Source><![CDATA[
    public ActivityResourceRecId parmPlannedActivityResource(ActivityResourceRecId _plannedActivityResource = plannedActivityResource)
    {
        plannedActivityResource = _plannedActivityResource;
        return plannedActivityResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStaffedResource</Name>
				<Source><![CDATA[
    public ResourceRecId parmStaffedResource(ResourceRecId _staffedResource = staffedResource)
    {
        staffedResource = _staffedResource;
        return staffedResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCoverageType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get roll-up coverage type by activity resource Id.
    /// </summary>
    /// <param name = "_collectionKey">Activity resource Id as collection key.</param>
    /// <returns>Activity resoruce Id associated roll-up coverage type.</returns>
    protected ResRollUpCoverage getCoverageType(str _collectionKey)
    {
        ResRollUpCoverage localCoverage;
        if (_collectionKey)
        {
            localCoverage = ResRollUpCoverage::Activity;
        }
        return localCoverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChartController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the chart controller.
    /// </summary>
    protected void setChartController()
    {
        // cached chart availability data controller
        this.chartController(ResCachedResourceActivityChart::construct());
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the selected resource to the planned resource.
    /// </summary>
    /// <param name = "_plannedResource">Planned resource activity record identifier.</param>
    /// <returns>true if planned resource fulfillment succeeds; else fails.</returns>
    public boolean assignResource(ActivityResourceRecId _plannedResource)
    {
        boolean result;

        if (_plannedResource)
        {

            avControl = this.control();
            List selections = avControl.selections().getCollectionItems();

            if ( !selections.elements())
            {
                result = checkFailed("@Res:SelectResourceWarning");
            }
            else
            {
                ListEnumerator enumerator = selections.getEnumerator();
            
                if (enumerator.moveNext())
                {
                    CollectionItemDataContract selection = enumerator.current();

                    container keys = str2con(selection.collectionKey(), collectionKeyDelimiter);
                    ResourceRecId resource = str2Int64(conPeek(keys, 2));
                    ResAvailabilityViewContext context = avControl.controlContext();
                    ActivityRecId assignResourceActivity = context.activity();
                    ResIProjTeamController activityTeam = ResProjTeamController::getInstanceFromActivityRecId(assignResourceActivity);
                    activityTeam.assignV2(_plannedResource, resource, true, this.control().timescale());

                    result = true;
                }
            }
        }

        if (result)
        {
            this.raiseActionCompletedEvent('assignResource');
            avControl.clearSelections();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showEditFulfillmentForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launch the edit fulfillment form.
    /// </summary>
    /// <param name = "_plannedResource">Planned resource activity record identifier.</param>
    /// <param name = "_staffedResource">Staffed resource record identifier.</param>
    public void showEditFulfillmentForm(ActivityResourceRecId _plannedResource, ResourceRecId _staffedResource)
    {
        if ( _plannedResource && _staffedResource)
        {
            avControl = this.control();
            
            Args formArgs = new Args();
            this.parmPlannedActivityResource(_plannedResource);
            this.parmStaffedResource(_staffedResource);
            formArgs.caller(this);

            new MenuFunction(menuitemdisplaystr(ResEditFulfillmentDialog),
                MenuItemType::Display).run(formArgs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ResEditFulfillmentDialog_OnClosing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles OnClosing event of ResEditFulfillmentDialog form.
    /// </summary>
    [FormEventHandler(formstr(ResEditFulfillmentDialog), FormEventType::Closing)]
    public static void ResEditFulfillmentDialog_OnClosing(xFormRun sender, FormEventArgs e)
    {
        FormRun formRun = sender as FormRun;
        if (formRun.closedOk())
        {
            ResPlannedResourcesDataController control = formRun.PlannedResourceController();
            control.raiseActionCompletedEvent('assignResource');
            control.parmAvControl().clearSelections();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize an instance of planned resources data controller.
    /// </summary>
    /// <param name = "_control"><c>AvailabilityView</c> control instance.</param>
    protected void new(AvailabilityView _control)
    {
        if (!this.collectionController())
        {
            this.collectionController(ResPlannedResourcesCollection::construct());
        }

        if (!this.timelineController())
        {
            this.timelineController(ResResourceAvailabilityTimeframe::construct());
        }

        if (!this.chartController())
        {
            this.chartController(ResCachedResourceActivityChart::construct());
        }

        super(_control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contructs a new instance of the planned resources data controller.
    /// </summary>
    /// <param name = "_control"><c>AvailabilityView</c> control instance.</param>
    /// <returns>Returns an instance of the data controller.</returns>
    public static ResPlannedResourcesDataController construct(AvailabilityView _control = null)
    {
        ResPlannedResourcesDataController dataController = new ResPlannedResourcesDataController(_control);
        return dataController;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>