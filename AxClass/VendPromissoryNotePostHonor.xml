<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPromissoryNotePostHonor</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendPromissoryNotePostHonor extends VendPromissoryNotePost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postNextStep</Name>
				<Source><![CDATA[
        protected void postNextStep(CustVendVoucher custVoucher,
                                CustVendTrans   settlingTrans)
    {
        // There is no next step
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSettlingStep</Name>
				<Source><![CDATA[
        protected void postSettlingStep(CustVendVoucher _vendVoucher, CustVendTrans _settlingTrans)
    {
        VendVoucher             vendVoucher = _vendVoucher;
        VendTrans               settlingTrans = _settlingTrans;
        VendSettlement          vendSettlement;
        VendTrans               settledTrans;
        VendTrans               nextStepTrans;
        VendPromissoryNoteJour  vendPromissoryNoteJour;
        VendPromissoryNoteTrans vendPromissoryNoteTrans;
        Counter                 numOfSettledTrans;

        super(vendVoucher, settlingTrans);

        settlingTrans = VendTrans::find(settlingTrans.RecId, true);

        nextStepTrans.data(settlingTrans);

        // Update journal and transaction table
        // This code is run when posting a Promissory Note Settlement Journal.
        // In this code the settlingTrans, settledTrans, and custSettlement will always be in the current company so we do not
        // need to do a cross company select statement and do not need to changeCompany after the select statement.
        while select OffsetRecid from vendSettlement
            where vendSettlement.TransRecId == settlingTrans.RecId
            join settledTrans
                where settledTrans.RecId == vendSettlement.OffsetRecid
        {
            numOfSettledTrans++;
            vendPromissoryNoteJour = VendPromissoryNoteJour::find(settledTrans.PromissoryNoteID, true);
            nextStepTrans.AmountCur = -settledTrans.AmountCur;
            nextStepTrans.AmountMST = -settledTrans.AmountMST;
            vendPromissoryNoteTrans = this.insertNegInstTrans(vendPromissoryNoteJour, nextStepTrans);
        }

        if (numOfSettledTrans == 1)
        {
            this.setNegInstFieldOnTrans(settlingTrans,
                                        vendPromissoryNoteTrans.PromissoryNoteId,
                                        vendPromissoryNoteTrans.Status,
                                        vendPromissoryNoteTrans.SeqNum);

            settlingTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
        protected CustVendNegInstStatus status()
    {
        return CustVendNegInstStatus::Honored;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>