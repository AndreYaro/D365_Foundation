<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsWorkAuditTemplateForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>whsWorkAuditTemplateForm</c> class contains the business logic of the <c>whsWorkAuditTemplate</c> form.
/// </summary>
class whsWorkAuditTemplateForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>storePrintSettings</Name>
				<Source><![CDATA[
	    /// <summary>
	/// Stores print settings defined on work audit template line.
	/// </summary>
	/// <param name="_whsWorkAuditTemplateLine">
	/// Work audit template line that has print settings.
	/// </param>
    public void storePrintSettings(WHSWorkAuditTemplateLine _whsWorkAuditTemplateLine)
    {
        SRSPrintDestinationSettings destinationSettings;
        str fileName;
        WHSWorkAuditTemplateLine whsWorkAuditTemplateLine = _whsWorkAuditTemplateLine;

        destinationSettings = new SRSPrintDestinationSettings();

        if (whsWorkAuditTemplateLine.PrintSettings)
        {
            destinationSettings.unpack(whsWorkAuditTemplateLine.PrintSettings);
        }

        fileName = whsWorkAuditTemplateLine.WorkAuditTemplateReportName + '.Report';
        destinationSettings.fileName(fileName);

        SrsReportRunUtil::showSettingsDialog(destinationSettings);

        ttsbegin;
        whsWorkAuditTemplateLine.PrintSettings = destinationSettings.pack();
        whsWorkAuditTemplateLine.write();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkAuditTemplateLine</Name>
				<Source><![CDATA[
    /// <summary>
	/// Updates work audit template line record.
	/// </summary>
	/// <param name="_whsWorkAuditTemplateLine">
	/// Record to be updated.
	/// </param>
    public void updateWorkAuditTemplateLine(WHSWorkAuditTemplateLine _whsWorkAuditTemplateLine)
    {
        WHSWorkAuditTemplateLine whsWorkAuditTemplateLine = _whsWorkAuditTemplateLine;
        whsWorkAuditTemplateLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReportName</Name>
				<Source><![CDATA[
    /// <summary>
	/// Validates report name such that the report should be defined in AOT.
	/// </summary>
	/// <param name="reportName">
	/// Report name.
	/// </param>
	/// <returns>
	/// True if the report is found on AOT.
	/// </returns>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when report is not found on AOT.
	/// </exception>
    public boolean validateReportName(SRSReportName reportName)
    {
        boolean found = false;
        SysMetaReportNameLookup reportNameLookup;

        if (reportName)
        {
            select Name from reportNameLookup
                where reportNameLookup.Name == reportName;

            if (!reportNameLookup.Name)
            {
                throw error(strFmt("@SYS319317", reportName));
            }

            found = true;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteTemplateTable</Name>
				<Source><![CDATA[
    /// <summary>
	/// Validates a work audit template record.
	/// </summary>
	/// <param name="whsWorkAuditTemplateTable">
	/// Record to be validated.
	/// </param>
	/// <param name="_ret">
	/// Return value.
	/// </param>
	/// <returns>
	/// True if the record is validated, false otherwise.
	/// </returns>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when break status is not defined
	/// when event is set to trigger on status change of load or shipment id of the work.
	/// </exception>
    public boolean validateWriteTemplateTable(WHSWorkAuditTemplateTable whsWorkAuditTemplateTable, boolean _ret)
    {
        boolean ret = _ret;

        if (whsWorkAuditTemplateTable.AuditBreakEvent == WHSAuditBreakEvent::StatusChange &&
            (whsWorkAuditTemplateTable.AuditBreakFieldNum == fieldNum(WHSWorkTable, LoadId) ||
             whsWorkAuditTemplateTable.AuditBreakFieldNum == fieldNum(WHSWorkTable, ShipmentId)))
        {
            if (whsWorkAuditTemplateTable.WorkAuditBreakStatus == '')
            {
                ret = false;
                throw error("@WAX4244");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsWorkAuditTemplateLine_initValue</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds next sequence number to be assigned to a work audit template line.
	/// </summary>
	/// <param name="_whsWorkAuditTemplateLine">
	/// Work audit template line.
	/// </param>
	/// <returns>
	/// The next sequence number to be assigned.
	/// </returns>
    public WHSAuditSeqNum whsWorkAuditTemplateLine_initValue(WHSWorkAuditTemplateLine  _whsWorkAuditTemplateLine)
    {
        WHSWorkAuditTemplateLine templateLine;

        select firstonly AuditSeqNum from templateLine
            order by templateLine.AuditSeqNum desc
            where templateLine.WorkAuditTemplateId == _whsWorkAuditTemplateLine.WorkAuditTemplateId;

        return templateLine.AuditSeqNum + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeFrombuttonMoveUpLine</Name>
				<Source><![CDATA[
    /// <summary>
	/// Moves up or down a line in the form.
	/// </summary>
	/// <param name="_whsWorkAuditTemplateLine">
	/// Work audit template line record to be moved up/down.
	/// </param>
	/// <param name="_moveUp">
	/// Determines whether to move up or down the record.
    /// </param>
    [SysObsolete('Use WHSSequenceNumberMoverForm for Move up/down buttons logic', false, 13\09\2022)]
    public void writeFrombuttonMoveUpLine(WHSWorkAuditTemplateLine _whsWorkAuditTemplateLine, boolean _moveUp)
    {
        WHSAuditSeqNum seqNum;
        WHSWorkAuditTemplateLine whsWorkAuditTemplateLine = _whsWorkAuditTemplateLine;
        WHSWorkAuditTemplateLine localWorkAuditTemplateLine;

        ttsbegin;

        if (_moveUp)
        {
            select firstonly forupdate localWorkAuditTemplateLine
                order by AuditSeqNum desc
                where localWorkAuditTemplateLine.WorkAuditTemplateId    == whsWorkAuditTemplateLine.WorkAuditTemplateId
                    && localWorkAuditTemplateLine.AuditSeqNum           <  whsWorkAuditTemplateLine.AuditSeqNum;
        }
        else
        {
            select firstonly forupdate localWorkAuditTemplateLine
                order by AuditSeqNum
                where localWorkAuditTemplateLine.WorkAuditTemplateId    == whsWorkAuditTemplateLine.WorkAuditTemplateId
                    && localWorkAuditTemplateLine.AuditSeqNum           >  whsWorkAuditTemplateLine.AuditSeqNum;
        }

        if (whsWorkAuditTemplateLine && localWorkAuditTemplateLine)
        {
            seqNum = whsWorkAuditTemplateLine.AuditSeqNum;
            whsWorkAuditTemplateLine.AuditSeqNum = localWorkAuditTemplateLine.AuditSeqNum;

            // 3-step swap of the two lines due to AuditSeqNum uniqueness constraint
            var tempSeqNum = this.whsWorkAuditTemplateLine_initValue(_whsWorkAuditTemplateLine);
            localWorkAuditTemplateLine.AuditSeqNum = tempSeqNum;
            localWorkAuditTemplateLine.write();

            whsWorkAuditTemplateLine.write();

            localWorkAuditTemplateLine.AuditSeqNum = seqNum;
            localWorkAuditTemplateLine.write();
        }

        ttscommit;

        if (FormDataUtil::getFormDataSource(whsWorkAuditTemplateLine))
        {
            FormDataUtil::getFormDataSource(whsWorkAuditTemplateLine).research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeWorkAuditTemplateTable</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds break status defined on work audit template.
	/// </summary>
	/// <param name="_whsTmpAuditTemplateStatus">
	/// Temporary work audit template status.
	/// </param>
	/// <param name="_whsWorkAuditTemplateTable">
	/// Work audit template record.
	/// </param>
	/// <param name="_tmpStatus">
	/// Temporary work audit template status.
	/// </param>
	/// <returns>
	/// Temporary work audit template status.
	/// </returns>
	/// <remarks>
	/// We assume that this method needs a work audit template that is set break event as Status Change
	/// and audit break field is set as either LoadId or ShipmentId.
	/// </remarks>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when enum value is not defined.
	/// </exception>
    public WHSTmpAuditTemplateStatus writeWorkAuditTemplateTable(WHSTmpAuditTemplateStatus _whsTmpAuditTemplateStatus,
                                                          WHSWorkAuditTemplateTable _whsWorkAuditTemplateTable,
                                                          WHSTmpAuditTemplateStatus _tmpStatus)
    {
        WHSTmpAuditTemplateStatus tmpStatus = _tmpStatus;
        WHSTmpAuditTemplateStatus whsTmpAuditTemplateStatus = _whsTmpAuditTemplateStatus;
        WHSWorkAuditTemplateTable whsWorkAuditTemplateTable = _whsWorkAuditTemplateTable;

        switch (whsWorkAuditTemplateTable.AuditBreakFieldNum)
        {
            case fieldNum(WHSWorkTable, LoadId):
                select firstonly EnumValue from tmpStatus
                    where tmpStatus.EnumId      == enumName2Id(literalStr(WHSLoadStatus)) &&
                          tmpStatus.EnumName    == whsWorkAuditTemplateTable.WorkAuditBreakStatus;
                break;

            case fieldNum(WHSWorkTable, ShipmentId):
                select firstonly EnumValue from tmpStatus
                    where tmpStatus.EnumId      == enumName2Id(literalStr(WHSShipmentStatus)) &&
                          tmpStatus.EnumName    == whsWorkAuditTemplateTable.WorkAuditBreakStatus;
                break;
        }

        if (tmpStatus.RecId == 0)
        {
            whsWorkAuditTemplateTable.WorkAuditBreakStatus = whsWorkAuditTemplateTable.orig().WorkAuditBreakStatus;
            throw error("@WAX4239");
        }

        return tmpStatus;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>