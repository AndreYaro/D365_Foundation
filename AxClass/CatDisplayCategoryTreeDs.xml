<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatDisplayCategoryTreeDs</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CatDisplayCategoryTreeDs extends CCFormTreeDatasourceEx
{
    // the parent and the node type for the DisplayCategory to create
    RecId                               m_parentRecId;
    int                                 m_dcNodeTypeToCreate;
    CatDisplayCategorySharedInfo        m_sharedData;
    boolean                             m_rebuildSubtreeOnCreate;

    #resAppl
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>created</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the required locking and calls the <c>super</c> method.
    /// </summary>
    void created()
    {
        CatDisplayCategoryTable tblDCategory;
        CatProcureCatalogTable  tblCatalog;
        EcoResCategoryHierarchy tblPHierarchy;
        EcoResCategory          tblERCategoryRoot;
        #EcoResCategoryDefaults

        ttsbegin;
            // lock the ProcureCategory root to prevent its tree structure from being modified
            select pessimisticlock firstonly RecId from tblERCategoryRoot
                join RecId from tblPHierarchy
                    where tblERCategoryRoot.CategoryHierarchy== tblPHierarchy.RecId
                        && tblERCategoryRoot.NestedSetLeft   == #ECORESROOTNESTEDLEFTVALUE
                join RecId from tblCatalog
                    where tblCatalog.ProcurementHierarchy == tblPHierarchy.RecId
                join RecId from tblDCategory
                    where tblDCategory.Catalog == tblCatalog.RecId
                        && tblDCategory.RecId == m_parentRecId
            ;

            super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTreeQueryRunEx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>QueryRun</c> object for the given parent node.
    /// </summary>
    /// <param name='_parentIsRoot'>
    /// Whether the new parent is the tree root node.
    /// </param>
    /// <param name='_parentValue'>
    /// The data value of the parent node.
    /// </param>
    /// <returns>
    /// The <c>QueryRun</c> object that finds all child nodes of the given parent node.
    /// </returns>
    QueryRun subTreeQueryRunEx(boolean _parentIsRoot, anytype _parentValue)
    {
        Query query;
        QueryBuildDataSource queryBuildDataSource;
        QueryRun queryRun;
        QueryBuildRange criteriaParentId;

        boolean isForRoot = false;

        queryRun = new QueryRun(this.getPackedQueryRun(isForRoot));
        query = queryRun.query();
        queryBuildDataSource = query.dataSourceTable(this.getFormDataSource(isForRoot).table());
        criteriaParentId = queryBuildDataSource.addRange(this.getParentPointerFieldForNonRoot());

        if (!queryBuildDataSource.sortFieldCount())
        {
            queryBuildDataSource.addSortField(this.getIdentifyingField(isForRoot));
        }

        if (_parentValue)
        {
            if (!_parentIsRoot)
            {
                criteriaParentId.value(queryValue(_parentValue));
            }
            else
            {   
                // Since we have a root node that isn't related to the current hierarchy, we have to filter
                // catalogs that don't have a parent node.
                criteriaParentId.value(queryValue(0));
            }
        }
        else
        {
            criteriaParentId.value(SysQuery::valueUnlimited());
        }

        query = this.buildDynaLinks(query);

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formTreeItemModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert either a [+] or a [-] in the text of the <c>FormTreeItem</c> depending on if the category is hidden
    /// </summary>
    /// <param name = "category">The category</param>
    /// <param name = "formTreeItem"The <c>FormTreeItem</c> that has been modified></param>
    protected void formTreeItemModified(Common category, FormTreeItem formTreeItem)
    {
        CatDisplayCategoryTable catDisplayCategory = category as CatDisplayCategoryTable;

        if (catDisplayCategory != null && formTreeItem != null)
        {
            if (catDisplayCategory.IsHidden == NoYes::Yes)
            {
                formTreeItem.text(strfmt("@SYS76498", "@SCM:EntityNotAssociated", formTreeItem.text()));
            }
            else
            {
                formTreeItem.text(strfmt("@SYS76498", "@SCM:EntityAssociated", formTreeItem.text()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataOutsideSubtreeToDeleteEx</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data for all nodes that must be deleted when the selected node is deleted.
    /// </summary>
    /// <returns>
    ///    A set of the data of a qualifying tree node.
    /// </returns>
    /// <remarks>
    ///    Gets data only for the qualifying nodes that are outside the subtree rooted at the currently
    ///    selected node.
    /// </remarks>
    Set getDataOutsideSubtreeToDeleteEx()
    {
        boolean         isForRoot;
        CatDisplayCategoryTable tblDisplayCategory;

        ;

        isForRoot       = this.treeItemIsRoot(tree.getSelection());
        tblDisplayCategory = this.getFormDataSource(isForRoot).cursor();
        return tblDisplayCategory.getAliasesOutsideSubtree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the given <paramref>_common</paramref> with needed information.
    /// </summary>
    /// <param name='_common'>
    /// The record whose fields will be initialized.
    /// </param>
    /// <returns>
    /// Returns the same <paramref>_common</paramref>, with data filled in.
    /// </returns>
    /// <remarks>
    /// Ideally data should be filled so that <paramref>_common</paramref>'s <c>validateWrite</c> will return true.
    /// </remarks>
    Common initValue(Common _common)
    {
        #CatDisplayCategory
        Common ret;
        CatDisplayCategoryTable tblDisplayCategory, parent;

        ret = super(_common);
        if (ret.TableId == tablenum(CatDisplayCategoryTable))
        {
            select forupdate firstonly * from parent
                where parent.RecId == m_parentRecId;
            if (parent)
            {
                tblDisplayCategory = ret;
                tblDisplayCategory.Catalog = parent.Catalog;
                tblDisplayCategory.Name = CatDisplayCategoryTable::findNonExistNameInCatalog(tblDisplayCategory.Catalog);

                // copy from parent
                tblDisplayCategory.UpdateType = parent.UpdateType;
                tblDisplayCategory.ParentCategory = parent.RecId;
                tblDisplayCategory.IsHidden = parent.IsHidden; // fixes bug#AX6:20714
                tblDisplayCategory.AncestorCategoryToCollapseTo = parent.AncestorCategoryToCollapseTo;
                // DO set SharedData - insert() will NOT do that for us.
                tblDisplayCategory.initValueWithSharedData(m_sharedData);
                // insert() will set TreeLevel, NestedSet values.

                switch (m_dcNodeTypeToCreate)
                {
                    case #CatDisplayCategory_NodeType_Manual:
                        tblDisplayCategory.TargetCategory = 0;
                        break;
                    default:
                        // we could handle #CatDisplayCategory_NodeType_Alias by using SharedData to find the value for TargetCategory.
                        // but since this code is never called to handle such case, let's not write that code.
                        throw warning(strfmt("@SYS134839", tblDisplayCategory.getNodeType()));
                }
            }
            else
            {
                throw warning("@SYS134840");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedEx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the UI when the selected node has been modified.
    /// </summary>
    /// <param name='_parentCategoryChanged'>
    /// A <c>boolean</c> value that indicates whether the selected node's parent has been changed.
    /// </param>
    /// <param name='_recreateSelectedNode'>
    /// A <c>boolean</c> value that indicates whether the selected node's should be recreated.
    /// </param>
    /// <remarks>
    /// Refreshes tree if the selected node's parent has been changed.
    /// Note:
    /// - if <paramref>_parentCategoryChanged</paramref> is true, <paramref>_recreateSelectedNode</paramref> will be ignored since the selected node will e recreated any way.
    /// - if <paramref>_parentCategoryChanged</paramref> is false, the selected node will be recreated if and only if <paramref>_recreateSelectedNode</paramref> is true.
    /// </remarks>
    void modifiedEx(boolean _parentCategoryChanged, boolean _recreateSelectedNode = false)
    {
        int idxCurrentRecord;
        boolean         isForRoot;
        CatDisplayCategoryTable tblDisplayCategory;
        int newParentIdx;
        RecId dataOfModifiedNode, newParentRecId;

        ;

        this.modified();

        if (_parentCategoryChanged)
        {
            isForRoot       = this.treeItemIsRoot(tree.getSelection());
            tblDisplayCategory = this.getFormDataSource(isForRoot).cursor();

            // again, tree.delete(tree.getSelection()) will change tblDisplayCategory (this...cursor())
            // also, buildSubTree would change the cursor to the record corresponding to newParentIdx, hence save current cursor BEFORE buildSubTree:
            dataOfModifiedNode = tblDisplayCategory.RecId;
            newParentRecId = tblDisplayCategory.ParentCategory;

            newParentIdx = this.findIdxByDataFromRoot(tblDisplayCategory.ParentCategory);

            // NOTE: perform this AFTER findIdxByDataFromRoot+buildSubTree
            // - immediately after this call, getFormDataSource(isForRoot).cursor() would have moved (to the record that's the parent of the getSelection)
            //   -- *even* though we assign getFormDataSource(isForRoot).cursor() to a temp var - the temp var's value is changed as well after calling below!!!
            // NOTE: delete *before* buildSubTree - in case the old parent is a descendant of new parent (then getSelection would be invalid after buildSubTree)
            tree.delete(tree.getSelection());

            if (newParentIdx)
            {
                basicRecId = dataOfModifiedNode; // the way to communicate with buildSubTree whose idx should it return
                idxCurrentRecord = this.buildSubTree(newParentIdx, newParentRecId, true);
                tree.select(this.findIdxByData(newParentIdx, dataOfModifiedNode));
            }
        }
        else if (_recreateSelectedNode)
        {
            this.recreateSelectedNode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
                    FormDataSource     _formDataSource,
                    FormTreeControl    _formTreeControl,
                    fieldId            _id,
                    fieldId            _parentId,
                    anytype            _txtField,

                    FormDataSource     _formDataSourceForTreeRoot,
                    fieldId            _idForTreeRoot,
                    anytype            _txtFieldForTreeRoot,

                    boolean            _showIdInDescription = true,
                    boolean            _useLastValue        = true,
                    fieldId             _id2                = 0)

    {
        super(
            _formDataSource,
            _formTreeControl,
            _id,
            _parentId,
            _txtField,

            _formDataSourceForTreeRoot,
            _idForTreeRoot,
            _txtFieldForTreeRoot,

            _showIdInDescription,
            _useLastValue,
            _id2
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>overlayImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the overlay image that is required, depending on whether the Category is hidden.
    /// </summary>
    /// <param name="_childRecord">
    ///    The current record.
    /// </param>
    /// <param name="formTreeItem">
    ///    The current formTreeItem, helps to set tree item properties based upon current treeitem state.
    /// </param>
    /// <returns>
    ///    The ID of the overlay image.
    /// </returns>
    int overlayImage(Common _childRecord = null, FormTreeItem formTreeItem = null)
    {
        CatDisplayCategoryTable tblDCategory = _childRecord;

        if (tblDCategory.IsHidden == NoYes::No
            && formTreeItem != null
            && tblDCategory.isCollapsedToAncestor())
        {
            formTreeItem.stateCut(true);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebuildSubtreeOnCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the sub-tree under the parent of the newly created node should be rebuilt.
    /// </summary>
    /// <returns>
    /// true if the sub-tree under the parent node of the newly created node should be rebuilt; otherwise,
    /// false.
    /// </returns>
    public boolean rebuildSubtreeOnCreate()
    {
        return m_rebuildSubtreeOnCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParamsForCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves information so that the <c>created</c> method, when called, will know what kind of node to create.
    /// </summary>
    /// <param name='_parent'>
    /// The parent node's <c>RecId</c> for the <c>created</c> method.
    /// </param>
    /// <param name='_dcNodeTypeToCreate'>
    /// The DisplayCategory node type for the <c>created</c> method.
    /// </param>
    /// <param name='_sharedData'>
    /// The <c>CatDisplayCategorySharedInfo</c> record for the <c>created</c> method.
    /// </param>
    /// <param name='_rebuildSubtreeOnCreate'>
    /// A boolean value that indicates if the subtree under the parent node of the newly created node should be rebuilt.
    /// </param>
    void setParamsForCreate(RecId _parent, int _dcNodeTypeToCreate, CatDisplayCategorySharedInfo _sharedData, boolean _rebuildSubtreeOnCreate)
    {
        m_parentRecId               = _parent;
        m_dcNodeTypeToCreate        = _dcNodeTypeToCreate;
        m_sharedData                = _sharedData;
        m_rebuildSubtreeOnCreate    = _rebuildSubtreeOnCreate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>