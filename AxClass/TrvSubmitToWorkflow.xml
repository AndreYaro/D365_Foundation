<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvSubmitToWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class TrvSubmitToWorkflow
{
    WorkflowVersionTable        workflowVersionTable;
    WorkflowComment             workflowComment;
    Common                      entity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run workflow submit dialog to get user comments.
    /// </summary>
    /// <param name = "ok">If set to true, dialog is not shown and the method returns immediately.</param>
    /// <returns>True if user clicks ok in the dialog or if 'ok' argument is set to true; otherwise, false.</returns>
    protected boolean dialogOk(boolean ok = false)
    {
        WorkflowSubmitDialog        workflowSubmitDialog;

        // If 'ok' is set to true or if there is no workflow config setup, return immediately without showing dialog.
        if (!ok && workflowVersionTable != null)
        {
            workflowSubmitDialog = WorkflowSubmitDialog::construct(workflowVersionTable);
            workflowSubmitDialog.run();

            // Get comments and return true if user clicks ok in the dialog.
            if (workflowSubmitDialog.parmIsClosedOK())
            {
                ok = true;
                workflowComment =  workflowSubmitDialog.parmWorkflowComment();
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowComment</Name>
				<Source><![CDATA[
    public WorkflowComment parmWorkflowComment(WorkflowComment _workflowComment = workflowComment)
    {
        workflowComment = _workflowComment;

        return workflowComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowVersionTable</Name>
				<Source><![CDATA[
    public WorkflowVersionTable parmWorkflowVersionTable(WorkflowVersionTable _workflowVersionTable = workflowVersionTable)
    {
        workflowVersionTable = _workflowVersionTable;

        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TrvSubmitToWorkflow submitToWorkflow;
        if (_args.record().TableId == tableNum(TrvExpTable))
        {
            submitToWorkflow = TrvSubmitExpenseReportToWorkflow::construct(_args.record(), _args.caller().getActiveWorkflowConfiguration());

            ExpenseIAntiCorruptionAttestation antiCorruptionAttestation = _args.caller() as ExpenseIAntiCorruptionAttestation;
            TrvExpTable trvExpTable;

            if(TrvExpenseHelper::isTrvExpMileageCalculationRevisedFlightEnabled())
            {
                trvExpTable = _args.record() as TrvExpTable;
                TrvExpTrans trvExpTrans;
                AmountCur amtBeforeCalc, amtAfterCalc;
                
                while select AmountCurr from trvExpTrans 
                    where trvExpTable.ExpNumber == trvExpTrans.ExpNumber
                    && trvExpTrans.ExpType == TrvExpType::Transport
                {
                    amtBeforeCalc += trvExpTrans.AmountCurr;
                }
                
                TrvMileageHelper::updateAllMileageLinesInExpenseReport(trvExpTable.ExpNumber);
                
                while select AmountCurr from trvExpTrans
                    where trvExpTable.ExpNumber == trvExpTrans.ExpNumber
                    && trvExpTrans.ExpType == TrvExpType::Transport
                {
                    amtAfterCalc += trvExpTrans.AmountCurr;
                }
                if(amtBeforeCalc != amtAfterCalc)
                {
                    Box::info("@Expense:MileageRatesUpdated");
                }
            }

            // This section is executed if the calling form has implemented the ExpenseIAntiCorruptionAttestation interface.
            if(antiCorruptionAttestation)
            {
                trvExpTable = _args.record() as TrvExpTable;
                TrvParameters trvParameters = TrvParameters::find();

                boolean showAntiCorruptionMessageBox = antiCorruptionAttestation.showAntiCorruptionAttestationInMessageBox();

                boolean showAntiCorruptionDialog = _args.record().TableId == tableNum(TrvExpTable) && // Confine to the Expense report scenario.
                                                   !trvExpTable.AntiCorruptionSubmitterFlag &&        // Ensure user has not asserted the anti-corruption policy.
                                                   !trvExpTable.validateAntiCorruption() &&           // Verify an anti-corruption infolog message has been displayed.
                                                   trvParameters.UseAntiCorruption &&                 // Ensure anti-corruption policy is set up.
                                                   showAntiCorruptionMessageBox;                      // Whether to show the anti-corruption messagebox.

                if(showAntiCorruptionDialog)
                {
                    DialogButton dialogButton = Box::yesNo(TrvAntiCorruptionLanguageText::getAttestationMessage(), DialogButton::No);

                    if(dialogButton == DialogButton::Yes)
                    {
                        ttsbegin;
                        trvExpTable.AntiCorruptionSubmitterFlag = NoYes::Yes;
                        trvExpTable.update();
                        ttscommit;  
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
        else if (_args.record().TableId == tableNum(TrvCashAdvance))
        {
            submitToWorkflow = TrvSubmitCashAdvanceToWorkflow::construct(_args.record(), _args.caller().getActiveWorkflowConfiguration());
        }
        else if (_args.record().TableId == tableNum(TrvRequisitionTable))
        {
            submitToWorkflow = TrvSubmitRequisitionToWorkflow::construct(_args.record(), _args.caller().getActiveWorkflowConfiguration());
        }
                
        boolean success = false;
        TrvIAsyncEnabled trvIAsyncEnabled = _args.caller() as TrvIAsyncEnabled;

        // If caller form is trvIAsyncEnabled, set asyncValidation parameter to true if the form has async enabled.
        success = submitToWorkflow.submitEntityToWorkflow(false, trvIAsyncEnabled ? trvIAsyncEnabled.parmAsyncEnabled() : false, trvIAsyncEnabled);
        
        // Callback on the calling form.
        TrvIWorkflowEnabledForm workflowEnabledForm = _args.caller() as TrvIWorkflowEnabledForm;

        if (success && workflowEnabledForm)
        {
            workflowEnabledForm.workflowActionDone(TrvWorkflowAction::Submit);
        }

        if (!success && workflowEnabledForm)
        {
            workflowEnabledForm.workflowActionFailed(TrvWorkflowAction::Submit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates the workflow.
    /// </summary>
    /// <returns>The ID of the workflow instance that will be used for correlation.</returns>
    public WorkflowCorrelationId submitToWorkflow()
    {
        WorkflowUser sUserId = this.getSubmitterUserId();

        return Workflow::activateFromWorkflowConfigurationId(this.parmWorkflowVersionTable().ConfigurationId, this.parmEntity().RecId, this.parmWorkflowComment(), NoYes::No, sUserId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEntity</Name>
				<Source><![CDATA[
    public Common parmEntity(Common _entity = entity)
    {
        entity = _entity;

        return entity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class based on the record and workflow information passed in.
    /// </summary>
    /// <param name = "_entity">The record that will be submitted to workflow.</param>
    /// <param name = "_workflowVersionTable">The record in workflow that is to be used in the submission.</param>
    /// <param name = "_workflowComment">The comment to be used/stored as part of the workflow submit.</param>
    protected void initialize(Common _entity, WorkflowVersionTable _workflowVersionTable = null, WorkflowComment _workflowComment = '')
    {
        if (!_workflowVersionTable)
        {
            _workflowVersionTable = Workflow::findWorkflowConfigurationToActivate(_entity);
        }

        this.parmEntity(_entity);
        this.parmWorkflowVersionTable(_workflowVersionTable);
        this.parmWorkflowComment(_workflowComment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitEntityToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submit entity to workflow.
    /// </summary>
    /// <param name = "bypassDialog">If this is set to true, workflow dialog to obtain user comments will be skipped.</param>
    /// <param name = "asyncValidation">
    /// If this is set to true and if bypassDialog is set to false, validations for submit will be done asynchronously.
    /// In all other cases, validations will not be done async.
    /// </param>
    /// <param name = "trvIAsyncEnabled">The async caller. Optional.</param>
    /// <returns>True if successful, otherwise false.</returns>
    public boolean submitEntityToWorkflow(boolean bypassDialog = false, boolean asyncValidation = false, TrvIAsyncEnabled trvIAsyncEnabled = null)
    {
        boolean success = false;

        // Checks whether the entity's approval status is up-to-date.
        if (this.validateApprovalStatus())
        {
            // Checks whether the workflow config is setup.
            if (this.parmWorkflowVersionTable().RecId == 0)
            {
                error("@SYS341909");
            }
            else if (bypassDialog)
            {
                // When there is no user interaction, do not use async approach.
                if (this.validateSubmit())
                {
                    success = this.submit();
                }
            }
            else
            {
                boolean proceedWithSubmission = false;

                if (asyncValidation)
                {
                    proceedWithSubmission = this.getCommentsAndHandleAsyncValidation(trvIAsyncEnabled);
                }
                else if (this.dialogOk())
                {
                    proceedWithSubmission = this.validateSubmit();
                }

                // If the validation has passed and the user chose to go ahead with submission, submit the document.
                if (proceedWithSubmission)
                {
                    success = this.submit();
                }
            }
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCommentsAndHandleAsyncValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Kick off async validation and display a dialog to obtain user comments parallely.
    /// </summary>
    /// <param name = "trvIAsyncCaller">The async caller. Optional.</param>
    /// <returns>True if user chose to submit and the record is valid; otherwise, false.</returns>
    private boolean getCommentsAndHandleAsyncValidation(TrvIAsyncEnabled trvIAsyncEnabled = null)
    {
        boolean valid = false;

        // Before starting the async validation, ensure that all async tasks in the async caller are complete.
        if (trvIAsyncEnabled)
        {
            trvIAsyncEnabled.waitForAllAsyncTasks();
        }

        System.Threading.CancellationTokenSource tokenSource = new System.Threading.CancellationTokenSource();
        System.Threading.Tasks.Task validationTask = this.doAsyncValidation(tokenSource); // Trigger validate asynchronously.

        // Show dialog for the user to enter comments.
        boolean dialogOk = this.dialogOk();

        if (dialogOk)
        {
            validationTask.Wait();
            AsyncTaskResult asyncTaskResult = AsyncTaskResult::getAsyncTaskResult(validationTask);
            [valid] = asyncTaskResult.getResult();

            if (!valid)
            {
                // Import and throw infolog messages.
                container infologData = asyncTaskResult.getInfologData();
                SysInfologEnumerator infologEnum = SysInfologEnumerator::newData(infologData);

                while (infologEnum.moveNext())
                {
                    infolog.add(infologEnum.currentException(), infologEnum.currentMessage(), infologEnum.currentHelpUrl());
                }
            }
        }
        else
        {
            tokenSource.Cancel();
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubmitterUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets workflow submitter user id of the entity in the system with the workflow submitted record.
    /// </summary>
    /// <returns>
    /// The submitter user id of the workflow
    /// </returns>
    abstract protected WorkflowUser getSubmitterUserId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateApprovalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current status of the entity in the system with the workflow submitted record.
    /// </summary>
    /// <returns>
    /// False if the status is different from the workflow submitted record. Otherwise, true.
    /// </returns>
    /// <remarks>
    /// Will be overridden by child.
    /// </remarks>
    abstract protected boolean validateApprovalStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Entity-specific submit logic.
    /// </summary>
    /// <returns>True if successful, otherwise false.</returns>
    /// <remarks>
    /// Will be overridden by child.
    /// </remarks>
    abstract protected boolean submit()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Entity-specific submit validation logic.
    /// </summary>
    /// <returns>True if successful, otherwise false.</returns>
    abstract protected boolean validateSubmit()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAsyncValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do the submit validation asynchronously.
    /// </summary>
    /// <param name = "_tokenSource">Cancellation token source</param>
    /// <returns>The task object returned by async call.</returns>
    abstract protected System.Threading.Tasks.Task doAsyncValidation(System.Threading.CancellationTokenSource _tokenSource)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>