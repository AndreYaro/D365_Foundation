<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqIntercompanyDemand</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqInterCompanyDemand</c> class enables the issue records in the vendor company to populate
///    based on intercompany planned orders from the customer company.
/// </summary>
class ReqIntercompanyDemand
{
    ReqInfolog reqInfolog;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeCovInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory dimensions.
    /// </summary>
    /// <param name="_covInventDim">
    /// The inventory dimensions record to initialize.
    /// </param>
    /// <param name="_reqPO">
    /// The intercompany planned order from the customer company.
    /// </param>
    /// <param name="_conversionUtil">
    /// A <c>ReqIntercompanyConversionUtil</c> class that should be used to convert the values from the customer to the vendor company.
    /// </param>
    protected void initializeCovInventDim(
        InventDim                       _covInventDim, 
        ReqPO                           _reqPO,
        ReqIntercompanyConversionUtil   _conversionUtil)
    {
        _covInventDim.InventSiteId = _conversionUtil.convertSiteId(_reqPO);
        _covInventDim.inventLocationId = _conversionUtil.convertWarehouseId(_reqPO);

        if (WHSInventEnabled::exist(_reqPO.ItemId))
        {
            _covInventDim.InventStatusId = WhsInvent::getDefaultStatusByParameters(_reqPO.ItemId, _covInventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReqTransFromIntercompanyReqPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills in the required fields on a intercompany demand requirement transaction based on the data from the planned order in the customer company.
    /// </summary>
    /// <param name="_reqTrans">
    /// The <c>ReqTrans</c> record to populate.
    /// </param>
    /// <param name="_reqPO">
    /// The intercompany planned order from the customer company.
    /// </param>
    /// <param name="_custCovInventDim">
    /// The customer company inventory dimensions record for the customer planned order.
    /// </param>
    /// <param name="_conversionUtil">
    /// A <c>ReqIntercompanyConversionUtil</c> class that should be used to convert the values from the customer to the vendor company.
    /// </param>
    /// <param name="_planVersion">
    /// The vendor (current) company plan version where the master planning takes place.
    /// </param>
    /// <returns>
    /// true if the demand was successfuly picked up and the <c>ReqTrans</c> fields were populated; otherwise, false.
    /// </returns>
    public boolean initReqTransFromIntercompanyReqPO(ReqTrans                      _reqTrans,
                                                     ReqPO                         _reqPO,
                                                     InventDim                     _custCovInventDim,
                                                     ReqIntercompanyConversionUtil _conversionUtil,
                                                     RefRecId                      _planVersion)
    {
        setPrefix(strfmt("@SYS333337", _reqPO.dataAreaId, _reqPO.RefId));

        ItemId itemIdInVendorCompany = _conversionUtil.convertItemId(_reqPO);
        if (!itemIdInVendorCompany)
        {
            return reqInfolog.checkFailed(strfmt("@SYS333338",
                                                 _conversionUtil.findProductNumber(_reqPO),
                                                 curext()));
        }

        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(itemIdInVendorCompany);
        InventDim           inventDimProductDimensions;

        // copy product dimensions
        inventDimGroupSetup.ecoResProductDimGroupSetup().copyProductDimensions(_custCovInventDim, inventDimProductDimensions);

        // check whether the desired combination was released as a product variant
        if (!InventTable::getDistinctProductRecId(itemIdInVendorCompany, inventDimProductDimensions))
        {
            return reqInfolog.checkFailed(strfmt("@SYS333339",
                                                 _conversionUtil.findProductNumber(_reqPO),
                                                 curext()));
        }

        InventDimParm inventDimParm;
        inventDimParm.initCovPrDimension(inventDimGroupSetup);
        InventDim covInventDim = inventDimProductDimensions;
        this.initializeCovInventDim(covInventDim, _reqPO, _conversionUtil);
        covInventDim.clearNotSelectedDim(inventDimParm);
        covInventDim = InventDim::findOrCreate(covInventDim);

        // check if all coverage planned dimension are specified
        List activeCoveragePlanFields = inventDimGroupSetup.activeCoveragePlanFields();

        ListEnumerator listEnumerator = activeCoveragePlanFields.getEnumerator();
        while (listEnumerator && listEnumerator.moveNext())
        {
            if (!covInventDim.(listEnumerator.current()))
            {
                return reqInfolog.checkFailed(strfmt("@SYS333340",
                                                     fieldId2pname(tablenum(InventDim), listEnumerator.current()),
                                                     _conversionUtil.findProductNumber(_reqPO),
                                                     curext()));
            }
        }

        ReqQty qty = _conversionUtil.convertQty(_reqPO);

        if (PdsGlobal::pdsIsCWItem(itemIdInVendorCompany))
        {
            // The CW quantity must be the same in the customer and vendor company even though the units might be different
            if (PdsCatchWeight::cwQty(itemIdInVendorCompany, qty) != _reqPO.PdsCWReqQty )
            {
                return reqInfolog.checkFailed(strfmt("@PDS2036",
                                                     _conversionUtil.findProductNumber(_reqPO),
                                                     _reqPO.dataAreaId,
                                                     curext()));
            }
        }

        _reqTrans.PlanVersion               = _planVersion;
        _reqTrans.ItemId                    = itemIdInVendorCompany;

        _reqTrans.CovInventDimId            = covInventDim.inventDimId;
        _reqTrans.Qty                       = -(qty);
        _reqTrans.ReqDate                   = _conversionUtil.convertReqDate(_reqPO);
        _reqTrans.RefType                   = ReqRefType::PlannedIntercompanyDemand;
        _reqTrans.IntercompanyPlannedOrder  = _reqPO.RecId;

        _reqTrans.RefId                     = strFmt("%1:%2", _reqPO.dataAreaId, _reqPO.RefId);

        _reqTrans.Level                     = InventDistinctProduct::find(_reqTrans.ItemId, _reqTrans.CovInventDimId).Level;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        reqInfolog = ReqInfolog::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqInfolog</Name>
				<Source><![CDATA[
    public ReqInfolog parmReqInfolog(reqInfolog _reqInfolog = reqInfolog)
    {
        reqInfolog = _reqInfolog;
        return reqInfolog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqIntercompanyDemand construct()
    {
        return new ReqIntercompanyDemand();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>