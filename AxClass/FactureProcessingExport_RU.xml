<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureProcessingExport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FactureProcessingExport_RU
{
    SalesTmpExportFactureProcessing_RU tmpFactureProcessing;

    NumberSeq   numberSeqCorrection;

    FactureExternalId_RU     correctFactureExtId;
    StartDate                taxPeriodFrom;
    EndDate                  taxPeriodTo;
    FactureDate_RU           factureDate;
    FactureJour_RU           factureJourOrig;
    SalesConfirmationDate_RU onPaymentConfirmationDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCorrection</Name>
				<Source><![CDATA[
    protected void createCorrection(SalesBookFactureProcessingType_RU _newProcessingType,
                                    FactureModule_RU                  _factureModule = FactureModule_RU::Cust)
    {
        FactureJour_RU                      jourSource,  correctionFacture;
        FactureTrans_RU                     transSource, correctionTrans;
        BookStructSmallVATAmounts_RU        bookTransAmount;
        TransDate                           logDateFrom, logDateTo;
        LineNum                             lineNum;
        Amount                              factureAmount, factureTaxAmount;

        SalesBookVATProcessLogTransOper_RU  processLogTransOper, processLogTransOperDate;
        SalesBookVATProcessLogTrans_RU      processLogTrans, processLogTransDate;
        SalesBookVATProcessParameters_RU    processParameters, processParametersDate;
        TransDate                           lastBookDate = SalesBookTable_RU::getLastClosedBook().ClosingDate;

        jourSource = this.findLastFacture(_newProcessingType);

        if (!jourSource)
        {
            return;
        }

        while select TransDate from  processLogTransOperDate
            group by TransDate
            where processLogTransOperDate.TransDate <= lastBookDate &&
                  processLogTransOperDate.Blocked   == NoYes::No    &&
                  ! processLogTransOperDate.CanceledRefRecId
            exists join processLogTransDate
                where processLogTransDate.RecId       == processLogTransOperDate.RefRecId    &&
                      processLogTransDate.FactureId   == jourSource.FactureId                &&
                      processLogTransDate.FactureDate == jourSource.FactureDate              &&
                     (processLogTransDate.TransType   == SalesPurchBookTransType_RU::Invoice ||
                      processLogTransDate.TransType   == SalesPurchBookTransType_RU::Facture ||
                      processLogTransDate.TransType   == SalesPurchBookTransType_RU::CreditNote)
            exists join processParametersDate
                where processParametersDate.RecId          == processLogTransOperDate.SalesBookVATProcessParameters_RU &&
                      processParametersDate.IncludeInBook  == NoYes::Yes
        {
            while select SettlementRecId, SettlementDate, PaymentRecIdRef, InvoiceRecIdRef, PaymentCompany, InvoiceCompany
                from processLogTrans
                where processLogTrans.FactureId   == jourSource.FactureId                &&
                      processLogTrans.FactureDate == jourSource.FactureDate              &&
                     (processLogTrans.TransType   == SalesPurchBookTransType_RU::Invoice ||
                      processLogTrans.TransType   == SalesPurchBookTransType_RU::Facture ||
                      processLogTrans.TransType   == SalesPurchBookTransType_RU::CreditNote)
                exists join RecId, TransDate from processLogTransOper
                    where processLogTransOper.RefRecId  == processLogTrans.RecId             &&
                          processLogTransOper.TransDate == processLogTransOperDate.TransDate &&
                          processLogTransOper.Blocked   == NoYes::No                         &&
                          ! processLogTransOper.CanceledRefRecId
                exists join RecId from processParameters
                    where processParameters.RecId         == processLogTransOper.SalesBookVATProcessParameters_RU &&
                          processParameters.IncludeInBook == NoYes::Yes
            {
                [logDateFrom, logDateTo] = BookDataCalc_RU::datePeriodBook(processLogTransOperDate.TransDate);

                correctionFacture.clear();
                correctionFacture.initFromExportFacture(factureJourOrig);
                this.initCorrectionJournalNum(correctionFacture);

                correctionFacture.FactureDate                   = factureDate;
                correctionFacture.FactureDate_External          = factureDate;
                correctionFacture.CorrectedFactureDate          = jourSource.FactureDate;
                //if jourSource facture is corrective then use original corrected period
                correctionFacture.CorrectedPeriod               = jourSource.CorrectedPeriod ? jourSource.CorrectedPeriod : logDateTo;
                correctionFacture.CorrectedFactureExternalId    = jourSource.FactureExternalId;
                correctionFacture.RefOriginalFacture            = jourSource.RefOriginalFacture;
                correctionFacture.Module                        = _factureModule;
                correctionFacture.FactureType                   = FactureType_RU::Facture;
                correctionFacture.ProcessingType                = jourSource.ProcessingType;
                correctionFacture.SettlementRecId               = processLogTrans.SettlementRecId;
                correctionFacture.PaymentRecID                  = processLogTrans.PaymentRecIdRef;
                correctionFacture.SettlementDate                = processLogTrans.SettlementDate;
                correctionFacture.insert(true);

                factureAmount    = 0;
                factureTaxAmount = 0;

                while select transSource
                    where transSource.FactureId == jourSource.FactureId &&
                          transSource.Module    == FactureModule_RU::Cust
                {
                    ++lineNum;
                    bookTransAmount = this.usedAmounts(jourSource.FactureId,
                                                       transSource.TaxCode,
                                                       transSource.DefaultDimension,
                                                       transSource.InventTransId,
                                                       logDateFrom,
                                                       logDateTo,
                                                       processLogTrans.InvoiceRecIdRef,
                                                       processLogTrans.PaymentRecIdRef,
                                                       processLogTrans.InvoiceCompany,
                                                       processLogTrans.PaymentCompany,
                                                       processLogTrans.SettlementRecId,
                                                       processLogTrans.SettlementDate);
                    correctionTrans.clear();
                    correctionTrans.data(transSource);
                    correctionTrans.FactureId     = correctionFacture.FactureId;
                    correctionTrans.Module        = correctionFacture.Module;
                    correctionTrans.LineNum       = lineNum;

                    if (bookTransAmount.taxAmountVAT())
                    {
                        [correctionTrans.LineAmount,
                         correctionTrans.vatValue]  = TaxData::amount2base_RU(transSource.TaxCode,
                                                                              jourSource.FactureDate,
                                                                              abs(bookTransAmount.taxAmountVAT()));
                    }
                    else
                    {
                        correctionTrans.LineAmount = bookTransAmount.amountInclVAT();
                    }

                    correctionTrans.LineAmount    = CurrencyExchangeHelper::curAmount(-correctionTrans.LineAmount, correctionFacture.CurrencyCode, correctionFacture.FactureDate, UnknownNoYes::Unknown, correctionTrans.ExchRate);
                    correctionTrans.TaxAmountMST  = -bookTransAmount.taxAmountVAT();
                    correctionTrans.LineAmountMST = -(bookTransAmount.amountInclVAT() - bookTransAmount.taxAmountVAT());
                    correctionTrans.vatAmountMST  = -bookTransAmount.taxAmountVAT();
                    correctionTrans.TaxAmount     = CurrencyExchangeHelper::curAmount(correctionTrans.TaxAmountMST, correctionFacture.CurrencyCode, correctionFacture.FactureDate, UnknownNoYes::Unknown, correctionTrans.ExchRate);
                    correctionTrans.vat           = correctionTrans.TaxAmount;
                    correctionTrans.Qty           = correctionTrans.LineAmount ? sign(correctionTrans.LineAmount) : 1;
                    correctionTrans.Price         = abs(correctionTrans.LineAmount);

                    if (correctionTrans.LineAmount != 0)
                    {
                        correctionTrans.insert();
                        factureAmount       += correctionTrans.LineAmount;
                        factureTaxAmount    += correctionTrans.TaxAmount;
                    }
                }

                correctionFacture.FactureAmount = factureAmount;
                correctionFacture.FactureTax    = factureTaxAmount;
                correctionFacture.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFactureStandard</Name>
				<Source><![CDATA[
    protected FactureJour_RU createFactureStandard(SalesBookFactureProcessingType_RU _processingType)
    {
        FactureJourCreate_RU        factureCreate;
        FactureEditLinesEngine_RU   linesEngine;
        FactureJour_RU              createdFacture;

        factureCreate = FactureJourCreate_RU::construct(FactureModule_RU::Cust, NoYes::Yes);
        linesEngine   = FactureEditLinesEngine_RU::construct(factureCreate,
                                                             FactureModule_RU::Cust,
                                                             NoYes::Yes);
        factureCreate.initParameters(NoYes::Yes,
                                     NoYes::No,
                                     Printout::After,
                                     factureJourOrig.PrintInMST,
                                     "",
                                     factureDate,
                                     factureJourOrig.CustVendInvoiceAccount,
                                     factureJourOrig.CurrencyCode,
                                     FactureType_RU::Facture,
                                     factureJourOrig.Consignee,
                                     factureJourOrig.Consignor,
                                     factureJourOrig.OffSessionId,
                                     "",
                                     "",
                                     dateNull(),
                                     factureJourOrig.DeliveryPostalAddress,
                                     factureJourOrig.FactureDate_External,
                                     factureJourOrig.NumberSequenceGroupId,
                                     factureJourOrig.FactureExternalId,
                                     factureJourOrig.FactureDate,
                                     factureJourOrig.FactureDate,
                                     factureJourOrig.CorrectionType);

        factureCreate.parmLanguageId(factureJourOrig.languageId());
        factureCreate.parmVATOnPayment(factureJourOrig.vatOnPayment);
        factureCreate.parmConfirmationDate(factureJourOrig.ConfirmationDate);
        factureCreate.parmExportDate(factureJourOrig.ExportDate);
        factureCreate.parmExportProcessing(NoYes::Yes);
        factureCreate.parmPackageDate(factureJourOrig.PackageDate);
        factureCreate.parmProcessingType(_processingType);

        linesEngine.insertJour(factureJourOrig);

        factureCreate.runOperation();
        createdFacture = factureCreate.getFactureJour();

        createdFacture.SourceExportFactureDate  = factureJourOrig.FactureDate;
        createdFacture.SourceExportFactureId    = factureJourOrig.FactureId;
        createdFacture.SourceExportFactureIdExt = factureJourOrig.FactureExternalId;
        createdFacture.update();

        return createdFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
    protected void end()
    {
        if (factureJourOrig.ProcessingType == SalesBookFactureProcessingType_RU::VATZero             ||
           factureJourOrig.ProcessingType == SalesBookFactureProcessingType_RU::VATZeroCorrection   ||
           factureJourOrig.ProcessingType == SalesBookFactureProcessingType_RU::OverdueConfirmation)
        {
            factureJourOrig.StatusChangeDate = this.onPaymentConfirmationDate();
        }
        else
        {
            factureJourOrig.StatusChangeDate = dateNull();
        }

        this.updateOnPayment();
        factureJourOrig.update();
        tmpFactureProcessing.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastFacture</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns last facture for passed processing type.
    /// </summary>
    /// <param name = "_processingType">
    ///     Procesing type wich facture find for.
    /// </param>
    /// <param name = "_dateFrom">
    ///     Select factures by facture date more then parm.
    /// </param>
    /// <param name = "_dateTo">
    ///     Select factures by facture date less then parm.
    /// </param>
    /// <returns>
    ///     Facture journal.
    /// </returns>
    /// <remarks>
    ///    This method can be overridden to identify what facture could be fo passed processing type.
    ///    The protected <c>FactureProcessingExport_RU::findLastFacture </c>method is
    ///    generally used to obtain last performed facture.
    /// </remarks>
    protected FactureJour_RU findLastFacture(SalesBookFactureProcessingType_RU _processingType, TransDate _dateFrom = dateNull(), TransDate _dateTo = dateMax())
    {
        FactureJour_RU       factureJourLast;
        Query                q;
        QueryBuildDataSource qbds;
        QueryRun             qr;
        boolean              run;

        q    = new Query();
        qbds = q.addDataSource(tablenum(FactureJour_RU));

        findOrCreateRange_W(qbds, fieldnum(FactureJour_RU, Module), queryValue(FactureModule_RU::Cust));
        findOrCreateRange_W(qbds, fieldnum(FactureJour_RU, FactureType), queryValue(FactureType_RU::Facture));
        findOrCreateRange_W(qbds, fieldnum(FactureJour_RU, SourceExportFactureId), factureJourOrig.FactureId);
        findOrCreateRange_W(qbds, fieldnum(FactureJour_RU, SourceExportFactureDate), queryValue(factureJourOrig.FactureDate));
        findOrCreateRange_W(qbds, fieldnum(FactureJour_RU, FactureDate), SysQuery::range(_dateFrom, _dateTo));

        qbds.addSortField(fieldnum(FactureJour_RU, FactureDate), SortOrder::Descending);
        qbds.addSortField(fieldnum(FactureJour_RU, FactureId),   SortOrder::Descending);

        qbds.firstOnly(true);

        switch (_processingType)
        {
            case SalesBookFactureProcessingType_RU::VATZeroCorrection       :
                qbds.addRange(fieldnum(FactureJour_RU, ProcessingType)).value(queryValue(SalesBookFactureProcessingType_RU::VATStandard));
                qbds.addRange(fieldnum(FactureJour_RU, ProcessingType)).value(queryValue(SalesBookFactureProcessingType_RU::VATStandardCorrection));
                run = true;
                break;

            case SalesBookFactureProcessingType_RU::VATStandardCorrection   :
                qbds.addRange(fieldnum(FactureJour_RU, ProcessingType)).value(queryValue(SalesBookFactureProcessingType_RU::VATZero));
                qbds.addRange(fieldnum(FactureJour_RU, ProcessingType)).value(queryValue(SalesBookFactureProcessingType_RU::VATZeroCorrection));
                run = true;
                break;

            case SalesBookFactureProcessingType_RU::OverdueConfirmation     :
            case SalesBookFactureProcessingType_RU::VATStandardCancellation :
                qbds.addRange(fieldnum(FactureJour_RU, ProcessingType)).value(queryValue(SalesBookFactureProcessingType_RU::VATStandardCorrection));
                qbds.addRange(fieldnum(FactureJour_RU, ProcessingType)).value(queryValue(SalesBookFactureProcessingType_RU::VATStandard));
                run = true;
                break;
        }

        if (run)
        {
            qr = new QueryRun(q);
            qr.next();
            factureJourLast = qr.getNo(1);

            //return original facture as last performed facture
            //original facture might be included into purch book
            //so it should be corrected
            if (_processingType == SalesBookFactureProcessingType_RU::VATStandardCorrection && !factureJourLast)
            {
                factureJourLast = factureJourOrig;
            }
        }
        return factureJourLast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        this.initTaxPeriod();
        this.initTmpCursor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrectionJournalNum</Name>
				<Source><![CDATA[
    private void initCorrectionJournalNum(FactureJour_RU    _factureJour)
    {
        DictType            dictType;
        NumberSeq_RU        externalNumberSeq;
        NumberSequenceTable numTable, numTableExternal;
        boolean             error = false;

        numberSeqCorrection = NumberSeq::newGetNum(CustParameters::numRefCustFactureId_RU(),false,true);

        if (! numberSeqCorrection)
        {
            dictType = new DictType(extendedtypenum(FactureId_RU));
            error(strfmt("@SYS53911", dictType.label(), "@SYS25196"));
            error    = true;
        }
        else
        {
            numTable = numberSeqCorrection.parmNumTableNum(numTable);
            if (numTable.Manual)
            {
                dictType = new DictType(extendedtypenum(FactureId_RU));
                error(strfmt("@GLS104926", dictType.label(), "@SYS25196"));
                error    = true;
            }
        }

        externalNumberSeq = NumberSeq_RU::newGetNum(CustParameters::numRefExportFactureExternalId_RU(), false, true);
        if (! externalNumberSeq)
        {
            dictType = new DictType(extendedtypenum(SalesExportFactureExternalId_RU));
            error(strfmt("@SYS53911", dictType.label(), "@SYS25196"));
            error    = true;
        }
        else
        {
            numTableExternal = externalNumberSeq.parmNumTableNum(numTableExternal);
            if (numTableExternal.Manual)
            {
                dictType = new DictType(extendedtypenum(SalesExportFactureExternalId_RU));
                error(strfmt("@GLS104926", dictType.label(), "@SYS25196"));
                error    = true;
            }
            if (! numTableExternal.Continuous)
            {
                dictType = new DictType(extendedtypenum(SalesExportFactureExternalId_RU));
                error(strfmt("@SYS26207", strfmt("@SYS70938", numTableExternal.NumberSequence, dictType.label())));
                error    = true;
            }
        }

        if (! error && ! correctFactureExtId) // factureExtId can be reused ID of deleted facture
        {
            _factureJour.FactureExternalId = externalNumberSeq.num();
        }

        if (! error && correctFactureExtId)
        {
            if (NumberSequenceList::exist(numTableExternal.RecId, NumStatus::Free, correctFactureExtId))
            {
                externalNumberSeq.useNumFromList(numTableExternal, correctFactureExtId);
                _factureJour.FactureExternalId = correctFactureExtId;
            }
            else
            {
                error(strfmt("@GLS104927", correctFactureExtId, tableid2pname(tablenum(NumberSequenceList)), tablestr(NumberSequenceList)));
                error = true;
            }
        }

        if (error)
        {
            throw error("@SYS26077");
        }

        _factureJour.FactureId         = numberSeqCorrection.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxPeriod</Name>
				<Source><![CDATA[
    protected void initTaxPeriod()
    {
        TransDate   closingDate;

        taxPeriodFrom = dateNull();
        taxPeriodTo   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        closingDate = SalesBookTable_RU::getLastClosedBook().ClosingDate;
        if (closingDate)
        {
            [taxPeriodFrom, taxPeriodTo] = BookDataCalc_RU::datePeriodBook(closingDate + 1);
        }

        factureDate = taxPeriodTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpCursor</Name>
				<Source><![CDATA[
    abstract protected  void initTmpCursor()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newType</Name>
				<Source><![CDATA[
    protected SalesBookFactureProcessingType_RU newType()
    {
        return SalesBookFactureProcessingType_RU::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPaymentConfirmationDate</Name>
				<Source><![CDATA[
    SalesConfirmationDate_RU onPaymentConfirmationDate(SalesConfirmationDate_RU _onPaymentConfirmationDate = onPaymentConfirmationDate)
    {
        onPaymentConfirmationDate = _onPaymentConfirmationDate;
        return onPaymentConfirmationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpFactureProcessing</Name>
				<Source><![CDATA[
    final void parmTmpFactureProcessing(SalesTmpExportFactureProcessing_RU _tmpFactureProcessing)
    {
        tmpFactureProcessing = _tmpFactureProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingOperationType</Name>
				<Source><![CDATA[
    abstract protected void processingOperationType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        while (tmpFactureProcessing)
        {
            ttsbegin;
            factureJourOrig = tmpFactureProcessing.factureJour(true);
            if (this.validateNewStatus(this.newType()))
            {
                this.processingOperationType();
                this.end();
            }
            ttscommit;
            next tmpFactureProcessing;
        }

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00026, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOnPayment</Name>
				<Source><![CDATA[
    void updateOnPayment()
    {
        VATOnPayment_RU  vatOnPayment = factureJourOrig.StatusChangeDate ? NoYes::Yes : NoYes::No;
        CustInvoiceJour  custInvoiceJour;
        CustInvoiceJour_RU custInvoiceJourRU;
        RecordSortedList custInvoiceJourList;

        ttsbegin;

        custInvoiceJourList = factureJourOrig.invoiceJourSortedList();
        while (custInvoiceJourList.next(custInvoiceJour))
        {
            custInvoiceJourRU = CustInvoiceJour_RU::findByCustInvoiceJour(custInvoiceJour.RecId, true);

            custInvoiceJourRU.VATOnPayment_RU = vatOnPayment;

            if (custInvoiceJourRU == null)
            {
                custInvoiceJourRU.CustInvoiceJour = custInvoiceJour.RecId;
                custInvoiceJourRU.insert();
            }
            else
            {
                custInvoiceJourRU.update();
            }
        }

        factureJourOrig.vatOnPayment = vatOnPayment;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>usedAmounts</Name>
				<Source><![CDATA[
    protected BookStructSmallVATAmounts_RU usedAmounts(FactureId_RU     _factureId,
                                                       TaxCode          _taxCode,
                                                       DimensionDefault _defaultDimension,
                                                       InventTransId    _inventTransId,
                                                       StartDate        _dateFrom,
                                                       EndDate          _dateTo,
                                                       RefRecId         _transRecId,
                                                       RefRecId         _offsetRecId,
                                                       CompanyId        _transCompany,
                                                       CompanyId        _offsetCompany,
                                                       RefRecId         _settlementRecId,
                                                       TransDate        _settlementDate)
    {
        SalesBookVATProcessLogTransOper_RU  processLogTransOper;
        SalesBookVATProcessLogTrans_RU      processLogTrans;
        BookStructSmallVATAmounts_RU        amounts;

        amounts = new BookStructSmallVATAmounts_RU();

        select sum(AmountLiableToVAT), sum(TaxAmount) from processLogTransOper
            where processLogTransOper.DefaultDimension == _defaultDimension &&
                  processLogTransOper.TaxCode          == _taxCode          &&
                  processLogTransOper.Blocked          == NoYes::No         &&
                  processLogTransOper.BlockedAuto      == NoYes::No         &&
                  processLogTransOper.CanceledRefRecId == 0                 &&
                  processLogTransOper.InventTransId    == _inventTransId    &&
                  processLogTransOper.TransDate        >= _dateFrom         &&
                  processLogTransOper.TransDate        <= _dateTo
        exists join processLogTrans
            where processLogTrans.RecId           == processLogTransOper.RefRecId &&
                  processLogTrans.FactureId       == _factureId                   &&
                  processLogTrans.InvoiceRecIdRef == _transRecId                  &&
                  processLogTrans.PaymentRecIdRef == _offsetRecId                 &&
                  processLogTrans.PaymentCompany  == _offsetCompany               &&
                  processLogTrans.InvoiceCompany  == _transCompany                &&
                  processLogTrans.SettlementRecId == _settlementRecId             &&
                  processLogTrans.SettlementDate  == _settlementDate;

        amounts.addAmounts(processLogTransOper.AmountLiableToVAT + processLogTransOper.TaxAmount,
                           processLogTransOper.AmountLiableToVAT,
                           processLogTransOper.TaxAmount);
        return amounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNewStatus</Name>
				<Source><![CDATA[
    protected boolean validateNewStatus(SalesBookFactureProcessingType_RU _processingType)
    {
        FactureTrans_RU factureTrans;
        boolean ret = true;
        str     errStr;
        #define.blank(' ')

        select firstonly RecId from factureTrans
            where factureTrans.FactureLineType == FactureLineType_RU::InvoiceLine &&
                  factureTrans.vatType         == VATType_RU::NonLiable           &&
                  factureTrans.FactureId       == factureJourOrig.FactureId       &&
                  factureTrans.Module          == factureJourOrig.Module;

        if (factureTrans.RecId != 0)
        {
            errStr = strfmt("@GLS102589", factureJourOrig.FactureExternalId) + "@SYS35672" +  #blank + "@GLS101228";
            ret = checkFailed(errStr);
        }

        if ((_processingType == SalesBookFactureProcessingType_RU::VATZero              ||
             _processingType == SalesBookFactureProcessingType_RU::VATZeroCorrection    ||
             _processingType == SalesBookFactureProcessingType_RU::OverdueConfirmation) &&
             this.onPaymentConfirmationDate())
        {
            if (!PurchBookTable_RU::canProcessDate(this.onPaymentConfirmationDate()))
            {
                ret = checkFailed(strfmt("@GLS104853", factureJourOrig.FactureExternalId, factureJourOrig.FactureDate));
            }

            if (!SalesBookTable_RU::canProcessDate(this.onPaymentConfirmationDate()))
            {
                ret = checkFailed(strfmt("@GLS101326", factureJourOrig.FactureExternalId, factureJourOrig.FactureDate));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static FactureProcessingExport_RU construct(SalesTmpExportFactureProcessing_RU _tmpFactureProcessing,
                                                NoYes                              _cancelOperationType)
    {
        FactureProcessingExport_RU ret;

        if (_cancelOperationType == NoYes::No)
        {
            ret = new FactureProcessingExportOperation_RU();
        }
        else
        {
            ret = new FactureProcessingExportCancel_RU();
        }

        ret.parmTmpFactureProcessing(_tmpFactureProcessing);
        ret.init();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>