<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransPreviewDP_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransPreviewDP_RU</c> class is used to process
/// the business logic for the  <c>LedgerTransPreview_RU</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(LedgerTransPreview_RU)),
    SRSReportParameterAttribute(classstr(LedgerTransPreviewContract_RU))
]
public class LedgerTransPreviewDP_RU extends SrsReportDataProviderPreProcessTempDB
{
    LedgerTransPreviewTmp_RU    ledgerTransPreviewTmp_RU;

    AmountMST                   amountMST;
    AmountCur                   amountCur;
    AmountMSTSecondary          amountMSTSecondary;
    AmountCurDebit              amountCurDebit;
    AmountCurCredit             amountCurCredit;
    boolean                     mainAccountsOnly;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerTransPreviewTmp_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the <c>LedgerTransPreviewTmp_RU</c> temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>LedgerTransPreviewTmp_RU</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerTransPreviewTmp_RU))
    ]
    public LedgerTransPreviewTmp_RU getLedgerTransPreviewTmp_RU()
    {
        select ledgerTransPreviewTmp_RU;
        return ledgerTransPreviewTmp_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserLedgerTransPreviewTmp_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts all the values into the <c>ledgerTransPreviewTmp_RU</c> temporary table.
    /// </summary>
    /// <param name="_isLedgerTrans">
    /// True - if add Trans, False- if add Journal
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// Passes <c>LedgerJournalTrans</c> table object.
    /// </param>
    /// <param name="_ledgerTransPreviewLocal">
    /// Passes <c>TmpLedgerTransPreview_RU</c> table object.
    /// </param>
    /// <param name="_ledgerJournalTable">
    /// Passes <c>LedgerJournalTable</c> table object.
    /// </param>
    private void inserLedgerTransPreviewTmp_RU( boolean                     _isLedgerTrans,
                                                LedgerJournalTrans          _ledgerJournalTrans,
                                                TmpLedgerTransPreview_RU    _ledgerTransPreviewLocal,
                                                LedgerJournalTable          _ledgerJournalTable )
    {
        ledgerTransPreviewTmp_RU.IsLedgerTrans              = _isLedgerTrans;
        ledgerTransPreviewTmp_RU.Voucher                    = _ledgerTransPreviewLocal.Voucher;
        ledgerTransPreviewTmp_RU.TransDate                  = _ledgerTransPreviewLocal.TransDate;
        ledgerTransPreviewTmp_RU.JournalNumber              = _ledgerJournalTable.JournalNum;
        ledgerTransPreviewTmp_RU.JournalName                = _ledgerJournalTable.Name;

        if (mainAccountsOnly)
        {
            ledgerTransPreviewTmp_RU.TransDimensionDisplayValue = _ledgerTransPreviewLocal.TransMainAccountNum;
            ledgerTransPreviewTmp_RU.AccountNumCorr_RU          = _ledgerTransPreviewLocal.TransMainAccountNumCorr;
        }
        else
        {
            ledgerTransPreviewTmp_RU.TransDimensionDisplayValue = _ledgerTransPreviewLocal.DimensionDisplayValue;
            ledgerTransPreviewTmp_RU.AccountNumCorr_RU          = _ledgerTransPreviewLocal.DimensionDisplayValueCorr;
        }

        ledgerTransPreviewTmp_RU.TransactionTxt             = _ledgerTransPreviewLocal.Txt;
        ledgerTransPreviewTmp_RU.AmountMST                  = amountMST;
        ledgerTransPreviewTmp_RU.CurrencyCode               = _ledgerTransPreviewLocal.CurrencyCode;
        ledgerTransPreviewTmp_RU.AmountCur                  = amountCur;
        ledgerTransPreviewTmp_RU.AmountMSTSecond            = amountMSTSecondary;

        ledgerTransPreviewTmp_RU.AccountType                        = _ledgerJournalTrans.AccountType;
        ledgerTransPreviewTmp_RU.AccountDisplay                     = LedgerDimensionFacade::getDisplayValueForLedgerDimension(_ledgerJournalTrans.LedgerDimension);
        ledgerTransPreviewTmp_RU.DimensionDisplayValue              = _ledgerJournalTrans.defaultDimensionDisplay_RU();
        ledgerTransPreviewTmp_RU.Txt                                = _ledgerJournalTrans.Txt;
        ledgerTransPreviewTmp_RU.JournalCurrencyCode                = _ledgerJournalTrans.CurrencyCode;
        ledgerTransPreviewTmp_RU.AmountCurDebit                     = amountCurDebit;
        ledgerTransPreviewTmp_RU.AmountCurCredit                    = amountCurCredit;
        ledgerTransPreviewTmp_RU.OffsetAccountType                  = _ledgerJournalTrans.OffsetAccountType;
        ledgerTransPreviewTmp_RU.OffsetAccount                      = LedgerDimensionFacade::getDisplayValueForLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension);
        ledgerTransPreviewTmp_RU.OffsetDefaultDimensionDisplay_RU   = _ledgerJournalTrans.offsetDefaultDimensionDisplay_RU();
        ledgerTransPreviewTmp_RU.TransMainAccountNum                = _ledgerTransPreviewLocal.TransMainAccountNum;
        ledgerTransPreviewTmp_RU.TransMainAccountNumCorr            = _ledgerTransPreviewLocal.TransMainAccountNumCorr;
        ledgerTransPreviewTmp_RU.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        LedgerJournalTrans          ledgerJournalTrans;
        TmpLedgerTransPreview_RU    ledgerTransPreviewLocal;
        LedgerJournalTable          ledgerJournalTable;
        SRSReportRunPermission      permission;
        boolean                     showJournal;
        boolean                     showTrans;
        recId                       tmpTableDataRecId;
        Voucher                     voucher;
        TransDate                   transDate;
        QueryRun                    qr;
        LedgerTransPreviewContract_RU contract = this.parmDataContract() as LedgerTransPreviewContract_RU;
        tmpTableDataRecId = contract.parmTmpTableDataRecId();
        permission = new SRSReportRunPermission();
        permission.assert();
        ledgerTransPreviewLocal = SRSTmpTblMarshaller::getTmpTbl(tmpTableDataRecId);
        SRSTmpTblMarshaller::deleteTmpTblData(tmpTableDataRecId);
        CodeAccessPermission::revertAssert();

        showJournal        = contract.parmShowJournal();
        showTrans          = contract.parmShowTrans();
        mainAccountsOnly   = contract.parmMainAccountsOnly();

        ledgerJournalTable = LedgerJournalTable::find(ledgerTransPreviewLocal.JournalNumber);
        qr  = new QueryRun(this.parmQuery());
        qr.setCursor(ledgerTransPreviewLocal);
        while (qr.next())
        {
            ledgerTransPreviewLocal = qr.get(tableNum(TmpLedgerTransPreview_RU));
            if (voucher   != ledgerTransPreviewLocal.Voucher ||
                transDate != ledgerTransPreviewLocal.TransDate)
            {
                if (voucher)
                {
                    if (showTrans)
                    {
                        amountMST          = 0;
                        amountCur          = 0;
                        amountMSTSecondary = 0;
                    }
                }
                if (showJournal)
                {
                    amountCurCredit = 0;
                    amountCurDebit  = 0;

                    while select ledgerJournalTrans
                        where ledgerJournalTrans.Voucher   == ledgerTransPreviewLocal.Voucher &&
                              ledgerJournalTrans.TransDate == ledgerTransPreviewLocal.TransDate
                    {
                        amountCurCredit = ledgerJournalTrans.AmountCurCredit;
                        amountCurDebit  = ledgerJournalTrans.AmountCurDebit;
                        this.inserLedgerTransPreviewTmp_RU(true, ledgerJournalTrans, ledgerTransPreviewLocal, ledgerJournalTable);
                    }
                }

                voucher   = ledgerTransPreviewLocal.Voucher;
                transDate = ledgerTransPreviewLocal.TransDate;
            }

            if (showTrans)
            {
                amountMST           = ledgerTransPreviewLocal.AmountMST;
                amountCur           = ledgerTransPreviewLocal.AmountCur;
                amountMSTSecondary  = ledgerTransPreviewLocal.AmountMSTSecond;
                this.inserLedgerTransPreviewTmp_RU(false, null, ledgerTransPreviewLocal, ledgerJournalTable);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>