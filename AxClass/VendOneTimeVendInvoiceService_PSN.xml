<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOneTimeVendInvoiceService_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is a service class for one-time vendor process.
/// </summary>
class VendOneTimeVendInvoiceService_PSN
{
    FirstName                         personFirstName;
    MiddleName                        personMiddleName;
    LastName                          personLastName;
    BankIBAN                          bankIBAN;
    BankAccount                       bankAccountNumber;
    BankRegNum                        bankRoutingNumber;
    SWIFTNo                           bankSWIFTNo;
    VendBankAccountId                 bankAccountId;
    VendAccount                       vendAccount;
    VendTable                         vendTable;
    VendGroupId                       vendGroupId;
    TaxIDType                         taxIDType;
    Tax1099RegNum                     tax1099RegNum;
    DirPartyName                      organizationName;
    DirPartyBaseType                  vendRecordType;
    LogisticsPostalAddress            logisticsPostalAddress;
    LogisticsAddressStreet            logisticsAddressStreet;
    VendOneTimeVendInvoiceForm_PSN    vendOneTimeVendInvoiceForm;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyDataFromDefaultVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies all vendor information from the default vendor on the vendOneTimeInvoiceForm.
    /// </summary>
    protected void copyDataFromDefaultVendor()
    {
        VendTable    defaultVendTable;

        // Vendor contact information
        defaultVendTable = vendOneTimeVendInvoiceForm.parmDefaultVendTable();
        this.createVendContactInformation(vendTable, defaultVendTable);

        // Vendor profile
        vendTable.SmallBusiness  = defaultVendTable.SmallBusiness;
        vendTable.BidOnly        = defaultVendTable.BidOnly;
        vendTable.HUBZone        = defaultVendTable.HUBZone;

        unchecked(Uncheck::TableSecurityPermission)
        {
            vendTable.LocallyOwned   = defaultVendTable.LocallyOwned;
            vendTable.MinorityOwned  = defaultVendTable.MinorityOwned;
            vendTable.FemaleOwned    = defaultVendTable.FemaleOwned;
            vendTable.EthnicOriginId = defaultVendTable.EthnicOriginId;
            vendTable.VeteranOwned   = defaultVendTable.VeteranOwned;
            vendTable.DisabledOwned  = defaultVendTable.DisabledOwned;
        }

        // Invoice information
        vendTable.InvoiceAccount            = defaultVendTable.InvoiceAccount;
        vendTable.numberSequenceGroup       = defaultVendTable.numberSequenceGroup;
        vendTable.VendPriceToleranceGroupId = defaultVendTable.VendPriceToleranceGroupId;
        vendTable.VendExceptionGroup        = defaultVendTable.VendExceptionGroup;
        vendTable.TaxGroup                  = defaultVendTable.TaxGroup;
        vendTable.OverrideSalesTax          = defaultVendTable.OverrideSalesTax;
        vendTable.InclTax                   = defaultVendTable.InclTax;
        vendTable.VATNum                    = defaultVendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID);
        vendTable.TaxWithholdCalculate      = defaultVendTable.TaxWithholdCalculate;
        vendTable.TaxWithholdGroup          = defaultVendTable.TaxWithholdGroup;
        vendTable.OffsetAccountType         = defaultVendTable.OffsetAccountType;
        vendTable.OffsetLedgerDimension     = defaultVendTable.OffsetLedgerDimension;
        vendTable.FreightZone               = defaultVendTable.FreightZone;
        vendTable.DlvTerm                   = defaultVendTable.DlvTerm;
        vendTable.DlvMode                   = defaultVendTable.DlvMode;
        vendTable.DestinationCodeId         = defaultVendTable.DestinationCodeId;

        // Purchasing demographics
        vendTable.Currency          = defaultVendTable.Currency;
        vendTable.LineOfBusinessId  = defaultVendTable.LineOfBusinessId;
        vendTable.ContactPersonId   = defaultVendTable.ContactPersonId;
        vendTable.MainContactWorker = defaultVendTable.MainContactWorker;
        vendTable.SegmentId         = defaultVendTable.SegmentId;
        vendTable.SubsegmentId      = defaultVendTable.SubsegmentId;
        vendTable.Memo              = defaultVendTable.Memo;
        vendTable.CompanyChainId    = defaultVendTable.CompanyChainId;

        // Payment
        vendTable.PaymId           = defaultVendTable.PaymId;
        vendTable.PaymDayId        = defaultVendTable.PaymDayId;
        vendTable.PaymTermId       = defaultVendTable.PaymTermId;
        vendTable.PaymMode         = defaultVendTable.PaymMode;
        vendTable.PaymSpec         = defaultVendTable.PaymSpec;
        vendTable.PaymSched        = defaultVendTable.PaymSched;
        vendTable.CashDisc         = defaultVendTable.CashDisc;
        vendTable.UseCashDisc      = defaultVendTable.UseCashDisc;
        vendTable.DefaultDimension = defaultVendTable.DefaultDimension;
        vendTable.BankAccount      = vendOneTimeVendInvoiceForm.parmBankAccountId();

        // Tax 1099
        vendTable.Tax1099Reports         = defaultVendTable.Tax1099Reports;
        vendTable.W9                     = defaultVendTable.W9;
        vendTable.W9Included             = defaultVendTable.W9Included;
        vendTable.Tax1099Fields          = defaultVendTable.Tax1099Fields;
        vendTable.Tax1099NameChoice      = defaultVendTable.Tax1099NameChoice;
        vendTable.ForeignEntityIndicator = defaultVendTable.ForeignEntityIndicator;
        vendTable.DBA                    = defaultVendTable.DBA;
        vendTable.Tax1099NameChoice      = defaultVendTable.Tax1099NameChoice;
        vendTable.NameControl            = defaultVendTable.NameControl;
        vendTable.Tax1099RegNum          = vendOneTimeVendInvoiceForm.parmTax1099RegNum();
        vendTable.TaxIDType              = vendOneTimeVendInvoiceForm.parmTaxIDType();

        // Miscellaneous
        vendTable.CreditRating          = defaultVendTable.CreditRating;
        vendTable.CreditMax             = defaultVendTable.CreditMax;
        vendTable.ItemBuyerGroupId      = defaultVendTable.ItemBuyerGroupId;
        vendTable.Blocked               = defaultVendTable.Blocked;
        vendTable.BlockedReleaseDate    = defaultVendTable.BlockedReleaseDate;
        vendTable.TAMRebateGroupID      = defaultVendTable.TAMRebateGroupID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>VendBankAccount</c> record for one-time vendor.
    /// </summary>
    private void createVendBankAccount()
    {
        VendBankAccount vendBankAccount;

        if (vendOneTimeVendInvoiceForm.parmBankAccountId())
        {
            ttsBegin;

            vendBankAccount.VendAccount     = vendOneTimeVendInvoiceForm.parmVendAccount();
            vendBankAccount.AccountID       = vendOneTimeVendInvoiceForm.parmBankAccountId();
            vendBankAccount.AccountNum      = vendOneTimeVendInvoiceForm.parmBankAccountNumber();
            vendbankAccount.SWIFTNo         = vendOneTimeVendInvoiceForm.parmBankSWIFTNo();
            vendBankAccount.BankIBAN        = vendOneTimeVendInvoiceForm.parmBankIBAN();
            vendBankAccount.RegistrationNum = vendOneTimeVendInvoiceForm.parmBankRoutingNumber();

            vendBankAccount.insert();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendContactInformation</Name>
				<Source><![CDATA[
    private void createVendContactInformation(VendTable _vendTable, VendTable _defaultVendTable)
    {
        DirParty                dirParty;
        DirPartyContactInfoView dirPartyContactInfoView, dirPartyContactInfoViewAdd;

        while select LocationName, Locator, Type, IsPrimary, LocatorExtension from dirPartyContactInfoView
            where dirPartyContactInfoView.Party == _defaultVendTable.Party
        {
            dirPartyContactInfoViewAdd.LocationName     = dirPartyContactInfoView.LocationName;
            dirPartyContactInfoViewAdd.Locator          = dirPartyContactInfoView.Locator;
            dirPartyContactInfoViewAdd.Type             = dirPartyContactInfoView.Type;
            dirPartyContactInfoViewAdd.Party            = _vendTable.Party;
            dirPartyContactInfoViewAdd.IsPrimary        = dirPartyContactInfoView.IsPrimary;
            dirPartyContactInfoViewAdd.LocatorExtension = dirPartyContactInfoView.LocatorExtension;

            dirParty = DirParty::constructFromPartyRecId(_vendTable.Party);
            dirParty.createOrUpdateContactInfo(dirPartyContactInfoViewAdd);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendOrganization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record in the <c>DirOrganization</c> table for one-time vendor.
    /// </summary>
    /// <returns>
    /// The record ID of a record in the <c>DirOrganization</c> table.
    /// </returns>
    private RefRecId createVendOrganization()
    {
        DirOrganization        dirOrganization;
        LogisticsLocation      logisticsLocationForVendor;
        LogisticsPostalAddress logisticsPostalAddressForVendor;

        ttsbegin;

        dirOrganization.clear();
        dirOrganization.Name = vendOneTimeVendInvoiceForm.parmOrganizationName();
        dirOrganization.insert();

        // Creating vendor address records
        logisticsLocationForVendor = LogisticsLocation::create(vendOneTimeVendInvoiceForm.parmOrganizationName());

        DirPartyLocationContract partyLocationContract = DirPartyLocationContract::constructForPartyLocation(dirOrganization.RecId, logisticsLocationForVendor.RecId);
        partyLocationContract.parmIsPostalAddress(true);
        partyLocationContract.parmIsPrimary(true);
        partyLocationContract.parmIsPrivate(false);
        partyLocationContract.parmRoleIds([LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Business).RecId]);

        DirParty::createOrUpdateLocation(partyLocationContract);

        logisticsPostalAddressForVendor.clear();
        logisticsPostalAddressForVendor           = vendOneTimeVendInvoiceForm.parmLogisticsPostalAddress();
        logisticsPostalAddressForVendor.Location  = logisticsLocationForVendor.RecId;
        logisticsPostalAddressForVendor.ValidFrom = DateTimeUtil::utcNow();
        logisticsPostalAddressForVendor.ValidTo   = DateTimeUtil::maxValue();
        logisticsPostalAddressForVendor.insert();

        ttscommit;

        return dirOrganization.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendPerson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record in the <c>DirPerson</c> table for one-time vendor.
    /// </summary>
    /// <returns>
    /// The record ID of a record in the <c>DirPerson</c> table.
    /// </returns>
    private RefRecId createVendPerson()
    {
        DirPerson                 dirPerson;
        DirPersonName             dirPersonName;
        LogisticsLocation         logisticsLocationForContact;
        LogisticsPostalAddress    logisticsPostalAddressForContact;

        ttsBegin;

        // Creating contact person party records
        dirPerson.clear();
        dirPerson.initValue();
        dirPerson.Name = this.getPersonName();
        dirPerson.insert();

        dirPersonName.clear();
        dirPersonName.FirstName  = vendOneTimeVendInvoiceForm.parmPersonFirstName();
        dirPersonName.MiddleName = vendOneTimeVendInvoiceForm.parmPersonMiddleName();
        dirPersonName.LastName   = vendOneTimeVendInvoiceForm.parmPersonLastName();
        dirPersonName.Person     = dirPerson.RecId;
        dirPersonName.ValidFrom  = DateTimeUtil::utcNow();
        dirPersonName.ValidTo    = DateTimeUtil::maxValue();
        dirPersonName.insert();

        // Creating contact person address records
        logisticsLocationForContact = LogisticsLocation::create(dirPerson.Name);

        DirPartyLocationContract partyLocationContract = DirPartyLocationContract::constructForPartyLocation(dirPerson.RecId, logisticsLocationForContact.RecId);
        partyLocationContract.parmIsPostalAddress(true);
        partyLocationContract.parmIsPrimary(true);
        partyLocationContract.parmIsPrivate(false);
        partyLocationContract.parmRoleIds([LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Business).RecId]);

        DirParty::createOrUpdateLocation(partyLocationContract);

        logisticsPostalAddressForContact.clear();
        logisticsPostalAddressForContact           = vendOneTimeVendInvoiceForm.parmLogisticsPostalAddress();
        logisticsPostalAddressForContact.Location  = logisticsLocationForContact.RecId;
        logisticsPostalAddressForContact.ValidFrom = DateTimeUtil::utcNow();
        logisticsPostalAddressForContact.ValidTo   = DateTimeUtil::maxValue();
        logisticsPostalAddressForContact.insert();

        ttsCommit;

        return dirPerson.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record in the <c>VendTable</c> table for one-time vendor.
    /// </summary>
    /// <returns>
    /// The <c>VendTable</c> record created for one-time vendor.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendTable createVendTable()
    {
        ttsBegin;

        if (vendOneTimeVendInvoiceForm.parmVendRecordType() == DirPartyBaseType::Person)
        {
            vendTable.Party = this.createVendPerson();
        }
        else
        {
            vendTable.Party = this.createVendOrganization();
        }

        this.copyDataFromDefaultVendor();
        this.createVendBankAccount();

        vendTable.AccountNum    = vendOneTimeVendInvoiceForm.parmVendAccount();
        vendTable.VendGroup     = vendOneTimeVendInvoiceForm.parmVendGroupId();
        vendTable.OneTimeVendor = NoYes::Yes;

        vendTable.insert();

        ttsCommit;

        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDuplicateVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds duplicate vendor record.
    /// </summary>
    /// <returns>
    /// The <c>VendTable</c> record for duplicate vendor.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendTable findDuplicateVendor()
    {
        Name          vendName;
        VendTable     vendTableDuplicate;
        DirPartyTable dirPartyTable;

        if (vendOneTimeVendInvoiceForm.parmVendRecordType() == DirPartyBaseType::Organization)
        {
            vendName = vendOneTimeVendInvoiceForm.parmOrganizationName();
        }
        else
        {
            vendName = this.getPersonName();
        }

        select firstonly * from vendTableDuplicate
           exists join dirPartyTable
            where vendTableDuplicate.Party == dirPartyTable.RecId
                && (dirPartyTable.Name == vendName || (vendTableDuplicate.Tax1099RegNum != ''
                && vendTableDuplicate.Tax1099RegNum == Tax1099ElectronicCheck::formatTIN(vendOneTimeVendInvoiceForm.parmTax1099RegNum(), vendOneTimeVendInvoiceForm.parmTaxIDType())));

        return vendTableDuplicate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the default vendor configured in AP Parameters.
    /// </summary>
    /// <returns>
    /// The <c>VendTable</c> record for default vendor.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendTable getDefaultVendTable()
    {
        return VendTable::find(VendParameters::find().DefaultVend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPersonName</Name>
				<Source><![CDATA[
    private Name getPersonName()
    {
        Name name;

        if (vendOneTimeVendInvoiceForm.parmPersonFirstName())
        {
            name = vendOneTimeVendInvoiceForm.parmPersonFirstName();
        }

        if (vendOneTimeVendInvoiceForm.parmPersonMiddleName())
        {
            name = name + " " + vendOneTimeVendInvoiceForm.parmPersonMiddleName();
        }

        if (vendOneTimeVendInvoiceForm.parmPersonLastName())
        {
            name = name + " " + vendOneTimeVendInvoiceForm.parmPersonLastName();
        }

        name = strLTrim(name);

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void init(VendOneTimeVendInvoiceForm_PSN  _vendOneTimeVendInvoiceForm)
    {
        vendOneTimeVendInvoiceForm = _vendOneTimeVendInvoiceForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static VendOneTimeVendInvoiceService_PSN construct()
    {
        return new VendOneTimeVendInvoiceService_PSN();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>