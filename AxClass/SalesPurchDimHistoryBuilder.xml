<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchDimHistoryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesPurchDimHistoryBuilder</c> is a base class for the building dimension history strings for documents.
/// </summary>
abstract class SalesPurchDimHistoryBuilder extends InventReportDimHistoryBuilder
{
    private boolean inventDimPrinted;
    private InventDim defaultInventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDefaultInventDim</Name>
				<Source><![CDATA[
    public InventDim parmDefaultInventDim(InventDim _defaultInventDim = defaultInventDim)
    {
        defaultInventDim = _defaultInventDim;
        return defaultInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryQuantity</Name>
				<Source><![CDATA[
    protected InventQty inventoryQuantity(Qty _qty, InventDimId _inventDimId)
    {
        if (this.isStockedProduct())
        {
            return this.convertToinventoryQuantity(_qty, _inventDimId);
        }
        return _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the transaction lines quantity.
    /// </summary>
    /// <returns>The quantity.</returns>
    abstract protected Qty lineQuantity()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the unit of measure symbol for the quantity on the line.
    /// </summary>
    /// <returns>The unit of measure symbol.</returns>
    abstract protected UnitOfMeasureSymbol lineUnitOfMeasure()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToinventoryQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the line quantity to quantity in inventory units.
    /// </summary>
    /// <param name = "_qty">The quantity to convert.</param>
    /// <returns>The quantity in inventory units.</returns>
    private InventQty convertToinventoryQuantity(Qty _qty, InventDimId _inventDimId)
    {      
        InventTable inventTable = InventTable::find(this.itemId());

        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
                                                                                     _inventDimId,
                                                                                     _qty,
                                                                                     inventTable.inventUnitId(),
                                                                                     this.lineUnitOfMeasure(),
                                                                                     NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes is the document is a proforma document.
    /// </summary>
    /// <returns>true is the document is a proforma document; otherwise, false.</returns>
    abstract protected boolean isProforma()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStockedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the product is stocked.
    /// </summary>
    /// <returns>true if the product is stocked; otherwise, false.</returns>
    abstract protected boolean isStockedProduct()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProformaDimensionStringForStockedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the dimension string for a stocked product on a proforma document.
    /// </summary>
    abstract protected void buildProformaDimensionStringForStockedProduct()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionStringForMostRecentVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the dimension string for the most recent version.
    /// </summary>
    protected void buildDimensionStringForMostRecentVersion()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimHistorySegment</Name>
				<Source><![CDATA[
    private str inventDimHistorySegment(Qty _qty, InventDim _inventDim)
    {
        if (_qty && _inventDim)
        {
            return this.formatQuantityStringForDimension(this.inventoryQuantity(_qty, _inventDim.inventDimId), _inventDim);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimPrint</Name>
				<Source><![CDATA[
    protected void inventDimPrint(Qty _qty, InventDim _inventDim)
    {
        str segment = this.inventDimHistorySegment(_qty, _inventDim);
        if (segment)
        {
            this.appendToDimensionString(segment);
        }

        inventDimPrinted = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimPrintForTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints a history segment for a transaction quantity.
    /// </summary>
    /// <param name = "_qtyRemain">The remaining quantity.</param>
    /// <param name = "_qtyTrans">The transaction quantity.</param>
    /// <param name = "_inventDim">The dimension to print.</param>
    /// <returns>The remaining quantity after the printing.</returns>
    protected Qty inventDimPrintForTransaction(Qty _qtyRemain, Qty _qtyTrans, InventDim _inventDim)
    {
        if ((_qtyRemain > 0) && (abs(_qtyTrans) < _qtyRemain))
        {
            this.inventDimPrint(abs(_qtyTrans), _inventDim);
            return _qtyRemain - abs(_qtyTrans);
        }

        this.inventDimPrint(_qtyRemain, _inventDim);
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionStringForVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the dimension string for the provided version.
    /// </summary>
    abstract protected void buildDimensionStringForVersion()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionString</Name>
				<Source><![CDATA[
    protected final void buildDimensionString()
    {
        if (this.isProforma())
        {
            if (this.isStockedProduct())
            {
                this.buildProformaDimensionStringForStockedProduct();
            }
            else
            {
                this.inventDimPrint(this.lineQuantity(), defaultInventDim);
            }
        }
        else
        {
            this.buildDimensionStringForVersion();

            // In case of packing slip correction some of the lines on the document may not exist for corrected version, so find most recent version for those lines
            if (!inventDimPrinted && this.lineQuantity() > 0)
            {
                this.buildDimensionStringForMostRecentVersion();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPrintTransactionQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines whether history segment for a transaction quantity must be printed.
    /// </summary>
    /// <param name = "_inventTransOrigin">An inventory transaction originator.</param>
    /// <param name = "_inventTrans">An inventory transaction.</param>
    /// <param name = "_inventDim">An inventory dimension.</param>
    /// <returns>true if history segment for a transaction quantity must be printed; otherwise, false.</returns>
    protected boolean mustPrintTransactionQuantity(
        InventTransOrigin _inventTransOrigin,
        InventTrans _inventTrans,
        InventDim _inventDim)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeferPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the document update defers posting.
    /// </summary>
    /// <returns>
    /// true if posting is deferred, otherwise; false.
    ///</returns>
    [Hookable(false),
     SysObsolete('Method is obsoleted to support fast print feature. Please file an extensibility request if other access is required.', false, 25\5\2023)]
    protected boolean isDeferPost()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>