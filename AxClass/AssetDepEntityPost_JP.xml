<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepEntityPost_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is used to handle all the posting logic of asset depreciation entities.
/// </summary>
public class AssetDepEntityPost_JP
{
    // One instance of entity poster only works for on entity group
    AssetDepEntityGroup_JP          assetDepEntityGroup;

    AssetDepEntitySource_JP         assetDepEntitySource;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustValidToDateForEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the last valid date for an <C>AssetDepEntity_JP</C> record.
    /// </summary>
    /// <param name="_assetDepEntity">
    /// An <C>AssetDepEntity_JP</C> record.
    /// </param>
    /// <param name="_entityBalance">
    /// The balance of entity. Optional.
    /// </param>
    /// <returns>
    /// true if adjustment happend. Otherwise, return false.
    /// </returns>
    protected boolean adjustValidToDateForEntity(AssetDepEntity_JP _assetDepEntity, AssetAmount _entityBalance = 0)
    {
        boolean         adjustHappened;
        AssetTransDate  newValidToDate;

        if (_assetDepEntity.RecId)
        {
            if (prmisDefault(_entityBalance))
            {
                _entityBalance = AssetDepEntityInquiry_JP::construct(
                    assetDepEntityGroup.AssetId,
                    assetDepEntityGroup.BookId).calcSumForEntity(_assetDepEntity.RecId);
            }

            newValidToDate = this.getValidToDate(_assetDepEntity.EntityType, _assetDepEntity.EntityDate, _entityBalance);

            if (newValidToDate != _assetDepEntity.ValidTo)
            {
                _assetDepEntity.ValidTo = newValidToDate;
                adjustHappened = true;
            }
        }

        return adjustHappened;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcMaxAmountAllowToSettle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the max amount allow to settle.
    /// </summary>
    /// <param name="_assetDepEntity">
    /// The asset depreciation entity
    /// </param>
    /// <param name="_expectedAmountToSettle">
    /// The expected amount to settle.
    /// </param>
    /// <param name="_curBalance">
    /// The currency balance amount, optional
    /// </param>
    /// <returns>
    /// Returns the calculated amount
    /// </returns>
    protected AssetAmount calcMaxAmountAllowToSettle(
        AssetDepEntity_JP   _assetDepEntity,
        AssetAmount         _expectedAmountToSettle,
        AssetAmount         _curBalance = 0)
    {
        AssetAmount     maxAmountToSettle;
        AssetAmount     curBalance = _curBalance;
        real            signOfCurBalance;

        if (prmisDefault(_curBalance))
        {
            curBalance = AssetDepEntityInquiry_JP::construct(
                assetDepEntityGroup.AssetId,
                assetDepEntityGroup.BookId).calcSumForEntity(_assetDepEntity.RecId);
        }

        signOfCurBalance    = sign(curBalance);
        // The logic is:
        //   1. The amount to settle must have the same sign with curBalance. If not, the max amount to settle is 0.
        //   2. Synchronously adjust the curBalance and _expectedAmountToSettle to make the curBalance become postive.
        //      Note, "synchronously" both multiple with 1 or -1. In below code, abs(curBalance) is the same as signOfCurBalance * curBalance
        maxAmountToSettle   = signOfCurBalance * min(abs(curBalance), max(0, signOfCurBalance * _expectedAmountToSettle));

        return maxAmountToSettle;
    }
]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a new entity
    /// </summary>
    /// <param name="_entityType">
    /// The entity type
    /// </param>
    /// <param name="_entityDate">
    /// The entity date
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetDepEntity_JP</c> table; otherwise, an empty record.
    /// </returns>
    protected AssetDepEntity_JP findOrCreateEntity(
        AssetDepEntityType_JP                   _entityType,
        AssetTransDate                          _entityDate,
        boolean                                 _forupdate          = false,
        ConcurrencyModel                        _concurrencyModel   = ConcurrencyModel::Auto)
    {
        AssetDepEntity_JP           assetDepEntityLoc;

        assetDepEntityLoc = AssetDepEntity_JP::findByKeys(
            assetDepEntityGroup.RecId,
            assetDepEntitySource.RecId,
            _entityType,
            _entityDate,
            _forupdate,
            _concurrencyModel);

        if (!assetDepEntityLoc)
        {
            assetDepEntityLoc = AssetDepEntity_JP::create(
                assetDepEntityGroup.RecId,
                assetDepEntitySource.RecId,
                _entityType,
                _entityDate,
                dateNull());
        }

        return assetDepEntityLoc;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getValidToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets valid to date
    /// </summary>
    /// <param name="_entityType">
    /// The entity type
    /// </param>
    /// <param name="_entityDate">
    /// The entity date
    /// </param>
    /// <param name="_entityBalance">
    /// The balance of entity. Optional.
    /// </param>
    /// <returns>
    /// Returns the valid to date
    /// </returns>
    protected AssetTransDate getValidToDate(AssetDepEntityType_JP _entityType, AssetTransDate _entityDate, AssetAmount _entityBalance = 0)
    {
        return dateMax();
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance
    /// </summary>
    /// <param name="_assetDepEntityGroup">
    /// The asset depreciation entity group instance
    /// </param>
    /// <param name="_assetDepEntitySource">
    /// The asset depreciation entity source instance
    /// </param>
    protected void new(AssetDepEntityGroup_JP _assetDepEntityGroup, AssetDepEntitySource_JP _assetDepEntitySource)
    {
        assetDepEntityGroup     = _assetDepEntityGroup;
        assetDepEntitySource    = _assetDepEntitySource;
    }
]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does post here
    /// </summary>
    /// <param name="_entityType">
    /// The entity type
    /// </param>
    /// <param name="_entityDate">
    /// The entity date
    /// </param>
    /// <param name="_amount">
    /// The amount
    /// </param>
    /// <param name="_transDate">
    /// The transaction date
    /// </param>
    /// <param name="_transType">
    /// The transaction type
    /// </param>
    /// <param name="_adjustValidToDate">
    /// A Boolean value that indicates whether to adjust the valid to date based on new balance; optional.
    /// </param>
    /// <returns>
    /// Returns true if posted otherwise false
    /// </returns>
    public boolean post(
        AssetDepEntityType_JP                   _entityType,
        AssetTransDate                          _entityDate,
        AssetAmount                             _amount,
        AssetTransDate                          _transDate,
        AssetDepEntityTransType_JP              _transType          = AssetDepEntityTransType_JP::None,
        boolean                                 _adjustValidToDate  = false)
    {
        boolean             ret;
        AssetDepEntity_JP   assetDepEntity;
        boolean             isNewEntity;

        if (_amount)
        {
            ttsBegin;

            assetDepEntity = this.findOrCreateEntity(_entityType, _entityDate, true);
            if (assetDepEntity.ValidTo == dateNull())
            {
                isNewEntity = true;

                assetDepEntity.ValidTo = this.getValidToDate(_entityType, _entityDate, _amount);
                assetDepEntity.update();
            }

            ret = this.postForEntity(
                assetDepEntity,
                _amount,
                _transDate,
                _transType);

            if (ret && !isNewEntity && _adjustValidToDate)
            {
                if (this.adjustValidToDateForEntity(assetDepEntity))
                {
                    assetDepEntity.update();
                }
            }

            ttsCommit;
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>postForEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts for entity
    /// </summary>
    /// <param name="_assetDepEntity">
    /// The asset depreciation entity
    /// </param>
    /// <param name="_amount">
    /// The amount
    /// </param>
    /// <param name="_transDate">
    /// The transaction date
    /// </param>
    /// <param name="_transType">
    /// The transaction type
    /// </param>
    /// <returns>
    /// Returns true if posted otherwise false
    /// </returns>
    protected boolean postForEntity(
        AssetDepEntity_JP               _assetDepEntity,
        AssetAmount                     _amount,
        AssetTransDate                  _transDate,
        AssetDepEntityTransType_JP      _transType      = AssetDepEntityTransType_JP::None)
    {
        boolean                     ret;
        AssetDepEntityTrans_JP      assetDepEntityTransLoc;

        if (this.validatePostForEntity(_assetDepEntity, _amount))
        {
            assetDepEntityTransLoc.clear();
            assetDepEntityTransLoc.AssetDepEntity_JP            = _assetDepEntity.RecId;
            assetDepEntityTransLoc.AccountingCurrencyAmount     = _amount;
            assetDepEntityTransLoc.TransDate                    = _transDate;
            assetDepEntityTransLoc.TransType                    = _transType;
            assetDepEntityTransLoc.insert();

            ret = true;
        }
        else
        {
            ret = false;
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>postForEntityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a specified amount to settle the existed entity balance for specified entity type from old to new.
    /// </summary>
    /// <param name="_entityType">
    /// The entity type.
    /// </param>
    /// <param name="_amount">
    /// The amount to post.
    /// </param>
    /// <param name="_transDate">
    /// The new transaction date. After settle all existed entitys, if there is still any remaining amount to post,
    /// the remaining amount to post will be posted to an entity with its entity date equal to this date.
    /// </param>
    /// <param name="_transType">
    /// The new transaction type.
    /// </param>
    /// <param name="_entityDateFrom">
    /// The start date of the date range for entities. Optional.
    /// </param>
    /// <param name="_entityDateTo">
    /// The end date of the date range for entities. Optional.
    /// </param>
    /// <param name="_entityValidDate">
    /// The date that the entities must be valid. Optional.
    /// </param>
    /// <remarks>
    /// It will always settle the oldest entity balance first.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// If there is not enough balance to settle, an error will be thrown out.
    /// </exception>
    public void postForEntityType(
        AssetDepEntityType_JP           _entityType,
        AssetAmount                     _amount,
        AssetTransDate                  _transDate,
        AssetDepEntityTransType_JP      _transType          = AssetDepEntityTransType_JP::None,
        AssetTransDate                  _entityDateFrom     = dateNull(),
        AssetTransDate                  _entityDateTo       = dateMax(),
        AssetTransDate                  _entityValidDate    = dateNull())
    {
        AssetAmount                 remainingAmountToPost = _amount;
        AssetAmount                 curAmountToPost;
        boolean                     entityPostResult;

        AssetDepEntityTrans_JP      assetDepEntityTransLoc;
        AssetDepEntity_JP           assetDepEntityLoc;

        // Post adjustment if needed
        if (remainingAmountToPost)
        {
            _entityValidDate = max(_transDate, _entityValidDate);

            ttsBegin;

            //
            // First, settle the existed entity from old to new.
            //

            // Note: the summary of each entity's trans amount includes the trans that after "_transDate".
            // This is in order to avoid over posting.
            while select sum(AccountingCurrencyAmount) from assetDepEntityTransLoc
                join RecId, AllowedPostType from assetDepEntityLoc
                    group by EntityDate, RecId, AllowedPostType
                    order by EntityDate asc
                    where assetDepEntityLoc.RecId                       == assetDepEntityTransLoc.AssetDepEntity_JP
                        && assetDepEntityLoc.AssetDepEntityGroup_JP     == assetDepEntityGroup.RecId
                        && assetDepEntityLoc.EntityType                 == _entityType
                        && assetDepEntityLoc.ValidTo                    >= _entityValidDate
                        && assetDepEntityLoc.EntityDate                 >= _entityDateFrom
                        && assetDepEntityLoc.EntityDate                 <= _entityDateTo
            {
                if (assetDepEntityTransLoc.AccountingCurrencyAmount != 0)
                {
                    curAmountToPost = -1 * this.calcMaxAmountAllowToSettle(
                        assetDepEntityLoc,
                        -1 * remainingAmountToPost,
                        assetDepEntityTransLoc.AccountingCurrencyAmount);

                    // Try to do the post.
                    entityPostResult = this.postForEntity(
                        assetDepEntityLoc,
                        curAmountToPost,
                        _transDate,
                        _transType);

                    if (entityPostResult)
                    {
                        remainingAmountToPost -= curAmountToPost;
                        if (remainingAmountToPost == 0)
                        {
                            break;
                        }
                    }
                }
            }

            //
            // Post the remaining amount to the entity on _transDate.
            //
            if (remainingAmountToPost)
            {
                this.post(_entityType, _transDate, remainingAmountToPost, _transDate, _transType);
            }

            ttsCommit;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>postReverse</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Posts reverse transaction for a set <C>AssetDepEntityTrans_JP</C> transaction based on specified filter conditions.
    /// </summary>
    /// <param name="_reverseDate">
    /// The transaction date of reverse transaction.
    /// </param>
    /// <param name="_entityTypeList">
    /// A container that includes the list of entity types. Optional.
    /// </param>
    /// <param name="_entityDateFrom">
    /// The start date of the date range for entities. Optional.
    /// </param>
    /// <param name="_entityDateTo">
    /// The end date of the date range for entities. Optional.
    /// </param>
    /// <param name="_entityValidDate">
    /// The date that the entities must be valid. Optional.
    /// </param>
    /// <param name="_transTypeList">
    /// A container that includes the list of transaction types. Optional.
    /// </param>
    /// <param name="_transDateFrom">
    /// The start date of the date range for transactions. Optional.
    /// </param>
    /// <param name="_transDateTo">
    /// The start end of the date range for transactions. Optional.
    /// </param>
    public void postReverse(
        AssetTransDate                  _reverseDate,
        container                       _entityTypeList         = conNull(),
        AssetTransDate                  _entityDateFrom         = dateNull(),
        AssetTransDate                  _entityDateTo           = dateMax(),
        AssetTransDate                  _entityValidDate        = dateNull(),
        container                       _transTypeList          = conNull(),
        AssetTransDate                  _transDateFrom          = dateNull(),
        AssetTransDate                  _transDateTo            = dateMax())
    {
        Query                   q;
        QueryRun                qr;
        QueryBuildDataSource    qbds;
        int                     i;
        AssetDepEntityTrans_JP  assetDepEntityTransLoc;

        //
        // Build query
        //

        // AssetDepEntityTrans_JP
        q = new Query();
        qbds = q.addDataSource(tableNum(AssetDepEntityTrans_JP));

        if (_transDateFrom != dateNull() || _transDateTo != dateMax())
        {
            qbds.addRange(fieldNum(AssetDepEntityTrans_JP, TransDate)).value(SysQuery::range(_transDateFrom, _transDateTo));
        }

        if (_transTypeList != conNull())
        {
            for (i = 1; i <= conLen(_transTypeList); i++)
            {
                qbds.addRange(fieldNum(AssetDepEntityTrans_JP, TransType)).value(SysQuery::value(enum2int(conPeek(_transTypeList, i))));
            }
        }

        // AssetDepEntityTrans_JP --> AssetDepEntity_JP
        qbds = q.dataSourceTable(tableNum(AssetDepEntityTrans_JP)).addDataSource(tableNum(AssetDepEntity_JP));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.relations(true);
        qbds.addRange(fieldNum(assetDepEntity_JP, AssetDepEntityGroup_JP)).value(SysQuery::value(assetDepEntityGroup.RecId));

        if (_entityValidDate != dateNull())
        {
            // The effective date range of an entity is [dateNull(), ValidTo]
            qbds.addRange(fieldNum(assetDepEntity_JP, ValidTo)).value(SysQuery::range(_entityValidDate, dateMax()));
        }

        if (_entityTypeList != conNull())
        {
            for (i = 1; i <= conLen(_entityTypeList); i++)
            {
                qbds.addRange(fieldNum(assetDepEntity_JP, EntityType)).value(SysQuery::value(enum2int(conPeek(_entityTypeList, i))));
            }
        }

        if (_entityDateFrom != dateNull() || _entityDateTo != dateMax())
        {
            qbds.addRange(fieldNum(AssetDepEntity_JP, EntityDate)).value(SysQuery::range(_entityDateFrom, _entityDateTo));
        }

        // AssetDepEntityTrans_JP --> AssetDepEntityTransReverseLink_JP
        qbds = q.dataSourceTable(tableNum(AssetDepEntityTrans_JP)).addDataSource(tableNum(AssetDepEntityTransReverseLink_JP));
        qbds.joinMode(JoinMode::NoExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.relations(false);
        qbds.addLink(fieldNum(AssetDepEntityTrans_JP, RecId), fieldNum(AssetDepEntityTransReverseLink_JP, AssetDepEntityTrans_JP));

        //
        // Run
        //
        qr = new QueryRun(q);

        ttsBegin;
        while (qr.next())
        {
            assetDepEntityTransLoc = qr.get(tableNum(AssetDepEntityTrans_JP));
            this.postReverseForEntityTrans(assetDepEntityTransLoc, _reverseDate);
        }
        ttsCommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>postReverseForEntityTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a reverse transaction for a specified <C>AssetDepEntityTrans_JP</C> transaction.
    /// </summary>
    /// <param name="_assetDepEntityTrans">
    /// The <C>AssetDepEntityTrans_JP</C> transaction to post reverse transaction.
    /// </param>
    /// <param name="_reverseDate">
    /// The transaction date of reverse transaction.
    /// </param>
    /// <returns>
    /// true if success; otherwise, return false.
    /// </returns>
    protected boolean postReverseForEntityTrans(AssetDepEntityTrans_JP _assetDepEntityTrans, AssetTransDate _reverseDate)
    {
        AssetDepEntityTrans_JP              assetDepEntityTransRevrese;
        AssetDepEntityTransReverseLink_JP   assetDepEntityTransReverseLink;

        if (_assetDepEntityTrans.RecId == 0)
        {
            return false;
        }

        try
        {
            ttsBegin;

            assetDepEntityTransRevrese.data(_assetDepEntityTrans);
            assetDepEntityTransRevrese.AccountingCurrencyAmount = -1 * assetDepEntityTransRevrese.AccountingCurrencyAmount;
            assetDepEntityTransRevrese.TransDate                = _reverseDate;
            assetDepEntityTransRevrese.insert();

            // Use the RecId of the reverse trans to be the reverse group ID. It means 1 revert trans can revert
            // 1 or more normal trans. But 1 normal trans can only be reverted by 1 reverse trans.
            assetDepEntityTransReverseLink.ReverseGroupId           = assetDepEntityTransRevrese.RecId;
            assetDepEntityTransReverseLink.AssetDepEntityTrans_JP   = assetDepEntityTransRevrese.RecId;
            assetDepEntityTransReverseLink.insert();

            assetDepEntityTransReverseLink.AssetDepEntityTrans_JP   = _assetDepEntityTrans.RecId;
            assetDepEntityTransReverseLink.insert();

            ttsCommit;
        }
        catch (Exception::DuplicateKeyException)
        {
            return false;
        }

        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validatePostForEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates post for entity
    /// </summary>
    /// <param name="_assetDepEntity">
    /// The asset depreciation entity
    /// </param>
    /// <param name="_amountToPost">
    /// The amount to be posted
    /// </param>
    /// <returns>
    /// Returns true if valid otherwise false
    /// </returns>
    protected boolean validatePostForEntity(
        AssetDepEntity_JP   _assetDepEntity,
        AssetAmount         _amountToPost)
    {
        boolean     ret = true;

        if (_assetDepEntity.RecId == 0 || _amountToPost == 0)
        {
            ret = false;
        }

        if (ret)
        {
            if ((_assetDepEntity.AllowedPostType    == AssetPostType::Negative
                    && _amountToPost                >= 0)
                || (_assetDepEntity.AllowedPostType == AssetPostType::Positive
                    && _amountToPost                <= 0))
            {
                ret = false;
            }
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <C>AssetDepEntityPost_JP</C>
    /// </summary>
    /// <param name="_assetId">
    /// The asset id
    /// </param>
    /// <param name="_bookId">
    /// The book id
    /// </param>
    /// <param name="_entitySourceImplementation">
    /// The entity source implementation, optional
    /// </param>
    /// <returns>
    /// Returns the instance of <C>AssetDepEntityPost_JP</C>.
    /// </returns>
    public static AssetDepEntityPost_JP construct(
        AssetId                                 _assetId,
        AssetBookMergeId                        _bookId,
        AssetDepEntitySourceImplementation_JP   _entitySourceImplementation = null)
    {
        AssetDepEntityPost_JP    assetDepEntityPost;

        assetDepEntityPost = new AssetDepEntityPost_JP(
            AssetDepEntityGroup_JP::findOrCreate(
                _assetId,
                _bookId),
            AssetDepEntitySource_JP::findOrCreate(_entitySourceImplementation));

        return assetDepEntityPost;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>