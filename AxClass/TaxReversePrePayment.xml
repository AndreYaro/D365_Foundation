<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReversePrePayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReversePrePayment</c> class calculates the tax upon reversal of prepayment of customer or vendor transactions. It is used in the <c>CustVendPrePaymentReversa</c>l class. This class derives
///    from the tax class, and works as an extension of the main tax engine.
/// </summary>
class TaxReversePrePayment extends TaxReverse
{
    Voucher     paymentVoucher;
    TransactionTextLarge    transTxt;
    RefTableId  sourceTableId;
    RefRecId    sourceRecId;
    TransDate   paymentDate;
    boolean     useSourceTableIdAndRecIdJoin;
    // <GEEU>
    CustVendTrans custVendTransOffset;
    CustVendTrans custVendTransPrepayment;
    #ISOCountryRegionCodes
    private boolean isCountryRegion_EEurope = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoHU, #isoPL, #isoRU]);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcPostAndInsertTaxes</Name>
				<Source><![CDATA[
    public container calcPostAndInsertTaxes(LedgerPostingController _ledgerPostingController)
    {
        TaxTrans                 taxTrans;
        TaxTrans                 taxTransReverse;
        TaxAmountCur             totalTaxAmount;
        TaxAmountCur             taxAmountCur;
        TaxAmountCur             taxInCostPrice;
        AmountMST                totalAmountMST;
        AmountMST                totalAmountMSTPosted;
        AmountMST                amountDiffMST;
        LedgerDimensionAccount   ledgerDimension;
        LedgerDimensionAccount   useTaxPayableLedgerDimension;
     
        ExchRate                 exchRateOnTax;
        LedgerVoucherTransObject ledgerPostingTransaction;
        CurrencyExchangeHelper   exchangeRateHelper;
        CustVendPaymJournalFee   custVendPaymJournalFee;

        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntryTax;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntryUseTaxPayable;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntryTransactionLineAccount;
        GeneralJournalAccountEntry generalJournalAccountEntryTax;
        GeneralJournalAccountEntry generalJournalAccountEntryUseTaxPayable;
        GeneralJournalAccountEntry generalJournalAccountEntryTransactionLineAccount;

        boolean updateLedgerDimensionForPennyDifferent;

        exchangeRateHelper = CurrencyExchangeHelper::construct();

        if (percent == 0)
        {
            return [0,0];
        }

        this.initLedgerPosting(_ledgerPostingController);

        transTxt = _ledgerPostingController.getReference().lastTransTxt();

        ttsbegin;
        while select * from taxTrans
            where taxTrans.Voucher             == paymentVoucher &&
                  taxTrans.TransDate           == paymentDate &&
                  taxTrans.ExemptTax           == NoYes::No  &&
                  taxTrans.TaxOrigin           == TaxOrigin::Tax &&
                  (!useSourceTableIdAndRecIdJoin ||
                  (taxTrans.SourceTableId      == sourceTableId &&
                  taxTrans.SourceRecId         == sourceRecId))
            outer join * from taxTransGeneralJournalAccountEntryTax
            where taxTrans.RecId == taxTransGeneralJournalAccountEntryTax.TaxTrans &&
                  taxTransGeneralJournalAccountEntryTax.TaxTransRelationship == TaxTransRelationshipType::Tax
            outer join RecId, LedgerDimension from generalJournalAccountEntryTax
            where generalJournalAccountEntryTax.RecId == taxTransGeneralJournalAccountEntryTax.GeneralJournalAccountEntry

            outer join * from taxTransGeneralJournalAccountEntryUseTaxPayable
            where taxTrans.RecId == taxTransGeneralJournalAccountEntryUseTaxPayable.TaxTrans &&
                  taxTransGeneralJournalAccountEntryUseTaxPayable.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable
            outer join LedgerDimension, RecId from generalJournalAccountEntryUseTaxPayable
            where generalJournalAccountEntryUseTaxPayable.RecId == taxTransGeneralJournalAccountEntryUseTaxPayable.GeneralJournalAccountEntry

            outer join * from taxTransGeneralJournalAccountEntryTransactionLineAccount
            where taxTrans.RecId == taxTransGeneralJournalAccountEntryTransactionLineAccount.TaxTrans &&
                  taxTransGeneralJournalAccountEntryTransactionLineAccount.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount
            outer join RecId, LedgerDimension from generalJournalAccountEntryTransactionLineAccount
            where generalJournalAccountEntryTransactionLineAccount.RecId == taxTransGeneralJournalAccountEntryTransactionLineAccount.GeneralJournalAccountEntry
            notExists join custVendPaymJournalFee
            where taxTrans.SourceRecId == custVendPaymJournalFee.feeTransRecId &&
                  taxTrans.SourceTableId == tableNum(LedgerJournalTrans)
        {
            triangulation = taxTrans.euroTriangulation;

            if (this.mustReverseTaxTrans(taxTrans))
            {
                taxTransReverse = this.initFromTaxTrans(taxTrans);

                taxTransReverse.insert();
                if (taxTrans.TaxAutogenerated)
                {
                    taxAmountCur           = taxTransReverse.SourceTaxAmountCur;
                    taxInCostPrice         = taxTransReverse.TaxInCostPrice;
                }
                else
                {
                    taxAmountCur           = taxTransReverse.SourceRegulateAmountCur;
                    taxInCostPrice         = taxTransReverse.TaxInCostPriceRegulated;
                }
                totalAmountMST += taxTransReverse.TaxAmount;
                totalTaxAmount += taxAmountCur;

                updateLedgerDimensionForPennyDifferent = TaxGetLedgerDimensionForReversePennyDifferentTaxInPrePaymentFlight::instance().isEnabled();

                if (updateLedgerDimensionForPennyDifferent)
                {
                    ledgerDimension = this.getLedgerDimensionFromTaxPaymentAccount(taxTrans, generalJournalAccountEntryTax, taxTransReverse, taxTransGeneralJournalAccountEntryTax);
                }

                if (taxAmountCur || taxInCostPrice)
                {
                    if (taxAmountCur != 0 && !triangulation && this.exchRate() != taxTransReverse.TaxAmount / taxAmountCur * 100)
                    {
                        exchRateOnTax = taxTransReverse.TaxAmount / taxAmountCur * 100;
                    }
                    else
                    {
                        exchRateOnTax = 0;
                    }

                    exchangeRateHelper.parmExchangeRate1(exchRateOnTax);
                    exchangeRateHelper.parmExchangeDate(taxDate);
                    exchangeRateHelper.parmLedgerRecId(Ledger::current());

                    if (!updateLedgerDimensionForPennyDifferent)
                    {
                        ledgerDimension = this.getLedgerDimensionFromTaxPaymentAccount(taxTrans, generalJournalAccountEntryTax, taxTransReverse, taxTransGeneralJournalAccountEntryTax);
                    }

                    useTaxPayableLedgerDimension = taxTransGeneralJournalAccountEntryUseTaxPayable.getLedgerDimension(generalJournalAccountEntryUseTaxPayable);

                    this.parmOriginalSourceRecId(taxTrans.SourceRecId);
                    this.parmOriginalSourceTableId(taxTrans.SourceTableId);

                    this.post(
                            _ledgerPostingController,
                            taxTransReverse,
                            taxAmountCur,
                            taxInCostPrice,
                            exchangeRateHelper,
                            ledgerDimension,
                            taxTransGeneralJournalAccountEntryTransactionLineAccount.getLedgerDimension(generalJournalAccountEntryTransactionLineAccount),
                            useTaxPayableLedgerDimension);

                    totalAmountMSTPosted += CurrencyExchangeHelper::mstAmount(taxAmountCur, sourceCurrencyCode, taxDate, UnknownNoYes::Unknown, exchRateOnTax);
                }
            }
            else
            {
                this.processNotReversedTrans(taxTrans);
            }
        }
        if (totalAmountMST != totalAmountMSTPosted)
        {
            amountDiffMST = totalAmountMST - totalAmountMSTPosted;

            ledgerPostingTransaction = LedgerVoucherTransObject::newAdjustmentDefault(
                _ledgerPostingController.getReference(),
                LedgerPostingType::Tax,
                ledgerDimension,
                Ledger::accountingCurrency(this.companyInfo().RecId),
                amountDiffMST,
                0);

            _ledgerPostingController.addTrans(ledgerPostingTransaction);
        }

        ttscommit;

        return [totalTaxAmount,amountDiffMST];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSettlement</Name>
				<Source><![CDATA[
    public void initFromSettlement(
        TransDate           _paymentDate,
        TransDate           _taxDate,
        Voucher             _paymentVoucher,
        Percent             _percent,
        CurrencyCode        _reverseCurrencyCode,
        RefTableId          _sourceTableId,
        RefRecId            _sourceRecId,
        CustVendTrans       _custVendTransOffset = null,
        CustVendTrans       _custVendTransPrepayment = null)
    {
        paymentDate         = _paymentDate;
        taxDate             = _taxDate;
        paymentVoucher      = _paymentVoucher;
        percent             = _percent;
        sourceCurrencyCode  = _reverseCurrencyCode;
        sourceTableId       = _sourceTableId;
        sourceRecId         = _sourceRecId;
        // <GEEU>
        custVendTransOffset = _custVendTransOffset;
        // </GEEU>
        custVendTransPrepayment = _custVendTransPrepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the transaction line to calculate.
    /// </summary>
    /// <returns>
    /// The record ID of the transaction line to calculate.
    /// </returns>
    public recId sourceRecId()
    {
        return sourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID of the transaction to tax.
    /// </summary>
    /// <returns>
    /// The ID of the transaction to tax.
    /// </returns>
    public RefTableId sourceTableId()
    {
        return sourceTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseSourceTableIdAndRecIdJoin</Name>
				<Source><![CDATA[
    public boolean parmUseSourceTableIdAndRecIdJoin(boolean _useSourceTableIdAndRecIdJoin = useSourceTableIdAndRecIdJoin)
    {
        useSourceTableIdAndRecIdJoin = _useSourceTableIdAndRecIdJoin;
        return useSourceTableIdAndRecIdJoin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPrePaymentTax</Name>
				<Source><![CDATA[
    static boolean existPrePaymentTax(
        TransDate _taxDate,
        Voucher _paymentVoucher)
    {
        boolean     ret;
        TaxTrans    taxTrans;
        ;

        select firstonly RecId from taxTrans
            where taxTrans.Voucher == _paymentVoucher
            && taxTrans.TransDate == _taxDate
            && taxTrans.TaxOrigin == TaxOrigin::Tax;

        ret = taxTrans.RecId != 0;

        // <GTE>
        // For GTE, tax should be reversed in accordance with GTE configuration instead
        if (ret
            && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            ret = false;
        }
        // </GTE>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TaxTrans</c> record.
    /// </summary>
    /// <param name="_taxTrans">
    /// The <c>TaxTrans</c> record to initialize.
    /// <returns>
    /// Returns the new trans buffer of <c>TaxTrans</c>.
    /// </returns>
    protected TaxTrans initFromTaxTrans(TaxTrans _taxTrans)
    {
        TaxTrans taxTransReverse;

        #ISOCountryRegionCodes
        TaxTrans_W       taxTransReverse_W;
        VatDueDate_W     vatDueDate;

        taxTransReverse.clear();
        taxTransReverse_W = taxTransReverse.taxTrans_W();
        if (TaxTable::find(_taxTrans.TaxCode).PaymentTaxCode
            && TaxParameters::find().ConditionalTax == NoYes::Yes)
        {
            taxTransReverse.TaxCode             = TaxTable::find(_taxTrans.TaxCode).PaymentTaxCode;
        }
        else
            taxTransReverse.TaxCode             = _taxTrans.TaxCode;
        taxTransReverse.TaxGroup                = _taxTrans.TaxGroup;
        taxTransReverse.TaxItemGroup            = _taxTrans.TaxItemGroup;
        taxTransReverse.Source                  = TaxModuleType::Voucher;
        taxTransReverse.Voucher                 = voucher;
        taxTransReverse.TransDate               = taxDate;
        taxTransReverse.RealizedDate            = taxDate;

        if (isCountryRegion_EEurope)
        {
            vatDueDate = taxDate;
            if (custVendTransOffset)
            {
                vatDueDate = TaxTrans::find(custVendTransOffset.Voucher, custVendTransOffset.TransDate).taxTrans_W().VatDueDate_W;
            }

            taxTransReverse_W.VatDueDate_W            = max(_taxTrans.taxTrans_W().VatDueDate_W, vatDueDate);
            taxTransReverse.packTaxTrans_W(taxTransReverse_W);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            taxTransReverse_W.TransTableId_MX   = custVendTransPrepayment.TableId;
            taxTransReverse_W.TransRecId_MX     = custVendTransPrepayment.RecId;
            taxTransReverse_W.OffsetRecId_MX    = custVendTransOffset.RecId;
            taxTransReverse.TaxType_MX          = _taxTrans.TaxType_MX;
            taxTransReverse.packTaxTrans_W(taxTransReverse_W);
        }
        taxTransReverse.TaxDirection            = _taxTrans.TaxDirection;
        taxTransReverse.CurrencyCode            = _taxTrans.CurrencyCode;
        taxTransReverse.SourceCurrencyCode      = sourceCurrencyCode;
        taxTransReverse.TaxAutogenerated        = _taxTrans.TaxAutogenerated;
        taxTransReverse.euroTriangulation       = _taxTrans.euroTriangulation;
        taxTransReverse.SourceTableId           = this.sourceTableId();
        taxTransReverse.SourceRecId             = this.sourceRecId();
        
        this.initReverseAmountsFromTaxTrans(_taxTrans, taxTransReverse);

        taxTransReverse.TaxValue            = _taxTrans.TaxValue;
        taxTransReverse.VATExemptPct        = _taxTrans.VATExemptPct;
        taxTransReverse.PrintCode           = _taxTrans.PrintCode;
        taxTransReverse.ExemptTax           = NoYes::No;
        taxTransReverse.ExemptCode          = '';
        taxTransReverse.TaxAutogenerated    = NoYes::Yes;
        taxTransReverse.TaxOrigin           = TaxOrigin::TaxReversed;
        taxTransReverse.ISVFeatureSetupGuid = _taxTrans.ISVFeatureSetupGuid;
        taxTransReverse.ISVFeatureSetupName = _taxTrans.ISVFeatureSetupName;

        if (TaxIntegrationUtils::isMultipleTaxIdEnabled())
        {
            taxTransReverse.TaxID = _taxTrans.TaxID;
            taxTransReverse.PartyTaxID = _taxTrans.PartyTaxID;
        }

        TaxTransGlobalInitializer initializerBySourceTable = TaxTransGlobalInitializer::construct(taxTransReverse);
        initializerBySourceTable.parmTaxTransSource(_taxTrans);
        initializerBySourceTable.initTaxTransFromSourceTaxTrans();

        return taxTransReverse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReverseAmountsFromTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the Reverse TaxTrans record.
    /// </summary>
    /// <param name = "_taxTrans">The <c>TaxTrans</c> record.</param>
    /// <param name = "_taxTransReverse">The <c>TaxTrans</c> record to initialize.</param>
    protected void initReverseAmountsFromTaxTrans(TaxTrans _taxTrans, TaxTrans _taxTransReverse)
    {
        CurrencyCode standardCurrency = CompanyInfoHelper::standardCurrency();
        CurrencyCode reportingCurrency = Ledger::reportingCurrency(this.companyInfo().RecId);

        _taxTransReverse.TaxAmount = CurrencyExchangeHelper::amount(_taxTrans.TaxAmount * percent * -1 / 100);
        _taxTransReverse.TaxBaseAmount = CurrencyExchangeHelper::amount(_taxTrans.TaxBaseAmount * percent * -1 / 100);
        _taxTransReverse.TaxInCostPrice = CurrencyExchangeHelper::amount(_taxTrans.TaxInCostPrice * percent * -1 / 100);

        if (_taxTrans.CurrencyCode && _taxTrans.CurrencyCode != standardCurrency)
        {
            _taxTransReverse.TaxBaseAmountCur = CurrencyExchangeHelper::amount(_taxTrans.TaxBaseAmountCur * percent * -1 / 100, _taxTrans.CurrencyCode);
            _taxTransReverse.TaxAmountCur = CurrencyExchangeHelper::amount(_taxTrans.TaxAmountCur * percent * -1 / 100, _taxTrans.CurrencyCode);

            _taxTransReverse.TaxBaseAmountRep = CurrencyExchangeHelper::amount(_taxTrans.TaxBaseAmountRep * percent * -1 / 100, reportingCurrency);
            _taxTransReverse.TaxAmountRep = CurrencyExchangeHelper::amount(_taxTrans.TaxAmountRep * percent * -1 / 100, reportingCurrency);
        }
        else
        {
            _taxTransReverse.TaxBaseAmountCur = CurrencyExchangeHelper::amount(_taxTrans.TaxBaseAmountCur * percent * -1 / 100);
            _taxTransReverse.TaxAmountCur = CurrencyExchangeHelper::amount(_taxTrans.TaxAmountCur * percent * -1 / 100);

            _taxTransReverse.TaxBaseAmountRep = CurrencyExchangeHelper::amount(_taxTrans.TaxBaseAmountRep * percent * -1 / 100);
            _taxTransReverse.TaxAmountRep = CurrencyExchangeHelper::amount(_taxTrans.TaxAmountRep * percent * -1 / 100);
        }

        if (_taxTrans.SourceCurrencyCode == sourceCurrencyCode)
        {
            _taxTransReverse.SourceTaxAmountCur = CurrencyExchangeHelper::amount(_taxTrans.SourceTaxAmountCur * percent * -1 / 100, _taxTrans.SourceCurrencyCode);
            _taxTransReverse.SourceBaseAmountCur = _taxTrans.SourceBaseAmountCur * percent * -1 / 100;
            _taxTransReverse.SourceRegulateAmountCur = CurrencyExchangeHelper::amount(_taxTrans.SourceRegulateAmountCur * percent * -1 / 100, _taxTrans.SourceCurrencyCode);
        }
        else
        {
            _taxTransReverse.SourceTaxAmountCur = CurrencyExchangeHelper::curAmount(_taxTrans.TaxAmount * percent * -1 / 100, sourceCurrencyCode, taxDate);
            _taxTransReverse.SourceBaseAmountCur = CurrencyExchangeHelper::curAmount(_taxTrans.TaxBaseAmount * percent * -1 / 100, sourceCurrencyCode, taxDate);
            _taxTransReverse.SourceRegulateAmountCur = CurrencyExchangeHelper::curAmount(
                CurrencyExchangeHelper::mstAmount(
                    _taxTrans.SourceRegulateAmountCur * percent * -1 / 100,
                    _taxTrans.SourceCurrencyCode,
                    _taxTrans.TransDate,
                    Currency::noYes2UnknownNoYes(_taxTrans.euroTriangulation)),
                _taxTrans.SourceCurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustReverseTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies if the tax transaction must be reversed.
    /// </summary>
    /// <param name = "_taxTrans">The buffer of the table <c>TaxTrans</c></param>
    /// <returns>true if the tax transaction must be reversed; otherwise, false.</returns>
    protected boolean mustReverseTaxTrans(TaxTrans _taxTrans)
    {
        return (! isCountryRegion_EEurope
            || _taxTrans.TaxAmount
            || _taxTrans.TaxAmountCur
            || _taxTrans.SourceTaxAmountCur
            || _taxTrans.TaxBaseAmount
            || _taxTrans.SourceBaseAmountCur
            || _taxTrans.SourceRegulateAmountCur
            || _taxTrans.TaxBaseQty
            || _taxTrans.TaxInCostPrice)
          && TaxTable::find(_taxTrans.TaxCode).TaxBase != TaxBaseType::AmountByUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionFromTaxPaymentAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the LedgerDimension from tax payment account.
    /// </summary>
    /// <param name = "_taxTrans">The original TaxTrans to reverse.</param>
    /// <param name = "_generalJournalAccountEntryTax">The original GeneralJournalAccountEntry.</param>
    /// <param name = "_taxTransReverse">The TaxTrans to posting.</param>
    /// <param name = "_taxTransGeneralJournalAccountEntry">The original TaxTransGeneralJournalAccountEntry.</param>
    /// <returns>
    /// It returns LedgerDimensionAccount if it can be found by TaxPaymentAccount, otherwise returns null.
    /// </returns>
    protected LedgerDimensionAccount getLedgerDimensionFromTaxPaymentAccount(TaxTrans _taxTrans, GeneralJournalAccountEntry _generalJournalAccountEntryTax, TaxTrans _taxTransReverse, TaxTransGeneralJournalAccountEntry _taxTransGeneralJournalAccountEntry)
    {
        LedgerDimensionAccount   ledgerDimension;

        // Assign ledgerDimension before test taxAmountCur
        ledgerDimension = _taxTransGeneralJournalAccountEntry.getLedgerDimension(_generalJournalAccountEntryTax);
        if (TaxTable::find(_taxTrans.TaxCode).PaymentTaxCode
                        && TaxParameters::find().ConditionalTax == NoYes::Yes)
        {
            LedgerDimensionAccount taxPaymentAccount = TaxLedgerAccountGroup::find(TaxTable::find(_taxTransReverse.TaxCode).TaxAccountGroup).taxLedgerDimension(_taxTransReverse.TaxDirection);

            if (taxPaymentAccount)
            {
                ledgerDimension = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(taxPaymentAccount, ledgerDimension);
            }
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNotReversedTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes not processed tax transactions.
    /// </summary>
    /// <param name = "_taxTrans">The buffer of the table <c>TaxTrans</c></param>
    /// <remarks>This method is overridden in the class <c>TaxReversePrePaymentUsingManualTaxAmountAdjustments</c>.</remarks>
    protected void processNotReversedTrans(TaxTrans _taxTrans)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>