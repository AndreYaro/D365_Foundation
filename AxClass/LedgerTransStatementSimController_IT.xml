<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransStatementSimController_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerTransStatementSimController_IT extends SrsReportRunController implements BatchRetryable
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    public Query getQuery()
    {
        return this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    protected IdentifierName lastValueDesignName() 
    {
        IdentifierName ret = super();

        if (this.parmArgs() != null && this.parmArgs().dataset() == tableNum(MainAccount) && this.parmArgs().record() != null)
        {
            ret += tableStr(MainAccount);
        }

        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets default parameter values before the user is prompted for input.
    /// </summary>
    protected void prePromptModifyContract()
    {
        LedgerTransStatementSimContract_IT ledgerTransStatementSimContract = this.parmReportContract().parmRdpContract() as LedgerTransStatementSimContract_IT;
        MainAccount mainAccount;
        Query query = this.getQuery();

        if (this.parmArgs() && this.parmArgs().record())
        {
            mainAccount = this.parmArgs().record() as mainAccount;

            if (mainAccount != null)
            {
                // A Main Account was passed to the report.  Restrict the report results to the specified Main Account.
                QueryBuildDataSource qbds = query.dataSourceTable(tableNum(MainAccount));
                QueryBuildRange qbr = SysQuery::findOrCreateRange(qbds, fieldNum(MainAccount, MainAccountId));
                qbr.value(SysQuery::value(mainAccount.MainAccountId));
                qbr.status(RangeStatus::Locked);
            }
        }
        else
        {
            QueryBuildDataSource qbds = query.dataSourceTable(tableNum(MainAccount));
            qbds.clearRange(fieldNum(MainAccount, MainAccountId));
        }

        if (!ledgerTransStatementSimContract.parmFromDate())
        {
            // Set the default value for the From date to the first day of the current fiscal year.Apply the default value.
            ledgerTransStatementSimContract.parmFromDate(FiscalCalendars::findFirstDayofYear(Ledger::fiscalCalendar(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        }

        if (!ledgerTransStatementSimContract.parmToDate())
        {
            // Set the default value for the To date to the last day of the current fiscal year.Apply the default value.
            ledgerTransStatementSimContract.parmToDate(FiscalCalendars::findLastDayofYear(Ledger::fiscalCalendar(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        }

        if (!ledgerTransStatementSimContract.parmPostingLayers())
        {
            List postingLayerList = new List(Types::Enum);
            postingLayerList.addStart(CurrentOperationsTax::Current);
            ledgerTransStatementSimContract.parmPostingLayers(postingLayerList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the report contract before the report is executed.
    /// </summary>
    protected void preRunModifyContract()
    {
        LedgerTransStatementSimContract_IT contract = this.parmReportContract().parmRdpContract() as LedgerTransStatementSimContract_IT;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            contract.parmShowFooter(true);
            contract.parmShowTotals(true);

            contract.parmSysVersion(SysReportRun::sysVersion());
            contract.parmUserName(SysReportRun::userName());
        }
        else
        {
            contract.parmShowFooter(false);
            contract.parmShowTotals(false);
        }

        // if we are printing the tax information and InterCompany is enabled, we need to display the Company for ledger accounts on the report
        contract.parmDisplayCompanyForLedgerAccount(contract.parmSalesTaxSpec() && isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)));

        // Prepare the title.
        str reportTitle = strfmt("@SYS83214", enum2str(contract.parmTransaction()), DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, contract.parmPrimaryDimensionFocus()).Description);

        this.parmReportContract().parmReportCaption(reportTitle);

        this.parmReportContract().parmReportName(this.getReportName(contract));

        contract.parmReportTitle(reportTitle);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    protected container preRunValidate()
    {
        container validateResult = super();
        LedgerTransStatementSimContract_IT contract = this.parmReportContract().parmRdpContract() as LedgerTransStatementSimContract_IT;
        
        if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
        {
            GeneralLedgerBalanceProvider::getBalanceStatus(Ledger::current());
        }
        else
        {
            const boolean ShowErrors = true;
            boolean runUpdateBalancesInNewSession = true;

            // Ensure that the balances used by this run are up to date by
            // running this prior to starting the transaction scope for the report.
            // This must be done outside of the report transaction scope
            // so that the updates become available before the report transaction scope completes.
            DimensionFocusUpdateBalance::checkForRebuildBalancesInProgress(true);
            DimensionFocusUpdateBalance::updateBalance(
                DimensionHierarchy::findByTypeAndName(
                    DimensionHierarchyType::Focus,
                    contract.parmPrimaryDimensionFocus()),
                    ShowErrors,
                    runUpdateBalancesInNewSession,
                    Ledger::current());
        }

        return validateResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    //EXIL_0221_LedgerSimulation
    private str getReportName(LedgerTransStatementSimContract_IT _contract)
    {
        str reportNameLocal;
    
        reportNameLocal = ssrsReportStr(LedgerTransStatementSim_IT, Report);
        
        return reportNameLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerTransStatementSimController_IT controller = new LedgerTransStatementSimController_IT();
        controller.parmReportName(ssrsReportStr(LedgerTransStatementSim_IT, Report));
        controller.parmArgs(_args);
        controller.parmDialogCaption("@SYS83215");
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>