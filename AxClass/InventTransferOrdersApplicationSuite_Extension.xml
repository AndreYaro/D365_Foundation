<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferOrdersApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
#ISOCountryRegionCodes
[ExtensionOf(formStr(InventTransferOrders))]
internal final class InventTransferOrdersApplicationSuite_Extension
{
    private  const str InventTransferLineFiscalInfoEntityToExcelOption = 'InventTransferLineFiscalInfoEntityToExcelOption';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void init()
    {
        next init();

        Reasons.visible(FinansialReasonGlobalFeatureForTaxInTransferOrderToggle::isTaxInTransferOrderWithFinancialReasonEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Overrides the <c>editReasonCode</c> field's lookup behavior.
    /// </summary>
    /// <param name="_sender">The control that is bound to the <c>BankGroupId</c> field.</param>
    /// <param name="_eventArgs">The event arguments.</param>
    [FormControlEventHandler(formControlStr(InventTransferOrders, editReasonCode), FormControlEventType::Lookup)]
    public static void editReasonCode_OnLookup(FormControl _sender, FormControlEventArgs _eventArgs)
    {
        ReasonFormTable::reasonCodeLookup(_sender, LedgerJournalACType::Ledger, LedgerJournalACType::Ledger, true);

        FormControlCancelableSuperEventArgs formControlCancelableSuperEventArgs = _eventArgs as FormControlCancelableSuperEventArgs;
        if (formControlCancelableSuperEventArgs)
        {
            formControlCancelableSuperEventArgs.CancelSuperCall();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataEntityContext</Name>
				<Source><![CDATA[
    public ExportToExcelDataEntityContext getDataEntityContext(OfficeGeneratedExportMenuItem _menuItem)
    {
        ExportToExcelDataEntityContext context = next getDataEntityContext(_menuItem);

        if (_menuItem.id() == InventTransferLineFiscalInfoEntityToExcelOption)
        {
            context = ExportToExcelDataEntityContext::construct(tableStr(InventTransferLineFiscalInfoEntity), tableFieldGroupStr(InventTransferLineFiscalInfoEntity, AutoReport));

            ListEnumerator enumerator = context.entities().getEnumerator();
            while (enumerator.moveNext())
            {
                ExportToExcelDataEntityInfo entity = enumerator.current();

                if (entity.entityName() == tableStr(InventTransferLineFiscalInfoEntity))
                {
                    ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(tablestr(InventTransferLineFiscalInfoEntity));

                    var filter = filterBuilder.and(
                        filterBuilder.areEqual(fieldStr(InventTransferLineFiscalInfoEntity, DataAreaId), curExt()),
                        filterBuilder.areEqual(fieldStr(InventTransferLineFiscalInfoEntity, TransferId), InventTransferTable.TransferId));

                    entity.filter(filter);
                }
            }
        }

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    public void customizeMenuOptions(OfficeMenuOptions _menuOptions)
    {
        next customizeMenuOptions(_menuOptions);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]))
        {
            List exportOptions = _menuOptions.customMenuItems();

            var exportOption = OfficeGeneratedExportMenuItem::construct(tableStr(InventTransferLineFiscalInfoEntity), InventTransferLineFiscalInfoEntityToExcelOption);
            exportOption.displayName("@ApplicationSuite_Localization:TransferOrderLinesFiscalInformation");
            exportOptions.addEnd(exportOption);

            var entityContext = OfficeMenuDataEntityOptions::construct(tableStr(InventTransferLineFiscalInfoEntity));
            entityContext.includeDefault(false);
            entityContext.dataSourceIdInternal(InventTransferLineFiscalInfo_BR_DS.id());
            _menuOptions.dataEntityOptions().addEnd(entityContext);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>