<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransActionListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqTransActionListPageInteraction</c> class is the interaction class for the
///    <c>ReqTransActionListPage</c> form that is model driven.
/// </summary>
class ReqTransActionListPageInteraction extends ReqTransListPageInteraction
{
    ReqTransFormButtonStateProvider     reqTransFormButtonStateProvider;
    ReqTransPlanIdFilter                reqTransPlanIdFilter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the list page.
    /// </summary>
    public void initializing()
    {
        super();
        reqTransFormButtonStateProvider     = ReqTransFormButtonStateProvider::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the initial ranges on the data source.
    /// </summary>
    /// <param name="_query">
    ///    The input query.
    /// </param>
    public void initializeQuery(Query _query)
    {
        super(_query);

        reqTransPlanIdFilter = ReqTransPlanIdFilter::newStandard(formControlStr(ReqTransActionListPage, PlanFilter), this.listPage().formRun() as FormRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets state of the action pane controls based on the selected records.
    /// </summary>
    /// <remarks>
    /// Method is invoked by the framework each time a record is selected in the grid on the list page.
    /// </remarks>
    public void selectionChanged()
    {
        super();
        this.setButtonAccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the enabled state of action pane controls.
    /// </summary>
    public void setButtonAccess()
    {
        ReqTrans    reqTrans = this.listPage().activeRecord(querydatasourcestr(ReqTransAction, ReqTrans)) as ReqTrans;
        boolean     recordExists;

        reqTransFormButtonStateProvider.parmReqTrans(reqTrans);
        recordExists = reqTransFormButtonStateProvider.checkRuleRecordExists();

        this.listPage().actionPaneControlEnabled(formcontrolstr(ReqTransActionListPage, buttonReqRoute), reqTransFormButtonStateProvider.checkRuleUsingRoute());
        this.listPage().actionPaneControlEnabled(formcontrolstr(ReqTransActionListPage, buttonReqRouteJobs), reqTransFormButtonStateProvider.checkRuleUsingRoute());
        this.listPage().actionPaneControlEnabled(formcontrolstr(ReqTransActionListPage, buttonProdBOM), reqTransFormButtonStateProvider.checkRuleIsProduction());
        this.listPage().actionPaneControlEnabled(formcontrolstr(ReqTransActionListPage, buttonWrkCtrCapRes), reqTransFormButtonStateProvider.checkRuleUsingWorkCenterReservation());
        this.listPage().actionPaneControlEnabled(formcontrolstr(ReqTransActionListPage, buttonReqTransDerived), reqTransFormButtonStateProvider.checkRuleDerivedRequirements());

        this.listPage().actionPaneControlEnabled(formcontrolstr(ReqTransActionListPage, buttonReqTransDim), recordExists);
        this.listPage().actionPaneControlEnabled(formcontrolstr(ReqTransActionListPage, buttonReqTransDerived), recordExists);
        this.listPage().actionPaneControlEnabled(formcontrolstr(ReqTransActionListPage, reqTransExplosionTree), recordExists);
        this.listPage().actionPaneControlEnabled(formcontrolstr(ReqTransActionListPage, buttonWrkCtrCapRes), recordExists);
        this.listPage().actionPaneControlEnabled(formcontrolstr(ReqTransActionListPage, buttonInventOnHand), recordExists);

        if (#PmfEnabled)
        {
            this.listPage().actionPaneControlEnabled(formcontrolstr(ReqTransActionListPage, ReqTransFormula), reqTransFormButtonStateProvider.checkRuleIsFormulaEnabled());
            this.listPage().actionPaneControlEnabled(formcontrolstr(ReqTransActionListPage, ButtonProdBOM), reqTransFormButtonStateProvider.checkRuleIsProduction() && !reqTransFormButtonStateProvider.checkRuleIsFormulaEnabled());
        }
        this.listPage().actionPaneControlEnabled(formControlStr(ReqTransActionListPage, ReqActionApply), reqTrans.Direction == InventDirection::Receipt);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>