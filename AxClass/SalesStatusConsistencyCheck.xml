<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesStatusConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesStatusConsistencyCheck</c> class is a consistency check that verifies if sales lines status corresponds to their state
/// and subsequently if a sales order header status corresponds to the status of its lines.
/// </summary>
public class SalesStatusConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    configurationKeyId configurationKey()
    {
        return configurationkeynum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    Integer executionOrder()
    {
        return 30;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        Query salesOrderQuery = this.buildSalesOrdersQuery();
        QueryRun salesOrderQueryRun = new QueryRun(salesOrderQuery);

        progress.setTotal(QueryRun::getQueryRowCount(salesOrderQuery, maxInt()));
        
        info(strFmt("@SalesAndMarketing:SalesStatusConsistencyCheck_FoundToCheckTotal", int2Str(QueryRun::getQueryRowCount(salesOrderQuery, maxInt()))));

        while (salesOrderQueryRun.next())
        {
            SalesTable salesOrder = salesOrderQueryRun.get(tableNum(SalesTable));
            progress.setText(strFmt("@SalesAndMarketing:SalesStatusConsistencyCheck_ProgressUpdateText", salesOrder.SalesId));
            progress.incCount();

            try
            {
                ttsbegin;

                setPrefix(strFmt("@SalesAndMarketing:SalesStatusConsistencyCheck_SalesOrderLogSectionTitle", salesOrder.SalesId));
                int statusErrorsFixed = this.fixSalesOrderStatus(salesOrder);
                if (statusErrorsFixed > 0
                    && this.checkFix() == CheckFix::Fix)
                {
                    ttscommit;
                    info("@SalesAndMarketing:SalesStatusConsistencyCheck_StatusIsFixed");
                    this.updateCorrected(statusErrorsFixed);
                }
                else
                {
                    ttsabort;
                }
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }

        this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SalesAndMarketing:SalesStatusConsistencyCheck_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    static HelpTxt helpText()
    {
        return "@SalesAndMarketing:SalesStatusConsistencyCheck_HelpText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    ClassId treeParentClassId()
    {
        return classNum(SalesRootConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixSalesOrderStatus</Name>
				<Source><![CDATA[
    private int fixSalesOrderStatus(SalesTable _salesOrder)
    {
        int statusErrorsFixed;

        QueryRun salesOrderLinesQueryRun = new QueryRun(this.buildSalesOrderLinesQuery(_salesOrder.SalesId));

        while (salesOrderLinesQueryRun.next())
        {
            SalesLine salesLine = salesOrderLinesQueryRun.get(tableNum(SalesLine));
            SalesStatus originalOrderLineStatus = salesLine.SalesStatus;

            salesLine.setSalesStatus();

            if (originalOrderLineStatus != salesLine.SalesStatus)
            {
                salesLine.doUpdate();
                warning(strFmt(
                    "@SalesAndMarketing:SalesStatusConsistencyCheck_InvalidStatusDetectedForLine",
                    salesLine.ItemId,
                    enum2Str(originalOrderLineStatus),
                    enum2Str(salesLine.SalesStatus)));
                statusErrorsFixed++;
            }
        }

        SalesStatus originalOrderStatus = _salesOrder.SalesStatus;
        _salesOrder.updateBackStatus();
        _salesOrder.reread();
        
        if (originalOrderStatus != _salesOrder.SalesStatus)
        {
            warning(strFmt(
                "@SalesAndMarketing:SalesStatusConsistencyCheck_InvalidStatusDetectedForOrder",
                enum2Str(originalOrderStatus),
                enum2Str(_salesOrder.SalesStatus)));
            statusErrorsFixed++;
        }

        return statusErrorsFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesOrderLinesQuery</Name>
				<Source><![CDATA[
    private Query buildSalesOrderLinesQuery(SalesId _salesId)
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(SalesLine));
        qbds.update(true);

        qbds.addRange(fieldNum(SalesLine, SalesId)).value(queryValue(_salesId));

        this.addSalesStatusQueryRanges(fieldNum(SalesLine, SalesStatus), qbds);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesOrdersQuery</Name>
				<Source><![CDATA[
    private Query buildSalesOrdersQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(SalesTable));
        qbds.update(true);

        this.addSalesStatusQueryRanges(fieldNum(SalesTable, SalesStatus), qbds);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesStatusQueryRanges</Name>
				<Source><![CDATA[
    private void addSalesStatusQueryRanges(fieldId _salesStatusFieldId, QueryBuildDataSource _qbds)
    {
        QueryBuildRange salesStatusQueryBuildRange = _qbds.addRange(_salesStatusFieldId);
        salesStatusQueryBuildRange.value(queryValue(SalesStatus::Backorder));

        salesStatusQueryBuildRange = _qbds.addRange(_salesStatusFieldId);
        salesStatusQueryBuildRange.value(queryValue(SalesStatus::Delivered));
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>