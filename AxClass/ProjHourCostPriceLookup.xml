<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjHourCostPriceLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to lookup hour cost price from <c>ProjHourCostPrice</c> by <c>ProjPriceParameters</c> object.
/// </summary>
class ProjHourCostPriceLookup extends ProjPriceLookup
{
    protected ProjPriceParameters priceParameters;
    protected container variableValueFieldsCon;

    protected const ProjId projIdDefaultValue = '';
    protected const ProjInvoiceProjId contractIdDefaultValue = '';
    protected const CustAccount custAccountDefaultValue = '';
    protected const ResourceRecId resourceRecIdDefaultValue = 0;
    protected const ResourceCategoryRecId resourceCategoryRecIdDefaultValue = 0;
    protected const ProjCategoryId projCategoryIdDefaultValue = '';
    protected const ProjPriceGroupID projPriceGroupIdDefaultValue = '';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initProjTableRelatedParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize parameters realted to project table if project ID is defined.
    /// </summary>
    protected void initProjTableRelatedParameters()
    {
        ProjTable projectTable;

        if (priceParameters.parmProjId())
        {
            projectTable = ProjTable::find(priceParameters.parmProjId());
        }

        // For the case of get, set customer account if customer account is not set and project table buffer is set.
        if (!priceParameters.parmCustAccount() && projectTable)
        { 
            priceParameters.parmCustAccount(projectTable.CustAccount);
        }
       
        // For the case of get, set project contract if project contract is not set and project table buffer is set.
        if (!priceParameters.parmProjInvoiceProjId() && projectTable)
        {
            priceParameters.parmProjInvoiceProjId(projectTable.ProjInvoiceProjId);
        }

        // For the case of get, set price group if price group is not set and project table buffer is set.
        if (!priceParameters.parmProjPriceGroupID())
        {
            if (projectTable)
            {
                priceParameters.parmProjPriceGroupID(projectTable.ProjPriceGroup);
            }

            // If the price group is still not set, then lookup the price group at the project contract level.
            if (!priceParameters.parmProjPriceGroupID() && priceParameters.parmProjInvoiceProjId())
            {
                ProjInvoiceTable projInvoiceTable  = ProjInvoiceTable::find(priceParameters.parmProjInvoiceProjId());
               
                if (projInvoiceTable)
                {
                    priceParameters.parmProjPriceGroupID(projInvoiceTable.ProjPriceGroup);
                }
            }

            // If the price group is still not set, then lookup the price group at the customer level.
            if (!priceParameters.parmProjPriceGroupID() && priceParameters.parmCustAccount())
            {
                CustTable custTable = CustTable::find(priceParameters.parmCustAccount());

                if (custTable)
                {
                    priceParameters.parmProjPriceGroupID(custTable.PriceGroup);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initResourceRelatedParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize parameters realted to resource record identifier if resource record identifier is defined.
    /// </summary>
    protected void initResourceRelatedParameters()
    {
        // If resource is specified, look up resource category by resource record ID.
        if (!priceParameters.parmResourceCategoryRecId() && priceParameters.parmResourceRecId())
        {
            priceParameters.parmResourceCategoryRecId(
                ResourceFacade::getResourceCategory(
                    priceParameters.parmResourceRecId(),
                    priceParameters.parmTransDate()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseResourceRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get use resource rate.
    /// </summary>
    /// <returns>true to query with use resource rate = true; otherwise fasle.</returns>
    protected boolean parmUseResourceRate()
    {
        return priceParameters.parmResourceRecId() 
                && ResourceFacade::useResourceRate(priceParameters.parmResourceRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTablefieldlNumsToParameterValuesMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the map of <c>ProjHourCostPrice</c> table fields ID with the <c>ProjPriceParameters</c> class parameter values.
    /// </summary>
    protected void initTablefieldlNumsToParameterValuesMap()
    {
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, TransDate), priceParameters.parmTransDate());
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, IsResourceRate), this.parmUseResourceRate());
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, ProjId), priceParameters.parmProjId());
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, PSAProjInvoiceProjId), priceParameters.parmProjInvoiceProjId());
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, PSACustAccount), priceParameters.parmCustAccount());
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, Resource), priceParameters.parmResourceRecId());
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, ResourceCategory), priceParameters.parmResourceCategoryRecId());
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, CategoryId), priceParameters.parmProjCategoryId());
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, PSAPriceGroupId), priceParameters.parmProjPriceGroupID());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVariableValueFieldsContainer</Name>
				<Source><![CDATA[
    [Replaceable]
    /// <summary>
    /// Initialize the container of variable values lookup fields in <c>ProjHourCostPrice</c> table fields which will have variable values
    /// Which lookup will be down between parameter specified value and default value.
    /// The query order will be done according to the order of this container.
    /// The lookup will look for the complete combinations of all the fields specified here.
    /// </summary>
    /// <remarks>
    /// The table fields which specified in this container must also be specified in variableValueFieldsToDefaultLookupValuesMap.
    /// </remarks>
    protected void initVariableValueFieldsContainer()
    {
        variableValueFieldsCon = [
            fieldNum(ProjHourCostPrice, ProjId),
            fieldNum(ProjHourCostPrice, PSAProjInvoiceProjId),
            fieldNum(ProjHourCostPrice, PSACustAccount),
            fieldNum(ProjHourCostPrice, Resource),
            fieldNum(ProjHourCostPrice, ResourceCategory),
            fieldNum(ProjHourCostPrice, CategoryId),
            fieldNum(ProjHourCostPrice, PSAPriceGroupId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVariableValueFieldsToDefaultLookupValuesMap</Name>
				<Source><![CDATA[
    [Replaceable]
    /// <summary>
    /// Initialize the map of <c>ProjHourCostPrice</c> table variable values fields ID with default lookup values.
    /// Default value will be used to lookup if the field is not specified in the lookup fields container precedence list.
    /// </summary>
    protected void initVariableValueFieldsToDefaultLookupValuesMap()
    {
        variableValueFieldsToDefaultLookupValuesMap.insert(fieldNum(ProjHourCostPrice, ProjId), projIdDefaultValue);
        variableValueFieldsToDefaultLookupValuesMap.insert(fieldNum(ProjHourCostPrice, PSAProjInvoiceProjId), contractIdDefaultValue);
        variableValueFieldsToDefaultLookupValuesMap.insert(fieldNum(ProjHourCostPrice, PSACustAccount), custAccountDefaultValue);
        variableValueFieldsToDefaultLookupValuesMap.insert(fieldNum(ProjHourCostPrice, Resource), resourceRecIdDefaultValue);
        variableValueFieldsToDefaultLookupValuesMap.insert(fieldNum(ProjHourCostPrice, ResourceCategory), resourceCategoryRecIdDefaultValue);
        variableValueFieldsToDefaultLookupValuesMap.insert(fieldNum(ProjHourCostPrice, CategoryId), projCategoryIdDefaultValue);
        variableValueFieldsToDefaultLookupValuesMap.insert(fieldNum(ProjHourCostPrice, PSAPriceGroupId), projPriceGroupIdDefaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFixedValueFieldList</Name>
				<Source><![CDATA[
    [Replaceable]
    /// <summary>
    /// Initialize the list of the fixed values lookup fields for <c>ProjHourCostPrice</c> table.
    /// These fields value should not change once it's initialize during the entire lookup process.
    /// </summary>
    /// <remarks>
    /// Each table field nums specified in this list should not appear in variableValueFieldsToDefaultLookupValuesMap as key.
    /// </remarks>
    protected void initFixedValueFieldList()
    {
        fixedValueFieldsList.addEnd(fieldNum(ProjHourCostPrice, TransDate));
        fixedValueFieldsList.addEnd(fieldNum(ProjHourCostPrice, IsResourceRate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVariableValueLookupFieldsConPrecedenceList</Name>
				<Source><![CDATA[
    [Replaceable]
    /// <summary>
    /// Initialize this <c>ProjHourCostPrice</c> table fields container list which specified the specific query lookup order.
    /// Each container includes the combination of variable value fields to lookup. Value to lookup for each field in the container 
    /// will be specified by the parameter value in <c>ProjPriceParameters</c> object.
    /// </summary>
    /// <remarks>
    /// For each container, it should only be able to lookup at most the number of fields equal to the fields specified 
    /// in the initTableFieldNumsToDefaultLookupValuesMap.
    /// Each precedence container will only be query if the fields which is not specified in the container has value
    /// specified in the priceParameters object for the associated fields.
    /// </remarks>
    protected void initVariableValueLookupFieldsConPrecedenceList()
    {
        container queryFieldsCon;
        this.generatePrecedenceListContainer(1, queryFieldsCon);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct <c>ProjHourCostPriceLookup</c> object.
    /// </summary>
    /// <param name = "_priceParameters"><c>ProjPriceParameters</c> object for parameters specification.</param>
    /// <returns><c>ProjHourCostPriceLookup</c> object.</returns>
    public static ProjHourCostPriceLookup construct(ProjPriceParameters _priceParameters)
    {
        ProjHourCostPriceLookup hourCostPriceLookup = new ProjHourCostPriceLookup();
        hourCostPriceLookup.priceParameters = _priceParameters;
        hourCostPriceLookup.initProjTableRelatedParameters();
        hourCostPriceLookup.initResourceRelatedParameters();
        hourCostPriceLookup.initVariableValueFieldsContainer();
        hourCostPriceLookup.initTablefieldlNumsToParameterValuesMap();
        hourCostPriceLookup.initVariableValueFieldsToDefaultLookupValuesMap();
        hourCostPriceLookup.initFixedValueFieldList();
        hourCostPriceLookup.initVariableValueLookupFieldsConPrecedenceList();
        return hourCostPriceLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjHourCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the <c>ProjHourCostPrice</c> table record according to the
    /// <c>ProjPriceParameters</c> class parameters specification.
    /// </summary>
    /// <returns>Hour cost price.</returns>
    public ProjHourCostPrice getProjHourCostPrice()
    {
        ProjOpsPricingLogger logger = ProjOpsPricingLogger::createLogger(classStr(ProjHourCostPriceLookup));

        using (var activityContext = logger.projOpsPricingActivity().codeInstrumentationContext(methodStr(ProjHourCostPriceLookup, getProjHourCostPrice)))
        {
            return this.findHourCostPriceOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryBuildDataSourceWithFixedValueFieldsBySpecificFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query build date source with the fixed values fields by specific fields.
    /// </summary>
    /// <param name = "_fieldId">Specific field identifier for matching.</param>
    /// <param name = "_qbdsProjHourCostPrice">Query build datasource for the project hour cost price table query filter.</param>
    /// <returns>true if specific field identifier matches the expected value; otherwise, false.</returns>
    protected boolean buildQueryBuildDataSourceWithFixedValueFieldsBySpecificFieldId(FieldId _fieldId, QueryBuildDataSource _qbdsProjHourCostPrice)
    {
        boolean buildBySpecificFieldId = false;

        if (_fieldId == fieldNum(ProjHourCostPrice, TransDate))
        {
            buildBySpecificFieldId = true;
            _qbdsProjHourcostPrice.addRange(_fieldId)
                .value(queryRange(
                    dateNull(),
                    fieldNumToParmValueMap.lookup(fieldNum(ProjHourCostPrice, TransDate))));
        }

        return buildBySpecificFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFieldFromContainer</Name>
				<Source><![CDATA[
    private container removeFieldFromContainer(container _queryFieldsCon, FieldId _fieldToDelete)
    {
        container  queryFieldsCon = _queryFieldsCon;

        int conPosition = conFind(queryFieldsCon, _fieldToDelete);
        if (conPosition)
        {
            queryFieldsCon = conDel(queryFieldsCon, conPosition, 1);
        }

        return queryFieldsCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePrecedenceListContainer</Name>
				<Source><![CDATA[
    private void generatePrecedenceListContainer(int _loopNumber, container _queryFieldsCon)
    {
        // Generate variableValueFieldsLookupConPrecedenceList with complete fields combination for the fields which specified in lookupFieldsCon.

        container queryFieldsCon = _queryFieldsCon;
        int loopNumber = _loopNumber;
        FieldId targetField = conPeek(variableValueFieldsCon, loopNumber);
        
        if (loopNumber == conLen(variableValueFieldsCon))
        {
            queryFieldsCon += targetField;
            variableValueFieldsLookupConPrecedenceList.addEnd(queryFieldsCon);
            queryFieldsCon = this.removeFieldFromContainer(queryFieldsCon, targetField);
            variableValueFieldsLookupConPrecedenceList.addEnd(queryFieldsCon);
        }
        else
        {
            queryFieldsCon += targetField;
            loopNumber++;
            this.generatePrecedenceListContainer(loopNumber, queryFieldsCon);
            queryFieldsCon = this.removeFieldFromContainer(queryFieldsCon, targetField);
            this.generatePrecedenceListContainer(loopNumber, queryFieldsCon);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjectParameterByParentProjectRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update project parameters by project project ID. and map to parent project.
    /// </summary>
    /// <param name = "_parentProjectId">Parent project identifier.</param>
    protected void updateProjectParameterByParentProjectRecId(ProjId _parentProjectId)
    {
        priceParameters.parmProjId(_parentProjectId);

        // Set project table related parameters to empty.
        priceParameters.parmCustAccount(custAccountDefaultValue);
        priceParameters.parmProjInvoiceProjId(contractIdDefaultValue);
        priceParameters.parmProjPriceGroupID(projPriceGroupIdDefaultValue);

        // Reset project table related parameters.
        this.initProjTableRelatedParameters();

        // Update map values with the latest value.
        fieldNumToParmValueMap.remove(fieldNum(ProjHourCostPrice, ProjId));
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, ProjId), priceParameters.parmProjId());

        fieldNumToParmValueMap.remove(fieldNum(ProjHourCostPrice, PSACustAccount));
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, PSACustAccount), priceParameters.parmCustAccount());

        fieldNumToParmValueMap.remove(fieldNum(ProjHourCostPrice, PSAProjInvoiceProjId));
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, PSAProjInvoiceProjId), priceParameters.parmProjInvoiceProjId());

        fieldNumToParmValueMap.remove(fieldNum(ProjHourCostPrice, PSAPriceGroupId));
        fieldNumToParmValueMap.insert(fieldNum(ProjHourCostPrice, PSAPriceGroupId), priceParameters.parmProjPriceGroupID());
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldQueryByLookupFieldsCon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override inherited class to determine whether it should query by the specified lookup fields in 
    /// the container. For fields which are in the variableValueFieldsCon but does not exists in 
    /// _lookupFieldsCon, this function will return false if those fields has default value.
    /// </summary>
    /// <param name = "_lookupFieldsCon">Lookup fields container.</param>
    /// <returns>true to query by lookup fields in the container; otherwise, fasle.</returns>
    protected boolean shouldQueryByLookupFieldsCon(container _lookupFieldsCon)
    {
        // Determine whether it should query by the specified lookup fields in the container.
        // For fields which are in the variableValueFieldsCon but does not exists in _lookupFieldsCon,
        // this function will return false if those fields has default value.

        boolean shouldQueryByLookup = true;
        
        for (int i = 1; i <= conLen(variableValueFieldsCon); i++)
        {
            FieldId currentfield = conPeek(variableValueFieldsCon, i);
            if (!conFind(_lookupFieldsCon, currentfield))
            {
                if (fieldNumToParmValueMap.lookup(currentfield) 
                    == variableValueFieldsToDefaultLookupValuesMap.lookup(currentfield))
                {
                    return false;
                }
            }
        }

        return shouldQueryByLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryByFixedValueLookupFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override base class to build hour cost price query by the fixed values lookup fields.
    /// </summary>
    /// <returns>Hour cost price query.</returns>
    protected Query buildQueryByFixedValueLookupFields()
    {
        Query query = new Query();
        query.firstOnly1(true);
        
        QueryBuildDataSource qbdsProjHourCostPrice = query.addDataSource(targetTableNum);
        qbdsProjHourCostPrice.addSortField(fieldNum(ProjHourCostPrice, TransDate), SortOrder::Descending);
        
        ListEnumerator fixedValuesLookupFieldsListEnum = fixedValueFieldsList.getEnumerator();
        while (fixedValuesLookupFieldsListEnum.moveNext())
        {
            if (!this.buildQueryBuildDataSourceWithFixedValueFieldsBySpecificFieldId(
                fixedValuesLookupFieldsListEnum.current(), qbdsProjHourCostPrice))
            {
                qbdsProjHourCostPrice.addRange(fixedValuesLookupFieldsListEnum.current())
                    .value(queryValue(fieldNumToParmValueMap.lookup(fixedValuesLookupFieldsListEnum.current())));
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryByVariableValueLookupFieldsWithDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override base class to build hour cost price query by variable value lookup fields with default values.
    /// Query build data source range will only be added for the specific field
    /// if it has not been specified in the variable values lookup fields container.
    /// </summary>
    /// <param name = "_priceQuery">Price lookup query.</param>
    /// <param name = "_currentVariableValueslookupFieldsCon">Currenct variable values lookup fields container.</param>
    protected void buildQueryByVariableValueLookupFieldsWithDefaultValue(Query _priceQuery, container _currentVariableValueslookupFieldsCon)
    {
        QueryBuildDataSource qbdsProjHourCostPrice = _priceQuery.dataSourceTable(targetTableNum);

        for (int i = 1; i <= conLen(variableValueFieldsCon); i++)
        {
            boolean existsInVariableValuesLookupFieldContainer;
            FieldId currentField = conPeek(variableValueFieldsCon, i);
            if (conFind(_currentVariableValueslookupFieldsCon, currentField))
            {
                existsInVariableValuesLookupFieldContainer = true;
            }

            if (!existsInVariableValuesLookupFieldContainer)
            {
                qbdsProjHourCostPrice.addRange(currentField)
                    .value(queryValue(variableValueFieldsToDefaultLookupValuesMap.lookup(currentField)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override base class to lookup hour cost price according to the specified query.
    /// </summary>
    /// <param name = "_priceQuery">Specified price lookup query.</param>
    /// <returns>Hour cost price table buffer.</returns>
    protected Common find(Query _priceQuery)
    {
        ProjHourCostPrice hourCostPriceTable;

        QueryRun queryRun = new QueryRun(_priceQuery);

        while (queryRun.next())
        {
            ProjHourCostPrice costPriceBuffer = queryRun.get(targetTableNum) as ProjHourCostPrice;
            hourCostPriceTable.data(costPriceBuffer);
        }

        return hourCostPriceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
        targetTableNum = tableNum(ProjHourCostPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findHourCostPriceOperation</Name>
				<Source><![CDATA[
    private ProjHourCostPrice findHourCostPriceOperation()
    {
        ProjHourCostPrice hourCostPriceTable;
        select firstonly RecId from hourCostPriceTable;

        // Only execute the lookup if the table has at least one record.
        if (hourCostPriceTable)
        {
            hourCostPriceTable.clear();
            // Attempt to lookup hour cost price according to the fields lookup container precedence list.
            hourCostPriceTable = this.findPriceLoop() as ProjHourCostPrice;

            // If price record cannot be found, then lookup hour cost price by the parent project.
            if (!hourCostPriceTable)
            {
                hourCostPriceTable = this.findHourCostPriceByParentProject();
            }

            // If price record cannot be found, then attempt to lookup by only the fixed value fields and all variable fields by default values.
            if (!hourCostPriceTable)
            {
                hourCostPriceTable = this.findPriceByFixedValueFieldOnly() as ProjHourCostPrice;
            }
        }

        return hourCostPriceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findHourCostPriceByParentProject</Name>
				<Source><![CDATA[
    private ProjHourCostPrice findHourCostPriceByParentProject()
    {
        // Lookup the project hour cost price from parent project.
        // This function should only be called if hour cost price cannot be found by looking up the current project.

        ProjHourCostPrice hourCostPriceTable;

        do
        {
            ProjTable   projTable;
            ProjTable   parentProjTable;

            // Look up parent project and avoid infinite loop in case of the project record has both the ProjId and ParentId having the same values.
            select firstonly RecId from parentProjTable
                exists join projTable
                    where projTable.ProjId == priceParameters.parmProjId()
                        && projTable.ParentId != ''
                        && projTable.ParentId == parentProjTable.ProjId
                        && projTable.RecId != parentProjTable.RecId;

            ProjId parentProjectId = parentProjTable.ProjId;
            
            if (parentProjectId)
            {
                this.updateProjectParameterByParentProjectRecId(parentProjectId);
                hourCostPriceTable = this.findPriceLoop() as ProjHourCostPrice;
            }
            else
            {
                priceParameters.parmProjId('');
            }
        }
        while (!hourCostPriceTable && priceParameters.parmProjId());
        
        return hourCostPriceTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>