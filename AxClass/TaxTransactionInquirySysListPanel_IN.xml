<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransactionInquirySysListPanel_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is a sys list panel for tax transaction inquiry and it extends <c>SysListPanel</c>.
/// the list panel is used for selecting the inquiry fields and the total fields.
/// </summary>
public class TaxTransactionInquirySysListPanel_IN extends SysListPanel
{
    TableId                                     taxTransactionTableId;
    Set                                         allowedSet;
    TaxTransactionInquiryFieldPrioritizer_IN    prioritizer;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addData</Name>
				<Source><![CDATA[
    public void addData(container data)
    {
        TaxTransactionInquiryFieldObject_IN  fieldObject;
        FieldId                              fieldId;
        int                                  i;

        if (prioritizer.elements() + conLen(data) > 60)
        {
            throw error("@TaxTransactionInquiry:TaxTransactionInquiryFieldsLimit");
        }

        for (i=1; i<=conlen(data); i++)
        {
            fieldId = conpeek(data, i);
            fieldObject = TaxTransactionInquiryFieldObject_IN::construct(taxTransactionTableId, fieldId);
            prioritizer.addFieldObject(fieldObject);
            allowedSet.remove(fieldObject.parmFieldId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    public container getData()
    {
        container       selectedData;
        container       availableData;
        SetEnumerator   setEnumerator;
        ListEnumerator  listEnumerator;
        TaxTransactionInquiryFieldObject_IN  fieldObject;
        FieldId                              fieldId;

        listEnumerator = prioritizer.getFieldObjectsEnumerator();

        while (listEnumerator.moveNext())
        {
            fieldObject = listEnumerator.current();
            selectedData += [[fieldObject.parmFieldId(), fieldObject.toString()]];
        }

        setEnumerator = allowedSet.getEnumerator();

        while (setEnumerator.moveNext())
        {
            fieldId = setEnumerator.current();
            fieldObject = TaxTransactionInquiryFieldObject_IN::construct(taxTransactionTableId, fieldId);

            if (!prioritizer.hasFieldObject(fieldObject))
            {
                availableData += [[fieldObject.parmFieldId(), fieldObject.toString()]];
            }
        }

        return [availableData, selectedData];
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeData</Name>
				<Source><![CDATA[
    public void removeData(container data)
    {
        TaxTransactionInquiryFieldObject_IN  fieldObject;
        FieldId                              fieldId;
        int                                  i;

        for (i = conlen(data); i; i--)
        {
            fieldId = conpeek(data, i);
            fieldObject = TaxTransactionInquiryFieldObject_IN::construct(taxTransactionTableId, fieldId);
            prioritizer.removeFieldObject(fieldObject);
            allowedSet.add(fieldObject.parmFieldId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowedSet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Set parmAllowedSet(Set _allowedSet = allowedSet)
    {
        allowedSet = _allowedSet;
        return allowedset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxTransactionTableId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TableId parmTaxTransactionTableId(TableId _taxTransactionTableId = taxTransactionTableId)
    {
        taxTransactionTableId = _taxTransactionTableId;
        return taxTransactionTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaptionSelected</Name>
				<Source><![CDATA[
    public Caption parmCaptionSelected(Caption _captionSelected = captionSelected)
    {
        return "@SYS24159";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaptionAvailable</Name>
				<Source><![CDATA[
    public Caption parmCaptionAvailable(Caption _captionAvailable = captionAvailable)
    {
        return "@SYS30545";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxTransactionInquiryFieldPrioritizer</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxTransactionInquiryFieldPrioritizer_IN parmTaxTransactionInquiryFieldPrioritizer(TaxTransactionInquiryFieldPrioritizer_IN _prioritizer = prioritizer)
    {
        prioritizer = _prioritizer;

        return prioritizer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasRemoveAllButton</Name>
				<Source><![CDATA[
    public boolean parmHasRemoveAllButton(boolean _hasRemoveAllButton = hasRemoveAllButton)
    {
        hasRemoveAllButton = _hasRemoveAllButton;
        return hasRemoveAllButton && this.parmItemsNeeded() == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImageId</Name>
				<Source><![CDATA[
    public int parmImageId(int _imageId = imageId)
    {
        #resAppl

        return #ImageDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortMethod</Name>
				<Source><![CDATA[
    protected FormListSort sortMethod()
    {
        return FormListSort::NoSort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxTransactionInquirySysListPanel_IN construct()
    {
        return new TaxTransactionInquirySysListPanel_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an instance of the class SysListPanel and trans some parameters to it.
    /// </summary>
    /// <param name = "formRun">the formRun of the form</param>
    /// <param name = "parentId">the control id of the parent control</param>
    /// <param name = "hasAddAllButton">whether it has the "Add All" button</param>
    /// <param name = "hasRemoveAllButton">whether it has the "Remove All" button</param>
    /// <param name = "hasUpDownButton">whether it has the "Up" button and "Down" button</param>
    /// <returns>
    /// An instance of the list panel.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static SysListPanel newForm(
        FormRun formRun,
        int     parentId,
        boolean hasAddAllButton     = false,
        boolean hasRemoveAllButton  = false,
        boolean hasUpDownButton     = false)
    {
        TaxTransactionInquirySysListPanel_IN    sysListPanel = TaxTransactionInquirySysListPanel_IN::construct();

        sysListPanel.parmFormRun(formRun);
        sysListPanel.parmParentId(parentId);
        sysListPanel.parmHasAddAllButton(hasAddAllButton);
        syslistPanel.parmHasRemoveAllButton(hasRemoveAllButton);
        syslistPanel.parmHasUpDownButton(hasUpDownButton);

        // Since this list panel's listboxes are shorter than most, move the add/remove buttons higher than the default setting in SysListPanel
        sysListPanel.parmPanelSeparatorTopMargin(30);
        sysListPanel.build();
        return sysListPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>positionsUpdated</Name>
				<Source><![CDATA[
    protected container positionsUpdated()
    {
        Map positionMap = new Map(Types::String,Types::Integer);
        int idx         = viewSelected.getNextItem(FormListNext::All);
        FieldId         fieldId;

        while (idx != -1)
        {
            fieldId = viewSelected.getItem(idx).data();
            positionMap.insert(int642str(fieldId), idx);

            TaxTransactionInquiryFieldObject_IN fieldObject = TaxTransactionInquiryFieldObject_IN::construct(taxTransactionTableId, fieldId);
            prioritizer.removeFieldObject(fieldObject);
            prioritizer.addFieldObject(fieldObject);

            idx = viewSelected.getNextItem(FormListNext::All, idx);
        }

        this.positionsUpdatedDelegate();

        return positionMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>positionsUpdatedDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// The delegate of the position updated event.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    delegate void positionsUpdatedDelegate()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>