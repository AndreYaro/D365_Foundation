<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransferOpeningController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerTransferOpeningController</c> class handles the business logic for the
///    <c>LedgerTransferOpening</c> report.
/// </summary>
class LedgerTransferOpeningController extends SrsReportRunController implements BatchRetryable
{
    // <PubSect>
    #SysOperation
    // </PubSect>
    boolean calledFromMenu;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public IDialogable dialog()
    {
        Dialog dialogForm;
        FormBuildGroupControl queriesGroupControl;

        dialogForm = super();

        if (dialogForm
            && !calledFromMenu
            && (PublicSectorUtils::isLedgerYearEndClosingEnabled()))
        {
            // The Queries Group, which shows the active query filters, is not applicable to the PS year end process
            queriesGroupControl = dialogForm.dialogForm().control(#QueriesGroupControlName);
            if (queriesGroupControl)
            {
                queriesGroupControl.visible(false);
            }
        }

        return dialogForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the ability to modify the report contract before the dialog box is displayed to user.
    /// </summary>
    /// <remarks>
    /// Use this method to change the report contract. A common use case is to add and change a query. This
    /// method is called only during interactive scenario, before rendering the UI to user.For batch
    /// scenario, we do not call start this method, because there is no user interaction and contract
    /// values are already saved in batch.Do not create any instance variables in this code, because if
    /// they are used during the lifetime of the controller they will fail in batch cases.
    /// </remarks>
    protected void prePromptModifyContract()
    {
        #ISOCountryRegionCodes

        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoCZ, GlobalizationConstants::FeatureReferenceEEU00030],
            [#isoHU, GlobalizationConstants::FeatureReferenceEEU00030] ],
            funcName()
        );

        Map memberInfoMap;
        SrsReportDesignProperties designProperties;
        SrsReportRdpDataContractInfo rdpContractInfo;
        LedgerTransferOpeningContract ledgerTransferOpeningContract = this.parmReportContract().parmRdpContract() as LedgerTransferOpeningContract;

        rdpContractInfo = this.getDataContractInfoObjects().lookup(classStr(LedgerTransferOpeningContract));
        memberInfoMap = rdpContractInfo.getMembers();
        this.setParameters(ledgerTransferOpeningContract);

        if (PublicSectorUtils::isLedgerYearEndClosingEnabled())
        {
            designProperties = memberInfoMap.lookup(methodStr(LedgerTransferOpeningContract, parmSession));
            designProperties.parmHidden(true);

            designProperties = memberInfoMap.lookup(methodStr(LedgerTransferOpeningContract, parmProcessTimestamp));
            designProperties.parmHidden(true);
        }

        if (!calledFromMenu)
        {
            designProperties = memberInfoMap.lookup(methodStr(LedgerTransferOpeningContract, parmPeriodEndInput));
            designProperties.parmHidden(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the report contract before it runs the report to set the report parameters.
    /// </summary>
    protected void preRunModifyContract()
    {
        #ISOCountryRegionCodes
        LedgerTransferOpeningContract  contract;

        contract = this.parmReportContract().parmRdpContract() as LedgerTransferOpeningContract;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            contract.parmSysVersion(SysReportRun::sysVersion());
            contract.parmUserName(SysReportRun::userName());
            contract.parmDisplayDescription(true);
        }
        else
        {
            contract.parmDisplayDescription(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets the values for the parameters.
    /// </summary>
    /// <param name="_ledgerTransferOpeningContract">
    /// The <c>LedgerTransferOpeningContract</c> class object.
    /// </param>
    public void setParameters(LedgerTransferOpeningContract _ledgerTransferOpeningContract)
    {
        TransDate periodEnd;
        TransDate periodNext;
        PeriodStartClosing periodEndInput;
        LedgerTransferOpening ledgerTransferOpening;
        OpeningMethod methodStatus;
        OpeningMethod methodOperations;
        MainAccountNum transferResult;
        OpeningMethod om;
        int session;
        utcDateTime processTimestamp;

        if (this.parmArgs() && classIdGet(this.parmArgs().parmObject()) == classNum(LedgerTransferOpening))
        {
            ledgerTransferOpening   = this.parmArgs().parmObject();
            periodEnd               = ledgerTransferOpening.parmPeriodEnd();
            periodNext              = ledgerTransferOpening.parmPeriodNext();
            methodOperations        = ledgerTransferOpening.parmMethodOperations();
            methodStatus            = ledgerTransferOpening.parmMethodStatus();
            transferResult          = ledgerTransferOpening.parmTransferResultAccount();
            session                 = ledgerTransferOpening.getSession();
            processTimestamp        = ledgerTransferOpening.getProcessTimestamp();
            periodEndInput          = periodEnd;
            calledFromMenu          = false;
        }
        else
        {
            methodOperations    = om;
            methodStatus        = om;
            transferResult      = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(LedgerSystemAccounts::getDefaultAccount(LedgerPostingType::YearResult));
            calledFromMenu      = true;
            processTimestamp    = DateTimeUtil::utcNow();
        }

        _ledgerTransferOpeningContract.parmPeriodEnd(periodEnd);
        _ledgerTransferOpeningContract.parmPeriodEndInput(periodEndInput);
        _ledgerTransferOpeningContract.parmPeriodNext(periodNext);
        _ledgerTransferOpeningContract.parmCalledFromMenu(calledFromMenu);
        _ledgerTransferOpeningContract.parmMethodStatus(methodStatus);
        _ledgerTransferOpeningContract.parmMethodOperations(methodOperations);
        _ledgerTransferOpeningContract.parmTransferResult(transferResult);
        _ledgerTransferOpeningContract.parmSession(session);
        _ledgerTransferOpeningContract.parmProcessTimestamp(processTimestamp ? processTimestamp : DateTimeUtil::utcNow());
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    public boolean showQuerySelectButton(str parameterName)
    {
        boolean showQuerySelectButton;

        //
        // If the report is called from the process and not menu, we do not want to allow
        // the query to be overridden. We want to show all the transactions that took
        // place for this instance of the year end process in Public Sector.
        //
        if (PublicSectorUtils::isLedgerYearEndClosingEnabled())
        {
            showQuerySelectButton = calledFromMenu;
        }
        else
        {
            showQuerySelectButton = true;
        }

        return showQuerySelectButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerTransferOpeningController controller = new LedgerTransferOpeningController();
        controller.parmReportName(ssrsReportStr(LedgerTransferOpening, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>