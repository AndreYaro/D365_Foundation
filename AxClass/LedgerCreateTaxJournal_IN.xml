<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCreateTaxJournal_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates the ledger journal with tax.
/// </summary>
public class LedgerCreateTaxJournal_IN
{
    QueryRun                queryRun;
    Counter                 progressCounter;
    Counter                 progressTotal;
    JournalId               journalNum;
    TmpTaxJournal_IN        tmpTaxJournal;

    LedgerJournalTable      ledgerJournalTable;
    LedgerJournalEngine     ledgerJournalEngine;
    FormDataSource          formDataSource;
    LedgerJournalTrans      ledgerJournalTrans;
    Voucher                 lastVoucher;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the instance of the <c>LedgerCreateTaxJournal_IN</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The ledger journal table.
    /// </param>
    /// <param name="_ledgerJournalEngine">
    /// The ledger journal engine.
    /// </param>
    /// <param name="_formDataSource">
    /// The form data source.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal trans.
    /// </param>
    /// <param name="_taxJournal">
    /// The temporary tax journal.
    /// </param>
    /// <param name="exciseType">
    /// The excise type.
    /// </param>
    public void init(LedgerJournalTable         _ledgerJournalTable,
                     LedgerJournalEngine        _ledgerJournalEngine,
                     FormDataSource             _formDataSource,
                     LedgerJournalTrans         _ledgerJournalTrans,
                     TmpTaxJournal_IN           _taxJournal,
                     ExciseType_IN              exciseType = ExciseType_IN::None)
    {
        this.parmTmpTaxJournal(_taxJournal);

        ledgerJournalTable    = _ledgerJournalTable;
        ledgerJournalEngine   = _ledgerJournalEngine;
        formDataSource        = _formDataSource;
        ledgerJournalTrans    = _ledgerJournalTrans;

        this.run(_ledgerJournalTrans, exciseType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalNum</Name>
				<Source><![CDATA[
    public JournalId parmJournalNum(JournalId _journalNum = journalNum)
    {
        journalNum = _journalNum;
        return journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpTaxJournal</Name>
				<Source><![CDATA[
    public TmpTaxJournal_IN parmTmpTaxJournal(TmpTaxJournal_IN _tmpTaxJournal = tmpTaxJournal)
    {
        tmpTaxJournal = _tmpTaxJournal;
        return tmpTaxJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// The run method of the <c>LedgerCreateTaxJournal_IN</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal trans information.
    /// </param>
    /// <param name="exciseType">
    /// The excise type.
    /// </param>
    public void run(
        LedgerJournalTrans  _ledgerJournalTrans,
        ExciseType_IN       exciseType = ExciseType_IN::None)
    {
        Voucher                             voucher;
        // <GIN>
        #ISOCountryRegionCodes
        LedgerJournalTransTaxExtensionIN    ledgerJournalTransTaxExtensionIN;
        // </GIN>

        journalNum = ledgerJournalTable.JournalNum;

        // Check if line exists on form that hasn't been saved, and clear the voucher number
        if (!ledgerJournalTrans.RecId && ledgerJournalTrans.Voucher)
        {
            ledgerJournalEngine.clearVoucher();
        }
        //
        // Find the last voucher number. This is needed when user had done a ctrl-N to
        // create a new line and then deleted the line.
        //
        else if (ledgerJournalTrans.RecId)
        {
            select firstonly Voucher from ledgerJournalTrans
                order by Voucher desc
                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum;

            lastVoucher = ledgerJournalTrans.Voucher;
        }

        while select tmpTaxJournal
        {
            ttsbegin;
            ledgerJournalTrans.JournalNum = journalNum;
            ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();

            if (LedgerJournalTable::find(journalNum).ledgerJournalName().NewVoucher == NewVoucher::BalanceSheet)
            {
                voucher = new JournalVoucherNum(JournalTableData::newTable(LedgerJournalTable::find(journalNum))).getNew(false);
            }
            else if (LedgerJournalTable::find(journalNum).ledgerJournalName().NewVoucher == NewVoucher::OneVoucher)
            {
                if (lastVoucher == '' && voucher == '')
                {
                    voucher = new JournalVoucherNum(JournalTableData::newTable(LedgerJournalTable::find(journalNum))).getNew(false);
                }
                else if (voucher == '')
                {
                    voucher = lastVoucher;
                }
            }

            ledgerJournalTrans.TransDate        = tmpTaxJournal.TransDate;
            ledgerJournalTrans.Voucher          = voucher;
            ledgerJournalTrans.AccountType      = LedgerJournalACType::Ledger;
            ledgerJournalTrans.LedgerDimension  = LedgerDimensionFacade::serviceCreateLedgerDimension(tmpTaxJournal.LedgerDimension);
            ledgerJournalTrans.CurrencyCode     = CompanyInfoHelper::standardCurrency();

            if (!ledgerJournalTrans.ExchRate)
            {
                ledgerJournalTrans.ExchRate = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode);
            }

            if (tmpTaxJournal.Amount > 0)
            {
                ledgerJournalTrans.AmountCurCredit     = 0;
                ledgerJournalTrans.AmountCurDebit      = tmpTaxJournal.Amount;
            }
            else
            {
                ledgerJournalTrans.AmountCurDebit      = 0;
                ledgerJournalTrans.AmountCurCredit     = abs(tmpTaxJournal.Amount);
            }

            ledgerJournalTrans.TaxCode      = tmpTaxJournal.TaxCode;

            ledgerJournalTrans.insert();

            // <GIN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                ledgerJournalTransTaxExtensionIN = LedgerJournalTransTaxExtensionIN::findByLedgerJournalTrans(ledgerJournalTrans.RecId, true);

                ledgerJournalTransTaxExtensionIN.LedgerJournalTrans = ledgerJournalTrans.RecId;
                ledgerJournalTransTaxExtensionIN.write();

                ttsbegin;
                TransTaxInformation transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(ledgerJournalTrans, true);
                transTaxInformation.CompanyLocation = tmpTaxJournal.CompanyLocation;
                TransTaxInformationHelper::initFromCompanyLocation(transTaxInformation);
                TransTaxInformationHelper::initFromTaxInformation(transTaxInformation);
                transTaxInformation.ExciseType = exciseType;
                transTaxInformation.update();
                ttscommit;
            }
            // </GIN>

            if (ledgerJournalEngine)
            {
                ledgerJournalEngine.write(ledgerJournalTrans);
            }

            ttscommit;
        }

        delete_from tmpTaxJournal;
        formDataSource.executeQuery();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>