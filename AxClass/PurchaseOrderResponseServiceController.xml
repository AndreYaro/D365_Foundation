<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchaseOrderResponseServiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchaseOrderResponseController</c> class is a controller for wokring with purchase order response service operation.
/// </summary>
public class PurchaseOrderResponseServiceController extends SysOperationServiceController implements BatchRetryable
{
    PurchaseOrderResponseAction purchaseOrderResponseAction;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>PurchaseOrderResponseController</c> class based on <c>Args</c> class instance.
    /// </summary>
    /// <param name = "_args">Arguments passed by the caller.</param>
    /// <returns>New instance of the <c>PurchaseOrderResponseController</c> class.</returns>
    protected static PurchaseOrderResponseServiceController newFromArgs(Args _args)
    {
        PurchaseOrderResponseServiceController controller;

        controller = new PurchaseOrderResponseServiceController(
            classStr(PurchaseOrderResponseServiceController),
            methodStr(PurchaseOrderResponseServiceController, respond),
            SysOperationExecutionMode::Synchronous);

        controller.parmArgs(_args);
        controller.parmLoadFromSysLastValue(false);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>respond</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a purchase order response based on the passed in data contract.
    /// </summary>
    /// <param name = "_dataContract">Data contract carrying the information about the purchase order response.</param>
    public void respond(PurchaseOrderResponseContract _dataContract)
    {
        PurchaseOrderResponseService manager = PurchaseOrderResponseService::newFromContract(_dataContract);

        manager.respond();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseOrderResponseAction</Name>
				<Source><![CDATA[
    public PurchaseOrderResponseAction parmPurchaseOrderResponseAction(PurchaseOrderResponseAction _purchaseOrderResponseAction = purchaseOrderResponseAction)
    {
        purchaseOrderResponseAction = _purchaseOrderResponseAction;
        return purchaseOrderResponseAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PurchaseOrderResponseId responseId;

        if (_args == null || _args.record() == null)
        {
            throw error(Error::missingRecord(tableStr(PurchaseOrderResponseHeader)));
        }

        PurchaseOrderResponseHeader responseHeader = _args.record() as PurchaseOrderResponseHeader;
        PurchaseOrderResponseHeaderNotArchivedVersions notArchivedHeaderVersions = _args.record() as PurchaseOrderResponseHeaderNotArchivedVersions;
        PurchaseOrderResponseHeaderAllVersions allHeaderVersions = _args.record() as PurchaseOrderResponseHeaderAllVersions;

        if (responseHeader)
        {
            responseId = responseHeader.ResponseId;
        }
        else if (notArchivedHeaderVersions)
        {
            responseId = notArchivedHeaderVersions.ResponseId;
        }
        else if (allHeaderVersions)
        {
            responseId = allHeaderVersions.ResponseId;
        }
        else
        {
            throw error(Error::missingRecord(tableStr(PurchaseOrderResponseHeader)));
        }

        if (!responseHeader)
        {
            responseHeader = PurchaseOrderResponseHeader::findByResponseId(responseId);
        }

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            PurchaseOrderResponseServiceController controller = PurchaseOrderResponseServiceController::newFromArgs(_args);

            PurchaseOrderResponseContract contract = controller.getDataContractObject();

            PurchaseOrderResponseVersion responseVersion = responseHeader.findLatestResponseVersion();

            contract.parmResponseVersionRecId(responseVersion.RecId);

            PurchaseOrderResponseState responseState = controller.resolveResponseStateFromMenuItem(_args);

            controller.checkResponseStateMatchesAction(responseVersion.ResponseState, responseState);

            contract.parmPurchaseOrderResponseState(responseState);

            controller.startOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveResponseStateFromMenuItem</Name>
				<Source><![CDATA[
    private PurchaseOrderResponseState resolveResponseStateFromMenuItem(Args _args)
    {
        PurchaseOrderResponseState responseState;

        switch (_args.menuItemName())
        {
            case  menuItemActionStr(PurchaseOrderResponseConfirm):
                responseState = PurchaseOrderResponseState::Confirmed;
                this.parmPurchaseOrderResponseAction(purchaseOrderResponseAction::Accept);
                break;

            case menuItemActionStr(PurchaseOrderResponseReject):
                responseState = PurchaseOrderResponseState::Rejected;
                this.parmPurchaseOrderResponseAction(purchaseOrderResponseAction::Reject);
                break;

            case menuItemActionStr(PurchaseOrderResponseAcknowledgeChange):
                responseState = PurchaseOrderResponseState::AcknowledgedWithChange;
                this.parmPurchaseOrderResponseAction(purchaseOrderResponseAction::AcceptWithChanges);
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        return responseState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkResponseStateMatchesAction</Name>
				<Source><![CDATA[
    private void checkResponseStateMatchesAction(PurchaseOrderResponseState _purchaseOrderResponseState, PurchaseOrderResponseState _responseActionState)
    {
        switch (_responseActionState)
        {
            case PurchaseOrderResponseState::Confirmed:
            case PurchaseOrderResponseState::Rejected:
                this.assertResponseStateIsCorrect(_purchaseOrderResponseState, PurchaseOrderResponseState::Pending);
                break;

            case PurchaseOrderResponseState::AcknowledgedWithChange:
                this.assertResponseStateIsCorrect(_purchaseOrderResponseState, PurchaseOrderResponseState::Editing);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertResponseStateIsCorrect</Name>
				<Source><![CDATA[
    private void assertResponseStateIsCorrect(PurchaseOrderResponseState _purchaseOrderResponseState, PurchaseOrderResponseState _expectedResponseState)
    {
        if (_purchaseOrderResponseState != _expectedResponseState)
        {
            throw error("@SCM:PurchaseOrderResponseOutOfDate");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogInit</Name>
				<Source><![CDATA[
    protected IDialogable dialogInit()
    {
        return SysOperationDialog::newForm(this.parmDialogCaption(), this, new Form(formStr(PurchVendorPortalAction)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchaseOrderResponseActionRemark</Name>
				<Source><![CDATA[
    public PurchaseOrderResponseActionRemark getPurchaseOrderResponseActionRemark()
    {
        PurchaseOrderResponseAction responseAction = this.parmPurchaseOrderResponseAction();
        PurchaseOrderResponseActionRemarks purchaseOrderResponseActionRemarks  = PurchaseOrderResponseActionRemarks::find(currentUserLanguage(), responseAction);
        if (!purchaseOrderResponseActionRemarks.RecId)
        {
            PurchaseOrderResponseActionRemarks  = PurchaseOrderResponseActionRemarks::find(CompanyInfo::languageId(), responseAction);
        }

        return purchaseOrderResponseActionRemarks.RecId? purchaseOrderResponseActionRemarks.Txt:'';
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>