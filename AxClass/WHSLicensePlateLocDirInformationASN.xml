<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLicensePlateLocDirInformationASN</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WHSLicensePlateLocDirInformationASN extends WHSLicensePlateLocDirInformation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    public Query buildQuery()
    {
        Query setFlagsRun = new Query();

        QueryBuildDataSource asnItemDS = setFlagsRun.addDataSource(tableNum(WHSASNItem));
        asnItemDS.addRange(fieldNum(WHSASNItem, LicensePlateId)).value(licensePlateId);
        asnItemDS.addRange(fieldNum(WHSASNItem, ShipmentId)).value(shipmentId);

        if (WHSTransferReceiptASNFlight::instance().isEnabled())
        {
            asnItemDS.addRange(fieldNum(WHSASNItem, Module)).value(SysQuery::value(this.parmWhsModule()));
        }
        else
        {
            asnItemDS.addRange(fieldNum(WHSASNItem, Module)).value(SysQuery::value(WHSModule::Purch));
        }

        QueryBuildDataSource inventDimDS = asnItemDS.addDataSource(tableNum(InventDim));
        inventDimDS.addLink(fieldNum(WHSASNItem, InventDimId), fieldNum(InventDim, InventDimId));

        return setFlagsRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyOnLicensePlate</Name>
				<Source><![CDATA[
    public InventQty getQtyOnLicensePlate()
    {
        if (WHSTransferReceiptASNFlight::instance().isEnabled())
        {
            return WHSUOMStructure::find(licensePlateId, this.parmWhsModule(), shipmentId, false).Qty;
        }

        return WHSUOMStructure::find(licensePlateId, WHSModule::Purch, shipmentId, false).Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWeightVolume</Name>
				<Source><![CDATA[
    public void calculateWeightVolume(
        UnitOfMeasureSymbol _putawayUnitId,
        boolean             _flexibleContainerVolume)
    {
        WHSASNItem  asnItem;
        boolean transferASNFlightEnabled = WHSTransferReceiptASNFlight::instance().isEnabled();

        while select ItemId, UOM, Qty, InventDimId from asnItem
            where asnItem.LicensePlateId    == licensePlateId
            &&  ((!transferASNFlightEnabled && asnItem.Module == WHSModule::Purch)
                || (transferASNFlightEnabled && asnItem.Module == this.parmWhsModule()))
            &&    asnItem.ShipmentId        == shipmentId
        {
            this.addWeightVolumeTotals(asnItem.ItemId,
                                       asnItem.Qty,
                                       _putawayUnitId,
                                       asnItem.UOM,
                                       asnItem.InventDimId,
                                       _flexibleContainerVolume);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSLicensePlateLocDirInformationASN construct()
    {
        WHSLicensePlateLocDirInformationASN licensePlateLocDirInformationASN = new WHSLicensePlateLocDirInformationASN();

        return licensePlateLocDirInformationASN;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>