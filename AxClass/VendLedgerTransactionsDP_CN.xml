<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendLedgerTransactionsDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Report Data Provider <c>VendLedgerTransactionsDP_CN</c>
/// class for <c>VendLedgerTransactions_CN</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(VendLedgerTransactionsContract_CN)),
    SRSReportQueryAttribute(queryStr(VendLedgerTransactions_CN))
]
public class VendLedgerTransactionsDP_CN extends SRSReportDataProviderBase
{
    #define.Dash('-')

    VendLedgerTransactionsContract_CN   contract;
    VendLedgerTransactionsTmp_CN        vendLedgerTransactionsTmp_CN;
    TransDate                           fromDate;
    TransDate                           toDate;
    Map                                 openingBalancesMap;
    Map                                 balancesMap;
    Map                                 periodBeginningBalanceMap;
    Map                                 periodBeginningBalanceCalculationMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculatePeriodOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the period opening balance.
    /// </summary>
    /// <param name="_vendAccount">
    /// Vendor account.
    /// </param>
    /// <param name="_postingProfile">
    /// Posting profile.
    /// </param>
    /// <param name="_mainAccountNum">
    /// Main account number.
    /// </param>
    private void calculatePeriodOpeningBalance(
        VendAccount         _vendAccount,
        CustPostingProfile  _postingProfile,
        MainAccountNum      _mainAccountNum)
    {
        str         keyword;
        str         keywordCalculation;
        AmountCur   openningBalance;
        VendTrans   vendTrans;

        keyword = strFmt('%1-%2', _mainAccountNum, _vendAccount);
        keywordCalculation = strFmt('%1-%2-%3', _mainAccountNum, _vendAccount, _postingProfile);

        if (!periodBeginningBalanceCalculationMap.exists(keywordCalculation))
        {
            if (periodBeginningBalanceMap.exists(keyword))
            {
                openningBalance = periodBeginningBalanceMap.lookup(keyword);
            }

            select sum(AmountMST) from vendTrans
                where  vendTrans.AccountNum     == _vendAccount
                    && vendTrans.PostingProfile == _postingProfile
                    && vendTrans.TransDate      <  fromDate;

            openningBalance += vendTrans.AmountMST;

            periodBeginningBalanceMap.insert(keyword, openningBalance);
            periodBeginningBalanceCalculationMap.insert(keywordCalculation, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get balances from map based on the Main account and Account num.
    /// </summary>
    /// <param name="_mainAccount">
    /// The Main account parameter.
    /// </param>
    /// <param name="_accountNum">
    /// The Account Num parameter.
    /// </param>
    /// <returns>
    /// The amount value.
    /// </returns>
    private AmountMST getBalances(
        MainAccountNum _mainAccount,
        AccountNum     _accountNum)
    {
        if (balancesMap.exists(
                strFmt('%1-%2',
                _mainAccount,
                _accountNum)))
        {
            return balancesMap.lookup(strFmt(
                                '%1-%2',
                                _mainAccount,
                                _accountNum));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up the balances map and get the amount for the main account.
    /// </summary>
    /// <param name="_mainAccount">
    /// The Main Account parameter.
    /// </param>
    /// <returns>
    /// The amount for the main account.
    /// </returns>
    private AmountMST getMainAccountBalances(MainAccountNum _mainAccount)
    {
        AmountMST totalMainAccountBalances;

        MapEnumerator mapEnum = balancesMap.getEnumerator();

        while (mapEnum.moveNext())
        {
            if (strContains( mapEnum.currentKey(), _mainAccount))
            {
                totalMainAccountBalances += mapEnum.currentValue();
            }
        }

        return totalMainAccountBalances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpeningBalanceForAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up the opening balance of customer account per main account in a map.
    /// </summary>
    /// <param name="_mainAccount">
    /// Main Ledger Account Number.
    /// </param>
    /// <param name="_accountNum">
    /// Customer Acount Number.
    /// </param>
    /// <param name="_year">
    /// Current year.
    /// </param>
    /// <param name="_balancesMap">
    /// Map to be looked up.
    /// </param>
    /// <returns>
    /// The balance amount of the particular customer.
    /// </returns>
    private AmountMST getOpeningBalanceForAccount(
        MainAccountNum _mainAccount,
        AccountNum     _accountNum,
        int            _year,
        Map            _balancesMap)
    {
        if (_balancesMap.exists(strFmt(
                            '%1-%2-%3',
                            _mainAccount,
                            _accountNum,
                            _year)))
        {
            return _balancesMap.lookup(strFmt(
                                    '%1-%2-%3',
                                    _mainAccount,
                                    _accountNum,
                                    _year));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates the balances map and get the total amonunt for all accounts.
    /// </summary>
    /// <returns>
    /// The total amount.
    /// </returns>
    private AmountMST getTotalBalances()
    {
        AmountMST totalMainAccountBalances;

        MapEnumerator mapEnum = balancesMap.getEnumerator();

        while (mapEnum.moveNext())
        {
            totalMainAccountBalances += mapEnum.currentValue();
        }

        return totalMainAccountBalances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendLedgerTransactionsTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the report data buffer.
    /// </summary>
    /// <returns>
    /// The tmp table buffer to report.
    /// </returns>
    [ SRSReportDataSetAttribute(tableStr(VendLedgerTransactionsTmp_CN)) ]
    public VendLedgerTransactionsTmp_CN getVendLedgerTransactionsTmp_CN()
    {
        return vendLedgerTransactionsTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialzes the from date and to date.
    /// </summary>
    /// <param name="_contract">
    /// The report contract.
    /// </param>
    private void initializeDate(VendLedgerTransactionsContract_CN _contract)
    {
        if (_contract.parmLedgerFiscalPeriodNameContract_CN().parmFromDate())
        {
            fromDate      = _contract.parmLedgerFiscalPeriodNameContract_CN().parmFromDate();
        }
        else
        {
            fromDate      = LedgerFiscalCalendar::currentLedgePeriod_CN().StartDate;
        }
        if (_contract.parmLedgerFiscalPeriodNameContract_CN().parmToDate())
        {
            toDate      = _contract.parmLedgerFiscalPeriodNameContract_CN().parmToDate();
        }
        else
        {
            toDate      = LedgerFiscalCalendar::currentLedgePeriod_CN().EndDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBalancesMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates data in balances map.
    /// </summary>
    /// <param name="_mainAccount">
    /// The main account parameter.
    /// </param>
    /// <param name="_accountNum">
    /// The Account num parameter.
    /// </param>
    /// <param name="_year">
    /// The Year value parameter.
    /// </param>
    /// <param name="_amount">
    /// The Amount to be inserted.
    /// </param>
    private void insertBalancesMap(
        MainAccountNum _mainAccount,
        AccountNum     _accountNum,
        int            _year,
        AmountMSt      _amount)
    {
        if (balancesMap.exists(strFmt(
                            '%1-%2',
                            _mainAccount,
                            _accountNum)))
        {
            balancesMap.insert(
                strFmt('%1-%2', _mainAccount, _accountNum),
                balancesMap.lookup(strFmt('%1-%2', _mainAccount, _accountNum)) + _amount);
        }
        else
        {
            balancesMap.insert(
                strFmt('%1-%2', _mainAccount, _accountNum),
                this.getOpeningBalanceForAccount(_mainAccount, _accountNum, _year, openingBalancesMap) + _amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntovendLedgerTransactionsTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>vendLedgerTransactionsTmp_CN</c> table.
    /// </summary>
    /// <param name="tmpCustLedgerTransactionsLocal_CN">
    /// The <c>vendLedgerTransactionsTmp_CN</c> table buffer to be inserted.
    /// </param>
    private void insertIntovendLedgerTransactionsTmp_CN(
        vendLedgerTransactionsTmp_CN tmpCustLedgerTransactionsLocal_CN)
    {
        vendLedgerTransactionsTmp_CN.AccountName        = tmpCustLedgerTransactionsLocal_CN.AccountName;
        vendLedgerTransactionsTmp_CN.AccountNum         = tmpCustLedgerTransactionsLocal_CN.AccountNum;
        vendLedgerTransactionsTmp_CN.MainAccountName    = tmpCustLedgerTransactionsLocal_CN.MainAccountName;
        vendLedgerTransactionsTmp_CN.MainAccountNum     = tmpCustLedgerTransactionsLocal_CN.MainAccountNum;
        vendLedgerTransactionsTmp_CN.Debit              = tmpCustLedgerTransactionsLocal_CN.Debit;
        vendLedgerTransactionsTmp_CN.Credit             = tmpCustLedgerTransactionsLocal_CN.Credit;
        vendLedgerTransactionsTmp_CN.Voucher            = tmpCustLedgerTransactionsLocal_CN.Voucher;
        vendLedgerTransactionsTmp_CN.Description        = tmpCustLedgerTransactionsLocal_CN.Description;
        vendLedgerTransactionsTmp_CN.Year               = tmpCustLedgerTransactionsLocal_CN.Year;
        vendLedgerTransactionsTmp_CN.Month              = tmpCustLedgerTransactionsLocal_CN.Month;
        vendLedgerTransactionsTmp_CN.Day                = tmpCustLedgerTransactionsLocal_CN.Day;
        vendLedgerTransactionsTmp_CN.PeriodLabel        = tmpCustLedgerTransactionsLocal_CN.PeriodLabel;
        vendLedgerTransactionsTmp_CN.TransDate          = tmpCustLedgerTransactionsLocal_CN.TransDate;
        vendLedgerTransactionsTmp_CN.Balance            = this.getBalances(
                                                            tmpCustLedgerTransactionsLocal_CN.MainAccountNum,
                                                            tmpCustLedgerTransactionsLocal_CN.AccountNum);
        vendLedgerTransactionsTmp_CN.PeriodLabel        = tmpCustLedgerTransactionsLocal_CN.PeriodLabel;
        vendLedgerTransactionsTmp_CN.AccountBalance     = this.getMainAccountBalances(
                                                            tmpCustLedgerTransactionsLocal_CN.MainAccountNum);
        vendLedgerTransactionsTmp_CN.MainAccountBalance = this.getTotalBalances();
        vendLedgerTransactionsTmp_CN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAndInsertData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the logic for report and inserts data into the temp table.
    /// </summary>
    /// <param name="vendLedgerTransactionsTmpLocal_CN">
    /// The <c>VendLedgerTransactionsTmp_CN</c> table buffer.
    /// </param>
    private void processAndInsertData(VendLedgerTransactionsTmp_CN  vendLedgerTransactionsTmpLocal_CN)
    {
        VendLedgerTransactionsTmp_CN    vendLedgerTransactionsTmpLocalTemp_CN;
        int                             lastYear;
        int                             yearCounter;
        boolean                         isFiscalYearChanged;

        vendLedgerTransactionsTmpLocalTemp_CN = vendLedgerTransactionsTmpLocal_CN;

         //initialize opening balance of from period
        while select MainAccountNum, AccountNum
            from vendLedgerTransactionsTmpLocal_CN
                group by vendLedgerTransactionsTmpLocal_CN.MainAccountNum,
                        vendLedgerTransactionsTmpLocal_CN.AccountNum
        {
            for (yearCounter = year(fromDate); yearCounter <= year(toDate); yearCounter++)
            {
                openingBalancesMap.insert(
                        strFmt(
                            '%1-%2-%3',
                            vendLedgerTransactionsTmpLocal_CN.MainAccountNum,
                            vendLedgerTransactionsTmpLocal_CN.AccountNum,
                            yearCounter),
                        periodBeginningBalanceMap.lookup(
                            strFmt('%1-%2', vendLedgerTransactionsTmpLocal_CN.MainAccountNum, vendLedgerTransactionsTmpLocal_CN.AccountNum)));
            }
        }

        for (yearCounter = year(fromDate) + 1; yearCounter <= year(toDate); yearCounter++)
        {
            while select sum(Debit), sum(Credit)
                from vendLedgerTransactionsTmpLocalTemp_CN
                group by vendLedgerTransactionsTmpLocalTemp_CN.MainAccountNum,
                         vendLedgerTransactionsTmpLocalTemp_CN.AccountNum
                where vendLedgerTransactionsTmpLocalTemp_CN.TransDate < mkDate(1,1,yearCounter)
            {
                openingBalancesMap.insert(
                    strFmt(
                        '%1-%2-%3',
                        vendLedgerTransactionsTmpLocalTemp_CN.MainAccountNum,
                        vendLedgerTransactionsTmpLocalTemp_CN.AccountNum,
                        yearCounter),
                    vendLedgerTransactionsTmpLocalTemp_CN.Debit
                    + vendLedgerTransactionsTmpLocalTemp_CN.Credit
                    + openingBalancesMap.lookup(
                        strFmt(
                            '%1-%2-%3',
                            vendLedgerTransactionsTmpLocalTemp_CN.MainAccountNum,
                            vendLedgerTransactionsTmpLocalTemp_CN.AccountNum,
                            yearCounter)));
            }
        }

        while select * from VendLedgerTransactionsTmpLocal_CN
            order by VendLedgerTransactionsTmpLocal_CN.TransDate,
                     VendLedgerTransactionsTmpLocal_CN.MainAccountNum,
                     VendLedgerTransactionsTmpLocal_CN.AccountNum
             where VendLedgerTransactionsTmpLocal_CN.TransDate >= fromDate
        {
            isFiscalYearChanged = VendLedgerTransactionsTmpLocal_CN.Year != lastYear ? true :  false;

            if (isFiscalYearChanged)
            {
                balancesMap = new Map(Types::String, Types::Real);
            }

            this.insertBalancesMap(
                VendLedgerTransactionsTmpLocal_CN.MainAccountNum,
                VendLedgerTransactionsTmpLocal_CN.AccountNum,
                VendLedgerTransactionsTmpLocal_CN.Year,
                VendLedgerTransactionsTmpLocal_CN.Debit + VendLedgerTransactionsTmpLocal_CN.Credit) ;

            this.insertIntovendLedgerTransactionsTmp_CN(VendLedgerTransactionsTmpLocal_CN);

            lastYear = VendLedgerTransactionsTmpLocal_CN.Year;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        Query                               query;
        QueryRun                            queryRun;
        VendLedgerTransactionsTmp_CN        vendLedgerTransactionsTmpLocal_CN;
        String255                           fromPeriodLabel;
        String255                           toPeriodLabel;
        boolean                             isVoucherCNUsed;
        MainAccount                         mainAccount;
        LedgerDimensionDefaultAccount       summaryAccount;
        VendTable                           vendTable;
        VendTrans                           vendTrans;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherEntry;
        VoucherJournal                      voucher;
        GeneralJournalEntry_W               generalJournalEntryW;

        openingBalancesMap = new Map(Types::String, Types::Real);
        periodBeginningBalanceMap = new Map(Types::String, Types::Real);
        periodBeginningBalanceCalculationMap = new Map(Types::String, Types::Real);

        contract = this.parmDataContract() as VendLedgerTransactionsContract_CN;

        fromPeriodLabel = contract.parmLedgerFiscalPeriodNameContract_CN().parmFromPeriod();
        toPeriodLabel   = contract.parmLedgerFiscalPeriodNameContract_CN().parmToPeriod();
        this.initializeDate(contract);

        query       = this.parmQuery();
        query       = VendLedgerTransactionsDP_CN::initQueryByDataContract(query, contract);

        isVoucherCNUsed = LedgerParameters::find().ChineseVoucher_CN;

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            vendTable               = queryRun.get(tableNum(VendTable));
            vendTrans               = queryRun.get(tableNum(VendTrans));
            subledgerVoucherEntry   = queryRun.get(tableNum(SubledgerVoucherGeneralJournalEntry));
            generalJournalEntryW    = QueryRun.get(tableNum(GeneralJournalEntry_W));

            if (isVoucherCNUsed)
            {
                voucher = generalJournalEntryW.Voucher_CN;
            }
            else
            {
                voucher = vendTrans.Voucher;
            }

            summaryAccount = VendLedgerAccounts::summaryLedgerDimension(
                                vendTable.AccountNum,
                                vendTrans.PostingProfile);
            mainAccount    = MainAccount::find(
                                DimensionAttributeValueCombination::find(summaryAccount).MainAccount);

            //initialize the beginning balance
            this.calculatePeriodOpeningBalance(vendTable.AccountNum, vendTrans.PostingProfile, mainAccount.MainAccountId);

            VendLedgerTransactionsTmpLocal_CN.AccountNum      = vendTable.AccountNum;
            VendLedgerTransactionsTmpLocal_CN.AccountName     = DirPartyTable::getName(vendTable.Party);
            VendLedgerTransactionsTmpLocal_CN.MainAccountNum  = mainAccount.MainAccountId;
            VendLedgerTransactionsTmpLocal_CN.MainAccountName = mainAccount.localizedName();
            VendLedgerTransactionsTmpLocal_CN.PeriodLabel     = fromPeriodLabel + #Dash + toPeriodLabel;
            VendLedgerTransactionsTmpLocal_CN.Voucher         = voucher;

            if (vendTrans.AmountMST <= 0 || (vendTrans.AmountMST > 0 && vendTrans.Correct))
            {
                VendLedgerTransactionsTmpLocal_CN.Debit  = 0;
                VendLedgerTransactionsTmpLocal_CN.Credit = vendTrans.AmountMST;
            }
            else
            {
                VendLedgerTransactionsTmpLocal_CN.Debit  = vendTrans.AmountMST;
                VendLedgerTransactionsTmpLocal_CN.Credit = 0;
            }

            VendLedgerTransactionsTmpLocal_CN.Balance     = 0;
            VendLedgerTransactionsTmpLocal_CN.Year        = DateTimeUtil::year(
                                                                DateTimeUtil::newDateTime(
                                                                vendTrans.TransDate, 0));
            VendLedgerTransactionsTmpLocal_CN.Month       = DateTimeUtil::month(
                                                                DateTimeUtil::newDateTime(
                                                                vendTrans.TransDate, 0));
            VendLedgerTransactionsTmpLocal_CN.Day         = DateTimeUtil::day(
                                                            DateTimeUtil::newDateTime(
                                                            vendTrans.TransDate, 0));
            VendLedgerTransactionsTmpLocal_CN.Description = vendTrans.Txt;
            VendLedgerTransactionsTmpLocal_CN.TransDate   = vendTrans.TransDate;
            VendLedgerTransactionsTmpLocal_CN.insert();
        }

        this.processAndInsertData(VendLedgerTransactionsTmpLocal_CN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryByDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query by data contract parameters
    /// </summary>
    /// <param name="_query">
    /// Primary query
    /// </param>
    /// <param name="_contract">
    /// Data contract
    /// </param>
    /// <returns>
    /// Return the query which filtered by data contract parameters.
    /// </returns>
    static Query initQueryByDataContract(
        Query                                   _query,
        VendLedgerTransactionsContract_CN      _contract)
    {
        TransDate                   fromDate;
        TransDate                   toDate;
        CustPostingProfile          fromPostingProfile;
        CustPostingProfile          toPostingProfile;
        QueryBuildDataSource        vendTransQBDS;

        if (_contract.parmLedgerFiscalPeriodNameContract_CN().parmFromDate())
        {
            fromDate        = _contract.parmLedgerFiscalPeriodNameContract_CN().parmFromDate();
        }
        else
        {
            fromDate        = LedgerFiscalCalendar::currentLedgePeriod_CN().StartDate;
        }
        if (_contract.parmLedgerFiscalPeriodNameContract_CN().parmToDate())
        {
            toDate          = _contract.parmLedgerFiscalPeriodNameContract_CN().parmToDate();
        }
        else
        {
            toDate          = LedgerFiscalCalendar::currentLedgePeriod_CN().EndDate;
        }

        fromPostingProfile = _contract.parmFromPostingProfile();
        toPostingProfile   = _contract.parmToPostingProfile();

        vendTransQBDS = _query.dataSourceTable(tableNum(VendTrans));

        SysQuery::findOrCreateRange(
            vendTransQBDS,
            fieldNum(VendTrans, TransDate)).value(
            SysQuery::range(fromDate, toDate));

        SysQuery::findOrCreateRange(
            vendTransQBDS,
            fieldNum(VendTrans, PostingProfile)).value(
            SysQuery::range(fromPostingProfile, toPostingProfile));

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
