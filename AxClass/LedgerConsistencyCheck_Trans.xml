<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerConsistencyCheck_Trans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerConsistencyCheck_Trans</c> class performs consistency checks of ledger transactions.
/// </summary>
public class LedgerConsistencyCheck_Trans extends SysConsistencyCheck implements BatchRetryable
{
    QueryRun    queryRun;
    boolean     reverseOppositeSignAmounts;
    boolean     dummy;

    private boolean isConsolidationCompany = CompanyInfo::isConsolidationCompany();

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        Dummy
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFixBalance</Name>
				<Source><![CDATA[
    private void checkFixBalance(
        GeneralJournalAccountEntry _generalJournalAccountEntry,
        GeneralJournalEntryRecId _generalJournalEntryId)
    {
        GeneralJournalAccountEntry line;
        GeneralJournalEntry generalJournalEntryTransaction;
        GeneralJournalAccountEntry_W generalJournalAccountEntry_W;
        CurrencyCode currencyCode;
        boolean hasMultipleTransactionCurrencies;

        if (_generalJournalAccountEntry.AccountingCurrencyAmount != 0 || _generalJournalAccountEntry.ReportingCurrencyAmount != 0)
        {
            generalJournalEntryTransaction = GeneralJournalEntry::find(_generalJournalEntryId);

            if (_generalJournalAccountEntry.AccountingCurrencyAmount)
            {
                if (generalJournalEntryTransaction.SubledgerVoucher)
                {
                    checkFailed(strfmt("@GeneralLedger:VoucherOutOfBalanceByAccountingCurrency", generalJournalEntryTransaction.SubledgerVoucher, _generalJournalAccountEntry.AccountingCurrencyAmount));
                }
                else
                {
                    checkFailed(strfmt("@GeneralLedger:JournalOutOfBalanceByAccountingCurrency", generalJournalEntryTransaction.JournalNumber, _generalJournalAccountEntry.AccountingCurrencyAmount));
                }
            }

            if (_generalJournalAccountEntry.ReportingCurrencyAmount)
            {
                if (generalJournalEntryTransaction.SubledgerVoucher)
                {
                    checkFailed(strfmt("@GeneralLedger:VoucherOutOfBalanceByReportingCurrency", generalJournalEntryTransaction.SubledgerVoucher, _generalJournalAccountEntry.ReportingCurrencyAmount));
                }
                else
                {
                    checkFailed(strfmt("@GeneralLedger:JournalOutOfBalanceByReportingCurrency", generalJournalEntryTransaction.JournalNumber, _generalJournalAccountEntry.ReportingCurrencyAmount));
                }
            }

            if (this.checkFix() == CheckFix::Fix)
            {
                if (isConsolidationCompany)
                {
                    return;
                }

                while select TransactionCurrencyCode from line
                    group by TransactionCurrencyCode
                    where line.GeneralJournalEntry == _generalJournalEntryId
                {
                    if (currencyCode == '')
                    {
                        currencyCode = line.TransactionCurrencyCode;
                    }
                    else if (currencyCode != line.TransactionCurrencyCode)
                    {
                        currencyCode = '';
                        hasMultipleTransactionCurrencies = true;
                        break;
                    }
                }

                line = null;
                line.PostingType = LedgerPostingType::ErrorAccount;
                LedgerDimensionAccount ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(LedgerSystemAccounts::defaultAccount(LedgerPostingType::ErrorAccount));
                DimensionAttributeValueCombination dimensionAttributeValueCombination = DimensionAttributeValueCombination::find(ledgerDimension);
                line.LedgerDimension = dimensionAttributeValueCombination.RecId;
                line.Text = "@SYS26805";
                line.GeneralJournalEntry = generalJournalEntryTransaction.RecId;
                line.LedgerAccount = dimensionAttributeValueCombination.DisplayValue;
                line.MainAccount = dimensionAttributeValueCombination.MainAccount;

                if (line.LedgerDimension == 0)
                {
                    throw error("@SYS70569");
                }

                line.AccountingCurrencyAmount = -_generalJournalAccountEntry.AccountingCurrencyAmount;
                line.ReportingCurrencyAmount = -_generalJournalAccountEntry.ReportingCurrencyAmount;

                if (hasMultipleTransactionCurrencies)
                {
                    line.TransactionCurrencyCode = CompanyInfoHelper::standardCurrency();
                    line.TransactionCurrencyAmount = -_generalJournalAccountEntry.AccountingCurrencyAmount;
                }
                else
                {
                    line.TransactionCurrencyCode = currencyCode;
                    line.TransactionCurrencyAmount = -_generalJournalAccountEntry.TransactionCurrencyAmount;
                }

                line.applyFixedDimensions();
                line.calculateInternalValues(reverseOppositeSignAmounts);
                line.insert();

                // Add record if required and do not set any values except the references since this is an adjustment
                if (GeneralJournalAccountEntry_W::isLegalEntityInCountryRegion())
                {
                    generalJournalAccountEntry_W.clear();
                    generalJournalAccountEntry_W.GeneralJournalAccountEntry = line.RecId;
                    generalJournalAccountEntry_W.GeneralJournalEntry = line.GeneralJournalEntry;
                    generalJournalAccountEntry_W.insert();
                }

                this.updateCorrected();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public ConfigurationKeyId configurationKey()
    {
        return configurationkeynum(LedgerBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.addMenuItemButton(MenuItemType::Display, menuitemdisplaystr(RunBaseQueryDialog), DialogMenuItemGroup::BottomGrp);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    public Integer executionOrder()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDialog</Name>
				<Source><![CDATA[
    public boolean hasDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerConsistencyCheck_Trans</c> object.
    /// </summary>
    /// <returns>A new instance of the <c>LedgerConsistencyCheck_Trans</c> object.</returns>
    public static LedgerConsistencyCheck_Trans construct()
    {
        return new LedgerConsistencyCheck_Trans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        if (this.showInTree())
        {
            queryRun = new QueryRun(querystr(GeneralJournalSummary));
        }

        super();

        reverseOppositeSignAmounts = LedgerParameters::find().ReverseOppositeSignAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        SysConsistencyCheckJob consistencyBatchJob = this.parmSysConsistencyCheckJob();
        AccountingDate fromDate = consistencyBatchJob.parmFromdate();

        Query generalJournalQuery = this.queryRun().query();

        // Group by all the fields needed for reporting or data generation
        QueryBuildDataSource dsGJAE = generalJournalQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry));
        dsGJAE.addGroupByField(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry));

        QueryBuildDataSource dsGJE = generalJournalQuery.dataSourceTable(tablenum(GeneralJournalEntry));
        dsGJE.addGroupByField(fieldNum(GeneralJournalEntry, SubledgerVoucher));
        dsGJE.addGroupByField(fieldNum(GeneralJournalEntry, AccountingDate));
        dsGJE.addGroupByField(fieldNum(GeneralJournalEntry, JournalNumber));
        
        GeneralJournalEntry::addSecureRangeForLedger(dsGJE);

        if (fromDate)
        {
            dsGJE.addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(queryRange(fromDate, null, true));
        }
  
        boolean applyFix = this.checkFix() == CheckFix::Fix;

        if (applyFix)
        {
            ttsbegin;
        }

        this.checkFixEntryImbalancesByField(generalJournalQuery, tableNum(GeneralJournalAccountEntry), fieldStr(GeneralJournalAccountEntry, AccountingCurrencyAmount));
        this.checkFixEntryImbalancesByField(generalJournalQuery, tableNum(GeneralJournalAccountEntry), fieldStr(GeneralJournalAccountEntry, ReportingCurrencyAmount));

        if (applyFix)
        {
            if (isConsolidationCompany)
            {
                info("@GeneralLedger:LedgerConsistencyCheckWithFixForConsolidationCompany");
            }
            else
            {
                TransactionLog::create(TransactionLogType::CheckAndFix, "@SYS26805");
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixEntryImbalancesByField</Name>
				<Source><![CDATA[
    private void checkFixEntryImbalancesByField(Query _query, TableId _sourceTable, FieldName _fieldToCheck)
    {
        Query outOfBalanceQuery = new Query(_query);
        outOfBalanceQuery.addHavingFilter(
            outOfBalanceQuery.dataSourceTable(_sourceTable),
            _fieldToCheck,
            AggregateFunction::Sum
        ).value(SysQuery::valueNot(0));
            
        this.checkFixEntryImbalances(outOfBalanceQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixEntryImbalances</Name>
				<Source><![CDATA[
    private void checkFixEntryImbalances(Query _query)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;

        QueryRun generalJournalQueryRun = new QueryRun(_query);
        while (generalJournalQueryRun.next())
        {
            generalJournalAccountEntry = generalJournalQueryRun.get(tablenum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
            generalJournalEntry = generalJournalQueryRun.get(tablenum(GeneralJournalEntry)) as GeneralJournalEntry;

            if (generalJournalEntry.SubledgerVoucher)
            {
                setPrefix(strFmt("@SYS26801", GeneralJournalEntry.SubledgerVoucher, date2StrUsr(generalJournalEntry.AccountingDate, DateFlags::FormatAll)));
            }
            else
            {
                setPrefix(strFmt("@SYS4000787", GeneralJournalEntry.JournalNumber, date2StrUsr(generalJournalEntry.AccountingDate, DateFlags::FormatAll)));
            }

            this.checkFixBalance(generalJournalAccountEntry, generalJournalAccountEntry.GeneralJournalEntry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInTree</Name>
				<Source><![CDATA[
    public boolean showInTree()
    {
        return isTableUserEnabled(tablenum(GeneralJournalAccountEntry), AccessType::View);
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    public classId treeParentClassId()
    {
        LedgerConsistencyCheck  ledgerConsistencyCheck;

        return classidget(ledgerConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQuery] = _packedClass;

                if (packedQuery)
                {
                    queryRun = new QueryRun( packedQuery);
                }
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS2910";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return "@SYS58230";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>