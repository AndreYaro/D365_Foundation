<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchGoodsReceiptNoteController_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchGoodsReceiptNoteController_IN</c> is the controller class for associated SRS Report.
/// </summary>
public class PurchGoodsReceiptNoteController_IN extends PurchPackingSlipController implements BatchRetryable
{
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentTitle</Name>
				<Source><![CDATA[
    public str documentTitle()
    {
        str documentTitle;

        if (printCopyOriginal == PrintCopyOriginal::Copy)
        {
            if (vendPackingSlipJour.isProforma())
            {
                documentTitle = "@SYS70796";
            }
            else
            {
                documentTitle = "@GLS5577";
            }
        }
        else
        {
            if (vendPackingSlipJour.isProforma())
            {
                documentTitle = "@SYS12874";
            }
            else
            {
                documentTitle = "@GLS5545";
            }
        }

        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    protected void runPrintMgmt()
    {
        PrintMgmtPrintSettingDetail     printSettingDetail;

        if (!journalList)
        {
            throw error("@SYS26348");
        }

        journalList.first(vendPackingSlipVersion);

        do
        {
            if (!vendPackingSlipVersion)
            {
                throw error("@SYS26348");
            }

            vendPackingSlipJour = VendPackingSlipJour::findRecId(vendPackingSlipVersion.VendPackingSlipJour);
            formLetterReport.loadPrintSettings(vendPackingSlipJour, PurchTable::find(vendPackingSlipJour.PurchId), vendPackingSlipJour.LanguageId);
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                if (formLetterReport.moveNextPrintSetting())
                {
                    printSettingDetail = formLetterReport.getCurrentPrintSetting();

                    if (printSettingDetail.parmReportFormatName() == PrintMgmtDocType::construct(PrintMgmtDocumentType::PurchaseOrderPackingSlip).getDefaultReportFormat())
                    {
                        //Goods receipt note
                        this.parmDialogCaption("@GLS5545");
                        this.parmReportName(ssrsReportStr(PurchGoodsReceiptNote_IN, Report));
                        printSettingDetail.parmReportFormatName(this.parmReportName());
                    }
                    formLetterReport.parmReportRun().loadSettingDetail(printSettingDetail);
                }
                this.parmReportContract().parmRdlContract().parmLanguageId(vendPackingSlipJour.LanguageId);
                this.parmReportContract().parmRdlContract().parmLabelLanguageId(vendPackingSlipJour.LanguageId);
                this.outputReports();
            }
        }
        while (journalList.next(vendPackingSlipVersion));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchGoodsReceiptNoteController_IN construct()
    {
        return new PurchGoodsReceiptNoteController_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailzes the controller, sets the print management, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        PurchGoodsReceiptNoteController_IN   formLetterController  = PurchGoodsReceiptNoteController_IN::construct();

        formLetterController.initArgs(_args, ssrsReportStr(PurchGoodsReceiptNote_IN, Report));

        if (classIdGet(_args.caller()) == classNum(PurchPackingSlipJournalPrint))
        {
            formLetterController.renderingCompleted += eventhandler(purchPackingSlipJournalPrint::renderingCompleted);
        }

        formLetterController.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>