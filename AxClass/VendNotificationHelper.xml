<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendNotificationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendNotificationHelper</c> class is a helper class that is used for vendor notifications.
/// </summary>
/// <remarks>
///    Includes methods that initialize mailer objects, send e-mail to specific users, and retrieve the
///    default language.
/// </remarks>
class VendNotificationHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLocalizedMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the notification message using the user's default language.
    /// </summary>
    /// <param name="_userId">
    /// The user ID of the curret user.
    /// </param>
    /// <param name="_templateRecId">
    /// The <c>VendNotificationTemplate</c> record ID.
    /// </param>
    /// <returns>
    /// A message string translated using the user's default language.
    /// </returns>
    /// <remarks>
    /// If the user doesn't have a default language the company default language
    /// will be used instead.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str getLocalizedMessage(UserId _userId, RecId _templateRecId)
    {
        LanguageId                          languageId;
        VendNotificationTemplateTranslation templateTranslation;
        str                                 message = '';

        languageId = VendNotificationHelper::getUserLanguageId(_userId);

        templateTranslation = VendNotificationTemplateTranslation::find(_templateRecId, languageId);

        if (templateTranslation.RecId)
        {
            message = templateTranslation.Message;
        }

        return message;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalizedSubject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the notification subject in the default language of the user.
    /// </summary>
    /// <param name="_userId">
    ///    The user ID of the current user.
    /// </param>
    /// <param name="_templateRecId">
    ///    The <c>VendNotificationTemplate</c> record ID.
    /// </param>
    /// <returns>
    ///    The subject string that is translated using the default language of the user.
    /// </returns>
    /// <remarks>
    ///    If the user does not have a default language then the company default language will be used.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static VendNotificationSubject getLocalizedSubject(UserId _userId, RecId _templateRecId)
    {
        LanguageId                          languageId;
        VendNotificationTemplateTranslation templateTranslation;
        str                                 subject = '';

        languageId = VendNotificationHelper::getUserLanguageId(_userId);

        templateTranslation = VendNotificationTemplateTranslation::find(_templateRecId, languageId);

        if (templateTranslation.RecId)
        {
            subject = templateTranslation.Subject;
        }

        return subject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the language ID of the currently logged in user.
    /// </summary>
    /// <param name="_sysCompanyUserInfoId">
    ///    The user ID of the record for the current user in the <c>sysCompanyUserInfo</c> table.
    /// </param>
    /// <returns>
    ///    The language ID of the user.
    /// </returns>
    /// <remarks>
    ///    If the user does not have a default language, the default language company will be used instead.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LanguageId getUserLanguageId(UserId _sysCompanyUserInfoId)
    {
        UserInfo            userInfo;
        LanguageId          languageId;

        // find user's langaguage
        select firstonly Id from userInfo where userInfo.Id == _sysCompanyUserInfoId;

        if (userInfo.RecId != 0)
        {
            languageId = userInfo.Language;
        }

        // use the default company language
        if (!languageId)
        {
            languageId = CompanyInfo::languageId();
        }

        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMailToVendors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and sends an e-mail to a list of vendors.
    /// </summary>
    /// <param name="_vendMap">
    /// A map of <c>VendTable</c> records to send the e-mails to.
    /// </param>
    /// <param name="_subject">
    /// The subject of the e-mail.
    /// </param>
    /// <param name="_message">
    /// The message of the e-mail.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void sendMailToVendors(Map _vendMap, str _subject, str _message)
    {
        MapEnumerator           mapEnumerator;
        VendTable               vendTable;
        str                     senderEmail;
        str                     vendorEmail;
        SysUserInfo             sysUserInfo;

        // get the mailer object
        var mailer = SysMailerFactory::getNonInteractiveMailer();

        // get the sender email address
        sysUserInfo = SysUserInfo::find(curuserid());
        senderEmail = sysUserInfo.emailDisplay();

        if (mailer == null)
        {
            // You must set up e-mail parameters in Microsoft Dynamics AX before you can send the notification.
            error("@SYS152664");
            return;
        }

        // validate the sender email address
        if (    (strlen(senderEmail) == 0) ||
                (!SysEmailDistributor::validateEmail(senderEmail))
            )
        {
            // The email address provided for the sender is invalid.
            error("@SYS152911");
            return;
        }

        if (_vendMap.elements() > 0)
        {
            var messageBuilder = new SysMailerMessageBuilder();

            mapEnumerator = _vendMap.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                vendTable = mapEnumerator.currentValue();
                vendorEmail = vendTable.email();

                // validate the to email address
                if (    (strlen(vendorEmail) == 0) ||
                        (!SysEmailDistributor::validateEmail(vendorEmail))
                    )
                {
                    // Notification email not sent to %1. Invalid email address.
                    error(strfmt("@SYS152665", vendorEmail));
                }
                else
                {
                    messageBuilder.reset()
                                  .setFrom(senderEmail)
                                  .setSubject(_subject)
                                  .addTo(vendorEmail)
                                  .setPriority(System.Net.Mail.MailPriority::Normal)
                                  .setBody(strReplace(_message, '\r\n', '<br>'));

                    mailer.sendNonInteractive(messageBuilder.getMessage());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendNotification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>EventInbox</c> table that serves as a notification to a vendor self
    /// service portal user.
    /// </summary>
    /// <param name="_vendNotificationTemplate">
    /// A <c>VendNotificationTemplate</c> table buffer that contains information that is entered by a user
    /// about the vendor notification template form.
    /// </param>
    /// <param name="_templateTranslation">
    /// A <c>VendNotificationTemplateTranslation</c> table buffer that contains the message and subject of
    /// the translated notification.
    /// </param>
    /// <returns>
    /// An integer that represents the number of vendor contact persons to which the notification was sent.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static int sendNotification( VendNotificationTemplate            _vendNotificationTemplate,
                                        VendNotificationTemplateTranslation _templateTranslation)
    {
        Query                                   query;
        QueryRun                                queryRun;
        VendTable                               vendTable;
        ContactPerson                           contactPerson;
        EventInboxId                            eventInboxId;
        DirPersonUser                           dirPersonUser;
        boolean                                 isVendorCategoryValid = false;
        VendNotificationMessage                 message;
        VendNotificationSubject                 subject;
        int                                     recipientCounter = 0;
        EventNotification_Vend                  notification;
        Map                                     vendMap = new Map(Types::Int64,Types::Record);
        boolean                                 isVendor = false;

        if (_vendNotificationTemplate.QueryData)
        {
            query = new Query(_vendNotificationTemplate.QueryData);
        }
        else
        {
            query = new Query(queryStr(VendNotificationTemplate));
        }

        queryRun = new QueryRun (query);

        while (queryRun.next())
        {
            isVendorCategoryValid   = false;
            subject                 = '';
            message                 = '';
            contactPerson           = queryRun.get(tableNum(ContactPerson));
            vendTable               = queryRun.get(tableNum(VendTable));
            isVendor                = false;

            if (contactPerson.RecId)
            {
                if (_vendNotificationTemplate.EnableCategorySelection == VendNotificationCategorySelection::SelectedOnly)
                {
                    if (_vendNotificationTemplate.checkCategory(vendTable.AccountNum) == true)
                    {
                        isVendorCategoryValid = true;
                    }
                }
                else
                {
                    isVendorCategoryValid = true;
                }

                if (isVendorCategoryValid == true)
                {
                    dirPersonUser   = DirPersonUser::findParty(contactPerson.Party, false);
                    // the contact person must have an external party relation with its parent vendor specified by ContactForParty
                    // if there is no external relation set between the contactperson party (contact) and its contactForParty (parent vendor) then
                    // the notification will not be sent
                    isVendor        = UserExternalParty::existRelation(DirPersonUser::findParty(contactPerson.Party).User, UserExternalPartyEntityType::Vendor, vendTable.Party);

                    if (dirPersonUser && isVendor)
                    {
                        recipientCounter++;
                        message         = VendNotificationHelper::getLocalizedMessage(dirPersonUser.User, _vendNotificationTemplate.RecId);
                        subject         = VendNotificationHelper::getLocalizedSubject(dirPersonUser.User, _vendNotificationTemplate.RecId);
                        notification    = EventNotification_Vend::newInfo(  dirPersonUser.User,
                                                                            subject,
                                                                            message,
                                                                            _vendNotificationTemplate.ExpirationDate,
                                                                            _vendNotificationTemplate.RecId);
                        eventInboxId = notification.create();

                        // if required to send email, store the vendor table record
                        if ( (_vendNotificationTemplate.SendEmail == NoYes::Yes) && (vendTable.RecId) )
                        {
                            if (!vendMap.exists(vendTable.RecId))
                            {
                                vendMap.insert(vendTable.RecId, vendTable);
                            }
                        }
                    }
                }
            }
        }
        // end while queryrun loop

        if (_vendNotificationTemplate.SendEmail == NoYes::Yes)
        {
            // send the message using the default language
            message = _templateTranslation.Message;
            subject = _templateTranslation.Subject;

            // call class to send email
            VendNotificationHelper::sendMailToVendors(vendMap, subject, message);
        }

        return recipientCounter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>