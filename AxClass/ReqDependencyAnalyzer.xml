<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDependencyAnalyzer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqDependencyAnalyzer</c> class analyzes a set of tasks with dependencies, and generates a
///    schedule that you can use to execute the tasks in a proper order.
/// </summary>
/// <remarks>
///    Do not generate cyclic dependencies. If you do, the <c>getSchedule</c> method will throw an
///    exception.
/// </remarks>
public class ReqDependencyAnalyzer
{
    // input data
    Types types;
    Set   tasks;
    Map   dependencies;

    // temporary data
    Set   visited;
    Set   onStack;
    Set   emptySet;

    // output data
    List  schedule;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDependency</Name>
				<Source><![CDATA[
/// <summary>
    ///    Add a dependency between two tasks.
    /// </summary>
    /// <param name="_taskBefore">
    ///    The task that must be executed before the other.
    /// </param>
    /// <param name="_taskAfter">
    ///    The task that must be executed after the other.
    /// </param>
    /// <remarks>
    ///    The tasks must have been added already.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    One or both of the tasks have not been added yet.
    /// </exception>
    public void addDependency(anytype _taskBefore, anytype _taskAfter)
    {
        Set taskSet;
        if (!tasks.in(_taskBefore) || !tasks.in(_taskAfter))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (!dependencies.exists(_taskAfter))
        {
            taskSet = new Set(Types);
            dependencies.insert(_taskAfter, taskSet);
        }
        else
        {
            taskSet = dependencies.lookup(_taskAfter);
        }

        taskSet.add(_taskBefore);
    }
]]></Source>
			</Method>
			<Method>
				<Name>addTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a task to the set of tasks.
    /// </summary>
    /// <param name="_task">
    ///    The task to add to the set of tasks.
    /// </param>
    public void addTask(anytype _task)
    {
        tasks.add(_task);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchedule</Name>
				<Source><![CDATA[
/// <summary>
    ///    Computes and returns a schedule that can be used to execute the tasks in a proper order.
    /// </summary>
    /// <returns>
    ///    A schedule that contains each task that satisfies the dependencies.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The dependency structure contains a cycle.
    /// </exception>
    public List getSchedule()
    {
        SetEnumerator se = tasks.getEnumerator();

        this.initSearch();

        while (se.moveNext())
        {
            this.getScheduleDFS(se.current());
        }

        this.finalizeSearch();

        return schedule;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getScheduleByLevel</Name>
				<Source><![CDATA[
/// <summary>
    ///    Computes a list of all tasks ordered by level.
    /// </summary>
    /// <param name="_reversed">
    ///    A Boolean value that determines whether the list should be in reversed order; optional.
    /// </param>
    /// <returns>
    ///    A list that holds all tasks.
    /// </returns>
    /// <remarks>
    ///    The order of tasks on each level is equal even if the method is called with the _reversed parameter
    ///    set to true.
    /// </remarks>
    public List  getScheduleByLevel(boolean _reversed = false)
    {
        MapEnumerator       me;
        SetEnumerator       se;

        Level               level;
        anytype             task;

        Set                 setTask;
        Map                 mapLevelTask    = new Map(Types::Integer, Types::Class);    // [level, set]
        List                listTask        = new List(types);
        ;

        me = this.mapTaskLevel().getEnumerator();

        // loops tasks [task, level]
        while (me.moveNext())
        {
            task  = me.currentKey();
            level = me.currentValue();

            if (_reversed)
            {
                level = -level;
            }

            if (mapLevelTask.exists(level))
            {
                setTask = mapLevelTask.lookup(level);
            }
            else
            {
                setTask = new Set(types);
                mapLevelTask.insert(level, setTask);
            }

            setTask.add(task);
        }

        // build list.
        me = mapLevelTask.getEnumerator();

        while (me.moveNext())
        {
            setTask = me.currentValue();
            se      = setTask.getEnumerator();
            while (se.moveNext())
            {
                listTask.addEnd(se.current());
            }
        }

        return listTask;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getScheduleDFS</Name>
				<Source><![CDATA[
/// <summary>
    ///    Computes a schedule using a depth first search (DFS) algorithm.
    /// </summary>
    /// <param name="_task">
    ///    The task currently being examined.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The dependency structure contains a cycle.
    /// </exception>
    protected void getScheduleDFS(anytype _task)
    {
        SetEnumerator se;

        if (onStack.in(_task))
        {
            throw error("@SYS105115");
        }

        if (!visited.in(_task))
        {
            visited.add(_task);

            if (dependencies.exists(_task))
            {
                onStack.add(_task);

                se = this.getTaskDependencies(_task).getEnumerator();
                while (se.moveNext())
                {
                    this.getScheduleDFS(se.current());
                }

                onStack.remove(_task);
            }

            schedule.addEnd(_task);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>mapTaskLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Computes a map that contains the task as the key and the level as the value.
    /// </summary>
    /// <returns>
    ///    A map that contains all tasks. The key holds the tasks. The value holds the level the task belongs
    ///    to.
    /// </returns>
    /// <remarks>
    ///    Tasks on lower levels must be executed before tasks on higher levels.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The dependency structure contains a cycle.
    /// </exception>
    protected Map mapTaskLevel()
    {
        Map                 mapTaskLevel   = new Map(types, Types::Integer);        // [task , level]
        ListEnumerator      le             = this.getSchedule().getEnumerator();

        SetEnumerator       seBefore;

        Level               levelBefore;
        Level               level;

        // loop sorted tasks
        while (le.moveNext())
        {
            level = 0;

            if (dependencies.exists(le.current()))
            {
                seBefore = dependencies.lookup(le.current()).getEnumerator();

                while (seBefore.moveNext())
                {
                    levelBefore = mapTaskLevel.lookup(seBefore.current());

                    if (level < levelBefore + 1)
                    {
                        level = levelBefore + 1;
                    }
                }
            }
            mapTaskLevel.insert(le.current(), level);
        }

        return mapTaskLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
protected void new(Types _types)
    {
        types        = _types;
        tasks        = new Set(types);
        dependencies = new Map(types, Types::Class);
        emptySet     = new Set(types);
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqDependencyAnalyzer construct(Types _types)
    {
        return new ReqDependencyAnalyzer(_types);
    }

]]></Source>
			</Method>
			<Method>
				<Name>contains</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Computes a boolean value indicating whether this instance contains the given task.
    /// </summary>
    /// <param name="_task">
    ///     The task to check.
    /// </param>
    /// <returns>
    ///     <c>true</c> if this instance contains the given task; otherwise, <c>false</c>.
    /// </returns>
    public boolean contains(anytype _task)
    {
        return tasks.in(_task);
    }
]]></Source>
			</Method>
			<Method>
				<Name>finalizeSearch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finalize search.
    /// </summary>
    protected void finalizeSearch()
    {
        visited = null;
        onStack = null;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getTaskDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get dependencies of the given task.
    /// </summary>
    /// <param name="_task">
    ///     Task to get dependencies of.
    /// </param>
    /// <returns>
    ///     A set of dependencies of the given task.
    /// </returns>
    protected Set getTaskDependencies(anytype _task)
    {
        if (!dependencies.exists(_task))
        {
            return emptySet;
        }

        return dependencies.lookup(_task);
    }
]]></Source>
			</Method>
			<Method>
				<Name>initSearch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initialize search.
    /// </summary>
    protected void initSearch()
    {
        visited  = new Set (types);
        onStack  = new Set (types);
        schedule = new List(types);
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>