<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureJourCreateCustFreeInvCor_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates facture journal for free invoice correction
/// </summary>
class FactureJourCreateCustFreeInvCor_RU extends FactureJourCreate_RU implements BatchRetryable
{
    FactureJour_RU  factureJourOriginal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Usually performs checks of trans map, but in this doesn't perform it, just returns false
    /// </summary>
    /// <returns>
    ///   Always false
    /// </returns>
    protected boolean checkMap()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Usually performs check of parameters for facture creation, but in this case checks not performed, it just returns true
    /// </summary>
    /// <returns>
    ///   Always true
    /// </returns>
    protected boolean checkParameters()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceJourByTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches invoice journal by given trans
    /// </summary>
    /// <param name="_trans">
    /// Source <c>CustInvoiceTrans</c> record
    /// </param>
    /// <returns>
    /// Found <c>CustInvoiceJour</c> record
    /// </returns>
    protected Common findInvoiceJourByTrans(Common _trans)
    {
        CustInvoiceTrans localCustInvoiceTrans = _trans as CustInvoiceTrans;

        return CustInvoiceJour::findFromCustInvoiceTrans(localCustInvoiceTrans.SalesId,
                                                         localCustInvoiceTrans.InvoiceId,
                                                         localCustInvoiceTrans.InvoiceDate,
                                                         localCustInvoiceTrans.NumberSequenceGroup,
                                                         true,
                                                         ! localCustInvoiceTrans.InvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceTransByFacture</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Searches invoice transaction by given <c>FactureTrans_RU</c>
    /// </summary>
    /// <returns>
    ///   Found <c>CustInvoiceTrans</c> record
    /// </returns>
    protected Common findInvoiceTransByFacture()
    {
        return CustInvoiceTrans::findFacture_RU(factureTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>FactureJour_RU</c> record buffer
    /// </summary>
    /// <returns>
    /// <c>FactureJour_RU</c> record buffer
    /// </returns>
    public FactureJour_RU getFactureJour()
    {
        return factureJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized facture journal with values
    /// </summary>
    /// <exception cref="Exception::Error">
    ///   An error occurs if any number sequences not found
    /// </exception>
    protected void initJournal()
    {
        DictType            dictType;
        NumberSequenceTable numTable, numTableExternal;
        boolean             error   = false;
        RefRecId            numberSequenceId;
        RefRecId            scopeId = NumberSeqScopeFactory::createDefaultScope().getId();
        NumberSeq_RU        externalNumberSeq_RU;

        numberSeq = NumberSeq::newGetNum(CustParameters::numRefCustFactureId_RU(),false,true);

        if (! numberSeq)
        {
            warning(strFmt("@SYS53911", "@GLS106861", "@SYS25196"));
            error    = true;
        }
        else
        {
            numTable = numberSeq.parmNumTableNum(numTable);
            if (numTable.Manual)
            {
                dictType = new DictType(extendedTypeNum(CustFactureId_RU));
                warning(strFmt("@GLS104926", dictType.label(), "@SYS25196"));
                error    = true;
            }
        }

        factureJour.data(factureJourOriginal);

        factureJour.ReverseDate                = factureJourOriginal.FactureDate;
        factureJour.CorrectedFactureExternalId = factureJourOriginal.FactureExternalId;
        factureJour.CorrectedFactureDate       = factureJourOriginal.FactureDate;
        factureJour.CorrectedPeriod            = factureJourOriginal.FactureDate;

        factureJour.FactureDate                = factureDate;
        factureJour.FactureDate_External       = factureDateExternal;

        if (factureExtIdNumSeq)
        {
            numberSequenceId   = NumberSequenceGroupRef::findNaturalKey(CustParameters::numRefCorrectFactureExternalId_RU().NumberSequenceDatatype, scopeId, factureExtIdNumSeq).NumberSequenceId;
        }
        if (numberSequenceId)
        {
            externalNumberSeq = NumberSeq_RU::newGetNumFromId(numberSequenceId, false, true);
        }
        else
        {
            externalNumberSeq = NumberSeq_RU::newGetNum(CustParameters::numRefCorrectFactureExternalId_RU(), false, true);
        }

        if (! externalNumberSeq)
        {
            dictType = new DictType(extendedTypeNum(FactureExternalId_RU));
            warning(strFmt("@SYS53911", dictType.label(), "@SYS25196"));
            error    = true;
        }
        else
        {
            numTableExternal = externalNumberSeq.parmNumTableNum(numTableExternal);
            if (numTableExternal.Manual)
            {
                dictType = new DictType(extendedTypeNum(FactureExternalId_RU));
                warning(strFmt("@GLS104926", dictType.label(), "@SYS25196"));
                error    = true;
            }
            if (! numTableExternal.Continuous)
            {
                dictType = new DictType(extendedTypeNum(FactureExternalId_RU));
                warning(strFmt("@SYS26207", strFmt("@SYS70938", numTableExternal.NumberSequence, dictType.label())));
                error    = true;
            }
        }

        if (! error && mustBeUpdated && ! factureExtId) // factureExtId can be reused ID of deleted facture
        {
            factureJour.FactureExternalId = externalNumberSeq.num();
        }

        if (! error && factureExtId)
        {
            if (NumberSequenceList::exist(numTableExternal.RecId, NumStatus::Free, factureExtId))
            {
                if (mustBeUpdated)
                {
                    externalNumberSeq_RU = externalNumberSeq;
                    externalNumberSeq_RU.useNumFromList(numTableExternal, factureExtId);
                }
                factureJour.FactureExternalId = factureExtId;
            }
            else
            {
                warning(strFmt("@GLS104927", factureExtId, tableId2pname(tableNum(NumberSequenceList)), tableStr(NumberSequenceList)));
                error = true;
            }
        }

        if (error)
            throw error("@GLS106933");

        factureJour.FactureId             = numberSeq.num();
        factureJour.NumberSequenceGroupId = factureExtIdNumSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes totals in facture jour record
    /// </summary>
    protected void initTotals()
    {
        factureJour.FactureAmount = 0;
        factureJour.FactureTax    = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Inserts created facture journal to database
    /// </summary>
    /// <param name="_checkBooks">
    ///   Should checks be performed if facture can be created from books point of view(closed period, etc)
    /// </param>
    protected void insertJournal(boolean _checkBooks = true)
    {
        factureJour.insert(_checkBooks);
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns module for created facture
    /// </summary>
    /// <returns>
    /// Module for created facture
    /// </returns>
    public FactureModule_RU module()
    {
        return FactureModule_RU::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactureJourOriginal</Name>
				<Source><![CDATA[
    public FactureJour_RU parmFactureJourOriginal(FactureJour_RU _factureJour = factureJourOriginal)
    {
        factureJourOriginal = _factureJour;

        return factureJourOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFullyFacturedInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates invoices which were fully factured
    /// </summary>
    /// <remarks>
    ///  All invoices already updated, no action is required
    /// </remarks>
    protected void updateFullyFacturedInvoices()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>FactureJourCreateCustFreeInvCor_RU</c> object, which creates correction facture
    /// </summary>
    /// <param name="_factureJour">
    /// Original <c>FactureJour_RU</c> record
    /// </param>
    /// <returns>
    /// <c>FactureJourCreateCustFreeInvCor_RU</c> object
    /// </returns>
    public static FactureJourCreateCustFreeInvCor_RU construct(FactureJour_RU _factureJour)
    {
        FactureJourCreateCustFreeInvCor_RU  ret = new FactureJourCreateCustFreeInvCor_RU();;

        ret.parmFactureJourOriginal(_factureJour);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>