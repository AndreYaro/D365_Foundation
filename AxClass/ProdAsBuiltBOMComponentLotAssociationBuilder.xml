<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdAsBuiltBOMComponentLotAssociationBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class ProdAsBuiltBOMComponentLotAssociationBuilder extends ProdAsBuiltBOMComponentLotBuilder
{
    private ProdAsBuiltBOMProductLotAssociation   productLotAssociation;
    private ProdAsBuiltBOMComponentLotAssociation componentLotAssociation;
    private boolean                               validateBatchId;
    private boolean                               validateSerialId;
    private boolean                               validateSerialIdUniqueness;
    private ProdAsBuiltBOMInputOrigin             inputOrigin;
    private ProdAsBuiltBOMInputType               inputType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>batchChanged</Name>
				<Source><![CDATA[
    delegate void batchChanged(InventBatchId _batchId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialChanged</Name>
				<Source><![CDATA[
    delegate void serialChanged(InventSerialId _serialId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMatchId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setMatchId(ProdAsBuiltBOMMatchId _matchId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMComponentLotAssociation, MatchId), _matchId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReferenceId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setReferenceId(InventTransRefId _referenceId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMComponentLotAssociation, ReferenceId), _referenceId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComponentInventTransId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setComponentInventTransId(InventTransId _inventTransId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMComponentLotAssociation, InventTransId), _inventTransId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComponentItemId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setComponentItemId(ItemId _itemId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMComponentLotAssociation, ItemId), _itemId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSiteId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setSiteId(InventSiteId _siteId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMComponentLotAssociation, SiteId), _siteId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComponentBatchNumberId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setComponentBatchNumberId(InventBatchId _batchId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMComponentLotAssociation, BatchNumberId), _batchId);
        this.batchChanged(_batchId);
        this.setComponentInventDimId();

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComponentSerialNumberId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setComponentSerialNumberId(InventSerialId _serialId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMComponentLotAssociation, SerialNumberId), _serialId);
        this.serialChanged(_serialId);
        this.setComponentInventDimId();
        this.setValidateSerialIdUniqueness(true);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComponentInventDimId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setComponentInventDimId()
    {
        componentLotAssociation.initInventDim();

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComponentPosition</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setComponentPosition(BOMPosition _position)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMComponentLotAssociation, Position), _position);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventoryUnitId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setInventoryUnitId(UnitOfMeasureSymbol _inventUnitId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMComponentLotAssociation, InventUnitId), _inventUnitId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventoryConsumptionQuantity</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setInventoryConsumptionQuantity(InventQty _inventConsumptionQty)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMComponentLotAssociation, InventConsumptionQty), _inventConsumptionQty);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendorId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setVendorId(VendAccount _vendorId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMComponentLotAssociation, VendorId), _vendorId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransChildRefId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setInventTransChildRefId(InventTransChildRefId _inventTransChildRefId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMComponentLotAssociation, InventTransChildRefId), _inventTransChildRefId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransChildType</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setInventTransChildType(InventTransChildType _inventTransChildType)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMComponentLotAssociation, InventTransChildType), _inventTransChildType);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPickingListJournalId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setPickingListJournalId(ProdJournalIdBOM _pickingListJournalId)
    {
        this.setValue(fieldNum(ProdAsBuiltBOMComponentLotAssociation, PickingListJournalId), _pickingListJournalId);

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValidateBatchId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setValidateBatchId(boolean _validateBatchId)
    {
        validateBatchId = _validateBatchId;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValidateSerialId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setValidateSerialId(boolean _validateSerialId)
    {
        validateSerialId = _validateSerialId;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValidateSerialIdUniqueness</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setValidateSerialIdUniqueness(boolean _validateSerialIdUniqueness)
    {
        validateSerialIdUniqueness = _validateSerialIdUniqueness;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInputOrigin</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setInputOrigin(ProdAsBuiltBOMInputOrigin _inputOrigin)
    {
        inputOrigin = _inputOrigin;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInputType</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociationBuilder setInputType(ProdAsBuiltBOMInputType _inputType)
    {
        inputType = _inputType;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductLotAssociation</Name>
				<Source><![CDATA[
    private ProdAsBuiltBOMComponentLotAssociationBuilder setProductLotAssociation(ProdAsBuiltBOMProductLotAssociation _productLotAssociation)
    {
        productLotAssociation = _productLotAssociation;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productLotAssociation</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociation productLotAssociation()
    {
        return productLotAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComponentLotAssociation</Name>
				<Source><![CDATA[
    private void setComponentLotAssociation(ProdAsBuiltBOMComponentLotAssociation _componentLotAssociation)
    {
        componentLotAssociation = _componentLotAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>componentLotAssociation</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociation componentLotAssociation()
    {
        return componentLotAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValue</Name>
				<Source><![CDATA[
    private void setValue(FieldId _dimFieldId, anytype _value)
    {
        componentLotAssociation.(_dimFieldId) = _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    internal boolean validate()
    {
        boolean ret = false;
        
        if (componentLotAssociation.IsCompleted)
        {
            error(strFmt("@SCM:TrackedComponentsComponentCompletionValidation", componentLotAssociation.MatchId, componentLotAssociation.InventTransId));
            return ret;
        }

        ret = this.validateSerial();
        ret = ret && this.validateBatch();

        if (this.isSerialNumberAssociated())
        {
            info(strFmt("@SCM:TrackedComponentsComponentSerialCompletionValidation", componentLotAssociation.SerialNumberId, componentLotAssociation.InventTransId, componentLotAssociation.ItemId));
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    internal boolean save()
    {
        if (!this.validate())
        {
            return false;
        }

        Num matchId;
        try
        {
            using (var telemetry = ProdInstrumentationSegmentFactory::create(tableStr(ProdAsBuiltBOMComponentLotAssociation), ProdInstrumentationActivities::DefaultActivityId, this.createTelemetryParameters()))
            {
                ttsbegin;
                if (!componentLotAssociation.MatchId)
                {
                    matchId = productLotAssociation.MatchId;
                    componentLotAssociation.MatchId = matchId;
                    this.setMatchId(matchId);
                }
                else
                {
                    matchId = componentLotAssociation.MatchId;
                }

                if (!matchId)
                {
                    throw Exception::Error;
                }
                componentLotAssociation.selectForUpdate(true);
                componentLotAssociation.initInternal();
                componentLotAssociation.write();

                this.saveDependent();
                ttscommit;
            }
        }
        catch (Exception::Error)
        {
            if (!matchId)
            {
                error(strFmt("@SCM:TrackedComponentsProductAssociationCheck", productLotAssociation.ItemId, componentLotAssociation.ItemId));
            }
            return false;
        }

        return componentLotAssociation.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTelemetryParameters</Name>
				<Source><![CDATA[
    private SysInstrumentationAdditionalParameters createTelemetryParameters()
    {
        return SysInstrumentationAdditionalParameters::construct()
                .add(ProdInstrumentationActivities::ProductionType, enum2Symbol(enumNum(ProdType), ProdTable::find(productLotAssociation.ReferenceId).ProdType))
                .add(ProdInstrumentationActivities::InputOrigin, enum2Symbol(enumNum(ProdAsBuiltBOMInputOrigin), enum2int(inputOrigin)))
                .add(ProdInstrumentationActivities::InputType, enum2Symbol(enumNum(ProdAsBuiltBOMInputType), enum2int(inputType)))
                .add(tableStr(ProdAsBuiltBOMProductLotAssociation), int642Str(productLotAssociation.RecId))
                .add(componentLotAssociation.RecId == 0 ? ProdInstrumentationActivities::Insert : ProdInstrumentationActivities::Update, int642Str(componentLotAssociation.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDependent</Name>
				<Source><![CDATA[
    internal void saveDependent()
    {
        if (componentContext.isItemSerializable() && validateSerialIdUniqueness && componentContext.isSerialAtConsumptionEnabled())
        {
            if (!InventTrackingRegisterTrans::existForItemSerial(componentLotAssociation.ItemId, componentLotAssociation.SerialNumberId))
            {
                inventTrackingRegisterTrans::createFromSerial(componentLotAssociation.SerialNumberId, componentLotAssociation.InventTransId, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSerial</Name>
				<Source><![CDATA[
    internal boolean validateSerial()
    {
        if (validateSerialId && componentLotAssociation.SerialNumberId && componentContext.isItemSerializable() && !InventSerial::find(componentLotAssociation.SerialNumberId, componentLotAssociation.ItemId))
        {
            error(strFmt("@SCM:TrackedComponentsSerialNumberCheck", componentLotAssociation.SerialNumberId, componentLotAssociation.ItemId));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatch</Name>
				<Source><![CDATA[
    internal boolean validateBatch()
    {
        if (validateBatchId && componentLotAssociation.BatchNumberId && componentContext.isItemBatchable() && !InventBatch::find(componentLotAssociation.BatchNumberId, componentLotAssociation.ItemId))
        {
            error(strFmt("@SCM:TrackedComponentsBatchNumberCheck", componentLotAssociation.BatchNumberId, componentLotAssociation.ItemId));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findComponentLotAssociation</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotAssociation findComponentLotAssociation(ProdAsBuiltBOMComponentLotAssociationParameters _componentLotAssociationParameters)
    {
        if (componentContext.isItemBatchable() && !componentContext.isItemSerializable())
        {
            return null; // let register batch for a batchable component LOT association regardless whether it exists/not
        }

        var componentLotContext = _componentLotAssociationParameters.getComponentLot();
        var componentBatchId    = _componentLotAssociationParameters.getBatchNumberId();
        var componentSerialId   = _componentLotAssociationParameters.getSerialNumberId();

        var query = new Query();
        var qbds = query.addDataSource(tableNum(ProdAsBuiltBOMComponentLotAssociation));
        qbds.addRange(fieldNum(ProdAsBuiltBOMComponentLotAssociation, ReferenceId)).value(queryValue(componentLotContext.ProdId));
        qbds.addRange(fieldNum(ProdAsBuiltBOMComponentLotAssociation, InventTransId)).value(queryValue(componentLotContext.InventTransId));
        qbds.addRange(fieldNum(ProdAsBuiltBOMComponentLotAssociation, ItemId)).value(queryValue(componentLotContext.ItemId));

        var isBatchAndSerialEnabledItem = componentContext.isItemSerializable() && componentContext.isItemBatchable();
        if (isBatchAndSerialEnabledItem)
        {
            if (componentSerialId)
            {
                str range = strFmt('((%1 == "%2") || (%1 == "")) && (%3 != "")', fieldStr(ProdAsBuiltBOMComponentLotAssociation, SerialNumberId), componentSerialId, fieldStr(ProdAsBuiltBOMComponentLotAssociation, BatchNumberId));
                SysQuery::findOrCreateRange(qbds, fieldNum(ProdAsBuiltBOMComponentLotAssociation, SerialNumberId)).value(range);
            }
            if (componentBatchId)
            {
                str range = strFmt('((%1 == "%2") || (%1 == "")) && (%3 != "")', fieldStr(ProdAsBuiltBOMComponentLotAssociation, BatchNumberId), componentBatchId, fieldStr(ProdAsBuiltBOMComponentLotAssociation, SerialNumberId));
                SysQuery::findOrCreateRange(qbds, fieldNum(ProdAsBuiltBOMComponentLotAssociation, BatchNumberId)).value(range);
            }
        }
        else if (componentContext.isItemSerializable() && componentSerialId)
        {
            qbds.addRange(fieldNum(ProdAsBuiltBOMComponentLotAssociation, SerialNumberId)).value(queryValue(componentSerialId));
        }

        var queryRun = new QueryRun(query);
        ProdAsBuiltBOMComponentLotAssociation componentAssociation;

        while (queryRun.next())
        {
            componentAssociation = queryRun.get(tableNum(ProdAsBuiltBOMComponentLotAssociation));

            if (isBatchAndSerialEnabledItem && componentAssociation.SerialNumberId && componentAssociation.BatchNumberId && _componentLotAssociationParameters.getBatchNumberId())
            {
                componentAssociation = null;  // create a new association for registered BN if both tracking dimensions are set.
                continue;
            }
            break;
        }

        return componentAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSerialNumberAssociated</Name>
				<Source><![CDATA[
    internal boolean isSerialNumberAssociated()
    {                       
        if (!this.validateSerialIdUniqueness)
        {
            return false;
        }

        return (select firstonly RecId from ProdAsBuiltBOMComponentLotAssociation
            where ProdAsBuiltBOMComponentLotAssociation.ItemId         == componentLotAssociation.ItemId
               && ProdAsBuiltBOMComponentLotAssociation.SerialNumberId == componentLotAssociation.SerialNumberId
               && ProdAsBuiltBOMComponentLotAssociation.RecId          != componentLotAssociation.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInventoryConsumptionQuantity</Name>
				<Source><![CDATA[
    [Replaceable]
    public void calculateInventoryConsumptionQuantity(ProdBOM _componentLot)
    {
        if (productLotAssociation.RecId)
        {
            InventQty productSeriesSize;

            if (productLotAssociation.isBomOrFormula())
            {
                productSeriesSize = productLotAssociation.QtyGood + productLotAssociation.QtyError;
            }
            else
            {
                // convert to co/by -> formula/PI quantity and => to ingredient consumption
                PmfProdCoBy coByProductLot = PmfProdCoBy::findTransId(productLotAssociation.InventTransId);
                productSeriesSize = ((productLotAssociation.QtyGood + productLotAssociation.QtyError) * coByProductLot.CoByQtySerie) / max(1, coByProductLot.CoByQty);
            }

            if (ProdAsBuiltBOMComponentLotConsumptionCalcFlight::instance().isEnabled())
            {
                InventQty demandQty;

                if (componentContext.isItemSerializable())
                {
                    demandQty = 1;
                }
                else if (componentContext.isItemBatchable())
                {
                    BOMCalcData bomCalcData = BOMCalcData::newProdTable(productSeriesSize, ProdTable::find(productLotAssociation.ReferenceId));
                    ProdBOMCalc prodBOMCalc = ProdBOMCalc::newBOMCalcData(bomCalcData,
                                                                  _componentLot,
                                                                  ProdBOMConsumpProposal::Qty,
                                                                  BOMAutoConsump::Always,
                                                                  !_componentLot.ConstantReleased,
                                                                  NoYes::Yes);

                    demandQty = prodBOMCalc.inventConsump() - this.sumComponentLotConsumptionQty(true, productLotAssociation.MatchId);
                    
                    if (demandQty < 0)
                    {
                        demandQty = 0;
                    }
                }
                this.setInventoryConsumptionQuantity(demandQty);
            }
            else
            {
                BOMCalcData bomCalcData = BOMCalcData::newProdTable(productSeriesSize, ProdTable::find(productLotAssociation.ReferenceId));
                ProdBOMCalc prodBOMCalc = ProdBOMCalc::newBOMCalcData(bomCalcData,
                                                                  _componentLot,
                                                                  ProdBOMConsumpProposal::Qty,
                                                                  BOMAutoConsump::Always,
                                                                  !_componentLot.ConstantReleased,
                                                                  NoYes::Yes);

                // min between prodbom requirement and onhand per tracking dimension.
                InventQty demandQty = min(prodBOMCalc.inventConsump(), ProdAsBuiltBOMComponentLotAssociationOnhandController::construct(componentLotAssociation).availPhysical());
            
                // fallback
                if (demandQty <= 0)
                {
                    demandQty = 1;
                }
                this.setInventoryConsumptionQuantity(demandQty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMComponentLotAssociationBuilder construct()
    {
        return new ProdAsBuiltBOMComponentLotAssociationBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBuilder</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMComponentLotAssociationBuilder createBuilder(ProdAsBuiltBOMComponentLotAssociationParameters _parameters)
    {
        var componentLot = _parameters.getComponentLot();
        var builder = ProdAsBuiltBOMComponentLotAssociationBuilder::construct()
                        .setReferenceId(componentLot.ProdId)
                        .setComponentInventTransId(componentLot.InventTransId)
                        .setComponentItemId(componentLot.ItemId)
                        .setSiteId(InventDim::find(componentLot.InventDimId).InventSiteId)
                        .setInventoryUnitId(componentLot.UnitId)
                        .setVendorId(componentLot.VendId)
                        .setProductLotAssociation(_parameters.getProductLotAssociation())
                        .setInputOrigin(_parameters.getInputOrigin())
                        .setInputType(_parameters.getInputType());

        builder.setComponentLot(componentLot);
        builder.setProductContext(componentLot.ItemId);
        
        ProdAsBuiltBOMComponentLotAssociation existingComponentAssociation;
        if (_parameters.getComponentLotAssociation().InventTransId)
        {
            builder.setComponentLotAssociation(_parameters.getComponentLotAssociation());
        }
        else
        {
            existingComponentAssociation = builder.findComponentLotAssociation(_parameters);

            if (existingComponentAssociation.RecId)
            {
                builder.setComponentLotAssociation(existingComponentAssociation);
            }
        }

        if (_parameters.getSerialNumberId())
        {
            builder.setComponentSerialNumberId(_parameters.getSerialNumberId());
            builder.setValidateSerialId(_parameters.getValidateInput());
        }
        if (_parameters.getBatchNumberId())
        {
            builder.setComponentBatchNumberId(_parameters.getBatchNumberId());
            builder.setValidateBatchId(_parameters.getValidateInput());
        }
        if (_parameters.getInventTransChildRefId())
        {
            builder.setPickingListJournalId(_parameters.getPickingListJournalId())
                   .setInventTransChildRefId(_parameters.getInventTransChildRefId())
                   .setInventTransChildType(_parameters.getInventTransChildType());
        }
        if (_parameters.getComponentPosition())
        {
            builder.setComponentPosition(_parameters.getComponentPosition());
        }

        if (existingComponentAssociation.InventTransId)
        {
            return builder;
        }

        if (!_parameters.getInventoryConsumptionQuantity())
        {
            builder.calculateInventoryConsumptionQuantity(componentLot);
        }
        else
        {
            builder.setInventoryConsumptionQuantity(_parameters.getInventoryConsumptionQuantity());
        }

        return builder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>