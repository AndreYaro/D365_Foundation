<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostManagementInstrumentationLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostManagementInstrumentationLogger</c> class provides namespace-specific logging for cost management instrumentation.
/// </summary>
internal final class CostManagementInstrumentationLogger
{
    private const str InstrumentationNamespace = 'CostManagement';
    private SysInstrumentationLogger instrumentationlogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(str _loggerName)
    {
        instrumentationlogger = SysInstrumentationLoggerFactory::CreateLogger(_loggerName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityContext</Name>
				<Source><![CDATA[
    final internal SysInstrumentationActivityContext activityContext(SysInstrumentationActivity _activity)
    {
        return instrumentationlogger.activityContextWithCustomProperties(_activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activity</Name>
				<Source><![CDATA[
    final internal SysInstrumentationActivity activity(str _activityName)
    {
        return SysInstrumentationActivity::construct(_activityName, InstrumentationNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>properties</Name>
				<Source><![CDATA[
    final internal CostManagementInstrumentationLoggerProperties properties()
    {
        return CostManagementInstrumentationLoggerProperties::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogger</Name>
				<Source><![CDATA[
    internal static CostManagementInstrumentationLogger createLogger(str _name)
    {
        return new CostManagementInstrumentationLogger(_name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPropertyCollection</Name>
				<Source><![CDATA[
    final internal void logPropertyCollection(Set _propertyCollection)
    {
        if (_propertyCollection)
        {
            SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

            SetEnumerator propertyCollectionEnumerator = _propertyCollection.getEnumerator();

            while (propertyCollectionEnumerator.moveNext())
            {
                serializer.setNameAndValue(propertyCollectionEnumerator.current());
            }

            instrumentationlogger.logInformation(serializer.toString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logError</Name>
				<Source><![CDATA[
    final internal void logError(str _message)
    {
        instrumentationlogger.logError(_message);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>