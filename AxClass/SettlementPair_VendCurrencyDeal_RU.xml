<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementPair_VendCurrencyDeal_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SettlementPair_VendCurrencyDeal_RU extends SettlementPair_Vend
{
    #ISOCountryRegionCodes

    BankCurrencyTransferLog_RU bankCurrencyTransferLogCredit;
    BankCurrencyTransferLog_RU bankCurrencyTransferLogDebit;
    CrossExchRate   crossExchRate;
    TransDate currDealEntryDate_RU;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrDealEntryDate</Name>
				<Source><![CDATA[
    public TransDate getCurrDealEntryDate()
    {
        return currDealEntryDate_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCurrencyTransferLogCredit</Name>
				<Source><![CDATA[
    public BankCurrencyTransferLog_RU getBankCurrencyTransferLogCredit()
    {
        return bankCurrencyTransferLogCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCurrencyTransferLogDebit</Name>
				<Source><![CDATA[
    public BankCurrencyTransferLog_RU getBankCurrencyTransferLogDebit()
    {
        return bankCurrencyTransferLogDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAdvancedTransTypeDebit</Name>
				<Source><![CDATA[
    public BankAdvancedTransType_RU getBankAdvancedTransTypeDebit()
    {
        return bankCurrencyTransferLogDebit.BankAdvancedTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAdvancedTransTypeCredit</Name>
				<Source><![CDATA[
    public BankAdvancedTransType_RU getBankAdvancedTransTypeCredit()
    {
        return bankCurrencyTransferLogCredit.BankAdvancedTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCashCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if operation is cash collection operation.
    /// </summary>
    /// <returns>
    /// True if it is cash collection operation; false, otherwise.
    /// </returns>
    public boolean isCashCollection()
    {
        return bankCurrencyTransferLogDebit.BankAdvancedTransType  == BankAdvancedTransType_RU::CashCollection ||
               bankCurrencyTransferLogCredit.BankAdvancedTransType == BankAdvancedTransType_RU::CashCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrencyDeal_RU</Name>
				<Source><![CDATA[
    public boolean isCurrencyDeal_RU()
    {
        boolean ret;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            ret =  bankCurrencyTransferLogCredit                                                               &&
                   bankCurrencyTransferLogDebit                                                                &&
                   (bankCurrencyTransferLogCredit.BankAdvancedTransType == BankAdvancedTransType_RU::CurrBuy   ||
                    bankCurrencyTransferLogCredit.BankAdvancedTransType == BankAdvancedTransType_RU::CurrSell) &&
                    this.getCustVendTransCredit().CustVendTrans::getCustVendTrans_W().BankCurrencyTransferId_RU;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCommissionOrTransfer</Name>
				<Source><![CDATA[
    public boolean isCommissionOrTransfer()
    {
        return (bankCurrencyTransferLogCredit && ! bankCurrencyTransferLogCredit.BankSpecAccountId && ! bankCurrencyTransferLogCredit.BankEntryAccountID) ||
               (bankCurrencyTransferLogDebit  && ! bankCurrencyTransferLogDebit.BankSpecAccountId  && ! bankCurrencyTransferLogDebit.BankEntryAccountID)  ||
               (bankCurrencyTransferLogCredit.BankAdvancedTransType == BankAdvancedTransType_RU::CurrTransfer || bankCurrencyTransferLogDebit.BankAdvancedTransType == BankAdvancedTransType_RU::CurrTransfer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchInvoice</Name>
				<Source><![CDATA[
    public boolean fetchInvoice(DataAreaId _company, TableId _tableId, RecId _recId)
    {
        boolean                     recordFound;
        VendTrans                   vendTrans;
        VendTrans_W                 vendTrans_W;
        BankCurrencyTransferLog_RU  bankCurrencyTransferLog;

        if (!specTransDebit)
        {
            select forupdate crossCompany specTransDebit
                where specTransDebit.SpecCompany == _company
                   && specTransDebit.SpecTableId == _tableId
                   && specTransDebit.SpecRecId   == _recId
            join forupdate custVendTransOpenDebit
                where custVendTransOpenDebit.DataAreaId == specTransDebit.RefCompany
                   && custVendTransOpenDebit.TableId    == specTransDebit.RefTableId
                   && custVendTransOpenDebit.RecId      == specTransDebit.RefRecId
            join vendTrans
                where vendTrans.RecId      == custVendTransOpenDebit.RefRecId
                   && vendTrans.AccountNum == custVendTransOpenDebit.AccountNum
            join RecId from vendTrans_W
                where vendTrans_W.VendTrans == vendTrans.RecId
            join bankCurrencyTransferLog
                order by BankAdvancedTransType
                where bankCurrencyTransferLog.BankCurrencyTransferId  == vendTrans_W.BankCurrencyTransferId_RU
                   && bankCurrencyTransferLog.BankAdvancedTransType   != BankAdvancedTransType_RU::None
                   && custVendTransOpenDebit.AmountCur > 0;
        }
        else
        {
            next specTransDebit;
        }

        changecompany(custVendTransOpenDebit.company())
        {
            custVendTransDebit           = VendTrans::find(custVendTransOpenDebit.RefRecId, true);
            bankCurrencyTransferLogDebit = BankCurrencyTransferLog_RU::findByTransferId(custVendTransDebit.CustVendTrans::getCustVendTrans_W().BankCurrencyTransferId_RU);
        }

        if (specTransCredit.Balance01    &&
            bankCurrencyTransferLogDebit &&
            bankCurrencyTransferLogCredit.BankAdvancedTransType != bankCurrencyTransferLogDebit.BankAdvancedTransType)
        {
            specTransCredit.Balance01 = 0;
        }
        else
        {
            if (bankCurrencyTransferLogDebit.BankAdvancedTransType == BankAdvancedTransType_RU::CurrSell &&
                specTransCredit.Balance01                                                                &&
                custVendTransDebit)
            {
                crossExchRate = bankCurrencyTransferLogCredit.BankCurrencyDealCourse;
            }

            specTransDebit.Balance01 = -specTransDebit.Balance01;
        }

        if (this.isCommissionOrTransfer() || this.isCashCollection())
        {
            specTransDebit.CrossRate = 0;
        }
        else
        {
            specTransDebit.CrossRate = crossExchRate;
        }

        SettlementUtility::reverseTransAmounts(custVendTransDebit);
        SettlementUtility::reverseTransOpenAmounts(custVendTransOpenDebit);

        if (specTransDebit.RecId != 0)
        {
            recordFound = true;
            this.initDebitCompanyCurrency();
            SettlementUtility::roundTransactionAmounts(custVendTransDebit, specTransDebit, debitCompanyCurrency);
        }

        this.forceExchRateCalculation();

        return recordFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchPayment</Name>
				<Source><![CDATA[
    public boolean fetchPayment(DataAreaId _company, TableId _tableId, RecId _recId)
    {
        boolean                     recordFound;
        VendTrans                   vendTrans;
        VendTrans_W                 vendTrans_W;
        BankCurrencyTransferLog_RU  bankCurrencyTransferLog;

        if (!specTransCredit)
        {
            select forupdate crossCompany specTransCredit
                where specTransCredit.SpecCompany == _company
                   && specTransCredit.SpecTableId == _tableId
                   && specTransCredit.SpecRecId   == _recId
            join forupdate custVendTransOpenCredit
                where custVendTransOpenCredit.DataAreaId == specTransCredit.RefCompany
                   && custVendTransOpenCredit.TableId    == specTransCredit.RefTableId
                   && custVendTransOpenCredit.RecId      == specTransCredit.RefRecId
            join vendTrans
                where vendTrans.RecId      == custVendTransOpenCredit.RefRecId
                   && vendTrans.AccountNum == custVendTransOpenCredit.AccountNum
            join RecId from vendTrans_W
                where vendTrans_W.VendTrans == vendTrans.RecId
            join bankCurrencyTransferLog
                order by BankAdvancedTransType
                where bankCurrencyTransferLog.BankCurrencyTransferId  == vendTrans_W.BankCurrencyTransferId_RU
                   && bankCurrencyTransferLog.BankAdvancedTransType   != BankAdvancedTransType_RU::None
                   && custVendTransOpenCredit.AmountCur < 0;
        }
        else
        {
            next specTransCredit;
        }

        changecompany(custVendTransOpenCredit.company())
        {
            custVendTransCredit = VendTrans::find(custVendTransOpenCredit.RefRecId, true);
            bankCurrencyTransferLogCredit = BankCurrencyTransferLog_RU::findByTransferId(custVendTransCredit.CustVendTrans::getCustVendTrans_W().BankCurrencyTransferId_RU);
        }

        if (bankCurrencyTransferLogCredit.BankAdvancedTransType  == BankAdvancedTransType_RU::CurrBuy)
        {
            crossExchRate        = bankCurrencyTransferLogCredit.BankCurrencyDealCourse ? 100 * 100 / bankCurrencyTransferLogCredit.BankCurrencyDealCourse : 0;
            currDealEntryDate_RU = custVendTransCredit.TransDate;
        }

        if (specTransDebit.Balance01      &&
            bankCurrencyTransferLogCredit &&
            bankCurrencyTransferLogDebit.BankAdvancedTransType != bankCurrencyTransferLogCredit.BankAdvancedTransType)
        {
            specTransDebit.Balance01 = 0;
        }
        else
        {
            if (bankCurrencyTransferLogCredit.BankAdvancedTransType == BankAdvancedTransType_RU::CurrSell)
            {
                crossExchRate        = bankCurrencyTransferLogCredit.BankCurrencyDealCourse;
                currDealEntryDate_RU = custVendTransCredit.TransDate;
            }
            specTransCredit.Balance01 = -specTransCredit.Balance01;
        }

        if (this.isCommissionOrTransfer() || this.isCashCollection())
        {
            specTransDebit.CrossRate = 0;
        }
        else
        {
            specTransDebit.CrossRate = crossExchRate;
        }

        SettlementUtility::reverseTransAmounts(custVendTransCredit);
        SettlementUtility::reverseTransOpenAmounts(custVendTransOpenCredit);

        if (specTransCredit.RecId != 0)
        {
            recordFound = true;
            this.initCreditCompanyCurrency();
            SettlementUtility::roundTransactionAmounts(custVendTransCredit, specTransCredit, creditCompanyCurrency);
        }

        this.forceExchRateCalculation();

        return recordFound;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>