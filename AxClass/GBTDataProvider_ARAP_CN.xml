<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GBTDataProvider_ARAP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GBTDataProvider_ARAP_CN</c> class provides data for GBT generating AR and AP xml.
/// </summary>
class GBTDataProvider_ARAP_CN extends GBTDataProvider_CN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillAPTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills AP transactions dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_APTransactions), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillAPTransactions(System.Data.DataTable _dt)
    {
        VendTrans                           vendTrans;
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalEntry_W               generalJournalEntryW;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        ledgerVoucherType_CN                ledgerVoucherType;
        MainAccountNum                      mainAccountNum;
        MainAccount                         mainAccount;
        RecId                               ledgerDimensionRecId;

        VendInvoiceJour                     vendInvoiceJour;
        ProjId                              projIdTmp;

        drc = _dt.get_Rows();
        while select Voucher, AccountNum, TransDate, Invoice, PostingProfile, DocumentDate, ExchRate, AmountMST, CurrencyCode,
            AmountCur, DueDate, Txt, Closed, LastSettleVoucher, TransType, DocumentNum, PaymMode, Settlement, PromissoryNoteID from vendTrans
            where vendTrans.TransDate <= endFiscalCalendarPeriod.EndDate
                && vendTrans.TransDate >= startFiscalCalendarPeriod.StartDate
                && vendTrans.Closed != dateNull()
            outer join PurchId from vendInvoiceJour
                where vendInvoiceJour.LedgerVoucher     == vendTrans.Voucher
                    && vendInvoiceJour.InvoiceAccount   == vendTrans.AccountNum
                    && vendInvoiceJour.InvoiceDate      == vendTrans.TransDate
                    && vendInvoiceJour.InvoiceId        == vendTrans.Invoice
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #Columnname_Vendor, vendTrans.AccountNum);

            select firstOnly RecId from generalJournalEntry
                where generalJournalEntry.Ledger == Ledger::current()
            outer join PostingType, LedgerDimension from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                    && generalJournalAccountEntry.PostingType == LedgerPostingType::VendBalance
            outer join LedgerVoucherType_CN, Voucher_CN from generalJournalEntryW
                where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
            outer join Id, Num from ledgerVoucherType
                where ledgerVoucherType.RecId == generalJournalEntryW.LedgerVoucherType_CN
            exists join subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry    == generalJournalEntry.RecId
                    && subledgerVoucherGeneralJournalEntry.Voucher               == vendTrans.Voucher;

            mainAccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(generalJournalAccountEntry.LedgerDimension);

            this.setValue(newRow, #Columnname_LedgerAccount, mainAccountNum);
            this.setValue(newRow, #Columnname_ARAPDocumentDate, vendTrans.DocumentDate);
            this.setValue(newRow, #Columnname_TransactionDate, vendTrans.TransDate);
            this.setValue(newRow, #Columnname_FiscalYear, fiscalYearName);
            this.setValue(newRow, #Columnname_FiscalPeriod, this.getFiscalCalendarPeriod(startFiscalCalendarPeriod.FiscalCalendarYear, vendTrans.TransDate).Name);
            this.setValue(newRow, #Columnname_ChineseVoucherType, ledgerVoucherType.Num);
            this.setValue(newRow, #Columnname_ChineseVoucherNumber, generalJournalEntryW.Voucher_CN ? generalJournalEntryW.Voucher_CN : vendTrans.Voucher);
            this.setValue(newRow, #Columnname_PrimaryCurrency, companyCurrencyName);
            this.setValue(newRow, #Columnname_ExchangeRate, this.getExchangeRate(vendTrans.ExchRate));

            str documentType;
            if (generalJournalAccountEntry.PostingType == LedgerPostingType::VendBalance)
            {
                documentType = vendTrans.AmountMST < 0 ? #DocumentTypeCode2 : #DocumentTypeCode4;
                this.setValue(newRow, #Columnname_ARAPDocumentType, documentType);
            }

            mainAccount = MainAccount::findByMainAccountId(mainAccountNum);
            this.setValue(newRow, #Columnname_DBCRPproposalOfTheLedgerAccount, this.getDebitCreditSymbol(mainAccount));

            this.setValue(newRow, #Columnname_BalanceInLocalCurrency, #Amount_Zero);
            this.setValue(newRow, #Columnname_BalanceInOtherCurrency, #Amount_Zero);
            this.setValue(newRow, #Columnname_AmountInAccountingCurrency, -vendTrans.AmountMST);
            this.setValue(newRow, #Columnname_TransactionCurrency, Currency::find(vendTrans.CurrencyCode).Txt);
            this.setValue(newRow, #Columnname_AmountInTransactionCurrency, -vendTrans.AmountCur);
            this.setValue(newRow, #Columnname_Description, vendTrans.Txt);
            this.setValue(newRow, #Columnname_DueDate, vendTrans.DueDate);
            if (documentType == #DocumentTypeCode4)
            {
                this.setValue(newRow, #Columnname_SettlementVoucher, vendTrans.Closed ? GeneralJournalEntry_W::findByGeneralJournalEntry(GeneralLedgerExtension::findByReferenceNumber(vendTrans.LastSettleVoucher).RecId).Voucher_CN : '');
                this.setValue(newRow, #Columnname_CloseDate, vendTrans.Closed);
            }
            this.setValue(newRow, #Columnname_ARAPDocumentType, #ARAPDocumentTypeCode);
            this.setValue(newRow, #Columnname_TransactionType, enum2int(vendTrans.TransType));
            this.setValue(newRow, #Columnname_ARAPDocumentNumber, vendTrans.DocumentNum);
            this.setValue(newRow, #Columnname_InvoiceNumber, vendTrans.Invoice);
            this.setValue(newRow, #Columnname_ContractNumber, '');

            projIdTmp = PurchTable::find(vendInvoiceJour.PurchId).ProjId;
            this.setValue(newRow, #Columnname_ProjectNumber, projIdTmp);

            this.setValue(newRow, #Columnname_PaymentMethod, vendTrans.PaymMode);
            if (vendTrans.TransType == LedgerTransType::Payment)
            {
                this.setValue(newRow, #Columnname_PaymentDate, vendTrans.TransDate);
            }
            this.setValue(newRow, #Columnname_SettlementFlag, enum2int(vendTrans.Settlement));
            this.setValue(newRow, #Columnname_BillNumber, vendTrans.PromissoryNoteID);
            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillARTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills AR transactions dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_ARTransactions), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillARTransactions(System.Data.DataTable _dt)
    {
        CustTrans                           custTrans;
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalEntry_W               generalJournalEntryW;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        LedgerVoucherType_CN                ledgerVoucherType;
        MainAccountNum                      mainAccountNum;
        MainAccount                         mainAccount;
        RecId                               ledgerDimensionRecId;

        CustInvoiceJour                     custInvoiceJour;
        ProjId                              projIdTmp;

        drc = _dt.get_Rows();
        while select Voucher, AccountNum, TransDate, Invoice, PostingProfile, DocumentDate, ExchRate, AmountMST, CurrencyCode,
            AmountCur, Txt, DueDate, Closed, LastSettleVoucher, TransType, DocumentNum, PaymMode, Settlement, BillOfExchangeID from custTrans
            where custTrans.TransDate <= endFiscalCalendarPeriod.EndDate
                && custTrans.TransDate >= startFiscalCalendarPeriod.StartDate
                && custTrans.Closed != dateNull()
            outer join SalesId from custInvoiceJour
                where custInvoiceJour.LedgerVoucher     == custTrans.Voucher
                    && custInvoiceJour.InvoiceAccount   == custTrans.AccountNum
                    && custInvoiceJour.InvoiceDate      == custTrans.TransDate
                    && custInvoiceJour.InvoiceId        == custTrans.Invoice
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #Columnname_Customer, custTrans.AccountNum);

            select firstOnly RecId from generalJournalEntry
                where generalJournalEntry.Ledger == Ledger::current()
            outer join PostingType, LedgerDimension from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                    && generalJournalAccountEntry.PostingType == LedgerPostingType::CustBalance
            outer join LedgerVoucherType_CN, Voucher_CN from generalJournalEntryW
                where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
            outer join Id, Num from ledgerVoucherType
                where ledgerVoucherType.RecId == generalJournalEntryW.LedgerVoucherType_CN
            exists join subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry    == generalJournalEntry.RecId
                    && subledgerVoucherGeneralJournalEntry.Voucher               == custTrans.Voucher;

            mainAccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(generalJournalAccountEntry.LedgerDimension);
            this.setValue(newRow, #Columnname_LedgerAccount, mainAccountNum);
            this.setValue(newRow, #Columnname_ARAPDocumentDate, custTrans.DocumentDate);
            this.setValue(newRow, #Columnname_TransactionDate, custTrans.TransDate);
            this.setValue(newRow, #Columnname_FiscalYear, FiscalYearName);
            this.setValue(newRow, #Columnname_FiscalPeriod, this.getFiscalCalendarPeriod(startFiscalCalendarPeriod.FiscalCalendarYear, custTrans.Transdate).Name);
            this.setValue(newRow, #Columnname_ChineseVoucherType, ledgerVoucherType.Num);
            this.setValue(newRow, #Columnname_ChineseVoucherNumber, generalJournalEntryW.Voucher_CN ? generalJournalEntryW.Voucher_CN : custTrans.Voucher);
            this.setValue(newRow, #Columnname_PrimaryCurrency, companyCurrencyName);
            this.setValue(newRow, #Columnname_ExchangeRate, this.getExchangeRate(custTrans.ExchRate));

            str documentType;
            if (generalJournalAccountEntry.PostingType == LedgerPostingType::CustBalance)
            {
                documentType = custTrans.AmountMST > 0 ? #DocumentTypeCode1 : #DocumentTypeCode3;
                this.setValue(newRow, #Columnname_ARAPDocumentType, documentType);
            }

            mainAccount = MainAccount::findByMainAccountId(mainAccountNum);
            this.setValue(newRow, #Columnname_DBCRPproposalOfTheLedgerAccount, this.getDebitCreditSymbol(mainAccount));
            this.setValue(newRow, #Columnname_BalanceInLocalCurrency, #Amount_Zero);
            this.setValue(newRow, #Columnname_BalanceInOtherCurrency, #Amount_Zero);
            this.setValue(newRow, #Columnname_AmountInAccountingCurrency, custTrans.AmountMST);
            this.setValue(newRow, #Columnname_TransactionCurrency, Currency::find(custTrans.CurrencyCode).Txt);
            this.setValue(newRow, #Columnname_AmountInTransactionCurrency, custTrans.AmountCur);
            this.setValue(newRow, #Columnname_Description, custTrans.Txt);
            this.setValue(newRow, #Columnname_DueDate, custTrans.DueDate);
            if (documentType == #DocumentTypeCode3)
            {
                this.setValue(newRow, #Columnname_SettlementVoucher, custTrans.Closed ? GeneralJournalEntry_W::findByGeneralJournalEntry(GeneralLedgerExtension::findByReferenceNumber(custTrans.LastSettleVoucher).RecId).Voucher_CN : '');
                this.setValue(newRow, #Columnname_CloseDate, custTrans.Closed);
            }

            this.setValue(newRow, #Columnname_TransactionType, enum2int(custTrans.TransType));
            this.setValue(newRow, #Columnname_ARAPDocumentNumber, custTrans.DocumentNum);
            this.setValue(newRow, #Columnname_InvoiceNumber, custTrans.Invoice);
            this.setValue(newRow, #Columnname_ContractNumber, '');

            projIdTmp = SalesTable::find(custInvoiceJour.SalesId).ProjId;
            this.setValue(newRow, #Columnname_ProjectNumber, projIdTmp);

            this.setValue(newRow, #Columnname_PaymentMethod, custTrans.PaymMode);
            if (custTrans.TransType == LedgerTransType::Payment)
            {
                this.setValue(newRow, #Columnname_PaymentDate, custTrans.TransDate);
            }
            this.setValue(newRow, #Columnname_SettlementFlag, enum2int(custTrans.Settlement));
            this.setValue(newRow, #Columnname_BillNumber, custTrans.BillOfExchangeID);
            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Document dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_Document), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillDocument(System.Data.DataTable _dt)
    {
        drc = _dt.get_Rows();

        newRow = _dt.NewRow();
        this.setValue(newRow, #Columnname_DocumentTypeCode, #DocumentTypeCode1);
        this.setValue(newRow, #Columnname_DocumentTypeName, #DocumentTypeName4);
        drc.Add(newRow);

        newRow = _dt.NewRow();
        this.setValue(newRow, #Columnname_DocumentTypeCode, #DocumentTypeCode2);
        this.setValue(newRow, #Columnname_DocumentTypeName, #DocumentTypeName2);
        drc.Add(newRow);

        newRow = _dt.NewRow();
        this.setValue(newRow, #Columnname_DocumentTypeCode, #DocumentTypeCode3);
        this.setValue(newRow, #Columnname_DocumentTypeName, #DocumentTypeName3);
        drc.Add(newRow);

        newRow = _dt.NewRow();
        this.setValue(newRow, #Columnname_DocumentTypeCode, #DocumentTypeCode4);
        this.setValue(newRow, #Columnname_DocumentTypeName, #DocumentTypeName4);
        drc.Add(newRow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Transaction type dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_TransactionType), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTransactionType(System.Data.DataTable _dt)
    {
        DictEnum dictEnum = new DictEnum(enumNum(LedgerTransType));
        int         i = 1;
        container   countryRegionCodeCon;

        drc = _dt.get_Rows();

        while (i < dictEnum.values())
        {
            countryRegionCodeCon = dictEnum.index2CountryRegionCodes(i);
            if (conLen(countryRegionCodeCon) == 0
                || conFind(countryRegionCodeCon, #isoCN) != 0)
            {
                newRow = _dt.NewRow();
                this.setValue(newRow, #Columnname_TransactionTypeCode, int2str(dictEnum.index2Value(i)));
                this.setValue(newRow, #Columnname_TransactionTypeName, dictEnum.index2Label(i));
                drc.Add(newRow);
            }
            i++;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>