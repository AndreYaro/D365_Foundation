<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatShoppingBasketHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
///    The <c>CatShoppingBasketHandler</c> class handles process and consumption of the received shopping basket for the punchout protocol.
/// </summary>
[ExportInterfaceAttribute()]
public abstract class CatShoppingBasketHandler
{    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructFromPunchoutRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Constructs a new instance of the <c>CatShoppingBasketHandler</c> class.
    /// </summary>
    /// <param name = "_punchoutRequest">
    ///   The <c>CatPunchoutRequest</c> table record.
    /// </param>
    /// <returns>
    ///   An instance of the <c>CatShoppingBasketHandler</c> class.
    /// </returns>
    public static CatShoppingBasketHandler constructFromPunchoutRequest(CatPunchoutRequest _punchoutRequest)
    {
        if (!_punchoutRequest.RecId)
        {
            throw error(Error::missingRecord(tableStr(CatPunchoutRequest)));
        }

        return CatShoppingBasketHandler::createInstance(_punchoutRequest.requestType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Constructs a new instance of the <c>CatShoppingBasketHandler</c> class.
    /// </summary>
    /// <param name = "_entityType">
    ///   The <c>CatPunchoutEntityType</c> data of the punchout request.
    /// </param>
    /// <returns>
    ///   An instance of the <c>CatShoppingBasketHandler</c> class.
    /// </returns>
    protected static CatShoppingBasketHandler createInstance(CatPunchoutEntityType _entityType)
    {
        CatShoppingBasketHandler shoppingBasketHandler;

        if (_entityType)
        {
            SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();
            metadataCollection.SetManagedValue(enumstr(CatPunchoutEntityType), enum2Symbol(enumNum(CatPunchoutEntityType), enum2int(_entityType)));
            shoppingBasketHandler = SysPluginFactory::Instance(identifierstr(Dynamics.AX.Application), classstr(CatShoppingBasketHandler), metadataCollection);
        }

        if (!shoppingBasketHandler)
        {
            throw error(strfmt("@SYS19384", classstr(CatShoppingBasketHandler)));
        }

        return shoppingBasketHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessShoppingBasket</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the shopping basket can be processed on the punchout request.
    /// </summary>
    /// <param name = "_punchoutRequest">
    ///   The <c>CatPunchoutRequest</c> table record.
    /// </param>
    /// <returns>
    ///   true if the the shopping basket can be processed; otherwise, false.
    /// </returns>
    public abstract boolean canProcessShoppingBasket(CatPunchoutRequest _punchoutRequest)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processShoppingBasket</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Processes the received shopping basket.
    /// </summary>
    /// <param name = "_punchoutRequest">
    ///   The <c>CatPunchoutRequest</c> table record.
    /// </param>
    /// <remarks>
    ///    Sub types of the <c>CatShoppingBasketHandler</c> class should ensure parsing the received
    ///    shopping basket into the CatShoppingBasket object and then call the <c>consumeShoppingBasket</c> method
    ///    to consume parsed basket into the <c>CatCartLines</c> table.
    /// </remarks>
    public abstract void processShoppingBasket(CatPunchoutRequest _punchoutRequest)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumeShoppingBasket</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Consumes the processed shopping basket into <C>CatCartLines</C> table.
    /// </summary>
    /// <param name = "_punchoutRequest">
    ///   An record of the <C>CatPunchoutRequest</C> table.
    /// </param>
    /// <param name = "_basket">
    ///   An instance of the <C>CatShoppingBasket</C> data type.
    /// </param>
    public void consumeShoppingBasket(CatPunchoutRequest _punchoutRequest, CatShoppingBasket _basket)
    {
        List basketLinesList = _basket.getBasketLines();

        if (basketLinesList.empty())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        CatExternalCatalog externalCatalog = CatExternalCatalog::findByRecId(_punchoutRequest.ExternalCatalog);

        if (!externalCatalog.RecId)
        {
            throw error(Error::missingRecord(tableStr(CatExternalCatalog)));
        }
     
        ttsbegin;

        CatExternalCatalogVendor externalCatalogVendor;

        select firstonly VendorAccountNumber from externalCatalogVendor
                where externalCatalogVendor.VendorDataAreaId    == _punchoutRequest.BuyingLegalEntity
                   && externalCatalogVendor.ExternalCatalog     == _punchoutRequest.ExternalCatalog;

        CatExternalCatalogQuote externalCatalogQuote;
        externalCatalogQuote.ExternalCatalog = externalCatalog.RecId;
        externalCatalogQuote.Number          = _basket.getName();
        externalCatalogQuote.ExpirationDate  = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) + externalCatalog.DefaultQuoteExpiration;

        if (externalCatalogQuote.ExpirationDate == DateTimeUtil::date(DateTimeUtil::minValue()))
        {
            externalCatalogQuote.ExpirationDate = DateTimeUtil::date(DateTimeUtil::maxValue());
        }

        externalCatalogQuote.insert();
       
        boolean setPurchSupplierAuxId = CatCXMLCartLinePurchSupplierFlight::instance().isEnabled();
        ListEnumerator basketLinesListEnumerator = basketLinesList.getEnumerator();

        while (basketLinesListEnumerator.moveNext())
        {
            CatShoppingBasketDetails itemDetail = CatShoppingBasketDetails::construct();
            itemDetail = basketLinesListEnumerator.current();
            str productDescription = itemDetail.getProductDescription();

            CatCartLine cartLine = CatCartLine::createExternalQuoteProductLine(
                            _punchoutRequest,
                            externalCatalogQuote.RecId,
                            itemDetail.getProductId(),
                            itemDetail.getProductName(),
                            productDescription,
                            itemDetail.getProductQuantity(),
                            itemDetail.getProductPrice(),
                            itemDetail.getProductCurrency(),
                            externalCatalogVendor.VendorAccountNumber,
                            itemDetail.getProductUnitOfMeasure());

            if (!cartLine)
            {
                throw error (strFmt("@SCM:CouldNotCreateLineInTheCatCartLine", tableStr(CatCartLine), productDescription));
            }
            
            if (setPurchSupplierAuxId && itemDetail.getPurchSupplierAuxId())
            {
                cartLine.PurchSupplierAuxId = itemDetail.getPurchSupplierAuxId();
                cartLine.update();
            }
        }

        _punchoutRequest.selectForUpdate(true);
        _punchoutRequest.setBasketConsumed();
        _punchoutRequest.update();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>