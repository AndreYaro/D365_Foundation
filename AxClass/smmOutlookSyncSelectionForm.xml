<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmOutlookSyncSelectionForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]
abstract class SmmOutlookSyncSelectionForm
{
    #AviFiles
    #smmMSOutlook2002ObjectModelConstants

    smmOutlookSync_Contact          smmOutlookSync_Contact;
    smmTmpOutlookContacts           contactsToBeSynchronized;
    smmContactPersonOutlookEntryID  contactPersonFolderEntryId;
    smmContactPersonOutlookEntryID  contactPersonFolderStoreId;

    smmOutlookSyncSelectFrom      selectFrom;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToMyContacts</Name>
				<Source><![CDATA[
    abstract boolean addToMyContacts()
{
}

]]></Source>
			</Method>
			<Method>
				<Name>enableSynchronize</Name>
				<Source><![CDATA[
    /// <summary>
/// Enables the create button if synchronization is selected on at least one record.
/// </summary>
/// <param name="_smmTmpOutlookContacts">
/// A record for the temporary outlook contact.
/// </param>
/// <returns>
/// true if records are synchronized; otherwise, false.
/// </returns>
public boolean enableSynchronize(smmTmpOutlookContacts _smmTmpOutlookContacts)
{
    select firstonly contactsToBeSynchronized where contactsToBeSynchronized.SyncNoYes == NoYes::Yes
    && contactsToBeSynchronized.RecId != _smmTmpOutlookContacts.RecId;

    return ((contactsToBeSynchronized.RecId != 0) ? true : false);
}

]]></Source>
			</Method>
			<Method>
				<Name>fetchContacts</Name>
				<Source><![CDATA[
    /// <summary>
/// Fetches the contacts.
/// </summary>
/// <param name="_prompt">
/// A Boolean that specifies whether to prompt.
/// </param>
/// <returns>
/// A set of contacts.
/// </returns>
abstract smmTmpOutlookContacts fetchContacts(boolean _prompt = false)
{
}

]]></Source>
			</Method>
			<Method>
				<Name>getEntityFilter</Name>
				<Source><![CDATA[
    /// <summary>
/// Disables or enables the filter for vendors, customers, or bus relations entities.
/// </summary>
/// <returns>
/// An instance of the <c>dirpartylookupentitiesfilter</c> class.
/// </returns>
public dirPartyLookupEntitiesFilter getEntityFilter()
{
    dirPartyLookupEntitiesFilter entityFilter = dirPartyLookupEntitiesFilter::generateDirPartyLookupEntitiesFilter();

    entityFilter.parmDisableAllEntityTypeFilters(false);
    entityFilter.parmDataAreaId(curext());
    entityFilter.parmFilterCustomers(FilterStatus::Set);
    entityFilter.parmFilterVendors(FilterStatus::Set);
    entityFilter.parmFilterBusinessRelations(FilterStatus::Set);

    return entityFilter;
}

]]></Source>
			</Method>
			<Method>
				<Name>getMainInstructionTxt</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the instruction text.
/// </summary>
/// <returns>
/// A string of text.
/// </returns>
abstract str getMainInstructionTxt()
{
}

]]></Source>
			</Method>
			<Method>
				<Name>getSelectButtonTxt</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the select button text.
/// </summary>
/// <returns>
/// A string of text.
/// </returns>
abstract str getSelectButtonTxt()
{
}

]]></Source>
			</Method>
			<Method>
				<Name>getSelectFrom</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the select form.
/// </summary>
/// <returns>
/// An Outlook form.
/// </returns>
abstract smmOutlookSyncSelectFrom getSelectFrom()
{
}

]]></Source>
			</Method>
			<Method>
				<Name>getSupplementalInstructionTxt</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the instruction text.
/// </summary>
/// <returns>
/// A string of text.
/// </returns>
abstract str getSupplementalInstructionTxt()
{
}

]]></Source>
			</Method>
			<Method>
				<Name>getSyncClass</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the sync class for the outlook contacts.
/// </summary>
/// <returns>
/// The <c>smmOutlookSync_Contact</c> object.
/// </returns>
public smmOutlookSync_Contact getSyncClass()
{
    return smmOutlookSync_Contact;
}

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
/// Init the form
/// </summary>
/// <param name="_showDialog">
/// Boolean value to determine whether the Outlook dialog should be shown. This happens when Outlook is not opened in the client.
/// </param>
void init(boolean _showDialog = true)
{
    OutlookUserSetup outlookUserSetup = OutlookUserSetup::findByUser(curuserid());

    // Is connected to the current user?
    if (outlookUserSetup)
    {
        // Find the user defined contact folder (if any)
        contactPersonFolderEntryId = outlookUserSetup.OutlookContactFolderEntryID;
        contactPersonFolderStoreId = outlookUserSetup.OutlookContactFolderStoreID;
    }
    // Initialize the contact syncrhonization class
    smmOutlookSync_Contact = smmOutlookSync::construct(smmOutlookMappingTypes::Contacts);

    if (_showDialog)
    {
        smmOutlookSync_Contact.init();
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
/// Validates the form with the right details.
/// </summary>
/// <param name="_formDataSource">
/// The form data source object
/// </param>
/// <returns>
/// true if validation is successful; otherwise, false.
/// </returns>
public boolean validate(FormDataSource  _formDataSource)
{
    smmTmpOutlookContacts locContactsToBeSynchronized;
    if (_formDataSource)
    {
        update_recordset contactsToBeSynchronized setting SyncNoYes = NoYes::No;

        for (locContactsToBeSynchronized = getFirstSelection(_formDataSource); locContactsToBeSynchronized; locContactsToBeSynchronized = _formDataSource.getNext())
        {
            if (locContactsToBeSynchronized.ContactForParty == 0)
            {
                return checkFailed("@SYS325262");
            }

            select forupdate contactsToBeSynchronized where contactsToBeSynchronized.RecId == locContactsToBeSynchronized.RecId;
            contactsToBeSynchronized.SyncNoYes = NoYes::Yes;
            contactsToBeSynchronized.update();
        }
    }

    return true;
}

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
/// The main method for the form.
/// </summary>
/// <param name="_args">
/// The <c>Args</c> from the caller.
/// </param>
/// <param name="_showForm">
/// A Boolean value that specifies whether to show the form.
/// </param>
static void main(Args _args, boolean _showForm = true)
{
    smmOutlookSyncSelectionForm syncSelection;
    Args                                args;
    FormRun                             selectionForm;

    if (!_args || _args.parmEnumType() != enumnum(smmOutlookSyncSelectFrom))
    {
        error(Error::wrongUseOfFunction(funcname()));
        return;
    }

    switch (_args.parmEnum())
    {
        case smmOutlookSyncSelectFrom::AX :
            syncSelection = smmOutlookSyncSelectionForm_AX::construct();
            break;
        case smmOutlookSyncSelectFrom::Outlook :
            syncSelection = smmOutlookSyncSelectionForm_Outlook::construct();
            break;
    }
    syncSelection.init(_showForm);

    args = new Args();
    args.name(formstr(smmOutlookSyncSelection));
    args.record(_args.record());
    args.parmObject(syncSelection);
    args.caller(_args.caller());

    selectionForm = classfactory.formRunClass(args);

    if (selectionForm)
    {
        selectionForm.init();
        if (_showForm)
        {
            selectionForm.run();
            selectionForm.wait();
        }
    }
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>