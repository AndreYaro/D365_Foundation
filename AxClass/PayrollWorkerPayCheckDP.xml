<?xml version="1.0" encoding="utf-8"?>

<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>PayrollWorkerPayCheckDP</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
///    The <c>PayrollWorkerPayCheckDP</c> class is the report data provider class for the <c>PayrollWorkerPayCheck</c> report.
/// </summary>
[
SRSReportParameterAttribute(classStr(PayrollWorkerPayCheckContract))
]
public class PayrollWorkerPayCheckDP extends ChequeDP
{
    PayrollWorkerPayCheckTmp       payrollWorkerPayCheckTmp;
    PayrollTmpChequePrintout       payrollTmpChequePrintout;
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>companyAddr</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Gets the company address.
    /// </summary>
    /// <returns>
    ///    An address as a string.
    /// </returns>
    protected Addressing  companyAddr()
    {
        Addressing  ret;
        int         pos;

        ret = companyInfoOrg.postalAddress().Address;
        pos = strScan(ret, #newLine, 1, 999);

        while (pos)
        {
            ret = strDel(ret, pos, 1);
            pos = strScan(ret, #newLine, 1, 999);
        }

        return ret;
    }

]]></Source>
      </Method>
      <Method>
        <Name>fetch</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. It will compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void fetch()
    {
        companyInfoOrg  = CompanyInfo::find();

        while select payrollTmpChequePrintout order by payrollTmpChequePrintout.ChequeNum
        {
            bankChequeLayout    = BankChequeLayout::find(PayrollTmpChequePrintout.AccountId);
            bankAddr            = BankAccountTable::find(PayrollTmpChequePrintout.AccountId).postalAddress().Address;
            chequeReportType    = PayrollTmpChequePrintout.ChequeFormType;

            if (bankChequeLayout.BankName)
            {
                bankName = BankAccountTable::find(PayrollTmpChequePrintout.AccountId).Name;
            }

            isPreprinted        = bankChequeLayout.ChequeNumMethod == ChequeNumMethod::Fixed ? true : false;

            this.formatDate();
            this.setValues();
            this.insertPayrollWorkerPayCheckTmp();
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>getPayrollWorkerPayCheckTmp</Name>
        <Source><![CDATA[
    /// <summary>
    /// Fetches the data from <c>PayrollWorkerPayCheckTmp</c> Temp Table.
    /// </summary>
    /// <returns>
    /// Data from <c>PayrollWorkerPayCheckTmp</c>.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PayrollWorkerPayCheckTmp))]
    public PayrollWorkerPayCheckTmp getPayrollWorkerPayCheckTmp()
    {
        select * from payrollWorkerPayCheckTmp order by payrollWorkerPayCheckTmp.ChequeNum;
        return payrollWorkerPayCheckTmp;
    }

]]></Source>
      </Method>
      <Method>
        <Name>initPayrollTmpChequePrintout</Name>
        <Source><![CDATA[
    /// <summary>
    ///     Initializes the temporary check printout object with data from the contract.
    /// </summary>
    protected void initPayrollTmpChequePrintout()
    {
        SrsTmpTblMarshallerContract contract = this.parmDataContract() as SrsTmpTblMarshallerContract;

        //Temp Table Object that was returned from SRSDataCarrier
        new SRSReportRunPermission().assert();
        payrollTmpChequePrintout = SRSTmpTblMarshaller::getTmpTbl(contract.parmTmpTableDataRecId());

        SRSTmpTblMarshaller::deleteTmpTblData(contract.parmTmpTableDataRecId());
        CodeAccessPermission::revertAssert();
    }

]]></Source>
      </Method>
      <Method>
        <Name>insertPayrollWorkerPayCheckTmp</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Insert the data into the <c>payrollWorkerPayCheckTmp</c> temporary table instance.
    /// </summary>
    private void insertPayrollWorkerPayCheckTmp()
    {
        payrollWorkerPayCheckTmp.Amount                    = PayrollTmpChequePrintout.AmountTxt;
        payrollWorkerPayCheckTmp.AmountCur                 = PayrollTmpChequePrintout.AmountCur;
        payrollWorkerPayCheckTmp.AccountNum                = PayrollTmpChequePrintout.AccountNum;
        payrollWorkerPayCheckTmp.Address                   = PayrollTmpChequePrintout.Address;
        payrollWorkerPayCheckTmp.AmountInWords             = PayrollTmpChequePrintout.Numerals2Letter;

        payrollWorkerPayCheckTmp.BankCopyCustomWatermark   = PayrollTmpChequePrintout.BankCopyCustomWatermark;

        if (PayrollTmpChequePrintout.Copy || PayrollTmpChequePrintout.Void)
        {
            if (PayrollTmpChequePrintout.BankCopySignatureText)
            {
                payrollWorkerPayCheckTmp.BankCopySignatureText     = PayrollTmpChequePrintout.BankCopySignatureText;
            }
            else
            {
                payrollWorkerPayCheckTmp.BankCopySignatureText     = #void;
            }
        }
        else
        {
            payrollWorkerPayCheckTmp.BankCopySignatureText     = #emptyString;
        }

        payrollWorkerPayCheckTmp.BankName                  = bankName;
        payrollWorkerPayCheckTmp.ChequeNum                 = PayrollTmpChequePrintout.ChequeNum;
        payrollWorkerPayCheckTmp.ChequeDate                = PayrollTmpChequePrintout.MaturityDate;
        payrollWorkerPayCheckTmp.DateStr                   = strFmt('%1', date2str(PayrollTmpChequePrintout.PayrollPaymentDate,-1,2,1,4,1,4,DateFlags::None));

        payrollWorkerPayCheckTmp.printCompanyName          = bankChequeLayout.CompanyName;
        payrollWorkerPayCheckTmp.CompanyName               = companyInfoOrg.name();
        payrollWorkerPayCheckTmp.CompanyAddress            = this.companyAddr();

        if (bankChequeLayout.CompanyLogo)
        {
            payrollWorkerPayCheckTmp.Companylogo           = CompanyImage::find(bankChequeLayout.DataAreaId, bankChequeLayout.TableId, bankChequeLayout.RecId).Image;
        }

        if (PayrollTmpChequePrintout.Signature1)
        {
            BankChequePrint::checkLayoutFieldRights(bankChequeLayout, fieldNum(BankChequeLayout, Signature1Bmp));
            payrollWorkerPayCheckTmp.CheckSignature1    = bankChequeLayout.Signature1Bmp;
        }

        if (PayrollTmpChequePrintout.Signature2)
        {
            BankChequePrint::checkLayoutFieldRights(bankChequeLayout, fieldNum(BankChequeLayout, Signature2Bmp));
            payrollWorkerPayCheckTmp.CheckSignature2    = bankChequeLayout.Signature2Bmp;
        }

        payrollWorkerPayCheckTmp.CurrencyIndicator     = currency;

        if (bankChequeLayout.BankName)
        {
            payrollWorkerPayCheckTmp.BankAddress           = bankAddr;
        }

        if (bankChequeLayout.UseAcode || bankChequeLayout.UseBcode || bankChequeLayout.UseCCode)
        {
            payrollWorkerPayCheckTmp.abcCode               = bankChequeLayout.abcCode();
        }

        payrollWorkerPayCheckTmp.CurrencyTxt               = PayrollTmpChequePrintout.CurrencyTxt;
        payrollWorkerPayCheckTmp.micrLine                  = PayrollTmpChequePrintout.displayMICRLine();
        payrollWorkerPayCheckTmp.RecipientName             = PayrollTmpChequePrintout.RecipientName;
        payrollWorkerPayCheckTmp.RegistrationNum           = PayrollTmpChequePrintout.RegistrationNum;
        payrollWorkerPayCheckTmp.PersonnelNumber           = PayrollTmpChequePrintout.PersonnelNumber;
        payrollWorkerPayCheckTmp.ChequeTopDrop             = PayrollTmpChequePrintout.ChequeTopDrop;
        payrollWorkerPayCheckTmp.ChequeTop                 = PayrollTmpChequePrintout.ChequeTop;
        payrollWorkerPayCheckTmp.Numerals2LetterPart1      = this.numerals2LetterPart1();
        payrollWorkerPayCheckTmp.Numerals2LetterPart2      = this.numerals2LetterPart2();
        payrollWorkerPayCheckTmp.ChequeNumMethod           = isPreprinted;
        payrollWorkerPayCheckTmp.AccountId                 = PayrollTmpChequePrintout.AccountId;
        payrollWorkerPayCheckTmp.PaymentDate               = PayrollTmpChequePrintout.PayrollPaymentDate;
        payrollWorkerPayCheckTmp.PayrollPayPeriodStr       = PayrollTmpChequePrintout.PayrollPayPeriodStr;
        payrollWorkerPayCheckTmp.PaymentNumber             = PayrollTmpChequePrintout.ChequeNum;
        payrollWorkerPayCheckTmp.PayrollReportSection      = PayrollTmpChequePrintout.PayrollReportSection;
        payrollWorkerPayCheckTmp.Code                      = strLRTrim(PayrollTmpChequePrintout.PayrollCode);
        payrollWorkerPayCheckTmp.CurrentAmount             = PayrollTmpChequePrintout.PayrollCurrentAmount;
        payrollWorkerPayCheckTmp.YTDAmount                 = PayrollTmpChequePrintout.PayrollYTDAmount;
        payrollWorkerPayCheckTmp.QuantityUnit              = PayrollTmpChequePrintout.PayrollQuantityUnit;
        payrollWorkerPayCheckTmp.Quantity                  = PayrollTmpChequePrintout.PayrollQuantity;
        payrollWorkerPayCheckTmp.Rate                      = PayrollTmpChequePrintout.PayrollRate;
        payrollWorkerPayCheckTmp.YTDAccrued                = PayrollTmpChequePrintout.PayrollYTDAccrued;
        payrollWorkerPayCheckTmp.YTDUsed                   = PayrollTmpChequePrintout.PayrollYTDUsed;
        payrollWorkerPayCheckTmp.NetAvailable              = PayrollTmpChequePrintout.PayrollNetAvailable;
        payrollWorkerPayCheckTmp.PayrollReportDataRowCounter = PayrollTmpChequePrintout.PayrollReportDataRowCounter;
        payrollWorkerPayCheckTmp.insert();
    }

]]></Source>
      </Method>
      <Method>
        <Name>processReport</Name>
        <Source><![CDATA[
    public void processReport()
    {
        this.initPayrollTmpChequePrintout();
        this.fetch();
    }

]]></Source>
      </Method>
      <Method>
        <Name>setValues</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Sets up values for the temporary table.
    /// </summary>
    protected void setValues()
    {
        if (bankChequeLayout.CompanyName)
        {
            companyAddr = companyInfoOrg.postalAddress().Address;
        }
        else
        {
            companyAddr = #emptyString;
        }

        if (bankChequeLayout.BankName)
        {
            bankName = BankAccountTable::find(PayrolltmpChequePrintout.AccountId).Name;
        }
        else
        {
            bankName = #emptyString;
        }

        currency = Currency::find(PayrolltmpChequePrintout.CurrencyCode).CurrencyCodeISO;
    }

]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>
