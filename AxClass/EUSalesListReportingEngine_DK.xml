<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EuSalesListReportingEngine_DK</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EUSalesListReportingEngine_DK</c> class extends the functionality of the
/// <c>EUSalesListReportingEngine</c> class in order to support requirements that are specific to
/// Denmark.
/// </summary>
#ISOCountryRegionCodes
[CountryRegionAttribute(#isoDK)]
public class EuSalesListReportingEngine_DK extends EUSalesListReportingEngine implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        const int MaxLengthCompanyVATNum = 8;
        CompanyInfo companyInfo = CompanyInfo::find();

        boolean ret = super(calledFrom);

        setprefix(#PrefixField(companyInfo, VATNum));
        if (generateFile)
        {
            EUSalesListTax prefix;

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() || TaxIntegrationUtils::isMultipleTaxIdEnabledForEUSalesList())
            {
                TaxRegistration taxRegistration = TaxRegistration::find(taxRegistrationRecId);
                prefix = TaxCountryRegionParameters::find(
                    MultipleTaxIdReportingHelper::getCountryRegionIDFromTaxRegistrationRecId(taxRegistrationRecId)).SalesTaxCode;
                VATNum companyVATNum = TaxVATNumTable::stripVATNum(taxRegistration.RegistrationNumber, prefix);
                ret = this.checkFieldLength(strlen(companyVATNum), MaxLengthCompanyVATNum, taxRegistration, fieldnum(TaxRegistration, RegistrationNumber));
            }
            else
            {
                prefix = TaxCountryRegionParameters::getSalesTaxCode(companyInfo);
                VATNum vatNum = TaxVATNumTable::stripVATNum(companyInfo.vatNum, prefix);
                ret = this.checkFieldLength(
                    strLen(vatNum),
                    MaxLengthCompanyVATNum,
                    companyInfo,
                    fieldnum(CompanyInfo, vatNum));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEUSalesListReportingLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the grouped EU sales list reporting lines.
    /// </summary>
    /// <param name="_euSalesListReportingLine">
    /// The <c>EUSalesListReportingLine</c> table buffer.
    /// </param>
    /// <returns>
    /// true if the validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Descendant classes can override this method to perform custom validations on the grouped lines,
    /// e.g., checking the field length of the amount fields.
    /// </remarks>
    protected boolean validateEUSalesListReportingLine(EUSalesListReportingLine _euSalesListReportingLine)
    {
        #define.MaxLengthDispatchId(10)
        #define.MaxLengthVATNum(12)

        EUSalesList euSalesList = queryRun.get(tablenum(EUSalesList));
        boolean     ret = super(_euSalesListReportingLine);

        setprefix(#PreFixField(_euSalesListReportingLine, AccountNum));

        if (generateFile)
        {
            if (_euSalesListReportingLine)
            {
                //Dispatch ID
                this.checkFieldLength(
                    strlen(_euSalesListReportingLine.DispatchId),
                    #MaxLengthDispatchId,
                    euSalesList,
                    fieldnum(EUSalesList, DispatchId));

                //VATNum
                this.checkFieldLength(
                    strlen(_euSalesListReportingLine.StrippedVATNum),
                    #MaxLengthVATNum,
                    euSalesList,
                    fieldnum(EUSalesList, vatNum));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return EUSalesListReportingEngine::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineAmounts</Name>
				<Source><![CDATA[
    protected void updateLineAmounts(EUSalesListReportingLine _euSalesListReportingLine)
    {
        EUSalesList euSalesList = queryRun.get(tableNum(EUSalesList));

        if (this.isItemAmount(euSalesList))
        {
            _euSalesListReportingLine.selectForUpdate(true);
            _euSalesListReportingLine.ItemAmountMST += euSalesList.AmountMST;
        }

        if (this.isTriangularAmount(euSalesList))
        {
            _euSalesListReportingLine.selectForUpdate(true);
            _euSalesListReportingLine.TriangularAmountMST += euSalesList.AmountMST;
        }

        if (this.isServiceAmount(euSalesList))
        {
            _euSalesListReportingLine.selectForUpdate(true);
            _euSalesListReportingLine.ServiceAmountMST += euSalesList.ServiceAmountMST;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>