<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ThresholdHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ThresholdHandler_IN</c> is used to calculation and get the target threshold section that the specified application source line
///     to be hit.
/// </summary>
abstract class ThresholdHandler_IN
{
    Threshold_IN            threshold;
    ThresholdSections_IN    targetThresholdSection;
    TransDate               transDate;
    Map                     thresholdValueCalculationMap;
    ThresholdSourceLine_IN  thresholdSourceLine;
    boolean                 isTargetThresholdSectionCalculated;
    boolean                 isTargetThresholdSectionsLeftSiblingsCalculated;
    boolean                 isTargetThresholdSectionsRightSiblingsCalculated;
    List                    targetThresholdSectionsParents;
    List                    targetThresholdSectionsLeftSiblings;
    List                    targetThresholdSectionsRightSiblings;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTargetThresholdSection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates target <c>ThresholdSections_IN</c>.
    /// </summary>
    /// <param name="_parentThresholdSectionRecId">
    ///     The parameter to indicate parentThresholdSection.
    /// </param>
    /// <returns>
    ///     Returns the exact threshold section found.
    /// </returns>
    protected ThresholdSections_IN calcTargetThresholdSection(ThresholdSectionsRecId_IN _parentThresholdSectionRecId = 0)
    {
        ThresholdValueCalculation_IN    thresholdValueCalculation;
        ThresholdSections_IN            thresholdSection;
        real                            value;

        while select thresholdSection
            where (!thresholdSection.ValidFrom
                    || thresholdSection.ValidFrom <= transDate)
                && (!thresholdSection.ValidTo
                    || thresholdSection.ValidTo >= transDate)
                && thresholdSection.ParentRecId == _parentThresholdSectionRecId
                && thresholdSection.Threshold   == threshold.RecId

        {
            if (!thresholdValueCalculationMap.exists(thresholdSection.ThresholdCalculationBase))
            {
                thresholdValueCalculation = ThresholdValueCalculationFactory_IN::newThresholdValueCalculation(thresholdSection, thresholdSourceLine);
                thresholdValueCalculationMap.insert(thresholdSection.ThresholdCalculationBase, thresholdValueCalculation);
            }
            else
            {
                thresholdValueCalculation = thresholdValueCalculationMap.lookup(thresholdSection.ThresholdCalculationBase);
                thresholdValueCalculation.setThresholdSection(thresholdSection);
            }

            if (thresholdValueCalculation)
            {
                // Only when LowLimit or Uplimit is not empty, then we need to calculate the value,
                // or else, it means currenet threshold section satisfied for all scenarios,
                // then avoid calculate the value to save perf cost
                if (thresholdSection.LowLimit || thresholdSection.UpLimit)
                {
                    switch (thresholdSection.ThresholdCalculationType)
                    {
                        case ThresholdCalculationType_IN::Cumulative:
                            value = thresholdValueCalculation.getCumulativeValue();
                            break;
                        case ThresholdCalculationType_IN::PerTrans:
                            value = thresholdValueCalculation.getTransValue();
                            break;
                        case ThresholdCalculationType_IN::PerTransLine:
                            value = thresholdValueCalculation.getTransLineValue();
                            break;
                    }
                }

                if (FeatureStateProvider::isFeatureEnabled(TaxWithholdCustomerThresholdBasedOnPaymentOnlyFeature::instance()))
                {
                    if (thresholdSourceLine is TaxWHTThresholdSourceLineImpl_IN)
                    {
                        TaxWHTThresholdSourceLineImpl_IN taxWHTThresholdSourceLineImpl = thresholdSourceLine as TaxWHTThresholdSourceLineImpl_IN;
                        if (taxWHTThresholdSourceLineImpl.parmIsProgressiveApplicable())
                        {
                            if ((!thresholdSection.LowLimit || value > thresholdSection.LowLimit)
                                && (!thresholdSection.UpLimit || value <= thresholdSection.UpLimit))
                            {
                                break;
                            }
                        }
                        else
                        {
                            // For the transaction that is not progressive, it should get the upper section instead of lower section.
                            if ((!thresholdSection.LowLimit || value >= thresholdSection.LowLimit)
                                && (!thresholdSection.UpLimit || value < thresholdSection.UpLimit))
                            {
                                break;
                            }
                        }
                    }
                }
                else
                {
                    if ((!thresholdSection.LowLimit || value > thresholdSection.LowLimit)
                        && (!thresholdSection.UpLimit || value <= thresholdSection.UpLimit))
                    {
                        break;
                    }
                }
            }
        }

        if (thresholdSection.RecId && !thresholdSection.IsLeaf)
        {
            targetThresholdSectionsParents.addEnd(thresholdSection);
            return this.calcTargetThresholdSection(thresholdSection.RecId);
        }
        return thresholdSection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTargetThresholdSectionsLeftSiblings</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrives the <c>ThresholdSections_IN</c> list with the amount range is below the target section in the same level.
    /// </summary>
    protected void calcTargetThresholdSectionsLeftSiblings()
    {
        ThresholdSections_IN thresholdSectionLeftSibling;

        if (!isTargetThresholdSectionCalculated)
        {
            this.calcTargetThresholdSection();
        }

        if (targetThresholdSection)
        {
            while select thresholdSectionLeftSibling
                where (!thresholdSectionLeftSibling.ValidFrom
                        || thresholdSectionLeftSibling.ValidFrom    <= transDate)
                    && (!thresholdSectionLeftSibling.ValidTo
                        || thresholdSectionLeftSibling.ValidTo      >= transDate)
                    && thresholdSectionLeftSibling.UpLimit          <= targetThresholdSection.LowLimit
                    && thresholdSectionLeftSibling.UpLimit
                    && thresholdSectionLeftSibling.Threshold        == threshold.RecId
                    && thresholdSectionLeftSibling.ParentRecId      == targetThresholdSection.ParentRecId
            {
                targetThresholdSectionsLeftSiblings.addEnd(thresholdSectionLeftSibling);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTargetThresholdSectionsRightSiblings</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrives the <c>ThresholdSections_IN</c> list with the amount range is above the target section in the same level.
    /// </summary>
    protected void calcTargetThresholdSectionsRightSiblings()
    {
        ThresholdSections_IN thresholdSectionRightSibling;

        if (!isTargetThresholdSectionCalculated)
        {
            this.calcTargetThresholdSection();
        }

        if (targetThresholdSection)
        {
            while select thresholdSectionRightSibling
                where (!thresholdSectionRightSibling.ValidFrom
                        || thresholdSectionRightSibling.ValidFrom   <= transDate)
                    && (!thresholdSectionRightSibling.ValidTo
                        || thresholdSectionRightSibling.ValidTo     >= transDate)
                    && thresholdSectionRightSibling.LowLimit        >= targetThresholdSection.UpLimit
                    && targetThresholdSection.UpLimit
                    && thresholdSectionRightSibling.Threshold       == threshold.RecId
                    && thresholdSectionRightSibling.ParentRecId     == targetThresholdSection.ParentRecId
            {
                targetThresholdSectionsRightSiblings.addEnd(thresholdSectionRightSibling);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetThresholdSection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets target <c>ThresholdSections_IN</c>. If it has not been calculated yet, calculate it.
    /// </summary>
    /// <returns>
    ///     Returns target threshold section.
    /// </returns>
    public ThresholdSections_IN getTargetThresholdSection()
    {
        if (!isTargetThresholdSectionCalculated)
        {
            targetThresholdSection = this.calcTargetThresholdSection();
            isTargetThresholdSectionCalculated = true;
        }
        return targetThresholdSection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetThresholdSectionParents</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets list of target <c>ThresholdSections_IN</c> ancestors. If it has not been calculated yet, calculate it.
    /// </summary>
    /// <returns>
    ///     Returns list of target <c>ThresholdSections_IN</c> ancestors
    /// </returns>
    public List getTargetThresholdSectionParents()
    {
        if (!isTargetThresholdSectionCalculated)
        {
            this.calcTargetThresholdSection();
            isTargetThresholdSectionCalculated = true;
        }
        return targetThresholdSectionsParents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetThresholdSectionsLeftSiblings</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>ThresholdSections_IN</c> list with the amount range is below the target section in the same level.
    /// </summary>
    /// <returns>
    ///     Returns the <c>ThresholdSections_IN</c> list with the amount range is below the target section in the same level.
    /// </returns>
    public List getTargetThresholdSectionsLeftSiblings()
    {
        if (!isTargetThresholdSectionsLeftSiblingsCalculated)
        {
            this.calcTargetThresholdSectionsLeftSiblings();
            isTargetThresholdSectionsLeftSiblingsCalculated = true;
        }
        return targetThresholdSectionsLeftSiblings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetThresholdSectionsRightSiblings</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>ThresholdSections_IN</c> list with the amount range is above the target section in the same level.
    /// </summary>
    /// <returns>
    ///     Returns the <c>ThresholdSections_IN</c> list with the amount range is above the target section in the same level.
    /// </returns>
    public List getTargetThresholdSectionsRightSiblings()
    {
        if (!isTargetThresholdSectionsRightSiblingsCalculated)
        {
            this.calcTargetThresholdSectionsRightSiblings();
            isTargetThresholdSectionsRightSiblingsCalculated = true;
        }
        return targetThresholdSectionsRightSiblings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>ThresholdHandler_IN</c> instance.
    /// </summary>
    /// <param name="_thresholdSourceLine">
    ///     The application represent source line.
    /// </param>
    public void initialize(ThresholdSourceLine_IN _thresholdSourceLine)
    {
        thresholdSourceLine                                 = _thresholdSourceLine;
        transDate                                           = _thresholdSourceLine.parmThreholdLineTransDate();

        isTargetThresholdSectionCalculated                  = false;
        isTargetThresholdSectionsLeftSiblingsCalculated     = false;
        isTargetThresholdSectionsRightSiblingsCalculated    = false;
        targetThresholdSectionsParents                      = new List(Types::Record);
        targetThresholdSectionsLeftSiblings                 = new List(Types::Record);
        targetThresholdSectionsRightSiblings                = new List(Types::Record);
        thresholdValueCalculationMap                        = new Map(Types::Enum, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initThreshold</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Init <c>Threshold_IN</c>.
    /// </summary>
    abstract protected void initThreshold()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>