<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustOutPaym_NACHA_IAT</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustOutPaym_NACHA_IAT extends CustOutPaym_NACHA
{
    private const str Zero = '0';
    private const str Spc = ' ';
    private const int DateSequenceYMD = 321;
    private const int DateDay = 2;
    private const int DateMonth = 2;
    private const int DateYear = 2;

    Counter numTransactionsPerBatch; // Number of Transaction Records per batch
    Counter batchNum;
    Voucher ledgerVoucher;

    AmountCur totalDebitAmountPerBatch;
    AmountCur totalCreditAmountPerBatch;
    Voucher voucher;

    CompanyInfo companyInfo;
    CustTable custTable;
    CustVendNACHAIATInfoTable_US custVendNACHAIATInfoTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBatchControlFieldPositions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes field alignment information to the output file to help in verifying the data.
    /// </summary>
    /// <remarks>
    /// This is a debug method. The alignment information can be turned on for NACHA by setting the
    /// <c>DebugNACHA</c> macro in the <c>CustOutPaym_NACHA</c> class declaration to true.
    /// </remarks>
    protected void addBatchControlFieldPositions()
    {
        const str BATCRecord = 'ABBBCCCCCCDDDDDDDDDDEEEEEEEEEEEEFFFFFFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHIIIIIIJJJJJJJJZZZZZZZ - BATCH CONTROL RECORD';
        const str BATCBatchNumber = '                                                                                       ZZZZZZZ - Batch Number = "0000001"';
        const str BATCOriginatingDFI = '                                                                               JJJJJJJJ - Originating DFI Identification [TTTTAAAA]';
        const str BATCReserved = '                                                                         IIIIII - Reserved = <BLANK>';
        const str BATCAuthentication = '                                                      HHHHHHHHHHHHHHHHHHH - Message Authentication Code = <BLANK>';
        const str BATCCompanyID = '                                            GGGGGGGGGG - Company Identification';
        const str BATCCreditAmount = '                                FFFFFFFFFFFF - Total Credit Amount';
        const str BATCDebitAmount = '                    EEEEEEEEEEEE - Total Debit Amount';
        const str BATCEntryHash = '          DDDDDDDDDD - Entry Hash';
        const str BATCAddendaCount = '    CCCCCC - Entry/Addenda Count';
        const str BATCServiceClassCode = ' BBB - Service Class Code = "220" for Credits ["225" for Debits]';
        const str BATCRecordTypeCode = 'A - Record Type Code = "8"';

        file.write(BATCRecord);
        file.write(BATCBatchNumber);
        file.write(BATCOriginatingDFI);
        file.write(BATCReserved);
        file.write(BATCAuthentication);
        file.write(BATCCompanyID);
        file.write(BATCCreditAmount);
        file.write(BATCDebitAmount);
        file.write(BATCEntryHash);
        file.write(BATCAddendaCount);
        file.write(BATCServiceClassCode);
        file.write(BATCRecordTypeCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBatchHeaderFieldPositions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes field alignment information to the output file to help in verifying the data.
    /// </summary>
    /// <remarks>
    /// This is a debug method. The alignment information can be turned on for NACHA by setting the
    /// <c>DebugNACHA</c> macro in the <c>CustOutPaym_NACHA</c> class declaration to true.
    /// </remarks>
    protected void addBatchHeaderFieldPositions()
    {
        const str BATHRecord = 'ABBBCCCCCCCCCCCCCCCCDDEFFFFFFFFFFFFFFFGGHHHHHHHHHHHIIIJJJJJJJJJJZZZLLLMMMMMMNNNOPPPPPPPPQQQQQQ- BATHh Hedeer ';
        const str BATHBATHhNumber = '                                                                                       QQQQQQQ - BATHh Number = "0000001"';
        const str BATHoriginationDFI_Id = '                                                                               PPPPPPPP - Orifinating DFI Identification';
        const str BATHOriginStatusCode = '                                                                              O - Originator Status Code = "1"';
        const str BATHSettlementDate = '                                                                           NNN - Settlement Date [Julian] - ACH Operator Inserted';
        const str BATHEffectiveDate = '                                                                     MMMMMM - Effective Entry Date [YYMMDD]';
        const str DestinationCurrencyCode = '                                                                  LLL- Desination currency code';
        const str BATHOrigCurrencyCode = '                                                               ZZZ -Orignator currency code';
        const str BATHcompanyEntryDescription = '                                                     JJJJJJJJJJ Compnay entry description';
        const str BATHstandardEntryClassCode = '                                                  III - Standard entry class code';
        const str BATHorignatorIdentification = '                                        HHHHHHHHHH - Orignator identification ';
        const str BATHIISODestinationCountryCode = '                                      GG - ISO destinatio country code ';
        const str BATHforeignExchIndicatorRef = '                       FFFFFFFFFFFFFFF - FOREIGN EXCHANGE REFERENCE ';
        const str BATHForeignExchRefIndicator = '                      E - Foreign Exchange Reference Indicator ';
        const str BATHForeignExchIndicator = '                    DD - FOREIGN EXCHANGE INDICATOR';
        const str BATHIATIndicator = '    CCCCCCCCCCCCCCCC- IAT indicator';
        const str BATHServiceClassCode = ' BBB - Service Class Code = "220" for Credits ["225" for Debits]';
        const str BATHRecordTypeCode = 'A - Record Type Code = "8"';

        file.write(BATHRecord);
        file.write(BATHBATHhNumber);
        file.write(BATHoriginationDFI_Id);
        file.write(BATHOriginStatusCode);
        file.write(BATHSettlementDate);
        file.write(BATHEffectiveDate);
        file.write(DestinationCurrencyCode);
        file.write(BATHOrigCurrencyCode);
        file.write(BATHcompanyEntryDescription);
        file.write(BATHstandardEntryClassCode);
        file.write(BATHorignatorIdentification);
        file.write(BATHIISODestinationCountryCode);
        file.write(BATHforeignExchIndicatorRef);
        file.write(BATHForeignExchRefIndicator);
        file.write(BATHForeignExchIndicator);
        file.write(BATHIATIndicator);
        file.write(BATHServiceClassCode);
        file.write(BATHRecordTypeCode);
        file.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addIATDetailRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method is be called whenever a detail record is added to the NACHA EFT.
    /// </summary>
    /// <param name="_voucher">
    ///    A voucher number of the transaction.
    /// </param>
    /// <param name="bankRoutingNumber">
    ///    A bank routing number.
    /// </param>
    /// <param name="debitAmount">
    ///    A debit amount of the transaction.
    /// </param>
    /// <param name="creditAmount">
    ///    A credit amount of the transaction.
    /// </param>
    /// <param name="_iatInfoTable">
    ///    A table buffer of the IAT information entered for the transaction.
    /// </param>
    /// <param name="_custTable">
    ///    A table buffer of the vendor information.
    /// </param>
    public void addIATDetailRecord(
        Voucher _voucher,
        str bankRoutingNumber,
        AmountCur debitAmount,
        AmountCur creditAmount,
        CustVendNACHAIATInfoTable_US _iatInfoTable,
        CustTable _custTable)
    {
        const int RoutingNumLen = 9;
        const int RoutingNumWOCheckDigitLen = 8;
        const str FileFormatIAT = 'IAT';

        if (ledgerVoucher != _voucher)
        {
            fileFormat = FileFormatIAT;
            custTable = _custTable;
            custVendNACHAIATInfoTable = _iatInfoTable;
            ledgerVoucher = _voucher;
            numTransactionsPerBatch += 9; // 1 Transaction and 7 addendaRecord in "IAT" case

            if (batchNum)
            {
                file.writeExp(this.createBatchControlRecord());
            }
            file.writeExp(this.createBatchHeaderRecord());

            if (#DebugNACHA)
            {
                this.addBatchHeaderFieldPositions();
            }
            batchNum++;
            totalDebitAmountPerBatch = 0;
            totalCreditAmountPerBatch = 0;
            numTransactionsPerBatch = 0;
        }
        recCount ++;
        totalDebitAmount += debitAmount;
        totalCreditAmount += creditAmount;
        totalDebitAmountPerBatch += debitAmount;
        totalCreditAmountPerBatch += creditAmount;
        numTransactions ++;

        // The routingHash is the sum of the bank routing numbers (first 8 digits) of each detail record.
        real hash;
        if (strlen(bankRoutingNumber) >= RoutingNumLen)
        // Do not include the Check Digit from the Routing Number in the Hash Calculation
        {
            hash = str2Num(substr(bankRoutingNumber,1, RoutingNumWOCheckDigitLen));
        }
        else
        {
            hash = str2Num(bankRoutingNumber);
        }

        routingHash += hash;

        // If the value exceeds 9999999999, then the number is decremented by 10000000000
        if (routingHash >= #HashEntryMaximum)
        {
            routingHash -= #HashEntryMaximum;
        }

        if (#DebugNACHA)
        {
            this.addAlignment(#NACHARecLen);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    boolean checkValues(LedgerJournalTrans _ledgerJournalTrans = null, RunbaseProgress _progress = null)
    {
        // No payment specification check is required

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createACH_ControlRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the Automated Clearing House (ACH) control record to the Electronic Funds Transfer (EFT)
    ///    output file.
    /// </summary>
    /// <returns>
    ///    The ACH control record.
    /// </returns>
    //
    //  Entry Hash is calucated as follows:
    //      It is the sum of the values of the "Receiving DFI's" of the Detail Records (IAT)
    //      NOTE: Do NOT include the Check Digit from the Receiving DFI -- it is only the first 8 digits of the Routing Number.
    //
    protected container createACH_ControlRecord()
    {
        const str RecTypeCode = '9';
        const int NumTrxLen = 8;
        const int RoutingHashLen = 10;
        const int AmountLen = 12;
        const int BlockSizeLen = 6;
        const int BatchCountLenth = 6;

        str 1 recordTypeCode = RecTypeCode; // 01 - 01
        str 6 batchCount = strRep(Zero, 6); // 02 - 07 Will always be '000001' until we add support for payments for multiple companies
        str 6 blockCount = strRep(Zero, 6); // 08 - 13
        str 8 entryAddendaCount = strRep(Zero, 8); // 14 - 21
        str 10 entryHash = strRep(Zero, 10); // 22 - 31 Sum of the values of the "Receiving DFI's" of the Detail Records (First 8 digits of Routing Number only - Do NOT include the Check Digit)
        str 12 debitTotal = strRep(Zero, 12); // 32 - 43
        str 12 creditTotal = strRep(Zero, 12); // 44 - 55
        str 39 reserved = strRep(Spc, 39); // 56 - 94

        // A block is 940 characters... determine how many blocks exist in this EFT:
        if (((recCount * #NACHARecLen) mod #NACHABlockSize) != 0)
        {
            blockCount = num2Str0(((recCount * #NACHARecLen) div #NACHABlockSize) + 1, BlockSizeLen, 0, 0, 0);
        }
        else
        {
            blockCount = num2Str0(((recCount * #NACHARecLen) div #NACHABlockSize), BlockSizeLen, 0, 0, 0);
        }

        entryAddendaCount = num2Str0(numTransactions, NumTrxLen);
        entryHash = num2Str0(routingHash, RoutingHashLen);

        debitTotal = this.num2StrNACHA(totalDebitAmount, AmountLen);
        creditTotal = this.num2StrNACHA(totalCreditAmount, AmountLen);
        batchCount = strRFix(int2Str(batchNum), BatchCountLenth,Zero);

        container controlACH = conNull();
        controlACH = conIns(
            controlACH,
            1,
            recordTypeCode + batchCount + blockCount + entryAddendaCount + entryHash + debitTotal + creditTotal + reserved);

        this.addHeaderControlRecord();
        return controlACH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createACH_HeaderRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the Automated Clearing House (ACH) header record to the Electronic Funds Transfer (EFT)
    ///    output file.
    /// </summary>
    /// <returns>
    ///    The ACH header record.
    /// </returns>
    protected container createACH_HeaderRecord()
    {
        const str RecTypeCode = '1';
        const str PriortyCode = '01';
        const str FormatCodeIAT = '1';
        const str BFactor = '10';
        const str RecSize = '094';
        const str IdMod = 'A';
        const int DestBankNameLen = 23;
        const int OrigNameLen = 23;
        // Offset Hardcoded Value
        str 1 recordTypeCode = RecTypeCode; // 01 - 01 1
        str 2 priorityCode = PriortyCode; // 02 - 03 01
        str 10 immediateDestination = strRep(Zero, 10); // 04 - 13 bankAccount.RegistraionNum
        str 10 immediateOrigin = strRep(Zero, 10); // 14 - 23 bankAccount.CompanyPaymId
        str 6 fileCreationDate = strRep(Zero, 6); // 24 - 29 System Date
        str 4 fileCreationTime = strRep(Zero, 4); // 30 - 33 System Time (HHMM)
        str 1 fileIdModifier = IdMod; // 34 - 34 A
        str 3 recordSize = RecSize; // 35 - 37 094
        str 2 blockingFactor = BFactor; // 38 - 39 10
        str 1 formatCode = FormatCodeIAT; // 40 - 40 1
        str 23 immediateDestinationName = strRep(Spc, 23); // 41 - 63 bankAccount.DestinationName - new field on Bank Accounts Form (aka Clearing Bank)
        str 23 immediateOriginName = strRep(Spc, 23); // 64 - 86 bankAccount.Name ==> custVendPaym.sendersBankName
        str 8 referenceCode = strRep(Spc, 8); // 87 - 94 <BLANK>

        UtcDateTime creationDateTimeInUserTimeZone = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getUserPreferredTimeZone());
        date creationDate = DateTimeUtil::date(creationDateTimeInUserTimeZone);
        TimeOfDay creationTime = DateTimeUtil::time(creationDateTimeInUserTimeZone);

        fileCreationDate = date2str(creationDate, DateSequenceYMD, DateDay, 0, DateMonth, 0, DateYear, DateFlags::None); // YYMMDd
        fileCreationTime = this.time2StrHM_NA(creationTime); // HHMm

        bankAccountTable = BankAccountTable::find(this.parmBankAccountID());
        immediateDestination = Spc + this.getBankRoutingNumber(BankUSRoutingNumberFormat::WithCheckDigit);
        immediateOrigin = companyInfo.Tax1099RegNum;
        immediateDestinationName = strLFix(bankAccountTable.BankDestinationName, DestBankNameLen, Spc);
        immediateOriginName = strLFix(companyInfo.Name, OrigNameLen, Spc);

        container headerACH = conNull();
        headerACH = conIns(
            headerACH,
            1,
            recordTypeCode + priorityCode + immediateDestination + immediateOrigin + fileCreationDate
                + fileCreationTime + fileIdModifier + recordSize + blockingFactor + formatCode
                + immediateDestinationName + immediateOriginName + referenceCode);

        this.addHeaderControlRecord();
        return headerACH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchControlRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the batch control record to the Electronic Funds Transfer (EFT) output file.
    /// </summary>
    /// <returns>
    ///    The batch control record.
    /// </returns>
    //
    //  Entry Hash is calucated as follows:
    //      It is the sum of the values of the "Receiving DFI's" of the Detail Records (IAT)
    //      NOTE: Do NOT include the Check Digit from the Receiving DFI -- it is only the first 8 digits of the Routing Number.
    //

    protected container createBatchControlRecord()
    {
        const str RecTypeCode = '8';
        const str ClassCode = '225';
        const int NumTrxLength = 6;
        const int RoutingHashLen = 10;
        const int AmountLen = 12;
        const int CompPaymIDLen = 10;
        const int BatchLenth = 7;
        // Offset Hardcoded Value
        str 1 recordTypeCode = RecTypeCode; // 01 - 01 8
        str 3 serviceClassCode = ClassCode; // 02 - 04 225 when generated from Accounts Receivable -> Means "Debits Only"
        str 6 entryAddendaCount = strRep(Zero, 6); // 05 - 10 Number of Detail Records
        str 10 entryHash = strRep(Zero, 10); // 11 - 20 Sum of the values of the "Receiving DFI's" of the Detail Records (First 8 digits of Routing Number only - Do NOT include the Check Digit)
        str 12 totalDebitAmt = strRep(Zero, 12); // 21 - 32 Total of Debit entries
        str 12 totalCreditAmt = strRep(Zero, 12); // 33 - 44 Total of Credit entries
        str 10 companyId = strRep(Spc, 10); // 45 - 54 bankAccount.CompanyId
        str 19 messageAuthenticationCode = strRep(Spc, 19); // 55 - 73 <BLANK>
        str 6 reserved =   strRep(Spc, 6); // 74 - 79 <BLANK>
        str 8 originatingDFI_Id = strRep(Zero, 8); // 80 - 87 bankAccount.RoutingNumber
        str 7 batchNumber = strRep(Zero,7); // 88 - 94 0000001

        entryAddendaCount = num2Str0(numTransactionsPerBatch, NumTrxLength);
        entryHash = num2Str0(routingHash, RoutingHashLen);
        totalDebitAmt = this.num2StrNACHA(totalDebitAmountPerBatch, AmountLen);
        totalCreditAmt = this.num2StrNACHA(totalCreditAmountPerBatch, AmountLen);
        companyId = substr(companyInfo.Tax1099RegNum + strRep(Spc, CompPaymIDLen), 1, CompPaymIDLen);
        originatingDFI_Id = this.getBankRoutingNumber(BankUSRoutingNumberFormat::WithoutCheckDigit);
        batchNumber = strRFix(int2Str(batchNum), BatchLenth, Zero);

        container controlBatch = conNull();
        controlBatch = conIns(
            controlBatch,
            1,
            recordTypeCode + serviceClassCode + entryAddendaCount + entryHash + totalDebitAmt
                + totalCreditAmt + companyId + messageAuthenticationCode + reserved + originatingDFI_Id + batchNumber);

        this.addHeaderControlRecord();
        return controlBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchHeaderRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the Batch Header record to the Electronic Funds Transfer (EFT) output file.
    /// </summary>
    /// <returns>
    ///    A container that has the Batch Header record.
    /// </returns>
    protected container createBatchHeaderRecord()
    {
        const str RecTypeCode = '5';
        const str ClassCode = '225';
        const str One = '1';
        const str EntDesc = 'RECEIVABL ';
        const str BatchNumStr = '0000001';
        const int CompPaymIDLen = 10;
        const int ForeignExchIndicatorLen = 2;
        const int ForeignExchRefIndicatorLen = 1;
        const int ForeignExchIndicatorRefLen = 15;
        const int ISODestinationCountryCodeLen = 2;
        const int OrignatorIdentificationLen = 10;
        const str StandardEntryClassCodeIAT = 'IAT';
        const int OrigCurrencyCodeLen = 3;
        const int DestinationCurrencyCodeLen = 3;

        str 1 recordTypeCode = RecTypeCode; // 01 - 01 5
        str 3 serviceClassCode = ClassCode; // 02 - 04 220 when generated from Accounts Payable -> Means "Credits Only"
        str 16 iatIndicator = strRep(Spc, 16); // 05 - 20 BLANK
        str 2 foreignExchIndicator = strRep(Spc, 2); // 21 - 22 Values comes form IAT info Table
        str 1 foreignExchRefIndicator = strRep(Spc, 1); // 23 - 23 Values comes form IAT info Table
        str 15 foreignExchIndicatorRef = strRep(Spc, 15); // 24 - 38 Values comes form IAT info Table
        str 2 isoDestinationCountryCode = strRep(Spc, 2) ; // 39 - 40 Vendtable.CountryId
        str 10 orignatorIdentification = strRep(Spc, 10); // 41 - 50 custVendPaym.SendersBanksIdentificationOfSender ~ bankAccount.CompanyId
        str 3 standardEntryClassCode = StandardEntryClassCodeIAT; // 51 - 53 IAT
        str 10 companyEntryDescription = EntDesc; // 54 - 63 PAYABLES
        str 3 origCurrencyCode = strRep(Spc, 3); // 64 - 66 CompanyInfo.CurrencyCode
        str 3 destinationCurrencyCode = strRep(Spc, 3); // 67 - 69 CompanyInfo.CurrencyCode
        str 6 effectiveEntryDate = strRep(Zero, 6); // 70 - 75 Default to System Date, but user will receive prompt to change
        str 3 settlementDate = strRep(Spc, 3); // 76 - 78 BLANK Julian Date inserted by ACH Operator
        str 1 originatorStatusCode = One; // 79 - 79 1
        str 8 originationDFI_Id = strRep(Spc, 8); // 80 - 87                          bankAccount.RoutingNumber
        str 7 batchNumber = BatchNumStr; // 88 - 94          0000001

        standardEntryClassCode = fileFormat;
        foreignExchIndicator = strLFix(enum2str(custVendNACHAIATInfoTable.ForeignExchIndicator), ForeignExchIndicatorLen, Spc);
        foreignExchRefIndicator = strLFix(enum2str(custVendNACHAIATInfoTable.ForeignExchRefIndicator), ForeignExchRefIndicatorLen , Spc);
        foreignExchIndicatorRef = strLFix(custVendNACHAIATInfoTable.ForeignExchRefID, ForeignExchIndicatorRefLen, Spc);
        isoDestinationCountryCode = strLFix(custTable.postalAddress().CountryRegionId, ISODestinationCountryCodeLen, Spc);
        orignatorIdentification = strLFix(companyInfo.Tax1099RegNum, OrignatorIdentificationLen, Spc);
        origCurrencyCode = strLFix(Ledger::accountingCurrency(companyInfo.RecId), OrigCurrencyCodeLen, Spc);
        destinationCurrencyCode = strLFix(custTable.Currency, DestinationCurrencyCodeLen, Spc);
        effectiveEntryDate = date2str(effectiveEntDate, DateSequenceYMD, DateDay, 0, DateMonth, 0, DateYear, DateFlags::None);         // YYMMDd
        originationDFI_Id = this.getBankRoutingNumber(BankUSRoutingNumberFormat::WithoutCheckDigit);

        container headerBatch = conNull();
        headerBatch = conIns(
            headerBatch,
            1,
            recordTypeCode + serviceClassCode + iatIndicator + foreignExchIndicator + foreignExchRefIndicator
                + foreignExchIndicatorRef + isoDestinationCountryCode + orignatorIdentification
                + standardEntryClassCode + companyEntryDescription + origCurrencyCode + destinationCurrencyCode
                + effectiveEntryDate + settlementDate +originatorStatusCode + originationDFI_Id + batchNumber);

        this.addHeaderControlRecord();
        return headerBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPaym</Name>
				<Source><![CDATA[
    CustPaym custPaym(LedgerJournalTrans _ledgerJournalTrans)
    {
        CustPaym ret = super(_ledgerJournalTrans);
        if (ret)
        {
            ret.parmCustVendNACHAIATInfoTable(CustVendNACHAIATInfoTable_US::findByLedgerJournalTrans(_ledgerJournalTrans.RecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendOutPaymRecordRootClassId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The method should return the class ID of the corresponding parent of <c>CustVendOutPaymRecord</c>
    ///    classes.
    /// </summary>
    /// <returns>
    ///    The class ID.
    /// </returns>
    /// <remarks>
    ///    The class must be inherited from the <c>CustVendOutPaymRecord</c> class.
    /// </remarks>
    public classId custVendOutPaymRecordRootClassId()
    {
        return classNum(CustOutPaymRecord_NACHA_IAT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates payment lines using the <c>LedgerJournalTrans</c> table.
    /// </summary>
    public void generatePaymentLines()
    {
        #OCCRetryCount
        boolean ok = true;

        try
        {
            LedgerJournalTrans ledgerJournalTrans;
            CustOutPaymRecord custOutPaymRecord;
            ttsbegin;

            if (!this.checkBankAccountNumber())
            {
               throw error("@SYS18447");
            }

            setprefix("@SYS17561");

            queryRun.reset();

            outPaymRecordList = new List(Types::Class);

            while (queryRun.next())
            {
                ledgerJournalTrans = queryRun.get(tablenum(LedgerJournalTrans));

                if (!this.isOffsetAccountValid(ledgerJournalTrans))
                {
                    continue;
                }

                if (CustOutPaym_NACHA_IAT::isIATNACHAFormat(ledgerJournalTrans.PaymMode))
                {
                    custOutPaymRecord = CustVendOutPaymRecord::construct(
                        ledgerJournalTrans.PaymMode,
                        ledgerJournalTrans.PaymSpec,
                        this,
                        this.custPaym(ledgerJournalTrans));
                    custOutPaymRecord.parmFile(file);

                    setprefix(strfmt(
                        "@SYS66048",
                        ledgerJournalTrans.TransDate,
                        ledgerJournalTrans.Voucher,
                        ledgerJournalTrans.parmAccount()));

                    if (custOutPaymRecord.checkValues(ledgerJournalTrans, this.parmProgress()))
                    {
                        custOutPaymRecord.output();
                        outPaymRecordList.addEnd(custOutPaymRecord);
                        this.updateLedgerJournalTrans(ledgerJournalTrans, custOutPaymRecord, true);
                        this.trackSequenceOnPaymMode(CustVendPaymModeTable::findCommon(ledgerJournalTrans, true));
                    }
                    else
                    {
                        ok = false;
                    }
                }
            }

            if (!ok)
            {
                throw error("@SYS18447");
            }

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneratePaymentLinesSort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sorts the generated payment lines before they are processed.
    /// </summary>
    /// <param name="_queryRun">
    /// The generate payment lines query run.
    /// </param>
    protected void addGeneratePaymentLinesSort(QueryRun _queryRun)
    {
        _queryRun.query().dataSourceTable(tablenum(LedgerJournalTrans)).addSortField(fieldnum(LedgerJournalTrans, Voucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddendaSequence</Name>
				<Source><![CDATA[
    int getAddendaSequence()
    {
        return numTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    public PaymInterfaceName interfaceName()
    {
        return 'NACHA IAT (US)';
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the media, such as creating a file, and creates the header of the media, such as creating a
    ///    start record for a file.
    /// </summary>
    public void open()
    {
        companyInfo = CompanyInfo::find();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIATNACHAFormat</Name>
				<Source><![CDATA[
    public static boolean isIATNACHAFormat(PaymMode _paymMode)
    {
        return CustPaymModeTable::find(_paymMode).ClassId == classNum(CustOutPaym_NACHA_IAT);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>