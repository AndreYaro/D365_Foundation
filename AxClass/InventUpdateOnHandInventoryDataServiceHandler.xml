<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventUpdateOnHandInventoryDataServiceHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventUpdateOnHandInventoryDataServiceHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ttsNotifyPreCommit</Name>
				<Source><![CDATA[
    [PreHandlerFor(classStr(InventUpdateOnhand), methodStr(InventUpdateOnhand, ttsNotifyPreCommit))]
    internal static void ttsNotifyPreCommit(XppPrePostArgs _args)
    {
        if (InventInventoryDataServiceFeature::isEnabled())
        {
            InventSumDelta inventSumDelta;
            WHSInventReserveDelta whsInventReserveDelta;
            DataAreaId company = curext();
            SQLTransactionId transactionId = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().sqlTransactionId();
            CreatedTransactionId ttsId = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId();

            InventInventoryDataServiceParameters parameter = InventInventoryDataServiceParameters::find();
            InventoryServiceStatus serviceStatus = parameter.InventoryServiceStatus;
            boolean isReservationOffsetEnabled = InventInventoryDataServiceSoftReservationHelper::isOffsetEnabled(parameter);

            if (parameter.isInventoryServiceStatusEnable())
            {
                if (parameter.IsProcessingQueueBackup)
                {
                    InventInventoryDataServiceInventSumQueue inventSumQueue;

                    if (!isReservationOffsetEnabled && InventUseDimOfInventSumToggle::instance().isEnabled() && InventIVQueueGroupByCachePartitionFlight::instance().isEnabled())
                    {
                        insert_recordset inventSumQueue (ItemId, InventDimId, CachePartitionId_IV, Company)
                            select ItemId, InventDimId, InventLocationId, company
                                from inventSumDelta
                                    group by InventLocationId, ItemId, InventDimId
                                    where inventSumDelta.SQLTransactionId == transactionId;
                    }
                    else
                    {
                        insert_recordset inventSumQueue (ItemId, InventDimId, Company)
                            select ItemId, InventDimId, company
                                from inventSumDelta
                                    group by ItemId, InventDimId
                                    where inventSumDelta.SQLTransactionId == transactionId;
                    }

                    if (InventInventoryDataServiceWHSFeature::isFeatureEnabled() && parameter.IsWHSItemEnabled)
                    {
                        InventInventoryDataServiceWHSQueue whsQueue;

                        insert_recordset whsQueue (ItemId, InventDimId, Company)
                            select ItemId, InventDimId, company
                                from whsInventReserveDelta
                                    group by ItemId, InventDimId
                                    where whsInventReserveDelta.TTSId == ttsId;
                    }
                }
                else
                {
                    InventInventoryDataServiceInventSumQueueBackUp inventSumQueueBackUp;
                    if (!isReservationOffsetEnabled && InventUseDimOfInventSumToggle::instance().isEnabled() && InventIVQueueGroupByCachePartitionFlight::instance().isEnabled())
                    {
                        insert_recordset inventSumQueueBackUp (ItemId, InventDimId, CachePartitionId_IV, Company)
                            select ItemId, InventDimId, InventLocationId, company
                                from inventSumDelta
                                    group by InventLocationId, ItemId, InventDimId
                                    where inventSumDelta.SQLTransactionId == transactionId;
                    }
                    else
                    {
                        insert_recordset inventSumQueueBackUp (ItemId, InventDimId, Company)
                            select ItemId, InventDimId, company
                                from inventSumDelta
                                    group by ItemId, InventDimId
                                    where inventSumDelta.SQLTransactionId == transactionId;
                    }

                    if (InventInventoryDataServiceWHSFeature::isFeatureEnabled() && parameter.IsWHSItemEnabled)
                    {
                        InventInventoryDataServiceWHSQueueBackup whsQueueBackup;

                        insert_recordset whsQueueBackup (ItemId, InventDimId, Company)
                            select ItemId, InventDimId, company
                                from whsInventReserveDelta
                                    group by ItemId, InventDimId
                                    where whsInventReserveDelta.TTSId == ttsId;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>