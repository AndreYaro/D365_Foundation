<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureDelete_CustVendInvoice_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class FactureDelete_CustVendInvoice_RU extends FactureDelete_RU
{
    boolean allowDeleteCostAllocation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        protected void check()
    {
        FactureJour_RU correctedFactureJour;
        TransDate      periodStart, correctedPeriodStart;

        super();

        select firstonly bookTable
            where bookTable.ClosingDate
        join bookTrans
            where bookTrans.SalesPurchBookTable_RU == bookTable.RecId  &&
                  bookTrans.FactureId              == jour.FactureId   &&
                  (bookTrans.TransType             == SalesPurchBookTransType_RU::CreditNote ||
                   bookTrans.TransType             == SalesPurchBookTransType_RU::Invoice);

        if (bookTable)
        {
            this.addError(this.errorClosedBook(bookTable.BookId));
        }

        if (LedgerParameters::find().AdvanceAdjustment_W)
        {
            while select FactureDate,ReverseDate,Reversed,FactureExternalId, FactureDate_External from correctedFactureJour
                where correctedFactureJour.FactureType                == FactureType_RU::AdvanceAdjustment     &&
                      correctedFactureJour.CustVendInvoiceAccount     == jour.CustVendInvoiceAccount           &&
                      correctedFactureJour.CorrectedFactureExternalId == jour.FactureExternalId                &&
                      correctedFactureJour.CorrectedFactureDate       == jour.FactureDate                      &&
                      correctedFactureJour.CorrectedPeriod            == jour.FactureDate                      &&
                     (! correctedFactureJour.Reversed                                                          ||
                     (correctedFactureJour.Reversed                                                            &&
                      correctedFactureJour.ReverseDate                != correctedFactureJour.FactureDate))
            {
                if (correctedFactureJour.Reversed)
                {
                    [periodStart]          = TaxReportPeriod::datePeriodPurchSalesBook_RU(correctedFactureJour.FactureDate);
                    [correctedPeriodStart] = TaxReportPeriod::datePeriodPurchSalesBook_RU(correctedFactureJour.ReverseDate);
                }

                if (! correctedFactureJour.Reversed || (correctedFactureJour.Reversed && periodStart != correctedPeriodStart))
                {
                    this.addError(strfmt("@GLS112743", correctedFactureJour.FactureExternalId, correctedFactureJour.FactureDate_External));
                }
            }
        }

        if (!allowDeleteCostAllocation && jour.isCostAllocationFacture())
        {
            this.addError(strfmt("@GLS114527"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        protected void delete()
    {
        RecordSortedList                invoiceJourList;
        CustVendInvoiceJour             custVendInvoiceJour;
        CustVendTrans                   custVendTrans;
        FactureCalcAmountAdjustments_RU factureCalcAdj;

        custVendInvoiceJour = new DictTable(jour.Module == FactureModule_RU::Cust ?
                                            tablenum(CustInvoiceJour)             :
                                            tablenum(VendInvoiceJour)).makeRecord();

        custVendTrans = new DictTable(jour.Module == FactureModule_RU::Cust ?
                                      tablenum(CustTrans)                   :
                                      tablenum(VendTrans)).makeRecord();

        invoiceJourList = jour.invoiceJourSortedList();

        super();

        while (invoiceJourList.next(custVendInvoiceJour))
        {
            select firstonly custVendTrans
                where custVendTrans.AccountNum  == custVendInvoiceJour.InvoiceAccount
                   && custVendTrans.TransDate   == custVendInvoiceJour.InvoiceDate
                   && custVendTrans.Invoice     == custVendInvoiceJour.InvoiceId
                   && custVendTrans.Voucher     == custVendInvoiceJour.LedgerVoucher;

            factureCalcAdj = FactureCalcAmountAdjustments_RU::newCustVendTrans(custVendTrans);
            factureCalcAdj.calc();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBookTrans</Name>
				<Source><![CDATA[
        protected void deleteBookTrans()
    {
        delete_from bookTrans
            where bookTrans.FactureId  == jour.FactureId                         &&
                  (bookTrans.TransType == SalesPurchBookTransType_RU::CreditNote ||
                   bookTrans.TransType == SalesPurchBookTransType_RU::Invoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJourRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns <c>CustVendInvoiceJour</c> record by given RecId
    /// </summary>
    /// <param name="_recId">
    ///   RecId of record to search for
    /// </param>
    /// <returns>
    ///   Found <c>CustVendInvoiceJour</c> record
    /// </returns>
    abstract protected CustVendInvoiceJour getInvoiceJourRecId(RecId _recId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns <c>CustVendInvoiceTrans</c> record by given RecId
    /// </summary>
    /// <param name="_recId">
    ///   RecId of record to search for
    /// </param>
    /// <returns>
    ///   Found <c>CustVendInvoiceTrans</c> record
    /// </returns>
    abstract protected CustVendInvoiceTrans getInvoiceTransRecId(RecId _recId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowDeleteCostAllocation</Name>
				<Source><![CDATA[
        public boolean parmAllowDeleteCostAllocation(boolean _allowDeleteCostAllocation = allowDeleteCostAllocation)
    {
        allowDeleteCostAllocation = _allowDeleteCostAllocation;
        return allowDeleteCostAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceTrans</Name>
				<Source><![CDATA[
        final protected void updateInvoiceTrans(FactureTrans_RU _trans)
    {
        invoiceTrans = this.getInvoiceTrans(_trans);

        if (invoiceTrans)
        {
            if (invoiceTrans.Qty)
            {
                invoiceTrans.CustVendInvoiceTrans::setFacturedQty_RU(invoiceTrans.CustVendInvoiceTrans::getFacturedQty_RU() - _trans.Qty);
            }
            else
            {
                invoiceTrans.CustVendInvoiceTrans::setFacturedQty_RU(0);
            }

            invoiceTrans.CustVendInvoiceTrans::setFacturedFully_RU(NoYes::No);
            invoiceTrans.update();
        }
        else
        {
            return;
        }

        super(_trans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkup</Name>
				<Source><![CDATA[
        final protected void updateMarkup(FactureTrans_RU _trans)
    {
        MarkupTrans markup;

        if (_trans.FactureLineType == FactureLineType_RU::Markup)
        {
            select firstonly forupdate markup
                where markup.RecId == _trans.MarkupRefRecId;
        }

        if (markup)
        {
            markup.FacturedAmount_RU -= _trans.LineAmount;
            markup.doUpdate();
        }
        else
        {
            return;
        }

        switch (markup.TransTableId)
        {
            case this.transTableId() :
                invoiceTrans    = this.getInvoiceTransRecId(markup.TransRecId);
                this.updateInvoiceJour(this.getInvoiceJour(invoiceTrans));
                break;

            case this.jourTableId()  :
                this.updateInvoiceJour(this.getInvoiceJourRecId(markup.TransRecId));
                break;

            default                  :
                throw error(strfmt("@GLS104937", tableid2pname(markup.TransTableId)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>