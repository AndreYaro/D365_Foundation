<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjValProjCategoryDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjValProjCategoryDP</c> class is a report data provider class for the
///    <c>ProjValProjCategory</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(ProjValProjCategory)),
    SRSReportParameterAttribute(classstr(ProjValProjCategoryContract))
]

class ProjValProjCategoryDP extends SRSReportDataProviderBase
{
    #ProjReports

    ProjOptionTM            projTM;
    ProjOptionFixedPrice    projFixedPrice;
    ProjOptionInternal      projInternal;
    ProjOptionInvestment    projInvestment;
    ProjOptionTime          projTime;

    NoYes                   projTMBillingMethod;
    NoYes                   projFixedPriceBillingMethod;

    ProjOptionHours         categoryHour;
    ProjOptionItem          categoryItem;
    ProjOptionCost          categoryCost;
    ProjOptionRevenue       categoryRevenue;

    ProjValProjCategory     projValProjCategoryEnum;

    ProjValEmplCategory     valEmplCategory;
    ProjValEmplProj         valEmplProj;
    ProjValProjCategory     valProjCategory;

    ProjValCategory         valCategory;
    ProjValEmpl             valEmployee;
    ProjValProject          valProject;

    ProjValProjectTmp       projValProjectTmp;

    QueryRun                queryRun;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existContractLine</Name>
				<Source><![CDATA[
    private boolean existContractLine(ProjInvoiceProjId _contractId)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsPSAContractLineItems = query.addDataSource(tableNum(PSAContractLineItems));
        PSAContractLineItemRangesHelper::addBillingMethodRangesToDS(
            qbdsPSAContractLineItems,
            projTMBillingMethod,
            projFixedPriceBillingMethod);
        PSAContractLineItemRangesHelper::addTransactionTypeRangesToDS(
            qbdsPSAContractLineItems,
            categoryHour,
            categoryCost,
            categoryRevenue,
            categoryItem,
            false);
        qbdsPSAContractLineItems.addRange(fieldNum(PSAContractLineItems, ProjInvoiceProjId)).value(queryValue(_contractId));

        QueryRun qRun = new QueryRun(query);
        qRun.next();
        PSAContractLineItems psaContractLineItmes = qRun.get(tableNum(PSAContractLineItems));

        return psaContractLineItmes.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameterValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the parameter values to the variables.
    /// </summary>
    private void getParameterValues()
    {
        ProjValProjCategoryContract contract = this.parmDataContract() as ProjValProjCategoryContract;

        projTM = contract.parmTimeMaterial();
        projFixedPrice = contract.parmFixedPrice();
        projInvestment = contract.parmInvestment();
        projInternal = contract.parmInternalCost();
        projTime = contract.parmTime();

        projTMBillingMethod = contract.parmTimeMaterialBillingMethod();
        projFixedPriceBillingMethod = contract.parmFixedPriceBillingMethod();

        categoryHour = contract.parmHour();
        categoryCost = contract.parmExpenses();
        categoryItem = contract.parmItem();
        categoryRevenue = contract.parmRevenue();

        projValProjCategoryEnum = contract.parmValProjCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjValProjectTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>ProjValProjectTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>ProjValProjectTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('ProjValProjectTmp')]
    public ProjValProjectTmp getProjValProjectTmp()
    {
        select * from projValProjectTmp;
        return projValProjectTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjValProjectTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the values into the temporary table.
    /// </summary>
    /// <param name="_projValProjCategoryTable">
    ///    A <c>ProjValProjCategoryTable</c> table buffer.
    /// </param>
    /// <param name="_projTable">
    ///    A <c>ProjTable</c> table buffer.
    /// </param>
    /// <param name="_projCategory">
    ///    A <c>ProjCategory</c> table buffer.
    /// </param>
    private void insertProjValProjectTmp(ProjValProjCategoryTable  _projValProjCategoryTable, ProjTable _projTable, ProjCategory _projCategory)
    {
        projValProjectTmp.clear();
        projValProjectTmp.GroupId = _projValProjCategoryTable.GroupId;
        projValProjectTmp.GroupName = _projValProjCategoryTable.Name;
        projValProjectTmp.ProjId = _projTable.ProjId;
        projValProjectTmp.Name = _projTable.Name;
        projValProjectTmp.ProjType = _projTable.Type;
        projValProjectTmp.CategoryId = _projCategory.CategoryId;
        projValProjectTmp.CategoryName = _projCategory.Name;
        projValProjectTmp.CategoryType = _projCategory.CategoryType;
        projValProjectTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. The method should compute data and populate the data
    ///    tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjValProjCategoryTable    qb_ProjValProjCategoryTable;
        ProjValProjCategorySetUp    qb_ProjValProjCategorySetUp;

        ProjTable                   projTable;
        ProjCategory                projCategory;

        ProjCategoryGroupId         prev_Id;

        this.getParameterValues();
        queryRun = new QueryRun(this.parmQuery());
        boolean projMultipleContractLinesForProjectFeatureEnabled = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

        while (queryRun.next())
        {
            qb_ProjValProjCategoryTable = queryRun.get(tablenum(ProjValProjCategoryTable));
            qb_ProjValProjCategorySetUp = queryRun.get(tablenum(ProjValProjCategorySetUp));

            switch (projValProjCategoryEnum)
            {
                case ProjValProjCategory::Project :
                    while select projTable
                        where (projTable.ProjId == qb_ProjValProjCategorySetUp.ProjId)
                            && ((!projMultipleContractLinesForProjectFeatureEnabled
                                    && (!(projFixedPrice
                                        ^ projInternal
                                        ^ projTM
                                        ^ projInvestment
                                        ^ projTime)
                                    || (projFixedPrice && projTable.Type == ProjType::FixedPrice)
                                    || (projInternal   && projTable.Type == ProjType::Internal)
                                    || (projInternal   && projTable.Type == ProjType::Cost)
                                    || (projInvestment && projTable.Type == ProjType::Investment)
                                    || (projTime       && projTable.Type == ProjType::Time)
                                    || (projTM         && projTable.Type == ProjType::TimeMaterial)))
                                || projMultipleContractLinesForProjectFeatureEnabled)
                    {
                        if (!projMultipleContractLinesForProjectFeatureEnabled
                            || this.existContractLine(projTable.ProjInvoiceProjId))
                        {
                            this.insertProjValProjectTmp(qb_ProjValProjCategoryTable, projTable, projCategory);
                            if (qb_ProjValProjCategorySetUp.GroupId != prev_Id)
                            {
                                prev_Id = qb_ProjValProjCategorySetUp.GroupId;
                            }
                        }
                    }
                break;

                case ProjValProjCategory::Category :
                    while select projCategory
                        where (projCategory.CategoryId == qb_ProjValProjCategorySetUp.CategoryId) &&
                              (!(categoryItem ^
                                 categoryHour ^
                                 categoryCost ^
                                 categoryRevenue) ||
                                (categoryHour     && projCategory.CategoryType == ProjCategoryType::Hour)      ||
                                (categoryItem     && projCategory.CategoryType == ProjCategoryType::Item)      ||
                                (categoryCost     && projCategory.CategoryType == ProjCategoryType::Cost)      ||
                                (categoryRevenue  && projCategory.CategoryType == ProjCategoryType::Revenue))
                        {
                            this.insertProjValProjectTmp(qb_ProjValProjCategoryTable, projTable, projCategory);

                            if (qb_ProjValProjCategorySetUp.GroupId != prev_Id)
                            {
                                prev_Id = qb_ProjValProjCategorySetUp.GroupId;
                            }
                        }
                break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>