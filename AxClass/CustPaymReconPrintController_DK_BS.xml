<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPaymReconPrintController_DK_BS</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustPaymReconPrintController_DK_BS</c> class is the controller class for the
///    <c>CustPaymReconcilliationPrint_DK_BS</c> report.
/// </summary>
public class CustPaymReconPrintController_DK_BS extends SrsReportRunController implements BatchRetryable
{
    #define.ReportName('CustPaymReconciliationPrint_DK_BS.Report')

    str 5       recType;
    str 128     data;
    str 4       transKode;
    str 11      transCodeTxt;
    int         custNrX, dateX, amountX, paymRefX;
    Counter     conIdx;

    CustPaymReconciliationImport_DK_BS      custPaymReconImport_DK_BS;
    CustPaymReconciliationPrint_DK_BSTmp    custPaymReconTmp;
    LedgerJournalTrans                      ledgerJournalTrans;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceDK00011, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>CustPaymReconciliationPrint_DK_BS</c> report.
    /// </summary>
    /// <param name="_args">
    ///    A value that represents the context.
    /// </param>
    public void init(Args _args)
    {
        conIdx = 1;
        custPaymReconImport_DK_BS = _args.object();
        custPaymReconTmp.FileName = custPaymReconImport_DK_BS.filename();

        while (conpeek(custPaymReconImport_DK_BS.reportData(),conIdx))
        {
            data = conpeek(custPaymReconImport_DK_BS.reportData(),conIdx);
            conIdx++;
            recType  = substr(data,1,5);
            transKode  = substr(data,14,4);

            if (recType == 'BS012')
            {
                switch (transKode)
                {
                    case '0211':
                    case '0213': paymRefX   = 70;
                                 custNrX    = 26;
                                 dateX      = 50;
                                 amountX    = 57;
                                 break;

                    case '0215':
                    case '0216': paymRefX   = 73;
                                 custNrX    = 29;
                                 dateX      = 53;
                                 amountX    = 60;
                                 break;
                }
            }

            if (recType == 'BS042')
            {
                switch (transKode)
                {
                    case '0236' : transCodeTxt = 'Godkendt';
                        break;
                    case '0237' : transCodeTxt = 'Afvist';
                        break;
                    case '0238' : transCodeTxt = 'Afmeldt';
                        break;
                    case '0239' : transCodeTxt = 'Tilbageført';
                        break;
                    case '0251' : transCodeTxt = 'Afmeldt';
                        break;
                    case '0252' : transCodeTxt = 'Afmeldt';
                        break;
                    case '0297' : transCodeTxt = 'Godkendt';
                        break;
                    case '0298' : transCodeTxt = 'Afmeldt';
                        break;
                    case '0299' : transCodeTxt = 'Tilbageført';
                        break;

                    default     : transCodeTxt = 'Ukendt';
                        break;
                }

                custPaymReconTmp.RecType    = recType;
                custPaymReconTmp.Balance    = transCodeTxt;
                custPaymReconTmp.CustomNum  = substr(data,custNrX,15);
                custPaymReconTmp.Date         = substr(data,dateX,6);
                custPaymReconTmp.Amount       = str2num(substr(data,amountX,13))/100;
                custPaymReconTmp.TransTxt         = paymRefX == 70 ? substr(data,(paymRefX+9),20): '';
                custPaymReconTmp.PayDate      = substr(data,104,6);
                custPaymReconTmp.PostDate     = substr(data,110,6);
                custPaymReconTmp.PayAmount    = str2num(substr(data,116,13))/100;

                select firstonly Voucher from ledgerJournalTrans where ledgerJournalTrans.PaymReference == substr(data,paymRefX,9);
                custPaymReconTmp.InvoiceId    = ledgerJournalTrans.Voucher;
                custPaymReconTmp.insert();
                custPaymReconTmp.clear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Override this method to change report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        SrsTmpTblMarshallerContract    srsTmpTblMarshallerContract;
        RecId                          recId;

        this.init(this.parmArgs());
        recId = this.storeTmpTable();

        srsTmpTblMarshallerContract = this.parmReportContract().parmRdpContract() as srsTmpTblMarshallerContract;
        srsTmpTblMarshallerContract.parmTmpTableDataRecId(recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stores the temporary table by using an instance of the <c>SRSTmpTblMarshaller</c> class.
    /// </summary>
    /// <returns>
    ///    The record ID after the temporary table is stored as a container.
    /// </returns>
    public RecId storeTmpTable()
    {
        SRSReportRunPermission      srsPermission = new SRSReportRunPermission();
        RecId                       recId;

        srsPermission.assert();

        recId = SRSTmpTblMarshaller::sendTmpTblToDataProvider(custPaymReconTmp);

        CodeAccessPermission::revertAssert();

        delete_from custPaymReconTmp;

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        SrsReportRunController  controller = new CustPaymReconPrintController_DK_BS();
        controller.parmReportName(#ReportName);
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>