<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostPriceCompareChartModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostPriceCompareChartModel</c> class is responsible for providing data
/// in a format consumable by a price comparison chart control.
/// </summary>
public static class CostPriceCompareChartModel
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prepareChartData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the price comparison data in a format consumable by a chart control.
    /// </summary>
    /// <param name = "_comparisonData">Price comparison data.</param>
    /// <param name = "_parameters">The parameters containing label IDs of the data series.</param>
    /// <returns>An instance of <c>CostCompareChartTmp</c> table with data ready to be used by a chart control.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CostCompareChartTmp prepareChartData(CostPriceCompareTmp _comparisonData, CostPriceCompareChartModelDataSeriesParameters _parameters)
    {
        CostCompareChartTmp chartData;

        while select _comparisonData where _comparisonData.Level != 0
        {
            CostPriceCompareChartModel::insertRecord(chartData, _comparisonData, _comparisonData.CostCompareValue1, 1, _parameters.dataSeries1);
            CostPriceCompareChartModel::insertRecord(chartData, _comparisonData, _comparisonData.CostCompareValue2, 2, _parameters.dataSeries2);
            CostPriceCompareChartModel::insertRecord(chartData, _comparisonData, _comparisonData.CostDifference,    3, _parameters.dataSeries3);
        }

        return chartData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForDrilldown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query for the chart data source to display data corresponding to the current drill level and data point selection.
    /// </summary>
    /// <param name = "_drillLevel">Drill level.</param>
    /// <param name = "_rangeValue">Range value corresponding to the chart data point that was selected.</param>
    /// <returns>A <c>Query</c> object that can be used by a chart control.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Query buildQueryForDrilldown(
            CostPriceCompareChartDrillLevel _drillLevel,
            str                             _rangeValue
        )
    {
        Query                   query              = new Query(queryStr(CostCompareUnitCostChartQuery));
        QueryBuildDataSource    dataSourceBuilder  = query.dataSourceTable(tablenum(CostCompareChartTmp));

        // Add group by criteria
        dataSourceBuilder.orderMode(OrderMode::GroupBy);
        switch (_drillLevel)
        {
            case CostPriceCompareChartDrillLevel::Start:
                dataSourceBuilder.addSortField(fieldNum(CostCompareChartTmp, CostGroupType));
                break;
            case CostPriceCompareChartDrillLevel::CostGroupType:
                dataSourceBuilder.addSortField(fieldNum(CostCompareChartTmp, CostGroupId));
                dataSourceBuilder.addRange(fieldnum(CostCompareChartTmp, CostGroupType)).value(queryValue(_rangeValue));
                break;
            case CostPriceCompareChartDrillLevel::CostGroup:
                dataSourceBuilder.addSortField(fieldNum(CostCompareChartTmp, Resource));
                dataSourceBuilder.addRange(fieldnum(CostCompareChartTmp, CostGroupId)).value(queryValue(_rangeValue));
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecord</Name>
				<Source><![CDATA[
    private static void insertRecord(
        CostCompareChartTmp    _chartData,
        CostPriceCompareTmp    _comparisonData,
        CostPrice              _costUnitAmount,
        TmpLineNum             _dataSeriesSort,
        str                    _dataSeries)
    {
        _chartData.initFromCostPriceCompareTmp(_comparisonData);
        _chartData.CostUnit         = CurrencyExchangeHelper::price(_costUnitAmount);
        _chartData.DataSeriesSort   = _dataSeriesSort;
        _chartData.DataSeries       = _dataSeries;
        _chartData.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>