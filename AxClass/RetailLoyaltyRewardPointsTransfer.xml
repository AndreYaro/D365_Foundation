<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLoyaltyRewardPointsTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailLoyaltyRewardPointsTransfer</c> class is used for transfering points from blocked card to active card
/// and from active cards to other active cards.
/// </summary>
class RetailLoyaltyRewardPointsTransfer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustToZeroSourceCardBalance</Name>
				<Source><![CDATA[
    private static void adjustToZeroSourceCardBalance(RetailLoyaltyCardNumber loyaltyCardSourceNumber, RetailLoyaltyCardNumber loyaltyCardDestinationNumber)
    {
        RetailLoyaltyCard loyaltyCardSource = RetailLoyaltyCard::findByCardNumber(loyaltyCardSourceNumber);
        RetailLoyaltyCard loyaltyCardDestination = RetailLoyaltyCard::findByCardNumber(loyaltyCardDestinationNumber);
        RetailLoyaltyCardRewardPointTrans  loyaltyCardRewardPointTrans;
        date calculateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        RetailLoyaltyRewardPointAmountQty pointBalance = 0;

        ttsBegin;
        //Adjust balance of source card to zero
        while select RewardPoint from loyaltyCardRewardPointTrans
            group by RewardPoint
            where (loyaltyCardRewardPointTrans.CardNumber == loyaltyCardSource.CardNumber)
        {
            pointBalance = -RetailLoyaltyCardRewardPointTrans::calcPoints(loyaltyCardSource, loyaltyCardRewardPointTrans.RewardPoint, RetailLoyaltyPointStatusTypeBase::Active)
                - RetailLoyaltyCardRewardPointTrans::calcPoints(loyaltyCardSource, loyaltyCardRewardPointTrans.RewardPoint, RetailLoyaltyPointStatusTypeBase::Unvested);

            if (pointBalance == 0)
            {
                continue;
            }

            RetailLoyaltyRewardPointsTransfer::postAdjustment(loyaltyCardSource, loyaltyCardDestination, pointBalance, calculateDate, loyaltyCardRewardPointTrans.RewardPoint);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markSourceCardAsReplaced</Name>
				<Source><![CDATA[
    private static void markSourceCardAsReplaced(RetailLoyaltyCardNumber _sourceCardId, RetailLoyaltyCardNumber _destinationCardId)
    {
        RetailLoyaltyCard loyaltyCard;

        ttsBegin;

        loyaltyCard = RetailLoyaltyCard::findByCardNumber(_sourceCardId, true);
        loyaltyCard.ReplacementCard = RetailLoyaltyCard::findByCardNumber(_destinationCardId).RecId;
        loyaltyCard.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAdjustment</Name>
				<Source><![CDATA[
    private static void postAdjustment(RetailLoyaltyCard _loyaltyCardSource
                                        , RetailLoyaltyCard _loyaltyCardDestination
                                        , RetailLoyaltyRewardPointAmountQty pointsAmount
                                        , date _entryDate
                                        , RefRecId _rewardPoint )
    {
        RetailLoyaltyCardRewardPointAdjustment rewardPointAdjustmentSource;

        ttsBegin;

        rewardPointAdjustmentSource.initValue();
        rewardPointAdjustmentSource.AdjustmentId = numberSeq::newGetNumFromId(RetailParameters::numRefLoyaltyAdjustmentId().NumberSequenceId).num();
        rewardPointAdjustmentSource.LoyaltyCard = _loyaltyCardSource.RecId;
        rewardPointAdjustmentSource.RewardPoint = _rewardPoint;
        rewardPointAdjustmentSource.RewardPointAmountQty = pointsAmount;
        rewardPointAdjustmentSource.TransactionDate = _entryDate;
        rewardPointAdjustmentSource.Comment = strFmt("@SYS4004429",_loyaltyCardDestination.CardNumber);
        rewardPointAdjustmentSource.insert();
        rewardPointAdjustmentSource.postAdjustment();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferLoyaltyPointsFromBlockedCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method copies transactions related to source loyalty card to destination loyalty card
    /// The balance of source loyalty card will be adjusted to zero
    /// </summary>
    /// <param name="_sourceCardId">
    /// ID of bloacked card number
    /// </param>
    /// <param name="_destinationCardId">
    /// ID of active card. Loyalty points will be transfered to it
    /// </param>
    public static void transferLoyaltyPointsFromBlockedCard(RetailLoyaltyCardNumber _sourceCardId, RetailLoyaltyCardNumber _destinationCardId)
    {
        if (!RetailLoyaltyRewardPointsTransfer::validateSourceLoyaltyCard(_sourceCardId))
        {
            return;
        }

        if (!RetailLoyaltyRewardPointsTransfer::validateDestinationLoyaltyCard(_destinationCardId))
        {
            return;
        }

        ttsBegin;

        RetailLoyaltyManager::copyLoyaltyCardTransactions(_sourceCardId, _destinationCardId);
        RetailLoyaltyRewardPointsTransfer::adjustToZeroSourceCardBalance(_sourceCardId, _destinationCardId);
        RetailLoyaltyRewardPointsTransfer::markSourceCardAsReplaced(_sourceCardId, _destinationCardId);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferLoyaltyPointsFromActiveCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method copies transactions related to source loyalty card to destination loyalty card
    /// The balance of source loyalty card will be adjusted to zero.
    /// </summary>
    /// <param name="_sourceCardId">ID of active card number.</param>
    /// <param name="_destinationCardId">ID of active card. Loyalty points will be transfered to it.</param>
    /// <param name="_rewardPoint">The reward point.</param>
    /// <param name="_pointsToTransfer">The points to transfer.</param>
    public static void transferLoyaltyPointsFromActiveCard(
        RetailLoyaltyCardNumber _sourceCardId, 
        RetailLoyaltyCardNumber _destinationCardId, 
        RetailLoyaltyRewardPoint _rewardPoint, 
        RetailLoyaltyRewardPointAmountQty _pointsToTransfer)
    {
        if (_pointsToTransfer <= 0
            || !RetailLoyaltyRewardPointsTransfer::validateSourceLoyaltyCard(_sourceCardId, true)
            || !RetailLoyaltyRewardPointsTransfer::validateDestinationLoyaltyCard(_destinationCardId))
        {
            return;
        }
        else
        {
            real transferred = 0;
            utcDateTime now = DateTimeUtil::utcNow();
            RetailLoyaltyCard loyaltyCardSource = RetailLoyaltyCard::findByCardNumber(_sourceCardId);
            RetailLoyaltyCard loyaltyCardDestination = RetailLoyaltyCard::findByCardNumber(_destinationCardId);
            ttsBegin;

            RetailLoyaltyCardRewardPointTrans rewardPointTrans;

            // Groups transactions by expiration and reward point id type to enable a single
            // adjustment of reward points per expiration date.
            while select ExpirationDate, sum(Remaining), Affiliation from rewardPointTrans
                group by ExpirationDate, RewardPoint
                order by ExpirationDate
                where rewardPointTrans.CardNumber == _sourceCardId
                    && rewardPointTrans.RewardPoint == _rewardPoint.RecId
                    && rewardPointTrans.Remaining != 0
            {
                if (transferred >= _pointsToTransfer)
                {
                    break;
                }

                RetailLoyaltyCardRewardPointTrans trans;
                // Post adjustment
                trans.LoyaltyTransactionType = RetailLoyaltyTransactionType::LoyaltyAdjustment;
                trans.EntryType = RetailLoyaltyRewardPointEntryType::Adjust;
                trans.AdjustmentId = numberSeq::newGetNumFromId(RetailParameters::numRefLoyaltyAdjustmentId().NumberSequenceId).num();
                trans.LoyaltyTransLineNum = 1.0;
                trans.Affiliation = rewardPointTrans.Affiliation;
                trans.CardNumber = _destinationCardId;
                trans.CustAccount = CustTable::findByPartyRecId(loyaltyCardDestination.Party).AccountNum;
                trans.RewardPoint = _rewardPoint.RecId;

                // Check how many of remaining points to transfer.
                if (transferred + rewardPointTrans.Remaining <= _pointsToTransfer)
                {
                    trans.RewardPointAmountQty = rewardPointTrans.Remaining;
                    transferred += rewardPointTrans.Remaining;
                }
                else if (transferred < _pointsToTransfer)
                {
                    trans.RewardPointAmountQty = min(_pointsToTransfer - transferred, rewardPointTrans.Remaining);
                    transferred += trans.RewardPointAmountQty;
                }

                trans.EntryDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(now, DateTimeUtil::getUserPreferredTimeZone()));
                trans.EntryTime = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(now, DateTimeUtil::getUserPreferredTimeZone()));
                trans.CardTenderType = loyaltyCardDestination.CardTenderType;
                trans.ExpirationDate = rewardPointTrans.ExpirationDate;

                RetailLoyaltyManager::PostLoyaltyCardRewardPointTrans(trans);
            }

            RetailLoyaltyRewardPointsTransfer::postAdjustment(loyaltyCardSource, loyaltyCardDestination, -_pointsToTransfer, DateTimeUtil::date(now), _rewardPoint.RecId);

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDestinationLoyaltyCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if points could be transferred to this loyalty card
    /// </summary>
    /// <param name="_desitinationCardId">
    /// Loyalty card number on which points should be transferred
    /// </param>
    /// <returns>
    /// true if validation passed successfully; otherwise, false
    /// </returns>
    public static boolean validateDestinationLoyaltyCard(RetailLoyaltyCardNumber _desitinationCardId)
    {
        RetailLoyaltyCard loyaltyCard = RetailLoyaltyCard::findByCardNumber(_desitinationCardId);

        if (!loyaltyCard)
        {
            return checkFailed(strFmt("@SYS4004423", _desitinationCardId));
        }
        else if (loyaltyCard.CardTenderType == RetailLoyaltyTenderTypeBase::Blocked)
        {
            return checkFailed(strFmt("@SYS4004424", _desitinationCardId));
        }
        else if (loyaltyCard.ReplacementCard)
        {
            return checkFailed(strFmt("@SYS4009775", _desitinationCardId, RetailLoyaltyCard::find(loyaltyCard.ReplacementCard).CardNumber));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceLoyaltyCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if points could be transferred from this loyalty card.
    /// </summary>
    /// <param name = "_sourceLoyaltyCardId">
    /// Loyalty card number from which points should be transferred
    /// </param>
    /// <param name = "sourceLoyaltyCardActive">
    /// If gifting points from active card adjust validation to check accordingly.
    /// </param>
    /// <param name = "throwError">
    /// Throw error instead of reporting warnings.
    /// </param>
    /// <returns>
    /// true if validation passed successfully; otherwise, false
    /// </returns>
    public static boolean validateSourceLoyaltyCard(RetailLoyaltyCardNumber _sourceLoyaltyCardId, boolean sourceLoyaltyCardActive = false, boolean throwError = false)
    {
        RetailLoyaltyCard loyaltyCard = RetailLoyaltyCard::findByCardNumber(_sourceLoyaltyCardId);

        if (!loyaltyCard)
        {	
            if (throwError)
            {
                throw(warning(strFmt("@SYS4004423", _sourceLoyaltyCardId)));
            }
            else
            {
                return checkFailed(strFmt("@SYS4004423", _sourceLoyaltyCardId));
            }
        }
        else if (!sourceLoyaltyCardActive && loyaltyCard.CardTenderType != RetailLoyaltyTenderTypeBase::Blocked)
        {
            if (throwError)
            {
                throw(warning(strFmt("@SYS4004425", _sourceLoyaltyCardId)));
            }
            else
            {
                return checkFailed(strFmt("@SYS4004425", _sourceLoyaltyCardId));
            }
        }
        else if (sourceLoyaltyCardActive && loyaltyCard.CardTenderType == RetailLoyaltyTenderTypeBase::Blocked)
        {
            if (throwError)
            {
                throw(warning(strFmt("@Retail:RetailSourceCardActive", _sourceLoyaltyCardId)));
            }
            else
            {
                return checkFailed(strFmt("@Retail:RetailSourceCardActive", _sourceLoyaltyCardId));
            }
        }
        else if (loyaltyCard.ReplacementCard)
        {
            if (throwError)
            {
                throw(warning(strFmt("@SYS4009775", _sourceLoyaltyCardId, RetailLoyaltyCard::find(loyaltyCard.ReplacementCard).CardNumber)));
            }
            else
            {
                return checkFailed(strFmt("@SYS4009775", _sourceLoyaltyCardId, RetailLoyaltyCard::find(loyaltyCard.ReplacementCard).CardNumber));
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>