<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResCategoryHierarchyPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResCategoryHierarchyPageInteraction extends ListPageInteraction
{
    EcoResCategoryNamedHierarchyRole currentRole;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRetailRanges</Name>
				<Source><![CDATA[
    private void addRetailRanges(Query _query)
    {
        QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(EcoResCategoryHierarchy));

        if (qbds &&
           ((EcoResCategoryNamedHierarchyRole::RetailSpecialGroup == currentRole) ||
            (EcoResCategoryNamedHierarchyRole::RetailChannelNavigation == currentRole)))
        {
            qbds = qbds.addDataSource(tableNum(EcoResCategoryHierarchyRole));
            qbds.relations(true);
            qbds.addRange(fieldNum(EcoResCategoryHierarchyRole, NamedCategoryHierarchyRole))
                .value(queryValue(currentRole));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ecoResCategoryHierarchy</Name>
				<Source><![CDATA[
    private EcoResCategoryHierarchy ecoResCategoryHierarchy()
    {
        return this.listPage().activeRecord(
            querydatasourcestr(EcoResCategoryHierarchyListPage, EcoResCategoryHierarchy)) as EcoResCategoryHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a call to setRetailInitialButtonState method.
    /// </summary>
    public void initialized()
    {
        super();

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            this.setRetailInitialButtonState();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    public void initializeQuery(Query _query)
    {
        super(_query);

        QueryBuildDataSource qbds = _query.dataSourceName(querydatasourcestr(EcoResCategoryHierarchyListPage, EcoResCategoryHierarchy));
        qbds.addSelectionField(fieldNum(EcoResCategoryHierarchy, ModifiedDateTime));

        qbds = _query.dataSourceName(querydatasourcestr(EcoResCategoryHierarchyListPage, EcoResCategoryHierarchyTranslation));
        QueryBuildRange queryBuildRange = qbds.addRange(fieldnum(EcoResCategoryHierarchyTranslation, LanguageId));
        queryBuildRange.value(LanguageTable::defaultLanguage());

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            this.addRetailRanges(_query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values for hierarchy role based on the caller.
    /// </summary>
    public void initializing()
    {
        super();

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            str callerMenuName = this.listPage().listPageArgs().menuItemName();

            if (callerMenuName== menuitemDisplayStr(RetailCategorySpecialManagement))
            {
                currentRole = EcoResCategoryNamedHierarchyRole::RetailSpecialGroup;
            }
            else if (callerMenuName== menuitemDisplayStr(RetailNavigationHierarchyManagement))
            {
                currentRole = EcoResCategoryNamedHierarchyRole::RetailChannelNavigation;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    public void selectionChanged()
    {
        super();

        this.setListPageButtonsState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListPageButtonsState</Name>
				<Source><![CDATA[
    private void setListPageButtonsState()
    {
        EcoResCategoryHierarchy   ecoResCategoryHierarchy = this.ecoResCategoryHierarchy();

        this.listPage().actionPaneControlEnabled(
            formcontrolstr(EcoResCategoryHierarchyListPage, MenuItemButtonHiearchyType), ecoResCategoryHierarchy.RecId);
        this.listPage().actionPaneControlEnabled(
            formcontrolstr(EcoResCategoryHierarchyListPage, EcoResCatHierarchyTranslationHelper), ecoResCategoryHierarchy.RecId);
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            this.listPage().actionPaneControlEnabled(formcontrolstr(EcoResCategoryHierarchyListPage, MenuItemButtonAssociateDerivedFinancial),
                ecoResCategoryHierarchy.RecId && EcoResCategoryHierarchyRole::findRoleHierarchyPair(EcoResCategoryNamedHierarchyRole::Financials, ecoResCategoryHierarchy.RecId).RecId != 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRetailInitialButtonState</Name>
				<Source><![CDATA[
    private void setRetailInitialButtonState()
    {
        if ((EcoResCategoryNamedHierarchyRole::RetailSpecialGroup == currentRole) ||
            (EcoResCategoryNamedHierarchyRole::RetailChannelNavigation == currentRole))
        {
            str currentRoleStr = enum2Symbol(enumNum(EcoResCategoryNamedHierarchyRole), enum2int(currentRole));

            this.listPage().actionPaneControlVisible(
                formControlStr(EcoResCategoryHierarchyListPage, MenuItemButtonHiearchyType),
                false);

            this.listPage().actionPaneControlParameters(
                formControlStr(EcoResCategoryHierarchyListPage, EcoResCategoryHierarchyCreate), currentRoleStr);

            this.listPage().actionPaneControlParameters(
                formControlStr(EcoResCategoryHierarchyListPage, MenuItemButtonViewHierarchy), currentRoleStr);

            this.listPage().actionPaneControlVisible(
                formControlStr(EcoResCategoryHierarchyListPage, EditButton),
                false);

            this.listPage().actionPaneControlParameters(
                formControlStr(EcoResCategoryHierarchyListPage, RetailEditButton), currentRoleStr);
        }
        else
        {
            this.listPage().actionPaneControlVisible(
                formControlStr(EcoResCategoryHierarchyListPage, RetailEditButton),
                false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
