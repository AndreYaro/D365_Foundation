<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UnitOfMeasureConverter_Product</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>UnitOfMeasureConverter_Product</c> class is the specialized version of the
/// <c>UnitOfMeasureConverter</c> class which handles conversions of product-specific values between units of measure.
/// </summary>
class UnitOfMeasureConverter_Product extends UnitOfMeasureConverter
{
    EcoResProductRecId      product;
    EcoResProductRecId      productMaster;

    boolean                 existsProductSpecificConversion;

    // Found from from base unit to to base unit conversion
    UnitOfMeasureConversion unitOfMeasureConversionBaseBase;

    #localmacro.CurrentList
            product,
            existsProductSpecificConversion
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateConversion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates a conversion between two units of measure based on defined conversions in the
    ///    <c>UnitOfMeasureConversion</c> table.
    /// </summary>
    /// <remarks>
    ///    Lookups defined conversions in the following order: 1) Use direct product-specific conversion, if
    ///    one exists.2) Use a chain of two product-specific conversions through one base unit of measure, if
    ///    one exists.3) Use a chain of product-specific conversions through two base units of measure, if one
    ///    exists.4) Use a chain of one product-specific and one standard conversions through one base unit of
    ///    measure, if one exists.5) Use a chain of product-specific or standard conversions through two base
    ///    units of measure, if one exists.6) Execute the calculation algorithm for the standard conversions
    ///    (call to this method of the superclass).
    /// </remarks>
    protected void calculateConversion()
    {
        if (this.calculateConversionByProduct())
        {
            return;
        }

        // Lookup standard conversions
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateConversionByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attempts to calculation conversion based on the product.
    /// </summary>
    /// <returns>true if the calculation could be complete by the using the product; false, otherwise.</returns>
    private boolean calculateConversionByProduct()
    {
        // Lookup direct product-specific conversion
        if (this.findDirectConversionProduct())
        {
            this.calculateDirectConversion();
            return true;
        }

        // Lookup a chain of only product-specific conversions through one base unit
        if (this.findConversionThroughOneBaseUnitProduct(false))
        {
            this.calculateConversionThroughOneBaseUnit();
            return true;
        }

        // Lookup a chain of only product-specific conversions through two base units
        if (this.findConversionThroughTwoBaseUnits(false))
        {
            this.calculateConversionThroughTwoBaseUnits();
            return true;
        }

        // Lookup a chain of product-specific or standard conversions through one base unit
        if (this.findConversionThroughOneBaseUnitProduct(true))
        {
            this.calculateConversionThroughOneBaseUnit();
            return true;
        }

        // Lookup a chain of product-specific or standard conversions through two base units
        if (this.findConversionThroughTwoBaseUnits(true))
        {
            this.calculateConversionThroughTwoBaseUnits();
            return true;
        }


        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFallbackToProductMasterApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the conversion fallback to the product master is applicable.
    /// </summary>
    /// <returns>true if the conversion fallback to the product master is applicable; false, otherwise.</returns>
    private boolean isFallbackToProductMasterApplicable()
    {
        return productMaster != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateConversionThroughTwoBaseUnits</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates parameters of the conversion between two units based on the chain of conversions that
    ///    were found through two base units.
    /// </summary>
    protected void calculateConversionThroughTwoBaseUnits()
    {
        UnitOfMeasureRecId  unitOfMeasureBaseUnit;

        // Init cached conversion with conversion between from unit and its class's base unit
        if (unitOfMeasureConversionBaseFrom.FromUnitOfMeasure   == fromUnitOfMeasure)
        {
            unitOfMeasureBaseUnit   = unitOfMeasureConversionBaseFrom.ToUnitOfMeasure;
            this.initConversionCacheWithForwardConversion(unitOfMeasureConversionBaseFrom);
        }
        else
        {
            unitOfMeasureBaseUnit   = unitOfMeasureConversionBaseFrom.FromUnitOfMeasure;
            this.initConversionCacheWithInverseConversion(unitOfMeasureConversionBaseFrom);
        }

        // Append cached conversion with conversion between from unit class's base unit and to unit class's base unit
        if (unitOfMeasureConversionBaseBase.FromUnitOfMeasure   == unitOfMeasureBaseUnit)
        {
            this.appendForwardConversionToConversionCache(unitOfMeasureConversionBaseBase);
        }
        else
        {
            this.appendInverseConversionToConversionCache(unitOfMeasureConversionBaseBase);
        }

        // Append cached conversion with conversion between to unit class's base unit and to unit
        if (unitOfMeasureConversionBaseTo.ToUnitOfMeasure   == toUnitOfMeasure)
        {
            this.appendForwardConversionToConversionCache(unitOfMeasureConversionBaseTo);
        }
        else
        {
            this.appendInverseConversionToConversionCache(unitOfMeasureConversionBaseTo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>conversionNotExistMessage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the error message for when a conversion does not exist.
    /// </summary>
    /// <returns>
    ///    The error message for when a conversion does not exist.
    /// </returns>
    protected SysInfoLogStr conversionNotExistMessage()
    {
        return strFmt(
            "@SYS310324",
            UnitOfMeasure::find(fromUnitOfMeasure).Symbol,
            UnitOfMeasure::find(toUnitOfMeasure).Symbol,
            EcoResProduct::find(product).productNumber());
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCachedConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookups the cache for a stored conversion.
    /// </summary>
    /// <returns>
    /// true if a cached conversion was found in the cache; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method lookups for the product-specific cached conversion only if there is at least one defined product-specific conversion.
    /// </remarks>
    protected boolean findCachedConversion()
    {
        boolean ret;

        existsProductSpecificConversion = UnitOfMeasureConversion::existsProductSpecificConversion(product);

        if (!existsProductSpecificConversion && this.isFallbackToProductMasterApplicable())
        {
            existsProductSpecificConversion = UnitOfMeasureConverter_Product::existsProductMasterSpecificConversion(productMaster, product); 
        }

        if (!existsProductSpecificConversion)
        {
            ret = super();
        }
        else
        {
            unitOfMeasureConversionCache    = UnitOfMeasureConversionCache::findByConversion(
                fromUnitOfMeasure,
                toUnitOfMeasure,
                product);

            ret = (unitOfMeasureConversionCache.RecId != 0);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsProductMasterSpecificConversion</Name>
				<Source><![CDATA[
    private static boolean existsProductMasterSpecificConversion(EcoResProductRecId _productMaster, EcoResProductRecId _productVariant)
    {
        UnitOfMeasureConversion unitOfMeasureConversion;

        select firstonly RecId
        from    unitOfMeasureConversion
        where   unitOfMeasureConversion.Product == _productMaster;

        boolean productMasterSpecificConversionExists = (unitOfMeasureConversion.RecId != 0);

        SysGlobalObjectCache    globalObjectCache   = classFactory.globalObjectCache();
        GlobalObjectCacheScope  scope               = UnitOfMeasureConversion::ProductSpecificConversionCacheScope();

        globalObjectCache.insert(scope, [_productVariant], [productMasterSpecificConversionExists]);

        return productMasterSpecificConversionExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findConversionThroughOneBaseUnitProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a chain of two conversions between two units of measure through a base unit of measure.
    /// </summary>
    /// <param name="_includeStandardConversions">
    ///    A Boolean value that specifies whether standard conversions should be included in the query.
    /// </param>
    /// <returns>
    ///    true if a chain of two conversions between two units of measure through a base unit of measure
    ///    exists; otherwise, false.
    /// </returns>
    private boolean findConversionThroughOneBaseUnitProduct(boolean _includeStandardConversions)
    {
        UnitOfMeasureBaseUnit   unitOfMeasureBaseUnit;

        // Lookup base units for the from unit of measure.
        unitOfMeasureBaseUnit   = UnitOfMeasureBaseUnit::findByUnitOfMeasureClass(UnitOfMeasure::find(fromUnitOfMeasure).UnitOfMeasureClass);

        if (unitOfMeasureBaseUnit.RecId != 0)
        {
            // Lookup forward product-specific conversion between from unit and base unit
            unitOfMeasureConversionBaseFrom  = this.findByConversionByProduct(fromUnitOfMeasure, unitOfMeasureBaseUnit.UnitOfMeasure);            

            // Lookup forward standard conversion between from unit and base unit
            if (_includeStandardConversions && unitOfMeasureConversionBaseFrom.RecId == 0)
            {
                unitOfMeasureConversionBaseFrom     = UnitOfMeasureConversion::findByConversion(fromUnitOfMeasure, unitOfMeasureBaseUnit.UnitOfMeasure);
                if (unitOfMeasureConversionBaseFrom.RecId   == 0)
                {
                    // Lookup inverse conversion between from unit and base unit
                    unitOfMeasureConversionBaseFrom = UnitOfMeasureConversion::findByConversion(unitOfMeasureBaseUnit.UnitOfMeasure, fromUnitOfMeasure);
                }
            }

            if (unitOfMeasureConversionBaseFrom.RecId   != 0)
            {
                // Lookup forward product-specific conversion between base unit and to unit.
                unitOfMeasureConversionBaseTo   = this.findByConversionByProduct(unitOfMeasureBaseUnit.UnitOfMeasure, toUnitOfMeasure);                

                // There can be no interclass standard conversion - no need to lookup it
            }
        }

        if (    unitOfMeasureBaseUnit.RecId             == 0
            ||  unitOfMeasureConversionBaseFrom.RecId   == 0
            ||  unitOfMeasureConversionBaseTo.RecId     == 0)
        {
            // Lookup base units for the to unit of measure.
            unitOfMeasureBaseUnit   = UnitOfMeasureBaseUnit::findByUnitOfMeasureClass(UnitOfMeasure::find(toUnitOfMeasure).UnitOfMeasureClass);

            if (unitOfMeasureBaseUnit.RecId != 0)
            {
                // Lookup forward product-specific conversion between from unit and base unit
                unitOfMeasureConversionBaseFrom     = this.findByConversionByProduct(fromUnitOfMeasure, unitOfMeasureBaseUnit.UnitOfMeasure);
                
                // There can be no interclass standard conversion - no need to lookup it

                if (unitOfMeasureConversionBaseFrom.RecId   != 0)
                {
                    // Lookup forward product-specific conversion between base unit and to unit.
                    unitOfMeasureConversionBaseTo   = this.findByConversionByProduct(unitOfMeasureBaseUnit.UnitOfMeasure, toUnitOfMeasure);                    

                    if (_includeStandardConversions && unitOfMeasureConversionBaseTo.RecId == 0)
                    {
                        // Lookup forward standard conversion between base unit and to unit.
                        unitOfMeasureConversionBaseTo   = UnitOfMeasureConversion::findByConversion(unitOfMeasureBaseUnit.UnitOfMeasure, toUnitOfMeasure);
                        if (unitOfMeasureConversionBaseTo.RecId == 0)
                        {
                            // Lookup inverse standard conversion between base unit and to unit
                            unitOfMeasureConversionBaseTo   = UnitOfMeasureConversion::findByConversion(toUnitOfMeasure, unitOfMeasureBaseUnit.UnitOfMeasure);
                        }
                    }
                }
            }
        }

        return (unitOfMeasureBaseUnit.RecId             != 0
            &&  unitOfMeasureConversionBaseFrom.RecId   != 0
            &&  unitOfMeasureConversionBaseTo.RecId     != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findConversionThroughTwoBaseUnits</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a chain of conversions through two base units of measure.
    /// </summary>
    /// <param name="_includeStandardConversions">
    ///    A Boolean value that specifies whether the standard conversions should be included into the query.
    /// </param>
    /// <returns>
    ///    true if a chain of conversions through two base units of measure exists; otherwise, false.
    /// </returns>
    private boolean findConversionThroughTwoBaseUnits(boolean _includeStandardConversions)
    {
        UnitOfMeasureBaseUnit   fromUnitOfMeasureBaseUnit;
        UnitOfMeasureBaseUnit   toUnitOfMeasureBaseUnit;

        // Find base units for the classes from and to units of measure belong to.
        fromUnitOfMeasureBaseUnit   = UnitOfMeasureBaseUnit::findByUnitOfMeasureClass(UnitOfMeasure::find(fromUnitOfMeasure).UnitOfMeasureClass);
        toUnitOfMeasureBaseUnit     = UnitOfMeasureBaseUnit::findByUnitOfMeasureClass(UnitOfMeasure::find(toUnitOfMeasure).UnitOfMeasureClass);

        if (    fromUnitOfMeasureBaseUnit.RecId == 0
            ||  toUnitOfMeasureBaseUnit.RecId   == 0)
        {
            return false;
        }

        // Lookup conversion from from unit to its class's base unit
        unitOfMeasureConversionBaseFrom = this.findByConversionByProduct(
            fromUnitOfMeasure,
            fromUnitOfMeasureBaseUnit.UnitOfMeasure);        

        if (unitOfMeasureConversionBaseFrom.RecId == 0 && _includeStandardConversions)
        {
            unitOfMeasureConversionBaseFrom = UnitOfMeasureConversion::findByConversion(
                fromUnitOfMeasure,
                fromUnitOfMeasureBaseUnit.UnitOfMeasure,
                0);

            if (unitOfMeasureConversionBaseFrom.RecId == 0)
            {
                unitOfMeasureConversionBaseFrom = UnitOfMeasureConversion::findByConversion(
                    fromUnitOfMeasure,
                    fromUnitOfMeasureBaseUnit.UnitOfMeasure,
                    0);
            }
        }

        if (unitOfMeasureConversionBaseFrom.RecId == 0)
        {
            return false;
        }

        // Lookup conversion between base units
        unitOfMeasureConversionBaseBase = this.findByConversionByProduct(
            fromUnitOfMeasureBaseUnit.UnitOfMeasure,
            toUnitOfMeasureBaseUnit.UnitOfMeasure);        

        if (unitOfMeasureConversionBaseBase.RecId == 0)
        {
            return false;
        }

        // Lookup conversion from from unit to its class's base unit
        unitOfMeasureConversionBaseTo   = this.findByConversionByProduct(
            toUnitOfMeasureBaseUnit.UnitOfMeasure,
            toUnitOfMeasure);        

        if (unitOfMeasureConversionBaseTo.RecId == 0 && _includeStandardConversions)
        {
            unitOfMeasureConversionBaseTo   = UnitOfMeasureConversion::findByConversion(
                toUnitOfMeasureBaseUnit.UnitOfMeasure,
                toUnitOfMeasure,
                0);

            if (unitOfMeasureConversionBaseTo.RecId == 0)
            {
                unitOfMeasureConversionBaseTo   = UnitOfMeasureConversion::findByConversion(
                    toUnitOfMeasure,
                    toUnitOfMeasureBaseUnit.UnitOfMeasure,
                    0);
            }
        }

        if (unitOfMeasureConversionBaseTo.RecId == 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByConversionByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a unit of measure conversion by the provided product information.
    /// </summary>
    /// <param name="_fromUnitOfMeasure">
    /// A from unit of measure ID.
    /// </param>
    /// <param name="_toUnitOfMeasure">
    /// A to unit of measure ID.
    /// </param>
    /// <returns>
    /// A record in the <c>UnitOfMeasureConversion</c> table if it exists; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// The method will first attempt to find a conversion using the provided distinct product or product variant, if applicable it will attempt to fallback to find the conversion by a product master.
    /// </remarks>
    private UnitOfMeasureConversion findByConversionByProduct(UnitOfMeasureFromRecId  _fromUnitOfMeasure, UnitOfMeasureToRecId _toUnitOfMeasure)
    {
        UnitOfMeasureConversion unitOfMeasureConversion = this.findByConversionByProductBiDirectionally(
            _fromUnitOfMeasure,
            _toUnitOfMeasure,
            product);
    
        if (unitOfMeasureConversion.RecId == 0 && this.isFallbackToProductMasterApplicable())
        {
            unitOfMeasureConversion = this.findByConversionByProductBiDirectionally(
            _fromUnitOfMeasure,
            _toUnitOfMeasure,
            productMaster);
        }

        return unitOfMeasureConversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByConversionByProductBiDirectionally</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>UnitOfMeasureConversion</c> table.
    /// </summary>
    /// <param name="_fromUnitOfMeasure">
    /// A from unit of measure ID.
    /// </param>
    /// <param name="_toUnitOfMeasure">
    /// A to unit of measure ID.
    /// </param>
    /// <param name="_product">
    /// A product record ID.
    /// </param>
    /// <returns>
    /// A record in the <c>UnitOfMeasureConversion</c> table if it exists; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// The method will first attempt to find a conversion using the provided distinct product or product variant, if applicable it will attempt to fallback to find the conversion by a product master.
    /// </remarks>
    private UnitOfMeasureConversion findByConversionByProductBiDirectionally(UnitOfMeasureFromRecId  _fromUnitOfMeasure, UnitOfMeasureToRecId _toUnitOfMeasure, EcoResProductRecId _product)
    {
        UnitOfMeasureConversion unitOfMeasureConversion = UnitOfMeasureConversion::findByConversion(
            _fromUnitOfMeasure,
            _toUnitOfMeasure,
            _product);
    
        if (unitOfMeasureConversion.RecId == 0)
        {
            unitOfMeasureConversion = UnitOfMeasureConversion::findByConversion(
            _toUnitOfMeasure,
            _fromUnitOfMeasure,
            _product);
        }

        return unitOfMeasureConversion; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDirectConversionProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a direct, product specific conversion between two units of measure.
    /// </summary>
    /// <returns>
    ///    true if a direct conversion between two units of measure exists; otherwise, false.
    /// </returns>
    private boolean findDirectConversionProduct()
    {
        // Lookup forward conversion between from unit and to unit
        unitOfMeasureConversionDirect   = this.findByConversionByProduct(fromUnitOfMeasure, toUnitOfMeasure);        

        return (unitOfMeasureConversionDirect.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConversionCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the cached conversion from the specified values.
    /// </summary>
    /// <param name="_factorNumerator">
    ///    A conversion factor numerator.
    /// </param>
    /// <param name="_factorDenominator">
    ///    A conversion factor denominator.
    /// </param>
    /// <param name="_numerator">
    ///    A conversion numerator.
    /// </param>
    /// <param name="_denominator">
    ///    A conversion denominator.
    /// </param>
    /// <param name="_innerOffset">
    ///    A conversion inner offset.
    /// </param>
    /// <param name="_outerOffset">
    ///    A conversion outer offset.
    /// </param>
    /// <param name="_rounding">
    ///    A conversion rounding.
    /// </param>
    /// <param name="_conversionExists">
    ///    A Boolean value that specifies whether conversion exists.
    /// </param>
    protected void initConversionCache(
        UnitOfMeasureConversionFactor       _factorNumerator,
        UnitOfMeasureConversionFactor       _factorDenominator,
        UnitOfMeasureConversionNumerator    _numerator,
        UnitOfMeasureConversionDenominator  _denominator,
        UnitOfMeasureConversionInnerOffset  _innerOffset,
        UnitOfMeasureConversionOuterOffset  _outerOffset,
        UnitOfMeasureConversionRounding     _rounding,
        NoYes                               _conversionExists   = NoYes::Yes)
    {
        super(_factorNumerator, _factorDenominator, _numerator, _denominator, _innerOffset, _outerOffset, _rounding, _conversionExists);

        if (existsProductSpecificConversion)
        {
            unitOfMeasureConversionCache.Product    = product;
        }
        else
        {
            unitOfMeasureConversionCache.Product    = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProduct</Name>
				<Source><![CDATA[
    public EcoResProductRecId parmProduct(EcoResProductRecId _product = product)
    {
        if (_product != product)
        {
            conversionFound = false;
            product         = _product;
        }

        return product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified parameters.
    /// </summary>
    /// <returns>
    /// true if all necessary parameters were specified; otherwise, false.
    /// </returns>
    protected boolean validateParameters()
    {
        boolean ret;

        ret = super();

        if (product == 0)
        {
            ret = checkFailed("@SYS190836");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static UnitOfMeasureConverter_Product construct()
    {
        return new UnitOfMeasureConverter_Product();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the converter class based on the specified item.
    /// </summary>
    /// <param name="_inventTable">
    /// The item that defines the context of the unit of measure conversion.
    /// </param>
    /// <returns>
    /// A new instance of the converter class.
    /// </returns>
    public static UnitOfMeasureConverter_Product newFromInventTable(InventTable _inventTable)
    {
        UnitOfMeasureConverter_Product converter = UnitOfMeasureConverter_Product::construct();

        converter.parmProduct(_inventTable.Product);

        return converter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductConversionRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the product (master) is applicable to unit conversion.
    /// </summary>
    public void checkProductConversionRule()
    {
        UnitOfMeasureProductMasterCheck::construct().validateWithException(this.product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFallbackToProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the product master to fallback to.
    /// </summary>
    /// <param name = "_productMaster">A product master record ID.</param>
    /// <returns>A product master record ID.</returns>
    public EcoResProductRecId parmFallbackToProductMaster(EcoResProductRecId _productMaster = productMaster)
    {
        productMaster = _productMaster;

        return productMaster;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>