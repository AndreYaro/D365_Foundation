<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetTrans
{
    BudgetMap budget;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a <c>BudgetMap</c> record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a <c>BudgetMap</c> record has been deleted.
    /// </summary>
    public void deleted()
    {        
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a <c>BudgetMap</c> record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a <c>BudgetMap</c> record has been inserted.
    /// </summary>
    public void inserted()
    {
        budget.BudgetMap::expansion().create();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(BudgetMap _budget)
    {
        budget = _budget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a <c>BudgetMap</c> record is updated.
    /// </summary>
    public void updating()
    {
        budget.BudgetMap::expansion().create();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a <c>BudgetMap</c> record has been updated.
    /// </summary>
    /// <param name="_budgetMap_Orig">The original <c>BudgetMap</c> record before update.</param>
    public void updated(BudgetMap _budgetMap_Orig)
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetTrans construct(BudgetMap _budget)
    {
        BudgetTrans budgetTrans = BudgetTrans::constructNoThrow(_budget);

        if (!budgetTrans)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return budgetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructNoThrow</Name>
				<Source><![CDATA[
    public static BudgetTrans constructNoThrow(BudgetMap _budget)
    {
        switch (_budget.TableId)
        {
            case tableNum(ForecastSales):
            case tableNum(ForecastPurch):
                return new BudgetTrans_Forecast(_budget);

            case tableNum(ProjForecastEmpl):
            case tableNum(ProjForecastCost):
            case tableNum(ProjForecastRevenue):
                return new BudgetTrans(_budget);

            default :
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                BudgetTrans::newFromContractDelegate(result);

                if (result.hasResult())
                {
                    return new BudgetTrans(result.result());
                }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContractDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting a new instance of <c>BudgetTrans</c>.
    /// </summary>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide a <c>BudgetMap</c> object.</param>
    static delegate void newFromContractDelegate(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>