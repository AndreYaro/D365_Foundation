<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EGAISWaybillCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EGAISWaybillCreate_RU</c> class is used to create EGAIS waybills.
/// </summary>
public class EGAISWaybillCreate_RU extends RunBase
{
    CustInvoiceId           invoiceId;
    EGAISWaybillNum_RU      waybillNum;
    EGAISWaybillDate_RU     waybillDate;
    EGAISWaybillUnitType_RU unitType;
    EGAISWaybillNote_RU     note;
    EGAISWaybillBase_RU     base;
    EGAISDocumentVersion_RU documentVersion;
    EGAISWaybillAddNote_RU  addNote1, addNote2, addNote3;

    DialogField             fieldInvoiceId;
    DialogField             fieldWaybillNum;
    DialogField             fieldWaybillDate;
    DialogField             fieldUnitType;
    DialogField             fieldNote;
    DialogField             fieldBase;
    DialogField             fieldDocumentVersion;
    DialogField             fieldAddNote1, fieldAddNote2, fieldAddNote3;

    CustInvoiceJour         custInvoiceJour;
    EGAISParameters_RU      EGAISParameters;
    EGAISWaybillJour_RU     waybillJour;
    RefRecId                invoiceRecId;
    Branches_RU             branch;

    Dialog                  dialog;
    EGAISIdentityBuilder_RU identityBuilder;

    protected const int CurrentVersion = 1;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSaveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if the last user choices can be saved and restored.
    /// </summary>
    /// <returns>
    /// true, if the last user choices can be saved and restored; false, otherwise
    /// </returns>
    protected boolean canSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWaybillJour</Name>
				<Source><![CDATA[
    private void createWaybillJour()
    {
        CustTable               custTable;
        VendTable               vendTable;
        RefRecId                shipperRecId, consigneeRecId, supplierRecId;

        // shipper
        vendTable = custInvoiceJour.getConsignorAccount_RU() ? VendTable::find(custInvoiceJour.getConsignorAccount_RU()) :
                                                               VendTable::find(branch.VendAccount);
        shipperRecId = vendTable ? EGAISClient_RU::findByParty(vendTable.Party).RecId :
                                   EGAISClient_RU::findByParty(CompanyInfo::current()).RecId;
        if (!shipperRecId)
        {
            throw error(strFmt("@EGAIS:ShipperHasNotBeenFoundForTheInvoice", custInvoiceJour.invoiceId));
        }

        // consignee
        custTable = custInvoiceJour.getConsigneeAccount_RU() ? CustTable::find(custInvoiceJour.getConsigneeAccount_RU()) :
                                                               custInvoiceJour.custTable_InvoiceAccount();
        consigneeRecId = EGAISClient_RU::findByParty(custTable.Party).RecId;

        if (!consigneeRecId)
        {
            throw error(strFmt("@EGAIS:ConsigneeHasNotBeenFoundForTheInvoice", custInvoiceJour.invoiceId));
        }

        // supplier
        if (documentVersion == EGAISDocumentVersion_RU::Version1)
        {
            supplierRecId = branch.VendAccount ? EGAISClient_RU::findByParty(VendTable::find(branch.VendAccount).Party).RecId :
                                                 EGAISClient_RU::findByParty(CompanyInfo::current()).RecId;
            if (!supplierRecId)
            {
                throw error(strFmt("@EGAIS:SupplierHasNotBeenFoundForTheInvoice", custInvoiceJour.invoiceId));
            }
        }

        waybillJour.clear();
        waybillJour.BranchId                = branch.BranchId;
        waybillJour.Direction               = EGAISDocumentDirection_RU::Outgoing;
        waybillJour.StatusIssue             = EGAISWaybillStatusIssue_RU::Created;
        waybillJour.WaybillType             = EGAISWaybillType_RU::WBInvoiceFromMe;
        waybillJour.WaybillNum              = waybillNum;
        waybillJour.WaybillDate             = waybillDate;
        waybillJour.Identity                = identityBuilder.getNext();
        waybillJour.UnitType                = unitType;
        waybillJour.Shipper                 = shipperRecId;
        waybillJour.Supplier                = supplierRecId;
        waybillJour.Consignee               = consigneeRecId;
        waybillJour.SourceCustInvoiceJour   = custInvoiceJour.RecId;
        waybillJour.ShippingDate            = custInvoiceJour.InvoiceDate;
        waybillJour.Note                    = note;
        waybillJour.Base                    = base;
        waybillJour.Version                 = documentVersion;
        waybillJour.AddNote1                = addNote1;
        waybillJour.AddNote2                = addNote2;
        waybillJour.AddNote3                = addNote3;

        waybillJour.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWaybillLines</Name>
				<Source><![CDATA[
    private void createWaybillLines()
    {
        QueryRun                    queryRun;
        EGAISInventTransView_RU     inventTransView;
        CustInvoiceTrans            custInvoiceTrans;
        EGAISWaybillLine_RU         waybillLine;
        EGAISAlcoholProduction_RU   alcoholProduction;
        EGAISInformB_RU             informB, informBOut;
        InventDim                   inventDim;
        Qty                         qty;
        EGAISWaybillSettlement_RU   settlement;

        queryRun = new QueryRun(EGAISAlcoholProduction_RU::queryCustInvoiceWithAlcProd(custInvoiceJour));

        while (queryRun.next())
        {
            custInvoiceTrans    = queryRun.get(tableNum(custInvoiceTrans));
            inventTransView     = queryRun.get(tableNum(EGAISInventTransView_RU));
            alcoholProduction   = queryRun.get(tableNum(EGAISAlcoholProduction_RU));
            inventDim           = inventTransView.inventDim();

            setPrefix(strFmt("@EGAIS:InvoiceLine", custInvoiceTrans.LineNum));

            if (!alcoholProduction)
            {
                throw error(strFmt("@EGAIS:EgaisAlcoholProductHasNotBeenFoundForTheItemCombin",
                            custInvoiceTrans.itemId, inventDim.preFixProductDim(EcoResProductDimGroupSetup::newItemId(custInvoiceTrans.itemId))));
            }

            if (custInvoiceTrans.SalesUnit != alcoholProduction.Unit)
            {
                throw error(strFmt("@EGAIS:UnitInTheInvoiceLineMustMatchTheEgaisUnit", custInvoiceTrans.SalesUnit, alcoholProduction.Unit));
            }

            if (!inventDim.InventBatchId)
            {
                throw error(strFmt("@SYS84753", "@SYS53635"));
            }

            informB = EGAISInformB_RU::findByItemBatchDirection(custInvoiceTrans.ItemId, inventDim.inventBatchId, EGAISDocumentDirection_RU::Incoming);

            if (!informB)
            {
                throw error(strFmt("@EGAIS:IncomingCertificateBCorrespondingToTheBatchNumberH", inventDim.inventBatchId));
            }

            if (informB.informA().AlcoholProduction != alcoholProduction.RecId)
            {
                throw error(strFmt("@EGAIS:EgaisAlcoholProductInTheCertificateBAndInvoiceLine", inventDim.inventBatchId));
            }

            qty = EcoResProductUnitConverter::convertForReleasedProduct(custInvoiceTrans.ItemId,
                    '',
                    inventTransView.Qty,
                    UnitOfMeasure::unitOfMeasureIdBySymbol(InventTableModule::find(custInvoiceTrans.ItemId, ModuleInventPurchSales::Invent).UnitId),
                    UnitOfMeasure::unitOfMeasureIdBySymbol(alcoholProduction.Unit));

            informBOut.clear();
            informBOut.InformA       = informB.InformA;
            informBOut.InventBatchId = informB.inventBatchId;
            informBOut.Qty           = abs(qty);
            informBOut.RegId         = informB.RegIdNew;
            informBOut.Direction     = EGAISDocumentDirection_RU::Outgoing;
            informBOut.initFromWaybillJour(waybillJour);

            if (informBOut.validateWrite())
            {
                informBOut.insert();
            }
            else
            {
                throw error("@EGAIS:CertificateBCannotBeCreated");
            }

            waybillLine.clear();
            waybillLine.Identity                = identityBuilder.getNext();
            waybillLine.AlcoholProduction       = alcoholProduction.RecId;
            waybillLine.Qty                     = informBOut.Qty;
            waybillLine.Price                   = custInvoiceTrans.SalesPrice;
            waybillLine.InformB                 = informBOut.RecId;
            waybillLine.WaybillJour             = waybillJour.RecId;

            if (waybillLine.validateWrite())
            {
                waybillLine.insert();
            }
            else
            {
                throw error("@EGAIS:EgaisBolLineCannotBeCreated");
            }

            settlement.clear();
            settlement.WaybillLine      = waybillLine.RecId;
            settlement.InventTransId    = inventTransView.InventTransId;
            settlement.Qty              = waybillLine.Qty;
            settlement.InventDimId      = inventTransView.InventDimId;
            settlement.InventTrans      = inventTransView.InventTransRecId;

            settlement.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineBranchId</Name>
				<Source><![CDATA[
    private void determineBranchId()
    {
        QueryRun                    queryRun;
        EGAISInventTransView_RU     inventTransView;
        BranchId_RU                 branchIdLoc;
        Set                         branchIdSet = new Set(Types::String);

        queryRun = new queryRun(EGAISAlcoholProduction_RU::queryCustInvoiceWithAlcProd(custInvoiceJour));

        while (queryRun.next())
        {
            inventTransView = queryRun.get(tableNum(EGAISInventTransView_RU));
            branchIdLoc     = Branches_RU::findByVendAccount(InventLocation::find(inventTransView.InventLocationId).VendAccount).BranchId;

            if (!branchIdLoc)
            {
                throw error(strFmt("@EGAIS:CannotFindSeparateDivisionForTheWarehouse", inventTransView.InventLocationId));
            }

            branchIdSet.add(branchIdLoc);
        }

        if (branchIdSet.elements() > 1)
        {
            throw error("@EGAIS:AllInvoiceLinesShouldBelongToOneSeparateDivision");
        }

        branch = Branches_RU::find(branchIdLoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        dialog.addGroup("@EGAIS:EgaisBol");

        fieldInvoiceId = dialog.addField(extendedtypestr(InvoiceId));

        fieldDocumentVersion = dialog.addField(enumStr(EGAISDocumentVersion_RU));
        fieldDocumentVersion.enabled(false);

        fieldInvoiceId.control().registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                        methodStr(EGAISWaybillCreate_RU, invoiceId_lookup),
                                                        this);

        fieldInvoiceId.control().registerOverrideMethod(methodStr(FormStringControl, modified),
                                                        methodStr(EGAISWaybillCreate_RU, invoiceId_modified),
                                                        this);

        fieldWaybillNum     = dialog.addField(extendedtypestr(EGAISWaybillNum_RU));
        fieldWaybillNum.enabled(false);

        fieldWaybillDate    = dialog.addField(extendedtypestr(EGAISWaybillDate_RU));
        fieldWaybillDate.enabled(false);

        fieldUnitType       = dialog.addField(enumStr(EGAISWaybillUnitType_RU));

        dialog.addGroup("@SYS25589");
        fieldNote           = dialog.addField(extendedtypestr(EGAISWaybillNote_RU));
        fieldBase           = dialog.addField(extendedtypestr(EGAISWaybillBase_RU));

        dialog.addGroup("@SYS94241");
        fieldAddNote1       = dialog.addField(extendedtypestr(EGAISWaybillAddNote_RU), "@EGAIS:AdditionalNote1");
        fieldAddNote2       = dialog.addField(extendedtypestr(EGAISWaybillAddNote_RU), "@EGAIS:AdditionalNote2");
        fieldAddNote3       = dialog.addField(extendedtypestr(EGAISWaybillAddNote_RU), "@EGAIS:AdditionalNote3");

        fieldAddNote1.enabled(false);
        fieldAddNote2.enabled(false);
        fieldAddNote3.enabled(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        waybillNum      = fieldWaybillNum.value();
        documentVersion = fieldDocumentVersion.value();
        waybillDate     = fieldWaybillDate.value();
        unitType        = fieldUnitType.value();
        note            = fieldNote.value();
        base            = fieldBase.value();
        addNote1        = fieldAddNote1.value();
        addNote2        = fieldAddNote2.value();
        addNote3        = fieldAddNote3.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <c>unpack</c> method returns false, <c>initParmDefault</c> method
    ///    will be called. Normally, this method should not be overridden.
    /// </remarks>
    public void getLast()
    {
        if (this.canSaveLast())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWaybillJour</Name>
				<Source><![CDATA[
    public EGAISWaybillJour_RU getWaybillJour()
    {
        return waybillJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    private void initParameters()
    {
        custInvoiceJour = CustInvoiceJour::findRecId(invoiceRecId);
        EGAISParameters = EGAISParameters_RU::find();
        identityBuilder = new EGAISIdentityBuilder_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId_lookup</Name>
				<Source><![CDATA[
    private void invoiceId_lookup(FormStringControl _formControl)
    {
        TableLookup_RU sysTableLookup = TableLookup_RU::newParameters(tableNum(CustInvoiceJour), _formControl);
        Query query = EGAISAlcoholProduction_RU::queryCustInvoiceWithAlcProd();
 
        sysTableLookup.addLookupfield(fieldNum(CustInvoiceJour, InvoiceId), true);
        sysTableLookup.addLookupfield(fieldNum(CustInvoiceJour, InvoiceDate));
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();

        if (sysTableLookup.getFoundCursor())
        {
            invoiceRecId = sysTableLookup.getFoundCursor().RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId_modified</Name>
				<Source><![CDATA[
    private boolean invoiceId_modified(FormStringControl _formControl)
    {
        boolean         ret = _formControl.modified();
        EGAISClient_RU  eGAISClient;
        CustInvoiceJour custInvoiceJourLoc;

        if (ret)
        {
            if (!fieldInvoiceId.value())
            {
                invoiceRecId = 0;
            }

            custInvoiceJourLoc = CustInvoiceJour::findRecId(invoiceRecId);

            fieldWaybillNum.value(custInvoiceJourLoc.InvoiceId);
            fieldWaybillDate.value(custInvoiceJourLoc.InvoiceDate);

            eGAISClient = EGAISClient_RU::findByParty(custInvoiceJourLoc.custTable_InvoiceAccount().Party);
            fieldDocumentVersion.value(eGAISClient.WaybillVersion);

            switch (eGAISClient.WaybillVersion)
            {
                case EGAISDocumentVersion_RU::Version1:
                    fieldUnitType.enabled(true);
                    fieldAddNote1.value('');
                    fieldAddNote2.value('');
                    fieldAddNote3.value('');
                    fieldAddNote1.enabled(false);
                    fieldAddNote2.enabled(false);
                    fieldAddNote3.enabled(false);
                    break;

                case EGAISDocumentVersion_RU::Version2:
                    fieldUnitType.enabled(false);
                    fieldUnitType.value(EGAISWaybillUnitType_RU::None);
                    fieldAddNote1.enabled(true);
                    fieldAddNote2.enabled(true);
                    fieldAddNote3.enabled(true);
                    break;

                default:
                    throw error(strfmt("@EGAIS:EgaisDocumentTypeVersionIsNotSupported", EGAISDocumentType_RU::WayBill, eGAISClient.WaybillVersion));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, invoiceRecId, 
                                waybillNum, 
                                waybillDate, 
                                unitType, 
                                note, 
                                base, 
                                documentVersion, 
                                addNote1, 
                                addNote2, 
                                addNote3];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsBegin;

            this.initParameters();
            this.determineBranchId();
            this.createWaybillJour();
            this.createWaybillLines();

            ttsCommit;

            info(strFmt("@EGAIS:EgaisBolNumberDateHasBeenCreated", waybillJour.WaybillNum, waybillJour.WaybillDate));
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the last choice by using the <c>pack</c> method.
    /// </summary>
    /// <remarks>
    ///    This method should not normally be overridden.
    /// </remarks>
    public void saveLast()
    {
        if (this.canSaveLast())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass, 1);

        switch (version)
        {
            case CurrentVersion:
                [version,   invoiceRecId, 
                            waybillNum, 
                            waybillDate, 
                            unitType, 
                            note, 
                            base, 
                            documentVersion, 
                            addNote1, 
                            addNote2, 
                            addNote3] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean                 ret = super(_calledFrom);
        QueryRun                queryRun;
        EGAISWaybillJour_RU     waybillJourLoc;
        CustInvoiceJour         custInvoiceJourLoc;

        if (!invoiceRecId)
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS14204"));
        }

        if (!waybillNum)
        {
            ret = checkFailed(strFmt("@SYS26332", "@EGAIS:EgaisBolNumber"));
        }

        if (!waybillDate)
        {
            ret = checkFailed(strFmt("@SYS26332", "@EGAIS:EgaisBolDate"));
        }

        if (documentVersion == EGAISDocumentVersion_RU::Version1 && unitType == EGAISWaybillUnitType_RU::None)
        {
            ret = checkFailed(strFmt("@SYS26332", "@EGAIS:ProductType"));
        }

        if (ret)
        {
            custInvoiceJourLoc = CustInvoiceJour::findRecId(invoiceRecId);

            queryRun = new queryRun(EGAISAlcoholProduction_RU::queryCustInvoiceWithAlcProd(custInvoiceJourLoc));

            if (!queryRun.next())
            {
                ret = checkFailed(strFmt("@EGAIS:InvoiceDoesntContainEgaisAlcoholProduct", custInvoiceJourLoc.InvoiceId));
            }
        }

        if (ret)
        {
            select firstOnly WaybillNum, WaybillDate from waybillJourLoc
                where waybillJourLoc.Direction              == EGAISDocumentDirection_RU::Outgoing
                    && waybillJourLoc.SourceCustInvoiceJour == invoiceRecId;

            if (waybillJourLoc.RecId)
            {
                ret = checkFailed(strFmt("@EGAIS:InvoiceHasAlreadyBeenIncludedInTheEgaisBolNumberDa", custInvoiceJourLoc.InvoiceId, waybillJourLoc.WaybillNum, waybillJourLoc.WaybillDate));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EGAISWaybillCreate_RU construct()
    {
        return new EGAISWaybillCreate_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the description of the class.
    /// </summary>
    /// <returns>
    ///    The description of the class.
    /// </returns>
    static public ClassDescription description()
    {
        return "@EGAIS:CreateOutgoingEgaisBol";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EGAISWaybillCreate_RU   runClass = EGAISWaybillCreate_RU::construct();
        FormDataSource          formDataSource;

        if (runClass.prompt())
        {
            runClass.runOperation();

            if (_args)
            {
                formDataSource = _args.record().dataSource();

                if (formDataSource)
                {
                    formDataSource.research(true);
                    formDataSource.positionToRecord(runClass.getWaybillJour());
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>