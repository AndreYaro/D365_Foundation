<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLineDetailInquiryRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Gathers information required to display in the budget plan line detail inquiry form.
/// </summary>
public class BudgetPlanLineDetailInquiryRequest extends BudgetPlanInquiryRequest
{
    Map                            dimensionAttributeValueSet = new Map(Types::String, Types::String);
    FieldValue                     groupByFieldValue;
    BudgetPlanLineActiveViewRecId  budgetPlanLineActiveViewRecId;
    BudgetPlanColumnRecId          budgetPlanColumnRecId;
    BudgetPlanLayoutRecId          budgetPlanLayoutRecId;
    DimensionCombinationNameTmp    dimensionCombinationNameTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmBudgetPlanColumnRecId</Name>
				<Source><![CDATA[
    public BudgetPlanColumnRecId parmBudgetPlanColumnRecId(BudgetPlanColumnRecId _budgetPlanColumnRecId = budgetPlanColumnRecId)
    {
        budgetPlanColumnRecId = _budgetPlanColumnRecId;

        return budgetPlanColumnRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanLayoutRecId</Name>
				<Source><![CDATA[
    public BudgetPlanLayoutRecId parmBudgetPlanLayoutRecId(BudgetPlanLayoutRecId _budgetPlanLayoutRecId = budgetPlanLayoutRecId)
    {
        budgetPlanLayoutRecId = _budgetPlanLayoutRecId;

        return budgetPlanLayoutRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanLineActiveViewRecId</Name>
				<Source><![CDATA[
    public BudgetPlanLineActiveViewRecId parmBudgetPlanLineActiveViewRecId(BudgetPlanLineActiveViewRecId _budgetPlanLineActiveViewRecId = budgetPlanLineActiveViewRecId)
    {
        budgetPlanLineActiveViewRecId = _budgetPlanLineActiveViewRecId;

        return budgetPlanLineActiveViewRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionAttributeValueSet</Name>
				<Source><![CDATA[
    public Map parmDimensionAttributeValueSet(Map _dimensionAttributeValueSet = dimensionAttributeValueSet)
    {
        dimensionAttributeValueSet = _dimensionAttributeValueSet;

        return dimensionAttributeValueSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupByFieldValue</Name>
				<Source><![CDATA[
    public FieldValue parmGroupByFieldValue(FieldValue _groupByFieldValue = groupByFieldValue)
    {
        groupByFieldValue = _groupByFieldValue;

        return groupByFieldValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangesForDimensionAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the dimension attributes ranges to the query.
    /// </summary>
    /// <param name="_query">
    /// The query to which to add the range.
    /// </param>
    public void addRangesForDimensionAttributes(Query _query)
    {
        if (this.parmDimensionAttributeValueSet())
        {
            BudgetTransactionManager::addDimensionCriteriaForAttributeValueSet(
                _query,
                this.parmDimensionAttributeValueSet(),
                tableStr(BudgetPlanLine));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangesForPreviewPane</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the ranges for the row attributes in the <c>BudgetPlanLineActiveView</c> and <c>BudgetPlanColumnRule</c> data sources.
    /// </summary>
    /// <param name="_query">
    /// The query for which to add the range.
    /// </param>
    public void addRangesForPreviewPane(Query _query)
    {
        this.addRangesForBudgetPlanLineActiveView(_query);
        this.addRangesForColumnFilter(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimensionAttributeValueSetFromActiveViewLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates dimension attributes set from the <c>BudgetPlanLineActiveView</c> and the <c>BudgetPlanLayout</c> table records.
    /// </summary>
    public void populateDimensionAttributeValueSetFromActiveViewLayout()
    {
        BudgetPlanLineActiveView budgetPlanLineActiveView = BudgetPlanLineActiveView::find(budgetPlanLineActiveViewRecId);
        BudgetPlanLayoutMapping  layoutMapping;
        FieldValue               fieldValue;
        LanguageId               currentUserLanguage = currentUserLanguage();

        while select layoutMapping
            where layoutMapping.Layout      == budgetPlanLayoutRecId
                && layoutMapping.Ordinal    == 0
                && layoutMapping.LanguageId == currentUserLanguage
        {
            fieldValue = budgetPlanLineActiveView.getFieldValue(layoutMapping.FieldName);
            dimensionAttributeValueSet.insert(layoutMapping.FieldLabel, fieldValue ? fieldValue : BudgetPlanningConstants::emptyAttributeString);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangesForBudgetPlanLineActiveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the ranges for the row attributes to the query.
    /// </summary>
    /// <param name="_query">
    /// The query for which to add the range.
    /// </param>
    protected void addRangesForBudgetPlanLineActiveView(Query _query)
    {
        BudgetPlanLineActiveView budgetPlanLineActiveView = BudgetPlanLineActiveView::find(budgetPlanLineActiveViewRecId);
        TableName                tableName;
        FieldName                fieldName;
        QueryBuildDataSource     dataSourceName;
        BudgetPlanRow            budgetPlanRow;
        BudgetPlanLayoutElement  budgetPlanLayoutElement;
        FieldValue               fieldValue;

        while select FieldName from budgetPlanRow
            exists join budgetPlanLayoutElement
            where budgetPlanLayoutElement.ElementDefinition == budgetPlanRow.RecId
                && budgetPlanLayoutElement.Layout == budgetPlanLayoutRecId
        {
            fieldValue = budgetPlanLineActiveView.getFieldValue(budgetPlanRow.FieldName);

            [tableName, fieldName] = BudgetPlanLineFieldFilterMapping::getPrimaryTableFieldNameMappingForRowElement(budgetPlanRow.FieldName);

            dataSourceName = _query.dataSourceName(tableName);
            dataSourceName.joinMode(JoinMode::InnerJoin);

            FieldId fieldId = fieldName2Id(tableName2Id(tableName), fieldName);

            switch (tableName)
            {
                case tableStr(HcmPosition):
                    if (fieldValue != BudgetPlanningConstants::zero)
                    {
                        _query.dataSourceName(tableStr(HcmPositionForecast)).joinMode(JoinMode::InnerJoin);

                        dataSourceName.addRange(fieldId).value(SysQuery::value(HcmPositionForecast::getPositionId(str2recId(fieldValue))));
                    }
                    else
                    {
                        dataSourceName.joinMode(JoinMode::OuterJoin);
                        dataSourceName = _query.dataSourceName(tableStr(BudgetPlanLine));
                        dataSourceName.addRange(fieldNum(BudgetPlanLine, Position)).value(SysQuery::value(fieldValue));
                    }
                    break;

                case tableStr(BudgetPlanProposedAsset):
                    if (fieldValue != BudgetPlanningConstants::zero)
                    {
                        dataSourceName.addRange(fieldId).value(SysQuery::value(BudgetPlanProposedAsset::find(str2recId(fieldValue)).Name));
                    }
                    else
                    {
                        dataSourceName.joinMode(JoinMode::OuterJoin);
                        dataSourceName = _query.dataSourceName(tableStr(BudgetPlanLine));
                        dataSourceName.addRange(fieldNum(BudgetPlanLine, ProposedAsset)).value(SysQuery::value(fieldValue));
                    }
                    break;

                case tableStr(BudgetPlanProposedProject):
                    if (fieldValue != BudgetPlanningConstants::zero)
                    {
                        dataSourceName.addRange(fieldId).value(SysQuery::value(BudgetPlanProposedProject::find(str2recId(fieldValue)).Name));
                    }
                    else
                    {
                        dataSourceName.joinMode(JoinMode::OuterJoin);
                        dataSourceName = _query.dataSourceName(tableStr(BudgetPlanLine));
                        dataSourceName.addRange(fieldNum(BudgetPlanLine, ProposedProject)).value(SysQuery::value(fieldValue));
                    }
                    break;

                case tableStr(BudgetPlanLine):
                case tableStr(AssetTable):
                case tableStr(ProjTable):
                    dataSourceName.addRange(fieldId).value(SysQuery::value(fieldValue));
            }
        }

        this.populateDimensionAttributeValueSetFromActiveViewLayout();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangesForColumnFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the ranges for the column filters fields in the query.
    /// </summary>
    /// <param name="_query">
    /// The query for which to add the range.
    /// </param>
    protected void addRangesForColumnFilter(Query _query)
    {
        BudgetPlanColumnRule      budgetPlanColumnRule;
        TableName                 tableName;
        FieldName                 fieldName;
        QueryBuildDataSource      dataSourceName;
        BudgetPlanColumnRuleValue valueOne;
        BudgetPlanColumnRuleValue valueTwo;
        FieldId                   fieldId;

        while select budgetPlanColumnRule
            order by budgetPlanColumnRule.TableName,
                     budgetPlanColumnRule.FieldName,
                     budgetPlanColumnRule.RightSideValueOne
            where budgetPlanColumnRule.Column == budgetPlanColumnRecId
        {
            valueOne = budgetPlanColumnRule.RightSideValueOne;
            valueTwo = budgetPlanColumnRule.RightSideValueTwo;

            if (budgetPlanColumnRule.TableName != tableStr(MainAccount))
            {
                [tableName, fieldName] = BudgetPlanLineFieldFilterMapping::getPrimaryTableFieldNameMappingForColumnFilter([budgetPlanColumnRule.TableName, budgetPlanColumnRule.FieldName]);

                dataSourceName = _query.dataSourceName(tableName);
                dataSourceName.joinMode(JoinMode::InnerJoin);

                fieldId = fieldName2Id(tableName2Id(tableName), fieldName);

                if (tableName == tableStr(HcmPosition))
                {
                    _query.dataSourceName(tableStr(HcmPositionForecast)).joinMode(JoinMode::InnerJoin);

                    valueOne = HcmPosition::find(str2recId(valueOne)).PositionId;
                    valueTwo = HcmPosition::find(str2recId(valueTwo)).PositionId;
                }
            }

            switch (budgetPlanColumnRule.Operator)
            {
                case BudgetPlanExpressionOperator::Between:
                    if (budgetPlanColumnRule.TableName != tableStr(MainAccount))
                    {
                        dataSourceName.addRange(fieldId).value(SysQuery::range(valueOne, valueTwo));
                    }
                    else
                    {
                        dimensionAttributeValueSet.insert(budgetPlanColumnRule.TableName, SysQuery::range(valueOne, valueTwo));
                    }
                    break;

                case BudgetPlanExpressionOperator::Equals:
                    if (budgetPlanColumnRule.TableName != tableStr(MainAccount))
                    {
                        dataSourceName.addRange(fieldId).value(SysQuery::value(valueOne));
                    }
                    else
                    {
                        dimensionAttributeValueSet.insert(budgetPlanColumnRule.TableName, SysQuery::value(valueOne));
                    }
                    break;

                case BudgetPlanExpressionOperator::LessThanEqual:
                    if (budgetPlanColumnRule.TableName != tableStr(MainAccount))
                    {
                        dataSourceName.addRange(fieldId).value(SysQuery::value(strFmt(BudgetPlanningConstants::placeHolder1, BudgetPlanningConstants::lessThanAndEqualTo, valueOne)));
                    }
                    else
                    {
                        dimensionAttributeValueSet.insert(budgetPlanColumnRule.TableName, SysQuery::value(strFmt(BudgetPlanningConstants::placeHolder1, BudgetPlanningConstants::lessThanAndEqualTo, valueOne)));
                    }
                    break;

                case BudgetPlanExpressionOperator::GreaterThanEqual:
                    if (budgetPlanColumnRule.TableName != tableStr(MainAccount))
                    {
                        dataSourceName.addRange(fieldId).value(SysQuery::value(strFmt(BudgetPlanningConstants::placeHolder1, BudgetPlanningConstants::greaterThanAndEqualTo, valueOne)));
                    }
                    else
                    {
                        dimensionAttributeValueSet.insert(budgetPlanColumnRule.TableName, SysQuery::value(strFmt(BudgetPlanningConstants::placeHolder1, BudgetPlanningConstants::greaterThanAndEqualTo, valueOne)));
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>BudgetPlanLine</c> record query ranges to the specified query.
    /// </summary>
    /// <param name="_query">
    /// The query for which to add the range.
    /// </param>
    public void addLineRanges(Query _query)
    {
        QueryBuildDataSource budgetPlanLineDataSource;
        QueryBuildDataSource budgetPlanScenarioDataSource;
        TableName            tableName;
        FieldName            fieldName;
        QueryBuildDataSource dataSourceName;
        FieldId              fieldId;
        FieldValue          fieldValue;

        budgetPlanLineDataSource = _query.dataSourceTable(tableNum(BudgetPlanLine));

        if (budgetPlanLineDataSource)
        {
            budgetPlanLineDataSource.clearRange(fieldNum(BudgetPlanLine, EffectiveDate));
            QueryBuildRange effectiveDateRange = SysQuery::findOrCreateRange(budgetPlanLineDataSource, fieldNum(BudgetPlanLine, EffectiveDate));
            effectiveDateRange.status(RangeStatus::Locked);

            if (this.parmStartDate() || this.parmEndDate())
            {
                effectiveDateRange.value(SysQuery::range(this.parmStartDate(), this.parmEndDate()));
            }
            else
            {
                effectiveDateRange.value(BudgetPlanningConstants::emptyString);
            }

            budgetPlanScenarioDataSource = _query.dataSourceTable(tableNum(BudgetPlanScenario));

            QueryBuildRange budgetPlanScenarioRange = SysQuery::findOrCreateRange(budgetPlanScenarioDataSource, fieldNum(BudgetPlanScenario, Name));
            budgetPlanScenarioRange.status(RangeStatus::Locked);

            if (this.parmBudgetPlanScenarioRecId())
            {
                budgetPlanScenarioRange.value(BudgetPlanScenario::find(this.parmBudgetPlanScenarioRecId()).Name);
            }
            else
            {
                budgetPlanScenarioRange.value(BudgetPlanningConstants::emptyString);
            }

            if (this.parmGroupByFieldName())
            {
                [tableName, fieldName] = BudgetPlanLineFieldFilterMapping::getPrimaryTableFieldNameMappingForRowElement(this.parmGroupByFieldName());

                dataSourceName = _query.dataSourceName(tableName);
                dataSourceName.joinMode(JoinMode::InnerJoin);

                fieldId = fieldName2Id(tableName2Id(tableName), fieldName);

                if (tableName == tableStr(HcmPosition))
                {
                    _query.dataSourceName(tableStr(HcmPositionForecast)).joinMode(JoinMode::InnerJoin);
                    fieldValue = HcmPosition::find(str2recId(this.parmGroupByFieldValue())).PositionId;
                }

                dataSourceName.addRange(fieldId).value(SysQuery::value(this.parmGroupByFieldValue()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimensionCombinationNameTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>DimensionCombinationNameTmp</c> table with ledger dimension descriptions from budget plan lines.
    /// </summary>
    /// <returns>
    /// An instance of <c>DimensionCombinationNameTmp</c> table.
    /// </returns>
    public DimensionCombinationNameTmp populateDimensionCombinationNameTmp()
    {
        // Mirror the form query structure.
        Query budgetPlanQuery = new Query();
        QueryBuildDataSource budgetPlanHeaderDS = budgetPlanQuery.addDataSource(tableNum(BudgetPlanHeader));

        QueryBuildDataSource budgetPlanLineDS = budgetPlanHeaderDS.addDataSource(tableNum(BudgetPlanLine), tableStr(BudgetPlanLine));
        budgetPlanLineDS.addLink(fieldNum(BudgetPlanHeader, RecId), fieldNum(BudgetPlanLine, BudgetPlanHeader));

        this.addRangesForDimensionAttributes(budgetPlanQuery);

        // Add not exists data source for already calculated dimension combination names.
        QueryBuildDataSource dimensionCombinationNameTmpDS = budgetPlanLineDS.addDataSource(tableNum(DimensionCombinationNameTmp));
        dimensionCombinationNameTmpDS.joinMode(JoinMode::NoExistsJoin);
        dimensionCombinationNameTmpDS.fetchMode(QueryFetchMode::One2One);
        dimensionCombinationNameTmpDS.addLink(fieldNum(BudgetPlanLine, LedgerDimension),
            fieldNum(DimensionCombinationNameTmp, DimensionAttributeValueCombination));

        // Add mapping from the LedgerDimension field to the resulting temp table field.
        budgetPlanQuery.clearAllFields();
        budgetPlanQuery.clearGroupBy();
        budgetPlanLineDS.addGroupByField(fieldNum(BudgetPlanLine, LedgerDimension));
        budgetPlanLineDS.addSelectionField(fieldNum(BudgetPlanLine, LedgerDimension));
        Map insertRecordsetMap = new Map(Types::String, Types::Container);
        insertRecordsetMap.insert(
            fieldStr(DimensionCombinationNameTmp, DimensionAttributeValueCombination),
            [budgetPlanLineDS.uniqueId(), fieldStr(BudgetPlanLine, LedgerDimension)]);

        // Associate the dimensionCombinationNameTmp data source with the DimensionCombinationNameTmp data source in the query.
        // Note that this association is stored in the query, and not the QueryRun, so this impacts the following
        // Query::insert_recordset call.
        QueryRun queryRun = new QueryRun(budgetPlanQuery);
        queryRun.setRecord(dimensionCombinationNameTmp);
        budgetPlanQuery = queryRun.query();

        // Get the list of unique new combinations.
        DimensionCombinationNameTmp dimensionCombinationNameTmpToFill;
        Query::insert_recordset(dimensionCombinationNameTmpToFill, insertRecordsetMap, budgetPlanQuery);

        // Get the name for each unique new combination.
        DimensionCombinationNameTmp::getDimensionCombinationNames(dimensionCombinationNameTmpToFill);

        // Merge the new values into the original list.
        // Insert the values using a new linked instance of the DimensionCombinationNameTmp table
        // to prevent the data source association that would otherwise revert the operation to row-by-row.
        DimensionCombinationNameTmp dimensionCombinationNameTmpForInsert;
        dimensionCombinationNameTmpForInsert.linkPhysicalTableInstance(dimensionCombinationNameTmp);
        insert_recordset dimensionCombinationNameTmpForInsert (DimensionAttributeValueCombination, Name)
            select DimensionAttributeValueCombination, Name
            from dimensionCombinationNameTmpToFill;

        return dimensionCombinationNameTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBudgetPlanDetailInquiryRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields of the <c>BudgetPlanLineDetailInquiryRequest</c> instance using the <c>BudgetPlanDetailInquiryRequest</c> instance.
    /// </summary>
    /// <param name="_budgetPlanDetailInquiryRequest">
    /// An instance of the <c>BudgetPlanDetailInquiryRequest</c> class.
    /// </param>
    public void initFromBudgetPlanDetailInquiryRequest(BudgetPlanDetailInquiryRequest _budgetPlanDetailInquiryRequest)
    {
        // Set parameters of BudgetPlanLineDetailInquiryRequest from BudgetPlanDetailInquiryRequest
        this.parmBudgetingOrganizationRecId(_budgetPlanDetailInquiryRequest.parmBudgetingOrganizationRecId());
        this.parmBudgetPlanningProcessRecId(_budgetPlanDetailInquiryRequest.parmBudgetPlanningProcessRecId());
        this.parmBudgetPlanHeaderRecId(_budgetPlanDetailInquiryRequest.parmBudgetPlanHeaderRecId());
        this.parmBudgetPlanScenarioRecId(_budgetPlanDetailInquiryRequest.parmBudgetPlanScenarioRecId());
        this.parmStartDate(_budgetPlanDetailInquiryRequest.parmStartDate());
        this.parmEndDate(_budgetPlanDetailInquiryRequest.parmEndDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromActiveViewColumnLayoutManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields of the <c>BudgetPlanLineDetailInquiryRequest</c> instance using the <c>BudgetPlanLineActiveView</c> buffer and <c>BudgetPlanColumn</c> buffer.
    /// </summary>
    /// <param name="_budgetPlanLineActiveView">
    /// The buffer of the <c>BudgetPlanLineActiveView</c> table record.
    /// </param>
    /// <param name="_budgetPlanColumn">
    /// The buffer of the <c>BudgetPlanColumn</c> table record.
    /// </param>
    /// <param name="_layoutManager">
    /// An instance of the <c>BudgetPlanLayoutManager</c> class object.
    /// </param>
    public void initFromActiveViewColumnLayoutManager(BudgetPlanLineActiveView _budgetPlanLineActiveView, BudgetPlanColumn _budgetPlanColumn, BudgetPlanLayoutManager _layoutManager)
    {
        BudgetPlanHeader budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanLineActiveView.BudgetPlanHeader);

        this.parmBudgetingOrganizationRecId(budgetPlanHeader.BudgetingOrganization);
        this.parmBudgetPlanningProcessRecId(budgetPlanHeader.BudgetPlanningProcess);
        this.parmBudgetPlanScenarioRecId(_budgetPlanColumn.Scenario);
        this.parmBudgetPlanHeaderRecId(budgetPlanHeader.RecId);

        if (_budgetPlanColumn.ColumnPeriodLength != BudgetPlanColumnPeriodLength::All)
        {
            [startDate, endDate] = _layoutManager.getEffectiveDates(_budgetPlanColumn);
        }

        BudgetPlanLayoutElement budgetPlanLayoutElement = BudgetPlanLayoutElement::findByLayoutElementDefinition(budgetPlanHeader.Layout, _budgetPlanColumn.RecId);

        this.parmBudgetPlanLineActiveViewRecId(_budgetPlanLineActiveView.RecId);
        this.parmBudgetPlanColumnRecId(_budgetPlanColumn.RecId);
        this.parmBudgetPlanLayoutRecId(budgetPlanHeader.Layout);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>BudgetPlanLineDetailInquiryRequest</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>BudgetPlanLineDetailInquiryRequest</c> class.
    /// </returns>
    public static BudgetPlanLineDetailInquiryRequest construct()
    {
        BudgetPlanLineDetailInquiryRequest budgetPlanLineDetailInquiryRequest = new BudgetPlanLineDetailInquiryRequest();

        return budgetPlanLineDetailInquiryRequest;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>