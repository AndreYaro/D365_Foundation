<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalPostBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Batch job to post the project advanced journal provided in args, triggered from <c>ProjAdvancedJournal</c> form or <c>ProjAdvancedJournalLine</c> form.
/// </summary>
public class ProjAdvancedJournalPostBatch extends RunBaseBatch implements BatchRetryable
{
    ProjAdvancedJournalRecId projAdvancedJournalRecId;
    private static const int MaxLimitOfLinesForSynchProcessing = 100;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        projAdvancedJournalRecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container  _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                return true;

            default :
                return false;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxLimitOfLinesForSynchProcessing</Name>
				<Source><![CDATA[
    protected int getMaxLimitOfLinesForSynchProcessing()
    {
        return MaxLimitOfLinesForSynchProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        boolean ret = super();
        if (!ret && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            ProjAdvancedJournalLine jourLine;

            select count(RecId) from jourLine where jourLine.ProjAdvancedJournal == projAdvancedJournalRecId;

            int maxAllowedLines = this.getMaxLimitOfLinesForSynchProcessing();

            ret = jourLine.RecId > maxAllowedLines;
            if (ret)
            {
                Info(strFmt('@Proj:MessageForAdvancedJourForcedToRunInBatch', maxAllowedLines));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suppresses the retrieving of the last values.
    /// </summary>
    /// <remarks>
    /// This class must always run with the currently passed values. Therefore, no last values are
    /// retrieved from the <see cref="T:SysLastValue" /> table.
    /// </remarks>
    public void getLast()
    {
        // This is a RunBaseBatch derivative class. Manually restore the user's settings on the batch tab since
        // super() is not being called.
        xSysLastValue::getLast(this.batchInfo());

        // Do not get last values for this batch task
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(classStr(ProjAdvancedJournalPostBatch));

        using (var activityContext = logger.integrationJournalActivity().postMarkedContext())
        {
            ProjAdvancedJournal journal = ProjAdvancedJournal::find(projAdvancedJournalRecId);
            if (journal)
            {
                Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;

                try
                {
                    logger.logInformation(strFmt(ProjOpsIntegrationJournalInstrumentationActivites::PostAdvancedJournalInfoMessage, journal.ProjAdvancedJournalId));

                    activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::AdvancedJournalId, journal.ProjAdvancedJournalId);
                    activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::JournalListLength, '1');

                    boolean enableProjAdvancedJournalLineMultipleBatchTaskFeature = FeatureStateProvider::isFeatureEnabled(ProjEnableAdvancedJournalMultipleBatchTaskFeature::instance());
                    ProjAdvancedJournalPost projAdvancedJournalPost = ProjAdvancedJournalPost::construct(journal);

                    if (this.isInBatch() && enableProjAdvancedJournalLineMultipleBatchTaskFeature)
                    {
                        activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, 'Posting using multiple batch tasks');
                        if (FeatureStateProvider::isFeatureEnabled(ProjAdvancedJournalPostingEnhancementFeature::instance()))
                        {
                            ProjAdvancedJournalPostingMultiTaskHelper::postAdvancedJournalUsingMultiTask(journal);
                        }
                        else
                        {
                            projAdvancedJournalPost.postAdvancedJournalInBatch(journal);
                        }
                    }
                    else
                    {
                        activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, 'Posting without multiple batch tasks');
                        projAdvancedJournalPost.runOperation();
                    }
                }
                catch (xppEx)
                {
                    int currRetryCount = xSession::currentRetryCount();
                    logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), journal.ProjAdvancedJournalId, journal.numOfLines(), xppEx.Message, currRetryCount));
                    throw xppEx;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjAdvancedJournalRecId</Name>
				<Source><![CDATA[
    public ProjAdvancedJournalRecId parmProjAdvancedJournalRecId(ProjAdvancedJournalRecId _projAdvancedJournalRecId = projAdvancedJournalRecId)
    {
        projAdvancedJournalRecId = _projAdvancedJournalRecId;
        return projAdvancedJournalRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static ProjAdvancedJournalPostBatch construct(ProjAdvancedJournalRecId _projAdvancedJournalRecId)
    {
        ProjAdvancedJournalPostBatch batch = new ProjAdvancedJournalPostBatch();
        batch.parmProjAdvancedJournalRecId(_projAdvancedJournalRecId);

        return batch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Proj:PostSelectedJournal";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(xArgs _args)
    {
        if (!_args)
        {
            throw error(strFmt("@SPS1272", funcName()));
        }

        ProjAdvancedJournal journal = _args.record() as ProjAdvancedJournal;

        ProjAdvancedJournalPostBatch task = ProjAdvancedJournalPostBatch::construct(journal.RecId);

        if (task.prompt())
        {
            task.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>