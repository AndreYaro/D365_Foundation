<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_Payment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalEngine_Payment</c> class supports payment journals.
/// </summary>
/// <remarks>
///    This class extends <see cref="T:LedgerJournalEngine" />.
/// </remarks>
abstract class LedgerJournalEngine_Payment extends LedgerJournalEngine
{
    FormDataSource             paymentOrderBudgetTrans_ds;
    PaymentOrderBudgetTrans_RU paymentOrderBudgetTransBuffer;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountModified</Name>
				<Source><![CDATA[
    public DebCredProposal accountModified(LedgerJournalTrans          _ledgerJournalTrans,
                                           LedgerJournalTrans_Project  _ledgerJournalTrans_Project = null,
                                           LedgerJournalTrans_Asset    _ledgerJournalTrans_Asset = null
                                           , Tax1099BoxDetail _tax1099Detail = null
                                           ,
                                           LedgerJournalTrans_RAsset     _ledgerJournalTrans_RAsset     = null,
                                           LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals = null
                                           )
    {
        DebCredProposal ret;

        ret = super(_ledgerJournalTrans, _ledgerJournalTrans_Project, _ledgerJournalTrans_Asset
            , _tax1099Detail
            // <GEERU>
            , _ledgerJournalTrans_RAsset, _ledgerJournalTrans_RDeferrals
            // </GEERU>
        );

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
            paymentOrderBudgetTrans_ds)
        {
            this.updatePaymentOrderBudgetTrans_RU(_ledgerJournalTrans);
        }
        //</GEERU>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditOnPaymentOrderBudgetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether or not to allow edit on the <c>PaymentOrderBudgetTrans</c> datasource.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The current <c>LedgerJournalTrans</c> record.</param>
    /// <returns>true if allowEdit() should be allowed; otherwise, false.</returns>
    protected boolean allowEditOnPaymentOrderBudgetTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        return !this.posted()
            && !(_ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Sent
                    || _ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Confirmed
                    || (_ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Rejected
                            && (_ledgerJournalTrans.BankCurrencyTransferLog_RU 
                                    || _ledgerJournalTrans.existBankPaymentOrderJour_RU())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>active</Name>
				<Source><![CDATA[
    void active(LedgerJournalTrans _ledgerJournalTrans)
    {
        super(_ledgerJournalTrans);

        if (paymentOrderBudgetTrans_ds)
        {
            this.updatePaymentOrderBudgetTrans_RU(_ledgerJournalTrans);

            if (paymentOrderBudgetTrans_ds.cursor())
            {
                this.paymOrderTransPeriodCodeModified_RU(paymentOrderBudgetTrans_ds.cursor());
                this.paymOrderTransTaxPeriodDateModified_RU(paymentOrderBudgetTrans_ds.cursor());

                paymentOrderBudgetTrans_ds.allowEdit(this.allowEditOnPaymentOrderBudgetTrans(_ledgerJournalTrans));
            }
            else
            {
                paymentOrderBudgetTrans_ds.allowEdit(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentOrderBudgetTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init/blank PaymentOrderBudgetTrans_RU buffer
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Active GL journal line
    /// </param>
    public void initPaymentOrderBudgetTrans_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        paymentOrderBudgetTransBuffer.clear();

        if (LedgerJournalEngine_Payment::isMethodOfPaymentRu(_ledgerJournalTrans))
        {
            paymentOrderBudgetTransBuffer.initValue();
            paymentOrderBudgetTransBuffer.initFromLedgerJournalTrans(_ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue(LedgerJournalTrans ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null)
    {
        super(ledgerJournalTrans);

        ledgerJournalTrans.TransactionType = LedgerTransType::Payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needWritePaymentOrderBudgetTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if Payment order budget lines are to be updated
    /// </summary>
    /// <returns>
    /// true if Payment order budget lines are to be updated
    /// </returns>
    public boolean needWritePaymentOrderBudgetTrans_RU()
    {
        boolean bRet = false;

        LedgerJournalTrans localLedgerJournalTrans = ledgerJournalTrans_ds.cursor();

        if (localLedgerJournalTrans.PaymMode)
        {
            bRet = !this.posted()
                && !(localLedgerJournalTrans.PaymentStatus == CustVendPaymStatus::Sent
                || localLedgerJournalTrans.PaymentStatus == CustVendPaymStatus::Confirmed)
                && LedgerJournalEngine_Payment::isMethodOfPaymentRu(localLedgerJournalTrans);
        }

        return bRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    #define.dsPaymentOrderBudgetTransName_RU("PaymentOrderBudgetTrans_RU")
    void new(FormRun _formRun = null)
    {
        super(_formRun);

        if (_formRun && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            paymentOrderBudgetTrans_ds = _formRun.dataSource(#dsPaymentOrderBudgetTransName_RU);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentOrderBudgetTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor to buget trans buffer
    /// </summary>
    /// <returns>
    /// paymentOrderBudgetTransBuffer variable
    /// </returns>
    public PaymentOrderBudgetTrans_RU paymentOrderBudgetTrans_RU()
    {
        return paymentOrderBudgetTransBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymOrderTransBCDocTypeIdModified_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Nils client-bank info for specific document types
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Payment journal lines to be updated
    /// </param>
    public void paymOrderTransBCDocTypeIdModified_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        BankClientDocumentType_RU   documentType = BankClientDocumentType_RU::find(_ledgerJournalTrans.BankClientDocumentTypeId_RU);

        if (documentType.Category == BankClientDocumentTypeCategory_RU::MemorialOrder ||
            documentType.Category == BankClientDocumentTypeCategory_RU::PaymentDocument)
        {
            _ledgerJournalTrans.BankCommAccountId_RU    = '';
            _ledgerJournalTrans.BankAgreementExt_RU     = 0;
            _ledgerJournalTrans.BankSpecAccountId_RU    = '';
            _ledgerJournalTrans.BankVendAccountId_RU    = '';
            _ledgerJournalTrans.BankRespWorkerId_RU     = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymOrderTransPeriodCodeModified_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Nills Tax period date for empty period
    /// </summary>
    /// <param name="_paymentOrderBudgetTrans">
    /// Payment order budget line to be updated
    /// </param>
    public void paymOrderTransPeriodCodeModified_RU(PaymentOrderBudgetTrans_RU _paymentOrderBudgetTrans)
    {
        if (! _paymentOrderBudgetTrans.emptyPeriodCode()   ||
            ! _paymentOrderBudgetTrans.emptyPeriodNumber() ||
            ! _paymentOrderBudgetTrans.emptyPeriodYear())
        {
            _paymentOrderBudgetTrans.TaxPeriodDate = dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymOrderTransTaxPeriodDateModified_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Nil period properties when TaxPeriodDate is set/changed to non-empty
    /// </summary>
    /// <param name="_paymentOrderBudgetTrans">
    /// PaymentOrderBudgetTrans_RU buffer to be updated
    /// </param>
    public void paymOrderTransTaxPeriodDateModified_RU(PaymentOrderBudgetTrans_RU _paymentOrderBudgetTrans)
    {
        if (! _paymentOrderBudgetTrans.emptyTaxPeriodDate())
        {
            _paymentOrderBudgetTrans.PeriodCode    = PaymentOrderPeriodCode_RU::None;
            _paymentOrderBudgetTrans.PeriodNumber  = 0;
            _paymentOrderBudgetTrans.Year          = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentFee</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates payment fees and calls research on the data source of the payment fee line data source.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    A <c>LedgerJournalTrans</c> record buffer.
    /// </param>
    /// <param name="_custVendPaymJournalFee">
    ///    A <c>CustVendPaymJournalFee</c> record buffer.
    /// </param>
    public void updatePaymentFee(LedgerJournalTrans     _ledgerJournalTrans,
                                 CustVendPaymJournalFee _custVendPaymJournalFee)
    {
        if (!_ledgerJournalTrans.amount())
        {
            return;
        }

        if (FormDataUtil::getFormDataSource(_ledgerJournalTrans))
        {
            this.dataSourceWrite(_ledgerJournalTrans);
        }

        this.calcPaymentFee(_ledgerJournalTrans);

        if (FormDataUtil::getFormDataSource(_custVendPaymJournalFee))
        {
            FormDataUtil::getFormDataSource(_custVendPaymJournalFee).research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentOrderBudgetTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates Payment order budget line if needed using UI
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Payment journal line to be linked to
    /// </param>
    public void updatePaymentOrderBudgetTrans_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        PaymentOrderBudgetTrans_RU paymentOrderBudgetTrans;

        if (! this.posted() &&
            LedgerJournalEngine_Payment::updPaymentOrderBudgetTrans_Server(_ledgerJournalTrans))
        {
            paymentOrderBudgetTrans_ds.create();

            paymentOrderBudgetTrans = paymentOrderBudgetTrans_ds.cursor();
            paymentOrderBudgetTrans.initValue();
            paymentOrderBudgetTrans.initFromLedgerJournalTrans(_ledgerJournalTrans);

            if (this.allowInitPaymOrderBudgetTransFromCFM(_ledgerJournalTrans))
            {
                CFMAgreementPaymentOrder agreementPaymentOrder = CFMAgreementPaymentOrder::findByAgreement(
                    AgreementHeaderExt_RU::findByAgreementId(_ledgerJournalTrans.AccountAgreementId_RU).AgreementHeader,
                    _ledgerJournalTrans.AccountType == LedgerJournalACType::Vend ? SalesPurch::Purch: SalesPurch::Sales);

                 paymentOrderBudgetTrans.initFromAgreementPaymentOrder(agreementPaymentOrder);
            }

            if (_ledgerJournalTrans)
            {
                paymentOrderBudgetTrans_ds.write();
            }
        }

        paymentOrderBudgetTrans_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updPaymentOrderBudgetTrans_Server</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether payment order budget line is needed.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The payment journal line to be linked to
    /// </param>
    /// <returns>
    /// true if payment order budget line is needed; otherwise, false.
    /// </returns>
    private static boolean updPaymentOrderBudgetTrans_Server(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean createNew = false;

        ttsbegin;

        PaymentOrderBudgetTrans_RU paymentOrderBudgetTrans = _ledgerJournalTrans.paymentOrderBudgetTrans_RU(true);

        if (LedgerJournalEngine_Payment::isMethodOfPaymentRu(_ledgerJournalTrans))
        {
            
            if (!paymentOrderBudgetTrans)
            {
                createNew = true;
            }
        }
        else if (paymentOrderBudgetTrans)
        {
            paymentOrderBudgetTrans.delete();
        }

        ttscommit;

        return createNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentNotes</Name>
				<Source><![CDATA[
    public void updatePaymentNotes(LedgerJournalTrans _ledgerJournalTrans)
    {
        _ledgerJournalTrans.fillPaymentNotes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>LedgerJournalTrans</c> record after any of agreement related field is modified.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_accountOffsetaccount">
    /// Account type, account or offset account; optional.
    /// </param>
    public void setAgreement_RU(LedgerJournalTrans _ledgerJournalTrans, AccountOffsetaccount _accountOffsetaccount = AccountOffsetaccount::Account)
    {
        super(_ledgerJournalTrans, _accountOffsetaccount);

        if (this.allowInitPaymOrderBudgetTransFromCFM(_ledgerJournalTrans))
        {
            LedgerJournalEngine::initPaymentOrderBudgetTrans(_ledgerJournalTrans);

            if (paymentOrderBudgetTrans_ds)
            {
                paymentOrderBudgetTrans_ds.research();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowInitPaymOrderBudgetTransFromCFM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check is allow transfer data from Cash flow management tables allowed for source record.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">Source record.</param>
    /// <returns>true if transfer data from Cash flow management tables allowed for source record; false if otherwise.</returns>
    private boolean allowInitPaymOrderBudgetTransFromCFM(LedgerJournalTrans _ledgerJournalTrans)
    {
        return CFMParameters::isModuleEnabled()
            && (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
            || _ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
            && LedgerJournalEngine_Payment::isMethodOfPaymentRu(_ledgerJournalTrans)
            && CFMAgreementPaymentOrder::existByAgreement(
                AgreementHeaderExt_RU::findByAgreementId(_ledgerJournalTrans.AccountAgreementId_RU).AgreementHeader,
                _ledgerJournalTrans.AccountType == LedgerJournalACType::Vend ? SalesPurch::Purch: SalesPurch::Sales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMethodOfPaymentRu</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if method of payment is intended for Russia for source record.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">Source record.</param>
    /// <returns>true if method of payment is intended for Russia; false if otherwise.</returns>
    private static boolean isMethodOfPaymentRu(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret = false;

        if (_ledgerJournalTrans.PaymMode)
        {
            CustVendPaymModeTable custVendPaymModeTable = CustVendPaymModeTable::findCommon(_ledgerJournalTrans);

            if (custVendPaymModeTable)
            {
                ret = custVendPaymModeTable.ClassId == classnum(CustOutPaym_MST_RU)
                    || custVendPaymModeTable.ClassId == classnum(VendOutPaym_MST_RU);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>