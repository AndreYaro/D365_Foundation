<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPlanData_Forecast</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ReqPlanTypeFactoryAttribute(ReqPlanType::ForecastPlan)]
class ReqPlanData_Forecast extends ReqPlanData
{
    ReqPlanForecast reqPlanForecast;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doCovCalc</Name>
				<Source><![CDATA[
    public boolean doCovCalc()
    {
        return !reqPlanForecast.SkipCovCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the object.
    /// </summary>
    /// <returns>
    ///    true if initialization succeeded; otherwise, false.
    /// </returns>
    public boolean init()
    {
        super();

        reqPlanForecast = ReqPlanForecast::find(reqPlanId);
        if (! reqPlanForecast.RecId && reqParameters.RecId)
            throw error(strfmt("@SYS25369",reqPlanId));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>marginIssue</Name>
				<Source><![CDATA[
    public MarginIssue marginIssue(ReqSetupDim _setupDim)
    {
        return reqPlanForecast.IssueMargin  + super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>marginOrder</Name>
				<Source><![CDATA[
    public MarginOrder  marginOrder(ReqSetupDim _setupDim)
    {
        return reqPlanForecast.OrderingMargin + super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>marginReceipt</Name>
				<Source><![CDATA[
    public MarginReceipt marginReceipt(ReqSetupDim     _setupDim)
    {
        return reqPlanForecast.ReceiptMargin + super(_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDoKitPlannedProdDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a boolean indicating if planned production order for
    ///     kits should be deleted.
    /// </summary>
    /// <returns>
    ///     true if planned production orders for kits should be deleted; otherwise, false.
    /// </returns>
    public boolean mcrDoKitPlannedProdDelete()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSchedulingInPastPrevented</Name>
				<Source><![CDATA[
    public NoYes isSchedulingInPastPrevented()
    {
        return reqPlanForecast.PreventScheduleBeforeToday;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sequenceLogId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number sequence record ID for the master planning log numbers.
    /// </summary>
    /// <returns>
    ///    A record ID that identifies the number sequence record for master planning log entries.
    /// </returns>
    public ReqSequenceJobRefRecId sequenceLogId()
    {
        return reqPlanForecast.ReqPlanSequenceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sequencePlannedOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number sequence record ID type for the planned orders number sequence.
    /// </summary>
    /// <returns>
    ///    The planned orders number sequence record ID type.
    /// </returns>
    public ReqSequencePORefRecId sequencePlannedOrder()
    {
        return reqPlanForecast.PlannedOrderSequenceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceCapacity</Name>
				<Source><![CDATA[
    public TimeFenceCapacity timeFenceCapacity(ReqSetupDim    setupDim)
    {
        return reqPlanForecast.TimeFenceCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceCoverage</Name>
				<Source><![CDATA[
    public TimeFenceCoverage timeFenceCoverage(ReqSetupDim    setupDim)
    {
        return reqPlanForecast.TimeFenceCov;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFenceExplosion</Name>
				<Source><![CDATA[
    public TimeFenceExplosion timeFenceExplosion(ReqSetupDim     setupDim)
    {
        return reqPlanForecast.TimeFenceExplosion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>