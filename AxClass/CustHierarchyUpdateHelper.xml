<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustHierarchyUpdateHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustHierarchyUpdateHelper</c> class is a helper for the "Override" feature related to customer hierarchy.
/// </summary>
internal static class CustHierarchyUpdateHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>overrideCustHierarchyAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the attributes in a given property group for all the users in the hierarchy by copying data from the admin.
    /// </summary>
    /// <param name = "_custHierarchyId">Customer hierarchy id.</param>
    /// <param name = "_propertyGroup">Property group.</param>
    /// <param name = "_userCustTableRecId">CustTable RecId of a concrete user to update.</param>
    public static void overrideCustHierarchyAttributes(CustHierarchyId _custHierarchyId, CustHierarchyPropertyGroup _propertyGroup,
        RecId _userCustTableRecId = 0)
    {
        
        CustHierarchyNode custHierarchyNode;

        select custHierarchyNode
            where custHierarchyNode.CustHierarchyId == _custHierarchyId
            && custHierarchyNode.Role == CustHierarchyNodeRole::Admin
            && custHierarchyNode.VersionAdded > custHierarchyNode.VersionRemoved;
        
        RecId selectedAdmin = CustTable::findByPartyRecId(custHierarchyNode.Party).RecId;

        List usersCustTableRecId = new List(Types::Int64);
        usersCustTableRecId.addEnd(_userCustTableRecId);
        CustHierarchyUpdateHelper::overrideCustHierarchyAttributesForUsers(_custHierarchyId, _propertyGroup, usersCustTableRecId, selectedAdmin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideCustHierarchyAttributesForUsers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the attributes in a given property group for all the users in the hierarchy by copying data from the admin.
    /// </summary>
    /// <param name = "_custHierarchyId">Customer hierarchy id.</param>
    /// <param name = "_propertyGroup">Property group.</param>
    /// <param name = "_usersCustTableRecIds">CustTable RecId of a concrete users to update.</param>
    /// <param name = "_selectedAdmin">CustTable RecId of a admin to copy properties from.</param>
    public static void overrideCustHierarchyAttributesForUsers(CustHierarchyId _custHierarchyId, CustHierarchyPropertyGroup _propertyGroup,
        List _usersCustTableRecIds, RecId _selectedAdmin = 0)
    {
        switch (_propertyGroup)
        {
            case CustHierarchyPropertyGroup::General:
                CustHierarchyUpdateHelper::overrideGeneralAttributes(_custHierarchyId, _usersCustTableRecIds, _selectedAdmin);
                break;
            case CustHierarchyPropertyGroup::MiscellaneousDetails:
                CustHierarchyUpdateHelper::overrideMiscDetailsAttributes(_custHierarchyId, _usersCustTableRecIds, _selectedAdmin);
                break;
            case CustHierarchyPropertyGroup::SalesDemographics:
                CustHierarchyUpdateHelper::overrideSalesDemographicsAttributes(_custHierarchyId, _usersCustTableRecIds, _selectedAdmin);
                break;
            case CustHierarchyPropertyGroup::CreditAndCollections:
                CustHierarchyUpdateHelper::overrideCreditAndCollectionsAttributes(_custHierarchyId, _usersCustTableRecIds, _selectedAdmin);
                break;
            case CustHierarchyPropertyGroup::SalesOrderDefaults:
                CustHierarchyUpdateHelper::overrideSalesOrderDefaultsAttributes(_custHierarchyId, _usersCustTableRecIds, _selectedAdmin);
                break;
            case CustHierarchyPropertyGroup::PaymentDefaults:
                CustHierarchyUpdateHelper::overridePaymentDefaultsAttributes(_custHierarchyId, _usersCustTableRecIds, _selectedAdmin);
                break;
            case CustHierarchyPropertyGroup::InvoiceAndDelivery:
                CustHierarchyUpdateHelper::overrideInvoiceAndDeliveryAttributes(_custHierarchyId, _usersCustTableRecIds, _selectedAdmin);
                break;
            case CustHierarchyPropertyGroup::Retail:
                CustHierarchyUpdateHelper::overrideRetailAttributes(_custHierarchyId, _usersCustTableRecIds, _selectedAdmin);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideGeneralAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the values related to General group for all user in the customer hierarchy by copying data from the admin.
    /// </summary>
    /// <param name = "_custHierarchyId">Customer hierarchy id.</param>
    /// <param name = "_userCustTableRecId">CustTable RecId of a concrete user to update.</param>
    /// <param name = "_selectedAdmin">CustTable RecId of a admin to copy properties from.</param>
    private static void overrideGeneralAttributes(CustHierarchyId _custHierarchyId, List _userCustTableRecId, RecId _selectedAdmin)
    {
        CustHierarchyNode   custHierarchyNode;
        CustTable           userCustTable;

        CustTable adminCustTable = CustTable::findRecId(_selectedAdmin);

        if (adminCustTable)
        { 
            ListEnumerator userCustTableRecId = _userCustTableRecId.getEnumerator();

            while (userCustTableRecId.moveNext())
            {
                ttsbegin;

                update_recordset userCustTable
                setting CustGroup = adminCustTable.CustGroup
                join custHierarchyNode
                where   custHierarchyNode.Party == userCustTable.Party
                    &&  custHierarchyNode.CustHierarchyId == _custHierarchyId
                    &&  custHierarchyNode.Type == CustHierarchyNodeType::Customer
                    &&  (userCustTableRecId.current() == 0 || userCustTable.RecId == userCustTableRecId.current())
                    &&  userCustTable.RecId != _selectedAdmin;

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideMiscDetailsAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the values related to Miscellaneous Details group for all user in the customer hierarchy by copying data from the admin.
    /// </summary>
    /// <param name = "_custHierarchyId">Customer hierarchy id.</param>
    /// <param name = "_userCustTableRecId">CustTable RecId of a concrete user to update.</param>
    /// <param name = "_selectedAdmin">CustTable RecId of a admin to copy properties from.</param>
    private static void overrideMiscDetailsAttributes(CustHierarchyId _custHierarchyId, List _userCustTableRecId, RecId _selectedAdmin)
    {
        CustHierarchyNode   custHierarchyNode;
        CustTable           userCustTable;
        
        CustTable adminCustTable = CustTable::findRecId(_selectedAdmin);

        if (adminCustTable)
        {
            ListEnumerator userCustTableRecId = _userCustTableRecId.getEnumerator();

            while (userCustTableRecId.moveNext())
            {
                ttsbegin;

                update_recordset userCustTable
                setting 
                    AccountStatement = adminCustTable.AccountStatement,
                    InterCompanyAutoCreateOrders = adminCustTable.InterCompanyAutoCreateOrders,
                    VendAccount = adminCustTable.VendAccount
                join custHierarchyNode
                where   custHierarchyNode.Party == userCustTable.Party
                    &&  custHierarchyNode.CustHierarchyId == _custHierarchyId
                    &&  custHierarchyNode.Type == CustHierarchyNodeType::Customer
                    &&  (userCustTableRecId.current() == 0 || userCustTable.RecId == userCustTableRecId.current())
                    &&  userCustTable.RecId != _selectedAdmin;

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideSalesDemographicsAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the values related to Sales Demographics group for all user in the customer hierarchy by copying data from the admin.
    /// </summary>
    /// <param name = "_custHierarchyId">Customer hierarchy id.</param>
    /// <param name = "_userCustTableRecId">CustTable RecId of a concrete user to update.</param>
    /// <param name = "_selectedAdmin">CustTable RecId of a admin to copy properties from.</param>
    private static void overrideSalesDemographicsAttributes(CustHierarchyId _custHierarchyId, List _userCustTableRecId, RecId _selectedAdmin)
    {
        CustHierarchyNode   custHierarchyNode;
        CustTable           userCustTable;
        
        CustTable adminCustTable = CustTable::findRecId(_selectedAdmin);

        if (adminCustTable)
        {
           ListEnumerator userCustTableRecId = _userCustTableRecId.getEnumerator();

           while (userCustTableRecId.moveNext())
           {
               ttsbegin;

               update_recordset userCustTable
               setting
                   Currency = adminCustTable.Currency,
                   MainContactWorker = adminCustTable.MainContactWorker
               join custHierarchyNode
               where   custHierarchyNode.Party == userCustTable.Party
                   &&  custHierarchyNode.CustHierarchyId == _custHierarchyId
                   &&  custHierarchyNode.Type == CustHierarchyNodeType::Customer
                   &&  (userCustTableRecId.current() == 0 || userCustTable.RecId == userCustTableRecId.current())
                   &&  userCustTable.RecId != _selectedAdmin;

               ttscommit;
           }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideCreditAndCollectionsAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the values related to Credit And Collections group for all user in the customer hierarchy by copying data from the admin.
    /// </summary>
    /// <param name = "_custHierarchyId">Customer hierarchy id.</param>
    /// <param name = "_userCustTableRecId">CustTable RecId of a concrete user to update.</param>
    /// <param name = "_selectedAdmin">CustTable RecId of a admin to copy properties from.</param>
    private static void overrideCreditAndCollectionsAttributes(CustHierarchyId _custHierarchyId, List _userCustTableRecId, RecId _selectedAdmin)
    {
        CustHierarchyNode   custHierarchyNode;
        CustTable           userCustTable;
         
        CustTable adminCustTable = CustTable::findRecId(_selectedAdmin);

        if (adminCustTable)
        {
            ListEnumerator userCustTableRecId = _userCustTableRecId.getEnumerator();

            while (userCustTableRecId.moveNext())
            {
                ttsbegin;

                update_recordset userCustTable
                setting
                    Blocked = adminCustTable.Blocked,
                    MandatoryCreditLimit = adminCustTable.MandatoryCreditLimit,
                    CreditMax = adminCustTable.CreditMax
                join custHierarchyNode
                where   custHierarchyNode.Party == userCustTable.Party
                    &&  custHierarchyNode.CustHierarchyId == _custHierarchyId
                    &&  custHierarchyNode.Type == CustHierarchyNodeType::Customer
                    &&  (userCustTableRecId.current() == 0 || userCustTable.RecId == userCustTableRecId.current())
                   &&  userCustTable.RecId != _selectedAdmin;

                ttscommit;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideSalesOrderDefaultsAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the values related to Sales Order Defaults group for all user in the customer hierarchy by copying data from the admin.
    /// </summary>
    /// <param name = "_custHierarchyId">Customer hierarchy id.</param>
    /// <param name = "_userCustTableRecId">CustTable RecId of a concrete user to update.</param>
    /// <param name = "_selectedAdmin">CustTable RecId of a admin to copy properties from.</param>
    private static void overrideSalesOrderDefaultsAttributes(CustHierarchyId _custHierarchyId, List _userCustTableRecId, RecId _selectedAdmin)
    {
        CustHierarchyNode   custHierarchyNode;
        CustTable           userCustTable;
        MCRCustTable        userMCRCustTable;
        
        CustTable adminCustTable = CustTable::findRecId(_selectedAdmin);

        if (adminCustTable)
        {
            MCRCustTable adminMCRCustTable = MCRCustTable::findByCustAccount(adminCustTable.AccountNum);
            ListEnumerator userCustTableRecId = _userCustTableRecId.getEnumerator();

            while (userCustTableRecId.moveNext())
            {
                ttsbegin;

                update_recordset userCustTable
                setting
                    MarkupGroup = adminCustTable.MarkupGroup,
                    CommissionGroup = adminCustTable.CommissionGroup,
                    MultiLineDisc = adminCustTable.MultiLineDisc,
                    EndDisc = adminCustTable.EndDisc,
                    PriceGroup = adminCustTable.PriceGroup,
                    LineDisc = adminCustTable.LineDisc,
                    InventSiteId = adminCustTable.InventSiteId,
                    InventLocation = adminCustTable.InventLocation,
                    SalesPoolId = adminCustTable.SalesPoolId,
                    SalesGroup = adminCustTable.SalesGroup,
                    PdsCustRebateGroupId = adminCustTable.PdsCustRebateGroupId,
                    PdsRebateTMAGroup = adminCustTable.PdsRebateTMAGroup
                join custHierarchyNode
                where   custHierarchyNode.Party == userCustTable.Party
                    &&  custHierarchyNode.CustHierarchyId == _custHierarchyId
                    &&  custHierarchyNode.Type == CustHierarchyNodeType::Customer
                    &&  (userCustTableRecId.current() == 0 || userCustTable.RecId == userCustTableRecId.current())
                    &&  userCustTable.RecId != _selectedAdmin;

                update_recordset userMCRCustTable
                setting
                    SOAllocPriority = adminMCRCustTable.SOAllocPriority
                join userCustTable
                    where  userMCRCustTable.CustTable == userCustTable.RecId
                        && (userCustTableRecId.current() == 0 || userCustTable.RecId == userCustTableRecId.current())
                join custHierarchyNode
                where   custHierarchyNode.Party == userCustTable.Party
                    &&  custHierarchyNode.CustHierarchyId == _custHierarchyId
                    &&  custHierarchyNode.Role == CustHierarchyNodeRole::User
                    &&  custHierarchyNode.Type == CustHierarchyNodeType::Customer;

                ttscommit;
            }
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>overridePaymentDefaultsAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the values related to Payment Defaults group for all user in the customer hierarchy by copying data from the admin.
    /// </summary>
    /// <param name = "_custHierarchyId">Customer hierarchy id.</param>
    /// <param name = "_userCustTableRecId">CustTable RecId of a concrete user to update.</param>
    /// <param name = "_selectedAdmin">CustTable RecId of a admin to copy properties from.</param>
    private static void overridePaymentDefaultsAttributes(CustHierarchyId _custHierarchyId, List _userCustTableRecId, RecId _selectedAdmin)
    {
        CustHierarchyNode   custHierarchyNode;
        CustTable           userCustTable;
        MCRCustTable        userMCRCustTable;
        
        CustTable adminCustTable = CustTable::findRecId(_selectedAdmin);

        if (adminCustTable)
        {
            MCRCustTable adminMCRCustTable = MCRCustTable::findByCustAccount(adminCustTable.AccountNum);
            ListEnumerator userCustTableRecId = _userCustTableRecId.getEnumerator();

            while (userCustTableRecId.moveNext())
            {
                ttsbegin;

                update_recordset userCustTable
                setting
                    PaymTermId = adminCustTable.PaymTermId,
                    PaymMode = adminCustTable.PaymMode
                join custHierarchyNode
                where   custHierarchyNode.Party == userCustTable.Party
                    &&  custHierarchyNode.CustHierarchyId == _custHierarchyId
                    &&  custHierarchyNode.Type == CustHierarchyNodeType::Customer
                    &&  (userCustTableRecId.current() == 0 || userCustTable.RecId == userCustTableRecId.current())
                    &&  userCustTable.RecId != _selectedAdmin;

                update_recordset userMCRCustTable
                setting
                    AllowOnAccount = adminMCRCustTable.AllowOnAccount
                join userCustTable
                    where  userMCRCustTable.CustTable == userCustTable.RecId
                        && (userCustTableRecId.current()  == 0 || userCustTable.RecId == userCustTableRecId.current() )
                join custHierarchyNode
                where   custHierarchyNode.Party == userCustTable.Party
                    &&  custHierarchyNode.CustHierarchyId == _custHierarchyId
                    &&  custHierarchyNode.Role == CustHierarchyNodeRole::User
                    &&  custHierarchyNode.Type == CustHierarchyNodeType::Customer;

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideInvoiceAndDeliveryAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the values related to Invoice And Delivery group for all user in the customer hierarchy by copying data from the admin.
    /// </summary>
    /// <param name = "_custHierarchyId">Customer hierarchy id.</param>
    /// <param name = "_userCustTableRecId">CustTable RecId of a concrete user to update.</param>
    /// <param name = "_selectedAdmin">CustTable RecId of a admin to copy properties from.</param>
    private static void overrideInvoiceAndDeliveryAttributes(CustHierarchyId _custHierarchyId, List _userCustTableRecId, RecId _selectedAdmin)
    {
        CustHierarchyNode   custHierarchyNode;
        CustTable           userCustTable;
         
        CustTable adminCustTable = CustTable::findRecId(_selectedAdmin);

        if (adminCustTable)
        {
            ListEnumerator userCustTableRecId = _userCustTableRecId.getEnumerator();

            while (userCustTableRecId.moveNext())
            {
                ttsbegin;

                update_recordset userCustTable
                setting
                    InvoiceAccount = adminCustTable.InvoiceAccount,
                    TaxGroup = adminCustTable.TaxGroup,
                    OverrideSalesTax = adminCustTable.OverrideSalesTax,
                    VATNum = adminCustTable.VATNum,
                    InclTax = adminCustTable.InclTax,
                    InvoiceAddress = adminCustTable.InvoiceAddress,
                    DlvMode = adminCustTable.DlvMode,
                    DlvTerm = adminCustTable.DlvTerm
                join custHierarchyNode
                where   custHierarchyNode.Party == userCustTable.Party
                    &&  custHierarchyNode.CustHierarchyId == _custHierarchyId
                    &&  custHierarchyNode.Type == CustHierarchyNodeType::Customer
                    &&  (userCustTableRecId.current() == 0 || userCustTable.RecId == userCustTableRecId.current())
                    &&  userCustTable.RecId != _selectedAdmin;

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideRetailAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the values related to Retail group for all user in the customer hierarchy by copying data from the admin.
    /// </summary>
    /// <param name = "_custHierarchyId">Customer hierarchy id.</param>
    /// <param name = "_userCustTableRecId">CustTable RecId of a concrete user to update.</param>
    /// <param name = "_selectedAdmin">CustTable RecId of a admin to copy properties from.</param>
    private static void overrideRetailAttributes(CustHierarchyId _custHierarchyId, List _userCustTableRecId, RecId _selectedAdmin)
    {
        CustHierarchyNode   custHierarchyNode;
        CustTable           userCustTable;
        RetailCustTable     userRetailCustTable;
        
        CustTable adminCustTable = CustTable::findRecId(_selectedAdmin);

        if (adminCustTable)
        {
            RetailCustTable adminRetailCustTable = RetailCustTable::find(adminCustTable.AccountNum);
            ListEnumerator userCustTableRecId = _userCustTableRecId.getEnumerator();

            while (userCustTableRecId.moveNext())
            {
                ttsbegin;

                update_recordset userRetailCustTable
                setting
                    BlockCustomerForLoyaltyEnrollment = adminRetailCustTable.BlockCustomerForLoyaltyEnrollment,
                    OptOutPersonalization = adminRetailCustTable.OptOutPersonalization,
                    OptOutWebActivityTracking = adminRetailCustTable.OptOutWebActivityTracking,
                    receiptOption = adminRetailCustTable.receiptOption
                join userCustTable
                    where  userRetailCustTable.accountNum == userCustTable.AccountNum
                        && (userCustTableRecId.current() == 0 || userCustTable.RecId == userCustTableRecId.current())
                join custHierarchyNode
                where   custHierarchyNode.Party == userCustTable.Party
                    &&  custHierarchyNode.CustHierarchyId == _custHierarchyId
                    &&  custHierarchyNode.Type == CustHierarchyNodeType::Customer
                    &&  userCustTable.RecId != _selectedAdmin;

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdminCustTable</Name>
				<Source><![CDATA[
    public static CustTable getAdminCustTable(CustHierarchyId _custHierarchyId)
    {
        CustHierarchyNode custHierarchyNode;

        select firstonly custHierarchyNode
            where   custHierarchyNode.CustHierarchyId == _custHierarchyId
                &&  custHierarchyNode.Role == CustHierarchyNodeRole::Admin;

        CustTable adminCustTable = CustTable::findByPartyRecId(custHierarchyNode.Party);

        return adminCustTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>