<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCWValidation_LastBox</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class extends the PdsCWValidation standard functionality with added InventQty functionality.
/// </summary>
/// <remarks>
/// The additional functionality looks to determine if the catch weight qty is the last unit(s) in a given
/// dimension.
/// </remarks>
class PdsCWValidation_LastBox extends PdsCWValidation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustQtyPair</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjust the Catch Weight and order qty pair
    /// </summary>
    /// <param name="_fieldPair">
    /// The pair for which the qty is evaluated.
    /// </param>
    /// <param name="_adjustCWQty">
    /// To specify if the catch weight qty is to be adjusted as well.
    /// </param>
    /// <remarks>
    /// This method is overridden from the parent class. The new 'last box' functionality
    /// has been added to the method.
    /// </remarks>
    protected void adjustQtyPair(
        PdsCWQtyFieldPair _fieldPair,
        boolean           _adjustCWQty = false)
    {
        if (_adjustCWQty)
        {
            if (buffer.(_fieldPair.parmCWFieldId()) == 0)
            {
                buffer.(_fieldPair.parmCWFieldId())
                    = PdsCatchWeight::cwQty(this.itemId(),
                            buffer.(_fieldPair.parmQtyFieldId()));
            }
        }
        else if (_fieldPair.parmUnitFieldId())
        {
            if ((buffer.(_fieldPair.parmQtyFieldId()) == 0)
                || !_fieldPair.parmAllowQtyEdit())
            {
                if (!this.lastCWunit(_fieldPair,true))
                {
                    buffer.(_fieldPair.parmQtyFieldId())
                        = PdsCatchWeight::inventQty(this.itemId(),
                            buffer.(_fieldPair.parmCWFieldId()),
                            buffer.(_fieldPair.parmUnitFieldId()));
                }
            }
        }
        else
        {
            if ((buffer.(_fieldPair.parmQtyFieldId()) == 0)
                || !_fieldPair.parmAllowQtyEdit())
            {
                if (!this.lastCWunit(_fieldPair,false))
                {
                    buffer.(_fieldPair.parmQtyFieldId())
                        = PdsCatchWeight::inventQty(this.itemId(),
                            buffer.(_fieldPair.parmCWFieldId()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastCWunit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the value of the CW qty field is the 'Last box'
    /// </summary>
    /// <param name="_fieldPair">
    /// initiales instance of the PdsCWQtyFieldPair classes which defines the std and cw fields for a given datasource.
    /// </param>
    /// <param name="_parmUnitSet">
    /// Whether if the CW qty is the field requiring updating, default set to false, since in most cases the CW qty is the
    /// one that is changed and std qty field is the one which must be updated.
    /// </param>
    /// <returns>
    /// true, if the CW qty is all of the inventory in a given inventDim and the remaining inventory qty is within the CW qty
    /// range; otherwise false
    /// </returns>
    /// <remarks>
    /// If it is determined that the CW qty is the last material in the inventory dimension and the remaining inventory qty
    /// is within the acceptable range for the given CW qty, the remaining inventory quantity will be put in the inventqty
    /// field and the method will return true. If it is not the 'Last Box' or if the remaining inventory is outside of the
    /// range for the given CW qty no update will done.
    /// </remarks>
    public boolean lastCWunit(
        PdsCWQtyFieldPair   _fieldPair,
        boolean             _parmUnitSet)
    {
        Common                  common;
        InventOnHandQty         cwInventOnhandQty;
        InventDim               inventDimCriteria;
        InventDimParm           inventDimParm;
        InventUnitId            inventUnit,unitId;  //first var is for standard inventory unit and second of order unit
        UnitOfMeasureConverter_Product  unitOfMeasureConverter = UnitOfMeasureConverter_Product::construct();
        InventQty               qty;
        InventQty               minInventQty,maxInventQty;

        common = buffer.joinChild();
        qty  = 0;

        if (common.TableId == tableNum(InventDim))
        {
            inventDimCriteria = common;
            inventDimCriteria.clearNotActiveDim(InventDimGroupSetup::newItemId(this.itemId()));
            inventDimParm.initFromInventDim(inventDimCriteria);

            cwInventOnhandQty = InventOnHandQty::newParameters(this.itemId(), inventDimCriteria, inventDimParm);

            //since we are looking for physical invent only we do not need to go to the WHSInventReserve tables so for performance reasons we set the delay flag
            cwInventOnhandQty.parmDelayAvailabilityCalculation(true);

            if (cwInventOnhandQty && cwInventOnhandQty.pdsCWPhysicalInvent() == buffer.(_fieldPair.parmCWFieldId()))
            {
                qty = cwInventOnhandQty.physicalInvent();
            }

            if (_parmUnitSet)
            {
                unitId = buffer.(_fieldPair.parmUnitFieldId());
                inventUnit = InventTableModule::find(
                                this.itemId(),
                                ModuleInventPurchSales::Invent)
                                .UnitId;

                if (unitId != inventUnit)
                {
                    unitOfMeasureConverter.parmFromUnitOfMeasure(UnitOfMeasure::unitOfMeasureIdBySymbol(inventUnit));
                    unitOfMeasureConverter.parmToUnitOfMeasure(UnitOfMeasure::unitOfMeasureIdBySymbol(unitId));
                    unitOfMeasureConverter.parmProduct(InventTable::itemProduct(this.itemId()));

                    qty = unitOfMeasureConverter.convertValue(qty);
                    qty = decRound(qty,UnitOfMeasure::findBySymbol(unitId).DecimalPrecision);
                }
            }

            minInventQty = PdsCatchWeight::minInventQty(this.itemId(),qty);
            maxInventQty = PdsCatchWeight::maxInventQty(this.itemId(),qty);

            if (qty >= minInventQty && qty <= maxInventQty)
            {
                buffer.(_fieldPair.parmQtyFieldId()) = qty;
            }
            else
            {
                qty = 0;
            }
        }

        return qty != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method performs standard new functionality.  Overriden to make protected.
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a new instance of the PdsCWValidation_lastBox class.
    /// </summary>
    /// <returns>New instance of the PdsCWValidation_lastBox class.</returns>
    public static PdsCWValidation_lastBox construct()
    {
        return new PdsCWValidation_lastBox();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>