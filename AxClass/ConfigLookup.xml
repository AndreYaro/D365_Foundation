<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfigLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ConfigLookup
{
    FormStringControl       ctrl;

    ItemId                  firstItemId;            // itemId for first level
    InventDimId             firstItemInventDimId;   // inventDimId for first item
    ItemBOMId               firstItemBOMId;         // sub BOMid for first level
    boolean                 skipCheckUseConfigurator;

    ConfigHierarchyChoose   hierarchyChoose;
    ConfigTmpSave           tmpSave;
    FormRun                 formConfigTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>apply</Name>
				<Source><![CDATA[
    /*
    Is called from the configuration form.
    */
    void apply()
    {
        TmpConfigId tmpId = tmpSave.tmpConfigId();

        select tmpId
            where tmpId.ItemNum == 1;

        if (tmpId && ctrl && (ctrl.text()!=tmpId.ConfigId))
        {
            ctrl.pasteText(tmpId.ConfigId,false);
            ctrl.modified();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configId</Name>
				<Source><![CDATA[
    EcoResItemConfigurationName configId()
    {
        TmpConfigId tmpId = tmpSave.tmpConfigId();

        select tmpId
            where tmpId.ItemNum == 1;

        if (tmpId)
            return tmpId.ConfigId;
        else
            return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>hierarchyChoose</Name>
				<Source><![CDATA[
    ConfigHierarchyChoose hierarchyChoose()
    {
        return hierarchyChoose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the current <c>ConfigLookup</c> object.
    /// </summary>
    void init()
    {
        InventDim   inventDim = InventDim::find(firstItemInventDimId);

        hierarchyChoose.parmSiteId(inventDim.InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmFirstItemBOMId</Name>
				<Source><![CDATA[
    void initParmFirstItemBOMId(ItemBOMId _firstItemBOMId = firstItemBOMId)
    {
        if (_firstItemBOMId == firstItemBOMId)
            return;

        this.parmFirstItemBOMId(_firstItemBOMId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmVersDate</Name>
				<Source><![CDATA[
    void initParmVersDate(TransDate _versDate = hierarchyChoose.parmVersDate())
    {
        InventTable inventTable;
        InventDim   inventDim;

        if (_versDate == hierarchyChoose.parmVersDate())
            return;

        hierarchyChoose.parmVersDate(_versDate);

        inventTable = InventTable::find(firstItemId);
        inventDim   = InventDim::find(firstItemInventDimId);

        // initParmFirstItemBOMId calls this.scan()
        this.initParmFirstItemBOMId(inventTable.bomId(_versDate,
                                                      hierarchyChoose.parmVersQty(),
                                                      inventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmVersQty</Name>
				<Source><![CDATA[
    void initParmVersQty(FromQty _fromQty = hierarchyChoose.parmVersQty())
    {
        InventTable inventTable;
        InventDim   inventDim;

        if (_fromQty == hierarchyChoose.parmVersQty())
            return;

        hierarchyChoose.parmVersQty(_fromQty);

        inventTable = InventTable::find(firstItemId);
        inventDim   = InventDim::find(firstItemInventDimId);

        this.initParmFirstItemBOMId(inventTable.bomId(hierarchyChoose.parmVersDate(),
                                                      _fromQty,
                                                      inventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    void lookup()
    {
        ConfigChooseFromRoute chooseFromRoute = ConfigChooseFromRoute::newFromConfigLookup(this,ctrl);

        if (!this.parmSkipCheckUseConfigurator())
        {
            this.checkUseConfigurator();
        }

        hierarchyChoose.parmStopLevel(4);
        hierarchyChoose.scan(firstItemId,firstItemBOMId);

        chooseFromRoute.dialog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(FormStringControl _ctrl)
    {
        ctrl                    = _ctrl;

        hierarchyChoose         = ConfigHierarchyChoose::construct();
        tmpSave                 = ConfigTmpSave::construct(hierarchyChoose);

        firstItemInventDimId    = InventDim::inventDimIdBlank();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFirstItemBOMId</Name>
				<Source><![CDATA[
    ItemBOMId parmFirstItemBOMId(ItemBOMId _firstItemBOMId = firstItemBOMId)
    {
        firstItemBOMId = _firstItemBOMId;

        return firstItemBOMId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFirstItemId</Name>
				<Source><![CDATA[
    ItemId parmFirstItemId(ItemId _firstItemId = firstItemId)
    {
        firstItemId = _firstItemId;

        return firstItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFirstItemInventDimId</Name>
				<Source><![CDATA[
    InventDimId parmFirstItemInventDimId(InventDimId _firstItemInventDimId = firstItemInventDimId)
    {
        firstItemInventDimId = _firstItemInventDimId;

        return firstItemInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormConfigTable</Name>
				<Source><![CDATA[
    FormRun parmFormConfigTable(FormRun _formConfigTable = formConfigTable)
    {
        formConfigTable = _formConfigTable;

        return formConfigTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromQty</Name>
				<Source><![CDATA[
    FromQty parmFromQty(FromQty _fromQty = hierarchyChoose.parmVersQty())
    {
        return hierarchyChoose.parmVersQty(_fromQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersDate</Name>
				<Source><![CDATA[
    TransDate parmVersDate(TransDate _versDate = hierarchyChoose.parmVersDate())
    {
        return hierarchyChoose.parmVersDate(_versDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipCheckUseConfigurator</Name>
				<Source><![CDATA[
    boolean parmSkipCheckUseConfigurator(boolean _skipCheckUseConfigurator = skipCheckUseConfigurator)
    {
        skipCheckUseConfigurator = _skipCheckUseConfigurator;
        return skipCheckUseConfigurator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpSave</Name>
				<Source><![CDATA[
    ConfigTmpSave  tmpSave()
    {
        return tmpSave;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ConfigLookup construct(FormStringControl ctrl)
    {
        return new ConfigLookup(ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUseConfigurator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if configurator can be used.
    /// </summary>
    /// <returns>
    /// True if configurator can be used; otherwise, false.
    /// </returns>
    public boolean checkUseConfigurator()
    {
        InventTable inventTable = InventTable::find(firstItemId);
        InventDim   inventDim   = InventDim::find(firstItemInventDimId);
        FromQty     qtyFrom     = hierarchyChoose.parmVersQty();
        TransDate   dateFrom    = hierarchyChoose.parmVersDate();
        
        if (! inventTable.checkValid(firstItemId))
            throw error(strFmt("@SYS18686",funcName()));

        if (! inventTable.configActive() || ! inventTable.isConfigurable())
            throw error(strFmt("@SYS24988",firstItemId));

        firstItemBOMId = firstItemBOMId ? firstItemBOMId    :
                         inventTable.bomId(dateFrom,
                                           qtyFrom ? qtyFrom : inventTable.inventStandardQty(firstItemInventDimId),
                                           inventDim);

        if (! firstItemBOMId)
        {
            BOMVersion  bomVersion;

            // specific bomVersions exists - select one in order to continue - can be change later in the form.
            select firstonly bomId
                from bomVersion
                order by FromQty desc, FromDate desc
                where  bomVersion.ItemId    == firstItemId
                    && bomVersion.FromQty   <= qtyFrom
                    && bomVersion.FromDate  <= dateFrom
                    && (bomVersion.ToDate   >= dateFrom || !bomVersion.ToDate)
                    && bomVersion.Active;

            firstItemBOMId = bomVersion.bomId;
        }

        if (! firstItemBOMId)
        {
            throw error(strFmt("@SYS25028",firstItemId));
        }
        
        BOM bom;
        #macrolib.BOM

        select firstonly RecId from bom
        index hint ConfigGroupIdx
        where bom.BOMId == firstItemBOMId
            && bom.configGroupId
            && #BOMDateSelect(dateFrom);
        
        return bom.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupConfigId</Name>
				<Source><![CDATA[
    static void lookupConfigId(
        FormStringControl   _ctrl,
        ItemId              _itemId              = '',
        boolean             _useConfigurator     = true,
        TransDate           _versDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        BOMId               _bomId               = '',
        InventDimId         _inventDimId         = InventDim::inventDimIdBlank())
    {
        ConfigLookup            configLookup;

        if (!_itemId)
        {
            checkFailed("@SYS16661");
            return;
        }
        
        if (isConfigurationkeyEnabled(configurationKeyNum(config)) && _useConfigurator && InventTable::find(_itemId).isConfigurable())
        {
            configLookup = ConfigLookup::newParameters(_ctrl,_itemId,_inventDimId,_versDate,InventTable::find(_itemId).inventStandardQty(_inventDimId),_bomId);
        }

        if (configLookup && configLookup.checkUseConfigurator())
        {
            configLookup.parmSkipCheckUseConfigurator(true);
            configLookup.lookup();
        }
        else
        {
            EcoResProductVariantDimValue::lookupSimpleConfigId(
            _ctrl,
            InventTable::itemProduct(_itemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates a <c>ConfigLookup</c> object.
    /// </summary>
    /// <param name="_ctrl">
    ///    An object of type <c>FormStringControl</c>.
    /// </param>
    /// <param name="_itemId">
    ///    A string that holds the item ID.
    /// </param>
    /// <param name="_inventDimId">
    ///    A string that holds the Inventory dimension ID.
    /// </param>
    /// <param name="_versDate">
    ///    A date that holds a from date. This is used to determine which Bill of materials will be used.
    /// </param>
    /// <param name="_fromQty">
    ///    A real value that holds a from quantity. This is used to determine which Bill of materials will be
    ///    used; optional.
    /// </param>
    /// <param name="_bomId">
    ///    A string that holds the ID of a Bill of materials; optional.
    /// </param>
    /// <returns>
    ///    An <c>ConfigLookup</c> object.
    /// </returns>
    static ConfigLookup    newParameters(
        FormStringControl   _ctrl,
        ItemId              _itemId,
        InventDimId         _inventDimId,
        TransDate           _versDate,
        FromQty             _fromQty        = InventTable::find(_itemId).inventStandardQty(_inventDimId),
        BOMId               _bomId          = '')
    {
        ConfigLookup    configLookup = ConfigLookup::construct(_ctrl);

        configLookup.parmVersDate(_versDate);
        configLookup.parmFirstItemId(_itemId);
        configLookup.parmFirstItemInventDimId(_inventDimId);
        configLookup.parmFirstItemBOMId(_bomId);
        configLookup.parmFromQty(_fromQty);
        configLookup.init();

        return configLookup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>