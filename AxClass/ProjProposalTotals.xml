<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProposalTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
class  ProjProposalTotals extends TradeTotalsBase
{
    RecordSortedList    recordListProjProposalItem_Item;
    RecordSortedList    recordListProjProposalItem_SalesLine;
    RecordSortedList    recordListProjProposalEmpl;
    RecordSortedList    recordListProjProposalCost;
    RecordSortedList    recordListProjProposalRevenue;
    RecordSortedList    recordListProjProposalOnAcc;

    RecordSortedList    recordSortedListLine;

    ProjProposalJour    projProposalJour;
    ProjTable           projectTable;

    CustVendAC          invoiceAccount;
    DiscAmount          cashDisc;
    DiscAmount          endDisc;
    DiscAmount          endDiscMST;
    CostAmountProject   costValue;

    AmountCur           freeValue;

    AmountCur           balance;
    AmountMST           balanceMST;
    AmountCur           onAccountAmount;
    AmountMST           onAccountAmountMST;
    AmountMST           wipInvoicedOnAccMST;

    // <GEEW>
	//    AmountMST           totalAmountMST;
    // </GEEW>
    TaxAmountCur        taxTotal;

    RoundOff            roundOff;
    AmountCur           totalAmount;
    ProjQtyEmpl         projQtyEmpl;

    SalesTotals         salesTotals;
    SalesUpdate         specQty;

    Num                 parmNum;
    TaxProj             tax;

    SalesQty            projProposalItemQty;

    Weight              weightNotSalesOrder;
    Volume              volumeNotSalesOrder;

    AmountCur           totalAmountCashDiscOnInvoice;
    PSAContractLineNum  contractLineNum;
    ProjId              projId;
    DiscAmount          sumLineDisc;

    // <GEEU>
    ProjInvoiceParmTable    projInvoiceParmTable;
    // </GEEU>

    TaxWithholdCalculation_IN   taxWithholdCalculation;
    TaxWithhold_IN              taxWithholdIN;
    TaxAmountCur                taxWithholdTotal;

    // <GTE>
    TaxAmountCur                taxTotalGTE;
    AmountCur                   balanceGTE;
    // </GTE>

    protected ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjProposalTotals));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcProjProposalCost</Name>
				<Source><![CDATA[
    protected void calcProjProposalCost(ProjProposalCost _projProposalCost)
    {
        ProjTrans projTrans = ProjTrans::newProjProposalCost(_projProposalCost);
        balance += projTrans.transTurnover();
        costValue += projTrans.transCostMST();
        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            balanceGTE += projTrans.transTurnoverGTE();
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProjProposalRevenue</Name>
				<Source><![CDATA[
    protected void calcProjProposalRevenue(ProjProposalRevenue _projProposalRevenue)
    {
        ProjTrans projTrans = ProjTrans::newProjProposalRevenue(_projProposalRevenue);
        balance += projTrans.transTurnover();
        costValue += projTrans.transCostMST();
        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            balanceGTE += projTrans.transTurnoverGTE();
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProjProposalEmpl</Name>
				<Source><![CDATA[
    protected void calcProjProposalEmpl(ProjProposalEmpl _projProposalEmpl)
    {
        ProjTrans projTrans = ProjTrans::newProjProposalEmpl(_projProposalEmpl);
        balance += projTrans.transTurnover();
        costValue += projTrans.transCostMST();
        projQtyEmpl += projTrans.qty();
        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            balanceGTE += projTrans.transTurnoverGTE();
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProjProposalItem</Name>
				<Source><![CDATA[
    protected void calcProjProposalItem(ProjProposalItem _projProposalItem)
    {
        ProjTrans projTrans = ProjTrans::newProjProposalItem(_projProposalItem);
        InventTable inventTable = InventTable::find(projTrans.itemId());
        balance             += projTrans.transTurnover();
        costValue           += projTrans.transCostMST();
        weightNotSalesOrder += projTrans.qty() * inventTable.NetWeight;
        volumeNotSalesOrder += projTrans.qty() * inventTable.UnitVolume;
        projProposalItemQty += _projProposalItem.qty();
        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            balanceGTE += projTrans.transTurnoverGTE();
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProjProposalOnAcc</Name>
				<Source><![CDATA[
    protected void calcProjProposalOnAcc(ProjProposalOnAcc _projProposalOnAcc)
    {
        ProjTrans projTrans = ProjTrans::newProjProposalOnAcc(_projProposalOnAcc);
        balance             += projTrans.transTurnover();
        onAccountAmount     += projTrans.transTurnover();
        onAccountAmountMST  += projTrans.transTurnoverMST();

        ProjOnAccTrans projOnAccTrans = ProjOnAccTrans::find(_projProposalOnAcc.TransId);
        ProjTable projTableLocal = projOnAccTrans.projTable();
        ProjLedgerStatusOnAcc onAccLedgerStatus = ProjRevRecHelper::getOnAccLedgerStatusForProposalOnAcc(projTableLocal, _projProposalOnAcc, projOnAccTrans);
        
        if (onAccLedgerStatus == ProjLedgerStatusOnAcc::BalanceSheet)
        {
            wipInvoicedOnAccMST += projTrans.transTurnoverMST();
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            balanceGTE += projTrans.transTurnoverGTE();
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIndirectComponentTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the totals for the indirect cost components.
    /// </summary>
    /// <param name = "_indirectComponentTrans">A <c>PSAIndirectComponentTrans</c> record for which totals will be calculated.</param>
    /// <param name = "_projProposalEmpl">A <c>ProjProposalEmpl</c> record.</param>
    protected void calcIndirectComponentTrans(PSAIndirectComponentTrans _indirectComponentTrans, ProjProposalEmpl _projProposalEmpl)
    {
        if (_indirectComponentTrans.RecId)
        {
            ProjTrans projTrans = ProjTrans::psaNewProjEmplIndirecTrans(_indirectComponentTrans);
            AmountCur turnOver = projTrans.transTurnover();

            boolean isBillingRule = ProjInvoiceTable::find(PSAContractLineItems::find(_projProposalEmpl.PSAContractLineNum).ProjInvoiceProjId).PSAContractLines;

            boolean isIndirectCostInclude;
            if (isBillingRule)
            {
                isIndirectCostInclude = PSAContractLineItems::find(_projProposalEmpl.PSAContractLineNum).IncludeIndirectCost;
            }
            
            if (!isBillingRule || isIndirectCostInclude)
            {
                PSAIndirectCompoundingSetup psaIndirectCompoundingSetup = PSAIndirectCompoundingSetup::validCompoundingSetup(_indirectComponentTrans.IndirectComponentGroup,
                                                                                                                    _indirectComponentTrans.IndirectComponentId,
                                                                                                                    _indirectComponentTrans.TransDate);

                // Description: invoice value for credit note
                if ((_projProposalEmpl.qty() < 0 && turnOver > 0 && psaIndirectCompoundingSetup.InvoiceRate > 0)
                    || (_projProposalEmpl.qty() > 0 && turnOver < 0 && psaIndirectCompoundingSetup.InvoiceRate > 0)
                    || (_projProposalEmpl.qty() < 0 && turnOver < 0 && psaIndirectCompoundingSetup.InvoiceRate < 0)
                    || (_projProposalEmpl.qty() > 0 && turnOver > 0 && psaIndirectCompoundingSetup.InvoiceRate < 0))
                {
                    balance += -turnOver;
                    costValue += -turnOver;
                }
                else
                {
                    balance += turnOver;
                    costValue += turnOver;
                }
            }
            else
            {
                if (isBillingRule)
                {
                    if (isIndirectCostInclude)
                    {
                        // Description: invoice value for credit note
                        if (_projProposalEmpl.qty() < 0 && turnOver > 0)
                        {
                            balance += -turnOver;
                            costValue += -turnOver;
                        }
                        else
                        {
                            balance += turnOver;
                            costValue += turnOver;
                        }
                    }
                }
                else
                {
                    // Description: invoice value for credit note
                    if ((_projProposalEmpl.qty() < 0 && turnOver > 0) || (_projProposalEmpl.qty() > 0 && turnOver < 0))
                    {
                        balance += -turnOver;
                        costValue += -turnOver;
                    }
                    else
                    {
                        balance += turnOver;
                        costValue += turnOver;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSalesTotalsCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sales totals. 
    /// </summary>
    protected void calcSalesTotalsCost()
    {
        balance     += salesTotals.totalBalance();
        costValue   += salesTotals.totalCostValue();
        sumLineDisc += salesTotals.totalLineDisc();

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            balanceGTE = balance;
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        ProjProposalItem projProposalItem_SalesOrder;
        ProjProposalItem projProposalItem_Item;
        ProjProposalEmpl projProposalEmpl;
        ProjProposalCost projProposalCost;
        ProjProposalRevenue projProposalRevenue;
        ProjProposalOnAcc projProposalOnAcc;

        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(methodStr(ProjProposalTotals, calc)))
        {

            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                taxTotal = this.getGTETaxTotal();
            }
            // </GTE>

            select firstonly projProposalItem_SalesOrder
            where projProposalItem_SalesOrder.ProposalId == projProposalJour.ProposalId    &&
                  projProposalItem_SalesOrder.ItemType   == ProjItemType::SalesOrder;

            salesTotals = SalesTotals::construct(projProposalJour);
            if (salesTotals is SalesTotals_Proj
            && TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Project))
            {
                SalesTotals_Proj salesTotals_Proj = salesTotals;
                salesTotals_Proj.parmProjInvoiceParmTable(projInvoiceParmTable);
            }
            if (projProposalItem_SalesOrder)
            {
                salesTotals.calc();
                recordListProjProposalItem_SalesLine  = salesTotals.recordSortedListLine();

                this.calcSalesTotalsCost();
            }

            int calcProjProposalCostCallCount = 0;
            while select projProposalCost
            where projProposalCost.ProposalId == projProposalJour.ProposalId
            {
                calcProjProposalCostCallCount++;
                recordListProjProposalCost.ins(projProposalCost);
                this.calcProjProposalCost(projProposalCost);
            }
            activityContext.addCustomProperty('calcProjProposalCostCallCount', any2Str(calcProjProposalCostCallCount));

            int projProposalRevenueCount = 0;
            int calcProjProposalRevenueCallCount = 0;
            while select projProposalRevenue
            where projProposalRevenue.ProposalId == projProposalJour.ProposalId
            {
                projProposalRevenueCount++;

                if (projProposalRevenue.IsReleased == NoYes::Yes)
                {
                    ProjRevenueTransSale projRevenueTransSaleLoc;
                    ProjProposalRevenueDetail projProposalRevenueDetailLoc;

                    select firstonly projRevenueTransSaleLoc
                    exists join projProposalRevenueDetailLoc
                        where projProposalRevenueDetailLoc.SaleRefRecId == projRevenueTransSaleLoc.RecId
                           && projProposalRevenueDetailLoc.ProposalRefRecId == projProposalRevenue.RecId;

                    if (projRevenueTransSaleLoc.canBeMarkedForCreditNote())
                    {
                        continue;
                    }
                }

                calcProjProposalRevenueCallCount++;
                recordListProjProposalRevenue.ins(projProposalRevenue);
                this.calcProjProposalRevenue(projProposalRevenue);
            }
            activityContext.addCustomProperty('projProposalRevenueCount', any2Str(projProposalRevenueCount));
            activityContext.addCustomProperty('calcProjProposalRevenueCallCount', any2Str(calcProjProposalRevenueCallCount));

            int calcProjProposalEmplCallCount = 0;
            while select projProposalEmpl
            where projProposalEmpl.ProposalId == projProposalJour.ProposalId
            {
                calcProjProposalEmplCallCount++;
                recordListProjProposalEmpl.ins(projProposalEmpl);
                this.calcProjProposalEmpl(projProposalEmpl);
            }
            activityContext.addCustomProperty('calcProjProposalEmplCallCount', any2Str(calcProjProposalEmplCallCount));

            PSAIndirectComponentTrans tIndirectComponentTrans;

            // Add indirect component amount
            int calcIndirectComponentTransCallCount = 0;
            while select tIndirectComponentTrans
                join projProposalEmpl
               where projProposalEmpl.ProposalId        == projProposalJour.ProposalId   &&
                     tIndirectComponentTrans.TransId    == projProposalEmpl.TransId      &&
                     tIndirectComponentTrans.IndirectComponentType == PSAIndirectComponentType::Invoice &&
                     tIndirectComponentTrans.ProjFundingSource     == projProposalJour.FundingSource
            {
                calcIndirectComponentTransCallCount++;
                this.calcIndirectComponentTrans(tIndirectComponentTrans, projProposalEmpl);
            }
            activityContext.addCustomProperty('calcIndirectComponentTransCallCount', any2Str(calcIndirectComponentTransCallCount));

            int calcProjProposalItemCallCount = 0;
            while select projProposalItem_Item
            where   projProposalItem_Item.ProposalId == projProposalJour.ProposalId     &&
                   (projProposalItem_Item.ItemType   == ProjItemType::Project           ||
                    projProposalItem_Item.ItemType   == ProjItemType::PurchOrder        ||
                    projProposalItem_Item.ItemType   == ProjItemType::VendorInvoice     ||
                    projProposalItem_Item.ItemType   == ProjItemType::InventJournal     ||
                    projProposalItem_Item.ItemType   == ProjItemType::Production        ||
                    projProposalItem_Item.ItemType   == ProjItemType::ProdLine          ||
                    projProposalItem_Item.ItemType   == ProjItemType::BeginningBalance)
            {
                calcProjProposalItemCallCount++;
                recordListProjProposalItem_Item.ins(projProposalItem_Item);
                this.calcProjProposalItem(projProposalItem_Item);
            }
            activityContext.addCustomProperty('calcProjProposalItemCallCount', any2Str(calcProjProposalItemCallCount));

            int calcProjProposalOnAccCallCount = 0;
            while select projProposalOnAcc
            where projProposalOnAcc.ProposalId == projProposalJour.ProposalId
            {
                calcProjProposalOnAccCallCount++;
                recordListProjProposalOnAcc.ins(projProposalOnAcc);
                this.calcProjProposalOnAcc(projProposalOnAcc);
            }
            activityContext.addCustomProperty('calcProjProposalOnAccCallCount', any2Str(calcProjProposalOnAccCallCount));

            // Calculate the balance in company currency for use in the margin and ratio calculations
            balanceMST  = CurrencyExchangeHelper::mstAmount(balance, this.projInvoiceCurrency(), this.projInvoiceDate(), Currency::noYes2UnknownNoYes(salesTotals.triangulation()), this.projInvoiceExchRate(), salesTotals.exchRateSecondary());

            endDisc    = salesTotals.totalEndDisc();

            // Calculate the total discount in company currency for use in the margin and ratio calculations
            endDiscMST = CurrencyExchangeHelper::mstAmount(endDisc, this.projInvoiceCurrency(), this.projInvoiceDate(), Currency::noYes2UnknownNoYes(salesTotals.triangulation()), this.projInvoiceExchRate(), salesTotals.exchRateSecondary());

            SalesCalcTax salesCalcTax = SalesCalcTax::construct(projProposalJour);

            boolean isGTEEnabled = TaxSolutionScopeIntegrationUtil::isCompanyEnabled();
            if (!isGTEEnabled && this.isTaxCalcRequired(projProposalJour.ProposalId))
            {
                //<GEEU>
                if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
                {
                    salesCalcTax.projInvoiceParmTable(this.projInvoiceParmTable(projInvoiceParmTable));
                }
                //</GEEU>

                taxTotal = salesCalcTax.calcTax(this);
                this.tax(salesCalcTax.tax());
            }
            else
            {
                salesCalcTax.tax(TaxCalculationEmpty::getInstance(this));
                TaxProj taxProj = new TaxProj(salesCalcTax);
                this.tax(taxProj);

                // <GTE>
                if (isGTEEnabled)
                {
                    balance  = balanceGTE;
                }
                else
                {
                    // </GTE>
                    taxTotal = 0;
                    // <GTE>
                }
                // </GTE>
            }

            // <GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                taxWithholdIN    = new TaxWithhold_IN();
                taxWithholdTotal = salesCalcTax.calcWithholdTax_IN(this);
                this.taxWithholdCalculation_IN(salesCalcTax.taxWithholdCalculation_IN());

                if (taxWithholdCalculation != null)
                {
                    taxWithholdIN.tmpTaxWithholdWorkTrans(taxWithholdCalculation.tmpTaxWithholdWorkTrans());
                    taxWithholdIN.loadTaxWithholdRegulation(taxWithholdIN.tmpTaxWithholdWorkTrans());
                }
                }
            // </GIN>

            totalAmount = balance + taxTotal - endDisc + salesTotals.totalMarkup();

            totalAmountCashDiscOnInvoice = totalAmount;

            /* Round Off */
            if (totalAmount != 0)
            {
                roundOff        = this.roundedOffTotalAmount() - totalAmount;
                totalAmount     = this.roundedOffTotalAmount();
            }

            invoiceAccount  = projProposalJour.InvoiceAccount;

            CustTable custTable = CustTable::find(invoiceAccount);

            if (custTable.CreditMax)
            {
                freeValue   = custTable.CreditMax-
                          custTable.balanceMST() -
                          CurrencyExchangeHelper::mstAmount(totalAmount, projProposalJour.CurrencyId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            }

            cashDisc        = this.projcashDiscAmount();

            totalAmountCashDiscOnInvoice = totalAmountCashDiscOnInvoice - cashDisc;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxCalcRequired</Name>
				<Source><![CDATA[
    private boolean isTaxCalcRequired(ProjProposalId _projProposalId)
    {
        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Project))
        {
            return true;
        }

        boolean             ret;
        ProjProposalEmpl    projProposalEmpl;

        select firstonly RecId from projProposalEmpl
            where projProposalEmpl.ProposalId == _projProposalId
                && (projProposalEmpl.TaxGroupId != '' && projProposalEmpl.TaxItemGroupId != '');

        ret = projProposalEmpl.RecId != 0;

        if (!ret)
        {
            ProjProposalCost    projProposalCost;

            select firstonly RecId from projProposalCost
                where projProposalCost.ProposalId == _projProposalId
                    && (projProposalCost.TaxGroupId != '' && projProposalCost.TaxItemGroupId != '');

            ret = projProposalCost.RecId != 0;

            if (!ret)
            {
                ProjProposalItem    projProposalItem;

                select firstonly RecId from projProposalItem
                    where projProposalItem.ProposalId == _projProposalId
                        && (projProposalItem.TaxGroupId != '' && projProposalItem.TaxItemGroupId != '');

                ret = projProposalItem.RecId != 0;

                if (!ret)
                {
                    ProjProposalRevenue projProposalRevenue;

                    select firstonly RecId from projProposalRevenue
                        where projProposalRevenue.ProposalId == _projProposalId
                            && (projProposalRevenue.TaxGroupId != '' && projProposalRevenue.TaxItemGroupId != '');

                    ret = projProposalRevenue.RecId != 0;

                    if (!ret)
                    {
                        ProjProposalOnAcc   projProposalOnAcc;

                        select firstonly RecId from projProposalOnAcc
                            where projProposalOnAcc.ProposalId == _projProposalId
                                && (projProposalOnAcc.TaxGroupId != '' && projProposalOnAcc.TaxItemGroupId != '');

                        ret = projProposalOnAcc.RecId != 0;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscDate</Name>
				<Source><![CDATA[
    public DiscDate cashDiscDate()
    {
        // Record
        DiscDate        cashDiscDate   = dateNull();

        if (projProposalJour.CashDiscCode)
        {
            cashDiscDate = CashDisc::find(projProposalJour.CashDiscCode).discDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }
        else
        {
            cashDiscDate = dateNull();
        }

        return cashDiscDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTransitDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all transit document attached to the transaction.
    /// </summary>
    public void deleteTransitDocuments()
    {
        ITaxableDocument    taxableDocument;

        TaxableDocumentDescriptor despAccTrans = this.parmTaxableDocumentDescriptorAccTrans(); 
        taxableDocument  = TaxableDocumentObject::construct(despAccTrans);
        TaxBusinessService::deleteTaxDocument(taxableDocument);
        TaxEngineProjOnAcctTransHeader::deleteByProjProposalJour(projProposaljour);

        TaxableDocumentDescriptor despRevenueTrans = this.parmTaxableDocDescriptorRevenueTrans();
        taxableDocument  = TaxableDocumentObject::construct(despRevenueTrans);
        TaxBusinessService::deleteTaxDocument(taxableDocument);
        TaxEngineProjRevenueTransHeader::deleteByProjProposalJour(projProposaljour);
        
        TaxableDocumentDescriptor despCostTrans = this.parmTaxableDocDescriptorCostTrans();
        taxableDocument  = TaxableDocumentObject::construct(despCostTrans);
        TaxBusinessService::deleteTaxDocument(taxableDocument);
        TaxEngineProjCostTransHeader::deleteByProjProposalJour(projProposaljour);
        
        TaxableDocumentDescriptor despItemSOTrans = this.parmTaxableDocDescriptorItemSOTrans();
        taxableDocument  = TaxableDocumentObject::construct(despItemSOTrans);
        TaxBusinessService::deleteTaxDocument(taxableDocument);
        TaxEngineProjItemSOTransHeader::deleteByProjProposalJour(projProposaljour);

        TaxableDocumentDescriptor despItemTrans = this.parmTaxableDocDescriptorItemTrans();
        taxableDocument  = TaxableDocumentObject::construct(despItemTrans);
        TaxBusinessService::deleteTaxDocument(taxableDocument);
        TaxEngineProjItemTransHeader::deleteByProjProposalJour(projProposaljour);

        TaxableDocumentDescriptor despEmplTrans = this.parmTaxableDocDescriptorEmplTrans();
        taxableDocument  = TaxableDocumentObject::construct(despEmplTrans);
        TaxBusinessService::deleteTaxDocument(taxableDocument);
        TaxEngineProjEmplTransHeader::deleteByProjProposalJour(projProposaljour);
        
        TaxableDocumentDescriptor despRevenueSubTrans = this.parmTaxableDocDescriptorRevenueSubTrans();
        taxableDocument  = TaxableDocumentObject::construct(despRevenueSubTrans);
        TaxBusinessService::deleteTaxDocument(taxableDocument);
        TaxEngineProjRevenueSubTransHeader::deleteByProjProposalJour(projProposaljour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTransAmount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the custTrans amount.
    /// </summary>
    /// <returns>
    ///   The invoiceAmount subtracted of retained tax amount in transactional currency.
    /// </returns>
    public AmountCur custTransAmount_BR()
    {
        return this.projInvoiceAmount() - tax.totalTaxAmountRetained_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFields</Name>
				<Source><![CDATA[
    public container displayFields(container fields = conNull())
    {
        int         maxPos          = 21;
        int         pos             = 1;
        container   displayFields;

        pos = 1;

        while (pos <= maxPos)
        {
            displayFields += [pos];
            pos++;
        }

        if (conLen(fields) == 0)
        {
            fields = displayFields;
        }

        pos = 1;

        while (pos <= conLen(fields)) // conlen(fields))
        {
            switch (pos)  //conpeek(fields, pos))
            {
                case ProjProposalTotals::posHours()                : displayFields = conPoke(displayFields, ProjProposalTotals::posHours()                 , this.projhours());                       break;
                case ProjProposalTotals::posCashDisc()             : displayFields = conPoke(displayFields, ProjProposalTotals::posCashDisc()              , this.projInvoiceCashDisc());             break;
                case ProjProposalTotals::posCostValue()            : displayFields = conPoke(displayFields, ProjProposalTotals::posCostValue()             , this.projInvoiceCostValue());            break;
                case ProjProposalTotals::posContributionMargen()   : displayFields = conPoke(displayFields, ProjProposalTotals::posContributionMargen()    , this.projInvoiceContributionMargin());   break;
                case ProjProposalTotals::posContributionRatio()    : displayFields = conPoke(displayFields, ProjProposalTotals::posContributionRatio()     , this.projInvoiceContributionRatio());    break;
                case ProjProposalTotals::posCurrencyCode()         : displayFields = conPoke(displayFields, ProjProposalTotals::posCurrencyCode()          , this.projInvoiceCurrency());             break;
                case ProjProposalTotals::posExchRate()             : displayFields = conPoke(displayFields, ProjProposalTotals::posExchRate()              , this.projInvoiceExchRate());             break;
                case ProjProposalTotals::posCreditMax()            : displayFields = conPoke(displayFields, ProjProposalTotals::posCreditMax()             , this.projInvoiceCreditMax());            break;
                case ProjProposalTotals::posFreeValue()            : displayFields = conPoke(displayFields, ProjProposalTotals::posFreeValue()             , this.projInvoiceFreeValue());            break;
                case ProjProposalTotals::posSumTax()               : 
                    // <GTE>
                    if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && this.taxTotalGTE() != 0)
                    {
                        displayFields = conPoke(displayFields, ProjProposalTotals::posSumTax(), this.taxTotalGTE()); break;
                    }
                    else
                    {
                        // </GTE>
                        displayFields = conPoke(displayFields, ProjProposalTotals::posSumTax(), this.projInvoiceTaxTotal()); break;
                        // <GTE>
                    }
                    // </GTE>

                case ProjProposalTotals::posInvoiceRoundOff()      : displayFields = conPoke(displayFields, ProjProposalTotals::posInvoiceRoundOff()       , this.projInvoiceRoundOff());             break;

                case ProjProposalTotals::posInvoiceAmountForCashDisc() : displayFields = conPoke(displayFields, ProjProposalTotals::posInvoiceAmountForCashDisc() , this.projInvoiceTotalAmountCashDiscOnInvoice()); break;

                case ProjProposalTotals::posInvoiceAmount()        : displayFields = conPoke(displayFields, ProjProposalTotals::posInvoiceAmount()         , this.projInvoiceAmount());               break;
                case ProjProposalTotals::posMarkUp()               : displayFields = conPoke(displayFields, ProjProposalTotals::posMarkUp()                , this.projInvoiceMarkup());               break;
                case ProjProposalTotals::posBalance()              : displayFields = conPoke(displayFields, ProjProposalTotals::posBalance()               , this.projInvoiceBalance());              break;
                case ProjProposalTotals::posLineDisc()             : displayFields = conPoke(displayFields, ProjProposalTotals::posLineDisc()              , this.projInvoiceLineDisc());             break;
                case ProjProposalTotals::posItemVolume()           : displayFields = conPoke(displayFields, ProjProposalTotals::posItemVolume()            , this.projInvoiceItemVolume());           break;
                case ProjProposalTotals::posItemWeight()           : displayFields = conPoke(displayFields, ProjProposalTotals::posItemWeight()            , this.projInvoiceItemWeight());           break;
                case ProjProposalTotals::posItemQty()              : displayFields = conPoke(displayFields, ProjProposalTotals::posItemQty()               , this.projInvoiceItemQty());              break;
                case ProjProposalTotals::posEndDisc()              : displayFields = conPoke(displayFields, ProjProposalTotals::posEndDisc()               , this.projInvoiceEndDisc());              break;
                case ProjProposalTotals::posInvoiceAmountMST()     : displayFields = conPoke(displayFields, ProjProposalTotals::posInvoiceAmountMST()      , this.projInvoiceAmountMST());            break;
                case ProjProposalTotals::posWIPInvoicedOnAccMST()  : displayFields = conPoke(displayFields, ProjProposalTotals::posWIPInvoicedOnAccMST()   , this.projWIPInvoicedOnAccMST());         break;
            }

            pos++;
        }

        return displayFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupFreightAmountMST_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls method to calculate markup freight amount MST value
    /// </summary>
    /// <returns>
    /// The markup MST amount value
    /// </returns>
    public MarkupAmount markupFreightAmountMST_BR()
    {
        return salesTotals.markupFreightAmountMST_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupInsuranceAmountMST_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls method to calculate markup insurance amount value
    /// </summary>
    /// <returns>
    /// The markup insurance amount value
    /// </returns>
    public MarkupAmount markupInsuranceAmountMST_BR()
    {
        return salesTotals.markupInsuranceAmountMST_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupOthersAmountMST_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls method to calculate other markup freight amount value
    /// </summary>
    /// <returns>
    /// The other markup MST amount value
    /// </returns>
    public MarkupAmount markupOthersAmountMST_BR()
    {
        return salesTotals.markupOthersAmountMST_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjProposalJour    _projProposalJour,
                    Num                 _parmNum = '')
    {
        projProposalJour       = _projProposalJour;
        parmNum                = _parmNum;

        // <GEEU>
        #EECountryRegionCodes
        // </GEEU>

        //<GEEU>
        boolean isTaxProjInvoiceParmTableInitFlightEnabled = TaxProjInvoiceParmTableInitFlight::instance().isEnabled();
        if (!prmisDefault(_parmNum)
            && ((!isTaxProjInvoiceParmTableInitFlightEnabled
                && SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
                || (isTaxProjInvoiceParmTableInitFlightEnabled
                    && TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())))
        {
            projInvoiceParmTable = ProjInvoiceParmTable::find(_parmNum);
        }
        //</GEEU>

        recordListProjProposalItem_SalesLine    = new RecordSortedList(tableNum(ProjProposalItem   ));
        recordListProjProposalItem_Item         = new RecordSortedList(tableNum(ProjProposalItem   ));
        recordListProjProposalEmpl              = new RecordSortedList(tableNum(ProjProposalEmpl   ));
        recordListProjProposalCost              = new RecordSortedList(tableNum(ProjProposalCost   ));
        recordListProjProposalRevenue           = new RecordSortedList(tableNum(ProjProposalRevenue));
        recordListProjProposalOnAcc             = new RecordSortedList(tableNum(ProjProposalOnAcc  ));

        recordListProjProposalItem_SalesLine.sortOrder(fieldNum   (ProjProposalItem   , RecId));
        recordListProjProposalItem_Item.sortOrder(fieldNum   (ProjProposalItem   , RecId));

        recordListProjProposalEmpl.sortOrder(fieldNum   (ProjProposalEmpl   , RecId));
        recordListProjProposalCost.sortOrder(fieldNum   (ProjProposalCost   , RecId));
        recordListProjProposalRevenue.sortOrder(fieldNum(ProjProposalRevenue, RecId));
        recordListProjProposalOnAcc.sortOrder(fieldNum  (ProjProposalOnAcc  , RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderBalance</Name>
				<Source><![CDATA[
    public AmountCur orderBalance(RecId _recId)
    {
        return salesTotals.totalOrderBalance(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContractLineNum</Name>
				<Source><![CDATA[
    public PSAContractLineNum parmContractLineNum(PSAContractLineNum _contractLineNum = contractLineNum)
    {
        contractLineNum = _contractLineNum;

        return contractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = projId)
    {
        projId = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocDescriptorCostTrans</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocDescriptorCostTrans()
    {
        TaxEngineProjCostTransHeader header = TaxEngineProjCostTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(header);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocDescriptorEmplTrans</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocDescriptorEmplTrans()
    {

        TaxEngineProjEmplTransHeader header = TaxEngineProjEmplTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(header);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocDescriptorItemSOTrans</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocDescriptorItemSOTrans()
    {
        TaxEngineProjItemSOTransHeader header = TaxEngineProjItemSOTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(header);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocDescriptorItemTrans</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocDescriptorItemTrans()
    {
        TaxEngineProjItemTransHeader header = TaxEngineProjItemTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(header);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocDescriptorRevenueSubTrans</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocDescriptorRevenueSubTrans()
    {
        TaxEngineProjRevenueSubTransHeader header = TaxEngineProjRevenueSubTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(header);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocDescriptorRevenueTrans</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocDescriptorRevenueTrans()
    {
        TaxEngineProjRevenueTransHeader header = TaxEngineProjRevenueTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(header);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptorAccTrans</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptorAccTrans()
    {
        TaxEngineProjOnAcctTransHeader header = TaxEngineProjOnAcctTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(header);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets / sets taxWithhold amount.
    /// </summary>
    /// <param name="_taxWithholdAmount">
    /// taxWithholdAmount
    /// </param>
    /// <returns>
    /// taxWithholdAmount.
    /// </returns>
    public AmountCur parmTaxWithholdAmount_IN(AmountCur _taxWithholdAmount = taxWithholdTotal)
    {
        taxWithholdTotal = _taxWithholdAmount;

        return taxWithholdTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymCode</Name>
				<Source><![CDATA[
    public PaymTermId paymCode()
    {
        return projProposalJour.Payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projcashDiscAmount</Name>
				<Source><![CDATA[
    public Amount projcashDiscAmount()
    {
        Amount          amount;
        DiscPct         cashDiscPercent;

        using (TaxIntegrationTaxJurisdictionParametersContext taxIntegrationTaxJurisdictionParametersContext = TaxIntegrationTaxJurisdictionParametersContext::construct(projProposalJour.TableId, projProposalJour.RecId))
        {
            if (projProposalJour.CashDiscCode && this.projInvoiceAmount())
            {
                this.cashDiscDate();

                if (!TaxParameters::find().CashDiscOnInvoice)
                {
                    amount = CustParameters::cashDiscAmount(projProposalJour.CashDiscCode,
                                                        projProposalJour.CurrencyId,
                                                        this.projInvoiceAmount(),
                                                        this.projInvoiceAmount() - this.projInvoiceTaxTotal());
                }
            }

            if (projProposalJour.CashDiscCode && this.projInvoiceAmount() && TaxParameters::canApplyCashDiscOnInvoice_ES())
            {
                cashDiscPercent = CashDisc::find(projProposalJour.CashDiscCode).Percent;
                amount = CustParameters::cashDiscAmount(projProposalJour.CashDiscCode,
                                                    projProposalJour.CurrencyId,
                                                    this.projInvoiceAmount(),
                                                    this.projInvoiceAmount() - this.projInvoiceTaxTotal(),
                                                    cashDiscPercent);
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projhours</Name>
				<Source><![CDATA[
    private ProjQtyEmpl projhours()
    {
        return projQtyEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceAmount</Name>
				<Source><![CDATA[
    private AmountMST projInvoiceAmount()
    {
        return totalAmount ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceAmountMST</Name>
				<Source><![CDATA[
    AmountMST projInvoiceAmountMST()
    {
        return balanceMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceBalance</Name>
				<Source><![CDATA[
    public AmountMST projInvoiceBalance()
    {
        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceCashDisc</Name>
				<Source><![CDATA[
    public DiscAmount projInvoiceCashDisc()
    {
        return cashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceCashDiscCode</Name>
				<Source><![CDATA[
    public CashDiscCode projInvoiceCashDiscCode()
    {
        return projProposalJour.CashDiscCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceContributionMargin</Name>
				<Source><![CDATA[
    private ContributionMargin projInvoiceContributionMargin()
    {
        return this.revenue() - costValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceContributionRatio</Name>
				<Source><![CDATA[
    private ContributionRatio projInvoiceContributionRatio()
    {
        return ProjParameters::grossMarginPct(costValue,this.revenue(),this.projInvoiceContributionMargin());
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceCostValue</Name>
				<Source><![CDATA[
    public CostAmountProject projInvoiceCostValue()
    {
        return costValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceCreditMax</Name>
				<Source><![CDATA[
    private AmountMST projInvoiceCreditMax()
    {
        return CustTable::creditMax(invoiceAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode projInvoiceCurrency()
    {
        return projProposalJour.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceDate</Name>
				<Source><![CDATA[
    public InvoiceDate projInvoiceDate()
    {
        return projProposalJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceEndDisc</Name>
				<Source><![CDATA[
    public DiscAmount projInvoiceEndDisc()
    {
        return endDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceExchRate</Name>
				<Source><![CDATA[
    protected ExchRate projInvoiceExchRate()
    {
        if (ProjInvoiceCurrency::exist(projProposalJour.ProjInvoiceProjId, projProposalJour.CurrencyId) && !projProposalJour.exchRate)
        {
            return ProjInvoiceCurrency::find(projProposalJour.ProjInvoiceProjId, projProposalJour.CurrencyId).ExchRate;
        }
        else if (projProposalJour.exchRate)
        {
            return projProposalJour.exchRate;
        }
        else
        {
            return ExchangeRateHelper::exchRate(projProposalJour.CurrencyId, projProposalJour.InvoiceDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projSumLineDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// The total line discount of the invoice proposal.
    /// </summary>
    /// <returns>
    /// Total line discount of the invoice proposal.
    /// </returns>
    public DiscAmount projSumLineDisc()
    {
        return sumLineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceFreeValue</Name>
				<Source><![CDATA[
    private AmountMST projInvoiceFreeValue()
    {
        return freeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceItemQty</Name>
				<Source><![CDATA[
    public Qty projInvoiceItemQty()
    {
        return salesTotals.totalQty() +  projProposalItemQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceItemVolume</Name>
				<Source><![CDATA[
    public Volume projInvoiceItemVolume()
    {
        return salesTotals.totalVolume()+volumeNotSalesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceItemWeight</Name>
				<Source><![CDATA[
    public Weight projInvoiceItemWeight()
    {
        return salesTotals.totalWeight()+weightNotSalesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceLineDisc</Name>
				<Source><![CDATA[
    private DiscAmount projInvoiceLineDisc()
    {
        return salesTotals.totalLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceMarkup</Name>
				<Source><![CDATA[
    public MarkupAmount projInvoiceMarkup()
    {
        return salesTotals.totalMarkup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>projInvoiceParmTable</c> variable.
    /// </summary>
    /// <param name="_projInvoiceParmTable">
    /// The <c>ProjInvoiceParmTable</c> object to set the <c>projInvoiceParmTable</c> variable to; optional.
    /// </param>
    /// <returns>
    /// The <c>projInvoiceParmTable</c> variable of this class.
    /// </returns>
    public ProjInvoiceParmTable projInvoiceParmTable(ProjInvoiceParmTable _projInvoiceParmTable = null)
    {
        if (! prmisDefault(_projInvoiceParmTable))
        {
            projInvoiceParmTable = _projInvoiceParmTable;
        }
        return projInvoiceParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoicePaymDayId</Name>
				<Source><![CDATA[
    public PaymDayId projInvoicePaymDayId()
    {
        return projProposalJour.PaymDayId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceRoundOff</Name>
				<Source><![CDATA[
    public RoundOff projInvoiceRoundOff()
    {
        return roundOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceTaxTotal</Name>
				<Source><![CDATA[
    public TaxAmountCur projInvoiceTaxTotal()
    {
        return taxTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    public NoYes isCreditNote()
    {
        #ISOCountryRegionCodes

        NoYes isCreditNote = NoYes::No;

        if (ProjCreditNoteNumSeqFixFlight_PL::instance().isEnabled()
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            ProjProposalEmpl projProposalEmplLoc;
            boolean proceed = recordListProjProposalEmpl.first(projProposalEmplLoc);
            
            while (proceed)
            {
                if (projProposalEmplLoc && ProjTrans::newProjProposalEmpl(projProposalEmplLoc).transTurnover() < 0)
                {
                    isCreditNote = NoYes::Yes;
                    break;
                }

                proceed = recordListProjProposalEmpl.next(projProposalEmplLoc);
            }

            if (!isCreditNote)
            {
                ProjProposalCost projProposalCostLoc;
                proceed = recordListProjProposalCost.first(projProposalCostLoc);

                while (proceed)
                {
                    if (projProposalCostLoc && ProjTrans::newProjProposalCost(projProposalCostLoc).transTurnover() < 0)
                    {
                        isCreditNote = NoYes::Yes;
                        break;
                    }

                    proceed = recordListProjProposalCost.next(projProposalCostLoc);
                }
            }

            if (!isCreditNote)
            {
                ProjProposalRevenue projProposalRevenueLoc;
                proceed = recordListProjProposalRevenue.first(projProposalRevenueLoc);

                while (proceed)
                {
                    if (projProposalRevenueLoc && ProjTrans::newProjProposalRevenue(projProposalRevenueLoc).transTurnover() < 0)
                    {
                        isCreditNote = NoYes::Yes;
                        break;
                    }

                    proceed = recordListProjProposalRevenue.next(projProposalRevenueLoc);
                }
            }

            if (!isCreditNote)
            {
                ProjProposalOnAcc projProposalOnAccLoc;
                proceed = recordListProjProposalOnAcc.first(projProposalOnAccLoc);

                while (proceed)
                {
                    if (projProposalOnAccLoc)
                    {
                        ProjTransOnAccProposal projTransOnAccProposal = ProjTrans::newProjProposalOnAcc(projProposalOnAccLoc);
                        boolean projInvoiceDeductionNumSeqFixFlight_PLEnabled = ProjInvoiceDeductionNumSeqFixFlight_PL::instance().isEnabled();

                        if (projInvoiceDeductionNumSeqFixFlight_PLEnabled)
                        {
                            if (projTransOnAccProposal.transactionOrigin() == ProjOrigin::Deduction
                                && projTransOnAccProposal.transTurnover() > 0)
                            {
                                // Credit note of prepayment deduction.
                                isCreditNote = NoYes::Yes;
                                break;
                            }
                            else if (projTransOnAccProposal.transactionOrigin() != ProjOrigin::Deduction
                                     && projTransOnAccProposal.transTurnover() < 0)
                            {
                                // Credit note of non-deduction on-account transaction.
                                isCreditNote = NoYes::Yes;
                                break;
                            }
                        }
                        else if (projTransOnAccProposal.transTurnover() < 0)
                        {
                            isCreditNote = NoYes::Yes;
                            break;
                        }
                    }

                    proceed = recordListProjProposalOnAcc.next(projProposalOnAccLoc);
                }
            }

            if (!isCreditNote)
            {
                ProjProposalItem projProposalItemLoc;
                proceed = recordListProjProposalItem_Item.first(projProposalItemLoc);

                while (proceed)
                {
                    if (projProposalItemLoc && ProjTrans::newProjProposalItem(projProposalItemLoc).transTurnover() < 0)
                    {
                        isCreditNote = NoYes::Yes;
                        break;
                    }

                    proceed = recordListProjProposalItem_Item.next(projProposalItemLoc);
                }
            }

            if (!isCreditNote)
            {
                ProjProposalItem projProposalItemSalesLineLoc;
                proceed = recordListProjProposalItem_SalesLine.first(projProposalItemSalesLineLoc);

                while (proceed)
                {
                    if (projProposalItemSalesLineLoc && ProjTrans::newProjProposalItem(projProposalItemSalesLineLoc).transTurnover() < 0)
                    {
                        isCreditNote = NoYes::Yes;
                        break;
                    }

                    proceed = recordListProjProposalItem_SalesLine.next(projProposalItemSalesLineLoc);
                }
            }
        }
        else if (this.projInvoiceTotalAmount() < 0)
        {
            isCreditNote = NoYes::Yes;
        }

        return isCreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceTotalAmount</Name>
				<Source><![CDATA[
    public AmountMST projInvoiceTotalAmount()
    {
        if (TaxParameters::canApplyCashDiscOnInvoice_ES())
        {
            return totalAmountCashDiscOnInvoice;
        }
        else
        {
            return totalAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceTotalAmountCashDiscOnInvoice</Name>
				<Source><![CDATA[
    public AmountMST projInvoiceTotalAmountCashDiscOnInvoice()
    {
        if (TaxParameters::canApplyCashDiscOnInvoice_ES())
        {
            return totalAmountCashDiscOnInvoice;
        }
        else
        {
            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                return this.totalAmountGTE();
            }
            // </GTE>

            return totalAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projOnAccAmount</Name>
				<Source><![CDATA[
    public AmountCur projOnAccAmount()
    {
        return onAccountAmount ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projWIPInvoicedOnAccMST</Name>
				<Source><![CDATA[
    AmountMST projWIPInvoicedOnAccMST()
    {
        return wipInvoicedOnAccMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAcalcProj</Name>
				<Source><![CDATA[
    public void psAcalcProj(ProjTable _tProjTable)
    {
        SalesCalcTax           salesCalcTax;

        ProjProposalItem       projProposalItem_SalesOrder;
        ProjProposalItem       projProposalItem_Item;
        ProjProposalEmpl       projProposalEmpl;
        ProjProposalCost       projProposalCost;
        ProjProposalRevenue    projProposalRevenue;
        ProjProposalOnAcc      projProposalOnAcc;

        ProjItemTrans          projItemTrans_SalesOrder;
        ProjItemTrans          projItemTrans_Item;
        ProjEmplTrans          projEmplTrans;
        ProjCostTrans          projCostTrans;
        ProjRevenueTrans       projRevenueTrans;
        ProjOnAccTrans         projOnAccTrans;

        CustTable              custTable;

        ProjTrans              projTrans;

        using (var activityContext = logger.projOpsFinActivity().featureInstrumentationContext(methodStr(ProjProposalTotals, psAcalcProj)))
        {

            if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                return;
            }

            select firstonly ProposalId,ItemType from projProposalItem_SalesOrder
            where projProposalItem_SalesOrder.ProposalId == projProposalJour.ProposalId    &&
                  projProposalItem_SalesOrder.ItemType   == ProjItemType::SalesOrder
                join ProjTransId,ProjId from projItemTrans_SalesOrder
            where projItemTrans_SalesOrder.ProjTransId   == projProposalItem_SalesOrder.ProjTransId   &&
                  projItemTrans_SalesOrder.ProjId        == _tProjTable.ProjId;

            salesTotals = new SalesTotals_Proj(projProposalJour);

            int projProposalCostCount = 0;
            while select projProposalCost where projProposalCost.ProposalId == projProposalJour.ProposalId
                join TransId,ProjId from projCostTrans    where projCostTrans.TransId       == projProposalCost.TransId  &&
                                            projCostTrans.ProjId        == _tProjTable.ProjId
            {
                projProposalCostCount++;
                recordListProjProposalCost.ins(projProposalCost);

                projTrans    = ProjTrans::newProjProposalCost(projProposalCost);

                balance      += projTrans.transTurnover();
                costValue    += projTrans.transCostMST();
            }
            activityContext.addCustomProperty('projProposalCostCount', any2Str(projProposalCostCount));

            int projProposalRevenueCount = 0;
            while select projProposalRevenue where projProposalRevenue.ProposalId == projProposalJour.ProposalId
                join TransId,ProjId from projRevenueTrans       where projRevenueTrans.TransId    == projProposalRevenue.TransId  &&
                                                  projRevenueTrans.ProjId     == _tProjTable.ProjId
            {
                projProposalRevenueCount++;
                recordListProjProposalRevenue.ins(projProposalRevenue);
                projTrans        = ProjTrans::newProjProposalRevenue(projProposalRevenue);

                balance          += projTrans.transTurnover();
                costValue        += projTrans.transCostMST();
            }
            activityContext.addCustomProperty('projProposalRevenueCount', any2Str(projProposalRevenueCount));

            int projProposalEmplCount = 0;
            while select projProposalEmpl where projProposalEmpl.ProposalId == projProposalJour.ProposalId
                join TransId,ProjId from projEmplTrans    where projEmplTrans.TransId       == projProposalEmpl.TransId  &&
                                            projEmplTrans.ProjId        == _tProjTable.ProjId
            {
                projProposalEmplCount++;
                recordListProjProposalEmpl.ins(projProposalEmpl);

                projTrans            = ProjTrans::newProjProposalEmpl(projProposalEmpl);

                balance             += projTrans.transTurnover();
                costValue           += projTrans.transCostMST();

                projQtyEmpl         += projTrans.qty();
            }
            activityContext.addCustomProperty('projProposalEmplCount', any2Str(projProposalEmplCount));

            int projProposalItem_ItemCount = 0;
            while select projProposalItem_Item
            where   projProposalItem_Item.ProposalId == projProposalJour.ProposalId     &&
                   (projProposalItem_Item.ItemType   == ProjItemType::Project           ||
                    projProposalItem_Item.ItemType   == ProjItemType::PurchOrder        ||
                    projProposalItem_Item.ItemType   == ProjItemType::InventJournal)
                join ProjTransId,ProjId from projItemTrans_Item   where projItemTrans_Item.ProjTransId    == projProposalItem_Item.ProjTransId  &&
                                                projItemTrans_Item.ProjId         == _tProjTable.ProjId
            {
                projProposalItem_ItemCount++;
                recordListProjProposalItem_Item.ins(projProposalItem_Item);

                projTrans    = ProjTrans::newProjProposalItem(projProposalItem_Item);

                balance      += projTrans.transTurnover();
                costValue    += projTrans.transCostMST();

                projProposalItemQty += projProposalItem_Item.projItemTrans().Qty;
            }
            activityContext.addCustomProperty('projProposalItem_ItemCount', any2Str(projProposalItem_ItemCount));

            int projProposalOnAccCount = 0;
            while select ProposalId,TransId from projProposalOnAcc where projProposalOnAcc.ProposalId == projProposalJour.ProposalId
                join TransId,ProjID from projOnAccTrans     where projOnAccTrans.TransId       == projProposalOnAcc.TransId  &&
                                             projOnAccTrans.ProjID        == _tProjTable.ProjId
            {
                projProposalOnAccCount++;
                recordListProjProposalOnAcc.ins(projProposalOnAcc);

                projTrans       = ProjTrans::newProjProposalOnAcc(projProposalOnAcc);

                balance         += projTrans.transTurnover();
                onAccountAmount += projTrans.transTurnover();
            }
            activityContext.addCustomProperty('projProposalOnAccCount', any2Str(projProposalOnAccCount));

            endDisc = salesTotals.totalEndDisc();

            salesCalcTax  = SalesCalcTax::construct(projProposalJour);
            taxTotal = salesCalcTax.calcTax(this);
            this.tax(salesCalcTax.tax());

            totalAmount = balance + taxTotal - endDisc + salesTotals.totalMarkup();

            /* Round Off */
            if (totalAmount != 0)
            {
                roundOff        = this.roundedOffTotalAmount() - totalAmount;
                totalAmount     = this.roundedOffTotalAmount();
            }

            invoiceAccount  = projProposalJour.InvoiceAccount;

            custTable       = CustTable::find(invoiceAccount);

            if (custTable.CreditMax)
            {
                freeValue   = custTable.CreditMax-
                          custTable.balanceMST() -
                          CurrencyExchangeHelper::mstAmount(totalAmount, projProposalJour.CurrencyId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            }

            cashDisc        = this.projcashDiscAmount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListProjProposalcost</Name>
				<Source><![CDATA[
    public RecordSortedList recordListProjProposalcost(RecordSortedList  _recordListProjProposalcost = recordListProjProposalcost)
    {
        return _recordListProjProposalcost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListProjProposalEmpl</Name>
				<Source><![CDATA[
    public RecordSortedList recordListProjProposalEmpl(RecordSortedList  _recordListProjProposalEmpl = recordListProjProposalEmpl)
    {
        return _recordListProjProposalEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListProjProposalItem_Project</Name>
				<Source><![CDATA[
    public RecordSortedList recordListProjProposalItem_Project(RecordSortedList  _recordListProjProposalItem_Item = recordListProjProposalItem_Item)
    {
        return _recordListProjProposalItem_Item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListProjProposalItem_SalesLine</Name>
				<Source><![CDATA[
    public RecordSortedList recordListProjProposalItem_SalesLine(RecordSortedList  _recordListProjProposalItem_SalesLine = recordListProjProposalItem_SalesLine)
    {
        return _recordListProjProposalItem_SalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListProjProposalOnAcc</Name>
				<Source><![CDATA[
    public RecordSortedList recordListProjProposalOnAcc(RecordSortedList  _recordListProjProposalOnAcc = recordListProjProposalOnAcc)
    {
        return _recordListProjProposalOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListProjProposalRevenue</Name>
				<Source><![CDATA[
    public RecordSortedList recordListProjProposalRevenue(RecordSortedList  _recordListProjProposalRevenue = recordListProjProposalRevenue)
    {
        return _recordListProjProposalRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordSortedListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record sorted list of lines for which the totals object was created.
    /// </summary>
    /// <returns>
    /// A record sorted list of lines.
    /// </returns>
    public RecordSortedList recordSortedListLine()
    {
        return recordSortedListLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revenue</Name>
				<Source><![CDATA[
    AmountMST revenue()
    {
        return balanceMST - wipInvoicedOnAccMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundedOffTotalAmount</Name>
				<Source><![CDATA[
    private AmountMST roundedOffTotalAmount()
    {
        return CurrencyExchange::roundWithRuleType(
            this.projInvoiceTotalAmount(),
            projProposalJour.CurrencyId,
            CurrencyRoundingRuleType::SalesOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    public TaxProj tax(TaxProj _tax = tax)
    {
        tax = _tax;

        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTotalGTE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the amount of the total tax for the GTE.
    /// </summary>
    /// <returns>
    /// The total tax for the GTE
    /// </returns>
    public AmountCur taxTotalGTE()
    {
        return taxTotalGTE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmountGTE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the total amount for the GTE.
    /// </summary>
    /// <returns>
    /// The total amount for the GTE
    /// </returns>
    public AmountCur totalAmountGTE()
    {
        return totalAmount - taxTotal + taxTotalGTE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithhold_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets / sets taxWithhold object.
    /// </summary>
    /// <param name="_taxWithhold">
    /// Taxwithhold
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxWithhold_IN</c> class.
    /// </returns>
    public TaxWithhold_IN taxWithhold_IN(TaxWithhold_IN  _taxWithhold = taxWithholdIN)
    {
        taxWithholdIN = _taxWithhold;

        return taxWithholdIN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdCalculation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets / sets taxWithholdCalculation_IN object.
    /// </summary>
    /// <param name="_taxWithholdCalculation">
    /// TaxWithholdCalculation_IN
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxWithholdCalculation_IN</c> class.
    /// </returns>
    public TaxWithholdCalculation_IN taxWithholdCalculation_IN(TaxWithholdCalculation_IN _taxWithholdCalculation = taxWithholdCalculation)
    {
        taxWithholdCalculation = _taxWithholdCalculation;
        return taxWithholdCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFieldsServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totals and sets the fields values to be shown on the totals form.
    /// </summary>
    /// <param name="_projInvoiceProposalRecId">
    /// Record ID of a record in <c>ProjProposalJour</c> table.
    /// </param>
    /// <returns>
    /// Container of the field values to be shown on the totals form.
    /// </returns>
    public static container displayFieldsServer(RecId _projInvoiceProposalRecId)
    {
        container               con;
        XppILExecutePermission  xppILExecutePermission = new XppILExecutePermission();

        xppILExecutePermission.assert();

        con = ProjProposalTotals::displayFieldsServerIL([_projInvoiceProposalRecId]);

        CodeAccessPermission::revertAssert();

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFieldsServerIL</Name>
				<Source><![CDATA[
    static private container displayFieldsServerIL(container   _con)
    {
        ProjProposalTotals  projProposalTotals;

        projProposalTotals = new ProjProposalTotals(ProjProposalJour::findRecid(conPeek(_con,1)));

        projProposalTotals.calc();

        return projProposalTotals.displayFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGTETaxTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total tax amount
    /// </summary>
    /// <returns>
    /// Returns total tax amount
    /// </returns>
    private TaxAmount getGTETaxTotal()
    {
        ITaxableDocument            taxableDocument;
        ITaxDocument                taxDocumentObject;
        TaxAmount                   taxTotalLoc;
        ITaxDocumentMeasureValue    taxMeasureValue;
        ITaxDocumentMeasureValue    partyTaxMeasureValue;
        TaxableDocumentDescriptor   despAccTrans         = this.parmTaxableDocumentDescriptorAccTrans();
        TaxableDocumentDescriptor   despRevenueTrans     = this.parmTaxableDocDescriptorRevenueTrans();
        TaxableDocumentDescriptor   despCostTrans        = this.parmTaxableDocDescriptorCostTrans();
        TaxableDocumentDescriptor   despItemTrans        = this.parmTaxableDocDescriptorItemTrans();
        TaxableDocumentDescriptor   despEmplTrans        = this.parmTaxableDocDescriptorEmplTrans();
        TaxableDocumentDescriptor   despItemSOTrans      = this.parmTaxableDocDescriptorItemSOTrans();
        TaxableDocumentDescriptor   despRevenueSubTrans  = this.parmTaxableDocDescriptorRevenueSubTrans();

        void calcGTETaxTotal()
        {
            partyTaxMeasureValue = taxDocumentObject.getTotalTax();
            taxTotalGTE += partyTaxMeasureValue.amountTransactionCurrency();

            TaxMeasureValue = taxDocumentObject.sumByTaxAccountingProvider(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Debit);
            taxTotalLoc     += taxMeasureValue.amountTransactionCurrency();

            TaxMeasureValue = taxDocumentObject.sumByTaxAccountingProvider(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Credit);
            taxTotalLoc     -= taxMeasureValue.amountTransactionCurrency();
        }

        if (!despAccTrans.skipTaxDocument())
        {
            taxableDocument   = TaxableDocumentObject::construct(despAccTrans);
            taxDocumentObject = TaxBusinessService::calculateTax(taxableDocument);
            if (taxDocumentObject)
            {
                calcGTETaxTotal();
            }
        }

        if (!despRevenueTrans.skipTaxDocument())
        {
            taxableDocument   = TaxableDocumentObject::construct(despRevenueTrans);
            taxDocumentObject = TaxBusinessService::calculateTax(taxableDocument);
            if (taxDocumentObject)
            {
                calcGTETaxTotal();
            }
        }

        if (!despCostTrans.skipTaxDocument())
        {
            taxableDocument   = TaxableDocumentObject::construct(despCostTrans);
            taxDocumentObject = TaxBusinessService::calculateTax(taxableDocument);
            if (taxDocumentObject)
            {
                calcGTETaxTotal();
            }
        }

        if (!despItemTrans.skipTaxDocument())
        {
            taxableDocument   = TaxableDocumentObject::construct(despItemTrans);
            taxDocumentObject = TaxBusinessService::calculateTax(taxableDocument);
            if (taxDocumentObject)
            {
                calcGTETaxTotal();
            }
        }

        if (!despEmplTrans.skipTaxDocument())
        {
            taxableDocument   = TaxableDocumentObject::construct(despEmplTrans);
            taxDocumentObject = TaxBusinessService::calculateTax(taxableDocument);
            if (taxDocumentObject)
            {
                calcGTETaxTotal();
            }
        }

        if (!despItemSOTrans.skipTaxDocument())
        {
            taxableDocument   = TaxableDocumentObject::construct(despItemSOTrans);
            taxDocumentObject = TaxBusinessService::calculateTax(taxableDocument);
            if (taxDocumentObject)
            {
                calcGTETaxTotal();
            }
        }

        if (!despRevenueSubTrans.skipTaxDocument())
        {
            taxableDocument   = TaxableDocumentObject::construct(despRevenueSubTrans);
            taxDocumentObject = TaxBusinessService::calculateTax(taxableDocument);
            if (taxDocumentObject)
            {
                calcGTETaxTotal();
            }
        }

        return taxTotalLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posBalance</Name>
				<Source><![CDATA[
    public static int posBalance()
    {
        return 17;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posCashDisc</Name>
				<Source><![CDATA[
    public static int posCashDisc()
    {
        return 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posContributionMargen</Name>
				<Source><![CDATA[
    public static int posContributionMargen()
    {
        return 4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posContributionRatio</Name>
				<Source><![CDATA[
    public static int posContributionRatio()
    {
        return 5;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posCostValue</Name>
				<Source><![CDATA[
    public static int posCostValue()
    {
        return 3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posCreditMax</Name>
				<Source><![CDATA[
    public static int posCreditMax()
    {
        return 8;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posCurrencyCode</Name>
				<Source><![CDATA[
    public static int posCurrencyCode()
    {
        return 6;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posEndDisc</Name>
				<Source><![CDATA[
    public static int posEndDisc()
    {
        return 18;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posExchRate</Name>
				<Source><![CDATA[
    public static int posExchRate()
    {
        return 7;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posFreeValue</Name>
				<Source><![CDATA[
    public static int posFreeValue()
    {
        return 9;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posHours</Name>
				<Source><![CDATA[
    public static int posHours()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posInvoiceAmount</Name>
				<Source><![CDATA[
    public static int posInvoiceAmount()
    {
        return 12;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posInvoiceAmountForCashDisc</Name>
				<Source><![CDATA[
    public static int posInvoiceAmountForCashDisc()
    {
        return 12;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posInvoiceAmountMST</Name>
				<Source><![CDATA[
    public static int posInvoiceAmountMST()
    {
        return 20;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posInvoiceRoundOff</Name>
				<Source><![CDATA[
    public static int posInvoiceRoundOff()
    {
        return 11;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posItemQty</Name>
				<Source><![CDATA[
    public static int posItemQty()
    {
        return 13;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posItemVolume</Name>
				<Source><![CDATA[
    public static int posItemVolume()
    {
        return 15;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posItemWeight</Name>
				<Source><![CDATA[
    public static int posItemWeight()
    {
        return 14;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posLineDisc</Name>
				<Source><![CDATA[
    public static int posLineDisc()
    {
        return 16;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posMarkUp</Name>
				<Source><![CDATA[
    public static int posMarkUp()
    {
        return 19;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posSumTax</Name>
				<Source><![CDATA[
    public static int posSumTax()
    {
        return 10;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posWIPInvoicedOnAccMST</Name>
				<Source><![CDATA[
    public static int posWIPInvoicedOnAccMST()
    {
        return 21;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWithholdTaxLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show withhold taxes.
    /// </summary>
    /// <param name="_projProposalJour">
    /// The projproposaljour record.
    /// </param>
    /// <param name="_common">
    /// The record.
    /// </param>
    /// <param name="_callerFormRun">
    /// The instance of the <c>FormRun</c> classs.
    /// </param>
    /// <returns>
    /// The instance of the <c>FormRun</c> class.
    /// </returns>
    public static FormRun showWithholdTaxLine_IN(ProjProposalJour _projProposalJour, Common _common, FormRun _callerFormRun = null )
    {
        ProjProposalTotals projProposalTotals;

        projProposalTotals = new ProjProposalTotals(_projProposalJour);
        projProposalTotals.calc();
        return TaxWithhold_IN::showWithholdTaxes(projProposalTotals.taxWithhold_IN(), _common, _callerFormRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceItemGrossWeight</Name>
				<Source><![CDATA[
    ///<summary>
    /// Gets the project invoice item gross weight.
    ///</summary>
    ///<returns>
    /// The project invoice item gross weight.
    ///</returns>
    public GrossWeight projInvoiceItemGrossWeight()
    {
        return salesTotals.totalGrossWeight() + weightNotSalesOrder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>