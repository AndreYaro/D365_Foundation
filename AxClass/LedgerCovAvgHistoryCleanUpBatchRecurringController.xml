<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovAvgHistoryCleanUpBatchRecurringController</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>LedgerCovAvgHistoryCleanUpBatchRecurringController</c> class schedules and runs the recurring batch job responsible for
/// cleaning up days per month tables for more than a year ago.
/// </summary>
[Export(identifierStr(Dynamics.AX.Application.LedgerCovAvgBatchController))]
public final class LedgerCovAvgHistoryCleanUpBatchRecurringController extends LedgerCovAvgBatchController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(IdentifierName _className = classStr(LedgerCovAvgHistoryCleanUpBatch),
        IdentifierName _methodName = staticMethodStr(LedgerCovAvgHistoryCleanUpBatch, main),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::ScheduledBatch)
    {
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ClassDescription defaultCaption()
    {
        return "@CashManagement:LedgerCovAvgCleanUpBatchCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClassNumber</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ClassId getClassNumber()
    {
        return classNum(LedgerCovAvgHistoryCleanUpBatchRecurringController);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecurrenceData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SysRecurrenceData getRecurrenceData()
    {
        const int RecurrenceIntervalIdx = 7;
        const int RecurrenceIntervalDataIdx = 8;
        const int PerWeekAndDayOfWeek = 2;
        const int DayInMonth = 1;
        const int PerInterval = 1;

        // Schedule the recurrence to execute daily.
        TransDate startDate = DateTimeUtil::getToday(DateTimeUtil::getCompanyTimeZone());

        SysRecurrenceData recurrenceData = SysRecurrence::defaultRecurrence();
        recurrenceData = this.setRecurranceTimeZone(recurrenceData, DateTimeUtil::getCompanyTimeZone());
        recurrenceData = SysRecurrence::setRecurrenceStartDate(recurrenceData, startDate);
        recurrenceData = SysRecurrence::setRecurrenceTime(recurrenceData, str2Time('04:00:00'));
        recurrenceData = SysRecurrence::setRecurrenceNoEnd(recurrenceData);
        SysRecurrenceData tmp = conpoke(recurrenceData, RecurrenceIntervalIdx, SysRecurrenceUnit::Month);
        
        // This setup the recurrence to run on the second sunday of each month
        recurrenceData = conpoke(tmp, RecurrenceIntervalDataIdx, [PerWeekAndDayOfWeek, DayInMonth, PerInterval, WeekOfMonth::Second, WeekDays::Sunday, PerInterval]);

        recurrenceData = SysRecurrence::setRecurrenceStartDate(recurrenceData, SysRecurrence::nextDateFromToday(recurrenceData));

        return recurrenceData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildRunTimeTasks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal List getChildRunTimeTasks()
    {
        List tasks = new List(Types::Class);
        LedgerCovAvgHistoryCleanUpBatchRecurringController cleanUp = this.constructTask();

        tasks.addEnd(cleanUp);

        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructTask</Name>
				<Source><![CDATA[
    private LedgerCovAvgHistoryCleanUpBatchRecurringController constructTask()
    {
        return new LedgerCovAvgHistoryCleanUpBatchRecurringController(this.parmClassName(), this.parmMethodName(), this.parmExecutionMode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>callStaticMainMethod</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void callStaticMainMethod(Args _args)
    {
        LedgerCovAvgHistoryCleanUpBatch::main(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>