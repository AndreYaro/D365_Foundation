<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25DeleteCancelledRegisters</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>RTax25DeleteCancelledRegisters</c> used to delete cancelled tax registers.
/// </summary>
class RTax25DeleteCancelledRegisters extends RunBaseBatch implements BatchRetryable
{
    Yr              fiscalYear;
    DialogField     fiscalYearDlg;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        fiscalYear
    #ENDMACRO
    #define.JournalTransRefRecId('JournalTransRefRecId')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteRegTrans</Name>
				<Source><![CDATA[
    private void deleteRegTrans(RTax25RegType   _regType,
                                RefRecId        _journalTransRecId)
    {
        FieldId      fieldId;
        Common       common;
        ;

        common  = new SysDictTable(_regType.detachedTableId()).makeRecord();
        common.skipDeleteActions(true);
        common.skipDataMethods(true);
        common.skipDatabaseLog(true);
        fieldId = fieldName2Id(common.TableId, #JournalTransRefRecId);

        delete_from common
            where common.(fieldId) == _journalTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase  dialog =   super();
        ;

        dialog.caption("@SYP4860771");
        dialog.addText("@SYP4860773");

        dialog.addGroup("@GLS114251");
        fiscalYear      = fiscalYear ? fiscalYear : year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        fiscalYearDlg   = dialog.addFieldValue(extendedTypeStr(Yr), fiscalYear);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        ret = super();
        fiscalYear = fiscalYearDlg.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RTax25RegisterJournalTrans  journalTrans;
        int64                       progressTotal;
        RTax25RegType               regType;
        ;

        progressTotal = (select count(RecId) from RTax25RegisterJournalTrans
                             where RTax25RegisterJournalTrans.Cancelled &&
                                   (! fiscalYear || RTax25RegisterJournalTrans.FiscalYear == fiscalYear)).RecId;

        if (! progressTotal)
            return;

        this.progressInit("@SYP4860771", progressTotal, #AviFindFile);
        progress.setCount(0);
        ttsbegin;

        while select RecId, RegisterId, AssessedTaxRegisterType from journalTrans
            where journalTrans.Cancelled &&
                  (! fiscalYear || journalTrans.FiscalYear == fiscalYear)
        {
            regType = RTax25RegType::construct(RTax25RegisterTable::registerId2Type(journalTrans.RegisterId),
                                               journalTrans.AssessedTaxRegisterType);

            this.deleteRegTrans(regType, journalTrans.RecId);

            progress.incCount();
        }

        journalTrans.skipDeleteActions(true);   // to avoid deleting RTax25RegisterHideSetup
        journalTrans.skipDataMethods(true);
        journalTrans.skipDeleteMethod(true);

        delete_from journalTrans
            where journalTrans.Cancelled &&
                  (! fiscalYear || journalTrans.FiscalYear == fiscalYear);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version     = conpeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@SYP4860771";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RTax25DeleteCancelledRegisters  cancel;
        ;

        cancel = new RTax25DeleteCancelledRegisters();
        if (cancel.prompt())
        {
            cancel.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>