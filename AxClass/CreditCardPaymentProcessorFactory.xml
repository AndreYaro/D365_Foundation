<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardPaymentProcessorFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Credit card connectors factory extrinsic to <c>CreditCardProviderProcess</c>.
/// </summary>
using Retail=Microsoft.Dynamics.Retail;

class CreditCardPaymentProcessorFactory
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes credit card payment connector.
    /// </summary>
    /// <param name = "_connectorName">The name of credit card connector</param>
    /// <returns> Instance of the class implementing <c>Microsoft.Dynamics.Retail.PaymentSDK.IPaymentProcessor</c> interface. </returns>
    public Retail.PaymentSDK.Portable.IPaymentProcessor getProcessor(CreditCardConnectorName _connectorName)
    {
        System.String[] supportedProcessors = Retail.SDKManager.Portable.PaymentProcessorManager::GetSupportedProcessors();
        int length = supportedProcessors.get_Count();

        for (int i = 0; i < length; i++)
        {
            if (supportedProcessors.get_Item(i) == _connectorName)
            {
                return Microsoft.Dynamics.Retail.SDKManager.Portable.PaymentProcessorManager::GetPaymentProcessor(_connectorName);
            }
        }

        // We assume that if supplied connector name is not found in the list of supported processors,
        // then it is a test connector and we try to find it in AOT by name as a class implementing IPaymentProcessor interface and having method construct.
        SysDictClass sysDictClass = SysDictClass::newName(_connectorName);
        if (sysDictClass && sysDictClass.hasStaticMethod("construct"))
        {
            return sysDictClass.callStatic("construct");
        }

        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>