<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmProspectConvertCustomerSyncController</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class smmProspectConvertCustomerSyncController extends SysOperationServiceController
{
    private smmProspectConvertCustomerSyncDataContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeServiceParameter</Name>
				<Source><![CDATA[
    protected Object initializeServiceParameter(DictMethod _dictMethod, int _parameterIndex)
    {
        if (contract)
        {
            return contract;
        }

        return super(_dictMethod, _parameterIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    protected ClassDescription defaultCaption()
    {
        return strFmt("@SalesAndMarketing:ProspectConvertCustomerSyncCaption", contract ? contract.parmProspectId() : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleSyncProspect</Name>
				<Source><![CDATA[
    internal void scheduleSyncProspect(smmBusRelAccount _prospectId)
    {
        contract = new smmProspectConvertCustomerSyncDataContract();
        contract.parmProspectId(_prospectId);

        this.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncRelationshipType</Name>
				<Source><![CDATA[
    internal void syncRelationshipType(smmProspectConvertCustomerSyncDataContract _contract)
    {
        using (var context = SalesInstrumentationLogger::createLogger(classStr(smmProspectConvertCustomerSyncController)).salesQuotationActivities().prospectConvertCustomerSync())
        {
            if (SalesParameters::find().isD365SalesQuotationLifecycleAndProspectIntegrationEnabled())
            {
                CustCustomerV3Entity customerEntity;

                select firstonly * from customerEntity
                    where customerEntity.CustomerAccount == _contract.parmProspectId();

                context.addCustomProperty(dataEntityViewStr(CustCustomerV3Entity), int642Str(customerEntity.RecId));

                if (customerEntity)
                {
                    List records = new List(Types::Record);
                    records.addEnd(customerEntity);

                    DualWriteSyncHelper::forceSyncRecordsToCDS(records);
                }
                else
                {
                    if (_contract.parmProspectId())
                    {
                        throw error(strFmt("@SalesAndMarketing:ProspectConvertCustomerSyncRecordNotFound", _contract.parmProspectId()));
                    }
                    else
                    {
                        throw error("@SalesAndMarketing:ProspectConvertCustomerSyncRecordNotSpecified");
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static smmProspectConvertCustomerSyncController construct()
    {
        smmProspectConvertCustomerSyncController controller = new smmProspectConvertCustomerSyncController();

        controller.parmExecutionMode(SysOperationExecutionMode::ReliableAsynchronous);
        controller.parmClassName(classStr(smmProspectConvertCustomerSyncController));
        controller.parmMethodName(methodStr(smmProspectConvertCustomerSyncController, syncRelationshipType));

        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>