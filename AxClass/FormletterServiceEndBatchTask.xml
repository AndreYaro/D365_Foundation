<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormletterServiceEndBatchTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>FormletterServiceEndBatchTask</c> class ends the <c>FormletterService</c> class after all
///    journals have been created and posted when the <c>FormletterService</c> class is executed in batch
///    and uses the multithreading function.
/// </summary>
/// <remarks>
///    The <c>FormletterServiceEndBatchTask</c> class executes the <c>endPosting</c> method in the
///    <c>FormletterServiceEndBatchTask</c> class and prints journals if the print out is set to print
///    after posting.
/// </remarks>
class FormletterServiceEndBatchTask
extends FormletterBatchTask implements BatchRetryable
{
    FormLetter          formLetter;
    container           packedFormLetter;
    DocumentStatus      documentStatus;
    PurchRFQUpdateType  purchRFQUpdateType;
    ParmId              parmId;
    StartDateTime       startDateTimeUpdate;
    FormletterJournal   formletterJournal;
    Printout            printout;
    boolean             proforma;
    boolean             runningAsService;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        packedFormLetter,
        documentStatus,
        purchRFQUpdateType,
        printOut,
        parmId,
        proforma,
        startDateTimeUpdate,
        runningAsService
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a set that contains the records of the form letter journals that are posted on a specified
    ///    parameter ID.
    /// </summary>
    /// <returns>
    ///    A set that contains the records of the form letter journals that are posted on a specific
    ///    <c>ParmId</c> .
    /// </returns>
    protected Set buildJournalList()
    {
        Set     journalList;

        journalList = new Set(Types::Record);

        if (this.parmPrintOut()== Printout::After)
        {
            this.initFormletterJournal();

            if (FormletterJournalCreatedDateTimeMappedFlight::instance().isEnabled())
            {
                // Check if field is mapped
                var createdDateTimeMapped = SysDictField::isFieldMapped(
                    tableStr(FormletterJournal),
                    tableId2Name(formletterJournal.TableId),
                    fieldStr(FormletterJournal, CreatedDateTime));

                if (createdDateTimeMapped)
                {
                    while select formletterJournal
                        where formletterJournal.ParmId == parmId
                            && formletterJournal.CreatedDateTime >= startDateTimeUpdate
                    {
                        journalList.add(formletterJournal);
                    }
                }
                else
                {
                    while select formletterJournal
                        where formletterJournal.ParmId == parmId
                    {
                        journalList.add(formletterJournal);
                    }
                }
            }
            else
            {
                while select formletterJournal
                        where formletterJournal.ParmId == parmId
                            && formletterJournal.CreatedDateTime >= startDateTimeUpdate
                {
                    journalList.add(formletterJournal);
                }
            } 
        }

        return journalList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initiates the <c>formletterJournal</c> value with the table buffer for the journal that is created
    ///    by the <c>FormletterService</c> class.
    /// </summary>
    protected void initFormletterJournal()
    {
        var formLetterTypeInstance = FormletterTypeBase::singletonFromFormletterType(formletterType);
        if (formLetterTypeInstance)
        {
            formletterJournal = formLetterTypeInstance.initFormletterJournal(documentStatus);
        }
        else
        {
            throw error(strFmt("@SYS19306",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>FormletterServiceEndBatchTask</c> class.
    /// </summary>
    /// <returns>
    ///    A container that contains the current instance of the <c>FormletterServiceEndBatchTask</c> class.
    /// </returns>
    public container pack()
    {
        if (formLetter)
        {
            packedFormLetter = formLetter.pack();
        }

        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus parmDocumentStatus(DocumentStatus _documentStatus = documentStatus)
    {
        documentStatus = _documentStatus;
        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormLetter</Name>
				<Source><![CDATA[
    public FormLetter parmFormLetter(FormLetter _formLetter = formLetter)
    {
        formLetter = _formLetter;

        return formLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmId</Name>
				<Source><![CDATA[
    public ParmId parmParmId(ParmId _parmId = parmId)
    {
        parmId = _parmId;

        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintOut</Name>
				<Source><![CDATA[
    public Printout parmPrintOut(Printout _printout = printout)
    {
        printout = _printout;

        return printout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProforma</Name>
				<Source><![CDATA[
    public boolean parmProforma(boolean _proforma = proforma)
    {
        proforma = _proforma;

        return proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunningAsService</Name>
				<Source><![CDATA[
    public boolean parmRunningAsService(boolean _runningAsService = runningAsService)
    {
        runningAsService = _runningAsService;
        return runningAsService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDateTimeUpdate</Name>
				<Source><![CDATA[
    public StartDateTime parmStartDateTimeUpdate(StartDateTime _startDateTimeUpdate = startDateTimeUpdate)
    {
        startDateTimeUpdate = _startDateTimeUpdate;

        return startDateTimeUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        FormletterService   formletterService;

        formletterService = FormletterService::newFormletterService(packedFormletter,this.parmDocumentStatus(),this.parmFormletterType());
        formletterService.setStartDateTimeUpdate(this.parmStartDateTimeUpdate());
        formletterService.setJournalList(this.buildJournalList());
        formletterService.parmFormLetterContract(formLetterContract);
        formletterService.parmEndBatchPrintFlag(true);
        formletterService.endpostingMultithread();

        info("@SYS119229");
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="_packedClass" /> parameter to the current instance of the
    ///    <c>FormLetterMultiThread</c> class.
    /// </summary>
    /// <param name="_packedClass">
    ///    The container to use to deserialize the instance.
    /// </param>
    /// <returns>
    ///    true if the deserialization was successful; otherwise, false.
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);
        container       packedBase;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedBase] = _packedClass;
                return super(packedBase);
            default :
                return super(_packedClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FormletterServiceEndBatchTask construct()
    {
        return new FormletterServiceEndBatchTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a description for the <c>FormletterServiceEndBatchTask</c> class.
    /// </summary>
    /// <returns>
    ///    A label that contains the description for the <c>FormletterServiceEndBatchTask</c> class.
    /// </returns>
    /// <remarks>
    ///    The description is used by the batch framework as a job description.
    /// </remarks>
    protected static ClassDescription description()
    {
        return "@SYS116260";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>FormletterServiceEndBatchTask</c> class.
    /// </summary>
    /// <param name="_formLetter">
    /// A <c>Formletter</c> object to use in the <c>FormletterServiceEndBatchTask</c> object.
    /// </param>
    /// <param name="_formletterType">
    /// A <c>FormletterType</c> enumeration value to use in the <c>FormletterServiceEndBatchTask</c> object.
    /// </param>
    /// <param name="_documentStatus">
    /// A <c>DocumentType</c> enumeration value to use in the <c>FormletterServiceEndBatchTask</c> object.
    /// </param>
    /// <param name="_parmId">
    /// A <c>ParmId</c> value to use in the <c>FormletterServiceEndBatchTask</c> object.
    /// </param>
    /// <param name="_startDateTimeUpdate">
    /// A <c>StartDateTime</c> value to use in the <c>FormletterServiceEndBatchTask</c> object.
    /// </param>
    /// <param name="_runningAsService">
    /// A Boolean value that indicates whether the class is running under the <c>SysOperation</c> framework.
    /// </param>
    /// <param name="_formLetterContract">
    /// The <c>FormletterContract</c> object to use in the <c>FormletterServiceEndBatchTask</c> object.
    /// </param>
    /// <returns>
    /// The constructed <c>FormletterServiceEndBatchTask</c> object.
    /// </returns>
    public static FormletterServiceEndBatchTask newFormLetter(FormLetter            _formLetter,
                                                              FormletterType        _formletterType,
                                                              DocumentStatus        _documentStatus,
                                                              ParmId                _parmId,
                                                              StartDateTime         _startDateTimeUpdate,
                                                              boolean               _runningAsService,
                                                              FormLetterContract    _formLetterContract)
    {
        FormletterServiceEndBatchTask  formletterServiceEndBatchTask;

        formletterServiceEndBatchTask = FormletterServiceEndBatchTask::construct();

        formletterServiceEndBatchTask.parmFormLetter(_formLetter);
        if (_formLetter)
        {
            formletterServiceEndBatchTask.parmPrintOut(_formLetter.printout());
            formletterServiceEndBatchTask.parmProforma(_formLetter.proforma());
        }
        else
        {
            formletterServiceEndBatchTask.parmPrintOut(_formLetterContract.parmPrintOut());
            formletterServiceEndBatchTask.parmProforma(_formLetterContract.parmProforma());
        }

        formletterServiceEndBatchTask.parmFormletterType(_formletterType);
        formletterServiceEndBatchTask.parmDocumentStatus(_documentStatus);
        formletterServiceEndBatchTask.parmParmId(_parmId);
        formletterServiceEndBatchTask.parmStartDateTimeUpdate(_startDateTimeUpdate);
        formletterServiceEndBatchTask.parmRunningAsService(_runningAsService);
        formletterServiceEndBatchTask.parmFormletterContract(_formLetterContract);
        return formletterServiceEndBatchTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>