<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCustomerV3EntityRecordIdSelectorCustDefaultLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportMetadataAttribute(identifierStr(TableName), tableStr(CustDefaultLocation))]
[ExportMetadataAttribute(identifierStr(EntityName), dataentityviewstr(CustCustomerV3Entity))]
[ExportAttribute(identifierstr(Dynamics.AX.Application.IBusinessEventsTableToEntityRecordIdSelector))]
internal final class CustCustomerV3EntityRecordIdSelectorCustDefaultLocation implements IBusinessEventsTableToEntityRecordIdSelector
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEntityRecordIdsImpactedByTableChange</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public List getEntityRecordIdsImpactedByTableChange(BusinessEventsDefinition _eventDefinition, BusinessEventsActions _changeType, RecId _changedRecordId)
    {
        // Only process default address changes for types that are mapped and retun null for mappings not known.
        List impactedRecIds = null;
        LogisticsLocationRoleType roleType = LogisticsLocationRoleType::None;

        if (_eventDefinition.DataSourceName == dataEntityDataSourceStr(CustCustomerV3Entity, DefaultDeliveryLocation))
        {
            roleType = LogisticsLocationRoleType::Delivery;
        }
        else if (_eventDefinition.DataSourceName == dataEntityDataSourceStr(CustCustomerV3Entity, DefaultInvoiceLocation))
        {
            roleType = LogisticsLocationRoleType::Invoice;
        }

        if (roleType != LogisticsLocationRoleType::None)
        {
            impactedRecIds = new List(Types::Int64);

            CustTable custTable;
            CustDefaultLocation custDefaultLocation;
            DirPartyLocationRole partyLocationRole;
            LogisticsLocationRole locationRole;

            select firstonly RecId from custTable
                exists join custDefaultLocation
                    where custDefaultLocation.RecId == _changedRecordId
                        && custDefaultLocation.AccountNum == custTable.AccountNum
                exists join partyLocationRole
                    where partyLocationRole.RecId == custDefaultLocation.PartyLocationRole
                exists join locationRole
                    where locationRole.RecId == partyLocationRole.LocationRole
                        && locationRole.Type == roleType;

            if (custTable)
            {
                impactedRecIds.addEnd(custTable.RecId);
            }
        }

        return impactedRecIds;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>