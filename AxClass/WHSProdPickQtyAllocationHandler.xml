<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSProdPickQtyAllocationHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Xpp.PlatformExtensions;

/// <summary>
// Ensures clean-up of WHSProdPickQtyAllocation records used for marking allocation.
/// </summary>
internal final class WHSProdPickQtyAllocationHandler
{
    private WHSWaveId waveId;
    private WHSWaveExecutionID waveExecutionID;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSProdPickQtyAllocationHandler construct()
    {
        return new WHSProdPickQtyAllocationHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForWaveExecution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create instance of <c>WHSProdPickQtyAllocationHandler</c> for given wave id, and wave execution id.
    /// </summary>
    /// <param name = "_waveId">The wave id.</param>
    /// <param name = "_waveExecutionID">The wave execution id.</param>
    /// <returns>Instance of <c>WHSProdPickQtyAllocationHandler</c>.</returns>
    internal static WHSProdPickQtyAllocationHandler newForWaveExecution(WHSWaveId _waveId, WHSWaveExecutionID _waveExecutionID)
    {
        WHSProdPickQtyAllocationHandler prodPickQtyAllocationsHandler = WHSProdPickQtyAllocationHandler::construct();
        prodPickQtyAllocationsHandler.waveId = _waveId;
        prodPickQtyAllocationsHandler.waveExecutionID = _waveExecutionID;

        prodPickQtyAllocationsHandler.registerEventHandlers();

        return prodPickQtyAllocationsHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlers</Name>
				<Source><![CDATA[
    private void registerEventHandlers()
    {
        appl.onTtsNotifyPreCommit += eventhandler(this.onTransactionEnd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unregisterEventHandlers</Name>
				<Source><![CDATA[
    private void unregisterEventHandlers()
    {
        appl.onTtsNotifyPreCommit -= eventhandler(this.onTransactionEnd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTransactionEnd</Name>
				<Source><![CDATA[
    private void onTransactionEnd()
    {
        try
        {
            this.clearAllocationData();
        }
        finally
        {
            this.unregisterEventHandlers();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAllocationData</Name>
				<Source><![CDATA[
    private void clearAllocationData()
    {
        WHSProdPickQtyAllocation prodPickQtyAllocations;

        CommonExtensions::SetSqlDeleteIndexHint(prodPickQtyAllocations, indexStr(WHSProdPickQtyAllocation, WaveIdWaveExecutionIdIdx));

        delete_from prodPickQtyAllocations
            where prodPickQtyAllocations.waveId == waveId
                && prodPickQtyAllocations.waveExecutionID == waveExecutionID;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>