<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendRequestDP</c> class is the data provider class for the <c>VendRequest</c> report.
/// </summary>
[SRSReportParameterAttribute(classstr(VendRequestContract))]
public class VendRequestDP extends SRSReportDataProviderBase
{
    VendTmpRequest  vendTmpRequest;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getVendTmpRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The <c>VendTmpRequest</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute('VendTmpRequest'), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendTmpRequest getVendTmpRequest()
    {
        select * from vendTmpRequest;

        return vendTmpRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches records based on the parameter values and inserts the records into the temporary table.
    /// </summary>
    public void processReport()
    {
        this.runQuery(querystr(VendRequestNewVendorStatus));
        this.runQuery(querystr(VendRequestStatusChangeStatus));
        this.runQuery(querystr(VendRequestCategoryStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up and runs a query based on the <c>VendRequest</c> table.
    /// </summary>
    /// <param name="_queryName">
    /// The query to run.
    /// </param>
    private void runQuery(str _queryName)
    {
        Query               query = new Query(_queryName);
        QueryRun            queryRun;
        QueryBuildRange     range;
        Common              vendRequest;
        DataArea            dataArea;
        VendRequestContract contract = this.parmDataContract() as VendRequestContract;

        query.allowCrossCompany(true);
        query.clearCompanyRange();

        if (contract != null)
        {
            //0 represents all companies, otherwise this parameter is a specific DataArea RecId
            if (contract.parmCompanyAccount() == 0) // All
            {
                while select Id from dataArea
                    where dataArea.IsVirtual == false
                {
                    query.addCompanyRange(dataArea.Id);
                }
            }
            else
            {
                select Id from dataArea
                    where dataArea.RecId == contract.parmCompanyAccount();
                query.addCompanyRange(dataArea.Id);
            }

            if (contract.parmFromDate() || contract.parmToDate())
            {
                // The first data source is a sub type of VendRequest
                range = query.dataSourceNo(1).addRange(fieldnum(VendRequest, CreatedDateTime));
                range.value(queryRange(contract.parmFromDate(), contract.parmToDate()));
            }
        }

        queryRun = new QueryRun(query);

        ttsbegin;

        while (queryRun.next())
        {
            vendRequest = queryRun.getNo(1);

            vendTmpRequest.clear();
            vendTmpRequest.DataArea = vendRequest.DataAreaId;
            vendTmpRequest.RequestType = vendRequest.requestTypeName();
            vendTmpRequest.DocumentStatus = vendRequest.requestStatus();
            vendTmpRequest.RequestCount = int642int(vendRequest.RecId); // RecId is a count
            vendTmpRequest.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
