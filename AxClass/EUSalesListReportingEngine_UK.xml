<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EuSalesListReportingEngine_UK</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EUSalesListReportingEngine_UK</c> class extends the functionality of the
/// <c>EUSalesListReportingEngine</c> class in order to support requirements that are specific to the
/// United Kingdom.
/// </summary>
#ISOCountryRegionCodes
[CountryRegionAttribute(#isoGB)]
class EuSalesListReportingEngine_UK extends EUSalesListReportingEngine implements BatchRetryable
{
    HcmWorkerRecId  hcmWorkerRecId;

    DialogField     dialogHcmWorkerRecId;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        hcmWorkerRecId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and inserts a record into the <c>EUSalesListReportingHeader</c> table.
    /// </summary>
    /// <returns>
    /// A <c>EUSalesListReportingHeader</c> table buffer.
    /// </returns>
    protected EUSalesListReportingHeader addHeader()
    {
        EUSalesListReportingHeader header;

        header                   = super();
        header.HcmWorkerRecId    = hcmWorkerRecId;
        header.update();
        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.curFormGroup(dialogGroupExportOptions.formGroup());
        dialogHcmWorkerRecId = dialog.addFieldValue(extendedTypeStr(HcmWorkerRecId), hcmWorkerRecId);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        ret = super();

        hcmWorkerRecId  = dialogHcmWorkerRecId.value();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHcmWorkerRecId</Name>
				<Source><![CDATA[
    public HcmWorkerRecId parmHcmWorkerRecId(HcmWorkerRecId _hcmWorkerRecId = hcmWorkerRecId)
    {
        hcmWorkerRecId = _hcmWorkerRecId;
        return hcmWorkerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version = RunBase::getVersion(packedClass);
        container       packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, packedSuper] = packedClass;
                if (packedSuper)
                {
                    return super(packedSuper);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (generateFile && !hcmWorkerRecId)
        {
            ret = checkFailed(strFmt("@SYS84753", extendedTypeId2pname(extendedTypeNum(HcmWorkerRecId))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return EUSalesListReportingEngine::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>