<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBalanceReportColumnsDPHU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Declares variables and tables.
/// </summary>
[
    SRSReportQueryAttribute(querystr(AssetBalanceReportColumns)),
    SRSReportParameterAttribute(classstr(AssetBalanceReportColumnsContractHU))
]
public class AssetBalanceReportColumnsDPHU extends SrsReportDataProviderPreProcessTempDB
{
    int maxColumns;
    int noOfColumns;
    int pageNo;
    int pageNum;
    int recordCount;
    ToDate closingDateThisYear;
    ToDate closingDatePriorYear;
    AssetBookId assetBookId;
    AssetId assetId;
    AssetBalance_AcquisitionStartPeriod acquisitionStartPeriod;
    AssetBalance_AcquisitionEndPeriod acquisitionEndPeriod;
    AssetBalance_AcquisitionReceiptRepYear acquisitionReceiptRepYear;
    AssetBalance_DepreciationStartPeriod depreciationStartPeriod;
    AssetBalance_DepreciationRepYear depreciationRepYear;
    AssetBalance_DepreciationVoidedRepYear depreciationVoidedRepYear;
    AssetBalance_DepreciationEndPeriod depreciationEndPeriod;
    AssetBalance_AdjStartPeriod adjStartPeriod;
    AssetBalance_AdjWriteUpRepYear adjWriteUpRepYear;
    AssetBalance_AdjWriteDownRepYear adjWriteDownRepYear;
    AssetBalance_AdjRevaluationRepYear adjRevaluationRepYear;
    AssetBalance_AdjVoidedRepYear adjVoidedRepYear;
    AssetBalance_AdjEndPeriod adjEndPeriod;
    AssetBalance_BalanceStartPeriod balanceStartPeriod;
    AssetBalance_BalanceStartPeriod balanceEndPeriod;
    AssetBalance_DepreciationRepYear bonusDepreciationRepYear;
    AssetBalance_AcquisitionIssueRepYear acquisitionIssueRepYear;
    AssetGroupId assetGroupId;
    AssetGroupId lastAssetGroupId;
    AssetBalanceReportColumnsTmp assetBalanceReportColumnsTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetBalanceReportColumnsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns data from the <c>AssetBalanceReportColumnsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>AssetBalanceReportColumnsTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(AssetBalanceReportColumnsTmp))
    ]
    public AssetBalanceReportColumnsTmp getAssetBalanceReportColumnsTmp()
    {
        select assetBalanceReportColumnsTmp;
        return assetBalanceReportColumnsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetBalanceReportColumnsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the details of Fixed Asset Note into the <c>AssetBalanceReportColumnsTmp</c> temporary
    ///    table.
    /// </summary>
    /// <param name="_blTotals">
    ///    Indicates whether a total exists.
    /// </param>
    private void insertAssetBalanceReportColumnsTmp(boolean _blTotals)
    {
        #ISOCountryRegionCodes

        if (pageNum == 11)
        {
            noOfColumns++;
            pageNum = 0;
        }
        if (lastAssetGroupId != assetGroupId)
        {
            lastAssetGroupId = assetGroupId;
            pageNum++;
        }

        assetBalanceReportColumnsTmp.AssetId = assetId;
        assetBalanceReportColumnsTmp.AssetBookId = assetBookId;
        assetBalanceReportColumnsTmp.AssetGroup = assetGroupId;
        assetBalanceReportColumnsTmp.ColumnCount = noOfColumns;
        assetBalanceReportColumnsTmp.AcquisitionStartPeriod = acquisitionStartPeriod;
        assetBalanceReportColumnsTmp.AcquisitionEndPeriod = acquisitionEndPeriod;
        assetBalanceReportColumnsTmp.AcquisitionsReceiptRepYear = acquisitionReceiptRepYear;
        assetBalanceReportColumnsTmp.DepreciationStartPeriod = depreciationStartPeriod;
        assetBalanceReportColumnsTmp.DepreciationRepYear = depreciationRepYear;
        assetBalanceReportColumnsTmp.DepreciationVoidedRepYear = depreciationVoidedRepYear;
        assetBalanceReportColumnsTmp.DepreciationEndPeriod = depreciationEndPeriod;
        assetBalanceReportColumnsTmp.AdjStartPeriod = adjStartPeriod;
        assetBalanceReportColumnsTmp.AdjWriteUpRepYear = adjWriteUpRepYear;
        assetBalanceReportColumnsTmp.AdjWriteDownRepYear = adjWriteDownRepYear;
        assetBalanceReportColumnsTmp.AdjRevaluationRepYear = adjRevaluationRepYear;
        assetBalanceReportColumnsTmp.AdjVoidedRepYear = adjVoidedRepYear;
        assetBalanceReportColumnsTmp.AdjEndPeriod = adjEndPeriod;
        assetBalanceReportColumnsTmp.BalanceEndPeriod = balanceEndPeriod;
        assetBalanceReportColumnsTmp.AcquisitionIssueRepYear = acquisitionIssueRepYear;
        assetBalanceReportColumnsTmp.BalanceStartPeriod = balanceStartPeriod;
        assetBalanceReportColumnsTmp.BonusDepreciationRepYear = bonusDepreciationRepYear;

        if (!_blTotals)
        {
            assetBalanceReportColumnsTmp.IsTotal = NoYes::No ;
        }
        else
        {
            assetBalanceReportColumnsTmp.IsTotal = NoYes::Yes;
        }

        assetBalanceReportColumnsTmp.insert();
        recordCount++;

        assetId = '';
        balanceEndPeriod = 0.0;
        acquisitionIssueRepYear = 0.0;
        acquisitionStartPeriod = 0.0;
        acquisitionEndPeriod = 0.0;
        acquisitionReceiptRepYear = 0.0;
        depreciationStartPeriod = 0.0;
        depreciationRepYear = 0.0;
        depreciationVoidedRepYear = 0.0;
        depreciationEndPeriod = 0.0;
        adjStartPeriod = 0.0;
        adjWriteUpRepYear = 0.0;
        adjWriteDownRepYear = 0.0;
        adjRevaluationRepYear = 0.0;
        adjVoidedRepYear = 0.0;
        adjEndPeriod = 0.0;
        balanceStartPeriod = 0.0;
        bonusDepreciationRepYear = 0.0;
        depreciationEndPeriod = 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the business logic for Fixed Asset Note which is used to populate a temporary table.
    /// </summary>
    public void processReport()
    {
        Query query = new Query(this.parmQuery());
        QueryRun queryRun;
        AssetCalcReport balanceReport;
        AssetBook assetBook;

        AssetBalanceReportColumnsContractHU contract = this.parmDataContract() as AssetBalanceReportColumnsContractHU;
        assetBookId = contract.parmAssetBookId();
        closingDatePriorYear = contract.parmClosingDatePriorYear();
        closingDateThisYear = contract.parmClosingDateThisYear();

        balanceReport = new AssetCalcReport(closingDatePriorYear+1, closingDateThisYear);

        SysQuery::findOrCreateRange(
            query.dataSourceTable(tablenum(AssetBook)),
            fieldnum(AssetBook, BookId)
            ).value(assetBookId);

        queryRun = new QueryRun(query);
        noOfColumns = 0;
        pageNum = 0;

        // Sum all chosen assets into groups.
        while (queryRun.next())
        {
            assetBook = queryRun.get(tablenum(AssetBook));
            balanceReport.calcAsset(assetBook);
            this.totals(assetBook, balanceReport);
        }

        select  AssetId , sum(AcquisitionStartPeriod),
                    sum(AcquisitionEndPeriod),
                    sum(AcquisitionsReceiptRepYear),
                    sum(DepreciationStartPeriod),
                    sum(DepreciationRepYear),
                    sum(DepreciationVoidedRepYear),
                    sum(DepreciationEndPeriod),
                    sum(AdjStartPeriod),
                    sum(AdjWriteUpRepYear),
                    sum(AdjWriteDownRepYear),
                    sum(AdjRevaluationRepYear),
                    sum(AdjVoidedRepYear),
                    sum(AdjEndPeriod),
                    sum(BalanceEndPeriod),
                    sum(AcquisitionIssueRepYear),
                    sum(BalanceStartPeriod),
                    sum(BonusDepreciationRepYear) from  assetBalanceReportColumnsTmp;

            assetId = assetBalanceReportColumnsTmp.AssetId;
            balanceEndPeriod = assetBalanceReportColumnsTmp.BalanceEndPeriod;
            acquisitionIssueRepYear = assetBalanceReportColumnsTmp.AcquisitionIssueRepYear;
            acquisitionStartPeriod = assetBalanceReportColumnsTmp.AcquisitionStartPeriod;
            acquisitionEndPeriod = assetBalanceReportColumnsTmp.AcquisitionEndPeriod;
            acquisitionReceiptRepYear = assetBalanceReportColumnsTmp.AcquisitionsReceiptRepYear;
            depreciationStartPeriod = assetBalanceReportColumnsTmp.DepreciationStartPeriod;
            depreciationRepYear = assetBalanceReportColumnsTmp.DepreciationRepYear;
            depreciationVoidedRepYear = assetBalanceReportColumnsTmp.DepreciationVoidedRepYear;
            depreciationEndPeriod = assetBalanceReportColumnsTmp.DepreciationEndPeriod;
            adjStartPeriod = assetBalanceReportColumnsTmp.AdjStartPeriod ;
            adjWriteUpRepYear = assetBalanceReportColumnsTmp.AdjWriteUpRepYear;
            adjWriteDownRepYear = assetBalanceReportColumnsTmp.AdjWriteDownRepYear;
            adjRevaluationRepYear = assetBalanceReportColumnsTmp.AdjRevaluationRepYear;
            adjVoidedRepYear = assetBalanceReportColumnsTmp.AdjVoidedRepYear;
            adjEndPeriod = assetBalanceReportColumnsTmp.AdjEndPeriod;
            balanceStartPeriod = assetBalanceReportColumnsTmp.BalanceStartPeriod;
            bonusDepreciationRepYear = assetBalanceReportColumnsTmp.BonusDepreciationRepYear;
            assetGroupId = "@SYS809";
            this.insertAssetBalanceReportColumnsTmp(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the details of Fixed Asset Note.
    /// </summary>
    /// <param name="_assetBook">
    ///    The value to use to get the asset book details.
    /// </param>
    /// <param name="_balanceReport">
    ///    The object to use.
    /// </param>
    private void totals(AssetBook _assetBook , AssetCalcReport  _balanceReport)
    {
        assetGroupId = _assetBook.AssetGroup;
        assetId = _assetBook.AssetId;
        assetBookId = _assetBook.BookId;
        acquisitionStartPeriod = _balanceReport.columnAcquisitionStartPeriod();
        acquisitionEndPeriod = _balanceReport.columnAcquisitionEndPeriod();
        acquisitionReceiptRepYear = _balanceReport.columnAcquisitionReceiptRepYear();
        depreciationStartPeriod = _balanceReport.columnDepreciationStartPeriod();
        depreciationRepYear = _balanceReport.columnDepreciationRepYear();
        depreciationVoidedRepYear = _balanceReport.columnDepreciationVoidedRepYear();
        depreciationEndPeriod = _balanceReport.columnDepreciationEndPeriod();
        adjStartPeriod = _balanceReport.columnAdjStartPeriod();
        adjWriteUpRepYear = _balanceReport.columnAdjWriteUpRepYear();
        adjWriteDownRepYear = _balanceReport.columnAdjWriteDownRepYear();
        adjRevaluationRepYear = _balanceReport.columnAdjRevaluationRepYear();
        adjVoidedRepYear = _balanceReport.columnAdjVoidedRepYear();
        adjEndPeriod = _balanceReport.columnAdjEndPeriod();
        balanceStartPeriod = _balanceReport.balanceStartPeriod();
        balanceEndPeriod = _balanceReport.balanceEndPeriod();
        acquisitionIssueRepYear = _balanceReport.columnAcquisitionIssueRepYear();
        bonusDepreciationRepYear = _balanceReport.columnBonusDepreciationRepYear();

        this.insertAssetBalanceReportColumnsTmp(false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>