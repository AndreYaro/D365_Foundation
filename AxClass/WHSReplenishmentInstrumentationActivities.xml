<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReplenishmentInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides activities for replenishment instrumentation logging.
/// </summary>
internal final class WHSReplenishmentInstrumentationActivities
{
    private const str ActivityNamePrefix = 'Replenishment.';

    private WHSInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(WHSInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivity</Name>
				<Source><![CDATA[
    private SysInstrumentationActivity getActivity(str _activityName)
    {
        return logger.activity(ActivityNamePrefix + _activityName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    public static WHSReplenishmentInstrumentationActivities newFromLogger(WHSInstrumentationLogger _logger)
    {
        return new WHSReplenishmentInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineReplenishment</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext lineReplenishment(WHSReplenishmentThresholdScope _replenishmentThresholdScope)
    {
        var activity = this.getActivity('LineReplenishment');

        logger.logInformation(strFmt('ReplenishmentLine.ThresholdScope:%1', _replenishmentThresholdScope));

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>zoneReplenishment</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext zoneReplenishment()
    {
        return logger.activityContext(this.getActivity('ZoneReplenishment'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemZoneReplenishment</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext itemZoneReplenishment()
    {
        return logger.activityContext(this.getActivity('ItemZoneReplenishment'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockReplenishmentOverflowWorkOverCapacity</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext blockReplenishmentOverflowWorkOverCapacity()
    {
        return logger.activityContext(this.getActivity('BlockReplenishmentWorkOverCapacity'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockedReplenishmentOverflowWorkOverCapacity</Name>
				<Source><![CDATA[
    public void blockedReplenishmentOverflowWorkOverCapacity(
        SysInstrumentationActivityContext   _activityContext,
        int                                 _selectedWorkLines,
        int                                 _blockedWorkLines)
    {
        this.logSelectedReplenishmentWorkLines(_selectedWorkLines);
        logger.logInformation(strFmt('BlockedReplenishmentWorkLines:%1', _blockedWorkLines));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unblockReplenishmentOverflowWorkOverCapacity</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext unblockReplenishmentOverflowWorkOverCapacity()
    {
        return logger.activityContext(this.getActivity('UnblockReplenishmentWorkOverCapacity'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unblockedReplenishmentOverflowWorkOverCapacity</Name>
				<Source><![CDATA[
    public void unblockedReplenishmentOverflowWorkOverCapacity(
        SysInstrumentationActivityContext   _activityContext,
        int                                 _selectedWorkLines,
        int                                 _blockedWorkLines)
    {
        _activityContext.addCustomProperty('SelectedReplenishmentWorkLines', any2Str(_selectedWorkLines));
        _activityContext.addCustomProperty('UnblockedReplenishmentWorkLines', any2Str(_blockedWorkLines));

        this.logSelectedReplenishmentWorkLines(_selectedWorkLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logSelectedReplenishmentWorkLines</Name>
				<Source><![CDATA[
    private void logSelectedReplenishmentWorkLines(int _selectedReplenishmentWorkLines)
    {
        if (_selectedReplenishmentWorkLines >= 10)
        {
            str informationStr = strFmt('SelectedReplenishmentWorkLines:%1', _selectedReplenishmentWorkLines);
            if (_selectedReplenishmentWorkLines >= 100)
            {
                logger.logWarning(informationStr);
            }
            else
            {
                logger.logInformation(informationStr);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkQtyWithinReplenishmentOverflowCapacity</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext isWorkQtyWithinReplenishmentOverflowCapacity(WHSWorkAvailabilityThresholdType _workAvailabilityThresholdType)
    {
        var activity = this.getActivity('IsWorkQtyWithinReplenishmentOverflowCapacity');

        logger.logInformation(strFmt('LocationProfile.WorkAvailabilityThresholdType:%1', _workAvailabilityThresholdType));

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasWorkQtyWithinReplenishmentOverflowCapacity</Name>
				<Source><![CDATA[
    public void wasWorkQtyWithinReplenishmentOverflowCapacity(
        SysInstrumentationActivityContext   _activityContext,
        boolean                             _isWithinReplenishmentOverflowCapacity)
    {
        logger.logInformation(strFmt('WithinReplenishmentOverflowCapacity:%1', _isWithinReplenishmentOverflowCapacity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkQtyWithinReplenishmentOverflowPercentageCapacity</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext isWorkQtyWithinReplenishmentOverflowPercentageCapacity(boolean _isStockingLimitsSetup, boolean _isVolumetricsSetup)
    {
        var activity = this.getActivity('IsWorkQtyWithinReplenishmentOverflowPercentageCapacity');

        logger.logInformation(strFmt('StockingLimitsSetup:%1', _isStockingLimitsSetup));
        logger.logInformation(strFmt('VolumetricsSetup:%1', _isVolumetricsSetup));

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasWorkQtyWithinReplenishmentOverflowPercentageCapacity</Name>
				<Source><![CDATA[
    public void wasWorkQtyWithinReplenishmentOverflowPercentageCapacity(
        SysInstrumentationActivityContext   _activityContext,
        boolean                             _isWithinReplenishmentOverflowCapacity)
    {
        _activityContext.addCustomProperty('WithinReplenishmentOverflowCapacity', any2Str(_isWithinReplenishmentOverflowCapacity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkQtyWithinReplenishmentOverflowQtyCapacity</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext isWorkQtyWithinReplenishmentOverflowQtyCapacity()
    {
        return logger.activityContext(this.getActivity('IsWorkQtyWithinReplenishmentOverflowQtyCapacity'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasWorkQtyWithinReplenishmentOverflowQtyCapacity</Name>
				<Source><![CDATA[
    public void wasWorkQtyWithinReplenishmentOverflowQtyCapacity(
        SysInstrumentationActivityContext   _activityContext,
        boolean                             _isWithinReplenishmentOverflowCapacity)
    {
        _activityContext.addCustomProperty('WithinReplenishmentOverflowCapacity', any2Str(_isWithinReplenishmentOverflowCapacity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnallocatedReplenQuantity</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext findUnallocatedReplenQuantity()
    {
        return logger.activityContext(this.getActivity('findUnallocatedReplenQuantity'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logEvaluatedWorkHeadersAndWorkLines</Name>
				<Source><![CDATA[
    public void logEvaluatedWorkHeadersAndWorkLines(
        SysInstrumentationActivityContext   _activityContext,
        int _workHeadersEvaluated,
        int _workLinesEvaluated)
    {
        logger.logInformation(strFmt('workHeadersEvaluated:%1', _workHeadersEvaluated));
        logger.logInformation(strFmt('workLinesEvaluated:%1', _workLinesEvaluated));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logEvaluatedReplenWorkLines</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void logEvaluatedReplenWorkLines(int _replenWorkLinesEvaluated)
    {
        logger.logInformation(strFmt('replenWorkLinesEvaluated:%1', _replenWorkLinesEvaluated));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logEvaluatedReplenPutTmpWorkLines</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void logEvaluatedReplenPutTmpWorkLines(int _replenPutTmpWorkLinesEvaluated)
    {
        logger.logInformation(strFmt('replenPutTmpWorkLinesEvaluated:%1', _replenPutTmpWorkLinesEvaluated));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logEvaluatedDemandTmpWorkLines</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void logEvaluatedDemandTmpWorkLines(int _demandTmpWorkLinesEvaluated)
    {
        logger.logInformation(strFmt('demandTmpWorkLinesEvaluated:%1', _demandTmpWorkLinesEvaluated));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logEvaluatedDemandTmpWorkLinesGroupByItemAndInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void logEvaluatedDemandTmpWorkLinesGroupByItemAndInventDim(int _demandTmpWorkLinesGroupByItemAndInventDimEvaluated)
    {
        logger.logInformation(strFmt('demandTmpWorkLinesGroupByItemAndInventDimEvaluated:%1', _demandTmpWorkLinesGroupByItemAndInventDimEvaluated));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReplenishmentPutLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SysInstrumentationActivityContext findReplenishmentPutLocation()
    {
        return logger.activityContext(this.getActivity('findReplenishmentPutLocation'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDemandReplenishmentPickLines</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SysInstrumentationActivityContext createDemandReplenishmentPickLines()
    {
        return logger.activityContext(this.getActivity('createDemandReplenishmentPickLines'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistingReplenishmentWork</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SysInstrumentationActivityContext checkExistingReplenishmentWork()
    {
        return logger.activityContext(this.getActivity('checkExistingReplenishmentWork'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistingReplenWorkForImmediateReplen</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SysInstrumentationActivityContext checkExistingReplenWorkForImmediateReplen()
    {
        return logger.activityContext(this.getActivity('checkExistingReplenWorkForImmediateReplen'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createImmediateDemandTmpWorkLinesAndImmedReplenWorkLinks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SysInstrumentationActivityContext createImmediateDemandTmpWorkLinesAndImmedReplenWorkLinks()
    {
        return logger.activityContext(this.getActivity('createImmediateDemandTmpWorkLinesAndImmedReplenWorkLinks'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateOpenReplenishmentWork</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SysInstrumentationActivityContext allocateOpenReplenishmentWork()
    {
        return logger.activityContext(this.getActivity('allocateOpenReplenishmentWork'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReplenishmentForTemplate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal SysInstrumentationActivityContext runReplenishmentForTemplate()
    {
        return logger.activityContext(this.getActivity('runReplenishmentForTemplate'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logReplenishmentForTemplateType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void logReplenishmentForTemplateType(WHSReplenishmentType _replenTemplateType)
    {
        logger.logInformation(strFmt('replenTemplateTypeWasRun:%1', _replenTemplateType));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>