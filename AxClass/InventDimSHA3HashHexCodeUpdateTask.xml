<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimSHA3HashHexCodeUpdateTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimSHA3HashHexCodeUpdateTask
{
    #InventDimDevelop
    private str inventDimTableName;
    private str inventDimConfigId;
    private str inventDimInventBatchId;
    private str inventDimInventColorId;
    private str inventDimInventLocationId;
    private str inventDimInventSerialId;
    private str inventDimInventSiteId;
    private str inventDimInventSizeId;
    private str inventDimInventStatusId;
    private str inventDimInventStyleId;
    private str inventDimInventVersionId;
    private str inventDimLicensePlateId;
    private str inventDimWMSLocationId;
    private str inventDimWMSPalletId;
    private str inventDimInventGtdId_RU;
    private str inventDimInventOwnerId_RU;
    private str inventDimInventProfileId_RU;
    private str inventDimInventDimension1;
    private str inventDimInventDimension2;
    private str inventDimInventDimension3;
    private str inventDimInventDimension4;
    private str inventDimInventDimension5;
    private str inventDimInventDimension6;
    private str inventDimInventDimension7;
    private str inventDimInventDimension8;
    private str inventDimInventDimension9;
    private str inventDimInventDimension10;
    private str inventDimInventDimension11;
    private str inventDimInventDimension12;
    private str inventDimInventDimId;
    private str inventDimSHA3HashHex;
    private str inventDimDataAreaId;
    private str inventDimPartition;
    private str inventDimRecId;
    private SysSQLStatementText sqlStatementText;
    private boolean hasInventDimFieldWithValueAndConfigKeyDisabled;
    private InventInstrumentationLogger logger;
    boolean isInventDimFieldValueAndConfigKeyCheckCalculated;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public void new()
    {
        super();
        this.initLogger();
        this.initFieldNames();
        isInventDimFieldValueAndConfigKeyCheckCalculated = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLogger</Name>
				<Source><![CDATA[
    private void initLogger()
    {
        logger = InventInstrumentationLogger::createLogger(classStr(InventDimSHA3HashHexCodeUpdateTask));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasInventDimFieldWithValueAndConfigKeyDisabled</Name>
				<Source><![CDATA[
    public boolean parmHasInventDimFieldWithValueAndConfigKeyDisabled(boolean _hasInventDimFieldWithValueAndConfigKeyDisabled = hasInventDimFieldWithValueAndConfigKeyDisabled)
    {
        hasInventDimFieldWithValueAndConfigKeyDisabled = _hasInventDimFieldWithValueAndConfigKeyDisabled;
        return hasInventDimFieldWithValueAndConfigKeyDisabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSHA3HashHexInInventDim</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void updateSHA3HashHexInInventDim()
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(LedgerBasic)))
        {
            return;
        }

        this.populateInventDimUpgradeHash3Code();
        this.updateSHA3HashHexFromInventDimUpgradeHash3CodeToInventDim();

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSHA3HashHexFromInventDimUpgradeHash3CodeToInventDim</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void updateSHA3HashHexFromInventDimUpgradeHash3CodeToInventDim()
    {
        #OCCRetryCount

        InventDim                 inventDim;
        InventDimUpgradeHash3Code inventDimUpgradeHash3Code;

        this.callInsertUpdateRelatedSkipMethods(inventDim);
        try
        {
            update_recordset inventDim
                setting SHA3HashHex = inventDimUpgradeHash3Code.SHA3HashHex
                where inventDim.SHA3HashHex == ''
                join inventDimUpgradeHash3Code
                    where inventDimUpgradeHash3Code.inventDimId == inventDim.inventDimId;

            delete_from inventDimUpgradeHash3Code;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>callInsertUpdateRelatedSkipMethods</Name>
				<Source><![CDATA[
    private void callInsertUpdateRelatedSkipMethods(Common _buffer)
    {
        _buffer.skipDatabaseLog(true);
        _buffer.skipDataMethods(true);
        _buffer.skipEvents(true);
        _buffer.skipBusinessEvents(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInventDimUpgradeHash3Code</Name>
				<Source><![CDATA[
    private void populateInventDimUpgradeHash3Code()
    {
        if (!isInventDimFieldValueAndConfigKeyCheckCalculated)
        {
            hasInventDimFieldWithValueAndConfigKeyDisabled = this.hasInventDimFieldWithValueAndConfigKeyDisabled();
        }

        int numOfThreads = max(1, System.Environment::ProcessorCount);
        System.Threading.Tasks.Task[] taskList = new System.Threading.Tasks.Task[numOfThreads]();

        for (int i = 0 ; i < numOfThreads ; i++)
        {
            container args = [i, numOfThreads, this.parmHasInventDimFieldWithValueAndConfigKeyDisabled()];
            
            System.Threading.Tasks.Task task = runAsync(
                classNum(InventDimSHA3HashHexCodeUpdateTask),
                staticMethodStr(InventDimSHA3HashHexCodeUpdateTask, populateInventDimUpgradeHashCodeBucket),
                args);
            taskList.SetValue(task, i);
        }

        System.Threading.Tasks.Task::WaitAll(taskList);
        this.throwThreadExceptionsIfAny(taskList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInventDimUpgradeHashCodeBucket</Name>
				<Source><![CDATA[
    private static void populateInventDimUpgradeHashCodeBucket(container _args)
    {
        InventInstrumentationLogger logger = InventInstrumentationLogger::createLogger(classStr(InventDimSHA3HashHexCodeUpdateTask));
        using (var activityContext = logger.inventDimSHA3HashHexCodeUpdateTask().logMeasure(funcName(), curExt()))
        {
            RecordInsertList updateBuffer = new RecordInsertList(tableNum(InventDimUpgradeHash3Code));
            int bucketNumber = conPeek(_args, 1);
            int numThreads   = conPeek(_args, 2);
            boolean hasInventDimFieldWithValueAndConfigKeyDisabled = conPeek(_args, 3);
            logger.inventDimSHA3HashHexCodeUpdateTask().logNumThreads(activityContext, numThreads);
            logger.inventDimSHA3HashHexCodeUpdateTask().logBucketNumber(activityContext, bucketNumber);
            logger.inventDimSHA3HashHexCodeUpdateTask().logHasInventDimFieldWithValueAndConfigKeyDisabled(activityContext, hasInventDimFieldWithValueAndConfigKeyDisabled);

            // It is not necessary to enclose the lines below within transaction scope because it will be done
            // automatically by RecordInsertList, and it is still efficient, assuming RecordInsertList inserts
            // rows into the database with low frequency, thereby inserting big chunks of data.
            InventDimUpgradeHash3Code inventDimUpgradeHash3Code;
            if (hasInventDimFieldWithValueAndConfigKeyDisabled)
            {
                UserConnection userConnection = new UserConnection();
                try
                {
                    InventDimSHA3HashHexCodeUpdateTask inventDimSHA3HashHexCodeUpdateTask = new InventDimSHA3HashHexCodeUpdateTask();
                    SysSQLStatementText sqlStatementText = inventDimSHA3HashHexCodeUpdateTask.getInventDimSqlStmt(numThreads, bucketNumber);
                    logger.inventDimSHA3HashHexCodeUpdateTask().logSqlStatementStr(activityContext, funcName(), sqlStatementText);

                    ResultSet set = inventDimSHA3HashHexCodeUpdateTask.executeSqlQueryWithResultsStatic(userConnection, sqlStatementText);
                    InventDimSHA3HashHexGenerator inventDimSHA3HashHexGenerator = new InventDimSHA3HashHexGenerator();

                    while (set.next())
                    {
                        inventDimSHA3HashHexCodeUpdateTask.refreshSHA3Generator(set, inventDimUpgradeHash3Code, inventDimSHA3HashHexGenerator);
                        inventDimUpgradeHash3Code.SHA3HashHex = inventDimSHA3HashHexGenerator.hash3Value();
                        updateBuffer.add(inventDimUpgradeHash3Code);
                        inventDimUpgradeHash3Code.clear();
                    }

                    updateBuffer.insertDatabase();
                }
                finally
                {
                    if (userConnection)
                    {
                        userConnection.finalize();
                    }
                }
            }
            else
            {
                // All the configuration keys on inventDim fields are enabled for those fields have values
                InventDim inventDim;
                int i = 0;
                const int queryRecordCounts = 5000;
                while select inventDim
                where inventDim.RecId mod numThreads == bucketNumber
                   && inventDim.SHA3HashHex == ''
                {
                    if (InventDimSHA3HashHexCodeUpdateTask::canUpdateInventDim(inventDim))
                    {
						++i;
						inventDimUpgradeHash3Code.clear();
						inventDimUpgradeHash3Code.InventDimId = inventDim.InventDimId;
						inventDimUpgradeHash3Code.SHA3HashHex = inventDim.hash3Value();
						updateBuffer.add(inventDimUpgradeHash3Code);
						if (i > queryRecordCounts)
						{
							break;
						}
                    }
                }

                updateBuffer.insertDatabase();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateInventDim</Name>
				<Source><![CDATA[
	/// <summary>
    /// Determine if the buffer can be updated.
    /// </summary>
    /// <param name = "_inventDim">The <c>InventDim</c> record.</param>
    /// <returns>true if the record can be updated; otherwise, false.</returns>
	[Wrappable(true)]
	internal static boolean canUpdateInventDim(InventDim _inventDim)
    {
        return true;
	}

]]></Source>
			</Method>
			<Method>
				<Name>throwThreadExceptionsIfAny</Name>
				<Source><![CDATA[
    private void throwThreadExceptionsIfAny(System.Threading.Tasks.Task[] taskList)
    {
        int numberThreads = taskList.get_length();

        for (int i = 0 ; i < numberThreads ; i++)
        {
            System.Exception exception = AsyncTaskResult::getAsyncTaskResult(taskList.Get(i)).getException();

            if (exception != null &&
                exception.Message)
            {
                throw error(exception.Message);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSqlQueryWithResultsStatic</Name>
				<Source><![CDATA[
    private ResultSet executeSqlQueryWithResultsStatic(UserConnection _userConnection, str _sqlStatement)
    {
        ResultSet resultSet;
        
        Statement statement = _userConnection.createStatement();

        new SqlStatementExecutePermission(_sqlStatement).assert();

        resultSet = statement.executeQueryWithParameters(_sqlStatement, null);

        CodeAccessPermission::revertAssert();

        statement.close();

        return resultSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventDimFieldWithValueAndConfigKeyDisabled</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean hasInventDimFieldWithValueAndConfigKeyDisabled()
    {
        #InventDimDevelop
        DictFieldGroup dictFieldGroup = new DictFieldGroup(tableNum(InventDim), tableFieldGroupStr(InventDim, InventoryDimensions));
        boolean ret = false;
        if (dictFieldGroup)
        {
            int fieldCnt = dictFieldGroup.numberOfFields();
            TableId tableId = tableNum(InventDim);
            UserConnection connection;
            Statement statement;
            try
            {
                using (var activityContext = logger.inventDimSHA3HashHexCodeUpdateTask().logMeasure(funcName(), curExt()))
                {
                    connection = new UserConnection();
                    statement = connection.createStatement();

                    for (int i = 1; i <= fieldCnt; i++)
                    {
                        DictField dictField = new DictField(tableId, dictFieldGroup.field(i));
            
                        DictConfigurationKey dictConfigurationKey;
                        if (dictField.configurationKeyId())
                        {
                            dictConfigurationKey = new DictConfigurationKey(dictField.configurationKeyId());
                        }

                        if (dictConfigurationKey && !dictConfigurationKey.enabled())
                        {
                            if (this.existsInventDimValueOnFilterDimField(dictField.name(DbBackend::Native), dictField.id(), statement))
                            {
                                logger.inventDimSHA3HashHexCodeUpdateTask().logFieldNamewithConfigKey(activityContext, dictField.name(DbBackend::Native), dictConfigurationKey.name());
                                warning(strFmt("@SCM:InventDimFieldHasValueAndConfigurationKeyDisabled", dictConfigurationKey.name(), dictField.name(DbBackend::Native)));
                                ret = true;
                            }
                        }
                    }
                }
            }
            finally
            {
                if (statement)
                {
                    statement.close();
                }

                if (connection)
                {
                    connection.finalize();
                }

            }
        }

        isInventDimFieldValueAndConfigKeyCheckCalculated = true;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsInventDimValueOnFilterDimField</Name>
				<Source><![CDATA[
    private boolean existsInventDimValueOnFilterDimField(FieldName _fieldName, FieldId _fieldId, Statement _statement)
    {
        using (var activityContext = logger.inventDimSHA3HashHexCodeUpdateTask().logMeasure(funcName(), curExt()))
        {
            SysSqlSystem sqlSystem = new SysSqlSystem();
            SysSQLStatementText sqlStr = @'select top 1 recid from dbo.InventDim where ';
            sqlStr += inventDimTableName + '.' + _fieldName + ' <> ';
            sqlStr += strFmt('%1', InventDim::emptyDimFieldQueryValue(_fieldId));

            sqlStr += ' AND ' + inventDimTableName + '.' + inventDimDataAreaId + ' = ' + '\'' + curext() + '\'';
            sqlStr += ' AND ' + inventDimTableName + '.' + inventDimPartition + ' = ' + sqlSystem.sqlLiteral(getcurrentpartitionrecid()) + ' ';

            SqlStatementExecutePermission permission  = new SqlStatementExecutePermission(sqlStr);
            permission.assert();

            logger.inventDimSHA3HashHexCodeUpdateTask().logSqlStatementStr(activityContext, funcName(), sqlStr);
            Resultset resultSet = _statement.executeQueryWithParameters(sqlStr, null);
            boolean ret = resultSet.next();
            CodeAccessPermission::revertAssert();
            return ret;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldNames</Name>
				<Source><![CDATA[
    private void initFieldNames()
    {
        #InventDimDevelop
        SysDictTable inventDimDictTable     = new SysDictTable(tableNum(InventDim));
        inventDimTableName                  = inventDimDictTable.name(DbBackend::Native);
        inventDimConfigId                   = inventDimDictTable.fieldObject(fieldNum(InventDim, Configid)).name(DbBackend::Native);
        inventDimInventBatchId              = inventDimDictTable.fieldObject(fieldNum(InventDim, InventBatchId)).name(DbBackend::Native);
        inventDimInventColorId              = inventDimDictTable.fieldObject(fieldNum(InventDim, InventColorId)).name(DbBackend::Native);
        inventDimInventLocationId           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventLocationId)).name(DbBackend::Native);
        inventDimInventSerialId             = inventDimDictTable.fieldObject(fieldNum(InventDim, InventSerialId)).name(DbBackend::Native);
        inventDimInventSiteId               = inventDimDictTable.fieldObject(fieldNum(InventDim, InventSiteId)).name(DbBackend::Native);
        inventDimInventSizeId               = inventDimDictTable.fieldObject(fieldNum(InventDim, InventSizeId)).name(DbBackend::Native);
        inventDimInventStatusId             = inventDimDictTable.fieldObject(fieldNum(InventDim, InventStatusId)).name(DbBackend::Native);
        inventDimInventStyleId              = inventDimDictTable.fieldObject(fieldNum(InventDim, InventStyleId)).name(DbBackend::Native);
        inventDimInventVersionId            = inventDimDictTable.fieldObject(fieldNum(InventDim, InventVersionId)).name(DbBackend::Native);
        inventDimLicensePlateId             = inventDimDictTable.fieldObject(fieldNum(InventDim, LicensePlateId)).name(DbBackend::Native);
        inventDimWMSLocationId              = inventDimDictTable.fieldObject(fieldNum(InventDim, wMSLocationId)).name(DbBackend::Native);
        inventDimWMSPalletId                = inventDimDictTable.fieldObject(fieldNum(InventDim, wMSPalletId)).name(DbBackend::Native);
        inventDimInventGtdId_RU             = inventDimDictTable.fieldObject(fieldNum(InventDim, InventGtdId_RU)).name(DbBackend::Native);
        inventDimInventOwnerId_RU           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventOwnerId_RU)).name(DbBackend::Native);
        inventDimInventProfileId_RU         = inventDimDictTable.fieldObject(fieldNum(InventDim, InventProfileId_RU)).name(DbBackend::Native);
        inventDimInventDimension1           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension1)).name(DbBackend::Native);
        inventDimInventDimension2           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension2)).name(DbBackend::Native);
        inventDimInventDimension3           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension3)).name(DbBackend::Native);
        inventDimInventDimension4           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension4)).name(DbBackend::Native);
        inventDimInventDimension5           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension5)).name(DbBackend::Native);
        inventDimInventDimension6           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension6)).name(DbBackend::Native);
        inventDimInventDimension7           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension7)).name(DbBackend::Native);
        inventDimInventDimension8           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension8)).name(DbBackend::Native);
        inventDimInventDimension9           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension9)).name(DbBackend::Native);
        inventDimInventDimension10          = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension10)).name(DbBackend::Native);
        inventDimInventDimension11          = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension11)).name(DbBackend::Native);
        inventDimInventDimension12          = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension12)).name(DbBackend::Native);
        inventDimSHA3HashHex                = inventDimDictTable.fieldObject(fieldNum(InventDim, SHA3HashHex)).name(DbBackend::Native);
        inventDimInventDimId                = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimId)).name(DbBackend::Native);
        inventDimDataAreaId                 = inventDimDictTable.fieldObject(fieldNum(InventDim, DataAreaId)).name(DbBackend::Native);
        inventDimPartition                  = inventDimDictTable.fieldObject(fieldNum(InventDim, Partition)).name(DbBackend::Native);
        inventDimRecId                      = inventDimDictTable.fieldObject(fieldNum(InventDim, RecId)).name(DbBackend::Native);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimSqlStmt</Name>
				<Source><![CDATA[
    private SysSQLStatementText getInventDimSqlStmt(int _numThreads, int _bucketNumber)
    {
        #InventDimDevelop
        this.initFieldNames();

        SysSQLStatementText sqlStmt = 'BEGIN';
        sqlStmt += ' SELECT TOP(5000) ';

        if (inventDimInventDimension1)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventDimension1 + ', ';
        }
        if (inventDimInventDimension2)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventDimension2 + ', ';
        }
        if (inventDimInventDimension3)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventDimension3 + ', ';
        }
        if (inventDimInventDimension4)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventDimension4 + ', ';
        }
        if (inventDimInventDimension5)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventDimension5 + ', ';
        }
        if (inventDimInventDimension6)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventDimension6 + ', ';
        }
        if (inventDimInventDimension7)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventDimension7 + ', ';
        }
        if (inventDimInventDimension8)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventDimension8 + ', ';
        }
        if (inventDimInventDimension9)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventDimension9 + ', ';
        }
        if (inventDimInventDimension10)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventDimension10 + ', ';
        }
        if (inventDimInventDimension11)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventDimension11 + ', ';
        }
        if (inventDimInventDimension12)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventDimension12 + ', ';
        }
        if (inventDimConfigId)
        {
            sqlStmt += inventDimTableName + '.' + inventDimConfigId + ', ';
        }
        if (inventDimInventBatchId)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventBatchId + ', ';
        }
        if (inventDimInventColorId)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventColorId + ', ';
        }
        if (inventDimInventGtdId_RU)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventGtdId_RU + ', ';
        }
        if (inventDimInventLocationId)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventLocationId + ', ';
        }
        if (inventDimInventOwnerId_RU)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventOwnerId_RU + ', ';
        }
        if (inventDimInventProfileId_RU)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventProfileId_RU + ', ';
        }
        if (inventDimInventSerialId)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventSerialId + ', ';
        }
        if (inventDimInventSiteId)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventSiteId + ', ';
        }
        if (inventDimInventSizeId)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventSizeId + ', ';
        }
        if (inventDimInventStatusId)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventStatusId + ', ';
        }
        if (inventDimInventStyleId)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventStyleId + ', ';
        }
        if (inventDimInventVersionId)
        {
            sqlStmt += inventDimTableName + '.' + inventDimInventVersionId + ', ';
        }
        if (inventDimLicensePlateId)
        {
            sqlStmt += inventDimTableName + '.' + inventDimLicensePlateId + ', ';
        }
        if (inventDimWMSLocationId)
        {
            sqlStmt += inventDimTableName + '.' + inventDimWMSLocationId + ', ';
        }
        if (inventDimWMSPalletId)
        {
            sqlStmt += inventDimTableName + '.' + inventDimWMSPalletId + ', ';
        }

        sqlStmt += inventDimTableName + '.' + inventDimInventDimId + ' ';

        sqlStmt += 'FROM ' + inventDimTableName + ' ';
        sqlStmt += 'WHERE ' + inventDimTableName + '.' + inventDimSHA3HashHex + ' = \'\' ';
        
        SysSqlSystem sqlSystem = new SysSqlSystem();
        sqlStmt += 'AND ' + inventDimTableName + '.' + inventDimDataAreaId + ' = ' + '\'' + curext() + '\' ';
        sqlStmt += 'AND ' + inventDimTableName + '.' + inventDimPartition + ' = ' + sqlSystem.sqlLiteral(getcurrentpartitionrecid()) + ' ';
 
        sqlStmt += this.additionalConditionToWhereClause(inventDimTableName);

        if (_numThreads > 0 && _bucketNumber >= 0)
        {
            sqlStmt += ' AND ( ' + inventDimTableName + '.' + inventDimRecId + ' ';
            sqlStmt += strFmt("% %1) = %2 ", _numThreads, _bucketNumber);
        }
        sqlStmt += 'END';

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalConditionToWhereClause</Name>
				<Source><![CDATA[
	/// <summary>
    /// Returns a string that will be appended as range to the WHERE clause.
    /// </summary>
    /// <param name = "_inventDimTableName">The name of the InventDim table as it is used in the SQL string.</param>
    /// <returns>A string that will be appended as range to the WHERE clause</returns>
    [Wrappable(true)]
    internal str additionalConditionToWhereClause(str _inventDimTableName)
    {
		//this is blank but extensions can append to it.
        return '';
	}

]]></Source>
			</Method>
			<Method>
				<Name>refreshSHA3Generator</Name>
				<Source><![CDATA[
    private void refreshSHA3Generator(ResultSet _set, InventDimUpgradeHash3Code _inventDimUpgradeHash3Code, InventDimSHA3HashHexGenerator _inventDimSHA3HashHexGenerator)
    {
        #InventDimDevelop
        _inventDimSHA3HashHexGenerator.resetFieldValue();
        ResultSetMetaData metadata = _set.getMetaData();

        for (int i = 1; i <= metadata.getColumnCount(); i++)
        {
            switch (metadata.getColumnName(i))
            {
                case inventDimInventDimId:
                    _inventDimUpgradeHash3Code.InventDimId = _set.getString(i);
                    break;
                case inventDimConfigId:
                    _inventDimSHA3HashHexGenerator.ConfigId = _set.getString(i);
                    break;
                case inventDimInventBatchId:
                    _inventDimSHA3HashHexGenerator.InventBatchId = _set.getString(i);
                    break;
                case inventDimInventColorId:
                    _inventDimSHA3HashHexGenerator.InventColorId = _set.getString(i);
                    break;
                case inventDimInventGtdId_RU:
                    _inventDimSHA3HashHexGenerator.InventGtdId_RU = _set.getString(i);
                    break;
                case inventDimInventLocationId:
                    _inventDimSHA3HashHexGenerator.InventLocationId = _set.getString(i);
                    break;
                case inventDimInventOwnerId_RU:
                    _inventDimSHA3HashHexGenerator.InventOwnerId_RU = _set.getString(i);
                    break;
                case inventDimInventProfileId_RU:
                    _inventDimSHA3HashHexGenerator.InventProfileId_RU = _set.getString(i);
                    break;
                case inventDimInventSerialId:
                    _inventDimSHA3HashHexGenerator.InventSerialId = _set.getString(i);
                    break;
                case inventDimInventSiteId:
                    _inventDimSHA3HashHexGenerator.InventSiteId = _set.getString(i);
                    break;
                case inventDimInventSizeId:
                    _inventDimSHA3HashHexGenerator.InventSizeId = _set.getString(i);
                    break;
                case inventDimInventStatusId:
                    _inventDimSHA3HashHexGenerator.InventStatusId = _set.getString(i);
                    break;
                case inventDimInventStyleId:
                    _inventDimSHA3HashHexGenerator.InventStyleId = _set.getString(i);
                    break;
                case inventDimLicensePlateId:
                    _inventDimSHA3HashHexGenerator.LicensePlateId = _set.getString(i);
                    break;
                case inventDimWMSlocationId:
                    _inventDimSHA3HashHexGenerator.WMSlocationId = _set.getString(i);
                    break;
                case inventDimwMSPalletId:
                    _inventDimSHA3HashHexGenerator.wMSPalletId = _set.getString(i);
                    break;
                case inventDimInventVersionId:
                    _inventDimSHA3HashHexGenerator.InventVersionId = _set.getString(i);
                    break;
                case inventDimInventDimension1:
                    _inventDimSHA3HashHexGenerator.InventDimension1= _set.getString(i);
                    break;
                case inventDimInventDimension2:
                    _inventDimSHA3HashHexGenerator.InventDimension2 = _set.getString(i);
                    break;
                case inventDimInventDimension3:
                    _inventDimSHA3HashHexGenerator.InventDimension3 = _set.getString(i);
                    break;
                case inventDimInventDimension4:
                    _inventDimSHA3HashHexGenerator.InventDimension4 = _set.getString(i);
                    break;
                case inventDimInventDimension5:
                    _inventDimSHA3HashHexGenerator.InventDimension5 = _set.getString(i);
                    break;
                case inventDimInventDimension6:
                    _inventDimSHA3HashHexGenerator.InventDimension6 = _set.getString(i);
                    break;
                case inventDimInventDimension7:
                    _inventDimSHA3HashHexGenerator.InventDimension7 = _set.getString(i);
                    break;
                case inventDimInventDimension8:
                    _inventDimSHA3HashHexGenerator.InventDimension8 = _set.getString(i);
                    break;
                case inventDimInventDimension9:
                    _inventDimSHA3HashHexGenerator.InventDimension9 = _set.getDateTime(i);
                    break;
                case inventDimInventDimension10:
                    _inventDimSHA3HashHexGenerator.InventDimension10 = _set.getReal(i);
                    break;
                case inventDimInventDimension11:
                    _inventDimSHA3HashHexGenerator.InventDimension11 = _set.getString(i);
                    break;
                case inventDimInventDimension12:
                    _inventDimSHA3HashHexGenerator.InventDimension12 = _set.getString(i);
                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>